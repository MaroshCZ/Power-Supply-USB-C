
STM32G0_USBPD_Sink_1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b340  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000187c  0801b400  0801b400  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc7c  0801cc7c  000301bc  2**0
                  CONTENTS
  4 .ARM          00000008  0801cc7c  0801cc7c  0002cc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cc84  0801cc84  000301bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cc84  0801cc84  0002cc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cc88  0801cc88  0002cc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  0801cc8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00003434  200001bc  0801ce48  000301bc  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200035f0  0801ce48  000335f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY
 12 .comment      000041e7  00000000  00000000  000301ea  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  000343d1  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  00034710  2**2
                  CONTENTS, READONLY
 15 .debug_info   00034567  00000000  00000000  00034734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008273  00000000  00000000  00068c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e98  00000000  00000000  00070f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000024ba  00000000  00000000  00073da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002adb9  00000000  00000000  00076262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00035b29  00000000  00000000  000a101b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ee856  00000000  00000000  000d6b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000bb48  00000000  00000000  001c539c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  001d0ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001bc 	.word	0x200001bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801b3d8 	.word	0x0801b3d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001c0 	.word	0x200001c0
 8000104:	0801b3d8 	.word	0x0801b3d8

08000108 <USBPD_CAD_Init>:
 8000108:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	0015      	movs	r5, r2
 800010e:	001e      	movs	r6, r3
 8000110:	2400      	movs	r4, #0
 8000112:	4668      	mov	r0, sp
 8000114:	7a00      	ldrb	r0, [r0, #8]
 8000116:	2803      	cmp	r0, #3
 8000118:	d301      	bcc.n	800011e <USBPD_CAD_Init+0x16>
 800011a:	2401      	movs	r4, #1
 800011c:	e01f      	b.n	800015e <USBPD_CAD_Init+0x56>
 800011e:	9100      	str	r1, [sp, #0]
 8000120:	2900      	cmp	r1, #0
 8000122:	d101      	bne.n	8000128 <USBPD_CAD_Init+0x20>
 8000124:	2402      	movs	r4, #2
 8000126:	e01a      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000128:	200c      	movs	r0, #12
 800012a:	f01a fc03 	bl	801a934 <malloc>
 800012e:	0007      	movs	r7, r0
 8000130:	d101      	bne.n	8000136 <USBPD_CAD_Init+0x2e>
 8000132:	2403      	movs	r4, #3
 8000134:	e013      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000136:	210c      	movs	r1, #12
 8000138:	f01a fdbd 	bl	801acb6 <__aeabi_memclr>
 800013c:	603e      	str	r6, [r7, #0]
 800013e:	723c      	strb	r4, [r7, #8]
 8000140:	9800      	ldr	r0, [sp, #0]
 8000142:	6078      	str	r0, [r7, #4]
 8000144:	484a      	ldr	r0, [pc, #296]	; (8000270 <.text_6>)
 8000146:	4669      	mov	r1, sp
 8000148:	7a09      	ldrb	r1, [r1, #8]
 800014a:	0089      	lsls	r1, r1, #2
 800014c:	5047      	str	r7, [r0, r1]
 800014e:	9800      	ldr	r0, [sp, #0]
 8000150:	6843      	ldr	r3, [r0, #4]
 8000152:	0032      	movs	r2, r6
 8000154:	0029      	movs	r1, r5
 8000156:	4668      	mov	r0, sp
 8000158:	7a00      	ldrb	r0, [r0, #8]
 800015a:	f00d f91f 	bl	800d39c <CAD_Init>
 800015e:	0020      	movs	r0, r4
 8000160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000162 <USBPD_CAD_PortEnable>:
 8000162:	2803      	cmp	r0, #3
 8000164:	d203      	bcs.n	800016e <USBPD_CAD_PortEnable+0xc>
 8000166:	4a42      	ldr	r2, [pc, #264]	; (8000270 <.text_6>)
 8000168:	0080      	lsls	r0, r0, #2
 800016a:	5810      	ldr	r0, [r2, r0]
 800016c:	7201      	strb	r1, [r0, #8]
 800016e:	4770      	bx	lr

08000170 <USBPD_CAD_Process>:
 8000170:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000172:	2400      	movs	r4, #0
 8000174:	4669      	mov	r1, sp
 8000176:	700c      	strb	r4, [r1, #0]
 8000178:	9401      	str	r4, [sp, #4]
 800017a:	2500      	movs	r5, #0
 800017c:	43ed      	mvns	r5, r5
 800017e:	4f3d      	ldr	r7, [pc, #244]	; (8000274 <.text_7>)
 8000180:	483b      	ldr	r0, [pc, #236]	; (8000270 <.text_6>)
 8000182:	00a1      	lsls	r1, r4, #2
 8000184:	1846      	adds	r6, r0, r1
 8000186:	6830      	ldr	r0, [r6, #0]
 8000188:	2800      	cmp	r0, #0
 800018a:	d06c      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800018c:	7a00      	ldrb	r0, [r0, #8]
 800018e:	2801      	cmp	r0, #1
 8000190:	d169      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 8000192:	aa01      	add	r2, sp, #4
 8000194:	4669      	mov	r1, sp
 8000196:	b2e0      	uxtb	r0, r4
 8000198:	f00d faa8 	bl	800d6ec <CAD_StateMachine>
 800019c:	42a8      	cmp	r0, r5
 800019e:	d800      	bhi.n	80001a2 <USBPD_CAD_Process+0x32>
 80001a0:	0005      	movs	r5, r0
 80001a2:	4668      	mov	r0, sp
 80001a4:	7800      	ldrb	r0, [r0, #0]
 80001a6:	2801      	cmp	r0, #1
 80001a8:	d004      	beq.n	80001b4 <USBPD_CAD_Process+0x44>
 80001aa:	2802      	cmp	r0, #2
 80001ac:	d012      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001ae:	2804      	cmp	r0, #4
 80001b0:	d010      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001b2:	e040      	b.n	8000236 <USBPD_CAD_Process+0xc6>
 80001b4:	6830      	ldr	r0, [r6, #0]
 80001b6:	6801      	ldr	r1, [r0, #0]
 80001b8:	680a      	ldr	r2, [r1, #0]
 80001ba:	4b2f      	ldr	r3, [pc, #188]	; (8000278 <.text_8>)
 80001bc:	4013      	ands	r3, r2
 80001be:	600b      	str	r3, [r1, #0]
 80001c0:	6801      	ldr	r1, [r0, #0]
 80001c2:	680a      	ldr	r2, [r1, #0]
 80001c4:	23c0      	movs	r3, #192	; 0xc0
 80001c6:	439a      	bics	r2, r3
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	6800      	ldr	r0, [r0, #0]
 80001cc:	6801      	ldr	r1, [r0, #0]
 80001ce:	4039      	ands	r1, r7
 80001d0:	6001      	str	r1, [r0, #0]
 80001d2:	e034      	b.n	800023e <USBPD_CAD_Process+0xce>
 80001d4:	6830      	ldr	r0, [r6, #0]
 80001d6:	9901      	ldr	r1, [sp, #4]
 80001d8:	2901      	cmp	r1, #1
 80001da:	6801      	ldr	r1, [r0, #0]
 80001dc:	680a      	ldr	r2, [r1, #0]
 80001de:	d103      	bne.n	80001e8 <USBPD_CAD_Process+0x78>
 80001e0:	403a      	ands	r2, r7
 80001e2:	2380      	movs	r3, #128	; 0x80
 80001e4:	01db      	lsls	r3, r3, #7
 80001e6:	e002      	b.n	80001ee <USBPD_CAD_Process+0x7e>
 80001e8:	403a      	ands	r2, r7
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	019b      	lsls	r3, r3, #6
 80001ee:	4313      	orrs	r3, r2
 80001f0:	600b      	str	r3, [r1, #0]
 80001f2:	6801      	ldr	r1, [r0, #0]
 80001f4:	680b      	ldr	r3, [r1, #0]
 80001f6:	22c0      	movs	r2, #192	; 0xc0
 80001f8:	4393      	bics	r3, r2
 80001fa:	469c      	mov	ip, r3
 80001fc:	9a01      	ldr	r2, [sp, #4]
 80001fe:	0193      	lsls	r3, r2, #6
 8000200:	22c0      	movs	r2, #192	; 0xc0
 8000202:	401a      	ands	r2, r3
 8000204:	4663      	mov	r3, ip
 8000206:	431a      	orrs	r2, r3
 8000208:	600a      	str	r2, [r1, #0]
 800020a:	6801      	ldr	r1, [r0, #0]
 800020c:	680a      	ldr	r2, [r1, #0]
 800020e:	2380      	movs	r3, #128	; 0x80
 8000210:	015b      	lsls	r3, r3, #5
 8000212:	4313      	orrs	r3, r2
 8000214:	600b      	str	r3, [r1, #0]
 8000216:	6800      	ldr	r0, [r0, #0]
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	074a      	lsls	r2, r1, #29
 800021c:	0fd2      	lsrs	r2, r2, #31
 800021e:	d103      	bne.n	8000228 <USBPD_CAD_Process+0xb8>
 8000220:	2208      	movs	r2, #8
 8000222:	4391      	bics	r1, r2
 8000224:	6001      	str	r1, [r0, #0]
 8000226:	e002      	b.n	800022e <USBPD_CAD_Process+0xbe>
 8000228:	2208      	movs	r2, #8
 800022a:	430a      	orrs	r2, r1
 800022c:	6002      	str	r2, [r0, #0]
 800022e:	2168      	movs	r1, #104	; 0x68
 8000230:	b2e0      	uxtb	r0, r4
 8000232:	f000 f925 	bl	8000480 <USBPD_PE_Notification>
 8000236:	4668      	mov	r0, sp
 8000238:	7800      	ldrb	r0, [r0, #0]
 800023a:	2800      	cmp	r0, #0
 800023c:	d013      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800023e:	9a01      	ldr	r2, [sp, #4]
 8000240:	4668      	mov	r0, sp
 8000242:	7801      	ldrb	r1, [r0, #0]
 8000244:	b2e0      	uxtb	r0, r4
 8000246:	6833      	ldr	r3, [r6, #0]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4798      	blx	r3
 800024e:	4668      	mov	r0, sp
 8000250:	7800      	ldrb	r0, [r0, #0]
 8000252:	2801      	cmp	r0, #1
 8000254:	d003      	beq.n	800025e <USBPD_CAD_Process+0xee>
 8000256:	4668      	mov	r0, sp
 8000258:	7800      	ldrb	r0, [r0, #0]
 800025a:	2803      	cmp	r0, #3
 800025c:	d103      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 800025e:	2169      	movs	r1, #105	; 0x69
 8000260:	b2e0      	uxtb	r0, r4
 8000262:	f000 f90d 	bl	8000480 <USBPD_PE_Notification>
 8000266:	1c64      	adds	r4, r4, #1
 8000268:	2c03      	cmp	r4, #3
 800026a:	d389      	bcc.n	8000180 <USBPD_CAD_Process+0x10>
 800026c:	0028      	movs	r0, r5
 800026e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000270 <.text_6>:
 8000270:	200001d8 	.word	0x200001d8

08000274 <.text_7>:
 8000274:	ffff9fff 	.word	0xffff9fff

08000278 <.text_8>:
 8000278:	ffffefff 	.word	0xffffefff

0800027c <USBPD_CAD_AssertRd>:
 800027c:	b510      	push	{r4, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	f00e ff00 	bl	800f084 <USBPDM1_DeAssertRp>
 8000284:	0020      	movs	r0, r4
 8000286:	f00e ff07 	bl	800f098 <USBPDM1_AssertRd>
 800028a:	bd10      	pop	{r4, pc}

0800028c <USBPD_CAD_AssertRp>:
 800028c:	b510      	push	{r4, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	f00e ffa8 	bl	800f1e4 <USBPDM1_DeAssertRd>
 8000294:	0020      	movs	r0, r4
 8000296:	f00e fe3d 	bl	800ef14 <USBPDM1_AssertRp>
 800029a:	bd10      	pop	{r4, pc}

0800029c <USBPD_CAD_EnterErrorRecovery>:
 800029c:	b580      	push	{r7, lr}
 800029e:	f00d f95f 	bl	800d560 <CAD_Enter_ErrorRecovery>
 80002a2:	bd01      	pop	{r0, pc}

080002a4 <USBPD_CAD_SRC_SetRpResistor>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	2404      	movs	r4, #4
 80002a8:	f00d f9c4 	bl	800d634 <CAD_Set_ResistorRp>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d100      	bne.n	80002b2 <USBPD_CAD_SRC_SetRpResistor+0xe>
 80002b0:	2400      	movs	r4, #0
 80002b2:	0020      	movs	r0, r4
 80002b4:	bd10      	pop	{r4, pc}

080002b6 <USBPD_CAD_SetRpResistor>:
 80002b6:	b580      	push	{r7, lr}
 80002b8:	f7ff fff4 	bl	80002a4 <USBPD_CAD_SRC_SetRpResistor>
 80002bc:	bd02      	pop	{r1, pc}

080002be <USBPD_CAD_GetMemoryConsumption>:
 80002be:	2024      	movs	r0, #36	; 0x24
 80002c0:	4770      	bx	lr
	...

080002c4 <USBPD_PE_Init>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	000e      	movs	r6, r1
 80002c8:	0017      	movs	r7, r2
 80002ca:	001c      	movs	r4, r3
 80002cc:	6871      	ldr	r1, [r6, #4]
 80002ce:	070a      	lsls	r2, r1, #28
 80002d0:	0fd2      	lsrs	r2, r2, #31
 80002d2:	d002      	beq.n	80002da <USBPD_PE_Init+0x16>
 80002d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d002      	beq.n	80002e0 <USBPD_PE_Init+0x1c>
 80002da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80002dc:	2900      	cmp	r1, #0
 80002de:	d101      	bne.n	80002e4 <USBPD_PE_Init+0x20>
 80002e0:	241b      	movs	r4, #27
 80002e2:	e04a      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002e4:	4669      	mov	r1, sp
 80002e6:	7008      	strb	r0, [r1, #0]
 80002e8:	4668      	mov	r0, sp
 80002ea:	7800      	ldrb	r0, [r0, #0]
 80002ec:	2803      	cmp	r0, #3
 80002ee:	d301      	bcc.n	80002f4 <USBPD_PE_Init+0x30>
 80002f0:	2417      	movs	r4, #23
 80002f2:	e042      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002f4:	2096      	movs	r0, #150	; 0x96
 80002f6:	00c0      	lsls	r0, r0, #3
 80002f8:	f01a fb1c 	bl	801a934 <malloc>
 80002fc:	0005      	movs	r5, r0
 80002fe:	d101      	bne.n	8000304 <USBPD_PE_Init+0x40>
 8000300:	2416      	movs	r4, #22
 8000302:	e03a      	b.n	800037a <USBPD_PE_Init+0xb6>
 8000304:	2196      	movs	r1, #150	; 0x96
 8000306:	00c9      	lsls	r1, r1, #3
 8000308:	f01a fcd5 	bl	801acb6 <__aeabi_memclr>
 800030c:	487a      	ldr	r0, [pc, #488]	; (80004f8 <.text_16>)
 800030e:	4669      	mov	r1, sp
 8000310:	7809      	ldrb	r1, [r1, #0]
 8000312:	0089      	lsls	r1, r1, #2
 8000314:	5045      	str	r5, [r0, r1]
 8000316:	602e      	str	r6, [r5, #0]
 8000318:	606f      	str	r7, [r5, #4]
 800031a:	4668      	mov	r0, sp
 800031c:	7800      	ldrb	r0, [r0, #0]
 800031e:	7428      	strb	r0, [r5, #16]
 8000320:	60ac      	str	r4, [r5, #8]
 8000322:	4876      	ldr	r0, [pc, #472]	; (80004fc <.text_17>)
 8000324:	182b      	adds	r3, r5, r0
 8000326:	4876      	ldr	r0, [pc, #472]	; (8000500 <.text_18>)
 8000328:	182a      	adds	r2, r5, r0
 800032a:	0031      	movs	r1, r6
 800032c:	4668      	mov	r0, sp
 800032e:	7800      	ldrb	r0, [r0, #0]
 8000330:	f005 f98c 	bl	800564c <USBPD_PRL_Init>
 8000334:	0004      	movs	r4, r0
 8000336:	d120      	bne.n	800037a <USBPD_PE_Init+0xb6>
 8000338:	6868      	ldr	r0, [r5, #4]
 800033a:	6801      	ldr	r1, [r0, #0]
 800033c:	2703      	movs	r7, #3
 800033e:	682a      	ldr	r2, [r5, #0]
 8000340:	6852      	ldr	r2, [r2, #4]
 8000342:	0753      	lsls	r3, r2, #29
 8000344:	0fdb      	lsrs	r3, r3, #31
 8000346:	d006      	beq.n	8000356 <USBPD_PE_Init+0x92>
 8000348:	2208      	movs	r2, #8
 800034a:	430a      	orrs	r2, r1
 800034c:	6002      	str	r2, [r0, #0]
 800034e:	6873      	ldr	r3, [r6, #4]
 8000350:	403b      	ands	r3, r7
 8000352:	2201      	movs	r2, #1
 8000354:	e005      	b.n	8000362 <USBPD_PE_Init+0x9e>
 8000356:	2208      	movs	r2, #8
 8000358:	4391      	bics	r1, r2
 800035a:	6001      	str	r1, [r0, #0]
 800035c:	6873      	ldr	r3, [r6, #4]
 800035e:	403b      	ands	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	4611      	mov	r1, r2
 8000364:	4668      	mov	r0, sp
 8000366:	7800      	ldrb	r0, [r0, #0]
 8000368:	f005 f9ab 	bl	80056c2 <USBPD_PRL_SetHeader>
 800036c:	6870      	ldr	r0, [r6, #4]
 800036e:	4007      	ands	r7, r0
 8000370:	0039      	movs	r1, r7
 8000372:	4668      	mov	r0, sp
 8000374:	7800      	ldrb	r0, [r0, #0]
 8000376:	f005 f9e2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 800037a:	0020      	movs	r0, r4
 800037c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800037e <USBPD_PE_TimerCounter>:
 800037e:	495e      	ldr	r1, [pc, #376]	; (80004f8 <.text_16>)
 8000380:	0080      	lsls	r0, r0, #2
 8000382:	5808      	ldr	r0, [r1, r0]
 8000384:	49b4      	ldr	r1, [pc, #720]	; (8000658 <.text_20>)
 8000386:	084a      	lsrs	r2, r1, #1
 8000388:	8bc3      	ldrh	r3, [r0, #30]
 800038a:	4213      	tst	r3, r2
 800038c:	d002      	beq.n	8000394 <USBPD_PE_TimerCounter+0x16>
 800038e:	8bc3      	ldrh	r3, [r0, #30]
 8000390:	185b      	adds	r3, r3, r1
 8000392:	83c3      	strh	r3, [r0, #30]
 8000394:	8c03      	ldrh	r3, [r0, #32]
 8000396:	4213      	tst	r3, r2
 8000398:	d002      	beq.n	80003a0 <USBPD_PE_TimerCounter+0x22>
 800039a:	8c03      	ldrh	r3, [r0, #32]
 800039c:	185b      	adds	r3, r3, r1
 800039e:	8403      	strh	r3, [r0, #32]
 80003a0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a2:	4213      	tst	r3, r2
 80003a4:	d002      	beq.n	80003ac <USBPD_PE_TimerCounter+0x2e>
 80003a6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a8:	185b      	adds	r3, r3, r1
 80003aa:	84c3      	strh	r3, [r0, #38]	; 0x26
 80003ac:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003ae:	4213      	tst	r3, r2
 80003b0:	d002      	beq.n	80003b8 <USBPD_PE_TimerCounter+0x3a>
 80003b2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003b4:	185b      	adds	r3, r3, r1
 80003b6:	8443      	strh	r3, [r0, #34]	; 0x22
 80003b8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80003ba:	4213      	tst	r3, r2
 80003bc:	d002      	beq.n	80003c4 <USBPD_PE_TimerCounter+0x46>
 80003be:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80003c0:	1851      	adds	r1, r2, r1
 80003c2:	8481      	strh	r1, [r0, #36]	; 0x24
 80003c4:	4770      	bx	lr

080003c6 <USBPD_PE_TimerCounteUpdate>:
 80003c6:	b570      	push	{r4, r5, r6, lr}
 80003c8:	000e      	movs	r6, r1
 80003ca:	494b      	ldr	r1, [pc, #300]	; (80004f8 <.text_16>)
 80003cc:	0080      	lsls	r0, r0, #2
 80003ce:	580c      	ldr	r4, [r1, r0]
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0209      	lsls	r1, r1, #8
 80003d4:	428e      	cmp	r6, r1
 80003d6:	da28      	bge.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 80003d8:	1e4d      	subs	r5, r1, #1
 80003da:	8be0      	ldrh	r0, [r4, #30]
 80003dc:	4228      	tst	r0, r5
 80003de:	d004      	beq.n	80003ea <USBPD_PE_TimerCounteUpdate+0x24>
 80003e0:	0031      	movs	r1, r6
 80003e2:	8be0      	ldrh	r0, [r4, #30]
 80003e4:	f000 ffcb 	bl	800137e <PE_UpdateTimer>
 80003e8:	83e0      	strh	r0, [r4, #30]
 80003ea:	8c20      	ldrh	r0, [r4, #32]
 80003ec:	4228      	tst	r0, r5
 80003ee:	d004      	beq.n	80003fa <USBPD_PE_TimerCounteUpdate+0x34>
 80003f0:	0031      	movs	r1, r6
 80003f2:	8c20      	ldrh	r0, [r4, #32]
 80003f4:	f000 ffc3 	bl	800137e <PE_UpdateTimer>
 80003f8:	8420      	strh	r0, [r4, #32]
 80003fa:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80003fc:	4228      	tst	r0, r5
 80003fe:	d004      	beq.n	800040a <USBPD_PE_TimerCounteUpdate+0x44>
 8000400:	0031      	movs	r1, r6
 8000402:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8000404:	f000 ffbb 	bl	800137e <PE_UpdateTimer>
 8000408:	84e0      	strh	r0, [r4, #38]	; 0x26
 800040a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800040c:	4228      	tst	r0, r5
 800040e:	d004      	beq.n	800041a <USBPD_PE_TimerCounteUpdate+0x54>
 8000410:	0031      	movs	r1, r6
 8000412:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8000414:	f000 ffb3 	bl	800137e <PE_UpdateTimer>
 8000418:	8460      	strh	r0, [r4, #34]	; 0x22
 800041a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800041c:	4228      	tst	r0, r5
 800041e:	d004      	beq.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 8000420:	0031      	movs	r1, r6
 8000422:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8000424:	f000 ffab 	bl	800137e <PE_UpdateTimer>
 8000428:	84a0      	strh	r0, [r4, #36]	; 0x24
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <USBPD_PE_IsCableConnected>:
 800042c:	b510      	push	{r4, lr}
 800042e:	4a32      	ldr	r2, [pc, #200]	; (80004f8 <.text_16>)
 8000430:	0080      	lsls	r0, r0, #2
 8000432:	5810      	ldr	r0, [r2, r0]
 8000434:	6842      	ldr	r2, [r0, #4]
 8000436:	6813      	ldr	r3, [r2, #0]
 8000438:	4cb2      	ldr	r4, [pc, #712]	; (8000704 <.text_22>)
 800043a:	401c      	ands	r4, r3
 800043c:	0309      	lsls	r1, r1, #12
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	015b      	lsls	r3, r3, #5
 8000442:	4019      	ands	r1, r3
 8000444:	4321      	orrs	r1, r4
 8000446:	6011      	str	r1, [r2, #0]
 8000448:	2148      	movs	r1, #72	; 0x48
 800044a:	7441      	strb	r1, [r0, #17]
 800044c:	bd10      	pop	{r4, pc}

0800044e <USBPD_PE_StateMachine_Reset>:
 800044e:	2148      	movs	r1, #72	; 0x48
 8000450:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <.text_16>)
 8000452:	0080      	lsls	r0, r0, #2
 8000454:	5810      	ldr	r0, [r2, r0]
 8000456:	7441      	strb	r1, [r0, #17]
 8000458:	4770      	bx	lr

0800045a <USBPD_PE_StateMachine_Stop>:
 800045a:	b580      	push	{r7, lr}
 800045c:	f005 fc34 	bl	8005cc8 <USBPD_PRL_Stop>
 8000460:	bd01      	pop	{r0, pc}

08000462 <USBPD_PE_StateMachine_DRP>:
 8000462:	b580      	push	{r7, lr}
 8000464:	4924      	ldr	r1, [pc, #144]	; (80004f8 <.text_16>)
 8000466:	0082      	lsls	r2, r0, #2
 8000468:	5889      	ldr	r1, [r1, r2]
 800046a:	6849      	ldr	r1, [r1, #4]
 800046c:	6809      	ldr	r1, [r1, #0]
 800046e:	074a      	lsls	r2, r1, #29
 8000470:	0fd2      	lsrs	r2, r2, #31
 8000472:	d002      	beq.n	800047a <USBPD_PE_StateMachine_DRP+0x18>
 8000474:	f002 fb8a 	bl	8002b8c <USBPD_PE_StateMachine_SRC>
 8000478:	bd02      	pop	{r1, pc}
 800047a:	f001 fcd5 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 800047e:	bd02      	pop	{r1, pc}

08000480 <USBPD_PE_Notification>:
 8000480:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000482:	0004      	movs	r4, r0
 8000484:	2803      	cmp	r0, #3
 8000486:	d211      	bcs.n	80004ac <USBPD_PE_Notification+0x2c>
 8000488:	000d      	movs	r5, r1
 800048a:	2000      	movs	r0, #0
 800048c:	9000      	str	r0, [sp, #0]
 800048e:	2300      	movs	r3, #0
 8000490:	002a      	movs	r2, r5
 8000492:	0021      	movs	r1, r4
 8000494:	2009      	movs	r0, #9
 8000496:	4eb2      	ldr	r6, [pc, #712]	; (8000760 <.text_24>)
 8000498:	6836      	ldr	r6, [r6, #0]
 800049a:	47b0      	blx	r6
 800049c:	0029      	movs	r1, r5
 800049e:	0020      	movs	r0, r4
 80004a0:	4ab0      	ldr	r2, [pc, #704]	; (8000764 <.text_25>)
 80004a2:	00a3      	lsls	r3, r4, #2
 80004a4:	58d2      	ldr	r2, [r2, r3]
 80004a6:	6892      	ldr	r2, [r2, #8]
 80004a8:	68d2      	ldr	r2, [r2, #12]
 80004aa:	4790      	blx	r2
 80004ac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080004ae <USBPD_PE_InitVDM_Callback>:
 80004ae:	4aad      	ldr	r2, [pc, #692]	; (8000764 <.text_25>)
 80004b0:	0080      	lsls	r0, r0, #2
 80004b2:	5810      	ldr	r0, [r2, r0]
 80004b4:	60c1      	str	r1, [r0, #12]
 80004b6:	4770      	bx	lr

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	49aa      	ldr	r1, [pc, #680]	; (8000764 <.text_25>)
 80004bc:	0082      	lsls	r2, r0, #2
 80004be:	5889      	ldr	r1, [r1, r2]
 80004c0:	220f      	movs	r2, #15
 80004c2:	2332      	movs	r3, #50	; 0x32
 80004c4:	54ca      	strb	r2, [r1, r3]
 80004c6:	6889      	ldr	r1, [r1, #8]
 80004c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004ca:	4788      	blx	r1
 80004cc:	2000      	movs	r0, #0
 80004ce:	bd02      	pop	{r1, pc}

080004d0 <USBPD_PE_Request_CableReset>:
 80004d0:	b580      	push	{r7, lr}
 80004d2:	4909      	ldr	r1, [pc, #36]	; (80004f8 <.text_16>)
 80004d4:	0082      	lsls	r2, r0, #2
 80004d6:	5889      	ldr	r1, [r1, r2]
 80004d8:	684a      	ldr	r2, [r1, #4]
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	4ba2      	ldr	r3, [pc, #648]	; (8000768 <.text_26>)
 80004de:	4013      	ands	r3, r2
 80004e0:	4aa2      	ldr	r2, [pc, #648]	; (800076c <.text_27>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d105      	bne.n	80004f2 <USBPD_PE_Request_CableReset+0x22>
 80004e6:	2299      	movs	r2, #153	; 0x99
 80004e8:	2332      	movs	r3, #50	; 0x32
 80004ea:	54ca      	strb	r2, [r1, r3]
 80004ec:	6889      	ldr	r1, [r1, #8]
 80004ee:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004f0:	4788      	blx	r1
 80004f2:	2010      	movs	r0, #16
 80004f4:	bd02      	pop	{r1, pc}
	...

080004f8 <.text_16>:
 80004f8:	200001e4 	.word	0x200001e4

080004fc <.text_17>:
 80004fc:	0000048e 	.word	0x0000048e

08000500 <.text_18>:
 8000500:	00000281 	.word	0x00000281

08000504 <USBPD_PE_Request_CtrlMessage>:
 8000504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	4896      	ldr	r0, [pc, #600]	; (8000764 <.text_25>)
 800050a:	a916      	add	r1, sp, #88	; 0x58
 800050c:	7809      	ldrb	r1, [r1, #0]
 800050e:	0089      	lsls	r1, r1, #2
 8000510:	5840      	ldr	r0, [r0, r1]
 8000512:	9001      	str	r0, [sp, #4]
 8000514:	2400      	movs	r4, #0
 8000516:	a802      	add	r0, sp, #8
 8000518:	4995      	ldr	r1, [pc, #596]	; (8000770 <.text_28>)
 800051a:	224c      	movs	r2, #76	; 0x4c
 800051c:	f01a fbc0 	bl	801aca0 <__aeabi_memcpy>
 8000520:	2303      	movs	r3, #3
 8000522:	9801      	ldr	r0, [sp, #4]
 8000524:	2132      	movs	r1, #50	; 0x32
 8000526:	5c40      	ldrb	r0, [r0, r1]
 8000528:	2800      	cmp	r0, #0
 800052a:	d105      	bne.n	8000538 <USBPD_PE_Request_CtrlMessage+0x34>
 800052c:	9801      	ldr	r0, [sp, #4]
 800052e:	6840      	ldr	r0, [r0, #4]
 8000530:	6800      	ldr	r0, [r0, #0]
 8000532:	04c1      	lsls	r1, r0, #19
 8000534:	0fc9      	lsrs	r1, r1, #31
 8000536:	d101      	bne.n	800053c <USBPD_PE_Request_CtrlMessage+0x38>
 8000538:	2403      	movs	r4, #3
 800053a:	e089      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	6809      	ldr	r1, [r1, #0]
 8000540:	684a      	ldr	r2, [r1, #4]
 8000542:	0712      	lsls	r2, r2, #28
 8000544:	0fd5      	lsrs	r5, r2, #31
 8000546:	466a      	mov	r2, sp
 8000548:	7055      	strb	r5, [r2, #1]
 800054a:	2201      	movs	r2, #1
 800054c:	0885      	lsrs	r5, r0, #2
 800054e:	4015      	ands	r5, r2
 8000550:	d103      	bne.n	800055a <USBPD_PE_Request_CtrlMessage+0x56>
 8000552:	2502      	movs	r5, #2
 8000554:	466f      	mov	r7, sp
 8000556:	703c      	strb	r4, [r7, #0]
 8000558:	e003      	b.n	8000562 <USBPD_PE_Request_CtrlMessage+0x5e>
 800055a:	2500      	movs	r5, #0
 800055c:	2604      	movs	r6, #4
 800055e:	466f      	mov	r7, sp
 8000560:	703e      	strb	r6, [r7, #0]
 8000562:	0546      	lsls	r6, r0, #21
 8000564:	0f76      	lsrs	r6, r6, #29
 8000566:	2e03      	cmp	r6, #3
 8000568:	d101      	bne.n	800056e <USBPD_PE_Request_CtrlMessage+0x6a>
 800056a:	2608      	movs	r6, #8
 800056c:	e000      	b.n	8000570 <USBPD_PE_Request_CtrlMessage+0x6c>
 800056e:	2600      	movs	r6, #0
 8000570:	4018      	ands	r0, r3
 8000572:	2802      	cmp	r0, #2
 8000574:	d101      	bne.n	800057a <USBPD_PE_Request_CtrlMessage+0x76>
 8000576:	2040      	movs	r0, #64	; 0x40
 8000578:	e000      	b.n	800057c <USBPD_PE_Request_CtrlMessage+0x78>
 800057a:	2000      	movs	r0, #0
 800057c:	787f      	ldrb	r7, [r7, #1]
 800057e:	433d      	orrs	r5, r7
 8000580:	466f      	mov	r7, sp
 8000582:	783f      	ldrb	r7, [r7, #0]
 8000584:	432f      	orrs	r7, r5
 8000586:	433e      	orrs	r6, r7
 8000588:	4330      	orrs	r0, r6
 800058a:	4003      	ands	r3, r0
 800058c:	d002      	beq.n	8000594 <USBPD_PE_Request_CtrlMessage+0x90>
 800058e:	0003      	movs	r3, r0
 8000590:	2010      	movs	r0, #16
 8000592:	4318      	orrs	r0, r3
 8000594:	2505      	movs	r5, #5
 8000596:	4228      	tst	r0, r5
 8000598:	d002      	beq.n	80005a0 <USBPD_PE_Request_CtrlMessage+0x9c>
 800059a:	0003      	movs	r3, r0
 800059c:	2020      	movs	r0, #32
 800059e:	4318      	orrs	r0, r3
 80005a0:	ab17      	add	r3, sp, #92	; 0x5c
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	005e      	lsls	r6, r3, #1
 80005a6:	18f3      	adds	r3, r6, r3
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	ab02      	add	r3, sp, #8
 80005ac:	9e00      	ldr	r6, [sp, #0]
 80005ae:	5d9e      	ldrb	r6, [r3, r6]
 80005b0:	4030      	ands	r0, r6
 80005b2:	42b0      	cmp	r0, r6
 80005b4:	d11f      	bne.n	80005f6 <USBPD_PE_Request_CtrlMessage+0xf2>
 80005b6:	9e01      	ldr	r6, [sp, #4]
 80005b8:	2733      	movs	r7, #51	; 0x33
 80005ba:	55f4      	strb	r4, [r6, r7]
 80005bc:	9801      	ldr	r0, [sp, #4]
 80005be:	4eb2      	ldr	r6, [pc, #712]	; (8000888 <.text_30>)
 80005c0:	1980      	adds	r0, r0, r6
 80005c2:	ae17      	add	r6, sp, #92	; 0x5c
 80005c4:	7836      	ldrb	r6, [r6, #0]
 80005c6:	2e05      	cmp	r6, #5
 80005c8:	d031      	beq.n	800062e <USBPD_PE_Request_CtrlMessage+0x12a>
 80005ca:	2e0b      	cmp	r6, #11
 80005cc:	d00e      	beq.n	80005ec <USBPD_PE_Request_CtrlMessage+0xe8>
 80005ce:	2e0d      	cmp	r6, #13
 80005d0:	d028      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005d2:	2e11      	cmp	r6, #17
 80005d4:	d011      	beq.n	80005fa <USBPD_PE_Request_CtrlMessage+0xf6>
 80005d6:	2e12      	cmp	r6, #18
 80005d8:	d013      	beq.n	8000602 <USBPD_PE_Request_CtrlMessage+0xfe>
 80005da:	2e14      	cmp	r6, #20
 80005dc:	d013      	beq.n	8000606 <USBPD_PE_Request_CtrlMessage+0x102>
 80005de:	2e15      	cmp	r6, #21
 80005e0:	d017      	beq.n	8000612 <USBPD_PE_Request_CtrlMessage+0x10e>
 80005e2:	2e16      	cmp	r6, #22
 80005e4:	d00b      	beq.n	80005fe <USBPD_PE_Request_CtrlMessage+0xfa>
 80005e6:	2e18      	cmp	r6, #24
 80005e8:	d01c      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005ea:	e021      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	6889      	ldr	r1, [r1, #8]
 80005f0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d11c      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005f6:	2402      	movs	r4, #2
 80005f8:	e02a      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 80005fa:	2111      	movs	r1, #17
 80005fc:	e010      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 80005fe:	2116      	movs	r1, #22
 8000600:	e00e      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000602:	2112      	movs	r1, #18
 8000604:	e00c      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000606:	8909      	ldrh	r1, [r1, #8]
 8000608:	0889      	lsrs	r1, r1, #2
 800060a:	4211      	tst	r1, r2
 800060c:	d110      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800060e:	2410      	movs	r4, #16
 8000610:	e01e      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000612:	8909      	ldrh	r1, [r1, #8]
 8000614:	09c9      	lsrs	r1, r1, #7
 8000616:	4211      	tst	r1, r2
 8000618:	d101      	bne.n	800061e <USBPD_PE_Request_CtrlMessage+0x11a>
 800061a:	2010      	movs	r0, #16
 800061c:	e019      	b.n	8000652 <USBPD_PE_Request_CtrlMessage+0x14e>
 800061e:	2115      	movs	r1, #21
 8000620:	7001      	strb	r1, [r0, #0]
 8000622:	e005      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000624:	a918      	add	r1, sp, #96	; 0x60
 8000626:	7809      	ldrb	r1, [r1, #0]
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	55d1      	strb	r1, [r2, r7]
 800062c:	e000      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800062e:	7005      	strb	r5, [r0, #0]
 8000630:	9900      	ldr	r1, [sp, #0]
 8000632:	1859      	adds	r1, r3, r1
 8000634:	7849      	ldrb	r1, [r1, #1]
 8000636:	7041      	strb	r1, [r0, #1]
 8000638:	9800      	ldr	r0, [sp, #0]
 800063a:	1818      	adds	r0, r3, r0
 800063c:	7880      	ldrb	r0, [r0, #2]
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	2232      	movs	r2, #50	; 0x32
 8000642:	5488      	strb	r0, [r1, r2]
 8000644:	a816      	add	r0, sp, #88	; 0x58
 8000646:	7800      	ldrb	r0, [r0, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	6889      	ldr	r1, [r1, #8]
 800064c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800064e:	4788      	blx	r1
 8000650:	0020      	movs	r0, r4
 8000652:	b019      	add	sp, #100	; 0x64
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000658 <.text_20>:
 8000658:	0000ffff 	.word	0x0000ffff

0800065c <USBPD_PE_Request_DataMessage>:
 800065c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	000b      	movs	r3, r1
 8000662:	0017      	movs	r7, r2
 8000664:	483f      	ldr	r0, [pc, #252]	; (8000764 <.text_25>)
 8000666:	4669      	mov	r1, sp
 8000668:	7a09      	ldrb	r1, [r1, #8]
 800066a:	0089      	lsls	r1, r1, #2
 800066c:	5841      	ldr	r1, [r0, r1]
 800066e:	2402      	movs	r4, #2
 8000670:	2032      	movs	r0, #50	; 0x32
 8000672:	5c08      	ldrb	r0, [r1, r0]
 8000674:	2800      	cmp	r0, #0
 8000676:	d105      	bne.n	8000684 <USBPD_PE_Request_DataMessage+0x28>
 8000678:	2001      	movs	r0, #1
 800067a:	684a      	ldr	r2, [r1, #4]
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	0b12      	lsrs	r2, r2, #12
 8000680:	4002      	ands	r2, r0
 8000682:	d101      	bne.n	8000688 <USBPD_PE_Request_DataMessage+0x2c>
 8000684:	2403      	movs	r4, #3
 8000686:	e021      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 8000688:	466a      	mov	r2, sp
 800068a:	7013      	strb	r3, [r2, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2533      	movs	r5, #51	; 0x33
 8000690:	554a      	strb	r2, [r1, r5]
 8000692:	000b      	movs	r3, r1
 8000694:	3332      	adds	r3, #50	; 0x32
 8000696:	4dc0      	ldr	r5, [pc, #768]	; (8000998 <.text_36>)
 8000698:	4ec0      	ldr	r6, [pc, #768]	; (800099c <.text_37>)
 800069a:	9701      	str	r7, [sp, #4]
 800069c:	466f      	mov	r7, sp
 800069e:	783f      	ldrb	r7, [r7, #0]
 80006a0:	2f01      	cmp	r7, #1
 80006a2:	d004      	beq.n	80006ae <USBPD_PE_Request_DataMessage+0x52>
 80006a4:	2f06      	cmp	r7, #6
 80006a6:	d013      	beq.n	80006d0 <USBPD_PE_Request_DataMessage+0x74>
 80006a8:	2f07      	cmp	r7, #7
 80006aa:	d01b      	beq.n	80006e4 <USBPD_PE_Request_DataMessage+0x88>
 80006ac:	e027      	b.n	80006fe <USBPD_PE_Request_DataMessage+0xa2>
 80006ae:	684d      	ldr	r5, [r1, #4]
 80006b0:	682d      	ldr	r5, [r5, #0]
 80006b2:	08ad      	lsrs	r5, r5, #2
 80006b4:	4005      	ands	r5, r0
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006b8:	4cc1      	ldr	r4, [pc, #772]	; (80009c0 <.text_39>)
 80006ba:	5508      	strb	r0, [r1, r4]
 80006bc:	2007      	movs	r0, #7
 80006be:	7018      	strb	r0, [r3, #0]
 80006c0:	2400      	movs	r4, #0
 80006c2:	4668      	mov	r0, sp
 80006c4:	7a00      	ldrb	r0, [r0, #8]
 80006c6:	6889      	ldr	r1, [r1, #8]
 80006c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80006ca:	4788      	blx	r1
 80006cc:	0020      	movs	r0, r4
 80006ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d0:	6848      	ldr	r0, [r1, #4]
 80006d2:	6800      	ldr	r0, [r0, #0]
 80006d4:	4006      	ands	r6, r0
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d1f8      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006da:	9801      	ldr	r0, [sp, #4]
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	6288      	str	r0, [r1, #40]	; 0x28
 80006e0:	202b      	movs	r0, #43	; 0x2b
 80006e2:	e7ec      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006e4:	6848      	ldr	r0, [r1, #4]
 80006e6:	6800      	ldr	r0, [r0, #0]
 80006e8:	4006      	ands	r6, r0
 80006ea:	42ae      	cmp	r6, r5
 80006ec:	d1ee      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006ee:	9801      	ldr	r0, [sp, #4]
 80006f0:	6800      	ldr	r0, [r0, #0]
 80006f2:	6288      	str	r0, [r1, #40]	; 0x28
 80006f4:	205d      	movs	r0, #93	; 0x5d
 80006f6:	4cb2      	ldr	r4, [pc, #712]	; (80009c0 <.text_39>)
 80006f8:	5508      	strb	r0, [r1, r4]
 80006fa:	2062      	movs	r0, #98	; 0x62
 80006fc:	e7df      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006fe:	2410      	movs	r4, #16
 8000700:	e7e4      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
	...

08000704 <.text_22>:
 8000704:	ffffefff 	.word	0xffffefff

08000708 <USBPD_PE_Send_Request>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	000b      	movs	r3, r1
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <.text_25>)
 800070e:	0084      	lsls	r4, r0, #2
 8000710:	590d      	ldr	r5, [r1, r4]
 8000712:	2102      	movs	r1, #2
 8000714:	2432      	movs	r4, #50	; 0x32
 8000716:	5d2c      	ldrb	r4, [r5, r4]
 8000718:	2c00      	cmp	r4, #0
 800071a:	d104      	bne.n	8000726 <USBPD_PE_Send_Request+0x1e>
 800071c:	686c      	ldr	r4, [r5, #4]
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	04e6      	lsls	r6, r4, #19
 8000722:	0ff6      	lsrs	r6, r6, #31
 8000724:	d101      	bne.n	800072a <USBPD_PE_Send_Request+0x22>
 8000726:	2103      	movs	r1, #3
 8000728:	e017      	b.n	800075a <USBPD_PE_Send_Request+0x52>
 800072a:	4ea6      	ldr	r6, [pc, #664]	; (80009c4 <.text_40>)
 800072c:	4026      	ands	r6, r4
 800072e:	24c0      	movs	r4, #192	; 0xc0
 8000730:	00a4      	lsls	r4, r4, #2
 8000732:	42a6      	cmp	r6, r4
 8000734:	d111      	bne.n	800075a <USBPD_PE_Send_Request+0x52>
 8000736:	2145      	movs	r1, #69	; 0x45
 8000738:	2432      	movs	r4, #50	; 0x32
 800073a:	5529      	strb	r1, [r5, r4]
 800073c:	61ab      	str	r3, [r5, #24]
 800073e:	6969      	ldr	r1, [r5, #20]
 8000740:	2318      	movs	r3, #24
 8000742:	4399      	bics	r1, r3
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	4013      	ands	r3, r2
 8000748:	430b      	orrs	r3, r1
 800074a:	616b      	str	r3, [r5, #20]
 800074c:	2400      	movs	r4, #0
 800074e:	2233      	movs	r2, #51	; 0x33
 8000750:	54ac      	strb	r4, [r5, r2]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000756:	4788      	blx	r1
 8000758:	2100      	movs	r1, #0
 800075a:	0008      	movs	r0, r1
 800075c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000760 <.text_24>:
 8000760:	20000000 	.word	0x20000000

08000764 <.text_25>:
 8000764:	200001e4 	.word	0x200001e4

08000768 <.text_26>:
 8000768:	00008708 	.word	0x00008708

0800076c <.text_27>:
 800076c:	00008308 	.word	0x00008308

08000770 <.text_28>:
 8000770:	0801c304 	.word	0x0801c304

08000774 <USBPD_PE_SendExtendedMessage>:
 8000774:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	001f      	movs	r7, r3
 800077a:	2400      	movs	r4, #0
 800077c:	2500      	movs	r5, #0
 800077e:	48b5      	ldr	r0, [pc, #724]	; (8000a54 <.text_43>)
 8000780:	4669      	mov	r1, sp
 8000782:	7b09      	ldrb	r1, [r1, #12]
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	5846      	ldr	r6, [r0, r1]
 8000788:	2003      	movs	r0, #3
 800078a:	2132      	movs	r1, #50	; 0x32
 800078c:	5c71      	ldrb	r1, [r6, r1]
 800078e:	2900      	cmp	r1, #0
 8000790:	d107      	bne.n	80007a2 <USBPD_PE_SendExtendedMessage+0x2e>
 8000792:	6871      	ldr	r1, [r6, #4]
 8000794:	6809      	ldr	r1, [r1, #0]
 8000796:	9100      	str	r1, [sp, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	0b1b      	lsrs	r3, r3, #12
 800079e:	400b      	ands	r3, r1
 80007a0:	d101      	bne.n	80007a6 <USBPD_PE_SendExtendedMessage+0x32>
 80007a2:	2503      	movs	r5, #3
 80007a4:	e06c      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007a6:	9b00      	ldr	r3, [sp, #0]
 80007a8:	055b      	lsls	r3, r3, #21
 80007aa:	0f5b      	lsrs	r3, r3, #29
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d10b      	bne.n	80007c8 <USBPD_PE_SendExtendedMessage+0x54>
 80007b0:	9b00      	ldr	r3, [sp, #0]
 80007b2:	4018      	ands	r0, r3
 80007b4:	2801      	cmp	r0, #1
 80007b6:	d801      	bhi.n	80007bc <USBPD_PE_SendExtendedMessage+0x48>
 80007b8:	2501      	movs	r5, #1
 80007ba:	e061      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007bc:	4668      	mov	r0, sp
 80007be:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80007c0:	21ff      	movs	r1, #255	; 0xff
 80007c2:	1d89      	adds	r1, r1, #6
 80007c4:	4288      	cmp	r0, r1
 80007c6:	d301      	bcc.n	80007cc <USBPD_PE_SendExtendedMessage+0x58>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e059      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007cc:	4668      	mov	r0, sp
 80007ce:	7002      	strb	r2, [r0, #0]
 80007d0:	6970      	ldr	r0, [r6, #20]
 80007d2:	2120      	movs	r1, #32
 80007d4:	4388      	bics	r0, r1
 80007d6:	6170      	str	r0, [r6, #20]
 80007d8:	2020      	movs	r0, #32
 80007da:	4669      	mov	r1, sp
 80007dc:	7809      	ldrb	r1, [r1, #0]
 80007de:	2903      	cmp	r1, #3
 80007e0:	d008      	beq.n	80007f4 <USBPD_PE_SendExtendedMessage+0x80>
 80007e2:	2904      	cmp	r1, #4
 80007e4:	d020      	beq.n	8000828 <USBPD_PE_SendExtendedMessage+0xb4>
 80007e6:	2906      	cmp	r1, #6
 80007e8:	d020      	beq.n	800082c <USBPD_PE_SendExtendedMessage+0xb8>
 80007ea:	2908      	cmp	r1, #8
 80007ec:	d020      	beq.n	8000830 <USBPD_PE_SendExtendedMessage+0xbc>
 80007ee:	290a      	cmp	r1, #10
 80007f0:	d023      	beq.n	800083a <USBPD_PE_SendExtendedMessage+0xc6>
 80007f2:	e024      	b.n	800083e <USBPD_PE_SendExtendedMessage+0xca>
 80007f4:	210c      	movs	r1, #12
 80007f6:	4aac      	ldr	r2, [pc, #688]	; (8000aa8 <.text_45>)
 80007f8:	18b2      	adds	r2, r6, r2
 80007fa:	7091      	strb	r1, [r2, #2]
 80007fc:	6971      	ldr	r1, [r6, #20]
 80007fe:	4308      	orrs	r0, r1
 8000800:	6170      	str	r0, [r6, #20]
 8000802:	4668      	mov	r0, sp
 8000804:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8000806:	2800      	cmp	r0, #0
 8000808:	d027      	beq.n	800085a <USBPD_PE_SendExtendedMessage+0xe6>
 800080a:	9401      	str	r4, [sp, #4]
 800080c:	4668      	mov	r0, sp
 800080e:	7b00      	ldrb	r0, [r0, #12]
 8000810:	f000 fa98 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8000814:	2801      	cmp	r0, #1
 8000816:	d101      	bne.n	800081c <USBPD_PE_SendExtendedMessage+0xa8>
 8000818:	2004      	movs	r0, #4
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	9702      	str	r7, [sp, #8]
 800081e:	9801      	ldr	r0, [sp, #4]
 8000820:	4669      	mov	r1, sp
 8000822:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8000824:	4fa1      	ldr	r7, [pc, #644]	; (8000aac <.text_46>)
 8000826:	e012      	b.n	800084e <USBPD_PE_SendExtendedMessage+0xda>
 8000828:	210d      	movs	r1, #13
 800082a:	e7e4      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 800082c:	210e      	movs	r1, #14
 800082e:	e7e2      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 8000830:	205b      	movs	r0, #91	; 0x5b
 8000832:	499d      	ldr	r1, [pc, #628]	; (8000aa8 <.text_45>)
 8000834:	1871      	adds	r1, r6, r1
 8000836:	7088      	strb	r0, [r1, #2]
 8000838:	e7e3      	b.n	8000802 <USBPD_PE_SendExtendedMessage+0x8e>
 800083a:	205c      	movs	r0, #92	; 0x5c
 800083c:	e7f9      	b.n	8000832 <USBPD_PE_SendExtendedMessage+0xbe>
 800083e:	2510      	movs	r5, #16
 8000840:	e01e      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 8000842:	9a02      	ldr	r2, [sp, #8]
 8000844:	5d12      	ldrb	r2, [r2, r4]
 8000846:	1823      	adds	r3, r4, r0
 8000848:	18f3      	adds	r3, r6, r3
 800084a:	55da      	strb	r2, [r3, r7]
 800084c:	1c64      	adds	r4, r4, #1
 800084e:	428c      	cmp	r4, r1
 8000850:	d3f7      	bcc.n	8000842 <USBPD_PE_SendExtendedMessage+0xce>
 8000852:	2092      	movs	r0, #146	; 0x92
 8000854:	00c0      	lsls	r0, r0, #3
 8000856:	5231      	strh	r1, [r6, r0]
 8000858:	e002      	b.n	8000860 <USBPD_PE_SendExtendedMessage+0xec>
 800085a:	2092      	movs	r0, #146	; 0x92
 800085c:	00c0      	lsls	r0, r0, #3
 800085e:	5234      	strh	r4, [r6, r0]
 8000860:	4668      	mov	r0, sp
 8000862:	7c00      	ldrb	r0, [r0, #16]
 8000864:	2133      	movs	r1, #51	; 0x33
 8000866:	5470      	strb	r0, [r6, r1]
 8000868:	4668      	mov	r0, sp
 800086a:	7800      	ldrb	r0, [r0, #0]
 800086c:	498e      	ldr	r1, [pc, #568]	; (8000aa8 <.text_45>)
 800086e:	5470      	strb	r0, [r6, r1]
 8000870:	2031      	movs	r0, #49	; 0x31
 8000872:	2132      	movs	r1, #50	; 0x32
 8000874:	5470      	strb	r0, [r6, r1]
 8000876:	4668      	mov	r0, sp
 8000878:	7b00      	ldrb	r0, [r0, #12]
 800087a:	68b1      	ldr	r1, [r6, #8]
 800087c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800087e:	4788      	blx	r1
 8000880:	0028      	movs	r0, r5
 8000882:	b005      	add	sp, #20
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000888 <.text_30>:
 8000888:	0000025e 	.word	0x0000025e

0800088c <PE_Send_RESET>:
 800088c:	b538      	push	{r3, r4, r5, lr}
 800088e:	0005      	movs	r5, r0
 8000890:	000c      	movs	r4, r1
 8000892:	2c05      	cmp	r4, #5
 8000894:	d101      	bne.n	800089a <PE_Send_RESET+0xe>
 8000896:	211f      	movs	r1, #31
 8000898:	e000      	b.n	800089c <PE_Send_RESET+0x10>
 800089a:	215e      	movs	r1, #94	; 0x5e
 800089c:	7c28      	ldrb	r0, [r5, #16]
 800089e:	f7ff fdef 	bl	8000480 <USBPD_PE_Notification>
 80008a2:	0021      	movs	r1, r4
 80008a4:	7c28      	ldrb	r0, [r5, #16]
 80008a6:	f005 f9ab 	bl	8005c00 <USBPD_PRL_ResetRequestProcess>
 80008aa:	f3ef 8010 	mrs	r0, PRIMASK
 80008ae:	b672      	cpsid	i
 80008b0:	2100      	movs	r1, #0
 80008b2:	223c      	movs	r2, #60	; 0x3c
 80008b4:	54a9      	strb	r1, [r5, r2]
 80008b6:	f380 8810 	msr	PRIMASK, r0
 80008ba:	bd31      	pop	{r0, r4, r5, pc}

080008bc <PE_Get_SpecRevision>:
 80008bc:	4965      	ldr	r1, [pc, #404]	; (8000a54 <.text_43>)
 80008be:	0080      	lsls	r0, r0, #2
 80008c0:	5808      	ldr	r0, [r1, r0]
 80008c2:	6840      	ldr	r0, [r0, #4]
 80008c4:	7800      	ldrb	r0, [r0, #0]
 80008c6:	0780      	lsls	r0, r0, #30
 80008c8:	0f80      	lsrs	r0, r0, #30
 80008ca:	4770      	bx	lr

080008cc <PE_ChangePowerRole>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	6842      	ldr	r2, [r0, #4]
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	2404      	movs	r4, #4
 80008d4:	43a3      	bics	r3, r4
 80008d6:	008c      	lsls	r4, r1, #2
 80008d8:	2504      	movs	r5, #4
 80008da:	402c      	ands	r4, r5
 80008dc:	431c      	orrs	r4, r3
 80008de:	6014      	str	r4, [r2, #0]
 80008e0:	7c00      	ldrb	r0, [r0, #16]
 80008e2:	f004 ff0a 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80008e6:	bd31      	pop	{r0, r4, r5, pc}

080008e8 <PE_Get_RxEvent>:
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	0001      	movs	r1, r0
 80008ec:	2014      	movs	r0, #20
 80008ee:	f3ef 8210 	mrs	r2, PRIMASK
 80008f2:	b672      	cpsid	i
 80008f4:	233c      	movs	r3, #60	; 0x3c
 80008f6:	5ccc      	ldrb	r4, [r1, r3]
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d029      	beq.n	8000950 <PE_Get_RxEvent+0x68>
 80008fc:	2393      	movs	r3, #147	; 0x93
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18cb      	adds	r3, r1, r3
 8000902:	5d1d      	ldrb	r5, [r3, r4]
 8000904:	066d      	lsls	r5, r5, #25
 8000906:	d401      	bmi.n	800090c <PE_Get_RxEvent+0x24>
 8000908:	2003      	movs	r0, #3
 800090a:	e021      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800090c:	2584      	movs	r5, #132	; 0x84
 800090e:	006d      	lsls	r5, r5, #1
 8000910:	436c      	muls	r4, r5
 8000912:	190c      	adds	r4, r1, r4
 8000914:	3ccb      	subs	r4, #203	; 0xcb
 8000916:	638c      	str	r4, [r1, #56]	; 0x38
 8000918:	7825      	ldrb	r5, [r4, #0]
 800091a:	7864      	ldrb	r4, [r4, #1]
 800091c:	0224      	lsls	r4, r4, #8
 800091e:	192c      	adds	r4, r5, r4
 8000920:	868c      	strh	r4, [r1, #52]	; 0x34
 8000922:	000c      	movs	r4, r1
 8000924:	3430      	adds	r4, #48	; 0x30
 8000926:	253c      	movs	r5, #60	; 0x3c
 8000928:	5d49      	ldrb	r1, [r1, r5]
 800092a:	5c59      	ldrb	r1, [r3, r1]
 800092c:	06c9      	lsls	r1, r1, #27
 800092e:	0ec9      	lsrs	r1, r1, #27
 8000930:	2901      	cmp	r1, #1
 8000932:	d004      	beq.n	800093e <PE_Get_RxEvent+0x56>
 8000934:	2902      	cmp	r1, #2
 8000936:	d005      	beq.n	8000944 <PE_Get_RxEvent+0x5c>
 8000938:	2904      	cmp	r1, #4
 800093a:	d006      	beq.n	800094a <PE_Get_RxEvent+0x62>
 800093c:	e008      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800093e:	2011      	movs	r0, #17
 8000940:	2100      	movs	r1, #0
 8000942:	e004      	b.n	800094e <PE_Get_RxEvent+0x66>
 8000944:	2012      	movs	r0, #18
 8000946:	2101      	movs	r1, #1
 8000948:	e001      	b.n	800094e <PE_Get_RxEvent+0x66>
 800094a:	2013      	movs	r0, #19
 800094c:	2102      	movs	r1, #2
 800094e:	7021      	strb	r1, [r4, #0]
 8000950:	f382 8810 	msr	PRIMASK, r2
 8000954:	bd30      	pop	{r4, r5, pc}

08000956 <PE_Clear_RxEvent>:
 8000956:	b510      	push	{r4, lr}
 8000958:	0001      	movs	r1, r0
 800095a:	f3ef 8010 	mrs	r0, PRIMASK
 800095e:	b672      	cpsid	i
 8000960:	223c      	movs	r2, #60	; 0x3c
 8000962:	5c8a      	ldrb	r2, [r1, r2]
 8000964:	2a00      	cmp	r2, #0
 8000966:	d014      	beq.n	8000992 <PE_Clear_RxEvent+0x3c>
 8000968:	1e53      	subs	r3, r2, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4acb      	ldr	r2, [pc, #812]	; (8000c9c <.text_56>)
 800096e:	188c      	adds	r4, r1, r2
 8000970:	2200      	movs	r2, #0
 8000972:	54e2      	strb	r2, [r4, r3]
 8000974:	1e5b      	subs	r3, r3, #1
 8000976:	419b      	sbcs	r3, r3
 8000978:	0fdb      	lsrs	r3, r3, #31
 800097a:	5ce4      	ldrb	r4, [r4, r3]
 800097c:	0664      	lsls	r4, r4, #25
 800097e:	d506      	bpl.n	800098e <PE_Clear_RxEvent+0x38>
 8000980:	1c5b      	adds	r3, r3, #1
 8000982:	223c      	movs	r2, #60	; 0x3c
 8000984:	548b      	strb	r3, [r1, r2]
 8000986:	f380 8810 	msr	PRIMASK, r0
 800098a:	7c08      	ldrb	r0, [r1, #16]
 800098c:	e168      	b.n	8000c60 <.text_54>
 800098e:	233c      	movs	r3, #60	; 0x3c
 8000990:	54ca      	strb	r2, [r1, r3]
 8000992:	f380 8810 	msr	PRIMASK, r0
 8000996:	bd10      	pop	{r4, pc}

08000998 <.text_36>:
 8000998:	00000302 	.word	0x00000302

0800099c <.text_37>:
 800099c:	00000703 	.word	0x00000703

080009a0 <PE_PRL_Control_RxEvent>:
 80009a0:	492c      	ldr	r1, [pc, #176]	; (8000a54 <.text_43>)
 80009a2:	0080      	lsls	r0, r0, #2
 80009a4:	580a      	ldr	r2, [r1, r0]
 80009a6:	2000      	movs	r0, #0
 80009a8:	f3ef 8110 	mrs	r1, PRIMASK
 80009ac:	b672      	cpsid	i
 80009ae:	233c      	movs	r3, #60	; 0x3c
 80009b0:	5cd2      	ldrb	r2, [r2, r3]
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d000      	beq.n	80009b8 <PE_PRL_Control_RxEvent+0x18>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f381 8810 	msr	PRIMASK, r1
 80009bc:	4770      	bx	lr
	...

080009c0 <.text_39>:
 80009c0:	0000025f 	.word	0x0000025f

080009c4 <.text_40>:
 80009c4:	00000704 	.word	0x00000704

080009c8 <PE_Convert_SOPRxEvent>:
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d003      	beq.n	80009d4 <PE_Convert_SOPRxEvent+0xc>
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d005      	beq.n	80009dc <PE_Convert_SOPRxEvent+0x14>
 80009d0:	d302      	bcc.n	80009d8 <PE_Convert_SOPRxEvent+0x10>
 80009d2:	e005      	b.n	80009e0 <PE_Convert_SOPRxEvent+0x18>
 80009d4:	2011      	movs	r0, #17
 80009d6:	4770      	bx	lr
 80009d8:	2012      	movs	r0, #18
 80009da:	4770      	bx	lr
 80009dc:	2013      	movs	r0, #19
 80009de:	4770      	bx	lr
 80009e0:	2014      	movs	r0, #20
 80009e2:	4770      	bx	lr

080009e4 <PE_Check_AMSConflict>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	0005      	movs	r5, r0
 80009e8:	2400      	movs	r4, #0
 80009ea:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80009ec:	49b7      	ldr	r1, [pc, #732]	; (8000ccc <.text_58>)
 80009ee:	4001      	ands	r1, r0
 80009f0:	290d      	cmp	r1, #13
 80009f2:	d101      	bne.n	80009f8 <PE_Check_AMSConflict+0x14>
 80009f4:	2010      	movs	r0, #16
 80009f6:	e01b      	b.n	8000a30 <PE_Check_AMSConflict+0x4c>
 80009f8:	2603      	movs	r6, #3
 80009fa:	200f      	movs	r0, #15
 80009fc:	7f29      	ldrb	r1, [r5, #28]
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d011      	beq.n	8000a26 <PE_Check_AMSConflict+0x42>
 8000a02:	1e49      	subs	r1, r1, #1
 8000a04:	2901      	cmp	r1, #1
 8000a06:	d912      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a08:	1e89      	subs	r1, r1, #2
 8000a0a:	d011      	beq.n	8000a30 <PE_Check_AMSConflict+0x4c>
 8000a0c:	1e49      	subs	r1, r1, #1
 8000a0e:	d01d      	beq.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a10:	1e49      	subs	r1, r1, #1
 8000a12:	2909      	cmp	r1, #9
 8000a14:	d90b      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a16:	390b      	subs	r1, #11
 8000a18:	2901      	cmp	r1, #1
 8000a1a:	d908      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a1c:	1e89      	subs	r1, r1, #2
 8000a1e:	d004      	beq.n	8000a2a <PE_Check_AMSConflict+0x46>
 8000a20:	394d      	subs	r1, #77	; 0x4d
 8000a22:	d004      	beq.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a24:	e006      	b.n	8000a34 <PE_Check_AMSConflict+0x50>
 8000a26:	746e      	strb	r6, [r5, #17]
 8000a28:	e011      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2a:	7468      	strb	r0, [r5, #17]
 8000a2c:	e00f      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2e:	2011      	movs	r0, #17
 8000a30:	7468      	strb	r0, [r5, #17]
 8000a32:	e00b      	b.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a34:	215c      	movs	r1, #92	; 0x5c
 8000a36:	7c28      	ldrb	r0, [r5, #16]
 8000a38:	f7ff fd22 	bl	8000480 <USBPD_PE_Notification>
 8000a3c:	746e      	strb	r6, [r5, #17]
 8000a3e:	6868      	ldr	r0, [r5, #4]
 8000a40:	6800      	ldr	r0, [r0, #0]
 8000a42:	49c4      	ldr	r1, [pc, #784]	; (8000d54 <.text_62>)
 8000a44:	4001      	ands	r1, r0
 8000a46:	0230      	lsls	r0, r6, #8
 8000a48:	4281      	cmp	r1, r0
 8000a4a:	d000      	beq.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a4c:	2415      	movs	r4, #21
 8000a4e:	0020      	movs	r0, r4
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a54 <.text_43>:
 8000a54:	200001e4 	.word	0x200001e4

08000a58 <PE_PRL_ResetReceived>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	0004      	movs	r4, r0
 8000a5c:	48be      	ldr	r0, [pc, #760]	; (8000d58 <.text_63>)
 8000a5e:	00a2      	lsls	r2, r4, #2
 8000a60:	5885      	ldr	r5, [r0, r2]
 8000a62:	2905      	cmp	r1, #5
 8000a64:	d115      	bne.n	8000a92 <PE_PRL_ResetReceived+0x3a>
 8000a66:	6868      	ldr	r0, [r5, #4]
 8000a68:	6801      	ldr	r1, [r0, #0]
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	4391      	bics	r1, r2
 8000a6e:	6001      	str	r1, [r0, #0]
 8000a70:	6968      	ldr	r0, [r5, #20]
 8000a72:	49ba      	ldr	r1, [pc, #744]	; (8000d5c <.text_64>)
 8000a74:	4001      	ands	r1, r0
 8000a76:	0150      	lsls	r0, r2, #5
 8000a78:	4308      	orrs	r0, r1
 8000a7a:	6168      	str	r0, [r5, #20]
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	2132      	movs	r1, #50	; 0x32
 8000a80:	5468      	strb	r0, [r5, r1]
 8000a82:	2000      	movs	r0, #0
 8000a84:	213c      	movs	r1, #60	; 0x3c
 8000a86:	5468      	strb	r0, [r5, r1]
 8000a88:	211e      	movs	r1, #30
 8000a8a:	7c28      	ldrb	r0, [r5, #16]
 8000a8c:	f7ff fcf8 	bl	8000480 <USBPD_PE_Notification>
 8000a90:	e004      	b.n	8000a9c <PE_PRL_ResetReceived+0x44>
 8000a92:	6968      	ldr	r0, [r5, #20]
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	02c9      	lsls	r1, r1, #11
 8000a98:	4301      	orrs	r1, r0
 8000a9a:	6169      	str	r1, [r5, #20]
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	68a9      	ldr	r1, [r5, #8]
 8000aa0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000aa2:	4788      	blx	r1
 8000aa4:	bd31      	pop	{r0, r4, r5, pc}
	...

08000aa8 <.text_45>:
 8000aa8:	0000025d 	.word	0x0000025d

08000aac <.text_46>:
 8000aac:	00000385 	.word	0x00000385

08000ab0 <PE_PRL_BistCompleted>:
 8000ab0:	4770      	bx	lr

08000ab2 <PE_Reset_HardReset>:
 8000ab2:	b538      	push	{r3, r4, r5, lr}
 8000ab4:	0004      	movs	r4, r0
 8000ab6:	2032      	movs	r0, #50	; 0x32
 8000ab8:	5c20      	ldrb	r0, [r4, r0]
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d003      	beq.n	8000ac6 <PE_Reset_HardReset+0x14>
 8000abe:	215b      	movs	r1, #91	; 0x5b
 8000ac0:	7c20      	ldrb	r0, [r4, #16]
 8000ac2:	f7ff fcdd 	bl	8000480 <USBPD_PE_Notification>
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f000 f82c 	bl	8000b24 <PE_Reset_ZI>
 8000acc:	2503      	movs	r5, #3
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	6843      	ldr	r3, [r0, #4]
 8000ad2:	402b      	ands	r3, r5
 8000ad4:	7c20      	ldrb	r0, [r4, #16]
 8000ad6:	6861      	ldr	r1, [r4, #4]
 8000ad8:	6809      	ldr	r1, [r1, #0]
 8000ada:	074a      	lsls	r2, r1, #29
 8000adc:	0fd2      	lsrs	r2, r2, #31
 8000ade:	d008      	beq.n	8000af2 <PE_Reset_HardReset+0x40>
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f004 fdee 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000ae6:	6860      	ldr	r0, [r4, #4]
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	2208      	movs	r2, #8
 8000aec:	430a      	orrs	r2, r1
 8000aee:	6002      	str	r2, [r0, #0]
 8000af0:	e007      	b.n	8000b02 <PE_Reset_HardReset+0x50>
 8000af2:	2100      	movs	r1, #0
 8000af4:	f004 fde5 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000af8:	6860      	ldr	r0, [r4, #4]
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4391      	bics	r1, r2
 8000b00:	6001      	str	r1, [r0, #0]
 8000b02:	6820      	ldr	r0, [r4, #0]
 8000b04:	6840      	ldr	r0, [r0, #4]
 8000b06:	4005      	ands	r5, r0
 8000b08:	6860      	ldr	r0, [r4, #4]
 8000b0a:	6801      	ldr	r1, [r0, #0]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4391      	bics	r1, r2
 8000b10:	430d      	orrs	r5, r1
 8000b12:	6005      	str	r5, [r0, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	7c20      	ldrb	r0, [r4, #16]
 8000b18:	f004 fe44 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8000b1c:	7c20      	ldrb	r0, [r4, #16]
 8000b1e:	f005 f8ad 	bl	8005c7c <USBPD_PRL_Reset>
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Reset_ZI>:
 8000b24:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000b26:	0004      	movs	r4, r0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	6801      	ldr	r1, [r0, #0]
 8000b30:	2210      	movs	r2, #16
 8000b32:	4391      	bics	r1, r2
 8000b34:	6001      	str	r1, [r0, #0]
 8000b36:	2100      	movs	r1, #0
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fc34 	bl	80013a6 <PE_SetPowerNegotiation>
 8000b3e:	2193      	movs	r1, #147	; 0x93
 8000b40:	0089      	lsls	r1, r1, #2
 8000b42:	0020      	movs	r0, r4
 8000b44:	3014      	adds	r0, #20
 8000b46:	f01a f8b6 	bl	801acb6 <__aeabi_memclr>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	aa01      	add	r2, sp, #4
 8000b4e:	2102      	movs	r1, #2
 8000b50:	7c20      	ldrb	r0, [r4, #16]
 8000b52:	68a5      	ldr	r5, [r4, #8]
 8000b54:	69ad      	ldr	r5, [r5, #24]
 8000b56:	47a8      	blx	r5
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	0440      	lsls	r0, r0, #17
 8000b5c:	9000      	str	r0, [sp, #0]
 8000b5e:	2304      	movs	r3, #4
 8000b60:	466a      	mov	r2, sp
 8000b62:	2106      	movs	r1, #6
 8000b64:	7c20      	ldrb	r0, [r4, #16]
 8000b66:	68a5      	ldr	r5, [r4, #8]
 8000b68:	69ad      	ldr	r5, [r5, #24]
 8000b6a:	47a8      	blx	r5
 8000b6c:	2503      	movs	r5, #3
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	6841      	ldr	r1, [r0, #4]
 8000b72:	4029      	ands	r1, r5
 8000b74:	7c20      	ldrb	r0, [r4, #16]
 8000b76:	f004 fde2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	6840      	ldr	r0, [r0, #4]
 8000b7e:	4005      	ands	r5, r0
 8000b80:	6860      	ldr	r0, [r4, #4]
 8000b82:	6801      	ldr	r1, [r0, #0]
 8000b84:	4a76      	ldr	r2, [pc, #472]	; (8000d60 <.text_65>)
 8000b86:	400a      	ands	r2, r1
 8000b88:	06a9      	lsls	r1, r5, #26
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	6001      	str	r1, [r0, #0]
 8000b8e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b90 <PE_Reset_Counter>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	2103      	movs	r1, #3
 8000b94:	2298      	movs	r2, #152	; 0x98
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	1880      	adds	r0, r0, r2
 8000b9a:	f01a f88c 	bl	801acb6 <__aeabi_memclr>
 8000b9e:	bd01      	pop	{r0, pc}

08000ba0 <PE_Reset_StateMachine>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	2032      	movs	r0, #50	; 0x32
 8000ba6:	5c20      	ldrb	r0, [r4, r0]
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d003      	beq.n	8000bb4 <PE_Reset_StateMachine+0x14>
 8000bac:	215b      	movs	r1, #91	; 0x5b
 8000bae:	7c20      	ldrb	r0, [r4, #16]
 8000bb0:	f7ff fc66 	bl	8000480 <USBPD_PE_Notification>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f7ff ffb5 	bl	8000b24 <PE_Reset_ZI>
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	f000 fbf2 	bl	80013a6 <PE_SetPowerNegotiation>
 8000bc2:	7c20      	ldrb	r0, [r4, #16]
 8000bc4:	f005 f85a 	bl	8005c7c <USBPD_PRL_Reset>
 8000bc8:	6860      	ldr	r0, [r4, #4]
 8000bca:	6801      	ldr	r1, [r0, #0]
 8000bcc:	2501      	movs	r5, #1
 8000bce:	08ca      	lsrs	r2, r1, #3
 8000bd0:	402a      	ands	r2, r5
 8000bd2:	078b      	lsls	r3, r1, #30
 8000bd4:	0f9b      	lsrs	r3, r3, #30
 8000bd6:	7c20      	ldrb	r0, [r4, #16]
 8000bd8:	0889      	lsrs	r1, r1, #2
 8000bda:	400d      	ands	r5, r1
 8000bdc:	d004      	beq.n	8000be8 <PE_Reset_StateMachine+0x48>
 8000bde:	2101      	movs	r1, #1
 8000be0:	f004 fd6f 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000be4:	2002      	movs	r0, #2
 8000be6:	e003      	b.n	8000bf0 <PE_Reset_StateMachine+0x50>
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 fd6a 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000bee:	203e      	movs	r0, #62	; 0x3e
 8000bf0:	7460      	strb	r0, [r4, #17]
 8000bf2:	bd31      	pop	{r0, r4, r5, pc}

08000bf4 <PE_ExtRevisionInteroperability>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	4957      	ldr	r1, [pc, #348]	; (8000d58 <.text_63>)
 8000bfa:	0083      	lsls	r3, r0, #2
 8000bfc:	58cb      	ldr	r3, [r1, r3]
 8000bfe:	685c      	ldr	r4, [r3, #4]
 8000c00:	6825      	ldr	r5, [r4, #0]
 8000c02:	2103      	movs	r1, #3
 8000c04:	2603      	movs	r6, #3
 8000c06:	402e      	ands	r6, r5
 8000c08:	42b2      	cmp	r2, r6
 8000c0a:	db00      	blt.n	8000c0e <PE_ExtRevisionInteroperability+0x1a>
 8000c0c:	0032      	movs	r2, r6
 8000c0e:	438d      	bics	r5, r1
 8000c10:	400a      	ands	r2, r1
 8000c12:	432a      	orrs	r2, r5
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	6814      	ldr	r4, [r2, #0]
 8000c1a:	2503      	movs	r5, #3
 8000c1c:	4025      	ands	r5, r4
 8000c1e:	2d01      	cmp	r5, #1
 8000c20:	d101      	bne.n	8000c26 <PE_ExtRevisionInteroperability+0x32>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e000      	b.n	8000c28 <PE_ExtRevisionInteroperability+0x34>
 8000c26:	2520      	movs	r5, #32
 8000c28:	2620      	movs	r6, #32
 8000c2a:	43b4      	bics	r4, r6
 8000c2c:	4325      	orrs	r5, r4
 8000c2e:	6015      	str	r5, [r2, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	4011      	ands	r1, r2
 8000c36:	f004 fd76 	bl	8005726 <USBPD_PRL_SetHeaderSpecification>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}

08000c3c <PE_PRL_FastRoleSwapReception>:
 8000c3c:	4946      	ldr	r1, [pc, #280]	; (8000d58 <.text_63>)
 8000c3e:	0082      	lsls	r2, r0, #2
 8000c40:	5889      	ldr	r1, [r1, r2]
 8000c42:	7f0a      	ldrb	r2, [r1, #28]
 8000c44:	2a09      	cmp	r2, #9
 8000c46:	d100      	bne.n	8000c4a <PE_PRL_FastRoleSwapReception+0xe>
 8000c48:	4770      	bx	lr
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	2410      	movs	r4, #16
 8000c52:	431c      	orrs	r4, r3
 8000c54:	6014      	str	r4, [r2, #0]
 8000c56:	694a      	ldr	r2, [r1, #20]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	614b      	str	r3, [r1, #20]

08000c60 <.text_54>:
 8000c60:	6889      	ldr	r1, [r1, #8]
 8000c62:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000c64:	4788      	blx	r1
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <PE_PRL_PostReceiveEvent>:
 8000c68:	b530      	push	{r4, r5, lr}
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	; (8000d58 <.text_63>)
 8000c6c:	0080      	lsls	r0, r0, #2
 8000c6e:	5813      	ldr	r3, [r2, r0]
 8000c70:	2400      	movs	r4, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	191a      	adds	r2, r3, r4
 8000c76:	4d09      	ldr	r5, [pc, #36]	; (8000c9c <.text_56>)
 8000c78:	1952      	adds	r2, r2, r5
 8000c7a:	7815      	ldrb	r5, [r2, #0]
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d004      	beq.n	8000c8a <PE_PRL_PostReceiveEvent+0x22>
 8000c80:	1c64      	adds	r4, r4, #1
 8000c82:	b2e4      	uxtb	r4, r4
 8000c84:	2c01      	cmp	r4, #1
 8000c86:	d9f5      	bls.n	8000c74 <PE_PRL_PostReceiveEvent+0xc>
 8000c88:	bd30      	pop	{r4, r5, pc}
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	7010      	strb	r0, [r2, #0]
 8000c8e:	2001      	movs	r0, #1
 8000c90:	7813      	ldrb	r3, [r2, #0]
 8000c92:	2401      	movs	r4, #1
 8000c94:	408c      	lsls	r4, r1
 8000c96:	431c      	orrs	r4, r3
 8000c98:	7014      	strb	r4, [r2, #0]
 8000c9a:	bd30      	pop	{r4, r5, pc}

08000c9c <.text_56>:
 8000c9c:	0000024d 	.word	0x0000024d

08000ca0 <PE_PRL_PostReceiveEventError>:
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	492d      	ldr	r1, [pc, #180]	; (8000d58 <.text_63>)
 8000ca4:	0080      	lsls	r0, r0, #2
 8000ca6:	5809      	ldr	r1, [r1, r0]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	b2d3      	uxtb	r3, r2
 8000cae:	18cb      	adds	r3, r1, r3
 8000cb0:	4c2c      	ldr	r4, [pc, #176]	; (8000d64 <.text_66>)
 8000cb2:	191b      	adds	r3, r3, r4
 8000cb4:	781c      	ldrb	r4, [r3, #0]
 8000cb6:	2560      	movs	r5, #96	; 0x60
 8000cb8:	4025      	ands	r5, r4
 8000cba:	2d20      	cmp	r5, #32
 8000cbc:	d004      	beq.n	8000cc8 <PE_PRL_PostReceiveEventError+0x28>
 8000cbe:	1c52      	adds	r2, r2, #1
 8000cc0:	b2d3      	uxtb	r3, r2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d3f2      	bcc.n	8000cac <PE_PRL_PostReceiveEventError+0xc>
 8000cc6:	bd30      	pop	{r4, r5, pc}
 8000cc8:	7018      	strb	r0, [r3, #0]
 8000cca:	bd30      	pop	{r4, r5, pc}

08000ccc <.text_58>:
 8000ccc:	0000f01f 	.word	0x0000f01f

08000cd0 <PE_PRL_PostReceiveEventCopy>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <.text_63>)
 8000cd4:	0080      	lsls	r0, r0, #2
 8000cd6:	5813      	ldr	r3, [r2, r0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	b2d0      	uxtb	r0, r2
 8000cdc:	181c      	adds	r4, r3, r0
 8000cde:	4d21      	ldr	r5, [pc, #132]	; (8000d64 <.text_66>)
 8000ce0:	5d64      	ldrb	r4, [r4, r5]
 8000ce2:	2560      	movs	r5, #96	; 0x60
 8000ce4:	4025      	ands	r5, r4
 8000ce6:	2d20      	cmp	r5, #32
 8000ce8:	d004      	beq.n	8000cf4 <PE_PRL_PostReceiveEventCopy+0x24>
 8000cea:	1c52      	adds	r2, r2, #1
 8000cec:	b2d0      	uxtb	r0, r2
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d3f3      	bcc.n	8000cda <PE_PRL_PostReceiveEventCopy+0xa>
 8000cf2:	bd31      	pop	{r0, r4, r5, pc}
 8000cf4:	2284      	movs	r2, #132	; 0x84
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	4350      	muls	r0, r2
 8000cfa:	1818      	adds	r0, r3, r0
 8000cfc:	303d      	adds	r0, #61	; 0x3d
 8000cfe:	f019 ffcf 	bl	801aca0 <__aeabi_memcpy>
 8000d02:	bd31      	pop	{r0, r4, r5, pc}

08000d04 <PE_PRL_PostReceiveEventComplete>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4914      	ldr	r1, [pc, #80]	; (8000d58 <.text_63>)
 8000d08:	0082      	lsls	r2, r0, #2
 8000d0a:	5889      	ldr	r1, [r1, r2]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	18cb      	adds	r3, r1, r3
 8000d12:	4c14      	ldr	r4, [pc, #80]	; (8000d64 <.text_66>)
 8000d14:	191b      	adds	r3, r3, r4
 8000d16:	781c      	ldrb	r4, [r3, #0]
 8000d18:	2560      	movs	r5, #96	; 0x60
 8000d1a:	4025      	ands	r5, r4
 8000d1c:	2d20      	cmp	r5, #32
 8000d1e:	d003      	beq.n	8000d28 <PE_PRL_PostReceiveEventComplete+0x24>
 8000d20:	b2d3      	uxtb	r3, r2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d3f3      	bcc.n	8000d0e <PE_PRL_PostReceiveEventComplete+0xa>
 8000d26:	bd31      	pop	{r0, r4, r5, pc}
 8000d28:	781c      	ldrb	r4, [r3, #0]
 8000d2a:	2540      	movs	r5, #64	; 0x40
 8000d2c:	4325      	orrs	r5, r4
 8000d2e:	701d      	strb	r5, [r3, #0]
 8000d30:	233c      	movs	r3, #60	; 0x3c
 8000d32:	5ccb      	ldrb	r3, [r1, r3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <PE_PRL_PostReceiveEventComplete+0x38>
 8000d38:	233c      	movs	r3, #60	; 0x3c
 8000d3a:	54ca      	strb	r2, [r1, r3]
 8000d3c:	6889      	ldr	r1, [r1, #8]
 8000d3e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000d40:	4788      	blx	r1
 8000d42:	bd31      	pop	{r0, r4, r5, pc}

08000d44 <PE_Get_UnchunkedSupport>:
 8000d44:	4904      	ldr	r1, [pc, #16]	; (8000d58 <.text_63>)
 8000d46:	0080      	lsls	r0, r0, #2
 8000d48:	5808      	ldr	r0, [r1, r0]
 8000d4a:	6840      	ldr	r0, [r0, #4]
 8000d4c:	6800      	ldr	r0, [r0, #0]
 8000d4e:	0181      	lsls	r1, r0, #6
 8000d50:	0fc8      	lsrs	r0, r1, #31
 8000d52:	4770      	bx	lr

08000d54 <.text_62>:
 8000d54:	00000704 	.word	0x00000704

08000d58 <.text_63>:
 8000d58:	200001e4 	.word	0x200001e4

08000d5c <.text_64>:
 8000d5c:	fffff9ff 	.word	0xfffff9ff

08000d60 <.text_65>:
 8000d60:	f3ffffff 	.word	0xf3ffffff

08000d64 <.text_66>:
 8000d64:	0000024d 	.word	0x0000024d

08000d68 <PE_SubStateMachine_Generic>:
 8000d68:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000d6a:	b08d      	sub	sp, #52	; 0x34
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9004      	str	r0, [sp, #16]
 8000d72:	2500      	movs	r5, #0
 8000d74:	9503      	str	r5, [sp, #12]
 8000d76:	2601      	movs	r6, #1
 8000d78:	2714      	movs	r7, #20
 8000d7a:	7c61      	ldrb	r1, [r4, #17]
 8000d7c:	2901      	cmp	r1, #1
 8000d7e:	d100      	bne.n	8000d82 <PE_SubStateMachine_Generic+0x1a>
 8000d80:	e195      	b.n	80010ae <PE_SubStateMachine_Generic+0x346>
 8000d82:	2918      	cmp	r1, #24
 8000d84:	d03f      	beq.n	8000e06 <PE_SubStateMachine_Generic+0x9e>
 8000d86:	2919      	cmp	r1, #25
 8000d88:	d050      	beq.n	8000e2c <PE_SubStateMachine_Generic+0xc4>
 8000d8a:	291d      	cmp	r1, #29
 8000d8c:	d100      	bne.n	8000d90 <PE_SubStateMachine_Generic+0x28>
 8000d8e:	e092      	b.n	8000eb6 <PE_SubStateMachine_Generic+0x14e>
 8000d90:	2927      	cmp	r1, #39	; 0x27
 8000d92:	d100      	bne.n	8000d96 <PE_SubStateMachine_Generic+0x2e>
 8000d94:	e0b0      	b.n	8000ef8 <PE_SubStateMachine_Generic+0x190>
 8000d96:	2928      	cmp	r1, #40	; 0x28
 8000d98:	d100      	bne.n	8000d9c <PE_SubStateMachine_Generic+0x34>
 8000d9a:	e0b9      	b.n	8000f10 <PE_SubStateMachine_Generic+0x1a8>
 8000d9c:	2929      	cmp	r1, #41	; 0x29
 8000d9e:	d100      	bne.n	8000da2 <PE_SubStateMachine_Generic+0x3a>
 8000da0:	e0c0      	b.n	8000f24 <PE_SubStateMachine_Generic+0x1bc>
 8000da2:	292c      	cmp	r1, #44	; 0x2c
 8000da4:	d100      	bne.n	8000da8 <PE_SubStateMachine_Generic+0x40>
 8000da6:	e2bc      	b.n	8001322 <PE_SubStateMachine_Generic+0x5ba>
 8000da8:	2930      	cmp	r1, #48	; 0x30
 8000daa:	d100      	bne.n	8000dae <PE_SubStateMachine_Generic+0x46>
 8000dac:	e1de      	b.n	800116c <PE_SubStateMachine_Generic+0x404>
 8000dae:	293a      	cmp	r1, #58	; 0x3a
 8000db0:	d100      	bne.n	8000db4 <PE_SubStateMachine_Generic+0x4c>
 8000db2:	e28c      	b.n	80012ce <PE_SubStateMachine_Generic+0x566>
 8000db4:	293b      	cmp	r1, #59	; 0x3b
 8000db6:	d100      	bne.n	8000dba <PE_SubStateMachine_Generic+0x52>
 8000db8:	e270      	b.n	800129c <PE_SubStateMachine_Generic+0x534>
 8000dba:	293c      	cmp	r1, #60	; 0x3c
 8000dbc:	d100      	bne.n	8000dc0 <PE_SubStateMachine_Generic+0x58>
 8000dbe:	e247      	b.n	8001250 <PE_SubStateMachine_Generic+0x4e8>
 8000dc0:	294b      	cmp	r1, #75	; 0x4b
 8000dc2:	d100      	bne.n	8000dc6 <PE_SubStateMachine_Generic+0x5e>
 8000dc4:	e114      	b.n	8000ff0 <PE_SubStateMachine_Generic+0x288>
 8000dc6:	2963      	cmp	r1, #99	; 0x63
 8000dc8:	d100      	bne.n	8000dcc <PE_SubStateMachine_Generic+0x64>
 8000dca:	e178      	b.n	80010be <PE_SubStateMachine_Generic+0x356>
 8000dcc:	2964      	cmp	r1, #100	; 0x64
 8000dce:	d100      	bne.n	8000dd2 <PE_SubStateMachine_Generic+0x6a>
 8000dd0:	e1a0      	b.n	8001114 <PE_SubStateMachine_Generic+0x3ac>
 8000dd2:	2967      	cmp	r1, #103	; 0x67
 8000dd4:	d100      	bne.n	8000dd8 <PE_SubStateMachine_Generic+0x70>
 8000dd6:	e120      	b.n	800101a <PE_SubStateMachine_Generic+0x2b2>
 8000dd8:	2968      	cmp	r1, #104	; 0x68
 8000dda:	d100      	bne.n	8000dde <PE_SubStateMachine_Generic+0x76>
 8000ddc:	e138      	b.n	8001050 <PE_SubStateMachine_Generic+0x2e8>
 8000dde:	2974      	cmp	r1, #116	; 0x74
 8000de0:	d100      	bne.n	8000de4 <PE_SubStateMachine_Generic+0x7c>
 8000de2:	e1f3      	b.n	80011cc <PE_SubStateMachine_Generic+0x464>
 8000de4:	2993      	cmp	r1, #147	; 0x93
 8000de6:	d100      	bne.n	8000dea <PE_SubStateMachine_Generic+0x82>
 8000de8:	e0a6      	b.n	8000f38 <PE_SubStateMachine_Generic+0x1d0>
 8000dea:	2994      	cmp	r1, #148	; 0x94
 8000dec:	d100      	bne.n	8000df0 <PE_SubStateMachine_Generic+0x88>
 8000dee:	e0a7      	b.n	8000f40 <PE_SubStateMachine_Generic+0x1d8>
 8000df0:	2995      	cmp	r1, #149	; 0x95
 8000df2:	d100      	bne.n	8000df6 <PE_SubStateMachine_Generic+0x8e>
 8000df4:	e0bd      	b.n	8000f72 <PE_SubStateMachine_Generic+0x20a>
 8000df6:	2999      	cmp	r1, #153	; 0x99
 8000df8:	d000      	beq.n	8000dfc <PE_SubStateMachine_Generic+0x94>
 8000dfa:	e297      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8000dfc:	2106      	movs	r1, #6
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fd44 	bl	800088c <PE_Send_RESET>
 8000e04:	e220      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000e06:	6861      	ldr	r1, [r4, #4]
 8000e08:	6809      	ldr	r1, [r1, #0]
 8000e0a:	0889      	lsrs	r1, r1, #2
 8000e0c:	400e      	ands	r6, r1
 8000e0e:	d002      	beq.n	8000e16 <PE_SubStateMachine_Generic+0xae>
 8000e10:	6960      	ldr	r0, [r4, #20]
 8000e12:	0741      	lsls	r1, r0, #29
 8000e14:	0fc8      	lsrs	r0, r1, #31
 8000e16:	9000      	str	r0, [sp, #0]
 8000e18:	2319      	movs	r3, #25
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f000 fb76 	bl	8001510 <PE_Send_CtrlMessage>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d156      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000e28:	2007      	movs	r0, #7
 8000e2a:	e107      	b.n	800103c <PE_SubStateMachine_Generic+0x2d4>
 8000e2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e2e:	7800      	ldrb	r0, [r0, #0]
 8000e30:	2811      	cmp	r0, #17
 8000e32:	d13c      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e34:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e36:	0bc1      	lsrs	r1, r0, #15
 8000e38:	d11e      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e3a:	0441      	lsls	r1, r0, #17
 8000e3c:	0f49      	lsrs	r1, r1, #29
 8000e3e:	d01b      	beq.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e40:	06c0      	lsls	r0, r0, #27
 8000e42:	0ec0      	lsrs	r0, r0, #27
 8000e44:	2804      	cmp	r0, #4
 8000e46:	d117      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e48:	008b      	lsls	r3, r1, #2
 8000e4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e4c:	1c82      	adds	r2, r0, #2
 8000e4e:	2105      	movs	r1, #5
 8000e50:	7c20      	ldrb	r0, [r4, #16]
 8000e52:	68a6      	ldr	r6, [r4, #8]
 8000e54:	69b6      	ldr	r6, [r6, #24]
 8000e56:	47b0      	blx	r6
 8000e58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e5a:	7800      	ldrb	r0, [r0, #0]
 8000e5c:	2814      	cmp	r0, #20
 8000e5e:	d004      	beq.n	8000e6a <PE_SubStateMachine_Generic+0x102>
 8000e60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000e62:	700f      	strb	r7, [r1, #0]
 8000e64:	0020      	movs	r0, r4
 8000e66:	f7ff fd76 	bl	8000956 <PE_Clear_RxEvent>
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	7460      	strb	r0, [r4, #17]
 8000e6e:	9504      	str	r5, [sp, #16]
 8000e70:	2107      	movs	r1, #7
 8000e72:	7c20      	ldrb	r0, [r4, #16]
 8000e74:	f7ff fb04 	bl	8000480 <USBPD_PE_Notification>
 8000e78:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e7a:	21f0      	movs	r1, #240	; 0xf0
 8000e7c:	0209      	lsls	r1, r1, #8
 8000e7e:	4001      	ands	r1, r0
 8000e80:	d115      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e82:	06c0      	lsls	r0, r0, #27
 8000e84:	0ec0      	lsrs	r0, r0, #27
 8000e86:	2804      	cmp	r0, #4
 8000e88:	d001      	beq.n	8000e8e <PE_SubStateMachine_Generic+0x126>
 8000e8a:	2810      	cmp	r0, #16
 8000e8c:	d10f      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e8e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e90:	7800      	ldrb	r0, [r0, #0]
 8000e92:	2814      	cmp	r0, #20
 8000e94:	d004      	beq.n	8000ea0 <PE_SubStateMachine_Generic+0x138>
 8000e96:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e98:	7007      	strb	r7, [r0, #0]
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f7ff fd5b 	bl	8000956 <PE_Clear_RxEvent>
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	7460      	strb	r0, [r4, #17]
 8000ea4:	9504      	str	r5, [sp, #16]
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	7c20      	ldrb	r0, [r4, #16]
 8000eaa:	f7ff fae9 	bl	8000480 <USBPD_PE_Notification>
 8000eae:	8be0      	ldrh	r0, [r4, #30]
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0209      	lsls	r1, r1, #8
 8000eb4:	e099      	b.n	8000fea <PE_SubStateMachine_Generic+0x282>
 8000eb6:	9505      	str	r5, [sp, #20]
 8000eb8:	ab05      	add	r3, sp, #20
 8000eba:	aa06      	add	r2, sp, #24
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	7c20      	ldrb	r0, [r4, #16]
 8000ec0:	68a5      	ldr	r5, [r4, #8]
 8000ec2:	696d      	ldr	r5, [r5, #20]
 8000ec4:	47a8      	blx	r5
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	9805      	ldr	r0, [sp, #20]
 8000eca:	f000 fabf 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d002      	beq.n	8000ed8 <PE_SubStateMachine_Generic+0x170>
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	7460      	strb	r0, [r4, #17]
 8000ed6:	e22a      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000ed8:	9002      	str	r0, [sp, #8]
 8000eda:	2003      	movs	r0, #3
 8000edc:	9001      	str	r0, [sp, #4]
 8000ede:	9805      	ldr	r0, [sp, #20]
 8000ee0:	0880      	lsrs	r0, r0, #2
 8000ee2:	9000      	str	r0, [sp, #0]
 8000ee4:	ab06      	add	r3, sp, #24
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	0020      	movs	r0, r4
 8000eec:	f000 fb3b 	bl	8001566 <PE_Send_DataMessage>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	e165      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000ef8:	2012      	movs	r0, #18
 8000efa:	7720      	strb	r0, [r4, #28]
 8000efc:	2105      	movs	r1, #5
 8000efe:	7c20      	ldrb	r0, [r4, #16]
 8000f00:	f004 feab 	bl	8005c5a <USBDPD_PRL_BistCarrierEyeMode>
 8000f04:	2028      	movs	r0, #40	; 0x28
 8000f06:	7460      	strb	r0, [r4, #17]
 8000f08:	484f      	ldr	r0, [pc, #316]	; (8001048 <PE_SubStateMachine_Generic+0x2e0>)
 8000f0a:	83e0      	strh	r0, [r4, #30]
 8000f0c:	202d      	movs	r0, #45	; 0x2d
 8000f0e:	e099      	b.n	8001044 <PE_SubStateMachine_Generic+0x2dc>
 8000f10:	8be0      	ldrh	r0, [r4, #30]
 8000f12:	03f1      	lsls	r1, r6, #15
 8000f14:	4288      	cmp	r0, r1
 8000f16:	d10e      	bne.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f18:	2105      	movs	r1, #5
 8000f1a:	7c20      	ldrb	r0, [r4, #16]
 8000f1c:	f004 fea5 	bl	8005c6a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f20:	83e5      	strh	r5, [r4, #30]
 8000f22:	e191      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000f24:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f26:	7800      	ldrb	r0, [r0, #0]
 8000f28:	2814      	cmp	r0, #20
 8000f2a:	d004      	beq.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f2e:	7007      	strb	r7, [r0, #0]
 8000f30:	0020      	movs	r0, r4
 8000f32:	f7ff fd10 	bl	8000956 <PE_Clear_RxEvent>
 8000f36:	e1fa      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f38:	0020      	movs	r0, r4
 8000f3a:	f000 f9fb 	bl	8001334 <PE_SubStateMachine_ReceiveDRS>
 8000f3e:	e1f6      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f40:	6861      	ldr	r1, [r4, #4]
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	0889      	lsrs	r1, r1, #2
 8000f46:	400e      	ands	r6, r1
 8000f48:	d002      	beq.n	8000f50 <PE_SubStateMachine_Generic+0x1e8>
 8000f4a:	6960      	ldr	r0, [r4, #20]
 8000f4c:	0741      	lsls	r1, r0, #29
 8000f4e:	0fc8      	lsrs	r0, r1, #31
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	2395      	movs	r3, #149	; 0x95
 8000f54:	2209      	movs	r2, #9
 8000f56:	2100      	movs	r1, #0
 8000f58:	0020      	movs	r0, r4
 8000f5a:	f000 fad9 	bl	8001510 <PE_Send_CtrlMessage>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d1ed      	bne.n	8000f3e <PE_SubStateMachine_Generic+0x1d6>
 8000f62:	2010      	movs	r0, #16
 8000f64:	7720      	strb	r0, [r4, #28]
 8000f66:	4839      	ldr	r0, [pc, #228]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8000f68:	83e0      	strh	r0, [r4, #30]
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	9004      	str	r0, [sp, #16]
 8000f6e:	2122      	movs	r1, #34	; 0x22
 8000f70:	e128      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000f72:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f74:	7800      	ldrb	r0, [r0, #0]
 8000f76:	2814      	cmp	r0, #20
 8000f78:	d035      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f7a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000f7c:	21f0      	movs	r1, #240	; 0xf0
 8000f7e:	0209      	lsls	r1, r1, #8
 8000f80:	4001      	ands	r1, r0
 8000f82:	d130      	bne.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f84:	211f      	movs	r1, #31
 8000f86:	231f      	movs	r3, #31
 8000f88:	4003      	ands	r3, r0
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d006      	beq.n	8000f9c <PE_SubStateMachine_Generic+0x234>
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d008      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d006      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d015      	beq.n	8000fc6 <PE_SubStateMachine_Generic+0x25e>
 8000f9a:	e024      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f000 fa6d 	bl	800147c <PE_SwitchDataRole>
 8000fa2:	e008      	b.n	8000fb6 <PE_SubStateMachine_Generic+0x24e>
 8000fa4:	4001      	ands	r1, r0
 8000fa6:	290c      	cmp	r1, #12
 8000fa8:	d101      	bne.n	8000fae <PE_SubStateMachine_Generic+0x246>
 8000faa:	2126      	movs	r1, #38	; 0x26
 8000fac:	e000      	b.n	8000fb0 <PE_SubStateMachine_Generic+0x248>
 8000fae:	2127      	movs	r1, #39	; 0x27
 8000fb0:	7c20      	ldrb	r0, [r4, #16]
 8000fb2:	f7ff fa65 	bl	8000480 <USBPD_PE_Notification>
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	7460      	strb	r0, [r4, #17]
 8000fba:	9504      	str	r5, [sp, #16]
 8000fbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fbe:	7800      	ldrb	r0, [r0, #0]
 8000fc0:	2814      	cmp	r0, #20
 8000fc2:	d10b      	bne.n	8000fdc <PE_SubStateMachine_Generic+0x274>
 8000fc4:	e00f      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fc6:	2128      	movs	r1, #40	; 0x28
 8000fc8:	7c20      	ldrb	r0, [r4, #16]
 8000fca:	f7ff fa59 	bl	8000480 <USBPD_PE_Notification>
 8000fce:	2003      	movs	r0, #3
 8000fd0:	7460      	strb	r0, [r4, #17]
 8000fd2:	9504      	str	r5, [sp, #16]
 8000fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fd6:	7800      	ldrb	r0, [r0, #0]
 8000fd8:	2814      	cmp	r0, #20
 8000fda:	d004      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fde:	7007      	strb	r7, [r0, #0]
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff fcb8 	bl	8000956 <PE_Clear_RxEvent>
 8000fe6:	8be0      	ldrh	r0, [r4, #30]
 8000fe8:	03f1      	lsls	r1, r6, #15
 8000fea:	4288      	cmp	r0, r1
 8000fec:	d12b      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 8000fee:	e12b      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000ff0:	ab03      	add	r3, sp, #12
 8000ff2:	aa05      	add	r2, sp, #20
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	7c20      	ldrb	r0, [r4, #16]
 8000ff8:	68a5      	ldr	r5, [r4, #8]
 8000ffa:	696d      	ldr	r5, [r5, #20]
 8000ffc:	47a8      	blx	r5
 8000ffe:	9803      	ldr	r0, [sp, #12]
 8001000:	2800      	cmp	r0, #0
 8001002:	d100      	bne.n	8001006 <PE_SubStateMachine_Generic+0x29e>
 8001004:	e192      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001006:	2000      	movs	r0, #0
 8001008:	9002      	str	r0, [sp, #8]
 800100a:	2003      	movs	r0, #3
 800100c:	9001      	str	r0, [sp, #4]
 800100e:	9803      	ldr	r0, [sp, #12]
 8001010:	0880      	lsrs	r0, r0, #2
 8001012:	9000      	str	r0, [sp, #0]
 8001014:	ab05      	add	r3, sp, #20
 8001016:	220c      	movs	r2, #12
 8001018:	e154      	b.n	80012c4 <PE_SubStateMachine_Generic+0x55c>
 800101a:	6861      	ldr	r1, [r4, #4]
 800101c:	6809      	ldr	r1, [r1, #0]
 800101e:	0889      	lsrs	r1, r1, #2
 8001020:	4031      	ands	r1, r6
 8001022:	d000      	beq.n	8001026 <PE_SubStateMachine_Generic+0x2be>
 8001024:	2001      	movs	r0, #1
 8001026:	9000      	str	r0, [sp, #0]
 8001028:	2368      	movs	r3, #104	; 0x68
 800102a:	2218      	movs	r2, #24
 800102c:	2031      	movs	r0, #49	; 0x31
 800102e:	5c21      	ldrb	r1, [r4, r0]
 8001030:	0020      	movs	r0, r4
 8001032:	f000 fa6d 	bl	8001510 <PE_Send_CtrlMessage>
 8001036:	2800      	cmp	r0, #0
 8001038:	d105      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 800103a:	200f      	movs	r0, #15
 800103c:	7720      	strb	r0, [r4, #28]
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8001040:	83e0      	strh	r0, [r4, #30]
 8001042:	201b      	movs	r0, #27
 8001044:	9004      	str	r0, [sp, #16]
 8001046:	e172      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001048:	0000802d 	.word	0x0000802d
 800104c:	0000801b 	.word	0x0000801b
 8001050:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001052:	7800      	ldrb	r0, [r0, #0]
 8001054:	2814      	cmp	r0, #20
 8001056:	d023      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001058:	2030      	movs	r0, #48	; 0x30
 800105a:	5c20      	ldrb	r0, [r4, r0]
 800105c:	2131      	movs	r1, #49	; 0x31
 800105e:	5c61      	ldrb	r1, [r4, r1]
 8001060:	4288      	cmp	r0, r1
 8001062:	d11d      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001064:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001066:	0bc1      	lsrs	r1, r0, #15
 8001068:	d11a      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 800106a:	0b01      	lsrs	r1, r0, #12
 800106c:	0749      	lsls	r1, r1, #29
 800106e:	d017      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001070:	06c0      	lsls	r0, r0, #27
 8001072:	0ec0      	lsrs	r0, r0, #27
 8001074:	280c      	cmp	r0, #12
 8001076:	d113      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001078:	2304      	movs	r3, #4
 800107a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800107c:	1c82      	adds	r2, r0, #2
 800107e:	2114      	movs	r1, #20
 8001080:	7c20      	ldrb	r0, [r4, #16]
 8001082:	68a6      	ldr	r6, [r4, #8]
 8001084:	69b6      	ldr	r6, [r6, #24]
 8001086:	47b0      	blx	r6
 8001088:	2003      	movs	r0, #3
 800108a:	7460      	strb	r0, [r4, #17]
 800108c:	9504      	str	r5, [sp, #16]
 800108e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001090:	7800      	ldrb	r0, [r0, #0]
 8001092:	2814      	cmp	r0, #20
 8001094:	d004      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001096:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001098:	7007      	strb	r7, [r0, #0]
 800109a:	0020      	movs	r0, r4
 800109c:	f7ff fc5b 	bl	8000956 <PE_Clear_RxEvent>
 80010a0:	8be0      	ldrh	r0, [r4, #30]
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0209      	lsls	r1, r1, #8
 80010a6:	4288      	cmp	r0, r1
 80010a8:	d108      	bne.n	80010bc <PE_SubStateMachine_Generic+0x354>
 80010aa:	2011      	movs	r0, #17
 80010ac:	e0cd      	b.n	800124a <PE_SubStateMachine_Generic+0x4e2>
 80010ae:	9500      	str	r5, [sp, #0]
 80010b0:	2303      	movs	r3, #3
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	0020      	movs	r0, r4
 80010b8:	f000 fa2a 	bl	8001510 <PE_Send_CtrlMessage>
 80010bc:	e137      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80010be:	ab03      	add	r3, sp, #12
 80010c0:	48c9      	ldr	r0, [pc, #804]	; (80013e8 <.text_73>)
 80010c2:	1822      	adds	r2, r4, r0
 80010c4:	2108      	movs	r1, #8
 80010c6:	7c20      	ldrb	r0, [r4, #16]
 80010c8:	68a7      	ldr	r7, [r4, #8]
 80010ca:	697f      	ldr	r7, [r7, #20]
 80010cc:	47b8      	blx	r7
 80010ce:	2119      	movs	r1, #25
 80010d0:	9803      	ldr	r0, [sp, #12]
 80010d2:	f000 f9bb 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d129      	bne.n	800112e <PE_SubStateMachine_Generic+0x3c6>
 80010da:	48c4      	ldr	r0, [pc, #784]	; (80013ec <.text_74>)
 80010dc:	1826      	adds	r6, r4, r0
 80010de:	7035      	strb	r5, [r6, #0]
 80010e0:	7075      	strb	r5, [r6, #1]
 80010e2:	7c20      	ldrb	r0, [r4, #16]
 80010e4:	f7ff fe2e 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d103      	bne.n	80010f4 <PE_SubStateMachine_Generic+0x38c>
 80010ec:	7870      	ldrb	r0, [r6, #1]
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4301      	orrs	r1, r0
 80010f2:	7071      	strb	r1, [r6, #1]
 80010f4:	9502      	str	r5, [sp, #8]
 80010f6:	2003      	movs	r0, #3
 80010f8:	9001      	str	r0, [sp, #4]
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	b280      	uxth	r0, r0
 8001100:	9000      	str	r0, [sp, #0]
 8001102:	48bb      	ldr	r0, [pc, #748]	; (80013f0 <.text_75>)
 8001104:	1823      	adds	r3, r4, r0
 8001106:	2201      	movs	r2, #1
 8001108:	2100      	movs	r1, #0
 800110a:	0020      	movs	r0, r4
 800110c:	f000 fb5e 	bl	80017cc <PE_Send_ExtendedMessage>
 8001110:	2148      	movs	r1, #72	; 0x48
 8001112:	e057      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8001114:	ab03      	add	r3, sp, #12
 8001116:	48b4      	ldr	r0, [pc, #720]	; (80013e8 <.text_73>)
 8001118:	1822      	adds	r2, r4, r0
 800111a:	2113      	movs	r1, #19
 800111c:	7c20      	ldrb	r0, [r4, #16]
 800111e:	68a7      	ldr	r7, [r4, #8]
 8001120:	697f      	ldr	r7, [r7, #20]
 8001122:	47b8      	blx	r7
 8001124:	2118      	movs	r1, #24
 8001126:	9803      	ldr	r0, [sp, #12]
 8001128:	f000 f990 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800112c:	2800      	cmp	r0, #0
 800112e:	d000      	beq.n	8001132 <PE_SubStateMachine_Generic+0x3ca>
 8001130:	e0fc      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001132:	48ae      	ldr	r0, [pc, #696]	; (80013ec <.text_74>)
 8001134:	1826      	adds	r6, r4, r0
 8001136:	7035      	strb	r5, [r6, #0]
 8001138:	7075      	strb	r5, [r6, #1]
 800113a:	7c20      	ldrb	r0, [r4, #16]
 800113c:	f7ff fe02 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001140:	2800      	cmp	r0, #0
 8001142:	d103      	bne.n	800114c <PE_SubStateMachine_Generic+0x3e4>
 8001144:	7870      	ldrb	r0, [r6, #1]
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4301      	orrs	r1, r0
 800114a:	7071      	strb	r1, [r6, #1]
 800114c:	9502      	str	r5, [sp, #8]
 800114e:	2003      	movs	r0, #3
 8001150:	9001      	str	r0, [sp, #4]
 8001152:	9803      	ldr	r0, [sp, #12]
 8001154:	1d00      	adds	r0, r0, #4
 8001156:	b280      	uxth	r0, r0
 8001158:	9000      	str	r0, [sp, #0]
 800115a:	48a5      	ldr	r0, [pc, #660]	; (80013f0 <.text_75>)
 800115c:	1823      	adds	r3, r4, r0
 800115e:	220f      	movs	r2, #15
 8001160:	2100      	movs	r1, #0
 8001162:	0020      	movs	r0, r4
 8001164:	f000 fb32 	bl	80017cc <PE_Send_ExtendedMessage>
 8001168:	2161      	movs	r1, #97	; 0x61
 800116a:	e02b      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 800116c:	ab03      	add	r3, sp, #12
 800116e:	489e      	ldr	r0, [pc, #632]	; (80013e8 <.text_73>)
 8001170:	1822      	adds	r2, r4, r0
 8001172:	2109      	movs	r1, #9
 8001174:	7c20      	ldrb	r0, [r4, #16]
 8001176:	68a7      	ldr	r7, [r4, #8]
 8001178:	697f      	ldr	r7, [r7, #20]
 800117a:	47b8      	blx	r7
 800117c:	2107      	movs	r1, #7
 800117e:	9803      	ldr	r0, [sp, #12]
 8001180:	f000 f964 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001184:	2800      	cmp	r0, #0
 8001186:	d170      	bne.n	800126a <PE_SubStateMachine_Generic+0x502>
 8001188:	4998      	ldr	r1, [pc, #608]	; (80013ec <.text_74>)
 800118a:	5465      	strb	r5, [r4, r1]
 800118c:	1860      	adds	r0, r4, r1
 800118e:	7045      	strb	r5, [r0, #1]
 8001190:	7c20      	ldrb	r0, [r4, #16]
 8001192:	f7ff fdd7 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001196:	2800      	cmp	r0, #0
 8001198:	d105      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x43e>
 800119a:	4894      	ldr	r0, [pc, #592]	; (80013ec <.text_74>)
 800119c:	1820      	adds	r0, r4, r0
 800119e:	7841      	ldrb	r1, [r0, #1]
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	430a      	orrs	r2, r1
 80011a4:	7042      	strb	r2, [r0, #1]
 80011a6:	9502      	str	r5, [sp, #8]
 80011a8:	2003      	movs	r0, #3
 80011aa:	9001      	str	r0, [sp, #4]
 80011ac:	9803      	ldr	r0, [sp, #12]
 80011ae:	1d00      	adds	r0, r0, #4
 80011b0:	b280      	uxth	r0, r0
 80011b2:	9000      	str	r0, [sp, #0]
 80011b4:	488e      	ldr	r0, [pc, #568]	; (80013f0 <.text_75>)
 80011b6:	1823      	adds	r3, r4, r0
 80011b8:	2202      	movs	r2, #2
 80011ba:	2100      	movs	r1, #0
 80011bc:	0020      	movs	r0, r4
 80011be:	f000 fb05 	bl	80017cc <PE_Send_ExtendedMessage>
 80011c2:	214f      	movs	r1, #79	; 0x4f
 80011c4:	7c20      	ldrb	r0, [r4, #16]
 80011c6:	f7ff f95b 	bl	8000480 <USBPD_PE_Notification>
 80011ca:	e0b0      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80011cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80011ce:	7800      	ldrb	r0, [r0, #0]
 80011d0:	2814      	cmp	r0, #20
 80011d2:	d034      	beq.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 80011d4:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80011d6:	0bc1      	lsrs	r1, r0, #15
 80011d8:	d11a      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011da:	0b01      	lsrs	r1, r0, #12
 80011dc:	0749      	lsls	r1, r1, #29
 80011de:	d017      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e0:	06c0      	lsls	r0, r0, #27
 80011e2:	0ec0      	lsrs	r0, r0, #27
 80011e4:	2805      	cmp	r0, #5
 80011e6:	d113      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e8:	2304      	movs	r3, #4
 80011ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011ec:	1d02      	adds	r2, r0, #4
 80011ee:	210f      	movs	r1, #15
 80011f0:	7c20      	ldrb	r0, [r4, #16]
 80011f2:	68a6      	ldr	r6, [r4, #8]
 80011f4:	69b6      	ldr	r6, [r6, #24]
 80011f6:	47b0      	blx	r6
 80011f8:	2003      	movs	r0, #3
 80011fa:	7460      	strb	r0, [r4, #17]
 80011fc:	9504      	str	r5, [sp, #16]
 80011fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001200:	7800      	ldrb	r0, [r0, #0]
 8001202:	2814      	cmp	r0, #20
 8001204:	d004      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 8001206:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001208:	700f      	strb	r7, [r1, #0]
 800120a:	0020      	movs	r0, r4
 800120c:	f7ff fba3 	bl	8000956 <PE_Clear_RxEvent>
 8001210:	2034      	movs	r0, #52	; 0x34
 8001212:	5c20      	ldrb	r0, [r4, r0]
 8001214:	06c0      	lsls	r0, r0, #27
 8001216:	0ec0      	lsrs	r0, r0, #27
 8001218:	2810      	cmp	r0, #16
 800121a:	d110      	bne.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 800121c:	2159      	movs	r1, #89	; 0x59
 800121e:	7c20      	ldrb	r0, [r4, #16]
 8001220:	f7ff f92e 	bl	8000480 <USBPD_PE_Notification>
 8001224:	83e5      	strh	r5, [r4, #30]
 8001226:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001228:	7800      	ldrb	r0, [r0, #0]
 800122a:	2814      	cmp	r0, #20
 800122c:	d004      	beq.n	8001238 <PE_SubStateMachine_Generic+0x4d0>
 800122e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001230:	7007      	strb	r7, [r0, #0]
 8001232:	0020      	movs	r0, r4
 8001234:	f7ff fb8f 	bl	8000956 <PE_Clear_RxEvent>
 8001238:	2003      	movs	r0, #3
 800123a:	7460      	strb	r0, [r4, #17]
 800123c:	9504      	str	r5, [sp, #16]
 800123e:	8be0      	ldrh	r0, [r4, #30]
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0209      	lsls	r1, r1, #8
 8001244:	4288      	cmp	r0, r1
 8001246:	d172      	bne.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001248:	2003      	movs	r0, #3
 800124a:	7460      	strb	r0, [r4, #17]
 800124c:	9504      	str	r5, [sp, #16]
 800124e:	e06e      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001250:	ab03      	add	r3, sp, #12
 8001252:	4865      	ldr	r0, [pc, #404]	; (80013e8 <.text_73>)
 8001254:	1822      	adds	r2, r4, r0
 8001256:	210d      	movs	r1, #13
 8001258:	7c20      	ldrb	r0, [r4, #16]
 800125a:	68a7      	ldr	r7, [r4, #8]
 800125c:	697f      	ldr	r7, [r7, #20]
 800125e:	47b8      	blx	r7
 8001260:	2104      	movs	r1, #4
 8001262:	9803      	ldr	r0, [sp, #12]
 8001264:	f000 f8f2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001268:	2800      	cmp	r0, #0
 800126a:	d15f      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 800126c:	485f      	ldr	r0, [pc, #380]	; (80013ec <.text_74>)
 800126e:	1826      	adds	r6, r4, r0
 8001270:	7035      	strb	r5, [r6, #0]
 8001272:	7075      	strb	r5, [r6, #1]
 8001274:	7c20      	ldrb	r0, [r4, #16]
 8001276:	f7ff fd65 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800127a:	2800      	cmp	r0, #0
 800127c:	d103      	bne.n	8001286 <PE_SubStateMachine_Generic+0x51e>
 800127e:	7870      	ldrb	r0, [r6, #1]
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	4301      	orrs	r1, r0
 8001284:	7071      	strb	r1, [r6, #1]
 8001286:	9502      	str	r5, [sp, #8]
 8001288:	2003      	movs	r0, #3
 800128a:	9001      	str	r0, [sp, #4]
 800128c:	9803      	ldr	r0, [sp, #12]
 800128e:	1d00      	adds	r0, r0, #4
 8001290:	b280      	uxth	r0, r0
 8001292:	9000      	str	r0, [sp, #0]
 8001294:	4856      	ldr	r0, [pc, #344]	; (80013f0 <.text_75>)
 8001296:	1823      	adds	r3, r4, r0
 8001298:	2207      	movs	r2, #7
 800129a:	e03d      	b.n	8001318 <PE_SubStateMachine_Generic+0x5b0>
 800129c:	9505      	str	r5, [sp, #20]
 800129e:	ab03      	add	r3, sp, #12
 80012a0:	aa05      	add	r2, sp, #20
 80012a2:	210f      	movs	r1, #15
 80012a4:	7c20      	ldrb	r0, [r4, #16]
 80012a6:	68a5      	ldr	r5, [r4, #8]
 80012a8:	696d      	ldr	r5, [r5, #20]
 80012aa:	47a8      	blx	r5
 80012ac:	2104      	movs	r1, #4
 80012ae:	9803      	ldr	r0, [sp, #12]
 80012b0:	f000 f8cc 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d139      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012b8:	9002      	str	r0, [sp, #8]
 80012ba:	2003      	movs	r0, #3
 80012bc:	9001      	str	r0, [sp, #4]
 80012be:	9600      	str	r6, [sp, #0]
 80012c0:	ab05      	add	r3, sp, #20
 80012c2:	2205      	movs	r2, #5
 80012c4:	2100      	movs	r1, #0
 80012c6:	0020      	movs	r0, r4
 80012c8:	f000 f94d 	bl	8001566 <PE_Send_DataMessage>
 80012cc:	e02f      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80012ce:	ab03      	add	r3, sp, #12
 80012d0:	4845      	ldr	r0, [pc, #276]	; (80013e8 <.text_73>)
 80012d2:	1822      	adds	r2, r4, r0
 80012d4:	2111      	movs	r1, #17
 80012d6:	7c20      	ldrb	r0, [r4, #16]
 80012d8:	68a7      	ldr	r7, [r4, #8]
 80012da:	697f      	ldr	r7, [r7, #20]
 80012dc:	47b8      	blx	r7
 80012de:	2109      	movs	r1, #9
 80012e0:	9803      	ldr	r0, [sp, #12]
 80012e2:	f000 f8b3 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d120      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012ea:	4840      	ldr	r0, [pc, #256]	; (80013ec <.text_74>)
 80012ec:	1826      	adds	r6, r4, r0
 80012ee:	7035      	strb	r5, [r6, #0]
 80012f0:	7075      	strb	r5, [r6, #1]
 80012f2:	7c20      	ldrb	r0, [r4, #16]
 80012f4:	f7ff fd26 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d103      	bne.n	8001304 <PE_SubStateMachine_Generic+0x59c>
 80012fc:	7870      	ldrb	r0, [r6, #1]
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4301      	orrs	r1, r0
 8001302:	7071      	strb	r1, [r6, #1]
 8001304:	9502      	str	r5, [sp, #8]
 8001306:	2003      	movs	r0, #3
 8001308:	9001      	str	r0, [sp, #4]
 800130a:	9803      	ldr	r0, [sp, #12]
 800130c:	1d00      	adds	r0, r0, #4
 800130e:	b280      	uxth	r0, r0
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	4837      	ldr	r0, [pc, #220]	; (80013f0 <.text_75>)
 8001314:	1823      	adds	r3, r4, r0
 8001316:	2205      	movs	r2, #5
 8001318:	2100      	movs	r1, #0
 800131a:	0020      	movs	r0, r4
 800131c:	f000 fa56 	bl	80017cc <PE_Send_ExtendedMessage>
 8001320:	e005      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001322:	2150      	movs	r1, #80	; 0x50
 8001324:	7c20      	ldrb	r0, [r4, #16]
 8001326:	f7ff f8ab 	bl	8000480 <USBPD_PE_Notification>
 800132a:	e78d      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 800132c:	7466      	strb	r6, [r4, #17]
 800132e:	9804      	ldr	r0, [sp, #16]
 8001330:	b00f      	add	sp, #60	; 0x3c
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001334 <PE_SubStateMachine_ReceiveDRS>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	0004      	movs	r4, r0
 8001338:	252a      	movs	r5, #42	; 0x2a
 800133a:	7c20      	ldrb	r0, [r4, #16]
 800133c:	68a1      	ldr	r1, [r4, #8]
 800133e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001340:	4788      	blx	r1
 8001342:	280a      	cmp	r0, #10
 8001344:	d002      	beq.n	800134c <PE_SubStateMachine_ReceiveDRS+0x18>
 8001346:	280c      	cmp	r0, #12
 8001348:	d017      	beq.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 800134a:	e00d      	b.n	8001368 <PE_SubStateMachine_ReceiveDRS+0x34>
 800134c:	2000      	movs	r0, #0
 800134e:	9000      	str	r0, [sp, #0]
 8001350:	2303      	movs	r3, #3
 8001352:	2203      	movs	r2, #3
 8001354:	2100      	movs	r1, #0
 8001356:	0020      	movs	r0, r4
 8001358:	f000 f8da 	bl	8001510 <PE_Send_CtrlMessage>
 800135c:	2800      	cmp	r0, #0
 800135e:	d10d      	bne.n	800137c <PE_SubStateMachine_ReceiveDRS+0x48>
 8001360:	0020      	movs	r0, r4
 8001362:	f000 f88b 	bl	800147c <PE_SwitchDataRole>
 8001366:	bd31      	pop	{r0, r4, r5, pc}
 8001368:	6860      	ldr	r0, [r4, #4]
 800136a:	7800      	ldrb	r0, [r0, #0]
 800136c:	0780      	lsls	r0, r0, #30
 800136e:	0f80      	lsrs	r0, r0, #30
 8001370:	2802      	cmp	r0, #2
 8001372:	d102      	bne.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 8001374:	2001      	movs	r0, #1
 8001376:	7460      	strb	r0, [r4, #17]
 8001378:	bd31      	pop	{r0, r4, r5, pc}
 800137a:	7465      	strb	r5, [r4, #17]
 800137c:	bd31      	pop	{r0, r4, r5, pc}

0800137e <PE_UpdateTimer>:
 800137e:	b510      	push	{r4, lr}
 8001380:	0002      	movs	r2, r0
 8001382:	2080      	movs	r0, #128	; 0x80
 8001384:	0200      	lsls	r0, r0, #8
 8001386:	0454      	lsls	r4, r2, #17
 8001388:	0c64      	lsrs	r4, r4, #17
 800138a:	42a1      	cmp	r1, r4
 800138c:	da00      	bge.n	8001390 <PE_UpdateTimer+0x12>
 800138e:	1a50      	subs	r0, r2, r1
 8001390:	b280      	uxth	r0, r0
 8001392:	bd10      	pop	{r4, pc}

08001394 <PE_CallHardResetCallback>:
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <PE_CallHardResetCallback+0xa>
 800139c:	4770      	bx	lr
 800139e:	b580      	push	{r7, lr}
 80013a0:	7c00      	ldrb	r0, [r0, #16]
 80013a2:	4798      	blx	r3
 80013a4:	bd01      	pop	{r0, pc}

080013a6 <PE_SetPowerNegotiation>:
 80013a6:	b510      	push	{r4, lr}
 80013a8:	6842      	ldr	r2, [r0, #4]
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	055c      	lsls	r4, r3, #21
 80013ae:	0f64      	lsrs	r4, r4, #29
 80013b0:	42a1      	cmp	r1, r4
 80013b2:	d00b      	beq.n	80013cc <PE_SetPowerNegotiation+0x26>
 80013b4:	4c2e      	ldr	r4, [pc, #184]	; (8001470 <.text_79>)
 80013b6:	401c      	ands	r4, r3
 80013b8:	0209      	lsls	r1, r1, #8
 80013ba:	23e0      	movs	r3, #224	; 0xe0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	400b      	ands	r3, r1
 80013c0:	4323      	orrs	r3, r4
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	215a      	movs	r1, #90	; 0x5a
 80013c6:	7c00      	ldrb	r0, [r0, #16]
 80013c8:	f7ff f85a 	bl	8000480 <USBPD_PE_Notification>
 80013cc:	bd10      	pop	{r4, pc}

080013ce <USBPD_PE_ExecFastRoleSwapSignalling>:
 80013ce:	b580      	push	{r7, lr}
 80013d0:	4928      	ldr	r1, [pc, #160]	; (8001474 <.text_80>)
 80013d2:	0082      	lsls	r2, r0, #2
 80013d4:	5889      	ldr	r1, [r1, r2]
 80013d6:	694a      	ldr	r2, [r1, #20]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4313      	orrs	r3, r2
 80013de:	614b      	str	r3, [r1, #20]
 80013e0:	6889      	ldr	r1, [r1, #8]
 80013e2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80013e4:	4788      	blx	r1
 80013e6:	bd01      	pop	{r0, pc}

080013e8 <.text_73>:
 80013e8:	00000267 	.word	0x00000267

080013ec <.text_74>:
 80013ec:	00000265 	.word	0x00000265

080013f0 <.text_75>:
 80013f0:	00000263 	.word	0x00000263

080013f4 <PE_CalculateMinTiming>:
 80013f4:	0001      	movs	r1, r0
 80013f6:	2000      	movs	r0, #0
 80013f8:	43c0      	mvns	r0, r0
 80013fa:	0c42      	lsrs	r2, r0, #17
 80013fc:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 80013fe:	4213      	tst	r3, r2
 8001400:	d001      	beq.n	8001406 <PE_CalculateMinTiming+0x12>
 8001402:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8001404:	4010      	ands	r0, r2
 8001406:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8001408:	4213      	tst	r3, r2
 800140a:	d006      	beq.n	800141a <PE_CalculateMinTiming+0x26>
 800140c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800140e:	4013      	ands	r3, r2
 8001410:	4298      	cmp	r0, r3
 8001412:	d302      	bcc.n	800141a <PE_CalculateMinTiming+0x26>
 8001414:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8001416:	0010      	movs	r0, r2
 8001418:	4008      	ands	r0, r1
 800141a:	4770      	bx	lr

0800141c <PE_SetPowerNegociation>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	0005      	movs	r5, r0
 8001420:	000c      	movs	r4, r1
 8001422:	6868      	ldr	r0, [r5, #4]
 8001424:	6800      	ldr	r0, [r0, #0]
 8001426:	0540      	lsls	r0, r0, #21
 8001428:	0f40      	lsrs	r0, r0, #29
 800142a:	4284      	cmp	r4, r0
 800142c:	d003      	beq.n	8001436 <PE_SetPowerNegociation+0x1a>
 800142e:	215a      	movs	r1, #90	; 0x5a
 8001430:	7c28      	ldrb	r0, [r5, #16]
 8001432:	f7ff f825 	bl	8000480 <USBPD_PE_Notification>
 8001436:	6868      	ldr	r0, [r5, #4]
 8001438:	6801      	ldr	r1, [r0, #0]
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <.text_79>)
 800143c:	400a      	ands	r2, r1
 800143e:	0221      	lsls	r1, r4, #8
 8001440:	23e0      	movs	r3, #224	; 0xe0
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	400b      	ands	r3, r1
 8001446:	4313      	orrs	r3, r2
 8001448:	6003      	str	r3, [r0, #0]
 800144a:	bd31      	pop	{r0, r4, r5, pc}

0800144c <PE_CheckDataSizeFromGetDataInfo>:
 800144c:	b51c      	push	{r2, r3, r4, lr}
 800144e:	0002      	movs	r2, r0
 8001450:	2000      	movs	r0, #0
 8001452:	428a      	cmp	r2, r1
 8001454:	d20a      	bcs.n	800146c <PE_CheckDataSizeFromGetDataInfo+0x20>
 8001456:	2018      	movs	r0, #24
 8001458:	9000      	str	r0, [sp, #0]
 800145a:	bf00      	nop
 800145c:	a315      	add	r3, pc, #84	; (adr r3, 80014b4 <.text_83>)
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2006      	movs	r0, #6
 8001464:	4c04      	ldr	r4, [pc, #16]	; (8001478 <.text_81>)
 8001466:	6824      	ldr	r4, [r4, #0]
 8001468:	47a0      	blx	r4
 800146a:	2002      	movs	r0, #2
 800146c:	bd16      	pop	{r1, r2, r4, pc}
	...

08001470 <.text_79>:
 8001470:	fffff8ff 	.word	0xfffff8ff

08001474 <.text_80>:
 8001474:	200001e4 	.word	0x200001e4

08001478 <.text_81>:
 8001478:	20000000 	.word	0x20000000

0800147c <PE_SwitchDataRole>:
 800147c:	b510      	push	{r4, lr}
 800147e:	0004      	movs	r4, r0
 8001480:	6860      	ldr	r0, [r4, #4]
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	08d3      	lsrs	r3, r2, #3
 8001488:	400b      	ands	r3, r1
 800148a:	d107      	bne.n	800149c <PE_SwitchDataRole+0x20>
 800148c:	2308      	movs	r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	6003      	str	r3, [r0, #0]
 8001492:	7c20      	ldrb	r0, [r4, #16]
 8001494:	f004 f93b 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 8001498:	2125      	movs	r1, #37	; 0x25
 800149a:	e007      	b.n	80014ac <PE_SwitchDataRole+0x30>
 800149c:	2108      	movs	r1, #8
 800149e:	438a      	bics	r2, r1
 80014a0:	6002      	str	r2, [r0, #0]
 80014a2:	2100      	movs	r1, #0
 80014a4:	7c20      	ldrb	r0, [r4, #16]
 80014a6:	f004 f932 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 80014aa:	2124      	movs	r1, #36	; 0x24
 80014ac:	7c20      	ldrb	r0, [r4, #16]
 80014ae:	f7fe ffe7 	bl	8000480 <USBPD_PE_Notification>
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <.text_83>:
 80014b4:	61746144 	.word	0x61746144
 80014b8:	7a695320 	.word	0x7a695320
 80014bc:	73692065 	.word	0x73692065
 80014c0:	746f6e20 	.word	0x746f6e20
 80014c4:	726f6320 	.word	0x726f6320
 80014c8:	74636572 	.word	0x74636572
 80014cc:	00          	.byte	0x00
 80014cd:	00          	.byte	0x00
	...

080014d0 <USBPD_PE_SetTrace>:
 80014d0:	0001      	movs	r1, r0
 80014d2:	d100      	bne.n	80014d6 <USBPD_PE_SetTrace+0x6>
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <.text_5>)
 80014d6:	4906      	ldr	r1, [pc, #24]	; (80014f0 <.text_6>)
 80014d8:	6008      	str	r0, [r1, #0]
 80014da:	4770      	bx	lr

080014dc <USBPD_PE_CheckLIB>:
 80014dc:	0001      	movs	r1, r0
 80014de:	2000      	movs	r0, #0
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <.text_7>)
 80014e2:	4291      	cmp	r1, r2
 80014e4:	d100      	bne.n	80014e8 <USBPD_PE_CheckLIB+0xc>
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
	...

080014ec <.text_5>:
 80014ec:	0800150f 	.word	0x0800150f

080014f0 <.text_6>:
 80014f0:	20000000 	.word	0x20000000

080014f4 <.text_7>:
 80014f4:	30410000 	.word	0x30410000

080014f8 <USBPD_PE_GetMemoryConsumption>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	f004 f8df 	bl	80056bc <USBPD_PRL_GetMemoryConsumption>
 80014fe:	0004      	movs	r4, r0
 8001500:	f7fe fedd 	bl	80002be <USBPD_CAD_GetMemoryConsumption>
 8001504:	1820      	adds	r0, r4, r0
 8001506:	21e1      	movs	r1, #225	; 0xe1
 8001508:	0109      	lsls	r1, r1, #4
 800150a:	1840      	adds	r0, r0, r1
 800150c:	bd10      	pop	{r4, pc}

0800150e <PE_Trace_Empty>:
 800150e:	4770      	bx	lr

08001510 <PE_Send_CtrlMessage>:
 8001510:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001512:	2501      	movs	r5, #1
 8001514:	0004      	movs	r4, r0
 8001516:	000f      	movs	r7, r1
 8001518:	0016      	movs	r6, r2
 800151a:	6860      	ldr	r0, [r4, #4]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	0b00      	lsrs	r0, r0, #12
 8001520:	4028      	ands	r0, r5
 8001522:	d014      	beq.n	800154e <PE_Send_CtrlMessage+0x3e>
 8001524:	a808      	add	r0, sp, #32
 8001526:	7800      	ldrb	r0, [r0, #0]
 8001528:	9001      	str	r0, [sp, #4]
 800152a:	2002      	movs	r0, #2
 800152c:	9000      	str	r0, [sp, #0]
 800152e:	48a2      	ldr	r0, [pc, #648]	; (80017b8 <.text_5>)
 8001530:	1823      	adds	r3, r4, r0
 8001532:	0032      	movs	r2, r6
 8001534:	0039      	movs	r1, r7
 8001536:	7c20      	ldrb	r0, [r4, #16]
 8001538:	f004 f938 	bl	80057ac <USBPD_PRL_SendMessage>
 800153c:	2803      	cmp	r0, #3
 800153e:	d0ec      	beq.n	800151a <PE_Send_CtrlMessage+0xa>
 8001540:	0039      	movs	r1, r7
 8001542:	2810      	cmp	r0, #16
 8001544:	d00e      	beq.n	8001564 <PE_Send_CtrlMessage+0x54>
 8001546:	2e0d      	cmp	r6, #13
 8001548:	d104      	bne.n	8001554 <PE_Send_CtrlMessage+0x44>
 800154a:	2201      	movs	r2, #1
 800154c:	e003      	b.n	8001556 <PE_Send_CtrlMessage+0x46>
 800154e:	7460      	strb	r0, [r4, #17]
 8001550:	2010      	movs	r0, #16
 8001552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001554:	2200      	movs	r2, #0
 8001556:	466b      	mov	r3, sp
 8001558:	7a1b      	ldrb	r3, [r3, #8]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	0003      	movs	r3, r0
 800155e:	0020      	movs	r0, r4
 8001560:	f000 fc24 	bl	8001dac <PE_CheckSendMessageStatus>
 8001564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001566 <PE_Send_DataMessage>:
 8001566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	0004      	movs	r4, r0
 800156c:	2000      	movs	r0, #0
 800156e:	4e93      	ldr	r6, [pc, #588]	; (80017bc <.text_6>)
 8001570:	e00c      	b.n	800158c <PE_Send_DataMessage+0x26>
 8001572:	2100      	movs	r1, #0
 8001574:	0082      	lsls	r2, r0, #2
 8001576:	18a2      	adds	r2, r4, r2
 8001578:	1855      	adds	r5, r2, r1
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	00cf      	lsls	r7, r1, #3
 800157e:	40fa      	lsrs	r2, r7
 8001580:	55aa      	strb	r2, [r5, r6]
 8001582:	1c49      	adds	r1, r1, #1
 8001584:	2904      	cmp	r1, #4
 8001586:	d3f5      	bcc.n	8001574 <PE_Send_DataMessage+0xe>
 8001588:	1d1b      	adds	r3, r3, #4
 800158a:	1c40      	adds	r0, r0, #1
 800158c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800158e:	4288      	cmp	r0, r1
 8001590:	d3ef      	bcc.n	8001572 <PE_Send_DataMessage+0xc>
 8001592:	6860      	ldr	r0, [r4, #4]
 8001594:	6800      	ldr	r0, [r0, #0]
 8001596:	04c1      	lsls	r1, r0, #19
 8001598:	0fc9      	lsrs	r1, r1, #31
 800159a:	d01f      	beq.n	80015dc <PE_Send_DataMessage+0x76>
 800159c:	a80c      	add	r0, sp, #48	; 0x30
 800159e:	7800      	ldrb	r0, [r0, #0]
 80015a0:	9001      	str	r0, [sp, #4]
 80015a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80015a4:	0080      	lsls	r0, r0, #2
 80015a6:	1c80      	adds	r0, r0, #2
 80015a8:	b280      	uxth	r0, r0
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	1eb0      	subs	r0, r6, #2
 80015ae:	1823      	adds	r3, r4, r0
 80015b0:	4668      	mov	r0, sp
 80015b2:	7c02      	ldrb	r2, [r0, #16]
 80015b4:	7b01      	ldrb	r1, [r0, #12]
 80015b6:	7c20      	ldrb	r0, [r4, #16]
 80015b8:	f004 f8f8 	bl	80057ac <USBPD_PRL_SendMessage>
 80015bc:	2803      	cmp	r0, #3
 80015be:	d0e8      	beq.n	8001592 <PE_Send_DataMessage+0x2c>
 80015c0:	4669      	mov	r1, sp
 80015c2:	7b09      	ldrb	r1, [r1, #12]
 80015c4:	2810      	cmp	r0, #16
 80015c6:	d007      	beq.n	80015d8 <PE_Send_DataMessage+0x72>
 80015c8:	aa0b      	add	r2, sp, #44	; 0x2c
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	0003      	movs	r3, r0
 80015d0:	2200      	movs	r2, #0
 80015d2:	0020      	movs	r0, r4
 80015d4:	f000 fbea 	bl	8001dac <PE_CheckSendMessageStatus>
 80015d8:	b005      	add	sp, #20
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2010      	movs	r0, #16
 80015de:	e7fb      	b.n	80015d8 <PE_Send_DataMessage+0x72>

080015e0 <PE_Check_ExtendedMessage>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	0004      	movs	r4, r0
 80015e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015e6:	7881      	ldrb	r1, [r0, #2]
 80015e8:	78c0      	ldrb	r0, [r0, #3]
 80015ea:	0200      	lsls	r0, r0, #8
 80015ec:	1808      	adds	r0, r1, r0
 80015ee:	4974      	ldr	r1, [pc, #464]	; (80017c0 <.text_7>)
 80015f0:	1861      	adds	r1, r4, r1
 80015f2:	8008      	strh	r0, [r1, #0]
 80015f4:	2234      	movs	r2, #52	; 0x34
 80015f6:	5ca2      	ldrb	r2, [r4, r2]
 80015f8:	06d2      	lsls	r2, r2, #27
 80015fa:	0ed2      	lsrs	r2, r2, #27
 80015fc:	708a      	strb	r2, [r1, #2]
 80015fe:	2501      	movs	r5, #1
 8001600:	0403      	lsls	r3, r0, #16
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	2201      	movs	r2, #1
 8001606:	401a      	ands	r2, r3
 8001608:	0403      	lsls	r3, r0, #16
 800160a:	0edb      	lsrs	r3, r3, #27
 800160c:	071b      	lsls	r3, r3, #28
 800160e:	d003      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001610:	0013      	movs	r3, r2
 8001612:	d001      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001614:	2034      	movs	r0, #52	; 0x34
 8001616:	e09e      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001618:	05c6      	lsls	r6, r0, #23
 800161a:	0df6      	lsrs	r6, r6, #23
 800161c:	2300      	movs	r3, #0
 800161e:	0407      	lsls	r7, r0, #16
 8001620:	0fff      	lsrs	r7, r7, #31
 8001622:	d10d      	bne.n	8001640 <PE_Check_ExtendedMessage+0x60>
 8001624:	4867      	ldr	r0, [pc, #412]	; (80017c4 <.text_8>)
 8001626:	5226      	strh	r6, [r4, r0]
 8001628:	4866      	ldr	r0, [pc, #408]	; (80017c4 <.text_8>)
 800162a:	5a20      	ldrh	r0, [r4, r0]
 800162c:	4283      	cmp	r3, r0
 800162e:	d21b      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001630:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001632:	1d00      	adds	r0, r0, #4
 8001634:	5cc0      	ldrb	r0, [r0, r3]
 8001636:	4a64      	ldr	r2, [pc, #400]	; (80017c8 <.text_9>)
 8001638:	18a2      	adds	r2, r4, r2
 800163a:	54d0      	strb	r0, [r2, r3]
 800163c:	1c5b      	adds	r3, r3, #1
 800163e:	e7f3      	b.n	8001628 <PE_Check_ExtendedMessage+0x48>
 8001640:	27f8      	movs	r7, #248	; 0xf8
 8001642:	01ff      	lsls	r7, r7, #7
 8001644:	4007      	ands	r7, r0
 8001646:	d106      	bne.n	8001656 <PE_Check_ExtendedMessage+0x76>
 8001648:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800164a:	0440      	lsls	r0, r0, #17
 800164c:	0f40      	lsrs	r0, r0, #29
 800164e:	2807      	cmp	r0, #7
 8001650:	d30a      	bcc.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001652:	2e1a      	cmp	r6, #26
 8001654:	d908      	bls.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001656:	2a00      	cmp	r2, #0
 8001658:	d106      	bne.n	8001668 <PE_Check_ExtendedMessage+0x88>
 800165a:	485a      	ldr	r0, [pc, #360]	; (80017c4 <.text_8>)
 800165c:	5a20      	ldrh	r0, [r4, r0]
 800165e:	42b0      	cmp	r0, r6
 8001660:	d202      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001662:	83e3      	strh	r3, [r4, #30]
 8001664:	2037      	movs	r0, #55	; 0x37
 8001666:	e076      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001668:	7889      	ldrb	r1, [r1, #2]
 800166a:	2603      	movs	r6, #3
 800166c:	7f22      	ldrb	r2, [r4, #28]
 800166e:	2a00      	cmp	r2, #0
 8001670:	d039      	beq.n	80016e6 <PE_Check_ExtendedMessage+0x106>
 8001672:	2901      	cmp	r1, #1
 8001674:	d008      	beq.n	8001688 <PE_Check_ExtendedMessage+0xa8>
 8001676:	2902      	cmp	r1, #2
 8001678:	d01c      	beq.n	80016b4 <PE_Check_ExtendedMessage+0xd4>
 800167a:	2905      	cmp	r1, #5
 800167c:	d02a      	beq.n	80016d4 <PE_Check_ExtendedMessage+0xf4>
 800167e:	2907      	cmp	r1, #7
 8001680:	d023      	beq.n	80016ca <PE_Check_ExtendedMessage+0xea>
 8001682:	290f      	cmp	r1, #15
 8001684:	d00b      	beq.n	800169e <PE_Check_ExtendedMessage+0xbe>
 8001686:	e094      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001688:	2319      	movs	r3, #25
 800168a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800168c:	1d02      	adds	r2, r0, #4
 800168e:	2108      	movs	r1, #8
 8001690:	7c20      	ldrb	r0, [r4, #16]
 8001692:	68a7      	ldr	r7, [r4, #8]
 8001694:	69bf      	ldr	r7, [r7, #24]
 8001696:	47b8      	blx	r7
 8001698:	7466      	strb	r6, [r4, #17]
 800169a:	2147      	movs	r1, #71	; 0x47
 800169c:	e014      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 800169e:	2318      	movs	r3, #24
 80016a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016a2:	1d02      	adds	r2, r0, #4
 80016a4:	2113      	movs	r1, #19
 80016a6:	7c20      	ldrb	r0, [r4, #16]
 80016a8:	68a7      	ldr	r7, [r4, #8]
 80016aa:	69bf      	ldr	r7, [r7, #24]
 80016ac:	47b8      	blx	r7
 80016ae:	7466      	strb	r6, [r4, #17]
 80016b0:	2162      	movs	r1, #98	; 0x62
 80016b2:	e009      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 80016b4:	2307      	movs	r3, #7
 80016b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016b8:	1d02      	adds	r2, r0, #4
 80016ba:	2109      	movs	r1, #9
 80016bc:	7c20      	ldrb	r0, [r4, #16]
 80016be:	68a7      	ldr	r7, [r4, #8]
 80016c0:	69bf      	ldr	r7, [r7, #24]
 80016c2:	47b8      	blx	r7
 80016c4:	7466      	strb	r6, [r4, #17]
 80016c6:	214e      	movs	r1, #78	; 0x4e
 80016c8:	e2c7      	b.n	8001c5a <.text_21>
 80016ca:	231a      	movs	r3, #26
 80016cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016ce:	1d02      	adds	r2, r0, #4
 80016d0:	210d      	movs	r1, #13
 80016d2:	e003      	b.n	80016dc <PE_Check_ExtendedMessage+0xfc>
 80016d4:	2309      	movs	r3, #9
 80016d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016d8:	1d02      	adds	r2, r0, #4
 80016da:	2111      	movs	r1, #17
 80016dc:	7c20      	ldrb	r0, [r4, #16]
 80016de:	68a7      	ldr	r7, [r4, #8]
 80016e0:	69bf      	ldr	r7, [r7, #24]
 80016e2:	47b8      	blx	r7
 80016e4:	e063      	b.n	80017ae <PE_Check_ExtendedMessage+0x1ce>
 80016e6:	1ec8      	subs	r0, r1, #3
 80016e8:	2808      	cmp	r0, #8
 80016ea:	d862      	bhi.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <PE_Check_ExtendedMessage+0x114>)
 80016ee:	5c12      	ldrb	r2, [r2, r0]
 80016f0:	4497      	add	pc, r2
 80016f2:	bf00      	nop
 80016f4:	46be280a 	.word	0x46be280a
 80016f8:	669884be 	.word	0x669884be
 80016fc:	006e      	.short	0x006e
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	8900      	ldrh	r0, [r0, #8]
 8001702:	0b00      	lsrs	r0, r0, #12
 8001704:	4228      	tst	r0, r5
 8001706:	d054      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001708:	2301      	movs	r3, #1
 800170a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800170c:	1d02      	adds	r2, r0, #4
 800170e:	2110      	movs	r1, #16
 8001710:	7c20      	ldrb	r0, [r4, #16]
 8001712:	68a5      	ldr	r5, [r4, #8]
 8001714:	69ad      	ldr	r5, [r5, #24]
 8001716:	47a8      	blx	r5
 8001718:	203a      	movs	r0, #58	; 0x3a
 800171a:	e01c      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	8900      	ldrh	r0, [r0, #8]
 8001720:	0b00      	lsrs	r0, r0, #12
 8001722:	4228      	tst	r0, r5
 8001724:	d045      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001726:	2301      	movs	r3, #1
 8001728:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800172a:	1d02      	adds	r2, r0, #4
 800172c:	210e      	movs	r1, #14
 800172e:	7c20      	ldrb	r0, [r4, #16]
 8001730:	68a5      	ldr	r5, [r4, #8]
 8001732:	69ad      	ldr	r5, [r5, #24]
 8001734:	47a8      	blx	r5
 8001736:	203b      	movs	r0, #59	; 0x3b
 8001738:	e00d      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	8900      	ldrh	r0, [r0, #8]
 800173e:	0980      	lsrs	r0, r0, #6
 8001740:	4228      	tst	r0, r5
 8001742:	d036      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001744:	2302      	movs	r3, #2
 8001746:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001748:	1d02      	adds	r2, r0, #4
 800174a:	210c      	movs	r1, #12
 800174c:	7c20      	ldrb	r0, [r4, #16]
 800174e:	68a5      	ldr	r5, [r4, #8]
 8001750:	69ad      	ldr	r5, [r5, #24]
 8001752:	47a8      	blx	r5
 8001754:	203c      	movs	r0, #60	; 0x3c
 8001756:	7460      	strb	r0, [r4, #17]
 8001758:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	8900      	ldrh	r0, [r0, #8]
 800175e:	0a80      	lsrs	r0, r0, #10
 8001760:	e00d      	b.n	800177e <PE_Check_ExtendedMessage+0x19e>
 8001762:	68a0      	ldr	r0, [r4, #8]
 8001764:	6905      	ldr	r5, [r0, #16]
 8001766:	2d00      	cmp	r5, #0
 8001768:	d024      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800176a:	4816      	ldr	r0, [pc, #88]	; (80017c4 <.text_8>)
 800176c:	5a23      	ldrh	r3, [r4, r0]
 800176e:	4816      	ldr	r0, [pc, #88]	; (80017c8 <.text_9>)
 8001770:	1822      	adds	r2, r4, r0
 8001772:	7c20      	ldrb	r0, [r4, #16]
 8001774:	47a8      	blx	r5
 8001776:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	8900      	ldrh	r0, [r0, #8]
 800177c:	0a40      	lsrs	r0, r0, #9
 800177e:	4228      	tst	r0, r5
 8001780:	d017      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001782:	68a0      	ldr	r0, [r4, #8]
 8001784:	6900      	ldr	r0, [r0, #16]
 8001786:	2800      	cmp	r0, #0
 8001788:	d109      	bne.n	800179e <PE_Check_ExtendedMessage+0x1be>
 800178a:	e012      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	8900      	ldrh	r0, [r0, #8]
 8001790:	0a40      	lsrs	r0, r0, #9
 8001792:	4228      	tst	r0, r5
 8001794:	d00e      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 8001796:	68a0      	ldr	r0, [r4, #8]
 8001798:	6900      	ldr	r0, [r0, #16]
 800179a:	2800      	cmp	r0, #0
 800179c:	d00a      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <.text_8>)
 80017a0:	5a23      	ldrh	r3, [r4, r0]
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <.text_9>)
 80017a4:	1822      	adds	r2, r4, r0
 80017a6:	7c20      	ldrb	r0, [r4, #16]
 80017a8:	68a5      	ldr	r5, [r4, #8]
 80017aa:	692d      	ldr	r5, [r5, #16]
 80017ac:	47a8      	blx	r5
 80017ae:	7466      	strb	r6, [r4, #17]
 80017b0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80017b2:	7465      	strb	r5, [r4, #17]
 80017b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080017b8 <.text_5>:
 80017b8:	00000263 	.word	0x00000263

080017bc <.text_6>:
 80017bc:	00000265 	.word	0x00000265

080017c0 <.text_7>:
 80017c0:	0000025a 	.word	0x0000025a

080017c4 <.text_8>:
 80017c4:	0000048e 	.word	0x0000048e

080017c8 <.text_9>:
 80017c8:	00000281 	.word	0x00000281

080017cc <PE_Send_ExtendedMessage>:
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80017d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80017d4:	0004      	movs	r4, r0
 80017d6:	000d      	movs	r5, r1
 80017d8:	4668      	mov	r0, sp
 80017da:	7202      	strb	r2, [r0, #8]
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	6860      	ldr	r0, [r4, #4]
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	04c1      	lsls	r1, r0, #19
 80017e4:	0fc9      	lsrs	r1, r1, #31
 80017e6:	d019      	beq.n	800181c <PE_Send_ExtendedMessage+0x50>
 80017e8:	9601      	str	r6, [sp, #4]
 80017ea:	9700      	str	r7, [sp, #0]
 80017ec:	9b03      	ldr	r3, [sp, #12]
 80017ee:	4668      	mov	r0, sp
 80017f0:	7a00      	ldrb	r0, [r0, #8]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	4302      	orrs	r2, r0
 80017f6:	0029      	movs	r1, r5
 80017f8:	7c20      	ldrb	r0, [r4, #16]
 80017fa:	f003 ffd7 	bl	80057ac <USBPD_PRL_SendMessage>
 80017fe:	2803      	cmp	r0, #3
 8001800:	d0ed      	beq.n	80017de <PE_Send_ExtendedMessage+0x12>
 8001802:	0029      	movs	r1, r5
 8001804:	2810      	cmp	r0, #16
 8001806:	d007      	beq.n	8001818 <PE_Send_ExtendedMessage+0x4c>
 8001808:	aa0b      	add	r2, sp, #44	; 0x2c
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	0003      	movs	r3, r0
 8001810:	2200      	movs	r2, #0
 8001812:	0020      	movs	r0, r4
 8001814:	f000 faca 	bl	8001dac <PE_CheckSendMessageStatus>
 8001818:	b005      	add	sp, #20
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	2011      	movs	r0, #17
 800181e:	7460      	strb	r0, [r4, #17]
 8001820:	2010      	movs	r0, #16
 8001822:	e7f9      	b.n	8001818 <PE_Send_ExtendedMessage+0x4c>

08001824 <PE_SubStateMachine_ExtendedMessages>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	0004      	movs	r4, r0
 800182a:	2702      	movs	r7, #2
 800182c:	4889      	ldr	r0, [pc, #548]	; (8001a54 <.text_12>)
 800182e:	1820      	adds	r0, r4, r0
 8001830:	9000      	str	r0, [sp, #0]
 8001832:	2039      	movs	r0, #57	; 0x39
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	466a      	mov	r2, sp
 8001838:	7211      	strb	r1, [r2, #8]
 800183a:	4a87      	ldr	r2, [pc, #540]	; (8001a58 <.text_13>)
 800183c:	2500      	movs	r5, #0
 800183e:	2603      	movs	r6, #3
 8001840:	7c63      	ldrb	r3, [r4, #17]
 8001842:	2b31      	cmp	r3, #49	; 0x31
 8001844:	d010      	beq.n	8001868 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001846:	2b33      	cmp	r3, #51	; 0x33
 8001848:	d075      	beq.n	8001936 <PE_SubStateMachine_ExtendedMessages+0x112>
 800184a:	2b34      	cmp	r3, #52	; 0x34
 800184c:	d07c      	beq.n	8001948 <PE_SubStateMachine_ExtendedMessages+0x124>
 800184e:	2b35      	cmp	r3, #53	; 0x35
 8001850:	d100      	bne.n	8001854 <PE_SubStateMachine_ExtendedMessages+0x30>
 8001852:	e0a8      	b.n	80019a6 <PE_SubStateMachine_ExtendedMessages+0x182>
 8001854:	2b36      	cmp	r3, #54	; 0x36
 8001856:	d100      	bne.n	800185a <PE_SubStateMachine_ExtendedMessages+0x36>
 8001858:	e0be      	b.n	80019d8 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 800185a:	2b37      	cmp	r3, #55	; 0x37
 800185c:	d100      	bne.n	8001860 <PE_SubStateMachine_ExtendedMessages+0x3c>
 800185e:	e0be      	b.n	80019de <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001860:	2b38      	cmp	r3, #56	; 0x38
 8001862:	d100      	bne.n	8001866 <PE_SubStateMachine_ExtendedMessages+0x42>
 8001864:	e0ef      	b.n	8001a46 <PE_SubStateMachine_ExtendedMessages+0x222>
 8001866:	e0f2      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001868:	487c      	ldr	r0, [pc, #496]	; (8001a5c <.text_14>)
 800186a:	1820      	adds	r0, r4, r0
 800186c:	9004      	str	r0, [sp, #16]
 800186e:	4669      	mov	r1, sp
 8001870:	730d      	strb	r5, [r1, #12]
 8001872:	497b      	ldr	r1, [pc, #492]	; (8001a60 <.text_15>)
 8001874:	5265      	strh	r5, [r4, r1]
 8001876:	7c20      	ldrb	r0, [r4, #16]
 8001878:	f7ff fa64 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800187c:	2801      	cmp	r0, #1
 800187e:	d107      	bne.n	8001890 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001880:	4878      	ldr	r0, [pc, #480]	; (8001a64 <.text_16>)
 8001882:	1820      	adds	r0, r4, r0
 8001884:	7005      	strb	r5, [r0, #0]
 8001886:	7045      	strb	r5, [r0, #1]
 8001888:	4877      	ldr	r0, [pc, #476]	; (8001a68 <.text_17>)
 800188a:	1820      	adds	r0, r4, r0
 800188c:	9004      	str	r0, [sp, #16]
 800188e:	e028      	b.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001890:	4976      	ldr	r1, [pc, #472]	; (8001a6c <.text_18>)
 8001892:	1861      	adds	r1, r4, r1
 8001894:	72cd      	strb	r5, [r1, #11]
 8001896:	4975      	ldr	r1, [pc, #468]	; (8001a6c <.text_18>)
 8001898:	1861      	adds	r1, r4, r1
 800189a:	730d      	strb	r5, [r1, #12]
 800189c:	7c20      	ldrb	r0, [r4, #16]
 800189e:	f7ff fa51 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d106      	bne.n	80018b4 <PE_SubStateMachine_ExtendedMessages+0x90>
 80018a6:	4871      	ldr	r0, [pc, #452]	; (8001a6c <.text_18>)
 80018a8:	1820      	adds	r0, r4, r0
 80018aa:	7b01      	ldrb	r1, [r0, #12]
 80018ac:	466a      	mov	r2, sp
 80018ae:	7a12      	ldrb	r2, [r2, #8]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	7302      	strb	r2, [r0, #12]
 80018b4:	486a      	ldr	r0, [pc, #424]	; (8001a60 <.text_15>)
 80018b6:	1820      	adds	r0, r4, r0
 80018b8:	8841      	ldrh	r1, [r0, #2]
 80018ba:	291b      	cmp	r1, #27
 80018bc:	d30e      	bcc.n	80018dc <PE_SubStateMachine_ExtendedMessages+0xb8>
 80018be:	486a      	ldr	r0, [pc, #424]	; (8001a68 <.text_17>)
 80018c0:	1820      	adds	r0, r4, r0
 80018c2:	5d40      	ldrb	r0, [r0, r5]
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	5548      	strb	r0, [r1, r5]
 80018c8:	1c6d      	adds	r5, r5, #1
 80018ca:	2d1a      	cmp	r5, #26
 80018cc:	d209      	bcs.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 80018ce:	e7f6      	b.n	80018be <PE_SubStateMachine_ExtendedMessages+0x9a>
 80018d0:	4965      	ldr	r1, [pc, #404]	; (8001a68 <.text_17>)
 80018d2:	1861      	adds	r1, r4, r1
 80018d4:	5d49      	ldrb	r1, [r1, r5]
 80018d6:	9a00      	ldr	r2, [sp, #0]
 80018d8:	5551      	strb	r1, [r2, r5]
 80018da:	1c6d      	adds	r5, r5, #1
 80018dc:	8841      	ldrh	r1, [r0, #2]
 80018de:	428d      	cmp	r5, r1
 80018e0:	d3f6      	bcc.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0xac>
 80018e2:	2001      	movs	r0, #1
 80018e4:	6961      	ldr	r1, [r4, #20]
 80018e6:	0949      	lsrs	r1, r1, #5
 80018e8:	4001      	ands	r1, r0
 80018ea:	d00a      	beq.n	8001902 <PE_SubStateMachine_ExtendedMessages+0xde>
 80018ec:	6861      	ldr	r1, [r4, #4]
 80018ee:	6809      	ldr	r1, [r1, #0]
 80018f0:	0889      	lsrs	r1, r1, #2
 80018f2:	4001      	ands	r1, r0
 80018f4:	d002      	beq.n	80018fc <PE_SubStateMachine_ExtendedMessages+0xd8>
 80018f6:	4669      	mov	r1, sp
 80018f8:	7308      	strb	r0, [r1, #12]
 80018fa:	e001      	b.n	8001900 <PE_SubStateMachine_ExtendedMessages+0xdc>
 80018fc:	4669      	mov	r1, sp
 80018fe:	730f      	strb	r7, [r1, #12]
 8001900:	2633      	movs	r6, #51	; 0x33
 8001902:	4668      	mov	r0, sp
 8001904:	7b00      	ldrb	r0, [r0, #12]
 8001906:	9002      	str	r0, [sp, #8]
 8001908:	9601      	str	r6, [sp, #4]
 800190a:	4855      	ldr	r0, [pc, #340]	; (8001a60 <.text_15>)
 800190c:	1820      	adds	r0, r4, r0
 800190e:	8840      	ldrh	r0, [r0, #2]
 8001910:	1d00      	adds	r0, r0, #4
 8001912:	b280      	uxth	r0, r0
 8001914:	9000      	str	r0, [sp, #0]
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	4854      	ldr	r0, [pc, #336]	; (8001a6c <.text_18>)
 800191a:	1820      	adds	r0, r4, r0
 800191c:	78c2      	ldrb	r2, [r0, #3]
 800191e:	2033      	movs	r0, #51	; 0x33
 8001920:	5c21      	ldrb	r1, [r4, r0]
 8001922:	0020      	movs	r0, r4
 8001924:	f7ff ff52 	bl	80017cc <PE_Send_ExtendedMessage>
 8001928:	2800      	cmp	r0, #0
 800192a:	d103      	bne.n	8001934 <PE_SubStateMachine_ExtendedMessages+0x110>
 800192c:	484f      	ldr	r0, [pc, #316]	; (8001a6c <.text_18>)
 800192e:	1820      	adds	r0, r4, r0
 8001930:	7940      	ldrb	r0, [r0, #5]
 8001932:	7720      	strb	r0, [r4, #28]
 8001934:	e08b      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001936:	83e2      	strh	r2, [r4, #30]
 8001938:	271b      	movs	r7, #27
 800193a:	494c      	ldr	r1, [pc, #304]	; (8001a6c <.text_18>)
 800193c:	1861      	adds	r1, r4, r1
 800193e:	78c9      	ldrb	r1, [r1, #3]
 8001940:	2904      	cmp	r1, #4
 8001942:	d151      	bne.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001944:	2074      	movs	r0, #116	; 0x74
 8001946:	e04f      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001948:	4848      	ldr	r0, [pc, #288]	; (8001a6c <.text_18>)
 800194a:	5a20      	ldrh	r0, [r4, r0]
 800194c:	0440      	lsls	r0, r0, #17
 800194e:	0f02      	lsrs	r2, r0, #28
 8001950:	211a      	movs	r1, #26
 8001952:	4351      	muls	r1, r2
 8001954:	4842      	ldr	r0, [pc, #264]	; (8001a60 <.text_15>)
 8001956:	1820      	adds	r0, r4, r0
 8001958:	8843      	ldrh	r3, [r0, #2]
 800195a:	4299      	cmp	r1, r3
 800195c:	da01      	bge.n	8001962 <PE_SubStateMachine_ExtendedMessages+0x13e>
 800195e:	2a0a      	cmp	r2, #10
 8001960:	d301      	bcc.n	8001966 <PE_SubStateMachine_ExtendedMessages+0x142>
 8001962:	7466      	strb	r6, [r4, #17]
 8001964:	e01d      	b.n	80019a2 <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001966:	1a5a      	subs	r2, r3, r1
 8001968:	2a1a      	cmp	r2, #26
 800196a:	d202      	bcs.n	8001972 <PE_SubStateMachine_ExtendedMessages+0x14e>
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e000      	b.n	8001974 <PE_SubStateMachine_ExtendedMessages+0x150>
 8001972:	231a      	movs	r3, #26
 8001974:	2200      	movs	r2, #0
 8001976:	e006      	b.n	8001986 <PE_SubStateMachine_ExtendedMessages+0x162>
 8001978:	4e3b      	ldr	r6, [pc, #236]	; (8001a68 <.text_17>)
 800197a:	19a6      	adds	r6, r4, r6
 800197c:	188f      	adds	r7, r1, r2
 800197e:	5df6      	ldrb	r6, [r6, r7]
 8001980:	9f00      	ldr	r7, [sp, #0]
 8001982:	54be      	strb	r6, [r7, r2]
 8001984:	1c52      	adds	r2, r2, #1
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f6      	bcc.n	8001978 <PE_SubStateMachine_ExtendedMessages+0x154>
 800198a:	4934      	ldr	r1, [pc, #208]	; (8001a5c <.text_14>)
 800198c:	1863      	adds	r3, r4, r1
 800198e:	8842      	ldrh	r2, [r0, #2]
 8001990:	4836      	ldr	r0, [pc, #216]	; (8001a6c <.text_18>)
 8001992:	5a20      	ldrh	r0, [r4, r0]
 8001994:	0440      	lsls	r0, r0, #17
 8001996:	0f01      	lsrs	r1, r0, #28
 8001998:	7c20      	ldrb	r0, [r4, #16]
 800199a:	f004 fba8 	bl	80060ee <USBPD_PRL_PrepareExtendedTxChunkSending>
 800199e:	2035      	movs	r0, #53	; 0x35
 80019a0:	7460      	strb	r0, [r4, #17]
 80019a2:	2700      	movs	r7, #0
 80019a4:	e053      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019a6:	6960      	ldr	r0, [r4, #20]
 80019a8:	0681      	lsls	r1, r0, #26
 80019aa:	0fc9      	lsrs	r1, r1, #31
 80019ac:	d001      	beq.n	80019b2 <PE_SubStateMachine_ExtendedMessages+0x18e>
 80019ae:	2036      	movs	r0, #54	; 0x36
 80019b0:	e000      	b.n	80019b4 <PE_SubStateMachine_ExtendedMessages+0x190>
 80019b2:	2003      	movs	r0, #3
 80019b4:	492a      	ldr	r1, [pc, #168]	; (8001a60 <.text_15>)
 80019b6:	1866      	adds	r6, r4, r1
 80019b8:	9502      	str	r5, [sp, #8]
 80019ba:	9001      	str	r0, [sp, #4]
 80019bc:	8870      	ldrh	r0, [r6, #2]
 80019be:	9000      	str	r0, [sp, #0]
 80019c0:	4826      	ldr	r0, [pc, #152]	; (8001a5c <.text_14>)
 80019c2:	1823      	adds	r3, r4, r0
 80019c4:	3809      	subs	r0, #9
 80019c6:	1820      	adds	r0, r4, r0
 80019c8:	78c2      	ldrb	r2, [r0, #3]
 80019ca:	2030      	movs	r0, #48	; 0x30
 80019cc:	5c21      	ldrb	r1, [r4, r0]
 80019ce:	0020      	movs	r0, r4
 80019d0:	f7ff fefc 	bl	80017cc <PE_Send_ExtendedMessage>
 80019d4:	8035      	strh	r5, [r6, #0]
 80019d6:	e03a      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019d8:	83e2      	strh	r2, [r4, #30]
 80019da:	271b      	movs	r7, #27
 80019dc:	e004      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 80019de:	8be0      	ldrh	r0, [r4, #30]
 80019e0:	020b      	lsls	r3, r1, #8
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d102      	bne.n	80019ec <PE_SubStateMachine_ExtendedMessages+0x1c8>
 80019e6:	200f      	movs	r0, #15
 80019e8:	7460      	strb	r0, [r4, #17]
 80019ea:	e030      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019ec:	83e2      	strh	r2, [r4, #30]
 80019ee:	271b      	movs	r7, #27
 80019f0:	481a      	ldr	r0, [pc, #104]	; (8001a5c <.text_14>)
 80019f2:	1825      	adds	r5, r4, r0
 80019f4:	0029      	movs	r1, r5
 80019f6:	7c20      	ldrb	r0, [r4, #16]
 80019f8:	f004 fba1 	bl	800613e <USBPD_PRL_PrepareChunkRequest>
 80019fc:	6860      	ldr	r0, [r4, #4]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	04c1      	lsls	r1, r0, #19
 8001a02:	0fc9      	lsrs	r1, r1, #31
 8001a04:	d012      	beq.n	8001a2c <PE_SubStateMachine_ExtendedMessages+0x208>
 8001a06:	2000      	movs	r0, #0
 8001a08:	9001      	str	r0, [sp, #4]
 8001a0a:	2006      	movs	r0, #6
 8001a0c:	9000      	str	r0, [sp, #0]
 8001a0e:	002b      	movs	r3, r5
 8001a10:	4816      	ldr	r0, [pc, #88]	; (8001a6c <.text_18>)
 8001a12:	1820      	adds	r0, r4, r0
 8001a14:	7880      	ldrb	r0, [r0, #2]
 8001a16:	4669      	mov	r1, sp
 8001a18:	7a0a      	ldrb	r2, [r1, #8]
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	2030      	movs	r0, #48	; 0x30
 8001a1e:	5c21      	ldrb	r1, [r4, r0]
 8001a20:	7c20      	ldrb	r0, [r4, #16]
 8001a22:	f003 fec3 	bl	80057ac <USBPD_PRL_SendMessage>
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d0e8      	beq.n	80019fc <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001a2a:	e002      	b.n	8001a32 <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	7460      	strb	r0, [r4, #17]
 8001a30:	2010      	movs	r0, #16
 8001a32:	2139      	movs	r1, #57	; 0x39
 8001a34:	9100      	str	r1, [sp, #0]
 8001a36:	0003      	movs	r3, r0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2030      	movs	r0, #48	; 0x30
 8001a3c:	5c21      	ldrb	r1, [r4, r0]
 8001a3e:	0020      	movs	r0, r4
 8001a40:	f000 f9b4 	bl	8001dac <PE_CheckSendMessageStatus>
 8001a44:	e003      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a46:	7466      	strb	r6, [r4, #17]
 8001a48:	2700      	movs	r7, #0
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <.text_15>)
 8001a4c:	5225      	strh	r5, [r4, r0]
 8001a4e:	0038      	movs	r0, r7
 8001a50:	b005      	add	sp, #20
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a54 <.text_12>:
 8001a54:	00000267 	.word	0x00000267

08001a58 <.text_13>:
 8001a58:	0000801b 	.word	0x0000801b

08001a5c <.text_14>:
 8001a5c:	00000263 	.word	0x00000263

08001a60 <.text_15>:
 8001a60:	0000048e 	.word	0x0000048e

08001a64 <.text_16>:
 8001a64:	00000387 	.word	0x00000387

08001a68 <.text_17>:
 8001a68:	00000385 	.word	0x00000385

08001a6c <.text_18>:
 8001a6c:	0000025a 	.word	0x0000025a

08001a70 <PE_ManageRXEvent>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	2130      	movs	r1, #48	; 0x30
 8001a74:	5c41      	ldrb	r1, [r0, r1]
 8001a76:	2231      	movs	r2, #49	; 0x31
 8001a78:	5481      	strb	r1, [r0, r2]
 8001a7a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8001a7c:	0bca      	lsrs	r2, r1, #15
 8001a7e:	d002      	beq.n	8001a86 <PE_ManageRXEvent+0x16>
 8001a80:	f7ff fdae 	bl	80015e0 <PE_Check_ExtendedMessage>
 8001a84:	bd01      	pop	{r0, pc}
 8001a86:	22f0      	movs	r2, #240	; 0xf0
 8001a88:	0212      	lsls	r2, r2, #8
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	d102      	bne.n	8001a94 <PE_ManageRXEvent+0x24>
 8001a8e:	f000 f805 	bl	8001a9c <PE_Check_ControlMessage>
 8001a92:	bd01      	pop	{r0, pc}
 8001a94:	f000 f8e5 	bl	8001c62 <PE_Check_DataMessage>
 8001a98:	bd01      	pop	{r0, pc}
	...

08001a9c <PE_Check_ControlMessage>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	272a      	movs	r7, #42	; 0x2a
 8001aa2:	2603      	movs	r6, #3
 8001aa4:	2501      	movs	r5, #1
 8001aa6:	200b      	movs	r0, #11
 8001aa8:	2134      	movs	r1, #52	; 0x34
 8001aaa:	5c61      	ldrb	r1, [r4, r1]
 8001aac:	06c9      	lsls	r1, r1, #27
 8001aae:	0ec9      	lsrs	r1, r1, #27
 8001ab0:	1e49      	subs	r1, r1, #1
 8001ab2:	2917      	cmp	r1, #23
 8001ab4:	d900      	bls.n	8001ab8 <PE_Check_ControlMessage+0x1c>
 8001ab6:	e0c7      	b.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <PE_Check_ControlMessage+0x24>)
 8001aba:	5c52      	ldrb	r2, [r2, r1]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	4497      	add	pc, r2
 8001ac0:	c0c00bcb 	.word	0xc0c00bcb
 8001ac4:	5b22c020 	.word	0x5b22c020
 8001ac8:	c0413449 	.word	0xc0413449
 8001acc:	bec3c319 	.word	0xbec3c319
 8001ad0:	9fb7936f 	.word	0x9fb7936f
 8001ad4:	bac383b0 	.word	0xbac383b0
 8001ad8:	6860      	ldr	r0, [r4, #4]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	0880      	lsrs	r0, r0, #2
 8001ade:	4005      	ands	r5, r0
 8001ae0:	d000      	beq.n	8001ae4 <PE_Check_ControlMessage+0x48>
 8001ae2:	e0b9      	b.n	8001c58 <PE_Check_ControlMessage+0x1bc>
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	7720      	strb	r0, [r4, #28]
 8001ae8:	212b      	movs	r1, #43	; 0x2b
 8001aea:	7c20      	ldrb	r0, [r4, #16]
 8001aec:	f7fe fcc8 	bl	8000480 <USBPD_PE_Notification>
 8001af0:	2098      	movs	r0, #152	; 0x98
 8001af2:	e0a7      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001af4:	7726      	strb	r6, [r4, #28]
 8001af6:	2132      	movs	r1, #50	; 0x32
 8001af8:	7c20      	ldrb	r0, [r4, #16]
 8001afa:	f7fe fcc1 	bl	8000480 <USBPD_PE_Notification>
 8001afe:	2010      	movs	r0, #16
 8001b00:	e0a0      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b02:	2133      	movs	r1, #51	; 0x33
 8001b04:	e09c      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001b06:	2006      	movs	r0, #6
 8001b08:	7720      	strb	r0, [r4, #28]
 8001b0a:	6860      	ldr	r0, [r4, #4]
 8001b0c:	6800      	ldr	r0, [r0, #0]
 8001b0e:	0881      	lsrs	r1, r0, #2
 8001b10:	4029      	ands	r1, r5
 8001b12:	d104      	bne.n	8001b1e <PE_Check_ControlMessage+0x82>
 8001b14:	6821      	ldr	r1, [r4, #0]
 8001b16:	6849      	ldr	r1, [r1, #4]
 8001b18:	08c9      	lsrs	r1, r1, #3
 8001b1a:	4029      	ands	r1, r5
 8001b1c:	d039      	beq.n	8001b92 <PE_Check_ControlMessage+0xf6>
 8001b1e:	210c      	movs	r1, #12
 8001b20:	7c20      	ldrb	r0, [r4, #16]
 8001b22:	f7fe fcad 	bl	8000480 <USBPD_PE_Notification>
 8001b26:	204c      	movs	r0, #76	; 0x4c
 8001b28:	e08c      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	6840      	ldr	r0, [r0, #4]
 8001b2e:	08c0      	lsrs	r0, r0, #3
 8001b30:	4028      	ands	r0, r5
 8001b32:	d00a      	beq.n	8001b4a <PE_Check_ControlMessage+0xae>
 8001b34:	2008      	movs	r0, #8
 8001b36:	7720      	strb	r0, [r4, #28]
 8001b38:	213c      	movs	r1, #60	; 0x3c
 8001b3a:	7c20      	ldrb	r0, [r4, #16]
 8001b3c:	f7fe fca0 	bl	8000480 <USBPD_PE_Notification>
 8001b40:	2022      	movs	r0, #34	; 0x22
 8001b42:	e07f      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b44:	68a0      	ldr	r0, [r4, #8]
 8001b46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d07d      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b4c:	2011      	movs	r0, #17
 8001b4e:	7720      	strb	r0, [r4, #28]
 8001b50:	209d      	movs	r0, #157	; 0x9d
 8001b52:	e077      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b54:	2123      	movs	r1, #35	; 0x23
 8001b56:	7c20      	ldrb	r0, [r4, #16]
 8001b58:	f7fe fc92 	bl	8000480 <USBPD_PE_Notification>
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	05c0      	lsls	r0, r0, #23
 8001b60:	0f40      	lsrs	r0, r0, #29
 8001b62:	d001      	beq.n	8001b68 <PE_Check_ControlMessage+0xcc>
 8001b64:	200f      	movs	r0, #15
 8001b66:	e06d      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b68:	68a0      	ldr	r0, [r4, #8]
 8001b6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d06b      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b70:	2010      	movs	r0, #16
 8001b72:	7720      	strb	r0, [r4, #28]
 8001b74:	2093      	movs	r0, #147	; 0x93
 8001b76:	e065      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b78:	6860      	ldr	r0, [r4, #4]
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	0541      	lsls	r1, r0, #21
 8001b7e:	0f49      	lsrs	r1, r1, #29
 8001b80:	2903      	cmp	r1, #3
 8001b82:	d163      	bne.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b84:	0881      	lsrs	r1, r0, #2
 8001b86:	4029      	ands	r1, r5
 8001b88:	d004      	beq.n	8001b94 <PE_Check_ControlMessage+0xf8>
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	6849      	ldr	r1, [r1, #4]
 8001b8e:	08c9      	lsrs	r1, r1, #3
 8001b90:	4029      	ands	r1, r5
 8001b92:	d05b      	beq.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b94:	2007      	movs	r0, #7
 8001b96:	7720      	strb	r0, [r4, #28]
 8001b98:	201d      	movs	r0, #29
 8001b9a:	7460      	strb	r0, [r4, #17]
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	e04f      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	8901      	ldrh	r1, [r0, #8]
 8001ba4:	08c9      	lsrs	r1, r1, #3
 8001ba6:	4229      	tst	r1, r5
 8001ba8:	d053      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001baa:	6861      	ldr	r1, [r4, #4]
 8001bac:	6809      	ldr	r1, [r1, #0]
 8001bae:	0889      	lsrs	r1, r1, #2
 8001bb0:	4029      	ands	r1, r5
 8001bb2:	d103      	bne.n	8001bbc <PE_Check_ControlMessage+0x120>
 8001bb4:	6840      	ldr	r0, [r0, #4]
 8001bb6:	08c0      	lsrs	r0, r0, #3
 8001bb8:	4028      	ands	r0, r5
 8001bba:	d04a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	7720      	strb	r0, [r4, #28]
 8001bc0:	2063      	movs	r0, #99	; 0x63
 8001bc2:	7460      	strb	r0, [r4, #17]
 8001bc4:	2146      	movs	r1, #70	; 0x46
 8001bc6:	e03b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001bc8:	6860      	ldr	r0, [r4, #4]
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	0880      	lsrs	r0, r0, #2
 8001bce:	4028      	ands	r0, r5
 8001bd0:	d004      	beq.n	8001bdc <PE_Check_ControlMessage+0x140>
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	6840      	ldr	r0, [r0, #4]
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4028      	ands	r0, r5
 8001bda:	d03a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bdc:	205f      	movs	r0, #95	; 0x5f
 8001bde:	7720      	strb	r0, [r4, #28]
 8001be0:	2064      	movs	r0, #100	; 0x64
 8001be2:	7460      	strb	r0, [r4, #17]
 8001be4:	2160      	movs	r1, #96	; 0x60
 8001be6:	e02b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	8909      	ldrh	r1, [r1, #8]
 8001bec:	0949      	lsrs	r1, r1, #5
 8001bee:	4229      	tst	r1, r5
 8001bf0:	d02f      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bf2:	7720      	strb	r0, [r4, #28]
 8001bf4:	214d      	movs	r1, #77	; 0x4d
 8001bf6:	7c20      	ldrb	r0, [r4, #16]
 8001bf8:	f7fe fc42 	bl	8000480 <USBPD_PE_Notification>
 8001bfc:	2030      	movs	r0, #48	; 0x30
 8001bfe:	e021      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c00:	6821      	ldr	r1, [r4, #0]
 8001c02:	8909      	ldrh	r1, [r1, #8]
 8001c04:	0889      	lsrs	r1, r1, #2
 8001c06:	4229      	tst	r1, r5
 8001c08:	d023      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c0a:	7720      	strb	r0, [r4, #28]
 8001c0c:	2149      	movs	r1, #73	; 0x49
 8001c0e:	7c20      	ldrb	r0, [r4, #16]
 8001c10:	f7fe fc36 	bl	8000480 <USBPD_PE_Notification>
 8001c14:	6860      	ldr	r0, [r4, #4]
 8001c16:	6800      	ldr	r0, [r0, #0]
 8001c18:	0880      	lsrs	r0, r0, #2
 8001c1a:	4005      	ands	r5, r0
 8001c1c:	d011      	beq.n	8001c42 <PE_Check_ControlMessage+0x1a6>
 8001c1e:	202d      	movs	r0, #45	; 0x2d
 8001c20:	e010      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	8900      	ldrh	r0, [r0, #8]
 8001c26:	09c0      	lsrs	r0, r0, #7
 8001c28:	4228      	tst	r0, r5
 8001c2a:	d012      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c2c:	202f      	movs	r0, #47	; 0x2f
 8001c2e:	e009      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c30:	2009      	movs	r0, #9
 8001c32:	7720      	strb	r0, [r4, #28]
 8001c34:	e00d      	b.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c36:	200f      	movs	r0, #15
 8001c38:	7720      	strb	r0, [r4, #28]
 8001c3a:	204b      	movs	r0, #75	; 0x4b
 8001c3c:	e002      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c3e:	2159      	movs	r1, #89	; 0x59
 8001c40:	e00b      	b.n	8001c5a <.text_21>
 8001c42:	2011      	movs	r0, #17
 8001c44:	7460      	strb	r0, [r4, #17]
 8001c46:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c48:	6860      	ldr	r0, [r4, #4]
 8001c4a:	6800      	ldr	r0, [r0, #0]
 8001c4c:	4006      	ands	r6, r0
 8001c4e:	2e02      	cmp	r6, #2
 8001c50:	d101      	bne.n	8001c56 <PE_Check_ControlMessage+0x1ba>
 8001c52:	7465      	strb	r5, [r4, #17]
 8001c54:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c56:	7467      	strb	r7, [r4, #17]
 8001c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c5a <.text_21>:
 8001c5a:	7c20      	ldrb	r0, [r4, #16]
 8001c5c:	f7fe fc10 	bl	8000480 <USBPD_PE_Notification>
 8001c60:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c62 <PE_Check_DataMessage>:
 8001c62:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001c64:	0004      	movs	r4, r0
 8001c66:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001c68:	2501      	movs	r5, #1
 8001c6a:	2603      	movs	r6, #3
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	06c1      	lsls	r1, r0, #27
 8001c70:	0ec9      	lsrs	r1, r1, #27
 8001c72:	2901      	cmp	r1, #1
 8001c74:	d029      	beq.n	8001cca <PE_Check_DataMessage+0x68>
 8001c76:	2902      	cmp	r1, #2
 8001c78:	d00b      	beq.n	8001c92 <PE_Check_DataMessage+0x30>
 8001c7a:	2903      	cmp	r1, #3
 8001c7c:	d03d      	beq.n	8001cfa <PE_Check_DataMessage+0x98>
 8001c7e:	2906      	cmp	r1, #6
 8001c80:	d079      	beq.n	8001d76 <PE_Check_DataMessage+0x114>
 8001c82:	2907      	cmp	r1, #7
 8001c84:	d100      	bne.n	8001c88 <PE_Check_DataMessage+0x26>
 8001c86:	e085      	b.n	8001d94 <PE_Check_DataMessage+0x132>
 8001c88:	290a      	cmp	r1, #10
 8001c8a:	d078      	beq.n	8001d7e <PE_Check_DataMessage+0x11c>
 8001c8c:	290f      	cmp	r1, #15
 8001c8e:	d06e      	beq.n	8001d6e <PE_Check_DataMessage+0x10c>
 8001c90:	e089      	b.n	8001da6 <PE_Check_DataMessage+0x144>
 8001c92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c94:	7881      	ldrb	r1, [r0, #2]
 8001c96:	78c2      	ldrb	r2, [r0, #3]
 8001c98:	0212      	lsls	r2, r2, #8
 8001c9a:	1889      	adds	r1, r1, r2
 8001c9c:	7902      	ldrb	r2, [r0, #4]
 8001c9e:	0412      	lsls	r2, r2, #16
 8001ca0:	1889      	adds	r1, r1, r2
 8001ca2:	7940      	ldrb	r0, [r0, #5]
 8001ca4:	0600      	lsls	r0, r0, #24
 8001ca6:	1808      	adds	r0, r1, r0
 8001ca8:	9000      	str	r0, [sp, #0]
 8001caa:	6860      	ldr	r0, [r4, #4]
 8001cac:	6800      	ldr	r0, [r0, #0]
 8001cae:	0880      	lsrs	r0, r0, #2
 8001cb0:	4028      	ands	r0, r5
 8001cb2:	d07a      	beq.n	8001daa <PE_Check_DataMessage+0x148>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	466a      	mov	r2, sp
 8001cb8:	2106      	movs	r1, #6
 8001cba:	7c20      	ldrb	r0, [r4, #16]
 8001cbc:	68a6      	ldr	r6, [r4, #8]
 8001cbe:	69b6      	ldr	r6, [r6, #24]
 8001cc0:	47b0      	blx	r6
 8001cc2:	7725      	strb	r5, [r4, #28]
 8001cc4:	84a7      	strh	r7, [r4, #36]	; 0x24
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	e06e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cca:	6861      	ldr	r1, [r4, #4]
 8001ccc:	6809      	ldr	r1, [r1, #0]
 8001cce:	0889      	lsrs	r1, r1, #2
 8001cd0:	400d      	ands	r5, r1
 8001cd2:	d16a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001cd4:	0980      	lsrs	r0, r0, #6
 8001cd6:	4006      	ands	r6, r0
 8001cd8:	0031      	movs	r1, r6
 8001cda:	7c20      	ldrb	r0, [r4, #16]
 8001cdc:	f7fe ff8a 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8001ce0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001ce2:	0440      	lsls	r0, r0, #17
 8001ce4:	0f40      	lsrs	r0, r0, #29
 8001ce6:	0083      	lsls	r3, r0, #2
 8001ce8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cea:	1c82      	adds	r2, r0, #2
 8001cec:	2104      	movs	r1, #4
 8001cee:	7c20      	ldrb	r0, [r4, #16]
 8001cf0:	68a5      	ldr	r5, [r4, #8]
 8001cf2:	69ad      	ldr	r5, [r5, #24]
 8001cf4:	47a8      	blx	r5
 8001cf6:	2044      	movs	r0, #68	; 0x44
 8001cf8:	e056      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cfa:	9701      	str	r7, [sp, #4]
 8001cfc:	9700      	str	r7, [sp, #0]
 8001cfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d00:	7881      	ldrb	r1, [r0, #2]
 8001d02:	78c2      	ldrb	r2, [r0, #3]
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	1889      	adds	r1, r1, r2
 8001d08:	7902      	ldrb	r2, [r0, #4]
 8001d0a:	0412      	lsls	r2, r2, #16
 8001d0c:	1889      	adds	r1, r1, r2
 8001d0e:	7940      	ldrb	r0, [r0, #5]
 8001d10:	0600      	lsls	r0, r0, #24
 8001d12:	180d      	adds	r5, r1, r0
 8001d14:	466b      	mov	r3, sp
 8001d16:	aa01      	add	r2, sp, #4
 8001d18:	2103      	movs	r1, #3
 8001d1a:	7c20      	ldrb	r0, [r4, #16]
 8001d1c:	68a7      	ldr	r7, [r4, #8]
 8001d1e:	697f      	ldr	r7, [r7, #20]
 8001d20:	47b8      	blx	r7
 8001d22:	2104      	movs	r1, #4
 8001d24:	9800      	ldr	r0, [sp, #0]
 8001d26:	f7ff fb91 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d11d      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d2e:	6860      	ldr	r0, [r4, #4]
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	0540      	lsls	r0, r0, #21
 8001d34:	0f40      	lsrs	r0, r0, #29
 8001d36:	2803      	cmp	r0, #3
 8001d38:	d117      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d3a:	9801      	ldr	r0, [sp, #4]
 8001d3c:	4938      	ldr	r1, [pc, #224]	; (8001e20 <.text_24>)
 8001d3e:	4288      	cmp	r0, r1
 8001d40:	d113      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d42:	0f28      	lsrs	r0, r5, #28
 8001d44:	2805      	cmp	r0, #5
 8001d46:	d00e      	beq.n	8001d66 <PE_Check_DataMessage+0x104>
 8001d48:	2808      	cmp	r0, #8
 8001d4a:	d00a      	beq.n	8001d62 <PE_Check_DataMessage+0x100>
 8001d4c:	2809      	cmp	r0, #9
 8001d4e:	d003      	beq.n	8001d58 <PE_Check_DataMessage+0xf6>
 8001d50:	280a      	cmp	r0, #10
 8001d52:	d12a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001d54:	2166      	movs	r1, #102	; 0x66
 8001d56:	e000      	b.n	8001d5a <PE_Check_DataMessage+0xf8>
 8001d58:	2165      	movs	r1, #101	; 0x65
 8001d5a:	7c20      	ldrb	r0, [r4, #16]
 8001d5c:	f7fe fb90 	bl	8000480 <USBPD_PE_Notification>
 8001d60:	e003      	b.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d62:	2029      	movs	r0, #41	; 0x29
 8001d64:	e020      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d66:	2027      	movs	r0, #39	; 0x27
 8001d68:	e01e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d6a:	7466      	strb	r6, [r4, #17]
 8001d6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f003 fabe 	bl	80052f0 <PE_Check_DataMessageVDM>
 8001d74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	8900      	ldrh	r0, [r0, #8]
 8001d7a:	0900      	lsrs	r0, r0, #4
 8001d7c:	4228      	tst	r0, r5
 8001d7e:	d010      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d80:	2304      	movs	r3, #4
 8001d82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d84:	1c82      	adds	r2, r0, #2
 8001d86:	210b      	movs	r1, #11
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	68a5      	ldr	r5, [r4, #8]
 8001d8c:	69ad      	ldr	r5, [r5, #24]
 8001d8e:	47a8      	blx	r5
 8001d90:	202c      	movs	r0, #44	; 0x2c
 8001d92:	e009      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	8900      	ldrh	r0, [r0, #8]
 8001d98:	0a00      	lsrs	r0, r0, #8
 8001d9a:	4228      	tst	r0, r5
 8001d9c:	d001      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d9e:	203d      	movs	r0, #61	; 0x3d
 8001da0:	e002      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001da2:	7465      	strb	r5, [r4, #17]
 8001da4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001da6:	2011      	movs	r0, #17
 8001da8:	7460      	strb	r0, [r4, #17]
 8001daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001dac <PE_CheckSendMessageStatus>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	000c      	movs	r4, r1
 8001db0:	2110      	movs	r1, #16
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d006      	beq.n	8001dc4 <PE_CheckSendMessageStatus+0x18>
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d00e      	beq.n	8001dd8 <PE_CheckSendMessageStatus+0x2c>
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d011      	beq.n	8001de2 <PE_CheckSendMessageStatus+0x36>
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d008      	beq.n	8001dd4 <PE_CheckSendMessageStatus+0x28>
 8001dc2:	e02a      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dc4:	9902      	ldr	r1, [sp, #8]
 8001dc6:	7441      	strb	r1, [r0, #17]
 8001dc8:	6941      	ldr	r1, [r0, #20]
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <.text_25>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	6142      	str	r2, [r0, #20]
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	e022      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd4:	2109      	movs	r1, #9
 8001dd6:	e020      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd8:	6942      	ldr	r2, [r0, #20]
 8001dda:	024b      	lsls	r3, r1, #9
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	6143      	str	r3, [r0, #20]
 8001de0:	e01b      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d005      	beq.n	8001df2 <PE_CheckSendMessageStatus+0x46>
 8001de6:	2a01      	cmp	r2, #1
 8001de8:	d101      	bne.n	8001dee <PE_CheckSendMessageStatus+0x42>
 8001dea:	2299      	movs	r2, #153	; 0x99
 8001dec:	e014      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001dee:	2107      	movs	r1, #7
 8001df0:	e013      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001df2:	6844      	ldr	r4, [r0, #4]
 8001df4:	6824      	ldr	r4, [r4, #0]
 8001df6:	0a24      	lsrs	r4, r4, #8
 8001df8:	4023      	ands	r3, r4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <PE_CheckSendMessageStatus+0x5a>
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d109      	bne.n	8001e16 <PE_CheckSendMessageStatus+0x6a>
 8001e02:	220f      	movs	r2, #15
 8001e04:	e008      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d1fb      	bne.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e0a:	6882      	ldr	r2, [r0, #8]
 8001e0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d0f7      	beq.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e12:	2292      	movs	r2, #146	; 0x92
 8001e14:	e000      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e16:	2211      	movs	r2, #17
 8001e18:	7442      	strb	r2, [r0, #17]
 8001e1a:	0008      	movs	r0, r1
 8001e1c:	bd10      	pop	{r4, pc}
	...

08001e20 <.text_24>:
 8001e20:	00001388 	.word	0x00001388

08001e24 <.text_25>:
 8001e24:	ffffbfff 	.word	0xffffbfff

08001e28 <USBPD_PE_StateMachine_SNK>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	0004      	movs	r4, r0
 8001e2e:	4828      	ldr	r0, [pc, #160]	; (8001ed0 <USBPD_PE_StateMachine_SNK+0xa8>)
 8001e30:	00a1      	lsls	r1, r4, #2
 8001e32:	5845      	ldr	r5, [r0, r1]
 8001e34:	7c68      	ldrb	r0, [r5, #17]
 8001e36:	2848      	cmp	r0, #72	; 0x48
 8001e38:	d133      	bne.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	f7fe fe72 	bl	8000b24 <PE_Reset_ZI>
 8001e40:	0028      	movs	r0, r5
 8001e42:	f7fe fea5 	bl	8000b90 <PE_Reset_Counter>
 8001e46:	6828      	ldr	r0, [r5, #0]
 8001e48:	7900      	ldrb	r0, [r0, #4]
 8001e4a:	0783      	lsls	r3, r0, #30
 8001e4c:	0f9b      	lsrs	r3, r3, #30
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	7c28      	ldrb	r0, [r5, #16]
 8001e54:	f003 fc35 	bl	80056c2 <USBPD_PRL_SetHeader>
 8001e58:	6868      	ldr	r0, [r5, #4]
 8001e5a:	6801      	ldr	r1, [r0, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4391      	bics	r1, r2
 8001e60:	6001      	str	r1, [r0, #0]
 8001e62:	6868      	ldr	r0, [r5, #4]
 8001e64:	6801      	ldr	r1, [r0, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	4391      	bics	r1, r2
 8001e6a:	682a      	ldr	r2, [r5, #0]
 8001e6c:	7912      	ldrb	r2, [r2, #4]
 8001e6e:	0792      	lsls	r2, r2, #30
 8001e70:	0f92      	lsrs	r2, r2, #30
 8001e72:	430a      	orrs	r2, r1
 8001e74:	6002      	str	r2, [r0, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	7c28      	ldrb	r0, [r5, #16]
 8001e7a:	f003 fc93 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8001e7e:	7c28      	ldrb	r0, [r5, #16]
 8001e80:	f003 fefc 	bl	8005c7c <USBPD_PRL_Reset>
 8001e84:	203e      	movs	r0, #62	; 0x3e
 8001e86:	7468      	strb	r0, [r5, #17]
 8001e88:	7ca9      	ldrb	r1, [r5, #18]
 8001e8a:	293e      	cmp	r1, #62	; 0x3e
 8001e8c:	d009      	beq.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e8e:	74a8      	strb	r0, [r5, #18]
 8001e90:	2000      	movs	r0, #0
 8001e92:	9000      	str	r0, [sp, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	223e      	movs	r2, #62	; 0x3e
 8001e98:	7c29      	ldrb	r1, [r5, #16]
 8001e9a:	2004      	movs	r0, #4
 8001e9c:	4eb1      	ldr	r6, [pc, #708]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001e9e:	6836      	ldr	r6, [r6, #0]
 8001ea0:	47b0      	blx	r6
 8001ea2:	6968      	ldr	r0, [r5, #20]
 8001ea4:	0341      	lsls	r1, r0, #13
 8001ea6:	0fc9      	lsrs	r1, r1, #31
 8001ea8:	d006      	beq.n	8001eb8 <USBPD_PE_StateMachine_SNK+0x90>
 8001eaa:	49af      	ldr	r1, [pc, #700]	; (8002168 <__iar_annotation$$branch+0x8>)
 8001eac:	4001      	ands	r1, r0
 8001eae:	6169      	str	r1, [r5, #20]
 8001eb0:	2164      	movs	r1, #100	; 0x64
 8001eb2:	7c28      	ldrb	r0, [r5, #16]
 8001eb4:	f7fe fae4 	bl	8000480 <USBPD_PE_Notification>
 8001eb8:	0028      	movs	r0, r5
 8001eba:	f7fe fd15 	bl	80008e8 <PE_Get_RxEvent>
 8001ebe:	4669      	mov	r1, sp
 8001ec0:	7308      	strb	r0, [r1, #12]
 8001ec2:	4668      	mov	r0, sp
 8001ec4:	7b00      	ldrb	r0, [r0, #12]
 8001ec6:	2803      	cmp	r0, #3
 8001ec8:	d104      	bne.n	8001ed4 <USBPD_PE_StateMachine_SNK+0xac>
 8001eca:	2001      	movs	r0, #1
 8001ecc:	b00d      	add	sp, #52	; 0x34
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	200001e4 	.word	0x200001e4
 8001ed4:	4668      	mov	r0, sp
 8001ed6:	7344      	strb	r4, [r0, #13]
 8001ed8:	2402      	movs	r4, #2
 8001eda:	6868      	ldr	r0, [r5, #4]
 8001edc:	6800      	ldr	r0, [r0, #0]
 8001ede:	04c1      	lsls	r1, r0, #19
 8001ee0:	0fc9      	lsrs	r1, r1, #31
 8001ee2:	d100      	bne.n	8001ee6 <USBPD_PE_StateMachine_SNK+0xbe>
 8001ee4:	e148      	b.n	8002178 <__iar_annotation$$branch+0x18>
 8001ee6:	6968      	ldr	r0, [r5, #20]
 8001ee8:	0381      	lsls	r1, r0, #14
 8001eea:	0fc9      	lsrs	r1, r1, #31
 8001eec:	d014      	beq.n	8001f18 <USBPD_PE_StateMachine_SNK+0xf0>
 8001eee:	21a7      	movs	r1, #167	; 0xa7
 8001ef0:	7469      	strb	r1, [r5, #17]
 8001ef2:	4a9e      	ldr	r2, [pc, #632]	; (800216c <__iar_annotation$$branch+0xc>)
 8001ef4:	4002      	ands	r2, r0
 8001ef6:	616a      	str	r2, [r5, #20]
 8001ef8:	2000      	movs	r0, #0
 8001efa:	2232      	movs	r2, #50	; 0x32
 8001efc:	54a8      	strb	r0, [r5, r2]
 8001efe:	7ca8      	ldrb	r0, [r5, #18]
 8001f00:	28a7      	cmp	r0, #167	; 0xa7
 8001f02:	d02b      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f04:	74a9      	strb	r1, [r5, #18]
 8001f06:	2000      	movs	r0, #0
 8001f08:	9000      	str	r0, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	22a7      	movs	r2, #167	; 0xa7
 8001f0e:	7c29      	ldrb	r1, [r5, #16]
 8001f10:	2004      	movs	r0, #4
 8001f12:	4e94      	ldr	r6, [pc, #592]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f14:	6836      	ldr	r6, [r6, #0]
 8001f16:	47b0      	blx	r6
 8001f18:	2032      	movs	r0, #50	; 0x32
 8001f1a:	5c28      	ldrb	r0, [r5, r0]
 8001f1c:	280f      	cmp	r0, #15
 8001f1e:	d001      	beq.n	8001f24 <USBPD_PE_StateMachine_SNK+0xfc>
 8001f20:	2814      	cmp	r0, #20
 8001f22:	d11b      	bne.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f24:	4668      	mov	r0, sp
 8001f26:	7b00      	ldrb	r0, [r0, #12]
 8001f28:	2814      	cmp	r0, #20
 8001f2a:	d005      	beq.n	8001f38 <USBPD_PE_StateMachine_SNK+0x110>
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	4669      	mov	r1, sp
 8001f30:	7308      	strb	r0, [r1, #12]
 8001f32:	0028      	movs	r0, r5
 8001f34:	f7fe fd0f 	bl	8000956 <PE_Clear_RxEvent>
 8001f38:	2032      	movs	r0, #50	; 0x32
 8001f3a:	5c2a      	ldrb	r2, [r5, r0]
 8001f3c:	746a      	strb	r2, [r5, #17]
 8001f3e:	2000      	movs	r0, #0
 8001f40:	2132      	movs	r1, #50	; 0x32
 8001f42:	5468      	strb	r0, [r5, r1]
 8001f44:	7ca8      	ldrb	r0, [r5, #18]
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d008      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f4a:	74aa      	strb	r2, [r5, #18]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	9000      	str	r0, [sp, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	7c29      	ldrb	r1, [r5, #16]
 8001f54:	2004      	movs	r0, #4
 8001f56:	4e83      	ldr	r6, [pc, #524]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f58:	6836      	ldr	r6, [r6, #0]
 8001f5a:	47b0      	blx	r6
 8001f5c:	4668      	mov	r0, sp
 8001f5e:	7b00      	ldrb	r0, [r0, #12]
 8001f60:	2811      	cmp	r0, #17
 8001f62:	d11f      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f64:	6868      	ldr	r0, [r5, #4]
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	0701      	lsls	r1, r0, #28
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8001f6e:	0680      	lsls	r0, r0, #26
 8001f70:	0fc2      	lsrs	r2, r0, #31
 8001f72:	4291      	cmp	r1, r2
 8001f74:	d116      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f76:	2014      	movs	r0, #20
 8001f78:	4669      	mov	r1, sp
 8001f7a:	7308      	strb	r0, [r1, #12]
 8001f7c:	0028      	movs	r0, r5
 8001f7e:	f7fe fcea 	bl	8000956 <PE_Clear_RxEvent>
 8001f82:	2092      	movs	r0, #146	; 0x92
 8001f84:	7468      	strb	r0, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	2892      	cmp	r0, #146	; 0x92
 8001f8a:	d100      	bne.n	8001f8e <USBPD_PE_StateMachine_SNK+0x166>
 8001f8c:	e104      	b.n	8002198 <__iar_annotation$$branch+0x38>
 8001f8e:	2092      	movs	r0, #146	; 0x92
 8001f90:	74a8      	strb	r0, [r5, #18]
 8001f92:	2000      	movs	r0, #0
 8001f94:	9000      	str	r0, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	2292      	movs	r2, #146	; 0x92
 8001f9a:	7c29      	ldrb	r1, [r5, #16]
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	4e71      	ldr	r6, [pc, #452]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001fa0:	6836      	ldr	r6, [r6, #0]
 8001fa2:	47b0      	blx	r6
 8001fa4:	7c68      	ldrb	r0, [r5, #17]
 8001fa6:	4669      	mov	r1, sp
 8001fa8:	7008      	strb	r0, [r1, #0]
 8001faa:	4f71      	ldr	r7, [pc, #452]	; (8002170 <__iar_annotation$$branch+0x10>)
 8001fac:	20f0      	movs	r0, #240	; 0xf0
 8001fae:	0200      	lsls	r0, r0, #8
 8001fb0:	4e70      	ldr	r6, [pc, #448]	; (8002174 <__iar_annotation$$branch+0x14>)
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	466a      	mov	r2, sp
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	2a00      	cmp	r2, #0
 8001fba:	d100      	bne.n	8001fbe <USBPD_PE_StateMachine_SNK+0x196>
 8001fbc:	e0e0      	b.n	8002180 <__iar_annotation$$branch+0x20>
 8001fbe:	1e52      	subs	r2, r2, #1
 8001fc0:	d040      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001fc2:	1e92      	subs	r2, r2, #2
 8001fc4:	2a01      	cmp	r2, #1
 8001fc6:	d800      	bhi.n	8001fca <USBPD_PE_StateMachine_SNK+0x1a2>
 8001fc8:	e323      	b.n	8002612 <__iar_annotation$$branch+0x4b2>
 8001fca:	1e92      	subs	r2, r2, #2
 8001fcc:	d100      	bne.n	8001fd0 <USBPD_PE_StateMachine_SNK+0x1a8>
 8001fce:	e1fb      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 8001fd0:	3a0a      	subs	r2, #10
 8001fd2:	d100      	bne.n	8001fd6 <USBPD_PE_StateMachine_SNK+0x1ae>
 8001fd4:	e1fd      	b.n	80023d2 <__iar_annotation$$branch+0x272>
 8001fd6:	1e52      	subs	r2, r2, #1
 8001fd8:	d100      	bne.n	8001fdc <USBPD_PE_StateMachine_SNK+0x1b4>
 8001fda:	e299      	b.n	8002510 <__iar_annotation$$branch+0x3b0>
 8001fdc:	1e52      	subs	r2, r2, #1
 8001fde:	d100      	bne.n	8001fe2 <USBPD_PE_StateMachine_SNK+0x1ba>
 8001fe0:	e2a3      	b.n	800252a <__iar_annotation$$branch+0x3ca>
 8001fe2:	1ed2      	subs	r2, r2, #3
 8001fe4:	d100      	bne.n	8001fe8 <USBPD_PE_StateMachine_SNK+0x1c0>
 8001fe6:	e228      	b.n	800243a <__iar_annotation$$branch+0x2da>
 8001fe8:	1f12      	subs	r2, r2, #4
 8001fea:	2a01      	cmp	r2, #1
 8001fec:	d92a      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 8001fee:	1e92      	subs	r2, r2, #2
 8001ff0:	d100      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x1cc>
 8001ff2:	e2d2      	b.n	800259a <__iar_annotation$$branch+0x43a>
 8001ff4:	1ed2      	subs	r2, r2, #3
 8001ff6:	d025      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001ff8:	1e52      	subs	r2, r2, #1
 8001ffa:	d100      	bne.n	8001ffe <USBPD_PE_StateMachine_SNK+0x1d6>
 8001ffc:	e3c3      	b.n	8002786 <__iar_annotation$$branch+0x626>
 8001ffe:	1f12      	subs	r2, r2, #4
 8002000:	d100      	bne.n	8002004 <USBPD_PE_StateMachine_SNK+0x1dc>
 8002002:	e316      	b.n	8002632 <__iar_annotation$$branch+0x4d2>
 8002004:	1f52      	subs	r2, r2, #5
 8002006:	2a02      	cmp	r2, #2
 8002008:	d91c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800200a:	1ed2      	subs	r2, r2, #3
 800200c:	d100      	bne.n	8002010 <USBPD_PE_StateMachine_SNK+0x1e8>
 800200e:	e2f7      	b.n	8002600 <__iar_annotation$$branch+0x4a0>
 8002010:	1e52      	subs	r2, r2, #1
 8002012:	d101      	bne.n	8002018 <__iar_annotation$$branch+0x4>

08002014 <__iar_annotation$$branch>:
 8002014:	f000 fc39 	bl	800288a <__iar_annotation$$branch+0x72a>
 8002018:	1e52      	subs	r2, r2, #1
 800201a:	d013      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800201c:	1e92      	subs	r2, r2, #2
 800201e:	d101      	bne.n	8002024 <__iar_annotation$$branch+0x4>

08002020 <__iar_annotation$$branch>:
 8002020:	f000 fc80 	bl	8002924 <__iar_annotation$$branch+0x7c4>
 8002024:	1e52      	subs	r2, r2, #1
 8002026:	2a01      	cmp	r2, #1
 8002028:	d90c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800202a:	1e92      	subs	r2, r2, #2
 800202c:	d001      	beq.n	8002032 <__iar_annotation$$branch+0x12>
 800202e:	1e92      	subs	r2, r2, #2
 8002030:	2a05      	cmp	r2, #5
 8002032:	d801      	bhi.n	8002038 <__iar_annotation$$branch+0x4>

08002034 <__iar_annotation$$branch>:
 8002034:	f000 fcbc 	bl	80029b0 <__iar_annotation$$branch+0x850>
 8002038:	1f92      	subs	r2, r2, #6
 800203a:	d101      	bne.n	8002040 <__iar_annotation$$branch+0x4>

0800203c <__iar_annotation$$branch>:
 800203c:	f000 fc86 	bl	800294c <__iar_annotation$$branch+0x7ec>
 8002040:	1e52      	subs	r2, r2, #1
 8002042:	2a03      	cmp	r2, #3
 8002044:	d801      	bhi.n	800204a <__iar_annotation$$branch+0x4>

08002046 <__iar_annotation$$branch>:
 8002046:	f000 fcb7 	bl	80029b8 <__iar_annotation$$branch+0x858>
 800204a:	1f12      	subs	r2, r2, #4
 800204c:	d100      	bne.n	8002050 <__iar_annotation$$branch+0xa>
 800204e:	e0af      	b.n	80021b0 <__iar_annotation$$branch+0x50>
 8002050:	1e92      	subs	r2, r2, #2
 8002052:	d100      	bne.n	8002056 <__iar_annotation$$branch+0x10>
 8002054:	e221      	b.n	800249a <__iar_annotation$$branch+0x33a>
 8002056:	1ed2      	subs	r2, r2, #3
 8002058:	d100      	bne.n	800205c <__iar_annotation$$branch+0x16>
 800205a:	e0c1      	b.n	80021e0 <__iar_annotation$$branch+0x80>
 800205c:	1e52      	subs	r2, r2, #1
 800205e:	d100      	bne.n	8002062 <__iar_annotation$$branch+0x1c>
 8002060:	e100      	b.n	8002264 <__iar_annotation$$branch+0x104>
 8002062:	1e52      	subs	r2, r2, #1
 8002064:	d100      	bne.n	8002068 <__iar_annotation$$branch+0x22>
 8002066:	e10f      	b.n	8002288 <__iar_annotation$$branch+0x128>
 8002068:	1e52      	subs	r2, r2, #1
 800206a:	d100      	bne.n	800206e <__iar_annotation$$branch+0x28>
 800206c:	e128      	b.n	80022c0 <__iar_annotation$$branch+0x160>
 800206e:	1e52      	subs	r2, r2, #1
 8002070:	d100      	bne.n	8002074 <__iar_annotation$$branch+0x2e>
 8002072:	e178      	b.n	8002366 <__iar_annotation$$branch+0x206>
 8002074:	1e92      	subs	r2, r2, #2
 8002076:	d0a6      	beq.n	8001fc6 <USBPD_PE_StateMachine_SNK+0x19e>
 8002078:	1e92      	subs	r2, r2, #2
 800207a:	d0e3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800207c:	1e52      	subs	r2, r2, #1
 800207e:	d101      	bne.n	8002084 <__iar_annotation$$branch+0x4>

08002080 <__iar_annotation$$branch>:
 8002080:	f000 fbe5 	bl	800284e <__iar_annotation$$branch+0x6ee>
 8002084:	1f12      	subs	r2, r2, #4
 8002086:	d100      	bne.n	800208a <__iar_annotation$$branch+0xa>
 8002088:	e26a      	b.n	8002560 <__iar_annotation$$branch+0x400>
 800208a:	1ed2      	subs	r2, r2, #3
 800208c:	d100      	bne.n	8002090 <__iar_annotation$$branch+0x10>
 800208e:	e334      	b.n	80026fa <__iar_annotation$$branch+0x59a>
 8002090:	1f52      	subs	r2, r2, #5
 8002092:	d100      	bne.n	8002096 <__iar_annotation$$branch+0x16>
 8002094:	e388      	b.n	80027a8 <__iar_annotation$$branch+0x648>
 8002096:	1e52      	subs	r2, r2, #1
 8002098:	d100      	bne.n	800209c <__iar_annotation$$branch+0x1c>
 800209a:	e2ff      	b.n	800269c <__iar_annotation$$branch+0x53c>
 800209c:	3a09      	subs	r2, #9
 800209e:	2a02      	cmp	r2, #2
 80020a0:	d9d0      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020a2:	1ed2      	subs	r2, r2, #3
 80020a4:	d101      	bne.n	80020aa <__iar_annotation$$branch+0x4>

080020a6 <__iar_annotation$$branch>:
 80020a6:	f000 fc01 	bl	80028ac <__iar_annotation$$branch+0x74c>
 80020aa:	1e52      	subs	r2, r2, #1
 80020ac:	d101      	bne.n	80020b2 <__iar_annotation$$branch+0x4>

080020ae <__iar_annotation$$branch>:
 80020ae:	f000 fc0f 	bl	80028d0 <__iar_annotation$$branch+0x770>
 80020b2:	1e52      	subs	r2, r2, #1
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	d9c5      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020b8:	3a0d      	subs	r2, #13
 80020ba:	d0c3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020bc:	3a12      	subs	r2, #18
 80020be:	d101      	bne.n	80020c4 <__iar_annotation$$branch+0x4>

080020c0 <__iar_annotation$$branch>:
 80020c0:	f000 fc92 	bl	80029e8 <__iar_annotation$$branch+0x888>
 80020c4:	3a0c      	subs	r2, #12
 80020c6:	d067      	beq.n	8002198 <__iar_annotation$$branch+0x38>
 80020c8:	1e52      	subs	r2, r2, #1
 80020ca:	2a02      	cmp	r2, #2
 80020cc:	d9ba      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020ce:	1f52      	subs	r2, r2, #5
 80020d0:	d100      	bne.n	80020d4 <__iar_annotation$$branch+0x14>
 80020d2:	e271      	b.n	80025b8 <__iar_annotation$$branch+0x458>
 80020d4:	1e52      	subs	r2, r2, #1
 80020d6:	d0b5      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020d8:	1e52      	subs	r2, r2, #1
 80020da:	d100      	bne.n	80020de <__iar_annotation$$branch+0x1e>
 80020dc:	e174      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 80020de:	1e52      	subs	r2, r2, #1
 80020e0:	d100      	bne.n	80020e4 <__iar_annotation$$branch+0x24>
 80020e2:	e1be      	b.n	8002462 <__iar_annotation$$branch+0x302>
 80020e4:	1e52      	subs	r2, r2, #1
 80020e6:	2a08      	cmp	r2, #8
 80020e8:	d801      	bhi.n	80020ee <__iar_annotation$$branch+0x4>

080020ea <__iar_annotation$$branch>:
 80020ea:	f000 fc6a 	bl	80029c2 <__iar_annotation$$branch+0x862>
 80020ee:	3a0b      	subs	r2, #11
 80020f0:	d101      	bne.n	80020f6 <__iar_annotation$$branch+0x4>

080020f2 <__iar_annotation$$branch>:
 80020f2:	f000 fc7f 	bl	80029f4 <__iar_annotation$$branch+0x894>
 80020f6:	a903      	add	r1, sp, #12
 80020f8:	0028      	movs	r0, r5
 80020fa:	f002 f9e3 	bl	80044c4 <PE_StateMachine_VDM>
 80020fe:	0004      	movs	r4, r0
 8002100:	7c6a      	ldrb	r2, [r5, #17]
 8002102:	7ca8      	ldrb	r0, [r5, #18]
 8002104:	4290      	cmp	r0, r2
 8002106:	d008      	beq.n	800211a <__iar_annotation$$branch+0x28>
 8002108:	74aa      	strb	r2, [r5, #18]
 800210a:	2000      	movs	r0, #0
 800210c:	9000      	str	r0, [sp, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	7c29      	ldrb	r1, [r5, #16]
 8002112:	2004      	movs	r0, #4
 8002114:	4e13      	ldr	r6, [pc, #76]	; (8002164 <__iar_annotation$$branch+0x4>)
 8002116:	6836      	ldr	r6, [r6, #0]
 8002118:	47b0      	blx	r6
 800211a:	4e12      	ldr	r6, [pc, #72]	; (8002164 <__iar_annotation$$branch+0x4>)
 800211c:	4668      	mov	r0, sp
 800211e:	7b00      	ldrb	r0, [r0, #12]
 8002120:	2814      	cmp	r0, #20
 8002122:	d101      	bne.n	8002128 <__iar_annotation$$branch+0x4>

08002124 <__iar_annotation$$branch>:
 8002124:	f000 fc73 	bl	8002a0e <__iar_annotation$$branch+0x8ae>
 8002128:	0028      	movs	r0, r5
 800212a:	f7fe fc5b 	bl	80009e4 <PE_Check_AMSConflict>
 800212e:	2815      	cmp	r0, #21
 8002130:	d109      	bne.n	8002146 <__iar_annotation$$branch+0x22>
 8002132:	4668      	mov	r0, sp
 8002134:	7b00      	ldrb	r0, [r0, #12]
 8002136:	2814      	cmp	r0, #20
 8002138:	d005      	beq.n	8002146 <__iar_annotation$$branch+0x22>
 800213a:	2014      	movs	r0, #20
 800213c:	4669      	mov	r1, sp
 800213e:	7308      	strb	r0, [r1, #12]
 8002140:	0028      	movs	r0, r5
 8002142:	f7fe fc08 	bl	8000956 <PE_Clear_RxEvent>
 8002146:	7c6a      	ldrb	r2, [r5, #17]
 8002148:	7ca8      	ldrb	r0, [r5, #18]
 800214a:	4290      	cmp	r0, r2
 800214c:	d007      	beq.n	800215e <__iar_annotation$$branch+0x3a>
 800214e:	74aa      	strb	r2, [r5, #18]
 8002150:	2000      	movs	r0, #0
 8002152:	9000      	str	r0, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	7c29      	ldrb	r1, [r5, #16]
 8002158:	2004      	movs	r0, #4
 800215a:	6834      	ldr	r4, [r6, #0]
 800215c:	47a0      	blx	r4
 800215e:	2400      	movs	r4, #0

08002160 <__iar_annotation$$branch>:
 8002160:	f000 fc74 	bl	8002a4c <__iar_annotation$$branch+0x8ec>
 8002164:	20000000 	.word	0x20000000
 8002168:	fffbffff 	.word	0xfffbffff
 800216c:	fffdffff 	.word	0xfffdffff
 8002170:	000081f4 	.word	0x000081f4
 8002174:	0000801b 	.word	0x0000801b
 8002178:	2400      	movs	r4, #0
 800217a:	43e4      	mvns	r4, r4
 800217c:	0020      	movs	r0, r4
 800217e:	e6a5      	b.n	8001ecc <USBPD_PE_StateMachine_SNK+0xa4>
 8002180:	6868      	ldr	r0, [r5, #4]
 8002182:	6801      	ldr	r1, [r0, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4391      	bics	r1, r2
 8002188:	6001      	str	r1, [r0, #0]
 800218a:	215f      	movs	r1, #95	; 0x5f
 800218c:	7c28      	ldrb	r0, [r5, #16]
 800218e:	f7fe f977 	bl	8000480 <USBPD_PE_Notification>
 8002192:	2400      	movs	r4, #0
 8002194:	43e4      	mvns	r4, r4
 8002196:	e7b3      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002198:	6868      	ldr	r0, [r5, #4]
 800219a:	6801      	ldr	r1, [r0, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4391      	bics	r1, r2
 80021a0:	6001      	str	r1, [r0, #0]
 80021a2:	68a8      	ldr	r0, [r5, #8]
 80021a4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80021a6:	2900      	cmp	r1, #0
 80021a8:	d0f3      	beq.n	8002192 <__iar_annotation$$branch+0x32>
 80021aa:	7c28      	ldrb	r0, [r5, #16]
 80021ac:	4788      	blx	r1
 80021ae:	e7f0      	b.n	8002192 <__iar_annotation$$branch+0x32>
 80021b0:	6868      	ldr	r0, [r5, #4]
 80021b2:	6801      	ldr	r1, [r0, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	0b0b      	lsrs	r3, r1, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0a1      	beq.n	8002100 <__iar_annotation$$branch+0xe>
 80021bc:	078b      	lsls	r3, r1, #30
 80021be:	0f9b      	lsrs	r3, r3, #30
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <__iar_annotation$$branch+0x68>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <__iar_annotation$$branch+0x6a>
 80021c8:	2320      	movs	r3, #32
 80021ca:	2420      	movs	r4, #32
 80021cc:	43a1      	bics	r1, r4
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	772a      	strb	r2, [r5, #28]
 80021d4:	83ef      	strh	r7, [r5, #30]
 80021d6:	24fa      	movs	r4, #250	; 0xfa
 80021d8:	0064      	lsls	r4, r4, #1
 80021da:	2043      	movs	r0, #67	; 0x43
 80021dc:	7468      	strb	r0, [r5, #17]
 80021de:	e78f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80021e0:	4668      	mov	r0, sp
 80021e2:	7b00      	ldrb	r0, [r0, #12]
 80021e4:	2811      	cmp	r0, #17
 80021e6:	d135      	bne.n	8002254 <__iar_annotation$$branch+0xf4>
 80021e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80021ea:	0bc2      	lsrs	r2, r0, #15
 80021ec:	d12c      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021ee:	2607      	movs	r6, #7
 80021f0:	0b02      	lsrs	r2, r0, #12
 80021f2:	4232      	tst	r2, r6
 80021f4:	d028      	beq.n	8002248 <__iar_annotation$$branch+0xe8>
 80021f6:	06c2      	lsls	r2, r0, #27
 80021f8:	0ed2      	lsrs	r2, r2, #27
 80021fa:	2a01      	cmp	r2, #1
 80021fc:	d124      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021fe:	2200      	movs	r2, #0
 8002200:	4bc1      	ldr	r3, [pc, #772]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002202:	18eb      	adds	r3, r5, r3
 8002204:	709a      	strb	r2, [r3, #2]
 8002206:	696a      	ldr	r2, [r5, #20]
 8002208:	4311      	orrs	r1, r2
 800220a:	6169      	str	r1, [r5, #20]
 800220c:	0600      	lsls	r0, r0, #24
 800220e:	0f81      	lsrs	r1, r0, #30
 8002210:	4668      	mov	r0, sp
 8002212:	7b40      	ldrb	r0, [r0, #13]
 8002214:	f7fe fcee 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8002218:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800221a:	0b00      	lsrs	r0, r0, #12
 800221c:	4006      	ands	r6, r0
 800221e:	00b3      	lsls	r3, r6, #2
 8002220:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002222:	1c82      	adds	r2, r0, #2
 8002224:	2104      	movs	r1, #4
 8002226:	7c28      	ldrb	r0, [r5, #16]
 8002228:	68ae      	ldr	r6, [r5, #8]
 800222a:	69b6      	ldr	r6, [r6, #24]
 800222c:	47b0      	blx	r6
 800222e:	2001      	movs	r0, #1
 8002230:	7728      	strb	r0, [r5, #28]
 8002232:	6868      	ldr	r0, [r5, #4]
 8002234:	6801      	ldr	r1, [r0, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	4391      	bics	r1, r2
 800223a:	6001      	str	r1, [r0, #0]
 800223c:	2044      	movs	r0, #68	; 0x44
 800223e:	7468      	strb	r0, [r5, #17]
 8002240:	4668      	mov	r0, sp
 8002242:	7b00      	ldrb	r0, [r0, #12]
 8002244:	2814      	cmp	r0, #20
 8002246:	d005      	beq.n	8002254 <__iar_annotation$$branch+0xf4>
 8002248:	2014      	movs	r0, #20
 800224a:	4669      	mov	r1, sp
 800224c:	7308      	strb	r0, [r1, #12]
 800224e:	0028      	movs	r0, r5
 8002250:	f7fe fb81 	bl	8000956 <PE_Clear_RxEvent>
 8002254:	8be8      	ldrh	r0, [r5, #30]
 8002256:	03a1      	lsls	r1, r4, #14
 8002258:	4288      	cmp	r0, r1
 800225a:	d102      	bne.n	8002262 <__iar_annotation$$branch+0x102>
 800225c:	200f      	movs	r0, #15
 800225e:	7468      	strb	r0, [r5, #17]
 8002260:	2400      	movs	r4, #0
 8002262:	e74d      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002264:	466a      	mov	r2, sp
 8002266:	0029      	movs	r1, r5
 8002268:	3118      	adds	r1, #24
 800226a:	7c28      	ldrb	r0, [r5, #16]
 800226c:	68ab      	ldr	r3, [r5, #8]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4798      	blx	r3
 8002272:	6968      	ldr	r0, [r5, #20]
 8002274:	2118      	movs	r1, #24
 8002276:	4388      	bics	r0, r1
 8002278:	9900      	ldr	r1, [sp, #0]
 800227a:	00c9      	lsls	r1, r1, #3
 800227c:	2218      	movs	r2, #24
 800227e:	400a      	ands	r2, r1
 8002280:	4302      	orrs	r2, r0
 8002282:	616a      	str	r2, [r5, #20]
 8002284:	2045      	movs	r0, #69	; 0x45
 8002286:	e7ea      	b.n	800225e <__iar_annotation$$branch+0xfe>
 8002288:	6968      	ldr	r0, [r5, #20]
 800228a:	0401      	lsls	r1, r0, #16
 800228c:	0fc9      	lsrs	r1, r1, #31
 800228e:	d001      	beq.n	8002294 <__iar_annotation$$branch+0x134>
 8002290:	2002      	movs	r0, #2
 8002292:	e000      	b.n	8002296 <__iar_annotation$$branch+0x136>
 8002294:	2000      	movs	r0, #0
 8002296:	9002      	str	r0, [sp, #8]
 8002298:	2046      	movs	r0, #70	; 0x46
 800229a:	9001      	str	r0, [sp, #4]
 800229c:	2001      	movs	r0, #1
 800229e:	9000      	str	r0, [sp, #0]
 80022a0:	002b      	movs	r3, r5
 80022a2:	3318      	adds	r3, #24
 80022a4:	2202      	movs	r2, #2
 80022a6:	2100      	movs	r1, #0
 80022a8:	0028      	movs	r0, r5
 80022aa:	f7ff f95c 	bl	8001566 <PE_Send_DataMessage>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d105      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 80022b2:	6968      	ldr	r0, [r5, #20]
 80022b4:	4995      	ldr	r1, [pc, #596]	; (800250c <__iar_annotation$$branch+0x3ac>)
 80022b6:	4001      	ands	r1, r0
 80022b8:	6169      	str	r1, [r5, #20]
 80022ba:	83ee      	strh	r6, [r5, #30]
 80022bc:	241b      	movs	r4, #27
 80022be:	e71f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80022c0:	4669      	mov	r1, sp
 80022c2:	7b09      	ldrb	r1, [r1, #12]
 80022c4:	2911      	cmp	r1, #17
 80022c6:	d148      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022c8:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80022ca:	4201      	tst	r1, r0
 80022cc:	d145      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022ce:	20fa      	movs	r0, #250	; 0xfa
 80022d0:	0040      	lsls	r0, r0, #1
 80022d2:	261f      	movs	r6, #31
 80022d4:	221f      	movs	r2, #31
 80022d6:	400a      	ands	r2, r1
 80022d8:	1e92      	subs	r2, r2, #2
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d917      	bls.n	800230e <__iar_annotation$$branch+0x1ae>
 80022de:	1e92      	subs	r2, r2, #2
 80022e0:	d001      	beq.n	80022e6 <__iar_annotation$$branch+0x186>
 80022e2:	3a08      	subs	r2, #8
 80022e4:	d125      	bne.n	8002332 <__iar_annotation$$branch+0x1d2>
 80022e6:	686a      	ldr	r2, [r5, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	0f52      	lsrs	r2, r2, #29
 80022ee:	2a03      	cmp	r2, #3
 80022f0:	d004      	beq.n	80022fc <__iar_annotation$$branch+0x19c>
 80022f2:	2143      	movs	r1, #67	; 0x43
 80022f4:	7469      	strb	r1, [r5, #17]
 80022f6:	83ef      	strh	r7, [r5, #30]
 80022f8:	0004      	movs	r4, r0
 80022fa:	e014      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 80022fc:	4031      	ands	r1, r6
 80022fe:	290c      	cmp	r1, #12
 8002300:	d101      	bne.n	8002306 <__iar_annotation$$branch+0x1a6>
 8002302:	2049      	movs	r0, #73	; 0x49
 8002304:	e000      	b.n	8002308 <__iar_annotation$$branch+0x1a8>
 8002306:	2003      	movs	r0, #3
 8002308:	7468      	strb	r0, [r5, #17]
 800230a:	2400      	movs	r4, #0
 800230c:	e00b      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 800230e:	83ef      	strh	r7, [r5, #30]
 8002310:	0004      	movs	r4, r0
 8002312:	2104      	movs	r1, #4
 8002314:	0028      	movs	r0, r5
 8002316:	f7ff f846 	bl	80013a6 <PE_SetPowerNegotiation>
 800231a:	2047      	movs	r0, #71	; 0x47
 800231c:	7468      	strb	r0, [r5, #17]
 800231e:	4668      	mov	r0, sp
 8002320:	7b00      	ldrb	r0, [r0, #12]
 8002322:	2814      	cmp	r0, #20
 8002324:	d005      	beq.n	8002332 <__iar_annotation$$branch+0x1d2>
 8002326:	2014      	movs	r0, #20
 8002328:	4669      	mov	r1, sp
 800232a:	7308      	strb	r0, [r1, #12]
 800232c:	0028      	movs	r0, r5
 800232e:	f7fe fb12 	bl	8000956 <PE_Clear_RxEvent>
 8002332:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002334:	4006      	ands	r6, r0
 8002336:	2e02      	cmp	r6, #2
 8002338:	d009      	beq.n	800234e <__iar_annotation$$branch+0x1ee>
 800233a:	2e03      	cmp	r6, #3
 800233c:	d009      	beq.n	8002352 <__iar_annotation$$branch+0x1f2>
 800233e:	2e04      	cmp	r6, #4
 8002340:	d003      	beq.n	800234a <__iar_annotation$$branch+0x1ea>
 8002342:	2e0c      	cmp	r6, #12
 8002344:	d109      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002346:	2103      	movs	r1, #3
 8002348:	e004      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234a:	2102      	movs	r1, #2
 800234c:	e002      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234e:	2104      	movs	r1, #4
 8002350:	e000      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 8002352:	2101      	movs	r1, #1
 8002354:	7c28      	ldrb	r0, [r5, #16]
 8002356:	f7fe f893 	bl	8000480 <USBPD_PE_Notification>
 800235a:	8be8      	ldrh	r0, [r5, #30]
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0209      	lsls	r1, r1, #8
 8002360:	4288      	cmp	r0, r1
 8002362:	d1ac      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 8002364:	e77a      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002366:	4668      	mov	r0, sp
 8002368:	7b00      	ldrb	r0, [r0, #12]
 800236a:	2811      	cmp	r0, #17
 800236c:	d1f5      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 800236e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002370:	499f      	ldr	r1, [pc, #636]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002372:	4001      	ands	r1, r0
 8002374:	2906      	cmp	r1, #6
 8002376:	d1f0      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002378:	2014      	movs	r0, #20
 800237a:	4669      	mov	r1, sp
 800237c:	7308      	strb	r0, [r1, #12]
 800237e:	0028      	movs	r0, r5
 8002380:	f7fe fae9 	bl	8000956 <PE_Clear_RxEvent>
 8002384:	2103      	movs	r1, #3
 8002386:	0028      	movs	r0, r5
 8002388:	f7ff f80d 	bl	80013a6 <PE_SetPowerNegotiation>
 800238c:	2110      	movs	r1, #16
 800238e:	7c28      	ldrb	r0, [r5, #16]
 8002390:	f7fe f876 	bl	8000480 <USBPD_PE_Notification>
 8002394:	6868      	ldr	r0, [r5, #4]
 8002396:	6800      	ldr	r0, [r0, #0]
 8002398:	0401      	lsls	r1, r0, #16
 800239a:	0fc9      	lsrs	r1, r1, #31
 800239c:	d002      	beq.n	80023a4 <__iar_annotation$$branch+0x244>
 800239e:	6828      	ldr	r0, [r5, #0]
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	e000      	b.n	80023a6 <__iar_annotation$$branch+0x246>
 80023a4:	2101      	movs	r1, #1
 80023a6:	4668      	mov	r0, sp
 80023a8:	7b40      	ldrb	r0, [r0, #13]
 80023aa:	f003 f9fb 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80023ae:	2000      	movs	r0, #0
 80023b0:	84a8      	strh	r0, [r5, #36]	; 0x24
 80023b2:	2003      	movs	r0, #3
 80023b4:	6969      	ldr	r1, [r5, #20]
 80023b6:	08c9      	lsrs	r1, r1, #3
 80023b8:	4001      	ands	r1, r0
 80023ba:	2903      	cmp	r1, #3
 80023bc:	d101      	bne.n	80023c2 <__iar_annotation$$branch+0x262>
 80023be:	498d      	ldr	r1, [pc, #564]	; (80025f4 <__iar_annotation$$branch+0x494>)
 80023c0:	84a9      	strh	r1, [r5, #36]	; 0x24
 80023c2:	7468      	strb	r0, [r5, #17]
 80023c4:	2400      	movs	r4, #0
 80023c6:	e7c8      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 80023c8:	a903      	add	r1, sp, #12
 80023ca:	0028      	movs	r0, r5
 80023cc:	f001 fbac 	bl	8003b28 <PE_StateMachine_VDMCable>
 80023d0:	e695      	b.n	80020fe <__iar_annotation$$branch+0xc>
 80023d2:	2601      	movs	r6, #1
 80023d4:	6868      	ldr	r0, [r5, #4]
 80023d6:	6800      	ldr	r0, [r0, #0]
 80023d8:	0bc0      	lsrs	r0, r0, #15
 80023da:	4030      	ands	r0, r6
 80023dc:	d006      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023de:	68a8      	ldr	r0, [r5, #8]
 80023e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d002      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023e6:	2100      	movs	r1, #0
 80023e8:	7c28      	ldrb	r0, [r5, #16]
 80023ea:	4790      	blx	r2
 80023ec:	6868      	ldr	r0, [r5, #4]
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4391      	bics	r1, r2
 80023f4:	6001      	str	r1, [r0, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	0028      	movs	r0, r5
 80023fa:	f7fe ffd4 	bl	80013a6 <PE_SetPowerNegotiation>
 80023fe:	4842      	ldr	r0, [pc, #264]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002400:	1829      	adds	r1, r5, r0
 8002402:	7888      	ldrb	r0, [r1, #2]
 8002404:	2803      	cmp	r0, #3
 8002406:	d309      	bcc.n	800241c <__iar_annotation$$branch+0x2bc>
 8002408:	6968      	ldr	r0, [r5, #20]
 800240a:	0880      	lsrs	r0, r0, #2
 800240c:	4006      	ands	r6, r0
 800240e:	d003      	beq.n	8002418 <__iar_annotation$$branch+0x2b8>
 8002410:	68a8      	ldr	r0, [r5, #8]
 8002412:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002414:	2800      	cmp	r0, #0
 8002416:	d171      	bne.n	80024fc <__iar_annotation$$branch+0x39c>
 8002418:	2000      	movs	r0, #0
 800241a:	e6df      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 800241c:	1c40      	adds	r0, r0, #1
 800241e:	7088      	strb	r0, [r1, #2]
 8002420:	2105      	movs	r1, #5
 8002422:	0028      	movs	r0, r5
 8002424:	f7fe fa32 	bl	800088c <PE_Send_RESET>
 8002428:	4873      	ldr	r0, [pc, #460]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800242a:	83e8      	strh	r0, [r5, #30]
 800242c:	2201      	movs	r2, #1
 800242e:	2101      	movs	r1, #1
 8002430:	0028      	movs	r0, r5
 8002432:	f7fe ffaf 	bl	8001394 <PE_CallHardResetCallback>
 8002436:	209b      	movs	r0, #155	; 0x9b
 8002438:	e711      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800243a:	6868      	ldr	r0, [r5, #4]
 800243c:	6800      	ldr	r0, [r0, #0]
 800243e:	0401      	lsls	r1, r0, #16
 8002440:	0fc9      	lsrs	r1, r1, #31
 8002442:	d006      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 8002444:	68a8      	ldr	r0, [r5, #8]
 8002446:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002448:	2a00      	cmp	r2, #0
 800244a:	d002      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 800244c:	2100      	movs	r1, #0
 800244e:	7c28      	ldrb	r0, [r5, #16]
 8002450:	4790      	blx	r2
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	0028      	movs	r0, r5
 8002458:	f7fe ff9c 	bl	8001394 <PE_CallHardResetCallback>
 800245c:	4866      	ldr	r0, [pc, #408]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800245e:	83e8      	strh	r0, [r5, #30]
 8002460:	e7e9      	b.n	8002436 <__iar_annotation$$branch+0x2d6>
 8002462:	2100      	movs	r1, #0
 8002464:	4668      	mov	r0, sp
 8002466:	7b40      	ldrb	r0, [r0, #13]
 8002468:	68aa      	ldr	r2, [r5, #8]
 800246a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800246c:	4790      	blx	r2
 800246e:	2801      	cmp	r0, #1
 8002470:	d10d      	bne.n	800248e <__iar_annotation$$branch+0x32e>
 8002472:	4862      	ldr	r0, [pc, #392]	; (80025fc <__iar_annotation$$branch+0x49c>)
 8002474:	83e8      	strh	r0, [r5, #30]
 8002476:	2169      	movs	r1, #105	; 0x69
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe f800 	bl	8000480 <USBPD_PE_Notification>
 8002480:	2040      	movs	r0, #64	; 0x40
 8002482:	7468      	strb	r0, [r5, #17]
 8002484:	2400      	movs	r4, #0
 8002486:	2113      	movs	r1, #19
 8002488:	7c28      	ldrb	r0, [r5, #16]
 800248a:	f7fd fff9 	bl	8000480 <USBPD_PE_Notification>
 800248e:	8be8      	ldrh	r0, [r5, #30]
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0209      	lsls	r1, r1, #8
 8002494:	4288      	cmp	r0, r1
 8002496:	d135      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002498:	e01e      	b.n	80024d8 <__iar_annotation$$branch+0x378>
 800249a:	2101      	movs	r1, #1
 800249c:	4668      	mov	r0, sp
 800249e:	7b40      	ldrb	r0, [r0, #13]
 80024a0:	68aa      	ldr	r2, [r5, #8]
 80024a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024a4:	4790      	blx	r2
 80024a6:	2801      	cmp	r0, #1
 80024a8:	d111      	bne.n	80024ce <__iar_annotation$$branch+0x36e>
 80024aa:	0028      	movs	r0, r5
 80024ac:	f7fe fb01 	bl	8000ab2 <PE_Reset_HardReset>
 80024b0:	2205      	movs	r2, #5
 80024b2:	2100      	movs	r1, #0
 80024b4:	0028      	movs	r0, r5
 80024b6:	f7fe ff6d 	bl	8001394 <PE_CallHardResetCallback>
 80024ba:	2168      	movs	r1, #104	; 0x68
 80024bc:	4668      	mov	r0, sp
 80024be:	7b40      	ldrb	r0, [r0, #13]
 80024c0:	f7fd ffde 	bl	8000480 <USBPD_PE_Notification>
 80024c4:	83ef      	strh	r7, [r5, #30]
 80024c6:	24fa      	movs	r4, #250	; 0xfa
 80024c8:	0064      	lsls	r4, r4, #1
 80024ca:	2043      	movs	r0, #67	; 0x43
 80024cc:	7468      	strb	r0, [r5, #17]
 80024ce:	8be8      	ldrh	r0, [r5, #30]
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0209      	lsls	r1, r1, #8
 80024d4:	4288      	cmp	r0, r1
 80024d6:	d115      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 80024d8:	2206      	movs	r2, #6
 80024da:	2100      	movs	r1, #0
 80024dc:	0028      	movs	r0, r5
 80024de:	f7fe ff59 	bl	8001394 <PE_CallHardResetCallback>
 80024e2:	4809      	ldr	r0, [pc, #36]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 80024e4:	1828      	adds	r0, r5, r0
 80024e6:	7880      	ldrb	r0, [r0, #2]
 80024e8:	2803      	cmp	r0, #3
 80024ea:	d200      	bcs.n	80024ee <__iar_annotation$$branch+0x38e>
 80024ec:	e6b6      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80024ee:	6968      	ldr	r0, [r5, #20]
 80024f0:	0741      	lsls	r1, r0, #29
 80024f2:	0fc9      	lsrs	r1, r1, #31
 80024f4:	d004      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024f6:	68a8      	ldr	r0, [r5, #8]
 80024f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d000      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024fe:	e0fa      	b.n	80026f6 <__iar_annotation$$branch+0x596>
 8002500:	2400      	movs	r4, #0
 8002502:	746c      	strb	r4, [r5, #17]
 8002504:	e5fc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002506:	bf00      	nop
 8002508:	0000025e 	.word	0x0000025e
 800250c:	ffff7fff 	.word	0xffff7fff
 8002510:	2000      	movs	r0, #0
 8002512:	9000      	str	r0, [sp, #0]
 8002514:	2303      	movs	r3, #3
 8002516:	2203      	movs	r2, #3
 8002518:	2100      	movs	r1, #0
 800251a:	0028      	movs	r0, r5
 800251c:	f7fe fff8 	bl	8001510 <PE_Send_CtrlMessage>
 8002520:	2800      	cmp	r0, #0
 8002522:	d1ef      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002524:	2001      	movs	r0, #1
 8002526:	7728      	strb	r0, [r5, #28]
 8002528:	e654      	b.n	80021d4 <__iar_annotation$$branch+0x74>
 800252a:	6868      	ldr	r0, [r5, #4]
 800252c:	6800      	ldr	r0, [r0, #0]
 800252e:	0540      	lsls	r0, r0, #21
 8002530:	0f40      	lsrs	r0, r0, #29
 8002532:	2804      	cmp	r0, #4
 8002534:	d100      	bne.n	8002538 <__iar_annotation$$branch+0x3d8>
 8002536:	e691      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002538:	2000      	movs	r0, #0
 800253a:	9000      	str	r0, [sp, #0]
 800253c:	2350      	movs	r3, #80	; 0x50
 800253e:	220d      	movs	r2, #13
 8002540:	2031      	movs	r0, #49	; 0x31
 8002542:	5c29      	ldrb	r1, [r5, r0]
 8002544:	0028      	movs	r0, r5
 8002546:	f7fe ffe3 	bl	8001510 <PE_Send_CtrlMessage>
 800254a:	2800      	cmp	r0, #0
 800254c:	d107      	bne.n	800255e <__iar_annotation$$branch+0x3fe>
 800254e:	2003      	movs	r0, #3
 8002550:	7728      	strb	r0, [r5, #28]
 8002552:	83ee      	strh	r6, [r5, #30]
 8002554:	241b      	movs	r4, #27
 8002556:	2130      	movs	r1, #48	; 0x30
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	f7fd ff91 	bl	8000480 <USBPD_PE_Notification>
 800255e:	e5cf      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002560:	4668      	mov	r0, sp
 8002562:	7b00      	ldrb	r0, [r0, #12]
 8002564:	2814      	cmp	r0, #20
 8002566:	d017      	beq.n	8002598 <__iar_annotation$$branch+0x438>
 8002568:	2030      	movs	r0, #48	; 0x30
 800256a:	5c28      	ldrb	r0, [r5, r0]
 800256c:	2131      	movs	r1, #49	; 0x31
 800256e:	5c69      	ldrb	r1, [r5, r1]
 8002570:	4288      	cmp	r0, r1
 8002572:	d111      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 8002574:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002576:	491e      	ldr	r1, [pc, #120]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002578:	4001      	ands	r1, r0
 800257a:	2903      	cmp	r1, #3
 800257c:	d10c      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 800257e:	2001      	movs	r0, #1
 8002580:	7728      	strb	r0, [r5, #28]
 8002582:	83ef      	strh	r7, [r5, #30]
 8002584:	24fa      	movs	r4, #250	; 0xfa
 8002586:	0064      	lsls	r4, r4, #1
 8002588:	2043      	movs	r0, #67	; 0x43
 800258a:	7468      	strb	r0, [r5, #17]
 800258c:	2014      	movs	r0, #20
 800258e:	4669      	mov	r1, sp
 8002590:	7308      	strb	r0, [r1, #12]
 8002592:	0028      	movs	r0, r5
 8002594:	f7fe f9df 	bl	8000956 <PE_Clear_RxEvent>
 8002598:	e6df      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 800259a:	9400      	str	r4, [sp, #0]
 800259c:	2343      	movs	r3, #67	; 0x43
 800259e:	2207      	movs	r2, #7
 80025a0:	2100      	movs	r1, #0
 80025a2:	0028      	movs	r0, r5
 80025a4:	f7fe ffb4 	bl	8001510 <PE_Send_CtrlMessage>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d11f      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ac:	2006      	movs	r0, #6
 80025ae:	7728      	strb	r0, [r5, #28]
 80025b0:	83ee      	strh	r6, [r5, #30]
 80025b2:	241b      	movs	r4, #27
 80025b4:	210b      	movs	r1, #11
 80025b6:	e7cf      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80025b8:	4668      	mov	r0, sp
 80025ba:	7b00      	ldrb	r0, [r0, #12]
 80025bc:	2811      	cmp	r0, #17
 80025be:	d115      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025c0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80025c2:	490b      	ldr	r1, [pc, #44]	; (80025f0 <__iar_annotation$$branch+0x490>)
 80025c4:	4001      	ands	r1, r0
 80025c6:	2906      	cmp	r1, #6
 80025c8:	d110      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	7c28      	ldrb	r0, [r5, #16]
 80025ce:	f7fd ff57 	bl	8000480 <USBPD_PE_Notification>
 80025d2:	2003      	movs	r0, #3
 80025d4:	7468      	strb	r0, [r5, #17]
 80025d6:	2400      	movs	r4, #0
 80025d8:	4668      	mov	r0, sp
 80025da:	7b00      	ldrb	r0, [r0, #12]
 80025dc:	2814      	cmp	r0, #20
 80025de:	d005      	beq.n	80025ec <__iar_annotation$$branch+0x48c>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe f9b5 	bl	8000956 <PE_Clear_RxEvent>
 80025ec:	e588      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80025ee:	bf00      	nop
 80025f0:	0000f01f 	.word	0x0000f01f
 80025f4:	0000a328 	.word	0x0000a328
 80025f8:	000083e8 	.word	0x000083e8
 80025fc:	000088e3 	.word	0x000088e3
 8002600:	2000      	movs	r0, #0
 8002602:	9000      	str	r0, [sp, #0]
 8002604:	2303      	movs	r3, #3
 8002606:	2204      	movs	r2, #4
 8002608:	2100      	movs	r1, #0
 800260a:	0028      	movs	r0, r5
 800260c:	f7fe ff80 	bl	8001510 <PE_Send_CtrlMessage>
 8002610:	e576      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002612:	4668      	mov	r0, sp
 8002614:	7800      	ldrb	r0, [r0, #0]
 8002616:	2804      	cmp	r0, #4
 8002618:	d006      	beq.n	8002628 <__iar_annotation$$branch+0x4c8>
 800261a:	2000      	movs	r0, #0
 800261c:	7728      	strb	r0, [r5, #28]
 800261e:	7469      	strb	r1, [r5, #17]
 8002620:	2120      	movs	r1, #32
 8002622:	7c28      	ldrb	r0, [r5, #16]
 8002624:	f7fd ff2c 	bl	8000480 <USBPD_PE_Notification>
 8002628:	a903      	add	r1, sp, #12
 800262a:	0028      	movs	r0, r5
 800262c:	f000 fa1a 	bl	8002a64 <PE_StateMachine_SNK_ReadyWait>
 8002630:	e565      	b.n	80020fe <__iar_annotation$$branch+0xc>
 8002632:	68a8      	ldr	r0, [r5, #8]
 8002634:	6881      	ldr	r1, [r0, #8]
 8002636:	2900      	cmp	r1, #0
 8002638:	d02e      	beq.n	8002698 <__iar_annotation$$branch+0x538>
 800263a:	4668      	mov	r0, sp
 800263c:	7b40      	ldrb	r0, [r0, #13]
 800263e:	4788      	blx	r1
 8002640:	280a      	cmp	r0, #10
 8002642:	d002      	beq.n	800264a <__iar_annotation$$branch+0x4ea>
 8002644:	280d      	cmp	r0, #13
 8002646:	d022      	beq.n	800268e <__iar_annotation$$branch+0x52e>
 8002648:	e026      	b.n	8002698 <__iar_annotation$$branch+0x538>
 800264a:	2201      	movs	r2, #1
 800264c:	2100      	movs	r1, #0
 800264e:	7c28      	ldrb	r0, [r5, #16]
 8002650:	68ab      	ldr	r3, [r5, #8]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	4798      	blx	r3
 8002656:	2000      	movs	r0, #0
 8002658:	9000      	str	r0, [sp, #0]
 800265a:	2359      	movs	r3, #89	; 0x59
 800265c:	2203      	movs	r2, #3
 800265e:	2100      	movs	r1, #0
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ff55 	bl	8001510 <PE_Send_CtrlMessage>
 8002666:	2800      	cmp	r0, #0
 8002668:	d110      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 800266a:	2008      	movs	r0, #8
 800266c:	7728      	strb	r0, [r5, #28]
 800266e:	6868      	ldr	r0, [r5, #4]
 8002670:	6801      	ldr	r1, [r0, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	430a      	orrs	r2, r1
 8002676:	6002      	str	r2, [r0, #0]
 8002678:	2206      	movs	r2, #6
 800267a:	2100      	movs	r1, #0
 800267c:	7c28      	ldrb	r0, [r5, #16]
 800267e:	68ab      	ldr	r3, [r5, #8]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	4798      	blx	r3
 8002684:	48b0      	ldr	r0, [pc, #704]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 8002686:	83e8      	strh	r0, [r5, #30]
 8002688:	24e1      	movs	r4, #225	; 0xe1
 800268a:	00a4      	lsls	r4, r4, #2
 800268c:	e538      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800268e:	2000      	movs	r0, #0
 8002690:	9000      	str	r0, [sp, #0]
 8002692:	2303      	movs	r3, #3
 8002694:	220c      	movs	r2, #12
 8002696:	e7b7      	b.n	8002608 <__iar_annotation$$branch+0x4a8>
 8002698:	202a      	movs	r0, #42	; 0x2a
 800269a:	e5e0      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800269c:	4668      	mov	r0, sp
 800269e:	7b00      	ldrb	r0, [r0, #12]
 80026a0:	2811      	cmp	r0, #17
 80026a2:	d119      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026a4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80026a6:	49c1      	ldr	r1, [pc, #772]	; (80029ac <__iar_annotation$$branch+0x84c>)
 80026a8:	4001      	ands	r1, r0
 80026aa:	2906      	cmp	r1, #6
 80026ac:	d114      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026ae:	7f28      	ldrb	r0, [r5, #28]
 80026b0:	2809      	cmp	r0, #9
 80026b2:	d005      	beq.n	80026c0 <__iar_annotation$$branch+0x560>
 80026b4:	2209      	movs	r2, #9
 80026b6:	2100      	movs	r1, #0
 80026b8:	7c28      	ldrb	r0, [r5, #16]
 80026ba:	68ab      	ldr	r3, [r5, #8]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	4798      	blx	r3
 80026c0:	2053      	movs	r0, #83	; 0x53
 80026c2:	7468      	strb	r0, [r5, #17]
 80026c4:	4668      	mov	r0, sp
 80026c6:	7b00      	ldrb	r0, [r0, #12]
 80026c8:	2814      	cmp	r0, #20
 80026ca:	d005      	beq.n	80026d8 <__iar_annotation$$branch+0x578>
 80026cc:	2014      	movs	r0, #20
 80026ce:	4669      	mov	r1, sp
 80026d0:	7308      	strb	r0, [r1, #12]
 80026d2:	0028      	movs	r0, r5
 80026d4:	f7fe f93f 	bl	8000956 <PE_Clear_RxEvent>
 80026d8:	8be8      	ldrh	r0, [r5, #30]
 80026da:	03a1      	lsls	r1, r4, #14
 80026dc:	4288      	cmp	r0, r1
 80026de:	d1d5      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 80026e0:	220f      	movs	r2, #15
 80026e2:	2100      	movs	r1, #0
 80026e4:	7c28      	ldrb	r0, [r5, #16]
 80026e6:	68ab      	ldr	r3, [r5, #8]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	4798      	blx	r3
 80026ec:	68a8      	ldr	r0, [r5, #8]
 80026ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d100      	bne.n	80026f6 <__iar_annotation$$branch+0x596>
 80026f4:	e5b2      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80026f6:	2092      	movs	r0, #146	; 0x92
 80026f8:	e5b1      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80026fa:	0028      	movs	r0, r5
 80026fc:	f7fe fe53 	bl	80013a6 <PE_SetPowerNegotiation>
 8002700:	220a      	movs	r2, #10
 8002702:	2100      	movs	r1, #0
 8002704:	7c28      	ldrb	r0, [r5, #16]
 8002706:	68ab      	ldr	r3, [r5, #8]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	4798      	blx	r3
 800270c:	6868      	ldr	r0, [r5, #4]
 800270e:	7800      	ldrb	r0, [r0, #0]
 8002710:	0780      	lsls	r0, r0, #30
 8002712:	0f80      	lsrs	r0, r0, #30
 8002714:	2802      	cmp	r0, #2
 8002716:	d102      	bne.n	800271e <__iar_annotation$$branch+0x5be>
 8002718:	7c28      	ldrb	r0, [r5, #16]
 800271a:	f003 f820 	bl	800575e <USBPD_PRL_SRCSetSinkNG>
 800271e:	2101      	movs	r1, #1
 8002720:	0028      	movs	r0, r5
 8002722:	f7fe f8d3 	bl	80008cc <PE_ChangePowerRole>
 8002726:	7f28      	ldrb	r0, [r5, #28]
 8002728:	2809      	cmp	r0, #9
 800272a:	d005      	beq.n	8002738 <__iar_annotation$$branch+0x5d8>
 800272c:	220b      	movs	r2, #11
 800272e:	2101      	movs	r1, #1
 8002730:	7c28      	ldrb	r0, [r5, #16]
 8002732:	68ab      	ldr	r3, [r5, #8]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	4798      	blx	r3
 8002738:	2000      	movs	r0, #0
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	235b      	movs	r3, #91	; 0x5b
 800273e:	2206      	movs	r2, #6
 8002740:	2100      	movs	r1, #0
 8002742:	0028      	movs	r0, r5
 8002744:	f7fe fee4 	bl	8001510 <PE_Send_CtrlMessage>
 8002748:	2800      	cmp	r0, #0
 800274a:	d108      	bne.n	800275e <__iar_annotation$$branch+0x5fe>
 800274c:	220c      	movs	r2, #12
 800274e:	2100      	movs	r1, #0
 8002750:	7c28      	ldrb	r0, [r5, #16]
 8002752:	68ab      	ldr	r3, [r5, #8]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	4798      	blx	r3
 8002758:	48c1      	ldr	r0, [pc, #772]	; (8002a60 <.text_3>)
 800275a:	83e8      	strh	r0, [r5, #30]
 800275c:	2414      	movs	r4, #20
 800275e:	7c68      	ldrb	r0, [r5, #17]
 8002760:	285b      	cmp	r0, #91	; 0x5b
 8002762:	d00f      	beq.n	8002784 <__iar_annotation$$branch+0x624>
 8002764:	2100      	movs	r1, #0
 8002766:	0028      	movs	r0, r5
 8002768:	f7fe f8b0 	bl	80008cc <PE_ChangePowerRole>
 800276c:	2206      	movs	r2, #6
 800276e:	2101      	movs	r1, #1
 8002770:	7c28      	ldrb	r0, [r5, #16]
 8002772:	68ab      	ldr	r3, [r5, #8]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	4798      	blx	r3
 8002778:	2207      	movs	r2, #7
 800277a:	2100      	movs	r1, #0
 800277c:	7c28      	ldrb	r0, [r5, #16]
 800277e:	68ab      	ldr	r3, [r5, #8]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	4798      	blx	r3
 8002784:	e4bc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002786:	9400      	str	r4, [sp, #0]
 8002788:	2358      	movs	r3, #88	; 0x58
 800278a:	220a      	movs	r2, #10
 800278c:	2100      	movs	r1, #0
 800278e:	0028      	movs	r0, r5
 8002790:	f7fe febe 	bl	8001510 <PE_Send_CtrlMessage>
 8002794:	2800      	cmp	r0, #0
 8002796:	d105      	bne.n	80027a4 <__iar_annotation$$branch+0x644>
 8002798:	2008      	movs	r0, #8
 800279a:	7728      	strb	r0, [r5, #28]
 800279c:	83ee      	strh	r6, [r5, #30]
 800279e:	241b      	movs	r4, #27
 80027a0:	2202      	movs	r2, #2
 80027a2:	e7ea      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a4:	220f      	movs	r2, #15
 80027a6:	e7e8      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a8:	4669      	mov	r1, sp
 80027aa:	7b09      	ldrb	r1, [r1, #12]
 80027ac:	2911      	cmp	r1, #17
 80027ae:	d10c      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b0:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80027b2:	4201      	tst	r1, r0
 80027b4:	d109      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b6:	06c8      	lsls	r0, r1, #27
 80027b8:	0ec0      	lsrs	r0, r0, #27
 80027ba:	2803      	cmp	r0, #3
 80027bc:	d006      	beq.n	80027cc <__iar_annotation$$branch+0x66c>
 80027be:	2804      	cmp	r0, #4
 80027c0:	d02d      	beq.n	800281e <__iar_annotation$$branch+0x6be>
 80027c2:	280c      	cmp	r0, #12
 80027c4:	d029      	beq.n	800281a <__iar_annotation$$branch+0x6ba>
 80027c6:	2810      	cmp	r0, #16
 80027c8:	d032      	beq.n	8002830 <__iar_annotation$$branch+0x6d0>
 80027ca:	e0a5      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 80027cc:	6868      	ldr	r0, [r5, #4]
 80027ce:	6801      	ldr	r1, [r0, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	430a      	orrs	r2, r1
 80027d4:	6002      	str	r2, [r0, #0]
 80027d6:	485c      	ldr	r0, [pc, #368]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 80027d8:	83e8      	strh	r0, [r5, #30]
 80027da:	24e1      	movs	r4, #225	; 0xe1
 80027dc:	00a4      	lsls	r4, r4, #2
 80027de:	7f28      	ldrb	r0, [r5, #28]
 80027e0:	2809      	cmp	r0, #9
 80027e2:	d005      	beq.n	80027f0 <__iar_annotation$$branch+0x690>
 80027e4:	2206      	movs	r2, #6
 80027e6:	2100      	movs	r1, #0
 80027e8:	7c28      	ldrb	r0, [r5, #16]
 80027ea:	68ab      	ldr	r3, [r5, #8]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	4798      	blx	r3
 80027f0:	2104      	movs	r1, #4
 80027f2:	0028      	movs	r0, r5
 80027f4:	f7fe fdd7 	bl	80013a6 <PE_SetPowerNegotiation>
 80027f8:	213a      	movs	r1, #58	; 0x3a
 80027fa:	7c28      	ldrb	r0, [r5, #16]
 80027fc:	f7fd fe40 	bl	8000480 <USBPD_PE_Notification>
 8002800:	4668      	mov	r0, sp
 8002802:	7b00      	ldrb	r0, [r0, #12]
 8002804:	2814      	cmp	r0, #20
 8002806:	d005      	beq.n	8002814 <__iar_annotation$$branch+0x6b4>
 8002808:	2014      	movs	r0, #20
 800280a:	4669      	mov	r1, sp
 800280c:	7308      	strb	r0, [r1, #12]
 800280e:	0028      	movs	r0, r5
 8002810:	f7fe f8a1 	bl	8000956 <PE_Clear_RxEvent>
 8002814:	2059      	movs	r0, #89	; 0x59
 8002816:	7468      	strb	r0, [r5, #17]
 8002818:	e07e      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 800281a:	213b      	movs	r1, #59	; 0x3b
 800281c:	e000      	b.n	8002820 <__iar_annotation$$branch+0x6c0>
 800281e:	2116      	movs	r1, #22
 8002820:	7c28      	ldrb	r0, [r5, #16]
 8002822:	f7fd fe2d 	bl	8000480 <USBPD_PE_Notification>
 8002826:	4668      	mov	r0, sp
 8002828:	7b00      	ldrb	r0, [r0, #12]
 800282a:	2814      	cmp	r0, #20
 800282c:	d108      	bne.n	8002840 <__iar_annotation$$branch+0x6e0>
 800282e:	e070      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002830:	2117      	movs	r1, #23
 8002832:	7c28      	ldrb	r0, [r5, #16]
 8002834:	f7fd fe24 	bl	8000480 <USBPD_PE_Notification>
 8002838:	4668      	mov	r0, sp
 800283a:	7b00      	ldrb	r0, [r0, #12]
 800283c:	2814      	cmp	r0, #20
 800283e:	d068      	beq.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002840:	2014      	movs	r0, #20
 8002842:	4669      	mov	r1, sp
 8002844:	7308      	strb	r0, [r1, #12]
 8002846:	0028      	movs	r0, r5
 8002848:	f7fe f885 	bl	8000956 <PE_Clear_RxEvent>
 800284c:	e061      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 800284e:	2000      	movs	r0, #0
 8002850:	9004      	str	r0, [sp, #16]
 8002852:	ab04      	add	r3, sp, #16
 8002854:	aa05      	add	r2, sp, #20
 8002856:	2100      	movs	r1, #0
 8002858:	7c28      	ldrb	r0, [r5, #16]
 800285a:	68ae      	ldr	r6, [r5, #8]
 800285c:	6976      	ldr	r6, [r6, #20]
 800285e:	47b0      	blx	r6
 8002860:	2104      	movs	r1, #4
 8002862:	9804      	ldr	r0, [sp, #16]
 8002864:	f7fe fdf2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8002868:	2800      	cmp	r0, #0
 800286a:	d001      	beq.n	8002870 <__iar_annotation$$branch+0x710>
 800286c:	2003      	movs	r0, #3
 800286e:	e4b5      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 8002870:	9002      	str	r0, [sp, #8]
 8002872:	2003      	movs	r0, #3
 8002874:	9001      	str	r0, [sp, #4]
 8002876:	9804      	ldr	r0, [sp, #16]
 8002878:	0880      	lsrs	r0, r0, #2
 800287a:	9000      	str	r0, [sp, #0]
 800287c:	ab05      	add	r3, sp, #20
 800287e:	2201      	movs	r2, #1
 8002880:	2100      	movs	r1, #0
 8002882:	0028      	movs	r0, r5
 8002884:	f7fe fe6f 	bl	8001566 <PE_Send_DataMessage>
 8002888:	e43a      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800288a:	2000      	movs	r0, #0
 800288c:	9002      	str	r0, [sp, #8]
 800288e:	2003      	movs	r0, #3
 8002890:	9001      	str	r0, [sp, #4]
 8002892:	2001      	movs	r0, #1
 8002894:	9000      	str	r0, [sp, #0]
 8002896:	002b      	movs	r3, r5
 8002898:	332c      	adds	r3, #44	; 0x2c
 800289a:	2206      	movs	r2, #6
 800289c:	2100      	movs	r1, #0
 800289e:	0028      	movs	r0, r5
 80028a0:	f7fe fe61 	bl	8001566 <PE_Send_DataMessage>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1ef      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028a8:	215d      	movs	r1, #93	; 0x5d
 80028aa:	e655      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80028ac:	9400      	str	r4, [sp, #0]
 80028ae:	2366      	movs	r3, #102	; 0x66
 80028b0:	2214      	movs	r2, #20
 80028b2:	2100      	movs	r1, #0
 80028b4:	0028      	movs	r0, r5
 80028b6:	f7fe fe2b 	bl	8001510 <PE_Send_CtrlMessage>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d1e4      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028be:	83ee      	strh	r6, [r5, #30]
 80028c0:	241b      	movs	r4, #27
 80028c2:	214a      	movs	r1, #74	; 0x4a
 80028c4:	7c28      	ldrb	r0, [r5, #16]
 80028c6:	f7fd fddb 	bl	8000480 <USBPD_PE_Notification>
 80028ca:	200b      	movs	r0, #11
 80028cc:	7728      	strb	r0, [r5, #28]
 80028ce:	e7db      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80028d0:	4668      	mov	r0, sp
 80028d2:	7b00      	ldrb	r0, [r0, #12]
 80028d4:	2811      	cmp	r0, #17
 80028d6:	d11f      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028d8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80028da:	0bc1      	lsrs	r1, r0, #15
 80028dc:	d01c      	beq.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028de:	06c0      	lsls	r0, r0, #27
 80028e0:	0ec0      	lsrs	r0, r0, #27
 80028e2:	280c      	cmp	r0, #12
 80028e4:	d118      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028e6:	2304      	movs	r3, #4
 80028e8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80028ea:	1d02      	adds	r2, r0, #4
 80028ec:	210a      	movs	r1, #10
 80028ee:	7c28      	ldrb	r0, [r5, #16]
 80028f0:	68ac      	ldr	r4, [r5, #8]
 80028f2:	69a4      	ldr	r4, [r4, #24]
 80028f4:	47a0      	blx	r4
 80028f6:	4668      	mov	r0, sp
 80028f8:	7b00      	ldrb	r0, [r0, #12]
 80028fa:	2814      	cmp	r0, #20
 80028fc:	d005      	beq.n	800290a <__iar_annotation$$branch+0x7aa>
 80028fe:	2014      	movs	r0, #20
 8002900:	4669      	mov	r1, sp
 8002902:	7308      	strb	r0, [r1, #12]
 8002904:	0028      	movs	r0, r5
 8002906:	f7fe f826 	bl	8000956 <PE_Clear_RxEvent>
 800290a:	214b      	movs	r1, #75	; 0x4b
 800290c:	7c28      	ldrb	r0, [r5, #16]
 800290e:	f7fd fdb7 	bl	8000480 <USBPD_PE_Notification>
 8002912:	2003      	movs	r0, #3
 8002914:	7468      	strb	r0, [r5, #17]
 8002916:	2400      	movs	r4, #0
 8002918:	8be8      	ldrh	r0, [r5, #30]
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	0209      	lsls	r1, r1, #8
 800291e:	4288      	cmp	r0, r1
 8002920:	d1b2      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 8002922:	e041      	b.n	80029a8 <__iar_annotation$$branch+0x848>
 8002924:	4895      	ldr	r0, [pc, #596]	; (8002b7c <.text_5>)
 8002926:	182f      	adds	r7, r5, r0
 8002928:	9400      	str	r4, [sp, #0]
 800292a:	2339      	movs	r3, #57	; 0x39
 800292c:	783a      	ldrb	r2, [r7, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	0028      	movs	r0, r5
 8002932:	f7fe fded 	bl	8001510 <PE_Send_CtrlMessage>
 8002936:	2800      	cmp	r0, #0
 8002938:	d1a6      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 800293a:	7878      	ldrb	r0, [r7, #1]
 800293c:	7728      	strb	r0, [r5, #28]
 800293e:	2144      	movs	r1, #68	; 0x44
 8002940:	7c28      	ldrb	r0, [r5, #16]
 8002942:	f7fd fd9d 	bl	8000480 <USBPD_PE_Notification>
 8002946:	e4b8      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002948:	00008384 	.word	0x00008384
 800294c:	4668      	mov	r0, sp
 800294e:	7b00      	ldrb	r0, [r0, #12]
 8002950:	2814      	cmp	r0, #20
 8002952:	d024      	beq.n	800299e <__iar_annotation$$branch+0x83e>
 8002954:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002956:	0bc0      	lsrs	r0, r0, #15
 8002958:	d00e      	beq.n	8002978 <__iar_annotation$$branch+0x818>
 800295a:	0028      	movs	r0, r5
 800295c:	f7fe fe40 	bl	80015e0 <PE_Check_ExtendedMessage>
 8002960:	4668      	mov	r0, sp
 8002962:	7b00      	ldrb	r0, [r0, #12]
 8002964:	2814      	cmp	r0, #20
 8002966:	d005      	beq.n	8002974 <__iar_annotation$$branch+0x814>
 8002968:	2014      	movs	r0, #20
 800296a:	4669      	mov	r1, sp
 800296c:	7308      	strb	r0, [r1, #12]
 800296e:	0028      	movs	r0, r5
 8002970:	f7fd fff1 	bl	8000956 <PE_Clear_RxEvent>
 8002974:	2000      	movs	r0, #0
 8002976:	83e8      	strh	r0, [r5, #30]
 8002978:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800297a:	490c      	ldr	r1, [pc, #48]	; (80029ac <__iar_annotation$$branch+0x84c>)
 800297c:	4001      	ands	r1, r0
 800297e:	2910      	cmp	r1, #16
 8002980:	d10d      	bne.n	800299e <__iar_annotation$$branch+0x83e>
 8002982:	2003      	movs	r0, #3
 8002984:	7468      	strb	r0, [r5, #17]
 8002986:	2400      	movs	r4, #0
 8002988:	4668      	mov	r0, sp
 800298a:	7b00      	ldrb	r0, [r0, #12]
 800298c:	2814      	cmp	r0, #20
 800298e:	d005      	beq.n	800299c <__iar_annotation$$branch+0x83c>
 8002990:	2014      	movs	r0, #20
 8002992:	4669      	mov	r1, sp
 8002994:	7308      	strb	r0, [r1, #12]
 8002996:	0028      	movs	r0, r5
 8002998:	f7fd ffdd 	bl	8000956 <PE_Clear_RxEvent>
 800299c:	83ec      	strh	r4, [r5, #30]
 800299e:	8be8      	ldrh	r0, [r5, #30]
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	0209      	lsls	r1, r1, #8
 80029a4:	4288      	cmp	r0, r1
 80029a6:	d11c      	bne.n	80029e2 <__iar_annotation$$branch+0x882>
 80029a8:	2003      	movs	r0, #3
 80029aa:	e458      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80029ac:	0000f01f 	.word	0x0000f01f
 80029b0:	0028      	movs	r0, r5
 80029b2:	f7fe ff37 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80029b6:	e63b      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029b8:	a903      	add	r1, sp, #12
 80029ba:	0028      	movs	r0, r5
 80029bc:	f7fe f9d4 	bl	8000d68 <PE_SubStateMachine_Generic>
 80029c0:	e636      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029c2:	a903      	add	r1, sp, #12
 80029c4:	0028      	movs	r0, r5
 80029c6:	f001 f9ef 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80029ca:	0004      	movs	r4, r0
 80029cc:	6868      	ldr	r0, [r5, #4]
 80029ce:	6800      	ldr	r0, [r0, #0]
 80029d0:	0401      	lsls	r1, r0, #16
 80029d2:	0fc9      	lsrs	r1, r1, #31
 80029d4:	d006      	beq.n	80029e4 <__iar_annotation$$branch+0x884>
 80029d6:	6828      	ldr	r0, [r5, #0]
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	4668      	mov	r0, sp
 80029dc:	7b40      	ldrb	r0, [r0, #13]
 80029de:	f002 fee1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80029e2:	e751      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029e4:	2101      	movs	r1, #1
 80029e6:	e7f8      	b.n	80029da <__iar_annotation$$branch+0x87a>
 80029e8:	4668      	mov	r0, sp
 80029ea:	7b01      	ldrb	r1, [r0, #12]
 80029ec:	0028      	movs	r0, r5
 80029ee:	f002 fc3b 	bl	8005268 <PE_StateMachine_UVDM>
 80029f2:	e749      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029f4:	2000      	movs	r0, #0
 80029f6:	9000      	str	r0, [sp, #0]
 80029f8:	2358      	movs	r3, #88	; 0x58
 80029fa:	2213      	movs	r2, #19
 80029fc:	2100      	movs	r1, #0
 80029fe:	0028      	movs	r0, r5
 8002a00:	f7fe fd86 	bl	8001510 <PE_Send_CtrlMessage>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1f4      	bne.n	80029f2 <__iar_annotation$$branch+0x892>
 8002a08:	2009      	movs	r0, #9
 8002a0a:	7728      	strb	r0, [r5, #28]
 8002a0c:	e455      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002a0e:	6968      	ldr	r0, [r5, #20]
 8002a10:	2701      	movs	r7, #1
 8002a12:	0b41      	lsrs	r1, r0, #13
 8002a14:	4039      	ands	r1, r7
 8002a16:	d019      	beq.n	8002a4c <__iar_annotation$$branch+0x8ec>
 8002a18:	0b80      	lsrs	r0, r0, #14
 8002a1a:	4038      	ands	r0, r7
 8002a1c:	d007      	beq.n	8002a2e <__iar_annotation$$branch+0x8ce>
 8002a1e:	215b      	movs	r1, #91	; 0x5b
 8002a20:	7c28      	ldrb	r0, [r5, #16]
 8002a22:	f7fd fd2d 	bl	8000480 <USBPD_PE_Notification>
 8002a26:	6968      	ldr	r0, [r5, #20]
 8002a28:	4955      	ldr	r1, [pc, #340]	; (8002b80 <.text_6>)
 8002a2a:	4001      	ands	r1, r0
 8002a2c:	6169      	str	r1, [r5, #20]
 8002a2e:	2003      	movs	r0, #3
 8002a30:	7468      	strb	r0, [r5, #17]
 8002a32:	7ca9      	ldrb	r1, [r5, #18]
 8002a34:	2903      	cmp	r1, #3
 8002a36:	d008      	beq.n	8002a4a <__iar_annotation$$branch+0x8ea>
 8002a38:	74a8      	strb	r0, [r5, #18]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	9000      	str	r0, [sp, #0]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2203      	movs	r2, #3
 8002a42:	7c29      	ldrb	r1, [r5, #16]
 8002a44:	2004      	movs	r0, #4
 8002a46:	6834      	ldr	r4, [r6, #0]
 8002a48:	47a0      	blx	r4
 8002a4a:	2401      	movs	r4, #1
 8002a4c:	6968      	ldr	r0, [r5, #20]
 8002a4e:	494d      	ldr	r1, [pc, #308]	; (8002b84 <.text_7>)
 8002a50:	4001      	ands	r1, r0
 8002a52:	6169      	str	r1, [r5, #20]
 8002a54:	2c00      	cmp	r4, #0
 8002a56:	d101      	bne.n	8002a5c <__iar_annotation$$branch>

08002a58 <__iar_annotation$$branch>:
 8002a58:	f7ff fa3e 	bl	8001ed8 <USBPD_PE_StateMachine_SNK+0xb0>

08002a5c <__iar_annotation$$branch>:
 8002a5c:	f7ff fb8e 	bl	800217c <__iar_annotation$$branch+0x1c>

08002a60 <.text_3>:
 8002a60:	00008014 	.word	0x00008014

08002a64 <PE_StateMachine_SNK_ReadyWait>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	0004      	movs	r4, r0
 8002a68:	000e      	movs	r6, r1
 8002a6a:	2702      	movs	r7, #2
 8002a6c:	7830      	ldrb	r0, [r6, #0]
 8002a6e:	2814      	cmp	r0, #20
 8002a70:	d00b      	beq.n	8002a8a <PE_StateMachine_SNK_ReadyWait+0x26>
 8002a72:	0020      	movs	r0, r4
 8002a74:	f7fe fffc 	bl	8001a70 <PE_ManageRXEvent>
 8002a78:	7830      	ldrb	r0, [r6, #0]
 8002a7a:	2814      	cmp	r0, #20
 8002a7c:	d07b      	beq.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a7e:	2014      	movs	r0, #20
 8002a80:	7030      	strb	r0, [r6, #0]
 8002a82:	0020      	movs	r0, r4
 8002a84:	f7fd ff67 	bl	8000956 <PE_Clear_RxEvent>
 8002a88:	e075      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a8a:	6961      	ldr	r1, [r4, #20]
 8002a8c:	0cc8      	lsrs	r0, r1, #19
 8002a8e:	03be      	lsls	r6, r7, #14
 8002a90:	2700      	movs	r7, #0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d021      	beq.n	8002ada <PE_StateMachine_SNK_ReadyWait+0x76>
 8002a96:	8c21      	ldrh	r1, [r4, #32]
 8002a98:	42b1      	cmp	r1, r6
 8002a9a:	d111      	bne.n	8002ac0 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002a9c:	200f      	movs	r0, #15
 8002a9e:	7460      	strb	r0, [r4, #17]
 8002aa0:	9700      	str	r7, [sp, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2270      	movs	r2, #112	; 0x70
 8002aa6:	7c21      	ldrb	r1, [r4, #16]
 8002aa8:	2009      	movs	r0, #9
 8002aaa:	4d37      	ldr	r5, [pc, #220]	; (8002b88 <.text_8>)
 8002aac:	682d      	ldr	r5, [r5, #0]
 8002aae:	47a8      	blx	r5
 8002ab0:	2098      	movs	r0, #152	; 0x98
 8002ab2:	0080      	lsls	r0, r0, #2
 8002ab4:	5c20      	ldrb	r0, [r4, r0]
 8002ab6:	1c40      	adds	r0, r0, #1
 8002ab8:	2198      	movs	r1, #152	; 0x98
 8002aba:	0089      	lsls	r1, r1, #2
 8002abc:	5460      	strb	r0, [r4, r1]
 8002abe:	e05a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ac0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002ac2:	0509      	lsls	r1, r1, #20
 8002ac4:	0f49      	lsrs	r1, r1, #29
 8002ac6:	180a      	adds	r2, r1, r0
 8002ac8:	2333      	movs	r3, #51	; 0x33
 8002aca:	435a      	muls	r2, r3
 8002acc:	4316      	orrs	r6, r2
 8002ace:	8426      	strh	r6, [r4, #32]
 8002ad0:	180f      	adds	r7, r1, r0
 8002ad2:	2033      	movs	r0, #51	; 0x33
 8002ad4:	4347      	muls	r7, r0
 8002ad6:	b2bf      	uxth	r7, r7
 8002ad8:	e04d      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ada:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002adc:	42b0      	cmp	r0, r6
 8002ade:	d104      	bne.n	8002aea <PE_StateMachine_SNK_ReadyWait+0x86>
 8002ae0:	2045      	movs	r0, #69	; 0x45
 8002ae2:	7460      	strb	r0, [r4, #17]
 8002ae4:	430e      	orrs	r6, r1
 8002ae6:	6166      	str	r6, [r4, #20]
 8002ae8:	e045      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002aea:	7c20      	ldrb	r0, [r4, #16]
 8002aec:	f7fd ff58 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d128      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002af4:	2032      	movs	r0, #50	; 0x32
 8002af6:	5c20      	ldrb	r0, [r4, r0]
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d024      	beq.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002afc:	6860      	ldr	r0, [r4, #4]
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	2103      	movs	r1, #3
 8002b02:	2203      	movs	r2, #3
 8002b04:	4002      	ands	r2, r0
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d007      	beq.n	8002b1a <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002b0a:	4001      	ands	r1, r0
 8002b0c:	2902      	cmp	r1, #2
 8002b0e:	d11a      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b10:	7c20      	ldrb	r0, [r4, #16]
 8002b12:	f002 fe3b 	bl	800578c <USBPD_PRL_IsResistor_SinkTxOK>
 8002b16:	2801      	cmp	r0, #1
 8002b18:	d115      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b1a:	2033      	movs	r0, #51	; 0x33
 8002b1c:	5c20      	ldrb	r0, [r4, r0]
 8002b1e:	2131      	movs	r1, #49	; 0x31
 8002b20:	5460      	strb	r0, [r4, r1]
 8002b22:	2032      	movs	r0, #50	; 0x32
 8002b24:	5c20      	ldrb	r0, [r4, r0]
 8002b26:	7460      	strb	r0, [r4, #17]
 8002b28:	2845      	cmp	r0, #69	; 0x45
 8002b2a:	d102      	bne.n	8002b32 <PE_StateMachine_SNK_ReadyWait+0xce>
 8002b2c:	6960      	ldr	r0, [r4, #20]
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	6166      	str	r6, [r4, #20]
 8002b32:	2132      	movs	r1, #50	; 0x32
 8002b34:	5467      	strb	r7, [r4, r1]
 8002b36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b38:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002b3a:	6960      	ldr	r0, [r4, #20]
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	01c9      	lsls	r1, r1, #7
 8002b40:	4301      	orrs	r1, r0
 8002b42:	6161      	str	r1, [r4, #20]
 8002b44:	e017      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b46:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002b48:	42b0      	cmp	r0, r6
 8002b4a:	d109      	bne.n	8002b60 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002b4c:	8467      	strh	r7, [r4, #34]	; 0x22
 8002b4e:	2098      	movs	r0, #152	; 0x98
 8002b50:	0080      	lsls	r0, r0, #2
 8002b52:	1820      	adds	r0, r4, r0
 8002b54:	7881      	ldrb	r1, [r0, #2]
 8002b56:	1c49      	adds	r1, r1, #1
 8002b58:	7081      	strb	r1, [r0, #2]
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	7460      	strb	r0, [r4, #17]
 8002b5e:	e00a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7fe fc47 	bl	80013f4 <PE_CalculateMinTiming>
 8002b66:	2132      	movs	r1, #50	; 0x32
 8002b68:	5c61      	ldrb	r1, [r4, r1]
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d002      	beq.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d300      	bcc.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b72:	2002      	movs	r0, #2
 8002b74:	0007      	movs	r7, r0
 8002b76:	0038      	movs	r0, r7
 8002b78:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002b7c <.text_5>:
 8002b7c:	0000025e 	.word	0x0000025e

08002b80 <.text_6>:
 8002b80:	ffffbfff 	.word	0xffffbfff

08002b84 <.text_7>:
 8002b84:	ffffdfff 	.word	0xffffdfff

08002b88 <.text_8>:
 8002b88:	20000000 	.word	0x20000000

08002b8c <USBPD_PE_StateMachine_SRC>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	0005      	movs	r5, r0
 8002b92:	4829      	ldr	r0, [pc, #164]	; (8002c38 <USBPD_PE_StateMachine_SRC+0xac>)
 8002b94:	00a9      	lsls	r1, r5, #2
 8002b96:	5844      	ldr	r4, [r0, r1]
 8002b98:	7c60      	ldrb	r0, [r4, #17]
 8002b9a:	2848      	cmp	r0, #72	; 0x48
 8002b9c:	d134      	bne.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f7fd ffc0 	bl	8000b24 <PE_Reset_ZI>
 8002ba4:	0020      	movs	r0, r4
 8002ba6:	f7fd fff3 	bl	8000b90 <PE_Reset_Counter>
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	7900      	ldrb	r0, [r0, #4]
 8002bae:	0783      	lsls	r3, r0, #30
 8002bb0:	0f9b      	lsrs	r3, r3, #30
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	7c20      	ldrb	r0, [r4, #16]
 8002bb8:	f002 fd83 	bl	80056c2 <USBPD_PRL_SetHeader>
 8002bbc:	6860      	ldr	r0, [r4, #4]
 8002bbe:	6801      	ldr	r1, [r0, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	6002      	str	r2, [r0, #0]
 8002bc6:	6860      	ldr	r0, [r4, #4]
 8002bc8:	6801      	ldr	r1, [r0, #0]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4391      	bics	r1, r2
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	7912      	ldrb	r2, [r2, #4]
 8002bd2:	0792      	lsls	r2, r2, #30
 8002bd4:	0f92      	lsrs	r2, r2, #30
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	6002      	str	r2, [r0, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	7c20      	ldrb	r0, [r4, #16]
 8002bde:	f002 fde1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002be2:	7c20      	ldrb	r0, [r4, #16]
 8002be4:	f003 f84a 	bl	8005c7c <USBPD_PRL_Reset>
 8002be8:	2002      	movs	r0, #2
 8002bea:	7460      	strb	r0, [r4, #17]
 8002bec:	7ca0      	ldrb	r0, [r4, #18]
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d00a      	beq.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	74a0      	strb	r0, [r4, #18]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	7c21      	ldrb	r1, [r4, #16]
 8002c00:	2004      	movs	r0, #4
 8002c02:	4eca      	ldr	r6, [pc, #808]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002c04:	6836      	ldr	r6, [r6, #0]
 8002c06:	47b0      	blx	r6
 8002c08:	6960      	ldr	r0, [r4, #20]
 8002c0a:	0341      	lsls	r1, r0, #13
 8002c0c:	0fc9      	lsrs	r1, r1, #31
 8002c0e:	d006      	beq.n	8002c1e <USBPD_PE_StateMachine_SRC+0x92>
 8002c10:	49c7      	ldr	r1, [pc, #796]	; (8002f30 <__iar_annotation$$branch+0x70>)
 8002c12:	4001      	ands	r1, r0
 8002c14:	6161      	str	r1, [r4, #20]
 8002c16:	2164      	movs	r1, #100	; 0x64
 8002c18:	7c20      	ldrb	r0, [r4, #16]
 8002c1a:	f7fd fc31 	bl	8000480 <USBPD_PE_Notification>
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f7fd fe62 	bl	80008e8 <PE_Get_RxEvent>
 8002c24:	4669      	mov	r1, sp
 8002c26:	7308      	strb	r0, [r1, #12]
 8002c28:	4668      	mov	r0, sp
 8002c2a:	7b00      	ldrb	r0, [r0, #12]
 8002c2c:	2803      	cmp	r0, #3
 8002c2e:	d105      	bne.n	8002c3c <USBPD_PE_StateMachine_SRC+0xb0>
 8002c30:	2001      	movs	r0, #1
 8002c32:	b007      	add	sp, #28
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200001e4 	.word	0x200001e4
 8002c3c:	4668      	mov	r0, sp
 8002c3e:	7345      	strb	r5, [r0, #13]
 8002c40:	6860      	ldr	r0, [r4, #4]
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	04c1      	lsls	r1, r0, #19
 8002c46:	0fc9      	lsrs	r1, r1, #31
 8002c48:	d100      	bne.n	8002c4c <USBPD_PE_StateMachine_SRC+0xc0>
 8002c4a:	e13b      	b.n	8002ec4 <__iar_annotation$$branch+0x4>
 8002c4c:	6960      	ldr	r0, [r4, #20]
 8002c4e:	0381      	lsls	r1, r0, #14
 8002c50:	0fc9      	lsrs	r1, r1, #31
 8002c52:	d100      	bne.n	8002c56 <USBPD_PE_StateMachine_SRC+0xca>
 8002c54:	e144      	b.n	8002ee0 <__iar_annotation$$branch+0x20>
 8002c56:	4668      	mov	r0, sp
 8002c58:	7b40      	ldrb	r0, [r0, #13]
 8002c5a:	f002 fd9b 	bl	8005794 <USBPD_PRL_FastRoleSwapSignalling>
 8002c5e:	20a6      	movs	r0, #166	; 0xa6
 8002c60:	7460      	strb	r0, [r4, #17]
 8002c62:	2109      	movs	r1, #9
 8002c64:	7721      	strb	r1, [r4, #28]
 8002c66:	2100      	movs	r1, #0
 8002c68:	2232      	movs	r2, #50	; 0x32
 8002c6a:	54a1      	strb	r1, [r4, r2]
 8002c6c:	6961      	ldr	r1, [r4, #20]
 8002c6e:	4ab1      	ldr	r2, [pc, #708]	; (8002f34 <__iar_annotation$$branch+0x74>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	6162      	str	r2, [r4, #20]
 8002c74:	49b0      	ldr	r1, [pc, #704]	; (8002f38 <__iar_annotation$$branch+0x78>)
 8002c76:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002c78:	7ca1      	ldrb	r1, [r4, #18]
 8002c7a:	29a6      	cmp	r1, #166	; 0xa6
 8002c7c:	d000      	beq.n	8002c80 <USBPD_PE_StateMachine_SRC+0xf4>
 8002c7e:	e125      	b.n	8002ecc <__iar_annotation$$branch+0xc>
 8002c80:	2502      	movs	r5, #2
 8002c82:	4668      	mov	r0, sp
 8002c84:	7b00      	ldrb	r0, [r0, #12]
 8002c86:	2811      	cmp	r0, #17
 8002c88:	d11f      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c8a:	6860      	ldr	r0, [r4, #4]
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	0701      	lsls	r1, r0, #28
 8002c90:	0fc9      	lsrs	r1, r1, #31
 8002c92:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c94:	0680      	lsls	r0, r0, #26
 8002c96:	0fc2      	lsrs	r2, r0, #31
 8002c98:	4291      	cmp	r1, r2
 8002c9a:	d116      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c9c:	2014      	movs	r0, #20
 8002c9e:	4669      	mov	r1, sp
 8002ca0:	7308      	strb	r0, [r1, #12]
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	f7fd fe57 	bl	8000956 <PE_Clear_RxEvent>
 8002ca8:	2092      	movs	r0, #146	; 0x92
 8002caa:	7460      	strb	r0, [r4, #17]
 8002cac:	7ca0      	ldrb	r0, [r4, #18]
 8002cae:	2892      	cmp	r0, #146	; 0x92
 8002cb0:	d100      	bne.n	8002cb4 <USBPD_PE_StateMachine_SRC+0x128>
 8002cb2:	e155      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002cb4:	2092      	movs	r0, #146	; 0x92
 8002cb6:	74a0      	strb	r0, [r4, #18]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	9000      	str	r0, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2292      	movs	r2, #146	; 0x92
 8002cc0:	7c21      	ldrb	r1, [r4, #16]
 8002cc2:	2004      	movs	r0, #4
 8002cc4:	4e99      	ldr	r6, [pc, #612]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002cc6:	6836      	ldr	r6, [r6, #0]
 8002cc8:	47b0      	blx	r6
 8002cca:	7c60      	ldrb	r0, [r4, #17]
 8002ccc:	499b      	ldr	r1, [pc, #620]	; (8002f3c <__iar_annotation$$branch+0x7c>)
 8002cce:	1866      	adds	r6, r4, r1
 8002cd0:	4f9b      	ldr	r7, [pc, #620]	; (8002f40 <__iar_annotation$$branch+0x80>)
 8002cd2:	499c      	ldr	r1, [pc, #624]	; (8002f44 <__iar_annotation$$branch+0x84>)
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <USBPD_PE_StateMachine_SRC+0x14e>
 8002cd8:	e136      	b.n	8002f48 <__iar_annotation$$branch+0x88>
 8002cda:	1e42      	subs	r2, r0, #1
 8002cdc:	d067      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002cde:	1e52      	subs	r2, r2, #1
 8002ce0:	d100      	bne.n	8002ce4 <USBPD_PE_StateMachine_SRC+0x158>
 8002ce2:	e149      	b.n	8002f78 <__iar_annotation$$branch+0xb8>
 8002ce4:	1e52      	subs	r2, r2, #1
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	d801      	bhi.n	8002cee <__iar_annotation$$branch+0x4>

08002cea <__iar_annotation$$branch>:
 8002cea:	f000 fd90 	bl	800380e <__iar_annotation$$branch+0x94e>
 8002cee:	1e92      	subs	r2, r2, #2
 8002cf0:	d100      	bne.n	8002cf4 <__iar_annotation$$branch+0xa>
 8002cf2:	e189      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002cf4:	1e52      	subs	r2, r2, #1
 8002cf6:	d100      	bne.n	8002cfa <__iar_annotation$$branch+0x10>
 8002cf8:	e18b      	b.n	8003012 <__iar_annotation$$branch+0x152>
 8002cfa:	1e52      	subs	r2, r2, #1
 8002cfc:	d100      	bne.n	8002d00 <__iar_annotation$$branch+0x16>
 8002cfe:	e190      	b.n	8003022 <__iar_annotation$$branch+0x162>
 8002d00:	1e52      	subs	r2, r2, #1
 8002d02:	d100      	bne.n	8002d06 <__iar_annotation$$branch+0x1c>
 8002d04:	e1e1      	b.n	80030ca <__iar_annotation$$branch+0x20a>
 8002d06:	1e52      	subs	r2, r2, #1
 8002d08:	d100      	bne.n	8002d0c <__iar_annotation$$branch+0x22>
 8002d0a:	e223      	b.n	8003154 <__iar_annotation$$branch+0x294>
 8002d0c:	1ed2      	subs	r2, r2, #3
 8002d0e:	d100      	bne.n	8002d12 <__iar_annotation$$branch+0x28>
 8002d10:	e276      	b.n	8003200 <__iar_annotation$$branch+0x340>
 8002d12:	1e52      	subs	r2, r2, #1
 8002d14:	d100      	bne.n	8002d18 <__iar_annotation$$branch+0x2e>
 8002d16:	e286      	b.n	8003226 <__iar_annotation$$branch+0x366>
 8002d18:	1e52      	subs	r2, r2, #1
 8002d1a:	d100      	bne.n	8002d1e <__iar_annotation$$branch+0x34>
 8002d1c:	e11d      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002d1e:	1e52      	subs	r2, r2, #1
 8002d20:	d100      	bne.n	8002d24 <__iar_annotation$$branch+0x3a>
 8002d22:	e30d      	b.n	8003340 <__iar_annotation$$branch+0x480>
 8002d24:	1e52      	subs	r2, r2, #1
 8002d26:	d100      	bne.n	8002d2a <__iar_annotation$$branch+0x40>
 8002d28:	e2c6      	b.n	80032b8 <__iar_annotation$$branch+0x3f8>
 8002d2a:	1e52      	subs	r2, r2, #1
 8002d2c:	d100      	bne.n	8002d30 <__iar_annotation$$branch+0x46>
 8002d2e:	e2cc      	b.n	80032ca <__iar_annotation$$branch+0x40a>
 8002d30:	1e52      	subs	r2, r2, #1
 8002d32:	d100      	bne.n	8002d36 <__iar_annotation$$branch+0x4c>
 8002d34:	e2d8      	b.n	80032e8 <__iar_annotation$$branch+0x428>
 8002d36:	1e52      	subs	r2, r2, #1
 8002d38:	d100      	bne.n	8002d3c <__iar_annotation$$branch+0x52>
 8002d3a:	e389      	b.n	8003450 <__iar_annotation$$branch+0x590>
 8002d3c:	1e52      	subs	r2, r2, #1
 8002d3e:	d100      	bne.n	8002d42 <__iar_annotation$$branch+0x58>
 8002d40:	e32b      	b.n	800339a <__iar_annotation$$branch+0x4da>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	d100      	bne.n	8002d48 <__iar_annotation$$branch+0x5e>
 8002d46:	e332      	b.n	80033ae <__iar_annotation$$branch+0x4ee>
 8002d48:	1e52      	subs	r2, r2, #1
 8002d4a:	d100      	bne.n	8002d4e <__iar_annotation$$branch+0x64>
 8002d4c:	e1d5      	b.n	80030fa <__iar_annotation$$branch+0x23a>
 8002d4e:	1e52      	subs	r2, r2, #1
 8002d50:	d100      	bne.n	8002d54 <__iar_annotation$$branch+0x6a>
 8002d52:	e34c      	b.n	80033ee <__iar_annotation$$branch+0x52e>
 8002d54:	1e52      	subs	r2, r2, #1
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d929      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002d5a:	1e92      	subs	r2, r2, #2
 8002d5c:	d100      	bne.n	8002d60 <__iar_annotation$$branch+0x76>
 8002d5e:	e3a3      	b.n	80034a8 <__iar_annotation$$branch+0x5e8>
 8002d60:	1e52      	subs	r2, r2, #1
 8002d62:	d100      	bne.n	8002d66 <__iar_annotation$$branch+0x7c>
 8002d64:	e3b0      	b.n	80034c8 <__iar_annotation$$branch+0x608>
 8002d66:	1e92      	subs	r2, r2, #2
 8002d68:	d021      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002d6a:	1e52      	subs	r2, r2, #1
 8002d6c:	d101      	bne.n	8002d72 <__iar_annotation$$branch+0x4>

08002d6e <__iar_annotation$$branch>:
 8002d6e:	f000 fc88 	bl	8003682 <__iar_annotation$$branch+0x7c2>
 8002d72:	1e52      	subs	r2, r2, #1
 8002d74:	d101      	bne.n	8002d7a <__iar_annotation$$branch+0x4>

08002d76 <__iar_annotation$$branch>:
 8002d76:	f000 fc9a 	bl	80036ae <__iar_annotation$$branch+0x7ee>
 8002d7a:	1e52      	subs	r2, r2, #1
 8002d7c:	d101      	bne.n	8002d82 <__iar_annotation$$branch+0x4>

08002d7e <__iar_annotation$$branch>:
 8002d7e:	f000 fce6 	bl	800374e <__iar_annotation$$branch+0x88e>
 8002d82:	1e52      	subs	r2, r2, #1
 8002d84:	d101      	bne.n	8002d8a <__iar_annotation$$branch+0x4>

08002d86 <__iar_annotation$$branch>:
 8002d86:	f000 fd0f 	bl	80037a8 <__iar_annotation$$branch+0x8e8>
 8002d8a:	1e52      	subs	r2, r2, #1
 8002d8c:	d101      	bne.n	8002d92 <__iar_annotation$$branch+0x4>

08002d8e <__iar_annotation$$branch>:
 8002d8e:	f000 fbe5 	bl	800355c <__iar_annotation$$branch+0x69c>
 8002d92:	1e92      	subs	r2, r2, #2
 8002d94:	d101      	bne.n	8002d9a <__iar_annotation$$branch+0x4>

08002d96 <__iar_annotation$$branch>:
 8002d96:	f000 fc0a 	bl	80035ae <__iar_annotation$$branch+0x6ee>
 8002d9a:	1e52      	subs	r2, r2, #1
 8002d9c:	d101      	bne.n	8002da2 <__iar_annotation$$branch+0x4>

08002d9e <__iar_annotation$$branch>:
 8002d9e:	f000 fc2e 	bl	80035fe <__iar_annotation$$branch+0x73e>
 8002da2:	1e52      	subs	r2, r2, #1
 8002da4:	d101      	bne.n	8002daa <__iar_annotation$$branch+0x4>

08002da6 <__iar_annotation$$branch>:
 8002da6:	f000 fc49 	bl	800363c <__iar_annotation$$branch+0x77c>
 8002daa:	1e52      	subs	r2, r2, #1
 8002dac:	2a02      	cmp	r2, #2
 8002dae:	d801      	bhi.n	8002db4 <__iar_annotation$$branch+0x4>

08002db0 <__iar_annotation$$branch>:
 8002db0:	f000 fe1b 	bl	80039ea <__iar_annotation$$branch+0x106>
 8002db4:	1ed2      	subs	r2, r2, #3
 8002db6:	d101      	bne.n	8002dbc <__iar_annotation$$branch+0x4>

08002db8 <__iar_annotation$$branch>:
 8002db8:	f000 fbf4 	bl	80035a4 <__iar_annotation$$branch+0x6e4>
 8002dbc:	1e52      	subs	r2, r2, #1
 8002dbe:	d101      	bne.n	8002dc4 <__iar_annotation$$branch+0x4>

08002dc0 <__iar_annotation$$branch>:
 8002dc0:	f000 fd96 	bl	80038f0 <__iar_annotation$$branch+0xc>
 8002dc4:	1e52      	subs	r2, r2, #1
 8002dc6:	d0f2      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dc8:	1e52      	subs	r2, r2, #1
 8002dca:	d101      	bne.n	8002dd0 <__iar_annotation$$branch+0x4>

08002dcc <__iar_annotation$$branch>:
 8002dcc:	f000 fda1 	bl	8003912 <__iar_annotation$$branch+0x2e>
 8002dd0:	1e52      	subs	r2, r2, #1
 8002dd2:	d101      	bne.n	8002dd8 <__iar_annotation$$branch+0x4>

08002dd4 <__iar_annotation$$branch>:
 8002dd4:	f000 fdcf 	bl	8003976 <__iar_annotation$$branch+0x92>
 8002dd8:	1e52      	subs	r2, r2, #1
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	d9e7      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dde:	1e92      	subs	r2, r2, #2
 8002de0:	d001      	beq.n	8002de6 <__iar_annotation$$branch+0x12>
 8002de2:	1e92      	subs	r2, r2, #2
 8002de4:	2a05      	cmp	r2, #5
 8002de6:	d801      	bhi.n	8002dec <__iar_annotation$$branch+0x4>

08002de8 <__iar_annotation$$branch>:
 8002de8:	f000 fdfb 	bl	80039e2 <__iar_annotation$$branch+0xfe>
 8002dec:	1f92      	subs	r2, r2, #6
 8002dee:	d101      	bne.n	8002df4 <__iar_annotation$$branch+0x4>

08002df0 <__iar_annotation$$branch>:
 8002df0:	f000 fdd2 	bl	8003998 <__iar_annotation$$branch+0xb4>
 8002df4:	1e52      	subs	r2, r2, #1
 8002df6:	2a03      	cmp	r2, #3
 8002df8:	d9d9      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfa:	3a11      	subs	r2, #17
 8002dfc:	d0d7      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfe:	1e52      	subs	r2, r2, #1
 8002e00:	d100      	bne.n	8002e04 <__iar_annotation$$branch+0x14>
 8002e02:	e150      	b.n	80030a6 <__iar_annotation$$branch+0x1e6>
 8002e04:	3a0f      	subs	r2, #15
 8002e06:	d101      	bne.n	8002e0c <__iar_annotation$$branch+0x4>

08002e08 <__iar_annotation$$branch>:
 8002e08:	f000 fce9 	bl	80037de <__iar_annotation$$branch+0x91e>
 8002e0c:	1fd2      	subs	r2, r2, #7
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	d9cd      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e12:	1f52      	subs	r2, r2, #5
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d9ca      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e18:	3a0d      	subs	r2, #13
 8002e1a:	d0c8      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e1c:	3a12      	subs	r2, #18
 8002e1e:	d101      	bne.n	8002e24 <__iar_annotation$$branch+0x4>

08002e20 <__iar_annotation$$branch>:
 8002e20:	f000 fe18 	bl	8003a54 <__iar_annotation$$branch+0x62>
 8002e24:	3a0c      	subs	r2, #12
 8002e26:	d100      	bne.n	8002e2a <__iar_annotation$$branch+0xa>
 8002e28:	e09a      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002e2a:	1e52      	subs	r2, r2, #1
 8002e2c:	2a02      	cmp	r2, #2
 8002e2e:	d9be      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e30:	1ed2      	subs	r2, r2, #3
 8002e32:	d100      	bne.n	8002e36 <__iar_annotation$$branch+0x16>
 8002e34:	e213      	b.n	800325e <__iar_annotation$$branch+0x39e>
 8002e36:	1e52      	subs	r2, r2, #1
 8002e38:	d100      	bne.n	8002e3c <__iar_annotation$$branch+0x1c>
 8002e3a:	e229      	b.n	8003290 <__iar_annotation$$branch+0x3d0>
 8002e3c:	1e92      	subs	r2, r2, #2
 8002e3e:	d0b6      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e40:	1e52      	subs	r2, r2, #1
 8002e42:	d100      	bne.n	8002e46 <__iar_annotation$$branch+0x26>
 8002e44:	e0e0      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002e46:	1e92      	subs	r2, r2, #2
 8002e48:	2a08      	cmp	r2, #8
 8002e4a:	d801      	bhi.n	8002e50 <__iar_annotation$$branch+0x4>

08002e4c <__iar_annotation$$branch>:
 8002e4c:	f000 fdd3 	bl	80039f6 <__iar_annotation$$branch+0x4>
 8002e50:	3a0a      	subs	r2, #10
 8002e52:	d101      	bne.n	8002e58 <__iar_annotation$$branch+0x4>

08002e54 <__iar_annotation$$branch>:
 8002e54:	f000 fde2 	bl	8003a1c <__iar_annotation$$branch+0x2a>
 8002e58:	a903      	add	r1, sp, #12
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	f001 fb32 	bl	80044c4 <PE_StateMachine_VDM>
 8002e60:	0005      	movs	r5, r0
 8002e62:	7c62      	ldrb	r2, [r4, #17]
 8002e64:	4e31      	ldr	r6, [pc, #196]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002e66:	7ca0      	ldrb	r0, [r4, #18]
 8002e68:	4290      	cmp	r0, r2
 8002e6a:	d007      	beq.n	8002e7c <__iar_annotation$$branch+0x28>
 8002e6c:	74a2      	strb	r2, [r4, #18]
 8002e6e:	2000      	movs	r0, #0
 8002e70:	9000      	str	r0, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	7c21      	ldrb	r1, [r4, #16]
 8002e76:	2004      	movs	r0, #4
 8002e78:	6837      	ldr	r7, [r6, #0]
 8002e7a:	47b8      	blx	r7
 8002e7c:	4668      	mov	r0, sp
 8002e7e:	7b00      	ldrb	r0, [r0, #12]
 8002e80:	2814      	cmp	r0, #20
 8002e82:	d101      	bne.n	8002e88 <__iar_annotation$$branch+0x4>

08002e84 <__iar_annotation$$branch>:
 8002e84:	f000 fdec 	bl	8003a60 <__iar_annotation$$branch+0x6e>
 8002e88:	0020      	movs	r0, r4
 8002e8a:	f7fd fdab 	bl	80009e4 <PE_Check_AMSConflict>
 8002e8e:	2815      	cmp	r0, #21
 8002e90:	d109      	bne.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e92:	4668      	mov	r0, sp
 8002e94:	7b00      	ldrb	r0, [r0, #12]
 8002e96:	2814      	cmp	r0, #20
 8002e98:	d005      	beq.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e9a:	2014      	movs	r0, #20
 8002e9c:	4669      	mov	r1, sp
 8002e9e:	7308      	strb	r0, [r1, #12]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f7fd fd58 	bl	8000956 <PE_Clear_RxEvent>
 8002ea6:	7c62      	ldrb	r2, [r4, #17]
 8002ea8:	7ca0      	ldrb	r0, [r4, #18]
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d007      	beq.n	8002ebe <__iar_annotation$$branch+0x3a>
 8002eae:	74a2      	strb	r2, [r4, #18]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	9000      	str	r0, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	7c21      	ldrb	r1, [r4, #16]
 8002eb8:	2004      	movs	r0, #4
 8002eba:	6835      	ldr	r5, [r6, #0]
 8002ebc:	47a8      	blx	r5
 8002ebe:	2500      	movs	r5, #0

08002ec0 <__iar_annotation$$branch>:
 8002ec0:	f000 fded 	bl	8003a9e <__iar_annotation$$branch+0xac>
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	43ed      	mvns	r5, r5
 8002ec8:	0028      	movs	r0, r5
 8002eca:	e6b2      	b.n	8002c32 <USBPD_PE_StateMachine_SRC+0xa6>
 8002ecc:	74a0      	strb	r0, [r4, #18]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	9000      	str	r0, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	22a6      	movs	r2, #166	; 0xa6
 8002ed6:	7c21      	ldrb	r1, [r4, #16]
 8002ed8:	2004      	movs	r0, #4
 8002eda:	4d14      	ldr	r5, [pc, #80]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002edc:	682d      	ldr	r5, [r5, #0]
 8002ede:	47a8      	blx	r5
 8002ee0:	2502      	movs	r5, #2
 8002ee2:	2032      	movs	r0, #50	; 0x32
 8002ee4:	5c20      	ldrb	r0, [r4, r0]
 8002ee6:	280f      	cmp	r0, #15
 8002ee8:	d001      	beq.n	8002eee <__iar_annotation$$branch+0x2e>
 8002eea:	2814      	cmp	r0, #20
 8002eec:	d11c      	bne.n	8002f28 <__iar_annotation$$branch+0x68>
 8002eee:	4668      	mov	r0, sp
 8002ef0:	7b00      	ldrb	r0, [r0, #12]
 8002ef2:	2814      	cmp	r0, #20
 8002ef4:	d005      	beq.n	8002f02 <__iar_annotation$$branch+0x42>
 8002ef6:	2014      	movs	r0, #20
 8002ef8:	4669      	mov	r1, sp
 8002efa:	7308      	strb	r0, [r1, #12]
 8002efc:	0020      	movs	r0, r4
 8002efe:	f7fd fd2a 	bl	8000956 <PE_Clear_RxEvent>
 8002f02:	2032      	movs	r0, #50	; 0x32
 8002f04:	5c22      	ldrb	r2, [r4, r0]
 8002f06:	7462      	strb	r2, [r4, #17]
 8002f08:	2000      	movs	r0, #0
 8002f0a:	2332      	movs	r3, #50	; 0x32
 8002f0c:	54e0      	strb	r0, [r4, r3]
 8002f0e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002f10:	7ca0      	ldrb	r0, [r4, #18]
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d008      	beq.n	8002f28 <__iar_annotation$$branch+0x68>
 8002f16:	74a2      	strb	r2, [r4, #18]
 8002f18:	2000      	movs	r0, #0
 8002f1a:	9000      	str	r0, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	7c21      	ldrb	r1, [r4, #16]
 8002f20:	2004      	movs	r0, #4
 8002f22:	4e02      	ldr	r6, [pc, #8]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002f24:	6836      	ldr	r6, [r6, #0]
 8002f26:	47b0      	blx	r6
 8002f28:	e6ab      	b.n	8002c82 <USBPD_PE_StateMachine_SRC+0xf6>
 8002f2a:	bf00      	nop
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	fffbffff 	.word	0xfffbffff
 8002f34:	fffdffff 	.word	0xfffdffff
 8002f38:	00008011 	.word	0x00008011
 8002f3c:	0000025e 	.word	0x0000025e
 8002f40:	0000801b 	.word	0x0000801b
 8002f44:	0000f01f 	.word	0x0000f01f
 8002f48:	6860      	ldr	r0, [r4, #4]
 8002f4a:	6801      	ldr	r1, [r0, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4391      	bics	r1, r2
 8002f50:	6001      	str	r1, [r0, #0]
 8002f52:	215f      	movs	r1, #95	; 0x5f
 8002f54:	7c20      	ldrb	r0, [r4, #16]
 8002f56:	f7fd fa93 	bl	8000480 <USBPD_PE_Notification>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	43ed      	mvns	r5, r5
 8002f5e:	e780      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002f60:	6860      	ldr	r0, [r4, #4]
 8002f62:	6801      	ldr	r1, [r0, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	4391      	bics	r1, r2
 8002f68:	6001      	str	r1, [r0, #0]
 8002f6a:	68a0      	ldr	r0, [r4, #8]
 8002f6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d0f3      	beq.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f72:	7c20      	ldrb	r0, [r4, #16]
 8002f74:	4788      	blx	r1
 8002f76:	e7f0      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f78:	2701      	movs	r7, #1
 8002f7a:	6860      	ldr	r0, [r4, #4]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	0bc0      	lsrs	r0, r0, #15
 8002f80:	4038      	ands	r0, r7
 8002f82:	d002      	beq.n	8002f8a <__iar_annotation$$branch+0xca>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	6801      	ldr	r1, [r0, #0]
 8002f88:	e000      	b.n	8002f8c <__iar_annotation$$branch+0xcc>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4668      	mov	r0, sp
 8002f8e:	7b40      	ldrb	r0, [r0, #13]
 8002f90:	f002 fc08 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002f94:	6860      	ldr	r0, [r4, #4]
 8002f96:	6801      	ldr	r1, [r0, #0]
 8002f98:	0b0a      	lsrs	r2, r1, #12
 8002f9a:	403a      	ands	r2, r7
 8002f9c:	d02f      	beq.n	8002ffe <__iar_annotation$$branch+0x13e>
 8002f9e:	078a      	lsls	r2, r1, #30
 8002fa0:	0f92      	lsrs	r2, r2, #30
 8002fa2:	2a01      	cmp	r2, #1
 8002fa4:	d101      	bne.n	8002faa <__iar_annotation$$branch+0xea>
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	e000      	b.n	8002fac <__iar_annotation$$branch+0xec>
 8002faa:	2220      	movs	r2, #32
 8002fac:	2320      	movs	r3, #32
 8002fae:	4399      	bics	r1, r3
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	6002      	str	r2, [r0, #0]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	70f0      	strb	r0, [r6, #3]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f7fe f9f3 	bl	80013a6 <PE_SetPowerNegotiation>
 8002fc0:	6860      	ldr	r0, [r4, #4]
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	0901      	lsrs	r1, r0, #4
 8002fc6:	4039      	ands	r1, r7
 8002fc8:	d005      	beq.n	8002fd6 <__iar_annotation$$branch+0x116>
 8002fca:	48ae      	ldr	r0, [pc, #696]	; (8003284 <__iar_annotation$$branch+0x3c4>)
 8002fcc:	83e0      	strh	r0, [r4, #30]
 8002fce:	2514      	movs	r5, #20
 8002fd0:	2006      	movs	r0, #6
 8002fd2:	7460      	strb	r0, [r4, #17]
 8002fd4:	e745      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002fd6:	0bc0      	lsrs	r0, r0, #15
 8002fd8:	4007      	ands	r7, r0
 8002fda:	d00a      	beq.n	8002ff2 <__iar_annotation$$branch+0x132>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	7800      	ldrb	r0, [r0, #0]
 8002fe0:	0780      	lsls	r0, r0, #30
 8002fe2:	d400      	bmi.n	8002fe6 <__iar_annotation$$branch+0x126>
 8002fe4:	e087      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fe6:	7930      	ldrb	r0, [r6, #4]
 8002fe8:	2814      	cmp	r0, #20
 8002fea:	d300      	bcc.n	8002fee <__iar_annotation$$branch+0x12e>
 8002fec:	e083      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fee:	68e1      	ldr	r1, [r4, #12]
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d100      	bne.n	8002ff6 <__iar_annotation$$branch+0x136>
 8002ff4:	e07f      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002ff6:	1c40      	adds	r0, r0, #1
 8002ff8:	7130      	strb	r0, [r6, #4]
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	e7e9      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8002ffe:	2121      	movs	r1, #33	; 0x21
 8003000:	7c20      	ldrb	r0, [r4, #16]
 8003002:	f7fd fa3d 	bl	8000480 <USBPD_PE_Notification>
 8003006:	e04c      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003008:	a903      	add	r1, sp, #12
 800300a:	0020      	movs	r0, r4
 800300c:	f000 fd8c 	bl	8003b28 <PE_StateMachine_VDMCable>
 8003010:	e726      	b.n	8002e60 <__iar_annotation$$branch+0xc>
 8003012:	8be0      	ldrh	r0, [r4, #30]
 8003014:	03a9      	lsls	r1, r5, #14
 8003016:	4288      	cmp	r0, r1
 8003018:	d102      	bne.n	8003020 <__iar_annotation$$branch+0x160>
 800301a:	2007      	movs	r0, #7
 800301c:	7460      	strb	r0, [r4, #17]
 800301e:	2500      	movs	r5, #0
 8003020:	e71f      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003022:	6960      	ldr	r0, [r4, #20]
 8003024:	0740      	lsls	r0, r0, #29
 8003026:	0fc1      	lsrs	r1, r0, #31
 8003028:	0020      	movs	r0, r4
 800302a:	f000 fd45 	bl	8003ab8 <PE_Send_SRCCapabilities>
 800302e:	2805      	cmp	r0, #5
 8003030:	d002      	beq.n	8003038 <__iar_annotation$$branch+0x178>
 8003032:	2809      	cmp	r0, #9
 8003034:	d0f4      	beq.n	8003020 <__iar_annotation$$branch+0x160>
 8003036:	e011      	b.n	800305c <__iar_annotation$$branch+0x19c>
 8003038:	2001      	movs	r0, #1
 800303a:	7720      	strb	r0, [r4, #28]
 800303c:	6960      	ldr	r0, [r4, #20]
 800303e:	2104      	movs	r1, #4
 8003040:	4301      	orrs	r1, r0
 8003042:	6161      	str	r1, [r4, #20]
 8003044:	2000      	movs	r0, #0
 8003046:	70f0      	strb	r0, [r6, #3]
 8003048:	70b0      	strb	r0, [r6, #2]
 800304a:	83e7      	strh	r7, [r4, #30]
 800304c:	251b      	movs	r5, #27
 800304e:	2016      	movs	r0, #22
 8003050:	7460      	strb	r0, [r4, #17]
 8003052:	210f      	movs	r1, #15
 8003054:	7c20      	ldrb	r0, [r4, #16]
 8003056:	f7fd fa13 	bl	8000480 <USBPD_PE_Notification>
 800305a:	e702      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800305c:	6960      	ldr	r0, [r4, #20]
 800305e:	0741      	lsls	r1, r0, #29
 8003060:	0fc9      	lsrs	r1, r1, #31
 8003062:	d10f      	bne.n	8003084 <__iar_annotation$$branch+0x1c4>
 8003064:	78f0      	ldrb	r0, [r6, #3]
 8003066:	2833      	cmp	r0, #51	; 0x33
 8003068:	d217      	bcs.n	800309a <__iar_annotation$$branch+0x1da>
 800306a:	4887      	ldr	r0, [pc, #540]	; (8003288 <__iar_annotation$$branch+0x3c8>)
 800306c:	83e0      	strh	r0, [r4, #30]
 800306e:	2596      	movs	r5, #150	; 0x96
 8003070:	2008      	movs	r0, #8
 8003072:	7460      	strb	r0, [r4, #17]
 8003074:	4885      	ldr	r0, [pc, #532]	; (800328c <__iar_annotation$$branch+0x3cc>)
 8003076:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003078:	4201      	tst	r1, r0
 800307a:	d002      	beq.n	8003082 <__iar_annotation$$branch+0x1c2>
 800307c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800307e:	0005      	movs	r5, r0
 8003080:	400d      	ands	r5, r1
 8003082:	e6ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003084:	6860      	ldr	r0, [r4, #4]
 8003086:	7800      	ldrb	r0, [r0, #0]
 8003088:	0780      	lsls	r0, r0, #30
 800308a:	0f80      	lsrs	r0, r0, #30
 800308c:	2802      	cmp	r0, #2
 800308e:	d102      	bne.n	8003096 <__iar_annotation$$branch+0x1d6>
 8003090:	7c20      	ldrb	r0, [r4, #16]
 8003092:	f002 fb68 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003096:	2011      	movs	r0, #17
 8003098:	e7c0      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800309a:	2121      	movs	r1, #33	; 0x21
 800309c:	7c20      	ldrb	r0, [r4, #16]
 800309e:	f7fd f9ef 	bl	8000480 <USBPD_PE_Notification>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e795      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030a6:	2100      	movs	r1, #0
 80030a8:	0020      	movs	r0, r4
 80030aa:	f000 fd05 	bl	8003ab8 <PE_Send_SRCCapabilities>
 80030ae:	2805      	cmp	r0, #5
 80030b0:	d107      	bne.n	80030c2 <__iar_annotation$$branch+0x202>
 80030b2:	2104      	movs	r1, #4
 80030b4:	0020      	movs	r0, r4
 80030b6:	f7fe f976 	bl	80013a6 <PE_SetPowerNegotiation>
 80030ba:	2001      	movs	r0, #1
 80030bc:	7720      	strb	r0, [r4, #28]
 80030be:	83e7      	strh	r7, [r4, #30]
 80030c0:	e7c5      	b.n	800304e <__iar_annotation$$branch+0x18e>
 80030c2:	2000      	movs	r0, #0
 80030c4:	7720      	strb	r0, [r4, #28]
 80030c6:	2011      	movs	r0, #17
 80030c8:	e783      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030ca:	03a8      	lsls	r0, r5, #14
 80030cc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80030ce:	4281      	cmp	r1, r0
 80030d0:	d106      	bne.n	80030e0 <__iar_annotation$$branch+0x220>
 80030d2:	2100      	movs	r1, #0
 80030d4:	8461      	strh	r1, [r4, #34]	; 0x22
 80030d6:	7931      	ldrb	r1, [r6, #4]
 80030d8:	1c49      	adds	r1, r1, #1
 80030da:	7131      	strb	r1, [r6, #4]
 80030dc:	2105      	movs	r1, #5
 80030de:	7461      	strb	r1, [r4, #17]
 80030e0:	8be1      	ldrh	r1, [r4, #30]
 80030e2:	4281      	cmp	r1, r0
 80030e4:	d1cd      	bne.n	8003082 <__iar_annotation$$branch+0x1c2>
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	6840      	ldr	r0, [r0, #4]
 80030ea:	0601      	lsls	r1, r0, #24
 80030ec:	0fc9      	lsrs	r1, r1, #31
 80030ee:	d002      	beq.n	80030f6 <__iar_annotation$$branch+0x236>
 80030f0:	78f0      	ldrb	r0, [r6, #3]
 80030f2:	1c40      	adds	r0, r0, #1
 80030f4:	70f0      	strb	r0, [r6, #3]
 80030f6:	2007      	movs	r0, #7
 80030f8:	e76b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2811      	cmp	r0, #17
 8003100:	d109      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003102:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003104:	0bc1      	lsrs	r1, r0, #15
 8003106:	d106      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003108:	0b01      	lsrs	r1, r0, #12
 800310a:	0749      	lsls	r1, r1, #29
 800310c:	d100      	bne.n	8003110 <__iar_annotation$$branch+0x250>
 800310e:	e111      	b.n	8003334 <__iar_annotation$$branch+0x474>
 8003110:	06c0      	lsls	r0, r0, #27
 8003112:	0ec0      	lsrs	r0, r0, #27
 8003114:	2802      	cmp	r0, #2
 8003116:	d000      	beq.n	800311a <__iar_annotation$$branch+0x25a>
 8003118:	e10c      	b.n	8003334 <__iar_annotation$$branch+0x474>
 800311a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800311c:	7881      	ldrb	r1, [r0, #2]
 800311e:	78c2      	ldrb	r2, [r0, #3]
 8003120:	0212      	lsls	r2, r2, #8
 8003122:	1889      	adds	r1, r1, r2
 8003124:	7902      	ldrb	r2, [r0, #4]
 8003126:	0412      	lsls	r2, r2, #16
 8003128:	1889      	adds	r1, r1, r2
 800312a:	7940      	ldrb	r0, [r0, #5]
 800312c:	0600      	lsls	r0, r0, #24
 800312e:	1808      	adds	r0, r1, r0
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003134:	0600      	lsls	r0, r0, #24
 8003136:	0f81      	lsrs	r1, r0, #30
 8003138:	7c20      	ldrb	r0, [r4, #16]
 800313a:	f7fd fd5b 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 800313e:	2304      	movs	r3, #4
 8003140:	466a      	mov	r2, sp
 8003142:	2106      	movs	r1, #6
 8003144:	7c20      	ldrb	r0, [r4, #16]
 8003146:	68a5      	ldr	r5, [r4, #8]
 8003148:	69ad      	ldr	r5, [r5, #24]
 800314a:	47a8      	blx	r5
 800314c:	2009      	movs	r0, #9
 800314e:	7460      	strb	r0, [r4, #17]
 8003150:	2500      	movs	r5, #0
 8003152:	e0e5      	b.n	8003320 <__iar_annotation$$branch+0x460>
 8003154:	2702      	movs	r7, #2
 8003156:	2507      	movs	r5, #7
 8003158:	a901      	add	r1, sp, #4
 800315a:	7c20      	ldrb	r0, [r4, #16]
 800315c:	68a2      	ldr	r2, [r4, #8]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	4790      	blx	r2
 8003162:	280a      	cmp	r0, #10
 8003164:	d010      	beq.n	8003188 <__iar_annotation$$branch+0x2c8>
 8003166:	280b      	cmp	r0, #11
 8003168:	d035      	beq.n	80031d6 <__iar_annotation$$branch+0x316>
 800316a:	280d      	cmp	r0, #13
 800316c:	6860      	ldr	r0, [r4, #4]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	d136      	bne.n	80031e0 <__iar_annotation$$branch+0x320>
 8003172:	0a00      	lsrs	r0, r0, #8
 8003174:	4005      	ands	r5, r0
 8003176:	2d03      	cmp	r5, #3
 8003178:	d101      	bne.n	800317e <__iar_annotation$$branch+0x2be>
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <__iar_annotation$$branch+0x2c0>
 800317e:	230e      	movs	r3, #14
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	220c      	movs	r2, #12
 8003186:	e035      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 8003188:	48a9      	ldr	r0, [pc, #676]	; (8003430 <__iar_annotation$$branch+0x570>)
 800318a:	83e0      	strh	r0, [r4, #30]
 800318c:	271e      	movs	r7, #30
 800318e:	6860      	ldr	r0, [r4, #4]
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	0a00      	lsrs	r0, r0, #8
 8003194:	4005      	ands	r5, r0
 8003196:	2d01      	cmp	r5, #1
 8003198:	d00b      	beq.n	80031b2 <__iar_annotation$$branch+0x2f2>
 800319a:	9801      	ldr	r0, [sp, #4]
 800319c:	2803      	cmp	r0, #3
 800319e:	d108      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031a0:	6960      	ldr	r0, [r4, #20]
 80031a2:	06c0      	lsls	r0, r0, #27
 80031a4:	0f80      	lsrs	r0, r0, #30
 80031a6:	2803      	cmp	r0, #3
 80031a8:	d103      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031aa:	2080      	movs	r0, #128	; 0x80
 80031ac:	0200      	lsls	r0, r0, #8
 80031ae:	83e0      	strh	r0, [r4, #30]
 80031b0:	2700      	movs	r7, #0
 80031b2:	2000      	movs	r0, #0
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	230c      	movs	r3, #12
 80031b8:	2203      	movs	r2, #3
 80031ba:	2100      	movs	r1, #0
 80031bc:	0020      	movs	r0, r4
 80031be:	f7fe f9a7 	bl	8001510 <PE_Send_CtrlMessage>
 80031c2:	6960      	ldr	r0, [r4, #20]
 80031c4:	2118      	movs	r1, #24
 80031c6:	4388      	bics	r0, r1
 80031c8:	9901      	ldr	r1, [sp, #4]
 80031ca:	00c9      	lsls	r1, r1, #3
 80031cc:	2218      	movs	r2, #24
 80031ce:	400a      	ands	r2, r1
 80031d0:	4302      	orrs	r2, r0
 80031d2:	6162      	str	r2, [r4, #20]
 80031d4:	e012      	b.n	80031fc <__iar_annotation$$branch+0x33c>
 80031d6:	2000      	movs	r0, #0
 80031d8:	9000      	str	r0, [sp, #0]
 80031da:	230c      	movs	r3, #12
 80031dc:	2202      	movs	r2, #2
 80031de:	e009      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 80031e0:	0a00      	lsrs	r0, r0, #8
 80031e2:	4005      	ands	r5, r0
 80031e4:	2d03      	cmp	r5, #3
 80031e6:	d101      	bne.n	80031ec <__iar_annotation$$branch+0x32c>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e000      	b.n	80031ee <__iar_annotation$$branch+0x32e>
 80031ec:	230e      	movs	r3, #14
 80031ee:	2000      	movs	r0, #0
 80031f0:	9000      	str	r0, [sp, #0]
 80031f2:	2204      	movs	r2, #4
 80031f4:	2100      	movs	r1, #0
 80031f6:	0020      	movs	r0, r4
 80031f8:	f7fe f98a 	bl	8001510 <PE_Send_CtrlMessage>
 80031fc:	003d      	movs	r5, r7
 80031fe:	e630      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003200:	8be0      	ldrh	r0, [r4, #30]
 8003202:	03a9      	lsls	r1, r5, #14
 8003204:	4288      	cmp	r0, r1
 8003206:	d1fa      	bne.n	80031fe <__iar_annotation$$branch+0x33e>
 8003208:	2104      	movs	r1, #4
 800320a:	0020      	movs	r0, r4
 800320c:	f7fe f8cb 	bl	80013a6 <PE_SetPowerNegotiation>
 8003210:	68a0      	ldr	r0, [r4, #8]
 8003212:	6801      	ldr	r1, [r0, #0]
 8003214:	2900      	cmp	r1, #0
 8003216:	d0f2      	beq.n	80031fe <__iar_annotation$$branch+0x33e>
 8003218:	7c20      	ldrb	r0, [r4, #16]
 800321a:	4788      	blx	r1
 800321c:	2800      	cmp	r0, #0
 800321e:	d000      	beq.n	8003222 <__iar_annotation$$branch+0x362>
 8003220:	e2db      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003222:	200d      	movs	r0, #13
 8003224:	e6d5      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8003226:	2000      	movs	r0, #0
 8003228:	9000      	str	r0, [sp, #0]
 800322a:	2303      	movs	r3, #3
 800322c:	2206      	movs	r2, #6
 800322e:	2100      	movs	r1, #0
 8003230:	0020      	movs	r0, r4
 8003232:	f7fe f96d 	bl	8001510 <PE_Send_CtrlMessage>
 8003236:	2800      	cmp	r0, #0
 8003238:	d110      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 800323a:	2103      	movs	r1, #3
 800323c:	0020      	movs	r0, r4
 800323e:	f7fe f8b2 	bl	80013a6 <PE_SetPowerNegotiation>
 8003242:	2110      	movs	r1, #16
 8003244:	7c20      	ldrb	r0, [r4, #16]
 8003246:	f7fd f91b 	bl	8000480 <USBPD_PE_Notification>
 800324a:	2000      	movs	r0, #0
 800324c:	84a0      	strh	r0, [r4, #36]	; 0x24
 800324e:	6960      	ldr	r0, [r4, #20]
 8003250:	06c0      	lsls	r0, r0, #27
 8003252:	0f80      	lsrs	r0, r0, #30
 8003254:	2803      	cmp	r0, #3
 8003256:	d101      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003258:	4876      	ldr	r0, [pc, #472]	; (8003434 <__iar_annotation$$branch+0x574>)
 800325a:	84a0      	strh	r0, [r4, #36]	; 0x24
 800325c:	e601      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800325e:	2001      	movs	r0, #1
 8003260:	9000      	str	r0, [sp, #0]
 8003262:	2397      	movs	r3, #151	; 0x97
 8003264:	2202      	movs	r2, #2
 8003266:	2100      	movs	r1, #0
 8003268:	0020      	movs	r0, r4
 800326a:	f7fe f951 	bl	8001510 <PE_Send_CtrlMessage>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1f4      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003272:	7725      	strb	r5, [r4, #28]
 8003274:	2129      	movs	r1, #41	; 0x29
 8003276:	7c20      	ldrb	r0, [r4, #16]
 8003278:	f7fd f902 	bl	8000480 <USBPD_PE_Notification>
 800327c:	486e      	ldr	r0, [pc, #440]	; (8003438 <__iar_annotation$$branch+0x578>)
 800327e:	83e0      	strh	r0, [r4, #30]
 8003280:	4d6e      	ldr	r5, [pc, #440]	; (800343c <__iar_annotation$$branch+0x57c>)
 8003282:	e5ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003284:	00008014 	.word	0x00008014
 8003288:	00008096 	.word	0x00008096
 800328c:	00007fff 	.word	0x00007fff
 8003290:	8be0      	ldrh	r0, [r4, #30]
 8003292:	03a9      	lsls	r1, r5, #14
 8003294:	4288      	cmp	r0, r1
 8003296:	d1f4      	bne.n	8003282 <__iar_annotation$$branch+0x3c2>
 8003298:	212a      	movs	r1, #42	; 0x2a
 800329a:	7c20      	ldrb	r0, [r4, #16]
 800329c:	f7fd f8f0 	bl	8000480 <USBPD_PE_Notification>
 80032a0:	2000      	movs	r0, #0
 80032a2:	9000      	str	r0, [sp, #0]
 80032a4:	2303      	movs	r3, #3
 80032a6:	2206      	movs	r2, #6
 80032a8:	2100      	movs	r1, #0
 80032aa:	0020      	movs	r0, r4
 80032ac:	f7fe f930 	bl	8001510 <PE_Send_CtrlMessage>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d109      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032b4:	212e      	movs	r1, #46	; 0x2e
 80032b6:	e6cd      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032b8:	2000      	movs	r0, #0
 80032ba:	9000      	str	r0, [sp, #0]
 80032bc:	2307      	movs	r3, #7
 80032be:	2203      	movs	r2, #3
 80032c0:	2100      	movs	r1, #0
 80032c2:	0020      	movs	r0, r4
 80032c4:	f7fe f924 	bl	8001510 <PE_Send_CtrlMessage>
 80032c8:	e5cb      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80032ca:	2000      	movs	r0, #0
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	2312      	movs	r3, #18
 80032d0:	220d      	movs	r2, #13
 80032d2:	2031      	movs	r0, #49	; 0x31
 80032d4:	5c21      	ldrb	r1, [r4, r0]
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7fe f91a 	bl	8001510 <PE_Send_CtrlMessage>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d1f3      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032e0:	83e7      	strh	r7, [r4, #30]
 80032e2:	251b      	movs	r5, #27
 80032e4:	2130      	movs	r1, #48	; 0x30
 80032e6:	e6b5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032e8:	4668      	mov	r0, sp
 80032ea:	7b00      	ldrb	r0, [r0, #12]
 80032ec:	2814      	cmp	r0, #20
 80032ee:	d021      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 80032f0:	2030      	movs	r0, #48	; 0x30
 80032f2:	5c20      	ldrb	r0, [r4, r0]
 80032f4:	2231      	movs	r2, #49	; 0x31
 80032f6:	5ca2      	ldrb	r2, [r4, r2]
 80032f8:	4290      	cmp	r0, r2
 80032fa:	d11b      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 80032fc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80032fe:	4001      	ands	r1, r0
 8003300:	2903      	cmp	r1, #3
 8003302:	d117      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 8003304:	2131      	movs	r1, #49	; 0x31
 8003306:	7c20      	ldrb	r0, [r4, #16]
 8003308:	f7fd f8ba 	bl	8000480 <USBPD_PE_Notification>
 800330c:	2030      	movs	r0, #48	; 0x30
 800330e:	5c20      	ldrb	r0, [r4, r0]
 8003310:	2800      	cmp	r0, #0
 8003312:	d102      	bne.n	800331a <__iar_annotation$$branch+0x45a>
 8003314:	2007      	movs	r0, #7
 8003316:	7460      	strb	r0, [r4, #17]
 8003318:	e002      	b.n	8003320 <__iar_annotation$$branch+0x460>
 800331a:	2003      	movs	r0, #3
 800331c:	7460      	strb	r0, [r4, #17]
 800331e:	2500      	movs	r5, #0
 8003320:	4668      	mov	r0, sp
 8003322:	7b00      	ldrb	r0, [r0, #12]
 8003324:	2814      	cmp	r0, #20
 8003326:	d005      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 8003328:	2014      	movs	r0, #20
 800332a:	4669      	mov	r1, sp
 800332c:	7308      	strb	r0, [r1, #12]
 800332e:	0020      	movs	r0, r4
 8003330:	f7fd fb11 	bl	8000956 <PE_Clear_RxEvent>
 8003334:	8be0      	ldrh	r0, [r4, #30]
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	0209      	lsls	r1, r1, #8
 800333a:	4288      	cmp	r0, r1
 800333c:	d1c4      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 800333e:	e24c      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003340:	6860      	ldr	r0, [r4, #4]
 8003342:	7800      	ldrb	r0, [r0, #0]
 8003344:	0780      	lsls	r0, r0, #30
 8003346:	0f80      	lsrs	r0, r0, #30
 8003348:	2802      	cmp	r0, #2
 800334a:	d102      	bne.n	8003352 <__iar_annotation$$branch+0x492>
 800334c:	7c20      	ldrb	r0, [r4, #16]
 800334e:	f002 fa0a 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003352:	2105      	movs	r1, #5
 8003354:	0020      	movs	r0, r4
 8003356:	f7fd fa99 	bl	800088c <PE_Send_RESET>
 800335a:	6860      	ldr	r0, [r4, #4]
 800335c:	6801      	ldr	r1, [r0, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	4391      	bics	r1, r2
 8003362:	6001      	str	r1, [r0, #0]
 8003364:	78b0      	ldrb	r0, [r6, #2]
 8003366:	1c40      	adds	r0, r0, #1
 8003368:	70b0      	strb	r0, [r6, #2]
 800336a:	6961      	ldr	r1, [r4, #20]
 800336c:	4834      	ldr	r0, [pc, #208]	; (8003440 <__iar_annotation$$branch+0x580>)
 800336e:	4008      	ands	r0, r1
 8003370:	6160      	str	r0, [r4, #20]
 8003372:	2100      	movs	r1, #0
 8003374:	2232      	movs	r2, #50	; 0x32
 8003376:	54a1      	strb	r1, [r4, r2]
 8003378:	4932      	ldr	r1, [pc, #200]	; (8003444 <__iar_annotation$$branch+0x584>)
 800337a:	4001      	ands	r1, r0
 800337c:	6161      	str	r1, [r4, #20]
 800337e:	2202      	movs	r2, #2
 8003380:	2101      	movs	r1, #1
 8003382:	0020      	movs	r0, r4
 8003384:	f7fe f806 	bl	8001394 <PE_CallHardResetCallback>
 8003388:	2169      	movs	r1, #105	; 0x69
 800338a:	4668      	mov	r0, sp
 800338c:	7b40      	ldrb	r0, [r0, #13]
 800338e:	f7fd f877 	bl	8000480 <USBPD_PE_Notification>
 8003392:	83e7      	strh	r7, [r4, #30]
 8003394:	251b      	movs	r5, #27
 8003396:	2015      	movs	r0, #21
 8003398:	e61b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 800339a:	6860      	ldr	r0, [r4, #4]
 800339c:	7800      	ldrb	r0, [r0, #0]
 800339e:	0780      	lsls	r0, r0, #30
 80033a0:	0f80      	lsrs	r0, r0, #30
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d1f0      	bne.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033a6:	7c20      	ldrb	r0, [r4, #16]
 80033a8:	f002 f9dd 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 80033ac:	e7ec      	b.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033ae:	8be0      	ldrh	r0, [r4, #30]
 80033b0:	03a9      	lsls	r1, r5, #14
 80033b2:	4288      	cmp	r0, r1
 80033b4:	d11a      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 80033b6:	6960      	ldr	r0, [r4, #20]
 80033b8:	78b1      	ldrb	r1, [r6, #2]
 80033ba:	2903      	cmp	r1, #3
 80033bc:	d303      	bcc.n	80033c6 <__iar_annotation$$branch+0x506>
 80033be:	0741      	lsls	r1, r0, #29
 80033c0:	0fc9      	lsrs	r1, r1, #31
 80033c2:	d130      	bne.n	8003426 <__iar_annotation$$branch+0x566>
 80033c4:	e66d      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 80033c6:	4920      	ldr	r1, [pc, #128]	; (8003448 <__iar_annotation$$branch+0x588>)
 80033c8:	83e1      	strh	r1, [r4, #30]
 80033ca:	2117      	movs	r1, #23
 80033cc:	7461      	strb	r1, [r4, #17]
 80033ce:	2500      	movs	r5, #0
 80033d0:	0540      	lsls	r0, r0, #21
 80033d2:	0f80      	lsrs	r0, r0, #30
 80033d4:	1e42      	subs	r2, r0, #1
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	0fd2      	lsrs	r2, r2, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	0020      	movs	r0, r4
 80033de:	f7fd ffd9 	bl	8001394 <PE_CallHardResetCallback>
 80033e2:	2203      	movs	r2, #3
 80033e4:	2101      	movs	r1, #1
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7fd ffd4 	bl	8001394 <PE_CallHardResetCallback>
 80033ec:	e539      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80033ee:	2100      	movs	r1, #0
 80033f0:	4668      	mov	r0, sp
 80033f2:	7b40      	ldrb	r0, [r0, #13]
 80033f4:	68a2      	ldr	r2, [r4, #8]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033f8:	4790      	blx	r2
 80033fa:	2801      	cmp	r0, #1
 80033fc:	d105      	bne.n	800340a <__iar_annotation$$branch+0x54a>
 80033fe:	4813      	ldr	r0, [pc, #76]	; (800344c <__iar_annotation$$branch+0x58c>)
 8003400:	83e0      	strh	r0, [r4, #30]
 8003402:	25c8      	movs	r5, #200	; 0xc8
 8003404:	00ad      	lsls	r5, r5, #2
 8003406:	2013      	movs	r0, #19
 8003408:	7460      	strb	r0, [r4, #17]
 800340a:	8be0      	ldrh	r0, [r4, #30]
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	0209      	lsls	r1, r1, #8
 8003410:	4288      	cmp	r0, r1
 8003412:	d1eb      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 8003414:	2206      	movs	r2, #6
 8003416:	2101      	movs	r1, #1
 8003418:	0020      	movs	r0, r4
 800341a:	f7fd ffbb 	bl	8001394 <PE_CallHardResetCallback>
 800341e:	6960      	ldr	r0, [r4, #20]
 8003420:	0741      	lsls	r1, r0, #29
 8003422:	0fc9      	lsrs	r1, r1, #31
 8003424:	d003      	beq.n	800342e <__iar_annotation$$branch+0x56e>
 8003426:	68a0      	ldr	r0, [r4, #8]
 8003428:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800342a:	2800      	cmp	r0, #0
 800342c:	d137      	bne.n	800349e <__iar_annotation$$branch+0x5de>
 800342e:	e638      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003430:	0000801e 	.word	0x0000801e
 8003434:	0000b6b0 	.word	0x0000b6b0
 8003438:	00008226 	.word	0x00008226
 800343c:	00000226 	.word	0x00000226
 8003440:	fffff9ff 	.word	0xfffff9ff
 8003444:	fffffe3f 	.word	0xfffffe3f
 8003448:	0000828a 	.word	0x0000828a
 800344c:	00008320 	.word	0x00008320
 8003450:	8be0      	ldrh	r0, [r4, #30]
 8003452:	03a9      	lsls	r1, r5, #14
 8003454:	4288      	cmp	r0, r1
 8003456:	d126      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 8003458:	2204      	movs	r2, #4
 800345a:	2101      	movs	r1, #1
 800345c:	0020      	movs	r0, r4
 800345e:	f7fd ff99 	bl	8001394 <PE_CallHardResetCallback>
 8003462:	2101      	movs	r1, #1
 8003464:	4668      	mov	r0, sp
 8003466:	7b40      	ldrb	r0, [r0, #13]
 8003468:	68a2      	ldr	r2, [r4, #8]
 800346a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800346c:	4790      	blx	r2
 800346e:	2801      	cmp	r0, #1
 8003470:	d10d      	bne.n	800348e <__iar_annotation$$branch+0x5ce>
 8003472:	0020      	movs	r0, r4
 8003474:	f7fd fb1d 	bl	8000ab2 <PE_Reset_HardReset>
 8003478:	2168      	movs	r1, #104	; 0x68
 800347a:	4668      	mov	r0, sp
 800347c:	7b40      	ldrb	r0, [r0, #13]
 800347e:	f7fc ffff 	bl	8000480 <USBPD_PE_Notification>
 8003482:	2205      	movs	r2, #5
 8003484:	2101      	movs	r1, #1
 8003486:	0020      	movs	r0, r4
 8003488:	f7fd ff84 	bl	8001394 <PE_CallHardResetCallback>
 800348c:	e633      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 800348e:	2206      	movs	r2, #6
 8003490:	2101      	movs	r1, #1
 8003492:	0020      	movs	r0, r4
 8003494:	f7fd ff7e 	bl	8001394 <PE_CallHardResetCallback>
 8003498:	68a0      	ldr	r0, [r4, #8]
 800349a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800349c:	2800      	cmp	r0, #0
 800349e:	d000      	beq.n	80034a2 <__iar_annotation$$branch+0x5e2>
 80034a0:	e2d6      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80034a2:	2500      	movs	r5, #0
 80034a4:	7465      	strb	r5, [r4, #17]
 80034a6:	e4dc      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80034a8:	2001      	movs	r0, #1
 80034aa:	9000      	str	r0, [sp, #0]
 80034ac:	231b      	movs	r3, #27
 80034ae:	2207      	movs	r2, #7
 80034b0:	2100      	movs	r1, #0
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7fe f82c 	bl	8001510 <PE_Send_CtrlMessage>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f4      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 80034bc:	2006      	movs	r0, #6
 80034be:	7720      	strb	r0, [r4, #28]
 80034c0:	83e7      	strh	r7, [r4, #30]
 80034c2:	251b      	movs	r5, #27
 80034c4:	210b      	movs	r1, #11
 80034c6:	e5c5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80034c8:	4668      	mov	r0, sp
 80034ca:	7b00      	ldrb	r0, [r0, #12]
 80034cc:	2811      	cmp	r0, #17
 80034ce:	d13e      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 80034d0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80034d2:	0bc1      	lsrs	r1, r0, #15
 80034d4:	d11f      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034d6:	0441      	lsls	r1, r0, #17
 80034d8:	0f49      	lsrs	r1, r1, #29
 80034da:	d01c      	beq.n	8003516 <__iar_annotation$$branch+0x656>
 80034dc:	06c0      	lsls	r0, r0, #27
 80034de:	0ec0      	lsrs	r0, r0, #27
 80034e0:	2801      	cmp	r0, #1
 80034e2:	d118      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034e4:	008b      	lsls	r3, r1, #2
 80034e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80034e8:	1c82      	adds	r2, r0, #2
 80034ea:	2104      	movs	r1, #4
 80034ec:	7c20      	ldrb	r0, [r4, #16]
 80034ee:	68a5      	ldr	r5, [r4, #8]
 80034f0:	69ad      	ldr	r5, [r5, #24]
 80034f2:	47a8      	blx	r5
 80034f4:	2003      	movs	r0, #3
 80034f6:	7460      	strb	r0, [r4, #17]
 80034f8:	2500      	movs	r5, #0
 80034fa:	4668      	mov	r0, sp
 80034fc:	7b00      	ldrb	r0, [r0, #12]
 80034fe:	2814      	cmp	r0, #20
 8003500:	d005      	beq.n	800350e <__iar_annotation$$branch+0x64e>
 8003502:	2014      	movs	r0, #20
 8003504:	4669      	mov	r1, sp
 8003506:	7308      	strb	r0, [r1, #12]
 8003508:	0020      	movs	r0, r4
 800350a:	f7fd fa24 	bl	8000956 <PE_Clear_RxEvent>
 800350e:	210d      	movs	r1, #13
 8003510:	7c20      	ldrb	r0, [r4, #16]
 8003512:	f7fc ffb5 	bl	8000480 <USBPD_PE_Notification>
 8003516:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003518:	21f0      	movs	r1, #240	; 0xf0
 800351a:	0209      	lsls	r1, r1, #8
 800351c:	4001      	ands	r1, r0
 800351e:	d116      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 8003520:	06c0      	lsls	r0, r0, #27
 8003522:	0ec0      	lsrs	r0, r0, #27
 8003524:	2804      	cmp	r0, #4
 8003526:	d001      	beq.n	800352c <__iar_annotation$$branch+0x66c>
 8003528:	2810      	cmp	r0, #16
 800352a:	d110      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 800352c:	2003      	movs	r0, #3
 800352e:	7460      	strb	r0, [r4, #17]
 8003530:	2500      	movs	r5, #0
 8003532:	4668      	mov	r0, sp
 8003534:	7b00      	ldrb	r0, [r0, #12]
 8003536:	2814      	cmp	r0, #20
 8003538:	d005      	beq.n	8003546 <__iar_annotation$$branch+0x686>
 800353a:	2014      	movs	r0, #20
 800353c:	4669      	mov	r1, sp
 800353e:	7308      	strb	r0, [r1, #12]
 8003540:	0020      	movs	r0, r4
 8003542:	f7fd fa08 	bl	8000956 <PE_Clear_RxEvent>
 8003546:	210e      	movs	r1, #14
 8003548:	7c20      	ldrb	r0, [r4, #16]
 800354a:	f7fc ff99 	bl	8000480 <USBPD_PE_Notification>
 800354e:	8be0      	ldrh	r0, [r4, #30]
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0209      	lsls	r1, r1, #8
 8003554:	4288      	cmp	r0, r1
 8003556:	d11f      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003558:	2003      	movs	r0, #3
 800355a:	e55f      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800355c:	68a0      	ldr	r0, [r4, #8]
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	2900      	cmp	r1, #0
 8003562:	d01f      	beq.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003564:	7c20      	ldrb	r0, [r4, #16]
 8003566:	4788      	blx	r1
 8003568:	280a      	cmp	r0, #10
 800356a:	d002      	beq.n	8003572 <__iar_annotation$$branch+0x6b2>
 800356c:	280d      	cmp	r0, #13
 800356e:	d014      	beq.n	800359a <__iar_annotation$$branch+0x6da>
 8003570:	e018      	b.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003572:	1cf8      	adds	r0, r7, #3
 8003574:	83e0      	strh	r0, [r4, #30]
 8003576:	251e      	movs	r5, #30
 8003578:	2000      	movs	r0, #0
 800357a:	9000      	str	r0, [sp, #0]
 800357c:	2324      	movs	r3, #36	; 0x24
 800357e:	2203      	movs	r2, #3
 8003580:	2100      	movs	r1, #0
 8003582:	0020      	movs	r0, r4
 8003584:	f7fd ffc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003588:	2800      	cmp	r0, #0
 800358a:	d105      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 800358c:	2201      	movs	r2, #1
 800358e:	2101      	movs	r1, #1
 8003590:	7c20      	ldrb	r0, [r4, #16]
 8003592:	68a3      	ldr	r3, [r4, #8]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	4798      	blx	r3
 8003598:	e463      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800359a:	2000      	movs	r0, #0
 800359c:	9000      	str	r0, [sp, #0]
 800359e:	2303      	movs	r3, #3
 80035a0:	220c      	movs	r2, #12
 80035a2:	e68d      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035a4:	2000      	movs	r0, #0
 80035a6:	9000      	str	r0, [sp, #0]
 80035a8:	2303      	movs	r3, #3
 80035aa:	2204      	movs	r2, #4
 80035ac:	e688      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035ae:	8be0      	ldrh	r0, [r4, #30]
 80035b0:	03a9      	lsls	r1, r5, #14
 80035b2:	4288      	cmp	r0, r1
 80035b4:	d1f0      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035b6:	2104      	movs	r1, #4
 80035b8:	0020      	movs	r0, r4
 80035ba:	f7fd fef4 	bl	80013a6 <PE_SetPowerNegotiation>
 80035be:	6860      	ldr	r0, [r4, #4]
 80035c0:	6801      	ldr	r1, [r0, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	430a      	orrs	r2, r1
 80035c6:	6002      	str	r2, [r0, #0]
 80035c8:	2206      	movs	r2, #6
 80035ca:	2101      	movs	r1, #1
 80035cc:	7c20      	ldrb	r0, [r4, #16]
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	4798      	blx	r3
 80035d4:	2207      	movs	r2, #7
 80035d6:	2101      	movs	r1, #1
 80035d8:	7c20      	ldrb	r0, [r4, #16]
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	4798      	blx	r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	7c20      	ldrb	r0, [r4, #16]
 80035e4:	f002 f889 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80035e8:	2000      	movs	r0, #0
 80035ea:	9000      	str	r0, [sp, #0]
 80035ec:	2325      	movs	r3, #37	; 0x25
 80035ee:	2206      	movs	r2, #6
 80035f0:	2100      	movs	r1, #0
 80035f2:	0020      	movs	r0, r4
 80035f4:	f7fd ff8c 	bl	8001510 <PE_Send_CtrlMessage>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d1cd      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035fc:	e0c9      	b.n	8003792 <__iar_annotation$$branch+0x8d2>
 80035fe:	4668      	mov	r0, sp
 8003600:	7b00      	ldrb	r0, [r0, #12]
 8003602:	2811      	cmp	r0, #17
 8003604:	d10b      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 8003606:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003608:	4001      	ands	r1, r0
 800360a:	2906      	cmp	r1, #6
 800360c:	d107      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 800360e:	2014      	movs	r0, #20
 8003610:	4669      	mov	r1, sp
 8003612:	7308      	strb	r0, [r1, #12]
 8003614:	0020      	movs	r0, r4
 8003616:	f7fd f99e 	bl	8000956 <PE_Clear_RxEvent>
 800361a:	2026      	movs	r0, #38	; 0x26
 800361c:	7460      	strb	r0, [r4, #17]
 800361e:	8be0      	ldrh	r0, [r4, #30]
 8003620:	03a9      	lsls	r1, r5, #14
 8003622:	4288      	cmp	r0, r1
 8003624:	d1b8      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800362a:	2800      	cmp	r0, #0
 800362c:	d000      	beq.n	8003630 <__iar_annotation$$branch+0x770>
 800362e:	e20f      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 8003630:	220a      	movs	r2, #10
 8003632:	2101      	movs	r1, #1
 8003634:	7c20      	ldrb	r0, [r4, #16]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	4798      	blx	r3
 800363a:	e0ce      	b.n	80037da <__iar_annotation$$branch+0x91a>
 800363c:	2100      	movs	r1, #0
 800363e:	0020      	movs	r0, r4
 8003640:	f7fd f944 	bl	80008cc <PE_ChangePowerRole>
 8003644:	220d      	movs	r2, #13
 8003646:	2100      	movs	r1, #0
 8003648:	7c20      	ldrb	r0, [r4, #16]
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	4798      	blx	r3
 8003650:	2114      	movs	r1, #20
 8003652:	7c20      	ldrb	r0, [r4, #16]
 8003654:	f7fc ff14 	bl	8000480 <USBPD_PE_Notification>
 8003658:	220e      	movs	r2, #14
 800365a:	2100      	movs	r1, #0
 800365c:	7c20      	ldrb	r0, [r4, #16]
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	4798      	blx	r3
 8003664:	6860      	ldr	r0, [r4, #4]
 8003666:	7800      	ldrb	r0, [r0, #0]
 8003668:	0780      	lsls	r0, r0, #30
 800366a:	0f80      	lsrs	r0, r0, #30
 800366c:	2801      	cmp	r0, #1
 800366e:	d104      	bne.n	800367a <__iar_annotation$$branch+0x7ba>
 8003670:	2101      	movs	r1, #1
 8003672:	4668      	mov	r0, sp
 8003674:	7b40      	ldrb	r0, [r0, #13]
 8003676:	f002 f895 	bl	80057a4 <USBPD_PRL_SOPCapability>
 800367a:	0020      	movs	r0, r4
 800367c:	f7fd fa90 	bl	8000ba0 <PE_Reset_StateMachine>
 8003680:	e4cd      	b.n	800301e <__iar_annotation$$branch+0x15e>
 8003682:	2001      	movs	r0, #1
 8003684:	9000      	str	r0, [sp, #0]
 8003686:	231f      	movs	r3, #31
 8003688:	220a      	movs	r2, #10
 800368a:	2100      	movs	r1, #0
 800368c:	0020      	movs	r0, r4
 800368e:	f7fd ff3f 	bl	8001510 <PE_Send_CtrlMessage>
 8003692:	2800      	cmp	r0, #0
 8003694:	d1c6      	bne.n	8003624 <__iar_annotation$$branch+0x764>
 8003696:	2008      	movs	r0, #8
 8003698:	7720      	strb	r0, [r4, #28]
 800369a:	83e7      	strh	r7, [r4, #30]
 800369c:	251b      	movs	r5, #27
 800369e:	2202      	movs	r2, #2
 80036a0:	2101      	movs	r1, #1
 80036a2:	7c20      	ldrb	r0, [r4, #16]
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	4798      	blx	r3
 80036aa:	2139      	movs	r1, #57	; 0x39
 80036ac:	e4d2      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80036ae:	4668      	mov	r0, sp
 80036b0:	7b00      	ldrb	r0, [r0, #12]
 80036b2:	2811      	cmp	r0, #17
 80036b4:	d145      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036b6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80036b8:	391f      	subs	r1, #31
 80036ba:	4001      	ands	r1, r0
 80036bc:	d141      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036be:	06c0      	lsls	r0, r0, #27
 80036c0:	0ec0      	lsrs	r0, r0, #27
 80036c2:	2803      	cmp	r0, #3
 80036c4:	d006      	beq.n	80036d4 <__iar_annotation$$branch+0x814>
 80036c6:	2804      	cmp	r0, #4
 80036c8:	d012      	beq.n	80036f0 <__iar_annotation$$branch+0x830>
 80036ca:	280c      	cmp	r0, #12
 80036cc:	d008      	beq.n	80036e0 <__iar_annotation$$branch+0x820>
 80036ce:	2810      	cmp	r0, #16
 80036d0:	d020      	beq.n	8003714 <__iar_annotation$$branch+0x854>
 80036d2:	e036      	b.n	8003742 <__iar_annotation$$branch+0x882>
 80036d4:	213a      	movs	r1, #58	; 0x3a
 80036d6:	7c20      	ldrb	r0, [r4, #16]
 80036d8:	f7fc fed2 	bl	8000480 <USBPD_PE_Notification>
 80036dc:	2020      	movs	r0, #32
 80036de:	e012      	b.n	8003706 <__iar_annotation$$branch+0x846>
 80036e0:	2205      	movs	r2, #5
 80036e2:	2101      	movs	r1, #1
 80036e4:	7c20      	ldrb	r0, [r4, #16]
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	4798      	blx	r3
 80036ec:	213b      	movs	r1, #59	; 0x3b
 80036ee:	e006      	b.n	80036fe <__iar_annotation$$branch+0x83e>
 80036f0:	2204      	movs	r2, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	7c20      	ldrb	r0, [r4, #16]
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	4798      	blx	r3
 80036fc:	2116      	movs	r1, #22
 80036fe:	7c20      	ldrb	r0, [r4, #16]
 8003700:	f7fc febe 	bl	8000480 <USBPD_PE_Notification>
 8003704:	2003      	movs	r0, #3
 8003706:	7460      	strb	r0, [r4, #17]
 8003708:	2500      	movs	r5, #0
 800370a:	4668      	mov	r0, sp
 800370c:	7b00      	ldrb	r0, [r0, #12]
 800370e:	2814      	cmp	r0, #20
 8003710:	d111      	bne.n	8003736 <__iar_annotation$$branch+0x876>
 8003712:	e016      	b.n	8003742 <__iar_annotation$$branch+0x882>
 8003714:	2204      	movs	r2, #4
 8003716:	2101      	movs	r1, #1
 8003718:	7c20      	ldrb	r0, [r4, #16]
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	4798      	blx	r3
 8003720:	2117      	movs	r1, #23
 8003722:	7c20      	ldrb	r0, [r4, #16]
 8003724:	f7fc feac 	bl	8000480 <USBPD_PE_Notification>
 8003728:	2003      	movs	r0, #3
 800372a:	7460      	strb	r0, [r4, #17]
 800372c:	2500      	movs	r5, #0
 800372e:	4668      	mov	r0, sp
 8003730:	7b00      	ldrb	r0, [r0, #12]
 8003732:	2814      	cmp	r0, #20
 8003734:	d005      	beq.n	8003742 <__iar_annotation$$branch+0x882>
 8003736:	2014      	movs	r0, #20
 8003738:	4669      	mov	r1, sp
 800373a:	7308      	strb	r0, [r1, #12]
 800373c:	0020      	movs	r0, r4
 800373e:	f7fd f90a 	bl	8000956 <PE_Clear_RxEvent>
 8003742:	8be0      	ldrh	r0, [r4, #30]
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0209      	lsls	r1, r1, #8
 8003748:	4288      	cmp	r0, r1
 800374a:	d12c      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 800374c:	e704      	b.n	8003558 <__iar_annotation$$branch+0x698>
 800374e:	6860      	ldr	r0, [r4, #4]
 8003750:	6801      	ldr	r1, [r0, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	430a      	orrs	r2, r1
 8003756:	6002      	str	r2, [r0, #0]
 8003758:	7f20      	ldrb	r0, [r4, #28]
 800375a:	2809      	cmp	r0, #9
 800375c:	d005      	beq.n	800376a <__iar_annotation$$branch+0x8aa>
 800375e:	2206      	movs	r2, #6
 8003760:	2101      	movs	r1, #1
 8003762:	7c20      	ldrb	r0, [r4, #16]
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	4798      	blx	r3
 800376a:	2207      	movs	r2, #7
 800376c:	2101      	movs	r1, #1
 800376e:	7c20      	ldrb	r0, [r4, #16]
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	4798      	blx	r3
 8003776:	2100      	movs	r1, #0
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f001 ffbe 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 800377e:	2000      	movs	r0, #0
 8003780:	9000      	str	r0, [sp, #0]
 8003782:	2321      	movs	r3, #33	; 0x21
 8003784:	2206      	movs	r2, #6
 8003786:	2100      	movs	r1, #0
 8003788:	0020      	movs	r0, r4
 800378a:	f7fd fec1 	bl	8001510 <PE_Send_CtrlMessage>
 800378e:	2800      	cmp	r0, #0
 8003790:	d109      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 8003792:	2208      	movs	r2, #8
 8003794:	2101      	movs	r1, #1
 8003796:	7c20      	ldrb	r0, [r4, #16]
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	4798      	blx	r3
 800379e:	48c5      	ldr	r0, [pc, #788]	; (8003ab4 <.text_3>)
 80037a0:	83e0      	strh	r0, [r4, #30]
 80037a2:	25eb      	movs	r5, #235	; 0xeb
 80037a4:	006d      	lsls	r5, r5, #1
 80037a6:	e6f7      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80037a8:	4668      	mov	r0, sp
 80037aa:	7b00      	ldrb	r0, [r0, #12]
 80037ac:	2811      	cmp	r0, #17
 80037ae:	d10b      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80037b2:	4001      	ands	r1, r0
 80037b4:	2906      	cmp	r1, #6
 80037b6:	d107      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b8:	2026      	movs	r0, #38	; 0x26
 80037ba:	7460      	strb	r0, [r4, #17]
 80037bc:	2014      	movs	r0, #20
 80037be:	4669      	mov	r1, sp
 80037c0:	7308      	strb	r0, [r1, #12]
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fd f8c7 	bl	8000956 <PE_Clear_RxEvent>
 80037c8:	8be0      	ldrh	r0, [r4, #30]
 80037ca:	03a9      	lsls	r1, r5, #14
 80037cc:	4288      	cmp	r0, r1
 80037ce:	d1ea      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037d0:	68a0      	ldr	r0, [r4, #8]
 80037d2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d000      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80037d8:	e13a      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80037da:	200f      	movs	r0, #15
 80037dc:	e6bd      	b.n	800355a <__iar_annotation$$branch+0x69a>
 80037de:	8be0      	ldrh	r0, [r4, #30]
 80037e0:	03a9      	lsls	r1, r5, #14
 80037e2:	4288      	cmp	r0, r1
 80037e4:	d1df      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037e6:	220e      	movs	r2, #14
 80037e8:	2101      	movs	r1, #1
 80037ea:	7c20      	ldrb	r0, [r4, #16]
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	4798      	blx	r3
 80037f2:	6860      	ldr	r0, [r4, #4]
 80037f4:	7800      	ldrb	r0, [r0, #0]
 80037f6:	0780      	lsls	r0, r0, #30
 80037f8:	0f80      	lsrs	r0, r0, #30
 80037fa:	2802      	cmp	r0, #2
 80037fc:	d102      	bne.n	8003804 <__iar_annotation$$branch+0x944>
 80037fe:	7c20      	ldrb	r0, [r4, #16]
 8003800:	f001 ffb1 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003804:	0020      	movs	r0, r4
 8003806:	f7fd f9cb 	bl	8000ba0 <PE_Reset_StateMachine>
 800380a:	2115      	movs	r1, #21
 800380c:	e74e      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 800380e:	2803      	cmp	r0, #3
 8003810:	d110      	bne.n	8003834 <__iar_annotation$$branch+0x974>
 8003812:	2000      	movs	r0, #0
 8003814:	7720      	strb	r0, [r4, #28]
 8003816:	6860      	ldr	r0, [r4, #4]
 8003818:	7800      	ldrb	r0, [r0, #0]
 800381a:	0780      	lsls	r0, r0, #30
 800381c:	0f80      	lsrs	r0, r0, #30
 800381e:	2802      	cmp	r0, #2
 8003820:	d102      	bne.n	8003828 <__iar_annotation$$branch+0x968>
 8003822:	7c20      	ldrb	r0, [r4, #16]
 8003824:	f001 ff9f 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003828:	2004      	movs	r0, #4
 800382a:	7460      	strb	r0, [r4, #17]
 800382c:	2167      	movs	r1, #103	; 0x67
 800382e:	7c20      	ldrb	r0, [r4, #16]
 8003830:	f7fc fe26 	bl	8000480 <USBPD_PE_Notification>
 8003834:	4668      	mov	r0, sp
 8003836:	7b00      	ldrb	r0, [r0, #12]
 8003838:	2814      	cmp	r0, #20
 800383a:	d00d      	beq.n	8003858 <__iar_annotation$$branch+0x998>
 800383c:	0020      	movs	r0, r4
 800383e:	f7fe f917 	bl	8001a70 <PE_ManageRXEvent>
 8003842:	4668      	mov	r0, sp
 8003844:	7b00      	ldrb	r0, [r0, #12]
 8003846:	2814      	cmp	r0, #20
 8003848:	d005      	beq.n	8003856 <__iar_annotation$$branch+0x996>
 800384a:	2014      	movs	r0, #20
 800384c:	4669      	mov	r1, sp
 800384e:	7308      	strb	r0, [r1, #12]
 8003850:	0020      	movs	r0, r4
 8003852:	f7fd f880 	bl	8000956 <PE_Clear_RxEvent>
 8003856:	e69f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003858:	6960      	ldr	r0, [r4, #20]
 800385a:	0cc0      	lsrs	r0, r0, #19
 800385c:	03ad      	lsls	r5, r5, #14
 800385e:	2800      	cmp	r0, #0
 8003860:	d01e      	beq.n	80038a0 <__iar_annotation$$branch+0x9e0>
 8003862:	8c21      	ldrh	r1, [r4, #32]
 8003864:	42a9      	cmp	r1, r5
 8003866:	d10e      	bne.n	8003886 <__iar_annotation$$branch+0x9c6>
 8003868:	200f      	movs	r0, #15
 800386a:	7460      	strb	r0, [r4, #17]
 800386c:	2000      	movs	r0, #0
 800386e:	9000      	str	r0, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	2270      	movs	r2, #112	; 0x70
 8003874:	7c21      	ldrb	r1, [r4, #16]
 8003876:	2009      	movs	r0, #9
 8003878:	4da5      	ldr	r5, [pc, #660]	; (8003b10 <.text_5>)
 800387a:	682d      	ldr	r5, [r5, #0]
 800387c:	47a8      	blx	r5
 800387e:	78b0      	ldrb	r0, [r6, #2]
 8003880:	1c40      	adds	r0, r0, #1
 8003882:	70b0      	strb	r0, [r6, #2]
 8003884:	e6fc      	b.n	8003680 <__iar_annotation$$branch+0x7c0>
 8003886:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003888:	0509      	lsls	r1, r1, #20
 800388a:	0f49      	lsrs	r1, r1, #29
 800388c:	180a      	adds	r2, r1, r0
 800388e:	2333      	movs	r3, #51	; 0x33
 8003890:	435a      	muls	r2, r3
 8003892:	4315      	orrs	r5, r2
 8003894:	8425      	strh	r5, [r4, #32]
 8003896:	180d      	adds	r5, r1, r0
 8003898:	2033      	movs	r0, #51	; 0x33
 800389a:	4345      	muls	r5, r0
 800389c:	b2ad      	uxth	r5, r5
 800389e:	e67b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038a0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80038a2:	42a8      	cmp	r0, r5
 80038a4:	d099      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80038a6:	7c20      	ldrb	r0, [r4, #16]
 80038a8:	f7fd f87a 	bl	80009a0 <PE_PRL_Control_RxEvent>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d113      	bne.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b0:	2032      	movs	r0, #50	; 0x32
 80038b2:	5c20      	ldrb	r0, [r4, r0]
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d00f      	beq.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b8:	2133      	movs	r1, #51	; 0x33
 80038ba:	5c61      	ldrb	r1, [r4, r1]
 80038bc:	2231      	movs	r2, #49	; 0x31
 80038be:	54a1      	strb	r1, [r4, r2]
 80038c0:	7460      	strb	r0, [r4, #17]
 80038c2:	2500      	movs	r5, #0
 80038c4:	2132      	movs	r1, #50	; 0x32
 80038c6:	5465      	strb	r5, [r4, r1]
 80038c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038ca:	62e0      	str	r0, [r4, #44]	; 0x2c
 80038cc:	6960      	ldr	r0, [r4, #20]
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	01c9      	lsls	r1, r1, #7
 80038d2:	4301      	orrs	r1, r0
 80038d4:	6161      	str	r1, [r4, #20]
 80038d6:	e65f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038d8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80038da:	42a8      	cmp	r0, r5
 80038dc:	d104      	bne.n	80038e8 <__iar_annotation$$branch+0x4>
 80038de:	2500      	movs	r5, #0
 80038e0:	8465      	strh	r5, [r4, #34]	; 0x22
 80038e2:	7930      	ldrb	r0, [r6, #4]

080038e4 <__iar_annotation$$branch>:
 80038e4:	f7ff fb87 	bl	8002ff6 <__iar_annotation$$branch+0x136>
 80038e8:	0020      	movs	r0, r4
 80038ea:	f7fd fd83 	bl	80013f4 <PE_CalculateMinTiming>
 80038ee:	e080      	b.n	80039f2 <__iar_annotation$$branch>
 80038f0:	2000      	movs	r0, #0
 80038f2:	9002      	str	r0, [sp, #8]
 80038f4:	2003      	movs	r0, #3
 80038f6:	9001      	str	r0, [sp, #4]
 80038f8:	2001      	movs	r0, #1
 80038fa:	9000      	str	r0, [sp, #0]
 80038fc:	0023      	movs	r3, r4
 80038fe:	332c      	adds	r3, #44	; 0x2c
 8003900:	2206      	movs	r2, #6
 8003902:	2100      	movs	r1, #0
 8003904:	0020      	movs	r0, r4
 8003906:	f7fd fe2e 	bl	8001566 <PE_Send_DataMessage>
 800390a:	2800      	cmp	r0, #0
 800390c:	d1e3      	bne.n	80038d6 <__iar_annotation$$branch+0xa16>
 800390e:	215d      	movs	r1, #93	; 0x5d
 8003910:	e6cc      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003912:	2000      	movs	r0, #0
 8003914:	9004      	str	r0, [sp, #16]
 8003916:	ab04      	add	r3, sp, #16
 8003918:	aa05      	add	r2, sp, #20
 800391a:	210a      	movs	r1, #10
 800391c:	4668      	mov	r0, sp
 800391e:	7b40      	ldrb	r0, [r0, #13]
 8003920:	68a7      	ldr	r7, [r4, #8]
 8003922:	697f      	ldr	r7, [r7, #20]
 8003924:	47b8      	blx	r7
 8003926:	2104      	movs	r1, #4
 8003928:	9804      	ldr	r0, [sp, #16]
 800392a:	f7fd fd8f 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800392e:	2800      	cmp	r0, #0
 8003930:	d11f      	bne.n	8003972 <__iar_annotation$$branch+0x8e>
 8003932:	71f0      	strb	r0, [r6, #7]
 8003934:	7230      	strb	r0, [r6, #8]
 8003936:	7c20      	ldrb	r0, [r4, #16]
 8003938:	f7fd fa04 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800393c:	2800      	cmp	r0, #0
 800393e:	d103      	bne.n	8003948 <__iar_annotation$$branch+0x64>
 8003940:	7a30      	ldrb	r0, [r6, #8]
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	4301      	orrs	r1, r0
 8003946:	7231      	strb	r1, [r6, #8]
 8003948:	9a04      	ldr	r2, [sp, #16]
 800394a:	a905      	add	r1, sp, #20
 800394c:	4871      	ldr	r0, [pc, #452]	; (8003b14 <.text_6>)
 800394e:	1820      	adds	r0, r4, r0
 8003950:	f017 f9a6 	bl	801aca0 <__aeabi_memcpy>
 8003954:	2000      	movs	r0, #0
 8003956:	9002      	str	r0, [sp, #8]
 8003958:	2003      	movs	r0, #3
 800395a:	9001      	str	r0, [sp, #4]
 800395c:	2008      	movs	r0, #8
 800395e:	9000      	str	r0, [sp, #0]
 8003960:	486d      	ldr	r0, [pc, #436]	; (8003b18 <.text_7>)
 8003962:	1823      	adds	r3, r4, r0
 8003964:	220c      	movs	r2, #12
 8003966:	2100      	movs	r1, #0
 8003968:	0020      	movs	r0, r4
 800396a:	f7fd ff2f 	bl	80017cc <PE_Send_ExtendedMessage>
 800396e:	214c      	movs	r1, #76	; 0x4c
 8003970:	e69c      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003972:	2001      	movs	r0, #1
 8003974:	e510      	b.n	8003398 <__iar_annotation$$branch+0x4d8>
 8003976:	2001      	movs	r0, #1
 8003978:	9000      	str	r0, [sp, #0]
 800397a:	2339      	movs	r3, #57	; 0x39
 800397c:	7832      	ldrb	r2, [r6, #0]
 800397e:	2033      	movs	r0, #51	; 0x33
 8003980:	5c21      	ldrb	r1, [r4, r0]
 8003982:	0020      	movs	r0, r4
 8003984:	f7fd fdc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003988:	2800      	cmp	r0, #0
 800398a:	d144      	bne.n	8003a16 <__iar_annotation$$branch+0x24>
 800398c:	7870      	ldrb	r0, [r6, #1]
 800398e:	7720      	strb	r0, [r4, #28]
 8003990:	83e7      	strh	r7, [r4, #30]
 8003992:	251b      	movs	r5, #27
 8003994:	2144      	movs	r1, #68	; 0x44
 8003996:	e689      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003998:	8be0      	ldrh	r0, [r4, #30]
 800399a:	03a9      	lsls	r1, r5, #14
 800399c:	4288      	cmp	r0, r1
 800399e:	d104      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a0:	4668      	mov	r0, sp
 80039a2:	7b00      	ldrb	r0, [r0, #12]
 80039a4:	2814      	cmp	r0, #20
 80039a6:	d100      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a8:	e5d6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039aa:	4668      	mov	r0, sp
 80039ac:	7b00      	ldrb	r0, [r0, #12]
 80039ae:	2814      	cmp	r0, #20
 80039b0:	d031      	beq.n	8003a16 <__iar_annotation$$branch+0x24>
 80039b2:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80039b4:	0bc1      	lsrs	r1, r0, #15
 80039b6:	d003      	beq.n	80039c0 <__iar_annotation$$branch+0xdc>
 80039b8:	0020      	movs	r0, r4
 80039ba:	f7fd fe11 	bl	80015e0 <PE_Check_ExtendedMessage>
 80039be:	e740      	b.n	8003842 <__iar_annotation$$branch+0x982>
 80039c0:	06c0      	lsls	r0, r0, #27
 80039c2:	0ec0      	lsrs	r0, r0, #27
 80039c4:	2810      	cmp	r0, #16
 80039c6:	d000      	beq.n	80039ca <__iar_annotation$$branch+0xe6>
 80039c8:	e5c6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039ca:	2014      	movs	r0, #20
 80039cc:	4669      	mov	r1, sp
 80039ce:	7308      	strb	r0, [r1, #12]
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc ffc0 	bl	8000956 <PE_Clear_RxEvent>
 80039d6:	2500      	movs	r5, #0
 80039d8:	83e5      	strh	r5, [r4, #30]
 80039da:	2003      	movs	r0, #3
 80039dc:	7460      	strb	r0, [r4, #17]
 80039de:	2159      	movs	r1, #89	; 0x59
 80039e0:	e664      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 80039e2:	0020      	movs	r0, r4
 80039e4:	f7fd ff1e 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80039e8:	e003      	b.n	80039f2 <__iar_annotation$$branch>
 80039ea:	a903      	add	r1, sp, #12
 80039ec:	0020      	movs	r0, r4
 80039ee:	f7fd f9bb 	bl	8000d68 <PE_SubStateMachine_Generic>

080039f2 <__iar_annotation$$branch>:
 80039f2:	f7ff fa35 	bl	8002e60 <__iar_annotation$$branch+0xc>
 80039f6:	a903      	add	r1, sp, #12
 80039f8:	0020      	movs	r0, r4
 80039fa:	f000 f9d5 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80039fe:	0005      	movs	r5, r0
 8003a00:	6860      	ldr	r0, [r4, #4]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	0401      	lsls	r1, r0, #16
 8003a06:	0fc9      	lsrs	r1, r1, #31
 8003a08:	d006      	beq.n	8003a18 <__iar_annotation$$branch+0x26>
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	6801      	ldr	r1, [r0, #0]
 8003a0e:	4668      	mov	r0, sp
 8003a10:	7b40      	ldrb	r0, [r0, #13]
 8003a12:	f001 fec7 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8003a16:	e5bf      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a18:	2101      	movs	r1, #1
 8003a1a:	e7f8      	b.n	8003a0e <__iar_annotation$$branch+0x1c>
 8003a1c:	4668      	mov	r0, sp
 8003a1e:	7b00      	ldrb	r0, [r0, #12]
 8003a20:	2811      	cmp	r0, #17
 8003a22:	d111      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a24:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003a26:	4001      	ands	r1, r0
 8003a28:	2913      	cmp	r1, #19
 8003a2a:	d10d      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a2c:	2014      	movs	r0, #20
 8003a2e:	4669      	mov	r1, sp
 8003a30:	7308      	strb	r0, [r1, #12]
 8003a32:	0020      	movs	r0, r4
 8003a34:	f7fc ff8f 	bl	8000956 <PE_Clear_RxEvent>
 8003a38:	2000      	movs	r0, #0
 8003a3a:	9000      	str	r0, [sp, #0]
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	2203      	movs	r2, #3
 8003a40:	2100      	movs	r1, #0
 8003a42:	0020      	movs	r0, r4
 8003a44:	f7fd fd64 	bl	8001510 <PE_Send_CtrlMessage>
 8003a48:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003a4a:	03a9      	lsls	r1, r5, #14
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	d106      	bne.n	8003a5e <__iar_annotation$$branch+0x6c>
 8003a50:	2092      	movs	r0, #146	; 0x92
 8003a52:	e582      	b.n	800355a <__iar_annotation$$branch+0x69a>
 8003a54:	4668      	mov	r0, sp
 8003a56:	7b01      	ldrb	r1, [r0, #12]
 8003a58:	0020      	movs	r0, r4
 8003a5a:	f001 fc05 	bl	8005268 <PE_StateMachine_UVDM>
 8003a5e:	e59b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a60:	6960      	ldr	r0, [r4, #20]
 8003a62:	2701      	movs	r7, #1
 8003a64:	0b41      	lsrs	r1, r0, #13
 8003a66:	4039      	ands	r1, r7
 8003a68:	d019      	beq.n	8003a9e <__iar_annotation$$branch+0xac>
 8003a6a:	0b80      	lsrs	r0, r0, #14
 8003a6c:	4038      	ands	r0, r7
 8003a6e:	d007      	beq.n	8003a80 <__iar_annotation$$branch+0x8e>
 8003a70:	215b      	movs	r1, #91	; 0x5b
 8003a72:	7c20      	ldrb	r0, [r4, #16]
 8003a74:	f7fc fd04 	bl	8000480 <USBPD_PE_Notification>
 8003a78:	6960      	ldr	r0, [r4, #20]
 8003a7a:	4928      	ldr	r1, [pc, #160]	; (8003b1c <.text_8>)
 8003a7c:	4001      	ands	r1, r0
 8003a7e:	6161      	str	r1, [r4, #20]
 8003a80:	2003      	movs	r0, #3
 8003a82:	7460      	strb	r0, [r4, #17]
 8003a84:	7ca1      	ldrb	r1, [r4, #18]
 8003a86:	2903      	cmp	r1, #3
 8003a88:	d008      	beq.n	8003a9c <__iar_annotation$$branch+0xaa>
 8003a8a:	74a0      	strb	r0, [r4, #18]
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	2203      	movs	r2, #3
 8003a94:	7c21      	ldrb	r1, [r4, #16]
 8003a96:	2004      	movs	r0, #4
 8003a98:	6835      	ldr	r5, [r6, #0]
 8003a9a:	47a8      	blx	r5
 8003a9c:	2501      	movs	r5, #1
 8003a9e:	6960      	ldr	r0, [r4, #20]
 8003aa0:	491f      	ldr	r1, [pc, #124]	; (8003b20 <.text_9>)
 8003aa2:	4001      	ands	r1, r0
 8003aa4:	6161      	str	r1, [r4, #20]
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	d101      	bne.n	8003aae <__iar_annotation$$branch>

08003aaa <__iar_annotation$$branch>:
 8003aaa:	f7ff f8c9 	bl	8002c40 <USBPD_PE_StateMachine_SRC+0xb4>

08003aae <__iar_annotation$$branch>:
 8003aae:	f7ff fa0b 	bl	8002ec8 <__iar_annotation$$branch+0x8>
	...

08003ab4 <.text_3>:
 8003ab4:	000081d6 	.word	0x000081d6

08003ab8 <PE_Send_SRCCapabilities>:
 8003ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003aba:	0004      	movs	r4, r0
 8003abc:	000d      	movs	r5, r1
 8003abe:	2000      	movs	r0, #0
 8003ac0:	9002      	str	r0, [sp, #8]
 8003ac2:	ab02      	add	r3, sp, #8
 8003ac4:	4817      	ldr	r0, [pc, #92]	; (8003b24 <.text_10>)
 8003ac6:	1822      	adds	r2, r4, r0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	7c20      	ldrb	r0, [r4, #16]
 8003acc:	68a6      	ldr	r6, [r4, #8]
 8003ace:	6976      	ldr	r6, [r6, #20]
 8003ad0:	47b0      	blx	r6
 8003ad2:	9802      	ldr	r0, [sp, #8]
 8003ad4:	1c80      	adds	r0, r0, #2
 8003ad6:	9002      	str	r0, [sp, #8]
 8003ad8:	2104      	movs	r1, #4
 8003ada:	9802      	ldr	r0, [sp, #8]
 8003adc:	f7fd fcb6 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d113      	bne.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003ae4:	6860      	ldr	r0, [r4, #4]
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	04c1      	lsls	r1, r0, #19
 8003aea:	0fc9      	lsrs	r1, r1, #31
 8003aec:	d00e      	beq.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003aee:	9501      	str	r5, [sp, #4]
 8003af0:	9802      	ldr	r0, [sp, #8]
 8003af2:	b280      	uxth	r0, r0
 8003af4:	9000      	str	r0, [sp, #0]
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <.text_7>)
 8003af8:	1823      	adds	r3, r4, r0
 8003afa:	2201      	movs	r2, #1
 8003afc:	2100      	movs	r1, #0
 8003afe:	7c20      	ldrb	r0, [r4, #16]
 8003b00:	f001 fe54 	bl	80057ac <USBPD_PRL_SendMessage>
 8003b04:	2803      	cmp	r0, #3
 8003b06:	d0e7      	beq.n	8003ad8 <PE_Send_SRCCapabilities+0x20>
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	e7fb      	b.n	8003b08 <PE_Send_SRCCapabilities+0x50>

08003b10 <.text_5>:
 8003b10:	20000000 	.word	0x20000000

08003b14 <.text_6>:
 8003b14:	00000267 	.word	0x00000267

08003b18 <.text_7>:
 8003b18:	00000263 	.word	0x00000263

08003b1c <.text_8>:
 8003b1c:	ffffbfff 	.word	0xffffbfff

08003b20 <.text_9>:
 8003b20:	ffffdfff 	.word	0xffffdfff

08003b24 <.text_10>:
 8003b24:	00000265 	.word	0x00000265

08003b28 <PE_StateMachine_VDMCable>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	2502      	movs	r5, #2
 8003b30:	2607      	movs	r6, #7
 8003b32:	7c60      	ldrb	r0, [r4, #17]
 8003b34:	2805      	cmp	r0, #5
 8003b36:	d002      	beq.n	8003b3e <PE_StateMachine_VDMCable+0x16>
 8003b38:	289a      	cmp	r0, #154	; 0x9a
 8003b3a:	d072      	beq.n	8003c22 <PE_StateMachine_VDMCable+0xfa>
 8003b3c:	e127      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003b3e:	6860      	ldr	r0, [r4, #4]
 8003b40:	7800      	ldrb	r0, [r0, #0]
 8003b42:	0781      	lsls	r1, r0, #30
 8003b44:	0f89      	lsrs	r1, r1, #30
 8003b46:	0020      	movs	r0, r4
 8003b48:	f000 fa5e 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003b4c:	2094      	movs	r0, #148	; 0x94
 8003b4e:	0080      	lsls	r0, r0, #2
 8003b50:	5821      	ldr	r1, [r4, r0]
 8003b52:	201f      	movs	r0, #31
 8003b54:	4381      	bics	r1, r0
 8003b56:	488f      	ldr	r0, [pc, #572]	; (8003d94 <.text_3>)
 8003b58:	4308      	orrs	r0, r1
 8003b5a:	2194      	movs	r1, #148	; 0x94
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	5060      	str	r0, [r4, r1]
 8003b60:	6861      	ldr	r1, [r4, #4]
 8003b62:	9100      	str	r1, [sp, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	9a00      	ldr	r2, [sp, #0]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	0953      	lsrs	r3, r2, #5
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	4a8a      	ldr	r2, [pc, #552]	; (8003d98 <.text_4>)
 8003b70:	4002      	ands	r2, r0
 8003b72:	0358      	lsls	r0, r3, #13
 8003b74:	4310      	orrs	r0, r2
 8003b76:	22ff      	movs	r2, #255	; 0xff
 8003b78:	0612      	lsls	r2, r2, #24
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	2094      	movs	r0, #148	; 0x94
 8003b7e:	0080      	lsls	r0, r0, #2
 8003b80:	5022      	str	r2, [r4, r0]
 8003b82:	9800      	ldr	r0, [sp, #0]
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	0880      	lsrs	r0, r0, #2
 8003b88:	4001      	ands	r1, r0
 8003b8a:	d003      	beq.n	8003b94 <PE_StateMachine_VDMCable+0x6c>
 8003b8c:	6960      	ldr	r0, [r4, #20]
 8003b8e:	0741      	lsls	r1, r0, #29
 8003b90:	0fc8      	lsrs	r0, r1, #31
 8003b92:	e000      	b.n	8003b96 <PE_StateMachine_VDMCable+0x6e>
 8003b94:	2002      	movs	r0, #2
 8003b96:	2194      	movs	r1, #148	; 0x94
 8003b98:	0089      	lsls	r1, r1, #2
 8003b9a:	1867      	adds	r7, r4, r1
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	209a      	movs	r0, #154	; 0x9a
 8003ba0:	9001      	str	r0, [sp, #4]
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	9000      	str	r0, [sp, #0]
 8003ba6:	003b      	movs	r3, r7
 8003ba8:	220f      	movs	r2, #15
 8003baa:	2101      	movs	r1, #1
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7fd fcda 	bl	8001566 <PE_Send_DataMessage>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d109      	bne.n	8003bca <PE_StateMachine_VDMCable+0xa2>
 8003bb6:	6960      	ldr	r0, [r4, #20]
 8003bb8:	03e9      	lsls	r1, r5, #15
 8003bba:	4301      	orrs	r1, r0
 8003bbc:	6161      	str	r1, [r4, #20]
 8003bbe:	2051      	movs	r0, #81	; 0x51
 8003bc0:	7720      	strb	r0, [r4, #28]
 8003bc2:	4876      	ldr	r0, [pc, #472]	; (8003d9c <.text_5>)
 8003bc4:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bc6:	251e      	movs	r5, #30
 8003bc8:	e0e1      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003bca:	2809      	cmp	r0, #9
 8003bcc:	d0fc      	beq.n	8003bc8 <PE_StateMachine_VDMCable+0xa0>
 8003bce:	7cb8      	ldrb	r0, [r7, #18]
 8003bd0:	2815      	cmp	r0, #21
 8003bd2:	d202      	bcs.n	8003bda <PE_StateMachine_VDMCable+0xb2>
 8003bd4:	4872      	ldr	r0, [pc, #456]	; (8003da0 <.text_6>)
 8003bd6:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bd8:	e00a      	b.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003bda:	68e0      	ldr	r0, [r4, #12]
 8003bdc:	6940      	ldr	r0, [r0, #20]
 8003bde:	9000      	str	r0, [sp, #0]
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d005      	beq.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2205      	movs	r2, #5
 8003be8:	2101      	movs	r1, #1
 8003bea:	7c20      	ldrb	r0, [r4, #16]
 8003bec:	9f00      	ldr	r7, [sp, #0]
 8003bee:	47b8      	blx	r7
 8003bf0:	6860      	ldr	r0, [r4, #4]
 8003bf2:	6800      	ldr	r0, [r0, #0]
 8003bf4:	0a00      	lsrs	r0, r0, #8
 8003bf6:	4030      	ands	r0, r6
 8003bf8:	2803      	cmp	r0, #3
 8003bfa:	d100      	bne.n	8003bfe <PE_StateMachine_VDMCable+0xd6>
 8003bfc:	e0a4      	b.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003bfe:	4869      	ldr	r0, [pc, #420]	; (8003da4 <.text_7>)
 8003c00:	8be1      	ldrh	r1, [r4, #30]
 8003c02:	4201      	tst	r1, r0
 8003c04:	d00b      	beq.n	8003c1e <PE_StateMachine_VDMCable+0xf6>
 8003c06:	2108      	movs	r1, #8
 8003c08:	7461      	strb	r1, [r4, #17]
 8003c0a:	8be1      	ldrh	r1, [r4, #30]
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	292d      	cmp	r1, #45	; 0x2d
 8003c10:	d203      	bcs.n	8003c1a <PE_StateMachine_VDMCable+0xf2>
 8003c12:	8be1      	ldrh	r1, [r4, #30]
 8003c14:	0005      	movs	r5, r0
 8003c16:	400d      	ands	r5, r1
 8003c18:	e0b9      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1a:	252d      	movs	r5, #45	; 0x2d
 8003c1c:	e0b7      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1e:	7466      	strb	r6, [r4, #17]
 8003c20:	e0b5      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c22:	9101      	str	r1, [sp, #4]
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7fc fecf 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8003c2a:	4669      	mov	r1, sp
 8003c2c:	7008      	strb	r0, [r1, #0]
 8003c2e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003c30:	2700      	movs	r7, #0
 8003c32:	221f      	movs	r2, #31
 8003c34:	9801      	ldr	r0, [sp, #4]
 8003c36:	7800      	ldrb	r0, [r0, #0]
 8003c38:	466b      	mov	r3, sp
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4298      	cmp	r0, r3
 8003c3e:	d14f      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c40:	0bc8      	lsrs	r0, r1, #15
 8003c42:	d14d      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c44:	0b08      	lsrs	r0, r1, #12
 8003c46:	4230      	tst	r0, r6
 8003c48:	d04a      	beq.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	4008      	ands	r0, r1
 8003c4e:	280f      	cmp	r0, #15
 8003c50:	d146      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c54:	7880      	ldrb	r0, [r0, #2]
 8003c56:	9000      	str	r0, [sp, #0]
 8003c58:	4002      	ands	r2, r0
 8003c5a:	2a01      	cmp	r2, #1
 8003c5c:	d13b      	bne.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c5e:	0980      	lsrs	r0, r0, #6
 8003c60:	d039      	beq.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c62:	0608      	lsls	r0, r1, #24
 8003c64:	0f81      	lsrs	r1, r0, #30
 8003c66:	0020      	movs	r0, r4
 8003c68:	f000 f9ce 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003c6c:	68e0      	ldr	r0, [r4, #12]
 8003c6e:	6940      	ldr	r0, [r0, #20]
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d023      	beq.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c74:	9800      	ldr	r0, [sp, #0]
 8003c76:	0985      	lsrs	r5, r0, #6
 8003c78:	07a8      	lsls	r0, r5, #30
 8003c7a:	0f80      	lsrs	r0, r0, #30
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d11d      	bne.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c80:	aa03      	add	r2, sp, #12
 8003c82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c84:	1d81      	adds	r1, r0, #6
 8003c86:	7c20      	ldrb	r0, [r4, #16]
 8003c88:	f001 fb9a 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d111      	bne.n	8003cb4 <PE_StateMachine_VDMCable+0x18c>
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	07aa      	lsls	r2, r5, #30
 8003c94:	0f92      	lsrs	r2, r2, #30
 8003c96:	2101      	movs	r1, #1
 8003c98:	7c20      	ldrb	r0, [r4, #16]
 8003c9a:	68e5      	ldr	r5, [r4, #12]
 8003c9c:	696d      	ldr	r5, [r5, #20]
 8003c9e:	47a8      	blx	r5
 8003ca0:	2152      	movs	r1, #82	; 0x52
 8003ca2:	7c20      	ldrb	r0, [r4, #16]
 8003ca4:	f7fc fbec 	bl	8000480 <USBPD_PE_Notification>
 8003ca8:	2014      	movs	r0, #20
 8003caa:	2194      	movs	r1, #148	; 0x94
 8003cac:	0089      	lsls	r1, r1, #2
 8003cae:	1861      	adds	r1, r4, r1
 8003cb0:	7488      	strb	r0, [r1, #18]
 8003cb2:	e003      	b.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003cb4:	211b      	movs	r1, #27
 8003cb6:	7c20      	ldrb	r0, [r4, #16]
 8003cb8:	f7fc fbe2 	bl	8000480 <USBPD_PE_Notification>
 8003cbc:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cbe:	6860      	ldr	r0, [r4, #4]
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	0a00      	lsrs	r0, r0, #8
 8003cc4:	4030      	ands	r0, r6
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	d102      	bne.n	8003cd0 <PE_StateMachine_VDMCable+0x1a8>
 8003cca:	7460      	strb	r0, [r4, #17]
 8003ccc:	2500      	movs	r5, #0
 8003cce:	e002      	b.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003cd0:	7466      	strb	r6, [r4, #17]
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	7727      	strb	r7, [r4, #28]
 8003cd6:	9801      	ldr	r0, [sp, #4]
 8003cd8:	7800      	ldrb	r0, [r0, #0]
 8003cda:	2814      	cmp	r0, #20
 8003cdc:	d119      	bne.n	8003d12 <PE_StateMachine_VDMCable+0x1ea>
 8003cde:	e056      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	2a10      	cmp	r2, #16
 8003ce6:	d11b      	bne.n	8003d20 <PE_StateMachine_VDMCable+0x1f8>
 8003ce8:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cea:	6861      	ldr	r1, [r4, #4]
 8003cec:	6809      	ldr	r1, [r1, #0]
 8003cee:	0a09      	lsrs	r1, r1, #8
 8003cf0:	4031      	ands	r1, r6
 8003cf2:	2903      	cmp	r1, #3
 8003cf4:	d102      	bne.n	8003cfc <PE_StateMachine_VDMCable+0x1d4>
 8003cf6:	7460      	strb	r0, [r4, #17]
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	e002      	b.n	8003d02 <PE_StateMachine_VDMCable+0x1da>
 8003cfc:	7466      	strb	r6, [r4, #17]
 8003cfe:	2500      	movs	r5, #0
 8003d00:	7727      	strb	r7, [r4, #28]
 8003d02:	2159      	movs	r1, #89	; 0x59
 8003d04:	7c20      	ldrb	r0, [r4, #16]
 8003d06:	f7fc fbbb 	bl	8000480 <USBPD_PE_Notification>
 8003d0a:	9801      	ldr	r0, [sp, #4]
 8003d0c:	7800      	ldrb	r0, [r0, #0]
 8003d0e:	2814      	cmp	r0, #20
 8003d10:	d03d      	beq.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d12:	2014      	movs	r0, #20
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	7008      	strb	r0, [r1, #0]
 8003d18:	0020      	movs	r0, r4
 8003d1a:	f7fc fe1c 	bl	8000956 <PE_Clear_RxEvent>
 8003d1e:	e036      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d20:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003d22:	03aa      	lsls	r2, r5, #14
 8003d24:	4291      	cmp	r1, r2
 8003d26:	d132      	bne.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d28:	8467      	strh	r7, [r4, #34]	; 0x22
 8003d2a:	6861      	ldr	r1, [r4, #4]
 8003d2c:	680a      	ldr	r2, [r1, #0]
 8003d2e:	0a13      	lsrs	r3, r2, #8
 8003d30:	4033      	ands	r3, r6
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d10c      	bne.n	8003d50 <PE_StateMachine_VDMCable+0x228>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	6945      	ldr	r5, [r0, #20]
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	d004      	beq.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2204      	movs	r2, #4
 8003d42:	2101      	movs	r1, #1
 8003d44:	7c20      	ldrb	r0, [r4, #16]
 8003d46:	47a8      	blx	r5
 8003d48:	2003      	movs	r0, #3
 8003d4a:	7460      	strb	r0, [r4, #17]
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	e01e      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d50:	0e93      	lsrs	r3, r2, #26
 8003d52:	4018      	ands	r0, r3
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d10e      	bne.n	8003d76 <PE_StateMachine_VDMCable+0x24e>
 8003d58:	48b7      	ldr	r0, [pc, #732]	; (8004038 <.text_10>)
 8003d5a:	4010      	ands	r0, r2
 8003d5c:	066a      	lsls	r2, r5, #25
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	600a      	str	r2, [r1, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	7c20      	ldrb	r0, [r4, #16]
 8003d66:	f001 fcea 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8003d6a:	480d      	ldr	r0, [pc, #52]	; (8003da0 <.text_6>)
 8003d6c:	8460      	strh	r0, [r4, #34]	; 0x22
 8003d6e:	252d      	movs	r5, #45	; 0x2d
 8003d70:	2008      	movs	r0, #8
 8003d72:	7460      	strb	r0, [r4, #17]
 8003d74:	e00a      	b.n	8003d8c <PE_StateMachine_VDMCable+0x264>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	6945      	ldr	r5, [r0, #20]
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d004      	beq.n	8003d88 <PE_StateMachine_VDMCable+0x260>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2204      	movs	r2, #4
 8003d82:	2101      	movs	r1, #1
 8003d84:	7c20      	ldrb	r0, [r4, #16]
 8003d86:	47a8      	blx	r5
 8003d88:	7466      	strb	r6, [r4, #17]
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	7727      	strb	r7, [r4, #28]
 8003d8e:	0028      	movs	r0, r5
 8003d90:	b00d      	add	sp, #52	; 0x34
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d94 <.text_3>:
 8003d94:	00008001 	.word	0x00008001

08003d98 <.text_4>:
 8003d98:	0000983f 	.word	0x0000983f

08003d9c <.text_5>:
 8003d9c:	0000801e 	.word	0x0000801e

08003da0 <.text_6>:
 8003da0:	0000802d 	.word	0x0000802d

08003da4 <.text_7>:
 8003da4:	00007fff 	.word	0x00007fff

08003da8 <PE_SubStateMachine_VconnSwap>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	0004      	movs	r4, r0
 8003dac:	2502      	movs	r5, #2
 8003dae:	2703      	movs	r7, #3
 8003db0:	4ea2      	ldr	r6, [pc, #648]	; (800403c <.text_11>)
 8003db2:	2014      	movs	r0, #20
 8003db4:	7c62      	ldrb	r2, [r4, #17]
 8003db6:	2a9d      	cmp	r2, #157	; 0x9d
 8003db8:	d010      	beq.n	8003ddc <PE_SubStateMachine_VconnSwap+0x34>
 8003dba:	d30e      	bcc.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dbc:	2a9f      	cmp	r2, #159	; 0x9f
 8003dbe:	d057      	beq.n	8003e70 <PE_SubStateMachine_VconnSwap+0xc8>
 8003dc0:	d33d      	bcc.n	8003e3e <PE_SubStateMachine_VconnSwap+0x96>
 8003dc2:	2aa1      	cmp	r2, #161	; 0xa1
 8003dc4:	d100      	bne.n	8003dc8 <PE_SubStateMachine_VconnSwap+0x20>
 8003dc6:	e085      	b.n	8003ed4 <PE_SubStateMachine_VconnSwap+0x12c>
 8003dc8:	d377      	bcc.n	8003eba <PE_SubStateMachine_VconnSwap+0x112>
 8003dca:	2aa3      	cmp	r2, #163	; 0xa3
 8003dcc:	d100      	bne.n	8003dd0 <PE_SubStateMachine_VconnSwap+0x28>
 8003dce:	e0a3      	b.n	8003f18 <PE_SubStateMachine_VconnSwap+0x170>
 8003dd0:	d200      	bcs.n	8003dd4 <PE_SubStateMachine_VconnSwap+0x2c>
 8003dd2:	e08e      	b.n	8003ef2 <PE_SubStateMachine_VconnSwap+0x14a>
 8003dd4:	2aa4      	cmp	r2, #164	; 0xa4
 8003dd6:	d100      	bne.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dd8:	e106      	b.n	8003fe8 <PE_SubStateMachine_VconnSwap+0x240>
 8003dda:	e113      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ddc:	6860      	ldr	r0, [r4, #4]
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	21b8      	movs	r1, #184	; 0xb8
 8003de2:	0149      	lsls	r1, r1, #5
 8003de4:	4001      	ands	r1, r0
 8003de6:	2098      	movs	r0, #152	; 0x98
 8003de8:	0140      	lsls	r0, r0, #5
 8003dea:	4281      	cmp	r1, r0
 8003dec:	d121      	bne.n	8003e32 <PE_SubStateMachine_VconnSwap+0x8a>
 8003dee:	7c20      	ldrb	r0, [r4, #16]
 8003df0:	68a1      	ldr	r1, [r4, #8]
 8003df2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003df4:	4788      	blx	r1
 8003df6:	280a      	cmp	r0, #10
 8003df8:	d002      	beq.n	8003e00 <PE_SubStateMachine_VconnSwap+0x58>
 8003dfa:	280d      	cmp	r0, #13
 8003dfc:	d007      	beq.n	8003e0e <PE_SubStateMachine_VconnSwap+0x66>
 8003dfe:	e00f      	b.n	8003e20 <PE_SubStateMachine_VconnSwap+0x78>
 8003e00:	209e      	movs	r0, #158	; 0x9e
 8003e02:	7460      	strb	r0, [r4, #17]
 8003e04:	6960      	ldr	r0, [r4, #20]
 8003e06:	02e9      	lsls	r1, r5, #11
 8003e08:	4301      	orrs	r1, r0
 8003e0a:	6161      	str	r1, [r4, #20]
 8003e0c:	e0fa      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	9000      	str	r0, [sp, #0]
 8003e12:	2303      	movs	r3, #3
 8003e14:	220c      	movs	r2, #12
 8003e16:	2100      	movs	r1, #0
 8003e18:	0020      	movs	r0, r4
 8003e1a:	f7fd fb79 	bl	8001510 <PE_Send_CtrlMessage>
 8003e1e:	e0f1      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e20:	2000      	movs	r0, #0
 8003e22:	9000      	str	r0, [sp, #0]
 8003e24:	2303      	movs	r3, #3
 8003e26:	2204      	movs	r2, #4
 8003e28:	2100      	movs	r1, #0
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	f7fd fb70 	bl	8001510 <PE_Send_CtrlMessage>
 8003e30:	e002      	b.n	8003e38 <PE_SubStateMachine_VconnSwap+0x90>
 8003e32:	6960      	ldr	r0, [r4, #20]
 8003e34:	4006      	ands	r6, r0
 8003e36:	6166      	str	r6, [r4, #20]
 8003e38:	7467      	strb	r7, [r4, #17]
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	e0e2      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	9000      	str	r0, [sp, #0]
 8003e42:	239e      	movs	r3, #158	; 0x9e
 8003e44:	2203      	movs	r2, #3
 8003e46:	2100      	movs	r1, #0
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f7fd fb61 	bl	8001510 <PE_Send_CtrlMessage>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d1f4      	bne.n	8003e3c <PE_SubStateMachine_VconnSwap+0x94>
 8003e52:	6860      	ldr	r0, [r4, #4]
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	0401      	lsls	r1, r0, #16
 8003e58:	0fc9      	lsrs	r1, r1, #31
 8003e5a:	d005      	beq.n	8003e68 <PE_SubStateMachine_VconnSwap+0xc0>
 8003e5c:	209f      	movs	r0, #159	; 0x9f
 8003e5e:	7460      	strb	r0, [r4, #17]
 8003e60:	4877      	ldr	r0, [pc, #476]	; (8004040 <.text_12>)
 8003e62:	83e0      	strh	r0, [r4, #30]
 8003e64:	2596      	movs	r5, #150	; 0x96
 8003e66:	e001      	b.n	8003e6c <PE_SubStateMachine_VconnSwap+0xc4>
 8003e68:	20a0      	movs	r0, #160	; 0xa0
 8003e6a:	7460      	strb	r0, [r4, #17]
 8003e6c:	213f      	movs	r1, #63	; 0x3f
 8003e6e:	e0b7      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003e70:	8be2      	ldrh	r2, [r4, #30]
 8003e72:	03ab      	lsls	r3, r5, #14
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d100      	bne.n	8003e7a <PE_SubStateMachine_VconnSwap+0xd2>
 8003e78:	e0ac      	b.n	8003fd4 <PE_SubStateMachine_VconnSwap+0x22c>
 8003e7a:	780a      	ldrb	r2, [r1, #0]
 8003e7c:	2a11      	cmp	r2, #17
 8003e7e:	d11b      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e80:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003e82:	4b70      	ldr	r3, [pc, #448]	; (8004044 <.text_13>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d116      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e8a:	7008      	strb	r0, [r1, #0]
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fc fd62 	bl	8000956 <PE_Clear_RxEvent>
 8003e92:	68a0      	ldr	r0, [r4, #8]
 8003e94:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d002      	beq.n	8003ea0 <PE_SubStateMachine_VconnSwap+0xf8>
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	7c20      	ldrb	r0, [r4, #16]
 8003e9e:	4790      	blx	r2
 8003ea0:	6960      	ldr	r0, [r4, #20]
 8003ea2:	4006      	ands	r6, r0
 8003ea4:	6166      	str	r6, [r4, #20]
 8003ea6:	7467      	strb	r7, [r4, #17]
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	2142      	movs	r1, #66	; 0x42
 8003eac:	7c20      	ldrb	r0, [r4, #16]
 8003eae:	f7fc fae7 	bl	8000480 <USBPD_PE_Notification>
 8003eb2:	8465      	strh	r5, [r4, #34]	; 0x22
 8003eb4:	4964      	ldr	r1, [pc, #400]	; (8004048 <.text_14>)
 8003eb6:	5465      	strb	r5, [r4, r1]
 8003eb8:	e0a4      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003eba:	68a0      	ldr	r0, [r4, #8]
 8003ebc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d002      	beq.n	8003ec8 <PE_SubStateMachine_VconnSwap+0x120>
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	7c20      	ldrb	r0, [r4, #16]
 8003ec6:	4790      	blx	r2
 8003ec8:	20a1      	movs	r0, #161	; 0xa1
 8003eca:	7460      	strb	r0, [r4, #17]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	495e      	ldr	r1, [pc, #376]	; (8004048 <.text_14>)
 8003ed0:	5460      	strb	r0, [r4, r1]
 8003ed2:	e097      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	9000      	str	r0, [sp, #0]
 8003ed8:	2303      	movs	r3, #3
 8003eda:	2206      	movs	r2, #6
 8003edc:	2100      	movs	r1, #0
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f7fd fb16 	bl	8001510 <PE_Send_CtrlMessage>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1f4      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003ee8:	6960      	ldr	r0, [r4, #20]
 8003eea:	4006      	ands	r6, r0
 8003eec:	6166      	str	r6, [r4, #20]
 8003eee:	2142      	movs	r1, #66	; 0x42
 8003ef0:	e076      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	9000      	str	r0, [sp, #0]
 8003ef6:	23a3      	movs	r3, #163	; 0xa3
 8003ef8:	220b      	movs	r2, #11
 8003efa:	2100      	movs	r1, #0
 8003efc:	0020      	movs	r0, r4
 8003efe:	f7fd fb07 	bl	8001510 <PE_Send_CtrlMessage>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1e5      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003f06:	6960      	ldr	r0, [r4, #20]
 8003f08:	02e9      	lsls	r1, r5, #11
 8003f0a:	4301      	orrs	r1, r0
 8003f0c:	6161      	str	r1, [r4, #20]
 8003f0e:	484f      	ldr	r0, [pc, #316]	; (800404c <.text_15>)
 8003f10:	83e0      	strh	r0, [r4, #30]
 8003f12:	251b      	movs	r5, #27
 8003f14:	213e      	movs	r1, #62	; 0x3e
 8003f16:	e063      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003f18:	780a      	ldrb	r2, [r1, #0]
 8003f1a:	2a11      	cmp	r2, #17
 8003f1c:	d155      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f1e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003f20:	23f0      	movs	r3, #240	; 0xf0
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d150      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f28:	06d2      	lsls	r2, r2, #27
 8003f2a:	0ed2      	lsrs	r2, r2, #27
 8003f2c:	2a03      	cmp	r2, #3
 8003f2e:	d006      	beq.n	8003f3e <PE_SubStateMachine_VconnSwap+0x196>
 8003f30:	2a04      	cmp	r2, #4
 8003f32:	d024      	beq.n	8003f7e <PE_SubStateMachine_VconnSwap+0x1d6>
 8003f34:	2a0c      	cmp	r2, #12
 8003f36:	d014      	beq.n	8003f62 <PE_SubStateMachine_VconnSwap+0x1ba>
 8003f38:	2a10      	cmp	r2, #16
 8003f3a:	d02e      	beq.n	8003f9a <PE_SubStateMachine_VconnSwap+0x1f2>
 8003f3c:	e045      	b.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	0413      	lsls	r3, r2, #16
 8003f44:	0fdb      	lsrs	r3, r3, #31
 8003f46:	d001      	beq.n	8003f4c <PE_SubStateMachine_VconnSwap+0x1a4>
 8003f48:	229f      	movs	r2, #159	; 0x9f
 8003f4a:	e000      	b.n	8003f4e <PE_SubStateMachine_VconnSwap+0x1a6>
 8003f4c:	22a0      	movs	r2, #160	; 0xa0
 8003f4e:	7462      	strb	r2, [r4, #17]
 8003f50:	780a      	ldrb	r2, [r1, #0]
 8003f52:	2a14      	cmp	r2, #20
 8003f54:	d003      	beq.n	8003f5e <PE_SubStateMachine_VconnSwap+0x1b6>
 8003f56:	7008      	strb	r0, [r1, #0]
 8003f58:	0020      	movs	r0, r4
 8003f5a:	f7fc fcfc 	bl	8000956 <PE_Clear_RxEvent>
 8003f5e:	213f      	movs	r1, #63	; 0x3f
 8003f60:	e030      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f62:	6962      	ldr	r2, [r4, #20]
 8003f64:	4032      	ands	r2, r6
 8003f66:	6162      	str	r2, [r4, #20]
 8003f68:	7467      	strb	r7, [r4, #17]
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	780a      	ldrb	r2, [r1, #0]
 8003f6e:	2a14      	cmp	r2, #20
 8003f70:	d003      	beq.n	8003f7a <PE_SubStateMachine_VconnSwap+0x1d2>
 8003f72:	7008      	strb	r0, [r1, #0]
 8003f74:	0020      	movs	r0, r4
 8003f76:	f7fc fcee 	bl	8000956 <PE_Clear_RxEvent>
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	e022      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f7e:	6962      	ldr	r2, [r4, #20]
 8003f80:	4032      	ands	r2, r6
 8003f82:	6162      	str	r2, [r4, #20]
 8003f84:	7467      	strb	r7, [r4, #17]
 8003f86:	2500      	movs	r5, #0
 8003f88:	780a      	ldrb	r2, [r1, #0]
 8003f8a:	2a14      	cmp	r2, #20
 8003f8c:	d003      	beq.n	8003f96 <PE_SubStateMachine_VconnSwap+0x1ee>
 8003f8e:	7008      	strb	r0, [r1, #0]
 8003f90:	0020      	movs	r0, r4
 8003f92:	f7fc fce0 	bl	8000956 <PE_Clear_RxEvent>
 8003f96:	2141      	movs	r1, #65	; 0x41
 8003f98:	e014      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	0413      	lsls	r3, r2, #16
 8003fa0:	0fdb      	lsrs	r3, r3, #31
 8003fa2:	d102      	bne.n	8003faa <PE_SubStateMachine_VconnSwap+0x202>
 8003fa4:	22a4      	movs	r2, #164	; 0xa4
 8003fa6:	7462      	strb	r2, [r4, #17]
 8003fa8:	e004      	b.n	8003fb4 <PE_SubStateMachine_VconnSwap+0x20c>
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	4032      	ands	r2, r6
 8003fae:	6162      	str	r2, [r4, #20]
 8003fb0:	7467      	strb	r7, [r4, #17]
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	780a      	ldrb	r2, [r1, #0]
 8003fb6:	2a14      	cmp	r2, #20
 8003fb8:	d003      	beq.n	8003fc2 <PE_SubStateMachine_VconnSwap+0x21a>
 8003fba:	7008      	strb	r0, [r1, #0]
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f7fc fcca 	bl	8000956 <PE_Clear_RxEvent>
 8003fc2:	2143      	movs	r1, #67	; 0x43
 8003fc4:	7c20      	ldrb	r0, [r4, #16]
 8003fc6:	f7fc fa5b 	bl	8000480 <USBPD_PE_Notification>
 8003fca:	8be0      	ldrh	r0, [r4, #30]
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	0209      	lsls	r1, r1, #8
 8003fd0:	4288      	cmp	r0, r1
 8003fd2:	d117      	bne.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fd4:	6960      	ldr	r0, [r4, #20]
 8003fd6:	4006      	ands	r6, r0
 8003fd8:	6166      	str	r6, [r4, #20]
 8003fda:	7467      	strb	r7, [r4, #17]
 8003fdc:	2500      	movs	r5, #0
 8003fde:	211c      	movs	r1, #28
 8003fe0:	7c20      	ldrb	r0, [r4, #16]
 8003fe2:	f7fc fa4d 	bl	8000480 <USBPD_PE_Notification>
 8003fe6:	e00d      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fe8:	68a0      	ldr	r0, [r4, #8]
 8003fea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	d002      	beq.n	8003ff6 <PE_SubStateMachine_VconnSwap+0x24e>
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	7c20      	ldrb	r0, [r4, #16]
 8003ff4:	4790      	blx	r2
 8003ff6:	6960      	ldr	r0, [r4, #20]
 8003ff8:	4006      	ands	r6, r0
 8003ffa:	6166      	str	r6, [r4, #20]
 8003ffc:	7467      	strb	r7, [r4, #17]
 8003ffe:	2500      	movs	r5, #0
 8004000:	4813      	ldr	r0, [pc, #76]	; (8004050 <.text_16>)
 8004002:	8460      	strh	r0, [r4, #34]	; 0x22
 8004004:	0028      	movs	r0, r5
 8004006:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004008 <PE_ExtRevisionInteroperability_Cable>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	000a      	movs	r2, r1
 800400c:	6843      	ldr	r3, [r0, #4]
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	2103      	movs	r1, #3
 8004012:	2503      	movs	r5, #3
 8004014:	4025      	ands	r5, r4
 8004016:	42aa      	cmp	r2, r5
 8004018:	d300      	bcc.n	800401c <PE_ExtRevisionInteroperability_Cable+0x14>
 800401a:	002a      	movs	r2, r5
 800401c:	4d06      	ldr	r5, [pc, #24]	; (8004038 <.text_10>)
 800401e:	4025      	ands	r5, r4
 8004020:	0694      	lsls	r4, r2, #26
 8004022:	068a      	lsls	r2, r1, #26
 8004024:	4022      	ands	r2, r4
 8004026:	432a      	orrs	r2, r5
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	0e92      	lsrs	r2, r2, #26
 800402c:	4011      	ands	r1, r2
 800402e:	7c00      	ldrb	r0, [r0, #16]
 8004030:	f001 fb85 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8004034:	bd31      	pop	{r0, r4, r5, pc}
	...

08004038 <.text_10>:
 8004038:	f3ffffff 	.word	0xf3ffffff

0800403c <.text_11>:
 800403c:	ffffefff 	.word	0xffffefff

08004040 <.text_12>:
 8004040:	00008096 	.word	0x00008096

08004044 <.text_13>:
 8004044:	0000f01f 	.word	0x0000f01f

08004048 <.text_14>:
 8004048:	00000262 	.word	0x00000262

0800404c <.text_15>:
 800404c:	0000801b 	.word	0x0000801b

08004050 <.text_16>:
 8004050:	0000802d 	.word	0x0000802d

08004054 <USBPD_PE_SVDM_RequestIdentity>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	000a      	movs	r2, r1
 8004058:	49aa      	ldr	r1, [pc, #680]	; (8004304 <.text_8>)
 800405a:	0083      	lsls	r3, r0, #2
 800405c:	58cb      	ldr	r3, [r1, r3]
 800405e:	2110      	movs	r1, #16
 8004060:	2401      	movs	r4, #1
 8004062:	681d      	ldr	r5, [r3, #0]
 8004064:	686d      	ldr	r5, [r5, #4]
 8004066:	0a6d      	lsrs	r5, r5, #9
 8004068:	4025      	ands	r5, r4
 800406a:	d004      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 800406c:	68dd      	ldr	r5, [r3, #12]
 800406e:	2d00      	cmp	r5, #0
 8004070:	d001      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 8004072:	2a02      	cmp	r2, #2
 8004074:	d101      	bne.n	800407a <USBPD_PE_SVDM_RequestIdentity+0x26>
 8004076:	2102      	movs	r1, #2
 8004078:	e02d      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 800407a:	2532      	movs	r5, #50	; 0x32
 800407c:	5d5d      	ldrb	r5, [r3, r5]
 800407e:	2d00      	cmp	r5, #0
 8004080:	d104      	bne.n	800408c <USBPD_PE_SVDM_RequestIdentity+0x38>
 8004082:	685d      	ldr	r5, [r3, #4]
 8004084:	682d      	ldr	r5, [r5, #0]
 8004086:	0b2d      	lsrs	r5, r5, #12
 8004088:	402c      	ands	r4, r5
 800408a:	d101      	bne.n	8004090 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 800408c:	2103      	movs	r1, #3
 800408e:	e022      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004090:	2433      	movs	r4, #51	; 0x33
 8004092:	551a      	strb	r2, [r3, r4]
 8004094:	2507      	movs	r5, #7
 8004096:	2a00      	cmp	r2, #0
 8004098:	d002      	beq.n	80040a0 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 800409a:	2a01      	cmp	r2, #1
 800409c:	d008      	beq.n	80040b0 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 800409e:	e01a      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	4015      	ands	r5, r2
 80040a8:	2d03      	cmp	r5, #3
 80040aa:	d114      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040ac:	217d      	movs	r1, #125	; 0x7d
 80040ae:	e00c      	b.n	80040ca <USBPD_PE_SVDM_RequestIdentity+0x76>
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4eab      	ldr	r6, [pc, #684]	; (8004364 <.text_10>)
 80040b6:	4016      	ands	r6, r2
 80040b8:	2782      	movs	r7, #130	; 0x82
 80040ba:	007f      	lsls	r7, r7, #1
 80040bc:	42be      	cmp	r6, r7
 80040be:	d003      	beq.n	80040c8 <USBPD_PE_SVDM_RequestIdentity+0x74>
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	4015      	ands	r5, r2
 80040c4:	2d03      	cmp	r5, #3
 80040c6:	d106      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040c8:	2105      	movs	r1, #5
 80040ca:	2232      	movs	r2, #50	; 0x32
 80040cc:	5499      	strb	r1, [r3, r2]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80040d2:	4788      	blx	r1
 80040d4:	2100      	movs	r1, #0
 80040d6:	0008      	movs	r0, r1
 80040d8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080040da <USBPD_PE_SVDM_RequestSVID>:
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	000a      	movs	r2, r1
 80040de:	4989      	ldr	r1, [pc, #548]	; (8004304 <.text_8>)
 80040e0:	0083      	lsls	r3, r0, #2
 80040e2:	58cb      	ldr	r3, [r1, r3]
 80040e4:	2110      	movs	r1, #16
 80040e6:	68dc      	ldr	r4, [r3, #12]
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	d001      	beq.n	80040f0 <USBPD_PE_SVDM_RequestSVID+0x16>
 80040ec:	2a02      	cmp	r2, #2
 80040ee:	d101      	bne.n	80040f4 <USBPD_PE_SVDM_RequestSVID+0x1a>
 80040f0:	2102      	movs	r1, #2
 80040f2:	e020      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80040f4:	2432      	movs	r4, #50	; 0x32
 80040f6:	5d1c      	ldrb	r4, [r3, r4]
 80040f8:	2c00      	cmp	r4, #0
 80040fa:	d105      	bne.n	8004108 <USBPD_PE_SVDM_RequestSVID+0x2e>
 80040fc:	685c      	ldr	r4, [r3, #4]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	2401      	movs	r4, #1
 8004102:	0b2e      	lsrs	r6, r5, #12
 8004104:	4026      	ands	r6, r4
 8004106:	d101      	bne.n	800410c <USBPD_PE_SVDM_RequestSVID+0x32>
 8004108:	2103      	movs	r1, #3
 800410a:	e014      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800410c:	056d      	lsls	r5, r5, #21
 800410e:	0f6d      	lsrs	r5, r5, #29
 8004110:	2d03      	cmp	r5, #3
 8004112:	d110      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004114:	2533      	movs	r5, #51	; 0x33
 8004116:	555a      	strb	r2, [r3, r5]
 8004118:	257f      	movs	r5, #127	; 0x7f
 800411a:	2632      	movs	r6, #50	; 0x32
 800411c:	559d      	strb	r5, [r3, r6]
 800411e:	2a00      	cmp	r2, #0
 8004120:	d005      	beq.n	800412e <USBPD_PE_SVDM_RequestSVID+0x54>
 8004122:	2a01      	cmp	r2, #1
 8004124:	d107      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	0c12      	lsrs	r2, r2, #16
 800412a:	4014      	ands	r4, r2
 800412c:	d003      	beq.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800412e:	6899      	ldr	r1, [r3, #8]
 8004130:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004132:	4788      	blx	r1
 8004134:	2100      	movs	r1, #0
 8004136:	0008      	movs	r0, r1
 8004138:	bd70      	pop	{r4, r5, r6, pc}

0800413a <USBPD_PE_SVDM_RequestMode>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	000b      	movs	r3, r1
 800413e:	4971      	ldr	r1, [pc, #452]	; (8004304 <.text_8>)
 8004140:	0084      	lsls	r4, r0, #2
 8004142:	590c      	ldr	r4, [r1, r4]
 8004144:	2110      	movs	r1, #16
 8004146:	68e5      	ldr	r5, [r4, #12]
 8004148:	2d00      	cmp	r5, #0
 800414a:	d001      	beq.n	8004150 <USBPD_PE_SVDM_RequestMode+0x16>
 800414c:	2b02      	cmp	r3, #2
 800414e:	d101      	bne.n	8004154 <USBPD_PE_SVDM_RequestMode+0x1a>
 8004150:	2102      	movs	r1, #2
 8004152:	e023      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004154:	2532      	movs	r5, #50	; 0x32
 8004156:	5d65      	ldrb	r5, [r4, r5]
 8004158:	2d00      	cmp	r5, #0
 800415a:	d105      	bne.n	8004168 <USBPD_PE_SVDM_RequestMode+0x2e>
 800415c:	6865      	ldr	r5, [r4, #4]
 800415e:	682e      	ldr	r6, [r5, #0]
 8004160:	2501      	movs	r5, #1
 8004162:	0b37      	lsrs	r7, r6, #12
 8004164:	402f      	ands	r7, r5
 8004166:	d101      	bne.n	800416c <USBPD_PE_SVDM_RequestMode+0x32>
 8004168:	2103      	movs	r1, #3
 800416a:	e017      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800416c:	0576      	lsls	r6, r6, #21
 800416e:	0f76      	lsrs	r6, r6, #29
 8004170:	2e03      	cmp	r6, #3
 8004172:	d113      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004174:	2633      	movs	r6, #51	; 0x33
 8004176:	55a3      	strb	r3, [r4, r6]
 8004178:	2681      	movs	r6, #129	; 0x81
 800417a:	2732      	movs	r7, #50	; 0x32
 800417c:	55e6      	strb	r6, [r4, r7]
 800417e:	2696      	movs	r6, #150	; 0x96
 8004180:	00b6      	lsls	r6, r6, #2
 8004182:	53a2      	strh	r2, [r4, r6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USBPD_PE_SVDM_RequestMode+0x5a>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800418c:	6962      	ldr	r2, [r4, #20]
 800418e:	0c12      	lsrs	r2, r2, #16
 8004190:	4015      	ands	r5, r2
 8004192:	d003      	beq.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004198:	4788      	blx	r1
 800419a:	2100      	movs	r1, #0
 800419c:	0008      	movs	r0, r1
 800419e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080041a0 <USBPD_PE_SVDM_RequestModeEnter>:
 80041a0:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80041a2:	4858      	ldr	r0, [pc, #352]	; (8004304 <.text_8>)
 80041a4:	466c      	mov	r4, sp
 80041a6:	7824      	ldrb	r4, [r4, #0]
 80041a8:	00a4      	lsls	r4, r4, #2
 80041aa:	5904      	ldr	r4, [r0, r4]
 80041ac:	2010      	movs	r0, #16
 80041ae:	68e5      	ldr	r5, [r4, #12]
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	d101      	bne.n	80041b8 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 80041b4:	2002      	movs	r0, #2
 80041b6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041b8:	2532      	movs	r5, #50	; 0x32
 80041ba:	5d65      	ldrb	r5, [r4, r5]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d105      	bne.n	80041cc <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 80041c0:	6865      	ldr	r5, [r4, #4]
 80041c2:	682e      	ldr	r6, [r5, #0]
 80041c4:	2501      	movs	r5, #1
 80041c6:	0b37      	lsrs	r7, r6, #12
 80041c8:	402f      	ands	r7, r5
 80041ca:	d101      	bne.n	80041d0 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 80041cc:	2003      	movs	r0, #3
 80041ce:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041d0:	27e1      	movs	r7, #225	; 0xe1
 80041d2:	00ff      	lsls	r7, r7, #3
 80041d4:	4037      	ands	r7, r6
 80041d6:	26c2      	movs	r6, #194	; 0xc2
 80041d8:	00b6      	lsls	r6, r6, #2
 80041da:	42b7      	cmp	r7, r6
 80041dc:	d11e      	bne.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80041de:	2633      	movs	r6, #51	; 0x33
 80041e0:	55a1      	strb	r1, [r4, r6]
 80041e2:	2682      	movs	r6, #130	; 0x82
 80041e4:	2732      	movs	r7, #50	; 0x32
 80041e6:	55e6      	strb	r6, [r4, r7]
 80041e8:	2696      	movs	r6, #150	; 0x96
 80041ea:	00b6      	lsls	r6, r6, #2
 80041ec:	53a2      	strh	r2, [r4, r6]
 80041ee:	6966      	ldr	r6, [r4, #20]
 80041f0:	4aaf      	ldr	r2, [pc, #700]	; (80044b0 <.text_13>)
 80041f2:	4032      	ands	r2, r6
 80041f4:	019e      	lsls	r6, r3, #6
 80041f6:	23e0      	movs	r3, #224	; 0xe0
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4033      	ands	r3, r6
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6163      	str	r3, [r4, #20]
 8004200:	2900      	cmp	r1, #0
 8004202:	d005      	beq.n	8004210 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 8004204:	2902      	cmp	r1, #2
 8004206:	d000      	beq.n	800420a <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004208:	d208      	bcs.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 800420a:	0c19      	lsrs	r1, r3, #16
 800420c:	400d      	ands	r5, r1
 800420e:	d005      	beq.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004210:	4668      	mov	r0, sp
 8004212:	7800      	ldrb	r0, [r0, #0]
 8004214:	68a1      	ldr	r1, [r4, #8]
 8004216:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004218:	4788      	blx	r1
 800421a:	2000      	movs	r0, #0
 800421c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800421e <USBPD_PE_SVDM_RequestModeExit>:
 800421e:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004220:	4838      	ldr	r0, [pc, #224]	; (8004304 <.text_8>)
 8004222:	466c      	mov	r4, sp
 8004224:	7824      	ldrb	r4, [r4, #0]
 8004226:	00a4      	lsls	r4, r4, #2
 8004228:	5904      	ldr	r4, [r0, r4]
 800422a:	2010      	movs	r0, #16
 800422c:	68e5      	ldr	r5, [r4, #12]
 800422e:	2d00      	cmp	r5, #0
 8004230:	d101      	bne.n	8004236 <USBPD_PE_SVDM_RequestModeExit+0x18>
 8004232:	2002      	movs	r0, #2
 8004234:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004236:	2532      	movs	r5, #50	; 0x32
 8004238:	5d65      	ldrb	r5, [r4, r5]
 800423a:	2d00      	cmp	r5, #0
 800423c:	d105      	bne.n	800424a <USBPD_PE_SVDM_RequestModeExit+0x2c>
 800423e:	6865      	ldr	r5, [r4, #4]
 8004240:	682e      	ldr	r6, [r5, #0]
 8004242:	2501      	movs	r5, #1
 8004244:	0b37      	lsrs	r7, r6, #12
 8004246:	402f      	ands	r7, r5
 8004248:	d101      	bne.n	800424e <USBPD_PE_SVDM_RequestModeExit+0x30>
 800424a:	2003      	movs	r0, #3
 800424c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800424e:	27e1      	movs	r7, #225	; 0xe1
 8004250:	00ff      	lsls	r7, r7, #3
 8004252:	4037      	ands	r7, r6
 8004254:	26c2      	movs	r6, #194	; 0xc2
 8004256:	00b6      	lsls	r6, r6, #2
 8004258:	42b7      	cmp	r7, r6
 800425a:	d11e      	bne.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800425c:	2633      	movs	r6, #51	; 0x33
 800425e:	55a1      	strb	r1, [r4, r6]
 8004260:	2683      	movs	r6, #131	; 0x83
 8004262:	2732      	movs	r7, #50	; 0x32
 8004264:	55e6      	strb	r6, [r4, r7]
 8004266:	2696      	movs	r6, #150	; 0x96
 8004268:	00b6      	lsls	r6, r6, #2
 800426a:	53a2      	strh	r2, [r4, r6]
 800426c:	6966      	ldr	r6, [r4, #20]
 800426e:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <.text_13>)
 8004270:	4032      	ands	r2, r6
 8004272:	019e      	lsls	r6, r3, #6
 8004274:	23e0      	movs	r3, #224	; 0xe0
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4033      	ands	r3, r6
 800427a:	4313      	orrs	r3, r2
 800427c:	6163      	str	r3, [r4, #20]
 800427e:	2900      	cmp	r1, #0
 8004280:	d005      	beq.n	800428e <USBPD_PE_SVDM_RequestModeExit+0x70>
 8004282:	2902      	cmp	r1, #2
 8004284:	d000      	beq.n	8004288 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 8004286:	d208      	bcs.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004288:	0c19      	lsrs	r1, r3, #16
 800428a:	400d      	ands	r5, r1
 800428c:	d005      	beq.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800428e:	4668      	mov	r0, sp
 8004290:	7800      	ldrb	r0, [r0, #0]
 8004292:	68a1      	ldr	r1, [r4, #8]
 8004294:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004296:	4788      	blx	r1
 8004298:	2000      	movs	r0, #0
 800429a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800429c <USBPD_PE_SVDM_RequestSpecific>:
 800429c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800429e:	4819      	ldr	r0, [pc, #100]	; (8004304 <.text_8>)
 80042a0:	466c      	mov	r4, sp
 80042a2:	7824      	ldrb	r4, [r4, #0]
 80042a4:	00a4      	lsls	r4, r4, #2
 80042a6:	5904      	ldr	r4, [r0, r4]
 80042a8:	2010      	movs	r0, #16
 80042aa:	68e5      	ldr	r5, [r4, #12]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d101      	bne.n	80042b4 <USBPD_PE_SVDM_RequestSpecific+0x18>
 80042b0:	2002      	movs	r0, #2
 80042b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042b4:	2532      	movs	r5, #50	; 0x32
 80042b6:	5d65      	ldrb	r5, [r4, r5]
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d105      	bne.n	80042c8 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 80042bc:	6865      	ldr	r5, [r4, #4]
 80042be:	682d      	ldr	r5, [r5, #0]
 80042c0:	2601      	movs	r6, #1
 80042c2:	0b2f      	lsrs	r7, r5, #12
 80042c4:	4037      	ands	r7, r6
 80042c6:	d101      	bne.n	80042cc <USBPD_PE_SVDM_RequestSpecific+0x30>
 80042c8:	2003      	movs	r0, #3
 80042ca:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042cc:	6967      	ldr	r7, [r4, #20]
 80042ce:	0c3f      	lsrs	r7, r7, #16
 80042d0:	403e      	ands	r6, r7
 80042d2:	d101      	bne.n	80042d8 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 80042d4:	000e      	movs	r6, r1
 80042d6:	d113      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042d8:	056d      	lsls	r5, r5, #21
 80042da:	0f6d      	lsrs	r5, r5, #29
 80042dc:	2d03      	cmp	r5, #3
 80042de:	d10f      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042e0:	2033      	movs	r0, #51	; 0x33
 80042e2:	5421      	strb	r1, [r4, r0]
 80042e4:	2085      	movs	r0, #133	; 0x85
 80042e6:	2132      	movs	r1, #50	; 0x32
 80042e8:	5460      	strb	r0, [r4, r1]
 80042ea:	2095      	movs	r0, #149	; 0x95
 80042ec:	0080      	lsls	r0, r0, #2
 80042ee:	1820      	adds	r0, r4, r0
 80042f0:	6002      	str	r2, [r0, #0]
 80042f2:	8083      	strh	r3, [r0, #4]
 80042f4:	4668      	mov	r0, sp
 80042f6:	7800      	ldrb	r0, [r0, #0]
 80042f8:	68a1      	ldr	r1, [r4, #8]
 80042fa:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80042fc:	4788      	blx	r1
 80042fe:	2000      	movs	r0, #0
 8004300:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08004304 <.text_8>:
 8004304:	200001e4 	.word	0x200001e4

08004308 <USBPD_PE_SVDM_RequestAttention>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	000b      	movs	r3, r1
 800430c:	4969      	ldr	r1, [pc, #420]	; (80044b4 <.text_14>)
 800430e:	0084      	lsls	r4, r0, #2
 8004310:	590d      	ldr	r5, [r1, r4]
 8004312:	2110      	movs	r1, #16
 8004314:	68ec      	ldr	r4, [r5, #12]
 8004316:	2c00      	cmp	r4, #0
 8004318:	d001      	beq.n	800431e <USBPD_PE_SVDM_RequestAttention+0x16>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <USBPD_PE_SVDM_RequestAttention+0x1a>
 800431e:	2102      	movs	r1, #2
 8004320:	e01e      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004322:	2332      	movs	r3, #50	; 0x32
 8004324:	5ceb      	ldrb	r3, [r5, r3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <USBPD_PE_SVDM_RequestAttention+0x2c>
 800432a:	686b      	ldr	r3, [r5, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	04dc      	lsls	r4, r3, #19
 8004330:	0fe4      	lsrs	r4, r4, #31
 8004332:	d101      	bne.n	8004338 <USBPD_PE_SVDM_RequestAttention+0x30>
 8004334:	2103      	movs	r1, #3
 8004336:	e013      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004338:	055b      	lsls	r3, r3, #21
 800433a:	0f5b      	lsrs	r3, r3, #29
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10f      	bne.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004340:	2400      	movs	r4, #0
 8004342:	2333      	movs	r3, #51	; 0x33
 8004344:	54ec      	strb	r4, [r5, r3]
 8004346:	2184      	movs	r1, #132	; 0x84
 8004348:	2332      	movs	r3, #50	; 0x32
 800434a:	54e9      	strb	r1, [r5, r3]
 800434c:	2195      	movs	r1, #149	; 0x95
 800434e:	0089      	lsls	r1, r1, #2
 8004350:	1869      	adds	r1, r5, r1
 8004352:	2306      	movs	r3, #6
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	808a      	strh	r2, [r1, #4]
 8004358:	68a9      	ldr	r1, [r5, #8]
 800435a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800435c:	4788      	blx	r1
 800435e:	2100      	movs	r1, #0
 8004360:	0008      	movs	r0, r1
 8004362:	bd32      	pop	{r1, r4, r5, pc}

08004364 <.text_10>:
 8004364:	00000704 	.word	0x00000704

08004368 <USBPD_PE_UVDM_RequestMessage>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	000a      	movs	r2, r1
 800436c:	4951      	ldr	r1, [pc, #324]	; (80044b4 <.text_14>)
 800436e:	0083      	lsls	r3, r0, #2
 8004370:	58cb      	ldr	r3, [r1, r3]
 8004372:	2110      	movs	r1, #16
 8004374:	68dc      	ldr	r4, [r3, #12]
 8004376:	2c00      	cmp	r4, #0
 8004378:	d101      	bne.n	800437e <USBPD_PE_UVDM_RequestMessage+0x16>
 800437a:	2102      	movs	r1, #2
 800437c:	e01d      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 800437e:	2432      	movs	r4, #50	; 0x32
 8004380:	5d1c      	ldrb	r4, [r3, r4]
 8004382:	2c00      	cmp	r4, #0
 8004384:	d105      	bne.n	8004392 <USBPD_PE_UVDM_RequestMessage+0x2a>
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	6824      	ldr	r4, [r4, #0]
 800438a:	2501      	movs	r5, #1
 800438c:	0b26      	lsrs	r6, r4, #12
 800438e:	402e      	ands	r6, r5
 8004390:	d101      	bne.n	8004396 <USBPD_PE_UVDM_RequestMessage+0x2e>
 8004392:	2103      	movs	r1, #3
 8004394:	e011      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 8004396:	0be6      	lsrs	r6, r4, #15
 8004398:	4035      	ands	r5, r6
 800439a:	d101      	bne.n	80043a0 <USBPD_PE_UVDM_RequestMessage+0x38>
 800439c:	0015      	movs	r5, r2
 800439e:	d10c      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a0:	0564      	lsls	r4, r4, #21
 80043a2:	0f64      	lsrs	r4, r4, #29
 80043a4:	2c03      	cmp	r4, #3
 80043a6:	d108      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a8:	2133      	movs	r1, #51	; 0x33
 80043aa:	545a      	strb	r2, [r3, r1]
 80043ac:	2186      	movs	r1, #134	; 0x86
 80043ae:	2232      	movs	r2, #50	; 0x32
 80043b0:	5499      	strb	r1, [r3, r2]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80043b6:	4788      	blx	r1
 80043b8:	2100      	movs	r1, #0
 80043ba:	0008      	movs	r0, r1
 80043bc:	bd70      	pop	{r4, r5, r6, pc}

080043be <PE_Receive_SVDM>:
 80043be:	493e      	ldr	r1, [pc, #248]	; (80044b8 <.text_15>)
 80043c0:	1842      	adds	r2, r0, r1
 80043c2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	0f49      	lsrs	r1, r1, #29
 80043c8:	1e49      	subs	r1, r1, #1
 80043ca:	7611      	strb	r1, [r2, #24]
 80043cc:	2131      	movs	r1, #49	; 0x31
 80043ce:	5c41      	ldrb	r1, [r0, r1]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d000      	beq.n	80043d6 <PE_Receive_SVDM+0x18>
 80043d4:	4770      	bx	lr
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	2300      	movs	r3, #0
 80043da:	e010      	b.n	80043fe <PE_Receive_SVDM+0x40>
 80043dc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80043de:	009c      	lsls	r4, r3, #2
 80043e0:	1909      	adds	r1, r1, r4
 80043e2:	798c      	ldrb	r4, [r1, #6]
 80043e4:	79cd      	ldrb	r5, [r1, #7]
 80043e6:	022d      	lsls	r5, r5, #8
 80043e8:	1964      	adds	r4, r4, r5
 80043ea:	7a0d      	ldrb	r5, [r1, #8]
 80043ec:	042d      	lsls	r5, r5, #16
 80043ee:	1964      	adds	r4, r4, r5
 80043f0:	7a49      	ldrb	r1, [r1, #9]
 80043f2:	0609      	lsls	r1, r1, #24
 80043f4:	1861      	adds	r1, r4, r1
 80043f6:	009c      	lsls	r4, r3, #2
 80043f8:	5111      	str	r1, [r2, r4]
 80043fa:	1c5b      	adds	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	7e11      	ldrb	r1, [r2, #24]
 8004400:	428b      	cmp	r3, r1
 8004402:	dbeb      	blt.n	80043dc <PE_Receive_SVDM+0x1e>
 8004404:	0004      	movs	r4, r0
 8004406:	2503      	movs	r5, #3
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <.text_16>)
 800440a:	482d      	ldr	r0, [pc, #180]	; (80044c0 <.text_17>)
 800440c:	2694      	movs	r6, #148	; 0x94
 800440e:	00b6      	lsls	r6, r6, #2
 8004410:	5da6      	ldrb	r6, [r4, r6]
 8004412:	06f6      	lsls	r6, r6, #27
 8004414:	0ef6      	lsrs	r6, r6, #27
 8004416:	1e76      	subs	r6, r6, #1
 8004418:	d00d      	beq.n	8004436 <PE_Receive_SVDM+0x78>
 800441a:	1e76      	subs	r6, r6, #1
 800441c:	d022      	beq.n	8004464 <PE_Receive_SVDM+0xa6>
 800441e:	1e76      	subs	r6, r6, #1
 8004420:	d025      	beq.n	800446e <PE_Receive_SVDM+0xb0>
 8004422:	1e76      	subs	r6, r6, #1
 8004424:	d028      	beq.n	8004478 <PE_Receive_SVDM+0xba>
 8004426:	1e76      	subs	r6, r6, #1
 8004428:	d02b      	beq.n	8004482 <PE_Receive_SVDM+0xc4>
 800442a:	1e76      	subs	r6, r6, #1
 800442c:	d02e      	beq.n	800448c <PE_Receive_SVDM+0xce>
 800442e:	3e0a      	subs	r6, #10
 8004430:	2e0f      	cmp	r6, #15
 8004432:	d937      	bls.n	80044a4 <PE_Receive_SVDM+0xe6>
 8004434:	bd70      	pop	{r4, r5, r6, pc}
 8004436:	2150      	movs	r1, #80	; 0x50
 8004438:	7721      	strb	r1, [r4, #28]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	680a      	ldr	r2, [r1, #0]
 800443e:	0693      	lsls	r3, r2, #26
 8004440:	0fdb      	lsrs	r3, r3, #31
 8004442:	2694      	movs	r6, #148	; 0x94
 8004444:	00b6      	lsls	r6, r6, #2
 8004446:	59a6      	ldr	r6, [r4, r6]
 8004448:	0b76      	lsrs	r6, r6, #13
 800444a:	4035      	ands	r5, r6
 800444c:	429d      	cmp	r5, r3
 800444e:	da00      	bge.n	8004452 <PE_Receive_SVDM+0x94>
 8004450:	002b      	movs	r3, r5
 8004452:	2520      	movs	r5, #32
 8004454:	43aa      	bics	r2, r5
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	402b      	ands	r3, r5
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
 800445e:	83e0      	strh	r0, [r4, #30]
 8004460:	2075      	movs	r0, #117	; 0x75
 8004462:	e023      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004464:	2152      	movs	r1, #82	; 0x52
 8004466:	7721      	strb	r1, [r4, #28]
 8004468:	83e0      	strh	r0, [r4, #30]
 800446a:	2076      	movs	r0, #118	; 0x76
 800446c:	e01e      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800446e:	2153      	movs	r1, #83	; 0x53
 8004470:	7721      	strb	r1, [r4, #28]
 8004472:	83e0      	strh	r0, [r4, #30]
 8004474:	2078      	movs	r0, #120	; 0x78
 8004476:	e019      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004478:	2054      	movs	r0, #84	; 0x54
 800447a:	7720      	strb	r0, [r4, #28]
 800447c:	83e3      	strh	r3, [r4, #30]
 800447e:	2079      	movs	r0, #121	; 0x79
 8004480:	e014      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004482:	2055      	movs	r0, #85	; 0x55
 8004484:	7720      	strb	r0, [r4, #28]
 8004486:	83e3      	strh	r3, [r4, #30]
 8004488:	207a      	movs	r0, #122	; 0x7a
 800448a:	e00f      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <PE_Receive_SVDM+0xe2>
 8004494:	2900      	cmp	r1, #0
 8004496:	d000      	beq.n	800449a <PE_Receive_SVDM+0xdc>
 8004498:	2101      	movs	r1, #1
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	7c20      	ldrb	r0, [r4, #16]
 800449e:	4798      	blx	r3
 80044a0:	7465      	strb	r5, [r4, #17]
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	215a      	movs	r1, #90	; 0x5a
 80044a6:	7721      	strb	r1, [r4, #28]
 80044a8:	83e0      	strh	r0, [r4, #30]
 80044aa:	207b      	movs	r0, #123	; 0x7b
 80044ac:	7460      	strb	r0, [r4, #17]
 80044ae:	bd70      	pop	{r4, r5, r6, pc}

080044b0 <.text_13>:
 80044b0:	fffffe3f 	.word	0xfffffe3f

080044b4 <.text_14>:
 80044b4:	200001e4 	.word	0x200001e4

080044b8 <.text_15>:
 80044b8:	00000494 	.word	0x00000494

080044bc <.text_16>:
 80044bc:	00008019 	.word	0x00008019

080044c0 <.text_17>:
 80044c0:	0000800f 	.word	0x0000800f

080044c4 <PE_StateMachine_VDM>:
 80044c4:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 80044c6:	b09c      	sub	sp, #112	; 0x70
 80044c8:	0005      	movs	r5, r0
 80044ca:	2002      	movs	r0, #2
 80044cc:	9004      	str	r0, [sp, #16]
 80044ce:	7c6a      	ldrb	r2, [r5, #17]
 80044d0:	0010      	movs	r0, r2
 80044d2:	3875      	subs	r0, #117	; 0x75
 80044d4:	2807      	cmp	r0, #7
 80044d6:	d206      	bcs.n	80044e6 <__iar_annotation$$branch+0x4>
 80044d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80044da:	7800      	ldrb	r0, [r0, #0]
 80044dc:	2814      	cmp	r0, #20
 80044de:	d002      	beq.n	80044e6 <__iar_annotation$$branch+0x4>
 80044e0:	2002      	movs	r0, #2

080044e2 <__iar_annotation$$branch>:
 80044e2:	f000 febc 	bl	800525e <__iar_annotation$$branch+0xce4>
 80044e6:	2094      	movs	r0, #148	; 0x94
 80044e8:	0080      	lsls	r0, r0, #2
 80044ea:	182c      	adds	r4, r5, r0
 80044ec:	210b      	movs	r1, #11
 80044ee:	271e      	movs	r7, #30
 80044f0:	201f      	movs	r0, #31
 80044f2:	43c0      	mvns	r0, r0
 80044f4:	26c0      	movs	r6, #192	; 0xc0
 80044f6:	43f6      	mvns	r6, r6
 80044f8:	2a75      	cmp	r2, #117	; 0x75
 80044fa:	d041      	beq.n	8004580 <__iar_annotation$$branch+0x6>
 80044fc:	2a76      	cmp	r2, #118	; 0x76
 80044fe:	d100      	bne.n	8004502 <__iar_annotation$$branch+0x20>
 8004500:	e0bb      	b.n	800467a <__iar_annotation$$branch+0x100>
 8004502:	2a77      	cmp	r2, #119	; 0x77
 8004504:	d100      	bne.n	8004508 <__iar_annotation$$branch+0x26>
 8004506:	e144      	b.n	8004792 <__iar_annotation$$branch+0x218>
 8004508:	2a78      	cmp	r2, #120	; 0x78
 800450a:	d100      	bne.n	800450e <__iar_annotation$$branch+0x2c>
 800450c:	e1b4      	b.n	8004878 <__iar_annotation$$branch+0x2fe>
 800450e:	2a79      	cmp	r2, #121	; 0x79
 8004510:	d100      	bne.n	8004514 <__iar_annotation$$branch+0x32>
 8004512:	e216      	b.n	8004942 <__iar_annotation$$branch+0x3c8>
 8004514:	2a7a      	cmp	r2, #122	; 0x7a
 8004516:	d100      	bne.n	800451a <__iar_annotation$$branch+0x38>
 8004518:	e24b      	b.n	80049b2 <__iar_annotation$$branch+0x438>
 800451a:	2a7b      	cmp	r2, #123	; 0x7b
 800451c:	d100      	bne.n	8004520 <__iar_annotation$$branch+0x3e>
 800451e:	e292      	b.n	8004a46 <__iar_annotation$$branch+0x4cc>
 8004520:	2a7d      	cmp	r2, #125	; 0x7d
 8004522:	d100      	bne.n	8004526 <__iar_annotation$$branch+0x44>
 8004524:	e2e0      	b.n	8004ae8 <__iar_annotation$$branch+0x56e>
 8004526:	2a7f      	cmp	r2, #127	; 0x7f
 8004528:	d100      	bne.n	800452c <__iar_annotation$$branch+0x4a>
 800452a:	e352      	b.n	8004bd2 <__iar_annotation$$branch+0x658>
 800452c:	2a81      	cmp	r2, #129	; 0x81
 800452e:	d100      	bne.n	8004532 <__iar_annotation$$branch+0x50>
 8004530:	e3c2      	b.n	8004cb8 <__iar_annotation$$branch+0x73e>
 8004532:	2a82      	cmp	r2, #130	; 0x82
 8004534:	d101      	bne.n	800453a <__iar_annotation$$branch+0x4>

08004536 <__iar_annotation$$branch>:
 8004536:	f000 fc3b 	bl	8004db0 <__iar_annotation$$branch+0x836>
 800453a:	2a83      	cmp	r2, #131	; 0x83
 800453c:	d101      	bne.n	8004542 <__iar_annotation$$branch+0x4>

0800453e <__iar_annotation$$branch>:
 800453e:	f000 fcc9 	bl	8004ed4 <__iar_annotation$$branch+0x95a>
 8004542:	2a84      	cmp	r2, #132	; 0x84
 8004544:	d101      	bne.n	800454a <__iar_annotation$$branch+0x4>

08004546 <__iar_annotation$$branch>:
 8004546:	f000 fe38 	bl	80051ba <__iar_annotation$$branch+0xc40>
 800454a:	2a85      	cmp	r2, #133	; 0x85
 800454c:	d101      	bne.n	8004552 <__iar_annotation$$branch+0x4>

0800454e <__iar_annotation$$branch>:
 800454e:	f000 fd5d 	bl	800500c <__iar_annotation$$branch+0xa92>
 8004552:	2a87      	cmp	r2, #135	; 0x87
 8004554:	d100      	bne.n	8004558 <__iar_annotation$$branch+0xa>
 8004556:	e2fc      	b.n	8004b52 <__iar_annotation$$branch+0x5d8>
 8004558:	2a89      	cmp	r2, #137	; 0x89
 800455a:	d100      	bne.n	800455e <__iar_annotation$$branch+0x10>
 800455c:	e375      	b.n	8004c4a <__iar_annotation$$branch+0x6d0>
 800455e:	2a8b      	cmp	r2, #139	; 0x8b
 8004560:	d101      	bne.n	8004566 <__iar_annotation$$branch+0x4>

08004562 <__iar_annotation$$branch>:
 8004562:	f000 fbe4 	bl	8004d2e <__iar_annotation$$branch+0x7b4>
 8004566:	2a8c      	cmp	r2, #140	; 0x8c
 8004568:	d101      	bne.n	800456e <__iar_annotation$$branch+0x4>

0800456a <__iar_annotation$$branch>:
 800456a:	f000 fc63 	bl	8004e34 <__iar_annotation$$branch+0x8ba>
 800456e:	2a8d      	cmp	r2, #141	; 0x8d
 8004570:	d101      	bne.n	8004576 <__iar_annotation$$branch+0x4>

08004572 <__iar_annotation$$branch>:
 8004572:	f000 fcf7 	bl	8004f64 <__iar_annotation$$branch+0x9ea>
 8004576:	2a8f      	cmp	r2, #143	; 0x8f
 8004578:	d101      	bne.n	800457e <__iar_annotation$$branch+0x4>

0800457a <__iar_annotation$$branch>:
 800457a:	f000 fda5 	bl	80050c8 <__iar_annotation$$branch+0xb4e>
 800457e:	e2b2      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004580:	2201      	movs	r2, #1
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	03d3      	lsls	r3, r2, #15
 8004586:	8bea      	ldrh	r2, [r5, #30]
 8004588:	429a      	cmp	r2, r3
 800458a:	d100      	bne.n	800458e <__iar_annotation$$branch+0x14>
 800458c:	e262      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800458e:	2701      	movs	r7, #1
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	4010      	ands	r0, r2
 8004594:	4338      	orrs	r0, r7
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	4303      	orrs	r3, r0
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	6868      	ldr	r0, [r5, #4]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	0942      	lsrs	r2, r0, #5
 80045a2:	403a      	ands	r2, r7
 80045a4:	48c9      	ldr	r0, [pc, #804]	; (80048cc <__iar_annotation$$branch+0x352>)
 80045a6:	4018      	ands	r0, r3
 80045a8:	0352      	lsls	r2, r2, #13
 80045aa:	4302      	orrs	r2, r0
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	6868      	ldr	r0, [r5, #4]
 80045b0:	6800      	ldr	r0, [r0, #0]
 80045b2:	4001      	ands	r1, r0
 80045b4:	2909      	cmp	r1, #9
 80045b6:	d051      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045b8:	68e8      	ldr	r0, [r5, #12]
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d04e      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045be:	6803      	ldr	r3, [r0, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04b      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045c4:	0c10      	lsrs	r0, r2, #16
 80045c6:	21ff      	movs	r1, #255	; 0xff
 80045c8:	0209      	lsls	r1, r1, #8
 80045ca:	4288      	cmp	r0, r1
 80045cc:	d146      	bne.n	800465c <__iar_annotation$$branch+0xe2>
 80045ce:	a90b      	add	r1, sp, #44	; 0x2c
 80045d0:	7c28      	ldrb	r0, [r5, #16]
 80045d2:	4798      	blx	r3
 80045d4:	2803      	cmp	r0, #3
 80045d6:	d002      	beq.n	80045de <__iar_annotation$$branch+0x64>
 80045d8:	280f      	cmp	r0, #15
 80045da:	d005      	beq.n	80045e8 <__iar_annotation$$branch+0x6e>
 80045dc:	e03e      	b.n	800465c <__iar_annotation$$branch+0xe2>
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	21c0      	movs	r1, #192	; 0xc0
 80045e2:	4301      	orrs	r1, r0
 80045e4:	6021      	str	r1, [r4, #0]
 80045e6:	e03e      	b.n	8004666 <__iar_annotation$$branch+0xec>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	4006      	ands	r6, r0
 80045ec:	2040      	movs	r0, #64	; 0x40
 80045ee:	4330      	orrs	r0, r6
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80045f4:	9015      	str	r0, [sp, #84]	; 0x54
 80045f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80045f8:	9016      	str	r0, [sp, #88]	; 0x58
 80045fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045fc:	9017      	str	r0, [sp, #92]	; 0x5c
 80045fe:	2004      	movs	r0, #4
 8004600:	9003      	str	r0, [sp, #12]
 8004602:	a80b      	add	r0, sp, #44	; 0x2c
 8004604:	2120      	movs	r1, #32
 8004606:	5c40      	ldrb	r0, [r0, r1]
 8004608:	0841      	lsrs	r1, r0, #1
 800460a:	4239      	tst	r1, r7
 800460c:	d003      	beq.n	8004616 <__iar_annotation$$branch+0x9c>
 800460e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004610:	9118      	str	r1, [sp, #96]	; 0x60
 8004612:	2105      	movs	r1, #5
 8004614:	9103      	str	r1, [sp, #12]
 8004616:	08c2      	lsrs	r2, r0, #3
 8004618:	2101      	movs	r1, #1
 800461a:	4011      	ands	r1, r2
 800461c:	d008      	beq.n	8004630 <__iar_annotation$$branch+0xb6>
 800461e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8004620:	aa14      	add	r2, sp, #80	; 0x50
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	50d6      	str	r6, [r2, r3]
 8004628:	9a03      	ldr	r2, [sp, #12]
 800462a:	1c52      	adds	r2, r2, #1
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	9203      	str	r2, [sp, #12]
 8004630:	0900      	lsrs	r0, r0, #4
 8004632:	4238      	tst	r0, r7
 8004634:	d017      	beq.n	8004666 <__iar_annotation$$branch+0xec>
 8004636:	2900      	cmp	r1, #0
 8004638:	d007      	beq.n	800464a <__iar_annotation$$branch+0xd0>
 800463a:	2000      	movs	r0, #0
 800463c:	a914      	add	r1, sp, #80	; 0x50
 800463e:	9a03      	ldr	r2, [sp, #12]
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	5088      	str	r0, [r1, r2]
 8004644:	9803      	ldr	r0, [sp, #12]
 8004646:	1c40      	adds	r0, r0, #1
 8004648:	9003      	str	r0, [sp, #12]
 800464a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800464c:	a914      	add	r1, sp, #80	; 0x50
 800464e:	9a03      	ldr	r2, [sp, #12]
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	5088      	str	r0, [r1, r2]
 8004654:	9803      	ldr	r0, [sp, #12]
 8004656:	1c40      	adds	r0, r0, #1
 8004658:	9003      	str	r0, [sp, #12]
 800465a:	e004      	b.n	8004666 <__iar_annotation$$branch+0xec>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	4006      	ands	r6, r0
 8004660:	2080      	movs	r0, #128	; 0x80
 8004662:	4330      	orrs	r0, r6
 8004664:	6020      	str	r0, [r4, #0]
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	9014      	str	r0, [sp, #80]	; 0x50
 800466a:	2000      	movs	r0, #0
 800466c:	9002      	str	r0, [sp, #8]
 800466e:	2003      	movs	r0, #3
 8004670:	9001      	str	r0, [sp, #4]
 8004672:	9803      	ldr	r0, [sp, #12]
 8004674:	9000      	str	r0, [sp, #0]
 8004676:	ab14      	add	r3, sp, #80	; 0x50
 8004678:	e22f      	b.n	8004ada <__iar_annotation$$branch+0x560>
 800467a:	2201      	movs	r2, #1
 800467c:	466b      	mov	r3, sp
 800467e:	731a      	strb	r2, [r3, #12]
 8004680:	03d2      	lsls	r2, r2, #15
 8004682:	8beb      	ldrh	r3, [r5, #30]
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <__iar_annotation$$branch+0x110>
 8004688:	e1e4      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	4018      	ands	r0, r3
 800468e:	2302      	movs	r3, #2
 8004690:	4303      	orrs	r3, r0
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	431a      	orrs	r2, r3
 8004696:	6022      	str	r2, [r4, #0]
 8004698:	6868      	ldr	r0, [r5, #4]
 800469a:	6803      	ldr	r3, [r0, #0]
 800469c:	0698      	lsls	r0, r3, #26
 800469e:	0fc0      	lsrs	r0, r0, #31
 80046a0:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <__iar_annotation$$branch+0x352>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0340      	lsls	r0, r0, #13
 80046a6:	4318      	orrs	r0, r3
 80046a8:	6020      	str	r0, [r4, #0]
 80046aa:	686a      	ldr	r2, [r5, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4011      	ands	r1, r2
 80046b0:	2909      	cmp	r1, #9
 80046b2:	d05f      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046b4:	68e9      	ldr	r1, [r5, #12]
 80046b6:	684b      	ldr	r3, [r1, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046bc:	0c00      	lsrs	r0, r0, #16
 80046be:	21ff      	movs	r1, #255	; 0xff
 80046c0:	0209      	lsls	r1, r1, #8
 80046c2:	4288      	cmp	r0, r1
 80046c4:	d156      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046c6:	4882      	ldr	r0, [pc, #520]	; (80048d0 <__iar_annotation$$branch+0x356>)
 80046c8:	182a      	adds	r2, r5, r0
 80046ca:	a905      	add	r1, sp, #20
 80046cc:	7c28      	ldrb	r0, [r5, #16]
 80046ce:	4798      	blx	r3
 80046d0:	2803      	cmp	r0, #3
 80046d2:	d04b      	beq.n	800476c <__iar_annotation$$branch+0x1f2>
 80046d4:	280f      	cmp	r0, #15
 80046d6:	d14d      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4006      	ands	r6, r0
 80046dc:	2040      	movs	r0, #64	; 0x40
 80046de:	4330      	orrs	r0, r6
 80046e0:	6020      	str	r0, [r4, #0]
 80046e2:	211c      	movs	r1, #28
 80046e4:	a806      	add	r0, sp, #24
 80046e6:	f016 fae6 	bl	801acb6 <__aeabi_memclr>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2200      	movs	r2, #0
 80046ee:	a806      	add	r0, sp, #24
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	e014      	b.n	800471e <__iar_annotation$$branch+0x1a4>
 80046f4:	005f      	lsls	r7, r3, #1
 80046f6:	5bf6      	ldrh	r6, [r6, r7]
 80046f8:	0436      	lsls	r6, r6, #16
 80046fa:	430e      	orrs	r6, r1
 80046fc:	6006      	str	r6, [r0, #0]
 80046fe:	e00d      	b.n	800471c <__iar_annotation$$branch+0x1a2>
 8004700:	1c52      	adds	r2, r2, #1
 8004702:	9800      	ldr	r0, [sp, #0]
 8004704:	1d00      	adds	r0, r0, #4
 8004706:	0859      	lsrs	r1, r3, #1
 8004708:	0089      	lsls	r1, r1, #2
 800470a:	1840      	adds	r0, r0, r1
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	6801      	ldr	r1, [r0, #0]
 8004710:	9e05      	ldr	r6, [sp, #20]
 8004712:	d5ef      	bpl.n	80046f4 <__iar_annotation$$branch+0x17a>
 8004714:	005f      	lsls	r7, r3, #1
 8004716:	5bf6      	ldrh	r6, [r6, r7]
 8004718:	4331      	orrs	r1, r6
 800471a:	6001      	str	r1, [r0, #0]
 800471c:	1c5b      	adds	r3, r3, #1
 800471e:	486d      	ldr	r0, [pc, #436]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004720:	1828      	adds	r0, r5, r0
 8004722:	7840      	ldrb	r0, [r0, #1]
 8004724:	4283      	cmp	r3, r0
 8004726:	d201      	bcs.n	800472c <__iar_annotation$$branch+0x1b2>
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d3e9      	bcc.n	8004700 <__iar_annotation$$branch+0x186>
 800472c:	1a80      	subs	r0, r0, r2
 800472e:	4969      	ldr	r1, [pc, #420]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004730:	1869      	adds	r1, r5, r1
 8004732:	7048      	strb	r0, [r1, #1]
 8004734:	b2d0      	uxtb	r0, r2
 8004736:	280c      	cmp	r0, #12
 8004738:	d111      	bne.n	800475e <__iar_annotation$$branch+0x1e4>
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	9006      	str	r0, [sp, #24]
 800473e:	2000      	movs	r0, #0
 8004740:	9002      	str	r0, [sp, #8]
 8004742:	2077      	movs	r0, #119	; 0x77
 8004744:	9001      	str	r0, [sp, #4]
 8004746:	2007      	movs	r0, #7
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	ab06      	add	r3, sp, #24
 800474c:	220f      	movs	r2, #15
 800474e:	2031      	movs	r0, #49	; 0x31
 8004750:	5c29      	ldrb	r1, [r5, r0]
 8004752:	0028      	movs	r0, r5
 8004754:	f7fc ff07 	bl	8001566 <PE_Send_DataMessage>
 8004758:	485f      	ldr	r0, [pc, #380]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 800475a:	83e8      	strh	r0, [r5, #30]
 800475c:	e1c3      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800475e:	0612      	lsls	r2, r2, #24
 8004760:	0e50      	lsrs	r0, r2, #25
 8004762:	1c80      	adds	r0, r0, #2
 8004764:	4669      	mov	r1, sp
 8004766:	7308      	strb	r0, [r1, #12]
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	e008      	b.n	800477e <__iar_annotation$$branch+0x204>
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	20c0      	movs	r0, #192	; 0xc0
 8004770:	4308      	orrs	r0, r1
 8004772:	e003      	b.n	800477c <__iar_annotation$$branch+0x202>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4006      	ands	r6, r0
 8004778:	2080      	movs	r0, #128	; 0x80
 800477a:	4330      	orrs	r0, r6
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	9006      	str	r0, [sp, #24]
 8004780:	2000      	movs	r0, #0
 8004782:	9002      	str	r0, [sp, #8]
 8004784:	2003      	movs	r0, #3
 8004786:	9001      	str	r0, [sp, #4]
 8004788:	4668      	mov	r0, sp
 800478a:	7b00      	ldrb	r0, [r0, #12]
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	ab06      	add	r3, sp, #24
 8004790:	e1a3      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004792:	2180      	movs	r1, #128	; 0x80
 8004794:	0209      	lsls	r1, r1, #8
 8004796:	8bea      	ldrh	r2, [r5, #30]
 8004798:	428a      	cmp	r2, r1
 800479a:	d100      	bne.n	800479e <__iar_annotation$$branch+0x224>
 800479c:	e15a      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	4010      	ands	r0, r2
 80047a2:	2202      	movs	r2, #2
 80047a4:	4302      	orrs	r2, r0
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	b292      	uxth	r2, r2
 80047aa:	20ff      	movs	r0, #255	; 0xff
 80047ac:	0600      	lsls	r0, r0, #24
 80047ae:	4310      	orrs	r0, r2
 80047b0:	6020      	str	r0, [r4, #0]
 80047b2:	4301      	orrs	r1, r0
 80047b4:	6021      	str	r1, [r4, #0]
 80047b6:	2701      	movs	r7, #1
 80047b8:	6868      	ldr	r0, [r5, #4]
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	0940      	lsrs	r0, r0, #5
 80047be:	4038      	ands	r0, r7
 80047c0:	4a42      	ldr	r2, [pc, #264]	; (80048cc <__iar_annotation$$branch+0x352>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	0340      	lsls	r0, r0, #13
 80047c6:	4310      	orrs	r0, r2
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	4006      	ands	r6, r0
 80047cc:	2040      	movs	r0, #64	; 0x40
 80047ce:	4330      	orrs	r0, r6
 80047d0:	6020      	str	r0, [r4, #0]
 80047d2:	aa03      	add	r2, sp, #12
 80047d4:	a905      	add	r1, sp, #20
 80047d6:	7c28      	ldrb	r0, [r5, #16]
 80047d8:	68eb      	ldr	r3, [r5, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4798      	blx	r3
 80047de:	211c      	movs	r1, #28
 80047e0:	a806      	add	r0, sp, #24
 80047e2:	f016 fa68 	bl	801acb6 <__aeabi_memclr>
 80047e6:	2100      	movs	r1, #0
 80047e8:	2200      	movs	r2, #0
 80047ea:	a806      	add	r0, sp, #24
 80047ec:	002c      	movs	r4, r5
 80047ee:	e016      	b.n	800481e <__iar_annotation$$branch+0x2a4>
 80047f0:	004d      	lsls	r5, r1, #1
 80047f2:	5b75      	ldrh	r5, [r6, r5]
 80047f4:	042d      	lsls	r5, r5, #16
 80047f6:	4666      	mov	r6, ip
 80047f8:	4335      	orrs	r5, r6
 80047fa:	601d      	str	r5, [r3, #0]
 80047fc:	e00e      	b.n	800481c <__iar_annotation$$branch+0x2a2>
 80047fe:	1c52      	adds	r2, r2, #1
 8004800:	1d03      	adds	r3, r0, #4
 8004802:	084d      	lsrs	r5, r1, #1
 8004804:	00ad      	lsls	r5, r5, #2
 8004806:	195b      	adds	r3, r3, r5
 8004808:	4239      	tst	r1, r7
 800480a:	681e      	ldr	r6, [r3, #0]
 800480c:	46b4      	mov	ip, r6
 800480e:	9e05      	ldr	r6, [sp, #20]
 8004810:	d0ee      	beq.n	80047f0 <__iar_annotation$$branch+0x276>
 8004812:	004d      	lsls	r5, r1, #1
 8004814:	5b75      	ldrh	r5, [r6, r5]
 8004816:	4666      	mov	r6, ip
 8004818:	432e      	orrs	r6, r5
 800481a:	601e      	str	r6, [r3, #0]
 800481c:	1c49      	adds	r1, r1, #1
 800481e:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004820:	18e3      	adds	r3, r4, r3
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	4299      	cmp	r1, r3
 8004826:	d201      	bcs.n	800482c <__iar_annotation$$branch+0x2b2>
 8004828:	290c      	cmp	r1, #12
 800482a:	d3e8      	bcc.n	80047fe <__iar_annotation$$branch+0x284>
 800482c:	1a98      	subs	r0, r3, r2
 800482e:	4929      	ldr	r1, [pc, #164]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004830:	1861      	adds	r1, r4, r1
 8004832:	7048      	strb	r0, [r1, #1]
 8004834:	b2d0      	uxtb	r0, r2
 8004836:	280c      	cmp	r0, #12
 8004838:	d10f      	bne.n	800485a <__iar_annotation$$branch+0x2e0>
 800483a:	2000      	movs	r0, #0
 800483c:	9002      	str	r0, [sp, #8]
 800483e:	2077      	movs	r0, #119	; 0x77
 8004840:	9001      	str	r0, [sp, #4]
 8004842:	2007      	movs	r0, #7
 8004844:	9000      	str	r0, [sp, #0]
 8004846:	ab06      	add	r3, sp, #24
 8004848:	220f      	movs	r2, #15
 800484a:	2031      	movs	r0, #49	; 0x31
 800484c:	5c21      	ldrb	r1, [r4, r0]
 800484e:	0020      	movs	r0, r4
 8004850:	f7fc fe89 	bl	8001566 <PE_Send_DataMessage>
 8004854:	4820      	ldr	r0, [pc, #128]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 8004856:	83e0      	strh	r0, [r4, #30]
 8004858:	e145      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800485a:	2000      	movs	r0, #0
 800485c:	9002      	str	r0, [sp, #8]
 800485e:	2003      	movs	r0, #3
 8004860:	9001      	str	r0, [sp, #4]
 8004862:	0610      	lsls	r0, r2, #24
 8004864:	0e40      	lsrs	r0, r0, #25
 8004866:	1c80      	adds	r0, r0, #2
 8004868:	b2c0      	uxtb	r0, r0
 800486a:	9000      	str	r0, [sp, #0]
 800486c:	ab06      	add	r3, sp, #24
 800486e:	220f      	movs	r2, #15
 8004870:	2031      	movs	r0, #49	; 0x31
 8004872:	5c21      	ldrb	r1, [r4, r0]
 8004874:	0020      	movs	r0, r4
 8004876:	e134      	b.n	8004ae2 <__iar_annotation$$branch+0x568>
 8004878:	2201      	movs	r2, #1
 800487a:	9206      	str	r2, [sp, #24]
 800487c:	03d2      	lsls	r2, r2, #15
 800487e:	8beb      	ldrh	r3, [r5, #30]
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <__iar_annotation$$branch+0x30c>
 8004884:	e3c1      	b.n	800500a <__iar_annotation$$branch+0xa90>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4018      	ands	r0, r3
 800488a:	2303      	movs	r3, #3
 800488c:	4303      	orrs	r3, r0
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	6868      	ldr	r0, [r5, #4]
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	0698      	lsls	r0, r3, #26
 800489a:	0fc0      	lsrs	r0, r0, #31
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <__iar_annotation$$branch+0x352>)
 800489e:	4013      	ands	r3, r2
 80048a0:	0340      	lsls	r0, r0, #13
 80048a2:	4318      	orrs	r0, r3
 80048a4:	6020      	str	r0, [r4, #0]
 80048a6:	686a      	ldr	r2, [r5, #4]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4011      	ands	r1, r2
 80048ac:	2909      	cmp	r1, #9
 80048ae:	d037      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b0:	68e9      	ldr	r1, [r5, #12]
 80048b2:	688f      	ldr	r7, [r1, #8]
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	d033      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b8:	ab03      	add	r3, sp, #12
 80048ba:	aa05      	add	r2, sp, #20
 80048bc:	0c01      	lsrs	r1, r0, #16
 80048be:	7c28      	ldrb	r0, [r5, #16]
 80048c0:	47b8      	blx	r7
 80048c2:	2803      	cmp	r0, #3
 80048c4:	d00a      	beq.n	80048dc <__iar_annotation$$branch+0x362>
 80048c6:	280f      	cmp	r0, #15
 80048c8:	d00d      	beq.n	80048e6 <__iar_annotation$$branch+0x36c>
 80048ca:	e029      	b.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048cc:	ffff9fff 	.word	0xffff9fff
 80048d0:	000004ad 	.word	0x000004ad
 80048d4:	000004ac 	.word	0x000004ac
 80048d8:	0000800f 	.word	0x0000800f
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	21c0      	movs	r1, #192	; 0xc0
 80048e0:	4301      	orrs	r1, r0
 80048e2:	6021      	str	r1, [r4, #0]
 80048e4:	e023      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 80048e6:	4668      	mov	r0, sp
 80048e8:	7b00      	ldrb	r0, [r0, #12]
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d018      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048ee:	4668      	mov	r0, sp
 80048f0:	7b02      	ldrb	r2, [r0, #12]
 80048f2:	2a07      	cmp	r2, #7
 80048f4:	d214      	bcs.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	4006      	ands	r6, r0
 80048fa:	2040      	movs	r0, #64	; 0x40
 80048fc:	4330      	orrs	r0, r6
 80048fe:	6020      	str	r0, [r4, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	9806      	ldr	r0, [sp, #24]
 8004904:	4293      	cmp	r3, r2
 8004906:	d211      	bcs.n	800492c <__iar_annotation$$branch+0x3b2>
 8004908:	9905      	ldr	r1, [sp, #20]
 800490a:	6809      	ldr	r1, [r1, #0]
 800490c:	ae07      	add	r6, sp, #28
 800490e:	1d36      	adds	r6, r6, #4
 8004910:	009f      	lsls	r7, r3, #2
 8004912:	51f1      	str	r1, [r6, r7]
 8004914:	9905      	ldr	r1, [sp, #20]
 8004916:	1d09      	adds	r1, r1, #4
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	1c40      	adds	r0, r0, #1
 800491c:	1c5b      	adds	r3, r3, #1
 800491e:	e7f1      	b.n	8004904 <__iar_annotation$$branch+0x38a>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4006      	ands	r6, r0
 8004924:	2080      	movs	r0, #128	; 0x80
 8004926:	4330      	orrs	r0, r6
 8004928:	6020      	str	r0, [r4, #0]
 800492a:	e000      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 800492c:	9006      	str	r0, [sp, #24]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	9007      	str	r0, [sp, #28]
 8004932:	2000      	movs	r0, #0
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	2003      	movs	r0, #3
 8004938:	9001      	str	r0, [sp, #4]
 800493a:	9806      	ldr	r0, [sp, #24]
 800493c:	9000      	str	r0, [sp, #0]
 800493e:	ab07      	add	r3, sp, #28
 8004940:	e0cb      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	0209      	lsls	r1, r1, #8
 8004946:	8bea      	ldrh	r2, [r5, #30]
 8004948:	428a      	cmp	r2, r1
 800494a:	d100      	bne.n	800494e <__iar_annotation$$branch+0x3d4>
 800494c:	e35d      	b.n	800500a <__iar_annotation$$branch+0xa90>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	4010      	ands	r0, r2
 8004952:	2204      	movs	r2, #4
 8004954:	4302      	orrs	r2, r0
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	4311      	orrs	r1, r2
 800495a:	6021      	str	r1, [r4, #0]
 800495c:	2001      	movs	r0, #1
 800495e:	686a      	ldr	r2, [r5, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	0952      	lsrs	r2, r2, #5
 8004964:	4002      	ands	r2, r0
 8004966:	4ba6      	ldr	r3, [pc, #664]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004968:	400b      	ands	r3, r1
 800496a:	0351      	lsls	r1, r2, #13
 800496c:	4319      	orrs	r1, r3
 800496e:	6021      	str	r1, [r4, #0]
 8004970:	686a      	ldr	r2, [r5, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	08d2      	lsrs	r2, r2, #3
 8004976:	4010      	ands	r0, r2
 8004978:	d152      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 800497a:	68e8      	ldr	r0, [r5, #12]
 800497c:	68c3      	ldr	r3, [r0, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04e      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004982:	2707      	movs	r7, #7
 8004984:	0a0a      	lsrs	r2, r1, #8
 8004986:	403a      	ands	r2, r7
 8004988:	0c09      	lsrs	r1, r1, #16
 800498a:	7c28      	ldrb	r0, [r5, #16]
 800498c:	4798      	blx	r3
 800498e:	2803      	cmp	r0, #3
 8004990:	d041      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 8004992:	280f      	cmp	r0, #15
 8004994:	d144      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	4006      	ands	r6, r0
 800499a:	2040      	movs	r0, #64	; 0x40
 800499c:	4330      	orrs	r0, r6
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	0a00      	lsrs	r0, r0, #8
 80049a2:	4007      	ands	r7, r0
 80049a4:	6968      	ldr	r0, [r5, #20]
 80049a6:	4940      	ldr	r1, [pc, #256]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 80049a8:	4001      	ands	r1, r0
 80049aa:	01b8      	lsls	r0, r7, #6
 80049ac:	4308      	orrs	r0, r1
 80049ae:	6168      	str	r0, [r5, #20]
 80049b0:	e03b      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	0209      	lsls	r1, r1, #8
 80049b6:	8bea      	ldrh	r2, [r5, #30]
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d04b      	beq.n	8004a54 <__iar_annotation$$branch+0x4da>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	4010      	ands	r0, r2
 80049c0:	2205      	movs	r2, #5
 80049c2:	4302      	orrs	r2, r0
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	6021      	str	r1, [r4, #0]
 80049ca:	2001      	movs	r0, #1
 80049cc:	686a      	ldr	r2, [r5, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	0952      	lsrs	r2, r2, #5
 80049d2:	4002      	ands	r2, r0
 80049d4:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <__iar_annotation$$branch+0x686>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	0351      	lsls	r1, r2, #13
 80049da:	4319      	orrs	r1, r3
 80049dc:	6021      	str	r1, [r4, #0]
 80049de:	686a      	ldr	r2, [r5, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	08d2      	lsrs	r2, r2, #3
 80049e4:	4010      	ands	r0, r2
 80049e6:	d11b      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049e8:	68e8      	ldr	r0, [r5, #12]
 80049ea:	6903      	ldr	r3, [r0, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049f0:	0548      	lsls	r0, r1, #21
 80049f2:	0f42      	lsrs	r2, r0, #29
 80049f4:	0c09      	lsrs	r1, r1, #16
 80049f6:	7c28      	ldrb	r0, [r5, #16]
 80049f8:	4798      	blx	r3
 80049fa:	2803      	cmp	r0, #3
 80049fc:	d00b      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 80049fe:	280f      	cmp	r0, #15
 8004a00:	d10e      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	4006      	ands	r6, r0
 8004a06:	2040      	movs	r0, #64	; 0x40
 8004a08:	4330      	orrs	r0, r6
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	6968      	ldr	r0, [r5, #20]
 8004a0e:	4926      	ldr	r1, [pc, #152]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 8004a10:	4001      	ands	r1, r0
 8004a12:	6169      	str	r1, [r5, #20]
 8004a14:	e009      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	21c0      	movs	r1, #192	; 0xc0
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	e004      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	4006      	ands	r6, r0
 8004a24:	2080      	movs	r0, #128	; 0x80
 8004a26:	4330      	orrs	r0, r6
 8004a28:	6020      	str	r0, [r4, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	9002      	str	r0, [sp, #8]
 8004a2e:	2003      	movs	r0, #3
 8004a30:	9001      	str	r0, [sp, #4]
 8004a32:	2001      	movs	r0, #1
 8004a34:	9000      	str	r0, [sp, #0]
 8004a36:	0023      	movs	r3, r4
 8004a38:	220f      	movs	r2, #15
 8004a3a:	2031      	movs	r0, #49	; 0x31
 8004a3c:	5c29      	ldrb	r1, [r5, r0]
 8004a3e:	0028      	movs	r0, r5
 8004a40:	f7fc fd91 	bl	8001566 <PE_Send_DataMessage>
 8004a44:	e04f      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004a46:	2001      	movs	r0, #1
 8004a48:	4669      	mov	r1, sp
 8004a4a:	7308      	strb	r0, [r1, #12]
 8004a4c:	8be8      	ldrh	r0, [r5, #30]
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	0209      	lsls	r1, r1, #8
 8004a52:	4288      	cmp	r0, r1
 8004a54:	d100      	bne.n	8004a58 <__iar_annotation$$branch+0x4de>
 8004a56:	e3ab      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8004a58:	68e8      	ldr	r0, [r5, #12]
 8004a5a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d02a      	beq.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a60:	4868      	ldr	r0, [pc, #416]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a62:	182b      	adds	r3, r5, r0
 8004a64:	3018      	adds	r0, #24
 8004a66:	182a      	adds	r2, r5, r0
 8004a68:	7820      	ldrb	r0, [r4, #0]
 8004a6a:	06c1      	lsls	r1, r0, #27
 8004a6c:	0ec9      	lsrs	r1, r1, #27
 8004a6e:	7c28      	ldrb	r0, [r5, #16]
 8004a70:	47b8      	blx	r7
 8004a72:	2803      	cmp	r0, #3
 8004a74:	d01a      	beq.n	8004aac <__iar_annotation$$branch+0x532>
 8004a76:	280f      	cmp	r0, #15
 8004a78:	d11d      	bne.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	4006      	ands	r6, r0
 8004a7e:	2040      	movs	r0, #64	; 0x40
 8004a80:	4330      	orrs	r0, r6
 8004a82:	6020      	str	r0, [r4, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	4668      	mov	r0, sp
 8004a88:	7b00      	ldrb	r0, [r0, #12]
 8004a8a:	495f      	ldr	r1, [pc, #380]	; (8004c08 <__iar_annotation$$branch+0x68e>)
 8004a8c:	5c69      	ldrb	r1, [r5, r1]
 8004a8e:	428a      	cmp	r2, r1
 8004a90:	d217      	bcs.n	8004ac2 <__iar_annotation$$branch+0x548>
 8004a92:	0091      	lsls	r1, r2, #2
 8004a94:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a96:	18eb      	adds	r3, r5, r3
 8004a98:	585b      	ldr	r3, [r3, r1]
 8004a9a:	ae05      	add	r6, sp, #20
 8004a9c:	1d36      	adds	r6, r6, #4
 8004a9e:	5073      	str	r3, [r6, r1]
 8004aa0:	1c40      	adds	r0, r0, #1
 8004aa2:	1c52      	adds	r2, r2, #1
 8004aa4:	e7f1      	b.n	8004a8a <__iar_annotation$$branch+0x510>
 8004aa6:	bf00      	nop
 8004aa8:	fffffe3f 	.word	0xfffffe3f
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	21c0      	movs	r1, #192	; 0xc0
 8004ab0:	4301      	orrs	r1, r0
 8004ab2:	6021      	str	r1, [r4, #0]
 8004ab4:	e007      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	4006      	ands	r6, r0
 8004aba:	2080      	movs	r0, #128	; 0x80
 8004abc:	4330      	orrs	r0, r6
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	e001      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ac2:	4669      	mov	r1, sp
 8004ac4:	7308      	strb	r0, [r1, #12]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	9005      	str	r0, [sp, #20]
 8004aca:	2000      	movs	r0, #0
 8004acc:	9002      	str	r0, [sp, #8]
 8004ace:	2003      	movs	r0, #3
 8004ad0:	9001      	str	r0, [sp, #4]
 8004ad2:	4668      	mov	r0, sp
 8004ad4:	7b00      	ldrb	r0, [r0, #12]
 8004ad6:	9000      	str	r0, [sp, #0]
 8004ad8:	ab05      	add	r3, sp, #20
 8004ada:	220f      	movs	r2, #15
 8004adc:	2031      	movs	r0, #49	; 0x31
 8004ade:	5c29      	ldrb	r1, [r5, r0]
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	f7fc fd40 	bl	8001566 <PE_Send_DataMessage>
 8004ae6:	e3b9      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004ae8:	2101      	movs	r1, #1
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	4010      	ands	r0, r2
 8004aee:	4308      	orrs	r0, r1
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	03ca      	lsls	r2, r1, #15
 8004af4:	4302      	orrs	r2, r0
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	6868      	ldr	r0, [r5, #4]
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	0943      	lsrs	r3, r0, #5
 8004afe:	400b      	ands	r3, r1
 8004b00:	483f      	ldr	r0, [pc, #252]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004b02:	4010      	ands	r0, r2
 8004b04:	035a      	lsls	r2, r3, #13
 8004b06:	4302      	orrs	r2, r0
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	48bf      	ldr	r0, [pc, #764]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004b0c:	4010      	ands	r0, r2
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	4006      	ands	r6, r0
 8004b12:	6026      	str	r6, [r4, #0]
 8004b14:	b2b0      	uxth	r0, r6
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	0612      	lsls	r2, r2, #24
 8004b1a:	4302      	orrs	r2, r0
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	6868      	ldr	r0, [r5, #4]
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	0880      	lsrs	r0, r0, #2
 8004b24:	4001      	ands	r1, r0
 8004b26:	d003      	beq.n	8004b30 <__iar_annotation$$branch+0x5b6>
 8004b28:	6968      	ldr	r0, [r5, #20]
 8004b2a:	0741      	lsls	r1, r0, #29
 8004b2c:	0fc8      	lsrs	r0, r1, #31
 8004b2e:	e000      	b.n	8004b32 <__iar_annotation$$branch+0x5b8>
 8004b30:	2002      	movs	r0, #2
 8004b32:	9002      	str	r0, [sp, #8]
 8004b34:	2087      	movs	r0, #135	; 0x87
 8004b36:	9001      	str	r0, [sp, #4]
 8004b38:	2001      	movs	r0, #1
 8004b3a:	9000      	str	r0, [sp, #0]
 8004b3c:	0023      	movs	r3, r4
 8004b3e:	220f      	movs	r2, #15
 8004b40:	2031      	movs	r0, #49	; 0x31
 8004b42:	5c29      	ldrb	r1, [r5, r0]
 8004b44:	0028      	movs	r0, r5
 8004b46:	f7fc fd0e 	bl	8001566 <PE_Send_DataMessage>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d1cb      	bne.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004b4e:	2050      	movs	r0, #80	; 0x50
 8004b50:	e0e8      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004b52:	2031      	movs	r0, #49	; 0x31
 8004b54:	5c28      	ldrb	r0, [r5, r0]
 8004b56:	f7fb ff37 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004b5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b5c:	7809      	ldrb	r1, [r1, #0]
 8004b5e:	4281      	cmp	r1, r0
 8004b60:	d000      	beq.n	8004b64 <__iar_annotation$$branch+0x5ea>
 8004b62:	e245      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b64:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004b66:	0bc2      	lsrs	r2, r0, #15
 8004b68:	d176      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b6a:	0b02      	lsrs	r2, r0, #12
 8004b6c:	0752      	lsls	r2, r2, #29
 8004b6e:	d012      	beq.n	8004b96 <__iar_annotation$$branch+0x61c>
 8004b70:	06c0      	lsls	r0, r0, #27
 8004b72:	0ec0      	lsrs	r0, r0, #27
 8004b74:	280f      	cmp	r0, #15
 8004b76:	d16f      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b78:	2914      	cmp	r1, #20
 8004b7a:	d005      	beq.n	8004b88 <__iar_annotation$$branch+0x60e>
 8004b7c:	2014      	movs	r0, #20
 8004b7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b80:	7008      	strb	r0, [r1, #0]
 8004b82:	0028      	movs	r0, r5
 8004b84:	f7fb fee7 	bl	8000956 <PE_Clear_RxEvent>
 8004b88:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004b8a:	7881      	ldrb	r1, [r0, #2]
 8004b8c:	06ca      	lsls	r2, r1, #27
 8004b8e:	0ed2      	lsrs	r2, r2, #27
 8004b90:	2a01      	cmp	r2, #1
 8004b92:	d161      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b94:	098c      	lsrs	r4, r1, #6
 8004b96:	d100      	bne.n	8004b9a <__iar_annotation$$branch+0x620>
 8004b98:	e22a      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b9a:	68e9      	ldr	r1, [r5, #12]
 8004b9c:	6949      	ldr	r1, [r1, #20]
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d100      	bne.n	8004ba4 <__iar_annotation$$branch+0x62a>
 8004ba2:	e2e3      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ba4:	2103      	movs	r1, #3
 8004ba6:	4021      	ands	r1, r4
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d000      	beq.n	8004bae <__iar_annotation$$branch+0x634>
 8004bac:	e2de      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8004bb0:	1d81      	adds	r1, r0, #6
 8004bb2:	7c28      	ldrb	r0, [r5, #16]
 8004bb4:	f000 fc04 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d108      	bne.n	8004bce <__iar_annotation$$branch+0x654>
 8004bbc:	ab0b      	add	r3, sp, #44	; 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	7c28      	ldrb	r0, [r5, #16]
 8004bc4:	68ec      	ldr	r4, [r5, #12]
 8004bc6:	6964      	ldr	r4, [r4, #20]
 8004bc8:	47a0      	blx	r4
 8004bca:	2151      	movs	r1, #81	; 0x51
 8004bcc:	e0ec      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bce:	211b      	movs	r1, #27
 8004bd0:	e0ea      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	400e      	ands	r6, r1
 8004bd6:	6026      	str	r6, [r4, #0]
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4030      	ands	r0, r6
 8004bdc:	4308      	orrs	r0, r1
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	b280      	uxth	r0, r0
 8004be2:	22ff      	movs	r2, #255	; 0xff
 8004be4:	0612      	lsls	r2, r2, #24
 8004be6:	4302      	orrs	r2, r0
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	0388      	lsls	r0, r1, #14
 8004bec:	4310      	orrs	r0, r2
 8004bee:	6020      	str	r0, [r4, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	686b      	ldr	r3, [r5, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	095e      	lsrs	r6, r3, #5
 8004bf8:	4016      	ands	r6, r2
 8004bfa:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004bfc:	e006      	b.n	8004c0c <__iar_annotation$$branch+0x692>
 8004bfe:	bf00      	nop
 8004c00:	ffff9fff 	.word	0xffff9fff
 8004c04:	00000494 	.word	0x00000494
 8004c08:	000004ac 	.word	0x000004ac
 8004c0c:	4003      	ands	r3, r0
 8004c0e:	0370      	lsls	r0, r6, #13
 8004c10:	4318      	orrs	r0, r3
 8004c12:	6020      	str	r0, [r4, #0]
 8004c14:	4b7c      	ldr	r3, [pc, #496]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004c16:	4003      	ands	r3, r0
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	6868      	ldr	r0, [r5, #4]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	0880      	lsrs	r0, r0, #2
 8004c20:	4002      	ands	r2, r0
 8004c22:	d002      	beq.n	8004c2a <__iar_annotation$$branch+0x6b0>
 8004c24:	6968      	ldr	r0, [r5, #20]
 8004c26:	0740      	lsls	r0, r0, #29
 8004c28:	0fc1      	lsrs	r1, r0, #31
 8004c2a:	9102      	str	r1, [sp, #8]
 8004c2c:	2089      	movs	r0, #137	; 0x89
 8004c2e:	9001      	str	r0, [sp, #4]
 8004c30:	2001      	movs	r0, #1
 8004c32:	9000      	str	r0, [sp, #0]
 8004c34:	0023      	movs	r3, r4
 8004c36:	220f      	movs	r2, #15
 8004c38:	2031      	movs	r0, #49	; 0x31
 8004c3a:	5c29      	ldrb	r1, [r5, r0]
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	f7fc fc92 	bl	8001566 <PE_Send_DataMessage>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d172      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004c46:	2052      	movs	r0, #82	; 0x52
 8004c48:	e06c      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004c4a:	2031      	movs	r0, #49	; 0x31
 8004c4c:	5c28      	ldrb	r0, [r5, r0]
 8004c4e:	f7fb febb 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004c52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c54:	7809      	ldrb	r1, [r1, #0]
 8004c56:	4281      	cmp	r1, r0
 8004c58:	d000      	beq.n	8004c5c <__iar_annotation$$branch+0x6e2>
 8004c5a:	e1c9      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004c5c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004c5e:	0bc2      	lsrs	r2, r0, #15
 8004c60:	d1fa      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c62:	0b02      	lsrs	r2, r0, #12
 8004c64:	0752      	lsls	r2, r2, #29
 8004c66:	d06f      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c68:	06c0      	lsls	r0, r0, #27
 8004c6a:	0ec0      	lsrs	r0, r0, #27
 8004c6c:	280f      	cmp	r0, #15
 8004c6e:	d1f3      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c70:	2914      	cmp	r1, #20
 8004c72:	d005      	beq.n	8004c80 <__iar_annotation$$branch+0x706>
 8004c74:	2014      	movs	r0, #20
 8004c76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c78:	7008      	strb	r0, [r1, #0]
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7fb fe6b 	bl	8000956 <PE_Clear_RxEvent>
 8004c80:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004c82:	7881      	ldrb	r1, [r0, #2]
 8004c84:	06ca      	lsls	r2, r1, #27
 8004c86:	0ed2      	lsrs	r2, r2, #27
 8004c88:	2a02      	cmp	r2, #2
 8004c8a:	d1e5      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c8c:	060c      	lsls	r4, r1, #24
 8004c8e:	d05b      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c90:	68e9      	ldr	r1, [r5, #12]
 8004c92:	6989      	ldr	r1, [r1, #24]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d100      	bne.n	8004c9a <__iar_annotation$$branch+0x720>
 8004c98:	e268      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c9c:	1d81      	adds	r1, r0, #6
 8004c9e:	7c28      	ldrb	r0, [r5, #16]
 8004ca0:	f000 fc55 	bl	800554e <PE_SVDM_CheckSVIDs>
 8004ca4:	ab0b      	add	r3, sp, #44	; 0x2c
 8004ca6:	0fa2      	lsrs	r2, r4, #30
 8004ca8:	2031      	movs	r0, #49	; 0x31
 8004caa:	5c29      	ldrb	r1, [r5, r0]
 8004cac:	7c28      	ldrb	r0, [r5, #16]
 8004cae:	68ec      	ldr	r4, [r5, #12]
 8004cb0:	69a4      	ldr	r4, [r4, #24]
 8004cb2:	47a0      	blx	r4
 8004cb4:	2153      	movs	r1, #83	; 0x53
 8004cb6:	e077      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	400e      	ands	r6, r1
 8004cbc:	6026      	str	r6, [r4, #0]
 8004cbe:	4030      	ands	r0, r6
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	4301      	orrs	r1, r0
 8004cc4:	6021      	str	r1, [r4, #0]
 8004cc6:	8920      	ldrh	r0, [r4, #8]
 8004cc8:	b28a      	uxth	r2, r1
 8004cca:	0401      	lsls	r1, r0, #16
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	2080      	movs	r0, #128	; 0x80
 8004cd2:	0200      	lsls	r0, r0, #8
 8004cd4:	4308      	orrs	r0, r1
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	686a      	ldr	r2, [r5, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	0952      	lsrs	r2, r2, #5
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	4b9e      	ldr	r3, [pc, #632]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ce4:	4003      	ands	r3, r0
 8004ce6:	0350      	lsls	r0, r2, #13
 8004ce8:	4318      	orrs	r0, r3
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	4a46      	ldr	r2, [pc, #280]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004cee:	4002      	ands	r2, r0
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	6868      	ldr	r0, [r5, #4]
 8004cf4:	6800      	ldr	r0, [r0, #0]
 8004cf6:	0880      	lsrs	r0, r0, #2
 8004cf8:	4001      	ands	r1, r0
 8004cfa:	d003      	beq.n	8004d04 <__iar_annotation$$branch+0x78a>
 8004cfc:	6968      	ldr	r0, [r5, #20]
 8004cfe:	0741      	lsls	r1, r0, #29
 8004d00:	0fc8      	lsrs	r0, r1, #31
 8004d02:	e000      	b.n	8004d06 <__iar_annotation$$branch+0x78c>
 8004d04:	2002      	movs	r0, #2
 8004d06:	9002      	str	r0, [sp, #8]
 8004d08:	208b      	movs	r0, #139	; 0x8b
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	9000      	str	r0, [sp, #0]
 8004d10:	0023      	movs	r3, r4
 8004d12:	220f      	movs	r2, #15
 8004d14:	2031      	movs	r0, #49	; 0x31
 8004d16:	5c29      	ldrb	r1, [r5, r0]
 8004d18:	0028      	movs	r0, r5
 8004d1a:	f7fc fc24 	bl	8001566 <PE_Send_DataMessage>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d104      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004d22:	2053      	movs	r0, #83	; 0x53
 8004d24:	7728      	strb	r0, [r5, #28]
 8004d26:	488e      	ldr	r0, [pc, #568]	; (8004f60 <__iar_annotation$$branch+0x9e6>)
 8004d28:	83e8      	strh	r0, [r5, #30]
 8004d2a:	9704      	str	r7, [sp, #16]
 8004d2c:	e296      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004d2e:	2031      	movs	r0, #49	; 0x31
 8004d30:	5c28      	ldrb	r0, [r5, r0]
 8004d32:	f7fb fe49 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004d36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d38:	7809      	ldrb	r1, [r1, #0]
 8004d3a:	4281      	cmp	r1, r0
 8004d3c:	d18c      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d3e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004d40:	0bc2      	lsrs	r2, r0, #15
 8004d42:	d189      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d44:	0b02      	lsrs	r2, r0, #12
 8004d46:	0752      	lsls	r2, r2, #29
 8004d48:	d100      	bne.n	8004d4c <__iar_annotation$$branch+0x7d2>
 8004d4a:	e151      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d4c:	06c0      	lsls	r0, r0, #27
 8004d4e:	0ec0      	lsrs	r0, r0, #27
 8004d50:	280f      	cmp	r0, #15
 8004d52:	d000      	beq.n	8004d56 <__iar_annotation$$branch+0x7dc>
 8004d54:	e14c      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d56:	2914      	cmp	r1, #20
 8004d58:	d005      	beq.n	8004d66 <__iar_annotation$$branch+0x7ec>
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d5e:	7008      	strb	r0, [r1, #0]
 8004d60:	0028      	movs	r0, r5
 8004d62:	f7fb fdf8 	bl	8000956 <PE_Clear_RxEvent>
 8004d66:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004d68:	7881      	ldrb	r1, [r0, #2]
 8004d6a:	06ca      	lsls	r2, r1, #27
 8004d6c:	0ed2      	lsrs	r2, r2, #27
 8004d6e:	2a03      	cmp	r2, #3
 8004d70:	d1ef      	bne.n	8004d52 <__iar_annotation$$branch+0x7d8>
 8004d72:	098e      	lsrs	r6, r1, #6
 8004d74:	d0e8      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004d76:	68e9      	ldr	r1, [r5, #12]
 8004d78:	69c9      	ldr	r1, [r1, #28]
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d017      	beq.n	8004dae <__iar_annotation$$branch+0x834>
 8004d7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d80:	1d82      	adds	r2, r0, #6
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	0c01      	lsrs	r1, r0, #16
 8004d86:	7c28      	ldrb	r0, [r5, #16]
 8004d88:	f000 fc22 	bl	80055d0 <PE_SVDM_CheckModes>
 8004d8c:	2403      	movs	r4, #3
 8004d8e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d90:	2203      	movs	r2, #3
 8004d92:	4032      	ands	r2, r6
 8004d94:	2031      	movs	r0, #49	; 0x31
 8004d96:	5c29      	ldrb	r1, [r5, r0]
 8004d98:	7c28      	ldrb	r0, [r5, #16]
 8004d9a:	68ef      	ldr	r7, [r5, #12]
 8004d9c:	69ff      	ldr	r7, [r7, #28]
 8004d9e:	47b8      	blx	r7
 8004da0:	4034      	ands	r4, r6
 8004da2:	2c01      	cmp	r4, #1
 8004da4:	d103      	bne.n	8004dae <__iar_annotation$$branch+0x834>
 8004da6:	2154      	movs	r1, #84	; 0x54
 8004da8:	7c28      	ldrb	r0, [r5, #16]
 8004daa:	f7fb fb69 	bl	8000480 <USBPD_PE_Notification>
 8004dae:	e1dd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	400e      	ands	r6, r1
 8004db4:	6026      	str	r6, [r4, #0]
 8004db6:	4030      	ands	r0, r6
 8004db8:	2104      	movs	r1, #4
 8004dba:	4301      	orrs	r1, r0
 8004dbc:	6021      	str	r1, [r4, #0]
 8004dbe:	8920      	ldrh	r0, [r4, #8]
 8004dc0:	b289      	uxth	r1, r1
 8004dc2:	0400      	lsls	r0, r0, #16
 8004dc4:	4308      	orrs	r0, r1
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0209      	lsls	r1, r1, #8
 8004dcc:	4301      	orrs	r1, r0
 8004dce:	6021      	str	r1, [r4, #0]
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	686a      	ldr	r2, [r5, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	0952      	lsrs	r2, r2, #5
 8004dd8:	4002      	ands	r2, r0
 8004dda:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ddc:	400b      	ands	r3, r1
 8004dde:	0351      	lsls	r1, r2, #13
 8004de0:	4319      	orrs	r1, r3
 8004de2:	6021      	str	r1, [r4, #0]
 8004de4:	696a      	ldr	r2, [r5, #20]
 8004de6:	05d2      	lsls	r2, r2, #23
 8004de8:	0f52      	lsrs	r2, r2, #29
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	0211      	lsls	r1, r2, #8
 8004df0:	4319      	orrs	r1, r3
 8004df2:	6021      	str	r1, [r4, #0]
 8004df4:	6869      	ldr	r1, [r5, #4]
 8004df6:	6809      	ldr	r1, [r1, #0]
 8004df8:	0889      	lsrs	r1, r1, #2
 8004dfa:	4008      	ands	r0, r1
 8004dfc:	d006      	beq.n	8004e0c <__iar_annotation$$branch+0x892>
 8004dfe:	6968      	ldr	r0, [r5, #20]
 8004e00:	0741      	lsls	r1, r0, #29
 8004e02:	0fc8      	lsrs	r0, r1, #31
 8004e04:	e003      	b.n	8004e0e <__iar_annotation$$branch+0x894>
 8004e06:	bf00      	nop
 8004e08:	fffff8ff 	.word	0xfffff8ff
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	9002      	str	r0, [sp, #8]
 8004e10:	208c      	movs	r0, #140	; 0x8c
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2001      	movs	r0, #1
 8004e16:	9000      	str	r0, [sp, #0]
 8004e18:	0023      	movs	r3, r4
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	2031      	movs	r0, #49	; 0x31
 8004e1e:	5c29      	ldrb	r1, [r5, r0]
 8004e20:	0028      	movs	r0, r5
 8004e22:	f7fc fba0 	bl	8001566 <PE_Send_DataMessage>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d000      	beq.n	8004e2c <__iar_annotation$$branch+0x8b2>
 8004e2a:	e217      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004e2c:	2054      	movs	r0, #84	; 0x54
 8004e2e:	7728      	strb	r0, [r5, #28]
 8004e30:	2134      	movs	r1, #52	; 0x34
 8004e32:	e08c      	b.n	8004f4e <__iar_annotation$$branch+0x9d4>
 8004e34:	2634      	movs	r6, #52	; 0x34
 8004e36:	2031      	movs	r0, #49	; 0x31
 8004e38:	5c28      	ldrb	r0, [r5, r0]
 8004e3a:	f7fb fdc5 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004e3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e40:	7809      	ldrb	r1, [r1, #0]
 8004e42:	4281      	cmp	r1, r0
 8004e44:	d144      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e46:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004e48:	0bc2      	lsrs	r2, r0, #15
 8004e4a:	d141      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e4c:	2707      	movs	r7, #7
 8004e4e:	0b02      	lsrs	r2, r0, #12
 8004e50:	423a      	tst	r2, r7
 8004e52:	d03d      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e54:	06c0      	lsls	r0, r0, #27
 8004e56:	0ec0      	lsrs	r0, r0, #27
 8004e58:	280f      	cmp	r0, #15
 8004e5a:	d139      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e5c:	2914      	cmp	r1, #20
 8004e5e:	d005      	beq.n	8004e6c <__iar_annotation$$branch+0x8f2>
 8004e60:	2014      	movs	r0, #20
 8004e62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e64:	7008      	strb	r0, [r1, #0]
 8004e66:	0028      	movs	r0, r5
 8004e68:	f7fb fd75 	bl	8000956 <PE_Clear_RxEvent>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	7728      	strb	r0, [r5, #28]
 8004e70:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004e72:	7880      	ldrb	r0, [r0, #2]
 8004e74:	06c1      	lsls	r1, r0, #27
 8004e76:	0ec9      	lsrs	r1, r1, #27
 8004e78:	2904      	cmp	r1, #4
 8004e7a:	d129      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e7c:	0980      	lsrs	r0, r0, #6
 8004e7e:	d027      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e80:	9001      	str	r0, [sp, #4]
 8004e82:	488f      	ldr	r0, [pc, #572]	; (80050c0 <__iar_annotation$$branch+0xb46>)
 8004e84:	9901      	ldr	r1, [sp, #4]
 8004e86:	2901      	cmp	r1, #1
 8004e88:	d004      	beq.n	8004e94 <__iar_annotation$$branch+0x91a>
 8004e8a:	d30e      	bcc.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e8c:	2903      	cmp	r1, #3
 8004e8e:	d008      	beq.n	8004ea2 <__iar_annotation$$branch+0x928>
 8004e90:	d302      	bcc.n	8004e98 <__iar_annotation$$branch+0x91e>
 8004e92:	e00a      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e94:	2635      	movs	r6, #53	; 0x35
 8004e96:	e008      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e98:	6969      	ldr	r1, [r5, #20]
 8004e9a:	4008      	ands	r0, r1
 8004e9c:	6168      	str	r0, [r5, #20]
 8004e9e:	2636      	movs	r6, #54	; 0x36
 8004ea0:	e003      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004ea2:	6969      	ldr	r1, [r5, #20]
 8004ea4:	4008      	ands	r0, r1
 8004ea6:	6168      	str	r0, [r5, #20]
 8004ea8:	2637      	movs	r6, #55	; 0x37
 8004eaa:	0031      	movs	r1, r6
 8004eac:	7c28      	ldrb	r0, [r5, #16]
 8004eae:	f7fb fae7 	bl	8000480 <USBPD_PE_Notification>
 8004eb2:	68e8      	ldr	r0, [r5, #12]
 8004eb4:	6a06      	ldr	r6, [r0, #32]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	d009      	beq.n	8004ece <__iar_annotation$$branch+0x954>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	0a01      	lsrs	r1, r0, #8
 8004ebe:	400f      	ands	r7, r1
 8004ec0:	9700      	str	r7, [sp, #0]
 8004ec2:	0c03      	lsrs	r3, r0, #16
 8004ec4:	9a01      	ldr	r2, [sp, #4]
 8004ec6:	2031      	movs	r0, #49	; 0x31
 8004ec8:	5c29      	ldrb	r1, [r5, r0]
 8004eca:	7c28      	ldrb	r0, [r5, #16]
 8004ecc:	47b0      	blx	r6
 8004ece:	e14d      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ed0:	5da8      	ldrb	r0, [r5, r6]
 8004ed2:	e08f      	b.n	8004ff4 <__iar_annotation$$branch+0xa7a>
 8004ed4:	6821      	ldr	r1, [r4, #0]
 8004ed6:	400e      	ands	r6, r1
 8004ed8:	6026      	str	r6, [r4, #0]
 8004eda:	4030      	ands	r0, r6
 8004edc:	2105      	movs	r1, #5
 8004ede:	4301      	orrs	r1, r0
 8004ee0:	6021      	str	r1, [r4, #0]
 8004ee2:	8920      	ldrh	r0, [r4, #8]
 8004ee4:	b289      	uxth	r1, r1
 8004ee6:	0400      	lsls	r0, r0, #16
 8004ee8:	4308      	orrs	r0, r1
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	0209      	lsls	r1, r1, #8
 8004ef0:	4301      	orrs	r1, r0
 8004ef2:	6021      	str	r1, [r4, #0]
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	686a      	ldr	r2, [r5, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	0952      	lsrs	r2, r2, #5
 8004efc:	4002      	ands	r2, r0
 8004efe:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004f00:	400b      	ands	r3, r1
 8004f02:	0351      	lsls	r1, r2, #13
 8004f04:	4319      	orrs	r1, r3
 8004f06:	6021      	str	r1, [r4, #0]
 8004f08:	696a      	ldr	r2, [r5, #20]
 8004f0a:	05d2      	lsls	r2, r2, #23
 8004f0c:	0f52      	lsrs	r2, r2, #29
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	0211      	lsls	r1, r2, #8
 8004f14:	4319      	orrs	r1, r3
 8004f16:	6021      	str	r1, [r4, #0]
 8004f18:	6869      	ldr	r1, [r5, #4]
 8004f1a:	6809      	ldr	r1, [r1, #0]
 8004f1c:	0889      	lsrs	r1, r1, #2
 8004f1e:	4008      	ands	r0, r1
 8004f20:	d003      	beq.n	8004f2a <__iar_annotation$$branch+0x9b0>
 8004f22:	6968      	ldr	r0, [r5, #20]
 8004f24:	0741      	lsls	r1, r0, #29
 8004f26:	0fc8      	lsrs	r0, r1, #31
 8004f28:	e000      	b.n	8004f2c <__iar_annotation$$branch+0x9b2>
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	208d      	movs	r0, #141	; 0x8d
 8004f30:	9001      	str	r0, [sp, #4]
 8004f32:	2001      	movs	r0, #1
 8004f34:	9000      	str	r0, [sp, #0]
 8004f36:	0023      	movs	r3, r4
 8004f38:	220f      	movs	r2, #15
 8004f3a:	2031      	movs	r0, #49	; 0x31
 8004f3c:	5c29      	ldrb	r1, [r5, r0]
 8004f3e:	0028      	movs	r0, r5
 8004f40:	f7fc fb11 	bl	8001566 <PE_Send_DataMessage>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d15e      	bne.n	8005006 <__iar_annotation$$branch+0xa8c>
 8004f48:	2055      	movs	r0, #85	; 0x55
 8004f4a:	7728      	strb	r0, [r5, #28]
 8004f4c:	2155      	movs	r1, #85	; 0x55
 8004f4e:	7c28      	ldrb	r0, [r5, #16]
 8004f50:	f7fb fa96 	bl	8000480 <USBPD_PE_Notification>
 8004f54:	48c3      	ldr	r0, [pc, #780]	; (8005264 <.text_19>)
 8004f56:	83e8      	strh	r0, [r5, #30]
 8004f58:	2032      	movs	r0, #50	; 0x32
 8004f5a:	e12c      	b.n	80051b6 <__iar_annotation$$branch+0xc3c>
 8004f5c:	ffff9fff 	.word	0xffff9fff
 8004f60:	0000801e 	.word	0x0000801e
 8004f64:	2031      	movs	r0, #49	; 0x31
 8004f66:	5c28      	ldrb	r0, [r5, r0]
 8004f68:	f7fb fd2e 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004f6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f6e:	7809      	ldrb	r1, [r1, #0]
 8004f70:	4281      	cmp	r1, r0
 8004f72:	d13d      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f74:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004f76:	0bc2      	lsrs	r2, r0, #15
 8004f78:	d13a      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f7a:	2607      	movs	r6, #7
 8004f7c:	0b02      	lsrs	r2, r0, #12
 8004f7e:	4232      	tst	r2, r6
 8004f80:	d036      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f82:	06c0      	lsls	r0, r0, #27
 8004f84:	0ec0      	lsrs	r0, r0, #27
 8004f86:	280f      	cmp	r0, #15
 8004f88:	d132      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f8a:	2914      	cmp	r1, #20
 8004f8c:	d005      	beq.n	8004f9a <__iar_annotation$$branch+0xa20>
 8004f8e:	2014      	movs	r0, #20
 8004f90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f92:	7008      	strb	r0, [r1, #0]
 8004f94:	0028      	movs	r0, r5
 8004f96:	f7fb fcde 	bl	8000956 <PE_Clear_RxEvent>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	7728      	strb	r0, [r5, #28]
 8004f9e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004fa0:	7880      	ldrb	r0, [r0, #2]
 8004fa2:	06c1      	lsls	r1, r0, #27
 8004fa4:	0ec9      	lsrs	r1, r1, #27
 8004fa6:	2905      	cmp	r1, #5
 8004fa8:	d122      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004faa:	0980      	lsrs	r0, r0, #6
 8004fac:	d020      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2801      	cmp	r0, #1
 8004fb2:	d004      	beq.n	8004fbe <__iar_annotation$$branch+0xa44>
 8004fb4:	d309      	bcc.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fb6:	2803      	cmp	r0, #3
 8004fb8:	d005      	beq.n	8004fc6 <__iar_annotation$$branch+0xa4c>
 8004fba:	d302      	bcc.n	8004fc2 <__iar_annotation$$branch+0xa48>
 8004fbc:	e005      	b.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fbe:	2156      	movs	r1, #86	; 0x56
 8004fc0:	e004      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc2:	2157      	movs	r1, #87	; 0x57
 8004fc4:	e002      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc6:	2158      	movs	r1, #88	; 0x58
 8004fc8:	e000      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fca:	2155      	movs	r1, #85	; 0x55
 8004fcc:	7c28      	ldrb	r0, [r5, #16]
 8004fce:	f7fb fa57 	bl	8000480 <USBPD_PE_Notification>
 8004fd2:	68e8      	ldr	r0, [r5, #12]
 8004fd4:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d009      	beq.n	8004fee <__iar_annotation$$branch+0xa74>
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	0a01      	lsrs	r1, r0, #8
 8004fde:	400e      	ands	r6, r1
 8004fe0:	9600      	str	r6, [sp, #0]
 8004fe2:	0c03      	lsrs	r3, r0, #16
 8004fe4:	9a01      	ldr	r2, [sp, #4]
 8004fe6:	2031      	movs	r0, #49	; 0x31
 8004fe8:	5c29      	ldrb	r1, [r5, r0]
 8004fea:	7c28      	ldrb	r0, [r5, #16]
 8004fec:	47b8      	blx	r7
 8004fee:	e0bd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ff0:	2034      	movs	r0, #52	; 0x34
 8004ff2:	5c28      	ldrb	r0, [r5, r0]
 8004ff4:	06c0      	lsls	r0, r0, #27
 8004ff6:	0ec0      	lsrs	r0, r0, #27
 8004ff8:	2810      	cmp	r0, #16
 8004ffa:	d100      	bne.n	8004ffe <__iar_annotation$$branch+0xa84>
 8004ffc:	e0bf      	b.n	800517e <__iar_annotation$$branch+0xc04>
 8004ffe:	8be8      	ldrh	r0, [r5, #30]
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	0209      	lsls	r1, r1, #8
 8005004:	4288      	cmp	r0, r1
 8005006:	d000      	beq.n	800500a <__iar_annotation$$branch+0xa90>
 8005008:	e128      	b.n	800525c <__iar_annotation$$branch+0xce2>
 800500a:	e0d1      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 800500c:	2100      	movs	r1, #0
 800500e:	466a      	mov	r2, sp
 8005010:	7311      	strb	r1, [r2, #12]
 8005012:	6821      	ldr	r1, [r4, #0]
 8005014:	400e      	ands	r6, r1
 8005016:	6026      	str	r6, [r4, #0]
 8005018:	6861      	ldr	r1, [r4, #4]
 800501a:	4030      	ands	r0, r6
 800501c:	06c9      	lsls	r1, r1, #27
 800501e:	0ec9      	lsrs	r1, r1, #27
 8005020:	4301      	orrs	r1, r0
 8005022:	6021      	str	r1, [r4, #0]
 8005024:	8920      	ldrh	r0, [r4, #8]
 8005026:	b28a      	uxth	r2, r1
 8005028:	0401      	lsls	r1, r0, #16
 800502a:	4311      	orrs	r1, r2
 800502c:	6021      	str	r1, [r4, #0]
 800502e:	2080      	movs	r0, #128	; 0x80
 8005030:	0200      	lsls	r0, r0, #8
 8005032:	4308      	orrs	r0, r1
 8005034:	6020      	str	r0, [r4, #0]
 8005036:	2601      	movs	r6, #1
 8005038:	6869      	ldr	r1, [r5, #4]
 800503a:	6809      	ldr	r1, [r1, #0]
 800503c:	0949      	lsrs	r1, r1, #5
 800503e:	4031      	ands	r1, r6
 8005040:	4aaa      	ldr	r2, [pc, #680]	; (80052ec <.text_21>)
 8005042:	4002      	ands	r2, r0
 8005044:	0348      	lsls	r0, r1, #13
 8005046:	4310      	orrs	r0, r2
 8005048:	6020      	str	r0, [r4, #0]
 800504a:	491e      	ldr	r1, [pc, #120]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 800504c:	4001      	ands	r1, r0
 800504e:	0230      	lsls	r0, r6, #8
 8005050:	4308      	orrs	r0, r1
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	9005      	str	r0, [sp, #20]
 8005056:	68e8      	ldr	r0, [r5, #12]
 8005058:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2800      	cmp	r0, #0
 800505e:	d00b      	beq.n	8005078 <__iar_annotation$$branch+0xafe>
 8005060:	a805      	add	r0, sp, #20
 8005062:	1d00      	adds	r0, r0, #4
 8005064:	9000      	str	r0, [sp, #0]
 8005066:	ab03      	add	r3, sp, #12
 8005068:	7820      	ldrb	r0, [r4, #0]
 800506a:	06c2      	lsls	r2, r0, #27
 800506c:	0ed2      	lsrs	r2, r2, #27
 800506e:	2031      	movs	r0, #49	; 0x31
 8005070:	5c29      	ldrb	r1, [r5, r0]
 8005072:	7c28      	ldrb	r0, [r5, #16]
 8005074:	9c01      	ldr	r4, [sp, #4]
 8005076:	47a0      	blx	r4
 8005078:	4668      	mov	r0, sp
 800507a:	7b00      	ldrb	r0, [r0, #12]
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	4669      	mov	r1, sp
 8005080:	7308      	strb	r0, [r1, #12]
 8005082:	6868      	ldr	r0, [r5, #4]
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	0880      	lsrs	r0, r0, #2
 8005088:	4006      	ands	r6, r0
 800508a:	d003      	beq.n	8005094 <__iar_annotation$$branch+0xb1a>
 800508c:	6968      	ldr	r0, [r5, #20]
 800508e:	0741      	lsls	r1, r0, #29
 8005090:	0fc8      	lsrs	r0, r1, #31
 8005092:	e000      	b.n	8005096 <__iar_annotation$$branch+0xb1c>
 8005094:	2002      	movs	r0, #2
 8005096:	9002      	str	r0, [sp, #8]
 8005098:	208f      	movs	r0, #143	; 0x8f
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	4668      	mov	r0, sp
 800509e:	7b00      	ldrb	r0, [r0, #12]
 80050a0:	9000      	str	r0, [sp, #0]
 80050a2:	ab05      	add	r3, sp, #20
 80050a4:	220f      	movs	r2, #15
 80050a6:	2031      	movs	r0, #49	; 0x31
 80050a8:	5c29      	ldrb	r1, [r5, r0]
 80050aa:	0028      	movs	r0, r5
 80050ac:	f7fc fa5b 	bl	8001566 <PE_Send_DataMessage>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d104      	bne.n	80050be <__iar_annotation$$branch+0xb44>
 80050b4:	205a      	movs	r0, #90	; 0x5a
 80050b6:	7728      	strb	r0, [r5, #28]
 80050b8:	48bf      	ldr	r0, [pc, #764]	; (80053b8 <.text_23>)
 80050ba:	83e8      	strh	r0, [r5, #30]
 80050bc:	9704      	str	r7, [sp, #16]
 80050be:	e0ca      	b.n	8005256 <__iar_annotation$$branch+0xcdc>
 80050c0:	fffffe3f 	.word	0xfffffe3f
 80050c4:	fffff8ff 	.word	0xfffff8ff
 80050c8:	2607      	movs	r6, #7
 80050ca:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050cc:	0b00      	lsrs	r0, r0, #12
 80050ce:	2107      	movs	r1, #7
 80050d0:	4001      	ands	r1, r0
 80050d2:	1e48      	subs	r0, r1, #1
 80050d4:	4669      	mov	r1, sp
 80050d6:	7108      	strb	r0, [r1, #4]
 80050d8:	2031      	movs	r0, #49	; 0x31
 80050da:	5c28      	ldrb	r0, [r5, r0]
 80050dc:	f7fb fc74 	bl	80009c8 <PE_Convert_SOPRxEvent>
 80050e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050e2:	7809      	ldrb	r1, [r1, #0]
 80050e4:	4281      	cmp	r1, r0
 80050e6:	d144      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050ea:	0bc2      	lsrs	r2, r0, #15
 80050ec:	d141      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050ee:	0b02      	lsrs	r2, r0, #12
 80050f0:	4232      	tst	r2, r6
 80050f2:	d03e      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050f4:	06c0      	lsls	r0, r0, #27
 80050f6:	0ec0      	lsrs	r0, r0, #27
 80050f8:	280f      	cmp	r0, #15
 80050fa:	d13a      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050fc:	2914      	cmp	r1, #20
 80050fe:	d005      	beq.n	800510c <__iar_annotation$$branch+0xb92>
 8005100:	2014      	movs	r0, #20
 8005102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005104:	7008      	strb	r0, [r1, #0]
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb fc25 	bl	8000956 <PE_Clear_RxEvent>
 800510c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800510e:	7880      	ldrb	r0, [r0, #2]
 8005110:	06c1      	lsls	r1, r0, #27
 8005112:	0ec9      	lsrs	r1, r1, #27
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	4291      	cmp	r1, r2
 8005118:	d12b      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511a:	0981      	lsrs	r1, r0, #6
 800511c:	d029      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511e:	68e9      	ldr	r1, [r5, #12]
 8005120:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005122:	2900      	cmp	r1, #0
 8005124:	d022      	beq.n	800516c <__iar_annotation$$branch+0xbf2>
 8005126:	2600      	movs	r6, #0
 8005128:	e011      	b.n	800514e <__iar_annotation$$branch+0xbd4>
 800512a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800512c:	00b2      	lsls	r2, r6, #2
 800512e:	188b      	adds	r3, r1, r2
 8005130:	799c      	ldrb	r4, [r3, #6]
 8005132:	79df      	ldrb	r7, [r3, #7]
 8005134:	023f      	lsls	r7, r7, #8
 8005136:	19e4      	adds	r4, r4, r7
 8005138:	3108      	adds	r1, #8
 800513a:	5c89      	ldrb	r1, [r1, r2]
 800513c:	0409      	lsls	r1, r1, #16
 800513e:	1861      	adds	r1, r4, r1
 8005140:	7a5a      	ldrb	r2, [r3, #9]
 8005142:	0612      	lsls	r2, r2, #24
 8005144:	1889      	adds	r1, r1, r2
 8005146:	aa05      	add	r2, sp, #20
 8005148:	00b3      	lsls	r3, r6, #2
 800514a:	50d1      	str	r1, [r2, r3]
 800514c:	1c76      	adds	r6, r6, #1
 800514e:	4669      	mov	r1, sp
 8005150:	7909      	ldrb	r1, [r1, #4]
 8005152:	428e      	cmp	r6, r1
 8005154:	d3e9      	bcc.n	800512a <__iar_annotation$$branch+0xbb0>
 8005156:	a905      	add	r1, sp, #20
 8005158:	9100      	str	r1, [sp, #0]
 800515a:	ab01      	add	r3, sp, #4
 800515c:	06c2      	lsls	r2, r0, #27
 800515e:	0ed2      	lsrs	r2, r2, #27
 8005160:	2031      	movs	r0, #49	; 0x31
 8005162:	5c29      	ldrb	r1, [r5, r0]
 8005164:	7c28      	ldrb	r0, [r5, #16]
 8005166:	68ec      	ldr	r4, [r5, #12]
 8005168:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800516a:	47a0      	blx	r4
 800516c:	2000      	movs	r0, #0
 800516e:	83e8      	strh	r0, [r5, #30]
 8005170:	e01e      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8005172:	2034      	movs	r0, #52	; 0x34
 8005174:	5c28      	ldrb	r0, [r5, r0]
 8005176:	06c0      	lsls	r0, r0, #27
 8005178:	0ec0      	lsrs	r0, r0, #27
 800517a:	2810      	cmp	r0, #16
 800517c:	d113      	bne.n	80051a6 <__iar_annotation$$branch+0xc2c>
 800517e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005180:	7800      	ldrb	r0, [r0, #0]
 8005182:	2814      	cmp	r0, #20
 8005184:	d005      	beq.n	8005192 <__iar_annotation$$branch+0xc18>
 8005186:	2014      	movs	r0, #20
 8005188:	991c      	ldr	r1, [sp, #112]	; 0x70
 800518a:	7008      	strb	r0, [r1, #0]
 800518c:	0028      	movs	r0, r5
 800518e:	f7fb fbe2 	bl	8000956 <PE_Clear_RxEvent>
 8005192:	2000      	movs	r0, #0
 8005194:	83e8      	strh	r0, [r5, #30]
 8005196:	2103      	movs	r1, #3
 8005198:	7469      	strb	r1, [r5, #17]
 800519a:	9004      	str	r0, [sp, #16]
 800519c:	2159      	movs	r1, #89	; 0x59
 800519e:	7c28      	ldrb	r0, [r5, #16]
 80051a0:	f7fb f96e 	bl	8000480 <USBPD_PE_Notification>
 80051a4:	e05a      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051a6:	8be8      	ldrh	r0, [r5, #30]
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	0209      	lsls	r1, r1, #8
 80051ac:	4288      	cmp	r0, r1
 80051ae:	d155      	bne.n	800525c <__iar_annotation$$branch+0xce2>
 80051b0:	2003      	movs	r0, #3
 80051b2:	7468      	strb	r0, [r5, #17]
 80051b4:	2000      	movs	r0, #0
 80051b6:	9004      	str	r0, [sp, #16]
 80051b8:	e050      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051ba:	2100      	movs	r1, #0
 80051bc:	466a      	mov	r2, sp
 80051be:	7311      	strb	r1, [r2, #12]
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	400e      	ands	r6, r1
 80051c4:	6026      	str	r6, [r4, #0]
 80051c6:	6861      	ldr	r1, [r4, #4]
 80051c8:	4030      	ands	r0, r6
 80051ca:	06c9      	lsls	r1, r1, #27
 80051cc:	0ec9      	lsrs	r1, r1, #27
 80051ce:	4301      	orrs	r1, r0
 80051d0:	6021      	str	r1, [r4, #0]
 80051d2:	8920      	ldrh	r0, [r4, #8]
 80051d4:	b28a      	uxth	r2, r1
 80051d6:	0401      	lsls	r1, r0, #16
 80051d8:	4311      	orrs	r1, r2
 80051da:	6021      	str	r1, [r4, #0]
 80051dc:	2080      	movs	r0, #128	; 0x80
 80051de:	0200      	lsls	r0, r0, #8
 80051e0:	4308      	orrs	r0, r1
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	2601      	movs	r6, #1
 80051e6:	6869      	ldr	r1, [r5, #4]
 80051e8:	6809      	ldr	r1, [r1, #0]
 80051ea:	0949      	lsrs	r1, r1, #5
 80051ec:	4031      	ands	r1, r6
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <.text_21>)
 80051f0:	4002      	ands	r2, r0
 80051f2:	0348      	lsls	r0, r1, #13
 80051f4:	4310      	orrs	r0, r2
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	4970      	ldr	r1, [pc, #448]	; (80053bc <.text_24>)
 80051fa:	4001      	ands	r1, r0
 80051fc:	0230      	lsls	r0, r6, #8
 80051fe:	4308      	orrs	r0, r1
 8005200:	6020      	str	r0, [r4, #0]
 8005202:	9005      	str	r0, [sp, #20]
 8005204:	68e8      	ldr	r0, [r5, #12]
 8005206:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <__iar_annotation$$branch+0xc9c>
 800520c:	a805      	add	r0, sp, #20
 800520e:	1d02      	adds	r2, r0, #4
 8005210:	a903      	add	r1, sp, #12
 8005212:	7c28      	ldrb	r0, [r5, #16]
 8005214:	4798      	blx	r3
 8005216:	4668      	mov	r0, sp
 8005218:	7b00      	ldrb	r0, [r0, #12]
 800521a:	1c40      	adds	r0, r0, #1
 800521c:	4669      	mov	r1, sp
 800521e:	7308      	strb	r0, [r1, #12]
 8005220:	6868      	ldr	r0, [r5, #4]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	0880      	lsrs	r0, r0, #2
 8005226:	4006      	ands	r6, r0
 8005228:	d003      	beq.n	8005232 <__iar_annotation$$branch+0xcb8>
 800522a:	6968      	ldr	r0, [r5, #20]
 800522c:	0741      	lsls	r1, r0, #29
 800522e:	0fc8      	lsrs	r0, r1, #31
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xcba>
 8005232:	2002      	movs	r0, #2
 8005234:	9002      	str	r0, [sp, #8]
 8005236:	2003      	movs	r0, #3
 8005238:	9001      	str	r0, [sp, #4]
 800523a:	4668      	mov	r0, sp
 800523c:	7b00      	ldrb	r0, [r0, #12]
 800523e:	9000      	str	r0, [sp, #0]
 8005240:	ab05      	add	r3, sp, #20
 8005242:	220f      	movs	r2, #15
 8005244:	2031      	movs	r0, #49	; 0x31
 8005246:	5c29      	ldrb	r1, [r5, r0]
 8005248:	0028      	movs	r0, r5
 800524a:	f7fc f98c 	bl	8001566 <PE_Send_DataMessage>
 800524e:	2800      	cmp	r0, #0
 8005250:	d101      	bne.n	8005256 <__iar_annotation$$branch+0xcdc>
 8005252:	205a      	movs	r0, #90	; 0x5a
 8005254:	7728      	strb	r0, [r5, #28]
 8005256:	2000      	movs	r0, #0
 8005258:	2132      	movs	r1, #50	; 0x32
 800525a:	5468      	strb	r0, [r5, r1]
 800525c:	9804      	ldr	r0, [sp, #16]
 800525e:	b01d      	add	sp, #116	; 0x74
 8005260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005264 <.text_19>:
 8005264:	00008032 	.word	0x00008032

08005268 <PE_StateMachine_UVDM>:
 8005268:	2914      	cmp	r1, #20
 800526a:	d000      	beq.n	800526e <PE_StateMachine_UVDM+0x6>
 800526c:	4770      	bx	lr
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	b08c      	sub	sp, #48	; 0x30
 8005272:	0004      	movs	r4, r0
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	2800      	cmp	r0, #0
 8005278:	d035      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 800527a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800527c:	2800      	cmp	r0, #0
 800527e:	d032      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 8005280:	2500      	movs	r5, #0
 8005282:	4669      	mov	r1, sp
 8005284:	730d      	strb	r5, [r1, #12]
 8005286:	a805      	add	r0, sp, #20
 8005288:	1d03      	adds	r3, r0, #4
 800528a:	aa03      	add	r2, sp, #12
 800528c:	a904      	add	r1, sp, #16
 800528e:	7c20      	ldrb	r0, [r4, #16]
 8005290:	68e6      	ldr	r6, [r4, #12]
 8005292:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 8005294:	47b0      	blx	r6
 8005296:	9804      	ldr	r0, [sp, #16]
 8005298:	49cc      	ldr	r1, [pc, #816]	; (80055cc <.text_27>)
 800529a:	4001      	ands	r1, r0
 800529c:	9104      	str	r1, [sp, #16]
 800529e:	4668      	mov	r0, sp
 80052a0:	7b00      	ldrb	r0, [r0, #12]
 80052a2:	1c40      	adds	r0, r0, #1
 80052a4:	4669      	mov	r1, sp
 80052a6:	7308      	strb	r0, [r1, #12]
 80052a8:	9804      	ldr	r0, [sp, #16]
 80052aa:	9005      	str	r0, [sp, #20]
 80052ac:	6860      	ldr	r0, [r4, #4]
 80052ae:	6800      	ldr	r0, [r0, #0]
 80052b0:	0741      	lsls	r1, r0, #29
 80052b2:	0fc9      	lsrs	r1, r1, #31
 80052b4:	d003      	beq.n	80052be <PE_StateMachine_UVDM+0x56>
 80052b6:	6960      	ldr	r0, [r4, #20]
 80052b8:	0741      	lsls	r1, r0, #29
 80052ba:	0fc8      	lsrs	r0, r1, #31
 80052bc:	e000      	b.n	80052c0 <PE_StateMachine_UVDM+0x58>
 80052be:	2002      	movs	r0, #2
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	2003      	movs	r0, #3
 80052c4:	9001      	str	r0, [sp, #4]
 80052c6:	4668      	mov	r0, sp
 80052c8:	7b00      	ldrb	r0, [r0, #12]
 80052ca:	9000      	str	r0, [sp, #0]
 80052cc:	ab05      	add	r3, sp, #20
 80052ce:	220f      	movs	r2, #15
 80052d0:	2031      	movs	r0, #49	; 0x31
 80052d2:	5c21      	ldrb	r1, [r4, r0]
 80052d4:	0020      	movs	r0, r4
 80052d6:	f7fc f946 	bl	8001566 <PE_Send_DataMessage>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d101      	bne.n	80052e2 <PE_StateMachine_UVDM+0x7a>
 80052de:	2059      	movs	r0, #89	; 0x59
 80052e0:	7720      	strb	r0, [r4, #28]
 80052e2:	2032      	movs	r0, #50	; 0x32
 80052e4:	5425      	strb	r5, [r4, r0]
 80052e6:	b00c      	add	sp, #48	; 0x30
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052ec <.text_21>:
 80052ec:	ffff9fff 	.word	0xffff9fff

080052f0 <PE_Check_DataMessageVDM>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	2403      	movs	r4, #3
 80052f4:	2501      	movs	r5, #1
 80052f6:	6801      	ldr	r1, [r0, #0]
 80052f8:	6849      	ldr	r1, [r1, #4]
 80052fa:	0949      	lsrs	r1, r1, #5
 80052fc:	4029      	ands	r1, r5
 80052fe:	d01f      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005300:	68c1      	ldr	r1, [r0, #12]
 8005302:	2900      	cmp	r1, #0
 8005304:	d01c      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005306:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005308:	788a      	ldrb	r2, [r1, #2]
 800530a:	78cb      	ldrb	r3, [r1, #3]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	18d2      	adds	r2, r2, r3
 8005310:	790b      	ldrb	r3, [r1, #4]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	18d2      	adds	r2, r2, r3
 8005316:	7949      	ldrb	r1, [r1, #5]
 8005318:	0609      	lsls	r1, r1, #24
 800531a:	1851      	adds	r1, r2, r1
 800531c:	9100      	str	r1, [sp, #0]
 800531e:	0bca      	lsrs	r2, r1, #15
 8005320:	402a      	ands	r2, r5
 8005322:	d014      	beq.n	800534e <PE_Check_DataMessageVDM+0x5e>
 8005324:	2394      	movs	r3, #148	; 0x94
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	50c1      	str	r1, [r0, r3]
 800532a:	0989      	lsrs	r1, r1, #6
 800532c:	4021      	ands	r1, r4
 800532e:	d107      	bne.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005330:	6801      	ldr	r1, [r0, #0]
 8005332:	6849      	ldr	r1, [r1, #4]
 8005334:	0a09      	lsrs	r1, r1, #8
 8005336:	4029      	ands	r1, r5
 8005338:	d002      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 800533a:	f7ff f840 	bl	80043be <PE_Receive_SVDM>
 800533e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005340:	6841      	ldr	r1, [r0, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	400c      	ands	r4, r1
 8005346:	2c02      	cmp	r4, #2
 8005348:	d134      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 800534a:	7445      	strb	r5, [r0, #17]
 800534c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800534e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8005350:	0449      	lsls	r1, r1, #17
 8005352:	0f49      	lsrs	r1, r1, #29
 8005354:	1e49      	subs	r1, r1, #1
 8005356:	4ab1      	ldr	r2, [pc, #708]	; (800561c <.text_29>)
 8005358:	5481      	strb	r1, [r0, r2]
 800535a:	0006      	movs	r6, r0
 800535c:	2000      	movs	r0, #0
 800535e:	e00f      	b.n	8005380 <PE_Check_DataMessageVDM+0x90>
 8005360:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8005362:	0082      	lsls	r2, r0, #2
 8005364:	1889      	adds	r1, r1, r2
 8005366:	798a      	ldrb	r2, [r1, #6]
 8005368:	79cf      	ldrb	r7, [r1, #7]
 800536a:	023f      	lsls	r7, r7, #8
 800536c:	19d2      	adds	r2, r2, r7
 800536e:	7a0f      	ldrb	r7, [r1, #8]
 8005370:	043f      	lsls	r7, r7, #16
 8005372:	19d2      	adds	r2, r2, r7
 8005374:	7a49      	ldrb	r1, [r1, #9]
 8005376:	0609      	lsls	r1, r1, #24
 8005378:	1851      	adds	r1, r2, r1
 800537a:	0082      	lsls	r2, r0, #2
 800537c:	5099      	str	r1, [r3, r2]
 800537e:	1c40      	adds	r0, r0, #1
 8005380:	49a7      	ldr	r1, [pc, #668]	; (8005620 <.text_30>)
 8005382:	1873      	adds	r3, r6, r1
 8005384:	3118      	adds	r1, #24
 8005386:	1872      	adds	r2, r6, r1
 8005388:	7811      	ldrb	r1, [r2, #0]
 800538a:	4288      	cmp	r0, r1
 800538c:	d3e8      	bcc.n	8005360 <PE_Check_DataMessageVDM+0x70>
 800538e:	9900      	ldr	r1, [sp, #0]
 8005390:	68f0      	ldr	r0, [r6, #12]
 8005392:	2800      	cmp	r0, #0
 8005394:	d008      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 8005396:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005398:	2f00      	cmp	r7, #0
 800539a:	d005      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 800539c:	7c30      	ldrb	r0, [r6, #16]
 800539e:	47b8      	blx	r7
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d101      	bne.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 80053a4:	7474      	strb	r4, [r6, #17]
 80053a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80053a8:	6870      	ldr	r0, [r6, #4]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	4004      	ands	r4, r0
 80053ae:	2c02      	cmp	r4, #2
 80053b0:	d100      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 80053b2:	7475      	strb	r5, [r6, #17]
 80053b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080053b8 <.text_23>:
 80053b8:	0000801e 	.word	0x0000801e

080053bc <.text_24>:
 80053bc:	fffff8ff 	.word	0xfffff8ff

080053c0 <PE_SVDM_CheckIdentity>:
 80053c0:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 80053c2:	0003      	movs	r3, r0
 80053c4:	2000      	movs	r0, #0
 80053c6:	4c97      	ldr	r4, [pc, #604]	; (8005624 <.text_31>)
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	58e3      	ldr	r3, [r4, r3]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80053d0:	045b      	lsls	r3, r3, #17
 80053d2:	0f5b      	lsrs	r3, r3, #29
 80053d4:	1e5c      	subs	r4, r3, #1
 80053d6:	b2e3      	uxtb	r3, r4
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d200      	bcs.n	80053de <PE_SVDM_CheckIdentity+0x1e>
 80053dc:	e0b5      	b.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 80053de:	000b      	movs	r3, r1
 80053e0:	7819      	ldrb	r1, [r3, #0]
 80053e2:	785d      	ldrb	r5, [r3, #1]
 80053e4:	022d      	lsls	r5, r5, #8
 80053e6:	1949      	adds	r1, r1, r5
 80053e8:	789d      	ldrb	r5, [r3, #2]
 80053ea:	042d      	lsls	r5, r5, #16
 80053ec:	1949      	adds	r1, r1, r5
 80053ee:	78dd      	ldrb	r5, [r3, #3]
 80053f0:	062d      	lsls	r5, r5, #24
 80053f2:	194d      	adds	r5, r1, r5
 80053f4:	6015      	str	r5, [r2, #0]
 80053f6:	7919      	ldrb	r1, [r3, #4]
 80053f8:	795e      	ldrb	r6, [r3, #5]
 80053fa:	0236      	lsls	r6, r6, #8
 80053fc:	1989      	adds	r1, r1, r6
 80053fe:	799e      	ldrb	r6, [r3, #6]
 8005400:	0436      	lsls	r6, r6, #16
 8005402:	1989      	adds	r1, r1, r6
 8005404:	79de      	ldrb	r6, [r3, #7]
 8005406:	0636      	lsls	r6, r6, #24
 8005408:	1989      	adds	r1, r1, r6
 800540a:	6051      	str	r1, [r2, #4]
 800540c:	2108      	movs	r1, #8
 800540e:	7a1e      	ldrb	r6, [r3, #8]
 8005410:	7a5f      	ldrb	r7, [r3, #9]
 8005412:	023f      	lsls	r7, r7, #8
 8005414:	19f6      	adds	r6, r6, r7
 8005416:	7a9f      	ldrb	r7, [r3, #10]
 8005418:	043f      	lsls	r7, r7, #16
 800541a:	19f6      	adds	r6, r6, r7
 800541c:	7adf      	ldrb	r7, [r3, #11]
 800541e:	063f      	lsls	r7, r7, #24
 8005420:	19f6      	adds	r6, r6, r7
 8005422:	6096      	str	r6, [r2, #8]
 8005424:	1ee4      	subs	r4, r4, #3
 8005426:	2620      	movs	r6, #32
 8005428:	5d97      	ldrb	r7, [r2, r6]
 800542a:	26e0      	movs	r6, #224	; 0xe0
 800542c:	403e      	ands	r6, r7
 800542e:	466f      	mov	r7, sp
 8005430:	703e      	strb	r6, [r7, #0]
 8005432:	466e      	mov	r6, sp
 8005434:	7836      	ldrb	r6, [r6, #0]
 8005436:	2720      	movs	r7, #32
 8005438:	55d6      	strb	r6, [r2, r7]
 800543a:	0626      	lsls	r6, r4, #24
 800543c:	d022      	beq.n	8005484 <PE_SVDM_CheckIdentity+0xc4>
 800543e:	1e66      	subs	r6, r4, #1
 8005440:	466f      	mov	r7, sp
 8005442:	707e      	strb	r6, [r7, #1]
 8005444:	00ae      	lsls	r6, r5, #2
 8005446:	0f76      	lsrs	r6, r6, #29
 8005448:	2e05      	cmp	r6, #5
 800544a:	d827      	bhi.n	800549c <PE_SVDM_CheckIdentity+0xdc>
 800544c:	a701      	add	r7, pc, #4	; (adr r7, 8005454 <PE_SVDM_CheckIdentity+0x94>)
 800544e:	5dbf      	ldrb	r7, [r7, r6]
 8005450:	44bf      	add	pc, r7
 8005452:	bf00      	nop
 8005454:	5a060632 	.word	0x5a060632
 8005458:	a680      	.short	0xa680
 800545a:	210c      	movs	r1, #12
 800545c:	466c      	mov	r4, sp
 800545e:	7824      	ldrb	r4, [r4, #0]
 8005460:	2608      	movs	r6, #8
 8005462:	4326      	orrs	r6, r4
 8005464:	2420      	movs	r4, #32
 8005466:	5516      	strb	r6, [r2, r4]
 8005468:	7b1c      	ldrb	r4, [r3, #12]
 800546a:	7b5e      	ldrb	r6, [r3, #13]
 800546c:	0236      	lsls	r6, r6, #8
 800546e:	19a4      	adds	r4, r4, r6
 8005470:	7b9e      	ldrb	r6, [r3, #14]
 8005472:	0436      	lsls	r6, r6, #16
 8005474:	19a4      	adds	r4, r4, r6
 8005476:	7bde      	ldrb	r6, [r3, #15]
 8005478:	0636      	lsls	r6, r6, #24
 800547a:	19a4      	adds	r4, r4, r6
 800547c:	6194      	str	r4, [r2, #24]
 800547e:	466c      	mov	r4, sp
 8005480:	7864      	ldrb	r4, [r4, #1]
 8005482:	0026      	movs	r6, r4
 8005484:	d062      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005486:	9e01      	ldr	r6, [sp, #4]
 8005488:	8eb6      	ldrh	r6, [r6, #52]	; 0x34
 800548a:	0636      	lsls	r6, r6, #24
 800548c:	0fb6      	lsrs	r6, r6, #30
 800548e:	2e02      	cmp	r6, #2
 8005490:	d35c      	bcc.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005492:	01ad      	lsls	r5, r5, #6
 8005494:	0f6d      	lsrs	r5, r5, #29
 8005496:	d059      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005498:	1e6d      	subs	r5, r5, #1
 800549a:	2d02      	cmp	r5, #2
 800549c:	d855      	bhi.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 800549e:	2520      	movs	r5, #32
 80054a0:	5d55      	ldrb	r5, [r2, r5]
 80054a2:	08ef      	lsrs	r7, r5, #3
 80054a4:	07ff      	lsls	r7, r7, #31
 80054a6:	d53b      	bpl.n	8005520 <PE_SVDM_CheckIdentity+0x160>
 80054a8:	3108      	adds	r1, #8
 80054aa:	1e64      	subs	r4, r4, #1
 80054ac:	e039      	b.n	8005522 <PE_SVDM_CheckIdentity+0x162>
 80054ae:	210c      	movs	r1, #12
 80054b0:	466c      	mov	r4, sp
 80054b2:	7824      	ldrb	r4, [r4, #0]
 80054b4:	2601      	movs	r6, #1
 80054b6:	4326      	orrs	r6, r4
 80054b8:	2420      	movs	r4, #32
 80054ba:	5516      	strb	r6, [r2, r4]
 80054bc:	7b1c      	ldrb	r4, [r3, #12]
 80054be:	7b5e      	ldrb	r6, [r3, #13]
 80054c0:	0236      	lsls	r6, r6, #8
 80054c2:	19a4      	adds	r4, r4, r6
 80054c4:	7b9e      	ldrb	r6, [r3, #14]
 80054c6:	0436      	lsls	r6, r6, #16
 80054c8:	19a4      	adds	r4, r4, r6
 80054ca:	7bde      	ldrb	r6, [r3, #15]
 80054cc:	0636      	lsls	r6, r6, #24
 80054ce:	19a4      	adds	r4, r4, r6
 80054d0:	60d4      	str	r4, [r2, #12]
 80054d2:	e7d4      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054d4:	210c      	movs	r1, #12
 80054d6:	466c      	mov	r4, sp
 80054d8:	7824      	ldrb	r4, [r4, #0]
 80054da:	2604      	movs	r6, #4
 80054dc:	4326      	orrs	r6, r4
 80054de:	2420      	movs	r4, #32
 80054e0:	5516      	strb	r6, [r2, r4]
 80054e2:	7b1c      	ldrb	r4, [r3, #12]
 80054e4:	7b5e      	ldrb	r6, [r3, #13]
 80054e6:	0236      	lsls	r6, r6, #8
 80054e8:	19a4      	adds	r4, r4, r6
 80054ea:	7b9e      	ldrb	r6, [r3, #14]
 80054ec:	0436      	lsls	r6, r6, #16
 80054ee:	19a4      	adds	r4, r4, r6
 80054f0:	7bde      	ldrb	r6, [r3, #15]
 80054f2:	0636      	lsls	r6, r6, #24
 80054f4:	19a4      	adds	r4, r4, r6
 80054f6:	6154      	str	r4, [r2, #20]
 80054f8:	e7c1      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054fa:	210c      	movs	r1, #12
 80054fc:	466c      	mov	r4, sp
 80054fe:	7824      	ldrb	r4, [r4, #0]
 8005500:	2602      	movs	r6, #2
 8005502:	4326      	orrs	r6, r4
 8005504:	2420      	movs	r4, #32
 8005506:	5516      	strb	r6, [r2, r4]
 8005508:	7b1c      	ldrb	r4, [r3, #12]
 800550a:	7b5e      	ldrb	r6, [r3, #13]
 800550c:	0236      	lsls	r6, r6, #8
 800550e:	19a4      	adds	r4, r4, r6
 8005510:	7b9e      	ldrb	r6, [r3, #14]
 8005512:	0436      	lsls	r6, r6, #16
 8005514:	19a4      	adds	r4, r4, r6
 8005516:	7bde      	ldrb	r6, [r3, #15]
 8005518:	0636      	lsls	r6, r6, #24
 800551a:	19a4      	adds	r4, r4, r6
 800551c:	6114      	str	r4, [r2, #16]
 800551e:	e7ae      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 8005520:	1d09      	adds	r1, r1, #4
 8005522:	b2e4      	uxtb	r4, r4
 8005524:	2c01      	cmp	r4, #1
 8005526:	d110      	bne.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 8005528:	2410      	movs	r4, #16
 800552a:	432c      	orrs	r4, r5
 800552c:	2520      	movs	r5, #32
 800552e:	5554      	strb	r4, [r2, r5]
 8005530:	1859      	adds	r1, r3, r1
 8005532:	780b      	ldrb	r3, [r1, #0]
 8005534:	784c      	ldrb	r4, [r1, #1]
 8005536:	0224      	lsls	r4, r4, #8
 8005538:	191b      	adds	r3, r3, r4
 800553a:	788c      	ldrb	r4, [r1, #2]
 800553c:	0424      	lsls	r4, r4, #16
 800553e:	191b      	adds	r3, r3, r4
 8005540:	78c9      	ldrb	r1, [r1, #3]
 8005542:	0609      	lsls	r1, r1, #24
 8005544:	1859      	adds	r1, r3, r1
 8005546:	61d1      	str	r1, [r2, #28]
 8005548:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 800554a:	2002      	movs	r0, #2
 800554c:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

0800554e <PE_SVDM_CheckSVIDs>:
 800554e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005550:	4b34      	ldr	r3, [pc, #208]	; (8005624 <.text_31>)
 8005552:	0080      	lsls	r0, r0, #2
 8005554:	5818      	ldr	r0, [r3, r0]
 8005556:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8005558:	0440      	lsls	r0, r0, #17
 800555a:	0f40      	lsrs	r0, r0, #29
 800555c:	1e46      	subs	r6, r0, #1
 800555e:	b2f6      	uxtb	r6, r6
 8005560:	2000      	movs	r0, #0
 8005562:	2500      	movs	r5, #0
 8005564:	7610      	strb	r0, [r2, #24]
 8005566:	7650      	strb	r0, [r2, #25]
 8005568:	000b      	movs	r3, r1
 800556a:	0014      	movs	r4, r2
 800556c:	0031      	movs	r1, r6
 800556e:	5c1a      	ldrb	r2, [r3, r0]
 8005570:	1c5e      	adds	r6, r3, #1
 8005572:	5c36      	ldrb	r6, [r6, r0]
 8005574:	0236      	lsls	r6, r6, #8
 8005576:	1992      	adds	r2, r2, r6
 8005578:	7e26      	ldrb	r6, [r4, #24]
 800557a:	0076      	lsls	r6, r6, #1
 800557c:	53a2      	strh	r2, [r4, r6]
 800557e:	7e26      	ldrb	r6, [r4, #24]
 8005580:	2201      	movs	r2, #1
 8005582:	0077      	lsls	r7, r6, #1
 8005584:	5be7      	ldrh	r7, [r4, r7]
 8005586:	2f00      	cmp	r7, #0
 8005588:	d002      	beq.n	8005590 <PE_SVDM_CheckSVIDs+0x42>
 800558a:	1c76      	adds	r6, r6, #1
 800558c:	7626      	strb	r6, [r4, #24]
 800558e:	e001      	b.n	8005594 <PE_SVDM_CheckSVIDs+0x46>
 8005590:	2501      	movs	r5, #1
 8005592:	7662      	strb	r2, [r4, #25]
 8005594:	1c80      	adds	r0, r0, #2
 8005596:	b2c0      	uxtb	r0, r0
 8005598:	5c1e      	ldrb	r6, [r3, r0]
 800559a:	1c5f      	adds	r7, r3, #1
 800559c:	5c3f      	ldrb	r7, [r7, r0]
 800559e:	023f      	lsls	r7, r7, #8
 80055a0:	19f6      	adds	r6, r6, r7
 80055a2:	7e27      	ldrb	r7, [r4, #24]
 80055a4:	007f      	lsls	r7, r7, #1
 80055a6:	53e6      	strh	r6, [r4, r7]
 80055a8:	7e26      	ldrb	r6, [r4, #24]
 80055aa:	0077      	lsls	r7, r6, #1
 80055ac:	5be7      	ldrh	r7, [r4, r7]
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	d002      	beq.n	80055b8 <PE_SVDM_CheckSVIDs+0x6a>
 80055b2:	1c76      	adds	r6, r6, #1
 80055b4:	7626      	strb	r6, [r4, #24]
 80055b6:	e001      	b.n	80055bc <PE_SVDM_CheckSVIDs+0x6e>
 80055b8:	2501      	movs	r5, #1
 80055ba:	7662      	strb	r2, [r4, #25]
 80055bc:	1c80      	adds	r0, r0, #2
 80055be:	b2c0      	uxtb	r0, r0
 80055c0:	008a      	lsls	r2, r1, #2
 80055c2:	4290      	cmp	r0, r2
 80055c4:	d201      	bcs.n	80055ca <PE_SVDM_CheckSVIDs+0x7c>
 80055c6:	002a      	movs	r2, r5
 80055c8:	d0d1      	beq.n	800556e <PE_SVDM_CheckSVIDs+0x20>
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055cc <.text_27>:
 80055cc:	ffff7fff 	.word	0xffff7fff

080055d0 <PE_SVDM_CheckModes>:
 80055d0:	b530      	push	{r4, r5, lr}
 80055d2:	4c14      	ldr	r4, [pc, #80]	; (8005624 <.text_31>)
 80055d4:	0080      	lsls	r0, r0, #2
 80055d6:	5820      	ldr	r0, [r4, r0]
 80055d8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80055da:	0440      	lsls	r0, r0, #17
 80055dc:	0f40      	lsrs	r0, r0, #29
 80055de:	1e40      	subs	r0, r0, #1
 80055e0:	b2c0      	uxtb	r0, r0
 80055e2:	2400      	movs	r4, #0
 80055e4:	8399      	strh	r1, [r3, #28]
 80055e6:	601c      	str	r4, [r3, #0]
 80055e8:	5d11      	ldrb	r1, [r2, r4]
 80055ea:	1915      	adds	r5, r2, r4
 80055ec:	786d      	ldrb	r5, [r5, #1]
 80055ee:	022d      	lsls	r5, r5, #8
 80055f0:	1949      	adds	r1, r1, r5
 80055f2:	1915      	adds	r5, r2, r4
 80055f4:	78ad      	ldrb	r5, [r5, #2]
 80055f6:	042d      	lsls	r5, r5, #16
 80055f8:	1949      	adds	r1, r1, r5
 80055fa:	1915      	adds	r5, r2, r4
 80055fc:	78ed      	ldrb	r5, [r5, #3]
 80055fe:	062d      	lsls	r5, r5, #24
 8005600:	1949      	adds	r1, r1, r5
 8005602:	681d      	ldr	r5, [r3, #0]
 8005604:	00ad      	lsls	r5, r5, #2
 8005606:	195d      	adds	r5, r3, r5
 8005608:	6069      	str	r1, [r5, #4]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	1c49      	adds	r1, r1, #1
 800560e:	6019      	str	r1, [r3, #0]
 8005610:	1d24      	adds	r4, r4, #4
 8005612:	b2e4      	uxtb	r4, r4
 8005614:	0081      	lsls	r1, r0, #2
 8005616:	428c      	cmp	r4, r1
 8005618:	d3e6      	bcc.n	80055e8 <PE_SVDM_CheckModes+0x18>
 800561a:	bd30      	pop	{r4, r5, pc}

0800561c <.text_29>:
 800561c:	000004ac 	.word	0x000004ac

08005620 <.text_30>:
 8005620:	00000494 	.word	0x00000494

08005624 <.text_31>:
 8005624:	200001e4 	.word	0x200001e4

08005628 <USBPD_PRL_TimerCounter>:
 8005628:	4954      	ldr	r1, [pc, #336]	; (800577c <.text_15>)
 800562a:	0080      	lsls	r0, r0, #2
 800562c:	1808      	adds	r0, r1, r0
 800562e:	6801      	ldr	r1, [r0, #0]
 8005630:	790a      	ldrb	r2, [r1, #4]
 8005632:	2a00      	cmp	r2, #0
 8005634:	d002      	beq.n	800563c <USBPD_PRL_TimerCounter+0x14>
 8005636:	790a      	ldrb	r2, [r1, #4]
 8005638:	1e52      	subs	r2, r2, #1
 800563a:	710a      	strb	r2, [r1, #4]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	7841      	ldrb	r1, [r0, #1]
 8005640:	2900      	cmp	r1, #0
 8005642:	d001      	beq.n	8005648 <USBPD_PRL_TimerCounter+0x20>
 8005644:	1e49      	subs	r1, r1, #1
 8005646:	7041      	strb	r1, [r0, #1]
 8005648:	4770      	bx	lr
	...

0800564c <USBPD_PRL_Init>:
 800564c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800564e:	b081      	sub	sp, #4
 8005650:	0014      	movs	r4, r2
 8005652:	001d      	movs	r5, r3
 8005654:	2616      	movs	r6, #22
 8005656:	209c      	movs	r0, #156	; 0x9c
 8005658:	0040      	lsls	r0, r0, #1
 800565a:	f015 f96b 	bl	801a934 <malloc>
 800565e:	0007      	movs	r7, r0
 8005660:	d01e      	beq.n	80056a0 <USBPD_PRL_Init+0x54>
 8005662:	9e02      	ldr	r6, [sp, #8]
 8005664:	219c      	movs	r1, #156	; 0x9c
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	f015 fb25 	bl	801acb6 <__aeabi_memclr>
 800566c:	220f      	movs	r2, #15
 800566e:	2103      	movs	r1, #3
 8005670:	1db8      	adds	r0, r7, #6
 8005672:	f015 fb19 	bl	801aca8 <__aeabi_memset>
 8005676:	4841      	ldr	r0, [pc, #260]	; (800577c <.text_15>)
 8005678:	4669      	mov	r1, sp
 800567a:	7909      	ldrb	r1, [r1, #4]
 800567c:	0089      	lsls	r1, r1, #2
 800567e:	5047      	str	r7, [r0, r1]
 8005680:	62bc      	str	r4, [r7, #40]	; 0x28
 8005682:	62fd      	str	r5, [r7, #44]	; 0x2c
 8005684:	2001      	movs	r0, #1
 8005686:	9000      	str	r0, [sp, #0]
 8005688:	6870      	ldr	r0, [r6, #4]
 800568a:	0743      	lsls	r3, r0, #29
 800568c:	0fdb      	lsrs	r3, r3, #31
 800568e:	003a      	movs	r2, r7
 8005690:	3230      	adds	r2, #48	; 0x30
 8005692:	bf00      	nop
 8005694:	a103      	add	r1, pc, #12	; (adr r1, 80056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 8005696:	4668      	mov	r0, sp
 8005698:	7900      	ldrb	r0, [r0, #4]
 800569a:	f008 fec1 	bl	800e420 <USBPD_PHY_Init>
 800569e:	0006      	movs	r6, r0
 80056a0:	0030      	movs	r0, r6
 80056a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 80056a4:	5cdd 0800 6035 0800 608f 0800 60a9 0800     .\..5`...`...`..
 80056b4:	60b1 0800 579d 0800                         .`...W..

080056bc <USBPD_PRL_GetMemoryConsumption>:
 80056bc:	20ea      	movs	r0, #234	; 0xea
 80056be:	0080      	lsls	r0, r0, #2
 80056c0:	4770      	bx	lr

080056c2 <USBPD_PRL_SetHeader>:
 80056c2:	b530      	push	{r4, r5, lr}
 80056c4:	4c2d      	ldr	r4, [pc, #180]	; (800577c <.text_15>)
 80056c6:	0080      	lsls	r0, r0, #2
 80056c8:	5820      	ldr	r0, [r4, r0]
 80056ca:	8a44      	ldrh	r4, [r0, #18]
 80056cc:	4d2c      	ldr	r5, [pc, #176]	; (8005780 <.text_16>)
 80056ce:	4025      	ands	r5, r4
 80056d0:	0209      	lsls	r1, r1, #8
 80056d2:	2480      	movs	r4, #128	; 0x80
 80056d4:	0064      	lsls	r4, r4, #1
 80056d6:	4021      	ands	r1, r4
 80056d8:	4329      	orrs	r1, r5
 80056da:	8241      	strh	r1, [r0, #18]
 80056dc:	4c29      	ldr	r4, [pc, #164]	; (8005784 <.text_17>)
 80056de:	400c      	ands	r4, r1
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	2220      	movs	r2, #32
 80056e4:	4011      	ands	r1, r2
 80056e6:	4321      	orrs	r1, r4
 80056e8:	8241      	strh	r1, [r0, #18]
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <.text_18>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	0199      	lsls	r1, r3, #6
 80056f0:	23c0      	movs	r3, #192	; 0xc0
 80056f2:	400b      	ands	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	8243      	strh	r3, [r0, #18]
 80056f8:	bd30      	pop	{r4, r5, pc}

080056fa <USBPD_PRL_SetHeaderPowerRole>:
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <.text_15>)
 80056fc:	0080      	lsls	r0, r0, #2
 80056fe:	5810      	ldr	r0, [r2, r0]
 8005700:	8a42      	ldrh	r2, [r0, #18]
 8005702:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <.text_16>)
 8005704:	4013      	ands	r3, r2
 8005706:	0209      	lsls	r1, r1, #8
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	0052      	lsls	r2, r2, #1
 800570c:	e007      	b.n	800571e <.text_10>

0800570e <USBPD_PRL_SetHeaderDataRole>:
 800570e:	4a1b      	ldr	r2, [pc, #108]	; (800577c <.text_15>)
 8005710:	0080      	lsls	r0, r0, #2
 8005712:	5810      	ldr	r0, [r2, r0]
 8005714:	8a42      	ldrh	r2, [r0, #18]
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <.text_17>)
 8005718:	4013      	ands	r3, r2
 800571a:	0149      	lsls	r1, r1, #5
 800571c:	2220      	movs	r2, #32

0800571e <.text_10>:
 800571e:	4011      	ands	r1, r2
 8005720:	4319      	orrs	r1, r3
 8005722:	8241      	strh	r1, [r0, #18]
 8005724:	4770      	bx	lr

08005726 <USBPD_PRL_SetHeaderSpecification>:
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <.text_15>)
 8005728:	0080      	lsls	r0, r0, #2
 800572a:	5810      	ldr	r0, [r2, r0]
 800572c:	8a42      	ldrh	r2, [r0, #18]
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <.text_18>)
 8005730:	4013      	ands	r3, r2
 8005732:	0189      	lsls	r1, r1, #6
 8005734:	22c0      	movs	r2, #192	; 0xc0
 8005736:	400a      	ands	r2, r1
 8005738:	431a      	orrs	r2, r3
 800573a:	8242      	strh	r2, [r0, #18]
 800573c:	4770      	bx	lr

0800573e <USBPD_PRL_CBL_SetHeaderSpecification>:
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <.text_15>)
 8005740:	0080      	lsls	r0, r0, #2
 8005742:	5810      	ldr	r0, [r2, r0]
 8005744:	018a      	lsls	r2, r1, #6
 8005746:	21c0      	movs	r1, #192	; 0xc0
 8005748:	4011      	ands	r1, r2
 800574a:	4a0f      	ldr	r2, [pc, #60]	; (8005788 <.text_18>)
 800574c:	8a83      	ldrh	r3, [r0, #20]
 800574e:	4013      	ands	r3, r2
 8005750:	430b      	orrs	r3, r1
 8005752:	8283      	strh	r3, [r0, #20]
 8005754:	8ac3      	ldrh	r3, [r0, #22]
 8005756:	401a      	ands	r2, r3
 8005758:	4311      	orrs	r1, r2
 800575a:	82c1      	strh	r1, [r0, #22]
 800575c:	4770      	bx	lr

0800575e <USBPD_PRL_SRCSetSinkNG>:
 800575e:	b580      	push	{r7, lr}
 8005760:	f008 ff53 	bl	800e60a <USBPD_PHY_SetResistor_SinkTxNG>
 8005764:	bd01      	pop	{r0, pc}

08005766 <USBPD_PRL_SRCReleaseSinkNG>:
 8005766:	b510      	push	{r4, lr}
 8005768:	0004      	movs	r4, r0
 800576a:	f008 ff5d 	bl	800e628 <USBPD_PHY_SetResistor_SinkTxOK>
 800576e:	2000      	movs	r0, #0
 8005770:	4902      	ldr	r1, [pc, #8]	; (800577c <.text_15>)
 8005772:	00a2      	lsls	r2, r4, #2
 8005774:	5889      	ldr	r1, [r1, r2]
 8005776:	7148      	strb	r0, [r1, #5]
 8005778:	bd10      	pop	{r4, pc}
	...

0800577c <.text_15>:
 800577c:	200001f0 	.word	0x200001f0

08005780 <.text_16>:
 8005780:	0000feff 	.word	0x0000feff

08005784 <.text_17>:
 8005784:	0000ffdf 	.word	0x0000ffdf

08005788 <.text_18>:
 8005788:	0000ff3f 	.word	0x0000ff3f

0800578c <USBPD_PRL_IsResistor_SinkTxOK>:
 800578c:	b580      	push	{r7, lr}
 800578e:	f008 ff71 	bl	800e674 <USBPD_PHY_IsResistor_SinkTxOk>
 8005792:	bd02      	pop	{r1, pc}

08005794 <USBPD_PRL_FastRoleSwapSignalling>:
 8005794:	b580      	push	{r7, lr}
 8005796:	f008 ff7d 	bl	800e694 <USBPD_PHY_FastRoleSwapSignalling>
 800579a:	bd01      	pop	{r0, pc}

0800579c <PRL_FastRoleSwapReception>:
 800579c:	b580      	push	{r7, lr}
 800579e:	f7fb fa4d 	bl	8000c3c <PE_PRL_FastRoleSwapReception>
 80057a2:	bd01      	pop	{r0, pc}

080057a4 <USBPD_PRL_SOPCapability>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	f008 ff4f 	bl	800e648 <USBPD_PHY_SOPSupported>
 80057aa:	bd01      	pop	{r0, pc}

080057ac <USBPD_PRL_SendMessage>:
 80057ac:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	2503      	movs	r5, #3
 80057b2:	4668      	mov	r0, sp
 80057b4:	7f00      	ldrb	r0, [r0, #28]
 80057b6:	9005      	str	r0, [sp, #20]
 80057b8:	48ca      	ldr	r0, [pc, #808]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	0092      	lsls	r2, r2, #2
 80057be:	1880      	adds	r0, r0, r2
 80057c0:	9000      	str	r0, [sp, #0]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	0004      	movs	r4, r0
 80057c6:	7962      	ldrb	r2, [r4, #5]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d004      	beq.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057cc:	7a62      	ldrb	r2, [r4, #9]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d101      	bne.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057d2:	220f      	movs	r2, #15
 80057d4:	7142      	strb	r2, [r0, #5]
 80057d6:	466a      	mov	r2, sp
 80057d8:	7111      	strb	r1, [r2, #4]
 80057da:	4669      	mov	r1, sp
 80057dc:	7909      	ldrb	r1, [r1, #4]
 80057de:	9104      	str	r1, [sp, #16]
 80057e0:	1861      	adds	r1, r4, r1
 80057e2:	9a05      	ldr	r2, [sp, #20]
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	1c52      	adds	r2, r2, #1
 80057e8:	466e      	mov	r6, sp
 80057ea:	7172      	strb	r2, [r6, #5]
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	0052      	lsls	r2, r2, #1
 80057f0:	9203      	str	r2, [sp, #12]
 80057f2:	2600      	movs	r6, #0
 80057f4:	9302      	str	r3, [sp, #8]
 80057f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057f8:	7963      	ldrb	r3, [r4, #5]
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d900      	bls.n	8005800 <USBPD_PRL_SendMessage+0x54>
 80057fe:	e1f6      	b.n	8005bee <USBPD_PRL_SendMessage+0x442>
 8005800:	a701      	add	r7, pc, #4	; (adr r7, 8005808 <USBPD_PRL_SendMessage+0x5c>)
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	5aff      	ldrh	r7, [r7, r3]
 8005806:	44bf      	add	pc, r7
 8005808:	00480020 	.word	0x00480020
 800580c:	03e4005e 	.word	0x03e4005e
 8005810:	00a8006a 	.word	0x00a8006a
 8005814:	015a0086 	.word	0x015a0086
 8005818:	03e403e4 	.word	0x03e403e4
 800581c:	030802de 	.word	0x030802de
 8005820:	03560334 	.word	0x03560334
 8005824:	03de03e4 	.word	0x03de03e4
 8005828:	03a6      	.short	0x03a6
 800582a:	f3ef 8710 	mrs	r7, PRIMASK
 800582e:	b672      	cpsid	i
 8005830:	4668      	mov	r0, sp
 8005832:	7f00      	ldrb	r0, [r0, #28]
 8005834:	f7fb f8b4 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8005838:	2800      	cmp	r0, #0
 800583a:	d105      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 800583c:	7aa0      	ldrb	r0, [r4, #10]
 800583e:	2800      	cmp	r0, #0
 8005840:	d102      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 8005842:	20ff      	movs	r0, #255	; 0xff
 8005844:	7260      	strb	r0, [r4, #9]
 8005846:	e000      	b.n	800584a <USBPD_PRL_SendMessage+0x9e>
 8005848:	7266      	strb	r6, [r4, #9]
 800584a:	f387 8810 	msr	PRIMASK, r7
 800584e:	2006      	movs	r0, #6
 8005850:	e1a0      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005852:	4668      	mov	r0, sp
 8005854:	7f00      	ldrb	r0, [r0, #28]
 8005856:	f008 fed8 	bl	800e60a <USBPD_PHY_SetResistor_SinkTxNG>
 800585a:	2002      	movs	r0, #2
 800585c:	9900      	ldr	r1, [sp, #0]
 800585e:	6809      	ldr	r1, [r1, #0]
 8005860:	7148      	strb	r0, [r1, #5]
 8005862:	2013      	movs	r0, #19
 8005864:	7060      	strb	r0, [r4, #1]
 8005866:	e1c4      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005868:	2a01      	cmp	r2, #1
 800586a:	d10f      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 800586c:	7861      	ldrb	r1, [r4, #1]
 800586e:	2900      	cmp	r1, #0
 8005870:	d10a      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005872:	e01c      	b.n	80058ae <USBPD_PRL_SendMessage+0x102>
 8005874:	2a02      	cmp	r2, #2
 8005876:	d109      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 8005878:	4668      	mov	r0, sp
 800587a:	7f00      	ldrb	r0, [r0, #28]
 800587c:	f008 fefa 	bl	800e674 <USBPD_PHY_IsResistor_SinkTxOk>
 8005880:	2801      	cmp	r0, #1
 8005882:	d101      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005884:	2005      	movs	r0, #5
 8005886:	e185      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005888:	2509      	movs	r5, #9
 800588a:	e1b2      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 800588c:	2106      	movs	r1, #6
 800588e:	e154      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1861      	adds	r1, r4, r1
 8005894:	8a49      	ldrh	r1, [r1, #18]
 8005896:	0609      	lsls	r1, r1, #24
 8005898:	0f89      	lsrs	r1, r1, #30
 800589a:	2902      	cmp	r1, #2
 800589c:	d107      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 800589e:	2a01      	cmp	r2, #1
 80058a0:	d101      	bne.n	80058a6 <USBPD_PRL_SendMessage+0xfa>
 80058a2:	7142      	strb	r2, [r0, #5]
 80058a4:	e1a5      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 80058a6:	2a02      	cmp	r2, #2
 80058a8:	d101      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 80058aa:	2104      	movs	r1, #4
 80058ac:	e145      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058ae:	2105      	movs	r1, #5
 80058b0:	e143      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058b2:	9803      	ldr	r0, [sp, #12]
 80058b4:	1820      	adds	r0, r4, r0
 80058b6:	8a43      	ldrh	r3, [r0, #18]
 80058b8:	4acf      	ldr	r2, [pc, #828]	; (8005bf8 <.text_24>)
 80058ba:	401a      	ands	r2, r3
 80058bc:	ab08      	add	r3, sp, #32
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	06db      	lsls	r3, r3, #27
 80058c2:	0edb      	lsrs	r3, r3, #27
 80058c4:	4313      	orrs	r3, r2
 80058c6:	8243      	strh	r3, [r0, #18]
 80058c8:	045a      	lsls	r2, r3, #17
 80058ca:	0c52      	lsrs	r2, r2, #17
 80058cc:	ab08      	add	r3, sp, #32
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	03db      	lsls	r3, r3, #15
 80058d4:	4313      	orrs	r3, r2
 80058d6:	8243      	strh	r3, [r0, #18]
 80058d8:	70a6      	strb	r6, [r4, #2]
 80058da:	8a43      	ldrh	r3, [r0, #18]
 80058dc:	0bda      	lsrs	r2, r3, #15
 80058de:	d023      	beq.n	8005928 <USBPD_PRL_SendMessage+0x17c>
 80058e0:	9a02      	ldr	r2, [sp, #8]
 80058e2:	7892      	ldrb	r2, [r2, #2]
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	18d2      	adds	r2, r2, r3
 80058ec:	83a2      	strh	r2, [r4, #28]
 80058ee:	8ba2      	ldrh	r2, [r4, #28]
 80058f0:	0a93      	lsrs	r3, r2, #10
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d40f      	bmi.n	8005916 <USBPD_PRL_SendMessage+0x16a>
 80058f6:	0ad2      	lsrs	r2, r2, #11
 80058f8:	0712      	lsls	r2, r2, #28
 80058fa:	d122      	bne.n	8005942 <USBPD_PRL_SendMessage+0x196>
 80058fc:	466a      	mov	r2, sp
 80058fe:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005900:	1f12      	subs	r2, r2, #4
 8005902:	8462      	strh	r2, [r4, #34]	; 0x22
 8005904:	05d2      	lsls	r2, r2, #23
 8005906:	0dd2      	lsrs	r2, r2, #23
 8005908:	8ba3      	ldrh	r3, [r4, #28]
 800590a:	27fe      	movs	r7, #254	; 0xfe
 800590c:	023f      	lsls	r7, r7, #8
 800590e:	401f      	ands	r7, r3
 8005910:	433a      	orrs	r2, r7
 8005912:	83a2      	strh	r2, [r4, #28]
 8005914:	e015      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005916:	8466      	strh	r6, [r4, #34]	; 0x22
 8005918:	8a42      	ldrh	r2, [r0, #18]
 800591a:	4bb8      	ldr	r3, [pc, #736]	; (8005bfc <.text_25>)
 800591c:	4013      	ands	r3, r2
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	0152      	lsls	r2, r2, #5
 8005922:	431a      	orrs	r2, r3
 8005924:	8242      	strh	r2, [r0, #18]
 8005926:	e00c      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005928:	4ab4      	ldr	r2, [pc, #720]	; (8005bfc <.text_25>)
 800592a:	401a      	ands	r2, r3
 800592c:	466b      	mov	r3, sp
 800592e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005930:	1e9b      	subs	r3, r3, #2
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	27e0      	movs	r7, #224	; 0xe0
 8005938:	01ff      	lsls	r7, r7, #7
 800593a:	401f      	ands	r7, r3
 800593c:	4317      	orrs	r7, r2
 800593e:	8247      	strh	r7, [r0, #18]
 8005940:	8466      	strh	r6, [r4, #34]	; 0x22
 8005942:	aa08      	add	r2, sp, #32
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	2a0d      	cmp	r2, #13
 8005948:	d10a      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 800594a:	8a40      	ldrh	r0, [r0, #18]
 800594c:	22f0      	movs	r2, #240	; 0xf0
 800594e:	0212      	lsls	r2, r2, #8
 8005950:	4002      	ands	r2, r0
 8005952:	d105      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 8005954:	72ce      	strb	r6, [r1, #11]
 8005956:	220f      	movs	r2, #15
 8005958:	2103      	movs	r1, #3
 800595a:	1da0      	adds	r0, r4, #6
 800595c:	f015 f9a4 	bl	801aca8 <__aeabi_memset>
 8005960:	2007      	movs	r0, #7
 8005962:	e117      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005964:	4669      	mov	r1, sp
 8005966:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 8005968:	9903      	ldr	r1, [sp, #12]
 800596a:	1841      	adds	r1, r0, r1
 800596c:	4a5d      	ldr	r2, [pc, #372]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800596e:	466b      	mov	r3, sp
 8005970:	7f1b      	ldrb	r3, [r3, #28]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	58d2      	ldr	r2, [r2, r3]
 8005976:	466b      	mov	r3, sp
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	8a52      	ldrh	r2, [r2, #18]
 8005980:	0bd3      	lsrs	r3, r2, #15
 8005982:	d074      	beq.n	8005a6e <USBPD_PRL_SendMessage+0x2c2>
 8005984:	8b83      	ldrh	r3, [r0, #28]
 8005986:	0a9b      	lsrs	r3, r3, #10
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d465      	bmi.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 800598c:	4b55      	ldr	r3, [pc, #340]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800598e:	466f      	mov	r7, sp
 8005990:	7f3f      	ldrb	r7, [r7, #28]
 8005992:	00bf      	lsls	r7, r7, #2
 8005994:	59db      	ldr	r3, [r3, r7]
 8005996:	8b9b      	ldrh	r3, [r3, #28]
 8005998:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 800599a:	2f1b      	cmp	r7, #27
 800599c:	d30a      	bcc.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 800599e:	0bdf      	lsrs	r7, r3, #15
 80059a0:	d008      	beq.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 80059a2:	23e0      	movs	r3, #224	; 0xe0
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4313      	orrs	r3, r2
 80059a8:	824b      	strh	r3, [r1, #18]
 80059aa:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 80059ac:	391a      	subs	r1, #26
 80059ae:	8441      	strh	r1, [r0, #34]	; 0x22
 80059b0:	241e      	movs	r4, #30
 80059b2:	e051      	b.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 80059b4:	0ada      	lsrs	r2, r3, #11
 80059b6:	0712      	lsls	r2, r2, #28
 80059b8:	d107      	bne.n	80059ca <USBPD_PRL_SendMessage+0x21e>
 80059ba:	22fe      	movs	r2, #254	; 0xfe
 80059bc:	0212      	lsls	r2, r2, #8
 80059be:	401a      	ands	r2, r3
 80059c0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	0ddb      	lsrs	r3, r3, #23
 80059c6:	4313      	orrs	r3, r2
 80059c8:	8383      	strh	r3, [r0, #28]
 80059ca:	8a4b      	ldrh	r3, [r1, #18]
 80059cc:	4a8b      	ldr	r2, [pc, #556]	; (8005bfc <.text_25>)
 80059ce:	401a      	ands	r2, r3
 80059d0:	824a      	strh	r2, [r1, #18]
 80059d2:	8b83      	ldrh	r3, [r0, #28]
 80059d4:	0bdb      	lsrs	r3, r3, #15
 80059d6:	d03c      	beq.n	8005a52 <USBPD_PRL_SendMessage+0x2a6>
 80059d8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059da:	1c9b      	adds	r3, r3, #2
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	24e0      	movs	r4, #224	; 0xe0
 80059e2:	01e4      	lsls	r4, r4, #7
 80059e4:	401c      	ands	r4, r3
 80059e6:	4314      	orrs	r4, r2
 80059e8:	824c      	strh	r4, [r1, #18]
 80059ea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80059ec:	1c80      	adds	r0, r0, #2
 80059ee:	0781      	lsls	r1, r0, #30
 80059f0:	0f89      	lsrs	r1, r1, #30
 80059f2:	d025      	beq.n	8005a40 <USBPD_PRL_SendMessage+0x294>
 80059f4:	2200      	movs	r2, #0
 80059f6:	483b      	ldr	r0, [pc, #236]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80059f8:	9b05      	ldr	r3, [sp, #20]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18c0      	adds	r0, r0, r3
 80059fe:	9000      	str	r0, [sp, #0]
 8005a00:	9802      	ldr	r0, [sp, #8]
 8005a02:	9102      	str	r1, [sp, #8]
 8005a04:	e004      	b.n	8005a10 <USBPD_PRL_SendMessage+0x264>
 8005a06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005a08:	1859      	adds	r1, r3, r1
 8005a0a:	1841      	adds	r1, r0, r1
 8005a0c:	710e      	strb	r6, [r1, #4]
 8005a0e:	1c52      	adds	r2, r2, #1
 8005a10:	9900      	ldr	r1, [sp, #0]
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	b2d1      	uxtb	r1, r2
 8005a16:	2404      	movs	r4, #4
 8005a18:	9f02      	ldr	r7, [sp, #8]
 8005a1a:	1be4      	subs	r4, r4, r7
 8005a1c:	42a1      	cmp	r1, r4
 8005a1e:	d3f2      	bcc.n	8005a06 <USBPD_PRL_SendMessage+0x25a>
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	0018      	movs	r0, r3
 8005a24:	3012      	adds	r0, #18
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	1840      	adds	r0, r0, r1
 8005a2a:	8801      	ldrh	r1, [r0, #0]
 8005a2c:	4a73      	ldr	r2, [pc, #460]	; (8005bfc <.text_25>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	0b09      	lsrs	r1, r1, #12
 8005a32:	1c49      	adds	r1, r1, #1
 8005a34:	0309      	lsls	r1, r1, #12
 8005a36:	23e0      	movs	r3, #224	; 0xe0
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	8003      	strh	r3, [r0, #0]
 8005a40:	9800      	ldr	r0, [sp, #0]
 8005a42:	6800      	ldr	r0, [r0, #0]
 8005a44:	3012      	adds	r0, #18
 8005a46:	9903      	ldr	r1, [sp, #12]
 8005a48:	5a40      	ldrh	r0, [r0, r1]
 8005a4a:	0440      	lsls	r0, r0, #17
 8005a4c:	0f40      	lsrs	r0, r0, #29
 8005a4e:	0084      	lsls	r4, r0, #2
 8005a50:	1ca4      	adds	r4, r4, #2
 8005a52:	9800      	ldr	r0, [sp, #0]
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	8446      	strh	r6, [r0, #34]	; 0x22
 8005a58:	9800      	ldr	r0, [sp, #0]
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	8b80      	ldrh	r0, [r0, #28]
 8005a5e:	9902      	ldr	r1, [sp, #8]
 8005a60:	7088      	strb	r0, [r1, #2]
 8005a62:	9800      	ldr	r0, [sp, #0]
 8005a64:	6800      	ldr	r0, [r0, #0]
 8005a66:	8b80      	ldrh	r0, [r0, #28]
 8005a68:	0a00      	lsrs	r0, r0, #8
 8005a6a:	9902      	ldr	r1, [sp, #8]
 8005a6c:	70c8      	strb	r0, [r1, #3]
 8005a6e:	9800      	ldr	r0, [sp, #0]
 8005a70:	6802      	ldr	r2, [r0, #0]
 8005a72:	0010      	movs	r0, r2
 8005a74:	3012      	adds	r0, #18
 8005a76:	9903      	ldr	r1, [sp, #12]
 8005a78:	1840      	adds	r0, r0, r1
 8005a7a:	8803      	ldrh	r3, [r0, #0]
 8005a7c:	498c      	ldr	r1, [pc, #560]	; (8005cb0 <.text_30>)
 8005a7e:	4019      	ands	r1, r3
 8005a80:	320b      	adds	r2, #11
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	5cd2      	ldrb	r2, [r2, r3]
 8005a86:	0253      	lsls	r3, r2, #9
 8005a88:	22e0      	movs	r2, #224	; 0xe0
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	8002      	strh	r2, [r0, #0]
 8005a92:	9802      	ldr	r0, [sp, #8]
 8005a94:	7002      	strb	r2, [r0, #0]
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	3012      	adds	r0, #18
 8005a9c:	9903      	ldr	r1, [sp, #12]
 8005a9e:	5a40      	ldrh	r0, [r0, r1]
 8005aa0:	0a00      	lsrs	r0, r0, #8
 8005aa2:	9902      	ldr	r1, [sp, #8]
 8005aa4:	7048      	strb	r0, [r1, #1]
 8005aa6:	9800      	ldr	r0, [sp, #0]
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	81c4      	strh	r4, [r0, #14]
 8005aac:	210a      	movs	r1, #10
 8005aae:	7141      	strb	r1, [r0, #5]
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	7401      	strb	r1, [r0, #16]
 8005ab4:	b2a0      	uxth	r0, r4
 8005ab6:	9000      	str	r0, [sp, #0]
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	4668      	mov	r0, sp
 8005abc:	7902      	ldrb	r2, [r0, #4]
 8005abe:	7f01      	ldrb	r1, [r0, #28]
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	4e7c      	ldr	r6, [pc, #496]	; (8005cb4 <.text_31>)
 8005ac4:	6836      	ldr	r6, [r6, #0]
 8005ac6:	47b0      	blx	r6
 8005ac8:	497b      	ldr	r1, [pc, #492]	; (8005cb8 <.text_32>)
 8005aca:	4668      	mov	r0, sp
 8005acc:	7940      	ldrb	r0, [r0, #5]
 8005ace:	f00a f95d 	bl	800fd8c <USBPD_TIM_Start>
 8005ad2:	b2a3      	uxth	r3, r4
 8005ad4:	9a02      	ldr	r2, [sp, #8]
 8005ad6:	4668      	mov	r0, sp
 8005ad8:	7901      	ldrb	r1, [r0, #4]
 8005ada:	7f00      	ldrb	r0, [r0, #28]
 8005adc:	f008 fd4f 	bl	800e57e <USBPD_PHY_SendMessage>
 8005ae0:	e087      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005ae2:	bf00      	nop
 8005ae4:	200001f0 	.word	0x200001f0
 8005ae8:	f3ef 8410 	mrs	r4, PRIMASK
 8005aec:	b672      	cpsid	i
 8005aee:	9800      	ldr	r0, [sp, #0]
 8005af0:	6800      	ldr	r0, [r0, #0]
 8005af2:	7940      	ldrb	r0, [r0, #5]
 8005af4:	280a      	cmp	r0, #10
 8005af6:	d109      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005af8:	4668      	mov	r0, sp
 8005afa:	7940      	ldrb	r0, [r0, #5]
 8005afc:	f00a f9b4 	bl	800fe68 <USBPD_TIM_IsExpired>
 8005b00:	2801      	cmp	r0, #1
 8005b02:	d103      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005b04:	200d      	movs	r0, #13
 8005b06:	9900      	ldr	r1, [sp, #0]
 8005b08:	6809      	ldr	r1, [r1, #0]
 8005b0a:	7148      	strb	r0, [r1, #5]
 8005b0c:	f384 8810 	msr	PRIMASK, r4
 8005b10:	e06f      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b12:	7aca      	ldrb	r2, [r1, #11]
 8005b14:	8b67      	ldrh	r7, [r4, #26]
 8005b16:	053f      	lsls	r7, r7, #20
 8005b18:	0f7f      	lsrs	r7, r7, #29
 8005b1a:	42ba      	cmp	r2, r7
 8005b1c:	d10c      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b1e:	7ea3      	ldrb	r3, [r4, #26]
 8005b20:	06db      	lsls	r3, r3, #27
 8005b22:	0edb      	lsrs	r3, r3, #27
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b28:	1c52      	adds	r2, r2, #1
 8005b2a:	0750      	lsls	r0, r2, #29
 8005b2c:	0f40      	lsrs	r0, r0, #29
 8005b2e:	72c8      	strb	r0, [r1, #11]
 8005b30:	9800      	ldr	r0, [sp, #0]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	7146      	strb	r6, [r0, #5]
 8005b36:	e011      	b.n	8005b5c <USBPD_PRL_SendMessage+0x3b0>
 8005b38:	210d      	movs	r1, #13
 8005b3a:	7141      	strb	r1, [r0, #5]
 8005b3c:	e059      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b3e:	7ac8      	ldrb	r0, [r1, #11]
 8005b40:	1c40      	adds	r0, r0, #1
 8005b42:	0740      	lsls	r0, r0, #29
 8005b44:	0f40      	lsrs	r0, r0, #29
 8005b46:	72c8      	strb	r0, [r1, #11]
 8005b48:	9800      	ldr	r0, [sp, #0]
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	7146      	strb	r6, [r0, #5]
 8005b4e:	8ba1      	ldrh	r1, [r4, #28]
 8005b50:	485a      	ldr	r0, [pc, #360]	; (8005cbc <.text_33>)
 8005b52:	4008      	ands	r0, r1
 8005b54:	83a0      	strh	r0, [r4, #28]
 8005b56:	495a      	ldr	r1, [pc, #360]	; (8005cc0 <.text_34>)
 8005b58:	4001      	ands	r1, r0
 8005b5a:	83a1      	strh	r1, [r4, #28]
 8005b5c:	2505      	movs	r5, #5
 8005b5e:	e048      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b60:	78a0      	ldrb	r0, [r4, #2]
 8005b62:	1c40      	adds	r0, r0, #1
 8005b64:	70a0      	strb	r0, [r4, #2]
 8005b66:	9a03      	ldr	r2, [sp, #12]
 8005b68:	18a2      	adds	r2, r4, r2
 8005b6a:	8a52      	ldrh	r2, [r2, #18]
 8005b6c:	0613      	lsls	r3, r2, #24
 8005b6e:	0f9b      	lsrs	r3, r3, #30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <USBPD_PRL_SendMessage+0x3cc>
 8005b74:	2303      	movs	r3, #3
 8005b76:	e000      	b.n	8005b7a <USBPD_PRL_SendMessage+0x3ce>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	0bd2      	lsrs	r2, r2, #15
 8005b7c:	d006      	beq.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b7e:	8ba2      	ldrh	r2, [r4, #28]
 8005b80:	0bd4      	lsrs	r4, r2, #15
 8005b82:	d103      	bne.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b84:	05d2      	lsls	r2, r2, #23
 8005b86:	0dd2      	lsrs	r2, r2, #23
 8005b88:	2a1b      	cmp	r2, #27
 8005b8a:	d207      	bcs.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b8c:	b2c0      	uxtb	r0, r0
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d304      	bcc.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b92:	2010      	movs	r0, #16
 8005b94:	9900      	ldr	r1, [sp, #0]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	7148      	strb	r0, [r1, #5]
 8005b9a:	e02a      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b9c:	9800      	ldr	r0, [sp, #0]
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	7146      	strb	r6, [r0, #5]
 8005ba2:	2507      	movs	r5, #7
 8005ba4:	7ac8      	ldrb	r0, [r1, #11]
 8005ba6:	1c40      	adds	r0, r0, #1
 8005ba8:	2207      	movs	r2, #7
 8005baa:	4002      	ands	r2, r0
 8005bac:	72ca      	strb	r2, [r1, #11]
 8005bae:	e020      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	7141      	strb	r1, [r0, #5]
 8005bb4:	2002      	movs	r0, #2
 8005bb6:	7420      	strb	r0, [r4, #16]
 8005bb8:	493f      	ldr	r1, [pc, #252]	; (8005cb8 <.text_32>)
 8005bba:	4668      	mov	r0, sp
 8005bbc:	7940      	ldrb	r0, [r0, #5]
 8005bbe:	f00a f8e5 	bl	800fd8c <USBPD_TIM_Start>
 8005bc2:	89e3      	ldrh	r3, [r4, #14]
 8005bc4:	9a02      	ldr	r2, [sp, #8]
 8005bc6:	4668      	mov	r0, sp
 8005bc8:	7901      	ldrb	r1, [r0, #4]
 8005bca:	7f00      	ldrb	r0, [r0, #28]
 8005bcc:	f008 fcd7 	bl	800e57e <USBPD_PHY_SendMessage>
 8005bd0:	4668      	mov	r0, sp
 8005bd2:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8005bd4:	9000      	str	r0, [sp, #0]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	4668      	mov	r0, sp
 8005bda:	7902      	ldrb	r2, [r0, #4]
 8005bdc:	7f01      	ldrb	r1, [r0, #28]
 8005bde:	2002      	movs	r0, #2
 8005be0:	4c34      	ldr	r4, [pc, #208]	; (8005cb4 <.text_31>)
 8005be2:	6824      	ldr	r4, [r4, #0]
 8005be4:	47a0      	blx	r4
 8005be6:	e004      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005be8:	7146      	strb	r6, [r0, #5]
 8005bea:	2506      	movs	r5, #6
 8005bec:	e001      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bee:	7146      	strb	r6, [r0, #5]
 8005bf0:	2510      	movs	r5, #16
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	b009      	add	sp, #36	; 0x24
 8005bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bf8 <.text_24>:
 8005bf8:	0000ffe0 	.word	0x0000ffe0

08005bfc <.text_25>:
 8005bfc:	00008fff 	.word	0x00008fff

08005c00 <USBPD_PRL_ResetRequestProcess>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	0005      	movs	r5, r0
 8005c04:	000e      	movs	r6, r1
 8005c06:	482f      	ldr	r0, [pc, #188]	; (8005cc4 <.text_35>)
 8005c08:	00a9      	lsls	r1, r5, #2
 8005c0a:	1840      	adds	r0, r0, r1
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	6804      	ldr	r4, [r0, #0]
 8005c10:	2700      	movs	r7, #0
 8005c12:	70e7      	strb	r7, [r4, #3]
 8005c14:	72e7      	strb	r7, [r4, #11]
 8005c16:	7327      	strb	r7, [r4, #12]
 8005c18:	7367      	strb	r7, [r4, #13]
 8005c1a:	220f      	movs	r2, #15
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	1da0      	adds	r0, r4, #6
 8005c20:	f015 f842 	bl	801aca8 <__aeabi_memset>
 8005c24:	9800      	ldr	r0, [sp, #0]
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	7147      	strb	r7, [r0, #5]
 8005c2a:	9700      	str	r7, [sp, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	0032      	movs	r2, r6
 8005c30:	0029      	movs	r1, r5
 8005c32:	2002      	movs	r0, #2
 8005c34:	4f1f      	ldr	r7, [pc, #124]	; (8005cb4 <.text_31>)
 8005c36:	683f      	ldr	r7, [r7, #0]
 8005c38:	47b8      	blx	r7
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	f000 f849 	bl	8005cd2 <PRL_DisableRX>
 8005c40:	0031      	movs	r1, r6
 8005c42:	0028      	movs	r0, r5
 8005c44:	f008 fc85 	bl	800e552 <USBPD_PHY_ResetRequest>
 8005c48:	2005      	movs	r0, #5
 8005c4a:	7120      	strb	r0, [r4, #4]
 8005c4c:	78e0      	ldrb	r0, [r4, #3]
 8005c4e:	2801      	cmp	r0, #1
 8005c50:	d002      	beq.n	8005c58 <USBPD_PRL_ResetRequestProcess+0x58>
 8005c52:	7920      	ldrb	r0, [r4, #4]
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1f9      	bne.n	8005c4c <USBPD_PRL_ResetRequestProcess+0x4c>
 8005c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005c5a <USBDPD_PRL_BistCarrierEyeMode>:
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	2905      	cmp	r1, #5
 8005c5e:	d102      	bne.n	8005c66 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005c60:	f008 fcac 	bl	800e5bc <USBPD_PHY_Send_BIST_Pattern>
 8005c64:	bd02      	pop	{r1, pc}
 8005c66:	2010      	movs	r0, #16
 8005c68:	bd02      	pop	{r1, pc}

08005c6a <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	2905      	cmp	r1, #5
 8005c6e:	d103      	bne.n	8005c78 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005c70:	2107      	movs	r1, #7
 8005c72:	f008 fcb3 	bl	800e5dc <USBPD_PHY_ExitTransmit>
 8005c76:	bd02      	pop	{r1, pc}
 8005c78:	2010      	movs	r0, #16
 8005c7a:	bd02      	pop	{r1, pc}

08005c7c <USBPD_PRL_Reset>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	0004      	movs	r4, r0
 8005c80:	4810      	ldr	r0, [pc, #64]	; (8005cc4 <.text_35>)
 8005c82:	00a1      	lsls	r1, r4, #2
 8005c84:	5845      	ldr	r5, [r0, r1]
 8005c86:	2600      	movs	r6, #0
 8005c88:	716e      	strb	r6, [r5, #5]
 8005c8a:	702e      	strb	r6, [r5, #0]
 8005c8c:	712e      	strb	r6, [r5, #4]
 8005c8e:	72ee      	strb	r6, [r5, #11]
 8005c90:	732e      	strb	r6, [r5, #12]
 8005c92:	736e      	strb	r6, [r5, #13]
 8005c94:	220f      	movs	r2, #15
 8005c96:	2103      	movs	r1, #3
 8005c98:	1da8      	adds	r0, r5, #6
 8005c9a:	f015 f805 	bl	801aca8 <__aeabi_memset>
 8005c9e:	2025      	movs	r0, #37	; 0x25
 8005ca0:	542e      	strb	r6, [r5, r0]
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f008 fc4b 	bl	800e53e <USBPD_PHY_Reset>
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f008 fd02 	bl	800e6b2 <USBPD_PHY_EnableRX>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}

08005cb0 <.text_30>:
 8005cb0:	0000f1ff 	.word	0x0000f1ff

08005cb4 <.text_31>:
 8005cb4:	20000000 	.word	0x20000000

08005cb8 <.text_32>:
 8005cb8:	00002710 	.word	0x00002710

08005cbc <.text_33>:
 8005cbc:	000087ff 	.word	0x000087ff

08005cc0 <.text_34>:
 8005cc0:	0000fbff 	.word	0x0000fbff

08005cc4 <.text_35>:
 8005cc4:	200001f0 	.word	0x200001f0

08005cc8 <USBPD_PRL_Stop>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	f008 fd01 	bl	800e6d0 <USBPD_PHY_DisableRX>
 8005cce:	bd01      	pop	{r0, pc}

08005cd0 <USBPD_PRL_DeInit>:
 8005cd0:	4770      	bx	lr

08005cd2 <PRL_DisableRX>:
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	f008 fcfc 	bl	800e6d0 <USBPD_PHY_DisableRX>
 8005cd8:	bd01      	pop	{r0, pc}
	...

08005cdc <PRL_Received>:
 8005cdc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	a809      	add	r0, sp, #36	; 0x24
 8005ce2:	7805      	ldrb	r5, [r0, #0]
 8005ce4:	48d0      	ldr	r0, [pc, #832]	; (8006028 <PRL_Received+0x34c>)
 8005ce6:	00a9      	lsls	r1, r5, #2
 8005ce8:	1846      	adds	r6, r0, r1
 8005cea:	6834      	ldr	r4, [r6, #0]
 8005cec:	4628      	mov	r0, r5
 8005cee:	f008 fc1b 	bl	800e528 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005cf2:	a909      	add	r1, sp, #36	; 0x24
 8005cf4:	7809      	ldrb	r1, [r1, #0]
 8005cf6:	0049      	lsls	r1, r1, #1
 8005cf8:	466a      	mov	r2, sp
 8005cfa:	7011      	strb	r1, [r2, #0]
 8005cfc:	0001      	movs	r1, r0
 8005cfe:	4668      	mov	r0, sp
 8005d00:	7800      	ldrb	r0, [r0, #0]
 8005d02:	f00a f843 	bl	800fd8c <USBPD_TIM_Start>
 8005d06:	2030      	movs	r0, #48	; 0x30
 8005d08:	5c20      	ldrb	r0, [r4, r0]
 8005d0a:	2131      	movs	r1, #49	; 0x31
 8005d0c:	5c61      	ldrb	r1, [r4, r1]
 8005d0e:	0209      	lsls	r1, r1, #8
 8005d10:	1840      	adds	r0, r0, r1
 8005d12:	4669      	mov	r1, sp
 8005d14:	8088      	strh	r0, [r1, #4]
 8005d16:	4668      	mov	r0, sp
 8005d18:	8880      	ldrh	r0, [r0, #4]
 8005d1a:	0440      	lsls	r0, r0, #17
 8005d1c:	0f40      	lsrs	r0, r0, #29
 8005d1e:	0080      	lsls	r0, r0, #2
 8005d20:	9005      	str	r0, [sp, #20]
 8005d22:	1c80      	adds	r0, r0, #2
 8005d24:	9007      	str	r0, [sp, #28]
 8005d26:	48c1      	ldr	r0, [pc, #772]	; (800602c <.text_40>)
 8005d28:	8889      	ldrh	r1, [r1, #4]
 8005d2a:	4001      	ands	r1, r0
 8005d2c:	2901      	cmp	r1, #1
 8005d2e:	d116      	bne.n	8005d5e <PRL_Received+0x82>
 8005d30:	0068      	lsls	r0, r5, #1
 8005d32:	1c40      	adds	r0, r0, #1
 8005d34:	b2c0      	uxtb	r0, r0
 8005d36:	f00a f897 	bl	800fe68 <USBPD_TIM_IsExpired>
 8005d3a:	2801      	cmp	r0, #1
 8005d3c:	d04c      	beq.n	8005dd8 <PRL_Received+0xfc>
 8005d3e:	200b      	movs	r0, #11
 8005d40:	6831      	ldr	r1, [r6, #0]
 8005d42:	7148      	strb	r0, [r1, #5]
 8005d44:	4668      	mov	r0, sp
 8005d46:	8880      	ldrh	r0, [r0, #4]
 8005d48:	8360      	strh	r0, [r4, #26]
 8005d4a:	9807      	ldr	r0, [sp, #28]
 8005d4c:	9000      	str	r0, [sp, #0]
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3330      	adds	r3, #48	; 0x30
 8005d52:	a80a      	add	r0, sp, #40	; 0x28
 8005d54:	7802      	ldrb	r2, [r0, #0]
 8005d56:	a809      	add	r0, sp, #36	; 0x24
 8005d58:	7801      	ldrb	r1, [r0, #0]
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e15f      	b.n	800601e <PRL_Received+0x342>
 8005d5e:	49b4      	ldr	r1, [pc, #720]	; (8006030 <.text_41>)
 8005d60:	880f      	ldrh	r7, [r1, #0]
 8005d62:	2601      	movs	r6, #1
 8005d64:	72a6      	strb	r6, [r4, #10]
 8005d66:	a90a      	add	r1, sp, #40	; 0x28
 8005d68:	7809      	ldrb	r1, [r1, #0]
 8005d6a:	1861      	adds	r1, r4, r1
 8005d6c:	9104      	str	r1, [sp, #16]
 8005d6e:	2500      	movs	r5, #0
 8005d70:	4669      	mov	r1, sp
 8005d72:	8889      	ldrh	r1, [r1, #4]
 8005d74:	4008      	ands	r0, r1
 8005d76:	280d      	cmp	r0, #13
 8005d78:	d106      	bne.n	8005d88 <PRL_Received+0xac>
 8005d7a:	9904      	ldr	r1, [sp, #16]
 8005d7c:	72cd      	strb	r5, [r1, #11]
 8005d7e:	220f      	movs	r2, #15
 8005d80:	2103      	movs	r1, #3
 8005d82:	1da0      	adds	r0, r4, #6
 8005d84:	f014 ff90 	bl	801aca8 <__aeabi_memset>
 8005d88:	a80a      	add	r0, sp, #40	; 0x28
 8005d8a:	7800      	ldrb	r0, [r0, #0]
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d10d      	bne.n	8005dac <PRL_Received+0xd0>
 8005d90:	8a61      	ldrh	r1, [r4, #18]
 8005d92:	094a      	lsrs	r2, r1, #5
 8005d94:	2001      	movs	r0, #1
 8005d96:	4010      	ands	r0, r2
 8005d98:	0a0a      	lsrs	r2, r1, #8
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4011      	ands	r1, r2
 8005d9e:	4abf      	ldr	r2, [pc, #764]	; (800609c <.text_44>)
 8005da0:	403a      	ands	r2, r7
 8005da2:	0143      	lsls	r3, r0, #5
 8005da4:	4313      	orrs	r3, r2
 8005da6:	0208      	lsls	r0, r1, #8
 8005da8:	4318      	orrs	r0, r3
 8005daa:	e001      	b.n	8005db0 <PRL_Received+0xd4>
 8005dac:	48bc      	ldr	r0, [pc, #752]	; (80060a0 <.text_45>)
 8005dae:	4038      	ands	r0, r7
 8005db0:	49bc      	ldr	r1, [pc, #752]	; (80060a4 <.text_46>)
 8005db2:	4001      	ands	r1, r0
 8005db4:	4668      	mov	r0, sp
 8005db6:	8880      	ldrh	r0, [r0, #4]
 8005db8:	22e0      	movs	r2, #224	; 0xe0
 8005dba:	0112      	lsls	r2, r2, #4
 8005dbc:	4002      	ands	r2, r0
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	2040      	movs	r0, #64	; 0x40
 8005dc2:	4310      	orrs	r0, r2
 8005dc4:	7620      	strb	r0, [r4, #24]
 8005dc6:	0a00      	lsrs	r0, r0, #8
 8005dc8:	7660      	strb	r0, [r4, #25]
 8005dca:	a80a      	add	r0, sp, #40	; 0x28
 8005dcc:	7801      	ldrb	r1, [r0, #0]
 8005dce:	a809      	add	r0, sp, #36	; 0x24
 8005dd0:	7800      	ldrb	r0, [r0, #0]
 8005dd2:	f7fa ff49 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d100      	bne.n	8005ddc <PRL_Received+0x100>
 8005dda:	e123      	b.n	8006024 <PRL_Received+0x348>
 8005ddc:	7426      	strb	r6, [r4, #16]
 8005dde:	4668      	mov	r0, sp
 8005de0:	7800      	ldrb	r0, [r0, #0]
 8005de2:	f00a f841 	bl	800fe68 <USBPD_TIM_IsExpired>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f9      	beq.n	8005dde <PRL_Received+0x102>
 8005dea:	2302      	movs	r3, #2
 8005dec:	0022      	movs	r2, r4
 8005dee:	3218      	adds	r2, #24
 8005df0:	a80a      	add	r0, sp, #40	; 0x28
 8005df2:	7801      	ldrb	r1, [r0, #0]
 8005df4:	a809      	add	r0, sp, #36	; 0x24
 8005df6:	7800      	ldrb	r0, [r0, #0]
 8005df8:	f008 fbc1 	bl	800e57e <USBPD_PHY_SendMessage>
 8005dfc:	9006      	str	r0, [sp, #24]
 8005dfe:	a80a      	add	r0, sp, #40	; 0x28
 8005e00:	7800      	ldrb	r0, [r0, #0]
 8005e02:	7260      	strb	r0, [r4, #9]
 8005e04:	0021      	movs	r1, r4
 8005e06:	3130      	adds	r1, #48	; 0x30
 8005e08:	a809      	add	r0, sp, #36	; 0x24
 8005e0a:	7800      	ldrb	r0, [r0, #0]
 8005e0c:	f7fa ff60 	bl	8000cd0 <PE_PRL_PostReceiveEventCopy>
 8005e10:	2033      	movs	r0, #51	; 0x33
 8005e12:	5c20      	ldrb	r0, [r4, r0]
 8005e14:	2132      	movs	r1, #50	; 0x32
 8005e16:	5c61      	ldrb	r1, [r4, r1]
 8005e18:	0203      	lsls	r3, r0, #8
 8005e1a:	18ca      	adds	r2, r1, r3
 8005e1c:	466b      	mov	r3, sp
 8005e1e:	80da      	strh	r2, [r3, #6]
 8005e20:	466a      	mov	r2, sp
 8005e22:	8892      	ldrh	r2, [r2, #4]
 8005e24:	0452      	lsls	r2, r2, #17
 8005e26:	0f52      	lsrs	r2, r2, #29
 8005e28:	81da      	strh	r2, [r3, #14]
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	88d2      	ldrh	r2, [r2, #6]
 8005e2e:	05d2      	lsls	r2, r2, #23
 8005e30:	0dd2      	lsrs	r2, r2, #23
 8005e32:	811a      	strh	r2, [r3, #8]
 8005e34:	466a      	mov	r2, sp
 8005e36:	88d2      	ldrh	r2, [r2, #6]
 8005e38:	0bd2      	lsrs	r2, r2, #15
 8005e3a:	819a      	strh	r2, [r3, #12]
 8005e3c:	466a      	mov	r2, sp
 8005e3e:	8892      	ldrh	r2, [r2, #4]
 8005e40:	0bd2      	lsrs	r2, r2, #15
 8005e42:	815a      	strh	r2, [r3, #10]
 8005e44:	d007      	beq.n	8005e56 <PRL_Received+0x17a>
 8005e46:	466a      	mov	r2, sp
 8005e48:	8992      	ldrh	r2, [r2, #12]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d103      	bne.n	8005e56 <PRL_Received+0x17a>
 8005e4e:	4668      	mov	r0, sp
 8005e50:	8900      	ldrh	r0, [r0, #8]
 8005e52:	1d00      	adds	r0, r0, #4
 8005e54:	e01b      	b.n	8005e8e <PRL_Received+0x1b2>
 8005e56:	7822      	ldrb	r2, [r4, #0]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d117      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e5c:	466a      	mov	r2, sp
 8005e5e:	89d2      	ldrh	r2, [r2, #14]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d013      	beq.n	8005e8c <PRL_Received+0x1b0>
 8005e64:	466a      	mov	r2, sp
 8005e66:	8892      	ldrh	r2, [r2, #4]
 8005e68:	06d2      	lsls	r2, r2, #27
 8005e6a:	0ed2      	lsrs	r2, r2, #27
 8005e6c:	2a03      	cmp	r2, #3
 8005e6e:	d10d      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e70:	0200      	lsls	r0, r0, #8
 8005e72:	1808      	adds	r0, r1, r0
 8005e74:	2134      	movs	r1, #52	; 0x34
 8005e76:	5c61      	ldrb	r1, [r4, r1]
 8005e78:	0409      	lsls	r1, r1, #16
 8005e7a:	1840      	adds	r0, r0, r1
 8005e7c:	2135      	movs	r1, #53	; 0x35
 8005e7e:	5c61      	ldrb	r1, [r4, r1]
 8005e80:	0609      	lsls	r1, r1, #24
 8005e82:	1840      	adds	r0, r0, r1
 8005e84:	0f00      	lsrs	r0, r0, #28
 8005e86:	2808      	cmp	r0, #8
 8005e88:	d100      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e8a:	7026      	strb	r6, [r4, #0]
 8005e8c:	9807      	ldr	r0, [sp, #28]
 8005e8e:	9000      	str	r0, [sp, #0]
 8005e90:	0023      	movs	r3, r4
 8005e92:	3330      	adds	r3, #48	; 0x30
 8005e94:	a80a      	add	r0, sp, #40	; 0x28
 8005e96:	7802      	ldrb	r2, [r0, #0]
 8005e98:	a809      	add	r0, sp, #36	; 0x24
 8005e9a:	7801      	ldrb	r1, [r0, #0]
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	4fc1      	ldr	r7, [pc, #772]	; (80061a4 <.text_51>)
 8005ea0:	683f      	ldr	r7, [r7, #0]
 8005ea2:	47b8      	blx	r7
 8005ea4:	9806      	ldr	r0, [sp, #24]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d10b      	bne.n	8005ec2 <PRL_Received+0x1e6>
 8005eaa:	2002      	movs	r0, #2
 8005eac:	9000      	str	r0, [sp, #0]
 8005eae:	0023      	movs	r3, r4
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	a80a      	add	r0, sp, #40	; 0x28
 8005eb4:	7802      	ldrb	r2, [r0, #0]
 8005eb6:	a809      	add	r0, sp, #36	; 0x24
 8005eb8:	7801      	ldrb	r1, [r0, #0]
 8005eba:	2002      	movs	r0, #2
 8005ebc:	4fb9      	ldr	r7, [pc, #740]	; (80061a4 <.text_51>)
 8005ebe:	683f      	ldr	r7, [r7, #0]
 8005ec0:	47b8      	blx	r7
 8005ec2:	4668      	mov	r0, sp
 8005ec4:	8880      	ldrh	r0, [r0, #4]
 8005ec6:	0a40      	lsrs	r0, r0, #9
 8005ec8:	2107      	movs	r1, #7
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	7992      	ldrb	r2, [r2, #6]
 8005ece:	2307      	movs	r3, #7
 8005ed0:	4003      	ands	r3, r0
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d103      	bne.n	8005ede <PRL_Received+0x202>
 8005ed6:	9a06      	ldr	r2, [sp, #24]
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	d100      	bne.n	8005ede <PRL_Received+0x202>
 8005edc:	e08f      	b.n	8005ffe <PRL_Received+0x322>
 8005ede:	4001      	ands	r1, r0
 8005ee0:	9804      	ldr	r0, [sp, #16]
 8005ee2:	7181      	strb	r1, [r0, #6]
 8005ee4:	4668      	mov	r0, sp
 8005ee6:	8880      	ldrh	r0, [r0, #4]
 8005ee8:	8420      	strh	r0, [r4, #32]
 8005eea:	4668      	mov	r0, sp
 8005eec:	8940      	ldrh	r0, [r0, #10]
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d043      	beq.n	8005f7a <PRL_Received+0x29e>
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	8980      	ldrh	r0, [r0, #12]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d03f      	beq.n	8005f7a <PRL_Received+0x29e>
 8005efa:	4668      	mov	r0, sp
 8005efc:	88c0      	ldrh	r0, [r0, #6]
 8005efe:	83e0      	strh	r0, [r4, #30]
 8005f00:	4668      	mov	r0, sp
 8005f02:	88c0      	ldrh	r0, [r0, #6]
 8005f04:	0440      	lsls	r0, r0, #17
 8005f06:	0f01      	lsrs	r1, r0, #28
 8005f08:	201a      	movs	r0, #26
 8005f0a:	4348      	muls	r0, r1
 8005f0c:	9905      	ldr	r1, [sp, #20]
 8005f0e:	1e89      	subs	r1, r1, #2
 8005f10:	466a      	mov	r2, sp
 8005f12:	88d2      	ldrh	r2, [r2, #6]
 8005f14:	23f8      	movs	r3, #248	; 0xf8
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d12f      	bne.n	8005f7c <PRL_Received+0x2a0>
 8005f1c:	466a      	mov	r2, sp
 8005f1e:	88d2      	ldrh	r2, [r2, #6]
 8005f20:	05d2      	lsls	r2, r2, #23
 8005f22:	0dd2      	lsrs	r2, r2, #23
 8005f24:	466b      	mov	r3, sp
 8005f26:	89db      	ldrh	r3, [r3, #14]
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d30a      	bcc.n	8005f42 <PRL_Received+0x266>
 8005f2c:	2a1a      	cmp	r2, #26
 8005f2e:	d811      	bhi.n	8005f54 <PRL_Received+0x278>
 8005f30:	e007      	b.n	8005f42 <PRL_Received+0x266>
 8005f32:	0023      	movs	r3, r4
 8005f34:	3334      	adds	r3, #52	; 0x34
 8005f36:	5d5b      	ldrb	r3, [r3, r5]
 8005f38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f3a:	182f      	adds	r7, r5, r0
 8005f3c:	55f3      	strb	r3, [r6, r7]
 8005f3e:	1c6d      	adds	r5, r5, #1
 8005f40:	b2ad      	uxth	r5, r5
 8005f42:	428d      	cmp	r5, r1
 8005f44:	d3f5      	bcc.n	8005f32 <PRL_Received+0x256>
 8005f46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005f48:	4291      	cmp	r1, r2
 8005f4a:	d301      	bcc.n	8005f50 <PRL_Received+0x274>
 8005f4c:	4669      	mov	r1, sp
 8005f4e:	8909      	ldrh	r1, [r1, #8]
 8005f50:	8001      	strh	r1, [r0, #0]
 8005f52:	e00c      	b.n	8005f6e <PRL_Received+0x292>
 8005f54:	2025      	movs	r0, #37	; 0x25
 8005f56:	5426      	strb	r6, [r4, r0]
 8005f58:	0020      	movs	r0, r4
 8005f5a:	3034      	adds	r0, #52	; 0x34
 8005f5c:	5d40      	ldrb	r0, [r0, r5]
 8005f5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005f60:	5548      	strb	r0, [r1, r5]
 8005f62:	1c6d      	adds	r5, r5, #1
 8005f64:	2d1a      	cmp	r5, #26
 8005f66:	d3f7      	bcc.n	8005f58 <PRL_Received+0x27c>
 8005f68:	201a      	movs	r0, #26
 8005f6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f6c:	8008      	strh	r0, [r1, #0]
 8005f6e:	a80a      	add	r0, sp, #40	; 0x28
 8005f70:	7801      	ldrb	r1, [r0, #0]
 8005f72:	a809      	add	r0, sp, #36	; 0x24
 8005f74:	7800      	ldrb	r0, [r0, #0]
 8005f76:	f7fa fe77 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005f7a:	e053      	b.n	8006024 <PRL_Received+0x348>
 8005f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	1e9b      	subs	r3, r3, #2
 8005f86:	27ff      	movs	r7, #255	; 0xff
 8005f88:	1dbf      	adds	r7, r7, #6
 8005f8a:	321a      	adds	r2, #26
 8005f8c:	42ba      	cmp	r2, r7
 8005f8e:	d21b      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f90:	466a      	mov	r2, sp
 8005f92:	8912      	ldrh	r2, [r2, #8]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d217      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f98:	2225      	movs	r2, #37	; 0x25
 8005f9a:	54a6      	strb	r6, [r4, r2]
 8005f9c:	e007      	b.n	8005fae <PRL_Received+0x2d2>
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	3234      	adds	r2, #52	; 0x34
 8005fa2:	5d52      	ldrb	r2, [r2, r5]
 8005fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fa6:	182e      	adds	r6, r5, r0
 8005fa8:	559a      	strb	r2, [r3, r6]
 8005faa:	1c6d      	adds	r5, r5, #1
 8005fac:	b2ad      	uxth	r5, r5
 8005fae:	428d      	cmp	r5, r1
 8005fb0:	d3f5      	bcc.n	8005f9e <PRL_Received+0x2c2>
 8005fb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005fb4:	8801      	ldrh	r1, [r0, #0]
 8005fb6:	466a      	mov	r2, sp
 8005fb8:	8892      	ldrh	r2, [r2, #4]
 8005fba:	0a92      	lsrs	r2, r2, #10
 8005fbc:	231c      	movs	r3, #28
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	1e9a      	subs	r2, r3, #2
 8005fc2:	1889      	adds	r1, r1, r2
 8005fc4:	8001      	strh	r1, [r0, #0]
 8005fc6:	e02d      	b.n	8006024 <PRL_Received+0x348>
 8005fc8:	42bb      	cmp	r3, r7
 8005fca:	d215      	bcs.n	8005ff8 <PRL_Received+0x31c>
 8005fcc:	466a      	mov	r2, sp
 8005fce:	8912      	ldrh	r2, [r2, #8]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d311      	bcc.n	8005ff8 <PRL_Received+0x31c>
 8005fd4:	2225      	movs	r2, #37	; 0x25
 8005fd6:	54a6      	strb	r6, [r4, r2]
 8005fd8:	e007      	b.n	8005fea <PRL_Received+0x30e>
 8005fda:	0022      	movs	r2, r4
 8005fdc:	3234      	adds	r2, #52	; 0x34
 8005fde:	5d52      	ldrb	r2, [r2, r5]
 8005fe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fe2:	182e      	adds	r6, r5, r0
 8005fe4:	559a      	strb	r2, [r3, r6]
 8005fe6:	1c6d      	adds	r5, r5, #1
 8005fe8:	b2ad      	uxth	r5, r5
 8005fea:	428d      	cmp	r5, r1
 8005fec:	d3f5      	bcc.n	8005fda <PRL_Received+0x2fe>
 8005fee:	4668      	mov	r0, sp
 8005ff0:	8900      	ldrh	r0, [r0, #8]
 8005ff2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ff4:	8008      	strh	r0, [r1, #0]
 8005ff6:	e015      	b.n	8006024 <PRL_Received+0x348>
 8005ff8:	2025      	movs	r0, #37	; 0x25
 8005ffa:	5425      	strb	r5, [r4, r0]
 8005ffc:	e012      	b.n	8006024 <PRL_Received+0x348>
 8005ffe:	20ff      	movs	r0, #255	; 0xff
 8006000:	7260      	strb	r0, [r4, #9]
 8006002:	7425      	strb	r5, [r4, #16]
 8006004:	a809      	add	r0, sp, #36	; 0x24
 8006006:	7800      	ldrb	r0, [r0, #0]
 8006008:	f7fa fe4a 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 800600c:	72a5      	strb	r5, [r4, #10]
 800600e:	2017      	movs	r0, #23
 8006010:	9000      	str	r0, [sp, #0]
 8006012:	bf00      	nop
 8006014:	a367      	add	r3, pc, #412	; (adr r3, 80061b4 <.text_55>)
 8006016:	2200      	movs	r2, #0
 8006018:	a809      	add	r0, sp, #36	; 0x24
 800601a:	7801      	ldrb	r1, [r0, #0]
 800601c:	2006      	movs	r0, #6
 800601e:	4c61      	ldr	r4, [pc, #388]	; (80061a4 <.text_51>)
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	47a0      	blx	r4
 8006024:	b00b      	add	sp, #44	; 0x2c
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006028:	200001f0 	.word	0x200001f0

0800602c <.text_40>:
 800602c:	0000f01f 	.word	0x0000f01f

08006030 <.text_41>:
 8006030:	0801c350 	.word	0x0801c350

08006034 <PRL_ResetIndicate>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0004      	movs	r4, r0
 8006038:	000d      	movs	r5, r1
 800603a:	2d05      	cmp	r5, #5
 800603c:	d119      	bne.n	8006072 <PRL_ResetIndicate+0x3e>
 800603e:	485a      	ldr	r0, [pc, #360]	; (80061a8 <.text_52>)
 8006040:	00a1      	lsls	r1, r4, #2
 8006042:	1840      	adds	r0, r0, r1
 8006044:	9000      	str	r0, [sp, #0]
 8006046:	6807      	ldr	r7, [r0, #0]
 8006048:	2600      	movs	r6, #0
 800604a:	2000      	movs	r0, #0
 800604c:	b2c2      	uxtb	r2, r0
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	72d6      	strb	r6, [r2, #11]
 8006052:	1c40      	adds	r0, r0, #1
 8006054:	b2c1      	uxtb	r1, r0
 8006056:	2903      	cmp	r1, #3
 8006058:	d3f8      	bcc.n	800604c <PRL_ResetIndicate+0x18>
 800605a:	220f      	movs	r2, #15
 800605c:	2103      	movs	r1, #3
 800605e:	1db8      	adds	r0, r7, #6
 8006060:	f014 fe22 	bl	801aca8 <__aeabi_memset>
 8006064:	9900      	ldr	r1, [sp, #0]
 8006066:	6809      	ldr	r1, [r1, #0]
 8006068:	714e      	strb	r6, [r1, #5]
 800606a:	703e      	strb	r6, [r7, #0]
 800606c:	0020      	movs	r0, r4
 800606e:	f7ff fe30 	bl	8005cd2 <PRL_DisableRX>
 8006072:	2000      	movs	r0, #0
 8006074:	9000      	str	r0, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	002a      	movs	r2, r5
 800607a:	0021      	movs	r1, r4
 800607c:	2001      	movs	r0, #1
 800607e:	4e49      	ldr	r6, [pc, #292]	; (80061a4 <.text_51>)
 8006080:	6836      	ldr	r6, [r6, #0]
 8006082:	47b0      	blx	r6
 8006084:	0029      	movs	r1, r5
 8006086:	0020      	movs	r0, r4
 8006088:	f7fa fce6 	bl	8000a58 <PE_PRL_ResetReceived>
 800608c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800608e <PRL_ResetCompleted>:
 800608e:	2101      	movs	r1, #1
 8006090:	4a45      	ldr	r2, [pc, #276]	; (80061a8 <.text_52>)
 8006092:	0080      	lsls	r0, r0, #2
 8006094:	5810      	ldr	r0, [r2, r0]
 8006096:	70c1      	strb	r1, [r0, #3]
 8006098:	4770      	bx	lr
	...

0800609c <.text_44>:
 800609c:	0000fedf 	.word	0x0000fedf

080060a0 <.text_45>:
 80060a0:	0000feff 	.word	0x0000feff

080060a4 <.text_46>:
 80060a4:	0000f13f 	.word	0x0000f13f

080060a8 <PRL_BistCompleted>:
 80060a8:	b580      	push	{r7, lr}
 80060aa:	f7fa fd01 	bl	8000ab0 <PE_PRL_BistCompleted>
 80060ae:	bd01      	pop	{r0, pc}

080060b0 <PRL_TxCompleted>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	0004      	movs	r4, r0
 80060b4:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <.text_52>)
 80060b6:	00a3      	lsls	r3, r4, #2
 80060b8:	58d6      	ldr	r6, [r2, r3]
 80060ba:	2500      	movs	r5, #0
 80060bc:	7c32      	ldrb	r2, [r6, #16]
 80060be:	2a01      	cmp	r2, #1
 80060c0:	d002      	beq.n	80060c8 <PRL_TxCompleted+0x18>
 80060c2:	2a02      	cmp	r2, #2
 80060c4:	d009      	beq.n	80060da <PRL_TxCompleted+0x2a>
 80060c6:	e010      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d102      	bne.n	80060d2 <PRL_TxCompleted+0x22>
 80060cc:	f7fa fe1a 	bl	8000d04 <PE_PRL_PostReceiveEventComplete>
 80060d0:	e001      	b.n	80060d6 <PRL_TxCompleted+0x26>
 80060d2:	f7fa fde5 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 80060d6:	72b5      	strb	r5, [r6, #10]
 80060d8:	e007      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060da:	f008 fa17 	bl	800e50c <USBPD_PHY_GetRetryTimerValue>
 80060de:	0001      	movs	r1, r0
 80060e0:	0060      	lsls	r0, r4, #1
 80060e2:	1c40      	adds	r0, r0, #1
 80060e4:	b2c0      	uxtb	r0, r0
 80060e6:	f009 fe51 	bl	800fd8c <USBPD_TIM_Start>
 80060ea:	7435      	strb	r5, [r6, #16]
 80060ec:	bd70      	pop	{r4, r5, r6, pc}

080060ee <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4c2d      	ldr	r4, [pc, #180]	; (80061a8 <.text_52>)
 80060f2:	0080      	lsls	r0, r0, #2
 80060f4:	5820      	ldr	r0, [r4, r0]
 80060f6:	2480      	movs	r4, #128	; 0x80
 80060f8:	0224      	lsls	r4, r4, #8
 80060fa:	8b85      	ldrh	r5, [r0, #28]
 80060fc:	4e2b      	ldr	r6, [pc, #172]	; (80061ac <.text_53>)
 80060fe:	402e      	ands	r6, r5
 8006100:	02c9      	lsls	r1, r1, #11
 8006102:	4331      	orrs	r1, r6
 8006104:	25fe      	movs	r5, #254	; 0xfe
 8006106:	022d      	lsls	r5, r5, #8
 8006108:	400d      	ands	r5, r1
 800610a:	05d1      	lsls	r1, r2, #23
 800610c:	0dc9      	lsrs	r1, r1, #23
 800610e:	4329      	orrs	r1, r5
 8006110:	4321      	orrs	r1, r4
 8006112:	8381      	strh	r1, [r0, #28]
 8006114:	8a41      	ldrh	r1, [r0, #18]
 8006116:	430c      	orrs	r4, r1
 8006118:	8244      	strh	r4, [r0, #18]
 800611a:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <.text_54>)
 800611c:	4022      	ands	r2, r4
 800611e:	2120      	movs	r1, #32
 8006120:	5c41      	ldrb	r1, [r0, r1]
 8006122:	06c9      	lsls	r1, r1, #27
 8006124:	0ec9      	lsrs	r1, r1, #27
 8006126:	4311      	orrs	r1, r2
 8006128:	8241      	strh	r1, [r0, #18]
 800612a:	7019      	strb	r1, [r3, #0]
 800612c:	8a41      	ldrh	r1, [r0, #18]
 800612e:	0a09      	lsrs	r1, r1, #8
 8006130:	7059      	strb	r1, [r3, #1]
 8006132:	8b81      	ldrh	r1, [r0, #28]
 8006134:	7099      	strb	r1, [r3, #2]
 8006136:	8b80      	ldrh	r0, [r0, #28]
 8006138:	0a00      	lsrs	r0, r0, #8
 800613a:	70d8      	strb	r0, [r3, #3]
 800613c:	bd70      	pop	{r4, r5, r6, pc}

0800613e <USBPD_PRL_PrepareChunkRequest>:
 800613e:	b510      	push	{r4, lr}
 8006140:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <.text_52>)
 8006142:	0080      	lsls	r0, r0, #2
 8006144:	5810      	ldr	r0, [r2, r0]
 8006146:	8b83      	ldrh	r3, [r0, #28]
 8006148:	2284      	movs	r2, #132	; 0x84
 800614a:	0212      	lsls	r2, r2, #8
 800614c:	431a      	orrs	r2, r3
 800614e:	8382      	strh	r2, [r0, #28]
 8006150:	2386      	movs	r3, #134	; 0x86
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	4013      	ands	r3, r2
 8006156:	8bc2      	ldrh	r2, [r0, #30]
 8006158:	0ad2      	lsrs	r2, r2, #11
 800615a:	1c52      	adds	r2, r2, #1
 800615c:	02d2      	lsls	r2, r2, #11
 800615e:	24f0      	movs	r4, #240	; 0xf0
 8006160:	01e4      	lsls	r4, r4, #7
 8006162:	4014      	ands	r4, r2
 8006164:	431c      	orrs	r4, r3
 8006166:	8384      	strh	r4, [r0, #28]
 8006168:	8a43      	ldrh	r3, [r0, #18]
 800616a:	2280      	movs	r2, #128	; 0x80
 800616c:	0212      	lsls	r2, r2, #8
 800616e:	431a      	orrs	r2, r3
 8006170:	0003      	movs	r3, r0
 8006172:	3312      	adds	r3, #18
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	4c0e      	ldr	r4, [pc, #56]	; (80061b0 <.text_54>)
 8006178:	4014      	ands	r4, r2
 800617a:	2220      	movs	r2, #32
 800617c:	5c82      	ldrb	r2, [r0, r2]
 800617e:	06d2      	lsls	r2, r2, #27
 8006180:	0ed2      	lsrs	r2, r2, #27
 8006182:	4322      	orrs	r2, r4
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	7142      	strb	r2, [r0, #5]
 800618a:	8a43      	ldrh	r3, [r0, #18]
 800618c:	700b      	strb	r3, [r1, #0]
 800618e:	8a43      	ldrh	r3, [r0, #18]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	704b      	strb	r3, [r1, #1]
 8006194:	8b83      	ldrh	r3, [r0, #28]
 8006196:	708b      	strb	r3, [r1, #2]
 8006198:	8b80      	ldrh	r0, [r0, #28]
 800619a:	0a00      	lsrs	r0, r0, #8
 800619c:	70c8      	strb	r0, [r1, #3]
 800619e:	710a      	strb	r2, [r1, #4]
 80061a0:	714a      	strb	r2, [r1, #5]
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <.text_51>:
 80061a4:	20000000 	.word	0x20000000

080061a8 <.text_52>:
 80061a8:	200001f0 	.word	0x200001f0

080061ac <.text_53>:
 80061ac:	000083ff 	.word	0x000083ff

080061b0 <.text_54>:
 80061b0:	0000ffe0 	.word	0x0000ffe0

080061b4 <.text_55>:
 80061b4:	5f4c5250 	.word	0x5f4c5250
 80061b8:	4e455645 	.word	0x4e455645
 80061bc:	58525f54 	.word	0x58525f54
 80061c0:	5349445f 	.word	0x5349445f
 80061c4:	44524143 	.word	0x44524143
 80061c8:	00004445 	.word	0x00004445

080061cc <strlen>:
 80061cc:	2300      	movs	r3, #0
 80061ce:	5cc2      	ldrb	r2, [r0, r3]
 80061d0:	3301      	adds	r3, #1
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1fb      	bne.n	80061ce <strlen+0x2>
 80061d6:	1e58      	subs	r0, r3, #1
 80061d8:	4770      	bx	lr
	...

080061dc <__gnu_thumb1_case_shi>:
 80061dc:	b403      	push	{r0, r1}
 80061de:	4671      	mov	r1, lr
 80061e0:	0849      	lsrs	r1, r1, #1
 80061e2:	0040      	lsls	r0, r0, #1
 80061e4:	0049      	lsls	r1, r1, #1
 80061e6:	5e09      	ldrsh	r1, [r1, r0]
 80061e8:	0049      	lsls	r1, r1, #1
 80061ea:	448e      	add	lr, r1
 80061ec:	bc03      	pop	{r0, r1}
 80061ee:	4770      	bx	lr

080061f0 <__udivsi3>:
 80061f0:	2200      	movs	r2, #0
 80061f2:	0843      	lsrs	r3, r0, #1
 80061f4:	428b      	cmp	r3, r1
 80061f6:	d374      	bcc.n	80062e2 <__udivsi3+0xf2>
 80061f8:	0903      	lsrs	r3, r0, #4
 80061fa:	428b      	cmp	r3, r1
 80061fc:	d35f      	bcc.n	80062be <__udivsi3+0xce>
 80061fe:	0a03      	lsrs	r3, r0, #8
 8006200:	428b      	cmp	r3, r1
 8006202:	d344      	bcc.n	800628e <__udivsi3+0x9e>
 8006204:	0b03      	lsrs	r3, r0, #12
 8006206:	428b      	cmp	r3, r1
 8006208:	d328      	bcc.n	800625c <__udivsi3+0x6c>
 800620a:	0c03      	lsrs	r3, r0, #16
 800620c:	428b      	cmp	r3, r1
 800620e:	d30d      	bcc.n	800622c <__udivsi3+0x3c>
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	0209      	lsls	r1, r1, #8
 8006214:	ba12      	rev	r2, r2
 8006216:	0c03      	lsrs	r3, r0, #16
 8006218:	428b      	cmp	r3, r1
 800621a:	d302      	bcc.n	8006222 <__udivsi3+0x32>
 800621c:	1212      	asrs	r2, r2, #8
 800621e:	0209      	lsls	r1, r1, #8
 8006220:	d065      	beq.n	80062ee <__udivsi3+0xfe>
 8006222:	0b03      	lsrs	r3, r0, #12
 8006224:	428b      	cmp	r3, r1
 8006226:	d319      	bcc.n	800625c <__udivsi3+0x6c>
 8006228:	e000      	b.n	800622c <__udivsi3+0x3c>
 800622a:	0a09      	lsrs	r1, r1, #8
 800622c:	0bc3      	lsrs	r3, r0, #15
 800622e:	428b      	cmp	r3, r1
 8006230:	d301      	bcc.n	8006236 <__udivsi3+0x46>
 8006232:	03cb      	lsls	r3, r1, #15
 8006234:	1ac0      	subs	r0, r0, r3
 8006236:	4152      	adcs	r2, r2
 8006238:	0b83      	lsrs	r3, r0, #14
 800623a:	428b      	cmp	r3, r1
 800623c:	d301      	bcc.n	8006242 <__udivsi3+0x52>
 800623e:	038b      	lsls	r3, r1, #14
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	4152      	adcs	r2, r2
 8006244:	0b43      	lsrs	r3, r0, #13
 8006246:	428b      	cmp	r3, r1
 8006248:	d301      	bcc.n	800624e <__udivsi3+0x5e>
 800624a:	034b      	lsls	r3, r1, #13
 800624c:	1ac0      	subs	r0, r0, r3
 800624e:	4152      	adcs	r2, r2
 8006250:	0b03      	lsrs	r3, r0, #12
 8006252:	428b      	cmp	r3, r1
 8006254:	d301      	bcc.n	800625a <__udivsi3+0x6a>
 8006256:	030b      	lsls	r3, r1, #12
 8006258:	1ac0      	subs	r0, r0, r3
 800625a:	4152      	adcs	r2, r2
 800625c:	0ac3      	lsrs	r3, r0, #11
 800625e:	428b      	cmp	r3, r1
 8006260:	d301      	bcc.n	8006266 <__udivsi3+0x76>
 8006262:	02cb      	lsls	r3, r1, #11
 8006264:	1ac0      	subs	r0, r0, r3
 8006266:	4152      	adcs	r2, r2
 8006268:	0a83      	lsrs	r3, r0, #10
 800626a:	428b      	cmp	r3, r1
 800626c:	d301      	bcc.n	8006272 <__udivsi3+0x82>
 800626e:	028b      	lsls	r3, r1, #10
 8006270:	1ac0      	subs	r0, r0, r3
 8006272:	4152      	adcs	r2, r2
 8006274:	0a43      	lsrs	r3, r0, #9
 8006276:	428b      	cmp	r3, r1
 8006278:	d301      	bcc.n	800627e <__udivsi3+0x8e>
 800627a:	024b      	lsls	r3, r1, #9
 800627c:	1ac0      	subs	r0, r0, r3
 800627e:	4152      	adcs	r2, r2
 8006280:	0a03      	lsrs	r3, r0, #8
 8006282:	428b      	cmp	r3, r1
 8006284:	d301      	bcc.n	800628a <__udivsi3+0x9a>
 8006286:	020b      	lsls	r3, r1, #8
 8006288:	1ac0      	subs	r0, r0, r3
 800628a:	4152      	adcs	r2, r2
 800628c:	d2cd      	bcs.n	800622a <__udivsi3+0x3a>
 800628e:	09c3      	lsrs	r3, r0, #7
 8006290:	428b      	cmp	r3, r1
 8006292:	d301      	bcc.n	8006298 <__udivsi3+0xa8>
 8006294:	01cb      	lsls	r3, r1, #7
 8006296:	1ac0      	subs	r0, r0, r3
 8006298:	4152      	adcs	r2, r2
 800629a:	0983      	lsrs	r3, r0, #6
 800629c:	428b      	cmp	r3, r1
 800629e:	d301      	bcc.n	80062a4 <__udivsi3+0xb4>
 80062a0:	018b      	lsls	r3, r1, #6
 80062a2:	1ac0      	subs	r0, r0, r3
 80062a4:	4152      	adcs	r2, r2
 80062a6:	0943      	lsrs	r3, r0, #5
 80062a8:	428b      	cmp	r3, r1
 80062aa:	d301      	bcc.n	80062b0 <__udivsi3+0xc0>
 80062ac:	014b      	lsls	r3, r1, #5
 80062ae:	1ac0      	subs	r0, r0, r3
 80062b0:	4152      	adcs	r2, r2
 80062b2:	0903      	lsrs	r3, r0, #4
 80062b4:	428b      	cmp	r3, r1
 80062b6:	d301      	bcc.n	80062bc <__udivsi3+0xcc>
 80062b8:	010b      	lsls	r3, r1, #4
 80062ba:	1ac0      	subs	r0, r0, r3
 80062bc:	4152      	adcs	r2, r2
 80062be:	08c3      	lsrs	r3, r0, #3
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d301      	bcc.n	80062c8 <__udivsi3+0xd8>
 80062c4:	00cb      	lsls	r3, r1, #3
 80062c6:	1ac0      	subs	r0, r0, r3
 80062c8:	4152      	adcs	r2, r2
 80062ca:	0883      	lsrs	r3, r0, #2
 80062cc:	428b      	cmp	r3, r1
 80062ce:	d301      	bcc.n	80062d4 <__udivsi3+0xe4>
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	4152      	adcs	r2, r2
 80062d6:	0843      	lsrs	r3, r0, #1
 80062d8:	428b      	cmp	r3, r1
 80062da:	d301      	bcc.n	80062e0 <__udivsi3+0xf0>
 80062dc:	004b      	lsls	r3, r1, #1
 80062de:	1ac0      	subs	r0, r0, r3
 80062e0:	4152      	adcs	r2, r2
 80062e2:	1a41      	subs	r1, r0, r1
 80062e4:	d200      	bcs.n	80062e8 <__udivsi3+0xf8>
 80062e6:	4601      	mov	r1, r0
 80062e8:	4152      	adcs	r2, r2
 80062ea:	4610      	mov	r0, r2
 80062ec:	4770      	bx	lr
 80062ee:	e7ff      	b.n	80062f0 <__udivsi3+0x100>
 80062f0:	b501      	push	{r0, lr}
 80062f2:	2000      	movs	r0, #0
 80062f4:	f000 f8f0 	bl	80064d8 <__aeabi_idiv0>
 80062f8:	bd02      	pop	{r1, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)

080062fc <__aeabi_uidivmod>:
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d0f7      	beq.n	80062f0 <__udivsi3+0x100>
 8006300:	e776      	b.n	80061f0 <__udivsi3>
 8006302:	4770      	bx	lr

08006304 <__divsi3>:
 8006304:	4603      	mov	r3, r0
 8006306:	430b      	orrs	r3, r1
 8006308:	d47f      	bmi.n	800640a <__divsi3+0x106>
 800630a:	2200      	movs	r2, #0
 800630c:	0843      	lsrs	r3, r0, #1
 800630e:	428b      	cmp	r3, r1
 8006310:	d374      	bcc.n	80063fc <__divsi3+0xf8>
 8006312:	0903      	lsrs	r3, r0, #4
 8006314:	428b      	cmp	r3, r1
 8006316:	d35f      	bcc.n	80063d8 <__divsi3+0xd4>
 8006318:	0a03      	lsrs	r3, r0, #8
 800631a:	428b      	cmp	r3, r1
 800631c:	d344      	bcc.n	80063a8 <__divsi3+0xa4>
 800631e:	0b03      	lsrs	r3, r0, #12
 8006320:	428b      	cmp	r3, r1
 8006322:	d328      	bcc.n	8006376 <__divsi3+0x72>
 8006324:	0c03      	lsrs	r3, r0, #16
 8006326:	428b      	cmp	r3, r1
 8006328:	d30d      	bcc.n	8006346 <__divsi3+0x42>
 800632a:	22ff      	movs	r2, #255	; 0xff
 800632c:	0209      	lsls	r1, r1, #8
 800632e:	ba12      	rev	r2, r2
 8006330:	0c03      	lsrs	r3, r0, #16
 8006332:	428b      	cmp	r3, r1
 8006334:	d302      	bcc.n	800633c <__divsi3+0x38>
 8006336:	1212      	asrs	r2, r2, #8
 8006338:	0209      	lsls	r1, r1, #8
 800633a:	d065      	beq.n	8006408 <__divsi3+0x104>
 800633c:	0b03      	lsrs	r3, r0, #12
 800633e:	428b      	cmp	r3, r1
 8006340:	d319      	bcc.n	8006376 <__divsi3+0x72>
 8006342:	e000      	b.n	8006346 <__divsi3+0x42>
 8006344:	0a09      	lsrs	r1, r1, #8
 8006346:	0bc3      	lsrs	r3, r0, #15
 8006348:	428b      	cmp	r3, r1
 800634a:	d301      	bcc.n	8006350 <__divsi3+0x4c>
 800634c:	03cb      	lsls	r3, r1, #15
 800634e:	1ac0      	subs	r0, r0, r3
 8006350:	4152      	adcs	r2, r2
 8006352:	0b83      	lsrs	r3, r0, #14
 8006354:	428b      	cmp	r3, r1
 8006356:	d301      	bcc.n	800635c <__divsi3+0x58>
 8006358:	038b      	lsls	r3, r1, #14
 800635a:	1ac0      	subs	r0, r0, r3
 800635c:	4152      	adcs	r2, r2
 800635e:	0b43      	lsrs	r3, r0, #13
 8006360:	428b      	cmp	r3, r1
 8006362:	d301      	bcc.n	8006368 <__divsi3+0x64>
 8006364:	034b      	lsls	r3, r1, #13
 8006366:	1ac0      	subs	r0, r0, r3
 8006368:	4152      	adcs	r2, r2
 800636a:	0b03      	lsrs	r3, r0, #12
 800636c:	428b      	cmp	r3, r1
 800636e:	d301      	bcc.n	8006374 <__divsi3+0x70>
 8006370:	030b      	lsls	r3, r1, #12
 8006372:	1ac0      	subs	r0, r0, r3
 8006374:	4152      	adcs	r2, r2
 8006376:	0ac3      	lsrs	r3, r0, #11
 8006378:	428b      	cmp	r3, r1
 800637a:	d301      	bcc.n	8006380 <__divsi3+0x7c>
 800637c:	02cb      	lsls	r3, r1, #11
 800637e:	1ac0      	subs	r0, r0, r3
 8006380:	4152      	adcs	r2, r2
 8006382:	0a83      	lsrs	r3, r0, #10
 8006384:	428b      	cmp	r3, r1
 8006386:	d301      	bcc.n	800638c <__divsi3+0x88>
 8006388:	028b      	lsls	r3, r1, #10
 800638a:	1ac0      	subs	r0, r0, r3
 800638c:	4152      	adcs	r2, r2
 800638e:	0a43      	lsrs	r3, r0, #9
 8006390:	428b      	cmp	r3, r1
 8006392:	d301      	bcc.n	8006398 <__divsi3+0x94>
 8006394:	024b      	lsls	r3, r1, #9
 8006396:	1ac0      	subs	r0, r0, r3
 8006398:	4152      	adcs	r2, r2
 800639a:	0a03      	lsrs	r3, r0, #8
 800639c:	428b      	cmp	r3, r1
 800639e:	d301      	bcc.n	80063a4 <__divsi3+0xa0>
 80063a0:	020b      	lsls	r3, r1, #8
 80063a2:	1ac0      	subs	r0, r0, r3
 80063a4:	4152      	adcs	r2, r2
 80063a6:	d2cd      	bcs.n	8006344 <__divsi3+0x40>
 80063a8:	09c3      	lsrs	r3, r0, #7
 80063aa:	428b      	cmp	r3, r1
 80063ac:	d301      	bcc.n	80063b2 <__divsi3+0xae>
 80063ae:	01cb      	lsls	r3, r1, #7
 80063b0:	1ac0      	subs	r0, r0, r3
 80063b2:	4152      	adcs	r2, r2
 80063b4:	0983      	lsrs	r3, r0, #6
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d301      	bcc.n	80063be <__divsi3+0xba>
 80063ba:	018b      	lsls	r3, r1, #6
 80063bc:	1ac0      	subs	r0, r0, r3
 80063be:	4152      	adcs	r2, r2
 80063c0:	0943      	lsrs	r3, r0, #5
 80063c2:	428b      	cmp	r3, r1
 80063c4:	d301      	bcc.n	80063ca <__divsi3+0xc6>
 80063c6:	014b      	lsls	r3, r1, #5
 80063c8:	1ac0      	subs	r0, r0, r3
 80063ca:	4152      	adcs	r2, r2
 80063cc:	0903      	lsrs	r3, r0, #4
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d301      	bcc.n	80063d6 <__divsi3+0xd2>
 80063d2:	010b      	lsls	r3, r1, #4
 80063d4:	1ac0      	subs	r0, r0, r3
 80063d6:	4152      	adcs	r2, r2
 80063d8:	08c3      	lsrs	r3, r0, #3
 80063da:	428b      	cmp	r3, r1
 80063dc:	d301      	bcc.n	80063e2 <__divsi3+0xde>
 80063de:	00cb      	lsls	r3, r1, #3
 80063e0:	1ac0      	subs	r0, r0, r3
 80063e2:	4152      	adcs	r2, r2
 80063e4:	0883      	lsrs	r3, r0, #2
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d301      	bcc.n	80063ee <__divsi3+0xea>
 80063ea:	008b      	lsls	r3, r1, #2
 80063ec:	1ac0      	subs	r0, r0, r3
 80063ee:	4152      	adcs	r2, r2
 80063f0:	0843      	lsrs	r3, r0, #1
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d301      	bcc.n	80063fa <__divsi3+0xf6>
 80063f6:	004b      	lsls	r3, r1, #1
 80063f8:	1ac0      	subs	r0, r0, r3
 80063fa:	4152      	adcs	r2, r2
 80063fc:	1a41      	subs	r1, r0, r1
 80063fe:	d200      	bcs.n	8006402 <__divsi3+0xfe>
 8006400:	4601      	mov	r1, r0
 8006402:	4152      	adcs	r2, r2
 8006404:	4610      	mov	r0, r2
 8006406:	4770      	bx	lr
 8006408:	e05d      	b.n	80064c6 <__divsi3+0x1c2>
 800640a:	0fca      	lsrs	r2, r1, #31
 800640c:	d000      	beq.n	8006410 <__divsi3+0x10c>
 800640e:	4249      	negs	r1, r1
 8006410:	1003      	asrs	r3, r0, #32
 8006412:	d300      	bcc.n	8006416 <__divsi3+0x112>
 8006414:	4240      	negs	r0, r0
 8006416:	4053      	eors	r3, r2
 8006418:	2200      	movs	r2, #0
 800641a:	469c      	mov	ip, r3
 800641c:	0903      	lsrs	r3, r0, #4
 800641e:	428b      	cmp	r3, r1
 8006420:	d32d      	bcc.n	800647e <__divsi3+0x17a>
 8006422:	0a03      	lsrs	r3, r0, #8
 8006424:	428b      	cmp	r3, r1
 8006426:	d312      	bcc.n	800644e <__divsi3+0x14a>
 8006428:	22fc      	movs	r2, #252	; 0xfc
 800642a:	0189      	lsls	r1, r1, #6
 800642c:	ba12      	rev	r2, r2
 800642e:	0a03      	lsrs	r3, r0, #8
 8006430:	428b      	cmp	r3, r1
 8006432:	d30c      	bcc.n	800644e <__divsi3+0x14a>
 8006434:	0189      	lsls	r1, r1, #6
 8006436:	1192      	asrs	r2, r2, #6
 8006438:	428b      	cmp	r3, r1
 800643a:	d308      	bcc.n	800644e <__divsi3+0x14a>
 800643c:	0189      	lsls	r1, r1, #6
 800643e:	1192      	asrs	r2, r2, #6
 8006440:	428b      	cmp	r3, r1
 8006442:	d304      	bcc.n	800644e <__divsi3+0x14a>
 8006444:	0189      	lsls	r1, r1, #6
 8006446:	d03a      	beq.n	80064be <__divsi3+0x1ba>
 8006448:	1192      	asrs	r2, r2, #6
 800644a:	e000      	b.n	800644e <__divsi3+0x14a>
 800644c:	0989      	lsrs	r1, r1, #6
 800644e:	09c3      	lsrs	r3, r0, #7
 8006450:	428b      	cmp	r3, r1
 8006452:	d301      	bcc.n	8006458 <__divsi3+0x154>
 8006454:	01cb      	lsls	r3, r1, #7
 8006456:	1ac0      	subs	r0, r0, r3
 8006458:	4152      	adcs	r2, r2
 800645a:	0983      	lsrs	r3, r0, #6
 800645c:	428b      	cmp	r3, r1
 800645e:	d301      	bcc.n	8006464 <__divsi3+0x160>
 8006460:	018b      	lsls	r3, r1, #6
 8006462:	1ac0      	subs	r0, r0, r3
 8006464:	4152      	adcs	r2, r2
 8006466:	0943      	lsrs	r3, r0, #5
 8006468:	428b      	cmp	r3, r1
 800646a:	d301      	bcc.n	8006470 <__divsi3+0x16c>
 800646c:	014b      	lsls	r3, r1, #5
 800646e:	1ac0      	subs	r0, r0, r3
 8006470:	4152      	adcs	r2, r2
 8006472:	0903      	lsrs	r3, r0, #4
 8006474:	428b      	cmp	r3, r1
 8006476:	d301      	bcc.n	800647c <__divsi3+0x178>
 8006478:	010b      	lsls	r3, r1, #4
 800647a:	1ac0      	subs	r0, r0, r3
 800647c:	4152      	adcs	r2, r2
 800647e:	08c3      	lsrs	r3, r0, #3
 8006480:	428b      	cmp	r3, r1
 8006482:	d301      	bcc.n	8006488 <__divsi3+0x184>
 8006484:	00cb      	lsls	r3, r1, #3
 8006486:	1ac0      	subs	r0, r0, r3
 8006488:	4152      	adcs	r2, r2
 800648a:	0883      	lsrs	r3, r0, #2
 800648c:	428b      	cmp	r3, r1
 800648e:	d301      	bcc.n	8006494 <__divsi3+0x190>
 8006490:	008b      	lsls	r3, r1, #2
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	4152      	adcs	r2, r2
 8006496:	d2d9      	bcs.n	800644c <__divsi3+0x148>
 8006498:	0843      	lsrs	r3, r0, #1
 800649a:	428b      	cmp	r3, r1
 800649c:	d301      	bcc.n	80064a2 <__divsi3+0x19e>
 800649e:	004b      	lsls	r3, r1, #1
 80064a0:	1ac0      	subs	r0, r0, r3
 80064a2:	4152      	adcs	r2, r2
 80064a4:	1a41      	subs	r1, r0, r1
 80064a6:	d200      	bcs.n	80064aa <__divsi3+0x1a6>
 80064a8:	4601      	mov	r1, r0
 80064aa:	4663      	mov	r3, ip
 80064ac:	4152      	adcs	r2, r2
 80064ae:	105b      	asrs	r3, r3, #1
 80064b0:	4610      	mov	r0, r2
 80064b2:	d301      	bcc.n	80064b8 <__divsi3+0x1b4>
 80064b4:	4240      	negs	r0, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d500      	bpl.n	80064bc <__divsi3+0x1b8>
 80064ba:	4249      	negs	r1, r1
 80064bc:	4770      	bx	lr
 80064be:	4663      	mov	r3, ip
 80064c0:	105b      	asrs	r3, r3, #1
 80064c2:	d300      	bcc.n	80064c6 <__divsi3+0x1c2>
 80064c4:	4240      	negs	r0, r0
 80064c6:	b501      	push	{r0, lr}
 80064c8:	2000      	movs	r0, #0
 80064ca:	f000 f805 	bl	80064d8 <__aeabi_idiv0>
 80064ce:	bd02      	pop	{r1, pc}

080064d0 <__aeabi_idivmod>:
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d0f8      	beq.n	80064c6 <__divsi3+0x1c2>
 80064d4:	e716      	b.n	8006304 <__divsi3>
 80064d6:	4770      	bx	lr

080064d8 <__aeabi_idiv0>:
 80064d8:	4770      	bx	lr
 80064da:	46c0      	nop			; (mov r8, r8)

080064dc <__aeabi_uldivmod>:
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d111      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d10f      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d100      	bne.n	80064ea <__aeabi_uldivmod+0xe>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d002      	beq.n	80064f2 <__aeabi_uldivmod+0x16>
 80064ec:	2100      	movs	r1, #0
 80064ee:	43c9      	mvns	r1, r1
 80064f0:	0008      	movs	r0, r1
 80064f2:	b407      	push	{r0, r1, r2}
 80064f4:	4802      	ldr	r0, [pc, #8]	; (8006500 <__aeabi_uldivmod+0x24>)
 80064f6:	a102      	add	r1, pc, #8	; (adr r1, 8006500 <__aeabi_uldivmod+0x24>)
 80064f8:	1840      	adds	r0, r0, r1
 80064fa:	9002      	str	r0, [sp, #8]
 80064fc:	bd03      	pop	{r0, r1, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	ffffffd9 	.word	0xffffffd9
 8006504:	b403      	push	{r0, r1}
 8006506:	4668      	mov	r0, sp
 8006508:	b501      	push	{r0, lr}
 800650a:	9802      	ldr	r0, [sp, #8]
 800650c:	f000 f806 	bl	800651c <__udivmoddi4>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	469e      	mov	lr, r3
 8006514:	b002      	add	sp, #8
 8006516:	bc0c      	pop	{r2, r3}
 8006518:	4770      	bx	lr
 800651a:	46c0      	nop			; (mov r8, r8)

0800651c <__udivmoddi4>:
 800651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651e:	4657      	mov	r7, sl
 8006520:	464e      	mov	r6, r9
 8006522:	4645      	mov	r5, r8
 8006524:	46de      	mov	lr, fp
 8006526:	b5e0      	push	{r5, r6, r7, lr}
 8006528:	0004      	movs	r4, r0
 800652a:	000d      	movs	r5, r1
 800652c:	4692      	mov	sl, r2
 800652e:	4699      	mov	r9, r3
 8006530:	b083      	sub	sp, #12
 8006532:	428b      	cmp	r3, r1
 8006534:	d830      	bhi.n	8006598 <__udivmoddi4+0x7c>
 8006536:	d02d      	beq.n	8006594 <__udivmoddi4+0x78>
 8006538:	4649      	mov	r1, r9
 800653a:	4650      	mov	r0, sl
 800653c:	f000 f8d8 	bl	80066f0 <__clzdi2>
 8006540:	0029      	movs	r1, r5
 8006542:	0006      	movs	r6, r0
 8006544:	0020      	movs	r0, r4
 8006546:	f000 f8d3 	bl	80066f0 <__clzdi2>
 800654a:	1a33      	subs	r3, r6, r0
 800654c:	4698      	mov	r8, r3
 800654e:	3b20      	subs	r3, #32
 8006550:	d434      	bmi.n	80065bc <__udivmoddi4+0xa0>
 8006552:	469b      	mov	fp, r3
 8006554:	4653      	mov	r3, sl
 8006556:	465a      	mov	r2, fp
 8006558:	4093      	lsls	r3, r2
 800655a:	4642      	mov	r2, r8
 800655c:	001f      	movs	r7, r3
 800655e:	4653      	mov	r3, sl
 8006560:	4093      	lsls	r3, r2
 8006562:	001e      	movs	r6, r3
 8006564:	42af      	cmp	r7, r5
 8006566:	d83b      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006568:	42af      	cmp	r7, r5
 800656a:	d100      	bne.n	800656e <__udivmoddi4+0x52>
 800656c:	e079      	b.n	8006662 <__udivmoddi4+0x146>
 800656e:	465b      	mov	r3, fp
 8006570:	1ba4      	subs	r4, r4, r6
 8006572:	41bd      	sbcs	r5, r7
 8006574:	2b00      	cmp	r3, #0
 8006576:	da00      	bge.n	800657a <__udivmoddi4+0x5e>
 8006578:	e076      	b.n	8006668 <__udivmoddi4+0x14c>
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	9200      	str	r2, [sp, #0]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	2301      	movs	r3, #1
 8006584:	465a      	mov	r2, fp
 8006586:	4093      	lsls	r3, r2
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	2301      	movs	r3, #1
 800658c:	4642      	mov	r2, r8
 800658e:	4093      	lsls	r3, r2
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	e029      	b.n	80065e8 <__udivmoddi4+0xcc>
 8006594:	4282      	cmp	r2, r0
 8006596:	d9cf      	bls.n	8006538 <__udivmoddi4+0x1c>
 8006598:	2200      	movs	r2, #0
 800659a:	2300      	movs	r3, #0
 800659c:	9200      	str	r2, [sp, #0]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <__udivmoddi4+0x8e>
 80065a6:	601c      	str	r4, [r3, #0]
 80065a8:	605d      	str	r5, [r3, #4]
 80065aa:	9800      	ldr	r0, [sp, #0]
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	b003      	add	sp, #12
 80065b0:	bcf0      	pop	{r4, r5, r6, r7}
 80065b2:	46bb      	mov	fp, r7
 80065b4:	46b2      	mov	sl, r6
 80065b6:	46a9      	mov	r9, r5
 80065b8:	46a0      	mov	r8, r4
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065bc:	4642      	mov	r2, r8
 80065be:	469b      	mov	fp, r3
 80065c0:	2320      	movs	r3, #32
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	4652      	mov	r2, sl
 80065c6:	40da      	lsrs	r2, r3
 80065c8:	4641      	mov	r1, r8
 80065ca:	0013      	movs	r3, r2
 80065cc:	464a      	mov	r2, r9
 80065ce:	408a      	lsls	r2, r1
 80065d0:	0017      	movs	r7, r2
 80065d2:	4642      	mov	r2, r8
 80065d4:	431f      	orrs	r7, r3
 80065d6:	4653      	mov	r3, sl
 80065d8:	4093      	lsls	r3, r2
 80065da:	001e      	movs	r6, r3
 80065dc:	42af      	cmp	r7, r5
 80065de:	d9c3      	bls.n	8006568 <__udivmoddi4+0x4c>
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	9200      	str	r2, [sp, #0]
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	4643      	mov	r3, r8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0d8      	beq.n	80065a0 <__udivmoddi4+0x84>
 80065ee:	07fb      	lsls	r3, r7, #31
 80065f0:	0872      	lsrs	r2, r6, #1
 80065f2:	431a      	orrs	r2, r3
 80065f4:	4646      	mov	r6, r8
 80065f6:	087b      	lsrs	r3, r7, #1
 80065f8:	e00e      	b.n	8006618 <__udivmoddi4+0xfc>
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	d101      	bne.n	8006602 <__udivmoddi4+0xe6>
 80065fe:	42a2      	cmp	r2, r4
 8006600:	d80c      	bhi.n	800661c <__udivmoddi4+0x100>
 8006602:	1aa4      	subs	r4, r4, r2
 8006604:	419d      	sbcs	r5, r3
 8006606:	2001      	movs	r0, #1
 8006608:	1924      	adds	r4, r4, r4
 800660a:	416d      	adcs	r5, r5
 800660c:	2100      	movs	r1, #0
 800660e:	3e01      	subs	r6, #1
 8006610:	1824      	adds	r4, r4, r0
 8006612:	414d      	adcs	r5, r1
 8006614:	2e00      	cmp	r6, #0
 8006616:	d006      	beq.n	8006626 <__udivmoddi4+0x10a>
 8006618:	42ab      	cmp	r3, r5
 800661a:	d9ee      	bls.n	80065fa <__udivmoddi4+0xde>
 800661c:	3e01      	subs	r6, #1
 800661e:	1924      	adds	r4, r4, r4
 8006620:	416d      	adcs	r5, r5
 8006622:	2e00      	cmp	r6, #0
 8006624:	d1f8      	bne.n	8006618 <__udivmoddi4+0xfc>
 8006626:	9800      	ldr	r0, [sp, #0]
 8006628:	9901      	ldr	r1, [sp, #4]
 800662a:	465b      	mov	r3, fp
 800662c:	1900      	adds	r0, r0, r4
 800662e:	4169      	adcs	r1, r5
 8006630:	2b00      	cmp	r3, #0
 8006632:	db24      	blt.n	800667e <__udivmoddi4+0x162>
 8006634:	002b      	movs	r3, r5
 8006636:	465a      	mov	r2, fp
 8006638:	4644      	mov	r4, r8
 800663a:	40d3      	lsrs	r3, r2
 800663c:	002a      	movs	r2, r5
 800663e:	40e2      	lsrs	r2, r4
 8006640:	001c      	movs	r4, r3
 8006642:	465b      	mov	r3, fp
 8006644:	0015      	movs	r5, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	db2a      	blt.n	80066a0 <__udivmoddi4+0x184>
 800664a:	0026      	movs	r6, r4
 800664c:	409e      	lsls	r6, r3
 800664e:	0033      	movs	r3, r6
 8006650:	0026      	movs	r6, r4
 8006652:	4647      	mov	r7, r8
 8006654:	40be      	lsls	r6, r7
 8006656:	0032      	movs	r2, r6
 8006658:	1a80      	subs	r0, r0, r2
 800665a:	4199      	sbcs	r1, r3
 800665c:	9000      	str	r0, [sp, #0]
 800665e:	9101      	str	r1, [sp, #4]
 8006660:	e79e      	b.n	80065a0 <__udivmoddi4+0x84>
 8006662:	42a3      	cmp	r3, r4
 8006664:	d8bc      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006666:	e782      	b.n	800656e <__udivmoddi4+0x52>
 8006668:	4642      	mov	r2, r8
 800666a:	2320      	movs	r3, #32
 800666c:	2100      	movs	r1, #0
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	2200      	movs	r2, #0
 8006672:	9100      	str	r1, [sp, #0]
 8006674:	9201      	str	r2, [sp, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	40da      	lsrs	r2, r3
 800667a:	9201      	str	r2, [sp, #4]
 800667c:	e785      	b.n	800658a <__udivmoddi4+0x6e>
 800667e:	4642      	mov	r2, r8
 8006680:	2320      	movs	r3, #32
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	002a      	movs	r2, r5
 8006686:	4646      	mov	r6, r8
 8006688:	409a      	lsls	r2, r3
 800668a:	0023      	movs	r3, r4
 800668c:	40f3      	lsrs	r3, r6
 800668e:	4644      	mov	r4, r8
 8006690:	4313      	orrs	r3, r2
 8006692:	002a      	movs	r2, r5
 8006694:	40e2      	lsrs	r2, r4
 8006696:	001c      	movs	r4, r3
 8006698:	465b      	mov	r3, fp
 800669a:	0015      	movs	r5, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	dad4      	bge.n	800664a <__udivmoddi4+0x12e>
 80066a0:	4642      	mov	r2, r8
 80066a2:	002f      	movs	r7, r5
 80066a4:	2320      	movs	r3, #32
 80066a6:	0026      	movs	r6, r4
 80066a8:	4097      	lsls	r7, r2
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	40de      	lsrs	r6, r3
 80066ae:	003b      	movs	r3, r7
 80066b0:	4333      	orrs	r3, r6
 80066b2:	e7cd      	b.n	8006650 <__udivmoddi4+0x134>

080066b4 <__clzsi2>:
 80066b4:	211c      	movs	r1, #28
 80066b6:	2301      	movs	r3, #1
 80066b8:	041b      	lsls	r3, r3, #16
 80066ba:	4298      	cmp	r0, r3
 80066bc:	d301      	bcc.n	80066c2 <__clzsi2+0xe>
 80066be:	0c00      	lsrs	r0, r0, #16
 80066c0:	3910      	subs	r1, #16
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	4298      	cmp	r0, r3
 80066c6:	d301      	bcc.n	80066cc <__clzsi2+0x18>
 80066c8:	0a00      	lsrs	r0, r0, #8
 80066ca:	3908      	subs	r1, #8
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	4298      	cmp	r0, r3
 80066d0:	d301      	bcc.n	80066d6 <__clzsi2+0x22>
 80066d2:	0900      	lsrs	r0, r0, #4
 80066d4:	3904      	subs	r1, #4
 80066d6:	a202      	add	r2, pc, #8	; (adr r2, 80066e0 <__clzsi2+0x2c>)
 80066d8:	5c10      	ldrb	r0, [r2, r0]
 80066da:	1840      	adds	r0, r0, r1
 80066dc:	4770      	bx	lr
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	02020304 	.word	0x02020304
 80066e4:	01010101 	.word	0x01010101
	...

080066f0 <__clzdi2>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	2900      	cmp	r1, #0
 80066f4:	d103      	bne.n	80066fe <__clzdi2+0xe>
 80066f6:	f7ff ffdd 	bl	80066b4 <__clzsi2>
 80066fa:	3020      	adds	r0, #32
 80066fc:	e002      	b.n	8006704 <__clzdi2+0x14>
 80066fe:	0008      	movs	r0, r1
 8006700:	f7ff ffd8 	bl	80066b4 <__clzsi2>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	46c0      	nop			; (mov r8, r8)

08006708 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2201      	movs	r2, #1
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}

08006724 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006734:	46c0      	nop			; (mov r8, r8)
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}

0800673c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	4252      	negs	r2, r2
 800674a:	611a      	str	r2, [r3, #16]
}
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b002      	add	sp, #8
 8006752:	bd80      	pop	{r7, pc}

08006754 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60da      	str	r2, [r3, #12]
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <app_init>:
volatile Adjustment_StateTypedef currentState = ADJUSTMENT_VOLTAGE;

/*
 * Initialization function
 */
void app_init(void){
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0

	g = 5;
 8006774:	4b06      	ldr	r3, [pc, #24]	; (8006790 <app_init+0x20>)
 8006776:	2205      	movs	r2, #5
 8006778:	601a      	str	r2, [r3, #0]

	//TIM7 initialization
	LL_TIM_EnableIT_UPDATE(TIM7); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
 800677a:	4b06      	ldr	r3, [pc, #24]	; (8006794 <app_init+0x24>)
 800677c:	0018      	movs	r0, r3
 800677e:	f7ff ffe9 	bl	8006754 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <app_init+0x24>)
 8006784:	0018      	movs	r0, r3
 8006786:	f7ff ffd9 	bl	800673c <LL_TIM_ClearFlag_UPDATE>
	//Print decimal points and initial values
	//max7219_PrintItos(SEGMENT_2, 4, current, 4);
	//max7219_PrintItos(SEGMENT_1, 4, voltage, 3);


}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	20000248 	.word	0x20000248
 8006794:	40001400 	.word	0x40001400

08006798 <app_loop>:

/*
 * Loop function
 */
void app_loop(void){
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af02      	add	r7, sp, #8

	//Blink digit based on specified adjustment
	switch(currentState)
 800679e:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <app_loop+0x4c>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00d      	beq.n	80067c4 <app_loop+0x2c>
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d117      	bne.n	80067dc <app_loop+0x44>
	{
	case(ADJUSTMENT_VOLTAGE):
	{
		//Blink currently selected digit
		max7219_BlinkDigit(SEGMENT_1, &voltage, encoderPress, 500, 3); //pass voltage address to BlinkDigit function
 80067ac:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <app_loop+0x50>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	23fa      	movs	r3, #250	; 0xfa
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	490d      	ldr	r1, [pc, #52]	; (80067ec <app_loop+0x54>)
 80067b8:	2003      	movs	r0, #3
 80067ba:	9000      	str	r0, [sp, #0]
 80067bc:	2001      	movs	r0, #1
 80067be:	f000 feb5 	bl	800752c <max7219_BlinkDigit>
	}
	 break;
 80067c2:	e00b      	b.n	80067dc <app_loop+0x44>
	case(ADJUSTMENT_CURRENT):
	{
		//Blink currently selected digit
		max7219_BlinkDigit(SEGMENT_2, &current, encoderPress, 500, 4); //pass voltage address to BlinkDigit function
 80067c4:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <app_loop+0x50>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	23fa      	movs	r3, #250	; 0xfa
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	4908      	ldr	r1, [pc, #32]	; (80067f0 <app_loop+0x58>)
 80067d0:	2004      	movs	r0, #4
 80067d2:	9000      	str	r0, [sp, #0]
 80067d4:	2002      	movs	r0, #2
 80067d6:	f000 fea9 	bl	800752c <max7219_BlinkDigit>
	}
	break;
 80067da:	46c0      	nop			; (mov r8, r8)
	}
}
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	20000018 	.word	0x20000018
 80067e8:	20000004 	.word	0x20000004
 80067ec:	2000000c 	.word	0x2000000c
 80067f0:	2000020c 	.word	0x2000020c

080067f4 <encoder_turn_isr>:


/**
 * TIM2 encoder turning interrupt service routine
 */
void encoder_turn_isr(void) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
	//Get the TIM2 value from CNT register
	encoderVal = (TIM2 -> CNT) >> 2;
 80067f8:	2380      	movs	r3, #128	; 0x80
 80067fa:	05db      	lsls	r3, r3, #23
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	089b      	lsrs	r3, r3, #2
 8006800:	001a      	movs	r2, r3
 8006802:	4b5d      	ldr	r3, [pc, #372]	; (8006978 <encoder_turn_isr+0x184>)
 8006804:	601a      	str	r2, [r3, #0]

	if (encoderVal != encoderValPrev){
 8006806:	4b5c      	ldr	r3, [pc, #368]	; (8006978 <encoder_turn_isr+0x184>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b5c      	ldr	r3, [pc, #368]	; (800697c <encoder_turn_isr+0x188>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d100      	bne.n	8006814 <encoder_turn_isr+0x20>
 8006812:	e0ad      	b.n	8006970 <encoder_turn_isr+0x17c>

		switch(currentState)
 8006814:	4b5a      	ldr	r3, [pc, #360]	; (8006980 <encoder_turn_isr+0x18c>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d055      	beq.n	80068ca <encoder_turn_isr+0xd6>
 800681e:	2b01      	cmp	r3, #1
 8006820:	d000      	beq.n	8006824 <encoder_turn_isr+0x30>
 8006822:	e0a5      	b.n	8006970 <encoder_turn_isr+0x17c>
		{
		case ADJUSTMENT_VOLTAGE:
		{
			//Get direction of encoder turning
			if (encoderVal > encoderValPrev) {
 8006824:	4b54      	ldr	r3, [pc, #336]	; (8006978 <encoder_turn_isr+0x184>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	4b54      	ldr	r3, [pc, #336]	; (800697c <encoder_turn_isr+0x188>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	dd07      	ble.n	8006840 <encoder_turn_isr+0x4c>
				voltageTemp += val;
 8006830:	4b54      	ldr	r3, [pc, #336]	; (8006984 <encoder_turn_isr+0x190>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	4b54      	ldr	r3, [pc, #336]	; (8006988 <encoder_turn_isr+0x194>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	18d2      	adds	r2, r2, r3
 800683a:	4b52      	ldr	r3, [pc, #328]	; (8006984 <encoder_turn_isr+0x190>)
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e006      	b.n	800684e <encoder_turn_isr+0x5a>
			} else {
				voltageTemp -= val;
 8006840:	4b50      	ldr	r3, [pc, #320]	; (8006984 <encoder_turn_isr+0x190>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	4b50      	ldr	r3, [pc, #320]	; (8006988 <encoder_turn_isr+0x194>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	1ad2      	subs	r2, r2, r3
 800684a:	4b4e      	ldr	r3, [pc, #312]	; (8006984 <encoder_turn_isr+0x190>)
 800684c:	601a      	str	r2, [r3, #0]
			}

			//If required temp value is within limits, assign it to voltage
			if (voltageMin <= voltageTemp && voltageTemp <= voltageMax) {
 800684e:	4b4f      	ldr	r3, [pc, #316]	; (800698c <encoder_turn_isr+0x198>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b4c      	ldr	r3, [pc, #304]	; (8006984 <encoder_turn_isr+0x190>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	dc0a      	bgt.n	8006870 <encoder_turn_isr+0x7c>
 800685a:	4b4a      	ldr	r3, [pc, #296]	; (8006984 <encoder_turn_isr+0x190>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b4c      	ldr	r3, [pc, #304]	; (8006990 <encoder_turn_isr+0x19c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	dc04      	bgt.n	8006870 <encoder_turn_isr+0x7c>
				voltage = voltageTemp;
 8006866:	4b47      	ldr	r3, [pc, #284]	; (8006984 <encoder_turn_isr+0x190>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4b4a      	ldr	r3, [pc, #296]	; (8006994 <encoder_turn_isr+0x1a0>)
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e003      	b.n	8006878 <encoder_turn_isr+0x84>
			} else {
				voltageTemp = voltage;
 8006870:	4b48      	ldr	r3, [pc, #288]	; (8006994 <encoder_turn_isr+0x1a0>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b43      	ldr	r3, [pc, #268]	; (8006984 <encoder_turn_isr+0x190>)
 8006876:	601a      	str	r2, [r3, #0]
			}

			// Get number of int numbers in voltage var
			integer_part = (int)voltage;
 8006878:	4b46      	ldr	r3, [pc, #280]	; (8006994 <encoder_turn_isr+0x1a0>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4b46      	ldr	r3, [pc, #280]	; (8006998 <encoder_turn_isr+0x1a4>)
 800687e:	601a      	str	r2, [r3, #0]
			num_digits = 0;
 8006880:	4b46      	ldr	r3, [pc, #280]	; (800699c <encoder_turn_isr+0x1a8>)
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]

			while (integer_part) {
 8006886:	e00e      	b.n	80068a6 <encoder_turn_isr+0xb2>
				integer_part = integer_part/10;
 8006888:	4b43      	ldr	r3, [pc, #268]	; (8006998 <encoder_turn_isr+0x1a4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	210a      	movs	r1, #10
 800688e:	0018      	movs	r0, r3
 8006890:	f7ff fd38 	bl	8006304 <__divsi3>
 8006894:	0003      	movs	r3, r0
 8006896:	001a      	movs	r2, r3
 8006898:	4b3f      	ldr	r3, [pc, #252]	; (8006998 <encoder_turn_isr+0x1a4>)
 800689a:	601a      	str	r2, [r3, #0]
				num_digits++;
 800689c:	4b3f      	ldr	r3, [pc, #252]	; (800699c <encoder_turn_isr+0x1a8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	4b3e      	ldr	r3, [pc, #248]	; (800699c <encoder_turn_isr+0x1a8>)
 80068a4:	601a      	str	r2, [r3, #0]
			while (integer_part) {
 80068a6:	4b3c      	ldr	r3, [pc, #240]	; (8006998 <encoder_turn_isr+0x1a4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1ec      	bne.n	8006888 <encoder_turn_isr+0x94>
			}

			//Print the voltage to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
			max7219_PrintItos(SEGMENT_1, num_digits, voltage, 3);
 80068ae:	4b3b      	ldr	r3, [pc, #236]	; (800699c <encoder_turn_isr+0x1a8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	b2d9      	uxtb	r1, r3
 80068b4:	4b37      	ldr	r3, [pc, #220]	; (8006994 <encoder_turn_isr+0x1a0>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	2303      	movs	r3, #3
 80068ba:	2001      	movs	r0, #1
 80068bc:	f000 fd68 	bl	8007390 <max7219_PrintItos>

			//Save TIM2 CNT value to ValPrev
			encoderValPrev = encoderVal;
 80068c0:	4b2d      	ldr	r3, [pc, #180]	; (8006978 <encoder_turn_isr+0x184>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4b2d      	ldr	r3, [pc, #180]	; (800697c <encoder_turn_isr+0x188>)
 80068c6:	601a      	str	r2, [r3, #0]
		}
		break;
 80068c8:	e052      	b.n	8006970 <encoder_turn_isr+0x17c>

		case ADJUSTMENT_CURRENT:
		{
			//Get direction of encoder turning
			if (encoderVal > encoderValPrev) {
 80068ca:	4b2b      	ldr	r3, [pc, #172]	; (8006978 <encoder_turn_isr+0x184>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b2b      	ldr	r3, [pc, #172]	; (800697c <encoder_turn_isr+0x188>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	dd07      	ble.n	80068e6 <encoder_turn_isr+0xf2>
				currentTemp += val;
 80068d6:	4b32      	ldr	r3, [pc, #200]	; (80069a0 <encoder_turn_isr+0x1ac>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b2b      	ldr	r3, [pc, #172]	; (8006988 <encoder_turn_isr+0x194>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	18d2      	adds	r2, r2, r3
 80068e0:	4b2f      	ldr	r3, [pc, #188]	; (80069a0 <encoder_turn_isr+0x1ac>)
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	e006      	b.n	80068f4 <encoder_turn_isr+0x100>
			} else {
				currentTemp -= val;
 80068e6:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <encoder_turn_isr+0x1ac>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b27      	ldr	r3, [pc, #156]	; (8006988 <encoder_turn_isr+0x194>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	4b2b      	ldr	r3, [pc, #172]	; (80069a0 <encoder_turn_isr+0x1ac>)
 80068f2:	601a      	str	r2, [r3, #0]
			}

			//If required temp value is within limits, assign it to voltage
			if (currentMin <= currentTemp && currentTemp <= currentMax) {
 80068f4:	4b2b      	ldr	r3, [pc, #172]	; (80069a4 <encoder_turn_isr+0x1b0>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	4b29      	ldr	r3, [pc, #164]	; (80069a0 <encoder_turn_isr+0x1ac>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	dc0a      	bgt.n	8006916 <encoder_turn_isr+0x122>
 8006900:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <encoder_turn_isr+0x1ac>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <encoder_turn_isr+0x1b4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	dc04      	bgt.n	8006916 <encoder_turn_isr+0x122>
				current = currentTemp;
 800690c:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <encoder_turn_isr+0x1ac>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4b26      	ldr	r3, [pc, #152]	; (80069ac <encoder_turn_isr+0x1b8>)
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e003      	b.n	800691e <encoder_turn_isr+0x12a>
			} else {
				currentTemp = current;
 8006916:	4b25      	ldr	r3, [pc, #148]	; (80069ac <encoder_turn_isr+0x1b8>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <encoder_turn_isr+0x1ac>)
 800691c:	601a      	str	r2, [r3, #0]
			}

			// Get number of int numbers in voltage var
			integer_part = (int)current;
 800691e:	4b23      	ldr	r3, [pc, #140]	; (80069ac <encoder_turn_isr+0x1b8>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <encoder_turn_isr+0x1a4>)
 8006924:	601a      	str	r2, [r3, #0]
			num_digits = 0;
 8006926:	4b1d      	ldr	r3, [pc, #116]	; (800699c <encoder_turn_isr+0x1a8>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

			while (integer_part) {
 800692c:	e00e      	b.n	800694c <encoder_turn_isr+0x158>
				integer_part = integer_part/10;
 800692e:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <encoder_turn_isr+0x1a4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	210a      	movs	r1, #10
 8006934:	0018      	movs	r0, r3
 8006936:	f7ff fce5 	bl	8006304 <__divsi3>
 800693a:	0003      	movs	r3, r0
 800693c:	001a      	movs	r2, r3
 800693e:	4b16      	ldr	r3, [pc, #88]	; (8006998 <encoder_turn_isr+0x1a4>)
 8006940:	601a      	str	r2, [r3, #0]
				num_digits++;
 8006942:	4b16      	ldr	r3, [pc, #88]	; (800699c <encoder_turn_isr+0x1a8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	4b14      	ldr	r3, [pc, #80]	; (800699c <encoder_turn_isr+0x1a8>)
 800694a:	601a      	str	r2, [r3, #0]
			while (integer_part) {
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <encoder_turn_isr+0x1a4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1ec      	bne.n	800692e <encoder_turn_isr+0x13a>
			}

			//Print the voltage to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
			max7219_PrintItos(SEGMENT_2, num_digits, current, 4);
 8006954:	4b11      	ldr	r3, [pc, #68]	; (800699c <encoder_turn_isr+0x1a8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	b2d9      	uxtb	r1, r3
 800695a:	4b14      	ldr	r3, [pc, #80]	; (80069ac <encoder_turn_isr+0x1b8>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	2304      	movs	r3, #4
 8006960:	2002      	movs	r0, #2
 8006962:	f000 fd15 	bl	8007390 <max7219_PrintItos>

			//Save TIM2 CNT value to ValPrev
			encoderValPrev = encoderVal;
 8006966:	4b04      	ldr	r3, [pc, #16]	; (8006978 <encoder_turn_isr+0x184>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4b04      	ldr	r3, [pc, #16]	; (800697c <encoder_turn_isr+0x188>)
 800696c:	601a      	str	r2, [r3, #0]

		}
		break;
 800696e:	46c0      	nop			; (mov r8, r8)

		}
	}
}
 8006970:	46c0      	nop			; (mov r8, r8)
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	200001fc 	.word	0x200001fc
 800697c:	20000200 	.word	0x20000200
 8006980:	20000018 	.word	0x20000018
 8006984:	20000204 	.word	0x20000204
 8006988:	20000008 	.word	0x20000008
 800698c:	20000208 	.word	0x20000208
 8006990:	20000010 	.word	0x20000010
 8006994:	2000000c 	.word	0x2000000c
 8006998:	20000218 	.word	0x20000218
 800699c:	2000021c 	.word	0x2000021c
 80069a0:	20000210 	.word	0x20000210
 80069a4:	20000214 	.word	0x20000214
 80069a8:	20000014 	.word	0x20000014
 80069ac:	2000020c 	.word	0x2000020c

080069b0 <button_isr>:


/**
 * Button interrupt service routine
 */
void button_isr(void){
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
	//Mask unwanted button interrupts caused by debouncing on exti line 3 (PC3)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM3);
 80069b4:	4a38      	ldr	r2, [pc, #224]	; (8006a98 <button_isr+0xe8>)
 80069b6:	2380      	movs	r3, #128	; 0x80
 80069b8:	58d3      	ldr	r3, [r2, r3]
 80069ba:	4937      	ldr	r1, [pc, #220]	; (8006a98 <button_isr+0xe8>)
 80069bc:	2208      	movs	r2, #8
 80069be:	4393      	bics	r3, r2
 80069c0:	2280      	movs	r2, #128	; 0x80
 80069c2:	508b      	str	r3, [r1, r2]

	//Set debouncing time in ms
	TIM7->ARR = 200;
 80069c4:	4b35      	ldr	r3, [pc, #212]	; (8006a9c <button_isr+0xec>)
 80069c6:	22c8      	movs	r2, #200	; 0xc8
 80069c8:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 80069ca:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <button_isr+0xec>)
 80069cc:	2100      	movs	r1, #0
 80069ce:	0018      	movs	r0, r3
 80069d0:	f7ff fea8 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 80069d4:	4b31      	ldr	r3, [pc, #196]	; (8006a9c <button_isr+0xec>)
 80069d6:	0018      	movs	r0, r3
 80069d8:	f7ff fe96 	bl	8006708 <LL_TIM_EnableCounter>

	//Decrement encoderPress value if higher than 4
	if (encoderPress > 1){
 80069dc:	4b30      	ldr	r3, [pc, #192]	; (8006aa0 <button_isr+0xf0>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	dd05      	ble.n	80069f0 <button_isr+0x40>
		encoderPress--;
 80069e4:	4b2e      	ldr	r3, [pc, #184]	; (8006aa0 <button_isr+0xf0>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	1e5a      	subs	r2, r3, #1
 80069ea:	4b2d      	ldr	r3, [pc, #180]	; (8006aa0 <button_isr+0xf0>)
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e002      	b.n	80069f6 <button_isr+0x46>
	}
	else {
		encoderPress = 4;
 80069f0:	4b2b      	ldr	r3, [pc, #172]	; (8006aa0 <button_isr+0xf0>)
 80069f2:	2204      	movs	r2, #4
 80069f4:	601a      	str	r2, [r3, #0]
	}

	//Choose addition value based on encoderPress val and current ADJUSTMENT_STATE (voltage/current)
	switch (currentState){
 80069f6:	4b2b      	ldr	r3, [pc, #172]	; (8006aa4 <button_isr+0xf4>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d020      	beq.n	8006a42 <button_isr+0x92>
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d140      	bne.n	8006a86 <button_isr+0xd6>
		case ADJUSTMENT_VOLTAGE:
			switch (encoderPress) {
 8006a04:	4b26      	ldr	r3, [pc, #152]	; (8006aa0 <button_isr+0xf0>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d014      	beq.n	8006a36 <button_isr+0x86>
 8006a0c:	dc38      	bgt.n	8006a80 <button_isr+0xd0>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d00d      	beq.n	8006a2e <button_isr+0x7e>
 8006a12:	dc35      	bgt.n	8006a80 <button_isr+0xd0>
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d002      	beq.n	8006a1e <button_isr+0x6e>
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d004      	beq.n	8006a26 <button_isr+0x76>
				break;
			case 4:
				val = 1000;
				break;
			}
		 break;
 8006a1c:	e030      	b.n	8006a80 <button_isr+0xd0>
				val = 2;
 8006a1e:	4b22      	ldr	r3, [pc, #136]	; (8006aa8 <button_isr+0xf8>)
 8006a20:	2202      	movs	r2, #2
 8006a22:	601a      	str	r2, [r3, #0]
				break;
 8006a24:	e00c      	b.n	8006a40 <button_isr+0x90>
				val = 10;
 8006a26:	4b20      	ldr	r3, [pc, #128]	; (8006aa8 <button_isr+0xf8>)
 8006a28:	220a      	movs	r2, #10
 8006a2a:	601a      	str	r2, [r3, #0]
				break;
 8006a2c:	e008      	b.n	8006a40 <button_isr+0x90>
				val = 100;
 8006a2e:	4b1e      	ldr	r3, [pc, #120]	; (8006aa8 <button_isr+0xf8>)
 8006a30:	2264      	movs	r2, #100	; 0x64
 8006a32:	601a      	str	r2, [r3, #0]
				break;
 8006a34:	e004      	b.n	8006a40 <button_isr+0x90>
				val = 1000;
 8006a36:	4b1c      	ldr	r3, [pc, #112]	; (8006aa8 <button_isr+0xf8>)
 8006a38:	22fa      	movs	r2, #250	; 0xfa
 8006a3a:	0092      	lsls	r2, r2, #2
 8006a3c:	601a      	str	r2, [r3, #0]
				break;
 8006a3e:	46c0      	nop			; (mov r8, r8)
		 break;
 8006a40:	e01e      	b.n	8006a80 <button_isr+0xd0>
		case ADJUSTMENT_CURRENT:
			switch (encoderPress) {
 8006a42:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <button_isr+0xf0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d014      	beq.n	8006a74 <button_isr+0xc4>
 8006a4a:	dc1b      	bgt.n	8006a84 <button_isr+0xd4>
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d00d      	beq.n	8006a6c <button_isr+0xbc>
 8006a50:	dc18      	bgt.n	8006a84 <button_isr+0xd4>
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d002      	beq.n	8006a5c <button_isr+0xac>
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d004      	beq.n	8006a64 <button_isr+0xb4>
				break;
			case 4:
				val = 1000;
				break;
			}
		 break;
 8006a5a:	e013      	b.n	8006a84 <button_isr+0xd4>
				val = 5;
 8006a5c:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <button_isr+0xf8>)
 8006a5e:	2205      	movs	r2, #5
 8006a60:	601a      	str	r2, [r3, #0]
				break;
 8006a62:	e00c      	b.n	8006a7e <button_isr+0xce>
				val = 10;
 8006a64:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <button_isr+0xf8>)
 8006a66:	220a      	movs	r2, #10
 8006a68:	601a      	str	r2, [r3, #0]
				break;
 8006a6a:	e008      	b.n	8006a7e <button_isr+0xce>
				val = 100;
 8006a6c:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <button_isr+0xf8>)
 8006a6e:	2264      	movs	r2, #100	; 0x64
 8006a70:	601a      	str	r2, [r3, #0]
				break;
 8006a72:	e004      	b.n	8006a7e <button_isr+0xce>
				val = 1000;
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <button_isr+0xf8>)
 8006a76:	22fa      	movs	r2, #250	; 0xfa
 8006a78:	0092      	lsls	r2, r2, #2
 8006a7a:	601a      	str	r2, [r3, #0]
				break;
 8006a7c:	46c0      	nop			; (mov r8, r8)
		 break;
 8006a7e:	e001      	b.n	8006a84 <button_isr+0xd4>
		 break;
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	e000      	b.n	8006a86 <button_isr+0xd6>
		 break;
 8006a84:	46c0      	nop			; (mov r8, r8)
	}


	//Erase btn (PC3) interrupt flag
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8006a86:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <button_isr+0xe8>)
 8006a88:	2208      	movs	r2, #8
 8006a8a:	60da      	str	r2, [r3, #12]
 8006a8c:	4b02      	ldr	r3, [pc, #8]	; (8006a98 <button_isr+0xe8>)
 8006a8e:	2208      	movs	r2, #8
 8006a90:	611a      	str	r2, [r3, #16]
}
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40021800 	.word	0x40021800
 8006a9c:	40001400 	.word	0x40001400
 8006aa0:	20000004 	.word	0x20000004
 8006aa4:	20000018 	.word	0x20000018
 8006aa8:	20000008 	.word	0x20000008

08006aac <button_timer_isr>:

/*
 * Timer interrupt routine
 */
void button_timer_isr(void){
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
	//Unmask exti line 1, 2 and 3
	EXTI->IMR1 |= EXTI_IMR1_IM3; //unmask interrupt mask register on exti line 3 (PC3)
 8006ab0:	4a0f      	ldr	r2, [pc, #60]	; (8006af0 <button_timer_isr+0x44>)
 8006ab2:	2380      	movs	r3, #128	; 0x80
 8006ab4:	58d3      	ldr	r3, [r2, r3]
 8006ab6:	490e      	ldr	r1, [pc, #56]	; (8006af0 <button_timer_isr+0x44>)
 8006ab8:	2208      	movs	r2, #8
 8006aba:	4313      	orrs	r3, r2
 8006abc:	2280      	movs	r2, #128	; 0x80
 8006abe:	508b      	str	r3, [r1, r2]
	EXTI->IMR1 |= EXTI_IMR1_IM2; //unmask interrupt mask register on exti line 2 (PC2)
 8006ac0:	4a0b      	ldr	r2, [pc, #44]	; (8006af0 <button_timer_isr+0x44>)
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	58d3      	ldr	r3, [r2, r3]
 8006ac6:	490a      	ldr	r1, [pc, #40]	; (8006af0 <button_timer_isr+0x44>)
 8006ac8:	2204      	movs	r2, #4
 8006aca:	4313      	orrs	r3, r2
 8006acc:	2280      	movs	r2, #128	; 0x80
 8006ace:	508b      	str	r3, [r1, r2]
	EXTI->IMR1 |= EXTI_IMR1_IM1; //unmask interrupt mask register on exti line 1 (PC1)
 8006ad0:	4a07      	ldr	r2, [pc, #28]	; (8006af0 <button_timer_isr+0x44>)
 8006ad2:	2380      	movs	r3, #128	; 0x80
 8006ad4:	58d3      	ldr	r3, [r2, r3]
 8006ad6:	4906      	ldr	r1, [pc, #24]	; (8006af0 <button_timer_isr+0x44>)
 8006ad8:	2202      	movs	r2, #2
 8006ada:	4313      	orrs	r3, r2
 8006adc:	2280      	movs	r2, #128	; 0x80
 8006ade:	508b      	str	r3, [r1, r2]

	//Clear update flag on TIM7
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <button_timer_isr+0x48>)
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f7ff fe2a 	bl	800673c <LL_TIM_ClearFlag_UPDATE>
}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	40021800 	.word	0x40021800
 8006af4:	40001400 	.word	0x40001400

08006af8 <request_button_isr>:

/*
 * Request button interrupt routine, request APDO with user voltage and current
 */
void request_button_isr(void){
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af02      	add	r7, sp, #8
	//Mask unwanted button interrupts caused by debouncing on exti line 2 (PC2)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM2);
 8006afe:	4a20      	ldr	r2, [pc, #128]	; (8006b80 <request_button_isr+0x88>)
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	58d3      	ldr	r3, [r2, r3]
 8006b04:	491e      	ldr	r1, [pc, #120]	; (8006b80 <request_button_isr+0x88>)
 8006b06:	2204      	movs	r2, #4
 8006b08:	4393      	bics	r3, r2
 8006b0a:	2280      	movs	r2, #128	; 0x80
 8006b0c:	508b      	str	r3, [r1, r2]

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <request_button_isr+0x8c>)
 8006b10:	2100      	movs	r1, #0
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7ff fe06 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8006b18:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <request_button_isr+0x8c>)
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7ff fdf4 	bl	8006708 <LL_TIM_EnableCounter>

	g += 1;
 8006b20:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <request_button_isr+0x90>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	4b18      	ldr	r3, [pc, #96]	; (8006b88 <request_button_isr+0x90>)
 8006b28:	601a      	str	r2, [r3, #0]
	  uint32_t MaxOperatingPowerInmWunits;              //< Sink request Max operating power in mW units
	  uint32_t OperatingPowerInmWunits;                 //< Sink request operating power in mW units
	} USBPD_DPM_SNKPowerRequestDetailsTypeDef;
	#endif */

	sourcecapa_limits();
 8006b2a:	f000 f867 	bl	8006bfc <sourcecapa_limits>

	indexSRCAPDO = USER_SERV_FindSRCIndex(0, &powerRequestDetails, voltage*10, current, PDO_SEL_METHOD_MAX_CUR);
 8006b2e:	4b17      	ldr	r3, [pc, #92]	; (8006b8c <request_button_isr+0x94>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	1c1a      	adds	r2, r3, #0
 8006b36:	0092      	lsls	r2, r2, #2
 8006b38:	18d3      	adds	r3, r2, r3
 8006b3a:	18db      	adds	r3, r3, r3
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <request_button_isr+0x98>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	4913      	ldr	r1, [pc, #76]	; (8006b94 <request_button_isr+0x9c>)
 8006b46:	2004      	movs	r0, #4
 8006b48:	9000      	str	r0, [sp, #0]
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	f00e fd68 	bl	8015620 <USER_SERV_FindSRCIndex>
 8006b50:	0003      	movs	r3, r0
 8006b52:	001a      	movs	r2, r3
 8006b54:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <request_button_isr+0xa0>)
 8006b56:	601a      	str	r2, [r3, #0]
	USBPD_DPM_RequestSRCPDO(0, indexSRCAPDO, voltage*10, current);
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <request_button_isr+0xa0>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	b2d9      	uxtb	r1, r3
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <request_button_isr+0x94>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	1c1a      	adds	r2, r3, #0
 8006b66:	0092      	lsls	r2, r2, #2
 8006b68:	18d3      	adds	r3, r2, r3
 8006b6a:	18db      	adds	r3, r3, r3
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <request_button_isr+0x98>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2000      	movs	r0, #0
 8006b76:	f00d fd71 	bl	801465c <USBPD_DPM_RequestSRCPDO>

}
 8006b7a:	46c0      	nop			; (mov r8, r8)
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40021800 	.word	0x40021800
 8006b84:	40001400 	.word	0x40001400
 8006b88:	20000248 	.word	0x20000248
 8006b8c:	2000000c 	.word	0x2000000c
 8006b90:	2000020c 	.word	0x2000020c
 8006b94:	20000234 	.word	0x20000234
 8006b98:	20000224 	.word	0x20000224

08006b9c <cur_vol_button_isr>:

/*
 * Change between current and voltage ADJUSTMENT_STATE
 */
void cur_vol_button_isr(void){
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
	//Mask unwanted button interrupts caused by debouncing on exti line 1 (PC1)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM1);
 8006ba0:	4a12      	ldr	r2, [pc, #72]	; (8006bec <cur_vol_button_isr+0x50>)
 8006ba2:	2380      	movs	r3, #128	; 0x80
 8006ba4:	58d3      	ldr	r3, [r2, r3]
 8006ba6:	4911      	ldr	r1, [pc, #68]	; (8006bec <cur_vol_button_isr+0x50>)
 8006ba8:	2202      	movs	r2, #2
 8006baa:	4393      	bics	r3, r2
 8006bac:	2280      	movs	r2, #128	; 0x80
 8006bae:	508b      	str	r3, [r1, r2]

	//Set debouncing time in ms
	TIM7->ARR = 200;
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <cur_vol_button_isr+0x54>)
 8006bb2:	22c8      	movs	r2, #200	; 0xc8
 8006bb4:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006bb6:	4b0e      	ldr	r3, [pc, #56]	; (8006bf0 <cur_vol_button_isr+0x54>)
 8006bb8:	2100      	movs	r1, #0
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f7ff fdb2 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <cur_vol_button_isr+0x54>)
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7ff fda0 	bl	8006708 <LL_TIM_EnableCounter>

	// Toggle the state
	if (currentState == ADJUSTMENT_CURRENT)
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <cur_vol_button_isr+0x58>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <cur_vol_button_isr+0x3e>
	{
		currentState = ADJUSTMENT_VOLTAGE;
 8006bd2:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <cur_vol_button_isr+0x58>)
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	e002      	b.n	8006be0 <cur_vol_button_isr+0x44>
	}
	else
	{
		currentState = ADJUSTMENT_CURRENT;
 8006bda:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <cur_vol_button_isr+0x58>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	701a      	strb	r2, [r3, #0]
	}
	encoderPress = 3;
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <cur_vol_button_isr+0x5c>)
 8006be2:	2203      	movs	r2, #3
 8006be4:	601a      	str	r2, [r3, #0]
}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40021800 	.word	0x40021800
 8006bf0:	40001400 	.word	0x40001400
 8006bf4:	20000018 	.word	0x20000018
 8006bf8:	20000004 	.word	0x20000004

08006bfc <sourcecapa_limits>:
  * @param  Nav
  * @retval None
  * source: demo_disco.c Display_sourcecapa_menu_nav
  */
static void sourcecapa_limits(void)
{
 8006bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfe:	46ce      	mov	lr, r9
 8006c00:	4647      	mov	r7, r8
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b099      	sub	sp, #100	; 0x64
 8006c06:	af04      	add	r7, sp, #16
  uint8_t _str[30];
  uint8_t _max = DPM_Ports[0].DPM_NumberOfRcvSRCPDO;
 8006c08:	4bc5      	ldr	r3, [pc, #788]	; (8006f20 <sourcecapa_limits+0x324>)
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	234e      	movs	r3, #78	; 0x4e
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	701a      	strb	r2, [r3, #0]
  uint8_t _start, _end = 0;
 8006c12:	214d      	movs	r1, #77	; 0x4d
 8006c14:	187b      	adds	r3, r7, r1
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
	  _start = 0;
	  _end = MIN(_max, MAX_LINE_PDO);
	}
  }
  */
  _start = 0;
 8006c1a:	204c      	movs	r0, #76	; 0x4c
 8006c1c:	183b      	adds	r3, r7, r0
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
  _end = 6;
 8006c22:	187b      	adds	r3, r7, r1
 8006c24:	2206      	movs	r2, #6
 8006c26:	701a      	strb	r2, [r3, #0]

  for(int8_t index=_start; index < _max; index++)
 8006c28:	234f      	movs	r3, #79	; 0x4f
 8006c2a:	18fb      	adds	r3, r7, r3
 8006c2c:	183a      	adds	r2, r7, r0
 8006c2e:	7812      	ldrb	r2, [r2, #0]
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e236      	b.n	80070a2 <sourcecapa_limits+0x4a6>
  {
	switch(DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_TYPE_Msk)
 8006c34:	234f      	movs	r3, #79	; 0x4f
 8006c36:	18fb      	adds	r3, r7, r3
 8006c38:	2200      	movs	r2, #0
 8006c3a:	569a      	ldrsb	r2, [r3, r2]
 8006c3c:	4bb8      	ldr	r3, [pc, #736]	; (8006f20 <sourcecapa_limits+0x324>)
 8006c3e:	0092      	lsls	r2, r2, #2
 8006c40:	58d3      	ldr	r3, [r2, r3]
 8006c42:	0f9b      	lsrs	r3, r3, #30
 8006c44:	079b      	lsls	r3, r3, #30
 8006c46:	22c0      	movs	r2, #192	; 0xc0
 8006c48:	0612      	lsls	r2, r2, #24
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d100      	bne.n	8006c50 <sourcecapa_limits+0x54>
 8006c4e:	e173      	b.n	8006f38 <sourcecapa_limits+0x33c>
 8006c50:	22c0      	movs	r2, #192	; 0xc0
 8006c52:	0612      	lsls	r2, r2, #24
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d900      	bls.n	8006c5a <sourcecapa_limits+0x5e>
 8006c58:	e212      	b.n	8007080 <sourcecapa_limits+0x484>
 8006c5a:	2280      	movs	r2, #128	; 0x80
 8006c5c:	0612      	lsls	r2, r2, #24
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d100      	bne.n	8006c64 <sourcecapa_limits+0x68>
 8006c62:	e0f0      	b.n	8006e46 <sourcecapa_limits+0x24a>
 8006c64:	2280      	movs	r2, #128	; 0x80
 8006c66:	0612      	lsls	r2, r2, #24
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d900      	bls.n	8006c6e <sourcecapa_limits+0x72>
 8006c6c:	e208      	b.n	8007080 <sourcecapa_limits+0x484>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <sourcecapa_limits+0x80>
 8006c72:	2280      	movs	r2, #128	; 0x80
 8006c74:	05d2      	lsls	r2, r2, #23
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d03e      	beq.n	8006cf8 <sourcecapa_limits+0xfc>
 8006c7a:	e201      	b.n	8007080 <sourcecapa_limits+0x484>
	{
	case USBPD_PDO_TYPE_FIXED :
	  {
		uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_FIXED_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_FIXED_MAX_CURRENT_Pos)*10;
 8006c7c:	214f      	movs	r1, #79	; 0x4f
 8006c7e:	187b      	adds	r3, r7, r1
 8006c80:	2200      	movs	r2, #0
 8006c82:	569a      	ldrsb	r2, [r3, r2]
 8006c84:	4ba6      	ldr	r3, [pc, #664]	; (8006f20 <sourcecapa_limits+0x324>)
 8006c86:	0092      	lsls	r2, r2, #2
 8006c88:	58d3      	ldr	r3, [r2, r3]
 8006c8a:	059b      	lsls	r3, r3, #22
 8006c8c:	0d9a      	lsrs	r2, r3, #22
 8006c8e:	0013      	movs	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	189b      	adds	r3, r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_FIXED_VOLTAGE_Msk) >> USBPD_PDO_SRC_FIXED_VOLTAGE_Pos)*50;
 8006c98:	187b      	adds	r3, r7, r1
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	569a      	ldrsb	r2, [r3, r2]
 8006c9e:	4ba0      	ldr	r3, [pc, #640]	; (8006f20 <sourcecapa_limits+0x324>)
 8006ca0:	0092      	lsls	r2, r2, #2
 8006ca2:	58d3      	ldr	r3, [r2, r3]
 8006ca4:	0a9b      	lsrs	r3, r3, #10
 8006ca6:	059b      	lsls	r3, r3, #22
 8006ca8:	0d9b      	lsrs	r3, r3, #22
 8006caa:	2232      	movs	r2, #50	; 0x32
 8006cac:	4353      	muls	r3, r2
 8006cae:	623b      	str	r3, [r7, #32]
		sprintf((char*)_str, "FIXED:%2dV %2d.%dA", (int)(maxvoltage/1000), (int)(maxcurrent/1000), (int)((maxcurrent % 1000) /100));
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	22fa      	movs	r2, #250	; 0xfa
 8006cb4:	0091      	lsls	r1, r2, #2
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f7ff fa9a 	bl	80061f0 <__udivsi3>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	001c      	movs	r4, r3
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	22fa      	movs	r2, #250	; 0xfa
 8006cc4:	0091      	lsls	r1, r2, #2
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f7ff fa92 	bl	80061f0 <__udivsi3>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	001d      	movs	r5, r3
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	22fa      	movs	r2, #250	; 0xfa
 8006cd4:	0091      	lsls	r1, r2, #2
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f7ff fb10 	bl	80062fc <__aeabi_uidivmod>
 8006cdc:	000b      	movs	r3, r1
 8006cde:	2164      	movs	r1, #100	; 0x64
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f7ff fa85 	bl	80061f0 <__udivsi3>
 8006ce6:	0003      	movs	r3, r0
 8006ce8:	498e      	ldr	r1, [pc, #568]	; (8006f24 <sourcecapa_limits+0x328>)
 8006cea:	0038      	movs	r0, r7
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	002b      	movs	r3, r5
 8006cf0:	0022      	movs	r2, r4
 8006cf2:	f013 ff11 	bl	801ab18 <siprintf>
		break;
 8006cf6:	e1cb      	b.n	8007090 <sourcecapa_limits+0x494>
	  }
	case USBPD_PDO_TYPE_BATTERY :
	  {
		uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_BATTERY_MAX_VOLTAGE_Msk) >> USBPD_PDO_SRC_BATTERY_MAX_VOLTAGE_Pos) * 50;
 8006cf8:	214f      	movs	r1, #79	; 0x4f
 8006cfa:	187b      	adds	r3, r7, r1
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	569a      	ldrsb	r2, [r3, r2]
 8006d00:	4b87      	ldr	r3, [pc, #540]	; (8006f20 <sourcecapa_limits+0x324>)
 8006d02:	0092      	lsls	r2, r2, #2
 8006d04:	58d3      	ldr	r3, [r2, r3]
 8006d06:	0d1b      	lsrs	r3, r3, #20
 8006d08:	059b      	lsls	r3, r3, #22
 8006d0a:	0d9b      	lsrs	r3, r3, #22
 8006d0c:	2232      	movs	r2, #50	; 0x32
 8006d0e:	4353      	muls	r3, r2
 8006d10:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t minvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_BATTERY_MIN_VOLTAGE_Msk) >> USBPD_PDO_SRC_BATTERY_MIN_VOLTAGE_Pos) * 50;
 8006d12:	187b      	adds	r3, r7, r1
 8006d14:	2200      	movs	r2, #0
 8006d16:	569a      	ldrsb	r2, [r3, r2]
 8006d18:	4b81      	ldr	r3, [pc, #516]	; (8006f20 <sourcecapa_limits+0x324>)
 8006d1a:	0092      	lsls	r2, r2, #2
 8006d1c:	58d3      	ldr	r3, [r2, r3]
 8006d1e:	0a9b      	lsrs	r3, r3, #10
 8006d20:	059b      	lsls	r3, r3, #22
 8006d22:	0d9b      	lsrs	r3, r3, #22
 8006d24:	2232      	movs	r2, #50	; 0x32
 8006d26:	4353      	muls	r3, r2
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t maxpower = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_BATTERY_MAX_POWER_Msk) >> USBPD_PDO_SRC_BATTERY_MAX_POWER_Pos) * 250;
 8006d2a:	187b      	adds	r3, r7, r1
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	569a      	ldrsb	r2, [r3, r2]
 8006d30:	4b7b      	ldr	r3, [pc, #492]	; (8006f20 <sourcecapa_limits+0x324>)
 8006d32:	0092      	lsls	r2, r2, #2
 8006d34:	58d3      	ldr	r3, [r2, r3]
 8006d36:	059b      	lsls	r3, r3, #22
 8006d38:	0d9b      	lsrs	r3, r3, #22
 8006d3a:	22fa      	movs	r2, #250	; 0xfa
 8006d3c:	4353      	muls	r3, r2
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
		if ((maxpower)==100000) /* 100W */
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	4a79      	ldr	r2, [pc, #484]	; (8006f28 <sourcecapa_limits+0x32c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d138      	bne.n	8006dba <sourcecapa_limits+0x1be>
		{
		  sprintf((char*)_str, "B:%2d.%1d-%2d.%1dV %2dW",(int)(minvoltage/1000),(int)(minvoltage/100)%10, (int)(maxvoltage/1000),(int)(maxvoltage/100)%10, (int)(maxpower/1000));
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	22fa      	movs	r2, #250	; 0xfa
 8006d4c:	0091      	lsls	r1, r2, #2
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7ff fa4e 	bl	80061f0 <__udivsi3>
 8006d54:	0003      	movs	r3, r0
 8006d56:	001e      	movs	r6, r3
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	2164      	movs	r1, #100	; 0x64
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f7ff fa47 	bl	80061f0 <__udivsi3>
 8006d62:	0003      	movs	r3, r0
 8006d64:	210a      	movs	r1, #10
 8006d66:	0018      	movs	r0, r3
 8006d68:	f7ff fbb2 	bl	80064d0 <__aeabi_idivmod>
 8006d6c:	000b      	movs	r3, r1
 8006d6e:	4698      	mov	r8, r3
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	22fa      	movs	r2, #250	; 0xfa
 8006d74:	0091      	lsls	r1, r2, #2
 8006d76:	0018      	movs	r0, r3
 8006d78:	f7ff fa3a 	bl	80061f0 <__udivsi3>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	001c      	movs	r4, r3
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2164      	movs	r1, #100	; 0x64
 8006d84:	0018      	movs	r0, r3
 8006d86:	f7ff fa33 	bl	80061f0 <__udivsi3>
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	210a      	movs	r1, #10
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7ff fb9e 	bl	80064d0 <__aeabi_idivmod>
 8006d94:	000b      	movs	r3, r1
 8006d96:	001d      	movs	r5, r3
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	22fa      	movs	r2, #250	; 0xfa
 8006d9c:	0091      	lsls	r1, r2, #2
 8006d9e:	0018      	movs	r0, r3
 8006da0:	f7ff fa26 	bl	80061f0 <__udivsi3>
 8006da4:	0003      	movs	r3, r0
 8006da6:	4961      	ldr	r1, [pc, #388]	; (8006f2c <sourcecapa_limits+0x330>)
 8006da8:	0038      	movs	r0, r7
 8006daa:	9302      	str	r3, [sp, #8]
 8006dac:	9501      	str	r5, [sp, #4]
 8006dae:	9400      	str	r4, [sp, #0]
 8006db0:	4643      	mov	r3, r8
 8006db2:	0032      	movs	r2, r6
 8006db4:	f013 feb0 	bl	801ab18 <siprintf>
		else
		{
		  sprintf((char*)_str, "B:%2d.%1d-%2d.%1dV %2d.%dW", (int)(minvoltage/1000),(int)(minvoltage/100)%10, (int)(maxvoltage/1000),(int)(maxvoltage/100)%10, (int)(maxpower/1000), (int)(maxpower/100)%10);
		}
	  }
	  break;
 8006db8:	e16a      	b.n	8007090 <sourcecapa_limits+0x494>
		  sprintf((char*)_str, "B:%2d.%1d-%2d.%1dV %2d.%dW", (int)(minvoltage/1000),(int)(minvoltage/100)%10, (int)(maxvoltage/1000),(int)(maxvoltage/100)%10, (int)(maxpower/1000), (int)(maxpower/100)%10);
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	22fa      	movs	r2, #250	; 0xfa
 8006dbe:	0091      	lsls	r1, r2, #2
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f7ff fa15 	bl	80061f0 <__udivsi3>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	4698      	mov	r8, r3
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	2164      	movs	r1, #100	; 0x64
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7ff fa0e 	bl	80061f0 <__udivsi3>
 8006dd4:	0003      	movs	r3, r0
 8006dd6:	210a      	movs	r1, #10
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f7ff fb79 	bl	80064d0 <__aeabi_idivmod>
 8006dde:	000b      	movs	r3, r1
 8006de0:	4699      	mov	r9, r3
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	22fa      	movs	r2, #250	; 0xfa
 8006de6:	0091      	lsls	r1, r2, #2
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7ff fa01 	bl	80061f0 <__udivsi3>
 8006dee:	0003      	movs	r3, r0
 8006df0:	001c      	movs	r4, r3
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	2164      	movs	r1, #100	; 0x64
 8006df6:	0018      	movs	r0, r3
 8006df8:	f7ff f9fa 	bl	80061f0 <__udivsi3>
 8006dfc:	0003      	movs	r3, r0
 8006dfe:	210a      	movs	r1, #10
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7ff fb65 	bl	80064d0 <__aeabi_idivmod>
 8006e06:	000b      	movs	r3, r1
 8006e08:	001d      	movs	r5, r3
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	22fa      	movs	r2, #250	; 0xfa
 8006e0e:	0091      	lsls	r1, r2, #2
 8006e10:	0018      	movs	r0, r3
 8006e12:	f7ff f9ed 	bl	80061f0 <__udivsi3>
 8006e16:	0003      	movs	r3, r0
 8006e18:	001e      	movs	r6, r3
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	2164      	movs	r1, #100	; 0x64
 8006e1e:	0018      	movs	r0, r3
 8006e20:	f7ff f9e6 	bl	80061f0 <__udivsi3>
 8006e24:	0003      	movs	r3, r0
 8006e26:	210a      	movs	r1, #10
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f7ff fb51 	bl	80064d0 <__aeabi_idivmod>
 8006e2e:	000b      	movs	r3, r1
 8006e30:	493f      	ldr	r1, [pc, #252]	; (8006f30 <sourcecapa_limits+0x334>)
 8006e32:	0038      	movs	r0, r7
 8006e34:	9303      	str	r3, [sp, #12]
 8006e36:	9602      	str	r6, [sp, #8]
 8006e38:	9501      	str	r5, [sp, #4]
 8006e3a:	9400      	str	r4, [sp, #0]
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	4642      	mov	r2, r8
 8006e40:	f013 fe6a 	bl	801ab18 <siprintf>
	  break;
 8006e44:	e124      	b.n	8007090 <sourcecapa_limits+0x494>
	case USBPD_PDO_TYPE_VARIABLE :
	  {
		uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MAX_VOLTAGE_Msk) >> USBPD_PDO_SRC_VARIABLE_MAX_VOLTAGE_Pos) * 50;
 8006e46:	214f      	movs	r1, #79	; 0x4f
 8006e48:	187b      	adds	r3, r7, r1
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	569a      	ldrsb	r2, [r3, r2]
 8006e4e:	4b34      	ldr	r3, [pc, #208]	; (8006f20 <sourcecapa_limits+0x324>)
 8006e50:	0092      	lsls	r2, r2, #2
 8006e52:	58d3      	ldr	r3, [r2, r3]
 8006e54:	0d1b      	lsrs	r3, r3, #20
 8006e56:	059b      	lsls	r3, r3, #22
 8006e58:	0d9b      	lsrs	r3, r3, #22
 8006e5a:	2232      	movs	r2, #50	; 0x32
 8006e5c:	4353      	muls	r3, r2
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t minvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MIN_VOLTAGE_Msk) >> USBPD_PDO_SRC_VARIABLE_MIN_VOLTAGE_Pos) * 50;
 8006e60:	187b      	adds	r3, r7, r1
 8006e62:	2200      	movs	r2, #0
 8006e64:	569a      	ldrsb	r2, [r3, r2]
 8006e66:	4b2e      	ldr	r3, [pc, #184]	; (8006f20 <sourcecapa_limits+0x324>)
 8006e68:	0092      	lsls	r2, r2, #2
 8006e6a:	58d3      	ldr	r3, [r2, r3]
 8006e6c:	0a9b      	lsrs	r3, r3, #10
 8006e6e:	059b      	lsls	r3, r3, #22
 8006e70:	0d9b      	lsrs	r3, r3, #22
 8006e72:	2232      	movs	r2, #50	; 0x32
 8006e74:	4353      	muls	r3, r2
 8006e76:	63bb      	str	r3, [r7, #56]	; 0x38
		uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_VARIABLE_MAX_CURRENT_Pos) * 10;
 8006e78:	187b      	adds	r3, r7, r1
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	569a      	ldrsb	r2, [r3, r2]
 8006e7e:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <sourcecapa_limits+0x324>)
 8006e80:	0092      	lsls	r2, r2, #2
 8006e82:	58d3      	ldr	r3, [r2, r3]
 8006e84:	059b      	lsls	r3, r3, #22
 8006e86:	0d9a      	lsrs	r2, r3, #22
 8006e88:	0013      	movs	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	189b      	adds	r3, r3, r2
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
		sprintf((char*)_str, "V:%2d.%1d-%2d.%1dV %d.%dA", (int)(minvoltage/1000),(int)(minvoltage/100)%10, (int)(maxvoltage/1000),(int)(maxvoltage/100)%10, (int)(maxcurrent/1000), (int)((maxcurrent % 1000) /100));
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	22fa      	movs	r2, #250	; 0xfa
 8006e96:	0091      	lsls	r1, r2, #2
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7ff f9a9 	bl	80061f0 <__udivsi3>
 8006e9e:	0003      	movs	r3, r0
 8006ea0:	4698      	mov	r8, r3
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	2164      	movs	r1, #100	; 0x64
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7ff f9a2 	bl	80061f0 <__udivsi3>
 8006eac:	0003      	movs	r3, r0
 8006eae:	210a      	movs	r1, #10
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f7ff fb0d 	bl	80064d0 <__aeabi_idivmod>
 8006eb6:	000b      	movs	r3, r1
 8006eb8:	4699      	mov	r9, r3
 8006eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebc:	22fa      	movs	r2, #250	; 0xfa
 8006ebe:	0091      	lsls	r1, r2, #2
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f7ff f995 	bl	80061f0 <__udivsi3>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	001c      	movs	r4, r3
 8006eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ecc:	2164      	movs	r1, #100	; 0x64
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f7ff f98e 	bl	80061f0 <__udivsi3>
 8006ed4:	0003      	movs	r3, r0
 8006ed6:	210a      	movs	r1, #10
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f7ff faf9 	bl	80064d0 <__aeabi_idivmod>
 8006ede:	000b      	movs	r3, r1
 8006ee0:	001d      	movs	r5, r3
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee4:	22fa      	movs	r2, #250	; 0xfa
 8006ee6:	0091      	lsls	r1, r2, #2
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f7ff f981 	bl	80061f0 <__udivsi3>
 8006eee:	0003      	movs	r3, r0
 8006ef0:	001e      	movs	r6, r3
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	22fa      	movs	r2, #250	; 0xfa
 8006ef6:	0091      	lsls	r1, r2, #2
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f7ff f9ff 	bl	80062fc <__aeabi_uidivmod>
 8006efe:	000b      	movs	r3, r1
 8006f00:	2164      	movs	r1, #100	; 0x64
 8006f02:	0018      	movs	r0, r3
 8006f04:	f7ff f974 	bl	80061f0 <__udivsi3>
 8006f08:	0003      	movs	r3, r0
 8006f0a:	490a      	ldr	r1, [pc, #40]	; (8006f34 <sourcecapa_limits+0x338>)
 8006f0c:	0038      	movs	r0, r7
 8006f0e:	9303      	str	r3, [sp, #12]
 8006f10:	9602      	str	r6, [sp, #8]
 8006f12:	9501      	str	r5, [sp, #4]
 8006f14:	9400      	str	r4, [sp, #0]
 8006f16:	464b      	mov	r3, r9
 8006f18:	4642      	mov	r2, r8
 8006f1a:	f013 fdfd 	bl	801ab18 <siprintf>
	  }
	  break;
 8006f1e:	e0b7      	b.n	8007090 <sourcecapa_limits+0x494>
 8006f20:	20002d90 	.word	0x20002d90
 8006f24:	0801b400 	.word	0x0801b400
 8006f28:	000186a0 	.word	0x000186a0
 8006f2c:	0801b414 	.word	0x0801b414
 8006f30:	0801b42c 	.word	0x0801b42c
 8006f34:	0801b448 	.word	0x0801b448
	case USBPD_PDO_TYPE_APDO :
	  {
		indexAPDO = index + 1;
 8006f38:	214f      	movs	r1, #79	; 0x4f
 8006f3a:	187b      	adds	r3, r7, r1
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b25b      	sxtb	r3, r3
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	4b61      	ldr	r3, [pc, #388]	; (80070c8 <sourcecapa_limits+0x4cc>)
 8006f44:	601a      	str	r2, [r3, #0]
		uint32_t minvoltageAPDOtemp = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MIN_VOLTAGE_Msk) >> USBPD_PDO_SRC_APDO_MIN_VOLTAGE_Pos) * 100;
 8006f46:	187b      	adds	r3, r7, r1
 8006f48:	2200      	movs	r2, #0
 8006f4a:	569a      	ldrsb	r2, [r3, r2]
 8006f4c:	4b5f      	ldr	r3, [pc, #380]	; (80070cc <sourcecapa_limits+0x4d0>)
 8006f4e:	0092      	lsls	r2, r2, #2
 8006f50:	58d3      	ldr	r3, [r2, r3]
 8006f52:	0a1b      	lsrs	r3, r3, #8
 8006f54:	22ff      	movs	r2, #255	; 0xff
 8006f56:	4013      	ands	r3, r2
 8006f58:	2264      	movs	r2, #100	; 0x64
 8006f5a:	4353      	muls	r3, r2
 8006f5c:	64bb      	str	r3, [r7, #72]	; 0x48
		uint32_t maxvoltageAPDOtemp = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MAX_VOLTAGE_Msk) >> USBPD_PDO_SRC_APDO_MAX_VOLTAGE_Pos) * 100;
 8006f5e:	187b      	adds	r3, r7, r1
 8006f60:	2200      	movs	r2, #0
 8006f62:	569a      	ldrsb	r2, [r3, r2]
 8006f64:	4b59      	ldr	r3, [pc, #356]	; (80070cc <sourcecapa_limits+0x4d0>)
 8006f66:	0092      	lsls	r2, r2, #2
 8006f68:	58d3      	ldr	r3, [r2, r3]
 8006f6a:	0c5b      	lsrs	r3, r3, #17
 8006f6c:	22ff      	movs	r2, #255	; 0xff
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2264      	movs	r2, #100	; 0x64
 8006f72:	4353      	muls	r3, r2
 8006f74:	647b      	str	r3, [r7, #68]	; 0x44
		uint32_t maxcurrentAPDOtemp = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_APDO_MAX_CURRENT_Pos) * 50;
 8006f76:	187b      	adds	r3, r7, r1
 8006f78:	2200      	movs	r2, #0
 8006f7a:	569a      	ldrsb	r2, [r3, r2]
 8006f7c:	4b53      	ldr	r3, [pc, #332]	; (80070cc <sourcecapa_limits+0x4d0>)
 8006f7e:	0092      	lsls	r2, r2, #2
 8006f80:	58d3      	ldr	r3, [r2, r3]
 8006f82:	227f      	movs	r2, #127	; 0x7f
 8006f84:	4013      	ands	r3, r2
 8006f86:	2232      	movs	r2, #50	; 0x32
 8006f88:	4353      	muls	r3, r2
 8006f8a:	643b      	str	r3, [r7, #64]	; 0x40
		sprintf((char*)_str, "A:%2d.%1d-%2d.%1dV %d.%dA",(int) (minvoltageAPDOtemp/1000),(int)(minvoltageAPDOtemp/100)%10, (int)(maxvoltageAPDOtemp/1000),(int)(maxvoltageAPDOtemp/100)%10, (int)(maxcurrentAPDOtemp/1000), (int)((maxcurrentAPDOtemp % 1000) /100));
 8006f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8e:	22fa      	movs	r2, #250	; 0xfa
 8006f90:	0091      	lsls	r1, r2, #2
 8006f92:	0018      	movs	r0, r3
 8006f94:	f7ff f92c 	bl	80061f0 <__udivsi3>
 8006f98:	0003      	movs	r3, r0
 8006f9a:	4698      	mov	r8, r3
 8006f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9e:	2164      	movs	r1, #100	; 0x64
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff f925 	bl	80061f0 <__udivsi3>
 8006fa6:	0003      	movs	r3, r0
 8006fa8:	210a      	movs	r1, #10
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7ff fa90 	bl	80064d0 <__aeabi_idivmod>
 8006fb0:	000b      	movs	r3, r1
 8006fb2:	4699      	mov	r9, r3
 8006fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb6:	22fa      	movs	r2, #250	; 0xfa
 8006fb8:	0091      	lsls	r1, r2, #2
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7ff f918 	bl	80061f0 <__udivsi3>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	001c      	movs	r4, r3
 8006fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc6:	2164      	movs	r1, #100	; 0x64
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f7ff f911 	bl	80061f0 <__udivsi3>
 8006fce:	0003      	movs	r3, r0
 8006fd0:	210a      	movs	r1, #10
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7ff fa7c 	bl	80064d0 <__aeabi_idivmod>
 8006fd8:	000b      	movs	r3, r1
 8006fda:	001d      	movs	r5, r3
 8006fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fde:	22fa      	movs	r2, #250	; 0xfa
 8006fe0:	0091      	lsls	r1, r2, #2
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f7ff f904 	bl	80061f0 <__udivsi3>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	001e      	movs	r6, r3
 8006fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fee:	22fa      	movs	r2, #250	; 0xfa
 8006ff0:	0091      	lsls	r1, r2, #2
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f7ff f982 	bl	80062fc <__aeabi_uidivmod>
 8006ff8:	000b      	movs	r3, r1
 8006ffa:	2164      	movs	r1, #100	; 0x64
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7ff f8f7 	bl	80061f0 <__udivsi3>
 8007002:	0003      	movs	r3, r0
 8007004:	4932      	ldr	r1, [pc, #200]	; (80070d0 <sourcecapa_limits+0x4d4>)
 8007006:	0038      	movs	r0, r7
 8007008:	9303      	str	r3, [sp, #12]
 800700a:	9602      	str	r6, [sp, #8]
 800700c:	9501      	str	r5, [sp, #4]
 800700e:	9400      	str	r4, [sp, #0]
 8007010:	464b      	mov	r3, r9
 8007012:	4642      	mov	r2, r8
 8007014:	f013 fd80 	bl	801ab18 <siprintf>

		if (!isMinVoltageAPDOInitialized || minvoltageAPDOtemp < minvoltageAPDO) {
 8007018:	4b2e      	ldr	r3, [pc, #184]	; (80070d4 <sourcecapa_limits+0x4d8>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <sourcecapa_limits+0x42e>
 8007020:	4b2d      	ldr	r3, [pc, #180]	; (80070d8 <sourcecapa_limits+0x4dc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007026:	429a      	cmp	r2, r3
 8007028:	d218      	bcs.n	800705c <sourcecapa_limits+0x460>
			minvoltageAPDO = minvoltageAPDOtemp;
 800702a:	4b2b      	ldr	r3, [pc, #172]	; (80070d8 <sourcecapa_limits+0x4dc>)
 800702c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800702e:	601a      	str	r2, [r3, #0]
			voltageMin = (int)minvoltageAPDOtemp/10;
 8007030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007032:	210a      	movs	r1, #10
 8007034:	0018      	movs	r0, r3
 8007036:	f7ff f965 	bl	8006304 <__divsi3>
 800703a:	0003      	movs	r3, r0
 800703c:	001a      	movs	r2, r3
 800703e:	4b27      	ldr	r3, [pc, #156]	; (80070dc <sourcecapa_limits+0x4e0>)
 8007040:	601a      	str	r2, [r3, #0]
			voltage = voltageMin/10;
 8007042:	4b26      	ldr	r3, [pc, #152]	; (80070dc <sourcecapa_limits+0x4e0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	210a      	movs	r1, #10
 8007048:	0018      	movs	r0, r3
 800704a:	f7ff f95b 	bl	8006304 <__divsi3>
 800704e:	0003      	movs	r3, r0
 8007050:	001a      	movs	r2, r3
 8007052:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <sourcecapa_limits+0x4e4>)
 8007054:	601a      	str	r2, [r3, #0]
			isMinVoltageAPDOInitialized = 1; // Set the flag to indicate it has been initialized
 8007056:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <sourcecapa_limits+0x4d8>)
 8007058:	2201      	movs	r2, #1
 800705a:	701a      	strb	r2, [r3, #0]
		}

		if (maxvoltageAPDOtemp > maxvoltageAPDO) {
 800705c:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <sourcecapa_limits+0x4e8>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007062:	429a      	cmp	r2, r3
 8007064:	d913      	bls.n	800708e <sourcecapa_limits+0x492>
			maxvoltageAPDO = maxvoltageAPDOtemp;
 8007066:	4b1f      	ldr	r3, [pc, #124]	; (80070e4 <sourcecapa_limits+0x4e8>)
 8007068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800706a:	601a      	str	r2, [r3, #0]
			voltageMax = (int)maxvoltageAPDOtemp/10;
 800706c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706e:	210a      	movs	r1, #10
 8007070:	0018      	movs	r0, r3
 8007072:	f7ff f947 	bl	8006304 <__divsi3>
 8007076:	0003      	movs	r3, r0
 8007078:	001a      	movs	r2, r3
 800707a:	4b1b      	ldr	r3, [pc, #108]	; (80070e8 <sourcecapa_limits+0x4ec>)
 800707c:	601a      	str	r2, [r3, #0]
		}
	  }
	  break;
 800707e:	e006      	b.n	800708e <sourcecapa_limits+0x492>
	default :
	  sprintf((char*)_str,"Unknown Source PDO");
 8007080:	4a1a      	ldr	r2, [pc, #104]	; (80070ec <sourcecapa_limits+0x4f0>)
 8007082:	003b      	movs	r3, r7
 8007084:	0011      	movs	r1, r2
 8007086:	0018      	movs	r0, r3
 8007088:	f013 fd46 	bl	801ab18 <siprintf>
	  break;
 800708c:	e000      	b.n	8007090 <sourcecapa_limits+0x494>
	  break;
 800708e:	46c0      	nop			; (mov r8, r8)
  for(int8_t index=_start; index < _max; index++)
 8007090:	214f      	movs	r1, #79	; 0x4f
 8007092:	187b      	adds	r3, r7, r1
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b25b      	sxtb	r3, r3
 8007098:	b2db      	uxtb	r3, r3
 800709a:	3301      	adds	r3, #1
 800709c:	b2da      	uxtb	r2, r3
 800709e:	187b      	adds	r3, r7, r1
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	234f      	movs	r3, #79	; 0x4f
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	2200      	movs	r2, #0
 80070a8:	569a      	ldrsb	r2, [r3, r2]
 80070aa:	234e      	movs	r3, #78	; 0x4e
 80070ac:	18fb      	adds	r3, r7, r3
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	da00      	bge.n	80070b6 <sourcecapa_limits+0x4ba>
 80070b4:	e5be      	b.n	8006c34 <sourcecapa_limits+0x38>
	}
  }
}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	46c0      	nop			; (mov r8, r8)
 80070ba:	46bd      	mov	sp, r7
 80070bc:	b015      	add	sp, #84	; 0x54
 80070be:	bcc0      	pop	{r6, r7}
 80070c0:	46b9      	mov	r9, r7
 80070c2:	46b0      	mov	r8, r6
 80070c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	20000220 	.word	0x20000220
 80070cc:	20002d90 	.word	0x20002d90
 80070d0:	0801b464 	.word	0x0801b464
 80070d4:	20000228 	.word	0x20000228
 80070d8:	20000230 	.word	0x20000230
 80070dc:	20000208 	.word	0x20000208
 80070e0:	2000000c 	.word	0x2000000c
 80070e4:	2000022c 	.word	0x2000022c
 80070e8:	20000010 	.word	0x20000010
 80070ec:	0801b480 	.word	0x0801b480

080070f0 <DEMO_Init>:
/**
  * @brief  Demo initialisation
  * @retval DEMO_ErrorCode status
  */
DEMO_ErrorCode DEMO_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /*Initialize the 7 segment display */
  max7219_Init( 7 );
 80070f4:	2007      	movs	r0, #7
 80070f6:	f000 f815 	bl	8007124 <max7219_Init>
  max7219_Decode_On();
 80070fa:	f000 f89d 	bl	8007238 <max7219_Decode_On>

  /*Print initial values*/
  max7219_PrintItos(SEGMENT_1, 4, 3300, 3);
 80070fe:	4a08      	ldr	r2, [pc, #32]	; (8007120 <DEMO_Init+0x30>)
 8007100:	2303      	movs	r3, #3
 8007102:	2104      	movs	r1, #4
 8007104:	2001      	movs	r0, #1
 8007106:	f000 f943 	bl	8007390 <max7219_PrintItos>
  max7219_PrintItos(SEGMENT_2, 4, 0, 4);
 800710a:	2304      	movs	r3, #4
 800710c:	2200      	movs	r2, #0
 800710e:	2104      	movs	r1, #4
 8007110:	2002      	movs	r0, #2
 8007112:	f000 f93d 	bl	8007390 <max7219_PrintItos>

 return DEMO_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	0018      	movs	r0, r3
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	00000ce4 	.word	0x00000ce4

08007124 <max7219_Init>:
static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);
static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment);

void max7219_Init(uint8_t intensivity)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	0002      	movs	r2, r0
 800712c:	1dfb      	adds	r3, r7, #7
 800712e:	701a      	strb	r2, [r3, #0]
	max7219_Turn_On();
 8007130:	f000 f878 	bl	8007224 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8007134:	2107      	movs	r1, #7
 8007136:	200b      	movs	r0, #11
 8007138:	f000 f848 	bl	80071cc <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 800713c:	1dfb      	adds	r3, r7, #7
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	0018      	movs	r0, r3
 8007142:	f000 f806 	bl	8007152 <max7219_SetIntensivity>
	max7219_Clean();
 8007146:	f000 f819 	bl	800717c <max7219_Clean>
}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	46bd      	mov	sp, r7
 800714e:	b002      	add	sp, #8
 8007150:	bd80      	pop	{r7, pc}

08007152 <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	0002      	movs	r2, r0
 800715a:	1dfb      	adds	r3, r7, #7
 800715c:	701a      	strb	r2, [r3, #0]
	if (intensivity > 0x0F)
 800715e:	1dfb      	adds	r3, r7, #7
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b0f      	cmp	r3, #15
 8007164:	d806      	bhi.n	8007174 <max7219_SetIntensivity+0x22>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 8007166:	1dfb      	adds	r3, r7, #7
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	0019      	movs	r1, r3
 800716c:	200a      	movs	r0, #10
 800716e:	f000 f82d 	bl	80071cc <max7219_SendData>
 8007172:	e000      	b.n	8007176 <max7219_SetIntensivity+0x24>
		return;
 8007174:	46c0      	nop			; (mov r8, r8)
}
 8007176:	46bd      	mov	sp, r7
 8007178:	b002      	add	sp, #8
 800717a:	bd80      	pop	{r7, pc}

0800717c <max7219_Clean>:

void max7219_Clean()
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8007182:	1dfb      	adds	r3, r7, #7
 8007184:	2200      	movs	r2, #0
 8007186:	701a      	strb	r2, [r3, #0]

	if(decodeMode == 0xFF)
 8007188:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <max7219_Clean+0x4c>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2bff      	cmp	r3, #255	; 0xff
 800718e:	d102      	bne.n	8007196 <max7219_Clean+0x1a>
	{
		clear = BLANK;
 8007190:	1dfb      	adds	r3, r7, #7
 8007192:	220f      	movs	r2, #15
 8007194:	701a      	strb	r2, [r3, #0]
	}

	for (int i = 0; i < 8; ++i)
 8007196:	2300      	movs	r3, #0
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	e00c      	b.n	80071b6 <max7219_Clean+0x3a>
	{
		max7219_SendData(i + 1, clear);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	3301      	adds	r3, #1
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	1dfb      	adds	r3, r7, #7
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	0019      	movs	r1, r3
 80071aa:	0010      	movs	r0, r2
 80071ac:	f000 f80e 	bl	80071cc <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	3301      	adds	r3, #1
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b07      	cmp	r3, #7
 80071ba:	ddef      	ble.n	800719c <max7219_Clean+0x20>
	}
}
 80071bc:	46c0      	nop			; (mov r8, r8)
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b002      	add	sp, #8
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	2000024c 	.word	0x2000024c

080071cc <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	0002      	movs	r2, r0
 80071d4:	1dfb      	adds	r3, r7, #7
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	1dbb      	adds	r3, r7, #6
 80071da:	1c0a      	adds	r2, r1, #0
 80071dc:	701a      	strb	r2, [r3, #0]
	CS_SET();
 80071de:	4b0f      	ldr	r3, [pc, #60]	; (800721c <max7219_SendData+0x50>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	2180      	movs	r1, #128	; 0x80
 80071e4:	0018      	movs	r0, r3
 80071e6:	f003 f861 	bl	800a2ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 80071ea:	2301      	movs	r3, #1
 80071ec:	425b      	negs	r3, r3
 80071ee:	1df9      	adds	r1, r7, #7
 80071f0:	480b      	ldr	r0, [pc, #44]	; (8007220 <max7219_SendData+0x54>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	f004 f920 	bl	800b438 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80071f8:	2301      	movs	r3, #1
 80071fa:	425b      	negs	r3, r3
 80071fc:	1db9      	adds	r1, r7, #6
 80071fe:	4808      	ldr	r0, [pc, #32]	; (8007220 <max7219_SendData+0x54>)
 8007200:	2201      	movs	r2, #1
 8007202:	f004 f919 	bl	800b438 <HAL_SPI_Transmit>
	CS_RESET();
 8007206:	4b05      	ldr	r3, [pc, #20]	; (800721c <max7219_SendData+0x50>)
 8007208:	2201      	movs	r2, #1
 800720a:	2180      	movs	r1, #128	; 0x80
 800720c:	0018      	movs	r0, r3
 800720e:	f003 f84d 	bl	800a2ac <HAL_GPIO_WritePin>
}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	46bd      	mov	sp, r7
 8007216:	b002      	add	sp, #8
 8007218:	bd80      	pop	{r7, pc}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	50000800 	.word	0x50000800
 8007220:	200002b4 	.word	0x200002b4

08007224 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8007228:	2101      	movs	r1, #1
 800722a:	200c      	movs	r0, #12
 800722c:	f7ff ffce 	bl	80071cc <max7219_SendData>
}
 8007230:	46c0      	nop			; (mov r8, r8)
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <max7219_Decode_On>:
{
	max7219_SendData(REG_SHUTDOWN, 0x00);
}

void max7219_Decode_On(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <max7219_Decode_On+0x1c>)
 800723e:	22ff      	movs	r2, #255	; 0xff
 8007240:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8007242:	4b04      	ldr	r3, [pc, #16]	; (8007254 <max7219_Decode_On+0x1c>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	0019      	movs	r1, r3
 8007248:	2009      	movs	r0, #9
 800724a:	f7ff ffbf 	bl	80071cc <max7219_SendData>
}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	2000024c 	.word	0x2000024c

08007258 <mapPosition>:
  * @param  newPosition: Starting position of printing
  * @retval MAX7219_Digits: return new mapped Position
  */

static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	0002      	movs	r2, r0
 8007260:	1dfb      	adds	r3, r7, #7
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	1dbb      	adds	r3, r7, #6
 8007266:	1c0a      	adds	r2, r1, #0
 8007268:	701a      	strb	r2, [r3, #0]
	if (segment == 1)
 800726a:	1dbb      	adds	r3, r7, #6
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d102      	bne.n	8007278 <mapPosition+0x20>
	{
		return newPosition;
 8007272:	1dfb      	adds	r3, r7, #7
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	e009      	b.n	800728c <mapPosition+0x34>
	}
	else if (segment == 2)
 8007278:	1dbb      	adds	r3, r7, #6
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d104      	bne.n	800728a <mapPosition+0x32>
	{
		return newPosition +4;
 8007280:	1dfb      	adds	r3, r7, #7
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	3304      	adds	r3, #4
 8007286:	b2db      	uxtb	r3, r3
 8007288:	e000      	b.n	800728c <mapPosition+0x34>
	}
	return 0; // In case of invalid position
 800728a:	2300      	movs	r3, #0
}
 800728c:	0018      	movs	r0, r3
 800728e:	46bd      	mov	sp, r7
 8007290:	b002      	add	sp, #8
 8007292:	bd80      	pop	{r7, pc}

08007294 <max7219_PrintDigit>:
  * @param  point: Specify if decimal point should be displayed or not
  * @retval None
  */

void max7219_PrintDigit(MAX7219_Segments segment, MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 8007294:	b5b0      	push	{r4, r5, r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	0005      	movs	r5, r0
 800729c:	000c      	movs	r4, r1
 800729e:	0010      	movs	r0, r2
 80072a0:	0019      	movs	r1, r3
 80072a2:	1dfb      	adds	r3, r7, #7
 80072a4:	1c2a      	adds	r2, r5, #0
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	1dbb      	adds	r3, r7, #6
 80072aa:	1c22      	adds	r2, r4, #0
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	1d7b      	adds	r3, r7, #5
 80072b0:	1c02      	adds	r2, r0, #0
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	1d3b      	adds	r3, r7, #4
 80072b6:	1c0a      	adds	r2, r1, #0
 80072b8:	701a      	strb	r2, [r3, #0]
	MAX7219_Digits mappedPosition = mapPosition(position, segment);
 80072ba:	250f      	movs	r5, #15
 80072bc:	197c      	adds	r4, r7, r5
 80072be:	1dfb      	adds	r3, r7, #7
 80072c0:	781a      	ldrb	r2, [r3, #0]
 80072c2:	1dbb      	adds	r3, r7, #6
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	0011      	movs	r1, r2
 80072c8:	0018      	movs	r0, r3
 80072ca:	f7ff ffc5 	bl	8007258 <mapPosition>
 80072ce:	0003      	movs	r3, r0
 80072d0:	7023      	strb	r3, [r4, #0]
	if(mappedPosition > NUMBER_OF_DIGITS)
 80072d2:	002c      	movs	r4, r5
 80072d4:	193b      	adds	r3, r7, r4
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d852      	bhi.n	8007382 <max7219_PrintDigit+0xee>
	{
		return;
	}

	if(point)
 80072dc:	1d3b      	adds	r3, r7, #4
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d027      	beq.n	8007334 <max7219_PrintDigit+0xa0>
	{
		if(decodeMode == 0x00)
 80072e4:	4b29      	ldr	r3, [pc, #164]	; (800738c <max7219_PrintDigit+0xf8>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d111      	bne.n	8007310 <max7219_PrintDigit+0x7c>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) | (1 << 7));
 80072ec:	1d7b      	adds	r3, r7, #5
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f000 f9a9 	bl	8007648 <getSymbol>
 80072f6:	0003      	movs	r3, r0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2280      	movs	r2, #128	; 0x80
 80072fc:	4252      	negs	r2, r2
 80072fe:	4313      	orrs	r3, r2
 8007300:	b2da      	uxtb	r2, r3
 8007302:	193b      	adds	r3, r7, r4
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	0011      	movs	r1, r2
 8007308:	0018      	movs	r0, r3
 800730a:	f7ff ff5f 	bl	80071cc <max7219_SendData>
 800730e:	e039      	b.n	8007384 <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <max7219_PrintDigit+0xf8>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2bff      	cmp	r3, #255	; 0xff
 8007316:	d135      	bne.n	8007384 <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric | (1 << 7));
 8007318:	1d7b      	adds	r3, r7, #5
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2280      	movs	r2, #128	; 0x80
 800731e:	4252      	negs	r2, r2
 8007320:	4313      	orrs	r3, r2
 8007322:	b2da      	uxtb	r2, r3
 8007324:	230f      	movs	r3, #15
 8007326:	18fb      	adds	r3, r7, r3
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	0011      	movs	r1, r2
 800732c:	0018      	movs	r0, r3
 800732e:	f7ff ff4d 	bl	80071cc <max7219_SendData>
 8007332:	e027      	b.n	8007384 <max7219_PrintDigit+0xf0>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8007334:	4b15      	ldr	r3, [pc, #84]	; (800738c <max7219_PrintDigit+0xf8>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d111      	bne.n	8007360 <max7219_PrintDigit+0xcc>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) & (~(1 << 7)));
 800733c:	1d7b      	adds	r3, r7, #5
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	0018      	movs	r0, r3
 8007342:	f000 f981 	bl	8007648 <getSymbol>
 8007346:	0003      	movs	r3, r0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	227f      	movs	r2, #127	; 0x7f
 800734c:	4013      	ands	r3, r2
 800734e:	b2da      	uxtb	r2, r3
 8007350:	230f      	movs	r3, #15
 8007352:	18fb      	adds	r3, r7, r3
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	0011      	movs	r1, r2
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff ff37 	bl	80071cc <max7219_SendData>
 800735e:	e011      	b.n	8007384 <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 8007360:	4b0a      	ldr	r3, [pc, #40]	; (800738c <max7219_PrintDigit+0xf8>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2bff      	cmp	r3, #255	; 0xff
 8007366:	d10d      	bne.n	8007384 <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric & (~(1 << 7)));
 8007368:	1d7b      	adds	r3, r7, #5
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	227f      	movs	r2, #127	; 0x7f
 800736e:	4013      	ands	r3, r2
 8007370:	b2da      	uxtb	r2, r3
 8007372:	230f      	movs	r3, #15
 8007374:	18fb      	adds	r3, r7, r3
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	0011      	movs	r1, r2
 800737a:	0018      	movs	r0, r3
 800737c:	f7ff ff26 	bl	80071cc <max7219_SendData>
 8007380:	e000      	b.n	8007384 <max7219_PrintDigit+0xf0>
		return;
 8007382:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8007384:	46bd      	mov	sp, r7
 8007386:	b004      	add	sp, #16
 8007388:	bdb0      	pop	{r4, r5, r7, pc}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	2000024c 	.word	0x2000024c

08007390 <max7219_PrintItos>:
  * @param  decimal_position: Place of decimal point
  * @retval MAX7219_Digits: current cursor position
  */

MAX7219_Digits max7219_PrintItos(MAX7219_Segments segment, MAX7219_Digits position, int value, uint8_t decimal_position)
{
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	0004      	movs	r4, r0
 8007398:	0008      	movs	r0, r1
 800739a:	603a      	str	r2, [r7, #0]
 800739c:	0019      	movs	r1, r3
 800739e:	1dfb      	adds	r3, r7, #7
 80073a0:	1c22      	adds	r2, r4, #0
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	1dbb      	adds	r3, r7, #6
 80073a6:	1c02      	adds	r2, r0, #0
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	1d7b      	adds	r3, r7, #5
 80073ac:	1c0a      	adds	r2, r1, #0
 80073ae:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 80073b0:	21ff      	movs	r1, #255	; 0xff
 80073b2:	2009      	movs	r0, #9
 80073b4:	f7ff ff0a 	bl	80071cc <max7219_SendData>

	int32_t i;
    int8_t num_digits = 0;
 80073b8:	2313      	movs	r3, #19
 80073ba:	18fb      	adds	r3, r7, r3
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]

	if (value < 0)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da11      	bge.n	80073ea <max7219_PrintItos+0x5a>
	{
		if(position > 0)
 80073c6:	1dbb      	adds	r3, r7, #6
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <max7219_PrintItos+0x54>
		{
			max7219_SendData(position, MINUS);
 80073ce:	1dbb      	adds	r3, r7, #6
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	210a      	movs	r1, #10
 80073d4:	0018      	movs	r0, r3
 80073d6:	f7ff fef9 	bl	80071cc <max7219_SendData>
			position--;
 80073da:	1dbb      	adds	r3, r7, #6
 80073dc:	781a      	ldrb	r2, [r3, #0]
 80073de:	1dbb      	adds	r3, r7, #6
 80073e0:	3a01      	subs	r2, #1
 80073e2:	701a      	strb	r2, [r3, #0]
		}
		value = -value;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	425b      	negs	r3, r3
 80073e8:	603b      	str	r3, [r7, #0]
	}

	i = 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	617b      	str	r3, [r7, #20]

	//Get number of non-zero digits
	while ((value / i) > 9)
 80073ee:	e00e      	b.n	800740e <max7219_PrintItos+0x7e>
	{
		i *= 10;
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	0013      	movs	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	189b      	adds	r3, r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	617b      	str	r3, [r7, #20]
		num_digits++;
 80073fc:	2113      	movs	r1, #19
 80073fe:	187b      	adds	r3, r7, r1
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	b25b      	sxtb	r3, r3
 8007404:	b2db      	uxtb	r3, r3
 8007406:	3301      	adds	r3, #1
 8007408:	b2da      	uxtb	r2, r3
 800740a:	187b      	adds	r3, r7, r1
 800740c:	701a      	strb	r2, [r3, #0]
	while ((value / i) > 9)
 800740e:	6979      	ldr	r1, [r7, #20]
 8007410:	6838      	ldr	r0, [r7, #0]
 8007412:	f7fe ff77 	bl	8006304 <__divsi3>
 8007416:	0003      	movs	r3, r0
 8007418:	2b09      	cmp	r3, #9
 800741a:	dce9      	bgt.n	80073f0 <max7219_PrintItos+0x60>
	}
	num_digits++;
 800741c:	2113      	movs	r1, #19
 800741e:	187b      	adds	r3, r7, r1
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	b25b      	sxtb	r3, r3
 8007424:	b2db      	uxtb	r3, r3
 8007426:	3301      	adds	r3, #1
 8007428:	b2da      	uxtb	r2, r3
 800742a:	187b      	adds	r3, r7, r1
 800742c:	701a      	strb	r2, [r3, #0]

	i /= 10;
*/

	//Print leading zeros and check for decimal point
	for (int j= 4; j > num_digits; j--) {
 800742e:	2304      	movs	r3, #4
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	e018      	b.n	8007466 <max7219_PrintItos+0xd6>
		if(j == decimal_position) {
 8007434:	1d7b      	adds	r3, r7, #5
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	429a      	cmp	r2, r3
 800743c:	d108      	bne.n	8007450 <max7219_PrintItos+0xc0>
			max7219_PrintDigit(segment, j, 0, true);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	b2d9      	uxtb	r1, r3
 8007442:	1dfb      	adds	r3, r7, #7
 8007444:	7818      	ldrb	r0, [r3, #0]
 8007446:	2301      	movs	r3, #1
 8007448:	2200      	movs	r2, #0
 800744a:	f7ff ff23 	bl	8007294 <max7219_PrintDigit>
 800744e:	e007      	b.n	8007460 <max7219_PrintItos+0xd0>
		}
		else {
			max7219_PrintDigit(segment, j, 0, false);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	b2d9      	uxtb	r1, r3
 8007454:	1dfb      	adds	r3, r7, #7
 8007456:	7818      	ldrb	r0, [r3, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	2200      	movs	r2, #0
 800745c:	f7ff ff1a 	bl	8007294 <max7219_PrintDigit>
	for (int j= 4; j > num_digits; j--) {
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3b01      	subs	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	2313      	movs	r3, #19
 8007468:	18fb      	adds	r3, r7, r3
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b25b      	sxtb	r3, r3
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	429a      	cmp	r2, r3
 8007472:	dcdf      	bgt.n	8007434 <max7219_PrintItos+0xa4>
		}
	}


	//Print each number and decimal point
	while (i > 0)
 8007474:	e048      	b.n	8007508 <max7219_PrintItos+0x178>
	{
		if(position > 0)
 8007476:	1dbb      	adds	r3, r7, #6
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d03d      	beq.n	80074fa <max7219_PrintItos+0x16a>
		{	//If current number position is decimal point, print also decimal point
			if(position == decimal_position) {
 800747e:	1dba      	adds	r2, r7, #6
 8007480:	1d7b      	adds	r3, r7, #5
 8007482:	7812      	ldrb	r2, [r2, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d119      	bne.n	80074be <max7219_PrintItos+0x12e>
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, true);
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	0013      	movs	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	189b      	adds	r3, r3, r2
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	001a      	movs	r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	0011      	movs	r1, r2
 800749a:	0018      	movs	r0, r3
 800749c:	f7ff f818 	bl	80064d0 <__aeabi_idivmod>
 80074a0:	000b      	movs	r3, r1
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	0018      	movs	r0, r3
 80074a6:	f7fe ff2d 	bl	8006304 <__divsi3>
 80074aa:	0003      	movs	r3, r0
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	1dbb      	adds	r3, r7, #6
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	1dfb      	adds	r3, r7, #7
 80074b4:	7818      	ldrb	r0, [r3, #0]
 80074b6:	2301      	movs	r3, #1
 80074b8:	f7ff feec 	bl	8007294 <max7219_PrintDigit>
 80074bc:	e018      	b.n	80074f0 <max7219_PrintItos+0x160>
			}
			else {
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, false);
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	0013      	movs	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	189b      	adds	r3, r3, r2
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	001a      	movs	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	0011      	movs	r1, r2
 80074ce:	0018      	movs	r0, r3
 80074d0:	f7fe fffe 	bl	80064d0 <__aeabi_idivmod>
 80074d4:	000b      	movs	r3, r1
 80074d6:	6979      	ldr	r1, [r7, #20]
 80074d8:	0018      	movs	r0, r3
 80074da:	f7fe ff13 	bl	8006304 <__divsi3>
 80074de:	0003      	movs	r3, r0
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	1dbb      	adds	r3, r7, #6
 80074e4:	7819      	ldrb	r1, [r3, #0]
 80074e6:	1dfb      	adds	r3, r7, #7
 80074e8:	7818      	ldrb	r0, [r3, #0]
 80074ea:	2300      	movs	r3, #0
 80074ec:	f7ff fed2 	bl	8007294 <max7219_PrintDigit>
			}
			position--;
 80074f0:	1dbb      	adds	r3, r7, #6
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	1dbb      	adds	r3, r7, #6
 80074f6:	3a01      	subs	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
		}

		i /= 10;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	210a      	movs	r1, #10
 80074fe:	0018      	movs	r0, r3
 8007500:	f7fe ff00 	bl	8006304 <__divsi3>
 8007504:	0003      	movs	r3, r0
 8007506:	617b      	str	r3, [r7, #20]
	while (i > 0)
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	dcb3      	bgt.n	8007476 <max7219_PrintItos+0xe6>

	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 800750e:	4b06      	ldr	r3, [pc, #24]	; (8007528 <max7219_PrintItos+0x198>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	0019      	movs	r1, r3
 8007514:	2009      	movs	r0, #9
 8007516:	f7ff fe59 	bl	80071cc <max7219_SendData>

	return position;
 800751a:	1dbb      	adds	r3, r7, #6
 800751c:	781b      	ldrb	r3, [r3, #0]
}
 800751e:	0018      	movs	r0, r3
 8007520:	46bd      	mov	sp, r7
 8007522:	b007      	add	sp, #28
 8007524:	bd90      	pop	{r4, r7, pc}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	2000024c 	.word	0x2000024c

0800752c <max7219_BlinkDigit>:
  * @param  ms: Blink delay in milliseconds
  * @param  decimal_position: place of decimal point
  * @retval None
  */

void max7219_BlinkDigit(MAX7219_Segments segment, int *valuePtr, uint8_t n, uint32_t ms, uint8_t decimal_position) {
 800752c:	b5b0      	push	{r4, r5, r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	0011      	movs	r1, r2
 8007536:	607b      	str	r3, [r7, #4]
 8007538:	240f      	movs	r4, #15
 800753a:	193b      	adds	r3, r7, r4
 800753c:	1c02      	adds	r2, r0, #0
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	200e      	movs	r0, #14
 8007542:	183b      	adds	r3, r7, r0
 8007544:	1c0a      	adds	r2, r1, #0
 8007546:	701a      	strb	r2, [r3, #0]
	uint32_t blinkDelay = ms; // Delay in milliseconds (adjust as needed)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	61fb      	str	r3, [r7, #28]
	uint16_t blinkDigit = n; // Digit to blink (0-3)
 800754c:	211a      	movs	r1, #26
 800754e:	187b      	adds	r3, r7, r1
 8007550:	183a      	adds	r2, r7, r0
 8007552:	7812      	ldrb	r2, [r2, #0]
 8007554:	801a      	strh	r2, [r3, #0]
	uint8_t digit;

	//Print the BLANK and also decimal point
	if (blinkDigit == decimal_position) {
 8007556:	2330      	movs	r3, #48	; 0x30
 8007558:	18fb      	adds	r3, r7, r3
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	187a      	adds	r2, r7, r1
 8007560:	8812      	ldrh	r2, [r2, #0]
 8007562:	429a      	cmp	r2, r3
 8007564:	d109      	bne.n	800757a <max7219_BlinkDigit+0x4e>
		max7219_PrintDigit(segment, blinkDigit, BLANK, true);
 8007566:	187b      	adds	r3, r7, r1
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b2d9      	uxtb	r1, r3
 800756c:	193b      	adds	r3, r7, r4
 800756e:	7818      	ldrb	r0, [r3, #0]
 8007570:	2301      	movs	r3, #1
 8007572:	220f      	movs	r2, #15
 8007574:	f7ff fe8e 	bl	8007294 <max7219_PrintDigit>
 8007578:	e00a      	b.n	8007590 <max7219_BlinkDigit+0x64>
	}
	//Print the BLANK without decimal point
	else {
		max7219_PrintDigit(segment, blinkDigit, BLANK, false);
 800757a:	231a      	movs	r3, #26
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b2d9      	uxtb	r1, r3
 8007582:	230f      	movs	r3, #15
 8007584:	18fb      	adds	r3, r7, r3
 8007586:	7818      	ldrb	r0, [r3, #0]
 8007588:	2300      	movs	r3, #0
 800758a:	220f      	movs	r2, #15
 800758c:	f7ff fe82 	bl	8007294 <max7219_PrintDigit>
	}

	//Delay
	uint32_t blinkTimer = HAL_GetTick() + blinkDelay;
 8007590:	f001 fada 	bl	8008b48 <HAL_GetTick>
 8007594:	0002      	movs	r2, r0
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	189b      	adds	r3, r3, r2
 800759a:	617b      	str	r3, [r7, #20]
	while (HAL_GetTick() < blinkTimer);
 800759c:	46c0      	nop			; (mov r8, r8)
 800759e:	f001 fad3 	bl	8008b48 <HAL_GetTick>
 80075a2:	0002      	movs	r2, r0
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d8f9      	bhi.n	800759e <max7219_BlinkDigit+0x72>

	// Get the specific digit value at n position
    digit = (*valuePtr / lcdPow10(blinkDigit-1)) % 10;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	001c      	movs	r4, r3
 80075b0:	251a      	movs	r5, #26
 80075b2:	197b      	adds	r3, r7, r5
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	0018      	movs	r0, r3
 80075be:	f000 f855 	bl	800766c <lcdPow10>
 80075c2:	0003      	movs	r3, r0
 80075c4:	0019      	movs	r1, r3
 80075c6:	0020      	movs	r0, r4
 80075c8:	f7fe fe12 	bl	80061f0 <__udivsi3>
 80075cc:	0003      	movs	r3, r0
 80075ce:	210a      	movs	r1, #10
 80075d0:	0018      	movs	r0, r3
 80075d2:	f7fe fe93 	bl	80062fc <__aeabi_uidivmod>
 80075d6:	000b      	movs	r3, r1
 80075d8:	001a      	movs	r2, r3
 80075da:	2013      	movs	r0, #19
 80075dc:	183b      	adds	r3, r7, r0
 80075de:	701a      	strb	r2, [r3, #0]

	//Print back the original digit and also decimal point
	if (blinkDigit == decimal_position) {
 80075e0:	2330      	movs	r3, #48	; 0x30
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	197a      	adds	r2, r7, r5
 80075ea:	8812      	ldrh	r2, [r2, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d10b      	bne.n	8007608 <max7219_BlinkDigit+0xdc>
		max7219_PrintDigit(segment, blinkDigit, digit, true);
 80075f0:	197b      	adds	r3, r7, r5
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b2d9      	uxtb	r1, r3
 80075f6:	183b      	adds	r3, r7, r0
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	230f      	movs	r3, #15
 80075fc:	18fb      	adds	r3, r7, r3
 80075fe:	7818      	ldrb	r0, [r3, #0]
 8007600:	2301      	movs	r3, #1
 8007602:	f7ff fe47 	bl	8007294 <max7219_PrintDigit>
 8007606:	e00c      	b.n	8007622 <max7219_BlinkDigit+0xf6>
	}
	//Print back the original digit without a decimal point
	else {
		max7219_PrintDigit(segment, blinkDigit, digit, false);
 8007608:	231a      	movs	r3, #26
 800760a:	18fb      	adds	r3, r7, r3
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b2d9      	uxtb	r1, r3
 8007610:	2313      	movs	r3, #19
 8007612:	18fb      	adds	r3, r7, r3
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	230f      	movs	r3, #15
 8007618:	18fb      	adds	r3, r7, r3
 800761a:	7818      	ldrb	r0, [r3, #0]
 800761c:	2300      	movs	r3, #0
 800761e:	f7ff fe39 	bl	8007294 <max7219_PrintDigit>
	}

	//Delay
	blinkTimer = HAL_GetTick() + blinkDelay;
 8007622:	f001 fa91 	bl	8008b48 <HAL_GetTick>
 8007626:	0002      	movs	r2, r0
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	189b      	adds	r3, r3, r2
 800762c:	617b      	str	r3, [r7, #20]
	while (HAL_GetTick() < blinkTimer);
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	f001 fa8a 	bl	8008b48 <HAL_GetTick>
 8007634:	0002      	movs	r2, r0
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	4293      	cmp	r3, r2
 800763a:	d8f9      	bhi.n	8007630 <max7219_BlinkDigit+0x104>
}
 800763c:	46c0      	nop			; (mov r8, r8)
 800763e:	46c0      	nop			; (mov r8, r8)
 8007640:	46bd      	mov	sp, r7
 8007642:	b008      	add	sp, #32
 8007644:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007648 <getSymbol>:

static uint16_t getSymbol(uint8_t number)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	0002      	movs	r2, r0
 8007650:	1dfb      	adds	r3, r7, #7
 8007652:	701a      	strb	r2, [r3, #0]
	return SYMBOLS[number];
 8007654:	1dfb      	adds	r3, r7, #7
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	4a03      	ldr	r2, [pc, #12]	; (8007668 <getSymbol+0x20>)
 800765a:	5cd3      	ldrb	r3, [r2, r3]
 800765c:	b29b      	uxth	r3, r3
}
 800765e:	0018      	movs	r0, r3
 8007660:	46bd      	mov	sp, r7
 8007662:	b002      	add	sp, #8
 8007664:	bd80      	pop	{r7, pc}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	2000001c 	.word	0x2000001c

0800766c <lcdPow10>:

static uint32_t lcdPow10(uint8_t n)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	0002      	movs	r2, r0
 8007674:	1dfb      	adds	r3, r7, #7
 8007676:	701a      	strb	r2, [r3, #0]
	uint32_t retval = 1u;
 8007678:	2301      	movs	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]

	while (n > 0u)
 800767c:	e00a      	b.n	8007694 <lcdPow10+0x28>
	{
		retval *= 10u;
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	0013      	movs	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	189b      	adds	r3, r3, r2
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	60fb      	str	r3, [r7, #12]
		n--;
 800768a:	1dfb      	adds	r3, r7, #7
 800768c:	781a      	ldrb	r2, [r3, #0]
 800768e:	1dfb      	adds	r3, r7, #7
 8007690:	3a01      	subs	r2, #1
 8007692:	701a      	strb	r2, [r3, #0]
	while (n > 0u)
 8007694:	1dfb      	adds	r3, r7, #7
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f0      	bne.n	800767e <lcdPow10+0x12>
	}

	return retval;
 800769c:	68fb      	ldr	r3, [r7, #12]
}
 800769e:	0018      	movs	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b004      	add	sp, #16
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	0002      	movs	r2, r0
 80076b0:	1dfb      	adds	r3, r7, #7
 80076b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80076b4:	1dfb      	adds	r3, r7, #7
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b7f      	cmp	r3, #127	; 0x7f
 80076ba:	d809      	bhi.n	80076d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076bc:	1dfb      	adds	r3, r7, #7
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	001a      	movs	r2, r3
 80076c2:	231f      	movs	r3, #31
 80076c4:	401a      	ands	r2, r3
 80076c6:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <__NVIC_EnableIRQ+0x30>)
 80076c8:	2101      	movs	r1, #1
 80076ca:	4091      	lsls	r1, r2
 80076cc:	000a      	movs	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80076d0:	46c0      	nop			; (mov r8, r8)
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	e000e100 	.word	0xe000e100

080076dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80076dc:	b590      	push	{r4, r7, lr}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	0002      	movs	r2, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	1dfb      	adds	r3, r7, #7
 80076e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80076ea:	1dfb      	adds	r3, r7, #7
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b7f      	cmp	r3, #127	; 0x7f
 80076f0:	d828      	bhi.n	8007744 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80076f2:	4a2f      	ldr	r2, [pc, #188]	; (80077b0 <__NVIC_SetPriority+0xd4>)
 80076f4:	1dfb      	adds	r3, r7, #7
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b25b      	sxtb	r3, r3
 80076fa:	089b      	lsrs	r3, r3, #2
 80076fc:	33c0      	adds	r3, #192	; 0xc0
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	589b      	ldr	r3, [r3, r2]
 8007702:	1dfa      	adds	r2, r7, #7
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	0011      	movs	r1, r2
 8007708:	2203      	movs	r2, #3
 800770a:	400a      	ands	r2, r1
 800770c:	00d2      	lsls	r2, r2, #3
 800770e:	21ff      	movs	r1, #255	; 0xff
 8007710:	4091      	lsls	r1, r2
 8007712:	000a      	movs	r2, r1
 8007714:	43d2      	mvns	r2, r2
 8007716:	401a      	ands	r2, r3
 8007718:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	019b      	lsls	r3, r3, #6
 800771e:	22ff      	movs	r2, #255	; 0xff
 8007720:	401a      	ands	r2, r3
 8007722:	1dfb      	adds	r3, r7, #7
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	0018      	movs	r0, r3
 8007728:	2303      	movs	r3, #3
 800772a:	4003      	ands	r3, r0
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007730:	481f      	ldr	r0, [pc, #124]	; (80077b0 <__NVIC_SetPriority+0xd4>)
 8007732:	1dfb      	adds	r3, r7, #7
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	b25b      	sxtb	r3, r3
 8007738:	089b      	lsrs	r3, r3, #2
 800773a:	430a      	orrs	r2, r1
 800773c:	33c0      	adds	r3, #192	; 0xc0
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007742:	e031      	b.n	80077a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007744:	4a1b      	ldr	r2, [pc, #108]	; (80077b4 <__NVIC_SetPriority+0xd8>)
 8007746:	1dfb      	adds	r3, r7, #7
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	0019      	movs	r1, r3
 800774c:	230f      	movs	r3, #15
 800774e:	400b      	ands	r3, r1
 8007750:	3b08      	subs	r3, #8
 8007752:	089b      	lsrs	r3, r3, #2
 8007754:	3306      	adds	r3, #6
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	18d3      	adds	r3, r2, r3
 800775a:	3304      	adds	r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	1dfa      	adds	r2, r7, #7
 8007760:	7812      	ldrb	r2, [r2, #0]
 8007762:	0011      	movs	r1, r2
 8007764:	2203      	movs	r2, #3
 8007766:	400a      	ands	r2, r1
 8007768:	00d2      	lsls	r2, r2, #3
 800776a:	21ff      	movs	r1, #255	; 0xff
 800776c:	4091      	lsls	r1, r2
 800776e:	000a      	movs	r2, r1
 8007770:	43d2      	mvns	r2, r2
 8007772:	401a      	ands	r2, r3
 8007774:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	019b      	lsls	r3, r3, #6
 800777a:	22ff      	movs	r2, #255	; 0xff
 800777c:	401a      	ands	r2, r3
 800777e:	1dfb      	adds	r3, r7, #7
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	0018      	movs	r0, r3
 8007784:	2303      	movs	r3, #3
 8007786:	4003      	ands	r3, r0
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800778c:	4809      	ldr	r0, [pc, #36]	; (80077b4 <__NVIC_SetPriority+0xd8>)
 800778e:	1dfb      	adds	r3, r7, #7
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	001c      	movs	r4, r3
 8007794:	230f      	movs	r3, #15
 8007796:	4023      	ands	r3, r4
 8007798:	3b08      	subs	r3, #8
 800779a:	089b      	lsrs	r3, r3, #2
 800779c:	430a      	orrs	r2, r1
 800779e:	3306      	adds	r3, #6
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	18c3      	adds	r3, r0, r3
 80077a4:	3304      	adds	r3, #4
 80077a6:	601a      	str	r2, [r3, #0]
}
 80077a8:	46c0      	nop			; (mov r8, r8)
 80077aa:	46bd      	mov	sp, r7
 80077ac:	b003      	add	sp, #12
 80077ae:	bd90      	pop	{r4, r7, pc}
 80077b0:	e000e100 	.word	0xe000e100
 80077b4:	e000ed00 	.word	0xe000ed00

080077b8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80077c8:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <LL_DMA_SetDataTransferDirection+0x44>)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	18d3      	adds	r3, r2, r3
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	001a      	movs	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	18d3      	adds	r3, r2, r3
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <LL_DMA_SetDataTransferDirection+0x48>)
 80077da:	4013      	ands	r3, r2
 80077dc:	0019      	movs	r1, r3
 80077de:	4a07      	ldr	r2, [pc, #28]	; (80077fc <LL_DMA_SetDataTransferDirection+0x44>)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	18d3      	adds	r3, r2, r3
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	001a      	movs	r2, r3
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	18d3      	adds	r3, r2, r3
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b006      	add	sp, #24
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	0801c354 	.word	0x0801c354
 8007800:	ffffbfef 	.word	0xffffbfef

08007804 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8007814:	4a0c      	ldr	r2, [pc, #48]	; (8007848 <LL_DMA_SetMode+0x44>)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	18d3      	adds	r3, r2, r3
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	001a      	movs	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	18d3      	adds	r3, r2, r3
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2220      	movs	r2, #32
 8007826:	4393      	bics	r3, r2
 8007828:	0019      	movs	r1, r3
 800782a:	4a07      	ldr	r2, [pc, #28]	; (8007848 <LL_DMA_SetMode+0x44>)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	18d3      	adds	r3, r2, r3
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	001a      	movs	r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	18d3      	adds	r3, r2, r3
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	430a      	orrs	r2, r1
 800783c:	601a      	str	r2, [r3, #0]
             Mode);
}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	46bd      	mov	sp, r7
 8007842:	b006      	add	sp, #24
 8007844:	bd80      	pop	{r7, pc}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	0801c354 	.word	0x0801c354

0800784c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 800785c:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <LL_DMA_SetPeriphIncMode+0x44>)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	18d3      	adds	r3, r2, r3
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	001a      	movs	r2, r3
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	18d3      	adds	r3, r2, r3
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2240      	movs	r2, #64	; 0x40
 800786e:	4393      	bics	r3, r2
 8007870:	0019      	movs	r1, r3
 8007872:	4a07      	ldr	r2, [pc, #28]	; (8007890 <LL_DMA_SetPeriphIncMode+0x44>)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	18d3      	adds	r3, r2, r3
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	001a      	movs	r2, r3
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	18d3      	adds	r3, r2, r3
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	430a      	orrs	r2, r1
 8007884:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	46bd      	mov	sp, r7
 800788a:	b006      	add	sp, #24
 800788c:	bd80      	pop	{r7, pc}
 800788e:	46c0      	nop			; (mov r8, r8)
 8007890:	0801c354 	.word	0x0801c354

08007894 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80078a4:	4a0c      	ldr	r2, [pc, #48]	; (80078d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	18d3      	adds	r3, r2, r3
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	001a      	movs	r2, r3
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	18d3      	adds	r3, r2, r3
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2280      	movs	r2, #128	; 0x80
 80078b6:	4393      	bics	r3, r2
 80078b8:	0019      	movs	r1, r3
 80078ba:	4a07      	ldr	r2, [pc, #28]	; (80078d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	18d3      	adds	r3, r2, r3
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	001a      	movs	r2, r3
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	18d3      	adds	r3, r2, r3
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b006      	add	sp, #24
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	0801c354 	.word	0x0801c354

080078dc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80078ec:	4a0c      	ldr	r2, [pc, #48]	; (8007920 <LL_DMA_SetPeriphSize+0x44>)
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	18d3      	adds	r3, r2, r3
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	001a      	movs	r2, r3
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	18d3      	adds	r3, r2, r3
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a09      	ldr	r2, [pc, #36]	; (8007924 <LL_DMA_SetPeriphSize+0x48>)
 80078fe:	4013      	ands	r3, r2
 8007900:	0019      	movs	r1, r3
 8007902:	4a07      	ldr	r2, [pc, #28]	; (8007920 <LL_DMA_SetPeriphSize+0x44>)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	18d3      	adds	r3, r2, r3
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	001a      	movs	r2, r3
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	18d3      	adds	r3, r2, r3
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	430a      	orrs	r2, r1
 8007914:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	46bd      	mov	sp, r7
 800791a:	b006      	add	sp, #24
 800791c:	bd80      	pop	{r7, pc}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	0801c354 	.word	0x0801c354
 8007924:	fffffcff 	.word	0xfffffcff

08007928 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8007938:	4a0c      	ldr	r2, [pc, #48]	; (800796c <LL_DMA_SetMemorySize+0x44>)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	18d3      	adds	r3, r2, r3
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	001a      	movs	r2, r3
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	18d3      	adds	r3, r2, r3
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a09      	ldr	r2, [pc, #36]	; (8007970 <LL_DMA_SetMemorySize+0x48>)
 800794a:	4013      	ands	r3, r2
 800794c:	0019      	movs	r1, r3
 800794e:	4a07      	ldr	r2, [pc, #28]	; (800796c <LL_DMA_SetMemorySize+0x44>)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	18d3      	adds	r3, r2, r3
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	001a      	movs	r2, r3
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	18d3      	adds	r3, r2, r3
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	430a      	orrs	r2, r1
 8007960:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	46bd      	mov	sp, r7
 8007966:	b006      	add	sp, #24
 8007968:	bd80      	pop	{r7, pc}
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	0801c354 	.word	0x0801c354
 8007970:	fffff3ff 	.word	0xfffff3ff

08007974 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8007984:	4a0c      	ldr	r2, [pc, #48]	; (80079b8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	18d3      	adds	r3, r2, r3
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	001a      	movs	r2, r3
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	18d3      	adds	r3, r2, r3
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a09      	ldr	r2, [pc, #36]	; (80079bc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8007996:	4013      	ands	r3, r2
 8007998:	0019      	movs	r1, r3
 800799a:	4a07      	ldr	r2, [pc, #28]	; (80079b8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	18d3      	adds	r3, r2, r3
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	001a      	movs	r2, r3
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	18d3      	adds	r3, r2, r3
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	601a      	str	r2, [r3, #0]
             Priority);
}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	46bd      	mov	sp, r7
 80079b2:	b006      	add	sp, #24
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	0801c354 	.word	0x0801c354
 80079bc:	ffffcfff 	.word	0xffffcfff

080079c0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	0a9b      	lsrs	r3, r3, #10
 80079d0:	4a0f      	ldr	r2, [pc, #60]	; (8007a10 <LL_DMA_SetPeriphRequest+0x50>)
 80079d2:	405a      	eors	r2, r3
 80079d4:	0013      	movs	r3, r2
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	18d3      	adds	r3, r2, r3
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4a0b      	ldr	r2, [pc, #44]	; (8007a14 <LL_DMA_SetPeriphRequest+0x54>)
 80079e6:	4694      	mov	ip, r2
 80079e8:	4463      	add	r3, ip
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	227f      	movs	r2, #127	; 0x7f
 80079ee:	4393      	bics	r3, r2
 80079f0:	0019      	movs	r1, r3
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	18d3      	adds	r3, r2, r3
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4a06      	ldr	r2, [pc, #24]	; (8007a14 <LL_DMA_SetPeriphRequest+0x54>)
 80079fc:	4694      	mov	ip, r2
 80079fe:	4463      	add	r3, ip
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	601a      	str	r2, [r3, #0]
}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	b006      	add	sp, #24
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	00100080 	.word	0x00100080
 8007a14:	40020800 	.word	0x40020800

08007a18 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2201      	movs	r2, #1
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	601a      	str	r2, [r3, #0]
}
 8007a2c:	46c0      	nop			; (mov r8, r8)
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b002      	add	sp, #8
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a03      	ldr	r2, [pc, #12]	; (8007a50 <LL_LPUART_DisableFIFO+0x1c>)
 8007a42:	401a      	ands	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
}
 8007a48:	46c0      	nop			; (mov r8, r8)
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b002      	add	sp, #8
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	dfffffff 	.word	0xdfffffff

08007a54 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a62:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a64:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	2301      	movs	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f383 8810 	msr	PRIMASK, r3
}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	08da      	lsrs	r2, r3, #3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	075b      	lsls	r3, r3, #29
 8007a80:	431a      	orrs	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	609a      	str	r2, [r3, #8]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f383 8810 	msr	PRIMASK, r3
}
 8007a90:	46c0      	nop			; (mov r8, r8)
}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b006      	add	sp, #24
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8007aac:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f383 8810 	msr	PRIMASK, r3
}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	4a08      	ldr	r2, [pc, #32]	; (8007ae4 <LL_LPUART_SetRXFIFOThreshold+0x48>)
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	065b      	lsls	r3, r3, #25
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	609a      	str	r2, [r3, #8]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f383 8810 	msr	PRIMASK, r3
}
 8007ad8:	46c0      	nop			; (mov r8, r8)
}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	46bd      	mov	sp, r7
 8007ade:	b006      	add	sp, #24
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	f1ffffff 	.word	0xf1ffffff

08007ae8 <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	69da      	ldr	r2, [r3, #28]
 8007af4:	2380      	movs	r3, #128	; 0x80
 8007af6:	039b      	lsls	r3, r3, #14
 8007af8:	401a      	ands	r2, r3
 8007afa:	2380      	movs	r3, #128	; 0x80
 8007afc:	039b      	lsls	r3, r3, #14
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d101      	bne.n	8007b06 <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	0018      	movs	r0, r3
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b002      	add	sp, #8
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69da      	ldr	r2, [r3, #28]
 8007b1c:	2380      	movs	r3, #128	; 0x80
 8007b1e:	03db      	lsls	r3, r3, #15
 8007b20:	401a      	ands	r2, r3
 8007b22:	2380      	movs	r3, #128	; 0x80
 8007b24:	03db      	lsls	r3, r3, #15
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d101      	bne.n	8007b2e <LL_LPUART_IsActiveFlag_REACK+0x1e>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <LL_LPUART_IsActiveFlag_REACK+0x20>
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	0018      	movs	r0, r3
 8007b32:	46bd      	mov	sp, r7
 8007b34:	b002      	add	sp, #8
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <LL_TIM_SetOnePulseMode>:
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2208      	movs	r2, #8
 8007b48:	4393      	bics	r3, r2
 8007b4a:	001a      	movs	r2, r3
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
}
 8007b54:	46c0      	nop			; (mov r8, r8)
 8007b56:	46bd      	mov	sp, r7
 8007b58:	b002      	add	sp, #8
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <LL_TIM_EnableARRPreload>:
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2280      	movs	r2, #128	; 0x80
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	601a      	str	r2, [r3, #0]
}
 8007b70:	46c0      	nop			; (mov r8, r8)
 8007b72:	46bd      	mov	sp, r7
 8007b74:	b002      	add	sp, #8
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <LL_TIM_SetTriggerOutput>:
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2270      	movs	r2, #112	; 0x70
 8007b88:	4393      	bics	r3, r2
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	605a      	str	r2, [r3, #4]
}
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	46bd      	mov	sp, r7
 8007b98:	b002      	add	sp, #8
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <LL_TIM_DisableMasterSlaveMode>:
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	2280      	movs	r2, #128	; 0x80
 8007baa:	4393      	bics	r3, r2
 8007bac:	001a      	movs	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	609a      	str	r2, [r3, #8]
}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	b002      	add	sp, #8
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8007bc4:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <LL_APB1_GRP1_EnableClock+0x28>)
 8007bc6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <LL_APB1_GRP1_EnableClock+0x28>)
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8007bd0:	4b04      	ldr	r3, [pc, #16]	; (8007be4 <LL_APB1_GRP1_EnableClock+0x28>)
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007bda:	68fb      	ldr	r3, [r7, #12]
}
 8007bdc:	46c0      	nop			; (mov r8, r8)
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b004      	add	sp, #16
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	40021000 	.word	0x40021000

08007be8 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <LL_IOP_GRP1_EnableClock+0x28>)
 8007bf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <LL_IOP_GRP1_EnableClock+0x28>)
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8007bfc:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <LL_IOP_GRP1_EnableClock+0x28>)
 8007bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	4013      	ands	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c06:	68fb      	ldr	r3, [r7, #12]
}
 8007c08:	46c0      	nop			; (mov r8, r8)
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b004      	add	sp, #16
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	40021000 	.word	0x40021000

08007c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c18:	f000 ff64 	bl	8008ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c1c:	f000 f83c 	bl	8007c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c20:	f000 fb96 	bl	8008350 <MX_GPIO_Init>
  MX_DMA_Init();
 8007c24:	f000 fb70 	bl	8008308 <MX_DMA_Init>
  MX_UCPD1_Init();
 8007c28:	f000 fac8 	bl	80081bc <MX_UCPD1_Init>
  MX_ADC1_Init();
 8007c2c:	f000 f892 	bl	8007d54 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8007c30:	f000 f902 	bl	8007e38 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8007c34:	f000 fa20 	bl	8008078 <MX_TIM2_Init>
  MX_SPI1_Init();
 8007c38:	f000 f9e0 	bl	8007ffc <MX_SPI1_Init>
  MX_TIM7_Init();
 8007c3c:	f000 fa80 	bl	8008140 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8007c40:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <main+0x6c>)
 8007c42:	213c      	movs	r1, #60	; 0x3c
 8007c44:	0018      	movs	r0, r3
 8007c46:	f004 f837 	bl	800bcb8 <HAL_TIM_Encoder_Start_IT>
  app_init();
 8007c4a:	f7fe fd91 	bl	8006770 <app_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8007c4e:	f008 f9cf 	bl	800fff0 <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8007c52:	f00a ffa7 	bl	8012ba4 <MX_USBPD_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8007c56:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <main+0x70>)
 8007c58:	001a      	movs	r2, r3
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	2010      	movs	r0, #16
 8007c5e:	f008 fb11 	bl	8010284 <osMessageQueueNew>
 8007c62:	0002      	movs	r2, r0
 8007c64:	4b08      	ldr	r3, [pc, #32]	; (8007c88 <main+0x74>)
 8007c66:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007c68:	4a08      	ldr	r2, [pc, #32]	; (8007c8c <main+0x78>)
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <main+0x7c>)
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f008 fa06 	bl	8010080 <osThreadNew>
 8007c74:	0002      	movs	r2, r0
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <main+0x80>)
 8007c78:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8007c7a:	f008 f9db 	bl	8010034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007c7e:	e7fe      	b.n	8007c7e <main+0x6a>
 8007c80:	20000318 	.word	0x20000318
 8007c84:	0801c380 	.word	0x0801c380
 8007c88:	20000368 	.word	0x20000368
 8007c8c:	0801c35c 	.word	0x0801c35c
 8007c90:	08008579 	.word	0x08008579
 8007c94:	20000364 	.word	0x20000364

08007c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c98:	b590      	push	{r4, r7, lr}
 8007c9a:	b095      	sub	sp, #84	; 0x54
 8007c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c9e:	2414      	movs	r4, #20
 8007ca0:	193b      	adds	r3, r7, r4
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	233c      	movs	r3, #60	; 0x3c
 8007ca6:	001a      	movs	r2, r3
 8007ca8:	2100      	movs	r1, #0
 8007caa:	f012 ff55 	bl	801ab58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	2310      	movs	r3, #16
 8007cb4:	001a      	movs	r2, r3
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	f012 ff4e 	bl	801ab58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007cbc:	2380      	movs	r3, #128	; 0x80
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f002 fb45 	bl	800a350 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007cc6:	193b      	adds	r3, r7, r4
 8007cc8:	2202      	movs	r2, #2
 8007cca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ccc:	193b      	adds	r3, r7, r4
 8007cce:	2280      	movs	r2, #128	; 0x80
 8007cd0:	0052      	lsls	r2, r2, #1
 8007cd2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8007cd4:	0021      	movs	r1, r4
 8007cd6:	187b      	adds	r3, r7, r1
 8007cd8:	2200      	movs	r2, #0
 8007cda:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007cdc:	187b      	adds	r3, r7, r1
 8007cde:	2240      	movs	r2, #64	; 0x40
 8007ce0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ce2:	187b      	adds	r3, r7, r1
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007ce8:	187b      	adds	r3, r7, r1
 8007cea:	2202      	movs	r2, #2
 8007cec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8007cee:	187b      	adds	r3, r7, r1
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8007cf4:	187b      	adds	r3, r7, r1
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007cfa:	187b      	adds	r3, r7, r1
 8007cfc:	2280      	movs	r2, #128	; 0x80
 8007cfe:	0292      	lsls	r2, r2, #10
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007d02:	187b      	adds	r3, r7, r1
 8007d04:	2280      	movs	r2, #128	; 0x80
 8007d06:	0492      	lsls	r2, r2, #18
 8007d08:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007d0a:	187b      	adds	r3, r7, r1
 8007d0c:	2280      	movs	r2, #128	; 0x80
 8007d0e:	0592      	lsls	r2, r2, #22
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d12:	187b      	adds	r3, r7, r1
 8007d14:	0018      	movs	r0, r3
 8007d16:	f002 fb67 	bl	800a3e8 <HAL_RCC_OscConfig>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d001      	beq.n	8007d22 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8007d1e:	f000 fc4b 	bl	80085b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d22:	1d3b      	adds	r3, r7, #4
 8007d24:	2207      	movs	r2, #7
 8007d26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d28:	1d3b      	adds	r3, r7, #4
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d2e:	1d3b      	adds	r3, r7, #4
 8007d30:	2200      	movs	r2, #0
 8007d32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007d34:	1d3b      	adds	r3, r7, #4
 8007d36:	2200      	movs	r2, #0
 8007d38:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007d3a:	1d3b      	adds	r3, r7, #4
 8007d3c:	2102      	movs	r1, #2
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f002 feb2 	bl	800aaa8 <HAL_RCC_ClockConfig>
 8007d44:	1e03      	subs	r3, r0, #0
 8007d46:	d001      	beq.n	8007d4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8007d48:	f000 fc36 	bl	80085b8 <Error_Handler>
  }
}
 8007d4c:	46c0      	nop			; (mov r8, r8)
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	b015      	add	sp, #84	; 0x54
 8007d52:	bd90      	pop	{r4, r7, pc}

08007d54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007d5a:	1d3b      	adds	r3, r7, #4
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	230c      	movs	r3, #12
 8007d60:	001a      	movs	r2, r3
 8007d62:	2100      	movs	r1, #0
 8007d64:	f012 fef8 	bl	801ab58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007d68:	4b30      	ldr	r3, [pc, #192]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007d6a:	4a31      	ldr	r2, [pc, #196]	; (8007e30 <MX_ADC1_Init+0xdc>)
 8007d6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007d6e:	4b2f      	ldr	r3, [pc, #188]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007d70:	2280      	movs	r2, #128	; 0x80
 8007d72:	0612      	lsls	r2, r2, #24
 8007d74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007d76:	4b2d      	ldr	r3, [pc, #180]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d7c:	4b2b      	ldr	r3, [pc, #172]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007d82:	4b2a      	ldr	r3, [pc, #168]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007d88:	4b28      	ldr	r3, [pc, #160]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007d8e:	4b27      	ldr	r3, [pc, #156]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8007d94:	4b25      	ldr	r3, [pc, #148]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007d9a:	4b24      	ldr	r3, [pc, #144]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8007da0:	4b22      	ldr	r3, [pc, #136]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007da6:	4b21      	ldr	r3, [pc, #132]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007dac:	4b1f      	ldr	r3, [pc, #124]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007db2:	4b1e      	ldr	r3, [pc, #120]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007db4:	222c      	movs	r2, #44	; 0x2c
 8007db6:	2100      	movs	r1, #0
 8007db8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007dba:	4b1c      	ldr	r3, [pc, #112]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007dbc:	2280      	movs	r2, #128	; 0x80
 8007dbe:	0152      	lsls	r2, r2, #5
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8007dc2:	4b1a      	ldr	r3, [pc, #104]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007dc4:	2207      	movs	r2, #7
 8007dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8007dc8:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007dca:	2207      	movs	r2, #7
 8007dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8007dce:	4b17      	ldr	r3, [pc, #92]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007dd0:	223c      	movs	r2, #60	; 0x3c
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8007dd6:	4b15      	ldr	r3, [pc, #84]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007ddc:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007dde:	0018      	movs	r0, r3
 8007de0:	f001 f83c 	bl	8008e5c <HAL_ADC_Init>
 8007de4:	1e03      	subs	r3, r0, #0
 8007de6:	d001      	beq.n	8007dec <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007de8:	f000 fbe6 	bl	80085b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007dec:	1d3b      	adds	r3, r7, #4
 8007dee:	4a11      	ldr	r2, [pc, #68]	; (8007e34 <MX_ADC1_Init+0xe0>)
 8007df0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007df2:	1d3b      	adds	r3, r7, #4
 8007df4:	2200      	movs	r2, #0
 8007df6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8007df8:	1d3b      	adds	r3, r7, #4
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dfe:	1d3a      	adds	r2, r7, #4
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007e02:	0011      	movs	r1, r2
 8007e04:	0018      	movs	r0, r3
 8007e06:	f001 fa1f 	bl	8009248 <HAL_ADC_ConfigChannel>
 8007e0a:	1e03      	subs	r3, r0, #0
 8007e0c:	d001      	beq.n	8007e12 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8007e0e:	f000 fbd3 	bl	80085b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8007e12:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007e14:	0018      	movs	r0, r3
 8007e16:	f001 fd6b 	bl	80098f0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8007e1a:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <MX_ADC1_Init+0xd8>)
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	f001 f9c5 	bl	80091ac <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	46bd      	mov	sp, r7
 8007e26:	b004      	add	sp, #16
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	20000250 	.word	0x20000250
 8007e30:	40012400 	.word	0x40012400
 8007e34:	24000200 	.word	0x24000200

08007e38 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8007e38:	b590      	push	{r4, r7, lr}
 8007e3a:	b0a1      	sub	sp, #132	; 0x84
 8007e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8007e3e:	2364      	movs	r3, #100	; 0x64
 8007e40:	18fb      	adds	r3, r7, r3
 8007e42:	0018      	movs	r0, r3
 8007e44:	231c      	movs	r3, #28
 8007e46:	001a      	movs	r2, r3
 8007e48:	2100      	movs	r1, #0
 8007e4a:	f012 fe85 	bl	801ab58 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e4e:	234c      	movs	r3, #76	; 0x4c
 8007e50:	18fb      	adds	r3, r7, r3
 8007e52:	0018      	movs	r0, r3
 8007e54:	2318      	movs	r3, #24
 8007e56:	001a      	movs	r2, r3
 8007e58:	2100      	movs	r1, #0
 8007e5a:	f012 fe7d 	bl	801ab58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e5e:	003b      	movs	r3, r7
 8007e60:	0018      	movs	r0, r3
 8007e62:	234c      	movs	r3, #76	; 0x4c
 8007e64:	001a      	movs	r2, r3
 8007e66:	2100      	movs	r1, #0
 8007e68:	f012 fe76 	bl	801ab58 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007e6c:	003b      	movs	r3, r7
 8007e6e:	2210      	movs	r2, #16
 8007e70:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007e72:	003b      	movs	r3, r7
 8007e74:	2200      	movs	r2, #0
 8007e76:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e78:	003b      	movs	r3, r7
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f002 ffe8 	bl	800ae50 <HAL_RCCEx_PeriphCLKConfig>
 8007e80:	1e03      	subs	r3, r0, #0
 8007e82:	d001      	beq.n	8007e88 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8007e84:	f000 fb98 	bl	80085b8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPUART1);
 8007e88:	2380      	movs	r3, #128	; 0x80
 8007e8a:	035b      	lsls	r3, r3, #13
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f7ff fe95 	bl	8007bbc <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8007e92:	2001      	movs	r0, #1
 8007e94:	f7ff fea8 	bl	8007be8 <LL_IOP_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8007e98:	244c      	movs	r4, #76	; 0x4c
 8007e9a:	193b      	adds	r3, r7, r4
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007ea0:	193b      	adds	r3, r7, r4
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007ea6:	193b      	adds	r3, r7, r4
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007eac:	193b      	adds	r3, r7, r4
 8007eae:	2200      	movs	r2, #0
 8007eb0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007eb2:	193b      	adds	r3, r7, r4
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8007eb8:	193b      	adds	r3, r7, r4
 8007eba:	2206      	movs	r2, #6
 8007ebc:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ebe:	193a      	adds	r2, r7, r4
 8007ec0:	23a0      	movs	r3, #160	; 0xa0
 8007ec2:	05db      	lsls	r3, r3, #23
 8007ec4:	0011      	movs	r1, r2
 8007ec6:	0018      	movs	r0, r3
 8007ec8:	f004 fbf2 	bl	800c6b0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8007ecc:	0021      	movs	r1, r4
 8007ece:	187b      	adds	r3, r7, r1
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007ed4:	187b      	adds	r3, r7, r1
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007eda:	187b      	adds	r3, r7, r1
 8007edc:	2200      	movs	r2, #0
 8007ede:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ee0:	187b      	adds	r3, r7, r1
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ee6:	187b      	adds	r3, r7, r1
 8007ee8:	2200      	movs	r2, #0
 8007eea:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8007eec:	187b      	adds	r3, r7, r1
 8007eee:	2206      	movs	r2, #6
 8007ef0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ef2:	187a      	adds	r2, r7, r1
 8007ef4:	23a0      	movs	r3, #160	; 0xa0
 8007ef6:	05db      	lsls	r3, r3, #23
 8007ef8:	0011      	movs	r1, r2
 8007efa:	0018      	movs	r0, r3
 8007efc:	f004 fbd8 	bl	800c6b0 <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_LPUART1_TX);
 8007f00:	4b3c      	ldr	r3, [pc, #240]	; (8007ff4 <MX_LPUART1_UART_Init+0x1bc>)
 8007f02:	220f      	movs	r2, #15
 8007f04:	2102      	movs	r1, #2
 8007f06:	0018      	movs	r0, r3
 8007f08:	f7ff fd5a 	bl	80079c0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8007f0c:	4b39      	ldr	r3, [pc, #228]	; (8007ff4 <MX_LPUART1_UART_Init+0x1bc>)
 8007f0e:	2210      	movs	r2, #16
 8007f10:	2102      	movs	r1, #2
 8007f12:	0018      	movs	r0, r3
 8007f14:	f7ff fc50 	bl	80077b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8007f18:	4b36      	ldr	r3, [pc, #216]	; (8007ff4 <MX_LPUART1_UART_Init+0x1bc>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2102      	movs	r1, #2
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f7ff fd28 	bl	8007974 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8007f24:	4b33      	ldr	r3, [pc, #204]	; (8007ff4 <MX_LPUART1_UART_Init+0x1bc>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	2102      	movs	r1, #2
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f7ff fc6a 	bl	8007804 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8007f30:	4b30      	ldr	r3, [pc, #192]	; (8007ff4 <MX_LPUART1_UART_Init+0x1bc>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	2102      	movs	r1, #2
 8007f36:	0018      	movs	r0, r3
 8007f38:	f7ff fc88 	bl	800784c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8007f3c:	4b2d      	ldr	r3, [pc, #180]	; (8007ff4 <MX_LPUART1_UART_Init+0x1bc>)
 8007f3e:	2280      	movs	r2, #128	; 0x80
 8007f40:	2102      	movs	r1, #2
 8007f42:	0018      	movs	r0, r3
 8007f44:	f7ff fca6 	bl	8007894 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8007f48:	4b2a      	ldr	r3, [pc, #168]	; (8007ff4 <MX_LPUART1_UART_Init+0x1bc>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f7ff fcc4 	bl	80078dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8007f54:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <MX_LPUART1_UART_Init+0x1bc>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	2102      	movs	r1, #2
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f7ff fce4 	bl	8007928 <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 3);
 8007f60:	2103      	movs	r1, #3
 8007f62:	201d      	movs	r0, #29
 8007f64:	f7ff fbba 	bl	80076dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8007f68:	201d      	movs	r0, #29
 8007f6a:	f7ff fb9d 	bl	80076a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 8007f6e:	2164      	movs	r1, #100	; 0x64
 8007f70:	187b      	adds	r3, r7, r1
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
  LPUART_InitStruct.BaudRate = 921600;
 8007f76:	187b      	adds	r3, r7, r1
 8007f78:	22e1      	movs	r2, #225	; 0xe1
 8007f7a:	0312      	lsls	r2, r2, #12
 8007f7c:	605a      	str	r2, [r3, #4]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_7B;
 8007f7e:	187b      	adds	r3, r7, r1
 8007f80:	2280      	movs	r2, #128	; 0x80
 8007f82:	0552      	lsls	r2, r2, #21
 8007f84:	609a      	str	r2, [r3, #8]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8007f86:	187b      	adds	r3, r7, r1
 8007f88:	2200      	movs	r2, #0
 8007f8a:	60da      	str	r2, [r3, #12]
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8007f8c:	187b      	adds	r3, r7, r1
 8007f8e:	2200      	movs	r2, #0
 8007f90:	611a      	str	r2, [r3, #16]
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8007f92:	187b      	adds	r3, r7, r1
 8007f94:	220c      	movs	r2, #12
 8007f96:	615a      	str	r2, [r3, #20]
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8007f98:	187b      	adds	r3, r7, r1
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	619a      	str	r2, [r3, #24]
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8007f9e:	187b      	adds	r3, r7, r1
 8007fa0:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <MX_LPUART1_UART_Init+0x1c0>)
 8007fa2:	0019      	movs	r1, r3
 8007fa4:	0010      	movs	r0, r2
 8007fa6:	f004 fc6b 	bl	800c880 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8007faa:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <MX_LPUART1_UART_Init+0x1c0>)
 8007fac:	2100      	movs	r1, #0
 8007fae:	0018      	movs	r0, r3
 8007fb0:	f7ff fd50 	bl	8007a54 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8007fb4:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <MX_LPUART1_UART_Init+0x1c0>)
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f7ff fd6f 	bl	8007a9c <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <MX_LPUART1_UART_Init+0x1c0>)
 8007fc0:	0018      	movs	r0, r3
 8007fc2:	f7ff fd37 	bl	8007a34 <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <MX_LPUART1_UART_Init+0x1c0>)
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f7ff fd25 	bl	8007a18 <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 8007fce:	46c0      	nop			; (mov r8, r8)
 8007fd0:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <MX_LPUART1_UART_Init+0x1c0>)
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	f7ff fd88 	bl	8007ae8 <LL_LPUART_IsActiveFlag_TEACK>
 8007fd8:	1e03      	subs	r3, r0, #0
 8007fda:	d0f9      	beq.n	8007fd0 <MX_LPUART1_UART_Init+0x198>
 8007fdc:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <MX_LPUART1_UART_Init+0x1c0>)
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f7ff fd96 	bl	8007b10 <LL_LPUART_IsActiveFlag_REACK>
 8007fe4:	1e03      	subs	r3, r0, #0
 8007fe6:	d0f3      	beq.n	8007fd0 <MX_LPUART1_UART_Init+0x198>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007fe8:	46c0      	nop			; (mov r8, r8)
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b021      	add	sp, #132	; 0x84
 8007ff0:	bd90      	pop	{r4, r7, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	40020000 	.word	0x40020000
 8007ff8:	40008000 	.word	0x40008000

08007ffc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008000:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <MX_SPI1_Init+0x74>)
 8008002:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <MX_SPI1_Init+0x78>)
 8008004:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <MX_SPI1_Init+0x74>)
 8008008:	2282      	movs	r2, #130	; 0x82
 800800a:	0052      	lsls	r2, r2, #1
 800800c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800800e:	4b18      	ldr	r3, [pc, #96]	; (8008070 <MX_SPI1_Init+0x74>)
 8008010:	2200      	movs	r2, #0
 8008012:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008014:	4b16      	ldr	r3, [pc, #88]	; (8008070 <MX_SPI1_Init+0x74>)
 8008016:	22e0      	movs	r2, #224	; 0xe0
 8008018:	00d2      	lsls	r2, r2, #3
 800801a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800801c:	4b14      	ldr	r3, [pc, #80]	; (8008070 <MX_SPI1_Init+0x74>)
 800801e:	2200      	movs	r2, #0
 8008020:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008022:	4b13      	ldr	r3, [pc, #76]	; (8008070 <MX_SPI1_Init+0x74>)
 8008024:	2200      	movs	r2, #0
 8008026:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008028:	4b11      	ldr	r3, [pc, #68]	; (8008070 <MX_SPI1_Init+0x74>)
 800802a:	2280      	movs	r2, #128	; 0x80
 800802c:	0092      	lsls	r2, r2, #2
 800802e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <MX_SPI1_Init+0x74>)
 8008032:	2210      	movs	r2, #16
 8008034:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008036:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <MX_SPI1_Init+0x74>)
 8008038:	2200      	movs	r2, #0
 800803a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <MX_SPI1_Init+0x74>)
 800803e:	2200      	movs	r2, #0
 8008040:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <MX_SPI1_Init+0x74>)
 8008044:	2200      	movs	r2, #0
 8008046:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008048:	4b09      	ldr	r3, [pc, #36]	; (8008070 <MX_SPI1_Init+0x74>)
 800804a:	2207      	movs	r2, #7
 800804c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800804e:	4b08      	ldr	r3, [pc, #32]	; (8008070 <MX_SPI1_Init+0x74>)
 8008050:	2200      	movs	r2, #0
 8008052:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <MX_SPI1_Init+0x74>)
 8008056:	2208      	movs	r2, #8
 8008058:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <MX_SPI1_Init+0x74>)
 800805c:	0018      	movs	r0, r3
 800805e:	f003 f933 	bl	800b2c8 <HAL_SPI_Init>
 8008062:	1e03      	subs	r3, r0, #0
 8008064:	d001      	beq.n	800806a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008066:	f000 faa7 	bl	80085b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	200002b4 	.word	0x200002b4
 8008074:	40013000 	.word	0x40013000

08008078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008078:	b590      	push	{r4, r7, lr}
 800807a:	b08d      	sub	sp, #52	; 0x34
 800807c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800807e:	240c      	movs	r4, #12
 8008080:	193b      	adds	r3, r7, r4
 8008082:	0018      	movs	r0, r3
 8008084:	2324      	movs	r3, #36	; 0x24
 8008086:	001a      	movs	r2, r3
 8008088:	2100      	movs	r1, #0
 800808a:	f012 fd65 	bl	801ab58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800808e:	003b      	movs	r3, r7
 8008090:	0018      	movs	r0, r3
 8008092:	230c      	movs	r3, #12
 8008094:	001a      	movs	r2, r3
 8008096:	2100      	movs	r1, #0
 8008098:	f012 fd5e 	bl	801ab58 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800809c:	4b26      	ldr	r3, [pc, #152]	; (8008138 <MX_TIM2_Init+0xc0>)
 800809e:	2280      	movs	r2, #128	; 0x80
 80080a0:	05d2      	lsls	r2, r2, #23
 80080a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80080a4:	4b24      	ldr	r3, [pc, #144]	; (8008138 <MX_TIM2_Init+0xc0>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080aa:	4b23      	ldr	r3, [pc, #140]	; (8008138 <MX_TIM2_Init+0xc0>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80080b0:	4b21      	ldr	r3, [pc, #132]	; (8008138 <MX_TIM2_Init+0xc0>)
 80080b2:	4a22      	ldr	r2, [pc, #136]	; (800813c <MX_TIM2_Init+0xc4>)
 80080b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080b6:	4b20      	ldr	r3, [pc, #128]	; (8008138 <MX_TIM2_Init+0xc0>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80080bc:	4b1e      	ldr	r3, [pc, #120]	; (8008138 <MX_TIM2_Init+0xc0>)
 80080be:	2280      	movs	r2, #128	; 0x80
 80080c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80080c2:	0021      	movs	r1, r4
 80080c4:	187b      	adds	r3, r7, r1
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80080ca:	187b      	adds	r3, r7, r1
 80080cc:	2200      	movs	r2, #0
 80080ce:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80080d0:	187b      	adds	r3, r7, r1
 80080d2:	2201      	movs	r2, #1
 80080d4:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80080d6:	187b      	adds	r3, r7, r1
 80080d8:	2200      	movs	r2, #0
 80080da:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 12;
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	220c      	movs	r2, #12
 80080e0:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80080e2:	187b      	adds	r3, r7, r1
 80080e4:	2200      	movs	r2, #0
 80080e6:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80080e8:	187b      	adds	r3, r7, r1
 80080ea:	2201      	movs	r2, #1
 80080ec:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80080ee:	187b      	adds	r3, r7, r1
 80080f0:	2200      	movs	r2, #0
 80080f2:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 12;
 80080f4:	187b      	adds	r3, r7, r1
 80080f6:	220c      	movs	r2, #12
 80080f8:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80080fa:	187a      	adds	r2, r7, r1
 80080fc:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <MX_TIM2_Init+0xc0>)
 80080fe:	0011      	movs	r1, r2
 8008100:	0018      	movs	r0, r3
 8008102:	f003 fd31 	bl	800bb68 <HAL_TIM_Encoder_Init>
 8008106:	1e03      	subs	r3, r0, #0
 8008108:	d001      	beq.n	800810e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800810a:	f000 fa55 	bl	80085b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800810e:	003b      	movs	r3, r7
 8008110:	2200      	movs	r2, #0
 8008112:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008114:	003b      	movs	r3, r7
 8008116:	2200      	movs	r2, #0
 8008118:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800811a:	003a      	movs	r2, r7
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <MX_TIM2_Init+0xc0>)
 800811e:	0011      	movs	r1, r2
 8008120:	0018      	movs	r0, r3
 8008122:	f004 f871 	bl	800c208 <HAL_TIMEx_MasterConfigSynchronization>
 8008126:	1e03      	subs	r3, r0, #0
 8008128:	d001      	beq.n	800812e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800812a:	f000 fa45 	bl	80085b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800812e:	46c0      	nop			; (mov r8, r8)
 8008130:	46bd      	mov	sp, r7
 8008132:	b00d      	add	sp, #52	; 0x34
 8008134:	bd90      	pop	{r4, r7, pc}
 8008136:	46c0      	nop			; (mov r8, r8)
 8008138:	20000318 	.word	0x20000318
 800813c:	0000ffff 	.word	0x0000ffff

08008140 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8008146:	1d3b      	adds	r3, r7, #4
 8008148:	0018      	movs	r0, r3
 800814a:	2314      	movs	r3, #20
 800814c:	001a      	movs	r2, r3
 800814e:	2100      	movs	r1, #0
 8008150:	f012 fd02 	bl	801ab58 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8008154:	2020      	movs	r0, #32
 8008156:	f7ff fd31 	bl	8007bbc <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_LPTIM2_IRQn, 3);
 800815a:	2103      	movs	r1, #3
 800815c:	2012      	movs	r0, #18
 800815e:	f7ff fabd 	bl	80076dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8008162:	2012      	movs	r0, #18
 8008164:	f7ff faa0 	bl	80076a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 63999;
 8008168:	1d3b      	adds	r3, r7, #4
 800816a:	4a12      	ldr	r2, [pc, #72]	; (80081b4 <MX_TIM7_Init+0x74>)
 800816c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	2200      	movs	r2, #0
 8008172:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 200;
 8008174:	1d3b      	adds	r3, r7, #4
 8008176:	22c8      	movs	r2, #200	; 0xc8
 8008178:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800817a:	1d3b      	adds	r3, r7, #4
 800817c:	4a0e      	ldr	r2, [pc, #56]	; (80081b8 <MX_TIM7_Init+0x78>)
 800817e:	0019      	movs	r1, r3
 8008180:	0010      	movs	r0, r2
 8008182:	f004 fdcf 	bl	800cd24 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8008186:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <MX_TIM7_Init+0x78>)
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff fce7 	bl	8007b5c <LL_TIM_EnableARRPreload>
  LL_TIM_SetOnePulseMode(TIM7, LL_TIM_ONEPULSEMODE_SINGLE);
 800818e:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <MX_TIM7_Init+0x78>)
 8008190:	2108      	movs	r1, #8
 8008192:	0018      	movs	r0, r3
 8008194:	f7ff fcd0 	bl	8007b38 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8008198:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <MX_TIM7_Init+0x78>)
 800819a:	2100      	movs	r1, #0
 800819c:	0018      	movs	r0, r3
 800819e:	f7ff fceb 	bl	8007b78 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <MX_TIM7_Init+0x78>)
 80081a4:	0018      	movs	r0, r3
 80081a6:	f7ff fcf9 	bl	8007b9c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b006      	add	sp, #24
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	fffff9ff 	.word	0xfffff9ff
 80081b8:	40001400 	.word	0x40001400

080081bc <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c2:	003b      	movs	r3, r7
 80081c4:	0018      	movs	r0, r3
 80081c6:	2318      	movs	r3, #24
 80081c8:	001a      	movs	r2, r3
 80081ca:	2100      	movs	r1, #0
 80081cc:	f012 fcc4 	bl	801ab58 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 80081d0:	2380      	movs	r3, #128	; 0x80
 80081d2:	049b      	lsls	r3, r3, #18
 80081d4:	0018      	movs	r0, r3
 80081d6:	f7ff fcf1 	bl	8007bbc <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80081da:	2002      	movs	r0, #2
 80081dc:	f7ff fd04 	bl	8007be8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80081e0:	2001      	movs	r0, #1
 80081e2:	f7ff fd01 	bl	8007be8 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80081e6:	003b      	movs	r3, r7
 80081e8:	2280      	movs	r2, #128	; 0x80
 80081ea:	0212      	lsls	r2, r2, #8
 80081ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80081ee:	003b      	movs	r3, r7
 80081f0:	2203      	movs	r2, #3
 80081f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80081f4:	003b      	movs	r3, r7
 80081f6:	2200      	movs	r2, #0
 80081f8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081fa:	003b      	movs	r3, r7
 80081fc:	4a40      	ldr	r2, [pc, #256]	; (8008300 <MX_UCPD1_Init+0x144>)
 80081fe:	0019      	movs	r1, r3
 8008200:	0010      	movs	r0, r2
 8008202:	f004 fa55 	bl	800c6b0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8008206:	003b      	movs	r3, r7
 8008208:	2280      	movs	r2, #128	; 0x80
 800820a:	0052      	lsls	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800820e:	003b      	movs	r3, r7
 8008210:	2203      	movs	r2, #3
 8008212:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008214:	003b      	movs	r3, r7
 8008216:	2200      	movs	r2, #0
 8008218:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800821a:	003a      	movs	r2, r7
 800821c:	23a0      	movs	r3, #160	; 0xa0
 800821e:	05db      	lsls	r3, r3, #23
 8008220:	0011      	movs	r1, r2
 8008222:	0018      	movs	r0, r3
 8008224:	f004 fa44 	bl	800c6b0 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8008228:	4b36      	ldr	r3, [pc, #216]	; (8008304 <MX_UCPD1_Init+0x148>)
 800822a:	223a      	movs	r2, #58	; 0x3a
 800822c:	2100      	movs	r1, #0
 800822e:	0018      	movs	r0, r3
 8008230:	f7ff fbc6 	bl	80079c0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8008234:	4b33      	ldr	r3, [pc, #204]	; (8008304 <MX_UCPD1_Init+0x148>)
 8008236:	2200      	movs	r2, #0
 8008238:	2100      	movs	r1, #0
 800823a:	0018      	movs	r0, r3
 800823c:	f7ff fabc 	bl	80077b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8008240:	4b30      	ldr	r3, [pc, #192]	; (8008304 <MX_UCPD1_Init+0x148>)
 8008242:	2200      	movs	r2, #0
 8008244:	2100      	movs	r1, #0
 8008246:	0018      	movs	r0, r3
 8008248:	f7ff fb94 	bl	8007974 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 800824c:	4b2d      	ldr	r3, [pc, #180]	; (8008304 <MX_UCPD1_Init+0x148>)
 800824e:	2200      	movs	r2, #0
 8008250:	2100      	movs	r1, #0
 8008252:	0018      	movs	r0, r3
 8008254:	f7ff fad6 	bl	8007804 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8008258:	4b2a      	ldr	r3, [pc, #168]	; (8008304 <MX_UCPD1_Init+0x148>)
 800825a:	2200      	movs	r2, #0
 800825c:	2100      	movs	r1, #0
 800825e:	0018      	movs	r0, r3
 8008260:	f7ff faf4 	bl	800784c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8008264:	4b27      	ldr	r3, [pc, #156]	; (8008304 <MX_UCPD1_Init+0x148>)
 8008266:	2280      	movs	r2, #128	; 0x80
 8008268:	2100      	movs	r1, #0
 800826a:	0018      	movs	r0, r3
 800826c:	f7ff fb12 	bl	8007894 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8008270:	4b24      	ldr	r3, [pc, #144]	; (8008304 <MX_UCPD1_Init+0x148>)
 8008272:	2200      	movs	r2, #0
 8008274:	2100      	movs	r1, #0
 8008276:	0018      	movs	r0, r3
 8008278:	f7ff fb30 	bl	80078dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 800827c:	4b21      	ldr	r3, [pc, #132]	; (8008304 <MX_UCPD1_Init+0x148>)
 800827e:	2200      	movs	r2, #0
 8008280:	2100      	movs	r1, #0
 8008282:	0018      	movs	r0, r3
 8008284:	f7ff fb50 	bl	8007928 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8008288:	4b1e      	ldr	r3, [pc, #120]	; (8008304 <MX_UCPD1_Init+0x148>)
 800828a:	223b      	movs	r2, #59	; 0x3b
 800828c:	2101      	movs	r1, #1
 800828e:	0018      	movs	r0, r3
 8008290:	f7ff fb96 	bl	80079c0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8008294:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <MX_UCPD1_Init+0x148>)
 8008296:	2210      	movs	r2, #16
 8008298:	2101      	movs	r1, #1
 800829a:	0018      	movs	r0, r3
 800829c:	f7ff fa8c 	bl	80077b8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 80082a0:	4b18      	ldr	r3, [pc, #96]	; (8008304 <MX_UCPD1_Init+0x148>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	2101      	movs	r1, #1
 80082a6:	0018      	movs	r0, r3
 80082a8:	f7ff fb64 	bl	8007974 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80082ac:	4b15      	ldr	r3, [pc, #84]	; (8008304 <MX_UCPD1_Init+0x148>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	2101      	movs	r1, #1
 80082b2:	0018      	movs	r0, r3
 80082b4:	f7ff faa6 	bl	8007804 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80082b8:	4b12      	ldr	r3, [pc, #72]	; (8008304 <MX_UCPD1_Init+0x148>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	2101      	movs	r1, #1
 80082be:	0018      	movs	r0, r3
 80082c0:	f7ff fac4 	bl	800784c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80082c4:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <MX_UCPD1_Init+0x148>)
 80082c6:	2280      	movs	r2, #128	; 0x80
 80082c8:	2101      	movs	r1, #1
 80082ca:	0018      	movs	r0, r3
 80082cc:	f7ff fae2 	bl	8007894 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80082d0:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <MX_UCPD1_Init+0x148>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	2101      	movs	r1, #1
 80082d6:	0018      	movs	r0, r3
 80082d8:	f7ff fb00 	bl	80078dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80082dc:	4b09      	ldr	r3, [pc, #36]	; (8008304 <MX_UCPD1_Init+0x148>)
 80082de:	2200      	movs	r2, #0
 80082e0:	2101      	movs	r1, #1
 80082e2:	0018      	movs	r0, r3
 80082e4:	f7ff fb20 	bl	8007928 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 3);
 80082e8:	2103      	movs	r1, #3
 80082ea:	2008      	movs	r0, #8
 80082ec:	f7ff f9f6 	bl	80076dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80082f0:	2008      	movs	r0, #8
 80082f2:	f7ff f9d9 	bl	80076a8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	46bd      	mov	sp, r7
 80082fa:	b006      	add	sp, #24
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	50000400 	.word	0x50000400
 8008304:	40020000 	.word	0x40020000

08008308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <MX_DMA_Init+0x44>)
 8008310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008312:	4b0e      	ldr	r3, [pc, #56]	; (800834c <MX_DMA_Init+0x44>)
 8008314:	2101      	movs	r1, #1
 8008316:	430a      	orrs	r2, r1
 8008318:	639a      	str	r2, [r3, #56]	; 0x38
 800831a:	4b0c      	ldr	r3, [pc, #48]	; (800834c <MX_DMA_Init+0x44>)
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	2201      	movs	r2, #1
 8008320:	4013      	ands	r3, r2
 8008322:	607b      	str	r3, [r7, #4]
 8008324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 3);
 8008326:	2103      	movs	r1, #3
 8008328:	2009      	movs	r0, #9
 800832a:	f7ff f9d7 	bl	80076dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800832e:	2009      	movs	r0, #9
 8008330:	f7ff f9ba 	bl	80076a8 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3);
 8008334:	2103      	movs	r1, #3
 8008336:	200a      	movs	r0, #10
 8008338:	f7ff f9d0 	bl	80076dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800833c:	200a      	movs	r0, #10
 800833e:	f7ff f9b3 	bl	80076a8 <__NVIC_EnableIRQ>

}
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	46bd      	mov	sp, r7
 8008346:	b002      	add	sp, #8
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	40021000 	.word	0x40021000

08008350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b089      	sub	sp, #36	; 0x24
 8008354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008356:	240c      	movs	r4, #12
 8008358:	193b      	adds	r3, r7, r4
 800835a:	0018      	movs	r0, r3
 800835c:	2314      	movs	r3, #20
 800835e:	001a      	movs	r2, r3
 8008360:	2100      	movs	r1, #0
 8008362:	f012 fbf9 	bl	801ab58 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008366:	4b5f      	ldr	r3, [pc, #380]	; (80084e4 <MX_GPIO_Init+0x194>)
 8008368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800836a:	4b5e      	ldr	r3, [pc, #376]	; (80084e4 <MX_GPIO_Init+0x194>)
 800836c:	2104      	movs	r1, #4
 800836e:	430a      	orrs	r2, r1
 8008370:	635a      	str	r2, [r3, #52]	; 0x34
 8008372:	4b5c      	ldr	r3, [pc, #368]	; (80084e4 <MX_GPIO_Init+0x194>)
 8008374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008376:	2204      	movs	r2, #4
 8008378:	4013      	ands	r3, r2
 800837a:	60bb      	str	r3, [r7, #8]
 800837c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800837e:	4b59      	ldr	r3, [pc, #356]	; (80084e4 <MX_GPIO_Init+0x194>)
 8008380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008382:	4b58      	ldr	r3, [pc, #352]	; (80084e4 <MX_GPIO_Init+0x194>)
 8008384:	2101      	movs	r1, #1
 8008386:	430a      	orrs	r2, r1
 8008388:	635a      	str	r2, [r3, #52]	; 0x34
 800838a:	4b56      	ldr	r3, [pc, #344]	; (80084e4 <MX_GPIO_Init+0x194>)
 800838c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838e:	2201      	movs	r2, #1
 8008390:	4013      	ands	r3, r2
 8008392:	607b      	str	r3, [r7, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008396:	4b53      	ldr	r3, [pc, #332]	; (80084e4 <MX_GPIO_Init+0x194>)
 8008398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839a:	4b52      	ldr	r3, [pc, #328]	; (80084e4 <MX_GPIO_Init+0x194>)
 800839c:	2102      	movs	r1, #2
 800839e:	430a      	orrs	r2, r1
 80083a0:	635a      	str	r2, [r3, #52]	; 0x34
 80083a2:	4b50      	ldr	r3, [pc, #320]	; (80084e4 <MX_GPIO_Init+0x194>)
 80083a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a6:	2202      	movs	r2, #2
 80083a8:	4013      	ands	r3, r2
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MAX7219_GPIO_Port, CS_MAX7219_Pin, GPIO_PIN_RESET);
 80083ae:	4b4e      	ldr	r3, [pc, #312]	; (80084e8 <MX_GPIO_Init+0x198>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	2180      	movs	r1, #128	; 0x80
 80083b4:	0018      	movs	r0, r3
 80083b6:	f001 ff79 	bl	800a2ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB_OUT_GPIO_Port, DB_OUT_Pin, GPIO_PIN_SET);
 80083ba:	4b4c      	ldr	r3, [pc, #304]	; (80084ec <MX_GPIO_Init+0x19c>)
 80083bc:	2201      	movs	r2, #1
 80083be:	2140      	movs	r1, #64	; 0x40
 80083c0:	0018      	movs	r0, r3
 80083c2:	f001 ff73 	bl	800a2ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VCC_OUT_GPIO_Port, VCC_OUT_Pin, GPIO_PIN_SET);
 80083c6:	2380      	movs	r3, #128	; 0x80
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	4847      	ldr	r0, [pc, #284]	; (80084e8 <MX_GPIO_Init+0x198>)
 80083cc:	2201      	movs	r2, #1
 80083ce:	0019      	movs	r1, r3
 80083d0:	f001 ff6c 	bl	800a2ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80083d4:	193b      	adds	r3, r7, r4
 80083d6:	2280      	movs	r2, #128	; 0x80
 80083d8:	0192      	lsls	r2, r2, #6
 80083da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80083dc:	193b      	adds	r3, r7, r4
 80083de:	2284      	movs	r2, #132	; 0x84
 80083e0:	0392      	lsls	r2, r2, #14
 80083e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083e4:	193b      	adds	r3, r7, r4
 80083e6:	2200      	movs	r2, #0
 80083e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80083ea:	193b      	adds	r3, r7, r4
 80083ec:	4a3e      	ldr	r2, [pc, #248]	; (80084e8 <MX_GPIO_Init+0x198>)
 80083ee:	0019      	movs	r1, r3
 80083f0:	0010      	movs	r0, r2
 80083f2:	f001 fdef 	bl	8009fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VOL_CUR_BUTTON_Pin REQUEST_BUTTON_Pin */
  GPIO_InitStruct.Pin = VOL_CUR_BUTTON_Pin|REQUEST_BUTTON_Pin;
 80083f6:	0021      	movs	r1, r4
 80083f8:	187b      	adds	r3, r7, r1
 80083fa:	2206      	movs	r2, #6
 80083fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80083fe:	187b      	adds	r3, r7, r1
 8008400:	2284      	movs	r2, #132	; 0x84
 8008402:	0392      	lsls	r2, r2, #14
 8008404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008406:	187b      	adds	r3, r7, r1
 8008408:	2201      	movs	r2, #1
 800840a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800840c:	000c      	movs	r4, r1
 800840e:	187b      	adds	r3, r7, r1
 8008410:	4a35      	ldr	r2, [pc, #212]	; (80084e8 <MX_GPIO_Init+0x198>)
 8008412:	0019      	movs	r1, r3
 8008414:	0010      	movs	r0, r2
 8008416:	f001 fddd 	bl	8009fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 800841a:	0021      	movs	r1, r4
 800841c:	187b      	adds	r3, r7, r1
 800841e:	2208      	movs	r2, #8
 8008420:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008422:	187b      	adds	r3, r7, r1
 8008424:	2288      	movs	r2, #136	; 0x88
 8008426:	0352      	lsls	r2, r2, #13
 8008428:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800842a:	000c      	movs	r4, r1
 800842c:	193b      	adds	r3, r7, r4
 800842e:	2201      	movs	r2, #1
 8008430:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8008432:	193b      	adds	r3, r7, r4
 8008434:	4a2c      	ldr	r2, [pc, #176]	; (80084e8 <MX_GPIO_Init+0x198>)
 8008436:	0019      	movs	r1, r3
 8008438:	0010      	movs	r0, r2
 800843a:	f001 fdcb 	bl	8009fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CC1_G4_Pin CC2_G4_Pin */
  GPIO_InitStruct.Pin = CC1_G4_Pin|CC2_G4_Pin;
 800843e:	193b      	adds	r3, r7, r4
 8008440:	2211      	movs	r2, #17
 8008442:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008444:	193b      	adds	r3, r7, r4
 8008446:	2200      	movs	r2, #0
 8008448:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800844a:	193b      	adds	r3, r7, r4
 800844c:	2200      	movs	r2, #0
 800844e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008450:	193b      	adds	r3, r7, r4
 8008452:	4a26      	ldr	r2, [pc, #152]	; (80084ec <MX_GPIO_Init+0x19c>)
 8008454:	0019      	movs	r1, r3
 8008456:	0010      	movs	r0, r2
 8008458:	f001 fdbc 	bl	8009fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_MAX7219_Pin VCC_OUT_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin|VCC_OUT_Pin;
 800845c:	0021      	movs	r1, r4
 800845e:	187b      	adds	r3, r7, r1
 8008460:	2290      	movs	r2, #144	; 0x90
 8008462:	00d2      	lsls	r2, r2, #3
 8008464:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008466:	000c      	movs	r4, r1
 8008468:	193b      	adds	r3, r7, r4
 800846a:	2201      	movs	r2, #1
 800846c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800846e:	193b      	adds	r3, r7, r4
 8008470:	2200      	movs	r2, #0
 8008472:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008474:	193b      	adds	r3, r7, r4
 8008476:	2200      	movs	r2, #0
 8008478:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800847a:	193b      	adds	r3, r7, r4
 800847c:	4a1a      	ldr	r2, [pc, #104]	; (80084e8 <MX_GPIO_Init+0x198>)
 800847e:	0019      	movs	r1, r3
 8008480:	0010      	movs	r0, r2
 8008482:	f001 fda7 	bl	8009fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB_OUT_Pin */
  GPIO_InitStruct.Pin = DB_OUT_Pin;
 8008486:	0021      	movs	r1, r4
 8008488:	187b      	adds	r3, r7, r1
 800848a:	2240      	movs	r2, #64	; 0x40
 800848c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800848e:	187b      	adds	r3, r7, r1
 8008490:	2201      	movs	r2, #1
 8008492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008494:	187b      	adds	r3, r7, r1
 8008496:	2200      	movs	r2, #0
 8008498:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800849a:	187b      	adds	r3, r7, r1
 800849c:	2200      	movs	r2, #0
 800849e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DB_OUT_GPIO_Port, &GPIO_InitStruct);
 80084a0:	187b      	adds	r3, r7, r1
 80084a2:	4a12      	ldr	r2, [pc, #72]	; (80084ec <MX_GPIO_Init+0x19c>)
 80084a4:	0019      	movs	r1, r3
 80084a6:	0010      	movs	r0, r2
 80084a8:	f001 fd94 	bl	8009fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 80084ac:	2200      	movs	r2, #0
 80084ae:	2103      	movs	r1, #3
 80084b0:	2005      	movs	r0, #5
 80084b2:	f001 fbb3 	bl	8009c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80084b6:	2005      	movs	r0, #5
 80084b8:	f001 fbc5 	bl	8009c46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 80084bc:	2200      	movs	r2, #0
 80084be:	2103      	movs	r1, #3
 80084c0:	2006      	movs	r0, #6
 80084c2:	f001 fbab 	bl	8009c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80084c6:	2006      	movs	r0, #6
 80084c8:	f001 fbbd 	bl	8009c46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80084cc:	2200      	movs	r2, #0
 80084ce:	2103      	movs	r1, #3
 80084d0:	2007      	movs	r0, #7
 80084d2:	f001 fba3 	bl	8009c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80084d6:	2007      	movs	r0, #7
 80084d8:	f001 fbb5 	bl	8009c46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80084dc:	46c0      	nop			; (mov r8, r8)
 80084de:	46bd      	mov	sp, r7
 80084e0:	b009      	add	sp, #36	; 0x24
 80084e2:	bd90      	pop	{r4, r7, pc}
 80084e4:	40021000 	.word	0x40021000
 80084e8:	50000800 	.word	0x50000800
 80084ec:	50000400 	.word	0x50000400

080084f0 <HAL_GPIO_EXTI_Falling_Callback>:
* @brief EXTI line detection callbacks
* @param GPIO_Pin Specifies the pins connected EXTI line
* @retval None
*/
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80084f0:	b590      	push	{r4, r7, lr}
 80084f2:	b093      	sub	sp, #76	; 0x4c
 80084f4:	af02      	add	r7, sp, #8
 80084f6:	0002      	movs	r2, r0
 80084f8:	1dbb      	adds	r3, r7, #6
 80084fa:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == USER_BUTTON_Pin) /* Will display in trace the VBUS value when user button
 80084fc:	1dbb      	adds	r3, r7, #6
 80084fe:	881a      	ldrh	r2, [r3, #0]
 8008500:	2380      	movs	r3, #128	; 0x80
 8008502:	019b      	lsls	r3, r3, #6
 8008504:	429a      	cmp	r2, r3
 8008506:	d118      	bne.n	800853a <HAL_GPIO_EXTI_Falling_Callback+0x4a>
is pressed */
	{
		//Get Voltage level into TRACE
		char _str[10];
		BSP_PWR_VBUSGetVoltage(0);
 8008508:	2000      	movs	r0, #0
 800850a:	f00c f91f 	bl	801474c <BSP_PWR_VBUSGetVoltage>
		sprintf(_str,"VBUS:%lu", BSP_PWR_VBUSGetVoltage(0));
 800850e:	2000      	movs	r0, #0
 8008510:	f00c f91c 	bl	801474c <BSP_PWR_VBUSGetVoltage>
 8008514:	0002      	movs	r2, r0
 8008516:	4916      	ldr	r1, [pc, #88]	; (8008570 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8008518:	2434      	movs	r4, #52	; 0x34
 800851a:	193b      	adds	r3, r7, r4
 800851c:	0018      	movs	r0, r3
 800851e:	f012 fafb 	bl	801ab18 <siprintf>
		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8008522:	193b      	adds	r3, r7, r4
 8008524:	0018      	movs	r0, r3
 8008526:	f7fd fe51 	bl	80061cc <strlen>
 800852a:	0002      	movs	r2, r0
 800852c:	193b      	adds	r3, r7, r4
 800852e:	9200      	str	r2, [sp, #0]
 8008530:	2200      	movs	r2, #0
 8008532:	2100      	movs	r1, #0
 8008534:	2006      	movs	r0, #6
 8008536:	f004 fd0b 	bl	800cf50 <USBPD_TRACE_Add>

	}

	if (GPIO_Pin == REQUEST_BUTTON_Pin) /* Will display in trace the VBUS value when user button
 800853a:	1dbb      	adds	r3, r7, #6
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	2b04      	cmp	r3, #4
 8008540:	d112      	bne.n	8008568 <HAL_GPIO_EXTI_Falling_Callback+0x78>
is pressed */
	{
		//Get Voltage level into TRACE
		char _str[40];
		sprintf(_str,"APDO request: VBUS= 0, Ibus= 0");
 8008542:	4a0c      	ldr	r2, [pc, #48]	; (8008574 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8008544:	240c      	movs	r4, #12
 8008546:	193b      	adds	r3, r7, r4
 8008548:	0011      	movs	r1, r2
 800854a:	0018      	movs	r0, r3
 800854c:	f012 fae4 	bl	801ab18 <siprintf>
		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8008550:	193b      	adds	r3, r7, r4
 8008552:	0018      	movs	r0, r3
 8008554:	f7fd fe3a 	bl	80061cc <strlen>
 8008558:	0002      	movs	r2, r0
 800855a:	193b      	adds	r3, r7, r4
 800855c:	9200      	str	r2, [sp, #0]
 800855e:	2200      	movs	r2, #0
 8008560:	2100      	movs	r1, #0
 8008562:	2006      	movs	r0, #6
 8008564:	f004 fcf4 	bl	800cf50 <USBPD_TRACE_Add>

	}
}
 8008568:	46c0      	nop			; (mov r8, r8)
 800856a:	46bd      	mov	sp, r7
 800856c:	b011      	add	sp, #68	; 0x44
 800856e:	bd90      	pop	{r4, r7, pc}
 8008570:	0801b4ac 	.word	0x0801b4ac
 8008574:	0801b4b8 	.word	0x0801b4b8

08008578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008580:	2001      	movs	r0, #1
 8008582:	f007 fe63 	bl	801024c <osDelay>
    app_loop();
 8008586:	f7fe f907 	bl	8006798 <app_loop>
    osDelay(1);
 800858a:	e7f9      	b.n	8008580 <StartDefaultTask+0x8>

0800858c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a06      	ldr	r2, [pc, #24]	; (80085b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d101      	bne.n	80085a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800859e:	f000 fac1 	bl	8008b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  USBPD_DPM_TimerCounter(); //related to PD device manager
 80085a2:	f00a fc8f 	bl	8012ec4 <USBPD_DPM_TimerCounter>
  GUI_TimerCounter(); //updating a graphical user interface (GUI) based on timer events.
 80085a6:	f00e fb3f 	bl	8016c28 <GUI_TimerCounter>
  /* USER CODE END Callback 1 */
}
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	46bd      	mov	sp, r7
 80085ae:	b002      	add	sp, #8
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	46c0      	nop			; (mov r8, r8)
 80085b4:	40001000 	.word	0x40001000

080085b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80085bc:	b672      	cpsid	i
}
 80085be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80085c0:	e7fe      	b.n	80085c0 <Error_Handler+0x8>
	...

080085c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085ca:	4b15      	ldr	r3, [pc, #84]	; (8008620 <HAL_MspInit+0x5c>)
 80085cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ce:	4b14      	ldr	r3, [pc, #80]	; (8008620 <HAL_MspInit+0x5c>)
 80085d0:	2101      	movs	r1, #1
 80085d2:	430a      	orrs	r2, r1
 80085d4:	641a      	str	r2, [r3, #64]	; 0x40
 80085d6:	4b12      	ldr	r3, [pc, #72]	; (8008620 <HAL_MspInit+0x5c>)
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	2201      	movs	r2, #1
 80085dc:	4013      	ands	r3, r2
 80085de:	607b      	str	r3, [r7, #4]
 80085e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085e2:	4b0f      	ldr	r3, [pc, #60]	; (8008620 <HAL_MspInit+0x5c>)
 80085e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085e6:	4b0e      	ldr	r3, [pc, #56]	; (8008620 <HAL_MspInit+0x5c>)
 80085e8:	2180      	movs	r1, #128	; 0x80
 80085ea:	0549      	lsls	r1, r1, #21
 80085ec:	430a      	orrs	r2, r1
 80085ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80085f0:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <HAL_MspInit+0x5c>)
 80085f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085f4:	2380      	movs	r3, #128	; 0x80
 80085f6:	055b      	lsls	r3, r3, #21
 80085f8:	4013      	ands	r3, r2
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80085fe:	2302      	movs	r3, #2
 8008600:	425b      	negs	r3, r3
 8008602:	2200      	movs	r2, #0
 8008604:	2103      	movs	r1, #3
 8008606:	0018      	movs	r0, r3
 8008608:	f001 fb08 	bl	8009c1c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800860c:	23c0      	movs	r3, #192	; 0xc0
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	0018      	movs	r0, r3
 8008612:	f000 fac7 	bl	8008ba4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008616:	46c0      	nop			; (mov r8, r8)
 8008618:	46bd      	mov	sp, r7
 800861a:	b002      	add	sp, #8
 800861c:	bd80      	pop	{r7, pc}
 800861e:	46c0      	nop			; (mov r8, r8)
 8008620:	40021000 	.word	0x40021000

08008624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008624:	b590      	push	{r4, r7, lr}
 8008626:	b08b      	sub	sp, #44	; 0x2c
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800862c:	2414      	movs	r4, #20
 800862e:	193b      	adds	r3, r7, r4
 8008630:	0018      	movs	r0, r3
 8008632:	2314      	movs	r3, #20
 8008634:	001a      	movs	r2, r3
 8008636:	2100      	movs	r1, #0
 8008638:	f012 fa8e 	bl	801ab58 <memset>
  if(hadc->Instance==ADC1)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a17      	ldr	r2, [pc, #92]	; (80086a0 <HAL_ADC_MspInit+0x7c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d128      	bne.n	8008698 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008646:	4b17      	ldr	r3, [pc, #92]	; (80086a4 <HAL_ADC_MspInit+0x80>)
 8008648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800864a:	4b16      	ldr	r3, [pc, #88]	; (80086a4 <HAL_ADC_MspInit+0x80>)
 800864c:	2180      	movs	r1, #128	; 0x80
 800864e:	0349      	lsls	r1, r1, #13
 8008650:	430a      	orrs	r2, r1
 8008652:	641a      	str	r2, [r3, #64]	; 0x40
 8008654:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <HAL_ADC_MspInit+0x80>)
 8008656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008658:	2380      	movs	r3, #128	; 0x80
 800865a:	035b      	lsls	r3, r3, #13
 800865c:	4013      	ands	r3, r2
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008662:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <HAL_ADC_MspInit+0x80>)
 8008664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <HAL_ADC_MspInit+0x80>)
 8008668:	2102      	movs	r1, #2
 800866a:	430a      	orrs	r2, r1
 800866c:	635a      	str	r2, [r3, #52]	; 0x34
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <HAL_ADC_MspInit+0x80>)
 8008670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008672:	2202      	movs	r2, #2
 8008674:	4013      	ands	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VSENSE_Pin;
 800867a:	193b      	adds	r3, r7, r4
 800867c:	2202      	movs	r2, #2
 800867e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008680:	193b      	adds	r3, r7, r4
 8008682:	2203      	movs	r2, #3
 8008684:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008686:	193b      	adds	r3, r7, r4
 8008688:	2200      	movs	r2, #0
 800868a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VSENSE_GPIO_Port, &GPIO_InitStruct);
 800868c:	193b      	adds	r3, r7, r4
 800868e:	4a06      	ldr	r2, [pc, #24]	; (80086a8 <HAL_ADC_MspInit+0x84>)
 8008690:	0019      	movs	r1, r3
 8008692:	0010      	movs	r0, r2
 8008694:	f001 fc9e 	bl	8009fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008698:	46c0      	nop			; (mov r8, r8)
 800869a:	46bd      	mov	sp, r7
 800869c:	b00b      	add	sp, #44	; 0x2c
 800869e:	bd90      	pop	{r4, r7, pc}
 80086a0:	40012400 	.word	0x40012400
 80086a4:	40021000 	.word	0x40021000
 80086a8:	50000400 	.word	0x50000400

080086ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80086ac:	b590      	push	{r4, r7, lr}
 80086ae:	b08b      	sub	sp, #44	; 0x2c
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b4:	2414      	movs	r4, #20
 80086b6:	193b      	adds	r3, r7, r4
 80086b8:	0018      	movs	r0, r3
 80086ba:	2314      	movs	r3, #20
 80086bc:	001a      	movs	r2, r3
 80086be:	2100      	movs	r1, #0
 80086c0:	f012 fa4a 	bl	801ab58 <memset>
  if(hspi->Instance==SPI1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a1b      	ldr	r2, [pc, #108]	; (8008738 <HAL_SPI_MspInit+0x8c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d130      	bne.n	8008730 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80086ce:	4b1b      	ldr	r3, [pc, #108]	; (800873c <HAL_SPI_MspInit+0x90>)
 80086d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086d2:	4b1a      	ldr	r3, [pc, #104]	; (800873c <HAL_SPI_MspInit+0x90>)
 80086d4:	2180      	movs	r1, #128	; 0x80
 80086d6:	0149      	lsls	r1, r1, #5
 80086d8:	430a      	orrs	r2, r1
 80086da:	641a      	str	r2, [r3, #64]	; 0x40
 80086dc:	4b17      	ldr	r3, [pc, #92]	; (800873c <HAL_SPI_MspInit+0x90>)
 80086de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086e0:	2380      	movs	r3, #128	; 0x80
 80086e2:	015b      	lsls	r3, r3, #5
 80086e4:	4013      	ands	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]
 80086e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ea:	4b14      	ldr	r3, [pc, #80]	; (800873c <HAL_SPI_MspInit+0x90>)
 80086ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <HAL_SPI_MspInit+0x90>)
 80086f0:	2101      	movs	r1, #1
 80086f2:	430a      	orrs	r2, r1
 80086f4:	635a      	str	r2, [r3, #52]	; 0x34
 80086f6:	4b11      	ldr	r3, [pc, #68]	; (800873c <HAL_SPI_MspInit+0x90>)
 80086f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fa:	2201      	movs	r2, #1
 80086fc:	4013      	ands	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8008702:	0021      	movs	r1, r4
 8008704:	187b      	adds	r3, r7, r1
 8008706:	22a0      	movs	r2, #160	; 0xa0
 8008708:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800870a:	187b      	adds	r3, r7, r1
 800870c:	2202      	movs	r2, #2
 800870e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008710:	187b      	adds	r3, r7, r1
 8008712:	2200      	movs	r2, #0
 8008714:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008716:	187b      	adds	r3, r7, r1
 8008718:	2200      	movs	r2, #0
 800871a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800871c:	187b      	adds	r3, r7, r1
 800871e:	2200      	movs	r2, #0
 8008720:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008722:	187a      	adds	r2, r7, r1
 8008724:	23a0      	movs	r3, #160	; 0xa0
 8008726:	05db      	lsls	r3, r3, #23
 8008728:	0011      	movs	r1, r2
 800872a:	0018      	movs	r0, r3
 800872c:	f001 fc52 	bl	8009fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008730:	46c0      	nop			; (mov r8, r8)
 8008732:	46bd      	mov	sp, r7
 8008734:	b00b      	add	sp, #44	; 0x2c
 8008736:	bd90      	pop	{r4, r7, pc}
 8008738:	40013000 	.word	0x40013000
 800873c:	40021000 	.word	0x40021000

08008740 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008740:	b590      	push	{r4, r7, lr}
 8008742:	b08b      	sub	sp, #44	; 0x2c
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008748:	2414      	movs	r4, #20
 800874a:	193b      	adds	r3, r7, r4
 800874c:	0018      	movs	r0, r3
 800874e:	2314      	movs	r3, #20
 8008750:	001a      	movs	r2, r3
 8008752:	2100      	movs	r1, #0
 8008754:	f012 fa00 	bl	801ab58 <memset>
  if(htim_encoder->Instance==TIM2)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	2380      	movs	r3, #128	; 0x80
 800875e:	05db      	lsls	r3, r3, #23
 8008760:	429a      	cmp	r2, r3
 8008762:	d136      	bne.n	80087d2 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008764:	4b1d      	ldr	r3, [pc, #116]	; (80087dc <HAL_TIM_Encoder_MspInit+0x9c>)
 8008766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008768:	4b1c      	ldr	r3, [pc, #112]	; (80087dc <HAL_TIM_Encoder_MspInit+0x9c>)
 800876a:	2101      	movs	r1, #1
 800876c:	430a      	orrs	r2, r1
 800876e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008770:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <HAL_TIM_Encoder_MspInit+0x9c>)
 8008772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008774:	2201      	movs	r2, #1
 8008776:	4013      	ands	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800877c:	4b17      	ldr	r3, [pc, #92]	; (80087dc <HAL_TIM_Encoder_MspInit+0x9c>)
 800877e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008780:	4b16      	ldr	r3, [pc, #88]	; (80087dc <HAL_TIM_Encoder_MspInit+0x9c>)
 8008782:	2101      	movs	r1, #1
 8008784:	430a      	orrs	r2, r1
 8008786:	635a      	str	r2, [r3, #52]	; 0x34
 8008788:	4b14      	ldr	r3, [pc, #80]	; (80087dc <HAL_TIM_Encoder_MspInit+0x9c>)
 800878a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878c:	2201      	movs	r2, #1
 800878e:	4013      	ands	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008794:	0021      	movs	r1, r4
 8008796:	187b      	adds	r3, r7, r1
 8008798:	2203      	movs	r2, #3
 800879a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800879c:	187b      	adds	r3, r7, r1
 800879e:	2202      	movs	r2, #2
 80087a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a2:	187b      	adds	r3, r7, r1
 80087a4:	2200      	movs	r2, #0
 80087a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087a8:	187b      	adds	r3, r7, r1
 80087aa:	2200      	movs	r2, #0
 80087ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80087ae:	187b      	adds	r3, r7, r1
 80087b0:	2202      	movs	r2, #2
 80087b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087b4:	187a      	adds	r2, r7, r1
 80087b6:	23a0      	movs	r3, #160	; 0xa0
 80087b8:	05db      	lsls	r3, r3, #23
 80087ba:	0011      	movs	r1, r2
 80087bc:	0018      	movs	r0, r3
 80087be:	f001 fc09 	bl	8009fd4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80087c2:	2200      	movs	r2, #0
 80087c4:	2103      	movs	r1, #3
 80087c6:	200f      	movs	r0, #15
 80087c8:	f001 fa28 	bl	8009c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80087cc:	200f      	movs	r0, #15
 80087ce:	f001 fa3a 	bl	8009c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80087d2:	46c0      	nop			; (mov r8, r8)
 80087d4:	46bd      	mov	sp, r7
 80087d6:	b00b      	add	sp, #44	; 0x2c
 80087d8:	bd90      	pop	{r4, r7, pc}
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	40021000 	.word	0x40021000

080087e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087e0:	b5b0      	push	{r4, r5, r7, lr}
 80087e2:	b08c      	sub	sp, #48	; 0x30
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80087e8:	232b      	movs	r3, #43	; 0x2b
 80087ea:	18fb      	adds	r3, r7, r3
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80087f0:	4b37      	ldr	r3, [pc, #220]	; (80088d0 <HAL_InitTick+0xf0>)
 80087f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087f4:	4b36      	ldr	r3, [pc, #216]	; (80088d0 <HAL_InitTick+0xf0>)
 80087f6:	2110      	movs	r1, #16
 80087f8:	430a      	orrs	r2, r1
 80087fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80087fc:	4b34      	ldr	r3, [pc, #208]	; (80088d0 <HAL_InitTick+0xf0>)
 80087fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008800:	2210      	movs	r2, #16
 8008802:	4013      	ands	r3, r2
 8008804:	60bb      	str	r3, [r7, #8]
 8008806:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008808:	230c      	movs	r3, #12
 800880a:	18fa      	adds	r2, r7, r3
 800880c:	2410      	movs	r4, #16
 800880e:	193b      	adds	r3, r7, r4
 8008810:	0011      	movs	r1, r2
 8008812:	0018      	movs	r0, r3
 8008814:	f002 faf2 	bl	800adfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008818:	193b      	adds	r3, r7, r4
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	d104      	bne.n	800882e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008824:	f002 fad4 	bl	800add0 <HAL_RCC_GetPCLK1Freq>
 8008828:	0003      	movs	r3, r0
 800882a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800882c:	e004      	b.n	8008838 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800882e:	f002 facf 	bl	800add0 <HAL_RCC_GetPCLK1Freq>
 8008832:	0003      	movs	r3, r0
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	4926      	ldr	r1, [pc, #152]	; (80088d4 <HAL_InitTick+0xf4>)
 800883c:	0018      	movs	r0, r3
 800883e:	f7fd fcd7 	bl	80061f0 <__udivsi3>
 8008842:	0003      	movs	r3, r0
 8008844:	3b01      	subs	r3, #1
 8008846:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008848:	4b23      	ldr	r3, [pc, #140]	; (80088d8 <HAL_InitTick+0xf8>)
 800884a:	4a24      	ldr	r2, [pc, #144]	; (80088dc <HAL_InitTick+0xfc>)
 800884c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800884e:	4b22      	ldr	r3, [pc, #136]	; (80088d8 <HAL_InitTick+0xf8>)
 8008850:	4a23      	ldr	r2, [pc, #140]	; (80088e0 <HAL_InitTick+0x100>)
 8008852:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008854:	4b20      	ldr	r3, [pc, #128]	; (80088d8 <HAL_InitTick+0xf8>)
 8008856:	6a3a      	ldr	r2, [r7, #32]
 8008858:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800885a:	4b1f      	ldr	r3, [pc, #124]	; (80088d8 <HAL_InitTick+0xf8>)
 800885c:	2200      	movs	r2, #0
 800885e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008860:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <HAL_InitTick+0xf8>)
 8008862:	2200      	movs	r2, #0
 8008864:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008866:	4b1c      	ldr	r3, [pc, #112]	; (80088d8 <HAL_InitTick+0xf8>)
 8008868:	2200      	movs	r2, #0
 800886a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800886c:	252b      	movs	r5, #43	; 0x2b
 800886e:	197c      	adds	r4, r7, r5
 8008870:	4b19      	ldr	r3, [pc, #100]	; (80088d8 <HAL_InitTick+0xf8>)
 8008872:	0018      	movs	r0, r3
 8008874:	f003 f8b6 	bl	800b9e4 <HAL_TIM_Base_Init>
 8008878:	0003      	movs	r3, r0
 800887a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800887c:	197b      	adds	r3, r7, r5
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11e      	bne.n	80088c2 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008884:	197c      	adds	r4, r7, r5
 8008886:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <HAL_InitTick+0xf8>)
 8008888:	0018      	movs	r0, r3
 800888a:	f003 f90b 	bl	800baa4 <HAL_TIM_Base_Start_IT>
 800888e:	0003      	movs	r3, r0
 8008890:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8008892:	197b      	adds	r3, r7, r5
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d113      	bne.n	80088c2 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800889a:	2011      	movs	r0, #17
 800889c:	f001 f9d3 	bl	8009c46 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d809      	bhi.n	80088ba <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	0019      	movs	r1, r3
 80088ac:	2011      	movs	r0, #17
 80088ae:	f001 f9b5 	bl	8009c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80088b2:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <HAL_InitTick+0x104>)
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	e003      	b.n	80088c2 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80088ba:	232b      	movs	r3, #43	; 0x2b
 80088bc:	18fb      	adds	r3, r7, r3
 80088be:	2201      	movs	r2, #1
 80088c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80088c2:	232b      	movs	r3, #43	; 0x2b
 80088c4:	18fb      	adds	r3, r7, r3
 80088c6:	781b      	ldrb	r3, [r3, #0]
}
 80088c8:	0018      	movs	r0, r3
 80088ca:	46bd      	mov	sp, r7
 80088cc:	b00c      	add	sp, #48	; 0x30
 80088ce:	bdb0      	pop	{r4, r5, r7, pc}
 80088d0:	40021000 	.word	0x40021000
 80088d4:	000f4240 	.word	0x000f4240
 80088d8:	2000036c 	.word	0x2000036c
 80088dc:	40001000 	.word	0x40001000
 80088e0:	000003e7 	.word	0x000003e7
 80088e4:	20000030 	.word	0x20000030

080088e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80088ec:	e7fe      	b.n	80088ec <NMI_Handler+0x4>

080088ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088f2:	e7fe      	b.n	80088f2 <HardFault_Handler+0x4>

080088f4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(VOL_CUR_BUTTON_Pin) != RESET){
 80088f8:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <EXTI0_1_IRQHandler+0x34>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2202      	movs	r2, #2
 80088fe:	4013      	ands	r3, r2
 8008900:	d104      	bne.n	800890c <EXTI0_1_IRQHandler+0x18>
 8008902:	4b09      	ldr	r3, [pc, #36]	; (8008928 <EXTI0_1_IRQHandler+0x34>)
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	2202      	movs	r2, #2
 8008908:	4013      	ands	r3, r2
 800890a:	d001      	beq.n	8008910 <EXTI0_1_IRQHandler+0x1c>
 800890c:	2301      	movs	r3, #1
 800890e:	e000      	b.n	8008912 <EXTI0_1_IRQHandler+0x1e>
 8008910:	2300      	movs	r3, #0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <EXTI0_1_IRQHandler+0x26>
	  cur_vol_button_isr();
 8008916:	f7fe f941 	bl	8006b9c <cur_vol_button_isr>
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VOL_CUR_BUTTON_Pin);
 800891a:	2002      	movs	r0, #2
 800891c:	f001 fce4 	bl	800a2e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8008920:	46c0      	nop			; (mov r8, r8)
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	46c0      	nop			; (mov r8, r8)
 8008928:	40021800 	.word	0x40021800

0800892c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(ENCODER_BUTTON_Pin) != RESET){
 8008930:	4b15      	ldr	r3, [pc, #84]	; (8008988 <EXTI2_3_IRQHandler+0x5c>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	2208      	movs	r2, #8
 8008936:	4013      	ands	r3, r2
 8008938:	d104      	bne.n	8008944 <EXTI2_3_IRQHandler+0x18>
 800893a:	4b13      	ldr	r3, [pc, #76]	; (8008988 <EXTI2_3_IRQHandler+0x5c>)
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	2208      	movs	r2, #8
 8008940:	4013      	ands	r3, r2
 8008942:	d001      	beq.n	8008948 <EXTI2_3_IRQHandler+0x1c>
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <EXTI2_3_IRQHandler+0x1e>
 8008948:	2300      	movs	r3, #0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <EXTI2_3_IRQHandler+0x26>
	  button_isr();
 800894e:	f7fe f82f 	bl	80069b0 <button_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(REQUEST_BUTTON_Pin) != RESET){
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <EXTI2_3_IRQHandler+0x5c>)
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	2204      	movs	r2, #4
 8008958:	4013      	ands	r3, r2
 800895a:	d104      	bne.n	8008966 <EXTI2_3_IRQHandler+0x3a>
 800895c:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <EXTI2_3_IRQHandler+0x5c>)
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	2204      	movs	r2, #4
 8008962:	4013      	ands	r3, r2
 8008964:	d001      	beq.n	800896a <EXTI2_3_IRQHandler+0x3e>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <EXTI2_3_IRQHandler+0x40>
 800896a:	2300      	movs	r3, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <EXTI2_3_IRQHandler+0x48>
  	  request_button_isr();
 8008970:	f7fe f8c2 	bl	8006af8 <request_button_isr>
  }

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(REQUEST_BUTTON_Pin);
 8008974:	2004      	movs	r0, #4
 8008976:	f001 fcb7 	bl	800a2e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_BUTTON_Pin);
 800897a:	2008      	movs	r0, #8
 800897c:	f001 fcb4 	bl	800a2e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8008980:	46c0      	nop			; (mov r8, r8)
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	46c0      	nop			; (mov r8, r8)
 8008988:	40021800 	.word	0x40021800

0800898c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	019b      	lsls	r3, r3, #6
 8008994:	0018      	movs	r0, r3
 8008996:	f001 fca7 	bl	800a2e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 80089a4:	f005 fb18 	bl	800dfd8 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 80089a8:	46c0      	nop			; (mov r8, r8)
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  TRACER_EMB_IRQHandlerDMA();
 80089bc:	f010 ffde 	bl	801997c <TRACER_EMB_IRQHandlerDMA>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80089c0:	46c0      	nop			; (mov r8, r8)
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  encoder_turn_isr();
 80089cc:	f7fd ff12 	bl	80067f4 <encoder_turn_isr>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80089d0:	4b03      	ldr	r3, [pc, #12]	; (80089e0 <TIM2_IRQHandler+0x18>)
 80089d2:	0018      	movs	r0, r3
 80089d4:	f003 fa34 	bl	800be40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80089d8:	46c0      	nop			; (mov r8, r8)
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	46c0      	nop			; (mov r8, r8)
 80089e0:	20000318 	.word	0x20000318

080089e4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80089e8:	4b03      	ldr	r3, [pc, #12]	; (80089f8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80089ea:	0018      	movs	r0, r3
 80089ec:	f003 fa28 	bl	800be40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80089f0:	46c0      	nop			; (mov r8, r8)
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	2000036c 	.word	0x2000036c

080089fc <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
  button_timer_isr();
 8008a00:	f7fe f854 	bl	8006aac <button_timer_isr>
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */

  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8008a04:	46c0      	nop			; (mov r8, r8)
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  TRACER_EMB_IRQHandlerUSART();
 8008a0e:	f010 ffbc 	bl	801998a <TRACER_EMB_IRQHandlerUSART>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a20:	4a14      	ldr	r2, [pc, #80]	; (8008a74 <_sbrk+0x5c>)
 8008a22:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <_sbrk+0x60>)
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a2c:	4b13      	ldr	r3, [pc, #76]	; (8008a7c <_sbrk+0x64>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a34:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <_sbrk+0x64>)
 8008a36:	4a12      	ldr	r2, [pc, #72]	; (8008a80 <_sbrk+0x68>)
 8008a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a3a:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <_sbrk+0x64>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	18d3      	adds	r3, r2, r3
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d207      	bcs.n	8008a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a48:	f012 f8fe 	bl	801ac48 <__errno>
 8008a4c:	0003      	movs	r3, r0
 8008a4e:	220c      	movs	r2, #12
 8008a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a52:	2301      	movs	r3, #1
 8008a54:	425b      	negs	r3, r3
 8008a56:	e009      	b.n	8008a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a58:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <_sbrk+0x64>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a5e:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <_sbrk+0x64>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	18d2      	adds	r2, r2, r3
 8008a66:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <_sbrk+0x64>)
 8008a68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	b006      	add	sp, #24
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20024000 	.word	0x20024000
 8008a78:	00000400 	.word	0x00000400
 8008a7c:	200003b8 	.word	0x200003b8
 8008a80:	200035f0 	.word	0x200035f0

08008a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008a88:	46c0      	nop			; (mov r8, r8)
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008a90:	480d      	ldr	r0, [pc, #52]	; (8008ac8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008a92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008a94:	f7ff fff6 	bl	8008a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008a98:	480c      	ldr	r0, [pc, #48]	; (8008acc <LoopForever+0x6>)
  ldr r1, =_edata
 8008a9a:	490d      	ldr	r1, [pc, #52]	; (8008ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008a9c:	4a0d      	ldr	r2, [pc, #52]	; (8008ad4 <LoopForever+0xe>)
  movs r3, #0
 8008a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008aa0:	e002      	b.n	8008aa8 <LoopCopyDataInit>

08008aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008aa6:	3304      	adds	r3, #4

08008aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008aac:	d3f9      	bcc.n	8008aa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008aae:	4a0a      	ldr	r2, [pc, #40]	; (8008ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ab0:	4c0a      	ldr	r4, [pc, #40]	; (8008adc <LoopForever+0x16>)
  movs r3, #0
 8008ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ab4:	e001      	b.n	8008aba <LoopFillZerobss>

08008ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ab8:	3204      	adds	r2, #4

08008aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008abc:	d3fb      	bcc.n	8008ab6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008abe:	f012 f8c9 	bl	801ac54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008ac2:	f7ff f8a7 	bl	8007c14 <main>

08008ac6 <LoopForever>:

LoopForever:
  b LoopForever
 8008ac6:	e7fe      	b.n	8008ac6 <LoopForever>
  ldr   r0, =_estack
 8008ac8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ad0:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8008ad4:	0801cc8c 	.word	0x0801cc8c
  ldr r2, =_sbss
 8008ad8:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8008adc:	200035f0 	.word	0x200035f0

08008ae0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008ae0:	e7fe      	b.n	8008ae0 <ADC1_COMP_IRQHandler>
	...

08008ae4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008aea:	1dfb      	adds	r3, r7, #7
 8008aec:	2200      	movs	r2, #0
 8008aee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008af0:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <HAL_Init+0x3c>)
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <HAL_Init+0x3c>)
 8008af6:	2180      	movs	r1, #128	; 0x80
 8008af8:	0049      	lsls	r1, r1, #1
 8008afa:	430a      	orrs	r2, r1
 8008afc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008afe:	2003      	movs	r0, #3
 8008b00:	f7ff fe6e 	bl	80087e0 <HAL_InitTick>
 8008b04:	1e03      	subs	r3, r0, #0
 8008b06:	d003      	beq.n	8008b10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008b08:	1dfb      	adds	r3, r7, #7
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	e001      	b.n	8008b14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008b10:	f7ff fd58 	bl	80085c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008b14:	1dfb      	adds	r3, r7, #7
 8008b16:	781b      	ldrb	r3, [r3, #0]
}
 8008b18:	0018      	movs	r0, r3
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	b002      	add	sp, #8
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	40022000 	.word	0x40022000

08008b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008b28:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <HAL_IncTick+0x1c>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	001a      	movs	r2, r3
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <HAL_IncTick+0x20>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	18d2      	adds	r2, r2, r3
 8008b34:	4b03      	ldr	r3, [pc, #12]	; (8008b44 <HAL_IncTick+0x20>)
 8008b36:	601a      	str	r2, [r3, #0]
}
 8008b38:	46c0      	nop			; (mov r8, r8)
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	20000034 	.word	0x20000034
 8008b44:	200003bc 	.word	0x200003bc

08008b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8008b4c:	4b02      	ldr	r3, [pc, #8]	; (8008b58 <HAL_GetTick+0x10>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
}
 8008b50:	0018      	movs	r0, r3
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	46c0      	nop			; (mov r8, r8)
 8008b58:	200003bc 	.word	0x200003bc

08008b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b64:	f7ff fff0 	bl	8008b48 <HAL_GetTick>
 8008b68:	0003      	movs	r3, r0
 8008b6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3301      	adds	r3, #1
 8008b74:	d005      	beq.n	8008b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008b76:	4b0a      	ldr	r3, [pc, #40]	; (8008ba0 <HAL_Delay+0x44>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	001a      	movs	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	189b      	adds	r3, r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	f7ff ffe0 	bl	8008b48 <HAL_GetTick>
 8008b88:	0002      	movs	r2, r0
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d8f7      	bhi.n	8008b84 <HAL_Delay+0x28>
  {
  }
}
 8008b94:	46c0      	nop			; (mov r8, r8)
 8008b96:	46c0      	nop			; (mov r8, r8)
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	b004      	add	sp, #16
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	46c0      	nop			; (mov r8, r8)
 8008ba0:	20000034 	.word	0x20000034

08008ba4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008bac:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a06      	ldr	r2, [pc, #24]	; (8008bcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	0019      	movs	r1, r3
 8008bb6:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	601a      	str	r2, [r3, #0]
}
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	b002      	add	sp, #8
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	46c0      	nop			; (mov r8, r8)
 8008bc8:	40010000 	.word	0x40010000
 8008bcc:	fffff9ff 	.word	0xfffff9ff

08008bd0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a05      	ldr	r2, [pc, #20]	; (8008bf4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8008be0:	401a      	ands	r2, r3
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	431a      	orrs	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	601a      	str	r2, [r3, #0]
}
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	46bd      	mov	sp, r7
 8008bee:	b002      	add	sp, #8
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	fe3fffff 	.word	0xfe3fffff

08008bf8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	23e0      	movs	r3, #224	; 0xe0
 8008c06:	045b      	lsls	r3, r3, #17
 8008c08:	4013      	ands	r3, r2
}
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	b002      	add	sp, #8
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	2104      	movs	r1, #4
 8008c26:	400a      	ands	r2, r1
 8008c28:	2107      	movs	r1, #7
 8008c2a:	4091      	lsls	r1, r2
 8008c2c:	000a      	movs	r2, r1
 8008c2e:	43d2      	mvns	r2, r2
 8008c30:	401a      	ands	r2, r3
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2104      	movs	r1, #4
 8008c36:	400b      	ands	r3, r1
 8008c38:	6879      	ldr	r1, [r7, #4]
 8008c3a:	4099      	lsls	r1, r3
 8008c3c:	000b      	movs	r3, r1
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8008c44:	46c0      	nop			; (mov r8, r8)
 8008c46:	46bd      	mov	sp, r7
 8008c48:	b004      	add	sp, #16
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	2104      	movs	r1, #4
 8008c5e:	400a      	ands	r2, r1
 8008c60:	2107      	movs	r1, #7
 8008c62:	4091      	lsls	r1, r2
 8008c64:	000a      	movs	r2, r1
 8008c66:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2104      	movs	r1, #4
 8008c6c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008c6e:	40da      	lsrs	r2, r3
 8008c70:	0013      	movs	r3, r2
}
 8008c72:	0018      	movs	r0, r3
 8008c74:	46bd      	mov	sp, r7
 8008c76:	b002      	add	sp, #8
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	60b9      	str	r1, [r7, #8]
 8008c84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	211f      	movs	r1, #31
 8008c8e:	400a      	ands	r2, r1
 8008c90:	210f      	movs	r1, #15
 8008c92:	4091      	lsls	r1, r2
 8008c94:	000a      	movs	r2, r1
 8008c96:	43d2      	mvns	r2, r2
 8008c98:	401a      	ands	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	0e9b      	lsrs	r3, r3, #26
 8008c9e:	210f      	movs	r1, #15
 8008ca0:	4019      	ands	r1, r3
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	201f      	movs	r0, #31
 8008ca6:	4003      	ands	r3, r0
 8008ca8:	4099      	lsls	r1, r3
 8008caa:	000b      	movs	r3, r1
 8008cac:	431a      	orrs	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008cb2:	46c0      	nop			; (mov r8, r8)
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	b004      	add	sp, #16
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	035b      	lsls	r3, r3, #13
 8008ccc:	0b5b      	lsrs	r3, r3, #13
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008cd4:	46c0      	nop			; (mov r8, r8)
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	b002      	add	sp, #8
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	0352      	lsls	r2, r2, #13
 8008cee:	0b52      	lsrs	r2, r2, #13
 8008cf0:	43d2      	mvns	r2, r2
 8008cf2:	401a      	ands	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008cf8:	46c0      	nop			; (mov r8, r8)
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	b002      	add	sp, #8
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	0212      	lsls	r2, r2, #8
 8008d14:	43d2      	mvns	r2, r2
 8008d16:	401a      	ands	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	400b      	ands	r3, r1
 8008d20:	4904      	ldr	r1, [pc, #16]	; (8008d34 <LL_ADC_SetChannelSamplingTime+0x34>)
 8008d22:	400b      	ands	r3, r1
 8008d24:	431a      	orrs	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8008d2a:	46c0      	nop			; (mov r8, r8)
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b004      	add	sp, #16
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	07ffff00 	.word	0x07ffff00

08008d38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	4a05      	ldr	r2, [pc, #20]	; (8008d5c <LL_ADC_EnableInternalRegulator+0x24>)
 8008d46:	4013      	ands	r3, r2
 8008d48:	2280      	movs	r2, #128	; 0x80
 8008d4a:	0552      	lsls	r2, r2, #21
 8008d4c:	431a      	orrs	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	46bd      	mov	sp, r7
 8008d56:	b002      	add	sp, #8
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	6fffffe8 	.word	0x6fffffe8

08008d60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	2380      	movs	r3, #128	; 0x80
 8008d6e:	055b      	lsls	r3, r3, #21
 8008d70:	401a      	ands	r2, r3
 8008d72:	2380      	movs	r3, #128	; 0x80
 8008d74:	055b      	lsls	r3, r3, #21
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d101      	bne.n	8008d7e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e000      	b.n	8008d80 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	0018      	movs	r0, r3
 8008d82:	46bd      	mov	sp, r7
 8008d84:	b002      	add	sp, #8
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	4a04      	ldr	r2, [pc, #16]	; (8008da8 <LL_ADC_Enable+0x20>)
 8008d96:	4013      	ands	r3, r2
 8008d98:	2201      	movs	r2, #1
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008da0:	46c0      	nop			; (mov r8, r8)
 8008da2:	46bd      	mov	sp, r7
 8008da4:	b002      	add	sp, #8
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	7fffffe8 	.word	0x7fffffe8

08008dac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	4a04      	ldr	r2, [pc, #16]	; (8008dcc <LL_ADC_Disable+0x20>)
 8008dba:	4013      	ands	r3, r2
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008dc4:	46c0      	nop			; (mov r8, r8)
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	b002      	add	sp, #8
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	7fffffe8 	.word	0x7fffffe8

08008dd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	4013      	ands	r3, r2
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d101      	bne.n	8008de8 <LL_ADC_IsEnabled+0x18>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e000      	b.n	8008dea <LL_ADC_IsEnabled+0x1a>
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	0018      	movs	r0, r3
 8008dec:	46bd      	mov	sp, r7
 8008dee:	b002      	add	sp, #8
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	4013      	ands	r3, r2
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d101      	bne.n	8008e0a <LL_ADC_IsDisableOngoing+0x18>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <LL_ADC_IsDisableOngoing+0x1a>
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	b002      	add	sp, #8
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	4a04      	ldr	r2, [pc, #16]	; (8008e34 <LL_ADC_REG_StartConversion+0x20>)
 8008e22:	4013      	ands	r3, r2
 8008e24:	2204      	movs	r2, #4
 8008e26:	431a      	orrs	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008e2c:	46c0      	nop			; (mov r8, r8)
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	b002      	add	sp, #8
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	7fffffe8 	.word	0x7fffffe8

08008e38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	2204      	movs	r2, #4
 8008e46:	4013      	ands	r3, r2
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d101      	bne.n	8008e50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e000      	b.n	8008e52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	0018      	movs	r0, r3
 8008e54:	46bd      	mov	sp, r7
 8008e56:	b002      	add	sp, #8
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e64:	231f      	movs	r3, #31
 8008e66:	18fb      	adds	r3, r7, r3
 8008e68:	2200      	movs	r2, #0
 8008e6a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e17f      	b.n	8009182 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10a      	bne.n	8008ea0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f7ff fbc9 	bl	8008624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2254      	movs	r2, #84	; 0x54
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	f7ff ff5b 	bl	8008d60 <LL_ADC_IsInternalRegulatorEnabled>
 8008eaa:	1e03      	subs	r3, r0, #0
 8008eac:	d115      	bne.n	8008eda <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f7ff ff40 	bl	8008d38 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008eb8:	4bb4      	ldr	r3, [pc, #720]	; (800918c <HAL_ADC_Init+0x330>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	49b4      	ldr	r1, [pc, #720]	; (8009190 <HAL_ADC_Init+0x334>)
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	f7fd f996 	bl	80061f0 <__udivsi3>
 8008ec4:	0003      	movs	r3, r0
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008ecc:	e002      	b.n	8008ed4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1f9      	bne.n	8008ece <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	0018      	movs	r0, r3
 8008ee0:	f7ff ff3e 	bl	8008d60 <LL_ADC_IsInternalRegulatorEnabled>
 8008ee4:	1e03      	subs	r3, r0, #0
 8008ee6:	d10f      	bne.n	8008f08 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eec:	2210      	movs	r2, #16
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef8:	2201      	movs	r2, #1
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f00:	231f      	movs	r3, #31
 8008f02:	18fb      	adds	r3, r7, r3
 8008f04:	2201      	movs	r2, #1
 8008f06:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	0018      	movs	r0, r3
 8008f0e:	f7ff ff93 	bl	8008e38 <LL_ADC_REG_IsConversionOngoing>
 8008f12:	0003      	movs	r3, r0
 8008f14:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1a:	2210      	movs	r2, #16
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	d000      	beq.n	8008f22 <HAL_ADC_Init+0xc6>
 8008f20:	e122      	b.n	8009168 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d000      	beq.n	8008f2a <HAL_ADC_Init+0xce>
 8008f28:	e11e      	b.n	8009168 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f2e:	4a99      	ldr	r2, [pc, #612]	; (8009194 <HAL_ADC_Init+0x338>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	2202      	movs	r2, #2
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	0018      	movs	r0, r3
 8008f40:	f7ff ff46 	bl	8008dd0 <LL_ADC_IsEnabled>
 8008f44:	1e03      	subs	r3, r0, #0
 8008f46:	d000      	beq.n	8008f4a <HAL_ADC_Init+0xee>
 8008f48:	e0ad      	b.n	80090a6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	7e1b      	ldrb	r3, [r3, #24]
 8008f52:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8008f54:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	7e5b      	ldrb	r3, [r3, #25]
 8008f5a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008f5c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	7e9b      	ldrb	r3, [r3, #26]
 8008f62:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8008f64:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <HAL_ADC_Init+0x118>
 8008f6e:	2380      	movs	r3, #128	; 0x80
 8008f70:	015b      	lsls	r3, r3, #5
 8008f72:	e000      	b.n	8008f76 <HAL_ADC_Init+0x11a>
 8008f74:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8008f76:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8008f7c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	da04      	bge.n	8008f90 <HAL_ADC_Init+0x134>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	085b      	lsrs	r3, r3, #1
 8008f8e:	e001      	b.n	8008f94 <HAL_ADC_Init+0x138>
 8008f90:	2380      	movs	r3, #128	; 0x80
 8008f92:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8008f94:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	212c      	movs	r1, #44	; 0x2c
 8008f9a:	5c5b      	ldrb	r3, [r3, r1]
 8008f9c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008f9e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	5c9b      	ldrb	r3, [r3, r2]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d115      	bne.n	8008fdc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	7e9b      	ldrb	r3, [r3, #26]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d105      	bne.n	8008fc4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	2280      	movs	r2, #128	; 0x80
 8008fbc:	0252      	lsls	r2, r2, #9
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]
 8008fc2:	e00b      	b.n	8008fdc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc8:	2220      	movs	r2, #32
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fe8:	23e0      	movs	r3, #224	; 0xe0
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	4a65      	ldr	r2, [pc, #404]	; (8009198 <HAL_ADC_Init+0x33c>)
 8009002:	4013      	ands	r3, r2
 8009004:	0019      	movs	r1, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	430a      	orrs	r2, r1
 800900e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	0f9b      	lsrs	r3, r3, #30
 8009016:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800901c:	4313      	orrs	r3, r2
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4313      	orrs	r3, r2
 8009022:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	223c      	movs	r2, #60	; 0x3c
 8009028:	5c9b      	ldrb	r3, [r3, r2]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d111      	bne.n	8009052 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	0f9b      	lsrs	r3, r3, #30
 8009034:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800903a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8009040:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8009046:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	4313      	orrs	r3, r2
 800904c:	2201      	movs	r2, #1
 800904e:	4313      	orrs	r3, r2
 8009050:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	4a50      	ldr	r2, [pc, #320]	; (800919c <HAL_ADC_Init+0x340>)
 800905a:	4013      	ands	r3, r2
 800905c:	0019      	movs	r1, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	430a      	orrs	r2, r1
 8009066:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	23c0      	movs	r3, #192	; 0xc0
 800906e:	061b      	lsls	r3, r3, #24
 8009070:	429a      	cmp	r2, r3
 8009072:	d018      	beq.n	80090a6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009078:	2380      	movs	r3, #128	; 0x80
 800907a:	05db      	lsls	r3, r3, #23
 800907c:	429a      	cmp	r2, r3
 800907e:	d012      	beq.n	80090a6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009084:	2380      	movs	r3, #128	; 0x80
 8009086:	061b      	lsls	r3, r3, #24
 8009088:	429a      	cmp	r2, r3
 800908a:	d00c      	beq.n	80090a6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800908c:	4b44      	ldr	r3, [pc, #272]	; (80091a0 <HAL_ADC_Init+0x344>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a44      	ldr	r2, [pc, #272]	; (80091a4 <HAL_ADC_Init+0x348>)
 8009092:	4013      	ands	r3, r2
 8009094:	0019      	movs	r1, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	23f0      	movs	r3, #240	; 0xf0
 800909c:	039b      	lsls	r3, r3, #14
 800909e:	401a      	ands	r2, r3
 80090a0:	4b3f      	ldr	r3, [pc, #252]	; (80091a0 <HAL_ADC_Init+0x344>)
 80090a2:	430a      	orrs	r2, r1
 80090a4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ae:	001a      	movs	r2, r3
 80090b0:	2100      	movs	r1, #0
 80090b2:	f7ff fdae 	bl	8008c12 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090be:	493a      	ldr	r1, [pc, #232]	; (80091a8 <HAL_ADC_Init+0x34c>)
 80090c0:	001a      	movs	r2, r3
 80090c2:	f7ff fda6 	bl	8008c12 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2110      	movs	r1, #16
 80090da:	4249      	negs	r1, r1
 80090dc:	430a      	orrs	r2, r1
 80090de:	629a      	str	r2, [r3, #40]	; 0x28
 80090e0:	e018      	b.n	8009114 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691a      	ldr	r2, [r3, #16]
 80090e6:	2380      	movs	r3, #128	; 0x80
 80090e8:	039b      	lsls	r3, r3, #14
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d112      	bne.n	8009114 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	221c      	movs	r2, #28
 80090fe:	4013      	ands	r3, r2
 8009100:	2210      	movs	r2, #16
 8009102:	4252      	negs	r2, r2
 8009104:	409a      	lsls	r2, r3
 8009106:	0011      	movs	r1, r2
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2100      	movs	r1, #0
 800911a:	0018      	movs	r0, r3
 800911c:	f7ff fd96 	bl	8008c4c <LL_ADC_GetSamplingTimeCommonChannels>
 8009120:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009126:	429a      	cmp	r2, r3
 8009128:	d10b      	bne.n	8009142 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009134:	2203      	movs	r2, #3
 8009136:	4393      	bics	r3, r2
 8009138:	2201      	movs	r2, #1
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009140:	e01c      	b.n	800917c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009146:	2212      	movs	r2, #18
 8009148:	4393      	bics	r3, r2
 800914a:	2210      	movs	r2, #16
 800914c:	431a      	orrs	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009156:	2201      	movs	r2, #1
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800915e:	231f      	movs	r3, #31
 8009160:	18fb      	adds	r3, r7, r3
 8009162:	2201      	movs	r2, #1
 8009164:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009166:	e009      	b.n	800917c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800916c:	2210      	movs	r2, #16
 800916e:	431a      	orrs	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009174:	231f      	movs	r3, #31
 8009176:	18fb      	adds	r3, r7, r3
 8009178:	2201      	movs	r2, #1
 800917a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800917c:	231f      	movs	r3, #31
 800917e:	18fb      	adds	r3, r7, r3
 8009180:	781b      	ldrb	r3, [r3, #0]
}
 8009182:	0018      	movs	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	b008      	add	sp, #32
 8009188:	bd80      	pop	{r7, pc}
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	2000002c 	.word	0x2000002c
 8009190:	00030d40 	.word	0x00030d40
 8009194:	fffffefd 	.word	0xfffffefd
 8009198:	ffde0201 	.word	0xffde0201
 800919c:	1ffffc02 	.word	0x1ffffc02
 80091a0:	40012708 	.word	0x40012708
 80091a4:	ffc3ffff 	.word	0xffc3ffff
 80091a8:	07ffff04 	.word	0x07ffff04

080091ac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80091ac:	b5b0      	push	{r4, r5, r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	0018      	movs	r0, r3
 80091ba:	f7ff fe3d 	bl	8008e38 <LL_ADC_REG_IsConversionOngoing>
 80091be:	1e03      	subs	r3, r0, #0
 80091c0:	d135      	bne.n	800922e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2254      	movs	r2, #84	; 0x54
 80091c6:	5c9b      	ldrb	r3, [r3, r2]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d101      	bne.n	80091d0 <HAL_ADC_Start+0x24>
 80091cc:	2302      	movs	r3, #2
 80091ce:	e035      	b.n	800923c <HAL_ADC_Start+0x90>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2254      	movs	r2, #84	; 0x54
 80091d4:	2101      	movs	r1, #1
 80091d6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80091d8:	250f      	movs	r5, #15
 80091da:	197c      	adds	r4, r7, r5
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	0018      	movs	r0, r3
 80091e0:	f000 fa0a 	bl	80095f8 <ADC_Enable>
 80091e4:	0003      	movs	r3, r0
 80091e6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80091e8:	197b      	adds	r3, r7, r5
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d119      	bne.n	8009224 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f4:	4a13      	ldr	r2, [pc, #76]	; (8009244 <HAL_ADC_Start+0x98>)
 80091f6:	4013      	ands	r3, r2
 80091f8:	2280      	movs	r2, #128	; 0x80
 80091fa:	0052      	lsls	r2, r2, #1
 80091fc:	431a      	orrs	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	221c      	movs	r2, #28
 800920e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2254      	movs	r2, #84	; 0x54
 8009214:	2100      	movs	r1, #0
 8009216:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	0018      	movs	r0, r3
 800921e:	f7ff fdf9 	bl	8008e14 <LL_ADC_REG_StartConversion>
 8009222:	e008      	b.n	8009236 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2254      	movs	r2, #84	; 0x54
 8009228:	2100      	movs	r1, #0
 800922a:	5499      	strb	r1, [r3, r2]
 800922c:	e003      	b.n	8009236 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800922e:	230f      	movs	r3, #15
 8009230:	18fb      	adds	r3, r7, r3
 8009232:	2202      	movs	r2, #2
 8009234:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009236:	230f      	movs	r3, #15
 8009238:	18fb      	adds	r3, r7, r3
 800923a:	781b      	ldrb	r3, [r3, #0]
}
 800923c:	0018      	movs	r0, r3
 800923e:	46bd      	mov	sp, r7
 8009240:	b004      	add	sp, #16
 8009242:	bdb0      	pop	{r4, r5, r7, pc}
 8009244:	fffff0fe 	.word	0xfffff0fe

08009248 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009252:	2317      	movs	r3, #23
 8009254:	18fb      	adds	r3, r7, r3
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800925a:	2300      	movs	r3, #0
 800925c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2254      	movs	r2, #84	; 0x54
 8009262:	5c9b      	ldrb	r3, [r3, r2]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d101      	bne.n	800926c <HAL_ADC_ConfigChannel+0x24>
 8009268:	2302      	movs	r3, #2
 800926a:	e1c0      	b.n	80095ee <HAL_ADC_ConfigChannel+0x3a6>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2254      	movs	r2, #84	; 0x54
 8009270:	2101      	movs	r1, #1
 8009272:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	0018      	movs	r0, r3
 800927a:	f7ff fddd 	bl	8008e38 <LL_ADC_REG_IsConversionOngoing>
 800927e:	1e03      	subs	r3, r0, #0
 8009280:	d000      	beq.n	8009284 <HAL_ADC_ConfigChannel+0x3c>
 8009282:	e1a3      	b.n	80095cc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d100      	bne.n	800928e <HAL_ADC_ConfigChannel+0x46>
 800928c:	e143      	b.n	8009516 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691a      	ldr	r2, [r3, #16]
 8009292:	2380      	movs	r3, #128	; 0x80
 8009294:	061b      	lsls	r3, r3, #24
 8009296:	429a      	cmp	r2, r3
 8009298:	d004      	beq.n	80092a4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800929e:	4ac1      	ldr	r2, [pc, #772]	; (80095a4 <HAL_ADC_ConfigChannel+0x35c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d108      	bne.n	80092b6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	0019      	movs	r1, r3
 80092ae:	0010      	movs	r0, r2
 80092b0:	f7ff fd03 	bl	8008cba <LL_ADC_REG_SetSequencerChAdd>
 80092b4:	e0c9      	b.n	800944a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	211f      	movs	r1, #31
 80092c0:	400b      	ands	r3, r1
 80092c2:	210f      	movs	r1, #15
 80092c4:	4099      	lsls	r1, r3
 80092c6:	000b      	movs	r3, r1
 80092c8:	43db      	mvns	r3, r3
 80092ca:	4013      	ands	r3, r2
 80092cc:	0019      	movs	r1, r3
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	035b      	lsls	r3, r3, #13
 80092d4:	0b5b      	lsrs	r3, r3, #13
 80092d6:	d105      	bne.n	80092e4 <HAL_ADC_ConfigChannel+0x9c>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	0e9b      	lsrs	r3, r3, #26
 80092de:	221f      	movs	r2, #31
 80092e0:	4013      	ands	r3, r2
 80092e2:	e098      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2201      	movs	r2, #1
 80092ea:	4013      	ands	r3, r2
 80092ec:	d000      	beq.n	80092f0 <HAL_ADC_ConfigChannel+0xa8>
 80092ee:	e091      	b.n	8009414 <HAL_ADC_ConfigChannel+0x1cc>
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2202      	movs	r2, #2
 80092f6:	4013      	ands	r3, r2
 80092f8:	d000      	beq.n	80092fc <HAL_ADC_ConfigChannel+0xb4>
 80092fa:	e089      	b.n	8009410 <HAL_ADC_ConfigChannel+0x1c8>
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2204      	movs	r2, #4
 8009302:	4013      	ands	r3, r2
 8009304:	d000      	beq.n	8009308 <HAL_ADC_ConfigChannel+0xc0>
 8009306:	e081      	b.n	800940c <HAL_ADC_ConfigChannel+0x1c4>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2208      	movs	r2, #8
 800930e:	4013      	ands	r3, r2
 8009310:	d000      	beq.n	8009314 <HAL_ADC_ConfigChannel+0xcc>
 8009312:	e079      	b.n	8009408 <HAL_ADC_ConfigChannel+0x1c0>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2210      	movs	r2, #16
 800931a:	4013      	ands	r3, r2
 800931c:	d000      	beq.n	8009320 <HAL_ADC_ConfigChannel+0xd8>
 800931e:	e071      	b.n	8009404 <HAL_ADC_ConfigChannel+0x1bc>
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2220      	movs	r2, #32
 8009326:	4013      	ands	r3, r2
 8009328:	d000      	beq.n	800932c <HAL_ADC_ConfigChannel+0xe4>
 800932a:	e069      	b.n	8009400 <HAL_ADC_ConfigChannel+0x1b8>
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2240      	movs	r2, #64	; 0x40
 8009332:	4013      	ands	r3, r2
 8009334:	d000      	beq.n	8009338 <HAL_ADC_ConfigChannel+0xf0>
 8009336:	e061      	b.n	80093fc <HAL_ADC_ConfigChannel+0x1b4>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2280      	movs	r2, #128	; 0x80
 800933e:	4013      	ands	r3, r2
 8009340:	d000      	beq.n	8009344 <HAL_ADC_ConfigChannel+0xfc>
 8009342:	e059      	b.n	80093f8 <HAL_ADC_ConfigChannel+0x1b0>
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	2380      	movs	r3, #128	; 0x80
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	4013      	ands	r3, r2
 800934e:	d151      	bne.n	80093f4 <HAL_ADC_ConfigChannel+0x1ac>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	2380      	movs	r3, #128	; 0x80
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4013      	ands	r3, r2
 800935a:	d149      	bne.n	80093f0 <HAL_ADC_ConfigChannel+0x1a8>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	2380      	movs	r3, #128	; 0x80
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	4013      	ands	r3, r2
 8009366:	d141      	bne.n	80093ec <HAL_ADC_ConfigChannel+0x1a4>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	2380      	movs	r3, #128	; 0x80
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	4013      	ands	r3, r2
 8009372:	d139      	bne.n	80093e8 <HAL_ADC_ConfigChannel+0x1a0>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	2380      	movs	r3, #128	; 0x80
 800937a:	015b      	lsls	r3, r3, #5
 800937c:	4013      	ands	r3, r2
 800937e:	d131      	bne.n	80093e4 <HAL_ADC_ConfigChannel+0x19c>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	2380      	movs	r3, #128	; 0x80
 8009386:	019b      	lsls	r3, r3, #6
 8009388:	4013      	ands	r3, r2
 800938a:	d129      	bne.n	80093e0 <HAL_ADC_ConfigChannel+0x198>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	2380      	movs	r3, #128	; 0x80
 8009392:	01db      	lsls	r3, r3, #7
 8009394:	4013      	ands	r3, r2
 8009396:	d121      	bne.n	80093dc <HAL_ADC_ConfigChannel+0x194>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	021b      	lsls	r3, r3, #8
 80093a0:	4013      	ands	r3, r2
 80093a2:	d119      	bne.n	80093d8 <HAL_ADC_ConfigChannel+0x190>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	2380      	movs	r3, #128	; 0x80
 80093aa:	025b      	lsls	r3, r3, #9
 80093ac:	4013      	ands	r3, r2
 80093ae:	d111      	bne.n	80093d4 <HAL_ADC_ConfigChannel+0x18c>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	2380      	movs	r3, #128	; 0x80
 80093b6:	029b      	lsls	r3, r3, #10
 80093b8:	4013      	ands	r3, r2
 80093ba:	d109      	bne.n	80093d0 <HAL_ADC_ConfigChannel+0x188>
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	2380      	movs	r3, #128	; 0x80
 80093c2:	02db      	lsls	r3, r3, #11
 80093c4:	4013      	ands	r3, r2
 80093c6:	d001      	beq.n	80093cc <HAL_ADC_ConfigChannel+0x184>
 80093c8:	2312      	movs	r3, #18
 80093ca:	e024      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093cc:	2300      	movs	r3, #0
 80093ce:	e022      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093d0:	2311      	movs	r3, #17
 80093d2:	e020      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093d4:	2310      	movs	r3, #16
 80093d6:	e01e      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093d8:	230f      	movs	r3, #15
 80093da:	e01c      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093dc:	230e      	movs	r3, #14
 80093de:	e01a      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093e0:	230d      	movs	r3, #13
 80093e2:	e018      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093e4:	230c      	movs	r3, #12
 80093e6:	e016      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093e8:	230b      	movs	r3, #11
 80093ea:	e014      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093ec:	230a      	movs	r3, #10
 80093ee:	e012      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093f0:	2309      	movs	r3, #9
 80093f2:	e010      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093f4:	2308      	movs	r3, #8
 80093f6:	e00e      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093f8:	2307      	movs	r3, #7
 80093fa:	e00c      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 80093fc:	2306      	movs	r3, #6
 80093fe:	e00a      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 8009400:	2305      	movs	r3, #5
 8009402:	e008      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 8009404:	2304      	movs	r3, #4
 8009406:	e006      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 8009408:	2303      	movs	r3, #3
 800940a:	e004      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 800940c:	2302      	movs	r3, #2
 800940e:	e002      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 8009410:	2301      	movs	r3, #1
 8009412:	e000      	b.n	8009416 <HAL_ADC_ConfigChannel+0x1ce>
 8009414:	2300      	movs	r3, #0
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	6852      	ldr	r2, [r2, #4]
 800941a:	201f      	movs	r0, #31
 800941c:	4002      	ands	r2, r0
 800941e:	4093      	lsls	r3, r2
 8009420:	000a      	movs	r2, r1
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	089b      	lsrs	r3, r3, #2
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	429a      	cmp	r2, r3
 8009436:	d808      	bhi.n	800944a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	6859      	ldr	r1, [r3, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	001a      	movs	r2, r3
 8009446:	f7ff fc18 	bl	8008c7a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	6819      	ldr	r1, [r3, #0]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	001a      	movs	r2, r3
 8009458:	f7ff fc52 	bl	8008d00 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	db00      	blt.n	8009466 <HAL_ADC_ConfigChannel+0x21e>
 8009464:	e0bc      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009466:	4b50      	ldr	r3, [pc, #320]	; (80095a8 <HAL_ADC_ConfigChannel+0x360>)
 8009468:	0018      	movs	r0, r3
 800946a:	f7ff fbc5 	bl	8008bf8 <LL_ADC_GetCommonPathInternalCh>
 800946e:	0003      	movs	r3, r0
 8009470:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a4d      	ldr	r2, [pc, #308]	; (80095ac <HAL_ADC_ConfigChannel+0x364>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d122      	bne.n	80094c2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	2380      	movs	r3, #128	; 0x80
 8009480:	041b      	lsls	r3, r3, #16
 8009482:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009484:	d11d      	bne.n	80094c2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2280      	movs	r2, #128	; 0x80
 800948a:	0412      	lsls	r2, r2, #16
 800948c:	4313      	orrs	r3, r2
 800948e:	4a46      	ldr	r2, [pc, #280]	; (80095a8 <HAL_ADC_ConfigChannel+0x360>)
 8009490:	0019      	movs	r1, r3
 8009492:	0010      	movs	r0, r2
 8009494:	f7ff fb9c 	bl	8008bd0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009498:	4b45      	ldr	r3, [pc, #276]	; (80095b0 <HAL_ADC_ConfigChannel+0x368>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4945      	ldr	r1, [pc, #276]	; (80095b4 <HAL_ADC_ConfigChannel+0x36c>)
 800949e:	0018      	movs	r0, r3
 80094a0:	f7fc fea6 	bl	80061f0 <__udivsi3>
 80094a4:	0003      	movs	r3, r0
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	0013      	movs	r3, r2
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	189b      	adds	r3, r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80094b2:	e002      	b.n	80094ba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1f9      	bne.n	80094b4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80094c0:	e08e      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a3c      	ldr	r2, [pc, #240]	; (80095b8 <HAL_ADC_ConfigChannel+0x370>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d10e      	bne.n	80094ea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	2380      	movs	r3, #128	; 0x80
 80094d0:	045b      	lsls	r3, r3, #17
 80094d2:	4013      	ands	r3, r2
 80094d4:	d109      	bne.n	80094ea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	2280      	movs	r2, #128	; 0x80
 80094da:	0452      	lsls	r2, r2, #17
 80094dc:	4313      	orrs	r3, r2
 80094de:	4a32      	ldr	r2, [pc, #200]	; (80095a8 <HAL_ADC_ConfigChannel+0x360>)
 80094e0:	0019      	movs	r1, r3
 80094e2:	0010      	movs	r0, r2
 80094e4:	f7ff fb74 	bl	8008bd0 <LL_ADC_SetCommonPathInternalCh>
 80094e8:	e07a      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a33      	ldr	r2, [pc, #204]	; (80095bc <HAL_ADC_ConfigChannel+0x374>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d000      	beq.n	80094f6 <HAL_ADC_ConfigChannel+0x2ae>
 80094f4:	e074      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	2380      	movs	r3, #128	; 0x80
 80094fa:	03db      	lsls	r3, r3, #15
 80094fc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80094fe:	d000      	beq.n	8009502 <HAL_ADC_ConfigChannel+0x2ba>
 8009500:	e06e      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	2280      	movs	r2, #128	; 0x80
 8009506:	03d2      	lsls	r2, r2, #15
 8009508:	4313      	orrs	r3, r2
 800950a:	4a27      	ldr	r2, [pc, #156]	; (80095a8 <HAL_ADC_ConfigChannel+0x360>)
 800950c:	0019      	movs	r1, r3
 800950e:	0010      	movs	r0, r2
 8009510:	f7ff fb5e 	bl	8008bd0 <LL_ADC_SetCommonPathInternalCh>
 8009514:	e064      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	2380      	movs	r3, #128	; 0x80
 800951c:	061b      	lsls	r3, r3, #24
 800951e:	429a      	cmp	r2, r3
 8009520:	d004      	beq.n	800952c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009526:	4a1f      	ldr	r2, [pc, #124]	; (80095a4 <HAL_ADC_ConfigChannel+0x35c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d107      	bne.n	800953c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	0019      	movs	r1, r3
 8009536:	0010      	movs	r0, r2
 8009538:	f7ff fbd0 	bl	8008cdc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	da4d      	bge.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009544:	4b18      	ldr	r3, [pc, #96]	; (80095a8 <HAL_ADC_ConfigChannel+0x360>)
 8009546:	0018      	movs	r0, r3
 8009548:	f7ff fb56 	bl	8008bf8 <LL_ADC_GetCommonPathInternalCh>
 800954c:	0003      	movs	r3, r0
 800954e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a15      	ldr	r2, [pc, #84]	; (80095ac <HAL_ADC_ConfigChannel+0x364>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d108      	bne.n	800956c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	4a18      	ldr	r2, [pc, #96]	; (80095c0 <HAL_ADC_ConfigChannel+0x378>)
 800955e:	4013      	ands	r3, r2
 8009560:	4a11      	ldr	r2, [pc, #68]	; (80095a8 <HAL_ADC_ConfigChannel+0x360>)
 8009562:	0019      	movs	r1, r3
 8009564:	0010      	movs	r0, r2
 8009566:	f7ff fb33 	bl	8008bd0 <LL_ADC_SetCommonPathInternalCh>
 800956a:	e039      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a11      	ldr	r2, [pc, #68]	; (80095b8 <HAL_ADC_ConfigChannel+0x370>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d108      	bne.n	8009588 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	4a12      	ldr	r2, [pc, #72]	; (80095c4 <HAL_ADC_ConfigChannel+0x37c>)
 800957a:	4013      	ands	r3, r2
 800957c:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <HAL_ADC_ConfigChannel+0x360>)
 800957e:	0019      	movs	r1, r3
 8009580:	0010      	movs	r0, r2
 8009582:	f7ff fb25 	bl	8008bd0 <LL_ADC_SetCommonPathInternalCh>
 8009586:	e02b      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a0b      	ldr	r2, [pc, #44]	; (80095bc <HAL_ADC_ConfigChannel+0x374>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d126      	bne.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	4a0c      	ldr	r2, [pc, #48]	; (80095c8 <HAL_ADC_ConfigChannel+0x380>)
 8009596:	4013      	ands	r3, r2
 8009598:	4a03      	ldr	r2, [pc, #12]	; (80095a8 <HAL_ADC_ConfigChannel+0x360>)
 800959a:	0019      	movs	r1, r3
 800959c:	0010      	movs	r0, r2
 800959e:	f7ff fb17 	bl	8008bd0 <LL_ADC_SetCommonPathInternalCh>
 80095a2:	e01d      	b.n	80095e0 <HAL_ADC_ConfigChannel+0x398>
 80095a4:	80000004 	.word	0x80000004
 80095a8:	40012708 	.word	0x40012708
 80095ac:	b0001000 	.word	0xb0001000
 80095b0:	2000002c 	.word	0x2000002c
 80095b4:	00030d40 	.word	0x00030d40
 80095b8:	b8004000 	.word	0xb8004000
 80095bc:	b4002000 	.word	0xb4002000
 80095c0:	ff7fffff 	.word	0xff7fffff
 80095c4:	feffffff 	.word	0xfeffffff
 80095c8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d0:	2220      	movs	r2, #32
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80095d8:	2317      	movs	r3, #23
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	2201      	movs	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2254      	movs	r2, #84	; 0x54
 80095e4:	2100      	movs	r1, #0
 80095e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80095e8:	2317      	movs	r3, #23
 80095ea:	18fb      	adds	r3, r7, r3
 80095ec:	781b      	ldrb	r3, [r3, #0]
}
 80095ee:	0018      	movs	r0, r3
 80095f0:	46bd      	mov	sp, r7
 80095f2:	b006      	add	sp, #24
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	46c0      	nop			; (mov r8, r8)

080095f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009600:	2300      	movs	r3, #0
 8009602:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	0018      	movs	r0, r3
 800960a:	f7ff fbe1 	bl	8008dd0 <LL_ADC_IsEnabled>
 800960e:	1e03      	subs	r3, r0, #0
 8009610:	d000      	beq.n	8009614 <ADC_Enable+0x1c>
 8009612:	e069      	b.n	80096e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	4a36      	ldr	r2, [pc, #216]	; (80096f4 <ADC_Enable+0xfc>)
 800961c:	4013      	ands	r3, r2
 800961e:	d00d      	beq.n	800963c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009624:	2210      	movs	r2, #16
 8009626:	431a      	orrs	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009630:	2201      	movs	r2, #1
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e056      	b.n	80096ea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	0018      	movs	r0, r3
 8009642:	f7ff fba1 	bl	8008d88 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8009646:	4b2c      	ldr	r3, [pc, #176]	; (80096f8 <ADC_Enable+0x100>)
 8009648:	0018      	movs	r0, r3
 800964a:	f7ff fad5 	bl	8008bf8 <LL_ADC_GetCommonPathInternalCh>
 800964e:	0002      	movs	r2, r0
 8009650:	2380      	movs	r3, #128	; 0x80
 8009652:	041b      	lsls	r3, r3, #16
 8009654:	4013      	ands	r3, r2
 8009656:	d00f      	beq.n	8009678 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009658:	4b28      	ldr	r3, [pc, #160]	; (80096fc <ADC_Enable+0x104>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4928      	ldr	r1, [pc, #160]	; (8009700 <ADC_Enable+0x108>)
 800965e:	0018      	movs	r0, r3
 8009660:	f7fc fdc6 	bl	80061f0 <__udivsi3>
 8009664:	0003      	movs	r3, r0
 8009666:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8009668:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800966a:	e002      	b.n	8009672 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	3b01      	subs	r3, #1
 8009670:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1f9      	bne.n	800966c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	7e5b      	ldrb	r3, [r3, #25]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d033      	beq.n	80096e8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8009680:	f7ff fa62 	bl	8008b48 <HAL_GetTick>
 8009684:	0003      	movs	r3, r0
 8009686:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009688:	e027      	b.n	80096da <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	0018      	movs	r0, r3
 8009690:	f7ff fb9e 	bl	8008dd0 <LL_ADC_IsEnabled>
 8009694:	1e03      	subs	r3, r0, #0
 8009696:	d104      	bne.n	80096a2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	0018      	movs	r0, r3
 800969e:	f7ff fb73 	bl	8008d88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80096a2:	f7ff fa51 	bl	8008b48 <HAL_GetTick>
 80096a6:	0002      	movs	r2, r0
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d914      	bls.n	80096da <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2201      	movs	r2, #1
 80096b8:	4013      	ands	r3, r2
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d00d      	beq.n	80096da <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c2:	2210      	movs	r2, #16
 80096c4:	431a      	orrs	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096ce:	2201      	movs	r2, #1
 80096d0:	431a      	orrs	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e007      	b.n	80096ea <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2201      	movs	r2, #1
 80096e2:	4013      	ands	r3, r2
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d1d0      	bne.n	800968a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	0018      	movs	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b004      	add	sp, #16
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	80000017 	.word	0x80000017
 80096f8:	40012708 	.word	0x40012708
 80096fc:	2000002c 	.word	0x2000002c
 8009700:	00030d40 	.word	0x00030d40

08009704 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	0018      	movs	r0, r3
 8009712:	f7ff fb6e 	bl	8008df2 <LL_ADC_IsDisableOngoing>
 8009716:	0003      	movs	r3, r0
 8009718:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	0018      	movs	r0, r3
 8009720:	f7ff fb56 	bl	8008dd0 <LL_ADC_IsEnabled>
 8009724:	1e03      	subs	r3, r0, #0
 8009726:	d046      	beq.n	80097b6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d143      	bne.n	80097b6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	2205      	movs	r2, #5
 8009736:	4013      	ands	r3, r2
 8009738:	2b01      	cmp	r3, #1
 800973a:	d10d      	bne.n	8009758 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	0018      	movs	r0, r3
 8009742:	f7ff fb33 	bl	8008dac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2203      	movs	r2, #3
 800974c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800974e:	f7ff f9fb 	bl	8008b48 <HAL_GetTick>
 8009752:	0003      	movs	r3, r0
 8009754:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009756:	e028      	b.n	80097aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975c:	2210      	movs	r2, #16
 800975e:	431a      	orrs	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009768:	2201      	movs	r2, #1
 800976a:	431a      	orrs	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e021      	b.n	80097b8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009774:	f7ff f9e8 	bl	8008b48 <HAL_GetTick>
 8009778:	0002      	movs	r2, r0
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	2b02      	cmp	r3, #2
 8009780:	d913      	bls.n	80097aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	2201      	movs	r2, #1
 800978a:	4013      	ands	r3, r2
 800978c:	d00d      	beq.n	80097aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009792:	2210      	movs	r2, #16
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800979e:	2201      	movs	r2, #1
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e006      	b.n	80097b8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	2201      	movs	r2, #1
 80097b2:	4013      	ands	r3, r2
 80097b4:	d1de      	bne.n	8009774 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	0018      	movs	r0, r3
 80097ba:	46bd      	mov	sp, r7
 80097bc:	b004      	add	sp, #16
 80097be:	bd80      	pop	{r7, pc}

080097c0 <LL_ADC_GetCommonClock>:
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	23f0      	movs	r3, #240	; 0xf0
 80097ce:	039b      	lsls	r3, r3, #14
 80097d0:	4013      	ands	r3, r2
}
 80097d2:	0018      	movs	r0, r3
 80097d4:	46bd      	mov	sp, r7
 80097d6:	b002      	add	sp, #8
 80097d8:	bd80      	pop	{r7, pc}

080097da <LL_ADC_GetClock>:
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b082      	sub	sp, #8
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	0f9b      	lsrs	r3, r3, #30
 80097e8:	079b      	lsls	r3, r3, #30
}
 80097ea:	0018      	movs	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	b002      	add	sp, #8
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <LL_ADC_SetCalibrationFactor>:
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b082      	sub	sp, #8
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	22b4      	movs	r2, #180	; 0xb4
 8009800:	589b      	ldr	r3, [r3, r2]
 8009802:	227f      	movs	r2, #127	; 0x7f
 8009804:	4393      	bics	r3, r2
 8009806:	001a      	movs	r2, r3
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	21b4      	movs	r1, #180	; 0xb4
 8009810:	505a      	str	r2, [r3, r1]
}
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	46bd      	mov	sp, r7
 8009816:	b002      	add	sp, #8
 8009818:	bd80      	pop	{r7, pc}

0800981a <LL_ADC_GetCalibrationFactor>:
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	22b4      	movs	r2, #180	; 0xb4
 8009826:	589b      	ldr	r3, [r3, r2]
 8009828:	227f      	movs	r2, #127	; 0x7f
 800982a:	4013      	ands	r3, r2
}
 800982c:	0018      	movs	r0, r3
 800982e:	46bd      	mov	sp, r7
 8009830:	b002      	add	sp, #8
 8009832:	bd80      	pop	{r7, pc}

08009834 <LL_ADC_Enable>:
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	4a04      	ldr	r2, [pc, #16]	; (8009854 <LL_ADC_Enable+0x20>)
 8009842:	4013      	ands	r3, r2
 8009844:	2201      	movs	r2, #1
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	609a      	str	r2, [r3, #8]
}
 800984c:	46c0      	nop			; (mov r8, r8)
 800984e:	46bd      	mov	sp, r7
 8009850:	b002      	add	sp, #8
 8009852:	bd80      	pop	{r7, pc}
 8009854:	7fffffe8 	.word	0x7fffffe8

08009858 <LL_ADC_Disable>:
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	4a04      	ldr	r2, [pc, #16]	; (8009878 <LL_ADC_Disable+0x20>)
 8009866:	4013      	ands	r3, r2
 8009868:	2202      	movs	r2, #2
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	609a      	str	r2, [r3, #8]
}
 8009870:	46c0      	nop			; (mov r8, r8)
 8009872:	46bd      	mov	sp, r7
 8009874:	b002      	add	sp, #8
 8009876:	bd80      	pop	{r7, pc}
 8009878:	7fffffe8 	.word	0x7fffffe8

0800987c <LL_ADC_IsEnabled>:
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2201      	movs	r2, #1
 800988a:	4013      	ands	r3, r2
 800988c:	2b01      	cmp	r3, #1
 800988e:	d101      	bne.n	8009894 <LL_ADC_IsEnabled+0x18>
 8009890:	2301      	movs	r3, #1
 8009892:	e000      	b.n	8009896 <LL_ADC_IsEnabled+0x1a>
 8009894:	2300      	movs	r3, #0
}
 8009896:	0018      	movs	r0, r3
 8009898:	46bd      	mov	sp, r7
 800989a:	b002      	add	sp, #8
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <LL_ADC_StartCalibration>:
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	4a05      	ldr	r2, [pc, #20]	; (80098c4 <LL_ADC_StartCalibration+0x24>)
 80098ae:	4013      	ands	r3, r2
 80098b0:	2280      	movs	r2, #128	; 0x80
 80098b2:	0612      	lsls	r2, r2, #24
 80098b4:	431a      	orrs	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	609a      	str	r2, [r3, #8]
}
 80098ba:	46c0      	nop			; (mov r8, r8)
 80098bc:	46bd      	mov	sp, r7
 80098be:	b002      	add	sp, #8
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	46c0      	nop			; (mov r8, r8)
 80098c4:	7fffffe8 	.word	0x7fffffe8

080098c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	0fdb      	lsrs	r3, r3, #31
 80098d6:	07da      	lsls	r2, r3, #31
 80098d8:	2380      	movs	r3, #128	; 0x80
 80098da:	061b      	lsls	r3, r3, #24
 80098dc:	429a      	cmp	r2, r3
 80098de:	d101      	bne.n	80098e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80098e0:	2301      	movs	r3, #1
 80098e2:	e000      	b.n	80098e6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	0018      	movs	r0, r3
 80098e8:	46bd      	mov	sp, r7
 80098ea:	b002      	add	sp, #8
 80098ec:	bd80      	pop	{r7, pc}
	...

080098f0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80098f0:	b590      	push	{r4, r7, lr}
 80098f2:	b08b      	sub	sp, #44	; 0x2c
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2254      	movs	r2, #84	; 0x54
 8009904:	5c9b      	ldrb	r3, [r3, r2]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <HAL_ADCEx_Calibration_Start+0x1e>
 800990a:	2302      	movs	r3, #2
 800990c:	e0dd      	b.n	8009aca <HAL_ADCEx_Calibration_Start+0x1da>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2254      	movs	r2, #84	; 0x54
 8009912:	2101      	movs	r1, #1
 8009914:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009916:	231f      	movs	r3, #31
 8009918:	18fc      	adds	r4, r7, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	0018      	movs	r0, r3
 800991e:	f7ff fef1 	bl	8009704 <ADC_Disable>
 8009922:	0003      	movs	r3, r0
 8009924:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	0018      	movs	r0, r3
 800992c:	f7ff ffa6 	bl	800987c <LL_ADC_IsEnabled>
 8009930:	1e03      	subs	r3, r0, #0
 8009932:	d000      	beq.n	8009936 <HAL_ADCEx_Calibration_Start+0x46>
 8009934:	e0bc      	b.n	8009ab0 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800993a:	4a66      	ldr	r2, [pc, #408]	; (8009ad4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800993c:	4013      	ands	r3, r2
 800993e:	2202      	movs	r2, #2
 8009940:	431a      	orrs	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	4a62      	ldr	r2, [pc, #392]	; (8009ad8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800994e:	4013      	ands	r3, r2
 8009950:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68da      	ldr	r2, [r3, #12]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	495f      	ldr	r1, [pc, #380]	; (8009adc <HAL_ADCEx_Calibration_Start+0x1ec>)
 800995e:	400a      	ands	r2, r1
 8009960:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8009962:	2300      	movs	r3, #0
 8009964:	627b      	str	r3, [r7, #36]	; 0x24
 8009966:	e02d      	b.n	80099c4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	0018      	movs	r0, r3
 800996e:	f7ff ff97 	bl	80098a0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009972:	e014      	b.n	800999e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4a58      	ldr	r2, [pc, #352]	; (8009ae0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d90d      	bls.n	800999e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009986:	2212      	movs	r2, #18
 8009988:	4393      	bics	r3, r2
 800998a:	2210      	movs	r2, #16
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2254      	movs	r2, #84	; 0x54
 8009996:	2100      	movs	r1, #0
 8009998:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e095      	b.n	8009aca <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	0018      	movs	r0, r3
 80099a4:	f7ff ff90 	bl	80098c8 <LL_ADC_IsCalibrationOnGoing>
 80099a8:	1e03      	subs	r3, r0, #0
 80099aa:	d1e3      	bne.n	8009974 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	0018      	movs	r0, r3
 80099b2:	f7ff ff32 	bl	800981a <LL_ADC_GetCalibrationFactor>
 80099b6:	0002      	movs	r2, r0
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	189b      	adds	r3, r3, r2
 80099bc:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	3301      	adds	r3, #1
 80099c2:	627b      	str	r3, [r7, #36]	; 0x24
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	2b07      	cmp	r3, #7
 80099c8:	d9ce      	bls.n	8009968 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80099ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099cc:	6a38      	ldr	r0, [r7, #32]
 80099ce:	f7fc fc0f 	bl	80061f0 <__udivsi3>
 80099d2:	0003      	movs	r3, r0
 80099d4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	0018      	movs	r0, r3
 80099dc:	f7ff ff2a 	bl	8009834 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	0018      	movs	r0, r3
 80099e6:	f7ff fef8 	bl	80097da <LL_ADC_GetClock>
 80099ea:	1e03      	subs	r3, r0, #0
 80099ec:	d11b      	bne.n	8009a26 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80099ee:	4b3d      	ldr	r3, [pc, #244]	; (8009ae4 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80099f0:	0018      	movs	r0, r3
 80099f2:	f7ff fee5 	bl	80097c0 <LL_ADC_GetCommonClock>
 80099f6:	0003      	movs	r3, r0
 80099f8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	23e0      	movs	r3, #224	; 0xe0
 80099fe:	035b      	lsls	r3, r3, #13
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d310      	bcc.n	8009a26 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	0c9b      	lsrs	r3, r3, #18
 8009a08:	3b03      	subs	r3, #3
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	409a      	lsls	r2, r3
 8009a0e:	0013      	movs	r3, r2
 8009a10:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	085b      	lsrs	r3, r3, #1
 8009a16:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8009a18:	e002      	b.n	8009a20 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1f9      	bne.n	8009a1a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6a3a      	ldr	r2, [r7, #32]
 8009a2c:	0011      	movs	r1, r2
 8009a2e:	0018      	movs	r0, r3
 8009a30:	f7ff fedf 	bl	80097f2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f7ff ff0d 	bl	8009858 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009a3e:	f7ff f883 	bl	8008b48 <HAL_GetTick>
 8009a42:	0003      	movs	r3, r0
 8009a44:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009a46:	e01b      	b.n	8009a80 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009a48:	f7ff f87e 	bl	8008b48 <HAL_GetTick>
 8009a4c:	0002      	movs	r2, r0
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d914      	bls.n	8009a80 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f7ff ff0e 	bl	800987c <LL_ADC_IsEnabled>
 8009a60:	1e03      	subs	r3, r0, #0
 8009a62:	d00d      	beq.n	8009a80 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a68:	2210      	movs	r2, #16
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a74:	2201      	movs	r2, #1
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e024      	b.n	8009aca <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	0018      	movs	r0, r3
 8009a86:	f7ff fef9 	bl	800987c <LL_ADC_IsEnabled>
 8009a8a:	1e03      	subs	r3, r0, #0
 8009a8c:	d1dc      	bne.n	8009a48 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68d9      	ldr	r1, [r3, #12]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	69ba      	ldr	r2, [r7, #24]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa2:	2203      	movs	r2, #3
 8009aa4:	4393      	bics	r3, r2
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	659a      	str	r2, [r3, #88]	; 0x58
 8009aae:	e005      	b.n	8009abc <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab4:	2210      	movs	r2, #16
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2254      	movs	r2, #84	; 0x54
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8009ac4:	231f      	movs	r3, #31
 8009ac6:	18fb      	adds	r3, r7, r3
 8009ac8:	781b      	ldrb	r3, [r3, #0]
}
 8009aca:	0018      	movs	r0, r3
 8009acc:	46bd      	mov	sp, r7
 8009ace:	b00b      	add	sp, #44	; 0x2c
 8009ad0:	bd90      	pop	{r4, r7, pc}
 8009ad2:	46c0      	nop			; (mov r8, r8)
 8009ad4:	fffffefd 	.word	0xfffffefd
 8009ad8:	00008003 	.word	0x00008003
 8009adc:	ffff7ffc 	.word	0xffff7ffc
 8009ae0:	0002f1ff 	.word	0x0002f1ff
 8009ae4:	40012708 	.word	0x40012708

08009ae8 <__NVIC_EnableIRQ>:
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	0002      	movs	r2, r0
 8009af0:	1dfb      	adds	r3, r7, #7
 8009af2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009af4:	1dfb      	adds	r3, r7, #7
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b7f      	cmp	r3, #127	; 0x7f
 8009afa:	d809      	bhi.n	8009b10 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009afc:	1dfb      	adds	r3, r7, #7
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	001a      	movs	r2, r3
 8009b02:	231f      	movs	r3, #31
 8009b04:	401a      	ands	r2, r3
 8009b06:	4b04      	ldr	r3, [pc, #16]	; (8009b18 <__NVIC_EnableIRQ+0x30>)
 8009b08:	2101      	movs	r1, #1
 8009b0a:	4091      	lsls	r1, r2
 8009b0c:	000a      	movs	r2, r1
 8009b0e:	601a      	str	r2, [r3, #0]
}
 8009b10:	46c0      	nop			; (mov r8, r8)
 8009b12:	46bd      	mov	sp, r7
 8009b14:	b002      	add	sp, #8
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	e000e100 	.word	0xe000e100

08009b1c <__NVIC_SetPriority>:
{
 8009b1c:	b590      	push	{r4, r7, lr}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	0002      	movs	r2, r0
 8009b24:	6039      	str	r1, [r7, #0]
 8009b26:	1dfb      	adds	r3, r7, #7
 8009b28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009b2a:	1dfb      	adds	r3, r7, #7
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8009b30:	d828      	bhi.n	8009b84 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b32:	4a2f      	ldr	r2, [pc, #188]	; (8009bf0 <__NVIC_SetPriority+0xd4>)
 8009b34:	1dfb      	adds	r3, r7, #7
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	b25b      	sxtb	r3, r3
 8009b3a:	089b      	lsrs	r3, r3, #2
 8009b3c:	33c0      	adds	r3, #192	; 0xc0
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	589b      	ldr	r3, [r3, r2]
 8009b42:	1dfa      	adds	r2, r7, #7
 8009b44:	7812      	ldrb	r2, [r2, #0]
 8009b46:	0011      	movs	r1, r2
 8009b48:	2203      	movs	r2, #3
 8009b4a:	400a      	ands	r2, r1
 8009b4c:	00d2      	lsls	r2, r2, #3
 8009b4e:	21ff      	movs	r1, #255	; 0xff
 8009b50:	4091      	lsls	r1, r2
 8009b52:	000a      	movs	r2, r1
 8009b54:	43d2      	mvns	r2, r2
 8009b56:	401a      	ands	r2, r3
 8009b58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	019b      	lsls	r3, r3, #6
 8009b5e:	22ff      	movs	r2, #255	; 0xff
 8009b60:	401a      	ands	r2, r3
 8009b62:	1dfb      	adds	r3, r7, #7
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	0018      	movs	r0, r3
 8009b68:	2303      	movs	r3, #3
 8009b6a:	4003      	ands	r3, r0
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b70:	481f      	ldr	r0, [pc, #124]	; (8009bf0 <__NVIC_SetPriority+0xd4>)
 8009b72:	1dfb      	adds	r3, r7, #7
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	b25b      	sxtb	r3, r3
 8009b78:	089b      	lsrs	r3, r3, #2
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	33c0      	adds	r3, #192	; 0xc0
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	501a      	str	r2, [r3, r0]
}
 8009b82:	e031      	b.n	8009be8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b84:	4a1b      	ldr	r2, [pc, #108]	; (8009bf4 <__NVIC_SetPriority+0xd8>)
 8009b86:	1dfb      	adds	r3, r7, #7
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	0019      	movs	r1, r3
 8009b8c:	230f      	movs	r3, #15
 8009b8e:	400b      	ands	r3, r1
 8009b90:	3b08      	subs	r3, #8
 8009b92:	089b      	lsrs	r3, r3, #2
 8009b94:	3306      	adds	r3, #6
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	18d3      	adds	r3, r2, r3
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	1dfa      	adds	r2, r7, #7
 8009ba0:	7812      	ldrb	r2, [r2, #0]
 8009ba2:	0011      	movs	r1, r2
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	400a      	ands	r2, r1
 8009ba8:	00d2      	lsls	r2, r2, #3
 8009baa:	21ff      	movs	r1, #255	; 0xff
 8009bac:	4091      	lsls	r1, r2
 8009bae:	000a      	movs	r2, r1
 8009bb0:	43d2      	mvns	r2, r2
 8009bb2:	401a      	ands	r2, r3
 8009bb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	019b      	lsls	r3, r3, #6
 8009bba:	22ff      	movs	r2, #255	; 0xff
 8009bbc:	401a      	ands	r2, r3
 8009bbe:	1dfb      	adds	r3, r7, #7
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	4003      	ands	r3, r0
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009bcc:	4809      	ldr	r0, [pc, #36]	; (8009bf4 <__NVIC_SetPriority+0xd8>)
 8009bce:	1dfb      	adds	r3, r7, #7
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	001c      	movs	r4, r3
 8009bd4:	230f      	movs	r3, #15
 8009bd6:	4023      	ands	r3, r4
 8009bd8:	3b08      	subs	r3, #8
 8009bda:	089b      	lsrs	r3, r3, #2
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	3306      	adds	r3, #6
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	18c3      	adds	r3, r0, r3
 8009be4:	3304      	adds	r3, #4
 8009be6:	601a      	str	r2, [r3, #0]
}
 8009be8:	46c0      	nop			; (mov r8, r8)
 8009bea:	46bd      	mov	sp, r7
 8009bec:	b003      	add	sp, #12
 8009bee:	bd90      	pop	{r4, r7, pc}
 8009bf0:	e000e100 	.word	0xe000e100
 8009bf4:	e000ed00 	.word	0xe000ed00

08009bf8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009bfc:	f3bf 8f4f 	dsb	sy
}
 8009c00:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c02:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <__NVIC_SystemReset+0x1c>)
 8009c04:	4a04      	ldr	r2, [pc, #16]	; (8009c18 <__NVIC_SystemReset+0x20>)
 8009c06:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c08:	f3bf 8f4f 	dsb	sy
}
 8009c0c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	e7fd      	b.n	8009c0e <__NVIC_SystemReset+0x16>
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	e000ed00 	.word	0xe000ed00
 8009c18:	05fa0004 	.word	0x05fa0004

08009c1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	607a      	str	r2, [r7, #4]
 8009c26:	210f      	movs	r1, #15
 8009c28:	187b      	adds	r3, r7, r1
 8009c2a:	1c02      	adds	r2, r0, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	187b      	adds	r3, r7, r1
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	b25b      	sxtb	r3, r3
 8009c36:	0011      	movs	r1, r2
 8009c38:	0018      	movs	r0, r3
 8009c3a:	f7ff ff6f 	bl	8009b1c <__NVIC_SetPriority>
}
 8009c3e:	46c0      	nop			; (mov r8, r8)
 8009c40:	46bd      	mov	sp, r7
 8009c42:	b004      	add	sp, #16
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	0002      	movs	r2, r0
 8009c4e:	1dfb      	adds	r3, r7, #7
 8009c50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c52:	1dfb      	adds	r3, r7, #7
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	b25b      	sxtb	r3, r3
 8009c58:	0018      	movs	r0, r3
 8009c5a:	f7ff ff45 	bl	8009ae8 <__NVIC_EnableIRQ>
}
 8009c5e:	46c0      	nop			; (mov r8, r8)
 8009c60:	46bd      	mov	sp, r7
 8009c62:	b002      	add	sp, #8
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009c6a:	f7ff ffc5 	bl	8009bf8 <__NVIC_SystemReset>
	...

08009c70 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009c70:	b5b0      	push	{r4, r5, r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	603a      	str	r2, [r7, #0]
 8009c7c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009c7e:	4b21      	ldr	r3, [pc, #132]	; (8009d04 <HAL_FLASH_Program+0x94>)
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_FLASH_Program+0x1a>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e038      	b.n	8009cfc <HAL_FLASH_Program+0x8c>
 8009c8a:	4b1e      	ldr	r3, [pc, #120]	; (8009d04 <HAL_FLASH_Program+0x94>)
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009c90:	4b1c      	ldr	r3, [pc, #112]	; (8009d04 <HAL_FLASH_Program+0x94>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009c96:	2517      	movs	r5, #23
 8009c98:	197c      	adds	r4, r7, r5
 8009c9a:	23fa      	movs	r3, #250	; 0xfa
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	f000 f87a 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009ca4:	0003      	movs	r3, r0
 8009ca6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8009ca8:	197b      	adds	r3, r7, r5
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d11f      	bne.n	8009cf0 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d106      	bne.n	8009cc4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68b9      	ldr	r1, [r7, #8]
 8009cbc:	0008      	movs	r0, r1
 8009cbe:	f000 f8b9 	bl	8009e34 <FLASH_Program_DoubleWord>
 8009cc2:	e005      	b.n	8009cd0 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	0011      	movs	r1, r2
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f011 fb90 	bl	801b3f0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009cd0:	2317      	movs	r3, #23
 8009cd2:	18fc      	adds	r4, r7, r3
 8009cd4:	23fa      	movs	r3, #250	; 0xfa
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f000 f85d 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009cde:	0003      	movs	r3, r0
 8009ce0:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8009ce2:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <HAL_FLASH_Program+0x98>)
 8009ce4:	695a      	ldr	r2, [r3, #20]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	43d9      	mvns	r1, r3
 8009cea:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <HAL_FLASH_Program+0x98>)
 8009cec:	400a      	ands	r2, r1
 8009cee:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009cf0:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <HAL_FLASH_Program+0x94>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009cf6:	2317      	movs	r3, #23
 8009cf8:	18fb      	adds	r3, r7, r3
 8009cfa:	781b      	ldrb	r3, [r3, #0]
}
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	b006      	add	sp, #24
 8009d02:	bdb0      	pop	{r4, r5, r7, pc}
 8009d04:	200003c0 	.word	0x200003c0
 8009d08:	40022000 	.word	0x40022000

08009d0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009d12:	1dfb      	adds	r3, r7, #7
 8009d14:	2200      	movs	r2, #0
 8009d16:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8009d18:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <HAL_FLASH_Unlock+0x3c>)
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	da0c      	bge.n	8009d3a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009d20:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <HAL_FLASH_Unlock+0x3c>)
 8009d22:	4a0a      	ldr	r2, [pc, #40]	; (8009d4c <HAL_FLASH_Unlock+0x40>)
 8009d24:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009d26:	4b08      	ldr	r3, [pc, #32]	; (8009d48 <HAL_FLASH_Unlock+0x3c>)
 8009d28:	4a09      	ldr	r2, [pc, #36]	; (8009d50 <HAL_FLASH_Unlock+0x44>)
 8009d2a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8009d2c:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <HAL_FLASH_Unlock+0x3c>)
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	da02      	bge.n	8009d3a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8009d34:	1dfb      	adds	r3, r7, #7
 8009d36:	2201      	movs	r2, #1
 8009d38:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8009d3a:	1dfb      	adds	r3, r7, #7
 8009d3c:	781b      	ldrb	r3, [r3, #0]
}
 8009d3e:	0018      	movs	r0, r3
 8009d40:	46bd      	mov	sp, r7
 8009d42:	b002      	add	sp, #8
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	46c0      	nop			; (mov r8, r8)
 8009d48:	40022000 	.word	0x40022000
 8009d4c:	45670123 	.word	0x45670123
 8009d50:	cdef89ab 	.word	0xcdef89ab

08009d54 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d5a:	1dfb      	adds	r3, r7, #7
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009d60:	23fa      	movs	r3, #250	; 0xfa
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	0018      	movs	r0, r3
 8009d66:	f000 f817 	bl	8009d98 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <HAL_FLASH_Lock+0x40>)
 8009d6c:	695a      	ldr	r2, [r3, #20]
 8009d6e:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <HAL_FLASH_Lock+0x40>)
 8009d70:	2180      	movs	r1, #128	; 0x80
 8009d72:	0609      	lsls	r1, r1, #24
 8009d74:	430a      	orrs	r2, r1
 8009d76:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8009d78:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <HAL_FLASH_Lock+0x40>)
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	da02      	bge.n	8009d86 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8009d80:	1dfb      	adds	r3, r7, #7
 8009d82:	2200      	movs	r2, #0
 8009d84:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009d86:	1dfb      	adds	r3, r7, #7
 8009d88:	781b      	ldrb	r3, [r3, #0]
}
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	b002      	add	sp, #8
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	46c0      	nop			; (mov r8, r8)
 8009d94:	40022000 	.word	0x40022000

08009d98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8009da0:	f7fe fed2 	bl	8008b48 <HAL_GetTick>
 8009da4:	0003      	movs	r3, r0
 8009da6:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8009da8:	23c0      	movs	r3, #192	; 0xc0
 8009daa:	029b      	lsls	r3, r3, #10
 8009dac:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8009dae:	e00c      	b.n	8009dca <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3301      	adds	r3, #1
 8009db4:	d009      	beq.n	8009dca <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8009db6:	f7fe fec7 	bl	8008b48 <HAL_GetTick>
 8009dba:	0002      	movs	r2, r0
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d801      	bhi.n	8009dca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e028      	b.n	8009e1c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8009dca:	4b16      	ldr	r3, [pc, #88]	; (8009e24 <FLASH_WaitForLastOperation+0x8c>)
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	d1ed      	bne.n	8009db0 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8009dd4:	4b13      	ldr	r3, [pc, #76]	; (8009e24 <FLASH_WaitForLastOperation+0x8c>)
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	4a13      	ldr	r2, [pc, #76]	; (8009e28 <FLASH_WaitForLastOperation+0x90>)
 8009dda:	4013      	ands	r3, r2
 8009ddc:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8009dde:	4b11      	ldr	r3, [pc, #68]	; (8009e24 <FLASH_WaitForLastOperation+0x8c>)
 8009de0:	4a12      	ldr	r2, [pc, #72]	; (8009e2c <FLASH_WaitForLastOperation+0x94>)
 8009de2:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d011      	beq.n	8009e0e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8009dea:	4b11      	ldr	r3, [pc, #68]	; (8009e30 <FLASH_WaitForLastOperation+0x98>)
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e013      	b.n	8009e1c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3301      	adds	r3, #1
 8009df8:	d009      	beq.n	8009e0e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8009dfa:	f7fe fea5 	bl	8008b48 <HAL_GetTick>
 8009dfe:	0002      	movs	r2, r0
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d801      	bhi.n	8009e0e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e006      	b.n	8009e1c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8009e0e:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <FLASH_WaitForLastOperation+0x8c>)
 8009e10:	691a      	ldr	r2, [r3, #16]
 8009e12:	2380      	movs	r3, #128	; 0x80
 8009e14:	02db      	lsls	r3, r3, #11
 8009e16:	4013      	ands	r3, r2
 8009e18:	d1ec      	bne.n	8009df4 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	0018      	movs	r0, r3
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	b004      	add	sp, #16
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	40022000 	.word	0x40022000
 8009e28:	0000c3fa 	.word	0x0000c3fa
 8009e2c:	0008c3fb 	.word	0x0008c3fb
 8009e30:	200003c0 	.word	0x200003c0

08009e34 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009e34:	b5b0      	push	{r4, r5, r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	603a      	str	r2, [r7, #0]
 8009e3e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <FLASH_Program_DoubleWord+0x3c>)
 8009e42:	695a      	ldr	r2, [r3, #20]
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <FLASH_Program_DoubleWord+0x3c>)
 8009e46:	2101      	movs	r1, #1
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009e52:	f3bf 8f6f 	isb	sy
}
 8009e56:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	001c      	movs	r4, r3
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	001d      	movs	r5, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3304      	adds	r3, #4
 8009e64:	0022      	movs	r2, r4
 8009e66:	601a      	str	r2, [r3, #0]
}
 8009e68:	46c0      	nop			; (mov r8, r8)
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	b004      	add	sp, #16
 8009e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e70:	40022000 	.word	0x40022000

08009e74 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009e74:	b5b0      	push	{r4, r5, r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009e7e:	4b33      	ldr	r3, [pc, #204]	; (8009f4c <HAL_FLASHEx_Erase+0xd8>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d101      	bne.n	8009e8a <HAL_FLASHEx_Erase+0x16>
 8009e86:	2302      	movs	r3, #2
 8009e88:	e05c      	b.n	8009f44 <HAL_FLASHEx_Erase+0xd0>
 8009e8a:	4b30      	ldr	r3, [pc, #192]	; (8009f4c <HAL_FLASHEx_Erase+0xd8>)
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009e90:	4b2e      	ldr	r3, [pc, #184]	; (8009f4c <HAL_FLASHEx_Erase+0xd8>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009e96:	250f      	movs	r5, #15
 8009e98:	197c      	adds	r4, r7, r5
 8009e9a:	23fa      	movs	r3, #250	; 0xfa
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f7ff ff7a 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009ea4:	0003      	movs	r3, r0
 8009ea6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8009ea8:	002c      	movs	r4, r5
 8009eaa:	193b      	adds	r3, r7, r4
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d142      	bne.n	8009f38 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d10d      	bne.n	8009ed6 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	f000 f848 	bl	8009f54 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009ec4:	193c      	adds	r4, r7, r4
 8009ec6:	23fa      	movs	r3, #250	; 0xfa
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	0018      	movs	r0, r3
 8009ecc:	f7ff ff64 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009ed0:	0003      	movs	r3, r0
 8009ed2:	7023      	strb	r3, [r4, #0]
 8009ed4:	e030      	b.n	8009f38 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	4252      	negs	r2, r2
 8009edc:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	60bb      	str	r3, [r7, #8]
 8009ee4:	e01a      	b.n	8009f1c <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	0011      	movs	r1, r2
 8009eee:	0018      	movs	r0, r3
 8009ef0:	f000 f844 	bl	8009f7c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009ef4:	250f      	movs	r5, #15
 8009ef6:	197c      	adds	r4, r7, r5
 8009ef8:	23fa      	movs	r3, #250	; 0xfa
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	0018      	movs	r0, r3
 8009efe:	f7ff ff4b 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009f02:	0003      	movs	r3, r0
 8009f04:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8009f06:	197b      	adds	r3, r7, r5
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	601a      	str	r2, [r3, #0]
          break;
 8009f14:	e00a      	b.n	8009f2c <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	60bb      	str	r3, [r7, #8]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	18d3      	adds	r3, r2, r3
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d3dc      	bcc.n	8009ee6 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009f2c:	4b08      	ldr	r3, [pc, #32]	; (8009f50 <HAL_FLASHEx_Erase+0xdc>)
 8009f2e:	695a      	ldr	r2, [r3, #20]
 8009f30:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <HAL_FLASHEx_Erase+0xdc>)
 8009f32:	2102      	movs	r1, #2
 8009f34:	438a      	bics	r2, r1
 8009f36:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009f38:	4b04      	ldr	r3, [pc, #16]	; (8009f4c <HAL_FLASHEx_Erase+0xd8>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009f3e:	230f      	movs	r3, #15
 8009f40:	18fb      	adds	r3, r7, r3
 8009f42:	781b      	ldrb	r3, [r3, #0]
}
 8009f44:	0018      	movs	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b004      	add	sp, #16
 8009f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8009f4c:	200003c0 	.word	0x200003c0
 8009f50:	40022000 	.word	0x40022000

08009f54 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8009f5c:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <FLASH_MassErase+0x24>)
 8009f5e:	695a      	ldr	r2, [r3, #20]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	431a      	orrs	r2, r3
 8009f64:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <FLASH_MassErase+0x24>)
 8009f66:	2180      	movs	r1, #128	; 0x80
 8009f68:	0249      	lsls	r1, r1, #9
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	615a      	str	r2, [r3, #20]
}
 8009f6e:	46c0      	nop			; (mov r8, r8)
 8009f70:	46bd      	mov	sp, r7
 8009f72:	b002      	add	sp, #8
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	46c0      	nop			; (mov r8, r8)
 8009f78:	40022000 	.word	0x40022000

08009f7c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8009f86:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <FLASH_PageErase+0x48>)
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	4a0f      	ldr	r2, [pc, #60]	; (8009fc8 <FLASH_PageErase+0x4c>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d005      	beq.n	8009fa2 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2280      	movs	r2, #128	; 0x80
 8009f9a:	0192      	lsls	r2, r2, #6
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	e003      	b.n	8009faa <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4a09      	ldr	r2, [pc, #36]	; (8009fcc <FLASH_PageErase+0x50>)
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	00da      	lsls	r2, r3, #3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	431a      	orrs	r2, r3
 8009fb2:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <FLASH_PageErase+0x48>)
 8009fb4:	4906      	ldr	r1, [pc, #24]	; (8009fd0 <FLASH_PageErase+0x54>)
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	615a      	str	r2, [r3, #20]
}
 8009fba:	46c0      	nop			; (mov r8, r8)
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	b004      	add	sp, #16
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	40022000 	.word	0x40022000
 8009fc8:	ffffe007 	.word	0xffffe007
 8009fcc:	ffffdfff 	.word	0xffffdfff
 8009fd0:	00010002 	.word	0x00010002

08009fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009fe2:	e14d      	b.n	800a280 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2101      	movs	r1, #1
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	4091      	lsls	r1, r2
 8009fee:	000a      	movs	r2, r1
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d100      	bne.n	8009ffc <HAL_GPIO_Init+0x28>
 8009ffa:	e13e      	b.n	800a27a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	2203      	movs	r2, #3
 800a002:	4013      	ands	r3, r2
 800a004:	2b01      	cmp	r3, #1
 800a006:	d005      	beq.n	800a014 <HAL_GPIO_Init+0x40>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	2203      	movs	r2, #3
 800a00e:	4013      	ands	r3, r2
 800a010:	2b02      	cmp	r3, #2
 800a012:	d130      	bne.n	800a076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	005b      	lsls	r3, r3, #1
 800a01e:	2203      	movs	r2, #3
 800a020:	409a      	lsls	r2, r3
 800a022:	0013      	movs	r3, r2
 800a024:	43da      	mvns	r2, r3
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	4013      	ands	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	409a      	lsls	r2, r3
 800a036:	0013      	movs	r3, r2
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a04a:	2201      	movs	r2, #1
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	409a      	lsls	r2, r3
 800a050:	0013      	movs	r3, r2
 800a052:	43da      	mvns	r2, r3
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	4013      	ands	r3, r2
 800a058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	091b      	lsrs	r3, r3, #4
 800a060:	2201      	movs	r2, #1
 800a062:	401a      	ands	r2, r3
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	409a      	lsls	r2, r3
 800a068:	0013      	movs	r3, r2
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	2203      	movs	r2, #3
 800a07c:	4013      	ands	r3, r2
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d017      	beq.n	800a0b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	2203      	movs	r2, #3
 800a08e:	409a      	lsls	r2, r3
 800a090:	0013      	movs	r3, r2
 800a092:	43da      	mvns	r2, r3
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	4013      	ands	r3, r2
 800a098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	689a      	ldr	r2, [r3, #8]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	005b      	lsls	r3, r3, #1
 800a0a2:	409a      	lsls	r2, r3
 800a0a4:	0013      	movs	r3, r2
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	2203      	movs	r2, #3
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d123      	bne.n	800a106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	08da      	lsrs	r2, r3, #3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3208      	adds	r2, #8
 800a0c6:	0092      	lsls	r2, r2, #2
 800a0c8:	58d3      	ldr	r3, [r2, r3]
 800a0ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2207      	movs	r2, #7
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	220f      	movs	r2, #15
 800a0d6:	409a      	lsls	r2, r3
 800a0d8:	0013      	movs	r3, r2
 800a0da:	43da      	mvns	r2, r3
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	4013      	ands	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	691a      	ldr	r2, [r3, #16]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2107      	movs	r1, #7
 800a0ea:	400b      	ands	r3, r1
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	409a      	lsls	r2, r3
 800a0f0:	0013      	movs	r3, r2
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	08da      	lsrs	r2, r3, #3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3208      	adds	r2, #8
 800a100:	0092      	lsls	r2, r2, #2
 800a102:	6939      	ldr	r1, [r7, #16]
 800a104:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	2203      	movs	r2, #3
 800a112:	409a      	lsls	r2, r3
 800a114:	0013      	movs	r3, r2
 800a116:	43da      	mvns	r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	4013      	ands	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	2203      	movs	r2, #3
 800a124:	401a      	ands	r2, r3
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	409a      	lsls	r2, r3
 800a12c:	0013      	movs	r3, r2
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	4313      	orrs	r3, r2
 800a132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	23c0      	movs	r3, #192	; 0xc0
 800a140:	029b      	lsls	r3, r3, #10
 800a142:	4013      	ands	r3, r2
 800a144:	d100      	bne.n	800a148 <HAL_GPIO_Init+0x174>
 800a146:	e098      	b.n	800a27a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800a148:	4a53      	ldr	r2, [pc, #332]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	089b      	lsrs	r3, r3, #2
 800a14e:	3318      	adds	r3, #24
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	589b      	ldr	r3, [r3, r2]
 800a154:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2203      	movs	r2, #3
 800a15a:	4013      	ands	r3, r2
 800a15c:	00db      	lsls	r3, r3, #3
 800a15e:	220f      	movs	r2, #15
 800a160:	409a      	lsls	r2, r3
 800a162:	0013      	movs	r3, r2
 800a164:	43da      	mvns	r2, r3
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	4013      	ands	r3, r2
 800a16a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	23a0      	movs	r3, #160	; 0xa0
 800a170:	05db      	lsls	r3, r3, #23
 800a172:	429a      	cmp	r2, r3
 800a174:	d019      	beq.n	800a1aa <HAL_GPIO_Init+0x1d6>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a48      	ldr	r2, [pc, #288]	; (800a29c <HAL_GPIO_Init+0x2c8>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d013      	beq.n	800a1a6 <HAL_GPIO_Init+0x1d2>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a47      	ldr	r2, [pc, #284]	; (800a2a0 <HAL_GPIO_Init+0x2cc>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d00d      	beq.n	800a1a2 <HAL_GPIO_Init+0x1ce>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a46      	ldr	r2, [pc, #280]	; (800a2a4 <HAL_GPIO_Init+0x2d0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d007      	beq.n	800a19e <HAL_GPIO_Init+0x1ca>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a45      	ldr	r2, [pc, #276]	; (800a2a8 <HAL_GPIO_Init+0x2d4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d101      	bne.n	800a19a <HAL_GPIO_Init+0x1c6>
 800a196:	2304      	movs	r3, #4
 800a198:	e008      	b.n	800a1ac <HAL_GPIO_Init+0x1d8>
 800a19a:	2305      	movs	r3, #5
 800a19c:	e006      	b.n	800a1ac <HAL_GPIO_Init+0x1d8>
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e004      	b.n	800a1ac <HAL_GPIO_Init+0x1d8>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	e002      	b.n	800a1ac <HAL_GPIO_Init+0x1d8>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e000      	b.n	800a1ac <HAL_GPIO_Init+0x1d8>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	2103      	movs	r1, #3
 800a1b0:	400a      	ands	r2, r1
 800a1b2:	00d2      	lsls	r2, r2, #3
 800a1b4:	4093      	lsls	r3, r2
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800a1bc:	4936      	ldr	r1, [pc, #216]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	089b      	lsrs	r3, r3, #2
 800a1c2:	3318      	adds	r3, #24
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a1ca:	4b33      	ldr	r3, [pc, #204]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	43da      	mvns	r2, r3
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	2380      	movs	r3, #128	; 0x80
 800a1e0:	035b      	lsls	r3, r3, #13
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	d003      	beq.n	800a1ee <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a1ee:	4b2a      	ldr	r3, [pc, #168]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800a1f4:	4b28      	ldr	r3, [pc, #160]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	43da      	mvns	r2, r3
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	4013      	ands	r3, r2
 800a202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	2380      	movs	r3, #128	; 0x80
 800a20a:	039b      	lsls	r3, r3, #14
 800a20c:	4013      	ands	r3, r2
 800a20e:	d003      	beq.n	800a218 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4313      	orrs	r3, r2
 800a216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a218:	4b1f      	ldr	r3, [pc, #124]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a21e:	4a1e      	ldr	r2, [pc, #120]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a220:	2384      	movs	r3, #132	; 0x84
 800a222:	58d3      	ldr	r3, [r2, r3]
 800a224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	43da      	mvns	r2, r3
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	4013      	ands	r3, r2
 800a22e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	2380      	movs	r3, #128	; 0x80
 800a236:	029b      	lsls	r3, r3, #10
 800a238:	4013      	ands	r3, r2
 800a23a:	d003      	beq.n	800a244 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4313      	orrs	r3, r2
 800a242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a244:	4914      	ldr	r1, [pc, #80]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a246:	2284      	movs	r2, #132	; 0x84
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800a24c:	4a12      	ldr	r2, [pc, #72]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a24e:	2380      	movs	r3, #128	; 0x80
 800a250:	58d3      	ldr	r3, [r2, r3]
 800a252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	43da      	mvns	r2, r3
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	4013      	ands	r3, r2
 800a25c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	2380      	movs	r3, #128	; 0x80
 800a264:	025b      	lsls	r3, r3, #9
 800a266:	4013      	ands	r3, r2
 800a268:	d003      	beq.n	800a272 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4313      	orrs	r3, r2
 800a270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a272:	4909      	ldr	r1, [pc, #36]	; (800a298 <HAL_GPIO_Init+0x2c4>)
 800a274:	2280      	movs	r2, #128	; 0x80
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	3301      	adds	r3, #1
 800a27e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	40da      	lsrs	r2, r3
 800a288:	1e13      	subs	r3, r2, #0
 800a28a:	d000      	beq.n	800a28e <HAL_GPIO_Init+0x2ba>
 800a28c:	e6aa      	b.n	8009fe4 <HAL_GPIO_Init+0x10>
  }
}
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	46c0      	nop			; (mov r8, r8)
 800a292:	46bd      	mov	sp, r7
 800a294:	b006      	add	sp, #24
 800a296:	bd80      	pop	{r7, pc}
 800a298:	40021800 	.word	0x40021800
 800a29c:	50000400 	.word	0x50000400
 800a2a0:	50000800 	.word	0x50000800
 800a2a4:	50000c00 	.word	0x50000c00
 800a2a8:	50001000 	.word	0x50001000

0800a2ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	0008      	movs	r0, r1
 800a2b6:	0011      	movs	r1, r2
 800a2b8:	1cbb      	adds	r3, r7, #2
 800a2ba:	1c02      	adds	r2, r0, #0
 800a2bc:	801a      	strh	r2, [r3, #0]
 800a2be:	1c7b      	adds	r3, r7, #1
 800a2c0:	1c0a      	adds	r2, r1, #0
 800a2c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a2c4:	1c7b      	adds	r3, r7, #1
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d004      	beq.n	800a2d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a2cc:	1cbb      	adds	r3, r7, #2
 800a2ce:	881a      	ldrh	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a2d4:	e003      	b.n	800a2de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a2d6:	1cbb      	adds	r3, r7, #2
 800a2d8:	881a      	ldrh	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a2de:	46c0      	nop			; (mov r8, r8)
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	b002      	add	sp, #8
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	0002      	movs	r2, r0
 800a2f0:	1dbb      	adds	r3, r7, #6
 800a2f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800a2f4:	4b10      	ldr	r3, [pc, #64]	; (800a338 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	1dba      	adds	r2, r7, #6
 800a2fa:	8812      	ldrh	r2, [r2, #0]
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	d008      	beq.n	800a312 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a300:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a302:	1dba      	adds	r2, r7, #6
 800a304:	8812      	ldrh	r2, [r2, #0]
 800a306:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a308:	1dbb      	adds	r3, r7, #6
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	0018      	movs	r0, r3
 800a30e:	f000 f815 	bl	800a33c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	1dba      	adds	r2, r7, #6
 800a318:	8812      	ldrh	r2, [r2, #0]
 800a31a:	4013      	ands	r3, r2
 800a31c:	d008      	beq.n	800a330 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a31e:	4b06      	ldr	r3, [pc, #24]	; (800a338 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a320:	1dba      	adds	r2, r7, #6
 800a322:	8812      	ldrh	r2, [r2, #0]
 800a324:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a326:	1dbb      	adds	r3, r7, #6
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	0018      	movs	r0, r3
 800a32c:	f7fe f8e0 	bl	80084f0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a330:	46c0      	nop			; (mov r8, r8)
 800a332:	46bd      	mov	sp, r7
 800a334:	b002      	add	sp, #8
 800a336:	bd80      	pop	{r7, pc}
 800a338:	40021800 	.word	0x40021800

0800a33c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	0002      	movs	r2, r0
 800a344:	1dbb      	adds	r3, r7, #6
 800a346:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800a348:	46c0      	nop			; (mov r8, r8)
 800a34a:	46bd      	mov	sp, r7
 800a34c:	b002      	add	sp, #8
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a358:	4b19      	ldr	r3, [pc, #100]	; (800a3c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a19      	ldr	r2, [pc, #100]	; (800a3c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a35e:	4013      	ands	r3, r2
 800a360:	0019      	movs	r1, r3
 800a362:	4b17      	ldr	r3, [pc, #92]	; (800a3c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	430a      	orrs	r2, r1
 800a368:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	2380      	movs	r3, #128	; 0x80
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	429a      	cmp	r2, r3
 800a372:	d11f      	bne.n	800a3b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a374:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	0013      	movs	r3, r2
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	189b      	adds	r3, r3, r2
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	4912      	ldr	r1, [pc, #72]	; (800a3cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a382:	0018      	movs	r0, r3
 800a384:	f7fb ff34 	bl	80061f0 <__udivsi3>
 800a388:	0003      	movs	r3, r0
 800a38a:	3301      	adds	r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a38e:	e008      	b.n	800a3a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3b01      	subs	r3, #1
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	e001      	b.n	800a3a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e009      	b.n	800a3b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3a2:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a3a4:	695a      	ldr	r2, [r3, #20]
 800a3a6:	2380      	movs	r3, #128	; 0x80
 800a3a8:	00db      	lsls	r3, r3, #3
 800a3aa:	401a      	ands	r2, r3
 800a3ac:	2380      	movs	r3, #128	; 0x80
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d0ed      	beq.n	800a390 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	b004      	add	sp, #16
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	46c0      	nop			; (mov r8, r8)
 800a3c0:	40007000 	.word	0x40007000
 800a3c4:	fffff9ff 	.word	0xfffff9ff
 800a3c8:	2000002c 	.word	0x2000002c
 800a3cc:	000f4240 	.word	0x000f4240

0800a3d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a3d4:	4b03      	ldr	r3, [pc, #12]	; (800a3e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	23e0      	movs	r3, #224	; 0xe0
 800a3da:	01db      	lsls	r3, r3, #7
 800a3dc:	4013      	ands	r3, r2
}
 800a3de:	0018      	movs	r0, r3
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	40021000 	.word	0x40021000

0800a3e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d102      	bne.n	800a3fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	f000 fb50 	bl	800aa9c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2201      	movs	r2, #1
 800a402:	4013      	ands	r3, r2
 800a404:	d100      	bne.n	800a408 <HAL_RCC_OscConfig+0x20>
 800a406:	e07c      	b.n	800a502 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a408:	4bc3      	ldr	r3, [pc, #780]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	2238      	movs	r2, #56	; 0x38
 800a40e:	4013      	ands	r3, r2
 800a410:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a412:	4bc1      	ldr	r3, [pc, #772]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	2203      	movs	r2, #3
 800a418:	4013      	ands	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	2b10      	cmp	r3, #16
 800a420:	d102      	bne.n	800a428 <HAL_RCC_OscConfig+0x40>
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2b03      	cmp	r3, #3
 800a426:	d002      	beq.n	800a42e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	2b08      	cmp	r3, #8
 800a42c:	d10b      	bne.n	800a446 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a42e:	4bba      	ldr	r3, [pc, #744]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	2380      	movs	r3, #128	; 0x80
 800a434:	029b      	lsls	r3, r3, #10
 800a436:	4013      	ands	r3, r2
 800a438:	d062      	beq.n	800a500 <HAL_RCC_OscConfig+0x118>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d15e      	bne.n	800a500 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e32a      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	2380      	movs	r3, #128	; 0x80
 800a44c:	025b      	lsls	r3, r3, #9
 800a44e:	429a      	cmp	r2, r3
 800a450:	d107      	bne.n	800a462 <HAL_RCC_OscConfig+0x7a>
 800a452:	4bb1      	ldr	r3, [pc, #708]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	4bb0      	ldr	r3, [pc, #704]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a458:	2180      	movs	r1, #128	; 0x80
 800a45a:	0249      	lsls	r1, r1, #9
 800a45c:	430a      	orrs	r2, r1
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	e020      	b.n	800a4a4 <HAL_RCC_OscConfig+0xbc>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	23a0      	movs	r3, #160	; 0xa0
 800a468:	02db      	lsls	r3, r3, #11
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d10e      	bne.n	800a48c <HAL_RCC_OscConfig+0xa4>
 800a46e:	4baa      	ldr	r3, [pc, #680]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	4ba9      	ldr	r3, [pc, #676]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a474:	2180      	movs	r1, #128	; 0x80
 800a476:	02c9      	lsls	r1, r1, #11
 800a478:	430a      	orrs	r2, r1
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	4ba6      	ldr	r3, [pc, #664]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	4ba5      	ldr	r3, [pc, #660]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a482:	2180      	movs	r1, #128	; 0x80
 800a484:	0249      	lsls	r1, r1, #9
 800a486:	430a      	orrs	r2, r1
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	e00b      	b.n	800a4a4 <HAL_RCC_OscConfig+0xbc>
 800a48c:	4ba2      	ldr	r3, [pc, #648]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	4ba1      	ldr	r3, [pc, #644]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a492:	49a2      	ldr	r1, [pc, #648]	; (800a71c <HAL_RCC_OscConfig+0x334>)
 800a494:	400a      	ands	r2, r1
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	4b9f      	ldr	r3, [pc, #636]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	4b9e      	ldr	r3, [pc, #632]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a49e:	49a0      	ldr	r1, [pc, #640]	; (800a720 <HAL_RCC_OscConfig+0x338>)
 800a4a0:	400a      	ands	r2, r1
 800a4a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d014      	beq.n	800a4d6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ac:	f7fe fb4c 	bl	8008b48 <HAL_GetTick>
 800a4b0:	0003      	movs	r3, r0
 800a4b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4b4:	e008      	b.n	800a4c8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4b6:	f7fe fb47 	bl	8008b48 <HAL_GetTick>
 800a4ba:	0002      	movs	r2, r0
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	2b64      	cmp	r3, #100	; 0x64
 800a4c2:	d901      	bls.n	800a4c8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e2e9      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4c8:	4b93      	ldr	r3, [pc, #588]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	2380      	movs	r3, #128	; 0x80
 800a4ce:	029b      	lsls	r3, r3, #10
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	d0f0      	beq.n	800a4b6 <HAL_RCC_OscConfig+0xce>
 800a4d4:	e015      	b.n	800a502 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d6:	f7fe fb37 	bl	8008b48 <HAL_GetTick>
 800a4da:	0003      	movs	r3, r0
 800a4dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a4de:	e008      	b.n	800a4f2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4e0:	f7fe fb32 	bl	8008b48 <HAL_GetTick>
 800a4e4:	0002      	movs	r2, r0
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	2b64      	cmp	r3, #100	; 0x64
 800a4ec:	d901      	bls.n	800a4f2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e2d4      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a4f2:	4b89      	ldr	r3, [pc, #548]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	2380      	movs	r3, #128	; 0x80
 800a4f8:	029b      	lsls	r3, r3, #10
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	d1f0      	bne.n	800a4e0 <HAL_RCC_OscConfig+0xf8>
 800a4fe:	e000      	b.n	800a502 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a500:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2202      	movs	r2, #2
 800a508:	4013      	ands	r3, r2
 800a50a:	d100      	bne.n	800a50e <HAL_RCC_OscConfig+0x126>
 800a50c:	e099      	b.n	800a642 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a50e:	4b82      	ldr	r3, [pc, #520]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	2238      	movs	r2, #56	; 0x38
 800a514:	4013      	ands	r3, r2
 800a516:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a518:	4b7f      	ldr	r3, [pc, #508]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	2203      	movs	r2, #3
 800a51e:	4013      	ands	r3, r2
 800a520:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	2b10      	cmp	r3, #16
 800a526:	d102      	bne.n	800a52e <HAL_RCC_OscConfig+0x146>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d002      	beq.n	800a534 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d135      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a534:	4b78      	ldr	r3, [pc, #480]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	2380      	movs	r3, #128	; 0x80
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	4013      	ands	r3, r2
 800a53e:	d005      	beq.n	800a54c <HAL_RCC_OscConfig+0x164>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e2a7      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a54c:	4b72      	ldr	r3, [pc, #456]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	4a74      	ldr	r2, [pc, #464]	; (800a724 <HAL_RCC_OscConfig+0x33c>)
 800a552:	4013      	ands	r3, r2
 800a554:	0019      	movs	r1, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	021a      	lsls	r2, r3, #8
 800a55c:	4b6e      	ldr	r3, [pc, #440]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a55e:	430a      	orrs	r2, r1
 800a560:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d112      	bne.n	800a58e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a568:	4b6b      	ldr	r3, [pc, #428]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a6e      	ldr	r2, [pc, #440]	; (800a728 <HAL_RCC_OscConfig+0x340>)
 800a56e:	4013      	ands	r3, r2
 800a570:	0019      	movs	r1, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	691a      	ldr	r2, [r3, #16]
 800a576:	4b68      	ldr	r3, [pc, #416]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a578:	430a      	orrs	r2, r1
 800a57a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a57c:	4b66      	ldr	r3, [pc, #408]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	0adb      	lsrs	r3, r3, #11
 800a582:	2207      	movs	r2, #7
 800a584:	4013      	ands	r3, r2
 800a586:	4a69      	ldr	r2, [pc, #420]	; (800a72c <HAL_RCC_OscConfig+0x344>)
 800a588:	40da      	lsrs	r2, r3
 800a58a:	4b69      	ldr	r3, [pc, #420]	; (800a730 <HAL_RCC_OscConfig+0x348>)
 800a58c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a58e:	4b69      	ldr	r3, [pc, #420]	; (800a734 <HAL_RCC_OscConfig+0x34c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	0018      	movs	r0, r3
 800a594:	f7fe f924 	bl	80087e0 <HAL_InitTick>
 800a598:	1e03      	subs	r3, r0, #0
 800a59a:	d051      	beq.n	800a640 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e27d      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d030      	beq.n	800a60a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a5a8:	4b5b      	ldr	r3, [pc, #364]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a5e      	ldr	r2, [pc, #376]	; (800a728 <HAL_RCC_OscConfig+0x340>)
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	0019      	movs	r1, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	691a      	ldr	r2, [r3, #16]
 800a5b6:	4b58      	ldr	r3, [pc, #352]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a5bc:	4b56      	ldr	r3, [pc, #344]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	4b55      	ldr	r3, [pc, #340]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a5c2:	2180      	movs	r1, #128	; 0x80
 800a5c4:	0049      	lsls	r1, r1, #1
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ca:	f7fe fabd 	bl	8008b48 <HAL_GetTick>
 800a5ce:	0003      	movs	r3, r0
 800a5d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5d4:	f7fe fab8 	bl	8008b48 <HAL_GetTick>
 800a5d8:	0002      	movs	r2, r0
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e25a      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5e6:	4b4c      	ldr	r3, [pc, #304]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	2380      	movs	r3, #128	; 0x80
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	d0f0      	beq.n	800a5d4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5f2:	4b49      	ldr	r3, [pc, #292]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	4a4b      	ldr	r2, [pc, #300]	; (800a724 <HAL_RCC_OscConfig+0x33c>)
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	0019      	movs	r1, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	021a      	lsls	r2, r3, #8
 800a602:	4b45      	ldr	r3, [pc, #276]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a604:	430a      	orrs	r2, r1
 800a606:	605a      	str	r2, [r3, #4]
 800a608:	e01b      	b.n	800a642 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a60a:	4b43      	ldr	r3, [pc, #268]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b42      	ldr	r3, [pc, #264]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a610:	4949      	ldr	r1, [pc, #292]	; (800a738 <HAL_RCC_OscConfig+0x350>)
 800a612:	400a      	ands	r2, r1
 800a614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a616:	f7fe fa97 	bl	8008b48 <HAL_GetTick>
 800a61a:	0003      	movs	r3, r0
 800a61c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a61e:	e008      	b.n	800a632 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a620:	f7fe fa92 	bl	8008b48 <HAL_GetTick>
 800a624:	0002      	movs	r2, r0
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d901      	bls.n	800a632 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e234      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a632:	4b39      	ldr	r3, [pc, #228]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	2380      	movs	r3, #128	; 0x80
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	4013      	ands	r3, r2
 800a63c:	d1f0      	bne.n	800a620 <HAL_RCC_OscConfig+0x238>
 800a63e:	e000      	b.n	800a642 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a640:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2208      	movs	r2, #8
 800a648:	4013      	ands	r3, r2
 800a64a:	d047      	beq.n	800a6dc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a64c:	4b32      	ldr	r3, [pc, #200]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	2238      	movs	r2, #56	; 0x38
 800a652:	4013      	ands	r3, r2
 800a654:	2b18      	cmp	r3, #24
 800a656:	d10a      	bne.n	800a66e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a658:	4b2f      	ldr	r3, [pc, #188]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a65a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a65c:	2202      	movs	r2, #2
 800a65e:	4013      	ands	r3, r2
 800a660:	d03c      	beq.n	800a6dc <HAL_RCC_OscConfig+0x2f4>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d138      	bne.n	800a6dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e216      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d019      	beq.n	800a6aa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a676:	4b28      	ldr	r3, [pc, #160]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a678:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a67a:	4b27      	ldr	r3, [pc, #156]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a67c:	2101      	movs	r1, #1
 800a67e:	430a      	orrs	r2, r1
 800a680:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a682:	f7fe fa61 	bl	8008b48 <HAL_GetTick>
 800a686:	0003      	movs	r3, r0
 800a688:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a68a:	e008      	b.n	800a69e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a68c:	f7fe fa5c 	bl	8008b48 <HAL_GetTick>
 800a690:	0002      	movs	r2, r0
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	2b02      	cmp	r3, #2
 800a698:	d901      	bls.n	800a69e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e1fe      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a69e:	4b1e      	ldr	r3, [pc, #120]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a6a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	d0f1      	beq.n	800a68c <HAL_RCC_OscConfig+0x2a4>
 800a6a8:	e018      	b.n	800a6dc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a6aa:	4b1b      	ldr	r3, [pc, #108]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a6ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a6ae:	4b1a      	ldr	r3, [pc, #104]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a6b0:	2101      	movs	r1, #1
 800a6b2:	438a      	bics	r2, r1
 800a6b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b6:	f7fe fa47 	bl	8008b48 <HAL_GetTick>
 800a6ba:	0003      	movs	r3, r0
 800a6bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a6be:	e008      	b.n	800a6d2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6c0:	f7fe fa42 	bl	8008b48 <HAL_GetTick>
 800a6c4:	0002      	movs	r2, r0
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d901      	bls.n	800a6d2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e1e4      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a6d2:	4b11      	ldr	r3, [pc, #68]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a6d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	4013      	ands	r3, r2
 800a6da:	d1f1      	bne.n	800a6c0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2204      	movs	r2, #4
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	d100      	bne.n	800a6e8 <HAL_RCC_OscConfig+0x300>
 800a6e6:	e0c7      	b.n	800a878 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6e8:	231f      	movs	r3, #31
 800a6ea:	18fb      	adds	r3, r7, r3
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a6f0:	4b09      	ldr	r3, [pc, #36]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	2238      	movs	r2, #56	; 0x38
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	2b20      	cmp	r3, #32
 800a6fa:	d11f      	bne.n	800a73c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a6fc:	4b06      	ldr	r3, [pc, #24]	; (800a718 <HAL_RCC_OscConfig+0x330>)
 800a6fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a700:	2202      	movs	r2, #2
 800a702:	4013      	ands	r3, r2
 800a704:	d100      	bne.n	800a708 <HAL_RCC_OscConfig+0x320>
 800a706:	e0b7      	b.n	800a878 <HAL_RCC_OscConfig+0x490>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d000      	beq.n	800a712 <HAL_RCC_OscConfig+0x32a>
 800a710:	e0b2      	b.n	800a878 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e1c2      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
 800a716:	46c0      	nop			; (mov r8, r8)
 800a718:	40021000 	.word	0x40021000
 800a71c:	fffeffff 	.word	0xfffeffff
 800a720:	fffbffff 	.word	0xfffbffff
 800a724:	ffff80ff 	.word	0xffff80ff
 800a728:	ffffc7ff 	.word	0xffffc7ff
 800a72c:	00f42400 	.word	0x00f42400
 800a730:	2000002c 	.word	0x2000002c
 800a734:	20000030 	.word	0x20000030
 800a738:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a73c:	4bb5      	ldr	r3, [pc, #724]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a73e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a740:	2380      	movs	r3, #128	; 0x80
 800a742:	055b      	lsls	r3, r3, #21
 800a744:	4013      	ands	r3, r2
 800a746:	d101      	bne.n	800a74c <HAL_RCC_OscConfig+0x364>
 800a748:	2301      	movs	r3, #1
 800a74a:	e000      	b.n	800a74e <HAL_RCC_OscConfig+0x366>
 800a74c:	2300      	movs	r3, #0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d011      	beq.n	800a776 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a752:	4bb0      	ldr	r3, [pc, #704]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a756:	4baf      	ldr	r3, [pc, #700]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a758:	2180      	movs	r1, #128	; 0x80
 800a75a:	0549      	lsls	r1, r1, #21
 800a75c:	430a      	orrs	r2, r1
 800a75e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a760:	4bac      	ldr	r3, [pc, #688]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a764:	2380      	movs	r3, #128	; 0x80
 800a766:	055b      	lsls	r3, r3, #21
 800a768:	4013      	ands	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a76e:	231f      	movs	r3, #31
 800a770:	18fb      	adds	r3, r7, r3
 800a772:	2201      	movs	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a776:	4ba8      	ldr	r3, [pc, #672]	; (800aa18 <HAL_RCC_OscConfig+0x630>)
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	2380      	movs	r3, #128	; 0x80
 800a77c:	005b      	lsls	r3, r3, #1
 800a77e:	4013      	ands	r3, r2
 800a780:	d11a      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a782:	4ba5      	ldr	r3, [pc, #660]	; (800aa18 <HAL_RCC_OscConfig+0x630>)
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	4ba4      	ldr	r3, [pc, #656]	; (800aa18 <HAL_RCC_OscConfig+0x630>)
 800a788:	2180      	movs	r1, #128	; 0x80
 800a78a:	0049      	lsls	r1, r1, #1
 800a78c:	430a      	orrs	r2, r1
 800a78e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a790:	f7fe f9da 	bl	8008b48 <HAL_GetTick>
 800a794:	0003      	movs	r3, r0
 800a796:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a798:	e008      	b.n	800a7ac <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a79a:	f7fe f9d5 	bl	8008b48 <HAL_GetTick>
 800a79e:	0002      	movs	r2, r0
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d901      	bls.n	800a7ac <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	e177      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7ac:	4b9a      	ldr	r3, [pc, #616]	; (800aa18 <HAL_RCC_OscConfig+0x630>)
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	2380      	movs	r3, #128	; 0x80
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	d0f0      	beq.n	800a79a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d106      	bne.n	800a7ce <HAL_RCC_OscConfig+0x3e6>
 800a7c0:	4b94      	ldr	r3, [pc, #592]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a7c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7c4:	4b93      	ldr	r3, [pc, #588]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7cc:	e01c      	b.n	800a808 <HAL_RCC_OscConfig+0x420>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	2b05      	cmp	r3, #5
 800a7d4:	d10c      	bne.n	800a7f0 <HAL_RCC_OscConfig+0x408>
 800a7d6:	4b8f      	ldr	r3, [pc, #572]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a7d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7da:	4b8e      	ldr	r3, [pc, #568]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a7dc:	2104      	movs	r1, #4
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7e2:	4b8c      	ldr	r3, [pc, #560]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a7e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7e6:	4b8b      	ldr	r3, [pc, #556]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7ee:	e00b      	b.n	800a808 <HAL_RCC_OscConfig+0x420>
 800a7f0:	4b88      	ldr	r3, [pc, #544]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a7f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7f4:	4b87      	ldr	r3, [pc, #540]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	438a      	bics	r2, r1
 800a7fa:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7fc:	4b85      	ldr	r3, [pc, #532]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a7fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a800:	4b84      	ldr	r3, [pc, #528]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a802:	2104      	movs	r1, #4
 800a804:	438a      	bics	r2, r1
 800a806:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d014      	beq.n	800a83a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a810:	f7fe f99a 	bl	8008b48 <HAL_GetTick>
 800a814:	0003      	movs	r3, r0
 800a816:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a818:	e009      	b.n	800a82e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a81a:	f7fe f995 	bl	8008b48 <HAL_GetTick>
 800a81e:	0002      	movs	r2, r0
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	4a7d      	ldr	r2, [pc, #500]	; (800aa1c <HAL_RCC_OscConfig+0x634>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d901      	bls.n	800a82e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e136      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a82e:	4b79      	ldr	r3, [pc, #484]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a832:	2202      	movs	r2, #2
 800a834:	4013      	ands	r3, r2
 800a836:	d0f0      	beq.n	800a81a <HAL_RCC_OscConfig+0x432>
 800a838:	e013      	b.n	800a862 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a83a:	f7fe f985 	bl	8008b48 <HAL_GetTick>
 800a83e:	0003      	movs	r3, r0
 800a840:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a842:	e009      	b.n	800a858 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a844:	f7fe f980 	bl	8008b48 <HAL_GetTick>
 800a848:	0002      	movs	r2, r0
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	4a73      	ldr	r2, [pc, #460]	; (800aa1c <HAL_RCC_OscConfig+0x634>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d901      	bls.n	800a858 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e121      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a858:	4b6e      	ldr	r3, [pc, #440]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85c:	2202      	movs	r2, #2
 800a85e:	4013      	ands	r3, r2
 800a860:	d1f0      	bne.n	800a844 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a862:	231f      	movs	r3, #31
 800a864:	18fb      	adds	r3, r7, r3
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d105      	bne.n	800a878 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a86c:	4b69      	ldr	r3, [pc, #420]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a86e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a870:	4b68      	ldr	r3, [pc, #416]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a872:	496b      	ldr	r1, [pc, #428]	; (800aa20 <HAL_RCC_OscConfig+0x638>)
 800a874:	400a      	ands	r2, r1
 800a876:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2220      	movs	r2, #32
 800a87e:	4013      	ands	r3, r2
 800a880:	d039      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d01b      	beq.n	800a8c2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a88a:	4b62      	ldr	r3, [pc, #392]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	4b61      	ldr	r3, [pc, #388]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a890:	2180      	movs	r1, #128	; 0x80
 800a892:	03c9      	lsls	r1, r1, #15
 800a894:	430a      	orrs	r2, r1
 800a896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a898:	f7fe f956 	bl	8008b48 <HAL_GetTick>
 800a89c:	0003      	movs	r3, r0
 800a89e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a8a0:	e008      	b.n	800a8b4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8a2:	f7fe f951 	bl	8008b48 <HAL_GetTick>
 800a8a6:	0002      	movs	r2, r0
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d901      	bls.n	800a8b4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e0f3      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a8b4:	4b57      	ldr	r3, [pc, #348]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	2380      	movs	r3, #128	; 0x80
 800a8ba:	041b      	lsls	r3, r3, #16
 800a8bc:	4013      	ands	r3, r2
 800a8be:	d0f0      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x4ba>
 800a8c0:	e019      	b.n	800a8f6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a8c2:	4b54      	ldr	r3, [pc, #336]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	4b53      	ldr	r3, [pc, #332]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a8c8:	4956      	ldr	r1, [pc, #344]	; (800aa24 <HAL_RCC_OscConfig+0x63c>)
 800a8ca:	400a      	ands	r2, r1
 800a8cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ce:	f7fe f93b 	bl	8008b48 <HAL_GetTick>
 800a8d2:	0003      	movs	r3, r0
 800a8d4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a8d6:	e008      	b.n	800a8ea <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8d8:	f7fe f936 	bl	8008b48 <HAL_GetTick>
 800a8dc:	0002      	movs	r2, r0
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d901      	bls.n	800a8ea <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e0d8      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a8ea:	4b4a      	ldr	r3, [pc, #296]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	2380      	movs	r3, #128	; 0x80
 800a8f0:	041b      	lsls	r3, r3, #16
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	d1f0      	bne.n	800a8d8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d100      	bne.n	800a900 <HAL_RCC_OscConfig+0x518>
 800a8fe:	e0cc      	b.n	800aa9a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a900:	4b44      	ldr	r3, [pc, #272]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	2238      	movs	r2, #56	; 0x38
 800a906:	4013      	ands	r3, r2
 800a908:	2b10      	cmp	r3, #16
 800a90a:	d100      	bne.n	800a90e <HAL_RCC_OscConfig+0x526>
 800a90c:	e07b      	b.n	800aa06 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	2b02      	cmp	r3, #2
 800a914:	d156      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a916:	4b3f      	ldr	r3, [pc, #252]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	4b3e      	ldr	r3, [pc, #248]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a91c:	4942      	ldr	r1, [pc, #264]	; (800aa28 <HAL_RCC_OscConfig+0x640>)
 800a91e:	400a      	ands	r2, r1
 800a920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a922:	f7fe f911 	bl	8008b48 <HAL_GetTick>
 800a926:	0003      	movs	r3, r0
 800a928:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a92a:	e008      	b.n	800a93e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a92c:	f7fe f90c 	bl	8008b48 <HAL_GetTick>
 800a930:	0002      	movs	r2, r0
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	2b02      	cmp	r3, #2
 800a938:	d901      	bls.n	800a93e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e0ae      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a93e:	4b35      	ldr	r3, [pc, #212]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	2380      	movs	r3, #128	; 0x80
 800a944:	049b      	lsls	r3, r3, #18
 800a946:	4013      	ands	r3, r2
 800a948:	d1f0      	bne.n	800a92c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a94a:	4b32      	ldr	r3, [pc, #200]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	4a37      	ldr	r2, [pc, #220]	; (800aa2c <HAL_RCC_OscConfig+0x644>)
 800a950:	4013      	ands	r3, r2
 800a952:	0019      	movs	r1, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95c:	431a      	orrs	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a962:	021b      	lsls	r3, r3, #8
 800a964:	431a      	orrs	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96a:	431a      	orrs	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a970:	431a      	orrs	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	431a      	orrs	r2, r3
 800a978:	4b26      	ldr	r3, [pc, #152]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a97a:	430a      	orrs	r2, r1
 800a97c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a97e:	4b25      	ldr	r3, [pc, #148]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	4b24      	ldr	r3, [pc, #144]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a984:	2180      	movs	r1, #128	; 0x80
 800a986:	0449      	lsls	r1, r1, #17
 800a988:	430a      	orrs	r2, r1
 800a98a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a98c:	4b21      	ldr	r3, [pc, #132]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a98e:	68da      	ldr	r2, [r3, #12]
 800a990:	4b20      	ldr	r3, [pc, #128]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a992:	2180      	movs	r1, #128	; 0x80
 800a994:	0549      	lsls	r1, r1, #21
 800a996:	430a      	orrs	r2, r1
 800a998:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a99a:	f7fe f8d5 	bl	8008b48 <HAL_GetTick>
 800a99e:	0003      	movs	r3, r0
 800a9a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9a2:	e008      	b.n	800a9b6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9a4:	f7fe f8d0 	bl	8008b48 <HAL_GetTick>
 800a9a8:	0002      	movs	r2, r0
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d901      	bls.n	800a9b6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e072      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9b6:	4b17      	ldr	r3, [pc, #92]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	2380      	movs	r3, #128	; 0x80
 800a9bc:	049b      	lsls	r3, r3, #18
 800a9be:	4013      	ands	r3, r2
 800a9c0:	d0f0      	beq.n	800a9a4 <HAL_RCC_OscConfig+0x5bc>
 800a9c2:	e06a      	b.n	800aa9a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9c4:	4b13      	ldr	r3, [pc, #76]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	4b12      	ldr	r3, [pc, #72]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a9ca:	4917      	ldr	r1, [pc, #92]	; (800aa28 <HAL_RCC_OscConfig+0x640>)
 800a9cc:	400a      	ands	r2, r1
 800a9ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d0:	f7fe f8ba 	bl	8008b48 <HAL_GetTick>
 800a9d4:	0003      	movs	r3, r0
 800a9d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9d8:	e008      	b.n	800a9ec <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9da:	f7fe f8b5 	bl	8008b48 <HAL_GetTick>
 800a9de:	0002      	movs	r2, r0
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d901      	bls.n	800a9ec <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e057      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9ec:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	2380      	movs	r3, #128	; 0x80
 800a9f2:	049b      	lsls	r3, r3, #18
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	d1f0      	bne.n	800a9da <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a9f8:	4b06      	ldr	r3, [pc, #24]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a9fa:	68da      	ldr	r2, [r3, #12]
 800a9fc:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <HAL_RCC_OscConfig+0x62c>)
 800a9fe:	490c      	ldr	r1, [pc, #48]	; (800aa30 <HAL_RCC_OscConfig+0x648>)
 800aa00:	400a      	ands	r2, r1
 800aa02:	60da      	str	r2, [r3, #12]
 800aa04:	e049      	b.n	800aa9a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d112      	bne.n	800aa34 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e044      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	40021000 	.word	0x40021000
 800aa18:	40007000 	.word	0x40007000
 800aa1c:	00001388 	.word	0x00001388
 800aa20:	efffffff 	.word	0xefffffff
 800aa24:	ffbfffff 	.word	0xffbfffff
 800aa28:	feffffff 	.word	0xfeffffff
 800aa2c:	11c1808c 	.word	0x11c1808c
 800aa30:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800aa34:	4b1b      	ldr	r3, [pc, #108]	; (800aaa4 <HAL_RCC_OscConfig+0x6bc>)
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2203      	movs	r2, #3
 800aa3e:	401a      	ands	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d126      	bne.n	800aa96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2270      	movs	r2, #112	; 0x70
 800aa4c:	401a      	ands	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d11f      	bne.n	800aa96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	23fe      	movs	r3, #254	; 0xfe
 800aa5a:	01db      	lsls	r3, r3, #7
 800aa5c:	401a      	ands	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa62:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d116      	bne.n	800aa96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	23f8      	movs	r3, #248	; 0xf8
 800aa6c:	039b      	lsls	r3, r3, #14
 800aa6e:	401a      	ands	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d10e      	bne.n	800aa96 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	23e0      	movs	r3, #224	; 0xe0
 800aa7c:	051b      	lsls	r3, r3, #20
 800aa7e:	401a      	ands	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d106      	bne.n	800aa96 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	0f5b      	lsrs	r3, r3, #29
 800aa8c:	075a      	lsls	r2, r3, #29
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d001      	beq.n	800aa9a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e000      	b.n	800aa9c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	0018      	movs	r0, r3
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	b008      	add	sp, #32
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	40021000 	.word	0x40021000

0800aaa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e0e9      	b.n	800ac90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aabc:	4b76      	ldr	r3, [pc, #472]	; (800ac98 <HAL_RCC_ClockConfig+0x1f0>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2207      	movs	r2, #7
 800aac2:	4013      	ands	r3, r2
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d91e      	bls.n	800ab08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaca:	4b73      	ldr	r3, [pc, #460]	; (800ac98 <HAL_RCC_ClockConfig+0x1f0>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2207      	movs	r2, #7
 800aad0:	4393      	bics	r3, r2
 800aad2:	0019      	movs	r1, r3
 800aad4:	4b70      	ldr	r3, [pc, #448]	; (800ac98 <HAL_RCC_ClockConfig+0x1f0>)
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	430a      	orrs	r2, r1
 800aada:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800aadc:	f7fe f834 	bl	8008b48 <HAL_GetTick>
 800aae0:	0003      	movs	r3, r0
 800aae2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aae4:	e009      	b.n	800aafa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aae6:	f7fe f82f 	bl	8008b48 <HAL_GetTick>
 800aaea:	0002      	movs	r2, r0
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	4a6a      	ldr	r2, [pc, #424]	; (800ac9c <HAL_RCC_ClockConfig+0x1f4>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d901      	bls.n	800aafa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e0ca      	b.n	800ac90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aafa:	4b67      	ldr	r3, [pc, #412]	; (800ac98 <HAL_RCC_ClockConfig+0x1f0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2207      	movs	r2, #7
 800ab00:	4013      	ands	r3, r2
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d1ee      	bne.n	800aae6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2202      	movs	r2, #2
 800ab0e:	4013      	ands	r3, r2
 800ab10:	d015      	beq.n	800ab3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2204      	movs	r2, #4
 800ab18:	4013      	ands	r3, r2
 800ab1a:	d006      	beq.n	800ab2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800ab1c:	4b60      	ldr	r3, [pc, #384]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ab1e:	689a      	ldr	r2, [r3, #8]
 800ab20:	4b5f      	ldr	r3, [pc, #380]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ab22:	21e0      	movs	r1, #224	; 0xe0
 800ab24:	01c9      	lsls	r1, r1, #7
 800ab26:	430a      	orrs	r2, r1
 800ab28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab2a:	4b5d      	ldr	r3, [pc, #372]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	4a5d      	ldr	r2, [pc, #372]	; (800aca4 <HAL_RCC_ClockConfig+0x1fc>)
 800ab30:	4013      	ands	r3, r2
 800ab32:	0019      	movs	r1, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689a      	ldr	r2, [r3, #8]
 800ab38:	4b59      	ldr	r3, [pc, #356]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2201      	movs	r2, #1
 800ab44:	4013      	ands	r3, r2
 800ab46:	d057      	beq.n	800abf8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d107      	bne.n	800ab60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab50:	4b53      	ldr	r3, [pc, #332]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	2380      	movs	r3, #128	; 0x80
 800ab56:	029b      	lsls	r3, r3, #10
 800ab58:	4013      	ands	r3, r2
 800ab5a:	d12b      	bne.n	800abb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e097      	b.n	800ac90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d107      	bne.n	800ab78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab68:	4b4d      	ldr	r3, [pc, #308]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	2380      	movs	r3, #128	; 0x80
 800ab6e:	049b      	lsls	r3, r3, #18
 800ab70:	4013      	ands	r3, r2
 800ab72:	d11f      	bne.n	800abb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e08b      	b.n	800ac90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d107      	bne.n	800ab90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab80:	4b47      	ldr	r3, [pc, #284]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	2380      	movs	r3, #128	; 0x80
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	4013      	ands	r3, r2
 800ab8a:	d113      	bne.n	800abb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e07f      	b.n	800ac90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	2b03      	cmp	r3, #3
 800ab96:	d106      	bne.n	800aba6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab98:	4b41      	ldr	r3, [pc, #260]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ab9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	4013      	ands	r3, r2
 800aba0:	d108      	bne.n	800abb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e074      	b.n	800ac90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aba6:	4b3e      	ldr	r3, [pc, #248]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800aba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abaa:	2202      	movs	r2, #2
 800abac:	4013      	ands	r3, r2
 800abae:	d101      	bne.n	800abb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e06d      	b.n	800ac90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800abb4:	4b3a      	ldr	r3, [pc, #232]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	2207      	movs	r2, #7
 800abba:	4393      	bics	r3, r2
 800abbc:	0019      	movs	r1, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	4b37      	ldr	r3, [pc, #220]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800abc4:	430a      	orrs	r2, r1
 800abc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abc8:	f7fd ffbe 	bl	8008b48 <HAL_GetTick>
 800abcc:	0003      	movs	r3, r0
 800abce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abd0:	e009      	b.n	800abe6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abd2:	f7fd ffb9 	bl	8008b48 <HAL_GetTick>
 800abd6:	0002      	movs	r2, r0
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	4a2f      	ldr	r2, [pc, #188]	; (800ac9c <HAL_RCC_ClockConfig+0x1f4>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d901      	bls.n	800abe6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800abe2:	2303      	movs	r3, #3
 800abe4:	e054      	b.n	800ac90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abe6:	4b2e      	ldr	r3, [pc, #184]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	2238      	movs	r2, #56	; 0x38
 800abec:	401a      	ands	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d1ec      	bne.n	800abd2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abf8:	4b27      	ldr	r3, [pc, #156]	; (800ac98 <HAL_RCC_ClockConfig+0x1f0>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2207      	movs	r2, #7
 800abfe:	4013      	ands	r3, r2
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d21e      	bcs.n	800ac44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac06:	4b24      	ldr	r3, [pc, #144]	; (800ac98 <HAL_RCC_ClockConfig+0x1f0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2207      	movs	r2, #7
 800ac0c:	4393      	bics	r3, r2
 800ac0e:	0019      	movs	r1, r3
 800ac10:	4b21      	ldr	r3, [pc, #132]	; (800ac98 <HAL_RCC_ClockConfig+0x1f0>)
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	430a      	orrs	r2, r1
 800ac16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ac18:	f7fd ff96 	bl	8008b48 <HAL_GetTick>
 800ac1c:	0003      	movs	r3, r0
 800ac1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ac20:	e009      	b.n	800ac36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac22:	f7fd ff91 	bl	8008b48 <HAL_GetTick>
 800ac26:	0002      	movs	r2, r0
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	4a1b      	ldr	r2, [pc, #108]	; (800ac9c <HAL_RCC_ClockConfig+0x1f4>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d901      	bls.n	800ac36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800ac32:	2303      	movs	r3, #3
 800ac34:	e02c      	b.n	800ac90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ac36:	4b18      	ldr	r3, [pc, #96]	; (800ac98 <HAL_RCC_ClockConfig+0x1f0>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2207      	movs	r2, #7
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d1ee      	bne.n	800ac22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2204      	movs	r2, #4
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	d009      	beq.n	800ac62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800ac4e:	4b14      	ldr	r3, [pc, #80]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	4a15      	ldr	r2, [pc, #84]	; (800aca8 <HAL_RCC_ClockConfig+0x200>)
 800ac54:	4013      	ands	r3, r2
 800ac56:	0019      	movs	r1, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68da      	ldr	r2, [r3, #12]
 800ac5c:	4b10      	ldr	r3, [pc, #64]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800ac62:	f000 f829 	bl	800acb8 <HAL_RCC_GetSysClockFreq>
 800ac66:	0001      	movs	r1, r0
 800ac68:	4b0d      	ldr	r3, [pc, #52]	; (800aca0 <HAL_RCC_ClockConfig+0x1f8>)
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	0a1b      	lsrs	r3, r3, #8
 800ac6e:	220f      	movs	r2, #15
 800ac70:	401a      	ands	r2, r3
 800ac72:	4b0e      	ldr	r3, [pc, #56]	; (800acac <HAL_RCC_ClockConfig+0x204>)
 800ac74:	0092      	lsls	r2, r2, #2
 800ac76:	58d3      	ldr	r3, [r2, r3]
 800ac78:	221f      	movs	r2, #31
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	000a      	movs	r2, r1
 800ac7e:	40da      	lsrs	r2, r3
 800ac80:	4b0b      	ldr	r3, [pc, #44]	; (800acb0 <HAL_RCC_ClockConfig+0x208>)
 800ac82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ac84:	4b0b      	ldr	r3, [pc, #44]	; (800acb4 <HAL_RCC_ClockConfig+0x20c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	0018      	movs	r0, r3
 800ac8a:	f7fd fda9 	bl	80087e0 <HAL_InitTick>
 800ac8e:	0003      	movs	r3, r0
}
 800ac90:	0018      	movs	r0, r3
 800ac92:	46bd      	mov	sp, r7
 800ac94:	b004      	add	sp, #16
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	40022000 	.word	0x40022000
 800ac9c:	00001388 	.word	0x00001388
 800aca0:	40021000 	.word	0x40021000
 800aca4:	fffff0ff 	.word	0xfffff0ff
 800aca8:	ffff8fff 	.word	0xffff8fff
 800acac:	0801c398 	.word	0x0801c398
 800acb0:	2000002c 	.word	0x2000002c
 800acb4:	20000030 	.word	0x20000030

0800acb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800acbe:	4b3c      	ldr	r3, [pc, #240]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	2238      	movs	r2, #56	; 0x38
 800acc4:	4013      	ands	r3, r2
 800acc6:	d10f      	bne.n	800ace8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800acc8:	4b39      	ldr	r3, [pc, #228]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	0adb      	lsrs	r3, r3, #11
 800acce:	2207      	movs	r2, #7
 800acd0:	4013      	ands	r3, r2
 800acd2:	2201      	movs	r2, #1
 800acd4:	409a      	lsls	r2, r3
 800acd6:	0013      	movs	r3, r2
 800acd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	4835      	ldr	r0, [pc, #212]	; (800adb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800acde:	f7fb fa87 	bl	80061f0 <__udivsi3>
 800ace2:	0003      	movs	r3, r0
 800ace4:	613b      	str	r3, [r7, #16]
 800ace6:	e05d      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ace8:	4b31      	ldr	r3, [pc, #196]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	2238      	movs	r2, #56	; 0x38
 800acee:	4013      	ands	r3, r2
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	d102      	bne.n	800acfa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800acf4:	4b30      	ldr	r3, [pc, #192]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x100>)
 800acf6:	613b      	str	r3, [r7, #16]
 800acf8:	e054      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800acfa:	4b2d      	ldr	r3, [pc, #180]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	2238      	movs	r2, #56	; 0x38
 800ad00:	4013      	ands	r3, r2
 800ad02:	2b10      	cmp	r3, #16
 800ad04:	d138      	bne.n	800ad78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800ad06:	4b2a      	ldr	r3, [pc, #168]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	2203      	movs	r2, #3
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad10:	4b27      	ldr	r3, [pc, #156]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	091b      	lsrs	r3, r3, #4
 800ad16:	2207      	movs	r2, #7
 800ad18:	4013      	ands	r3, r2
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d10d      	bne.n	800ad40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad24:	68b9      	ldr	r1, [r7, #8]
 800ad26:	4824      	ldr	r0, [pc, #144]	; (800adb8 <HAL_RCC_GetSysClockFreq+0x100>)
 800ad28:	f7fb fa62 	bl	80061f0 <__udivsi3>
 800ad2c:	0003      	movs	r3, r0
 800ad2e:	0019      	movs	r1, r3
 800ad30:	4b1f      	ldr	r3, [pc, #124]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	0a1b      	lsrs	r3, r3, #8
 800ad36:	227f      	movs	r2, #127	; 0x7f
 800ad38:	4013      	ands	r3, r2
 800ad3a:	434b      	muls	r3, r1
 800ad3c:	617b      	str	r3, [r7, #20]
        break;
 800ad3e:	e00d      	b.n	800ad5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800ad40:	68b9      	ldr	r1, [r7, #8]
 800ad42:	481c      	ldr	r0, [pc, #112]	; (800adb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800ad44:	f7fb fa54 	bl	80061f0 <__udivsi3>
 800ad48:	0003      	movs	r3, r0
 800ad4a:	0019      	movs	r1, r3
 800ad4c:	4b18      	ldr	r3, [pc, #96]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	0a1b      	lsrs	r3, r3, #8
 800ad52:	227f      	movs	r2, #127	; 0x7f
 800ad54:	4013      	ands	r3, r2
 800ad56:	434b      	muls	r3, r1
 800ad58:	617b      	str	r3, [r7, #20]
        break;
 800ad5a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800ad5c:	4b14      	ldr	r3, [pc, #80]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	0f5b      	lsrs	r3, r3, #29
 800ad62:	2207      	movs	r2, #7
 800ad64:	4013      	ands	r3, r2
 800ad66:	3301      	adds	r3, #1
 800ad68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800ad6a:	6879      	ldr	r1, [r7, #4]
 800ad6c:	6978      	ldr	r0, [r7, #20]
 800ad6e:	f7fb fa3f 	bl	80061f0 <__udivsi3>
 800ad72:	0003      	movs	r3, r0
 800ad74:	613b      	str	r3, [r7, #16]
 800ad76:	e015      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800ad78:	4b0d      	ldr	r3, [pc, #52]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	2238      	movs	r2, #56	; 0x38
 800ad7e:	4013      	ands	r3, r2
 800ad80:	2b20      	cmp	r3, #32
 800ad82:	d103      	bne.n	800ad8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800ad84:	2380      	movs	r3, #128	; 0x80
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	613b      	str	r3, [r7, #16]
 800ad8a:	e00b      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800ad8c:	4b08      	ldr	r3, [pc, #32]	; (800adb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	2238      	movs	r2, #56	; 0x38
 800ad92:	4013      	ands	r3, r2
 800ad94:	2b18      	cmp	r3, #24
 800ad96:	d103      	bne.n	800ada0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800ad98:	23fa      	movs	r3, #250	; 0xfa
 800ad9a:	01db      	lsls	r3, r3, #7
 800ad9c:	613b      	str	r3, [r7, #16]
 800ad9e:	e001      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ada4:	693b      	ldr	r3, [r7, #16]
}
 800ada6:	0018      	movs	r0, r3
 800ada8:	46bd      	mov	sp, r7
 800adaa:	b006      	add	sp, #24
 800adac:	bd80      	pop	{r7, pc}
 800adae:	46c0      	nop			; (mov r8, r8)
 800adb0:	40021000 	.word	0x40021000
 800adb4:	00f42400 	.word	0x00f42400
 800adb8:	007a1200 	.word	0x007a1200

0800adbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800adc0:	4b02      	ldr	r3, [pc, #8]	; (800adcc <HAL_RCC_GetHCLKFreq+0x10>)
 800adc2:	681b      	ldr	r3, [r3, #0]
}
 800adc4:	0018      	movs	r0, r3
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	2000002c 	.word	0x2000002c

0800add0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800add0:	b5b0      	push	{r4, r5, r7, lr}
 800add2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800add4:	f7ff fff2 	bl	800adbc <HAL_RCC_GetHCLKFreq>
 800add8:	0004      	movs	r4, r0
 800adda:	f7ff faf9 	bl	800a3d0 <LL_RCC_GetAPB1Prescaler>
 800adde:	0003      	movs	r3, r0
 800ade0:	0b1a      	lsrs	r2, r3, #12
 800ade2:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ade4:	0092      	lsls	r2, r2, #2
 800ade6:	58d3      	ldr	r3, [r2, r3]
 800ade8:	221f      	movs	r2, #31
 800adea:	4013      	ands	r3, r2
 800adec:	40dc      	lsrs	r4, r3
 800adee:	0023      	movs	r3, r4
}
 800adf0:	0018      	movs	r0, r3
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bdb0      	pop	{r4, r5, r7, pc}
 800adf6:	46c0      	nop			; (mov r8, r8)
 800adf8:	0801c3d8 	.word	0x0801c3d8

0800adfc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2207      	movs	r2, #7
 800ae0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <HAL_RCC_GetClockConfig+0x4c>)
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	2207      	movs	r2, #7
 800ae12:	401a      	ands	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ae18:	4b0b      	ldr	r3, [pc, #44]	; (800ae48 <HAL_RCC_GetClockConfig+0x4c>)
 800ae1a:	689a      	ldr	r2, [r3, #8]
 800ae1c:	23f0      	movs	r3, #240	; 0xf0
 800ae1e:	011b      	lsls	r3, r3, #4
 800ae20:	401a      	ands	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800ae26:	4b08      	ldr	r3, [pc, #32]	; (800ae48 <HAL_RCC_GetClockConfig+0x4c>)
 800ae28:	689a      	ldr	r2, [r3, #8]
 800ae2a:	23e0      	movs	r3, #224	; 0xe0
 800ae2c:	01db      	lsls	r3, r3, #7
 800ae2e:	401a      	ands	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae34:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <HAL_RCC_GetClockConfig+0x50>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2207      	movs	r2, #7
 800ae3a:	401a      	ands	r2, r3
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	601a      	str	r2, [r3, #0]
}
 800ae40:	46c0      	nop			; (mov r8, r8)
 800ae42:	46bd      	mov	sp, r7
 800ae44:	b002      	add	sp, #8
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	40021000 	.word	0x40021000
 800ae4c:	40022000 	.word	0x40022000

0800ae50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800ae58:	2313      	movs	r3, #19
 800ae5a:	18fb      	adds	r3, r7, r3
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae60:	2312      	movs	r3, #18
 800ae62:	18fb      	adds	r3, r7, r3
 800ae64:	2200      	movs	r2, #0
 800ae66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	2380      	movs	r3, #128	; 0x80
 800ae6e:	029b      	lsls	r3, r3, #10
 800ae70:	4013      	ands	r3, r2
 800ae72:	d100      	bne.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800ae74:	e0ad      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae76:	2011      	movs	r0, #17
 800ae78:	183b      	adds	r3, r7, r0
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae7e:	4b47      	ldr	r3, [pc, #284]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ae80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae82:	2380      	movs	r3, #128	; 0x80
 800ae84:	055b      	lsls	r3, r3, #21
 800ae86:	4013      	ands	r3, r2
 800ae88:	d110      	bne.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae8a:	4b44      	ldr	r3, [pc, #272]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ae8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae8e:	4b43      	ldr	r3, [pc, #268]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ae90:	2180      	movs	r1, #128	; 0x80
 800ae92:	0549      	lsls	r1, r1, #21
 800ae94:	430a      	orrs	r2, r1
 800ae96:	63da      	str	r2, [r3, #60]	; 0x3c
 800ae98:	4b40      	ldr	r3, [pc, #256]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ae9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae9c:	2380      	movs	r3, #128	; 0x80
 800ae9e:	055b      	lsls	r3, r3, #21
 800aea0:	4013      	ands	r3, r2
 800aea2:	60bb      	str	r3, [r7, #8]
 800aea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aea6:	183b      	adds	r3, r7, r0
 800aea8:	2201      	movs	r2, #1
 800aeaa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aeac:	4b3c      	ldr	r3, [pc, #240]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	4b3b      	ldr	r3, [pc, #236]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800aeb2:	2180      	movs	r1, #128	; 0x80
 800aeb4:	0049      	lsls	r1, r1, #1
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aeba:	f7fd fe45 	bl	8008b48 <HAL_GetTick>
 800aebe:	0003      	movs	r3, r0
 800aec0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aec2:	e00b      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aec4:	f7fd fe40 	bl	8008b48 <HAL_GetTick>
 800aec8:	0002      	movs	r2, r0
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d904      	bls.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800aed2:	2313      	movs	r3, #19
 800aed4:	18fb      	adds	r3, r7, r3
 800aed6:	2203      	movs	r2, #3
 800aed8:	701a      	strb	r2, [r3, #0]
        break;
 800aeda:	e005      	b.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aedc:	4b30      	ldr	r3, [pc, #192]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	2380      	movs	r3, #128	; 0x80
 800aee2:	005b      	lsls	r3, r3, #1
 800aee4:	4013      	ands	r3, r2
 800aee6:	d0ed      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800aee8:	2313      	movs	r3, #19
 800aeea:	18fb      	adds	r3, r7, r3
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d15e      	bne.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aef2:	4b2a      	ldr	r3, [pc, #168]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800aef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aef6:	23c0      	movs	r3, #192	; 0xc0
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4013      	ands	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d019      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d014      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800af0e:	4b23      	ldr	r3, [pc, #140]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800af10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af12:	4a24      	ldr	r2, [pc, #144]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800af14:	4013      	ands	r3, r2
 800af16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af18:	4b20      	ldr	r3, [pc, #128]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800af1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800af1c:	4b1f      	ldr	r3, [pc, #124]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800af1e:	2180      	movs	r1, #128	; 0x80
 800af20:	0249      	lsls	r1, r1, #9
 800af22:	430a      	orrs	r2, r1
 800af24:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af26:	4b1d      	ldr	r3, [pc, #116]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800af28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800af2a:	4b1c      	ldr	r3, [pc, #112]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800af2c:	491e      	ldr	r1, [pc, #120]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800af2e:	400a      	ands	r2, r1
 800af30:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800af32:	4b1a      	ldr	r3, [pc, #104]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2201      	movs	r2, #1
 800af3c:	4013      	ands	r3, r2
 800af3e:	d016      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af40:	f7fd fe02 	bl	8008b48 <HAL_GetTick>
 800af44:	0003      	movs	r3, r0
 800af46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af48:	e00c      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af4a:	f7fd fdfd 	bl	8008b48 <HAL_GetTick>
 800af4e:	0002      	movs	r2, r0
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	4a15      	ldr	r2, [pc, #84]	; (800afac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d904      	bls.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800af5a:	2313      	movs	r3, #19
 800af5c:	18fb      	adds	r3, r7, r3
 800af5e:	2203      	movs	r2, #3
 800af60:	701a      	strb	r2, [r3, #0]
            break;
 800af62:	e004      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af64:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800af66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af68:	2202      	movs	r2, #2
 800af6a:	4013      	ands	r3, r2
 800af6c:	d0ed      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800af6e:	2313      	movs	r3, #19
 800af70:	18fb      	adds	r3, r7, r3
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af78:	4b08      	ldr	r3, [pc, #32]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800af7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af7c:	4a09      	ldr	r2, [pc, #36]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800af7e:	4013      	ands	r3, r2
 800af80:	0019      	movs	r1, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af86:	4b05      	ldr	r3, [pc, #20]	; (800af9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800af88:	430a      	orrs	r2, r1
 800af8a:	65da      	str	r2, [r3, #92]	; 0x5c
 800af8c:	e016      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af8e:	2312      	movs	r3, #18
 800af90:	18fb      	adds	r3, r7, r3
 800af92:	2213      	movs	r2, #19
 800af94:	18ba      	adds	r2, r7, r2
 800af96:	7812      	ldrb	r2, [r2, #0]
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	e00f      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800af9c:	40021000 	.word	0x40021000
 800afa0:	40007000 	.word	0x40007000
 800afa4:	fffffcff 	.word	0xfffffcff
 800afa8:	fffeffff 	.word	0xfffeffff
 800afac:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb0:	2312      	movs	r3, #18
 800afb2:	18fb      	adds	r3, r7, r3
 800afb4:	2213      	movs	r2, #19
 800afb6:	18ba      	adds	r2, r7, r2
 800afb8:	7812      	ldrb	r2, [r2, #0]
 800afba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800afbc:	2311      	movs	r3, #17
 800afbe:	18fb      	adds	r3, r7, r3
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d105      	bne.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afc6:	4bb6      	ldr	r3, [pc, #728]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800afc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afca:	4bb5      	ldr	r3, [pc, #724]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800afcc:	49b5      	ldr	r1, [pc, #724]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800afce:	400a      	ands	r2, r1
 800afd0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2201      	movs	r2, #1
 800afd8:	4013      	ands	r3, r2
 800afda:	d009      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800afdc:	4bb0      	ldr	r3, [pc, #704]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800afde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afe0:	2203      	movs	r2, #3
 800afe2:	4393      	bics	r3, r2
 800afe4:	0019      	movs	r1, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	4bad      	ldr	r3, [pc, #692]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800afec:	430a      	orrs	r2, r1
 800afee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2202      	movs	r2, #2
 800aff6:	4013      	ands	r3, r2
 800aff8:	d009      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800affa:	4ba9      	ldr	r3, [pc, #676]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800affc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800affe:	220c      	movs	r2, #12
 800b000:	4393      	bics	r3, r2
 800b002:	0019      	movs	r1, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	689a      	ldr	r2, [r3, #8]
 800b008:	4ba5      	ldr	r3, [pc, #660]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b00a:	430a      	orrs	r2, r1
 800b00c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2204      	movs	r2, #4
 800b014:	4013      	ands	r3, r2
 800b016:	d009      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b018:	4ba1      	ldr	r3, [pc, #644]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01c:	2230      	movs	r2, #48	; 0x30
 800b01e:	4393      	bics	r3, r2
 800b020:	0019      	movs	r1, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	4b9e      	ldr	r3, [pc, #632]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b028:	430a      	orrs	r2, r1
 800b02a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2210      	movs	r2, #16
 800b032:	4013      	ands	r3, r2
 800b034:	d009      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b036:	4b9a      	ldr	r3, [pc, #616]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03a:	4a9b      	ldr	r2, [pc, #620]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b03c:	4013      	ands	r3, r2
 800b03e:	0019      	movs	r1, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	691a      	ldr	r2, [r3, #16]
 800b044:	4b96      	ldr	r3, [pc, #600]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b046:	430a      	orrs	r2, r1
 800b048:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	2380      	movs	r3, #128	; 0x80
 800b050:	015b      	lsls	r3, r3, #5
 800b052:	4013      	ands	r3, r2
 800b054:	d009      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800b056:	4b92      	ldr	r3, [pc, #584]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05a:	4a94      	ldr	r2, [pc, #592]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b05c:	4013      	ands	r3, r2
 800b05e:	0019      	movs	r1, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	695a      	ldr	r2, [r3, #20]
 800b064:	4b8e      	ldr	r3, [pc, #568]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b066:	430a      	orrs	r2, r1
 800b068:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	2380      	movs	r3, #128	; 0x80
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4013      	ands	r3, r2
 800b074:	d009      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b076:	4b8a      	ldr	r3, [pc, #552]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b07a:	4a8d      	ldr	r2, [pc, #564]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	0019      	movs	r1, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b084:	4b86      	ldr	r3, [pc, #536]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b086:	430a      	orrs	r2, r1
 800b088:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	2380      	movs	r3, #128	; 0x80
 800b090:	00db      	lsls	r3, r3, #3
 800b092:	4013      	ands	r3, r2
 800b094:	d009      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b096:	4b82      	ldr	r3, [pc, #520]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b09a:	4a86      	ldr	r2, [pc, #536]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800b09c:	4013      	ands	r3, r2
 800b09e:	0019      	movs	r1, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a4:	4b7e      	ldr	r3, [pc, #504]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0a6:	430a      	orrs	r2, r1
 800b0a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	d009      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b0b4:	4b7a      	ldr	r3, [pc, #488]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b8:	4a7f      	ldr	r2, [pc, #508]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	0019      	movs	r1, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	699a      	ldr	r2, [r3, #24]
 800b0c2:	4b77      	ldr	r3, [pc, #476]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0c4:	430a      	orrs	r2, r1
 800b0c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2240      	movs	r2, #64	; 0x40
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	d009      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b0d2:	4b73      	ldr	r3, [pc, #460]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0d6:	4a79      	ldr	r2, [pc, #484]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b0d8:	4013      	ands	r3, r2
 800b0da:	0019      	movs	r1, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	69da      	ldr	r2, [r3, #28]
 800b0e0:	4b6f      	ldr	r3, [pc, #444]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	2380      	movs	r3, #128	; 0x80
 800b0ec:	01db      	lsls	r3, r3, #7
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	d015      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b0f2:	4b6b      	ldr	r3, [pc, #428]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	0899      	lsrs	r1, r3, #2
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0fe:	4b68      	ldr	r3, [pc, #416]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b100:	430a      	orrs	r2, r1
 800b102:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b108:	2380      	movs	r3, #128	; 0x80
 800b10a:	05db      	lsls	r3, r3, #23
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d106      	bne.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b110:	4b63      	ldr	r3, [pc, #396]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b112:	68da      	ldr	r2, [r3, #12]
 800b114:	4b62      	ldr	r3, [pc, #392]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b116:	2180      	movs	r1, #128	; 0x80
 800b118:	0249      	lsls	r1, r1, #9
 800b11a:	430a      	orrs	r2, r1
 800b11c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	2380      	movs	r3, #128	; 0x80
 800b124:	031b      	lsls	r3, r3, #12
 800b126:	4013      	ands	r3, r2
 800b128:	d009      	beq.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b12a:	4b5d      	ldr	r3, [pc, #372]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12e:	2240      	movs	r2, #64	; 0x40
 800b130:	4393      	bics	r3, r2
 800b132:	0019      	movs	r1, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b138:	4b59      	ldr	r3, [pc, #356]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b13a:	430a      	orrs	r2, r1
 800b13c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	2380      	movs	r3, #128	; 0x80
 800b144:	039b      	lsls	r3, r3, #14
 800b146:	4013      	ands	r3, r2
 800b148:	d016      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800b14a:	4b55      	ldr	r3, [pc, #340]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14e:	4a5c      	ldr	r2, [pc, #368]	; (800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b150:	4013      	ands	r3, r2
 800b152:	0019      	movs	r1, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b158:	4b51      	ldr	r3, [pc, #324]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b15a:	430a      	orrs	r2, r1
 800b15c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b162:	2380      	movs	r3, #128	; 0x80
 800b164:	03db      	lsls	r3, r3, #15
 800b166:	429a      	cmp	r2, r3
 800b168:	d106      	bne.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b16a:	4b4d      	ldr	r3, [pc, #308]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b16c:	68da      	ldr	r2, [r3, #12]
 800b16e:	4b4c      	ldr	r3, [pc, #304]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b170:	2180      	movs	r1, #128	; 0x80
 800b172:	0449      	lsls	r1, r1, #17
 800b174:	430a      	orrs	r2, r1
 800b176:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	2380      	movs	r3, #128	; 0x80
 800b17e:	03db      	lsls	r3, r3, #15
 800b180:	4013      	ands	r3, r2
 800b182:	d016      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800b184:	4b46      	ldr	r3, [pc, #280]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b188:	4a4e      	ldr	r2, [pc, #312]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b18a:	4013      	ands	r3, r2
 800b18c:	0019      	movs	r1, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b192:	4b43      	ldr	r3, [pc, #268]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b194:	430a      	orrs	r2, r1
 800b196:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b19c:	2380      	movs	r3, #128	; 0x80
 800b19e:	045b      	lsls	r3, r3, #17
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d106      	bne.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b1a4:	4b3e      	ldr	r3, [pc, #248]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1a6:	68da      	ldr	r2, [r3, #12]
 800b1a8:	4b3d      	ldr	r3, [pc, #244]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1aa:	2180      	movs	r1, #128	; 0x80
 800b1ac:	0449      	lsls	r1, r1, #17
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	2380      	movs	r3, #128	; 0x80
 800b1b8:	011b      	lsls	r3, r3, #4
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	d014      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800b1be:	4b38      	ldr	r3, [pc, #224]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c2:	2203      	movs	r2, #3
 800b1c4:	4393      	bics	r3, r2
 800b1c6:	0019      	movs	r1, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a1a      	ldr	r2, [r3, #32]
 800b1cc:	4b34      	ldr	r3, [pc, #208]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d106      	bne.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b1da:	4b31      	ldr	r3, [pc, #196]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	4b30      	ldr	r3, [pc, #192]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1e0:	2180      	movs	r1, #128	; 0x80
 800b1e2:	0249      	lsls	r1, r1, #9
 800b1e4:	430a      	orrs	r2, r1
 800b1e6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	2380      	movs	r3, #128	; 0x80
 800b1ee:	019b      	lsls	r3, r3, #6
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	d014      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800b1f4:	4b2a      	ldr	r3, [pc, #168]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1f8:	220c      	movs	r2, #12
 800b1fa:	4393      	bics	r3, r2
 800b1fc:	0019      	movs	r1, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b202:	4b27      	ldr	r3, [pc, #156]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b204:	430a      	orrs	r2, r1
 800b206:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20c:	2b04      	cmp	r3, #4
 800b20e:	d106      	bne.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b210:	4b23      	ldr	r3, [pc, #140]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b212:	68da      	ldr	r2, [r3, #12]
 800b214:	4b22      	ldr	r3, [pc, #136]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b216:	2180      	movs	r1, #128	; 0x80
 800b218:	0249      	lsls	r1, r1, #9
 800b21a:	430a      	orrs	r2, r1
 800b21c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	2380      	movs	r3, #128	; 0x80
 800b224:	045b      	lsls	r3, r3, #17
 800b226:	4013      	ands	r3, r2
 800b228:	d016      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b22a:	4b1d      	ldr	r3, [pc, #116]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b22e:	4a22      	ldr	r2, [pc, #136]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b230:	4013      	ands	r3, r2
 800b232:	0019      	movs	r1, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b238:	4b19      	ldr	r3, [pc, #100]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b23a:	430a      	orrs	r2, r1
 800b23c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b242:	2380      	movs	r3, #128	; 0x80
 800b244:	019b      	lsls	r3, r3, #6
 800b246:	429a      	cmp	r2, r3
 800b248:	d106      	bne.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b24a:	4b15      	ldr	r3, [pc, #84]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	4b14      	ldr	r3, [pc, #80]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b250:	2180      	movs	r1, #128	; 0x80
 800b252:	0449      	lsls	r1, r1, #17
 800b254:	430a      	orrs	r2, r1
 800b256:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	2380      	movs	r3, #128	; 0x80
 800b25e:	049b      	lsls	r3, r3, #18
 800b260:	4013      	ands	r3, r2
 800b262:	d016      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b264:	4b0e      	ldr	r3, [pc, #56]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b268:	4a10      	ldr	r2, [pc, #64]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b26a:	4013      	ands	r3, r2
 800b26c:	0019      	movs	r1, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b272:	4b0b      	ldr	r3, [pc, #44]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b274:	430a      	orrs	r2, r1
 800b276:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b27c:	2380      	movs	r3, #128	; 0x80
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	429a      	cmp	r2, r3
 800b282:	d106      	bne.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b284:	4b06      	ldr	r3, [pc, #24]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b286:	68da      	ldr	r2, [r3, #12]
 800b288:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b28a:	2180      	movs	r1, #128	; 0x80
 800b28c:	0449      	lsls	r1, r1, #17
 800b28e:	430a      	orrs	r2, r1
 800b290:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800b292:	2312      	movs	r3, #18
 800b294:	18fb      	adds	r3, r7, r3
 800b296:	781b      	ldrb	r3, [r3, #0]
}
 800b298:	0018      	movs	r0, r3
 800b29a:	46bd      	mov	sp, r7
 800b29c:	b006      	add	sp, #24
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	40021000 	.word	0x40021000
 800b2a4:	efffffff 	.word	0xefffffff
 800b2a8:	fffff3ff 	.word	0xfffff3ff
 800b2ac:	fffffcff 	.word	0xfffffcff
 800b2b0:	fff3ffff 	.word	0xfff3ffff
 800b2b4:	ffcfffff 	.word	0xffcfffff
 800b2b8:	ffffcfff 	.word	0xffffcfff
 800b2bc:	ffff3fff 	.word	0xffff3fff
 800b2c0:	ffbfffff 	.word	0xffbfffff
 800b2c4:	feffffff 	.word	0xfeffffff

0800b2c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e0a8      	b.n	800b42c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d109      	bne.n	800b2f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	2382      	movs	r3, #130	; 0x82
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d009      	beq.n	800b302 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	61da      	str	r2, [r3, #28]
 800b2f4:	e005      	b.n	800b302 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	225d      	movs	r2, #93	; 0x5d
 800b30c:	5c9b      	ldrb	r3, [r3, r2]
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b00      	cmp	r3, #0
 800b312:	d107      	bne.n	800b324 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	225c      	movs	r2, #92	; 0x5c
 800b318:	2100      	movs	r1, #0
 800b31a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	0018      	movs	r0, r3
 800b320:	f7fd f9c4 	bl	80086ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	225d      	movs	r2, #93	; 0x5d
 800b328:	2102      	movs	r1, #2
 800b32a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2140      	movs	r1, #64	; 0x40
 800b338:	438a      	bics	r2, r1
 800b33a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68da      	ldr	r2, [r3, #12]
 800b340:	23e0      	movs	r3, #224	; 0xe0
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	429a      	cmp	r2, r3
 800b346:	d902      	bls.n	800b34e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b348:	2300      	movs	r3, #0
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	e002      	b.n	800b354 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b34e:	2380      	movs	r3, #128	; 0x80
 800b350:	015b      	lsls	r3, r3, #5
 800b352:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	23f0      	movs	r3, #240	; 0xf0
 800b35a:	011b      	lsls	r3, r3, #4
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d008      	beq.n	800b372 <HAL_SPI_Init+0xaa>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68da      	ldr	r2, [r3, #12]
 800b364:	23e0      	movs	r3, #224	; 0xe0
 800b366:	00db      	lsls	r3, r3, #3
 800b368:	429a      	cmp	r2, r3
 800b36a:	d002      	beq.n	800b372 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	2382      	movs	r3, #130	; 0x82
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	401a      	ands	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6899      	ldr	r1, [r3, #8]
 800b380:	2384      	movs	r3, #132	; 0x84
 800b382:	021b      	lsls	r3, r3, #8
 800b384:	400b      	ands	r3, r1
 800b386:	431a      	orrs	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	2102      	movs	r1, #2
 800b38e:	400b      	ands	r3, r1
 800b390:	431a      	orrs	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	2101      	movs	r1, #1
 800b398:	400b      	ands	r3, r1
 800b39a:	431a      	orrs	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6999      	ldr	r1, [r3, #24]
 800b3a0:	2380      	movs	r3, #128	; 0x80
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	400b      	ands	r3, r1
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	69db      	ldr	r3, [r3, #28]
 800b3ac:	2138      	movs	r1, #56	; 0x38
 800b3ae:	400b      	ands	r3, r1
 800b3b0:	431a      	orrs	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	2180      	movs	r1, #128	; 0x80
 800b3b8:	400b      	ands	r3, r1
 800b3ba:	431a      	orrs	r2, r3
 800b3bc:	0011      	movs	r1, r2
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3c2:	2380      	movs	r3, #128	; 0x80
 800b3c4:	019b      	lsls	r3, r3, #6
 800b3c6:	401a      	ands	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	430a      	orrs	r2, r1
 800b3ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	0c1b      	lsrs	r3, r3, #16
 800b3d6:	2204      	movs	r2, #4
 800b3d8:	401a      	ands	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	2110      	movs	r1, #16
 800b3e0:	400b      	ands	r3, r1
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e8:	2108      	movs	r1, #8
 800b3ea:	400b      	ands	r3, r1
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68d9      	ldr	r1, [r3, #12]
 800b3f2:	23f0      	movs	r3, #240	; 0xf0
 800b3f4:	011b      	lsls	r3, r3, #4
 800b3f6:	400b      	ands	r3, r1
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	0011      	movs	r1, r2
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	2380      	movs	r3, #128	; 0x80
 800b400:	015b      	lsls	r3, r3, #5
 800b402:	401a      	ands	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	430a      	orrs	r2, r1
 800b40a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	69da      	ldr	r2, [r3, #28]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4907      	ldr	r1, [pc, #28]	; (800b434 <HAL_SPI_Init+0x16c>)
 800b418:	400a      	ands	r2, r1
 800b41a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	225d      	movs	r2, #93	; 0x5d
 800b426:	2101      	movs	r1, #1
 800b428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	0018      	movs	r0, r3
 800b42e:	46bd      	mov	sp, r7
 800b430:	b004      	add	sp, #16
 800b432:	bd80      	pop	{r7, pc}
 800b434:	fffff7ff 	.word	0xfffff7ff

0800b438 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	1dbb      	adds	r3, r7, #6
 800b446:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b448:	231f      	movs	r3, #31
 800b44a:	18fb      	adds	r3, r7, r3
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	225c      	movs	r2, #92	; 0x5c
 800b454:	5c9b      	ldrb	r3, [r3, r2]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d101      	bne.n	800b45e <HAL_SPI_Transmit+0x26>
 800b45a:	2302      	movs	r3, #2
 800b45c:	e147      	b.n	800b6ee <HAL_SPI_Transmit+0x2b6>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	225c      	movs	r2, #92	; 0x5c
 800b462:	2101      	movs	r1, #1
 800b464:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b466:	f7fd fb6f 	bl	8008b48 <HAL_GetTick>
 800b46a:	0003      	movs	r3, r0
 800b46c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b46e:	2316      	movs	r3, #22
 800b470:	18fb      	adds	r3, r7, r3
 800b472:	1dba      	adds	r2, r7, #6
 800b474:	8812      	ldrh	r2, [r2, #0]
 800b476:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	225d      	movs	r2, #93	; 0x5d
 800b47c:	5c9b      	ldrb	r3, [r3, r2]
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b01      	cmp	r3, #1
 800b482:	d004      	beq.n	800b48e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b484:	231f      	movs	r3, #31
 800b486:	18fb      	adds	r3, r7, r3
 800b488:	2202      	movs	r2, #2
 800b48a:	701a      	strb	r2, [r3, #0]
    goto error;
 800b48c:	e128      	b.n	800b6e0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d003      	beq.n	800b49c <HAL_SPI_Transmit+0x64>
 800b494:	1dbb      	adds	r3, r7, #6
 800b496:	881b      	ldrh	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d104      	bne.n	800b4a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b49c:	231f      	movs	r3, #31
 800b49e:	18fb      	adds	r3, r7, r3
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	701a      	strb	r2, [r3, #0]
    goto error;
 800b4a4:	e11c      	b.n	800b6e0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	225d      	movs	r2, #93	; 0x5d
 800b4aa:	2103      	movs	r1, #3
 800b4ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	1dba      	adds	r2, r7, #6
 800b4be:	8812      	ldrh	r2, [r2, #0]
 800b4c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	1dba      	adds	r2, r7, #6
 800b4c6:	8812      	ldrh	r2, [r2, #0]
 800b4c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2244      	movs	r2, #68	; 0x44
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2246      	movs	r2, #70	; 0x46
 800b4dc:	2100      	movs	r1, #0
 800b4de:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	2380      	movs	r3, #128	; 0x80
 800b4f2:	021b      	lsls	r3, r3, #8
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d110      	bne.n	800b51a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2140      	movs	r1, #64	; 0x40
 800b504:	438a      	bics	r2, r1
 800b506:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2180      	movs	r1, #128	; 0x80
 800b514:	01c9      	lsls	r1, r1, #7
 800b516:	430a      	orrs	r2, r1
 800b518:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2240      	movs	r2, #64	; 0x40
 800b522:	4013      	ands	r3, r2
 800b524:	2b40      	cmp	r3, #64	; 0x40
 800b526:	d007      	beq.n	800b538 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2140      	movs	r1, #64	; 0x40
 800b534:	430a      	orrs	r2, r1
 800b536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	68da      	ldr	r2, [r3, #12]
 800b53c:	23e0      	movs	r3, #224	; 0xe0
 800b53e:	00db      	lsls	r3, r3, #3
 800b540:	429a      	cmp	r2, r3
 800b542:	d952      	bls.n	800b5ea <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d004      	beq.n	800b556 <HAL_SPI_Transmit+0x11e>
 800b54c:	2316      	movs	r3, #22
 800b54e:	18fb      	adds	r3, r7, r3
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d143      	bne.n	800b5de <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55a:	881a      	ldrh	r2, [r3, #0]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b566:	1c9a      	adds	r2, r3, #2
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b570:	b29b      	uxth	r3, r3
 800b572:	3b01      	subs	r3, #1
 800b574:	b29a      	uxth	r2, r3
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b57a:	e030      	b.n	800b5de <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	2202      	movs	r2, #2
 800b584:	4013      	ands	r3, r2
 800b586:	2b02      	cmp	r3, #2
 800b588:	d112      	bne.n	800b5b0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58e:	881a      	ldrh	r2, [r3, #0]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59a:	1c9a      	adds	r2, r3, #2
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5ae:	e016      	b.n	800b5de <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5b0:	f7fd faca 	bl	8008b48 <HAL_GetTick>
 800b5b4:	0002      	movs	r2, r0
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d802      	bhi.n	800b5c6 <HAL_SPI_Transmit+0x18e>
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	d102      	bne.n	800b5cc <HAL_SPI_Transmit+0x194>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d108      	bne.n	800b5de <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800b5cc:	231f      	movs	r3, #31
 800b5ce:	18fb      	adds	r3, r7, r3
 800b5d0:	2203      	movs	r2, #3
 800b5d2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	225d      	movs	r2, #93	; 0x5d
 800b5d8:	2101      	movs	r1, #1
 800b5da:	5499      	strb	r1, [r3, r2]
          goto error;
 800b5dc:	e080      	b.n	800b6e0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1c9      	bne.n	800b57c <HAL_SPI_Transmit+0x144>
 800b5e8:	e053      	b.n	800b692 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d004      	beq.n	800b5fc <HAL_SPI_Transmit+0x1c4>
 800b5f2:	2316      	movs	r3, #22
 800b5f4:	18fb      	adds	r3, r7, r3
 800b5f6:	881b      	ldrh	r3, [r3, #0]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d145      	bne.n	800b688 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	330c      	adds	r3, #12
 800b606:	7812      	ldrb	r2, [r2, #0]
 800b608:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b618:	b29b      	uxth	r3, r3
 800b61a:	3b01      	subs	r3, #1
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b622:	e031      	b.n	800b688 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	2202      	movs	r2, #2
 800b62c:	4013      	ands	r3, r2
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d113      	bne.n	800b65a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	330c      	adds	r3, #12
 800b63c:	7812      	ldrb	r2, [r2, #0]
 800b63e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b64e:	b29b      	uxth	r3, r3
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b658:	e016      	b.n	800b688 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b65a:	f7fd fa75 	bl	8008b48 <HAL_GetTick>
 800b65e:	0002      	movs	r2, r0
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d802      	bhi.n	800b670 <HAL_SPI_Transmit+0x238>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	3301      	adds	r3, #1
 800b66e:	d102      	bne.n	800b676 <HAL_SPI_Transmit+0x23e>
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d108      	bne.n	800b688 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800b676:	231f      	movs	r3, #31
 800b678:	18fb      	adds	r3, r7, r3
 800b67a:	2203      	movs	r2, #3
 800b67c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	225d      	movs	r2, #93	; 0x5d
 800b682:	2101      	movs	r1, #1
 800b684:	5499      	strb	r1, [r3, r2]
          goto error;
 800b686:	e02b      	b.n	800b6e0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1c8      	bne.n	800b624 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b692:	69ba      	ldr	r2, [r7, #24]
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	0018      	movs	r0, r3
 800b69a:	f000 f95d 	bl	800b958 <SPI_EndRxTxTransaction>
 800b69e:	1e03      	subs	r3, r0, #0
 800b6a0:	d002      	beq.n	800b6a8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10a      	bne.n	800b6c6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	613b      	str	r3, [r7, #16]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	613b      	str	r3, [r7, #16]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	613b      	str	r3, [r7, #16]
 800b6c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d004      	beq.n	800b6d8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800b6ce:	231f      	movs	r3, #31
 800b6d0:	18fb      	adds	r3, r7, r3
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	701a      	strb	r2, [r3, #0]
 800b6d6:	e003      	b.n	800b6e0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	225d      	movs	r2, #93	; 0x5d
 800b6dc:	2101      	movs	r1, #1
 800b6de:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	225c      	movs	r2, #92	; 0x5c
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b6e8:	231f      	movs	r3, #31
 800b6ea:	18fb      	adds	r3, r7, r3
 800b6ec:	781b      	ldrb	r3, [r3, #0]
}
 800b6ee:	0018      	movs	r0, r3
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	b008      	add	sp, #32
 800b6f4:	bd80      	pop	{r7, pc}
	...

0800b6f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	603b      	str	r3, [r7, #0]
 800b704:	1dfb      	adds	r3, r7, #7
 800b706:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b708:	f7fd fa1e 	bl	8008b48 <HAL_GetTick>
 800b70c:	0002      	movs	r2, r0
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	1a9b      	subs	r3, r3, r2
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	18d3      	adds	r3, r2, r3
 800b716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b718:	f7fd fa16 	bl	8008b48 <HAL_GetTick>
 800b71c:	0003      	movs	r3, r0
 800b71e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b720:	4b3a      	ldr	r3, [pc, #232]	; (800b80c <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	015b      	lsls	r3, r3, #5
 800b726:	0d1b      	lsrs	r3, r3, #20
 800b728:	69fa      	ldr	r2, [r7, #28]
 800b72a:	4353      	muls	r3, r2
 800b72c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b72e:	e058      	b.n	800b7e2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	3301      	adds	r3, #1
 800b734:	d055      	beq.n	800b7e2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b736:	f7fd fa07 	bl	8008b48 <HAL_GetTick>
 800b73a:	0002      	movs	r2, r0
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	69fa      	ldr	r2, [r7, #28]
 800b742:	429a      	cmp	r2, r3
 800b744:	d902      	bls.n	800b74c <SPI_WaitFlagStateUntilTimeout+0x54>
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d142      	bne.n	800b7d2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	21e0      	movs	r1, #224	; 0xe0
 800b758:	438a      	bics	r2, r1
 800b75a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	2382      	movs	r3, #130	; 0x82
 800b762:	005b      	lsls	r3, r3, #1
 800b764:	429a      	cmp	r2, r3
 800b766:	d113      	bne.n	800b790 <SPI_WaitFlagStateUntilTimeout+0x98>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	689a      	ldr	r2, [r3, #8]
 800b76c:	2380      	movs	r3, #128	; 0x80
 800b76e:	021b      	lsls	r3, r3, #8
 800b770:	429a      	cmp	r2, r3
 800b772:	d005      	beq.n	800b780 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	689a      	ldr	r2, [r3, #8]
 800b778:	2380      	movs	r3, #128	; 0x80
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d107      	bne.n	800b790 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2140      	movs	r1, #64	; 0x40
 800b78c:	438a      	bics	r2, r1
 800b78e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b794:	2380      	movs	r3, #128	; 0x80
 800b796:	019b      	lsls	r3, r3, #6
 800b798:	429a      	cmp	r2, r3
 800b79a:	d110      	bne.n	800b7be <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	491a      	ldr	r1, [pc, #104]	; (800b810 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b7a8:	400a      	ands	r2, r1
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2180      	movs	r1, #128	; 0x80
 800b7b8:	0189      	lsls	r1, r1, #6
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	225d      	movs	r2, #93	; 0x5d
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	225c      	movs	r2, #92	; 0x5c
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	e017      	b.n	800b802 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	425a      	negs	r2, r3
 800b7f2:	4153      	adcs	r3, r2
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	001a      	movs	r2, r3
 800b7f8:	1dfb      	adds	r3, r7, #7
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d197      	bne.n	800b730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	0018      	movs	r0, r3
 800b804:	46bd      	mov	sp, r7
 800b806:	b008      	add	sp, #32
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	46c0      	nop			; (mov r8, r8)
 800b80c:	2000002c 	.word	0x2000002c
 800b810:	ffffdfff 	.word	0xffffdfff

0800b814 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b08a      	sub	sp, #40	; 0x28
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
 800b820:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b822:	2317      	movs	r3, #23
 800b824:	18fb      	adds	r3, r7, r3
 800b826:	2200      	movs	r2, #0
 800b828:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b82a:	f7fd f98d 	bl	8008b48 <HAL_GetTick>
 800b82e:	0002      	movs	r2, r0
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	18d3      	adds	r3, r2, r3
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b83a:	f7fd f985 	bl	8008b48 <HAL_GetTick>
 800b83e:	0003      	movs	r3, r0
 800b840:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	330c      	adds	r3, #12
 800b848:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b84a:	4b41      	ldr	r3, [pc, #260]	; (800b950 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	0013      	movs	r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	189b      	adds	r3, r3, r2
 800b854:	00da      	lsls	r2, r3, #3
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	0d1b      	lsrs	r3, r3, #20
 800b85a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b85c:	4353      	muls	r3, r2
 800b85e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b860:	e068      	b.n	800b934 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	23c0      	movs	r3, #192	; 0xc0
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	429a      	cmp	r2, r3
 800b86a:	d10a      	bne.n	800b882 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d107      	bne.n	800b882 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	b2da      	uxtb	r2, r3
 800b878:	2117      	movs	r1, #23
 800b87a:	187b      	adds	r3, r7, r1
 800b87c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b87e:	187b      	adds	r3, r7, r1
 800b880:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	3301      	adds	r3, #1
 800b886:	d055      	beq.n	800b934 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b888:	f7fd f95e 	bl	8008b48 <HAL_GetTick>
 800b88c:	0002      	movs	r2, r0
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b894:	429a      	cmp	r2, r3
 800b896:	d902      	bls.n	800b89e <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d142      	bne.n	800b924 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	21e0      	movs	r1, #224	; 0xe0
 800b8aa:	438a      	bics	r2, r1
 800b8ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	2382      	movs	r3, #130	; 0x82
 800b8b4:	005b      	lsls	r3, r3, #1
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d113      	bne.n	800b8e2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	689a      	ldr	r2, [r3, #8]
 800b8be:	2380      	movs	r3, #128	; 0x80
 800b8c0:	021b      	lsls	r3, r3, #8
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d005      	beq.n	800b8d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	689a      	ldr	r2, [r3, #8]
 800b8ca:	2380      	movs	r3, #128	; 0x80
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d107      	bne.n	800b8e2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2140      	movs	r1, #64	; 0x40
 800b8de:	438a      	bics	r2, r1
 800b8e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8e6:	2380      	movs	r3, #128	; 0x80
 800b8e8:	019b      	lsls	r3, r3, #6
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d110      	bne.n	800b910 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4916      	ldr	r1, [pc, #88]	; (800b954 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800b8fa:	400a      	ands	r2, r1
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2180      	movs	r1, #128	; 0x80
 800b90a:	0189      	lsls	r1, r1, #6
 800b90c:	430a      	orrs	r2, r1
 800b90e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	225d      	movs	r2, #93	; 0x5d
 800b914:	2101      	movs	r1, #1
 800b916:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	225c      	movs	r2, #92	; 0x5c
 800b91c:	2100      	movs	r1, #0
 800b91e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e010      	b.n	800b946 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800b92a:	2300      	movs	r3, #0
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	3b01      	subs	r3, #1
 800b932:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	4013      	ands	r3, r2
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d18e      	bne.n	800b862 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	0018      	movs	r0, r3
 800b948:	46bd      	mov	sp, r7
 800b94a:	b00a      	add	sp, #40	; 0x28
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	46c0      	nop			; (mov r8, r8)
 800b950:	2000002c 	.word	0x2000002c
 800b954:	ffffdfff 	.word	0xffffdfff

0800b958 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	23c0      	movs	r3, #192	; 0xc0
 800b968:	0159      	lsls	r1, r3, #5
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	0013      	movs	r3, r2
 800b972:	2200      	movs	r2, #0
 800b974:	f7ff ff4e 	bl	800b814 <SPI_WaitFifoStateUntilTimeout>
 800b978:	1e03      	subs	r3, r0, #0
 800b97a:	d007      	beq.n	800b98c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b980:	2220      	movs	r2, #32
 800b982:	431a      	orrs	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b988:	2303      	movs	r3, #3
 800b98a:	e027      	b.n	800b9dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	0013      	movs	r3, r2
 800b996:	2200      	movs	r2, #0
 800b998:	2180      	movs	r1, #128	; 0x80
 800b99a:	f7ff fead 	bl	800b6f8 <SPI_WaitFlagStateUntilTimeout>
 800b99e:	1e03      	subs	r3, r0, #0
 800b9a0:	d007      	beq.n	800b9b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	431a      	orrs	r2, r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	e014      	b.n	800b9dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	23c0      	movs	r3, #192	; 0xc0
 800b9b6:	00d9      	lsls	r1, r3, #3
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	0013      	movs	r3, r2
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f7ff ff27 	bl	800b814 <SPI_WaitFifoStateUntilTimeout>
 800b9c6:	1e03      	subs	r3, r0, #0
 800b9c8:	d007      	beq.n	800b9da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9ce:	2220      	movs	r2, #32
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e000      	b.n	800b9dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	0018      	movs	r0, r3
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	b004      	add	sp, #16
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e04a      	b.n	800ba8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	223d      	movs	r2, #61	; 0x3d
 800b9fa:	5c9b      	ldrb	r3, [r3, r2]
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d107      	bne.n	800ba12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	223c      	movs	r2, #60	; 0x3c
 800ba06:	2100      	movs	r1, #0
 800ba08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	f000 f841 	bl	800ba94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	223d      	movs	r2, #61	; 0x3d
 800ba16:	2102      	movs	r1, #2
 800ba18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3304      	adds	r3, #4
 800ba22:	0019      	movs	r1, r3
 800ba24:	0010      	movs	r0, r2
 800ba26:	f000 fb33 	bl	800c090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2248      	movs	r2, #72	; 0x48
 800ba2e:	2101      	movs	r1, #1
 800ba30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	223e      	movs	r2, #62	; 0x3e
 800ba36:	2101      	movs	r1, #1
 800ba38:	5499      	strb	r1, [r3, r2]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	223f      	movs	r2, #63	; 0x3f
 800ba3e:	2101      	movs	r1, #1
 800ba40:	5499      	strb	r1, [r3, r2]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2240      	movs	r2, #64	; 0x40
 800ba46:	2101      	movs	r1, #1
 800ba48:	5499      	strb	r1, [r3, r2]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2241      	movs	r2, #65	; 0x41
 800ba4e:	2101      	movs	r1, #1
 800ba50:	5499      	strb	r1, [r3, r2]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2242      	movs	r2, #66	; 0x42
 800ba56:	2101      	movs	r1, #1
 800ba58:	5499      	strb	r1, [r3, r2]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2243      	movs	r2, #67	; 0x43
 800ba5e:	2101      	movs	r1, #1
 800ba60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2244      	movs	r2, #68	; 0x44
 800ba66:	2101      	movs	r1, #1
 800ba68:	5499      	strb	r1, [r3, r2]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2245      	movs	r2, #69	; 0x45
 800ba6e:	2101      	movs	r1, #1
 800ba70:	5499      	strb	r1, [r3, r2]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2246      	movs	r2, #70	; 0x46
 800ba76:	2101      	movs	r1, #1
 800ba78:	5499      	strb	r1, [r3, r2]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2247      	movs	r2, #71	; 0x47
 800ba7e:	2101      	movs	r1, #1
 800ba80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	223d      	movs	r2, #61	; 0x3d
 800ba86:	2101      	movs	r1, #1
 800ba88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	b002      	add	sp, #8
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ba9c:	46c0      	nop			; (mov r8, r8)
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	b002      	add	sp, #8
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	223d      	movs	r2, #61	; 0x3d
 800bab0:	5c9b      	ldrb	r3, [r3, r2]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d001      	beq.n	800babc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	e047      	b.n	800bb4c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	223d      	movs	r2, #61	; 0x3d
 800bac0:	2102      	movs	r1, #2
 800bac2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68da      	ldr	r2, [r3, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2101      	movs	r1, #1
 800bad0:	430a      	orrs	r2, r1
 800bad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a1e      	ldr	r2, [pc, #120]	; (800bb54 <HAL_TIM_Base_Start_IT+0xb0>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d014      	beq.n	800bb08 <HAL_TIM_Base_Start_IT+0x64>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	2380      	movs	r3, #128	; 0x80
 800bae4:	05db      	lsls	r3, r3, #23
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d00e      	beq.n	800bb08 <HAL_TIM_Base_Start_IT+0x64>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a1a      	ldr	r2, [pc, #104]	; (800bb58 <HAL_TIM_Base_Start_IT+0xb4>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d009      	beq.n	800bb08 <HAL_TIM_Base_Start_IT+0x64>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a18      	ldr	r2, [pc, #96]	; (800bb5c <HAL_TIM_Base_Start_IT+0xb8>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d004      	beq.n	800bb08 <HAL_TIM_Base_Start_IT+0x64>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a17      	ldr	r2, [pc, #92]	; (800bb60 <HAL_TIM_Base_Start_IT+0xbc>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d116      	bne.n	800bb36 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	4a15      	ldr	r2, [pc, #84]	; (800bb64 <HAL_TIM_Base_Start_IT+0xc0>)
 800bb10:	4013      	ands	r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b06      	cmp	r3, #6
 800bb18:	d016      	beq.n	800bb48 <HAL_TIM_Base_Start_IT+0xa4>
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	2380      	movs	r3, #128	; 0x80
 800bb1e:	025b      	lsls	r3, r3, #9
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d011      	beq.n	800bb48 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2101      	movs	r1, #1
 800bb30:	430a      	orrs	r2, r1
 800bb32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb34:	e008      	b.n	800bb48 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2101      	movs	r1, #1
 800bb42:	430a      	orrs	r2, r1
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	e000      	b.n	800bb4a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb48:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	b004      	add	sp, #16
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	40012c00 	.word	0x40012c00
 800bb58:	40000400 	.word	0x40000400
 800bb5c:	40000800 	.word	0x40000800
 800bb60:	40014000 	.word	0x40014000
 800bb64:	00010007 	.word	0x00010007

0800bb68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e090      	b.n	800bc9e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	223d      	movs	r2, #61	; 0x3d
 800bb80:	5c9b      	ldrb	r3, [r3, r2]
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d107      	bne.n	800bb98 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	223c      	movs	r2, #60	; 0x3c
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	0018      	movs	r0, r3
 800bb94:	f7fc fdd4 	bl	8008740 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	223d      	movs	r2, #61	; 0x3d
 800bb9c:	2102      	movs	r1, #2
 800bb9e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	689a      	ldr	r2, [r3, #8]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	493f      	ldr	r1, [pc, #252]	; (800bca8 <HAL_TIM_Encoder_Init+0x140>)
 800bbac:	400a      	ands	r2, r1
 800bbae:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	0019      	movs	r1, r3
 800bbba:	0010      	movs	r0, r2
 800bbbc:	f000 fa68 	bl	800c090 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	4a31      	ldr	r2, [pc, #196]	; (800bcac <HAL_TIM_Encoder_Init+0x144>)
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	689a      	ldr	r2, [r3, #8]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	021b      	lsls	r3, r3, #8
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	4a2c      	ldr	r2, [pc, #176]	; (800bcb0 <HAL_TIM_Encoder_Init+0x148>)
 800bc00:	4013      	ands	r3, r2
 800bc02:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	4a2b      	ldr	r2, [pc, #172]	; (800bcb4 <HAL_TIM_Encoder_Init+0x14c>)
 800bc08:	4013      	ands	r3, r2
 800bc0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	68da      	ldr	r2, [r3, #12]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	69db      	ldr	r3, [r3, #28]
 800bc14:	021b      	lsls	r3, r3, #8
 800bc16:	4313      	orrs	r3, r2
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	011a      	lsls	r2, r3, #4
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	6a1b      	ldr	r3, [r3, #32]
 800bc28:	031b      	lsls	r3, r3, #12
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2222      	movs	r2, #34	; 0x22
 800bc36:	4393      	bics	r3, r2
 800bc38:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2288      	movs	r2, #136	; 0x88
 800bc3e:	4393      	bics	r3, r2
 800bc40:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	011b      	lsls	r3, r3, #4
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2248      	movs	r2, #72	; 0x48
 800bc70:	2101      	movs	r1, #1
 800bc72:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	223e      	movs	r2, #62	; 0x3e
 800bc78:	2101      	movs	r1, #1
 800bc7a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	223f      	movs	r2, #63	; 0x3f
 800bc80:	2101      	movs	r1, #1
 800bc82:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2244      	movs	r2, #68	; 0x44
 800bc88:	2101      	movs	r1, #1
 800bc8a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2245      	movs	r2, #69	; 0x45
 800bc90:	2101      	movs	r1, #1
 800bc92:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	223d      	movs	r2, #61	; 0x3d
 800bc98:	2101      	movs	r1, #1
 800bc9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	0018      	movs	r0, r3
 800bca0:	46bd      	mov	sp, r7
 800bca2:	b006      	add	sp, #24
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	fffebff8 	.word	0xfffebff8
 800bcac:	fffffcfc 	.word	0xfffffcfc
 800bcb0:	fffff3f3 	.word	0xfffff3f3
 800bcb4:	ffff0f0f 	.word	0xffff0f0f

0800bcb8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bcb8:	b590      	push	{r4, r7, lr}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bcc2:	200f      	movs	r0, #15
 800bcc4:	183b      	adds	r3, r7, r0
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	213e      	movs	r1, #62	; 0x3e
 800bcca:	5c52      	ldrb	r2, [r2, r1]
 800bccc:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bcce:	230e      	movs	r3, #14
 800bcd0:	18fb      	adds	r3, r7, r3
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	213f      	movs	r1, #63	; 0x3f
 800bcd6:	5c52      	ldrb	r2, [r2, r1]
 800bcd8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bcda:	240d      	movs	r4, #13
 800bcdc:	193b      	adds	r3, r7, r4
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	2144      	movs	r1, #68	; 0x44
 800bce2:	5c52      	ldrb	r2, [r2, r1]
 800bce4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bce6:	230c      	movs	r3, #12
 800bce8:	18fb      	adds	r3, r7, r3
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	2145      	movs	r1, #69	; 0x45
 800bcee:	5c52      	ldrb	r2, [r2, r1]
 800bcf0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d112      	bne.n	800bd1e <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcf8:	183b      	adds	r3, r7, r0
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d103      	bne.n	800bd08 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd00:	193b      	adds	r3, r7, r4
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d001      	beq.n	800bd0c <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e095      	b.n	800be38 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	223e      	movs	r2, #62	; 0x3e
 800bd10:	2102      	movs	r1, #2
 800bd12:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2244      	movs	r2, #68	; 0x44
 800bd18:	2102      	movs	r1, #2
 800bd1a:	5499      	strb	r1, [r3, r2]
 800bd1c:	e03d      	b.n	800bd9a <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	d114      	bne.n	800bd4e <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd24:	230e      	movs	r3, #14
 800bd26:	18fb      	adds	r3, r7, r3
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d104      	bne.n	800bd38 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd2e:	230c      	movs	r3, #12
 800bd30:	18fb      	adds	r3, r7, r3
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d001      	beq.n	800bd3c <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e07d      	b.n	800be38 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	223f      	movs	r2, #63	; 0x3f
 800bd40:	2102      	movs	r1, #2
 800bd42:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2245      	movs	r2, #69	; 0x45
 800bd48:	2102      	movs	r1, #2
 800bd4a:	5499      	strb	r1, [r3, r2]
 800bd4c:	e025      	b.n	800bd9a <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd4e:	230f      	movs	r3, #15
 800bd50:	18fb      	adds	r3, r7, r3
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d10e      	bne.n	800bd76 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd58:	230e      	movs	r3, #14
 800bd5a:	18fb      	adds	r3, r7, r3
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d109      	bne.n	800bd76 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd62:	230d      	movs	r3, #13
 800bd64:	18fb      	adds	r3, r7, r3
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d104      	bne.n	800bd76 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd6c:	230c      	movs	r3, #12
 800bd6e:	18fb      	adds	r3, r7, r3
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d001      	beq.n	800bd7a <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e05e      	b.n	800be38 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	223e      	movs	r2, #62	; 0x3e
 800bd7e:	2102      	movs	r1, #2
 800bd80:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	223f      	movs	r2, #63	; 0x3f
 800bd86:	2102      	movs	r1, #2
 800bd88:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2244      	movs	r2, #68	; 0x44
 800bd8e:	2102      	movs	r1, #2
 800bd90:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2245      	movs	r2, #69	; 0x45
 800bd96:	2102      	movs	r1, #2
 800bd98:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <HAL_TIM_Encoder_Start_IT+0xf0>
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2b04      	cmp	r3, #4
 800bda4:	d010      	beq.n	800bdc8 <HAL_TIM_Encoder_Start_IT+0x110>
 800bda6:	e01f      	b.n	800bde8 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2201      	movs	r2, #1
 800bdae:	2100      	movs	r1, #0
 800bdb0:	0018      	movs	r0, r3
 800bdb2:	f000 fa05 	bl	800c1c0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2102      	movs	r1, #2
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	60da      	str	r2, [r3, #12]
      break;
 800bdc6:	e02e      	b.n	800be26 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	2104      	movs	r1, #4
 800bdd0:	0018      	movs	r0, r3
 800bdd2:	f000 f9f5 	bl	800c1c0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68da      	ldr	r2, [r3, #12]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2104      	movs	r1, #4
 800bde2:	430a      	orrs	r2, r1
 800bde4:	60da      	str	r2, [r3, #12]
      break;
 800bde6:	e01e      	b.n	800be26 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2201      	movs	r2, #1
 800bdee:	2100      	movs	r1, #0
 800bdf0:	0018      	movs	r0, r3
 800bdf2:	f000 f9e5 	bl	800c1c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	2104      	movs	r1, #4
 800bdfe:	0018      	movs	r0, r3
 800be00:	f000 f9de 	bl	800c1c0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68da      	ldr	r2, [r3, #12]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2102      	movs	r1, #2
 800be10:	430a      	orrs	r2, r1
 800be12:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68da      	ldr	r2, [r3, #12]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2104      	movs	r1, #4
 800be20:	430a      	orrs	r2, r1
 800be22:	60da      	str	r2, [r3, #12]
      break;
 800be24:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2101      	movs	r1, #1
 800be32:	430a      	orrs	r2, r1
 800be34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	0018      	movs	r0, r3
 800be3a:	46bd      	mov	sp, r7
 800be3c:	b005      	add	sp, #20
 800be3e:	bd90      	pop	{r4, r7, pc}

0800be40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	2202      	movs	r2, #2
 800be5c:	4013      	ands	r3, r2
 800be5e:	d021      	beq.n	800bea4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2202      	movs	r2, #2
 800be64:	4013      	ands	r3, r2
 800be66:	d01d      	beq.n	800bea4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2203      	movs	r2, #3
 800be6e:	4252      	negs	r2, r2
 800be70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	2203      	movs	r2, #3
 800be80:	4013      	ands	r3, r2
 800be82:	d004      	beq.n	800be8e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	0018      	movs	r0, r3
 800be88:	f000 f8ea 	bl	800c060 <HAL_TIM_IC_CaptureCallback>
 800be8c:	e007      	b.n	800be9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	0018      	movs	r0, r3
 800be92:	f000 f8dd 	bl	800c050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	0018      	movs	r0, r3
 800be9a:	f000 f8e9 	bl	800c070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2204      	movs	r2, #4
 800bea8:	4013      	ands	r3, r2
 800beaa:	d022      	beq.n	800bef2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2204      	movs	r2, #4
 800beb0:	4013      	ands	r3, r2
 800beb2:	d01e      	beq.n	800bef2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2205      	movs	r2, #5
 800beba:	4252      	negs	r2, r2
 800bebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2202      	movs	r2, #2
 800bec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	699a      	ldr	r2, [r3, #24]
 800beca:	23c0      	movs	r3, #192	; 0xc0
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4013      	ands	r3, r2
 800bed0:	d004      	beq.n	800bedc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	0018      	movs	r0, r3
 800bed6:	f000 f8c3 	bl	800c060 <HAL_TIM_IC_CaptureCallback>
 800beda:	e007      	b.n	800beec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	0018      	movs	r0, r3
 800bee0:	f000 f8b6 	bl	800c050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	0018      	movs	r0, r3
 800bee8:	f000 f8c2 	bl	800c070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2208      	movs	r2, #8
 800bef6:	4013      	ands	r3, r2
 800bef8:	d021      	beq.n	800bf3e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2208      	movs	r2, #8
 800befe:	4013      	ands	r3, r2
 800bf00:	d01d      	beq.n	800bf3e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2209      	movs	r2, #9
 800bf08:	4252      	negs	r2, r2
 800bf0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2204      	movs	r2, #4
 800bf10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	69db      	ldr	r3, [r3, #28]
 800bf18:	2203      	movs	r2, #3
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	d004      	beq.n	800bf28 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	0018      	movs	r0, r3
 800bf22:	f000 f89d 	bl	800c060 <HAL_TIM_IC_CaptureCallback>
 800bf26:	e007      	b.n	800bf38 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	0018      	movs	r0, r3
 800bf2c:	f000 f890 	bl	800c050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	0018      	movs	r0, r3
 800bf34:	f000 f89c 	bl	800c070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2210      	movs	r2, #16
 800bf42:	4013      	ands	r3, r2
 800bf44:	d022      	beq.n	800bf8c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2210      	movs	r2, #16
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	d01e      	beq.n	800bf8c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2211      	movs	r2, #17
 800bf54:	4252      	negs	r2, r2
 800bf56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2208      	movs	r2, #8
 800bf5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	69da      	ldr	r2, [r3, #28]
 800bf64:	23c0      	movs	r3, #192	; 0xc0
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4013      	ands	r3, r2
 800bf6a:	d004      	beq.n	800bf76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	0018      	movs	r0, r3
 800bf70:	f000 f876 	bl	800c060 <HAL_TIM_IC_CaptureCallback>
 800bf74:	e007      	b.n	800bf86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	0018      	movs	r0, r3
 800bf7a:	f000 f869 	bl	800c050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	0018      	movs	r0, r3
 800bf82:	f000 f875 	bl	800c070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	4013      	ands	r3, r2
 800bf92:	d00c      	beq.n	800bfae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2201      	movs	r2, #1
 800bf98:	4013      	ands	r3, r2
 800bf9a:	d008      	beq.n	800bfae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	4252      	negs	r2, r2
 800bfa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	0018      	movs	r0, r3
 800bfaa:	f7fc faef 	bl	800858c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	2280      	movs	r2, #128	; 0x80
 800bfb2:	4013      	ands	r3, r2
 800bfb4:	d104      	bne.n	800bfc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	2380      	movs	r3, #128	; 0x80
 800bfba:	019b      	lsls	r3, r3, #6
 800bfbc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bfbe:	d00b      	beq.n	800bfd8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2280      	movs	r2, #128	; 0x80
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	d007      	beq.n	800bfd8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a1e      	ldr	r2, [pc, #120]	; (800c048 <HAL_TIM_IRQHandler+0x208>)
 800bfce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	0018      	movs	r0, r3
 800bfd4:	f000 f996 	bl	800c304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	2380      	movs	r3, #128	; 0x80
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	4013      	ands	r3, r2
 800bfe0:	d00b      	beq.n	800bffa <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2280      	movs	r2, #128	; 0x80
 800bfe6:	4013      	ands	r3, r2
 800bfe8:	d007      	beq.n	800bffa <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a17      	ldr	r2, [pc, #92]	; (800c04c <HAL_TIM_IRQHandler+0x20c>)
 800bff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	0018      	movs	r0, r3
 800bff6:	f000 f98d 	bl	800c314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	2240      	movs	r2, #64	; 0x40
 800bffe:	4013      	ands	r3, r2
 800c000:	d00c      	beq.n	800c01c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2240      	movs	r2, #64	; 0x40
 800c006:	4013      	ands	r3, r2
 800c008:	d008      	beq.n	800c01c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2241      	movs	r2, #65	; 0x41
 800c010:	4252      	negs	r2, r2
 800c012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	0018      	movs	r0, r3
 800c018:	f000 f832 	bl	800c080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2220      	movs	r2, #32
 800c020:	4013      	ands	r3, r2
 800c022:	d00c      	beq.n	800c03e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2220      	movs	r2, #32
 800c028:	4013      	ands	r3, r2
 800c02a:	d008      	beq.n	800c03e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2221      	movs	r2, #33	; 0x21
 800c032:	4252      	negs	r2, r2
 800c034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	0018      	movs	r0, r3
 800c03a:	f000 f95b 	bl	800c2f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c03e:	46c0      	nop			; (mov r8, r8)
 800c040:	46bd      	mov	sp, r7
 800c042:	b004      	add	sp, #16
 800c044:	bd80      	pop	{r7, pc}
 800c046:	46c0      	nop			; (mov r8, r8)
 800c048:	ffffdf7f 	.word	0xffffdf7f
 800c04c:	fffffeff 	.word	0xfffffeff

0800c050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c058:	46c0      	nop			; (mov r8, r8)
 800c05a:	46bd      	mov	sp, r7
 800c05c:	b002      	add	sp, #8
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c068:	46c0      	nop			; (mov r8, r8)
 800c06a:	46bd      	mov	sp, r7
 800c06c:	b002      	add	sp, #8
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c078:	46c0      	nop			; (mov r8, r8)
 800c07a:	46bd      	mov	sp, r7
 800c07c:	b002      	add	sp, #8
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c088:	46c0      	nop			; (mov r8, r8)
 800c08a:	46bd      	mov	sp, r7
 800c08c:	b002      	add	sp, #8
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a3f      	ldr	r2, [pc, #252]	; (800c1a0 <TIM_Base_SetConfig+0x110>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d00c      	beq.n	800c0c2 <TIM_Base_SetConfig+0x32>
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	2380      	movs	r3, #128	; 0x80
 800c0ac:	05db      	lsls	r3, r3, #23
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d007      	beq.n	800c0c2 <TIM_Base_SetConfig+0x32>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a3b      	ldr	r2, [pc, #236]	; (800c1a4 <TIM_Base_SetConfig+0x114>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d003      	beq.n	800c0c2 <TIM_Base_SetConfig+0x32>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a3a      	ldr	r2, [pc, #232]	; (800c1a8 <TIM_Base_SetConfig+0x118>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d108      	bne.n	800c0d4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2270      	movs	r2, #112	; 0x70
 800c0c6:	4393      	bics	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a32      	ldr	r2, [pc, #200]	; (800c1a0 <TIM_Base_SetConfig+0x110>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d01c      	beq.n	800c116 <TIM_Base_SetConfig+0x86>
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	2380      	movs	r3, #128	; 0x80
 800c0e0:	05db      	lsls	r3, r3, #23
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d017      	beq.n	800c116 <TIM_Base_SetConfig+0x86>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a2e      	ldr	r2, [pc, #184]	; (800c1a4 <TIM_Base_SetConfig+0x114>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d013      	beq.n	800c116 <TIM_Base_SetConfig+0x86>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a2d      	ldr	r2, [pc, #180]	; (800c1a8 <TIM_Base_SetConfig+0x118>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d00f      	beq.n	800c116 <TIM_Base_SetConfig+0x86>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a2c      	ldr	r2, [pc, #176]	; (800c1ac <TIM_Base_SetConfig+0x11c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d00b      	beq.n	800c116 <TIM_Base_SetConfig+0x86>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a2b      	ldr	r2, [pc, #172]	; (800c1b0 <TIM_Base_SetConfig+0x120>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d007      	beq.n	800c116 <TIM_Base_SetConfig+0x86>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a2a      	ldr	r2, [pc, #168]	; (800c1b4 <TIM_Base_SetConfig+0x124>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d003      	beq.n	800c116 <TIM_Base_SetConfig+0x86>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a29      	ldr	r2, [pc, #164]	; (800c1b8 <TIM_Base_SetConfig+0x128>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d108      	bne.n	800c128 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	4a28      	ldr	r2, [pc, #160]	; (800c1bc <TIM_Base_SetConfig+0x12c>)
 800c11a:	4013      	ands	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	4313      	orrs	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2280      	movs	r2, #128	; 0x80
 800c12c:	4393      	bics	r3, r2
 800c12e:	001a      	movs	r2, r3
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	4313      	orrs	r3, r2
 800c136:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	689a      	ldr	r2, [r3, #8]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a13      	ldr	r2, [pc, #76]	; (800c1a0 <TIM_Base_SetConfig+0x110>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d00b      	beq.n	800c16e <TIM_Base_SetConfig+0xde>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a15      	ldr	r2, [pc, #84]	; (800c1b0 <TIM_Base_SetConfig+0x120>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d007      	beq.n	800c16e <TIM_Base_SetConfig+0xde>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a14      	ldr	r2, [pc, #80]	; (800c1b4 <TIM_Base_SetConfig+0x124>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d003      	beq.n	800c16e <TIM_Base_SetConfig+0xde>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a13      	ldr	r2, [pc, #76]	; (800c1b8 <TIM_Base_SetConfig+0x128>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d103      	bne.n	800c176 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	691a      	ldr	r2, [r3, #16]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	2201      	movs	r2, #1
 800c182:	4013      	ands	r3, r2
 800c184:	2b01      	cmp	r3, #1
 800c186:	d106      	bne.n	800c196 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	2201      	movs	r2, #1
 800c18e:	4393      	bics	r3, r2
 800c190:	001a      	movs	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	611a      	str	r2, [r3, #16]
  }
}
 800c196:	46c0      	nop			; (mov r8, r8)
 800c198:	46bd      	mov	sp, r7
 800c19a:	b004      	add	sp, #16
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	46c0      	nop			; (mov r8, r8)
 800c1a0:	40012c00 	.word	0x40012c00
 800c1a4:	40000400 	.word	0x40000400
 800c1a8:	40000800 	.word	0x40000800
 800c1ac:	40002000 	.word	0x40002000
 800c1b0:	40014000 	.word	0x40014000
 800c1b4:	40014400 	.word	0x40014400
 800c1b8:	40014800 	.word	0x40014800
 800c1bc:	fffffcff 	.word	0xfffffcff

0800c1c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	221f      	movs	r2, #31
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	409a      	lsls	r2, r3
 800c1d6:	0013      	movs	r3, r2
 800c1d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	43d2      	mvns	r2, r2
 800c1e2:	401a      	ands	r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6a1a      	ldr	r2, [r3, #32]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	211f      	movs	r1, #31
 800c1f0:	400b      	ands	r3, r1
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	4099      	lsls	r1, r3
 800c1f6:	000b      	movs	r3, r1
 800c1f8:	431a      	orrs	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	621a      	str	r2, [r3, #32]
}
 800c1fe:	46c0      	nop			; (mov r8, r8)
 800c200:	46bd      	mov	sp, r7
 800c202:	b006      	add	sp, #24
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	223c      	movs	r2, #60	; 0x3c
 800c216:	5c9b      	ldrb	r3, [r3, r2]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d101      	bne.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c21c:	2302      	movs	r3, #2
 800c21e:	e05a      	b.n	800c2d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	223c      	movs	r2, #60	; 0x3c
 800c224:	2101      	movs	r1, #1
 800c226:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	223d      	movs	r2, #61	; 0x3d
 800c22c:	2102      	movs	r1, #2
 800c22e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a26      	ldr	r2, [pc, #152]	; (800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d108      	bne.n	800c25c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	4a25      	ldr	r2, [pc, #148]	; (800c2e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c24e:	4013      	ands	r3, r2
 800c250:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	4313      	orrs	r3, r2
 800c25a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2270      	movs	r2, #112	; 0x70
 800c260:	4393      	bics	r3, r2
 800c262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a19      	ldr	r2, [pc, #100]	; (800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d014      	beq.n	800c2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	2380      	movs	r3, #128	; 0x80
 800c286:	05db      	lsls	r3, r3, #23
 800c288:	429a      	cmp	r2, r3
 800c28a:	d00e      	beq.n	800c2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a15      	ldr	r2, [pc, #84]	; (800c2e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d009      	beq.n	800c2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a14      	ldr	r2, [pc, #80]	; (800c2ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d004      	beq.n	800c2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a12      	ldr	r2, [pc, #72]	; (800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d10c      	bne.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2280      	movs	r2, #128	; 0x80
 800c2ae:	4393      	bics	r3, r2
 800c2b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	223d      	movs	r2, #61	; 0x3d
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	223c      	movs	r2, #60	; 0x3c
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	b004      	add	sp, #16
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	46c0      	nop			; (mov r8, r8)
 800c2e0:	40012c00 	.word	0x40012c00
 800c2e4:	ff0fffff 	.word	0xff0fffff
 800c2e8:	40000400 	.word	0x40000400
 800c2ec:	40000800 	.word	0x40000800
 800c2f0:	40014000 	.word	0x40014000

0800c2f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2fc:	46c0      	nop			; (mov r8, r8)
 800c2fe:	46bd      	mov	sp, r7
 800c300:	b002      	add	sp, #8
 800c302:	bd80      	pop	{r7, pc}

0800c304 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c30c:	46c0      	nop			; (mov r8, r8)
 800c30e:	46bd      	mov	sp, r7
 800c310:	b002      	add	sp, #8
 800c312:	bd80      	pop	{r7, pc}

0800c314 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c31c:	46c0      	nop			; (mov r8, r8)
 800c31e:	46bd      	mov	sp, r7
 800c320:	b002      	add	sp, #8
 800c322:	bd80      	pop	{r7, pc}

0800c324 <LL_DMA_ConfigTransfer>:
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800c334:	4a0c      	ldr	r2, [pc, #48]	; (800c368 <LL_DMA_ConfigTransfer+0x44>)
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	18d3      	adds	r3, r2, r3
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	001a      	movs	r2, r3
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	18d3      	adds	r3, r2, r3
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a09      	ldr	r2, [pc, #36]	; (800c36c <LL_DMA_ConfigTransfer+0x48>)
 800c346:	4013      	ands	r3, r2
 800c348:	0019      	movs	r1, r3
 800c34a:	4a07      	ldr	r2, [pc, #28]	; (800c368 <LL_DMA_ConfigTransfer+0x44>)
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	18d3      	adds	r3, r2, r3
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	001a      	movs	r2, r3
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	18d3      	adds	r3, r2, r3
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	601a      	str	r2, [r3, #0]
}
 800c35e:	46c0      	nop			; (mov r8, r8)
 800c360:	46bd      	mov	sp, r7
 800c362:	b006      	add	sp, #24
 800c364:	bd80      	pop	{r7, pc}
 800c366:	46c0      	nop			; (mov r8, r8)
 800c368:	0801c3f8 	.word	0x0801c3f8
 800c36c:	ffff800f 	.word	0xffff800f

0800c370 <LL_DMA_SetDataLength>:
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800c380:	4a0b      	ldr	r2, [pc, #44]	; (800c3b0 <LL_DMA_SetDataLength+0x40>)
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	18d3      	adds	r3, r2, r3
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	001a      	movs	r2, r3
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	18d3      	adds	r3, r2, r3
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	0c1b      	lsrs	r3, r3, #16
 800c392:	0419      	lsls	r1, r3, #16
 800c394:	4a06      	ldr	r2, [pc, #24]	; (800c3b0 <LL_DMA_SetDataLength+0x40>)
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	18d3      	adds	r3, r2, r3
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	001a      	movs	r2, r3
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	18d3      	adds	r3, r2, r3
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	430a      	orrs	r2, r1
 800c3a6:	605a      	str	r2, [r3, #4]
}
 800c3a8:	46c0      	nop			; (mov r8, r8)
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	b006      	add	sp, #24
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	0801c3f8 	.word	0x0801c3f8

0800c3b4 <LL_DMA_SetMemoryAddress>:
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800c3c4:	4a06      	ldr	r2, [pc, #24]	; (800c3e0 <LL_DMA_SetMemoryAddress+0x2c>)
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	18d3      	adds	r3, r2, r3
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	001a      	movs	r2, r3
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	18d3      	adds	r3, r2, r3
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	60da      	str	r2, [r3, #12]
}
 800c3d6:	46c0      	nop			; (mov r8, r8)
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	b006      	add	sp, #24
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	46c0      	nop			; (mov r8, r8)
 800c3e0:	0801c3f8 	.word	0x0801c3f8

0800c3e4 <LL_DMA_SetPeriphAddress>:
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800c3f4:	4a06      	ldr	r2, [pc, #24]	; (800c410 <LL_DMA_SetPeriphAddress+0x2c>)
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	18d3      	adds	r3, r2, r3
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	001a      	movs	r2, r3
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	18d3      	adds	r3, r2, r3
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	609a      	str	r2, [r3, #8]
}
 800c406:	46c0      	nop			; (mov r8, r8)
 800c408:	46bd      	mov	sp, r7
 800c40a:	b006      	add	sp, #24
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	46c0      	nop			; (mov r8, r8)
 800c410:	0801c3f8 	.word	0x0801c3f8

0800c414 <LL_DMA_SetPeriphRequest>:
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	0a9b      	lsrs	r3, r3, #10
 800c424:	4a0f      	ldr	r2, [pc, #60]	; (800c464 <LL_DMA_SetPeriphRequest+0x50>)
 800c426:	405a      	eors	r2, r3
 800c428:	0013      	movs	r3, r2
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	1a9b      	subs	r3, r3, r2
 800c42e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	18d3      	adds	r3, r2, r3
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	4a0b      	ldr	r2, [pc, #44]	; (800c468 <LL_DMA_SetPeriphRequest+0x54>)
 800c43a:	4694      	mov	ip, r2
 800c43c:	4463      	add	r3, ip
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	227f      	movs	r2, #127	; 0x7f
 800c442:	4393      	bics	r3, r2
 800c444:	0019      	movs	r1, r3
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	18d3      	adds	r3, r2, r3
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4a06      	ldr	r2, [pc, #24]	; (800c468 <LL_DMA_SetPeriphRequest+0x54>)
 800c450:	4694      	mov	ip, r2
 800c452:	4463      	add	r3, ip
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	430a      	orrs	r2, r1
 800c458:	601a      	str	r2, [r3, #0]
}
 800c45a:	46c0      	nop			; (mov r8, r8)
 800c45c:	46bd      	mov	sp, r7
 800c45e:	b006      	add	sp, #24
 800c460:	bd80      	pop	{r7, pc}
 800c462:	46c0      	nop			; (mov r8, r8)
 800c464:	00100080 	.word	0x00100080
 800c468:	40020800 	.word	0x40020800

0800c46c <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800c480:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800c486:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800c48c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800c492:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800c498:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800c49e:	431a      	orrs	r2, r3
 800c4a0:	68b9      	ldr	r1, [r7, #8]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	f7ff ff3d 	bl	800c324 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685a      	ldr	r2, [r3, #4]
 800c4ae:	68b9      	ldr	r1, [r7, #8]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	0018      	movs	r0, r3
 800c4b4:	f7ff ff7e 	bl	800c3b4 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	68b9      	ldr	r1, [r7, #8]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	0018      	movs	r0, r3
 800c4c2:	f7ff ff8f 	bl	800c3e4 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a1a      	ldr	r2, [r3, #32]
 800c4ca:	68b9      	ldr	r1, [r7, #8]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	0018      	movs	r0, r3
 800c4d0:	f7ff ff4e 	bl	800c370 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	0018      	movs	r0, r3
 800c4de:	f7ff ff99 	bl	800c414 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	0018      	movs	r0, r3
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	b004      	add	sp, #16
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c536:	46c0      	nop			; (mov r8, r8)
 800c538:	46bd      	mov	sp, r7
 800c53a:	b002      	add	sp, #8
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b084      	sub	sp, #16
 800c542:	af00      	add	r7, sp, #0
 800c544:	60f8      	str	r0, [r7, #12]
 800c546:	60b9      	str	r1, [r7, #8]
 800c548:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6819      	ldr	r1, [r3, #0]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	435b      	muls	r3, r3
 800c552:	001a      	movs	r2, r3
 800c554:	0013      	movs	r3, r2
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	189b      	adds	r3, r3, r2
 800c55a:	43db      	mvns	r3, r3
 800c55c:	400b      	ands	r3, r1
 800c55e:	001a      	movs	r2, r3
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	435b      	muls	r3, r3
 800c564:	6879      	ldr	r1, [r7, #4]
 800c566:	434b      	muls	r3, r1
 800c568:	431a      	orrs	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	601a      	str	r2, [r3, #0]
}
 800c56e:	46c0      	nop			; (mov r8, r8)
 800c570:	46bd      	mov	sp, r7
 800c572:	b004      	add	sp, #16
 800c574:	bd80      	pop	{r7, pc}

0800c576 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b084      	sub	sp, #16
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	60f8      	str	r0, [r7, #12]
 800c57e:	60b9      	str	r1, [r7, #8]
 800c580:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	43d2      	mvns	r2, r2
 800c58a:	401a      	ands	r2, r3
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	6879      	ldr	r1, [r7, #4]
 800c590:	434b      	muls	r3, r1
 800c592:	431a      	orrs	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	605a      	str	r2, [r3, #4]
}
 800c598:	46c0      	nop			; (mov r8, r8)
 800c59a:	46bd      	mov	sp, r7
 800c59c:	b004      	add	sp, #16
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6899      	ldr	r1, [r3, #8]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	435b      	muls	r3, r3
 800c5b4:	001a      	movs	r2, r3
 800c5b6:	0013      	movs	r3, r2
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	189b      	adds	r3, r3, r2
 800c5bc:	43db      	mvns	r3, r3
 800c5be:	400b      	ands	r3, r1
 800c5c0:	001a      	movs	r2, r3
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	435b      	muls	r3, r3
 800c5c6:	6879      	ldr	r1, [r7, #4]
 800c5c8:	434b      	muls	r3, r1
 800c5ca:	431a      	orrs	r2, r3
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	609a      	str	r2, [r3, #8]
}
 800c5d0:	46c0      	nop			; (mov r8, r8)
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	b004      	add	sp, #16
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	68d9      	ldr	r1, [r3, #12]
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	435b      	muls	r3, r3
 800c5ec:	001a      	movs	r2, r3
 800c5ee:	0013      	movs	r3, r2
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	189b      	adds	r3, r3, r2
 800c5f4:	43db      	mvns	r3, r3
 800c5f6:	400b      	ands	r3, r1
 800c5f8:	001a      	movs	r2, r3
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	435b      	muls	r3, r3
 800c5fe:	6879      	ldr	r1, [r7, #4]
 800c600:	434b      	muls	r3, r1
 800c602:	431a      	orrs	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	60da      	str	r2, [r3, #12]
}
 800c608:	46c0      	nop			; (mov r8, r8)
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b004      	add	sp, #16
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6a19      	ldr	r1, [r3, #32]
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	435b      	muls	r3, r3
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	4353      	muls	r3, r2
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	435a      	muls	r2, r3
 800c62c:	0013      	movs	r3, r2
 800c62e:	011b      	lsls	r3, r3, #4
 800c630:	1a9b      	subs	r3, r3, r2
 800c632:	43db      	mvns	r3, r3
 800c634:	400b      	ands	r3, r1
 800c636:	001a      	movs	r2, r3
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	435b      	muls	r3, r3
 800c63c:	68b9      	ldr	r1, [r7, #8]
 800c63e:	434b      	muls	r3, r1
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	434b      	muls	r3, r1
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	434b      	muls	r3, r1
 800c648:	431a      	orrs	r2, r3
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800c64e:	46c0      	nop			; (mov r8, r8)
 800c650:	46bd      	mov	sp, r7
 800c652:	b004      	add	sp, #16
 800c654:	bd80      	pop	{r7, pc}

0800c656 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b084      	sub	sp, #16
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	60f8      	str	r0, [r7, #12]
 800c65e:	60b9      	str	r1, [r7, #8]
 800c660:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	0a1b      	lsrs	r3, r3, #8
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	0a12      	lsrs	r2, r2, #8
 800c66e:	4353      	muls	r3, r2
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	0a12      	lsrs	r2, r2, #8
 800c674:	4353      	muls	r3, r2
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	0a12      	lsrs	r2, r2, #8
 800c67a:	435a      	muls	r2, r3
 800c67c:	0013      	movs	r3, r2
 800c67e:	011b      	lsls	r3, r3, #4
 800c680:	1a9b      	subs	r3, r3, r2
 800c682:	43db      	mvns	r3, r3
 800c684:	400b      	ands	r3, r1
 800c686:	001a      	movs	r2, r3
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	0a1b      	lsrs	r3, r3, #8
 800c68c:	68b9      	ldr	r1, [r7, #8]
 800c68e:	0a09      	lsrs	r1, r1, #8
 800c690:	434b      	muls	r3, r1
 800c692:	68b9      	ldr	r1, [r7, #8]
 800c694:	0a09      	lsrs	r1, r1, #8
 800c696:	434b      	muls	r3, r1
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	0a09      	lsrs	r1, r1, #8
 800c69c:	434b      	muls	r3, r1
 800c69e:	6879      	ldr	r1, [r7, #4]
 800c6a0:	434b      	muls	r3, r1
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800c6a8:	46c0      	nop			; (mov r8, r8)
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	b004      	add	sp, #16
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c6be:	e047      	b.n	800c750 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	4091      	lsls	r1, r2
 800c6ca:	000a      	movs	r2, r1
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d039      	beq.n	800c74a <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d003      	beq.n	800c6e6 <LL_GPIO_Init+0x36>
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d10d      	bne.n	800c702 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	689a      	ldr	r2, [r3, #8]
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	0018      	movs	r0, r3
 800c6f0:	f7ff ff56 	bl	800c5a0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	68da      	ldr	r2, [r3, #12]
 800c6f8:	68b9      	ldr	r1, [r7, #8]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	f7ff ff3a 	bl	800c576 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	691a      	ldr	r2, [r3, #16]
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	0018      	movs	r0, r3
 800c70c:	f7ff ff64 	bl	800c5d8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	2b02      	cmp	r3, #2
 800c716:	d111      	bne.n	800c73c <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2bff      	cmp	r3, #255	; 0xff
 800c71c:	d807      	bhi.n	800c72e <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	695a      	ldr	r2, [r3, #20]
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	0018      	movs	r0, r3
 800c728:	f7ff ff72 	bl	800c610 <LL_GPIO_SetAFPin_0_7>
 800c72c:	e006      	b.n	800c73c <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	695a      	ldr	r2, [r3, #20]
 800c732:	68b9      	ldr	r1, [r7, #8]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	0018      	movs	r0, r3
 800c738:	f7ff ff8d 	bl	800c656 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	68b9      	ldr	r1, [r7, #8]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	0018      	movs	r0, r3
 800c746:	f7ff fefa 	bl	800c53e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3301      	adds	r3, #1
 800c74e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	40da      	lsrs	r2, r3
 800c758:	1e13      	subs	r3, r2, #0
 800c75a:	d1b1      	bne.n	800c6c0 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	0018      	movs	r0, r3
 800c760:	46bd      	mov	sp, r7
 800c762:	b004      	add	sp, #16
 800c764:	bd80      	pop	{r7, pc}

0800c766 <LL_LPUART_IsEnabled>:
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b082      	sub	sp, #8
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2201      	movs	r2, #1
 800c774:	4013      	ands	r3, r2
 800c776:	2b01      	cmp	r3, #1
 800c778:	d101      	bne.n	800c77e <LL_LPUART_IsEnabled+0x18>
 800c77a:	2301      	movs	r3, #1
 800c77c:	e000      	b.n	800c780 <LL_LPUART_IsEnabled+0x1a>
 800c77e:	2300      	movs	r3, #0
}
 800c780:	0018      	movs	r0, r3
 800c782:	46bd      	mov	sp, r7
 800c784:	b002      	add	sp, #8
 800c786:	bd80      	pop	{r7, pc}

0800c788 <LL_LPUART_SetPrescaler>:
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c796:	220f      	movs	r2, #15
 800c798:	4393      	bics	r3, r2
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	b292      	uxth	r2, r2
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c7a4:	46c0      	nop			; (mov r8, r8)
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	b002      	add	sp, #8
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <LL_LPUART_SetStopBitsLength>:
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	4a05      	ldr	r2, [pc, #20]	; (800c7d0 <LL_LPUART_SetStopBitsLength+0x24>)
 800c7bc:	401a      	ands	r2, r3
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	431a      	orrs	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	605a      	str	r2, [r3, #4]
}
 800c7c6:	46c0      	nop			; (mov r8, r8)
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	b002      	add	sp, #8
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	46c0      	nop			; (mov r8, r8)
 800c7d0:	ffffcfff 	.word	0xffffcfff

0800c7d4 <LL_LPUART_SetHWFlowCtrl>:
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	4a05      	ldr	r2, [pc, #20]	; (800c7f8 <LL_LPUART_SetHWFlowCtrl+0x24>)
 800c7e4:	401a      	ands	r2, r3
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	431a      	orrs	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	609a      	str	r2, [r3, #8]
}
 800c7ee:	46c0      	nop			; (mov r8, r8)
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	b002      	add	sp, #8
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	46c0      	nop			; (mov r8, r8)
 800c7f8:	fffffcff 	.word	0xfffffcff

0800c7fc <LL_LPUART_SetBaudRate>:
{
 800c7fc:	b5b0      	push	{r4, r5, r7, lr}
 800c7fe:	b08c      	sub	sp, #48	; 0x30
 800c800:	af00      	add	r7, sp, #0
 800c802:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c804:	62b9      	str	r1, [r7, #40]	; 0x28
 800c806:	627a      	str	r2, [r7, #36]	; 0x24
 800c808:	623b      	str	r3, [r7, #32]
  if (BaudRate != 0U)
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d030      	beq.n	800c872 <LL_LPUART_SetBaudRate+0x76>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	61bb      	str	r3, [r7, #24]
 800c814:	2300      	movs	r3, #0
 800c816:	61fb      	str	r3, [r7, #28]
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	001a      	movs	r2, r3
 800c81e:	4b17      	ldr	r3, [pc, #92]	; (800c87c <LL_LPUART_SetBaudRate+0x80>)
 800c820:	0052      	lsls	r2, r2, #1
 800c822:	5ad3      	ldrh	r3, [r2, r3]
 800c824:	613b      	str	r3, [r7, #16]
 800c826:	2300      	movs	r3, #0
 800c828:	617b      	str	r3, [r7, #20]
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	69b8      	ldr	r0, [r7, #24]
 800c830:	69f9      	ldr	r1, [r7, #28]
 800c832:	f7f9 fe53 	bl	80064dc <__aeabi_uldivmod>
 800c836:	0002      	movs	r2, r0
 800c838:	000b      	movs	r3, r1
 800c83a:	0e11      	lsrs	r1, r2, #24
 800c83c:	021d      	lsls	r5, r3, #8
 800c83e:	430d      	orrs	r5, r1
 800c840:	0214      	lsls	r4, r2, #8
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	085b      	lsrs	r3, r3, #1
 800c846:	60bb      	str	r3, [r7, #8]
 800c848:	2300      	movs	r3, #0
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	68b8      	ldr	r0, [r7, #8]
 800c84e:	68f9      	ldr	r1, [r7, #12]
 800c850:	1900      	adds	r0, r0, r4
 800c852:	4169      	adcs	r1, r5
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	603b      	str	r3, [r7, #0]
 800c858:	2300      	movs	r3, #0
 800c85a:	607b      	str	r3, [r7, #4]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f7f9 fe3c 	bl	80064dc <__aeabi_uldivmod>
 800c864:	0002      	movs	r2, r0
 800c866:	000b      	movs	r3, r1
 800c868:	0013      	movs	r3, r2
 800c86a:	031b      	lsls	r3, r3, #12
 800c86c:	0b1a      	lsrs	r2, r3, #12
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	60da      	str	r2, [r3, #12]
}
 800c872:	46c0      	nop			; (mov r8, r8)
 800c874:	46bd      	mov	sp, r7
 800c876:	b00c      	add	sp, #48	; 0x30
 800c878:	bdb0      	pop	{r4, r5, r7, pc}
 800c87a:	46c0      	nop			; (mov r8, r8)
 800c87c:	0801c400 	.word	0x0801c400

0800c880 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c88a:	230f      	movs	r3, #15
 800c88c:	18fb      	adds	r3, r7, r3
 800c88e:	2201      	movs	r2, #1
 800c890:	701a      	strb	r2, [r3, #0]
#if defined(LPUART2)
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c892:	2300      	movs	r3, #0
 800c894:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	0018      	movs	r0, r3
 800c89a:	f7ff ff64 	bl	800c766 <LL_LPUART_IsEnabled>
 800c89e:	1e03      	subs	r3, r0, #0
 800c8a0:	d14d      	bne.n	800c93e <LL_LPUART_Init+0xbe>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a29      	ldr	r2, [pc, #164]	; (800c94c <LL_LPUART_Init+0xcc>)
 800c8a8:	401a      	ands	r2, r3
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	6899      	ldr	r1, [r3, #8]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	4319      	orrs	r1, r3
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	430b      	orrs	r3, r1
 800c8ba:	431a      	orrs	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	68da      	ldr	r2, [r3, #12]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	0011      	movs	r1, r2
 800c8c8:	0018      	movs	r0, r3
 800c8ca:	f7ff ff6f 	bl	800c7ac <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	699a      	ldr	r2, [r3, #24]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	0011      	movs	r1, r2
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	f7ff ff7c 	bl	800c7d4 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
#if defined(LPUART2)
    if (LPUARTx == LPUART1)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a1c      	ldr	r2, [pc, #112]	; (800c950 <LL_LPUART_Init+0xd0>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d107      	bne.n	800c8f4 <LL_LPUART_Init+0x74>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 800c8e4:	23c0      	movs	r3, #192	; 0xc0
 800c8e6:	011b      	lsls	r3, r3, #4
 800c8e8:	0018      	movs	r0, r3
 800c8ea:	f000 f8bf 	bl	800ca6c <LL_RCC_GetLPUARTClockFreq>
 800c8ee:	0003      	movs	r3, r0
 800c8f0:	60bb      	str	r3, [r7, #8]
 800c8f2:	e00a      	b.n	800c90a <LL_LPUART_Init+0x8a>
    }
    else if (LPUARTx == LPUART2)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a17      	ldr	r2, [pc, #92]	; (800c954 <LL_LPUART_Init+0xd4>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d106      	bne.n	800c90a <LL_LPUART_Init+0x8a>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART2_CLKSOURCE);
 800c8fc:	23c0      	movs	r3, #192	; 0xc0
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	0018      	movs	r0, r3
 800c902:	f000 f8b3 	bl	800ca6c <LL_RCC_GetLPUARTClockFreq>
 800c906:	0003      	movs	r3, r0
 800c908:	60bb      	str	r3, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00f      	beq.n	800c930 <LL_LPUART_Init+0xb0>
        && (LPUART_InitStruct->BaudRate != 0U))
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00b      	beq.n	800c930 <LL_LPUART_Init+0xb0>
    {
      status = SUCCESS;
 800c918:	230f      	movs	r3, #15
 800c91a:	18fb      	adds	r3, r7, r3
 800c91c:	2200      	movs	r2, #0
 800c91e:	701a      	strb	r2, [r3, #0]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 800c928:	68b9      	ldr	r1, [r7, #8]
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff ff66 	bl	800c7fc <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	0011      	movs	r1, r2
 800c938:	0018      	movs	r0, r3
 800c93a:	f7ff ff25 	bl	800c788 <LL_LPUART_SetPrescaler>
  }

  return (status);
 800c93e:	230f      	movs	r3, #15
 800c940:	18fb      	adds	r3, r7, r3
 800c942:	781b      	ldrb	r3, [r3, #0]
}
 800c944:	0018      	movs	r0, r3
 800c946:	46bd      	mov	sp, r7
 800c948:	b004      	add	sp, #16
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	efffe9f3 	.word	0xefffe9f3
 800c950:	40008000 	.word	0x40008000
 800c954:	40008400 	.word	0x40008400

0800c958 <LL_RCC_HSI_IsReady>:
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c95c:	4b07      	ldr	r3, [pc, #28]	; (800c97c <LL_RCC_HSI_IsReady+0x24>)
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	2380      	movs	r3, #128	; 0x80
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	401a      	ands	r2, r3
 800c966:	2380      	movs	r3, #128	; 0x80
 800c968:	00db      	lsls	r3, r3, #3
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d101      	bne.n	800c972 <LL_RCC_HSI_IsReady+0x1a>
 800c96e:	2301      	movs	r3, #1
 800c970:	e000      	b.n	800c974 <LL_RCC_HSI_IsReady+0x1c>
 800c972:	2300      	movs	r3, #0
}
 800c974:	0018      	movs	r0, r3
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	46c0      	nop			; (mov r8, r8)
 800c97c:	40021000 	.word	0x40021000

0800c980 <LL_RCC_LSE_IsReady>:
{
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c984:	4b05      	ldr	r3, [pc, #20]	; (800c99c <LL_RCC_LSE_IsReady+0x1c>)
 800c986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c988:	2202      	movs	r2, #2
 800c98a:	4013      	ands	r3, r2
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d101      	bne.n	800c994 <LL_RCC_LSE_IsReady+0x14>
 800c990:	2301      	movs	r3, #1
 800c992:	e000      	b.n	800c996 <LL_RCC_LSE_IsReady+0x16>
 800c994:	2300      	movs	r3, #0
}
 800c996:	0018      	movs	r0, r3
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	40021000 	.word	0x40021000

0800c9a0 <LL_RCC_GetSysClkSource>:
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c9a4:	4b03      	ldr	r3, [pc, #12]	; (800c9b4 <LL_RCC_GetSysClkSource+0x14>)
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	2238      	movs	r2, #56	; 0x38
 800c9aa:	4013      	ands	r3, r2
}
 800c9ac:	0018      	movs	r0, r3
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	46c0      	nop			; (mov r8, r8)
 800c9b4:	40021000 	.word	0x40021000

0800c9b8 <LL_RCC_GetAHBPrescaler>:
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c9bc:	4b03      	ldr	r3, [pc, #12]	; (800c9cc <LL_RCC_GetAHBPrescaler+0x14>)
 800c9be:	689a      	ldr	r2, [r3, #8]
 800c9c0:	23f0      	movs	r3, #240	; 0xf0
 800c9c2:	011b      	lsls	r3, r3, #4
 800c9c4:	4013      	ands	r3, r2
}
 800c9c6:	0018      	movs	r0, r3
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	40021000 	.word	0x40021000

0800c9d0 <LL_RCC_GetAPB1Prescaler>:
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c9d4:	4b03      	ldr	r3, [pc, #12]	; (800c9e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 800c9d6:	689a      	ldr	r2, [r3, #8]
 800c9d8:	23e0      	movs	r3, #224	; 0xe0
 800c9da:	01db      	lsls	r3, r3, #7
 800c9dc:	4013      	ands	r3, r2
}
 800c9de:	0018      	movs	r0, r3
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	40021000 	.word	0x40021000

0800c9e8 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx) | (LPUARTx << 16U));
 800c9f0:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <LL_RCC_GetLPUARTClockSource+0x20>)
 800c9f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	401a      	ands	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	041b      	lsls	r3, r3, #16
 800c9fc:	4313      	orrs	r3, r2
}
 800c9fe:	0018      	movs	r0, r3
 800ca00:	46bd      	mov	sp, r7
 800ca02:	b002      	add	sp, #8
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	46c0      	nop			; (mov r8, r8)
 800ca08:	40021000 	.word	0x40021000

0800ca0c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800ca10:	4b03      	ldr	r3, [pc, #12]	; (800ca20 <LL_RCC_PLL_GetN+0x14>)
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	0a1b      	lsrs	r3, r3, #8
 800ca16:	227f      	movs	r2, #127	; 0x7f
 800ca18:	4013      	ands	r3, r2
}
 800ca1a:	0018      	movs	r0, r3
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	40021000 	.word	0x40021000

0800ca24 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ca28:	4b03      	ldr	r3, [pc, #12]	; (800ca38 <LL_RCC_PLL_GetR+0x14>)
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	0f5b      	lsrs	r3, r3, #29
 800ca2e:	075b      	lsls	r3, r3, #29
}
 800ca30:	0018      	movs	r0, r3
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	46c0      	nop			; (mov r8, r8)
 800ca38:	40021000 	.word	0x40021000

0800ca3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ca40:	4b03      	ldr	r3, [pc, #12]	; (800ca50 <LL_RCC_PLL_GetMainSource+0x14>)
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	2203      	movs	r2, #3
 800ca46:	4013      	ands	r3, r2
}
 800ca48:	0018      	movs	r0, r3
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	46c0      	nop			; (mov r8, r8)
 800ca50:	40021000 	.word	0x40021000

0800ca54 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800ca58:	4b03      	ldr	r3, [pc, #12]	; (800ca68 <LL_RCC_PLL_GetDivider+0x14>)
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	2270      	movs	r2, #112	; 0x70
 800ca5e:	4013      	ands	r3, r2
}
 800ca60:	0018      	movs	r0, r3
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	46c0      	nop			; (mov r8, r8)
 800ca68:	40021000 	.word	0x40021000

0800ca6c <LL_RCC_GetLPUARTClockFreq>:
  * @retval LPUART clock frequency (in Hz)
  *         @arg @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  * (*) feature not available on all devices
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800ca74:	2300      	movs	r3, #0
 800ca76:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  if (LPUARTxSource == LL_RCC_LPUART1_CLKSOURCE)
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	23c0      	movs	r3, #192	; 0xc0
 800ca7c:	011b      	lsls	r3, r3, #4
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d134      	bne.n	800caec <LL_RCC_GetLPUARTClockFreq+0x80>
  {
    /* LPUART1CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	0018      	movs	r0, r3
 800ca86:	f7ff ffaf 	bl	800c9e8 <LL_RCC_GetLPUARTClockSource>
 800ca8a:	0003      	movs	r3, r0
 800ca8c:	4a3a      	ldr	r2, [pc, #232]	; (800cb78 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d016      	beq.n	800cac0 <LL_RCC_GetLPUARTClockFreq+0x54>
 800ca92:	4a39      	ldr	r2, [pc, #228]	; (800cb78 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d81c      	bhi.n	800cad2 <LL_RCC_GetLPUARTClockFreq+0x66>
 800ca98:	4a38      	ldr	r2, [pc, #224]	; (800cb7c <LL_RCC_GetLPUARTClockFreq+0x110>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d003      	beq.n	800caa6 <LL_RCC_GetLPUARTClockFreq+0x3a>
 800ca9e:	4a38      	ldr	r2, [pc, #224]	; (800cb80 <LL_RCC_GetLPUARTClockFreq+0x114>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d005      	beq.n	800cab0 <LL_RCC_GetLPUARTClockFreq+0x44>
 800caa4:	e015      	b.n	800cad2 <LL_RCC_GetLPUARTClockFreq+0x66>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 800caa6:	f000 f875 	bl	800cb94 <RCC_GetSystemClockFreq>
 800caaa:	0003      	movs	r3, r0
 800caac:	60fb      	str	r3, [r7, #12]
        break;
 800caae:	e05e      	b.n	800cb6e <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800cab0:	f7ff ff52 	bl	800c958 <LL_RCC_HSI_IsReady>
 800cab4:	0003      	movs	r3, r0
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d152      	bne.n	800cb60 <LL_RCC_GetLPUARTClockFreq+0xf4>
        {
          lpuart_frequency = HSI_VALUE;
 800caba:	4b32      	ldr	r3, [pc, #200]	; (800cb84 <LL_RCC_GetLPUARTClockFreq+0x118>)
 800cabc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cabe:	e04f      	b.n	800cb60 <LL_RCC_GetLPUARTClockFreq+0xf4>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800cac0:	f7ff ff5e 	bl	800c980 <LL_RCC_LSE_IsReady>
 800cac4:	0003      	movs	r3, r0
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d14c      	bne.n	800cb64 <LL_RCC_GetLPUARTClockFreq+0xf8>
        {
          lpuart_frequency = LSE_VALUE;
 800caca:	2380      	movs	r3, #128	; 0x80
 800cacc:	021b      	lsls	r3, r3, #8
 800cace:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cad0:	e048      	b.n	800cb64 <LL_RCC_GetLPUARTClockFreq+0xf8>

      case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cad2:	f000 f85f 	bl	800cb94 <RCC_GetSystemClockFreq>
 800cad6:	0003      	movs	r3, r0
 800cad8:	0018      	movs	r0, r3
 800cada:	f000 f889 	bl	800cbf0 <RCC_GetHCLKClockFreq>
 800cade:	0003      	movs	r3, r0
 800cae0:	0018      	movs	r0, r3
 800cae2:	f000 f89d 	bl	800cc20 <RCC_GetPCLK1ClockFreq>
 800cae6:	0003      	movs	r3, r0
 800cae8:	60fb      	str	r3, [r7, #12]
        break;
 800caea:	e040      	b.n	800cb6e <LL_RCC_GetLPUARTClockFreq+0x102>
    }
  }
#if defined(LPUART2)
  else if (LPUARTxSource == LL_RCC_LPUART2_CLKSOURCE)
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	23c0      	movs	r3, #192	; 0xc0
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d13b      	bne.n	800cb6e <LL_RCC_GetLPUARTClockFreq+0x102>
  {
    /* LPUART2CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	0018      	movs	r0, r3
 800cafa:	f7ff ff75 	bl	800c9e8 <LL_RCC_GetLPUARTClockSource>
 800cafe:	0003      	movs	r3, r0
 800cb00:	4a21      	ldr	r2, [pc, #132]	; (800cb88 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d016      	beq.n	800cb34 <LL_RCC_GetLPUARTClockFreq+0xc8>
 800cb06:	4a20      	ldr	r2, [pc, #128]	; (800cb88 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d81c      	bhi.n	800cb46 <LL_RCC_GetLPUARTClockFreq+0xda>
 800cb0c:	4a1f      	ldr	r2, [pc, #124]	; (800cb8c <LL_RCC_GetLPUARTClockFreq+0x120>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d003      	beq.n	800cb1a <LL_RCC_GetLPUARTClockFreq+0xae>
 800cb12:	4a1f      	ldr	r2, [pc, #124]	; (800cb90 <LL_RCC_GetLPUARTClockFreq+0x124>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d005      	beq.n	800cb24 <LL_RCC_GetLPUARTClockFreq+0xb8>
 800cb18:	e015      	b.n	800cb46 <LL_RCC_GetLPUARTClockFreq+0xda>
    {
      case LL_RCC_LPUART2_CLKSOURCE_SYSCLK: /* LPUART2 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 800cb1a:	f000 f83b 	bl	800cb94 <RCC_GetSystemClockFreq>
 800cb1e:	0003      	movs	r3, r0
 800cb20:	60fb      	str	r3, [r7, #12]
        break;
 800cb22:	e024      	b.n	800cb6e <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART2_CLKSOURCE_HSI:    /* LPUART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800cb24:	f7ff ff18 	bl	800c958 <LL_RCC_HSI_IsReady>
 800cb28:	0003      	movs	r3, r0
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d11c      	bne.n	800cb68 <LL_RCC_GetLPUARTClockFreq+0xfc>
        {
          lpuart_frequency = HSI_VALUE;
 800cb2e:	4b15      	ldr	r3, [pc, #84]	; (800cb84 <LL_RCC_GetLPUARTClockFreq+0x118>)
 800cb30:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cb32:	e019      	b.n	800cb68 <LL_RCC_GetLPUARTClockFreq+0xfc>

      case LL_RCC_LPUART2_CLKSOURCE_LSE:    /* LPUART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800cb34:	f7ff ff24 	bl	800c980 <LL_RCC_LSE_IsReady>
 800cb38:	0003      	movs	r3, r0
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d116      	bne.n	800cb6c <LL_RCC_GetLPUARTClockFreq+0x100>
        {
          lpuart_frequency = LSE_VALUE;
 800cb3e:	2380      	movs	r3, #128	; 0x80
 800cb40:	021b      	lsls	r3, r3, #8
 800cb42:	60fb      	str	r3, [r7, #12]
        }
        break;
 800cb44:	e012      	b.n	800cb6c <LL_RCC_GetLPUARTClockFreq+0x100>

      case LL_RCC_LPUART2_CLKSOURCE_PCLK1:  /* LPUART2 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cb46:	f000 f825 	bl	800cb94 <RCC_GetSystemClockFreq>
 800cb4a:	0003      	movs	r3, r0
 800cb4c:	0018      	movs	r0, r3
 800cb4e:	f000 f84f 	bl	800cbf0 <RCC_GetHCLKClockFreq>
 800cb52:	0003      	movs	r3, r0
 800cb54:	0018      	movs	r0, r3
 800cb56:	f000 f863 	bl	800cc20 <RCC_GetPCLK1ClockFreq>
 800cb5a:	0003      	movs	r3, r0
 800cb5c:	60fb      	str	r3, [r7, #12]
        break;
 800cb5e:	e006      	b.n	800cb6e <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800cb60:	46c0      	nop			; (mov r8, r8)
 800cb62:	e004      	b.n	800cb6e <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800cb64:	46c0      	nop			; (mov r8, r8)
 800cb66:	e002      	b.n	800cb6e <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800cb68:	46c0      	nop			; (mov r8, r8)
 800cb6a:	e000      	b.n	800cb6e <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800cb6c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /*nothing to do*/
  }

  return lpuart_frequency;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
}
 800cb70:	0018      	movs	r0, r3
 800cb72:	46bd      	mov	sp, r7
 800cb74:	b004      	add	sp, #16
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	0c000c00 	.word	0x0c000c00
 800cb7c:	0c000400 	.word	0x0c000400
 800cb80:	0c000800 	.word	0x0c000800
 800cb84:	00f42400 	.word	0x00f42400
 800cb88:	03000300 	.word	0x03000300
 800cb8c:	03000100 	.word	0x03000100
 800cb90:	03000200 	.word	0x03000200

0800cb94 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800cb9a:	f7ff ff01 	bl	800c9a0 <LL_RCC_GetSysClkSource>
 800cb9e:	0003      	movs	r3, r0
 800cba0:	2b08      	cmp	r3, #8
 800cba2:	d002      	beq.n	800cbaa <RCC_GetSystemClockFreq+0x16>
 800cba4:	2b10      	cmp	r3, #16
 800cba6:	d003      	beq.n	800cbb0 <RCC_GetSystemClockFreq+0x1c>
 800cba8:	e007      	b.n	800cbba <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800cbaa:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <RCC_GetSystemClockFreq+0x50>)
 800cbac:	607b      	str	r3, [r7, #4]
      break;
 800cbae:	e014      	b.n	800cbda <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800cbb0:	f000 f84c 	bl	800cc4c <RCC_PLL_GetFreqDomain_SYS>
 800cbb4:	0003      	movs	r3, r0
 800cbb6:	607b      	str	r3, [r7, #4]
      break;
 800cbb8:	e00f      	b.n	800cbda <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <RCC_GetSystemClockFreq+0x54>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	0adb      	lsrs	r3, r3, #11
 800cbc0:	2207      	movs	r2, #7
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	409a      	lsls	r2, r3
 800cbc8:	0013      	movs	r3, r2
 800cbca:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	4807      	ldr	r0, [pc, #28]	; (800cbec <RCC_GetSystemClockFreq+0x58>)
 800cbd0:	f7f9 fb0e 	bl	80061f0 <__udivsi3>
 800cbd4:	0003      	movs	r3, r0
 800cbd6:	607b      	str	r3, [r7, #4]
      break;
 800cbd8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800cbda:	687b      	ldr	r3, [r7, #4]
}
 800cbdc:	0018      	movs	r0, r3
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	b002      	add	sp, #8
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	007a1200 	.word	0x007a1200
 800cbe8:	40021000 	.word	0x40021000
 800cbec:	00f42400 	.word	0x00f42400

0800cbf0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800cbf8:	f7ff fede 	bl	800c9b8 <LL_RCC_GetAHBPrescaler>
 800cbfc:	0003      	movs	r3, r0
 800cbfe:	0a1b      	lsrs	r3, r3, #8
 800cc00:	220f      	movs	r2, #15
 800cc02:	401a      	ands	r2, r3
 800cc04:	4b05      	ldr	r3, [pc, #20]	; (800cc1c <RCC_GetHCLKClockFreq+0x2c>)
 800cc06:	0092      	lsls	r2, r2, #2
 800cc08:	58d3      	ldr	r3, [r2, r3]
 800cc0a:	221f      	movs	r2, #31
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	40da      	lsrs	r2, r3
 800cc12:	0013      	movs	r3, r2
}
 800cc14:	0018      	movs	r0, r3
 800cc16:	46bd      	mov	sp, r7
 800cc18:	b002      	add	sp, #8
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	0801c398 	.word	0x0801c398

0800cc20 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800cc28:	f7ff fed2 	bl	800c9d0 <LL_RCC_GetAPB1Prescaler>
 800cc2c:	0003      	movs	r3, r0
 800cc2e:	0b1a      	lsrs	r2, r3, #12
 800cc30:	4b05      	ldr	r3, [pc, #20]	; (800cc48 <RCC_GetPCLK1ClockFreq+0x28>)
 800cc32:	0092      	lsls	r2, r2, #2
 800cc34:	58d3      	ldr	r3, [r2, r3]
 800cc36:	221f      	movs	r2, #31
 800cc38:	4013      	ands	r3, r2
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	40da      	lsrs	r2, r3
 800cc3e:	0013      	movs	r3, r2
}
 800cc40:	0018      	movs	r0, r3
 800cc42:	46bd      	mov	sp, r7
 800cc44:	b002      	add	sp, #8
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	0801c3d8 	.word	0x0801c3d8

0800cc4c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800cc4c:	b590      	push	{r4, r7, lr}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800cc52:	f7ff fef3 	bl	800ca3c <LL_RCC_PLL_GetMainSource>
 800cc56:	0003      	movs	r3, r0
 800cc58:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d003      	beq.n	800cc68 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d003      	beq.n	800cc6e <RCC_PLL_GetFreqDomain_SYS+0x22>
 800cc66:	e005      	b.n	800cc74 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800cc68:	4b13      	ldr	r3, [pc, #76]	; (800ccb8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800cc6a:	607b      	str	r3, [r7, #4]
      break;
 800cc6c:	e005      	b.n	800cc7a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800cc6e:	4b13      	ldr	r3, [pc, #76]	; (800ccbc <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800cc70:	607b      	str	r3, [r7, #4]
      break;
 800cc72:	e002      	b.n	800cc7a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800cc74:	4b10      	ldr	r3, [pc, #64]	; (800ccb8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800cc76:	607b      	str	r3, [r7, #4]
      break;
 800cc78:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800cc7a:	f7ff fec7 	bl	800ca0c <LL_RCC_PLL_GetN>
 800cc7e:	0002      	movs	r2, r0
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4353      	muls	r3, r2
 800cc84:	001c      	movs	r4, r3
 800cc86:	f7ff fee5 	bl	800ca54 <LL_RCC_PLL_GetDivider>
 800cc8a:	0003      	movs	r3, r0
 800cc8c:	091b      	lsrs	r3, r3, #4
 800cc8e:	3301      	adds	r3, #1
 800cc90:	0019      	movs	r1, r3
 800cc92:	0020      	movs	r0, r4
 800cc94:	f7f9 faac 	bl	80061f0 <__udivsi3>
 800cc98:	0003      	movs	r3, r0
 800cc9a:	001c      	movs	r4, r3
 800cc9c:	f7ff fec2 	bl	800ca24 <LL_RCC_PLL_GetR>
 800cca0:	0003      	movs	r3, r0
 800cca2:	0f5b      	lsrs	r3, r3, #29
 800cca4:	3301      	adds	r3, #1
 800cca6:	0019      	movs	r1, r3
 800cca8:	0020      	movs	r0, r4
 800ccaa:	f7f9 faa1 	bl	80061f0 <__udivsi3>
 800ccae:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800ccb0:	0018      	movs	r0, r3
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	b003      	add	sp, #12
 800ccb6:	bd90      	pop	{r4, r7, pc}
 800ccb8:	00f42400 	.word	0x00f42400
 800ccbc:	007a1200 	.word	0x007a1200

0800ccc0 <LL_TIM_SetPrescaler>:
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	683a      	ldr	r2, [r7, #0]
 800ccce:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ccd0:	46c0      	nop			; (mov r8, r8)
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	b002      	add	sp, #8
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <LL_TIM_SetAutoReload>:
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800cce8:	46c0      	nop			; (mov r8, r8)
 800ccea:	46bd      	mov	sp, r7
 800ccec:	b002      	add	sp, #8
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <LL_TIM_SetRepetitionCounter>:
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cd00:	46c0      	nop			; (mov r8, r8)
 800cd02:	46bd      	mov	sp, r7
 800cd04:	b002      	add	sp, #8
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	2201      	movs	r2, #1
 800cd16:	431a      	orrs	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	615a      	str	r2, [r3, #20]
}
 800cd1c:	46c0      	nop			; (mov r8, r8)
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	b002      	add	sp, #8
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a39      	ldr	r2, [pc, #228]	; (800ce1c <LL_TIM_Init+0xf8>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d00c      	beq.n	800cd56 <LL_TIM_Init+0x32>
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	2380      	movs	r3, #128	; 0x80
 800cd40:	05db      	lsls	r3, r3, #23
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d007      	beq.n	800cd56 <LL_TIM_Init+0x32>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a35      	ldr	r2, [pc, #212]	; (800ce20 <LL_TIM_Init+0xfc>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d003      	beq.n	800cd56 <LL_TIM_Init+0x32>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a34      	ldr	r2, [pc, #208]	; (800ce24 <LL_TIM_Init+0x100>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d107      	bne.n	800cd66 <LL_TIM_Init+0x42>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2270      	movs	r2, #112	; 0x70
 800cd5a:	4393      	bics	r3, r2
 800cd5c:	001a      	movs	r2, r3
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	4313      	orrs	r3, r2
 800cd64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a2c      	ldr	r2, [pc, #176]	; (800ce1c <LL_TIM_Init+0xf8>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d01c      	beq.n	800cda8 <LL_TIM_Init+0x84>
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	2380      	movs	r3, #128	; 0x80
 800cd72:	05db      	lsls	r3, r3, #23
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d017      	beq.n	800cda8 <LL_TIM_Init+0x84>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a29      	ldr	r2, [pc, #164]	; (800ce20 <LL_TIM_Init+0xfc>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d013      	beq.n	800cda8 <LL_TIM_Init+0x84>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a28      	ldr	r2, [pc, #160]	; (800ce24 <LL_TIM_Init+0x100>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d00f      	beq.n	800cda8 <LL_TIM_Init+0x84>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a27      	ldr	r2, [pc, #156]	; (800ce28 <LL_TIM_Init+0x104>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d00b      	beq.n	800cda8 <LL_TIM_Init+0x84>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a26      	ldr	r2, [pc, #152]	; (800ce2c <LL_TIM_Init+0x108>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d007      	beq.n	800cda8 <LL_TIM_Init+0x84>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a25      	ldr	r2, [pc, #148]	; (800ce30 <LL_TIM_Init+0x10c>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d003      	beq.n	800cda8 <LL_TIM_Init+0x84>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a24      	ldr	r2, [pc, #144]	; (800ce34 <LL_TIM_Init+0x110>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d106      	bne.n	800cdb6 <LL_TIM_Init+0x92>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	4a23      	ldr	r2, [pc, #140]	; (800ce38 <LL_TIM_Init+0x114>)
 800cdac:	401a      	ands	r2, r3
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	689a      	ldr	r2, [r3, #8]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	0011      	movs	r1, r2
 800cdc4:	0018      	movs	r0, r3
 800cdc6:	f7ff ff87 	bl	800ccd8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	001a      	movs	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	0011      	movs	r1, r2
 800cdd4:	0018      	movs	r0, r3
 800cdd6:	f7ff ff73 	bl	800ccc0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a0f      	ldr	r2, [pc, #60]	; (800ce1c <LL_TIM_Init+0xf8>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d00b      	beq.n	800cdfa <LL_TIM_Init+0xd6>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4a11      	ldr	r2, [pc, #68]	; (800ce2c <LL_TIM_Init+0x108>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d007      	beq.n	800cdfa <LL_TIM_Init+0xd6>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4a10      	ldr	r2, [pc, #64]	; (800ce30 <LL_TIM_Init+0x10c>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d003      	beq.n	800cdfa <LL_TIM_Init+0xd6>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a0f      	ldr	r2, [pc, #60]	; (800ce34 <LL_TIM_Init+0x110>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d106      	bne.n	800ce08 <LL_TIM_Init+0xe4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	691a      	ldr	r2, [r3, #16]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	0011      	movs	r1, r2
 800ce02:	0018      	movs	r0, r3
 800ce04:	f7ff ff74 	bl	800ccf0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	0018      	movs	r0, r3
 800ce0c:	f7ff ff7c 	bl	800cd08 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	0018      	movs	r0, r3
 800ce14:	46bd      	mov	sp, r7
 800ce16:	b004      	add	sp, #16
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	46c0      	nop			; (mov r8, r8)
 800ce1c:	40012c00 	.word	0x40012c00
 800ce20:	40000400 	.word	0x40000400
 800ce24:	40000800 	.word	0x40000800
 800ce28:	40002000 	.word	0x40002000
 800ce2c:	40014000 	.word	0x40014000
 800ce30:	40014400 	.word	0x40014400
 800ce34:	40014800 	.word	0x40014800
 800ce38:	fffffcff 	.word	0xfffffcff

0800ce3c <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	085a      	lsrs	r2, r3, #1
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	601a      	str	r2, [r3, #0]
}
 800ce50:	46c0      	nop			; (mov r8, r8)
 800ce52:	46bd      	mov	sp, r7
 800ce54:	b002      	add	sp, #8
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <LL_APB1_GRP1_EnableClock>:
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800ce60:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <LL_APB1_GRP1_EnableClock+0x28>)
 800ce62:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ce64:	4b06      	ldr	r3, [pc, #24]	; (800ce80 <LL_APB1_GRP1_EnableClock+0x28>)
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	430a      	orrs	r2, r1
 800ce6a:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800ce6c:	4b04      	ldr	r3, [pc, #16]	; (800ce80 <LL_APB1_GRP1_EnableClock+0x28>)
 800ce6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	4013      	ands	r3, r2
 800ce74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ce76:	68fb      	ldr	r3, [r7, #12]
}
 800ce78:	46c0      	nop			; (mov r8, r8)
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	b004      	add	sp, #16
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	40021000 	.word	0x40021000

0800ce84 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4a16      	ldr	r2, [pc, #88]	; (800ceec <LL_UCPD_Init+0x68>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d104      	bne.n	800cea0 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800ce96:	2380      	movs	r3, #128	; 0x80
 800ce98:	049b      	lsls	r3, r3, #18
 800ce9a:	0018      	movs	r0, r3
 800ce9c:	f7ff ffdc 	bl	800ce58 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4a13      	ldr	r2, [pc, #76]	; (800cef0 <LL_UCPD_Init+0x6c>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d104      	bne.n	800ceb2 <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800cea8:	2380      	movs	r3, #128	; 0x80
 800ceaa:	04db      	lsls	r3, r3, #19
 800ceac:	0018      	movs	r0, r3
 800ceae:	f7ff ffd3 	bl	800ce58 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	0018      	movs	r0, r3
 800ceb6:	f7ff ffc1 	bl	800ce3c <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a0d      	ldr	r2, [pc, #52]	; (800cef4 <LL_UCPD_Init+0x70>)
 800cec0:	401a      	ands	r2, r3
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	6819      	ldr	r1, [r3, #0]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	02db      	lsls	r3, r3, #11
 800cecc:	4319      	orrs	r1, r3
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	019b      	lsls	r3, r3, #6
 800ced4:	4319      	orrs	r1, r3
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	430b      	orrs	r3, r1
 800cedc:	431a      	orrs	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	0018      	movs	r0, r3
 800cee6:	46bd      	mov	sp, r7
 800cee8:	b002      	add	sp, #8
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	4000a000 	.word	0x4000a000
 800cef0:	4000a400 	.word	0x4000a400
 800cef4:	fff10000 	.word	0xfff10000

0800cef8 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2280      	movs	r2, #128	; 0x80
 800cf04:	0292      	lsls	r2, r2, #10
 800cf06:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2207      	movs	r2, #7
 800cf0c:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2210      	movs	r2, #16
 800cf12:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	220d      	movs	r2, #13
 800cf18:	60da      	str	r2, [r3, #12]
}
 800cf1a:	46c0      	nop			; (mov r8, r8)
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	b002      	add	sp, #8
 800cf20:	bd80      	pop	{r7, pc}
	...

0800cf24 <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	af00      	add	r7, sp, #0
    'T', 'R', 'A', 'C', 'E', ' ', 'O', 'V', 'E', 'R', '_', 'F', 'L', 'O', 'W', /* Data */
    TLV_EOF, TLV_EOF, TLV_EOF, TLV_EOF                                         /* Buffer end */
  };

  /* initialize tracer module */
  TRACER_EMB_Init();
 800cf28:	f00c fcd0 	bl	80198cc <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 800cf2c:	4b06      	ldr	r3, [pc, #24]	; (800cf48 <USBPD_TRACE_Init+0x24>)
 800cf2e:	2103      	movs	r1, #3
 800cf30:	0018      	movs	r0, r3
 800cf32:	f7f4 facd 	bl	80014d0 <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, (uint8_t)sizeof(OverFlow_String));
 800cf36:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <USBPD_TRACE_Init+0x28>)
 800cf38:	2123      	movs	r1, #35	; 0x23
 800cf3a:	0018      	movs	r0, r3
 800cf3c:	f00c fd52 	bl	80199e4 <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif /* _TRACE */
}
 800cf40:	46c0      	nop			; (mov r8, r8)
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	46c0      	nop			; (mov r8, r8)
 800cf48:	0800cf51 	.word	0x0800cf51
 800cf4c:	0801c418 	.word	0x0801c418

0800cf50 <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 800cf50:	b5b0      	push	{r4, r5, r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	0004      	movs	r4, r0
 800cf58:	0008      	movs	r0, r1
 800cf5a:	0011      	movs	r1, r2
 800cf5c:	603b      	str	r3, [r7, #0]
 800cf5e:	1dfb      	adds	r3, r7, #7
 800cf60:	1c22      	adds	r2, r4, #0
 800cf62:	701a      	strb	r2, [r3, #0]
 800cf64:	1dbb      	adds	r3, r7, #6
 800cf66:	1c02      	adds	r2, r0, #0
 800cf68:	701a      	strb	r2, [r3, #0]
 800cf6a:	1d7b      	adds	r3, r7, #5
 800cf6c:	1c0a      	adds	r2, r1, #0
 800cf6e:	701a      	strb	r2, [r3, #0]
  uint32_t _time;
  int32_t _allocation;
  uint16_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 800cf70:	f7fb fdea 	bl	8008b48 <HAL_GetTick>
 800cf74:	0003      	movs	r3, r0
 800cf76:	613b      	str	r3, [r7, #16]

  TRACER_EMB_Lock();
 800cf78:	f00c fd98 	bl	8019aac <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _allocation = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE +
 800cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7e:	3314      	adds	r3, #20
 800cf80:	0018      	movs	r0, r3
 800cf82:	f00c fe2d 	bl	8019be0 <TRACER_EMB_AllocateBufer>
 800cf86:	0003      	movs	r3, r0
 800cf88:	60fb      	str	r3, [r7, #12]
                                         TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);

  /* Check allocation */
  if (_allocation  != -1)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	d100      	bne.n	800cf92 <USBPD_TRACE_Add+0x42>
 800cf90:	e11d      	b.n	800d1ce <USBPD_TRACE_Add+0x27e>
  {
    uint16_t _writepos = (uint16_t)_allocation;
 800cf92:	2314      	movs	r3, #20
 800cf94:	18fb      	adds	r3, r7, r3
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	801a      	strh	r2, [r3, #0]

    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800cf9a:	2316      	movs	r3, #22
 800cf9c:	18fb      	adds	r3, r7, r3
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	801a      	strh	r2, [r3, #0]
 800cfa2:	e011      	b.n	800cfc8 <USBPD_TRACE_Add+0x78>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 800cfa4:	2414      	movs	r4, #20
 800cfa6:	193b      	adds	r3, r7, r4
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	21fd      	movs	r1, #253	; 0xfd
 800cfac:	0018      	movs	r0, r3
 800cfae:	f00c fcf3 	bl	8019998 <TRACER_EMB_WriteData>
 800cfb2:	193b      	adds	r3, r7, r4
 800cfb4:	193a      	adds	r2, r7, r4
 800cfb6:	8812      	ldrh	r2, [r2, #0]
 800cfb8:	3201      	adds	r2, #1
 800cfba:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800cfbc:	2116      	movs	r1, #22
 800cfbe:	187b      	adds	r3, r7, r1
 800cfc0:	881a      	ldrh	r2, [r3, #0]
 800cfc2:	187b      	adds	r3, r7, r1
 800cfc4:	3201      	adds	r2, #1
 800cfc6:	801a      	strh	r2, [r3, #0]
 800cfc8:	2516      	movs	r5, #22
 800cfca:	197b      	adds	r3, r7, r5
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d9e8      	bls.n	800cfa4 <USBPD_TRACE_Add+0x54>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 800cfd2:	1dbb      	adds	r3, r7, #6
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	015b      	lsls	r3, r3, #5
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2212      	movs	r2, #18
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	2414      	movs	r4, #20
 800cfe6:	193b      	adds	r3, r7, r4
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	0011      	movs	r1, r2
 800cfec:	0018      	movs	r0, r3
 800cfee:	f00c fcd3 	bl	8019998 <TRACER_EMB_WriteData>
 800cff2:	0021      	movs	r1, r4
 800cff4:	187b      	adds	r3, r7, r1
 800cff6:	187a      	adds	r2, r7, r1
 800cff8:	8812      	ldrh	r2, [r2, #0]
 800cffa:	3201      	adds	r2, #1
 800cffc:	801a      	strh	r2, [r3, #0]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 800cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d000:	3309      	adds	r3, #9
 800d002:	0a1b      	lsrs	r3, r3, #8
 800d004:	b2da      	uxtb	r2, r3
 800d006:	000c      	movs	r4, r1
 800d008:	187b      	adds	r3, r7, r1
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	0011      	movs	r1, r2
 800d00e:	0018      	movs	r0, r3
 800d010:	f00c fcc2 	bl	8019998 <TRACER_EMB_WriteData>
 800d014:	0021      	movs	r1, r4
 800d016:	187b      	adds	r3, r7, r1
 800d018:	187a      	adds	r2, r7, r1
 800d01a:	8812      	ldrh	r2, [r2, #0]
 800d01c:	3201      	adds	r2, #1
 800d01e:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size + TRACE_SIZE_HEADER_TRACE));
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	b2db      	uxtb	r3, r3
 800d024:	3309      	adds	r3, #9
 800d026:	b2da      	uxtb	r2, r3
 800d028:	000c      	movs	r4, r1
 800d02a:	187b      	adds	r3, r7, r1
 800d02c:	881b      	ldrh	r3, [r3, #0]
 800d02e:	0011      	movs	r1, r2
 800d030:	0018      	movs	r0, r3
 800d032:	f00c fcb1 	bl	8019998 <TRACER_EMB_WriteData>
 800d036:	0021      	movs	r1, r4
 800d038:	187b      	adds	r3, r7, r1
 800d03a:	187a      	adds	r2, r7, r1
 800d03c:	8812      	ldrh	r2, [r2, #0]
 800d03e:	3201      	adds	r2, #1
 800d040:	801a      	strh	r2, [r3, #0]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 800d042:	1dfb      	adds	r3, r7, #7
 800d044:	781a      	ldrb	r2, [r3, #0]
 800d046:	000c      	movs	r4, r1
 800d048:	187b      	adds	r3, r7, r1
 800d04a:	881b      	ldrh	r3, [r3, #0]
 800d04c:	0011      	movs	r1, r2
 800d04e:	0018      	movs	r0, r3
 800d050:	f00c fca2 	bl	8019998 <TRACER_EMB_WriteData>
 800d054:	0021      	movs	r1, r4
 800d056:	187b      	adds	r3, r7, r1
 800d058:	187a      	adds	r2, r7, r1
 800d05a:	8812      	ldrh	r2, [r2, #0]
 800d05c:	3201      	adds	r2, #1
 800d05e:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	b2da      	uxtb	r2, r3
 800d064:	000c      	movs	r4, r1
 800d066:	187b      	adds	r3, r7, r1
 800d068:	881b      	ldrh	r3, [r3, #0]
 800d06a:	0011      	movs	r1, r2
 800d06c:	0018      	movs	r0, r3
 800d06e:	f00c fc93 	bl	8019998 <TRACER_EMB_WriteData>
 800d072:	0021      	movs	r1, r4
 800d074:	187b      	adds	r3, r7, r1
 800d076:	187a      	adds	r2, r7, r1
 800d078:	8812      	ldrh	r2, [r2, #0]
 800d07a:	3201      	adds	r2, #1
 800d07c:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	0a1b      	lsrs	r3, r3, #8
 800d082:	b2da      	uxtb	r2, r3
 800d084:	000c      	movs	r4, r1
 800d086:	187b      	adds	r3, r7, r1
 800d088:	881b      	ldrh	r3, [r3, #0]
 800d08a:	0011      	movs	r1, r2
 800d08c:	0018      	movs	r0, r3
 800d08e:	f00c fc83 	bl	8019998 <TRACER_EMB_WriteData>
 800d092:	0021      	movs	r1, r4
 800d094:	187b      	adds	r3, r7, r1
 800d096:	187a      	adds	r2, r7, r1
 800d098:	8812      	ldrh	r2, [r2, #0]
 800d09a:	3201      	adds	r2, #1
 800d09c:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	0c1b      	lsrs	r3, r3, #16
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	000c      	movs	r4, r1
 800d0a6:	187b      	adds	r3, r7, r1
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	0011      	movs	r1, r2
 800d0ac:	0018      	movs	r0, r3
 800d0ae:	f00c fc73 	bl	8019998 <TRACER_EMB_WriteData>
 800d0b2:	0021      	movs	r1, r4
 800d0b4:	187b      	adds	r3, r7, r1
 800d0b6:	187a      	adds	r2, r7, r1
 800d0b8:	8812      	ldrh	r2, [r2, #0]
 800d0ba:	3201      	adds	r2, #1
 800d0bc:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	0e1b      	lsrs	r3, r3, #24
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	000c      	movs	r4, r1
 800d0c6:	187b      	adds	r3, r7, r1
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	0011      	movs	r1, r2
 800d0cc:	0018      	movs	r0, r3
 800d0ce:	f00c fc63 	bl	8019998 <TRACER_EMB_WriteData>
 800d0d2:	0021      	movs	r1, r4
 800d0d4:	187b      	adds	r3, r7, r1
 800d0d6:	187a      	adds	r2, r7, r1
 800d0d8:	8812      	ldrh	r2, [r2, #0]
 800d0da:	3201      	adds	r2, #1
 800d0dc:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 800d0de:	1dbb      	adds	r3, r7, #6
 800d0e0:	781a      	ldrb	r2, [r3, #0]
 800d0e2:	000c      	movs	r4, r1
 800d0e4:	187b      	adds	r3, r7, r1
 800d0e6:	881b      	ldrh	r3, [r3, #0]
 800d0e8:	0011      	movs	r1, r2
 800d0ea:	0018      	movs	r0, r3
 800d0ec:	f00c fc54 	bl	8019998 <TRACER_EMB_WriteData>
 800d0f0:	0021      	movs	r1, r4
 800d0f2:	187b      	adds	r3, r7, r1
 800d0f4:	187a      	adds	r2, r7, r1
 800d0f6:	8812      	ldrh	r2, [r2, #0]
 800d0f8:	3201      	adds	r2, #1
 800d0fa:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 800d0fc:	1d7b      	adds	r3, r7, #5
 800d0fe:	781a      	ldrb	r2, [r3, #0]
 800d100:	000c      	movs	r4, r1
 800d102:	187b      	adds	r3, r7, r1
 800d104:	881b      	ldrh	r3, [r3, #0]
 800d106:	0011      	movs	r1, r2
 800d108:	0018      	movs	r0, r3
 800d10a:	f00c fc45 	bl	8019998 <TRACER_EMB_WriteData>
 800d10e:	0021      	movs	r1, r4
 800d110:	187b      	adds	r3, r7, r1
 800d112:	187a      	adds	r2, r7, r1
 800d114:	8812      	ldrh	r2, [r2, #0]
 800d116:	3201      	adds	r2, #1
 800d118:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	0a1b      	lsrs	r3, r3, #8
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	000c      	movs	r4, r1
 800d122:	187b      	adds	r3, r7, r1
 800d124:	881b      	ldrh	r3, [r3, #0]
 800d126:	0011      	movs	r1, r2
 800d128:	0018      	movs	r0, r3
 800d12a:	f00c fc35 	bl	8019998 <TRACER_EMB_WriteData>
 800d12e:	0021      	movs	r1, r4
 800d130:	187b      	adds	r3, r7, r1
 800d132:	187a      	adds	r2, r7, r1
 800d134:	8812      	ldrh	r2, [r2, #0]
 800d136:	3201      	adds	r2, #1
 800d138:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	000c      	movs	r4, r1
 800d140:	187b      	adds	r3, r7, r1
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	0011      	movs	r1, r2
 800d146:	0018      	movs	r0, r3
 800d148:	f00c fc26 	bl	8019998 <TRACER_EMB_WriteData>
 800d14c:	193b      	adds	r3, r7, r4
 800d14e:	193a      	adds	r2, r7, r4
 800d150:	8812      	ldrh	r2, [r2, #0]
 800d152:	3201      	adds	r2, #1
 800d154:	801a      	strh	r2, [r3, #0]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 800d156:	197b      	adds	r3, r7, r5
 800d158:	2200      	movs	r2, #0
 800d15a:	801a      	strh	r2, [r3, #0]
 800d15c:	e016      	b.n	800d18c <USBPD_TRACE_Add+0x23c>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 800d15e:	2416      	movs	r4, #22
 800d160:	193b      	adds	r3, r7, r4
 800d162:	881b      	ldrh	r3, [r3, #0]
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	18d3      	adds	r3, r2, r3
 800d168:	781a      	ldrb	r2, [r3, #0]
 800d16a:	2514      	movs	r5, #20
 800d16c:	197b      	adds	r3, r7, r5
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	0011      	movs	r1, r2
 800d172:	0018      	movs	r0, r3
 800d174:	f00c fc10 	bl	8019998 <TRACER_EMB_WriteData>
 800d178:	197b      	adds	r3, r7, r5
 800d17a:	197a      	adds	r2, r7, r5
 800d17c:	8812      	ldrh	r2, [r2, #0]
 800d17e:	3201      	adds	r2, #1
 800d180:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < Size; index++)
 800d182:	193b      	adds	r3, r7, r4
 800d184:	881a      	ldrh	r2, [r3, #0]
 800d186:	193b      	adds	r3, r7, r4
 800d188:	3201      	adds	r2, #1
 800d18a:	801a      	strh	r2, [r3, #0]
 800d18c:	2116      	movs	r1, #22
 800d18e:	187b      	adds	r3, r7, r1
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d194:	429a      	cmp	r2, r3
 800d196:	d8e2      	bhi.n	800d15e <USBPD_TRACE_Add+0x20e>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800d198:	187b      	adds	r3, r7, r1
 800d19a:	2200      	movs	r2, #0
 800d19c:	801a      	strh	r2, [r3, #0]
 800d19e:	e011      	b.n	800d1c4 <USBPD_TRACE_Add+0x274>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 800d1a0:	2414      	movs	r4, #20
 800d1a2:	193b      	adds	r3, r7, r4
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	21a5      	movs	r1, #165	; 0xa5
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	f00c fbf5 	bl	8019998 <TRACER_EMB_WriteData>
 800d1ae:	193b      	adds	r3, r7, r4
 800d1b0:	193a      	adds	r2, r7, r4
 800d1b2:	8812      	ldrh	r2, [r2, #0]
 800d1b4:	3201      	adds	r2, #1
 800d1b6:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800d1b8:	2116      	movs	r1, #22
 800d1ba:	187b      	adds	r3, r7, r1
 800d1bc:	881a      	ldrh	r2, [r3, #0]
 800d1be:	187b      	adds	r3, r7, r1
 800d1c0:	3201      	adds	r2, #1
 800d1c2:	801a      	strh	r2, [r3, #0]
 800d1c4:	2316      	movs	r3, #22
 800d1c6:	18fb      	adds	r3, r7, r3
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d9e8      	bls.n	800d1a0 <USBPD_TRACE_Add+0x250>
    }
  }

  TRACER_EMB_UnLock();
 800d1ce:	f00c fc8b 	bl	8019ae8 <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 800d1d2:	f00c fca7 	bl	8019b24 <TRACER_EMB_SendData>
#else
  return;
#endif /* _TRACE */
}
 800d1d6:	46c0      	nop			; (mov r8, r8)
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	b006      	add	sp, #24
 800d1dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d1e0 <__NVIC_EnableIRQ>:
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	0002      	movs	r2, r0
 800d1e8:	1dfb      	adds	r3, r7, #7
 800d1ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d1ec:	1dfb      	adds	r3, r7, #7
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	2b7f      	cmp	r3, #127	; 0x7f
 800d1f2:	d809      	bhi.n	800d208 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d1f4:	1dfb      	adds	r3, r7, #7
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	001a      	movs	r2, r3
 800d1fa:	231f      	movs	r3, #31
 800d1fc:	401a      	ands	r2, r3
 800d1fe:	4b04      	ldr	r3, [pc, #16]	; (800d210 <__NVIC_EnableIRQ+0x30>)
 800d200:	2101      	movs	r1, #1
 800d202:	4091      	lsls	r1, r2
 800d204:	000a      	movs	r2, r1
 800d206:	601a      	str	r2, [r3, #0]
}
 800d208:	46c0      	nop			; (mov r8, r8)
 800d20a:	46bd      	mov	sp, r7
 800d20c:	b002      	add	sp, #8
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	e000e100 	.word	0xe000e100

0800d214 <__NVIC_SetPriority>:
{
 800d214:	b590      	push	{r4, r7, lr}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	0002      	movs	r2, r0
 800d21c:	6039      	str	r1, [r7, #0]
 800d21e:	1dfb      	adds	r3, r7, #7
 800d220:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d222:	1dfb      	adds	r3, r7, #7
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b7f      	cmp	r3, #127	; 0x7f
 800d228:	d828      	bhi.n	800d27c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d22a:	4a2f      	ldr	r2, [pc, #188]	; (800d2e8 <__NVIC_SetPriority+0xd4>)
 800d22c:	1dfb      	adds	r3, r7, #7
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	b25b      	sxtb	r3, r3
 800d232:	089b      	lsrs	r3, r3, #2
 800d234:	33c0      	adds	r3, #192	; 0xc0
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	589b      	ldr	r3, [r3, r2]
 800d23a:	1dfa      	adds	r2, r7, #7
 800d23c:	7812      	ldrb	r2, [r2, #0]
 800d23e:	0011      	movs	r1, r2
 800d240:	2203      	movs	r2, #3
 800d242:	400a      	ands	r2, r1
 800d244:	00d2      	lsls	r2, r2, #3
 800d246:	21ff      	movs	r1, #255	; 0xff
 800d248:	4091      	lsls	r1, r2
 800d24a:	000a      	movs	r2, r1
 800d24c:	43d2      	mvns	r2, r2
 800d24e:	401a      	ands	r2, r3
 800d250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	019b      	lsls	r3, r3, #6
 800d256:	22ff      	movs	r2, #255	; 0xff
 800d258:	401a      	ands	r2, r3
 800d25a:	1dfb      	adds	r3, r7, #7
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	0018      	movs	r0, r3
 800d260:	2303      	movs	r3, #3
 800d262:	4003      	ands	r3, r0
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d268:	481f      	ldr	r0, [pc, #124]	; (800d2e8 <__NVIC_SetPriority+0xd4>)
 800d26a:	1dfb      	adds	r3, r7, #7
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	b25b      	sxtb	r3, r3
 800d270:	089b      	lsrs	r3, r3, #2
 800d272:	430a      	orrs	r2, r1
 800d274:	33c0      	adds	r3, #192	; 0xc0
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	501a      	str	r2, [r3, r0]
}
 800d27a:	e031      	b.n	800d2e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d27c:	4a1b      	ldr	r2, [pc, #108]	; (800d2ec <__NVIC_SetPriority+0xd8>)
 800d27e:	1dfb      	adds	r3, r7, #7
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	0019      	movs	r1, r3
 800d284:	230f      	movs	r3, #15
 800d286:	400b      	ands	r3, r1
 800d288:	3b08      	subs	r3, #8
 800d28a:	089b      	lsrs	r3, r3, #2
 800d28c:	3306      	adds	r3, #6
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	18d3      	adds	r3, r2, r3
 800d292:	3304      	adds	r3, #4
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	1dfa      	adds	r2, r7, #7
 800d298:	7812      	ldrb	r2, [r2, #0]
 800d29a:	0011      	movs	r1, r2
 800d29c:	2203      	movs	r2, #3
 800d29e:	400a      	ands	r2, r1
 800d2a0:	00d2      	lsls	r2, r2, #3
 800d2a2:	21ff      	movs	r1, #255	; 0xff
 800d2a4:	4091      	lsls	r1, r2
 800d2a6:	000a      	movs	r2, r1
 800d2a8:	43d2      	mvns	r2, r2
 800d2aa:	401a      	ands	r2, r3
 800d2ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	019b      	lsls	r3, r3, #6
 800d2b2:	22ff      	movs	r2, #255	; 0xff
 800d2b4:	401a      	ands	r2, r3
 800d2b6:	1dfb      	adds	r3, r7, #7
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	0018      	movs	r0, r3
 800d2bc:	2303      	movs	r3, #3
 800d2be:	4003      	ands	r3, r0
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d2c4:	4809      	ldr	r0, [pc, #36]	; (800d2ec <__NVIC_SetPriority+0xd8>)
 800d2c6:	1dfb      	adds	r3, r7, #7
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	001c      	movs	r4, r3
 800d2cc:	230f      	movs	r3, #15
 800d2ce:	4023      	ands	r3, r4
 800d2d0:	3b08      	subs	r3, #8
 800d2d2:	089b      	lsrs	r3, r3, #2
 800d2d4:	430a      	orrs	r2, r1
 800d2d6:	3306      	adds	r3, #6
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	18c3      	adds	r3, r0, r3
 800d2dc:	3304      	adds	r3, #4
 800d2de:	601a      	str	r2, [r3, #0]
}
 800d2e0:	46c0      	nop			; (mov r8, r8)
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	b003      	add	sp, #12
 800d2e6:	bd90      	pop	{r4, r7, pc}
 800d2e8:	e000e100 	.word	0xe000e100
 800d2ec:	e000ed00 	.word	0xe000ed00

0800d2f0 <LL_UCPD_Enable>:
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2280      	movs	r2, #128	; 0x80
 800d2fe:	0612      	lsls	r2, r2, #24
 800d300:	431a      	orrs	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	601a      	str	r2, [r3, #0]
}
 800d306:	46c0      	nop			; (mov r8, r8)
 800d308:	46bd      	mov	sp, r7
 800d30a:	b002      	add	sp, #8
 800d30c:	bd80      	pop	{r7, pc}
	...

0800d310 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a05      	ldr	r2, [pc, #20]	; (800d334 <LL_UCPD_SetRxOrderSet+0x24>)
 800d320:	401a      	ands	r2, r3
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	431a      	orrs	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	601a      	str	r2, [r3, #0]
}
 800d32a:	46c0      	nop			; (mov r8, r8)
 800d32c:	46bd      	mov	sp, r7
 800d32e:	b002      	add	sp, #8
 800d330:	bd80      	pop	{r7, pc}
 800d332:	46c0      	nop			; (mov r8, r8)
 800d334:	e00fffff 	.word	0xe00fffff

0800d338 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	4a05      	ldr	r2, [pc, #20]	; (800d35c <LL_UCPD_SetccEnable+0x24>)
 800d348:	401a      	ands	r2, r3
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	431a      	orrs	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60da      	str	r2, [r3, #12]
}
 800d352:	46c0      	nop			; (mov r8, r8)
 800d354:	46bd      	mov	sp, r7
 800d356:	b002      	add	sp, #8
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	46c0      	nop			; (mov r8, r8)
 800d35c:	fffff3ff 	.word	0xfffff3ff

0800d360 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	691b      	ldr	r3, [r3, #16]
 800d36c:	2280      	movs	r2, #128	; 0x80
 800d36e:	0212      	lsls	r2, r2, #8
 800d370:	431a      	orrs	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	611a      	str	r2, [r3, #16]
}
 800d376:	46c0      	nop			; (mov r8, r8)
 800d378:	46bd      	mov	sp, r7
 800d37a:	b002      	add	sp, #8
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b082      	sub	sp, #8
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	2280      	movs	r2, #128	; 0x80
 800d38c:	01d2      	lsls	r2, r2, #7
 800d38e:	431a      	orrs	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	611a      	str	r2, [r3, #16]
}
 800d394:	46c0      	nop			; (mov r8, r8)
 800d396:	46bd      	mov	sp, r7
 800d398:	b002      	add	sp, #8
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800d39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d39e:	b08b      	sub	sp, #44	; 0x2c
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60b9      	str	r1, [r7, #8]
 800d3a4:	607a      	str	r2, [r7, #4]
 800d3a6:	603b      	str	r3, [r7, #0]
 800d3a8:	240f      	movs	r4, #15
 800d3aa:	193b      	adds	r3, r7, r4
 800d3ac:	1c02      	adds	r2, r0, #0
 800d3ae:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d3b0:	193b      	adds	r3, r7, r4
 800d3b2:	781a      	ldrb	r2, [r3, #0]
 800d3b4:	0013      	movs	r3, r2
 800d3b6:	005b      	lsls	r3, r3, #1
 800d3b8:	189b      	adds	r3, r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	4a65      	ldr	r2, [pc, #404]	; (800d554 <CAD_Init+0x1b8>)
 800d3be:	189b      	adds	r3, r3, r2
 800d3c0:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800d3c2:	193b      	adds	r3, r7, r4
 800d3c4:	781a      	ldrb	r2, [r3, #0]
 800d3c6:	4964      	ldr	r1, [pc, #400]	; (800d558 <CAD_Init+0x1bc>)
 800d3c8:	0013      	movs	r3, r2
 800d3ca:	011b      	lsls	r3, r3, #4
 800d3cc:	1a9b      	subs	r3, r3, r2
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	18cb      	adds	r3, r1, r3
 800d3d2:	3310      	adds	r3, #16
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800d3d8:	193b      	adds	r3, r7, r4
 800d3da:	781a      	ldrb	r2, [r3, #0]
 800d3dc:	495e      	ldr	r1, [pc, #376]	; (800d558 <CAD_Init+0x1bc>)
 800d3de:	0013      	movs	r3, r2
 800d3e0:	011b      	lsls	r3, r3, #4
 800d3e2:	1a9b      	subs	r3, r3, r2
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	18cb      	adds	r3, r1, r3
 800d3e8:	330c      	adds	r3, #12
 800d3ea:	68ba      	ldr	r2, [r7, #8]
 800d3ec:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800d3ee:	193b      	adds	r3, r7, r4
 800d3f0:	781a      	ldrb	r2, [r3, #0]
 800d3f2:	4959      	ldr	r1, [pc, #356]	; (800d558 <CAD_Init+0x1bc>)
 800d3f4:	0013      	movs	r3, r2
 800d3f6:	011b      	lsls	r3, r3, #4
 800d3f8:	1a9b      	subs	r3, r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	18cb      	adds	r3, r1, r3
 800d3fe:	330c      	adds	r3, #12
 800d400:	6819      	ldr	r1, [r3, #0]
 800d402:	193b      	adds	r3, r7, r4
 800d404:	781a      	ldrb	r2, [r3, #0]
 800d406:	4854      	ldr	r0, [pc, #336]	; (800d558 <CAD_Init+0x1bc>)
 800d408:	0013      	movs	r3, r2
 800d40a:	011b      	lsls	r3, r3, #4
 800d40c:	1a9b      	subs	r3, r3, r2
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	18c3      	adds	r3, r0, r3
 800d412:	3310      	adds	r3, #16
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	794a      	ldrb	r2, [r1, #5]
 800d418:	0612      	lsls	r2, r2, #24
 800d41a:	0f92      	lsrs	r2, r2, #30
 800d41c:	b2d2      	uxtb	r2, r2
 800d41e:	2103      	movs	r1, #3
 800d420:	400a      	ands	r2, r1
 800d422:	0010      	movs	r0, r2
 800d424:	789a      	ldrb	r2, [r3, #2]
 800d426:	2103      	movs	r1, #3
 800d428:	438a      	bics	r2, r1
 800d42a:	1c11      	adds	r1, r2, #0
 800d42c:	1c02      	adds	r2, r0, #0
 800d42e:	430a      	orrs	r2, r1
 800d430:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800d432:	193b      	adds	r3, r7, r4
 800d434:	781a      	ldrb	r2, [r3, #0]
 800d436:	4948      	ldr	r1, [pc, #288]	; (800d558 <CAD_Init+0x1bc>)
 800d438:	0013      	movs	r3, r2
 800d43a:	011b      	lsls	r3, r3, #4
 800d43c:	1a9b      	subs	r3, r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	18cb      	adds	r3, r1, r3
 800d442:	3310      	adds	r3, #16
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	789a      	ldrb	r2, [r3, #2]
 800d448:	210c      	movs	r1, #12
 800d44a:	438a      	bics	r2, r1
 800d44c:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	220c      	movs	r2, #12
 800d452:	2100      	movs	r1, #0
 800d454:	0018      	movs	r0, r3
 800d456:	f00d fb7f 	bl	801ab58 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800d45a:	193b      	adds	r3, r7, r4
 800d45c:	781a      	ldrb	r2, [r3, #0]
 800d45e:	493e      	ldr	r1, [pc, #248]	; (800d558 <CAD_Init+0x1bc>)
 800d460:	0013      	movs	r3, r2
 800d462:	011b      	lsls	r3, r3, #4
 800d464:	1a9b      	subs	r3, r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	18cb      	adds	r3, r1, r3
 800d46a:	332c      	adds	r3, #44	; 0x2c
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800d470:	0025      	movs	r5, r4
 800d472:	193b      	adds	r3, r7, r4
 800d474:	781c      	ldrb	r4, [r3, #0]
 800d476:	197b      	adds	r3, r7, r5
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	0018      	movs	r0, r3
 800d47c:	f000 fc42 	bl	800dd04 <USBPD_HW_GetUSPDInstance>
 800d480:	0001      	movs	r1, r0
 800d482:	4a35      	ldr	r2, [pc, #212]	; (800d558 <CAD_Init+0x1bc>)
 800d484:	0023      	movs	r3, r4
 800d486:	011b      	lsls	r3, r3, #4
 800d488:	1b1b      	subs	r3, r3, r4
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 800d48e:	2614      	movs	r6, #20
 800d490:	19bb      	adds	r3, r7, r6
 800d492:	0018      	movs	r0, r3
 800d494:	f7ff fd30 	bl	800cef8 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800d498:	002c      	movs	r4, r5
 800d49a:	193b      	adds	r3, r7, r4
 800d49c:	781a      	ldrb	r2, [r3, #0]
 800d49e:	492e      	ldr	r1, [pc, #184]	; (800d558 <CAD_Init+0x1bc>)
 800d4a0:	0013      	movs	r3, r2
 800d4a2:	011b      	lsls	r3, r3, #4
 800d4a4:	1a9b      	subs	r3, r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	585b      	ldr	r3, [r3, r1]
 800d4aa:	19ba      	adds	r2, r7, r6
 800d4ac:	0011      	movs	r1, r2
 800d4ae:	0018      	movs	r0, r3
 800d4b0:	f7ff fce8 	bl	800ce84 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800d4b4:	193b      	adds	r3, r7, r4
 800d4b6:	781a      	ldrb	r2, [r3, #0]
 800d4b8:	4927      	ldr	r1, [pc, #156]	; (800d558 <CAD_Init+0x1bc>)
 800d4ba:	0013      	movs	r3, r2
 800d4bc:	011b      	lsls	r3, r3, #4
 800d4be:	1a9b      	subs	r3, r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	585b      	ldr	r3, [r3, r1]
 800d4c4:	22f8      	movs	r2, #248	; 0xf8
 800d4c6:	0452      	lsls	r2, r2, #17
 800d4c8:	0011      	movs	r1, r2
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	f7ff ff20 	bl	800d310 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800d4d0:	193b      	adds	r3, r7, r4
 800d4d2:	781a      	ldrb	r2, [r3, #0]
 800d4d4:	4920      	ldr	r1, [pc, #128]	; (800d558 <CAD_Init+0x1bc>)
 800d4d6:	0013      	movs	r3, r2
 800d4d8:	011b      	lsls	r3, r3, #4
 800d4da:	1a9b      	subs	r3, r3, r2
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	585b      	ldr	r3, [r3, r1]
 800d4e0:	22c0      	movs	r2, #192	; 0xc0
 800d4e2:	0112      	lsls	r2, r2, #4
 800d4e4:	0011      	movs	r1, r2
 800d4e6:	0018      	movs	r0, r3
 800d4e8:	f7ff ff26 	bl	800d338 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800d4ec:	193b      	adds	r3, r7, r4
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	0018      	movs	r0, r3
 800d4f2:	f007 f949 	bl	8014788 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800d4f6:	193b      	adds	r3, r7, r4
 800d4f8:	781a      	ldrb	r2, [r3, #0]
 800d4fa:	4917      	ldr	r1, [pc, #92]	; (800d558 <CAD_Init+0x1bc>)
 800d4fc:	0013      	movs	r3, r2
 800d4fe:	011b      	lsls	r3, r3, #4
 800d500:	1a9b      	subs	r3, r3, r2
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	585b      	ldr	r3, [r3, r1]
 800d506:	0018      	movs	r0, r3
 800d508:	f7ff fef2 	bl	800d2f0 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 800d50c:	193b      	adds	r3, r7, r4
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	0018      	movs	r0, r3
 800d512:	f001 fdc1 	bl	800f098 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 800d516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d518:	4a10      	ldr	r2, [pc, #64]	; (800d55c <CAD_Init+0x1c0>)
 800d51a:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 800d51c:	193b      	adds	r3, r7, r4
 800d51e:	781a      	ldrb	r2, [r3, #0]
 800d520:	490d      	ldr	r1, [pc, #52]	; (800d558 <CAD_Init+0x1bc>)
 800d522:	0013      	movs	r3, r2
 800d524:	011b      	lsls	r3, r3, #4
 800d526:	1a9b      	subs	r3, r3, r2
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	18cb      	adds	r3, r1, r3
 800d52c:	330c      	adds	r3, #12
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	795b      	ldrb	r3, [r3, #5]
 800d532:	06db      	lsls	r3, r3, #27
 800d534:	0fdb      	lsrs	r3, r3, #31
 800d536:	b2da      	uxtb	r2, r3
 800d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53a:	01d0      	lsls	r0, r2, #7
 800d53c:	785a      	ldrb	r2, [r3, #1]
 800d53e:	217f      	movs	r1, #127	; 0x7f
 800d540:	400a      	ands	r2, r1
 800d542:	1c11      	adds	r1, r2, #0
 800d544:	1c02      	adds	r2, r0, #0
 800d546:	430a      	orrs	r2, r1
 800d548:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800d54a:	46c0      	nop			; (mov r8, r8)
 800d54c:	46bd      	mov	sp, r7
 800d54e:	b00b      	add	sp, #44	; 0x2c
 800d550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d552:	46c0      	nop			; (mov r8, r8)
 800d554:	200003dc 	.word	0x200003dc
 800d558:	200003f4 	.word	0x200003f4
 800d55c:	0800d65d 	.word	0x0800d65d

0800d560 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	0002      	movs	r2, r0
 800d568:	1dfb      	adds	r3, r7, #7
 800d56a:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800d56c:	1dfb      	adds	r3, r7, #7
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	0018      	movs	r0, r3
 800d572:	f001 fe41 	bl	800f1f8 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800d576:	1dfb      	adds	r3, r7, #7
 800d578:	7819      	ldrb	r1, [r3, #0]
 800d57a:	4a0c      	ldr	r2, [pc, #48]	; (800d5ac <CAD_Enter_ErrorRecovery+0x4c>)
 800d57c:	000b      	movs	r3, r1
 800d57e:	005b      	lsls	r3, r3, #1
 800d580:	185b      	adds	r3, r3, r1
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	5c99      	ldrb	r1, [r3, r2]
 800d586:	2080      	movs	r0, #128	; 0x80
 800d588:	4240      	negs	r0, r0
 800d58a:	4301      	orrs	r1, r0
 800d58c:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800d58e:	1dfb      	adds	r3, r7, #7
 800d590:	781a      	ldrb	r2, [r3, #0]
 800d592:	4907      	ldr	r1, [pc, #28]	; (800d5b0 <CAD_Enter_ErrorRecovery+0x50>)
 800d594:	0013      	movs	r3, r2
 800d596:	011b      	lsls	r3, r3, #4
 800d598:	1a9b      	subs	r3, r3, r2
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	18cb      	adds	r3, r1, r3
 800d59e:	332c      	adds	r3, #44	; 0x2c
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4798      	blx	r3
}
 800d5a4:	46c0      	nop			; (mov r8, r8)
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	b002      	add	sp, #8
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	200003dc 	.word	0x200003dc
 800d5b0:	200003f4 	.word	0x200003f4

0800d5b4 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	0002      	movs	r2, r0
 800d5bc:	6039      	str	r1, [r7, #0]
 800d5be:	1dfb      	adds	r3, r7, #7
 800d5c0:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 800d5c2:	1dfb      	adds	r3, r7, #7
 800d5c4:	781a      	ldrb	r2, [r3, #0]
 800d5c6:	4919      	ldr	r1, [pc, #100]	; (800d62c <CAD_SRC_Set_ResistorRp+0x78>)
 800d5c8:	0013      	movs	r3, r2
 800d5ca:	011b      	lsls	r3, r3, #4
 800d5cc:	1a9b      	subs	r3, r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	18cb      	adds	r3, r1, r3
 800d5d2:	3310      	adds	r3, #16
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	1c11      	adds	r1, r2, #0
 800d5da:	2203      	movs	r2, #3
 800d5dc:	400a      	ands	r2, r1
 800d5de:	b2d2      	uxtb	r2, r2
 800d5e0:	2103      	movs	r1, #3
 800d5e2:	400a      	ands	r2, r1
 800d5e4:	0010      	movs	r0, r2
 800d5e6:	789a      	ldrb	r2, [r3, #2]
 800d5e8:	2103      	movs	r1, #3
 800d5ea:	438a      	bics	r2, r1
 800d5ec:	1c11      	adds	r1, r2, #0
 800d5ee:	1c02      	adds	r2, r0, #0
 800d5f0:	430a      	orrs	r2, r1
 800d5f2:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 800d5f4:	1dfb      	adds	r3, r7, #7
 800d5f6:	781a      	ldrb	r2, [r3, #0]
 800d5f8:	490d      	ldr	r1, [pc, #52]	; (800d630 <CAD_SRC_Set_ResistorRp+0x7c>)
 800d5fa:	0013      	movs	r3, r2
 800d5fc:	005b      	lsls	r3, r3, #1
 800d5fe:	189b      	adds	r3, r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	18cb      	adds	r3, r1, r3
 800d604:	785a      	ldrb	r2, [r3, #1]
 800d606:	2101      	movs	r1, #1
 800d608:	430a      	orrs	r2, r1
 800d60a:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800d60c:	1dfb      	adds	r3, r7, #7
 800d60e:	781a      	ldrb	r2, [r3, #0]
 800d610:	4906      	ldr	r1, [pc, #24]	; (800d62c <CAD_SRC_Set_ResistorRp+0x78>)
 800d612:	0013      	movs	r3, r2
 800d614:	011b      	lsls	r3, r3, #4
 800d616:	1a9b      	subs	r3, r3, r2
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	18cb      	adds	r3, r1, r3
 800d61c:	332c      	adds	r3, #44	; 0x2c
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4798      	blx	r3
  return 0;
 800d622:	2300      	movs	r3, #0
}
 800d624:	0018      	movs	r0, r3
 800d626:	46bd      	mov	sp, r7
 800d628:	b002      	add	sp, #8
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	200003f4 	.word	0x200003f4
 800d630:	200003dc 	.word	0x200003dc

0800d634 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	0002      	movs	r2, r0
 800d63c:	6039      	str	r1, [r7, #0]
 800d63e:	1dfb      	adds	r3, r7, #7
 800d640:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	1dfb      	adds	r3, r7, #7
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	0011      	movs	r1, r2
 800d64a:	0018      	movs	r0, r3
 800d64c:	f7ff ffb2 	bl	800d5b4 <CAD_SRC_Set_ResistorRp>
 800d650:	0003      	movs	r3, r0
}
 800d652:	0018      	movs	r0, r3
 800d654:	46bd      	mov	sp, r7
 800d656:	b002      	add	sp, #8
 800d658:	bd80      	pop	{r7, pc}
	...

0800d65c <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af00      	add	r7, sp, #0
 800d662:	60b9      	str	r1, [r7, #8]
 800d664:	607a      	str	r2, [r7, #4]
 800d666:	210f      	movs	r1, #15
 800d668:	187b      	adds	r3, r7, r1
 800d66a:	1c02      	adds	r2, r0, #0
 800d66c:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d66e:	187b      	adds	r3, r7, r1
 800d670:	781a      	ldrb	r2, [r3, #0]
 800d672:	0013      	movs	r3, r2
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	189b      	adds	r3, r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4a1b      	ldr	r2, [pc, #108]	; (800d6e8 <CAD_StateMachine_SNK+0x8c>)
 800d67c:	189b      	adds	r3, r3, r2
 800d67e:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800d680:	2302      	movs	r3, #2
 800d682:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	785b      	ldrb	r3, [r3, #1]
 800d688:	069b      	lsls	r3, r3, #26
 800d68a:	0edb      	lsrs	r3, r3, #27
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b03      	cmp	r3, #3
 800d690:	d019      	beq.n	800d6c6 <CAD_StateMachine_SNK+0x6a>
 800d692:	dc23      	bgt.n	800d6dc <CAD_StateMachine_SNK+0x80>
 800d694:	2b01      	cmp	r3, #1
 800d696:	d002      	beq.n	800d69e <CAD_StateMachine_SNK+0x42>
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d009      	beq.n	800d6b0 <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 800d69c:	e01e      	b.n	800d6dc <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 800d69e:	230f      	movs	r3, #15
 800d6a0:	18fb      	adds	r3, r7, r3
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	0018      	movs	r0, r3
 800d6a6:	f000 f9c5 	bl	800da34 <ManageStateDetached_SNK>
 800d6aa:	0003      	movs	r3, r0
 800d6ac:	617b      	str	r3, [r7, #20]
      break;
 800d6ae:	e016      	b.n	800d6de <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	68b9      	ldr	r1, [r7, #8]
 800d6b4:	230f      	movs	r3, #15
 800d6b6:	18fb      	adds	r3, r7, r3
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	0018      	movs	r0, r3
 800d6bc:	f000 fa0c 	bl	800dad8 <ManageStateAttachedWait_SNK>
 800d6c0:	0003      	movs	r3, r0
 800d6c2:	617b      	str	r3, [r7, #20]
      break;
 800d6c4:	e00b      	b.n	800d6de <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	68b9      	ldr	r1, [r7, #8]
 800d6ca:	230f      	movs	r3, #15
 800d6cc:	18fb      	adds	r3, r7, r3
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	0018      	movs	r0, r3
 800d6d2:	f000 fa8f 	bl	800dbf4 <ManageStateAttached_SNK>
 800d6d6:	0003      	movs	r3, r0
 800d6d8:	617b      	str	r3, [r7, #20]
      break;
 800d6da:	e000      	b.n	800d6de <CAD_StateMachine_SNK+0x82>
      break;
 800d6dc:	46c0      	nop			; (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800d6de:	697b      	ldr	r3, [r7, #20]
}
 800d6e0:	0018      	movs	r0, r3
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	b006      	add	sp, #24
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	200003dc 	.word	0x200003dc

0800d6ec <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b089      	sub	sp, #36	; 0x24
 800d6f0:	af02      	add	r7, sp, #8
 800d6f2:	60b9      	str	r1, [r7, #8]
 800d6f4:	607a      	str	r2, [r7, #4]
 800d6f6:	210f      	movs	r1, #15
 800d6f8:	187b      	adds	r3, r7, r1
 800d6fa:	1c02      	adds	r2, r0, #0
 800d6fc:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d6fe:	187b      	adds	r3, r7, r1
 800d700:	781a      	ldrb	r2, [r3, #0]
 800d702:	0013      	movs	r3, r2
 800d704:	005b      	lsls	r3, r3, #1
 800d706:	189b      	adds	r3, r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4a7a      	ldr	r2, [pc, #488]	; (800d8f4 <CAD_StateMachine+0x208>)
 800d70c:	189b      	adds	r3, r3, r2
 800d70e:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800d710:	2302      	movs	r3, #2
 800d712:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	2200      	movs	r2, #0
 800d718:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800d71a:	187b      	adds	r3, r7, r1
 800d71c:	781a      	ldrb	r2, [r3, #0]
 800d71e:	4976      	ldr	r1, [pc, #472]	; (800d8f8 <CAD_StateMachine+0x20c>)
 800d720:	0013      	movs	r3, r2
 800d722:	011b      	lsls	r3, r3, #4
 800d724:	1a9b      	subs	r3, r3, r2
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	18cb      	adds	r3, r1, r3
 800d72a:	3310      	adds	r3, #16
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2210      	movs	r2, #16
 800d732:	4013      	ands	r3, r2
 800d734:	b2db      	uxtb	r3, r3
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <CAD_StateMachine+0x52>
  {
    return _timing;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	e0d6      	b.n	800d8ec <CAD_StateMachine+0x200>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	227f      	movs	r2, #127	; 0x7f
 800d744:	4393      	bics	r3, r2
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d01b      	beq.n	800d784 <CAD_StateMachine+0x98>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	781a      	ldrb	r2, [r3, #0]
 800d750:	217f      	movs	r1, #127	; 0x7f
 800d752:	400a      	ands	r2, r1
 800d754:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	785a      	ldrb	r2, [r3, #1]
 800d75a:	213e      	movs	r1, #62	; 0x3e
 800d75c:	438a      	bics	r2, r1
 800d75e:	1c11      	adds	r1, r2, #0
 800d760:	2218      	movs	r2, #24
 800d762:	430a      	orrs	r2, r1
 800d764:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	785b      	ldrb	r3, [r3, #1]
 800d76a:	069b      	lsls	r3, r3, #26
 800d76c:	0edb      	lsrs	r3, r3, #27
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	001a      	movs	r2, r3
 800d772:	230f      	movs	r3, #15
 800d774:	18fb      	adds	r3, r7, r3
 800d776:	7819      	ldrb	r1, [r3, #0]
 800d778:	2300      	movs	r3, #0
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	2300      	movs	r3, #0
 800d77e:	2005      	movs	r0, #5
 800d780:	f7ff fbe6 	bl	800cf50 <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	785b      	ldrb	r3, [r3, #1]
 800d788:	069b      	lsls	r3, r3, #26
 800d78a:	0edb      	lsrs	r3, r3, #27
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	2b0d      	cmp	r3, #13
 800d790:	d05c      	beq.n	800d84c <CAD_StateMachine+0x160>
 800d792:	dc72      	bgt.n	800d87a <CAD_StateMachine+0x18e>
 800d794:	2b00      	cmp	r3, #0
 800d796:	d002      	beq.n	800d79e <CAD_StateMachine+0xb2>
 800d798:	2b0c      	cmp	r3, #12
 800d79a:	d02b      	beq.n	800d7f4 <CAD_StateMachine+0x108>
 800d79c:	e06d      	b.n	800d87a <CAD_StateMachine+0x18e>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800d79e:	240f      	movs	r4, #15
 800d7a0:	193b      	adds	r3, r7, r4
 800d7a2:	781a      	ldrb	r2, [r3, #0]
 800d7a4:	4954      	ldr	r1, [pc, #336]	; (800d8f8 <CAD_StateMachine+0x20c>)
 800d7a6:	0013      	movs	r3, r2
 800d7a8:	011b      	lsls	r3, r3, #4
 800d7aa:	1a9b      	subs	r3, r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	585b      	ldr	r3, [r3, r1]
 800d7b0:	0018      	movs	r0, r3
 800d7b2:	f7ff fdd5 	bl	800d360 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800d7b6:	193b      	adds	r3, r7, r4
 800d7b8:	781a      	ldrb	r2, [r3, #0]
 800d7ba:	494f      	ldr	r1, [pc, #316]	; (800d8f8 <CAD_StateMachine+0x20c>)
 800d7bc:	0013      	movs	r3, r2
 800d7be:	011b      	lsls	r3, r3, #4
 800d7c0:	1a9b      	subs	r3, r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	585b      	ldr	r3, [r3, r1]
 800d7c6:	0018      	movs	r0, r3
 800d7c8:	f7ff fdd9 	bl	800d37e <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 800d7cc:	193b      	adds	r3, r7, r4
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d106      	bne.n	800d7e2 <CAD_StateMachine+0xf6>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 800d7d4:	2102      	movs	r1, #2
 800d7d6:	2008      	movs	r0, #8
 800d7d8:	f7ff fd1c 	bl	800d214 <__NVIC_SetPriority>
 800d7dc:	2008      	movs	r0, #8
 800d7de:	f7ff fcff 	bl	800d1e0 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	785a      	ldrb	r2, [r3, #1]
 800d7e6:	213e      	movs	r1, #62	; 0x3e
 800d7e8:	438a      	bics	r2, r1
 800d7ea:	1c11      	adds	r1, r2, #0
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	705a      	strb	r2, [r3, #1]
      break;
 800d7f2:	e04f      	b.n	800d894 <CAD_StateMachine+0x1a8>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800d7f4:	240f      	movs	r4, #15
 800d7f6:	193b      	adds	r3, r7, r4
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	0018      	movs	r0, r3
 800d7fc:	f001 fcfc 	bl	800f1f8 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800d800:	193b      	adds	r3, r7, r4
 800d802:	781a      	ldrb	r2, [r3, #0]
 800d804:	493c      	ldr	r1, [pc, #240]	; (800d8f8 <CAD_StateMachine+0x20c>)
 800d806:	0013      	movs	r3, r2
 800d808:	011b      	lsls	r3, r3, #4
 800d80a:	1a9b      	subs	r3, r3, r2
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	18cb      	adds	r3, r1, r3
 800d810:	3334      	adds	r3, #52	; 0x34
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	781a      	ldrb	r2, [r3, #0]
 800d820:	2103      	movs	r1, #3
 800d822:	438a      	bics	r2, r1
 800d824:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	2201      	movs	r2, #1
 800d82a:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800d82c:	f7fb f98c 	bl	8008b48 <HAL_GetTick>
 800d830:	0002      	movs	r2, r0
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800d836:	231a      	movs	r3, #26
 800d838:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	785a      	ldrb	r2, [r3, #1]
 800d83e:	213e      	movs	r1, #62	; 0x3e
 800d840:	438a      	bics	r2, r1
 800d842:	1c11      	adds	r1, r2, #0
 800d844:	221a      	movs	r2, #26
 800d846:	430a      	orrs	r2, r1
 800d848:	705a      	strb	r2, [r3, #1]
      break;
 800d84a:	e023      	b.n	800d894 <CAD_StateMachine+0x1a8>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800d84c:	f7fb f97c 	bl	8008b48 <HAL_GetTick>
 800d850:	0002      	movs	r2, r0
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	1ad3      	subs	r3, r2, r3
 800d858:	2b1a      	cmp	r3, #26
 800d85a:	d91a      	bls.n	800d892 <CAD_StateMachine+0x1a6>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 800d85c:	230f      	movs	r3, #15
 800d85e:	18fb      	adds	r3, r7, r3
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	0018      	movs	r0, r3
 800d864:	f001 fc18 	bl	800f098 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	785a      	ldrb	r2, [r3, #1]
 800d86c:	213e      	movs	r1, #62	; 0x3e
 800d86e:	438a      	bics	r2, r1
 800d870:	1c11      	adds	r1, r2, #0
 800d872:	2202      	movs	r2, #2
 800d874:	430a      	orrs	r2, r1
 800d876:	705a      	strb	r2, [r3, #1]
      }
      break;
 800d878:	e00b      	b.n	800d892 <CAD_StateMachine+0x1a6>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	689b      	ldr	r3, [r3, #8]
 800d87e:	687c      	ldr	r4, [r7, #4]
 800d880:	68b9      	ldr	r1, [r7, #8]
 800d882:	220f      	movs	r2, #15
 800d884:	18ba      	adds	r2, r7, r2
 800d886:	7810      	ldrb	r0, [r2, #0]
 800d888:	0022      	movs	r2, r4
 800d88a:	4798      	blx	r3
 800d88c:	0003      	movs	r3, r0
 800d88e:	617b      	str	r3, [r7, #20]
      break;
 800d890:	e000      	b.n	800d894 <CAD_StateMachine+0x1a8>
      break;
 800d892:	46c0      	nop			; (mov r8, r8)
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	785b      	ldrb	r3, [r3, #1]
 800d898:	069b      	lsls	r3, r3, #26
 800d89a:	0edb      	lsrs	r3, r3, #27
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	789b      	ldrb	r3, [r3, #2]
 800d8a2:	069b      	lsls	r3, r3, #26
 800d8a4:	0edb      	lsrs	r3, r3, #27
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d01e      	beq.n	800d8ea <CAD_StateMachine+0x1fe>
  {
    _handle->pstate = _handle->cstate;
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	785b      	ldrb	r3, [r3, #1]
 800d8b0:	069b      	lsls	r3, r3, #26
 800d8b2:	0edb      	lsrs	r3, r3, #27
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	211f      	movs	r1, #31
 800d8ba:	400a      	ands	r2, r1
 800d8bc:	1890      	adds	r0, r2, r2
 800d8be:	789a      	ldrb	r2, [r3, #2]
 800d8c0:	213e      	movs	r1, #62	; 0x3e
 800d8c2:	438a      	bics	r2, r1
 800d8c4:	1c11      	adds	r1, r2, #0
 800d8c6:	1c02      	adds	r2, r0, #0
 800d8c8:	430a      	orrs	r2, r1
 800d8ca:	709a      	strb	r2, [r3, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	785b      	ldrb	r3, [r3, #1]
 800d8d0:	069b      	lsls	r3, r3, #26
 800d8d2:	0edb      	lsrs	r3, r3, #27
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	001a      	movs	r2, r3
 800d8d8:	230f      	movs	r3, #15
 800d8da:	18fb      	adds	r3, r7, r3
 800d8dc:	7819      	ldrb	r1, [r3, #0]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	2005      	movs	r0, #5
 800d8e6:	f7ff fb33 	bl	800cf50 <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800d8ea:	697b      	ldr	r3, [r7, #20]
}
 800d8ec:	0018      	movs	r0, r3
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	b007      	add	sp, #28
 800d8f2:	bd90      	pop	{r4, r7, pc}
 800d8f4:	200003dc 	.word	0x200003dc
 800d8f8:	200003f4 	.word	0x200003f4

0800d8fc <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	0002      	movs	r2, r0
 800d904:	1dfb      	adds	r3, r7, #7
 800d906:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d908:	1dfb      	adds	r3, r7, #7
 800d90a:	781a      	ldrb	r2, [r3, #0]
 800d90c:	0013      	movs	r3, r2
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	189b      	adds	r3, r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	4a45      	ldr	r2, [pc, #276]	; (800da2c <CAD_Check_HW_SNK+0x130>)
 800d916:	189b      	adds	r3, r3, r2
 800d918:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 800d91a:	1dfb      	adds	r3, r7, #7
 800d91c:	781a      	ldrb	r2, [r3, #0]
 800d91e:	4944      	ldr	r1, [pc, #272]	; (800da30 <CAD_Check_HW_SNK+0x134>)
 800d920:	0013      	movs	r3, r2
 800d922:	011b      	lsls	r3, r3, #4
 800d924:	1a9b      	subs	r3, r3, r2
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	585b      	ldr	r3, [r3, r1]
 800d92a:	695a      	ldr	r2, [r3, #20]
 800d92c:	23c0      	movs	r3, #192	; 0xc0
 800d92e:	029b      	lsls	r3, r3, #10
 800d930:	4013      	ands	r3, r2
 800d932:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 800d934:	1dfb      	adds	r3, r7, #7
 800d936:	781a      	ldrb	r2, [r3, #0]
 800d938:	493d      	ldr	r1, [pc, #244]	; (800da30 <CAD_Check_HW_SNK+0x134>)
 800d93a:	0013      	movs	r3, r2
 800d93c:	011b      	lsls	r3, r3, #4
 800d93e:	1a9b      	subs	r3, r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	585b      	ldr	r3, [r3, r1]
 800d944:	695a      	ldr	r2, [r3, #20]
 800d946:	23c0      	movs	r3, #192	; 0xc0
 800d948:	031b      	lsls	r3, r3, #12
 800d94a:	4013      	ands	r3, r2
 800d94c:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	781a      	ldrb	r2, [r3, #0]
 800d952:	2103      	movs	r1, #3
 800d954:	438a      	bics	r2, r1
 800d956:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	781a      	ldrb	r2, [r3, #0]
 800d95c:	211c      	movs	r1, #28
 800d95e:	438a      	bics	r2, r1
 800d960:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d02c      	beq.n	800d9c2 <CAD_Check_HW_SNK+0xc6>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d129      	bne.n	800d9c2 <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	781a      	ldrb	r2, [r3, #0]
 800d972:	211c      	movs	r1, #28
 800d974:	438a      	bics	r2, r1
 800d976:	1c11      	adds	r1, r2, #0
 800d978:	2204      	movs	r2, #4
 800d97a:	430a      	orrs	r2, r1
 800d97c:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	781a      	ldrb	r2, [r3, #0]
 800d982:	2103      	movs	r1, #3
 800d984:	438a      	bics	r2, r1
 800d986:	1c11      	adds	r1, r2, #0
 800d988:	2201      	movs	r2, #1
 800d98a:	430a      	orrs	r2, r1
 800d98c:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	0c18      	lsrs	r0, r3, #16
 800d992:	1dfb      	adds	r3, r7, #7
 800d994:	781a      	ldrb	r2, [r3, #0]
 800d996:	4926      	ldr	r1, [pc, #152]	; (800da30 <CAD_Check_HW_SNK+0x134>)
 800d998:	0013      	movs	r3, r2
 800d99a:	011b      	lsls	r3, r3, #4
 800d99c:	1a9b      	subs	r3, r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	18cb      	adds	r3, r1, r3
 800d9a2:	3310      	adds	r3, #16
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	1c01      	adds	r1, r0, #0
 800d9a8:	2203      	movs	r2, #3
 800d9aa:	400a      	ands	r2, r1
 800d9ac:	b2d2      	uxtb	r2, r2
 800d9ae:	2103      	movs	r1, #3
 800d9b0:	400a      	ands	r2, r1
 800d9b2:	0090      	lsls	r0, r2, #2
 800d9b4:	789a      	ldrb	r2, [r3, #2]
 800d9b6:	210c      	movs	r1, #12
 800d9b8:	438a      	bics	r2, r1
 800d9ba:	1c11      	adds	r1, r2, #0
 800d9bc:	1c02      	adds	r2, r0, #0
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d12c      	bne.n	800da22 <CAD_Check_HW_SNK+0x126>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d029      	beq.n	800da22 <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	781a      	ldrb	r2, [r3, #0]
 800d9d2:	211c      	movs	r1, #28
 800d9d4:	438a      	bics	r2, r1
 800d9d6:	1c11      	adds	r1, r2, #0
 800d9d8:	2204      	movs	r2, #4
 800d9da:	430a      	orrs	r2, r1
 800d9dc:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	781a      	ldrb	r2, [r3, #0]
 800d9e2:	2103      	movs	r1, #3
 800d9e4:	438a      	bics	r2, r1
 800d9e6:	1c11      	adds	r1, r2, #0
 800d9e8:	2202      	movs	r2, #2
 800d9ea:	430a      	orrs	r2, r1
 800d9ec:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	0c98      	lsrs	r0, r3, #18
 800d9f2:	1dfb      	adds	r3, r7, #7
 800d9f4:	781a      	ldrb	r2, [r3, #0]
 800d9f6:	490e      	ldr	r1, [pc, #56]	; (800da30 <CAD_Check_HW_SNK+0x134>)
 800d9f8:	0013      	movs	r3, r2
 800d9fa:	011b      	lsls	r3, r3, #4
 800d9fc:	1a9b      	subs	r3, r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	18cb      	adds	r3, r1, r3
 800da02:	3310      	adds	r3, #16
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	1c01      	adds	r1, r0, #0
 800da08:	2203      	movs	r2, #3
 800da0a:	400a      	ands	r2, r1
 800da0c:	b2d2      	uxtb	r2, r2
 800da0e:	2103      	movs	r1, #3
 800da10:	400a      	ands	r2, r1
 800da12:	0090      	lsls	r0, r2, #2
 800da14:	789a      	ldrb	r2, [r3, #2]
 800da16:	210c      	movs	r1, #12
 800da18:	438a      	bics	r2, r1
 800da1a:	1c11      	adds	r1, r2, #0
 800da1c:	1c02      	adds	r2, r0, #0
 800da1e:	430a      	orrs	r2, r1
 800da20:	709a      	strb	r2, [r3, #2]
  }
}
 800da22:	46c0      	nop			; (mov r8, r8)
 800da24:	46bd      	mov	sp, r7
 800da26:	b006      	add	sp, #24
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	46c0      	nop			; (mov r8, r8)
 800da2c:	200003dc 	.word	0x200003dc
 800da30:	200003f4 	.word	0x200003f4

0800da34 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	0002      	movs	r2, r0
 800da3c:	1dfb      	adds	r3, r7, #7
 800da3e:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800da40:	1dfb      	adds	r3, r7, #7
 800da42:	781a      	ldrb	r2, [r3, #0]
 800da44:	0013      	movs	r3, r2
 800da46:	005b      	lsls	r3, r3, #1
 800da48:	189b      	adds	r3, r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4a21      	ldr	r2, [pc, #132]	; (800dad4 <ManageStateDetached_SNK+0xa0>)
 800da4e:	189b      	adds	r3, r3, r2
 800da50:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800da52:	2302      	movs	r3, #2
 800da54:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 800da56:	1dfb      	adds	r3, r7, #7
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	0018      	movs	r0, r3
 800da5c:	f7ff ff4e 	bl	800d8fc <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	221c      	movs	r2, #28
 800da66:	4013      	ands	r3, r2
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d103      	bne.n	800da76 <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800da6e:	2301      	movs	r3, #1
 800da70:	425b      	negs	r3, r3
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	e029      	b.n	800daca <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 800da76:	f7fb f867 	bl	8008b48 <HAL_GetTick>
 800da7a:	0002      	movs	r2, r0
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	785a      	ldrb	r2, [r3, #1]
 800da84:	213e      	movs	r1, #62	; 0x3e
 800da86:	438a      	bics	r2, r1
 800da88:	1c11      	adds	r1, r2, #0
 800da8a:	2204      	movs	r2, #4
 800da8c:	430a      	orrs	r2, r1
 800da8e:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 800da90:	2001      	movs	r0, #1
 800da92:	f7fb f863 	bl	8008b5c <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 800da96:	1dfb      	adds	r3, r7, #7
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	0018      	movs	r0, r3
 800da9c:	f7ff ff2e 	bl	800d8fc <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	221c      	movs	r2, #28
 800daa6:	4013      	ands	r3, r2
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d108      	bne.n	800dac0 <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	785a      	ldrb	r2, [r3, #1]
 800dab2:	213e      	movs	r1, #62	; 0x3e
 800dab4:	438a      	bics	r2, r1
 800dab6:	1c11      	adds	r1, r2, #0
 800dab8:	2202      	movs	r2, #2
 800daba:	430a      	orrs	r2, r1
 800dabc:	705a      	strb	r2, [r3, #1]
 800dabe:	e004      	b.n	800daca <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800dac0:	1dfb      	adds	r3, r7, #7
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	0018      	movs	r0, r3
 800dac6:	f006 fe71 	bl	80147ac <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800daca:	68fb      	ldr	r3, [r7, #12]
}
 800dacc:	0018      	movs	r0, r3
 800dace:	46bd      	mov	sp, r7
 800dad0:	b004      	add	sp, #16
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	200003dc 	.word	0x200003dc

0800dad8 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800dad8:	b590      	push	{r4, r7, lr}
 800dada:	b089      	sub	sp, #36	; 0x24
 800dadc:	af00      	add	r7, sp, #0
 800dade:	60b9      	str	r1, [r7, #8]
 800dae0:	607a      	str	r2, [r7, #4]
 800dae2:	240f      	movs	r4, #15
 800dae4:	193b      	adds	r3, r7, r4
 800dae6:	1c02      	adds	r2, r0, #0
 800dae8:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800daea:	193b      	adds	r3, r7, r4
 800daec:	781a      	ldrb	r2, [r3, #0]
 800daee:	0013      	movs	r3, r2
 800daf0:	005b      	lsls	r3, r3, #1
 800daf2:	189b      	adds	r3, r3, r2
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4a3e      	ldr	r2, [pc, #248]	; (800dbf0 <ManageStateAttachedWait_SNK+0x118>)
 800daf8:	189b      	adds	r3, r3, r2
 800dafa:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800dafc:	2302      	movs	r3, #2
 800dafe:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800db00:	f7fb f822 	bl	8008b48 <HAL_GetTick>
 800db04:	0002      	movs	r2, r0
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	1ad3      	subs	r3, r2, r3
 800db0c:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 800db0e:	193b      	adds	r3, r7, r4
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	0018      	movs	r0, r3
 800db14:	f7ff fef2 	bl	800d8fc <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	221c      	movs	r2, #28
 800db1e:	4013      	ands	r3, r2
 800db20:	b2db      	uxtb	r3, r3
 800db22:	2b04      	cmp	r3, #4
 800db24:	d130      	bne.n	800db88 <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	2b78      	cmp	r3, #120	; 0x78
 800db2a:	d927      	bls.n	800db7c <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 800db2c:	193b      	adds	r3, r7, r4
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	2101      	movs	r1, #1
 800db32:	0018      	movs	r0, r3
 800db34:	f005 fb74 	bl	8013220 <USBPD_PWR_IF_GetVBUSStatus>
 800db38:	0003      	movs	r3, r0
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d11e      	bne.n	800db7c <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	079b      	lsls	r3, r3, #30
 800db44:	0f9b      	lsrs	r3, r3, #30
 800db46:	b2db      	uxtb	r3, r3
 800db48:	001a      	movs	r2, r3
 800db4a:	193b      	adds	r3, r7, r4
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	0011      	movs	r1, r2
 800db50:	0018      	movs	r0, r3
 800db52:	f001 fbf3 	bl	800f33c <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	785a      	ldrb	r2, [r3, #1]
 800db5a:	213e      	movs	r1, #62	; 0x3e
 800db5c:	438a      	bics	r2, r1
 800db5e:	1c11      	adds	r1, r2, #0
 800db60:	2206      	movs	r2, #6
 800db62:	430a      	orrs	r2, r1
 800db64:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	2202      	movs	r2, #2
 800db6a:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	079b      	lsls	r3, r3, #30
 800db72:	0f9b      	lsrs	r3, r3, #30
 800db74:	b2db      	uxtb	r3, r3
 800db76:	001a      	movs	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	781a      	ldrb	r2, [r3, #0]
 800db80:	2120      	movs	r1, #32
 800db82:	438a      	bics	r2, r1
 800db84:	701a      	strb	r2, [r3, #0]
 800db86:	e02e      	b.n	800dbe6 <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2220      	movs	r2, #32
 800db8e:	4013      	ands	r3, r2
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10c      	bne.n	800dbb0 <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800db96:	f7fa ffd7 	bl	8008b48 <HAL_GetTick>
 800db9a:	0002      	movs	r2, r0
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	781a      	ldrb	r2, [r3, #0]
 800dba4:	2120      	movs	r1, #32
 800dba6:	430a      	orrs	r2, r1
 800dba8:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 800dbaa:	230c      	movs	r3, #12
 800dbac:	61fb      	str	r3, [r7, #28]
 800dbae:	e01a      	b.n	800dbe6 <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 800dbb0:	f7fa ffca 	bl	8008b48 <HAL_GetTick>
 800dbb4:	0002      	movs	r2, r0
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	1ad3      	subs	r3, r2, r3
 800dbbc:	2b0c      	cmp	r3, #12
 800dbbe:	d912      	bls.n	800dbe6 <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	781a      	ldrb	r2, [r3, #0]
 800dbc4:	2120      	movs	r1, #32
 800dbc6:	438a      	bics	r2, r1
 800dbc8:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	785a      	ldrb	r2, [r3, #1]
 800dbce:	213e      	movs	r1, #62	; 0x3e
 800dbd0:	438a      	bics	r2, r1
 800dbd2:	1c11      	adds	r1, r2, #0
 800dbd4:	2202      	movs	r2, #2
 800dbd6:	430a      	orrs	r2, r1
 800dbd8:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800dbda:	230f      	movs	r3, #15
 800dbdc:	18fb      	adds	r3, r7, r3
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	0018      	movs	r0, r3
 800dbe2:	f006 fe01 	bl	80147e8 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 800dbe6:	69fb      	ldr	r3, [r7, #28]
}
 800dbe8:	0018      	movs	r0, r3
 800dbea:	46bd      	mov	sp, r7
 800dbec:	b009      	add	sp, #36	; 0x24
 800dbee:	bd90      	pop	{r4, r7, pc}
 800dbf0:	200003dc 	.word	0x200003dc

0800dbf4 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b089      	sub	sp, #36	; 0x24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60b9      	str	r1, [r7, #8]
 800dbfc:	607a      	str	r2, [r7, #4]
 800dbfe:	210f      	movs	r1, #15
 800dc00:	187b      	adds	r3, r7, r1
 800dc02:	1c02      	adds	r2, r0, #0
 800dc04:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800dc06:	0008      	movs	r0, r1
 800dc08:	183b      	adds	r3, r7, r0
 800dc0a:	781a      	ldrb	r2, [r3, #0]
 800dc0c:	0013      	movs	r3, r2
 800dc0e:	005b      	lsls	r3, r3, #1
 800dc10:	189b      	adds	r3, r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4a2e      	ldr	r2, [pc, #184]	; (800dcd0 <ManageStateAttached_SNK+0xdc>)
 800dc16:	189b      	adds	r3, r3, r2
 800dc18:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800dc22:	183b      	adds	r3, r7, r0
 800dc24:	781a      	ldrb	r2, [r3, #0]
 800dc26:	492b      	ldr	r1, [pc, #172]	; (800dcd4 <ManageStateAttached_SNK+0xe0>)
 800dc28:	0013      	movs	r3, r2
 800dc2a:	011b      	lsls	r3, r3, #4
 800dc2c:	1a9b      	subs	r3, r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	18cb      	adds	r3, r1, r3
 800dc32:	3334      	adds	r3, #52	; 0x34
 800dc34:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d10c      	bne.n	800dc54 <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800dc3a:	183b      	adds	r3, r7, r0
 800dc3c:	781a      	ldrb	r2, [r3, #0]
 800dc3e:	4925      	ldr	r1, [pc, #148]	; (800dcd4 <ManageStateAttached_SNK+0xe0>)
 800dc40:	0013      	movs	r3, r2
 800dc42:	011b      	lsls	r3, r3, #4
 800dc44:	1a9b      	subs	r3, r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	585b      	ldr	r3, [r3, r1]
 800dc4a:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800dc4c:	23c0      	movs	r3, #192	; 0xc0
 800dc4e:	029b      	lsls	r3, r3, #10
 800dc50:	4013      	ands	r3, r2
 800dc52:	e00c      	b.n	800dc6e <ManageStateAttached_SNK+0x7a>
 800dc54:	230f      	movs	r3, #15
 800dc56:	18fb      	adds	r3, r7, r3
 800dc58:	781a      	ldrb	r2, [r3, #0]
 800dc5a:	491e      	ldr	r1, [pc, #120]	; (800dcd4 <ManageStateAttached_SNK+0xe0>)
 800dc5c:	0013      	movs	r3, r2
 800dc5e:	011b      	lsls	r3, r3, #4
 800dc60:	1a9b      	subs	r3, r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	585b      	ldr	r3, [r3, r1]
 800dc66:	695a      	ldr	r2, [r3, #20]
 800dc68:	23c0      	movs	r3, #192	; 0xc0
 800dc6a:	031b      	lsls	r3, r3, #12
 800dc6c:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800dc6e:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 800dc70:	240f      	movs	r4, #15
 800dc72:	193b      	adds	r3, r7, r4
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	2102      	movs	r1, #2
 800dc78:	0018      	movs	r0, r3
 800dc7a:	f005 fad1 	bl	8013220 <USBPD_PWR_IF_GetVBUSStatus>
 800dc7e:	0003      	movs	r3, r0
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d11e      	bne.n	800dcc2 <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 800dc84:	697a      	ldr	r2, [r7, #20]
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d11a      	bne.n	800dcc2 <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 800dc8c:	193b      	adds	r3, r7, r4
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	0018      	movs	r0, r3
 800dc92:	f001 fcb5 	bl	800f600 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	781a      	ldrb	r2, [r3, #0]
 800dc9a:	211c      	movs	r1, #28
 800dc9c:	438a      	bics	r2, r1
 800dc9e:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	785a      	ldrb	r2, [r3, #1]
 800dca4:	213e      	movs	r1, #62	; 0x3e
 800dca6:	438a      	bics	r2, r1
 800dca8:	1c11      	adds	r1, r2, #0
 800dcaa:	2202      	movs	r2, #2
 800dcac:	430a      	orrs	r2, r1
 800dcae:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	601a      	str	r2, [r3, #0]
    _timing = 0;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	61fb      	str	r3, [r7, #28]
 800dcc0:	e001      	b.n	800dcc6 <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 800dcc2:	230a      	movs	r3, #10
 800dcc4:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800dcc6:	69fb      	ldr	r3, [r7, #28]
}
 800dcc8:	0018      	movs	r0, r3
 800dcca:	46bd      	mov	sp, r7
 800dccc:	b009      	add	sp, #36	; 0x24
 800dcce:	bd90      	pop	{r4, r7, pc}
 800dcd0:	200003dc 	.word	0x200003dc
 800dcd4:	200003f4 	.word	0x200003f4

0800dcd8 <LL_AHB1_GRP1_EnableClock>:
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800dce0:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <LL_AHB1_GRP1_EnableClock+0x28>)
 800dce2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800dce4:	4b06      	ldr	r3, [pc, #24]	; (800dd00 <LL_AHB1_GRP1_EnableClock+0x28>)
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	430a      	orrs	r2, r1
 800dcea:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800dcec:	4b04      	ldr	r3, [pc, #16]	; (800dd00 <LL_AHB1_GRP1_EnableClock+0x28>)
 800dcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	4013      	ands	r3, r2
 800dcf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
}
 800dcf8:	46c0      	nop			; (mov r8, r8)
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	b004      	add	sp, #16
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	40021000 	.word	0x40021000

0800dd04 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	0002      	movs	r2, r0
 800dd0c:	1dfb      	adds	r3, r7, #7
 800dd0e:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 800dd10:	4b02      	ldr	r3, [pc, #8]	; (800dd1c <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 800dd12:	0018      	movs	r0, r3
 800dd14:	46bd      	mov	sp, r7
 800dd16:	b002      	add	sp, #8
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	46c0      	nop			; (mov r8, r8)
 800dd1c:	4000a000 	.word	0x4000a000

0800dd20 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800dd20:	b590      	push	{r4, r7, lr}
 800dd22:	b08f      	sub	sp, #60	; 0x3c
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	0002      	movs	r2, r0
 800dd28:	1dfb      	adds	r3, r7, #7
 800dd2a:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800dd2c:	240c      	movs	r4, #12
 800dd2e:	193b      	adds	r3, r7, r4
 800dd30:	0018      	movs	r0, r3
 800dd32:	f7fe fbdb 	bl	800c4ec <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800dd36:	193b      	adds	r3, r7, r4
 800dd38:	2200      	movs	r2, #0
 800dd3a:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800dd3c:	193b      	adds	r3, r7, r4
 800dd3e:	2200      	movs	r2, #0
 800dd40:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800dd42:	193b      	adds	r3, r7, r4
 800dd44:	2200      	movs	r2, #0
 800dd46:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800dd48:	193b      	adds	r3, r7, r4
 800dd4a:	2280      	movs	r2, #128	; 0x80
 800dd4c:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800dd4e:	193b      	adds	r3, r7, r4
 800dd50:	2200      	movs	r2, #0
 800dd52:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800dd54:	193b      	adds	r3, r7, r4
 800dd56:	2200      	movs	r2, #0
 800dd58:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800dd5a:	193b      	adds	r3, r7, r4
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800dd60:	193b      	adds	r3, r7, r4
 800dd62:	2200      	movs	r2, #0
 800dd64:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800dd66:	193b      	adds	r3, r7, r4
 800dd68:	2200      	movs	r2, #0
 800dd6a:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800dd6c:	193b      	adds	r3, r7, r4
 800dd6e:	2280      	movs	r2, #128	; 0x80
 800dd70:	0192      	lsls	r2, r2, #6
 800dd72:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 800dd74:	1dfb      	adds	r3, r7, #7
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10c      	bne.n	800dd96 <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800dd7c:	2001      	movs	r0, #1
 800dd7e:	f7ff ffab 	bl	800dcd8 <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800dd82:	193b      	adds	r3, r7, r4
 800dd84:	223a      	movs	r2, #58	; 0x3a
 800dd86:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800dd88:	193b      	adds	r3, r7, r4
 800dd8a:	4806      	ldr	r0, [pc, #24]	; (800dda4 <USBPD_HW_Init_DMARxInstance+0x84>)
 800dd8c:	001a      	movs	r2, r3
 800dd8e:	2100      	movs	r1, #0
 800dd90:	f7fe fb6c 	bl	800c46c <LL_DMA_Init>
      break;
 800dd94:	e000      	b.n	800dd98 <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800dd96:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 800dd98:	4b03      	ldr	r3, [pc, #12]	; (800dda8 <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800dd9a:	0018      	movs	r0, r3
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	b00f      	add	sp, #60	; 0x3c
 800dda0:	bd90      	pop	{r4, r7, pc}
 800dda2:	46c0      	nop			; (mov r8, r8)
 800dda4:	40020000 	.word	0x40020000
 800dda8:	40020008 	.word	0x40020008

0800ddac <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	0002      	movs	r2, r0
 800ddb4:	1dfb      	adds	r3, r7, #7
 800ddb6:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800ddb8:	46c0      	nop			; (mov r8, r8)
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	b002      	add	sp, #8
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800ddc0:	b590      	push	{r4, r7, lr}
 800ddc2:	b08f      	sub	sp, #60	; 0x3c
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	0002      	movs	r2, r0
 800ddc8:	1dfb      	adds	r3, r7, #7
 800ddca:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800ddcc:	240c      	movs	r4, #12
 800ddce:	193b      	adds	r3, r7, r4
 800ddd0:	0018      	movs	r0, r3
 800ddd2:	f7fe fb8b 	bl	800c4ec <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800ddd6:	193b      	adds	r3, r7, r4
 800ddd8:	2210      	movs	r2, #16
 800ddda:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800dddc:	193b      	adds	r3, r7, r4
 800ddde:	2200      	movs	r2, #0
 800dde0:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800dde2:	193b      	adds	r3, r7, r4
 800dde4:	2200      	movs	r2, #0
 800dde6:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800dde8:	193b      	adds	r3, r7, r4
 800ddea:	2280      	movs	r2, #128	; 0x80
 800ddec:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800ddee:	193b      	adds	r3, r7, r4
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800ddf4:	193b      	adds	r3, r7, r4
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800ddfa:	193b      	adds	r3, r7, r4
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800de00:	193b      	adds	r3, r7, r4
 800de02:	2200      	movs	r2, #0
 800de04:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800de06:	193b      	adds	r3, r7, r4
 800de08:	2200      	movs	r2, #0
 800de0a:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 800de0c:	1dfb      	adds	r3, r7, #7
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d110      	bne.n	800de36 <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800de14:	2001      	movs	r0, #1
 800de16:	f7ff ff5f 	bl	800dcd8 <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800de1a:	193b      	adds	r3, r7, r4
 800de1c:	223b      	movs	r2, #59	; 0x3b
 800de1e:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800de20:	193b      	adds	r3, r7, r4
 800de22:	2280      	movs	r2, #128	; 0x80
 800de24:	0152      	lsls	r2, r2, #5
 800de26:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800de28:	193b      	adds	r3, r7, r4
 800de2a:	4806      	ldr	r0, [pc, #24]	; (800de44 <USBPD_HW_Init_DMATxInstance+0x84>)
 800de2c:	001a      	movs	r2, r3
 800de2e:	2101      	movs	r1, #1
 800de30:	f7fe fb1c 	bl	800c46c <LL_DMA_Init>
      break;
 800de34:	e000      	b.n	800de38 <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800de36:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 800de38:	4b03      	ldr	r3, [pc, #12]	; (800de48 <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800de3a:	0018      	movs	r0, r3
 800de3c:	46bd      	mov	sp, r7
 800de3e:	b00f      	add	sp, #60	; 0x3c
 800de40:	bd90      	pop	{r4, r7, pc}
 800de42:	46c0      	nop			; (mov r8, r8)
 800de44:	40020000 	.word	0x40020000
 800de48:	4002001c 	.word	0x4002001c

0800de4c <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	0002      	movs	r2, r0
 800de54:	1dfb      	adds	r3, r7, #7
 800de56:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800de58:	46c0      	nop			; (mov r8, r8)
 800de5a:	46bd      	mov	sp, r7
 800de5c:	b002      	add	sp, #8
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	0002      	movs	r2, r0
 800de68:	1dfb      	adds	r3, r7, #7
 800de6a:	701a      	strb	r2, [r3, #0]
 800de6c:	1dbb      	adds	r3, r7, #6
 800de6e:	1c0a      	adds	r2, r1, #0
 800de70:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800de72:	46c0      	nop			; (mov r8, r8)
  }
}
 800de74:	46c0      	nop			; (mov r8, r8)
 800de76:	46bd      	mov	sp, r7
 800de78:	b002      	add	sp, #8
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	699b      	ldr	r3, [r3, #24]
 800de88:	2280      	movs	r2, #128	; 0x80
 800de8a:	0212      	lsls	r2, r2, #8
 800de8c:	431a      	orrs	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	619a      	str	r2, [r3, #24]
}
 800de92:	46c0      	nop			; (mov r8, r8)
 800de94:	46bd      	mov	sp, r7
 800de96:	b002      	add	sp, #8
 800de98:	bd80      	pop	{r7, pc}

0800de9a <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b082      	sub	sp, #8
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	2280      	movs	r2, #128	; 0x80
 800dea8:	01d2      	lsls	r2, r2, #7
 800deaa:	431a      	orrs	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	619a      	str	r2, [r3, #24]
}
 800deb0:	46c0      	nop			; (mov r8, r8)
 800deb2:	46bd      	mov	sp, r7
 800deb4:	b002      	add	sp, #8
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	699b      	ldr	r3, [r3, #24]
 800dec4:	2280      	movs	r2, #128	; 0x80
 800dec6:	0152      	lsls	r2, r2, #5
 800dec8:	431a      	orrs	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	619a      	str	r2, [r3, #24]
}
 800dece:	46c0      	nop			; (mov r8, r8)
 800ded0:	46bd      	mov	sp, r7
 800ded2:	b002      	add	sp, #8
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b082      	sub	sp, #8
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	2280      	movs	r2, #128	; 0x80
 800dee4:	0112      	lsls	r2, r2, #4
 800dee6:	431a      	orrs	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	619a      	str	r2, [r3, #24]
}
 800deec:	46c0      	nop			; (mov r8, r8)
 800deee:	46bd      	mov	sp, r7
 800def0:	b002      	add	sp, #8
 800def2:	bd80      	pop	{r7, pc}

0800def4 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	2280      	movs	r2, #128	; 0x80
 800df02:	00d2      	lsls	r2, r2, #3
 800df04:	431a      	orrs	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	619a      	str	r2, [r3, #24]
}
 800df0a:	46c0      	nop			; (mov r8, r8)
 800df0c:	46bd      	mov	sp, r7
 800df0e:	b002      	add	sp, #8
 800df10:	bd80      	pop	{r7, pc}

0800df12 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b082      	sub	sp, #8
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	699b      	ldr	r3, [r3, #24]
 800df1e:	2280      	movs	r2, #128	; 0x80
 800df20:	0092      	lsls	r2, r2, #2
 800df22:	431a      	orrs	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	619a      	str	r2, [r3, #24]
}
 800df28:	46c0      	nop			; (mov r8, r8)
 800df2a:	46bd      	mov	sp, r7
 800df2c:	b002      	add	sp, #8
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	2240      	movs	r2, #64	; 0x40
 800df3e:	431a      	orrs	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	619a      	str	r2, [r3, #24]
}
 800df44:	46c0      	nop			; (mov r8, r8)
 800df46:	46bd      	mov	sp, r7
 800df48:	b002      	add	sp, #8
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	699b      	ldr	r3, [r3, #24]
 800df58:	2220      	movs	r2, #32
 800df5a:	431a      	orrs	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	619a      	str	r2, [r3, #24]
}
 800df60:	46c0      	nop			; (mov r8, r8)
 800df62:	46bd      	mov	sp, r7
 800df64:	b002      	add	sp, #8
 800df66:	bd80      	pop	{r7, pc}

0800df68 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	699b      	ldr	r3, [r3, #24]
 800df74:	2210      	movs	r2, #16
 800df76:	431a      	orrs	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	619a      	str	r2, [r3, #24]
}
 800df7c:	46c0      	nop			; (mov r8, r8)
 800df7e:	46bd      	mov	sp, r7
 800df80:	b002      	add	sp, #8
 800df82:	bd80      	pop	{r7, pc}

0800df84 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	699b      	ldr	r3, [r3, #24]
 800df90:	2208      	movs	r2, #8
 800df92:	431a      	orrs	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	619a      	str	r2, [r3, #24]
}
 800df98:	46c0      	nop			; (mov r8, r8)
 800df9a:	46bd      	mov	sp, r7
 800df9c:	b002      	add	sp, #8
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	2204      	movs	r2, #4
 800dfae:	431a      	orrs	r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	619a      	str	r2, [r3, #24]
}
 800dfb4:	46c0      	nop			; (mov r8, r8)
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	b002      	add	sp, #8
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	2202      	movs	r2, #2
 800dfca:	431a      	orrs	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	619a      	str	r2, [r3, #24]
}
 800dfd0:	46c0      	nop			; (mov r8, r8)
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	b002      	add	sp, #8
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800dfdc:	2000      	movs	r0, #0
 800dfde:	f000 f803 	bl	800dfe8 <PORTx_IRQHandler>
}
 800dfe2:	46c0      	nop			; (mov r8, r8)
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	0002      	movs	r2, r0
 800dff0:	1dfb      	adds	r3, r7, #7
 800dff2:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800dff4:	1dfb      	adds	r3, r7, #7
 800dff6:	781a      	ldrb	r2, [r3, #0]
 800dff8:	49a6      	ldr	r1, [pc, #664]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800dffa:	0013      	movs	r3, r2
 800dffc:	011b      	lsls	r3, r3, #4
 800dffe:	1a9b      	subs	r3, r3, r2
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	585b      	ldr	r3, [r3, r1]
 800e004:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	695b      	ldr	r3, [r3, #20]
 800e00a:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	4013      	ands	r3, r2
 800e014:	d100      	bne.n	800e018 <PORTx_IRQHandler+0x30>
 800e016:	e1fc      	b.n	800e412 <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	2202      	movs	r2, #2
 800e01c:	4013      	ands	r3, r2
 800e01e:	d03c      	beq.n	800e09a <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	0018      	movs	r0, r3
 800e024:	f7ff ffca 	bl	800dfbc <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e028:	1dfb      	adds	r3, r7, #7
 800e02a:	781a      	ldrb	r2, [r3, #0]
 800e02c:	4999      	ldr	r1, [pc, #612]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e02e:	0013      	movs	r3, r2
 800e030:	011b      	lsls	r3, r3, #4
 800e032:	1a9b      	subs	r3, r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	18cb      	adds	r3, r1, r3
 800e038:	3304      	adds	r3, #4
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	6819      	ldr	r1, [r3, #0]
 800e03e:	1dfb      	adds	r3, r7, #7
 800e040:	781a      	ldrb	r2, [r3, #0]
 800e042:	4894      	ldr	r0, [pc, #592]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e044:	0013      	movs	r3, r2
 800e046:	011b      	lsls	r3, r3, #4
 800e048:	1a9b      	subs	r3, r3, r2
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	18c3      	adds	r3, r0, r3
 800e04e:	3304      	adds	r3, #4
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2201      	movs	r2, #1
 800e054:	4391      	bics	r1, r2
 800e056:	000a      	movs	r2, r1
 800e058:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800e05a:	46c0      	nop			; (mov r8, r8)
 800e05c:	1dfb      	adds	r3, r7, #7
 800e05e:	781a      	ldrb	r2, [r3, #0]
 800e060:	498c      	ldr	r1, [pc, #560]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e062:	0013      	movs	r3, r2
 800e064:	011b      	lsls	r3, r3, #4
 800e066:	1a9b      	subs	r3, r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	18cb      	adds	r3, r1, r3
 800e06c:	3304      	adds	r3, #4
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2201      	movs	r2, #1
 800e074:	4013      	ands	r3, r2
 800e076:	2b01      	cmp	r3, #1
 800e078:	d0f0      	beq.n	800e05c <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800e07a:	1dfb      	adds	r3, r7, #7
 800e07c:	781a      	ldrb	r2, [r3, #0]
 800e07e:	4985      	ldr	r1, [pc, #532]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e080:	0013      	movs	r3, r2
 800e082:	011b      	lsls	r3, r3, #4
 800e084:	1a9b      	subs	r3, r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	18cb      	adds	r3, r1, r3
 800e08a:	3314      	adds	r3, #20
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	1dfa      	adds	r2, r7, #7
 800e090:	7812      	ldrb	r2, [r2, #0]
 800e092:	2101      	movs	r1, #1
 800e094:	0010      	movs	r0, r2
 800e096:	4798      	blx	r3
      return;
 800e098:	e1bb      	b.n	800e412 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2204      	movs	r2, #4
 800e09e:	4013      	ands	r3, r2
 800e0a0:	d03c      	beq.n	800e11c <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	0018      	movs	r0, r3
 800e0a6:	f7ff ff7b 	bl	800dfa0 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e0aa:	1dfb      	adds	r3, r7, #7
 800e0ac:	781a      	ldrb	r2, [r3, #0]
 800e0ae:	4979      	ldr	r1, [pc, #484]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e0b0:	0013      	movs	r3, r2
 800e0b2:	011b      	lsls	r3, r3, #4
 800e0b4:	1a9b      	subs	r3, r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	18cb      	adds	r3, r1, r3
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	6819      	ldr	r1, [r3, #0]
 800e0c0:	1dfb      	adds	r3, r7, #7
 800e0c2:	781a      	ldrb	r2, [r3, #0]
 800e0c4:	4873      	ldr	r0, [pc, #460]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e0c6:	0013      	movs	r3, r2
 800e0c8:	011b      	lsls	r3, r3, #4
 800e0ca:	1a9b      	subs	r3, r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	18c3      	adds	r3, r0, r3
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	4391      	bics	r1, r2
 800e0d8:	000a      	movs	r2, r1
 800e0da:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800e0dc:	46c0      	nop			; (mov r8, r8)
 800e0de:	1dfb      	adds	r3, r7, #7
 800e0e0:	781a      	ldrb	r2, [r3, #0]
 800e0e2:	496c      	ldr	r1, [pc, #432]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e0e4:	0013      	movs	r3, r2
 800e0e6:	011b      	lsls	r3, r3, #4
 800e0e8:	1a9b      	subs	r3, r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	18cb      	adds	r3, r1, r3
 800e0ee:	3304      	adds	r3, #4
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	4013      	ands	r3, r2
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d0f0      	beq.n	800e0de <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800e0fc:	1dfb      	adds	r3, r7, #7
 800e0fe:	781a      	ldrb	r2, [r3, #0]
 800e100:	4964      	ldr	r1, [pc, #400]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e102:	0013      	movs	r3, r2
 800e104:	011b      	lsls	r3, r3, #4
 800e106:	1a9b      	subs	r3, r3, r2
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	18cb      	adds	r3, r1, r3
 800e10c:	3314      	adds	r3, #20
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	1dfa      	adds	r2, r7, #7
 800e112:	7812      	ldrb	r2, [r2, #0]
 800e114:	2100      	movs	r1, #0
 800e116:	0010      	movs	r0, r2
 800e118:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 800e11a:	e17a      	b.n	800e412 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	2208      	movs	r2, #8
 800e120:	4013      	ands	r3, r2
 800e122:	d03c      	beq.n	800e19e <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	0018      	movs	r0, r3
 800e128:	f7ff ff2c 	bl	800df84 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800e12c:	1dfb      	adds	r3, r7, #7
 800e12e:	781a      	ldrb	r2, [r3, #0]
 800e130:	4958      	ldr	r1, [pc, #352]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e132:	0013      	movs	r3, r2
 800e134:	011b      	lsls	r3, r3, #4
 800e136:	1a9b      	subs	r3, r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	18cb      	adds	r3, r1, r3
 800e13c:	3304      	adds	r3, #4
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6819      	ldr	r1, [r3, #0]
 800e142:	1dfb      	adds	r3, r7, #7
 800e144:	781a      	ldrb	r2, [r3, #0]
 800e146:	4853      	ldr	r0, [pc, #332]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e148:	0013      	movs	r3, r2
 800e14a:	011b      	lsls	r3, r3, #4
 800e14c:	1a9b      	subs	r3, r3, r2
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	18c3      	adds	r3, r0, r3
 800e152:	3304      	adds	r3, #4
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2201      	movs	r2, #1
 800e158:	4391      	bics	r1, r2
 800e15a:	000a      	movs	r2, r1
 800e15c:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 800e15e:	46c0      	nop			; (mov r8, r8)
 800e160:	1dfb      	adds	r3, r7, #7
 800e162:	781a      	ldrb	r2, [r3, #0]
 800e164:	494b      	ldr	r1, [pc, #300]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e166:	0013      	movs	r3, r2
 800e168:	011b      	lsls	r3, r3, #4
 800e16a:	1a9b      	subs	r3, r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	18cb      	adds	r3, r1, r3
 800e170:	3304      	adds	r3, #4
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2201      	movs	r2, #1
 800e178:	4013      	ands	r3, r2
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d0f0      	beq.n	800e160 <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800e17e:	1dfb      	adds	r3, r7, #7
 800e180:	781a      	ldrb	r2, [r3, #0]
 800e182:	4944      	ldr	r1, [pc, #272]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e184:	0013      	movs	r3, r2
 800e186:	011b      	lsls	r3, r3, #4
 800e188:	1a9b      	subs	r3, r3, r2
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	18cb      	adds	r3, r1, r3
 800e18e:	3314      	adds	r3, #20
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	1dfa      	adds	r2, r7, #7
 800e194:	7812      	ldrb	r2, [r2, #0]
 800e196:	2102      	movs	r1, #2
 800e198:	0010      	movs	r0, r2
 800e19a:	4798      	blx	r3
      return;
 800e19c:	e139      	b.n	800e412 <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	2210      	movs	r2, #16
 800e1a2:	4013      	ands	r3, r2
 800e1a4:	d004      	beq.n	800e1b0 <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	0018      	movs	r0, r3
 800e1aa:	f7ff fedd 	bl	800df68 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800e1ae:	e130      	b.n	800e412 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2220      	movs	r2, #32
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	d013      	beq.n	800e1e0 <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	0018      	movs	r0, r3
 800e1bc:	f7ff fec6 	bl	800df4c <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800e1c0:	1dfb      	adds	r3, r7, #7
 800e1c2:	781a      	ldrb	r2, [r3, #0]
 800e1c4:	4933      	ldr	r1, [pc, #204]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e1c6:	0013      	movs	r3, r2
 800e1c8:	011b      	lsls	r3, r3, #4
 800e1ca:	1a9b      	subs	r3, r3, r2
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	18cb      	adds	r3, r1, r3
 800e1d0:	3324      	adds	r3, #36	; 0x24
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	1dfa      	adds	r2, r7, #7
 800e1d6:	7812      	ldrb	r2, [r2, #0]
 800e1d8:	2105      	movs	r1, #5
 800e1da:	0010      	movs	r0, r2
 800e1dc:	4798      	blx	r3
      return;
 800e1de:	e118      	b.n	800e412 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	2240      	movs	r2, #64	; 0x40
 800e1e4:	4013      	ands	r3, r2
 800e1e6:	d004      	beq.n	800e1f2 <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	f7ff fea0 	bl	800df30 <LL_UCPD_ClearFlag_TxUND>
      return;
 800e1f0:	e10f      	b.n	800e412 <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800e1f2:	68ba      	ldr	r2, [r7, #8]
 800e1f4:	2380      	movs	r3, #128	; 0x80
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4013      	ands	r3, r2
 800e1fa:	d023      	beq.n	800e244 <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e200:	2b05      	cmp	r3, #5
 800e202:	d10e      	bne.n	800e222 <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800e204:	1dfb      	adds	r3, r7, #7
 800e206:	781a      	ldrb	r2, [r3, #0]
 800e208:	4922      	ldr	r1, [pc, #136]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e20a:	0013      	movs	r3, r2
 800e20c:	011b      	lsls	r3, r3, #4
 800e20e:	1a9b      	subs	r3, r3, r2
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	18cb      	adds	r3, r1, r3
 800e214:	331c      	adds	r3, #28
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	1dfa      	adds	r2, r7, #7
 800e21a:	7812      	ldrb	r2, [r2, #0]
 800e21c:	2106      	movs	r1, #6
 800e21e:	0010      	movs	r0, r2
 800e220:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	0018      	movs	r0, r3
 800e226:	f7ff fe74 	bl	800df12 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 800e22a:	1dfb      	adds	r3, r7, #7
 800e22c:	781a      	ldrb	r2, [r3, #0]
 800e22e:	4919      	ldr	r1, [pc, #100]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e230:	2038      	movs	r0, #56	; 0x38
 800e232:	0013      	movs	r3, r2
 800e234:	011b      	lsls	r3, r3, #4
 800e236:	1a9b      	subs	r3, r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	18cb      	adds	r3, r1, r3
 800e23c:	181b      	adds	r3, r3, r0
 800e23e:	2201      	movs	r2, #1
 800e240:	701a      	strb	r2, [r3, #0]
      return;
 800e242:	e0e6      	b.n	800e412 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	2380      	movs	r3, #128	; 0x80
 800e248:	00db      	lsls	r3, r3, #3
 800e24a:	4013      	ands	r3, r2
 800e24c:	d013      	beq.n	800e276 <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800e24e:	1dfb      	adds	r3, r7, #7
 800e250:	781a      	ldrb	r2, [r3, #0]
 800e252:	4910      	ldr	r1, [pc, #64]	; (800e294 <PORTx_IRQHandler+0x2ac>)
 800e254:	0013      	movs	r3, r2
 800e256:	011b      	lsls	r3, r3, #4
 800e258:	1a9b      	subs	r3, r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	18cb      	adds	r3, r1, r3
 800e25e:	331c      	adds	r3, #28
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	1dfa      	adds	r2, r7, #7
 800e264:	7812      	ldrb	r2, [r2, #0]
 800e266:	2105      	movs	r1, #5
 800e268:	0010      	movs	r0, r2
 800e26a:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	0018      	movs	r0, r3
 800e270:	f7ff fe40 	bl	800def4 <LL_UCPD_ClearFlag_RxHRST>
      return;
 800e274:	e0cd      	b.n	800e412 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	2380      	movs	r3, #128	; 0x80
 800e27a:	011b      	lsls	r3, r3, #4
 800e27c:	4013      	ands	r3, r2
 800e27e:	d00d      	beq.n	800e29c <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 800e280:	1dfb      	adds	r3, r7, #7
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	4a04      	ldr	r2, [pc, #16]	; (800e298 <PORTx_IRQHandler+0x2b0>)
 800e286:	2101      	movs	r1, #1
 800e288:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	0018      	movs	r0, r3
 800e28e:	f7ff fe22 	bl	800ded6 <LL_UCPD_ClearFlag_RxOvr>
      return;
 800e292:	e0be      	b.n	800e412 <PORTx_IRQHandler+0x42a>
 800e294:	200003f4 	.word	0x200003f4
 800e298:	200003e8 	.word	0x200003e8
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	2380      	movs	r3, #128	; 0x80
 800e2a0:	015b      	lsls	r3, r3, #5
 800e2a2:	4013      	ands	r3, r2
 800e2a4:	d100      	bne.n	800e2a8 <PORTx_IRQHandler+0x2c0>
 800e2a6:	e096      	b.n	800e3d6 <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 800e2a8:	1dfb      	adds	r3, r7, #7
 800e2aa:	781a      	ldrb	r2, [r3, #0]
 800e2ac:	495a      	ldr	r1, [pc, #360]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e2ae:	2038      	movs	r0, #56	; 0x38
 800e2b0:	0013      	movs	r3, r2
 800e2b2:	011b      	lsls	r3, r3, #4
 800e2b4:	1a9b      	subs	r3, r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	18cb      	adds	r3, r1, r3
 800e2ba:	181b      	adds	r3, r3, r0
 800e2bc:	2200      	movs	r2, #0
 800e2be:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	0018      	movs	r0, r3
 800e2c4:	f7ff fdf8 	bl	800deb8 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800e2c8:	1dfb      	adds	r3, r7, #7
 800e2ca:	781a      	ldrb	r2, [r3, #0]
 800e2cc:	4952      	ldr	r1, [pc, #328]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e2ce:	0013      	movs	r3, r2
 800e2d0:	011b      	lsls	r3, r3, #4
 800e2d2:	1a9b      	subs	r3, r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	18cb      	adds	r3, r1, r3
 800e2d8:	3308      	adds	r3, #8
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6819      	ldr	r1, [r3, #0]
 800e2de:	1dfb      	adds	r3, r7, #7
 800e2e0:	781a      	ldrb	r2, [r3, #0]
 800e2e2:	484d      	ldr	r0, [pc, #308]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e2e4:	0013      	movs	r3, r2
 800e2e6:	011b      	lsls	r3, r3, #4
 800e2e8:	1a9b      	subs	r3, r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	18c3      	adds	r3, r0, r3
 800e2ee:	3308      	adds	r3, #8
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	4391      	bics	r1, r2
 800e2f6:	000a      	movs	r2, r1
 800e2f8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800e2fa:	46c0      	nop			; (mov r8, r8)
 800e2fc:	1dfb      	adds	r3, r7, #7
 800e2fe:	781a      	ldrb	r2, [r3, #0]
 800e300:	4945      	ldr	r1, [pc, #276]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e302:	0013      	movs	r3, r2
 800e304:	011b      	lsls	r3, r3, #4
 800e306:	1a9b      	subs	r3, r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	18cb      	adds	r3, r1, r3
 800e30c:	3308      	adds	r3, #8
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2201      	movs	r2, #1
 800e314:	4013      	ands	r3, r2
 800e316:	2b01      	cmp	r3, #1
 800e318:	d0f0      	beq.n	800e2fc <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800e31a:	1dfb      	adds	r3, r7, #7
 800e31c:	781a      	ldrb	r2, [r3, #0]
 800e31e:	493e      	ldr	r1, [pc, #248]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e320:	0013      	movs	r3, r2
 800e322:	011b      	lsls	r3, r3, #4
 800e324:	1a9b      	subs	r3, r3, r2
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	18cb      	adds	r3, r1, r3
 800e32a:	3330      	adds	r3, #48	; 0x30
 800e32c:	6818      	ldr	r0, [r3, #0]
 800e32e:	1dfb      	adds	r3, r7, #7
 800e330:	781a      	ldrb	r2, [r3, #0]
 800e332:	4939      	ldr	r1, [pc, #228]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e334:	0013      	movs	r3, r2
 800e336:	011b      	lsls	r3, r3, #4
 800e338:	1a9b      	subs	r3, r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	18cb      	adds	r3, r1, r3
 800e33e:	3308      	adds	r3, #8
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	0002      	movs	r2, r0
 800e344:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800e346:	1dfb      	adds	r3, r7, #7
 800e348:	781a      	ldrb	r2, [r3, #0]
 800e34a:	4933      	ldr	r1, [pc, #204]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e34c:	0013      	movs	r3, r2
 800e34e:	011b      	lsls	r3, r3, #4
 800e350:	1a9b      	subs	r3, r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	18cb      	adds	r3, r1, r3
 800e356:	3308      	adds	r3, #8
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2284      	movs	r2, #132	; 0x84
 800e35c:	0052      	lsls	r2, r2, #1
 800e35e:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800e360:	1dfb      	adds	r3, r7, #7
 800e362:	781a      	ldrb	r2, [r3, #0]
 800e364:	492c      	ldr	r1, [pc, #176]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e366:	0013      	movs	r3, r2
 800e368:	011b      	lsls	r3, r3, #4
 800e36a:	1a9b      	subs	r3, r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	18cb      	adds	r3, r1, r3
 800e370:	3308      	adds	r3, #8
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6819      	ldr	r1, [r3, #0]
 800e376:	1dfb      	adds	r3, r7, #7
 800e378:	781a      	ldrb	r2, [r3, #0]
 800e37a:	4827      	ldr	r0, [pc, #156]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e37c:	0013      	movs	r3, r2
 800e37e:	011b      	lsls	r3, r3, #4
 800e380:	1a9b      	subs	r3, r3, r2
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	18c3      	adds	r3, r0, r3
 800e386:	3308      	adds	r3, #8
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2201      	movs	r2, #1
 800e38c:	430a      	orrs	r2, r1
 800e38e:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	2380      	movs	r3, #128	; 0x80
 800e394:	019b      	lsls	r3, r3, #6
 800e396:	4013      	ands	r3, r2
 800e398:	d117      	bne.n	800e3ca <PORTx_IRQHandler+0x3e2>
 800e39a:	1dfb      	adds	r3, r7, #7
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	4a1f      	ldr	r2, [pc, #124]	; (800e41c <PORTx_IRQHandler+0x434>)
 800e3a0:	5cd3      	ldrb	r3, [r2, r3]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d111      	bne.n	800e3ca <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800e3a6:	1dfb      	adds	r3, r7, #7
 800e3a8:	781a      	ldrb	r2, [r3, #0]
 800e3aa:	491b      	ldr	r1, [pc, #108]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e3ac:	0013      	movs	r3, r2
 800e3ae:	011b      	lsls	r3, r3, #4
 800e3b0:	1a9b      	subs	r3, r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	18cb      	adds	r3, r1, r3
 800e3b6:	3320      	adds	r3, #32
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3be:	2107      	movs	r1, #7
 800e3c0:	4019      	ands	r1, r3
 800e3c2:	1dfb      	adds	r3, r7, #7
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	0018      	movs	r0, r3
 800e3c8:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 800e3ca:	1dfb      	adds	r3, r7, #7
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	4a13      	ldr	r2, [pc, #76]	; (800e41c <PORTx_IRQHandler+0x434>)
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	54d1      	strb	r1, [r2, r3]
      return;
 800e3d4:	e01d      	b.n	800e412 <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800e3d6:	68ba      	ldr	r2, [r7, #8]
 800e3d8:	2380      	movs	r3, #128	; 0x80
 800e3da:	01db      	lsls	r3, r3, #7
 800e3dc:	4013      	ands	r3, r2
 800e3de:	d104      	bne.n	800e3ea <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	2380      	movs	r3, #128	; 0x80
 800e3e4:	021b      	lsls	r3, r3, #8
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	d013      	beq.n	800e412 <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	0018      	movs	r0, r3
 800e3ee:	f7ff fd54 	bl	800de9a <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	0018      	movs	r0, r3
 800e3f6:	f7ff fd41 	bl	800de7c <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800e3fa:	1dfb      	adds	r3, r7, #7
 800e3fc:	781a      	ldrb	r2, [r3, #0]
 800e3fe:	4906      	ldr	r1, [pc, #24]	; (800e418 <PORTx_IRQHandler+0x430>)
 800e400:	0013      	movs	r3, r2
 800e402:	011b      	lsls	r3, r3, #4
 800e404:	1a9b      	subs	r3, r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	18cb      	adds	r3, r1, r3
 800e40a:	332c      	adds	r3, #44	; 0x2c
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800e410:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 800e412:	46bd      	mov	sp, r7
 800e414:	b004      	add	sp, #16
 800e416:	bd80      	pop	{r7, pc}
 800e418:	200003f4 	.word	0x200003f4
 800e41c:	200003e8 	.word	0x200003e8

0800e420 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800e420:	b590      	push	{r4, r7, lr}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	60b9      	str	r1, [r7, #8]
 800e428:	607a      	str	r2, [r7, #4]
 800e42a:	603b      	str	r3, [r7, #0]
 800e42c:	240f      	movs	r4, #15
 800e42e:	193b      	adds	r3, r7, r4
 800e430:	1c02      	adds	r2, r0, #0
 800e432:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800e434:	193b      	adds	r3, r7, r4
 800e436:	781a      	ldrb	r2, [r3, #0]
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	6919      	ldr	r1, [r3, #16]
 800e43c:	4830      	ldr	r0, [pc, #192]	; (800e500 <USBPD_PHY_Init+0xe0>)
 800e43e:	0013      	movs	r3, r2
 800e440:	011b      	lsls	r3, r3, #4
 800e442:	1a9b      	subs	r3, r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	18c3      	adds	r3, r0, r3
 800e448:	3314      	adds	r3, #20
 800e44a:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800e44c:	193b      	adds	r3, r7, r4
 800e44e:	781a      	ldrb	r2, [r3, #0]
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	68d9      	ldr	r1, [r3, #12]
 800e454:	482a      	ldr	r0, [pc, #168]	; (800e500 <USBPD_PHY_Init+0xe0>)
 800e456:	0013      	movs	r3, r2
 800e458:	011b      	lsls	r3, r3, #4
 800e45a:	1a9b      	subs	r3, r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	18c3      	adds	r3, r0, r3
 800e460:	3318      	adds	r3, #24
 800e462:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800e464:	193b      	adds	r3, r7, r4
 800e466:	781a      	ldrb	r2, [r3, #0]
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	6859      	ldr	r1, [r3, #4]
 800e46c:	4824      	ldr	r0, [pc, #144]	; (800e500 <USBPD_PHY_Init+0xe0>)
 800e46e:	0013      	movs	r3, r2
 800e470:	011b      	lsls	r3, r3, #4
 800e472:	1a9b      	subs	r3, r3, r2
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	18c3      	adds	r3, r0, r3
 800e478:	331c      	adds	r3, #28
 800e47a:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800e47c:	193b      	adds	r3, r7, r4
 800e47e:	781a      	ldrb	r2, [r3, #0]
 800e480:	491f      	ldr	r1, [pc, #124]	; (800e500 <USBPD_PHY_Init+0xe0>)
 800e482:	0013      	movs	r3, r2
 800e484:	011b      	lsls	r3, r3, #4
 800e486:	1a9b      	subs	r3, r3, r2
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	18cb      	adds	r3, r1, r3
 800e48c:	3320      	adds	r3, #32
 800e48e:	4a1d      	ldr	r2, [pc, #116]	; (800e504 <USBPD_PHY_Init+0xe4>)
 800e490:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800e492:	193b      	adds	r3, r7, r4
 800e494:	781a      	ldrb	r2, [r3, #0]
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	6899      	ldr	r1, [r3, #8]
 800e49a:	4819      	ldr	r0, [pc, #100]	; (800e500 <USBPD_PHY_Init+0xe0>)
 800e49c:	0013      	movs	r3, r2
 800e49e:	011b      	lsls	r3, r3, #4
 800e4a0:	1a9b      	subs	r3, r3, r2
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	18c3      	adds	r3, r0, r3
 800e4a6:	3324      	adds	r3, #36	; 0x24
 800e4a8:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800e4aa:	193b      	adds	r3, r7, r4
 800e4ac:	781a      	ldrb	r2, [r3, #0]
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	6959      	ldr	r1, [r3, #20]
 800e4b2:	4813      	ldr	r0, [pc, #76]	; (800e500 <USBPD_PHY_Init+0xe0>)
 800e4b4:	0013      	movs	r3, r2
 800e4b6:	011b      	lsls	r3, r3, #4
 800e4b8:	1a9b      	subs	r3, r3, r2
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	18c3      	adds	r3, r0, r3
 800e4be:	3328      	adds	r3, #40	; 0x28
 800e4c0:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800e4c2:	193b      	adds	r3, r7, r4
 800e4c4:	781a      	ldrb	r2, [r3, #0]
 800e4c6:	490e      	ldr	r1, [pc, #56]	; (800e500 <USBPD_PHY_Init+0xe0>)
 800e4c8:	0013      	movs	r3, r2
 800e4ca:	011b      	lsls	r3, r3, #4
 800e4cc:	1a9b      	subs	r3, r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	18cb      	adds	r3, r1, r3
 800e4d2:	3330      	adds	r3, #48	; 0x30
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800e4d8:	193b      	adds	r3, r7, r4
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	4a0a      	ldr	r2, [pc, #40]	; (800e508 <USBPD_PHY_Init+0xe8>)
 800e4de:	00db      	lsls	r3, r3, #3
 800e4e0:	18d3      	adds	r3, r2, r3
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	6a3a      	ldr	r2, [r7, #32]
 800e4e6:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800e4e8:	193b      	adds	r3, r7, r4
 800e4ea:	781a      	ldrb	r2, [r3, #0]
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	6819      	ldr	r1, [r3, #0]
 800e4f0:	4b05      	ldr	r3, [pc, #20]	; (800e508 <USBPD_PHY_Init+0xe8>)
 800e4f2:	00d2      	lsls	r2, r2, #3
 800e4f4:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	0018      	movs	r0, r3
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	b005      	add	sp, #20
 800e4fe:	bd90      	pop	{r4, r7, pc}
 800e500:	200003f4 	.word	0x200003f4
 800e504:	0800e6f1 	.word	0x0800e6f1
 800e508:	200003ec 	.word	0x200003ec

0800e50c <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	0002      	movs	r2, r0
 800e514:	1dfb      	adds	r3, r7, #7
 800e516:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 800e518:	4b02      	ldr	r3, [pc, #8]	; (800e524 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 800e51a:	0018      	movs	r0, r3
 800e51c:	46bd      	mov	sp, r7
 800e51e:	b002      	add	sp, #8
 800e520:	bd80      	pop	{r7, pc}
 800e522:	46c0      	nop			; (mov r8, r8)
 800e524:	00000389 	.word	0x00000389

0800e528 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	0002      	movs	r2, r0
 800e530:	1dfb      	adds	r3, r7, #7
 800e532:	701a      	strb	r2, [r3, #0]
  return 30u;
 800e534:	231e      	movs	r3, #30
}
 800e536:	0018      	movs	r0, r3
 800e538:	46bd      	mov	sp, r7
 800e53a:	b002      	add	sp, #8
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b082      	sub	sp, #8
 800e542:	af00      	add	r7, sp, #0
 800e544:	0002      	movs	r2, r0
 800e546:	1dfb      	adds	r3, r7, #7
 800e548:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 800e54a:	46c0      	nop			; (mov r8, r8)
 800e54c:	46bd      	mov	sp, r7
 800e54e:	b002      	add	sp, #8
 800e550:	bd80      	pop	{r7, pc}

0800e552 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b082      	sub	sp, #8
 800e556:	af00      	add	r7, sp, #0
 800e558:	0002      	movs	r2, r0
 800e55a:	1dfb      	adds	r3, r7, #7
 800e55c:	701a      	strb	r2, [r3, #0]
 800e55e:	1dbb      	adds	r3, r7, #6
 800e560:	1c0a      	adds	r2, r1, #0
 800e562:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800e564:	1dbb      	adds	r3, r7, #6
 800e566:	7819      	ldrb	r1, [r3, #0]
 800e568:	1dfb      	adds	r3, r7, #7
 800e56a:	7818      	ldrb	r0, [r3, #0]
 800e56c:	2300      	movs	r3, #0
 800e56e:	2200      	movs	r2, #0
 800e570:	f000 f805 	bl	800e57e <USBPD_PHY_SendMessage>
 800e574:	0003      	movs	r3, r0
}
 800e576:	0018      	movs	r0, r3
 800e578:	46bd      	mov	sp, r7
 800e57a:	b002      	add	sp, #8
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800e57e:	b590      	push	{r4, r7, lr}
 800e580:	b083      	sub	sp, #12
 800e582:	af00      	add	r7, sp, #0
 800e584:	0004      	movs	r4, r0
 800e586:	0008      	movs	r0, r1
 800e588:	603a      	str	r2, [r7, #0]
 800e58a:	0019      	movs	r1, r3
 800e58c:	1dfb      	adds	r3, r7, #7
 800e58e:	1c22      	adds	r2, r4, #0
 800e590:	701a      	strb	r2, [r3, #0]
 800e592:	1dbb      	adds	r3, r7, #6
 800e594:	1c02      	adds	r2, r0, #0
 800e596:	701a      	strb	r2, [r3, #0]
 800e598:	1d3b      	adds	r3, r7, #4
 800e59a:	1c0a      	adds	r2, r1, #0
 800e59c:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800e59e:	1d3b      	adds	r3, r7, #4
 800e5a0:	881c      	ldrh	r4, [r3, #0]
 800e5a2:	683a      	ldr	r2, [r7, #0]
 800e5a4:	1dbb      	adds	r3, r7, #6
 800e5a6:	7819      	ldrb	r1, [r3, #0]
 800e5a8:	1dfb      	adds	r3, r7, #7
 800e5aa:	7818      	ldrb	r0, [r3, #0]
 800e5ac:	0023      	movs	r3, r4
 800e5ae:	f000 fb2f 	bl	800ec10 <USBPD_HW_IF_SendBuffer>
 800e5b2:	0003      	movs	r3, r0
}
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	b003      	add	sp, #12
 800e5ba:	bd90      	pop	{r4, r7, pc}

0800e5bc <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	0002      	movs	r2, r0
 800e5c4:	1dfb      	adds	r3, r7, #7
 800e5c6:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800e5c8:	1dfb      	adds	r3, r7, #7
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	0018      	movs	r0, r3
 800e5ce:	f000 fc7d 	bl	800eecc <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800e5d2:	2300      	movs	r3, #0
}
 800e5d4:	0018      	movs	r0, r3
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	b002      	add	sp, #8
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	0002      	movs	r2, r0
 800e5e4:	1dfb      	adds	r3, r7, #7
 800e5e6:	701a      	strb	r2, [r3, #0]
 800e5e8:	1dbb      	adds	r3, r7, #6
 800e5ea:	1c0a      	adds	r2, r1, #0
 800e5ec:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800e5ee:	1dbb      	adds	r3, r7, #6
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b07      	cmp	r3, #7
 800e5f4:	d104      	bne.n	800e600 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800e5f6:	1dfb      	adds	r3, r7, #7
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	0018      	movs	r0, r3
 800e5fc:	f000 fad0 	bl	800eba0 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	0018      	movs	r0, r3
 800e604:	46bd      	mov	sp, r7
 800e606:	b002      	add	sp, #8
 800e608:	bd80      	pop	{r7, pc}

0800e60a <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b082      	sub	sp, #8
 800e60e:	af00      	add	r7, sp, #0
 800e610:	0002      	movs	r2, r0
 800e612:	1dfb      	adds	r3, r7, #7
 800e614:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 800e616:	1dfb      	adds	r3, r7, #7
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	0018      	movs	r0, r3
 800e61c:	f001 f87e 	bl	800f71c <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 800e620:	46c0      	nop			; (mov r8, r8)
 800e622:	46bd      	mov	sp, r7
 800e624:	b002      	add	sp, #8
 800e626:	bd80      	pop	{r7, pc}

0800e628 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	0002      	movs	r2, r0
 800e630:	1dfb      	adds	r3, r7, #7
 800e632:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 800e634:	1dfb      	adds	r3, r7, #7
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	0018      	movs	r0, r3
 800e63a:	f001 f889 	bl	800f750 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 800e63e:	46c0      	nop			; (mov r8, r8)
 800e640:	46bd      	mov	sp, r7
 800e642:	b002      	add	sp, #8
 800e644:	bd80      	pop	{r7, pc}
	...

0800e648 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	0002      	movs	r2, r0
 800e650:	6039      	str	r1, [r7, #0]
 800e652:	1dfb      	adds	r3, r7, #7
 800e654:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 800e656:	1dfb      	adds	r3, r7, #7
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	4a05      	ldr	r2, [pc, #20]	; (800e670 <USBPD_PHY_SOPSupported+0x28>)
 800e65c:	00db      	lsls	r3, r3, #3
 800e65e:	18d3      	adds	r3, r2, r3
 800e660:	3304      	adds	r3, #4
 800e662:	683a      	ldr	r2, [r7, #0]
 800e664:	601a      	str	r2, [r3, #0]
}
 800e666:	46c0      	nop			; (mov r8, r8)
 800e668:	46bd      	mov	sp, r7
 800e66a:	b002      	add	sp, #8
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	46c0      	nop			; (mov r8, r8)
 800e670:	200003ec 	.word	0x200003ec

0800e674 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	0002      	movs	r2, r0
 800e67c:	1dfb      	adds	r3, r7, #7
 800e67e:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800e680:	1dfb      	adds	r3, r7, #7
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	0018      	movs	r0, r3
 800e686:	f001 f87d 	bl	800f784 <USBPD_HW_IF_IsResistor_SinkTxOk>
 800e68a:	0003      	movs	r3, r0
}
 800e68c:	0018      	movs	r0, r3
 800e68e:	46bd      	mov	sp, r7
 800e690:	b002      	add	sp, #8
 800e692:	bd80      	pop	{r7, pc}

0800e694 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	0002      	movs	r2, r0
 800e69c:	1dfb      	adds	r3, r7, #7
 800e69e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 800e6a0:	1dfb      	adds	r3, r7, #7
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	0018      	movs	r0, r3
 800e6a6:	f001 f8b1 	bl	800f80c <USBPD_HW_IF_FastRoleSwapSignalling>
}
 800e6aa:	46c0      	nop			; (mov r8, r8)
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	b002      	add	sp, #8
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b082      	sub	sp, #8
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	0002      	movs	r2, r0
 800e6ba:	1dfb      	adds	r3, r7, #7
 800e6bc:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 800e6be:	1dfb      	adds	r3, r7, #7
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	0018      	movs	r0, r3
 800e6c4:	f000 fe0a 	bl	800f2dc <USBPD_HW_IF_EnableRX>
}
 800e6c8:	46c0      	nop			; (mov r8, r8)
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	b002      	add	sp, #8
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	0002      	movs	r2, r0
 800e6d8:	1dfb      	adds	r3, r7, #7
 800e6da:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 800e6dc:	1dfb      	adds	r3, r7, #7
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	0018      	movs	r0, r3
 800e6e2:	f000 fe13 	bl	800f30c <USBPD_HW_IF_DisableRX>
}
 800e6e6:	46c0      	nop			; (mov r8, r8)
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	b002      	add	sp, #8
 800e6ec:	bd80      	pop	{r7, pc}
	...

0800e6f0 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800e6f0:	b590      	push	{r4, r7, lr}
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	0002      	movs	r2, r0
 800e6f8:	6039      	str	r1, [r7, #0]
 800e6fa:	1dfb      	adds	r3, r7, #7
 800e6fc:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 800e6fe:	2008      	movs	r0, #8
 800e700:	183b      	adds	r3, r7, r0
 800e702:	4a2e      	ldr	r2, [pc, #184]	; (800e7bc <PHY_Rx_Completed+0xcc>)
 800e704:	6811      	ldr	r1, [r2, #0]
 800e706:	6019      	str	r1, [r3, #0]
 800e708:	8892      	ldrh	r2, [r2, #4]
 800e70a:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800e70c:	240f      	movs	r4, #15
 800e70e:	193b      	adds	r3, r7, r4
 800e710:	1839      	adds	r1, r7, r0
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	188a      	adds	r2, r1, r2
 800e716:	7812      	ldrb	r2, [r2, #0]
 800e718:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800e71a:	193b      	adds	r3, r7, r4
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	2b04      	cmp	r3, #4
 800e720:	dc02      	bgt.n	800e728 <PHY_Rx_Completed+0x38>
 800e722:	2b00      	cmp	r3, #0
 800e724:	da1d      	bge.n	800e762 <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 800e726:	e040      	b.n	800e7aa <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 800e728:	2b06      	cmp	r3, #6
 800e72a:	d13e      	bne.n	800e7aa <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800e72c:	1dfb      	adds	r3, r7, #7
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	4a23      	ldr	r2, [pc, #140]	; (800e7c0 <PHY_Rx_Completed+0xd0>)
 800e732:	00db      	lsls	r3, r3, #3
 800e734:	18d3      	adds	r3, r2, r3
 800e736:	3304      	adds	r3, #4
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	221e      	movs	r2, #30
 800e73c:	4013      	ands	r3, r2
 800e73e:	2b1e      	cmp	r3, #30
 800e740:	d135      	bne.n	800e7ae <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800e742:	1dfb      	adds	r3, r7, #7
 800e744:	781a      	ldrb	r2, [r3, #0]
 800e746:	491f      	ldr	r1, [pc, #124]	; (800e7c4 <PHY_Rx_Completed+0xd4>)
 800e748:	0013      	movs	r3, r2
 800e74a:	011b      	lsls	r3, r3, #4
 800e74c:	1a9b      	subs	r3, r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	18cb      	adds	r3, r1, r3
 800e752:	331c      	adds	r3, #28
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	1dfa      	adds	r2, r7, #7
 800e758:	7812      	ldrb	r2, [r2, #0]
 800e75a:	2106      	movs	r1, #6
 800e75c:	0010      	movs	r0, r2
 800e75e:	4798      	blx	r3
      break;
 800e760:	e025      	b.n	800e7ae <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800e762:	240f      	movs	r4, #15
 800e764:	193b      	adds	r3, r7, r4
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	2201      	movs	r2, #1
 800e76a:	409a      	lsls	r2, r3
 800e76c:	0013      	movs	r3, r2
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	0018      	movs	r0, r3
 800e772:	1dfb      	adds	r3, r7, #7
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	4a12      	ldr	r2, [pc, #72]	; (800e7c0 <PHY_Rx_Completed+0xd0>)
 800e778:	00db      	lsls	r3, r3, #3
 800e77a:	18d3      	adds	r3, r2, r3
 800e77c:	3304      	adds	r3, #4
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	193a      	adds	r2, r7, r4
 800e782:	7812      	ldrb	r2, [r2, #0]
 800e784:	2101      	movs	r1, #1
 800e786:	4091      	lsls	r1, r2
 800e788:	000a      	movs	r2, r1
 800e78a:	b2d2      	uxtb	r2, r2
 800e78c:	4013      	ands	r3, r2
 800e78e:	4298      	cmp	r0, r3
 800e790:	d10f      	bne.n	800e7b2 <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800e792:	1dfb      	adds	r3, r7, #7
 800e794:	781a      	ldrb	r2, [r3, #0]
 800e796:	4b0a      	ldr	r3, [pc, #40]	; (800e7c0 <PHY_Rx_Completed+0xd0>)
 800e798:	00d2      	lsls	r2, r2, #3
 800e79a:	58d3      	ldr	r3, [r2, r3]
 800e79c:	193a      	adds	r2, r7, r4
 800e79e:	7811      	ldrb	r1, [r2, #0]
 800e7a0:	1dfa      	adds	r2, r7, #7
 800e7a2:	7812      	ldrb	r2, [r2, #0]
 800e7a4:	0010      	movs	r0, r2
 800e7a6:	4798      	blx	r3
      break;
 800e7a8:	e003      	b.n	800e7b2 <PHY_Rx_Completed+0xc2>
      break;
 800e7aa:	46c0      	nop			; (mov r8, r8)
 800e7ac:	e002      	b.n	800e7b4 <PHY_Rx_Completed+0xc4>
      break;
 800e7ae:	46c0      	nop			; (mov r8, r8)
 800e7b0:	e000      	b.n	800e7b4 <PHY_Rx_Completed+0xc4>
      break;
 800e7b2:	46c0      	nop			; (mov r8, r8)
  }
}
 800e7b4:	46c0      	nop			; (mov r8, r8)
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	b005      	add	sp, #20
 800e7ba:	bd90      	pop	{r4, r7, pc}
 800e7bc:	0801b4d8 	.word	0x0801b4d8
 800e7c0:	200003ec 	.word	0x200003ec
 800e7c4:	200003f4 	.word	0x200003f4

0800e7c8 <LL_AHB1_GRP1_EnableClock>:
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800e7d0:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <LL_AHB1_GRP1_EnableClock+0x28>)
 800e7d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800e7d4:	4b06      	ldr	r3, [pc, #24]	; (800e7f0 <LL_AHB1_GRP1_EnableClock+0x28>)
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	430a      	orrs	r2, r1
 800e7da:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800e7dc:	4b04      	ldr	r3, [pc, #16]	; (800e7f0 <LL_AHB1_GRP1_EnableClock+0x28>)
 800e7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
}
 800e7e8:	46c0      	nop			; (mov r8, r8)
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	b004      	add	sp, #16
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	40021000 	.word	0x40021000

0800e7f4 <LL_APB1_GRP1_EnableClock>:
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800e7fc:	4b07      	ldr	r3, [pc, #28]	; (800e81c <LL_APB1_GRP1_EnableClock+0x28>)
 800e7fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e800:	4b06      	ldr	r3, [pc, #24]	; (800e81c <LL_APB1_GRP1_EnableClock+0x28>)
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	430a      	orrs	r2, r1
 800e806:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800e808:	4b04      	ldr	r3, [pc, #16]	; (800e81c <LL_APB1_GRP1_EnableClock+0x28>)
 800e80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	4013      	ands	r3, r2
 800e810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e812:	68fb      	ldr	r3, [r7, #12]
}
 800e814:	46c0      	nop			; (mov r8, r8)
 800e816:	46bd      	mov	sp, r7
 800e818:	b004      	add	sp, #16
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	40021000 	.word	0x40021000

0800e820 <LL_APB2_GRP1_EnableClock>:
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800e828:	4b07      	ldr	r3, [pc, #28]	; (800e848 <LL_APB2_GRP1_EnableClock+0x28>)
 800e82a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e82c:	4b06      	ldr	r3, [pc, #24]	; (800e848 <LL_APB2_GRP1_EnableClock+0x28>)
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	430a      	orrs	r2, r1
 800e832:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800e834:	4b04      	ldr	r3, [pc, #16]	; (800e848 <LL_APB2_GRP1_EnableClock+0x28>)
 800e836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	4013      	ands	r3, r2
 800e83c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e83e:	68fb      	ldr	r3, [r7, #12]
}
 800e840:	46c0      	nop			; (mov r8, r8)
 800e842:	46bd      	mov	sp, r7
 800e844:	b004      	add	sp, #16
 800e846:	bd80      	pop	{r7, pc}
 800e848:	40021000 	.word	0x40021000

0800e84c <LL_UCPD_Enable>:
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2280      	movs	r2, #128	; 0x80
 800e85a:	0612      	lsls	r2, r2, #24
 800e85c:	431a      	orrs	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	601a      	str	r2, [r3, #0]
}
 800e862:	46c0      	nop			; (mov r8, r8)
 800e864:	46bd      	mov	sp, r7
 800e866:	b002      	add	sp, #8
 800e868:	bd80      	pop	{r7, pc}

0800e86a <LL_UCPD_Disable>:
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b082      	sub	sp, #8
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	085a      	lsrs	r2, r3, #1
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	601a      	str	r2, [r3, #0]
}
 800e87e:	46c0      	nop			; (mov r8, r8)
 800e880:	46bd      	mov	sp, r7
 800e882:	b002      	add	sp, #8
 800e884:	bd80      	pop	{r7, pc}
	...

0800e888 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	4a03      	ldr	r2, [pc, #12]	; (800e8a4 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 800e896:	401a      	ands	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	60da      	str	r2, [r3, #12]
}
 800e89c:	46c0      	nop			; (mov r8, r8)
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	b002      	add	sp, #8
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	ffdfffff 	.word	0xffdfffff

0800e8a8 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	2280      	movs	r2, #128	; 0x80
 800e8b6:	0392      	lsls	r2, r2, #14
 800e8b8:	431a      	orrs	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	60da      	str	r2, [r3, #12]
}
 800e8be:	46c0      	nop			; (mov r8, r8)
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	b002      	add	sp, #8
 800e8c4:	bd80      	pop	{r7, pc}
	...

0800e8c8 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	4a03      	ldr	r2, [pc, #12]	; (800e8e4 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 800e8d6:	401a      	ands	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	60da      	str	r2, [r3, #12]
}
 800e8dc:	46c0      	nop			; (mov r8, r8)
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	b002      	add	sp, #8
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	ffefffff 	.word	0xffefffff

0800e8e8 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	2280      	movs	r2, #128	; 0x80
 800e8f6:	0352      	lsls	r2, r2, #13
 800e8f8:	431a      	orrs	r2, r3
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	60da      	str	r2, [r3, #12]
}
 800e8fe:	46c0      	nop			; (mov r8, r8)
 800e900:	46bd      	mov	sp, r7
 800e902:	b002      	add	sp, #8
 800e904:	bd80      	pop	{r7, pc}

0800e906 <LL_UCPD_SignalFRSTX>:
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b082      	sub	sp, #8
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	2280      	movs	r2, #128	; 0x80
 800e914:	0292      	lsls	r2, r2, #10
 800e916:	431a      	orrs	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	60da      	str	r2, [r3, #12]
}
 800e91c:	46c0      	nop			; (mov r8, r8)
 800e91e:	46bd      	mov	sp, r7
 800e920:	b002      	add	sp, #8
 800e922:	bd80      	pop	{r7, pc}

0800e924 <LL_UCPD_FRSDetectionEnable>:
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	2280      	movs	r2, #128	; 0x80
 800e932:	0252      	lsls	r2, r2, #9
 800e934:	431a      	orrs	r2, r3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	60da      	str	r2, [r3, #12]
}
 800e93a:	46c0      	nop			; (mov r8, r8)
 800e93c:	46bd      	mov	sp, r7
 800e93e:	b002      	add	sp, #8
 800e940:	bd80      	pop	{r7, pc}
	...

0800e944 <LL_UCPD_FRSDetectionDisable>:
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	4a03      	ldr	r2, [pc, #12]	; (800e960 <LL_UCPD_FRSDetectionDisable+0x1c>)
 800e952:	401a      	ands	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	60da      	str	r2, [r3, #12]
}
 800e958:	46c0      	nop			; (mov r8, r8)
 800e95a:	46bd      	mov	sp, r7
 800e95c:	b002      	add	sp, #8
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	fffeffff 	.word	0xfffeffff

0800e964 <LL_UCPD_SetccEnable>:
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	4a05      	ldr	r2, [pc, #20]	; (800e988 <LL_UCPD_SetccEnable+0x24>)
 800e974:	401a      	ands	r2, r3
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	431a      	orrs	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	60da      	str	r2, [r3, #12]
}
 800e97e:	46c0      	nop			; (mov r8, r8)
 800e980:	46bd      	mov	sp, r7
 800e982:	b002      	add	sp, #8
 800e984:	bd80      	pop	{r7, pc}
 800e986:	46c0      	nop			; (mov r8, r8)
 800e988:	fffff3ff 	.word	0xfffff3ff

0800e98c <LL_UCPD_SetSNKRole>:
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	2280      	movs	r2, #128	; 0x80
 800e99a:	0092      	lsls	r2, r2, #2
 800e99c:	431a      	orrs	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	60da      	str	r2, [r3, #12]
}
 800e9a2:	46c0      	nop			; (mov r8, r8)
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	b002      	add	sp, #8
 800e9a8:	bd80      	pop	{r7, pc}
	...

0800e9ac <LL_UCPD_SetSRCRole>:
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	4a03      	ldr	r2, [pc, #12]	; (800e9c8 <LL_UCPD_SetSRCRole+0x1c>)
 800e9ba:	401a      	ands	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	60da      	str	r2, [r3, #12]
}
 800e9c0:	46c0      	nop			; (mov r8, r8)
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	b002      	add	sp, #8
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	fffffdff 	.word	0xfffffdff

0800e9cc <LL_UCPD_SetRpResistor>:
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	4a05      	ldr	r2, [pc, #20]	; (800e9f0 <LL_UCPD_SetRpResistor+0x24>)
 800e9dc:	401a      	ands	r2, r3
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	431a      	orrs	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	60da      	str	r2, [r3, #12]
}
 800e9e6:	46c0      	nop			; (mov r8, r8)
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	b002      	add	sp, #8
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	46c0      	nop			; (mov r8, r8)
 800e9f0:	fffffe7f 	.word	0xfffffe7f

0800e9f4 <LL_UCPD_SetCCPin>:
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	2240      	movs	r2, #64	; 0x40
 800ea04:	4393      	bics	r3, r2
 800ea06:	001a      	movs	r2, r3
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	431a      	orrs	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	60da      	str	r2, [r3, #12]
}
 800ea10:	46c0      	nop			; (mov r8, r8)
 800ea12:	46bd      	mov	sp, r7
 800ea14:	b002      	add	sp, #8
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <LL_UCPD_RxEnable>:
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	2220      	movs	r2, #32
 800ea26:	431a      	orrs	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	60da      	str	r2, [r3, #12]
}
 800ea2c:	46c0      	nop			; (mov r8, r8)
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	b002      	add	sp, #8
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <LL_UCPD_RxDisable>:
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	2220      	movs	r2, #32
 800ea42:	4393      	bics	r3, r2
 800ea44:	001a      	movs	r2, r3
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	60da      	str	r2, [r3, #12]
}
 800ea4a:	46c0      	nop			; (mov r8, r8)
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	b002      	add	sp, #8
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <LL_UCPD_SetRxMode>:
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b082      	sub	sp, #8
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	2210      	movs	r2, #16
 800ea62:	4393      	bics	r3, r2
 800ea64:	001a      	movs	r2, r3
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	431a      	orrs	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	60da      	str	r2, [r3, #12]
}
 800ea6e:	46c0      	nop			; (mov r8, r8)
 800ea70:	46bd      	mov	sp, r7
 800ea72:	b002      	add	sp, #8
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <LL_UCPD_SendHardReset>:
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b082      	sub	sp, #8
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	2208      	movs	r2, #8
 800ea84:	431a      	orrs	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	60da      	str	r2, [r3, #12]
}
 800ea8a:	46c0      	nop			; (mov r8, r8)
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	b002      	add	sp, #8
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <LL_UCPD_SendMessage>:
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b082      	sub	sp, #8
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	2204      	movs	r2, #4
 800eaa0:	431a      	orrs	r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	60da      	str	r2, [r3, #12]
}
 800eaa6:	46c0      	nop			; (mov r8, r8)
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	b002      	add	sp, #8
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <LL_UCPD_SetTxMode>:
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b082      	sub	sp, #8
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
 800eab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	2203      	movs	r2, #3
 800eabe:	4393      	bics	r3, r2
 800eac0:	001a      	movs	r2, r3
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	431a      	orrs	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	60da      	str	r2, [r3, #12]
}
 800eaca:	46c0      	nop			; (mov r8, r8)
 800eacc:	46bd      	mov	sp, r7
 800eace:	b002      	add	sp, #8
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b082      	sub	sp, #8
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2280      	movs	r2, #128	; 0x80
 800eae0:	05d2      	lsls	r2, r2, #23
 800eae2:	431a      	orrs	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	601a      	str	r2, [r3, #0]
}
 800eae8:	46c0      	nop			; (mov r8, r8)
 800eaea:	46bd      	mov	sp, r7
 800eaec:	b002      	add	sp, #8
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a03      	ldr	r2, [pc, #12]	; (800eb0c <LL_UCPD_RxDMADisable+0x1c>)
 800eafe:	401a      	ands	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	601a      	str	r2, [r3, #0]
}
 800eb04:	46c0      	nop			; (mov r8, r8)
 800eb06:	46bd      	mov	sp, r7
 800eb08:	b002      	add	sp, #8
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	bfffffff 	.word	0xbfffffff

0800eb10 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2280      	movs	r2, #128	; 0x80
 800eb1e:	0592      	lsls	r2, r2, #22
 800eb20:	431a      	orrs	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	601a      	str	r2, [r3, #0]
}
 800eb26:	46c0      	nop			; (mov r8, r8)
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	b002      	add	sp, #8
 800eb2c:	bd80      	pop	{r7, pc}
	...

0800eb30 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4a03      	ldr	r2, [pc, #12]	; (800eb4c <LL_UCPD_TxDMADisable+0x1c>)
 800eb3e:	401a      	ands	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	601a      	str	r2, [r3, #0]
}
 800eb44:	46c0      	nop			; (mov r8, r8)
 800eb46:	46bd      	mov	sp, r7
 800eb48:	b002      	add	sp, #8
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	dfffffff 	.word	0xdfffffff

0800eb50 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	683a      	ldr	r2, [r7, #0]
 800eb5e:	61da      	str	r2, [r3, #28]
}
 800eb60:	46c0      	nop			; (mov r8, r8)
 800eb62:	46bd      	mov	sp, r7
 800eb64:	b002      	add	sp, #8
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	621a      	str	r2, [r3, #32]
}
 800eb78:	46c0      	nop			; (mov r8, r8)
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	b002      	add	sp, #8
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800eb84:	2380      	movs	r3, #128	; 0x80
 800eb86:	055b      	lsls	r3, r3, #21
 800eb88:	0018      	movs	r0, r3
 800eb8a:	f7ff fe33 	bl	800e7f4 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800eb8e:	2380      	movs	r3, #128	; 0x80
 800eb90:	015b      	lsls	r3, r3, #5
 800eb92:	0018      	movs	r0, r3
 800eb94:	f7ff fe18 	bl	800e7c8 <LL_AHB1_GRP1_EnableClock>
}
 800eb98:	46c0      	nop			; (mov r8, r8)
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
	...

0800eba0 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	0002      	movs	r2, r0
 800eba8:	1dfb      	adds	r3, r7, #7
 800ebaa:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 800ebac:	1dfb      	adds	r3, r7, #7
 800ebae:	781a      	ldrb	r2, [r3, #0]
 800ebb0:	4916      	ldr	r1, [pc, #88]	; (800ec0c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800ebb2:	0013      	movs	r3, r2
 800ebb4:	011b      	lsls	r3, r3, #4
 800ebb6:	1a9b      	subs	r3, r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	585b      	ldr	r3, [r3, r1]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	2207      	movs	r2, #7
 800ebc0:	4393      	bics	r3, r2
 800ebc2:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 800ebc4:	1dfb      	adds	r3, r7, #7
 800ebc6:	781a      	ldrb	r2, [r3, #0]
 800ebc8:	4910      	ldr	r1, [pc, #64]	; (800ec0c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800ebca:	0013      	movs	r3, r2
 800ebcc:	011b      	lsls	r3, r3, #4
 800ebce:	1a9b      	subs	r3, r3, r2
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	585b      	ldr	r3, [r3, r1]
 800ebd4:	0018      	movs	r0, r3
 800ebd6:	f7ff fe48 	bl	800e86a <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800ebda:	1dfb      	adds	r3, r7, #7
 800ebdc:	781a      	ldrb	r2, [r3, #0]
 800ebde:	490b      	ldr	r1, [pc, #44]	; (800ec0c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800ebe0:	0013      	movs	r3, r2
 800ebe2:	011b      	lsls	r3, r3, #4
 800ebe4:	1a9b      	subs	r3, r3, r2
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	585b      	ldr	r3, [r3, r1]
 800ebea:	0018      	movs	r0, r3
 800ebec:	f7ff fe2e 	bl	800e84c <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 800ebf0:	1dfb      	adds	r3, r7, #7
 800ebf2:	781a      	ldrb	r2, [r3, #0]
 800ebf4:	4905      	ldr	r1, [pc, #20]	; (800ec0c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800ebf6:	0013      	movs	r3, r2
 800ebf8:	011b      	lsls	r3, r3, #4
 800ebfa:	1a9b      	subs	r3, r3, r2
 800ebfc:	009b      	lsls	r3, r3, #2
 800ebfe:	585b      	ldr	r3, [r3, r1]
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	60da      	str	r2, [r3, #12]
}
 800ec04:	46c0      	nop			; (mov r8, r8)
 800ec06:	46bd      	mov	sp, r7
 800ec08:	b004      	add	sp, #16
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	200003f4 	.word	0x200003f4

0800ec10 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 800ec10:	b590      	push	{r4, r7, lr}
 800ec12:	b08b      	sub	sp, #44	; 0x2c
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	60ba      	str	r2, [r7, #8]
 800ec18:	607b      	str	r3, [r7, #4]
 800ec1a:	240f      	movs	r4, #15
 800ec1c:	193b      	adds	r3, r7, r4
 800ec1e:	1c02      	adds	r2, r0, #0
 800ec20:	701a      	strb	r2, [r3, #0]
 800ec22:	200e      	movs	r0, #14
 800ec24:	183b      	adds	r3, r7, r0
 800ec26:	1c0a      	adds	r2, r1, #0
 800ec28:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 800ec2a:	2327      	movs	r3, #39	; 0x27
 800ec2c:	18fb      	adds	r3, r7, r3
 800ec2e:	2200      	movs	r2, #0
 800ec30:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 800ec32:	183b      	adds	r3, r7, r0
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b05      	cmp	r3, #5
 800ec38:	d10b      	bne.n	800ec52 <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 800ec3a:	193b      	adds	r3, r7, r4
 800ec3c:	781a      	ldrb	r2, [r3, #0]
 800ec3e:	499e      	ldr	r1, [pc, #632]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ec40:	0013      	movs	r3, r2
 800ec42:	011b      	lsls	r3, r3, #4
 800ec44:	1a9b      	subs	r3, r3, r2
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	585b      	ldr	r3, [r3, r1]
 800ec4a:	0018      	movs	r0, r3
 800ec4c:	f7ff ff13 	bl	800ea76 <LL_UCPD_SendHardReset>
 800ec50:	e12a      	b.n	800eea8 <USBPD_HW_IF_SendBuffer+0x298>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec52:	f3ef 8310 	mrs	r3, PRIMASK
 800ec56:	61fb      	str	r3, [r7, #28]
  return(result);
 800ec58:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 800ec5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec5c:	b672      	cpsid	i
}
 800ec5e:	46c0      	nop			; (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 800ec60:	240f      	movs	r4, #15
 800ec62:	193b      	adds	r3, r7, r4
 800ec64:	781a      	ldrb	r2, [r3, #0]
 800ec66:	4994      	ldr	r1, [pc, #592]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ec68:	2038      	movs	r0, #56	; 0x38
 800ec6a:	0013      	movs	r3, r2
 800ec6c:	011b      	lsls	r3, r3, #4
 800ec6e:	1a9b      	subs	r3, r3, r2
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	18cb      	adds	r3, r1, r3
 800ec74:	181b      	adds	r3, r3, r0
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d00e      	beq.n	800ec9c <USBPD_HW_IF_SendBuffer+0x8c>
 800ec7e:	193b      	adds	r3, r7, r4
 800ec80:	781a      	ldrb	r2, [r3, #0]
 800ec82:	498d      	ldr	r1, [pc, #564]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ec84:	0013      	movs	r3, r2
 800ec86:	011b      	lsls	r3, r3, #4
 800ec88:	1a9b      	subs	r3, r3, r2
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	18cb      	adds	r3, r1, r3
 800ec8e:	3304      	adds	r3, #4
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2201      	movs	r2, #1
 800ec96:	4013      	ands	r3, r2
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d10a      	bne.n	800ecb2 <USBPD_HW_IF_SendBuffer+0xa2>
 800ec9c:	6a3b      	ldr	r3, [r7, #32]
 800ec9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	f383 8810 	msr	PRIMASK, r3
}
 800eca6:	46c0      	nop			; (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 800eca8:	2327      	movs	r3, #39	; 0x27
 800ecaa:	18fb      	adds	r3, r7, r3
 800ecac:	2202      	movs	r2, #2
 800ecae:	701a      	strb	r2, [r3, #0]
 800ecb0:	e0fa      	b.n	800eea8 <USBPD_HW_IF_SendBuffer+0x298>
 800ecb2:	6a3b      	ldr	r3, [r7, #32]
 800ecb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	f383 8810 	msr	PRIMASK, r3
}
 800ecbc:	46c0      	nop			; (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 800ecbe:	230e      	movs	r3, #14
 800ecc0:	18fb      	adds	r3, r7, r3
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	2b07      	cmp	r3, #7
 800ecc6:	d871      	bhi.n	800edac <USBPD_HW_IF_SendBuffer+0x19c>
 800ecc8:	009a      	lsls	r2, r3, #2
 800ecca:	4b7c      	ldr	r3, [pc, #496]	; (800eebc <USBPD_HW_IF_SendBuffer+0x2ac>)
 800eccc:	18d3      	adds	r3, r2, r3
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 800ecd2:	240f      	movs	r4, #15
 800ecd4:	193b      	adds	r3, r7, r4
 800ecd6:	781a      	ldrb	r2, [r3, #0]
 800ecd8:	4977      	ldr	r1, [pc, #476]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ecda:	0013      	movs	r3, r2
 800ecdc:	011b      	lsls	r3, r3, #4
 800ecde:	1a9b      	subs	r3, r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	585b      	ldr	r3, [r3, r1]
 800ece4:	4a76      	ldr	r2, [pc, #472]	; (800eec0 <USBPD_HW_IF_SendBuffer+0x2b0>)
 800ece6:	0011      	movs	r1, r2
 800ece8:	0018      	movs	r0, r3
 800ecea:	f7ff ff31 	bl	800eb50 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800ecee:	193b      	adds	r3, r7, r4
 800ecf0:	781a      	ldrb	r2, [r3, #0]
 800ecf2:	4971      	ldr	r1, [pc, #452]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ecf4:	0013      	movs	r3, r2
 800ecf6:	011b      	lsls	r3, r3, #4
 800ecf8:	1a9b      	subs	r3, r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	585b      	ldr	r3, [r3, r1]
 800ecfe:	2100      	movs	r1, #0
 800ed00:	0018      	movs	r0, r3
 800ed02:	f7ff fed4 	bl	800eaae <LL_UCPD_SetTxMode>
          break;
 800ed06:	e056      	b.n	800edb6 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 800ed08:	240f      	movs	r4, #15
 800ed0a:	193b      	adds	r3, r7, r4
 800ed0c:	781a      	ldrb	r2, [r3, #0]
 800ed0e:	496a      	ldr	r1, [pc, #424]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ed10:	0013      	movs	r3, r2
 800ed12:	011b      	lsls	r3, r3, #4
 800ed14:	1a9b      	subs	r3, r3, r2
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	585b      	ldr	r3, [r3, r1]
 800ed1a:	4a6a      	ldr	r2, [pc, #424]	; (800eec4 <USBPD_HW_IF_SendBuffer+0x2b4>)
 800ed1c:	0011      	movs	r1, r2
 800ed1e:	0018      	movs	r0, r3
 800ed20:	f7ff ff16 	bl	800eb50 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800ed24:	193b      	adds	r3, r7, r4
 800ed26:	781a      	ldrb	r2, [r3, #0]
 800ed28:	4963      	ldr	r1, [pc, #396]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ed2a:	0013      	movs	r3, r2
 800ed2c:	011b      	lsls	r3, r3, #4
 800ed2e:	1a9b      	subs	r3, r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	585b      	ldr	r3, [r3, r1]
 800ed34:	2100      	movs	r1, #0
 800ed36:	0018      	movs	r0, r3
 800ed38:	f7ff feb9 	bl	800eaae <LL_UCPD_SetTxMode>
          break;
 800ed3c:	e03b      	b.n	800edb6 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 800ed3e:	240f      	movs	r4, #15
 800ed40:	193b      	adds	r3, r7, r4
 800ed42:	781a      	ldrb	r2, [r3, #0]
 800ed44:	495c      	ldr	r1, [pc, #368]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ed46:	0013      	movs	r3, r2
 800ed48:	011b      	lsls	r3, r3, #4
 800ed4a:	1a9b      	subs	r3, r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	585b      	ldr	r3, [r3, r1]
 800ed50:	4a5d      	ldr	r2, [pc, #372]	; (800eec8 <USBPD_HW_IF_SendBuffer+0x2b8>)
 800ed52:	0011      	movs	r1, r2
 800ed54:	0018      	movs	r0, r3
 800ed56:	f7ff fefb 	bl	800eb50 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800ed5a:	193b      	adds	r3, r7, r4
 800ed5c:	781a      	ldrb	r2, [r3, #0]
 800ed5e:	4956      	ldr	r1, [pc, #344]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ed60:	0013      	movs	r3, r2
 800ed62:	011b      	lsls	r3, r3, #4
 800ed64:	1a9b      	subs	r3, r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	585b      	ldr	r3, [r3, r1]
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	0018      	movs	r0, r3
 800ed6e:	f7ff fe9e 	bl	800eaae <LL_UCPD_SetTxMode>
          break;
 800ed72:	e020      	b.n	800edb6 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 800ed74:	230f      	movs	r3, #15
 800ed76:	18fb      	adds	r3, r7, r3
 800ed78:	781a      	ldrb	r2, [r3, #0]
 800ed7a:	494f      	ldr	r1, [pc, #316]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ed7c:	0013      	movs	r3, r2
 800ed7e:	011b      	lsls	r3, r3, #4
 800ed80:	1a9b      	subs	r3, r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	585b      	ldr	r3, [r3, r1]
 800ed86:	2101      	movs	r1, #1
 800ed88:	0018      	movs	r0, r3
 800ed8a:	f7ff fe90 	bl	800eaae <LL_UCPD_SetTxMode>
          break;
 800ed8e:	e012      	b.n	800edb6 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800ed90:	230f      	movs	r3, #15
 800ed92:	18fb      	adds	r3, r7, r3
 800ed94:	781a      	ldrb	r2, [r3, #0]
 800ed96:	4948      	ldr	r1, [pc, #288]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ed98:	0013      	movs	r3, r2
 800ed9a:	011b      	lsls	r3, r3, #4
 800ed9c:	1a9b      	subs	r3, r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	585b      	ldr	r3, [r3, r1]
 800eda2:	2102      	movs	r1, #2
 800eda4:	0018      	movs	r0, r3
 800eda6:	f7ff fe82 	bl	800eaae <LL_UCPD_SetTxMode>
          break;
 800edaa:	e004      	b.n	800edb6 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 800edac:	2327      	movs	r3, #39	; 0x27
 800edae:	18fb      	adds	r3, r7, r3
 800edb0:	2202      	movs	r2, #2
 800edb2:	701a      	strb	r2, [r3, #0]
          break;
 800edb4:	46c0      	nop			; (mov r8, r8)
      }

      if (USBPD_OK == _status)
 800edb6:	2327      	movs	r3, #39	; 0x27
 800edb8:	18fb      	adds	r3, r7, r3
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d173      	bne.n	800eea8 <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800edc0:	200f      	movs	r0, #15
 800edc2:	183b      	adds	r3, r7, r0
 800edc4:	781a      	ldrb	r2, [r3, #0]
 800edc6:	493c      	ldr	r1, [pc, #240]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800edc8:	0013      	movs	r3, r2
 800edca:	011b      	lsls	r3, r3, #4
 800edcc:	1a9b      	subs	r3, r3, r2
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	18cb      	adds	r3, r1, r3
 800edd2:	3304      	adds	r3, #4
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	6819      	ldr	r1, [r3, #0]
 800edd8:	183b      	adds	r3, r7, r0
 800edda:	781a      	ldrb	r2, [r3, #0]
 800eddc:	4836      	ldr	r0, [pc, #216]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800edde:	0013      	movs	r3, r2
 800ede0:	011b      	lsls	r3, r3, #4
 800ede2:	1a9b      	subs	r3, r3, r2
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	18c3      	adds	r3, r0, r3
 800ede8:	3304      	adds	r3, #4
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2201      	movs	r2, #1
 800edee:	4391      	bics	r1, r2
 800edf0:	000a      	movs	r2, r1
 800edf2:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 800edf4:	46c0      	nop			; (mov r8, r8)
 800edf6:	200f      	movs	r0, #15
 800edf8:	183b      	adds	r3, r7, r0
 800edfa:	781a      	ldrb	r2, [r3, #0]
 800edfc:	492e      	ldr	r1, [pc, #184]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800edfe:	0013      	movs	r3, r2
 800ee00:	011b      	lsls	r3, r3, #4
 800ee02:	1a9b      	subs	r3, r3, r2
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	18cb      	adds	r3, r1, r3
 800ee08:	3304      	adds	r3, #4
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	4013      	ands	r3, r2
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d0ef      	beq.n	800edf6 <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 800ee16:	0004      	movs	r4, r0
 800ee18:	193b      	adds	r3, r7, r4
 800ee1a:	781a      	ldrb	r2, [r3, #0]
 800ee1c:	4926      	ldr	r1, [pc, #152]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ee1e:	0013      	movs	r3, r2
 800ee20:	011b      	lsls	r3, r3, #4
 800ee22:	1a9b      	subs	r3, r3, r2
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	18cb      	adds	r3, r1, r3
 800ee28:	3304      	adds	r3, #4
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	68ba      	ldr	r2, [r7, #8]
 800ee2e:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 800ee30:	193b      	adds	r3, r7, r4
 800ee32:	781a      	ldrb	r2, [r3, #0]
 800ee34:	4920      	ldr	r1, [pc, #128]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ee36:	0013      	movs	r3, r2
 800ee38:	011b      	lsls	r3, r3, #4
 800ee3a:	1a9b      	subs	r3, r3, r2
 800ee3c:	009b      	lsls	r3, r3, #2
 800ee3e:	18cb      	adds	r3, r1, r3
 800ee40:	3304      	adds	r3, #4
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800ee48:	193b      	adds	r3, r7, r4
 800ee4a:	781a      	ldrb	r2, [r3, #0]
 800ee4c:	491a      	ldr	r1, [pc, #104]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ee4e:	0013      	movs	r3, r2
 800ee50:	011b      	lsls	r3, r3, #4
 800ee52:	1a9b      	subs	r3, r3, r2
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	18cb      	adds	r3, r1, r3
 800ee58:	3304      	adds	r3, #4
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	6819      	ldr	r1, [r3, #0]
 800ee5e:	193b      	adds	r3, r7, r4
 800ee60:	781a      	ldrb	r2, [r3, #0]
 800ee62:	4815      	ldr	r0, [pc, #84]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ee64:	0013      	movs	r3, r2
 800ee66:	011b      	lsls	r3, r3, #4
 800ee68:	1a9b      	subs	r3, r3, r2
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	18c3      	adds	r3, r0, r3
 800ee6e:	3304      	adds	r3, #4
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2201      	movs	r2, #1
 800ee74:	430a      	orrs	r2, r1
 800ee76:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 800ee78:	193b      	adds	r3, r7, r4
 800ee7a:	781a      	ldrb	r2, [r3, #0]
 800ee7c:	490e      	ldr	r1, [pc, #56]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ee7e:	0013      	movs	r3, r2
 800ee80:	011b      	lsls	r3, r3, #4
 800ee82:	1a9b      	subs	r3, r3, r2
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	585b      	ldr	r3, [r3, r1]
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	0011      	movs	r1, r2
 800ee8c:	0018      	movs	r0, r3
 800ee8e:	f7ff fe6b 	bl	800eb68 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800ee92:	193b      	adds	r3, r7, r4
 800ee94:	781a      	ldrb	r2, [r3, #0]
 800ee96:	4908      	ldr	r1, [pc, #32]	; (800eeb8 <USBPD_HW_IF_SendBuffer+0x2a8>)
 800ee98:	0013      	movs	r3, r2
 800ee9a:	011b      	lsls	r3, r3, #4
 800ee9c:	1a9b      	subs	r3, r3, r2
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	585b      	ldr	r3, [r3, r1]
 800eea2:	0018      	movs	r0, r3
 800eea4:	f7ff fdf5 	bl	800ea92 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 800eea8:	2327      	movs	r3, #39	; 0x27
 800eeaa:	18fb      	adds	r3, r7, r3
 800eeac:	781b      	ldrb	r3, [r3, #0]
}
 800eeae:	0018      	movs	r0, r3
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	b00b      	add	sp, #44	; 0x2c
 800eeb4:	bd90      	pop	{r4, r7, pc}
 800eeb6:	46c0      	nop			; (mov r8, r8)
 800eeb8:	200003f4 	.word	0x200003f4
 800eebc:	0801c43c 	.word	0x0801c43c
 800eec0:	0008e318 	.word	0x0008e318
 800eec4:	00031b18 	.word	0x00031b18
 800eec8:	000360d8 	.word	0x000360d8

0800eecc <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	0002      	movs	r2, r0
 800eed4:	1dfb      	adds	r3, r7, #7
 800eed6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800eed8:	1dfb      	adds	r3, r7, #7
 800eeda:	781a      	ldrb	r2, [r3, #0]
 800eedc:	490c      	ldr	r1, [pc, #48]	; (800ef10 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800eede:	0013      	movs	r3, r2
 800eee0:	011b      	lsls	r3, r3, #4
 800eee2:	1a9b      	subs	r3, r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	585b      	ldr	r3, [r3, r1]
 800eee8:	2102      	movs	r1, #2
 800eeea:	0018      	movs	r0, r3
 800eeec:	f7ff fddf 	bl	800eaae <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800eef0:	1dfb      	adds	r3, r7, #7
 800eef2:	781a      	ldrb	r2, [r3, #0]
 800eef4:	4906      	ldr	r1, [pc, #24]	; (800ef10 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800eef6:	0013      	movs	r3, r2
 800eef8:	011b      	lsls	r3, r3, #4
 800eefa:	1a9b      	subs	r3, r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	585b      	ldr	r3, [r3, r1]
 800ef00:	0018      	movs	r0, r3
 800ef02:	f7ff fdc6 	bl	800ea92 <LL_UCPD_SendMessage>
}
 800ef06:	46c0      	nop			; (mov r8, r8)
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	b002      	add	sp, #8
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	46c0      	nop			; (mov r8, r8)
 800ef10:	200003f4 	.word	0x200003f4

0800ef14 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	0002      	movs	r2, r0
 800ef1c:	1dfb      	adds	r3, r7, #7
 800ef1e:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800ef20:	2001      	movs	r0, #1
 800ef22:	f7ff fc7d 	bl	800e820 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 800ef26:	1dfb      	adds	r3, r7, #7
 800ef28:	781a      	ldrb	r2, [r3, #0]
 800ef2a:	4953      	ldr	r1, [pc, #332]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800ef2c:	0013      	movs	r3, r2
 800ef2e:	011b      	lsls	r3, r3, #4
 800ef30:	1a9b      	subs	r3, r3, r2
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	18cb      	adds	r3, r1, r3
 800ef36:	3310      	adds	r3, #16
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	789b      	ldrb	r3, [r3, #2]
 800ef3c:	079b      	lsls	r3, r3, #30
 800ef3e:	0f9b      	lsrs	r3, r3, #30
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2b02      	cmp	r3, #2
 800ef44:	d021      	beq.n	800ef8a <USBPDM1_AssertRp+0x76>
 800ef46:	dc2f      	bgt.n	800efa8 <USBPDM1_AssertRp+0x94>
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d002      	beq.n	800ef52 <USBPDM1_AssertRp+0x3e>
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d00d      	beq.n	800ef6c <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 800ef50:	e02a      	b.n	800efa8 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 800ef52:	1dfb      	adds	r3, r7, #7
 800ef54:	781a      	ldrb	r2, [r3, #0]
 800ef56:	4948      	ldr	r1, [pc, #288]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800ef58:	0013      	movs	r3, r2
 800ef5a:	011b      	lsls	r3, r3, #4
 800ef5c:	1a9b      	subs	r3, r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	585b      	ldr	r3, [r3, r1]
 800ef62:	2180      	movs	r1, #128	; 0x80
 800ef64:	0018      	movs	r0, r3
 800ef66:	f7ff fd31 	bl	800e9cc <LL_UCPD_SetRpResistor>
      break;
 800ef6a:	e01e      	b.n	800efaa <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800ef6c:	1dfb      	adds	r3, r7, #7
 800ef6e:	781a      	ldrb	r2, [r3, #0]
 800ef70:	4941      	ldr	r1, [pc, #260]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800ef72:	0013      	movs	r3, r2
 800ef74:	011b      	lsls	r3, r3, #4
 800ef76:	1a9b      	subs	r3, r3, r2
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	585b      	ldr	r3, [r3, r1]
 800ef7c:	2280      	movs	r2, #128	; 0x80
 800ef7e:	0052      	lsls	r2, r2, #1
 800ef80:	0011      	movs	r1, r2
 800ef82:	0018      	movs	r0, r3
 800ef84:	f7ff fd22 	bl	800e9cc <LL_UCPD_SetRpResistor>
      break;
 800ef88:	e00f      	b.n	800efaa <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800ef8a:	1dfb      	adds	r3, r7, #7
 800ef8c:	781a      	ldrb	r2, [r3, #0]
 800ef8e:	493a      	ldr	r1, [pc, #232]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800ef90:	0013      	movs	r3, r2
 800ef92:	011b      	lsls	r3, r3, #4
 800ef94:	1a9b      	subs	r3, r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	585b      	ldr	r3, [r3, r1]
 800ef9a:	22c0      	movs	r2, #192	; 0xc0
 800ef9c:	0052      	lsls	r2, r2, #1
 800ef9e:	0011      	movs	r1, r2
 800efa0:	0018      	movs	r0, r3
 800efa2:	f7ff fd13 	bl	800e9cc <LL_UCPD_SetRpResistor>
      break;
 800efa6:	e000      	b.n	800efaa <USBPDM1_AssertRp+0x96>
      break;
 800efa8:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800efaa:	1dfb      	adds	r3, r7, #7
 800efac:	781a      	ldrb	r2, [r3, #0]
 800efae:	4932      	ldr	r1, [pc, #200]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800efb0:	0013      	movs	r3, r2
 800efb2:	011b      	lsls	r3, r3, #4
 800efb4:	1a9b      	subs	r3, r3, r2
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	585b      	ldr	r3, [r3, r1]
 800efba:	2100      	movs	r1, #0
 800efbc:	0018      	movs	r0, r3
 800efbe:	f7ff fcd1 	bl	800e964 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800efc2:	1dfb      	adds	r3, r7, #7
 800efc4:	781a      	ldrb	r2, [r3, #0]
 800efc6:	492c      	ldr	r1, [pc, #176]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800efc8:	0013      	movs	r3, r2
 800efca:	011b      	lsls	r3, r3, #4
 800efcc:	1a9b      	subs	r3, r3, r2
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	585b      	ldr	r3, [r3, r1]
 800efd2:	0018      	movs	r0, r3
 800efd4:	f7ff fcea 	bl	800e9ac <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 800efd8:	1dfb      	adds	r3, r7, #7
 800efda:	781a      	ldrb	r2, [r3, #0]
 800efdc:	4926      	ldr	r1, [pc, #152]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800efde:	0013      	movs	r3, r2
 800efe0:	011b      	lsls	r3, r3, #4
 800efe2:	1a9b      	subs	r3, r3, r2
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	18cb      	adds	r3, r1, r3
 800efe8:	3334      	adds	r3, #52	; 0x34
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d10e      	bne.n	800f00e <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800eff0:	1dfb      	adds	r3, r7, #7
 800eff2:	781a      	ldrb	r2, [r3, #0]
 800eff4:	4920      	ldr	r1, [pc, #128]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800eff6:	0013      	movs	r3, r2
 800eff8:	011b      	lsls	r3, r3, #4
 800effa:	1a9b      	subs	r3, r3, r2
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	585b      	ldr	r3, [r3, r1]
 800f000:	22c0      	movs	r2, #192	; 0xc0
 800f002:	0112      	lsls	r2, r2, #4
 800f004:	0011      	movs	r1, r2
 800f006:	0018      	movs	r0, r3
 800f008:	f7ff fcac 	bl	800e964 <LL_UCPD_SetccEnable>
 800f00c:	e01b      	b.n	800f046 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f00e:	1dfb      	adds	r3, r7, #7
 800f010:	781a      	ldrb	r2, [r3, #0]
 800f012:	4919      	ldr	r1, [pc, #100]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800f014:	0013      	movs	r3, r2
 800f016:	011b      	lsls	r3, r3, #4
 800f018:	1a9b      	subs	r3, r3, r2
 800f01a:	009b      	lsls	r3, r3, #2
 800f01c:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800f01e:	1dfb      	adds	r3, r7, #7
 800f020:	781a      	ldrb	r2, [r3, #0]
 800f022:	4915      	ldr	r1, [pc, #84]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800f024:	0013      	movs	r3, r2
 800f026:	011b      	lsls	r3, r3, #4
 800f028:	1a9b      	subs	r3, r3, r2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	18cb      	adds	r3, r1, r3
 800f02e:	3334      	adds	r3, #52	; 0x34
 800f030:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f032:	2b01      	cmp	r3, #1
 800f034:	d102      	bne.n	800f03c <USBPDM1_AssertRp+0x128>
 800f036:	2380      	movs	r3, #128	; 0x80
 800f038:	00db      	lsls	r3, r3, #3
 800f03a:	e001      	b.n	800f040 <USBPDM1_AssertRp+0x12c>
 800f03c:	2380      	movs	r3, #128	; 0x80
 800f03e:	011b      	lsls	r3, r3, #4
 800f040:	0019      	movs	r1, r3
 800f042:	f7ff fc8f 	bl	800e964 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800f046:	4b0d      	ldr	r3, [pc, #52]	; (800f07c <USBPDM1_AssertRp+0x168>)
 800f048:	6819      	ldr	r1, [r3, #0]
 800f04a:	1dfb      	adds	r3, r7, #7
 800f04c:	781a      	ldrb	r2, [r3, #0]
 800f04e:	480a      	ldr	r0, [pc, #40]	; (800f078 <USBPDM1_AssertRp+0x164>)
 800f050:	0013      	movs	r3, r2
 800f052:	011b      	lsls	r3, r3, #4
 800f054:	1a9b      	subs	r3, r3, r2
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	581b      	ldr	r3, [r3, r0]
 800f05a:	4a09      	ldr	r2, [pc, #36]	; (800f080 <USBPDM1_AssertRp+0x16c>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d102      	bne.n	800f066 <USBPDM1_AssertRp+0x152>
 800f060:	2380      	movs	r3, #128	; 0x80
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	e001      	b.n	800f06a <USBPDM1_AssertRp+0x156>
 800f066:	2380      	movs	r3, #128	; 0x80
 800f068:	00db      	lsls	r3, r3, #3
 800f06a:	4a04      	ldr	r2, [pc, #16]	; (800f07c <USBPDM1_AssertRp+0x168>)
 800f06c:	430b      	orrs	r3, r1
 800f06e:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 800f070:	46c0      	nop			; (mov r8, r8)
 800f072:	46bd      	mov	sp, r7
 800f074:	b002      	add	sp, #8
 800f076:	bd80      	pop	{r7, pc}
 800f078:	200003f4 	.word	0x200003f4
 800f07c:	40010000 	.word	0x40010000
 800f080:	4000a000 	.word	0x4000a000

0800f084 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	0002      	movs	r2, r0
 800f08c:	1dfb      	adds	r3, r7, #7
 800f08e:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800f090:	46c0      	nop			; (mov r8, r8)
 800f092:	46bd      	mov	sp, r7
 800f094:	b002      	add	sp, #8
 800f096:	bd80      	pop	{r7, pc}

0800f098 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	0002      	movs	r2, r0
 800f0a0:	1dfb      	adds	r3, r7, #7
 800f0a2:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 800f0a4:	1dfb      	adds	r3, r7, #7
 800f0a6:	781a      	ldrb	r2, [r3, #0]
 800f0a8:	494b      	ldr	r1, [pc, #300]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f0aa:	0013      	movs	r3, r2
 800f0ac:	011b      	lsls	r3, r3, #4
 800f0ae:	1a9b      	subs	r3, r3, r2
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	585b      	ldr	r3, [r3, r1]
 800f0b4:	0018      	movs	r0, r3
 800f0b6:	f7ff fbf7 	bl	800e8a8 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 800f0ba:	1dfb      	adds	r3, r7, #7
 800f0bc:	781a      	ldrb	r2, [r3, #0]
 800f0be:	4946      	ldr	r1, [pc, #280]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f0c0:	0013      	movs	r3, r2
 800f0c2:	011b      	lsls	r3, r3, #4
 800f0c4:	1a9b      	subs	r3, r3, r2
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	585b      	ldr	r3, [r3, r1]
 800f0ca:	0018      	movs	r0, r3
 800f0cc:	f7ff fc0c 	bl	800e8e8 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800f0d0:	2001      	movs	r0, #1
 800f0d2:	f7ff fba5 	bl	800e820 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800f0d6:	1dfb      	adds	r3, r7, #7
 800f0d8:	781a      	ldrb	r2, [r3, #0]
 800f0da:	493f      	ldr	r1, [pc, #252]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f0dc:	0013      	movs	r3, r2
 800f0de:	011b      	lsls	r3, r3, #4
 800f0e0:	1a9b      	subs	r3, r3, r2
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	585b      	ldr	r3, [r3, r1]
 800f0e6:	2100      	movs	r1, #0
 800f0e8:	0018      	movs	r0, r3
 800f0ea:	f7ff fc3b 	bl	800e964 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 800f0ee:	1dfb      	adds	r3, r7, #7
 800f0f0:	781a      	ldrb	r2, [r3, #0]
 800f0f2:	4939      	ldr	r1, [pc, #228]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f0f4:	0013      	movs	r3, r2
 800f0f6:	011b      	lsls	r3, r3, #4
 800f0f8:	1a9b      	subs	r3, r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	585b      	ldr	r3, [r3, r1]
 800f0fe:	0018      	movs	r0, r3
 800f100:	f7ff fc44 	bl	800e98c <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 800f104:	1dfb      	adds	r3, r7, #7
 800f106:	781a      	ldrb	r2, [r3, #0]
 800f108:	4933      	ldr	r1, [pc, #204]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f10a:	0013      	movs	r3, r2
 800f10c:	011b      	lsls	r3, r3, #4
 800f10e:	1a9b      	subs	r3, r3, r2
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	18cb      	adds	r3, r1, r3
 800f114:	3334      	adds	r3, #52	; 0x34
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d10e      	bne.n	800f13a <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800f11c:	1dfb      	adds	r3, r7, #7
 800f11e:	781a      	ldrb	r2, [r3, #0]
 800f120:	492d      	ldr	r1, [pc, #180]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f122:	0013      	movs	r3, r2
 800f124:	011b      	lsls	r3, r3, #4
 800f126:	1a9b      	subs	r3, r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	585b      	ldr	r3, [r3, r1]
 800f12c:	22c0      	movs	r2, #192	; 0xc0
 800f12e:	0112      	lsls	r2, r2, #4
 800f130:	0011      	movs	r1, r2
 800f132:	0018      	movs	r0, r3
 800f134:	f7ff fc16 	bl	800e964 <LL_UCPD_SetccEnable>
 800f138:	e01b      	b.n	800f172 <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f13a:	1dfb      	adds	r3, r7, #7
 800f13c:	781a      	ldrb	r2, [r3, #0]
 800f13e:	4926      	ldr	r1, [pc, #152]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f140:	0013      	movs	r3, r2
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	1a9b      	subs	r3, r3, r2
 800f146:	009b      	lsls	r3, r3, #2
 800f148:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800f14a:	1dfb      	adds	r3, r7, #7
 800f14c:	781a      	ldrb	r2, [r3, #0]
 800f14e:	4922      	ldr	r1, [pc, #136]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f150:	0013      	movs	r3, r2
 800f152:	011b      	lsls	r3, r3, #4
 800f154:	1a9b      	subs	r3, r3, r2
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	18cb      	adds	r3, r1, r3
 800f15a:	3334      	adds	r3, #52	; 0x34
 800f15c:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d102      	bne.n	800f168 <USBPDM1_AssertRd+0xd0>
 800f162:	2380      	movs	r3, #128	; 0x80
 800f164:	00db      	lsls	r3, r3, #3
 800f166:	e001      	b.n	800f16c <USBPDM1_AssertRd+0xd4>
 800f168:	2380      	movs	r3, #128	; 0x80
 800f16a:	011b      	lsls	r3, r3, #4
 800f16c:	0019      	movs	r1, r3
 800f16e:	f7ff fbf9 	bl	800e964 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800f172:	4b1a      	ldr	r3, [pc, #104]	; (800f1dc <USBPDM1_AssertRd+0x144>)
 800f174:	6819      	ldr	r1, [r3, #0]
 800f176:	1dfb      	adds	r3, r7, #7
 800f178:	781a      	ldrb	r2, [r3, #0]
 800f17a:	4817      	ldr	r0, [pc, #92]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f17c:	0013      	movs	r3, r2
 800f17e:	011b      	lsls	r3, r3, #4
 800f180:	1a9b      	subs	r3, r3, r2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	581b      	ldr	r3, [r3, r0]
 800f186:	4a16      	ldr	r2, [pc, #88]	; (800f1e0 <USBPDM1_AssertRd+0x148>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d102      	bne.n	800f192 <USBPDM1_AssertRd+0xfa>
 800f18c:	2380      	movs	r3, #128	; 0x80
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	e001      	b.n	800f196 <USBPDM1_AssertRd+0xfe>
 800f192:	2380      	movs	r3, #128	; 0x80
 800f194:	00db      	lsls	r3, r3, #3
 800f196:	4a11      	ldr	r2, [pc, #68]	; (800f1dc <USBPDM1_AssertRd+0x144>)
 800f198:	430b      	orrs	r3, r1
 800f19a:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 800f19c:	2001      	movs	r0, #1
 800f19e:	f7f9 fcdd 	bl	8008b5c <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 800f1a2:	1dfb      	adds	r3, r7, #7
 800f1a4:	781a      	ldrb	r2, [r3, #0]
 800f1a6:	490c      	ldr	r1, [pc, #48]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f1a8:	0013      	movs	r3, r2
 800f1aa:	011b      	lsls	r3, r3, #4
 800f1ac:	1a9b      	subs	r3, r3, r2
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	585b      	ldr	r3, [r3, r1]
 800f1b2:	0018      	movs	r0, r3
 800f1b4:	f7ff fb68 	bl	800e888 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 800f1b8:	1dfb      	adds	r3, r7, #7
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	4906      	ldr	r1, [pc, #24]	; (800f1d8 <USBPDM1_AssertRd+0x140>)
 800f1be:	0013      	movs	r3, r2
 800f1c0:	011b      	lsls	r3, r3, #4
 800f1c2:	1a9b      	subs	r3, r3, r2
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	585b      	ldr	r3, [r3, r1]
 800f1c8:	0018      	movs	r0, r3
 800f1ca:	f7ff fb7d 	bl	800e8c8 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 800f1ce:	46c0      	nop			; (mov r8, r8)
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	b002      	add	sp, #8
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	46c0      	nop			; (mov r8, r8)
 800f1d8:	200003f4 	.word	0x200003f4
 800f1dc:	40010000 	.word	0x40010000
 800f1e0:	4000a000 	.word	0x4000a000

0800f1e4 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	0002      	movs	r2, r0
 800f1ec:	1dfb      	adds	r3, r7, #7
 800f1ee:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800f1f0:	46c0      	nop			; (mov r8, r8)
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	b002      	add	sp, #8
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	0002      	movs	r2, r0
 800f200:	1dfb      	adds	r3, r7, #7
 800f202:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800f204:	2001      	movs	r0, #1
 800f206:	f7ff fb0b 	bl	800e820 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800f20a:	1dfb      	adds	r3, r7, #7
 800f20c:	781a      	ldrb	r2, [r3, #0]
 800f20e:	4930      	ldr	r1, [pc, #192]	; (800f2d0 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f210:	0013      	movs	r3, r2
 800f212:	011b      	lsls	r3, r3, #4
 800f214:	1a9b      	subs	r3, r3, r2
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	585b      	ldr	r3, [r3, r1]
 800f21a:	0018      	movs	r0, r3
 800f21c:	f7ff fbc6 	bl	800e9ac <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 800f220:	1dfb      	adds	r3, r7, #7
 800f222:	781a      	ldrb	r2, [r3, #0]
 800f224:	492a      	ldr	r1, [pc, #168]	; (800f2d0 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f226:	0013      	movs	r3, r2
 800f228:	011b      	lsls	r3, r3, #4
 800f22a:	1a9b      	subs	r3, r3, r2
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	585b      	ldr	r3, [r3, r1]
 800f230:	2100      	movs	r1, #0
 800f232:	0018      	movs	r0, r3
 800f234:	f7ff fbca 	bl	800e9cc <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800f238:	1dfb      	adds	r3, r7, #7
 800f23a:	781a      	ldrb	r2, [r3, #0]
 800f23c:	4924      	ldr	r1, [pc, #144]	; (800f2d0 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f23e:	0013      	movs	r3, r2
 800f240:	011b      	lsls	r3, r3, #4
 800f242:	1a9b      	subs	r3, r3, r2
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	585b      	ldr	r3, [r3, r1]
 800f248:	2100      	movs	r1, #0
 800f24a:	0018      	movs	r0, r3
 800f24c:	f7ff fb8a 	bl	800e964 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800f250:	4b20      	ldr	r3, [pc, #128]	; (800f2d4 <USBPDM1_EnterErrorRecovery+0xdc>)
 800f252:	6819      	ldr	r1, [r3, #0]
 800f254:	1dfb      	adds	r3, r7, #7
 800f256:	781a      	ldrb	r2, [r3, #0]
 800f258:	481d      	ldr	r0, [pc, #116]	; (800f2d0 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f25a:	0013      	movs	r3, r2
 800f25c:	011b      	lsls	r3, r3, #4
 800f25e:	1a9b      	subs	r3, r3, r2
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	581b      	ldr	r3, [r3, r0]
 800f264:	4a1c      	ldr	r2, [pc, #112]	; (800f2d8 <USBPDM1_EnterErrorRecovery+0xe0>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d102      	bne.n	800f270 <USBPDM1_EnterErrorRecovery+0x78>
 800f26a:	2380      	movs	r3, #128	; 0x80
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	e001      	b.n	800f274 <USBPDM1_EnterErrorRecovery+0x7c>
 800f270:	2380      	movs	r3, #128	; 0x80
 800f272:	00db      	lsls	r3, r3, #3
 800f274:	4a17      	ldr	r2, [pc, #92]	; (800f2d4 <USBPDM1_EnterErrorRecovery+0xdc>)
 800f276:	430b      	orrs	r3, r1
 800f278:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f27a:	1dfb      	adds	r3, r7, #7
 800f27c:	781a      	ldrb	r2, [r3, #0]
 800f27e:	4914      	ldr	r1, [pc, #80]	; (800f2d0 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f280:	0013      	movs	r3, r2
 800f282:	011b      	lsls	r3, r3, #4
 800f284:	1a9b      	subs	r3, r3, r2
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	585b      	ldr	r3, [r3, r1]
 800f28a:	0018      	movs	r0, r3
 800f28c:	f7ff fbd2 	bl	800ea34 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800f290:	1dfb      	adds	r3, r7, #7
 800f292:	781a      	ldrb	r2, [r3, #0]
 800f294:	490e      	ldr	r1, [pc, #56]	; (800f2d0 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f296:	0013      	movs	r3, r2
 800f298:	011b      	lsls	r3, r3, #4
 800f29a:	1a9b      	subs	r3, r3, r2
 800f29c:	009b      	lsls	r3, r3, #2
 800f29e:	18cb      	adds	r3, r1, r3
 800f2a0:	330c      	adds	r3, #12
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	7a1b      	ldrb	r3, [r3, #8]
 800f2a6:	2202      	movs	r2, #2
 800f2a8:	4013      	ands	r3, r2
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00a      	beq.n	800f2c6 <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800f2b0:	1dfb      	adds	r3, r7, #7
 800f2b2:	781a      	ldrb	r2, [r3, #0]
 800f2b4:	4906      	ldr	r1, [pc, #24]	; (800f2d0 <USBPDM1_EnterErrorRecovery+0xd8>)
 800f2b6:	0013      	movs	r3, r2
 800f2b8:	011b      	lsls	r3, r3, #4
 800f2ba:	1a9b      	subs	r3, r3, r2
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	585b      	ldr	r3, [r3, r1]
 800f2c0:	0018      	movs	r0, r3
 800f2c2:	f7ff fb3f 	bl	800e944 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 800f2c6:	46c0      	nop			; (mov r8, r8)
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	b002      	add	sp, #8
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	46c0      	nop			; (mov r8, r8)
 800f2d0:	200003f4 	.word	0x200003f4
 800f2d4:	40010000 	.word	0x40010000
 800f2d8:	4000a000 	.word	0x4000a000

0800f2dc <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	0002      	movs	r2, r0
 800f2e4:	1dfb      	adds	r3, r7, #7
 800f2e6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 800f2e8:	1dfb      	adds	r3, r7, #7
 800f2ea:	781a      	ldrb	r2, [r3, #0]
 800f2ec:	4906      	ldr	r1, [pc, #24]	; (800f308 <USBPD_HW_IF_EnableRX+0x2c>)
 800f2ee:	0013      	movs	r3, r2
 800f2f0:	011b      	lsls	r3, r3, #4
 800f2f2:	1a9b      	subs	r3, r3, r2
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	585b      	ldr	r3, [r3, r1]
 800f2f8:	0018      	movs	r0, r3
 800f2fa:	f7ff fb8d 	bl	800ea18 <LL_UCPD_RxEnable>
}
 800f2fe:	46c0      	nop			; (mov r8, r8)
 800f300:	46bd      	mov	sp, r7
 800f302:	b002      	add	sp, #8
 800f304:	bd80      	pop	{r7, pc}
 800f306:	46c0      	nop			; (mov r8, r8)
 800f308:	200003f4 	.word	0x200003f4

0800f30c <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	0002      	movs	r2, r0
 800f314:	1dfb      	adds	r3, r7, #7
 800f316:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f318:	1dfb      	adds	r3, r7, #7
 800f31a:	781a      	ldrb	r2, [r3, #0]
 800f31c:	4906      	ldr	r1, [pc, #24]	; (800f338 <USBPD_HW_IF_DisableRX+0x2c>)
 800f31e:	0013      	movs	r3, r2
 800f320:	011b      	lsls	r3, r3, #4
 800f322:	1a9b      	subs	r3, r3, r2
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	585b      	ldr	r3, [r3, r1]
 800f328:	0018      	movs	r0, r3
 800f32a:	f7ff fb83 	bl	800ea34 <LL_UCPD_RxDisable>
}
 800f32e:	46c0      	nop			; (mov r8, r8)
 800f330:	46bd      	mov	sp, r7
 800f332:	b002      	add	sp, #8
 800f334:	bd80      	pop	{r7, pc}
 800f336:	46c0      	nop			; (mov r8, r8)
 800f338:	200003f4 	.word	0x200003f4

0800f33c <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b085      	sub	sp, #20
 800f340:	af00      	add	r7, sp, #0
 800f342:	0002      	movs	r2, r0
 800f344:	6039      	str	r1, [r7, #0]
 800f346:	1dfb      	adds	r3, r7, #7
 800f348:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 800f34a:	f000 fc65 	bl	800fc18 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 800f34e:	1dfb      	adds	r3, r7, #7
 800f350:	781c      	ldrb	r4, [r3, #0]
 800f352:	1dfb      	adds	r3, r7, #7
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	0018      	movs	r0, r3
 800f358:	f7fe fd32 	bl	800ddc0 <USBPD_HW_Init_DMATxInstance>
 800f35c:	0001      	movs	r1, r0
 800f35e:	4aa6      	ldr	r2, [pc, #664]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f360:	0023      	movs	r3, r4
 800f362:	011b      	lsls	r3, r3, #4
 800f364:	1b1b      	subs	r3, r3, r4
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	18d3      	adds	r3, r2, r3
 800f36a:	3304      	adds	r3, #4
 800f36c:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 800f36e:	1dfb      	adds	r3, r7, #7
 800f370:	781c      	ldrb	r4, [r3, #0]
 800f372:	1dfb      	adds	r3, r7, #7
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	0018      	movs	r0, r3
 800f378:	f7fe fcd2 	bl	800dd20 <USBPD_HW_Init_DMARxInstance>
 800f37c:	0001      	movs	r1, r0
 800f37e:	4a9e      	ldr	r2, [pc, #632]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f380:	0023      	movs	r3, r4
 800f382:	011b      	lsls	r3, r3, #4
 800f384:	1b1b      	subs	r3, r3, r4
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	18d3      	adds	r3, r2, r3
 800f38a:	3308      	adds	r3, #8
 800f38c:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 800f38e:	1dfb      	adds	r3, r7, #7
 800f390:	781a      	ldrb	r2, [r3, #0]
 800f392:	4999      	ldr	r1, [pc, #612]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f394:	0013      	movs	r3, r2
 800f396:	011b      	lsls	r3, r3, #4
 800f398:	1a9b      	subs	r3, r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	585b      	ldr	r3, [r3, r1]
 800f39e:	3330      	adds	r3, #48	; 0x30
 800f3a0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 800f3a2:	1dfb      	adds	r3, r7, #7
 800f3a4:	781a      	ldrb	r2, [r3, #0]
 800f3a6:	4994      	ldr	r1, [pc, #592]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f3a8:	0013      	movs	r3, r2
 800f3aa:	011b      	lsls	r3, r3, #4
 800f3ac:	1a9b      	subs	r3, r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	18cb      	adds	r3, r1, r3
 800f3b2:	3308      	adds	r3, #8
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800f3ba:	1dfb      	adds	r3, r7, #7
 800f3bc:	781a      	ldrb	r2, [r3, #0]
 800f3be:	498e      	ldr	r1, [pc, #568]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f3c0:	0013      	movs	r3, r2
 800f3c2:	011b      	lsls	r3, r3, #4
 800f3c4:	1a9b      	subs	r3, r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	18cb      	adds	r3, r1, r3
 800f3ca:	3330      	adds	r3, #48	; 0x30
 800f3cc:	6818      	ldr	r0, [r3, #0]
 800f3ce:	1dfb      	adds	r3, r7, #7
 800f3d0:	781a      	ldrb	r2, [r3, #0]
 800f3d2:	4989      	ldr	r1, [pc, #548]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f3d4:	0013      	movs	r3, r2
 800f3d6:	011b      	lsls	r3, r3, #4
 800f3d8:	1a9b      	subs	r3, r3, r2
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	18cb      	adds	r3, r1, r3
 800f3de:	3308      	adds	r3, #8
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	0002      	movs	r2, r0
 800f3e4:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 800f3e6:	1dfb      	adds	r3, r7, #7
 800f3e8:	781a      	ldrb	r2, [r3, #0]
 800f3ea:	4983      	ldr	r1, [pc, #524]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f3ec:	0013      	movs	r3, r2
 800f3ee:	011b      	lsls	r3, r3, #4
 800f3f0:	1a9b      	subs	r3, r3, r2
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	18cb      	adds	r3, r1, r3
 800f3f6:	3308      	adds	r3, #8
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2284      	movs	r2, #132	; 0x84
 800f3fc:	0052      	lsls	r2, r2, #1
 800f3fe:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 800f400:	1dfb      	adds	r3, r7, #7
 800f402:	781a      	ldrb	r2, [r3, #0]
 800f404:	497c      	ldr	r1, [pc, #496]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f406:	0013      	movs	r3, r2
 800f408:	011b      	lsls	r3, r3, #4
 800f40a:	1a9b      	subs	r3, r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	18cb      	adds	r3, r1, r3
 800f410:	3308      	adds	r3, #8
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	6819      	ldr	r1, [r3, #0]
 800f416:	1dfb      	adds	r3, r7, #7
 800f418:	781a      	ldrb	r2, [r3, #0]
 800f41a:	4877      	ldr	r0, [pc, #476]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f41c:	0013      	movs	r3, r2
 800f41e:	011b      	lsls	r3, r3, #4
 800f420:	1a9b      	subs	r3, r3, r2
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	18c3      	adds	r3, r0, r3
 800f426:	3308      	adds	r3, #8
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2201      	movs	r2, #1
 800f42c:	430a      	orrs	r2, r1
 800f42e:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 800f430:	1dfb      	adds	r3, r7, #7
 800f432:	781a      	ldrb	r2, [r3, #0]
 800f434:	4970      	ldr	r1, [pc, #448]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f436:	0013      	movs	r3, r2
 800f438:	011b      	lsls	r3, r3, #4
 800f43a:	1a9b      	subs	r3, r3, r2
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	585b      	ldr	r3, [r3, r1]
 800f440:	3324      	adds	r3, #36	; 0x24
 800f442:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 800f444:	1dfb      	adds	r3, r7, #7
 800f446:	781a      	ldrb	r2, [r3, #0]
 800f448:	496b      	ldr	r1, [pc, #428]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f44a:	0013      	movs	r3, r2
 800f44c:	011b      	lsls	r3, r3, #4
 800f44e:	1a9b      	subs	r3, r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	18cb      	adds	r3, r1, r3
 800f454:	3304      	adds	r3, #4
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 800f45c:	1dfb      	adds	r3, r7, #7
 800f45e:	781a      	ldrb	r2, [r3, #0]
 800f460:	4965      	ldr	r1, [pc, #404]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f462:	0013      	movs	r3, r2
 800f464:	011b      	lsls	r3, r3, #4
 800f466:	1a9b      	subs	r3, r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	585b      	ldr	r3, [r3, r1]
 800f46c:	6919      	ldr	r1, [r3, #16]
 800f46e:	1dfb      	adds	r3, r7, #7
 800f470:	781a      	ldrb	r2, [r3, #0]
 800f472:	4861      	ldr	r0, [pc, #388]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f474:	0013      	movs	r3, r2
 800f476:	011b      	lsls	r3, r3, #4
 800f478:	1a9b      	subs	r3, r3, r2
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	581b      	ldr	r3, [r3, r0]
 800f47e:	4a5f      	ldr	r2, [pc, #380]	; (800f5fc <HW_SignalAttachement+0x2c0>)
 800f480:	430a      	orrs	r2, r1
 800f482:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 800f484:	1dfb      	adds	r3, r7, #7
 800f486:	781a      	ldrb	r2, [r3, #0]
 800f488:	495b      	ldr	r1, [pc, #364]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f48a:	0013      	movs	r3, r2
 800f48c:	011b      	lsls	r3, r3, #4
 800f48e:	1a9b      	subs	r3, r3, r2
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	18cb      	adds	r3, r1, r3
 800f494:	3334      	adds	r3, #52	; 0x34
 800f496:	683a      	ldr	r2, [r7, #0]
 800f498:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 800f49a:	1dfb      	adds	r3, r7, #7
 800f49c:	781a      	ldrb	r2, [r3, #0]
 800f49e:	4956      	ldr	r1, [pc, #344]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f4a0:	0013      	movs	r3, r2
 800f4a2:	011b      	lsls	r3, r3, #4
 800f4a4:	1a9b      	subs	r3, r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	5858      	ldr	r0, [r3, r1]
 800f4aa:	1dfb      	adds	r3, r7, #7
 800f4ac:	781a      	ldrb	r2, [r3, #0]
 800f4ae:	4952      	ldr	r1, [pc, #328]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f4b0:	0013      	movs	r3, r2
 800f4b2:	011b      	lsls	r3, r3, #4
 800f4b4:	1a9b      	subs	r3, r3, r2
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	18cb      	adds	r3, r1, r3
 800f4ba:	3334      	adds	r3, #52	; 0x34
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d101      	bne.n	800f4c6 <HW_SignalAttachement+0x18a>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	e000      	b.n	800f4c8 <HW_SignalAttachement+0x18c>
 800f4c6:	2340      	movs	r3, #64	; 0x40
 800f4c8:	0019      	movs	r1, r3
 800f4ca:	f7ff fa93 	bl	800e9f4 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800f4ce:	1dfb      	adds	r3, r7, #7
 800f4d0:	781a      	ldrb	r2, [r3, #0]
 800f4d2:	4949      	ldr	r1, [pc, #292]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f4d4:	0013      	movs	r3, r2
 800f4d6:	011b      	lsls	r3, r3, #4
 800f4d8:	1a9b      	subs	r3, r3, r2
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	18cb      	adds	r3, r1, r3
 800f4de:	330c      	adds	r3, #12
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	7a1b      	ldrb	r3, [r3, #8]
 800f4e4:	2202      	movs	r2, #2
 800f4e6:	4013      	ands	r3, r2
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d034      	beq.n	800f558 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 800f4ee:	1dfb      	adds	r3, r7, #7
 800f4f0:	781a      	ldrb	r2, [r3, #0]
 800f4f2:	4941      	ldr	r1, [pc, #260]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f4f4:	0013      	movs	r3, r2
 800f4f6:	011b      	lsls	r3, r3, #4
 800f4f8:	1a9b      	subs	r3, r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	18cb      	adds	r3, r1, r3
 800f4fe:	3334      	adds	r3, #52	; 0x34
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b01      	cmp	r3, #1
 800f504:	d101      	bne.n	800f50a <HW_SignalAttachement+0x1ce>
 800f506:	2301      	movs	r3, #1
 800f508:	e000      	b.n	800f50c <HW_SignalAttachement+0x1d0>
 800f50a:	2302      	movs	r3, #2
 800f50c:	1dfa      	adds	r2, r7, #7
 800f50e:	7812      	ldrb	r2, [r2, #0]
 800f510:	0019      	movs	r1, r3
 800f512:	0010      	movs	r0, r2
 800f514:	f7fe fca4 	bl	800de60 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 800f518:	1dfb      	adds	r3, r7, #7
 800f51a:	781a      	ldrb	r2, [r3, #0]
 800f51c:	4936      	ldr	r1, [pc, #216]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f51e:	0013      	movs	r3, r2
 800f520:	011b      	lsls	r3, r3, #4
 800f522:	1a9b      	subs	r3, r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	585b      	ldr	r3, [r3, r1]
 800f528:	0018      	movs	r0, r3
 800f52a:	f7ff f9fb 	bl	800e924 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 800f52e:	1dfb      	adds	r3, r7, #7
 800f530:	781a      	ldrb	r2, [r3, #0]
 800f532:	4931      	ldr	r1, [pc, #196]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f534:	0013      	movs	r3, r2
 800f536:	011b      	lsls	r3, r3, #4
 800f538:	1a9b      	subs	r3, r3, r2
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	585b      	ldr	r3, [r3, r1]
 800f53e:	6919      	ldr	r1, [r3, #16]
 800f540:	1dfb      	adds	r3, r7, #7
 800f542:	781a      	ldrb	r2, [r3, #0]
 800f544:	482c      	ldr	r0, [pc, #176]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f546:	0013      	movs	r3, r2
 800f548:	011b      	lsls	r3, r3, #4
 800f54a:	1a9b      	subs	r3, r3, r2
 800f54c:	009b      	lsls	r3, r3, #2
 800f54e:	581b      	ldr	r3, [r3, r0]
 800f550:	2280      	movs	r2, #128	; 0x80
 800f552:	0352      	lsls	r2, r2, #13
 800f554:	430a      	orrs	r2, r1
 800f556:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 800f558:	1dfb      	adds	r3, r7, #7
 800f55a:	781a      	ldrb	r2, [r3, #0]
 800f55c:	4926      	ldr	r1, [pc, #152]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f55e:	0013      	movs	r3, r2
 800f560:	011b      	lsls	r3, r3, #4
 800f562:	1a9b      	subs	r3, r3, r2
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	18cb      	adds	r3, r1, r3
 800f568:	3334      	adds	r3, #52	; 0x34
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d10e      	bne.n	800f58e <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 800f570:	1dfb      	adds	r3, r7, #7
 800f572:	781a      	ldrb	r2, [r3, #0]
 800f574:	4920      	ldr	r1, [pc, #128]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f576:	0013      	movs	r3, r2
 800f578:	011b      	lsls	r3, r3, #4
 800f57a:	1a9b      	subs	r3, r3, r2
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	585b      	ldr	r3, [r3, r1]
 800f580:	2280      	movs	r2, #128	; 0x80
 800f582:	00d2      	lsls	r2, r2, #3
 800f584:	0011      	movs	r1, r2
 800f586:	0018      	movs	r0, r3
 800f588:	f7ff f9ec 	bl	800e964 <LL_UCPD_SetccEnable>
 800f58c:	e00d      	b.n	800f5aa <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 800f58e:	1dfb      	adds	r3, r7, #7
 800f590:	781a      	ldrb	r2, [r3, #0]
 800f592:	4919      	ldr	r1, [pc, #100]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f594:	0013      	movs	r3, r2
 800f596:	011b      	lsls	r3, r3, #4
 800f598:	1a9b      	subs	r3, r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	585b      	ldr	r3, [r3, r1]
 800f59e:	2280      	movs	r2, #128	; 0x80
 800f5a0:	0112      	lsls	r2, r2, #4
 800f5a2:	0011      	movs	r1, r2
 800f5a4:	0018      	movs	r0, r3
 800f5a6:	f7ff f9dd 	bl	800e964 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 800f5aa:	1dfb      	adds	r3, r7, #7
 800f5ac:	781a      	ldrb	r2, [r3, #0]
 800f5ae:	4912      	ldr	r1, [pc, #72]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f5b0:	0013      	movs	r3, r2
 800f5b2:	011b      	lsls	r3, r3, #4
 800f5b4:	1a9b      	subs	r3, r3, r2
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	585b      	ldr	r3, [r3, r1]
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	0018      	movs	r0, r3
 800f5be:	f7ff fa48 	bl	800ea52 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 800f5c2:	1dfb      	adds	r3, r7, #7
 800f5c4:	781a      	ldrb	r2, [r3, #0]
 800f5c6:	490c      	ldr	r1, [pc, #48]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f5c8:	0013      	movs	r3, r2
 800f5ca:	011b      	lsls	r3, r3, #4
 800f5cc:	1a9b      	subs	r3, r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	585b      	ldr	r3, [r3, r1]
 800f5d2:	0018      	movs	r0, r3
 800f5d4:	f7ff fa7d 	bl	800ead2 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 800f5d8:	1dfb      	adds	r3, r7, #7
 800f5da:	781a      	ldrb	r2, [r3, #0]
 800f5dc:	4906      	ldr	r1, [pc, #24]	; (800f5f8 <HW_SignalAttachement+0x2bc>)
 800f5de:	0013      	movs	r3, r2
 800f5e0:	011b      	lsls	r3, r3, #4
 800f5e2:	1a9b      	subs	r3, r3, r2
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	585b      	ldr	r3, [r3, r1]
 800f5e8:	0018      	movs	r0, r3
 800f5ea:	f7ff fa91 	bl	800eb10 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800f5ee:	46c0      	nop			; (mov r8, r8)
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	b005      	add	sp, #20
 800f5f4:	bd90      	pop	{r4, r7, pc}
 800f5f6:	46c0      	nop			; (mov r8, r8)
 800f5f8:	200003f4 	.word	0x200003f4
 800f5fc:	00001e7e 	.word	0x00001e7e

0800f600 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	0002      	movs	r2, r0
 800f608:	1dfb      	adds	r3, r7, #7
 800f60a:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 800f60c:	1dfb      	adds	r3, r7, #7
 800f60e:	781a      	ldrb	r2, [r3, #0]
 800f610:	4941      	ldr	r1, [pc, #260]	; (800f718 <HW_SignalDetachment+0x118>)
 800f612:	0013      	movs	r3, r2
 800f614:	011b      	lsls	r3, r3, #4
 800f616:	1a9b      	subs	r3, r3, r2
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	585b      	ldr	r3, [r3, r1]
 800f61c:	0018      	movs	r0, r3
 800f61e:	f7ff fa67 	bl	800eaf0 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 800f622:	1dfb      	adds	r3, r7, #7
 800f624:	781a      	ldrb	r2, [r3, #0]
 800f626:	493c      	ldr	r1, [pc, #240]	; (800f718 <HW_SignalDetachment+0x118>)
 800f628:	0013      	movs	r3, r2
 800f62a:	011b      	lsls	r3, r3, #4
 800f62c:	1a9b      	subs	r3, r3, r2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	585b      	ldr	r3, [r3, r1]
 800f632:	0018      	movs	r0, r3
 800f634:	f7ff fa7c 	bl	800eb30 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800f638:	1dfb      	adds	r3, r7, #7
 800f63a:	781a      	ldrb	r2, [r3, #0]
 800f63c:	4936      	ldr	r1, [pc, #216]	; (800f718 <HW_SignalDetachment+0x118>)
 800f63e:	0013      	movs	r3, r2
 800f640:	011b      	lsls	r3, r3, #4
 800f642:	1a9b      	subs	r3, r3, r2
 800f644:	009b      	lsls	r3, r3, #2
 800f646:	585b      	ldr	r3, [r3, r1]
 800f648:	0018      	movs	r0, r3
 800f64a:	f7ff f9f3 	bl	800ea34 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 800f64e:	1dfb      	adds	r3, r7, #7
 800f650:	781a      	ldrb	r2, [r3, #0]
 800f652:	4931      	ldr	r1, [pc, #196]	; (800f718 <HW_SignalDetachment+0x118>)
 800f654:	0013      	movs	r3, r2
 800f656:	011b      	lsls	r3, r3, #4
 800f658:	1a9b      	subs	r3, r3, r2
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	585b      	ldr	r3, [r3, r1]
 800f65e:	22c0      	movs	r2, #192	; 0xc0
 800f660:	0212      	lsls	r2, r2, #8
 800f662:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 800f664:	1dfb      	adds	r3, r7, #7
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	0018      	movs	r0, r3
 800f66a:	f7fe fbef 	bl	800de4c <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 800f66e:	1dfb      	adds	r3, r7, #7
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	0018      	movs	r0, r3
 800f674:	f7fe fb9a 	bl	800ddac <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800f678:	1dfb      	adds	r3, r7, #7
 800f67a:	781a      	ldrb	r2, [r3, #0]
 800f67c:	4926      	ldr	r1, [pc, #152]	; (800f718 <HW_SignalDetachment+0x118>)
 800f67e:	0013      	movs	r3, r2
 800f680:	011b      	lsls	r3, r3, #4
 800f682:	1a9b      	subs	r3, r3, r2
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	585b      	ldr	r3, [r3, r1]
 800f688:	22c0      	movs	r2, #192	; 0xc0
 800f68a:	0112      	lsls	r2, r2, #4
 800f68c:	0011      	movs	r1, r2
 800f68e:	0018      	movs	r0, r3
 800f690:	f7ff f968 	bl	800e964 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 800f694:	1dfb      	adds	r3, r7, #7
 800f696:	781a      	ldrb	r2, [r3, #0]
 800f698:	491f      	ldr	r1, [pc, #124]	; (800f718 <HW_SignalDetachment+0x118>)
 800f69a:	0013      	movs	r3, r2
 800f69c:	011b      	lsls	r3, r3, #4
 800f69e:	1a9b      	subs	r3, r3, r2
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	18cb      	adds	r3, r1, r3
 800f6a4:	3310      	adds	r3, #16
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	2204      	movs	r2, #4
 800f6ac:	4013      	ands	r3, r2
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d104      	bne.n	800f6be <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800f6b4:	1dfb      	adds	r3, r7, #7
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	0018      	movs	r0, r3
 800f6ba:	f005 f895 	bl	80147e8 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800f6be:	1dfb      	adds	r3, r7, #7
 800f6c0:	781a      	ldrb	r2, [r3, #0]
 800f6c2:	4915      	ldr	r1, [pc, #84]	; (800f718 <HW_SignalDetachment+0x118>)
 800f6c4:	0013      	movs	r3, r2
 800f6c6:	011b      	lsls	r3, r3, #4
 800f6c8:	1a9b      	subs	r3, r3, r2
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	18cb      	adds	r3, r1, r3
 800f6ce:	330c      	adds	r3, #12
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	7a1b      	ldrb	r3, [r3, #8]
 800f6d4:	2202      	movs	r2, #2
 800f6d6:	4013      	ands	r3, r2
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d00a      	beq.n	800f6f4 <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800f6de:	1dfb      	adds	r3, r7, #7
 800f6e0:	781a      	ldrb	r2, [r3, #0]
 800f6e2:	490d      	ldr	r1, [pc, #52]	; (800f718 <HW_SignalDetachment+0x118>)
 800f6e4:	0013      	movs	r3, r2
 800f6e6:	011b      	lsls	r3, r3, #4
 800f6e8:	1a9b      	subs	r3, r3, r2
 800f6ea:	009b      	lsls	r3, r3, #2
 800f6ec:	585b      	ldr	r3, [r3, r1]
 800f6ee:	0018      	movs	r0, r3
 800f6f0:	f7ff f928 	bl	800e944 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 800f6f4:	1dfb      	adds	r3, r7, #7
 800f6f6:	781a      	ldrb	r2, [r3, #0]
 800f6f8:	4907      	ldr	r1, [pc, #28]	; (800f718 <HW_SignalDetachment+0x118>)
 800f6fa:	0013      	movs	r3, r2
 800f6fc:	011b      	lsls	r3, r3, #4
 800f6fe:	1a9b      	subs	r3, r3, r2
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	18cb      	adds	r3, r1, r3
 800f704:	3334      	adds	r3, #52	; 0x34
 800f706:	2200      	movs	r2, #0
 800f708:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 800f70a:	f000 fb25 	bl	800fd58 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800f70e:	46c0      	nop			; (mov r8, r8)
 800f710:	46bd      	mov	sp, r7
 800f712:	b002      	add	sp, #8
 800f714:	bd80      	pop	{r7, pc}
 800f716:	46c0      	nop			; (mov r8, r8)
 800f718:	200003f4 	.word	0x200003f4

0800f71c <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	0002      	movs	r2, r0
 800f724:	1dfb      	adds	r3, r7, #7
 800f726:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800f728:	1dfb      	adds	r3, r7, #7
 800f72a:	781a      	ldrb	r2, [r3, #0]
 800f72c:	4907      	ldr	r1, [pc, #28]	; (800f74c <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 800f72e:	0013      	movs	r3, r2
 800f730:	011b      	lsls	r3, r3, #4
 800f732:	1a9b      	subs	r3, r3, r2
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	585b      	ldr	r3, [r3, r1]
 800f738:	2280      	movs	r2, #128	; 0x80
 800f73a:	0052      	lsls	r2, r2, #1
 800f73c:	0011      	movs	r1, r2
 800f73e:	0018      	movs	r0, r3
 800f740:	f7ff f944 	bl	800e9cc <LL_UCPD_SetRpResistor>
}
 800f744:	46c0      	nop			; (mov r8, r8)
 800f746:	46bd      	mov	sp, r7
 800f748:	b002      	add	sp, #8
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	200003f4 	.word	0x200003f4

0800f750 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	0002      	movs	r2, r0
 800f758:	1dfb      	adds	r3, r7, #7
 800f75a:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800f75c:	1dfb      	adds	r3, r7, #7
 800f75e:	781a      	ldrb	r2, [r3, #0]
 800f760:	4907      	ldr	r1, [pc, #28]	; (800f780 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 800f762:	0013      	movs	r3, r2
 800f764:	011b      	lsls	r3, r3, #4
 800f766:	1a9b      	subs	r3, r3, r2
 800f768:	009b      	lsls	r3, r3, #2
 800f76a:	585b      	ldr	r3, [r3, r1]
 800f76c:	22c0      	movs	r2, #192	; 0xc0
 800f76e:	0052      	lsls	r2, r2, #1
 800f770:	0011      	movs	r1, r2
 800f772:	0018      	movs	r0, r3
 800f774:	f7ff f92a 	bl	800e9cc <LL_UCPD_SetRpResistor>
}
 800f778:	46c0      	nop			; (mov r8, r8)
 800f77a:	46bd      	mov	sp, r7
 800f77c:	b002      	add	sp, #8
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	200003f4 	.word	0x200003f4

0800f784 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	0002      	movs	r2, r0
 800f78c:	1dfb      	adds	r3, r7, #7
 800f78e:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 800f790:	1dfb      	adds	r3, r7, #7
 800f792:	781a      	ldrb	r2, [r3, #0]
 800f794:	491c      	ldr	r1, [pc, #112]	; (800f808 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800f796:	0013      	movs	r3, r2
 800f798:	011b      	lsls	r3, r3, #4
 800f79a:	1a9b      	subs	r3, r3, r2
 800f79c:	009b      	lsls	r3, r3, #2
 800f79e:	18cb      	adds	r3, r1, r3
 800f7a0:	3334      	adds	r3, #52	; 0x34
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d002      	beq.n	800f7ae <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 800f7a8:	2b02      	cmp	r3, #2
 800f7aa:	d012      	beq.n	800f7d2 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 800f7ac:	e026      	b.n	800f7fc <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 800f7ae:	1dfb      	adds	r3, r7, #7
 800f7b0:	781a      	ldrb	r2, [r3, #0]
 800f7b2:	4915      	ldr	r1, [pc, #84]	; (800f808 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800f7b4:	0013      	movs	r3, r2
 800f7b6:	011b      	lsls	r3, r3, #4
 800f7b8:	1a9b      	subs	r3, r3, r2
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	585b      	ldr	r3, [r3, r1]
 800f7be:	695a      	ldr	r2, [r3, #20]
 800f7c0:	23c0      	movs	r3, #192	; 0xc0
 800f7c2:	029b      	lsls	r3, r3, #10
 800f7c4:	401a      	ands	r2, r3
 800f7c6:	23c0      	movs	r3, #192	; 0xc0
 800f7c8:	029b      	lsls	r3, r3, #10
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d113      	bne.n	800f7f6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e015      	b.n	800f7fe <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 800f7d2:	1dfb      	adds	r3, r7, #7
 800f7d4:	781a      	ldrb	r2, [r3, #0]
 800f7d6:	490c      	ldr	r1, [pc, #48]	; (800f808 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800f7d8:	0013      	movs	r3, r2
 800f7da:	011b      	lsls	r3, r3, #4
 800f7dc:	1a9b      	subs	r3, r3, r2
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	585b      	ldr	r3, [r3, r1]
 800f7e2:	695a      	ldr	r2, [r3, #20]
 800f7e4:	23c0      	movs	r3, #192	; 0xc0
 800f7e6:	031b      	lsls	r3, r3, #12
 800f7e8:	401a      	ands	r2, r3
 800f7ea:	23c0      	movs	r3, #192	; 0xc0
 800f7ec:	031b      	lsls	r3, r3, #12
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d103      	bne.n	800f7fa <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e003      	b.n	800f7fe <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 800f7f6:	46c0      	nop			; (mov r8, r8)
 800f7f8:	e000      	b.n	800f7fc <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 800f7fa:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	0018      	movs	r0, r3
 800f800:	46bd      	mov	sp, r7
 800f802:	b002      	add	sp, #8
 800f804:	bd80      	pop	{r7, pc}
 800f806:	46c0      	nop			; (mov r8, r8)
 800f808:	200003f4 	.word	0x200003f4

0800f80c <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	0002      	movs	r2, r0
 800f814:	1dfb      	adds	r3, r7, #7
 800f816:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 800f818:	1dfb      	adds	r3, r7, #7
 800f81a:	781a      	ldrb	r2, [r3, #0]
 800f81c:	4906      	ldr	r1, [pc, #24]	; (800f838 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 800f81e:	0013      	movs	r3, r2
 800f820:	011b      	lsls	r3, r3, #4
 800f822:	1a9b      	subs	r3, r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	585b      	ldr	r3, [r3, r1]
 800f828:	0018      	movs	r0, r3
 800f82a:	f7ff f86c 	bl	800e906 <LL_UCPD_SignalFRSTX>
}
 800f82e:	46c0      	nop			; (mov r8, r8)
 800f830:	46bd      	mov	sp, r7
 800f832:	b002      	add	sp, #8
 800f834:	bd80      	pop	{r7, pc}
 800f836:	46c0      	nop			; (mov r8, r8)
 800f838:	200003f4 	.word	0x200003f4

0800f83c <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	0002      	movs	r2, r0
 800f844:	1dfb      	adds	r3, r7, #7
 800f846:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 800f848:	1dfb      	adds	r3, r7, #7
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	220c      	movs	r2, #12
 800f84e:	18ba      	adds	r2, r7, r2
 800f850:	0011      	movs	r1, r2
 800f852:	0018      	movs	r0, r3
 800f854:	f004 ffe6 	bl	8014824 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	b29b      	uxth	r3, r3
}
 800f85c:	0018      	movs	r0, r3
 800f85e:	46bd      	mov	sp, r7
 800f860:	b004      	add	sp, #16
 800f862:	bd80      	pop	{r7, pc}

0800f864 <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	0002      	movs	r2, r0
 800f86c:	1dfb      	adds	r3, r7, #7
 800f86e:	701a      	strb	r2, [r3, #0]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 800f870:	1dfb      	adds	r3, r7, #7
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	220c      	movs	r2, #12
 800f876:	18ba      	adds	r2, r7, r2
 800f878:	0011      	movs	r1, r2
 800f87a:	0018      	movs	r0, r3
 800f87c:	f005 f810 	bl	80148a0 <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	b21b      	sxth	r3, r3
}
 800f884:	0018      	movs	r0, r3
 800f886:	46bd      	mov	sp, r7
 800f888:	b004      	add	sp, #16
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <LL_APB2_GRP1_EnableClock>:
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800f894:	4b07      	ldr	r3, [pc, #28]	; (800f8b4 <LL_APB2_GRP1_EnableClock+0x28>)
 800f896:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f898:	4b06      	ldr	r3, [pc, #24]	; (800f8b4 <LL_APB2_GRP1_EnableClock+0x28>)
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	430a      	orrs	r2, r1
 800f89e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800f8a0:	4b04      	ldr	r3, [pc, #16]	; (800f8b4 <LL_APB2_GRP1_EnableClock+0x28>)
 800f8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	4013      	ands	r3, r2
 800f8a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
}
 800f8ac:	46c0      	nop			; (mov r8, r8)
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	b004      	add	sp, #16
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	40021000 	.word	0x40021000

0800f8b8 <LL_APB2_GRP1_DisableClock>:
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 800f8c0:	4b05      	ldr	r3, [pc, #20]	; (800f8d8 <LL_APB2_GRP1_DisableClock+0x20>)
 800f8c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	43d9      	mvns	r1, r3
 800f8c8:	4b03      	ldr	r3, [pc, #12]	; (800f8d8 <LL_APB2_GRP1_DisableClock+0x20>)
 800f8ca:	400a      	ands	r2, r1
 800f8cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f8ce:	46c0      	nop			; (mov r8, r8)
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	b002      	add	sp, #8
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	46c0      	nop			; (mov r8, r8)
 800f8d8:	40021000 	.word	0x40021000

0800f8dc <LL_TIM_EnableCounter>:
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	431a      	orrs	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	601a      	str	r2, [r3, #0]
}
 800f8f0:	46c0      	nop			; (mov r8, r8)
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	b002      	add	sp, #8
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <LL_TIM_SetCounterMode>:
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	2270      	movs	r2, #112	; 0x70
 800f908:	4393      	bics	r3, r2
 800f90a:	001a      	movs	r2, r3
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	431a      	orrs	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	601a      	str	r2, [r3, #0]
}
 800f914:	46c0      	nop			; (mov r8, r8)
 800f916:	46bd      	mov	sp, r7
 800f918:	b002      	add	sp, #8
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <LL_TIM_SetPrescaler>:
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f92c:	46c0      	nop			; (mov r8, r8)
 800f92e:	46bd      	mov	sp, r7
 800f930:	b002      	add	sp, #8
 800f932:	bd80      	pop	{r7, pc}

0800f934 <LL_TIM_GetPrescaler>:
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f940:	0018      	movs	r0, r3
 800f942:	46bd      	mov	sp, r7
 800f944:	b002      	add	sp, #8
 800f946:	bd80      	pop	{r7, pc}

0800f948 <LL_TIM_SetAutoReload>:
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	683a      	ldr	r2, [r7, #0]
 800f956:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f958:	46c0      	nop			; (mov r8, r8)
 800f95a:	46bd      	mov	sp, r7
 800f95c:	b002      	add	sp, #8
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <LL_TIM_OC_SetMode>:
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b086      	sub	sp, #24
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d02c      	beq.n	800f9cc <LL_TIM_OC_SetMode+0x6c>
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	2b04      	cmp	r3, #4
 800f976:	d027      	beq.n	800f9c8 <LL_TIM_OC_SetMode+0x68>
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	2b10      	cmp	r3, #16
 800f97c:	d022      	beq.n	800f9c4 <LL_TIM_OC_SetMode+0x64>
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	2b40      	cmp	r3, #64	; 0x40
 800f982:	d01d      	beq.n	800f9c0 <LL_TIM_OC_SetMode+0x60>
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	2380      	movs	r3, #128	; 0x80
 800f988:	005b      	lsls	r3, r3, #1
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d016      	beq.n	800f9bc <LL_TIM_OC_SetMode+0x5c>
 800f98e:	68ba      	ldr	r2, [r7, #8]
 800f990:	2380      	movs	r3, #128	; 0x80
 800f992:	00db      	lsls	r3, r3, #3
 800f994:	429a      	cmp	r2, r3
 800f996:	d00f      	beq.n	800f9b8 <LL_TIM_OC_SetMode+0x58>
 800f998:	68ba      	ldr	r2, [r7, #8]
 800f99a:	2380      	movs	r3, #128	; 0x80
 800f99c:	015b      	lsls	r3, r3, #5
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d008      	beq.n	800f9b4 <LL_TIM_OC_SetMode+0x54>
 800f9a2:	68ba      	ldr	r2, [r7, #8]
 800f9a4:	2380      	movs	r3, #128	; 0x80
 800f9a6:	025b      	lsls	r3, r3, #9
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d101      	bne.n	800f9b0 <LL_TIM_OC_SetMode+0x50>
 800f9ac:	2307      	movs	r3, #7
 800f9ae:	e00e      	b.n	800f9ce <LL_TIM_OC_SetMode+0x6e>
 800f9b0:	2308      	movs	r3, #8
 800f9b2:	e00c      	b.n	800f9ce <LL_TIM_OC_SetMode+0x6e>
 800f9b4:	2306      	movs	r3, #6
 800f9b6:	e00a      	b.n	800f9ce <LL_TIM_OC_SetMode+0x6e>
 800f9b8:	2305      	movs	r3, #5
 800f9ba:	e008      	b.n	800f9ce <LL_TIM_OC_SetMode+0x6e>
 800f9bc:	2304      	movs	r3, #4
 800f9be:	e006      	b.n	800f9ce <LL_TIM_OC_SetMode+0x6e>
 800f9c0:	2303      	movs	r3, #3
 800f9c2:	e004      	b.n	800f9ce <LL_TIM_OC_SetMode+0x6e>
 800f9c4:	2302      	movs	r3, #2
 800f9c6:	e002      	b.n	800f9ce <LL_TIM_OC_SetMode+0x6e>
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e000      	b.n	800f9ce <LL_TIM_OC_SetMode+0x6e>
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	2017      	movs	r0, #23
 800f9d0:	183a      	adds	r2, r7, r0
 800f9d2:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	3318      	adds	r3, #24
 800f9d8:	0019      	movs	r1, r3
 800f9da:	183b      	adds	r3, r7, r0
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	4a0e      	ldr	r2, [pc, #56]	; (800fa18 <LL_TIM_OC_SetMode+0xb8>)
 800f9e0:	5cd3      	ldrb	r3, [r2, r3]
 800f9e2:	18cb      	adds	r3, r1, r3
 800f9e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	183a      	adds	r2, r7, r0
 800f9ec:	7812      	ldrb	r2, [r2, #0]
 800f9ee:	490b      	ldr	r1, [pc, #44]	; (800fa1c <LL_TIM_OC_SetMode+0xbc>)
 800f9f0:	5c8a      	ldrb	r2, [r1, r2]
 800f9f2:	0011      	movs	r1, r2
 800f9f4:	4a0a      	ldr	r2, [pc, #40]	; (800fa20 <LL_TIM_OC_SetMode+0xc0>)
 800f9f6:	408a      	lsls	r2, r1
 800f9f8:	43d2      	mvns	r2, r2
 800f9fa:	401a      	ands	r2, r3
 800f9fc:	183b      	adds	r3, r7, r0
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	4906      	ldr	r1, [pc, #24]	; (800fa1c <LL_TIM_OC_SetMode+0xbc>)
 800fa02:	5ccb      	ldrb	r3, [r1, r3]
 800fa04:	0019      	movs	r1, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	408b      	lsls	r3, r1
 800fa0a:	431a      	orrs	r2, r3
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	601a      	str	r2, [r3, #0]
}
 800fa10:	46c0      	nop			; (mov r8, r8)
 800fa12:	46bd      	mov	sp, r7
 800fa14:	b006      	add	sp, #24
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	0801c45c 	.word	0x0801c45c
 800fa1c:	0801c468 	.word	0x0801c468
 800fa20:	00010073 	.word	0x00010073

0800fa24 <LL_TIM_OC_SetPolarity>:
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b086      	sub	sp, #24
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d02c      	beq.n	800fa90 <LL_TIM_OC_SetPolarity+0x6c>
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	2b04      	cmp	r3, #4
 800fa3a:	d027      	beq.n	800fa8c <LL_TIM_OC_SetPolarity+0x68>
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	2b10      	cmp	r3, #16
 800fa40:	d022      	beq.n	800fa88 <LL_TIM_OC_SetPolarity+0x64>
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2b40      	cmp	r3, #64	; 0x40
 800fa46:	d01d      	beq.n	800fa84 <LL_TIM_OC_SetPolarity+0x60>
 800fa48:	68ba      	ldr	r2, [r7, #8]
 800fa4a:	2380      	movs	r3, #128	; 0x80
 800fa4c:	005b      	lsls	r3, r3, #1
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d016      	beq.n	800fa80 <LL_TIM_OC_SetPolarity+0x5c>
 800fa52:	68ba      	ldr	r2, [r7, #8]
 800fa54:	2380      	movs	r3, #128	; 0x80
 800fa56:	00db      	lsls	r3, r3, #3
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d00f      	beq.n	800fa7c <LL_TIM_OC_SetPolarity+0x58>
 800fa5c:	68ba      	ldr	r2, [r7, #8]
 800fa5e:	2380      	movs	r3, #128	; 0x80
 800fa60:	015b      	lsls	r3, r3, #5
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d008      	beq.n	800fa78 <LL_TIM_OC_SetPolarity+0x54>
 800fa66:	68ba      	ldr	r2, [r7, #8]
 800fa68:	2380      	movs	r3, #128	; 0x80
 800fa6a:	025b      	lsls	r3, r3, #9
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d101      	bne.n	800fa74 <LL_TIM_OC_SetPolarity+0x50>
 800fa70:	2307      	movs	r3, #7
 800fa72:	e00e      	b.n	800fa92 <LL_TIM_OC_SetPolarity+0x6e>
 800fa74:	2308      	movs	r3, #8
 800fa76:	e00c      	b.n	800fa92 <LL_TIM_OC_SetPolarity+0x6e>
 800fa78:	2306      	movs	r3, #6
 800fa7a:	e00a      	b.n	800fa92 <LL_TIM_OC_SetPolarity+0x6e>
 800fa7c:	2305      	movs	r3, #5
 800fa7e:	e008      	b.n	800fa92 <LL_TIM_OC_SetPolarity+0x6e>
 800fa80:	2304      	movs	r3, #4
 800fa82:	e006      	b.n	800fa92 <LL_TIM_OC_SetPolarity+0x6e>
 800fa84:	2303      	movs	r3, #3
 800fa86:	e004      	b.n	800fa92 <LL_TIM_OC_SetPolarity+0x6e>
 800fa88:	2302      	movs	r3, #2
 800fa8a:	e002      	b.n	800fa92 <LL_TIM_OC_SetPolarity+0x6e>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	e000      	b.n	800fa92 <LL_TIM_OC_SetPolarity+0x6e>
 800fa90:	2300      	movs	r3, #0
 800fa92:	2017      	movs	r0, #23
 800fa94:	183a      	adds	r2, r7, r0
 800fa96:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	6a1b      	ldr	r3, [r3, #32]
 800fa9c:	183a      	adds	r2, r7, r0
 800fa9e:	7812      	ldrb	r2, [r2, #0]
 800faa0:	490a      	ldr	r1, [pc, #40]	; (800facc <LL_TIM_OC_SetPolarity+0xa8>)
 800faa2:	5c8a      	ldrb	r2, [r1, r2]
 800faa4:	0011      	movs	r1, r2
 800faa6:	2202      	movs	r2, #2
 800faa8:	408a      	lsls	r2, r1
 800faaa:	43d2      	mvns	r2, r2
 800faac:	401a      	ands	r2, r3
 800faae:	183b      	adds	r3, r7, r0
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	4906      	ldr	r1, [pc, #24]	; (800facc <LL_TIM_OC_SetPolarity+0xa8>)
 800fab4:	5ccb      	ldrb	r3, [r1, r3]
 800fab6:	0019      	movs	r1, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	408b      	lsls	r3, r1
 800fabc:	431a      	orrs	r2, r3
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	621a      	str	r2, [r3, #32]
}
 800fac2:	46c0      	nop			; (mov r8, r8)
 800fac4:	46bd      	mov	sp, r7
 800fac6:	b006      	add	sp, #24
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	46c0      	nop			; (mov r8, r8)
 800facc:	0801c474 	.word	0x0801c474

0800fad0 <LL_TIM_OC_SetCompareCH1>:
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	683a      	ldr	r2, [r7, #0]
 800fade:	635a      	str	r2, [r3, #52]	; 0x34
}
 800fae0:	46c0      	nop			; (mov r8, r8)
 800fae2:	46bd      	mov	sp, r7
 800fae4:	b002      	add	sp, #8
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <LL_TIM_OC_SetCompareCH2>:
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	683a      	ldr	r2, [r7, #0]
 800faf6:	639a      	str	r2, [r3, #56]	; 0x38
}
 800faf8:	46c0      	nop			; (mov r8, r8)
 800fafa:	46bd      	mov	sp, r7
 800fafc:	b002      	add	sp, #8
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <LL_TIM_OC_SetCompareCH3>:
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	683a      	ldr	r2, [r7, #0]
 800fb0e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fb10:	46c0      	nop			; (mov r8, r8)
 800fb12:	46bd      	mov	sp, r7
 800fb14:	b002      	add	sp, #8
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <LL_TIM_OC_SetCompareCH4>:
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	683a      	ldr	r2, [r7, #0]
 800fb26:	641a      	str	r2, [r3, #64]	; 0x40
}
 800fb28:	46c0      	nop			; (mov r8, r8)
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	b002      	add	sp, #8
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <LL_TIM_ClearFlag_CC1>:
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2203      	movs	r2, #3
 800fb3c:	4252      	negs	r2, r2
 800fb3e:	611a      	str	r2, [r3, #16]
}
 800fb40:	46c0      	nop			; (mov r8, r8)
 800fb42:	46bd      	mov	sp, r7
 800fb44:	b002      	add	sp, #8
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <LL_TIM_IsActiveFlag_CC1>:
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	691b      	ldr	r3, [r3, #16]
 800fb54:	2202      	movs	r2, #2
 800fb56:	4013      	ands	r3, r2
 800fb58:	2b02      	cmp	r3, #2
 800fb5a:	d101      	bne.n	800fb60 <LL_TIM_IsActiveFlag_CC1+0x18>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e000      	b.n	800fb62 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800fb60:	2300      	movs	r3, #0
}
 800fb62:	0018      	movs	r0, r3
 800fb64:	46bd      	mov	sp, r7
 800fb66:	b002      	add	sp, #8
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <LL_TIM_ClearFlag_CC2>:
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b082      	sub	sp, #8
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2205      	movs	r2, #5
 800fb76:	4252      	negs	r2, r2
 800fb78:	611a      	str	r2, [r3, #16]
}
 800fb7a:	46c0      	nop			; (mov r8, r8)
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	b002      	add	sp, #8
 800fb80:	bd80      	pop	{r7, pc}

0800fb82 <LL_TIM_IsActiveFlag_CC2>:
{
 800fb82:	b580      	push	{r7, lr}
 800fb84:	b082      	sub	sp, #8
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	691b      	ldr	r3, [r3, #16]
 800fb8e:	2204      	movs	r2, #4
 800fb90:	4013      	ands	r3, r2
 800fb92:	2b04      	cmp	r3, #4
 800fb94:	d101      	bne.n	800fb9a <LL_TIM_IsActiveFlag_CC2+0x18>
 800fb96:	2301      	movs	r3, #1
 800fb98:	e000      	b.n	800fb9c <LL_TIM_IsActiveFlag_CC2+0x1a>
 800fb9a:	2300      	movs	r3, #0
}
 800fb9c:	0018      	movs	r0, r3
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	b002      	add	sp, #8
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <LL_TIM_ClearFlag_CC3>:
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2209      	movs	r2, #9
 800fbb0:	4252      	negs	r2, r2
 800fbb2:	611a      	str	r2, [r3, #16]
}
 800fbb4:	46c0      	nop			; (mov r8, r8)
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	b002      	add	sp, #8
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <LL_TIM_IsActiveFlag_CC3>:
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	691b      	ldr	r3, [r3, #16]
 800fbc8:	2208      	movs	r2, #8
 800fbca:	4013      	ands	r3, r2
 800fbcc:	2b08      	cmp	r3, #8
 800fbce:	d101      	bne.n	800fbd4 <LL_TIM_IsActiveFlag_CC3+0x18>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e000      	b.n	800fbd6 <LL_TIM_IsActiveFlag_CC3+0x1a>
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	0018      	movs	r0, r3
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	b002      	add	sp, #8
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <LL_TIM_ClearFlag_CC4>:
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b082      	sub	sp, #8
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2211      	movs	r2, #17
 800fbea:	4252      	negs	r2, r2
 800fbec:	611a      	str	r2, [r3, #16]
}
 800fbee:	46c0      	nop			; (mov r8, r8)
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	b002      	add	sp, #8
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <LL_TIM_IsActiveFlag_CC4>:
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b082      	sub	sp, #8
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	691b      	ldr	r3, [r3, #16]
 800fc02:	2210      	movs	r2, #16
 800fc04:	4013      	ands	r3, r2
 800fc06:	2b10      	cmp	r3, #16
 800fc08:	d101      	bne.n	800fc0e <LL_TIM_IsActiveFlag_CC4+0x18>
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e000      	b.n	800fc10 <LL_TIM_IsActiveFlag_CC4+0x1a>
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	0018      	movs	r0, r3
 800fc12:	46bd      	mov	sp, r7
 800fc14:	b002      	add	sp, #8
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 800fc18:	b5b0      	push	{r4, r5, r7, lr}
 800fc1a:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 800fc1c:	4b48      	ldr	r3, [pc, #288]	; (800fd40 <USBPD_TIM_Init+0x128>)
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	b25b      	sxtb	r3, r3
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d000      	beq.n	800fc28 <USBPD_TIM_Init+0x10>
 800fc26:	e07e      	b.n	800fd26 <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 800fc28:	2380      	movs	r3, #128	; 0x80
 800fc2a:	011b      	lsls	r3, r3, #4
 800fc2c:	0018      	movs	r0, r3
 800fc2e:	f7ff fe2d 	bl	800f88c <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 800fc32:	4b44      	ldr	r3, [pc, #272]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fc34:	2100      	movs	r1, #0
 800fc36:	0018      	movs	r0, r3
 800fc38:	f7ff fe5e 	bl	800f8f8 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 800fc3c:	4b42      	ldr	r3, [pc, #264]	; (800fd48 <USBPD_TIM_Init+0x130>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a42      	ldr	r2, [pc, #264]	; (800fd4c <USBPD_TIM_Init+0x134>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d90b      	bls.n	800fc5e <USBPD_TIM_Init+0x46>
 800fc46:	4b40      	ldr	r3, [pc, #256]	; (800fd48 <USBPD_TIM_Init+0x130>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4a41      	ldr	r2, [pc, #260]	; (800fd50 <USBPD_TIM_Init+0x138>)
 800fc4c:	4694      	mov	ip, r2
 800fc4e:	4463      	add	r3, ip
 800fc50:	4940      	ldr	r1, [pc, #256]	; (800fd54 <USBPD_TIM_Init+0x13c>)
 800fc52:	0018      	movs	r0, r3
 800fc54:	f7f6 facc 	bl	80061f0 <__udivsi3>
 800fc58:	0003      	movs	r3, r0
 800fc5a:	3b01      	subs	r3, #1
 800fc5c:	e000      	b.n	800fc60 <USBPD_TIM_Init+0x48>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	4a38      	ldr	r2, [pc, #224]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fc62:	0019      	movs	r1, r3
 800fc64:	0010      	movs	r0, r2
 800fc66:	f7ff fe59 	bl	800f91c <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 800fc6a:	4b37      	ldr	r3, [pc, #220]	; (800fd48 <USBPD_TIM_Init+0x130>)
 800fc6c:	681c      	ldr	r4, [r3, #0]
 800fc6e:	4b35      	ldr	r3, [pc, #212]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fc70:	0018      	movs	r0, r3
 800fc72:	f7ff fe5f 	bl	800f934 <LL_TIM_GetPrescaler>
 800fc76:	0003      	movs	r3, r0
 800fc78:	3301      	adds	r3, #1
 800fc7a:	0019      	movs	r1, r3
 800fc7c:	0020      	movs	r0, r4
 800fc7e:	f7f6 fab7 	bl	80061f0 <__udivsi3>
 800fc82:	0003      	movs	r3, r0
 800fc84:	2b63      	cmp	r3, #99	; 0x63
 800fc86:	d910      	bls.n	800fcaa <USBPD_TIM_Init+0x92>
 800fc88:	4b2f      	ldr	r3, [pc, #188]	; (800fd48 <USBPD_TIM_Init+0x130>)
 800fc8a:	681c      	ldr	r4, [r3, #0]
 800fc8c:	4b2d      	ldr	r3, [pc, #180]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fc8e:	0018      	movs	r0, r3
 800fc90:	f7ff fe50 	bl	800f934 <LL_TIM_GetPrescaler>
 800fc94:	0003      	movs	r3, r0
 800fc96:	3301      	adds	r3, #1
 800fc98:	2264      	movs	r2, #100	; 0x64
 800fc9a:	4353      	muls	r3, r2
 800fc9c:	0019      	movs	r1, r3
 800fc9e:	0020      	movs	r0, r4
 800fca0:	f7f6 faa6 	bl	80061f0 <__udivsi3>
 800fca4:	0003      	movs	r3, r0
 800fca6:	3b01      	subs	r3, #1
 800fca8:	e000      	b.n	800fcac <USBPD_TIM_Init+0x94>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	4a25      	ldr	r2, [pc, #148]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fcae:	0019      	movs	r1, r3
 800fcb0:	0010      	movs	r0, r2
 800fcb2:	f7ff fe49 	bl	800f948 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 800fcb6:	4b23      	ldr	r3, [pc, #140]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fcb8:	2230      	movs	r2, #48	; 0x30
 800fcba:	2101      	movs	r1, #1
 800fcbc:	0018      	movs	r0, r3
 800fcbe:	f7ff fe4f 	bl	800f960 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 800fcc2:	4b20      	ldr	r3, [pc, #128]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fcc4:	2230      	movs	r2, #48	; 0x30
 800fcc6:	2110      	movs	r1, #16
 800fcc8:	0018      	movs	r0, r3
 800fcca:	f7ff fe49 	bl	800f960 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 800fcce:	2380      	movs	r3, #128	; 0x80
 800fcd0:	005b      	lsls	r3, r3, #1
 800fcd2:	481c      	ldr	r0, [pc, #112]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fcd4:	2230      	movs	r2, #48	; 0x30
 800fcd6:	0019      	movs	r1, r3
 800fcd8:	f7ff fe42 	bl	800f960 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 800fcdc:	2380      	movs	r3, #128	; 0x80
 800fcde:	015b      	lsls	r3, r3, #5
 800fce0:	4818      	ldr	r0, [pc, #96]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fce2:	2230      	movs	r2, #48	; 0x30
 800fce4:	0019      	movs	r1, r3
 800fce6:	f7ff fe3b 	bl	800f960 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 800fcea:	4b16      	ldr	r3, [pc, #88]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fcec:	2200      	movs	r2, #0
 800fcee:	2101      	movs	r1, #1
 800fcf0:	0018      	movs	r0, r3
 800fcf2:	f7ff fe97 	bl	800fa24 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 800fcf6:	4b13      	ldr	r3, [pc, #76]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	2110      	movs	r1, #16
 800fcfc:	0018      	movs	r0, r3
 800fcfe:	f7ff fe91 	bl	800fa24 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 800fd02:	2380      	movs	r3, #128	; 0x80
 800fd04:	005b      	lsls	r3, r3, #1
 800fd06:	480f      	ldr	r0, [pc, #60]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	0019      	movs	r1, r3
 800fd0c:	f7ff fe8a 	bl	800fa24 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 800fd10:	2380      	movs	r3, #128	; 0x80
 800fd12:	015b      	lsls	r3, r3, #5
 800fd14:	480b      	ldr	r0, [pc, #44]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fd16:	2200      	movs	r2, #0
 800fd18:	0019      	movs	r1, r3
 800fd1a:	f7ff fe83 	bl	800fa24 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 800fd1e:	4b09      	ldr	r3, [pc, #36]	; (800fd44 <USBPD_TIM_Init+0x12c>)
 800fd20:	0018      	movs	r0, r3
 800fd22:	f7ff fddb 	bl	800f8dc <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 800fd26:	4b06      	ldr	r3, [pc, #24]	; (800fd40 <USBPD_TIM_Init+0x128>)
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	b25b      	sxtb	r3, r3
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	3301      	adds	r3, #1
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	b25a      	sxtb	r2, r3
 800fd34:	4b02      	ldr	r3, [pc, #8]	; (800fd40 <USBPD_TIM_Init+0x128>)
 800fd36:	701a      	strb	r2, [r3, #0]
}
 800fd38:	46c0      	nop			; (mov r8, r8)
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bdb0      	pop	{r4, r5, r7, pc}
 800fd3e:	46c0      	nop			; (mov r8, r8)
 800fd40:	20000430 	.word	0x20000430
 800fd44:	40012c00 	.word	0x40012c00
 800fd48:	2000002c 	.word	0x2000002c
 800fd4c:	000f423f 	.word	0x000f423f
 800fd50:	0007a120 	.word	0x0007a120
 800fd54:	000f4240 	.word	0x000f4240

0800fd58 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	af00      	add	r7, sp, #0
  timer_initcounter--;
 800fd5c:	4b0a      	ldr	r3, [pc, #40]	; (800fd88 <USBPD_TIM_DeInit+0x30>)
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	b25b      	sxtb	r3, r3
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	3b01      	subs	r3, #1
 800fd66:	b2db      	uxtb	r3, r3
 800fd68:	b25a      	sxtb	r2, r3
 800fd6a:	4b07      	ldr	r3, [pc, #28]	; (800fd88 <USBPD_TIM_DeInit+0x30>)
 800fd6c:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 800fd6e:	4b06      	ldr	r3, [pc, #24]	; (800fd88 <USBPD_TIM_DeInit+0x30>)
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	b25b      	sxtb	r3, r3
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d104      	bne.n	800fd82 <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 800fd78:	2380      	movs	r3, #128	; 0x80
 800fd7a:	011b      	lsls	r3, r3, #4
 800fd7c:	0018      	movs	r0, r3
 800fd7e:	f7ff fd9b 	bl	800f8b8 <LL_APB2_GRP1_DisableClock>
  }
}
 800fd82:	46c0      	nop			; (mov r8, r8)
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	20000430 	.word	0x20000430

0800fd8c <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	0002      	movs	r2, r0
 800fd94:	6039      	str	r1, [r7, #0]
 800fd96:	1dfb      	adds	r3, r7, #7
 800fd98:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 800fd9a:	1dfb      	adds	r3, r7, #7
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	2b03      	cmp	r3, #3
 800fda0:	d044      	beq.n	800fe2c <USBPD_TIM_Start+0xa0>
 800fda2:	dc57      	bgt.n	800fe54 <USBPD_TIM_Start+0xc8>
 800fda4:	2b02      	cmp	r3, #2
 800fda6:	d02d      	beq.n	800fe04 <USBPD_TIM_Start+0x78>
 800fda8:	dc54      	bgt.n	800fe54 <USBPD_TIM_Start+0xc8>
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <USBPD_TIM_Start+0x28>
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d014      	beq.n	800fddc <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 800fdb2:	e04f      	b.n	800fe54 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 800fdb4:	4b2a      	ldr	r3, [pc, #168]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fdb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	18d3      	adds	r3, r2, r3
 800fdbc:	4929      	ldr	r1, [pc, #164]	; (800fe64 <USBPD_TIM_Start+0xd8>)
 800fdbe:	0018      	movs	r0, r3
 800fdc0:	f7f6 fa9c 	bl	80062fc <__aeabi_uidivmod>
 800fdc4:	000b      	movs	r3, r1
 800fdc6:	001a      	movs	r2, r3
 800fdc8:	4b25      	ldr	r3, [pc, #148]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fdca:	0011      	movs	r1, r2
 800fdcc:	0018      	movs	r0, r3
 800fdce:	f7ff fe7f 	bl	800fad0 <LL_TIM_OC_SetCompareCH1>
 800fdd2:	4b23      	ldr	r3, [pc, #140]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fdd4:	0018      	movs	r0, r3
 800fdd6:	f7ff feab 	bl	800fb30 <LL_TIM_ClearFlag_CC1>
      break;
 800fdda:	e03c      	b.n	800fe56 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 800fddc:	4b20      	ldr	r3, [pc, #128]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fdde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	18d3      	adds	r3, r2, r3
 800fde4:	491f      	ldr	r1, [pc, #124]	; (800fe64 <USBPD_TIM_Start+0xd8>)
 800fde6:	0018      	movs	r0, r3
 800fde8:	f7f6 fa88 	bl	80062fc <__aeabi_uidivmod>
 800fdec:	000b      	movs	r3, r1
 800fdee:	001a      	movs	r2, r3
 800fdf0:	4b1b      	ldr	r3, [pc, #108]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fdf2:	0011      	movs	r1, r2
 800fdf4:	0018      	movs	r0, r3
 800fdf6:	f7ff fe77 	bl	800fae8 <LL_TIM_OC_SetCompareCH2>
 800fdfa:	4b19      	ldr	r3, [pc, #100]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fdfc:	0018      	movs	r0, r3
 800fdfe:	f7ff feb4 	bl	800fb6a <LL_TIM_ClearFlag_CC2>
      break;
 800fe02:	e028      	b.n	800fe56 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 800fe04:	4b16      	ldr	r3, [pc, #88]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fe06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	18d3      	adds	r3, r2, r3
 800fe0c:	4915      	ldr	r1, [pc, #84]	; (800fe64 <USBPD_TIM_Start+0xd8>)
 800fe0e:	0018      	movs	r0, r3
 800fe10:	f7f6 fa74 	bl	80062fc <__aeabi_uidivmod>
 800fe14:	000b      	movs	r3, r1
 800fe16:	001a      	movs	r2, r3
 800fe18:	4b11      	ldr	r3, [pc, #68]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fe1a:	0011      	movs	r1, r2
 800fe1c:	0018      	movs	r0, r3
 800fe1e:	f7ff fe6f 	bl	800fb00 <LL_TIM_OC_SetCompareCH3>
 800fe22:	4b0f      	ldr	r3, [pc, #60]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fe24:	0018      	movs	r0, r3
 800fe26:	f7ff febd 	bl	800fba4 <LL_TIM_ClearFlag_CC3>
      break;
 800fe2a:	e014      	b.n	800fe56 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 800fe2c:	4b0c      	ldr	r3, [pc, #48]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fe2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	18d3      	adds	r3, r2, r3
 800fe34:	490b      	ldr	r1, [pc, #44]	; (800fe64 <USBPD_TIM_Start+0xd8>)
 800fe36:	0018      	movs	r0, r3
 800fe38:	f7f6 fa60 	bl	80062fc <__aeabi_uidivmod>
 800fe3c:	000b      	movs	r3, r1
 800fe3e:	001a      	movs	r2, r3
 800fe40:	4b07      	ldr	r3, [pc, #28]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fe42:	0011      	movs	r1, r2
 800fe44:	0018      	movs	r0, r3
 800fe46:	f7ff fe67 	bl	800fb18 <LL_TIM_OC_SetCompareCH4>
 800fe4a:	4b05      	ldr	r3, [pc, #20]	; (800fe60 <USBPD_TIM_Start+0xd4>)
 800fe4c:	0018      	movs	r0, r3
 800fe4e:	f7ff fec6 	bl	800fbde <LL_TIM_ClearFlag_CC4>
      break;
 800fe52:	e000      	b.n	800fe56 <USBPD_TIM_Start+0xca>
      break;
 800fe54:	46c0      	nop			; (mov r8, r8)
  }
}
 800fe56:	46c0      	nop			; (mov r8, r8)
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	b002      	add	sp, #8
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	46c0      	nop			; (mov r8, r8)
 800fe60:	40012c00 	.word	0x40012c00
 800fe64:	00002710 	.word	0x00002710

0800fe68 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	0002      	movs	r2, r0
 800fe70:	1dfb      	adds	r3, r7, #7
 800fe72:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 800fe74:	2301      	movs	r3, #1
 800fe76:	60fb      	str	r3, [r7, #12]
  switch (Id)
 800fe78:	1dfb      	adds	r3, r7, #7
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	2b03      	cmp	r3, #3
 800fe7e:	d01d      	beq.n	800febc <USBPD_TIM_IsExpired+0x54>
 800fe80:	dc23      	bgt.n	800feca <USBPD_TIM_IsExpired+0x62>
 800fe82:	2b02      	cmp	r3, #2
 800fe84:	d013      	beq.n	800feae <USBPD_TIM_IsExpired+0x46>
 800fe86:	dc20      	bgt.n	800feca <USBPD_TIM_IsExpired+0x62>
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d002      	beq.n	800fe92 <USBPD_TIM_IsExpired+0x2a>
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d007      	beq.n	800fea0 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 800fe90:	e01b      	b.n	800feca <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 800fe92:	4b11      	ldr	r3, [pc, #68]	; (800fed8 <USBPD_TIM_IsExpired+0x70>)
 800fe94:	0018      	movs	r0, r3
 800fe96:	f7ff fe57 	bl	800fb48 <LL_TIM_IsActiveFlag_CC1>
 800fe9a:	0003      	movs	r3, r0
 800fe9c:	60fb      	str	r3, [r7, #12]
      break;
 800fe9e:	e015      	b.n	800fecc <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 800fea0:	4b0d      	ldr	r3, [pc, #52]	; (800fed8 <USBPD_TIM_IsExpired+0x70>)
 800fea2:	0018      	movs	r0, r3
 800fea4:	f7ff fe6d 	bl	800fb82 <LL_TIM_IsActiveFlag_CC2>
 800fea8:	0003      	movs	r3, r0
 800feaa:	60fb      	str	r3, [r7, #12]
      break;
 800feac:	e00e      	b.n	800fecc <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 800feae:	4b0a      	ldr	r3, [pc, #40]	; (800fed8 <USBPD_TIM_IsExpired+0x70>)
 800feb0:	0018      	movs	r0, r3
 800feb2:	f7ff fe83 	bl	800fbbc <LL_TIM_IsActiveFlag_CC3>
 800feb6:	0003      	movs	r3, r0
 800feb8:	60fb      	str	r3, [r7, #12]
      break;
 800feba:	e007      	b.n	800fecc <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 800febc:	4b06      	ldr	r3, [pc, #24]	; (800fed8 <USBPD_TIM_IsExpired+0x70>)
 800febe:	0018      	movs	r0, r3
 800fec0:	f7ff fe99 	bl	800fbf6 <LL_TIM_IsActiveFlag_CC4>
 800fec4:	0003      	movs	r3, r0
 800fec6:	60fb      	str	r3, [r7, #12]
      break;
 800fec8:	e000      	b.n	800fecc <USBPD_TIM_IsExpired+0x64>
      break;
 800feca:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 800fecc:	68fb      	ldr	r3, [r7, #12]
}
 800fece:	0018      	movs	r0, r3
 800fed0:	46bd      	mov	sp, r7
 800fed2:	b004      	add	sp, #16
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	46c0      	nop			; (mov r8, r8)
 800fed8:	40012c00 	.word	0x40012c00

0800fedc <__NVIC_SetPriority>:
{
 800fedc:	b590      	push	{r4, r7, lr}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	0002      	movs	r2, r0
 800fee4:	6039      	str	r1, [r7, #0]
 800fee6:	1dfb      	adds	r3, r7, #7
 800fee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800feea:	1dfb      	adds	r3, r7, #7
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	2b7f      	cmp	r3, #127	; 0x7f
 800fef0:	d828      	bhi.n	800ff44 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fef2:	4a2f      	ldr	r2, [pc, #188]	; (800ffb0 <__NVIC_SetPriority+0xd4>)
 800fef4:	1dfb      	adds	r3, r7, #7
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	b25b      	sxtb	r3, r3
 800fefa:	089b      	lsrs	r3, r3, #2
 800fefc:	33c0      	adds	r3, #192	; 0xc0
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	589b      	ldr	r3, [r3, r2]
 800ff02:	1dfa      	adds	r2, r7, #7
 800ff04:	7812      	ldrb	r2, [r2, #0]
 800ff06:	0011      	movs	r1, r2
 800ff08:	2203      	movs	r2, #3
 800ff0a:	400a      	ands	r2, r1
 800ff0c:	00d2      	lsls	r2, r2, #3
 800ff0e:	21ff      	movs	r1, #255	; 0xff
 800ff10:	4091      	lsls	r1, r2
 800ff12:	000a      	movs	r2, r1
 800ff14:	43d2      	mvns	r2, r2
 800ff16:	401a      	ands	r2, r3
 800ff18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	019b      	lsls	r3, r3, #6
 800ff1e:	22ff      	movs	r2, #255	; 0xff
 800ff20:	401a      	ands	r2, r3
 800ff22:	1dfb      	adds	r3, r7, #7
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	0018      	movs	r0, r3
 800ff28:	2303      	movs	r3, #3
 800ff2a:	4003      	ands	r3, r0
 800ff2c:	00db      	lsls	r3, r3, #3
 800ff2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ff30:	481f      	ldr	r0, [pc, #124]	; (800ffb0 <__NVIC_SetPriority+0xd4>)
 800ff32:	1dfb      	adds	r3, r7, #7
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	b25b      	sxtb	r3, r3
 800ff38:	089b      	lsrs	r3, r3, #2
 800ff3a:	430a      	orrs	r2, r1
 800ff3c:	33c0      	adds	r3, #192	; 0xc0
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	501a      	str	r2, [r3, r0]
}
 800ff42:	e031      	b.n	800ffa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ff44:	4a1b      	ldr	r2, [pc, #108]	; (800ffb4 <__NVIC_SetPriority+0xd8>)
 800ff46:	1dfb      	adds	r3, r7, #7
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	0019      	movs	r1, r3
 800ff4c:	230f      	movs	r3, #15
 800ff4e:	400b      	ands	r3, r1
 800ff50:	3b08      	subs	r3, #8
 800ff52:	089b      	lsrs	r3, r3, #2
 800ff54:	3306      	adds	r3, #6
 800ff56:	009b      	lsls	r3, r3, #2
 800ff58:	18d3      	adds	r3, r2, r3
 800ff5a:	3304      	adds	r3, #4
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	1dfa      	adds	r2, r7, #7
 800ff60:	7812      	ldrb	r2, [r2, #0]
 800ff62:	0011      	movs	r1, r2
 800ff64:	2203      	movs	r2, #3
 800ff66:	400a      	ands	r2, r1
 800ff68:	00d2      	lsls	r2, r2, #3
 800ff6a:	21ff      	movs	r1, #255	; 0xff
 800ff6c:	4091      	lsls	r1, r2
 800ff6e:	000a      	movs	r2, r1
 800ff70:	43d2      	mvns	r2, r2
 800ff72:	401a      	ands	r2, r3
 800ff74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	019b      	lsls	r3, r3, #6
 800ff7a:	22ff      	movs	r2, #255	; 0xff
 800ff7c:	401a      	ands	r2, r3
 800ff7e:	1dfb      	adds	r3, r7, #7
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	0018      	movs	r0, r3
 800ff84:	2303      	movs	r3, #3
 800ff86:	4003      	ands	r3, r0
 800ff88:	00db      	lsls	r3, r3, #3
 800ff8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ff8c:	4809      	ldr	r0, [pc, #36]	; (800ffb4 <__NVIC_SetPriority+0xd8>)
 800ff8e:	1dfb      	adds	r3, r7, #7
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	001c      	movs	r4, r3
 800ff94:	230f      	movs	r3, #15
 800ff96:	4023      	ands	r3, r4
 800ff98:	3b08      	subs	r3, #8
 800ff9a:	089b      	lsrs	r3, r3, #2
 800ff9c:	430a      	orrs	r2, r1
 800ff9e:	3306      	adds	r3, #6
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	18c3      	adds	r3, r0, r3
 800ffa4:	3304      	adds	r3, #4
 800ffa6:	601a      	str	r2, [r3, #0]
}
 800ffa8:	46c0      	nop			; (mov r8, r8)
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	b003      	add	sp, #12
 800ffae:	bd90      	pop	{r4, r7, pc}
 800ffb0:	e000e100 	.word	0xe000e100
 800ffb4:	e000ed00 	.word	0xe000ed00

0800ffb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ffbc:	4b05      	ldr	r3, [pc, #20]	; (800ffd4 <SysTick_Handler+0x1c>)
 800ffbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ffc0:	f001 ff2a 	bl	8011e18 <xTaskGetSchedulerState>
 800ffc4:	0003      	movs	r3, r0
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d001      	beq.n	800ffce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ffca:	f002 fbfd 	bl	80127c8 <xPortSysTickHandler>
  }
}
 800ffce:	46c0      	nop			; (mov r8, r8)
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	e000e010 	.word	0xe000e010

0800ffd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ffdc:	2305      	movs	r3, #5
 800ffde:	425b      	negs	r3, r3
 800ffe0:	2100      	movs	r1, #0
 800ffe2:	0018      	movs	r0, r3
 800ffe4:	f7ff ff7a 	bl	800fedc <__NVIC_SetPriority>
#endif
}
 800ffe8:	46c0      	nop			; (mov r8, r8)
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
	...

0800fff0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fff6:	f3ef 8305 	mrs	r3, IPSR
 800fffa:	603b      	str	r3, [r7, #0]
  return(result);
 800fffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d003      	beq.n	801000a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010002:	2306      	movs	r3, #6
 8010004:	425b      	negs	r3, r3
 8010006:	607b      	str	r3, [r7, #4]
 8010008:	e00c      	b.n	8010024 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801000a:	4b09      	ldr	r3, [pc, #36]	; (8010030 <osKernelInitialize+0x40>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d105      	bne.n	801001e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010012:	4b07      	ldr	r3, [pc, #28]	; (8010030 <osKernelInitialize+0x40>)
 8010014:	2201      	movs	r2, #1
 8010016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010018:	2300      	movs	r3, #0
 801001a:	607b      	str	r3, [r7, #4]
 801001c:	e002      	b.n	8010024 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801001e:	2301      	movs	r3, #1
 8010020:	425b      	negs	r3, r3
 8010022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010024:	687b      	ldr	r3, [r7, #4]
}
 8010026:	0018      	movs	r0, r3
 8010028:	46bd      	mov	sp, r7
 801002a:	b002      	add	sp, #8
 801002c:	bd80      	pop	{r7, pc}
 801002e:	46c0      	nop			; (mov r8, r8)
 8010030:	20000434 	.word	0x20000434

08010034 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801003a:	f3ef 8305 	mrs	r3, IPSR
 801003e:	603b      	str	r3, [r7, #0]
  return(result);
 8010040:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010042:	2b00      	cmp	r3, #0
 8010044:	d003      	beq.n	801004e <osKernelStart+0x1a>
    stat = osErrorISR;
 8010046:	2306      	movs	r3, #6
 8010048:	425b      	negs	r3, r3
 801004a:	607b      	str	r3, [r7, #4]
 801004c:	e010      	b.n	8010070 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801004e:	4b0b      	ldr	r3, [pc, #44]	; (801007c <osKernelStart+0x48>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b01      	cmp	r3, #1
 8010054:	d109      	bne.n	801006a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010056:	f7ff ffbf 	bl	800ffd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801005a:	4b08      	ldr	r3, [pc, #32]	; (801007c <osKernelStart+0x48>)
 801005c:	2202      	movs	r2, #2
 801005e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010060:	f001 fae2 	bl	8011628 <vTaskStartScheduler>
      stat = osOK;
 8010064:	2300      	movs	r3, #0
 8010066:	607b      	str	r3, [r7, #4]
 8010068:	e002      	b.n	8010070 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801006a:	2301      	movs	r3, #1
 801006c:	425b      	negs	r3, r3
 801006e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010070:	687b      	ldr	r3, [r7, #4]
}
 8010072:	0018      	movs	r0, r3
 8010074:	46bd      	mov	sp, r7
 8010076:	b002      	add	sp, #8
 8010078:	bd80      	pop	{r7, pc}
 801007a:	46c0      	nop			; (mov r8, r8)
 801007c:	20000434 	.word	0x20000434

08010080 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010080:	b5b0      	push	{r4, r5, r7, lr}
 8010082:	b08e      	sub	sp, #56	; 0x38
 8010084:	af04      	add	r7, sp, #16
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801008c:	2300      	movs	r3, #0
 801008e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010090:	f3ef 8305 	mrs	r3, IPSR
 8010094:	617b      	str	r3, [r7, #20]
  return(result);
 8010096:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010098:	2b00      	cmp	r3, #0
 801009a:	d000      	beq.n	801009e <osThreadNew+0x1e>
 801009c:	e081      	b.n	80101a2 <osThreadNew+0x122>
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d100      	bne.n	80100a6 <osThreadNew+0x26>
 80100a4:	e07d      	b.n	80101a2 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 80100a6:	2380      	movs	r3, #128	; 0x80
 80100a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80100aa:	2318      	movs	r3, #24
 80100ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80100ae:	2300      	movs	r3, #0
 80100b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80100b2:	2301      	movs	r3, #1
 80100b4:	425b      	negs	r3, r3
 80100b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d044      	beq.n	8010148 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d002      	beq.n	80100cc <osThreadNew+0x4c>
        name = attr->name;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	699b      	ldr	r3, [r3, #24]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	699b      	ldr	r3, [r3, #24]
 80100d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d007      	beq.n	80100f0 <osThreadNew+0x70>
 80100e0:	69fb      	ldr	r3, [r7, #28]
 80100e2:	2b38      	cmp	r3, #56	; 0x38
 80100e4:	d804      	bhi.n	80100f0 <osThreadNew+0x70>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	2201      	movs	r2, #1
 80100ec:	4013      	ands	r3, r2
 80100ee:	d001      	beq.n	80100f4 <osThreadNew+0x74>
        return (NULL);
 80100f0:	2300      	movs	r3, #0
 80100f2:	e057      	b.n	80101a4 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	695b      	ldr	r3, [r3, #20]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d003      	beq.n	8010104 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	695b      	ldr	r3, [r3, #20]
 8010100:	089b      	lsrs	r3, r3, #2
 8010102:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	689b      	ldr	r3, [r3, #8]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00e      	beq.n	801012a <osThreadNew+0xaa>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	2ba7      	cmp	r3, #167	; 0xa7
 8010112:	d90a      	bls.n	801012a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010118:	2b00      	cmp	r3, #0
 801011a:	d006      	beq.n	801012a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	695b      	ldr	r3, [r3, #20]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d002      	beq.n	801012a <osThreadNew+0xaa>
        mem = 1;
 8010124:	2301      	movs	r3, #1
 8010126:	61bb      	str	r3, [r7, #24]
 8010128:	e010      	b.n	801014c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	689b      	ldr	r3, [r3, #8]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d10c      	bne.n	801014c <osThreadNew+0xcc>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d108      	bne.n	801014c <osThreadNew+0xcc>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	691b      	ldr	r3, [r3, #16]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d104      	bne.n	801014c <osThreadNew+0xcc>
          mem = 0;
 8010142:	2300      	movs	r3, #0
 8010144:	61bb      	str	r3, [r7, #24]
 8010146:	e001      	b.n	801014c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8010148:	2300      	movs	r3, #0
 801014a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	2b01      	cmp	r3, #1
 8010150:	d112      	bne.n	8010178 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801015a:	68bd      	ldr	r5, [r7, #8]
 801015c:	6a3c      	ldr	r4, [r7, #32]
 801015e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	9302      	str	r3, [sp, #8]
 8010164:	9201      	str	r2, [sp, #4]
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	9300      	str	r3, [sp, #0]
 801016a:	002b      	movs	r3, r5
 801016c:	0022      	movs	r2, r4
 801016e:	f000 ff54 	bl	801101a <xTaskCreateStatic>
 8010172:	0003      	movs	r3, r0
 8010174:	613b      	str	r3, [r7, #16]
 8010176:	e014      	b.n	80101a2 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d111      	bne.n	80101a2 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801017e:	6a3b      	ldr	r3, [r7, #32]
 8010180:	b29a      	uxth	r2, r3
 8010182:	68bc      	ldr	r4, [r7, #8]
 8010184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	2310      	movs	r3, #16
 801018a:	18fb      	adds	r3, r7, r3
 801018c:	9301      	str	r3, [sp, #4]
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	0023      	movs	r3, r4
 8010194:	f000 ff85 	bl	80110a2 <xTaskCreate>
 8010198:	0003      	movs	r3, r0
 801019a:	2b01      	cmp	r3, #1
 801019c:	d001      	beq.n	80101a2 <osThreadNew+0x122>
            hTask = NULL;
 801019e:	2300      	movs	r3, #0
 80101a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80101a2:	693b      	ldr	r3, [r7, #16]
}
 80101a4:	0018      	movs	r0, r3
 80101a6:	46bd      	mov	sp, r7
 80101a8:	b00a      	add	sp, #40	; 0x28
 80101aa:	bdb0      	pop	{r4, r5, r7, pc}

080101ac <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80101b2:	f001 fe23 	bl	8011dfc <xTaskGetCurrentTaskHandle>
 80101b6:	0003      	movs	r3, r0
 80101b8:	607b      	str	r3, [r7, #4]

  return (id);
 80101ba:	687b      	ldr	r3, [r7, #4]
}
 80101bc:	0018      	movs	r0, r3
 80101be:	46bd      	mov	sp, r7
 80101c0:	b002      	add	sp, #8
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101d0:	f3ef 8305 	mrs	r3, IPSR
 80101d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80101d6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d003      	beq.n	80101e4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80101dc:	2306      	movs	r3, #6
 80101de:	425b      	negs	r3, r3
 80101e0:	617b      	str	r3, [r7, #20]
 80101e2:	e00c      	b.n	80101fe <osThreadSuspend+0x3a>
  }
  else if (hTask == NULL) {
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d103      	bne.n	80101f2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80101ea:	2304      	movs	r3, #4
 80101ec:	425b      	negs	r3, r3
 80101ee:	617b      	str	r3, [r7, #20]
 80101f0:	e005      	b.n	80101fe <osThreadSuspend+0x3a>
  }
  else {
    stat = osOK;
 80101f2:	2300      	movs	r3, #0
 80101f4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	0018      	movs	r0, r3
 80101fa:	f001 f93b 	bl	8011474 <vTaskSuspend>
  }

  return (stat);
 80101fe:	697b      	ldr	r3, [r7, #20]
}
 8010200:	0018      	movs	r0, r3
 8010202:	46bd      	mov	sp, r7
 8010204:	b006      	add	sp, #24
 8010206:	bd80      	pop	{r7, pc}

08010208 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8010208:	b580      	push	{r7, lr}
 801020a:	b086      	sub	sp, #24
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010214:	f3ef 8305 	mrs	r3, IPSR
 8010218:	60fb      	str	r3, [r7, #12]
  return(result);
 801021a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801021c:	2b00      	cmp	r3, #0
 801021e:	d003      	beq.n	8010228 <osThreadResume+0x20>
    stat = osErrorISR;
 8010220:	2306      	movs	r3, #6
 8010222:	425b      	negs	r3, r3
 8010224:	617b      	str	r3, [r7, #20]
 8010226:	e00c      	b.n	8010242 <osThreadResume+0x3a>
  }
  else if (hTask == NULL) {
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d103      	bne.n	8010236 <osThreadResume+0x2e>
    stat = osErrorParameter;
 801022e:	2304      	movs	r3, #4
 8010230:	425b      	negs	r3, r3
 8010232:	617b      	str	r3, [r7, #20]
 8010234:	e005      	b.n	8010242 <osThreadResume+0x3a>
  }
  else {
    stat = osOK;
 8010236:	2300      	movs	r3, #0
 8010238:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	0018      	movs	r0, r3
 801023e:	f001 f9a5 	bl	801158c <vTaskResume>
  }

  return (stat);
 8010242:	697b      	ldr	r3, [r7, #20]
}
 8010244:	0018      	movs	r0, r3
 8010246:	46bd      	mov	sp, r7
 8010248:	b006      	add	sp, #24
 801024a:	bd80      	pop	{r7, pc}

0801024c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010254:	f3ef 8305 	mrs	r3, IPSR
 8010258:	60bb      	str	r3, [r7, #8]
  return(result);
 801025a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801025c:	2b00      	cmp	r3, #0
 801025e:	d003      	beq.n	8010268 <osDelay+0x1c>
    stat = osErrorISR;
 8010260:	2306      	movs	r3, #6
 8010262:	425b      	negs	r3, r3
 8010264:	60fb      	str	r3, [r7, #12]
 8010266:	e008      	b.n	801027a <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8010268:	2300      	movs	r3, #0
 801026a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d003      	beq.n	801027a <osDelay+0x2e>
      vTaskDelay(ticks);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	0018      	movs	r0, r3
 8010276:	f001 f869 	bl	801134c <vTaskDelay>
    }
  }

  return (stat);
 801027a:	68fb      	ldr	r3, [r7, #12]
}
 801027c:	0018      	movs	r0, r3
 801027e:	46bd      	mov	sp, r7
 8010280:	b004      	add	sp, #16
 8010282:	bd80      	pop	{r7, pc}

08010284 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010284:	b590      	push	{r4, r7, lr}
 8010286:	b08b      	sub	sp, #44	; 0x2c
 8010288:	af02      	add	r7, sp, #8
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	60b9      	str	r1, [r7, #8]
 801028e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010290:	2300      	movs	r3, #0
 8010292:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010294:	f3ef 8305 	mrs	r3, IPSR
 8010298:	613b      	str	r3, [r7, #16]
  return(result);
 801029a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801029c:	2b00      	cmp	r3, #0
 801029e:	d000      	beq.n	80102a2 <osMessageQueueNew+0x1e>
 80102a0:	e064      	b.n	801036c <osMessageQueueNew+0xe8>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d100      	bne.n	80102aa <osMessageQueueNew+0x26>
 80102a8:	e060      	b.n	801036c <osMessageQueueNew+0xe8>
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d05d      	beq.n	801036c <osMessageQueueNew+0xe8>
    mem = -1;
 80102b0:	2301      	movs	r3, #1
 80102b2:	425b      	negs	r3, r3
 80102b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d028      	beq.n	801030e <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d011      	beq.n	80102e8 <osMessageQueueNew+0x64>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	2b4f      	cmp	r3, #79	; 0x4f
 80102ca:	d90d      	bls.n	80102e8 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d009      	beq.n	80102e8 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	695a      	ldr	r2, [r3, #20]
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	68b9      	ldr	r1, [r7, #8]
 80102dc:	434b      	muls	r3, r1
 80102de:	429a      	cmp	r2, r3
 80102e0:	d302      	bcc.n	80102e8 <osMessageQueueNew+0x64>
        mem = 1;
 80102e2:	2301      	movs	r3, #1
 80102e4:	61bb      	str	r3, [r7, #24]
 80102e6:	e014      	b.n	8010312 <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	689b      	ldr	r3, [r3, #8]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d110      	bne.n	8010312 <osMessageQueueNew+0x8e>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10c      	bne.n	8010312 <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d108      	bne.n	8010312 <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	695b      	ldr	r3, [r3, #20]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d104      	bne.n	8010312 <osMessageQueueNew+0x8e>
          mem = 0;
 8010308:	2300      	movs	r3, #0
 801030a:	61bb      	str	r3, [r7, #24]
 801030c:	e001      	b.n	8010312 <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010312:	69bb      	ldr	r3, [r7, #24]
 8010314:	2b01      	cmp	r3, #1
 8010316:	d10c      	bne.n	8010332 <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	691a      	ldr	r2, [r3, #16]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	68b9      	ldr	r1, [r7, #8]
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	2400      	movs	r4, #0
 8010326:	9400      	str	r4, [sp, #0]
 8010328:	f000 fa09 	bl	801073e <xQueueGenericCreateStatic>
 801032c:	0003      	movs	r3, r0
 801032e:	61fb      	str	r3, [r7, #28]
 8010330:	e00a      	b.n	8010348 <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d107      	bne.n	8010348 <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010338:	68b9      	ldr	r1, [r7, #8]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2200      	movs	r2, #0
 801033e:	0018      	movs	r0, r3
 8010340:	f000 fa49 	bl	80107d6 <xQueueGenericCreate>
 8010344:	0003      	movs	r3, r0
 8010346:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00e      	beq.n	801036c <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d003      	beq.n	801035c <osMessageQueueNew+0xd8>
        name = attr->name;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	617b      	str	r3, [r7, #20]
 801035a:	e001      	b.n	8010360 <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 801035c:	2300      	movs	r3, #0
 801035e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010360:	697a      	ldr	r2, [r7, #20]
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	0011      	movs	r1, r2
 8010366:	0018      	movs	r0, r3
 8010368:	f000 fdfc 	bl	8010f64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801036c:	69fb      	ldr	r3, [r7, #28]
}
 801036e:	0018      	movs	r0, r3
 8010370:	46bd      	mov	sp, r7
 8010372:	b009      	add	sp, #36	; 0x24
 8010374:	bd90      	pop	{r4, r7, pc}
	...

08010378 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010378:	b580      	push	{r7, lr}
 801037a:	b088      	sub	sp, #32
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	603b      	str	r3, [r7, #0]
 8010384:	1dfb      	adds	r3, r7, #7
 8010386:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801038c:	2300      	movs	r3, #0
 801038e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010390:	f3ef 8305 	mrs	r3, IPSR
 8010394:	617b      	str	r3, [r7, #20]
  return(result);
 8010396:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010398:	2b00      	cmp	r3, #0
 801039a:	d024      	beq.n	80103e6 <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d005      	beq.n	80103ae <osMessageQueuePut+0x36>
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d002      	beq.n	80103ae <osMessageQueuePut+0x36>
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d003      	beq.n	80103b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80103ae:	2304      	movs	r3, #4
 80103b0:	425b      	negs	r3, r3
 80103b2:	61fb      	str	r3, [r7, #28]
 80103b4:	e034      	b.n	8010420 <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 80103b6:	2300      	movs	r3, #0
 80103b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80103ba:	2310      	movs	r3, #16
 80103bc:	18fa      	adds	r2, r7, r3
 80103be:	68b9      	ldr	r1, [r7, #8]
 80103c0:	69b8      	ldr	r0, [r7, #24]
 80103c2:	2300      	movs	r3, #0
 80103c4:	f000 fb24 	bl	8010a10 <xQueueGenericSendFromISR>
 80103c8:	0003      	movs	r3, r0
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d003      	beq.n	80103d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80103ce:	2303      	movs	r3, #3
 80103d0:	425b      	negs	r3, r3
 80103d2:	61fb      	str	r3, [r7, #28]
 80103d4:	e024      	b.n	8010420 <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d021      	beq.n	8010420 <osMessageQueuePut+0xa8>
 80103dc:	4b13      	ldr	r3, [pc, #76]	; (801042c <osMessageQueuePut+0xb4>)
 80103de:	2280      	movs	r2, #128	; 0x80
 80103e0:	0552      	lsls	r2, r2, #21
 80103e2:	601a      	str	r2, [r3, #0]
 80103e4:	e01c      	b.n	8010420 <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d002      	beq.n	80103f2 <osMessageQueuePut+0x7a>
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d103      	bne.n	80103fa <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 80103f2:	2304      	movs	r3, #4
 80103f4:	425b      	negs	r3, r3
 80103f6:	61fb      	str	r3, [r7, #28]
 80103f8:	e012      	b.n	8010420 <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80103fa:	683a      	ldr	r2, [r7, #0]
 80103fc:	68b9      	ldr	r1, [r7, #8]
 80103fe:	69b8      	ldr	r0, [r7, #24]
 8010400:	2300      	movs	r3, #0
 8010402:	f000 fa41 	bl	8010888 <xQueueGenericSend>
 8010406:	0003      	movs	r3, r0
 8010408:	2b01      	cmp	r3, #1
 801040a:	d009      	beq.n	8010420 <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d003      	beq.n	801041a <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 8010412:	2302      	movs	r3, #2
 8010414:	425b      	negs	r3, r3
 8010416:	61fb      	str	r3, [r7, #28]
 8010418:	e002      	b.n	8010420 <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 801041a:	2303      	movs	r3, #3
 801041c:	425b      	negs	r3, r3
 801041e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010420:	69fb      	ldr	r3, [r7, #28]
}
 8010422:	0018      	movs	r0, r3
 8010424:	46bd      	mov	sp, r7
 8010426:	b008      	add	sp, #32
 8010428:	bd80      	pop	{r7, pc}
 801042a:	46c0      	nop			; (mov r8, r8)
 801042c:	e000ed04 	.word	0xe000ed04

08010430 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010430:	b580      	push	{r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	607a      	str	r2, [r7, #4]
 801043c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010442:	2300      	movs	r3, #0
 8010444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010446:	f3ef 8305 	mrs	r3, IPSR
 801044a:	617b      	str	r3, [r7, #20]
  return(result);
 801044c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801044e:	2b00      	cmp	r3, #0
 8010450:	d024      	beq.n	801049c <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d005      	beq.n	8010464 <osMessageQueueGet+0x34>
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d002      	beq.n	8010464 <osMessageQueueGet+0x34>
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d003      	beq.n	801046c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010464:	2304      	movs	r3, #4
 8010466:	425b      	negs	r3, r3
 8010468:	61fb      	str	r3, [r7, #28]
 801046a:	e034      	b.n	80104d6 <osMessageQueueGet+0xa6>
    }
    else {
      yield = pdFALSE;
 801046c:	2300      	movs	r3, #0
 801046e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010470:	2310      	movs	r3, #16
 8010472:	18fa      	adds	r2, r7, r3
 8010474:	68b9      	ldr	r1, [r7, #8]
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	0018      	movs	r0, r3
 801047a:	f000 fbf2 	bl	8010c62 <xQueueReceiveFromISR>
 801047e:	0003      	movs	r3, r0
 8010480:	2b01      	cmp	r3, #1
 8010482:	d003      	beq.n	801048c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010484:	2303      	movs	r3, #3
 8010486:	425b      	negs	r3, r3
 8010488:	61fb      	str	r3, [r7, #28]
 801048a:	e024      	b.n	80104d6 <osMessageQueueGet+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d021      	beq.n	80104d6 <osMessageQueueGet+0xa6>
 8010492:	4b13      	ldr	r3, [pc, #76]	; (80104e0 <osMessageQueueGet+0xb0>)
 8010494:	2280      	movs	r2, #128	; 0x80
 8010496:	0552      	lsls	r2, r2, #21
 8010498:	601a      	str	r2, [r3, #0]
 801049a:	e01c      	b.n	80104d6 <osMessageQueueGet+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d002      	beq.n	80104a8 <osMessageQueueGet+0x78>
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d103      	bne.n	80104b0 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 80104a8:	2304      	movs	r3, #4
 80104aa:	425b      	negs	r3, r3
 80104ac:	61fb      	str	r3, [r7, #28]
 80104ae:	e012      	b.n	80104d6 <osMessageQueueGet+0xa6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80104b0:	683a      	ldr	r2, [r7, #0]
 80104b2:	68b9      	ldr	r1, [r7, #8]
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	0018      	movs	r0, r3
 80104b8:	f000 fb1e 	bl	8010af8 <xQueueReceive>
 80104bc:	0003      	movs	r3, r0
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d009      	beq.n	80104d6 <osMessageQueueGet+0xa6>
        if (timeout != 0U) {
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d003      	beq.n	80104d0 <osMessageQueueGet+0xa0>
          stat = osErrorTimeout;
 80104c8:	2302      	movs	r3, #2
 80104ca:	425b      	negs	r3, r3
 80104cc:	61fb      	str	r3, [r7, #28]
 80104ce:	e002      	b.n	80104d6 <osMessageQueueGet+0xa6>
        } else {
          stat = osErrorResource;
 80104d0:	2303      	movs	r3, #3
 80104d2:	425b      	negs	r3, r3
 80104d4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80104d6:	69fb      	ldr	r3, [r7, #28]
}
 80104d8:	0018      	movs	r0, r3
 80104da:	46bd      	mov	sp, r7
 80104dc:	b008      	add	sp, #32
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	e000ed04 	.word	0xe000ed04

080104e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	4a06      	ldr	r2, [pc, #24]	; (801050c <vApplicationGetIdleTaskMemory+0x28>)
 80104f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	4a05      	ldr	r2, [pc, #20]	; (8010510 <vApplicationGetIdleTaskMemory+0x2c>)
 80104fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2280      	movs	r2, #128	; 0x80
 8010500:	601a      	str	r2, [r3, #0]
}
 8010502:	46c0      	nop			; (mov r8, r8)
 8010504:	46bd      	mov	sp, r7
 8010506:	b004      	add	sp, #16
 8010508:	bd80      	pop	{r7, pc}
 801050a:	46c0      	nop			; (mov r8, r8)
 801050c:	20000438 	.word	0x20000438
 8010510:	200004e0 	.word	0x200004e0

08010514 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	4a06      	ldr	r2, [pc, #24]	; (801053c <vApplicationGetTimerTaskMemory+0x28>)
 8010524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	4a05      	ldr	r2, [pc, #20]	; (8010540 <vApplicationGetTimerTaskMemory+0x2c>)
 801052a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2280      	movs	r2, #128	; 0x80
 8010530:	0052      	lsls	r2, r2, #1
 8010532:	601a      	str	r2, [r3, #0]
}
 8010534:	46c0      	nop			; (mov r8, r8)
 8010536:	46bd      	mov	sp, r7
 8010538:	b004      	add	sp, #16
 801053a:	bd80      	pop	{r7, pc}
 801053c:	200006e0 	.word	0x200006e0
 8010540:	20000788 	.word	0x20000788

08010544 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	3308      	adds	r3, #8
 8010550:	001a      	movs	r2, r3
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2201      	movs	r2, #1
 801055a:	4252      	negs	r2, r2
 801055c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	3308      	adds	r3, #8
 8010562:	001a      	movs	r2, r3
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	3308      	adds	r3, #8
 801056c:	001a      	movs	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010578:	46c0      	nop			; (mov r8, r8)
 801057a:	46bd      	mov	sp, r7
 801057c:	b002      	add	sp, #8
 801057e:	bd80      	pop	{r7, pc}

08010580 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801058e:	46c0      	nop			; (mov r8, r8)
 8010590:	46bd      	mov	sp, r7
 8010592:	b002      	add	sp, #8
 8010594:	bd80      	pop	{r7, pc}

08010596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010596:	b580      	push	{r7, lr}
 8010598:	b084      	sub	sp, #16
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
 801059e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	689a      	ldr	r2, [r3, #8]
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	683a      	ldr	r2, [r7, #0]
 80105c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	1c5a      	adds	r2, r3, #1
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	601a      	str	r2, [r3, #0]
}
 80105d2:	46c0      	nop			; (mov r8, r8)
 80105d4:	46bd      	mov	sp, r7
 80105d6:	b004      	add	sp, #16
 80105d8:	bd80      	pop	{r7, pc}

080105da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80105da:	b580      	push	{r7, lr}
 80105dc:	b084      	sub	sp, #16
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
 80105e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	3301      	adds	r3, #1
 80105ee:	d103      	bne.n	80105f8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	691b      	ldr	r3, [r3, #16]
 80105f4:	60fb      	str	r3, [r7, #12]
 80105f6:	e00c      	b.n	8010612 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	3308      	adds	r3, #8
 80105fc:	60fb      	str	r3, [r7, #12]
 80105fe:	e002      	b.n	8010606 <vListInsert+0x2c>
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	60fb      	str	r3, [r7, #12]
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68ba      	ldr	r2, [r7, #8]
 801060e:	429a      	cmp	r2, r3
 8010610:	d2f6      	bcs.n	8010600 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	685a      	ldr	r2, [r3, #4]
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	683a      	ldr	r2, [r7, #0]
 8010620:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	683a      	ldr	r2, [r7, #0]
 801062c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	1c5a      	adds	r2, r3, #1
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	601a      	str	r2, [r3, #0]
}
 801063e:	46c0      	nop			; (mov r8, r8)
 8010640:	46bd      	mov	sp, r7
 8010642:	b004      	add	sp, #16
 8010644:	bd80      	pop	{r7, pc}

08010646 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010646:	b580      	push	{r7, lr}
 8010648:	b084      	sub	sp, #16
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	6892      	ldr	r2, [r2, #8]
 801065c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	689b      	ldr	r3, [r3, #8]
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	6852      	ldr	r2, [r2, #4]
 8010666:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	429a      	cmp	r2, r3
 8010670:	d103      	bne.n	801067a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	689a      	ldr	r2, [r3, #8]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2200      	movs	r2, #0
 801067e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	1e5a      	subs	r2, r3, #1
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	681b      	ldr	r3, [r3, #0]
}
 801068e:	0018      	movs	r0, r3
 8010690:	46bd      	mov	sp, r7
 8010692:	b004      	add	sp, #16
 8010694:	bd80      	pop	{r7, pc}

08010696 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010696:	b580      	push	{r7, lr}
 8010698:	b084      	sub	sp, #16
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
 801069e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d101      	bne.n	80106ae <xQueueGenericReset+0x18>
 80106aa:	b672      	cpsid	i
 80106ac:	e7fe      	b.n	80106ac <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80106ae:	f002 f82f 	bl	8012710 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	681a      	ldr	r2, [r3, #0]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106be:	434b      	muls	r3, r1
 80106c0:	18d2      	adds	r2, r2, r3
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2200      	movs	r2, #0
 80106ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106dc:	1e59      	subs	r1, r3, #1
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106e2:	434b      	muls	r3, r1
 80106e4:	18d2      	adds	r2, r2, r3
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2244      	movs	r2, #68	; 0x44
 80106ee:	21ff      	movs	r1, #255	; 0xff
 80106f0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2245      	movs	r2, #69	; 0x45
 80106f6:	21ff      	movs	r1, #255	; 0xff
 80106f8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10d      	bne.n	801071c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	691b      	ldr	r3, [r3, #16]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d013      	beq.n	8010730 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	3310      	adds	r3, #16
 801070c:	0018      	movs	r0, r3
 801070e:	f001 f9dd 	bl	8011acc <xTaskRemoveFromEventList>
 8010712:	1e03      	subs	r3, r0, #0
 8010714:	d00c      	beq.n	8010730 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010716:	f001 ffeb 	bl	80126f0 <vPortYield>
 801071a:	e009      	b.n	8010730 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	3310      	adds	r3, #16
 8010720:	0018      	movs	r0, r3
 8010722:	f7ff ff0f 	bl	8010544 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	3324      	adds	r3, #36	; 0x24
 801072a:	0018      	movs	r0, r3
 801072c:	f7ff ff0a 	bl	8010544 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010730:	f002 f800 	bl	8012734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010734:	2301      	movs	r3, #1
}
 8010736:	0018      	movs	r0, r3
 8010738:	46bd      	mov	sp, r7
 801073a:	b004      	add	sp, #16
 801073c:	bd80      	pop	{r7, pc}

0801073e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801073e:	b590      	push	{r4, r7, lr}
 8010740:	b089      	sub	sp, #36	; 0x24
 8010742:	af02      	add	r7, sp, #8
 8010744:	60f8      	str	r0, [r7, #12]
 8010746:	60b9      	str	r1, [r7, #8]
 8010748:	607a      	str	r2, [r7, #4]
 801074a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d101      	bne.n	8010756 <xQueueGenericCreateStatic+0x18>
 8010752:	b672      	cpsid	i
 8010754:	e7fe      	b.n	8010754 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d101      	bne.n	8010760 <xQueueGenericCreateStatic+0x22>
 801075c:	b672      	cpsid	i
 801075e:	e7fe      	b.n	801075e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d002      	beq.n	801076c <xQueueGenericCreateStatic+0x2e>
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d001      	beq.n	8010770 <xQueueGenericCreateStatic+0x32>
 801076c:	2301      	movs	r3, #1
 801076e:	e000      	b.n	8010772 <xQueueGenericCreateStatic+0x34>
 8010770:	2300      	movs	r3, #0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d101      	bne.n	801077a <xQueueGenericCreateStatic+0x3c>
 8010776:	b672      	cpsid	i
 8010778:	e7fe      	b.n	8010778 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d102      	bne.n	8010786 <xQueueGenericCreateStatic+0x48>
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d101      	bne.n	801078a <xQueueGenericCreateStatic+0x4c>
 8010786:	2301      	movs	r3, #1
 8010788:	e000      	b.n	801078c <xQueueGenericCreateStatic+0x4e>
 801078a:	2300      	movs	r3, #0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d101      	bne.n	8010794 <xQueueGenericCreateStatic+0x56>
 8010790:	b672      	cpsid	i
 8010792:	e7fe      	b.n	8010792 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010794:	2350      	movs	r3, #80	; 0x50
 8010796:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	2b50      	cmp	r3, #80	; 0x50
 801079c:	d001      	beq.n	80107a2 <xQueueGenericCreateStatic+0x64>
 801079e:	b672      	cpsid	i
 80107a0:	e7fe      	b.n	80107a0 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80107a2:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00e      	beq.n	80107cc <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	2246      	movs	r2, #70	; 0x46
 80107b2:	2101      	movs	r1, #1
 80107b4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80107b6:	2328      	movs	r3, #40	; 0x28
 80107b8:	18fb      	adds	r3, r7, r3
 80107ba:	781c      	ldrb	r4, [r3, #0]
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	68b9      	ldr	r1, [r7, #8]
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	9300      	str	r3, [sp, #0]
 80107c6:	0023      	movs	r3, r4
 80107c8:	f000 f837 	bl	801083a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80107cc:	697b      	ldr	r3, [r7, #20]
	}
 80107ce:	0018      	movs	r0, r3
 80107d0:	46bd      	mov	sp, r7
 80107d2:	b007      	add	sp, #28
 80107d4:	bd90      	pop	{r4, r7, pc}

080107d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80107d6:	b590      	push	{r4, r7, lr}
 80107d8:	b08b      	sub	sp, #44	; 0x2c
 80107da:	af02      	add	r7, sp, #8
 80107dc:	60f8      	str	r0, [r7, #12]
 80107de:	60b9      	str	r1, [r7, #8]
 80107e0:	1dfb      	adds	r3, r7, #7
 80107e2:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d101      	bne.n	80107ee <xQueueGenericCreate+0x18>
 80107ea:	b672      	cpsid	i
 80107ec:	e7fe      	b.n	80107ec <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	68ba      	ldr	r2, [r7, #8]
 80107f2:	4353      	muls	r3, r2
 80107f4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80107f6:	69fb      	ldr	r3, [r7, #28]
 80107f8:	3350      	adds	r3, #80	; 0x50
 80107fa:	0018      	movs	r0, r3
 80107fc:	f002 f820 	bl	8012840 <pvPortMalloc>
 8010800:	0003      	movs	r3, r0
 8010802:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8010804:	69bb      	ldr	r3, [r7, #24]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d012      	beq.n	8010830 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801080a:	69bb      	ldr	r3, [r7, #24]
 801080c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	3350      	adds	r3, #80	; 0x50
 8010812:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	2246      	movs	r2, #70	; 0x46
 8010818:	2100      	movs	r1, #0
 801081a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801081c:	1dfb      	adds	r3, r7, #7
 801081e:	781c      	ldrb	r4, [r3, #0]
 8010820:	697a      	ldr	r2, [r7, #20]
 8010822:	68b9      	ldr	r1, [r7, #8]
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	9300      	str	r3, [sp, #0]
 801082a:	0023      	movs	r3, r4
 801082c:	f000 f805 	bl	801083a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010830:	69bb      	ldr	r3, [r7, #24]
	}
 8010832:	0018      	movs	r0, r3
 8010834:	46bd      	mov	sp, r7
 8010836:	b009      	add	sp, #36	; 0x24
 8010838:	bd90      	pop	{r4, r7, pc}

0801083a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b084      	sub	sp, #16
 801083e:	af00      	add	r7, sp, #0
 8010840:	60f8      	str	r0, [r7, #12]
 8010842:	60b9      	str	r1, [r7, #8]
 8010844:	607a      	str	r2, [r7, #4]
 8010846:	001a      	movs	r2, r3
 8010848:	1cfb      	adds	r3, r7, #3
 801084a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d103      	bne.n	801085a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	69ba      	ldr	r2, [r7, #24]
 8010856:	601a      	str	r2, [r3, #0]
 8010858:	e002      	b.n	8010860 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010866:	69bb      	ldr	r3, [r7, #24]
 8010868:	68ba      	ldr	r2, [r7, #8]
 801086a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801086c:	69bb      	ldr	r3, [r7, #24]
 801086e:	2101      	movs	r1, #1
 8010870:	0018      	movs	r0, r3
 8010872:	f7ff ff10 	bl	8010696 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	1cfa      	adds	r2, r7, #3
 801087a:	214c      	movs	r1, #76	; 0x4c
 801087c:	7812      	ldrb	r2, [r2, #0]
 801087e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010880:	46c0      	nop			; (mov r8, r8)
 8010882:	46bd      	mov	sp, r7
 8010884:	b004      	add	sp, #16
 8010886:	bd80      	pop	{r7, pc}

08010888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b08a      	sub	sp, #40	; 0x28
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
 8010894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010896:	2300      	movs	r3, #0
 8010898:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801089e:	6a3b      	ldr	r3, [r7, #32]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d101      	bne.n	80108a8 <xQueueGenericSend+0x20>
 80108a4:	b672      	cpsid	i
 80108a6:	e7fe      	b.n	80108a6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d103      	bne.n	80108b6 <xQueueGenericSend+0x2e>
 80108ae:	6a3b      	ldr	r3, [r7, #32]
 80108b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d101      	bne.n	80108ba <xQueueGenericSend+0x32>
 80108b6:	2301      	movs	r3, #1
 80108b8:	e000      	b.n	80108bc <xQueueGenericSend+0x34>
 80108ba:	2300      	movs	r3, #0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d101      	bne.n	80108c4 <xQueueGenericSend+0x3c>
 80108c0:	b672      	cpsid	i
 80108c2:	e7fe      	b.n	80108c2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	2b02      	cmp	r3, #2
 80108c8:	d103      	bne.n	80108d2 <xQueueGenericSend+0x4a>
 80108ca:	6a3b      	ldr	r3, [r7, #32]
 80108cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d101      	bne.n	80108d6 <xQueueGenericSend+0x4e>
 80108d2:	2301      	movs	r3, #1
 80108d4:	e000      	b.n	80108d8 <xQueueGenericSend+0x50>
 80108d6:	2300      	movs	r3, #0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d101      	bne.n	80108e0 <xQueueGenericSend+0x58>
 80108dc:	b672      	cpsid	i
 80108de:	e7fe      	b.n	80108de <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108e0:	f001 fa9a 	bl	8011e18 <xTaskGetSchedulerState>
 80108e4:	1e03      	subs	r3, r0, #0
 80108e6:	d102      	bne.n	80108ee <xQueueGenericSend+0x66>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d101      	bne.n	80108f2 <xQueueGenericSend+0x6a>
 80108ee:	2301      	movs	r3, #1
 80108f0:	e000      	b.n	80108f4 <xQueueGenericSend+0x6c>
 80108f2:	2300      	movs	r3, #0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <xQueueGenericSend+0x74>
 80108f8:	b672      	cpsid	i
 80108fa:	e7fe      	b.n	80108fa <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80108fc:	f001 ff08 	bl	8012710 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010900:	6a3b      	ldr	r3, [r7, #32]
 8010902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010908:	429a      	cmp	r2, r3
 801090a:	d302      	bcc.n	8010912 <xQueueGenericSend+0x8a>
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	2b02      	cmp	r3, #2
 8010910:	d11e      	bne.n	8010950 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010912:	683a      	ldr	r2, [r7, #0]
 8010914:	68b9      	ldr	r1, [r7, #8]
 8010916:	6a3b      	ldr	r3, [r7, #32]
 8010918:	0018      	movs	r0, r3
 801091a:	f000 fa05 	bl	8010d28 <prvCopyDataToQueue>
 801091e:	0003      	movs	r3, r0
 8010920:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010922:	6a3b      	ldr	r3, [r7, #32]
 8010924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010926:	2b00      	cmp	r3, #0
 8010928:	d009      	beq.n	801093e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801092a:	6a3b      	ldr	r3, [r7, #32]
 801092c:	3324      	adds	r3, #36	; 0x24
 801092e:	0018      	movs	r0, r3
 8010930:	f001 f8cc 	bl	8011acc <xTaskRemoveFromEventList>
 8010934:	1e03      	subs	r3, r0, #0
 8010936:	d007      	beq.n	8010948 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010938:	f001 feda 	bl	80126f0 <vPortYield>
 801093c:	e004      	b.n	8010948 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801093e:	69fb      	ldr	r3, [r7, #28]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d001      	beq.n	8010948 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010944:	f001 fed4 	bl	80126f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010948:	f001 fef4 	bl	8012734 <vPortExitCritical>
				return pdPASS;
 801094c:	2301      	movs	r3, #1
 801094e:	e05b      	b.n	8010a08 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d103      	bne.n	801095e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010956:	f001 feed 	bl	8012734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801095a:	2300      	movs	r3, #0
 801095c:	e054      	b.n	8010a08 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 801095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010960:	2b00      	cmp	r3, #0
 8010962:	d106      	bne.n	8010972 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010964:	2314      	movs	r3, #20
 8010966:	18fb      	adds	r3, r7, r3
 8010968:	0018      	movs	r0, r3
 801096a:	f001 f90b 	bl	8011b84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801096e:	2301      	movs	r3, #1
 8010970:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010972:	f001 fedf 	bl	8012734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010976:	f000 feb5 	bl	80116e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801097a:	f001 fec9 	bl	8012710 <vPortEnterCritical>
 801097e:	6a3b      	ldr	r3, [r7, #32]
 8010980:	2244      	movs	r2, #68	; 0x44
 8010982:	5c9b      	ldrb	r3, [r3, r2]
 8010984:	b25b      	sxtb	r3, r3
 8010986:	3301      	adds	r3, #1
 8010988:	d103      	bne.n	8010992 <xQueueGenericSend+0x10a>
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	2244      	movs	r2, #68	; 0x44
 801098e:	2100      	movs	r1, #0
 8010990:	5499      	strb	r1, [r3, r2]
 8010992:	6a3b      	ldr	r3, [r7, #32]
 8010994:	2245      	movs	r2, #69	; 0x45
 8010996:	5c9b      	ldrb	r3, [r3, r2]
 8010998:	b25b      	sxtb	r3, r3
 801099a:	3301      	adds	r3, #1
 801099c:	d103      	bne.n	80109a6 <xQueueGenericSend+0x11e>
 801099e:	6a3b      	ldr	r3, [r7, #32]
 80109a0:	2245      	movs	r2, #69	; 0x45
 80109a2:	2100      	movs	r1, #0
 80109a4:	5499      	strb	r1, [r3, r2]
 80109a6:	f001 fec5 	bl	8012734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80109aa:	1d3a      	adds	r2, r7, #4
 80109ac:	2314      	movs	r3, #20
 80109ae:	18fb      	adds	r3, r7, r3
 80109b0:	0011      	movs	r1, r2
 80109b2:	0018      	movs	r0, r3
 80109b4:	f001 f8fa 	bl	8011bac <xTaskCheckForTimeOut>
 80109b8:	1e03      	subs	r3, r0, #0
 80109ba:	d11e      	bne.n	80109fa <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80109bc:	6a3b      	ldr	r3, [r7, #32]
 80109be:	0018      	movs	r0, r3
 80109c0:	f000 fab7 	bl	8010f32 <prvIsQueueFull>
 80109c4:	1e03      	subs	r3, r0, #0
 80109c6:	d011      	beq.n	80109ec <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80109c8:	6a3b      	ldr	r3, [r7, #32]
 80109ca:	3310      	adds	r3, #16
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	0011      	movs	r1, r2
 80109d0:	0018      	movs	r0, r3
 80109d2:	f001 f837 	bl	8011a44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80109d6:	6a3b      	ldr	r3, [r7, #32]
 80109d8:	0018      	movs	r0, r3
 80109da:	f000 fa36 	bl	8010e4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80109de:	f000 fe8d 	bl	80116fc <xTaskResumeAll>
 80109e2:	1e03      	subs	r3, r0, #0
 80109e4:	d18a      	bne.n	80108fc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80109e6:	f001 fe83 	bl	80126f0 <vPortYield>
 80109ea:	e787      	b.n	80108fc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	0018      	movs	r0, r3
 80109f0:	f000 fa2b 	bl	8010e4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109f4:	f000 fe82 	bl	80116fc <xTaskResumeAll>
 80109f8:	e780      	b.n	80108fc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80109fa:	6a3b      	ldr	r3, [r7, #32]
 80109fc:	0018      	movs	r0, r3
 80109fe:	f000 fa24 	bl	8010e4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a02:	f000 fe7b 	bl	80116fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010a08:	0018      	movs	r0, r3
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	b00a      	add	sp, #40	; 0x28
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010a10:	b590      	push	{r4, r7, lr}
 8010a12:	b08b      	sub	sp, #44	; 0x2c
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	60b9      	str	r1, [r7, #8]
 8010a1a:	607a      	str	r2, [r7, #4]
 8010a1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8010a22:	6a3b      	ldr	r3, [r7, #32]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d101      	bne.n	8010a2c <xQueueGenericSendFromISR+0x1c>
 8010a28:	b672      	cpsid	i
 8010a2a:	e7fe      	b.n	8010a2a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d103      	bne.n	8010a3a <xQueueGenericSendFromISR+0x2a>
 8010a32:	6a3b      	ldr	r3, [r7, #32]
 8010a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d101      	bne.n	8010a3e <xQueueGenericSendFromISR+0x2e>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	e000      	b.n	8010a40 <xQueueGenericSendFromISR+0x30>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d101      	bne.n	8010a48 <xQueueGenericSendFromISR+0x38>
 8010a44:	b672      	cpsid	i
 8010a46:	e7fe      	b.n	8010a46 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	d103      	bne.n	8010a56 <xQueueGenericSendFromISR+0x46>
 8010a4e:	6a3b      	ldr	r3, [r7, #32]
 8010a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d101      	bne.n	8010a5a <xQueueGenericSendFromISR+0x4a>
 8010a56:	2301      	movs	r3, #1
 8010a58:	e000      	b.n	8010a5c <xQueueGenericSendFromISR+0x4c>
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d101      	bne.n	8010a64 <xQueueGenericSendFromISR+0x54>
 8010a60:	b672      	cpsid	i
 8010a62:	e7fe      	b.n	8010a62 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a64:	f001 fe7e 	bl	8012764 <ulSetInterruptMaskFromISR>
 8010a68:	0003      	movs	r3, r0
 8010a6a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a6c:	6a3b      	ldr	r3, [r7, #32]
 8010a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a70:	6a3b      	ldr	r3, [r7, #32]
 8010a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d302      	bcc.n	8010a7e <xQueueGenericSendFromISR+0x6e>
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	2b02      	cmp	r3, #2
 8010a7c:	d131      	bne.n	8010ae2 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a7e:	241b      	movs	r4, #27
 8010a80:	193b      	adds	r3, r7, r4
 8010a82:	6a3a      	ldr	r2, [r7, #32]
 8010a84:	2145      	movs	r1, #69	; 0x45
 8010a86:	5c52      	ldrb	r2, [r2, r1]
 8010a88:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a8a:	6a3b      	ldr	r3, [r7, #32]
 8010a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a8e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a90:	683a      	ldr	r2, [r7, #0]
 8010a92:	68b9      	ldr	r1, [r7, #8]
 8010a94:	6a3b      	ldr	r3, [r7, #32]
 8010a96:	0018      	movs	r0, r3
 8010a98:	f000 f946 	bl	8010d28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a9c:	193b      	adds	r3, r7, r4
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	b25b      	sxtb	r3, r3
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	d111      	bne.n	8010aca <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010aa6:	6a3b      	ldr	r3, [r7, #32]
 8010aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d016      	beq.n	8010adc <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010aae:	6a3b      	ldr	r3, [r7, #32]
 8010ab0:	3324      	adds	r3, #36	; 0x24
 8010ab2:	0018      	movs	r0, r3
 8010ab4:	f001 f80a 	bl	8011acc <xTaskRemoveFromEventList>
 8010ab8:	1e03      	subs	r3, r0, #0
 8010aba:	d00f      	beq.n	8010adc <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d00c      	beq.n	8010adc <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	601a      	str	r2, [r3, #0]
 8010ac8:	e008      	b.n	8010adc <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010aca:	231b      	movs	r3, #27
 8010acc:	18fb      	adds	r3, r7, r3
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	b2db      	uxtb	r3, r3
 8010ad4:	b259      	sxtb	r1, r3
 8010ad6:	6a3b      	ldr	r3, [r7, #32]
 8010ad8:	2245      	movs	r2, #69	; 0x45
 8010ada:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8010adc:	2301      	movs	r3, #1
 8010ade:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8010ae0:	e001      	b.n	8010ae6 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	0018      	movs	r0, r3
 8010aea:	f001 fe41 	bl	8012770 <vClearInterruptMaskFromISR>

	return xReturn;
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010af0:	0018      	movs	r0, r3
 8010af2:	46bd      	mov	sp, r7
 8010af4:	b00b      	add	sp, #44	; 0x2c
 8010af6:	bd90      	pop	{r4, r7, pc}

08010af8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b08a      	sub	sp, #40	; 0x28
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b04:	2300      	movs	r3, #0
 8010b06:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b0c:	6a3b      	ldr	r3, [r7, #32]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d101      	bne.n	8010b16 <xQueueReceive+0x1e>
 8010b12:	b672      	cpsid	i
 8010b14:	e7fe      	b.n	8010b14 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d103      	bne.n	8010b24 <xQueueReceive+0x2c>
 8010b1c:	6a3b      	ldr	r3, [r7, #32]
 8010b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d101      	bne.n	8010b28 <xQueueReceive+0x30>
 8010b24:	2301      	movs	r3, #1
 8010b26:	e000      	b.n	8010b2a <xQueueReceive+0x32>
 8010b28:	2300      	movs	r3, #0
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d101      	bne.n	8010b32 <xQueueReceive+0x3a>
 8010b2e:	b672      	cpsid	i
 8010b30:	e7fe      	b.n	8010b30 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b32:	f001 f971 	bl	8011e18 <xTaskGetSchedulerState>
 8010b36:	1e03      	subs	r3, r0, #0
 8010b38:	d102      	bne.n	8010b40 <xQueueReceive+0x48>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d101      	bne.n	8010b44 <xQueueReceive+0x4c>
 8010b40:	2301      	movs	r3, #1
 8010b42:	e000      	b.n	8010b46 <xQueueReceive+0x4e>
 8010b44:	2300      	movs	r3, #0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d101      	bne.n	8010b4e <xQueueReceive+0x56>
 8010b4a:	b672      	cpsid	i
 8010b4c:	e7fe      	b.n	8010b4c <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b4e:	f001 fddf 	bl	8012710 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b52:	6a3b      	ldr	r3, [r7, #32]
 8010b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b56:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d01a      	beq.n	8010b94 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	6a3b      	ldr	r3, [r7, #32]
 8010b62:	0011      	movs	r1, r2
 8010b64:	0018      	movs	r0, r3
 8010b66:	f000 f94a 	bl	8010dfe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	1e5a      	subs	r2, r3, #1
 8010b6e:	6a3b      	ldr	r3, [r7, #32]
 8010b70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b72:	6a3b      	ldr	r3, [r7, #32]
 8010b74:	691b      	ldr	r3, [r3, #16]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d008      	beq.n	8010b8c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b7a:	6a3b      	ldr	r3, [r7, #32]
 8010b7c:	3310      	adds	r3, #16
 8010b7e:	0018      	movs	r0, r3
 8010b80:	f000 ffa4 	bl	8011acc <xTaskRemoveFromEventList>
 8010b84:	1e03      	subs	r3, r0, #0
 8010b86:	d001      	beq.n	8010b8c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b88:	f001 fdb2 	bl	80126f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b8c:	f001 fdd2 	bl	8012734 <vPortExitCritical>
				return pdPASS;
 8010b90:	2301      	movs	r3, #1
 8010b92:	e062      	b.n	8010c5a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d103      	bne.n	8010ba2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b9a:	f001 fdcb 	bl	8012734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	e05b      	b.n	8010c5a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d106      	bne.n	8010bb6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ba8:	2314      	movs	r3, #20
 8010baa:	18fb      	adds	r3, r7, r3
 8010bac:	0018      	movs	r0, r3
 8010bae:	f000 ffe9 	bl	8011b84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010bb6:	f001 fdbd 	bl	8012734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010bba:	f000 fd93 	bl	80116e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010bbe:	f001 fda7 	bl	8012710 <vPortEnterCritical>
 8010bc2:	6a3b      	ldr	r3, [r7, #32]
 8010bc4:	2244      	movs	r2, #68	; 0x44
 8010bc6:	5c9b      	ldrb	r3, [r3, r2]
 8010bc8:	b25b      	sxtb	r3, r3
 8010bca:	3301      	adds	r3, #1
 8010bcc:	d103      	bne.n	8010bd6 <xQueueReceive+0xde>
 8010bce:	6a3b      	ldr	r3, [r7, #32]
 8010bd0:	2244      	movs	r2, #68	; 0x44
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	5499      	strb	r1, [r3, r2]
 8010bd6:	6a3b      	ldr	r3, [r7, #32]
 8010bd8:	2245      	movs	r2, #69	; 0x45
 8010bda:	5c9b      	ldrb	r3, [r3, r2]
 8010bdc:	b25b      	sxtb	r3, r3
 8010bde:	3301      	adds	r3, #1
 8010be0:	d103      	bne.n	8010bea <xQueueReceive+0xf2>
 8010be2:	6a3b      	ldr	r3, [r7, #32]
 8010be4:	2245      	movs	r2, #69	; 0x45
 8010be6:	2100      	movs	r1, #0
 8010be8:	5499      	strb	r1, [r3, r2]
 8010bea:	f001 fda3 	bl	8012734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bee:	1d3a      	adds	r2, r7, #4
 8010bf0:	2314      	movs	r3, #20
 8010bf2:	18fb      	adds	r3, r7, r3
 8010bf4:	0011      	movs	r1, r2
 8010bf6:	0018      	movs	r0, r3
 8010bf8:	f000 ffd8 	bl	8011bac <xTaskCheckForTimeOut>
 8010bfc:	1e03      	subs	r3, r0, #0
 8010bfe:	d11e      	bne.n	8010c3e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c00:	6a3b      	ldr	r3, [r7, #32]
 8010c02:	0018      	movs	r0, r3
 8010c04:	f000 f97f 	bl	8010f06 <prvIsQueueEmpty>
 8010c08:	1e03      	subs	r3, r0, #0
 8010c0a:	d011      	beq.n	8010c30 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c0c:	6a3b      	ldr	r3, [r7, #32]
 8010c0e:	3324      	adds	r3, #36	; 0x24
 8010c10:	687a      	ldr	r2, [r7, #4]
 8010c12:	0011      	movs	r1, r2
 8010c14:	0018      	movs	r0, r3
 8010c16:	f000 ff15 	bl	8011a44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c1a:	6a3b      	ldr	r3, [r7, #32]
 8010c1c:	0018      	movs	r0, r3
 8010c1e:	f000 f914 	bl	8010e4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c22:	f000 fd6b 	bl	80116fc <xTaskResumeAll>
 8010c26:	1e03      	subs	r3, r0, #0
 8010c28:	d191      	bne.n	8010b4e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8010c2a:	f001 fd61 	bl	80126f0 <vPortYield>
 8010c2e:	e78e      	b.n	8010b4e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c30:	6a3b      	ldr	r3, [r7, #32]
 8010c32:	0018      	movs	r0, r3
 8010c34:	f000 f909 	bl	8010e4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c38:	f000 fd60 	bl	80116fc <xTaskResumeAll>
 8010c3c:	e787      	b.n	8010b4e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c3e:	6a3b      	ldr	r3, [r7, #32]
 8010c40:	0018      	movs	r0, r3
 8010c42:	f000 f902 	bl	8010e4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c46:	f000 fd59 	bl	80116fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c4a:	6a3b      	ldr	r3, [r7, #32]
 8010c4c:	0018      	movs	r0, r3
 8010c4e:	f000 f95a 	bl	8010f06 <prvIsQueueEmpty>
 8010c52:	1e03      	subs	r3, r0, #0
 8010c54:	d100      	bne.n	8010c58 <xQueueReceive+0x160>
 8010c56:	e77a      	b.n	8010b4e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c5a:	0018      	movs	r0, r3
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	b00a      	add	sp, #40	; 0x28
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c62:	b590      	push	{r4, r7, lr}
 8010c64:	b08b      	sub	sp, #44	; 0x2c
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	60f8      	str	r0, [r7, #12]
 8010c6a:	60b9      	str	r1, [r7, #8]
 8010c6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8010c72:	6a3b      	ldr	r3, [r7, #32]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d101      	bne.n	8010c7c <xQueueReceiveFromISR+0x1a>
 8010c78:	b672      	cpsid	i
 8010c7a:	e7fe      	b.n	8010c7a <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d103      	bne.n	8010c8a <xQueueReceiveFromISR+0x28>
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d101      	bne.n	8010c8e <xQueueReceiveFromISR+0x2c>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	e000      	b.n	8010c90 <xQueueReceiveFromISR+0x2e>
 8010c8e:	2300      	movs	r3, #0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d101      	bne.n	8010c98 <xQueueReceiveFromISR+0x36>
 8010c94:	b672      	cpsid	i
 8010c96:	e7fe      	b.n	8010c96 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c98:	f001 fd64 	bl	8012764 <ulSetInterruptMaskFromISR>
 8010c9c:	0003      	movs	r3, r0
 8010c9e:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ca0:	6a3b      	ldr	r3, [r7, #32]
 8010ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ca4:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ca6:	69bb      	ldr	r3, [r7, #24]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d032      	beq.n	8010d12 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010cac:	2417      	movs	r4, #23
 8010cae:	193b      	adds	r3, r7, r4
 8010cb0:	6a3a      	ldr	r2, [r7, #32]
 8010cb2:	2144      	movs	r1, #68	; 0x44
 8010cb4:	5c52      	ldrb	r2, [r2, r1]
 8010cb6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010cb8:	68ba      	ldr	r2, [r7, #8]
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	0011      	movs	r1, r2
 8010cbe:	0018      	movs	r0, r3
 8010cc0:	f000 f89d 	bl	8010dfe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010cc4:	69bb      	ldr	r3, [r7, #24]
 8010cc6:	1e5a      	subs	r2, r3, #1
 8010cc8:	6a3b      	ldr	r3, [r7, #32]
 8010cca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010ccc:	193b      	adds	r3, r7, r4
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	b25b      	sxtb	r3, r3
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	d111      	bne.n	8010cfa <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	691b      	ldr	r3, [r3, #16]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d016      	beq.n	8010d0c <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cde:	6a3b      	ldr	r3, [r7, #32]
 8010ce0:	3310      	adds	r3, #16
 8010ce2:	0018      	movs	r0, r3
 8010ce4:	f000 fef2 	bl	8011acc <xTaskRemoveFromEventList>
 8010ce8:	1e03      	subs	r3, r0, #0
 8010cea:	d00f      	beq.n	8010d0c <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00c      	beq.n	8010d0c <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	601a      	str	r2, [r3, #0]
 8010cf8:	e008      	b.n	8010d0c <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010cfa:	2317      	movs	r3, #23
 8010cfc:	18fb      	adds	r3, r7, r3
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	3301      	adds	r3, #1
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	b259      	sxtb	r1, r3
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	2244      	movs	r2, #68	; 0x44
 8010d0a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d10:	e001      	b.n	8010d16 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8010d12:	2300      	movs	r3, #0
 8010d14:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	0018      	movs	r0, r3
 8010d1a:	f001 fd29 	bl	8012770 <vClearInterruptMaskFromISR>

	return xReturn;
 8010d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d20:	0018      	movs	r0, r3
 8010d22:	46bd      	mov	sp, r7
 8010d24:	b00b      	add	sp, #44	; 0x2c
 8010d26:	bd90      	pop	{r4, r7, pc}

08010d28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b086      	sub	sp, #24
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	60b9      	str	r1, [r7, #8]
 8010d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010d34:	2300      	movs	r3, #0
 8010d36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d10e      	bne.n	8010d64 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d14e      	bne.n	8010dec <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	689b      	ldr	r3, [r3, #8]
 8010d52:	0018      	movs	r0, r3
 8010d54:	f001 f87c 	bl	8011e50 <xTaskPriorityDisinherit>
 8010d58:	0003      	movs	r3, r0
 8010d5a:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	609a      	str	r2, [r3, #8]
 8010d62:	e043      	b.n	8010dec <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d119      	bne.n	8010d9e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	6858      	ldr	r0, [r3, #4]
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	0019      	movs	r1, r3
 8010d76:	f009 ffa3 	bl	801acc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	685a      	ldr	r2, [r3, #4]
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d82:	18d2      	adds	r2, r2, r3
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	685a      	ldr	r2, [r3, #4]
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	689b      	ldr	r3, [r3, #8]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d32b      	bcc.n	8010dec <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	605a      	str	r2, [r3, #4]
 8010d9c:	e026      	b.n	8010dec <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	68d8      	ldr	r0, [r3, #12]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	0019      	movs	r1, r3
 8010daa:	f009 ff89 	bl	801acc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	68da      	ldr	r2, [r3, #12]
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010db6:	425b      	negs	r3, r3
 8010db8:	18d2      	adds	r2, r2, r3
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	68da      	ldr	r2, [r3, #12]
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d207      	bcs.n	8010dda <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	689a      	ldr	r2, [r3, #8]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dd2:	425b      	negs	r3, r3
 8010dd4:	18d2      	adds	r2, r2, r3
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2b02      	cmp	r3, #2
 8010dde:	d105      	bne.n	8010dec <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d002      	beq.n	8010dec <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	1c5a      	adds	r2, r3, #1
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010df4:	697b      	ldr	r3, [r7, #20]
}
 8010df6:	0018      	movs	r0, r3
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	b006      	add	sp, #24
 8010dfc:	bd80      	pop	{r7, pc}

08010dfe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b082      	sub	sp, #8
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
 8010e06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d018      	beq.n	8010e42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	68da      	ldr	r2, [r3, #12]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e18:	18d2      	adds	r2, r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	68da      	ldr	r2, [r3, #12]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d303      	bcc.n	8010e32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	68d9      	ldr	r1, [r3, #12]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	0018      	movs	r0, r3
 8010e3e:	f009 ff3f 	bl	801acc0 <memcpy>
	}
}
 8010e42:	46c0      	nop			; (mov r8, r8)
 8010e44:	46bd      	mov	sp, r7
 8010e46:	b002      	add	sp, #8
 8010e48:	bd80      	pop	{r7, pc}

08010e4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b084      	sub	sp, #16
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010e52:	f001 fc5d 	bl	8012710 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010e56:	230f      	movs	r3, #15
 8010e58:	18fb      	adds	r3, r7, r3
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	2145      	movs	r1, #69	; 0x45
 8010e5e:	5c52      	ldrb	r2, [r2, r1]
 8010e60:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e62:	e013      	b.n	8010e8c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d016      	beq.n	8010e9a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	3324      	adds	r3, #36	; 0x24
 8010e70:	0018      	movs	r0, r3
 8010e72:	f000 fe2b 	bl	8011acc <xTaskRemoveFromEventList>
 8010e76:	1e03      	subs	r3, r0, #0
 8010e78:	d001      	beq.n	8010e7e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010e7a:	f000 fee7 	bl	8011c4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010e7e:	210f      	movs	r1, #15
 8010e80:	187b      	adds	r3, r7, r1
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	b2da      	uxtb	r2, r3
 8010e88:	187b      	adds	r3, r7, r1
 8010e8a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e8c:	230f      	movs	r3, #15
 8010e8e:	18fb      	adds	r3, r7, r3
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	b25b      	sxtb	r3, r3
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	dce5      	bgt.n	8010e64 <prvUnlockQueue+0x1a>
 8010e98:	e000      	b.n	8010e9c <prvUnlockQueue+0x52>
					break;
 8010e9a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2245      	movs	r2, #69	; 0x45
 8010ea0:	21ff      	movs	r1, #255	; 0xff
 8010ea2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8010ea4:	f001 fc46 	bl	8012734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010ea8:	f001 fc32 	bl	8012710 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010eac:	230e      	movs	r3, #14
 8010eae:	18fb      	adds	r3, r7, r3
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	2144      	movs	r1, #68	; 0x44
 8010eb4:	5c52      	ldrb	r2, [r2, r1]
 8010eb6:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010eb8:	e013      	b.n	8010ee2 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	691b      	ldr	r3, [r3, #16]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d016      	beq.n	8010ef0 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	3310      	adds	r3, #16
 8010ec6:	0018      	movs	r0, r3
 8010ec8:	f000 fe00 	bl	8011acc <xTaskRemoveFromEventList>
 8010ecc:	1e03      	subs	r3, r0, #0
 8010ece:	d001      	beq.n	8010ed4 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8010ed0:	f000 febc 	bl	8011c4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010ed4:	210e      	movs	r1, #14
 8010ed6:	187b      	adds	r3, r7, r1
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	3b01      	subs	r3, #1
 8010edc:	b2da      	uxtb	r2, r3
 8010ede:	187b      	adds	r3, r7, r1
 8010ee0:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ee2:	230e      	movs	r3, #14
 8010ee4:	18fb      	adds	r3, r7, r3
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	b25b      	sxtb	r3, r3
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	dce5      	bgt.n	8010eba <prvUnlockQueue+0x70>
 8010eee:	e000      	b.n	8010ef2 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8010ef0:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2244      	movs	r2, #68	; 0x44
 8010ef6:	21ff      	movs	r1, #255	; 0xff
 8010ef8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8010efa:	f001 fc1b 	bl	8012734 <vPortExitCritical>
}
 8010efe:	46c0      	nop			; (mov r8, r8)
 8010f00:	46bd      	mov	sp, r7
 8010f02:	b004      	add	sp, #16
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b084      	sub	sp, #16
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f0e:	f001 fbff 	bl	8012710 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d102      	bne.n	8010f20 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	60fb      	str	r3, [r7, #12]
 8010f1e:	e001      	b.n	8010f24 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010f20:	2300      	movs	r3, #0
 8010f22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f24:	f001 fc06 	bl	8012734 <vPortExitCritical>

	return xReturn;
 8010f28:	68fb      	ldr	r3, [r7, #12]
}
 8010f2a:	0018      	movs	r0, r3
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	b004      	add	sp, #16
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b084      	sub	sp, #16
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f3a:	f001 fbe9 	bl	8012710 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d102      	bne.n	8010f50 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	60fb      	str	r3, [r7, #12]
 8010f4e:	e001      	b.n	8010f54 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010f50:	2300      	movs	r3, #0
 8010f52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f54:	f001 fbee 	bl	8012734 <vPortExitCritical>

	return xReturn;
 8010f58:	68fb      	ldr	r3, [r7, #12]
}
 8010f5a:	0018      	movs	r0, r3
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	b004      	add	sp, #16
 8010f60:	bd80      	pop	{r7, pc}
	...

08010f64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b084      	sub	sp, #16
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
 8010f6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f6e:	2300      	movs	r3, #0
 8010f70:	60fb      	str	r3, [r7, #12]
 8010f72:	e015      	b.n	8010fa0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010f74:	4b0e      	ldr	r3, [pc, #56]	; (8010fb0 <vQueueAddToRegistry+0x4c>)
 8010f76:	68fa      	ldr	r2, [r7, #12]
 8010f78:	00d2      	lsls	r2, r2, #3
 8010f7a:	58d3      	ldr	r3, [r2, r3]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d10c      	bne.n	8010f9a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010f80:	4b0b      	ldr	r3, [pc, #44]	; (8010fb0 <vQueueAddToRegistry+0x4c>)
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	00d2      	lsls	r2, r2, #3
 8010f86:	6839      	ldr	r1, [r7, #0]
 8010f88:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010f8a:	4a09      	ldr	r2, [pc, #36]	; (8010fb0 <vQueueAddToRegistry+0x4c>)
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	00db      	lsls	r3, r3, #3
 8010f90:	18d3      	adds	r3, r2, r3
 8010f92:	3304      	adds	r3, #4
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010f98:	e006      	b.n	8010fa8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	60fb      	str	r3, [r7, #12]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2b07      	cmp	r3, #7
 8010fa4:	d9e6      	bls.n	8010f74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010fa6:	46c0      	nop			; (mov r8, r8)
 8010fa8:	46c0      	nop			; (mov r8, r8)
 8010faa:	46bd      	mov	sp, r7
 8010fac:	b004      	add	sp, #16
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	20000b88 	.word	0x20000b88

08010fb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b086      	sub	sp, #24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010fc4:	f001 fba4 	bl	8012710 <vPortEnterCritical>
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	2244      	movs	r2, #68	; 0x44
 8010fcc:	5c9b      	ldrb	r3, [r3, r2]
 8010fce:	b25b      	sxtb	r3, r3
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	d103      	bne.n	8010fdc <vQueueWaitForMessageRestricted+0x28>
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	2244      	movs	r2, #68	; 0x44
 8010fd8:	2100      	movs	r1, #0
 8010fda:	5499      	strb	r1, [r3, r2]
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	2245      	movs	r2, #69	; 0x45
 8010fe0:	5c9b      	ldrb	r3, [r3, r2]
 8010fe2:	b25b      	sxtb	r3, r3
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	d103      	bne.n	8010ff0 <vQueueWaitForMessageRestricted+0x3c>
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	2245      	movs	r2, #69	; 0x45
 8010fec:	2100      	movs	r1, #0
 8010fee:	5499      	strb	r1, [r3, r2]
 8010ff0:	f001 fba0 	bl	8012734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d106      	bne.n	801100a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	3324      	adds	r3, #36	; 0x24
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	68b9      	ldr	r1, [r7, #8]
 8011004:	0018      	movs	r0, r3
 8011006:	f000 fd3b 	bl	8011a80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	0018      	movs	r0, r3
 801100e:	f7ff ff1c 	bl	8010e4a <prvUnlockQueue>
	}
 8011012:	46c0      	nop			; (mov r8, r8)
 8011014:	46bd      	mov	sp, r7
 8011016:	b006      	add	sp, #24
 8011018:	bd80      	pop	{r7, pc}

0801101a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801101a:	b590      	push	{r4, r7, lr}
 801101c:	b08d      	sub	sp, #52	; 0x34
 801101e:	af04      	add	r7, sp, #16
 8011020:	60f8      	str	r0, [r7, #12]
 8011022:	60b9      	str	r1, [r7, #8]
 8011024:	607a      	str	r2, [r7, #4]
 8011026:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801102a:	2b00      	cmp	r3, #0
 801102c:	d101      	bne.n	8011032 <xTaskCreateStatic+0x18>
 801102e:	b672      	cpsid	i
 8011030:	e7fe      	b.n	8011030 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8011032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011034:	2b00      	cmp	r3, #0
 8011036:	d101      	bne.n	801103c <xTaskCreateStatic+0x22>
 8011038:	b672      	cpsid	i
 801103a:	e7fe      	b.n	801103a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801103c:	23a8      	movs	r3, #168	; 0xa8
 801103e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	2ba8      	cmp	r3, #168	; 0xa8
 8011044:	d001      	beq.n	801104a <xTaskCreateStatic+0x30>
 8011046:	b672      	cpsid	i
 8011048:	e7fe      	b.n	8011048 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801104a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104e:	2b00      	cmp	r3, #0
 8011050:	d020      	beq.n	8011094 <xTaskCreateStatic+0x7a>
 8011052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011054:	2b00      	cmp	r3, #0
 8011056:	d01d      	beq.n	8011094 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801105c:	69fb      	ldr	r3, [r7, #28]
 801105e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011060:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	22a5      	movs	r2, #165	; 0xa5
 8011066:	2102      	movs	r1, #2
 8011068:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801106a:	683c      	ldr	r4, [r7, #0]
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	68b9      	ldr	r1, [r7, #8]
 8011070:	68f8      	ldr	r0, [r7, #12]
 8011072:	2300      	movs	r3, #0
 8011074:	9303      	str	r3, [sp, #12]
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	9302      	str	r3, [sp, #8]
 801107a:	2318      	movs	r3, #24
 801107c:	18fb      	adds	r3, r7, r3
 801107e:	9301      	str	r3, [sp, #4]
 8011080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011082:	9300      	str	r3, [sp, #0]
 8011084:	0023      	movs	r3, r4
 8011086:	f000 f859 	bl	801113c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	0018      	movs	r0, r3
 801108e:	f000 f8f5 	bl	801127c <prvAddNewTaskToReadyList>
 8011092:	e001      	b.n	8011098 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8011094:	2300      	movs	r3, #0
 8011096:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011098:	69bb      	ldr	r3, [r7, #24]
	}
 801109a:	0018      	movs	r0, r3
 801109c:	46bd      	mov	sp, r7
 801109e:	b009      	add	sp, #36	; 0x24
 80110a0:	bd90      	pop	{r4, r7, pc}

080110a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80110a2:	b590      	push	{r4, r7, lr}
 80110a4:	b08d      	sub	sp, #52	; 0x34
 80110a6:	af04      	add	r7, sp, #16
 80110a8:	60f8      	str	r0, [r7, #12]
 80110aa:	60b9      	str	r1, [r7, #8]
 80110ac:	603b      	str	r3, [r7, #0]
 80110ae:	1dbb      	adds	r3, r7, #6
 80110b0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80110b2:	1dbb      	adds	r3, r7, #6
 80110b4:	881b      	ldrh	r3, [r3, #0]
 80110b6:	009b      	lsls	r3, r3, #2
 80110b8:	0018      	movs	r0, r3
 80110ba:	f001 fbc1 	bl	8012840 <pvPortMalloc>
 80110be:	0003      	movs	r3, r0
 80110c0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d010      	beq.n	80110ea <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80110c8:	20a8      	movs	r0, #168	; 0xa8
 80110ca:	f001 fbb9 	bl	8012840 <pvPortMalloc>
 80110ce:	0003      	movs	r3, r0
 80110d0:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d003      	beq.n	80110e0 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	697a      	ldr	r2, [r7, #20]
 80110dc:	631a      	str	r2, [r3, #48]	; 0x30
 80110de:	e006      	b.n	80110ee <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	0018      	movs	r0, r3
 80110e4:	f001 fc58 	bl	8012998 <vPortFree>
 80110e8:	e001      	b.n	80110ee <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80110ea:	2300      	movs	r3, #0
 80110ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80110ee:	69fb      	ldr	r3, [r7, #28]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d01a      	beq.n	801112a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	22a5      	movs	r2, #165	; 0xa5
 80110f8:	2100      	movs	r1, #0
 80110fa:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80110fc:	1dbb      	adds	r3, r7, #6
 80110fe:	881a      	ldrh	r2, [r3, #0]
 8011100:	683c      	ldr	r4, [r7, #0]
 8011102:	68b9      	ldr	r1, [r7, #8]
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	2300      	movs	r3, #0
 8011108:	9303      	str	r3, [sp, #12]
 801110a:	69fb      	ldr	r3, [r7, #28]
 801110c:	9302      	str	r3, [sp, #8]
 801110e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011110:	9301      	str	r3, [sp, #4]
 8011112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	0023      	movs	r3, r4
 8011118:	f000 f810 	bl	801113c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	0018      	movs	r0, r3
 8011120:	f000 f8ac 	bl	801127c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011124:	2301      	movs	r3, #1
 8011126:	61bb      	str	r3, [r7, #24]
 8011128:	e002      	b.n	8011130 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801112a:	2301      	movs	r3, #1
 801112c:	425b      	negs	r3, r3
 801112e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011130:	69bb      	ldr	r3, [r7, #24]
	}
 8011132:	0018      	movs	r0, r3
 8011134:	46bd      	mov	sp, r7
 8011136:	b009      	add	sp, #36	; 0x24
 8011138:	bd90      	pop	{r4, r7, pc}
	...

0801113c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b086      	sub	sp, #24
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
 8011148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	009b      	lsls	r3, r3, #2
 8011152:	001a      	movs	r2, r3
 8011154:	21a5      	movs	r1, #165	; 0xa5
 8011156:	f009 fcff 	bl	801ab58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4942      	ldr	r1, [pc, #264]	; (801126c <prvInitialiseNewTask+0x130>)
 8011162:	468c      	mov	ip, r1
 8011164:	4463      	add	r3, ip
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	18d3      	adds	r3, r2, r3
 801116a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	2207      	movs	r2, #7
 8011170:	4393      	bics	r3, r2
 8011172:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	2207      	movs	r2, #7
 8011178:	4013      	ands	r3, r2
 801117a:	d001      	beq.n	8011180 <prvInitialiseNewTask+0x44>
 801117c:	b672      	cpsid	i
 801117e:	e7fe      	b.n	801117e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d020      	beq.n	80111c8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011186:	2300      	movs	r3, #0
 8011188:	617b      	str	r3, [r7, #20]
 801118a:	e013      	b.n	80111b4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801118c:	68ba      	ldr	r2, [r7, #8]
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	18d3      	adds	r3, r2, r3
 8011192:	7818      	ldrb	r0, [r3, #0]
 8011194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011196:	2134      	movs	r1, #52	; 0x34
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	18d3      	adds	r3, r2, r3
 801119c:	185b      	adds	r3, r3, r1
 801119e:	1c02      	adds	r2, r0, #0
 80111a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80111a2:	68ba      	ldr	r2, [r7, #8]
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	18d3      	adds	r3, r2, r3
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d006      	beq.n	80111bc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	3301      	adds	r3, #1
 80111b2:	617b      	str	r3, [r7, #20]
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	2b0f      	cmp	r3, #15
 80111b8:	d9e8      	bls.n	801118c <prvInitialiseNewTask+0x50>
 80111ba:	e000      	b.n	80111be <prvInitialiseNewTask+0x82>
			{
				break;
 80111bc:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80111be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c0:	2243      	movs	r2, #67	; 0x43
 80111c2:	2100      	movs	r1, #0
 80111c4:	5499      	strb	r1, [r3, r2]
 80111c6:	e003      	b.n	80111d0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80111c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ca:	2234      	movs	r2, #52	; 0x34
 80111cc:	2100      	movs	r1, #0
 80111ce:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80111d0:	6a3b      	ldr	r3, [r7, #32]
 80111d2:	2b37      	cmp	r3, #55	; 0x37
 80111d4:	d901      	bls.n	80111da <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80111d6:	2337      	movs	r3, #55	; 0x37
 80111d8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80111da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111dc:	6a3a      	ldr	r2, [r7, #32]
 80111de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80111e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e2:	6a3a      	ldr	r2, [r7, #32]
 80111e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80111e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e8:	2200      	movs	r2, #0
 80111ea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80111ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ee:	3304      	adds	r3, #4
 80111f0:	0018      	movs	r0, r3
 80111f2:	f7ff f9c5 	bl	8010580 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80111f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f8:	3318      	adds	r3, #24
 80111fa:	0018      	movs	r0, r3
 80111fc:	f7ff f9c0 	bl	8010580 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011204:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011206:	6a3b      	ldr	r3, [r7, #32]
 8011208:	2238      	movs	r2, #56	; 0x38
 801120a:	1ad2      	subs	r2, r2, r3
 801120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011214:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011218:	22a0      	movs	r2, #160	; 0xa0
 801121a:	2100      	movs	r1, #0
 801121c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011220:	22a4      	movs	r2, #164	; 0xa4
 8011222:	2100      	movs	r1, #0
 8011224:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011228:	3354      	adds	r3, #84	; 0x54
 801122a:	224c      	movs	r2, #76	; 0x4c
 801122c:	2100      	movs	r1, #0
 801122e:	0018      	movs	r0, r3
 8011230:	f009 fc92 	bl	801ab58 <memset>
 8011234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011236:	4a0e      	ldr	r2, [pc, #56]	; (8011270 <prvInitialiseNewTask+0x134>)
 8011238:	659a      	str	r2, [r3, #88]	; 0x58
 801123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123c:	4a0d      	ldr	r2, [pc, #52]	; (8011274 <prvInitialiseNewTask+0x138>)
 801123e:	65da      	str	r2, [r3, #92]	; 0x5c
 8011240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011242:	4a0d      	ldr	r2, [pc, #52]	; (8011278 <prvInitialiseNewTask+0x13c>)
 8011244:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011246:	683a      	ldr	r2, [r7, #0]
 8011248:	68f9      	ldr	r1, [r7, #12]
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	0018      	movs	r0, r3
 801124e:	f001 f9c1 	bl	80125d4 <pxPortInitialiseStack>
 8011252:	0002      	movs	r2, r0
 8011254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011256:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125a:	2b00      	cmp	r3, #0
 801125c:	d002      	beq.n	8011264 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011262:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011264:	46c0      	nop			; (mov r8, r8)
 8011266:	46bd      	mov	sp, r7
 8011268:	b006      	add	sp, #24
 801126a:	bd80      	pop	{r7, pc}
 801126c:	3fffffff 	.word	0x3fffffff
 8011270:	200034b0 	.word	0x200034b0
 8011274:	20003518 	.word	0x20003518
 8011278:	20003580 	.word	0x20003580

0801127c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011284:	f001 fa44 	bl	8012710 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011288:	4b2a      	ldr	r3, [pc, #168]	; (8011334 <prvAddNewTaskToReadyList+0xb8>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	1c5a      	adds	r2, r3, #1
 801128e:	4b29      	ldr	r3, [pc, #164]	; (8011334 <prvAddNewTaskToReadyList+0xb8>)
 8011290:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8011292:	4b29      	ldr	r3, [pc, #164]	; (8011338 <prvAddNewTaskToReadyList+0xbc>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d109      	bne.n	80112ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801129a:	4b27      	ldr	r3, [pc, #156]	; (8011338 <prvAddNewTaskToReadyList+0xbc>)
 801129c:	687a      	ldr	r2, [r7, #4]
 801129e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80112a0:	4b24      	ldr	r3, [pc, #144]	; (8011334 <prvAddNewTaskToReadyList+0xb8>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	2b01      	cmp	r3, #1
 80112a6:	d110      	bne.n	80112ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80112a8:	f000 fcea 	bl	8011c80 <prvInitialiseTaskLists>
 80112ac:	e00d      	b.n	80112ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80112ae:	4b23      	ldr	r3, [pc, #140]	; (801133c <prvAddNewTaskToReadyList+0xc0>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d109      	bne.n	80112ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80112b6:	4b20      	ldr	r3, [pc, #128]	; (8011338 <prvAddNewTaskToReadyList+0xbc>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d802      	bhi.n	80112ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80112c4:	4b1c      	ldr	r3, [pc, #112]	; (8011338 <prvAddNewTaskToReadyList+0xbc>)
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80112ca:	4b1d      	ldr	r3, [pc, #116]	; (8011340 <prvAddNewTaskToReadyList+0xc4>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	1c5a      	adds	r2, r3, #1
 80112d0:	4b1b      	ldr	r3, [pc, #108]	; (8011340 <prvAddNewTaskToReadyList+0xc4>)
 80112d2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80112d4:	4b1a      	ldr	r3, [pc, #104]	; (8011340 <prvAddNewTaskToReadyList+0xc4>)
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112e0:	4b18      	ldr	r3, [pc, #96]	; (8011344 <prvAddNewTaskToReadyList+0xc8>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d903      	bls.n	80112f0 <prvAddNewTaskToReadyList+0x74>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112ec:	4b15      	ldr	r3, [pc, #84]	; (8011344 <prvAddNewTaskToReadyList+0xc8>)
 80112ee:	601a      	str	r2, [r3, #0]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112f4:	0013      	movs	r3, r2
 80112f6:	009b      	lsls	r3, r3, #2
 80112f8:	189b      	adds	r3, r3, r2
 80112fa:	009b      	lsls	r3, r3, #2
 80112fc:	4a12      	ldr	r2, [pc, #72]	; (8011348 <prvAddNewTaskToReadyList+0xcc>)
 80112fe:	189a      	adds	r2, r3, r2
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	3304      	adds	r3, #4
 8011304:	0019      	movs	r1, r3
 8011306:	0010      	movs	r0, r2
 8011308:	f7ff f945 	bl	8010596 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801130c:	f001 fa12 	bl	8012734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011310:	4b0a      	ldr	r3, [pc, #40]	; (801133c <prvAddNewTaskToReadyList+0xc0>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d008      	beq.n	801132a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011318:	4b07      	ldr	r3, [pc, #28]	; (8011338 <prvAddNewTaskToReadyList+0xbc>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011322:	429a      	cmp	r2, r3
 8011324:	d201      	bcs.n	801132a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011326:	f001 f9e3 	bl	80126f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801132a:	46c0      	nop			; (mov r8, r8)
 801132c:	46bd      	mov	sp, r7
 801132e:	b002      	add	sp, #8
 8011330:	bd80      	pop	{r7, pc}
 8011332:	46c0      	nop			; (mov r8, r8)
 8011334:	2000109c 	.word	0x2000109c
 8011338:	20000bc8 	.word	0x20000bc8
 801133c:	200010a8 	.word	0x200010a8
 8011340:	200010b8 	.word	0x200010b8
 8011344:	200010a4 	.word	0x200010a4
 8011348:	20000bcc 	.word	0x20000bcc

0801134c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801134c:	b580      	push	{r7, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011354:	2300      	movs	r3, #0
 8011356:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d010      	beq.n	8011380 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801135e:	4b0d      	ldr	r3, [pc, #52]	; (8011394 <vTaskDelay+0x48>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d001      	beq.n	801136a <vTaskDelay+0x1e>
 8011366:	b672      	cpsid	i
 8011368:	e7fe      	b.n	8011368 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801136a:	f000 f9bb 	bl	80116e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2100      	movs	r1, #0
 8011372:	0018      	movs	r0, r3
 8011374:	f000 fdc8 	bl	8011f08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011378:	f000 f9c0 	bl	80116fc <xTaskResumeAll>
 801137c:	0003      	movs	r3, r0
 801137e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d101      	bne.n	801138a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8011386:	f001 f9b3 	bl	80126f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801138a:	46c0      	nop			; (mov r8, r8)
 801138c:	46bd      	mov	sp, r7
 801138e:	b004      	add	sp, #16
 8011390:	bd80      	pop	{r7, pc}
 8011392:	46c0      	nop			; (mov r8, r8)
 8011394:	200010c4 	.word	0x200010c4

08011398 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8011398:	b580      	push	{r7, lr}
 801139a:	b088      	sub	sp, #32
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d101      	bne.n	80113ae <eTaskGetState+0x16>
 80113aa:	b672      	cpsid	i
 80113ac:	e7fe      	b.n	80113ac <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 80113ae:	4b2c      	ldr	r3, [pc, #176]	; (8011460 <eTaskGetState+0xc8>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	69ba      	ldr	r2, [r7, #24]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d104      	bne.n	80113c2 <eTaskGetState+0x2a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80113b8:	231f      	movs	r3, #31
 80113ba:	18fb      	adds	r3, r7, r3
 80113bc:	2200      	movs	r2, #0
 80113be:	701a      	strb	r2, [r3, #0]
 80113c0:	e046      	b.n	8011450 <eTaskGetState+0xb8>
		}
		else
		{
			taskENTER_CRITICAL();
 80113c2:	f001 f9a5 	bl	8012710 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	695b      	ldr	r3, [r3, #20]
 80113ca:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80113cc:	4b25      	ldr	r3, [pc, #148]	; (8011464 <eTaskGetState+0xcc>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80113d2:	4b25      	ldr	r3, [pc, #148]	; (8011468 <eTaskGetState+0xd0>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80113d8:	f001 f9ac 	bl	8012734 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80113dc:	697a      	ldr	r2, [r7, #20]
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d003      	beq.n	80113ec <eTaskGetState+0x54>
 80113e4:	697a      	ldr	r2, [r7, #20]
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d104      	bne.n	80113f6 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80113ec:	231f      	movs	r3, #31
 80113ee:	18fb      	adds	r3, r7, r3
 80113f0:	2202      	movs	r2, #2
 80113f2:	701a      	strb	r2, [r3, #0]
 80113f4:	e02c      	b.n	8011450 <eTaskGetState+0xb8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	4b1c      	ldr	r3, [pc, #112]	; (801146c <eTaskGetState+0xd4>)
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d118      	bne.n	8011430 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80113fe:	69bb      	ldr	r3, [r7, #24]
 8011400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011402:	2b00      	cmp	r3, #0
 8011404:	d10f      	bne.n	8011426 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	22a4      	movs	r2, #164	; 0xa4
 801140a:	5c9b      	ldrb	r3, [r3, r2]
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b01      	cmp	r3, #1
 8011410:	d104      	bne.n	801141c <eTaskGetState+0x84>
							{
								eReturn = eBlocked;
 8011412:	231f      	movs	r3, #31
 8011414:	18fb      	adds	r3, r7, r3
 8011416:	2202      	movs	r2, #2
 8011418:	701a      	strb	r2, [r3, #0]
 801141a:	e019      	b.n	8011450 <eTaskGetState+0xb8>
							}
							else
							{
								eReturn = eSuspended;
 801141c:	231f      	movs	r3, #31
 801141e:	18fb      	adds	r3, r7, r3
 8011420:	2203      	movs	r2, #3
 8011422:	701a      	strb	r2, [r3, #0]
 8011424:	e014      	b.n	8011450 <eTaskGetState+0xb8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8011426:	231f      	movs	r3, #31
 8011428:	18fb      	adds	r3, r7, r3
 801142a:	2202      	movs	r2, #2
 801142c:	701a      	strb	r2, [r3, #0]
 801142e:	e00f      	b.n	8011450 <eTaskGetState+0xb8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8011430:	697a      	ldr	r2, [r7, #20]
 8011432:	4b0f      	ldr	r3, [pc, #60]	; (8011470 <eTaskGetState+0xd8>)
 8011434:	429a      	cmp	r2, r3
 8011436:	d002      	beq.n	801143e <eTaskGetState+0xa6>
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d104      	bne.n	8011448 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801143e:	231f      	movs	r3, #31
 8011440:	18fb      	adds	r3, r7, r3
 8011442:	2204      	movs	r2, #4
 8011444:	701a      	strb	r2, [r3, #0]
 8011446:	e003      	b.n	8011450 <eTaskGetState+0xb8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8011448:	231f      	movs	r3, #31
 801144a:	18fb      	adds	r3, r7, r3
 801144c:	2201      	movs	r2, #1
 801144e:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 8011450:	231f      	movs	r3, #31
 8011452:	18fb      	adds	r3, r7, r3
 8011454:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8011456:	0018      	movs	r0, r3
 8011458:	46bd      	mov	sp, r7
 801145a:	b008      	add	sp, #32
 801145c:	bd80      	pop	{r7, pc}
 801145e:	46c0      	nop			; (mov r8, r8)
 8011460:	20000bc8 	.word	0x20000bc8
 8011464:	20001054 	.word	0x20001054
 8011468:	20001058 	.word	0x20001058
 801146c:	20001088 	.word	0x20001088
 8011470:	20001070 	.word	0x20001070

08011474 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8011474:	b580      	push	{r7, lr}
 8011476:	b084      	sub	sp, #16
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801147c:	f001 f948 	bl	8012710 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d102      	bne.n	801148c <vTaskSuspend+0x18>
 8011486:	4b29      	ldr	r3, [pc, #164]	; (801152c <vTaskSuspend+0xb8>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	e000      	b.n	801148e <vTaskSuspend+0x1a>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	3304      	adds	r3, #4
 8011494:	0018      	movs	r0, r3
 8011496:	f7ff f8d6 	bl	8010646 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d004      	beq.n	80114ac <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	3318      	adds	r3, #24
 80114a6:	0018      	movs	r0, r3
 80114a8:	f7ff f8cd 	bl	8010646 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	1d1a      	adds	r2, r3, #4
 80114b0:	4b1f      	ldr	r3, [pc, #124]	; (8011530 <vTaskSuspend+0xbc>)
 80114b2:	0011      	movs	r1, r2
 80114b4:	0018      	movs	r0, r3
 80114b6:	f7ff f86e 	bl	8010596 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	22a4      	movs	r2, #164	; 0xa4
 80114be:	5c9b      	ldrb	r3, [r3, r2]
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d103      	bne.n	80114ce <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	22a4      	movs	r2, #164	; 0xa4
 80114ca:	2100      	movs	r1, #0
 80114cc:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80114ce:	f001 f931 	bl	8012734 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80114d2:	4b18      	ldr	r3, [pc, #96]	; (8011534 <vTaskSuspend+0xc0>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d005      	beq.n	80114e6 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80114da:	f001 f919 	bl	8012710 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80114de:	f000 fc6f 	bl	8011dc0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80114e2:	f001 f927 	bl	8012734 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80114e6:	4b11      	ldr	r3, [pc, #68]	; (801152c <vTaskSuspend+0xb8>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	68fa      	ldr	r2, [r7, #12]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d118      	bne.n	8011522 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 80114f0:	4b10      	ldr	r3, [pc, #64]	; (8011534 <vTaskSuspend+0xc0>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d008      	beq.n	801150a <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80114f8:	4b0f      	ldr	r3, [pc, #60]	; (8011538 <vTaskSuspend+0xc4>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d001      	beq.n	8011504 <vTaskSuspend+0x90>
 8011500:	b672      	cpsid	i
 8011502:	e7fe      	b.n	8011502 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8011504:	f001 f8f4 	bl	80126f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011508:	e00b      	b.n	8011522 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801150a:	4b09      	ldr	r3, [pc, #36]	; (8011530 <vTaskSuspend+0xbc>)
 801150c:	681a      	ldr	r2, [r3, #0]
 801150e:	4b0b      	ldr	r3, [pc, #44]	; (801153c <vTaskSuspend+0xc8>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	429a      	cmp	r2, r3
 8011514:	d103      	bne.n	801151e <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8011516:	4b05      	ldr	r3, [pc, #20]	; (801152c <vTaskSuspend+0xb8>)
 8011518:	2200      	movs	r2, #0
 801151a:	601a      	str	r2, [r3, #0]
	}
 801151c:	e001      	b.n	8011522 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 801151e:	f000 fa37 	bl	8011990 <vTaskSwitchContext>
	}
 8011522:	46c0      	nop			; (mov r8, r8)
 8011524:	46bd      	mov	sp, r7
 8011526:	b004      	add	sp, #16
 8011528:	bd80      	pop	{r7, pc}
 801152a:	46c0      	nop			; (mov r8, r8)
 801152c:	20000bc8 	.word	0x20000bc8
 8011530:	20001088 	.word	0x20001088
 8011534:	200010a8 	.word	0x200010a8
 8011538:	200010c4 	.word	0x200010c4
 801153c:	2000109c 	.word	0x2000109c

08011540 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8011548:	2300      	movs	r3, #0
 801154a:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d101      	bne.n	801155a <prvTaskIsTaskSuspended+0x1a>
 8011556:	b672      	cpsid	i
 8011558:	e7fe      	b.n	8011558 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	695a      	ldr	r2, [r3, #20]
 801155e:	4b09      	ldr	r3, [pc, #36]	; (8011584 <prvTaskIsTaskSuspended+0x44>)
 8011560:	429a      	cmp	r2, r3
 8011562:	d10a      	bne.n	801157a <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011568:	4b07      	ldr	r3, [pc, #28]	; (8011588 <prvTaskIsTaskSuspended+0x48>)
 801156a:	429a      	cmp	r2, r3
 801156c:	d005      	beq.n	801157a <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011572:	2b00      	cmp	r3, #0
 8011574:	d101      	bne.n	801157a <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 8011576:	2301      	movs	r3, #1
 8011578:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801157a:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801157c:	0018      	movs	r0, r3
 801157e:	46bd      	mov	sp, r7
 8011580:	b004      	add	sp, #16
 8011582:	bd80      	pop	{r7, pc}
 8011584:	20001088 	.word	0x20001088
 8011588:	2000105c 	.word	0x2000105c

0801158c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d101      	bne.n	80115a2 <vTaskResume+0x16>
 801159e:	b672      	cpsid	i
 80115a0:	e7fe      	b.n	80115a0 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80115a2:	4b1e      	ldr	r3, [pc, #120]	; (801161c <vTaskResume+0x90>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	68fa      	ldr	r2, [r7, #12]
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d032      	beq.n	8011612 <vTaskResume+0x86>
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d02f      	beq.n	8011612 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 80115b2:	f001 f8ad 	bl	8012710 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	0018      	movs	r0, r3
 80115ba:	f7ff ffc1 	bl	8011540 <prvTaskIsTaskSuspended>
 80115be:	1e03      	subs	r3, r0, #0
 80115c0:	d025      	beq.n	801160e <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	3304      	adds	r3, #4
 80115c6:	0018      	movs	r0, r3
 80115c8:	f7ff f83d 	bl	8010646 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115d0:	4b13      	ldr	r3, [pc, #76]	; (8011620 <vTaskResume+0x94>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d903      	bls.n	80115e0 <vTaskResume+0x54>
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115dc:	4b10      	ldr	r3, [pc, #64]	; (8011620 <vTaskResume+0x94>)
 80115de:	601a      	str	r2, [r3, #0]
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e4:	0013      	movs	r3, r2
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	189b      	adds	r3, r3, r2
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	4a0d      	ldr	r2, [pc, #52]	; (8011624 <vTaskResume+0x98>)
 80115ee:	189a      	adds	r2, r3, r2
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	3304      	adds	r3, #4
 80115f4:	0019      	movs	r1, r3
 80115f6:	0010      	movs	r0, r2
 80115f8:	f7fe ffcd 	bl	8010596 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011600:	4b06      	ldr	r3, [pc, #24]	; (801161c <vTaskResume+0x90>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011606:	429a      	cmp	r2, r3
 8011608:	d301      	bcc.n	801160e <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801160a:	f001 f871 	bl	80126f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801160e:	f001 f891 	bl	8012734 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011612:	46c0      	nop			; (mov r8, r8)
 8011614:	46bd      	mov	sp, r7
 8011616:	b004      	add	sp, #16
 8011618:	bd80      	pop	{r7, pc}
 801161a:	46c0      	nop			; (mov r8, r8)
 801161c:	20000bc8 	.word	0x20000bc8
 8011620:	200010a4 	.word	0x200010a4
 8011624:	20000bcc 	.word	0x20000bcc

08011628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011628:	b590      	push	{r4, r7, lr}
 801162a:	b089      	sub	sp, #36	; 0x24
 801162c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801162e:	2300      	movs	r3, #0
 8011630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011632:	2300      	movs	r3, #0
 8011634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011636:	003a      	movs	r2, r7
 8011638:	1d39      	adds	r1, r7, #4
 801163a:	2308      	movs	r3, #8
 801163c:	18fb      	adds	r3, r7, r3
 801163e:	0018      	movs	r0, r3
 8011640:	f7fe ff50 	bl	80104e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011644:	683c      	ldr	r4, [r7, #0]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	68ba      	ldr	r2, [r7, #8]
 801164a:	491e      	ldr	r1, [pc, #120]	; (80116c4 <vTaskStartScheduler+0x9c>)
 801164c:	481e      	ldr	r0, [pc, #120]	; (80116c8 <vTaskStartScheduler+0xa0>)
 801164e:	9202      	str	r2, [sp, #8]
 8011650:	9301      	str	r3, [sp, #4]
 8011652:	2300      	movs	r3, #0
 8011654:	9300      	str	r3, [sp, #0]
 8011656:	2300      	movs	r3, #0
 8011658:	0022      	movs	r2, r4
 801165a:	f7ff fcde 	bl	801101a <xTaskCreateStatic>
 801165e:	0002      	movs	r2, r0
 8011660:	4b1a      	ldr	r3, [pc, #104]	; (80116cc <vTaskStartScheduler+0xa4>)
 8011662:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011664:	4b19      	ldr	r3, [pc, #100]	; (80116cc <vTaskStartScheduler+0xa4>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d002      	beq.n	8011672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801166c:	2301      	movs	r3, #1
 801166e:	60fb      	str	r3, [r7, #12]
 8011670:	e001      	b.n	8011676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011672:	2300      	movs	r3, #0
 8011674:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2b01      	cmp	r3, #1
 801167a:	d103      	bne.n	8011684 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 801167c:	f000 fc98 	bl	8011fb0 <xTimerCreateTimerTask>
 8011680:	0003      	movs	r3, r0
 8011682:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	2b01      	cmp	r3, #1
 8011688:	d113      	bne.n	80116b2 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801168a:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801168c:	4b10      	ldr	r3, [pc, #64]	; (80116d0 <vTaskStartScheduler+0xa8>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	3354      	adds	r3, #84	; 0x54
 8011692:	001a      	movs	r2, r3
 8011694:	4b0f      	ldr	r3, [pc, #60]	; (80116d4 <vTaskStartScheduler+0xac>)
 8011696:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011698:	4b0f      	ldr	r3, [pc, #60]	; (80116d8 <vTaskStartScheduler+0xb0>)
 801169a:	2201      	movs	r2, #1
 801169c:	4252      	negs	r2, r2
 801169e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80116a0:	4b0e      	ldr	r3, [pc, #56]	; (80116dc <vTaskStartScheduler+0xb4>)
 80116a2:	2201      	movs	r2, #1
 80116a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80116a6:	4b0e      	ldr	r3, [pc, #56]	; (80116e0 <vTaskStartScheduler+0xb8>)
 80116a8:	2200      	movs	r2, #0
 80116aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80116ac:	f000 fffc 	bl	80126a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80116b0:	e004      	b.n	80116bc <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	3301      	adds	r3, #1
 80116b6:	d101      	bne.n	80116bc <vTaskStartScheduler+0x94>
 80116b8:	b672      	cpsid	i
 80116ba:	e7fe      	b.n	80116ba <vTaskStartScheduler+0x92>
}
 80116bc:	46c0      	nop			; (mov r8, r8)
 80116be:	46bd      	mov	sp, r7
 80116c0:	b005      	add	sp, #20
 80116c2:	bd90      	pop	{r4, r7, pc}
 80116c4:	0801b4e0 	.word	0x0801b4e0
 80116c8:	08011c61 	.word	0x08011c61
 80116cc:	200010c0 	.word	0x200010c0
 80116d0:	20000bc8 	.word	0x20000bc8
 80116d4:	20000130 	.word	0x20000130
 80116d8:	200010bc 	.word	0x200010bc
 80116dc:	200010a8 	.word	0x200010a8
 80116e0:	200010a0 	.word	0x200010a0

080116e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80116e8:	4b03      	ldr	r3, [pc, #12]	; (80116f8 <vTaskSuspendAll+0x14>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	1c5a      	adds	r2, r3, #1
 80116ee:	4b02      	ldr	r3, [pc, #8]	; (80116f8 <vTaskSuspendAll+0x14>)
 80116f0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80116f2:	46c0      	nop			; (mov r8, r8)
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	200010c4 	.word	0x200010c4

080116fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011702:	2300      	movs	r3, #0
 8011704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011706:	2300      	movs	r3, #0
 8011708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801170a:	4b3a      	ldr	r3, [pc, #232]	; (80117f4 <xTaskResumeAll+0xf8>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d101      	bne.n	8011716 <xTaskResumeAll+0x1a>
 8011712:	b672      	cpsid	i
 8011714:	e7fe      	b.n	8011714 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011716:	f000 fffb 	bl	8012710 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801171a:	4b36      	ldr	r3, [pc, #216]	; (80117f4 <xTaskResumeAll+0xf8>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	1e5a      	subs	r2, r3, #1
 8011720:	4b34      	ldr	r3, [pc, #208]	; (80117f4 <xTaskResumeAll+0xf8>)
 8011722:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011724:	4b33      	ldr	r3, [pc, #204]	; (80117f4 <xTaskResumeAll+0xf8>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d15b      	bne.n	80117e4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801172c:	4b32      	ldr	r3, [pc, #200]	; (80117f8 <xTaskResumeAll+0xfc>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d057      	beq.n	80117e4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011734:	e02f      	b.n	8011796 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011736:	4b31      	ldr	r3, [pc, #196]	; (80117fc <xTaskResumeAll+0x100>)
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	3318      	adds	r3, #24
 8011742:	0018      	movs	r0, r3
 8011744:	f7fe ff7f 	bl	8010646 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	3304      	adds	r3, #4
 801174c:	0018      	movs	r0, r3
 801174e:	f7fe ff7a 	bl	8010646 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011756:	4b2a      	ldr	r3, [pc, #168]	; (8011800 <xTaskResumeAll+0x104>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	429a      	cmp	r2, r3
 801175c:	d903      	bls.n	8011766 <xTaskResumeAll+0x6a>
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011762:	4b27      	ldr	r3, [pc, #156]	; (8011800 <xTaskResumeAll+0x104>)
 8011764:	601a      	str	r2, [r3, #0]
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801176a:	0013      	movs	r3, r2
 801176c:	009b      	lsls	r3, r3, #2
 801176e:	189b      	adds	r3, r3, r2
 8011770:	009b      	lsls	r3, r3, #2
 8011772:	4a24      	ldr	r2, [pc, #144]	; (8011804 <xTaskResumeAll+0x108>)
 8011774:	189a      	adds	r2, r3, r2
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	3304      	adds	r3, #4
 801177a:	0019      	movs	r1, r3
 801177c:	0010      	movs	r0, r2
 801177e:	f7fe ff0a 	bl	8010596 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011786:	4b20      	ldr	r3, [pc, #128]	; (8011808 <xTaskResumeAll+0x10c>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178c:	429a      	cmp	r2, r3
 801178e:	d302      	bcc.n	8011796 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8011790:	4b1e      	ldr	r3, [pc, #120]	; (801180c <xTaskResumeAll+0x110>)
 8011792:	2201      	movs	r2, #1
 8011794:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011796:	4b19      	ldr	r3, [pc, #100]	; (80117fc <xTaskResumeAll+0x100>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d1cb      	bne.n	8011736 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d001      	beq.n	80117a8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80117a4:	f000 fb0c 	bl	8011dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80117a8:	4b19      	ldr	r3, [pc, #100]	; (8011810 <xTaskResumeAll+0x114>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00f      	beq.n	80117d4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80117b4:	f000 f83c 	bl	8011830 <xTaskIncrementTick>
 80117b8:	1e03      	subs	r3, r0, #0
 80117ba:	d002      	beq.n	80117c2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80117bc:	4b13      	ldr	r3, [pc, #76]	; (801180c <xTaskResumeAll+0x110>)
 80117be:	2201      	movs	r2, #1
 80117c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	3b01      	subs	r3, #1
 80117c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d1f2      	bne.n	80117b4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80117ce:	4b10      	ldr	r3, [pc, #64]	; (8011810 <xTaskResumeAll+0x114>)
 80117d0:	2200      	movs	r2, #0
 80117d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80117d4:	4b0d      	ldr	r3, [pc, #52]	; (801180c <xTaskResumeAll+0x110>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d003      	beq.n	80117e4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80117dc:	2301      	movs	r3, #1
 80117de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80117e0:	f000 ff86 	bl	80126f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80117e4:	f000 ffa6 	bl	8012734 <vPortExitCritical>

	return xAlreadyYielded;
 80117e8:	68bb      	ldr	r3, [r7, #8]
}
 80117ea:	0018      	movs	r0, r3
 80117ec:	46bd      	mov	sp, r7
 80117ee:	b004      	add	sp, #16
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	46c0      	nop			; (mov r8, r8)
 80117f4:	200010c4 	.word	0x200010c4
 80117f8:	2000109c 	.word	0x2000109c
 80117fc:	2000105c 	.word	0x2000105c
 8011800:	200010a4 	.word	0x200010a4
 8011804:	20000bcc 	.word	0x20000bcc
 8011808:	20000bc8 	.word	0x20000bc8
 801180c:	200010b0 	.word	0x200010b0
 8011810:	200010ac 	.word	0x200010ac

08011814 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801181a:	4b04      	ldr	r3, [pc, #16]	; (801182c <xTaskGetTickCount+0x18>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011820:	687b      	ldr	r3, [r7, #4]
}
 8011822:	0018      	movs	r0, r3
 8011824:	46bd      	mov	sp, r7
 8011826:	b002      	add	sp, #8
 8011828:	bd80      	pop	{r7, pc}
 801182a:	46c0      	nop			; (mov r8, r8)
 801182c:	200010a0 	.word	0x200010a0

08011830 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b086      	sub	sp, #24
 8011834:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011836:	2300      	movs	r3, #0
 8011838:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801183a:	4b4a      	ldr	r3, [pc, #296]	; (8011964 <xTaskIncrementTick+0x134>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d000      	beq.n	8011844 <xTaskIncrementTick+0x14>
 8011842:	e084      	b.n	801194e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011844:	4b48      	ldr	r3, [pc, #288]	; (8011968 <xTaskIncrementTick+0x138>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	3301      	adds	r3, #1
 801184a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801184c:	4b46      	ldr	r3, [pc, #280]	; (8011968 <xTaskIncrementTick+0x138>)
 801184e:	693a      	ldr	r2, [r7, #16]
 8011850:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d117      	bne.n	8011888 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8011858:	4b44      	ldr	r3, [pc, #272]	; (801196c <xTaskIncrementTick+0x13c>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d001      	beq.n	8011866 <xTaskIncrementTick+0x36>
 8011862:	b672      	cpsid	i
 8011864:	e7fe      	b.n	8011864 <xTaskIncrementTick+0x34>
 8011866:	4b41      	ldr	r3, [pc, #260]	; (801196c <xTaskIncrementTick+0x13c>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	60fb      	str	r3, [r7, #12]
 801186c:	4b40      	ldr	r3, [pc, #256]	; (8011970 <xTaskIncrementTick+0x140>)
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	4b3e      	ldr	r3, [pc, #248]	; (801196c <xTaskIncrementTick+0x13c>)
 8011872:	601a      	str	r2, [r3, #0]
 8011874:	4b3e      	ldr	r3, [pc, #248]	; (8011970 <xTaskIncrementTick+0x140>)
 8011876:	68fa      	ldr	r2, [r7, #12]
 8011878:	601a      	str	r2, [r3, #0]
 801187a:	4b3e      	ldr	r3, [pc, #248]	; (8011974 <xTaskIncrementTick+0x144>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	1c5a      	adds	r2, r3, #1
 8011880:	4b3c      	ldr	r3, [pc, #240]	; (8011974 <xTaskIncrementTick+0x144>)
 8011882:	601a      	str	r2, [r3, #0]
 8011884:	f000 fa9c 	bl	8011dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011888:	4b3b      	ldr	r3, [pc, #236]	; (8011978 <xTaskIncrementTick+0x148>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	693a      	ldr	r2, [r7, #16]
 801188e:	429a      	cmp	r2, r3
 8011890:	d349      	bcc.n	8011926 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011892:	4b36      	ldr	r3, [pc, #216]	; (801196c <xTaskIncrementTick+0x13c>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d104      	bne.n	80118a6 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801189c:	4b36      	ldr	r3, [pc, #216]	; (8011978 <xTaskIncrementTick+0x148>)
 801189e:	2201      	movs	r2, #1
 80118a0:	4252      	negs	r2, r2
 80118a2:	601a      	str	r2, [r3, #0]
					break;
 80118a4:	e03f      	b.n	8011926 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118a6:	4b31      	ldr	r3, [pc, #196]	; (801196c <xTaskIncrementTick+0x13c>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	68db      	ldr	r3, [r3, #12]
 80118ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80118b6:	693a      	ldr	r2, [r7, #16]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d203      	bcs.n	80118c6 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80118be:	4b2e      	ldr	r3, [pc, #184]	; (8011978 <xTaskIncrementTick+0x148>)
 80118c0:	687a      	ldr	r2, [r7, #4]
 80118c2:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80118c4:	e02f      	b.n	8011926 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	3304      	adds	r3, #4
 80118ca:	0018      	movs	r0, r3
 80118cc:	f7fe febb 	bl	8010646 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d004      	beq.n	80118e2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	3318      	adds	r3, #24
 80118dc:	0018      	movs	r0, r3
 80118de:	f7fe feb2 	bl	8010646 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e6:	4b25      	ldr	r3, [pc, #148]	; (801197c <xTaskIncrementTick+0x14c>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d903      	bls.n	80118f6 <xTaskIncrementTick+0xc6>
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118f2:	4b22      	ldr	r3, [pc, #136]	; (801197c <xTaskIncrementTick+0x14c>)
 80118f4:	601a      	str	r2, [r3, #0]
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fa:	0013      	movs	r3, r2
 80118fc:	009b      	lsls	r3, r3, #2
 80118fe:	189b      	adds	r3, r3, r2
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	4a1f      	ldr	r2, [pc, #124]	; (8011980 <xTaskIncrementTick+0x150>)
 8011904:	189a      	adds	r2, r3, r2
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	3304      	adds	r3, #4
 801190a:	0019      	movs	r1, r3
 801190c:	0010      	movs	r0, r2
 801190e:	f7fe fe42 	bl	8010596 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011916:	4b1b      	ldr	r3, [pc, #108]	; (8011984 <xTaskIncrementTick+0x154>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801191c:	429a      	cmp	r2, r3
 801191e:	d3b8      	bcc.n	8011892 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8011920:	2301      	movs	r3, #1
 8011922:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011924:	e7b5      	b.n	8011892 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011926:	4b17      	ldr	r3, [pc, #92]	; (8011984 <xTaskIncrementTick+0x154>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192c:	4914      	ldr	r1, [pc, #80]	; (8011980 <xTaskIncrementTick+0x150>)
 801192e:	0013      	movs	r3, r2
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	189b      	adds	r3, r3, r2
 8011934:	009b      	lsls	r3, r3, #2
 8011936:	585b      	ldr	r3, [r3, r1]
 8011938:	2b01      	cmp	r3, #1
 801193a:	d901      	bls.n	8011940 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 801193c:	2301      	movs	r3, #1
 801193e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011940:	4b11      	ldr	r3, [pc, #68]	; (8011988 <xTaskIncrementTick+0x158>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d007      	beq.n	8011958 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8011948:	2301      	movs	r3, #1
 801194a:	617b      	str	r3, [r7, #20]
 801194c:	e004      	b.n	8011958 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801194e:	4b0f      	ldr	r3, [pc, #60]	; (801198c <xTaskIncrementTick+0x15c>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	1c5a      	adds	r2, r3, #1
 8011954:	4b0d      	ldr	r3, [pc, #52]	; (801198c <xTaskIncrementTick+0x15c>)
 8011956:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011958:	697b      	ldr	r3, [r7, #20]
}
 801195a:	0018      	movs	r0, r3
 801195c:	46bd      	mov	sp, r7
 801195e:	b006      	add	sp, #24
 8011960:	bd80      	pop	{r7, pc}
 8011962:	46c0      	nop			; (mov r8, r8)
 8011964:	200010c4 	.word	0x200010c4
 8011968:	200010a0 	.word	0x200010a0
 801196c:	20001054 	.word	0x20001054
 8011970:	20001058 	.word	0x20001058
 8011974:	200010b4 	.word	0x200010b4
 8011978:	200010bc 	.word	0x200010bc
 801197c:	200010a4 	.word	0x200010a4
 8011980:	20000bcc 	.word	0x20000bcc
 8011984:	20000bc8 	.word	0x20000bc8
 8011988:	200010b0 	.word	0x200010b0
 801198c:	200010ac 	.word	0x200010ac

08011990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011996:	4b25      	ldr	r3, [pc, #148]	; (8011a2c <vTaskSwitchContext+0x9c>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d003      	beq.n	80119a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801199e:	4b24      	ldr	r3, [pc, #144]	; (8011a30 <vTaskSwitchContext+0xa0>)
 80119a0:	2201      	movs	r2, #1
 80119a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80119a4:	e03d      	b.n	8011a22 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80119a6:	4b22      	ldr	r3, [pc, #136]	; (8011a30 <vTaskSwitchContext+0xa0>)
 80119a8:	2200      	movs	r2, #0
 80119aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119ac:	4b21      	ldr	r3, [pc, #132]	; (8011a34 <vTaskSwitchContext+0xa4>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	607b      	str	r3, [r7, #4]
 80119b2:	e007      	b.n	80119c4 <vTaskSwitchContext+0x34>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d101      	bne.n	80119be <vTaskSwitchContext+0x2e>
 80119ba:	b672      	cpsid	i
 80119bc:	e7fe      	b.n	80119bc <vTaskSwitchContext+0x2c>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	3b01      	subs	r3, #1
 80119c2:	607b      	str	r3, [r7, #4]
 80119c4:	491c      	ldr	r1, [pc, #112]	; (8011a38 <vTaskSwitchContext+0xa8>)
 80119c6:	687a      	ldr	r2, [r7, #4]
 80119c8:	0013      	movs	r3, r2
 80119ca:	009b      	lsls	r3, r3, #2
 80119cc:	189b      	adds	r3, r3, r2
 80119ce:	009b      	lsls	r3, r3, #2
 80119d0:	585b      	ldr	r3, [r3, r1]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d0ee      	beq.n	80119b4 <vTaskSwitchContext+0x24>
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	0013      	movs	r3, r2
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	189b      	adds	r3, r3, r2
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	4a15      	ldr	r2, [pc, #84]	; (8011a38 <vTaskSwitchContext+0xa8>)
 80119e2:	189b      	adds	r3, r3, r2
 80119e4:	603b      	str	r3, [r7, #0]
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	685a      	ldr	r2, [r3, #4]
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	605a      	str	r2, [r3, #4]
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	685a      	ldr	r2, [r3, #4]
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	3308      	adds	r3, #8
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d104      	bne.n	8011a06 <vTaskSwitchContext+0x76>
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	685a      	ldr	r2, [r3, #4]
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	605a      	str	r2, [r3, #4]
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	68da      	ldr	r2, [r3, #12]
 8011a0c:	4b0b      	ldr	r3, [pc, #44]	; (8011a3c <vTaskSwitchContext+0xac>)
 8011a0e:	601a      	str	r2, [r3, #0]
 8011a10:	4b08      	ldr	r3, [pc, #32]	; (8011a34 <vTaskSwitchContext+0xa4>)
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011a16:	4b09      	ldr	r3, [pc, #36]	; (8011a3c <vTaskSwitchContext+0xac>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	3354      	adds	r3, #84	; 0x54
 8011a1c:	001a      	movs	r2, r3
 8011a1e:	4b08      	ldr	r3, [pc, #32]	; (8011a40 <vTaskSwitchContext+0xb0>)
 8011a20:	601a      	str	r2, [r3, #0]
}
 8011a22:	46c0      	nop			; (mov r8, r8)
 8011a24:	46bd      	mov	sp, r7
 8011a26:	b002      	add	sp, #8
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	46c0      	nop			; (mov r8, r8)
 8011a2c:	200010c4 	.word	0x200010c4
 8011a30:	200010b0 	.word	0x200010b0
 8011a34:	200010a4 	.word	0x200010a4
 8011a38:	20000bcc 	.word	0x20000bcc
 8011a3c:	20000bc8 	.word	0x20000bc8
 8011a40:	20000130 	.word	0x20000130

08011a44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d101      	bne.n	8011a58 <vTaskPlaceOnEventList+0x14>
 8011a54:	b672      	cpsid	i
 8011a56:	e7fe      	b.n	8011a56 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a58:	4b08      	ldr	r3, [pc, #32]	; (8011a7c <vTaskPlaceOnEventList+0x38>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	3318      	adds	r3, #24
 8011a5e:	001a      	movs	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	0011      	movs	r1, r2
 8011a64:	0018      	movs	r0, r3
 8011a66:	f7fe fdb8 	bl	80105da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	2101      	movs	r1, #1
 8011a6e:	0018      	movs	r0, r3
 8011a70:	f000 fa4a 	bl	8011f08 <prvAddCurrentTaskToDelayedList>
}
 8011a74:	46c0      	nop			; (mov r8, r8)
 8011a76:	46bd      	mov	sp, r7
 8011a78:	b002      	add	sp, #8
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	20000bc8 	.word	0x20000bc8

08011a80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d101      	bne.n	8011a96 <vTaskPlaceOnEventListRestricted+0x16>
 8011a92:	b672      	cpsid	i
 8011a94:	e7fe      	b.n	8011a94 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a96:	4b0c      	ldr	r3, [pc, #48]	; (8011ac8 <vTaskPlaceOnEventListRestricted+0x48>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	3318      	adds	r3, #24
 8011a9c:	001a      	movs	r2, r3
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	0011      	movs	r1, r2
 8011aa2:	0018      	movs	r0, r3
 8011aa4:	f7fe fd77 	bl	8010596 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d002      	beq.n	8011ab4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8011aae:	2301      	movs	r3, #1
 8011ab0:	425b      	negs	r3, r3
 8011ab2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	0011      	movs	r1, r2
 8011aba:	0018      	movs	r0, r3
 8011abc:	f000 fa24 	bl	8011f08 <prvAddCurrentTaskToDelayedList>
	}
 8011ac0:	46c0      	nop			; (mov r8, r8)
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	b004      	add	sp, #16
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	20000bc8 	.word	0x20000bc8

08011acc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	68db      	ldr	r3, [r3, #12]
 8011ada:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d101      	bne.n	8011ae6 <xTaskRemoveFromEventList+0x1a>
 8011ae2:	b672      	cpsid	i
 8011ae4:	e7fe      	b.n	8011ae4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	3318      	adds	r3, #24
 8011aea:	0018      	movs	r0, r3
 8011aec:	f7fe fdab 	bl	8010646 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011af0:	4b1e      	ldr	r3, [pc, #120]	; (8011b6c <xTaskRemoveFromEventList+0xa0>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d11d      	bne.n	8011b34 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	3304      	adds	r3, #4
 8011afc:	0018      	movs	r0, r3
 8011afe:	f7fe fda2 	bl	8010646 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b06:	4b1a      	ldr	r3, [pc, #104]	; (8011b70 <xTaskRemoveFromEventList+0xa4>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d903      	bls.n	8011b16 <xTaskRemoveFromEventList+0x4a>
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b12:	4b17      	ldr	r3, [pc, #92]	; (8011b70 <xTaskRemoveFromEventList+0xa4>)
 8011b14:	601a      	str	r2, [r3, #0]
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b1a:	0013      	movs	r3, r2
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	189b      	adds	r3, r3, r2
 8011b20:	009b      	lsls	r3, r3, #2
 8011b22:	4a14      	ldr	r2, [pc, #80]	; (8011b74 <xTaskRemoveFromEventList+0xa8>)
 8011b24:	189a      	adds	r2, r3, r2
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	3304      	adds	r3, #4
 8011b2a:	0019      	movs	r1, r3
 8011b2c:	0010      	movs	r0, r2
 8011b2e:	f7fe fd32 	bl	8010596 <vListInsertEnd>
 8011b32:	e007      	b.n	8011b44 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	3318      	adds	r3, #24
 8011b38:	001a      	movs	r2, r3
 8011b3a:	4b0f      	ldr	r3, [pc, #60]	; (8011b78 <xTaskRemoveFromEventList+0xac>)
 8011b3c:	0011      	movs	r1, r2
 8011b3e:	0018      	movs	r0, r3
 8011b40:	f7fe fd29 	bl	8010596 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b48:	4b0c      	ldr	r3, [pc, #48]	; (8011b7c <xTaskRemoveFromEventList+0xb0>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d905      	bls.n	8011b5e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011b52:	2301      	movs	r3, #1
 8011b54:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011b56:	4b0a      	ldr	r3, [pc, #40]	; (8011b80 <xTaskRemoveFromEventList+0xb4>)
 8011b58:	2201      	movs	r2, #1
 8011b5a:	601a      	str	r2, [r3, #0]
 8011b5c:	e001      	b.n	8011b62 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8011b62:	68fb      	ldr	r3, [r7, #12]
}
 8011b64:	0018      	movs	r0, r3
 8011b66:	46bd      	mov	sp, r7
 8011b68:	b004      	add	sp, #16
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	200010c4 	.word	0x200010c4
 8011b70:	200010a4 	.word	0x200010a4
 8011b74:	20000bcc 	.word	0x20000bcc
 8011b78:	2000105c 	.word	0x2000105c
 8011b7c:	20000bc8 	.word	0x20000bc8
 8011b80:	200010b0 	.word	0x200010b0

08011b84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011b8c:	4b05      	ldr	r3, [pc, #20]	; (8011ba4 <vTaskInternalSetTimeOutState+0x20>)
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011b94:	4b04      	ldr	r3, [pc, #16]	; (8011ba8 <vTaskInternalSetTimeOutState+0x24>)
 8011b96:	681a      	ldr	r2, [r3, #0]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	605a      	str	r2, [r3, #4]
}
 8011b9c:	46c0      	nop			; (mov r8, r8)
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	b002      	add	sp, #8
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	200010b4 	.word	0x200010b4
 8011ba8:	200010a0 	.word	0x200010a0

08011bac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b086      	sub	sp, #24
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <xTaskCheckForTimeOut+0x14>
 8011bbc:	b672      	cpsid	i
 8011bbe:	e7fe      	b.n	8011bbe <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d101      	bne.n	8011bca <xTaskCheckForTimeOut+0x1e>
 8011bc6:	b672      	cpsid	i
 8011bc8:	e7fe      	b.n	8011bc8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8011bca:	f000 fda1 	bl	8012710 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011bce:	4b1d      	ldr	r3, [pc, #116]	; (8011c44 <xTaskCheckForTimeOut+0x98>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	693a      	ldr	r2, [r7, #16]
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	3301      	adds	r3, #1
 8011be4:	d102      	bne.n	8011bec <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011be6:	2300      	movs	r3, #0
 8011be8:	617b      	str	r3, [r7, #20]
 8011bea:	e024      	b.n	8011c36 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	4b15      	ldr	r3, [pc, #84]	; (8011c48 <xTaskCheckForTimeOut+0x9c>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d007      	beq.n	8011c08 <xTaskCheckForTimeOut+0x5c>
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	693a      	ldr	r2, [r7, #16]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d302      	bcc.n	8011c08 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011c02:	2301      	movs	r3, #1
 8011c04:	617b      	str	r3, [r7, #20]
 8011c06:	e016      	b.n	8011c36 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	68fa      	ldr	r2, [r7, #12]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d20c      	bcs.n	8011c2c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	681a      	ldr	r2, [r3, #0]
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	1ad2      	subs	r2, r2, r3
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	0018      	movs	r0, r3
 8011c22:	f7ff ffaf 	bl	8011b84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011c26:	2300      	movs	r3, #0
 8011c28:	617b      	str	r3, [r7, #20]
 8011c2a:	e004      	b.n	8011c36 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011c32:	2301      	movs	r3, #1
 8011c34:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8011c36:	f000 fd7d 	bl	8012734 <vPortExitCritical>

	return xReturn;
 8011c3a:	697b      	ldr	r3, [r7, #20]
}
 8011c3c:	0018      	movs	r0, r3
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	b006      	add	sp, #24
 8011c42:	bd80      	pop	{r7, pc}
 8011c44:	200010a0 	.word	0x200010a0
 8011c48:	200010b4 	.word	0x200010b4

08011c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011c50:	4b02      	ldr	r3, [pc, #8]	; (8011c5c <vTaskMissedYield+0x10>)
 8011c52:	2201      	movs	r2, #1
 8011c54:	601a      	str	r2, [r3, #0]
}
 8011c56:	46c0      	nop			; (mov r8, r8)
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}
 8011c5c:	200010b0 	.word	0x200010b0

08011c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b082      	sub	sp, #8
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011c68:	f000 f84e 	bl	8011d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011c6c:	4b03      	ldr	r3, [pc, #12]	; (8011c7c <prvIdleTask+0x1c>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d9f9      	bls.n	8011c68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011c74:	f000 fd3c 	bl	80126f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8011c78:	e7f6      	b.n	8011c68 <prvIdleTask+0x8>
 8011c7a:	46c0      	nop			; (mov r8, r8)
 8011c7c:	20000bcc 	.word	0x20000bcc

08011c80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c86:	2300      	movs	r3, #0
 8011c88:	607b      	str	r3, [r7, #4]
 8011c8a:	e00c      	b.n	8011ca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	0013      	movs	r3, r2
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	189b      	adds	r3, r3, r2
 8011c94:	009b      	lsls	r3, r3, #2
 8011c96:	4a14      	ldr	r2, [pc, #80]	; (8011ce8 <prvInitialiseTaskLists+0x68>)
 8011c98:	189b      	adds	r3, r3, r2
 8011c9a:	0018      	movs	r0, r3
 8011c9c:	f7fe fc52 	bl	8010544 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	607b      	str	r3, [r7, #4]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2b37      	cmp	r3, #55	; 0x37
 8011caa:	d9ef      	bls.n	8011c8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011cac:	4b0f      	ldr	r3, [pc, #60]	; (8011cec <prvInitialiseTaskLists+0x6c>)
 8011cae:	0018      	movs	r0, r3
 8011cb0:	f7fe fc48 	bl	8010544 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011cb4:	4b0e      	ldr	r3, [pc, #56]	; (8011cf0 <prvInitialiseTaskLists+0x70>)
 8011cb6:	0018      	movs	r0, r3
 8011cb8:	f7fe fc44 	bl	8010544 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011cbc:	4b0d      	ldr	r3, [pc, #52]	; (8011cf4 <prvInitialiseTaskLists+0x74>)
 8011cbe:	0018      	movs	r0, r3
 8011cc0:	f7fe fc40 	bl	8010544 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011cc4:	4b0c      	ldr	r3, [pc, #48]	; (8011cf8 <prvInitialiseTaskLists+0x78>)
 8011cc6:	0018      	movs	r0, r3
 8011cc8:	f7fe fc3c 	bl	8010544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011ccc:	4b0b      	ldr	r3, [pc, #44]	; (8011cfc <prvInitialiseTaskLists+0x7c>)
 8011cce:	0018      	movs	r0, r3
 8011cd0:	f7fe fc38 	bl	8010544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011cd4:	4b0a      	ldr	r3, [pc, #40]	; (8011d00 <prvInitialiseTaskLists+0x80>)
 8011cd6:	4a05      	ldr	r2, [pc, #20]	; (8011cec <prvInitialiseTaskLists+0x6c>)
 8011cd8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011cda:	4b0a      	ldr	r3, [pc, #40]	; (8011d04 <prvInitialiseTaskLists+0x84>)
 8011cdc:	4a04      	ldr	r2, [pc, #16]	; (8011cf0 <prvInitialiseTaskLists+0x70>)
 8011cde:	601a      	str	r2, [r3, #0]
}
 8011ce0:	46c0      	nop			; (mov r8, r8)
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	b002      	add	sp, #8
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	20000bcc 	.word	0x20000bcc
 8011cec:	2000102c 	.word	0x2000102c
 8011cf0:	20001040 	.word	0x20001040
 8011cf4:	2000105c 	.word	0x2000105c
 8011cf8:	20001070 	.word	0x20001070
 8011cfc:	20001088 	.word	0x20001088
 8011d00:	20001054 	.word	0x20001054
 8011d04:	20001058 	.word	0x20001058

08011d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d0e:	e01a      	b.n	8011d46 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8011d10:	f000 fcfe 	bl	8012710 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d14:	4b10      	ldr	r3, [pc, #64]	; (8011d58 <prvCheckTasksWaitingTermination+0x50>)
 8011d16:	68db      	ldr	r3, [r3, #12]
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	3304      	adds	r3, #4
 8011d20:	0018      	movs	r0, r3
 8011d22:	f7fe fc90 	bl	8010646 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011d26:	4b0d      	ldr	r3, [pc, #52]	; (8011d5c <prvCheckTasksWaitingTermination+0x54>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	1e5a      	subs	r2, r3, #1
 8011d2c:	4b0b      	ldr	r3, [pc, #44]	; (8011d5c <prvCheckTasksWaitingTermination+0x54>)
 8011d2e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011d30:	4b0b      	ldr	r3, [pc, #44]	; (8011d60 <prvCheckTasksWaitingTermination+0x58>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	1e5a      	subs	r2, r3, #1
 8011d36:	4b0a      	ldr	r3, [pc, #40]	; (8011d60 <prvCheckTasksWaitingTermination+0x58>)
 8011d38:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8011d3a:	f000 fcfb 	bl	8012734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	0018      	movs	r0, r3
 8011d42:	f000 f80f 	bl	8011d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d46:	4b06      	ldr	r3, [pc, #24]	; (8011d60 <prvCheckTasksWaitingTermination+0x58>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d1e0      	bne.n	8011d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011d4e:	46c0      	nop			; (mov r8, r8)
 8011d50:	46c0      	nop			; (mov r8, r8)
 8011d52:	46bd      	mov	sp, r7
 8011d54:	b002      	add	sp, #8
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	20001070 	.word	0x20001070
 8011d5c:	2000109c 	.word	0x2000109c
 8011d60:	20001084 	.word	0x20001084

08011d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	3354      	adds	r3, #84	; 0x54
 8011d70:	0018      	movs	r0, r3
 8011d72:	f008 fef9 	bl	801ab68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	22a5      	movs	r2, #165	; 0xa5
 8011d7a:	5c9b      	ldrb	r3, [r3, r2]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d109      	bne.n	8011d94 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d84:	0018      	movs	r0, r3
 8011d86:	f000 fe07 	bl	8012998 <vPortFree>
				vPortFree( pxTCB );
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	0018      	movs	r0, r3
 8011d8e:	f000 fe03 	bl	8012998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011d92:	e010      	b.n	8011db6 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	22a5      	movs	r2, #165	; 0xa5
 8011d98:	5c9b      	ldrb	r3, [r3, r2]
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	d104      	bne.n	8011da8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	0018      	movs	r0, r3
 8011da2:	f000 fdf9 	bl	8012998 <vPortFree>
	}
 8011da6:	e006      	b.n	8011db6 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	22a5      	movs	r2, #165	; 0xa5
 8011dac:	5c9b      	ldrb	r3, [r3, r2]
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	d001      	beq.n	8011db6 <prvDeleteTCB+0x52>
 8011db2:	b672      	cpsid	i
 8011db4:	e7fe      	b.n	8011db4 <prvDeleteTCB+0x50>
	}
 8011db6:	46c0      	nop			; (mov r8, r8)
 8011db8:	46bd      	mov	sp, r7
 8011dba:	b002      	add	sp, #8
 8011dbc:	bd80      	pop	{r7, pc}
	...

08011dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dc6:	4b0b      	ldr	r3, [pc, #44]	; (8011df4 <prvResetNextTaskUnblockTime+0x34>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d104      	bne.n	8011dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011dd0:	4b09      	ldr	r3, [pc, #36]	; (8011df8 <prvResetNextTaskUnblockTime+0x38>)
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	4252      	negs	r2, r2
 8011dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011dd8:	e008      	b.n	8011dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dda:	4b06      	ldr	r3, [pc, #24]	; (8011df4 <prvResetNextTaskUnblockTime+0x34>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	685a      	ldr	r2, [r3, #4]
 8011de8:	4b03      	ldr	r3, [pc, #12]	; (8011df8 <prvResetNextTaskUnblockTime+0x38>)
 8011dea:	601a      	str	r2, [r3, #0]
}
 8011dec:	46c0      	nop			; (mov r8, r8)
 8011dee:	46bd      	mov	sp, r7
 8011df0:	b002      	add	sp, #8
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	20001054 	.word	0x20001054
 8011df8:	200010bc 	.word	0x200010bc

08011dfc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011e02:	4b04      	ldr	r3, [pc, #16]	; (8011e14 <xTaskGetCurrentTaskHandle+0x18>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011e08:	687b      	ldr	r3, [r7, #4]
	}
 8011e0a:	0018      	movs	r0, r3
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	b002      	add	sp, #8
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	46c0      	nop			; (mov r8, r8)
 8011e14:	20000bc8 	.word	0x20000bc8

08011e18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e1e:	4b0a      	ldr	r3, [pc, #40]	; (8011e48 <xTaskGetSchedulerState+0x30>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d102      	bne.n	8011e2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e26:	2301      	movs	r3, #1
 8011e28:	607b      	str	r3, [r7, #4]
 8011e2a:	e008      	b.n	8011e3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e2c:	4b07      	ldr	r3, [pc, #28]	; (8011e4c <xTaskGetSchedulerState+0x34>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d102      	bne.n	8011e3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011e34:	2302      	movs	r3, #2
 8011e36:	607b      	str	r3, [r7, #4]
 8011e38:	e001      	b.n	8011e3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e3e:	687b      	ldr	r3, [r7, #4]
	}
 8011e40:	0018      	movs	r0, r3
 8011e42:	46bd      	mov	sp, r7
 8011e44:	b002      	add	sp, #8
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	200010a8 	.word	0x200010a8
 8011e4c:	200010c4 	.word	0x200010c4

08011e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b084      	sub	sp, #16
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d044      	beq.n	8011ef0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011e66:	4b25      	ldr	r3, [pc, #148]	; (8011efc <xTaskPriorityDisinherit+0xac>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	68ba      	ldr	r2, [r7, #8]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d001      	beq.n	8011e74 <xTaskPriorityDisinherit+0x24>
 8011e70:	b672      	cpsid	i
 8011e72:	e7fe      	b.n	8011e72 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d101      	bne.n	8011e80 <xTaskPriorityDisinherit+0x30>
 8011e7c:	b672      	cpsid	i
 8011e7e:	e7fe      	b.n	8011e7e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e84:	1e5a      	subs	r2, r3, #1
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d02c      	beq.n	8011ef0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d128      	bne.n	8011ef0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	3304      	adds	r3, #4
 8011ea2:	0018      	movs	r0, r3
 8011ea4:	f7fe fbcf 	bl	8010646 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb4:	2238      	movs	r2, #56	; 0x38
 8011eb6:	1ad2      	subs	r2, r2, r3
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec0:	4b0f      	ldr	r3, [pc, #60]	; (8011f00 <xTaskPriorityDisinherit+0xb0>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d903      	bls.n	8011ed0 <xTaskPriorityDisinherit+0x80>
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ecc:	4b0c      	ldr	r3, [pc, #48]	; (8011f00 <xTaskPriorityDisinherit+0xb0>)
 8011ece:	601a      	str	r2, [r3, #0]
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed4:	0013      	movs	r3, r2
 8011ed6:	009b      	lsls	r3, r3, #2
 8011ed8:	189b      	adds	r3, r3, r2
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	4a09      	ldr	r2, [pc, #36]	; (8011f04 <xTaskPriorityDisinherit+0xb4>)
 8011ede:	189a      	adds	r2, r3, r2
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	3304      	adds	r3, #4
 8011ee4:	0019      	movs	r1, r3
 8011ee6:	0010      	movs	r0, r2
 8011ee8:	f7fe fb55 	bl	8010596 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011eec:	2301      	movs	r3, #1
 8011eee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
	}
 8011ef2:	0018      	movs	r0, r3
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	b004      	add	sp, #16
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	46c0      	nop			; (mov r8, r8)
 8011efc:	20000bc8 	.word	0x20000bc8
 8011f00:	200010a4 	.word	0x200010a4
 8011f04:	20000bcc 	.word	0x20000bcc

08011f08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f12:	4b21      	ldr	r3, [pc, #132]	; (8011f98 <prvAddCurrentTaskToDelayedList+0x90>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f18:	4b20      	ldr	r3, [pc, #128]	; (8011f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	3304      	adds	r3, #4
 8011f1e:	0018      	movs	r0, r3
 8011f20:	f7fe fb91 	bl	8010646 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	3301      	adds	r3, #1
 8011f28:	d10b      	bne.n	8011f42 <prvAddCurrentTaskToDelayedList+0x3a>
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d008      	beq.n	8011f42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f30:	4b1a      	ldr	r3, [pc, #104]	; (8011f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	1d1a      	adds	r2, r3, #4
 8011f36:	4b1a      	ldr	r3, [pc, #104]	; (8011fa0 <prvAddCurrentTaskToDelayedList+0x98>)
 8011f38:	0011      	movs	r1, r2
 8011f3a:	0018      	movs	r0, r3
 8011f3c:	f7fe fb2b 	bl	8010596 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f40:	e026      	b.n	8011f90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f42:	68fa      	ldr	r2, [r7, #12]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	18d3      	adds	r3, r2, r3
 8011f48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f4a:	4b14      	ldr	r3, [pc, #80]	; (8011f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	68ba      	ldr	r2, [r7, #8]
 8011f50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f52:	68ba      	ldr	r2, [r7, #8]
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d209      	bcs.n	8011f6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f5a:	4b12      	ldr	r3, [pc, #72]	; (8011fa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	4b0f      	ldr	r3, [pc, #60]	; (8011f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	3304      	adds	r3, #4
 8011f64:	0019      	movs	r1, r3
 8011f66:	0010      	movs	r0, r2
 8011f68:	f7fe fb37 	bl	80105da <vListInsert>
}
 8011f6c:	e010      	b.n	8011f90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f6e:	4b0e      	ldr	r3, [pc, #56]	; (8011fa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f70:	681a      	ldr	r2, [r3, #0]
 8011f72:	4b0a      	ldr	r3, [pc, #40]	; (8011f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	3304      	adds	r3, #4
 8011f78:	0019      	movs	r1, r3
 8011f7a:	0010      	movs	r0, r2
 8011f7c:	f7fe fb2d 	bl	80105da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f80:	4b0a      	ldr	r3, [pc, #40]	; (8011fac <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d202      	bcs.n	8011f90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011f8a:	4b08      	ldr	r3, [pc, #32]	; (8011fac <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f8c:	68ba      	ldr	r2, [r7, #8]
 8011f8e:	601a      	str	r2, [r3, #0]
}
 8011f90:	46c0      	nop			; (mov r8, r8)
 8011f92:	46bd      	mov	sp, r7
 8011f94:	b004      	add	sp, #16
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	200010a0 	.word	0x200010a0
 8011f9c:	20000bc8 	.word	0x20000bc8
 8011fa0:	20001088 	.word	0x20001088
 8011fa4:	20001058 	.word	0x20001058
 8011fa8:	20001054 	.word	0x20001054
 8011fac:	200010bc 	.word	0x200010bc

08011fb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011fb0:	b590      	push	{r4, r7, lr}
 8011fb2:	b089      	sub	sp, #36	; 0x24
 8011fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011fba:	f000 fac9 	bl	8012550 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011fbe:	4b17      	ldr	r3, [pc, #92]	; (801201c <xTimerCreateTimerTask+0x6c>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d020      	beq.n	8012008 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011fce:	003a      	movs	r2, r7
 8011fd0:	1d39      	adds	r1, r7, #4
 8011fd2:	2308      	movs	r3, #8
 8011fd4:	18fb      	adds	r3, r7, r3
 8011fd6:	0018      	movs	r0, r3
 8011fd8:	f7fe fa9c 	bl	8010514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011fdc:	683c      	ldr	r4, [r7, #0]
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	68ba      	ldr	r2, [r7, #8]
 8011fe2:	490f      	ldr	r1, [pc, #60]	; (8012020 <xTimerCreateTimerTask+0x70>)
 8011fe4:	480f      	ldr	r0, [pc, #60]	; (8012024 <xTimerCreateTimerTask+0x74>)
 8011fe6:	9202      	str	r2, [sp, #8]
 8011fe8:	9301      	str	r3, [sp, #4]
 8011fea:	2302      	movs	r3, #2
 8011fec:	9300      	str	r3, [sp, #0]
 8011fee:	2300      	movs	r3, #0
 8011ff0:	0022      	movs	r2, r4
 8011ff2:	f7ff f812 	bl	801101a <xTaskCreateStatic>
 8011ff6:	0002      	movs	r2, r0
 8011ff8:	4b0b      	ldr	r3, [pc, #44]	; (8012028 <xTimerCreateTimerTask+0x78>)
 8011ffa:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011ffc:	4b0a      	ldr	r3, [pc, #40]	; (8012028 <xTimerCreateTimerTask+0x78>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d001      	beq.n	8012008 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8012004:	2301      	movs	r3, #1
 8012006:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d101      	bne.n	8012012 <xTimerCreateTimerTask+0x62>
 801200e:	b672      	cpsid	i
 8012010:	e7fe      	b.n	8012010 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8012012:	68fb      	ldr	r3, [r7, #12]
}
 8012014:	0018      	movs	r0, r3
 8012016:	46bd      	mov	sp, r7
 8012018:	b005      	add	sp, #20
 801201a:	bd90      	pop	{r4, r7, pc}
 801201c:	200010f8 	.word	0x200010f8
 8012020:	0801b4e8 	.word	0x0801b4e8
 8012024:	08012149 	.word	0x08012149
 8012028:	200010fc 	.word	0x200010fc

0801202c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801202c:	b590      	push	{r4, r7, lr}
 801202e:	b08b      	sub	sp, #44	; 0x2c
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
 8012038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801203a:	2300      	movs	r3, #0
 801203c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d101      	bne.n	8012048 <xTimerGenericCommand+0x1c>
 8012044:	b672      	cpsid	i
 8012046:	e7fe      	b.n	8012046 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012048:	4b1c      	ldr	r3, [pc, #112]	; (80120bc <xTimerGenericCommand+0x90>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d030      	beq.n	80120b2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012050:	2414      	movs	r4, #20
 8012052:	193b      	adds	r3, r7, r4
 8012054:	68ba      	ldr	r2, [r7, #8]
 8012056:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012058:	193b      	adds	r3, r7, r4
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801205e:	193b      	adds	r3, r7, r4
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	2b05      	cmp	r3, #5
 8012068:	dc19      	bgt.n	801209e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801206a:	f7ff fed5 	bl	8011e18 <xTaskGetSchedulerState>
 801206e:	0003      	movs	r3, r0
 8012070:	2b02      	cmp	r3, #2
 8012072:	d109      	bne.n	8012088 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012074:	4b11      	ldr	r3, [pc, #68]	; (80120bc <xTimerGenericCommand+0x90>)
 8012076:	6818      	ldr	r0, [r3, #0]
 8012078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801207a:	1939      	adds	r1, r7, r4
 801207c:	2300      	movs	r3, #0
 801207e:	f7fe fc03 	bl	8010888 <xQueueGenericSend>
 8012082:	0003      	movs	r3, r0
 8012084:	627b      	str	r3, [r7, #36]	; 0x24
 8012086:	e014      	b.n	80120b2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012088:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <xTimerGenericCommand+0x90>)
 801208a:	6818      	ldr	r0, [r3, #0]
 801208c:	2314      	movs	r3, #20
 801208e:	18f9      	adds	r1, r7, r3
 8012090:	2300      	movs	r3, #0
 8012092:	2200      	movs	r2, #0
 8012094:	f7fe fbf8 	bl	8010888 <xQueueGenericSend>
 8012098:	0003      	movs	r3, r0
 801209a:	627b      	str	r3, [r7, #36]	; 0x24
 801209c:	e009      	b.n	80120b2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801209e:	4b07      	ldr	r3, [pc, #28]	; (80120bc <xTimerGenericCommand+0x90>)
 80120a0:	6818      	ldr	r0, [r3, #0]
 80120a2:	683a      	ldr	r2, [r7, #0]
 80120a4:	2314      	movs	r3, #20
 80120a6:	18f9      	adds	r1, r7, r3
 80120a8:	2300      	movs	r3, #0
 80120aa:	f7fe fcb1 	bl	8010a10 <xQueueGenericSendFromISR>
 80120ae:	0003      	movs	r3, r0
 80120b0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80120b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80120b4:	0018      	movs	r0, r3
 80120b6:	46bd      	mov	sp, r7
 80120b8:	b00b      	add	sp, #44	; 0x2c
 80120ba:	bd90      	pop	{r4, r7, pc}
 80120bc:	200010f8 	.word	0x200010f8

080120c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b086      	sub	sp, #24
 80120c4:	af02      	add	r7, sp, #8
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120ca:	4b1e      	ldr	r3, [pc, #120]	; (8012144 <prvProcessExpiredTimer+0x84>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	3304      	adds	r3, #4
 80120d8:	0018      	movs	r0, r3
 80120da:	f7fe fab4 	bl	8010646 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2228      	movs	r2, #40	; 0x28
 80120e2:	5c9b      	ldrb	r3, [r3, r2]
 80120e4:	001a      	movs	r2, r3
 80120e6:	2304      	movs	r3, #4
 80120e8:	4013      	ands	r3, r2
 80120ea:	d019      	beq.n	8012120 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	699a      	ldr	r2, [r3, #24]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	18d1      	adds	r1, r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	68f8      	ldr	r0, [r7, #12]
 80120fa:	f000 f8c3 	bl	8012284 <prvInsertTimerInActiveList>
 80120fe:	1e03      	subs	r3, r0, #0
 8012100:	d017      	beq.n	8012132 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012102:	687a      	ldr	r2, [r7, #4]
 8012104:	68f8      	ldr	r0, [r7, #12]
 8012106:	2300      	movs	r3, #0
 8012108:	9300      	str	r3, [sp, #0]
 801210a:	2300      	movs	r3, #0
 801210c:	2100      	movs	r1, #0
 801210e:	f7ff ff8d 	bl	801202c <xTimerGenericCommand>
 8012112:	0003      	movs	r3, r0
 8012114:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d10a      	bne.n	8012132 <prvProcessExpiredTimer+0x72>
 801211c:	b672      	cpsid	i
 801211e:	e7fe      	b.n	801211e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	2228      	movs	r2, #40	; 0x28
 8012124:	5c9b      	ldrb	r3, [r3, r2]
 8012126:	2201      	movs	r2, #1
 8012128:	4393      	bics	r3, r2
 801212a:	b2d9      	uxtb	r1, r3
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	2228      	movs	r2, #40	; 0x28
 8012130:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	6a1b      	ldr	r3, [r3, #32]
 8012136:	68fa      	ldr	r2, [r7, #12]
 8012138:	0010      	movs	r0, r2
 801213a:	4798      	blx	r3
}
 801213c:	46c0      	nop			; (mov r8, r8)
 801213e:	46bd      	mov	sp, r7
 8012140:	b004      	add	sp, #16
 8012142:	bd80      	pop	{r7, pc}
 8012144:	200010f0 	.word	0x200010f0

08012148 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012150:	2308      	movs	r3, #8
 8012152:	18fb      	adds	r3, r7, r3
 8012154:	0018      	movs	r0, r3
 8012156:	f000 f853 	bl	8012200 <prvGetNextExpireTime>
 801215a:	0003      	movs	r3, r0
 801215c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801215e:	68ba      	ldr	r2, [r7, #8]
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	0011      	movs	r1, r2
 8012164:	0018      	movs	r0, r3
 8012166:	f000 f803 	bl	8012170 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801216a:	f000 f8cd 	bl	8012308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801216e:	e7ef      	b.n	8012150 <prvTimerTask+0x8>

08012170 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801217a:	f7ff fab3 	bl	80116e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801217e:	2308      	movs	r3, #8
 8012180:	18fb      	adds	r3, r7, r3
 8012182:	0018      	movs	r0, r3
 8012184:	f000 f85e 	bl	8012244 <prvSampleTimeNow>
 8012188:	0003      	movs	r3, r0
 801218a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d12b      	bne.n	80121ea <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d10c      	bne.n	80121b2 <prvProcessTimerOrBlockTask+0x42>
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	429a      	cmp	r2, r3
 801219e:	d808      	bhi.n	80121b2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80121a0:	f7ff faac 	bl	80116fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80121a4:	68fa      	ldr	r2, [r7, #12]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	0011      	movs	r1, r2
 80121aa:	0018      	movs	r0, r3
 80121ac:	f7ff ff88 	bl	80120c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80121b0:	e01d      	b.n	80121ee <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d008      	beq.n	80121ca <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80121b8:	4b0f      	ldr	r3, [pc, #60]	; (80121f8 <prvProcessTimerOrBlockTask+0x88>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d101      	bne.n	80121c6 <prvProcessTimerOrBlockTask+0x56>
 80121c2:	2301      	movs	r3, #1
 80121c4:	e000      	b.n	80121c8 <prvProcessTimerOrBlockTask+0x58>
 80121c6:	2300      	movs	r3, #0
 80121c8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80121ca:	4b0c      	ldr	r3, [pc, #48]	; (80121fc <prvProcessTimerOrBlockTask+0x8c>)
 80121cc:	6818      	ldr	r0, [r3, #0]
 80121ce:	687a      	ldr	r2, [r7, #4]
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	683a      	ldr	r2, [r7, #0]
 80121d6:	0019      	movs	r1, r3
 80121d8:	f7fe feec 	bl	8010fb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80121dc:	f7ff fa8e 	bl	80116fc <xTaskResumeAll>
 80121e0:	1e03      	subs	r3, r0, #0
 80121e2:	d104      	bne.n	80121ee <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80121e4:	f000 fa84 	bl	80126f0 <vPortYield>
}
 80121e8:	e001      	b.n	80121ee <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80121ea:	f7ff fa87 	bl	80116fc <xTaskResumeAll>
}
 80121ee:	46c0      	nop			; (mov r8, r8)
 80121f0:	46bd      	mov	sp, r7
 80121f2:	b004      	add	sp, #16
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	46c0      	nop			; (mov r8, r8)
 80121f8:	200010f4 	.word	0x200010f4
 80121fc:	200010f8 	.word	0x200010f8

08012200 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012208:	4b0d      	ldr	r3, [pc, #52]	; (8012240 <prvGetNextExpireTime+0x40>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d101      	bne.n	8012216 <prvGetNextExpireTime+0x16>
 8012212:	2201      	movs	r2, #1
 8012214:	e000      	b.n	8012218 <prvGetNextExpireTime+0x18>
 8012216:	2200      	movs	r2, #0
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d105      	bne.n	8012230 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012224:	4b06      	ldr	r3, [pc, #24]	; (8012240 <prvGetNextExpireTime+0x40>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	60fb      	str	r3, [r7, #12]
 801222e:	e001      	b.n	8012234 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012230:	2300      	movs	r3, #0
 8012232:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012234:	68fb      	ldr	r3, [r7, #12]
}
 8012236:	0018      	movs	r0, r3
 8012238:	46bd      	mov	sp, r7
 801223a:	b004      	add	sp, #16
 801223c:	bd80      	pop	{r7, pc}
 801223e:	46c0      	nop			; (mov r8, r8)
 8012240:	200010f0 	.word	0x200010f0

08012244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801224c:	f7ff fae2 	bl	8011814 <xTaskGetTickCount>
 8012250:	0003      	movs	r3, r0
 8012252:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8012254:	4b0a      	ldr	r3, [pc, #40]	; (8012280 <prvSampleTimeNow+0x3c>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	68fa      	ldr	r2, [r7, #12]
 801225a:	429a      	cmp	r2, r3
 801225c:	d205      	bcs.n	801226a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 801225e:	f000 f919 	bl	8012494 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2201      	movs	r2, #1
 8012266:	601a      	str	r2, [r3, #0]
 8012268:	e002      	b.n	8012270 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2200      	movs	r2, #0
 801226e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012270:	4b03      	ldr	r3, [pc, #12]	; (8012280 <prvSampleTimeNow+0x3c>)
 8012272:	68fa      	ldr	r2, [r7, #12]
 8012274:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8012276:	68fb      	ldr	r3, [r7, #12]
}
 8012278:	0018      	movs	r0, r3
 801227a:	46bd      	mov	sp, r7
 801227c:	b004      	add	sp, #16
 801227e:	bd80      	pop	{r7, pc}
 8012280:	20001100 	.word	0x20001100

08012284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b086      	sub	sp, #24
 8012288:	af00      	add	r7, sp, #0
 801228a:	60f8      	str	r0, [r7, #12]
 801228c:	60b9      	str	r1, [r7, #8]
 801228e:	607a      	str	r2, [r7, #4]
 8012290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012292:	2300      	movs	r3, #0
 8012294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	68ba      	ldr	r2, [r7, #8]
 801229a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	68fa      	ldr	r2, [r7, #12]
 80122a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80122a2:	68ba      	ldr	r2, [r7, #8]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d812      	bhi.n	80122d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122aa:	687a      	ldr	r2, [r7, #4]
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	1ad2      	subs	r2, r2, r3
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	699b      	ldr	r3, [r3, #24]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d302      	bcc.n	80122be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80122b8:	2301      	movs	r3, #1
 80122ba:	617b      	str	r3, [r7, #20]
 80122bc:	e01b      	b.n	80122f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80122be:	4b10      	ldr	r3, [pc, #64]	; (8012300 <prvInsertTimerInActiveList+0x7c>)
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	3304      	adds	r3, #4
 80122c6:	0019      	movs	r1, r3
 80122c8:	0010      	movs	r0, r2
 80122ca:	f7fe f986 	bl	80105da <vListInsert>
 80122ce:	e012      	b.n	80122f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d206      	bcs.n	80122e6 <prvInsertTimerInActiveList+0x62>
 80122d8:	68ba      	ldr	r2, [r7, #8]
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d302      	bcc.n	80122e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80122e0:	2301      	movs	r3, #1
 80122e2:	617b      	str	r3, [r7, #20]
 80122e4:	e007      	b.n	80122f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80122e6:	4b07      	ldr	r3, [pc, #28]	; (8012304 <prvInsertTimerInActiveList+0x80>)
 80122e8:	681a      	ldr	r2, [r3, #0]
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	3304      	adds	r3, #4
 80122ee:	0019      	movs	r1, r3
 80122f0:	0010      	movs	r0, r2
 80122f2:	f7fe f972 	bl	80105da <vListInsert>
		}
	}

	return xProcessTimerNow;
 80122f6:	697b      	ldr	r3, [r7, #20]
}
 80122f8:	0018      	movs	r0, r3
 80122fa:	46bd      	mov	sp, r7
 80122fc:	b006      	add	sp, #24
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	200010f4 	.word	0x200010f4
 8012304:	200010f0 	.word	0x200010f0

08012308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012308:	b590      	push	{r4, r7, lr}
 801230a:	b08d      	sub	sp, #52	; 0x34
 801230c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801230e:	e0ac      	b.n	801246a <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012310:	2208      	movs	r2, #8
 8012312:	18bb      	adds	r3, r7, r2
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	da0f      	bge.n	801233a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801231a:	18bb      	adds	r3, r7, r2
 801231c:	3304      	adds	r3, #4
 801231e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	2b00      	cmp	r3, #0
 8012324:	d101      	bne.n	801232a <prvProcessReceivedCommands+0x22>
 8012326:	b672      	cpsid	i
 8012328:	e7fe      	b.n	8012328 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232c:	681a      	ldr	r2, [r3, #0]
 801232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012330:	6858      	ldr	r0, [r3, #4]
 8012332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012334:	689b      	ldr	r3, [r3, #8]
 8012336:	0019      	movs	r1, r3
 8012338:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801233a:	2208      	movs	r2, #8
 801233c:	18bb      	adds	r3, r7, r2
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	da00      	bge.n	8012346 <prvProcessReceivedCommands+0x3e>
 8012344:	e091      	b.n	801246a <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012346:	18bb      	adds	r3, r7, r2
 8012348:	689b      	ldr	r3, [r3, #8]
 801234a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801234c:	6a3b      	ldr	r3, [r7, #32]
 801234e:	695b      	ldr	r3, [r3, #20]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d004      	beq.n	801235e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012354:	6a3b      	ldr	r3, [r7, #32]
 8012356:	3304      	adds	r3, #4
 8012358:	0018      	movs	r0, r3
 801235a:	f7fe f974 	bl	8010646 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801235e:	1d3b      	adds	r3, r7, #4
 8012360:	0018      	movs	r0, r3
 8012362:	f7ff ff6f 	bl	8012244 <prvSampleTimeNow>
 8012366:	0003      	movs	r3, r0
 8012368:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 801236a:	2308      	movs	r3, #8
 801236c:	18fb      	adds	r3, r7, r3
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2b09      	cmp	r3, #9
 8012372:	d900      	bls.n	8012376 <prvProcessReceivedCommands+0x6e>
 8012374:	e078      	b.n	8012468 <prvProcessReceivedCommands+0x160>
 8012376:	009a      	lsls	r2, r3, #2
 8012378:	4b44      	ldr	r3, [pc, #272]	; (801248c <prvProcessReceivedCommands+0x184>)
 801237a:	18d3      	adds	r3, r2, r3
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012380:	6a3b      	ldr	r3, [r7, #32]
 8012382:	2228      	movs	r2, #40	; 0x28
 8012384:	5c9b      	ldrb	r3, [r3, r2]
 8012386:	2201      	movs	r2, #1
 8012388:	4313      	orrs	r3, r2
 801238a:	b2d9      	uxtb	r1, r3
 801238c:	6a3b      	ldr	r3, [r7, #32]
 801238e:	2228      	movs	r2, #40	; 0x28
 8012390:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012392:	2408      	movs	r4, #8
 8012394:	193b      	adds	r3, r7, r4
 8012396:	685a      	ldr	r2, [r3, #4]
 8012398:	6a3b      	ldr	r3, [r7, #32]
 801239a:	699b      	ldr	r3, [r3, #24]
 801239c:	18d1      	adds	r1, r2, r3
 801239e:	193b      	adds	r3, r7, r4
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	69fa      	ldr	r2, [r7, #28]
 80123a4:	6a38      	ldr	r0, [r7, #32]
 80123a6:	f7ff ff6d 	bl	8012284 <prvInsertTimerInActiveList>
 80123aa:	1e03      	subs	r3, r0, #0
 80123ac:	d05d      	beq.n	801246a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123ae:	6a3b      	ldr	r3, [r7, #32]
 80123b0:	6a1b      	ldr	r3, [r3, #32]
 80123b2:	6a3a      	ldr	r2, [r7, #32]
 80123b4:	0010      	movs	r0, r2
 80123b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123b8:	6a3b      	ldr	r3, [r7, #32]
 80123ba:	2228      	movs	r2, #40	; 0x28
 80123bc:	5c9b      	ldrb	r3, [r3, r2]
 80123be:	001a      	movs	r2, r3
 80123c0:	2304      	movs	r3, #4
 80123c2:	4013      	ands	r3, r2
 80123c4:	d051      	beq.n	801246a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80123c6:	193b      	adds	r3, r7, r4
 80123c8:	685a      	ldr	r2, [r3, #4]
 80123ca:	6a3b      	ldr	r3, [r7, #32]
 80123cc:	699b      	ldr	r3, [r3, #24]
 80123ce:	18d2      	adds	r2, r2, r3
 80123d0:	6a38      	ldr	r0, [r7, #32]
 80123d2:	2300      	movs	r3, #0
 80123d4:	9300      	str	r3, [sp, #0]
 80123d6:	2300      	movs	r3, #0
 80123d8:	2100      	movs	r1, #0
 80123da:	f7ff fe27 	bl	801202c <xTimerGenericCommand>
 80123de:	0003      	movs	r3, r0
 80123e0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80123e2:	69bb      	ldr	r3, [r7, #24]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d140      	bne.n	801246a <prvProcessReceivedCommands+0x162>
 80123e8:	b672      	cpsid	i
 80123ea:	e7fe      	b.n	80123ea <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80123ec:	6a3b      	ldr	r3, [r7, #32]
 80123ee:	2228      	movs	r2, #40	; 0x28
 80123f0:	5c9b      	ldrb	r3, [r3, r2]
 80123f2:	2201      	movs	r2, #1
 80123f4:	4393      	bics	r3, r2
 80123f6:	b2d9      	uxtb	r1, r3
 80123f8:	6a3b      	ldr	r3, [r7, #32]
 80123fa:	2228      	movs	r2, #40	; 0x28
 80123fc:	5499      	strb	r1, [r3, r2]
					break;
 80123fe:	e034      	b.n	801246a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012400:	6a3b      	ldr	r3, [r7, #32]
 8012402:	2228      	movs	r2, #40	; 0x28
 8012404:	5c9b      	ldrb	r3, [r3, r2]
 8012406:	2201      	movs	r2, #1
 8012408:	4313      	orrs	r3, r2
 801240a:	b2d9      	uxtb	r1, r3
 801240c:	6a3b      	ldr	r3, [r7, #32]
 801240e:	2228      	movs	r2, #40	; 0x28
 8012410:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012412:	2308      	movs	r3, #8
 8012414:	18fb      	adds	r3, r7, r3
 8012416:	685a      	ldr	r2, [r3, #4]
 8012418:	6a3b      	ldr	r3, [r7, #32]
 801241a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801241c:	6a3b      	ldr	r3, [r7, #32]
 801241e:	699b      	ldr	r3, [r3, #24]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d101      	bne.n	8012428 <prvProcessReceivedCommands+0x120>
 8012424:	b672      	cpsid	i
 8012426:	e7fe      	b.n	8012426 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012428:	6a3b      	ldr	r3, [r7, #32]
 801242a:	699a      	ldr	r2, [r3, #24]
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	18d1      	adds	r1, r2, r3
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	69fa      	ldr	r2, [r7, #28]
 8012434:	6a38      	ldr	r0, [r7, #32]
 8012436:	f7ff ff25 	bl	8012284 <prvInsertTimerInActiveList>
					break;
 801243a:	e016      	b.n	801246a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801243c:	6a3b      	ldr	r3, [r7, #32]
 801243e:	2228      	movs	r2, #40	; 0x28
 8012440:	5c9b      	ldrb	r3, [r3, r2]
 8012442:	001a      	movs	r2, r3
 8012444:	2302      	movs	r3, #2
 8012446:	4013      	ands	r3, r2
 8012448:	d104      	bne.n	8012454 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 801244a:	6a3b      	ldr	r3, [r7, #32]
 801244c:	0018      	movs	r0, r3
 801244e:	f000 faa3 	bl	8012998 <vPortFree>
 8012452:	e00a      	b.n	801246a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012454:	6a3b      	ldr	r3, [r7, #32]
 8012456:	2228      	movs	r2, #40	; 0x28
 8012458:	5c9b      	ldrb	r3, [r3, r2]
 801245a:	2201      	movs	r2, #1
 801245c:	4393      	bics	r3, r2
 801245e:	b2d9      	uxtb	r1, r3
 8012460:	6a3b      	ldr	r3, [r7, #32]
 8012462:	2228      	movs	r2, #40	; 0x28
 8012464:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012466:	e000      	b.n	801246a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8012468:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801246a:	4b09      	ldr	r3, [pc, #36]	; (8012490 <prvProcessReceivedCommands+0x188>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2208      	movs	r2, #8
 8012470:	18b9      	adds	r1, r7, r2
 8012472:	2200      	movs	r2, #0
 8012474:	0018      	movs	r0, r3
 8012476:	f7fe fb3f 	bl	8010af8 <xQueueReceive>
 801247a:	1e03      	subs	r3, r0, #0
 801247c:	d000      	beq.n	8012480 <prvProcessReceivedCommands+0x178>
 801247e:	e747      	b.n	8012310 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012480:	46c0      	nop			; (mov r8, r8)
 8012482:	46c0      	nop			; (mov r8, r8)
 8012484:	46bd      	mov	sp, r7
 8012486:	b00b      	add	sp, #44	; 0x2c
 8012488:	bd90      	pop	{r4, r7, pc}
 801248a:	46c0      	nop			; (mov r8, r8)
 801248c:	0801c480 	.word	0x0801c480
 8012490:	200010f8 	.word	0x200010f8

08012494 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b088      	sub	sp, #32
 8012498:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801249a:	e041      	b.n	8012520 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801249c:	4b2a      	ldr	r3, [pc, #168]	; (8012548 <prvSwitchTimerLists+0xb4>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124a6:	4b28      	ldr	r3, [pc, #160]	; (8012548 <prvSwitchTimerLists+0xb4>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	3304      	adds	r3, #4
 80124b4:	0018      	movs	r0, r3
 80124b6:	f7fe f8c6 	bl	8010646 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	6a1b      	ldr	r3, [r3, #32]
 80124be:	68fa      	ldr	r2, [r7, #12]
 80124c0:	0010      	movs	r0, r2
 80124c2:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	2228      	movs	r2, #40	; 0x28
 80124c8:	5c9b      	ldrb	r3, [r3, r2]
 80124ca:	001a      	movs	r2, r3
 80124cc:	2304      	movs	r3, #4
 80124ce:	4013      	ands	r3, r2
 80124d0:	d026      	beq.n	8012520 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	699b      	ldr	r3, [r3, #24]
 80124d6:	693a      	ldr	r2, [r7, #16]
 80124d8:	18d3      	adds	r3, r2, r3
 80124da:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80124dc:	68ba      	ldr	r2, [r7, #8]
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d90e      	bls.n	8012502 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	68ba      	ldr	r2, [r7, #8]
 80124e8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	68fa      	ldr	r2, [r7, #12]
 80124ee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80124f0:	4b15      	ldr	r3, [pc, #84]	; (8012548 <prvSwitchTimerLists+0xb4>)
 80124f2:	681a      	ldr	r2, [r3, #0]
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	3304      	adds	r3, #4
 80124f8:	0019      	movs	r1, r3
 80124fa:	0010      	movs	r0, r2
 80124fc:	f7fe f86d 	bl	80105da <vListInsert>
 8012500:	e00e      	b.n	8012520 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012502:	693a      	ldr	r2, [r7, #16]
 8012504:	68f8      	ldr	r0, [r7, #12]
 8012506:	2300      	movs	r3, #0
 8012508:	9300      	str	r3, [sp, #0]
 801250a:	2300      	movs	r3, #0
 801250c:	2100      	movs	r1, #0
 801250e:	f7ff fd8d 	bl	801202c <xTimerGenericCommand>
 8012512:	0003      	movs	r3, r0
 8012514:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d101      	bne.n	8012520 <prvSwitchTimerLists+0x8c>
 801251c:	b672      	cpsid	i
 801251e:	e7fe      	b.n	801251e <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012520:	4b09      	ldr	r3, [pc, #36]	; (8012548 <prvSwitchTimerLists+0xb4>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1b8      	bne.n	801249c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801252a:	4b07      	ldr	r3, [pc, #28]	; (8012548 <prvSwitchTimerLists+0xb4>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012530:	4b06      	ldr	r3, [pc, #24]	; (801254c <prvSwitchTimerLists+0xb8>)
 8012532:	681a      	ldr	r2, [r3, #0]
 8012534:	4b04      	ldr	r3, [pc, #16]	; (8012548 <prvSwitchTimerLists+0xb4>)
 8012536:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8012538:	4b04      	ldr	r3, [pc, #16]	; (801254c <prvSwitchTimerLists+0xb8>)
 801253a:	697a      	ldr	r2, [r7, #20]
 801253c:	601a      	str	r2, [r3, #0]
}
 801253e:	46c0      	nop			; (mov r8, r8)
 8012540:	46bd      	mov	sp, r7
 8012542:	b006      	add	sp, #24
 8012544:	bd80      	pop	{r7, pc}
 8012546:	46c0      	nop			; (mov r8, r8)
 8012548:	200010f0 	.word	0x200010f0
 801254c:	200010f4 	.word	0x200010f4

08012550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b082      	sub	sp, #8
 8012554:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012556:	f000 f8db 	bl	8012710 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801255a:	4b16      	ldr	r3, [pc, #88]	; (80125b4 <prvCheckForValidListAndQueue+0x64>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d123      	bne.n	80125aa <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8012562:	4b15      	ldr	r3, [pc, #84]	; (80125b8 <prvCheckForValidListAndQueue+0x68>)
 8012564:	0018      	movs	r0, r3
 8012566:	f7fd ffed 	bl	8010544 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801256a:	4b14      	ldr	r3, [pc, #80]	; (80125bc <prvCheckForValidListAndQueue+0x6c>)
 801256c:	0018      	movs	r0, r3
 801256e:	f7fd ffe9 	bl	8010544 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012572:	4b13      	ldr	r3, [pc, #76]	; (80125c0 <prvCheckForValidListAndQueue+0x70>)
 8012574:	4a10      	ldr	r2, [pc, #64]	; (80125b8 <prvCheckForValidListAndQueue+0x68>)
 8012576:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012578:	4b12      	ldr	r3, [pc, #72]	; (80125c4 <prvCheckForValidListAndQueue+0x74>)
 801257a:	4a10      	ldr	r2, [pc, #64]	; (80125bc <prvCheckForValidListAndQueue+0x6c>)
 801257c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801257e:	4b12      	ldr	r3, [pc, #72]	; (80125c8 <prvCheckForValidListAndQueue+0x78>)
 8012580:	4a12      	ldr	r2, [pc, #72]	; (80125cc <prvCheckForValidListAndQueue+0x7c>)
 8012582:	2100      	movs	r1, #0
 8012584:	9100      	str	r1, [sp, #0]
 8012586:	2110      	movs	r1, #16
 8012588:	200a      	movs	r0, #10
 801258a:	f7fe f8d8 	bl	801073e <xQueueGenericCreateStatic>
 801258e:	0002      	movs	r2, r0
 8012590:	4b08      	ldr	r3, [pc, #32]	; (80125b4 <prvCheckForValidListAndQueue+0x64>)
 8012592:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012594:	4b07      	ldr	r3, [pc, #28]	; (80125b4 <prvCheckForValidListAndQueue+0x64>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d006      	beq.n	80125aa <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801259c:	4b05      	ldr	r3, [pc, #20]	; (80125b4 <prvCheckForValidListAndQueue+0x64>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	4a0b      	ldr	r2, [pc, #44]	; (80125d0 <prvCheckForValidListAndQueue+0x80>)
 80125a2:	0011      	movs	r1, r2
 80125a4:	0018      	movs	r0, r3
 80125a6:	f7fe fcdd 	bl	8010f64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80125aa:	f000 f8c3 	bl	8012734 <vPortExitCritical>
}
 80125ae:	46c0      	nop			; (mov r8, r8)
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	200010f8 	.word	0x200010f8
 80125b8:	200010c8 	.word	0x200010c8
 80125bc:	200010dc 	.word	0x200010dc
 80125c0:	200010f0 	.word	0x200010f0
 80125c4:	200010f4 	.word	0x200010f4
 80125c8:	200011a4 	.word	0x200011a4
 80125cc:	20001104 	.word	0x20001104
 80125d0:	0801b4f0 	.word	0x0801b4f0

080125d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b084      	sub	sp, #16
 80125d8:	af00      	add	r7, sp, #0
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	3b04      	subs	r3, #4
 80125e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2280      	movs	r2, #128	; 0x80
 80125ea:	0452      	lsls	r2, r2, #17
 80125ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	3b04      	subs	r3, #4
 80125f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	3b04      	subs	r3, #4
 80125fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012600:	4a08      	ldr	r2, [pc, #32]	; (8012624 <pxPortInitialiseStack+0x50>)
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	3b14      	subs	r3, #20
 801260a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	3b20      	subs	r3, #32
 8012616:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012618:	68fb      	ldr	r3, [r7, #12]
}
 801261a:	0018      	movs	r0, r3
 801261c:	46bd      	mov	sp, r7
 801261e:	b004      	add	sp, #16
 8012620:	bd80      	pop	{r7, pc}
 8012622:	46c0      	nop			; (mov r8, r8)
 8012624:	08012629 	.word	0x08012629

08012628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b082      	sub	sp, #8
 801262c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801262e:	2300      	movs	r3, #0
 8012630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012632:	4b08      	ldr	r3, [pc, #32]	; (8012654 <prvTaskExitError+0x2c>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	3301      	adds	r3, #1
 8012638:	d001      	beq.n	801263e <prvTaskExitError+0x16>
 801263a:	b672      	cpsid	i
 801263c:	e7fe      	b.n	801263c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 801263e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8012640:	46c0      	nop			; (mov r8, r8)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d0fc      	beq.n	8012642 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012648:	46c0      	nop			; (mov r8, r8)
 801264a:	46c0      	nop			; (mov r8, r8)
 801264c:	46bd      	mov	sp, r7
 801264e:	b002      	add	sp, #8
 8012650:	bd80      	pop	{r7, pc}
 8012652:	46c0      	nop			; (mov r8, r8)
 8012654:	20000038 	.word	0x20000038

08012658 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8012658:	b580      	push	{r7, lr}
 801265a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 801265c:	46c0      	nop			; (mov r8, r8)
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
	...

08012670 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8012670:	4a0b      	ldr	r2, [pc, #44]	; (80126a0 <pxCurrentTCBConst2>)
 8012672:	6813      	ldr	r3, [r2, #0]
 8012674:	6818      	ldr	r0, [r3, #0]
 8012676:	3020      	adds	r0, #32
 8012678:	f380 8809 	msr	PSP, r0
 801267c:	2002      	movs	r0, #2
 801267e:	f380 8814 	msr	CONTROL, r0
 8012682:	f3bf 8f6f 	isb	sy
 8012686:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8012688:	46ae      	mov	lr, r5
 801268a:	bc08      	pop	{r3}
 801268c:	bc04      	pop	{r2}
 801268e:	b662      	cpsie	i
 8012690:	4718      	bx	r3
 8012692:	46c0      	nop			; (mov r8, r8)
 8012694:	46c0      	nop			; (mov r8, r8)
 8012696:	46c0      	nop			; (mov r8, r8)
 8012698:	46c0      	nop			; (mov r8, r8)
 801269a:	46c0      	nop			; (mov r8, r8)
 801269c:	46c0      	nop			; (mov r8, r8)
 801269e:	46c0      	nop			; (mov r8, r8)

080126a0 <pxCurrentTCBConst2>:
 80126a0:	20000bc8 	.word	0x20000bc8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80126a4:	46c0      	nop			; (mov r8, r8)
 80126a6:	46c0      	nop			; (mov r8, r8)

080126a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80126ac:	4b0e      	ldr	r3, [pc, #56]	; (80126e8 <xPortStartScheduler+0x40>)
 80126ae:	681a      	ldr	r2, [r3, #0]
 80126b0:	4b0d      	ldr	r3, [pc, #52]	; (80126e8 <xPortStartScheduler+0x40>)
 80126b2:	21ff      	movs	r1, #255	; 0xff
 80126b4:	0409      	lsls	r1, r1, #16
 80126b6:	430a      	orrs	r2, r1
 80126b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80126ba:	4b0b      	ldr	r3, [pc, #44]	; (80126e8 <xPortStartScheduler+0x40>)
 80126bc:	681a      	ldr	r2, [r3, #0]
 80126be:	4b0a      	ldr	r3, [pc, #40]	; (80126e8 <xPortStartScheduler+0x40>)
 80126c0:	21ff      	movs	r1, #255	; 0xff
 80126c2:	0609      	lsls	r1, r1, #24
 80126c4:	430a      	orrs	r2, r1
 80126c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80126c8:	f000 f898 	bl	80127fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80126cc:	4b07      	ldr	r3, [pc, #28]	; (80126ec <xPortStartScheduler+0x44>)
 80126ce:	2200      	movs	r2, #0
 80126d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80126d2:	f7ff ffcd 	bl	8012670 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80126d6:	f7ff f95b 	bl	8011990 <vTaskSwitchContext>
	prvTaskExitError();
 80126da:	f7ff ffa5 	bl	8012628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80126de:	2300      	movs	r3, #0
}
 80126e0:	0018      	movs	r0, r3
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}
 80126e6:	46c0      	nop			; (mov r8, r8)
 80126e8:	e000ed20 	.word	0xe000ed20
 80126ec:	20000038 	.word	0x20000038

080126f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80126f4:	4b05      	ldr	r3, [pc, #20]	; (801270c <vPortYield+0x1c>)
 80126f6:	2280      	movs	r2, #128	; 0x80
 80126f8:	0552      	lsls	r2, r2, #21
 80126fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80126fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8012700:	f3bf 8f6f 	isb	sy
}
 8012704:	46c0      	nop			; (mov r8, r8)
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	46c0      	nop			; (mov r8, r8)
 801270c:	e000ed04 	.word	0xe000ed04

08012710 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8012714:	b672      	cpsid	i
	uxCriticalNesting++;
 8012716:	4b06      	ldr	r3, [pc, #24]	; (8012730 <vPortEnterCritical+0x20>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	1c5a      	adds	r2, r3, #1
 801271c:	4b04      	ldr	r3, [pc, #16]	; (8012730 <vPortEnterCritical+0x20>)
 801271e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8012720:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8012724:	f3bf 8f6f 	isb	sy
}
 8012728:	46c0      	nop			; (mov r8, r8)
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	46c0      	nop			; (mov r8, r8)
 8012730:	20000038 	.word	0x20000038

08012734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012734:	b580      	push	{r7, lr}
 8012736:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012738:	4b09      	ldr	r3, [pc, #36]	; (8012760 <vPortExitCritical+0x2c>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d101      	bne.n	8012744 <vPortExitCritical+0x10>
 8012740:	b672      	cpsid	i
 8012742:	e7fe      	b.n	8012742 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8012744:	4b06      	ldr	r3, [pc, #24]	; (8012760 <vPortExitCritical+0x2c>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	1e5a      	subs	r2, r3, #1
 801274a:	4b05      	ldr	r3, [pc, #20]	; (8012760 <vPortExitCritical+0x2c>)
 801274c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 801274e:	4b04      	ldr	r3, [pc, #16]	; (8012760 <vPortExitCritical+0x2c>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d100      	bne.n	8012758 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8012756:	b662      	cpsie	i
	}
}
 8012758:	46c0      	nop			; (mov r8, r8)
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	46c0      	nop			; (mov r8, r8)
 8012760:	20000038 	.word	0x20000038

08012764 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8012764:	f3ef 8010 	mrs	r0, PRIMASK
 8012768:	b672      	cpsid	i
 801276a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801276c:	46c0      	nop			; (mov r8, r8)
 801276e:	0018      	movs	r0, r3

08012770 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8012770:	f380 8810 	msr	PRIMASK, r0
 8012774:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8012776:	46c0      	nop			; (mov r8, r8)
	...

08012780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012780:	f3ef 8009 	mrs	r0, PSP
 8012784:	4b0e      	ldr	r3, [pc, #56]	; (80127c0 <pxCurrentTCBConst>)
 8012786:	681a      	ldr	r2, [r3, #0]
 8012788:	3820      	subs	r0, #32
 801278a:	6010      	str	r0, [r2, #0]
 801278c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801278e:	4644      	mov	r4, r8
 8012790:	464d      	mov	r5, r9
 8012792:	4656      	mov	r6, sl
 8012794:	465f      	mov	r7, fp
 8012796:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8012798:	b508      	push	{r3, lr}
 801279a:	b672      	cpsid	i
 801279c:	f7ff f8f8 	bl	8011990 <vTaskSwitchContext>
 80127a0:	b662      	cpsie	i
 80127a2:	bc0c      	pop	{r2, r3}
 80127a4:	6811      	ldr	r1, [r2, #0]
 80127a6:	6808      	ldr	r0, [r1, #0]
 80127a8:	3010      	adds	r0, #16
 80127aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80127ac:	46a0      	mov	r8, r4
 80127ae:	46a9      	mov	r9, r5
 80127b0:	46b2      	mov	sl, r6
 80127b2:	46bb      	mov	fp, r7
 80127b4:	f380 8809 	msr	PSP, r0
 80127b8:	3820      	subs	r0, #32
 80127ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80127bc:	4718      	bx	r3
 80127be:	46c0      	nop			; (mov r8, r8)

080127c0 <pxCurrentTCBConst>:
 80127c0:	20000bc8 	.word	0x20000bc8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80127c4:	46c0      	nop			; (mov r8, r8)
 80127c6:	46c0      	nop			; (mov r8, r8)

080127c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80127ce:	f7ff ffc9 	bl	8012764 <ulSetInterruptMaskFromISR>
 80127d2:	0003      	movs	r3, r0
 80127d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80127d6:	f7ff f82b 	bl	8011830 <xTaskIncrementTick>
 80127da:	1e03      	subs	r3, r0, #0
 80127dc:	d003      	beq.n	80127e6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80127de:	4b06      	ldr	r3, [pc, #24]	; (80127f8 <xPortSysTickHandler+0x30>)
 80127e0:	2280      	movs	r2, #128	; 0x80
 80127e2:	0552      	lsls	r2, r2, #21
 80127e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	0018      	movs	r0, r3
 80127ea:	f7ff ffc1 	bl	8012770 <vClearInterruptMaskFromISR>
}
 80127ee:	46c0      	nop			; (mov r8, r8)
 80127f0:	46bd      	mov	sp, r7
 80127f2:	b002      	add	sp, #8
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	46c0      	nop			; (mov r8, r8)
 80127f8:	e000ed04 	.word	0xe000ed04

080127fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012800:	4b0b      	ldr	r3, [pc, #44]	; (8012830 <vPortSetupTimerInterrupt+0x34>)
 8012802:	2200      	movs	r2, #0
 8012804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012806:	4b0b      	ldr	r3, [pc, #44]	; (8012834 <vPortSetupTimerInterrupt+0x38>)
 8012808:	2200      	movs	r2, #0
 801280a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801280c:	4b0a      	ldr	r3, [pc, #40]	; (8012838 <vPortSetupTimerInterrupt+0x3c>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	22fa      	movs	r2, #250	; 0xfa
 8012812:	0091      	lsls	r1, r2, #2
 8012814:	0018      	movs	r0, r3
 8012816:	f7f3 fceb 	bl	80061f0 <__udivsi3>
 801281a:	0003      	movs	r3, r0
 801281c:	001a      	movs	r2, r3
 801281e:	4b07      	ldr	r3, [pc, #28]	; (801283c <vPortSetupTimerInterrupt+0x40>)
 8012820:	3a01      	subs	r2, #1
 8012822:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8012824:	4b02      	ldr	r3, [pc, #8]	; (8012830 <vPortSetupTimerInterrupt+0x34>)
 8012826:	2207      	movs	r2, #7
 8012828:	601a      	str	r2, [r3, #0]
}
 801282a:	46c0      	nop			; (mov r8, r8)
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	e000e010 	.word	0xe000e010
 8012834:	e000e018 	.word	0xe000e018
 8012838:	2000002c 	.word	0x2000002c
 801283c:	e000e014 	.word	0xe000e014

08012840 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012848:	2300      	movs	r3, #0
 801284a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801284c:	f7fe ff4a 	bl	80116e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012850:	4b4b      	ldr	r3, [pc, #300]	; (8012980 <pvPortMalloc+0x140>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d101      	bne.n	801285c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012858:	f000 f8ec 	bl	8012a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801285c:	4b49      	ldr	r3, [pc, #292]	; (8012984 <pvPortMalloc+0x144>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	4013      	ands	r3, r2
 8012864:	d000      	beq.n	8012868 <pvPortMalloc+0x28>
 8012866:	e07e      	b.n	8012966 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d012      	beq.n	8012894 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 801286e:	2208      	movs	r2, #8
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	189b      	adds	r3, r3, r2
 8012874:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2207      	movs	r2, #7
 801287a:	4013      	ands	r3, r2
 801287c:	d00a      	beq.n	8012894 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2207      	movs	r2, #7
 8012882:	4393      	bics	r3, r2
 8012884:	3308      	adds	r3, #8
 8012886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2207      	movs	r2, #7
 801288c:	4013      	ands	r3, r2
 801288e:	d001      	beq.n	8012894 <pvPortMalloc+0x54>
 8012890:	b672      	cpsid	i
 8012892:	e7fe      	b.n	8012892 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d065      	beq.n	8012966 <pvPortMalloc+0x126>
 801289a:	4b3b      	ldr	r3, [pc, #236]	; (8012988 <pvPortMalloc+0x148>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d860      	bhi.n	8012966 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80128a4:	4b39      	ldr	r3, [pc, #228]	; (801298c <pvPortMalloc+0x14c>)
 80128a6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80128a8:	4b38      	ldr	r3, [pc, #224]	; (801298c <pvPortMalloc+0x14c>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128ae:	e004      	b.n	80128ba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	687a      	ldr	r2, [r7, #4]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d903      	bls.n	80128cc <pvPortMalloc+0x8c>
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d1f1      	bne.n	80128b0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80128cc:	4b2c      	ldr	r3, [pc, #176]	; (8012980 <pvPortMalloc+0x140>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	697a      	ldr	r2, [r7, #20]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d047      	beq.n	8012966 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2208      	movs	r2, #8
 80128dc:	189b      	adds	r3, r3, r2
 80128de:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	685a      	ldr	r2, [r3, #4]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	1ad2      	subs	r2, r2, r3
 80128f0:	2308      	movs	r3, #8
 80128f2:	005b      	lsls	r3, r3, #1
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d916      	bls.n	8012926 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80128f8:	697a      	ldr	r2, [r7, #20]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	18d3      	adds	r3, r2, r3
 80128fe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	2207      	movs	r2, #7
 8012904:	4013      	ands	r3, r2
 8012906:	d001      	beq.n	801290c <pvPortMalloc+0xcc>
 8012908:	b672      	cpsid	i
 801290a:	e7fe      	b.n	801290a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	685a      	ldr	r2, [r3, #4]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	1ad2      	subs	r2, r2, r3
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	687a      	ldr	r2, [r7, #4]
 801291c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	0018      	movs	r0, r3
 8012922:	f000 f8e7 	bl	8012af4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012926:	4b18      	ldr	r3, [pc, #96]	; (8012988 <pvPortMalloc+0x148>)
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	685b      	ldr	r3, [r3, #4]
 801292e:	1ad2      	subs	r2, r2, r3
 8012930:	4b15      	ldr	r3, [pc, #84]	; (8012988 <pvPortMalloc+0x148>)
 8012932:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012934:	4b14      	ldr	r3, [pc, #80]	; (8012988 <pvPortMalloc+0x148>)
 8012936:	681a      	ldr	r2, [r3, #0]
 8012938:	4b15      	ldr	r3, [pc, #84]	; (8012990 <pvPortMalloc+0x150>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	429a      	cmp	r2, r3
 801293e:	d203      	bcs.n	8012948 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012940:	4b11      	ldr	r3, [pc, #68]	; (8012988 <pvPortMalloc+0x148>)
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	4b12      	ldr	r3, [pc, #72]	; (8012990 <pvPortMalloc+0x150>)
 8012946:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	685a      	ldr	r2, [r3, #4]
 801294c:	4b0d      	ldr	r3, [pc, #52]	; (8012984 <pvPortMalloc+0x144>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	431a      	orrs	r2, r3
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	2200      	movs	r2, #0
 801295a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801295c:	4b0d      	ldr	r3, [pc, #52]	; (8012994 <pvPortMalloc+0x154>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	1c5a      	adds	r2, r3, #1
 8012962:	4b0c      	ldr	r3, [pc, #48]	; (8012994 <pvPortMalloc+0x154>)
 8012964:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012966:	f7fe fec9 	bl	80116fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	2207      	movs	r2, #7
 801296e:	4013      	ands	r3, r2
 8012970:	d001      	beq.n	8012976 <pvPortMalloc+0x136>
 8012972:	b672      	cpsid	i
 8012974:	e7fe      	b.n	8012974 <pvPortMalloc+0x134>
	return pvReturn;
 8012976:	68fb      	ldr	r3, [r7, #12]
}
 8012978:	0018      	movs	r0, r3
 801297a:	46bd      	mov	sp, r7
 801297c:	b006      	add	sp, #24
 801297e:	bd80      	pop	{r7, pc}
 8012980:	20002d54 	.word	0x20002d54
 8012984:	20002d68 	.word	0x20002d68
 8012988:	20002d58 	.word	0x20002d58
 801298c:	20002d4c 	.word	0x20002d4c
 8012990:	20002d5c 	.word	0x20002d5c
 8012994:	20002d60 	.word	0x20002d60

08012998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d03a      	beq.n	8012a20 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80129aa:	2308      	movs	r3, #8
 80129ac:	425b      	negs	r3, r3
 80129ae:	68fa      	ldr	r2, [r7, #12]
 80129b0:	18d3      	adds	r3, r2, r3
 80129b2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	685a      	ldr	r2, [r3, #4]
 80129bc:	4b1a      	ldr	r3, [pc, #104]	; (8012a28 <vPortFree+0x90>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	4013      	ands	r3, r2
 80129c2:	d101      	bne.n	80129c8 <vPortFree+0x30>
 80129c4:	b672      	cpsid	i
 80129c6:	e7fe      	b.n	80129c6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d001      	beq.n	80129d4 <vPortFree+0x3c>
 80129d0:	b672      	cpsid	i
 80129d2:	e7fe      	b.n	80129d2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	685a      	ldr	r2, [r3, #4]
 80129d8:	4b13      	ldr	r3, [pc, #76]	; (8012a28 <vPortFree+0x90>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	4013      	ands	r3, r2
 80129de:	d01f      	beq.n	8012a20 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d11b      	bne.n	8012a20 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	685a      	ldr	r2, [r3, #4]
 80129ec:	4b0e      	ldr	r3, [pc, #56]	; (8012a28 <vPortFree+0x90>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	43db      	mvns	r3, r3
 80129f2:	401a      	ands	r2, r3
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80129f8:	f7fe fe74 	bl	80116e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	685a      	ldr	r2, [r3, #4]
 8012a00:	4b0a      	ldr	r3, [pc, #40]	; (8012a2c <vPortFree+0x94>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	18d2      	adds	r2, r2, r3
 8012a06:	4b09      	ldr	r3, [pc, #36]	; (8012a2c <vPortFree+0x94>)
 8012a08:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	0018      	movs	r0, r3
 8012a0e:	f000 f871 	bl	8012af4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012a12:	4b07      	ldr	r3, [pc, #28]	; (8012a30 <vPortFree+0x98>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	1c5a      	adds	r2, r3, #1
 8012a18:	4b05      	ldr	r3, [pc, #20]	; (8012a30 <vPortFree+0x98>)
 8012a1a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8012a1c:	f7fe fe6e 	bl	80116fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012a20:	46c0      	nop			; (mov r8, r8)
 8012a22:	46bd      	mov	sp, r7
 8012a24:	b004      	add	sp, #16
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	20002d68 	.word	0x20002d68
 8012a2c:	20002d58 	.word	0x20002d58
 8012a30:	20002d64 	.word	0x20002d64

08012a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b084      	sub	sp, #16
 8012a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012a3a:	4b27      	ldr	r3, [pc, #156]	; (8012ad8 <prvHeapInit+0xa4>)
 8012a3c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012a3e:	4b27      	ldr	r3, [pc, #156]	; (8012adc <prvHeapInit+0xa8>)
 8012a40:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	2207      	movs	r2, #7
 8012a46:	4013      	ands	r3, r2
 8012a48:	d00c      	beq.n	8012a64 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	3307      	adds	r3, #7
 8012a4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2207      	movs	r2, #7
 8012a54:	4393      	bics	r3, r2
 8012a56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012a58:	68ba      	ldr	r2, [r7, #8]
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	1ad2      	subs	r2, r2, r3
 8012a5e:	4b1f      	ldr	r3, [pc, #124]	; (8012adc <prvHeapInit+0xa8>)
 8012a60:	18d3      	adds	r3, r2, r3
 8012a62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012a68:	4b1d      	ldr	r3, [pc, #116]	; (8012ae0 <prvHeapInit+0xac>)
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012a6e:	4b1c      	ldr	r3, [pc, #112]	; (8012ae0 <prvHeapInit+0xac>)
 8012a70:	2200      	movs	r2, #0
 8012a72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	68ba      	ldr	r2, [r7, #8]
 8012a78:	18d3      	adds	r3, r2, r3
 8012a7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012a7c:	2208      	movs	r2, #8
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	1a9b      	subs	r3, r3, r2
 8012a82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	2207      	movs	r2, #7
 8012a88:	4393      	bics	r3, r2
 8012a8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012a8c:	68fa      	ldr	r2, [r7, #12]
 8012a8e:	4b15      	ldr	r3, [pc, #84]	; (8012ae4 <prvHeapInit+0xb0>)
 8012a90:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8012a92:	4b14      	ldr	r3, [pc, #80]	; (8012ae4 <prvHeapInit+0xb0>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2200      	movs	r2, #0
 8012a98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012a9a:	4b12      	ldr	r3, [pc, #72]	; (8012ae4 <prvHeapInit+0xb0>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	1ad2      	subs	r2, r2, r3
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012ab0:	4b0c      	ldr	r3, [pc, #48]	; (8012ae4 <prvHeapInit+0xb0>)
 8012ab2:	681a      	ldr	r2, [r3, #0]
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	685a      	ldr	r2, [r3, #4]
 8012abc:	4b0a      	ldr	r3, [pc, #40]	; (8012ae8 <prvHeapInit+0xb4>)
 8012abe:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	685a      	ldr	r2, [r3, #4]
 8012ac4:	4b09      	ldr	r3, [pc, #36]	; (8012aec <prvHeapInit+0xb8>)
 8012ac6:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012ac8:	4b09      	ldr	r3, [pc, #36]	; (8012af0 <prvHeapInit+0xbc>)
 8012aca:	2280      	movs	r2, #128	; 0x80
 8012acc:	0612      	lsls	r2, r2, #24
 8012ace:	601a      	str	r2, [r3, #0]
}
 8012ad0:	46c0      	nop			; (mov r8, r8)
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	b004      	add	sp, #16
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	00001b58 	.word	0x00001b58
 8012adc:	200011f4 	.word	0x200011f4
 8012ae0:	20002d4c 	.word	0x20002d4c
 8012ae4:	20002d54 	.word	0x20002d54
 8012ae8:	20002d5c 	.word	0x20002d5c
 8012aec:	20002d58 	.word	0x20002d58
 8012af0:	20002d68 	.word	0x20002d68

08012af4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012afc:	4b27      	ldr	r3, [pc, #156]	; (8012b9c <prvInsertBlockIntoFreeList+0xa8>)
 8012afe:	60fb      	str	r3, [r7, #12]
 8012b00:	e002      	b.n	8012b08 <prvInsertBlockIntoFreeList+0x14>
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	60fb      	str	r3, [r7, #12]
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	687a      	ldr	r2, [r7, #4]
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d8f7      	bhi.n	8012b02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	68ba      	ldr	r2, [r7, #8]
 8012b1c:	18d3      	adds	r3, r2, r3
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	429a      	cmp	r2, r3
 8012b22:	d108      	bne.n	8012b36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	685a      	ldr	r2, [r3, #4]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	18d2      	adds	r2, r2, r3
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	68ba      	ldr	r2, [r7, #8]
 8012b40:	18d2      	adds	r2, r2, r3
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d118      	bne.n	8012b7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	4b14      	ldr	r3, [pc, #80]	; (8012ba0 <prvInsertBlockIntoFreeList+0xac>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d00d      	beq.n	8012b72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	685a      	ldr	r2, [r3, #4]
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	18d2      	adds	r2, r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	601a      	str	r2, [r3, #0]
 8012b70:	e008      	b.n	8012b84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012b72:	4b0b      	ldr	r3, [pc, #44]	; (8012ba0 <prvInsertBlockIntoFreeList+0xac>)
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	601a      	str	r2, [r3, #0]
 8012b7a:	e003      	b.n	8012b84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d002      	beq.n	8012b92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	687a      	ldr	r2, [r7, #4]
 8012b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b92:	46c0      	nop			; (mov r8, r8)
 8012b94:	46bd      	mov	sp, r7
 8012b96:	b004      	add	sp, #16
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	46c0      	nop			; (mov r8, r8)
 8012b9c:	20002d4c 	.word	0x20002d4c
 8012ba0:	20002d54 	.word	0x20002d54

08012ba4 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8012ba8:	f7fb ffea 	bl	800eb80 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8012bac:	f000 f830 	bl	8012c10 <USBPD_DPM_InitCore>
 8012bb0:	1e03      	subs	r3, r0, #0
 8012bb2:	d000      	beq.n	8012bb6 <MX_USBPD_Init+0x12>
  {
    while(1);
 8012bb4:	e7fe      	b.n	8012bb4 <MX_USBPD_Init+0x10>
  }

  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 8012bb6:	4b0a      	ldr	r3, [pc, #40]	; (8012be0 <MX_USBPD_Init+0x3c>)
 8012bb8:	4a0a      	ldr	r2, [pc, #40]	; (8012be4 <MX_USBPD_Init+0x40>)
 8012bba:	490b      	ldr	r1, [pc, #44]	; (8012be8 <MX_USBPD_Init+0x44>)
 8012bbc:	480b      	ldr	r0, [pc, #44]	; (8012bec <MX_USBPD_Init+0x48>)
 8012bbe:	f003 fe41 	bl	8016844 <GUI_Init>

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8012bc2:	f000 fb79 	bl	80132b8 <USBPD_DPM_UserInit>
 8012bc6:	1e03      	subs	r3, r0, #0
 8012bc8:	d000      	beq.n	8012bcc <MX_USBPD_Init+0x28>
  {
    while(1);
 8012bca:	e7fe      	b.n	8012bca <MX_USBPD_Init+0x26>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 8012bcc:	f000 f8f8 	bl	8012dc0 <USBPD_DPM_InitOS>
 8012bd0:	1e03      	subs	r3, r0, #0
 8012bd2:	d000      	beq.n	8012bd6 <MX_USBPD_Init+0x32>
  {
    while(1);
 8012bd4:	e7fe      	b.n	8012bd4 <MX_USBPD_Init+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 8012bd6:	b662      	cpsie	i
}
 8012bd8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 8012bda:	46c0      	nop			; (mov r8, r8)
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	0800f865 	.word	0x0800f865
 8012be4:	0800f83d 	.word	0x0800f83d
 8012be8:	08012c01 	.word	0x08012c01
 8012bec:	08012bf1 	.word	0x08012bf1

08012bf0 <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
__weak const uint8_t* BSP_GetBoardName(void)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_NAME;
 8012bf4:	4b01      	ldr	r3, [pc, #4]	; (8012bfc <BSP_GetBoardName+0xc>)
}
 8012bf6:	0018      	movs	r0, r3
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	0801b4f8 	.word	0x0801b4f8

08012c00 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
__weak const uint8_t* BSP_GetBoardID(void)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_ID;
 8012c04:	4b01      	ldr	r3, [pc, #4]	; (8012c0c <BSP_GetBoardID+0xc>)
}
 8012c06:	0018      	movs	r0, r3
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	0801b504 	.word	0x0801b504

08012c10 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8012c10:	b5b0      	push	{r4, r5, r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8012c16:	1dfb      	adds	r3, r7, #7
 8012c18:	2200      	movs	r2, #0
 8012c1a:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 8012c1c:	4b63      	ldr	r3, [pc, #396]	; (8012dac <USBPD_DPM_InitCore+0x19c>)
 8012c1e:	0018      	movs	r0, r3
 8012c20:	f7ee fc5c 	bl	80014dc <USBPD_PE_CheckLIB>
 8012c24:	0003      	movs	r3, r0
 8012c26:	2b01      	cmp	r3, #1
 8012c28:	d003      	beq.n	8012c32 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 8012c2a:	1dfb      	adds	r3, r7, #7
 8012c2c:	2202      	movs	r2, #2
 8012c2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8012c30:	e0b6      	b.n	8012da0 <USBPD_DPM_InitCore+0x190>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8012c32:	f7ee fc61 	bl	80014f8 <USBPD_PE_GetMemoryConsumption>
 8012c36:	0003      	movs	r3, r0
 8012c38:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 8012c3a:	f7fa f973 	bl	800cf24 <USBPD_TRACE_Init>

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8012c3e:	1dbb      	adds	r3, r7, #6
 8012c40:	2200      	movs	r2, #0
 8012c42:	701a      	strb	r2, [r3, #0]
 8012c44:	e0a6      	b.n	8012d94 <USBPD_DPM_InitCore+0x184>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8012c46:	1dbb      	adds	r3, r7, #6
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	4a59      	ldr	r2, [pc, #356]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	18d3      	adds	r3, r2, r3
 8012c50:	785a      	ldrb	r2, [r3, #1]
 8012c52:	2108      	movs	r1, #8
 8012c54:	438a      	bics	r2, r1
 8012c56:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8012c58:	1dbb      	adds	r3, r7, #6
 8012c5a:	781a      	ldrb	r2, [r3, #0]
 8012c5c:	1dbb      	adds	r3, r7, #6
 8012c5e:	7818      	ldrb	r0, [r3, #0]
 8012c60:	4954      	ldr	r1, [pc, #336]	; (8012db4 <USBPD_DPM_InitCore+0x1a4>)
 8012c62:	0013      	movs	r3, r2
 8012c64:	005b      	lsls	r3, r3, #1
 8012c66:	189b      	adds	r3, r3, r2
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	18cb      	adds	r3, r1, r3
 8012c6c:	791b      	ldrb	r3, [r3, #4]
 8012c6e:	079b      	lsls	r3, r3, #30
 8012c70:	0f9b      	lsrs	r3, r3, #30
 8012c72:	b2d9      	uxtb	r1, r3
 8012c74:	4b4e      	ldr	r3, [pc, #312]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012c76:	0082      	lsls	r2, r0, #2
 8012c78:	2003      	movs	r0, #3
 8012c7a:	4001      	ands	r1, r0
 8012c7c:	000c      	movs	r4, r1
 8012c7e:	5cd1      	ldrb	r1, [r2, r3]
 8012c80:	2003      	movs	r0, #3
 8012c82:	4381      	bics	r1, r0
 8012c84:	1c08      	adds	r0, r1, #0
 8012c86:	1c21      	adds	r1, r4, #0
 8012c88:	4301      	orrs	r1, r0
 8012c8a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8012c8c:	1dbb      	adds	r3, r7, #6
 8012c8e:	781a      	ldrb	r2, [r3, #0]
 8012c90:	1dbb      	adds	r3, r7, #6
 8012c92:	7818      	ldrb	r0, [r3, #0]
 8012c94:	4947      	ldr	r1, [pc, #284]	; (8012db4 <USBPD_DPM_InitCore+0x1a4>)
 8012c96:	0013      	movs	r3, r2
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	189b      	adds	r3, r3, r2
 8012c9c:	009b      	lsls	r3, r3, #2
 8012c9e:	18cb      	adds	r3, r1, r3
 8012ca0:	791b      	ldrb	r3, [r3, #4]
 8012ca2:	075b      	lsls	r3, r3, #29
 8012ca4:	0fdb      	lsrs	r3, r3, #31
 8012ca6:	b2d9      	uxtb	r1, r3
 8012ca8:	4b41      	ldr	r3, [pc, #260]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012caa:	0082      	lsls	r2, r0, #2
 8012cac:	2001      	movs	r0, #1
 8012cae:	4001      	ands	r1, r0
 8012cb0:	008c      	lsls	r4, r1, #2
 8012cb2:	5cd1      	ldrb	r1, [r2, r3]
 8012cb4:	2004      	movs	r0, #4
 8012cb6:	4381      	bics	r1, r0
 8012cb8:	1c08      	adds	r0, r1, #0
 8012cba:	1c21      	adds	r1, r4, #0
 8012cbc:	4301      	orrs	r1, r0
 8012cbe:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8012cc0:	1dbb      	adds	r3, r7, #6
 8012cc2:	781a      	ldrb	r2, [r3, #0]
 8012cc4:	4b3a      	ldr	r3, [pc, #232]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012cc6:	0092      	lsls	r2, r2, #2
 8012cc8:	5cd1      	ldrb	r1, [r2, r3]
 8012cca:	2010      	movs	r0, #16
 8012ccc:	4381      	bics	r1, r0
 8012cce:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8012cd0:	1dbb      	adds	r3, r7, #6
 8012cd2:	781a      	ldrb	r2, [r3, #0]
 8012cd4:	4b36      	ldr	r3, [pc, #216]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012cd6:	0092      	lsls	r2, r2, #2
 8012cd8:	5cd1      	ldrb	r1, [r2, r3]
 8012cda:	203f      	movs	r0, #63	; 0x3f
 8012cdc:	4001      	ands	r1, r0
 8012cde:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8012ce0:	1dbb      	adds	r3, r7, #6
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	4a32      	ldr	r2, [pc, #200]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012ce6:	009b      	lsls	r3, r3, #2
 8012ce8:	18d3      	adds	r3, r2, r3
 8012cea:	785a      	ldrb	r2, [r3, #1]
 8012cec:	2160      	movs	r1, #96	; 0x60
 8012cee:	438a      	bics	r2, r1
 8012cf0:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8012cf2:	1dbb      	adds	r3, r7, #6
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	4a2e      	ldr	r2, [pc, #184]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	18d3      	adds	r3, r2, r3
 8012cfc:	785a      	ldrb	r2, [r3, #1]
 8012cfe:	217f      	movs	r1, #127	; 0x7f
 8012d00:	400a      	ands	r2, r1
 8012d02:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 8012d04:	1dbb      	adds	r3, r7, #6
 8012d06:	781a      	ldrb	r2, [r3, #0]
 8012d08:	0013      	movs	r3, r2
 8012d0a:	005b      	lsls	r3, r3, #1
 8012d0c:	189b      	adds	r3, r3, r2
 8012d0e:	009b      	lsls	r3, r3, #2
 8012d10:	4a28      	ldr	r2, [pc, #160]	; (8012db4 <USBPD_DPM_InitCore+0x1a4>)
 8012d12:	189c      	adds	r4, r3, r2
 8012d14:	1dbb      	adds	r3, r7, #6
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	009a      	lsls	r2, r3, #2
 8012d1a:	4b25      	ldr	r3, [pc, #148]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012d1c:	18d2      	adds	r2, r2, r3
 8012d1e:	4926      	ldr	r1, [pc, #152]	; (8012db8 <USBPD_DPM_InitCore+0x1a8>)
 8012d20:	1dbb      	adds	r3, r7, #6
 8012d22:	7818      	ldrb	r0, [r3, #0]
 8012d24:	0013      	movs	r3, r2
 8012d26:	0022      	movs	r2, r4
 8012d28:	f7ed f9ee 	bl	8000108 <USBPD_CAD_Init>
 8012d2c:	1e03      	subs	r3, r0, #0
 8012d2e:	d003      	beq.n	8012d38 <USBPD_DPM_InitCore+0x128>
 8012d30:	1dfb      	adds	r3, r7, #7
 8012d32:	2202      	movs	r2, #2
 8012d34:	701a      	strb	r2, [r3, #0]
 8012d36:	e033      	b.n	8012da0 <USBPD_DPM_InitCore+0x190>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8012d38:	1dbb      	adds	r3, r7, #6
 8012d3a:	781a      	ldrb	r2, [r3, #0]
 8012d3c:	0013      	movs	r3, r2
 8012d3e:	005b      	lsls	r3, r3, #1
 8012d40:	189b      	adds	r3, r3, r2
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	4a1b      	ldr	r2, [pc, #108]	; (8012db4 <USBPD_DPM_InitCore+0x1a4>)
 8012d46:	1899      	adds	r1, r3, r2
 8012d48:	1dbb      	adds	r3, r7, #6
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	009a      	lsls	r2, r3, #2
 8012d4e:	4b18      	ldr	r3, [pc, #96]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012d50:	18d2      	adds	r2, r2, r3
 8012d52:	1dfc      	adds	r4, r7, #7
 8012d54:	4d19      	ldr	r5, [pc, #100]	; (8012dbc <USBPD_DPM_InitCore+0x1ac>)
 8012d56:	1dbb      	adds	r3, r7, #6
 8012d58:	7818      	ldrb	r0, [r3, #0]
 8012d5a:	002b      	movs	r3, r5
 8012d5c:	f7ed fab2 	bl	80002c4 <USBPD_PE_Init>
 8012d60:	0003      	movs	r3, r0
 8012d62:	7023      	strb	r3, [r4, #0]
 8012d64:	1dfb      	adds	r3, r7, #7
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d119      	bne.n	8012da0 <USBPD_DPM_InitCore+0x190>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8012d6c:	1dbb      	adds	r3, r7, #6
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	4a0f      	ldr	r2, [pc, #60]	; (8012db0 <USBPD_DPM_InitCore+0x1a0>)
 8012d72:	009b      	lsls	r3, r3, #2
 8012d74:	18d3      	adds	r3, r2, r3
 8012d76:	785a      	ldrb	r2, [r3, #1]
 8012d78:	2108      	movs	r1, #8
 8012d7a:	430a      	orrs	r2, r1
 8012d7c:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8012d7e:	1dbb      	adds	r3, r7, #6
 8012d80:	781b      	ldrb	r3, [r3, #0]
 8012d82:	2101      	movs	r1, #1
 8012d84:	0018      	movs	r0, r3
 8012d86:	f7ed f9ec 	bl	8000162 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8012d8a:	1dbb      	adds	r3, r7, #6
 8012d8c:	1dba      	adds	r2, r7, #6
 8012d8e:	7812      	ldrb	r2, [r2, #0]
 8012d90:	3201      	adds	r2, #1
 8012d92:	701a      	strb	r2, [r3, #0]
 8012d94:	1dbb      	adds	r3, r7, #6
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d100      	bne.n	8012d9e <USBPD_DPM_InitCore+0x18e>
 8012d9c:	e753      	b.n	8012c46 <USBPD_DPM_InitCore+0x36>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 8012d9e:	46c0      	nop			; (mov r8, r8)
  return _retr;
 8012da0:	1dfb      	adds	r3, r7, #7
 8012da2:	781b      	ldrb	r3, [r3, #0]
}
 8012da4:	0018      	movs	r0, r3
 8012da6:	46bd      	mov	sp, r7
 8012da8:	b002      	add	sp, #8
 8012daa:	bdb0      	pop	{r4, r5, r7, pc}
 8012dac:	30410000 	.word	0x30410000
 8012db0:	20002d7c 	.word	0x20002d7c
 8012db4:	2000003c 	.word	0x2000003c
 8012db8:	0801c4a8 	.word	0x0801c4a8
 8012dbc:	0801c4b0 	.word	0x0801c4b0

08012dc0 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8012dc0:	b590      	push	{r4, r7, lr}
 8012dc2:	b08d      	sub	sp, #52	; 0x34
 8012dc4:	af00      	add	r7, sp, #0
  OS_INIT();
 8012dc6:	242f      	movs	r4, #47	; 0x2f
 8012dc8:	193b      	adds	r3, r7, r4
 8012dca:	2200      	movs	r2, #0
 8012dcc:	701a      	strb	r2, [r3, #0]
  {
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 8012dce:	2200      	movs	r2, #0
 8012dd0:	2102      	movs	r1, #2
 8012dd2:	2001      	movs	r0, #1
 8012dd4:	f7fd fa56 	bl	8010284 <osMessageQueueNew>
 8012dd8:	0002      	movs	r2, r0
 8012dda:	4b32      	ldr	r3, [pc, #200]	; (8012ea4 <USBPD_DPM_InitOS+0xe4>)
 8012ddc:	601a      	str	r2, [r3, #0]
    OS_DEFINE_TASK(CAD, USBPD_CAD_Task, OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, NULL);
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 8012dde:	1d3b      	adds	r3, r7, #4
 8012de0:	0018      	movs	r0, r3
 8012de2:	2324      	movs	r3, #36	; 0x24
 8012de4:	001a      	movs	r2, r3
 8012de6:	2100      	movs	r1, #0
 8012de8:	f007 feb6 	bl	801ab58 <memset>
 8012dec:	1d3b      	adds	r3, r7, #4
 8012dee:	4a2e      	ldr	r2, [pc, #184]	; (8012ea8 <USBPD_DPM_InitOS+0xe8>)
 8012df0:	601a      	str	r2, [r3, #0]
 8012df2:	1d3b      	adds	r3, r7, #4
 8012df4:	2296      	movs	r2, #150	; 0x96
 8012df6:	00d2      	lsls	r2, r2, #3
 8012df8:	615a      	str	r2, [r3, #20]
 8012dfa:	1d3b      	adds	r3, r7, #4
 8012dfc:	2230      	movs	r2, #48	; 0x30
 8012dfe:	619a      	str	r2, [r3, #24]
 8012e00:	1d3a      	adds	r2, r7, #4
 8012e02:	4b2a      	ldr	r3, [pc, #168]	; (8012eac <USBPD_DPM_InitOS+0xec>)
 8012e04:	2100      	movs	r1, #0
 8012e06:	0018      	movs	r0, r3
 8012e08:	f7fd f93a 	bl	8010080 <osThreadNew>
 8012e0c:	0002      	movs	r2, r0
 8012e0e:	4b28      	ldr	r3, [pc, #160]	; (8012eb0 <USBPD_DPM_InitOS+0xf0>)
 8012e10:	601a      	str	r2, [r3, #0]
 8012e12:	4b27      	ldr	r3, [pc, #156]	; (8012eb0 <USBPD_DPM_InitOS+0xf0>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d103      	bne.n	8012e22 <USBPD_DPM_InitOS+0x62>
 8012e1a:	193b      	adds	r3, r7, r4
 8012e1c:	2202      	movs	r2, #2
 8012e1e:	701a      	strb	r2, [r3, #0]
 8012e20:	e039      	b.n	8012e96 <USBPD_DPM_InitOS+0xd6>
  }

  /* Create the queue corresponding to PE task */
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 8012e22:	2300      	movs	r3, #0
 8012e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e26:	e032      	b.n	8012e8e <USBPD_DPM_InitOS+0xce>
  {
    OS_CREATE_QUEUE(PEQueueId[index], "QPE", 1, OS_ELEMENT_SIZE);
 8012e28:	2200      	movs	r2, #0
 8012e2a:	2102      	movs	r1, #2
 8012e2c:	2001      	movs	r0, #1
 8012e2e:	f7fd fa29 	bl	8010284 <osMessageQueueNew>
 8012e32:	0001      	movs	r1, r0
 8012e34:	4b1f      	ldr	r3, [pc, #124]	; (8012eb4 <USBPD_DPM_InitOS+0xf4>)
 8012e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e38:	0092      	lsls	r2, r2, #2
 8012e3a:	50d1      	str	r1, [r2, r3]

    if (index == USBPD_PORT_0)
 8012e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d122      	bne.n	8012e88 <USBPD_DPM_InitOS+0xc8>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_0, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_0);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_0], PE_0, USBPD_PE_Task,
 8012e42:	1d3b      	adds	r3, r7, #4
 8012e44:	0018      	movs	r0, r3
 8012e46:	2324      	movs	r3, #36	; 0x24
 8012e48:	001a      	movs	r2, r3
 8012e4a:	2100      	movs	r1, #0
 8012e4c:	f007 fe84 	bl	801ab58 <memset>
 8012e50:	1d3b      	adds	r3, r7, #4
 8012e52:	4a19      	ldr	r2, [pc, #100]	; (8012eb8 <USBPD_DPM_InitOS+0xf8>)
 8012e54:	601a      	str	r2, [r3, #0]
 8012e56:	1d3b      	adds	r3, r7, #4
 8012e58:	22af      	movs	r2, #175	; 0xaf
 8012e5a:	00d2      	lsls	r2, r2, #3
 8012e5c:	615a      	str	r2, [r3, #20]
 8012e5e:	1d3b      	adds	r3, r7, #4
 8012e60:	2220      	movs	r2, #32
 8012e62:	619a      	str	r2, [r3, #24]
 8012e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012e66:	1d3a      	adds	r2, r7, #4
 8012e68:	4b14      	ldr	r3, [pc, #80]	; (8012ebc <USBPD_DPM_InitOS+0xfc>)
 8012e6a:	0018      	movs	r0, r3
 8012e6c:	f7fd f908 	bl	8010080 <osThreadNew>
 8012e70:	0002      	movs	r2, r0
 8012e72:	4b13      	ldr	r3, [pc, #76]	; (8012ec0 <USBPD_DPM_InitOS+0x100>)
 8012e74:	601a      	str	r2, [r3, #0]
 8012e76:	4b12      	ldr	r3, [pc, #72]	; (8012ec0 <USBPD_DPM_InitOS+0x100>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d104      	bne.n	8012e88 <USBPD_DPM_InitOS+0xc8>
 8012e7e:	232f      	movs	r3, #47	; 0x2f
 8012e80:	18fb      	adds	r3, r7, r3
 8012e82:	2202      	movs	r2, #2
 8012e84:	701a      	strb	r2, [r3, #0]
 8012e86:	e006      	b.n	8012e96 <USBPD_DPM_InitOS+0xd6>
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 8012e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d0c9      	beq.n	8012e28 <USBPD_DPM_InitOS+0x68>
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_1], PE_1, USBPD_PE_Task,
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#endif /* USBPD_PORT_COUNT > 1*/
  }
error:
 8012e94:	46c0      	nop			; (mov r8, r8)

  return _retr;
 8012e96:	232f      	movs	r3, #47	; 0x2f
 8012e98:	18fb      	adds	r3, r7, r3
 8012e9a:	781b      	ldrb	r3, [r3, #0]
}
 8012e9c:	0018      	movs	r0, r3
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	b00d      	add	sp, #52	; 0x34
 8012ea2:	bd90      	pop	{r4, r7, pc}
 8012ea4:	20002d70 	.word	0x20002d70
 8012ea8:	0801b50c 	.word	0x0801b50c
 8012eac:	08012fb9 	.word	0x08012fb9
 8012eb0:	20002d74 	.word	0x20002d74
 8012eb4:	20002d78 	.word	0x20002d78
 8012eb8:	0801b510 	.word	0x0801b510
 8012ebc:	08012f55 	.word	0x08012f55
 8012ec0:	20002d6c 	.word	0x20002d6c

08012ec4 <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 8012ec8:	4b09      	ldr	r3, [pc, #36]	; (8012ef0 <USBPD_DPM_TimerCounter+0x2c>)
 8012eca:	785b      	ldrb	r3, [r3, #1]
 8012ecc:	2208      	movs	r2, #8
 8012ece:	4013      	ands	r3, r2
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d008      	beq.n	8012ee8 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	f000 fa6a 	bl	80133b0 <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 8012edc:	2000      	movs	r0, #0
 8012ede:	f7ed fa4e 	bl	800037e <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 8012ee2:	2000      	movs	r0, #0
 8012ee4:	f7f2 fba0 	bl	8005628 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 8012ee8:	46c0      	nop			; (mov r8, r8)
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
 8012eee:	46c0      	nop			; (mov r8, r8)
 8012ef0:	20002d7c 	.word	0x20002d7c

08012ef4 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b084      	sub	sp, #16
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	0002      	movs	r2, r0
 8012efc:	1dfb      	adds	r3, r7, #7
 8012efe:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 8012f00:	4b08      	ldr	r3, [pc, #32]	; (8012f24 <USBPD_PE_TaskWakeUp+0x30>)
 8012f02:	60fb      	str	r3, [r7, #12]
 8012f04:	1dfb      	adds	r3, r7, #7
 8012f06:	781a      	ldrb	r2, [r3, #0]
 8012f08:	4b07      	ldr	r3, [pc, #28]	; (8012f28 <USBPD_PE_TaskWakeUp+0x34>)
 8012f0a:	0092      	lsls	r2, r2, #2
 8012f0c:	58d0      	ldr	r0, [r2, r3]
 8012f0e:	230c      	movs	r3, #12
 8012f10:	18f9      	adds	r1, r7, r3
 8012f12:	2300      	movs	r3, #0
 8012f14:	2200      	movs	r2, #0
 8012f16:	f7fd fa2f 	bl	8010378 <osMessageQueuePut>
}
 8012f1a:	46c0      	nop			; (mov r8, r8)
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	b004      	add	sp, #16
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	46c0      	nop			; (mov r8, r8)
 8012f24:	0000ffff 	.word	0x0000ffff
 8012f28:	20002d78 	.word	0x20002d78

08012f2c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 8012f32:	4b06      	ldr	r3, [pc, #24]	; (8012f4c <USBPD_DPM_CADTaskWakeUp+0x20>)
 8012f34:	607b      	str	r3, [r7, #4]
 8012f36:	4b06      	ldr	r3, [pc, #24]	; (8012f50 <USBPD_DPM_CADTaskWakeUp+0x24>)
 8012f38:	6818      	ldr	r0, [r3, #0]
 8012f3a:	1d39      	adds	r1, r7, #4
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	2200      	movs	r2, #0
 8012f40:	f7fd fa1a 	bl	8010378 <osMessageQueuePut>
}
 8012f44:	46c0      	nop			; (mov r8, r8)
 8012f46:	46bd      	mov	sp, r7
 8012f48:	b002      	add	sp, #8
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	0000ffff 	.word	0x0000ffff
 8012f50:	20002d70 	.word	0x20002d70

08012f54 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_PE_Task)
{
 8012f54:	b590      	push	{r4, r7, lr}
 8012f56:	b087      	sub	sp, #28
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
  uint8_t _port = (uint32_t)argument;
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	2317      	movs	r3, #23
 8012f60:	18fb      	adds	r3, r7, r3
 8012f62:	701a      	strb	r2, [r3, #0]
  UTIL_LPM_SetOffMode(0 == _port ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

  for (;;)
  {
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 8012f64:	2317      	movs	r3, #23
 8012f66:	18fb      	adds	r3, r7, r3
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	4a11      	ldr	r2, [pc, #68]	; (8012fb0 <USBPD_PE_Task+0x5c>)
 8012f6c:	009b      	lsls	r3, r3, #2
 8012f6e:	18d3      	adds	r3, r2, r3
 8012f70:	785b      	ldrb	r3, [r3, #1]
 8012f72:	06db      	lsls	r3, r3, #27
 8012f74:	0fdb      	lsrs	r3, r3, #31
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d105      	bne.n	8012f88 <USBPD_PE_Task+0x34>
    {
      /* if the port is no more connected, suspend the PE thread */
      OS_TASK_SUSPEND(OS_TASK_GETID());
 8012f7c:	f7fd f916 	bl	80101ac <osThreadGetId>
 8012f80:	0003      	movs	r3, r0
 8012f82:	0018      	movs	r0, r3
 8012f84:	f7fd f91e 	bl	80101c4 <osThreadSuspend>
    }

    _timing = USBPD_PE_StateMachine_SNK(_port);
 8012f88:	2417      	movs	r4, #23
 8012f8a:	193b      	adds	r3, r7, r4
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	0018      	movs	r0, r3
 8012f90:	f7ee ff4a 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 8012f94:	0003      	movs	r3, r0
 8012f96:	613b      	str	r3, [r7, #16]
 /* _DRP || ( _SRC && _SNK) */

    OS_GETMESSAGE_QUEUE(PEQueueId[_port], _timing);
 8012f98:	193b      	adds	r3, r7, r4
 8012f9a:	781a      	ldrb	r2, [r3, #0]
 8012f9c:	4b05      	ldr	r3, [pc, #20]	; (8012fb4 <USBPD_PE_Task+0x60>)
 8012f9e:	0092      	lsls	r2, r2, #2
 8012fa0:	58d0      	ldr	r0, [r2, r3]
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	220c      	movs	r2, #12
 8012fa6:	18b9      	adds	r1, r7, r2
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f7fd fa41 	bl	8010430 <osMessageQueueGet>
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 8012fae:	e7d9      	b.n	8012f64 <USBPD_PE_Task+0x10>
 8012fb0:	20002d7c 	.word	0x20002d7c
 8012fb4:	20002d78 	.word	0x20002d78

08012fb8 <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 8012fc0:	f7ed f8d6 	bl	8000170 <USBPD_CAD_Process>
 8012fc4:	0003      	movs	r3, r0
 8012fc6:	60fb      	str	r3, [r7, #12]
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 8012fc8:	4b04      	ldr	r3, [pc, #16]	; (8012fdc <USBPD_CAD_Task+0x24>)
 8012fca:	6818      	ldr	r0, [r3, #0]
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2208      	movs	r2, #8
 8012fd0:	18b9      	adds	r1, r7, r2
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f7fd fa2c 	bl	8010430 <osMessageQueueGet>
    _timing = USBPD_CAD_Process();
 8012fd8:	e7f2      	b.n	8012fc0 <USBPD_CAD_Task+0x8>
 8012fda:	46c0      	nop			; (mov r8, r8)
 8012fdc:	20002d70 	.word	0x20002d70

08012fe0 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af02      	add	r7, sp, #8
 8012fe6:	603a      	str	r2, [r7, #0]
 8012fe8:	1dfb      	adds	r3, r7, #7
 8012fea:	1c02      	adds	r2, r0, #0
 8012fec:	701a      	strb	r2, [r3, #0]
 8012fee:	1dbb      	adds	r3, r7, #6
 8012ff0:	1c0a      	adds	r2, r1, #0
 8012ff2:	701a      	strb	r2, [r3, #0]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 8012ff4:	1dbb      	adds	r3, r7, #6
 8012ff6:	781a      	ldrb	r2, [r3, #0]
 8012ff8:	1dfb      	adds	r3, r7, #7
 8012ffa:	7819      	ldrb	r1, [r3, #0]
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	9300      	str	r3, [sp, #0]
 8013000:	2300      	movs	r3, #0
 8013002:	2003      	movs	r0, #3
 8013004:	f7f9 ffa4 	bl	800cf50 <USBPD_TRACE_Add>
 /* _TRACE */
  (void)(Cc);
  switch (State)
 8013008:	1dbb      	adds	r3, r7, #6
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	2b04      	cmp	r3, #4
 801300e:	d009      	beq.n	8013024 <USBPD_DPM_CADCallback+0x44>
 8013010:	dd00      	ble.n	8013014 <USBPD_DPM_CADCallback+0x34>
 8013012:	e06f      	b.n	80130f4 <USBPD_DPM_CADCallback+0x114>
 8013014:	2b03      	cmp	r3, #3
 8013016:	d01d      	beq.n	8013054 <USBPD_DPM_CADCallback+0x74>
 8013018:	dc6c      	bgt.n	80130f4 <USBPD_DPM_CADCallback+0x114>
 801301a:	2b01      	cmp	r3, #1
 801301c:	d01a      	beq.n	8013054 <USBPD_DPM_CADCallback+0x74>
 801301e:	2b02      	cmp	r3, #2
 8013020:	d00c      	beq.n	801303c <USBPD_DPM_CADCallback+0x5c>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 8013022:	e067      	b.n	80130f4 <USBPD_DPM_CADCallback+0x114>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 8013024:	1dfb      	adds	r3, r7, #7
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	2104      	movs	r1, #4
 801302a:	0018      	movs	r0, r3
 801302c:	f000 f966 	bl	80132fc <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8013030:	1dfb      	adds	r3, r7, #7
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	0018      	movs	r0, r3
 8013036:	f000 f867 	bl	8013108 <DPM_StartPETask>
      break;
 801303a:	e05c      	b.n	80130f6 <USBPD_DPM_CADCallback+0x116>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 801303c:	1dfb      	adds	r3, r7, #7
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	2102      	movs	r1, #2
 8013042:	0018      	movs	r0, r3
 8013044:	f000 f95a 	bl	80132fc <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8013048:	1dfb      	adds	r3, r7, #7
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	0018      	movs	r0, r3
 801304e:	f000 f85b 	bl	8013108 <DPM_StartPETask>
      break;
 8013052:	e050      	b.n	80130f6 <USBPD_DPM_CADCallback+0x116>
      uint8_t _timeout = 0;
 8013054:	230f      	movs	r3, #15
 8013056:	18fb      	adds	r3, r7, r3
 8013058:	2200      	movs	r2, #0
 801305a:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 801305c:	1dfb      	adds	r3, r7, #7
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	0018      	movs	r0, r3
 8013062:	f7ff ff47 	bl	8012ef4 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8013066:	e015      	b.n	8013094 <USBPD_DPM_CADCallback+0xb4>
        (void)OS_DELAY(1);
 8013068:	2001      	movs	r0, #1
 801306a:	f7fd f8ef 	bl	801024c <osDelay>
        _timeout++;
 801306e:	210f      	movs	r1, #15
 8013070:	187b      	adds	r3, r7, r1
 8013072:	781a      	ldrb	r2, [r3, #0]
 8013074:	187b      	adds	r3, r7, r1
 8013076:	3201      	adds	r2, #1
 8013078:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 801307a:	187b      	adds	r3, r7, r1
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	2b1e      	cmp	r3, #30
 8013080:	d908      	bls.n	8013094 <USBPD_DPM_CADCallback+0xb4>
          (void)OS_TASK_SUSPEND(DPM_PEThreadId_Table[PortNum]);
 8013082:	1dfb      	adds	r3, r7, #7
 8013084:	781a      	ldrb	r2, [r3, #0]
 8013086:	4b1e      	ldr	r3, [pc, #120]	; (8013100 <USBPD_DPM_CADCallback+0x120>)
 8013088:	0092      	lsls	r2, r2, #2
 801308a:	58d3      	ldr	r3, [r2, r3]
 801308c:	0018      	movs	r0, r3
 801308e:	f7fd f899 	bl	80101c4 <osThreadSuspend>
          break;
 8013092:	e00a      	b.n	80130aa <USBPD_DPM_CADCallback+0xca>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8013094:	1dfb      	adds	r3, r7, #7
 8013096:	781a      	ldrb	r2, [r3, #0]
 8013098:	4b19      	ldr	r3, [pc, #100]	; (8013100 <USBPD_DPM_CADCallback+0x120>)
 801309a:	0092      	lsls	r2, r2, #2
 801309c:	58d3      	ldr	r3, [r2, r3]
 801309e:	0018      	movs	r0, r3
 80130a0:	f7fe f97a 	bl	8011398 <eTaskGetState>
 80130a4:	0003      	movs	r3, r0
 80130a6:	2b03      	cmp	r3, #3
 80130a8:	d1de      	bne.n	8013068 <USBPD_DPM_CADCallback+0x88>
      USBPD_PE_StateMachine_Stop(PortNum);
 80130aa:	1dfb      	adds	r3, r7, #7
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	0018      	movs	r0, r3
 80130b0:	f7ed f9d3 	bl	800045a <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 80130b4:	1dfb      	adds	r3, r7, #7
 80130b6:	781a      	ldrb	r2, [r3, #0]
 80130b8:	4b12      	ldr	r3, [pc, #72]	; (8013104 <USBPD_DPM_CADCallback+0x124>)
 80130ba:	0092      	lsls	r2, r2, #2
 80130bc:	5cd1      	ldrb	r1, [r2, r3]
 80130be:	2010      	movs	r0, #16
 80130c0:	4381      	bics	r1, r0
 80130c2:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 80130c4:	1dfb      	adds	r3, r7, #7
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	4a0e      	ldr	r2, [pc, #56]	; (8013104 <USBPD_DPM_CADCallback+0x124>)
 80130ca:	009b      	lsls	r3, r3, #2
 80130cc:	18d3      	adds	r3, r2, r3
 80130ce:	785a      	ldrb	r2, [r3, #1]
 80130d0:	2107      	movs	r1, #7
 80130d2:	438a      	bics	r2, r1
 80130d4:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 80130d6:	1dbb      	adds	r3, r7, #6
 80130d8:	781a      	ldrb	r2, [r3, #0]
 80130da:	1dfb      	adds	r3, r7, #7
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	0011      	movs	r1, r2
 80130e0:	0018      	movs	r0, r3
 80130e2:	f000 f90b 	bl	80132fc <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 80130e6:	1dfb      	adds	r3, r7, #7
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	2169      	movs	r1, #105	; 0x69
 80130ec:	0018      	movs	r0, r3
 80130ee:	f000 f969 	bl	80133c4 <USBPD_DPM_Notification>
      break;
 80130f2:	e000      	b.n	80130f6 <USBPD_DPM_CADCallback+0x116>
      break;
 80130f4:	46c0      	nop			; (mov r8, r8)
  }
}
 80130f6:	46c0      	nop			; (mov r8, r8)
 80130f8:	46bd      	mov	sp, r7
 80130fa:	b004      	add	sp, #16
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	46c0      	nop			; (mov r8, r8)
 8013100:	20002d6c 	.word	0x20002d6c
 8013104:	20002d7c 	.word	0x20002d7c

08013108 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b082      	sub	sp, #8
 801310c:	af00      	add	r7, sp, #0
 801310e:	0002      	movs	r2, r0
 8013110:	1dfb      	adds	r3, r7, #7
 8013112:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 8013114:	1dfb      	adds	r3, r7, #7
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	0018      	movs	r0, r3
 801311a:	f7ed f998 	bl	800044e <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 801311e:	1dfb      	adds	r3, r7, #7
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	2b01      	cmp	r3, #1
 8013124:	d808      	bhi.n	8013138 <DPM_StartPETask+0x30>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 8013126:	1dfb      	adds	r3, r7, #7
 8013128:	781a      	ldrb	r2, [r3, #0]
 801312a:	4b0a      	ldr	r3, [pc, #40]	; (8013154 <DPM_StartPETask+0x4c>)
 801312c:	0092      	lsls	r2, r2, #2
 801312e:	58d3      	ldr	r3, [r2, r3]
 8013130:	0018      	movs	r0, r3
 8013132:	f7fd f869 	bl	8010208 <osThreadResume>
      break;
 8013136:	e002      	b.n	801313e <DPM_StartPETask+0x36>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 8013138:	f000 f80e 	bl	8013158 <USBPD_DPM_ErrorHandler>
      break;
 801313c:	46c0      	nop			; (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 801313e:	1dfb      	adds	r3, r7, #7
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	2168      	movs	r1, #104	; 0x68
 8013144:	0018      	movs	r0, r3
 8013146:	f000 f93d 	bl	80133c4 <USBPD_DPM_Notification>
}
 801314a:	46c0      	nop			; (mov r8, r8)
 801314c:	46bd      	mov	sp, r7
 801314e:	b002      	add	sp, #8
 8013150:	bd80      	pop	{r7, pc}
 8013152:	46c0      	nop			; (mov r8, r8)
 8013154:	20002d6c 	.word	0x20002d6c

08013158 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 801315c:	e7fe      	b.n	801315c <USBPD_DPM_ErrorHandler+0x4>
	...

08013160 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	0002      	movs	r2, r0
 8013168:	1dfb      	adds	r3, r7, #7
 801316a:	701a      	strb	r2, [r3, #0]
 801316c:	1dbb      	adds	r3, r7, #6
 801316e:	1c0a      	adds	r2, r1, #0
 8013170:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8013172:	230f      	movs	r3, #15
 8013174:	18fb      	adds	r3, r7, r3
 8013176:	2202      	movs	r2, #2
 8013178:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801317a:	1dfb      	adds	r3, r7, #7
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 8013182:	2302      	movs	r3, #2
 8013184:	e024      	b.n	80131d0 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8013186:	1dfb      	adds	r3, r7, #7
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	2208      	movs	r2, #8
 801318c:	18ba      	adds	r2, r7, r2
 801318e:	0011      	movs	r1, r2
 8013190:	0018      	movs	r0, r3
 8013192:	f001 fb47 	bl	8014824 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8013196:	1dbb      	adds	r3, r7, #6
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d10a      	bne.n	80131b4 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	4a0d      	ldr	r2, [pc, #52]	; (80131d8 <USBPD_PWR_IF_SupplyReady+0x78>)
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d801      	bhi.n	80131aa <USBPD_PWR_IF_SupplyReady+0x4a>
 80131a6:	2200      	movs	r2, #0
 80131a8:	e000      	b.n	80131ac <USBPD_PWR_IF_SupplyReady+0x4c>
 80131aa:	2202      	movs	r2, #2
 80131ac:	230f      	movs	r3, #15
 80131ae:	18fb      	adds	r3, r7, r3
 80131b0:	701a      	strb	r2, [r3, #0]
 80131b2:	e00a      	b.n	80131ca <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 80131b4:	68ba      	ldr	r2, [r7, #8]
 80131b6:	23af      	movs	r3, #175	; 0xaf
 80131b8:	011b      	lsls	r3, r3, #4
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d901      	bls.n	80131c2 <USBPD_PWR_IF_SupplyReady+0x62>
 80131be:	2200      	movs	r2, #0
 80131c0:	e000      	b.n	80131c4 <USBPD_PWR_IF_SupplyReady+0x64>
 80131c2:	2202      	movs	r2, #2
 80131c4:	230f      	movs	r3, #15
 80131c6:	18fb      	adds	r3, r7, r3
 80131c8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80131ca:	230f      	movs	r3, #15
 80131cc:	18fb      	adds	r3, r7, r3
 80131ce:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 80131d0:	0018      	movs	r0, r3
 80131d2:	46bd      	mov	sp, r7
 80131d4:	b004      	add	sp, #16
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	000002ed 	.word	0x000002ed

080131dc <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b084      	sub	sp, #16
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	60ba      	str	r2, [r7, #8]
 80131e4:	607b      	str	r3, [r7, #4]
 80131e6:	230f      	movs	r3, #15
 80131e8:	18fb      	adds	r3, r7, r3
 80131ea:	1c02      	adds	r2, r0, #0
 80131ec:	701a      	strb	r2, [r3, #0]
 80131ee:	230e      	movs	r3, #14
 80131f0:	18fb      	adds	r3, r7, r3
 80131f2:	1c0a      	adds	r2, r1, #0
 80131f4:	701a      	strb	r2, [r3, #0]
    {
      *Size = USBPD_NbPDO[0];
 80131f6:	4b08      	ldr	r3, [pc, #32]	; (8013218 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 80131f8:	781b      	ldrb	r3, [r3, #0]
 80131fa:	001a      	movs	r2, r3
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * USBPD_NbPDO[0]);
 8013200:	4b05      	ldr	r3, [pc, #20]	; (8013218 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	009a      	lsls	r2, r3, #2
 8013206:	4905      	ldr	r1, [pc, #20]	; (801321c <USBPD_PWR_IF_GetPortPDOs+0x40>)
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	0018      	movs	r0, r3
 801320c:	f007 fd58 	bl	801acc0 <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 8013210:	46c0      	nop			; (mov r8, r8)
 8013212:	46bd      	mov	sp, r7
 8013214:	b004      	add	sp, #16
 8013216:	bd80      	pop	{r7, pc}
 8013218:	200000c4 	.word	0x200000c4
 801321c:	200000c8 	.word	0x200000c8

08013220 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b084      	sub	sp, #16
 8013224:	af00      	add	r7, sp, #0
 8013226:	0002      	movs	r2, r0
 8013228:	1dfb      	adds	r3, r7, #7
 801322a:	701a      	strb	r2, [r3, #0]
 801322c:	1dbb      	adds	r3, r7, #6
 801322e:	1c0a      	adds	r2, r1, #0
 8013230:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8013232:	230f      	movs	r3, #15
 8013234:	18fb      	adds	r3, r7, r3
 8013236:	2200      	movs	r2, #0
 8013238:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801323a:	1dfb      	adds	r3, r7, #7
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	0018      	movs	r0, r3
 8013240:	f7fc fafc 	bl	800f83c <HW_IF_PWR_GetVoltage>
 8013244:	0003      	movs	r3, r0
 8013246:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8013248:	1dbb      	adds	r3, r7, #6
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	2b02      	cmp	r3, #2
 801324e:	d018      	beq.n	8013282 <USBPD_PWR_IF_GetVBUSStatus+0x62>
 8013250:	dc21      	bgt.n	8013296 <USBPD_PWR_IF_GetVBUSStatus+0x76>
 8013252:	2b00      	cmp	r3, #0
 8013254:	d002      	beq.n	801325c <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 8013256:	2b01      	cmp	r3, #1
 8013258:	d009      	beq.n	801326e <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801325a:	e01c      	b.n	8013296 <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	4a15      	ldr	r2, [pc, #84]	; (80132b4 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 8013260:	4293      	cmp	r3, r2
 8013262:	d81a      	bhi.n	801329a <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 8013264:	230f      	movs	r3, #15
 8013266:	18fb      	adds	r3, r7, r3
 8013268:	2201      	movs	r2, #1
 801326a:	701a      	strb	r2, [r3, #0]
    break;
 801326c:	e015      	b.n	801329a <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801326e:	68ba      	ldr	r2, [r7, #8]
 8013270:	23af      	movs	r3, #175	; 0xaf
 8013272:	011b      	lsls	r3, r3, #4
 8013274:	429a      	cmp	r2, r3
 8013276:	d312      	bcc.n	801329e <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 8013278:	230f      	movs	r3, #15
 801327a:	18fb      	adds	r3, r7, r3
 801327c:	2201      	movs	r2, #1
 801327e:	701a      	strb	r2, [r3, #0]
    break;
 8013280:	e00d      	b.n	801329e <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	23af      	movs	r3, #175	; 0xaf
 8013286:	011b      	lsls	r3, r3, #4
 8013288:	429a      	cmp	r2, r3
 801328a:	d20a      	bcs.n	80132a2 <USBPD_PWR_IF_GetVBUSStatus+0x82>
 801328c:	230f      	movs	r3, #15
 801328e:	18fb      	adds	r3, r7, r3
 8013290:	2201      	movs	r2, #1
 8013292:	701a      	strb	r2, [r3, #0]
    break;
 8013294:	e005      	b.n	80132a2 <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 8013296:	46c0      	nop			; (mov r8, r8)
 8013298:	e004      	b.n	80132a4 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801329a:	46c0      	nop			; (mov r8, r8)
 801329c:	e002      	b.n	80132a4 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801329e:	46c0      	nop			; (mov r8, r8)
 80132a0:	e000      	b.n	80132a4 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 80132a2:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 80132a4:	230f      	movs	r3, #15
 80132a6:	18fb      	adds	r3, r7, r3
 80132a8:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 80132aa:	0018      	movs	r0, r3
 80132ac:	46bd      	mov	sp, r7
 80132ae:	b004      	add	sp, #16
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	46c0      	nop			; (mov r8, r8)
 80132b4:	000002ed 	.word	0x000002ed

080132b8 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  /* Demo initialisation */
  DEMO_Init();
 80132bc:	f7f3 ff18 	bl	80070f0 <DEMO_Init>
  return USBPD_OK;
 80132c0:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 80132c2:	0018      	movs	r0, r3
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 80132d4:	4b06      	ldr	r3, [pc, #24]	; (80132f0 <USBPD_DPM_SetNotification_GUI+0x28>)
 80132d6:	68ba      	ldr	r2, [r7, #8]
 80132d8:	601a      	str	r2, [r3, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 80132da:	4b06      	ldr	r3, [pc, #24]	; (80132f4 <USBPD_DPM_SetNotification_GUI+0x2c>)
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	601a      	str	r2, [r3, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 80132e0:	4b05      	ldr	r3, [pc, #20]	; (80132f8 <USBPD_DPM_SetNotification_GUI+0x30>)
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	601a      	str	r2, [r3, #0]
}
 80132e6:	46c0      	nop			; (mov r8, r8)
 80132e8:	46bd      	mov	sp, r7
 80132ea:	b004      	add	sp, #16
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	46c0      	nop			; (mov r8, r8)
 80132f0:	20002d80 	.word	0x20002d80
 80132f4:	20002d84 	.word	0x20002d84
 80132f8:	20002d88 	.word	0x20002d88

080132fc <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 80132fc:	b590      	push	{r4, r7, lr}
 80132fe:	b093      	sub	sp, #76	; 0x4c
 8013300:	af02      	add	r7, sp, #8
 8013302:	0002      	movs	r2, r0
 8013304:	1dfb      	adds	r3, r7, #7
 8013306:	701a      	strb	r2, [r3, #0]
 8013308:	1dbb      	adds	r3, r7, #6
 801330a:	1c0a      	adds	r2, r1, #0
 801330c:	701a      	strb	r2, [r3, #0]
  switch(State)
 801330e:	1dbb      	adds	r3, r7, #6
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	2b02      	cmp	r3, #2
 8013314:	d001      	beq.n	801331a <USBPD_DPM_UserCableDetection+0x1e>
 8013316:	2b04      	cmp	r3, #4
 8013318:	d10b      	bne.n	8013332 <USBPD_DPM_UserCableDetection+0x36>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801331a:	4b22      	ldr	r3, [pc, #136]	; (80133a4 <USBPD_DPM_UserCableDetection+0xa8>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d013      	beq.n	801334a <USBPD_DPM_UserCableDetection+0x4e>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 8013322:	4b20      	ldr	r3, [pc, #128]	; (80133a4 <USBPD_DPM_UserCableDetection+0xa8>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	1dfa      	adds	r2, r7, #7
 8013328:	7810      	ldrb	r0, [r2, #0]
 801332a:	2200      	movs	r2, #0
 801332c:	2120      	movs	r1, #32
 801332e:	4798      	blx	r3
    }
    break;
 8013330:	e00b      	b.n	801334a <USBPD_DPM_UserCableDetection+0x4e>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 8013332:	4b1c      	ldr	r3, [pc, #112]	; (80133a4 <USBPD_DPM_UserCableDetection+0xa8>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d008      	beq.n	801334c <USBPD_DPM_UserCableDetection+0x50>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 801333a:	4b1a      	ldr	r3, [pc, #104]	; (80133a4 <USBPD_DPM_UserCableDetection+0xa8>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	1dfa      	adds	r2, r7, #7
 8013340:	7810      	ldrb	r0, [r2, #0]
 8013342:	4919      	ldr	r1, [pc, #100]	; (80133a8 <USBPD_DPM_UserCableDetection+0xac>)
 8013344:	2200      	movs	r2, #0
 8013346:	4798      	blx	r3
 8013348:	e000      	b.n	801334c <USBPD_DPM_UserCableDetection+0x50>
    break;
 801334a:	46c0      	nop			; (mov r8, r8)
    }
  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 801334c:	4a17      	ldr	r2, [pc, #92]	; (80133ac <USBPD_DPM_UserCableDetection+0xb0>)
 801334e:	240c      	movs	r4, #12
 8013350:	193b      	adds	r3, r7, r4
 8013352:	2132      	movs	r1, #50	; 0x32
 8013354:	0018      	movs	r0, r3
 8013356:	f007 fbab 	bl	801aab0 <sniprintf>
 801335a:	0002      	movs	r2, r0
 801335c:	213f      	movs	r1, #63	; 0x3f
 801335e:	187b      	adds	r3, r7, r1
 8013360:	701a      	strb	r2, [r3, #0]
 8013362:	187b      	adds	r3, r7, r1
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	2b31      	cmp	r3, #49	; 0x31
 8013368:	d80d      	bhi.n	8013386 <USBPD_DPM_UserCableDetection+0x8a>
 801336a:	193b      	adds	r3, r7, r4
 801336c:	0018      	movs	r0, r3
 801336e:	f7f2 ff2d 	bl	80061cc <strlen>
 8013372:	193a      	adds	r2, r7, r4
 8013374:	1dfb      	adds	r3, r7, #7
 8013376:	7819      	ldrb	r1, [r3, #0]
 8013378:	9000      	str	r0, [sp, #0]
 801337a:	0013      	movs	r3, r2
 801337c:	2200      	movs	r2, #0
 801337e:	2006      	movs	r0, #6
 8013380:	f7f9 fde6 	bl	800cf50 <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8013384:	e00a      	b.n	801339c <USBPD_DPM_UserCableDetection+0xa0>
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 8013386:	230c      	movs	r3, #12
 8013388:	18fa      	adds	r2, r7, r3
 801338a:	1dfb      	adds	r3, r7, #7
 801338c:	7819      	ldrb	r1, [r3, #0]
 801338e:	2332      	movs	r3, #50	; 0x32
 8013390:	9300      	str	r3, [sp, #0]
 8013392:	0013      	movs	r3, r2
 8013394:	2200      	movs	r2, #0
 8013396:	2006      	movs	r0, #6
 8013398:	f7f9 fdda 	bl	800cf50 <USBPD_TRACE_Add>
}
 801339c:	46c0      	nop			; (mov r8, r8)
 801339e:	46bd      	mov	sp, r7
 80133a0:	b011      	add	sp, #68	; 0x44
 80133a2:	bd90      	pop	{r4, r7, pc}
 80133a4:	20002d84 	.word	0x20002d84
 80133a8:	00008020 	.word	0x00008020
 80133ac:	0801b518 	.word	0x0801b518

080133b0 <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	0002      	movs	r2, r0
 80133b8:	1dfb      	adds	r3, r7, #7
 80133ba:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 80133bc:	46c0      	nop			; (mov r8, r8)
 80133be:	46bd      	mov	sp, r7
 80133c0:	b002      	add	sp, #8
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 80133c4:	b590      	push	{r4, r7, lr}
 80133c6:	b093      	sub	sp, #76	; 0x4c
 80133c8:	af02      	add	r7, sp, #8
 80133ca:	0002      	movs	r2, r0
 80133cc:	1dfb      	adds	r3, r7, #7
 80133ce:	701a      	strb	r2, [r3, #0]
 80133d0:	1dbb      	adds	r3, r7, #6
 80133d2:	1c0a      	adds	r2, r1, #0
 80133d4:	701a      	strb	r2, [r3, #0]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 80133d6:	4b2a      	ldr	r3, [pc, #168]	; (8013480 <USBPD_DPM_Notification+0xbc>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d008      	beq.n	80133f0 <USBPD_DPM_Notification+0x2c>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 80133de:	4b28      	ldr	r3, [pc, #160]	; (8013480 <USBPD_DPM_Notification+0xbc>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	1dba      	adds	r2, r7, #6
 80133e4:	7812      	ldrb	r2, [r2, #0]
 80133e6:	b291      	uxth	r1, r2
 80133e8:	1dfa      	adds	r2, r7, #7
 80133ea:	7812      	ldrb	r2, [r2, #0]
 80133ec:	0010      	movs	r0, r2
 80133ee:	4798      	blx	r3
  }
/* USER CODE BEGIN USBPD_DPM_Notification */
  /* Manage event notified by the stack? */
  switch(EventVal)
 80133f0:	1dbb      	adds	r3, r7, #6
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	2b10      	cmp	r3, #16
 80133f6:	d114      	bne.n	8013422 <USBPD_DPM_Notification+0x5e>
  {
    case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
    	char _str[50];
    	sprintf(_str,"POWER_EXPLICIT_CONTRACT notification as DPM notif");
 80133f8:	4a22      	ldr	r2, [pc, #136]	; (8013484 <USBPD_DPM_Notification+0xc0>)
 80133fa:	240c      	movs	r4, #12
 80133fc:	193b      	adds	r3, r7, r4
 80133fe:	0011      	movs	r1, r2
 8013400:	0018      	movs	r0, r3
 8013402:	f007 fb89 	bl	801ab18 <siprintf>
    	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t*)_str, strlen(_str));
 8013406:	193b      	adds	r3, r7, r4
 8013408:	0018      	movs	r0, r3
 801340a:	f7f2 fedf 	bl	80061cc <strlen>
 801340e:	193a      	adds	r2, r7, r4
 8013410:	1dfb      	adds	r3, r7, #7
 8013412:	7819      	ldrb	r1, [r3, #0]
 8013414:	9000      	str	r0, [sp, #0]
 8013416:	0013      	movs	r3, r2
 8013418:	2200      	movs	r2, #0
 801341a:	2006      	movs	r0, #6
 801341c:	f7f9 fd98 	bl	800cf50 <USBPD_TRACE_Add>
      break;
 8013420:	e029      	b.n	8013476 <USBPD_DPM_Notification+0xb2>
//    case USBPD_NOTIFY_DATAROLESWAP_DFP :
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 8013422:	1dbb      	adds	r3, r7, #6
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	4a18      	ldr	r2, [pc, #96]	; (8013488 <USBPD_DPM_Notification+0xc4>)
 8013428:	240c      	movs	r4, #12
 801342a:	1938      	adds	r0, r7, r4
 801342c:	2132      	movs	r1, #50	; 0x32
 801342e:	f007 fb3f 	bl	801aab0 <sniprintf>
 8013432:	0002      	movs	r2, r0
 8013434:	213f      	movs	r1, #63	; 0x3f
 8013436:	187b      	adds	r3, r7, r1
 8013438:	701a      	strb	r2, [r3, #0]
 801343a:	187b      	adds	r3, r7, r1
 801343c:	781b      	ldrb	r3, [r3, #0]
 801343e:	2b31      	cmp	r3, #49	; 0x31
 8013440:	d80d      	bhi.n	801345e <USBPD_DPM_Notification+0x9a>
 8013442:	193b      	adds	r3, r7, r4
 8013444:	0018      	movs	r0, r3
 8013446:	f7f2 fec1 	bl	80061cc <strlen>
 801344a:	193a      	adds	r2, r7, r4
 801344c:	1dfb      	adds	r3, r7, #7
 801344e:	7819      	ldrb	r1, [r3, #0]
 8013450:	9000      	str	r0, [sp, #0]
 8013452:	0013      	movs	r3, r2
 8013454:	2200      	movs	r2, #0
 8013456:	2006      	movs	r0, #6
 8013458:	f7f9 fd7a 	bl	800cf50 <USBPD_TRACE_Add>
      break;
 801345c:	e00a      	b.n	8013474 <USBPD_DPM_Notification+0xb0>
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801345e:	230c      	movs	r3, #12
 8013460:	18fa      	adds	r2, r7, r3
 8013462:	1dfb      	adds	r3, r7, #7
 8013464:	7819      	ldrb	r1, [r3, #0]
 8013466:	2332      	movs	r3, #50	; 0x32
 8013468:	9300      	str	r3, [sp, #0]
 801346a:	0013      	movs	r3, r2
 801346c:	2200      	movs	r2, #0
 801346e:	2006      	movs	r0, #6
 8013470:	f7f9 fd6e 	bl	800cf50 <USBPD_TRACE_Add>
      break;
 8013474:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8013476:	46c0      	nop			; (mov r8, r8)
 8013478:	46bd      	mov	sp, r7
 801347a:	b011      	add	sp, #68	; 0x44
 801347c:	bd90      	pop	{r4, r7, pc}
 801347e:	46c0      	nop			; (mov r8, r8)
 8013480:	20002d80 	.word	0x20002d80
 8013484:	0801b544 	.word	0x0801b544
 8013488:	0801b578 	.word	0x0801b578

0801348c <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801348c:	b590      	push	{r4, r7, lr}
 801348e:	b093      	sub	sp, #76	; 0x4c
 8013490:	af02      	add	r7, sp, #8
 8013492:	6039      	str	r1, [r7, #0]
 8013494:	0011      	movs	r1, r2
 8013496:	1dfb      	adds	r3, r7, #7
 8013498:	1c02      	adds	r2, r0, #0
 801349a:	701a      	strb	r2, [r3, #0]
 801349c:	1dbb      	adds	r3, r7, #6
 801349e:	1c0a      	adds	r2, r1, #0
 80134a0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 80134a2:	4a16      	ldr	r2, [pc, #88]	; (80134fc <USBPD_DPM_HardReset+0x70>)
 80134a4:	240c      	movs	r4, #12
 80134a6:	193b      	adds	r3, r7, r4
 80134a8:	2132      	movs	r1, #50	; 0x32
 80134aa:	0018      	movs	r0, r3
 80134ac:	f007 fb00 	bl	801aab0 <sniprintf>
 80134b0:	0002      	movs	r2, r0
 80134b2:	213f      	movs	r1, #63	; 0x3f
 80134b4:	187b      	adds	r3, r7, r1
 80134b6:	701a      	strb	r2, [r3, #0]
 80134b8:	187b      	adds	r3, r7, r1
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	2b31      	cmp	r3, #49	; 0x31
 80134be:	d80d      	bhi.n	80134dc <USBPD_DPM_HardReset+0x50>
 80134c0:	193b      	adds	r3, r7, r4
 80134c2:	0018      	movs	r0, r3
 80134c4:	f7f2 fe82 	bl	80061cc <strlen>
 80134c8:	193a      	adds	r2, r7, r4
 80134ca:	1dfb      	adds	r3, r7, #7
 80134cc:	7819      	ldrb	r1, [r3, #0]
 80134ce:	9000      	str	r0, [sp, #0]
 80134d0:	0013      	movs	r3, r2
 80134d2:	2200      	movs	r2, #0
 80134d4:	2006      	movs	r0, #6
 80134d6:	f7f9 fd3b 	bl	800cf50 <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_HardReset */
}
 80134da:	e00a      	b.n	80134f2 <USBPD_DPM_HardReset+0x66>
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 80134dc:	230c      	movs	r3, #12
 80134de:	18fa      	adds	r2, r7, r3
 80134e0:	1dfb      	adds	r3, r7, #7
 80134e2:	7819      	ldrb	r1, [r3, #0]
 80134e4:	2332      	movs	r3, #50	; 0x32
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	0013      	movs	r3, r2
 80134ea:	2200      	movs	r2, #0
 80134ec:	2006      	movs	r0, #6
 80134ee:	f7f9 fd2f 	bl	800cf50 <USBPD_TRACE_Add>
}
 80134f2:	46c0      	nop			; (mov r8, r8)
 80134f4:	46bd      	mov	sp, r7
 80134f6:	b011      	add	sp, #68	; 0x44
 80134f8:	bd90      	pop	{r4, r7, pc}
 80134fa:	46c0      	nop			; (mov r8, r8)
 80134fc:	0801b59c 	.word	0x0801b59c

08013500 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8013500:	b590      	push	{r4, r7, lr}
 8013502:	b097      	sub	sp, #92	; 0x5c
 8013504:	af02      	add	r7, sp, #8
 8013506:	60ba      	str	r2, [r7, #8]
 8013508:	607b      	str	r3, [r7, #4]
 801350a:	230f      	movs	r3, #15
 801350c:	18fb      	adds	r3, r7, r3
 801350e:	1c02      	adds	r2, r0, #0
 8013510:	701a      	strb	r2, [r3, #0]
 8013512:	200e      	movs	r0, #14
 8013514:	183b      	adds	r3, r7, r0
 8013516:	1c0a      	adds	r2, r1, #0
 8013518:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801351a:	183b      	adds	r3, r7, r0
 801351c:	781b      	ldrb	r3, [r3, #0]
 801351e:	2b01      	cmp	r3, #1
 8013520:	d002      	beq.n	8013528 <USBPD_DPM_GetDataInfo+0x28>
 8013522:	2b0a      	cmp	r3, #10
 8013524:	d011      	beq.n	801354a <USBPD_DPM_GetDataInfo+0x4a>
 8013526:	e01e      	b.n	8013566 <USBPD_DPM_GetDataInfo+0x66>
  {

  case USBPD_CORE_DATATYPE_SNK_PDO: /*!< Handling of port Sink PDO, requested by get sink capa*/
  USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 8013528:	687c      	ldr	r4, [r7, #4]
 801352a:	68ba      	ldr	r2, [r7, #8]
 801352c:	230e      	movs	r3, #14
 801352e:	18fb      	adds	r3, r7, r3
 8013530:	7819      	ldrb	r1, [r3, #0]
 8013532:	230f      	movs	r3, #15
 8013534:	18fb      	adds	r3, r7, r3
 8013536:	7818      	ldrb	r0, [r3, #0]
 8013538:	0023      	movs	r3, r4
 801353a:	f7ff fe4f 	bl	80131dc <USBPD_PWR_IF_GetPortPDOs>
  *Size *= 4;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	009a      	lsls	r2, r3, #2
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	601a      	str	r2, [r3, #0]
  break;
 8013548:	e03a      	b.n	80135c0 <USBPD_DPM_GetDataInfo+0xc0>

  case USBPD_CORE_PPS_STATUS :
	  {
		/* Get current drawn by sink */
		USBPD_PPSSDB_TypeDef pps_status = {0};
 801354a:	2300      	movs	r3, #0
 801354c:	64bb      	str	r3, [r7, #72]	; 0x48
		/*
		pps_status.fields.OutputVoltageIn20mVunits  = 0xFFFF;
		pps_status.fields.OutputCurrentIn50mAunits  = 0xFF;
		pps_status.fields.RealTimeFlags             = USBPD_PPS_REALTIMEFLAGS_PTF_NOT_SUPPORTED | USBPD_PPS_REALTIMEFLAGS_OMF_DISABLED;*/

		*Size = 4;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2204      	movs	r2, #4
 8013552:	601a      	str	r2, [r3, #0]
		(void)memcpy((uint8_t*)Ptr, (uint8_t *)&pps_status.d32, *Size);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681a      	ldr	r2, [r3, #0]
 8013558:	2348      	movs	r3, #72	; 0x48
 801355a:	18f9      	adds	r1, r7, r3
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	0018      	movs	r0, r3
 8013560:	f007 fbae 	bl	801acc0 <memcpy>
	  }
	  break;
 8013564:	e02c      	b.n	80135c0 <USBPD_DPM_GetDataInfo+0xc0>
//  case USBPD_CORE_BATTERY_STATUS:             /*!< Retrieve of Battery status message content          */
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 8013566:	230e      	movs	r3, #14
 8013568:	18fb      	adds	r3, r7, r3
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	4a16      	ldr	r2, [pc, #88]	; (80135c8 <USBPD_DPM_GetDataInfo+0xc8>)
 801356e:	2414      	movs	r4, #20
 8013570:	1938      	adds	r0, r7, r4
 8013572:	2132      	movs	r1, #50	; 0x32
 8013574:	f007 fa9c 	bl	801aab0 <sniprintf>
 8013578:	0002      	movs	r2, r0
 801357a:	214f      	movs	r1, #79	; 0x4f
 801357c:	187b      	adds	r3, r7, r1
 801357e:	701a      	strb	r2, [r3, #0]
 8013580:	187b      	adds	r3, r7, r1
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	2b31      	cmp	r3, #49	; 0x31
 8013586:	d80e      	bhi.n	80135a6 <USBPD_DPM_GetDataInfo+0xa6>
 8013588:	193b      	adds	r3, r7, r4
 801358a:	0018      	movs	r0, r3
 801358c:	f7f2 fe1e 	bl	80061cc <strlen>
 8013590:	193a      	adds	r2, r7, r4
 8013592:	230f      	movs	r3, #15
 8013594:	18fb      	adds	r3, r7, r3
 8013596:	7819      	ldrb	r1, [r3, #0]
 8013598:	9000      	str	r0, [sp, #0]
 801359a:	0013      	movs	r3, r2
 801359c:	2200      	movs	r2, #0
 801359e:	2006      	movs	r0, #6
 80135a0:	f7f9 fcd6 	bl	800cf50 <USBPD_TRACE_Add>
    break;
 80135a4:	e00b      	b.n	80135be <USBPD_DPM_GetDataInfo+0xbe>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 80135a6:	2314      	movs	r3, #20
 80135a8:	18fa      	adds	r2, r7, r3
 80135aa:	230f      	movs	r3, #15
 80135ac:	18fb      	adds	r3, r7, r3
 80135ae:	7819      	ldrb	r1, [r3, #0]
 80135b0:	2332      	movs	r3, #50	; 0x32
 80135b2:	9300      	str	r3, [sp, #0]
 80135b4:	0013      	movs	r3, r2
 80135b6:	2200      	movs	r2, #0
 80135b8:	2006      	movs	r0, #6
 80135ba:	f7f9 fcc9 	bl	800cf50 <USBPD_TRACE_Add>
    break;
 80135be:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 80135c0:	46c0      	nop			; (mov r8, r8)
 80135c2:	46bd      	mov	sp, r7
 80135c4:	b015      	add	sp, #84	; 0x54
 80135c6:	bd90      	pop	{r4, r7, pc}
 80135c8:	0801b5c0 	.word	0x0801b5c0

080135cc <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 80135cc:	b5b0      	push	{r4, r5, r7, lr}
 80135ce:	b094      	sub	sp, #80	; 0x50
 80135d0:	af02      	add	r7, sp, #8
 80135d2:	60ba      	str	r2, [r7, #8]
 80135d4:	607b      	str	r3, [r7, #4]
 80135d6:	230f      	movs	r3, #15
 80135d8:	18fb      	adds	r3, r7, r3
 80135da:	1c02      	adds	r2, r0, #0
 80135dc:	701a      	strb	r2, [r3, #0]
 80135de:	200e      	movs	r0, #14
 80135e0:	183b      	adds	r3, r7, r0
 80135e2:	1c0a      	adds	r2, r1, #0
 80135e4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 80135e6:	183b      	adds	r3, r7, r0
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	2b04      	cmp	r3, #4
 80135ec:	d002      	beq.n	80135f4 <USBPD_DPM_SetDataInfo+0x28>
 80135ee:	2b0a      	cmp	r3, #10
 80135f0:	d009      	beq.n	8013606 <USBPD_DPM_SetDataInfo+0x3a>
 80135f2:	e01b      	b.n	801362c <USBPD_DPM_SetDataInfo+0x60>
  {
  /* Case Received Source PDO values Data information :*/
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO:         /*!< Storage of Received Source PDO values        */
       USBPD_USER_SERV_StoreSRCPDO(PortNum, Ptr, Size);
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	68b9      	ldr	r1, [r7, #8]
 80135f8:	230f      	movs	r3, #15
 80135fa:	18fb      	adds	r3, r7, r3
 80135fc:	781b      	ldrb	r3, [r3, #0]
 80135fe:	0018      	movs	r0, r3
 8013600:	f001 f974 	bl	80148ec <USBPD_USER_SERV_StoreSRCPDO>
       break;
 8013604:	e03f      	b.n	8013686 <USBPD_DPM_SetDataInfo+0xba>

    case USBPD_CORE_PPS_STATUS :
	  {
		uint8_t*  ext_capa;
		ext_capa = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvPPSStatus;
 8013606:	230f      	movs	r3, #15
 8013608:	18fb      	adds	r3, r7, r3
 801360a:	781a      	ldrb	r2, [r3, #0]
 801360c:	0013      	movs	r3, r2
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	189b      	adds	r3, r3, r2
 8013612:	011b      	lsls	r3, r3, #4
 8013614:	3320      	adds	r3, #32
 8013616:	001a      	movs	r2, r3
 8013618:	4b25      	ldr	r3, [pc, #148]	; (80136b0 <USBPD_DPM_SetDataInfo+0xe4>)
 801361a:	18d3      	adds	r3, r2, r3
 801361c:	647b      	str	r3, [r7, #68]	; 0x44
		memcpy(ext_capa, Ptr, Size);
 801361e:	687a      	ldr	r2, [r7, #4]
 8013620:	68b9      	ldr	r1, [r7, #8]
 8013622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013624:	0018      	movs	r0, r3
 8013626:	f007 fb4b 	bl	801acc0 <memcpy>
	  }
	  break;
 801362a:	e02c      	b.n	8013686 <USBPD_DPM_SetDataInfo+0xba>
//  case USBPD_CORE_GET_BATTERY_CAPABILITY:     /*!< Storing of received Get Battery capability message content*/
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801362c:	230e      	movs	r3, #14
 801362e:	18fb      	adds	r3, r7, r3
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	4a20      	ldr	r2, [pc, #128]	; (80136b4 <USBPD_DPM_SetDataInfo+0xe8>)
 8013634:	2410      	movs	r4, #16
 8013636:	1938      	adds	r0, r7, r4
 8013638:	2132      	movs	r1, #50	; 0x32
 801363a:	f007 fa39 	bl	801aab0 <sniprintf>
 801363e:	0002      	movs	r2, r0
 8013640:	2143      	movs	r1, #67	; 0x43
 8013642:	187b      	adds	r3, r7, r1
 8013644:	701a      	strb	r2, [r3, #0]
 8013646:	187b      	adds	r3, r7, r1
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	2b31      	cmp	r3, #49	; 0x31
 801364c:	d80e      	bhi.n	801366c <USBPD_DPM_SetDataInfo+0xa0>
 801364e:	193b      	adds	r3, r7, r4
 8013650:	0018      	movs	r0, r3
 8013652:	f7f2 fdbb 	bl	80061cc <strlen>
 8013656:	193a      	adds	r2, r7, r4
 8013658:	230f      	movs	r3, #15
 801365a:	18fb      	adds	r3, r7, r3
 801365c:	7819      	ldrb	r1, [r3, #0]
 801365e:	9000      	str	r0, [sp, #0]
 8013660:	0013      	movs	r3, r2
 8013662:	2200      	movs	r2, #0
 8013664:	2006      	movs	r0, #6
 8013666:	f7f9 fc73 	bl	800cf50 <USBPD_TRACE_Add>
    break;
 801366a:	e00b      	b.n	8013684 <USBPD_DPM_SetDataInfo+0xb8>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801366c:	2310      	movs	r3, #16
 801366e:	18fa      	adds	r2, r7, r3
 8013670:	230f      	movs	r3, #15
 8013672:	18fb      	adds	r3, r7, r3
 8013674:	7819      	ldrb	r1, [r3, #0]
 8013676:	2332      	movs	r3, #50	; 0x32
 8013678:	9300      	str	r3, [sp, #0]
 801367a:	0013      	movs	r3, r2
 801367c:	2200      	movs	r2, #0
 801367e:	2006      	movs	r0, #6
 8013680:	f7f9 fc66 	bl	800cf50 <USBPD_TRACE_Add>
    break;
 8013684:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 8013686:	4b0c      	ldr	r3, [pc, #48]	; (80136b8 <USBPD_DPM_SetDataInfo+0xec>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00b      	beq.n	80136a6 <USBPD_DPM_SetDataInfo+0xda>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 801368e:	4b0a      	ldr	r3, [pc, #40]	; (80136b8 <USBPD_DPM_SetDataInfo+0xec>)
 8013690:	681c      	ldr	r4, [r3, #0]
 8013692:	687d      	ldr	r5, [r7, #4]
 8013694:	68ba      	ldr	r2, [r7, #8]
 8013696:	230e      	movs	r3, #14
 8013698:	18fb      	adds	r3, r7, r3
 801369a:	7819      	ldrb	r1, [r3, #0]
 801369c:	230f      	movs	r3, #15
 801369e:	18fb      	adds	r3, r7, r3
 80136a0:	7818      	ldrb	r0, [r3, #0]
 80136a2:	002b      	movs	r3, r5
 80136a4:	47a0      	blx	r4
  }
}
 80136a6:	46c0      	nop			; (mov r8, r8)
 80136a8:	46bd      	mov	sp, r7
 80136aa:	b012      	add	sp, #72	; 0x48
 80136ac:	bdb0      	pop	{r4, r5, r7, pc}
 80136ae:	46c0      	nop			; (mov r8, r8)
 80136b0:	20002d90 	.word	0x20002d90
 80136b4:	0801b5e8 	.word	0x0801b5e8
 80136b8:	20002d88 	.word	0x20002d88

080136bc <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 80136bc:	b590      	push	{r4, r7, lr}
 80136be:	b085      	sub	sp, #20
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60b9      	str	r1, [r7, #8]
 80136c4:	607a      	str	r2, [r7, #4]
 80136c6:	240f      	movs	r4, #15
 80136c8:	193b      	adds	r3, r7, r4
 80136ca:	1c02      	adds	r2, r0, #0
 80136cc:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */

	/* Variable PDO*/
	USBPD_USER_SERV_EvaluateCapa(PortNum, PtrRequestData, PtrPowerObjectType);
 80136ce:	687a      	ldr	r2, [r7, #4]
 80136d0:	68b9      	ldr	r1, [r7, #8]
 80136d2:	193b      	adds	r3, r7, r4
 80136d4:	781b      	ldrb	r3, [r3, #0]
 80136d6:	0018      	movs	r0, r3
 80136d8:	f001 f948 	bl	801496c <USBPD_USER_SERV_EvaluateCapa>
	*PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
	*PtrRequestData = rdo.d32;*/


/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 80136dc:	46c0      	nop			; (mov r8, r8)
 80136de:	46bd      	mov	sp, r7
 80136e0:	b005      	add	sp, #20
 80136e2:	bd90      	pop	{r4, r7, pc}

080136e4 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 80136e4:	b590      	push	{r4, r7, lr}
 80136e6:	b083      	sub	sp, #12
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	0004      	movs	r4, r0
 80136ec:	0008      	movs	r0, r1
 80136ee:	603a      	str	r2, [r7, #0]
 80136f0:	0019      	movs	r1, r3
 80136f2:	1dfb      	adds	r3, r7, #7
 80136f4:	1c22      	adds	r2, r4, #0
 80136f6:	701a      	strb	r2, [r3, #0]
 80136f8:	1dbb      	adds	r3, r7, #6
 80136fa:	1c02      	adds	r2, r0, #0
 80136fc:	701a      	strb	r2, [r3, #0]
 80136fe:	1d3b      	adds	r3, r7, #4
 8013700:	1c0a      	adds	r2, r1, #0
 8013702:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8013704:	46c0      	nop			; (mov r8, r8)
 8013706:	46bd      	mov	sp, r7
 8013708:	b003      	add	sp, #12
 801370a:	bd90      	pop	{r4, r7, pc}

0801370c <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b082      	sub	sp, #8
 8013710:	af00      	add	r7, sp, #0
 8013712:	0002      	movs	r2, r0
 8013714:	1dfb      	adds	r3, r7, #7
 8013716:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8013718:	1dfb      	adds	r3, r7, #7
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	0018      	movs	r0, r3
 801371e:	f7ec fdbd 	bl	800029c <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8013722:	46c0      	nop			; (mov r8, r8)
 8013724:	46bd      	mov	sp, r7
 8013726:	b002      	add	sp, #8
 8013728:	bd80      	pop	{r7, pc}
	...

0801372c <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b084      	sub	sp, #16
 8013730:	af00      	add	r7, sp, #0
 8013732:	0002      	movs	r2, r0
 8013734:	1dfb      	adds	r3, r7, #7
 8013736:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8013738:	230f      	movs	r3, #15
 801373a:	18fb      	adds	r3, r7, r3
 801373c:	220c      	movs	r2, #12
 801373e:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 8013740:	1dfb      	adds	r3, r7, #7
 8013742:	781a      	ldrb	r2, [r3, #0]
 8013744:	4b2c      	ldr	r3, [pc, #176]	; (80137f8 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8013746:	2174      	movs	r1, #116	; 0x74
 8013748:	434a      	muls	r2, r1
 801374a:	5cd3      	ldrb	r3, [r2, r3]
 801374c:	07db      	lsls	r3, r3, #31
 801374e:	0fdb      	lsrs	r3, r3, #31
 8013750:	b2db      	uxtb	r3, r3
 8013752:	2b00      	cmp	r3, #0
 8013754:	d015      	beq.n	8013782 <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 8013756:	1dfb      	adds	r3, r7, #7
 8013758:	781a      	ldrb	r2, [r3, #0]
 801375a:	4b27      	ldr	r3, [pc, #156]	; (80137f8 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801375c:	2174      	movs	r1, #116	; 0x74
 801375e:	434a      	muls	r2, r1
 8013760:	5cd3      	ldrb	r3, [r2, r3]
 8013762:	075b      	lsls	r3, r3, #29
 8013764:	0fdb      	lsrs	r3, r3, #31
 8013766:	b2db      	uxtb	r3, r3
 8013768:	2b00      	cmp	r3, #0
 801376a:	d10f      	bne.n	801378c <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801376c:	1dfb      	adds	r3, r7, #7
 801376e:	781a      	ldrb	r2, [r3, #0]
 8013770:	4b21      	ldr	r3, [pc, #132]	; (80137f8 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8013772:	2174      	movs	r1, #116	; 0x74
 8013774:	434a      	muls	r2, r1
 8013776:	5cd3      	ldrb	r3, [r2, r3]
 8013778:	071b      	lsls	r3, r3, #28
 801377a:	0fdb      	lsrs	r3, r3, #31
 801377c:	b2db      	uxtb	r3, r3
 801377e:	2b00      	cmp	r3, #0
 8013780:	d104      	bne.n	801378c <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 8013782:	230f      	movs	r3, #15
 8013784:	18fb      	adds	r3, r7, r3
 8013786:	2201      	movs	r2, #1
 8013788:	701a      	strb	r2, [r3, #0]
 801378a:	e02d      	b.n	80137e8 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801378c:	1dfb      	adds	r3, r7, #7
 801378e:	781a      	ldrb	r2, [r3, #0]
 8013790:	4b19      	ldr	r3, [pc, #100]	; (80137f8 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8013792:	2174      	movs	r1, #116	; 0x74
 8013794:	434a      	muls	r2, r1
 8013796:	5cd3      	ldrb	r3, [r2, r3]
 8013798:	075b      	lsls	r3, r3, #29
 801379a:	0fdb      	lsrs	r3, r3, #31
 801379c:	b2db      	uxtb	r3, r3
 801379e:	2b01      	cmp	r3, #1
 80137a0:	d109      	bne.n	80137b6 <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 80137a2:	1dfb      	adds	r3, r7, #7
 80137a4:	781a      	ldrb	r2, [r3, #0]
 80137a6:	4b15      	ldr	r3, [pc, #84]	; (80137fc <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 80137a8:	0092      	lsls	r2, r2, #2
 80137aa:	5cd3      	ldrb	r3, [r2, r3]
 80137ac:	071b      	lsls	r3, r3, #28
 80137ae:	0fdb      	lsrs	r3, r3, #31
 80137b0:	b2db      	uxtb	r3, r3
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d014      	beq.n	80137e0 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 80137b6:	1dfb      	adds	r3, r7, #7
 80137b8:	781a      	ldrb	r2, [r3, #0]
 80137ba:	4b0f      	ldr	r3, [pc, #60]	; (80137f8 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 80137bc:	2174      	movs	r1, #116	; 0x74
 80137be:	434a      	muls	r2, r1
 80137c0:	5cd3      	ldrb	r3, [r2, r3]
 80137c2:	071b      	lsls	r3, r3, #28
 80137c4:	0fdb      	lsrs	r3, r3, #31
 80137c6:	b2db      	uxtb	r3, r3
 80137c8:	2b01      	cmp	r3, #1
 80137ca:	d10d      	bne.n	80137e8 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 80137cc:	1dfb      	adds	r3, r7, #7
 80137ce:	781a      	ldrb	r2, [r3, #0]
 80137d0:	4b0a      	ldr	r3, [pc, #40]	; (80137fc <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 80137d2:	0092      	lsls	r2, r2, #2
 80137d4:	5cd3      	ldrb	r3, [r2, r3]
 80137d6:	071b      	lsls	r3, r3, #28
 80137d8:	0fdb      	lsrs	r3, r3, #31
 80137da:	b2db      	uxtb	r3, r3
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d103      	bne.n	80137e8 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 80137e0:	230f      	movs	r3, #15
 80137e2:	18fb      	adds	r3, r7, r3
 80137e4:	220a      	movs	r2, #10
 80137e6:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 80137e8:	230f      	movs	r3, #15
 80137ea:	18fb      	adds	r3, r7, r3
 80137ec:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 80137ee:	0018      	movs	r0, r3
 80137f0:	46bd      	mov	sp, r7
 80137f2:	b004      	add	sp, #16
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	46c0      	nop			; (mov r8, r8)
 80137f8:	20000050 	.word	0x20000050
 80137fc:	20002d7c 	.word	0x20002d7c

08013800 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b082      	sub	sp, #8
 8013804:	af00      	add	r7, sp, #0
 8013806:	0002      	movs	r2, r0
 8013808:	1dfb      	adds	r3, r7, #7
 801380a:	701a      	strb	r2, [r3, #0]
 801380c:	1dbb      	adds	r3, r7, #6
 801380e:	1c0a      	adds	r2, r1, #0
 8013810:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8013812:	1dbb      	adds	r3, r7, #6
 8013814:	781a      	ldrb	r2, [r3, #0]
 8013816:	1dfb      	adds	r3, r7, #7
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	0011      	movs	r1, r2
 801381c:	0018      	movs	r0, r3
 801381e:	f7ff fc9f 	bl	8013160 <USBPD_PWR_IF_SupplyReady>
 8013822:	0003      	movs	r3, r0
 8013824:	425a      	negs	r2, r3
 8013826:	4153      	adcs	r3, r2
 8013828:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801382a:	0018      	movs	r0, r3
 801382c:	46bd      	mov	sp, r7
 801382e:	b002      	add	sp, #8
 8013830:	bd80      	pop	{r7, pc}
	...

08013834 <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 8013834:	b5b0      	push	{r4, r5, r7, lr}
 8013836:	b092      	sub	sp, #72	; 0x48
 8013838:	af02      	add	r7, sp, #8
 801383a:	0002      	movs	r2, r0
 801383c:	1dfb      	adds	r3, r7, #7
 801383e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 8013840:	253f      	movs	r5, #63	; 0x3f
 8013842:	197c      	adds	r4, r7, r5
 8013844:	1dfb      	adds	r3, r7, #7
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	0018      	movs	r0, r3
 801384a:	f7ec fe35 	bl	80004b8 <USBPD_PE_Request_HardReset>
 801384e:	0003      	movs	r3, r0
 8013850:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 8013852:	197b      	adds	r3, r7, r5
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d027      	beq.n	80138aa <USBPD_DPM_RequestHardReset+0x76>
 801385a:	4a17      	ldr	r2, [pc, #92]	; (80138b8 <USBPD_DPM_RequestHardReset+0x84>)
 801385c:	240c      	movs	r4, #12
 801385e:	193b      	adds	r3, r7, r4
 8013860:	2132      	movs	r1, #50	; 0x32
 8013862:	0018      	movs	r0, r3
 8013864:	f007 f924 	bl	801aab0 <sniprintf>
 8013868:	0002      	movs	r2, r0
 801386a:	213e      	movs	r1, #62	; 0x3e
 801386c:	187b      	adds	r3, r7, r1
 801386e:	701a      	strb	r2, [r3, #0]
 8013870:	187b      	adds	r3, r7, r1
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	2b31      	cmp	r3, #49	; 0x31
 8013876:	d80d      	bhi.n	8013894 <USBPD_DPM_RequestHardReset+0x60>
 8013878:	193b      	adds	r3, r7, r4
 801387a:	0018      	movs	r0, r3
 801387c:	f7f2 fca6 	bl	80061cc <strlen>
 8013880:	193a      	adds	r2, r7, r4
 8013882:	1dfb      	adds	r3, r7, #7
 8013884:	7819      	ldrb	r1, [r3, #0]
 8013886:	9000      	str	r0, [sp, #0]
 8013888:	0013      	movs	r3, r2
 801388a:	2200      	movs	r2, #0
 801388c:	2006      	movs	r0, #6
 801388e:	f7f9 fb5f 	bl	800cf50 <USBPD_TRACE_Add>
 8013892:	e00a      	b.n	80138aa <USBPD_DPM_RequestHardReset+0x76>
 8013894:	230c      	movs	r3, #12
 8013896:	18fa      	adds	r2, r7, r3
 8013898:	1dfb      	adds	r3, r7, #7
 801389a:	7819      	ldrb	r1, [r3, #0]
 801389c:	2332      	movs	r3, #50	; 0x32
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	0013      	movs	r3, r2
 80138a2:	2200      	movs	r2, #0
 80138a4:	2006      	movs	r0, #6
 80138a6:	f7f9 fb53 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 80138aa:	233f      	movs	r3, #63	; 0x3f
 80138ac:	18fb      	adds	r3, r7, r3
 80138ae:	781b      	ldrb	r3, [r3, #0]
}
 80138b0:	0018      	movs	r0, r3
 80138b2:	46bd      	mov	sp, r7
 80138b4:	b010      	add	sp, #64	; 0x40
 80138b6:	bdb0      	pop	{r4, r5, r7, pc}
 80138b8:	0801b610 	.word	0x0801b610

080138bc <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 80138bc:	b5b0      	push	{r4, r5, r7, lr}
 80138be:	b092      	sub	sp, #72	; 0x48
 80138c0:	af02      	add	r7, sp, #8
 80138c2:	0002      	movs	r2, r0
 80138c4:	1dfb      	adds	r3, r7, #7
 80138c6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 80138c8:	253f      	movs	r5, #63	; 0x3f
 80138ca:	197c      	adds	r4, r7, r5
 80138cc:	1dfb      	adds	r3, r7, #7
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	0018      	movs	r0, r3
 80138d2:	f7ec fdfd 	bl	80004d0 <USBPD_PE_Request_CableReset>
 80138d6:	0003      	movs	r3, r0
 80138d8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 80138da:	197b      	adds	r3, r7, r5
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d027      	beq.n	8013932 <USBPD_DPM_RequestCableReset+0x76>
 80138e2:	4a17      	ldr	r2, [pc, #92]	; (8013940 <USBPD_DPM_RequestCableReset+0x84>)
 80138e4:	240c      	movs	r4, #12
 80138e6:	193b      	adds	r3, r7, r4
 80138e8:	2132      	movs	r1, #50	; 0x32
 80138ea:	0018      	movs	r0, r3
 80138ec:	f007 f8e0 	bl	801aab0 <sniprintf>
 80138f0:	0002      	movs	r2, r0
 80138f2:	213e      	movs	r1, #62	; 0x3e
 80138f4:	187b      	adds	r3, r7, r1
 80138f6:	701a      	strb	r2, [r3, #0]
 80138f8:	187b      	adds	r3, r7, r1
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	2b31      	cmp	r3, #49	; 0x31
 80138fe:	d80d      	bhi.n	801391c <USBPD_DPM_RequestCableReset+0x60>
 8013900:	193b      	adds	r3, r7, r4
 8013902:	0018      	movs	r0, r3
 8013904:	f7f2 fc62 	bl	80061cc <strlen>
 8013908:	193a      	adds	r2, r7, r4
 801390a:	1dfb      	adds	r3, r7, #7
 801390c:	7819      	ldrb	r1, [r3, #0]
 801390e:	9000      	str	r0, [sp, #0]
 8013910:	0013      	movs	r3, r2
 8013912:	2200      	movs	r2, #0
 8013914:	2006      	movs	r0, #6
 8013916:	f7f9 fb1b 	bl	800cf50 <USBPD_TRACE_Add>
 801391a:	e00a      	b.n	8013932 <USBPD_DPM_RequestCableReset+0x76>
 801391c:	230c      	movs	r3, #12
 801391e:	18fa      	adds	r2, r7, r3
 8013920:	1dfb      	adds	r3, r7, #7
 8013922:	7819      	ldrb	r1, [r3, #0]
 8013924:	2332      	movs	r3, #50	; 0x32
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	0013      	movs	r3, r2
 801392a:	2200      	movs	r2, #0
 801392c:	2006      	movs	r0, #6
 801392e:	f7f9 fb0f 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8013932:	233f      	movs	r3, #63	; 0x3f
 8013934:	18fb      	adds	r3, r7, r3
 8013936:	781b      	ldrb	r3, [r3, #0]
}
 8013938:	0018      	movs	r0, r3
 801393a:	46bd      	mov	sp, r7
 801393c:	b010      	add	sp, #64	; 0x40
 801393e:	bdb0      	pop	{r4, r5, r7, pc}
 8013940:	0801b638 	.word	0x0801b638

08013944 <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 8013944:	b5b0      	push	{r4, r5, r7, lr}
 8013946:	b092      	sub	sp, #72	; 0x48
 8013948:	af02      	add	r7, sp, #8
 801394a:	0002      	movs	r2, r0
 801394c:	1dfb      	adds	r3, r7, #7
 801394e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 8013950:	253f      	movs	r5, #63	; 0x3f
 8013952:	197c      	adds	r4, r7, r5
 8013954:	1dfb      	adds	r3, r7, #7
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	2200      	movs	r2, #0
 801395a:	2102      	movs	r1, #2
 801395c:	0018      	movs	r0, r3
 801395e:	f7ec fdd1 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 8013962:	0003      	movs	r3, r0
 8013964:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 8013966:	197b      	adds	r3, r7, r5
 8013968:	781b      	ldrb	r3, [r3, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d027      	beq.n	80139be <USBPD_DPM_RequestGotoMin+0x7a>
 801396e:	4a17      	ldr	r2, [pc, #92]	; (80139cc <USBPD_DPM_RequestGotoMin+0x88>)
 8013970:	240c      	movs	r4, #12
 8013972:	193b      	adds	r3, r7, r4
 8013974:	2132      	movs	r1, #50	; 0x32
 8013976:	0018      	movs	r0, r3
 8013978:	f007 f89a 	bl	801aab0 <sniprintf>
 801397c:	0002      	movs	r2, r0
 801397e:	213e      	movs	r1, #62	; 0x3e
 8013980:	187b      	adds	r3, r7, r1
 8013982:	701a      	strb	r2, [r3, #0]
 8013984:	187b      	adds	r3, r7, r1
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	2b31      	cmp	r3, #49	; 0x31
 801398a:	d80d      	bhi.n	80139a8 <USBPD_DPM_RequestGotoMin+0x64>
 801398c:	193b      	adds	r3, r7, r4
 801398e:	0018      	movs	r0, r3
 8013990:	f7f2 fc1c 	bl	80061cc <strlen>
 8013994:	193a      	adds	r2, r7, r4
 8013996:	1dfb      	adds	r3, r7, #7
 8013998:	7819      	ldrb	r1, [r3, #0]
 801399a:	9000      	str	r0, [sp, #0]
 801399c:	0013      	movs	r3, r2
 801399e:	2200      	movs	r2, #0
 80139a0:	2006      	movs	r0, #6
 80139a2:	f7f9 fad5 	bl	800cf50 <USBPD_TRACE_Add>
 80139a6:	e00a      	b.n	80139be <USBPD_DPM_RequestGotoMin+0x7a>
 80139a8:	230c      	movs	r3, #12
 80139aa:	18fa      	adds	r2, r7, r3
 80139ac:	1dfb      	adds	r3, r7, #7
 80139ae:	7819      	ldrb	r1, [r3, #0]
 80139b0:	2332      	movs	r3, #50	; 0x32
 80139b2:	9300      	str	r3, [sp, #0]
 80139b4:	0013      	movs	r3, r2
 80139b6:	2200      	movs	r2, #0
 80139b8:	2006      	movs	r0, #6
 80139ba:	f7f9 fac9 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 80139be:	233f      	movs	r3, #63	; 0x3f
 80139c0:	18fb      	adds	r3, r7, r3
 80139c2:	781b      	ldrb	r3, [r3, #0]
}
 80139c4:	0018      	movs	r0, r3
 80139c6:	46bd      	mov	sp, r7
 80139c8:	b010      	add	sp, #64	; 0x40
 80139ca:	bdb0      	pop	{r4, r5, r7, pc}
 80139cc:	0801b660 	.word	0x0801b660

080139d0 <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 80139d0:	b5b0      	push	{r4, r5, r7, lr}
 80139d2:	b092      	sub	sp, #72	; 0x48
 80139d4:	af02      	add	r7, sp, #8
 80139d6:	0002      	movs	r2, r0
 80139d8:	1dfb      	adds	r3, r7, #7
 80139da:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 80139dc:	253f      	movs	r5, #63	; 0x3f
 80139de:	197c      	adds	r4, r7, r5
 80139e0:	1dfb      	adds	r3, r7, #7
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	2200      	movs	r2, #0
 80139e6:	2105      	movs	r1, #5
 80139e8:	0018      	movs	r0, r3
 80139ea:	f7ec fd8b 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 80139ee:	0003      	movs	r3, r0
 80139f0:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 80139f2:	197b      	adds	r3, r7, r5
 80139f4:	781b      	ldrb	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d027      	beq.n	8013a4a <USBPD_DPM_RequestPing+0x7a>
 80139fa:	4a17      	ldr	r2, [pc, #92]	; (8013a58 <USBPD_DPM_RequestPing+0x88>)
 80139fc:	240c      	movs	r4, #12
 80139fe:	193b      	adds	r3, r7, r4
 8013a00:	2132      	movs	r1, #50	; 0x32
 8013a02:	0018      	movs	r0, r3
 8013a04:	f007 f854 	bl	801aab0 <sniprintf>
 8013a08:	0002      	movs	r2, r0
 8013a0a:	213e      	movs	r1, #62	; 0x3e
 8013a0c:	187b      	adds	r3, r7, r1
 8013a0e:	701a      	strb	r2, [r3, #0]
 8013a10:	187b      	adds	r3, r7, r1
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	2b31      	cmp	r3, #49	; 0x31
 8013a16:	d80d      	bhi.n	8013a34 <USBPD_DPM_RequestPing+0x64>
 8013a18:	193b      	adds	r3, r7, r4
 8013a1a:	0018      	movs	r0, r3
 8013a1c:	f7f2 fbd6 	bl	80061cc <strlen>
 8013a20:	193a      	adds	r2, r7, r4
 8013a22:	1dfb      	adds	r3, r7, #7
 8013a24:	7819      	ldrb	r1, [r3, #0]
 8013a26:	9000      	str	r0, [sp, #0]
 8013a28:	0013      	movs	r3, r2
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	2006      	movs	r0, #6
 8013a2e:	f7f9 fa8f 	bl	800cf50 <USBPD_TRACE_Add>
 8013a32:	e00a      	b.n	8013a4a <USBPD_DPM_RequestPing+0x7a>
 8013a34:	230c      	movs	r3, #12
 8013a36:	18fa      	adds	r2, r7, r3
 8013a38:	1dfb      	adds	r3, r7, #7
 8013a3a:	7819      	ldrb	r1, [r3, #0]
 8013a3c:	2332      	movs	r3, #50	; 0x32
 8013a3e:	9300      	str	r3, [sp, #0]
 8013a40:	0013      	movs	r3, r2
 8013a42:	2200      	movs	r2, #0
 8013a44:	2006      	movs	r0, #6
 8013a46:	f7f9 fa83 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8013a4a:	233f      	movs	r3, #63	; 0x3f
 8013a4c:	18fb      	adds	r3, r7, r3
 8013a4e:	781b      	ldrb	r3, [r3, #0]
}
 8013a50:	0018      	movs	r0, r3
 8013a52:	46bd      	mov	sp, r7
 8013a54:	b010      	add	sp, #64	; 0x40
 8013a56:	bdb0      	pop	{r4, r5, r7, pc}
 8013a58:	0801b684 	.word	0x0801b684

08013a5c <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 8013a5c:	b5b0      	push	{r4, r5, r7, lr}
 8013a5e:	b09e      	sub	sp, #120	; 0x78
 8013a60:	af02      	add	r7, sp, #8
 8013a62:	0004      	movs	r4, r0
 8013a64:	0008      	movs	r0, r1
 8013a66:	0011      	movs	r1, r2
 8013a68:	1dfb      	adds	r3, r7, #7
 8013a6a:	1c22      	adds	r2, r4, #0
 8013a6c:	701a      	strb	r2, [r3, #0]
 8013a6e:	1dbb      	adds	r3, r7, #6
 8013a70:	1c02      	adds	r2, r0, #0
 8013a72:	701a      	strb	r2, [r3, #0]
 8013a74:	1d3b      	adds	r3, r7, #4
 8013a76:	1c0a      	adds	r2, r1, #0
 8013a78:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 8013a7a:	256f      	movs	r5, #111	; 0x6f
 8013a7c:	197b      	adds	r3, r7, r5
 8013a7e:	2202      	movs	r2, #2
 8013a80:	701a      	strb	r2, [r3, #0]
  //source: https://community.st.com/t5/stm32-mcus-other-solutions/message-rejected-for-this-port-configuration-on-the-stm32-x-cube/td-p/86358
    uint32_t voltage, allowablepower;
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_PDO_TypeDef  pdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 8013a82:	1dfb      	adds	r3, r7, #7
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	2274      	movs	r2, #116	; 0x74
 8013a88:	435a      	muls	r2, r3
 8013a8a:	4b52      	ldr	r3, [pc, #328]	; (8013bd4 <USBPD_DPM_RequestMessageRequest+0x178>)
 8013a8c:	18d3      	adds	r3, r2, r3
 8013a8e:	66bb      	str	r3, [r7, #104]	; 0x68
	USBPD_DPM_SNKPowerRequestDetailsTypeDef request_details;
	rdo.d32 = 0;
 8013a90:	2300      	movs	r3, #0
 8013a92:	65bb      	str	r3, [r7, #88]	; 0x58

	/* selected SRC PDO */
	pdo.d32 = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[(IndexSrcPDO - 1)];
 8013a94:	1dfb      	adds	r3, r7, #7
 8013a96:	781a      	ldrb	r2, [r3, #0]
 8013a98:	1dbb      	adds	r3, r7, #6
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	1e58      	subs	r0, r3, #1
 8013a9e:	494e      	ldr	r1, [pc, #312]	; (8013bd8 <USBPD_DPM_RequestMessageRequest+0x17c>)
 8013aa0:	0013      	movs	r3, r2
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	189b      	adds	r3, r3, r2
 8013aa6:	009b      	lsls	r3, r3, #2
 8013aa8:	181b      	adds	r3, r3, r0
 8013aaa:	009b      	lsls	r3, r3, #2
 8013aac:	585b      	ldr	r3, [r3, r1]
 8013aae:	657b      	str	r3, [r7, #84]	; 0x54
	voltage = RequestedVoltage;
 8013ab0:	1d3b      	adds	r3, r7, #4
 8013ab2:	881b      	ldrh	r3, [r3, #0]
 8013ab4:	663b      	str	r3, [r7, #96]	; 0x60
	allowablepower = (puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits * RequestedVoltage) / 1000U;
 8013ab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	1d3a      	adds	r2, r7, #4
 8013abc:	8812      	ldrh	r2, [r2, #0]
 8013abe:	4353      	muls	r3, r2
 8013ac0:	22fa      	movs	r2, #250	; 0xfa
 8013ac2:	0091      	lsls	r1, r2, #2
 8013ac4:	0018      	movs	r0, r3
 8013ac6:	f7f2 fb93 	bl	80061f0 <__udivsi3>
 8013aca:	0003      	movs	r3, r0
 8013acc:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 8013ace:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013ad0:	235c      	movs	r3, #92	; 0x5c
 8013ad2:	18fc      	adds	r4, r7, r3
 8013ad4:	2360      	movs	r3, #96	; 0x60
 8013ad6:	18fa      	adds	r2, r7, r3
 8013ad8:	1dfb      	adds	r3, r7, #7
 8013ada:	7818      	ldrb	r0, [r3, #0]
 8013adc:	0023      	movs	r3, r4
 8013ade:	f001 f82d 	bl	8014b3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 8013ae2:	0003      	movs	r3, r0
 8013ae4:	2b01      	cmp	r3, #1
 8013ae6:	d141      	bne.n	8013b6c <USBPD_DPM_RequestMessageRequest+0x110>
	{
	  /* Check that voltage has been correctly selected */
	  if (RequestedVoltage == voltage)
 8013ae8:	1d3b      	adds	r3, r7, #4
 8013aea:	881a      	ldrh	r2, [r3, #0]
 8013aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d13c      	bne.n	8013b6c <USBPD_DPM_RequestMessageRequest+0x110>
	  {
		request_details.RequestedVoltageInmVunits    = RequestedVoltage;
 8013af2:	1d3b      	adds	r3, r7, #4
 8013af4:	881a      	ldrh	r2, [r3, #0]
 8013af6:	243c      	movs	r4, #60	; 0x3c
 8013af8:	193b      	adds	r3, r7, r4
 8013afa:	601a      	str	r2, [r3, #0]
		request_details.OperatingCurrentInmAunits    = (1000U * allowablepower)/RequestedVoltage;
 8013afc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013afe:	0013      	movs	r3, r2
 8013b00:	015b      	lsls	r3, r3, #5
 8013b02:	1a9b      	subs	r3, r3, r2
 8013b04:	009b      	lsls	r3, r3, #2
 8013b06:	189b      	adds	r3, r3, r2
 8013b08:	00db      	lsls	r3, r3, #3
 8013b0a:	001a      	movs	r2, r3
 8013b0c:	1d3b      	adds	r3, r7, #4
 8013b0e:	881b      	ldrh	r3, [r3, #0]
 8013b10:	0019      	movs	r1, r3
 8013b12:	0010      	movs	r0, r2
 8013b14:	f7f2 fb6c 	bl	80061f0 <__udivsi3>
 8013b18:	0003      	movs	r3, r0
 8013b1a:	001a      	movs	r2, r3
 8013b1c:	0020      	movs	r0, r4
 8013b1e:	183b      	adds	r3, r7, r0
 8013b20:	609a      	str	r2, [r3, #8]
		request_details.MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 8013b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b24:	685a      	ldr	r2, [r3, #4]
 8013b26:	183b      	adds	r3, r7, r0
 8013b28:	605a      	str	r2, [r3, #4]
		request_details.MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 8013b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b2c:	699a      	ldr	r2, [r3, #24]
 8013b2e:	183b      	adds	r3, r7, r0
 8013b30:	60da      	str	r2, [r3, #12]
		request_details.OperatingPowerInmWunits      = puser->DPM_SNKRequestedPower.OperatingPowerInmWunits;
 8013b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b34:	695a      	ldr	r2, [r3, #20]
 8013b36:	183b      	adds	r3, r7, r0
 8013b38:	611a      	str	r2, [r3, #16]

		USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, (IndexSrcPDO - 1), &request_details, &rdo, &pdo_object);
 8013b3a:	1dbb      	adds	r3, r7, #6
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	3b01      	subs	r3, #1
 8013b40:	b2d9      	uxtb	r1, r3
 8013b42:	2358      	movs	r3, #88	; 0x58
 8013b44:	18fc      	adds	r4, r7, r3
 8013b46:	183a      	adds	r2, r7, r0
 8013b48:	1dfb      	adds	r3, r7, #7
 8013b4a:	7818      	ldrb	r0, [r3, #0]
 8013b4c:	2350      	movs	r3, #80	; 0x50
 8013b4e:	18fb      	adds	r3, r7, r3
 8013b50:	9300      	str	r3, [sp, #0]
 8013b52:	0023      	movs	r3, r4
 8013b54:	f001 fa86 	bl	8015064 <USER_SERV_SNK_BuildRDOfromSelectedPDO>

		_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 8013b58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013b5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b5c:	197c      	adds	r4, r7, r5
 8013b5e:	1dfb      	adds	r3, r7, #7
 8013b60:	781b      	ldrb	r3, [r3, #0]
 8013b62:	0018      	movs	r0, r3
 8013b64:	f7ec fdd0 	bl	8000708 <USBPD_PE_Send_Request>
 8013b68:	0003      	movs	r3, r0
 8013b6a:	7023      	strb	r3, [r4, #0]
	  }
	}

/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 8013b6c:	236f      	movs	r3, #111	; 0x6f
 8013b6e:	18fb      	adds	r3, r7, r3
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d027      	beq.n	8013bc6 <USBPD_DPM_RequestMessageRequest+0x16a>
 8013b76:	4a19      	ldr	r2, [pc, #100]	; (8013bdc <USBPD_DPM_RequestMessageRequest+0x180>)
 8013b78:	2408      	movs	r4, #8
 8013b7a:	193b      	adds	r3, r7, r4
 8013b7c:	2132      	movs	r1, #50	; 0x32
 8013b7e:	0018      	movs	r0, r3
 8013b80:	f006 ff96 	bl	801aab0 <sniprintf>
 8013b84:	0002      	movs	r2, r0
 8013b86:	2167      	movs	r1, #103	; 0x67
 8013b88:	187b      	adds	r3, r7, r1
 8013b8a:	701a      	strb	r2, [r3, #0]
 8013b8c:	187b      	adds	r3, r7, r1
 8013b8e:	781b      	ldrb	r3, [r3, #0]
 8013b90:	2b31      	cmp	r3, #49	; 0x31
 8013b92:	d80d      	bhi.n	8013bb0 <USBPD_DPM_RequestMessageRequest+0x154>
 8013b94:	193b      	adds	r3, r7, r4
 8013b96:	0018      	movs	r0, r3
 8013b98:	f7f2 fb18 	bl	80061cc <strlen>
 8013b9c:	193a      	adds	r2, r7, r4
 8013b9e:	1dfb      	adds	r3, r7, #7
 8013ba0:	7819      	ldrb	r1, [r3, #0]
 8013ba2:	9000      	str	r0, [sp, #0]
 8013ba4:	0013      	movs	r3, r2
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	2006      	movs	r0, #6
 8013baa:	f7f9 f9d1 	bl	800cf50 <USBPD_TRACE_Add>
 8013bae:	e00a      	b.n	8013bc6 <USBPD_DPM_RequestMessageRequest+0x16a>
 8013bb0:	2308      	movs	r3, #8
 8013bb2:	18fa      	adds	r2, r7, r3
 8013bb4:	1dfb      	adds	r3, r7, #7
 8013bb6:	7819      	ldrb	r1, [r3, #0]
 8013bb8:	2332      	movs	r3, #50	; 0x32
 8013bba:	9300      	str	r3, [sp, #0]
 8013bbc:	0013      	movs	r3, r2
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	2006      	movs	r0, #6
 8013bc2:	f7f9 f9c5 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8013bc6:	236f      	movs	r3, #111	; 0x6f
 8013bc8:	18fb      	adds	r3, r7, r3
 8013bca:	781b      	ldrb	r3, [r3, #0]
}
 8013bcc:	0018      	movs	r0, r3
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	b01c      	add	sp, #112	; 0x70
 8013bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8013bd4:	20000050 	.word	0x20000050
 8013bd8:	20002d90 	.word	0x20002d90
 8013bdc:	0801b6a4 	.word	0x0801b6a4

08013be0 <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 8013be0:	b5b0      	push	{r4, r5, r7, lr}
 8013be2:	b092      	sub	sp, #72	; 0x48
 8013be4:	af02      	add	r7, sp, #8
 8013be6:	0002      	movs	r2, r0
 8013be8:	1dfb      	adds	r3, r7, #7
 8013bea:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 8013bec:	253f      	movs	r5, #63	; 0x3f
 8013bee:	197c      	adds	r4, r7, r5
 8013bf0:	1dfb      	adds	r3, r7, #7
 8013bf2:	781b      	ldrb	r3, [r3, #0]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	2107      	movs	r1, #7
 8013bf8:	0018      	movs	r0, r3
 8013bfa:	f7ec fc83 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 8013bfe:	0003      	movs	r3, r0
 8013c00:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 8013c02:	197b      	adds	r3, r7, r5
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d027      	beq.n	8013c5a <USBPD_DPM_RequestGetSourceCapability+0x7a>
 8013c0a:	4a17      	ldr	r2, [pc, #92]	; (8013c68 <USBPD_DPM_RequestGetSourceCapability+0x88>)
 8013c0c:	240c      	movs	r4, #12
 8013c0e:	193b      	adds	r3, r7, r4
 8013c10:	2132      	movs	r1, #50	; 0x32
 8013c12:	0018      	movs	r0, r3
 8013c14:	f006 ff4c 	bl	801aab0 <sniprintf>
 8013c18:	0002      	movs	r2, r0
 8013c1a:	213e      	movs	r1, #62	; 0x3e
 8013c1c:	187b      	adds	r3, r7, r1
 8013c1e:	701a      	strb	r2, [r3, #0]
 8013c20:	187b      	adds	r3, r7, r1
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	2b31      	cmp	r3, #49	; 0x31
 8013c26:	d80d      	bhi.n	8013c44 <USBPD_DPM_RequestGetSourceCapability+0x64>
 8013c28:	193b      	adds	r3, r7, r4
 8013c2a:	0018      	movs	r0, r3
 8013c2c:	f7f2 face 	bl	80061cc <strlen>
 8013c30:	193a      	adds	r2, r7, r4
 8013c32:	1dfb      	adds	r3, r7, #7
 8013c34:	7819      	ldrb	r1, [r3, #0]
 8013c36:	9000      	str	r0, [sp, #0]
 8013c38:	0013      	movs	r3, r2
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	2006      	movs	r0, #6
 8013c3e:	f7f9 f987 	bl	800cf50 <USBPD_TRACE_Add>
 8013c42:	e00a      	b.n	8013c5a <USBPD_DPM_RequestGetSourceCapability+0x7a>
 8013c44:	230c      	movs	r3, #12
 8013c46:	18fa      	adds	r2, r7, r3
 8013c48:	1dfb      	adds	r3, r7, #7
 8013c4a:	7819      	ldrb	r1, [r3, #0]
 8013c4c:	2332      	movs	r3, #50	; 0x32
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	0013      	movs	r3, r2
 8013c52:	2200      	movs	r2, #0
 8013c54:	2006      	movs	r0, #6
 8013c56:	f7f9 f97b 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8013c5a:	233f      	movs	r3, #63	; 0x3f
 8013c5c:	18fb      	adds	r3, r7, r3
 8013c5e:	781b      	ldrb	r3, [r3, #0]
}
 8013c60:	0018      	movs	r0, r3
 8013c62:	46bd      	mov	sp, r7
 8013c64:	b010      	add	sp, #64	; 0x40
 8013c66:	bdb0      	pop	{r4, r5, r7, pc}
 8013c68:	0801b6c8 	.word	0x0801b6c8

08013c6c <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 8013c6c:	b5b0      	push	{r4, r5, r7, lr}
 8013c6e:	b092      	sub	sp, #72	; 0x48
 8013c70:	af02      	add	r7, sp, #8
 8013c72:	0002      	movs	r2, r0
 8013c74:	1dfb      	adds	r3, r7, #7
 8013c76:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 8013c78:	253f      	movs	r5, #63	; 0x3f
 8013c7a:	197c      	adds	r4, r7, r5
 8013c7c:	1dfb      	adds	r3, r7, #7
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	2200      	movs	r2, #0
 8013c82:	2108      	movs	r1, #8
 8013c84:	0018      	movs	r0, r3
 8013c86:	f7ec fc3d 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 8013c8a:	0003      	movs	r3, r0
 8013c8c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 8013c8e:	197b      	adds	r3, r7, r5
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d027      	beq.n	8013ce6 <USBPD_DPM_RequestGetSinkCapability+0x7a>
 8013c96:	4a17      	ldr	r2, [pc, #92]	; (8013cf4 <USBPD_DPM_RequestGetSinkCapability+0x88>)
 8013c98:	240c      	movs	r4, #12
 8013c9a:	193b      	adds	r3, r7, r4
 8013c9c:	2132      	movs	r1, #50	; 0x32
 8013c9e:	0018      	movs	r0, r3
 8013ca0:	f006 ff06 	bl	801aab0 <sniprintf>
 8013ca4:	0002      	movs	r2, r0
 8013ca6:	213e      	movs	r1, #62	; 0x3e
 8013ca8:	187b      	adds	r3, r7, r1
 8013caa:	701a      	strb	r2, [r3, #0]
 8013cac:	187b      	adds	r3, r7, r1
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	2b31      	cmp	r3, #49	; 0x31
 8013cb2:	d80d      	bhi.n	8013cd0 <USBPD_DPM_RequestGetSinkCapability+0x64>
 8013cb4:	193b      	adds	r3, r7, r4
 8013cb6:	0018      	movs	r0, r3
 8013cb8:	f7f2 fa88 	bl	80061cc <strlen>
 8013cbc:	193a      	adds	r2, r7, r4
 8013cbe:	1dfb      	adds	r3, r7, #7
 8013cc0:	7819      	ldrb	r1, [r3, #0]
 8013cc2:	9000      	str	r0, [sp, #0]
 8013cc4:	0013      	movs	r3, r2
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	2006      	movs	r0, #6
 8013cca:	f7f9 f941 	bl	800cf50 <USBPD_TRACE_Add>
 8013cce:	e00a      	b.n	8013ce6 <USBPD_DPM_RequestGetSinkCapability+0x7a>
 8013cd0:	230c      	movs	r3, #12
 8013cd2:	18fa      	adds	r2, r7, r3
 8013cd4:	1dfb      	adds	r3, r7, #7
 8013cd6:	7819      	ldrb	r1, [r3, #0]
 8013cd8:	2332      	movs	r3, #50	; 0x32
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	0013      	movs	r3, r2
 8013cde:	2200      	movs	r2, #0
 8013ce0:	2006      	movs	r0, #6
 8013ce2:	f7f9 f935 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8013ce6:	233f      	movs	r3, #63	; 0x3f
 8013ce8:	18fb      	adds	r3, r7, r3
 8013cea:	781b      	ldrb	r3, [r3, #0]
}
 8013cec:	0018      	movs	r0, r3
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	b010      	add	sp, #64	; 0x40
 8013cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8013cf4:	0801b6f0 	.word	0x0801b6f0

08013cf8 <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 8013cf8:	b5b0      	push	{r4, r5, r7, lr}
 8013cfa:	b092      	sub	sp, #72	; 0x48
 8013cfc:	af02      	add	r7, sp, #8
 8013cfe:	0002      	movs	r2, r0
 8013d00:	1dfb      	adds	r3, r7, #7
 8013d02:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 8013d04:	253f      	movs	r5, #63	; 0x3f
 8013d06:	197c      	adds	r4, r7, r5
 8013d08:	1dfb      	adds	r3, r7, #7
 8013d0a:	781b      	ldrb	r3, [r3, #0]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	2109      	movs	r1, #9
 8013d10:	0018      	movs	r0, r3
 8013d12:	f7ec fbf7 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 8013d16:	0003      	movs	r3, r0
 8013d18:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 8013d1a:	197b      	adds	r3, r7, r5
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d027      	beq.n	8013d72 <USBPD_DPM_RequestDataRoleSwap+0x7a>
 8013d22:	4a17      	ldr	r2, [pc, #92]	; (8013d80 <USBPD_DPM_RequestDataRoleSwap+0x88>)
 8013d24:	240c      	movs	r4, #12
 8013d26:	193b      	adds	r3, r7, r4
 8013d28:	2132      	movs	r1, #50	; 0x32
 8013d2a:	0018      	movs	r0, r3
 8013d2c:	f006 fec0 	bl	801aab0 <sniprintf>
 8013d30:	0002      	movs	r2, r0
 8013d32:	213e      	movs	r1, #62	; 0x3e
 8013d34:	187b      	adds	r3, r7, r1
 8013d36:	701a      	strb	r2, [r3, #0]
 8013d38:	187b      	adds	r3, r7, r1
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	2b31      	cmp	r3, #49	; 0x31
 8013d3e:	d80d      	bhi.n	8013d5c <USBPD_DPM_RequestDataRoleSwap+0x64>
 8013d40:	193b      	adds	r3, r7, r4
 8013d42:	0018      	movs	r0, r3
 8013d44:	f7f2 fa42 	bl	80061cc <strlen>
 8013d48:	193a      	adds	r2, r7, r4
 8013d4a:	1dfb      	adds	r3, r7, #7
 8013d4c:	7819      	ldrb	r1, [r3, #0]
 8013d4e:	9000      	str	r0, [sp, #0]
 8013d50:	0013      	movs	r3, r2
 8013d52:	2200      	movs	r2, #0
 8013d54:	2006      	movs	r0, #6
 8013d56:	f7f9 f8fb 	bl	800cf50 <USBPD_TRACE_Add>
 8013d5a:	e00a      	b.n	8013d72 <USBPD_DPM_RequestDataRoleSwap+0x7a>
 8013d5c:	230c      	movs	r3, #12
 8013d5e:	18fa      	adds	r2, r7, r3
 8013d60:	1dfb      	adds	r3, r7, #7
 8013d62:	7819      	ldrb	r1, [r3, #0]
 8013d64:	2332      	movs	r3, #50	; 0x32
 8013d66:	9300      	str	r3, [sp, #0]
 8013d68:	0013      	movs	r3, r2
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	2006      	movs	r0, #6
 8013d6e:	f7f9 f8ef 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8013d72:	233f      	movs	r3, #63	; 0x3f
 8013d74:	18fb      	adds	r3, r7, r3
 8013d76:	781b      	ldrb	r3, [r3, #0]
}
 8013d78:	0018      	movs	r0, r3
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	b010      	add	sp, #64	; 0x40
 8013d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8013d80:	0801b718 	.word	0x0801b718

08013d84 <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 8013d84:	b590      	push	{r4, r7, lr}
 8013d86:	b093      	sub	sp, #76	; 0x4c
 8013d88:	af02      	add	r7, sp, #8
 8013d8a:	0002      	movs	r2, r0
 8013d8c:	1dfb      	adds	r3, r7, #7
 8013d8e:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "PRS not accepted by the stack");
 8013d90:	4a16      	ldr	r2, [pc, #88]	; (8013dec <USBPD_DPM_RequestPowerRoleSwap+0x68>)
 8013d92:	240c      	movs	r4, #12
 8013d94:	193b      	adds	r3, r7, r4
 8013d96:	2132      	movs	r1, #50	; 0x32
 8013d98:	0018      	movs	r0, r3
 8013d9a:	f006 fe89 	bl	801aab0 <sniprintf>
 8013d9e:	0002      	movs	r2, r0
 8013da0:	213f      	movs	r1, #63	; 0x3f
 8013da2:	187b      	adds	r3, r7, r1
 8013da4:	701a      	strb	r2, [r3, #0]
 8013da6:	187b      	adds	r3, r7, r1
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	2b31      	cmp	r3, #49	; 0x31
 8013dac:	d80d      	bhi.n	8013dca <USBPD_DPM_RequestPowerRoleSwap+0x46>
 8013dae:	193b      	adds	r3, r7, r4
 8013db0:	0018      	movs	r0, r3
 8013db2:	f7f2 fa0b 	bl	80061cc <strlen>
 8013db6:	193a      	adds	r2, r7, r4
 8013db8:	1dfb      	adds	r3, r7, #7
 8013dba:	7819      	ldrb	r1, [r3, #0]
 8013dbc:	9000      	str	r0, [sp, #0]
 8013dbe:	0013      	movs	r3, r2
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	2006      	movs	r0, #6
 8013dc4:	f7f9 f8c4 	bl	800cf50 <USBPD_TRACE_Add>
 8013dc8:	e00a      	b.n	8013de0 <USBPD_DPM_RequestPowerRoleSwap+0x5c>
 8013dca:	230c      	movs	r3, #12
 8013dcc:	18fa      	adds	r2, r7, r3
 8013dce:	1dfb      	adds	r3, r7, #7
 8013dd0:	7819      	ldrb	r1, [r3, #0]
 8013dd2:	2332      	movs	r3, #50	; 0x32
 8013dd4:	9300      	str	r3, [sp, #0]
 8013dd6:	0013      	movs	r3, r2
 8013dd8:	2200      	movs	r2, #0
 8013dda:	2006      	movs	r0, #6
 8013ddc:	f7f9 f8b8 	bl	800cf50 <USBPD_TRACE_Add>
  return USBPD_ERROR;
 8013de0:	2302      	movs	r3, #2
}
 8013de2:	0018      	movs	r0, r3
 8013de4:	46bd      	mov	sp, r7
 8013de6:	b011      	add	sp, #68	; 0x44
 8013de8:	bd90      	pop	{r4, r7, pc}
 8013dea:	46c0      	nop			; (mov r8, r8)
 8013dec:	0801b738 	.word	0x0801b738

08013df0 <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 8013df0:	b5b0      	push	{r4, r5, r7, lr}
 8013df2:	b092      	sub	sp, #72	; 0x48
 8013df4:	af02      	add	r7, sp, #8
 8013df6:	0002      	movs	r2, r0
 8013df8:	1dfb      	adds	r3, r7, #7
 8013dfa:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 8013dfc:	253f      	movs	r5, #63	; 0x3f
 8013dfe:	197c      	adds	r4, r7, r5
 8013e00:	1dfb      	adds	r3, r7, #7
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	2200      	movs	r2, #0
 8013e06:	210b      	movs	r1, #11
 8013e08:	0018      	movs	r0, r3
 8013e0a:	f7ec fb7b 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 8013e0e:	0003      	movs	r3, r0
 8013e10:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 8013e12:	197b      	adds	r3, r7, r5
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d027      	beq.n	8013e6a <USBPD_DPM_RequestVconnSwap+0x7a>
 8013e1a:	4a17      	ldr	r2, [pc, #92]	; (8013e78 <USBPD_DPM_RequestVconnSwap+0x88>)
 8013e1c:	240c      	movs	r4, #12
 8013e1e:	193b      	adds	r3, r7, r4
 8013e20:	2132      	movs	r1, #50	; 0x32
 8013e22:	0018      	movs	r0, r3
 8013e24:	f006 fe44 	bl	801aab0 <sniprintf>
 8013e28:	0002      	movs	r2, r0
 8013e2a:	213e      	movs	r1, #62	; 0x3e
 8013e2c:	187b      	adds	r3, r7, r1
 8013e2e:	701a      	strb	r2, [r3, #0]
 8013e30:	187b      	adds	r3, r7, r1
 8013e32:	781b      	ldrb	r3, [r3, #0]
 8013e34:	2b31      	cmp	r3, #49	; 0x31
 8013e36:	d80d      	bhi.n	8013e54 <USBPD_DPM_RequestVconnSwap+0x64>
 8013e38:	193b      	adds	r3, r7, r4
 8013e3a:	0018      	movs	r0, r3
 8013e3c:	f7f2 f9c6 	bl	80061cc <strlen>
 8013e40:	193a      	adds	r2, r7, r4
 8013e42:	1dfb      	adds	r3, r7, #7
 8013e44:	7819      	ldrb	r1, [r3, #0]
 8013e46:	9000      	str	r0, [sp, #0]
 8013e48:	0013      	movs	r3, r2
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	2006      	movs	r0, #6
 8013e4e:	f7f9 f87f 	bl	800cf50 <USBPD_TRACE_Add>
 8013e52:	e00a      	b.n	8013e6a <USBPD_DPM_RequestVconnSwap+0x7a>
 8013e54:	230c      	movs	r3, #12
 8013e56:	18fa      	adds	r2, r7, r3
 8013e58:	1dfb      	adds	r3, r7, #7
 8013e5a:	7819      	ldrb	r1, [r3, #0]
 8013e5c:	2332      	movs	r3, #50	; 0x32
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	0013      	movs	r3, r2
 8013e62:	2200      	movs	r2, #0
 8013e64:	2006      	movs	r0, #6
 8013e66:	f7f9 f873 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8013e6a:	233f      	movs	r3, #63	; 0x3f
 8013e6c:	18fb      	adds	r3, r7, r3
 8013e6e:	781b      	ldrb	r3, [r3, #0]
}
 8013e70:	0018      	movs	r0, r3
 8013e72:	46bd      	mov	sp, r7
 8013e74:	b010      	add	sp, #64	; 0x40
 8013e76:	bdb0      	pop	{r4, r5, r7, pc}
 8013e78:	0801b758 	.word	0x0801b758

08013e7c <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 8013e7c:	b5b0      	push	{r4, r5, r7, lr}
 8013e7e:	b092      	sub	sp, #72	; 0x48
 8013e80:	af02      	add	r7, sp, #8
 8013e82:	0002      	movs	r2, r0
 8013e84:	1dfb      	adds	r3, r7, #7
 8013e86:	701a      	strb	r2, [r3, #0]
 8013e88:	1dbb      	adds	r3, r7, #6
 8013e8a:	1c0a      	adds	r2, r1, #0
 8013e8c:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 8013e8e:	253f      	movs	r5, #63	; 0x3f
 8013e90:	197c      	adds	r4, r7, r5
 8013e92:	1dbb      	adds	r3, r7, #6
 8013e94:	781a      	ldrb	r2, [r3, #0]
 8013e96:	1dfb      	adds	r3, r7, #7
 8013e98:	781b      	ldrb	r3, [r3, #0]
 8013e9a:	210d      	movs	r1, #13
 8013e9c:	0018      	movs	r0, r3
 8013e9e:	f7ec fb31 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 8013ea2:	0003      	movs	r3, r0
 8013ea4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 8013ea6:	197b      	adds	r3, r7, r5
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d027      	beq.n	8013efe <USBPD_DPM_RequestSoftReset+0x82>
 8013eae:	4a17      	ldr	r2, [pc, #92]	; (8013f0c <USBPD_DPM_RequestSoftReset+0x90>)
 8013eb0:	240c      	movs	r4, #12
 8013eb2:	193b      	adds	r3, r7, r4
 8013eb4:	2132      	movs	r1, #50	; 0x32
 8013eb6:	0018      	movs	r0, r3
 8013eb8:	f006 fdfa 	bl	801aab0 <sniprintf>
 8013ebc:	0002      	movs	r2, r0
 8013ebe:	213e      	movs	r1, #62	; 0x3e
 8013ec0:	187b      	adds	r3, r7, r1
 8013ec2:	701a      	strb	r2, [r3, #0]
 8013ec4:	187b      	adds	r3, r7, r1
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	2b31      	cmp	r3, #49	; 0x31
 8013eca:	d80d      	bhi.n	8013ee8 <USBPD_DPM_RequestSoftReset+0x6c>
 8013ecc:	193b      	adds	r3, r7, r4
 8013ece:	0018      	movs	r0, r3
 8013ed0:	f7f2 f97c 	bl	80061cc <strlen>
 8013ed4:	193a      	adds	r2, r7, r4
 8013ed6:	1dfb      	adds	r3, r7, #7
 8013ed8:	7819      	ldrb	r1, [r3, #0]
 8013eda:	9000      	str	r0, [sp, #0]
 8013edc:	0013      	movs	r3, r2
 8013ede:	2200      	movs	r2, #0
 8013ee0:	2006      	movs	r0, #6
 8013ee2:	f7f9 f835 	bl	800cf50 <USBPD_TRACE_Add>
 8013ee6:	e00a      	b.n	8013efe <USBPD_DPM_RequestSoftReset+0x82>
 8013ee8:	230c      	movs	r3, #12
 8013eea:	18fa      	adds	r2, r7, r3
 8013eec:	1dfb      	adds	r3, r7, #7
 8013eee:	7819      	ldrb	r1, [r3, #0]
 8013ef0:	2332      	movs	r3, #50	; 0x32
 8013ef2:	9300      	str	r3, [sp, #0]
 8013ef4:	0013      	movs	r3, r2
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	2006      	movs	r0, #6
 8013efa:	f7f9 f829 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8013efe:	233f      	movs	r3, #63	; 0x3f
 8013f00:	18fb      	adds	r3, r7, r3
 8013f02:	781b      	ldrb	r3, [r3, #0]
}
 8013f04:	0018      	movs	r0, r3
 8013f06:	46bd      	mov	sp, r7
 8013f08:	b010      	add	sp, #64	; 0x40
 8013f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8013f0c:	0801b778 	.word	0x0801b778

08013f10 <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 8013f10:	b5b0      	push	{r4, r5, r7, lr}
 8013f12:	b092      	sub	sp, #72	; 0x48
 8013f14:	af02      	add	r7, sp, #8
 8013f16:	0002      	movs	r2, r0
 8013f18:	1dfb      	adds	r3, r7, #7
 8013f1a:	701a      	strb	r2, [r3, #0]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 8013f1c:	253f      	movs	r5, #63	; 0x3f
 8013f1e:	197c      	adds	r4, r7, r5
 8013f20:	1dfb      	adds	r3, r7, #7
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	2200      	movs	r2, #0
 8013f26:	2101      	movs	r1, #1
 8013f28:	0018      	movs	r0, r3
 8013f2a:	f7ec fb97 	bl	800065c <USBPD_PE_Request_DataMessage>
 8013f2e:	0003      	movs	r3, r0
 8013f30:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 8013f32:	197b      	adds	r3, r7, r5
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d027      	beq.n	8013f8a <USBPD_DPM_RequestSourceCapability+0x7a>
 8013f3a:	4a17      	ldr	r2, [pc, #92]	; (8013f98 <USBPD_DPM_RequestSourceCapability+0x88>)
 8013f3c:	240c      	movs	r4, #12
 8013f3e:	193b      	adds	r3, r7, r4
 8013f40:	2132      	movs	r1, #50	; 0x32
 8013f42:	0018      	movs	r0, r3
 8013f44:	f006 fdb4 	bl	801aab0 <sniprintf>
 8013f48:	0002      	movs	r2, r0
 8013f4a:	213e      	movs	r1, #62	; 0x3e
 8013f4c:	187b      	adds	r3, r7, r1
 8013f4e:	701a      	strb	r2, [r3, #0]
 8013f50:	187b      	adds	r3, r7, r1
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	2b31      	cmp	r3, #49	; 0x31
 8013f56:	d80d      	bhi.n	8013f74 <USBPD_DPM_RequestSourceCapability+0x64>
 8013f58:	193b      	adds	r3, r7, r4
 8013f5a:	0018      	movs	r0, r3
 8013f5c:	f7f2 f936 	bl	80061cc <strlen>
 8013f60:	193a      	adds	r2, r7, r4
 8013f62:	1dfb      	adds	r3, r7, #7
 8013f64:	7819      	ldrb	r1, [r3, #0]
 8013f66:	9000      	str	r0, [sp, #0]
 8013f68:	0013      	movs	r3, r2
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	2006      	movs	r0, #6
 8013f6e:	f7f8 ffef 	bl	800cf50 <USBPD_TRACE_Add>
 8013f72:	e00a      	b.n	8013f8a <USBPD_DPM_RequestSourceCapability+0x7a>
 8013f74:	230c      	movs	r3, #12
 8013f76:	18fa      	adds	r2, r7, r3
 8013f78:	1dfb      	adds	r3, r7, #7
 8013f7a:	7819      	ldrb	r1, [r3, #0]
 8013f7c:	2332      	movs	r3, #50	; 0x32
 8013f7e:	9300      	str	r3, [sp, #0]
 8013f80:	0013      	movs	r3, r2
 8013f82:	2200      	movs	r2, #0
 8013f84:	2006      	movs	r0, #6
 8013f86:	f7f8 ffe3 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8013f8a:	233f      	movs	r3, #63	; 0x3f
 8013f8c:	18fb      	adds	r3, r7, r3
 8013f8e:	781b      	ldrb	r3, [r3, #0]
}
 8013f90:	0018      	movs	r0, r3
 8013f92:	46bd      	mov	sp, r7
 8013f94:	b010      	add	sp, #64	; 0x40
 8013f96:	bdb0      	pop	{r4, r5, r7, pc}
 8013f98:	0801b7a0 	.word	0x0801b7a0

08013f9c <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 8013f9c:	b5b0      	push	{r4, r5, r7, lr}
 8013f9e:	b092      	sub	sp, #72	; 0x48
 8013fa0:	af02      	add	r7, sp, #8
 8013fa2:	0002      	movs	r2, r0
 8013fa4:	6039      	str	r1, [r7, #0]
 8013fa6:	1dfb      	adds	r3, r7, #7
 8013fa8:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 8013faa:	253f      	movs	r5, #63	; 0x3f
 8013fac:	197c      	adds	r4, r7, r5
 8013fae:	003a      	movs	r2, r7
 8013fb0:	1dfb      	adds	r3, r7, #7
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	2106      	movs	r1, #6
 8013fb6:	0018      	movs	r0, r3
 8013fb8:	f7ec fb50 	bl	800065c <USBPD_PE_Request_DataMessage>
 8013fbc:	0003      	movs	r3, r0
 8013fbe:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 8013fc0:	197b      	adds	r3, r7, r5
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d027      	beq.n	8014018 <USBPD_DPM_RequestAlert+0x7c>
 8013fc8:	4a17      	ldr	r2, [pc, #92]	; (8014028 <USBPD_DPM_RequestAlert+0x8c>)
 8013fca:	240c      	movs	r4, #12
 8013fcc:	193b      	adds	r3, r7, r4
 8013fce:	2132      	movs	r1, #50	; 0x32
 8013fd0:	0018      	movs	r0, r3
 8013fd2:	f006 fd6d 	bl	801aab0 <sniprintf>
 8013fd6:	0002      	movs	r2, r0
 8013fd8:	213e      	movs	r1, #62	; 0x3e
 8013fda:	187b      	adds	r3, r7, r1
 8013fdc:	701a      	strb	r2, [r3, #0]
 8013fde:	187b      	adds	r3, r7, r1
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	2b31      	cmp	r3, #49	; 0x31
 8013fe4:	d80d      	bhi.n	8014002 <USBPD_DPM_RequestAlert+0x66>
 8013fe6:	193b      	adds	r3, r7, r4
 8013fe8:	0018      	movs	r0, r3
 8013fea:	f7f2 f8ef 	bl	80061cc <strlen>
 8013fee:	193a      	adds	r2, r7, r4
 8013ff0:	1dfb      	adds	r3, r7, #7
 8013ff2:	7819      	ldrb	r1, [r3, #0]
 8013ff4:	9000      	str	r0, [sp, #0]
 8013ff6:	0013      	movs	r3, r2
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	2006      	movs	r0, #6
 8013ffc:	f7f8 ffa8 	bl	800cf50 <USBPD_TRACE_Add>
 8014000:	e00a      	b.n	8014018 <USBPD_DPM_RequestAlert+0x7c>
 8014002:	230c      	movs	r3, #12
 8014004:	18fa      	adds	r2, r7, r3
 8014006:	1dfb      	adds	r3, r7, #7
 8014008:	7819      	ldrb	r1, [r3, #0]
 801400a:	2332      	movs	r3, #50	; 0x32
 801400c:	9300      	str	r3, [sp, #0]
 801400e:	0013      	movs	r3, r2
 8014010:	2200      	movs	r2, #0
 8014012:	2006      	movs	r0, #6
 8014014:	f7f8 ff9c 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8014018:	233f      	movs	r3, #63	; 0x3f
 801401a:	18fb      	adds	r3, r7, r3
 801401c:	781b      	ldrb	r3, [r3, #0]
}
 801401e:	0018      	movs	r0, r3
 8014020:	46bd      	mov	sp, r7
 8014022:	b010      	add	sp, #64	; 0x40
 8014024:	bdb0      	pop	{r4, r5, r7, pc}
 8014026:	46c0      	nop			; (mov r8, r8)
 8014028:	0801b930 	.word	0x0801b930

0801402c <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 801402c:	b5b0      	push	{r4, r5, r7, lr}
 801402e:	b092      	sub	sp, #72	; 0x48
 8014030:	af02      	add	r7, sp, #8
 8014032:	0002      	movs	r2, r0
 8014034:	1dfb      	adds	r3, r7, #7
 8014036:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 8014038:	253f      	movs	r5, #63	; 0x3f
 801403a:	197c      	adds	r4, r7, r5
 801403c:	1dfb      	adds	r3, r7, #7
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	2200      	movs	r2, #0
 8014042:	2111      	movs	r1, #17
 8014044:	0018      	movs	r0, r3
 8014046:	f7ec fa5d 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801404a:	0003      	movs	r3, r0
 801404c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 801404e:	197b      	adds	r3, r7, r5
 8014050:	781b      	ldrb	r3, [r3, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d027      	beq.n	80140a6 <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 8014056:	4a17      	ldr	r2, [pc, #92]	; (80140b4 <USBPD_DPM_RequestGetSourceCapabilityExt+0x88>)
 8014058:	240c      	movs	r4, #12
 801405a:	193b      	adds	r3, r7, r4
 801405c:	2132      	movs	r1, #50	; 0x32
 801405e:	0018      	movs	r0, r3
 8014060:	f006 fd26 	bl	801aab0 <sniprintf>
 8014064:	0002      	movs	r2, r0
 8014066:	213e      	movs	r1, #62	; 0x3e
 8014068:	187b      	adds	r3, r7, r1
 801406a:	701a      	strb	r2, [r3, #0]
 801406c:	187b      	adds	r3, r7, r1
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	2b31      	cmp	r3, #49	; 0x31
 8014072:	d80d      	bhi.n	8014090 <USBPD_DPM_RequestGetSourceCapabilityExt+0x64>
 8014074:	193b      	adds	r3, r7, r4
 8014076:	0018      	movs	r0, r3
 8014078:	f7f2 f8a8 	bl	80061cc <strlen>
 801407c:	193a      	adds	r2, r7, r4
 801407e:	1dfb      	adds	r3, r7, #7
 8014080:	7819      	ldrb	r1, [r3, #0]
 8014082:	9000      	str	r0, [sp, #0]
 8014084:	0013      	movs	r3, r2
 8014086:	2200      	movs	r2, #0
 8014088:	2006      	movs	r0, #6
 801408a:	f7f8 ff61 	bl	800cf50 <USBPD_TRACE_Add>
 801408e:	e00a      	b.n	80140a6 <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 8014090:	230c      	movs	r3, #12
 8014092:	18fa      	adds	r2, r7, r3
 8014094:	1dfb      	adds	r3, r7, #7
 8014096:	7819      	ldrb	r1, [r3, #0]
 8014098:	2332      	movs	r3, #50	; 0x32
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	0013      	movs	r3, r2
 801409e:	2200      	movs	r2, #0
 80140a0:	2006      	movs	r0, #6
 80140a2:	f7f8 ff55 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 80140a6:	233f      	movs	r3, #63	; 0x3f
 80140a8:	18fb      	adds	r3, r7, r3
 80140aa:	781b      	ldrb	r3, [r3, #0]
}
 80140ac:	0018      	movs	r0, r3
 80140ae:	46bd      	mov	sp, r7
 80140b0:	b010      	add	sp, #64	; 0x40
 80140b2:	bdb0      	pop	{r4, r5, r7, pc}
 80140b4:	0801b950 	.word	0x0801b950

080140b8 <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 80140b8:	b5b0      	push	{r4, r5, r7, lr}
 80140ba:	b092      	sub	sp, #72	; 0x48
 80140bc:	af02      	add	r7, sp, #8
 80140be:	0002      	movs	r2, r0
 80140c0:	1dfb      	adds	r3, r7, #7
 80140c2:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAPEXT, USBPD_SOPTYPE_SOP);
 80140c4:	253f      	movs	r5, #63	; 0x3f
 80140c6:	197c      	adds	r4, r7, r5
 80140c8:	1dfb      	adds	r3, r7, #7
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	2200      	movs	r2, #0
 80140ce:	2116      	movs	r1, #22
 80140d0:	0018      	movs	r0, r3
 80140d2:	f7ec fa17 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 80140d6:	0003      	movs	r3, r0
 80140d8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA_EXT not accepted by the stack");
 80140da:	197b      	adds	r3, r7, r5
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d027      	beq.n	8014132 <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 80140e2:	4a17      	ldr	r2, [pc, #92]	; (8014140 <USBPD_DPM_RequestGetSinkCapabilityExt+0x88>)
 80140e4:	240c      	movs	r4, #12
 80140e6:	193b      	adds	r3, r7, r4
 80140e8:	2132      	movs	r1, #50	; 0x32
 80140ea:	0018      	movs	r0, r3
 80140ec:	f006 fce0 	bl	801aab0 <sniprintf>
 80140f0:	0002      	movs	r2, r0
 80140f2:	213e      	movs	r1, #62	; 0x3e
 80140f4:	187b      	adds	r3, r7, r1
 80140f6:	701a      	strb	r2, [r3, #0]
 80140f8:	187b      	adds	r3, r7, r1
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	2b31      	cmp	r3, #49	; 0x31
 80140fe:	d80d      	bhi.n	801411c <USBPD_DPM_RequestGetSinkCapabilityExt+0x64>
 8014100:	193b      	adds	r3, r7, r4
 8014102:	0018      	movs	r0, r3
 8014104:	f7f2 f862 	bl	80061cc <strlen>
 8014108:	193a      	adds	r2, r7, r4
 801410a:	1dfb      	adds	r3, r7, #7
 801410c:	7819      	ldrb	r1, [r3, #0]
 801410e:	9000      	str	r0, [sp, #0]
 8014110:	0013      	movs	r3, r2
 8014112:	2200      	movs	r2, #0
 8014114:	2006      	movs	r0, #6
 8014116:	f7f8 ff1b 	bl	800cf50 <USBPD_TRACE_Add>
 801411a:	e00a      	b.n	8014132 <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 801411c:	230c      	movs	r3, #12
 801411e:	18fa      	adds	r2, r7, r3
 8014120:	1dfb      	adds	r3, r7, #7
 8014122:	7819      	ldrb	r1, [r3, #0]
 8014124:	2332      	movs	r3, #50	; 0x32
 8014126:	9300      	str	r3, [sp, #0]
 8014128:	0013      	movs	r3, r2
 801412a:	2200      	movs	r2, #0
 801412c:	2006      	movs	r0, #6
 801412e:	f7f8 ff0f 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8014132:	233f      	movs	r3, #63	; 0x3f
 8014134:	18fb      	adds	r3, r7, r3
 8014136:	781b      	ldrb	r3, [r3, #0]
}
 8014138:	0018      	movs	r0, r3
 801413a:	46bd      	mov	sp, r7
 801413c:	b010      	add	sp, #64	; 0x40
 801413e:	bdb0      	pop	{r4, r5, r7, pc}
 8014140:	0801b97c 	.word	0x0801b97c

08014144 <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 8014144:	b590      	push	{r4, r7, lr}
 8014146:	b093      	sub	sp, #76	; 0x4c
 8014148:	af02      	add	r7, sp, #8
 801414a:	603a      	str	r2, [r7, #0]
 801414c:	1dfb      	adds	r3, r7, #7
 801414e:	1c02      	adds	r2, r0, #0
 8014150:	701a      	strb	r2, [r3, #0]
 8014152:	1dbb      	adds	r3, r7, #6
 8014154:	1c0a      	adds	r2, r1, #0
 8014156:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 8014158:	213f      	movs	r1, #63	; 0x3f
 801415a:	187b      	adds	r3, r7, r1
 801415c:	2202      	movs	r2, #2
 801415e:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_SOP == SOPType)
 8014160:	1dbb      	adds	r3, r7, #6
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d10d      	bne.n	8014184 <USBPD_DPM_RequestGetManufacturerInfo+0x40>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 8014168:	187c      	adds	r4, r7, r1
 801416a:	683a      	ldr	r2, [r7, #0]
 801416c:	1dbb      	adds	r3, r7, #6
 801416e:	7819      	ldrb	r1, [r3, #0]
 8014170:	1dfb      	adds	r3, r7, #7
 8014172:	7818      	ldrb	r0, [r3, #0]
 8014174:	2302      	movs	r3, #2
 8014176:	9300      	str	r3, [sp, #0]
 8014178:	0013      	movs	r3, r2
 801417a:	2206      	movs	r2, #6
 801417c:	f7ec fafa 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 8014180:	0003      	movs	r3, r0
 8014182:	7023      	strb	r3, [r4, #0]
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 8014184:	233f      	movs	r3, #63	; 0x3f
 8014186:	18fb      	adds	r3, r7, r3
 8014188:	781b      	ldrb	r3, [r3, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d027      	beq.n	80141de <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 801418e:	4a17      	ldr	r2, [pc, #92]	; (80141ec <USBPD_DPM_RequestGetManufacturerInfo+0xa8>)
 8014190:	240c      	movs	r4, #12
 8014192:	193b      	adds	r3, r7, r4
 8014194:	2132      	movs	r1, #50	; 0x32
 8014196:	0018      	movs	r0, r3
 8014198:	f006 fc8a 	bl	801aab0 <sniprintf>
 801419c:	0002      	movs	r2, r0
 801419e:	213e      	movs	r1, #62	; 0x3e
 80141a0:	187b      	adds	r3, r7, r1
 80141a2:	701a      	strb	r2, [r3, #0]
 80141a4:	187b      	adds	r3, r7, r1
 80141a6:	781b      	ldrb	r3, [r3, #0]
 80141a8:	2b31      	cmp	r3, #49	; 0x31
 80141aa:	d80d      	bhi.n	80141c8 <USBPD_DPM_RequestGetManufacturerInfo+0x84>
 80141ac:	193b      	adds	r3, r7, r4
 80141ae:	0018      	movs	r0, r3
 80141b0:	f7f2 f80c 	bl	80061cc <strlen>
 80141b4:	193a      	adds	r2, r7, r4
 80141b6:	1dfb      	adds	r3, r7, #7
 80141b8:	7819      	ldrb	r1, [r3, #0]
 80141ba:	9000      	str	r0, [sp, #0]
 80141bc:	0013      	movs	r3, r2
 80141be:	2200      	movs	r2, #0
 80141c0:	2006      	movs	r0, #6
 80141c2:	f7f8 fec5 	bl	800cf50 <USBPD_TRACE_Add>
 80141c6:	e00a      	b.n	80141de <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 80141c8:	230c      	movs	r3, #12
 80141ca:	18fa      	adds	r2, r7, r3
 80141cc:	1dfb      	adds	r3, r7, #7
 80141ce:	7819      	ldrb	r1, [r3, #0]
 80141d0:	2332      	movs	r3, #50	; 0x32
 80141d2:	9300      	str	r3, [sp, #0]
 80141d4:	0013      	movs	r3, r2
 80141d6:	2200      	movs	r2, #0
 80141d8:	2006      	movs	r0, #6
 80141da:	f7f8 feb9 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 80141de:	233f      	movs	r3, #63	; 0x3f
 80141e0:	18fb      	adds	r3, r7, r3
 80141e2:	781b      	ldrb	r3, [r3, #0]
}
 80141e4:	0018      	movs	r0, r3
 80141e6:	46bd      	mov	sp, r7
 80141e8:	b011      	add	sp, #68	; 0x44
 80141ea:	bd90      	pop	{r4, r7, pc}
 80141ec:	0801b9a8 	.word	0x0801b9a8

080141f0 <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 80141f0:	b5b0      	push	{r4, r5, r7, lr}
 80141f2:	b092      	sub	sp, #72	; 0x48
 80141f4:	af02      	add	r7, sp, #8
 80141f6:	0002      	movs	r2, r0
 80141f8:	1dfb      	adds	r3, r7, #7
 80141fa:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 80141fc:	253f      	movs	r5, #63	; 0x3f
 80141fe:	197c      	adds	r4, r7, r5
 8014200:	1dfb      	adds	r3, r7, #7
 8014202:	781b      	ldrb	r3, [r3, #0]
 8014204:	2200      	movs	r2, #0
 8014206:	2114      	movs	r1, #20
 8014208:	0018      	movs	r0, r3
 801420a:	f7ec f97b 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801420e:	0003      	movs	r3, r0
 8014210:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 8014212:	197b      	adds	r3, r7, r5
 8014214:	781b      	ldrb	r3, [r3, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d027      	beq.n	801426a <USBPD_DPM_RequestGetPPS_Status+0x7a>
 801421a:	4a17      	ldr	r2, [pc, #92]	; (8014278 <USBPD_DPM_RequestGetPPS_Status+0x88>)
 801421c:	240c      	movs	r4, #12
 801421e:	193b      	adds	r3, r7, r4
 8014220:	2132      	movs	r1, #50	; 0x32
 8014222:	0018      	movs	r0, r3
 8014224:	f006 fc44 	bl	801aab0 <sniprintf>
 8014228:	0002      	movs	r2, r0
 801422a:	213e      	movs	r1, #62	; 0x3e
 801422c:	187b      	adds	r3, r7, r1
 801422e:	701a      	strb	r2, [r3, #0]
 8014230:	187b      	adds	r3, r7, r1
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b31      	cmp	r3, #49	; 0x31
 8014236:	d80d      	bhi.n	8014254 <USBPD_DPM_RequestGetPPS_Status+0x64>
 8014238:	193b      	adds	r3, r7, r4
 801423a:	0018      	movs	r0, r3
 801423c:	f7f1 ffc6 	bl	80061cc <strlen>
 8014240:	193a      	adds	r2, r7, r4
 8014242:	1dfb      	adds	r3, r7, #7
 8014244:	7819      	ldrb	r1, [r3, #0]
 8014246:	9000      	str	r0, [sp, #0]
 8014248:	0013      	movs	r3, r2
 801424a:	2200      	movs	r2, #0
 801424c:	2006      	movs	r0, #6
 801424e:	f7f8 fe7f 	bl	800cf50 <USBPD_TRACE_Add>
 8014252:	e00a      	b.n	801426a <USBPD_DPM_RequestGetPPS_Status+0x7a>
 8014254:	230c      	movs	r3, #12
 8014256:	18fa      	adds	r2, r7, r3
 8014258:	1dfb      	adds	r3, r7, #7
 801425a:	7819      	ldrb	r1, [r3, #0]
 801425c:	2332      	movs	r3, #50	; 0x32
 801425e:	9300      	str	r3, [sp, #0]
 8014260:	0013      	movs	r3, r2
 8014262:	2200      	movs	r2, #0
 8014264:	2006      	movs	r0, #6
 8014266:	f7f8 fe73 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 801426a:	233f      	movs	r3, #63	; 0x3f
 801426c:	18fb      	adds	r3, r7, r3
 801426e:	781b      	ldrb	r3, [r3, #0]
}
 8014270:	0018      	movs	r0, r3
 8014272:	46bd      	mov	sp, r7
 8014274:	b010      	add	sp, #64	; 0x40
 8014276:	bdb0      	pop	{r4, r5, r7, pc}
 8014278:	0801b9d0 	.word	0x0801b9d0

0801427c <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 801427c:	b5b0      	push	{r4, r5, r7, lr}
 801427e:	b092      	sub	sp, #72	; 0x48
 8014280:	af02      	add	r7, sp, #8
 8014282:	0002      	movs	r2, r0
 8014284:	1dfb      	adds	r3, r7, #7
 8014286:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 8014288:	253f      	movs	r5, #63	; 0x3f
 801428a:	197c      	adds	r4, r7, r5
 801428c:	1dfb      	adds	r3, r7, #7
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	2200      	movs	r2, #0
 8014292:	2112      	movs	r1, #18
 8014294:	0018      	movs	r0, r3
 8014296:	f7ec f935 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801429a:	0003      	movs	r3, r0
 801429c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 801429e:	197b      	adds	r3, r7, r5
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d027      	beq.n	80142f6 <USBPD_DPM_RequestGetStatus+0x7a>
 80142a6:	4a17      	ldr	r2, [pc, #92]	; (8014304 <USBPD_DPM_RequestGetStatus+0x88>)
 80142a8:	240c      	movs	r4, #12
 80142aa:	193b      	adds	r3, r7, r4
 80142ac:	2132      	movs	r1, #50	; 0x32
 80142ae:	0018      	movs	r0, r3
 80142b0:	f006 fbfe 	bl	801aab0 <sniprintf>
 80142b4:	0002      	movs	r2, r0
 80142b6:	213e      	movs	r1, #62	; 0x3e
 80142b8:	187b      	adds	r3, r7, r1
 80142ba:	701a      	strb	r2, [r3, #0]
 80142bc:	187b      	adds	r3, r7, r1
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	2b31      	cmp	r3, #49	; 0x31
 80142c2:	d80d      	bhi.n	80142e0 <USBPD_DPM_RequestGetStatus+0x64>
 80142c4:	193b      	adds	r3, r7, r4
 80142c6:	0018      	movs	r0, r3
 80142c8:	f7f1 ff80 	bl	80061cc <strlen>
 80142cc:	193a      	adds	r2, r7, r4
 80142ce:	1dfb      	adds	r3, r7, #7
 80142d0:	7819      	ldrb	r1, [r3, #0]
 80142d2:	9000      	str	r0, [sp, #0]
 80142d4:	0013      	movs	r3, r2
 80142d6:	2200      	movs	r2, #0
 80142d8:	2006      	movs	r0, #6
 80142da:	f7f8 fe39 	bl	800cf50 <USBPD_TRACE_Add>
 80142de:	e00a      	b.n	80142f6 <USBPD_DPM_RequestGetStatus+0x7a>
 80142e0:	230c      	movs	r3, #12
 80142e2:	18fa      	adds	r2, r7, r3
 80142e4:	1dfb      	adds	r3, r7, #7
 80142e6:	7819      	ldrb	r1, [r3, #0]
 80142e8:	2332      	movs	r3, #50	; 0x32
 80142ea:	9300      	str	r3, [sp, #0]
 80142ec:	0013      	movs	r3, r2
 80142ee:	2200      	movs	r2, #0
 80142f0:	2006      	movs	r0, #6
 80142f2:	f7f8 fe2d 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 80142f6:	233f      	movs	r3, #63	; 0x3f
 80142f8:	18fb      	adds	r3, r7, r3
 80142fa:	781b      	ldrb	r3, [r3, #0]
}
 80142fc:	0018      	movs	r0, r3
 80142fe:	46bd      	mov	sp, r7
 8014300:	b010      	add	sp, #64	; 0x40
 8014302:	bdb0      	pop	{r4, r5, r7, pc}
 8014304:	0801b9fc 	.word	0x0801b9fc

08014308 <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 8014308:	b5b0      	push	{r4, r5, r7, lr}
 801430a:	b092      	sub	sp, #72	; 0x48
 801430c:	af02      	add	r7, sp, #8
 801430e:	0002      	movs	r2, r0
 8014310:	1dfb      	adds	r3, r7, #7
 8014312:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 8014314:	253f      	movs	r5, #63	; 0x3f
 8014316:	197c      	adds	r4, r7, r5
 8014318:	1dfb      	adds	r3, r7, #7
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	2200      	movs	r2, #0
 801431e:	2113      	movs	r1, #19
 8014320:	0018      	movs	r0, r3
 8014322:	f7ec f8ef 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 8014326:	0003      	movs	r3, r0
 8014328:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 801432a:	197b      	adds	r3, r7, r5
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d027      	beq.n	8014382 <USBPD_DPM_RequestFastRoleSwap+0x7a>
 8014332:	4a17      	ldr	r2, [pc, #92]	; (8014390 <USBPD_DPM_RequestFastRoleSwap+0x88>)
 8014334:	240c      	movs	r4, #12
 8014336:	193b      	adds	r3, r7, r4
 8014338:	2132      	movs	r1, #50	; 0x32
 801433a:	0018      	movs	r0, r3
 801433c:	f006 fbb8 	bl	801aab0 <sniprintf>
 8014340:	0002      	movs	r2, r0
 8014342:	213e      	movs	r1, #62	; 0x3e
 8014344:	187b      	adds	r3, r7, r1
 8014346:	701a      	strb	r2, [r3, #0]
 8014348:	187b      	adds	r3, r7, r1
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	2b31      	cmp	r3, #49	; 0x31
 801434e:	d80d      	bhi.n	801436c <USBPD_DPM_RequestFastRoleSwap+0x64>
 8014350:	193b      	adds	r3, r7, r4
 8014352:	0018      	movs	r0, r3
 8014354:	f7f1 ff3a 	bl	80061cc <strlen>
 8014358:	193a      	adds	r2, r7, r4
 801435a:	1dfb      	adds	r3, r7, #7
 801435c:	7819      	ldrb	r1, [r3, #0]
 801435e:	9000      	str	r0, [sp, #0]
 8014360:	0013      	movs	r3, r2
 8014362:	2200      	movs	r2, #0
 8014364:	2006      	movs	r0, #6
 8014366:	f7f8 fdf3 	bl	800cf50 <USBPD_TRACE_Add>
 801436a:	e00a      	b.n	8014382 <USBPD_DPM_RequestFastRoleSwap+0x7a>
 801436c:	230c      	movs	r3, #12
 801436e:	18fa      	adds	r2, r7, r3
 8014370:	1dfb      	adds	r3, r7, #7
 8014372:	7819      	ldrb	r1, [r3, #0]
 8014374:	2332      	movs	r3, #50	; 0x32
 8014376:	9300      	str	r3, [sp, #0]
 8014378:	0013      	movs	r3, r2
 801437a:	2200      	movs	r2, #0
 801437c:	2006      	movs	r0, #6
 801437e:	f7f8 fde7 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8014382:	233f      	movs	r3, #63	; 0x3f
 8014384:	18fb      	adds	r3, r7, r3
 8014386:	781b      	ldrb	r3, [r3, #0]
}
 8014388:	0018      	movs	r0, r3
 801438a:	46bd      	mov	sp, r7
 801438c:	b010      	add	sp, #64	; 0x40
 801438e:	bdb0      	pop	{r4, r5, r7, pc}
 8014390:	0801ba24 	.word	0x0801ba24

08014394 <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 8014394:	b5b0      	push	{r4, r5, r7, lr}
 8014396:	b092      	sub	sp, #72	; 0x48
 8014398:	af02      	add	r7, sp, #8
 801439a:	0002      	movs	r2, r0
 801439c:	1dfb      	adds	r3, r7, #7
 801439e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 80143a0:	253f      	movs	r5, #63	; 0x3f
 80143a2:	197c      	adds	r4, r7, r5
 80143a4:	1dfb      	adds	r3, r7, #7
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	2200      	movs	r2, #0
 80143aa:	2115      	movs	r1, #21
 80143ac:	0018      	movs	r0, r3
 80143ae:	f7ec f8a9 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 80143b2:	0003      	movs	r3, r0
 80143b4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 80143b6:	197b      	adds	r3, r7, r5
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d027      	beq.n	801440e <USBPD_DPM_RequestGetCountryCodes+0x7a>
 80143be:	4a17      	ldr	r2, [pc, #92]	; (801441c <USBPD_DPM_RequestGetCountryCodes+0x88>)
 80143c0:	240c      	movs	r4, #12
 80143c2:	193b      	adds	r3, r7, r4
 80143c4:	2132      	movs	r1, #50	; 0x32
 80143c6:	0018      	movs	r0, r3
 80143c8:	f006 fb72 	bl	801aab0 <sniprintf>
 80143cc:	0002      	movs	r2, r0
 80143ce:	213e      	movs	r1, #62	; 0x3e
 80143d0:	187b      	adds	r3, r7, r1
 80143d2:	701a      	strb	r2, [r3, #0]
 80143d4:	187b      	adds	r3, r7, r1
 80143d6:	781b      	ldrb	r3, [r3, #0]
 80143d8:	2b31      	cmp	r3, #49	; 0x31
 80143da:	d80d      	bhi.n	80143f8 <USBPD_DPM_RequestGetCountryCodes+0x64>
 80143dc:	193b      	adds	r3, r7, r4
 80143de:	0018      	movs	r0, r3
 80143e0:	f7f1 fef4 	bl	80061cc <strlen>
 80143e4:	193a      	adds	r2, r7, r4
 80143e6:	1dfb      	adds	r3, r7, #7
 80143e8:	7819      	ldrb	r1, [r3, #0]
 80143ea:	9000      	str	r0, [sp, #0]
 80143ec:	0013      	movs	r3, r2
 80143ee:	2200      	movs	r2, #0
 80143f0:	2006      	movs	r0, #6
 80143f2:	f7f8 fdad 	bl	800cf50 <USBPD_TRACE_Add>
 80143f6:	e00a      	b.n	801440e <USBPD_DPM_RequestGetCountryCodes+0x7a>
 80143f8:	230c      	movs	r3, #12
 80143fa:	18fa      	adds	r2, r7, r3
 80143fc:	1dfb      	adds	r3, r7, #7
 80143fe:	7819      	ldrb	r1, [r3, #0]
 8014400:	2332      	movs	r3, #50	; 0x32
 8014402:	9300      	str	r3, [sp, #0]
 8014404:	0013      	movs	r3, r2
 8014406:	2200      	movs	r2, #0
 8014408:	2006      	movs	r0, #6
 801440a:	f7f8 fda1 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 801440e:	233f      	movs	r3, #63	; 0x3f
 8014410:	18fb      	adds	r3, r7, r3
 8014412:	781b      	ldrb	r3, [r3, #0]
}
 8014414:	0018      	movs	r0, r3
 8014416:	46bd      	mov	sp, r7
 8014418:	b010      	add	sp, #64	; 0x40
 801441a:	bdb0      	pop	{r4, r5, r7, pc}
 801441c:	0801ba44 	.word	0x0801ba44

08014420 <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 8014420:	b5b0      	push	{r4, r5, r7, lr}
 8014422:	b092      	sub	sp, #72	; 0x48
 8014424:	af02      	add	r7, sp, #8
 8014426:	0002      	movs	r2, r0
 8014428:	1dfb      	adds	r3, r7, #7
 801442a:	701a      	strb	r2, [r3, #0]
 801442c:	1d3b      	adds	r3, r7, #4
 801442e:	1c0a      	adds	r2, r1, #0
 8014430:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 8014432:	253f      	movs	r5, #63	; 0x3f
 8014434:	197c      	adds	r4, r7, r5
 8014436:	1d3a      	adds	r2, r7, #4
 8014438:	1dfb      	adds	r3, r7, #7
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	2107      	movs	r1, #7
 801443e:	0018      	movs	r0, r3
 8014440:	f7ec f90c 	bl	800065c <USBPD_PE_Request_DataMessage>
 8014444:	0003      	movs	r3, r0
 8014446:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 8014448:	197b      	adds	r3, r7, r5
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d027      	beq.n	80144a0 <USBPD_DPM_RequestGetCountryInfo+0x80>
 8014450:	4a17      	ldr	r2, [pc, #92]	; (80144b0 <USBPD_DPM_RequestGetCountryInfo+0x90>)
 8014452:	240c      	movs	r4, #12
 8014454:	193b      	adds	r3, r7, r4
 8014456:	2132      	movs	r1, #50	; 0x32
 8014458:	0018      	movs	r0, r3
 801445a:	f006 fb29 	bl	801aab0 <sniprintf>
 801445e:	0002      	movs	r2, r0
 8014460:	213e      	movs	r1, #62	; 0x3e
 8014462:	187b      	adds	r3, r7, r1
 8014464:	701a      	strb	r2, [r3, #0]
 8014466:	187b      	adds	r3, r7, r1
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	2b31      	cmp	r3, #49	; 0x31
 801446c:	d80d      	bhi.n	801448a <USBPD_DPM_RequestGetCountryInfo+0x6a>
 801446e:	193b      	adds	r3, r7, r4
 8014470:	0018      	movs	r0, r3
 8014472:	f7f1 feab 	bl	80061cc <strlen>
 8014476:	193a      	adds	r2, r7, r4
 8014478:	1dfb      	adds	r3, r7, #7
 801447a:	7819      	ldrb	r1, [r3, #0]
 801447c:	9000      	str	r0, [sp, #0]
 801447e:	0013      	movs	r3, r2
 8014480:	2200      	movs	r2, #0
 8014482:	2006      	movs	r0, #6
 8014484:	f7f8 fd64 	bl	800cf50 <USBPD_TRACE_Add>
 8014488:	e00a      	b.n	80144a0 <USBPD_DPM_RequestGetCountryInfo+0x80>
 801448a:	230c      	movs	r3, #12
 801448c:	18fa      	adds	r2, r7, r3
 801448e:	1dfb      	adds	r3, r7, #7
 8014490:	7819      	ldrb	r1, [r3, #0]
 8014492:	2332      	movs	r3, #50	; 0x32
 8014494:	9300      	str	r3, [sp, #0]
 8014496:	0013      	movs	r3, r2
 8014498:	2200      	movs	r2, #0
 801449a:	2006      	movs	r0, #6
 801449c:	f7f8 fd58 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 80144a0:	233f      	movs	r3, #63	; 0x3f
 80144a2:	18fb      	adds	r3, r7, r3
 80144a4:	781b      	ldrb	r3, [r3, #0]
}
 80144a6:	0018      	movs	r0, r3
 80144a8:	46bd      	mov	sp, r7
 80144aa:	b010      	add	sp, #64	; 0x40
 80144ac:	bdb0      	pop	{r4, r5, r7, pc}
 80144ae:	46c0      	nop			; (mov r8, r8)
 80144b0:	0801ba70 	.word	0x0801ba70

080144b4 <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 80144b4:	b5b0      	push	{r4, r5, r7, lr}
 80144b6:	b092      	sub	sp, #72	; 0x48
 80144b8:	af02      	add	r7, sp, #8
 80144ba:	0002      	movs	r2, r0
 80144bc:	6039      	str	r1, [r7, #0]
 80144be:	1dfb      	adds	r3, r7, #7
 80144c0:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 80144c2:	253f      	movs	r5, #63	; 0x3f
 80144c4:	197c      	adds	r4, r7, r5
 80144c6:	683a      	ldr	r2, [r7, #0]
 80144c8:	1dfb      	adds	r3, r7, #7
 80144ca:	7818      	ldrb	r0, [r3, #0]
 80144cc:	2301      	movs	r3, #1
 80144ce:	9300      	str	r3, [sp, #0]
 80144d0:	0013      	movs	r3, r2
 80144d2:	2203      	movs	r2, #3
 80144d4:	2100      	movs	r1, #0
 80144d6:	f7ec f94d 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 80144da:	0003      	movs	r3, r0
 80144dc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 80144de:	197b      	adds	r3, r7, r5
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d027      	beq.n	8014536 <USBPD_DPM_RequestGetBatteryCapability+0x82>
 80144e6:	4a17      	ldr	r2, [pc, #92]	; (8014544 <USBPD_DPM_RequestGetBatteryCapability+0x90>)
 80144e8:	240c      	movs	r4, #12
 80144ea:	193b      	adds	r3, r7, r4
 80144ec:	2132      	movs	r1, #50	; 0x32
 80144ee:	0018      	movs	r0, r3
 80144f0:	f006 fade 	bl	801aab0 <sniprintf>
 80144f4:	0002      	movs	r2, r0
 80144f6:	213e      	movs	r1, #62	; 0x3e
 80144f8:	187b      	adds	r3, r7, r1
 80144fa:	701a      	strb	r2, [r3, #0]
 80144fc:	187b      	adds	r3, r7, r1
 80144fe:	781b      	ldrb	r3, [r3, #0]
 8014500:	2b31      	cmp	r3, #49	; 0x31
 8014502:	d80d      	bhi.n	8014520 <USBPD_DPM_RequestGetBatteryCapability+0x6c>
 8014504:	193b      	adds	r3, r7, r4
 8014506:	0018      	movs	r0, r3
 8014508:	f7f1 fe60 	bl	80061cc <strlen>
 801450c:	193a      	adds	r2, r7, r4
 801450e:	1dfb      	adds	r3, r7, #7
 8014510:	7819      	ldrb	r1, [r3, #0]
 8014512:	9000      	str	r0, [sp, #0]
 8014514:	0013      	movs	r3, r2
 8014516:	2200      	movs	r2, #0
 8014518:	2006      	movs	r0, #6
 801451a:	f7f8 fd19 	bl	800cf50 <USBPD_TRACE_Add>
 801451e:	e00a      	b.n	8014536 <USBPD_DPM_RequestGetBatteryCapability+0x82>
 8014520:	230c      	movs	r3, #12
 8014522:	18fa      	adds	r2, r7, r3
 8014524:	1dfb      	adds	r3, r7, #7
 8014526:	7819      	ldrb	r1, [r3, #0]
 8014528:	2332      	movs	r3, #50	; 0x32
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	0013      	movs	r3, r2
 801452e:	2200      	movs	r2, #0
 8014530:	2006      	movs	r0, #6
 8014532:	f7f8 fd0d 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8014536:	233f      	movs	r3, #63	; 0x3f
 8014538:	18fb      	adds	r3, r7, r3
 801453a:	781b      	ldrb	r3, [r3, #0]
}
 801453c:	0018      	movs	r0, r3
 801453e:	46bd      	mov	sp, r7
 8014540:	b010      	add	sp, #64	; 0x40
 8014542:	bdb0      	pop	{r4, r5, r7, pc}
 8014544:	0801ba9c 	.word	0x0801ba9c

08014548 <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 8014548:	b5b0      	push	{r4, r5, r7, lr}
 801454a:	b092      	sub	sp, #72	; 0x48
 801454c:	af02      	add	r7, sp, #8
 801454e:	0002      	movs	r2, r0
 8014550:	6039      	str	r1, [r7, #0]
 8014552:	1dfb      	adds	r3, r7, #7
 8014554:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 8014556:	253f      	movs	r5, #63	; 0x3f
 8014558:	197c      	adds	r4, r7, r5
 801455a:	683a      	ldr	r2, [r7, #0]
 801455c:	1dfb      	adds	r3, r7, #7
 801455e:	7818      	ldrb	r0, [r3, #0]
 8014560:	2301      	movs	r3, #1
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	0013      	movs	r3, r2
 8014566:	2204      	movs	r2, #4
 8014568:	2100      	movs	r1, #0
 801456a:	f7ec f903 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801456e:	0003      	movs	r3, r0
 8014570:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 8014572:	197b      	adds	r3, r7, r5
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d027      	beq.n	80145ca <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801457a:	4a17      	ldr	r2, [pc, #92]	; (80145d8 <USBPD_DPM_RequestGetBatteryStatus+0x90>)
 801457c:	240c      	movs	r4, #12
 801457e:	193b      	adds	r3, r7, r4
 8014580:	2132      	movs	r1, #50	; 0x32
 8014582:	0018      	movs	r0, r3
 8014584:	f006 fa94 	bl	801aab0 <sniprintf>
 8014588:	0002      	movs	r2, r0
 801458a:	213e      	movs	r1, #62	; 0x3e
 801458c:	187b      	adds	r3, r7, r1
 801458e:	701a      	strb	r2, [r3, #0]
 8014590:	187b      	adds	r3, r7, r1
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	2b31      	cmp	r3, #49	; 0x31
 8014596:	d80d      	bhi.n	80145b4 <USBPD_DPM_RequestGetBatteryStatus+0x6c>
 8014598:	193b      	adds	r3, r7, r4
 801459a:	0018      	movs	r0, r3
 801459c:	f7f1 fe16 	bl	80061cc <strlen>
 80145a0:	193a      	adds	r2, r7, r4
 80145a2:	1dfb      	adds	r3, r7, #7
 80145a4:	7819      	ldrb	r1, [r3, #0]
 80145a6:	9000      	str	r0, [sp, #0]
 80145a8:	0013      	movs	r3, r2
 80145aa:	2200      	movs	r2, #0
 80145ac:	2006      	movs	r0, #6
 80145ae:	f7f8 fccf 	bl	800cf50 <USBPD_TRACE_Add>
 80145b2:	e00a      	b.n	80145ca <USBPD_DPM_RequestGetBatteryStatus+0x82>
 80145b4:	230c      	movs	r3, #12
 80145b6:	18fa      	adds	r2, r7, r3
 80145b8:	1dfb      	adds	r3, r7, #7
 80145ba:	7819      	ldrb	r1, [r3, #0]
 80145bc:	2332      	movs	r3, #50	; 0x32
 80145be:	9300      	str	r3, [sp, #0]
 80145c0:	0013      	movs	r3, r2
 80145c2:	2200      	movs	r2, #0
 80145c4:	2006      	movs	r0, #6
 80145c6:	f7f8 fcc3 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 80145ca:	233f      	movs	r3, #63	; 0x3f
 80145cc:	18fb      	adds	r3, r7, r3
 80145ce:	781b      	ldrb	r3, [r3, #0]
}
 80145d0:	0018      	movs	r0, r3
 80145d2:	46bd      	mov	sp, r7
 80145d4:	b010      	add	sp, #64	; 0x40
 80145d6:	bdb0      	pop	{r4, r5, r7, pc}
 80145d8:	0801bac8 	.word	0x0801bac8

080145dc <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 80145dc:	b590      	push	{r4, r7, lr}
 80145de:	b093      	sub	sp, #76	; 0x4c
 80145e0:	af02      	add	r7, sp, #8
 80145e2:	0002      	movs	r2, r0
 80145e4:	1dfb      	adds	r3, r7, #7
 80145e6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 80145e8:	213f      	movs	r1, #63	; 0x3f
 80145ea:	187b      	adds	r3, r7, r1
 80145ec:	2202      	movs	r2, #2
 80145ee:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 80145f0:	187b      	adds	r3, r7, r1
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d027      	beq.n	8014648 <USBPD_DPM_RequestSecurityRequest+0x6c>
 80145f8:	4a17      	ldr	r2, [pc, #92]	; (8014658 <USBPD_DPM_RequestSecurityRequest+0x7c>)
 80145fa:	240c      	movs	r4, #12
 80145fc:	193b      	adds	r3, r7, r4
 80145fe:	2132      	movs	r1, #50	; 0x32
 8014600:	0018      	movs	r0, r3
 8014602:	f006 fa55 	bl	801aab0 <sniprintf>
 8014606:	0002      	movs	r2, r0
 8014608:	213e      	movs	r1, #62	; 0x3e
 801460a:	187b      	adds	r3, r7, r1
 801460c:	701a      	strb	r2, [r3, #0]
 801460e:	187b      	adds	r3, r7, r1
 8014610:	781b      	ldrb	r3, [r3, #0]
 8014612:	2b31      	cmp	r3, #49	; 0x31
 8014614:	d80d      	bhi.n	8014632 <USBPD_DPM_RequestSecurityRequest+0x56>
 8014616:	193b      	adds	r3, r7, r4
 8014618:	0018      	movs	r0, r3
 801461a:	f7f1 fdd7 	bl	80061cc <strlen>
 801461e:	193a      	adds	r2, r7, r4
 8014620:	1dfb      	adds	r3, r7, #7
 8014622:	7819      	ldrb	r1, [r3, #0]
 8014624:	9000      	str	r0, [sp, #0]
 8014626:	0013      	movs	r3, r2
 8014628:	2200      	movs	r2, #0
 801462a:	2006      	movs	r0, #6
 801462c:	f7f8 fc90 	bl	800cf50 <USBPD_TRACE_Add>
 8014630:	e00a      	b.n	8014648 <USBPD_DPM_RequestSecurityRequest+0x6c>
 8014632:	230c      	movs	r3, #12
 8014634:	18fa      	adds	r2, r7, r3
 8014636:	1dfb      	adds	r3, r7, #7
 8014638:	7819      	ldrb	r1, [r3, #0]
 801463a:	2332      	movs	r3, #50	; 0x32
 801463c:	9300      	str	r3, [sp, #0]
 801463e:	0013      	movs	r3, r2
 8014640:	2200      	movs	r2, #0
 8014642:	2006      	movs	r0, #6
 8014644:	f7f8 fc84 	bl	800cf50 <USBPD_TRACE_Add>
  return _status;
 8014648:	233f      	movs	r3, #63	; 0x3f
 801464a:	18fb      	adds	r3, r7, r3
 801464c:	781b      	ldrb	r3, [r3, #0]
}
 801464e:	0018      	movs	r0, r3
 8014650:	46bd      	mov	sp, r7
 8014652:	b011      	add	sp, #68	; 0x44
 8014654:	bd90      	pop	{r4, r7, pc}
 8014656:	46c0      	nop			; (mov r8, r8)
 8014658:	0801baf8 	.word	0x0801baf8

0801465c <USBPD_DPM_RequestSRCPDO>:
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @param  RequestedCurrent Requested current (in MA and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSRCPDO(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage, uint16_t RequestedCurrent)
{
 801465c:	b5b0      	push	{r4, r5, r7, lr}
 801465e:	b094      	sub	sp, #80	; 0x50
 8014660:	af02      	add	r7, sp, #8
 8014662:	0005      	movs	r5, r0
 8014664:	000c      	movs	r4, r1
 8014666:	0010      	movs	r0, r2
 8014668:	0019      	movs	r1, r3
 801466a:	1dfb      	adds	r3, r7, #7
 801466c:	1c2a      	adds	r2, r5, #0
 801466e:	701a      	strb	r2, [r3, #0]
 8014670:	1dbb      	adds	r3, r7, #6
 8014672:	1c22      	adds	r2, r4, #0
 8014674:	701a      	strb	r2, [r3, #0]
 8014676:	1d3b      	adds	r3, r7, #4
 8014678:	1c02      	adds	r2, r0, #0
 801467a:	801a      	strh	r2, [r3, #0]
 801467c:	1cbb      	adds	r3, r7, #2
 801467e:	1c0a      	adds	r2, r1, #0
 8014680:	801a      	strh	r2, [r3, #0]
	USBPD_StatusTypeDef _status = USBPD_ERROR;
 8014682:	2547      	movs	r5, #71	; 0x47
 8014684:	197b      	adds	r3, r7, r5
 8014686:	2202      	movs	r2, #2
 8014688:	701a      	strb	r2, [r3, #0]
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;

	/* Initialize RDO object*/
	rdo.d32 = 0;
 801468a:	2300      	movs	r3, #0
 801468c:	643b      	str	r3, [r7, #64]	; 0x40

	USER_SERV_SNK_BuildRequestedRDO(PortNum,IndexSrcPDO, RequestedVoltage, RequestedCurrent, &rdo, &pdo_object);
 801468e:	1dbb      	adds	r3, r7, #6
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	b299      	uxth	r1, r3
 8014694:	1cbb      	adds	r3, r7, #2
 8014696:	881c      	ldrh	r4, [r3, #0]
 8014698:	1d3b      	adds	r3, r7, #4
 801469a:	881a      	ldrh	r2, [r3, #0]
 801469c:	1dfb      	adds	r3, r7, #7
 801469e:	7818      	ldrb	r0, [r3, #0]
 80146a0:	233c      	movs	r3, #60	; 0x3c
 80146a2:	18fb      	adds	r3, r7, r3
 80146a4:	9301      	str	r3, [sp, #4]
 80146a6:	2340      	movs	r3, #64	; 0x40
 80146a8:	18fb      	adds	r3, r7, r3
 80146aa:	9300      	str	r3, [sp, #0]
 80146ac:	0023      	movs	r3, r4
 80146ae:	f000 fec7 	bl	8015440 <USER_SERV_SNK_BuildRequestedRDO>

	/*Send requested rdo to Policy Engine */
	_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 80146b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80146b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80146b6:	197c      	adds	r4, r7, r5
 80146b8:	1dfb      	adds	r3, r7, #7
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	0018      	movs	r0, r3
 80146be:	f7ec f823 	bl	8000708 <USBPD_PE_Send_Request>
 80146c2:	0003      	movs	r3, r0
 80146c4:	7023      	strb	r3, [r4, #0]

    /* USER CODE END USBPD_DPM_RequestMessageRequest */
	DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 80146c6:	197b      	adds	r3, r7, r5
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d027      	beq.n	801471e <USBPD_DPM_RequestSRCPDO+0xc2>
 80146ce:	4a17      	ldr	r2, [pc, #92]	; (801472c <USBPD_DPM_RequestSRCPDO+0xd0>)
 80146d0:	2408      	movs	r4, #8
 80146d2:	193b      	adds	r3, r7, r4
 80146d4:	2132      	movs	r1, #50	; 0x32
 80146d6:	0018      	movs	r0, r3
 80146d8:	f006 f9ea 	bl	801aab0 <sniprintf>
 80146dc:	0002      	movs	r2, r0
 80146de:	2146      	movs	r1, #70	; 0x46
 80146e0:	187b      	adds	r3, r7, r1
 80146e2:	701a      	strb	r2, [r3, #0]
 80146e4:	187b      	adds	r3, r7, r1
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	2b31      	cmp	r3, #49	; 0x31
 80146ea:	d80d      	bhi.n	8014708 <USBPD_DPM_RequestSRCPDO+0xac>
 80146ec:	193b      	adds	r3, r7, r4
 80146ee:	0018      	movs	r0, r3
 80146f0:	f7f1 fd6c 	bl	80061cc <strlen>
 80146f4:	193a      	adds	r2, r7, r4
 80146f6:	1dfb      	adds	r3, r7, #7
 80146f8:	7819      	ldrb	r1, [r3, #0]
 80146fa:	9000      	str	r0, [sp, #0]
 80146fc:	0013      	movs	r3, r2
 80146fe:	2200      	movs	r2, #0
 8014700:	2006      	movs	r0, #6
 8014702:	f7f8 fc25 	bl	800cf50 <USBPD_TRACE_Add>
 8014706:	e00a      	b.n	801471e <USBPD_DPM_RequestSRCPDO+0xc2>
 8014708:	2308      	movs	r3, #8
 801470a:	18fa      	adds	r2, r7, r3
 801470c:	1dfb      	adds	r3, r7, #7
 801470e:	7819      	ldrb	r1, [r3, #0]
 8014710:	2332      	movs	r3, #50	; 0x32
 8014712:	9300      	str	r3, [sp, #0]
 8014714:	0013      	movs	r3, r2
 8014716:	2200      	movs	r2, #0
 8014718:	2006      	movs	r0, #6
 801471a:	f7f8 fc19 	bl	800cf50 <USBPD_TRACE_Add>
	return _status;
 801471e:	2347      	movs	r3, #71	; 0x47
 8014720:	18fb      	adds	r3, r7, r3
 8014722:	781b      	ldrb	r3, [r3, #0]
}
 8014724:	0018      	movs	r0, r3
 8014726:	46bd      	mov	sp, r7
 8014728:	b012      	add	sp, #72	; 0x48
 801472a:	bdb0      	pop	{r4, r5, r7, pc}
 801472c:	0801b6a4 	.word	0x0801b6a4

08014730 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b082      	sub	sp, #8
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801473c:	b29b      	uxth	r3, r3
 801473e:	051b      	lsls	r3, r3, #20
 8014740:	0d1b      	lsrs	r3, r3, #20
 8014742:	b29b      	uxth	r3, r3
}
 8014744:	0018      	movs	r0, r3
 8014746:	46bd      	mov	sp, r7
 8014748:	b002      	add	sp, #8
 801474a:	bd80      	pop	{r7, pc}

0801474c <BSP_PWR_VBUSGetVoltage>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Voltage measured voltage level (in mV)
  */
__weak uint32_t BSP_PWR_VBUSGetVoltage(uint32_t PortId)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b086      	sub	sp, #24
 8014750:	af02      	add	r7, sp, #8
 8014752:	6078      	str	r0, [r7, #4]
  PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetVoltage");
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	b2d9      	uxtb	r1, r3
 8014758:	4b0a      	ldr	r3, [pc, #40]	; (8014784 <BSP_PWR_VBUSGetVoltage+0x38>)
 801475a:	2227      	movs	r2, #39	; 0x27
 801475c:	9200      	str	r2, [sp, #0]
 801475e:	2200      	movs	r2, #0
 8014760:	2006      	movs	r0, #6
 8014762:	f7f8 fbf5 	bl	800cf50 <USBPD_TRACE_Add>
/* USER CODE BEGIN BSP_PWR_VBUSGetVoltage */
  uint32_t voltage = 0;
 8014766:	2300      	movs	r3, #0
 8014768:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetVoltage(PortId, &voltage);
 801476a:	230c      	movs	r3, #12
 801476c:	18fa      	adds	r2, r7, r3
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	0011      	movs	r1, r2
 8014772:	0018      	movs	r0, r3
 8014774:	f000 f856 	bl	8014824 <BSP_USBPD_PWR_VBUSGetVoltage>
  return voltage;
 8014778:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetVoltage */
}
 801477a:	0018      	movs	r0, r3
 801477c:	46bd      	mov	sp, r7
 801477e:	b004      	add	sp, #16
 8014780:	bd80      	pop	{r7, pc}
 8014782:	46c0      	nop			; (mov r8, r8)
 8014784:	0801bc98 	.word	0x0801bc98

08014788 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b084      	sub	sp, #16
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8014790:	2300      	movs	r3, #0
 8014792:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2b01      	cmp	r3, #1
 8014798:	d902      	bls.n	80147a0 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801479a:	2302      	movs	r3, #2
 801479c:	425b      	negs	r3, r3
 801479e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80147a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 80147a2:	0018      	movs	r0, r3
 80147a4:	46bd      	mov	sp, r7
 80147a6:	b004      	add	sp, #16
 80147a8:	bd80      	pop	{r7, pc}
	...

080147ac <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b086      	sub	sp, #24
 80147b0:	af02      	add	r7, sp, #8
 80147b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80147b4:	2300      	movs	r3, #0
 80147b6:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2b01      	cmp	r3, #1
 80147bc:	d903      	bls.n	80147c6 <BSP_USBPD_PWR_VBUSInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80147be:	2302      	movs	r3, #2
 80147c0:	425b      	negs	r3, r3
 80147c2:	60fb      	str	r3, [r7, #12]
 80147c4:	e008      	b.n	80147d8 <BSP_USBPD_PWR_VBUSInit+0x2c>
  {
    /* !!!
      BSP_PWR_VBUSInit is obsolete. You may need to move your user code
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	b2d9      	uxtb	r1, r3
 80147ca:	4b06      	ldr	r3, [pc, #24]	; (80147e4 <BSP_USBPD_PWR_VBUSInit+0x38>)
 80147cc:	2225      	movs	r2, #37	; 0x25
 80147ce:	9200      	str	r2, [sp, #0]
 80147d0:	2200      	movs	r2, #0
 80147d2:	2006      	movs	r0, #6
 80147d4:	f7f8 fbbc 	bl	800cf50 <USBPD_TRACE_Add>
  }

  return ret;
 80147d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 80147da:	0018      	movs	r0, r3
 80147dc:	46bd      	mov	sp, r7
 80147de:	b004      	add	sp, #16
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	46c0      	nop			; (mov r8, r8)
 80147e4:	0801bed4 	.word	0x0801bed4

080147e8 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b086      	sub	sp, #24
 80147ec:	af02      	add	r7, sp, #8
 80147ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80147f0:	230b      	movs	r3, #11
 80147f2:	425b      	negs	r3, r3
 80147f4:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2b01      	cmp	r3, #1
 80147fa:	d902      	bls.n	8014802 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80147fc:	2302      	movs	r3, #2
 80147fe:	425b      	negs	r3, r3
 8014800:	60fb      	str	r3, [r7, #12]
  }
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	b2d9      	uxtb	r1, r3
 8014806:	4b06      	ldr	r3, [pc, #24]	; (8014820 <BSP_USBPD_PWR_VBUSDeInit+0x38>)
 8014808:	2227      	movs	r2, #39	; 0x27
 801480a:	9200      	str	r2, [sp, #0]
 801480c:	2200      	movs	r2, #0
 801480e:	2006      	movs	r0, #6
 8014810:	f7f8 fb9e 	bl	800cf50 <USBPD_TRACE_Add>
  return ret;
 8014814:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8014816:	0018      	movs	r0, r3
 8014818:	46bd      	mov	sp, r7
 801481a:	b004      	add	sp, #16
 801481c:	bd80      	pop	{r7, pc}
 801481e:	46c0      	nop			; (mov r8, r8)
 8014820:	0801befc 	.word	0x0801befc

08014824 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b084      	sub	sp, #16
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
 801482c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid */
  int32_t ret = BSP_ERROR_NONE;
 801482e:	2300      	movs	r3, #0
 8014830:	60fb      	str	r3, [r7, #12]
  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2b01      	cmp	r3, #1
 8014836:	d802      	bhi.n	801483e <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d106      	bne.n	801484c <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  {
	  ret = BSP_ERROR_WRONG_PARAM;
 801483e:	2302      	movs	r3, #2
 8014840:	425b      	negs	r3, r3
 8014842:	60fb      	str	r3, [r7, #12]
	  *pVoltage = 0;
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	2200      	movs	r2, #0
 8014848:	601a      	str	r2, [r3, #0]
 801484a:	e01b      	b.n	8014884 <BSP_USBPD_PWR_VBUSGetVoltage+0x60>
  }
  else
  {
	  uint32_t val;
	  val = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801484c:	4b10      	ldr	r3, [pc, #64]	; (8014890 <BSP_USBPD_PWR_VBUSGetVoltage+0x6c>)
 801484e:	0018      	movs	r0, r3
 8014850:	f7ff ff6e 	bl	8014730 <LL_ADC_REG_ReadConversionData12>
 8014854:	0003      	movs	r3, r0
 8014856:	001a      	movs	r2, r3
 8014858:	4b0e      	ldr	r3, [pc, #56]	; (8014894 <BSP_USBPD_PWR_VBUSGetVoltage+0x70>)
 801485a:	4353      	muls	r3, r2
 801485c:	490e      	ldr	r1, [pc, #56]	; (8014898 <BSP_USBPD_PWR_VBUSGetVoltage+0x74>)
 801485e:	0018      	movs	r0, r3
 8014860:	f7f1 fcc6 	bl	80061f0 <__udivsi3>
 8014864:	0003      	movs	r3, r0
 8014866:	60bb      	str	r3, [r7, #8]
	  LL_ADC_REG_ReadConversionData12(ADC1), \
	  LL_ADC_RESOLUTION_12B); /* mV */
	  /* X-NUCLEO-SNK1M1 board is used */
	  /* Value is multiplied by 5.97 (Divider R6/R7 (40.2K/200K) for VSENSE) */
	  val *= 597;
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	4a0c      	ldr	r2, [pc, #48]	; (801489c <BSP_USBPD_PWR_VBUSGetVoltage+0x78>)
 801486c:	4353      	muls	r3, r2
 801486e:	60bb      	str	r3, [r7, #8]
	  val /= 100;
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	2164      	movs	r1, #100	; 0x64
 8014874:	0018      	movs	r0, r3
 8014876:	f7f1 fcbb 	bl	80061f0 <__udivsi3>
 801487a:	0003      	movs	r3, r0
 801487c:	60bb      	str	r3, [r7, #8]
	  *pVoltage = val;
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	68ba      	ldr	r2, [r7, #8]
 8014882:	601a      	str	r2, [r3, #0]
  }
  return ret;
 8014884:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 8014886:	0018      	movs	r0, r3
 8014888:	46bd      	mov	sp, r7
 801488a:	b004      	add	sp, #16
 801488c:	bd80      	pop	{r7, pc}
 801488e:	46c0      	nop			; (mov r8, r8)
 8014890:	40012400 	.word	0x40012400
 8014894:	00000ce4 	.word	0x00000ce4
 8014898:	00000fff 	.word	0x00000fff
 801489c:	00000255 	.word	0x00000255

080148a0 <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t Instance, int32_t *pCurrent)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b086      	sub	sp, #24
 80148a4:	af02      	add	r7, sp, #8
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	2b01      	cmp	r3, #1
 80148ae:	d802      	bhi.n	80148b6 <BSP_USBPD_PWR_VBUSGetCurrent+0x16>
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d103      	bne.n	80148be <BSP_USBPD_PWR_VBUSGetCurrent+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80148b6:	2302      	movs	r3, #2
 80148b8:	425b      	negs	r3, r3
 80148ba:	60fb      	str	r3, [r7, #12]
 80148bc:	e005      	b.n	80148ca <BSP_USBPD_PWR_VBUSGetCurrent+0x2a>
  }
  else
  {
	*pCurrent = 0;
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	2200      	movs	r2, #0
 80148c2:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80148c4:	230b      	movs	r3, #11
 80148c6:	425b      	negs	r3, r3
 80148c8:	60fb      	str	r3, [r7, #12]
  }
  /* !!!
      BSP_PWR_VBUSGetCurrent is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetCurrent");
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	b2d9      	uxtb	r1, r3
 80148ce:	4b06      	ldr	r3, [pc, #24]	; (80148e8 <BSP_USBPD_PWR_VBUSGetCurrent+0x48>)
 80148d0:	222b      	movs	r2, #43	; 0x2b
 80148d2:	9200      	str	r2, [sp, #0]
 80148d4:	2200      	movs	r2, #0
 80148d6:	2006      	movs	r0, #6
 80148d8:	f7f8 fb3a 	bl	800cf50 <USBPD_TRACE_Add>
  return ret;
 80148dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 80148de:	0018      	movs	r0, r3
 80148e0:	46bd      	mov	sp, r7
 80148e2:	b004      	add	sp, #16
 80148e4:	bd80      	pop	{r7, pc}
 80148e6:	46c0      	nop			; (mov r8, r8)
 80148e8:	0801c044 	.word	0x0801c044

080148ec <USBPD_USER_SERV_StoreSRCPDO>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_USER_SERV_StoreSRCPDO(uint8_t PortNum, uint8_t *Ptr, uint32_t Size)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b086      	sub	sp, #24
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	60b9      	str	r1, [r7, #8]
 80148f4:	607a      	str	r2, [r7, #4]
 80148f6:	210f      	movs	r1, #15
 80148f8:	187b      	adds	r3, r7, r1
 80148fa:	1c02      	adds	r2, r0, #0
 80148fc:	701a      	strb	r2, [r3, #0]
  /*!< Storage of Received Source PDO values */
  if (Size <= (USBPD_MAX_NB_PDO * 4U))
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	2b1c      	cmp	r3, #28
 8014902:	d82c      	bhi.n	801495e <USBPD_USER_SERV_StoreSRCPDO+0x72>
  {
    uint8_t *rdo;
    DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO = (Size / 4U);
 8014904:	187b      	adds	r3, r7, r1
 8014906:	781a      	ldrb	r2, [r3, #0]
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	0899      	lsrs	r1, r3, #2
 801490c:	4816      	ldr	r0, [pc, #88]	; (8014968 <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 801490e:	0013      	movs	r3, r2
 8014910:	009b      	lsls	r3, r3, #2
 8014912:	189b      	adds	r3, r3, r2
 8014914:	011b      	lsls	r3, r3, #4
 8014916:	18c3      	adds	r3, r0, r3
 8014918:	331c      	adds	r3, #28
 801491a:	6019      	str	r1, [r3, #0]
    /* Copy PDO data in DPM Handle field */
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801491c:	2300      	movs	r3, #0
 801491e:	617b      	str	r3, [r7, #20]
 8014920:	e018      	b.n	8014954 <USBPD_USER_SERV_StoreSRCPDO+0x68>
    {
      rdo = (uint8_t *)&DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[index];
 8014922:	230f      	movs	r3, #15
 8014924:	18fb      	adds	r3, r7, r3
 8014926:	781a      	ldrb	r2, [r3, #0]
 8014928:	0013      	movs	r3, r2
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	189b      	adds	r3, r3, r2
 801492e:	009b      	lsls	r3, r3, #2
 8014930:	697a      	ldr	r2, [r7, #20]
 8014932:	189b      	adds	r3, r3, r2
 8014934:	009a      	lsls	r2, r3, #2
 8014936:	4b0c      	ldr	r3, [pc, #48]	; (8014968 <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 8014938:	18d3      	adds	r3, r2, r3
 801493a:	613b      	str	r3, [r7, #16]
      (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	68ba      	ldr	r2, [r7, #8]
 8014942:	18d1      	adds	r1, r2, r3
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	2204      	movs	r2, #4
 8014948:	0018      	movs	r0, r3
 801494a:	f006 f9b9 	bl	801acc0 <memcpy>
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	3301      	adds	r3, #1
 8014952:	617b      	str	r3, [r7, #20]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	089b      	lsrs	r3, r3, #2
 8014958:	697a      	ldr	r2, [r7, #20]
 801495a:	429a      	cmp	r2, r3
 801495c:	d3e1      	bcc.n	8014922 <USBPD_USER_SERV_StoreSRCPDO+0x36>
      (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
      */
    }

  }
}
 801495e:	46c0      	nop			; (mov r8, r8)
 8014960:	46bd      	mov	sp, r7
 8014962:	b006      	add	sp, #24
 8014964:	bd80      	pop	{r7, pc}
 8014966:	46c0      	nop			; (mov r8, r8)
 8014968:	20002d90 	.word	0x20002d90

0801496c <USBPD_USER_SERV_EvaluateCapa>:
  * @retval None
  */
void USBPD_USER_SERV_EvaluateCapa(uint8_t PortNum,
                                  uint32_t *PtrRequestData,
                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801496c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801496e:	b0ab      	sub	sp, #172	; 0xac
 8014970:	af02      	add	r7, sp, #8
 8014972:	60b9      	str	r1, [r7, #8]
 8014974:	607a      	str	r2, [r7, #4]
 8014976:	240f      	movs	r4, #15
 8014978:	193b      	adds	r3, r7, r4
 801497a:	1c02      	adds	r2, r0, #0
 801497c:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef  fixed_pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801497e:	193b      	adds	r3, r7, r4
 8014980:	781a      	ldrb	r2, [r3, #0]
 8014982:	0013      	movs	r3, r2
 8014984:	009b      	lsls	r3, r3, #2
 8014986:	189b      	adds	r3, r3, r2
 8014988:	011b      	lsls	r3, r3, #4
 801498a:	4a66      	ldr	r2, [pc, #408]	; (8014b24 <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 801498c:	189b      	adds	r3, r3, r2
 801498e:	269c      	movs	r6, #156	; 0x9c
 8014990:	19ba      	adds	r2, r7, r6
 8014992:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 8014994:	193b      	adds	r3, r7, r4
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	2274      	movs	r2, #116	; 0x74
 801499a:	435a      	muls	r2, r3
 801499c:	4b62      	ldr	r3, [pc, #392]	; (8014b28 <USBPD_USER_SERV_EvaluateCapa+0x1bc>)
 801499e:	18d3      	adds	r3, r2, r3
 80149a0:	2298      	movs	r2, #152	; 0x98
 80149a2:	18b9      	adds	r1, r7, r2
 80149a4:	600b      	str	r3, [r1, #0]
  uint32_t pdoindex;
  uint32_t size;
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  snkpowerrequestdetails.RequestedVoltageInmVunits = 0;
 80149a6:	2178      	movs	r1, #120	; 0x78
 80149a8:	187b      	adds	r3, r7, r1
 80149aa:	2200      	movs	r2, #0
 80149ac:	601a      	str	r2, [r3, #0]
  snkpowerrequestdetails.OperatingCurrentInmAunits = 0;
 80149ae:	187b      	adds	r3, r7, r1
 80149b0:	2200      	movs	r2, #0
 80149b2:	609a      	str	r2, [r3, #8]

  /* Find the Pdo index for the requested voltage, depending on the wanted method */
  pdoindex = USER_SERV_FindVoltageIndex(PortNum, &snkpowerrequestdetails, USER_SERV_PDO_Sel_Method);
 80149b4:	193b      	adds	r3, r7, r4
 80149b6:	7818      	ldrb	r0, [r3, #0]
 80149b8:	4b5c      	ldr	r3, [pc, #368]	; (8014b2c <USBPD_USER_SERV_EvaluateCapa+0x1c0>)
 80149ba:	781a      	ldrb	r2, [r3, #0]
 80149bc:	187b      	adds	r3, r7, r1
 80149be:	0019      	movs	r1, r3
 80149c0:	f000 fa56 	bl	8014e70 <USER_SERV_FindVoltageIndex>
 80149c4:	0003      	movs	r3, r0
 80149c6:	2194      	movs	r1, #148	; 0x94
 80149c8:	1878      	adds	r0, r7, r1
 80149ca:	6003      	str	r3, [r0, #0]

  /* Initialize RDO */
  rdo.d32 = 0;
 80149cc:	2300      	movs	r3, #0
 80149ce:	258c      	movs	r5, #140	; 0x8c
 80149d0:	1978      	adds	r0, r7, r5
 80149d2:	6003      	str	r3, [r0, #0]

  /* If no valid SNK PDO or if no SRC PDO match found
      (index>=nb of valid received SRC PDOs or function returned DPM_NO_SRC_PDO_FOUND */
  if (pdoindex >= pdhandle->DPM_NumberOfRcvSRCPDO)
 80149d4:	19b8      	adds	r0, r7, r6
 80149d6:	6803      	ldr	r3, [r0, #0]
 80149d8:	69db      	ldr	r3, [r3, #28]
 80149da:	1879      	adds	r1, r7, r1
 80149dc:	680a      	ldr	r2, [r1, #0]
 80149de:	429a      	cmp	r2, r3
 80149e0:	d200      	bcs.n	80149e4 <USBPD_USER_SERV_EvaluateCapa+0x78>
 80149e2:	e085      	b.n	8014af0 <USBPD_USER_SERV_EvaluateCapa+0x184>
  {
#if defined(_TRACE)
    uint8_t msg[] = "USBPD_USER_SERV_EvaluateCapa: could not find desired voltage";
 80149e4:	2114      	movs	r1, #20
 80149e6:	187a      	adds	r2, r7, r1
 80149e8:	4b51      	ldr	r3, [pc, #324]	; (8014b30 <USBPD_USER_SERV_EvaluateCapa+0x1c4>)
 80149ea:	0010      	movs	r0, r2
 80149ec:	0019      	movs	r1, r3
 80149ee:	233d      	movs	r3, #61	; 0x3d
 80149f0:	001a      	movs	r2, r3
 80149f2:	f006 f965 	bl	801acc0 <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 80149f6:	2114      	movs	r1, #20
 80149f8:	187a      	adds	r2, r7, r1
 80149fa:	193b      	adds	r3, r7, r4
 80149fc:	7819      	ldrb	r1, [r3, #0]
 80149fe:	233d      	movs	r3, #61	; 0x3d
 8014a00:	9300      	str	r3, [sp, #0]
 8014a02:	0013      	movs	r3, r2
 8014a04:	2200      	movs	r2, #0
 8014a06:	2006      	movs	r0, #6
 8014a08:	f7f8 faa2 	bl	800cf50 <USBPD_TRACE_Add>
#endif /* _TRACE */
    fixed_pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 8014a0c:	19b9      	adds	r1, r7, r6
 8014a0e:	680b      	ldr	r3, [r1, #0]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2090      	movs	r0, #144	; 0x90
 8014a14:	1839      	adds	r1, r7, r0
 8014a16:	600b      	str	r3, [r1, #0]
    /* Read SNK PDO list for retrieving useful data to fill in RDO */
    USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 8014a18:	2174      	movs	r1, #116	; 0x74
 8014a1a:	1879      	adds	r1, r7, r1
 8014a1c:	2358      	movs	r3, #88	; 0x58
 8014a1e:	18fa      	adds	r2, r7, r3
 8014a20:	193b      	adds	r3, r7, r4
 8014a22:	7818      	ldrb	r0, [r3, #0]
 8014a24:	000b      	movs	r3, r1
 8014a26:	2101      	movs	r1, #1
 8014a28:	f7fe fbd8 	bl	80131dc <USBPD_PWR_IF_GetPortPDOs>
    /* Store value of 1st SNK PDO (Fixed) in local variable */
    snk_fixed_pdo.d32 = snkpdolist[0];
 8014a2c:	2158      	movs	r1, #88	; 0x58
 8014a2e:	187b      	adds	r3, r7, r1
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	657b      	str	r3, [r7, #84]	; 0x54
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 8014a34:	238f      	movs	r3, #143	; 0x8f
 8014a36:	18fb      	adds	r3, r7, r3
 8014a38:	781a      	ldrb	r2, [r3, #0]
 8014a3a:	2170      	movs	r1, #112	; 0x70
 8014a3c:	438a      	bics	r2, r1
 8014a3e:	1c11      	adds	r1, r2, #0
 8014a40:	2210      	movs	r2, #16
 8014a42:	430a      	orrs	r2, r1
 8014a44:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 8014a46:	2090      	movs	r0, #144	; 0x90
 8014a48:	183b      	adds	r3, r7, r0
 8014a4a:	881b      	ldrh	r3, [r3, #0]
 8014a4c:	059b      	lsls	r3, r3, #22
 8014a4e:	0d9b      	lsrs	r3, r3, #22
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	059b      	lsls	r3, r3, #22
 8014a54:	0d9b      	lsrs	r3, r3, #22
 8014a56:	029b      	lsls	r3, r3, #10
 8014a58:	1979      	adds	r1, r7, r5
 8014a5a:	680a      	ldr	r2, [r1, #0]
 8014a5c:	4935      	ldr	r1, [pc, #212]	; (8014b34 <USBPD_USER_SERV_EvaluateCapa+0x1c8>)
 8014a5e:	400a      	ands	r2, r1
 8014a60:	4313      	orrs	r3, r2
 8014a62:	1979      	adds	r1, r7, r5
 8014a64:	600b      	str	r3, [r1, #0]
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 8014a66:	183b      	adds	r3, r7, r0
 8014a68:	881b      	ldrh	r3, [r3, #0]
 8014a6a:	059b      	lsls	r3, r3, #22
 8014a6c:	0d9b      	lsrs	r3, r3, #22
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	197b      	adds	r3, r7, r5
 8014a72:	0592      	lsls	r2, r2, #22
 8014a74:	0d90      	lsrs	r0, r2, #22
 8014a76:	881a      	ldrh	r2, [r3, #0]
 8014a78:	0a92      	lsrs	r2, r2, #10
 8014a7a:	0292      	lsls	r2, r2, #10
 8014a7c:	1c11      	adds	r1, r2, #0
 8014a7e:	1c02      	adds	r2, r0, #0
 8014a80:	430a      	orrs	r2, r1
 8014a82:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch = 1U;
 8014a84:	208f      	movs	r0, #143	; 0x8f
 8014a86:	183b      	adds	r3, r7, r0
 8014a88:	781a      	ldrb	r2, [r3, #0]
 8014a8a:	2104      	movs	r1, #4
 8014a8c:	430a      	orrs	r2, r1
 8014a8e:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 8014a90:	2157      	movs	r1, #87	; 0x57
 8014a92:	187b      	adds	r3, r7, r1
 8014a94:	781b      	ldrb	r3, [r3, #0]
 8014a96:	075b      	lsls	r3, r3, #29
 8014a98:	0fdb      	lsrs	r3, r3, #31
 8014a9a:	b2da      	uxtb	r2, r3
 8014a9c:	183b      	adds	r3, r7, r0
 8014a9e:	2101      	movs	r1, #1
 8014aa0:	400a      	ands	r2, r1
 8014aa2:	1890      	adds	r0, r2, r2
 8014aa4:	781a      	ldrb	r2, [r3, #0]
 8014aa6:	2102      	movs	r1, #2
 8014aa8:	438a      	bics	r2, r1
 8014aaa:	1c11      	adds	r1, r2, #0
 8014aac:	1c02      	adds	r2, r0, #0
 8014aae:	430a      	orrs	r2, r1
 8014ab0:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 8014ab2:	193b      	adds	r3, r7, r4
 8014ab4:	781a      	ldrb	r2, [r3, #0]
 8014ab6:	2398      	movs	r3, #152	; 0x98
 8014ab8:	18fb      	adds	r3, r7, r3
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	6859      	ldr	r1, [r3, #4]
 8014abe:	4819      	ldr	r0, [pc, #100]	; (8014b24 <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 8014ac0:	0013      	movs	r3, r2
 8014ac2:	009b      	lsls	r3, r3, #2
 8014ac4:	189b      	adds	r3, r3, r2
 8014ac6:	011b      	lsls	r3, r3, #4
 8014ac8:	18c3      	adds	r3, r0, r3
 8014aca:	334c      	adds	r3, #76	; 0x4c
 8014acc:	6019      	str	r1, [r3, #0]

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 8014ace:	197b      	adds	r3, r7, r5
 8014ad0:	681a      	ldr	r2, [r3, #0]
 8014ad2:	19bb      	adds	r3, r7, r6
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    *PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2200      	movs	r2, #0
 8014adc:	601a      	str	r2, [r3, #0]
    *PtrRequestData = rdo.d32;
 8014ade:	197b      	adds	r3, r7, r5
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	601a      	str	r2, [r3, #0]
    pdhandle->DPM_RequestedVoltage = 5000U;
 8014ae6:	19bb      	adds	r3, r7, r6
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	4a13      	ldr	r2, [pc, #76]	; (8014b38 <USBPD_USER_SERV_EvaluateCapa+0x1cc>)
 8014aec:	649a      	str	r2, [r3, #72]	; 0x48
 8014aee:	e015      	b.n	8014b1c <USBPD_USER_SERV_EvaluateCapa+0x1b0>
    return;
  }

  USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, pdoindex, &snkpowerrequestdetails, &rdo, PtrPowerObjectType);
 8014af0:	2394      	movs	r3, #148	; 0x94
 8014af2:	18fb      	adds	r3, r7, r3
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	b2d9      	uxtb	r1, r3
 8014af8:	238c      	movs	r3, #140	; 0x8c
 8014afa:	18fc      	adds	r4, r7, r3
 8014afc:	2378      	movs	r3, #120	; 0x78
 8014afe:	18fa      	adds	r2, r7, r3
 8014b00:	230f      	movs	r3, #15
 8014b02:	18fb      	adds	r3, r7, r3
 8014b04:	7818      	ldrb	r0, [r3, #0]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	9300      	str	r3, [sp, #0]
 8014b0a:	0023      	movs	r3, r4
 8014b0c:	f000 faaa 	bl	8015064 <USER_SERV_SNK_BuildRDOfromSelectedPDO>

  *PtrRequestData = pdhandle->DPM_RequestDOMsg;
 8014b10:	239c      	movs	r3, #156	; 0x9c
 8014b12:	18fb      	adds	r3, r7, r3
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	601a      	str	r2, [r3, #0]
}
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	b029      	add	sp, #164	; 0xa4
 8014b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b22:	46c0      	nop			; (mov r8, r8)
 8014b24:	20002d90 	.word	0x20002d90
 8014b28:	20000050 	.word	0x20000050
 8014b2c:	20002d8c 	.word	0x20002d8c
 8014b30:	0801c230 	.word	0x0801c230
 8014b34:	fff003ff 	.word	0xfff003ff
 8014b38:	00001388 	.word	0x00001388

08014b3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO>:
  */
uint32_t USER_SERV_SNK_EvaluateMatchWithSRCPDO(uint8_t PortNum,
                                                      uint32_t SrcPDO,
                                                      uint32_t *PtrRequestedVoltage,
                                                      uint32_t *PtrRequestedPower)
{
 8014b3c:	b590      	push	{r4, r7, lr}
 8014b3e:	b09b      	sub	sp, #108	; 0x6c
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	60b9      	str	r1, [r7, #8]
 8014b44:	607a      	str	r2, [r7, #4]
 8014b46:	603b      	str	r3, [r7, #0]
 8014b48:	240f      	movs	r4, #15
 8014b4a:	193b      	adds	r3, r7, r4
 8014b4c:	1c02      	adds	r2, r0, #0
 8014b4e:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef srcpdo;
  USBPD_PDO_TypeDef snkpdo;
  uint32_t match = USBPD_FALSE;
 8014b50:	2300      	movs	r3, #0
 8014b52:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t currentrequestedpower;
  uint32_t maxrequestedvoltage;
  uint32_t currentrequestedvoltage;

  /* Retrieve SNK PDO list from PWR_IF storage : PDO values + nb of u32 written by PWR_IF (nb of PDOs) */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)snkpdo_array, &nbsnkpdo);
 8014b54:	2330      	movs	r3, #48	; 0x30
 8014b56:	18f9      	adds	r1, r7, r3
 8014b58:	2314      	movs	r3, #20
 8014b5a:	18fa      	adds	r2, r7, r3
 8014b5c:	193b      	adds	r3, r7, r4
 8014b5e:	7818      	ldrb	r0, [r3, #0]
 8014b60:	000b      	movs	r3, r1
 8014b62:	2101      	movs	r1, #1
 8014b64:	f7fe fb3a 	bl	80131dc <USBPD_PWR_IF_GetPortPDOs>

  if (0 == nbsnkpdo)
 8014b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d101      	bne.n	8014b72 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x36>
  {
    return (USBPD_FALSE);
 8014b6e:	2300      	movs	r3, #0
 8014b70:	e179      	b.n	8014e66 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  /* Set default output values */
  maxrequestedpower    = 0;
 8014b72:	2300      	movs	r3, #0
 8014b74:	663b      	str	r3, [r7, #96]	; 0x60
  maxrequestedvoltage  = 0;
 8014b76:	2300      	movs	r3, #0
 8014b78:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Check SRC PDO value according to its type */
  srcpdo.d32 = SrcPDO;
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  switch (srcpdo.GenericPDO.PowerObject)
 8014b7e:	233b      	movs	r3, #59	; 0x3b
 8014b80:	18fb      	adds	r3, r7, r3
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	061b      	lsls	r3, r3, #24
 8014b86:	0f9b      	lsrs	r3, r3, #30
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d003      	beq.n	8014b96 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x5a>
 8014b8e:	2b03      	cmp	r3, #3
 8014b90:	d100      	bne.n	8014b94 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x58>
 8014b92:	e06c      	b.n	8014c6e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x132>
 8014b94:	e159      	b.n	8014e4a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30e>
  {
    /* SRC Fixed Supply PDO */
    case USBPD_CORE_PDO_TYPE_FIXED:
    {
      srcvoltage50mv = srcpdo.SRCFixedPDO.VoltageIn50mVunits;
 8014b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b98:	031b      	lsls	r3, r3, #12
 8014b9a:	0d9b      	lsrs	r3, r3, #22
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	2342      	movs	r3, #66	; 0x42
 8014ba0:	18fb      	adds	r3, r7, r3
 8014ba2:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent10ma = srcpdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 8014ba4:	2338      	movs	r3, #56	; 0x38
 8014ba6:	18fb      	adds	r3, r7, r3
 8014ba8:	881b      	ldrh	r3, [r3, #0]
 8014baa:	059b      	lsls	r3, r3, #22
 8014bac:	0d9b      	lsrs	r3, r3, #22
 8014bae:	b29a      	uxth	r2, r3
 8014bb0:	2340      	movs	r3, #64	; 0x40
 8014bb2:	18fb      	adds	r3, r7, r3
 8014bb4:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 8014bb6:	2352      	movs	r3, #82	; 0x52
 8014bb8:	18fb      	adds	r3, r7, r3
 8014bba:	2200      	movs	r2, #0
 8014bbc:	801a      	strh	r2, [r3, #0]
 8014bbe:	e04f      	b.n	8014c60 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x124>
      {
        currentrequestedpower = 0;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 8014bc8:	2352      	movs	r3, #82	; 0x52
 8014bca:	18fb      	adds	r3, r7, r3
 8014bcc:	881a      	ldrh	r2, [r3, #0]
 8014bce:	2314      	movs	r3, #20
 8014bd0:	18fb      	adds	r3, r7, r3
 8014bd2:	0092      	lsls	r2, r2, #2
 8014bd4:	58d3      	ldr	r3, [r2, r3]
 8014bd6:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 8014bd8:	2337      	movs	r3, #55	; 0x37
 8014bda:	18fb      	adds	r3, r7, r3
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	061b      	lsls	r3, r3, #24
 8014be0:	0f9b      	lsrs	r3, r3, #30
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d128      	bne.n	8014c3a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0xfe>
        {
          /* SNK Fixed Supply PDO */
          case USBPD_CORE_PDO_TYPE_FIXED:
          {
            snkvoltage50mv = snkpdo.SNKFixedPDO.VoltageIn50mVunits;
 8014be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bea:	031b      	lsls	r3, r3, #12
 8014bec:	0d9b      	lsrs	r3, r3, #22
 8014bee:	b29a      	uxth	r2, r3
 8014bf0:	213e      	movs	r1, #62	; 0x3e
 8014bf2:	187b      	adds	r3, r7, r1
 8014bf4:	801a      	strh	r2, [r3, #0]
            snkopcurrent10ma = snkpdo.SNKFixedPDO.OperationalCurrentIn10mAunits;
 8014bf6:	2334      	movs	r3, #52	; 0x34
 8014bf8:	18fb      	adds	r3, r7, r3
 8014bfa:	881b      	ldrh	r3, [r3, #0]
 8014bfc:	059b      	lsls	r3, r3, #22
 8014bfe:	0d9b      	lsrs	r3, r3, #22
 8014c00:	b29a      	uxth	r2, r3
 8014c02:	203c      	movs	r0, #60	; 0x3c
 8014c04:	183b      	adds	r3, r7, r0
 8014c06:	801a      	strh	r2, [r3, #0]

               Requested Voltage: SNK Voltage
               Requested Op Current: SNK Op Current
               Requested Max Current: SNK Op Current
            */
            if ((snkvoltage50mv == srcvoltage50mv) && (snkopcurrent10ma <= srcmaxcurrent10ma))
 8014c08:	187a      	adds	r2, r7, r1
 8014c0a:	2342      	movs	r3, #66	; 0x42
 8014c0c:	18fb      	adds	r3, r7, r3
 8014c0e:	8812      	ldrh	r2, [r2, #0]
 8014c10:	881b      	ldrh	r3, [r3, #0]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d113      	bne.n	8014c3e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
 8014c16:	183a      	adds	r2, r7, r0
 8014c18:	2340      	movs	r3, #64	; 0x40
 8014c1a:	18fb      	adds	r3, r7, r3
 8014c1c:	8812      	ldrh	r2, [r2, #0]
 8014c1e:	881b      	ldrh	r3, [r3, #0]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d80c      	bhi.n	8014c3e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
            {
              currentrequestedpower = (snkvoltage50mv * snkopcurrent10ma) / 2U; /* To get value in mW */
 8014c24:	187b      	adds	r3, r7, r1
 8014c26:	881b      	ldrh	r3, [r3, #0]
 8014c28:	183a      	adds	r2, r7, r0
 8014c2a:	8812      	ldrh	r2, [r2, #0]
 8014c2c:	4353      	muls	r3, r2
 8014c2e:	085b      	lsrs	r3, r3, #1
 8014c30:	65fb      	str	r3, [r7, #92]	; 0x5c
              currentrequestedvoltage = snkvoltage50mv;
 8014c32:	187b      	adds	r3, r7, r1
 8014c34:	881b      	ldrh	r3, [r3, #0]
 8014c36:	657b      	str	r3, [r7, #84]	; 0x54
            }
            break;
 8014c38:	e001      	b.n	8014c3e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
          }
          /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;
 8014c3a:	46c0      	nop			; (mov r8, r8)
 8014c3c:	e000      	b.n	8014c40 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x104>
            break;
 8014c3e:	46c0      	nop			; (mov r8, r8)

          default:
            break;
        }

        if (currentrequestedpower > maxrequestedpower)
 8014c40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d905      	bls.n	8014c54 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x118>
        {
          match = USBPD_TRUE;
 8014c48:	2301      	movs	r3, #1
 8014c4a:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 8014c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c4e:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 8014c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c52:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 8014c54:	2152      	movs	r1, #82	; 0x52
 8014c56:	187b      	adds	r3, r7, r1
 8014c58:	881a      	ldrh	r2, [r3, #0]
 8014c5a:	187b      	adds	r3, r7, r1
 8014c5c:	3201      	adds	r2, #1
 8014c5e:	801a      	strh	r2, [r3, #0]
 8014c60:	2352      	movs	r3, #82	; 0x52
 8014c62:	18fb      	adds	r3, r7, r3
 8014c64:	881a      	ldrh	r2, [r3, #0]
 8014c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c68:	429a      	cmp	r2, r3
 8014c6a:	d3a9      	bcc.n	8014bc0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x84>
        }
      }
    }
    break;
 8014c6c:	e0ef      	b.n	8014e4e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>
    case USBPD_CORE_PDO_TYPE_APDO:
    {
      uint16_t srcmaxvoltage100mv;
      uint16_t srcminvoltage100mv;
      uint16_t srcmaxcurrent50ma;
      srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 8014c6e:	233a      	movs	r3, #58	; 0x3a
 8014c70:	18fb      	adds	r3, r7, r3
 8014c72:	881b      	ldrh	r3, [r3, #0]
 8014c74:	05db      	lsls	r3, r3, #23
 8014c76:	0e1b      	lsrs	r3, r3, #24
 8014c78:	b2da      	uxtb	r2, r3
 8014c7a:	234e      	movs	r3, #78	; 0x4e
 8014c7c:	18fb      	adds	r3, r7, r3
 8014c7e:	801a      	strh	r2, [r3, #0]
      srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 8014c80:	2138      	movs	r1, #56	; 0x38
 8014c82:	187b      	adds	r3, r7, r1
 8014c84:	785a      	ldrb	r2, [r3, #1]
 8014c86:	234c      	movs	r3, #76	; 0x4c
 8014c88:	18fb      	adds	r3, r7, r3
 8014c8a:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 8014c8c:	187b      	adds	r3, r7, r1
 8014c8e:	781b      	ldrb	r3, [r3, #0]
 8014c90:	065b      	lsls	r3, r3, #25
 8014c92:	0e5b      	lsrs	r3, r3, #25
 8014c94:	b2da      	uxtb	r2, r3
 8014c96:	234a      	movs	r3, #74	; 0x4a
 8014c98:	18fb      	adds	r3, r7, r3
 8014c9a:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 8014c9c:	2350      	movs	r3, #80	; 0x50
 8014c9e:	18fb      	adds	r3, r7, r3
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	801a      	strh	r2, [r3, #0]
 8014ca4:	e0c9      	b.n	8014e3a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2fe>
      {
        currentrequestedpower = 0;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 8014caa:	2300      	movs	r3, #0
 8014cac:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 8014cae:	2350      	movs	r3, #80	; 0x50
 8014cb0:	18fb      	adds	r3, r7, r3
 8014cb2:	881a      	ldrh	r2, [r3, #0]
 8014cb4:	2314      	movs	r3, #20
 8014cb6:	18fb      	adds	r3, r7, r3
 8014cb8:	0092      	lsls	r2, r2, #2
 8014cba:	58d3      	ldr	r3, [r2, r3]
 8014cbc:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 8014cbe:	2337      	movs	r3, #55	; 0x37
 8014cc0:	18fb      	adds	r3, r7, r3
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	061b      	lsls	r3, r3, #24
 8014cc6:	0f9b      	lsrs	r3, r3, #30
 8014cc8:	b2db      	uxtb	r3, r3
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d100      	bne.n	8014cd0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x194>
 8014cce:	e09f      	b.n	8014e10 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d4>
 8014cd0:	2b03      	cmp	r3, #3
 8014cd2:	d000      	beq.n	8014cd6 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x19a>
 8014cd4:	e09e      	b.n	8014e14 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d8>
          {
            uint16_t snkmaxvoltage100mv;
            uint16_t snkminvoltage100mv;
            uint16_t snkmaxcurrent50ma;

            snkminvoltage100mv = snkpdo.SRCSNKAPDO.MinVoltageIn100mV;
 8014cd6:	2134      	movs	r1, #52	; 0x34
 8014cd8:	187b      	adds	r3, r7, r1
 8014cda:	785a      	ldrb	r2, [r3, #1]
 8014cdc:	2048      	movs	r0, #72	; 0x48
 8014cde:	183b      	adds	r3, r7, r0
 8014ce0:	801a      	strh	r2, [r3, #0]
            snkmaxvoltage100mv = snkpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 8014ce2:	2336      	movs	r3, #54	; 0x36
 8014ce4:	18fb      	adds	r3, r7, r3
 8014ce6:	881b      	ldrh	r3, [r3, #0]
 8014ce8:	05db      	lsls	r3, r3, #23
 8014cea:	0e1b      	lsrs	r3, r3, #24
 8014cec:	b2da      	uxtb	r2, r3
 8014cee:	2446      	movs	r4, #70	; 0x46
 8014cf0:	193b      	adds	r3, r7, r4
 8014cf2:	801a      	strh	r2, [r3, #0]
            snkmaxcurrent50ma = snkpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 8014cf4:	187b      	adds	r3, r7, r1
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	065b      	lsls	r3, r3, #25
 8014cfa:	0e5b      	lsrs	r3, r3, #25
 8014cfc:	b2da      	uxtb	r2, r3
 8014cfe:	2344      	movs	r3, #68	; 0x44
 8014d00:	18fb      	adds	r3, r7, r3
 8014d02:	801a      	strh	r2, [r3, #0]

            /* Match if SNK APDO voltage overlaps with the SRC APDO voltage range */
            if (((srcminvoltage100mv <= snkmaxvoltage100mv) && (srcminvoltage100mv >= snkminvoltage100mv)) ||
 8014d04:	214c      	movs	r1, #76	; 0x4c
 8014d06:	187a      	adds	r2, r7, r1
 8014d08:	193b      	adds	r3, r7, r4
 8014d0a:	8812      	ldrh	r2, [r2, #0]
 8014d0c:	881b      	ldrh	r3, [r3, #0]
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	d805      	bhi.n	8014d1e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1e2>
 8014d12:	187a      	adds	r2, r7, r1
 8014d14:	183b      	adds	r3, r7, r0
 8014d16:	8812      	ldrh	r2, [r2, #0]
 8014d18:	881b      	ldrh	r3, [r3, #0]
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d210      	bcs.n	8014d40 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 8014d1e:	2148      	movs	r1, #72	; 0x48
 8014d20:	187a      	adds	r2, r7, r1
 8014d22:	234e      	movs	r3, #78	; 0x4e
 8014d24:	18fb      	adds	r3, r7, r3
 8014d26:	8812      	ldrh	r2, [r2, #0]
 8014d28:	881b      	ldrh	r3, [r3, #0]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d900      	bls.n	8014d30 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1f4>
 8014d2e:	e073      	b.n	8014e18 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				((snkminvoltage100mv <= srcmaxvoltage100mv) && (snkminvoltage100mv >= srcminvoltage100mv)))
 8014d30:	187a      	adds	r2, r7, r1
 8014d32:	234c      	movs	r3, #76	; 0x4c
 8014d34:	18fb      	adds	r3, r7, r3
 8014d36:	8812      	ldrh	r2, [r2, #0]
 8014d38:	881b      	ldrh	r3, [r3, #0]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d200      	bcs.n	8014d40 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 8014d3e:	e06b      	b.n	8014e18 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			{
			  if (snkmaxcurrent50ma <= srcmaxcurrent50ma)
 8014d40:	2044      	movs	r0, #68	; 0x44
 8014d42:	183a      	adds	r2, r7, r0
 8014d44:	234a      	movs	r3, #74	; 0x4a
 8014d46:	18fb      	adds	r3, r7, r3
 8014d48:	8812      	ldrh	r2, [r2, #0]
 8014d4a:	881b      	ldrh	r3, [r3, #0]
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d863      	bhi.n	8014e18 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			  {
				if (0U != *PtrRequestedPower)
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d02c      	beq.n	8014db2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x276>
				{
				  /* A specific voltage was requested, verify it */
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 8014d58:	2348      	movs	r3, #72	; 0x48
 8014d5a:	18fb      	adds	r3, r7, r3
 8014d5c:	881b      	ldrh	r3, [r3, #0]
 8014d5e:	2264      	movs	r2, #100	; 0x64
 8014d60:	4353      	muls	r3, r2
 8014d62:	b29b      	uxth	r3, r3
 8014d64:	001a      	movs	r2, r3
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d854      	bhi.n	8014e18 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
					 ((*PtrRequestedVoltage) <= PWR_DECODE_100MV(snkmaxvoltage100mv)))
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2246      	movs	r2, #70	; 0x46
 8014d74:	18ba      	adds	r2, r7, r2
 8014d76:	8812      	ldrh	r2, [r2, #0]
 8014d78:	2164      	movs	r1, #100	; 0x64
 8014d7a:	434a      	muls	r2, r1
 8014d7c:	b292      	uxth	r2, r2
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 8014d7e:	4293      	cmp	r3, r2
 8014d80:	d84a      	bhi.n	8014e18 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  {
					currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	183a      	adds	r2, r7, r0
 8014d88:	8812      	ldrh	r2, [r2, #0]
 8014d8a:	2132      	movs	r1, #50	; 0x32
 8014d8c:	434a      	muls	r2, r1
 8014d8e:	b292      	uxth	r2, r2
 8014d90:	4353      	muls	r3, r2
 8014d92:	22fa      	movs	r2, #250	; 0xfa
 8014d94:	0091      	lsls	r1, r2, #2
 8014d96:	0018      	movs	r0, r3
 8014d98:	f7f1 fa2a 	bl	80061f0 <__udivsi3>
 8014d9c:	0003      	movs	r3, r0
 8014d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
											/ 1000U; /* mW */
					currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	2132      	movs	r1, #50	; 0x32
 8014da6:	0018      	movs	r0, r3
 8014da8:	f7f1 fa22 	bl	80061f0 <__udivsi3>
 8014dac:	0003      	movs	r3, r0
 8014dae:	657b      	str	r3, [r7, #84]	; 0x54
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
				}
			  }
			}
          }
          break;
 8014db0:	e032      	b.n	8014e18 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  *PtrRequestedVoltage = MIN(PWR_DECODE_100MV(srcmaxvoltage100mv),
 8014db2:	2346      	movs	r3, #70	; 0x46
 8014db4:	18fb      	adds	r3, r7, r3
 8014db6:	881b      	ldrh	r3, [r3, #0]
 8014db8:	2264      	movs	r2, #100	; 0x64
 8014dba:	4353      	muls	r3, r2
 8014dbc:	b299      	uxth	r1, r3
 8014dbe:	234e      	movs	r3, #78	; 0x4e
 8014dc0:	18fb      	adds	r3, r7, r3
 8014dc2:	881b      	ldrh	r3, [r3, #0]
 8014dc4:	2264      	movs	r2, #100	; 0x64
 8014dc6:	4353      	muls	r3, r2
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	1c18      	adds	r0, r3, #0
 8014dcc:	b28a      	uxth	r2, r1
 8014dce:	b283      	uxth	r3, r0
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d900      	bls.n	8014dd6 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x29a>
 8014dd4:	1c01      	adds	r1, r0, #0
 8014dd6:	b28b      	uxth	r3, r1
 8014dd8:	001a      	movs	r2, r3
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	601a      	str	r2, [r3, #0]
				  currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2244      	movs	r2, #68	; 0x44
 8014de4:	18ba      	adds	r2, r7, r2
 8014de6:	8812      	ldrh	r2, [r2, #0]
 8014de8:	2132      	movs	r1, #50	; 0x32
 8014dea:	434a      	muls	r2, r1
 8014dec:	b292      	uxth	r2, r2
 8014dee:	4353      	muls	r3, r2
 8014df0:	22fa      	movs	r2, #250	; 0xfa
 8014df2:	0091      	lsls	r1, r2, #2
 8014df4:	0018      	movs	r0, r3
 8014df6:	f7f1 f9fb 	bl	80061f0 <__udivsi3>
 8014dfa:	0003      	movs	r3, r0
 8014dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	2132      	movs	r1, #50	; 0x32
 8014e04:	0018      	movs	r0, r3
 8014e06:	f7f1 f9f3 	bl	80061f0 <__udivsi3>
 8014e0a:	0003      	movs	r3, r0
 8014e0c:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8014e0e:	e003      	b.n	8014e18 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
            break;
 8014e10:	46c0      	nop			; (mov r8, r8)
 8014e12:	e002      	b.n	8014e1a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>

          default:
            break;
 8014e14:	46c0      	nop			; (mov r8, r8)
 8014e16:	e000      	b.n	8014e1a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>
          break;
 8014e18:	46c0      	nop			; (mov r8, r8)
        }

        if (currentrequestedpower > maxrequestedpower)
 8014e1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d905      	bls.n	8014e2e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2f2>
        {
          match = USBPD_TRUE;
 8014e22:	2301      	movs	r3, #1
 8014e24:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 8014e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e28:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 8014e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e2c:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 8014e2e:	2150      	movs	r1, #80	; 0x50
 8014e30:	187b      	adds	r3, r7, r1
 8014e32:	881a      	ldrh	r2, [r3, #0]
 8014e34:	187b      	adds	r3, r7, r1
 8014e36:	3201      	adds	r2, #1
 8014e38:	801a      	strh	r2, [r3, #0]
 8014e3a:	2350      	movs	r3, #80	; 0x50
 8014e3c:	18fb      	adds	r3, r7, r3
 8014e3e:	881a      	ldrh	r2, [r3, #0]
 8014e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e42:	429a      	cmp	r2, r3
 8014e44:	d200      	bcs.n	8014e48 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30c>
 8014e46:	e72e      	b.n	8014ca6 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x16a>
        }
      }
    }
    break;
 8014e48:	e001      	b.n	8014e4e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>

    default:
      return (USBPD_FALSE);
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	e00b      	b.n	8014e66 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  if (maxrequestedpower > 0)
 8014e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d007      	beq.n	8014e64 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x328>
  {
    *PtrRequestedPower   = maxrequestedpower;
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014e58:	601a      	str	r2, [r3, #0]
    *PtrRequestedVoltage = maxrequestedvoltage * 50U; /* value in mV */
 8014e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e5c:	2232      	movs	r2, #50	; 0x32
 8014e5e:	435a      	muls	r2, r3
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	601a      	str	r2, [r3, #0]
  }
  return (match);
 8014e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8014e66:	0018      	movs	r0, r3
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	b01b      	add	sp, #108	; 0x6c
 8014e6c:	bd90      	pop	{r4, r7, pc}
	...

08014e70 <USER_SERV_FindVoltageIndex>:
  * @retval Index of PDO within source capabilities message (DPM_NO_SRC_PDO_FOUND indicating not found)
  */
uint32_t USER_SERV_FindVoltageIndex(uint32_t PortNum,
                                           USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                           uint8_t Method)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b090      	sub	sp, #64	; 0x40
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	60b9      	str	r1, [r7, #8]
 8014e7a:	1dfb      	adds	r3, r7, #7
 8014e7c:	701a      	strb	r2, [r3, #0]
  uint32_t nbpdo;
  uint32_t allowablepower;
  uint32_t selpower;
  uint32_t allowablecurrent;
  uint32_t selcurrent;
  uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 8014e7e:	23ff      	movs	r3, #255	; 0xff
 8014e80:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temp_index;
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	2274      	movs	r2, #116	; 0x74
 8014e86:	435a      	muls	r2, r3
 8014e88:	4b73      	ldr	r3, [pc, #460]	; (8015058 <USER_SERV_FindVoltageIndex+0x1e8>)
 8014e8a:	18d3      	adds	r3, r2, r3
 8014e8c:	62bb      	str	r3, [r7, #40]	; 0x28

  allowablepower = 0;
 8014e8e:	2300      	movs	r3, #0
 8014e90:	613b      	str	r3, [r7, #16]
  selpower       = 0;
 8014e92:	2300      	movs	r3, #0
 8014e94:	63bb      	str	r3, [r7, #56]	; 0x38
  reqvoltage     = 0;
 8014e96:	2300      	movs	r3, #0
 8014e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  voltage        = 0;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	617b      	str	r3, [r7, #20]
  selcurrent     = 0;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Search PDO index among Source PDO of Port */
  nbpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 8014ea2:	496e      	ldr	r1, [pc, #440]	; (801505c <USER_SERV_FindVoltageIndex+0x1ec>)
 8014ea4:	68fa      	ldr	r2, [r7, #12]
 8014ea6:	0013      	movs	r3, r2
 8014ea8:	009b      	lsls	r3, r3, #2
 8014eaa:	189b      	adds	r3, r3, r2
 8014eac:	011b      	lsls	r3, r3, #4
 8014eae:	18cb      	adds	r3, r1, r3
 8014eb0:	331c      	adds	r3, #28
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	627b      	str	r3, [r7, #36]	; 0x24
  ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 8014eb6:	68fa      	ldr	r2, [r7, #12]
 8014eb8:	0013      	movs	r3, r2
 8014eba:	009b      	lsls	r3, r3, #2
 8014ebc:	189b      	adds	r3, r3, r2
 8014ebe:	011b      	lsls	r3, r3, #4
 8014ec0:	4a66      	ldr	r2, [pc, #408]	; (801505c <USER_SERV_FindVoltageIndex+0x1ec>)
 8014ec2:	189b      	adds	r3, r3, r2
 8014ec4:	623b      	str	r3, [r7, #32]

  /* search the best PDO in the list of source PDOs */
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014eca:	e09a      	b.n	8015002 <USER_SERV_FindVoltageIndex+0x192>
  {
    pdo.d32 = ptpdoarray[temp_index];
 8014ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ece:	009b      	lsls	r3, r3, #2
 8014ed0:	6a3a      	ldr	r2, [r7, #32]
 8014ed2:	18d3      	adds	r3, r2, r3
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	61bb      	str	r3, [r7, #24]

    /* Check if the received source PDO is matching any of the SNK PDO */
    allowablepower = 0;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	613b      	str	r3, [r7, #16]
    if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	b2d8      	uxtb	r0, r3
 8014ee0:	69b9      	ldr	r1, [r7, #24]
 8014ee2:	2310      	movs	r3, #16
 8014ee4:	18fb      	adds	r3, r7, r3
 8014ee6:	2214      	movs	r2, #20
 8014ee8:	18ba      	adds	r2, r7, r2
 8014eea:	f7ff fe27 	bl	8014b3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 8014eee:	0003      	movs	r3, r0
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	d000      	beq.n	8014ef6 <USER_SERV_FindVoltageIndex+0x86>
 8014ef4:	e082      	b.n	8014ffc <USER_SERV_FindVoltageIndex+0x18c>
    {
      allowablecurrent = (allowablepower / voltage) * 1000U;
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	697a      	ldr	r2, [r7, #20]
 8014efa:	0011      	movs	r1, r2
 8014efc:	0018      	movs	r0, r3
 8014efe:	f7f1 f977 	bl	80061f0 <__udivsi3>
 8014f02:	0003      	movs	r3, r0
 8014f04:	001a      	movs	r2, r3
 8014f06:	0013      	movs	r3, r2
 8014f08:	015b      	lsls	r3, r3, #5
 8014f0a:	1a9b      	subs	r3, r3, r2
 8014f0c:	009b      	lsls	r3, r3, #2
 8014f0e:	189b      	adds	r3, r3, r2
 8014f10:	00db      	lsls	r3, r3, #3
 8014f12:	61fb      	str	r3, [r7, #28]

      /* Choose the best PDO depending on the user preferences */
      switch (Method)
 8014f14:	1dfb      	adds	r3, r7, #7
 8014f16:	781b      	ldrb	r3, [r3, #0]
 8014f18:	2b05      	cmp	r3, #5
 8014f1a:	d85b      	bhi.n	8014fd4 <USER_SERV_FindVoltageIndex+0x164>
 8014f1c:	009a      	lsls	r2, r3, #2
 8014f1e:	4b50      	ldr	r3, [pc, #320]	; (8015060 <USER_SERV_FindVoltageIndex+0x1f0>)
 8014f20:	18d3      	adds	r3, r2, r3
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	469f      	mov	pc, r3
      {
        case PDO_SEL_METHOD_MAX_PWR:
          if (allowablepower > selpower)
 8014f26:	693b      	ldr	r3, [r7, #16]
 8014f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d25b      	bcs.n	8014fe6 <USER_SERV_FindVoltageIndex+0x176>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8014f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f30:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 8014f32:	693b      	ldr	r3, [r7, #16]
 8014f34:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 8014f3a:	69fb      	ldr	r3, [r7, #28]
 8014f3c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 8014f3e:	e052      	b.n	8014fe6 <USER_SERV_FindVoltageIndex+0x176>

        case PDO_SEL_METHOD_MIN_PWR:
          if ((allowablepower < selpower) || (selpower == 0))
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d802      	bhi.n	8014f4e <USER_SERV_FindVoltageIndex+0xde>
 8014f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d14d      	bne.n	8014fea <USER_SERV_FindVoltageIndex+0x17a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8014f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f50:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 8014f5e:	e044      	b.n	8014fea <USER_SERV_FindVoltageIndex+0x17a>

        case PDO_SEL_METHOD_MAX_VOLT:
          if (voltage > reqvoltage)
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d242      	bcs.n	8014fee <USER_SERV_FindVoltageIndex+0x17e>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8014f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f6a:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 8014f74:	69fb      	ldr	r3, [r7, #28]
 8014f76:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 8014f78:	e039      	b.n	8014fee <USER_SERV_FindVoltageIndex+0x17e>

        case PDO_SEL_METHOD_MIN_VOLT:
          if ((voltage < reqvoltage) || (reqvoltage == 0))
 8014f7a:	697b      	ldr	r3, [r7, #20]
 8014f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d802      	bhi.n	8014f88 <USER_SERV_FindVoltageIndex+0x118>
 8014f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d134      	bne.n	8014ff2 <USER_SERV_FindVoltageIndex+0x182>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8014f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f8a:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 8014f98:	e02b      	b.n	8014ff2 <USER_SERV_FindVoltageIndex+0x182>

        case PDO_SEL_METHOD_MAX_CUR:
          if (allowablecurrent > selcurrent)
 8014f9a:	69fa      	ldr	r2, [r7, #28]
 8014f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d929      	bls.n	8014ff6 <USER_SERV_FindVoltageIndex+0x186>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8014fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa4:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 8014fb2:	e020      	b.n	8014ff6 <USER_SERV_FindVoltageIndex+0x186>

        case PDO_SEL_METHOD_MIN_CUR:
          if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 8014fb4:	69fa      	ldr	r2, [r7, #28]
 8014fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d302      	bcc.n	8014fc2 <USER_SERV_FindVoltageIndex+0x152>
 8014fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d11b      	bne.n	8014ffa <USER_SERV_FindVoltageIndex+0x18a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8014fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc4:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 8014fca:	697b      	ldr	r3, [r7, #20]
 8014fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 8014fce:	69fb      	ldr	r3, [r7, #28]
 8014fd0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 8014fd2:	e012      	b.n	8014ffa <USER_SERV_FindVoltageIndex+0x18a>

        default:
          /* Default behavior: last PDO is selected */
          curr_index = temp_index;
 8014fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fd6:	633b      	str	r3, [r7, #48]	; 0x30
          selpower   = allowablepower;
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	63bb      	str	r3, [r7, #56]	; 0x38
          reqvoltage = voltage;
 8014fdc:	697b      	ldr	r3, [r7, #20]
 8014fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          selcurrent = allowablecurrent;
 8014fe0:	69fb      	ldr	r3, [r7, #28]
 8014fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8014fe4:	e00a      	b.n	8014ffc <USER_SERV_FindVoltageIndex+0x18c>
          break;
 8014fe6:	46c0      	nop			; (mov r8, r8)
 8014fe8:	e008      	b.n	8014ffc <USER_SERV_FindVoltageIndex+0x18c>
          break;
 8014fea:	46c0      	nop			; (mov r8, r8)
 8014fec:	e006      	b.n	8014ffc <USER_SERV_FindVoltageIndex+0x18c>
          break;
 8014fee:	46c0      	nop			; (mov r8, r8)
 8014ff0:	e004      	b.n	8014ffc <USER_SERV_FindVoltageIndex+0x18c>
          break;
 8014ff2:	46c0      	nop			; (mov r8, r8)
 8014ff4:	e002      	b.n	8014ffc <USER_SERV_FindVoltageIndex+0x18c>
          break;
 8014ff6:	46c0      	nop			; (mov r8, r8)
 8014ff8:	e000      	b.n	8014ffc <USER_SERV_FindVoltageIndex+0x18c>
          break;
 8014ffa:	46c0      	nop			; (mov r8, r8)
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 8014ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ffe:	3301      	adds	r3, #1
 8015000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015006:	429a      	cmp	r2, r3
 8015008:	d200      	bcs.n	801500c <USER_SERV_FindVoltageIndex+0x19c>
 801500a:	e75f      	b.n	8014ecc <USER_SERV_FindVoltageIndex+0x5c>
      }
    }
  }

  /* If a suitable PDO was found */
  if (curr_index != DPM_NO_SRC_PDO_FOUND)
 801500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801500e:	2bff      	cmp	r3, #255	; 0xff
 8015010:	d01c      	beq.n	801504c <USER_SERV_FindVoltageIndex+0x1dc>
  {
    /* Fill the request power details */
    PtrRequestPowerDetails->MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 8015012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015014:	685a      	ldr	r2, [r3, #4]
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	605a      	str	r2, [r3, #4]
    PtrRequestPowerDetails->OperatingCurrentInmAunits    = (1000U * selpower) / reqvoltage;
 801501a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801501c:	0013      	movs	r3, r2
 801501e:	015b      	lsls	r3, r3, #5
 8015020:	1a9b      	subs	r3, r3, r2
 8015022:	009b      	lsls	r3, r3, #2
 8015024:	189b      	adds	r3, r3, r2
 8015026:	00db      	lsls	r3, r3, #3
 8015028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801502a:	0018      	movs	r0, r3
 801502c:	f7f1 f8e0 	bl	80061f0 <__udivsi3>
 8015030:	0003      	movs	r3, r0
 8015032:	001a      	movs	r2, r3
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	609a      	str	r2, [r3, #8]
    PtrRequestPowerDetails->MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 8015038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801503a:	699a      	ldr	r2, [r3, #24]
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	60da      	str	r2, [r3, #12]
    PtrRequestPowerDetails->OperatingPowerInmWunits      = selpower;
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015044:	611a      	str	r2, [r3, #16]
    PtrRequestPowerDetails->RequestedVoltageInmVunits    = reqvoltage;
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801504a:	601a      	str	r2, [r3, #0]
  }

  return curr_index;
 801504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801504e:	0018      	movs	r0, r3
 8015050:	46bd      	mov	sp, r7
 8015052:	b010      	add	sp, #64	; 0x40
 8015054:	bd80      	pop	{r7, pc}
 8015056:	46c0      	nop			; (mov r8, r8)
 8015058:	20000050 	.word	0x20000050
 801505c:	20002d90 	.word	0x20002d90
 8015060:	0801c4f0 	.word	0x0801c4f0

08015064 <USER_SERV_SNK_BuildRDOfromSelectedPDO>:
void USER_SERV_SNK_BuildRDOfromSelectedPDO(uint8_t PortNum,
                                                  uint8_t IndexSrcPDO,
                                                  USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 8015064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015066:	b0a7      	sub	sp, #156	; 0x9c
 8015068:	af02      	add	r7, sp, #8
 801506a:	60ba      	str	r2, [r7, #8]
 801506c:	607b      	str	r3, [r7, #4]
 801506e:	240f      	movs	r4, #15
 8015070:	193b      	adds	r3, r7, r4
 8015072:	1c02      	adds	r2, r0, #0
 8015074:	701a      	strb	r2, [r3, #0]
 8015076:	230e      	movs	r3, #14
 8015078:	18fb      	adds	r3, r7, r3
 801507a:	1c0a      	adds	r2, r1, #0
 801507c:	701a      	strb	r2, [r3, #0]
  uint32_t mv = 0;
 801507e:	2300      	movs	r3, #0
 8015080:	228c      	movs	r2, #140	; 0x8c
 8015082:	18ba      	adds	r2, r7, r2
 8015084:	6013      	str	r3, [r2, #0]
  uint32_t ma = 0;
 8015086:	2300      	movs	r3, #0
 8015088:	2288      	movs	r2, #136	; 0x88
 801508a:	18ba      	adds	r2, r7, r2
 801508c:	6013      	str	r3, [r2, #0]
  uint32_t size;
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801508e:	193b      	adds	r3, r7, r4
 8015090:	781a      	ldrb	r2, [r3, #0]
 8015092:	0013      	movs	r3, r2
 8015094:	009b      	lsls	r3, r3, #2
 8015096:	189b      	adds	r3, r3, r2
 8015098:	011b      	lsls	r3, r3, #4
 801509a:	4ae2      	ldr	r2, [pc, #904]	; (8015424 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 801509c:	189b      	adds	r3, r3, r2
 801509e:	2584      	movs	r5, #132	; 0x84
 80150a0:	197a      	adds	r2, r7, r5
 80150a2:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 80150a4:	193b      	adds	r3, r7, r4
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	2274      	movs	r2, #116	; 0x74
 80150aa:	435a      	muls	r2, r3
 80150ac:	4bde      	ldr	r3, [pc, #888]	; (8015428 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c4>)
 80150ae:	18d3      	adds	r3, r2, r3
 80150b0:	2280      	movs	r2, #128	; 0x80
 80150b2:	18ba      	adds	r2, r7, r2
 80150b4:	6013      	str	r3, [r2, #0]
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  /* Initialize RDO */
  rdo.d32 = 0;
 80150b6:	2300      	movs	r3, #0
 80150b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Read SNK PDO list for retrieving useful data to fill in RDO */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 80150ba:	237c      	movs	r3, #124	; 0x7c
 80150bc:	18f9      	adds	r1, r7, r3
 80150be:	2658      	movs	r6, #88	; 0x58
 80150c0:	19ba      	adds	r2, r7, r6
 80150c2:	193b      	adds	r3, r7, r4
 80150c4:	7818      	ldrb	r0, [r3, #0]
 80150c6:	000b      	movs	r3, r1
 80150c8:	2101      	movs	r1, #1
 80150ca:	f7fe f887 	bl	80131dc <USBPD_PWR_IF_GetPortPDOs>

  /* Store value of 1st SNK PDO (Fixed) in local variable */
  snk_fixed_pdo.d32 = snkpdolist[0];
 80150ce:	19bb      	adds	r3, r7, r6
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	657b      	str	r3, [r7, #84]	; 0x54

  /* Set common fields in RDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 80150d4:	197b      	adds	r3, r7, r5
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	67bb      	str	r3, [r7, #120]	; 0x78
  rdo.GenericRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 80150dc:	2357      	movs	r3, #87	; 0x57
 80150de:	18fb      	adds	r3, r7, r3
 80150e0:	781b      	ldrb	r3, [r3, #0]
 80150e2:	075b      	lsls	r3, r3, #29
 80150e4:	0fdb      	lsrs	r3, r3, #31
 80150e6:	b2da      	uxtb	r2, r3
 80150e8:	2377      	movs	r3, #119	; 0x77
 80150ea:	18fb      	adds	r3, r7, r3
 80150ec:	2101      	movs	r1, #1
 80150ee:	400a      	ands	r2, r1
 80150f0:	1890      	adds	r0, r2, r2
 80150f2:	781a      	ldrb	r2, [r3, #0]
 80150f4:	2102      	movs	r1, #2
 80150f6:	438a      	bics	r2, r1
 80150f8:	1c11      	adds	r1, r2, #0
 80150fa:	1c02      	adds	r2, r0, #0
 80150fc:	430a      	orrs	r2, r1
 80150fe:	701a      	strb	r2, [r3, #0]
  if (USBPD_SPECIFICATION_REV2 < DPM_Params[PortNum].PE_SpecRevision)
 8015100:	193b      	adds	r3, r7, r4
 8015102:	781a      	ldrb	r2, [r3, #0]
 8015104:	4bc9      	ldr	r3, [pc, #804]	; (801542c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 8015106:	0092      	lsls	r2, r2, #2
 8015108:	5cd3      	ldrb	r3, [r2, r3]
 801510a:	079b      	lsls	r3, r3, #30
 801510c:	0f9b      	lsrs	r3, r3, #30
 801510e:	b2db      	uxtb	r3, r3
 8015110:	2b01      	cmp	r3, #1
 8015112:	d931      	bls.n	8015178 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x114>
  {
#if defined(USBPDCORE_UNCHUNCKED_MODE)
    rdo.FixedVariableRDO.UnchunkedExtendedMessage = DPM_Settings[PortNum].PE_PD3_Support.d.PE_UnchunkSupport;
 8015114:	193b      	adds	r3, r7, r4
 8015116:	781a      	ldrb	r2, [r3, #0]
 8015118:	49c5      	ldr	r1, [pc, #788]	; (8015430 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3cc>)
 801511a:	2008      	movs	r0, #8
 801511c:	0013      	movs	r3, r2
 801511e:	005b      	lsls	r3, r3, #1
 8015120:	189b      	adds	r3, r3, r2
 8015122:	009b      	lsls	r3, r3, #2
 8015124:	18cb      	adds	r3, r1, r3
 8015126:	181b      	adds	r3, r3, r0
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	07db      	lsls	r3, r3, #31
 801512c:	0fdb      	lsrs	r3, r3, #31
 801512e:	b2da      	uxtb	r2, r3
 8015130:	2376      	movs	r3, #118	; 0x76
 8015132:	18fb      	adds	r3, r7, r3
 8015134:	01d0      	lsls	r0, r2, #7
 8015136:	781a      	ldrb	r2, [r3, #0]
 8015138:	217f      	movs	r1, #127	; 0x7f
 801513a:	400a      	ands	r2, r1
 801513c:	1c11      	adds	r1, r2, #0
 801513e:	1c02      	adds	r2, r0, #0
 8015140:	430a      	orrs	r2, r1
 8015142:	701a      	strb	r2, [r3, #0]
    DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_FALSE;
 8015144:	193b      	adds	r3, r7, r4
 8015146:	781b      	ldrb	r3, [r3, #0]
 8015148:	4ab8      	ldr	r2, [pc, #736]	; (801542c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	18d3      	adds	r3, r2, r3
 801514e:	78da      	ldrb	r2, [r3, #3]
 8015150:	2102      	movs	r1, #2
 8015152:	438a      	bics	r2, r1
 8015154:	70da      	strb	r2, [r3, #3]
    /* Set unchuncked bit if supported by port partner;*/
    if (USBPD_TRUE == pdo.SRCFixedPDO.UnchunkedExtendedMessage)
 8015156:	237b      	movs	r3, #123	; 0x7b
 8015158:	18fb      	adds	r3, r7, r3
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	2201      	movs	r2, #1
 801515e:	4013      	ands	r3, r2
 8015160:	b2db      	uxtb	r3, r3
 8015162:	2b00      	cmp	r3, #0
 8015164:	d008      	beq.n	8015178 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x114>
    {
      DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_TRUE;
 8015166:	193b      	adds	r3, r7, r4
 8015168:	781b      	ldrb	r3, [r3, #0]
 801516a:	4ab0      	ldr	r2, [pc, #704]	; (801542c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 801516c:	009b      	lsls	r3, r3, #2
 801516e:	18d3      	adds	r3, r2, r3
 8015170:	78da      	ldrb	r2, [r3, #3]
 8015172:	2102      	movs	r1, #2
 8015174:	430a      	orrs	r2, r1
 8015176:	70da      	strb	r2, [r3, #3]
    }
#endif /* USBPDCORE_UNCHUNCKED_MODE */
  }

  /* If no valid SNK PDO or if no SRC PDO match found (index>=nb of valid received SRC PDOs */
  if ((size < 1) || (IndexSrcPDO >= pdhandle->DPM_NumberOfRcvSRCPDO))
 8015178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801517a:	2b00      	cmp	r3, #0
 801517c:	d008      	beq.n	8015190 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x12c>
 801517e:	230e      	movs	r3, #14
 8015180:	18fb      	adds	r3, r7, r3
 8015182:	781a      	ldrb	r2, [r3, #0]
 8015184:	2384      	movs	r3, #132	; 0x84
 8015186:	18fb      	adds	r3, r7, r3
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	69db      	ldr	r3, [r3, #28]
 801518c:	429a      	cmp	r2, r3
 801518e:	d364      	bcc.n	801525a <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x1f6>
  {
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */
#ifdef _TRACE
    uint8_t msg[] = "USER_SERV_SNK_BuildRDOfromSelectedPDO: Pb in SRC PDO selection";
 8015190:	2414      	movs	r4, #20
 8015192:	193a      	adds	r2, r7, r4
 8015194:	4ba7      	ldr	r3, [pc, #668]	; (8015434 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d0>)
 8015196:	0010      	movs	r0, r2
 8015198:	0019      	movs	r1, r3
 801519a:	233f      	movs	r3, #63	; 0x3f
 801519c:	001a      	movs	r2, r3
 801519e:	f005 fd8f 	bl	801acc0 <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 80151a2:	193a      	adds	r2, r7, r4
 80151a4:	250f      	movs	r5, #15
 80151a6:	197b      	adds	r3, r7, r5
 80151a8:	7819      	ldrb	r1, [r3, #0]
 80151aa:	233f      	movs	r3, #63	; 0x3f
 80151ac:	9300      	str	r3, [sp, #0]
 80151ae:	0013      	movs	r3, r2
 80151b0:	2200      	movs	r2, #0
 80151b2:	2006      	movs	r0, #6
 80151b4:	f7f7 fecc 	bl	800cf50 <USBPD_TRACE_Add>
#endif /* _TRACE */
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 80151b8:	2477      	movs	r4, #119	; 0x77
 80151ba:	193b      	adds	r3, r7, r4
 80151bc:	781a      	ldrb	r2, [r3, #0]
 80151be:	2170      	movs	r1, #112	; 0x70
 80151c0:	438a      	bics	r2, r1
 80151c2:	1c11      	adds	r1, r2, #0
 80151c4:	2210      	movs	r2, #16
 80151c6:	430a      	orrs	r2, r1
 80151c8:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 80151ca:	2078      	movs	r0, #120	; 0x78
 80151cc:	183b      	adds	r3, r7, r0
 80151ce:	881b      	ldrh	r3, [r3, #0]
 80151d0:	059b      	lsls	r3, r3, #22
 80151d2:	0d9b      	lsrs	r3, r3, #22
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	059b      	lsls	r3, r3, #22
 80151d8:	0d9b      	lsrs	r3, r3, #22
 80151da:	029b      	lsls	r3, r3, #10
 80151dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80151de:	4996      	ldr	r1, [pc, #600]	; (8015438 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d4>)
 80151e0:	400a      	ands	r2, r1
 80151e2:	4313      	orrs	r3, r2
 80151e4:	677b      	str	r3, [r7, #116]	; 0x74
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 80151e6:	183b      	adds	r3, r7, r0
 80151e8:	881b      	ldrh	r3, [r3, #0]
 80151ea:	059b      	lsls	r3, r3, #22
 80151ec:	0d9b      	lsrs	r3, r3, #22
 80151ee:	b29a      	uxth	r2, r3
 80151f0:	2374      	movs	r3, #116	; 0x74
 80151f2:	18fb      	adds	r3, r7, r3
 80151f4:	0592      	lsls	r2, r2, #22
 80151f6:	0d90      	lsrs	r0, r2, #22
 80151f8:	881a      	ldrh	r2, [r3, #0]
 80151fa:	0a92      	lsrs	r2, r2, #10
 80151fc:	0292      	lsls	r2, r2, #10
 80151fe:	1c11      	adds	r1, r2, #0
 8015200:	1c02      	adds	r2, r0, #0
 8015202:	430a      	orrs	r2, r1
 8015204:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch           = 1U;
 8015206:	193b      	adds	r3, r7, r4
 8015208:	781a      	ldrb	r2, [r3, #0]
 801520a:	2104      	movs	r1, #4
 801520c:	430a      	orrs	r2, r1
 801520e:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 8015210:	2357      	movs	r3, #87	; 0x57
 8015212:	18fb      	adds	r3, r7, r3
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	075b      	lsls	r3, r3, #29
 8015218:	0fdb      	lsrs	r3, r3, #31
 801521a:	b2da      	uxtb	r2, r3
 801521c:	193b      	adds	r3, r7, r4
 801521e:	2101      	movs	r1, #1
 8015220:	400a      	ands	r2, r1
 8015222:	1890      	adds	r0, r2, r2
 8015224:	781a      	ldrb	r2, [r3, #0]
 8015226:	2102      	movs	r1, #2
 8015228:	438a      	bics	r2, r1
 801522a:	1c11      	adds	r1, r2, #0
 801522c:	1c02      	adds	r2, r0, #0
 801522e:	430a      	orrs	r2, r1
 8015230:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent           = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 8015232:	197b      	adds	r3, r7, r5
 8015234:	781a      	ldrb	r2, [r3, #0]
 8015236:	2380      	movs	r3, #128	; 0x80
 8015238:	18fb      	adds	r3, r7, r3
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	6859      	ldr	r1, [r3, #4]
 801523e:	4879      	ldr	r0, [pc, #484]	; (8015424 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 8015240:	0013      	movs	r3, r2
 8015242:	009b      	lsls	r3, r3, #2
 8015244:	189b      	adds	r3, r3, r2
 8015246:	011b      	lsls	r3, r3, #4
 8015248:	18c3      	adds	r3, r0, r3
 801524a:	334c      	adds	r3, #76	; 0x4c
 801524c:	6019      	str	r1, [r3, #0]
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 801524e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015250:	2384      	movs	r3, #132	; 0x84
 8015252:	18fb      	adds	r3, r7, r3
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	63da      	str	r2, [r3, #60]	; 0x3c
 8015258:	e0e0      	b.n	801541c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3b8>
    return;
  }

  /* Set the Object position */
  rdo.GenericRDO.ObjectPosition               = IndexSrcPDO + 1U;
 801525a:	240e      	movs	r4, #14
 801525c:	193b      	adds	r3, r7, r4
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	3301      	adds	r3, #1
 8015262:	b2db      	uxtb	r3, r3
 8015264:	1c1a      	adds	r2, r3, #0
 8015266:	2307      	movs	r3, #7
 8015268:	4013      	ands	r3, r2
 801526a:	b2da      	uxtb	r2, r3
 801526c:	2577      	movs	r5, #119	; 0x77
 801526e:	197b      	adds	r3, r7, r5
 8015270:	2107      	movs	r1, #7
 8015272:	400a      	ands	r2, r1
 8015274:	0110      	lsls	r0, r2, #4
 8015276:	781a      	ldrb	r2, [r3, #0]
 8015278:	2170      	movs	r1, #112	; 0x70
 801527a:	438a      	bics	r2, r1
 801527c:	1c11      	adds	r1, r2, #0
 801527e:	1c02      	adds	r2, r0, #0
 8015280:	430a      	orrs	r2, r1
 8015282:	701a      	strb	r2, [r3, #0]
  rdo.GenericRDO.NoUSBSuspend                 = 0;
 8015284:	197b      	adds	r3, r7, r5
 8015286:	781a      	ldrb	r2, [r3, #0]
 8015288:	2101      	movs	r1, #1
 801528a:	438a      	bics	r2, r1
 801528c:	701a      	strb	r2, [r3, #0]

  /* Extract power information from Power Data Object */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO];
 801528e:	193b      	adds	r3, r7, r4
 8015290:	781a      	ldrb	r2, [r3, #0]
 8015292:	2384      	movs	r3, #132	; 0x84
 8015294:	18fb      	adds	r3, r7, r3
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	0092      	lsls	r2, r2, #2
 801529a:	58d3      	ldr	r3, [r2, r3]
 801529c:	67bb      	str	r3, [r7, #120]	; 0x78

  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 801529e:	217b      	movs	r1, #123	; 0x7b
 80152a0:	187b      	adds	r3, r7, r1
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	061b      	lsls	r3, r3, #24
 80152a6:	0f9b      	lsrs	r3, r3, #30
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	001a      	movs	r2, r3
 80152ac:	2398      	movs	r3, #152	; 0x98
 80152ae:	2010      	movs	r0, #16
 80152b0:	181b      	adds	r3, r3, r0
 80152b2:	19db      	adds	r3, r3, r7
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	601a      	str	r2, [r3, #0]

  /* Retrieve request details from SRC PDO selection */
  mv = PtrRequestPowerDetails->RequestedVoltageInmVunits;
 80152b8:	68bb      	ldr	r3, [r7, #8]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	228c      	movs	r2, #140	; 0x8c
 80152be:	18ba      	adds	r2, r7, r2
 80152c0:	6013      	str	r3, [r2, #0]
  ma = PtrRequestPowerDetails->OperatingCurrentInmAunits;
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	689b      	ldr	r3, [r3, #8]
 80152c6:	2288      	movs	r2, #136	; 0x88
 80152c8:	18ba      	adds	r2, r7, r2
 80152ca:	6013      	str	r3, [r2, #0]

  switch (pdo.GenericPDO.PowerObject)
 80152cc:	187b      	adds	r3, r7, r1
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	061b      	lsls	r3, r3, #24
 80152d2:	0f9b      	lsrs	r3, r3, #30
 80152d4:	b2db      	uxtb	r3, r3
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d002      	beq.n	80152e0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x27c>
 80152da:	2b03      	cmp	r3, #3
 80152dc:	d036      	beq.n	801534c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x2e8>
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
    }
    break;

    default:
      break;
 80152de:	e083      	b.n	80153e8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x384>
      DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 80152e0:	230f      	movs	r3, #15
 80152e2:	18fb      	adds	r3, r7, r3
 80152e4:	781a      	ldrb	r2, [r3, #0]
 80152e6:	494f      	ldr	r1, [pc, #316]	; (8015424 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 80152e8:	0013      	movs	r3, r2
 80152ea:	009b      	lsls	r3, r3, #2
 80152ec:	189b      	adds	r3, r3, r2
 80152ee:	011b      	lsls	r3, r3, #4
 80152f0:	18cb      	adds	r3, r1, r3
 80152f2:	334c      	adds	r3, #76	; 0x4c
 80152f4:	2488      	movs	r4, #136	; 0x88
 80152f6:	193a      	adds	r2, r7, r4
 80152f8:	6812      	ldr	r2, [r2, #0]
 80152fa:	601a      	str	r2, [r3, #0]
      rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 80152fc:	193b      	adds	r3, r7, r4
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	210a      	movs	r1, #10
 8015302:	0018      	movs	r0, r3
 8015304:	f7f0 ff74 	bl	80061f0 <__udivsi3>
 8015308:	0003      	movs	r3, r0
 801530a:	059b      	lsls	r3, r3, #22
 801530c:	0d9b      	lsrs	r3, r3, #22
 801530e:	b29b      	uxth	r3, r3
 8015310:	059b      	lsls	r3, r3, #22
 8015312:	0d9b      	lsrs	r3, r3, #22
 8015314:	029b      	lsls	r3, r3, #10
 8015316:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015318:	4947      	ldr	r1, [pc, #284]	; (8015438 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d4>)
 801531a:	400a      	ands	r2, r1
 801531c:	4313      	orrs	r3, r2
 801531e:	677b      	str	r3, [r7, #116]	; 0x74
      rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = ma / 10U;
 8015320:	193b      	adds	r3, r7, r4
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	210a      	movs	r1, #10
 8015326:	0018      	movs	r0, r3
 8015328:	f7f0 ff62 	bl	80061f0 <__udivsi3>
 801532c:	0003      	movs	r3, r0
 801532e:	059b      	lsls	r3, r3, #22
 8015330:	0d9b      	lsrs	r3, r3, #22
 8015332:	b29a      	uxth	r2, r3
 8015334:	2374      	movs	r3, #116	; 0x74
 8015336:	18fb      	adds	r3, r7, r3
 8015338:	0592      	lsls	r2, r2, #22
 801533a:	0d90      	lsrs	r0, r2, #22
 801533c:	881a      	ldrh	r2, [r3, #0]
 801533e:	0a92      	lsrs	r2, r2, #10
 8015340:	0292      	lsls	r2, r2, #10
 8015342:	1c11      	adds	r1, r2, #0
 8015344:	1c02      	adds	r2, r0, #0
 8015346:	430a      	orrs	r2, r1
 8015348:	801a      	strh	r2, [r3, #0]
    break;
 801534a:	e04d      	b.n	80153e8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x384>
      DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 801534c:	230f      	movs	r3, #15
 801534e:	18fb      	adds	r3, r7, r3
 8015350:	781a      	ldrb	r2, [r3, #0]
 8015352:	4934      	ldr	r1, [pc, #208]	; (8015424 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 8015354:	0013      	movs	r3, r2
 8015356:	009b      	lsls	r3, r3, #2
 8015358:	189b      	adds	r3, r3, r2
 801535a:	011b      	lsls	r3, r3, #4
 801535c:	18cb      	adds	r3, r1, r3
 801535e:	334c      	adds	r3, #76	; 0x4c
 8015360:	2488      	movs	r4, #136	; 0x88
 8015362:	193a      	adds	r2, r7, r4
 8015364:	6812      	ldr	r2, [r2, #0]
 8015366:	601a      	str	r2, [r3, #0]
      rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO + 1U;
 8015368:	230e      	movs	r3, #14
 801536a:	18fb      	adds	r3, r7, r3
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	3301      	adds	r3, #1
 8015370:	b2db      	uxtb	r3, r3
 8015372:	1c1a      	adds	r2, r3, #0
 8015374:	2307      	movs	r3, #7
 8015376:	4013      	ands	r3, r2
 8015378:	b2da      	uxtb	r2, r3
 801537a:	2377      	movs	r3, #119	; 0x77
 801537c:	18fb      	adds	r3, r7, r3
 801537e:	2107      	movs	r1, #7
 8015380:	400a      	ands	r2, r1
 8015382:	0110      	lsls	r0, r2, #4
 8015384:	781a      	ldrb	r2, [r3, #0]
 8015386:	2170      	movs	r1, #112	; 0x70
 8015388:	438a      	bics	r2, r1
 801538a:	1c11      	adds	r1, r2, #0
 801538c:	1c02      	adds	r2, r0, #0
 801538e:	430a      	orrs	r2, r1
 8015390:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 8015392:	193b      	adds	r3, r7, r4
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2132      	movs	r1, #50	; 0x32
 8015398:	0018      	movs	r0, r3
 801539a:	f7f0 ff29 	bl	80061f0 <__udivsi3>
 801539e:	0003      	movs	r3, r0
 80153a0:	1c1a      	adds	r2, r3, #0
 80153a2:	237f      	movs	r3, #127	; 0x7f
 80153a4:	4013      	ands	r3, r2
 80153a6:	b2da      	uxtb	r2, r3
 80153a8:	2374      	movs	r3, #116	; 0x74
 80153aa:	18fb      	adds	r3, r7, r3
 80153ac:	217f      	movs	r1, #127	; 0x7f
 80153ae:	400a      	ands	r2, r1
 80153b0:	0010      	movs	r0, r2
 80153b2:	781a      	ldrb	r2, [r3, #0]
 80153b4:	217f      	movs	r1, #127	; 0x7f
 80153b6:	438a      	bics	r2, r1
 80153b8:	1c11      	adds	r1, r2, #0
 80153ba:	1c02      	adds	r2, r0, #0
 80153bc:	430a      	orrs	r2, r1
 80153be:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 80153c0:	238c      	movs	r3, #140	; 0x8c
 80153c2:	18fb      	adds	r3, r7, r3
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	2114      	movs	r1, #20
 80153c8:	0018      	movs	r0, r3
 80153ca:	f7f0 ff11 	bl	80061f0 <__udivsi3>
 80153ce:	0003      	movs	r3, r0
 80153d0:	055b      	lsls	r3, r3, #21
 80153d2:	0d5b      	lsrs	r3, r3, #21
 80153d4:	b29b      	uxth	r3, r3
 80153d6:	055b      	lsls	r3, r3, #21
 80153d8:	0d5b      	lsrs	r3, r3, #21
 80153da:	025b      	lsls	r3, r3, #9
 80153dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80153de:	4917      	ldr	r1, [pc, #92]	; (801543c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d8>)
 80153e0:	400a      	ands	r2, r1
 80153e2:	4313      	orrs	r3, r2
 80153e4:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 80153e6:	46c0      	nop			; (mov r8, r8)
  }

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 80153e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80153ea:	2184      	movs	r1, #132	; 0x84
 80153ec:	187b      	adds	r3, r7, r1
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	63da      	str	r2, [r3, #60]	; 0x3c
  pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 80153f2:	2377      	movs	r3, #119	; 0x77
 80153f4:	18fb      	adds	r3, r7, r3
 80153f6:	781b      	ldrb	r3, [r3, #0]
 80153f8:	065b      	lsls	r3, r3, #25
 80153fa:	0f5b      	lsrs	r3, r3, #29
 80153fc:	b2db      	uxtb	r3, r3
 80153fe:	001a      	movs	r2, r3
 8015400:	187b      	adds	r3, r7, r1
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	641a      	str	r2, [r3, #64]	; 0x40

  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 8015406:	187b      	adds	r3, r7, r1
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	601a      	str	r2, [r3, #0]
  /* Get the requested voltage */
  pdhandle->DPM_RequestedVoltage = mv;
 8015410:	187b      	adds	r3, r7, r1
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	228c      	movs	r2, #140	; 0x8c
 8015416:	18ba      	adds	r2, r7, r2
 8015418:	6812      	ldr	r2, [r2, #0]
 801541a:	649a      	str	r2, [r3, #72]	; 0x48
}
 801541c:	46bd      	mov	sp, r7
 801541e:	b025      	add	sp, #148	; 0x94
 8015420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015422:	46c0      	nop			; (mov r8, r8)
 8015424:	20002d90 	.word	0x20002d90
 8015428:	20000050 	.word	0x20000050
 801542c:	20002d7c 	.word	0x20002d7c
 8015430:	2000003c 	.word	0x2000003c
 8015434:	0801c270 	.word	0x0801c270
 8015438:	fff003ff 	.word	0xfff003ff
 801543c:	fff001ff 	.word	0xfff001ff

08015440 <USER_SERV_SNK_BuildRequestedRDO>:
void USER_SERV_SNK_BuildRequestedRDO(uint8_t PortNum,
                                                  uint16_t IndexSrcPDO,
												  uint16_t Voltage_mV, uint16_t Current_mA,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 8015440:	b5b0      	push	{r4, r5, r7, lr}
 8015442:	b088      	sub	sp, #32
 8015444:	af00      	add	r7, sp, #0
 8015446:	0005      	movs	r5, r0
 8015448:	000c      	movs	r4, r1
 801544a:	0010      	movs	r0, r2
 801544c:	0019      	movs	r1, r3
 801544e:	1dfb      	adds	r3, r7, #7
 8015450:	1c2a      	adds	r2, r5, #0
 8015452:	701a      	strb	r2, [r3, #0]
 8015454:	1d3b      	adds	r3, r7, #4
 8015456:	1c22      	adds	r2, r4, #0
 8015458:	801a      	strh	r2, [r3, #0]
 801545a:	1cbb      	adds	r3, r7, #2
 801545c:	1c02      	adds	r2, r0, #0
 801545e:	801a      	strh	r2, [r3, #0]
 8015460:	003b      	movs	r3, r7
 8015462:	1c0a      	adds	r2, r1, #0
 8015464:	801a      	strh	r2, [r3, #0]
  uint32_t mv = Voltage_mV;
 8015466:	1cbb      	adds	r3, r7, #2
 8015468:	881b      	ldrh	r3, [r3, #0]
 801546a:	61fb      	str	r3, [r7, #28]
  uint32_t ma = Current_mA;
 801546c:	003b      	movs	r3, r7
 801546e:	881b      	ldrh	r3, [r3, #0]
 8015470:	61bb      	str	r3, [r7, #24]
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 8015472:	1dfb      	adds	r3, r7, #7
 8015474:	781a      	ldrb	r2, [r3, #0]
 8015476:	0013      	movs	r3, r2
 8015478:	009b      	lsls	r3, r3, #2
 801547a:	189b      	adds	r3, r3, r2
 801547c:	011b      	lsls	r3, r3, #4
 801547e:	4a65      	ldr	r2, [pc, #404]	; (8015614 <USER_SERV_SNK_BuildRequestedRDO+0x1d4>)
 8015480:	189b      	adds	r3, r3, r2
 8015482:	617b      	str	r3, [r7, #20]

  /* Initialize RDO */
  rdo.d32 = 0;
 8015484:	2300      	movs	r3, #0
 8015486:	60fb      	str	r3, [r7, #12]
  rdo.GenericRDO.USBCommunicationsCapable = 0; //snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 8015488:	200f      	movs	r0, #15
 801548a:	183b      	adds	r3, r7, r0
 801548c:	781a      	ldrb	r2, [r3, #0]
 801548e:	2102      	movs	r1, #2
 8015490:	438a      	bics	r2, r1
 8015492:	701a      	strb	r2, [r3, #0]
                                               //Shall only be set for Sources capable of communication over the USB data lines
  rdo.GenericRDO.NoUSBSuspend             = 1; //Sinks May indicate to the Source that they would prefer to have the USB Suspend Supported flag cleared by setting
 8015494:	183b      	adds	r3, r7, r0
 8015496:	781a      	ldrb	r2, [r3, #0]
 8015498:	2101      	movs	r1, #1
 801549a:	430a      	orrs	r2, r1
 801549c:	701a      	strb	r2, [r3, #0]
                                               //the No USB Suspend flag in a Request Message
  rdo.GenericRDO.ObjectPosition = IndexSrcPDO;
 801549e:	1d3b      	adds	r3, r7, #4
 80154a0:	881b      	ldrh	r3, [r3, #0]
 80154a2:	1c1a      	adds	r2, r3, #0
 80154a4:	2307      	movs	r3, #7
 80154a6:	4013      	ands	r3, r2
 80154a8:	b2da      	uxtb	r2, r3
 80154aa:	183b      	adds	r3, r7, r0
 80154ac:	2107      	movs	r1, #7
 80154ae:	400a      	ands	r2, r1
 80154b0:	0110      	lsls	r0, r2, #4
 80154b2:	781a      	ldrb	r2, [r3, #0]
 80154b4:	2170      	movs	r1, #112	; 0x70
 80154b6:	438a      	bics	r2, r1
 80154b8:	1c11      	adds	r1, r2, #0
 80154ba:	1c02      	adds	r2, r0, #0
 80154bc:	430a      	orrs	r2, r1
 80154be:	701a      	strb	r2, [r3, #0]

  /* Initialize PDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO-1];
 80154c0:	1d3b      	adds	r3, r7, #4
 80154c2:	881b      	ldrh	r3, [r3, #0]
 80154c4:	1e5a      	subs	r2, r3, #1
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	0092      	lsls	r2, r2, #2
 80154ca:	58d3      	ldr	r3, [r2, r3]
 80154cc:	613b      	str	r3, [r7, #16]
  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 80154ce:	2113      	movs	r1, #19
 80154d0:	187b      	adds	r3, r7, r1
 80154d2:	781b      	ldrb	r3, [r3, #0]
 80154d4:	061b      	lsls	r3, r3, #24
 80154d6:	0f9b      	lsrs	r3, r3, #30
 80154d8:	b2db      	uxtb	r3, r3
 80154da:	001a      	movs	r2, r3
 80154dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154de:	601a      	str	r2, [r3, #0]

  /* Build RDO*/
  switch (pdo.GenericPDO.PowerObject)
 80154e0:	187b      	adds	r3, r7, r1
 80154e2:	781b      	ldrb	r3, [r3, #0]
 80154e4:	061b      	lsls	r3, r3, #24
 80154e6:	0f9b      	lsrs	r3, r3, #30
 80154e8:	b2db      	uxtb	r3, r3
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d002      	beq.n	80154f4 <USER_SERV_SNK_BuildRequestedRDO+0xb4>
 80154ee:	2b03      	cmp	r3, #3
 80154f0:	d031      	beq.n	8015556 <USER_SERV_SNK_BuildRequestedRDO+0x116>
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
      }
      break;

      default:
        break;
 80154f2:	e075      	b.n	80155e0 <USER_SERV_SNK_BuildRequestedRDO+0x1a0>
        DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 80154f4:	1dfb      	adds	r3, r7, #7
 80154f6:	781a      	ldrb	r2, [r3, #0]
 80154f8:	4946      	ldr	r1, [pc, #280]	; (8015614 <USER_SERV_SNK_BuildRequestedRDO+0x1d4>)
 80154fa:	0013      	movs	r3, r2
 80154fc:	009b      	lsls	r3, r3, #2
 80154fe:	189b      	adds	r3, r3, r2
 8015500:	011b      	lsls	r3, r3, #4
 8015502:	18cb      	adds	r3, r1, r3
 8015504:	334c      	adds	r3, #76	; 0x4c
 8015506:	69ba      	ldr	r2, [r7, #24]
 8015508:	601a      	str	r2, [r3, #0]
        rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 801550a:	69bb      	ldr	r3, [r7, #24]
 801550c:	210a      	movs	r1, #10
 801550e:	0018      	movs	r0, r3
 8015510:	f7f0 fe6e 	bl	80061f0 <__udivsi3>
 8015514:	0003      	movs	r3, r0
 8015516:	059b      	lsls	r3, r3, #22
 8015518:	0d9b      	lsrs	r3, r3, #22
 801551a:	b29b      	uxth	r3, r3
 801551c:	059b      	lsls	r3, r3, #22
 801551e:	0d9b      	lsrs	r3, r3, #22
 8015520:	029b      	lsls	r3, r3, #10
 8015522:	68fa      	ldr	r2, [r7, #12]
 8015524:	493c      	ldr	r1, [pc, #240]	; (8015618 <USER_SERV_SNK_BuildRequestedRDO+0x1d8>)
 8015526:	400a      	ands	r2, r1
 8015528:	4313      	orrs	r3, r2
 801552a:	60fb      	str	r3, [r7, #12]
        rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = ma / 10U;
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	210a      	movs	r1, #10
 8015530:	0018      	movs	r0, r3
 8015532:	f7f0 fe5d 	bl	80061f0 <__udivsi3>
 8015536:	0003      	movs	r3, r0
 8015538:	059b      	lsls	r3, r3, #22
 801553a:	0d9b      	lsrs	r3, r3, #22
 801553c:	b29a      	uxth	r2, r3
 801553e:	230c      	movs	r3, #12
 8015540:	18fb      	adds	r3, r7, r3
 8015542:	0592      	lsls	r2, r2, #22
 8015544:	0d90      	lsrs	r0, r2, #22
 8015546:	881a      	ldrh	r2, [r3, #0]
 8015548:	0a92      	lsrs	r2, r2, #10
 801554a:	0292      	lsls	r2, r2, #10
 801554c:	1c11      	adds	r1, r2, #0
 801554e:	1c02      	adds	r2, r0, #0
 8015550:	430a      	orrs	r2, r1
 8015552:	801a      	strh	r2, [r3, #0]
      break;
 8015554:	e044      	b.n	80155e0 <USER_SERV_SNK_BuildRequestedRDO+0x1a0>
        DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 8015556:	1dfb      	adds	r3, r7, #7
 8015558:	781a      	ldrb	r2, [r3, #0]
 801555a:	492e      	ldr	r1, [pc, #184]	; (8015614 <USER_SERV_SNK_BuildRequestedRDO+0x1d4>)
 801555c:	0013      	movs	r3, r2
 801555e:	009b      	lsls	r3, r3, #2
 8015560:	189b      	adds	r3, r3, r2
 8015562:	011b      	lsls	r3, r3, #4
 8015564:	18cb      	adds	r3, r1, r3
 8015566:	334c      	adds	r3, #76	; 0x4c
 8015568:	69ba      	ldr	r2, [r7, #24]
 801556a:	601a      	str	r2, [r3, #0]
        rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO;
 801556c:	1d3b      	adds	r3, r7, #4
 801556e:	881b      	ldrh	r3, [r3, #0]
 8015570:	1c1a      	adds	r2, r3, #0
 8015572:	2307      	movs	r3, #7
 8015574:	4013      	ands	r3, r2
 8015576:	b2da      	uxtb	r2, r3
 8015578:	230f      	movs	r3, #15
 801557a:	18fb      	adds	r3, r7, r3
 801557c:	2107      	movs	r1, #7
 801557e:	400a      	ands	r2, r1
 8015580:	0110      	lsls	r0, r2, #4
 8015582:	781a      	ldrb	r2, [r3, #0]
 8015584:	2170      	movs	r1, #112	; 0x70
 8015586:	438a      	bics	r2, r1
 8015588:	1c11      	adds	r1, r2, #0
 801558a:	1c02      	adds	r2, r0, #0
 801558c:	430a      	orrs	r2, r1
 801558e:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	2132      	movs	r1, #50	; 0x32
 8015594:	0018      	movs	r0, r3
 8015596:	f7f0 fe2b 	bl	80061f0 <__udivsi3>
 801559a:	0003      	movs	r3, r0
 801559c:	1c1a      	adds	r2, r3, #0
 801559e:	237f      	movs	r3, #127	; 0x7f
 80155a0:	4013      	ands	r3, r2
 80155a2:	b2da      	uxtb	r2, r3
 80155a4:	230c      	movs	r3, #12
 80155a6:	18fb      	adds	r3, r7, r3
 80155a8:	217f      	movs	r1, #127	; 0x7f
 80155aa:	400a      	ands	r2, r1
 80155ac:	0010      	movs	r0, r2
 80155ae:	781a      	ldrb	r2, [r3, #0]
 80155b0:	217f      	movs	r1, #127	; 0x7f
 80155b2:	438a      	bics	r2, r1
 80155b4:	1c11      	adds	r1, r2, #0
 80155b6:	1c02      	adds	r2, r0, #0
 80155b8:	430a      	orrs	r2, r1
 80155ba:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	2114      	movs	r1, #20
 80155c0:	0018      	movs	r0, r3
 80155c2:	f7f0 fe15 	bl	80061f0 <__udivsi3>
 80155c6:	0003      	movs	r3, r0
 80155c8:	055b      	lsls	r3, r3, #21
 80155ca:	0d5b      	lsrs	r3, r3, #21
 80155cc:	b29b      	uxth	r3, r3
 80155ce:	055b      	lsls	r3, r3, #21
 80155d0:	0d5b      	lsrs	r3, r3, #21
 80155d2:	025b      	lsls	r3, r3, #9
 80155d4:	68fa      	ldr	r2, [r7, #12]
 80155d6:	4911      	ldr	r1, [pc, #68]	; (801561c <USER_SERV_SNK_BuildRequestedRDO+0x1dc>)
 80155d8:	400a      	ands	r2, r1
 80155da:	4313      	orrs	r3, r2
 80155dc:	60fb      	str	r3, [r7, #12]
      break;
 80155de:	46c0      	nop			; (mov r8, r8)
    }

  /*Assign request values to pdhandle*/
  pdhandle->DPM_RDOPositionPrevious = pdhandle->DPM_RDOPosition;
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	645a      	str	r2, [r3, #68]	; 0x44
  pdhandle->DPM_RDOPosition = IndexSrcPDO; //pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 80155e8:	1d3b      	adds	r3, r7, #4
 80155ea:	881a      	ldrh	r2, [r3, #0]
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	641a      	str	r2, [r3, #64]	; 0x40
  pdhandle->DPM_RequestedVoltage = mv;
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	69fa      	ldr	r2, [r7, #28]
 80155f4:	649a      	str	r2, [r3, #72]	; 0x48
  pdhandle->DPM_RequestedCurrent = ma;
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	69ba      	ldr	r2, [r7, #24]
 80155fa:	64da      	str	r2, [r3, #76]	; 0x4c

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 80155fc:	68fa      	ldr	r2, [r7, #12]
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	63da      	str	r2, [r3, #60]	; 0x3c
  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015608:	601a      	str	r2, [r3, #0]

}
 801560a:	46c0      	nop			; (mov r8, r8)
 801560c:	46bd      	mov	sp, r7
 801560e:	b008      	add	sp, #32
 8015610:	bdb0      	pop	{r4, r5, r7, pc}
 8015612:	46c0      	nop			; (mov r8, r8)
 8015614:	20002d90 	.word	0x20002d90
 8015618:	fff003ff 	.word	0xfff003ff
 801561c:	fff001ff 	.word	0xfff001ff

08015620 <USER_SERV_FindSRCIndex>:
											USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
											uint16_t Voltage_mV,
											uint16_t Current_mA,
											uint8_t Method)

{
 8015620:	b590      	push	{r4, r7, lr}
 8015622:	b091      	sub	sp, #68	; 0x44
 8015624:	af00      	add	r7, sp, #0
 8015626:	60f8      	str	r0, [r7, #12]
 8015628:	60b9      	str	r1, [r7, #8]
 801562a:	0019      	movs	r1, r3
 801562c:	1dbb      	adds	r3, r7, #6
 801562e:	801a      	strh	r2, [r3, #0]
 8015630:	1d3b      	adds	r3, r7, #4
 8015632:	1c0a      	adds	r2, r1, #0
 8015634:	801a      	strh	r2, [r3, #0]
	USBPD_PDO_TypeDef srcpdo;
	uint32_t *ptpdoarray;
	uint32_t reqvoltage = Voltage_mV;
 8015636:	1dbb      	adds	r3, r7, #6
 8015638:	881b      	ldrh	r3, [r3, #0]
 801563a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t reqcurrent = Current_mA;
 801563c:	1d3b      	adds	r3, r7, #4
 801563e:	881b      	ldrh	r3, [r3, #0]
 8015640:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t nbsrcpdo;
	uint32_t allowablepower;
	uint32_t selpower;
	uint32_t allowablecurrent;
	uint32_t selcurrent;
	uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 8015642:	23ff      	movs	r3, #255	; 0xff
 8015644:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t temp_index;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	2274      	movs	r2, #116	; 0x74
 801564a:	435a      	muls	r2, r3
 801564c:	4b4c      	ldr	r3, [pc, #304]	; (8015780 <USER_SERV_FindSRCIndex+0x160>)
 801564e:	18d3      	adds	r3, r2, r3
 8015650:	62bb      	str	r3, [r7, #40]	; 0x28

	selcurrent     = 0;
 8015652:	2300      	movs	r3, #0
 8015654:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Get number of source PDOs
	nbsrcpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 8015656:	494b      	ldr	r1, [pc, #300]	; (8015784 <USER_SERV_FindSRCIndex+0x164>)
 8015658:	68fa      	ldr	r2, [r7, #12]
 801565a:	0013      	movs	r3, r2
 801565c:	009b      	lsls	r3, r3, #2
 801565e:	189b      	adds	r3, r3, r2
 8015660:	011b      	lsls	r3, r3, #4
 8015662:	18cb      	adds	r3, r1, r3
 8015664:	331c      	adds	r3, #28
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	627b      	str	r3, [r7, #36]	; 0x24
	//Get array list of SRC PDOs
	ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 801566a:	68fa      	ldr	r2, [r7, #12]
 801566c:	0013      	movs	r3, r2
 801566e:	009b      	lsls	r3, r3, #2
 8015670:	189b      	adds	r3, r3, r2
 8015672:	011b      	lsls	r3, r3, #4
 8015674:	4a43      	ldr	r2, [pc, #268]	; (8015784 <USER_SERV_FindSRCIndex+0x164>)
 8015676:	189b      	adds	r3, r3, r2
 8015678:	623b      	str	r3, [r7, #32]

	/* Check SRC PDO value according to its type */
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801567a:	2300      	movs	r3, #0
 801567c:	637b      	str	r3, [r7, #52]	; 0x34
 801567e:	e074      	b.n	801576a <USER_SERV_FindSRCIndex+0x14a>
	{
		srcpdo.d32 = ptpdoarray[temp_index];
 8015680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015682:	009b      	lsls	r3, r3, #2
 8015684:	6a3a      	ldr	r2, [r7, #32]
 8015686:	18d3      	adds	r3, r2, r3
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	613b      	str	r3, [r7, #16]

		switch (srcpdo.GenericPDO.PowerObject)
 801568c:	2313      	movs	r3, #19
 801568e:	18fb      	adds	r3, r7, r3
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	061b      	lsls	r3, r3, #24
 8015694:	0f9b      	lsrs	r3, r3, #30
 8015696:	b2db      	uxtb	r3, r3
 8015698:	2b00      	cmp	r3, #0
 801569a:	d001      	beq.n	80156a0 <USER_SERV_FindSRCIndex+0x80>
 801569c:	2b03      	cmp	r3, #3
 801569e:	d161      	bne.n	8015764 <USER_SERV_FindSRCIndex+0x144>
		{
			uint16_t srcmaxvoltage100mv;
			uint16_t srcminvoltage100mv;
			uint16_t srcmaxcurrent50ma;
			//Extract voltage and current limits of given SRC APDO
			srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 80156a0:	2312      	movs	r3, #18
 80156a2:	18fb      	adds	r3, r7, r3
 80156a4:	881b      	ldrh	r3, [r3, #0]
 80156a6:	05db      	lsls	r3, r3, #23
 80156a8:	0e1b      	lsrs	r3, r3, #24
 80156aa:	b2da      	uxtb	r2, r3
 80156ac:	201e      	movs	r0, #30
 80156ae:	183b      	adds	r3, r7, r0
 80156b0:	801a      	strh	r2, [r3, #0]
			srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 80156b2:	2110      	movs	r1, #16
 80156b4:	187b      	adds	r3, r7, r1
 80156b6:	785a      	ldrb	r2, [r3, #1]
 80156b8:	241c      	movs	r4, #28
 80156ba:	193b      	adds	r3, r7, r4
 80156bc:	801a      	strh	r2, [r3, #0]
			srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 80156be:	187b      	adds	r3, r7, r1
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	065b      	lsls	r3, r3, #25
 80156c4:	0e5b      	lsrs	r3, r3, #25
 80156c6:	b2da      	uxtb	r2, r3
 80156c8:	211a      	movs	r1, #26
 80156ca:	187b      	adds	r3, r7, r1
 80156cc:	801a      	strh	r2, [r3, #0]

			/*Check if reqvoltage falls within SRC_APDO voltage range*/
			if ( (PWR_DECODE_100MV(srcminvoltage100mv) <= reqvoltage) && (reqvoltage <= PWR_DECODE_100MV(srcmaxvoltage100mv)) )
 80156ce:	193b      	adds	r3, r7, r4
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	2264      	movs	r2, #100	; 0x64
 80156d4:	4353      	muls	r3, r2
 80156d6:	b29b      	uxth	r3, r3
 80156d8:	001a      	movs	r2, r3
 80156da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156dc:	4293      	cmp	r3, r2
 80156de:	d341      	bcc.n	8015764 <USER_SERV_FindSRCIndex+0x144>
 80156e0:	183b      	adds	r3, r7, r0
 80156e2:	881b      	ldrh	r3, [r3, #0]
 80156e4:	2264      	movs	r2, #100	; 0x64
 80156e6:	4353      	muls	r3, r2
 80156e8:	b29b      	uxth	r3, r3
 80156ea:	001a      	movs	r2, r3
 80156ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ee:	4293      	cmp	r3, r2
 80156f0:	d838      	bhi.n	8015764 <USER_SERV_FindSRCIndex+0x144>
			{
				/*Check that reqcurrent is smaller or equal to srcmaxcurrent*/
				if ( (reqcurrent <= PWR_DECODE_50MA(srcmaxcurrent50ma)) && (reqcurrent != 0) )
 80156f2:	187b      	adds	r3, r7, r1
 80156f4:	881b      	ldrh	r3, [r3, #0]
 80156f6:	2232      	movs	r2, #50	; 0x32
 80156f8:	4353      	muls	r3, r2
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	001a      	movs	r2, r3
 80156fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015700:	4293      	cmp	r3, r2
 8015702:	d82f      	bhi.n	8015764 <USER_SERV_FindSRCIndex+0x144>
 8015704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015706:	2b00      	cmp	r3, #0
 8015708:	d02c      	beq.n	8015764 <USER_SERV_FindSRCIndex+0x144>
				{
					/*Convert srcmaxcurrent into mV*/
					allowablecurrent = PWR_DECODE_50MA(srcmaxcurrent50ma);
 801570a:	187b      	adds	r3, r7, r1
 801570c:	881b      	ldrh	r3, [r3, #0]
 801570e:	2232      	movs	r2, #50	; 0x32
 8015710:	4353      	muls	r3, r2
 8015712:	b29b      	uxth	r3, r3
 8015714:	617b      	str	r3, [r7, #20]

					/*Find the best APDO index based on the method */
					switch(Method)
 8015716:	2348      	movs	r3, #72	; 0x48
 8015718:	2208      	movs	r2, #8
 801571a:	189b      	adds	r3, r3, r2
 801571c:	19db      	adds	r3, r3, r7
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	2b04      	cmp	r3, #4
 8015722:	d002      	beq.n	801572a <USER_SERV_FindSRCIndex+0x10a>
 8015724:	2b05      	cmp	r3, #5
 8015726:	d009      	beq.n	801573c <USER_SERV_FindSRCIndex+0x11c>
 8015728:	e014      	b.n	8015754 <USER_SERV_FindSRCIndex+0x134>
					{
					case PDO_SEL_METHOD_MAX_CUR:
						if (allowablecurrent > selcurrent)
 801572a:	697a      	ldr	r2, [r7, #20]
 801572c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801572e:	429a      	cmp	r2, r3
 8015730:	d915      	bls.n	801575e <USER_SERV_FindSRCIndex+0x13e>
						{
							/* Consider the current PDO the best one until now */
							curr_index = temp_index;
 8015732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015734:	63bb      	str	r3, [r7, #56]	; 0x38
							selcurrent = allowablecurrent;
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	63fb      	str	r3, [r7, #60]	; 0x3c
						}
						break;
 801573a:	e010      	b.n	801575e <USER_SERV_FindSRCIndex+0x13e>

					case PDO_SEL_METHOD_MIN_CUR:
						if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 801573c:	697a      	ldr	r2, [r7, #20]
 801573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015740:	429a      	cmp	r2, r3
 8015742:	d302      	bcc.n	801574a <USER_SERV_FindSRCIndex+0x12a>
 8015744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015746:	2b00      	cmp	r3, #0
 8015748:	d10b      	bne.n	8015762 <USER_SERV_FindSRCIndex+0x142>
						{
							/* Consider the current PDO the best one until now */
							curr_index = temp_index;
 801574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801574c:	63bb      	str	r3, [r7, #56]	; 0x38
							selcurrent = allowablecurrent;
 801574e:	697b      	ldr	r3, [r7, #20]
 8015750:	63fb      	str	r3, [r7, #60]	; 0x3c
						}
						break;
 8015752:	e006      	b.n	8015762 <USER_SERV_FindSRCIndex+0x142>

					default:
						/* Default behavior: last PDO is selected */
						curr_index = temp_index;
 8015754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015756:	63bb      	str	r3, [r7, #56]	; 0x38
						selcurrent = allowablecurrent;
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801575c:	e002      	b.n	8015764 <USER_SERV_FindSRCIndex+0x144>
						break;
 801575e:	46c0      	nop			; (mov r8, r8)
 8015760:	e000      	b.n	8015764 <USER_SERV_FindSRCIndex+0x144>
						break;
 8015762:	46c0      	nop			; (mov r8, r8)
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 8015764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015766:	3301      	adds	r3, #1
 8015768:	637b      	str	r3, [r7, #52]	; 0x34
 801576a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801576e:	429a      	cmp	r2, r3
 8015770:	d386      	bcc.n	8015680 <USER_SERV_FindSRCIndex+0x60>
		}

		}
	}

	return curr_index+1;
 8015772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015774:	3301      	adds	r3, #1
}
 8015776:	0018      	movs	r0, r3
 8015778:	46bd      	mov	sp, r7
 801577a:	b011      	add	sp, #68	; 0x44
 801577c:	bd90      	pop	{r4, r7, pc}
 801577e:	46c0      	nop			; (mov r8, r8)
 8015780:	20000050 	.word	0x20000050
 8015784:	20002d90 	.word	0x20002d90

08015788 <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b086      	sub	sp, #24
 801578c:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 801578e:	230f      	movs	r3, #15
 8015790:	18fb      	adds	r3, r7, r3
 8015792:	2203      	movs	r2, #3
 8015794:	701a      	strb	r2, [r3, #0]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 8015796:	4bc0      	ldr	r3, [pc, #768]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 8015798:	681a      	ldr	r2, [r3, #0]
 801579a:	23c0      	movs	r3, #192	; 0xc0
 801579c:	049b      	lsls	r3, r3, #18
 801579e:	4013      	ands	r3, r2
 80157a0:	d00e      	beq.n	80157c0 <BSP_GUI_LoadDataFromFlash+0x38>
 80157a2:	4bbd      	ldr	r3, [pc, #756]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	23c0      	movs	r3, #192	; 0xc0
 80157a8:	049b      	lsls	r3, r3, #18
 80157aa:	401a      	ands	r2, r3
 80157ac:	2380      	movs	r3, #128	; 0x80
 80157ae:	045b      	lsls	r3, r3, #17
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d110      	bne.n	80157d6 <BSP_GUI_LoadDataFromFlash+0x4e>
 80157b4:	4bb9      	ldr	r3, [pc, #740]	; (8015a9c <BSP_GUI_LoadDataFromFlash+0x314>)
 80157b6:	681a      	ldr	r2, [r3, #0]
 80157b8:	2380      	movs	r3, #128	; 0x80
 80157ba:	039b      	lsls	r3, r3, #14
 80157bc:	4013      	ands	r3, r2
 80157be:	d10a      	bne.n	80157d6 <BSP_GUI_LoadDataFromFlash+0x4e>
 80157c0:	4bb7      	ldr	r3, [pc, #732]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	029b      	lsls	r3, r3, #10
 80157c6:	4ab7      	ldr	r2, [pc, #732]	; (8015aa4 <BSP_GUI_LoadDataFromFlash+0x31c>)
 80157c8:	4013      	ands	r3, r2
 80157ca:	0adb      	lsrs	r3, r3, #11
 80157cc:	031b      	lsls	r3, r3, #12
 80157ce:	4ab6      	ldr	r2, [pc, #728]	; (8015aa8 <BSP_GUI_LoadDataFromFlash+0x320>)
 80157d0:	4694      	mov	ip, r2
 80157d2:	4463      	add	r3, ip
 80157d4:	e00a      	b.n	80157ec <BSP_GUI_LoadDataFromFlash+0x64>
 80157d6:	4bb2      	ldr	r3, [pc, #712]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	029b      	lsls	r3, r3, #10
 80157dc:	085b      	lsrs	r3, r3, #1
 80157de:	4ab3      	ldr	r2, [pc, #716]	; (8015aac <BSP_GUI_LoadDataFromFlash+0x324>)
 80157e0:	4013      	ands	r3, r2
 80157e2:	0adb      	lsrs	r3, r3, #11
 80157e4:	031b      	lsls	r3, r3, #12
 80157e6:	4ab0      	ldr	r2, [pc, #704]	; (8015aa8 <BSP_GUI_LoadDataFromFlash+0x320>)
 80157e8:	4694      	mov	ip, r2
 80157ea:	4463      	add	r3, ip
 80157ec:	60bb      	str	r3, [r7, #8]
#else
  uint32_t _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
#endif /* GUI_FLASH_MAGIC_NUMBER */

  /* Check that we did not reach the end of page */
  if (GUI_FLASH_ADDR_RESERVED > ADDR_FLASH_PAGE_END)
 80157ee:	4baa      	ldr	r3, [pc, #680]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 80157f0:	681a      	ldr	r2, [r3, #0]
 80157f2:	23c0      	movs	r3, #192	; 0xc0
 80157f4:	049b      	lsls	r3, r3, #18
 80157f6:	4013      	ands	r3, r2
 80157f8:	d00e      	beq.n	8015818 <BSP_GUI_LoadDataFromFlash+0x90>
 80157fa:	4ba7      	ldr	r3, [pc, #668]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 80157fc:	681a      	ldr	r2, [r3, #0]
 80157fe:	23c0      	movs	r3, #192	; 0xc0
 8015800:	049b      	lsls	r3, r3, #18
 8015802:	401a      	ands	r2, r3
 8015804:	2380      	movs	r3, #128	; 0x80
 8015806:	045b      	lsls	r3, r3, #17
 8015808:	429a      	cmp	r2, r3
 801580a:	d10f      	bne.n	801582c <BSP_GUI_LoadDataFromFlash+0xa4>
 801580c:	4ba3      	ldr	r3, [pc, #652]	; (8015a9c <BSP_GUI_LoadDataFromFlash+0x314>)
 801580e:	681a      	ldr	r2, [r3, #0]
 8015810:	2380      	movs	r3, #128	; 0x80
 8015812:	039b      	lsls	r3, r3, #14
 8015814:	4013      	ands	r3, r2
 8015816:	d109      	bne.n	801582c <BSP_GUI_LoadDataFromFlash+0xa4>
 8015818:	4ba1      	ldr	r3, [pc, #644]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	029b      	lsls	r3, r3, #10
 801581e:	4aa1      	ldr	r2, [pc, #644]	; (8015aa4 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8015820:	4013      	ands	r3, r2
 8015822:	0adb      	lsrs	r3, r3, #11
 8015824:	031b      	lsls	r3, r3, #12
 8015826:	4aa2      	ldr	r2, [pc, #648]	; (8015ab0 <BSP_GUI_LoadDataFromFlash+0x328>)
 8015828:	189a      	adds	r2, r3, r2
 801582a:	e009      	b.n	8015840 <BSP_GUI_LoadDataFromFlash+0xb8>
 801582c:	4b9c      	ldr	r3, [pc, #624]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	029b      	lsls	r3, r3, #10
 8015832:	085b      	lsrs	r3, r3, #1
 8015834:	4a9d      	ldr	r2, [pc, #628]	; (8015aac <BSP_GUI_LoadDataFromFlash+0x324>)
 8015836:	4013      	ands	r3, r2
 8015838:	0adb      	lsrs	r3, r3, #11
 801583a:	031b      	lsls	r3, r3, #12
 801583c:	4a9c      	ldr	r2, [pc, #624]	; (8015ab0 <BSP_GUI_LoadDataFromFlash+0x328>)
 801583e:	189a      	adds	r2, r3, r2
 8015840:	4b95      	ldr	r3, [pc, #596]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 8015842:	6819      	ldr	r1, [r3, #0]
 8015844:	23c0      	movs	r3, #192	; 0xc0
 8015846:	049b      	lsls	r3, r3, #18
 8015848:	400b      	ands	r3, r1
 801584a:	d00e      	beq.n	801586a <BSP_GUI_LoadDataFromFlash+0xe2>
 801584c:	4b92      	ldr	r3, [pc, #584]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 801584e:	6819      	ldr	r1, [r3, #0]
 8015850:	23c0      	movs	r3, #192	; 0xc0
 8015852:	049b      	lsls	r3, r3, #18
 8015854:	4019      	ands	r1, r3
 8015856:	2380      	movs	r3, #128	; 0x80
 8015858:	045b      	lsls	r3, r3, #17
 801585a:	4299      	cmp	r1, r3
 801585c:	d112      	bne.n	8015884 <BSP_GUI_LoadDataFromFlash+0xfc>
 801585e:	4b8f      	ldr	r3, [pc, #572]	; (8015a9c <BSP_GUI_LoadDataFromFlash+0x314>)
 8015860:	6819      	ldr	r1, [r3, #0]
 8015862:	2380      	movs	r3, #128	; 0x80
 8015864:	039b      	lsls	r3, r3, #14
 8015866:	400b      	ands	r3, r1
 8015868:	d10c      	bne.n	8015884 <BSP_GUI_LoadDataFromFlash+0xfc>
 801586a:	4b8d      	ldr	r3, [pc, #564]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	029b      	lsls	r3, r3, #10
 8015870:	498c      	ldr	r1, [pc, #560]	; (8015aa4 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8015872:	400b      	ands	r3, r1
 8015874:	0adb      	lsrs	r3, r3, #11
 8015876:	2180      	movs	r1, #128	; 0x80
 8015878:	0209      	lsls	r1, r1, #8
 801587a:	468c      	mov	ip, r1
 801587c:	4463      	add	r3, ip
 801587e:	031b      	lsls	r3, r3, #12
 8015880:	3b01      	subs	r3, #1
 8015882:	e00c      	b.n	801589e <BSP_GUI_LoadDataFromFlash+0x116>
 8015884:	4b86      	ldr	r3, [pc, #536]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	029b      	lsls	r3, r3, #10
 801588a:	085b      	lsrs	r3, r3, #1
 801588c:	4987      	ldr	r1, [pc, #540]	; (8015aac <BSP_GUI_LoadDataFromFlash+0x324>)
 801588e:	400b      	ands	r3, r1
 8015890:	0adb      	lsrs	r3, r3, #11
 8015892:	2180      	movs	r1, #128	; 0x80
 8015894:	0209      	lsls	r1, r1, #8
 8015896:	468c      	mov	ip, r1
 8015898:	4463      	add	r3, ip
 801589a:	031b      	lsls	r3, r3, #12
 801589c:	3b01      	subs	r3, #1
 801589e:	429a      	cmp	r2, r3
 80158a0:	d900      	bls.n	80158a4 <BSP_GUI_LoadDataFromFlash+0x11c>
 80158a2:	e17a      	b.n	8015b9a <BSP_GUI_LoadDataFromFlash+0x412>
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  if ((0xFFFFFFFFu != *((uint32_t *)_addr)) && (MagicNumber != *((uint64_t *)_addr)))
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	3301      	adds	r3, #1
 80158aa:	d011      	beq.n	80158d0 <BSP_GUI_LoadDataFromFlash+0x148>
 80158ac:	68bb      	ldr	r3, [r7, #8]
 80158ae:	681a      	ldr	r2, [r3, #0]
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	4880      	ldr	r0, [pc, #512]	; (8015ab4 <BSP_GUI_LoadDataFromFlash+0x32c>)
 80158b4:	4980      	ldr	r1, [pc, #512]	; (8015ab8 <BSP_GUI_LoadDataFromFlash+0x330>)
 80158b6:	4282      	cmp	r2, r0
 80158b8:	d101      	bne.n	80158be <BSP_GUI_LoadDataFromFlash+0x136>
 80158ba:	428b      	cmp	r3, r1
 80158bc:	d008      	beq.n	80158d0 <BSP_GUI_LoadDataFromFlash+0x148>
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
  {
#if defined(_TRACE)
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t *)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 80158be:	4b7f      	ldr	r3, [pc, #508]	; (8015abc <BSP_GUI_LoadDataFromFlash+0x334>)
 80158c0:	2218      	movs	r2, #24
 80158c2:	9200      	str	r2, [sp, #0]
 80158c4:	2200      	movs	r2, #0
 80158c6:	2100      	movs	r1, #0
 80158c8:	2006      	movs	r0, #6
 80158ca:	f7f7 fb41 	bl	800cf50 <USBPD_TRACE_Add>
#endif /* _TRACE */
    goto _exit;
 80158ce:	e167      	b.n	8015ba0 <BSP_GUI_LoadDataFromFlash+0x418>
  }
  if (0xFFFFFFFFu == *((uint32_t *)_addr))
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	3301      	adds	r3, #1
 80158d6:	d100      	bne.n	80158da <BSP_GUI_LoadDataFromFlash+0x152>
 80158d8:	e161      	b.n	8015b9e <BSP_GUI_LoadDataFromFlash+0x416>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 80158da:	4b6f      	ldr	r3, [pc, #444]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	23c0      	movs	r3, #192	; 0xc0
 80158e0:	049b      	lsls	r3, r3, #18
 80158e2:	4013      	ands	r3, r2
 80158e4:	d00e      	beq.n	8015904 <BSP_GUI_LoadDataFromFlash+0x17c>
 80158e6:	4b6c      	ldr	r3, [pc, #432]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 80158e8:	681a      	ldr	r2, [r3, #0]
 80158ea:	23c0      	movs	r3, #192	; 0xc0
 80158ec:	049b      	lsls	r3, r3, #18
 80158ee:	401a      	ands	r2, r3
 80158f0:	2380      	movs	r3, #128	; 0x80
 80158f2:	045b      	lsls	r3, r3, #17
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d110      	bne.n	801591a <BSP_GUI_LoadDataFromFlash+0x192>
 80158f8:	4b68      	ldr	r3, [pc, #416]	; (8015a9c <BSP_GUI_LoadDataFromFlash+0x314>)
 80158fa:	681a      	ldr	r2, [r3, #0]
 80158fc:	2380      	movs	r3, #128	; 0x80
 80158fe:	039b      	lsls	r3, r3, #14
 8015900:	4013      	ands	r3, r2
 8015902:	d10a      	bne.n	801591a <BSP_GUI_LoadDataFromFlash+0x192>
 8015904:	4b66      	ldr	r3, [pc, #408]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	029b      	lsls	r3, r3, #10
 801590a:	4a66      	ldr	r2, [pc, #408]	; (8015aa4 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801590c:	4013      	ands	r3, r2
 801590e:	0adb      	lsrs	r3, r3, #11
 8015910:	031b      	lsls	r3, r3, #12
 8015912:	4a6b      	ldr	r2, [pc, #428]	; (8015ac0 <BSP_GUI_LoadDataFromFlash+0x338>)
 8015914:	4694      	mov	ip, r2
 8015916:	4463      	add	r3, ip
 8015918:	e00a      	b.n	8015930 <BSP_GUI_LoadDataFromFlash+0x1a8>
 801591a:	4b61      	ldr	r3, [pc, #388]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	029b      	lsls	r3, r3, #10
 8015920:	085b      	lsrs	r3, r3, #1
 8015922:	4a62      	ldr	r2, [pc, #392]	; (8015aac <BSP_GUI_LoadDataFromFlash+0x324>)
 8015924:	4013      	ands	r3, r2
 8015926:	0adb      	lsrs	r3, r3, #11
 8015928:	031b      	lsls	r3, r3, #12
 801592a:	4a65      	ldr	r2, [pc, #404]	; (8015ac0 <BSP_GUI_LoadDataFromFlash+0x338>)
 801592c:	4694      	mov	ip, r2
 801592e:	4463      	add	r3, ip
 8015930:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t *_ptr = (uint32_t *)USBPD_NbPDO;
 8015932:	4b64      	ldr	r3, [pc, #400]	; (8015ac4 <BSP_GUI_LoadDataFromFlash+0x33c>)
 8015934:	607b      	str	r3, [r7, #4]
    USBPD_WRITE32(_ptr, *((uint32_t *)_addr));
 8015936:	230e      	movs	r3, #14
 8015938:	18fb      	adds	r3, r7, r3
 801593a:	2200      	movs	r2, #0
 801593c:	701a      	strb	r2, [r3, #0]
 801593e:	e012      	b.n	8015966 <BSP_GUI_LoadDataFromFlash+0x1de>
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	681a      	ldr	r2, [r3, #0]
 8015944:	200e      	movs	r0, #14
 8015946:	183b      	adds	r3, r7, r0
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	00db      	lsls	r3, r3, #3
 801594c:	40da      	lsrs	r2, r3
 801594e:	0011      	movs	r1, r2
 8015950:	183b      	adds	r3, r7, r0
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	687a      	ldr	r2, [r7, #4]
 8015956:	18d3      	adds	r3, r2, r3
 8015958:	b2ca      	uxtb	r2, r1
 801595a:	701a      	strb	r2, [r3, #0]
 801595c:	183b      	adds	r3, r7, r0
 801595e:	781a      	ldrb	r2, [r3, #0]
 8015960:	183b      	adds	r3, r7, r0
 8015962:	3201      	adds	r2, #1
 8015964:	701a      	strb	r2, [r3, #0]
 8015966:	230e      	movs	r3, #14
 8015968:	18fb      	adds	r3, r7, r3
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	2b03      	cmp	r3, #3
 801596e:	d9e7      	bls.n	8015940 <BSP_GUI_LoadDataFromFlash+0x1b8>
    _status = GUI_OK;
 8015970:	230f      	movs	r3, #15
 8015972:	18fb      	adds	r3, r7, r3
 8015974:	2200      	movs	r2, #0
 8015976:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
  /* Load PORT0_PDO_ListSNK */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 8015978:	4b47      	ldr	r3, [pc, #284]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 801597a:	681a      	ldr	r2, [r3, #0]
 801597c:	23c0      	movs	r3, #192	; 0xc0
 801597e:	049b      	lsls	r3, r3, #18
 8015980:	4013      	ands	r3, r2
 8015982:	d00e      	beq.n	80159a2 <BSP_GUI_LoadDataFromFlash+0x21a>
 8015984:	4b44      	ldr	r3, [pc, #272]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 8015986:	681a      	ldr	r2, [r3, #0]
 8015988:	23c0      	movs	r3, #192	; 0xc0
 801598a:	049b      	lsls	r3, r3, #18
 801598c:	401a      	ands	r2, r3
 801598e:	2380      	movs	r3, #128	; 0x80
 8015990:	045b      	lsls	r3, r3, #17
 8015992:	429a      	cmp	r2, r3
 8015994:	d110      	bne.n	80159b8 <BSP_GUI_LoadDataFromFlash+0x230>
 8015996:	4b41      	ldr	r3, [pc, #260]	; (8015a9c <BSP_GUI_LoadDataFromFlash+0x314>)
 8015998:	681a      	ldr	r2, [r3, #0]
 801599a:	2380      	movs	r3, #128	; 0x80
 801599c:	039b      	lsls	r3, r3, #14
 801599e:	4013      	ands	r3, r2
 80159a0:	d10a      	bne.n	80159b8 <BSP_GUI_LoadDataFromFlash+0x230>
 80159a2:	4b3f      	ldr	r3, [pc, #252]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	029b      	lsls	r3, r3, #10
 80159a8:	4a3e      	ldr	r2, [pc, #248]	; (8015aa4 <BSP_GUI_LoadDataFromFlash+0x31c>)
 80159aa:	4013      	ands	r3, r2
 80159ac:	0adb      	lsrs	r3, r3, #11
 80159ae:	031b      	lsls	r3, r3, #12
 80159b0:	4a45      	ldr	r2, [pc, #276]	; (8015ac8 <BSP_GUI_LoadDataFromFlash+0x340>)
 80159b2:	4694      	mov	ip, r2
 80159b4:	4463      	add	r3, ip
 80159b6:	e00a      	b.n	80159ce <BSP_GUI_LoadDataFromFlash+0x246>
 80159b8:	4b39      	ldr	r3, [pc, #228]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	029b      	lsls	r3, r3, #10
 80159be:	085b      	lsrs	r3, r3, #1
 80159c0:	4a3a      	ldr	r2, [pc, #232]	; (8015aac <BSP_GUI_LoadDataFromFlash+0x324>)
 80159c2:	4013      	ands	r3, r2
 80159c4:	0adb      	lsrs	r3, r3, #11
 80159c6:	031b      	lsls	r3, r3, #12
 80159c8:	4a3f      	ldr	r2, [pc, #252]	; (8015ac8 <BSP_GUI_LoadDataFromFlash+0x340>)
 80159ca:	4694      	mov	ip, r2
 80159cc:	4463      	add	r3, ip
 80159ce:	4a3f      	ldr	r2, [pc, #252]	; (8015acc <BSP_GUI_LoadDataFromFlash+0x344>)
 80159d0:	0011      	movs	r1, r2
 80159d2:	0018      	movs	r0, r3
 80159d4:	f000 fc52 	bl	801627c <LoadPDOFromFlash>
 80159d8:	0003      	movs	r3, r0
 80159da:	0019      	movs	r1, r3
 80159dc:	220f      	movs	r2, #15
 80159de:	18bb      	adds	r3, r7, r2
 80159e0:	18ba      	adds	r2, r7, r2
 80159e2:	7812      	ldrb	r2, [r2, #0]
 80159e4:	430a      	orrs	r2, r1
 80159e6:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t *)DPM_Settings,
 80159e8:	4b2b      	ldr	r3, [pc, #172]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 80159ea:	681a      	ldr	r2, [r3, #0]
 80159ec:	23c0      	movs	r3, #192	; 0xc0
 80159ee:	049b      	lsls	r3, r3, #18
 80159f0:	4013      	ands	r3, r2
 80159f2:	d00e      	beq.n	8015a12 <BSP_GUI_LoadDataFromFlash+0x28a>
 80159f4:	4b28      	ldr	r3, [pc, #160]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 80159f6:	681a      	ldr	r2, [r3, #0]
 80159f8:	23c0      	movs	r3, #192	; 0xc0
 80159fa:	049b      	lsls	r3, r3, #18
 80159fc:	401a      	ands	r2, r3
 80159fe:	2380      	movs	r3, #128	; 0x80
 8015a00:	045b      	lsls	r3, r3, #17
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d110      	bne.n	8015a28 <BSP_GUI_LoadDataFromFlash+0x2a0>
 8015a06:	4b25      	ldr	r3, [pc, #148]	; (8015a9c <BSP_GUI_LoadDataFromFlash+0x314>)
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	2380      	movs	r3, #128	; 0x80
 8015a0c:	039b      	lsls	r3, r3, #14
 8015a0e:	4013      	ands	r3, r2
 8015a10:	d10a      	bne.n	8015a28 <BSP_GUI_LoadDataFromFlash+0x2a0>
 8015a12:	4b23      	ldr	r3, [pc, #140]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	029b      	lsls	r3, r3, #10
 8015a18:	4a22      	ldr	r2, [pc, #136]	; (8015aa4 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8015a1a:	4013      	ands	r3, r2
 8015a1c:	0adb      	lsrs	r3, r3, #11
 8015a1e:	031b      	lsls	r3, r3, #12
 8015a20:	4a2b      	ldr	r2, [pc, #172]	; (8015ad0 <BSP_GUI_LoadDataFromFlash+0x348>)
 8015a22:	4694      	mov	ip, r2
 8015a24:	4463      	add	r3, ip
 8015a26:	e00a      	b.n	8015a3e <BSP_GUI_LoadDataFromFlash+0x2b6>
 8015a28:	4b1d      	ldr	r3, [pc, #116]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	029b      	lsls	r3, r3, #10
 8015a2e:	085b      	lsrs	r3, r3, #1
 8015a30:	4a1e      	ldr	r2, [pc, #120]	; (8015aac <BSP_GUI_LoadDataFromFlash+0x324>)
 8015a32:	4013      	ands	r3, r2
 8015a34:	0adb      	lsrs	r3, r3, #11
 8015a36:	031b      	lsls	r3, r3, #12
 8015a38:	4a25      	ldr	r2, [pc, #148]	; (8015ad0 <BSP_GUI_LoadDataFromFlash+0x348>)
 8015a3a:	4694      	mov	ip, r2
 8015a3c:	4463      	add	r3, ip
 8015a3e:	4925      	ldr	r1, [pc, #148]	; (8015ad4 <BSP_GUI_LoadDataFromFlash+0x34c>)
 8015a40:	220c      	movs	r2, #12
 8015a42:	0018      	movs	r0, r3
 8015a44:	f000 fc42 	bl	80162cc <LoadSettingsFromFlash>
 8015a48:	0003      	movs	r3, r0
 8015a4a:	0019      	movs	r1, r3
 8015a4c:	220f      	movs	r2, #15
 8015a4e:	18bb      	adds	r3, r7, r2
 8015a50:	18ba      	adds	r2, r7, r2
 8015a52:	7812      	ldrb	r2, [r2, #0]
 8015a54:	430a      	orrs	r2, r1
 8015a56:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Load DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t *)DPM_ID_Settings,
 8015a58:	4b0f      	ldr	r3, [pc, #60]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 8015a5a:	681a      	ldr	r2, [r3, #0]
 8015a5c:	23c0      	movs	r3, #192	; 0xc0
 8015a5e:	049b      	lsls	r3, r3, #18
 8015a60:	4013      	ands	r3, r2
 8015a62:	d00e      	beq.n	8015a82 <BSP_GUI_LoadDataFromFlash+0x2fa>
 8015a64:	4b0c      	ldr	r3, [pc, #48]	; (8015a98 <BSP_GUI_LoadDataFromFlash+0x310>)
 8015a66:	681a      	ldr	r2, [r3, #0]
 8015a68:	23c0      	movs	r3, #192	; 0xc0
 8015a6a:	049b      	lsls	r3, r3, #18
 8015a6c:	401a      	ands	r2, r3
 8015a6e:	2380      	movs	r3, #128	; 0x80
 8015a70:	045b      	lsls	r3, r3, #17
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d132      	bne.n	8015adc <BSP_GUI_LoadDataFromFlash+0x354>
 8015a76:	4b09      	ldr	r3, [pc, #36]	; (8015a9c <BSP_GUI_LoadDataFromFlash+0x314>)
 8015a78:	681a      	ldr	r2, [r3, #0]
 8015a7a:	2380      	movs	r3, #128	; 0x80
 8015a7c:	039b      	lsls	r3, r3, #14
 8015a7e:	4013      	ands	r3, r2
 8015a80:	d12c      	bne.n	8015adc <BSP_GUI_LoadDataFromFlash+0x354>
 8015a82:	4b07      	ldr	r3, [pc, #28]	; (8015aa0 <BSP_GUI_LoadDataFromFlash+0x318>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	029b      	lsls	r3, r3, #10
 8015a88:	4a06      	ldr	r2, [pc, #24]	; (8015aa4 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	0adb      	lsrs	r3, r3, #11
 8015a8e:	031b      	lsls	r3, r3, #12
 8015a90:	4a11      	ldr	r2, [pc, #68]	; (8015ad8 <BSP_GUI_LoadDataFromFlash+0x350>)
 8015a92:	4694      	mov	ip, r2
 8015a94:	4463      	add	r3, ip
 8015a96:	e02c      	b.n	8015af2 <BSP_GUI_LoadDataFromFlash+0x36a>
 8015a98:	1fff7500 	.word	0x1fff7500
 8015a9c:	40022020 	.word	0x40022020
 8015aa0:	1fff75e0 	.word	0x1fff75e0
 8015aa4:	000ffc00 	.word	0x000ffc00
 8015aa8:	07fff800 	.word	0x07fff800
 8015aac:	0007fe00 	.word	0x0007fe00
 8015ab0:	07fff924 	.word	0x07fff924
 8015ab4:	deadf00d 	.word	0xdeadf00d
 8015ab8:	deadbabe 	.word	0xdeadbabe
 8015abc:	0801c2b0 	.word	0x0801c2b0
 8015ac0:	07fff808 	.word	0x07fff808
 8015ac4:	200000c4 	.word	0x200000c4
 8015ac8:	07fff830 	.word	0x07fff830
 8015acc:	200000c8 	.word	0x200000c8
 8015ad0:	07fff890 	.word	0x07fff890
 8015ad4:	2000003c 	.word	0x2000003c
 8015ad8:	07fff91c 	.word	0x07fff91c
 8015adc:	4b34      	ldr	r3, [pc, #208]	; (8015bb0 <BSP_GUI_LoadDataFromFlash+0x428>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	029b      	lsls	r3, r3, #10
 8015ae2:	085b      	lsrs	r3, r3, #1
 8015ae4:	4a33      	ldr	r2, [pc, #204]	; (8015bb4 <BSP_GUI_LoadDataFromFlash+0x42c>)
 8015ae6:	4013      	ands	r3, r2
 8015ae8:	0adb      	lsrs	r3, r3, #11
 8015aea:	031b      	lsls	r3, r3, #12
 8015aec:	4a32      	ldr	r2, [pc, #200]	; (8015bb8 <BSP_GUI_LoadDataFromFlash+0x430>)
 8015aee:	4694      	mov	ip, r2
 8015af0:	4463      	add	r3, ip
 8015af2:	4932      	ldr	r1, [pc, #200]	; (8015bbc <BSP_GUI_LoadDataFromFlash+0x434>)
 8015af4:	2208      	movs	r2, #8
 8015af6:	0018      	movs	r0, r3
 8015af8:	f000 fbe8 	bl	80162cc <LoadSettingsFromFlash>
 8015afc:	0003      	movs	r3, r0
 8015afe:	0019      	movs	r1, r3
 8015b00:	220f      	movs	r2, #15
 8015b02:	18bb      	adds	r3, r7, r2
 8015b04:	18ba      	adds	r2, r7, r2
 8015b06:	7812      	ldrb	r2, [r2, #0]
 8015b08:	430a      	orrs	r2, r1
 8015b0a:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_IdSettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t *)DPM_USER_Settings,
 8015b0c:	4b2c      	ldr	r3, [pc, #176]	; (8015bc0 <BSP_GUI_LoadDataFromFlash+0x438>)
 8015b0e:	681a      	ldr	r2, [r3, #0]
 8015b10:	23c0      	movs	r3, #192	; 0xc0
 8015b12:	049b      	lsls	r3, r3, #18
 8015b14:	4013      	ands	r3, r2
 8015b16:	d00e      	beq.n	8015b36 <BSP_GUI_LoadDataFromFlash+0x3ae>
 8015b18:	4b29      	ldr	r3, [pc, #164]	; (8015bc0 <BSP_GUI_LoadDataFromFlash+0x438>)
 8015b1a:	681a      	ldr	r2, [r3, #0]
 8015b1c:	23c0      	movs	r3, #192	; 0xc0
 8015b1e:	049b      	lsls	r3, r3, #18
 8015b20:	401a      	ands	r2, r3
 8015b22:	2380      	movs	r3, #128	; 0x80
 8015b24:	045b      	lsls	r3, r3, #17
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d110      	bne.n	8015b4c <BSP_GUI_LoadDataFromFlash+0x3c4>
 8015b2a:	4b26      	ldr	r3, [pc, #152]	; (8015bc4 <BSP_GUI_LoadDataFromFlash+0x43c>)
 8015b2c:	681a      	ldr	r2, [r3, #0]
 8015b2e:	2380      	movs	r3, #128	; 0x80
 8015b30:	039b      	lsls	r3, r3, #14
 8015b32:	4013      	ands	r3, r2
 8015b34:	d10a      	bne.n	8015b4c <BSP_GUI_LoadDataFromFlash+0x3c4>
 8015b36:	4b1e      	ldr	r3, [pc, #120]	; (8015bb0 <BSP_GUI_LoadDataFromFlash+0x428>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	029b      	lsls	r3, r3, #10
 8015b3c:	4a22      	ldr	r2, [pc, #136]	; (8015bc8 <BSP_GUI_LoadDataFromFlash+0x440>)
 8015b3e:	4013      	ands	r3, r2
 8015b40:	0adb      	lsrs	r3, r3, #11
 8015b42:	031b      	lsls	r3, r3, #12
 8015b44:	4a21      	ldr	r2, [pc, #132]	; (8015bcc <BSP_GUI_LoadDataFromFlash+0x444>)
 8015b46:	4694      	mov	ip, r2
 8015b48:	4463      	add	r3, ip
 8015b4a:	e00a      	b.n	8015b62 <BSP_GUI_LoadDataFromFlash+0x3da>
 8015b4c:	4b18      	ldr	r3, [pc, #96]	; (8015bb0 <BSP_GUI_LoadDataFromFlash+0x428>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	029b      	lsls	r3, r3, #10
 8015b52:	085b      	lsrs	r3, r3, #1
 8015b54:	4a17      	ldr	r2, [pc, #92]	; (8015bb4 <BSP_GUI_LoadDataFromFlash+0x42c>)
 8015b56:	4013      	ands	r3, r2
 8015b58:	0adb      	lsrs	r3, r3, #11
 8015b5a:	031b      	lsls	r3, r3, #12
 8015b5c:	4a1b      	ldr	r2, [pc, #108]	; (8015bcc <BSP_GUI_LoadDataFromFlash+0x444>)
 8015b5e:	4694      	mov	ip, r2
 8015b60:	4463      	add	r3, ip
 8015b62:	491b      	ldr	r1, [pc, #108]	; (8015bd0 <BSP_GUI_LoadDataFromFlash+0x448>)
 8015b64:	2274      	movs	r2, #116	; 0x74
 8015b66:	0018      	movs	r0, r3
 8015b68:	f000 fbb0 	bl	80162cc <LoadSettingsFromFlash>
 8015b6c:	0003      	movs	r3, r0
 8015b6e:	0019      	movs	r1, r3
 8015b70:	220f      	movs	r2, #15
 8015b72:	18bb      	adds	r3, r7, r2
 8015b74:	18ba      	adds	r2, r7, r2
 8015b76:	7812      	ldrb	r2, [r2, #0]
 8015b78:	430a      	orrs	r2, r1
 8015b7a:	701a      	strb	r2, [r3, #0]
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_1].VID;
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_1].PID;
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _SRC_CAPA_EXT && (_SRC || _DRP) */
#if defined(_SNK)||defined(_DRP)
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.XID = DPM_ID_Settings[USBPD_PORT_0].XID;
 8015b7c:	4b0f      	ldr	r3, [pc, #60]	; (8015bbc <BSP_GUI_LoadDataFromFlash+0x434>)
 8015b7e:	681a      	ldr	r2, [r3, #0]
 8015b80:	4b13      	ldr	r3, [pc, #76]	; (8015bd0 <BSP_GUI_LoadDataFromFlash+0x448>)
 8015b82:	655a      	str	r2, [r3, #84]	; 0x54
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_0].VID;
 8015b84:	4b0d      	ldr	r3, [pc, #52]	; (8015bbc <BSP_GUI_LoadDataFromFlash+0x434>)
 8015b86:	8899      	ldrh	r1, [r3, #4]
 8015b88:	4b11      	ldr	r3, [pc, #68]	; (8015bd0 <BSP_GUI_LoadDataFromFlash+0x448>)
 8015b8a:	2250      	movs	r2, #80	; 0x50
 8015b8c:	5299      	strh	r1, [r3, r2]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_0].PID;
 8015b8e:	4b0b      	ldr	r3, [pc, #44]	; (8015bbc <BSP_GUI_LoadDataFromFlash+0x434>)
 8015b90:	88d9      	ldrh	r1, [r3, #6]
 8015b92:	4b0f      	ldr	r3, [pc, #60]	; (8015bd0 <BSP_GUI_LoadDataFromFlash+0x448>)
 8015b94:	2252      	movs	r2, #82	; 0x52
 8015b96:	5299      	strh	r1, [r3, r2]
 8015b98:	e002      	b.n	8015ba0 <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 8015b9a:	46c0      	nop			; (mov r8, r8)
 8015b9c:	e000      	b.n	8015ba0 <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 8015b9e:	46c0      	nop			; (mov r8, r8)
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 8015ba0:	230f      	movs	r3, #15
 8015ba2:	18fb      	adds	r3, r7, r3
 8015ba4:	781b      	ldrb	r3, [r3, #0]
}
 8015ba6:	0018      	movs	r0, r3
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	b004      	add	sp, #16
 8015bac:	bd80      	pop	{r7, pc}
 8015bae:	46c0      	nop			; (mov r8, r8)
 8015bb0:	1fff75e0 	.word	0x1fff75e0
 8015bb4:	0007fe00 	.word	0x0007fe00
 8015bb8:	07fff91c 	.word	0x07fff91c
 8015bbc:	20000048 	.word	0x20000048
 8015bc0:	1fff7500 	.word	0x1fff7500
 8015bc4:	40022020 	.word	0x40022020
 8015bc8:	000ffc00 	.word	0x000ffc00
 8015bcc:	07fff89c 	.word	0x07fff89c
 8015bd0:	20000050 	.word	0x20000050

08015bd4 <BSP_GUI_SaveDataInFlash>:

  return status;
}

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 8015bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bd6:	b099      	sub	sp, #100	; 0x64
 8015bd8:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_OK;
 8015bda:	2327      	movs	r3, #39	; 0x27
 8015bdc:	2638      	movs	r6, #56	; 0x38
 8015bde:	199b      	adds	r3, r3, r6
 8015be0:	19da      	adds	r2, r3, r7
 8015be2:	2300      	movs	r3, #0
 8015be4:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8015be6:	b672      	cpsid	i
}
 8015be8:	46c0      	nop			; (mov r8, r8)

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  (void)HAL_FLASH_Unlock();
 8015bea:	f7f4 f88f 	bl	8009d0c <HAL_FLASH_Unlock>
  erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
  erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
  erase_init.Sector        = FLASH_SECTOR_ID;
  erase_init.NbSectors     = 1;
#else
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 8015bee:	2308      	movs	r3, #8
 8015bf0:	199b      	adds	r3, r3, r6
 8015bf2:	19da      	adds	r2, r3, r7
 8015bf4:	2302      	movs	r3, #2
 8015bf6:	6013      	str	r3, [r2, #0]

#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress  = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 8015bf8:	4bbf      	ldr	r3, [pc, #764]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015bfa:	681a      	ldr	r2, [r3, #0]
 8015bfc:	23c0      	movs	r3, #192	; 0xc0
 8015bfe:	049b      	lsls	r3, r3, #18
 8015c00:	4013      	ands	r3, r2
 8015c02:	d00e      	beq.n	8015c22 <BSP_GUI_SaveDataInFlash+0x4e>
 8015c04:	4bbc      	ldr	r3, [pc, #752]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015c06:	681a      	ldr	r2, [r3, #0]
 8015c08:	23c0      	movs	r3, #192	; 0xc0
 8015c0a:	049b      	lsls	r3, r3, #18
 8015c0c:	401a      	ands	r2, r3
 8015c0e:	2380      	movs	r3, #128	; 0x80
 8015c10:	045b      	lsls	r3, r3, #17
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d10e      	bne.n	8015c34 <BSP_GUI_SaveDataInFlash+0x60>
 8015c16:	4bb9      	ldr	r3, [pc, #740]	; (8015efc <BSP_GUI_SaveDataInFlash+0x328>)
 8015c18:	681a      	ldr	r2, [r3, #0]
 8015c1a:	2380      	movs	r3, #128	; 0x80
 8015c1c:	039b      	lsls	r3, r3, #14
 8015c1e:	4013      	ands	r3, r2
 8015c20:	d108      	bne.n	8015c34 <BSP_GUI_SaveDataInFlash+0x60>
 8015c22:	4bb7      	ldr	r3, [pc, #732]	; (8015f00 <BSP_GUI_SaveDataInFlash+0x32c>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	029a      	lsls	r2, r3, #10
 8015c28:	4bb6      	ldr	r3, [pc, #728]	; (8015f04 <BSP_GUI_SaveDataInFlash+0x330>)
 8015c2a:	4013      	ands	r3, r2
 8015c2c:	0adb      	lsrs	r3, r3, #11
 8015c2e:	005b      	lsls	r3, r3, #1
 8015c30:	1e5a      	subs	r2, r3, #1
 8015c32:	e008      	b.n	8015c46 <BSP_GUI_SaveDataInFlash+0x72>
 8015c34:	4bb2      	ldr	r3, [pc, #712]	; (8015f00 <BSP_GUI_SaveDataInFlash+0x32c>)
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	029b      	lsls	r3, r3, #10
 8015c3a:	085a      	lsrs	r2, r3, #1
 8015c3c:	4bb2      	ldr	r3, [pc, #712]	; (8015f08 <BSP_GUI_SaveDataInFlash+0x334>)
 8015c3e:	4013      	ands	r3, r2
 8015c40:	0adb      	lsrs	r3, r3, #11
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	1e5a      	subs	r2, r3, #1
 8015c46:	2108      	movs	r1, #8
 8015c48:	2038      	movs	r0, #56	; 0x38
 8015c4a:	180b      	adds	r3, r1, r0
 8015c4c:	19db      	adds	r3, r3, r7
 8015c4e:	609a      	str	r2, [r3, #8]
#endif /* STM32F072xB || STM32F051x8 */
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_2)
  erase_init.Banks      = FLASH_BANK_2;
 8015c50:	180b      	adds	r3, r1, r0
 8015c52:	19da      	adds	r2, r3, r7
 8015c54:	2380      	movs	r3, #128	; 0x80
 8015c56:	021b      	lsls	r3, r3, #8
 8015c58:	6053      	str	r3, [r2, #4]
#elif defined(FLASH_BANK_1)
  erase_init.Banks      = FLASH_BANK_1;
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 8015c5a:	180b      	adds	r3, r1, r0
 8015c5c:	19da      	adds	r2, r3, r7
 8015c5e:	2301      	movs	r3, #1
 8015c60:	60d3      	str	r3, [r2, #12]

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if (FLASH->SR != 0x00)
 8015c62:	4baa      	ldr	r3, [pc, #680]	; (8015f0c <BSP_GUI_SaveDataInFlash+0x338>)
 8015c64:	691b      	ldr	r3, [r3, #16]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d003      	beq.n	8015c72 <BSP_GUI_SaveDataInFlash+0x9e>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 8015c6a:	4aa8      	ldr	r2, [pc, #672]	; (8015f0c <BSP_GUI_SaveDataInFlash+0x338>)
 8015c6c:	2380      	movs	r3, #128	; 0x80
 8015c6e:	021b      	lsls	r3, r3, #8
 8015c70:	6113      	str	r3, [r2, #16]
  }
#endif /* FLASH_SR_OPTVERR */
#endif /* FLASH_CR_SER */

  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &page_error))
 8015c72:	233c      	movs	r3, #60	; 0x3c
 8015c74:	18fa      	adds	r2, r7, r3
 8015c76:	2308      	movs	r3, #8
 8015c78:	2638      	movs	r6, #56	; 0x38
 8015c7a:	199b      	adds	r3, r3, r6
 8015c7c:	19db      	adds	r3, r3, r7
 8015c7e:	0011      	movs	r1, r2
 8015c80:	0018      	movs	r0, r3
 8015c82:	f7f4 f8f7 	bl	8009e74 <HAL_FLASHEx_Erase>
 8015c86:	1e03      	subs	r3, r0, #0
 8015c88:	d004      	beq.n	8015c94 <BSP_GUI_SaveDataInFlash+0xc0>
  {
    status = GUI_ERASE_ERROR;
 8015c8a:	2327      	movs	r3, #39	; 0x27
 8015c8c:	199b      	adds	r3, r3, r6
 8015c8e:	19da      	adds	r2, r3, r7
 8015c90:	2301      	movs	r3, #1
 8015c92:	7013      	strb	r3, [r2, #0]
  }

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFFU == page_error) && (GUI_OK == status))
 8015c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c96:	3301      	adds	r3, #1
 8015c98:	d000      	beq.n	8015c9c <BSP_GUI_SaveDataInFlash+0xc8>
 8015c9a:	e1d9      	b.n	8016050 <BSP_GUI_SaveDataInFlash+0x47c>
 8015c9c:	2327      	movs	r3, #39	; 0x27
 8015c9e:	2238      	movs	r2, #56	; 0x38
 8015ca0:	189b      	adds	r3, r3, r2
 8015ca2:	19db      	adds	r3, r3, r7
 8015ca4:	781b      	ldrb	r3, [r3, #0]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d000      	beq.n	8015cac <BSP_GUI_SaveDataInFlash+0xd8>
 8015caa:	e1d1      	b.n	8016050 <BSP_GUI_SaveDataInFlash+0x47c>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber))
 8015cac:	4b92      	ldr	r3, [pc, #584]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015cae:	681a      	ldr	r2, [r3, #0]
 8015cb0:	23c0      	movs	r3, #192	; 0xc0
 8015cb2:	049b      	lsls	r3, r3, #18
 8015cb4:	4013      	ands	r3, r2
 8015cb6:	d00e      	beq.n	8015cd6 <BSP_GUI_SaveDataInFlash+0x102>
 8015cb8:	4b8f      	ldr	r3, [pc, #572]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	23c0      	movs	r3, #192	; 0xc0
 8015cbe:	049b      	lsls	r3, r3, #18
 8015cc0:	401a      	ands	r2, r3
 8015cc2:	2380      	movs	r3, #128	; 0x80
 8015cc4:	045b      	lsls	r3, r3, #17
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d10f      	bne.n	8015cea <BSP_GUI_SaveDataInFlash+0x116>
 8015cca:	4b8c      	ldr	r3, [pc, #560]	; (8015efc <BSP_GUI_SaveDataInFlash+0x328>)
 8015ccc:	681a      	ldr	r2, [r3, #0]
 8015cce:	2380      	movs	r3, #128	; 0x80
 8015cd0:	039b      	lsls	r3, r3, #14
 8015cd2:	4013      	ands	r3, r2
 8015cd4:	d109      	bne.n	8015cea <BSP_GUI_SaveDataInFlash+0x116>
 8015cd6:	4b8a      	ldr	r3, [pc, #552]	; (8015f00 <BSP_GUI_SaveDataInFlash+0x32c>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	029a      	lsls	r2, r3, #10
 8015cdc:	4b89      	ldr	r3, [pc, #548]	; (8015f04 <BSP_GUI_SaveDataInFlash+0x330>)
 8015cde:	4013      	ands	r3, r2
 8015ce0:	0adb      	lsrs	r3, r3, #11
 8015ce2:	031b      	lsls	r3, r3, #12
 8015ce4:	4a8a      	ldr	r2, [pc, #552]	; (8015f10 <BSP_GUI_SaveDataInFlash+0x33c>)
 8015ce6:	1899      	adds	r1, r3, r2
 8015ce8:	e009      	b.n	8015cfe <BSP_GUI_SaveDataInFlash+0x12a>
 8015cea:	4b85      	ldr	r3, [pc, #532]	; (8015f00 <BSP_GUI_SaveDataInFlash+0x32c>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	029b      	lsls	r3, r3, #10
 8015cf0:	085a      	lsrs	r2, r3, #1
 8015cf2:	4b85      	ldr	r3, [pc, #532]	; (8015f08 <BSP_GUI_SaveDataInFlash+0x334>)
 8015cf4:	4013      	ands	r3, r2
 8015cf6:	0adb      	lsrs	r3, r3, #11
 8015cf8:	031b      	lsls	r3, r3, #12
 8015cfa:	4a85      	ldr	r2, [pc, #532]	; (8015f10 <BSP_GUI_SaveDataInFlash+0x33c>)
 8015cfc:	1899      	adds	r1, r3, r2
 8015cfe:	4a85      	ldr	r2, [pc, #532]	; (8015f14 <BSP_GUI_SaveDataInFlash+0x340>)
 8015d00:	4b85      	ldr	r3, [pc, #532]	; (8015f18 <BSP_GUI_SaveDataInFlash+0x344>)
 8015d02:	2001      	movs	r0, #1
 8015d04:	f7f3 ffb4 	bl	8009c70 <HAL_FLASH_Program>
 8015d08:	1e03      	subs	r3, r0, #0
 8015d0a:	d005      	beq.n	8015d18 <BSP_GUI_SaveDataInFlash+0x144>
    {
      status = GUI_WRITE_ERROR;
 8015d0c:	2327      	movs	r3, #39	; 0x27
 8015d0e:	2238      	movs	r2, #56	; 0x38
 8015d10:	189b      	adds	r3, r3, r2
 8015d12:	19da      	adds	r2, r3, r7
 8015d14:	2302      	movs	r3, #2
 8015d16:	7013      	strb	r3, [r2, #0]
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 8015d18:	2327      	movs	r3, #39	; 0x27
 8015d1a:	2238      	movs	r2, #56	; 0x38
 8015d1c:	189b      	adds	r3, r3, r2
 8015d1e:	19db      	adds	r3, r3, r7
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d000      	beq.n	8015d28 <BSP_GUI_SaveDataInFlash+0x154>
 8015d26:	e082      	b.n	8015e2e <BSP_GUI_SaveDataInFlash+0x25a>
    {
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 8015d28:	2200      	movs	r2, #0
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	653a      	str	r2, [r7, #80]	; 0x50
 8015d2e:	657b      	str	r3, [r7, #84]	; 0x54
      value |= USBPD_NbPDO[0];
 8015d30:	4b7a      	ldr	r3, [pc, #488]	; (8015f1c <BSP_GUI_SaveDataInFlash+0x348>)
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	633b      	str	r3, [r7, #48]	; 0x30
 8015d36:	2300      	movs	r3, #0
 8015d38:	637b      	str	r3, [r7, #52]	; 0x34
 8015d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d40:	0008      	movs	r0, r1
 8015d42:	4318      	orrs	r0, r3
 8015d44:	0004      	movs	r4, r0
 8015d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d48:	431a      	orrs	r2, r3
 8015d4a:	0015      	movs	r5, r2
 8015d4c:	653c      	str	r4, [r7, #80]	; 0x50
 8015d4e:	657d      	str	r5, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[1] << 8);
 8015d50:	4b72      	ldr	r3, [pc, #456]	; (8015f1c <BSP_GUI_SaveDataInFlash+0x348>)
 8015d52:	785b      	ldrb	r3, [r3, #1]
 8015d54:	021b      	lsls	r3, r3, #8
 8015d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d58:	17db      	asrs	r3, r3, #31
 8015d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d62:	0008      	movs	r0, r1
 8015d64:	4318      	orrs	r0, r3
 8015d66:	6138      	str	r0, [r7, #16]
 8015d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d6a:	431a      	orrs	r2, r3
 8015d6c:	617a      	str	r2, [r7, #20]
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	697c      	ldr	r4, [r7, #20]
 8015d72:	653b      	str	r3, [r7, #80]	; 0x50
 8015d74:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[2] << 16);
 8015d76:	4b69      	ldr	r3, [pc, #420]	; (8015f1c <BSP_GUI_SaveDataInFlash+0x348>)
 8015d78:	789b      	ldrb	r3, [r3, #2]
 8015d7a:	041b      	lsls	r3, r3, #16
 8015d7c:	623b      	str	r3, [r7, #32]
 8015d7e:	17db      	asrs	r3, r3, #31
 8015d80:	627b      	str	r3, [r7, #36]	; 0x24
 8015d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d84:	6a39      	ldr	r1, [r7, #32]
 8015d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d88:	0008      	movs	r0, r1
 8015d8a:	4318      	orrs	r0, r3
 8015d8c:	60b8      	str	r0, [r7, #8]
 8015d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d90:	431a      	orrs	r2, r3
 8015d92:	60fa      	str	r2, [r7, #12]
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	68fc      	ldr	r4, [r7, #12]
 8015d98:	653b      	str	r3, [r7, #80]	; 0x50
 8015d9a:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[3] << 24);
 8015d9c:	4b5f      	ldr	r3, [pc, #380]	; (8015f1c <BSP_GUI_SaveDataInFlash+0x348>)
 8015d9e:	78db      	ldrb	r3, [r3, #3]
 8015da0:	061b      	lsls	r3, r3, #24
 8015da2:	61bb      	str	r3, [r7, #24]
 8015da4:	17db      	asrs	r3, r3, #31
 8015da6:	61fb      	str	r3, [r7, #28]
 8015da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015daa:	69b9      	ldr	r1, [r7, #24]
 8015dac:	69fa      	ldr	r2, [r7, #28]
 8015dae:	0008      	movs	r0, r1
 8015db0:	4318      	orrs	r0, r3
 8015db2:	6038      	str	r0, [r7, #0]
 8015db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015db6:	431a      	orrs	r2, r3
 8015db8:	607a      	str	r2, [r7, #4]
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	687c      	ldr	r4, [r7, #4]
 8015dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8015dc0:	657c      	str	r4, [r7, #84]	; 0x54
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value))
 8015dc2:	4b4d      	ldr	r3, [pc, #308]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	23c0      	movs	r3, #192	; 0xc0
 8015dc8:	049b      	lsls	r3, r3, #18
 8015dca:	4013      	ands	r3, r2
 8015dcc:	d00e      	beq.n	8015dec <BSP_GUI_SaveDataInFlash+0x218>
 8015dce:	4b4a      	ldr	r3, [pc, #296]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	23c0      	movs	r3, #192	; 0xc0
 8015dd4:	049b      	lsls	r3, r3, #18
 8015dd6:	401a      	ands	r2, r3
 8015dd8:	2380      	movs	r3, #128	; 0x80
 8015dda:	045b      	lsls	r3, r3, #17
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d10f      	bne.n	8015e00 <BSP_GUI_SaveDataInFlash+0x22c>
 8015de0:	4b46      	ldr	r3, [pc, #280]	; (8015efc <BSP_GUI_SaveDataInFlash+0x328>)
 8015de2:	681a      	ldr	r2, [r3, #0]
 8015de4:	2380      	movs	r3, #128	; 0x80
 8015de6:	039b      	lsls	r3, r3, #14
 8015de8:	4013      	ands	r3, r2
 8015dea:	d109      	bne.n	8015e00 <BSP_GUI_SaveDataInFlash+0x22c>
 8015dec:	4b44      	ldr	r3, [pc, #272]	; (8015f00 <BSP_GUI_SaveDataInFlash+0x32c>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	029b      	lsls	r3, r3, #10
 8015df2:	4a44      	ldr	r2, [pc, #272]	; (8015f04 <BSP_GUI_SaveDataInFlash+0x330>)
 8015df4:	4013      	ands	r3, r2
 8015df6:	0adb      	lsrs	r3, r3, #11
 8015df8:	031b      	lsls	r3, r3, #12
 8015dfa:	4a49      	ldr	r2, [pc, #292]	; (8015f20 <BSP_GUI_SaveDataInFlash+0x34c>)
 8015dfc:	1899      	adds	r1, r3, r2
 8015dfe:	e009      	b.n	8015e14 <BSP_GUI_SaveDataInFlash+0x240>
 8015e00:	4b3f      	ldr	r3, [pc, #252]	; (8015f00 <BSP_GUI_SaveDataInFlash+0x32c>)
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	029b      	lsls	r3, r3, #10
 8015e06:	085b      	lsrs	r3, r3, #1
 8015e08:	4a3f      	ldr	r2, [pc, #252]	; (8015f08 <BSP_GUI_SaveDataInFlash+0x334>)
 8015e0a:	4013      	ands	r3, r2
 8015e0c:	0adb      	lsrs	r3, r3, #11
 8015e0e:	031b      	lsls	r3, r3, #12
 8015e10:	4a43      	ldr	r2, [pc, #268]	; (8015f20 <BSP_GUI_SaveDataInFlash+0x34c>)
 8015e12:	1899      	adds	r1, r3, r2
 8015e14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e18:	2001      	movs	r0, #1
 8015e1a:	f7f3 ff29 	bl	8009c70 <HAL_FLASH_Program>
 8015e1e:	1e03      	subs	r3, r0, #0
 8015e20:	d005      	beq.n	8015e2e <BSP_GUI_SaveDataInFlash+0x25a>
      {
        status = GUI_WRITE_ERROR;
 8015e22:	2327      	movs	r3, #39	; 0x27
 8015e24:	2238      	movs	r2, #56	; 0x38
 8015e26:	189b      	adds	r3, r3, r2
 8015e28:	19db      	adds	r3, r3, r7
 8015e2a:	2202      	movs	r2, #2
 8015e2c:	701a      	strb	r2, [r3, #0]
    }
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
    /* Save PORT0_PDO_ListSNK */
    if (GUI_OK == status)
 8015e2e:	2327      	movs	r3, #39	; 0x27
 8015e30:	2238      	movs	r2, #56	; 0x38
 8015e32:	189b      	adds	r3, r3, r2
 8015e34:	19db      	adds	r3, r3, r7
 8015e36:	781b      	ldrb	r3, [r3, #0]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d135      	bne.n	8015ea8 <BSP_GUI_SaveDataInFlash+0x2d4>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 8015e3c:	4b2e      	ldr	r3, [pc, #184]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015e3e:	681a      	ldr	r2, [r3, #0]
 8015e40:	23c0      	movs	r3, #192	; 0xc0
 8015e42:	049b      	lsls	r3, r3, #18
 8015e44:	4013      	ands	r3, r2
 8015e46:	d00e      	beq.n	8015e66 <BSP_GUI_SaveDataInFlash+0x292>
 8015e48:	4b2b      	ldr	r3, [pc, #172]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015e4a:	681a      	ldr	r2, [r3, #0]
 8015e4c:	23c0      	movs	r3, #192	; 0xc0
 8015e4e:	049b      	lsls	r3, r3, #18
 8015e50:	401a      	ands	r2, r3
 8015e52:	2380      	movs	r3, #128	; 0x80
 8015e54:	045b      	lsls	r3, r3, #17
 8015e56:	429a      	cmp	r2, r3
 8015e58:	d110      	bne.n	8015e7c <BSP_GUI_SaveDataInFlash+0x2a8>
 8015e5a:	4b28      	ldr	r3, [pc, #160]	; (8015efc <BSP_GUI_SaveDataInFlash+0x328>)
 8015e5c:	681a      	ldr	r2, [r3, #0]
 8015e5e:	2380      	movs	r3, #128	; 0x80
 8015e60:	039b      	lsls	r3, r3, #14
 8015e62:	4013      	ands	r3, r2
 8015e64:	d10a      	bne.n	8015e7c <BSP_GUI_SaveDataInFlash+0x2a8>
 8015e66:	4b26      	ldr	r3, [pc, #152]	; (8015f00 <BSP_GUI_SaveDataInFlash+0x32c>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	029b      	lsls	r3, r3, #10
 8015e6c:	4a25      	ldr	r2, [pc, #148]	; (8015f04 <BSP_GUI_SaveDataInFlash+0x330>)
 8015e6e:	4013      	ands	r3, r2
 8015e70:	0adb      	lsrs	r3, r3, #11
 8015e72:	031b      	lsls	r3, r3, #12
 8015e74:	4a2b      	ldr	r2, [pc, #172]	; (8015f24 <BSP_GUI_SaveDataInFlash+0x350>)
 8015e76:	4694      	mov	ip, r2
 8015e78:	4463      	add	r3, ip
 8015e7a:	e00a      	b.n	8015e92 <BSP_GUI_SaveDataInFlash+0x2be>
 8015e7c:	4b20      	ldr	r3, [pc, #128]	; (8015f00 <BSP_GUI_SaveDataInFlash+0x32c>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	029b      	lsls	r3, r3, #10
 8015e82:	085b      	lsrs	r3, r3, #1
 8015e84:	4a20      	ldr	r2, [pc, #128]	; (8015f08 <BSP_GUI_SaveDataInFlash+0x334>)
 8015e86:	4013      	ands	r3, r2
 8015e88:	0adb      	lsrs	r3, r3, #11
 8015e8a:	031b      	lsls	r3, r3, #12
 8015e8c:	4a25      	ldr	r2, [pc, #148]	; (8015f24 <BSP_GUI_SaveDataInFlash+0x350>)
 8015e8e:	4694      	mov	ip, r2
 8015e90:	4463      	add	r3, ip
 8015e92:	2227      	movs	r2, #39	; 0x27
 8015e94:	2138      	movs	r1, #56	; 0x38
 8015e96:	1852      	adds	r2, r2, r1
 8015e98:	19d4      	adds	r4, r2, r7
 8015e9a:	4a23      	ldr	r2, [pc, #140]	; (8015f28 <BSP_GUI_SaveDataInFlash+0x354>)
 8015e9c:	0011      	movs	r1, r2
 8015e9e:	0018      	movs	r0, r3
 8015ea0:	f000 f8fa 	bl	8016098 <SavePDOInFlash>
 8015ea4:	0003      	movs	r3, r0
 8015ea6:	7023      	strb	r3, [r4, #0]
    }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8015ea8:	2327      	movs	r3, #39	; 0x27
 8015eaa:	2238      	movs	r2, #56	; 0x38
 8015eac:	189b      	adds	r3, r3, r2
 8015eae:	19db      	adds	r3, r3, r7
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d152      	bne.n	8015f5c <BSP_GUI_SaveDataInFlash+0x388>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS,
 8015eb6:	4b10      	ldr	r3, [pc, #64]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	23c0      	movs	r3, #192	; 0xc0
 8015ebc:	049b      	lsls	r3, r3, #18
 8015ebe:	4013      	ands	r3, r2
 8015ec0:	d00e      	beq.n	8015ee0 <BSP_GUI_SaveDataInFlash+0x30c>
 8015ec2:	4b0d      	ldr	r3, [pc, #52]	; (8015ef8 <BSP_GUI_SaveDataInFlash+0x324>)
 8015ec4:	681a      	ldr	r2, [r3, #0]
 8015ec6:	23c0      	movs	r3, #192	; 0xc0
 8015ec8:	049b      	lsls	r3, r3, #18
 8015eca:	401a      	ands	r2, r3
 8015ecc:	2380      	movs	r3, #128	; 0x80
 8015ece:	045b      	lsls	r3, r3, #17
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d12d      	bne.n	8015f30 <BSP_GUI_SaveDataInFlash+0x35c>
 8015ed4:	4b09      	ldr	r3, [pc, #36]	; (8015efc <BSP_GUI_SaveDataInFlash+0x328>)
 8015ed6:	681a      	ldr	r2, [r3, #0]
 8015ed8:	2380      	movs	r3, #128	; 0x80
 8015eda:	039b      	lsls	r3, r3, #14
 8015edc:	4013      	ands	r3, r2
 8015ede:	d127      	bne.n	8015f30 <BSP_GUI_SaveDataInFlash+0x35c>
 8015ee0:	4b07      	ldr	r3, [pc, #28]	; (8015f00 <BSP_GUI_SaveDataInFlash+0x32c>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	029b      	lsls	r3, r3, #10
 8015ee6:	4a07      	ldr	r2, [pc, #28]	; (8015f04 <BSP_GUI_SaveDataInFlash+0x330>)
 8015ee8:	4013      	ands	r3, r2
 8015eea:	0adb      	lsrs	r3, r3, #11
 8015eec:	031b      	lsls	r3, r3, #12
 8015eee:	4a0f      	ldr	r2, [pc, #60]	; (8015f2c <BSP_GUI_SaveDataInFlash+0x358>)
 8015ef0:	4694      	mov	ip, r2
 8015ef2:	4463      	add	r3, ip
 8015ef4:	e027      	b.n	8015f46 <BSP_GUI_SaveDataInFlash+0x372>
 8015ef6:	46c0      	nop			; (mov r8, r8)
 8015ef8:	1fff7500 	.word	0x1fff7500
 8015efc:	40022020 	.word	0x40022020
 8015f00:	1fff75e0 	.word	0x1fff75e0
 8015f04:	000ffc00 	.word	0x000ffc00
 8015f08:	0007fe00 	.word	0x0007fe00
 8015f0c:	40022000 	.word	0x40022000
 8015f10:	07fff800 	.word	0x07fff800
 8015f14:	deadf00d 	.word	0xdeadf00d
 8015f18:	deadbabe 	.word	0xdeadbabe
 8015f1c:	200000c4 	.word	0x200000c4
 8015f20:	07fff808 	.word	0x07fff808
 8015f24:	07fff830 	.word	0x07fff830
 8015f28:	200000c8 	.word	0x200000c8
 8015f2c:	07fff890 	.word	0x07fff890
 8015f30:	4b4e      	ldr	r3, [pc, #312]	; (801606c <BSP_GUI_SaveDataInFlash+0x498>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	029b      	lsls	r3, r3, #10
 8015f36:	085b      	lsrs	r3, r3, #1
 8015f38:	4a4d      	ldr	r2, [pc, #308]	; (8016070 <BSP_GUI_SaveDataInFlash+0x49c>)
 8015f3a:	4013      	ands	r3, r2
 8015f3c:	0adb      	lsrs	r3, r3, #11
 8015f3e:	031b      	lsls	r3, r3, #12
 8015f40:	4a4c      	ldr	r2, [pc, #304]	; (8016074 <BSP_GUI_SaveDataInFlash+0x4a0>)
 8015f42:	4694      	mov	ip, r2
 8015f44:	4463      	add	r3, ip
 8015f46:	2227      	movs	r2, #39	; 0x27
 8015f48:	2138      	movs	r1, #56	; 0x38
 8015f4a:	1852      	adds	r2, r2, r1
 8015f4c:	19d4      	adds	r4, r2, r7
 8015f4e:	494a      	ldr	r1, [pc, #296]	; (8016078 <BSP_GUI_SaveDataInFlash+0x4a4>)
 8015f50:	220c      	movs	r2, #12
 8015f52:	0018      	movs	r0, r3
 8015f54:	f000 f913 	bl	801617e <SaveSettingsInFlash>
 8015f58:	0003      	movs	r3, r0
 8015f5a:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 8015f5c:	2327      	movs	r3, #39	; 0x27
 8015f5e:	2238      	movs	r2, #56	; 0x38
 8015f60:	189b      	adds	r3, r3, r2
 8015f62:	19db      	adds	r3, r3, r7
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d135      	bne.n	8015fd6 <BSP_GUI_SaveDataInFlash+0x402>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS,
 8015f6a:	4b44      	ldr	r3, [pc, #272]	; (801607c <BSP_GUI_SaveDataInFlash+0x4a8>)
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	23c0      	movs	r3, #192	; 0xc0
 8015f70:	049b      	lsls	r3, r3, #18
 8015f72:	4013      	ands	r3, r2
 8015f74:	d00e      	beq.n	8015f94 <BSP_GUI_SaveDataInFlash+0x3c0>
 8015f76:	4b41      	ldr	r3, [pc, #260]	; (801607c <BSP_GUI_SaveDataInFlash+0x4a8>)
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	23c0      	movs	r3, #192	; 0xc0
 8015f7c:	049b      	lsls	r3, r3, #18
 8015f7e:	401a      	ands	r2, r3
 8015f80:	2380      	movs	r3, #128	; 0x80
 8015f82:	045b      	lsls	r3, r3, #17
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d110      	bne.n	8015faa <BSP_GUI_SaveDataInFlash+0x3d6>
 8015f88:	4b3d      	ldr	r3, [pc, #244]	; (8016080 <BSP_GUI_SaveDataInFlash+0x4ac>)
 8015f8a:	681a      	ldr	r2, [r3, #0]
 8015f8c:	2380      	movs	r3, #128	; 0x80
 8015f8e:	039b      	lsls	r3, r3, #14
 8015f90:	4013      	ands	r3, r2
 8015f92:	d10a      	bne.n	8015faa <BSP_GUI_SaveDataInFlash+0x3d6>
 8015f94:	4b35      	ldr	r3, [pc, #212]	; (801606c <BSP_GUI_SaveDataInFlash+0x498>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	029b      	lsls	r3, r3, #10
 8015f9a:	4a3a      	ldr	r2, [pc, #232]	; (8016084 <BSP_GUI_SaveDataInFlash+0x4b0>)
 8015f9c:	4013      	ands	r3, r2
 8015f9e:	0adb      	lsrs	r3, r3, #11
 8015fa0:	031b      	lsls	r3, r3, #12
 8015fa2:	4a39      	ldr	r2, [pc, #228]	; (8016088 <BSP_GUI_SaveDataInFlash+0x4b4>)
 8015fa4:	4694      	mov	ip, r2
 8015fa6:	4463      	add	r3, ip
 8015fa8:	e00a      	b.n	8015fc0 <BSP_GUI_SaveDataInFlash+0x3ec>
 8015faa:	4b30      	ldr	r3, [pc, #192]	; (801606c <BSP_GUI_SaveDataInFlash+0x498>)
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	029b      	lsls	r3, r3, #10
 8015fb0:	085b      	lsrs	r3, r3, #1
 8015fb2:	4a2f      	ldr	r2, [pc, #188]	; (8016070 <BSP_GUI_SaveDataInFlash+0x49c>)
 8015fb4:	4013      	ands	r3, r2
 8015fb6:	0adb      	lsrs	r3, r3, #11
 8015fb8:	031b      	lsls	r3, r3, #12
 8015fba:	4a33      	ldr	r2, [pc, #204]	; (8016088 <BSP_GUI_SaveDataInFlash+0x4b4>)
 8015fbc:	4694      	mov	ip, r2
 8015fbe:	4463      	add	r3, ip
 8015fc0:	2227      	movs	r2, #39	; 0x27
 8015fc2:	2138      	movs	r1, #56	; 0x38
 8015fc4:	1852      	adds	r2, r2, r1
 8015fc6:	19d4      	adds	r4, r2, r7
 8015fc8:	4930      	ldr	r1, [pc, #192]	; (801608c <BSP_GUI_SaveDataInFlash+0x4b8>)
 8015fca:	2208      	movs	r2, #8
 8015fcc:	0018      	movs	r0, r3
 8015fce:	f000 f8d6 	bl	801617e <SaveSettingsInFlash>
 8015fd2:	0003      	movs	r3, r0
 8015fd4:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_IdSettingsTypeDef));
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8015fd6:	2327      	movs	r3, #39	; 0x27
 8015fd8:	2238      	movs	r2, #56	; 0x38
 8015fda:	189b      	adds	r3, r3, r2
 8015fdc:	19db      	adds	r3, r3, r7
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d135      	bne.n	8016050 <BSP_GUI_SaveDataInFlash+0x47c>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS,
 8015fe4:	4b25      	ldr	r3, [pc, #148]	; (801607c <BSP_GUI_SaveDataInFlash+0x4a8>)
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	23c0      	movs	r3, #192	; 0xc0
 8015fea:	049b      	lsls	r3, r3, #18
 8015fec:	4013      	ands	r3, r2
 8015fee:	d00e      	beq.n	801600e <BSP_GUI_SaveDataInFlash+0x43a>
 8015ff0:	4b22      	ldr	r3, [pc, #136]	; (801607c <BSP_GUI_SaveDataInFlash+0x4a8>)
 8015ff2:	681a      	ldr	r2, [r3, #0]
 8015ff4:	23c0      	movs	r3, #192	; 0xc0
 8015ff6:	049b      	lsls	r3, r3, #18
 8015ff8:	401a      	ands	r2, r3
 8015ffa:	2380      	movs	r3, #128	; 0x80
 8015ffc:	045b      	lsls	r3, r3, #17
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d110      	bne.n	8016024 <BSP_GUI_SaveDataInFlash+0x450>
 8016002:	4b1f      	ldr	r3, [pc, #124]	; (8016080 <BSP_GUI_SaveDataInFlash+0x4ac>)
 8016004:	681a      	ldr	r2, [r3, #0]
 8016006:	2380      	movs	r3, #128	; 0x80
 8016008:	039b      	lsls	r3, r3, #14
 801600a:	4013      	ands	r3, r2
 801600c:	d10a      	bne.n	8016024 <BSP_GUI_SaveDataInFlash+0x450>
 801600e:	4b17      	ldr	r3, [pc, #92]	; (801606c <BSP_GUI_SaveDataInFlash+0x498>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	029b      	lsls	r3, r3, #10
 8016014:	4a1b      	ldr	r2, [pc, #108]	; (8016084 <BSP_GUI_SaveDataInFlash+0x4b0>)
 8016016:	4013      	ands	r3, r2
 8016018:	0adb      	lsrs	r3, r3, #11
 801601a:	031b      	lsls	r3, r3, #12
 801601c:	4a1c      	ldr	r2, [pc, #112]	; (8016090 <BSP_GUI_SaveDataInFlash+0x4bc>)
 801601e:	4694      	mov	ip, r2
 8016020:	4463      	add	r3, ip
 8016022:	e00a      	b.n	801603a <BSP_GUI_SaveDataInFlash+0x466>
 8016024:	4b11      	ldr	r3, [pc, #68]	; (801606c <BSP_GUI_SaveDataInFlash+0x498>)
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	029b      	lsls	r3, r3, #10
 801602a:	085b      	lsrs	r3, r3, #1
 801602c:	4a10      	ldr	r2, [pc, #64]	; (8016070 <BSP_GUI_SaveDataInFlash+0x49c>)
 801602e:	4013      	ands	r3, r2
 8016030:	0adb      	lsrs	r3, r3, #11
 8016032:	031b      	lsls	r3, r3, #12
 8016034:	4a16      	ldr	r2, [pc, #88]	; (8016090 <BSP_GUI_SaveDataInFlash+0x4bc>)
 8016036:	4694      	mov	ip, r2
 8016038:	4463      	add	r3, ip
 801603a:	2227      	movs	r2, #39	; 0x27
 801603c:	2138      	movs	r1, #56	; 0x38
 801603e:	1852      	adds	r2, r2, r1
 8016040:	19d4      	adds	r4, r2, r7
 8016042:	4914      	ldr	r1, [pc, #80]	; (8016094 <BSP_GUI_SaveDataInFlash+0x4c0>)
 8016044:	2274      	movs	r2, #116	; 0x74
 8016046:	0018      	movs	r0, r3
 8016048:	f000 f899 	bl	801617e <SaveSettingsInFlash>
 801604c:	0003      	movs	r3, r0
 801604e:	7023      	strb	r3, [r4, #0]
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  (void) HAL_FLASH_Lock();
 8016050:	f7f3 fe80 	bl	8009d54 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8016054:	b662      	cpsie	i
}
 8016056:	46c0      	nop			; (mov r8, r8)

  /* Enable interrupts */
  __enable_irq();

  return status;
 8016058:	2327      	movs	r3, #39	; 0x27
 801605a:	2238      	movs	r2, #56	; 0x38
 801605c:	189b      	adds	r3, r3, r2
 801605e:	19db      	adds	r3, r3, r7
 8016060:	781b      	ldrb	r3, [r3, #0]
}
 8016062:	0018      	movs	r0, r3
 8016064:	46bd      	mov	sp, r7
 8016066:	b019      	add	sp, #100	; 0x64
 8016068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801606a:	46c0      	nop			; (mov r8, r8)
 801606c:	1fff75e0 	.word	0x1fff75e0
 8016070:	0007fe00 	.word	0x0007fe00
 8016074:	07fff890 	.word	0x07fff890
 8016078:	2000003c 	.word	0x2000003c
 801607c:	1fff7500 	.word	0x1fff7500
 8016080:	40022020 	.word	0x40022020
 8016084:	000ffc00 	.word	0x000ffc00
 8016088:	07fff91c 	.word	0x07fff91c
 801608c:	20000048 	.word	0x20000048
 8016090:	07fff89c 	.word	0x07fff89c
 8016094:	20000050 	.word	0x20000050

08016098 <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8016098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801609a:	b08f      	sub	sp, #60	; 0x3c
 801609c:	af00      	add	r7, sp, #0
 801609e:	6178      	str	r0, [r7, #20]
 80160a0:	6139      	str	r1, [r7, #16]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 80160a2:	231f      	movs	r3, #31
 80160a4:	2210      	movs	r2, #16
 80160a6:	189b      	adds	r3, r3, r2
 80160a8:	19db      	adds	r3, r3, r7
 80160aa:	2200      	movs	r2, #0
 80160ac:	701a      	strb	r2, [r3, #0]

  index_flash = 0U;
 80160ae:	2300      	movs	r3, #0
 80160b0:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 80160b2:	2300      	movs	r3, #0
 80160b4:	637b      	str	r3, [r7, #52]	; 0x34
 80160b6:	e04f      	b.n	8016158 <SavePDOInFlash+0xc0>
  {
    value[0] = pListOfPDO[index];
 80160b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ba:	009b      	lsls	r3, r3, #2
 80160bc:	693a      	ldr	r2, [r7, #16]
 80160be:	18d3      	adds	r3, r2, r3
 80160c0:	681a      	ldr	r2, [r3, #0]
 80160c2:	2108      	movs	r1, #8
 80160c4:	2010      	movs	r0, #16
 80160c6:	180b      	adds	r3, r1, r0
 80160c8:	19db      	adds	r3, r3, r7
 80160ca:	601a      	str	r2, [r3, #0]
    index++;
 80160cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ce:	3301      	adds	r3, #1
 80160d0:	637b      	str	r3, [r7, #52]	; 0x34
    if (index < USBPD_MAX_NB_PDO)
 80160d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160d4:	2b06      	cmp	r3, #6
 80160d6:	d808      	bhi.n	80160ea <SavePDOInFlash+0x52>
    {
      value[1] = pListOfPDO[index];
 80160d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160da:	009b      	lsls	r3, r3, #2
 80160dc:	693a      	ldr	r2, [r7, #16]
 80160de:	18d3      	adds	r3, r2, r3
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	180b      	adds	r3, r1, r0
 80160e4:	19db      	adds	r3, r3, r7
 80160e6:	605a      	str	r2, [r3, #4]
 80160e8:	e006      	b.n	80160f8 <SavePDOInFlash+0x60>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 80160ea:	2308      	movs	r3, #8
 80160ec:	2210      	movs	r2, #16
 80160ee:	189b      	adds	r3, r3, r2
 80160f0:	19db      	adds	r3, r3, r7
 80160f2:	2201      	movs	r2, #1
 80160f4:	4252      	negs	r2, r2
 80160f6:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 80160f8:	2208      	movs	r2, #8
 80160fa:	2610      	movs	r6, #16
 80160fc:	1993      	adds	r3, r2, r6
 80160fe:	19db      	adds	r3, r3, r7
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	60bb      	str	r3, [r7, #8]
 8016104:	2300      	movs	r3, #0
 8016106:	60fb      	str	r3, [r7, #12]
 8016108:	1993      	adds	r3, r2, r6
 801610a:	19db      	adds	r3, r3, r7
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	603b      	str	r3, [r7, #0]
 8016110:	2300      	movs	r3, #0
 8016112:	607b      	str	r3, [r7, #4]
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	001d      	movs	r5, r3
 8016118:	2300      	movs	r3, #0
 801611a:	001c      	movs	r4, r3
 801611c:	68b9      	ldr	r1, [r7, #8]
 801611e:	68fa      	ldr	r2, [r7, #12]
 8016120:	000b      	movs	r3, r1
 8016122:	4323      	orrs	r3, r4
 8016124:	623b      	str	r3, [r7, #32]
 8016126:	0013      	movs	r3, r2
 8016128:	432b      	orrs	r3, r5
 801612a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 801612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801612e:	00da      	lsls	r2, r3, #3
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	18d1      	adds	r1, r2, r3
 8016134:	6a3a      	ldr	r2, [r7, #32]
 8016136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016138:	2001      	movs	r0, #1
 801613a:	f7f3 fd99 	bl	8009c70 <HAL_FLASH_Program>
 801613e:	1e03      	subs	r3, r0, #0
 8016140:	d004      	beq.n	801614c <SavePDOInFlash+0xb4>
    {
      status = GUI_WRITE_ERROR;
 8016142:	231f      	movs	r3, #31
 8016144:	199b      	adds	r3, r3, r6
 8016146:	19db      	adds	r3, r3, r7
 8016148:	2202      	movs	r2, #2
 801614a:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1;
 801614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614e:	3301      	adds	r3, #1
 8016150:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 8016152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016154:	3301      	adds	r3, #1
 8016156:	637b      	str	r3, [r7, #52]	; 0x34
 8016158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801615a:	2b06      	cmp	r3, #6
 801615c:	d806      	bhi.n	801616c <SavePDOInFlash+0xd4>
 801615e:	231f      	movs	r3, #31
 8016160:	2210      	movs	r2, #16
 8016162:	189b      	adds	r3, r3, r2
 8016164:	19db      	adds	r3, r3, r7
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d0a5      	beq.n	80160b8 <SavePDOInFlash+0x20>
  }
  return status;
 801616c:	231f      	movs	r3, #31
 801616e:	2210      	movs	r2, #16
 8016170:	189b      	adds	r3, r3, r2
 8016172:	19db      	adds	r3, r3, r7
 8016174:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 8016176:	0018      	movs	r0, r3
 8016178:	46bd      	mov	sp, r7
 801617a:	b00f      	add	sp, #60	; 0x3c
 801617c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801617e <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 801617e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016180:	b091      	sub	sp, #68	; 0x44
 8016182:	af00      	add	r7, sp, #0
 8016184:	61f8      	str	r0, [r7, #28]
 8016186:	61b9      	str	r1, [r7, #24]
 8016188:	617a      	str	r2, [r7, #20]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  uint32_t nb_u32   = ((Size) / 4U);
 801618a:	697b      	ldr	r3, [r7, #20]
 801618c:	089b      	lsrs	r3, r3, #2
 801618e:	633b      	str	r3, [r7, #48]	; 0x30
  GUI_StatusTypeDef status = GUI_OK;
 8016190:	2327      	movs	r3, #39	; 0x27
 8016192:	2210      	movs	r2, #16
 8016194:	189b      	adds	r3, r3, r2
 8016196:	19db      	adds	r3, r3, r7
 8016198:	2200      	movs	r2, #0
 801619a:	701a      	strb	r2, [r3, #0]

  /* Ensure nb of bytes to be writeent is 4-multiple */
  if (((Size) % 4U) != 0U)
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	2203      	movs	r2, #3
 80161a0:	4013      	ands	r3, r2
 80161a2:	d001      	beq.n	80161a8 <SaveSettingsInFlash+0x2a>
  {
    return (GUI_ERROR);
 80161a4:	2303      	movs	r3, #3
 80161a6:	e065      	b.n	8016274 <SaveSettingsInFlash+0xf6>
  }

  /* Save Settings in the FLASH */
  index_flash = 0U;
 80161a8:	2300      	movs	r3, #0
 80161aa:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 80161ac:	2300      	movs	r3, #0
 80161ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80161b0:	e050      	b.n	8016254 <SaveSettingsInFlash+0xd6>
  {
    value[0] = pSettings[index];
 80161b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	69ba      	ldr	r2, [r7, #24]
 80161b8:	18d3      	adds	r3, r2, r3
 80161ba:	681a      	ldr	r2, [r3, #0]
 80161bc:	2110      	movs	r1, #16
 80161be:	2010      	movs	r0, #16
 80161c0:	180b      	adds	r3, r1, r0
 80161c2:	19db      	adds	r3, r3, r7
 80161c4:	601a      	str	r2, [r3, #0]
    index++;
 80161c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161c8:	3301      	adds	r3, #1
 80161ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (index < nb_u32)
 80161cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80161ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d208      	bcs.n	80161e6 <SaveSettingsInFlash+0x68>
    {
      value[1] = pSettings[index];
 80161d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161d6:	009b      	lsls	r3, r3, #2
 80161d8:	69ba      	ldr	r2, [r7, #24]
 80161da:	18d3      	adds	r3, r2, r3
 80161dc:	681a      	ldr	r2, [r3, #0]
 80161de:	180b      	adds	r3, r1, r0
 80161e0:	19db      	adds	r3, r3, r7
 80161e2:	605a      	str	r2, [r3, #4]
 80161e4:	e006      	b.n	80161f4 <SaveSettingsInFlash+0x76>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 80161e6:	2310      	movs	r3, #16
 80161e8:	2210      	movs	r2, #16
 80161ea:	189b      	adds	r3, r3, r2
 80161ec:	19db      	adds	r3, r3, r7
 80161ee:	2201      	movs	r2, #1
 80161f0:	4252      	negs	r2, r2
 80161f2:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 80161f4:	2210      	movs	r2, #16
 80161f6:	2610      	movs	r6, #16
 80161f8:	1993      	adds	r3, r2, r6
 80161fa:	19db      	adds	r3, r3, r7
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	60bb      	str	r3, [r7, #8]
 8016200:	2300      	movs	r3, #0
 8016202:	60fb      	str	r3, [r7, #12]
 8016204:	1993      	adds	r3, r2, r6
 8016206:	19db      	adds	r3, r3, r7
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	603b      	str	r3, [r7, #0]
 801620c:	2300      	movs	r3, #0
 801620e:	607b      	str	r3, [r7, #4]
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	001d      	movs	r5, r3
 8016214:	2300      	movs	r3, #0
 8016216:	001c      	movs	r4, r3
 8016218:	68b9      	ldr	r1, [r7, #8]
 801621a:	68fa      	ldr	r2, [r7, #12]
 801621c:	000b      	movs	r3, r1
 801621e:	4323      	orrs	r3, r4
 8016220:	62bb      	str	r3, [r7, #40]	; 0x28
 8016222:	0013      	movs	r3, r2
 8016224:	432b      	orrs	r3, r5
 8016226:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 8016228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801622a:	00da      	lsls	r2, r3, #3
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	18d1      	adds	r1, r2, r3
 8016230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016234:	2001      	movs	r0, #1
 8016236:	f7f3 fd1b 	bl	8009c70 <HAL_FLASH_Program>
 801623a:	1e03      	subs	r3, r0, #0
 801623c:	d004      	beq.n	8016248 <SaveSettingsInFlash+0xca>
    {
      status = GUI_WRITE_ERROR;
 801623e:	2327      	movs	r3, #39	; 0x27
 8016240:	199b      	adds	r3, r3, r6
 8016242:	19db      	adds	r3, r3, r7
 8016244:	2202      	movs	r2, #2
 8016246:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1U;
 8016248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801624a:	3301      	adds	r3, #1
 801624c:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 801624e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016250:	3301      	adds	r3, #1
 8016252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016258:	429a      	cmp	r2, r3
 801625a:	d206      	bcs.n	801626a <SaveSettingsInFlash+0xec>
 801625c:	2327      	movs	r3, #39	; 0x27
 801625e:	2210      	movs	r2, #16
 8016260:	189b      	adds	r3, r3, r2
 8016262:	19db      	adds	r3, r3, r7
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d0a3      	beq.n	80161b2 <SaveSettingsInFlash+0x34>
  }
  return status;
 801626a:	2327      	movs	r3, #39	; 0x27
 801626c:	2210      	movs	r2, #16
 801626e:	189b      	adds	r3, r3, r2
 8016270:	19db      	adds	r3, r3, r7
 8016272:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 8016274:	0018      	movs	r0, r3
 8016276:	46bd      	mov	sp, r7
 8016278:	b011      	add	sp, #68	; 0x44
 801627a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801627c <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b086      	sub	sp, #24
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 801628a:	230f      	movs	r3, #15
 801628c:	18fb      	adds	r3, r7, r3
 801628e:	2203      	movs	r2, #3
 8016290:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 8016292:	2300      	movs	r3, #0
 8016294:	613b      	str	r3, [r7, #16]
 8016296:	e00c      	b.n	80162b2 <LoadPDOFromFlash+0x36>
    {
      pListOfPDO[_index] = *((uint32_t *)_addr);
 8016298:	697a      	ldr	r2, [r7, #20]
 801629a:	693b      	ldr	r3, [r7, #16]
 801629c:	009b      	lsls	r3, r3, #2
 801629e:	6839      	ldr	r1, [r7, #0]
 80162a0:	18cb      	adds	r3, r1, r3
 80162a2:	6812      	ldr	r2, [r2, #0]
 80162a4:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4U;
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	3304      	adds	r3, #4
 80162aa:	617b      	str	r3, [r7, #20]
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	3301      	adds	r3, #1
 80162b0:	613b      	str	r3, [r7, #16]
 80162b2:	693b      	ldr	r3, [r7, #16]
 80162b4:	2b06      	cmp	r3, #6
 80162b6:	d9ef      	bls.n	8016298 <LoadPDOFromFlash+0x1c>
    }
    _status = GUI_OK;
 80162b8:	210f      	movs	r1, #15
 80162ba:	187b      	adds	r3, r7, r1
 80162bc:	2200      	movs	r2, #0
 80162be:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 80162c0:	187b      	adds	r3, r7, r1
 80162c2:	781b      	ldrb	r3, [r3, #0]
}
 80162c4:	0018      	movs	r0, r3
 80162c6:	46bd      	mov	sp, r7
 80162c8:	b006      	add	sp, #24
 80162ca:	bd80      	pop	{r7, pc}

080162cc <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 80162cc:	b590      	push	{r4, r7, lr}
 80162ce:	b087      	sub	sp, #28
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	60f8      	str	r0, [r7, #12]
 80162d4:	60b9      	str	r1, [r7, #8]
 80162d6:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 80162dc:	2413      	movs	r4, #19
 80162de:	193b      	adds	r3, r7, r4
 80162e0:	2203      	movs	r2, #3
 80162e2:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    (void) memcpy(pSettings, ((uint32_t *)_addr), Size);
 80162e4:	6979      	ldr	r1, [r7, #20]
 80162e6:	687a      	ldr	r2, [r7, #4]
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	0018      	movs	r0, r3
 80162ec:	f004 fce8 	bl	801acc0 <memcpy>
    _status = GUI_OK;
 80162f0:	193b      	adds	r3, r7, r4
 80162f2:	2200      	movs	r2, #0
 80162f4:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 80162f6:	193b      	adds	r3, r7, r4
 80162f8:	781b      	ldrb	r3, [r3, #0]
}
 80162fa:	0018      	movs	r0, r3
 80162fc:	46bd      	mov	sp, r7
 80162fe:	b007      	add	sp, #28
 8016300:	bd90      	pop	{r4, r7, pc}

08016302 <TLV_init_encode>:
  * @param    Ptr          A pointer to the value. This function does not allocate memory,
  *                        it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 8016302:	b580      	push	{r7, lr}
 8016304:	b084      	sub	sp, #16
 8016306:	af00      	add	r7, sp, #0
 8016308:	60f8      	str	r0, [r7, #12]
 801630a:	0008      	movs	r0, r1
 801630c:	0011      	movs	r1, r2
 801630e:	607b      	str	r3, [r7, #4]
 8016310:	230b      	movs	r3, #11
 8016312:	18fb      	adds	r3, r7, r3
 8016314:	1c02      	adds	r2, r0, #0
 8016316:	701a      	strb	r2, [r3, #0]
 8016318:	2308      	movs	r3, #8
 801631a:	18fb      	adds	r3, r7, r3
 801631c:	1c0a      	adds	r2, r1, #0
 801631e:	801a      	strh	r2, [r3, #0]
  if (Ptr == NULL)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d101      	bne.n	801632a <TLV_init_encode+0x28>
  {
    return 0xFF;  /* Buffer is NULL*/
 8016326:	23ff      	movs	r3, #255	; 0xff
 8016328:	e04a      	b.n	80163c0 <TLV_init_encode+0xbe>
  }
  if (SizeMax < 11U)
 801632a:	2308      	movs	r3, #8
 801632c:	18fb      	adds	r3, r7, r3
 801632e:	881b      	ldrh	r3, [r3, #0]
 8016330:	2b0a      	cmp	r3, #10
 8016332:	d801      	bhi.n	8016338 <TLV_init_encode+0x36>
  {
    return 0xFF;  /* Because of his small max size, the buffer can't even receive one empty TLV*/
 8016334:	23ff      	movs	r3, #255	; 0xff
 8016336:	e043      	b.n	80163c0 <TLV_init_encode+0xbe>
  }

  ToSendTLV->data = Ptr;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2208      	movs	r2, #8
 8016342:	18ba      	adds	r2, r7, r2
 8016344:	8812      	ldrh	r2, [r2, #0]
 8016346:	809a      	strh	r2, [r3, #4]

  ToSendTLV->data[0] = TLV_SOF;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	22fd      	movs	r2, #253	; 0xfd
 801634e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[1] = TLV_SOF;
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	3301      	adds	r3, #1
 8016356:	22fd      	movs	r2, #253	; 0xfd
 8016358:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[2] = TLV_SOF;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	3302      	adds	r3, #2
 8016360:	22fd      	movs	r2, #253	; 0xfd
 8016362:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	3303      	adds	r3, #3
 801636a:	22fd      	movs	r2, #253	; 0xfd
 801636c:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[4] = Tag;              /* Tag*/
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	3304      	adds	r3, #4
 8016374:	220b      	movs	r2, #11
 8016376:	18ba      	adds	r2, r7, r2
 8016378:	7812      	ldrb	r2, [r2, #0]
 801637a:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[5] = 0;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	3305      	adds	r3, #5
 8016382:	2200      	movs	r2, #0
 8016384:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = 0;                /* Size*/
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	3306      	adds	r3, #6
 801638c:	2200      	movs	r2, #0
 801638e:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[7] = TLV_EOF;
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	3307      	adds	r3, #7
 8016396:	22a5      	movs	r2, #165	; 0xa5
 8016398:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[8] = TLV_EOF;
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	3308      	adds	r3, #8
 80163a0:	22a5      	movs	r2, #165	; 0xa5
 80163a2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[9] = TLV_EOF;
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	3309      	adds	r3, #9
 80163aa:	22a5      	movs	r2, #165	; 0xa5
 80163ac:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	330a      	adds	r3, #10
 80163b4:	22a5      	movs	r2, #165	; 0xa5
 80163b6:	701a      	strb	r2, [r3, #0]

  ToSendTLV->EOFposition = 7;
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	2207      	movs	r2, #7
 80163bc:	80da      	strh	r2, [r3, #6]

  return 0;
 80163be:	2300      	movs	r3, #0
}
 80163c0:	0018      	movs	r0, r3
 80163c2:	46bd      	mov	sp, r7
 80163c4:	b004      	add	sp, #16
 80163c6:	bd80      	pop	{r7, pc}

080163c8 <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b086      	sub	sp, #24
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	60f8      	str	r0, [r7, #12]
 80163d0:	0008      	movs	r0, r1
 80163d2:	0011      	movs	r1, r2
 80163d4:	607b      	str	r3, [r7, #4]
 80163d6:	230b      	movs	r3, #11
 80163d8:	18fb      	adds	r3, r7, r3
 80163da:	1c02      	adds	r2, r0, #0
 80163dc:	701a      	strb	r2, [r3, #0]
 80163de:	2308      	movs	r3, #8
 80163e0:	18fb      	adds	r3, r7, r3
 80163e2:	1c0a      	adds	r2, r1, #0
 80163e4:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	68fa      	ldr	r2, [r7, #12]
 80163ec:	88d2      	ldrh	r2, [r2, #6]
 80163ee:	189b      	adds	r3, r3, r2
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	2ba5      	cmp	r3, #165	; 0xa5
 80163f4:	d001      	beq.n	80163fa <TLV_add+0x32>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 80163f6:	4b5a      	ldr	r3, [pc, #360]	; (8016560 <TLV_add+0x198>)
 80163f8:	e0ae      	b.n	8016558 <TLV_add+0x190>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	88db      	ldrh	r3, [r3, #6]
 80163fe:	001a      	movs	r2, r3
 8016400:	2308      	movs	r3, #8
 8016402:	18fb      	adds	r3, r7, r3
 8016404:	881b      	ldrh	r3, [r3, #0]
 8016406:	18d3      	adds	r3, r2, r3
 8016408:	3307      	adds	r3, #7
 801640a:	68fa      	ldr	r2, [r7, #12]
 801640c:	8892      	ldrh	r2, [r2, #4]
 801640e:	4293      	cmp	r3, r2
 8016410:	d901      	bls.n	8016416 <TLV_add+0x4e>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 8016412:	4b53      	ldr	r3, [pc, #332]	; (8016560 <TLV_add+0x198>)
 8016414:	e0a0      	b.n	8016558 <TLV_add+0x190>
  }
  if (ToSendTLV->data == NULL)
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d101      	bne.n	8016422 <TLV_add+0x5a>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 801641e:	4b50      	ldr	r3, [pc, #320]	; (8016560 <TLV_add+0x198>)
 8016420:	e09a      	b.n	8016558 <TLV_add+0x190>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	88db      	ldrh	r3, [r3, #6]
 8016426:	4a4e      	ldr	r2, [pc, #312]	; (8016560 <TLV_add+0x198>)
 8016428:	4293      	cmp	r3, r2
 801642a:	d101      	bne.n	8016430 <TLV_add+0x68>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 801642c:	4b4c      	ldr	r3, [pc, #304]	; (8016560 <TLV_add+0x198>)
 801642e:	e093      	b.n	8016558 <TLV_add+0x190>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	68fa      	ldr	r2, [r7, #12]
 8016436:	88d2      	ldrh	r2, [r2, #6]
 8016438:	189b      	adds	r3, r3, r2
 801643a:	220b      	movs	r2, #11
 801643c:	18ba      	adds	r2, r7, r2
 801643e:	7812      	ldrb	r2, [r2, #0]
 8016440:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	88db      	ldrh	r3, [r3, #6]
 8016446:	3301      	adds	r3, #1
 8016448:	b29a      	uxth	r2, r3
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	88da      	ldrh	r2, [r3, #6]
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	811a      	strh	r2, [r3, #8]

  ToSendTLV->data[ToSendTLV->EOFposition] = (uint8_t)((Size >> 8) & 0x00FFU);  /* Size*/
 8016456:	2008      	movs	r0, #8
 8016458:	183b      	adds	r3, r7, r0
 801645a:	881b      	ldrh	r3, [r3, #0]
 801645c:	0a1b      	lsrs	r3, r3, #8
 801645e:	b299      	uxth	r1, r3
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	68fa      	ldr	r2, [r7, #12]
 8016466:	88d2      	ldrh	r2, [r2, #6]
 8016468:	189b      	adds	r3, r3, r2
 801646a:	b2ca      	uxtb	r2, r1
 801646c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = (uint8_t)((Size) & 0x00FFU);
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	681a      	ldr	r2, [r3, #0]
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	88db      	ldrh	r3, [r3, #6]
 8016476:	3301      	adds	r3, #1
 8016478:	18d3      	adds	r3, r2, r3
 801647a:	183a      	adds	r2, r7, r0
 801647c:	8812      	ldrh	r2, [r2, #0]
 801647e:	b2d2      	uxtb	r2, r2
 8016480:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2U;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	88db      	ldrh	r3, [r3, #6]
 8016486:	3302      	adds	r3, #2
 8016488:	b29a      	uxth	r2, r3
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	80da      	strh	r2, [r3, #6]

  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 801648e:	2300      	movs	r3, #0
 8016490:	617b      	str	r3, [r7, #20]
 8016492:	e012      	b.n	80164ba <TLV_add+0xf2>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8016494:	687a      	ldr	r2, [r7, #4]
 8016496:	697b      	ldr	r3, [r7, #20]
 8016498:	18d2      	adds	r2, r2, r3
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	68f9      	ldr	r1, [r7, #12]
 80164a0:	88c9      	ldrh	r1, [r1, #6]
 80164a2:	185b      	adds	r3, r3, r1
 80164a4:	7812      	ldrb	r2, [r2, #0]
 80164a6:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	88db      	ldrh	r3, [r3, #6]
 80164ac:	3301      	adds	r3, #1
 80164ae:	b29a      	uxth	r2, r3
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 80164b4:	697b      	ldr	r3, [r7, #20]
 80164b6:	3301      	adds	r3, #1
 80164b8:	617b      	str	r3, [r7, #20]
 80164ba:	2108      	movs	r1, #8
 80164bc:	187b      	adds	r3, r7, r1
 80164be:	881b      	ldrh	r3, [r3, #0]
 80164c0:	697a      	ldr	r2, [r7, #20]
 80164c2:	429a      	cmp	r2, r3
 80164c4:	d3e6      	bcc.n	8016494 <TLV_add+0xcc>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	68fa      	ldr	r2, [r7, #12]
 80164cc:	88d2      	ldrh	r2, [r2, #6]
 80164ce:	189b      	adds	r3, r3, r2
 80164d0:	22a5      	movs	r2, #165	; 0xa5
 80164d2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	681a      	ldr	r2, [r3, #0]
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	88db      	ldrh	r3, [r3, #6]
 80164dc:	3301      	adds	r3, #1
 80164de:	18d3      	adds	r3, r2, r3
 80164e0:	22a5      	movs	r2, #165	; 0xa5
 80164e2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	681a      	ldr	r2, [r3, #0]
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	88db      	ldrh	r3, [r3, #6]
 80164ec:	3302      	adds	r3, #2
 80164ee:	18d3      	adds	r3, r2, r3
 80164f0:	22a5      	movs	r2, #165	; 0xa5
 80164f2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                  /* EOF*/
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	681a      	ldr	r2, [r3, #0]
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	88db      	ldrh	r3, [r3, #6]
 80164fc:	3303      	adds	r3, #3
 80164fe:	18d3      	adds	r3, r2, r3
 8016500:	22a5      	movs	r2, #165	; 0xa5
 8016502:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + 3U + Size;
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	3305      	adds	r3, #5
 801650a:	781b      	ldrb	r3, [r3, #0]
 801650c:	b29b      	uxth	r3, r3
 801650e:	021b      	lsls	r3, r3, #8
 8016510:	b29a      	uxth	r2, r3
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	3306      	adds	r3, #6
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	b29b      	uxth	r3, r3
 801651c:	18d3      	adds	r3, r2, r3
 801651e:	b29a      	uxth	r2, r3
 8016520:	187b      	adds	r3, r7, r1
 8016522:	881b      	ldrh	r3, [r3, #0]
 8016524:	18d3      	adds	r3, r2, r3
 8016526:	b29a      	uxth	r2, r3
 8016528:	2012      	movs	r0, #18
 801652a:	183b      	adds	r3, r7, r0
 801652c:	3203      	adds	r2, #3
 801652e:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 8016530:	183b      	adds	r3, r7, r0
 8016532:	881b      	ldrh	r3, [r3, #0]
 8016534:	0a1b      	lsrs	r3, r3, #8
 8016536:	b29a      	uxth	r2, r3
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	3305      	adds	r3, #5
 801653e:	b2d2      	uxtb	r2, r2
 8016540:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)total_lgth;
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	3306      	adds	r3, #6
 8016548:	183a      	adds	r2, r7, r0
 801654a:	8812      	ldrh	r2, [r2, #0]
 801654c:	b2d2      	uxtb	r2, r2
 801654e:	701a      	strb	r2, [r3, #0]

  return (3U + Size);
 8016550:	187b      	adds	r3, r7, r1
 8016552:	881b      	ldrh	r3, [r3, #0]
 8016554:	3303      	adds	r3, #3
 8016556:	b29b      	uxth	r3, r3
}
 8016558:	0018      	movs	r0, r3
 801655a:	46bd      	mov	sp, r7
 801655c:	b006      	add	sp, #24
 801655e:	bd80      	pop	{r7, pc}
 8016560:	0000ffff 	.word	0x0000ffff

08016564 <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data_t *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b086      	sub	sp, #24
 8016568:	af00      	add	r7, sp, #0
 801656a:	60f8      	str	r0, [r7, #12]
 801656c:	60b9      	str	r1, [r7, #8]
 801656e:	1dbb      	adds	r3, r7, #6
 8016570:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	68fa      	ldr	r2, [r7, #12]
 8016578:	88d2      	ldrh	r2, [r2, #6]
 801657a:	189b      	adds	r3, r3, r2
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	2ba5      	cmp	r3, #165	; 0xa5
 8016580:	d001      	beq.n	8016586 <TLV_addValue+0x22>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8016582:	4b41      	ldr	r3, [pc, #260]	; (8016688 <TLV_addValue+0x124>)
 8016584:	e07c      	b.n	8016680 <TLV_addValue+0x11c>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	88db      	ldrh	r3, [r3, #6]
 801658a:	001a      	movs	r2, r3
 801658c:	1dbb      	adds	r3, r7, #6
 801658e:	881b      	ldrh	r3, [r3, #0]
 8016590:	18d3      	adds	r3, r2, r3
 8016592:	3307      	adds	r3, #7
 8016594:	68fa      	ldr	r2, [r7, #12]
 8016596:	8892      	ldrh	r2, [r2, #4]
 8016598:	4293      	cmp	r3, r2
 801659a:	d901      	bls.n	80165a0 <TLV_addValue+0x3c>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 801659c:	4b3a      	ldr	r3, [pc, #232]	; (8016688 <TLV_addValue+0x124>)
 801659e:	e06f      	b.n	8016680 <TLV_addValue+0x11c>
  }
  if (ToSendTLV->data == NULL)
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d101      	bne.n	80165ac <TLV_addValue+0x48>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 80165a8:	4b37      	ldr	r3, [pc, #220]	; (8016688 <TLV_addValue+0x124>)
 80165aa:	e069      	b.n	8016680 <TLV_addValue+0x11c>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	88db      	ldrh	r3, [r3, #6]
 80165b0:	4a35      	ldr	r2, [pc, #212]	; (8016688 <TLV_addValue+0x124>)
 80165b2:	4293      	cmp	r3, r2
 80165b4:	d101      	bne.n	80165ba <TLV_addValue+0x56>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 80165b6:	4b34      	ldr	r3, [pc, #208]	; (8016688 <TLV_addValue+0x124>)
 80165b8:	e062      	b.n	8016680 <TLV_addValue+0x11c>
  }

  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 80165ba:	2300      	movs	r3, #0
 80165bc:	617b      	str	r3, [r7, #20]
 80165be:	e012      	b.n	80165e6 <TLV_addValue+0x82>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 80165c0:	68ba      	ldr	r2, [r7, #8]
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	18d2      	adds	r2, r2, r3
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	68f9      	ldr	r1, [r7, #12]
 80165cc:	88c9      	ldrh	r1, [r1, #6]
 80165ce:	185b      	adds	r3, r3, r1
 80165d0:	7812      	ldrb	r2, [r2, #0]
 80165d2:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	88db      	ldrh	r3, [r3, #6]
 80165d8:	3301      	adds	r3, #1
 80165da:	b29a      	uxth	r2, r3
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 80165e0:	697b      	ldr	r3, [r7, #20]
 80165e2:	3301      	adds	r3, #1
 80165e4:	617b      	str	r3, [r7, #20]
 80165e6:	1dbb      	adds	r3, r7, #6
 80165e8:	881b      	ldrh	r3, [r3, #0]
 80165ea:	697a      	ldr	r2, [r7, #20]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d3e7      	bcc.n	80165c0 <TLV_addValue+0x5c>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	68fa      	ldr	r2, [r7, #12]
 80165f6:	88d2      	ldrh	r2, [r2, #6]
 80165f8:	189b      	adds	r3, r3, r2
 80165fa:	22a5      	movs	r2, #165	; 0xa5
 80165fc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	681a      	ldr	r2, [r3, #0]
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	88db      	ldrh	r3, [r3, #6]
 8016606:	3301      	adds	r3, #1
 8016608:	18d3      	adds	r3, r2, r3
 801660a:	22a5      	movs	r2, #165	; 0xa5
 801660c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	88db      	ldrh	r3, [r3, #6]
 8016616:	3302      	adds	r3, #2
 8016618:	18d3      	adds	r3, r2, r3
 801661a:	22a5      	movs	r2, #165	; 0xa5
 801661c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                   /* EOF*/
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	681a      	ldr	r2, [r3, #0]
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	88db      	ldrh	r3, [r3, #6]
 8016626:	3303      	adds	r3, #3
 8016628:	18d3      	adds	r3, r2, r3
 801662a:	22a5      	movs	r2, #165	; 0xa5
 801662c:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + Size;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	3305      	adds	r3, #5
 8016634:	781b      	ldrb	r3, [r3, #0]
 8016636:	b29b      	uxth	r3, r3
 8016638:	021b      	lsls	r3, r3, #8
 801663a:	b29a      	uxth	r2, r3
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	3306      	adds	r3, #6
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	b29b      	uxth	r3, r3
 8016646:	18d3      	adds	r3, r2, r3
 8016648:	b299      	uxth	r1, r3
 801664a:	2012      	movs	r0, #18
 801664c:	183b      	adds	r3, r7, r0
 801664e:	1dba      	adds	r2, r7, #6
 8016650:	8812      	ldrh	r2, [r2, #0]
 8016652:	188a      	adds	r2, r1, r2
 8016654:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 8016656:	0001      	movs	r1, r0
 8016658:	187b      	adds	r3, r7, r1
 801665a:	881b      	ldrh	r3, [r3, #0]
 801665c:	0a1b      	lsrs	r3, r3, #8
 801665e:	b29a      	uxth	r2, r3
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	3305      	adds	r3, #5
 8016666:	b2d2      	uxtb	r2, r2
 8016668:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)(total_lgth);
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	3306      	adds	r3, #6
 8016670:	187a      	adds	r2, r7, r1
 8016672:	8812      	ldrh	r2, [r2, #0]
 8016674:	b2d2      	uxtb	r2, r2
 8016676:	701a      	strb	r2, [r3, #0]

  return 3U + Size;
 8016678:	1dbb      	adds	r3, r7, #6
 801667a:	881b      	ldrh	r3, [r3, #0]
 801667c:	3303      	adds	r3, #3
 801667e:	b29b      	uxth	r3, r3
}
 8016680:	0018      	movs	r0, r3
 8016682:	46bd      	mov	sp, r7
 8016684:	b006      	add	sp, #24
 8016686:	bd80      	pop	{r7, pc}
 8016688:	0000ffff 	.word	0x0000ffff

0801668c <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data_t *ToSendTLV)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b082      	sub	sp, #8
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2200      	movs	r2, #0
 8016698:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	2201      	movs	r2, #1
 801669e:	4252      	negs	r2, r2
 80166a0:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2200      	movs	r2, #0
 80166a6:	809a      	strh	r2, [r3, #4]
}
 80166a8:	46c0      	nop			; (mov r8, r8)
 80166aa:	46bd      	mov	sp, r7
 80166ac:	b002      	add	sp, #8
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data_t that will be used.
  * @param    pReceivedString The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data_t *ToProcessTLV, uint8_t *pReceivedString)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	6039      	str	r1, [r7, #0]
  if (pReceivedString == NULL)
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d101      	bne.n	80166c4 <TLV_init_decode+0x14>
  {
    return 0xFF;  /* Received string is NULL*/
 80166c0:	23ff      	movs	r3, #255	; 0xff
 80166c2:	e01d      	b.n	8016700 <TLV_init_decode+0x50>
  }
  if ((pReceivedString[0] != TLV_SOF)
 80166c4:	683b      	ldr	r3, [r7, #0]
 80166c6:	781b      	ldrb	r3, [r3, #0]
 80166c8:	2bfd      	cmp	r3, #253	; 0xfd
 80166ca:	d10e      	bne.n	80166ea <TLV_init_decode+0x3a>
      || (pReceivedString[1] != TLV_SOF)
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	3301      	adds	r3, #1
 80166d0:	781b      	ldrb	r3, [r3, #0]
 80166d2:	2bfd      	cmp	r3, #253	; 0xfd
 80166d4:	d109      	bne.n	80166ea <TLV_init_decode+0x3a>
      || (pReceivedString[2] != TLV_SOF)
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	3302      	adds	r3, #2
 80166da:	781b      	ldrb	r3, [r3, #0]
 80166dc:	2bfd      	cmp	r3, #253	; 0xfd
 80166de:	d104      	bne.n	80166ea <TLV_init_decode+0x3a>
      || (pReceivedString[3] != TLV_SOF))
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	3303      	adds	r3, #3
 80166e4:	781b      	ldrb	r3, [r3, #0]
 80166e6:	2bfd      	cmp	r3, #253	; 0xfd
 80166e8:	d001      	beq.n	80166ee <TLV_init_decode+0x3e>
  {
    return 0xFF;  /* Incorrect SOF*/
 80166ea:	23ff      	movs	r3, #255	; 0xff
 80166ec:	e008      	b.n	8016700 <TLV_init_decode+0x50>
  }

  ToProcessTLV->data = pReceivedString;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	683a      	ldr	r2, [r7, #0]
 80166f2:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2207      	movs	r2, #7
 80166f8:	809a      	strh	r2, [r3, #4]

  return ((uint8_t)(ToProcessTLV->cursor));
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	889b      	ldrh	r3, [r3, #4]
 80166fe:	b2db      	uxtb	r3, r3
}
 8016700:	0018      	movs	r0, r3
 8016702:	46bd      	mov	sp, r7
 8016704:	b002      	add	sp, #8
 8016706:	bd80      	pop	{r7, pc}

08016708 <TLV_get>:
  * @param    Value        A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after,
  *           1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data_t *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af00      	add	r7, sp, #0
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	607a      	str	r2, [r7, #4]
 8016714:	603b      	str	r3, [r7, #0]
  if (ToProcessTLV->data == NULL)
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d101      	bne.n	8016722 <TLV_get+0x1a>
  {
    return 0xFF;  /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 801671e:	23ff      	movs	r3, #255	; 0xff
 8016720:	e048      	b.n	80167b4 <TLV_get+0xac>
  }
  if (ToProcessTLV->cursor == 0U)
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	889b      	ldrh	r3, [r3, #4]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d101      	bne.n	801672e <TLV_get+0x26>
  {
    return 0xFF;  /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 801672a:	23ff      	movs	r3, #255	; 0xff
 801672c:	e042      	b.n	80167b4 <TLV_get+0xac>
  }
  if (ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF)
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	68fa      	ldr	r2, [r7, #12]
 8016734:	8892      	ldrh	r2, [r2, #4]
 8016736:	189b      	adds	r3, r3, r2
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	2ba5      	cmp	r3, #165	; 0xa5
 801673c:	d101      	bne.n	8016742 <TLV_get+0x3a>
  {
    return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 801673e:	23ff      	movs	r3, #255	; 0xff
 8016740:	e038      	b.n	80167b4 <TLV_get+0xac>
  }

  /* Tag*/
  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	68fa      	ldr	r2, [r7, #12]
 8016748:	8892      	ldrh	r2, [r2, #4]
 801674a:	189b      	adds	r3, r3, r2
 801674c:	781a      	ldrb	r2, [r3, #0]
 801674e:	68bb      	ldr	r3, [r7, #8]
 8016750:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	889b      	ldrh	r3, [r3, #4]
 8016756:	3301      	adds	r3, #1
 8016758:	b29a      	uxth	r2, r3
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	809a      	strh	r2, [r3, #4]
  /* Length*/
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	68fa      	ldr	r2, [r7, #12]
 8016764:	8892      	ldrh	r2, [r2, #4]
 8016766:	189b      	adds	r3, r3, r2
 8016768:	781b      	ldrb	r3, [r3, #0]
 801676a:	b29b      	uxth	r3, r3
 801676c:	021b      	lsls	r3, r3, #8
 801676e:	b29a      	uxth	r2, r3
            + (uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor + 1U]);
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	6819      	ldr	r1, [r3, #0]
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	889b      	ldrh	r3, [r3, #4]
 8016778:	3301      	adds	r3, #1
 801677a:	18cb      	adds	r3, r1, r3
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	b29b      	uxth	r3, r3
 8016780:	18d3      	adds	r3, r2, r3
 8016782:	b29a      	uxth	r2, r3
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2U;
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	889b      	ldrh	r3, [r3, #4]
 801678c:	3302      	adds	r3, #2
 801678e:	b29a      	uxth	r2, r3
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	809a      	strh	r2, [r3, #4]
  /* Value*/
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	68fa      	ldr	r2, [r7, #12]
 801679a:	8892      	ldrh	r2, [r2, #4]
 801679c:	189a      	adds	r2, r3, r2
 801679e:	683b      	ldr	r3, [r7, #0]
 80167a0:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	889a      	ldrh	r2, [r3, #4]
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	881b      	ldrh	r3, [r3, #0]
 80167aa:	18d3      	adds	r3, r2, r3
 80167ac:	b29a      	uxth	r2, r3
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	809a      	strh	r2, [r3, #4]

  return 0;
 80167b2:	2300      	movs	r3, #0
}
 80167b4:	0018      	movs	r0, r3
 80167b6:	46bd      	mov	sp, r7
 80167b8:	b004      	add	sp, #16
 80167ba:	bd80      	pop	{r7, pc}

080167bc <TLV_deinit_decode>:
  *           to restart decoding from the beginning). This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data_t *ToProcessTLV)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	2200      	movs	r2, #0
 80167c8:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2200      	movs	r2, #0
 80167ce:	809a      	strh	r2, [r3, #4]
}
 80167d0:	46c0      	nop			; (mov r8, r8)
 80167d2:	46bd      	mov	sp, r7
 80167d4:	b002      	add	sp, #8
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <TLV_get_string_length>:
  *           it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t *pString)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 80167e0:	230f      	movs	r3, #15
 80167e2:	18fb      	adds	r3, r7, r3
 80167e4:	2200      	movs	r2, #0
 80167e6:	701a      	strb	r2, [r3, #0]

  while (pString[start] == TLV_SOF)
 80167e8:	e005      	b.n	80167f6 <TLV_get_string_length+0x1e>
  {
    start++;
 80167ea:	210f      	movs	r1, #15
 80167ec:	187b      	adds	r3, r7, r1
 80167ee:	781a      	ldrb	r2, [r3, #0]
 80167f0:	187b      	adds	r3, r7, r1
 80167f2:	3201      	adds	r2, #1
 80167f4:	701a      	strb	r2, [r3, #0]
  while (pString[start] == TLV_SOF)
 80167f6:	210f      	movs	r1, #15
 80167f8:	187b      	adds	r3, r7, r1
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	687a      	ldr	r2, [r7, #4]
 80167fe:	18d3      	adds	r3, r2, r3
 8016800:	781b      	ldrb	r3, [r3, #0]
 8016802:	2bfd      	cmp	r3, #253	; 0xfd
 8016804:	d0f1      	beq.n	80167ea <TLV_get_string_length+0x12>
  } /* start variable is now after the SOF if there is one.*/

  length = ((uint16_t)pString[start + 1U] << 8) | (uint16_t)pString[start + 2U];
 8016806:	187b      	adds	r3, r7, r1
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	3301      	adds	r3, #1
 801680c:	687a      	ldr	r2, [r7, #4]
 801680e:	18d3      	adds	r3, r2, r3
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	021b      	lsls	r3, r3, #8
 8016814:	b21a      	sxth	r2, r3
 8016816:	187b      	adds	r3, r7, r1
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	3302      	adds	r3, #2
 801681c:	6879      	ldr	r1, [r7, #4]
 801681e:	18cb      	adds	r3, r1, r3
 8016820:	781b      	ldrb	r3, [r3, #0]
 8016822:	b21b      	sxth	r3, r3
 8016824:	4313      	orrs	r3, r2
 8016826:	b21a      	sxth	r2, r3
 8016828:	210c      	movs	r1, #12
 801682a:	187b      	adds	r3, r7, r1
 801682c:	801a      	strh	r2, [r3, #0]
  length += 3U;
 801682e:	187b      	adds	r3, r7, r1
 8016830:	187a      	adds	r2, r7, r1
 8016832:	8812      	ldrh	r2, [r2, #0]
 8016834:	3203      	adds	r2, #3
 8016836:	801a      	strh	r2, [r3, #0]

  return length;
 8016838:	187b      	adds	r3, r7, r1
 801683a:	881b      	ldrh	r3, [r3, #0]
}
 801683c:	0018      	movs	r0, r3
 801683e:	46bd      	mov	sp, r7
 8016840:	b004      	add	sp, #16
 8016842:	bd80      	pop	{r7, pc}

08016844 <GUI_Init>:
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t *(*CB_HWBoardVersion)(void), const uint8_t *(*CB_HWPDType)(void),
                               uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b086      	sub	sp, #24
 8016848:	af00      	add	r7, sp, #0
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	607a      	str	r2, [r7, #4]
 8016850:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 8016852:	2317      	movs	r3, #23
 8016854:	18fb      	adds	r3, r7, r3
 8016856:	2201      	movs	r2, #1
 8016858:	701a      	strb	r2, [r3, #0]
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 801685a:	f7fe ff95 	bl	8015788 <BSP_GUI_LoadDataFromFlash>
 801685e:	0003      	movs	r3, r0
 8016860:	1e5a      	subs	r2, r3, #1
 8016862:	4193      	sbcs	r3, r2
 8016864:	b2db      	uxtb	r3, r3
 8016866:	001a      	movs	r2, r3
 8016868:	4b3f      	ldr	r3, [pc, #252]	; (8016968 <GUI_Init+0x124>)
 801686a:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 801686c:	4b3f      	ldr	r3, [pc, #252]	; (801696c <GUI_Init+0x128>)
 801686e:	799b      	ldrb	r3, [r3, #6]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d003      	beq.n	801687c <GUI_Init+0x38>
 8016874:	4b3d      	ldr	r3, [pc, #244]	; (801696c <GUI_Init+0x128>)
 8016876:	79db      	ldrb	r3, [r3, #7]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d115      	bne.n	80168a8 <GUI_Init+0x64>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 801687c:	4b3c      	ldr	r3, [pc, #240]	; (8016970 <GUI_Init+0x12c>)
 801687e:	226b      	movs	r2, #107	; 0x6b
 8016880:	189b      	adds	r3, r3, r2
 8016882:	785a      	ldrb	r2, [r3, #1]
 8016884:	2101      	movs	r1, #1
 8016886:	400a      	ands	r2, r1
 8016888:	1c11      	adds	r1, r2, #0
 801688a:	2260      	movs	r2, #96	; 0x60
 801688c:	4252      	negs	r2, r2
 801688e:	430a      	orrs	r2, r1
 8016890:	705a      	strb	r2, [r3, #1]
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 8016892:	4b37      	ldr	r3, [pc, #220]	; (8016970 <GUI_Init+0x12c>)
 8016894:	226b      	movs	r2, #107	; 0x6b
 8016896:	189b      	adds	r3, r3, r2
 8016898:	789a      	ldrb	r2, [r3, #2]
 801689a:	217f      	movs	r1, #127	; 0x7f
 801689c:	438a      	bics	r2, r1
 801689e:	1c11      	adds	r1, r2, #0
 80168a0:	2232      	movs	r2, #50	; 0x32
 80168a2:	430a      	orrs	r2, r1
 80168a4:	709a      	strb	r2, [r3, #2]
 80168a6:	e040      	b.n	801692a <GUI_Init+0xe6>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 80168a8:	4b30      	ldr	r3, [pc, #192]	; (801696c <GUI_Init+0x128>)
 80168aa:	79db      	ldrb	r3, [r3, #7]
 80168ac:	001a      	movs	r2, r3
 80168ae:	2364      	movs	r3, #100	; 0x64
 80168b0:	435a      	muls	r2, r3
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 80168b2:	4b2e      	ldr	r3, [pc, #184]	; (801696c <GUI_Init+0x128>)
 80168b4:	79db      	ldrb	r3, [r3, #7]
 80168b6:	0019      	movs	r1, r3
                                                     DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 80168b8:	4b2c      	ldr	r3, [pc, #176]	; (801696c <GUI_Init+0x128>)
 80168ba:	799b      	ldrb	r3, [r3, #6]
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 80168bc:	18cb      	adds	r3, r1, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 80168be:	0019      	movs	r1, r3
 80168c0:	0010      	movs	r0, r2
 80168c2:	f7ef fc95 	bl	80061f0 <__udivsi3>
 80168c6:	0003      	movs	r3, r0
 80168c8:	1c1a      	adds	r2, r3, #0
 80168ca:	237f      	movs	r3, #127	; 0x7f
 80168cc:	4013      	ands	r3, r2
 80168ce:	b2da      	uxtb	r2, r3
 80168d0:	4b27      	ldr	r3, [pc, #156]	; (8016970 <GUI_Init+0x12c>)
 80168d2:	216b      	movs	r1, #107	; 0x6b
 80168d4:	185b      	adds	r3, r3, r1
 80168d6:	217f      	movs	r1, #127	; 0x7f
 80168d8:	400a      	ands	r2, r1
 80168da:	0010      	movs	r0, r2
 80168dc:	789a      	ldrb	r2, [r3, #2]
 80168de:	217f      	movs	r1, #127	; 0x7f
 80168e0:	438a      	bics	r2, r1
 80168e2:	1c11      	adds	r1, r2, #0
 80168e4:	1c02      	adds	r2, r0, #0
 80168e6:	430a      	orrs	r2, r1
 80168e8:	709a      	strb	r2, [r3, #2]
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 80168ea:	4b20      	ldr	r3, [pc, #128]	; (801696c <GUI_Init+0x128>)
 80168ec:	79db      	ldrb	r3, [r3, #7]
 80168ee:	001a      	movs	r2, r3
 80168f0:	2364      	movs	r3, #100	; 0x64
 80168f2:	435a      	muls	r2, r3
                                               DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 80168f4:	4b1e      	ldr	r3, [pc, #120]	; (8016970 <GUI_Init+0x12c>)
 80168f6:	216d      	movs	r1, #109	; 0x6d
 80168f8:	5c5b      	ldrb	r3, [r3, r1]
 80168fa:	065b      	lsls	r3, r3, #25
 80168fc:	0e5b      	lsrs	r3, r3, #25
 80168fe:	b2db      	uxtb	r3, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 8016900:	0019      	movs	r1, r3
 8016902:	0010      	movs	r0, r2
 8016904:	f7ef fc74 	bl	80061f0 <__udivsi3>
 8016908:	0003      	movs	r3, r0
 801690a:	1c1a      	adds	r2, r3, #0
 801690c:	237f      	movs	r3, #127	; 0x7f
 801690e:	4013      	ands	r3, r2
 8016910:	b2d9      	uxtb	r1, r3
 8016912:	4b17      	ldr	r3, [pc, #92]	; (8016970 <GUI_Init+0x12c>)
 8016914:	226b      	movs	r2, #107	; 0x6b
 8016916:	189b      	adds	r3, r3, r2
 8016918:	1c0a      	adds	r2, r1, #0
 801691a:	1890      	adds	r0, r2, r2
 801691c:	785a      	ldrb	r2, [r3, #1]
 801691e:	2101      	movs	r1, #1
 8016920:	400a      	ands	r2, r1
 8016922:	1c11      	adds	r1, r2, #0
 8016924:	1c02      	adds	r2, r0, #0
 8016926:	430a      	orrs	r2, r1
 8016928:	705a      	strb	r2, [r3, #1]
                                               DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 801692a:	4b12      	ldr	r3, [pc, #72]	; (8016974 <GUI_Init+0x130>)
 801692c:	68fa      	ldr	r2, [r7, #12]
 801692e:	601a      	str	r2, [r3, #0]
  pCB_HWPDType        = CB_HWPDType;
 8016930:	4b11      	ldr	r3, [pc, #68]	; (8016978 <GUI_Init+0x134>)
 8016932:	68ba      	ldr	r2, [r7, #8]
 8016934:	601a      	str	r2, [r3, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 8016936:	4b11      	ldr	r3, [pc, #68]	; (801697c <GUI_Init+0x138>)
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	601a      	str	r2, [r3, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 801693c:	4b10      	ldr	r3, [pc, #64]	; (8016980 <GUI_Init+0x13c>)
 801693e:	683a      	ldr	r2, [r7, #0]
 8016940:	601a      	str	r2, [r3, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 8016942:	4a10      	ldr	r2, [pc, #64]	; (8016984 <GUI_Init+0x140>)
 8016944:	4910      	ldr	r1, [pc, #64]	; (8016988 <GUI_Init+0x144>)
 8016946:	4b11      	ldr	r3, [pc, #68]	; (801698c <GUI_Init+0x148>)
 8016948:	0018      	movs	r0, r3
 801694a:	f7fc fcbd 	bl	80132c8 <USBPD_DPM_SetNotification_GUI>

#if !defined(USBPD_THREADX)
  _status = (USBPD_FunctionalState) GUI_InitOS(NULL);
 801694e:	2000      	movs	r0, #0
 8016950:	f000 f81e 	bl	8016990 <GUI_InitOS>
 8016954:	0002      	movs	r2, r0
 8016956:	2117      	movs	r1, #23
 8016958:	187b      	adds	r3, r7, r1
 801695a:	701a      	strb	r2, [r3, #0]
#endif /* !USBPD_THREADX */
  return _status;
 801695c:	187b      	adds	r3, r7, r1
 801695e:	781b      	ldrb	r3, [r3, #0]
}
 8016960:	0018      	movs	r0, r3
 8016962:	46bd      	mov	sp, r7
 8016964:	b006      	add	sp, #24
 8016966:	bd80      	pop	{r7, pc}
 8016968:	20002fed 	.word	0x20002fed
 801696c:	2000003c 	.word	0x2000003c
 8016970:	20000050 	.word	0x20000050
 8016974:	20002ff8 	.word	0x20002ff8
 8016978:	20002ffc 	.word	0x20002ffc
 801697c:	20003000 	.word	0x20003000
 8016980:	20003004 	.word	0x20003004
 8016984:	08017a75 	.word	0x08017a75
 8016988:	080179a5 	.word	0x080179a5
 801698c:	08016d6b 	.word	0x08016d6b

08016990 <GUI_InitOS>:

uint32_t GUI_InitOS(void *MemoryPtr)
{
 8016990:	b590      	push	{r4, r7, lr}
 8016992:	b08d      	sub	sp, #52	; 0x34
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
  static uint8_t _init = 0;
  GUIOS_INIT();
 8016998:	2301      	movs	r3, #1
 801699a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* This init check to keep the compatibility with the previous version of the GUI */
  /* Only threadX required to separate the OS object init with the init code.       */
  if (_init == 0)
 801699c:	4b1f      	ldr	r3, [pc, #124]	; (8016a1c <GUI_InitOS+0x8c>)
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d134      	bne.n	8016a0e <GUI_InitOS+0x7e>
  {
    _init = 1;
 80169a4:	4b1d      	ldr	r3, [pc, #116]	; (8016a1c <GUI_InitOS+0x8c>)
 80169a6:	2201      	movs	r2, #1
 80169a8:	701a      	strb	r2, [r3, #0]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_CREATE_QUEUE(GUIMsgBox, "GUIBOX", GUI_BOX_MESSAGES_MAX, GUIOS_ELEMENT_SIZE);
 80169aa:	2200      	movs	r2, #0
 80169ac:	2104      	movs	r1, #4
 80169ae:	201e      	movs	r0, #30
 80169b0:	f7f9 fc68 	bl	8010284 <osMessageQueueNew>
 80169b4:	0002      	movs	r2, r0
 80169b6:	4b1a      	ldr	r3, [pc, #104]	; (8016a20 <GUI_InitOS+0x90>)
 80169b8:	601a      	str	r2, [r3, #0]
 80169ba:	4b19      	ldr	r3, [pc, #100]	; (8016a20 <GUI_InitOS+0x90>)
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d102      	bne.n	80169c8 <GUI_InitOS+0x38>
 80169c2:	2300      	movs	r3, #0
 80169c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80169c6:	e023      	b.n	8016a10 <GUI_InitOS+0x80>
    GUIOS_CREATE_TASK(GUI_ThreadID, GUI, TaskGUI, OS_GUI_PRIORITY, OS_GUI_STACK_SIZE, &GUIMsgBox);
 80169c8:	2408      	movs	r4, #8
 80169ca:	193b      	adds	r3, r7, r4
 80169cc:	0018      	movs	r0, r3
 80169ce:	2324      	movs	r3, #36	; 0x24
 80169d0:	001a      	movs	r2, r3
 80169d2:	2100      	movs	r1, #0
 80169d4:	f004 f8c0 	bl	801ab58 <memset>
 80169d8:	0021      	movs	r1, r4
 80169da:	187b      	adds	r3, r7, r1
 80169dc:	4a11      	ldr	r2, [pc, #68]	; (8016a24 <GUI_InitOS+0x94>)
 80169de:	601a      	str	r2, [r3, #0]
 80169e0:	187b      	adds	r3, r7, r1
 80169e2:	2296      	movs	r2, #150	; 0x96
 80169e4:	00d2      	lsls	r2, r2, #3
 80169e6:	615a      	str	r2, [r3, #20]
 80169e8:	187b      	adds	r3, r7, r1
 80169ea:	2208      	movs	r2, #8
 80169ec:	619a      	str	r2, [r3, #24]
 80169ee:	187a      	adds	r2, r7, r1
 80169f0:	490b      	ldr	r1, [pc, #44]	; (8016a20 <GUI_InitOS+0x90>)
 80169f2:	4b0d      	ldr	r3, [pc, #52]	; (8016a28 <GUI_InitOS+0x98>)
 80169f4:	0018      	movs	r0, r3
 80169f6:	f7f9 fb43 	bl	8010080 <osThreadNew>
 80169fa:	0002      	movs	r2, r0
 80169fc:	4b0b      	ldr	r3, [pc, #44]	; (8016a2c <GUI_InitOS+0x9c>)
 80169fe:	601a      	str	r2, [r3, #0]
 8016a00:	4b0a      	ldr	r3, [pc, #40]	; (8016a2c <GUI_InitOS+0x9c>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d103      	bne.n	8016a10 <GUI_InitOS+0x80>
 8016a08:	2300      	movs	r3, #0
 8016a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a0c:	e000      	b.n	8016a10 <GUI_InitOS+0x80>
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS || USBPD_THREADX */
  }

#if defined(_RTOS) || defined(USBPD_THREADX)
error:
 8016a0e:	46c0      	nop			; (mov r8, r8)
  return(_status);
 8016a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#else
  return(USBPD_ENABLE);
#endif /* _RTOS || USBPD_THREADX */
}
 8016a12:	0018      	movs	r0, r3
 8016a14:	46bd      	mov	sp, r7
 8016a16:	b00d      	add	sp, #52	; 0x34
 8016a18:	bd90      	pop	{r4, r7, pc}
 8016a1a:	46c0      	nop			; (mov r8, r8)
 8016a1c:	2000307c 	.word	0x2000307c
 8016a20:	20002ff0 	.word	0x20002ff0
 8016a24:	0801c2c8 	.word	0x0801c2c8
 8016a28:	08016a49 	.word	0x08016a49
 8016a2c:	20002ff4 	.word	0x20002ff4

08016a30 <GUI_Start>:
{
  BSP_GUI_EraseDataInFlash();
}

void GUI_Start(void)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 8016a34:	4b03      	ldr	r3, [pc, #12]	; (8016a44 <GUI_Start+0x14>)
 8016a36:	0018      	movs	r0, r3
 8016a38:	f002 ffc6 	bl	80199c8 <TRACER_EMB_StartRX>
}
 8016a3c:	46c0      	nop			; (mov r8, r8)
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}
 8016a42:	46c0      	nop			; (mov r8, r8)
 8016a44:	08016c65 	.word	0x08016c65

08016a48 <TaskGUI>:
#if defined(_RTOS) || defined(USBPD_THREADX)
GUIDEF_TASK_FUNCTION(TaskGUI)
#else
void GUI_Execute(void)
#endif /* _RTOS || USBPD_THREADX */
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b088      	sub	sp, #32
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
#if defined(_RTOS) || defined(USBPD_THREADX)
  uint32_t _timing = GUI_DEFAULT_WAIT;
 8016a50:	2301      	movs	r3, #1
 8016a52:	425b      	negs	r3, r3
 8016a54:	61fb      	str	r3, [r7, #28]
  GUI_Start();
 8016a56:	f7ff ffeb 	bl	8016a30 <GUI_Start>
  do
  {
    GUIOS_QUEUE_EVENT event = 0;
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	613b      	str	r3, [r7, #16]
    GUIOS_GETMESSAGE_QUEUE(GUIMsgBox, _timing, event);
 8016a5e:	4b54      	ldr	r3, [pc, #336]	; (8016bb0 <TaskGUI+0x168>)
 8016a60:	6818      	ldr	r0, [r3, #0]
 8016a62:	69fb      	ldr	r3, [r7, #28]
 8016a64:	2210      	movs	r2, #16
 8016a66:	18b9      	adds	r1, r7, r2
 8016a68:	2200      	movs	r2, #0
 8016a6a:	f7f9 fce1 	bl	8010430 <osMessageQueueGet>
    switch ((GUI_USER_EVENT)(event & 0xFU))
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	b2db      	uxtb	r3, r3
 8016a72:	001a      	movs	r2, r3
 8016a74:	230f      	movs	r3, #15
 8016a76:	4013      	ands	r3, r2
 8016a78:	d011      	beq.n	8016a9e <TaskGUI+0x56>
 8016a7a:	2b01      	cmp	r3, #1
 8016a7c:	d000      	beq.n	8016a80 <TaskGUI+0x38>
 8016a7e:	e090      	b.n	8016ba2 <TaskGUI+0x15a>
    {
      case GUI_USER_EVENT_GUI:
      {
        (void)GUI_RXProcess((uint32_t)event);
 8016a80:	693b      	ldr	r3, [r7, #16]
 8016a82:	0018      	movs	r0, r3
 8016a84:	f000 f918 	bl	8016cb8 <GUI_RXProcess>
        /* Sent an event to check if measurement report has been requested */
        GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_TIMER, 0U);
 8016a88:	2300      	movs	r3, #0
 8016a8a:	60fb      	str	r3, [r7, #12]
 8016a8c:	4b48      	ldr	r3, [pc, #288]	; (8016bb0 <TaskGUI+0x168>)
 8016a8e:	6818      	ldr	r0, [r3, #0]
 8016a90:	230c      	movs	r3, #12
 8016a92:	18f9      	adds	r1, r7, r3
 8016a94:	2300      	movs	r3, #0
 8016a96:	2200      	movs	r2, #0
 8016a98:	f7f9 fc6e 	bl	8010378 <osMessageQueuePut>
        break;
 8016a9c:	e082      	b.n	8016ba4 <TaskGUI+0x15c>
          default:
            break;
        }
        GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* _RTOS || USBPD_THREADX */
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 8016a9e:	231b      	movs	r3, #27
 8016aa0:	18fb      	adds	r3, r7, r3
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	701a      	strb	r2, [r3, #0]
 8016aa6:	e076      	b.n	8016b96 <TaskGUI+0x14e>
          /* -------------------------------------------------  */
          /* Check if timeout related to Measurement reporting  */
          /* -------------------------------------------------  */
          /* - Send a GUI Event only if PE is connected
             and Measurement report has been enabled          */
          if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 8016aa8:	201b      	movs	r0, #27
 8016aaa:	183b      	adds	r3, r7, r0
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	4a41      	ldr	r2, [pc, #260]	; (8016bb4 <TaskGUI+0x16c>)
 8016ab0:	009b      	lsls	r3, r3, #2
 8016ab2:	18d3      	adds	r3, r2, r3
 8016ab4:	785b      	ldrb	r3, [r3, #1]
 8016ab6:	06db      	lsls	r3, r3, #27
 8016ab8:	0fdb      	lsrs	r3, r3, #31
 8016aba:	b2db      	uxtb	r3, r3
 8016abc:	2b01      	cmp	r3, #1
 8016abe:	d15d      	bne.n	8016b7c <TaskGUI+0x134>
              && (1U == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 8016ac0:	183b      	adds	r3, r7, r0
 8016ac2:	781a      	ldrb	r2, [r3, #0]
 8016ac4:	493c      	ldr	r1, [pc, #240]	; (8016bb8 <TaskGUI+0x170>)
 8016ac6:	0013      	movs	r3, r2
 8016ac8:	005b      	lsls	r3, r3, #1
 8016aca:	189b      	adds	r3, r3, r2
 8016acc:	005b      	lsls	r3, r3, #1
 8016ace:	18cb      	adds	r3, r1, r3
 8016ad0:	791b      	ldrb	r3, [r3, #4]
 8016ad2:	061b      	lsls	r3, r3, #24
 8016ad4:	0fdb      	lsrs	r3, r3, #31
 8016ad6:	b2db      	uxtb	r3, r3
 8016ad8:	2b01      	cmp	r3, #1
 8016ada:	d14f      	bne.n	8016b7c <TaskGUI+0x134>
              && (0U != GUI_USER_Params[_instance].u.d.MeasReportValue))
 8016adc:	183b      	adds	r3, r7, r0
 8016ade:	781a      	ldrb	r2, [r3, #0]
 8016ae0:	4935      	ldr	r1, [pc, #212]	; (8016bb8 <TaskGUI+0x170>)
 8016ae2:	0013      	movs	r3, r2
 8016ae4:	005b      	lsls	r3, r3, #1
 8016ae6:	189b      	adds	r3, r3, r2
 8016ae8:	005b      	lsls	r3, r3, #1
 8016aea:	18cb      	adds	r3, r1, r3
 8016aec:	791b      	ldrb	r3, [r3, #4]
 8016aee:	065b      	lsls	r3, r3, #25
 8016af0:	0e5b      	lsrs	r3, r3, #25
 8016af2:	b2db      	uxtb	r3, r3
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d041      	beq.n	8016b7c <TaskGUI+0x134>
          {
            /* Check if timer has expired */
            if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 8016af8:	183b      	adds	r3, r7, r0
 8016afa:	781a      	ldrb	r2, [r3, #0]
 8016afc:	4b2f      	ldr	r3, [pc, #188]	; (8016bbc <TaskGUI+0x174>)
 8016afe:	0052      	lsls	r2, r2, #1
 8016b00:	5ad3      	ldrh	r3, [r2, r3]
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	2380      	movs	r3, #128	; 0x80
 8016b06:	021b      	lsls	r3, r3, #8
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	d109      	bne.n	8016b20 <TaskGUI+0xd8>
            {
              uint32_t event_mr = GUI_USER_EVENT_GUI
                                  | (_instance << GUI_PE_PORT_NUM_Pos)
 8016b0c:	183b      	adds	r3, r7, r0
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	061b      	lsls	r3, r3, #24
                                  | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 8016b12:	4a2b      	ldr	r2, [pc, #172]	; (8016bc0 <TaskGUI+0x178>)
 8016b14:	4313      	orrs	r3, r2
              uint32_t event_mr = GUI_USER_EVENT_GUI
 8016b16:	617b      	str	r3, [r7, #20]
              (void)GUI_RXProcess(event_mr);
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	0018      	movs	r0, r3
 8016b1c:	f000 f8cc 	bl	8016cb8 <GUI_RXProcess>
            }
            /* Start or Restart Measurement report timer */
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 8016b20:	201b      	movs	r0, #27
 8016b22:	183b      	adds	r3, r7, r0
 8016b24:	781a      	ldrb	r2, [r3, #0]
 8016b26:	4b25      	ldr	r3, [pc, #148]	; (8016bbc <TaskGUI+0x174>)
 8016b28:	0052      	lsls	r2, r2, #1
 8016b2a:	5ad3      	ldrh	r3, [r2, r3]
 8016b2c:	b29b      	uxth	r3, r3
 8016b2e:	045b      	lsls	r3, r3, #17
 8016b30:	0c5b      	lsrs	r3, r3, #17
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	dc29      	bgt.n	8016b8a <TaskGUI+0x142>
            {
              GUI_START_TIMER(_instance, GUI_TimerMeasReport,
 8016b36:	183b      	adds	r3, r7, r0
 8016b38:	781a      	ldrb	r2, [r3, #0]
 8016b3a:	491f      	ldr	r1, [pc, #124]	; (8016bb8 <TaskGUI+0x170>)
 8016b3c:	0013      	movs	r3, r2
 8016b3e:	005b      	lsls	r3, r3, #1
 8016b40:	189b      	adds	r3, r3, r2
 8016b42:	005b      	lsls	r3, r3, #1
 8016b44:	18cb      	adds	r3, r1, r3
 8016b46:	791b      	ldrb	r3, [r3, #4]
 8016b48:	065b      	lsls	r3, r3, #25
 8016b4a:	0e5b      	lsrs	r3, r3, #25
 8016b4c:	b2db      	uxtb	r3, r3
 8016b4e:	b29b      	uxth	r3, r3
 8016b50:	2228      	movs	r2, #40	; 0x28
 8016b52:	4353      	muls	r3, r2
 8016b54:	b29b      	uxth	r3, r3
 8016b56:	183a      	adds	r2, r7, r0
 8016b58:	7812      	ldrb	r2, [r2, #0]
 8016b5a:	491a      	ldr	r1, [pc, #104]	; (8016bc4 <TaskGUI+0x17c>)
 8016b5c:	430b      	orrs	r3, r1
 8016b5e:	b299      	uxth	r1, r3
 8016b60:	4b16      	ldr	r3, [pc, #88]	; (8016bbc <TaskGUI+0x174>)
 8016b62:	0052      	lsls	r2, r2, #1
 8016b64:	52d1      	strh	r1, [r2, r3]
 8016b66:	2300      	movs	r3, #0
 8016b68:	60bb      	str	r3, [r7, #8]
 8016b6a:	4b11      	ldr	r3, [pc, #68]	; (8016bb0 <TaskGUI+0x168>)
 8016b6c:	6818      	ldr	r0, [r3, #0]
 8016b6e:	2308      	movs	r3, #8
 8016b70:	18f9      	adds	r1, r7, r3
 8016b72:	2300      	movs	r3, #0
 8016b74:	2200      	movs	r2, #0
 8016b76:	f7f9 fbff 	bl	8010378 <osMessageQueuePut>
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 8016b7a:	e006      	b.n	8016b8a <TaskGUI+0x142>
            }
          }
          else
          {
            /* Stop measurement report timer */
            GUI_TimerMeasReport[_instance] = 0;
 8016b7c:	231b      	movs	r3, #27
 8016b7e:	18fb      	adds	r3, r7, r3
 8016b80:	781a      	ldrb	r2, [r3, #0]
 8016b82:	4b0e      	ldr	r3, [pc, #56]	; (8016bbc <TaskGUI+0x174>)
 8016b84:	0052      	lsls	r2, r2, #1
 8016b86:	2100      	movs	r1, #0
 8016b88:	52d1      	strh	r1, [r2, r3]
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 8016b8a:	211b      	movs	r1, #27
 8016b8c:	187b      	adds	r3, r7, r1
 8016b8e:	781a      	ldrb	r2, [r3, #0]
 8016b90:	187b      	adds	r3, r7, r1
 8016b92:	3201      	adds	r2, #1
 8016b94:	701a      	strb	r2, [r3, #0]
 8016b96:	231b      	movs	r3, #27
 8016b98:	18fb      	adds	r3, r7, r3
 8016b9a:	781b      	ldrb	r3, [r3, #0]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d083      	beq.n	8016aa8 <TaskGUI+0x60>
          }
        }
#if defined(_RTOS) || defined(USBPD_THREADX)
        break;
 8016ba0:	e000      	b.n	8016ba4 <TaskGUI+0x15c>
      }

      default:
        break;
 8016ba2:	46c0      	nop			; (mov r8, r8)
    }
    _timing = CheckGUITimers();
 8016ba4:	f000 f810 	bl	8016bc8 <CheckGUITimers>
 8016ba8:	0003      	movs	r3, r0
 8016baa:	61fb      	str	r3, [r7, #28]
  {
 8016bac:	e755      	b.n	8016a5a <TaskGUI+0x12>
 8016bae:	46c0      	nop			; (mov r8, r8)
 8016bb0:	20002ff0 	.word	0x20002ff0
 8016bb4:	20002d7c 	.word	0x20002d7c
 8016bb8:	20002de4 	.word	0x20002de4
 8016bbc:	20002de0 	.word	0x20002de0
 8016bc0:	00000711 	.word	0x00000711
 8016bc4:	ffff8000 	.word	0xffff8000

08016bc8 <CheckGUITimers>:
#endif /* _RTOS || USBPD_THREADX */
}

#if defined(_RTOS) || defined(USBPD_THREADX)
static uint32_t CheckGUITimers(void)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b084      	sub	sp, #16
 8016bcc:	af00      	add	r7, sp, #0
  uint32_t _timing = GUI_DEFAULT_WAIT;
 8016bce:	2301      	movs	r3, #1
 8016bd0:	425b      	negs	r3, r3
 8016bd2:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8016bd4:	230b      	movs	r3, #11
 8016bd6:	18fb      	adds	r3, r7, r3
 8016bd8:	2200      	movs	r2, #0
 8016bda:	701a      	strb	r2, [r3, #0]
 8016bdc:	e018      	b.n	8016c10 <CheckGUITimers+0x48>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = (uint32_t)(GUI_TimerMeasReport[instance]) & GUI_TIMER_READ_MSK;
 8016bde:	230b      	movs	r3, #11
 8016be0:	18fb      	adds	r3, r7, r3
 8016be2:	781a      	ldrb	r2, [r3, #0]
 8016be4:	4b0f      	ldr	r3, [pc, #60]	; (8016c24 <CheckGUITimers+0x5c>)
 8016be6:	0052      	lsls	r2, r2, #1
 8016be8:	5ad3      	ldrh	r3, [r2, r3]
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	045b      	lsls	r3, r3, #17
 8016bee:	0c5b      	lsrs	r3, r3, #17
 8016bf0:	607b      	str	r3, [r7, #4]
    if (_current_timing > 0U)
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d005      	beq.n	8016c04 <CheckGUITimers+0x3c>
    {
      if (_current_timing < _timing)
 8016bf8:	687a      	ldr	r2, [r7, #4]
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d201      	bcs.n	8016c04 <CheckGUITimers+0x3c>
      {
        _timing = _current_timing;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	60fb      	str	r3, [r7, #12]
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8016c04:	210b      	movs	r1, #11
 8016c06:	187b      	adds	r3, r7, r1
 8016c08:	781a      	ldrb	r2, [r3, #0]
 8016c0a:	187b      	adds	r3, r7, r1
 8016c0c:	3201      	adds	r2, #1
 8016c0e:	701a      	strb	r2, [r3, #0]
 8016c10:	230b      	movs	r3, #11
 8016c12:	18fb      	adds	r3, r7, r3
 8016c14:	781b      	ldrb	r3, [r3, #0]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d0e1      	beq.n	8016bde <CheckGUITimers+0x16>
      }
    }
  }
  return _timing;
 8016c1a:	68fb      	ldr	r3, [r7, #12]
}
 8016c1c:	0018      	movs	r0, r3
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	b004      	add	sp, #16
 8016c22:	bd80      	pop	{r7, pc}
 8016c24:	20002de0 	.word	0x20002de0

08016c28 <GUI_TimerCounter>:
#endif /* RTOS || USBPD_THREADX */

void GUI_TimerCounter(void)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1U == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 8016c2c:	4b0b      	ldr	r3, [pc, #44]	; (8016c5c <GUI_TimerCounter+0x34>)
 8016c2e:	791b      	ldrb	r3, [r3, #4]
 8016c30:	227f      	movs	r2, #127	; 0x7f
 8016c32:	4393      	bics	r3, r2
 8016c34:	b2db      	uxtb	r3, r3
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d00c      	beq.n	8016c54 <GUI_TimerCounter+0x2c>
  {
    if ((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0U)
 8016c3a:	4b09      	ldr	r3, [pc, #36]	; (8016c60 <GUI_TimerCounter+0x38>)
 8016c3c:	881b      	ldrh	r3, [r3, #0]
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	045b      	lsls	r3, r3, #17
 8016c42:	0c5b      	lsrs	r3, r3, #17
 8016c44:	d006      	beq.n	8016c54 <GUI_TimerCounter+0x2c>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 8016c46:	4b06      	ldr	r3, [pc, #24]	; (8016c60 <GUI_TimerCounter+0x38>)
 8016c48:	881b      	ldrh	r3, [r3, #0]
 8016c4a:	b29b      	uxth	r3, r3
 8016c4c:	3b01      	subs	r3, #1
 8016c4e:	b29a      	uxth	r2, r3
 8016c50:	4b03      	ldr	r3, [pc, #12]	; (8016c60 <GUI_TimerCounter+0x38>)
 8016c52:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !(_RTOS || USBPD_THREADX) && USE_STM32_UTILITY_OS) */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 8016c54:	46c0      	nop			; (mov r8, r8)
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	46c0      	nop			; (mov r8, r8)
 8016c5c:	20002de4 	.word	0x20002de4
 8016c60:	20002de0 	.word	0x20002de0

08016c64 <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b084      	sub	sp, #16
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	0002      	movs	r2, r0
 8016c6c:	1dfb      	adds	r3, r7, #7
 8016c6e:	701a      	strb	r2, [r3, #0]
 8016c70:	1dbb      	adds	r3, r7, #6
 8016c72:	1c0a      	adds	r2, r1, #0
 8016c74:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c76:	b672      	cpsid	i
}
 8016c78:	46c0      	nop			; (mov r8, r8)
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 8016c7a:	1dbb      	adds	r3, r7, #6
 8016c7c:	781a      	ldrb	r2, [r3, #0]
 8016c7e:	1dfb      	adds	r3, r7, #7
 8016c80:	781b      	ldrb	r3, [r3, #0]
 8016c82:	0011      	movs	r1, r2
 8016c84:	0018      	movs	r0, r3
 8016c86:	f000 f891 	bl	8016dac <GUI_GetMessage>
 8016c8a:	0003      	movs	r3, r0
 8016c8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8016c8e:	b662      	cpsie	i
}
 8016c90:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
  if (event == 1U)
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	2b01      	cmp	r3, #1
 8016c96:	d109      	bne.n	8016cac <GUI_CALLBACK_RX+0x48>
  {
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_GUI, 0U);
 8016c98:	2301      	movs	r3, #1
 8016c9a:	60bb      	str	r3, [r7, #8]
 8016c9c:	4b05      	ldr	r3, [pc, #20]	; (8016cb4 <GUI_CALLBACK_RX+0x50>)
 8016c9e:	6818      	ldr	r0, [r3, #0]
 8016ca0:	2308      	movs	r3, #8
 8016ca2:	18f9      	adds	r1, r7, r3
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	f7f9 fb66 	bl	8010378 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8016cac:	46c0      	nop			; (mov r8, r8)
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	b004      	add	sp, #16
 8016cb2:	bd80      	pop	{r7, pc}
 8016cb4:	20002ff0 	.word	0x20002ff0

08016cb8 <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 8016cb8:	b5b0      	push	{r4, r5, r7, lr}
 8016cba:	b086      	sub	sp, #24
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0U == (Event & GUI_PE_NOTIF_Msk))
 8016cc0:	687a      	ldr	r2, [r7, #4]
 8016cc2:	23ff      	movs	r3, #255	; 0xff
 8016cc4:	011b      	lsls	r3, r3, #4
 8016cc6:	4013      	ands	r3, r2
 8016cc8:	d11f      	bne.n	8016d0a <GUI_RXProcess+0x52>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 8016cca:	2515      	movs	r5, #21
 8016ccc:	197c      	adds	r4, r7, r5
 8016cce:	230f      	movs	r3, #15
 8016cd0:	18fa      	adds	r2, r7, r3
 8016cd2:	2310      	movs	r3, #16
 8016cd4:	18fb      	adds	r3, r7, r3
 8016cd6:	0011      	movs	r1, r2
 8016cd8:	0018      	movs	r0, r3
 8016cda:	f000 f96b 	bl	8016fb4 <GUI_SendAnswer>
 8016cde:	0003      	movs	r3, r0
 8016ce0:	7023      	strb	r3, [r4, #0]

    switch (state)
 8016ce2:	197b      	adds	r3, r7, r5
 8016ce4:	781b      	ldrb	r3, [r3, #0]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d039      	beq.n	8016d5e <GUI_RXProcess+0xa6>
 8016cea:	2b02      	cmp	r3, #2
 8016cec:	d104      	bne.n	8016cf8 <GUI_RXProcess+0x40>
    {
      case GUI_STATE_RESET:
        /* DPM_RESET_REQ received by the device */
        /* Save parameters in FLASH */
        (void)BSP_GUI_SaveDataInFlash();
 8016cee:	f7fe ff71 	bl	8015bd4 <BSP_GUI_SaveDataInFlash>
        HAL_NVIC_SystemReset();
 8016cf2:	f7f2 ffb8 	bl	8009c66 <HAL_NVIC_SystemReset>
        break;
 8016cf6:	e033      	b.n	8016d60 <GUI_RXProcess+0xa8>
      case GUI_STATE_INIT:
        /* DPM_INIT_REQ received by the device */
        break;
      default:
        /* Another GUI messages received by the device */
        TRACER_EMB_Add(msg, size);
 8016cf8:	693a      	ldr	r2, [r7, #16]
 8016cfa:	230f      	movs	r3, #15
 8016cfc:	18fb      	adds	r3, r7, r3
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	0019      	movs	r1, r3
 8016d02:	0010      	movs	r0, r2
 8016d04:	f002 fdf6 	bl	80198f4 <TRACER_EMB_Add>
        break;
 8016d08:	e02a      	b.n	8016d60 <GUI_RXProcess+0xa8>
    }
  }
  else
  {
    uint16_t type_event = ((uint16_t)Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	b29b      	uxth	r3, r3
 8016d0e:	091b      	lsrs	r3, r3, #4
 8016d10:	b29a      	uxth	r2, r3
 8016d12:	2016      	movs	r0, #22
 8016d14:	183b      	adds	r3, r7, r0
 8016d16:	21ff      	movs	r1, #255	; 0xff
 8016d18:	400a      	ands	r2, r1
 8016d1a:	801a      	strh	r2, [r3, #0]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 8016d1c:	183b      	adds	r3, r7, r0
 8016d1e:	881b      	ldrh	r3, [r3, #0]
 8016d20:	2b71      	cmp	r3, #113	; 0x71
 8016d22:	d10e      	bne.n	8016d42 <GUI_RXProcess+0x8a>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	0e1b      	lsrs	r3, r3, #24
 8016d28:	2203      	movs	r2, #3
 8016d2a:	4013      	ands	r3, r2
 8016d2c:	001c      	movs	r4, r3
 8016d2e:	f7f1 ff0b 	bl	8008b48 <HAL_GetTick>
 8016d32:	0002      	movs	r2, r0
 8016d34:	2380      	movs	r3, #128	; 0x80
 8016d36:	011b      	lsls	r3, r3, #4
 8016d38:	0019      	movs	r1, r3
 8016d3a:	0020      	movs	r0, r4
 8016d3c:	f000 f815 	bl	8016d6a <GUI_FormatAndSendNotification>
 8016d40:	e00e      	b.n	8016d60 <GUI_RXProcess+0xa8>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	0e1b      	lsrs	r3, r3, #24
 8016d46:	2203      	movs	r2, #3
 8016d48:	4013      	ands	r3, r2
 8016d4a:	0018      	movs	r0, r3
 8016d4c:	2316      	movs	r3, #22
 8016d4e:	18fb      	adds	r3, r7, r3
 8016d50:	881a      	ldrh	r2, [r3, #0]
 8016d52:	2380      	movs	r3, #128	; 0x80
 8016d54:	019b      	lsls	r3, r3, #6
 8016d56:	0019      	movs	r1, r3
 8016d58:	f000 f807 	bl	8016d6a <GUI_FormatAndSendNotification>
 8016d5c:	e000      	b.n	8016d60 <GUI_RXProcess+0xa8>
        break;
 8016d5e:	46c0      	nop			; (mov r8, r8)
                                          GUI_NOTIF_PE_EVENT,
                                          type_event);
    }
  }
  return 0;
 8016d60:	2300      	movs	r3, #0
}
 8016d62:	0018      	movs	r0, r3
 8016d64:	46bd      	mov	sp, r7
 8016d66:	b006      	add	sp, #24
 8016d68:	bdb0      	pop	{r4, r5, r7, pc}

08016d6a <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 8016d6a:	b5b0      	push	{r4, r5, r7, lr}
 8016d6c:	b088      	sub	sp, #32
 8016d6e:	af02      	add	r7, sp, #8
 8016d70:	60f8      	str	r0, [r7, #12]
 8016d72:	60b9      	str	r1, [r7, #8]
 8016d74:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification((uint8_t)PortNum, &msg, &size, TypeNotification, Value))
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	b2d8      	uxtb	r0, r3
 8016d7a:	68bc      	ldr	r4, [r7, #8]
 8016d7c:	2513      	movs	r5, #19
 8016d7e:	197a      	adds	r2, r7, r5
 8016d80:	2314      	movs	r3, #20
 8016d82:	18f9      	adds	r1, r7, r3
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	9300      	str	r3, [sp, #0]
 8016d88:	0023      	movs	r3, r4
 8016d8a:	f000 fa03 	bl	8017194 <GUI_SendNotification>
 8016d8e:	1e03      	subs	r3, r0, #0
 8016d90:	d006      	beq.n	8016da0 <GUI_FormatAndSendNotification+0x36>
  {
    TRACER_EMB_Add(msg, size);
 8016d92:	697a      	ldr	r2, [r7, #20]
 8016d94:	197b      	adds	r3, r7, r5
 8016d96:	781b      	ldrb	r3, [r3, #0]
 8016d98:	0019      	movs	r1, r3
 8016d9a:	0010      	movs	r0, r2
 8016d9c:	f002 fdaa 	bl	80198f4 <TRACER_EMB_Add>
  }
  return 0;
 8016da0:	2300      	movs	r3, #0
}
 8016da2:	0018      	movs	r0, r3
 8016da4:	46bd      	mov	sp, r7
 8016da6:	b006      	add	sp, #24
 8016da8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016dac <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b084      	sub	sp, #16
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	0002      	movs	r2, r0
 8016db4:	1dfb      	adds	r3, r7, #7
 8016db6:	701a      	strb	r2, [r3, #0]
 8016db8:	1dbb      	adds	r3, r7, #6
 8016dba:	1c0a      	adds	r2, r1, #0
 8016dbc:	701a      	strb	r2, [r3, #0]
  uint32_t status = 0;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if (cursor < TLV_SIZE_MAX)
 8016dc2:	4b76      	ldr	r3, [pc, #472]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016dc4:	881b      	ldrh	r3, [r3, #0]
 8016dc6:	2bff      	cmp	r3, #255	; 0xff
 8016dc8:	d80b      	bhi.n	8016de2 <GUI_GetMessage+0x36>
  {
    PtrDataRx[cursor] = Character;
 8016dca:	4b74      	ldr	r3, [pc, #464]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016dcc:	881b      	ldrh	r3, [r3, #0]
 8016dce:	0019      	movs	r1, r3
 8016dd0:	4b73      	ldr	r3, [pc, #460]	; (8016fa0 <GUI_GetMessage+0x1f4>)
 8016dd2:	1dfa      	adds	r2, r7, #7
 8016dd4:	7812      	ldrb	r2, [r2, #0]
 8016dd6:	545a      	strb	r2, [r3, r1]
    counter = 0U;
    Rstate = Rstart;
    return 0;
  }

  if (Error != 0U)
 8016dd8:	1dbb      	adds	r3, r7, #6
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d00e      	beq.n	8016dfe <GUI_GetMessage+0x52>
 8016de0:	e00a      	b.n	8016df8 <GUI_GetMessage+0x4c>
    cursor = 0U;
 8016de2:	4b6e      	ldr	r3, [pc, #440]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016de4:	2200      	movs	r2, #0
 8016de6:	801a      	strh	r2, [r3, #0]
    counter = 0U;
 8016de8:	4b6e      	ldr	r3, [pc, #440]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016dea:	2200      	movs	r2, #0
 8016dec:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 8016dee:	4b6e      	ldr	r3, [pc, #440]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016df0:	2200      	movs	r2, #0
 8016df2:	701a      	strb	r2, [r3, #0]
    return 0;
 8016df4:	2300      	movs	r3, #0
 8016df6:	e0cc      	b.n	8016f92 <GUI_GetMessage+0x1e6>
  {
    Rstate = Rerror;
 8016df8:	4b6b      	ldr	r3, [pc, #428]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016dfa:	2204      	movs	r2, #4
 8016dfc:	701a      	strb	r2, [r3, #0]
  }

  switch (Rstate)
 8016dfe:	4b6a      	ldr	r3, [pc, #424]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	2b04      	cmp	r3, #4
 8016e04:	d900      	bls.n	8016e08 <GUI_GetMessage+0x5c>
 8016e06:	e0b4      	b.n	8016f72 <GUI_GetMessage+0x1c6>
 8016e08:	009a      	lsls	r2, r3, #2
 8016e0a:	4b68      	ldr	r3, [pc, #416]	; (8016fac <GUI_GetMessage+0x200>)
 8016e0c:	18d3      	adds	r3, r2, r3
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	469f      	mov	pc, r3
  {
    case Rstart :
      if (PtrDataRx[cursor] == TLV_SOF)
 8016e12:	4b62      	ldr	r3, [pc, #392]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016e14:	881b      	ldrh	r3, [r3, #0]
 8016e16:	001a      	movs	r2, r3
 8016e18:	4b61      	ldr	r3, [pc, #388]	; (8016fa0 <GUI_GetMessage+0x1f4>)
 8016e1a:	5c9b      	ldrb	r3, [r3, r2]
 8016e1c:	2bfd      	cmp	r3, #253	; 0xfd
 8016e1e:	d106      	bne.n	8016e2e <GUI_GetMessage+0x82>
      {
        counter++;
 8016e20:	4b60      	ldr	r3, [pc, #384]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016e22:	881b      	ldrh	r3, [r3, #0]
 8016e24:	3301      	adds	r3, #1
 8016e26:	b29a      	uxth	r2, r3
 8016e28:	4b5e      	ldr	r3, [pc, #376]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016e2a:	801a      	strh	r2, [r3, #0]
 8016e2c:	e006      	b.n	8016e3c <GUI_GetMessage+0x90>
      }
      else
      {
        counter = 0U;
 8016e2e:	4b5d      	ldr	r3, [pc, #372]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016e30:	2200      	movs	r2, #0
 8016e32:	801a      	strh	r2, [r3, #0]
        /* cursor is unsigned, but it will inevitably increments at the end of function,
           and we need a 0 at the next pass here */
        cursor = 0xFFFFU;
 8016e34:	4b59      	ldr	r3, [pc, #356]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016e36:	2201      	movs	r2, #1
 8016e38:	4252      	negs	r2, r2
 8016e3a:	801a      	strh	r2, [r3, #0]
      }

      if (counter == 4U) /* The whole SOF is received */
 8016e3c:	4b59      	ldr	r3, [pc, #356]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016e3e:	881b      	ldrh	r3, [r3, #0]
 8016e40:	2b04      	cmp	r3, #4
 8016e42:	d000      	beq.n	8016e46 <GUI_GetMessage+0x9a>
 8016e44:	e097      	b.n	8016f76 <GUI_GetMessage+0x1ca>
      {
        counter = 0U;
 8016e46:	4b57      	ldr	r3, [pc, #348]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016e48:	2200      	movs	r2, #0
 8016e4a:	801a      	strh	r2, [r3, #0]
        Rstate = Rsize;
 8016e4c:	4b56      	ldr	r3, [pc, #344]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016e4e:	2202      	movs	r2, #2
 8016e50:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016e52:	e090      	b.n	8016f76 <GUI_GetMessage+0x1ca>
    case Rsize :
      counter++;
 8016e54:	4b53      	ldr	r3, [pc, #332]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016e56:	881b      	ldrh	r3, [r3, #0]
 8016e58:	3301      	adds	r3, #1
 8016e5a:	b29a      	uxth	r2, r3
 8016e5c:	4b51      	ldr	r3, [pc, #324]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016e5e:	801a      	strh	r2, [r3, #0]

      if (counter == 3U) /* We have received the size */
 8016e60:	4b50      	ldr	r3, [pc, #320]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016e62:	881b      	ldrh	r3, [r3, #0]
 8016e64:	2b03      	cmp	r3, #3
 8016e66:	d000      	beq.n	8016e6a <GUI_GetMessage+0xbe>
 8016e68:	e087      	b.n	8016f7a <GUI_GetMessage+0x1ce>
      {
        currentSize = (uint16_t)((PtrDataRx[cursor - 1U]) << 8) + (uint16_t)(PtrDataRx[cursor]);
 8016e6a:	4b4c      	ldr	r3, [pc, #304]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016e6c:	881b      	ldrh	r3, [r3, #0]
 8016e6e:	3b01      	subs	r3, #1
 8016e70:	4a4b      	ldr	r2, [pc, #300]	; (8016fa0 <GUI_GetMessage+0x1f4>)
 8016e72:	5cd3      	ldrb	r3, [r2, r3]
 8016e74:	b29b      	uxth	r3, r3
 8016e76:	021b      	lsls	r3, r3, #8
 8016e78:	b29a      	uxth	r2, r3
 8016e7a:	4b48      	ldr	r3, [pc, #288]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016e7c:	881b      	ldrh	r3, [r3, #0]
 8016e7e:	0019      	movs	r1, r3
 8016e80:	4b47      	ldr	r3, [pc, #284]	; (8016fa0 <GUI_GetMessage+0x1f4>)
 8016e82:	5c5b      	ldrb	r3, [r3, r1]
 8016e84:	b29b      	uxth	r3, r3
 8016e86:	18d3      	adds	r3, r2, r3
 8016e88:	b29a      	uxth	r2, r3
 8016e8a:	4b49      	ldr	r3, [pc, #292]	; (8016fb0 <GUI_GetMessage+0x204>)
 8016e8c:	801a      	strh	r2, [r3, #0]
        if (0U == currentSize)
 8016e8e:	4b48      	ldr	r3, [pc, #288]	; (8016fb0 <GUI_GetMessage+0x204>)
 8016e90:	881b      	ldrh	r3, [r3, #0]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d103      	bne.n	8016e9e <GUI_GetMessage+0xf2>
        {
          Rstate = Rend;
 8016e96:	4b44      	ldr	r3, [pc, #272]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016e98:	2203      	movs	r2, #3
 8016e9a:	701a      	strb	r2, [r3, #0]
 8016e9c:	e002      	b.n	8016ea4 <GUI_GetMessage+0xf8>
        }
        else
        {
          Rstate = RonGoing;
 8016e9e:	4b42      	ldr	r3, [pc, #264]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016ea0:	2201      	movs	r2, #1
 8016ea2:	701a      	strb	r2, [r3, #0]
        }
        counter = 0U;
 8016ea4:	4b3f      	ldr	r3, [pc, #252]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	801a      	strh	r2, [r3, #0]
      }
      break;
 8016eaa:	e066      	b.n	8016f7a <GUI_GetMessage+0x1ce>
    case RonGoing :
      counter++;
 8016eac:	4b3d      	ldr	r3, [pc, #244]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016eae:	881b      	ldrh	r3, [r3, #0]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	b29a      	uxth	r2, r3
 8016eb4:	4b3b      	ldr	r3, [pc, #236]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016eb6:	801a      	strh	r2, [r3, #0]

      if (counter == currentSize)
 8016eb8:	4b3a      	ldr	r3, [pc, #232]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016eba:	881a      	ldrh	r2, [r3, #0]
 8016ebc:	4b3c      	ldr	r3, [pc, #240]	; (8016fb0 <GUI_GetMessage+0x204>)
 8016ebe:	881b      	ldrh	r3, [r3, #0]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d15c      	bne.n	8016f7e <GUI_GetMessage+0x1d2>
      {
        /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
        counter = 0U;
 8016ec4:	4b37      	ldr	r3, [pc, #220]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	801a      	strh	r2, [r3, #0]
        Rstate = Rend;
 8016eca:	4b37      	ldr	r3, [pc, #220]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016ecc:	2203      	movs	r2, #3
 8016ece:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016ed0:	e055      	b.n	8016f7e <GUI_GetMessage+0x1d2>
    case Rend :
      counter++;
 8016ed2:	4b34      	ldr	r3, [pc, #208]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016ed4:	881b      	ldrh	r3, [r3, #0]
 8016ed6:	3301      	adds	r3, #1
 8016ed8:	b29a      	uxth	r2, r3
 8016eda:	4b32      	ldr	r3, [pc, #200]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016edc:	801a      	strh	r2, [r3, #0]
      if ((PtrDataRx[cursor] == TLV_EOF)
 8016ede:	4b2f      	ldr	r3, [pc, #188]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016ee0:	881b      	ldrh	r3, [r3, #0]
 8016ee2:	001a      	movs	r2, r3
 8016ee4:	4b2e      	ldr	r3, [pc, #184]	; (8016fa0 <GUI_GetMessage+0x1f4>)
 8016ee6:	5c9b      	ldrb	r3, [r3, r2]
 8016ee8:	2ba5      	cmp	r3, #165	; 0xa5
 8016eea:	d124      	bne.n	8016f36 <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 1U] == TLV_EOF)
 8016eec:	4b2b      	ldr	r3, [pc, #172]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016eee:	881b      	ldrh	r3, [r3, #0]
 8016ef0:	3b01      	subs	r3, #1
 8016ef2:	4a2b      	ldr	r2, [pc, #172]	; (8016fa0 <GUI_GetMessage+0x1f4>)
 8016ef4:	5cd3      	ldrb	r3, [r2, r3]
 8016ef6:	2ba5      	cmp	r3, #165	; 0xa5
 8016ef8:	d11d      	bne.n	8016f36 <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 2U] == TLV_EOF)
 8016efa:	4b28      	ldr	r3, [pc, #160]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016efc:	881b      	ldrh	r3, [r3, #0]
 8016efe:	3b02      	subs	r3, #2
 8016f00:	4a27      	ldr	r2, [pc, #156]	; (8016fa0 <GUI_GetMessage+0x1f4>)
 8016f02:	5cd3      	ldrb	r3, [r2, r3]
 8016f04:	2ba5      	cmp	r3, #165	; 0xa5
 8016f06:	d116      	bne.n	8016f36 <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 3U] == TLV_EOF))
 8016f08:	4b24      	ldr	r3, [pc, #144]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016f0a:	881b      	ldrh	r3, [r3, #0]
 8016f0c:	3b03      	subs	r3, #3
 8016f0e:	4a24      	ldr	r2, [pc, #144]	; (8016fa0 <GUI_GetMessage+0x1f4>)
 8016f10:	5cd3      	ldrb	r3, [r2, r3]
 8016f12:	2ba5      	cmp	r3, #165	; 0xa5
 8016f14:	d10f      	bne.n	8016f36 <GUI_GetMessage+0x18a>
      {
        /* The semaphore must be given only in this case, because otherwise
           it means we didn't receive the correct size of bytes */
        if (counter == 4U)
 8016f16:	4b23      	ldr	r3, [pc, #140]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016f18:	881b      	ldrh	r3, [r3, #0]
 8016f1a:	2b04      	cmp	r3, #4
 8016f1c:	d101      	bne.n	8016f22 <GUI_GetMessage+0x176>
        {
          status = 1U;
 8016f1e:	2301      	movs	r3, #1
 8016f20:	60fb      	str	r3, [r7, #12]
        }
        counter = 0U;
 8016f22:	4b20      	ldr	r3, [pc, #128]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016f24:	2200      	movs	r2, #0
 8016f26:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8016f28:	4b1c      	ldr	r3, [pc, #112]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016f2a:	2201      	movs	r2, #1
 8016f2c:	4252      	negs	r2, r2
 8016f2e:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 8016f30:	4b1d      	ldr	r3, [pc, #116]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016f32:	2200      	movs	r2, #0
 8016f34:	701a      	strb	r2, [r3, #0]
      }

      if (cursor == (currentSize + 11U))
 8016f36:	4b19      	ldr	r3, [pc, #100]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016f38:	881b      	ldrh	r3, [r3, #0]
 8016f3a:	001a      	movs	r2, r3
 8016f3c:	4b1c      	ldr	r3, [pc, #112]	; (8016fb0 <GUI_GetMessage+0x204>)
 8016f3e:	881b      	ldrh	r3, [r3, #0]
 8016f40:	330b      	adds	r3, #11
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d11d      	bne.n	8016f82 <GUI_GetMessage+0x1d6>
      {
        /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
        counter = 0U;
 8016f46:	4b17      	ldr	r3, [pc, #92]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016f48:	2200      	movs	r2, #0
 8016f4a:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8016f4c:	4b13      	ldr	r3, [pc, #76]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016f4e:	2201      	movs	r2, #1
 8016f50:	4252      	negs	r2, r2
 8016f52:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 8016f54:	4b14      	ldr	r3, [pc, #80]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016f56:	2200      	movs	r2, #0
 8016f58:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016f5a:	e012      	b.n	8016f82 <GUI_GetMessage+0x1d6>
    case Rerror :
      counter = 0U;
 8016f5c:	4b11      	ldr	r3, [pc, #68]	; (8016fa4 <GUI_GetMessage+0x1f8>)
 8016f5e:	2200      	movs	r2, #0
 8016f60:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFFU;
 8016f62:	4b0e      	ldr	r3, [pc, #56]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016f64:	2201      	movs	r2, #1
 8016f66:	4252      	negs	r2, r2
 8016f68:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 8016f6a:	4b0f      	ldr	r3, [pc, #60]	; (8016fa8 <GUI_GetMessage+0x1fc>)
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	701a      	strb	r2, [r3, #0]
      break;
 8016f70:	e008      	b.n	8016f84 <GUI_GetMessage+0x1d8>
    default:
      break;
 8016f72:	46c0      	nop			; (mov r8, r8)
 8016f74:	e006      	b.n	8016f84 <GUI_GetMessage+0x1d8>
      break;
 8016f76:	46c0      	nop			; (mov r8, r8)
 8016f78:	e004      	b.n	8016f84 <GUI_GetMessage+0x1d8>
      break;
 8016f7a:	46c0      	nop			; (mov r8, r8)
 8016f7c:	e002      	b.n	8016f84 <GUI_GetMessage+0x1d8>
      break;
 8016f7e:	46c0      	nop			; (mov r8, r8)
 8016f80:	e000      	b.n	8016f84 <GUI_GetMessage+0x1d8>
      break;
 8016f82:	46c0      	nop			; (mov r8, r8)
  }

  cursor++;
 8016f84:	4b05      	ldr	r3, [pc, #20]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016f86:	881b      	ldrh	r3, [r3, #0]
 8016f88:	3301      	adds	r3, #1
 8016f8a:	b29a      	uxth	r2, r3
 8016f8c:	4b03      	ldr	r3, [pc, #12]	; (8016f9c <GUI_GetMessage+0x1f0>)
 8016f8e:	801a      	strh	r2, [r3, #0]
  return status;
 8016f90:	68fb      	ldr	r3, [r7, #12]
}
 8016f92:	0018      	movs	r0, r3
 8016f94:	46bd      	mov	sp, r7
 8016f96:	b004      	add	sp, #16
 8016f98:	bd80      	pop	{r7, pc}
 8016f9a:	46c0      	nop			; (mov r8, r8)
 8016f9c:	2000307e 	.word	0x2000307e
 8016fa0:	20002dec 	.word	0x20002dec
 8016fa4:	20003080 	.word	0x20003080
 8016fa8:	20003082 	.word	0x20003082
 8016fac:	0801c508 	.word	0x0801c508
 8016fb0:	20003084 	.word	0x20003084

08016fb4 <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 8016fb4:	b590      	push	{r4, r7, lr}
 8016fb6:	b085      	sub	sp, #20
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
 8016fbc:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 8016fbe:	4b70      	ldr	r3, [pc, #448]	; (8017180 <GUI_SendAnswer+0x1cc>)
 8016fc0:	791a      	ldrb	r2, [r3, #4]
 8016fc2:	230f      	movs	r3, #15
 8016fc4:	18fb      	adds	r3, r7, r3
 8016fc6:	0952      	lsrs	r2, r2, #5
 8016fc8:	701a      	strb	r2, [r3, #0]

  /* Do the appropriate treatment in response to what we have received */
  switch (PtrDataRx[TLV_TAG_POSITION] & 0x1FU)
 8016fca:	4b6d      	ldr	r3, [pc, #436]	; (8017180 <GUI_SendAnswer+0x1cc>)
 8016fcc:	791b      	ldrb	r3, [r3, #4]
 8016fce:	001a      	movs	r2, r3
 8016fd0:	231f      	movs	r3, #31
 8016fd2:	4013      	ands	r3, r2
 8016fd4:	2b10      	cmp	r3, #16
 8016fd6:	d900      	bls.n	8016fda <GUI_SendAnswer+0x26>
 8016fd8:	e0be      	b.n	8017158 <GUI_SendAnswer+0x1a4>
 8016fda:	009a      	lsls	r2, r3, #2
 8016fdc:	4b69      	ldr	r3, [pc, #420]	; (8017184 <GUI_SendAnswer+0x1d0>)
 8016fde:	18d3      	adds	r3, r2, r3
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	469f      	mov	pc, r3
  {
    case DPM_RESET_REQ:
      /* Reset*/
      return GUI_STATE_RESET;
 8016fe4:	2302      	movs	r3, #2
 8016fe6:	e0c7      	b.n	8017178 <GUI_SendAnswer+0x1c4>

    case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 8016fe8:	4a67      	ldr	r2, [pc, #412]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8016fea:	240f      	movs	r4, #15
 8016fec:	193b      	adds	r3, r7, r4
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	0011      	movs	r1, r2
 8016ff2:	0018      	movs	r0, r3
 8016ff4:	f000 fe2c 	bl	8017c50 <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	4a63      	ldr	r2, [pc, #396]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8016ffc:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8016ffe:	4b62      	ldr	r3, [pc, #392]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8017000:	0018      	movs	r0, r3
 8017002:	f7ff fbe9 	bl	80167d8 <TLV_get_string_length>
 8017006:	0003      	movs	r3, r0
 8017008:	b2db      	uxtb	r3, r3
 801700a:	3308      	adds	r3, #8
 801700c:	b2da      	uxtb	r2, r3
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681a      	ldr	r2, [r3, #0]
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	781b      	ldrb	r3, [r3, #0]
 801701a:	0019      	movs	r1, r3
 801701c:	0010      	movs	r0, r2
 801701e:	f002 fc69 	bl	80198f4 <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 8017022:	4b5a      	ldr	r3, [pc, #360]	; (801718c <GUI_SendAnswer+0x1d8>)
 8017024:	2201      	movs	r2, #1
 8017026:	701a      	strb	r2, [r3, #0]
      if (0U == port)
 8017028:	193b      	adds	r3, r7, r4
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d105      	bne.n	801703c <GUI_SendAnswer+0x88>
      {
        /* Send a notification all the port */
        (void)GUI_FormatAndSendNotification(USBPD_PORT_0,
 8017030:	4b57      	ldr	r3, [pc, #348]	; (8017190 <GUI_SendAnswer+0x1dc>)
 8017032:	2270      	movs	r2, #112	; 0x70
 8017034:	0019      	movs	r1, r3
 8017036:	2000      	movs	r0, #0
 8017038:	f7ff fe97 	bl	8016d6a <GUI_FormatAndSendNotification>
        (void)GUI_FormatAndSendNotification(USBPD_PORT_1,
                                            GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP,
                                            USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 801703c:	2300      	movs	r3, #0
 801703e:	e09b      	b.n	8017178 <GUI_SendAnswer+0x1c4>
    }

    case DPM_CONFIG_GET_REQ:
      if (0U != port)
 8017040:	220f      	movs	r2, #15
 8017042:	18bb      	adds	r3, r7, r2
 8017044:	781b      	ldrb	r3, [r3, #0]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d009      	beq.n	801705e <GUI_SendAnswer+0xaa>
      {
        Send_DpmConfigGetCnf((port - 1U), PtrDataRx, Processed);
 801704a:	18bb      	adds	r3, r7, r2
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	3b01      	subs	r3, #1
 8017050:	b2db      	uxtb	r3, r3
 8017052:	4a4d      	ldr	r2, [pc, #308]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8017054:	494a      	ldr	r1, [pc, #296]	; (8017180 <GUI_SendAnswer+0x1cc>)
 8017056:	0018      	movs	r0, r3
 8017058:	f001 ff28 	bl	8018eac <Send_DpmConfigGetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801705c:	e07d      	b.n	801715a <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801705e:	494a      	ldr	r1, [pc, #296]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8017060:	230f      	movs	r3, #15
 8017062:	18fb      	adds	r3, r7, r3
 8017064:	781b      	ldrb	r3, [r3, #0]
 8017066:	2205      	movs	r2, #5
 8017068:	0018      	movs	r0, r3
 801706a:	f002 f9ff 	bl	801946c <Send_DpmConfigGetRej>
      break;
 801706e:	e074      	b.n	801715a <GUI_SendAnswer+0x1a6>
    case DPM_CONFIG_SET_REQ:
      if (0U != port)
 8017070:	220f      	movs	r2, #15
 8017072:	18bb      	adds	r3, r7, r2
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d009      	beq.n	801708e <GUI_SendAnswer+0xda>
      {
        Send_DpmConfigSetCnf((port - 1U), PtrDataRx, Processed);
 801707a:	18bb      	adds	r3, r7, r2
 801707c:	781b      	ldrb	r3, [r3, #0]
 801707e:	3b01      	subs	r3, #1
 8017080:	b2db      	uxtb	r3, r3
 8017082:	4a41      	ldr	r2, [pc, #260]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8017084:	493e      	ldr	r1, [pc, #248]	; (8017180 <GUI_SendAnswer+0x1cc>)
 8017086:	0018      	movs	r0, r3
 8017088:	f001 fad0 	bl	801862c <Send_DpmConfigSetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801708c:	e065      	b.n	801715a <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801708e:	493e      	ldr	r1, [pc, #248]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8017090:	230f      	movs	r3, #15
 8017092:	18fb      	adds	r3, r7, r3
 8017094:	781b      	ldrb	r3, [r3, #0]
 8017096:	2205      	movs	r2, #5
 8017098:	0018      	movs	r0, r3
 801709a:	f002 f9e7 	bl	801946c <Send_DpmConfigGetRej>
      break;
 801709e:	e05c      	b.n	801715a <GUI_SendAnswer+0x1a6>
    case DPM_MESSAGE_REQ:
      if (0U != port)
 80170a0:	220f      	movs	r2, #15
 80170a2:	18bb      	adds	r3, r7, r2
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d009      	beq.n	80170be <GUI_SendAnswer+0x10a>
      {
        Request_MessageReq((port - 1U), PtrDataRx, Processed);
 80170aa:	18bb      	adds	r3, r7, r2
 80170ac:	781b      	ldrb	r3, [r3, #0]
 80170ae:	3b01      	subs	r3, #1
 80170b0:	b2db      	uxtb	r3, r3
 80170b2:	4a35      	ldr	r2, [pc, #212]	; (8017188 <GUI_SendAnswer+0x1d4>)
 80170b4:	4932      	ldr	r1, [pc, #200]	; (8017180 <GUI_SendAnswer+0x1cc>)
 80170b6:	0018      	movs	r0, r3
 80170b8:	f000 ff78 	bl	8017fac <Request_MessageReq>
      }
      else
      {
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 80170bc:	e04d      	b.n	801715a <GUI_SendAnswer+0x1a6>
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 80170be:	4932      	ldr	r1, [pc, #200]	; (8017188 <GUI_SendAnswer+0x1d4>)
 80170c0:	230f      	movs	r3, #15
 80170c2:	18fb      	adds	r3, r7, r3
 80170c4:	781b      	ldrb	r3, [r3, #0]
 80170c6:	2205      	movs	r2, #5
 80170c8:	0018      	movs	r0, r3
 80170ca:	f002 f9f1 	bl	80194b0 <Send_DpmMessageRej>
      break;
 80170ce:	e044      	b.n	801715a <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_READ_REQ:
      if (0U != port)
 80170d0:	220f      	movs	r2, #15
 80170d2:	18bb      	adds	r3, r7, r2
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d01d      	beq.n	8017116 <GUI_SendAnswer+0x162>
      {
        /* If size is 0*/
        if ((PtrDataRx[TLV_LENGTH_HIGH_POSITION] == 0U) && (PtrDataRx[TLV_LENGTH_LOW_POSITION] == 0U))
 80170da:	4b29      	ldr	r3, [pc, #164]	; (8017180 <GUI_SendAnswer+0x1cc>)
 80170dc:	795b      	ldrb	r3, [r3, #5]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d10d      	bne.n	80170fe <GUI_SendAnswer+0x14a>
 80170e2:	4b27      	ldr	r3, [pc, #156]	; (8017180 <GUI_SendAnswer+0x1cc>)
 80170e4:	799b      	ldrb	r3, [r3, #6]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d109      	bne.n	80170fe <GUI_SendAnswer+0x14a>
        {
          Send_DpmRegisterReadCnf((port - 1U), Processed, 0xFF);
 80170ea:	18bb      	adds	r3, r7, r2
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	3b01      	subs	r3, #1
 80170f0:	b2db      	uxtb	r3, r3
 80170f2:	4925      	ldr	r1, [pc, #148]	; (8017188 <GUI_SendAnswer+0x1d4>)
 80170f4:	22ff      	movs	r2, #255	; 0xff
 80170f6:	0018      	movs	r0, r3
 80170f8:	f002 f9fc 	bl	80194f4 <Send_DpmRegisterReadCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 80170fc:	e02d      	b.n	801715a <GUI_SendAnswer+0x1a6>
          Send_DpmRegisterReadCnf((port - 1U), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 80170fe:	230f      	movs	r3, #15
 8017100:	18fb      	adds	r3, r7, r3
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	3b01      	subs	r3, #1
 8017106:	b2d8      	uxtb	r0, r3
 8017108:	4b1d      	ldr	r3, [pc, #116]	; (8017180 <GUI_SendAnswer+0x1cc>)
 801710a:	79da      	ldrb	r2, [r3, #7]
 801710c:	4b1e      	ldr	r3, [pc, #120]	; (8017188 <GUI_SendAnswer+0x1d4>)
 801710e:	0019      	movs	r1, r3
 8017110:	f002 f9f0 	bl	80194f4 <Send_DpmRegisterReadCnf>
      break;
 8017114:	e021      	b.n	801715a <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8017116:	491c      	ldr	r1, [pc, #112]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8017118:	230f      	movs	r3, #15
 801711a:	18fb      	adds	r3, r7, r3
 801711c:	781b      	ldrb	r3, [r3, #0]
 801711e:	2205      	movs	r2, #5
 8017120:	0018      	movs	r0, r3
 8017122:	f002 f9a3 	bl	801946c <Send_DpmConfigGetRej>
      break;
 8017126:	e018      	b.n	801715a <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_WRITE_REQ:
      if (0U != port)
 8017128:	220f      	movs	r2, #15
 801712a:	18bb      	adds	r3, r7, r2
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d009      	beq.n	8017146 <GUI_SendAnswer+0x192>
      {
        Send_DpmRegisterWriteCnf((port - 1U), Processed, PtrDataRx);
 8017132:	18bb      	adds	r3, r7, r2
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	3b01      	subs	r3, #1
 8017138:	b2db      	uxtb	r3, r3
 801713a:	4a11      	ldr	r2, [pc, #68]	; (8017180 <GUI_SendAnswer+0x1cc>)
 801713c:	4912      	ldr	r1, [pc, #72]	; (8017188 <GUI_SendAnswer+0x1d4>)
 801713e:	0018      	movs	r0, r3
 8017140:	f002 fa36 	bl	80195b0 <Send_DpmRegisterWriteCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8017144:	e009      	b.n	801715a <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8017146:	4910      	ldr	r1, [pc, #64]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8017148:	230f      	movs	r3, #15
 801714a:	18fb      	adds	r3, r7, r3
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	2205      	movs	r2, #5
 8017150:	0018      	movs	r0, r3
 8017152:	f002 f98b 	bl	801946c <Send_DpmConfigGetRej>
      break;
 8017156:	e000      	b.n	801715a <GUI_SendAnswer+0x1a6>
    default :
      break;
 8017158:	46c0      	nop			; (mov r8, r8)
  }

  *pMsgToSend = Processed;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	4a0a      	ldr	r2, [pc, #40]	; (8017188 <GUI_SendAnswer+0x1d4>)
 801715e:	601a      	str	r2, [r3, #0]
  *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8017160:	4b09      	ldr	r3, [pc, #36]	; (8017188 <GUI_SendAnswer+0x1d4>)
 8017162:	0018      	movs	r0, r3
 8017164:	f7ff fb38 	bl	80167d8 <TLV_get_string_length>
 8017168:	0003      	movs	r3, r0
 801716a:	b2db      	uxtb	r3, r3
 801716c:	3308      	adds	r3, #8
 801716e:	b2da      	uxtb	r2, r3
 8017170:	683b      	ldr	r3, [r7, #0]
 8017172:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 8017174:	4b05      	ldr	r3, [pc, #20]	; (801718c <GUI_SendAnswer+0x1d8>)
 8017176:	781b      	ldrb	r3, [r3, #0]
}
 8017178:	0018      	movs	r0, r3
 801717a:	46bd      	mov	sp, r7
 801717c:	b005      	add	sp, #20
 801717e:	bd90      	pop	{r4, r7, pc}
 8017180:	20002dec 	.word	0x20002dec
 8017184:	0801c51c 	.word	0x0801c51c
 8017188:	20002eec 	.word	0x20002eec
 801718c:	20002fec 	.word	0x20002fec
 8017190:	00006020 	.word	0x00006020

08017194 <GUI_SendNotification>:
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg,
                                     uint32_t TypeNotification, uint32_t Value)
{
 8017194:	b5b0      	push	{r4, r5, r7, lr}
 8017196:	b0a6      	sub	sp, #152	; 0x98
 8017198:	af00      	add	r7, sp, #0
 801719a:	60b9      	str	r1, [r7, #8]
 801719c:	607a      	str	r2, [r7, #4]
 801719e:	603b      	str	r3, [r7, #0]
 80171a0:	240f      	movs	r4, #15
 80171a2:	193b      	adds	r3, r7, r4
 80171a4:	1c02      	adds	r2, r0, #0
 80171a6:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 80171a8:	2397      	movs	r3, #151	; 0x97
 80171aa:	18fb      	adds	r3, r7, r3
 80171ac:	2200      	movs	r2, #0
 80171ae:	701a      	strb	r2, [r3, #0]

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 80171b0:	4bbf      	ldr	r3, [pc, #764]	; (80174b0 <GUI_SendNotification+0x31c>)
 80171b2:	781b      	ldrb	r3, [r3, #0]
 80171b4:	2b01      	cmp	r3, #1
 80171b6:	d001      	beq.n	80171bc <GUI_SendNotification+0x28>
 80171b8:	f000 fbe4 	bl	8017984 <GUI_SendNotification+0x7f0>
  {
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1U), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 80171bc:	193b      	adds	r3, r7, r4
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	3301      	adds	r3, #1
 80171c2:	b2db      	uxtb	r3, r3
 80171c4:	015b      	lsls	r3, r3, #5
 80171c6:	b2db      	uxtb	r3, r3
 80171c8:	220c      	movs	r2, #12
 80171ca:	4313      	orrs	r3, r2
 80171cc:	b2d9      	uxtb	r1, r3
 80171ce:	4bb9      	ldr	r3, [pc, #740]	; (80174b4 <GUI_SendNotification+0x320>)
 80171d0:	2280      	movs	r2, #128	; 0x80
 80171d2:	0052      	lsls	r2, r2, #1
 80171d4:	2584      	movs	r5, #132	; 0x84
 80171d6:	1978      	adds	r0, r7, r5
 80171d8:	f7ff f893 	bl	8016302 <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 80171dc:	683b      	ldr	r3, [r7, #0]
 80171de:	2220      	movs	r2, #32
 80171e0:	4013      	ands	r3, r2
 80171e2:	d100      	bne.n	80171e6 <GUI_SendNotification+0x52>
 80171e4:	e08d      	b.n	8017302 <GUI_SendNotification+0x16e>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                    (uint8_t[]){ DPM_Params[PortNum].PE_Power });
 80171e6:	193b      	adds	r3, r7, r4
 80171e8:	781b      	ldrb	r3, [r3, #0]
 80171ea:	4ab3      	ldr	r2, [pc, #716]	; (80174b8 <GUI_SendNotification+0x324>)
 80171ec:	009b      	lsls	r3, r3, #2
 80171ee:	18d3      	adds	r3, r2, r3
 80171f0:	785b      	ldrb	r3, [r3, #1]
 80171f2:	075b      	lsls	r3, r3, #29
 80171f4:	0f5b      	lsrs	r3, r3, #29
 80171f6:	b2db      	uxtb	r3, r3
 80171f8:	001a      	movs	r2, r3
 80171fa:	2180      	movs	r1, #128	; 0x80
 80171fc:	187b      	adds	r3, r7, r1
 80171fe:	701a      	strb	r2, [r3, #0]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 8017200:	187b      	adds	r3, r7, r1
 8017202:	1978      	adds	r0, r7, r5
 8017204:	2201      	movs	r2, #1
 8017206:	2105      	movs	r1, #5
 8017208:	f7ff f8de 	bl	80163c8 <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 801720c:	193b      	adds	r3, r7, r4
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	4aa9      	ldr	r2, [pc, #676]	; (80174b8 <GUI_SendNotification+0x324>)
 8017212:	009b      	lsls	r3, r3, #2
 8017214:	18d3      	adds	r3, r2, r3
 8017216:	785b      	ldrb	r3, [r3, #1]
 8017218:	06db      	lsls	r3, r3, #27
 801721a:	0fdb      	lsrs	r3, r3, #31
 801721c:	b2db      	uxtb	r3, r3
 801721e:	2b01      	cmp	r3, #1
 8017220:	d16f      	bne.n	8017302 <GUI_SendNotification+0x16e>
      {
        uint8_t rp_value;
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                      (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8017222:	193b      	adds	r3, r7, r4
 8017224:	781a      	ldrb	r2, [r3, #0]
 8017226:	4ba4      	ldr	r3, [pc, #656]	; (80174b8 <GUI_SendNotification+0x324>)
 8017228:	0092      	lsls	r2, r2, #2
 801722a:	5cd3      	ldrb	r3, [r2, r3]
 801722c:	061b      	lsls	r3, r3, #24
 801722e:	0f9b      	lsrs	r3, r3, #30
 8017230:	b2db      	uxtb	r3, r3
 8017232:	001a      	movs	r2, r3
 8017234:	217c      	movs	r1, #124	; 0x7c
 8017236:	187b      	adds	r3, r7, r1
 8017238:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 801723a:	187b      	adds	r3, r7, r1
 801723c:	1978      	adds	r0, r7, r5
 801723e:	2201      	movs	r2, #1
 8017240:	2106      	movs	r1, #6
 8017242:	f7ff f8c1 	bl	80163c8 <TLV_add>
        /* Power Role*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                      (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8017246:	193b      	adds	r3, r7, r4
 8017248:	781a      	ldrb	r2, [r3, #0]
 801724a:	4b9b      	ldr	r3, [pc, #620]	; (80174b8 <GUI_SendNotification+0x324>)
 801724c:	0092      	lsls	r2, r2, #2
 801724e:	5cd3      	ldrb	r3, [r2, r3]
 8017250:	075b      	lsls	r3, r3, #29
 8017252:	0fdb      	lsrs	r3, r3, #31
 8017254:	b2db      	uxtb	r3, r3
 8017256:	001a      	movs	r2, r3
 8017258:	2178      	movs	r1, #120	; 0x78
 801725a:	187b      	adds	r3, r7, r1
 801725c:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801725e:	187b      	adds	r3, r7, r1
 8017260:	1978      	adds	r0, r7, r5
 8017262:	2201      	movs	r2, #1
 8017264:	2108      	movs	r1, #8
 8017266:	f7ff f8af 	bl	80163c8 <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 801726a:	217f      	movs	r1, #127	; 0x7f
 801726c:	187b      	adds	r3, r7, r1
 801726e:	2203      	movs	r2, #3
 8017270:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 8017272:	187b      	adds	r3, r7, r1
 8017274:	1978      	adds	r0, r7, r5
 8017276:	2201      	movs	r2, #1
 8017278:	2109      	movs	r1, #9
 801727a:	f7ff f8a5 	bl	80163c8 <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 801727e:	193b      	adds	r3, r7, r4
 8017280:	781b      	ldrb	r3, [r3, #0]
 8017282:	4a8d      	ldr	r2, [pc, #564]	; (80174b8 <GUI_SendNotification+0x324>)
 8017284:	009b      	lsls	r3, r3, #2
 8017286:	18d3      	adds	r3, r2, r3
 8017288:	785b      	ldrb	r3, [r3, #1]
 801728a:	075b      	lsls	r3, r3, #29
 801728c:	0f5b      	lsrs	r3, r3, #29
 801728e:	b2db      	uxtb	r3, r3
 8017290:	2b03      	cmp	r3, #3
 8017292:	d136      	bne.n	8017302 <GUI_SendNotification+0x16e>
        {
          /* Data Role*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8017294:	193b      	adds	r3, r7, r4
 8017296:	781a      	ldrb	r2, [r3, #0]
 8017298:	4b87      	ldr	r3, [pc, #540]	; (80174b8 <GUI_SendNotification+0x324>)
 801729a:	0092      	lsls	r2, r2, #2
 801729c:	5cd3      	ldrb	r3, [r2, r3]
 801729e:	071b      	lsls	r3, r3, #28
 80172a0:	0fdb      	lsrs	r3, r3, #31
 80172a2:	b2db      	uxtb	r3, r3
 80172a4:	001a      	movs	r2, r3
 80172a6:	2174      	movs	r1, #116	; 0x74
 80172a8:	187b      	adds	r3, r7, r1
 80172aa:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80172ac:	187b      	adds	r3, r7, r1
 80172ae:	1978      	adds	r0, r7, r5
 80172b0:	2201      	movs	r2, #1
 80172b2:	2107      	movs	r1, #7
 80172b4:	f7ff f888 	bl	80163c8 <TLV_add>
          /* Vconn ON*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                        (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 80172b8:	193b      	adds	r3, r7, r4
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	4a7e      	ldr	r2, [pc, #504]	; (80174b8 <GUI_SendNotification+0x324>)
 80172be:	009b      	lsls	r3, r3, #2
 80172c0:	18d3      	adds	r3, r2, r3
 80172c2:	785b      	ldrb	r3, [r3, #1]
 80172c4:	061b      	lsls	r3, r3, #24
 80172c6:	0fdb      	lsrs	r3, r3, #31
 80172c8:	b2db      	uxtb	r3, r3
 80172ca:	001a      	movs	r2, r3
 80172cc:	2170      	movs	r1, #112	; 0x70
 80172ce:	187b      	adds	r3, r7, r1
 80172d0:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 80172d2:	187b      	adds	r3, r7, r1
 80172d4:	1978      	adds	r0, r7, r5
 80172d6:	2201      	movs	r2, #1
 80172d8:	210a      	movs	r1, #10
 80172da:	f7ff f875 	bl	80163c8 <TLV_add>
          /* PD_Spec Revision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 80172de:	193b      	adds	r3, r7, r4
 80172e0:	781a      	ldrb	r2, [r3, #0]
 80172e2:	4b75      	ldr	r3, [pc, #468]	; (80174b8 <GUI_SendNotification+0x324>)
 80172e4:	0092      	lsls	r2, r2, #2
 80172e6:	5cd3      	ldrb	r3, [r2, r3]
 80172e8:	079b      	lsls	r3, r3, #30
 80172ea:	0f9b      	lsrs	r3, r3, #30
 80172ec:	b2db      	uxtb	r3, r3
 80172ee:	001a      	movs	r2, r3
 80172f0:	216c      	movs	r1, #108	; 0x6c
 80172f2:	187b      	adds	r3, r7, r1
 80172f4:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80172f6:	187b      	adds	r3, r7, r1
 80172f8:	1978      	adds	r0, r7, r5
 80172fa:	2201      	movs	r2, #1
 80172fc:	210d      	movs	r1, #13
 80172fe:	f7ff f863 	bl	80163c8 <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 8017302:	683a      	ldr	r2, [r7, #0]
 8017304:	2380      	movs	r3, #128	; 0x80
 8017306:	019b      	lsls	r3, r3, #6
 8017308:	4013      	ands	r3, r2
 801730a:	d100      	bne.n	801730e <GUI_SendNotification+0x17a>
 801730c:	e27d      	b.n	801780a <GUI_SendNotification+0x676>
    {
      if ((uint32_t)USBPD_NOTIFY_ALL != Value)
 801730e:	22a0      	movs	r2, #160	; 0xa0
 8017310:	2108      	movs	r1, #8
 8017312:	1853      	adds	r3, r2, r1
 8017314:	19db      	adds	r3, r3, r7
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	2b70      	cmp	r3, #112	; 0x70
 801731a:	d100      	bne.n	801731e <GUI_SendNotification+0x18a>
 801731c:	e1c1      	b.n	80176a2 <GUI_SendNotification+0x50e>
      {
        /* PD_MessageNotif */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t *)&Value);
 801731e:	2384      	movs	r3, #132	; 0x84
 8017320:	18f8      	adds	r0, r7, r3
 8017322:	0014      	movs	r4, r2
 8017324:	000d      	movs	r5, r1
 8017326:	1853      	adds	r3, r2, r1
 8017328:	19db      	adds	r3, r3, r7
 801732a:	2201      	movs	r2, #1
 801732c:	210e      	movs	r1, #14
 801732e:	f7ff f84b 	bl	80163c8 <TLV_add>

        switch (Value)
 8017332:	0022      	movs	r2, r4
 8017334:	1953      	adds	r3, r2, r5
 8017336:	19db      	adds	r3, r3, r7
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	2b42      	cmp	r3, #66	; 0x42
 801733c:	d80b      	bhi.n	8017356 <GUI_SendNotification+0x1c2>
 801733e:	2b07      	cmp	r3, #7
 8017340:	d200      	bcs.n	8017344 <GUI_SendNotification+0x1b0>
 8017342:	e25b      	b.n	80177fc <GUI_SendNotification+0x668>
 8017344:	3b07      	subs	r3, #7
 8017346:	2b3b      	cmp	r3, #59	; 0x3b
 8017348:	d900      	bls.n	801734c <GUI_SendNotification+0x1b8>
 801734a:	e257      	b.n	80177fc <GUI_SendNotification+0x668>
 801734c:	009a      	lsls	r2, r3, #2
 801734e:	4b5b      	ldr	r3, [pc, #364]	; (80174bc <GUI_SendNotification+0x328>)
 8017350:	18d3      	adds	r3, r2, r3
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	469f      	mov	pc, r3
 8017356:	2b5a      	cmp	r3, #90	; 0x5a
 8017358:	d000      	beq.n	801735c <GUI_SendNotification+0x1c8>
 801735a:	e24f      	b.n	80177fc <GUI_SendNotification+0x668>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 801735c:	240f      	movs	r4, #15
 801735e:	193b      	adds	r3, r7, r4
 8017360:	781b      	ldrb	r3, [r3, #0]
 8017362:	4a55      	ldr	r2, [pc, #340]	; (80174b8 <GUI_SendNotification+0x324>)
 8017364:	009b      	lsls	r3, r3, #2
 8017366:	18d3      	adds	r3, r2, r3
 8017368:	785b      	ldrb	r3, [r3, #1]
 801736a:	075b      	lsls	r3, r3, #29
 801736c:	0f5b      	lsrs	r3, r3, #29
 801736e:	b2db      	uxtb	r3, r3
 8017370:	001a      	movs	r2, r3
 8017372:	2168      	movs	r1, #104	; 0x68
 8017374:	187b      	adds	r3, r7, r1
 8017376:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 8017378:	187b      	adds	r3, r7, r1
 801737a:	2584      	movs	r5, #132	; 0x84
 801737c:	1978      	adds	r0, r7, r5
 801737e:	2201      	movs	r2, #1
 8017380:	2105      	movs	r1, #5
 8017382:	f7ff f821 	bl	80163c8 <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8017386:	193b      	adds	r3, r7, r4
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	4a4b      	ldr	r2, [pc, #300]	; (80174b8 <GUI_SendNotification+0x324>)
 801738c:	009b      	lsls	r3, r3, #2
 801738e:	18d3      	adds	r3, r2, r3
 8017390:	785b      	ldrb	r3, [r3, #1]
 8017392:	075b      	lsls	r3, r3, #29
 8017394:	0f5b      	lsrs	r3, r3, #29
 8017396:	b2db      	uxtb	r3, r3
 8017398:	2b00      	cmp	r3, #0
 801739a:	d000      	beq.n	801739e <GUI_SendNotification+0x20a>
 801739c:	e234      	b.n	8017808 <GUI_SendNotification+0x674>
            {
              /* CC line */
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                            (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801739e:	193b      	adds	r3, r7, r4
 80173a0:	781a      	ldrb	r2, [r3, #0]
 80173a2:	4b45      	ldr	r3, [pc, #276]	; (80174b8 <GUI_SendNotification+0x324>)
 80173a4:	0092      	lsls	r2, r2, #2
 80173a6:	5cd3      	ldrb	r3, [r2, r3]
 80173a8:	061b      	lsls	r3, r3, #24
 80173aa:	0f9b      	lsrs	r3, r3, #30
 80173ac:	b2db      	uxtb	r3, r3
 80173ae:	001a      	movs	r2, r3
 80173b0:	2138      	movs	r1, #56	; 0x38
 80173b2:	187b      	adds	r3, r7, r1
 80173b4:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 80173b6:	187b      	adds	r3, r7, r1
 80173b8:	1978      	adds	r0, r7, r5
 80173ba:	2201      	movs	r2, #1
 80173bc:	2106      	movs	r1, #6
 80173be:	f7ff f803 	bl	80163c8 <TLV_add>
              /* PowerRole*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                            (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80173c2:	193b      	adds	r3, r7, r4
 80173c4:	781a      	ldrb	r2, [r3, #0]
 80173c6:	4b3c      	ldr	r3, [pc, #240]	; (80174b8 <GUI_SendNotification+0x324>)
 80173c8:	0092      	lsls	r2, r2, #2
 80173ca:	5cd3      	ldrb	r3, [r2, r3]
 80173cc:	075b      	lsls	r3, r3, #29
 80173ce:	0fdb      	lsrs	r3, r3, #31
 80173d0:	b2db      	uxtb	r3, r3
 80173d2:	001a      	movs	r2, r3
 80173d4:	2134      	movs	r1, #52	; 0x34
 80173d6:	187b      	adds	r3, r7, r1
 80173d8:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 80173da:	187b      	adds	r3, r7, r1
 80173dc:	1978      	adds	r0, r7, r5
 80173de:	2201      	movs	r2, #1
 80173e0:	2108      	movs	r1, #8
 80173e2:	f7fe fff1 	bl	80163c8 <TLV_add>
            }
            break;
 80173e6:	e20f      	b.n	8017808 <GUI_SendNotification+0x674>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO
 80173e8:	240f      	movs	r4, #15
 80173ea:	193b      	adds	r3, r7, r4
 80173ec:	781a      	ldrb	r2, [r3, #0]
 80173ee:	4934      	ldr	r1, [pc, #208]	; (80174c0 <GUI_SendNotification+0x32c>)
 80173f0:	0013      	movs	r3, r2
 80173f2:	00db      	lsls	r3, r3, #3
 80173f4:	1a9b      	subs	r3, r3, r2
 80173f6:	011b      	lsls	r3, r3, #4
 80173f8:	18cb      	adds	r3, r1, r3
 80173fa:	333c      	adds	r3, #60	; 0x3c
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	b2da      	uxtb	r2, r3
 8017400:	2164      	movs	r1, #100	; 0x64
 8017402:	187b      	adds	r3, r7, r1
 8017404:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 8017406:	187b      	adds	r3, r7, r1
 8017408:	2584      	movs	r5, #132	; 0x84
 801740a:	1978      	adds	r0, r7, r5
 801740c:	2201      	movs	r2, #1
 801740e:	2100      	movs	r1, #0
 8017410:	f7fe ffda 	bl	80163c8 <TLV_add>
            });
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 8017414:	193b      	adds	r3, r7, r4
 8017416:	781a      	ldrb	r2, [r3, #0]
 8017418:	4929      	ldr	r1, [pc, #164]	; (80174c0 <GUI_SendNotification+0x32c>)
 801741a:	0013      	movs	r3, r2
 801741c:	00db      	lsls	r3, r3, #3
 801741e:	1a9b      	subs	r3, r3, r2
 8017420:	011b      	lsls	r3, r3, #4
 8017422:	18cb      	adds	r3, r1, r3
 8017424:	333c      	adds	r3, #60	; 0x3c
 8017426:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8017428:	b29b      	uxth	r3, r3
 801742a:	009b      	lsls	r3, r3, #2
 801742c:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 801742e:	193b      	adds	r3, r7, r4
 8017430:	781a      	ldrb	r2, [r3, #0]
 8017432:	0013      	movs	r3, r2
 8017434:	00db      	lsls	r3, r3, #3
 8017436:	1a9b      	subs	r3, r3, r2
 8017438:	011b      	lsls	r3, r3, #4
 801743a:	3320      	adds	r3, #32
 801743c:	001a      	movs	r2, r3
 801743e:	4b20      	ldr	r3, [pc, #128]	; (80174c0 <GUI_SendNotification+0x32c>)
 8017440:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8017442:	1978      	adds	r0, r7, r5
 8017444:	000a      	movs	r2, r1
 8017446:	2104      	movs	r1, #4
 8017448:	f7fe ffbe 	bl	80163c8 <TLV_add>
            break;
 801744c:	e1dd      	b.n	801780a <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 801744e:	240f      	movs	r4, #15
 8017450:	193b      	adds	r3, r7, r4
 8017452:	781a      	ldrb	r2, [r3, #0]
 8017454:	491a      	ldr	r1, [pc, #104]	; (80174c0 <GUI_SendNotification+0x32c>)
 8017456:	0013      	movs	r3, r2
 8017458:	00db      	lsls	r3, r3, #3
 801745a:	1a9b      	subs	r3, r3, r2
 801745c:	011b      	lsls	r3, r3, #4
 801745e:	18cb      	adds	r3, r1, r3
 8017460:	331c      	adds	r3, #28
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	b2da      	uxtb	r2, r3
 8017466:	2160      	movs	r1, #96	; 0x60
 8017468:	187b      	adds	r3, r7, r1
 801746a:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 801746c:	187b      	adds	r3, r7, r1
 801746e:	2584      	movs	r5, #132	; 0x84
 8017470:	1978      	adds	r0, r7, r5
 8017472:	2201      	movs	r2, #1
 8017474:	2103      	movs	r1, #3
 8017476:	f7fe ffa7 	bl	80163c8 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 801747a:	193b      	adds	r3, r7, r4
 801747c:	781a      	ldrb	r2, [r3, #0]
 801747e:	4910      	ldr	r1, [pc, #64]	; (80174c0 <GUI_SendNotification+0x32c>)
 8017480:	0013      	movs	r3, r2
 8017482:	00db      	lsls	r3, r3, #3
 8017484:	1a9b      	subs	r3, r3, r2
 8017486:	011b      	lsls	r3, r3, #4
 8017488:	18cb      	adds	r3, r1, r3
 801748a:	331c      	adds	r3, #28
 801748c:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801748e:	b29b      	uxth	r3, r3
 8017490:	009b      	lsls	r3, r3, #2
 8017492:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8017494:	193b      	adds	r3, r7, r4
 8017496:	781a      	ldrb	r2, [r3, #0]
 8017498:	0013      	movs	r3, r2
 801749a:	00db      	lsls	r3, r3, #3
 801749c:	1a9b      	subs	r3, r3, r2
 801749e:	011b      	lsls	r3, r3, #4
 80174a0:	4a07      	ldr	r2, [pc, #28]	; (80174c0 <GUI_SendNotification+0x32c>)
 80174a2:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 80174a4:	1978      	adds	r0, r7, r5
 80174a6:	000a      	movs	r2, r1
 80174a8:	2102      	movs	r1, #2
 80174aa:	f7fe ff8d 	bl	80163c8 <TLV_add>
            break;
 80174ae:	e1ac      	b.n	801780a <GUI_SendNotification+0x676>
 80174b0:	20002fec 	.word	0x20002fec
 80174b4:	20002eec 	.word	0x20002eec
 80174b8:	20002d7c 	.word	0x20002d7c
 80174bc:	0801c560 	.word	0x0801c560
 80174c0:	2000300c 	.word	0x2000300c
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 80174c4:	240f      	movs	r4, #15
 80174c6:	193b      	adds	r3, r7, r4
 80174c8:	781a      	ldrb	r2, [r3, #0]
 80174ca:	4bcd      	ldr	r3, [pc, #820]	; (8017800 <GUI_SendNotification+0x66c>)
 80174cc:	0092      	lsls	r2, r2, #2
 80174ce:	5cd3      	ldrb	r3, [r2, r3]
 80174d0:	075b      	lsls	r3, r3, #29
 80174d2:	0fdb      	lsrs	r3, r3, #31
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d12e      	bne.n	8017538 <GUI_SendNotification+0x3a4>
            {
              /* NumberOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                            (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 80174da:	193b      	adds	r3, r7, r4
 80174dc:	781a      	ldrb	r2, [r3, #0]
 80174de:	49c9      	ldr	r1, [pc, #804]	; (8017804 <GUI_SendNotification+0x670>)
 80174e0:	0013      	movs	r3, r2
 80174e2:	00db      	lsls	r3, r3, #3
 80174e4:	1a9b      	subs	r3, r3, r2
 80174e6:	011b      	lsls	r3, r3, #4
 80174e8:	18cb      	adds	r3, r1, r3
 80174ea:	331c      	adds	r3, #28
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	b2da      	uxtb	r2, r3
 80174f0:	2130      	movs	r1, #48	; 0x30
 80174f2:	187b      	adds	r3, r7, r1
 80174f4:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 80174f6:	187b      	adds	r3, r7, r1
 80174f8:	2584      	movs	r5, #132	; 0x84
 80174fa:	1978      	adds	r0, r7, r5
 80174fc:	2201      	movs	r2, #1
 80174fe:	2103      	movs	r1, #3
 8017500:	f7fe ff62 	bl	80163c8 <TLV_add>
              /* ListOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                            (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 8017504:	193b      	adds	r3, r7, r4
 8017506:	781a      	ldrb	r2, [r3, #0]
 8017508:	49be      	ldr	r1, [pc, #760]	; (8017804 <GUI_SendNotification+0x670>)
 801750a:	0013      	movs	r3, r2
 801750c:	00db      	lsls	r3, r3, #3
 801750e:	1a9b      	subs	r3, r3, r2
 8017510:	011b      	lsls	r3, r3, #4
 8017512:	18cb      	adds	r3, r1, r3
 8017514:	331c      	adds	r3, #28
 8017516:	681b      	ldr	r3, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8017518:	b29b      	uxth	r3, r3
 801751a:	009b      	lsls	r3, r3, #2
 801751c:	b299      	uxth	r1, r3
                            (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 801751e:	193b      	adds	r3, r7, r4
 8017520:	781a      	ldrb	r2, [r3, #0]
 8017522:	0013      	movs	r3, r2
 8017524:	00db      	lsls	r3, r3, #3
 8017526:	1a9b      	subs	r3, r3, r2
 8017528:	011b      	lsls	r3, r3, #4
 801752a:	4ab6      	ldr	r2, [pc, #728]	; (8017804 <GUI_SendNotification+0x670>)
 801752c:	189b      	adds	r3, r3, r2
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801752e:	1978      	adds	r0, r7, r5
 8017530:	000a      	movs	r2, r1
 8017532:	2102      	movs	r1, #2
 8017534:	f7fe ff48 	bl	80163c8 <TLV_add>
            }
            /* RDOPosition */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 8017538:	240f      	movs	r4, #15
 801753a:	193b      	adds	r3, r7, r4
 801753c:	781a      	ldrb	r2, [r3, #0]
 801753e:	49b1      	ldr	r1, [pc, #708]	; (8017804 <GUI_SendNotification+0x670>)
 8017540:	0013      	movs	r3, r2
 8017542:	00db      	lsls	r3, r3, #3
 8017544:	1a9b      	subs	r3, r3, r2
 8017546:	011b      	lsls	r3, r3, #4
 8017548:	18cb      	adds	r3, r1, r3
 801754a:	3340      	adds	r3, #64	; 0x40
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	b2da      	uxtb	r2, r3
 8017550:	215c      	movs	r1, #92	; 0x5c
 8017552:	187b      	adds	r3, r7, r1
 8017554:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 8017556:	187b      	adds	r3, r7, r1
 8017558:	2584      	movs	r5, #132	; 0x84
 801755a:	1978      	adds	r0, r7, r5
 801755c:	2201      	movs	r2, #1
 801755e:	2101      	movs	r1, #1
 8017560:	f7fe ff32 	bl	80163c8 <TLV_add>
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8017564:	193b      	adds	r3, r7, r4
 8017566:	781a      	ldrb	r2, [r3, #0]
 8017568:	4ba5      	ldr	r3, [pc, #660]	; (8017800 <GUI_SendNotification+0x66c>)
 801756a:	0092      	lsls	r2, r2, #2
 801756c:	5cd3      	ldrb	r3, [r2, r3]
 801756e:	071b      	lsls	r3, r3, #28
 8017570:	0fdb      	lsrs	r3, r3, #31
 8017572:	b2db      	uxtb	r3, r3
 8017574:	001a      	movs	r2, r3
 8017576:	2158      	movs	r1, #88	; 0x58
 8017578:	187b      	adds	r3, r7, r1
 801757a:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 801757c:	187b      	adds	r3, r7, r1
 801757e:	1978      	adds	r0, r7, r5
 8017580:	2201      	movs	r2, #1
 8017582:	2107      	movs	r1, #7
 8017584:	f7fe ff20 	bl	80163c8 <TLV_add>
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8017588:	193b      	adds	r3, r7, r4
 801758a:	781a      	ldrb	r2, [r3, #0]
 801758c:	4b9c      	ldr	r3, [pc, #624]	; (8017800 <GUI_SendNotification+0x66c>)
 801758e:	0092      	lsls	r2, r2, #2
 8017590:	5cd3      	ldrb	r3, [r2, r3]
 8017592:	075b      	lsls	r3, r3, #29
 8017594:	0fdb      	lsrs	r3, r3, #31
 8017596:	b2db      	uxtb	r3, r3
 8017598:	001a      	movs	r2, r3
 801759a:	2154      	movs	r1, #84	; 0x54
 801759c:	187b      	adds	r3, r7, r1
 801759e:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 80175a0:	187b      	adds	r3, r7, r1
 80175a2:	1978      	adds	r0, r7, r5
 80175a4:	2201      	movs	r2, #1
 80175a6:	2108      	movs	r1, #8
 80175a8:	f7fe ff0e 	bl	80163c8 <TLV_add>
            /* VconnON*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 80175ac:	193b      	adds	r3, r7, r4
 80175ae:	781b      	ldrb	r3, [r3, #0]
 80175b0:	4a93      	ldr	r2, [pc, #588]	; (8017800 <GUI_SendNotification+0x66c>)
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	18d3      	adds	r3, r2, r3
 80175b6:	785b      	ldrb	r3, [r3, #1]
 80175b8:	061b      	lsls	r3, r3, #24
 80175ba:	0fdb      	lsrs	r3, r3, #31
 80175bc:	b2db      	uxtb	r3, r3
 80175be:	001a      	movs	r2, r3
 80175c0:	2150      	movs	r1, #80	; 0x50
 80175c2:	187b      	adds	r3, r7, r1
 80175c4:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 80175c6:	187b      	adds	r3, r7, r1
 80175c8:	1978      	adds	r0, r7, r5
 80175ca:	2201      	movs	r2, #1
 80175cc:	210a      	movs	r1, #10
 80175ce:	f7fe fefb 	bl	80163c8 <TLV_add>
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 80175d2:	193b      	adds	r3, r7, r4
 80175d4:	781a      	ldrb	r2, [r3, #0]
 80175d6:	4b8a      	ldr	r3, [pc, #552]	; (8017800 <GUI_SendNotification+0x66c>)
 80175d8:	0092      	lsls	r2, r2, #2
 80175da:	5cd3      	ldrb	r3, [r2, r3]
 80175dc:	079b      	lsls	r3, r3, #30
 80175de:	0f9b      	lsrs	r3, r3, #30
 80175e0:	b2db      	uxtb	r3, r3
 80175e2:	001a      	movs	r2, r3
 80175e4:	214c      	movs	r1, #76	; 0x4c
 80175e6:	187b      	adds	r3, r7, r1
 80175e8:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80175ea:	187b      	adds	r3, r7, r1
 80175ec:	1978      	adds	r0, r7, r5
 80175ee:	2201      	movs	r2, #1
 80175f0:	210d      	movs	r1, #13
 80175f2:	f7fe fee9 	bl	80163c8 <TLV_add>
            break;
 80175f6:	e108      	b.n	801780a <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80175f8:	230f      	movs	r3, #15
 80175fa:	18fb      	adds	r3, r7, r3
 80175fc:	781a      	ldrb	r2, [r3, #0]
 80175fe:	4b80      	ldr	r3, [pc, #512]	; (8017800 <GUI_SendNotification+0x66c>)
 8017600:	0092      	lsls	r2, r2, #2
 8017602:	5cd3      	ldrb	r3, [r2, r3]
 8017604:	075b      	lsls	r3, r3, #29
 8017606:	0fdb      	lsrs	r3, r3, #31
 8017608:	b2db      	uxtb	r3, r3
 801760a:	001a      	movs	r2, r3
 801760c:	2148      	movs	r1, #72	; 0x48
 801760e:	187b      	adds	r3, r7, r1
 8017610:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8017612:	187b      	adds	r3, r7, r1
 8017614:	2284      	movs	r2, #132	; 0x84
 8017616:	18b8      	adds	r0, r7, r2
 8017618:	2201      	movs	r2, #1
 801761a:	2108      	movs	r1, #8
 801761c:	f7fe fed4 	bl	80163c8 <TLV_add>
            break;
 8017620:	e0f3      	b.n	801780a <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8017622:	230f      	movs	r3, #15
 8017624:	18fb      	adds	r3, r7, r3
 8017626:	781a      	ldrb	r2, [r3, #0]
 8017628:	4b75      	ldr	r3, [pc, #468]	; (8017800 <GUI_SendNotification+0x66c>)
 801762a:	0092      	lsls	r2, r2, #2
 801762c:	5cd3      	ldrb	r3, [r2, r3]
 801762e:	071b      	lsls	r3, r3, #28
 8017630:	0fdb      	lsrs	r3, r3, #31
 8017632:	b2db      	uxtb	r3, r3
 8017634:	001a      	movs	r2, r3
 8017636:	2144      	movs	r1, #68	; 0x44
 8017638:	187b      	adds	r3, r7, r1
 801763a:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 801763c:	187b      	adds	r3, r7, r1
 801763e:	2284      	movs	r2, #132	; 0x84
 8017640:	18b8      	adds	r0, r7, r2
 8017642:	2201      	movs	r2, #1
 8017644:	2107      	movs	r1, #7
 8017646:	f7fe febf 	bl	80163c8 <TLV_add>
            break;
 801764a:	e0de      	b.n	801780a <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801764c:	230f      	movs	r3, #15
 801764e:	18fb      	adds	r3, r7, r3
 8017650:	781a      	ldrb	r2, [r3, #0]
 8017652:	4b6b      	ldr	r3, [pc, #428]	; (8017800 <GUI_SendNotification+0x66c>)
 8017654:	0092      	lsls	r2, r2, #2
 8017656:	5cd3      	ldrb	r3, [r2, r3]
 8017658:	079b      	lsls	r3, r3, #30
 801765a:	0f9b      	lsrs	r3, r3, #30
 801765c:	b2db      	uxtb	r3, r3
 801765e:	001a      	movs	r2, r3
 8017660:	2140      	movs	r1, #64	; 0x40
 8017662:	187b      	adds	r3, r7, r1
 8017664:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8017666:	187b      	adds	r3, r7, r1
 8017668:	2284      	movs	r2, #132	; 0x84
 801766a:	18b8      	adds	r0, r7, r2
 801766c:	2201      	movs	r2, #1
 801766e:	210d      	movs	r1, #13
 8017670:	f7fe feaa 	bl	80163c8 <TLV_add>
            break;
 8017674:	e0c9      	b.n	801780a <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8017676:	230f      	movs	r3, #15
 8017678:	18fb      	adds	r3, r7, r3
 801767a:	781b      	ldrb	r3, [r3, #0]
 801767c:	4a60      	ldr	r2, [pc, #384]	; (8017800 <GUI_SendNotification+0x66c>)
 801767e:	009b      	lsls	r3, r3, #2
 8017680:	18d3      	adds	r3, r2, r3
 8017682:	785b      	ldrb	r3, [r3, #1]
 8017684:	061b      	lsls	r3, r3, #24
 8017686:	0fdb      	lsrs	r3, r3, #31
 8017688:	b2db      	uxtb	r3, r3
 801768a:	001a      	movs	r2, r3
 801768c:	213c      	movs	r1, #60	; 0x3c
 801768e:	187b      	adds	r3, r7, r1
 8017690:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8017692:	187b      	adds	r3, r7, r1
 8017694:	2284      	movs	r2, #132	; 0x84
 8017696:	18b8      	adds	r0, r7, r2
 8017698:	2201      	movs	r2, #1
 801769a:	210a      	movs	r1, #10
 801769c:	f7fe fe94 	bl	80163c8 <TLV_add>
            break;
 80176a0:	e0b3      	b.n	801780a <GUI_SendNotification+0x676>
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 80176a2:	240f      	movs	r4, #15
 80176a4:	193b      	adds	r3, r7, r4
 80176a6:	781b      	ldrb	r3, [r3, #0]
 80176a8:	4a55      	ldr	r2, [pc, #340]	; (8017800 <GUI_SendNotification+0x66c>)
 80176aa:	009b      	lsls	r3, r3, #2
 80176ac:	18d3      	adds	r3, r2, r3
 80176ae:	785b      	ldrb	r3, [r3, #1]
 80176b0:	06db      	lsls	r3, r3, #27
 80176b2:	0fdb      	lsrs	r3, r3, #31
 80176b4:	b2db      	uxtb	r3, r3
 80176b6:	2b01      	cmp	r3, #1
 80176b8:	d000      	beq.n	80176bc <GUI_SendNotification+0x528>
 80176ba:	e0a6      	b.n	801780a <GUI_SendNotification+0x676>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0U != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 80176bc:	193b      	adds	r3, r7, r4
 80176be:	781a      	ldrb	r2, [r3, #0]
 80176c0:	4950      	ldr	r1, [pc, #320]	; (8017804 <GUI_SendNotification+0x670>)
 80176c2:	0013      	movs	r3, r2
 80176c4:	00db      	lsls	r3, r3, #3
 80176c6:	1a9b      	subs	r3, r3, r2
 80176c8:	011b      	lsls	r3, r3, #4
 80176ca:	18cb      	adds	r3, r1, r3
 80176cc:	333c      	adds	r3, #60	; 0x3c
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d030      	beq.n	8017736 <GUI_SendNotification+0x5a2>
          {
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 80176d4:	193b      	adds	r3, r7, r4
 80176d6:	781a      	ldrb	r2, [r3, #0]
 80176d8:	494a      	ldr	r1, [pc, #296]	; (8017804 <GUI_SendNotification+0x670>)
 80176da:	0013      	movs	r3, r2
 80176dc:	00db      	lsls	r3, r3, #3
 80176de:	1a9b      	subs	r3, r3, r2
 80176e0:	011b      	lsls	r3, r3, #4
 80176e2:	18cb      	adds	r3, r1, r3
 80176e4:	333c      	adds	r3, #60	; 0x3c
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	b2da      	uxtb	r2, r3
 80176ea:	2124      	movs	r1, #36	; 0x24
 80176ec:	187b      	adds	r3, r7, r1
 80176ee:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 80176f0:	187b      	adds	r3, r7, r1
 80176f2:	2584      	movs	r5, #132	; 0x84
 80176f4:	1978      	adds	r0, r7, r5
 80176f6:	2201      	movs	r2, #1
 80176f8:	2100      	movs	r1, #0
 80176fa:	f7fe fe65 	bl	80163c8 <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 80176fe:	193b      	adds	r3, r7, r4
 8017700:	781a      	ldrb	r2, [r3, #0]
 8017702:	4940      	ldr	r1, [pc, #256]	; (8017804 <GUI_SendNotification+0x670>)
 8017704:	0013      	movs	r3, r2
 8017706:	00db      	lsls	r3, r3, #3
 8017708:	1a9b      	subs	r3, r3, r2
 801770a:	011b      	lsls	r3, r3, #4
 801770c:	18cb      	adds	r3, r1, r3
 801770e:	333c      	adds	r3, #60	; 0x3c
 8017710:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8017712:	b29b      	uxth	r3, r3
 8017714:	009b      	lsls	r3, r3, #2
 8017716:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8017718:	193b      	adds	r3, r7, r4
 801771a:	781a      	ldrb	r2, [r3, #0]
 801771c:	0013      	movs	r3, r2
 801771e:	00db      	lsls	r3, r3, #3
 8017720:	1a9b      	subs	r3, r3, r2
 8017722:	011b      	lsls	r3, r3, #4
 8017724:	3320      	adds	r3, #32
 8017726:	001a      	movs	r2, r3
 8017728:	4b36      	ldr	r3, [pc, #216]	; (8017804 <GUI_SendNotification+0x670>)
 801772a:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801772c:	1978      	adds	r0, r7, r5
 801772e:	000a      	movs	r2, r1
 8017730:	2104      	movs	r1, #4
 8017732:	f7fe fe49 	bl	80163c8 <TLV_add>
          }
          /* RDOPosition */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                        (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 8017736:	240f      	movs	r4, #15
 8017738:	193b      	adds	r3, r7, r4
 801773a:	781a      	ldrb	r2, [r3, #0]
 801773c:	4931      	ldr	r1, [pc, #196]	; (8017804 <GUI_SendNotification+0x670>)
 801773e:	0013      	movs	r3, r2
 8017740:	00db      	lsls	r3, r3, #3
 8017742:	1a9b      	subs	r3, r3, r2
 8017744:	011b      	lsls	r3, r3, #4
 8017746:	18cb      	adds	r3, r1, r3
 8017748:	3340      	adds	r3, #64	; 0x40
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	b2da      	uxtb	r2, r3
 801774e:	212c      	movs	r1, #44	; 0x2c
 8017750:	187b      	adds	r3, r7, r1
 8017752:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 8017754:	187b      	adds	r3, r7, r1
 8017756:	2584      	movs	r5, #132	; 0x84
 8017758:	1978      	adds	r0, r7, r5
 801775a:	2201      	movs	r2, #1
 801775c:	2101      	movs	r1, #1
 801775e:	f7fe fe33 	bl	80163c8 <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 8017762:	193b      	adds	r3, r7, r4
 8017764:	781a      	ldrb	r2, [r3, #0]
 8017766:	4b26      	ldr	r3, [pc, #152]	; (8017800 <GUI_SendNotification+0x66c>)
 8017768:	0092      	lsls	r2, r2, #2
 801776a:	5cd3      	ldrb	r3, [r2, r3]
 801776c:	075b      	lsls	r3, r3, #29
 801776e:	0fdb      	lsrs	r3, r3, #31
 8017770:	b2db      	uxtb	r3, r3
 8017772:	2b00      	cmp	r3, #0
 8017774:	d12d      	bne.n	80177d2 <GUI_SendNotification+0x63e>
          {
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8017776:	193b      	adds	r3, r7, r4
 8017778:	781a      	ldrb	r2, [r3, #0]
 801777a:	4922      	ldr	r1, [pc, #136]	; (8017804 <GUI_SendNotification+0x670>)
 801777c:	0013      	movs	r3, r2
 801777e:	00db      	lsls	r3, r3, #3
 8017780:	1a9b      	subs	r3, r3, r2
 8017782:	011b      	lsls	r3, r3, #4
 8017784:	18cb      	adds	r3, r1, r3
 8017786:	331c      	adds	r3, #28
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	b2da      	uxtb	r2, r3
 801778c:	2120      	movs	r1, #32
 801778e:	187b      	adds	r3, r7, r1
 8017790:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8017792:	187b      	adds	r3, r7, r1
 8017794:	1978      	adds	r0, r7, r5
 8017796:	2201      	movs	r2, #1
 8017798:	2103      	movs	r1, #3
 801779a:	f7fe fe15 	bl	80163c8 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U,
 801779e:	193b      	adds	r3, r7, r4
 80177a0:	781a      	ldrb	r2, [r3, #0]
 80177a2:	4918      	ldr	r1, [pc, #96]	; (8017804 <GUI_SendNotification+0x670>)
 80177a4:	0013      	movs	r3, r2
 80177a6:	00db      	lsls	r3, r3, #3
 80177a8:	1a9b      	subs	r3, r3, r2
 80177aa:	011b      	lsls	r3, r3, #4
 80177ac:	18cb      	adds	r3, r1, r3
 80177ae:	331c      	adds	r3, #28
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	b29b      	uxth	r3, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 80177b8:	193b      	adds	r3, r7, r4
 80177ba:	781a      	ldrb	r2, [r3, #0]
 80177bc:	0013      	movs	r3, r2
 80177be:	00db      	lsls	r3, r3, #3
 80177c0:	1a9b      	subs	r3, r3, r2
 80177c2:	011b      	lsls	r3, r3, #4
 80177c4:	4a0f      	ldr	r2, [pc, #60]	; (8017804 <GUI_SendNotification+0x670>)
 80177c6:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 80177c8:	1978      	adds	r0, r7, r5
 80177ca:	000a      	movs	r2, r1
 80177cc:	2102      	movs	r1, #2
 80177ce:	f7fe fdfb 	bl	80163c8 <TLV_add>
          }
          /* PD_SpecRevision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 80177d2:	230f      	movs	r3, #15
 80177d4:	18fb      	adds	r3, r7, r3
 80177d6:	781a      	ldrb	r2, [r3, #0]
 80177d8:	4b09      	ldr	r3, [pc, #36]	; (8017800 <GUI_SendNotification+0x66c>)
 80177da:	0092      	lsls	r2, r2, #2
 80177dc:	5cd3      	ldrb	r3, [r2, r3]
 80177de:	079b      	lsls	r3, r3, #30
 80177e0:	0f9b      	lsrs	r3, r3, #30
 80177e2:	b2db      	uxtb	r3, r3
 80177e4:	001a      	movs	r2, r3
 80177e6:	2128      	movs	r1, #40	; 0x28
 80177e8:	187b      	adds	r3, r7, r1
 80177ea:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80177ec:	187b      	adds	r3, r7, r1
 80177ee:	2284      	movs	r2, #132	; 0x84
 80177f0:	18b8      	adds	r0, r7, r2
 80177f2:	2201      	movs	r2, #1
 80177f4:	210d      	movs	r1, #13
 80177f6:	f7fe fde7 	bl	80163c8 <TLV_add>
 80177fa:	e006      	b.n	801780a <GUI_SendNotification+0x676>
            break;
 80177fc:	46c0      	nop			; (mov r8, r8)
 80177fe:	e004      	b.n	801780a <GUI_SendNotification+0x676>
 8017800:	20002d7c 	.word	0x20002d7c
 8017804:	2000300c 	.word	0x2000300c
            break;
 8017808:	46c0      	nop			; (mov r8, r8)
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 801780a:	683a      	ldr	r2, [r7, #0]
 801780c:	2380      	movs	r3, #128	; 0x80
 801780e:	011b      	lsls	r3, r3, #4
 8017810:	4013      	ands	r3, r2
 8017812:	d043      	beq.n	801789c <GUI_SendNotification+0x708>
    {
      uint32_t vsense = 0;
 8017814:	2300      	movs	r3, #0
 8017816:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 8017818:	2300      	movs	r3, #0
 801781a:	2290      	movs	r2, #144	; 0x90
 801781c:	18ba      	adds	r2, r7, r2
 801781e:	6013      	str	r3, [r2, #0]

      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 8017820:	2384      	movs	r3, #132	; 0x84
 8017822:	18f8      	adds	r0, r7, r3
 8017824:	23a0      	movs	r3, #160	; 0xa0
 8017826:	2208      	movs	r2, #8
 8017828:	189b      	adds	r3, r3, r2
 801782a:	19db      	adds	r3, r3, r7
 801782c:	2204      	movs	r2, #4
 801782e:	2113      	movs	r1, #19
 8017830:	f7fe fdca 	bl	80163c8 <TLV_add>

      if (NULL != pCB_GetVoltage)
 8017834:	4b57      	ldr	r3, [pc, #348]	; (8017994 <GUI_SendNotification+0x800>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d008      	beq.n	801784e <GUI_SendNotification+0x6ba>
      {
        vsense = pCB_GetVoltage(PortNum);
 801783c:	4b55      	ldr	r3, [pc, #340]	; (8017994 <GUI_SendNotification+0x800>)
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	220f      	movs	r2, #15
 8017842:	18ba      	adds	r2, r7, r2
 8017844:	7812      	ldrb	r2, [r2, #0]
 8017846:	0010      	movs	r0, r2
 8017848:	4798      	blx	r3
 801784a:	0003      	movs	r3, r0
 801784c:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 801784e:	4b51      	ldr	r3, [pc, #324]	; (8017994 <GUI_SendNotification+0x800>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d013      	beq.n	801787e <GUI_SendNotification+0x6ea>
      {
        isense = pCB_GetCurrent(PortNum);
 8017856:	4b50      	ldr	r3, [pc, #320]	; (8017998 <GUI_SendNotification+0x804>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	220f      	movs	r2, #15
 801785c:	18ba      	adds	r2, r7, r2
 801785e:	7812      	ldrb	r2, [r2, #0]
 8017860:	0010      	movs	r0, r2
 8017862:	4798      	blx	r3
 8017864:	0003      	movs	r3, r0
 8017866:	2290      	movs	r2, #144	; 0x90
 8017868:	18b9      	adds	r1, r7, r2
 801786a:	600b      	str	r3, [r1, #0]
        if (isense < 0)
 801786c:	18bb      	adds	r3, r7, r2
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	2b00      	cmp	r3, #0
 8017872:	da04      	bge.n	801787e <GUI_SendNotification+0x6ea>
        {
          isense = -isense;
 8017874:	18bb      	adds	r3, r7, r2
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	425b      	negs	r3, r3
 801787a:	18ba      	adds	r2, r7, r2
 801787c:	6013      	str	r3, [r2, #0]
        }
      }

      /* VBUS & IBUS level */
      vsense = ((uint32_t)(isense) << 16) | vsense;
 801787e:	2390      	movs	r3, #144	; 0x90
 8017880:	18fb      	adds	r3, r7, r3
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	041a      	lsls	r2, r3, #16
 8017886:	69fb      	ldr	r3, [r7, #28]
 8017888:	4313      	orrs	r3, r2
 801788a:	61fb      	str	r3, [r7, #28]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VBUS_LEVEL, 4, (uint8_t *)&vsense);
 801788c:	231c      	movs	r3, #28
 801788e:	18fb      	adds	r3, r7, r3
 8017890:	2284      	movs	r2, #132	; 0x84
 8017892:	18b8      	adds	r0, r7, r2
 8017894:	2204      	movs	r2, #4
 8017896:	210c      	movs	r1, #12
 8017898:	f7fe fd96 	bl	80163c8 <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 801789c:	683a      	ldr	r2, [r7, #0]
 801789e:	2380      	movs	r3, #128	; 0x80
 80178a0:	01db      	lsls	r3, r3, #7
 80178a2:	4013      	ands	r3, r2
 80178a4:	d009      	beq.n	80178ba <GUI_SendNotification+0x726>
    {
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 80178a6:	2384      	movs	r3, #132	; 0x84
 80178a8:	18f8      	adds	r0, r7, r3
 80178aa:	23a0      	movs	r3, #160	; 0xa0
 80178ac:	2208      	movs	r2, #8
 80178ae:	189b      	adds	r3, r3, r2
 80178b0:	19db      	adds	r3, r3, r7
 80178b2:	2204      	movs	r2, #4
 80178b4:	2113      	movs	r1, #19
 80178b6:	f7fe fd87 	bl	80163c8 <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 80178ba:	683a      	ldr	r2, [r7, #0]
 80178bc:	2380      	movs	r3, #128	; 0x80
 80178be:	021b      	lsls	r3, r3, #8
 80178c0:	4013      	ands	r3, r2
 80178c2:	d043      	beq.n	801794c <GUI_SendNotification+0x7b8>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1, (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 80178c4:	240f      	movs	r4, #15
 80178c6:	193b      	adds	r3, r7, r4
 80178c8:	781b      	ldrb	r3, [r3, #0]
 80178ca:	4a34      	ldr	r2, [pc, #208]	; (801799c <GUI_SendNotification+0x808>)
 80178cc:	009b      	lsls	r3, r3, #2
 80178ce:	18d3      	adds	r3, r2, r3
 80178d0:	785b      	ldrb	r3, [r3, #1]
 80178d2:	075b      	lsls	r3, r3, #29
 80178d4:	0f5b      	lsrs	r3, r3, #29
 80178d6:	b2db      	uxtb	r3, r3
 80178d8:	001a      	movs	r2, r3
 80178da:	2118      	movs	r1, #24
 80178dc:	187b      	adds	r3, r7, r1
 80178de:	701a      	strb	r2, [r3, #0]
 80178e0:	187b      	adds	r3, r7, r1
 80178e2:	2584      	movs	r5, #132	; 0x84
 80178e4:	1978      	adds	r0, r7, r5
 80178e6:	2201      	movs	r2, #1
 80178e8:	2105      	movs	r1, #5
 80178ea:	f7fe fd6d 	bl	80163c8 <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 80178ee:	193b      	adds	r3, r7, r4
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	4a2a      	ldr	r2, [pc, #168]	; (801799c <GUI_SendNotification+0x808>)
 80178f4:	009b      	lsls	r3, r3, #2
 80178f6:	18d3      	adds	r3, r2, r3
 80178f8:	785b      	ldrb	r3, [r3, #1]
 80178fa:	075b      	lsls	r3, r3, #29
 80178fc:	0f5b      	lsrs	r3, r3, #29
 80178fe:	b2db      	uxtb	r3, r3
 8017900:	2b00      	cmp	r3, #0
 8017902:	d123      	bne.n	801794c <GUI_SendNotification+0x7b8>
      {
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1, (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8017904:	193b      	adds	r3, r7, r4
 8017906:	781a      	ldrb	r2, [r3, #0]
 8017908:	4b24      	ldr	r3, [pc, #144]	; (801799c <GUI_SendNotification+0x808>)
 801790a:	0092      	lsls	r2, r2, #2
 801790c:	5cd3      	ldrb	r3, [r2, r3]
 801790e:	061b      	lsls	r3, r3, #24
 8017910:	0f9b      	lsrs	r3, r3, #30
 8017912:	b2db      	uxtb	r3, r3
 8017914:	001a      	movs	r2, r3
 8017916:	2114      	movs	r1, #20
 8017918:	187b      	adds	r3, r7, r1
 801791a:	701a      	strb	r2, [r3, #0]
 801791c:	187b      	adds	r3, r7, r1
 801791e:	1978      	adds	r0, r7, r5
 8017920:	2201      	movs	r2, #1
 8017922:	2106      	movs	r1, #6
 8017924:	f7fe fd50 	bl	80163c8 <TLV_add>
        /* PowerRole*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1, (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8017928:	193b      	adds	r3, r7, r4
 801792a:	781a      	ldrb	r2, [r3, #0]
 801792c:	4b1b      	ldr	r3, [pc, #108]	; (801799c <GUI_SendNotification+0x808>)
 801792e:	0092      	lsls	r2, r2, #2
 8017930:	5cd3      	ldrb	r3, [r2, r3]
 8017932:	075b      	lsls	r3, r3, #29
 8017934:	0fdb      	lsrs	r3, r3, #31
 8017936:	b2db      	uxtb	r3, r3
 8017938:	001a      	movs	r2, r3
 801793a:	2110      	movs	r1, #16
 801793c:	187b      	adds	r3, r7, r1
 801793e:	701a      	strb	r2, [r3, #0]
 8017940:	187b      	adds	r3, r7, r1
 8017942:	1978      	adds	r0, r7, r5
 8017944:	2201      	movs	r2, #1
 8017946:	2108      	movs	r1, #8
 8017948:	f7fe fd3e 	bl	80163c8 <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 801794c:	2384      	movs	r3, #132	; 0x84
 801794e:	18fb      	adds	r3, r7, r3
 8017950:	0018      	movs	r0, r3
 8017952:	f7fe fe9b 	bl	801668c <TLV_deinit_encode>

    if (0U != TLV_get_string_length(Processed))
 8017956:	4b12      	ldr	r3, [pc, #72]	; (80179a0 <GUI_SendNotification+0x80c>)
 8017958:	0018      	movs	r0, r3
 801795a:	f7fe ff3d 	bl	80167d8 <TLV_get_string_length>
 801795e:	1e03      	subs	r3, r0, #0
 8017960:	d010      	beq.n	8017984 <GUI_SendNotification+0x7f0>
    {
      *pMsgToSend = Processed;
 8017962:	68bb      	ldr	r3, [r7, #8]
 8017964:	4a0e      	ldr	r2, [pc, #56]	; (80179a0 <GUI_SendNotification+0x80c>)
 8017966:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)TLV_get_string_length(Processed) + 8U;
 8017968:	4b0d      	ldr	r3, [pc, #52]	; (80179a0 <GUI_SendNotification+0x80c>)
 801796a:	0018      	movs	r0, r3
 801796c:	f7fe ff34 	bl	80167d8 <TLV_get_string_length>
 8017970:	0003      	movs	r3, r0
 8017972:	b2db      	uxtb	r3, r3
 8017974:	3308      	adds	r3, #8
 8017976:	b2da      	uxtb	r2, r3
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 801797c:	2397      	movs	r3, #151	; 0x97
 801797e:	18fb      	adds	r3, r7, r3
 8017980:	2201      	movs	r2, #1
 8017982:	701a      	strb	r2, [r3, #0]

    }

  }

  return gui_state;
 8017984:	2397      	movs	r3, #151	; 0x97
 8017986:	18fb      	adds	r3, r7, r3
 8017988:	781b      	ldrb	r3, [r3, #0]
}
 801798a:	0018      	movs	r0, r3
 801798c:	46bd      	mov	sp, r7
 801798e:	b026      	add	sp, #152	; 0x98
 8017990:	bdb0      	pop	{r4, r5, r7, pc}
 8017992:	46c0      	nop			; (mov r8, r8)
 8017994:	20003000 	.word	0x20003000
 8017998:	20003004 	.word	0x20003004
 801799c:	20002d7c 	.word	0x20002d7c
 80179a0:	20002eec 	.word	0x20002eec

080179a4 <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 80179a4:	b590      	push	{r4, r7, lr}
 80179a6:	b085      	sub	sp, #20
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	0002      	movs	r2, r0
 80179ac:	1dfb      	adds	r3, r7, #7
 80179ae:	701a      	strb	r2, [r3, #0]
 80179b0:	1d3b      	adds	r3, r7, #4
 80179b2:	1c0a      	adds	r2, r1, #0
 80179b4:	801a      	strh	r2, [r3, #0]
#if defined(_SNK) || defined(_DRP)
  if ((uint16_t)USBPD_NOTIFY_REQUEST_ACCEPTED == EventVal)
 80179b6:	1d3b      	adds	r3, r7, #4
 80179b8:	881b      	ldrh	r3, [r3, #0]
 80179ba:	2b01      	cmp	r3, #1
 80179bc:	d136      	bne.n	8017a2c <GUI_PostNotificationMessage+0x88>
  {
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 80179be:	1dfb      	adds	r3, r7, #7
 80179c0:	781a      	ldrb	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
 80179c2:	1dfb      	adds	r3, r7, #7
 80179c4:	7818      	ldrb	r0, [r3, #0]
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 80179c6:	4927      	ldr	r1, [pc, #156]	; (8017a64 <GUI_PostNotificationMessage+0xc0>)
 80179c8:	0013      	movs	r3, r2
 80179ca:	00db      	lsls	r3, r3, #3
 80179cc:	1a9b      	subs	r3, r3, r2
 80179ce:	011b      	lsls	r3, r3, #4
 80179d0:	18cb      	adds	r3, r1, r3
 80179d2:	3344      	adds	r3, #68	; 0x44
 80179d4:	681a      	ldr	r2, [r3, #0]
 80179d6:	4924      	ldr	r1, [pc, #144]	; (8017a68 <GUI_PostNotificationMessage+0xc4>)
 80179d8:	2374      	movs	r3, #116	; 0x74
 80179da:	4343      	muls	r3, r0
 80179dc:	18cb      	adds	r3, r1, r3
 80179de:	3308      	adds	r3, #8
 80179e0:	601a      	str	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 80179e2:	1dfb      	adds	r3, r7, #7
 80179e4:	781a      	ldrb	r2, [r3, #0]
 80179e6:	491f      	ldr	r1, [pc, #124]	; (8017a64 <GUI_PostNotificationMessage+0xc0>)
 80179e8:	0013      	movs	r3, r2
 80179ea:	00db      	lsls	r3, r3, #3
 80179ec:	1a9b      	subs	r3, r3, r2
 80179ee:	011b      	lsls	r3, r3, #4
 80179f0:	18cb      	adds	r3, r1, r3
 80179f2:	3344      	adds	r3, #68	; 0x44
 80179f4:	6819      	ldr	r1, [r3, #0]
 80179f6:	1dfb      	adds	r3, r7, #7
 80179f8:	781a      	ldrb	r2, [r3, #0]
 80179fa:	481a      	ldr	r0, [pc, #104]	; (8017a64 <GUI_PostNotificationMessage+0xc0>)
 80179fc:	0013      	movs	r3, r2
 80179fe:	00db      	lsls	r3, r3, #3
 8017a00:	1a9b      	subs	r3, r3, r2
 8017a02:	011b      	lsls	r3, r3, #4
 8017a04:	18c3      	adds	r3, r0, r3
 8017a06:	3348      	adds	r3, #72	; 0x48
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	434b      	muls	r3, r1
 8017a0c:	001a      	movs	r2, r3
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
 8017a0e:	1dfb      	adds	r3, r7, #7
 8017a10:	781c      	ldrb	r4, [r3, #0]
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 8017a12:	23fa      	movs	r3, #250	; 0xfa
 8017a14:	0099      	lsls	r1, r3, #2
 8017a16:	0010      	movs	r0, r2
 8017a18:	f7ee fbea 	bl	80061f0 <__udivsi3>
 8017a1c:	0003      	movs	r3, r0
 8017a1e:	0019      	movs	r1, r3
 8017a20:	4a11      	ldr	r2, [pc, #68]	; (8017a68 <GUI_PostNotificationMessage+0xc4>)
 8017a22:	2374      	movs	r3, #116	; 0x74
 8017a24:	4363      	muls	r3, r4
 8017a26:	18d3      	adds	r3, r2, r3
 8017a28:	3314      	adds	r3, #20
 8017a2a:	6019      	str	r1, [r3, #0]
  }
#endif /* _SNK || _DRP */

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 8017a2c:	4b0f      	ldr	r3, [pc, #60]	; (8017a6c <GUI_PostNotificationMessage+0xc8>)
 8017a2e:	781b      	ldrb	r3, [r3, #0]
 8017a30:	2b01      	cmp	r3, #1
 8017a32:	d113      	bne.n	8017a5c <GUI_PostNotificationMessage+0xb8>
  {
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
                     | ((uint32_t)PortNum << GUI_PE_PORT_NUM_Pos)
 8017a34:	1dfb      	adds	r3, r7, #7
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	061a      	lsls	r2, r3, #24
                     | ((uint32_t)EventVal << GUI_PE_NOTIF_Pos);
 8017a3a:	1d3b      	adds	r3, r7, #4
 8017a3c:	881b      	ldrh	r3, [r3, #0]
 8017a3e:	011b      	lsls	r3, r3, #4
 8017a40:	4313      	orrs	r3, r2
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
 8017a42:	2201      	movs	r2, #1
 8017a44:	4313      	orrs	r3, r2
 8017a46:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, event, 0U);
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	60bb      	str	r3, [r7, #8]
 8017a4c:	4b08      	ldr	r3, [pc, #32]	; (8017a70 <GUI_PostNotificationMessage+0xcc>)
 8017a4e:	6818      	ldr	r0, [r3, #0]
 8017a50:	2308      	movs	r3, #8
 8017a52:	18f9      	adds	r1, r7, r3
 8017a54:	2300      	movs	r3, #0
 8017a56:	2200      	movs	r2, #0
 8017a58:	f7f8 fc8e 	bl	8010378 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8017a5c:	46c0      	nop			; (mov r8, r8)
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	b005      	add	sp, #20
 8017a62:	bd90      	pop	{r4, r7, pc}
 8017a64:	2000300c 	.word	0x2000300c
 8017a68:	20000050 	.word	0x20000050
 8017a6c:	20002fec 	.word	0x20002fec
 8017a70:	20002ff0 	.word	0x20002ff0

08017a74 <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 8017a74:	b590      	push	{r4, r7, lr}
 8017a76:	b08b      	sub	sp, #44	; 0x2c
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	60ba      	str	r2, [r7, #8]
 8017a7c:	607b      	str	r3, [r7, #4]
 8017a7e:	230f      	movs	r3, #15
 8017a80:	18fb      	adds	r3, r7, r3
 8017a82:	1c02      	adds	r2, r0, #0
 8017a84:	701a      	strb	r2, [r3, #0]
 8017a86:	200e      	movs	r0, #14
 8017a88:	183b      	adds	r3, r7, r0
 8017a8a:	1c0a      	adds	r2, r1, #0
 8017a8c:	701a      	strb	r2, [r3, #0]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 8017a8e:	183b      	adds	r3, r7, r0
 8017a90:	781b      	ldrb	r3, [r3, #0]
 8017a92:	2b13      	cmp	r3, #19
 8017a94:	d900      	bls.n	8017a98 <GUI_SaveInfo+0x24>
 8017a96:	e0ca      	b.n	8017c2e <GUI_SaveInfo+0x1ba>
 8017a98:	009a      	lsls	r2, r3, #2
 8017a9a:	4b6b      	ldr	r3, [pc, #428]	; (8017c48 <GUI_SaveInfo+0x1d4>)
 8017a9c:	18d3      	adds	r3, r2, r3
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	469f      	mov	pc, r3
  {
    /* Case requested DO position Data information :
    */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4U)
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2b04      	cmp	r3, #4
 8017aa6:	d000      	beq.n	8017aaa <GUI_SaveInfo+0x36>
 8017aa8:	e0c3      	b.n	8017c32 <GUI_SaveInfo+0x1be>
      {
        uint8_t *temp;
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPosition;
 8017aaa:	240f      	movs	r4, #15
 8017aac:	193b      	adds	r3, r7, r4
 8017aae:	781a      	ldrb	r2, [r3, #0]
 8017ab0:	0013      	movs	r3, r2
 8017ab2:	00db      	lsls	r3, r3, #3
 8017ab4:	1a9b      	subs	r3, r3, r2
 8017ab6:	011b      	lsls	r3, r3, #4
 8017ab8:	3340      	adds	r3, #64	; 0x40
 8017aba:	001a      	movs	r2, r3
 8017abc:	4b63      	ldr	r3, [pc, #396]	; (8017c4c <GUI_SaveInfo+0x1d8>)
 8017abe:	18d3      	adds	r3, r2, r3
 8017ac0:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 8017ac2:	687a      	ldr	r2, [r7, #4]
 8017ac4:	68b9      	ldr	r1, [r7, #8]
 8017ac6:	693b      	ldr	r3, [r7, #16]
 8017ac8:	0018      	movs	r0, r3
 8017aca:	f003 f8f9 	bl	801acc0 <memcpy>
        GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 8017ace:	68bb      	ldr	r3, [r7, #8]
 8017ad0:	7819      	ldrb	r1, [r3, #0]
 8017ad2:	193b      	adds	r3, r7, r4
 8017ad4:	781a      	ldrb	r2, [r3, #0]
 8017ad6:	0008      	movs	r0, r1
 8017ad8:	495c      	ldr	r1, [pc, #368]	; (8017c4c <GUI_SaveInfo+0x1d8>)
 8017ada:	0013      	movs	r3, r2
 8017adc:	00db      	lsls	r3, r3, #3
 8017ade:	1a9b      	subs	r3, r3, r2
 8017ae0:	011b      	lsls	r3, r3, #4
 8017ae2:	18cb      	adds	r3, r1, r3
 8017ae4:	334c      	adds	r3, #76	; 0x4c
 8017ae6:	6018      	str	r0, [r3, #0]
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 8017ae8:	193b      	adds	r3, r7, r4
 8017aea:	781a      	ldrb	r2, [r3, #0]
 8017aec:	0013      	movs	r3, r2
 8017aee:	00db      	lsls	r3, r3, #3
 8017af0:	1a9b      	subs	r3, r3, r2
 8017af2:	011b      	lsls	r3, r3, #4
 8017af4:	3348      	adds	r3, #72	; 0x48
 8017af6:	001a      	movs	r2, r3
 8017af8:	4b54      	ldr	r3, [pc, #336]	; (8017c4c <GUI_SaveInfo+0x1d8>)
 8017afa:	18d3      	adds	r3, r2, r3
 8017afc:	3304      	adds	r3, #4
 8017afe:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 8017b00:	687a      	ldr	r2, [r7, #4]
 8017b02:	68b9      	ldr	r1, [r7, #8]
 8017b04:	693b      	ldr	r3, [r7, #16]
 8017b06:	0018      	movs	r0, r3
 8017b08:	f003 f8da 	bl	801acc0 <memcpy>
      }
      break;
 8017b0c:	e091      	b.n	8017c32 <GUI_SaveInfo+0x1be>

    /* Case Received Source PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2b1c      	cmp	r3, #28
 8017b12:	d900      	bls.n	8017b16 <GUI_SaveInfo+0xa2>
 8017b14:	e08f      	b.n	8017c36 <GUI_SaveInfo+0x1c2>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4U);
 8017b16:	230f      	movs	r3, #15
 8017b18:	18fb      	adds	r3, r7, r3
 8017b1a:	781a      	ldrb	r2, [r3, #0]
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	0899      	lsrs	r1, r3, #2
 8017b20:	484a      	ldr	r0, [pc, #296]	; (8017c4c <GUI_SaveInfo+0x1d8>)
 8017b22:	0013      	movs	r3, r2
 8017b24:	00db      	lsls	r3, r3, #3
 8017b26:	1a9b      	subs	r3, r3, r2
 8017b28:	011b      	lsls	r3, r3, #4
 8017b2a:	18c3      	adds	r3, r0, r3
 8017b2c:	331c      	adds	r3, #28
 8017b2e:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8017b30:	2300      	movs	r3, #0
 8017b32:	627b      	str	r3, [r7, #36]	; 0x24
 8017b34:	e018      	b.n	8017b68 <GUI_SaveInfo+0xf4>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 8017b36:	230f      	movs	r3, #15
 8017b38:	18fb      	adds	r3, r7, r3
 8017b3a:	781a      	ldrb	r2, [r3, #0]
 8017b3c:	0013      	movs	r3, r2
 8017b3e:	00db      	lsls	r3, r3, #3
 8017b40:	1a9b      	subs	r3, r3, r2
 8017b42:	009b      	lsls	r3, r3, #2
 8017b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b46:	189b      	adds	r3, r3, r2
 8017b48:	009a      	lsls	r2, r3, #2
 8017b4a:	4b40      	ldr	r3, [pc, #256]	; (8017c4c <GUI_SaveInfo+0x1d8>)
 8017b4c:	18d3      	adds	r3, r2, r3
 8017b4e:	617b      	str	r3, [r7, #20]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8017b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b52:	009b      	lsls	r3, r3, #2
 8017b54:	68ba      	ldr	r2, [r7, #8]
 8017b56:	18d1      	adds	r1, r2, r3
 8017b58:	697b      	ldr	r3, [r7, #20]
 8017b5a:	2204      	movs	r2, #4
 8017b5c:	0018      	movs	r0, r3
 8017b5e:	f003 f8af 	bl	801acc0 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 8017b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b64:	3301      	adds	r3, #1
 8017b66:	627b      	str	r3, [r7, #36]	; 0x24
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	089b      	lsrs	r3, r3, #2
 8017b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	d3e1      	bcc.n	8017b36 <GUI_SaveInfo+0xc2>
        }
      }
      break;
 8017b72:	e060      	b.n	8017c36 <GUI_SaveInfo+0x1c2>

    /* Case Received Sink PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	2b1c      	cmp	r3, #28
 8017b78:	d85f      	bhi.n	8017c3a <GUI_SaveInfo+0x1c6>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4U);
 8017b7a:	230f      	movs	r3, #15
 8017b7c:	18fb      	adds	r3, r7, r3
 8017b7e:	781a      	ldrb	r2, [r3, #0]
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	0899      	lsrs	r1, r3, #2
 8017b84:	4831      	ldr	r0, [pc, #196]	; (8017c4c <GUI_SaveInfo+0x1d8>)
 8017b86:	0013      	movs	r3, r2
 8017b88:	00db      	lsls	r3, r3, #3
 8017b8a:	1a9b      	subs	r3, r3, r2
 8017b8c:	011b      	lsls	r3, r3, #4
 8017b8e:	18c3      	adds	r3, r0, r3
 8017b90:	333c      	adds	r3, #60	; 0x3c
 8017b92:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8017b94:	2300      	movs	r3, #0
 8017b96:	627b      	str	r3, [r7, #36]	; 0x24
 8017b98:	e019      	b.n	8017bce <GUI_SaveInfo+0x15a>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 8017b9a:	230f      	movs	r3, #15
 8017b9c:	18fb      	adds	r3, r7, r3
 8017b9e:	781a      	ldrb	r2, [r3, #0]
 8017ba0:	0013      	movs	r3, r2
 8017ba2:	00db      	lsls	r3, r3, #3
 8017ba4:	1a9b      	subs	r3, r3, r2
 8017ba6:	009b      	lsls	r3, r3, #2
 8017ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017baa:	189b      	adds	r3, r3, r2
 8017bac:	3308      	adds	r3, #8
 8017bae:	009a      	lsls	r2, r3, #2
 8017bb0:	4b26      	ldr	r3, [pc, #152]	; (8017c4c <GUI_SaveInfo+0x1d8>)
 8017bb2:	18d3      	adds	r3, r2, r3
 8017bb4:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8017bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb8:	009b      	lsls	r3, r3, #2
 8017bba:	68ba      	ldr	r2, [r7, #8]
 8017bbc:	18d1      	adds	r1, r2, r3
 8017bbe:	69bb      	ldr	r3, [r7, #24]
 8017bc0:	2204      	movs	r2, #4
 8017bc2:	0018      	movs	r0, r3
 8017bc4:	f003 f87c 	bl	801acc0 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 8017bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bca:	3301      	adds	r3, #1
 8017bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	089b      	lsrs	r3, r3, #2
 8017bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d3e0      	bcc.n	8017b9a <GUI_SaveInfo+0x126>
        }
      }
      break;
 8017bd8:	e02f      	b.n	8017c3a <GUI_SaveInfo+0x1c6>

    /* Case Received Request PDO Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4U)
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	2b04      	cmp	r3, #4
 8017bde:	d12e      	bne.n	8017c3e <GUI_SaveInfo+0x1ca>
      {
        uint8_t *rdo;
        rdo = (uint8_t *)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 8017be0:	230f      	movs	r3, #15
 8017be2:	18fb      	adds	r3, r7, r3
 8017be4:	781a      	ldrb	r2, [r3, #0]
 8017be6:	0013      	movs	r3, r2
 8017be8:	00db      	lsls	r3, r3, #3
 8017bea:	1a9b      	subs	r3, r3, r2
 8017bec:	011b      	lsls	r3, r3, #4
 8017bee:	3350      	adds	r3, #80	; 0x50
 8017bf0:	001a      	movs	r2, r3
 8017bf2:	4b16      	ldr	r3, [pc, #88]	; (8017c4c <GUI_SaveInfo+0x1d8>)
 8017bf4:	18d3      	adds	r3, r2, r3
 8017bf6:	61fb      	str	r3, [r7, #28]
        (void)memcpy(rdo, Ptr, Size);
 8017bf8:	687a      	ldr	r2, [r7, #4]
 8017bfa:	68b9      	ldr	r1, [r7, #8]
 8017bfc:	69fb      	ldr	r3, [r7, #28]
 8017bfe:	0018      	movs	r0, r3
 8017c00:	f003 f85e 	bl	801acc0 <memcpy>
      }
      break;
 8017c04:	e01b      	b.n	8017c3e <GUI_SaveInfo+0x1ca>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t  *_snk_ext_capa;
      _snk_ext_capa = (uint8_t *)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 8017c06:	230f      	movs	r3, #15
 8017c08:	18fb      	adds	r3, r7, r3
 8017c0a:	781a      	ldrb	r2, [r3, #0]
 8017c0c:	0013      	movs	r3, r2
 8017c0e:	00db      	lsls	r3, r3, #3
 8017c10:	1a9b      	subs	r3, r3, r2
 8017c12:	011b      	lsls	r3, r3, #4
 8017c14:	3350      	adds	r3, #80	; 0x50
 8017c16:	001a      	movs	r2, r3
 8017c18:	4b0c      	ldr	r3, [pc, #48]	; (8017c4c <GUI_SaveInfo+0x1d8>)
 8017c1a:	18d3      	adds	r3, r2, r3
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	623b      	str	r3, [r7, #32]
      (void)memcpy(_snk_ext_capa, Ptr, Size);
 8017c20:	687a      	ldr	r2, [r7, #4]
 8017c22:	68b9      	ldr	r1, [r7, #8]
 8017c24:	6a3b      	ldr	r3, [r7, #32]
 8017c26:	0018      	movs	r0, r3
 8017c28:	f003 f84a 	bl	801acc0 <memcpy>
      break;
 8017c2c:	e008      	b.n	8017c40 <GUI_SaveInfo+0x1cc>
#endif /* _VCONN_SUPPORT */

    /* In case of unexpected data type (Set request could not be fulfilled) :
     */
    default :
      break;
 8017c2e:	46c0      	nop			; (mov r8, r8)
 8017c30:	e006      	b.n	8017c40 <GUI_SaveInfo+0x1cc>
      break;
 8017c32:	46c0      	nop			; (mov r8, r8)
 8017c34:	e004      	b.n	8017c40 <GUI_SaveInfo+0x1cc>
      break;
 8017c36:	46c0      	nop			; (mov r8, r8)
 8017c38:	e002      	b.n	8017c40 <GUI_SaveInfo+0x1cc>
      break;
 8017c3a:	46c0      	nop			; (mov r8, r8)
 8017c3c:	e000      	b.n	8017c40 <GUI_SaveInfo+0x1cc>
      break;
 8017c3e:	46c0      	nop			; (mov r8, r8)
  }
}
 8017c40:	46c0      	nop			; (mov r8, r8)
 8017c42:	46bd      	mov	sp, r7
 8017c44:	b00b      	add	sp, #44	; 0x2c
 8017c46:	bd90      	pop	{r4, r7, pc}
 8017c48:	0801c650 	.word	0x0801c650
 8017c4c:	2000300c 	.word	0x2000300c

08017c50 <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 8017c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c52:	b091      	sub	sp, #68	; 0x44
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	0002      	movs	r2, r0
 8017c58:	6039      	str	r1, [r7, #0]
 8017c5a:	1dfb      	adds	r3, r7, #7
 8017c5c:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8017c5e:	1dfb      	adds	r3, r7, #7
 8017c60:	781b      	ldrb	r3, [r3, #0]
 8017c62:	015b      	lsls	r3, r3, #5
 8017c64:	b25b      	sxtb	r3, r3
 8017c66:	2203      	movs	r2, #3
 8017c68:	4313      	orrs	r3, r2
 8017c6a:	b25b      	sxtb	r3, r3
 8017c6c:	b2d9      	uxtb	r1, r3
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	2280      	movs	r2, #128	; 0x80
 8017c72:	0052      	lsls	r2, r2, #1
 8017c74:	2028      	movs	r0, #40	; 0x28
 8017c76:	1838      	adds	r0, r7, r0
 8017c78:	f7fe fb43 	bl	8016302 <TLV_init_encode>

  /* Information by board */
  if (0U == PortNum)
 8017c7c:	1dfb      	adds	r3, r7, #7
 8017c7e:	781b      	ldrb	r3, [r3, #0]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d163      	bne.n	8017d4c <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t *hwversion;
    if (NULL != pCB_HWBoardVersion)
 8017c84:	4bc2      	ldr	r3, [pc, #776]	; (8017f90 <Send_DpmInitCnf+0x340>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d005      	beq.n	8017c98 <Send_DpmInitCnf+0x48>
    {
      hwversion = pCB_HWBoardVersion();
 8017c8c:	4bc0      	ldr	r3, [pc, #768]	; (8017f90 <Send_DpmInitCnf+0x340>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	4798      	blx	r3
 8017c92:	0003      	movs	r3, r0
 8017c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017c96:	e001      	b.n	8017c9c <Send_DpmInitCnf+0x4c>
    }
    else
    {
      hwversion = (uint8_t *) "UNKNOWN";
 8017c98:	4bbe      	ldr	r3, [pc, #760]	; (8017f94 <Send_DpmInitCnf+0x344>)
 8017c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWBOARDVERSION, (uint16_t)(strlen((const char *)hwversion)), hwversion);
 8017c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c9e:	0018      	movs	r0, r3
 8017ca0:	f7ee fa94 	bl	80061cc <strlen>
 8017ca4:	0003      	movs	r3, r0
 8017ca6:	b29a      	uxth	r2, r3
 8017ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017caa:	2128      	movs	r1, #40	; 0x28
 8017cac:	1878      	adds	r0, r7, r1
 8017cae:	2100      	movs	r1, #0
 8017cb0:	f7fe fb8a 	bl	80163c8 <TLV_add>

    /* HWPDType */
    const uint8_t *hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 8017cb4:	4bb6      	ldr	r3, [pc, #728]	; (8017f90 <Send_DpmInitCnf+0x340>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d005      	beq.n	8017cc8 <Send_DpmInitCnf+0x78>
    {
      hwpdtype  = pCB_HWPDType();
 8017cbc:	4bb6      	ldr	r3, [pc, #728]	; (8017f98 <Send_DpmInitCnf+0x348>)
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	4798      	blx	r3
 8017cc2:	0003      	movs	r3, r0
 8017cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8017cc6:	e001      	b.n	8017ccc <Send_DpmInitCnf+0x7c>
    }
    else
    {
      hwpdtype = (uint8_t *) "UNKNOWN";
 8017cc8:	4bb2      	ldr	r3, [pc, #712]	; (8017f94 <Send_DpmInitCnf+0x344>)
 8017cca:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWPDTYPE, (uint16_t)(strlen((const char *)hwpdtype)), hwpdtype);
 8017ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cce:	0018      	movs	r0, r3
 8017cd0:	f7ee fa7c 	bl	80061cc <strlen>
 8017cd4:	0003      	movs	r3, r0
 8017cd6:	b29a      	uxth	r2, r3
 8017cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cda:	2428      	movs	r4, #40	; 0x28
 8017cdc:	1938      	adds	r0, r7, r4
 8017cde:	2101      	movs	r1, #1
 8017ce0:	f7fe fb72 	bl	80163c8 <TLV_add>

    /* NbPortMax */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NBPORTMAX, 1, (uint8_t[]) { USBPD_PORT_COUNT });
 8017ce4:	2124      	movs	r1, #36	; 0x24
 8017ce6:	187b      	adds	r3, r7, r1
 8017ce8:	2201      	movs	r2, #1
 8017cea:	701a      	strb	r2, [r3, #0]
 8017cec:	187b      	adds	r3, r7, r1
 8017cee:	1938      	adds	r0, r7, r4
 8017cf0:	2201      	movs	r2, #1
 8017cf2:	2102      	movs	r1, #2
 8017cf4:	f7fe fb68 	bl	80163c8 <TLV_add>
    /* FW Version */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
    {
 8017cf8:	251c      	movs	r5, #28
 8017cfa:	197b      	adds	r3, r7, r5
 8017cfc:	4aa7      	ldr	r2, [pc, #668]	; (8017f9c <Send_DpmInitCnf+0x34c>)
 8017cfe:	ca03      	ldmia	r2!, {r0, r1}
 8017d00:	c303      	stmia	r3!, {r0, r1}
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
 8017d02:	197b      	adds	r3, r7, r5
 8017d04:	1938      	adds	r0, r7, r4
 8017d06:	2208      	movs	r2, #8
 8017d08:	2103      	movs	r1, #3
 8017d0a:	f7fe fb5d 	bl	80163c8 <TLV_add>
      (_LIB_ID & 0x00FF0000U) >> 16,
      (_LIB_ID & 0xFF000000U) >> 24
    }
                 );
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8017d0e:	2118      	movs	r1, #24
 8017d10:	187b      	adds	r3, r7, r1
 8017d12:	2200      	movs	r2, #0
 8017d14:	701a      	strb	r2, [r3, #0]
 8017d16:	187b      	adds	r3, r7, r1
 8017d18:	1938      	adds	r0, r7, r4
 8017d1a:	2201      	movs	r2, #1
 8017d1c:	211e      	movs	r1, #30
 8017d1e:	f7fe fb53 	bl	80163c8 <TLV_add>
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8017d22:	2114      	movs	r1, #20
 8017d24:	187b      	adds	r3, r7, r1
 8017d26:	2200      	movs	r2, #0
 8017d28:	701a      	strb	r2, [r3, #0]
 8017d2a:	187b      	adds	r3, r7, r1
 8017d2c:	1938      	adds	r0, r7, r4
 8017d2e:	2201      	movs	r2, #1
 8017d30:	211e      	movs	r1, #30
 8017d32:	f7fe fb49 	bl	80163c8 <TLV_add>

    /* Original settings */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t *)&GUI_OriginalSettings);
 8017d36:	4b9a      	ldr	r3, [pc, #616]	; (8017fa0 <Send_DpmInitCnf+0x350>)
 8017d38:	1938      	adds	r0, r7, r4
 8017d3a:	2201      	movs	r2, #1
 8017d3c:	211f      	movs	r1, #31
 8017d3e:	f7fe fb43 	bl	80163c8 <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 8017d42:	193b      	adds	r3, r7, r4
 8017d44:	0018      	movs	r0, r3
 8017d46:	f7fe fca1 	bl	801668c <TLV_deinit_encode>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_VCONNSUPPLY, 2, (uint8_t *)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 8017d4a:	e11c      	b.n	8017f86 <Send_DpmInitCnf+0x336>
    uint8_t port = PortNum - 1U;
 8017d4c:	2637      	movs	r6, #55	; 0x37
 8017d4e:	19bb      	adds	r3, r7, r6
 8017d50:	1dfa      	adds	r2, r7, #7
 8017d52:	7812      	ldrb	r2, [r2, #0]
 8017d54:	3a01      	subs	r2, #1
 8017d56:	701a      	strb	r2, [r3, #0]
    settings = (uint16_t)DPM_Settings[port].PE_SpecRevision;
 8017d58:	19bb      	adds	r3, r7, r6
 8017d5a:	781a      	ldrb	r2, [r3, #0]
 8017d5c:	4991      	ldr	r1, [pc, #580]	; (8017fa4 <Send_DpmInitCnf+0x354>)
 8017d5e:	0013      	movs	r3, r2
 8017d60:	005b      	lsls	r3, r3, #1
 8017d62:	189b      	adds	r3, r3, r2
 8017d64:	009b      	lsls	r3, r3, #2
 8017d66:	18cb      	adds	r3, r1, r3
 8017d68:	791b      	ldrb	r3, [r3, #4]
 8017d6a:	079b      	lsls	r3, r3, #30
 8017d6c:	0f9b      	lsrs	r3, r3, #30
 8017d6e:	b2db      	uxtb	r3, r3
 8017d70:	b29a      	uxth	r2, r3
 8017d72:	2412      	movs	r4, #18
 8017d74:	193b      	adds	r3, r7, r4
 8017d76:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]) { 0x12, settings });
 8017d78:	2110      	movs	r1, #16
 8017d7a:	187b      	adds	r3, r7, r1
 8017d7c:	2212      	movs	r2, #18
 8017d7e:	701a      	strb	r2, [r3, #0]
 8017d80:	193b      	adds	r3, r7, r4
 8017d82:	881b      	ldrh	r3, [r3, #0]
 8017d84:	b2da      	uxtb	r2, r3
 8017d86:	187b      	adds	r3, r7, r1
 8017d88:	705a      	strb	r2, [r3, #1]
 8017d8a:	187b      	adds	r3, r7, r1
 8017d8c:	2528      	movs	r5, #40	; 0x28
 8017d8e:	1978      	adds	r0, r7, r5
 8017d90:	2202      	movs	r2, #2
 8017d92:	2104      	movs	r1, #4
 8017d94:	f7fe fb18 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 8017d98:	19bb      	adds	r3, r7, r6
 8017d9a:	781a      	ldrb	r2, [r3, #0]
 8017d9c:	4981      	ldr	r1, [pc, #516]	; (8017fa4 <Send_DpmInitCnf+0x354>)
 8017d9e:	2008      	movs	r0, #8
 8017da0:	0013      	movs	r3, r2
 8017da2:	005b      	lsls	r3, r3, #1
 8017da4:	189b      	adds	r3, r3, r2
 8017da6:	009b      	lsls	r3, r3, #2
 8017da8:	18cb      	adds	r3, r1, r3
 8017daa:	181b      	adds	r3, r3, r0
 8017dac:	781b      	ldrb	r3, [r3, #0]
 8017dae:	07db      	lsls	r3, r3, #31
 8017db0:	0fdb      	lsrs	r3, r3, #31
 8017db2:	b2db      	uxtb	r3, r3
 8017db4:	b29a      	uxth	r2, r3
 8017db6:	193b      	adds	r3, r7, r4
 8017db8:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t *)&settings);
 8017dba:	193b      	adds	r3, r7, r4
 8017dbc:	1978      	adds	r0, r7, r5
 8017dbe:	2201      	movs	r2, #1
 8017dc0:	2106      	movs	r1, #6
 8017dc2:	f7fe fb01 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_AccesorySupport;
 8017dc6:	19bb      	adds	r3, r7, r6
 8017dc8:	781a      	ldrb	r2, [r3, #0]
 8017dca:	4976      	ldr	r1, [pc, #472]	; (8017fa4 <Send_DpmInitCnf+0x354>)
 8017dcc:	0013      	movs	r3, r2
 8017dce:	005b      	lsls	r3, r3, #1
 8017dd0:	189b      	adds	r3, r3, r2
 8017dd2:	009b      	lsls	r3, r3, #2
 8017dd4:	18cb      	adds	r3, r1, r3
 8017dd6:	795b      	ldrb	r3, [r3, #5]
 8017dd8:	06db      	lsls	r3, r3, #27
 8017dda:	0fdb      	lsrs	r3, r3, #31
 8017ddc:	b2db      	uxtb	r3, r3
 8017dde:	b29a      	uxth	r2, r3
 8017de0:	193b      	adds	r3, r7, r4
 8017de2:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ACCESSORYSUPP, 1, (uint8_t *)&settings);
 8017de4:	193b      	adds	r3, r7, r4
 8017de6:	1978      	adds	r0, r7, r5
 8017de8:	2201      	movs	r2, #1
 8017dea:	2107      	movs	r1, #7
 8017dec:	f7fe faec 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryDetection;
 8017df0:	19bb      	adds	r3, r7, r6
 8017df2:	781b      	ldrb	r3, [r3, #0]
 8017df4:	4a6c      	ldr	r2, [pc, #432]	; (8017fa8 <Send_DpmInitCnf+0x358>)
 8017df6:	2168      	movs	r1, #104	; 0x68
 8017df8:	2074      	movs	r0, #116	; 0x74
 8017dfa:	4343      	muls	r3, r0
 8017dfc:	18d3      	adds	r3, r2, r3
 8017dfe:	185b      	adds	r3, r3, r1
 8017e00:	78db      	ldrb	r3, [r3, #3]
 8017e02:	07db      	lsls	r3, r3, #31
 8017e04:	0fdb      	lsrs	r3, r3, #31
 8017e06:	b2db      	uxtb	r3, r3
 8017e08:	b29a      	uxth	r2, r3
 8017e0a:	193b      	adds	r3, r7, r4
 8017e0c:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t *)&settings);
 8017e0e:	193b      	adds	r3, r7, r4
 8017e10:	1978      	adds	r0, r7, r5
 8017e12:	2201      	movs	r2, #1
 8017e14:	2108      	movs	r1, #8
 8017e16:	f7fe fad7 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryTransition;
 8017e1a:	19bb      	adds	r3, r7, r6
 8017e1c:	781b      	ldrb	r3, [r3, #0]
 8017e1e:	4a62      	ldr	r2, [pc, #392]	; (8017fa8 <Send_DpmInitCnf+0x358>)
 8017e20:	2168      	movs	r1, #104	; 0x68
 8017e22:	2074      	movs	r0, #116	; 0x74
 8017e24:	4343      	muls	r3, r0
 8017e26:	18d3      	adds	r3, r2, r3
 8017e28:	185b      	adds	r3, r3, r1
 8017e2a:	78db      	ldrb	r3, [r3, #3]
 8017e2c:	079b      	lsls	r3, r3, #30
 8017e2e:	0fdb      	lsrs	r3, r3, #31
 8017e30:	b2db      	uxtb	r3, r3
 8017e32:	b29a      	uxth	r2, r3
 8017e34:	193b      	adds	r3, r7, r4
 8017e36:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t *)&settings);
 8017e38:	193b      	adds	r3, r7, r4
 8017e3a:	1978      	adds	r0, r7, r5
 8017e3c:	2201      	movs	r2, #1
 8017e3e:	2109      	movs	r1, #9
 8017e40:	f7fe fac2 	bl	80163c8 <TLV_add>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ISCABLE, 1, (uint8_t[]) { 0x00 });
 8017e44:	210c      	movs	r1, #12
 8017e46:	187b      	adds	r3, r7, r1
 8017e48:	2200      	movs	r2, #0
 8017e4a:	701a      	strb	r2, [r3, #0]
 8017e4c:	187b      	adds	r3, r7, r1
 8017e4e:	1978      	adds	r0, r7, r5
 8017e50:	2201      	movs	r2, #1
 8017e52:	210b      	movs	r1, #11
 8017e54:	f7fe fab8 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_TryFeature;
 8017e58:	19bb      	adds	r3, r7, r6
 8017e5a:	781a      	ldrb	r2, [r3, #0]
 8017e5c:	4951      	ldr	r1, [pc, #324]	; (8017fa4 <Send_DpmInitCnf+0x354>)
 8017e5e:	0013      	movs	r3, r2
 8017e60:	005b      	lsls	r3, r3, #1
 8017e62:	189b      	adds	r3, r3, r2
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	18cb      	adds	r3, r1, r3
 8017e68:	795b      	ldrb	r3, [r3, #5]
 8017e6a:	071b      	lsls	r3, r3, #28
 8017e6c:	0f9b      	lsrs	r3, r3, #30
 8017e6e:	b2db      	uxtb	r3, r3
 8017e70:	b29a      	uxth	r2, r3
 8017e72:	193b      	adds	r3, r7, r4
 8017e74:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TRYFEATURE, 1, (uint8_t *)&settings);
 8017e76:	193b      	adds	r3, r7, r4
 8017e78:	1978      	adds	r0, r7, r5
 8017e7a:	2201      	movs	r2, #1
 8017e7c:	2110      	movs	r1, #16
 8017e7e:	f7fe faa3 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_RpResistorValue;
 8017e82:	19bb      	adds	r3, r7, r6
 8017e84:	781b      	ldrb	r3, [r3, #0]
 8017e86:	4a48      	ldr	r2, [pc, #288]	; (8017fa8 <Send_DpmInitCnf+0x358>)
 8017e88:	2168      	movs	r1, #104	; 0x68
 8017e8a:	2074      	movs	r0, #116	; 0x74
 8017e8c:	4343      	muls	r3, r0
 8017e8e:	18d3      	adds	r3, r2, r3
 8017e90:	185b      	adds	r3, r3, r1
 8017e92:	78db      	ldrb	r3, [r3, #3]
 8017e94:	06db      	lsls	r3, r3, #27
 8017e96:	0f9b      	lsrs	r3, r3, #30
 8017e98:	b2db      	uxtb	r3, r3
 8017e9a:	b29a      	uxth	r2, r3
 8017e9c:	193b      	adds	r3, r7, r4
 8017e9e:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_RPRESISTORVALUE, 1, (uint8_t *)&settings);
 8017ea0:	193b      	adds	r3, r7, r4
 8017ea2:	1978      	adds	r0, r7, r5
 8017ea4:	2201      	movs	r2, #1
 8017ea6:	2112      	movs	r1, #18
 8017ea8:	f7fe fa8e 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Support;
 8017eac:	19bb      	adds	r3, r7, r6
 8017eae:	781b      	ldrb	r3, [r3, #0]
 8017eb0:	4a3d      	ldr	r2, [pc, #244]	; (8017fa8 <Send_DpmInitCnf+0x358>)
 8017eb2:	2168      	movs	r1, #104	; 0x68
 8017eb4:	2074      	movs	r0, #116	; 0x74
 8017eb6:	4343      	muls	r3, r0
 8017eb8:	18d3      	adds	r3, r2, r3
 8017eba:	185b      	adds	r3, r3, r1
 8017ebc:	78db      	ldrb	r3, [r3, #3]
 8017ebe:	069b      	lsls	r3, r3, #26
 8017ec0:	0fdb      	lsrs	r3, r3, #31
 8017ec2:	b2db      	uxtb	r3, r3
 8017ec4:	b29a      	uxth	r2, r3
 8017ec6:	193b      	adds	r3, r7, r4
 8017ec8:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUPPORT, 1, (uint8_t *)&settings);
 8017eca:	193b      	adds	r3, r7, r4
 8017ecc:	1978      	adds	r0, r7, r5
 8017ece:	2201      	movs	r2, #1
 8017ed0:	2113      	movs	r1, #19
 8017ed2:	f7fe fa79 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Device;
 8017ed6:	19bb      	adds	r3, r7, r6
 8017ed8:	781b      	ldrb	r3, [r3, #0]
 8017eda:	4a33      	ldr	r2, [pc, #204]	; (8017fa8 <Send_DpmInitCnf+0x358>)
 8017edc:	2168      	movs	r1, #104	; 0x68
 8017ede:	2074      	movs	r0, #116	; 0x74
 8017ee0:	4343      	muls	r3, r0
 8017ee2:	18d3      	adds	r3, r2, r3
 8017ee4:	185b      	adds	r3, r3, r1
 8017ee6:	78db      	ldrb	r3, [r3, #3]
 8017ee8:	065b      	lsls	r3, r3, #25
 8017eea:	0fdb      	lsrs	r3, r3, #31
 8017eec:	b2db      	uxtb	r3, r3
 8017eee:	b29a      	uxth	r2, r3
 8017ef0:	193b      	adds	r3, r7, r4
 8017ef2:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBDEVICE, 1, (uint8_t *)&settings);
 8017ef4:	193b      	adds	r3, r7, r4
 8017ef6:	1978      	adds	r0, r7, r5
 8017ef8:	2201      	movs	r2, #1
 8017efa:	2114      	movs	r1, #20
 8017efc:	f7fe fa64 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Host;
 8017f00:	19bb      	adds	r3, r7, r6
 8017f02:	781b      	ldrb	r3, [r3, #0]
 8017f04:	4a28      	ldr	r2, [pc, #160]	; (8017fa8 <Send_DpmInitCnf+0x358>)
 8017f06:	2168      	movs	r1, #104	; 0x68
 8017f08:	2074      	movs	r0, #116	; 0x74
 8017f0a:	4343      	muls	r3, r0
 8017f0c:	18d3      	adds	r3, r2, r3
 8017f0e:	185b      	adds	r3, r3, r1
 8017f10:	78db      	ldrb	r3, [r3, #3]
 8017f12:	061b      	lsls	r3, r3, #24
 8017f14:	0fdb      	lsrs	r3, r3, #31
 8017f16:	b2db      	uxtb	r3, r3
 8017f18:	b29a      	uxth	r2, r3
 8017f1a:	193b      	adds	r3, r7, r4
 8017f1c:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBHOST, 1, (uint8_t *)&settings);
 8017f1e:	193b      	adds	r3, r7, r4
 8017f20:	1978      	adds	r0, r7, r5
 8017f22:	2201      	movs	r2, #1
 8017f24:	2115      	movs	r1, #21
 8017f26:	f7fe fa4f 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_UnconstrainedPower;
 8017f2a:	19bb      	adds	r3, r7, r6
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	4a1e      	ldr	r2, [pc, #120]	; (8017fa8 <Send_DpmInitCnf+0x358>)
 8017f30:	2168      	movs	r1, #104	; 0x68
 8017f32:	2074      	movs	r0, #116	; 0x74
 8017f34:	4343      	muls	r3, r0
 8017f36:	18d3      	adds	r3, r2, r3
 8017f38:	185b      	adds	r3, r3, r1
 8017f3a:	78db      	ldrb	r3, [r3, #3]
 8017f3c:	075b      	lsls	r3, r3, #29
 8017f3e:	0fdb      	lsrs	r3, r3, #31
 8017f40:	b2db      	uxtb	r3, r3
 8017f42:	b29a      	uxth	r2, r3
 8017f44:	193b      	adds	r3, r7, r4
 8017f46:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t *)&settings);
 8017f48:	193b      	adds	r3, r7, r4
 8017f4a:	1978      	adds	r0, r7, r5
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	2116      	movs	r1, #22
 8017f50:	f7fe fa3a 	bl	80163c8 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_SuspendSupport;
 8017f54:	19bb      	adds	r3, r7, r6
 8017f56:	781b      	ldrb	r3, [r3, #0]
 8017f58:	4a13      	ldr	r2, [pc, #76]	; (8017fa8 <Send_DpmInitCnf+0x358>)
 8017f5a:	2168      	movs	r1, #104	; 0x68
 8017f5c:	2074      	movs	r0, #116	; 0x74
 8017f5e:	4343      	muls	r3, r0
 8017f60:	18d3      	adds	r3, r2, r3
 8017f62:	185b      	adds	r3, r3, r1
 8017f64:	791b      	ldrb	r3, [r3, #4]
 8017f66:	07db      	lsls	r3, r3, #31
 8017f68:	0fdb      	lsrs	r3, r3, #31
 8017f6a:	b2db      	uxtb	r3, r3
 8017f6c:	b29a      	uxth	r2, r3
 8017f6e:	193b      	adds	r3, r7, r4
 8017f70:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t *)&settings);
 8017f72:	193b      	adds	r3, r7, r4
 8017f74:	1978      	adds	r0, r7, r5
 8017f76:	2201      	movs	r2, #1
 8017f78:	2117      	movs	r1, #23
 8017f7a:	f7fe fa25 	bl	80163c8 <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 8017f7e:	197b      	adds	r3, r7, r5
 8017f80:	0018      	movs	r0, r3
 8017f82:	f7fe fb83 	bl	801668c <TLV_deinit_encode>
}
 8017f86:	46c0      	nop			; (mov r8, r8)
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	b011      	add	sp, #68	; 0x44
 8017f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f8e:	46c0      	nop			; (mov r8, r8)
 8017f90:	20002ff8 	.word	0x20002ff8
 8017f94:	0801c2cc 	.word	0x0801c2cc
 8017f98:	20002ffc 	.word	0x20002ffc
 8017f9c:	0801c2d4 	.word	0x0801c2d4
 8017fa0:	20002fed 	.word	0x20002fed
 8017fa4:	2000003c 	.word	0x2000003c
 8017fa8:	20000050 	.word	0x20000050

08017fac <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8017fac:	b5b0      	push	{r4, r5, r7, lr}
 8017fae:	b090      	sub	sp, #64	; 0x40
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	60b9      	str	r1, [r7, #8]
 8017fb4:	607a      	str	r2, [r7, #4]
 8017fb6:	240f      	movs	r4, #15
 8017fb8:	193b      	adds	r3, r7, r4
 8017fba:	1c02      	adds	r2, r0, #0
 8017fbc:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8017fbe:	233f      	movs	r3, #63	; 0x3f
 8017fc0:	18fb      	adds	r3, r7, r3
 8017fc2:	2202      	movs	r2, #2
 8017fc4:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t process_tlv;
  TLV_ToSend_Data_t send_tlv;

  (void)TLV_init_decode(&process_tlv, instruction);
 8017fc6:	68ba      	ldr	r2, [r7, #8]
 8017fc8:	252c      	movs	r5, #44	; 0x2c
 8017fca:	197b      	adds	r3, r7, r5
 8017fcc:	0011      	movs	r1, r2
 8017fce:	0018      	movs	r0, r3
 8017fd0:	f7fe fb6e 	bl	80166b0 <TLV_init_decode>
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8017fd4:	193b      	adds	r3, r7, r4
 8017fd6:	781b      	ldrb	r3, [r3, #0]
 8017fd8:	3301      	adds	r3, #1
 8017fda:	015b      	lsls	r3, r3, #5
 8017fdc:	b25b      	sxtb	r3, r3
 8017fde:	220a      	movs	r2, #10
 8017fe0:	4313      	orrs	r3, r2
 8017fe2:	b25b      	sxtb	r3, r3
 8017fe4:	b2d9      	uxtb	r1, r3
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	2280      	movs	r2, #128	; 0x80
 8017fea:	0052      	lsls	r2, r2, #1
 8017fec:	2020      	movs	r0, #32
 8017fee:	1838      	adds	r0, r7, r0
 8017ff0:	f7fe f987 	bl	8016302 <TLV_init_encode>
  USBPD_GUI_Reject_Reason error;

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017ff4:	2318      	movs	r3, #24
 8017ff6:	18fb      	adds	r3, r7, r3
 8017ff8:	221c      	movs	r2, #28
 8017ffa:	18ba      	adds	r2, r7, r2
 8017ffc:	241e      	movs	r4, #30
 8017ffe:	1939      	adds	r1, r7, r4
 8018000:	1978      	adds	r0, r7, r5
 8018002:	f7fe fb81 	bl	8016708 <TLV_get>
  switch (tag)
 8018006:	193b      	adds	r3, r7, r4
 8018008:	781b      	ldrb	r3, [r3, #0]
 801800a:	2b2b      	cmp	r3, #43	; 0x2b
 801800c:	d900      	bls.n	8018010 <Request_MessageReq+0x64>
 801800e:	e2a8      	b.n	8018562 <Request_MessageReq+0x5b6>
 8018010:	009a      	lsls	r2, r3, #2
 8018012:	4bdb      	ldr	r3, [pc, #876]	; (8018380 <Request_MessageReq+0x3d4>)
 8018014:	18d3      	adds	r3, r2, r3
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	469f      	mov	pc, r3
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
    case GUI_MSG_GOTOMIN :
      status = USBPD_DPM_RequestGotoMin(PortNum);
 801801a:	233f      	movs	r3, #63	; 0x3f
 801801c:	18fc      	adds	r4, r7, r3
 801801e:	230f      	movs	r3, #15
 8018020:	18fb      	adds	r3, r7, r3
 8018022:	781b      	ldrb	r3, [r3, #0]
 8018024:	0018      	movs	r0, r3
 8018026:	f7fb fc8d 	bl	8013944 <USBPD_DPM_RequestGotoMin>
 801802a:	0003      	movs	r3, r0
 801802c:	7023      	strb	r3, [r4, #0]
      break;
 801802e:	e2b7      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_PING :
      status = USBPD_DPM_RequestPing(PortNum);
 8018030:	233f      	movs	r3, #63	; 0x3f
 8018032:	18fc      	adds	r4, r7, r3
 8018034:	230f      	movs	r3, #15
 8018036:	18fb      	adds	r3, r7, r3
 8018038:	781b      	ldrb	r3, [r3, #0]
 801803a:	0018      	movs	r0, r3
 801803c:	f7fb fcc8 	bl	80139d0 <USBPD_DPM_RequestPing>
 8018040:	0003      	movs	r3, r0
 8018042:	7023      	strb	r3, [r4, #0]
      break;
 8018044:	e2ac      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SRC_CAPA :
      status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 8018046:	233f      	movs	r3, #63	; 0x3f
 8018048:	18fc      	adds	r4, r7, r3
 801804a:	230f      	movs	r3, #15
 801804c:	18fb      	adds	r3, r7, r3
 801804e:	781b      	ldrb	r3, [r3, #0]
 8018050:	0018      	movs	r0, r3
 8018052:	f7fb fdc5 	bl	8013be0 <USBPD_DPM_RequestGetSourceCapability>
 8018056:	0003      	movs	r3, r0
 8018058:	7023      	strb	r3, [r4, #0]
      break;
 801805a:	e2a1      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SNK_CAPA :
      status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 801805c:	233f      	movs	r3, #63	; 0x3f
 801805e:	18fc      	adds	r4, r7, r3
 8018060:	230f      	movs	r3, #15
 8018062:	18fb      	adds	r3, r7, r3
 8018064:	781b      	ldrb	r3, [r3, #0]
 8018066:	0018      	movs	r0, r3
 8018068:	f7fb fe00 	bl	8013c6c <USBPD_DPM_RequestGetSinkCapability>
 801806c:	0003      	movs	r3, r0
 801806e:	7023      	strb	r3, [r4, #0]
      break;
 8018070:	e296      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_DR_SWAP :
      status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 8018072:	233f      	movs	r3, #63	; 0x3f
 8018074:	18fc      	adds	r4, r7, r3
 8018076:	230f      	movs	r3, #15
 8018078:	18fb      	adds	r3, r7, r3
 801807a:	781b      	ldrb	r3, [r3, #0]
 801807c:	0018      	movs	r0, r3
 801807e:	f7fb fe3b 	bl	8013cf8 <USBPD_DPM_RequestDataRoleSwap>
 8018082:	0003      	movs	r3, r0
 8018084:	7023      	strb	r3, [r4, #0]
      break;
 8018086:	e28b      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_PR_SWAP :
      status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 8018088:	233f      	movs	r3, #63	; 0x3f
 801808a:	18fc      	adds	r4, r7, r3
 801808c:	230f      	movs	r3, #15
 801808e:	18fb      	adds	r3, r7, r3
 8018090:	781b      	ldrb	r3, [r3, #0]
 8018092:	0018      	movs	r0, r3
 8018094:	f7fb fe76 	bl	8013d84 <USBPD_DPM_RequestPowerRoleSwap>
 8018098:	0003      	movs	r3, r0
 801809a:	7023      	strb	r3, [r4, #0]
      break;
 801809c:	e280      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_VCONN_SWAP :
      status = USBPD_DPM_RequestVconnSwap(PortNum);
 801809e:	233f      	movs	r3, #63	; 0x3f
 80180a0:	18fc      	adds	r4, r7, r3
 80180a2:	230f      	movs	r3, #15
 80180a4:	18fb      	adds	r3, r7, r3
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	0018      	movs	r0, r3
 80180aa:	f7fb fea1 	bl	8013df0 <USBPD_DPM_RequestVconnSwap>
 80180ae:	0003      	movs	r3, r0
 80180b0:	7023      	strb	r3, [r4, #0]
      break;
 80180b2:	e275      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_SOURCE_CAPA :
      status = USBPD_DPM_RequestSourceCapability(PortNum);
 80180b4:	233f      	movs	r3, #63	; 0x3f
 80180b6:	18fc      	adds	r4, r7, r3
 80180b8:	230f      	movs	r3, #15
 80180ba:	18fb      	adds	r3, r7, r3
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	0018      	movs	r0, r3
 80180c0:	f7fb ff26 	bl	8013f10 <USBPD_DPM_RequestSourceCapability>
 80180c4:	0003      	movs	r3, r0
 80180c6:	7023      	strb	r3, [r4, #0]
      break;
 80180c8:	e26a      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 80180ca:	233c      	movs	r3, #60	; 0x3c
 80180cc:	18fb      	adds	r3, r7, r3
 80180ce:	2200      	movs	r2, #0
 80180d0:	801a      	strh	r2, [r3, #0]
      uint8_t nb_expected_tag = 0U;
 80180d2:	233b      	movs	r3, #59	; 0x3b
 80180d4:	18fb      	adds	r3, r7, r3
 80180d6:	2200      	movs	r2, #0
 80180d8:	701a      	strb	r2, [r3, #0]
      uint8_t index_pdo = 0;
 80180da:	233a      	movs	r3, #58	; 0x3a
 80180dc:	18fb      	adds	r3, r7, r3
 80180de:	2200      	movs	r2, #0
 80180e0:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 80180e2:	211c      	movs	r1, #28
 80180e4:	187b      	adds	r3, r7, r1
 80180e6:	881a      	ldrh	r2, [r3, #0]
 80180e8:	2380      	movs	r3, #128	; 0x80
 80180ea:	005b      	lsls	r3, r3, #1
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d900      	bls.n	80180f2 <Request_MessageReq+0x146>
 80180f0:	e239      	b.n	8018566 <Request_MessageReq+0x5ba>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 80180f2:	2318      	movs	r3, #24
 80180f4:	18fb      	adds	r3, r7, r3
 80180f6:	187a      	adds	r2, r7, r1
 80180f8:	211e      	movs	r1, #30
 80180fa:	1879      	adds	r1, r7, r1
 80180fc:	202c      	movs	r0, #44	; 0x2c
 80180fe:	1838      	adds	r0, r7, r0
 8018100:	f7fe fb02 	bl	8016708 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8018104:	e02c      	b.n	8018160 <Request_MessageReq+0x1b4>
      {
        nb_expected_tag++;
 8018106:	213b      	movs	r1, #59	; 0x3b
 8018108:	187b      	adds	r3, r7, r1
 801810a:	781a      	ldrb	r2, [r3, #0]
 801810c:	187b      	adds	r3, r7, r1
 801810e:	3201      	adds	r2, #1
 8018110:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 8018112:	231e      	movs	r3, #30
 8018114:	18fb      	adds	r3, r7, r3
 8018116:	781b      	ldrb	r3, [r3, #0]
 8018118:	2b01      	cmp	r3, #1
 801811a:	d105      	bne.n	8018128 <Request_MessageReq+0x17c>
        {
          index_pdo = value[0];
 801811c:	69ba      	ldr	r2, [r7, #24]
 801811e:	233a      	movs	r3, #58	; 0x3a
 8018120:	18fb      	adds	r3, r7, r3
 8018122:	7812      	ldrb	r2, [r2, #0]
 8018124:	701a      	strb	r2, [r3, #0]
 8018126:	e011      	b.n	801814c <Request_MessageReq+0x1a0>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 8018128:	231e      	movs	r3, #30
 801812a:	18fb      	adds	r3, r7, r3
 801812c:	781b      	ldrb	r3, [r3, #0]
 801812e:	2b02      	cmp	r3, #2
 8018130:	d10c      	bne.n	801814c <Request_MessageReq+0x1a0>
        {
          voltage = USBPD_LE16(&value[0]);
 8018132:	69bb      	ldr	r3, [r7, #24]
 8018134:	781b      	ldrb	r3, [r3, #0]
 8018136:	b299      	uxth	r1, r3
 8018138:	69bb      	ldr	r3, [r7, #24]
 801813a:	3301      	adds	r3, #1
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	b29b      	uxth	r3, r3
 8018140:	021b      	lsls	r3, r3, #8
 8018142:	b29a      	uxth	r2, r3
 8018144:	233c      	movs	r3, #60	; 0x3c
 8018146:	18fb      	adds	r3, r7, r3
 8018148:	188a      	adds	r2, r1, r2
 801814a:	801a      	strh	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 801814c:	2318      	movs	r3, #24
 801814e:	18fb      	adds	r3, r7, r3
 8018150:	221c      	movs	r2, #28
 8018152:	18ba      	adds	r2, r7, r2
 8018154:	211e      	movs	r1, #30
 8018156:	1879      	adds	r1, r7, r1
 8018158:	202c      	movs	r0, #44	; 0x2c
 801815a:	1838      	adds	r0, r7, r0
 801815c:	f7fe fad4 	bl	8016708 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8018160:	221c      	movs	r2, #28
 8018162:	18bb      	adds	r3, r7, r2
 8018164:	881b      	ldrh	r3, [r3, #0]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d008      	beq.n	801817c <Request_MessageReq+0x1d0>
 801816a:	18bb      	adds	r3, r7, r2
 801816c:	881b      	ldrh	r3, [r3, #0]
 801816e:	2bff      	cmp	r3, #255	; 0xff
 8018170:	d804      	bhi.n	801817c <Request_MessageReq+0x1d0>
 8018172:	233b      	movs	r3, #59	; 0x3b
 8018174:	18fb      	adds	r3, r7, r3
 8018176:	781b      	ldrb	r3, [r3, #0]
 8018178:	2b01      	cmp	r3, #1
 801817a:	d9c4      	bls.n	8018106 <Request_MessageReq+0x15a>
      }
      if (2U == nb_expected_tag)
 801817c:	233b      	movs	r3, #59	; 0x3b
 801817e:	18fb      	adds	r3, r7, r3
 8018180:	781b      	ldrb	r3, [r3, #0]
 8018182:	2b02      	cmp	r3, #2
 8018184:	d000      	beq.n	8018188 <Request_MessageReq+0x1dc>
 8018186:	e1f0      	b.n	801856a <Request_MessageReq+0x5be>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 8018188:	233f      	movs	r3, #63	; 0x3f
 801818a:	18fc      	adds	r4, r7, r3
 801818c:	233c      	movs	r3, #60	; 0x3c
 801818e:	18fb      	adds	r3, r7, r3
 8018190:	881a      	ldrh	r2, [r3, #0]
 8018192:	233a      	movs	r3, #58	; 0x3a
 8018194:	18fb      	adds	r3, r7, r3
 8018196:	7819      	ldrb	r1, [r3, #0]
 8018198:	230f      	movs	r3, #15
 801819a:	18fb      	adds	r3, r7, r3
 801819c:	781b      	ldrb	r3, [r3, #0]
 801819e:	0018      	movs	r0, r3
 80181a0:	f7fb fc5c 	bl	8013a5c <USBPD_DPM_RequestMessageRequest>
 80181a4:	0003      	movs	r3, r0
 80181a6:	7023      	strb	r3, [r4, #0]
      }
      break;
 80181a8:	e1df      	b.n	801856a <Request_MessageReq+0x5be>
    }
    case GUI_MSG_SOFT_RESET :
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 80181aa:	2318      	movs	r3, #24
 80181ac:	18fb      	adds	r3, r7, r3
 80181ae:	221c      	movs	r2, #28
 80181b0:	18ba      	adds	r2, r7, r2
 80181b2:	241e      	movs	r4, #30
 80181b4:	1939      	adds	r1, r7, r4
 80181b6:	202c      	movs	r0, #44	; 0x2c
 80181b8:	1838      	adds	r0, r7, r0
 80181ba:	f7fe faa5 	bl	8016708 <TLV_get>
      if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 80181be:	193b      	adds	r3, r7, r4
 80181c0:	781b      	ldrb	r3, [r3, #0]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d000      	beq.n	80181c8 <Request_MessageReq+0x21c>
 80181c6:	e1d2      	b.n	801856e <Request_MessageReq+0x5c2>
      {
        status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 80181c8:	69bb      	ldr	r3, [r7, #24]
 80181ca:	781a      	ldrb	r2, [r3, #0]
 80181cc:	233f      	movs	r3, #63	; 0x3f
 80181ce:	18fc      	adds	r4, r7, r3
 80181d0:	230f      	movs	r3, #15
 80181d2:	18fb      	adds	r3, r7, r3
 80181d4:	781b      	ldrb	r3, [r3, #0]
 80181d6:	0011      	movs	r1, r2
 80181d8:	0018      	movs	r0, r3
 80181da:	f7fb fe4f 	bl	8013e7c <USBPD_DPM_RequestSoftReset>
 80181de:	0003      	movs	r3, r0
 80181e0:	7023      	strb	r3, [r4, #0]
      }
      break;
 80181e2:	e1c4      	b.n	801856e <Request_MessageReq+0x5c2>
    case GUI_MSG_HARD_RESET :
      status = USBPD_DPM_RequestHardReset(PortNum);
 80181e4:	233f      	movs	r3, #63	; 0x3f
 80181e6:	18fc      	adds	r4, r7, r3
 80181e8:	230f      	movs	r3, #15
 80181ea:	18fb      	adds	r3, r7, r3
 80181ec:	781b      	ldrb	r3, [r3, #0]
 80181ee:	0018      	movs	r0, r3
 80181f0:	f7fb fb20 	bl	8013834 <USBPD_DPM_RequestHardReset>
 80181f4:	0003      	movs	r3, r0
 80181f6:	7023      	strb	r3, [r4, #0]
      break;
 80181f8:	e1d2      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_CABLE_RESET :
      status = USBPD_DPM_RequestCableReset(PortNum);
 80181fa:	233f      	movs	r3, #63	; 0x3f
 80181fc:	18fc      	adds	r4, r7, r3
 80181fe:	230f      	movs	r3, #15
 8018200:	18fb      	adds	r3, r7, r3
 8018202:	781b      	ldrb	r3, [r3, #0]
 8018204:	0018      	movs	r0, r3
 8018206:	f7fb fb59 	bl	80138bc <USBPD_DPM_RequestCableReset>
 801820a:	0003      	movs	r3, r0
 801820c:	7023      	strb	r3, [r4, #0]
      break;
 801820e:	e1c7      	b.n	80185a0 <Request_MessageReq+0x5f4>
    }
    break;
#endif /* _VDM */
    case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0U;
 8018210:	2339      	movs	r3, #57	; 0x39
 8018212:	18fb      	adds	r3, r7, r3
 8018214:	2200      	movs	r2, #0
 8018216:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8018218:	211c      	movs	r1, #28
 801821a:	187b      	adds	r3, r7, r1
 801821c:	881a      	ldrh	r2, [r3, #0]
 801821e:	2380      	movs	r3, #128	; 0x80
 8018220:	005b      	lsls	r3, r3, #1
 8018222:	429a      	cmp	r2, r3
 8018224:	d900      	bls.n	8018228 <Request_MessageReq+0x27c>
 8018226:	e1a4      	b.n	8018572 <Request_MessageReq+0x5c6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8018228:	2318      	movs	r3, #24
 801822a:	18fb      	adds	r3, r7, r3
 801822c:	187a      	adds	r2, r7, r1
 801822e:	211e      	movs	r1, #30
 8018230:	1879      	adds	r1, r7, r1
 8018232:	202c      	movs	r0, #44	; 0x2c
 8018234:	1838      	adds	r0, r7, r0
 8018236:	f7fe fa67 	bl	8016708 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 801823a:	e005      	b.n	8018248 <Request_MessageReq+0x29c>
      {
        nb_expected_tag++;
 801823c:	2139      	movs	r1, #57	; 0x39
 801823e:	187b      	adds	r3, r7, r1
 8018240:	781a      	ldrb	r2, [r3, #0]
 8018242:	187b      	adds	r3, r7, r1
 8018244:	3201      	adds	r2, #1
 8018246:	701a      	strb	r2, [r3, #0]
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 8018248:	221c      	movs	r2, #28
 801824a:	18bb      	adds	r3, r7, r2
 801824c:	881b      	ldrh	r3, [r3, #0]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d008      	beq.n	8018264 <Request_MessageReq+0x2b8>
 8018252:	18bb      	adds	r3, r7, r2
 8018254:	881b      	ldrh	r3, [r3, #0]
 8018256:	2bff      	cmp	r3, #255	; 0xff
 8018258:	d804      	bhi.n	8018264 <Request_MessageReq+0x2b8>
 801825a:	2339      	movs	r3, #57	; 0x39
 801825c:	18fb      	adds	r3, r7, r3
 801825e:	781b      	ldrb	r3, [r3, #0]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d0eb      	beq.n	801823c <Request_MessageReq+0x290>
      }
      if (1U == nb_expected_tag)
 8018264:	2339      	movs	r3, #57	; 0x39
 8018266:	18fb      	adds	r3, r7, r3
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	2b01      	cmp	r3, #1
 801826c:	d000      	beq.n	8018270 <Request_MessageReq+0x2c4>
 801826e:	e182      	b.n	8018576 <Request_MessageReq+0x5ca>
      {
        status = Manage_FreeText(PortNum, value, length);
 8018270:	69b9      	ldr	r1, [r7, #24]
 8018272:	231c      	movs	r3, #28
 8018274:	18fb      	adds	r3, r7, r3
 8018276:	881a      	ldrh	r2, [r3, #0]
 8018278:	233f      	movs	r3, #63	; 0x3f
 801827a:	18fc      	adds	r4, r7, r3
 801827c:	230f      	movs	r3, #15
 801827e:	18fb      	adds	r3, r7, r3
 8018280:	781b      	ldrb	r3, [r3, #0]
 8018282:	0018      	movs	r0, r3
 8018284:	f001 f9d6 	bl	8019634 <Manage_FreeText>
 8018288:	0003      	movs	r3, r0
 801828a:	7023      	strb	r3, [r4, #0]
      }
      break;
 801828c:	e173      	b.n	8018576 <Request_MessageReq+0x5ca>
    }
#ifdef USBPD_REV30_SUPPORT
    case GUI_MSG_FR_SWAP :
      status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 801828e:	233f      	movs	r3, #63	; 0x3f
 8018290:	18fc      	adds	r4, r7, r3
 8018292:	230f      	movs	r3, #15
 8018294:	18fb      	adds	r3, r7, r3
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	0018      	movs	r0, r3
 801829a:	f7fc f835 	bl	8014308 <USBPD_DPM_RequestFastRoleSwap>
 801829e:	0003      	movs	r3, r0
 80182a0:	7023      	strb	r3, [r4, #0]
      break;
 80182a2:	e17d      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_PPS_STATUS :
      status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 80182a4:	233f      	movs	r3, #63	; 0x3f
 80182a6:	18fc      	adds	r4, r7, r3
 80182a8:	230f      	movs	r3, #15
 80182aa:	18fb      	adds	r3, r7, r3
 80182ac:	781b      	ldrb	r3, [r3, #0]
 80182ae:	0018      	movs	r0, r3
 80182b0:	f7fb ff9e 	bl	80141f0 <USBPD_DPM_RequestGetPPS_Status>
 80182b4:	0003      	movs	r3, r0
 80182b6:	7023      	strb	r3, [r4, #0]
      break;
 80182b8:	e172      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_COUNTRY_CODES :
      status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 80182ba:	233f      	movs	r3, #63	; 0x3f
 80182bc:	18fc      	adds	r4, r7, r3
 80182be:	230f      	movs	r3, #15
 80182c0:	18fb      	adds	r3, r7, r3
 80182c2:	781b      	ldrb	r3, [r3, #0]
 80182c4:	0018      	movs	r0, r3
 80182c6:	f7fc f865 	bl	8014394 <USBPD_DPM_RequestGetCountryCodes>
 80182ca:	0003      	movs	r3, r0
 80182cc:	7023      	strb	r3, [r4, #0]
      break;
 80182ce:	e167      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_STATUS :
      status = USBPD_DPM_RequestGetStatus(PortNum);
 80182d0:	233f      	movs	r3, #63	; 0x3f
 80182d2:	18fc      	adds	r4, r7, r3
 80182d4:	230f      	movs	r3, #15
 80182d6:	18fb      	adds	r3, r7, r3
 80182d8:	781b      	ldrb	r3, [r3, #0]
 80182da:	0018      	movs	r0, r3
 80182dc:	f7fb ffce 	bl	801427c <USBPD_DPM_RequestGetStatus>
 80182e0:	0003      	movs	r3, r0
 80182e2:	7023      	strb	r3, [r4, #0]
      break;
 80182e4:	e15c      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 80182e6:	233f      	movs	r3, #63	; 0x3f
 80182e8:	18fc      	adds	r4, r7, r3
 80182ea:	230f      	movs	r3, #15
 80182ec:	18fb      	adds	r3, r7, r3
 80182ee:	781b      	ldrb	r3, [r3, #0]
 80182f0:	0018      	movs	r0, r3
 80182f2:	f7fb fe9b 	bl	801402c <USBPD_DPM_RequestGetSourceCapabilityExt>
 80182f6:	0003      	movs	r3, r0
 80182f8:	7023      	strb	r3, [r4, #0]
      break;
 80182fa:	e151      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SINK_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 80182fc:	233f      	movs	r3, #63	; 0x3f
 80182fe:	18fc      	adds	r4, r7, r3
 8018300:	230f      	movs	r3, #15
 8018302:	18fb      	adds	r3, r7, r3
 8018304:	781b      	ldrb	r3, [r3, #0]
 8018306:	0018      	movs	r0, r3
 8018308:	f7fb fed6 	bl	80140b8 <USBPD_DPM_RequestGetSinkCapabilityExt>
 801830c:	0003      	movs	r3, r0
 801830e:	7023      	strb	r3, [r4, #0]
      break;
 8018310:	e146      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_ALERT :
      if (length > TLV_SIZE_MAX)
 8018312:	211c      	movs	r1, #28
 8018314:	187b      	adds	r3, r7, r1
 8018316:	881a      	ldrh	r2, [r3, #0]
 8018318:	2380      	movs	r3, #128	; 0x80
 801831a:	005b      	lsls	r3, r3, #1
 801831c:	429a      	cmp	r2, r3
 801831e:	d900      	bls.n	8018322 <Request_MessageReq+0x376>
 8018320:	e12b      	b.n	801857a <Request_MessageReq+0x5ce>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8018322:	2318      	movs	r3, #24
 8018324:	18fb      	adds	r3, r7, r3
 8018326:	187a      	adds	r2, r7, r1
 8018328:	241e      	movs	r4, #30
 801832a:	1939      	adds	r1, r7, r4
 801832c:	202c      	movs	r0, #44	; 0x2c
 801832e:	1838      	adds	r0, r7, r0
 8018330:	f7fe f9ea 	bl	8016708 <TLV_get>
      if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 8018334:	193b      	adds	r3, r7, r4
 8018336:	781b      	ldrb	r3, [r3, #0]
 8018338:	2b04      	cmp	r3, #4
 801833a:	d000      	beq.n	801833e <Request_MessageReq+0x392>
 801833c:	e11f      	b.n	801857e <Request_MessageReq+0x5d2>
      {
        USBPD_ADO_TypeDef alert;
        alert.d32 = USBPD_LE32(&value[0]);
 801833e:	69bb      	ldr	r3, [r7, #24]
 8018340:	781b      	ldrb	r3, [r3, #0]
 8018342:	001a      	movs	r2, r3
 8018344:	69bb      	ldr	r3, [r7, #24]
 8018346:	3301      	adds	r3, #1
 8018348:	781b      	ldrb	r3, [r3, #0]
 801834a:	021b      	lsls	r3, r3, #8
 801834c:	18d2      	adds	r2, r2, r3
 801834e:	69bb      	ldr	r3, [r7, #24]
 8018350:	3302      	adds	r3, #2
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	041b      	lsls	r3, r3, #16
 8018356:	18d2      	adds	r2, r2, r3
 8018358:	69bb      	ldr	r3, [r7, #24]
 801835a:	3303      	adds	r3, #3
 801835c:	781b      	ldrb	r3, [r3, #0]
 801835e:	061b      	lsls	r3, r3, #24
 8018360:	18d3      	adds	r3, r2, r3
 8018362:	617b      	str	r3, [r7, #20]
        status = USBPD_DPM_RequestAlert(PortNum, alert);
 8018364:	233f      	movs	r3, #63	; 0x3f
 8018366:	18fc      	adds	r4, r7, r3
 8018368:	697a      	ldr	r2, [r7, #20]
 801836a:	230f      	movs	r3, #15
 801836c:	18fb      	adds	r3, r7, r3
 801836e:	781b      	ldrb	r3, [r3, #0]
 8018370:	0011      	movs	r1, r2
 8018372:	0018      	movs	r0, r3
 8018374:	f7fb fe12 	bl	8013f9c <USBPD_DPM_RequestAlert>
 8018378:	0003      	movs	r3, r0
 801837a:	7023      	strb	r3, [r4, #0]
      }
      break;
 801837c:	e0ff      	b.n	801857e <Request_MessageReq+0x5d2>
 801837e:	46c0      	nop			; (mov r8, r8)
 8018380:	0801c6a0 	.word	0x0801c6a0
    case GUI_MSG_GET_COUNTRY_INFO :
      if (length > TLV_SIZE_MAX)
 8018384:	211c      	movs	r1, #28
 8018386:	187b      	adds	r3, r7, r1
 8018388:	881a      	ldrh	r2, [r3, #0]
 801838a:	2380      	movs	r3, #128	; 0x80
 801838c:	005b      	lsls	r3, r3, #1
 801838e:	429a      	cmp	r2, r3
 8018390:	d900      	bls.n	8018394 <Request_MessageReq+0x3e8>
 8018392:	e0f6      	b.n	8018582 <Request_MessageReq+0x5d6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8018394:	2318      	movs	r3, #24
 8018396:	18fb      	adds	r3, r7, r3
 8018398:	187a      	adds	r2, r7, r1
 801839a:	241e      	movs	r4, #30
 801839c:	1939      	adds	r1, r7, r4
 801839e:	202c      	movs	r0, #44	; 0x2c
 80183a0:	1838      	adds	r0, r7, r0
 80183a2:	f7fe f9b1 	bl	8016708 <TLV_get>
      if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 80183a6:	193b      	adds	r3, r7, r4
 80183a8:	781b      	ldrb	r3, [r3, #0]
 80183aa:	2b05      	cmp	r3, #5
 80183ac:	d000      	beq.n	80183b0 <Request_MessageReq+0x404>
 80183ae:	e0ea      	b.n	8018586 <Request_MessageReq+0x5da>
      {
        uint16_t country_code;
        country_code = USBPD_LE16(&value[0]);
 80183b0:	69bb      	ldr	r3, [r7, #24]
 80183b2:	781b      	ldrb	r3, [r3, #0]
 80183b4:	b299      	uxth	r1, r3
 80183b6:	69bb      	ldr	r3, [r7, #24]
 80183b8:	3301      	adds	r3, #1
 80183ba:	781b      	ldrb	r3, [r3, #0]
 80183bc:	b29b      	uxth	r3, r3
 80183be:	021b      	lsls	r3, r3, #8
 80183c0:	b29a      	uxth	r2, r3
 80183c2:	2034      	movs	r0, #52	; 0x34
 80183c4:	183b      	adds	r3, r7, r0
 80183c6:	188a      	adds	r2, r1, r2
 80183c8:	801a      	strh	r2, [r3, #0]
        status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 80183ca:	233f      	movs	r3, #63	; 0x3f
 80183cc:	18fc      	adds	r4, r7, r3
 80183ce:	183b      	adds	r3, r7, r0
 80183d0:	881a      	ldrh	r2, [r3, #0]
 80183d2:	230f      	movs	r3, #15
 80183d4:	18fb      	adds	r3, r7, r3
 80183d6:	781b      	ldrb	r3, [r3, #0]
 80183d8:	0011      	movs	r1, r2
 80183da:	0018      	movs	r0, r3
 80183dc:	f7fc f820 	bl	8014420 <USBPD_DPM_RequestGetCountryInfo>
 80183e0:	0003      	movs	r3, r0
 80183e2:	7023      	strb	r3, [r4, #0]
      }
      break;
 80183e4:	e0cf      	b.n	8018586 <Request_MessageReq+0x5da>
    case GUI_MSG_GET_BAT_CAPA :
      if (length > TLV_SIZE_MAX)
 80183e6:	211c      	movs	r1, #28
 80183e8:	187b      	adds	r3, r7, r1
 80183ea:	881a      	ldrh	r2, [r3, #0]
 80183ec:	2380      	movs	r3, #128	; 0x80
 80183ee:	005b      	lsls	r3, r3, #1
 80183f0:	429a      	cmp	r2, r3
 80183f2:	d900      	bls.n	80183f6 <Request_MessageReq+0x44a>
 80183f4:	e0c9      	b.n	801858a <Request_MessageReq+0x5de>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 80183f6:	2318      	movs	r3, #24
 80183f8:	18fb      	adds	r3, r7, r3
 80183fa:	187a      	adds	r2, r7, r1
 80183fc:	241e      	movs	r4, #30
 80183fe:	1939      	adds	r1, r7, r4
 8018400:	202c      	movs	r0, #44	; 0x2c
 8018402:	1838      	adds	r0, r7, r0
 8018404:	f7fe f980 	bl	8016708 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8018408:	193b      	adds	r3, r7, r4
 801840a:	781b      	ldrb	r3, [r3, #0]
 801840c:	2b0c      	cmp	r3, #12
 801840e:	d000      	beq.n	8018412 <Request_MessageReq+0x466>
 8018410:	e0bd      	b.n	801858e <Request_MessageReq+0x5e2>
      {
        status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t *)&value[0]);
 8018412:	69ba      	ldr	r2, [r7, #24]
 8018414:	233f      	movs	r3, #63	; 0x3f
 8018416:	18fc      	adds	r4, r7, r3
 8018418:	230f      	movs	r3, #15
 801841a:	18fb      	adds	r3, r7, r3
 801841c:	781b      	ldrb	r3, [r3, #0]
 801841e:	0011      	movs	r1, r2
 8018420:	0018      	movs	r0, r3
 8018422:	f7fc f847 	bl	80144b4 <USBPD_DPM_RequestGetBatteryCapability>
 8018426:	0003      	movs	r3, r0
 8018428:	7023      	strb	r3, [r4, #0]
      }
      break;
 801842a:	e0b0      	b.n	801858e <Request_MessageReq+0x5e2>
    case GUI_MSG_GET_BAT_STATUS :
      if (length > TLV_SIZE_MAX)
 801842c:	211c      	movs	r1, #28
 801842e:	187b      	adds	r3, r7, r1
 8018430:	881a      	ldrh	r2, [r3, #0]
 8018432:	2380      	movs	r3, #128	; 0x80
 8018434:	005b      	lsls	r3, r3, #1
 8018436:	429a      	cmp	r2, r3
 8018438:	d900      	bls.n	801843c <Request_MessageReq+0x490>
 801843a:	e0aa      	b.n	8018592 <Request_MessageReq+0x5e6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801843c:	2318      	movs	r3, #24
 801843e:	18fb      	adds	r3, r7, r3
 8018440:	187a      	adds	r2, r7, r1
 8018442:	241e      	movs	r4, #30
 8018444:	1939      	adds	r1, r7, r4
 8018446:	202c      	movs	r0, #44	; 0x2c
 8018448:	1838      	adds	r0, r7, r0
 801844a:	f7fe f95d 	bl	8016708 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 801844e:	193b      	adds	r3, r7, r4
 8018450:	781b      	ldrb	r3, [r3, #0]
 8018452:	2b0c      	cmp	r3, #12
 8018454:	d000      	beq.n	8018458 <Request_MessageReq+0x4ac>
 8018456:	e09e      	b.n	8018596 <Request_MessageReq+0x5ea>
      {
        status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t *)&value[0]);
 8018458:	69ba      	ldr	r2, [r7, #24]
 801845a:	233f      	movs	r3, #63	; 0x3f
 801845c:	18fc      	adds	r4, r7, r3
 801845e:	230f      	movs	r3, #15
 8018460:	18fb      	adds	r3, r7, r3
 8018462:	781b      	ldrb	r3, [r3, #0]
 8018464:	0011      	movs	r1, r2
 8018466:	0018      	movs	r0, r3
 8018468:	f7fc f86e 	bl	8014548 <USBPD_DPM_RequestGetBatteryStatus>
 801846c:	0003      	movs	r3, r0
 801846e:	7023      	strb	r3, [r4, #0]
      }
      break;
 8018470:	e091      	b.n	8018596 <Request_MessageReq+0x5ea>
    case GUI_MSG_GET_MANU_INFO :
    {
      uint8_t manu_info[2];
      uint8_t nb_expected_tag = 0U;
 8018472:	2338      	movs	r3, #56	; 0x38
 8018474:	18fb      	adds	r3, r7, r3
 8018476:	2200      	movs	r2, #0
 8018478:	701a      	strb	r2, [r3, #0]
      uint8_t sop = (uint8_t)USBPD_SOPTYPE_SOP;
 801847a:	2337      	movs	r3, #55	; 0x37
 801847c:	18fb      	adds	r3, r7, r3
 801847e:	2200      	movs	r2, #0
 8018480:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8018482:	211c      	movs	r1, #28
 8018484:	187b      	adds	r3, r7, r1
 8018486:	881a      	ldrh	r2, [r3, #0]
 8018488:	2380      	movs	r3, #128	; 0x80
 801848a:	005b      	lsls	r3, r3, #1
 801848c:	429a      	cmp	r2, r3
 801848e:	d900      	bls.n	8018492 <Request_MessageReq+0x4e6>
 8018490:	e083      	b.n	801859a <Request_MessageReq+0x5ee>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8018492:	2318      	movs	r3, #24
 8018494:	18fb      	adds	r3, r7, r3
 8018496:	187a      	adds	r2, r7, r1
 8018498:	211e      	movs	r1, #30
 801849a:	1879      	adds	r1, r7, r1
 801849c:	202c      	movs	r0, #44	; 0x2c
 801849e:	1838      	adds	r0, r7, r0
 80184a0:	f7fe f932 	bl	8016708 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 80184a4:	e02f      	b.n	8018506 <Request_MessageReq+0x55a>
      {
        nb_expected_tag++;
 80184a6:	2138      	movs	r1, #56	; 0x38
 80184a8:	187b      	adds	r3, r7, r1
 80184aa:	781a      	ldrb	r2, [r3, #0]
 80184ac:	187b      	adds	r3, r7, r1
 80184ae:	3201      	adds	r2, #1
 80184b0:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 80184b2:	231e      	movs	r3, #30
 80184b4:	18fb      	adds	r3, r7, r3
 80184b6:	781b      	ldrb	r3, [r3, #0]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d105      	bne.n	80184c8 <Request_MessageReq+0x51c>
        {
          sop = value[0];
 80184bc:	69ba      	ldr	r2, [r7, #24]
 80184be:	2337      	movs	r3, #55	; 0x37
 80184c0:	18fb      	adds	r3, r7, r3
 80184c2:	7812      	ldrb	r2, [r2, #0]
 80184c4:	701a      	strb	r2, [r3, #0]
 80184c6:	e014      	b.n	80184f2 <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 80184c8:	231e      	movs	r3, #30
 80184ca:	18fb      	adds	r3, r7, r3
 80184cc:	781b      	ldrb	r3, [r3, #0]
 80184ce:	2b0c      	cmp	r3, #12
 80184d0:	d105      	bne.n	80184de <Request_MessageReq+0x532>
        {
          manu_info[1] = value[0];
 80184d2:	69bb      	ldr	r3, [r7, #24]
 80184d4:	781a      	ldrb	r2, [r3, #0]
 80184d6:	2310      	movs	r3, #16
 80184d8:	18fb      	adds	r3, r7, r3
 80184da:	705a      	strb	r2, [r3, #1]
 80184dc:	e009      	b.n	80184f2 <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 80184de:	231e      	movs	r3, #30
 80184e0:	18fb      	adds	r3, r7, r3
 80184e2:	781b      	ldrb	r3, [r3, #0]
 80184e4:	2b0d      	cmp	r3, #13
 80184e6:	d104      	bne.n	80184f2 <Request_MessageReq+0x546>
        {
          manu_info[0] = value[0];
 80184e8:	69bb      	ldr	r3, [r7, #24]
 80184ea:	781a      	ldrb	r2, [r3, #0]
 80184ec:	2310      	movs	r3, #16
 80184ee:	18fb      	adds	r3, r7, r3
 80184f0:	701a      	strb	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 80184f2:	2318      	movs	r3, #24
 80184f4:	18fb      	adds	r3, r7, r3
 80184f6:	221c      	movs	r2, #28
 80184f8:	18ba      	adds	r2, r7, r2
 80184fa:	211e      	movs	r1, #30
 80184fc:	1879      	adds	r1, r7, r1
 80184fe:	202c      	movs	r0, #44	; 0x2c
 8018500:	1838      	adds	r0, r7, r0
 8018502:	f7fe f901 	bl	8016708 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8018506:	221c      	movs	r2, #28
 8018508:	18bb      	adds	r3, r7, r2
 801850a:	881b      	ldrh	r3, [r3, #0]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d008      	beq.n	8018522 <Request_MessageReq+0x576>
 8018510:	18bb      	adds	r3, r7, r2
 8018512:	881b      	ldrh	r3, [r3, #0]
 8018514:	2bff      	cmp	r3, #255	; 0xff
 8018516:	d804      	bhi.n	8018522 <Request_MessageReq+0x576>
 8018518:	2338      	movs	r3, #56	; 0x38
 801851a:	18fb      	adds	r3, r7, r3
 801851c:	781b      	ldrb	r3, [r3, #0]
 801851e:	2b02      	cmp	r3, #2
 8018520:	d9c1      	bls.n	80184a6 <Request_MessageReq+0x4fa>
      }
      if (3U == nb_expected_tag)
 8018522:	2338      	movs	r3, #56	; 0x38
 8018524:	18fb      	adds	r3, r7, r3
 8018526:	781b      	ldrb	r3, [r3, #0]
 8018528:	2b03      	cmp	r3, #3
 801852a:	d138      	bne.n	801859e <Request_MessageReq+0x5f2>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t *)&manu_info);
 801852c:	233f      	movs	r3, #63	; 0x3f
 801852e:	18fc      	adds	r4, r7, r3
 8018530:	2310      	movs	r3, #16
 8018532:	18fa      	adds	r2, r7, r3
 8018534:	2337      	movs	r3, #55	; 0x37
 8018536:	18fb      	adds	r3, r7, r3
 8018538:	7819      	ldrb	r1, [r3, #0]
 801853a:	230f      	movs	r3, #15
 801853c:	18fb      	adds	r3, r7, r3
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	0018      	movs	r0, r3
 8018542:	f7fb fdff 	bl	8014144 <USBPD_DPM_RequestGetManufacturerInfo>
 8018546:	0003      	movs	r3, r0
 8018548:	7023      	strb	r3, [r4, #0]
      }
      break;
 801854a:	e028      	b.n	801859e <Request_MessageReq+0x5f2>
    }
    case GUI_MSG_SECU_REQUEST :
      status = USBPD_DPM_RequestSecurityRequest(PortNum);
 801854c:	233f      	movs	r3, #63	; 0x3f
 801854e:	18fc      	adds	r4, r7, r3
 8018550:	230f      	movs	r3, #15
 8018552:	18fb      	adds	r3, r7, r3
 8018554:	781b      	ldrb	r3, [r3, #0]
 8018556:	0018      	movs	r0, r3
 8018558:	f7fc f840 	bl	80145dc <USBPD_DPM_RequestSecurityRequest>
 801855c:	0003      	movs	r3, r0
 801855e:	7023      	strb	r3, [r4, #0]
      break;
 8018560:	e01e      	b.n	80185a0 <Request_MessageReq+0x5f4>
    case GUI_MSG_FIRM_UPDATE_REQUEST :
      break;
#endif /* USBPD_REV30_SUPPORT */
    default :
      break;
 8018562:	46c0      	nop			; (mov r8, r8)
 8018564:	e01c      	b.n	80185a0 <Request_MessageReq+0x5f4>
        break;
 8018566:	46c0      	nop			; (mov r8, r8)
 8018568:	e01a      	b.n	80185a0 <Request_MessageReq+0x5f4>
      break;
 801856a:	46c0      	nop			; (mov r8, r8)
 801856c:	e018      	b.n	80185a0 <Request_MessageReq+0x5f4>
      break;
 801856e:	46c0      	nop			; (mov r8, r8)
 8018570:	e016      	b.n	80185a0 <Request_MessageReq+0x5f4>
        break;
 8018572:	46c0      	nop			; (mov r8, r8)
 8018574:	e014      	b.n	80185a0 <Request_MessageReq+0x5f4>
      break;
 8018576:	46c0      	nop			; (mov r8, r8)
 8018578:	e012      	b.n	80185a0 <Request_MessageReq+0x5f4>
        break;
 801857a:	46c0      	nop			; (mov r8, r8)
 801857c:	e010      	b.n	80185a0 <Request_MessageReq+0x5f4>
      break;
 801857e:	46c0      	nop			; (mov r8, r8)
 8018580:	e00e      	b.n	80185a0 <Request_MessageReq+0x5f4>
        break;
 8018582:	46c0      	nop			; (mov r8, r8)
 8018584:	e00c      	b.n	80185a0 <Request_MessageReq+0x5f4>
      break;
 8018586:	46c0      	nop			; (mov r8, r8)
 8018588:	e00a      	b.n	80185a0 <Request_MessageReq+0x5f4>
        break;
 801858a:	46c0      	nop			; (mov r8, r8)
 801858c:	e008      	b.n	80185a0 <Request_MessageReq+0x5f4>
      break;
 801858e:	46c0      	nop			; (mov r8, r8)
 8018590:	e006      	b.n	80185a0 <Request_MessageReq+0x5f4>
        break;
 8018592:	46c0      	nop			; (mov r8, r8)
 8018594:	e004      	b.n	80185a0 <Request_MessageReq+0x5f4>
      break;
 8018596:	46c0      	nop			; (mov r8, r8)
 8018598:	e002      	b.n	80185a0 <Request_MessageReq+0x5f4>
        break;
 801859a:	46c0      	nop			; (mov r8, r8)
 801859c:	e000      	b.n	80185a0 <Request_MessageReq+0x5f4>
      break;
 801859e:	46c0      	nop			; (mov r8, r8)
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 80185a0:	223f      	movs	r2, #63	; 0x3f
 80185a2:	18bb      	adds	r3, r7, r2
 80185a4:	781b      	ldrb	r3, [r3, #0]
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d031      	beq.n	801860e <Request_MessageReq+0x662>
  {
    switch (status)
 80185aa:	18bb      	adds	r3, r7, r2
 80185ac:	781b      	ldrb	r3, [r3, #0]
 80185ae:	2b03      	cmp	r3, #3
 80185b0:	d002      	beq.n	80185b8 <Request_MessageReq+0x60c>
 80185b2:	2b04      	cmp	r3, #4
 80185b4:	d005      	beq.n	80185c2 <Request_MessageReq+0x616>
 80185b6:	e009      	b.n	80185cc <Request_MessageReq+0x620>
    {
      case USBPD_BUSY:
        error = GUI_REJ_DPM_NOT_READY;
 80185b8:	231f      	movs	r3, #31
 80185ba:	18fb      	adds	r3, r7, r3
 80185bc:	2206      	movs	r2, #6
 80185be:	701a      	strb	r2, [r3, #0]
        break;
 80185c0:	e009      	b.n	80185d6 <Request_MessageReq+0x62a>
      case USBPD_TIMEOUT:
        error = GUI_REJ_DPM_TIMEOUT;
 80185c2:	231f      	movs	r3, #31
 80185c4:	18fb      	adds	r3, r7, r3
 80185c6:	2202      	movs	r2, #2
 80185c8:	701a      	strb	r2, [r3, #0]
        break;
 80185ca:	e004      	b.n	80185d6 <Request_MessageReq+0x62a>
      case USBPD_NOTSUPPORTED:
      case USBPD_ERROR:
      default:
        error = GUI_REJ_DPM_REJECT;
 80185cc:	231f      	movs	r3, #31
 80185ce:	18fb      	adds	r3, r7, r3
 80185d0:	2200      	movs	r2, #0
 80185d2:	701a      	strb	r2, [r3, #0]
        break;
 80185d4:	46c0      	nop			; (mov r8, r8)
    }
    TLV_deinit_encode(&send_tlv);
 80185d6:	2420      	movs	r4, #32
 80185d8:	193b      	adds	r3, r7, r4
 80185da:	0018      	movs	r0, r3
 80185dc:	f7fe f856 	bl	801668c <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX,
 80185e0:	230f      	movs	r3, #15
 80185e2:	18fb      	adds	r3, r7, r3
 80185e4:	781b      	ldrb	r3, [r3, #0]
 80185e6:	3301      	adds	r3, #1
 80185e8:	015b      	lsls	r3, r3, #5
 80185ea:	b25b      	sxtb	r3, r3
 80185ec:	220b      	movs	r2, #11
 80185ee:	4313      	orrs	r3, r2
 80185f0:	b25b      	sxtb	r3, r3
 80185f2:	b2d9      	uxtb	r1, r3
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	2280      	movs	r2, #128	; 0x80
 80185f8:	0052      	lsls	r2, r2, #1
 80185fa:	1938      	adds	r0, r7, r4
 80185fc:	f7fd fe81 	bl	8016302 <TLV_init_encode>
                          pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
    (void)TLV_addValue(&send_tlv, (uint8_t *)&error, 1);
 8018600:	231f      	movs	r3, #31
 8018602:	18f9      	adds	r1, r7, r3
 8018604:	193b      	adds	r3, r7, r4
 8018606:	2201      	movs	r2, #1
 8018608:	0018      	movs	r0, r3
 801860a:	f7fd ffab 	bl	8016564 <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 801860e:	2320      	movs	r3, #32
 8018610:	18fb      	adds	r3, r7, r3
 8018612:	0018      	movs	r0, r3
 8018614:	f7fe f83a 	bl	801668c <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 8018618:	232c      	movs	r3, #44	; 0x2c
 801861a:	18fb      	adds	r3, r7, r3
 801861c:	0018      	movs	r0, r3
 801861e:	f7fe f8cd 	bl	80167bc <TLV_deinit_decode>
}
 8018622:	46c0      	nop			; (mov r8, r8)
 8018624:	46bd      	mov	sp, r7
 8018626:	b010      	add	sp, #64	; 0x40
 8018628:	bdb0      	pop	{r4, r5, r7, pc}
 801862a:	46c0      	nop			; (mov r8, r8)

0801862c <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 801862c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801862e:	b0d5      	sub	sp, #340	; 0x154
 8018630:	af00      	add	r7, sp, #0
 8018632:	60b9      	str	r1, [r7, #8]
 8018634:	607a      	str	r2, [r7, #4]
 8018636:	4bcd      	ldr	r3, [pc, #820]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 8018638:	24a8      	movs	r4, #168	; 0xa8
 801863a:	0064      	lsls	r4, r4, #1
 801863c:	191b      	adds	r3, r3, r4
 801863e:	19db      	adds	r3, r3, r7
 8018640:	1c02      	adds	r2, r0, #0
 8018642:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 8018644:	23a7      	movs	r3, #167	; 0xa7
 8018646:	005b      	lsls	r3, r3, #1
 8018648:	18fb      	adds	r3, r7, r3
 801864a:	2200      	movs	r2, #0
 801864c:	801a      	strh	r2, [r3, #0]
  uint8_t error = 0xFF;
 801864e:	231a      	movs	r3, #26
 8018650:	33ff      	adds	r3, #255	; 0xff
 8018652:	18fb      	adds	r3, r7, r3
 8018654:	22ff      	movs	r2, #255	; 0xff
 8018656:	701a      	strb	r2, [r3, #0]
  uint8_t param_not_applicated[GUI_PARAM_ALL]; /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0U;  /* Counter of not applicated parameters */
 8018658:	234e      	movs	r3, #78	; 0x4e
 801865a:	33ff      	adds	r3, #255	; 0xff
 801865c:	18fb      	adds	r3, r7, r3
 801865e:	2200      	movs	r2, #0
 8018660:	701a      	strb	r2, [r3, #0]
  uint8_t tag;
  uint8_t flag_drp = 0;
 8018662:	23a6      	movs	r3, #166	; 0xa6
 8018664:	005b      	lsls	r3, r3, #1
 8018666:	18fb      	adds	r3, r7, r3
 8018668:	2200      	movs	r2, #0
 801866a:	701a      	strb	r2, [r3, #0]
  uint8_t tdrp = 0;
 801866c:	234c      	movs	r3, #76	; 0x4c
 801866e:	33ff      	adds	r3, #255	; 0xff
 8018670:	18fb      	adds	r3, r7, r3
 8018672:	2200      	movs	r2, #0
 8018674:	701a      	strb	r2, [r3, #0]

  (void)TLV_init_decode(&process_tlv, instruction);
 8018676:	68ba      	ldr	r2, [r7, #8]
 8018678:	2390      	movs	r3, #144	; 0x90
 801867a:	005b      	lsls	r3, r3, #1
 801867c:	18fb      	adds	r3, r7, r3
 801867e:	0011      	movs	r1, r2
 8018680:	0018      	movs	r0, r3
 8018682:	f7fe f815 	bl	80166b0 <TLV_init_decode>
  /* pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8018686:	4bb9      	ldr	r3, [pc, #740]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 8018688:	191b      	adds	r3, r3, r4
 801868a:	19db      	adds	r3, r3, r7
 801868c:	781b      	ldrb	r3, [r3, #0]
 801868e:	3301      	adds	r3, #1
 8018690:	015b      	lsls	r3, r3, #5
 8018692:	b25b      	sxtb	r3, r3
 8018694:	2207      	movs	r2, #7
 8018696:	4313      	orrs	r3, r2
 8018698:	b25b      	sxtb	r3, r3
 801869a:	b2d9      	uxtb	r1, r3
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	2280      	movs	r2, #128	; 0x80
 80186a0:	0052      	lsls	r2, r2, #1
 80186a2:	2094      	movs	r0, #148	; 0x94
 80186a4:	0040      	lsls	r0, r0, #1
 80186a6:	1838      	adds	r0, r7, r0
 80186a8:	f7fd fe2b 	bl	8016302 <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 80186ac:	e2e5      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch ((USBPD_GUI_Tag_Param)tag)
 80186ae:	4bb0      	ldr	r3, [pc, #704]	; (8018970 <Send_DpmConfigSetCnf+0x344>)
 80186b0:	22a8      	movs	r2, #168	; 0xa8
 80186b2:	0052      	lsls	r2, r2, #1
 80186b4:	189b      	adds	r3, r3, r2
 80186b6:	19db      	adds	r3, r3, r7
 80186b8:	781b      	ldrb	r3, [r3, #0]
 80186ba:	2b1c      	cmp	r3, #28
 80186bc:	d900      	bls.n	80186c0 <Send_DpmConfigSetCnf+0x94>
 80186be:	e2c3      	b.n	8018c48 <Send_DpmConfigSetCnf+0x61c>
 80186c0:	009a      	lsls	r2, r3, #2
 80186c2:	4bac      	ldr	r3, [pc, #688]	; (8018974 <Send_DpmConfigSetCnf+0x348>)
 80186c4:	18d3      	adds	r3, r2, r3
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	469f      	mov	pc, r3
    {
      case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        DPM_Settings[PortNum].PE_SupportedSOP = value[0];
 80186ca:	238e      	movs	r3, #142	; 0x8e
 80186cc:	005b      	lsls	r3, r3, #1
 80186ce:	18fb      	adds	r3, r7, r3
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	7819      	ldrb	r1, [r3, #0]
 80186d4:	4ba5      	ldr	r3, [pc, #660]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 80186d6:	22a8      	movs	r2, #168	; 0xa8
 80186d8:	0052      	lsls	r2, r2, #1
 80186da:	189b      	adds	r3, r3, r2
 80186dc:	19db      	adds	r3, r3, r7
 80186de:	781a      	ldrb	r2, [r3, #0]
 80186e0:	0008      	movs	r0, r1
 80186e2:	49a5      	ldr	r1, [pc, #660]	; (8018978 <Send_DpmConfigSetCnf+0x34c>)
 80186e4:	0013      	movs	r3, r2
 80186e6:	005b      	lsls	r3, r3, #1
 80186e8:	189b      	adds	r3, r3, r2
 80186ea:	009b      	lsls	r3, r3, #2
 80186ec:	5058      	str	r0, [r3, r1]
#endif /* !USBPDCORE_LIB_NO_PD */
        break;
 80186ee:	e2c4      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
        /*FastRoleSwap*/
        DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 80186f0:	238e      	movs	r3, #142	; 0x8e
 80186f2:	005b      	lsls	r3, r3, #1
 80186f4:	18fb      	adds	r3, r7, r3
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	7819      	ldrb	r1, [r3, #0]
 80186fa:	4b9c      	ldr	r3, [pc, #624]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 80186fc:	22a8      	movs	r2, #168	; 0xa8
 80186fe:	0052      	lsls	r2, r2, #1
 8018700:	189b      	adds	r3, r3, r2
 8018702:	19db      	adds	r3, r3, r7
 8018704:	781a      	ldrb	r2, [r3, #0]
 8018706:	2301      	movs	r3, #1
 8018708:	400b      	ands	r3, r1
 801870a:	b2d9      	uxtb	r1, r3
 801870c:	489a      	ldr	r0, [pc, #616]	; (8018978 <Send_DpmConfigSetCnf+0x34c>)
 801870e:	2408      	movs	r4, #8
 8018710:	0013      	movs	r3, r2
 8018712:	005b      	lsls	r3, r3, #1
 8018714:	189b      	adds	r3, r3, r2
 8018716:	009b      	lsls	r3, r3, #2
 8018718:	18c3      	adds	r3, r0, r3
 801871a:	191b      	adds	r3, r3, r4
 801871c:	2201      	movs	r2, #1
 801871e:	400a      	ands	r2, r1
 8018720:	1890      	adds	r0, r2, r2
 8018722:	781a      	ldrb	r2, [r3, #0]
 8018724:	2102      	movs	r1, #2
 8018726:	438a      	bics	r2, r1
 8018728:	1c11      	adds	r1, r2, #0
 801872a:	1c02      	adds	r2, r0, #0
 801872c:	430a      	orrs	r2, r1
 801872e:	701a      	strb	r2, [r3, #0]
        break;
 8018730:	e2a3      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
#endif /*USBPD_REV30_SUPPORT*/
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
        /*DataRoleSwap to UFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 8018732:	238e      	movs	r3, #142	; 0x8e
 8018734:	005b      	lsls	r3, r3, #1
 8018736:	18fb      	adds	r3, r7, r3
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	7819      	ldrb	r1, [r3, #0]
 801873c:	4b8b      	ldr	r3, [pc, #556]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 801873e:	22a8      	movs	r2, #168	; 0xa8
 8018740:	0052      	lsls	r2, r2, #1
 8018742:	189b      	adds	r3, r3, r2
 8018744:	19db      	adds	r3, r3, r7
 8018746:	781a      	ldrb	r2, [r3, #0]
 8018748:	2301      	movs	r3, #1
 801874a:	400b      	ands	r3, r1
 801874c:	b2d9      	uxtb	r1, r3
 801874e:	4b8b      	ldr	r3, [pc, #556]	; (801897c <Send_DpmConfigSetCnf+0x350>)
 8018750:	2074      	movs	r0, #116	; 0x74
 8018752:	4342      	muls	r2, r0
 8018754:	2001      	movs	r0, #1
 8018756:	4001      	ands	r1, r0
 8018758:	00cc      	lsls	r4, r1, #3
 801875a:	5cd1      	ldrb	r1, [r2, r3]
 801875c:	2008      	movs	r0, #8
 801875e:	4381      	bics	r1, r0
 8018760:	1c08      	adds	r0, r1, #0
 8018762:	1c21      	adds	r1, r4, #0
 8018764:	4301      	orrs	r1, r0
 8018766:	54d1      	strb	r1, [r2, r3]
        break;
 8018768:	e287      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
        /*DataRoleSwap to DFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 801876a:	238e      	movs	r3, #142	; 0x8e
 801876c:	005b      	lsls	r3, r3, #1
 801876e:	18fb      	adds	r3, r7, r3
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	7819      	ldrb	r1, [r3, #0]
 8018774:	4b7d      	ldr	r3, [pc, #500]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 8018776:	22a8      	movs	r2, #168	; 0xa8
 8018778:	0052      	lsls	r2, r2, #1
 801877a:	189b      	adds	r3, r3, r2
 801877c:	19db      	adds	r3, r3, r7
 801877e:	781a      	ldrb	r2, [r3, #0]
 8018780:	2301      	movs	r3, #1
 8018782:	400b      	ands	r3, r1
 8018784:	b2d9      	uxtb	r1, r3
 8018786:	4b7d      	ldr	r3, [pc, #500]	; (801897c <Send_DpmConfigSetCnf+0x350>)
 8018788:	2074      	movs	r0, #116	; 0x74
 801878a:	4342      	muls	r2, r0
 801878c:	2001      	movs	r0, #1
 801878e:	4001      	ands	r1, r0
 8018790:	008c      	lsls	r4, r1, #2
 8018792:	5cd1      	ldrb	r1, [r2, r3]
 8018794:	2004      	movs	r0, #4
 8018796:	4381      	bics	r1, r0
 8018798:	1c08      	adds	r0, r1, #0
 801879a:	1c21      	adds	r1, r4, #0
 801879c:	4301      	orrs	r1, r0
 801879e:	54d1      	strb	r1, [r2, r3]
        break;
 80187a0:	e26b      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DEFAULTPOWERROLE :
        /*DefaultPowerRole*/
        DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 80187a2:	238e      	movs	r3, #142	; 0x8e
 80187a4:	005b      	lsls	r3, r3, #1
 80187a6:	18fb      	adds	r3, r7, r3
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	7819      	ldrb	r1, [r3, #0]
 80187ac:	4b6f      	ldr	r3, [pc, #444]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 80187ae:	22a8      	movs	r2, #168	; 0xa8
 80187b0:	0052      	lsls	r2, r2, #1
 80187b2:	189b      	adds	r3, r3, r2
 80187b4:	19db      	adds	r3, r3, r7
 80187b6:	781a      	ldrb	r2, [r3, #0]
 80187b8:	2301      	movs	r3, #1
 80187ba:	400b      	ands	r3, r1
 80187bc:	b2d9      	uxtb	r1, r3
 80187be:	486e      	ldr	r0, [pc, #440]	; (8018978 <Send_DpmConfigSetCnf+0x34c>)
 80187c0:	0013      	movs	r3, r2
 80187c2:	005b      	lsls	r3, r3, #1
 80187c4:	189b      	adds	r3, r3, r2
 80187c6:	009b      	lsls	r3, r3, #2
 80187c8:	18c3      	adds	r3, r0, r3
 80187ca:	2201      	movs	r2, #1
 80187cc:	400a      	ands	r2, r1
 80187ce:	0090      	lsls	r0, r2, #2
 80187d0:	791a      	ldrb	r2, [r3, #4]
 80187d2:	2104      	movs	r1, #4
 80187d4:	438a      	bics	r2, r1
 80187d6:	1c11      	adds	r1, r2, #0
 80187d8:	1c02      	adds	r2, r0, #0
 80187da:	430a      	orrs	r2, r1
 80187dc:	711a      	strb	r2, [r3, #4]
        break;
 80187de:	e24c      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
        /*DRP_Support*/
        DPM_Settings[PortNum].PE_RoleSwap = value[0];
 80187e0:	238e      	movs	r3, #142	; 0x8e
 80187e2:	005b      	lsls	r3, r3, #1
 80187e4:	18fb      	adds	r3, r7, r3
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	7819      	ldrb	r1, [r3, #0]
 80187ea:	4b60      	ldr	r3, [pc, #384]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 80187ec:	22a8      	movs	r2, #168	; 0xa8
 80187ee:	0052      	lsls	r2, r2, #1
 80187f0:	189b      	adds	r3, r3, r2
 80187f2:	19db      	adds	r3, r3, r7
 80187f4:	781a      	ldrb	r2, [r3, #0]
 80187f6:	2301      	movs	r3, #1
 80187f8:	400b      	ands	r3, r1
 80187fa:	b2d9      	uxtb	r1, r3
 80187fc:	485e      	ldr	r0, [pc, #376]	; (8018978 <Send_DpmConfigSetCnf+0x34c>)
 80187fe:	0013      	movs	r3, r2
 8018800:	005b      	lsls	r3, r3, #1
 8018802:	189b      	adds	r3, r3, r2
 8018804:	009b      	lsls	r3, r3, #2
 8018806:	18c3      	adds	r3, r0, r3
 8018808:	2201      	movs	r2, #1
 801880a:	400a      	ands	r2, r1
 801880c:	00d0      	lsls	r0, r2, #3
 801880e:	791a      	ldrb	r2, [r3, #4]
 8018810:	2108      	movs	r1, #8
 8018812:	438a      	bics	r2, r1
 8018814:	1c11      	adds	r1, r2, #0
 8018816:	1c02      	adds	r2, r0, #0
 8018818:	430a      	orrs	r2, r1
 801881a:	711a      	strb	r2, [r3, #4]
        break;
 801881c:	e22d      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_CADROLETOGGLE :
        /*CADRoleToggle*/
        DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 801881e:	238e      	movs	r3, #142	; 0x8e
 8018820:	005b      	lsls	r3, r3, #1
 8018822:	18fb      	adds	r3, r7, r3
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	7819      	ldrb	r1, [r3, #0]
 8018828:	4b50      	ldr	r3, [pc, #320]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 801882a:	22a8      	movs	r2, #168	; 0xa8
 801882c:	0052      	lsls	r2, r2, #1
 801882e:	189b      	adds	r3, r3, r2
 8018830:	19db      	adds	r3, r3, r7
 8018832:	781a      	ldrb	r2, [r3, #0]
 8018834:	2301      	movs	r3, #1
 8018836:	400b      	ands	r3, r1
 8018838:	b2d9      	uxtb	r1, r3
 801883a:	484f      	ldr	r0, [pc, #316]	; (8018978 <Send_DpmConfigSetCnf+0x34c>)
 801883c:	0013      	movs	r3, r2
 801883e:	005b      	lsls	r3, r3, #1
 8018840:	189b      	adds	r3, r3, r2
 8018842:	009b      	lsls	r3, r3, #2
 8018844:	18c3      	adds	r3, r0, r3
 8018846:	2201      	movs	r2, #1
 8018848:	400a      	ands	r2, r1
 801884a:	0150      	lsls	r0, r2, #5
 801884c:	795a      	ldrb	r2, [r3, #5]
 801884e:	2120      	movs	r1, #32
 8018850:	438a      	bics	r2, r1
 8018852:	1c11      	adds	r1, r2, #0
 8018854:	1c02      	adds	r2, r0, #0
 8018856:	430a      	orrs	r2, r1
 8018858:	715a      	strb	r2, [r3, #5]
        break;
 801885a:	e20e      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PE_SCAP_HR :
        /*PE_SCAP_HR*/
        DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 801885c:	238e      	movs	r3, #142	; 0x8e
 801885e:	005b      	lsls	r3, r3, #1
 8018860:	18fb      	adds	r3, r7, r3
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	7819      	ldrb	r1, [r3, #0]
 8018866:	4b41      	ldr	r3, [pc, #260]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 8018868:	22a8      	movs	r2, #168	; 0xa8
 801886a:	0052      	lsls	r2, r2, #1
 801886c:	189b      	adds	r3, r3, r2
 801886e:	19db      	adds	r3, r3, r7
 8018870:	781a      	ldrb	r2, [r3, #0]
 8018872:	2301      	movs	r3, #1
 8018874:	400b      	ands	r3, r1
 8018876:	b2d9      	uxtb	r1, r3
 8018878:	483f      	ldr	r0, [pc, #252]	; (8018978 <Send_DpmConfigSetCnf+0x34c>)
 801887a:	0013      	movs	r3, r2
 801887c:	005b      	lsls	r3, r3, #1
 801887e:	189b      	adds	r3, r3, r2
 8018880:	009b      	lsls	r3, r3, #2
 8018882:	18c3      	adds	r3, r0, r3
 8018884:	01c8      	lsls	r0, r1, #7
 8018886:	791a      	ldrb	r2, [r3, #4]
 8018888:	217f      	movs	r1, #127	; 0x7f
 801888a:	400a      	ands	r2, r1
 801888c:	1c11      	adds	r1, r2, #0
 801888e:	1c02      	adds	r2, r0, #0
 8018890:	430a      	orrs	r2, r1
 8018892:	711a      	strb	r2, [r3, #4]
        break;
 8018894:	e1f1      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_VCONNSWAP :
        /*VConnSwap*/
        DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 8018896:	238e      	movs	r3, #142	; 0x8e
 8018898:	005b      	lsls	r3, r3, #1
 801889a:	18fb      	adds	r3, r7, r3
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	7819      	ldrb	r1, [r3, #0]
 80188a0:	4b32      	ldr	r3, [pc, #200]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 80188a2:	22a8      	movs	r2, #168	; 0xa8
 80188a4:	0052      	lsls	r2, r2, #1
 80188a6:	189b      	adds	r3, r3, r2
 80188a8:	19db      	adds	r3, r3, r7
 80188aa:	781a      	ldrb	r2, [r3, #0]
 80188ac:	2301      	movs	r3, #1
 80188ae:	400b      	ands	r3, r1
 80188b0:	b2d9      	uxtb	r1, r3
 80188b2:	4b32      	ldr	r3, [pc, #200]	; (801897c <Send_DpmConfigSetCnf+0x350>)
 80188b4:	2074      	movs	r0, #116	; 0x74
 80188b6:	4342      	muls	r2, r0
 80188b8:	2001      	movs	r0, #1
 80188ba:	4001      	ands	r1, r0
 80188bc:	184c      	adds	r4, r1, r1
 80188be:	5cd1      	ldrb	r1, [r2, r3]
 80188c0:	2002      	movs	r0, #2
 80188c2:	4381      	bics	r1, r0
 80188c4:	1c08      	adds	r0, r1, #0
 80188c6:	1c21      	adds	r1, r4, #0
 80188c8:	4301      	orrs	r1, r0
 80188ca:	54d1      	strb	r1, [r2, r3]
        break;
 80188cc:	e1d5      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
        DPM_Settings[PortNum].PE_VDMSupport = value[0];
        break;
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
        /* Ping Support */
        DPM_Settings[PortNum].PE_PingSupport = value[0];
 80188ce:	238e      	movs	r3, #142	; 0x8e
 80188d0:	005b      	lsls	r3, r3, #1
 80188d2:	18fb      	adds	r3, r7, r3
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	7819      	ldrb	r1, [r3, #0]
 80188d8:	4b24      	ldr	r3, [pc, #144]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 80188da:	22a8      	movs	r2, #168	; 0xa8
 80188dc:	0052      	lsls	r2, r2, #1
 80188de:	189b      	adds	r3, r3, r2
 80188e0:	19db      	adds	r3, r3, r7
 80188e2:	781a      	ldrb	r2, [r3, #0]
 80188e4:	2301      	movs	r3, #1
 80188e6:	400b      	ands	r3, r1
 80188e8:	b2d9      	uxtb	r1, r3
 80188ea:	4823      	ldr	r0, [pc, #140]	; (8018978 <Send_DpmConfigSetCnf+0x34c>)
 80188ec:	0013      	movs	r3, r2
 80188ee:	005b      	lsls	r3, r3, #1
 80188f0:	189b      	adds	r3, r3, r2
 80188f2:	009b      	lsls	r3, r3, #2
 80188f4:	18c3      	adds	r3, r0, r3
 80188f6:	2201      	movs	r2, #1
 80188f8:	400a      	ands	r2, r1
 80188fa:	0190      	lsls	r0, r2, #6
 80188fc:	791a      	ldrb	r2, [r3, #4]
 80188fe:	2140      	movs	r1, #64	; 0x40
 8018900:	438a      	bics	r2, r1
 8018902:	1c11      	adds	r1, r2, #0
 8018904:	1c02      	adds	r2, r0, #0
 8018906:	430a      	orrs	r2, r1
 8018908:	711a      	strb	r2, [r3, #4]
        break;
 801890a:	e1b6      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
        DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = USBPD_LE16(&value[0]);
 801890c:	228e      	movs	r2, #142	; 0x8e
 801890e:	0052      	lsls	r2, r2, #1
 8018910:	18bb      	adds	r3, r7, r2
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	781b      	ldrb	r3, [r3, #0]
 8018916:	b299      	uxth	r1, r3
 8018918:	18bb      	adds	r3, r7, r2
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	3301      	adds	r3, #1
 801891e:	781b      	ldrb	r3, [r3, #0]
 8018920:	b29b      	uxth	r3, r3
 8018922:	021b      	lsls	r3, r3, #8
 8018924:	b29b      	uxth	r3, r3
 8018926:	4a11      	ldr	r2, [pc, #68]	; (801896c <Send_DpmConfigSetCnf+0x340>)
 8018928:	20a8      	movs	r0, #168	; 0xa8
 801892a:	0040      	lsls	r0, r0, #1
 801892c:	1812      	adds	r2, r2, r0
 801892e:	19d2      	adds	r2, r2, r7
 8018930:	7812      	ldrb	r2, [r2, #0]
 8018932:	18cb      	adds	r3, r1, r3
 8018934:	b298      	uxth	r0, r3
 8018936:	4910      	ldr	r1, [pc, #64]	; (8018978 <Send_DpmConfigSetCnf+0x34c>)
 8018938:	0013      	movs	r3, r2
 801893a:	005b      	lsls	r3, r3, #1
 801893c:	189b      	adds	r3, r3, r2
 801893e:	009b      	lsls	r3, r3, #2
 8018940:	18cb      	adds	r3, r1, r3
 8018942:	3308      	adds	r3, #8
 8018944:	1c02      	adds	r2, r0, #0
 8018946:	801a      	strh	r2, [r3, #0]
        break;
 8018948:	e197      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSNK, 0, sizeof(PORT0_PDO_ListSNK));
 801894a:	4b0d      	ldr	r3, [pc, #52]	; (8018980 <Send_DpmConfigSetCnf+0x354>)
 801894c:	221c      	movs	r2, #28
 801894e:	2100      	movs	r1, #0
 8018950:	0018      	movs	r0, r3
 8018952:	f002 f901 	bl	801ab58 <memset>
          index_pdo = 0;
 8018956:	2300      	movs	r3, #0
 8018958:	22a2      	movs	r2, #162	; 0xa2
 801895a:	0052      	lsls	r2, r2, #1
 801895c:	18ba      	adds	r2, r7, r2
 801895e:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 8018960:	2300      	movs	r3, #0
 8018962:	22a0      	movs	r2, #160	; 0xa0
 8018964:	0052      	lsls	r2, r2, #1
 8018966:	18ba      	adds	r2, r7, r2
 8018968:	6013      	str	r3, [r2, #0]
 801896a:	e048      	b.n	80189fe <Send_DpmConfigSetCnf+0x3d2>
 801896c:	fffffebf 	.word	0xfffffebf
 8018970:	fffffec7 	.word	0xfffffec7
 8018974:	0801c750 	.word	0x0801c750
 8018978:	2000003c 	.word	0x2000003c
 801897c:	20000050 	.word	0x20000050
 8018980:	200000c8 	.word	0x200000c8
          {
            pdo = USBPD_LE32(&value[index_gui]);
 8018984:	248e      	movs	r4, #142	; 0x8e
 8018986:	0064      	lsls	r4, r4, #1
 8018988:	193b      	adds	r3, r7, r4
 801898a:	681a      	ldr	r2, [r3, #0]
 801898c:	20a0      	movs	r0, #160	; 0xa0
 801898e:	0040      	lsls	r0, r0, #1
 8018990:	183b      	adds	r3, r7, r0
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	18d3      	adds	r3, r2, r3
 8018996:	781b      	ldrb	r3, [r3, #0]
 8018998:	0019      	movs	r1, r3
 801899a:	193b      	adds	r3, r7, r4
 801899c:	681a      	ldr	r2, [r3, #0]
 801899e:	183b      	adds	r3, r7, r0
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	3301      	adds	r3, #1
 80189a4:	18d3      	adds	r3, r2, r3
 80189a6:	781b      	ldrb	r3, [r3, #0]
 80189a8:	021b      	lsls	r3, r3, #8
 80189aa:	18ca      	adds	r2, r1, r3
 80189ac:	193b      	adds	r3, r7, r4
 80189ae:	6819      	ldr	r1, [r3, #0]
 80189b0:	183b      	adds	r3, r7, r0
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	3302      	adds	r3, #2
 80189b6:	18cb      	adds	r3, r1, r3
 80189b8:	781b      	ldrb	r3, [r3, #0]
 80189ba:	041b      	lsls	r3, r3, #16
 80189bc:	18d2      	adds	r2, r2, r3
 80189be:	193b      	adds	r3, r7, r4
 80189c0:	6819      	ldr	r1, [r3, #0]
 80189c2:	183b      	adds	r3, r7, r0
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	3303      	adds	r3, #3
 80189c8:	18cb      	adds	r3, r1, r3
 80189ca:	781b      	ldrb	r3, [r3, #0]
 80189cc:	061b      	lsls	r3, r3, #24
 80189ce:	18d3      	adds	r3, r2, r3
 80189d0:	219a      	movs	r1, #154	; 0x9a
 80189d2:	0049      	lsls	r1, r1, #1
 80189d4:	187a      	adds	r2, r7, r1
 80189d6:	6013      	str	r3, [r2, #0]
            PORT0_PDO_ListSNK[index_pdo] = pdo;
 80189d8:	4b94      	ldr	r3, [pc, #592]	; (8018c2c <Send_DpmConfigSetCnf+0x600>)
 80189da:	24a2      	movs	r4, #162	; 0xa2
 80189dc:	0064      	lsls	r4, r4, #1
 80189de:	193a      	adds	r2, r7, r4
 80189e0:	6812      	ldr	r2, [r2, #0]
 80189e2:	0092      	lsls	r2, r2, #2
 80189e4:	1879      	adds	r1, r7, r1
 80189e6:	6809      	ldr	r1, [r1, #0]
 80189e8:	50d1      	str	r1, [r2, r3]
            index_pdo++;
 80189ea:	193b      	adds	r3, r7, r4
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	3301      	adds	r3, #1
 80189f0:	193a      	adds	r2, r7, r4
 80189f2:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 80189f4:	183b      	adds	r3, r7, r0
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	3304      	adds	r3, #4
 80189fa:	183a      	adds	r2, r7, r0
 80189fc:	6013      	str	r3, [r2, #0]
 80189fe:	218d      	movs	r1, #141	; 0x8d
 8018a00:	0049      	lsls	r1, r1, #1
 8018a02:	187b      	adds	r3, r7, r1
 8018a04:	881b      	ldrh	r3, [r3, #0]
 8018a06:	001a      	movs	r2, r3
 8018a08:	23a0      	movs	r3, #160	; 0xa0
 8018a0a:	005b      	lsls	r3, r3, #1
 8018a0c:	18fb      	adds	r3, r7, r3
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	4293      	cmp	r3, r2
 8018a12:	d3b7      	bcc.n	8018984 <Send_DpmConfigSetCnf+0x358>
          }
          USBPD_NbPDO[0] = (uint8_t)(size / 4U);
 8018a14:	187b      	adds	r3, r7, r1
 8018a16:	881b      	ldrh	r3, [r3, #0]
 8018a18:	089b      	lsrs	r3, r3, #2
 8018a1a:	b29b      	uxth	r3, r3
 8018a1c:	b2da      	uxtb	r2, r3
 8018a1e:	4b84      	ldr	r3, [pc, #528]	; (8018c30 <Send_DpmConfigSetCnf+0x604>)
 8018a20:	701a      	strb	r2, [r3, #0]
          UpdateSNKPowerPort0();
 8018a22:	f000 fe2f 	bl	8019684 <UpdateSNKPowerPort0>
          }
          USBPD_NbPDO[2] = (uint8_t)(size / 4U);
          UpdateSNKPowerPort1();
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 8018a26:	e128      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
#endif /* USBPD_PORT_COUNT==2 */
        break;
      }
#endif /* (_SRC) || (_DRP) */
      case GUI_PARAM_TDRP :
        tdrp = value[0];
 8018a28:	238e      	movs	r3, #142	; 0x8e
 8018a2a:	005b      	lsls	r3, r3, #1
 8018a2c:	18fb      	adds	r3, r7, r3
 8018a2e:	681a      	ldr	r2, [r3, #0]
 8018a30:	214c      	movs	r1, #76	; 0x4c
 8018a32:	31ff      	adds	r1, #255	; 0xff
 8018a34:	187b      	adds	r3, r7, r1
 8018a36:	7812      	ldrb	r2, [r2, #0]
 8018a38:	701a      	strb	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 8018a3a:	4b7e      	ldr	r3, [pc, #504]	; (8018c34 <Send_DpmConfigSetCnf+0x608>)
 8018a3c:	22a8      	movs	r2, #168	; 0xa8
 8018a3e:	0052      	lsls	r2, r2, #1
 8018a40:	189b      	adds	r3, r3, r2
 8018a42:	19db      	adds	r3, r3, r7
 8018a44:	781b      	ldrb	r3, [r3, #0]
 8018a46:	187a      	adds	r2, r7, r1
 8018a48:	7812      	ldrb	r2, [r2, #0]
 8018a4a:	217f      	movs	r1, #127	; 0x7f
 8018a4c:	400a      	ands	r2, r1
 8018a4e:	b2d4      	uxtb	r4, r2
 8018a50:	4a79      	ldr	r2, [pc, #484]	; (8018c38 <Send_DpmConfigSetCnf+0x60c>)
 8018a52:	2168      	movs	r1, #104	; 0x68
 8018a54:	2074      	movs	r0, #116	; 0x74
 8018a56:	4343      	muls	r3, r0
 8018a58:	18d3      	adds	r3, r2, r3
 8018a5a:	185b      	adds	r3, r3, r1
 8018a5c:	1c22      	adds	r2, r4, #0
 8018a5e:	1890      	adds	r0, r2, r2
 8018a60:	791a      	ldrb	r2, [r3, #4]
 8018a62:	2101      	movs	r1, #1
 8018a64:	400a      	ands	r2, r1
 8018a66:	1c11      	adds	r1, r2, #0
 8018a68:	1c02      	adds	r2, r0, #0
 8018a6a:	430a      	orrs	r2, r1
 8018a6c:	711a      	strb	r2, [r3, #4]
        flag_drp = 1;
 8018a6e:	23a6      	movs	r3, #166	; 0xa6
 8018a70:	005b      	lsls	r3, r3, #1
 8018a72:	18fb      	adds	r3, r7, r3
 8018a74:	2201      	movs	r2, #1
 8018a76:	701a      	strb	r2, [r3, #0]
        break;
 8018a78:	e0ff      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DCSRC_DRP :
        dcdrp = value[0];
 8018a7a:	238e      	movs	r3, #142	; 0x8e
 8018a7c:	005b      	lsls	r3, r3, #1
 8018a7e:	18fb      	adds	r3, r7, r3
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	781a      	ldrb	r2, [r3, #0]
 8018a84:	21a7      	movs	r1, #167	; 0xa7
 8018a86:	0049      	lsls	r1, r1, #1
 8018a88:	187b      	adds	r3, r7, r1
 8018a8a:	801a      	strh	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 8018a8c:	4b69      	ldr	r3, [pc, #420]	; (8018c34 <Send_DpmConfigSetCnf+0x608>)
 8018a8e:	22a8      	movs	r2, #168	; 0xa8
 8018a90:	0052      	lsls	r2, r2, #1
 8018a92:	189b      	adds	r3, r3, r2
 8018a94:	19db      	adds	r3, r3, r7
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	187a      	adds	r2, r7, r1
 8018a9a:	8812      	ldrh	r2, [r2, #0]
 8018a9c:	1c11      	adds	r1, r2, #0
 8018a9e:	227f      	movs	r2, #127	; 0x7f
 8018aa0:	400a      	ands	r2, r1
 8018aa2:	b2d2      	uxtb	r2, r2
 8018aa4:	4964      	ldr	r1, [pc, #400]	; (8018c38 <Send_DpmConfigSetCnf+0x60c>)
 8018aa6:	2068      	movs	r0, #104	; 0x68
 8018aa8:	2474      	movs	r4, #116	; 0x74
 8018aaa:	4363      	muls	r3, r4
 8018aac:	18cb      	adds	r3, r1, r3
 8018aae:	181b      	adds	r3, r3, r0
 8018ab0:	217f      	movs	r1, #127	; 0x7f
 8018ab2:	400a      	ands	r2, r1
 8018ab4:	0010      	movs	r0, r2
 8018ab6:	795a      	ldrb	r2, [r3, #5]
 8018ab8:	217f      	movs	r1, #127	; 0x7f
 8018aba:	438a      	bics	r2, r1
 8018abc:	1c11      	adds	r1, r2, #0
 8018abe:	1c02      	adds	r2, r0, #0
 8018ac0:	430a      	orrs	r2, r1
 8018ac2:	715a      	strb	r2, [r3, #5]
        flag_drp = 1;
 8018ac4:	23a6      	movs	r3, #166	; 0xa6
 8018ac6:	005b      	lsls	r3, r3, #1
 8018ac8:	18fb      	adds	r3, r7, r3
 8018aca:	2201      	movs	r2, #1
 8018acc:	701a      	strb	r2, [r3, #0]
        break;
 8018ace:	e0d4      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
        DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 8018ad0:	238e      	movs	r3, #142	; 0x8e
 8018ad2:	005b      	lsls	r3, r3, #1
 8018ad4:	18fb      	adds	r3, r7, r3
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	7819      	ldrb	r1, [r3, #0]
 8018ada:	4b56      	ldr	r3, [pc, #344]	; (8018c34 <Send_DpmConfigSetCnf+0x608>)
 8018adc:	22a8      	movs	r2, #168	; 0xa8
 8018ade:	0052      	lsls	r2, r2, #1
 8018ae0:	189b      	adds	r3, r3, r2
 8018ae2:	19db      	adds	r3, r3, r7
 8018ae4:	781a      	ldrb	r2, [r3, #0]
 8018ae6:	2301      	movs	r3, #1
 8018ae8:	400b      	ands	r3, r1
 8018aea:	b2d9      	uxtb	r1, r3
 8018aec:	4853      	ldr	r0, [pc, #332]	; (8018c3c <Send_DpmConfigSetCnf+0x610>)
 8018aee:	0013      	movs	r3, r2
 8018af0:	005b      	lsls	r3, r3, #1
 8018af2:	189b      	adds	r3, r3, r2
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	18c3      	adds	r3, r0, r3
 8018af8:	2201      	movs	r2, #1
 8018afa:	4011      	ands	r1, r2
 8018afc:	0008      	movs	r0, r1
 8018afe:	795a      	ldrb	r2, [r3, #5]
 8018b00:	2101      	movs	r1, #1
 8018b02:	438a      	bics	r2, r1
 8018b04:	1c11      	adds	r1, r2, #0
 8018b06:	1c02      	adds	r2, r0, #0
 8018b08:	430a      	orrs	r2, r1
 8018b0a:	715a      	strb	r2, [r3, #5]
        break;
 8018b0c:	e0b5      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
        DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 8018b0e:	238e      	movs	r3, #142	; 0x8e
 8018b10:	005b      	lsls	r3, r3, #1
 8018b12:	18fb      	adds	r3, r7, r3
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	7819      	ldrb	r1, [r3, #0]
 8018b18:	4b46      	ldr	r3, [pc, #280]	; (8018c34 <Send_DpmConfigSetCnf+0x608>)
 8018b1a:	22a8      	movs	r2, #168	; 0xa8
 8018b1c:	0052      	lsls	r2, r2, #1
 8018b1e:	189b      	adds	r3, r3, r2
 8018b20:	19db      	adds	r3, r3, r7
 8018b22:	781a      	ldrb	r2, [r3, #0]
 8018b24:	2301      	movs	r3, #1
 8018b26:	400b      	ands	r3, r1
 8018b28:	b2d9      	uxtb	r1, r3
 8018b2a:	4844      	ldr	r0, [pc, #272]	; (8018c3c <Send_DpmConfigSetCnf+0x610>)
 8018b2c:	0013      	movs	r3, r2
 8018b2e:	005b      	lsls	r3, r3, #1
 8018b30:	189b      	adds	r3, r3, r2
 8018b32:	009b      	lsls	r3, r3, #2
 8018b34:	18c3      	adds	r3, r0, r3
 8018b36:	2201      	movs	r2, #1
 8018b38:	400a      	ands	r2, r1
 8018b3a:	1890      	adds	r0, r2, r2
 8018b3c:	795a      	ldrb	r2, [r3, #5]
 8018b3e:	2102      	movs	r1, #2
 8018b40:	438a      	bics	r2, r1
 8018b42:	1c11      	adds	r1, r2, #0
 8018b44:	1c02      	adds	r2, r0, #0
 8018b46:	430a      	orrs	r2, r1
 8018b48:	715a      	strb	r2, [r3, #5]
        break;
 8018b4a:	e096      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_XID_SOP :
        DPM_ID_Settings[PortNum].XID       = USBPD_LE32(&value[0]);
 8018b4c:	208e      	movs	r0, #142	; 0x8e
 8018b4e:	0040      	lsls	r0, r0, #1
 8018b50:	183b      	adds	r3, r7, r0
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	001a      	movs	r2, r3
 8018b58:	183b      	adds	r3, r7, r0
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	781b      	ldrb	r3, [r3, #0]
 8018b60:	021b      	lsls	r3, r3, #8
 8018b62:	18d2      	adds	r2, r2, r3
 8018b64:	183b      	adds	r3, r7, r0
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	3302      	adds	r3, #2
 8018b6a:	781b      	ldrb	r3, [r3, #0]
 8018b6c:	041b      	lsls	r3, r3, #16
 8018b6e:	18d1      	adds	r1, r2, r3
 8018b70:	183b      	adds	r3, r7, r0
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	3303      	adds	r3, #3
 8018b76:	781b      	ldrb	r3, [r3, #0]
 8018b78:	061b      	lsls	r3, r3, #24
 8018b7a:	4a2e      	ldr	r2, [pc, #184]	; (8018c34 <Send_DpmConfigSetCnf+0x608>)
 8018b7c:	20a8      	movs	r0, #168	; 0xa8
 8018b7e:	0040      	lsls	r0, r0, #1
 8018b80:	1812      	adds	r2, r2, r0
 8018b82:	19d2      	adds	r2, r2, r7
 8018b84:	7812      	ldrb	r2, [r2, #0]
 8018b86:	18c9      	adds	r1, r1, r3
 8018b88:	4b2d      	ldr	r3, [pc, #180]	; (8018c40 <Send_DpmConfigSetCnf+0x614>)
 8018b8a:	00d2      	lsls	r2, r2, #3
 8018b8c:	50d1      	str	r1, [r2, r3]
        break;
 8018b8e:	e074      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_USB_VID_SOP :
        DPM_ID_Settings[PortNum].VID       = USBPD_LE16(&value[0]);
 8018b90:	228e      	movs	r2, #142	; 0x8e
 8018b92:	0052      	lsls	r2, r2, #1
 8018b94:	18bb      	adds	r3, r7, r2
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	781b      	ldrb	r3, [r3, #0]
 8018b9a:	b299      	uxth	r1, r3
 8018b9c:	18bb      	adds	r3, r7, r2
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	3301      	adds	r3, #1
 8018ba2:	781b      	ldrb	r3, [r3, #0]
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	021b      	lsls	r3, r3, #8
 8018ba8:	b29a      	uxth	r2, r3
 8018baa:	4b22      	ldr	r3, [pc, #136]	; (8018c34 <Send_DpmConfigSetCnf+0x608>)
 8018bac:	20a8      	movs	r0, #168	; 0xa8
 8018bae:	0040      	lsls	r0, r0, #1
 8018bb0:	181b      	adds	r3, r3, r0
 8018bb2:	19db      	adds	r3, r3, r7
 8018bb4:	781b      	ldrb	r3, [r3, #0]
 8018bb6:	188a      	adds	r2, r1, r2
 8018bb8:	b291      	uxth	r1, r2
 8018bba:	4a21      	ldr	r2, [pc, #132]	; (8018c40 <Send_DpmConfigSetCnf+0x614>)
 8018bbc:	00db      	lsls	r3, r3, #3
 8018bbe:	18d3      	adds	r3, r2, r3
 8018bc0:	3304      	adds	r3, #4
 8018bc2:	1c0a      	adds	r2, r1, #0
 8018bc4:	801a      	strh	r2, [r3, #0]
        break;
 8018bc6:	e058      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PID_SOP :
        DPM_ID_Settings[PortNum].PID       = USBPD_LE16(&value[0]);
 8018bc8:	228e      	movs	r2, #142	; 0x8e
 8018bca:	0052      	lsls	r2, r2, #1
 8018bcc:	18bb      	adds	r3, r7, r2
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	781b      	ldrb	r3, [r3, #0]
 8018bd2:	b299      	uxth	r1, r3
 8018bd4:	18bb      	adds	r3, r7, r2
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	3301      	adds	r3, #1
 8018bda:	781b      	ldrb	r3, [r3, #0]
 8018bdc:	b29b      	uxth	r3, r3
 8018bde:	021b      	lsls	r3, r3, #8
 8018be0:	b29a      	uxth	r2, r3
 8018be2:	4b14      	ldr	r3, [pc, #80]	; (8018c34 <Send_DpmConfigSetCnf+0x608>)
 8018be4:	20a8      	movs	r0, #168	; 0xa8
 8018be6:	0040      	lsls	r0, r0, #1
 8018be8:	181b      	adds	r3, r3, r0
 8018bea:	19db      	adds	r3, r3, r7
 8018bec:	781b      	ldrb	r3, [r3, #0]
 8018bee:	188a      	adds	r2, r1, r2
 8018bf0:	b291      	uxth	r1, r2
 8018bf2:	4a13      	ldr	r2, [pc, #76]	; (8018c40 <Send_DpmConfigSetCnf+0x614>)
 8018bf4:	00db      	lsls	r3, r3, #3
 8018bf6:	18d3      	adds	r3, r2, r3
 8018bf8:	3306      	adds	r3, #6
 8018bfa:	1c0a      	adds	r2, r1, #0
 8018bfc:	801a      	strh	r2, [r3, #0]
        break;
 8018bfe:	e03c      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
        DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = USBPD_LE16(&value[0]);
        break;
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
        /* MeasurementReporting */
        GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 8018c00:	238e      	movs	r3, #142	; 0x8e
 8018c02:	005b      	lsls	r3, r3, #1
 8018c04:	18fb      	adds	r3, r7, r3
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	4a0a      	ldr	r2, [pc, #40]	; (8018c34 <Send_DpmConfigSetCnf+0x608>)
 8018c0a:	21a8      	movs	r1, #168	; 0xa8
 8018c0c:	0049      	lsls	r1, r1, #1
 8018c0e:	1852      	adds	r2, r2, r1
 8018c10:	19d2      	adds	r2, r2, r7
 8018c12:	7812      	ldrb	r2, [r2, #0]
 8018c14:	7818      	ldrb	r0, [r3, #0]
 8018c16:	490b      	ldr	r1, [pc, #44]	; (8018c44 <Send_DpmConfigSetCnf+0x618>)
 8018c18:	0013      	movs	r3, r2
 8018c1a:	005b      	lsls	r3, r3, #1
 8018c1c:	189b      	adds	r3, r3, r2
 8018c1e:	005b      	lsls	r3, r3, #1
 8018c20:	18cb      	adds	r3, r1, r3
 8018c22:	3304      	adds	r3, #4
 8018c24:	1c02      	adds	r2, r0, #0
 8018c26:	701a      	strb	r2, [r3, #0]
        break;
 8018c28:	e027      	b.n	8018c7a <Send_DpmConfigSetCnf+0x64e>
 8018c2a:	46c0      	nop			; (mov r8, r8)
 8018c2c:	200000c8 	.word	0x200000c8
 8018c30:	200000c4 	.word	0x200000c4
 8018c34:	fffffebf 	.word	0xfffffebf
 8018c38:	20000050 	.word	0x20000050
 8018c3c:	2000003c 	.word	0x2000003c
 8018c40:	20000048 	.word	0x20000048
 8018c44:	20002de4 	.word	0x20002de4
        (void)memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
        break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default :
        error = (uint8_t)GUI_REJ_DPM_REJECT;
 8018c48:	231a      	movs	r3, #26
 8018c4a:	33ff      	adds	r3, #255	; 0xff
 8018c4c:	18fb      	adds	r3, r7, r3
 8018c4e:	2200      	movs	r2, #0
 8018c50:	701a      	strb	r2, [r3, #0]
        param_not_applicated[counter_param_not_applicated] = tag;
 8018c52:	204e      	movs	r0, #78	; 0x4e
 8018c54:	30ff      	adds	r0, #255	; 0xff
 8018c56:	183b      	adds	r3, r7, r0
 8018c58:	781b      	ldrb	r3, [r3, #0]
 8018c5a:	4a90      	ldr	r2, [pc, #576]	; (8018e9c <Send_DpmConfigSetCnf+0x870>)
 8018c5c:	24a8      	movs	r4, #168	; 0xa8
 8018c5e:	0064      	lsls	r4, r4, #1
 8018c60:	1912      	adds	r2, r2, r4
 8018c62:	19d2      	adds	r2, r2, r7
 8018c64:	7811      	ldrb	r1, [r2, #0]
 8018c66:	4a8e      	ldr	r2, [pc, #568]	; (8018ea0 <Send_DpmConfigSetCnf+0x874>)
 8018c68:	1912      	adds	r2, r2, r4
 8018c6a:	19d2      	adds	r2, r2, r7
 8018c6c:	54d1      	strb	r1, [r2, r3]
        counter_param_not_applicated++;
 8018c6e:	183b      	adds	r3, r7, r0
 8018c70:	781a      	ldrb	r2, [r3, #0]
 8018c72:	183b      	adds	r3, r7, r0
 8018c74:	3201      	adds	r2, #1
 8018c76:	701a      	strb	r2, [r3, #0]
        break;
 8018c78:	46c0      	nop			; (mov r8, r8)
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 8018c7a:	238e      	movs	r3, #142	; 0x8e
 8018c7c:	005b      	lsls	r3, r3, #1
 8018c7e:	18fb      	adds	r3, r7, r3
 8018c80:	228d      	movs	r2, #141	; 0x8d
 8018c82:	0052      	lsls	r2, r2, #1
 8018c84:	18ba      	adds	r2, r7, r2
 8018c86:	2117      	movs	r1, #23
 8018c88:	1879      	adds	r1, r7, r1
 8018c8a:	2090      	movs	r0, #144	; 0x90
 8018c8c:	0040      	lsls	r0, r0, #1
 8018c8e:	1838      	adds	r0, r7, r0
 8018c90:	f7fd fd3a 	bl	8016708 <TLV_get>
 8018c94:	0003      	movs	r3, r0
 8018c96:	2bff      	cmp	r3, #255	; 0xff
 8018c98:	d000      	beq.n	8018c9c <Send_DpmConfigSetCnf+0x670>
 8018c9a:	e508      	b.n	80186ae <Send_DpmConfigSetCnf+0x82>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1U == flag_drp)
 8018c9c:	23a6      	movs	r3, #166	; 0xa6
 8018c9e:	005b      	lsls	r3, r3, #1
 8018ca0:	18fb      	adds	r3, r7, r3
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	2b01      	cmp	r3, #1
 8018ca6:	d000      	beq.n	8018caa <Send_DpmConfigSetCnf+0x67e>
 8018ca8:	e0a2      	b.n	8018df0 <Send_DpmConfigSetCnf+0x7c4>
  {
    uint16_t calcul;
    if (0U == tdrp)
 8018caa:	244c      	movs	r4, #76	; 0x4c
 8018cac:	34ff      	adds	r4, #255	; 0xff
 8018cae:	193b      	adds	r3, r7, r4
 8018cb0:	781b      	ldrb	r3, [r3, #0]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d11c      	bne.n	8018cf0 <Send_DpmConfigSetCnf+0x6c4>
    {
      tdrp = (uint8_t)(DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 8018cb6:	4b7b      	ldr	r3, [pc, #492]	; (8018ea4 <Send_DpmConfigSetCnf+0x878>)
 8018cb8:	20a8      	movs	r0, #168	; 0xa8
 8018cba:	0040      	lsls	r0, r0, #1
 8018cbc:	181b      	adds	r3, r3, r0
 8018cbe:	19db      	adds	r3, r3, r7
 8018cc0:	781a      	ldrb	r2, [r3, #0]
 8018cc2:	4979      	ldr	r1, [pc, #484]	; (8018ea8 <Send_DpmConfigSetCnf+0x87c>)
 8018cc4:	0013      	movs	r3, r2
 8018cc6:	005b      	lsls	r3, r3, #1
 8018cc8:	189b      	adds	r3, r3, r2
 8018cca:	009b      	lsls	r3, r3, #2
 8018ccc:	18cb      	adds	r3, r1, r3
 8018cce:	3306      	adds	r3, #6
 8018cd0:	7819      	ldrb	r1, [r3, #0]
 8018cd2:	4b74      	ldr	r3, [pc, #464]	; (8018ea4 <Send_DpmConfigSetCnf+0x878>)
 8018cd4:	181b      	adds	r3, r3, r0
 8018cd6:	19db      	adds	r3, r3, r7
 8018cd8:	781a      	ldrb	r2, [r3, #0]
 8018cda:	4873      	ldr	r0, [pc, #460]	; (8018ea8 <Send_DpmConfigSetCnf+0x87c>)
 8018cdc:	0013      	movs	r3, r2
 8018cde:	005b      	lsls	r3, r3, #1
 8018ce0:	189b      	adds	r3, r3, r2
 8018ce2:	009b      	lsls	r3, r3, #2
 8018ce4:	18c3      	adds	r3, r0, r3
 8018ce6:	3307      	adds	r3, #7
 8018ce8:	781a      	ldrb	r2, [r3, #0]
 8018cea:	193b      	adds	r3, r7, r4
 8018cec:	188a      	adds	r2, r1, r2
 8018cee:	701a      	strb	r2, [r3, #0]
    }
    if (0U == dcdrp)
 8018cf0:	26a7      	movs	r6, #167	; 0xa7
 8018cf2:	0076      	lsls	r6, r6, #1
 8018cf4:	19bb      	adds	r3, r7, r6
 8018cf6:	881b      	ldrh	r3, [r3, #0]
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d133      	bne.n	8018d64 <Send_DpmConfigSetCnf+0x738>
    {
      dcdrp = (uint16_t)
              ((DPM_Settings[PortNum].CAD_SRCToggleTime * 100U)
 8018cfc:	4b69      	ldr	r3, [pc, #420]	; (8018ea4 <Send_DpmConfigSetCnf+0x878>)
 8018cfe:	24a8      	movs	r4, #168	; 0xa8
 8018d00:	0064      	lsls	r4, r4, #1
 8018d02:	191b      	adds	r3, r3, r4
 8018d04:	19db      	adds	r3, r3, r7
 8018d06:	781a      	ldrb	r2, [r3, #0]
 8018d08:	4967      	ldr	r1, [pc, #412]	; (8018ea8 <Send_DpmConfigSetCnf+0x87c>)
 8018d0a:	0013      	movs	r3, r2
 8018d0c:	005b      	lsls	r3, r3, #1
 8018d0e:	189b      	adds	r3, r3, r2
 8018d10:	009b      	lsls	r3, r3, #2
 8018d12:	18cb      	adds	r3, r1, r3
 8018d14:	3307      	adds	r3, #7
 8018d16:	781b      	ldrb	r3, [r3, #0]
 8018d18:	001a      	movs	r2, r3
 8018d1a:	2364      	movs	r3, #100	; 0x64
 8018d1c:	4353      	muls	r3, r2
 8018d1e:	0018      	movs	r0, r3
               / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime));
 8018d20:	4b60      	ldr	r3, [pc, #384]	; (8018ea4 <Send_DpmConfigSetCnf+0x878>)
 8018d22:	0025      	movs	r5, r4
 8018d24:	191b      	adds	r3, r3, r4
 8018d26:	19db      	adds	r3, r3, r7
 8018d28:	781a      	ldrb	r2, [r3, #0]
 8018d2a:	495f      	ldr	r1, [pc, #380]	; (8018ea8 <Send_DpmConfigSetCnf+0x87c>)
 8018d2c:	0013      	movs	r3, r2
 8018d2e:	005b      	lsls	r3, r3, #1
 8018d30:	189b      	adds	r3, r3, r2
 8018d32:	009b      	lsls	r3, r3, #2
 8018d34:	18cb      	adds	r3, r1, r3
 8018d36:	3306      	adds	r3, #6
 8018d38:	781b      	ldrb	r3, [r3, #0]
 8018d3a:	001c      	movs	r4, r3
 8018d3c:	4b59      	ldr	r3, [pc, #356]	; (8018ea4 <Send_DpmConfigSetCnf+0x878>)
 8018d3e:	195b      	adds	r3, r3, r5
 8018d40:	19db      	adds	r3, r3, r7
 8018d42:	781a      	ldrb	r2, [r3, #0]
 8018d44:	4958      	ldr	r1, [pc, #352]	; (8018ea8 <Send_DpmConfigSetCnf+0x87c>)
 8018d46:	0013      	movs	r3, r2
 8018d48:	005b      	lsls	r3, r3, #1
 8018d4a:	189b      	adds	r3, r3, r2
 8018d4c:	009b      	lsls	r3, r3, #2
 8018d4e:	18cb      	adds	r3, r1, r3
 8018d50:	3307      	adds	r3, #7
 8018d52:	781b      	ldrb	r3, [r3, #0]
 8018d54:	18e3      	adds	r3, r4, r3
 8018d56:	0019      	movs	r1, r3
 8018d58:	f7ed fa4a 	bl	80061f0 <__udivsi3>
 8018d5c:	0003      	movs	r3, r0
 8018d5e:	001a      	movs	r2, r3
      dcdrp = (uint16_t)
 8018d60:	19bb      	adds	r3, r7, r6
 8018d62:	801a      	strh	r2, [r3, #0]
    }
    calcul = (tdrp * dcdrp) / 100U;
 8018d64:	254c      	movs	r5, #76	; 0x4c
 8018d66:	35ff      	adds	r5, #255	; 0xff
 8018d68:	197b      	adds	r3, r7, r5
 8018d6a:	781b      	ldrb	r3, [r3, #0]
 8018d6c:	26a7      	movs	r6, #167	; 0xa7
 8018d6e:	0076      	lsls	r6, r6, #1
 8018d70:	19ba      	adds	r2, r7, r6
 8018d72:	8812      	ldrh	r2, [r2, #0]
 8018d74:	4353      	muls	r3, r2
 8018d76:	2164      	movs	r1, #100	; 0x64
 8018d78:	0018      	movs	r0, r3
 8018d7a:	f7ed fa39 	bl	80061f0 <__udivsi3>
 8018d7e:	0003      	movs	r3, r0
 8018d80:	001a      	movs	r2, r3
 8018d82:	249d      	movs	r4, #157	; 0x9d
 8018d84:	0064      	lsls	r4, r4, #1
 8018d86:	193b      	adds	r3, r7, r4
 8018d88:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 8018d8a:	4b46      	ldr	r3, [pc, #280]	; (8018ea4 <Send_DpmConfigSetCnf+0x878>)
 8018d8c:	22a8      	movs	r2, #168	; 0xa8
 8018d8e:	0052      	lsls	r2, r2, #1
 8018d90:	189b      	adds	r3, r3, r2
 8018d92:	19db      	adds	r3, r3, r7
 8018d94:	781a      	ldrb	r2, [r3, #0]
 8018d96:	193b      	adds	r3, r7, r4
 8018d98:	881b      	ldrh	r3, [r3, #0]
 8018d9a:	b2d8      	uxtb	r0, r3
 8018d9c:	4942      	ldr	r1, [pc, #264]	; (8018ea8 <Send_DpmConfigSetCnf+0x87c>)
 8018d9e:	0013      	movs	r3, r2
 8018da0:	005b      	lsls	r3, r3, #1
 8018da2:	189b      	adds	r3, r3, r2
 8018da4:	009b      	lsls	r3, r3, #2
 8018da6:	18cb      	adds	r3, r1, r3
 8018da8:	3307      	adds	r3, #7
 8018daa:	1c02      	adds	r2, r0, #0
 8018dac:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100U - dcdrp) / 100U;
 8018dae:	197b      	adds	r3, r7, r5
 8018db0:	781b      	ldrb	r3, [r3, #0]
 8018db2:	19ba      	adds	r2, r7, r6
 8018db4:	8812      	ldrh	r2, [r2, #0]
 8018db6:	2164      	movs	r1, #100	; 0x64
 8018db8:	1a8a      	subs	r2, r1, r2
 8018dba:	4353      	muls	r3, r2
 8018dbc:	2164      	movs	r1, #100	; 0x64
 8018dbe:	0018      	movs	r0, r3
 8018dc0:	f7ed fa16 	bl	80061f0 <__udivsi3>
 8018dc4:	0003      	movs	r3, r0
 8018dc6:	001a      	movs	r2, r3
 8018dc8:	193b      	adds	r3, r7, r4
 8018dca:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 8018dcc:	4b35      	ldr	r3, [pc, #212]	; (8018ea4 <Send_DpmConfigSetCnf+0x878>)
 8018dce:	22a8      	movs	r2, #168	; 0xa8
 8018dd0:	0052      	lsls	r2, r2, #1
 8018dd2:	189b      	adds	r3, r3, r2
 8018dd4:	19db      	adds	r3, r3, r7
 8018dd6:	781a      	ldrb	r2, [r3, #0]
 8018dd8:	193b      	adds	r3, r7, r4
 8018dda:	881b      	ldrh	r3, [r3, #0]
 8018ddc:	b2d8      	uxtb	r0, r3
 8018dde:	4932      	ldr	r1, [pc, #200]	; (8018ea8 <Send_DpmConfigSetCnf+0x87c>)
 8018de0:	0013      	movs	r3, r2
 8018de2:	005b      	lsls	r3, r3, #1
 8018de4:	189b      	adds	r3, r3, r2
 8018de6:	009b      	lsls	r3, r3, #2
 8018de8:	18cb      	adds	r3, r1, r3
 8018dea:	3306      	adds	r3, #6
 8018dec:	1c02      	adds	r2, r0, #0
 8018dee:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if (error != 0xFFU)
 8018df0:	241a      	movs	r4, #26
 8018df2:	34ff      	adds	r4, #255	; 0xff
 8018df4:	193b      	adds	r3, r7, r4
 8018df6:	781b      	ldrb	r3, [r3, #0]
 8018df8:	2bff      	cmp	r3, #255	; 0xff
 8018dfa:	d04b      	beq.n	8018e94 <Send_DpmConfigSetCnf+0x868>
  {
    TLV_deinit_encode(&send_tlv);
 8018dfc:	2594      	movs	r5, #148	; 0x94
 8018dfe:	006d      	lsls	r5, r5, #1
 8018e00:	197b      	adds	r3, r7, r5
 8018e02:	0018      	movs	r0, r3
 8018e04:	f7fd fc42 	bl	801668c <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 8018e08:	4b26      	ldr	r3, [pc, #152]	; (8018ea4 <Send_DpmConfigSetCnf+0x878>)
 8018e0a:	22a8      	movs	r2, #168	; 0xa8
 8018e0c:	0052      	lsls	r2, r2, #1
 8018e0e:	189b      	adds	r3, r3, r2
 8018e10:	19db      	adds	r3, r3, r7
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	3301      	adds	r3, #1
 8018e16:	015b      	lsls	r3, r3, #5
 8018e18:	b25b      	sxtb	r3, r3
 8018e1a:	2208      	movs	r2, #8
 8018e1c:	4313      	orrs	r3, r2
 8018e1e:	b25b      	sxtb	r3, r3
 8018e20:	b2d9      	uxtb	r1, r3
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	2280      	movs	r2, #128	; 0x80
 8018e26:	0052      	lsls	r2, r2, #1
 8018e28:	1978      	adds	r0, r7, r5
 8018e2a:	f7fd fa6a 	bl	8016302 <TLV_init_encode>
    (void)TLV_addValue(&send_tlv, &error, 1);
 8018e2e:	1939      	adds	r1, r7, r4
 8018e30:	197b      	adds	r3, r7, r5
 8018e32:	2201      	movs	r2, #1
 8018e34:	0018      	movs	r0, r3
 8018e36:	f7fd fb95 	bl	8016564 <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if (error != 0U)
 8018e3a:	193b      	adds	r3, r7, r4
 8018e3c:	781b      	ldrb	r3, [r3, #0]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d022      	beq.n	8018e88 <Send_DpmConfigSetCnf+0x85c>
    {
      uint32_t index;
      for (index = 0; index < counter_param_not_applicated; index++)
 8018e42:	2300      	movs	r3, #0
 8018e44:	229e      	movs	r2, #158	; 0x9e
 8018e46:	0052      	lsls	r2, r2, #1
 8018e48:	18ba      	adds	r2, r7, r2
 8018e4a:	6013      	str	r3, [r2, #0]
 8018e4c:	e012      	b.n	8018e74 <Send_DpmConfigSetCnf+0x848>
      {
        (void)TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 8018e4e:	2318      	movs	r3, #24
 8018e50:	18fa      	adds	r2, r7, r3
 8018e52:	249e      	movs	r4, #158	; 0x9e
 8018e54:	0064      	lsls	r4, r4, #1
 8018e56:	193b      	adds	r3, r7, r4
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	18d1      	adds	r1, r2, r3
 8018e5c:	2394      	movs	r3, #148	; 0x94
 8018e5e:	005b      	lsls	r3, r3, #1
 8018e60:	18fb      	adds	r3, r7, r3
 8018e62:	2201      	movs	r2, #1
 8018e64:	0018      	movs	r0, r3
 8018e66:	f7fd fb7d 	bl	8016564 <TLV_addValue>
      for (index = 0; index < counter_param_not_applicated; index++)
 8018e6a:	193b      	adds	r3, r7, r4
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	3301      	adds	r3, #1
 8018e70:	193a      	adds	r2, r7, r4
 8018e72:	6013      	str	r3, [r2, #0]
 8018e74:	234e      	movs	r3, #78	; 0x4e
 8018e76:	33ff      	adds	r3, #255	; 0xff
 8018e78:	18fb      	adds	r3, r7, r3
 8018e7a:	781b      	ldrb	r3, [r3, #0]
 8018e7c:	229e      	movs	r2, #158	; 0x9e
 8018e7e:	0052      	lsls	r2, r2, #1
 8018e80:	18ba      	adds	r2, r7, r2
 8018e82:	6812      	ldr	r2, [r2, #0]
 8018e84:	429a      	cmp	r2, r3
 8018e86:	d3e2      	bcc.n	8018e4e <Send_DpmConfigSetCnf+0x822>
      }
    }
    TLV_deinit_encode(&send_tlv);
 8018e88:	2394      	movs	r3, #148	; 0x94
 8018e8a:	005b      	lsls	r3, r3, #1
 8018e8c:	18fb      	adds	r3, r7, r3
 8018e8e:	0018      	movs	r0, r3
 8018e90:	f7fd fbfc 	bl	801668c <TLV_deinit_encode>
  }
}
 8018e94:	46c0      	nop			; (mov r8, r8)
 8018e96:	46bd      	mov	sp, r7
 8018e98:	b055      	add	sp, #340	; 0x154
 8018e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e9c:	fffffec7 	.word	0xfffffec7
 8018ea0:	fffffec8 	.word	0xfffffec8
 8018ea4:	fffffebf 	.word	0xfffffebf
 8018ea8:	2000003c 	.word	0x2000003c

08018eac <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b092      	sub	sp, #72	; 0x48
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	60b9      	str	r1, [r7, #8]
 8018eb4:	607a      	str	r2, [r7, #4]
 8018eb6:	210f      	movs	r1, #15
 8018eb8:	187b      	adds	r3, r7, r1
 8018eba:	1c02      	adds	r2, r0, #0
 8018ebc:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8018ebe:	187b      	adds	r3, r7, r1
 8018ec0:	781b      	ldrb	r3, [r3, #0]
 8018ec2:	3301      	adds	r3, #1
 8018ec4:	015b      	lsls	r3, r3, #5
 8018ec6:	b25b      	sxtb	r3, r3
 8018ec8:	2205      	movs	r2, #5
 8018eca:	4313      	orrs	r3, r2
 8018ecc:	b25b      	sxtb	r3, r3
 8018ece:	b2d9      	uxtb	r1, r3
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	2280      	movs	r2, #128	; 0x80
 8018ed4:	0052      	lsls	r2, r2, #1
 8018ed6:	2030      	movs	r0, #48	; 0x30
 8018ed8:	1838      	adds	r0, r7, r0
 8018eda:	f7fd fa12 	bl	8016302 <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 8018ede:	68bb      	ldr	r3, [r7, #8]
 8018ee0:	0018      	movs	r0, r3
 8018ee2:	f7fd fc79 	bl	80167d8 <TLV_get_string_length>
 8018ee6:	0003      	movs	r3, r0
 8018ee8:	001a      	movs	r2, r3
 8018eea:	2344      	movs	r3, #68	; 0x44
 8018eec:	18fb      	adds	r3, r7, r3
 8018eee:	3a03      	subs	r2, #3
 8018ef0:	801a      	strh	r2, [r3, #0]
  uint8_t index = 0;
 8018ef2:	2347      	movs	r3, #71	; 0x47
 8018ef4:	18fb      	adds	r3, r7, r3
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	701a      	strb	r2, [r3, #0]

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditional breaks) */
    if (0U == length)
 8018efa:	2344      	movs	r3, #68	; 0x44
 8018efc:	18fb      	adds	r3, r7, r3
 8018efe:	881b      	ldrh	r3, [r3, #0]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d104      	bne.n	8018f0e <Send_DpmConfigGetCnf+0x62>
    {
      param = (uint8_t)GUI_PARAM_ALL;
 8018f04:	2346      	movs	r3, #70	; 0x46
 8018f06:	18fb      	adds	r3, r7, r3
 8018f08:	22ff      	movs	r2, #255	; 0xff
 8018f0a:	701a      	strb	r2, [r3, #0]
 8018f0c:	e009      	b.n	8018f22 <Send_DpmConfigGetCnf+0x76>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 8018f0e:	2347      	movs	r3, #71	; 0x47
 8018f10:	18fb      	adds	r3, r7, r3
 8018f12:	781b      	ldrb	r3, [r3, #0]
 8018f14:	3307      	adds	r3, #7
 8018f16:	68ba      	ldr	r2, [r7, #8]
 8018f18:	18d2      	adds	r2, r2, r3
 8018f1a:	2346      	movs	r3, #70	; 0x46
 8018f1c:	18fb      	adds	r3, r7, r3
 8018f1e:	7812      	ldrb	r2, [r2, #0]
 8018f20:	701a      	strb	r2, [r3, #0]

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch ((USBPD_GUI_Tag_Param)param)
 8018f22:	2346      	movs	r3, #70	; 0x46
 8018f24:	18fb      	adds	r3, r7, r3
 8018f26:	781b      	ldrb	r3, [r3, #0]
 8018f28:	2b1c      	cmp	r3, #28
 8018f2a:	dc0d      	bgt.n	8018f48 <Send_DpmConfigGetCnf+0x9c>
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	da00      	bge.n	8018f32 <Send_DpmConfigGetCnf+0x86>
 8018f30:	e243      	b.n	80193ba <Send_DpmConfigGetCnf+0x50e>
 8018f32:	2b1c      	cmp	r3, #28
 8018f34:	d900      	bls.n	8018f38 <Send_DpmConfigGetCnf+0x8c>
 8018f36:	e240      	b.n	80193ba <Send_DpmConfigGetCnf+0x50e>
 8018f38:	009a      	lsls	r2, r3, #2
 8018f3a:	4b02      	ldr	r3, [pc, #8]	; (8018f44 <Send_DpmConfigGetCnf+0x98>)
 8018f3c:	18d3      	adds	r3, r2, r3
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	469f      	mov	pc, r3
 8018f42:	46c0      	nop			; (mov r8, r8)
 8018f44:	0801c7c4 	.word	0x0801c7c4
 8018f48:	2bff      	cmp	r3, #255	; 0xff
 8018f4a:	d000      	beq.n	8018f4e <Send_DpmConfigGetCnf+0xa2>
 8018f4c:	e235      	b.n	80193ba <Send_DpmConfigGetCnf+0x50e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_SupportedSOP;
 8018f4e:	230f      	movs	r3, #15
 8018f50:	18fb      	adds	r3, r7, r3
 8018f52:	781a      	ldrb	r2, [r3, #0]
 8018f54:	49ed      	ldr	r1, [pc, #948]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 8018f56:	0013      	movs	r3, r2
 8018f58:	005b      	lsls	r3, r3, #1
 8018f5a:	189b      	adds	r3, r3, r2
 8018f5c:	009b      	lsls	r3, r3, #2
 8018f5e:	585b      	ldr	r3, [r3, r1]
 8018f60:	b2da      	uxtb	r2, r3
 8018f62:	212f      	movs	r1, #47	; 0x2f
 8018f64:	187b      	adds	r3, r7, r1
 8018f66:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SOP, 1, &settings);
 8018f68:	187b      	adds	r3, r7, r1
 8018f6a:	2230      	movs	r2, #48	; 0x30
 8018f6c:	18b8      	adds	r0, r7, r2
 8018f6e:	2201      	movs	r2, #1
 8018f70:	2100      	movs	r1, #0
 8018f72:	f7fd fa29 	bl	80163c8 <TLV_add>
        if (0U != length)
 8018f76:	2344      	movs	r3, #68	; 0x44
 8018f78:	18fb      	adds	r3, r7, r3
 8018f7a:	881b      	ldrh	r3, [r3, #0]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d000      	beq.n	8018f82 <Send_DpmConfigGetCnf+0xd6>
 8018f80:	e22e      	b.n	80193e0 <Send_DpmConfigGetCnf+0x534>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 8018f82:	230f      	movs	r3, #15
 8018f84:	18fb      	adds	r3, r7, r3
 8018f86:	781a      	ldrb	r2, [r3, #0]
 8018f88:	49e0      	ldr	r1, [pc, #896]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 8018f8a:	2008      	movs	r0, #8
 8018f8c:	0013      	movs	r3, r2
 8018f8e:	005b      	lsls	r3, r3, #1
 8018f90:	189b      	adds	r3, r3, r2
 8018f92:	009b      	lsls	r3, r3, #2
 8018f94:	18cb      	adds	r3, r1, r3
 8018f96:	181b      	adds	r3, r3, r0
 8018f98:	781b      	ldrb	r3, [r3, #0]
 8018f9a:	079b      	lsls	r3, r3, #30
 8018f9c:	0fdb      	lsrs	r3, r3, #31
 8018f9e:	b2db      	uxtb	r3, r3
 8018fa0:	001a      	movs	r2, r3
 8018fa2:	212e      	movs	r1, #46	; 0x2e
 8018fa4:	187b      	adds	r3, r7, r1
 8018fa6:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_FASTROLESWAP, 1, &settings);
 8018fa8:	187b      	adds	r3, r7, r1
 8018faa:	2230      	movs	r2, #48	; 0x30
 8018fac:	18b8      	adds	r0, r7, r2
 8018fae:	2201      	movs	r2, #1
 8018fb0:	2102      	movs	r1, #2
 8018fb2:	f7fd fa09 	bl	80163c8 <TLV_add>
        if (0U != length)
 8018fb6:	2344      	movs	r3, #68	; 0x44
 8018fb8:	18fb      	adds	r3, r7, r3
 8018fba:	881b      	ldrh	r3, [r3, #0]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d000      	beq.n	8018fc2 <Send_DpmConfigGetCnf+0x116>
 8018fc0:	e210      	b.n	80193e4 <Send_DpmConfigGetCnf+0x538>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 8018fc2:	230f      	movs	r3, #15
 8018fc4:	18fb      	adds	r3, r7, r3
 8018fc6:	781a      	ldrb	r2, [r3, #0]
 8018fc8:	4bd1      	ldr	r3, [pc, #836]	; (8019310 <Send_DpmConfigGetCnf+0x464>)
 8018fca:	2174      	movs	r1, #116	; 0x74
 8018fcc:	434a      	muls	r2, r1
 8018fce:	5cd3      	ldrb	r3, [r2, r3]
 8018fd0:	071b      	lsls	r3, r3, #28
 8018fd2:	0fdb      	lsrs	r3, r3, #31
 8018fd4:	b2db      	uxtb	r3, r3
 8018fd6:	001a      	movs	r2, r3
 8018fd8:	212d      	movs	r1, #45	; 0x2d
 8018fda:	187b      	adds	r3, r7, r1
 8018fdc:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 8018fde:	187b      	adds	r3, r7, r1
 8018fe0:	2230      	movs	r2, #48	; 0x30
 8018fe2:	18b8      	adds	r0, r7, r2
 8018fe4:	2201      	movs	r2, #1
 8018fe6:	2103      	movs	r1, #3
 8018fe8:	f7fd f9ee 	bl	80163c8 <TLV_add>
        if (0U != length)
 8018fec:	2344      	movs	r3, #68	; 0x44
 8018fee:	18fb      	adds	r3, r7, r3
 8018ff0:	881b      	ldrh	r3, [r3, #0]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d000      	beq.n	8018ff8 <Send_DpmConfigGetCnf+0x14c>
 8018ff6:	e1f7      	b.n	80193e8 <Send_DpmConfigGetCnf+0x53c>
        }
      }
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 8018ff8:	230f      	movs	r3, #15
 8018ffa:	18fb      	adds	r3, r7, r3
 8018ffc:	781a      	ldrb	r2, [r3, #0]
 8018ffe:	4bc4      	ldr	r3, [pc, #784]	; (8019310 <Send_DpmConfigGetCnf+0x464>)
 8019000:	2174      	movs	r1, #116	; 0x74
 8019002:	434a      	muls	r2, r1
 8019004:	5cd3      	ldrb	r3, [r2, r3]
 8019006:	075b      	lsls	r3, r3, #29
 8019008:	0fdb      	lsrs	r3, r3, #31
 801900a:	b2db      	uxtb	r3, r3
 801900c:	001a      	movs	r2, r3
 801900e:	212c      	movs	r1, #44	; 0x2c
 8019010:	187b      	adds	r3, r7, r1
 8019012:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 8019014:	187b      	adds	r3, r7, r1
 8019016:	2230      	movs	r2, #48	; 0x30
 8019018:	18b8      	adds	r0, r7, r2
 801901a:	2201      	movs	r2, #1
 801901c:	211c      	movs	r1, #28
 801901e:	f7fd f9d3 	bl	80163c8 <TLV_add>
        if (0U != length)
 8019022:	2344      	movs	r3, #68	; 0x44
 8019024:	18fb      	adds	r3, r7, r3
 8019026:	881b      	ldrh	r3, [r3, #0]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d000      	beq.n	801902e <Send_DpmConfigGetCnf+0x182>
 801902c:	e1de      	b.n	80193ec <Send_DpmConfigGetCnf+0x540>
        }
      }
      case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_DefaultRole;
 801902e:	230f      	movs	r3, #15
 8019030:	18fb      	adds	r3, r7, r3
 8019032:	781a      	ldrb	r2, [r3, #0]
 8019034:	49b5      	ldr	r1, [pc, #724]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 8019036:	0013      	movs	r3, r2
 8019038:	005b      	lsls	r3, r3, #1
 801903a:	189b      	adds	r3, r3, r2
 801903c:	009b      	lsls	r3, r3, #2
 801903e:	18cb      	adds	r3, r1, r3
 8019040:	791b      	ldrb	r3, [r3, #4]
 8019042:	075b      	lsls	r3, r3, #29
 8019044:	0fdb      	lsrs	r3, r3, #31
 8019046:	b2db      	uxtb	r3, r3
 8019048:	001a      	movs	r2, r3
 801904a:	212b      	movs	r1, #43	; 0x2b
 801904c:	187b      	adds	r3, r7, r1
 801904e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 8019050:	187b      	adds	r3, r7, r1
 8019052:	2230      	movs	r2, #48	; 0x30
 8019054:	18b8      	adds	r0, r7, r2
 8019056:	2201      	movs	r2, #1
 8019058:	2104      	movs	r1, #4
 801905a:	f7fd f9b5 	bl	80163c8 <TLV_add>
        if (0U != length)
 801905e:	2344      	movs	r3, #68	; 0x44
 8019060:	18fb      	adds	r3, r7, r3
 8019062:	881b      	ldrh	r3, [r3, #0]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d000      	beq.n	801906a <Send_DpmConfigGetCnf+0x1be>
 8019068:	e1c2      	b.n	80193f0 <Send_DpmConfigGetCnf+0x544>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RoleSwap;
 801906a:	230f      	movs	r3, #15
 801906c:	18fb      	adds	r3, r7, r3
 801906e:	781a      	ldrb	r2, [r3, #0]
 8019070:	49a6      	ldr	r1, [pc, #664]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 8019072:	0013      	movs	r3, r2
 8019074:	005b      	lsls	r3, r3, #1
 8019076:	189b      	adds	r3, r3, r2
 8019078:	009b      	lsls	r3, r3, #2
 801907a:	18cb      	adds	r3, r1, r3
 801907c:	791b      	ldrb	r3, [r3, #4]
 801907e:	071b      	lsls	r3, r3, #28
 8019080:	0fdb      	lsrs	r3, r3, #31
 8019082:	b2db      	uxtb	r3, r3
 8019084:	001a      	movs	r2, r3
 8019086:	212a      	movs	r1, #42	; 0x2a
 8019088:	187b      	adds	r3, r7, r1
 801908a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DRP_SUPPORT, 1, &settings);
 801908c:	187b      	adds	r3, r7, r1
 801908e:	2230      	movs	r2, #48	; 0x30
 8019090:	18b8      	adds	r0, r7, r2
 8019092:	2201      	movs	r2, #1
 8019094:	2105      	movs	r1, #5
 8019096:	f7fd f997 	bl	80163c8 <TLV_add>
        if (0U != length)
 801909a:	2344      	movs	r3, #68	; 0x44
 801909c:	18fb      	adds	r3, r7, r3
 801909e:	881b      	ldrh	r3, [r3, #0]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d000      	beq.n	80190a6 <Send_DpmConfigGetCnf+0x1fa>
 80190a4:	e1a6      	b.n	80193f4 <Send_DpmConfigGetCnf+0x548>
        }
      }
      case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].CAD_RoleToggle;
 80190a6:	230f      	movs	r3, #15
 80190a8:	18fb      	adds	r3, r7, r3
 80190aa:	781a      	ldrb	r2, [r3, #0]
 80190ac:	4997      	ldr	r1, [pc, #604]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 80190ae:	0013      	movs	r3, r2
 80190b0:	005b      	lsls	r3, r3, #1
 80190b2:	189b      	adds	r3, r3, r2
 80190b4:	009b      	lsls	r3, r3, #2
 80190b6:	18cb      	adds	r3, r1, r3
 80190b8:	795b      	ldrb	r3, [r3, #5]
 80190ba:	069b      	lsls	r3, r3, #26
 80190bc:	0fdb      	lsrs	r3, r3, #31
 80190be:	b2db      	uxtb	r3, r3
 80190c0:	001a      	movs	r2, r3
 80190c2:	2129      	movs	r1, #41	; 0x29
 80190c4:	187b      	adds	r3, r7, r1
 80190c6:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_CADROLETOGGLE, 1, &settings);
 80190c8:	187b      	adds	r3, r7, r1
 80190ca:	2230      	movs	r2, #48	; 0x30
 80190cc:	18b8      	adds	r0, r7, r2
 80190ce:	2201      	movs	r2, #1
 80190d0:	2106      	movs	r1, #6
 80190d2:	f7fd f979 	bl	80163c8 <TLV_add>
        if (0U != length)
 80190d6:	2344      	movs	r3, #68	; 0x44
 80190d8:	18fb      	adds	r3, r7, r3
 80190da:	881b      	ldrh	r3, [r3, #0]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d000      	beq.n	80190e2 <Send_DpmConfigGetCnf+0x236>
 80190e0:	e18a      	b.n	80193f8 <Send_DpmConfigGetCnf+0x54c>
        }
      }
      case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_CapscounterSupport;
 80190e2:	230f      	movs	r3, #15
 80190e4:	18fb      	adds	r3, r7, r3
 80190e6:	781a      	ldrb	r2, [r3, #0]
 80190e8:	4988      	ldr	r1, [pc, #544]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 80190ea:	0013      	movs	r3, r2
 80190ec:	005b      	lsls	r3, r3, #1
 80190ee:	189b      	adds	r3, r3, r2
 80190f0:	009b      	lsls	r3, r3, #2
 80190f2:	18cb      	adds	r3, r1, r3
 80190f4:	791b      	ldrb	r3, [r3, #4]
 80190f6:	061b      	lsls	r3, r3, #24
 80190f8:	0fdb      	lsrs	r3, r3, #31
 80190fa:	b2db      	uxtb	r3, r3
 80190fc:	001a      	movs	r2, r3
 80190fe:	2128      	movs	r1, #40	; 0x28
 8019100:	187b      	adds	r3, r7, r1
 8019102:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8019104:	187b      	adds	r3, r7, r1
 8019106:	2230      	movs	r2, #48	; 0x30
 8019108:	18b8      	adds	r0, r7, r2
 801910a:	2201      	movs	r2, #1
 801910c:	2107      	movs	r1, #7
 801910e:	f7fd f95b 	bl	80163c8 <TLV_add>
        if (0U != length)
 8019112:	2344      	movs	r3, #68	; 0x44
 8019114:	18fb      	adds	r3, r7, r3
 8019116:	881b      	ldrh	r3, [r3, #0]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d000      	beq.n	801911e <Send_DpmConfigGetCnf+0x272>
 801911c:	e16e      	b.n	80193fc <Send_DpmConfigGetCnf+0x550>
      }
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PingSupport;
 801911e:	230f      	movs	r3, #15
 8019120:	18fb      	adds	r3, r7, r3
 8019122:	781a      	ldrb	r2, [r3, #0]
 8019124:	4979      	ldr	r1, [pc, #484]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 8019126:	0013      	movs	r3, r2
 8019128:	005b      	lsls	r3, r3, #1
 801912a:	189b      	adds	r3, r3, r2
 801912c:	009b      	lsls	r3, r3, #2
 801912e:	18cb      	adds	r3, r1, r3
 8019130:	791b      	ldrb	r3, [r3, #4]
 8019132:	065b      	lsls	r3, r3, #25
 8019134:	0fdb      	lsrs	r3, r3, #31
 8019136:	b2db      	uxtb	r3, r3
 8019138:	001a      	movs	r2, r3
 801913a:	2127      	movs	r1, #39	; 0x27
 801913c:	187b      	adds	r3, r7, r1
 801913e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PING_SUPPORT, 1, &settings);
 8019140:	187b      	adds	r3, r7, r1
 8019142:	2230      	movs	r2, #48	; 0x30
 8019144:	18b8      	adds	r0, r7, r2
 8019146:	2201      	movs	r2, #1
 8019148:	210a      	movs	r1, #10
 801914a:	f7fd f93d 	bl	80163c8 <TLV_add>
        if (0U != length)
 801914e:	2344      	movs	r3, #68	; 0x44
 8019150:	18fb      	adds	r3, r7, r3
 8019152:	881b      	ldrh	r3, [r3, #0]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d000      	beq.n	801915a <Send_DpmConfigGetCnf+0x2ae>
 8019158:	e152      	b.n	8019400 <Send_DpmConfigGetCnf+0x554>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = (uint16_t)DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 801915a:	230f      	movs	r3, #15
 801915c:	18fb      	adds	r3, r7, r3
 801915e:	781a      	ldrb	r2, [r3, #0]
 8019160:	496a      	ldr	r1, [pc, #424]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 8019162:	0013      	movs	r3, r2
 8019164:	005b      	lsls	r3, r3, #1
 8019166:	189b      	adds	r3, r3, r2
 8019168:	009b      	lsls	r3, r3, #2
 801916a:	18cb      	adds	r3, r1, r3
 801916c:	3308      	adds	r3, #8
 801916e:	881a      	ldrh	r2, [r3, #0]
 8019170:	2124      	movs	r1, #36	; 0x24
 8019172:	187b      	adds	r3, r7, r1
 8019174:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PPS_SUPPORT, 2, (uint8_t *)&settings);
 8019176:	187b      	adds	r3, r7, r1
 8019178:	2230      	movs	r2, #48	; 0x30
 801917a:	18b8      	adds	r0, r7, r2
 801917c:	2202      	movs	r2, #2
 801917e:	210b      	movs	r1, #11
 8019180:	f7fd f922 	bl	80163c8 <TLV_add>
        if (0U != length)
 8019184:	2344      	movs	r3, #68	; 0x44
 8019186:	18fb      	adds	r3, r7, r3
 8019188:	881b      	ldrh	r3, [r3, #0]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d000      	beq.n	8019190 <Send_DpmConfigGetCnf+0x2e4>
 801918e:	e139      	b.n	8019404 <Send_DpmConfigGetCnf+0x558>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_VconnSwap;
 8019190:	230f      	movs	r3, #15
 8019192:	18fb      	adds	r3, r7, r3
 8019194:	781a      	ldrb	r2, [r3, #0]
 8019196:	4b5e      	ldr	r3, [pc, #376]	; (8019310 <Send_DpmConfigGetCnf+0x464>)
 8019198:	2174      	movs	r1, #116	; 0x74
 801919a:	434a      	muls	r2, r1
 801919c:	5cd3      	ldrb	r3, [r2, r3]
 801919e:	079b      	lsls	r3, r3, #30
 80191a0:	0fdb      	lsrs	r3, r3, #31
 80191a2:	b2db      	uxtb	r3, r3
 80191a4:	001a      	movs	r2, r3
 80191a6:	2123      	movs	r1, #35	; 0x23
 80191a8:	187b      	adds	r3, r7, r1
 80191aa:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_VCONNSWAP, 1, &settings);
 80191ac:	187b      	adds	r3, r7, r1
 80191ae:	2230      	movs	r2, #48	; 0x30
 80191b0:	18b8      	adds	r0, r7, r2
 80191b2:	2201      	movs	r2, #1
 80191b4:	2108      	movs	r1, #8
 80191b6:	f7fd f907 	bl	80163c8 <TLV_add>
        if (0U != length)
 80191ba:	2344      	movs	r3, #68	; 0x44
 80191bc:	18fb      	adds	r3, r7, r3
 80191be:	881b      	ldrh	r3, [r3, #0]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d000      	beq.n	80191c6 <Send_DpmConfigGetCnf+0x31a>
 80191c4:	e120      	b.n	8019408 <Send_DpmConfigGetCnf+0x55c>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[0];
 80191c6:	2143      	movs	r1, #67	; 0x43
 80191c8:	187b      	adds	r3, r7, r1
 80191ca:	4a52      	ldr	r2, [pc, #328]	; (8019314 <Send_DpmConfigGetCnf+0x468>)
 80191cc:	7812      	ldrb	r2, [r2, #0]
 80191ce:	701a      	strb	r2, [r3, #0]
          list_pdo  = (uint8_t *)PORT0_PDO_ListSNK;
 80191d0:	4b51      	ldr	r3, [pc, #324]	; (8019318 <Send_DpmConfigGetCnf+0x46c>)
 80191d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[2];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSNK;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SNK_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 80191d4:	187b      	adds	r3, r7, r1
 80191d6:	781b      	ldrb	r3, [r3, #0]
 80191d8:	b29b      	uxth	r3, r3
 80191da:	009b      	lsls	r3, r3, #2
 80191dc:	b29a      	uxth	r2, r3
 80191de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191e0:	2130      	movs	r1, #48	; 0x30
 80191e2:	1878      	adds	r0, r7, r1
 80191e4:	210c      	movs	r1, #12
 80191e6:	f7fd f8ef 	bl	80163c8 <TLV_add>
      }
      if (0U != length)
 80191ea:	2344      	movs	r3, #68	; 0x44
 80191ec:	18fb      	adds	r3, r7, r3
 80191ee:	881b      	ldrh	r3, [r3, #0]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d000      	beq.n	80191f6 <Send_DpmConfigGetCnf+0x34a>
 80191f4:	e10a      	b.n	801940c <Send_DpmConfigGetCnf+0x560>
      }
#endif /* _SRC || _DRP */
      case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_tDRP;
 80191f6:	230f      	movs	r3, #15
 80191f8:	18fb      	adds	r3, r7, r3
 80191fa:	781b      	ldrb	r3, [r3, #0]
 80191fc:	4a44      	ldr	r2, [pc, #272]	; (8019310 <Send_DpmConfigGetCnf+0x464>)
 80191fe:	2168      	movs	r1, #104	; 0x68
 8019200:	2074      	movs	r0, #116	; 0x74
 8019202:	4343      	muls	r3, r0
 8019204:	18d3      	adds	r3, r2, r3
 8019206:	185b      	adds	r3, r3, r1
 8019208:	791b      	ldrb	r3, [r3, #4]
 801920a:	061b      	lsls	r3, r3, #24
 801920c:	0e5b      	lsrs	r3, r3, #25
 801920e:	b2db      	uxtb	r3, r3
 8019210:	001a      	movs	r2, r3
 8019212:	2122      	movs	r1, #34	; 0x22
 8019214:	187b      	adds	r3, r7, r1
 8019216:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_TDRP, 1, &value);
 8019218:	187b      	adds	r3, r7, r1
 801921a:	2230      	movs	r2, #48	; 0x30
 801921c:	18b8      	adds	r0, r7, r2
 801921e:	2201      	movs	r2, #1
 8019220:	210e      	movs	r1, #14
 8019222:	f7fd f8d1 	bl	80163c8 <TLV_add>
      }
      if (0U != length)
 8019226:	2344      	movs	r3, #68	; 0x44
 8019228:	18fb      	adds	r3, r7, r3
 801922a:	881b      	ldrh	r3, [r3, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d000      	beq.n	8019232 <Send_DpmConfigGetCnf+0x386>
 8019230:	e0ee      	b.n	8019410 <Send_DpmConfigGetCnf+0x564>
        break;
      }
      case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 8019232:	230f      	movs	r3, #15
 8019234:	18fb      	adds	r3, r7, r3
 8019236:	781b      	ldrb	r3, [r3, #0]
 8019238:	4a35      	ldr	r2, [pc, #212]	; (8019310 <Send_DpmConfigGetCnf+0x464>)
 801923a:	2168      	movs	r1, #104	; 0x68
 801923c:	2074      	movs	r0, #116	; 0x74
 801923e:	4343      	muls	r3, r0
 8019240:	18d3      	adds	r3, r2, r3
 8019242:	185b      	adds	r3, r3, r1
 8019244:	795b      	ldrb	r3, [r3, #5]
 8019246:	065b      	lsls	r3, r3, #25
 8019248:	0e5b      	lsrs	r3, r3, #25
 801924a:	b2db      	uxtb	r3, r3
 801924c:	001a      	movs	r2, r3
 801924e:	2121      	movs	r1, #33	; 0x21
 8019250:	187b      	adds	r3, r7, r1
 8019252:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DCSRC_DRP, 1, &value);
 8019254:	187b      	adds	r3, r7, r1
 8019256:	2230      	movs	r2, #48	; 0x30
 8019258:	18b8      	adds	r0, r7, r2
 801925a:	2201      	movs	r2, #1
 801925c:	210f      	movs	r1, #15
 801925e:	f7fd f8b3 	bl	80163c8 <TLV_add>
      }
      if (0U != length)
 8019262:	2344      	movs	r3, #68	; 0x44
 8019264:	18fb      	adds	r3, r7, r3
 8019266:	881b      	ldrh	r3, [r3, #0]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d000      	beq.n	801926e <Send_DpmConfigGetCnf+0x3c2>
 801926c:	e0d2      	b.n	8019414 <Send_DpmConfigGetCnf+0x568>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 801926e:	230f      	movs	r3, #15
 8019270:	18fb      	adds	r3, r7, r3
 8019272:	781a      	ldrb	r2, [r3, #0]
 8019274:	4925      	ldr	r1, [pc, #148]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 8019276:	0013      	movs	r3, r2
 8019278:	005b      	lsls	r3, r3, #1
 801927a:	189b      	adds	r3, r3, r2
 801927c:	009b      	lsls	r3, r3, #2
 801927e:	18cb      	adds	r3, r1, r3
 8019280:	795b      	ldrb	r3, [r3, #5]
 8019282:	07db      	lsls	r3, r3, #31
 8019284:	0fdb      	lsrs	r3, r3, #31
 8019286:	b2db      	uxtb	r3, r3
 8019288:	001a      	movs	r2, r3
 801928a:	2120      	movs	r1, #32
 801928c:	187b      	adds	r3, r7, r1
 801928e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 8019290:	187b      	adds	r3, r7, r1
 8019292:	2230      	movs	r2, #48	; 0x30
 8019294:	18b8      	adds	r0, r7, r2
 8019296:	2201      	movs	r2, #1
 8019298:	2110      	movs	r1, #16
 801929a:	f7fd f895 	bl	80163c8 <TLV_add>
      }
      if (0U != length)
 801929e:	2344      	movs	r3, #68	; 0x44
 80192a0:	18fb      	adds	r3, r7, r3
 80192a2:	881b      	ldrh	r3, [r3, #0]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d000      	beq.n	80192aa <Send_DpmConfigGetCnf+0x3fe>
 80192a8:	e0b6      	b.n	8019418 <Send_DpmConfigGetCnf+0x56c>
      {
        break;
      }
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 80192aa:	230f      	movs	r3, #15
 80192ac:	18fb      	adds	r3, r7, r3
 80192ae:	781a      	ldrb	r2, [r3, #0]
 80192b0:	4916      	ldr	r1, [pc, #88]	; (801930c <Send_DpmConfigGetCnf+0x460>)
 80192b2:	0013      	movs	r3, r2
 80192b4:	005b      	lsls	r3, r3, #1
 80192b6:	189b      	adds	r3, r3, r2
 80192b8:	009b      	lsls	r3, r3, #2
 80192ba:	18cb      	adds	r3, r1, r3
 80192bc:	795b      	ldrb	r3, [r3, #5]
 80192be:	079b      	lsls	r3, r3, #30
 80192c0:	0fdb      	lsrs	r3, r3, #31
 80192c2:	b2db      	uxtb	r3, r3
 80192c4:	001a      	movs	r2, r3
 80192c6:	211f      	movs	r1, #31
 80192c8:	187b      	adds	r3, r7, r1
 80192ca:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 80192cc:	187b      	adds	r3, r7, r1
 80192ce:	2230      	movs	r2, #48	; 0x30
 80192d0:	18b8      	adds	r0, r7, r2
 80192d2:	2201      	movs	r2, #1
 80192d4:	2111      	movs	r1, #17
 80192d6:	f7fd f877 	bl	80163c8 <TLV_add>
      }
      if (0U != length)
 80192da:	2344      	movs	r3, #68	; 0x44
 80192dc:	18fb      	adds	r3, r7, r3
 80192de:	881b      	ldrh	r3, [r3, #0]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d000      	beq.n	80192e6 <Send_DpmConfigGetCnf+0x43a>
 80192e4:	e09a      	b.n	801941c <Send_DpmConfigGetCnf+0x570>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 80192e6:	230f      	movs	r3, #15
 80192e8:	18fb      	adds	r3, r7, r3
 80192ea:	781a      	ldrb	r2, [r3, #0]
 80192ec:	4b0b      	ldr	r3, [pc, #44]	; (801931c <Send_DpmConfigGetCnf+0x470>)
 80192ee:	00d2      	lsls	r2, r2, #3
 80192f0:	58d3      	ldr	r3, [r2, r3]
 80192f2:	61bb      	str	r3, [r7, #24]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_XID_SOP, 4, (uint8_t *)&value);
 80192f4:	2318      	movs	r3, #24
 80192f6:	18fb      	adds	r3, r7, r3
 80192f8:	2230      	movs	r2, #48	; 0x30
 80192fa:	18b8      	adds	r0, r7, r2
 80192fc:	2204      	movs	r2, #4
 80192fe:	2112      	movs	r1, #18
 8019300:	f7fd f862 	bl	80163c8 <TLV_add>
      }
      if (0U != length)
 8019304:	2344      	movs	r3, #68	; 0x44
 8019306:	18fb      	adds	r3, r7, r3
 8019308:	e00a      	b.n	8019320 <Send_DpmConfigGetCnf+0x474>
 801930a:	46c0      	nop			; (mov r8, r8)
 801930c:	2000003c 	.word	0x2000003c
 8019310:	20000050 	.word	0x20000050
 8019314:	200000c4 	.word	0x200000c4
 8019318:	200000c8 	.word	0x200000c8
 801931c:	20000048 	.word	0x20000048
 8019320:	881b      	ldrh	r3, [r3, #0]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d000      	beq.n	8019328 <Send_DpmConfigGetCnf+0x47c>
 8019326:	e07b      	b.n	8019420 <Send_DpmConfigGetCnf+0x574>
      {
        break;
      }
      case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].VID;
 8019328:	230f      	movs	r3, #15
 801932a:	18fb      	adds	r3, r7, r3
 801932c:	781b      	ldrb	r3, [r3, #0]
 801932e:	4a4d      	ldr	r2, [pc, #308]	; (8019464 <Send_DpmConfigGetCnf+0x5b8>)
 8019330:	00db      	lsls	r3, r3, #3
 8019332:	18d3      	adds	r3, r2, r3
 8019334:	3304      	adds	r3, #4
 8019336:	881a      	ldrh	r2, [r3, #0]
 8019338:	2116      	movs	r1, #22
 801933a:	187b      	adds	r3, r7, r1
 801933c:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_USB_VID_SOP, 2, (uint8_t *)&value);
 801933e:	187b      	adds	r3, r7, r1
 8019340:	2230      	movs	r2, #48	; 0x30
 8019342:	18b8      	adds	r0, r7, r2
 8019344:	2202      	movs	r2, #2
 8019346:	2117      	movs	r1, #23
 8019348:	f7fd f83e 	bl	80163c8 <TLV_add>
      }
      if (0U != length)
 801934c:	2344      	movs	r3, #68	; 0x44
 801934e:	18fb      	adds	r3, r7, r3
 8019350:	881b      	ldrh	r3, [r3, #0]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d000      	beq.n	8019358 <Send_DpmConfigGetCnf+0x4ac>
 8019356:	e065      	b.n	8019424 <Send_DpmConfigGetCnf+0x578>
      {
        break;
      }
      case GUI_PARAM_PID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].PID;
 8019358:	230f      	movs	r3, #15
 801935a:	18fb      	adds	r3, r7, r3
 801935c:	781b      	ldrb	r3, [r3, #0]
 801935e:	4a41      	ldr	r2, [pc, #260]	; (8019464 <Send_DpmConfigGetCnf+0x5b8>)
 8019360:	00db      	lsls	r3, r3, #3
 8019362:	18d3      	adds	r3, r2, r3
 8019364:	3306      	adds	r3, #6
 8019366:	881a      	ldrh	r2, [r3, #0]
 8019368:	2114      	movs	r1, #20
 801936a:	187b      	adds	r3, r7, r1
 801936c:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PID_SOP, 2, (uint8_t *)&value);
 801936e:	187b      	adds	r3, r7, r1
 8019370:	2230      	movs	r2, #48	; 0x30
 8019372:	18b8      	adds	r0, r7, r2
 8019374:	2202      	movs	r2, #2
 8019376:	2118      	movs	r1, #24
 8019378:	f7fd f826 	bl	80163c8 <TLV_add>
      }
      if (0U != length)
 801937c:	2344      	movs	r3, #68	; 0x44
 801937e:	18fb      	adds	r3, r7, r3
 8019380:	881b      	ldrh	r3, [r3, #0]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d150      	bne.n	8019428 <Send_DpmConfigGetCnf+0x57c>
        break;
      }
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = (uint8_t)GUI_USER_Params[PortNum].u.MeasurementReporting;
 8019386:	230f      	movs	r3, #15
 8019388:	18fb      	adds	r3, r7, r3
 801938a:	781a      	ldrb	r2, [r3, #0]
 801938c:	4936      	ldr	r1, [pc, #216]	; (8019468 <Send_DpmConfigGetCnf+0x5bc>)
 801938e:	0013      	movs	r3, r2
 8019390:	005b      	lsls	r3, r3, #1
 8019392:	189b      	adds	r3, r3, r2
 8019394:	005b      	lsls	r3, r3, #1
 8019396:	18cb      	adds	r3, r1, r3
 8019398:	3304      	adds	r3, #4
 801939a:	781a      	ldrb	r2, [r3, #0]
 801939c:	2113      	movs	r1, #19
 801939e:	187b      	adds	r3, r7, r1
 80193a0:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_MEASUREREPORTING, 1, &settings);
 80193a2:	187b      	adds	r3, r7, r1
 80193a4:	2230      	movs	r2, #48	; 0x30
 80193a6:	18b8      	adds	r0, r7, r2
 80193a8:	2201      	movs	r2, #1
 80193aa:	211a      	movs	r1, #26
 80193ac:	f7fd f80c 	bl	80163c8 <TLV_add>
      }
      if (0U != length)
 80193b0:	2344      	movs	r3, #68	; 0x44
 80193b2:	18fb      	adds	r3, r7, r3
 80193b4:	881b      	ldrh	r3, [r3, #0]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d138      	bne.n	801942c <Send_DpmConfigGetCnf+0x580>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default:
        if (0U != length)
 80193ba:	2344      	movs	r3, #68	; 0x44
 80193bc:	18fb      	adds	r3, r7, r3
 80193be:	881b      	ldrh	r3, [r3, #0]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d035      	beq.n	8019430 <Send_DpmConfigGetCnf+0x584>
        {
          /* At least 1 parameter does not exist */
          TLV_deinit_encode(&send_tlv);
 80193c4:	2330      	movs	r3, #48	; 0x30
 80193c6:	18fb      	adds	r3, r7, r3
 80193c8:	0018      	movs	r0, r3
 80193ca:	f7fd f95f 	bl	801668c <TLV_deinit_encode>
          Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 80193ce:	6879      	ldr	r1, [r7, #4]
 80193d0:	230f      	movs	r3, #15
 80193d2:	18fb      	adds	r3, r7, r3
 80193d4:	781b      	ldrb	r3, [r3, #0]
 80193d6:	2203      	movs	r2, #3
 80193d8:	0018      	movs	r0, r3
 80193da:	f000 f847 	bl	801946c <Send_DpmConfigGetRej>
          goto __end;
 80193de:	e038      	b.n	8019452 <Send_DpmConfigGetCnf+0x5a6>
          break;
 80193e0:	46c0      	nop			; (mov r8, r8)
 80193e2:	e026      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 80193e4:	46c0      	nop			; (mov r8, r8)
 80193e6:	e024      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 80193e8:	46c0      	nop			; (mov r8, r8)
 80193ea:	e022      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 80193ec:	46c0      	nop			; (mov r8, r8)
 80193ee:	e020      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 80193f0:	46c0      	nop			; (mov r8, r8)
 80193f2:	e01e      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 80193f4:	46c0      	nop			; (mov r8, r8)
 80193f6:	e01c      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 80193f8:	46c0      	nop			; (mov r8, r8)
 80193fa:	e01a      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 80193fc:	46c0      	nop			; (mov r8, r8)
 80193fe:	e018      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 8019400:	46c0      	nop			; (mov r8, r8)
 8019402:	e016      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 8019404:	46c0      	nop			; (mov r8, r8)
 8019406:	e014      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
          break;
 8019408:	46c0      	nop			; (mov r8, r8)
 801940a:	e012      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        break;
 801940c:	46c0      	nop			; (mov r8, r8)
 801940e:	e010      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        break;
 8019410:	46c0      	nop			; (mov r8, r8)
 8019412:	e00e      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        break;
 8019414:	46c0      	nop			; (mov r8, r8)
 8019416:	e00c      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        break;
 8019418:	46c0      	nop			; (mov r8, r8)
 801941a:	e00a      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        break;
 801941c:	46c0      	nop			; (mov r8, r8)
 801941e:	e008      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        break;
 8019420:	46c0      	nop			; (mov r8, r8)
 8019422:	e006      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        break;
 8019424:	46c0      	nop			; (mov r8, r8)
 8019426:	e004      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        break;
 8019428:	46c0      	nop			; (mov r8, r8)
 801942a:	e002      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        break;
 801942c:	46c0      	nop			; (mov r8, r8)
 801942e:	e000      	b.n	8019432 <Send_DpmConfigGetCnf+0x586>
        }
        break;
 8019430:	46c0      	nop			; (mov r8, r8)
    }
    index++;
 8019432:	2147      	movs	r1, #71	; 0x47
 8019434:	187b      	adds	r3, r7, r1
 8019436:	781a      	ldrb	r2, [r3, #0]
 8019438:	187b      	adds	r3, r7, r1
 801943a:	3201      	adds	r2, #1
 801943c:	701a      	strb	r2, [r3, #0]
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while (index < length);
 801943e:	187b      	adds	r3, r7, r1
 8019440:	781b      	ldrb	r3, [r3, #0]
 8019442:	b29b      	uxth	r3, r3
 8019444:	2244      	movs	r2, #68	; 0x44
 8019446:	18ba      	adds	r2, r7, r2
 8019448:	8812      	ldrh	r2, [r2, #0]
 801944a:	429a      	cmp	r2, r3
 801944c:	d900      	bls.n	8019450 <Send_DpmConfigGetCnf+0x5a4>
 801944e:	e554      	b.n	8018efa <Send_DpmConfigGetCnf+0x4e>

__end:
 8019450:	46c0      	nop			; (mov r8, r8)
  TLV_deinit_encode(&send_tlv);
 8019452:	2330      	movs	r3, #48	; 0x30
 8019454:	18fb      	adds	r3, r7, r3
 8019456:	0018      	movs	r0, r3
 8019458:	f7fd f918 	bl	801668c <TLV_deinit_encode>
}
 801945c:	46c0      	nop			; (mov r8, r8)
 801945e:	46bd      	mov	sp, r7
 8019460:	b012      	add	sp, #72	; 0x48
 8019462:	bd80      	pop	{r7, pc}
 8019464:	20000048 	.word	0x20000048
 8019468:	20002de4 	.word	0x20002de4

0801946c <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 801946c:	b590      	push	{r4, r7, lr}
 801946e:	b087      	sub	sp, #28
 8019470:	af00      	add	r7, sp, #0
 8019472:	6039      	str	r1, [r7, #0]
 8019474:	0011      	movs	r1, r2
 8019476:	1dfb      	adds	r3, r7, #7
 8019478:	1c02      	adds	r2, r0, #0
 801947a:	701a      	strb	r2, [r3, #0]
 801947c:	1dbb      	adds	r3, r7, #6
 801947e:	1c0a      	adds	r2, r1, #0
 8019480:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8019482:	683b      	ldr	r3, [r7, #0]
 8019484:	2280      	movs	r2, #128	; 0x80
 8019486:	0052      	lsls	r2, r2, #1
 8019488:	240c      	movs	r4, #12
 801948a:	1938      	adds	r0, r7, r4
 801948c:	2108      	movs	r1, #8
 801948e:	f7fc ff38 	bl	8016302 <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8019492:	1dbb      	adds	r3, r7, #6
 8019494:	7819      	ldrb	r1, [r3, #0]
 8019496:	1938      	adds	r0, r7, r4
 8019498:	2300      	movs	r3, #0
 801949a:	2200      	movs	r2, #0
 801949c:	f7fc ff94 	bl	80163c8 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 80194a0:	193b      	adds	r3, r7, r4
 80194a2:	0018      	movs	r0, r3
 80194a4:	f7fd f8f2 	bl	801668c <TLV_deinit_encode>
}
 80194a8:	46c0      	nop			; (mov r8, r8)
 80194aa:	46bd      	mov	sp, r7
 80194ac:	b007      	add	sp, #28
 80194ae:	bd90      	pop	{r4, r7, pc}

080194b0 <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 80194b0:	b590      	push	{r4, r7, lr}
 80194b2:	b087      	sub	sp, #28
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6039      	str	r1, [r7, #0]
 80194b8:	0011      	movs	r1, r2
 80194ba:	1dfb      	adds	r3, r7, #7
 80194bc:	1c02      	adds	r2, r0, #0
 80194be:	701a      	strb	r2, [r3, #0]
 80194c0:	1dbb      	adds	r3, r7, #6
 80194c2:	1c0a      	adds	r2, r1, #0
 80194c4:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	2280      	movs	r2, #128	; 0x80
 80194ca:	0052      	lsls	r2, r2, #1
 80194cc:	240c      	movs	r4, #12
 80194ce:	1938      	adds	r0, r7, r4
 80194d0:	210b      	movs	r1, #11
 80194d2:	f7fc ff16 	bl	8016302 <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 80194d6:	1dbb      	adds	r3, r7, #6
 80194d8:	7819      	ldrb	r1, [r3, #0]
 80194da:	1938      	adds	r0, r7, r4
 80194dc:	2300      	movs	r3, #0
 80194de:	2200      	movs	r2, #0
 80194e0:	f7fc ff72 	bl	80163c8 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 80194e4:	193b      	adds	r3, r7, r4
 80194e6:	0018      	movs	r0, r3
 80194e8:	f7fd f8d0 	bl	801668c <TLV_deinit_encode>
}
 80194ec:	46c0      	nop			; (mov r8, r8)
 80194ee:	46bd      	mov	sp, r7
 80194f0:	b007      	add	sp, #28
 80194f2:	bd90      	pop	{r4, r7, pc}

080194f4 <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 80194f4:	b5b0      	push	{r4, r5, r7, lr}
 80194f6:	b090      	sub	sp, #64	; 0x40
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6039      	str	r1, [r7, #0]
 80194fc:	0011      	movs	r1, r2
 80194fe:	1dfb      	adds	r3, r7, #7
 8019500:	1c02      	adds	r2, r0, #0
 8019502:	701a      	strb	r2, [r3, #0]
 8019504:	1dbb      	adds	r3, r7, #6
 8019506:	1c0a      	adds	r2, r1, #0
 8019508:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 801950a:	1dfb      	adds	r3, r7, #7
 801950c:	781b      	ldrb	r3, [r3, #0]
 801950e:	3301      	adds	r3, #1
 8019510:	015b      	lsls	r3, r3, #5
 8019512:	b25b      	sxtb	r3, r3
 8019514:	220f      	movs	r2, #15
 8019516:	4313      	orrs	r3, r2
 8019518:	b25b      	sxtb	r3, r3
 801951a:	b2d9      	uxtb	r1, r3
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	2280      	movs	r2, #128	; 0x80
 8019520:	0052      	lsls	r2, r2, #1
 8019522:	2030      	movs	r0, #48	; 0x30
 8019524:	1838      	adds	r0, r7, r0
 8019526:	f7fc feec 	bl	8016302 <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] =
 801952a:	2508      	movs	r5, #8
 801952c:	197b      	adds	r3, r7, r5
 801952e:	4a1e      	ldr	r2, [pc, #120]	; (80195a8 <Send_DpmRegisterReadCnf+0xb4>)
 8019530:	ca13      	ldmia	r2!, {r0, r1, r4}
 8019532:	c313      	stmia	r3!, {r0, r1, r4}
 8019534:	ca13      	ldmia	r2!, {r0, r1, r4}
 8019536:	c313      	stmia	r3!, {r0, r1, r4}
 8019538:	ca13      	ldmia	r2!, {r0, r1, r4}
 801953a:	c313      	stmia	r3!, {r0, r1, r4}
 801953c:	8811      	ldrh	r1, [r2, #0]
 801953e:	8019      	strh	r1, [r3, #0]
 8019540:	7892      	ldrb	r2, [r2, #2]
 8019542:	709a      	strb	r2, [r3, #2]
    (uint8_t)GUI_REG_TX_HEADER, (uint8_t)GUI_REG_TX_DATA, (uint8_t)GUI_REG_VBUS_VOLTAGE,
    (uint8_t)GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, (uint8_t)GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG,
    (uint8_t)GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 8019544:	233f      	movs	r3, #63	; 0x3f
 8019546:	18fb      	adds	r3, r7, r3
 8019548:	2200      	movs	r2, #0
 801954a:	701a      	strb	r2, [r3, #0]

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if (param != 0xFFU)
 801954c:	1dbb      	adds	r3, r7, #6
 801954e:	781b      	ldrb	r3, [r3, #0]
 8019550:	2bff      	cmp	r3, #255	; 0xff
 8019552:	d003      	beq.n	801955c <Send_DpmRegisterReadCnf+0x68>
  {
    *stateMachineArray = param;
 8019554:	197b      	adds	r3, r7, r5
 8019556:	1dba      	adds	r2, r7, #6
 8019558:	7812      	ldrb	r2, [r2, #0]
 801955a:	701a      	strb	r2, [r3, #0]
  }

  do
  {
    switch (stateMachineArray[counter])
 801955c:	233f      	movs	r3, #63	; 0x3f
 801955e:	18fb      	adds	r3, r7, r3
 8019560:	781b      	ldrb	r3, [r3, #0]
 8019562:	2208      	movs	r2, #8
 8019564:	18ba      	adds	r2, r7, r2
 8019566:	5cd3      	ldrb	r3, [r2, r3]
 8019568:	2b80      	cmp	r3, #128	; 0x80
 801956a:	d804      	bhi.n	8019576 <Send_DpmRegisterReadCnf+0x82>
 801956c:	009a      	lsls	r2, r3, #2
 801956e:	4b0f      	ldr	r3, [pc, #60]	; (80195ac <Send_DpmRegisterReadCnf+0xb8>)
 8019570:	18d3      	adds	r3, r2, r3
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	469f      	mov	pc, r3
        break;
      case GUI_REG_VENDOR_DATA :

        break;
      default :
        break;
 8019576:	46c0      	nop			; (mov r8, r8)
    }
    counter++;
 8019578:	213f      	movs	r1, #63	; 0x3f
 801957a:	187b      	adds	r3, r7, r1
 801957c:	781a      	ldrb	r2, [r3, #0]
 801957e:	187b      	adds	r3, r7, r1
 8019580:	3201      	adds	r2, #1
 8019582:	701a      	strb	r2, [r3, #0]
  } while ((counter < GUI_REG_NUMBER_OF_REGISTERS) && (param != 0xFFU));
 8019584:	187b      	adds	r3, r7, r1
 8019586:	781b      	ldrb	r3, [r3, #0]
 8019588:	2b26      	cmp	r3, #38	; 0x26
 801958a:	d803      	bhi.n	8019594 <Send_DpmRegisterReadCnf+0xa0>
 801958c:	1dbb      	adds	r3, r7, #6
 801958e:	781b      	ldrb	r3, [r3, #0]
 8019590:	2bff      	cmp	r3, #255	; 0xff
 8019592:	d1e3      	bne.n	801955c <Send_DpmRegisterReadCnf+0x68>

  TLV_deinit_encode(&ToSendTLV);
 8019594:	2330      	movs	r3, #48	; 0x30
 8019596:	18fb      	adds	r3, r7, r3
 8019598:	0018      	movs	r0, r3
 801959a:	f7fd f877 	bl	801668c <TLV_deinit_encode>
}
 801959e:	46c0      	nop			; (mov r8, r8)
 80195a0:	46bd      	mov	sp, r7
 80195a2:	b010      	add	sp, #64	; 0x40
 80195a4:	bdb0      	pop	{r4, r5, r7, pc}
 80195a6:	46c0      	nop			; (mov r8, r8)
 80195a8:	0801c2dc 	.word	0x0801c2dc
 80195ac:	0801c838 	.word	0x0801c838

080195b0 <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 80195b0:	b5b0      	push	{r4, r5, r7, lr}
 80195b2:	b08c      	sub	sp, #48	; 0x30
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	60b9      	str	r1, [r7, #8]
 80195b8:	607a      	str	r2, [r7, #4]
 80195ba:	230f      	movs	r3, #15
 80195bc:	18fb      	adds	r3, r7, r3
 80195be:	1c02      	adds	r2, r0, #0
 80195c0:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t ToProcessTLV;
  (void)TLV_init_decode(&ToProcessTLV, toProcess);
 80195c2:	687a      	ldr	r2, [r7, #4]
 80195c4:	2428      	movs	r4, #40	; 0x28
 80195c6:	193b      	adds	r3, r7, r4
 80195c8:	0011      	movs	r1, r2
 80195ca:	0018      	movs	r0, r3
 80195cc:	f7fd f870 	bl	80166b0 <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  (void)TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 80195d0:	2320      	movs	r3, #32
 80195d2:	18fb      	adds	r3, r7, r3
 80195d4:	2224      	movs	r2, #36	; 0x24
 80195d6:	18ba      	adds	r2, r7, r2
 80195d8:	2527      	movs	r5, #39	; 0x27
 80195da:	1979      	adds	r1, r7, r5
 80195dc:	1938      	adds	r0, r7, r4
 80195de:	f7fd f893 	bl	8016708 <TLV_get>

  switch (registerName)
 80195e2:	197b      	adds	r3, r7, r5
 80195e4:	781b      	ldrb	r3, [r3, #0]
 80195e6:	2b80      	cmp	r3, #128	; 0x80
 80195e8:	d804      	bhi.n	80195f4 <Send_DpmRegisterWriteCnf+0x44>
 80195ea:	009a      	lsls	r2, r3, #2
 80195ec:	4b10      	ldr	r3, [pc, #64]	; (8019630 <Send_DpmRegisterWriteCnf+0x80>)
 80195ee:	18d3      	adds	r3, r2, r3
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	469f      	mov	pc, r3
      break;
    case GUI_REG_VENDOR_DATA :

      break;
    default :
      break;
 80195f4:	46c0      	nop			; (mov r8, r8)
  }
  TLV_deinit_decode(&ToProcessTLV);
 80195f6:	2328      	movs	r3, #40	; 0x28
 80195f8:	18fb      	adds	r3, r7, r3
 80195fa:	0018      	movs	r0, r3
 80195fc:	f7fd f8de 	bl	80167bc <TLV_deinit_decode>

  TLV_ToSend_Data_t ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 8019600:	230f      	movs	r3, #15
 8019602:	18fb      	adds	r3, r7, r3
 8019604:	781b      	ldrb	r3, [r3, #0]
 8019606:	3301      	adds	r3, #1
 8019608:	015b      	lsls	r3, r3, #5
 801960a:	b25b      	sxtb	r3, r3
 801960c:	2211      	movs	r2, #17
 801960e:	4313      	orrs	r3, r2
 8019610:	b25b      	sxtb	r3, r3
 8019612:	b2d9      	uxtb	r1, r3
 8019614:	68bb      	ldr	r3, [r7, #8]
 8019616:	2414      	movs	r4, #20
 8019618:	1938      	adds	r0, r7, r4
 801961a:	220c      	movs	r2, #12
 801961c:	f7fc fe71 	bl	8016302 <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 8019620:	193b      	adds	r3, r7, r4
 8019622:	0018      	movs	r0, r3
 8019624:	f7fd f832 	bl	801668c <TLV_deinit_encode>
}
 8019628:	46c0      	nop			; (mov r8, r8)
 801962a:	46bd      	mov	sp, r7
 801962c:	b00c      	add	sp, #48	; 0x30
 801962e:	bdb0      	pop	{r4, r5, r7, pc}
 8019630:	0801ca3c 	.word	0x0801ca3c

08019634 <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 8019634:	b5b0      	push	{r4, r5, r7, lr}
 8019636:	b084      	sub	sp, #16
 8019638:	af00      	add	r7, sp, #0
 801963a:	6039      	str	r1, [r7, #0]
 801963c:	0011      	movs	r1, r2
 801963e:	1dfb      	adds	r3, r7, #7
 8019640:	1c02      	adds	r2, r0, #0
 8019642:	701a      	strb	r2, [r3, #0]
 8019644:	1d3b      	adds	r3, r7, #4
 8019646:	1c0a      	adds	r2, r1, #0
 8019648:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 801964a:	250f      	movs	r5, #15
 801964c:	197b      	adds	r3, r7, r5
 801964e:	2210      	movs	r2, #16
 8019650:	701a      	strb	r2, [r3, #0]

  if (NULL != pCB_FreeText)
 8019652:	4b0b      	ldr	r3, [pc, #44]	; (8019680 <Manage_FreeText+0x4c>)
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d00b      	beq.n	8019672 <Manage_FreeText+0x3e>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 801965a:	4b09      	ldr	r3, [pc, #36]	; (8019680 <Manage_FreeText+0x4c>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	1d3a      	adds	r2, r7, #4
 8019660:	8814      	ldrh	r4, [r2, #0]
 8019662:	6839      	ldr	r1, [r7, #0]
 8019664:	1dfa      	adds	r2, r7, #7
 8019666:	7810      	ldrb	r0, [r2, #0]
 8019668:	0022      	movs	r2, r4
 801966a:	4798      	blx	r3
    _status = USBPD_OK;
 801966c:	197b      	adds	r3, r7, r5
 801966e:	2200      	movs	r2, #0
 8019670:	701a      	strb	r2, [r3, #0]
  }

  return _status;
 8019672:	230f      	movs	r3, #15
 8019674:	18fb      	adds	r3, r7, r3
 8019676:	781b      	ldrb	r3, [r3, #0]
}
 8019678:	0018      	movs	r0, r3
 801967a:	46bd      	mov	sp, r7
 801967c:	b004      	add	sp, #16
 801967e:	bdb0      	pop	{r4, r5, r7, pc}
 8019680:	20003008 	.word	0x20003008

08019684 <UpdateSNKPowerPort0>:
/**
  * @brief  Function to update SNK PDO and power user settings on Port0
  * @retval None
  */
static void UpdateSNKPowerPort0(void)
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b088      	sub	sp, #32
 8019688:	af00      	add	r7, sp, #0
  USBPD_PDO_TypeDef pdo;
  uint32_t _max_power = 0;
 801968a:	2300      	movs	r3, #0
 801968c:	61fb      	str	r3, [r7, #28]
  uint16_t _voltage;
  uint16_t _current;
  uint16_t _power;
  uint16_t _min_voltage = 0xFFFF;
 801968e:	231a      	movs	r3, #26
 8019690:	18fb      	adds	r3, r7, r3
 8019692:	2201      	movs	r2, #1
 8019694:	4252      	negs	r2, r2
 8019696:	801a      	strh	r2, [r3, #0]
  uint16_t _max_voltage = 0;
 8019698:	2318      	movs	r3, #24
 801969a:	18fb      	adds	r3, r7, r3
 801969c:	2200      	movs	r2, #0
 801969e:	801a      	strh	r2, [r3, #0]
  uint16_t _max_current = 0;
 80196a0:	2316      	movs	r3, #22
 80196a2:	18fb      	adds	r3, r7, r3
 80196a4:	2200      	movs	r2, #0
 80196a6:	801a      	strh	r2, [r3, #0]

  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 80196a8:	2300      	movs	r3, #0
 80196aa:	613b      	str	r3, [r7, #16]
 80196ac:	e0de      	b.n	801986c <UpdateSNKPowerPort0+0x1e8>
  {
    pdo.d32 = PORT0_PDO_ListSNK[_index];
 80196ae:	4b84      	ldr	r3, [pc, #528]	; (80198c0 <UpdateSNKPowerPort0+0x23c>)
 80196b0:	693a      	ldr	r2, [r7, #16]
 80196b2:	0092      	lsls	r2, r2, #2
 80196b4:	58d3      	ldr	r3, [r2, r3]
 80196b6:	607b      	str	r3, [r7, #4]
    switch (pdo.GenericPDO.PowerObject)
 80196b8:	1dfb      	adds	r3, r7, #7
 80196ba:	781b      	ldrb	r3, [r3, #0]
 80196bc:	061b      	lsls	r3, r3, #24
 80196be:	0f9b      	lsrs	r3, r3, #30
 80196c0:	b2db      	uxtb	r3, r3
 80196c2:	2b02      	cmp	r3, #2
 80196c4:	d100      	bne.n	80196c8 <UpdateSNKPowerPort0+0x44>
 80196c6:	e082      	b.n	80197ce <UpdateSNKPowerPort0+0x14a>
 80196c8:	dd00      	ble.n	80196cc <UpdateSNKPowerPort0+0x48>
 80196ca:	e0c5      	b.n	8019858 <UpdateSNKPowerPort0+0x1d4>
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d002      	beq.n	80196d6 <UpdateSNKPowerPort0+0x52>
 80196d0:	2b01      	cmp	r3, #1
 80196d2:	d03b      	beq.n	801974c <UpdateSNKPowerPort0+0xc8>
        _current = GUI_DECODE_50MA(pdo.SRCSNKAPDO.MaxCurrentIn50mAunits);
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
        break;
#endif /*_USBPD_REV30_SUPPORT && PPS*/
      default:
        break;
 80196d4:	e0c0      	b.n	8019858 <UpdateSNKPowerPort0+0x1d4>
        _voltage = GUI_DECODE_50MV(pdo.SNKFixedPDO.VoltageIn50mVunits);
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	031b      	lsls	r3, r3, #12
 80196da:	0d9b      	lsrs	r3, r3, #22
 80196dc:	b29b      	uxth	r3, r3
 80196de:	0019      	movs	r1, r3
 80196e0:	200e      	movs	r0, #14
 80196e2:	183b      	adds	r3, r7, r0
 80196e4:	2232      	movs	r2, #50	; 0x32
 80196e6:	434a      	muls	r2, r1
 80196e8:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 80196ea:	0001      	movs	r1, r0
 80196ec:	187a      	adds	r2, r7, r1
 80196ee:	201a      	movs	r0, #26
 80196f0:	183b      	adds	r3, r7, r0
 80196f2:	8812      	ldrh	r2, [r2, #0]
 80196f4:	881b      	ldrh	r3, [r3, #0]
 80196f6:	429a      	cmp	r2, r3
 80196f8:	d203      	bcs.n	8019702 <UpdateSNKPowerPort0+0x7e>
 80196fa:	183b      	adds	r3, r7, r0
 80196fc:	187a      	adds	r2, r7, r1
 80196fe:	8812      	ldrh	r2, [r2, #0]
 8019700:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 8019702:	210e      	movs	r1, #14
 8019704:	187a      	adds	r2, r7, r1
 8019706:	2018      	movs	r0, #24
 8019708:	183b      	adds	r3, r7, r0
 801970a:	8812      	ldrh	r2, [r2, #0]
 801970c:	881b      	ldrh	r3, [r3, #0]
 801970e:	429a      	cmp	r2, r3
 8019710:	d903      	bls.n	801971a <UpdateSNKPowerPort0+0x96>
 8019712:	183b      	adds	r3, r7, r0
 8019714:	187a      	adds	r2, r7, r1
 8019716:	8812      	ldrh	r2, [r2, #0]
 8019718:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKFixedPDO.OperationalCurrentIn10mAunits);
 801971a:	1d3b      	adds	r3, r7, #4
 801971c:	881b      	ldrh	r3, [r3, #0]
 801971e:	059b      	lsls	r3, r3, #22
 8019720:	0d9b      	lsrs	r3, r3, #22
 8019722:	b29b      	uxth	r3, r3
 8019724:	200c      	movs	r0, #12
 8019726:	183a      	adds	r2, r7, r0
 8019728:	1c19      	adds	r1, r3, #0
 801972a:	0089      	lsls	r1, r1, #2
 801972c:	18cb      	adds	r3, r1, r3
 801972e:	18db      	adds	r3, r3, r3
 8019730:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 8019732:	183a      	adds	r2, r7, r0
 8019734:	2116      	movs	r1, #22
 8019736:	187b      	adds	r3, r7, r1
 8019738:	8812      	ldrh	r2, [r2, #0]
 801973a:	881b      	ldrh	r3, [r3, #0]
 801973c:	429a      	cmp	r2, r3
 801973e:	d800      	bhi.n	8019742 <UpdateSNKPowerPort0+0xbe>
 8019740:	e08c      	b.n	801985c <UpdateSNKPowerPort0+0x1d8>
 8019742:	187b      	adds	r3, r7, r1
 8019744:	183a      	adds	r2, r7, r0
 8019746:	8812      	ldrh	r2, [r2, #0]
 8019748:	801a      	strh	r2, [r3, #0]
        break;
 801974a:	e087      	b.n	801985c <UpdateSNKPowerPort0+0x1d8>
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MinVoltageIn50mVunits);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	031b      	lsls	r3, r3, #12
 8019750:	0d9b      	lsrs	r3, r3, #22
 8019752:	b29b      	uxth	r3, r3
 8019754:	0019      	movs	r1, r3
 8019756:	200e      	movs	r0, #14
 8019758:	183b      	adds	r3, r7, r0
 801975a:	2232      	movs	r2, #50	; 0x32
 801975c:	434a      	muls	r2, r1
 801975e:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 8019760:	0001      	movs	r1, r0
 8019762:	187a      	adds	r2, r7, r1
 8019764:	201a      	movs	r0, #26
 8019766:	183b      	adds	r3, r7, r0
 8019768:	8812      	ldrh	r2, [r2, #0]
 801976a:	881b      	ldrh	r3, [r3, #0]
 801976c:	429a      	cmp	r2, r3
 801976e:	d203      	bcs.n	8019778 <UpdateSNKPowerPort0+0xf4>
 8019770:	183b      	adds	r3, r7, r0
 8019772:	187a      	adds	r2, r7, r1
 8019774:	8812      	ldrh	r2, [r2, #0]
 8019776:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MaxVoltageIn50mVunits);
 8019778:	1dbb      	adds	r3, r7, #6
 801977a:	881b      	ldrh	r3, [r3, #0]
 801977c:	049b      	lsls	r3, r3, #18
 801977e:	0d9b      	lsrs	r3, r3, #22
 8019780:	b29b      	uxth	r3, r3
 8019782:	0019      	movs	r1, r3
 8019784:	200e      	movs	r0, #14
 8019786:	183b      	adds	r3, r7, r0
 8019788:	2232      	movs	r2, #50	; 0x32
 801978a:	434a      	muls	r2, r1
 801978c:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 801978e:	0001      	movs	r1, r0
 8019790:	187a      	adds	r2, r7, r1
 8019792:	2018      	movs	r0, #24
 8019794:	183b      	adds	r3, r7, r0
 8019796:	8812      	ldrh	r2, [r2, #0]
 8019798:	881b      	ldrh	r3, [r3, #0]
 801979a:	429a      	cmp	r2, r3
 801979c:	d903      	bls.n	80197a6 <UpdateSNKPowerPort0+0x122>
 801979e:	183b      	adds	r3, r7, r0
 80197a0:	187a      	adds	r2, r7, r1
 80197a2:	8812      	ldrh	r2, [r2, #0]
 80197a4:	801a      	strh	r2, [r3, #0]
        _power = GUI_DECODE_MW(pdo.SNKBatteryPDO.OperationalPowerIn250mWunits);
 80197a6:	1d3b      	adds	r3, r7, #4
 80197a8:	881b      	ldrh	r3, [r3, #0]
 80197aa:	059b      	lsls	r3, r3, #22
 80197ac:	0d9b      	lsrs	r3, r3, #22
 80197ae:	b29b      	uxth	r3, r3
 80197b0:	0019      	movs	r1, r3
 80197b2:	200a      	movs	r0, #10
 80197b4:	183b      	adds	r3, r7, r0
 80197b6:	22fa      	movs	r2, #250	; 0xfa
 80197b8:	434a      	muls	r2, r1
 80197ba:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_POWER_MAX(_power, _max_power);
 80197bc:	183b      	adds	r3, r7, r0
 80197be:	881b      	ldrh	r3, [r3, #0]
 80197c0:	69fa      	ldr	r2, [r7, #28]
 80197c2:	429a      	cmp	r2, r3
 80197c4:	d24c      	bcs.n	8019860 <UpdateSNKPowerPort0+0x1dc>
 80197c6:	183b      	adds	r3, r7, r0
 80197c8:	881b      	ldrh	r3, [r3, #0]
 80197ca:	61fb      	str	r3, [r7, #28]
        break;
 80197cc:	e048      	b.n	8019860 <UpdateSNKPowerPort0+0x1dc>
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MinVoltageIn50mVunits);
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	031b      	lsls	r3, r3, #12
 80197d2:	0d9b      	lsrs	r3, r3, #22
 80197d4:	b29b      	uxth	r3, r3
 80197d6:	0019      	movs	r1, r3
 80197d8:	200e      	movs	r0, #14
 80197da:	183b      	adds	r3, r7, r0
 80197dc:	2232      	movs	r2, #50	; 0x32
 80197de:	434a      	muls	r2, r1
 80197e0:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 80197e2:	0001      	movs	r1, r0
 80197e4:	187a      	adds	r2, r7, r1
 80197e6:	201a      	movs	r0, #26
 80197e8:	183b      	adds	r3, r7, r0
 80197ea:	8812      	ldrh	r2, [r2, #0]
 80197ec:	881b      	ldrh	r3, [r3, #0]
 80197ee:	429a      	cmp	r2, r3
 80197f0:	d203      	bcs.n	80197fa <UpdateSNKPowerPort0+0x176>
 80197f2:	183b      	adds	r3, r7, r0
 80197f4:	187a      	adds	r2, r7, r1
 80197f6:	8812      	ldrh	r2, [r2, #0]
 80197f8:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MaxVoltageIn50mVunits);
 80197fa:	1dbb      	adds	r3, r7, #6
 80197fc:	881b      	ldrh	r3, [r3, #0]
 80197fe:	049b      	lsls	r3, r3, #18
 8019800:	0d9b      	lsrs	r3, r3, #22
 8019802:	b29b      	uxth	r3, r3
 8019804:	0019      	movs	r1, r3
 8019806:	200e      	movs	r0, #14
 8019808:	183b      	adds	r3, r7, r0
 801980a:	2232      	movs	r2, #50	; 0x32
 801980c:	434a      	muls	r2, r1
 801980e:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 8019810:	0001      	movs	r1, r0
 8019812:	187a      	adds	r2, r7, r1
 8019814:	2018      	movs	r0, #24
 8019816:	183b      	adds	r3, r7, r0
 8019818:	8812      	ldrh	r2, [r2, #0]
 801981a:	881b      	ldrh	r3, [r3, #0]
 801981c:	429a      	cmp	r2, r3
 801981e:	d903      	bls.n	8019828 <UpdateSNKPowerPort0+0x1a4>
 8019820:	183b      	adds	r3, r7, r0
 8019822:	187a      	adds	r2, r7, r1
 8019824:	8812      	ldrh	r2, [r2, #0]
 8019826:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKVariablePDO.OperationalCurrentIn10mAunits);
 8019828:	1d3b      	adds	r3, r7, #4
 801982a:	881b      	ldrh	r3, [r3, #0]
 801982c:	059b      	lsls	r3, r3, #22
 801982e:	0d9b      	lsrs	r3, r3, #22
 8019830:	b29b      	uxth	r3, r3
 8019832:	200c      	movs	r0, #12
 8019834:	183a      	adds	r2, r7, r0
 8019836:	1c19      	adds	r1, r3, #0
 8019838:	0089      	lsls	r1, r1, #2
 801983a:	18cb      	adds	r3, r1, r3
 801983c:	18db      	adds	r3, r3, r3
 801983e:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 8019840:	183a      	adds	r2, r7, r0
 8019842:	2116      	movs	r1, #22
 8019844:	187b      	adds	r3, r7, r1
 8019846:	8812      	ldrh	r2, [r2, #0]
 8019848:	881b      	ldrh	r3, [r3, #0]
 801984a:	429a      	cmp	r2, r3
 801984c:	d90a      	bls.n	8019864 <UpdateSNKPowerPort0+0x1e0>
 801984e:	187b      	adds	r3, r7, r1
 8019850:	183a      	adds	r2, r7, r0
 8019852:	8812      	ldrh	r2, [r2, #0]
 8019854:	801a      	strh	r2, [r3, #0]
        break;
 8019856:	e005      	b.n	8019864 <UpdateSNKPowerPort0+0x1e0>
        break;
 8019858:	46c0      	nop			; (mov r8, r8)
 801985a:	e004      	b.n	8019866 <UpdateSNKPowerPort0+0x1e2>
        break;
 801985c:	46c0      	nop			; (mov r8, r8)
 801985e:	e002      	b.n	8019866 <UpdateSNKPowerPort0+0x1e2>
        break;
 8019860:	46c0      	nop			; (mov r8, r8)
 8019862:	e000      	b.n	8019866 <UpdateSNKPowerPort0+0x1e2>
        break;
 8019864:	46c0      	nop			; (mov r8, r8)
  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 8019866:	693b      	ldr	r3, [r7, #16]
 8019868:	3301      	adds	r3, #1
 801986a:	613b      	str	r3, [r7, #16]
 801986c:	4b15      	ldr	r3, [pc, #84]	; (80198c4 <UpdateSNKPowerPort0+0x240>)
 801986e:	781b      	ldrb	r3, [r3, #0]
 8019870:	001a      	movs	r2, r3
 8019872:	693b      	ldr	r3, [r7, #16]
 8019874:	4293      	cmp	r3, r2
 8019876:	d200      	bcs.n	801987a <UpdateSNKPowerPort0+0x1f6>
 8019878:	e719      	b.n	80196ae <UpdateSNKPowerPort0+0x2a>
    }
  }

  GUI_CHECK_VOLTAGE_MIN(_min_voltage,
 801987a:	231a      	movs	r3, #26
 801987c:	18fb      	adds	r3, r7, r3
 801987e:	881a      	ldrh	r2, [r3, #0]
 8019880:	4b11      	ldr	r3, [pc, #68]	; (80198c8 <UpdateSNKPowerPort0+0x244>)
 8019882:	611a      	str	r2, [r3, #16]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits);
  GUI_CHECK_VOLTAGE_MAX(_max_voltage,
 8019884:	2118      	movs	r1, #24
 8019886:	187b      	adds	r3, r7, r1
 8019888:	881a      	ldrh	r2, [r3, #0]
 801988a:	4b0f      	ldr	r3, [pc, #60]	; (80198c8 <UpdateSNKPowerPort0+0x244>)
 801988c:	60da      	str	r2, [r3, #12]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits);
  GUI_CHECK_CURRENT_MAX(_max_current,
 801988e:	2016      	movs	r0, #22
 8019890:	183b      	adds	r3, r7, r0
 8019892:	881a      	ldrh	r2, [r3, #0]
 8019894:	4b0c      	ldr	r3, [pc, #48]	; (80198c8 <UpdateSNKPowerPort0+0x244>)
 8019896:	605a      	str	r2, [r3, #4]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
  _max_power = ((uint32_t)(_max_voltage) * (uint32_t)(_max_current)) / 1000U;
 8019898:	187b      	adds	r3, r7, r1
 801989a:	881b      	ldrh	r3, [r3, #0]
 801989c:	183a      	adds	r2, r7, r0
 801989e:	8812      	ldrh	r2, [r2, #0]
 80198a0:	4353      	muls	r3, r2
 80198a2:	22fa      	movs	r2, #250	; 0xfa
 80198a4:	0091      	lsls	r1, r2, #2
 80198a6:	0018      	movs	r0, r3
 80198a8:	f7ec fca2 	bl	80061f0 <__udivsi3>
 80198ac:	0003      	movs	r3, r0
 80198ae:	61fb      	str	r3, [r7, #28]
  GUI_CHECK_POWER_MAX(_max_power, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits);
 80198b0:	4b05      	ldr	r3, [pc, #20]	; (80198c8 <UpdateSNKPowerPort0+0x244>)
 80198b2:	69fa      	ldr	r2, [r7, #28]
 80198b4:	619a      	str	r2, [r3, #24]
}
 80198b6:	46c0      	nop			; (mov r8, r8)
 80198b8:	46bd      	mov	sp, r7
 80198ba:	b008      	add	sp, #32
 80198bc:	bd80      	pop	{r7, pc}
 80198be:	46c0      	nop			; (mov r8, r8)
 80198c0:	200000c8 	.word	0x200000c8
 80198c4:	200000c4 	.word	0x200000c4
 80198c8:	20000050 	.word	0x20000050

080198cc <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef_t));
 80198d0:	4a06      	ldr	r2, [pc, #24]	; (80198ec <TRACER_EMB_Init+0x20>)
 80198d2:	4b07      	ldr	r3, [pc, #28]	; (80198f0 <TRACER_EMB_Init+0x24>)
 80198d4:	2100      	movs	r1, #0
 80198d6:	0018      	movs	r0, r3
 80198d8:	f001 f93e 	bl	801ab58 <memset>

  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 80198dc:	f000 fe22 	bl	801a524 <HW_TRACER_EMB_Init>

  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 80198e0:	f000 f9d8 	bl	8019c94 <TRACER_EMB_LowPowerInit>
}
 80198e4:	46c0      	nop			; (mov r8, r8)
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}
 80198ea:	46c0      	nop			; (mov r8, r8)
 80198ec:	0000041c 	.word	0x0000041c
 80198f0:	20003088 	.word	0x20003088

080198f4 <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b086      	sub	sp, #24
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
 80198fc:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 8019902:	f000 f8d3 	bl	8019aac <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	0018      	movs	r0, r3
 801990a:	f000 f969 	bl	8019be0 <TRACER_EMB_AllocateBufer>
 801990e:	0003      	movs	r3, r0
 8019910:	617b      	str	r3, [r7, #20]

  /* if allocation is ok, write data into the buffer */
  if (_writepos != -1)
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	3301      	adds	r3, #1
 8019916:	d023      	beq.n	8019960 <TRACER_EMB_Add+0x6c>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0U; index < Size; index++)
 8019918:	2300      	movs	r3, #0
 801991a:	613b      	str	r3, [r7, #16]
 801991c:	e01c      	b.n	8019958 <TRACER_EMB_Add+0x64>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 801991e:	68fa      	ldr	r2, [r7, #12]
 8019920:	693b      	ldr	r3, [r7, #16]
 8019922:	18d2      	adds	r2, r2, r3
 8019924:	697b      	ldr	r3, [r7, #20]
 8019926:	4912      	ldr	r1, [pc, #72]	; (8019970 <TRACER_EMB_Add+0x7c>)
 8019928:	400b      	ands	r3, r1
 801992a:	d503      	bpl.n	8019934 <TRACER_EMB_Add+0x40>
 801992c:	3b01      	subs	r3, #1
 801992e:	4911      	ldr	r1, [pc, #68]	; (8019974 <TRACER_EMB_Add+0x80>)
 8019930:	430b      	orrs	r3, r1
 8019932:	3301      	adds	r3, #1
 8019934:	0019      	movs	r1, r3
 8019936:	7812      	ldrb	r2, [r2, #0]
 8019938:	4b0f      	ldr	r3, [pc, #60]	; (8019978 <TRACER_EMB_Add+0x84>)
 801993a:	185b      	adds	r3, r3, r1
 801993c:	76da      	strb	r2, [r3, #27]
 801993e:	697b      	ldr	r3, [r7, #20]
 8019940:	3301      	adds	r3, #1
 8019942:	4a0b      	ldr	r2, [pc, #44]	; (8019970 <TRACER_EMB_Add+0x7c>)
 8019944:	4013      	ands	r3, r2
 8019946:	d503      	bpl.n	8019950 <TRACER_EMB_Add+0x5c>
 8019948:	3b01      	subs	r3, #1
 801994a:	4a0a      	ldr	r2, [pc, #40]	; (8019974 <TRACER_EMB_Add+0x80>)
 801994c:	4313      	orrs	r3, r2
 801994e:	3301      	adds	r3, #1
 8019950:	617b      	str	r3, [r7, #20]
    for (index = 0U; index < Size; index++)
 8019952:	693b      	ldr	r3, [r7, #16]
 8019954:	3301      	adds	r3, #1
 8019956:	613b      	str	r3, [r7, #16]
 8019958:	693a      	ldr	r2, [r7, #16]
 801995a:	683b      	ldr	r3, [r7, #0]
 801995c:	429a      	cmp	r2, r3
 801995e:	d3de      	bcc.n	801991e <TRACER_EMB_Add+0x2a>
    }
  }
  TRACER_EMB_UnLock();
 8019960:	f000 f8c2 	bl	8019ae8 <TRACER_EMB_UnLock>

  /* Tx processing */
  TRACER_EMB_SendData();
 8019964:	f000 f8de 	bl	8019b24 <TRACER_EMB_SendData>
}
 8019968:	46c0      	nop			; (mov r8, r8)
 801996a:	46bd      	mov	sp, r7
 801996c:	b006      	add	sp, #24
 801996e:	bd80      	pop	{r7, pc}
 8019970:	800003ff 	.word	0x800003ff
 8019974:	fffffc00 	.word	0xfffffc00
 8019978:	20003088 	.word	0x20003088

0801997c <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 801997c:	b580      	push	{r7, lr}
 801997e:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 8019980:	f000 febc 	bl	801a6fc <HW_TRACER_EMB_IRQHandlerDMA>
}
 8019984:	46c0      	nop			; (mov r8, r8)
 8019986:	46bd      	mov	sp, r7
 8019988:	bd80      	pop	{r7, pc}

0801998a <TRACER_EMB_IRQHandlerUSART>:
#endif /* TRACER_EMB_DMA_MODE == 1 */

void TRACER_EMB_IRQHandlerUSART(void)
{
 801998a:	b580      	push	{r7, lr}
 801998c:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 801998e:	f000 fecd 	bl	801a72c <HW_TRACER_EMB_IRQHandlerUSART>
}
 8019992:	46c0      	nop			; (mov r8, r8)
 8019994:	46bd      	mov	sp, r7
 8019996:	bd80      	pop	{r7, pc}

08019998 <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b082      	sub	sp, #8
 801999c:	af00      	add	r7, sp, #0
 801999e:	0002      	movs	r2, r0
 80199a0:	1dbb      	adds	r3, r7, #6
 80199a2:	801a      	strh	r2, [r3, #0]
 80199a4:	1d7b      	adds	r3, r7, #5
 80199a6:	1c0a      	adds	r2, r1, #0
 80199a8:	701a      	strb	r2, [r3, #0]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 80199aa:	1dbb      	adds	r3, r7, #6
 80199ac:	881b      	ldrh	r3, [r3, #0]
 80199ae:	059b      	lsls	r3, r3, #22
 80199b0:	0d9b      	lsrs	r3, r3, #22
 80199b2:	4a04      	ldr	r2, [pc, #16]	; (80199c4 <TRACER_EMB_WriteData+0x2c>)
 80199b4:	18d3      	adds	r3, r2, r3
 80199b6:	1d7a      	adds	r2, r7, #5
 80199b8:	7812      	ldrb	r2, [r2, #0]
 80199ba:	76da      	strb	r2, [r3, #27]
}
 80199bc:	46c0      	nop			; (mov r8, r8)
 80199be:	46bd      	mov	sp, r7
 80199c0:	b002      	add	sp, #8
 80199c2:	bd80      	pop	{r7, pc}
 80199c4:	20003088 	.word	0x20003088

080199c8 <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b082      	sub	sp, #8
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	0018      	movs	r0, r3
 80199d4:	f000 fe66 	bl	801a6a4 <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 80199d8:	f000 fe76 	bl	801a6c8 <HW_TRACER_EMB_StartRX>
}
 80199dc:	46c0      	nop			; (mov r8, r8)
 80199de:	46bd      	mov	sp, r7
 80199e0:	b002      	add	sp, #8
 80199e2:	bd80      	pop	{r7, pc}

080199e4 <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b082      	sub	sp, #8
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
 80199ec:	000a      	movs	r2, r1
 80199ee:	1cfb      	adds	r3, r7, #3
 80199f0:	701a      	strb	r2, [r3, #0]
  if (Size != 0U)
 80199f2:	1cfb      	adds	r3, r7, #3
 80199f4:	781b      	ldrb	r3, [r3, #0]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d008      	beq.n	8019a0c <TRACER_EMB_EnableOverFlow+0x28>
  {
    TracerContext.OverFlow_Data = Data;
 80199fa:	4b07      	ldr	r3, [pc, #28]	; (8019a18 <TRACER_EMB_EnableOverFlow+0x34>)
 80199fc:	687a      	ldr	r2, [r7, #4]
 80199fe:	615a      	str	r2, [r3, #20]
    TracerContext.OverFlow_Size = Size;
 8019a00:	4b05      	ldr	r3, [pc, #20]	; (8019a18 <TRACER_EMB_EnableOverFlow+0x34>)
 8019a02:	1cfa      	adds	r2, r7, #3
 8019a04:	7812      	ldrb	r2, [r2, #0]
 8019a06:	761a      	strb	r2, [r3, #24]
    return 0;
 8019a08:	2300      	movs	r3, #0
 8019a0a:	e001      	b.n	8019a10 <TRACER_EMB_EnableOverFlow+0x2c>
  }
  return -1;
 8019a0c:	2301      	movs	r3, #1
 8019a0e:	425b      	negs	r3, r3
}
 8019a10:	0018      	movs	r0, r3
 8019a12:	46bd      	mov	sp, r7
 8019a14:	b002      	add	sp, #8
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	20003088 	.word	0x20003088

08019a1c <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b084      	sub	sp, #16
 8019a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a22:	f3ef 8310 	mrs	r3, PRIMASK
 8019a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8019a28:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 8019a2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a2c:	b672      	cpsid	i
}
 8019a2e:	46c0      	nop			; (mov r8, r8)
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 8019a30:	4b1d      	ldr	r3, [pc, #116]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a32:	681a      	ldr	r2, [r3, #0]
 8019a34:	4b1c      	ldr	r3, [pc, #112]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a36:	689b      	ldr	r3, [r3, #8]
 8019a38:	18d3      	adds	r3, r2, r3
 8019a3a:	059b      	lsls	r3, r3, #22
 8019a3c:	0d9a      	lsrs	r2, r3, #22
 8019a3e:	4b1a      	ldr	r3, [pc, #104]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a40:	601a      	str	r2, [r3, #0]

  if ((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 8019a42:	4b19      	ldr	r3, [pc, #100]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a44:	695b      	ldr	r3, [r3, #20]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d019      	beq.n	8019a7e <TRACER_EMB_CALLBACK_TX+0x62>
 8019a4a:	4b17      	ldr	r3, [pc, #92]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a4c:	7e9b      	ldrb	r3, [r3, #26]
 8019a4e:	2b01      	cmp	r3, #1
 8019a50:	d115      	bne.n	8019a7e <TRACER_EMB_CALLBACK_TX+0x62>
      && (TracerContext.discontinue == 0U))
 8019a52:	4b15      	ldr	r3, [pc, #84]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a54:	7e5b      	ldrb	r3, [r3, #25]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d111      	bne.n	8019a7e <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 8019a5a:	4b13      	ldr	r3, [pc, #76]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a5c:	2202      	movs	r2, #2
 8019a5e:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData(TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 8019a60:	4b11      	ldr	r3, [pc, #68]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a62:	695a      	ldr	r2, [r3, #20]
 8019a64:	4b10      	ldr	r3, [pc, #64]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a66:	7e1b      	ldrb	r3, [r3, #24]
 8019a68:	0019      	movs	r1, r3
 8019a6a:	0010      	movs	r0, r2
 8019a6c:	f000 ff2c 	bl	801a8c8 <HW_TRACER_EMB_SendData>
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	f383 8810 	msr	PRIMASK, r3
}
 8019a7a:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
 8019a7c:	e00f      	b.n	8019a9e <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 8019a7e:	4b0a      	ldr	r3, [pc, #40]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a80:	68db      	ldr	r3, [r3, #12]
 8019a82:	1e5a      	subs	r2, r3, #1
 8019a84:	4b08      	ldr	r3, [pc, #32]	; (8019aa8 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019a86:	60da      	str	r2, [r3, #12]
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a8c:	683b      	ldr	r3, [r7, #0]
 8019a8e:	f383 8810 	msr	PRIMASK, r3
}
 8019a92:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 8019a94:	f000 f828 	bl	8019ae8 <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 8019a98:	f000 f844 	bl	8019b24 <TRACER_EMB_SendData>
  }
}
 8019a9c:	46c0      	nop			; (mov r8, r8)
 8019a9e:	46c0      	nop			; (mov r8, r8)
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	b004      	add	sp, #16
 8019aa4:	bd80      	pop	{r7, pc}
 8019aa6:	46c0      	nop			; (mov r8, r8)
 8019aa8:	20003088 	.word	0x20003088

08019aac <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b084      	sub	sp, #16
 8019ab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8019ab6:	607b      	str	r3, [r7, #4]
  return(result);
 8019ab8:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 8019aba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019abc:	b672      	cpsid	i
}
 8019abe:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter++;
 8019ac0:	4b08      	ldr	r3, [pc, #32]	; (8019ae4 <TRACER_EMB_Lock+0x38>)
 8019ac2:	7c1b      	ldrb	r3, [r3, #16]
 8019ac4:	b2db      	uxtb	r3, r3
 8019ac6:	3301      	adds	r3, #1
 8019ac8:	b2da      	uxtb	r2, r3
 8019aca:	4b06      	ldr	r3, [pc, #24]	; (8019ae4 <TRACER_EMB_Lock+0x38>)
 8019acc:	741a      	strb	r2, [r3, #16]
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ad2:	68bb      	ldr	r3, [r7, #8]
 8019ad4:	f383 8810 	msr	PRIMASK, r3
}
 8019ad8:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 8019ada:	46c0      	nop			; (mov r8, r8)
 8019adc:	46bd      	mov	sp, r7
 8019ade:	b004      	add	sp, #16
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	46c0      	nop			; (mov r8, r8)
 8019ae4:	20003088 	.word	0x20003088

08019ae8 <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b084      	sub	sp, #16
 8019aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019aee:	f3ef 8310 	mrs	r3, PRIMASK
 8019af2:	607b      	str	r3, [r7, #4]
  return(result);
 8019af4:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 8019af6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019af8:	b672      	cpsid	i
}
 8019afa:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter--;
 8019afc:	4b08      	ldr	r3, [pc, #32]	; (8019b20 <TRACER_EMB_UnLock+0x38>)
 8019afe:	7c1b      	ldrb	r3, [r3, #16]
 8019b00:	b2db      	uxtb	r3, r3
 8019b02:	3b01      	subs	r3, #1
 8019b04:	b2da      	uxtb	r2, r3
 8019b06:	4b06      	ldr	r3, [pc, #24]	; (8019b20 <TRACER_EMB_UnLock+0x38>)
 8019b08:	741a      	strb	r2, [r3, #16]
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b0e:	68bb      	ldr	r3, [r7, #8]
 8019b10:	f383 8810 	msr	PRIMASK, r3
}
 8019b14:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 8019b16:	46c0      	nop			; (mov r8, r8)
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	b004      	add	sp, #16
 8019b1c:	bd80      	pop	{r7, pc}
 8019b1e:	46c0      	nop			; (mov r8, r8)
 8019b20:	20003088 	.word	0x20003088

08019b24 <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b086      	sub	sp, #24
 8019b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8019b2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8019b30:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;

  TRACER_ENTER_CRITICAL_SECTION();
 8019b32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b34:	b672      	cpsid	i
}
 8019b36:	46c0      	nop			; (mov r8, r8)

  if (0u == TracerContext.Counter)
 8019b38:	4b28      	ldr	r3, [pc, #160]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b3a:	7c1b      	ldrb	r3, [r3, #16]
 8019b3c:	b2db      	uxtb	r3, r3
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d134      	bne.n	8019bac <TRACER_EMB_SendData+0x88>
  {
    _begin = TracerContext.PtrTx_Read;
 8019b42:	4b26      	ldr	r3, [pc, #152]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 8019b48:	4b24      	ldr	r3, [pc, #144]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b4a:	685b      	ldr	r3, [r3, #4]
 8019b4c:	60fb      	str	r3, [r7, #12]

    if (_begin != _end)
 8019b4e:	693a      	ldr	r2, [r7, #16]
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	429a      	cmp	r2, r3
 8019b54:	d02a      	beq.n	8019bac <TRACER_EMB_SendData+0x88>
    {
      TRACER_EMB_Lock();
 8019b56:	f7ff ffa9 	bl	8019aac <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 8019b5a:	68fa      	ldr	r2, [r7, #12]
 8019b5c:	693b      	ldr	r3, [r7, #16]
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	d908      	bls.n	8019b74 <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 8019b62:	68fa      	ldr	r2, [r7, #12]
 8019b64:	693b      	ldr	r3, [r7, #16]
 8019b66:	1ad2      	subs	r2, r2, r3
 8019b68:	4b1c      	ldr	r3, [pc, #112]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b6a:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 0;
 8019b6c:	4b1b      	ldr	r3, [pc, #108]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b6e:	2200      	movs	r2, #0
 8019b70:	765a      	strb	r2, [r3, #25]
 8019b72:	e008      	b.n	8019b86 <TRACER_EMB_SendData+0x62>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 8019b74:	693b      	ldr	r3, [r7, #16]
 8019b76:	2280      	movs	r2, #128	; 0x80
 8019b78:	00d2      	lsls	r2, r2, #3
 8019b7a:	1ad2      	subs	r2, r2, r3
 8019b7c:	4b17      	ldr	r3, [pc, #92]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b7e:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 1;
 8019b80:	4b16      	ldr	r3, [pc, #88]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b82:	2201      	movs	r2, #1
 8019b84:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 8019b86:	f000 f88a 	bl	8019c9e <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 8019b8a:	4b14      	ldr	r3, [pc, #80]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b8c:	68db      	ldr	r3, [r3, #12]
 8019b8e:	1c5a      	adds	r2, r3, #1
 8019b90:	4b12      	ldr	r3, [pc, #72]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b92:	60da      	str	r2, [r3, #12]
      HW_TRACER_EMB_SendData((const uint8_t *)(&(TracerContext.PtrDataTx[_begin])), TracerContext.SizeSent);
 8019b94:	693b      	ldr	r3, [r7, #16]
 8019b96:	3318      	adds	r3, #24
 8019b98:	001a      	movs	r2, r3
 8019b9a:	4b10      	ldr	r3, [pc, #64]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019b9c:	18d3      	adds	r3, r2, r3
 8019b9e:	1cda      	adds	r2, r3, #3
 8019ba0:	4b0e      	ldr	r3, [pc, #56]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019ba2:	689b      	ldr	r3, [r3, #8]
 8019ba4:	0019      	movs	r1, r3
 8019ba6:	0010      	movs	r0, r2
 8019ba8:	f000 fe8e 	bl	801a8c8 <HW_TRACER_EMB_SendData>
    }
  }

  /* Low power processing */
  switch (TracerContext.LowPower_Counter)
 8019bac:	4b0b      	ldr	r3, [pc, #44]	; (8019bdc <TRACER_EMB_SendData+0xb8>)
 8019bae:	68db      	ldr	r3, [r3, #12]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d004      	beq.n	8019bbe <TRACER_EMB_SendData+0x9a>
 8019bb4:	2b01      	cmp	r3, #1
 8019bb6:	d105      	bne.n	8019bc4 <TRACER_EMB_SendData+0xa0>
  {
    case 1:
      TRACER_EMB_LowPowerSendData();
 8019bb8:	f000 f871 	bl	8019c9e <TRACER_EMB_LowPowerSendData>
      break;
 8019bbc:	e003      	b.n	8019bc6 <TRACER_EMB_SendData+0xa2>
    case 0:
      TRACER_EMB_LowPowerSendDataComplete();
 8019bbe:	f000 f873 	bl	8019ca8 <TRACER_EMB_LowPowerSendDataComplete>
      break;
 8019bc2:	e000      	b.n	8019bc6 <TRACER_EMB_SendData+0xa2>
    default:
      break;
 8019bc4:	46c0      	nop			; (mov r8, r8)
 8019bc6:	697b      	ldr	r3, [r7, #20]
 8019bc8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	f383 8810 	msr	PRIMASK, r3
}
 8019bd0:	46c0      	nop			; (mov r8, r8)
  }

  TRACER_LEAVE_CRITICAL_SECTION();
}
 8019bd2:	46c0      	nop			; (mov r8, r8)
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	b006      	add	sp, #24
 8019bd8:	bd80      	pop	{r7, pc}
 8019bda:	46c0      	nop			; (mov r8, r8)
 8019bdc:	20003088 	.word	0x20003088

08019be0 <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b088      	sub	sp, #32
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 8019be8:	2301      	movs	r3, #1
 8019bea:	425b      	negs	r3, r3
 8019bec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019bee:	f3ef 8310 	mrs	r3, PRIMASK
 8019bf2:	613b      	str	r3, [r7, #16]
  return(result);
 8019bf4:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 8019bf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019bf8:	b672      	cpsid	i
}
 8019bfa:	46c0      	nop			; (mov r8, r8)

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 8019bfc:	4b24      	ldr	r3, [pc, #144]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019bfe:	685a      	ldr	r2, [r3, #4]
 8019c00:	4b23      	ldr	r3, [pc, #140]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	429a      	cmp	r2, r3
 8019c06:	d103      	bne.n	8019c10 <TRACER_EMB_AllocateBufer+0x30>
  {
    /* Need to add buffer full management */
    _freesize = TRACER_EMB_BUFFER_SIZE;
 8019c08:	2380      	movs	r3, #128	; 0x80
 8019c0a:	00db      	lsls	r3, r3, #3
 8019c0c:	61fb      	str	r3, [r7, #28]
 8019c0e:	e016      	b.n	8019c3e <TRACER_EMB_AllocateBufer+0x5e>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 8019c10:	4b1f      	ldr	r3, [pc, #124]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c12:	685a      	ldr	r2, [r3, #4]
 8019c14:	4b1e      	ldr	r3, [pc, #120]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	429a      	cmp	r2, r3
 8019c1a:	d90a      	bls.n	8019c32 <TRACER_EMB_AllocateBufer+0x52>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 8019c1c:	4b1c      	ldr	r3, [pc, #112]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c1e:	681a      	ldr	r2, [r3, #0]
 8019c20:	4b1b      	ldr	r3, [pc, #108]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c22:	685b      	ldr	r3, [r3, #4]
 8019c24:	1ad3      	subs	r3, r2, r3
 8019c26:	2280      	movs	r2, #128	; 0x80
 8019c28:	00d2      	lsls	r2, r2, #3
 8019c2a:	4694      	mov	ip, r2
 8019c2c:	4463      	add	r3, ip
 8019c2e:	61fb      	str	r3, [r7, #28]
 8019c30:	e005      	b.n	8019c3e <TRACER_EMB_AllocateBufer+0x5e>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 8019c32:	4b17      	ldr	r3, [pc, #92]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c34:	681a      	ldr	r2, [r3, #0]
 8019c36:	4b16      	ldr	r3, [pc, #88]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	1ad3      	subs	r3, r2, r3
 8019c3c:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 8019c3e:	69fa      	ldr	r2, [r7, #28]
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	429a      	cmp	r2, r3
 8019c44:	d912      	bls.n	8019c6c <TRACER_EMB_AllocateBufer+0x8c>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 8019c46:	4b12      	ldr	r3, [pc, #72]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c48:	685b      	ldr	r3, [r3, #4]
 8019c4a:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 8019c4c:	4b10      	ldr	r3, [pc, #64]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c4e:	685a      	ldr	r2, [r3, #4]
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	18d3      	adds	r3, r2, r3
 8019c54:	059b      	lsls	r3, r3, #22
 8019c56:	0d9a      	lsrs	r2, r3, #22
 8019c58:	4b0d      	ldr	r3, [pc, #52]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c5a:	605a      	str	r2, [r3, #4]
    if (TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 8019c5c:	4b0c      	ldr	r3, [pc, #48]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c5e:	7e9b      	ldrb	r3, [r3, #26]
 8019c60:	2b02      	cmp	r3, #2
 8019c62:	d10a      	bne.n	8019c7a <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 8019c64:	4b0a      	ldr	r3, [pc, #40]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c66:	2200      	movs	r2, #0
 8019c68:	769a      	strb	r2, [r3, #26]
 8019c6a:	e006      	b.n	8019c7a <TRACER_EMB_AllocateBufer+0x9a>
    }
  }
  else
  {
    if (TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 8019c6c:	4b08      	ldr	r3, [pc, #32]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c6e:	7e9b      	ldrb	r3, [r3, #26]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d102      	bne.n	8019c7a <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 8019c74:	4b06      	ldr	r3, [pc, #24]	; (8019c90 <TRACER_EMB_AllocateBufer+0xb0>)
 8019c76:	2201      	movs	r2, #1
 8019c78:	769a      	strb	r2, [r3, #26]
 8019c7a:	697b      	ldr	r3, [r7, #20]
 8019c7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	f383 8810 	msr	PRIMASK, r3
}
 8019c84:	46c0      	nop			; (mov r8, r8)
    }
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 8019c86:	69bb      	ldr	r3, [r7, #24]
}
 8019c88:	0018      	movs	r0, r3
 8019c8a:	46bd      	mov	sp, r7
 8019c8c:	b008      	add	sp, #32
 8019c8e:	bd80      	pop	{r7, pc}
 8019c90:	20003088 	.word	0x20003088

08019c94 <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	af00      	add	r7, sp, #0
}
 8019c98:	46c0      	nop			; (mov r8, r8)
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}

08019c9e <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 8019c9e:	b580      	push	{r7, lr}
 8019ca0:	af00      	add	r7, sp, #0
}
 8019ca2:	46c0      	nop			; (mov r8, r8)
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	bd80      	pop	{r7, pc}

08019ca8 <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	af00      	add	r7, sp, #0
}
 8019cac:	46c0      	nop			; (mov r8, r8)
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
	...

08019cb4 <__NVIC_EnableIRQ>:
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b082      	sub	sp, #8
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	0002      	movs	r2, r0
 8019cbc:	1dfb      	adds	r3, r7, #7
 8019cbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8019cc0:	1dfb      	adds	r3, r7, #7
 8019cc2:	781b      	ldrb	r3, [r3, #0]
 8019cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8019cc6:	d809      	bhi.n	8019cdc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019cc8:	1dfb      	adds	r3, r7, #7
 8019cca:	781b      	ldrb	r3, [r3, #0]
 8019ccc:	001a      	movs	r2, r3
 8019cce:	231f      	movs	r3, #31
 8019cd0:	401a      	ands	r2, r3
 8019cd2:	4b04      	ldr	r3, [pc, #16]	; (8019ce4 <__NVIC_EnableIRQ+0x30>)
 8019cd4:	2101      	movs	r1, #1
 8019cd6:	4091      	lsls	r1, r2
 8019cd8:	000a      	movs	r2, r1
 8019cda:	601a      	str	r2, [r3, #0]
}
 8019cdc:	46c0      	nop			; (mov r8, r8)
 8019cde:	46bd      	mov	sp, r7
 8019ce0:	b002      	add	sp, #8
 8019ce2:	bd80      	pop	{r7, pc}
 8019ce4:	e000e100 	.word	0xe000e100

08019ce8 <__NVIC_SetPriority>:
{
 8019ce8:	b590      	push	{r4, r7, lr}
 8019cea:	b083      	sub	sp, #12
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	0002      	movs	r2, r0
 8019cf0:	6039      	str	r1, [r7, #0]
 8019cf2:	1dfb      	adds	r3, r7, #7
 8019cf4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8019cf6:	1dfb      	adds	r3, r7, #7
 8019cf8:	781b      	ldrb	r3, [r3, #0]
 8019cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8019cfc:	d828      	bhi.n	8019d50 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8019cfe:	4a2f      	ldr	r2, [pc, #188]	; (8019dbc <__NVIC_SetPriority+0xd4>)
 8019d00:	1dfb      	adds	r3, r7, #7
 8019d02:	781b      	ldrb	r3, [r3, #0]
 8019d04:	b25b      	sxtb	r3, r3
 8019d06:	089b      	lsrs	r3, r3, #2
 8019d08:	33c0      	adds	r3, #192	; 0xc0
 8019d0a:	009b      	lsls	r3, r3, #2
 8019d0c:	589b      	ldr	r3, [r3, r2]
 8019d0e:	1dfa      	adds	r2, r7, #7
 8019d10:	7812      	ldrb	r2, [r2, #0]
 8019d12:	0011      	movs	r1, r2
 8019d14:	2203      	movs	r2, #3
 8019d16:	400a      	ands	r2, r1
 8019d18:	00d2      	lsls	r2, r2, #3
 8019d1a:	21ff      	movs	r1, #255	; 0xff
 8019d1c:	4091      	lsls	r1, r2
 8019d1e:	000a      	movs	r2, r1
 8019d20:	43d2      	mvns	r2, r2
 8019d22:	401a      	ands	r2, r3
 8019d24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	019b      	lsls	r3, r3, #6
 8019d2a:	22ff      	movs	r2, #255	; 0xff
 8019d2c:	401a      	ands	r2, r3
 8019d2e:	1dfb      	adds	r3, r7, #7
 8019d30:	781b      	ldrb	r3, [r3, #0]
 8019d32:	0018      	movs	r0, r3
 8019d34:	2303      	movs	r3, #3
 8019d36:	4003      	ands	r3, r0
 8019d38:	00db      	lsls	r3, r3, #3
 8019d3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8019d3c:	481f      	ldr	r0, [pc, #124]	; (8019dbc <__NVIC_SetPriority+0xd4>)
 8019d3e:	1dfb      	adds	r3, r7, #7
 8019d40:	781b      	ldrb	r3, [r3, #0]
 8019d42:	b25b      	sxtb	r3, r3
 8019d44:	089b      	lsrs	r3, r3, #2
 8019d46:	430a      	orrs	r2, r1
 8019d48:	33c0      	adds	r3, #192	; 0xc0
 8019d4a:	009b      	lsls	r3, r3, #2
 8019d4c:	501a      	str	r2, [r3, r0]
}
 8019d4e:	e031      	b.n	8019db4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8019d50:	4a1b      	ldr	r2, [pc, #108]	; (8019dc0 <__NVIC_SetPriority+0xd8>)
 8019d52:	1dfb      	adds	r3, r7, #7
 8019d54:	781b      	ldrb	r3, [r3, #0]
 8019d56:	0019      	movs	r1, r3
 8019d58:	230f      	movs	r3, #15
 8019d5a:	400b      	ands	r3, r1
 8019d5c:	3b08      	subs	r3, #8
 8019d5e:	089b      	lsrs	r3, r3, #2
 8019d60:	3306      	adds	r3, #6
 8019d62:	009b      	lsls	r3, r3, #2
 8019d64:	18d3      	adds	r3, r2, r3
 8019d66:	3304      	adds	r3, #4
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	1dfa      	adds	r2, r7, #7
 8019d6c:	7812      	ldrb	r2, [r2, #0]
 8019d6e:	0011      	movs	r1, r2
 8019d70:	2203      	movs	r2, #3
 8019d72:	400a      	ands	r2, r1
 8019d74:	00d2      	lsls	r2, r2, #3
 8019d76:	21ff      	movs	r1, #255	; 0xff
 8019d78:	4091      	lsls	r1, r2
 8019d7a:	000a      	movs	r2, r1
 8019d7c:	43d2      	mvns	r2, r2
 8019d7e:	401a      	ands	r2, r3
 8019d80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8019d82:	683b      	ldr	r3, [r7, #0]
 8019d84:	019b      	lsls	r3, r3, #6
 8019d86:	22ff      	movs	r2, #255	; 0xff
 8019d88:	401a      	ands	r2, r3
 8019d8a:	1dfb      	adds	r3, r7, #7
 8019d8c:	781b      	ldrb	r3, [r3, #0]
 8019d8e:	0018      	movs	r0, r3
 8019d90:	2303      	movs	r3, #3
 8019d92:	4003      	ands	r3, r0
 8019d94:	00db      	lsls	r3, r3, #3
 8019d96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8019d98:	4809      	ldr	r0, [pc, #36]	; (8019dc0 <__NVIC_SetPriority+0xd8>)
 8019d9a:	1dfb      	adds	r3, r7, #7
 8019d9c:	781b      	ldrb	r3, [r3, #0]
 8019d9e:	001c      	movs	r4, r3
 8019da0:	230f      	movs	r3, #15
 8019da2:	4023      	ands	r3, r4
 8019da4:	3b08      	subs	r3, #8
 8019da6:	089b      	lsrs	r3, r3, #2
 8019da8:	430a      	orrs	r2, r1
 8019daa:	3306      	adds	r3, #6
 8019dac:	009b      	lsls	r3, r3, #2
 8019dae:	18c3      	adds	r3, r0, r3
 8019db0:	3304      	adds	r3, #4
 8019db2:	601a      	str	r2, [r3, #0]
}
 8019db4:	46c0      	nop			; (mov r8, r8)
 8019db6:	46bd      	mov	sp, r7
 8019db8:	b003      	add	sp, #12
 8019dba:	bd90      	pop	{r4, r7, pc}
 8019dbc:	e000e100 	.word	0xe000e100
 8019dc0:	e000ed00 	.word	0xe000ed00

08019dc4 <LL_DMA_EnableChannel>:
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b084      	sub	sp, #16
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
 8019dcc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8019dd2:	4a0b      	ldr	r2, [pc, #44]	; (8019e00 <LL_DMA_EnableChannel+0x3c>)
 8019dd4:	683b      	ldr	r3, [r7, #0]
 8019dd6:	18d3      	adds	r3, r2, r3
 8019dd8:	781b      	ldrb	r3, [r3, #0]
 8019dda:	001a      	movs	r2, r3
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	18d3      	adds	r3, r2, r3
 8019de0:	681a      	ldr	r2, [r3, #0]
 8019de2:	4907      	ldr	r1, [pc, #28]	; (8019e00 <LL_DMA_EnableChannel+0x3c>)
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	18cb      	adds	r3, r1, r3
 8019de8:	781b      	ldrb	r3, [r3, #0]
 8019dea:	0019      	movs	r1, r3
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	18cb      	adds	r3, r1, r3
 8019df0:	2101      	movs	r1, #1
 8019df2:	430a      	orrs	r2, r1
 8019df4:	601a      	str	r2, [r3, #0]
}
 8019df6:	46c0      	nop			; (mov r8, r8)
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	b004      	add	sp, #16
 8019dfc:	bd80      	pop	{r7, pc}
 8019dfe:	46c0      	nop			; (mov r8, r8)
 8019e00:	0801cc40 	.word	0x0801cc40

08019e04 <LL_DMA_DisableChannel>:
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b084      	sub	sp, #16
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8019e12:	4a0b      	ldr	r2, [pc, #44]	; (8019e40 <LL_DMA_DisableChannel+0x3c>)
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	18d3      	adds	r3, r2, r3
 8019e18:	781b      	ldrb	r3, [r3, #0]
 8019e1a:	001a      	movs	r2, r3
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	18d3      	adds	r3, r2, r3
 8019e20:	681a      	ldr	r2, [r3, #0]
 8019e22:	4907      	ldr	r1, [pc, #28]	; (8019e40 <LL_DMA_DisableChannel+0x3c>)
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	18cb      	adds	r3, r1, r3
 8019e28:	781b      	ldrb	r3, [r3, #0]
 8019e2a:	0019      	movs	r1, r3
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	18cb      	adds	r3, r1, r3
 8019e30:	2101      	movs	r1, #1
 8019e32:	438a      	bics	r2, r1
 8019e34:	601a      	str	r2, [r3, #0]
}
 8019e36:	46c0      	nop			; (mov r8, r8)
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	b004      	add	sp, #16
 8019e3c:	bd80      	pop	{r7, pc}
 8019e3e:	46c0      	nop			; (mov r8, r8)
 8019e40:	0801cc40 	.word	0x0801cc40

08019e44 <LL_DMA_ConfigTransfer>:
{
 8019e44:	b580      	push	{r7, lr}
 8019e46:	b086      	sub	sp, #24
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	60f8      	str	r0, [r7, #12]
 8019e4c:	60b9      	str	r1, [r7, #8]
 8019e4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8019e54:	4a0c      	ldr	r2, [pc, #48]	; (8019e88 <LL_DMA_ConfigTransfer+0x44>)
 8019e56:	68bb      	ldr	r3, [r7, #8]
 8019e58:	18d3      	adds	r3, r2, r3
 8019e5a:	781b      	ldrb	r3, [r3, #0]
 8019e5c:	001a      	movs	r2, r3
 8019e5e:	697b      	ldr	r3, [r7, #20]
 8019e60:	18d3      	adds	r3, r2, r3
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	4a09      	ldr	r2, [pc, #36]	; (8019e8c <LL_DMA_ConfigTransfer+0x48>)
 8019e66:	4013      	ands	r3, r2
 8019e68:	0019      	movs	r1, r3
 8019e6a:	4a07      	ldr	r2, [pc, #28]	; (8019e88 <LL_DMA_ConfigTransfer+0x44>)
 8019e6c:	68bb      	ldr	r3, [r7, #8]
 8019e6e:	18d3      	adds	r3, r2, r3
 8019e70:	781b      	ldrb	r3, [r3, #0]
 8019e72:	001a      	movs	r2, r3
 8019e74:	697b      	ldr	r3, [r7, #20]
 8019e76:	18d3      	adds	r3, r2, r3
 8019e78:	687a      	ldr	r2, [r7, #4]
 8019e7a:	430a      	orrs	r2, r1
 8019e7c:	601a      	str	r2, [r3, #0]
}
 8019e7e:	46c0      	nop			; (mov r8, r8)
 8019e80:	46bd      	mov	sp, r7
 8019e82:	b006      	add	sp, #24
 8019e84:	bd80      	pop	{r7, pc}
 8019e86:	46c0      	nop			; (mov r8, r8)
 8019e88:	0801cc40 	.word	0x0801cc40
 8019e8c:	ffff800f 	.word	0xffff800f

08019e90 <LL_DMA_GetDataTransferDirection>:
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b084      	sub	sp, #16
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
 8019e98:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8019e9e:	4a07      	ldr	r2, [pc, #28]	; (8019ebc <LL_DMA_GetDataTransferDirection+0x2c>)
 8019ea0:	683b      	ldr	r3, [r7, #0]
 8019ea2:	18d3      	adds	r3, r2, r3
 8019ea4:	781b      	ldrb	r3, [r3, #0]
 8019ea6:	001a      	movs	r2, r3
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	18d3      	adds	r3, r2, r3
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	4a04      	ldr	r2, [pc, #16]	; (8019ec0 <LL_DMA_GetDataTransferDirection+0x30>)
 8019eb0:	4013      	ands	r3, r2
}
 8019eb2:	0018      	movs	r0, r3
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	b004      	add	sp, #16
 8019eb8:	bd80      	pop	{r7, pc}
 8019eba:	46c0      	nop			; (mov r8, r8)
 8019ebc:	0801cc40 	.word	0x0801cc40
 8019ec0:	00004010 	.word	0x00004010

08019ec4 <LL_DMA_SetDataLength>:
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b086      	sub	sp, #24
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	60f8      	str	r0, [r7, #12]
 8019ecc:	60b9      	str	r1, [r7, #8]
 8019ece:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8019ed4:	4a0b      	ldr	r2, [pc, #44]	; (8019f04 <LL_DMA_SetDataLength+0x40>)
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	18d3      	adds	r3, r2, r3
 8019eda:	781b      	ldrb	r3, [r3, #0]
 8019edc:	001a      	movs	r2, r3
 8019ede:	697b      	ldr	r3, [r7, #20]
 8019ee0:	18d3      	adds	r3, r2, r3
 8019ee2:	685b      	ldr	r3, [r3, #4]
 8019ee4:	0c1b      	lsrs	r3, r3, #16
 8019ee6:	0419      	lsls	r1, r3, #16
 8019ee8:	4a06      	ldr	r2, [pc, #24]	; (8019f04 <LL_DMA_SetDataLength+0x40>)
 8019eea:	68bb      	ldr	r3, [r7, #8]
 8019eec:	18d3      	adds	r3, r2, r3
 8019eee:	781b      	ldrb	r3, [r3, #0]
 8019ef0:	001a      	movs	r2, r3
 8019ef2:	697b      	ldr	r3, [r7, #20]
 8019ef4:	18d3      	adds	r3, r2, r3
 8019ef6:	687a      	ldr	r2, [r7, #4]
 8019ef8:	430a      	orrs	r2, r1
 8019efa:	605a      	str	r2, [r3, #4]
}
 8019efc:	46c0      	nop			; (mov r8, r8)
 8019efe:	46bd      	mov	sp, r7
 8019f00:	b006      	add	sp, #24
 8019f02:	bd80      	pop	{r7, pc}
 8019f04:	0801cc40 	.word	0x0801cc40

08019f08 <LL_DMA_ConfigAddresses>:
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b086      	sub	sp, #24
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	60f8      	str	r0, [r7, #12]
 8019f10:	60b9      	str	r1, [r7, #8]
 8019f12:	607a      	str	r2, [r7, #4]
 8019f14:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8019f1a:	6a3b      	ldr	r3, [r7, #32]
 8019f1c:	2b10      	cmp	r3, #16
 8019f1e:	d112      	bne.n	8019f46 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8019f20:	4a14      	ldr	r2, [pc, #80]	; (8019f74 <LL_DMA_ConfigAddresses+0x6c>)
 8019f22:	68bb      	ldr	r3, [r7, #8]
 8019f24:	18d3      	adds	r3, r2, r3
 8019f26:	781b      	ldrb	r3, [r3, #0]
 8019f28:	001a      	movs	r2, r3
 8019f2a:	697b      	ldr	r3, [r7, #20]
 8019f2c:	18d3      	adds	r3, r2, r3
 8019f2e:	687a      	ldr	r2, [r7, #4]
 8019f30:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8019f32:	4a10      	ldr	r2, [pc, #64]	; (8019f74 <LL_DMA_ConfigAddresses+0x6c>)
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	18d3      	adds	r3, r2, r3
 8019f38:	781b      	ldrb	r3, [r3, #0]
 8019f3a:	001a      	movs	r2, r3
 8019f3c:	697b      	ldr	r3, [r7, #20]
 8019f3e:	18d3      	adds	r3, r2, r3
 8019f40:	683a      	ldr	r2, [r7, #0]
 8019f42:	609a      	str	r2, [r3, #8]
}
 8019f44:	e011      	b.n	8019f6a <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8019f46:	4a0b      	ldr	r2, [pc, #44]	; (8019f74 <LL_DMA_ConfigAddresses+0x6c>)
 8019f48:	68bb      	ldr	r3, [r7, #8]
 8019f4a:	18d3      	adds	r3, r2, r3
 8019f4c:	781b      	ldrb	r3, [r3, #0]
 8019f4e:	001a      	movs	r2, r3
 8019f50:	697b      	ldr	r3, [r7, #20]
 8019f52:	18d3      	adds	r3, r2, r3
 8019f54:	687a      	ldr	r2, [r7, #4]
 8019f56:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8019f58:	4a06      	ldr	r2, [pc, #24]	; (8019f74 <LL_DMA_ConfigAddresses+0x6c>)
 8019f5a:	68bb      	ldr	r3, [r7, #8]
 8019f5c:	18d3      	adds	r3, r2, r3
 8019f5e:	781b      	ldrb	r3, [r3, #0]
 8019f60:	001a      	movs	r2, r3
 8019f62:	697b      	ldr	r3, [r7, #20]
 8019f64:	18d3      	adds	r3, r2, r3
 8019f66:	683a      	ldr	r2, [r7, #0]
 8019f68:	60da      	str	r2, [r3, #12]
}
 8019f6a:	46c0      	nop			; (mov r8, r8)
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	b006      	add	sp, #24
 8019f70:	bd80      	pop	{r7, pc}
 8019f72:	46c0      	nop			; (mov r8, r8)
 8019f74:	0801cc40 	.word	0x0801cc40

08019f78 <LL_DMA_SetPeriphRequest>:
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b086      	sub	sp, #24
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	60f8      	str	r0, [r7, #12]
 8019f80:	60b9      	str	r1, [r7, #8]
 8019f82:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	0a9b      	lsrs	r3, r3, #10
 8019f88:	4a0f      	ldr	r2, [pc, #60]	; (8019fc8 <LL_DMA_SetPeriphRequest+0x50>)
 8019f8a:	405a      	eors	r2, r3
 8019f8c:	0013      	movs	r3, r2
 8019f8e:	00db      	lsls	r3, r3, #3
 8019f90:	1a9b      	subs	r3, r3, r2
 8019f92:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8019f94:	68ba      	ldr	r2, [r7, #8]
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	18d3      	adds	r3, r2, r3
 8019f9a:	009b      	lsls	r3, r3, #2
 8019f9c:	4a0b      	ldr	r2, [pc, #44]	; (8019fcc <LL_DMA_SetPeriphRequest+0x54>)
 8019f9e:	4694      	mov	ip, r2
 8019fa0:	4463      	add	r3, ip
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	227f      	movs	r2, #127	; 0x7f
 8019fa6:	4393      	bics	r3, r2
 8019fa8:	0019      	movs	r1, r3
 8019faa:	68ba      	ldr	r2, [r7, #8]
 8019fac:	697b      	ldr	r3, [r7, #20]
 8019fae:	18d3      	adds	r3, r2, r3
 8019fb0:	009b      	lsls	r3, r3, #2
 8019fb2:	4a06      	ldr	r2, [pc, #24]	; (8019fcc <LL_DMA_SetPeriphRequest+0x54>)
 8019fb4:	4694      	mov	ip, r2
 8019fb6:	4463      	add	r3, ip
 8019fb8:	687a      	ldr	r2, [r7, #4]
 8019fba:	430a      	orrs	r2, r1
 8019fbc:	601a      	str	r2, [r3, #0]
}
 8019fbe:	46c0      	nop			; (mov r8, r8)
 8019fc0:	46bd      	mov	sp, r7
 8019fc2:	b006      	add	sp, #24
 8019fc4:	bd80      	pop	{r7, pc}
 8019fc6:	46c0      	nop			; (mov r8, r8)
 8019fc8:	00100080 	.word	0x00100080
 8019fcc:	40020800 	.word	0x40020800

08019fd0 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(const DMA_TypeDef *DMAx)
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b082      	sub	sp, #8
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	681a      	ldr	r2, [r3, #0]
 8019fdc:	2380      	movs	r3, #128	; 0x80
 8019fde:	009b      	lsls	r3, r3, #2
 8019fe0:	401a      	ands	r2, r3
 8019fe2:	2380      	movs	r3, #128	; 0x80
 8019fe4:	009b      	lsls	r3, r3, #2
 8019fe6:	429a      	cmp	r2, r3
 8019fe8:	d101      	bne.n	8019fee <LL_DMA_IsActiveFlag_TC3+0x1e>
 8019fea:	2301      	movs	r3, #1
 8019fec:	e000      	b.n	8019ff0 <LL_DMA_IsActiveFlag_TC3+0x20>
 8019fee:	2300      	movs	r3, #0
}
 8019ff0:	0018      	movs	r0, r3
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	b002      	add	sp, #8
 8019ff6:	bd80      	pop	{r7, pc}

08019ff8 <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b082      	sub	sp, #8
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	2280      	movs	r2, #128	; 0x80
 801a004:	0052      	lsls	r2, r2, #1
 801a006:	605a      	str	r2, [r3, #4]
}
 801a008:	46c0      	nop			; (mov r8, r8)
 801a00a:	46bd      	mov	sp, r7
 801a00c:	b002      	add	sp, #8
 801a00e:	bd80      	pop	{r7, pc}

0801a010 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b084      	sub	sp, #16
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
 801a018:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 801a01e:	4a0b      	ldr	r2, [pc, #44]	; (801a04c <LL_DMA_EnableIT_TC+0x3c>)
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	18d3      	adds	r3, r2, r3
 801a024:	781b      	ldrb	r3, [r3, #0]
 801a026:	001a      	movs	r2, r3
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	18d3      	adds	r3, r2, r3
 801a02c:	681a      	ldr	r2, [r3, #0]
 801a02e:	4907      	ldr	r1, [pc, #28]	; (801a04c <LL_DMA_EnableIT_TC+0x3c>)
 801a030:	683b      	ldr	r3, [r7, #0]
 801a032:	18cb      	adds	r3, r1, r3
 801a034:	781b      	ldrb	r3, [r3, #0]
 801a036:	0019      	movs	r1, r3
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	18cb      	adds	r3, r1, r3
 801a03c:	2102      	movs	r1, #2
 801a03e:	430a      	orrs	r2, r1
 801a040:	601a      	str	r2, [r3, #0]
}
 801a042:	46c0      	nop			; (mov r8, r8)
 801a044:	46bd      	mov	sp, r7
 801a046:	b004      	add	sp, #16
 801a048:	bd80      	pop	{r7, pc}
 801a04a:	46c0      	nop			; (mov r8, r8)
 801a04c:	0801cc40 	.word	0x0801cc40

0801a050 <LL_AHB1_GRP1_EnableClock>:
{
 801a050:	b580      	push	{r7, lr}
 801a052:	b084      	sub	sp, #16
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 801a058:	4b07      	ldr	r3, [pc, #28]	; (801a078 <LL_AHB1_GRP1_EnableClock+0x28>)
 801a05a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801a05c:	4b06      	ldr	r3, [pc, #24]	; (801a078 <LL_AHB1_GRP1_EnableClock+0x28>)
 801a05e:	687a      	ldr	r2, [r7, #4]
 801a060:	430a      	orrs	r2, r1
 801a062:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 801a064:	4b04      	ldr	r3, [pc, #16]	; (801a078 <LL_AHB1_GRP1_EnableClock+0x28>)
 801a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a068:	687a      	ldr	r2, [r7, #4]
 801a06a:	4013      	ands	r3, r2
 801a06c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801a06e:	68fb      	ldr	r3, [r7, #12]
}
 801a070:	46c0      	nop			; (mov r8, r8)
 801a072:	46bd      	mov	sp, r7
 801a074:	b004      	add	sp, #16
 801a076:	bd80      	pop	{r7, pc}
 801a078:	40021000 	.word	0x40021000

0801a07c <LL_APB1_GRP1_EnableClock>:
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b084      	sub	sp, #16
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 801a084:	4b07      	ldr	r3, [pc, #28]	; (801a0a4 <LL_APB1_GRP1_EnableClock+0x28>)
 801a086:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801a088:	4b06      	ldr	r3, [pc, #24]	; (801a0a4 <LL_APB1_GRP1_EnableClock+0x28>)
 801a08a:	687a      	ldr	r2, [r7, #4]
 801a08c:	430a      	orrs	r2, r1
 801a08e:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 801a090:	4b04      	ldr	r3, [pc, #16]	; (801a0a4 <LL_APB1_GRP1_EnableClock+0x28>)
 801a092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a094:	687a      	ldr	r2, [r7, #4]
 801a096:	4013      	ands	r3, r2
 801a098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801a09a:	68fb      	ldr	r3, [r7, #12]
}
 801a09c:	46c0      	nop			; (mov r8, r8)
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	b004      	add	sp, #16
 801a0a2:	bd80      	pop	{r7, pc}
 801a0a4:	40021000 	.word	0x40021000

0801a0a8 <LL_APB1_GRP1_DisableClock>:
{
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	b082      	sub	sp, #8
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 801a0b0:	4b05      	ldr	r3, [pc, #20]	; (801a0c8 <LL_APB1_GRP1_DisableClock+0x20>)
 801a0b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	43d9      	mvns	r1, r3
 801a0b8:	4b03      	ldr	r3, [pc, #12]	; (801a0c8 <LL_APB1_GRP1_DisableClock+0x20>)
 801a0ba:	400a      	ands	r2, r1
 801a0bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801a0be:	46c0      	nop			; (mov r8, r8)
 801a0c0:	46bd      	mov	sp, r7
 801a0c2:	b002      	add	sp, #8
 801a0c4:	bd80      	pop	{r7, pc}
 801a0c6:	46c0      	nop			; (mov r8, r8)
 801a0c8:	40021000 	.word	0x40021000

0801a0cc <LL_IOP_GRP1_EnableClock>:
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b084      	sub	sp, #16
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 801a0d4:	4b07      	ldr	r3, [pc, #28]	; (801a0f4 <LL_IOP_GRP1_EnableClock+0x28>)
 801a0d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801a0d8:	4b06      	ldr	r3, [pc, #24]	; (801a0f4 <LL_IOP_GRP1_EnableClock+0x28>)
 801a0da:	687a      	ldr	r2, [r7, #4]
 801a0dc:	430a      	orrs	r2, r1
 801a0de:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 801a0e0:	4b04      	ldr	r3, [pc, #16]	; (801a0f4 <LL_IOP_GRP1_EnableClock+0x28>)
 801a0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a0e4:	687a      	ldr	r2, [r7, #4]
 801a0e6:	4013      	ands	r3, r2
 801a0e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801a0ea:	68fb      	ldr	r3, [r7, #12]
}
 801a0ec:	46c0      	nop			; (mov r8, r8)
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	b004      	add	sp, #16
 801a0f2:	bd80      	pop	{r7, pc}
 801a0f4:	40021000 	.word	0x40021000

0801a0f8 <LL_GPIO_SetPinMode>:
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b084      	sub	sp, #16
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	60f8      	str	r0, [r7, #12]
 801a100:	60b9      	str	r1, [r7, #8]
 801a102:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	6819      	ldr	r1, [r3, #0]
 801a108:	68bb      	ldr	r3, [r7, #8]
 801a10a:	435b      	muls	r3, r3
 801a10c:	001a      	movs	r2, r3
 801a10e:	0013      	movs	r3, r2
 801a110:	005b      	lsls	r3, r3, #1
 801a112:	189b      	adds	r3, r3, r2
 801a114:	43db      	mvns	r3, r3
 801a116:	400b      	ands	r3, r1
 801a118:	001a      	movs	r2, r3
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	435b      	muls	r3, r3
 801a11e:	6879      	ldr	r1, [r7, #4]
 801a120:	434b      	muls	r3, r1
 801a122:	431a      	orrs	r2, r3
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	601a      	str	r2, [r3, #0]
}
 801a128:	46c0      	nop			; (mov r8, r8)
 801a12a:	46bd      	mov	sp, r7
 801a12c:	b004      	add	sp, #16
 801a12e:	bd80      	pop	{r7, pc}

0801a130 <LL_GPIO_SetPinOutputType>:
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b084      	sub	sp, #16
 801a134:	af00      	add	r7, sp, #0
 801a136:	60f8      	str	r0, [r7, #12]
 801a138:	60b9      	str	r1, [r7, #8]
 801a13a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	685b      	ldr	r3, [r3, #4]
 801a140:	68ba      	ldr	r2, [r7, #8]
 801a142:	43d2      	mvns	r2, r2
 801a144:	401a      	ands	r2, r3
 801a146:	68bb      	ldr	r3, [r7, #8]
 801a148:	6879      	ldr	r1, [r7, #4]
 801a14a:	434b      	muls	r3, r1
 801a14c:	431a      	orrs	r2, r3
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	605a      	str	r2, [r3, #4]
}
 801a152:	46c0      	nop			; (mov r8, r8)
 801a154:	46bd      	mov	sp, r7
 801a156:	b004      	add	sp, #16
 801a158:	bd80      	pop	{r7, pc}

0801a15a <LL_GPIO_SetPinSpeed>:
{
 801a15a:	b580      	push	{r7, lr}
 801a15c:	b084      	sub	sp, #16
 801a15e:	af00      	add	r7, sp, #0
 801a160:	60f8      	str	r0, [r7, #12]
 801a162:	60b9      	str	r1, [r7, #8]
 801a164:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	6899      	ldr	r1, [r3, #8]
 801a16a:	68bb      	ldr	r3, [r7, #8]
 801a16c:	435b      	muls	r3, r3
 801a16e:	001a      	movs	r2, r3
 801a170:	0013      	movs	r3, r2
 801a172:	005b      	lsls	r3, r3, #1
 801a174:	189b      	adds	r3, r3, r2
 801a176:	43db      	mvns	r3, r3
 801a178:	400b      	ands	r3, r1
 801a17a:	001a      	movs	r2, r3
 801a17c:	68bb      	ldr	r3, [r7, #8]
 801a17e:	435b      	muls	r3, r3
 801a180:	6879      	ldr	r1, [r7, #4]
 801a182:	434b      	muls	r3, r1
 801a184:	431a      	orrs	r2, r3
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	609a      	str	r2, [r3, #8]
}
 801a18a:	46c0      	nop			; (mov r8, r8)
 801a18c:	46bd      	mov	sp, r7
 801a18e:	b004      	add	sp, #16
 801a190:	bd80      	pop	{r7, pc}

0801a192 <LL_GPIO_SetPinPull>:
{
 801a192:	b580      	push	{r7, lr}
 801a194:	b084      	sub	sp, #16
 801a196:	af00      	add	r7, sp, #0
 801a198:	60f8      	str	r0, [r7, #12]
 801a19a:	60b9      	str	r1, [r7, #8]
 801a19c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	68d9      	ldr	r1, [r3, #12]
 801a1a2:	68bb      	ldr	r3, [r7, #8]
 801a1a4:	435b      	muls	r3, r3
 801a1a6:	001a      	movs	r2, r3
 801a1a8:	0013      	movs	r3, r2
 801a1aa:	005b      	lsls	r3, r3, #1
 801a1ac:	189b      	adds	r3, r3, r2
 801a1ae:	43db      	mvns	r3, r3
 801a1b0:	400b      	ands	r3, r1
 801a1b2:	001a      	movs	r2, r3
 801a1b4:	68bb      	ldr	r3, [r7, #8]
 801a1b6:	435b      	muls	r3, r3
 801a1b8:	6879      	ldr	r1, [r7, #4]
 801a1ba:	434b      	muls	r3, r1
 801a1bc:	431a      	orrs	r2, r3
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	60da      	str	r2, [r3, #12]
}
 801a1c2:	46c0      	nop			; (mov r8, r8)
 801a1c4:	46bd      	mov	sp, r7
 801a1c6:	b004      	add	sp, #16
 801a1c8:	bd80      	pop	{r7, pc}

0801a1ca <LL_GPIO_SetAFPin_0_7>:
{
 801a1ca:	b580      	push	{r7, lr}
 801a1cc:	b084      	sub	sp, #16
 801a1ce:	af00      	add	r7, sp, #0
 801a1d0:	60f8      	str	r0, [r7, #12]
 801a1d2:	60b9      	str	r1, [r7, #8]
 801a1d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	6a19      	ldr	r1, [r3, #32]
 801a1da:	68bb      	ldr	r3, [r7, #8]
 801a1dc:	435b      	muls	r3, r3
 801a1de:	68ba      	ldr	r2, [r7, #8]
 801a1e0:	4353      	muls	r3, r2
 801a1e2:	68ba      	ldr	r2, [r7, #8]
 801a1e4:	435a      	muls	r2, r3
 801a1e6:	0013      	movs	r3, r2
 801a1e8:	011b      	lsls	r3, r3, #4
 801a1ea:	1a9b      	subs	r3, r3, r2
 801a1ec:	43db      	mvns	r3, r3
 801a1ee:	400b      	ands	r3, r1
 801a1f0:	001a      	movs	r2, r3
 801a1f2:	68bb      	ldr	r3, [r7, #8]
 801a1f4:	435b      	muls	r3, r3
 801a1f6:	68b9      	ldr	r1, [r7, #8]
 801a1f8:	434b      	muls	r3, r1
 801a1fa:	68b9      	ldr	r1, [r7, #8]
 801a1fc:	434b      	muls	r3, r1
 801a1fe:	6879      	ldr	r1, [r7, #4]
 801a200:	434b      	muls	r3, r1
 801a202:	431a      	orrs	r2, r3
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	621a      	str	r2, [r3, #32]
}
 801a208:	46c0      	nop			; (mov r8, r8)
 801a20a:	46bd      	mov	sp, r7
 801a20c:	b004      	add	sp, #16
 801a20e:	bd80      	pop	{r7, pc}

0801a210 <LL_LPUART_Enable>:
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b082      	sub	sp, #8
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	2201      	movs	r2, #1
 801a21e:	431a      	orrs	r2, r3
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	601a      	str	r2, [r3, #0]
}
 801a224:	46c0      	nop			; (mov r8, r8)
 801a226:	46bd      	mov	sp, r7
 801a228:	b002      	add	sp, #8
 801a22a:	bd80      	pop	{r7, pc}

0801a22c <LL_LPUART_Disable>:
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b082      	sub	sp, #8
 801a230:	af00      	add	r7, sp, #0
 801a232:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	2201      	movs	r2, #1
 801a23a:	4393      	bics	r3, r2
 801a23c:	001a      	movs	r2, r3
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	601a      	str	r2, [r3, #0]
}
 801a242:	46c0      	nop			; (mov r8, r8)
 801a244:	46bd      	mov	sp, r7
 801a246:	b002      	add	sp, #8
 801a248:	bd80      	pop	{r7, pc}

0801a24a <LL_LPUART_EnableDirectionRx>:
{
 801a24a:	b580      	push	{r7, lr}
 801a24c:	b086      	sub	sp, #24
 801a24e:	af00      	add	r7, sp, #0
 801a250:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a252:	f3ef 8310 	mrs	r3, PRIMASK
 801a256:	60bb      	str	r3, [r7, #8]
  return(result);
 801a258:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 801a25a:	617b      	str	r3, [r7, #20]
 801a25c:	2301      	movs	r3, #1
 801a25e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	f383 8810 	msr	PRIMASK, r3
}
 801a266:	46c0      	nop			; (mov r8, r8)
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	2204      	movs	r2, #4
 801a26e:	431a      	orrs	r2, r3
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	601a      	str	r2, [r3, #0]
 801a274:	697b      	ldr	r3, [r7, #20]
 801a276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a278:	693b      	ldr	r3, [r7, #16]
 801a27a:	f383 8810 	msr	PRIMASK, r3
}
 801a27e:	46c0      	nop			; (mov r8, r8)
}
 801a280:	46c0      	nop			; (mov r8, r8)
 801a282:	46bd      	mov	sp, r7
 801a284:	b006      	add	sp, #24
 801a286:	bd80      	pop	{r7, pc}

0801a288 <LL_LPUART_IsActiveFlag_TEACK>:
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	b082      	sub	sp, #8
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	69da      	ldr	r2, [r3, #28]
 801a294:	2380      	movs	r3, #128	; 0x80
 801a296:	039b      	lsls	r3, r3, #14
 801a298:	401a      	ands	r2, r3
 801a29a:	2380      	movs	r3, #128	; 0x80
 801a29c:	039b      	lsls	r3, r3, #14
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	d101      	bne.n	801a2a6 <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 801a2a2:	2301      	movs	r3, #1
 801a2a4:	e000      	b.n	801a2a8 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 801a2a6:	2300      	movs	r3, #0
}
 801a2a8:	0018      	movs	r0, r3
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	b002      	add	sp, #8
 801a2ae:	bd80      	pop	{r7, pc}

0801a2b0 <LL_LPUART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_LPUART_ClearFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_PE(USART_TypeDef *LPUARTx)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b082      	sub	sp, #8
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	2201      	movs	r2, #1
 801a2bc:	621a      	str	r2, [r3, #32]
}
 801a2be:	46c0      	nop			; (mov r8, r8)
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	b002      	add	sp, #8
 801a2c4:	bd80      	pop	{r7, pc}

0801a2c6 <LL_LPUART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_LPUART_ClearFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_FE(USART_TypeDef *LPUARTx)
{
 801a2c6:	b580      	push	{r7, lr}
 801a2c8:	b082      	sub	sp, #8
 801a2ca:	af00      	add	r7, sp, #0
 801a2cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	2202      	movs	r2, #2
 801a2d2:	621a      	str	r2, [r3, #32]
}
 801a2d4:	46c0      	nop			; (mov r8, r8)
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	b002      	add	sp, #8
 801a2da:	bd80      	pop	{r7, pc}

0801a2dc <LL_LPUART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_LPUART_ClearFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_NE(USART_TypeDef *LPUARTx)
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b082      	sub	sp, #8
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	2204      	movs	r2, #4
 801a2e8:	621a      	str	r2, [r3, #32]
}
 801a2ea:	46c0      	nop			; (mov r8, r8)
 801a2ec:	46bd      	mov	sp, r7
 801a2ee:	b002      	add	sp, #8
 801a2f0:	bd80      	pop	{r7, pc}

0801a2f2 <LL_LPUART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_LPUART_ClearFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
 801a2f2:	b580      	push	{r7, lr}
 801a2f4:	b082      	sub	sp, #8
 801a2f6:	af00      	add	r7, sp, #0
 801a2f8:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	2208      	movs	r2, #8
 801a2fe:	621a      	str	r2, [r3, #32]
}
 801a300:	46c0      	nop			; (mov r8, r8)
 801a302:	46bd      	mov	sp, r7
 801a304:	b002      	add	sp, #8
 801a306:	bd80      	pop	{r7, pc}

0801a308 <LL_LPUART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_LPUART_ClearFlag_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_TC(USART_TypeDef *LPUARTx)
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	b082      	sub	sp, #8
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	2240      	movs	r2, #64	; 0x40
 801a314:	621a      	str	r2, [r3, #32]
}
 801a316:	46c0      	nop			; (mov r8, r8)
 801a318:	46bd      	mov	sp, r7
 801a31a:	b002      	add	sp, #8
 801a31c:	bd80      	pop	{r7, pc}

0801a31e <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 801a31e:	b580      	push	{r7, lr}
 801a320:	b086      	sub	sp, #24
 801a322:	af00      	add	r7, sp, #0
 801a324:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a326:	f3ef 8310 	mrs	r3, PRIMASK
 801a32a:	60bb      	str	r3, [r7, #8]
  return(result);
 801a32c:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a32e:	617b      	str	r3, [r7, #20]
 801a330:	2301      	movs	r3, #1
 801a332:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	f383 8810 	msr	PRIMASK, r3
}
 801a33a:	46c0      	nop			; (mov r8, r8)
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	2220      	movs	r2, #32
 801a342:	431a      	orrs	r2, r3
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	601a      	str	r2, [r3, #0]
 801a348:	697b      	ldr	r3, [r7, #20]
 801a34a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a34c:	693b      	ldr	r3, [r7, #16]
 801a34e:	f383 8810 	msr	PRIMASK, r3
}
 801a352:	46c0      	nop			; (mov r8, r8)
}
 801a354:	46c0      	nop			; (mov r8, r8)
 801a356:	46bd      	mov	sp, r7
 801a358:	b006      	add	sp, #24
 801a35a:	bd80      	pop	{r7, pc}

0801a35c <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b086      	sub	sp, #24
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a364:	f3ef 8310 	mrs	r3, PRIMASK
 801a368:	60bb      	str	r3, [r7, #8]
  return(result);
 801a36a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 801a36c:	617b      	str	r3, [r7, #20]
 801a36e:	2301      	movs	r3, #1
 801a370:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	f383 8810 	msr	PRIMASK, r3
}
 801a378:	46c0      	nop			; (mov r8, r8)
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	2240      	movs	r2, #64	; 0x40
 801a380:	431a      	orrs	r2, r3
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	601a      	str	r2, [r3, #0]
 801a386:	697b      	ldr	r3, [r7, #20]
 801a388:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a38a:	693b      	ldr	r3, [r7, #16]
 801a38c:	f383 8810 	msr	PRIMASK, r3
}
 801a390:	46c0      	nop			; (mov r8, r8)
}
 801a392:	46c0      	nop			; (mov r8, r8)
 801a394:	46bd      	mov	sp, r7
 801a396:	b006      	add	sp, #24
 801a398:	bd80      	pop	{r7, pc}

0801a39a <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 801a39a:	b580      	push	{r7, lr}
 801a39c:	b086      	sub	sp, #24
 801a39e:	af00      	add	r7, sp, #0
 801a3a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3a2:	f3ef 8310 	mrs	r3, PRIMASK
 801a3a6:	60bb      	str	r3, [r7, #8]
  return(result);
 801a3a8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 801a3aa:	617b      	str	r3, [r7, #20]
 801a3ac:	2301      	movs	r3, #1
 801a3ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	f383 8810 	msr	PRIMASK, r3
}
 801a3b6:	46c0      	nop			; (mov r8, r8)
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	689b      	ldr	r3, [r3, #8]
 801a3bc:	2201      	movs	r2, #1
 801a3be:	431a      	orrs	r2, r3
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	609a      	str	r2, [r3, #8]
 801a3c4:	697b      	ldr	r3, [r7, #20]
 801a3c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3c8:	693b      	ldr	r3, [r7, #16]
 801a3ca:	f383 8810 	msr	PRIMASK, r3
}
 801a3ce:	46c0      	nop			; (mov r8, r8)
}
 801a3d0:	46c0      	nop			; (mov r8, r8)
 801a3d2:	46bd      	mov	sp, r7
 801a3d4:	b006      	add	sp, #24
 801a3d6:	bd80      	pop	{r7, pc}

0801a3d8 <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b086      	sub	sp, #24
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3e0:	f3ef 8310 	mrs	r3, PRIMASK
 801a3e4:	60bb      	str	r3, [r7, #8]
  return(result);
 801a3e6:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 801a3e8:	617b      	str	r3, [r7, #20]
 801a3ea:	2301      	movs	r3, #1
 801a3ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	f383 8810 	msr	PRIMASK, r3
}
 801a3f4:	46c0      	nop			; (mov r8, r8)
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	2240      	movs	r2, #64	; 0x40
 801a3fc:	4393      	bics	r3, r2
 801a3fe:	001a      	movs	r2, r3
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	601a      	str	r2, [r3, #0]
 801a404:	697b      	ldr	r3, [r7, #20]
 801a406:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a408:	693b      	ldr	r3, [r7, #16]
 801a40a:	f383 8810 	msr	PRIMASK, r3
}
 801a40e:	46c0      	nop			; (mov r8, r8)
}
 801a410:	46c0      	nop			; (mov r8, r8)
 801a412:	46bd      	mov	sp, r7
 801a414:	b006      	add	sp, #24
 801a416:	bd80      	pop	{r7, pc}

0801a418 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *LPUARTx)
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b082      	sub	sp, #8
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	2220      	movs	r2, #32
 801a426:	4013      	ands	r3, r2
 801a428:	2b20      	cmp	r3, #32
 801a42a:	d101      	bne.n	801a430 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 801a42c:	2301      	movs	r3, #1
 801a42e:	e000      	b.n	801a432 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 801a430:	2300      	movs	r3, #0
}
 801a432:	0018      	movs	r0, r3
 801a434:	46bd      	mov	sp, r7
 801a436:	b002      	add	sp, #8
 801a438:	bd80      	pop	{r7, pc}

0801a43a <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(const USART_TypeDef *LPUARTx)
{
 801a43a:	b580      	push	{r7, lr}
 801a43c:	b082      	sub	sp, #8
 801a43e:	af00      	add	r7, sp, #0
 801a440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	2240      	movs	r2, #64	; 0x40
 801a448:	4013      	ands	r3, r2
 801a44a:	2b40      	cmp	r3, #64	; 0x40
 801a44c:	d101      	bne.n	801a452 <LL_LPUART_IsEnabledIT_TC+0x18>
 801a44e:	2301      	movs	r3, #1
 801a450:	e000      	b.n	801a454 <LL_LPUART_IsEnabledIT_TC+0x1a>
 801a452:	2300      	movs	r3, #0
}
 801a454:	0018      	movs	r0, r3
 801a456:	46bd      	mov	sp, r7
 801a458:	b002      	add	sp, #8
 801a45a:	bd80      	pop	{r7, pc}

0801a45c <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(const USART_TypeDef *LPUARTx)
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b082      	sub	sp, #8
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	681a      	ldr	r2, [r3, #0]
 801a468:	2380      	movs	r3, #128	; 0x80
 801a46a:	005b      	lsls	r3, r3, #1
 801a46c:	401a      	ands	r2, r3
 801a46e:	2380      	movs	r3, #128	; 0x80
 801a470:	005b      	lsls	r3, r3, #1
 801a472:	429a      	cmp	r2, r3
 801a474:	d101      	bne.n	801a47a <LL_LPUART_IsEnabledIT_PE+0x1e>
 801a476:	2301      	movs	r3, #1
 801a478:	e000      	b.n	801a47c <LL_LPUART_IsEnabledIT_PE+0x20>
 801a47a:	2300      	movs	r3, #0
}
 801a47c:	0018      	movs	r0, r3
 801a47e:	46bd      	mov	sp, r7
 801a480:	b002      	add	sp, #8
 801a482:	bd80      	pop	{r7, pc}

0801a484 <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(const USART_TypeDef *LPUARTx)
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b082      	sub	sp, #8
 801a488:	af00      	add	r7, sp, #0
 801a48a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	689b      	ldr	r3, [r3, #8]
 801a490:	2201      	movs	r2, #1
 801a492:	4013      	ands	r3, r2
 801a494:	2b01      	cmp	r3, #1
 801a496:	d101      	bne.n	801a49c <LL_LPUART_IsEnabledIT_ERROR+0x18>
 801a498:	2301      	movs	r3, #1
 801a49a:	e000      	b.n	801a49e <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 801a49c:	2300      	movs	r3, #0
}
 801a49e:	0018      	movs	r0, r3
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	b002      	add	sp, #8
 801a4a4:	bd80      	pop	{r7, pc}

0801a4a6 <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 801a4a6:	b580      	push	{r7, lr}
 801a4a8:	b086      	sub	sp, #24
 801a4aa:	af00      	add	r7, sp, #0
 801a4ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a4ae:	f3ef 8310 	mrs	r3, PRIMASK
 801a4b2:	60bb      	str	r3, [r7, #8]
  return(result);
 801a4b4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 801a4b6:	617b      	str	r3, [r7, #20]
 801a4b8:	2301      	movs	r3, #1
 801a4ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	f383 8810 	msr	PRIMASK, r3
}
 801a4c2:	46c0      	nop			; (mov r8, r8)
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	689b      	ldr	r3, [r3, #8]
 801a4c8:	2280      	movs	r2, #128	; 0x80
 801a4ca:	431a      	orrs	r2, r3
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	609a      	str	r2, [r3, #8]
 801a4d0:	697b      	ldr	r3, [r7, #20]
 801a4d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4d4:	693b      	ldr	r3, [r7, #16]
 801a4d6:	f383 8810 	msr	PRIMASK, r3
}
 801a4da:	46c0      	nop			; (mov r8, r8)
}
 801a4dc:	46c0      	nop			; (mov r8, r8)
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	b006      	add	sp, #24
 801a4e2:	bd80      	pop	{r7, pc}

0801a4e4 <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 801a4e4:	b580      	push	{r7, lr}
 801a4e6:	b084      	sub	sp, #16
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	6078      	str	r0, [r7, #4]
 801a4ec:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 801a4ee:	683b      	ldr	r3, [r7, #0]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d103      	bne.n	801a4fc <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	3328      	adds	r3, #40	; 0x28
 801a4f8:	60fb      	str	r3, [r7, #12]
 801a4fa:	e002      	b.n	801a502 <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	3324      	adds	r3, #36	; 0x24
 801a500:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 801a502:	68fb      	ldr	r3, [r7, #12]
}
 801a504:	0018      	movs	r0, r3
 801a506:	46bd      	mov	sp, r7
 801a508:	b004      	add	sp, #16
 801a50a:	bd80      	pop	{r7, pc}

0801a50c <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b082      	sub	sp, #8
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a518:	b2db      	uxtb	r3, r3
}
 801a51a:	0018      	movs	r0, r3
 801a51c:	46bd      	mov	sp, r7
 801a51e:	b002      	add	sp, #8
 801a520:	bd80      	pop	{r7, pc}
	...

0801a524 <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 801a524:	b580      	push	{r7, lr}
 801a526:	b088      	sub	sp, #32
 801a528:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 801a52a:	2001      	movs	r0, #1
 801a52c:	f7ff fdce 	bl	801a0cc <LL_IOP_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 801a530:	2001      	movs	r0, #1
 801a532:	f7ff fdcb 	bl	801a0cc <LL_IOP_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 801a536:	23a0      	movs	r3, #160	; 0xa0
 801a538:	05db      	lsls	r3, r3, #23
 801a53a:	2206      	movs	r2, #6
 801a53c:	2104      	movs	r1, #4
 801a53e:	0018      	movs	r0, r3
 801a540:	f7ff fe43 	bl	801a1ca <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 801a544:	23a0      	movs	r3, #160	; 0xa0
 801a546:	05db      	lsls	r3, r3, #23
 801a548:	2202      	movs	r2, #2
 801a54a:	2104      	movs	r1, #4
 801a54c:	0018      	movs	r0, r3
 801a54e:	f7ff fdd3 	bl	801a0f8 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 801a552:	23a0      	movs	r3, #160	; 0xa0
 801a554:	05db      	lsls	r3, r3, #23
 801a556:	2202      	movs	r2, #2
 801a558:	2104      	movs	r1, #4
 801a55a:	0018      	movs	r0, r3
 801a55c:	f7ff fdfd 	bl	801a15a <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 801a560:	23a0      	movs	r3, #160	; 0xa0
 801a562:	05db      	lsls	r3, r3, #23
 801a564:	2200      	movs	r2, #0
 801a566:	2104      	movs	r1, #4
 801a568:	0018      	movs	r0, r3
 801a56a:	f7ff fde1 	bl	801a130 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 801a56e:	23a0      	movs	r3, #160	; 0xa0
 801a570:	05db      	lsls	r3, r3, #23
 801a572:	2201      	movs	r2, #1
 801a574:	2104      	movs	r1, #4
 801a576:	0018      	movs	r0, r3
 801a578:	f7ff fe0b 	bl	801a192 <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 801a57c:	23a0      	movs	r3, #160	; 0xa0
 801a57e:	05db      	lsls	r3, r3, #23
 801a580:	2206      	movs	r2, #6
 801a582:	2108      	movs	r1, #8
 801a584:	0018      	movs	r0, r3
 801a586:	f7ff fe20 	bl	801a1ca <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 801a58a:	23a0      	movs	r3, #160	; 0xa0
 801a58c:	05db      	lsls	r3, r3, #23
 801a58e:	2202      	movs	r2, #2
 801a590:	2108      	movs	r1, #8
 801a592:	0018      	movs	r0, r3
 801a594:	f7ff fdb0 	bl	801a0f8 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 801a598:	23a0      	movs	r3, #160	; 0xa0
 801a59a:	05db      	lsls	r3, r3, #23
 801a59c:	2202      	movs	r2, #2
 801a59e:	2108      	movs	r1, #8
 801a5a0:	0018      	movs	r0, r3
 801a5a2:	f7ff fdda 	bl	801a15a <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 801a5a6:	23a0      	movs	r3, #160	; 0xa0
 801a5a8:	05db      	lsls	r3, r3, #23
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	2108      	movs	r1, #8
 801a5ae:	0018      	movs	r0, r3
 801a5b0:	f7ff fdbe 	bl	801a130 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 801a5b4:	23a0      	movs	r3, #160	; 0xa0
 801a5b6:	05db      	lsls	r3, r3, #23
 801a5b8:	2201      	movs	r2, #1
 801a5ba:	2108      	movs	r1, #8
 801a5bc:	0018      	movs	r0, r3
 801a5be:	f7ff fde8 	bl	801a192 <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 801a5c2:	2380      	movs	r3, #128	; 0x80
 801a5c4:	035b      	lsls	r3, r3, #13
 801a5c6:	0018      	movs	r0, r3
 801a5c8:	f7ff fd58 	bl	801a07c <LL_APB1_GRP1_EnableClock>
  {
    /* Configure LPUART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 801a5cc:	4b31      	ldr	r3, [pc, #196]	; (801a694 <HW_TRACER_EMB_Init+0x170>)
 801a5ce:	0018      	movs	r0, r3
 801a5d0:	f7ff fe2c 	bl	801a22c <LL_LPUART_Disable>
    /*  - Parity              : LL_LPUART_PARITY_NONE           */
    /*  - TransferDirection   : LL_LPUART_DIRECTION_TX          */
    /*  - HardwareFlowControl : LL_LPUART_HWCONTROL_NONE        */
    /*  - OverSampling        : LL_LPUART_OVERSAMPLING_16       */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_LPUART_PRESCALER_DIV1;
 801a5d4:	003b      	movs	r3, r7
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	601a      	str	r2, [r3, #0]
#endif
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 801a5da:	003b      	movs	r3, r7
 801a5dc:	22e1      	movs	r2, #225	; 0xe1
 801a5de:	0312      	lsls	r2, r2, #12
 801a5e0:	605a      	str	r2, [r3, #4]
    lpuart_initstruct.DataWidth           = LL_LPUART_DATAWIDTH_8B;
 801a5e2:	003b      	movs	r3, r7
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	609a      	str	r2, [r3, #8]
    lpuart_initstruct.StopBits            = LL_LPUART_STOPBITS_1;
 801a5e8:	003b      	movs	r3, r7
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	60da      	str	r2, [r3, #12]
    lpuart_initstruct.Parity              = LL_LPUART_PARITY_NONE;
 801a5ee:	003b      	movs	r3, r7
 801a5f0:	2200      	movs	r2, #0
 801a5f2:	611a      	str	r2, [r3, #16]
    lpuart_initstruct.TransferDirection   = LL_LPUART_DIRECTION_TX;
 801a5f4:	003b      	movs	r3, r7
 801a5f6:	2208      	movs	r2, #8
 801a5f8:	615a      	str	r2, [r3, #20]
#if defined(USART_CR3_RTSE)
    lpuart_initstruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 801a5fa:	003b      	movs	r3, r7
 801a5fc:	2200      	movs	r2, #0
 801a5fe:	619a      	str	r2, [r3, #24]
#endif

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 801a600:	003b      	movs	r3, r7
 801a602:	4a24      	ldr	r2, [pc, #144]	; (801a694 <HW_TRACER_EMB_Init+0x170>)
 801a604:	0019      	movs	r1, r3
 801a606:	0010      	movs	r0, r2
 801a608:	f7f2 f93a 	bl	800c880 <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 801a60c:	4b21      	ldr	r3, [pc, #132]	; (801a694 <HW_TRACER_EMB_Init+0x170>)
 801a60e:	0018      	movs	r0, r3
 801a610:	f7ff fdfe 	bl	801a210 <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 801a614:	4b1f      	ldr	r3, [pc, #124]	; (801a694 <HW_TRACER_EMB_Init+0x170>)
 801a616:	0018      	movs	r0, r3
 801a618:	f7ff fe36 	bl	801a288 <LL_LPUART_IsActiveFlag_TEACK>
 801a61c:	0003      	movs	r3, r0
 801a61e:	61fb      	str	r3, [r7, #28]
    /* Polling USART initialisation */
    while (_temp1 == 0U)
 801a620:	e005      	b.n	801a62e <HW_TRACER_EMB_Init+0x10a>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 801a622:	4b1c      	ldr	r3, [pc, #112]	; (801a694 <HW_TRACER_EMB_Init+0x170>)
 801a624:	0018      	movs	r0, r3
 801a626:	f7ff fe2f 	bl	801a288 <LL_LPUART_IsActiveFlag_TEACK>
 801a62a:	0003      	movs	r3, r0
 801a62c:	61fb      	str	r3, [r7, #28]
    while (_temp1 == 0U)
 801a62e:	69fb      	ldr	r3, [r7, #28]
 801a630:	2b00      	cmp	r3, #0
 801a632:	d0f6      	beq.n	801a622 <HW_TRACER_EMB_Init+0xfe>
  }
#endif /* TRACER_EMB_IS_INSTANCE_LPUART_TYPE == 0UL */

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 801a634:	2001      	movs	r0, #1
 801a636:	f7ff fd0b 	bl	801a050 <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 801a63a:	4a17      	ldr	r2, [pc, #92]	; (801a698 <HW_TRACER_EMB_Init+0x174>)
 801a63c:	4b17      	ldr	r3, [pc, #92]	; (801a69c <HW_TRACER_EMB_Init+0x178>)
 801a63e:	2102      	movs	r1, #2
 801a640:	0018      	movs	r0, r3
 801a642:	f7ff fbff 	bl	8019e44 <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID) || defined(DMA_CSELR_C1S)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 801a646:	4b15      	ldr	r3, [pc, #84]	; (801a69c <HW_TRACER_EMB_Init+0x178>)
 801a648:	220f      	movs	r2, #15
 801a64a:	2102      	movs	r1, #2
 801a64c:	0018      	movs	r0, r3
 801a64e:	f7ff fc93 	bl	8019f78 <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801a652:	4b12      	ldr	r3, [pc, #72]	; (801a69c <HW_TRACER_EMB_Init+0x178>)
 801a654:	2102      	movs	r1, #2
 801a656:	0018      	movs	r0, r3
 801a658:	f7ff fcda 	bl	801a010 <LL_DMA_EnableIT_TC>
#endif /* TRACER_EMB_DMA_MODE == 1*/

  /* Configure the interrupt for TX */
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
 801a65c:	2100      	movs	r1, #0
 801a65e:	200a      	movs	r0, #10
 801a660:	f7ff fb42 	bl	8019ce8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 801a664:	200a      	movs	r0, #10
 801a666:	f7ff fb25 	bl	8019cb4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#endif /* TRACER_EMB_TX_DMA_PRIORITY */
#endif /* TRACER_EMB_DMA_MODE == 1 */
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
 801a66a:	2103      	movs	r1, #3
 801a66c:	201d      	movs	r0, #29
 801a66e:	f7ff fb3b 	bl	8019ce8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 801a672:	201d      	movs	r0, #29
 801a674:	f7ff fb1e 	bl	8019cb4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#endif /* TRACER_EMB_TX_IRQ_PRIORITY */

  /* Disable the UART */
  if (fptr_rx == NULL)
 801a678:	4b09      	ldr	r3, [pc, #36]	; (801a6a0 <HW_TRACER_EMB_Init+0x17c>)
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d105      	bne.n	801a68c <HW_TRACER_EMB_Init+0x168>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 801a680:	2380      	movs	r3, #128	; 0x80
 801a682:	035b      	lsls	r3, r3, #13
 801a684:	0018      	movs	r0, r3
 801a686:	f7ff fd0f 	bl	801a0a8 <LL_APB1_GRP1_DisableClock>
  }
  return;
 801a68a:	46c0      	nop			; (mov r8, r8)
 801a68c:	46c0      	nop			; (mov r8, r8)
}
 801a68e:	46bd      	mov	sp, r7
 801a690:	b008      	add	sp, #32
 801a692:	bd80      	pop	{r7, pc}
 801a694:	40008000 	.word	0x40008000
 801a698:	00002090 	.word	0x00002090
 801a69c:	40020000 	.word	0x40020000
 801a6a0:	200034a4 	.word	0x200034a4

0801a6a4 <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 801a6a4:	b580      	push	{r7, lr}
 801a6a6:	b082      	sub	sp, #8
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 801a6ac:	4b05      	ldr	r3, [pc, #20]	; (801a6c4 <HW_TRACER_EMB_RegisterRxCallback+0x20>)
 801a6ae:	687a      	ldr	r2, [r7, #4]
 801a6b0:	601a      	str	r2, [r3, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 801a6b2:	2380      	movs	r3, #128	; 0x80
 801a6b4:	035b      	lsls	r3, r3, #13
 801a6b6:	0018      	movs	r0, r3
 801a6b8:	f7ff fce0 	bl	801a07c <LL_APB1_GRP1_EnableClock>
}
 801a6bc:	46c0      	nop			; (mov r8, r8)
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	b002      	add	sp, #8
 801a6c2:	bd80      	pop	{r7, pc}
 801a6c4:	200034a4 	.word	0x200034a4

0801a6c8 <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 801a6cc:	4b0a      	ldr	r3, [pc, #40]	; (801a6f8 <HW_TRACER_EMB_StartRX+0x30>)
 801a6ce:	0018      	movs	r0, r3
 801a6d0:	f7ff fe25 	bl	801a31e <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 801a6d4:	4b08      	ldr	r3, [pc, #32]	; (801a6f8 <HW_TRACER_EMB_StartRX+0x30>)
 801a6d6:	0018      	movs	r0, r3
 801a6d8:	f7ff fe5f 	bl	801a39a <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 801a6dc:	4b06      	ldr	r3, [pc, #24]	; (801a6f8 <HW_TRACER_EMB_StartRX+0x30>)
 801a6de:	0018      	movs	r0, r3
 801a6e0:	f7ff fdb3 	bl	801a24a <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 801a6e4:	2103      	movs	r1, #3
 801a6e6:	201d      	movs	r0, #29
 801a6e8:	f7ff fafe 	bl	8019ce8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 801a6ec:	201d      	movs	r0, #29
 801a6ee:	f7ff fae1 	bl	8019cb4 <__NVIC_EnableIRQ>
}
 801a6f2:	46c0      	nop			; (mov r8, r8)
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	bd80      	pop	{r7, pc}
 801a6f8:	40008000 	.word	0x40008000

0801a6fc <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	af00      	add	r7, sp, #0
  if (TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE) == 1UL)
 801a700:	4b08      	ldr	r3, [pc, #32]	; (801a724 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 801a702:	0018      	movs	r0, r3
 801a704:	f7ff fc64 	bl	8019fd0 <LL_DMA_IsActiveFlag_TC3>
 801a708:	0003      	movs	r3, r0
 801a70a:	2b01      	cmp	r3, #1
 801a70c:	d107      	bne.n	801a71e <HW_TRACER_EMB_IRQHandlerDMA+0x22>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 801a70e:	4b06      	ldr	r3, [pc, #24]	; (801a728 <HW_TRACER_EMB_IRQHandlerDMA+0x2c>)
 801a710:	0018      	movs	r0, r3
 801a712:	f7ff fe23 	bl	801a35c <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 801a716:	4b03      	ldr	r3, [pc, #12]	; (801a724 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 801a718:	0018      	movs	r0, r3
 801a71a:	f7ff fc6d 	bl	8019ff8 <LL_DMA_ClearFlag_GI3>
  }
}
 801a71e:	46c0      	nop			; (mov r8, r8)
 801a720:	46bd      	mov	sp, r7
 801a722:	bd80      	pop	{r7, pc}
 801a724:	40020000 	.word	0x40020000
 801a728:	40008000 	.word	0x40008000

0801a72c <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 801a72c:	b580      	push	{r7, lr}
 801a72e:	b086      	sub	sp, #24
 801a730:	af00      	add	r7, sp, #0
  uint32_t _temp1;
  uint32_t  _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 801a732:	2317      	movs	r3, #23
 801a734:	18fb      	adds	r3, r7, r3
 801a736:	2200      	movs	r2, #0
 801a738:	701a      	strb	r2, [r3, #0]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 801a73a:	4b60      	ldr	r3, [pc, #384]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a73c:	69db      	ldr	r3, [r3, #28]
 801a73e:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 801a740:	4b5e      	ldr	r3, [pc, #376]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a742:	0018      	movs	r0, r3
 801a744:	f7ff fe68 	bl	801a418 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 801a748:	0003      	movs	r3, r0
 801a74a:	60fb      	str	r3, [r7, #12]

  /* If Reception is ongoing */
  if (_temp1 == 1UL)
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	2b01      	cmp	r3, #1
 801a750:	d000      	beq.n	801a754 <HW_TRACER_EMB_IRQHandlerUSART+0x28>
 801a752:	e087      	b.n	801a864 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 801a754:	693b      	ldr	r3, [r7, #16]
 801a756:	220f      	movs	r2, #15
 801a758:	4013      	ands	r3, r2
 801a75a:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 801a75c:	693b      	ldr	r3, [r7, #16]
 801a75e:	2220      	movs	r2, #32
 801a760:	4013      	ands	r3, r2
 801a762:	d015      	beq.n	801a790 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
        && (_errorflags == 0UL))
 801a764:	68bb      	ldr	r3, [r7, #8]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d112      	bne.n	801a790 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 801a76a:	4b54      	ldr	r3, [pc, #336]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a76c:	0018      	movs	r0, r3
 801a76e:	f7ff fecd 	bl	801a50c <LL_LPUART_ReceiveData8>
 801a772:	0003      	movs	r3, r0
 801a774:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 801a776:	4b52      	ldr	r3, [pc, #328]	; (801a8c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d100      	bne.n	801a780 <HW_TRACER_EMB_IRQHandlerUSART+0x54>
 801a77e:	e097      	b.n	801a8b0 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
      {
        fptr_rx(received_char, 0U);
 801a780:	4b4f      	ldr	r3, [pc, #316]	; (801a8c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	683a      	ldr	r2, [r7, #0]
 801a786:	b2d2      	uxtb	r2, r2
 801a788:	2100      	movs	r1, #0
 801a78a:	0010      	movs	r0, r2
 801a78c:	4798      	blx	r3
      }
      return;
 801a78e:	e08f      	b.n	801a8b0 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
    }
    else if (_errorflags != 0UL)
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d066      	beq.n	801a864 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 801a796:	693b      	ldr	r3, [r7, #16]
 801a798:	2220      	movs	r2, #32
 801a79a:	4013      	ands	r3, r2
 801a79c:	d012      	beq.n	801a7c4 <HW_TRACER_EMB_IRQHandlerUSART+0x98>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 801a79e:	4b47      	ldr	r3, [pc, #284]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a7a0:	0018      	movs	r0, r3
 801a7a2:	f7ff feb3 	bl	801a50c <LL_LPUART_ReceiveData8>
 801a7a6:	0003      	movs	r3, r0
 801a7a8:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 801a7aa:	4b45      	ldr	r3, [pc, #276]	; (801a8c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d100      	bne.n	801a7b4 <HW_TRACER_EMB_IRQHandlerUSART+0x88>
 801a7b2:	e07f      	b.n	801a8b4 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
        {
          fptr_rx(received_char, 0U);
 801a7b4:	4b42      	ldr	r3, [pc, #264]	; (801a8c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	683a      	ldr	r2, [r7, #0]
 801a7ba:	b2d2      	uxtb	r2, r2
 801a7bc:	2100      	movs	r1, #0
 801a7be:	0010      	movs	r0, r2
 801a7c0:	4798      	blx	r3
        }
        return;
 801a7c2:	e077      	b.n	801a8b4 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 801a7c4:	4b3d      	ldr	r3, [pc, #244]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a7c6:	0018      	movs	r0, r3
 801a7c8:	f7ff fe48 	bl	801a45c <LL_LPUART_IsEnabledIT_PE>
 801a7cc:	0003      	movs	r3, r0
 801a7ce:	607b      	str	r3, [r7, #4]
      if ((_temp2 == 1U)
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	2b01      	cmp	r3, #1
 801a7d4:	d10b      	bne.n	801a7ee <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
          && (TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))))
 801a7d6:	68bb      	ldr	r3, [r7, #8]
 801a7d8:	2201      	movs	r2, #1
 801a7da:	4013      	ands	r3, r2
 801a7dc:	d007      	beq.n	801a7ee <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 801a7de:	4b37      	ldr	r3, [pc, #220]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a7e0:	0018      	movs	r0, r3
 801a7e2:	f7ff fd65 	bl	801a2b0 <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 801a7e6:	2317      	movs	r3, #23
 801a7e8:	18fb      	adds	r3, r7, r3
 801a7ea:	2201      	movs	r2, #1
 801a7ec:	701a      	strb	r2, [r3, #0]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 801a7ee:	4b33      	ldr	r3, [pc, #204]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a7f0:	0018      	movs	r0, r3
 801a7f2:	f7ff fe47 	bl	801a484 <LL_LPUART_IsEnabledIT_ERROR>
 801a7f6:	0003      	movs	r3, r0
 801a7f8:	607b      	str	r3, [r7, #4]
      if (_temp2 == 1U)
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	2b01      	cmp	r3, #1
 801a7fe:	d123      	bne.n	801a848 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 801a800:	68bb      	ldr	r3, [r7, #8]
 801a802:	2202      	movs	r2, #2
 801a804:	4013      	ands	r3, r2
 801a806:	d007      	beq.n	801a818 <HW_TRACER_EMB_IRQHandlerUSART+0xec>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 801a808:	4b2c      	ldr	r3, [pc, #176]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a80a:	0018      	movs	r0, r3
 801a80c:	f7ff fd5b 	bl	801a2c6 <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 801a810:	2317      	movs	r3, #23
 801a812:	18fb      	adds	r3, r7, r3
 801a814:	2201      	movs	r2, #1
 801a816:	701a      	strb	r2, [r3, #0]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 801a818:	68bb      	ldr	r3, [r7, #8]
 801a81a:	2208      	movs	r2, #8
 801a81c:	4013      	ands	r3, r2
 801a81e:	d007      	beq.n	801a830 <HW_TRACER_EMB_IRQHandlerUSART+0x104>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 801a820:	4b26      	ldr	r3, [pc, #152]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a822:	0018      	movs	r0, r3
 801a824:	f7ff fd65 	bl	801a2f2 <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 801a828:	2317      	movs	r3, #23
 801a82a:	18fb      	adds	r3, r7, r3
 801a82c:	2201      	movs	r2, #1
 801a82e:	701a      	strb	r2, [r3, #0]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	2204      	movs	r2, #4
 801a834:	4013      	ands	r3, r2
 801a836:	d007      	beq.n	801a848 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 801a838:	4b20      	ldr	r3, [pc, #128]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a83a:	0018      	movs	r0, r3
 801a83c:	f7ff fd4e 	bl	801a2dc <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 801a840:	2317      	movs	r3, #23
 801a842:	18fb      	adds	r3, r7, r3
 801a844:	2201      	movs	r2, #1
 801a846:	701a      	strb	r2, [r3, #0]
        }
      }

      if ((_error == 1U) && (fptr_rx != NULL))
 801a848:	2317      	movs	r3, #23
 801a84a:	18fb      	adds	r3, r7, r3
 801a84c:	781b      	ldrb	r3, [r3, #0]
 801a84e:	2b01      	cmp	r3, #1
 801a850:	d108      	bne.n	801a864 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
 801a852:	4b1b      	ldr	r3, [pc, #108]	; (801a8c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d004      	beq.n	801a864 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 801a85a:	4b19      	ldr	r3, [pc, #100]	; (801a8c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	2101      	movs	r1, #1
 801a860:	2001      	movs	r0, #1
 801a862:	4798      	blx	r3
  }
#endif /* TRACER_EMB_IT_MODE == 1 */

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 801a864:	4b15      	ldr	r3, [pc, #84]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a866:	0018      	movs	r0, r3
 801a868:	f7ff fde7 	bl	801a43a <LL_LPUART_IsEnabledIT_TC>
 801a86c:	0003      	movs	r3, r0
 801a86e:	607b      	str	r3, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (_temp2 == 1UL))
 801a870:	693b      	ldr	r3, [r7, #16]
 801a872:	2240      	movs	r2, #64	; 0x40
 801a874:	4013      	ands	r3, r2
 801a876:	d01e      	beq.n	801a8b6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	2b01      	cmp	r3, #1
 801a87c:	d11b      	bne.n	801a8b6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 801a87e:	4b0f      	ldr	r3, [pc, #60]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a880:	0018      	movs	r0, r3
 801a882:	f7ff fda9 	bl	801a3d8 <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 801a886:	4b0d      	ldr	r3, [pc, #52]	; (801a8bc <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801a888:	0018      	movs	r0, r3
 801a88a:	f7ff fd3d 	bl	801a308 <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801a88e:	4b0d      	ldr	r3, [pc, #52]	; (801a8c4 <HW_TRACER_EMB_IRQHandlerUSART+0x198>)
 801a890:	2102      	movs	r1, #2
 801a892:	0018      	movs	r0, r3
 801a894:	f7ff fab6 	bl	8019e04 <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if (fptr_rx == NULL)
 801a898:	4b09      	ldr	r3, [pc, #36]	; (801a8c0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d104      	bne.n	801a8aa <HW_TRACER_EMB_IRQHandlerUSART+0x17e>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 801a8a0:	2380      	movs	r3, #128	; 0x80
 801a8a2:	035b      	lsls	r3, r3, #13
 801a8a4:	0018      	movs	r0, r3
 801a8a6:	f7ff fbff 	bl	801a0a8 <LL_APB1_GRP1_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 801a8aa:	f7ff f8b7 	bl	8019a1c <TRACER_EMB_CALLBACK_TX>
 801a8ae:	e002      	b.n	801a8b6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
      return;
 801a8b0:	46c0      	nop			; (mov r8, r8)
 801a8b2:	e000      	b.n	801a8b6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
        return;
 801a8b4:	46c0      	nop			; (mov r8, r8)
  }
#endif /* TRACER_EMB_DMA_MODE == 1 */

}
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	b006      	add	sp, #24
 801a8ba:	bd80      	pop	{r7, pc}
 801a8bc:	40008000 	.word	0x40008000
 801a8c0:	200034a4 	.word	0x200034a4
 801a8c4:	40020000 	.word	0x40020000

0801a8c8 <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(const uint8_t *pData, uint32_t Size)
{
 801a8c8:	b5b0      	push	{r4, r5, r7, lr}
 801a8ca:	b084      	sub	sp, #16
 801a8cc:	af02      	add	r7, sp, #8
 801a8ce:	6078      	str	r0, [r7, #4]
 801a8d0:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 801a8d2:	2380      	movs	r3, #128	; 0x80
 801a8d4:	035b      	lsls	r3, r3, #13
 801a8d6:	0018      	movs	r0, r3
 801a8d8:	f7ff fbd0 	bl	801a07c <LL_APB1_GRP1_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 801a8dc:	687c      	ldr	r4, [r7, #4]
 801a8de:	4b13      	ldr	r3, [pc, #76]	; (801a92c <HW_TRACER_EMB_SendData+0x64>)
 801a8e0:	2100      	movs	r1, #0
 801a8e2:	0018      	movs	r0, r3
 801a8e4:	f7ff fdfe 	bl	801a4e4 <LL_LPUART_DMA_GetRegAddr>
 801a8e8:	0005      	movs	r5, r0
 801a8ea:	4b11      	ldr	r3, [pc, #68]	; (801a930 <HW_TRACER_EMB_SendData+0x68>)
 801a8ec:	2102      	movs	r1, #2
 801a8ee:	0018      	movs	r0, r3
 801a8f0:	f7ff face 	bl	8019e90 <LL_DMA_GetDataTransferDirection>
 801a8f4:	0003      	movs	r3, r0
 801a8f6:	480e      	ldr	r0, [pc, #56]	; (801a930 <HW_TRACER_EMB_SendData+0x68>)
 801a8f8:	9300      	str	r3, [sp, #0]
 801a8fa:	002b      	movs	r3, r5
 801a8fc:	0022      	movs	r2, r4
 801a8fe:	2102      	movs	r1, #2
 801a900:	f7ff fb02 	bl	8019f08 <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, TRACER_EMB_DMA_DIRECTION),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 801a904:	683b      	ldr	r3, [r7, #0]
 801a906:	480a      	ldr	r0, [pc, #40]	; (801a930 <HW_TRACER_EMB_SendData+0x68>)
 801a908:	001a      	movs	r2, r3
 801a90a:	2102      	movs	r1, #2
 801a90c:	f7ff fada 	bl	8019ec4 <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 801a910:	4b06      	ldr	r3, [pc, #24]	; (801a92c <HW_TRACER_EMB_SendData+0x64>)
 801a912:	0018      	movs	r0, r3
 801a914:	f7ff fdc7 	bl	801a4a6 <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801a918:	4b05      	ldr	r3, [pc, #20]	; (801a930 <HW_TRACER_EMB_SendData+0x68>)
 801a91a:	2102      	movs	r1, #2
 801a91c:	0018      	movs	r0, r3
 801a91e:	f7ff fa51 	bl	8019dc4 <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif /* TRACER_EMB_IT_MODE == 1 */
}
 801a922:	46c0      	nop			; (mov r8, r8)
 801a924:	46bd      	mov	sp, r7
 801a926:	b002      	add	sp, #8
 801a928:	bdb0      	pop	{r4, r5, r7, pc}
 801a92a:	46c0      	nop			; (mov r8, r8)
 801a92c:	40008000 	.word	0x40008000
 801a930:	40020000 	.word	0x40020000

0801a934 <malloc>:
 801a934:	b510      	push	{r4, lr}
 801a936:	4b03      	ldr	r3, [pc, #12]	; (801a944 <malloc+0x10>)
 801a938:	0001      	movs	r1, r0
 801a93a:	6818      	ldr	r0, [r3, #0]
 801a93c:	f000 f826 	bl	801a98c <_malloc_r>
 801a940:	bd10      	pop	{r4, pc}
 801a942:	46c0      	nop			; (mov r8, r8)
 801a944:	20000130 	.word	0x20000130

0801a948 <sbrk_aligned>:
 801a948:	b570      	push	{r4, r5, r6, lr}
 801a94a:	4e0f      	ldr	r6, [pc, #60]	; (801a988 <sbrk_aligned+0x40>)
 801a94c:	000d      	movs	r5, r1
 801a94e:	6831      	ldr	r1, [r6, #0]
 801a950:	0004      	movs	r4, r0
 801a952:	2900      	cmp	r1, #0
 801a954:	d102      	bne.n	801a95c <sbrk_aligned+0x14>
 801a956:	f000 f965 	bl	801ac24 <_sbrk_r>
 801a95a:	6030      	str	r0, [r6, #0]
 801a95c:	0029      	movs	r1, r5
 801a95e:	0020      	movs	r0, r4
 801a960:	f000 f960 	bl	801ac24 <_sbrk_r>
 801a964:	1c43      	adds	r3, r0, #1
 801a966:	d00a      	beq.n	801a97e <sbrk_aligned+0x36>
 801a968:	2303      	movs	r3, #3
 801a96a:	1cc5      	adds	r5, r0, #3
 801a96c:	439d      	bics	r5, r3
 801a96e:	42a8      	cmp	r0, r5
 801a970:	d007      	beq.n	801a982 <sbrk_aligned+0x3a>
 801a972:	1a29      	subs	r1, r5, r0
 801a974:	0020      	movs	r0, r4
 801a976:	f000 f955 	bl	801ac24 <_sbrk_r>
 801a97a:	3001      	adds	r0, #1
 801a97c:	d101      	bne.n	801a982 <sbrk_aligned+0x3a>
 801a97e:	2501      	movs	r5, #1
 801a980:	426d      	negs	r5, r5
 801a982:	0028      	movs	r0, r5
 801a984:	bd70      	pop	{r4, r5, r6, pc}
 801a986:	46c0      	nop			; (mov r8, r8)
 801a988:	200034ac 	.word	0x200034ac

0801a98c <_malloc_r>:
 801a98c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a98e:	2203      	movs	r2, #3
 801a990:	1ccb      	adds	r3, r1, #3
 801a992:	4393      	bics	r3, r2
 801a994:	3308      	adds	r3, #8
 801a996:	0006      	movs	r6, r0
 801a998:	001f      	movs	r7, r3
 801a99a:	2b0c      	cmp	r3, #12
 801a99c:	d238      	bcs.n	801aa10 <_malloc_r+0x84>
 801a99e:	270c      	movs	r7, #12
 801a9a0:	42b9      	cmp	r1, r7
 801a9a2:	d837      	bhi.n	801aa14 <_malloc_r+0x88>
 801a9a4:	0030      	movs	r0, r6
 801a9a6:	f000 f873 	bl	801aa90 <__malloc_lock>
 801a9aa:	4b38      	ldr	r3, [pc, #224]	; (801aa8c <_malloc_r+0x100>)
 801a9ac:	9300      	str	r3, [sp, #0]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	001c      	movs	r4, r3
 801a9b2:	2c00      	cmp	r4, #0
 801a9b4:	d133      	bne.n	801aa1e <_malloc_r+0x92>
 801a9b6:	0039      	movs	r1, r7
 801a9b8:	0030      	movs	r0, r6
 801a9ba:	f7ff ffc5 	bl	801a948 <sbrk_aligned>
 801a9be:	0004      	movs	r4, r0
 801a9c0:	1c43      	adds	r3, r0, #1
 801a9c2:	d15e      	bne.n	801aa82 <_malloc_r+0xf6>
 801a9c4:	9b00      	ldr	r3, [sp, #0]
 801a9c6:	681c      	ldr	r4, [r3, #0]
 801a9c8:	0025      	movs	r5, r4
 801a9ca:	2d00      	cmp	r5, #0
 801a9cc:	d14e      	bne.n	801aa6c <_malloc_r+0xe0>
 801a9ce:	2c00      	cmp	r4, #0
 801a9d0:	d051      	beq.n	801aa76 <_malloc_r+0xea>
 801a9d2:	6823      	ldr	r3, [r4, #0]
 801a9d4:	0029      	movs	r1, r5
 801a9d6:	18e3      	adds	r3, r4, r3
 801a9d8:	0030      	movs	r0, r6
 801a9da:	9301      	str	r3, [sp, #4]
 801a9dc:	f000 f922 	bl	801ac24 <_sbrk_r>
 801a9e0:	9b01      	ldr	r3, [sp, #4]
 801a9e2:	4283      	cmp	r3, r0
 801a9e4:	d147      	bne.n	801aa76 <_malloc_r+0xea>
 801a9e6:	6823      	ldr	r3, [r4, #0]
 801a9e8:	0030      	movs	r0, r6
 801a9ea:	1aff      	subs	r7, r7, r3
 801a9ec:	0039      	movs	r1, r7
 801a9ee:	f7ff ffab 	bl	801a948 <sbrk_aligned>
 801a9f2:	3001      	adds	r0, #1
 801a9f4:	d03f      	beq.n	801aa76 <_malloc_r+0xea>
 801a9f6:	6823      	ldr	r3, [r4, #0]
 801a9f8:	19db      	adds	r3, r3, r7
 801a9fa:	6023      	str	r3, [r4, #0]
 801a9fc:	9b00      	ldr	r3, [sp, #0]
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d040      	beq.n	801aa86 <_malloc_r+0xfa>
 801aa04:	685a      	ldr	r2, [r3, #4]
 801aa06:	42a2      	cmp	r2, r4
 801aa08:	d133      	bne.n	801aa72 <_malloc_r+0xe6>
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	605a      	str	r2, [r3, #4]
 801aa0e:	e014      	b.n	801aa3a <_malloc_r+0xae>
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	dac5      	bge.n	801a9a0 <_malloc_r+0x14>
 801aa14:	230c      	movs	r3, #12
 801aa16:	2500      	movs	r5, #0
 801aa18:	6033      	str	r3, [r6, #0]
 801aa1a:	0028      	movs	r0, r5
 801aa1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801aa1e:	6821      	ldr	r1, [r4, #0]
 801aa20:	1bc9      	subs	r1, r1, r7
 801aa22:	d420      	bmi.n	801aa66 <_malloc_r+0xda>
 801aa24:	290b      	cmp	r1, #11
 801aa26:	d918      	bls.n	801aa5a <_malloc_r+0xce>
 801aa28:	19e2      	adds	r2, r4, r7
 801aa2a:	6027      	str	r7, [r4, #0]
 801aa2c:	42a3      	cmp	r3, r4
 801aa2e:	d112      	bne.n	801aa56 <_malloc_r+0xca>
 801aa30:	9b00      	ldr	r3, [sp, #0]
 801aa32:	601a      	str	r2, [r3, #0]
 801aa34:	6863      	ldr	r3, [r4, #4]
 801aa36:	6011      	str	r1, [r2, #0]
 801aa38:	6053      	str	r3, [r2, #4]
 801aa3a:	0030      	movs	r0, r6
 801aa3c:	0025      	movs	r5, r4
 801aa3e:	f000 f82f 	bl	801aaa0 <__malloc_unlock>
 801aa42:	2207      	movs	r2, #7
 801aa44:	350b      	adds	r5, #11
 801aa46:	1d23      	adds	r3, r4, #4
 801aa48:	4395      	bics	r5, r2
 801aa4a:	1aea      	subs	r2, r5, r3
 801aa4c:	429d      	cmp	r5, r3
 801aa4e:	d0e4      	beq.n	801aa1a <_malloc_r+0x8e>
 801aa50:	1b5b      	subs	r3, r3, r5
 801aa52:	50a3      	str	r3, [r4, r2]
 801aa54:	e7e1      	b.n	801aa1a <_malloc_r+0x8e>
 801aa56:	605a      	str	r2, [r3, #4]
 801aa58:	e7ec      	b.n	801aa34 <_malloc_r+0xa8>
 801aa5a:	6862      	ldr	r2, [r4, #4]
 801aa5c:	42a3      	cmp	r3, r4
 801aa5e:	d1d5      	bne.n	801aa0c <_malloc_r+0x80>
 801aa60:	9b00      	ldr	r3, [sp, #0]
 801aa62:	601a      	str	r2, [r3, #0]
 801aa64:	e7e9      	b.n	801aa3a <_malloc_r+0xae>
 801aa66:	0023      	movs	r3, r4
 801aa68:	6864      	ldr	r4, [r4, #4]
 801aa6a:	e7a2      	b.n	801a9b2 <_malloc_r+0x26>
 801aa6c:	002c      	movs	r4, r5
 801aa6e:	686d      	ldr	r5, [r5, #4]
 801aa70:	e7ab      	b.n	801a9ca <_malloc_r+0x3e>
 801aa72:	0013      	movs	r3, r2
 801aa74:	e7c4      	b.n	801aa00 <_malloc_r+0x74>
 801aa76:	230c      	movs	r3, #12
 801aa78:	0030      	movs	r0, r6
 801aa7a:	6033      	str	r3, [r6, #0]
 801aa7c:	f000 f810 	bl	801aaa0 <__malloc_unlock>
 801aa80:	e7cb      	b.n	801aa1a <_malloc_r+0x8e>
 801aa82:	6027      	str	r7, [r4, #0]
 801aa84:	e7d9      	b.n	801aa3a <_malloc_r+0xae>
 801aa86:	605b      	str	r3, [r3, #4]
 801aa88:	deff      	udf	#255	; 0xff
 801aa8a:	46c0      	nop			; (mov r8, r8)
 801aa8c:	200034a8 	.word	0x200034a8

0801aa90 <__malloc_lock>:
 801aa90:	b510      	push	{r4, lr}
 801aa92:	4802      	ldr	r0, [pc, #8]	; (801aa9c <__malloc_lock+0xc>)
 801aa94:	f000 f902 	bl	801ac9c <__retarget_lock_acquire_recursive>
 801aa98:	bd10      	pop	{r4, pc}
 801aa9a:	46c0      	nop			; (mov r8, r8)
 801aa9c:	200035ec 	.word	0x200035ec

0801aaa0 <__malloc_unlock>:
 801aaa0:	b510      	push	{r4, lr}
 801aaa2:	4802      	ldr	r0, [pc, #8]	; (801aaac <__malloc_unlock+0xc>)
 801aaa4:	f000 f8fb 	bl	801ac9e <__retarget_lock_release_recursive>
 801aaa8:	bd10      	pop	{r4, pc}
 801aaaa:	46c0      	nop			; (mov r8, r8)
 801aaac:	200035ec 	.word	0x200035ec

0801aab0 <sniprintf>:
 801aab0:	b40c      	push	{r2, r3}
 801aab2:	b530      	push	{r4, r5, lr}
 801aab4:	4b17      	ldr	r3, [pc, #92]	; (801ab14 <sniprintf+0x64>)
 801aab6:	000c      	movs	r4, r1
 801aab8:	681d      	ldr	r5, [r3, #0]
 801aaba:	b09d      	sub	sp, #116	; 0x74
 801aabc:	2900      	cmp	r1, #0
 801aabe:	da08      	bge.n	801aad2 <sniprintf+0x22>
 801aac0:	238b      	movs	r3, #139	; 0x8b
 801aac2:	2001      	movs	r0, #1
 801aac4:	602b      	str	r3, [r5, #0]
 801aac6:	4240      	negs	r0, r0
 801aac8:	b01d      	add	sp, #116	; 0x74
 801aaca:	bc30      	pop	{r4, r5}
 801aacc:	bc08      	pop	{r3}
 801aace:	b002      	add	sp, #8
 801aad0:	4718      	bx	r3
 801aad2:	2382      	movs	r3, #130	; 0x82
 801aad4:	466a      	mov	r2, sp
 801aad6:	009b      	lsls	r3, r3, #2
 801aad8:	8293      	strh	r3, [r2, #20]
 801aada:	2300      	movs	r3, #0
 801aadc:	9002      	str	r0, [sp, #8]
 801aade:	9006      	str	r0, [sp, #24]
 801aae0:	4299      	cmp	r1, r3
 801aae2:	d000      	beq.n	801aae6 <sniprintf+0x36>
 801aae4:	1e4b      	subs	r3, r1, #1
 801aae6:	9304      	str	r3, [sp, #16]
 801aae8:	9307      	str	r3, [sp, #28]
 801aaea:	2301      	movs	r3, #1
 801aaec:	466a      	mov	r2, sp
 801aaee:	425b      	negs	r3, r3
 801aaf0:	82d3      	strh	r3, [r2, #22]
 801aaf2:	0028      	movs	r0, r5
 801aaf4:	ab21      	add	r3, sp, #132	; 0x84
 801aaf6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801aaf8:	a902      	add	r1, sp, #8
 801aafa:	9301      	str	r3, [sp, #4]
 801aafc:	f000 f996 	bl	801ae2c <_svfiprintf_r>
 801ab00:	1c43      	adds	r3, r0, #1
 801ab02:	da01      	bge.n	801ab08 <sniprintf+0x58>
 801ab04:	238b      	movs	r3, #139	; 0x8b
 801ab06:	602b      	str	r3, [r5, #0]
 801ab08:	2c00      	cmp	r4, #0
 801ab0a:	d0dd      	beq.n	801aac8 <sniprintf+0x18>
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	9b02      	ldr	r3, [sp, #8]
 801ab10:	701a      	strb	r2, [r3, #0]
 801ab12:	e7d9      	b.n	801aac8 <sniprintf+0x18>
 801ab14:	20000130 	.word	0x20000130

0801ab18 <siprintf>:
 801ab18:	b40e      	push	{r1, r2, r3}
 801ab1a:	b500      	push	{lr}
 801ab1c:	490b      	ldr	r1, [pc, #44]	; (801ab4c <siprintf+0x34>)
 801ab1e:	b09c      	sub	sp, #112	; 0x70
 801ab20:	ab1d      	add	r3, sp, #116	; 0x74
 801ab22:	9002      	str	r0, [sp, #8]
 801ab24:	9006      	str	r0, [sp, #24]
 801ab26:	9107      	str	r1, [sp, #28]
 801ab28:	9104      	str	r1, [sp, #16]
 801ab2a:	4809      	ldr	r0, [pc, #36]	; (801ab50 <siprintf+0x38>)
 801ab2c:	4909      	ldr	r1, [pc, #36]	; (801ab54 <siprintf+0x3c>)
 801ab2e:	cb04      	ldmia	r3!, {r2}
 801ab30:	9105      	str	r1, [sp, #20]
 801ab32:	6800      	ldr	r0, [r0, #0]
 801ab34:	a902      	add	r1, sp, #8
 801ab36:	9301      	str	r3, [sp, #4]
 801ab38:	f000 f978 	bl	801ae2c <_svfiprintf_r>
 801ab3c:	2200      	movs	r2, #0
 801ab3e:	9b02      	ldr	r3, [sp, #8]
 801ab40:	701a      	strb	r2, [r3, #0]
 801ab42:	b01c      	add	sp, #112	; 0x70
 801ab44:	bc08      	pop	{r3}
 801ab46:	b003      	add	sp, #12
 801ab48:	4718      	bx	r3
 801ab4a:	46c0      	nop			; (mov r8, r8)
 801ab4c:	7fffffff 	.word	0x7fffffff
 801ab50:	20000130 	.word	0x20000130
 801ab54:	ffff0208 	.word	0xffff0208

0801ab58 <memset>:
 801ab58:	0003      	movs	r3, r0
 801ab5a:	1882      	adds	r2, r0, r2
 801ab5c:	4293      	cmp	r3, r2
 801ab5e:	d100      	bne.n	801ab62 <memset+0xa>
 801ab60:	4770      	bx	lr
 801ab62:	7019      	strb	r1, [r3, #0]
 801ab64:	3301      	adds	r3, #1
 801ab66:	e7f9      	b.n	801ab5c <memset+0x4>

0801ab68 <_reclaim_reent>:
 801ab68:	4b2d      	ldr	r3, [pc, #180]	; (801ac20 <_reclaim_reent+0xb8>)
 801ab6a:	b570      	push	{r4, r5, r6, lr}
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	0004      	movs	r4, r0
 801ab70:	4283      	cmp	r3, r0
 801ab72:	d042      	beq.n	801abfa <_reclaim_reent+0x92>
 801ab74:	69c3      	ldr	r3, [r0, #28]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d00a      	beq.n	801ab90 <_reclaim_reent+0x28>
 801ab7a:	2500      	movs	r5, #0
 801ab7c:	68db      	ldr	r3, [r3, #12]
 801ab7e:	42ab      	cmp	r3, r5
 801ab80:	d140      	bne.n	801ac04 <_reclaim_reent+0x9c>
 801ab82:	69e3      	ldr	r3, [r4, #28]
 801ab84:	6819      	ldr	r1, [r3, #0]
 801ab86:	2900      	cmp	r1, #0
 801ab88:	d002      	beq.n	801ab90 <_reclaim_reent+0x28>
 801ab8a:	0020      	movs	r0, r4
 801ab8c:	f000 f8a2 	bl	801acd4 <_free_r>
 801ab90:	6961      	ldr	r1, [r4, #20]
 801ab92:	2900      	cmp	r1, #0
 801ab94:	d002      	beq.n	801ab9c <_reclaim_reent+0x34>
 801ab96:	0020      	movs	r0, r4
 801ab98:	f000 f89c 	bl	801acd4 <_free_r>
 801ab9c:	69e1      	ldr	r1, [r4, #28]
 801ab9e:	2900      	cmp	r1, #0
 801aba0:	d002      	beq.n	801aba8 <_reclaim_reent+0x40>
 801aba2:	0020      	movs	r0, r4
 801aba4:	f000 f896 	bl	801acd4 <_free_r>
 801aba8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801abaa:	2900      	cmp	r1, #0
 801abac:	d002      	beq.n	801abb4 <_reclaim_reent+0x4c>
 801abae:	0020      	movs	r0, r4
 801abb0:	f000 f890 	bl	801acd4 <_free_r>
 801abb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801abb6:	2900      	cmp	r1, #0
 801abb8:	d002      	beq.n	801abc0 <_reclaim_reent+0x58>
 801abba:	0020      	movs	r0, r4
 801abbc:	f000 f88a 	bl	801acd4 <_free_r>
 801abc0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801abc2:	2900      	cmp	r1, #0
 801abc4:	d002      	beq.n	801abcc <_reclaim_reent+0x64>
 801abc6:	0020      	movs	r0, r4
 801abc8:	f000 f884 	bl	801acd4 <_free_r>
 801abcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801abce:	2900      	cmp	r1, #0
 801abd0:	d002      	beq.n	801abd8 <_reclaim_reent+0x70>
 801abd2:	0020      	movs	r0, r4
 801abd4:	f000 f87e 	bl	801acd4 <_free_r>
 801abd8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801abda:	2900      	cmp	r1, #0
 801abdc:	d002      	beq.n	801abe4 <_reclaim_reent+0x7c>
 801abde:	0020      	movs	r0, r4
 801abe0:	f000 f878 	bl	801acd4 <_free_r>
 801abe4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801abe6:	2900      	cmp	r1, #0
 801abe8:	d002      	beq.n	801abf0 <_reclaim_reent+0x88>
 801abea:	0020      	movs	r0, r4
 801abec:	f000 f872 	bl	801acd4 <_free_r>
 801abf0:	6a23      	ldr	r3, [r4, #32]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d001      	beq.n	801abfa <_reclaim_reent+0x92>
 801abf6:	0020      	movs	r0, r4
 801abf8:	4798      	blx	r3
 801abfa:	bd70      	pop	{r4, r5, r6, pc}
 801abfc:	5949      	ldr	r1, [r1, r5]
 801abfe:	2900      	cmp	r1, #0
 801ac00:	d108      	bne.n	801ac14 <_reclaim_reent+0xac>
 801ac02:	3504      	adds	r5, #4
 801ac04:	69e3      	ldr	r3, [r4, #28]
 801ac06:	68d9      	ldr	r1, [r3, #12]
 801ac08:	2d80      	cmp	r5, #128	; 0x80
 801ac0a:	d1f7      	bne.n	801abfc <_reclaim_reent+0x94>
 801ac0c:	0020      	movs	r0, r4
 801ac0e:	f000 f861 	bl	801acd4 <_free_r>
 801ac12:	e7b6      	b.n	801ab82 <_reclaim_reent+0x1a>
 801ac14:	680e      	ldr	r6, [r1, #0]
 801ac16:	0020      	movs	r0, r4
 801ac18:	f000 f85c 	bl	801acd4 <_free_r>
 801ac1c:	0031      	movs	r1, r6
 801ac1e:	e7ee      	b.n	801abfe <_reclaim_reent+0x96>
 801ac20:	20000130 	.word	0x20000130

0801ac24 <_sbrk_r>:
 801ac24:	2300      	movs	r3, #0
 801ac26:	b570      	push	{r4, r5, r6, lr}
 801ac28:	4d06      	ldr	r5, [pc, #24]	; (801ac44 <_sbrk_r+0x20>)
 801ac2a:	0004      	movs	r4, r0
 801ac2c:	0008      	movs	r0, r1
 801ac2e:	602b      	str	r3, [r5, #0]
 801ac30:	f7ed fef2 	bl	8008a18 <_sbrk>
 801ac34:	1c43      	adds	r3, r0, #1
 801ac36:	d103      	bne.n	801ac40 <_sbrk_r+0x1c>
 801ac38:	682b      	ldr	r3, [r5, #0]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d000      	beq.n	801ac40 <_sbrk_r+0x1c>
 801ac3e:	6023      	str	r3, [r4, #0]
 801ac40:	bd70      	pop	{r4, r5, r6, pc}
 801ac42:	46c0      	nop			; (mov r8, r8)
 801ac44:	200035e8 	.word	0x200035e8

0801ac48 <__errno>:
 801ac48:	4b01      	ldr	r3, [pc, #4]	; (801ac50 <__errno+0x8>)
 801ac4a:	6818      	ldr	r0, [r3, #0]
 801ac4c:	4770      	bx	lr
 801ac4e:	46c0      	nop			; (mov r8, r8)
 801ac50:	20000130 	.word	0x20000130

0801ac54 <__libc_init_array>:
 801ac54:	b570      	push	{r4, r5, r6, lr}
 801ac56:	2600      	movs	r6, #0
 801ac58:	4c0c      	ldr	r4, [pc, #48]	; (801ac8c <__libc_init_array+0x38>)
 801ac5a:	4d0d      	ldr	r5, [pc, #52]	; (801ac90 <__libc_init_array+0x3c>)
 801ac5c:	1b64      	subs	r4, r4, r5
 801ac5e:	10a4      	asrs	r4, r4, #2
 801ac60:	42a6      	cmp	r6, r4
 801ac62:	d109      	bne.n	801ac78 <__libc_init_array+0x24>
 801ac64:	2600      	movs	r6, #0
 801ac66:	f000 fbb7 	bl	801b3d8 <_init>
 801ac6a:	4c0a      	ldr	r4, [pc, #40]	; (801ac94 <__libc_init_array+0x40>)
 801ac6c:	4d0a      	ldr	r5, [pc, #40]	; (801ac98 <__libc_init_array+0x44>)
 801ac6e:	1b64      	subs	r4, r4, r5
 801ac70:	10a4      	asrs	r4, r4, #2
 801ac72:	42a6      	cmp	r6, r4
 801ac74:	d105      	bne.n	801ac82 <__libc_init_array+0x2e>
 801ac76:	bd70      	pop	{r4, r5, r6, pc}
 801ac78:	00b3      	lsls	r3, r6, #2
 801ac7a:	58eb      	ldr	r3, [r5, r3]
 801ac7c:	4798      	blx	r3
 801ac7e:	3601      	adds	r6, #1
 801ac80:	e7ee      	b.n	801ac60 <__libc_init_array+0xc>
 801ac82:	00b3      	lsls	r3, r6, #2
 801ac84:	58eb      	ldr	r3, [r5, r3]
 801ac86:	4798      	blx	r3
 801ac88:	3601      	adds	r6, #1
 801ac8a:	e7f2      	b.n	801ac72 <__libc_init_array+0x1e>
 801ac8c:	0801cc84 	.word	0x0801cc84
 801ac90:	0801cc84 	.word	0x0801cc84
 801ac94:	0801cc88 	.word	0x0801cc88
 801ac98:	0801cc84 	.word	0x0801cc84

0801ac9c <__retarget_lock_acquire_recursive>:
 801ac9c:	4770      	bx	lr

0801ac9e <__retarget_lock_release_recursive>:
 801ac9e:	4770      	bx	lr

0801aca0 <__aeabi_memcpy>:
 801aca0:	b510      	push	{r4, lr}
 801aca2:	f000 f80d 	bl	801acc0 <memcpy>
 801aca6:	bd10      	pop	{r4, pc}

0801aca8 <__aeabi_memset>:
 801aca8:	000b      	movs	r3, r1
 801acaa:	b510      	push	{r4, lr}
 801acac:	0011      	movs	r1, r2
 801acae:	001a      	movs	r2, r3
 801acb0:	f7ff ff52 	bl	801ab58 <memset>
 801acb4:	bd10      	pop	{r4, pc}

0801acb6 <__aeabi_memclr>:
 801acb6:	b510      	push	{r4, lr}
 801acb8:	2200      	movs	r2, #0
 801acba:	f7ff fff5 	bl	801aca8 <__aeabi_memset>
 801acbe:	bd10      	pop	{r4, pc}

0801acc0 <memcpy>:
 801acc0:	2300      	movs	r3, #0
 801acc2:	b510      	push	{r4, lr}
 801acc4:	429a      	cmp	r2, r3
 801acc6:	d100      	bne.n	801acca <memcpy+0xa>
 801acc8:	bd10      	pop	{r4, pc}
 801acca:	5ccc      	ldrb	r4, [r1, r3]
 801accc:	54c4      	strb	r4, [r0, r3]
 801acce:	3301      	adds	r3, #1
 801acd0:	e7f8      	b.n	801acc4 <memcpy+0x4>
	...

0801acd4 <_free_r>:
 801acd4:	b570      	push	{r4, r5, r6, lr}
 801acd6:	0005      	movs	r5, r0
 801acd8:	2900      	cmp	r1, #0
 801acda:	d010      	beq.n	801acfe <_free_r+0x2a>
 801acdc:	1f0c      	subs	r4, r1, #4
 801acde:	6823      	ldr	r3, [r4, #0]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	da00      	bge.n	801ace6 <_free_r+0x12>
 801ace4:	18e4      	adds	r4, r4, r3
 801ace6:	0028      	movs	r0, r5
 801ace8:	f7ff fed2 	bl	801aa90 <__malloc_lock>
 801acec:	4a1d      	ldr	r2, [pc, #116]	; (801ad64 <_free_r+0x90>)
 801acee:	6813      	ldr	r3, [r2, #0]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d105      	bne.n	801ad00 <_free_r+0x2c>
 801acf4:	6063      	str	r3, [r4, #4]
 801acf6:	6014      	str	r4, [r2, #0]
 801acf8:	0028      	movs	r0, r5
 801acfa:	f7ff fed1 	bl	801aaa0 <__malloc_unlock>
 801acfe:	bd70      	pop	{r4, r5, r6, pc}
 801ad00:	42a3      	cmp	r3, r4
 801ad02:	d908      	bls.n	801ad16 <_free_r+0x42>
 801ad04:	6820      	ldr	r0, [r4, #0]
 801ad06:	1821      	adds	r1, r4, r0
 801ad08:	428b      	cmp	r3, r1
 801ad0a:	d1f3      	bne.n	801acf4 <_free_r+0x20>
 801ad0c:	6819      	ldr	r1, [r3, #0]
 801ad0e:	685b      	ldr	r3, [r3, #4]
 801ad10:	1809      	adds	r1, r1, r0
 801ad12:	6021      	str	r1, [r4, #0]
 801ad14:	e7ee      	b.n	801acf4 <_free_r+0x20>
 801ad16:	001a      	movs	r2, r3
 801ad18:	685b      	ldr	r3, [r3, #4]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d001      	beq.n	801ad22 <_free_r+0x4e>
 801ad1e:	42a3      	cmp	r3, r4
 801ad20:	d9f9      	bls.n	801ad16 <_free_r+0x42>
 801ad22:	6811      	ldr	r1, [r2, #0]
 801ad24:	1850      	adds	r0, r2, r1
 801ad26:	42a0      	cmp	r0, r4
 801ad28:	d10b      	bne.n	801ad42 <_free_r+0x6e>
 801ad2a:	6820      	ldr	r0, [r4, #0]
 801ad2c:	1809      	adds	r1, r1, r0
 801ad2e:	1850      	adds	r0, r2, r1
 801ad30:	6011      	str	r1, [r2, #0]
 801ad32:	4283      	cmp	r3, r0
 801ad34:	d1e0      	bne.n	801acf8 <_free_r+0x24>
 801ad36:	6818      	ldr	r0, [r3, #0]
 801ad38:	685b      	ldr	r3, [r3, #4]
 801ad3a:	1841      	adds	r1, r0, r1
 801ad3c:	6011      	str	r1, [r2, #0]
 801ad3e:	6053      	str	r3, [r2, #4]
 801ad40:	e7da      	b.n	801acf8 <_free_r+0x24>
 801ad42:	42a0      	cmp	r0, r4
 801ad44:	d902      	bls.n	801ad4c <_free_r+0x78>
 801ad46:	230c      	movs	r3, #12
 801ad48:	602b      	str	r3, [r5, #0]
 801ad4a:	e7d5      	b.n	801acf8 <_free_r+0x24>
 801ad4c:	6820      	ldr	r0, [r4, #0]
 801ad4e:	1821      	adds	r1, r4, r0
 801ad50:	428b      	cmp	r3, r1
 801ad52:	d103      	bne.n	801ad5c <_free_r+0x88>
 801ad54:	6819      	ldr	r1, [r3, #0]
 801ad56:	685b      	ldr	r3, [r3, #4]
 801ad58:	1809      	adds	r1, r1, r0
 801ad5a:	6021      	str	r1, [r4, #0]
 801ad5c:	6063      	str	r3, [r4, #4]
 801ad5e:	6054      	str	r4, [r2, #4]
 801ad60:	e7ca      	b.n	801acf8 <_free_r+0x24>
 801ad62:	46c0      	nop			; (mov r8, r8)
 801ad64:	200034a8 	.word	0x200034a8

0801ad68 <__ssputs_r>:
 801ad68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad6a:	b085      	sub	sp, #20
 801ad6c:	9301      	str	r3, [sp, #4]
 801ad6e:	9203      	str	r2, [sp, #12]
 801ad70:	688e      	ldr	r6, [r1, #8]
 801ad72:	9a01      	ldr	r2, [sp, #4]
 801ad74:	0007      	movs	r7, r0
 801ad76:	000c      	movs	r4, r1
 801ad78:	680b      	ldr	r3, [r1, #0]
 801ad7a:	4296      	cmp	r6, r2
 801ad7c:	d831      	bhi.n	801ade2 <__ssputs_r+0x7a>
 801ad7e:	898a      	ldrh	r2, [r1, #12]
 801ad80:	2190      	movs	r1, #144	; 0x90
 801ad82:	00c9      	lsls	r1, r1, #3
 801ad84:	420a      	tst	r2, r1
 801ad86:	d029      	beq.n	801addc <__ssputs_r+0x74>
 801ad88:	2003      	movs	r0, #3
 801ad8a:	6921      	ldr	r1, [r4, #16]
 801ad8c:	1a5b      	subs	r3, r3, r1
 801ad8e:	9302      	str	r3, [sp, #8]
 801ad90:	6963      	ldr	r3, [r4, #20]
 801ad92:	4343      	muls	r3, r0
 801ad94:	0fdd      	lsrs	r5, r3, #31
 801ad96:	18ed      	adds	r5, r5, r3
 801ad98:	9b01      	ldr	r3, [sp, #4]
 801ad9a:	9802      	ldr	r0, [sp, #8]
 801ad9c:	3301      	adds	r3, #1
 801ad9e:	181b      	adds	r3, r3, r0
 801ada0:	106d      	asrs	r5, r5, #1
 801ada2:	42ab      	cmp	r3, r5
 801ada4:	d900      	bls.n	801ada8 <__ssputs_r+0x40>
 801ada6:	001d      	movs	r5, r3
 801ada8:	0552      	lsls	r2, r2, #21
 801adaa:	d529      	bpl.n	801ae00 <__ssputs_r+0x98>
 801adac:	0029      	movs	r1, r5
 801adae:	0038      	movs	r0, r7
 801adb0:	f7ff fdec 	bl	801a98c <_malloc_r>
 801adb4:	1e06      	subs	r6, r0, #0
 801adb6:	d02d      	beq.n	801ae14 <__ssputs_r+0xac>
 801adb8:	9a02      	ldr	r2, [sp, #8]
 801adba:	6921      	ldr	r1, [r4, #16]
 801adbc:	f7ff ff80 	bl	801acc0 <memcpy>
 801adc0:	89a2      	ldrh	r2, [r4, #12]
 801adc2:	4b19      	ldr	r3, [pc, #100]	; (801ae28 <__ssputs_r+0xc0>)
 801adc4:	401a      	ands	r2, r3
 801adc6:	2380      	movs	r3, #128	; 0x80
 801adc8:	4313      	orrs	r3, r2
 801adca:	81a3      	strh	r3, [r4, #12]
 801adcc:	9b02      	ldr	r3, [sp, #8]
 801adce:	6126      	str	r6, [r4, #16]
 801add0:	18f6      	adds	r6, r6, r3
 801add2:	6026      	str	r6, [r4, #0]
 801add4:	6165      	str	r5, [r4, #20]
 801add6:	9e01      	ldr	r6, [sp, #4]
 801add8:	1aed      	subs	r5, r5, r3
 801adda:	60a5      	str	r5, [r4, #8]
 801addc:	9b01      	ldr	r3, [sp, #4]
 801adde:	429e      	cmp	r6, r3
 801ade0:	d900      	bls.n	801ade4 <__ssputs_r+0x7c>
 801ade2:	9e01      	ldr	r6, [sp, #4]
 801ade4:	0032      	movs	r2, r6
 801ade6:	9903      	ldr	r1, [sp, #12]
 801ade8:	6820      	ldr	r0, [r4, #0]
 801adea:	f000 fa9f 	bl	801b32c <memmove>
 801adee:	2000      	movs	r0, #0
 801adf0:	68a3      	ldr	r3, [r4, #8]
 801adf2:	1b9b      	subs	r3, r3, r6
 801adf4:	60a3      	str	r3, [r4, #8]
 801adf6:	6823      	ldr	r3, [r4, #0]
 801adf8:	199b      	adds	r3, r3, r6
 801adfa:	6023      	str	r3, [r4, #0]
 801adfc:	b005      	add	sp, #20
 801adfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae00:	002a      	movs	r2, r5
 801ae02:	0038      	movs	r0, r7
 801ae04:	f000 fab0 	bl	801b368 <_realloc_r>
 801ae08:	1e06      	subs	r6, r0, #0
 801ae0a:	d1df      	bne.n	801adcc <__ssputs_r+0x64>
 801ae0c:	0038      	movs	r0, r7
 801ae0e:	6921      	ldr	r1, [r4, #16]
 801ae10:	f7ff ff60 	bl	801acd4 <_free_r>
 801ae14:	230c      	movs	r3, #12
 801ae16:	2001      	movs	r0, #1
 801ae18:	603b      	str	r3, [r7, #0]
 801ae1a:	89a2      	ldrh	r2, [r4, #12]
 801ae1c:	3334      	adds	r3, #52	; 0x34
 801ae1e:	4313      	orrs	r3, r2
 801ae20:	81a3      	strh	r3, [r4, #12]
 801ae22:	4240      	negs	r0, r0
 801ae24:	e7ea      	b.n	801adfc <__ssputs_r+0x94>
 801ae26:	46c0      	nop			; (mov r8, r8)
 801ae28:	fffffb7f 	.word	0xfffffb7f

0801ae2c <_svfiprintf_r>:
 801ae2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae2e:	b0a1      	sub	sp, #132	; 0x84
 801ae30:	9003      	str	r0, [sp, #12]
 801ae32:	001d      	movs	r5, r3
 801ae34:	898b      	ldrh	r3, [r1, #12]
 801ae36:	000f      	movs	r7, r1
 801ae38:	0016      	movs	r6, r2
 801ae3a:	061b      	lsls	r3, r3, #24
 801ae3c:	d511      	bpl.n	801ae62 <_svfiprintf_r+0x36>
 801ae3e:	690b      	ldr	r3, [r1, #16]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d10e      	bne.n	801ae62 <_svfiprintf_r+0x36>
 801ae44:	2140      	movs	r1, #64	; 0x40
 801ae46:	f7ff fda1 	bl	801a98c <_malloc_r>
 801ae4a:	6038      	str	r0, [r7, #0]
 801ae4c:	6138      	str	r0, [r7, #16]
 801ae4e:	2800      	cmp	r0, #0
 801ae50:	d105      	bne.n	801ae5e <_svfiprintf_r+0x32>
 801ae52:	230c      	movs	r3, #12
 801ae54:	9a03      	ldr	r2, [sp, #12]
 801ae56:	3801      	subs	r0, #1
 801ae58:	6013      	str	r3, [r2, #0]
 801ae5a:	b021      	add	sp, #132	; 0x84
 801ae5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae5e:	2340      	movs	r3, #64	; 0x40
 801ae60:	617b      	str	r3, [r7, #20]
 801ae62:	2300      	movs	r3, #0
 801ae64:	ac08      	add	r4, sp, #32
 801ae66:	6163      	str	r3, [r4, #20]
 801ae68:	3320      	adds	r3, #32
 801ae6a:	7663      	strb	r3, [r4, #25]
 801ae6c:	3310      	adds	r3, #16
 801ae6e:	76a3      	strb	r3, [r4, #26]
 801ae70:	9507      	str	r5, [sp, #28]
 801ae72:	0035      	movs	r5, r6
 801ae74:	782b      	ldrb	r3, [r5, #0]
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d001      	beq.n	801ae7e <_svfiprintf_r+0x52>
 801ae7a:	2b25      	cmp	r3, #37	; 0x25
 801ae7c:	d148      	bne.n	801af10 <_svfiprintf_r+0xe4>
 801ae7e:	1bab      	subs	r3, r5, r6
 801ae80:	9305      	str	r3, [sp, #20]
 801ae82:	42b5      	cmp	r5, r6
 801ae84:	d00b      	beq.n	801ae9e <_svfiprintf_r+0x72>
 801ae86:	0032      	movs	r2, r6
 801ae88:	0039      	movs	r1, r7
 801ae8a:	9803      	ldr	r0, [sp, #12]
 801ae8c:	f7ff ff6c 	bl	801ad68 <__ssputs_r>
 801ae90:	3001      	adds	r0, #1
 801ae92:	d100      	bne.n	801ae96 <_svfiprintf_r+0x6a>
 801ae94:	e0af      	b.n	801aff6 <_svfiprintf_r+0x1ca>
 801ae96:	6963      	ldr	r3, [r4, #20]
 801ae98:	9a05      	ldr	r2, [sp, #20]
 801ae9a:	189b      	adds	r3, r3, r2
 801ae9c:	6163      	str	r3, [r4, #20]
 801ae9e:	782b      	ldrb	r3, [r5, #0]
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d100      	bne.n	801aea6 <_svfiprintf_r+0x7a>
 801aea4:	e0a7      	b.n	801aff6 <_svfiprintf_r+0x1ca>
 801aea6:	2201      	movs	r2, #1
 801aea8:	2300      	movs	r3, #0
 801aeaa:	4252      	negs	r2, r2
 801aeac:	6062      	str	r2, [r4, #4]
 801aeae:	a904      	add	r1, sp, #16
 801aeb0:	3254      	adds	r2, #84	; 0x54
 801aeb2:	1852      	adds	r2, r2, r1
 801aeb4:	1c6e      	adds	r6, r5, #1
 801aeb6:	6023      	str	r3, [r4, #0]
 801aeb8:	60e3      	str	r3, [r4, #12]
 801aeba:	60a3      	str	r3, [r4, #8]
 801aebc:	7013      	strb	r3, [r2, #0]
 801aebe:	65a3      	str	r3, [r4, #88]	; 0x58
 801aec0:	4b55      	ldr	r3, [pc, #340]	; (801b018 <_svfiprintf_r+0x1ec>)
 801aec2:	2205      	movs	r2, #5
 801aec4:	0018      	movs	r0, r3
 801aec6:	7831      	ldrb	r1, [r6, #0]
 801aec8:	9305      	str	r3, [sp, #20]
 801aeca:	f000 fa42 	bl	801b352 <memchr>
 801aece:	1c75      	adds	r5, r6, #1
 801aed0:	2800      	cmp	r0, #0
 801aed2:	d11f      	bne.n	801af14 <_svfiprintf_r+0xe8>
 801aed4:	6822      	ldr	r2, [r4, #0]
 801aed6:	06d3      	lsls	r3, r2, #27
 801aed8:	d504      	bpl.n	801aee4 <_svfiprintf_r+0xb8>
 801aeda:	2353      	movs	r3, #83	; 0x53
 801aedc:	a904      	add	r1, sp, #16
 801aede:	185b      	adds	r3, r3, r1
 801aee0:	2120      	movs	r1, #32
 801aee2:	7019      	strb	r1, [r3, #0]
 801aee4:	0713      	lsls	r3, r2, #28
 801aee6:	d504      	bpl.n	801aef2 <_svfiprintf_r+0xc6>
 801aee8:	2353      	movs	r3, #83	; 0x53
 801aeea:	a904      	add	r1, sp, #16
 801aeec:	185b      	adds	r3, r3, r1
 801aeee:	212b      	movs	r1, #43	; 0x2b
 801aef0:	7019      	strb	r1, [r3, #0]
 801aef2:	7833      	ldrb	r3, [r6, #0]
 801aef4:	2b2a      	cmp	r3, #42	; 0x2a
 801aef6:	d016      	beq.n	801af26 <_svfiprintf_r+0xfa>
 801aef8:	0035      	movs	r5, r6
 801aefa:	2100      	movs	r1, #0
 801aefc:	200a      	movs	r0, #10
 801aefe:	68e3      	ldr	r3, [r4, #12]
 801af00:	782a      	ldrb	r2, [r5, #0]
 801af02:	1c6e      	adds	r6, r5, #1
 801af04:	3a30      	subs	r2, #48	; 0x30
 801af06:	2a09      	cmp	r2, #9
 801af08:	d94e      	bls.n	801afa8 <_svfiprintf_r+0x17c>
 801af0a:	2900      	cmp	r1, #0
 801af0c:	d111      	bne.n	801af32 <_svfiprintf_r+0x106>
 801af0e:	e017      	b.n	801af40 <_svfiprintf_r+0x114>
 801af10:	3501      	adds	r5, #1
 801af12:	e7af      	b.n	801ae74 <_svfiprintf_r+0x48>
 801af14:	9b05      	ldr	r3, [sp, #20]
 801af16:	6822      	ldr	r2, [r4, #0]
 801af18:	1ac0      	subs	r0, r0, r3
 801af1a:	2301      	movs	r3, #1
 801af1c:	4083      	lsls	r3, r0
 801af1e:	4313      	orrs	r3, r2
 801af20:	002e      	movs	r6, r5
 801af22:	6023      	str	r3, [r4, #0]
 801af24:	e7cc      	b.n	801aec0 <_svfiprintf_r+0x94>
 801af26:	9b07      	ldr	r3, [sp, #28]
 801af28:	1d19      	adds	r1, r3, #4
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	9107      	str	r1, [sp, #28]
 801af2e:	2b00      	cmp	r3, #0
 801af30:	db01      	blt.n	801af36 <_svfiprintf_r+0x10a>
 801af32:	930b      	str	r3, [sp, #44]	; 0x2c
 801af34:	e004      	b.n	801af40 <_svfiprintf_r+0x114>
 801af36:	425b      	negs	r3, r3
 801af38:	60e3      	str	r3, [r4, #12]
 801af3a:	2302      	movs	r3, #2
 801af3c:	4313      	orrs	r3, r2
 801af3e:	6023      	str	r3, [r4, #0]
 801af40:	782b      	ldrb	r3, [r5, #0]
 801af42:	2b2e      	cmp	r3, #46	; 0x2e
 801af44:	d10a      	bne.n	801af5c <_svfiprintf_r+0x130>
 801af46:	786b      	ldrb	r3, [r5, #1]
 801af48:	2b2a      	cmp	r3, #42	; 0x2a
 801af4a:	d135      	bne.n	801afb8 <_svfiprintf_r+0x18c>
 801af4c:	9b07      	ldr	r3, [sp, #28]
 801af4e:	3502      	adds	r5, #2
 801af50:	1d1a      	adds	r2, r3, #4
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	9207      	str	r2, [sp, #28]
 801af56:	2b00      	cmp	r3, #0
 801af58:	db2b      	blt.n	801afb2 <_svfiprintf_r+0x186>
 801af5a:	9309      	str	r3, [sp, #36]	; 0x24
 801af5c:	4e2f      	ldr	r6, [pc, #188]	; (801b01c <_svfiprintf_r+0x1f0>)
 801af5e:	2203      	movs	r2, #3
 801af60:	0030      	movs	r0, r6
 801af62:	7829      	ldrb	r1, [r5, #0]
 801af64:	f000 f9f5 	bl	801b352 <memchr>
 801af68:	2800      	cmp	r0, #0
 801af6a:	d006      	beq.n	801af7a <_svfiprintf_r+0x14e>
 801af6c:	2340      	movs	r3, #64	; 0x40
 801af6e:	1b80      	subs	r0, r0, r6
 801af70:	4083      	lsls	r3, r0
 801af72:	6822      	ldr	r2, [r4, #0]
 801af74:	3501      	adds	r5, #1
 801af76:	4313      	orrs	r3, r2
 801af78:	6023      	str	r3, [r4, #0]
 801af7a:	7829      	ldrb	r1, [r5, #0]
 801af7c:	2206      	movs	r2, #6
 801af7e:	4828      	ldr	r0, [pc, #160]	; (801b020 <_svfiprintf_r+0x1f4>)
 801af80:	1c6e      	adds	r6, r5, #1
 801af82:	7621      	strb	r1, [r4, #24]
 801af84:	f000 f9e5 	bl	801b352 <memchr>
 801af88:	2800      	cmp	r0, #0
 801af8a:	d03c      	beq.n	801b006 <_svfiprintf_r+0x1da>
 801af8c:	4b25      	ldr	r3, [pc, #148]	; (801b024 <_svfiprintf_r+0x1f8>)
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d125      	bne.n	801afde <_svfiprintf_r+0x1b2>
 801af92:	2207      	movs	r2, #7
 801af94:	9b07      	ldr	r3, [sp, #28]
 801af96:	3307      	adds	r3, #7
 801af98:	4393      	bics	r3, r2
 801af9a:	3308      	adds	r3, #8
 801af9c:	9307      	str	r3, [sp, #28]
 801af9e:	6963      	ldr	r3, [r4, #20]
 801afa0:	9a04      	ldr	r2, [sp, #16]
 801afa2:	189b      	adds	r3, r3, r2
 801afa4:	6163      	str	r3, [r4, #20]
 801afa6:	e764      	b.n	801ae72 <_svfiprintf_r+0x46>
 801afa8:	4343      	muls	r3, r0
 801afaa:	0035      	movs	r5, r6
 801afac:	2101      	movs	r1, #1
 801afae:	189b      	adds	r3, r3, r2
 801afb0:	e7a6      	b.n	801af00 <_svfiprintf_r+0xd4>
 801afb2:	2301      	movs	r3, #1
 801afb4:	425b      	negs	r3, r3
 801afb6:	e7d0      	b.n	801af5a <_svfiprintf_r+0x12e>
 801afb8:	2300      	movs	r3, #0
 801afba:	200a      	movs	r0, #10
 801afbc:	001a      	movs	r2, r3
 801afbe:	3501      	adds	r5, #1
 801afc0:	6063      	str	r3, [r4, #4]
 801afc2:	7829      	ldrb	r1, [r5, #0]
 801afc4:	1c6e      	adds	r6, r5, #1
 801afc6:	3930      	subs	r1, #48	; 0x30
 801afc8:	2909      	cmp	r1, #9
 801afca:	d903      	bls.n	801afd4 <_svfiprintf_r+0x1a8>
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d0c5      	beq.n	801af5c <_svfiprintf_r+0x130>
 801afd0:	9209      	str	r2, [sp, #36]	; 0x24
 801afd2:	e7c3      	b.n	801af5c <_svfiprintf_r+0x130>
 801afd4:	4342      	muls	r2, r0
 801afd6:	0035      	movs	r5, r6
 801afd8:	2301      	movs	r3, #1
 801afda:	1852      	adds	r2, r2, r1
 801afdc:	e7f1      	b.n	801afc2 <_svfiprintf_r+0x196>
 801afde:	aa07      	add	r2, sp, #28
 801afe0:	9200      	str	r2, [sp, #0]
 801afe2:	0021      	movs	r1, r4
 801afe4:	003a      	movs	r2, r7
 801afe6:	4b10      	ldr	r3, [pc, #64]	; (801b028 <_svfiprintf_r+0x1fc>)
 801afe8:	9803      	ldr	r0, [sp, #12]
 801afea:	e000      	b.n	801afee <_svfiprintf_r+0x1c2>
 801afec:	bf00      	nop
 801afee:	9004      	str	r0, [sp, #16]
 801aff0:	9b04      	ldr	r3, [sp, #16]
 801aff2:	3301      	adds	r3, #1
 801aff4:	d1d3      	bne.n	801af9e <_svfiprintf_r+0x172>
 801aff6:	89bb      	ldrh	r3, [r7, #12]
 801aff8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801affa:	065b      	lsls	r3, r3, #25
 801affc:	d400      	bmi.n	801b000 <_svfiprintf_r+0x1d4>
 801affe:	e72c      	b.n	801ae5a <_svfiprintf_r+0x2e>
 801b000:	2001      	movs	r0, #1
 801b002:	4240      	negs	r0, r0
 801b004:	e729      	b.n	801ae5a <_svfiprintf_r+0x2e>
 801b006:	aa07      	add	r2, sp, #28
 801b008:	9200      	str	r2, [sp, #0]
 801b00a:	0021      	movs	r1, r4
 801b00c:	003a      	movs	r2, r7
 801b00e:	4b06      	ldr	r3, [pc, #24]	; (801b028 <_svfiprintf_r+0x1fc>)
 801b010:	9803      	ldr	r0, [sp, #12]
 801b012:	f000 f87b 	bl	801b10c <_printf_i>
 801b016:	e7ea      	b.n	801afee <_svfiprintf_r+0x1c2>
 801b018:	0801cc47 	.word	0x0801cc47
 801b01c:	0801cc4d 	.word	0x0801cc4d
 801b020:	0801cc51 	.word	0x0801cc51
 801b024:	00000000 	.word	0x00000000
 801b028:	0801ad69 	.word	0x0801ad69

0801b02c <_printf_common>:
 801b02c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b02e:	0016      	movs	r6, r2
 801b030:	9301      	str	r3, [sp, #4]
 801b032:	688a      	ldr	r2, [r1, #8]
 801b034:	690b      	ldr	r3, [r1, #16]
 801b036:	000c      	movs	r4, r1
 801b038:	9000      	str	r0, [sp, #0]
 801b03a:	4293      	cmp	r3, r2
 801b03c:	da00      	bge.n	801b040 <_printf_common+0x14>
 801b03e:	0013      	movs	r3, r2
 801b040:	0022      	movs	r2, r4
 801b042:	6033      	str	r3, [r6, #0]
 801b044:	3243      	adds	r2, #67	; 0x43
 801b046:	7812      	ldrb	r2, [r2, #0]
 801b048:	2a00      	cmp	r2, #0
 801b04a:	d001      	beq.n	801b050 <_printf_common+0x24>
 801b04c:	3301      	adds	r3, #1
 801b04e:	6033      	str	r3, [r6, #0]
 801b050:	6823      	ldr	r3, [r4, #0]
 801b052:	069b      	lsls	r3, r3, #26
 801b054:	d502      	bpl.n	801b05c <_printf_common+0x30>
 801b056:	6833      	ldr	r3, [r6, #0]
 801b058:	3302      	adds	r3, #2
 801b05a:	6033      	str	r3, [r6, #0]
 801b05c:	6822      	ldr	r2, [r4, #0]
 801b05e:	2306      	movs	r3, #6
 801b060:	0015      	movs	r5, r2
 801b062:	401d      	ands	r5, r3
 801b064:	421a      	tst	r2, r3
 801b066:	d027      	beq.n	801b0b8 <_printf_common+0x8c>
 801b068:	0023      	movs	r3, r4
 801b06a:	3343      	adds	r3, #67	; 0x43
 801b06c:	781b      	ldrb	r3, [r3, #0]
 801b06e:	1e5a      	subs	r2, r3, #1
 801b070:	4193      	sbcs	r3, r2
 801b072:	6822      	ldr	r2, [r4, #0]
 801b074:	0692      	lsls	r2, r2, #26
 801b076:	d430      	bmi.n	801b0da <_printf_common+0xae>
 801b078:	0022      	movs	r2, r4
 801b07a:	9901      	ldr	r1, [sp, #4]
 801b07c:	9800      	ldr	r0, [sp, #0]
 801b07e:	9d08      	ldr	r5, [sp, #32]
 801b080:	3243      	adds	r2, #67	; 0x43
 801b082:	47a8      	blx	r5
 801b084:	3001      	adds	r0, #1
 801b086:	d025      	beq.n	801b0d4 <_printf_common+0xa8>
 801b088:	2206      	movs	r2, #6
 801b08a:	6823      	ldr	r3, [r4, #0]
 801b08c:	2500      	movs	r5, #0
 801b08e:	4013      	ands	r3, r2
 801b090:	2b04      	cmp	r3, #4
 801b092:	d105      	bne.n	801b0a0 <_printf_common+0x74>
 801b094:	6833      	ldr	r3, [r6, #0]
 801b096:	68e5      	ldr	r5, [r4, #12]
 801b098:	1aed      	subs	r5, r5, r3
 801b09a:	43eb      	mvns	r3, r5
 801b09c:	17db      	asrs	r3, r3, #31
 801b09e:	401d      	ands	r5, r3
 801b0a0:	68a3      	ldr	r3, [r4, #8]
 801b0a2:	6922      	ldr	r2, [r4, #16]
 801b0a4:	4293      	cmp	r3, r2
 801b0a6:	dd01      	ble.n	801b0ac <_printf_common+0x80>
 801b0a8:	1a9b      	subs	r3, r3, r2
 801b0aa:	18ed      	adds	r5, r5, r3
 801b0ac:	2600      	movs	r6, #0
 801b0ae:	42b5      	cmp	r5, r6
 801b0b0:	d120      	bne.n	801b0f4 <_printf_common+0xc8>
 801b0b2:	2000      	movs	r0, #0
 801b0b4:	e010      	b.n	801b0d8 <_printf_common+0xac>
 801b0b6:	3501      	adds	r5, #1
 801b0b8:	68e3      	ldr	r3, [r4, #12]
 801b0ba:	6832      	ldr	r2, [r6, #0]
 801b0bc:	1a9b      	subs	r3, r3, r2
 801b0be:	42ab      	cmp	r3, r5
 801b0c0:	ddd2      	ble.n	801b068 <_printf_common+0x3c>
 801b0c2:	0022      	movs	r2, r4
 801b0c4:	2301      	movs	r3, #1
 801b0c6:	9901      	ldr	r1, [sp, #4]
 801b0c8:	9800      	ldr	r0, [sp, #0]
 801b0ca:	9f08      	ldr	r7, [sp, #32]
 801b0cc:	3219      	adds	r2, #25
 801b0ce:	47b8      	blx	r7
 801b0d0:	3001      	adds	r0, #1
 801b0d2:	d1f0      	bne.n	801b0b6 <_printf_common+0x8a>
 801b0d4:	2001      	movs	r0, #1
 801b0d6:	4240      	negs	r0, r0
 801b0d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b0da:	2030      	movs	r0, #48	; 0x30
 801b0dc:	18e1      	adds	r1, r4, r3
 801b0de:	3143      	adds	r1, #67	; 0x43
 801b0e0:	7008      	strb	r0, [r1, #0]
 801b0e2:	0021      	movs	r1, r4
 801b0e4:	1c5a      	adds	r2, r3, #1
 801b0e6:	3145      	adds	r1, #69	; 0x45
 801b0e8:	7809      	ldrb	r1, [r1, #0]
 801b0ea:	18a2      	adds	r2, r4, r2
 801b0ec:	3243      	adds	r2, #67	; 0x43
 801b0ee:	3302      	adds	r3, #2
 801b0f0:	7011      	strb	r1, [r2, #0]
 801b0f2:	e7c1      	b.n	801b078 <_printf_common+0x4c>
 801b0f4:	0022      	movs	r2, r4
 801b0f6:	2301      	movs	r3, #1
 801b0f8:	9901      	ldr	r1, [sp, #4]
 801b0fa:	9800      	ldr	r0, [sp, #0]
 801b0fc:	9f08      	ldr	r7, [sp, #32]
 801b0fe:	321a      	adds	r2, #26
 801b100:	47b8      	blx	r7
 801b102:	3001      	adds	r0, #1
 801b104:	d0e6      	beq.n	801b0d4 <_printf_common+0xa8>
 801b106:	3601      	adds	r6, #1
 801b108:	e7d1      	b.n	801b0ae <_printf_common+0x82>
	...

0801b10c <_printf_i>:
 801b10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b10e:	b08b      	sub	sp, #44	; 0x2c
 801b110:	9206      	str	r2, [sp, #24]
 801b112:	000a      	movs	r2, r1
 801b114:	3243      	adds	r2, #67	; 0x43
 801b116:	9307      	str	r3, [sp, #28]
 801b118:	9005      	str	r0, [sp, #20]
 801b11a:	9204      	str	r2, [sp, #16]
 801b11c:	7e0a      	ldrb	r2, [r1, #24]
 801b11e:	000c      	movs	r4, r1
 801b120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b122:	2a78      	cmp	r2, #120	; 0x78
 801b124:	d809      	bhi.n	801b13a <_printf_i+0x2e>
 801b126:	2a62      	cmp	r2, #98	; 0x62
 801b128:	d80b      	bhi.n	801b142 <_printf_i+0x36>
 801b12a:	2a00      	cmp	r2, #0
 801b12c:	d100      	bne.n	801b130 <_printf_i+0x24>
 801b12e:	e0be      	b.n	801b2ae <_printf_i+0x1a2>
 801b130:	497c      	ldr	r1, [pc, #496]	; (801b324 <_printf_i+0x218>)
 801b132:	9103      	str	r1, [sp, #12]
 801b134:	2a58      	cmp	r2, #88	; 0x58
 801b136:	d100      	bne.n	801b13a <_printf_i+0x2e>
 801b138:	e093      	b.n	801b262 <_printf_i+0x156>
 801b13a:	0026      	movs	r6, r4
 801b13c:	3642      	adds	r6, #66	; 0x42
 801b13e:	7032      	strb	r2, [r6, #0]
 801b140:	e022      	b.n	801b188 <_printf_i+0x7c>
 801b142:	0010      	movs	r0, r2
 801b144:	3863      	subs	r0, #99	; 0x63
 801b146:	2815      	cmp	r0, #21
 801b148:	d8f7      	bhi.n	801b13a <_printf_i+0x2e>
 801b14a:	f7eb f847 	bl	80061dc <__gnu_thumb1_case_shi>
 801b14e:	0016      	.short	0x0016
 801b150:	fff6001f 	.word	0xfff6001f
 801b154:	fff6fff6 	.word	0xfff6fff6
 801b158:	001ffff6 	.word	0x001ffff6
 801b15c:	fff6fff6 	.word	0xfff6fff6
 801b160:	fff6fff6 	.word	0xfff6fff6
 801b164:	003600a3 	.word	0x003600a3
 801b168:	fff60083 	.word	0xfff60083
 801b16c:	00b4fff6 	.word	0x00b4fff6
 801b170:	0036fff6 	.word	0x0036fff6
 801b174:	fff6fff6 	.word	0xfff6fff6
 801b178:	0087      	.short	0x0087
 801b17a:	0026      	movs	r6, r4
 801b17c:	681a      	ldr	r2, [r3, #0]
 801b17e:	3642      	adds	r6, #66	; 0x42
 801b180:	1d11      	adds	r1, r2, #4
 801b182:	6019      	str	r1, [r3, #0]
 801b184:	6813      	ldr	r3, [r2, #0]
 801b186:	7033      	strb	r3, [r6, #0]
 801b188:	2301      	movs	r3, #1
 801b18a:	e0a2      	b.n	801b2d2 <_printf_i+0x1c6>
 801b18c:	6818      	ldr	r0, [r3, #0]
 801b18e:	6809      	ldr	r1, [r1, #0]
 801b190:	1d02      	adds	r2, r0, #4
 801b192:	060d      	lsls	r5, r1, #24
 801b194:	d50b      	bpl.n	801b1ae <_printf_i+0xa2>
 801b196:	6805      	ldr	r5, [r0, #0]
 801b198:	601a      	str	r2, [r3, #0]
 801b19a:	2d00      	cmp	r5, #0
 801b19c:	da03      	bge.n	801b1a6 <_printf_i+0x9a>
 801b19e:	232d      	movs	r3, #45	; 0x2d
 801b1a0:	9a04      	ldr	r2, [sp, #16]
 801b1a2:	426d      	negs	r5, r5
 801b1a4:	7013      	strb	r3, [r2, #0]
 801b1a6:	4b5f      	ldr	r3, [pc, #380]	; (801b324 <_printf_i+0x218>)
 801b1a8:	270a      	movs	r7, #10
 801b1aa:	9303      	str	r3, [sp, #12]
 801b1ac:	e01b      	b.n	801b1e6 <_printf_i+0xda>
 801b1ae:	6805      	ldr	r5, [r0, #0]
 801b1b0:	601a      	str	r2, [r3, #0]
 801b1b2:	0649      	lsls	r1, r1, #25
 801b1b4:	d5f1      	bpl.n	801b19a <_printf_i+0x8e>
 801b1b6:	b22d      	sxth	r5, r5
 801b1b8:	e7ef      	b.n	801b19a <_printf_i+0x8e>
 801b1ba:	680d      	ldr	r5, [r1, #0]
 801b1bc:	6819      	ldr	r1, [r3, #0]
 801b1be:	1d08      	adds	r0, r1, #4
 801b1c0:	6018      	str	r0, [r3, #0]
 801b1c2:	062e      	lsls	r6, r5, #24
 801b1c4:	d501      	bpl.n	801b1ca <_printf_i+0xbe>
 801b1c6:	680d      	ldr	r5, [r1, #0]
 801b1c8:	e003      	b.n	801b1d2 <_printf_i+0xc6>
 801b1ca:	066d      	lsls	r5, r5, #25
 801b1cc:	d5fb      	bpl.n	801b1c6 <_printf_i+0xba>
 801b1ce:	680d      	ldr	r5, [r1, #0]
 801b1d0:	b2ad      	uxth	r5, r5
 801b1d2:	4b54      	ldr	r3, [pc, #336]	; (801b324 <_printf_i+0x218>)
 801b1d4:	2708      	movs	r7, #8
 801b1d6:	9303      	str	r3, [sp, #12]
 801b1d8:	2a6f      	cmp	r2, #111	; 0x6f
 801b1da:	d000      	beq.n	801b1de <_printf_i+0xd2>
 801b1dc:	3702      	adds	r7, #2
 801b1de:	0023      	movs	r3, r4
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	3343      	adds	r3, #67	; 0x43
 801b1e4:	701a      	strb	r2, [r3, #0]
 801b1e6:	6863      	ldr	r3, [r4, #4]
 801b1e8:	60a3      	str	r3, [r4, #8]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	db03      	blt.n	801b1f6 <_printf_i+0xea>
 801b1ee:	2104      	movs	r1, #4
 801b1f0:	6822      	ldr	r2, [r4, #0]
 801b1f2:	438a      	bics	r2, r1
 801b1f4:	6022      	str	r2, [r4, #0]
 801b1f6:	2d00      	cmp	r5, #0
 801b1f8:	d102      	bne.n	801b200 <_printf_i+0xf4>
 801b1fa:	9e04      	ldr	r6, [sp, #16]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d00c      	beq.n	801b21a <_printf_i+0x10e>
 801b200:	9e04      	ldr	r6, [sp, #16]
 801b202:	0028      	movs	r0, r5
 801b204:	0039      	movs	r1, r7
 801b206:	f7eb f879 	bl	80062fc <__aeabi_uidivmod>
 801b20a:	9b03      	ldr	r3, [sp, #12]
 801b20c:	3e01      	subs	r6, #1
 801b20e:	5c5b      	ldrb	r3, [r3, r1]
 801b210:	7033      	strb	r3, [r6, #0]
 801b212:	002b      	movs	r3, r5
 801b214:	0005      	movs	r5, r0
 801b216:	429f      	cmp	r7, r3
 801b218:	d9f3      	bls.n	801b202 <_printf_i+0xf6>
 801b21a:	2f08      	cmp	r7, #8
 801b21c:	d109      	bne.n	801b232 <_printf_i+0x126>
 801b21e:	6823      	ldr	r3, [r4, #0]
 801b220:	07db      	lsls	r3, r3, #31
 801b222:	d506      	bpl.n	801b232 <_printf_i+0x126>
 801b224:	6862      	ldr	r2, [r4, #4]
 801b226:	6923      	ldr	r3, [r4, #16]
 801b228:	429a      	cmp	r2, r3
 801b22a:	dc02      	bgt.n	801b232 <_printf_i+0x126>
 801b22c:	2330      	movs	r3, #48	; 0x30
 801b22e:	3e01      	subs	r6, #1
 801b230:	7033      	strb	r3, [r6, #0]
 801b232:	9b04      	ldr	r3, [sp, #16]
 801b234:	1b9b      	subs	r3, r3, r6
 801b236:	6123      	str	r3, [r4, #16]
 801b238:	9b07      	ldr	r3, [sp, #28]
 801b23a:	0021      	movs	r1, r4
 801b23c:	9300      	str	r3, [sp, #0]
 801b23e:	9805      	ldr	r0, [sp, #20]
 801b240:	9b06      	ldr	r3, [sp, #24]
 801b242:	aa09      	add	r2, sp, #36	; 0x24
 801b244:	f7ff fef2 	bl	801b02c <_printf_common>
 801b248:	3001      	adds	r0, #1
 801b24a:	d147      	bne.n	801b2dc <_printf_i+0x1d0>
 801b24c:	2001      	movs	r0, #1
 801b24e:	4240      	negs	r0, r0
 801b250:	b00b      	add	sp, #44	; 0x2c
 801b252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b254:	2220      	movs	r2, #32
 801b256:	6809      	ldr	r1, [r1, #0]
 801b258:	430a      	orrs	r2, r1
 801b25a:	6022      	str	r2, [r4, #0]
 801b25c:	2278      	movs	r2, #120	; 0x78
 801b25e:	4932      	ldr	r1, [pc, #200]	; (801b328 <_printf_i+0x21c>)
 801b260:	9103      	str	r1, [sp, #12]
 801b262:	0021      	movs	r1, r4
 801b264:	3145      	adds	r1, #69	; 0x45
 801b266:	700a      	strb	r2, [r1, #0]
 801b268:	6819      	ldr	r1, [r3, #0]
 801b26a:	6822      	ldr	r2, [r4, #0]
 801b26c:	c920      	ldmia	r1!, {r5}
 801b26e:	0610      	lsls	r0, r2, #24
 801b270:	d402      	bmi.n	801b278 <_printf_i+0x16c>
 801b272:	0650      	lsls	r0, r2, #25
 801b274:	d500      	bpl.n	801b278 <_printf_i+0x16c>
 801b276:	b2ad      	uxth	r5, r5
 801b278:	6019      	str	r1, [r3, #0]
 801b27a:	07d3      	lsls	r3, r2, #31
 801b27c:	d502      	bpl.n	801b284 <_printf_i+0x178>
 801b27e:	2320      	movs	r3, #32
 801b280:	4313      	orrs	r3, r2
 801b282:	6023      	str	r3, [r4, #0]
 801b284:	2710      	movs	r7, #16
 801b286:	2d00      	cmp	r5, #0
 801b288:	d1a9      	bne.n	801b1de <_printf_i+0xd2>
 801b28a:	2220      	movs	r2, #32
 801b28c:	6823      	ldr	r3, [r4, #0]
 801b28e:	4393      	bics	r3, r2
 801b290:	6023      	str	r3, [r4, #0]
 801b292:	e7a4      	b.n	801b1de <_printf_i+0xd2>
 801b294:	681a      	ldr	r2, [r3, #0]
 801b296:	680d      	ldr	r5, [r1, #0]
 801b298:	1d10      	adds	r0, r2, #4
 801b29a:	6949      	ldr	r1, [r1, #20]
 801b29c:	6018      	str	r0, [r3, #0]
 801b29e:	6813      	ldr	r3, [r2, #0]
 801b2a0:	062e      	lsls	r6, r5, #24
 801b2a2:	d501      	bpl.n	801b2a8 <_printf_i+0x19c>
 801b2a4:	6019      	str	r1, [r3, #0]
 801b2a6:	e002      	b.n	801b2ae <_printf_i+0x1a2>
 801b2a8:	066d      	lsls	r5, r5, #25
 801b2aa:	d5fb      	bpl.n	801b2a4 <_printf_i+0x198>
 801b2ac:	8019      	strh	r1, [r3, #0]
 801b2ae:	2300      	movs	r3, #0
 801b2b0:	9e04      	ldr	r6, [sp, #16]
 801b2b2:	6123      	str	r3, [r4, #16]
 801b2b4:	e7c0      	b.n	801b238 <_printf_i+0x12c>
 801b2b6:	681a      	ldr	r2, [r3, #0]
 801b2b8:	1d11      	adds	r1, r2, #4
 801b2ba:	6019      	str	r1, [r3, #0]
 801b2bc:	6816      	ldr	r6, [r2, #0]
 801b2be:	2100      	movs	r1, #0
 801b2c0:	0030      	movs	r0, r6
 801b2c2:	6862      	ldr	r2, [r4, #4]
 801b2c4:	f000 f845 	bl	801b352 <memchr>
 801b2c8:	2800      	cmp	r0, #0
 801b2ca:	d001      	beq.n	801b2d0 <_printf_i+0x1c4>
 801b2cc:	1b80      	subs	r0, r0, r6
 801b2ce:	6060      	str	r0, [r4, #4]
 801b2d0:	6863      	ldr	r3, [r4, #4]
 801b2d2:	6123      	str	r3, [r4, #16]
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	9a04      	ldr	r2, [sp, #16]
 801b2d8:	7013      	strb	r3, [r2, #0]
 801b2da:	e7ad      	b.n	801b238 <_printf_i+0x12c>
 801b2dc:	0032      	movs	r2, r6
 801b2de:	6923      	ldr	r3, [r4, #16]
 801b2e0:	9906      	ldr	r1, [sp, #24]
 801b2e2:	9805      	ldr	r0, [sp, #20]
 801b2e4:	9d07      	ldr	r5, [sp, #28]
 801b2e6:	47a8      	blx	r5
 801b2e8:	3001      	adds	r0, #1
 801b2ea:	d0af      	beq.n	801b24c <_printf_i+0x140>
 801b2ec:	6823      	ldr	r3, [r4, #0]
 801b2ee:	079b      	lsls	r3, r3, #30
 801b2f0:	d415      	bmi.n	801b31e <_printf_i+0x212>
 801b2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2f4:	68e0      	ldr	r0, [r4, #12]
 801b2f6:	4298      	cmp	r0, r3
 801b2f8:	daaa      	bge.n	801b250 <_printf_i+0x144>
 801b2fa:	0018      	movs	r0, r3
 801b2fc:	e7a8      	b.n	801b250 <_printf_i+0x144>
 801b2fe:	0022      	movs	r2, r4
 801b300:	2301      	movs	r3, #1
 801b302:	9906      	ldr	r1, [sp, #24]
 801b304:	9805      	ldr	r0, [sp, #20]
 801b306:	9e07      	ldr	r6, [sp, #28]
 801b308:	3219      	adds	r2, #25
 801b30a:	47b0      	blx	r6
 801b30c:	3001      	adds	r0, #1
 801b30e:	d09d      	beq.n	801b24c <_printf_i+0x140>
 801b310:	3501      	adds	r5, #1
 801b312:	68e3      	ldr	r3, [r4, #12]
 801b314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b316:	1a9b      	subs	r3, r3, r2
 801b318:	42ab      	cmp	r3, r5
 801b31a:	dcf0      	bgt.n	801b2fe <_printf_i+0x1f2>
 801b31c:	e7e9      	b.n	801b2f2 <_printf_i+0x1e6>
 801b31e:	2500      	movs	r5, #0
 801b320:	e7f7      	b.n	801b312 <_printf_i+0x206>
 801b322:	46c0      	nop			; (mov r8, r8)
 801b324:	0801cc58 	.word	0x0801cc58
 801b328:	0801cc69 	.word	0x0801cc69

0801b32c <memmove>:
 801b32c:	b510      	push	{r4, lr}
 801b32e:	4288      	cmp	r0, r1
 801b330:	d902      	bls.n	801b338 <memmove+0xc>
 801b332:	188b      	adds	r3, r1, r2
 801b334:	4298      	cmp	r0, r3
 801b336:	d303      	bcc.n	801b340 <memmove+0x14>
 801b338:	2300      	movs	r3, #0
 801b33a:	e007      	b.n	801b34c <memmove+0x20>
 801b33c:	5c8b      	ldrb	r3, [r1, r2]
 801b33e:	5483      	strb	r3, [r0, r2]
 801b340:	3a01      	subs	r2, #1
 801b342:	d2fb      	bcs.n	801b33c <memmove+0x10>
 801b344:	bd10      	pop	{r4, pc}
 801b346:	5ccc      	ldrb	r4, [r1, r3]
 801b348:	54c4      	strb	r4, [r0, r3]
 801b34a:	3301      	adds	r3, #1
 801b34c:	429a      	cmp	r2, r3
 801b34e:	d1fa      	bne.n	801b346 <memmove+0x1a>
 801b350:	e7f8      	b.n	801b344 <memmove+0x18>

0801b352 <memchr>:
 801b352:	b2c9      	uxtb	r1, r1
 801b354:	1882      	adds	r2, r0, r2
 801b356:	4290      	cmp	r0, r2
 801b358:	d101      	bne.n	801b35e <memchr+0xc>
 801b35a:	2000      	movs	r0, #0
 801b35c:	4770      	bx	lr
 801b35e:	7803      	ldrb	r3, [r0, #0]
 801b360:	428b      	cmp	r3, r1
 801b362:	d0fb      	beq.n	801b35c <memchr+0xa>
 801b364:	3001      	adds	r0, #1
 801b366:	e7f6      	b.n	801b356 <memchr+0x4>

0801b368 <_realloc_r>:
 801b368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b36a:	0007      	movs	r7, r0
 801b36c:	000e      	movs	r6, r1
 801b36e:	0014      	movs	r4, r2
 801b370:	2900      	cmp	r1, #0
 801b372:	d105      	bne.n	801b380 <_realloc_r+0x18>
 801b374:	0011      	movs	r1, r2
 801b376:	f7ff fb09 	bl	801a98c <_malloc_r>
 801b37a:	0005      	movs	r5, r0
 801b37c:	0028      	movs	r0, r5
 801b37e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b380:	2a00      	cmp	r2, #0
 801b382:	d103      	bne.n	801b38c <_realloc_r+0x24>
 801b384:	f7ff fca6 	bl	801acd4 <_free_r>
 801b388:	0025      	movs	r5, r4
 801b38a:	e7f7      	b.n	801b37c <_realloc_r+0x14>
 801b38c:	f000 f81b 	bl	801b3c6 <_malloc_usable_size_r>
 801b390:	9001      	str	r0, [sp, #4]
 801b392:	4284      	cmp	r4, r0
 801b394:	d803      	bhi.n	801b39e <_realloc_r+0x36>
 801b396:	0035      	movs	r5, r6
 801b398:	0843      	lsrs	r3, r0, #1
 801b39a:	42a3      	cmp	r3, r4
 801b39c:	d3ee      	bcc.n	801b37c <_realloc_r+0x14>
 801b39e:	0021      	movs	r1, r4
 801b3a0:	0038      	movs	r0, r7
 801b3a2:	f7ff faf3 	bl	801a98c <_malloc_r>
 801b3a6:	1e05      	subs	r5, r0, #0
 801b3a8:	d0e8      	beq.n	801b37c <_realloc_r+0x14>
 801b3aa:	9b01      	ldr	r3, [sp, #4]
 801b3ac:	0022      	movs	r2, r4
 801b3ae:	429c      	cmp	r4, r3
 801b3b0:	d900      	bls.n	801b3b4 <_realloc_r+0x4c>
 801b3b2:	001a      	movs	r2, r3
 801b3b4:	0031      	movs	r1, r6
 801b3b6:	0028      	movs	r0, r5
 801b3b8:	f7ff fc82 	bl	801acc0 <memcpy>
 801b3bc:	0031      	movs	r1, r6
 801b3be:	0038      	movs	r0, r7
 801b3c0:	f7ff fc88 	bl	801acd4 <_free_r>
 801b3c4:	e7da      	b.n	801b37c <_realloc_r+0x14>

0801b3c6 <_malloc_usable_size_r>:
 801b3c6:	1f0b      	subs	r3, r1, #4
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	1f18      	subs	r0, r3, #4
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	da01      	bge.n	801b3d4 <_malloc_usable_size_r+0xe>
 801b3d0:	580b      	ldr	r3, [r1, r0]
 801b3d2:	18c0      	adds	r0, r0, r3
 801b3d4:	4770      	bx	lr
	...

0801b3d8 <_init>:
 801b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3da:	46c0      	nop			; (mov r8, r8)
 801b3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3de:	bc08      	pop	{r3}
 801b3e0:	469e      	mov	lr, r3
 801b3e2:	4770      	bx	lr

0801b3e4 <_fini>:
 801b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3e6:	46c0      	nop			; (mov r8, r8)
 801b3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3ea:	bc08      	pop	{r3}
 801b3ec:	469e      	mov	lr, r3
 801b3ee:	4770      	bx	lr

0801b3f0 <__FLASH_Program_Fast_veneer>:
 801b3f0:	b401      	push	{r0}
 801b3f2:	4802      	ldr	r0, [pc, #8]	; (801b3fc <__FLASH_Program_Fast_veneer+0xc>)
 801b3f4:	4684      	mov	ip, r0
 801b3f6:	bc01      	pop	{r0}
 801b3f8:	4760      	bx	ip
 801b3fa:	bf00      	nop
 801b3fc:	20000135 	.word	0x20000135

Disassembly of section .data:

20000000 <USBPD_Trace>:
20000000:	0800150f                                ....

20000004 <encoderPress>:
20000004:	00000004                                ....

20000008 <val>:
20000008:	000003e8                                ....

2000000c <voltage>:
2000000c:	0000014a                                J...

20000010 <voltageMax>:
20000010:	00000898                                ....

20000014 <currentMax>:
20000014:	00000bb8                                ....

20000018 <currentState>:
20000018:	00000001                                ....

2000001c <SYMBOLS>:
2000001c:	796d307e 705f5b33 4f017b7f 00670e37     ~0my3[_p.{.O7.g.

2000002c <SystemCoreClock>:
2000002c:	00f42400                                .$..

20000030 <uwTickPrio>:
20000030:	00000004                                ....

20000034 <uwTickFreq>:
20000034:	00000001                                ....

20000038 <uxCriticalNesting>:
20000038:	aaaaaaaa                                ....

2000003c <DPM_Settings>:
2000003c:	00000001 00000002 00000000              ............

20000048 <DPM_ID_Settings>:
20000048:	f0000003 00020483                       ........

20000050 <DPM_USER_Settings>:
20000050:	0000000c 00000000 00000000 00000000     ................
	...

200000c4 <USBPD_NbPDO>:
200000c4:	00000003                                ....

200000c8 <PORT0_PDO_ListSNK>:
200000c8:	00019096 0002d096 0603c096 00000000     ................
	...

200000e4 <_impure_data>:
200000e4:	00000000 200034b0 20003518 20003580     .....4. .5. .5. 
	...

20000130 <_impure_ptr>:
20000130:	200000e4                                ... 

20000134 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000134:	b580      	push	{r7, lr}
20000136:	b088      	sub	sp, #32
20000138:	af00      	add	r7, sp, #0
2000013a:	6078      	str	r0, [r7, #4]
2000013c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000013e:	231f      	movs	r3, #31
20000140:	18fb      	adds	r3, r7, r3
20000142:	2200      	movs	r2, #0
20000144:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000146:	687b      	ldr	r3, [r7, #4]
20000148:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000014a:	683b      	ldr	r3, [r7, #0]
2000014c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000014e:	4b1a      	ldr	r3, [pc, #104]	; (200001b8 <FLASH_Program_Fast+0x84>)
20000150:	695a      	ldr	r2, [r3, #20]
20000152:	4b19      	ldr	r3, [pc, #100]	; (200001b8 <FLASH_Program_Fast+0x84>)
20000154:	2180      	movs	r1, #128	; 0x80
20000156:	02c9      	lsls	r1, r1, #11
20000158:	430a      	orrs	r2, r1
2000015a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000015c:	f3ef 8310 	mrs	r3, PRIMASK
20000160:	60fb      	str	r3, [r7, #12]
  return(result);
20000162:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000164:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000166:	b672      	cpsid	i
}
20000168:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000016a:	e00f      	b.n	2000018c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000016c:	697a      	ldr	r2, [r7, #20]
2000016e:	69bb      	ldr	r3, [r7, #24]
20000170:	6812      	ldr	r2, [r2, #0]
20000172:	601a      	str	r2, [r3, #0]
    src += 4U;
20000174:	697b      	ldr	r3, [r7, #20]
20000176:	3304      	adds	r3, #4
20000178:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000017a:	69bb      	ldr	r3, [r7, #24]
2000017c:	3304      	adds	r3, #4
2000017e:	61bb      	str	r3, [r7, #24]
    index++;
20000180:	211f      	movs	r1, #31
20000182:	187b      	adds	r3, r7, r1
20000184:	781a      	ldrb	r2, [r3, #0]
20000186:	187b      	adds	r3, r7, r1
20000188:	3201      	adds	r2, #1
2000018a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000018c:	231f      	movs	r3, #31
2000018e:	18fb      	adds	r3, r7, r3
20000190:	781b      	ldrb	r3, [r3, #0]
20000192:	2b3f      	cmp	r3, #63	; 0x3f
20000194:	d9ea      	bls.n	2000016c <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
20000196:	46c0      	nop			; (mov r8, r8)
20000198:	4b07      	ldr	r3, [pc, #28]	; (200001b8 <FLASH_Program_Fast+0x84>)
2000019a:	691a      	ldr	r2, [r3, #16]
2000019c:	23c0      	movs	r3, #192	; 0xc0
2000019e:	029b      	lsls	r3, r3, #10
200001a0:	4013      	ands	r3, r2
200001a2:	d1f9      	bne.n	20000198 <FLASH_Program_Fast+0x64>
200001a4:	693b      	ldr	r3, [r7, #16]
200001a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200001a8:	68bb      	ldr	r3, [r7, #8]
200001aa:	f383 8810 	msr	PRIMASK, r3
}
200001ae:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200001b0:	46c0      	nop			; (mov r8, r8)
200001b2:	46bd      	mov	sp, r7
200001b4:	b008      	add	sp, #32
200001b6:	bd80      	pop	{r7, pc}
200001b8:	40022000 	.word	0x40022000
