
STM32G0_USBPD_Sink_1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023eb8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a40  08023f78  08023f78  00033f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080259b8  080259b8  000402dc  2**0
                  CONTENTS
  4 .ARM          00000008  080259b8  080259b8  000359b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080259c0  080259c0  000402dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080259c0  080259c0  000359c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080259c4  080259c4  000359c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  080259c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00004ea4  200002dc  08025ca4  000402dc  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20005180  08025ca4  00045180  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000402dc  2**0
                  CONTENTS, READONLY
 12 .comment      000041e7  00000000  00000000  0004030a  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  000444f1  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  00044830  2**2
                  CONTENTS, READONLY
 15 .debug_info   00042529  00000000  00000000  00044854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a6c2  00000000  00000000  00086d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003860  00000000  00000000  00091440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002c08  00000000  00000000  00094ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f67f  00000000  00000000  000978a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000448c8  00000000  00000000  000c6f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f62d4  00000000  00000000  0010b7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000de44  00000000  00000000  00201ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  0020f908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002dc 	.word	0x200002dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023f4c 	.word	0x08023f4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e0 	.word	0x200002e0
 8000104:	08023f4c 	.word	0x08023f4c

08000108 <USBPD_CAD_Init>:
 8000108:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	0015      	movs	r5, r2
 800010e:	001e      	movs	r6, r3
 8000110:	2400      	movs	r4, #0
 8000112:	4668      	mov	r0, sp
 8000114:	7a00      	ldrb	r0, [r0, #8]
 8000116:	2803      	cmp	r0, #3
 8000118:	d301      	bcc.n	800011e <USBPD_CAD_Init+0x16>
 800011a:	2401      	movs	r4, #1
 800011c:	e01f      	b.n	800015e <USBPD_CAD_Init+0x56>
 800011e:	9100      	str	r1, [sp, #0]
 8000120:	2900      	cmp	r1, #0
 8000122:	d101      	bne.n	8000128 <USBPD_CAD_Init+0x20>
 8000124:	2402      	movs	r4, #2
 8000126:	e01a      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000128:	200c      	movs	r0, #12
 800012a:	f023 f9bd 	bl	80234a8 <malloc>
 800012e:	0007      	movs	r7, r0
 8000130:	d101      	bne.n	8000136 <USBPD_CAD_Init+0x2e>
 8000132:	2403      	movs	r4, #3
 8000134:	e013      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000136:	210c      	movs	r1, #12
 8000138:	f023 fb77 	bl	802382a <__aeabi_memclr>
 800013c:	603e      	str	r6, [r7, #0]
 800013e:	723c      	strb	r4, [r7, #8]
 8000140:	9800      	ldr	r0, [sp, #0]
 8000142:	6078      	str	r0, [r7, #4]
 8000144:	484a      	ldr	r0, [pc, #296]	; (8000270 <.text_6>)
 8000146:	4669      	mov	r1, sp
 8000148:	7a09      	ldrb	r1, [r1, #8]
 800014a:	0089      	lsls	r1, r1, #2
 800014c:	5047      	str	r7, [r0, r1]
 800014e:	9800      	ldr	r0, [sp, #0]
 8000150:	6843      	ldr	r3, [r0, #4]
 8000152:	0032      	movs	r2, r6
 8000154:	0029      	movs	r1, r5
 8000156:	4668      	mov	r0, sp
 8000158:	7a00      	ldrb	r0, [r0, #8]
 800015a:	f012 fe77 	bl	8012e4c <CAD_Init>
 800015e:	0020      	movs	r0, r4
 8000160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000162 <USBPD_CAD_PortEnable>:
 8000162:	2803      	cmp	r0, #3
 8000164:	d203      	bcs.n	800016e <USBPD_CAD_PortEnable+0xc>
 8000166:	4a42      	ldr	r2, [pc, #264]	; (8000270 <.text_6>)
 8000168:	0080      	lsls	r0, r0, #2
 800016a:	5810      	ldr	r0, [r2, r0]
 800016c:	7201      	strb	r1, [r0, #8]
 800016e:	4770      	bx	lr

08000170 <USBPD_CAD_Process>:
 8000170:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000172:	2400      	movs	r4, #0
 8000174:	4669      	mov	r1, sp
 8000176:	700c      	strb	r4, [r1, #0]
 8000178:	9401      	str	r4, [sp, #4]
 800017a:	2500      	movs	r5, #0
 800017c:	43ed      	mvns	r5, r5
 800017e:	4f3d      	ldr	r7, [pc, #244]	; (8000274 <.text_7>)
 8000180:	483b      	ldr	r0, [pc, #236]	; (8000270 <.text_6>)
 8000182:	00a1      	lsls	r1, r4, #2
 8000184:	1846      	adds	r6, r0, r1
 8000186:	6830      	ldr	r0, [r6, #0]
 8000188:	2800      	cmp	r0, #0
 800018a:	d06c      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800018c:	7a00      	ldrb	r0, [r0, #8]
 800018e:	2801      	cmp	r0, #1
 8000190:	d169      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 8000192:	aa01      	add	r2, sp, #4
 8000194:	4669      	mov	r1, sp
 8000196:	b2e0      	uxtb	r0, r4
 8000198:	f013 f800 	bl	801319c <CAD_StateMachine>
 800019c:	42a8      	cmp	r0, r5
 800019e:	d800      	bhi.n	80001a2 <USBPD_CAD_Process+0x32>
 80001a0:	0005      	movs	r5, r0
 80001a2:	4668      	mov	r0, sp
 80001a4:	7800      	ldrb	r0, [r0, #0]
 80001a6:	2801      	cmp	r0, #1
 80001a8:	d004      	beq.n	80001b4 <USBPD_CAD_Process+0x44>
 80001aa:	2802      	cmp	r0, #2
 80001ac:	d012      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001ae:	2804      	cmp	r0, #4
 80001b0:	d010      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001b2:	e040      	b.n	8000236 <USBPD_CAD_Process+0xc6>
 80001b4:	6830      	ldr	r0, [r6, #0]
 80001b6:	6801      	ldr	r1, [r0, #0]
 80001b8:	680a      	ldr	r2, [r1, #0]
 80001ba:	4b2f      	ldr	r3, [pc, #188]	; (8000278 <.text_8>)
 80001bc:	4013      	ands	r3, r2
 80001be:	600b      	str	r3, [r1, #0]
 80001c0:	6801      	ldr	r1, [r0, #0]
 80001c2:	680a      	ldr	r2, [r1, #0]
 80001c4:	23c0      	movs	r3, #192	; 0xc0
 80001c6:	439a      	bics	r2, r3
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	6800      	ldr	r0, [r0, #0]
 80001cc:	6801      	ldr	r1, [r0, #0]
 80001ce:	4039      	ands	r1, r7
 80001d0:	6001      	str	r1, [r0, #0]
 80001d2:	e034      	b.n	800023e <USBPD_CAD_Process+0xce>
 80001d4:	6830      	ldr	r0, [r6, #0]
 80001d6:	9901      	ldr	r1, [sp, #4]
 80001d8:	2901      	cmp	r1, #1
 80001da:	6801      	ldr	r1, [r0, #0]
 80001dc:	680a      	ldr	r2, [r1, #0]
 80001de:	d103      	bne.n	80001e8 <USBPD_CAD_Process+0x78>
 80001e0:	403a      	ands	r2, r7
 80001e2:	2380      	movs	r3, #128	; 0x80
 80001e4:	01db      	lsls	r3, r3, #7
 80001e6:	e002      	b.n	80001ee <USBPD_CAD_Process+0x7e>
 80001e8:	403a      	ands	r2, r7
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	019b      	lsls	r3, r3, #6
 80001ee:	4313      	orrs	r3, r2
 80001f0:	600b      	str	r3, [r1, #0]
 80001f2:	6801      	ldr	r1, [r0, #0]
 80001f4:	680b      	ldr	r3, [r1, #0]
 80001f6:	22c0      	movs	r2, #192	; 0xc0
 80001f8:	4393      	bics	r3, r2
 80001fa:	469c      	mov	ip, r3
 80001fc:	9a01      	ldr	r2, [sp, #4]
 80001fe:	0193      	lsls	r3, r2, #6
 8000200:	22c0      	movs	r2, #192	; 0xc0
 8000202:	401a      	ands	r2, r3
 8000204:	4663      	mov	r3, ip
 8000206:	431a      	orrs	r2, r3
 8000208:	600a      	str	r2, [r1, #0]
 800020a:	6801      	ldr	r1, [r0, #0]
 800020c:	680a      	ldr	r2, [r1, #0]
 800020e:	2380      	movs	r3, #128	; 0x80
 8000210:	015b      	lsls	r3, r3, #5
 8000212:	4313      	orrs	r3, r2
 8000214:	600b      	str	r3, [r1, #0]
 8000216:	6800      	ldr	r0, [r0, #0]
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	074a      	lsls	r2, r1, #29
 800021c:	0fd2      	lsrs	r2, r2, #31
 800021e:	d103      	bne.n	8000228 <USBPD_CAD_Process+0xb8>
 8000220:	2208      	movs	r2, #8
 8000222:	4391      	bics	r1, r2
 8000224:	6001      	str	r1, [r0, #0]
 8000226:	e002      	b.n	800022e <USBPD_CAD_Process+0xbe>
 8000228:	2208      	movs	r2, #8
 800022a:	430a      	orrs	r2, r1
 800022c:	6002      	str	r2, [r0, #0]
 800022e:	2168      	movs	r1, #104	; 0x68
 8000230:	b2e0      	uxtb	r0, r4
 8000232:	f000 f925 	bl	8000480 <USBPD_PE_Notification>
 8000236:	4668      	mov	r0, sp
 8000238:	7800      	ldrb	r0, [r0, #0]
 800023a:	2800      	cmp	r0, #0
 800023c:	d013      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800023e:	9a01      	ldr	r2, [sp, #4]
 8000240:	4668      	mov	r0, sp
 8000242:	7801      	ldrb	r1, [r0, #0]
 8000244:	b2e0      	uxtb	r0, r4
 8000246:	6833      	ldr	r3, [r6, #0]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4798      	blx	r3
 800024e:	4668      	mov	r0, sp
 8000250:	7800      	ldrb	r0, [r0, #0]
 8000252:	2801      	cmp	r0, #1
 8000254:	d003      	beq.n	800025e <USBPD_CAD_Process+0xee>
 8000256:	4668      	mov	r0, sp
 8000258:	7800      	ldrb	r0, [r0, #0]
 800025a:	2803      	cmp	r0, #3
 800025c:	d103      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 800025e:	2169      	movs	r1, #105	; 0x69
 8000260:	b2e0      	uxtb	r0, r4
 8000262:	f000 f90d 	bl	8000480 <USBPD_PE_Notification>
 8000266:	1c64      	adds	r4, r4, #1
 8000268:	2c03      	cmp	r4, #3
 800026a:	d389      	bcc.n	8000180 <USBPD_CAD_Process+0x10>
 800026c:	0028      	movs	r0, r5
 800026e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000270 <.text_6>:
 8000270:	200002f8 	.word	0x200002f8

08000274 <.text_7>:
 8000274:	ffff9fff 	.word	0xffff9fff

08000278 <.text_8>:
 8000278:	ffffefff 	.word	0xffffefff

0800027c <USBPD_CAD_AssertRd>:
 800027c:	b510      	push	{r4, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	f014 fc58 	bl	8014b34 <USBPDM1_DeAssertRp>
 8000284:	0020      	movs	r0, r4
 8000286:	f014 fc5f 	bl	8014b48 <USBPDM1_AssertRd>
 800028a:	bd10      	pop	{r4, pc}

0800028c <USBPD_CAD_AssertRp>:
 800028c:	b510      	push	{r4, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	f014 fd00 	bl	8014c94 <USBPDM1_DeAssertRd>
 8000294:	0020      	movs	r0, r4
 8000296:	f014 fb95 	bl	80149c4 <USBPDM1_AssertRp>
 800029a:	bd10      	pop	{r4, pc}

0800029c <USBPD_CAD_EnterErrorRecovery>:
 800029c:	b580      	push	{r7, lr}
 800029e:	f012 feb7 	bl	8013010 <CAD_Enter_ErrorRecovery>
 80002a2:	bd01      	pop	{r0, pc}

080002a4 <USBPD_CAD_SRC_SetRpResistor>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	2404      	movs	r4, #4
 80002a8:	f012 ff1c 	bl	80130e4 <CAD_Set_ResistorRp>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d100      	bne.n	80002b2 <USBPD_CAD_SRC_SetRpResistor+0xe>
 80002b0:	2400      	movs	r4, #0
 80002b2:	0020      	movs	r0, r4
 80002b4:	bd10      	pop	{r4, pc}

080002b6 <USBPD_CAD_SetRpResistor>:
 80002b6:	b580      	push	{r7, lr}
 80002b8:	f7ff fff4 	bl	80002a4 <USBPD_CAD_SRC_SetRpResistor>
 80002bc:	bd02      	pop	{r1, pc}

080002be <USBPD_CAD_GetMemoryConsumption>:
 80002be:	2024      	movs	r0, #36	; 0x24
 80002c0:	4770      	bx	lr
	...

080002c4 <USBPD_PE_Init>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	000e      	movs	r6, r1
 80002c8:	0017      	movs	r7, r2
 80002ca:	001c      	movs	r4, r3
 80002cc:	6871      	ldr	r1, [r6, #4]
 80002ce:	070a      	lsls	r2, r1, #28
 80002d0:	0fd2      	lsrs	r2, r2, #31
 80002d2:	d002      	beq.n	80002da <USBPD_PE_Init+0x16>
 80002d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d002      	beq.n	80002e0 <USBPD_PE_Init+0x1c>
 80002da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80002dc:	2900      	cmp	r1, #0
 80002de:	d101      	bne.n	80002e4 <USBPD_PE_Init+0x20>
 80002e0:	241b      	movs	r4, #27
 80002e2:	e04a      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002e4:	4669      	mov	r1, sp
 80002e6:	7008      	strb	r0, [r1, #0]
 80002e8:	4668      	mov	r0, sp
 80002ea:	7800      	ldrb	r0, [r0, #0]
 80002ec:	2803      	cmp	r0, #3
 80002ee:	d301      	bcc.n	80002f4 <USBPD_PE_Init+0x30>
 80002f0:	2417      	movs	r4, #23
 80002f2:	e042      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002f4:	2096      	movs	r0, #150	; 0x96
 80002f6:	00c0      	lsls	r0, r0, #3
 80002f8:	f023 f8d6 	bl	80234a8 <malloc>
 80002fc:	0005      	movs	r5, r0
 80002fe:	d101      	bne.n	8000304 <USBPD_PE_Init+0x40>
 8000300:	2416      	movs	r4, #22
 8000302:	e03a      	b.n	800037a <USBPD_PE_Init+0xb6>
 8000304:	2196      	movs	r1, #150	; 0x96
 8000306:	00c9      	lsls	r1, r1, #3
 8000308:	f023 fa8f 	bl	802382a <__aeabi_memclr>
 800030c:	487a      	ldr	r0, [pc, #488]	; (80004f8 <.text_16>)
 800030e:	4669      	mov	r1, sp
 8000310:	7809      	ldrb	r1, [r1, #0]
 8000312:	0089      	lsls	r1, r1, #2
 8000314:	5045      	str	r5, [r0, r1]
 8000316:	602e      	str	r6, [r5, #0]
 8000318:	606f      	str	r7, [r5, #4]
 800031a:	4668      	mov	r0, sp
 800031c:	7800      	ldrb	r0, [r0, #0]
 800031e:	7428      	strb	r0, [r5, #16]
 8000320:	60ac      	str	r4, [r5, #8]
 8000322:	4876      	ldr	r0, [pc, #472]	; (80004fc <.text_17>)
 8000324:	182b      	adds	r3, r5, r0
 8000326:	4876      	ldr	r0, [pc, #472]	; (8000500 <.text_18>)
 8000328:	182a      	adds	r2, r5, r0
 800032a:	0031      	movs	r1, r6
 800032c:	4668      	mov	r0, sp
 800032e:	7800      	ldrb	r0, [r0, #0]
 8000330:	f005 f98c 	bl	800564c <USBPD_PRL_Init>
 8000334:	0004      	movs	r4, r0
 8000336:	d120      	bne.n	800037a <USBPD_PE_Init+0xb6>
 8000338:	6868      	ldr	r0, [r5, #4]
 800033a:	6801      	ldr	r1, [r0, #0]
 800033c:	2703      	movs	r7, #3
 800033e:	682a      	ldr	r2, [r5, #0]
 8000340:	6852      	ldr	r2, [r2, #4]
 8000342:	0753      	lsls	r3, r2, #29
 8000344:	0fdb      	lsrs	r3, r3, #31
 8000346:	d006      	beq.n	8000356 <USBPD_PE_Init+0x92>
 8000348:	2208      	movs	r2, #8
 800034a:	430a      	orrs	r2, r1
 800034c:	6002      	str	r2, [r0, #0]
 800034e:	6873      	ldr	r3, [r6, #4]
 8000350:	403b      	ands	r3, r7
 8000352:	2201      	movs	r2, #1
 8000354:	e005      	b.n	8000362 <USBPD_PE_Init+0x9e>
 8000356:	2208      	movs	r2, #8
 8000358:	4391      	bics	r1, r2
 800035a:	6001      	str	r1, [r0, #0]
 800035c:	6873      	ldr	r3, [r6, #4]
 800035e:	403b      	ands	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	4611      	mov	r1, r2
 8000364:	4668      	mov	r0, sp
 8000366:	7800      	ldrb	r0, [r0, #0]
 8000368:	f005 f9ab 	bl	80056c2 <USBPD_PRL_SetHeader>
 800036c:	6870      	ldr	r0, [r6, #4]
 800036e:	4007      	ands	r7, r0
 8000370:	0039      	movs	r1, r7
 8000372:	4668      	mov	r0, sp
 8000374:	7800      	ldrb	r0, [r0, #0]
 8000376:	f005 f9e2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 800037a:	0020      	movs	r0, r4
 800037c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800037e <USBPD_PE_TimerCounter>:
 800037e:	495e      	ldr	r1, [pc, #376]	; (80004f8 <.text_16>)
 8000380:	0080      	lsls	r0, r0, #2
 8000382:	5808      	ldr	r0, [r1, r0]
 8000384:	49b4      	ldr	r1, [pc, #720]	; (8000658 <.text_20>)
 8000386:	084a      	lsrs	r2, r1, #1
 8000388:	8bc3      	ldrh	r3, [r0, #30]
 800038a:	4213      	tst	r3, r2
 800038c:	d002      	beq.n	8000394 <USBPD_PE_TimerCounter+0x16>
 800038e:	8bc3      	ldrh	r3, [r0, #30]
 8000390:	185b      	adds	r3, r3, r1
 8000392:	83c3      	strh	r3, [r0, #30]
 8000394:	8c03      	ldrh	r3, [r0, #32]
 8000396:	4213      	tst	r3, r2
 8000398:	d002      	beq.n	80003a0 <USBPD_PE_TimerCounter+0x22>
 800039a:	8c03      	ldrh	r3, [r0, #32]
 800039c:	185b      	adds	r3, r3, r1
 800039e:	8403      	strh	r3, [r0, #32]
 80003a0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a2:	4213      	tst	r3, r2
 80003a4:	d002      	beq.n	80003ac <USBPD_PE_TimerCounter+0x2e>
 80003a6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a8:	185b      	adds	r3, r3, r1
 80003aa:	84c3      	strh	r3, [r0, #38]	; 0x26
 80003ac:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003ae:	4213      	tst	r3, r2
 80003b0:	d002      	beq.n	80003b8 <USBPD_PE_TimerCounter+0x3a>
 80003b2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003b4:	185b      	adds	r3, r3, r1
 80003b6:	8443      	strh	r3, [r0, #34]	; 0x22
 80003b8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80003ba:	4213      	tst	r3, r2
 80003bc:	d002      	beq.n	80003c4 <USBPD_PE_TimerCounter+0x46>
 80003be:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80003c0:	1851      	adds	r1, r2, r1
 80003c2:	8481      	strh	r1, [r0, #36]	; 0x24
 80003c4:	4770      	bx	lr

080003c6 <USBPD_PE_TimerCounteUpdate>:
 80003c6:	b570      	push	{r4, r5, r6, lr}
 80003c8:	000e      	movs	r6, r1
 80003ca:	494b      	ldr	r1, [pc, #300]	; (80004f8 <.text_16>)
 80003cc:	0080      	lsls	r0, r0, #2
 80003ce:	580c      	ldr	r4, [r1, r0]
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0209      	lsls	r1, r1, #8
 80003d4:	428e      	cmp	r6, r1
 80003d6:	da28      	bge.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 80003d8:	1e4d      	subs	r5, r1, #1
 80003da:	8be0      	ldrh	r0, [r4, #30]
 80003dc:	4228      	tst	r0, r5
 80003de:	d004      	beq.n	80003ea <USBPD_PE_TimerCounteUpdate+0x24>
 80003e0:	0031      	movs	r1, r6
 80003e2:	8be0      	ldrh	r0, [r4, #30]
 80003e4:	f000 ffcb 	bl	800137e <PE_UpdateTimer>
 80003e8:	83e0      	strh	r0, [r4, #30]
 80003ea:	8c20      	ldrh	r0, [r4, #32]
 80003ec:	4228      	tst	r0, r5
 80003ee:	d004      	beq.n	80003fa <USBPD_PE_TimerCounteUpdate+0x34>
 80003f0:	0031      	movs	r1, r6
 80003f2:	8c20      	ldrh	r0, [r4, #32]
 80003f4:	f000 ffc3 	bl	800137e <PE_UpdateTimer>
 80003f8:	8420      	strh	r0, [r4, #32]
 80003fa:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80003fc:	4228      	tst	r0, r5
 80003fe:	d004      	beq.n	800040a <USBPD_PE_TimerCounteUpdate+0x44>
 8000400:	0031      	movs	r1, r6
 8000402:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8000404:	f000 ffbb 	bl	800137e <PE_UpdateTimer>
 8000408:	84e0      	strh	r0, [r4, #38]	; 0x26
 800040a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800040c:	4228      	tst	r0, r5
 800040e:	d004      	beq.n	800041a <USBPD_PE_TimerCounteUpdate+0x54>
 8000410:	0031      	movs	r1, r6
 8000412:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8000414:	f000 ffb3 	bl	800137e <PE_UpdateTimer>
 8000418:	8460      	strh	r0, [r4, #34]	; 0x22
 800041a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800041c:	4228      	tst	r0, r5
 800041e:	d004      	beq.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 8000420:	0031      	movs	r1, r6
 8000422:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8000424:	f000 ffab 	bl	800137e <PE_UpdateTimer>
 8000428:	84a0      	strh	r0, [r4, #36]	; 0x24
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <USBPD_PE_IsCableConnected>:
 800042c:	b510      	push	{r4, lr}
 800042e:	4a32      	ldr	r2, [pc, #200]	; (80004f8 <.text_16>)
 8000430:	0080      	lsls	r0, r0, #2
 8000432:	5810      	ldr	r0, [r2, r0]
 8000434:	6842      	ldr	r2, [r0, #4]
 8000436:	6813      	ldr	r3, [r2, #0]
 8000438:	4cb2      	ldr	r4, [pc, #712]	; (8000704 <.text_22>)
 800043a:	401c      	ands	r4, r3
 800043c:	0309      	lsls	r1, r1, #12
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	015b      	lsls	r3, r3, #5
 8000442:	4019      	ands	r1, r3
 8000444:	4321      	orrs	r1, r4
 8000446:	6011      	str	r1, [r2, #0]
 8000448:	2148      	movs	r1, #72	; 0x48
 800044a:	7441      	strb	r1, [r0, #17]
 800044c:	bd10      	pop	{r4, pc}

0800044e <USBPD_PE_StateMachine_Reset>:
 800044e:	2148      	movs	r1, #72	; 0x48
 8000450:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <.text_16>)
 8000452:	0080      	lsls	r0, r0, #2
 8000454:	5810      	ldr	r0, [r2, r0]
 8000456:	7441      	strb	r1, [r0, #17]
 8000458:	4770      	bx	lr

0800045a <USBPD_PE_StateMachine_Stop>:
 800045a:	b580      	push	{r7, lr}
 800045c:	f005 fc34 	bl	8005cc8 <USBPD_PRL_Stop>
 8000460:	bd01      	pop	{r0, pc}

08000462 <USBPD_PE_StateMachine_DRP>:
 8000462:	b580      	push	{r7, lr}
 8000464:	4924      	ldr	r1, [pc, #144]	; (80004f8 <.text_16>)
 8000466:	0082      	lsls	r2, r0, #2
 8000468:	5889      	ldr	r1, [r1, r2]
 800046a:	6849      	ldr	r1, [r1, #4]
 800046c:	6809      	ldr	r1, [r1, #0]
 800046e:	074a      	lsls	r2, r1, #29
 8000470:	0fd2      	lsrs	r2, r2, #31
 8000472:	d002      	beq.n	800047a <USBPD_PE_StateMachine_DRP+0x18>
 8000474:	f002 fb8a 	bl	8002b8c <USBPD_PE_StateMachine_SRC>
 8000478:	bd02      	pop	{r1, pc}
 800047a:	f001 fcd5 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 800047e:	bd02      	pop	{r1, pc}

08000480 <USBPD_PE_Notification>:
 8000480:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000482:	0004      	movs	r4, r0
 8000484:	2803      	cmp	r0, #3
 8000486:	d211      	bcs.n	80004ac <USBPD_PE_Notification+0x2c>
 8000488:	000d      	movs	r5, r1
 800048a:	2000      	movs	r0, #0
 800048c:	9000      	str	r0, [sp, #0]
 800048e:	2300      	movs	r3, #0
 8000490:	002a      	movs	r2, r5
 8000492:	0021      	movs	r1, r4
 8000494:	2009      	movs	r0, #9
 8000496:	4eb2      	ldr	r6, [pc, #712]	; (8000760 <.text_24>)
 8000498:	6836      	ldr	r6, [r6, #0]
 800049a:	47b0      	blx	r6
 800049c:	0029      	movs	r1, r5
 800049e:	0020      	movs	r0, r4
 80004a0:	4ab0      	ldr	r2, [pc, #704]	; (8000764 <.text_25>)
 80004a2:	00a3      	lsls	r3, r4, #2
 80004a4:	58d2      	ldr	r2, [r2, r3]
 80004a6:	6892      	ldr	r2, [r2, #8]
 80004a8:	68d2      	ldr	r2, [r2, #12]
 80004aa:	4790      	blx	r2
 80004ac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080004ae <USBPD_PE_InitVDM_Callback>:
 80004ae:	4aad      	ldr	r2, [pc, #692]	; (8000764 <.text_25>)
 80004b0:	0080      	lsls	r0, r0, #2
 80004b2:	5810      	ldr	r0, [r2, r0]
 80004b4:	60c1      	str	r1, [r0, #12]
 80004b6:	4770      	bx	lr

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	49aa      	ldr	r1, [pc, #680]	; (8000764 <.text_25>)
 80004bc:	0082      	lsls	r2, r0, #2
 80004be:	5889      	ldr	r1, [r1, r2]
 80004c0:	220f      	movs	r2, #15
 80004c2:	2332      	movs	r3, #50	; 0x32
 80004c4:	54ca      	strb	r2, [r1, r3]
 80004c6:	6889      	ldr	r1, [r1, #8]
 80004c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004ca:	4788      	blx	r1
 80004cc:	2000      	movs	r0, #0
 80004ce:	bd02      	pop	{r1, pc}

080004d0 <USBPD_PE_Request_CableReset>:
 80004d0:	b580      	push	{r7, lr}
 80004d2:	4909      	ldr	r1, [pc, #36]	; (80004f8 <.text_16>)
 80004d4:	0082      	lsls	r2, r0, #2
 80004d6:	5889      	ldr	r1, [r1, r2]
 80004d8:	684a      	ldr	r2, [r1, #4]
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	4ba2      	ldr	r3, [pc, #648]	; (8000768 <.text_26>)
 80004de:	4013      	ands	r3, r2
 80004e0:	4aa2      	ldr	r2, [pc, #648]	; (800076c <.text_27>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d105      	bne.n	80004f2 <USBPD_PE_Request_CableReset+0x22>
 80004e6:	2299      	movs	r2, #153	; 0x99
 80004e8:	2332      	movs	r3, #50	; 0x32
 80004ea:	54ca      	strb	r2, [r1, r3]
 80004ec:	6889      	ldr	r1, [r1, #8]
 80004ee:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004f0:	4788      	blx	r1
 80004f2:	2010      	movs	r0, #16
 80004f4:	bd02      	pop	{r1, pc}
	...

080004f8 <.text_16>:
 80004f8:	20000304 	.word	0x20000304

080004fc <.text_17>:
 80004fc:	0000048e 	.word	0x0000048e

08000500 <.text_18>:
 8000500:	00000281 	.word	0x00000281

08000504 <USBPD_PE_Request_CtrlMessage>:
 8000504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	4896      	ldr	r0, [pc, #600]	; (8000764 <.text_25>)
 800050a:	a916      	add	r1, sp, #88	; 0x58
 800050c:	7809      	ldrb	r1, [r1, #0]
 800050e:	0089      	lsls	r1, r1, #2
 8000510:	5840      	ldr	r0, [r0, r1]
 8000512:	9001      	str	r0, [sp, #4]
 8000514:	2400      	movs	r4, #0
 8000516:	a802      	add	r0, sp, #8
 8000518:	4995      	ldr	r1, [pc, #596]	; (8000770 <.text_28>)
 800051a:	224c      	movs	r2, #76	; 0x4c
 800051c:	f023 f97a 	bl	8023814 <__aeabi_memcpy>
 8000520:	2303      	movs	r3, #3
 8000522:	9801      	ldr	r0, [sp, #4]
 8000524:	2132      	movs	r1, #50	; 0x32
 8000526:	5c40      	ldrb	r0, [r0, r1]
 8000528:	2800      	cmp	r0, #0
 800052a:	d105      	bne.n	8000538 <USBPD_PE_Request_CtrlMessage+0x34>
 800052c:	9801      	ldr	r0, [sp, #4]
 800052e:	6840      	ldr	r0, [r0, #4]
 8000530:	6800      	ldr	r0, [r0, #0]
 8000532:	04c1      	lsls	r1, r0, #19
 8000534:	0fc9      	lsrs	r1, r1, #31
 8000536:	d101      	bne.n	800053c <USBPD_PE_Request_CtrlMessage+0x38>
 8000538:	2403      	movs	r4, #3
 800053a:	e089      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	6809      	ldr	r1, [r1, #0]
 8000540:	684a      	ldr	r2, [r1, #4]
 8000542:	0712      	lsls	r2, r2, #28
 8000544:	0fd5      	lsrs	r5, r2, #31
 8000546:	466a      	mov	r2, sp
 8000548:	7055      	strb	r5, [r2, #1]
 800054a:	2201      	movs	r2, #1
 800054c:	0885      	lsrs	r5, r0, #2
 800054e:	4015      	ands	r5, r2
 8000550:	d103      	bne.n	800055a <USBPD_PE_Request_CtrlMessage+0x56>
 8000552:	2502      	movs	r5, #2
 8000554:	466f      	mov	r7, sp
 8000556:	703c      	strb	r4, [r7, #0]
 8000558:	e003      	b.n	8000562 <USBPD_PE_Request_CtrlMessage+0x5e>
 800055a:	2500      	movs	r5, #0
 800055c:	2604      	movs	r6, #4
 800055e:	466f      	mov	r7, sp
 8000560:	703e      	strb	r6, [r7, #0]
 8000562:	0546      	lsls	r6, r0, #21
 8000564:	0f76      	lsrs	r6, r6, #29
 8000566:	2e03      	cmp	r6, #3
 8000568:	d101      	bne.n	800056e <USBPD_PE_Request_CtrlMessage+0x6a>
 800056a:	2608      	movs	r6, #8
 800056c:	e000      	b.n	8000570 <USBPD_PE_Request_CtrlMessage+0x6c>
 800056e:	2600      	movs	r6, #0
 8000570:	4018      	ands	r0, r3
 8000572:	2802      	cmp	r0, #2
 8000574:	d101      	bne.n	800057a <USBPD_PE_Request_CtrlMessage+0x76>
 8000576:	2040      	movs	r0, #64	; 0x40
 8000578:	e000      	b.n	800057c <USBPD_PE_Request_CtrlMessage+0x78>
 800057a:	2000      	movs	r0, #0
 800057c:	787f      	ldrb	r7, [r7, #1]
 800057e:	433d      	orrs	r5, r7
 8000580:	466f      	mov	r7, sp
 8000582:	783f      	ldrb	r7, [r7, #0]
 8000584:	432f      	orrs	r7, r5
 8000586:	433e      	orrs	r6, r7
 8000588:	4330      	orrs	r0, r6
 800058a:	4003      	ands	r3, r0
 800058c:	d002      	beq.n	8000594 <USBPD_PE_Request_CtrlMessage+0x90>
 800058e:	0003      	movs	r3, r0
 8000590:	2010      	movs	r0, #16
 8000592:	4318      	orrs	r0, r3
 8000594:	2505      	movs	r5, #5
 8000596:	4228      	tst	r0, r5
 8000598:	d002      	beq.n	80005a0 <USBPD_PE_Request_CtrlMessage+0x9c>
 800059a:	0003      	movs	r3, r0
 800059c:	2020      	movs	r0, #32
 800059e:	4318      	orrs	r0, r3
 80005a0:	ab17      	add	r3, sp, #92	; 0x5c
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	005e      	lsls	r6, r3, #1
 80005a6:	18f3      	adds	r3, r6, r3
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	ab02      	add	r3, sp, #8
 80005ac:	9e00      	ldr	r6, [sp, #0]
 80005ae:	5d9e      	ldrb	r6, [r3, r6]
 80005b0:	4030      	ands	r0, r6
 80005b2:	42b0      	cmp	r0, r6
 80005b4:	d11f      	bne.n	80005f6 <USBPD_PE_Request_CtrlMessage+0xf2>
 80005b6:	9e01      	ldr	r6, [sp, #4]
 80005b8:	2733      	movs	r7, #51	; 0x33
 80005ba:	55f4      	strb	r4, [r6, r7]
 80005bc:	9801      	ldr	r0, [sp, #4]
 80005be:	4eb2      	ldr	r6, [pc, #712]	; (8000888 <.text_30>)
 80005c0:	1980      	adds	r0, r0, r6
 80005c2:	ae17      	add	r6, sp, #92	; 0x5c
 80005c4:	7836      	ldrb	r6, [r6, #0]
 80005c6:	2e05      	cmp	r6, #5
 80005c8:	d031      	beq.n	800062e <USBPD_PE_Request_CtrlMessage+0x12a>
 80005ca:	2e0b      	cmp	r6, #11
 80005cc:	d00e      	beq.n	80005ec <USBPD_PE_Request_CtrlMessage+0xe8>
 80005ce:	2e0d      	cmp	r6, #13
 80005d0:	d028      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005d2:	2e11      	cmp	r6, #17
 80005d4:	d011      	beq.n	80005fa <USBPD_PE_Request_CtrlMessage+0xf6>
 80005d6:	2e12      	cmp	r6, #18
 80005d8:	d013      	beq.n	8000602 <USBPD_PE_Request_CtrlMessage+0xfe>
 80005da:	2e14      	cmp	r6, #20
 80005dc:	d013      	beq.n	8000606 <USBPD_PE_Request_CtrlMessage+0x102>
 80005de:	2e15      	cmp	r6, #21
 80005e0:	d017      	beq.n	8000612 <USBPD_PE_Request_CtrlMessage+0x10e>
 80005e2:	2e16      	cmp	r6, #22
 80005e4:	d00b      	beq.n	80005fe <USBPD_PE_Request_CtrlMessage+0xfa>
 80005e6:	2e18      	cmp	r6, #24
 80005e8:	d01c      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005ea:	e021      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	6889      	ldr	r1, [r1, #8]
 80005f0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d11c      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005f6:	2402      	movs	r4, #2
 80005f8:	e02a      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 80005fa:	2111      	movs	r1, #17
 80005fc:	e010      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 80005fe:	2116      	movs	r1, #22
 8000600:	e00e      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000602:	2112      	movs	r1, #18
 8000604:	e00c      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000606:	8909      	ldrh	r1, [r1, #8]
 8000608:	0889      	lsrs	r1, r1, #2
 800060a:	4211      	tst	r1, r2
 800060c:	d110      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800060e:	2410      	movs	r4, #16
 8000610:	e01e      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000612:	8909      	ldrh	r1, [r1, #8]
 8000614:	09c9      	lsrs	r1, r1, #7
 8000616:	4211      	tst	r1, r2
 8000618:	d101      	bne.n	800061e <USBPD_PE_Request_CtrlMessage+0x11a>
 800061a:	2010      	movs	r0, #16
 800061c:	e019      	b.n	8000652 <USBPD_PE_Request_CtrlMessage+0x14e>
 800061e:	2115      	movs	r1, #21
 8000620:	7001      	strb	r1, [r0, #0]
 8000622:	e005      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000624:	a918      	add	r1, sp, #96	; 0x60
 8000626:	7809      	ldrb	r1, [r1, #0]
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	55d1      	strb	r1, [r2, r7]
 800062c:	e000      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800062e:	7005      	strb	r5, [r0, #0]
 8000630:	9900      	ldr	r1, [sp, #0]
 8000632:	1859      	adds	r1, r3, r1
 8000634:	7849      	ldrb	r1, [r1, #1]
 8000636:	7041      	strb	r1, [r0, #1]
 8000638:	9800      	ldr	r0, [sp, #0]
 800063a:	1818      	adds	r0, r3, r0
 800063c:	7880      	ldrb	r0, [r0, #2]
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	2232      	movs	r2, #50	; 0x32
 8000642:	5488      	strb	r0, [r1, r2]
 8000644:	a816      	add	r0, sp, #88	; 0x58
 8000646:	7800      	ldrb	r0, [r0, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	6889      	ldr	r1, [r1, #8]
 800064c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800064e:	4788      	blx	r1
 8000650:	0020      	movs	r0, r4
 8000652:	b019      	add	sp, #100	; 0x64
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000658 <.text_20>:
 8000658:	0000ffff 	.word	0x0000ffff

0800065c <USBPD_PE_Request_DataMessage>:
 800065c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	000b      	movs	r3, r1
 8000662:	0017      	movs	r7, r2
 8000664:	483f      	ldr	r0, [pc, #252]	; (8000764 <.text_25>)
 8000666:	4669      	mov	r1, sp
 8000668:	7a09      	ldrb	r1, [r1, #8]
 800066a:	0089      	lsls	r1, r1, #2
 800066c:	5841      	ldr	r1, [r0, r1]
 800066e:	2402      	movs	r4, #2
 8000670:	2032      	movs	r0, #50	; 0x32
 8000672:	5c08      	ldrb	r0, [r1, r0]
 8000674:	2800      	cmp	r0, #0
 8000676:	d105      	bne.n	8000684 <USBPD_PE_Request_DataMessage+0x28>
 8000678:	2001      	movs	r0, #1
 800067a:	684a      	ldr	r2, [r1, #4]
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	0b12      	lsrs	r2, r2, #12
 8000680:	4002      	ands	r2, r0
 8000682:	d101      	bne.n	8000688 <USBPD_PE_Request_DataMessage+0x2c>
 8000684:	2403      	movs	r4, #3
 8000686:	e021      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 8000688:	466a      	mov	r2, sp
 800068a:	7013      	strb	r3, [r2, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2533      	movs	r5, #51	; 0x33
 8000690:	554a      	strb	r2, [r1, r5]
 8000692:	000b      	movs	r3, r1
 8000694:	3332      	adds	r3, #50	; 0x32
 8000696:	4dc0      	ldr	r5, [pc, #768]	; (8000998 <.text_36>)
 8000698:	4ec0      	ldr	r6, [pc, #768]	; (800099c <.text_37>)
 800069a:	9701      	str	r7, [sp, #4]
 800069c:	466f      	mov	r7, sp
 800069e:	783f      	ldrb	r7, [r7, #0]
 80006a0:	2f01      	cmp	r7, #1
 80006a2:	d004      	beq.n	80006ae <USBPD_PE_Request_DataMessage+0x52>
 80006a4:	2f06      	cmp	r7, #6
 80006a6:	d013      	beq.n	80006d0 <USBPD_PE_Request_DataMessage+0x74>
 80006a8:	2f07      	cmp	r7, #7
 80006aa:	d01b      	beq.n	80006e4 <USBPD_PE_Request_DataMessage+0x88>
 80006ac:	e027      	b.n	80006fe <USBPD_PE_Request_DataMessage+0xa2>
 80006ae:	684d      	ldr	r5, [r1, #4]
 80006b0:	682d      	ldr	r5, [r5, #0]
 80006b2:	08ad      	lsrs	r5, r5, #2
 80006b4:	4005      	ands	r5, r0
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006b8:	4cc1      	ldr	r4, [pc, #772]	; (80009c0 <.text_39>)
 80006ba:	5508      	strb	r0, [r1, r4]
 80006bc:	2007      	movs	r0, #7
 80006be:	7018      	strb	r0, [r3, #0]
 80006c0:	2400      	movs	r4, #0
 80006c2:	4668      	mov	r0, sp
 80006c4:	7a00      	ldrb	r0, [r0, #8]
 80006c6:	6889      	ldr	r1, [r1, #8]
 80006c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80006ca:	4788      	blx	r1
 80006cc:	0020      	movs	r0, r4
 80006ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d0:	6848      	ldr	r0, [r1, #4]
 80006d2:	6800      	ldr	r0, [r0, #0]
 80006d4:	4006      	ands	r6, r0
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d1f8      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006da:	9801      	ldr	r0, [sp, #4]
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	6288      	str	r0, [r1, #40]	; 0x28
 80006e0:	202b      	movs	r0, #43	; 0x2b
 80006e2:	e7ec      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006e4:	6848      	ldr	r0, [r1, #4]
 80006e6:	6800      	ldr	r0, [r0, #0]
 80006e8:	4006      	ands	r6, r0
 80006ea:	42ae      	cmp	r6, r5
 80006ec:	d1ee      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006ee:	9801      	ldr	r0, [sp, #4]
 80006f0:	6800      	ldr	r0, [r0, #0]
 80006f2:	6288      	str	r0, [r1, #40]	; 0x28
 80006f4:	205d      	movs	r0, #93	; 0x5d
 80006f6:	4cb2      	ldr	r4, [pc, #712]	; (80009c0 <.text_39>)
 80006f8:	5508      	strb	r0, [r1, r4]
 80006fa:	2062      	movs	r0, #98	; 0x62
 80006fc:	e7df      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006fe:	2410      	movs	r4, #16
 8000700:	e7e4      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
	...

08000704 <.text_22>:
 8000704:	ffffefff 	.word	0xffffefff

08000708 <USBPD_PE_Send_Request>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	000b      	movs	r3, r1
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <.text_25>)
 800070e:	0084      	lsls	r4, r0, #2
 8000710:	590d      	ldr	r5, [r1, r4]
 8000712:	2102      	movs	r1, #2
 8000714:	2432      	movs	r4, #50	; 0x32
 8000716:	5d2c      	ldrb	r4, [r5, r4]
 8000718:	2c00      	cmp	r4, #0
 800071a:	d104      	bne.n	8000726 <USBPD_PE_Send_Request+0x1e>
 800071c:	686c      	ldr	r4, [r5, #4]
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	04e6      	lsls	r6, r4, #19
 8000722:	0ff6      	lsrs	r6, r6, #31
 8000724:	d101      	bne.n	800072a <USBPD_PE_Send_Request+0x22>
 8000726:	2103      	movs	r1, #3
 8000728:	e017      	b.n	800075a <USBPD_PE_Send_Request+0x52>
 800072a:	4ea6      	ldr	r6, [pc, #664]	; (80009c4 <.text_40>)
 800072c:	4026      	ands	r6, r4
 800072e:	24c0      	movs	r4, #192	; 0xc0
 8000730:	00a4      	lsls	r4, r4, #2
 8000732:	42a6      	cmp	r6, r4
 8000734:	d111      	bne.n	800075a <USBPD_PE_Send_Request+0x52>
 8000736:	2145      	movs	r1, #69	; 0x45
 8000738:	2432      	movs	r4, #50	; 0x32
 800073a:	5529      	strb	r1, [r5, r4]
 800073c:	61ab      	str	r3, [r5, #24]
 800073e:	6969      	ldr	r1, [r5, #20]
 8000740:	2318      	movs	r3, #24
 8000742:	4399      	bics	r1, r3
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	4013      	ands	r3, r2
 8000748:	430b      	orrs	r3, r1
 800074a:	616b      	str	r3, [r5, #20]
 800074c:	2400      	movs	r4, #0
 800074e:	2233      	movs	r2, #51	; 0x33
 8000750:	54ac      	strb	r4, [r5, r2]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000756:	4788      	blx	r1
 8000758:	2100      	movs	r1, #0
 800075a:	0008      	movs	r0, r1
 800075c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000760 <.text_24>:
 8000760:	20000000 	.word	0x20000000

08000764 <.text_25>:
 8000764:	20000304 	.word	0x20000304

08000768 <.text_26>:
 8000768:	00008708 	.word	0x00008708

0800076c <.text_27>:
 800076c:	00008308 	.word	0x00008308

08000770 <.text_28>:
 8000770:	08024f48 	.word	0x08024f48

08000774 <USBPD_PE_SendExtendedMessage>:
 8000774:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	001f      	movs	r7, r3
 800077a:	2400      	movs	r4, #0
 800077c:	2500      	movs	r5, #0
 800077e:	48b5      	ldr	r0, [pc, #724]	; (8000a54 <.text_43>)
 8000780:	4669      	mov	r1, sp
 8000782:	7b09      	ldrb	r1, [r1, #12]
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	5846      	ldr	r6, [r0, r1]
 8000788:	2003      	movs	r0, #3
 800078a:	2132      	movs	r1, #50	; 0x32
 800078c:	5c71      	ldrb	r1, [r6, r1]
 800078e:	2900      	cmp	r1, #0
 8000790:	d107      	bne.n	80007a2 <USBPD_PE_SendExtendedMessage+0x2e>
 8000792:	6871      	ldr	r1, [r6, #4]
 8000794:	6809      	ldr	r1, [r1, #0]
 8000796:	9100      	str	r1, [sp, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	0b1b      	lsrs	r3, r3, #12
 800079e:	400b      	ands	r3, r1
 80007a0:	d101      	bne.n	80007a6 <USBPD_PE_SendExtendedMessage+0x32>
 80007a2:	2503      	movs	r5, #3
 80007a4:	e06c      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007a6:	9b00      	ldr	r3, [sp, #0]
 80007a8:	055b      	lsls	r3, r3, #21
 80007aa:	0f5b      	lsrs	r3, r3, #29
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d10b      	bne.n	80007c8 <USBPD_PE_SendExtendedMessage+0x54>
 80007b0:	9b00      	ldr	r3, [sp, #0]
 80007b2:	4018      	ands	r0, r3
 80007b4:	2801      	cmp	r0, #1
 80007b6:	d801      	bhi.n	80007bc <USBPD_PE_SendExtendedMessage+0x48>
 80007b8:	2501      	movs	r5, #1
 80007ba:	e061      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007bc:	4668      	mov	r0, sp
 80007be:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80007c0:	21ff      	movs	r1, #255	; 0xff
 80007c2:	1d89      	adds	r1, r1, #6
 80007c4:	4288      	cmp	r0, r1
 80007c6:	d301      	bcc.n	80007cc <USBPD_PE_SendExtendedMessage+0x58>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e059      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007cc:	4668      	mov	r0, sp
 80007ce:	7002      	strb	r2, [r0, #0]
 80007d0:	6970      	ldr	r0, [r6, #20]
 80007d2:	2120      	movs	r1, #32
 80007d4:	4388      	bics	r0, r1
 80007d6:	6170      	str	r0, [r6, #20]
 80007d8:	2020      	movs	r0, #32
 80007da:	4669      	mov	r1, sp
 80007dc:	7809      	ldrb	r1, [r1, #0]
 80007de:	2903      	cmp	r1, #3
 80007e0:	d008      	beq.n	80007f4 <USBPD_PE_SendExtendedMessage+0x80>
 80007e2:	2904      	cmp	r1, #4
 80007e4:	d020      	beq.n	8000828 <USBPD_PE_SendExtendedMessage+0xb4>
 80007e6:	2906      	cmp	r1, #6
 80007e8:	d020      	beq.n	800082c <USBPD_PE_SendExtendedMessage+0xb8>
 80007ea:	2908      	cmp	r1, #8
 80007ec:	d020      	beq.n	8000830 <USBPD_PE_SendExtendedMessage+0xbc>
 80007ee:	290a      	cmp	r1, #10
 80007f0:	d023      	beq.n	800083a <USBPD_PE_SendExtendedMessage+0xc6>
 80007f2:	e024      	b.n	800083e <USBPD_PE_SendExtendedMessage+0xca>
 80007f4:	210c      	movs	r1, #12
 80007f6:	4aac      	ldr	r2, [pc, #688]	; (8000aa8 <.text_45>)
 80007f8:	18b2      	adds	r2, r6, r2
 80007fa:	7091      	strb	r1, [r2, #2]
 80007fc:	6971      	ldr	r1, [r6, #20]
 80007fe:	4308      	orrs	r0, r1
 8000800:	6170      	str	r0, [r6, #20]
 8000802:	4668      	mov	r0, sp
 8000804:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8000806:	2800      	cmp	r0, #0
 8000808:	d027      	beq.n	800085a <USBPD_PE_SendExtendedMessage+0xe6>
 800080a:	9401      	str	r4, [sp, #4]
 800080c:	4668      	mov	r0, sp
 800080e:	7b00      	ldrb	r0, [r0, #12]
 8000810:	f000 fa98 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8000814:	2801      	cmp	r0, #1
 8000816:	d101      	bne.n	800081c <USBPD_PE_SendExtendedMessage+0xa8>
 8000818:	2004      	movs	r0, #4
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	9702      	str	r7, [sp, #8]
 800081e:	9801      	ldr	r0, [sp, #4]
 8000820:	4669      	mov	r1, sp
 8000822:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8000824:	4fa1      	ldr	r7, [pc, #644]	; (8000aac <.text_46>)
 8000826:	e012      	b.n	800084e <USBPD_PE_SendExtendedMessage+0xda>
 8000828:	210d      	movs	r1, #13
 800082a:	e7e4      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 800082c:	210e      	movs	r1, #14
 800082e:	e7e2      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 8000830:	205b      	movs	r0, #91	; 0x5b
 8000832:	499d      	ldr	r1, [pc, #628]	; (8000aa8 <.text_45>)
 8000834:	1871      	adds	r1, r6, r1
 8000836:	7088      	strb	r0, [r1, #2]
 8000838:	e7e3      	b.n	8000802 <USBPD_PE_SendExtendedMessage+0x8e>
 800083a:	205c      	movs	r0, #92	; 0x5c
 800083c:	e7f9      	b.n	8000832 <USBPD_PE_SendExtendedMessage+0xbe>
 800083e:	2510      	movs	r5, #16
 8000840:	e01e      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 8000842:	9a02      	ldr	r2, [sp, #8]
 8000844:	5d12      	ldrb	r2, [r2, r4]
 8000846:	1823      	adds	r3, r4, r0
 8000848:	18f3      	adds	r3, r6, r3
 800084a:	55da      	strb	r2, [r3, r7]
 800084c:	1c64      	adds	r4, r4, #1
 800084e:	428c      	cmp	r4, r1
 8000850:	d3f7      	bcc.n	8000842 <USBPD_PE_SendExtendedMessage+0xce>
 8000852:	2092      	movs	r0, #146	; 0x92
 8000854:	00c0      	lsls	r0, r0, #3
 8000856:	5231      	strh	r1, [r6, r0]
 8000858:	e002      	b.n	8000860 <USBPD_PE_SendExtendedMessage+0xec>
 800085a:	2092      	movs	r0, #146	; 0x92
 800085c:	00c0      	lsls	r0, r0, #3
 800085e:	5234      	strh	r4, [r6, r0]
 8000860:	4668      	mov	r0, sp
 8000862:	7c00      	ldrb	r0, [r0, #16]
 8000864:	2133      	movs	r1, #51	; 0x33
 8000866:	5470      	strb	r0, [r6, r1]
 8000868:	4668      	mov	r0, sp
 800086a:	7800      	ldrb	r0, [r0, #0]
 800086c:	498e      	ldr	r1, [pc, #568]	; (8000aa8 <.text_45>)
 800086e:	5470      	strb	r0, [r6, r1]
 8000870:	2031      	movs	r0, #49	; 0x31
 8000872:	2132      	movs	r1, #50	; 0x32
 8000874:	5470      	strb	r0, [r6, r1]
 8000876:	4668      	mov	r0, sp
 8000878:	7b00      	ldrb	r0, [r0, #12]
 800087a:	68b1      	ldr	r1, [r6, #8]
 800087c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800087e:	4788      	blx	r1
 8000880:	0028      	movs	r0, r5
 8000882:	b005      	add	sp, #20
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000888 <.text_30>:
 8000888:	0000025e 	.word	0x0000025e

0800088c <PE_Send_RESET>:
 800088c:	b538      	push	{r3, r4, r5, lr}
 800088e:	0005      	movs	r5, r0
 8000890:	000c      	movs	r4, r1
 8000892:	2c05      	cmp	r4, #5
 8000894:	d101      	bne.n	800089a <PE_Send_RESET+0xe>
 8000896:	211f      	movs	r1, #31
 8000898:	e000      	b.n	800089c <PE_Send_RESET+0x10>
 800089a:	215e      	movs	r1, #94	; 0x5e
 800089c:	7c28      	ldrb	r0, [r5, #16]
 800089e:	f7ff fdef 	bl	8000480 <USBPD_PE_Notification>
 80008a2:	0021      	movs	r1, r4
 80008a4:	7c28      	ldrb	r0, [r5, #16]
 80008a6:	f005 f9ab 	bl	8005c00 <USBPD_PRL_ResetRequestProcess>
 80008aa:	f3ef 8010 	mrs	r0, PRIMASK
 80008ae:	b672      	cpsid	i
 80008b0:	2100      	movs	r1, #0
 80008b2:	223c      	movs	r2, #60	; 0x3c
 80008b4:	54a9      	strb	r1, [r5, r2]
 80008b6:	f380 8810 	msr	PRIMASK, r0
 80008ba:	bd31      	pop	{r0, r4, r5, pc}

080008bc <PE_Get_SpecRevision>:
 80008bc:	4965      	ldr	r1, [pc, #404]	; (8000a54 <.text_43>)
 80008be:	0080      	lsls	r0, r0, #2
 80008c0:	5808      	ldr	r0, [r1, r0]
 80008c2:	6840      	ldr	r0, [r0, #4]
 80008c4:	7800      	ldrb	r0, [r0, #0]
 80008c6:	0780      	lsls	r0, r0, #30
 80008c8:	0f80      	lsrs	r0, r0, #30
 80008ca:	4770      	bx	lr

080008cc <PE_ChangePowerRole>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	6842      	ldr	r2, [r0, #4]
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	2404      	movs	r4, #4
 80008d4:	43a3      	bics	r3, r4
 80008d6:	008c      	lsls	r4, r1, #2
 80008d8:	2504      	movs	r5, #4
 80008da:	402c      	ands	r4, r5
 80008dc:	431c      	orrs	r4, r3
 80008de:	6014      	str	r4, [r2, #0]
 80008e0:	7c00      	ldrb	r0, [r0, #16]
 80008e2:	f004 ff0a 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80008e6:	bd31      	pop	{r0, r4, r5, pc}

080008e8 <PE_Get_RxEvent>:
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	0001      	movs	r1, r0
 80008ec:	2014      	movs	r0, #20
 80008ee:	f3ef 8210 	mrs	r2, PRIMASK
 80008f2:	b672      	cpsid	i
 80008f4:	233c      	movs	r3, #60	; 0x3c
 80008f6:	5ccc      	ldrb	r4, [r1, r3]
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d029      	beq.n	8000950 <PE_Get_RxEvent+0x68>
 80008fc:	2393      	movs	r3, #147	; 0x93
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18cb      	adds	r3, r1, r3
 8000902:	5d1d      	ldrb	r5, [r3, r4]
 8000904:	066d      	lsls	r5, r5, #25
 8000906:	d401      	bmi.n	800090c <PE_Get_RxEvent+0x24>
 8000908:	2003      	movs	r0, #3
 800090a:	e021      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800090c:	2584      	movs	r5, #132	; 0x84
 800090e:	006d      	lsls	r5, r5, #1
 8000910:	436c      	muls	r4, r5
 8000912:	190c      	adds	r4, r1, r4
 8000914:	3ccb      	subs	r4, #203	; 0xcb
 8000916:	638c      	str	r4, [r1, #56]	; 0x38
 8000918:	7825      	ldrb	r5, [r4, #0]
 800091a:	7864      	ldrb	r4, [r4, #1]
 800091c:	0224      	lsls	r4, r4, #8
 800091e:	192c      	adds	r4, r5, r4
 8000920:	868c      	strh	r4, [r1, #52]	; 0x34
 8000922:	000c      	movs	r4, r1
 8000924:	3430      	adds	r4, #48	; 0x30
 8000926:	253c      	movs	r5, #60	; 0x3c
 8000928:	5d49      	ldrb	r1, [r1, r5]
 800092a:	5c59      	ldrb	r1, [r3, r1]
 800092c:	06c9      	lsls	r1, r1, #27
 800092e:	0ec9      	lsrs	r1, r1, #27
 8000930:	2901      	cmp	r1, #1
 8000932:	d004      	beq.n	800093e <PE_Get_RxEvent+0x56>
 8000934:	2902      	cmp	r1, #2
 8000936:	d005      	beq.n	8000944 <PE_Get_RxEvent+0x5c>
 8000938:	2904      	cmp	r1, #4
 800093a:	d006      	beq.n	800094a <PE_Get_RxEvent+0x62>
 800093c:	e008      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800093e:	2011      	movs	r0, #17
 8000940:	2100      	movs	r1, #0
 8000942:	e004      	b.n	800094e <PE_Get_RxEvent+0x66>
 8000944:	2012      	movs	r0, #18
 8000946:	2101      	movs	r1, #1
 8000948:	e001      	b.n	800094e <PE_Get_RxEvent+0x66>
 800094a:	2013      	movs	r0, #19
 800094c:	2102      	movs	r1, #2
 800094e:	7021      	strb	r1, [r4, #0]
 8000950:	f382 8810 	msr	PRIMASK, r2
 8000954:	bd30      	pop	{r4, r5, pc}

08000956 <PE_Clear_RxEvent>:
 8000956:	b510      	push	{r4, lr}
 8000958:	0001      	movs	r1, r0
 800095a:	f3ef 8010 	mrs	r0, PRIMASK
 800095e:	b672      	cpsid	i
 8000960:	223c      	movs	r2, #60	; 0x3c
 8000962:	5c8a      	ldrb	r2, [r1, r2]
 8000964:	2a00      	cmp	r2, #0
 8000966:	d014      	beq.n	8000992 <PE_Clear_RxEvent+0x3c>
 8000968:	1e53      	subs	r3, r2, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4acb      	ldr	r2, [pc, #812]	; (8000c9c <.text_56>)
 800096e:	188c      	adds	r4, r1, r2
 8000970:	2200      	movs	r2, #0
 8000972:	54e2      	strb	r2, [r4, r3]
 8000974:	1e5b      	subs	r3, r3, #1
 8000976:	419b      	sbcs	r3, r3
 8000978:	0fdb      	lsrs	r3, r3, #31
 800097a:	5ce4      	ldrb	r4, [r4, r3]
 800097c:	0664      	lsls	r4, r4, #25
 800097e:	d506      	bpl.n	800098e <PE_Clear_RxEvent+0x38>
 8000980:	1c5b      	adds	r3, r3, #1
 8000982:	223c      	movs	r2, #60	; 0x3c
 8000984:	548b      	strb	r3, [r1, r2]
 8000986:	f380 8810 	msr	PRIMASK, r0
 800098a:	7c08      	ldrb	r0, [r1, #16]
 800098c:	e168      	b.n	8000c60 <.text_54>
 800098e:	233c      	movs	r3, #60	; 0x3c
 8000990:	54ca      	strb	r2, [r1, r3]
 8000992:	f380 8810 	msr	PRIMASK, r0
 8000996:	bd10      	pop	{r4, pc}

08000998 <.text_36>:
 8000998:	00000302 	.word	0x00000302

0800099c <.text_37>:
 800099c:	00000703 	.word	0x00000703

080009a0 <PE_PRL_Control_RxEvent>:
 80009a0:	492c      	ldr	r1, [pc, #176]	; (8000a54 <.text_43>)
 80009a2:	0080      	lsls	r0, r0, #2
 80009a4:	580a      	ldr	r2, [r1, r0]
 80009a6:	2000      	movs	r0, #0
 80009a8:	f3ef 8110 	mrs	r1, PRIMASK
 80009ac:	b672      	cpsid	i
 80009ae:	233c      	movs	r3, #60	; 0x3c
 80009b0:	5cd2      	ldrb	r2, [r2, r3]
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d000      	beq.n	80009b8 <PE_PRL_Control_RxEvent+0x18>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f381 8810 	msr	PRIMASK, r1
 80009bc:	4770      	bx	lr
	...

080009c0 <.text_39>:
 80009c0:	0000025f 	.word	0x0000025f

080009c4 <.text_40>:
 80009c4:	00000704 	.word	0x00000704

080009c8 <PE_Convert_SOPRxEvent>:
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d003      	beq.n	80009d4 <PE_Convert_SOPRxEvent+0xc>
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d005      	beq.n	80009dc <PE_Convert_SOPRxEvent+0x14>
 80009d0:	d302      	bcc.n	80009d8 <PE_Convert_SOPRxEvent+0x10>
 80009d2:	e005      	b.n	80009e0 <PE_Convert_SOPRxEvent+0x18>
 80009d4:	2011      	movs	r0, #17
 80009d6:	4770      	bx	lr
 80009d8:	2012      	movs	r0, #18
 80009da:	4770      	bx	lr
 80009dc:	2013      	movs	r0, #19
 80009de:	4770      	bx	lr
 80009e0:	2014      	movs	r0, #20
 80009e2:	4770      	bx	lr

080009e4 <PE_Check_AMSConflict>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	0005      	movs	r5, r0
 80009e8:	2400      	movs	r4, #0
 80009ea:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80009ec:	49b7      	ldr	r1, [pc, #732]	; (8000ccc <.text_58>)
 80009ee:	4001      	ands	r1, r0
 80009f0:	290d      	cmp	r1, #13
 80009f2:	d101      	bne.n	80009f8 <PE_Check_AMSConflict+0x14>
 80009f4:	2010      	movs	r0, #16
 80009f6:	e01b      	b.n	8000a30 <PE_Check_AMSConflict+0x4c>
 80009f8:	2603      	movs	r6, #3
 80009fa:	200f      	movs	r0, #15
 80009fc:	7f29      	ldrb	r1, [r5, #28]
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d011      	beq.n	8000a26 <PE_Check_AMSConflict+0x42>
 8000a02:	1e49      	subs	r1, r1, #1
 8000a04:	2901      	cmp	r1, #1
 8000a06:	d912      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a08:	1e89      	subs	r1, r1, #2
 8000a0a:	d011      	beq.n	8000a30 <PE_Check_AMSConflict+0x4c>
 8000a0c:	1e49      	subs	r1, r1, #1
 8000a0e:	d01d      	beq.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a10:	1e49      	subs	r1, r1, #1
 8000a12:	2909      	cmp	r1, #9
 8000a14:	d90b      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a16:	390b      	subs	r1, #11
 8000a18:	2901      	cmp	r1, #1
 8000a1a:	d908      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a1c:	1e89      	subs	r1, r1, #2
 8000a1e:	d004      	beq.n	8000a2a <PE_Check_AMSConflict+0x46>
 8000a20:	394d      	subs	r1, #77	; 0x4d
 8000a22:	d004      	beq.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a24:	e006      	b.n	8000a34 <PE_Check_AMSConflict+0x50>
 8000a26:	746e      	strb	r6, [r5, #17]
 8000a28:	e011      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2a:	7468      	strb	r0, [r5, #17]
 8000a2c:	e00f      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2e:	2011      	movs	r0, #17
 8000a30:	7468      	strb	r0, [r5, #17]
 8000a32:	e00b      	b.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a34:	215c      	movs	r1, #92	; 0x5c
 8000a36:	7c28      	ldrb	r0, [r5, #16]
 8000a38:	f7ff fd22 	bl	8000480 <USBPD_PE_Notification>
 8000a3c:	746e      	strb	r6, [r5, #17]
 8000a3e:	6868      	ldr	r0, [r5, #4]
 8000a40:	6800      	ldr	r0, [r0, #0]
 8000a42:	49c4      	ldr	r1, [pc, #784]	; (8000d54 <.text_62>)
 8000a44:	4001      	ands	r1, r0
 8000a46:	0230      	lsls	r0, r6, #8
 8000a48:	4281      	cmp	r1, r0
 8000a4a:	d000      	beq.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a4c:	2415      	movs	r4, #21
 8000a4e:	0020      	movs	r0, r4
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a54 <.text_43>:
 8000a54:	20000304 	.word	0x20000304

08000a58 <PE_PRL_ResetReceived>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	0004      	movs	r4, r0
 8000a5c:	48be      	ldr	r0, [pc, #760]	; (8000d58 <.text_63>)
 8000a5e:	00a2      	lsls	r2, r4, #2
 8000a60:	5885      	ldr	r5, [r0, r2]
 8000a62:	2905      	cmp	r1, #5
 8000a64:	d115      	bne.n	8000a92 <PE_PRL_ResetReceived+0x3a>
 8000a66:	6868      	ldr	r0, [r5, #4]
 8000a68:	6801      	ldr	r1, [r0, #0]
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	4391      	bics	r1, r2
 8000a6e:	6001      	str	r1, [r0, #0]
 8000a70:	6968      	ldr	r0, [r5, #20]
 8000a72:	49ba      	ldr	r1, [pc, #744]	; (8000d5c <.text_64>)
 8000a74:	4001      	ands	r1, r0
 8000a76:	0150      	lsls	r0, r2, #5
 8000a78:	4308      	orrs	r0, r1
 8000a7a:	6168      	str	r0, [r5, #20]
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	2132      	movs	r1, #50	; 0x32
 8000a80:	5468      	strb	r0, [r5, r1]
 8000a82:	2000      	movs	r0, #0
 8000a84:	213c      	movs	r1, #60	; 0x3c
 8000a86:	5468      	strb	r0, [r5, r1]
 8000a88:	211e      	movs	r1, #30
 8000a8a:	7c28      	ldrb	r0, [r5, #16]
 8000a8c:	f7ff fcf8 	bl	8000480 <USBPD_PE_Notification>
 8000a90:	e004      	b.n	8000a9c <PE_PRL_ResetReceived+0x44>
 8000a92:	6968      	ldr	r0, [r5, #20]
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	02c9      	lsls	r1, r1, #11
 8000a98:	4301      	orrs	r1, r0
 8000a9a:	6169      	str	r1, [r5, #20]
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	68a9      	ldr	r1, [r5, #8]
 8000aa0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000aa2:	4788      	blx	r1
 8000aa4:	bd31      	pop	{r0, r4, r5, pc}
	...

08000aa8 <.text_45>:
 8000aa8:	0000025d 	.word	0x0000025d

08000aac <.text_46>:
 8000aac:	00000385 	.word	0x00000385

08000ab0 <PE_PRL_BistCompleted>:
 8000ab0:	4770      	bx	lr

08000ab2 <PE_Reset_HardReset>:
 8000ab2:	b538      	push	{r3, r4, r5, lr}
 8000ab4:	0004      	movs	r4, r0
 8000ab6:	2032      	movs	r0, #50	; 0x32
 8000ab8:	5c20      	ldrb	r0, [r4, r0]
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d003      	beq.n	8000ac6 <PE_Reset_HardReset+0x14>
 8000abe:	215b      	movs	r1, #91	; 0x5b
 8000ac0:	7c20      	ldrb	r0, [r4, #16]
 8000ac2:	f7ff fcdd 	bl	8000480 <USBPD_PE_Notification>
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f000 f82c 	bl	8000b24 <PE_Reset_ZI>
 8000acc:	2503      	movs	r5, #3
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	6843      	ldr	r3, [r0, #4]
 8000ad2:	402b      	ands	r3, r5
 8000ad4:	7c20      	ldrb	r0, [r4, #16]
 8000ad6:	6861      	ldr	r1, [r4, #4]
 8000ad8:	6809      	ldr	r1, [r1, #0]
 8000ada:	074a      	lsls	r2, r1, #29
 8000adc:	0fd2      	lsrs	r2, r2, #31
 8000ade:	d008      	beq.n	8000af2 <PE_Reset_HardReset+0x40>
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f004 fdee 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000ae6:	6860      	ldr	r0, [r4, #4]
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	2208      	movs	r2, #8
 8000aec:	430a      	orrs	r2, r1
 8000aee:	6002      	str	r2, [r0, #0]
 8000af0:	e007      	b.n	8000b02 <PE_Reset_HardReset+0x50>
 8000af2:	2100      	movs	r1, #0
 8000af4:	f004 fde5 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000af8:	6860      	ldr	r0, [r4, #4]
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4391      	bics	r1, r2
 8000b00:	6001      	str	r1, [r0, #0]
 8000b02:	6820      	ldr	r0, [r4, #0]
 8000b04:	6840      	ldr	r0, [r0, #4]
 8000b06:	4005      	ands	r5, r0
 8000b08:	6860      	ldr	r0, [r4, #4]
 8000b0a:	6801      	ldr	r1, [r0, #0]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4391      	bics	r1, r2
 8000b10:	430d      	orrs	r5, r1
 8000b12:	6005      	str	r5, [r0, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	7c20      	ldrb	r0, [r4, #16]
 8000b18:	f004 fe44 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8000b1c:	7c20      	ldrb	r0, [r4, #16]
 8000b1e:	f005 f8ad 	bl	8005c7c <USBPD_PRL_Reset>
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Reset_ZI>:
 8000b24:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000b26:	0004      	movs	r4, r0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	6801      	ldr	r1, [r0, #0]
 8000b30:	2210      	movs	r2, #16
 8000b32:	4391      	bics	r1, r2
 8000b34:	6001      	str	r1, [r0, #0]
 8000b36:	2100      	movs	r1, #0
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fc34 	bl	80013a6 <PE_SetPowerNegotiation>
 8000b3e:	2193      	movs	r1, #147	; 0x93
 8000b40:	0089      	lsls	r1, r1, #2
 8000b42:	0020      	movs	r0, r4
 8000b44:	3014      	adds	r0, #20
 8000b46:	f022 fe70 	bl	802382a <__aeabi_memclr>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	aa01      	add	r2, sp, #4
 8000b4e:	2102      	movs	r1, #2
 8000b50:	7c20      	ldrb	r0, [r4, #16]
 8000b52:	68a5      	ldr	r5, [r4, #8]
 8000b54:	69ad      	ldr	r5, [r5, #24]
 8000b56:	47a8      	blx	r5
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	0440      	lsls	r0, r0, #17
 8000b5c:	9000      	str	r0, [sp, #0]
 8000b5e:	2304      	movs	r3, #4
 8000b60:	466a      	mov	r2, sp
 8000b62:	2106      	movs	r1, #6
 8000b64:	7c20      	ldrb	r0, [r4, #16]
 8000b66:	68a5      	ldr	r5, [r4, #8]
 8000b68:	69ad      	ldr	r5, [r5, #24]
 8000b6a:	47a8      	blx	r5
 8000b6c:	2503      	movs	r5, #3
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	6841      	ldr	r1, [r0, #4]
 8000b72:	4029      	ands	r1, r5
 8000b74:	7c20      	ldrb	r0, [r4, #16]
 8000b76:	f004 fde2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	6840      	ldr	r0, [r0, #4]
 8000b7e:	4005      	ands	r5, r0
 8000b80:	6860      	ldr	r0, [r4, #4]
 8000b82:	6801      	ldr	r1, [r0, #0]
 8000b84:	4a76      	ldr	r2, [pc, #472]	; (8000d60 <.text_65>)
 8000b86:	400a      	ands	r2, r1
 8000b88:	06a9      	lsls	r1, r5, #26
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	6001      	str	r1, [r0, #0]
 8000b8e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b90 <PE_Reset_Counter>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	2103      	movs	r1, #3
 8000b94:	2298      	movs	r2, #152	; 0x98
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	1880      	adds	r0, r0, r2
 8000b9a:	f022 fe46 	bl	802382a <__aeabi_memclr>
 8000b9e:	bd01      	pop	{r0, pc}

08000ba0 <PE_Reset_StateMachine>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	2032      	movs	r0, #50	; 0x32
 8000ba6:	5c20      	ldrb	r0, [r4, r0]
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d003      	beq.n	8000bb4 <PE_Reset_StateMachine+0x14>
 8000bac:	215b      	movs	r1, #91	; 0x5b
 8000bae:	7c20      	ldrb	r0, [r4, #16]
 8000bb0:	f7ff fc66 	bl	8000480 <USBPD_PE_Notification>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f7ff ffb5 	bl	8000b24 <PE_Reset_ZI>
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	f000 fbf2 	bl	80013a6 <PE_SetPowerNegotiation>
 8000bc2:	7c20      	ldrb	r0, [r4, #16]
 8000bc4:	f005 f85a 	bl	8005c7c <USBPD_PRL_Reset>
 8000bc8:	6860      	ldr	r0, [r4, #4]
 8000bca:	6801      	ldr	r1, [r0, #0]
 8000bcc:	2501      	movs	r5, #1
 8000bce:	08ca      	lsrs	r2, r1, #3
 8000bd0:	402a      	ands	r2, r5
 8000bd2:	078b      	lsls	r3, r1, #30
 8000bd4:	0f9b      	lsrs	r3, r3, #30
 8000bd6:	7c20      	ldrb	r0, [r4, #16]
 8000bd8:	0889      	lsrs	r1, r1, #2
 8000bda:	400d      	ands	r5, r1
 8000bdc:	d004      	beq.n	8000be8 <PE_Reset_StateMachine+0x48>
 8000bde:	2101      	movs	r1, #1
 8000be0:	f004 fd6f 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000be4:	2002      	movs	r0, #2
 8000be6:	e003      	b.n	8000bf0 <PE_Reset_StateMachine+0x50>
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 fd6a 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000bee:	203e      	movs	r0, #62	; 0x3e
 8000bf0:	7460      	strb	r0, [r4, #17]
 8000bf2:	bd31      	pop	{r0, r4, r5, pc}

08000bf4 <PE_ExtRevisionInteroperability>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	4957      	ldr	r1, [pc, #348]	; (8000d58 <.text_63>)
 8000bfa:	0083      	lsls	r3, r0, #2
 8000bfc:	58cb      	ldr	r3, [r1, r3]
 8000bfe:	685c      	ldr	r4, [r3, #4]
 8000c00:	6825      	ldr	r5, [r4, #0]
 8000c02:	2103      	movs	r1, #3
 8000c04:	2603      	movs	r6, #3
 8000c06:	402e      	ands	r6, r5
 8000c08:	42b2      	cmp	r2, r6
 8000c0a:	db00      	blt.n	8000c0e <PE_ExtRevisionInteroperability+0x1a>
 8000c0c:	0032      	movs	r2, r6
 8000c0e:	438d      	bics	r5, r1
 8000c10:	400a      	ands	r2, r1
 8000c12:	432a      	orrs	r2, r5
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	6814      	ldr	r4, [r2, #0]
 8000c1a:	2503      	movs	r5, #3
 8000c1c:	4025      	ands	r5, r4
 8000c1e:	2d01      	cmp	r5, #1
 8000c20:	d101      	bne.n	8000c26 <PE_ExtRevisionInteroperability+0x32>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e000      	b.n	8000c28 <PE_ExtRevisionInteroperability+0x34>
 8000c26:	2520      	movs	r5, #32
 8000c28:	2620      	movs	r6, #32
 8000c2a:	43b4      	bics	r4, r6
 8000c2c:	4325      	orrs	r5, r4
 8000c2e:	6015      	str	r5, [r2, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	4011      	ands	r1, r2
 8000c36:	f004 fd76 	bl	8005726 <USBPD_PRL_SetHeaderSpecification>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}

08000c3c <PE_PRL_FastRoleSwapReception>:
 8000c3c:	4946      	ldr	r1, [pc, #280]	; (8000d58 <.text_63>)
 8000c3e:	0082      	lsls	r2, r0, #2
 8000c40:	5889      	ldr	r1, [r1, r2]
 8000c42:	7f0a      	ldrb	r2, [r1, #28]
 8000c44:	2a09      	cmp	r2, #9
 8000c46:	d100      	bne.n	8000c4a <PE_PRL_FastRoleSwapReception+0xe>
 8000c48:	4770      	bx	lr
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	2410      	movs	r4, #16
 8000c52:	431c      	orrs	r4, r3
 8000c54:	6014      	str	r4, [r2, #0]
 8000c56:	694a      	ldr	r2, [r1, #20]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	614b      	str	r3, [r1, #20]

08000c60 <.text_54>:
 8000c60:	6889      	ldr	r1, [r1, #8]
 8000c62:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000c64:	4788      	blx	r1
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <PE_PRL_PostReceiveEvent>:
 8000c68:	b530      	push	{r4, r5, lr}
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	; (8000d58 <.text_63>)
 8000c6c:	0080      	lsls	r0, r0, #2
 8000c6e:	5813      	ldr	r3, [r2, r0]
 8000c70:	2400      	movs	r4, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	191a      	adds	r2, r3, r4
 8000c76:	4d09      	ldr	r5, [pc, #36]	; (8000c9c <.text_56>)
 8000c78:	1952      	adds	r2, r2, r5
 8000c7a:	7815      	ldrb	r5, [r2, #0]
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d004      	beq.n	8000c8a <PE_PRL_PostReceiveEvent+0x22>
 8000c80:	1c64      	adds	r4, r4, #1
 8000c82:	b2e4      	uxtb	r4, r4
 8000c84:	2c01      	cmp	r4, #1
 8000c86:	d9f5      	bls.n	8000c74 <PE_PRL_PostReceiveEvent+0xc>
 8000c88:	bd30      	pop	{r4, r5, pc}
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	7010      	strb	r0, [r2, #0]
 8000c8e:	2001      	movs	r0, #1
 8000c90:	7813      	ldrb	r3, [r2, #0]
 8000c92:	2401      	movs	r4, #1
 8000c94:	408c      	lsls	r4, r1
 8000c96:	431c      	orrs	r4, r3
 8000c98:	7014      	strb	r4, [r2, #0]
 8000c9a:	bd30      	pop	{r4, r5, pc}

08000c9c <.text_56>:
 8000c9c:	0000024d 	.word	0x0000024d

08000ca0 <PE_PRL_PostReceiveEventError>:
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	492d      	ldr	r1, [pc, #180]	; (8000d58 <.text_63>)
 8000ca4:	0080      	lsls	r0, r0, #2
 8000ca6:	5809      	ldr	r1, [r1, r0]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	b2d3      	uxtb	r3, r2
 8000cae:	18cb      	adds	r3, r1, r3
 8000cb0:	4c2c      	ldr	r4, [pc, #176]	; (8000d64 <.text_66>)
 8000cb2:	191b      	adds	r3, r3, r4
 8000cb4:	781c      	ldrb	r4, [r3, #0]
 8000cb6:	2560      	movs	r5, #96	; 0x60
 8000cb8:	4025      	ands	r5, r4
 8000cba:	2d20      	cmp	r5, #32
 8000cbc:	d004      	beq.n	8000cc8 <PE_PRL_PostReceiveEventError+0x28>
 8000cbe:	1c52      	adds	r2, r2, #1
 8000cc0:	b2d3      	uxtb	r3, r2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d3f2      	bcc.n	8000cac <PE_PRL_PostReceiveEventError+0xc>
 8000cc6:	bd30      	pop	{r4, r5, pc}
 8000cc8:	7018      	strb	r0, [r3, #0]
 8000cca:	bd30      	pop	{r4, r5, pc}

08000ccc <.text_58>:
 8000ccc:	0000f01f 	.word	0x0000f01f

08000cd0 <PE_PRL_PostReceiveEventCopy>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <.text_63>)
 8000cd4:	0080      	lsls	r0, r0, #2
 8000cd6:	5813      	ldr	r3, [r2, r0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	b2d0      	uxtb	r0, r2
 8000cdc:	181c      	adds	r4, r3, r0
 8000cde:	4d21      	ldr	r5, [pc, #132]	; (8000d64 <.text_66>)
 8000ce0:	5d64      	ldrb	r4, [r4, r5]
 8000ce2:	2560      	movs	r5, #96	; 0x60
 8000ce4:	4025      	ands	r5, r4
 8000ce6:	2d20      	cmp	r5, #32
 8000ce8:	d004      	beq.n	8000cf4 <PE_PRL_PostReceiveEventCopy+0x24>
 8000cea:	1c52      	adds	r2, r2, #1
 8000cec:	b2d0      	uxtb	r0, r2
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d3f3      	bcc.n	8000cda <PE_PRL_PostReceiveEventCopy+0xa>
 8000cf2:	bd31      	pop	{r0, r4, r5, pc}
 8000cf4:	2284      	movs	r2, #132	; 0x84
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	4350      	muls	r0, r2
 8000cfa:	1818      	adds	r0, r3, r0
 8000cfc:	303d      	adds	r0, #61	; 0x3d
 8000cfe:	f022 fd89 	bl	8023814 <__aeabi_memcpy>
 8000d02:	bd31      	pop	{r0, r4, r5, pc}

08000d04 <PE_PRL_PostReceiveEventComplete>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4914      	ldr	r1, [pc, #80]	; (8000d58 <.text_63>)
 8000d08:	0082      	lsls	r2, r0, #2
 8000d0a:	5889      	ldr	r1, [r1, r2]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	18cb      	adds	r3, r1, r3
 8000d12:	4c14      	ldr	r4, [pc, #80]	; (8000d64 <.text_66>)
 8000d14:	191b      	adds	r3, r3, r4
 8000d16:	781c      	ldrb	r4, [r3, #0]
 8000d18:	2560      	movs	r5, #96	; 0x60
 8000d1a:	4025      	ands	r5, r4
 8000d1c:	2d20      	cmp	r5, #32
 8000d1e:	d003      	beq.n	8000d28 <PE_PRL_PostReceiveEventComplete+0x24>
 8000d20:	b2d3      	uxtb	r3, r2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d3f3      	bcc.n	8000d0e <PE_PRL_PostReceiveEventComplete+0xa>
 8000d26:	bd31      	pop	{r0, r4, r5, pc}
 8000d28:	781c      	ldrb	r4, [r3, #0]
 8000d2a:	2540      	movs	r5, #64	; 0x40
 8000d2c:	4325      	orrs	r5, r4
 8000d2e:	701d      	strb	r5, [r3, #0]
 8000d30:	233c      	movs	r3, #60	; 0x3c
 8000d32:	5ccb      	ldrb	r3, [r1, r3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <PE_PRL_PostReceiveEventComplete+0x38>
 8000d38:	233c      	movs	r3, #60	; 0x3c
 8000d3a:	54ca      	strb	r2, [r1, r3]
 8000d3c:	6889      	ldr	r1, [r1, #8]
 8000d3e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000d40:	4788      	blx	r1
 8000d42:	bd31      	pop	{r0, r4, r5, pc}

08000d44 <PE_Get_UnchunkedSupport>:
 8000d44:	4904      	ldr	r1, [pc, #16]	; (8000d58 <.text_63>)
 8000d46:	0080      	lsls	r0, r0, #2
 8000d48:	5808      	ldr	r0, [r1, r0]
 8000d4a:	6840      	ldr	r0, [r0, #4]
 8000d4c:	6800      	ldr	r0, [r0, #0]
 8000d4e:	0181      	lsls	r1, r0, #6
 8000d50:	0fc8      	lsrs	r0, r1, #31
 8000d52:	4770      	bx	lr

08000d54 <.text_62>:
 8000d54:	00000704 	.word	0x00000704

08000d58 <.text_63>:
 8000d58:	20000304 	.word	0x20000304

08000d5c <.text_64>:
 8000d5c:	fffff9ff 	.word	0xfffff9ff

08000d60 <.text_65>:
 8000d60:	f3ffffff 	.word	0xf3ffffff

08000d64 <.text_66>:
 8000d64:	0000024d 	.word	0x0000024d

08000d68 <PE_SubStateMachine_Generic>:
 8000d68:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000d6a:	b08d      	sub	sp, #52	; 0x34
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9004      	str	r0, [sp, #16]
 8000d72:	2500      	movs	r5, #0
 8000d74:	9503      	str	r5, [sp, #12]
 8000d76:	2601      	movs	r6, #1
 8000d78:	2714      	movs	r7, #20
 8000d7a:	7c61      	ldrb	r1, [r4, #17]
 8000d7c:	2901      	cmp	r1, #1
 8000d7e:	d100      	bne.n	8000d82 <PE_SubStateMachine_Generic+0x1a>
 8000d80:	e195      	b.n	80010ae <PE_SubStateMachine_Generic+0x346>
 8000d82:	2918      	cmp	r1, #24
 8000d84:	d03f      	beq.n	8000e06 <PE_SubStateMachine_Generic+0x9e>
 8000d86:	2919      	cmp	r1, #25
 8000d88:	d050      	beq.n	8000e2c <PE_SubStateMachine_Generic+0xc4>
 8000d8a:	291d      	cmp	r1, #29
 8000d8c:	d100      	bne.n	8000d90 <PE_SubStateMachine_Generic+0x28>
 8000d8e:	e092      	b.n	8000eb6 <PE_SubStateMachine_Generic+0x14e>
 8000d90:	2927      	cmp	r1, #39	; 0x27
 8000d92:	d100      	bne.n	8000d96 <PE_SubStateMachine_Generic+0x2e>
 8000d94:	e0b0      	b.n	8000ef8 <PE_SubStateMachine_Generic+0x190>
 8000d96:	2928      	cmp	r1, #40	; 0x28
 8000d98:	d100      	bne.n	8000d9c <PE_SubStateMachine_Generic+0x34>
 8000d9a:	e0b9      	b.n	8000f10 <PE_SubStateMachine_Generic+0x1a8>
 8000d9c:	2929      	cmp	r1, #41	; 0x29
 8000d9e:	d100      	bne.n	8000da2 <PE_SubStateMachine_Generic+0x3a>
 8000da0:	e0c0      	b.n	8000f24 <PE_SubStateMachine_Generic+0x1bc>
 8000da2:	292c      	cmp	r1, #44	; 0x2c
 8000da4:	d100      	bne.n	8000da8 <PE_SubStateMachine_Generic+0x40>
 8000da6:	e2bc      	b.n	8001322 <PE_SubStateMachine_Generic+0x5ba>
 8000da8:	2930      	cmp	r1, #48	; 0x30
 8000daa:	d100      	bne.n	8000dae <PE_SubStateMachine_Generic+0x46>
 8000dac:	e1de      	b.n	800116c <PE_SubStateMachine_Generic+0x404>
 8000dae:	293a      	cmp	r1, #58	; 0x3a
 8000db0:	d100      	bne.n	8000db4 <PE_SubStateMachine_Generic+0x4c>
 8000db2:	e28c      	b.n	80012ce <PE_SubStateMachine_Generic+0x566>
 8000db4:	293b      	cmp	r1, #59	; 0x3b
 8000db6:	d100      	bne.n	8000dba <PE_SubStateMachine_Generic+0x52>
 8000db8:	e270      	b.n	800129c <PE_SubStateMachine_Generic+0x534>
 8000dba:	293c      	cmp	r1, #60	; 0x3c
 8000dbc:	d100      	bne.n	8000dc0 <PE_SubStateMachine_Generic+0x58>
 8000dbe:	e247      	b.n	8001250 <PE_SubStateMachine_Generic+0x4e8>
 8000dc0:	294b      	cmp	r1, #75	; 0x4b
 8000dc2:	d100      	bne.n	8000dc6 <PE_SubStateMachine_Generic+0x5e>
 8000dc4:	e114      	b.n	8000ff0 <PE_SubStateMachine_Generic+0x288>
 8000dc6:	2963      	cmp	r1, #99	; 0x63
 8000dc8:	d100      	bne.n	8000dcc <PE_SubStateMachine_Generic+0x64>
 8000dca:	e178      	b.n	80010be <PE_SubStateMachine_Generic+0x356>
 8000dcc:	2964      	cmp	r1, #100	; 0x64
 8000dce:	d100      	bne.n	8000dd2 <PE_SubStateMachine_Generic+0x6a>
 8000dd0:	e1a0      	b.n	8001114 <PE_SubStateMachine_Generic+0x3ac>
 8000dd2:	2967      	cmp	r1, #103	; 0x67
 8000dd4:	d100      	bne.n	8000dd8 <PE_SubStateMachine_Generic+0x70>
 8000dd6:	e120      	b.n	800101a <PE_SubStateMachine_Generic+0x2b2>
 8000dd8:	2968      	cmp	r1, #104	; 0x68
 8000dda:	d100      	bne.n	8000dde <PE_SubStateMachine_Generic+0x76>
 8000ddc:	e138      	b.n	8001050 <PE_SubStateMachine_Generic+0x2e8>
 8000dde:	2974      	cmp	r1, #116	; 0x74
 8000de0:	d100      	bne.n	8000de4 <PE_SubStateMachine_Generic+0x7c>
 8000de2:	e1f3      	b.n	80011cc <PE_SubStateMachine_Generic+0x464>
 8000de4:	2993      	cmp	r1, #147	; 0x93
 8000de6:	d100      	bne.n	8000dea <PE_SubStateMachine_Generic+0x82>
 8000de8:	e0a6      	b.n	8000f38 <PE_SubStateMachine_Generic+0x1d0>
 8000dea:	2994      	cmp	r1, #148	; 0x94
 8000dec:	d100      	bne.n	8000df0 <PE_SubStateMachine_Generic+0x88>
 8000dee:	e0a7      	b.n	8000f40 <PE_SubStateMachine_Generic+0x1d8>
 8000df0:	2995      	cmp	r1, #149	; 0x95
 8000df2:	d100      	bne.n	8000df6 <PE_SubStateMachine_Generic+0x8e>
 8000df4:	e0bd      	b.n	8000f72 <PE_SubStateMachine_Generic+0x20a>
 8000df6:	2999      	cmp	r1, #153	; 0x99
 8000df8:	d000      	beq.n	8000dfc <PE_SubStateMachine_Generic+0x94>
 8000dfa:	e297      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8000dfc:	2106      	movs	r1, #6
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fd44 	bl	800088c <PE_Send_RESET>
 8000e04:	e220      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000e06:	6861      	ldr	r1, [r4, #4]
 8000e08:	6809      	ldr	r1, [r1, #0]
 8000e0a:	0889      	lsrs	r1, r1, #2
 8000e0c:	400e      	ands	r6, r1
 8000e0e:	d002      	beq.n	8000e16 <PE_SubStateMachine_Generic+0xae>
 8000e10:	6960      	ldr	r0, [r4, #20]
 8000e12:	0741      	lsls	r1, r0, #29
 8000e14:	0fc8      	lsrs	r0, r1, #31
 8000e16:	9000      	str	r0, [sp, #0]
 8000e18:	2319      	movs	r3, #25
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f000 fb76 	bl	8001510 <PE_Send_CtrlMessage>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d156      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000e28:	2007      	movs	r0, #7
 8000e2a:	e107      	b.n	800103c <PE_SubStateMachine_Generic+0x2d4>
 8000e2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e2e:	7800      	ldrb	r0, [r0, #0]
 8000e30:	2811      	cmp	r0, #17
 8000e32:	d13c      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e34:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e36:	0bc1      	lsrs	r1, r0, #15
 8000e38:	d11e      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e3a:	0441      	lsls	r1, r0, #17
 8000e3c:	0f49      	lsrs	r1, r1, #29
 8000e3e:	d01b      	beq.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e40:	06c0      	lsls	r0, r0, #27
 8000e42:	0ec0      	lsrs	r0, r0, #27
 8000e44:	2804      	cmp	r0, #4
 8000e46:	d117      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e48:	008b      	lsls	r3, r1, #2
 8000e4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e4c:	1c82      	adds	r2, r0, #2
 8000e4e:	2105      	movs	r1, #5
 8000e50:	7c20      	ldrb	r0, [r4, #16]
 8000e52:	68a6      	ldr	r6, [r4, #8]
 8000e54:	69b6      	ldr	r6, [r6, #24]
 8000e56:	47b0      	blx	r6
 8000e58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e5a:	7800      	ldrb	r0, [r0, #0]
 8000e5c:	2814      	cmp	r0, #20
 8000e5e:	d004      	beq.n	8000e6a <PE_SubStateMachine_Generic+0x102>
 8000e60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000e62:	700f      	strb	r7, [r1, #0]
 8000e64:	0020      	movs	r0, r4
 8000e66:	f7ff fd76 	bl	8000956 <PE_Clear_RxEvent>
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	7460      	strb	r0, [r4, #17]
 8000e6e:	9504      	str	r5, [sp, #16]
 8000e70:	2107      	movs	r1, #7
 8000e72:	7c20      	ldrb	r0, [r4, #16]
 8000e74:	f7ff fb04 	bl	8000480 <USBPD_PE_Notification>
 8000e78:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e7a:	21f0      	movs	r1, #240	; 0xf0
 8000e7c:	0209      	lsls	r1, r1, #8
 8000e7e:	4001      	ands	r1, r0
 8000e80:	d115      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e82:	06c0      	lsls	r0, r0, #27
 8000e84:	0ec0      	lsrs	r0, r0, #27
 8000e86:	2804      	cmp	r0, #4
 8000e88:	d001      	beq.n	8000e8e <PE_SubStateMachine_Generic+0x126>
 8000e8a:	2810      	cmp	r0, #16
 8000e8c:	d10f      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e8e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e90:	7800      	ldrb	r0, [r0, #0]
 8000e92:	2814      	cmp	r0, #20
 8000e94:	d004      	beq.n	8000ea0 <PE_SubStateMachine_Generic+0x138>
 8000e96:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e98:	7007      	strb	r7, [r0, #0]
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f7ff fd5b 	bl	8000956 <PE_Clear_RxEvent>
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	7460      	strb	r0, [r4, #17]
 8000ea4:	9504      	str	r5, [sp, #16]
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	7c20      	ldrb	r0, [r4, #16]
 8000eaa:	f7ff fae9 	bl	8000480 <USBPD_PE_Notification>
 8000eae:	8be0      	ldrh	r0, [r4, #30]
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0209      	lsls	r1, r1, #8
 8000eb4:	e099      	b.n	8000fea <PE_SubStateMachine_Generic+0x282>
 8000eb6:	9505      	str	r5, [sp, #20]
 8000eb8:	ab05      	add	r3, sp, #20
 8000eba:	aa06      	add	r2, sp, #24
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	7c20      	ldrb	r0, [r4, #16]
 8000ec0:	68a5      	ldr	r5, [r4, #8]
 8000ec2:	696d      	ldr	r5, [r5, #20]
 8000ec4:	47a8      	blx	r5
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	9805      	ldr	r0, [sp, #20]
 8000eca:	f000 fabf 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d002      	beq.n	8000ed8 <PE_SubStateMachine_Generic+0x170>
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	7460      	strb	r0, [r4, #17]
 8000ed6:	e22a      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000ed8:	9002      	str	r0, [sp, #8]
 8000eda:	2003      	movs	r0, #3
 8000edc:	9001      	str	r0, [sp, #4]
 8000ede:	9805      	ldr	r0, [sp, #20]
 8000ee0:	0880      	lsrs	r0, r0, #2
 8000ee2:	9000      	str	r0, [sp, #0]
 8000ee4:	ab06      	add	r3, sp, #24
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	0020      	movs	r0, r4
 8000eec:	f000 fb3b 	bl	8001566 <PE_Send_DataMessage>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	e165      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000ef8:	2012      	movs	r0, #18
 8000efa:	7720      	strb	r0, [r4, #28]
 8000efc:	2105      	movs	r1, #5
 8000efe:	7c20      	ldrb	r0, [r4, #16]
 8000f00:	f004 feab 	bl	8005c5a <USBDPD_PRL_BistCarrierEyeMode>
 8000f04:	2028      	movs	r0, #40	; 0x28
 8000f06:	7460      	strb	r0, [r4, #17]
 8000f08:	484f      	ldr	r0, [pc, #316]	; (8001048 <PE_SubStateMachine_Generic+0x2e0>)
 8000f0a:	83e0      	strh	r0, [r4, #30]
 8000f0c:	202d      	movs	r0, #45	; 0x2d
 8000f0e:	e099      	b.n	8001044 <PE_SubStateMachine_Generic+0x2dc>
 8000f10:	8be0      	ldrh	r0, [r4, #30]
 8000f12:	03f1      	lsls	r1, r6, #15
 8000f14:	4288      	cmp	r0, r1
 8000f16:	d10e      	bne.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f18:	2105      	movs	r1, #5
 8000f1a:	7c20      	ldrb	r0, [r4, #16]
 8000f1c:	f004 fea5 	bl	8005c6a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f20:	83e5      	strh	r5, [r4, #30]
 8000f22:	e191      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000f24:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f26:	7800      	ldrb	r0, [r0, #0]
 8000f28:	2814      	cmp	r0, #20
 8000f2a:	d004      	beq.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f2e:	7007      	strb	r7, [r0, #0]
 8000f30:	0020      	movs	r0, r4
 8000f32:	f7ff fd10 	bl	8000956 <PE_Clear_RxEvent>
 8000f36:	e1fa      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f38:	0020      	movs	r0, r4
 8000f3a:	f000 f9fb 	bl	8001334 <PE_SubStateMachine_ReceiveDRS>
 8000f3e:	e1f6      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f40:	6861      	ldr	r1, [r4, #4]
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	0889      	lsrs	r1, r1, #2
 8000f46:	400e      	ands	r6, r1
 8000f48:	d002      	beq.n	8000f50 <PE_SubStateMachine_Generic+0x1e8>
 8000f4a:	6960      	ldr	r0, [r4, #20]
 8000f4c:	0741      	lsls	r1, r0, #29
 8000f4e:	0fc8      	lsrs	r0, r1, #31
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	2395      	movs	r3, #149	; 0x95
 8000f54:	2209      	movs	r2, #9
 8000f56:	2100      	movs	r1, #0
 8000f58:	0020      	movs	r0, r4
 8000f5a:	f000 fad9 	bl	8001510 <PE_Send_CtrlMessage>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d1ed      	bne.n	8000f3e <PE_SubStateMachine_Generic+0x1d6>
 8000f62:	2010      	movs	r0, #16
 8000f64:	7720      	strb	r0, [r4, #28]
 8000f66:	4839      	ldr	r0, [pc, #228]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8000f68:	83e0      	strh	r0, [r4, #30]
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	9004      	str	r0, [sp, #16]
 8000f6e:	2122      	movs	r1, #34	; 0x22
 8000f70:	e128      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000f72:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f74:	7800      	ldrb	r0, [r0, #0]
 8000f76:	2814      	cmp	r0, #20
 8000f78:	d035      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f7a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000f7c:	21f0      	movs	r1, #240	; 0xf0
 8000f7e:	0209      	lsls	r1, r1, #8
 8000f80:	4001      	ands	r1, r0
 8000f82:	d130      	bne.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f84:	211f      	movs	r1, #31
 8000f86:	231f      	movs	r3, #31
 8000f88:	4003      	ands	r3, r0
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d006      	beq.n	8000f9c <PE_SubStateMachine_Generic+0x234>
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d008      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d006      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d015      	beq.n	8000fc6 <PE_SubStateMachine_Generic+0x25e>
 8000f9a:	e024      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f000 fa6d 	bl	800147c <PE_SwitchDataRole>
 8000fa2:	e008      	b.n	8000fb6 <PE_SubStateMachine_Generic+0x24e>
 8000fa4:	4001      	ands	r1, r0
 8000fa6:	290c      	cmp	r1, #12
 8000fa8:	d101      	bne.n	8000fae <PE_SubStateMachine_Generic+0x246>
 8000faa:	2126      	movs	r1, #38	; 0x26
 8000fac:	e000      	b.n	8000fb0 <PE_SubStateMachine_Generic+0x248>
 8000fae:	2127      	movs	r1, #39	; 0x27
 8000fb0:	7c20      	ldrb	r0, [r4, #16]
 8000fb2:	f7ff fa65 	bl	8000480 <USBPD_PE_Notification>
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	7460      	strb	r0, [r4, #17]
 8000fba:	9504      	str	r5, [sp, #16]
 8000fbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fbe:	7800      	ldrb	r0, [r0, #0]
 8000fc0:	2814      	cmp	r0, #20
 8000fc2:	d10b      	bne.n	8000fdc <PE_SubStateMachine_Generic+0x274>
 8000fc4:	e00f      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fc6:	2128      	movs	r1, #40	; 0x28
 8000fc8:	7c20      	ldrb	r0, [r4, #16]
 8000fca:	f7ff fa59 	bl	8000480 <USBPD_PE_Notification>
 8000fce:	2003      	movs	r0, #3
 8000fd0:	7460      	strb	r0, [r4, #17]
 8000fd2:	9504      	str	r5, [sp, #16]
 8000fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fd6:	7800      	ldrb	r0, [r0, #0]
 8000fd8:	2814      	cmp	r0, #20
 8000fda:	d004      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fde:	7007      	strb	r7, [r0, #0]
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff fcb8 	bl	8000956 <PE_Clear_RxEvent>
 8000fe6:	8be0      	ldrh	r0, [r4, #30]
 8000fe8:	03f1      	lsls	r1, r6, #15
 8000fea:	4288      	cmp	r0, r1
 8000fec:	d12b      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 8000fee:	e12b      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000ff0:	ab03      	add	r3, sp, #12
 8000ff2:	aa05      	add	r2, sp, #20
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	7c20      	ldrb	r0, [r4, #16]
 8000ff8:	68a5      	ldr	r5, [r4, #8]
 8000ffa:	696d      	ldr	r5, [r5, #20]
 8000ffc:	47a8      	blx	r5
 8000ffe:	9803      	ldr	r0, [sp, #12]
 8001000:	2800      	cmp	r0, #0
 8001002:	d100      	bne.n	8001006 <PE_SubStateMachine_Generic+0x29e>
 8001004:	e192      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001006:	2000      	movs	r0, #0
 8001008:	9002      	str	r0, [sp, #8]
 800100a:	2003      	movs	r0, #3
 800100c:	9001      	str	r0, [sp, #4]
 800100e:	9803      	ldr	r0, [sp, #12]
 8001010:	0880      	lsrs	r0, r0, #2
 8001012:	9000      	str	r0, [sp, #0]
 8001014:	ab05      	add	r3, sp, #20
 8001016:	220c      	movs	r2, #12
 8001018:	e154      	b.n	80012c4 <PE_SubStateMachine_Generic+0x55c>
 800101a:	6861      	ldr	r1, [r4, #4]
 800101c:	6809      	ldr	r1, [r1, #0]
 800101e:	0889      	lsrs	r1, r1, #2
 8001020:	4031      	ands	r1, r6
 8001022:	d000      	beq.n	8001026 <PE_SubStateMachine_Generic+0x2be>
 8001024:	2001      	movs	r0, #1
 8001026:	9000      	str	r0, [sp, #0]
 8001028:	2368      	movs	r3, #104	; 0x68
 800102a:	2218      	movs	r2, #24
 800102c:	2031      	movs	r0, #49	; 0x31
 800102e:	5c21      	ldrb	r1, [r4, r0]
 8001030:	0020      	movs	r0, r4
 8001032:	f000 fa6d 	bl	8001510 <PE_Send_CtrlMessage>
 8001036:	2800      	cmp	r0, #0
 8001038:	d105      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 800103a:	200f      	movs	r0, #15
 800103c:	7720      	strb	r0, [r4, #28]
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8001040:	83e0      	strh	r0, [r4, #30]
 8001042:	201b      	movs	r0, #27
 8001044:	9004      	str	r0, [sp, #16]
 8001046:	e172      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001048:	0000802d 	.word	0x0000802d
 800104c:	0000801b 	.word	0x0000801b
 8001050:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001052:	7800      	ldrb	r0, [r0, #0]
 8001054:	2814      	cmp	r0, #20
 8001056:	d023      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001058:	2030      	movs	r0, #48	; 0x30
 800105a:	5c20      	ldrb	r0, [r4, r0]
 800105c:	2131      	movs	r1, #49	; 0x31
 800105e:	5c61      	ldrb	r1, [r4, r1]
 8001060:	4288      	cmp	r0, r1
 8001062:	d11d      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001064:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001066:	0bc1      	lsrs	r1, r0, #15
 8001068:	d11a      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 800106a:	0b01      	lsrs	r1, r0, #12
 800106c:	0749      	lsls	r1, r1, #29
 800106e:	d017      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001070:	06c0      	lsls	r0, r0, #27
 8001072:	0ec0      	lsrs	r0, r0, #27
 8001074:	280c      	cmp	r0, #12
 8001076:	d113      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001078:	2304      	movs	r3, #4
 800107a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800107c:	1c82      	adds	r2, r0, #2
 800107e:	2114      	movs	r1, #20
 8001080:	7c20      	ldrb	r0, [r4, #16]
 8001082:	68a6      	ldr	r6, [r4, #8]
 8001084:	69b6      	ldr	r6, [r6, #24]
 8001086:	47b0      	blx	r6
 8001088:	2003      	movs	r0, #3
 800108a:	7460      	strb	r0, [r4, #17]
 800108c:	9504      	str	r5, [sp, #16]
 800108e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001090:	7800      	ldrb	r0, [r0, #0]
 8001092:	2814      	cmp	r0, #20
 8001094:	d004      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001096:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001098:	7007      	strb	r7, [r0, #0]
 800109a:	0020      	movs	r0, r4
 800109c:	f7ff fc5b 	bl	8000956 <PE_Clear_RxEvent>
 80010a0:	8be0      	ldrh	r0, [r4, #30]
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0209      	lsls	r1, r1, #8
 80010a6:	4288      	cmp	r0, r1
 80010a8:	d108      	bne.n	80010bc <PE_SubStateMachine_Generic+0x354>
 80010aa:	2011      	movs	r0, #17
 80010ac:	e0cd      	b.n	800124a <PE_SubStateMachine_Generic+0x4e2>
 80010ae:	9500      	str	r5, [sp, #0]
 80010b0:	2303      	movs	r3, #3
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	0020      	movs	r0, r4
 80010b8:	f000 fa2a 	bl	8001510 <PE_Send_CtrlMessage>
 80010bc:	e137      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80010be:	ab03      	add	r3, sp, #12
 80010c0:	48c9      	ldr	r0, [pc, #804]	; (80013e8 <.text_73>)
 80010c2:	1822      	adds	r2, r4, r0
 80010c4:	2108      	movs	r1, #8
 80010c6:	7c20      	ldrb	r0, [r4, #16]
 80010c8:	68a7      	ldr	r7, [r4, #8]
 80010ca:	697f      	ldr	r7, [r7, #20]
 80010cc:	47b8      	blx	r7
 80010ce:	2119      	movs	r1, #25
 80010d0:	9803      	ldr	r0, [sp, #12]
 80010d2:	f000 f9bb 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d129      	bne.n	800112e <PE_SubStateMachine_Generic+0x3c6>
 80010da:	48c4      	ldr	r0, [pc, #784]	; (80013ec <.text_74>)
 80010dc:	1826      	adds	r6, r4, r0
 80010de:	7035      	strb	r5, [r6, #0]
 80010e0:	7075      	strb	r5, [r6, #1]
 80010e2:	7c20      	ldrb	r0, [r4, #16]
 80010e4:	f7ff fe2e 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d103      	bne.n	80010f4 <PE_SubStateMachine_Generic+0x38c>
 80010ec:	7870      	ldrb	r0, [r6, #1]
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4301      	orrs	r1, r0
 80010f2:	7071      	strb	r1, [r6, #1]
 80010f4:	9502      	str	r5, [sp, #8]
 80010f6:	2003      	movs	r0, #3
 80010f8:	9001      	str	r0, [sp, #4]
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	b280      	uxth	r0, r0
 8001100:	9000      	str	r0, [sp, #0]
 8001102:	48bb      	ldr	r0, [pc, #748]	; (80013f0 <.text_75>)
 8001104:	1823      	adds	r3, r4, r0
 8001106:	2201      	movs	r2, #1
 8001108:	2100      	movs	r1, #0
 800110a:	0020      	movs	r0, r4
 800110c:	f000 fb5e 	bl	80017cc <PE_Send_ExtendedMessage>
 8001110:	2148      	movs	r1, #72	; 0x48
 8001112:	e057      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8001114:	ab03      	add	r3, sp, #12
 8001116:	48b4      	ldr	r0, [pc, #720]	; (80013e8 <.text_73>)
 8001118:	1822      	adds	r2, r4, r0
 800111a:	2113      	movs	r1, #19
 800111c:	7c20      	ldrb	r0, [r4, #16]
 800111e:	68a7      	ldr	r7, [r4, #8]
 8001120:	697f      	ldr	r7, [r7, #20]
 8001122:	47b8      	blx	r7
 8001124:	2118      	movs	r1, #24
 8001126:	9803      	ldr	r0, [sp, #12]
 8001128:	f000 f990 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800112c:	2800      	cmp	r0, #0
 800112e:	d000      	beq.n	8001132 <PE_SubStateMachine_Generic+0x3ca>
 8001130:	e0fc      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001132:	48ae      	ldr	r0, [pc, #696]	; (80013ec <.text_74>)
 8001134:	1826      	adds	r6, r4, r0
 8001136:	7035      	strb	r5, [r6, #0]
 8001138:	7075      	strb	r5, [r6, #1]
 800113a:	7c20      	ldrb	r0, [r4, #16]
 800113c:	f7ff fe02 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001140:	2800      	cmp	r0, #0
 8001142:	d103      	bne.n	800114c <PE_SubStateMachine_Generic+0x3e4>
 8001144:	7870      	ldrb	r0, [r6, #1]
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4301      	orrs	r1, r0
 800114a:	7071      	strb	r1, [r6, #1]
 800114c:	9502      	str	r5, [sp, #8]
 800114e:	2003      	movs	r0, #3
 8001150:	9001      	str	r0, [sp, #4]
 8001152:	9803      	ldr	r0, [sp, #12]
 8001154:	1d00      	adds	r0, r0, #4
 8001156:	b280      	uxth	r0, r0
 8001158:	9000      	str	r0, [sp, #0]
 800115a:	48a5      	ldr	r0, [pc, #660]	; (80013f0 <.text_75>)
 800115c:	1823      	adds	r3, r4, r0
 800115e:	220f      	movs	r2, #15
 8001160:	2100      	movs	r1, #0
 8001162:	0020      	movs	r0, r4
 8001164:	f000 fb32 	bl	80017cc <PE_Send_ExtendedMessage>
 8001168:	2161      	movs	r1, #97	; 0x61
 800116a:	e02b      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 800116c:	ab03      	add	r3, sp, #12
 800116e:	489e      	ldr	r0, [pc, #632]	; (80013e8 <.text_73>)
 8001170:	1822      	adds	r2, r4, r0
 8001172:	2109      	movs	r1, #9
 8001174:	7c20      	ldrb	r0, [r4, #16]
 8001176:	68a7      	ldr	r7, [r4, #8]
 8001178:	697f      	ldr	r7, [r7, #20]
 800117a:	47b8      	blx	r7
 800117c:	2107      	movs	r1, #7
 800117e:	9803      	ldr	r0, [sp, #12]
 8001180:	f000 f964 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001184:	2800      	cmp	r0, #0
 8001186:	d170      	bne.n	800126a <PE_SubStateMachine_Generic+0x502>
 8001188:	4998      	ldr	r1, [pc, #608]	; (80013ec <.text_74>)
 800118a:	5465      	strb	r5, [r4, r1]
 800118c:	1860      	adds	r0, r4, r1
 800118e:	7045      	strb	r5, [r0, #1]
 8001190:	7c20      	ldrb	r0, [r4, #16]
 8001192:	f7ff fdd7 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001196:	2800      	cmp	r0, #0
 8001198:	d105      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x43e>
 800119a:	4894      	ldr	r0, [pc, #592]	; (80013ec <.text_74>)
 800119c:	1820      	adds	r0, r4, r0
 800119e:	7841      	ldrb	r1, [r0, #1]
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	430a      	orrs	r2, r1
 80011a4:	7042      	strb	r2, [r0, #1]
 80011a6:	9502      	str	r5, [sp, #8]
 80011a8:	2003      	movs	r0, #3
 80011aa:	9001      	str	r0, [sp, #4]
 80011ac:	9803      	ldr	r0, [sp, #12]
 80011ae:	1d00      	adds	r0, r0, #4
 80011b0:	b280      	uxth	r0, r0
 80011b2:	9000      	str	r0, [sp, #0]
 80011b4:	488e      	ldr	r0, [pc, #568]	; (80013f0 <.text_75>)
 80011b6:	1823      	adds	r3, r4, r0
 80011b8:	2202      	movs	r2, #2
 80011ba:	2100      	movs	r1, #0
 80011bc:	0020      	movs	r0, r4
 80011be:	f000 fb05 	bl	80017cc <PE_Send_ExtendedMessage>
 80011c2:	214f      	movs	r1, #79	; 0x4f
 80011c4:	7c20      	ldrb	r0, [r4, #16]
 80011c6:	f7ff f95b 	bl	8000480 <USBPD_PE_Notification>
 80011ca:	e0b0      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80011cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80011ce:	7800      	ldrb	r0, [r0, #0]
 80011d0:	2814      	cmp	r0, #20
 80011d2:	d034      	beq.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 80011d4:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80011d6:	0bc1      	lsrs	r1, r0, #15
 80011d8:	d11a      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011da:	0b01      	lsrs	r1, r0, #12
 80011dc:	0749      	lsls	r1, r1, #29
 80011de:	d017      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e0:	06c0      	lsls	r0, r0, #27
 80011e2:	0ec0      	lsrs	r0, r0, #27
 80011e4:	2805      	cmp	r0, #5
 80011e6:	d113      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e8:	2304      	movs	r3, #4
 80011ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011ec:	1d02      	adds	r2, r0, #4
 80011ee:	210f      	movs	r1, #15
 80011f0:	7c20      	ldrb	r0, [r4, #16]
 80011f2:	68a6      	ldr	r6, [r4, #8]
 80011f4:	69b6      	ldr	r6, [r6, #24]
 80011f6:	47b0      	blx	r6
 80011f8:	2003      	movs	r0, #3
 80011fa:	7460      	strb	r0, [r4, #17]
 80011fc:	9504      	str	r5, [sp, #16]
 80011fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001200:	7800      	ldrb	r0, [r0, #0]
 8001202:	2814      	cmp	r0, #20
 8001204:	d004      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 8001206:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001208:	700f      	strb	r7, [r1, #0]
 800120a:	0020      	movs	r0, r4
 800120c:	f7ff fba3 	bl	8000956 <PE_Clear_RxEvent>
 8001210:	2034      	movs	r0, #52	; 0x34
 8001212:	5c20      	ldrb	r0, [r4, r0]
 8001214:	06c0      	lsls	r0, r0, #27
 8001216:	0ec0      	lsrs	r0, r0, #27
 8001218:	2810      	cmp	r0, #16
 800121a:	d110      	bne.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 800121c:	2159      	movs	r1, #89	; 0x59
 800121e:	7c20      	ldrb	r0, [r4, #16]
 8001220:	f7ff f92e 	bl	8000480 <USBPD_PE_Notification>
 8001224:	83e5      	strh	r5, [r4, #30]
 8001226:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001228:	7800      	ldrb	r0, [r0, #0]
 800122a:	2814      	cmp	r0, #20
 800122c:	d004      	beq.n	8001238 <PE_SubStateMachine_Generic+0x4d0>
 800122e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001230:	7007      	strb	r7, [r0, #0]
 8001232:	0020      	movs	r0, r4
 8001234:	f7ff fb8f 	bl	8000956 <PE_Clear_RxEvent>
 8001238:	2003      	movs	r0, #3
 800123a:	7460      	strb	r0, [r4, #17]
 800123c:	9504      	str	r5, [sp, #16]
 800123e:	8be0      	ldrh	r0, [r4, #30]
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0209      	lsls	r1, r1, #8
 8001244:	4288      	cmp	r0, r1
 8001246:	d172      	bne.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001248:	2003      	movs	r0, #3
 800124a:	7460      	strb	r0, [r4, #17]
 800124c:	9504      	str	r5, [sp, #16]
 800124e:	e06e      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001250:	ab03      	add	r3, sp, #12
 8001252:	4865      	ldr	r0, [pc, #404]	; (80013e8 <.text_73>)
 8001254:	1822      	adds	r2, r4, r0
 8001256:	210d      	movs	r1, #13
 8001258:	7c20      	ldrb	r0, [r4, #16]
 800125a:	68a7      	ldr	r7, [r4, #8]
 800125c:	697f      	ldr	r7, [r7, #20]
 800125e:	47b8      	blx	r7
 8001260:	2104      	movs	r1, #4
 8001262:	9803      	ldr	r0, [sp, #12]
 8001264:	f000 f8f2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001268:	2800      	cmp	r0, #0
 800126a:	d15f      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 800126c:	485f      	ldr	r0, [pc, #380]	; (80013ec <.text_74>)
 800126e:	1826      	adds	r6, r4, r0
 8001270:	7035      	strb	r5, [r6, #0]
 8001272:	7075      	strb	r5, [r6, #1]
 8001274:	7c20      	ldrb	r0, [r4, #16]
 8001276:	f7ff fd65 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800127a:	2800      	cmp	r0, #0
 800127c:	d103      	bne.n	8001286 <PE_SubStateMachine_Generic+0x51e>
 800127e:	7870      	ldrb	r0, [r6, #1]
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	4301      	orrs	r1, r0
 8001284:	7071      	strb	r1, [r6, #1]
 8001286:	9502      	str	r5, [sp, #8]
 8001288:	2003      	movs	r0, #3
 800128a:	9001      	str	r0, [sp, #4]
 800128c:	9803      	ldr	r0, [sp, #12]
 800128e:	1d00      	adds	r0, r0, #4
 8001290:	b280      	uxth	r0, r0
 8001292:	9000      	str	r0, [sp, #0]
 8001294:	4856      	ldr	r0, [pc, #344]	; (80013f0 <.text_75>)
 8001296:	1823      	adds	r3, r4, r0
 8001298:	2207      	movs	r2, #7
 800129a:	e03d      	b.n	8001318 <PE_SubStateMachine_Generic+0x5b0>
 800129c:	9505      	str	r5, [sp, #20]
 800129e:	ab03      	add	r3, sp, #12
 80012a0:	aa05      	add	r2, sp, #20
 80012a2:	210f      	movs	r1, #15
 80012a4:	7c20      	ldrb	r0, [r4, #16]
 80012a6:	68a5      	ldr	r5, [r4, #8]
 80012a8:	696d      	ldr	r5, [r5, #20]
 80012aa:	47a8      	blx	r5
 80012ac:	2104      	movs	r1, #4
 80012ae:	9803      	ldr	r0, [sp, #12]
 80012b0:	f000 f8cc 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d139      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012b8:	9002      	str	r0, [sp, #8]
 80012ba:	2003      	movs	r0, #3
 80012bc:	9001      	str	r0, [sp, #4]
 80012be:	9600      	str	r6, [sp, #0]
 80012c0:	ab05      	add	r3, sp, #20
 80012c2:	2205      	movs	r2, #5
 80012c4:	2100      	movs	r1, #0
 80012c6:	0020      	movs	r0, r4
 80012c8:	f000 f94d 	bl	8001566 <PE_Send_DataMessage>
 80012cc:	e02f      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80012ce:	ab03      	add	r3, sp, #12
 80012d0:	4845      	ldr	r0, [pc, #276]	; (80013e8 <.text_73>)
 80012d2:	1822      	adds	r2, r4, r0
 80012d4:	2111      	movs	r1, #17
 80012d6:	7c20      	ldrb	r0, [r4, #16]
 80012d8:	68a7      	ldr	r7, [r4, #8]
 80012da:	697f      	ldr	r7, [r7, #20]
 80012dc:	47b8      	blx	r7
 80012de:	2109      	movs	r1, #9
 80012e0:	9803      	ldr	r0, [sp, #12]
 80012e2:	f000 f8b3 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d120      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012ea:	4840      	ldr	r0, [pc, #256]	; (80013ec <.text_74>)
 80012ec:	1826      	adds	r6, r4, r0
 80012ee:	7035      	strb	r5, [r6, #0]
 80012f0:	7075      	strb	r5, [r6, #1]
 80012f2:	7c20      	ldrb	r0, [r4, #16]
 80012f4:	f7ff fd26 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d103      	bne.n	8001304 <PE_SubStateMachine_Generic+0x59c>
 80012fc:	7870      	ldrb	r0, [r6, #1]
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4301      	orrs	r1, r0
 8001302:	7071      	strb	r1, [r6, #1]
 8001304:	9502      	str	r5, [sp, #8]
 8001306:	2003      	movs	r0, #3
 8001308:	9001      	str	r0, [sp, #4]
 800130a:	9803      	ldr	r0, [sp, #12]
 800130c:	1d00      	adds	r0, r0, #4
 800130e:	b280      	uxth	r0, r0
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	4837      	ldr	r0, [pc, #220]	; (80013f0 <.text_75>)
 8001314:	1823      	adds	r3, r4, r0
 8001316:	2205      	movs	r2, #5
 8001318:	2100      	movs	r1, #0
 800131a:	0020      	movs	r0, r4
 800131c:	f000 fa56 	bl	80017cc <PE_Send_ExtendedMessage>
 8001320:	e005      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001322:	2150      	movs	r1, #80	; 0x50
 8001324:	7c20      	ldrb	r0, [r4, #16]
 8001326:	f7ff f8ab 	bl	8000480 <USBPD_PE_Notification>
 800132a:	e78d      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 800132c:	7466      	strb	r6, [r4, #17]
 800132e:	9804      	ldr	r0, [sp, #16]
 8001330:	b00f      	add	sp, #60	; 0x3c
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001334 <PE_SubStateMachine_ReceiveDRS>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	0004      	movs	r4, r0
 8001338:	252a      	movs	r5, #42	; 0x2a
 800133a:	7c20      	ldrb	r0, [r4, #16]
 800133c:	68a1      	ldr	r1, [r4, #8]
 800133e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001340:	4788      	blx	r1
 8001342:	280a      	cmp	r0, #10
 8001344:	d002      	beq.n	800134c <PE_SubStateMachine_ReceiveDRS+0x18>
 8001346:	280c      	cmp	r0, #12
 8001348:	d017      	beq.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 800134a:	e00d      	b.n	8001368 <PE_SubStateMachine_ReceiveDRS+0x34>
 800134c:	2000      	movs	r0, #0
 800134e:	9000      	str	r0, [sp, #0]
 8001350:	2303      	movs	r3, #3
 8001352:	2203      	movs	r2, #3
 8001354:	2100      	movs	r1, #0
 8001356:	0020      	movs	r0, r4
 8001358:	f000 f8da 	bl	8001510 <PE_Send_CtrlMessage>
 800135c:	2800      	cmp	r0, #0
 800135e:	d10d      	bne.n	800137c <PE_SubStateMachine_ReceiveDRS+0x48>
 8001360:	0020      	movs	r0, r4
 8001362:	f000 f88b 	bl	800147c <PE_SwitchDataRole>
 8001366:	bd31      	pop	{r0, r4, r5, pc}
 8001368:	6860      	ldr	r0, [r4, #4]
 800136a:	7800      	ldrb	r0, [r0, #0]
 800136c:	0780      	lsls	r0, r0, #30
 800136e:	0f80      	lsrs	r0, r0, #30
 8001370:	2802      	cmp	r0, #2
 8001372:	d102      	bne.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 8001374:	2001      	movs	r0, #1
 8001376:	7460      	strb	r0, [r4, #17]
 8001378:	bd31      	pop	{r0, r4, r5, pc}
 800137a:	7465      	strb	r5, [r4, #17]
 800137c:	bd31      	pop	{r0, r4, r5, pc}

0800137e <PE_UpdateTimer>:
 800137e:	b510      	push	{r4, lr}
 8001380:	0002      	movs	r2, r0
 8001382:	2080      	movs	r0, #128	; 0x80
 8001384:	0200      	lsls	r0, r0, #8
 8001386:	0454      	lsls	r4, r2, #17
 8001388:	0c64      	lsrs	r4, r4, #17
 800138a:	42a1      	cmp	r1, r4
 800138c:	da00      	bge.n	8001390 <PE_UpdateTimer+0x12>
 800138e:	1a50      	subs	r0, r2, r1
 8001390:	b280      	uxth	r0, r0
 8001392:	bd10      	pop	{r4, pc}

08001394 <PE_CallHardResetCallback>:
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <PE_CallHardResetCallback+0xa>
 800139c:	4770      	bx	lr
 800139e:	b580      	push	{r7, lr}
 80013a0:	7c00      	ldrb	r0, [r0, #16]
 80013a2:	4798      	blx	r3
 80013a4:	bd01      	pop	{r0, pc}

080013a6 <PE_SetPowerNegotiation>:
 80013a6:	b510      	push	{r4, lr}
 80013a8:	6842      	ldr	r2, [r0, #4]
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	055c      	lsls	r4, r3, #21
 80013ae:	0f64      	lsrs	r4, r4, #29
 80013b0:	42a1      	cmp	r1, r4
 80013b2:	d00b      	beq.n	80013cc <PE_SetPowerNegotiation+0x26>
 80013b4:	4c2e      	ldr	r4, [pc, #184]	; (8001470 <.text_79>)
 80013b6:	401c      	ands	r4, r3
 80013b8:	0209      	lsls	r1, r1, #8
 80013ba:	23e0      	movs	r3, #224	; 0xe0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	400b      	ands	r3, r1
 80013c0:	4323      	orrs	r3, r4
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	215a      	movs	r1, #90	; 0x5a
 80013c6:	7c00      	ldrb	r0, [r0, #16]
 80013c8:	f7ff f85a 	bl	8000480 <USBPD_PE_Notification>
 80013cc:	bd10      	pop	{r4, pc}

080013ce <USBPD_PE_ExecFastRoleSwapSignalling>:
 80013ce:	b580      	push	{r7, lr}
 80013d0:	4928      	ldr	r1, [pc, #160]	; (8001474 <.text_80>)
 80013d2:	0082      	lsls	r2, r0, #2
 80013d4:	5889      	ldr	r1, [r1, r2]
 80013d6:	694a      	ldr	r2, [r1, #20]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4313      	orrs	r3, r2
 80013de:	614b      	str	r3, [r1, #20]
 80013e0:	6889      	ldr	r1, [r1, #8]
 80013e2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80013e4:	4788      	blx	r1
 80013e6:	bd01      	pop	{r0, pc}

080013e8 <.text_73>:
 80013e8:	00000267 	.word	0x00000267

080013ec <.text_74>:
 80013ec:	00000265 	.word	0x00000265

080013f0 <.text_75>:
 80013f0:	00000263 	.word	0x00000263

080013f4 <PE_CalculateMinTiming>:
 80013f4:	0001      	movs	r1, r0
 80013f6:	2000      	movs	r0, #0
 80013f8:	43c0      	mvns	r0, r0
 80013fa:	0c42      	lsrs	r2, r0, #17
 80013fc:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 80013fe:	4213      	tst	r3, r2
 8001400:	d001      	beq.n	8001406 <PE_CalculateMinTiming+0x12>
 8001402:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8001404:	4010      	ands	r0, r2
 8001406:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8001408:	4213      	tst	r3, r2
 800140a:	d006      	beq.n	800141a <PE_CalculateMinTiming+0x26>
 800140c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800140e:	4013      	ands	r3, r2
 8001410:	4298      	cmp	r0, r3
 8001412:	d302      	bcc.n	800141a <PE_CalculateMinTiming+0x26>
 8001414:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8001416:	0010      	movs	r0, r2
 8001418:	4008      	ands	r0, r1
 800141a:	4770      	bx	lr

0800141c <PE_SetPowerNegociation>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	0005      	movs	r5, r0
 8001420:	000c      	movs	r4, r1
 8001422:	6868      	ldr	r0, [r5, #4]
 8001424:	6800      	ldr	r0, [r0, #0]
 8001426:	0540      	lsls	r0, r0, #21
 8001428:	0f40      	lsrs	r0, r0, #29
 800142a:	4284      	cmp	r4, r0
 800142c:	d003      	beq.n	8001436 <PE_SetPowerNegociation+0x1a>
 800142e:	215a      	movs	r1, #90	; 0x5a
 8001430:	7c28      	ldrb	r0, [r5, #16]
 8001432:	f7ff f825 	bl	8000480 <USBPD_PE_Notification>
 8001436:	6868      	ldr	r0, [r5, #4]
 8001438:	6801      	ldr	r1, [r0, #0]
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <.text_79>)
 800143c:	400a      	ands	r2, r1
 800143e:	0221      	lsls	r1, r4, #8
 8001440:	23e0      	movs	r3, #224	; 0xe0
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	400b      	ands	r3, r1
 8001446:	4313      	orrs	r3, r2
 8001448:	6003      	str	r3, [r0, #0]
 800144a:	bd31      	pop	{r0, r4, r5, pc}

0800144c <PE_CheckDataSizeFromGetDataInfo>:
 800144c:	b51c      	push	{r2, r3, r4, lr}
 800144e:	0002      	movs	r2, r0
 8001450:	2000      	movs	r0, #0
 8001452:	428a      	cmp	r2, r1
 8001454:	d20a      	bcs.n	800146c <PE_CheckDataSizeFromGetDataInfo+0x20>
 8001456:	2018      	movs	r0, #24
 8001458:	9000      	str	r0, [sp, #0]
 800145a:	bf00      	nop
 800145c:	a315      	add	r3, pc, #84	; (adr r3, 80014b4 <.text_83>)
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2006      	movs	r0, #6
 8001464:	4c04      	ldr	r4, [pc, #16]	; (8001478 <.text_81>)
 8001466:	6824      	ldr	r4, [r4, #0]
 8001468:	47a0      	blx	r4
 800146a:	2002      	movs	r0, #2
 800146c:	bd16      	pop	{r1, r2, r4, pc}
	...

08001470 <.text_79>:
 8001470:	fffff8ff 	.word	0xfffff8ff

08001474 <.text_80>:
 8001474:	20000304 	.word	0x20000304

08001478 <.text_81>:
 8001478:	20000000 	.word	0x20000000

0800147c <PE_SwitchDataRole>:
 800147c:	b510      	push	{r4, lr}
 800147e:	0004      	movs	r4, r0
 8001480:	6860      	ldr	r0, [r4, #4]
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	08d3      	lsrs	r3, r2, #3
 8001488:	400b      	ands	r3, r1
 800148a:	d107      	bne.n	800149c <PE_SwitchDataRole+0x20>
 800148c:	2308      	movs	r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	6003      	str	r3, [r0, #0]
 8001492:	7c20      	ldrb	r0, [r4, #16]
 8001494:	f004 f93b 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 8001498:	2125      	movs	r1, #37	; 0x25
 800149a:	e007      	b.n	80014ac <PE_SwitchDataRole+0x30>
 800149c:	2108      	movs	r1, #8
 800149e:	438a      	bics	r2, r1
 80014a0:	6002      	str	r2, [r0, #0]
 80014a2:	2100      	movs	r1, #0
 80014a4:	7c20      	ldrb	r0, [r4, #16]
 80014a6:	f004 f932 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 80014aa:	2124      	movs	r1, #36	; 0x24
 80014ac:	7c20      	ldrb	r0, [r4, #16]
 80014ae:	f7fe ffe7 	bl	8000480 <USBPD_PE_Notification>
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <.text_83>:
 80014b4:	61746144 	.word	0x61746144
 80014b8:	7a695320 	.word	0x7a695320
 80014bc:	73692065 	.word	0x73692065
 80014c0:	746f6e20 	.word	0x746f6e20
 80014c4:	726f6320 	.word	0x726f6320
 80014c8:	74636572 	.word	0x74636572
 80014cc:	00          	.byte	0x00
 80014cd:	00          	.byte	0x00
	...

080014d0 <USBPD_PE_SetTrace>:
 80014d0:	0001      	movs	r1, r0
 80014d2:	d100      	bne.n	80014d6 <USBPD_PE_SetTrace+0x6>
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <.text_5>)
 80014d6:	4906      	ldr	r1, [pc, #24]	; (80014f0 <.text_6>)
 80014d8:	6008      	str	r0, [r1, #0]
 80014da:	4770      	bx	lr

080014dc <USBPD_PE_CheckLIB>:
 80014dc:	0001      	movs	r1, r0
 80014de:	2000      	movs	r0, #0
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <.text_7>)
 80014e2:	4291      	cmp	r1, r2
 80014e4:	d100      	bne.n	80014e8 <USBPD_PE_CheckLIB+0xc>
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
	...

080014ec <.text_5>:
 80014ec:	0800150f 	.word	0x0800150f

080014f0 <.text_6>:
 80014f0:	20000000 	.word	0x20000000

080014f4 <.text_7>:
 80014f4:	30410000 	.word	0x30410000

080014f8 <USBPD_PE_GetMemoryConsumption>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	f004 f8df 	bl	80056bc <USBPD_PRL_GetMemoryConsumption>
 80014fe:	0004      	movs	r4, r0
 8001500:	f7fe fedd 	bl	80002be <USBPD_CAD_GetMemoryConsumption>
 8001504:	1820      	adds	r0, r4, r0
 8001506:	21e1      	movs	r1, #225	; 0xe1
 8001508:	0109      	lsls	r1, r1, #4
 800150a:	1840      	adds	r0, r0, r1
 800150c:	bd10      	pop	{r4, pc}

0800150e <PE_Trace_Empty>:
 800150e:	4770      	bx	lr

08001510 <PE_Send_CtrlMessage>:
 8001510:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001512:	2501      	movs	r5, #1
 8001514:	0004      	movs	r4, r0
 8001516:	000f      	movs	r7, r1
 8001518:	0016      	movs	r6, r2
 800151a:	6860      	ldr	r0, [r4, #4]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	0b00      	lsrs	r0, r0, #12
 8001520:	4028      	ands	r0, r5
 8001522:	d014      	beq.n	800154e <PE_Send_CtrlMessage+0x3e>
 8001524:	a808      	add	r0, sp, #32
 8001526:	7800      	ldrb	r0, [r0, #0]
 8001528:	9001      	str	r0, [sp, #4]
 800152a:	2002      	movs	r0, #2
 800152c:	9000      	str	r0, [sp, #0]
 800152e:	48a2      	ldr	r0, [pc, #648]	; (80017b8 <.text_5>)
 8001530:	1823      	adds	r3, r4, r0
 8001532:	0032      	movs	r2, r6
 8001534:	0039      	movs	r1, r7
 8001536:	7c20      	ldrb	r0, [r4, #16]
 8001538:	f004 f938 	bl	80057ac <USBPD_PRL_SendMessage>
 800153c:	2803      	cmp	r0, #3
 800153e:	d0ec      	beq.n	800151a <PE_Send_CtrlMessage+0xa>
 8001540:	0039      	movs	r1, r7
 8001542:	2810      	cmp	r0, #16
 8001544:	d00e      	beq.n	8001564 <PE_Send_CtrlMessage+0x54>
 8001546:	2e0d      	cmp	r6, #13
 8001548:	d104      	bne.n	8001554 <PE_Send_CtrlMessage+0x44>
 800154a:	2201      	movs	r2, #1
 800154c:	e003      	b.n	8001556 <PE_Send_CtrlMessage+0x46>
 800154e:	7460      	strb	r0, [r4, #17]
 8001550:	2010      	movs	r0, #16
 8001552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001554:	2200      	movs	r2, #0
 8001556:	466b      	mov	r3, sp
 8001558:	7a1b      	ldrb	r3, [r3, #8]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	0003      	movs	r3, r0
 800155e:	0020      	movs	r0, r4
 8001560:	f000 fc24 	bl	8001dac <PE_CheckSendMessageStatus>
 8001564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001566 <PE_Send_DataMessage>:
 8001566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	0004      	movs	r4, r0
 800156c:	2000      	movs	r0, #0
 800156e:	4e93      	ldr	r6, [pc, #588]	; (80017bc <.text_6>)
 8001570:	e00c      	b.n	800158c <PE_Send_DataMessage+0x26>
 8001572:	2100      	movs	r1, #0
 8001574:	0082      	lsls	r2, r0, #2
 8001576:	18a2      	adds	r2, r4, r2
 8001578:	1855      	adds	r5, r2, r1
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	00cf      	lsls	r7, r1, #3
 800157e:	40fa      	lsrs	r2, r7
 8001580:	55aa      	strb	r2, [r5, r6]
 8001582:	1c49      	adds	r1, r1, #1
 8001584:	2904      	cmp	r1, #4
 8001586:	d3f5      	bcc.n	8001574 <PE_Send_DataMessage+0xe>
 8001588:	1d1b      	adds	r3, r3, #4
 800158a:	1c40      	adds	r0, r0, #1
 800158c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800158e:	4288      	cmp	r0, r1
 8001590:	d3ef      	bcc.n	8001572 <PE_Send_DataMessage+0xc>
 8001592:	6860      	ldr	r0, [r4, #4]
 8001594:	6800      	ldr	r0, [r0, #0]
 8001596:	04c1      	lsls	r1, r0, #19
 8001598:	0fc9      	lsrs	r1, r1, #31
 800159a:	d01f      	beq.n	80015dc <PE_Send_DataMessage+0x76>
 800159c:	a80c      	add	r0, sp, #48	; 0x30
 800159e:	7800      	ldrb	r0, [r0, #0]
 80015a0:	9001      	str	r0, [sp, #4]
 80015a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80015a4:	0080      	lsls	r0, r0, #2
 80015a6:	1c80      	adds	r0, r0, #2
 80015a8:	b280      	uxth	r0, r0
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	1eb0      	subs	r0, r6, #2
 80015ae:	1823      	adds	r3, r4, r0
 80015b0:	4668      	mov	r0, sp
 80015b2:	7c02      	ldrb	r2, [r0, #16]
 80015b4:	7b01      	ldrb	r1, [r0, #12]
 80015b6:	7c20      	ldrb	r0, [r4, #16]
 80015b8:	f004 f8f8 	bl	80057ac <USBPD_PRL_SendMessage>
 80015bc:	2803      	cmp	r0, #3
 80015be:	d0e8      	beq.n	8001592 <PE_Send_DataMessage+0x2c>
 80015c0:	4669      	mov	r1, sp
 80015c2:	7b09      	ldrb	r1, [r1, #12]
 80015c4:	2810      	cmp	r0, #16
 80015c6:	d007      	beq.n	80015d8 <PE_Send_DataMessage+0x72>
 80015c8:	aa0b      	add	r2, sp, #44	; 0x2c
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	0003      	movs	r3, r0
 80015d0:	2200      	movs	r2, #0
 80015d2:	0020      	movs	r0, r4
 80015d4:	f000 fbea 	bl	8001dac <PE_CheckSendMessageStatus>
 80015d8:	b005      	add	sp, #20
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2010      	movs	r0, #16
 80015de:	e7fb      	b.n	80015d8 <PE_Send_DataMessage+0x72>

080015e0 <PE_Check_ExtendedMessage>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	0004      	movs	r4, r0
 80015e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015e6:	7881      	ldrb	r1, [r0, #2]
 80015e8:	78c0      	ldrb	r0, [r0, #3]
 80015ea:	0200      	lsls	r0, r0, #8
 80015ec:	1808      	adds	r0, r1, r0
 80015ee:	4974      	ldr	r1, [pc, #464]	; (80017c0 <.text_7>)
 80015f0:	1861      	adds	r1, r4, r1
 80015f2:	8008      	strh	r0, [r1, #0]
 80015f4:	2234      	movs	r2, #52	; 0x34
 80015f6:	5ca2      	ldrb	r2, [r4, r2]
 80015f8:	06d2      	lsls	r2, r2, #27
 80015fa:	0ed2      	lsrs	r2, r2, #27
 80015fc:	708a      	strb	r2, [r1, #2]
 80015fe:	2501      	movs	r5, #1
 8001600:	0403      	lsls	r3, r0, #16
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	2201      	movs	r2, #1
 8001606:	401a      	ands	r2, r3
 8001608:	0403      	lsls	r3, r0, #16
 800160a:	0edb      	lsrs	r3, r3, #27
 800160c:	071b      	lsls	r3, r3, #28
 800160e:	d003      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001610:	0013      	movs	r3, r2
 8001612:	d001      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001614:	2034      	movs	r0, #52	; 0x34
 8001616:	e09e      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001618:	05c6      	lsls	r6, r0, #23
 800161a:	0df6      	lsrs	r6, r6, #23
 800161c:	2300      	movs	r3, #0
 800161e:	0407      	lsls	r7, r0, #16
 8001620:	0fff      	lsrs	r7, r7, #31
 8001622:	d10d      	bne.n	8001640 <PE_Check_ExtendedMessage+0x60>
 8001624:	4867      	ldr	r0, [pc, #412]	; (80017c4 <.text_8>)
 8001626:	5226      	strh	r6, [r4, r0]
 8001628:	4866      	ldr	r0, [pc, #408]	; (80017c4 <.text_8>)
 800162a:	5a20      	ldrh	r0, [r4, r0]
 800162c:	4283      	cmp	r3, r0
 800162e:	d21b      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001630:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001632:	1d00      	adds	r0, r0, #4
 8001634:	5cc0      	ldrb	r0, [r0, r3]
 8001636:	4a64      	ldr	r2, [pc, #400]	; (80017c8 <.text_9>)
 8001638:	18a2      	adds	r2, r4, r2
 800163a:	54d0      	strb	r0, [r2, r3]
 800163c:	1c5b      	adds	r3, r3, #1
 800163e:	e7f3      	b.n	8001628 <PE_Check_ExtendedMessage+0x48>
 8001640:	27f8      	movs	r7, #248	; 0xf8
 8001642:	01ff      	lsls	r7, r7, #7
 8001644:	4007      	ands	r7, r0
 8001646:	d106      	bne.n	8001656 <PE_Check_ExtendedMessage+0x76>
 8001648:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800164a:	0440      	lsls	r0, r0, #17
 800164c:	0f40      	lsrs	r0, r0, #29
 800164e:	2807      	cmp	r0, #7
 8001650:	d30a      	bcc.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001652:	2e1a      	cmp	r6, #26
 8001654:	d908      	bls.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001656:	2a00      	cmp	r2, #0
 8001658:	d106      	bne.n	8001668 <PE_Check_ExtendedMessage+0x88>
 800165a:	485a      	ldr	r0, [pc, #360]	; (80017c4 <.text_8>)
 800165c:	5a20      	ldrh	r0, [r4, r0]
 800165e:	42b0      	cmp	r0, r6
 8001660:	d202      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001662:	83e3      	strh	r3, [r4, #30]
 8001664:	2037      	movs	r0, #55	; 0x37
 8001666:	e076      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001668:	7889      	ldrb	r1, [r1, #2]
 800166a:	2603      	movs	r6, #3
 800166c:	7f22      	ldrb	r2, [r4, #28]
 800166e:	2a00      	cmp	r2, #0
 8001670:	d039      	beq.n	80016e6 <PE_Check_ExtendedMessage+0x106>
 8001672:	2901      	cmp	r1, #1
 8001674:	d008      	beq.n	8001688 <PE_Check_ExtendedMessage+0xa8>
 8001676:	2902      	cmp	r1, #2
 8001678:	d01c      	beq.n	80016b4 <PE_Check_ExtendedMessage+0xd4>
 800167a:	2905      	cmp	r1, #5
 800167c:	d02a      	beq.n	80016d4 <PE_Check_ExtendedMessage+0xf4>
 800167e:	2907      	cmp	r1, #7
 8001680:	d023      	beq.n	80016ca <PE_Check_ExtendedMessage+0xea>
 8001682:	290f      	cmp	r1, #15
 8001684:	d00b      	beq.n	800169e <PE_Check_ExtendedMessage+0xbe>
 8001686:	e094      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001688:	2319      	movs	r3, #25
 800168a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800168c:	1d02      	adds	r2, r0, #4
 800168e:	2108      	movs	r1, #8
 8001690:	7c20      	ldrb	r0, [r4, #16]
 8001692:	68a7      	ldr	r7, [r4, #8]
 8001694:	69bf      	ldr	r7, [r7, #24]
 8001696:	47b8      	blx	r7
 8001698:	7466      	strb	r6, [r4, #17]
 800169a:	2147      	movs	r1, #71	; 0x47
 800169c:	e014      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 800169e:	2318      	movs	r3, #24
 80016a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016a2:	1d02      	adds	r2, r0, #4
 80016a4:	2113      	movs	r1, #19
 80016a6:	7c20      	ldrb	r0, [r4, #16]
 80016a8:	68a7      	ldr	r7, [r4, #8]
 80016aa:	69bf      	ldr	r7, [r7, #24]
 80016ac:	47b8      	blx	r7
 80016ae:	7466      	strb	r6, [r4, #17]
 80016b0:	2162      	movs	r1, #98	; 0x62
 80016b2:	e009      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 80016b4:	2307      	movs	r3, #7
 80016b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016b8:	1d02      	adds	r2, r0, #4
 80016ba:	2109      	movs	r1, #9
 80016bc:	7c20      	ldrb	r0, [r4, #16]
 80016be:	68a7      	ldr	r7, [r4, #8]
 80016c0:	69bf      	ldr	r7, [r7, #24]
 80016c2:	47b8      	blx	r7
 80016c4:	7466      	strb	r6, [r4, #17]
 80016c6:	214e      	movs	r1, #78	; 0x4e
 80016c8:	e2c7      	b.n	8001c5a <.text_21>
 80016ca:	231a      	movs	r3, #26
 80016cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016ce:	1d02      	adds	r2, r0, #4
 80016d0:	210d      	movs	r1, #13
 80016d2:	e003      	b.n	80016dc <PE_Check_ExtendedMessage+0xfc>
 80016d4:	2309      	movs	r3, #9
 80016d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016d8:	1d02      	adds	r2, r0, #4
 80016da:	2111      	movs	r1, #17
 80016dc:	7c20      	ldrb	r0, [r4, #16]
 80016de:	68a7      	ldr	r7, [r4, #8]
 80016e0:	69bf      	ldr	r7, [r7, #24]
 80016e2:	47b8      	blx	r7
 80016e4:	e063      	b.n	80017ae <PE_Check_ExtendedMessage+0x1ce>
 80016e6:	1ec8      	subs	r0, r1, #3
 80016e8:	2808      	cmp	r0, #8
 80016ea:	d862      	bhi.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <PE_Check_ExtendedMessage+0x114>)
 80016ee:	5c12      	ldrb	r2, [r2, r0]
 80016f0:	4497      	add	pc, r2
 80016f2:	bf00      	nop
 80016f4:	46be280a 	.word	0x46be280a
 80016f8:	669884be 	.word	0x669884be
 80016fc:	006e      	.short	0x006e
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	8900      	ldrh	r0, [r0, #8]
 8001702:	0b00      	lsrs	r0, r0, #12
 8001704:	4228      	tst	r0, r5
 8001706:	d054      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001708:	2301      	movs	r3, #1
 800170a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800170c:	1d02      	adds	r2, r0, #4
 800170e:	2110      	movs	r1, #16
 8001710:	7c20      	ldrb	r0, [r4, #16]
 8001712:	68a5      	ldr	r5, [r4, #8]
 8001714:	69ad      	ldr	r5, [r5, #24]
 8001716:	47a8      	blx	r5
 8001718:	203a      	movs	r0, #58	; 0x3a
 800171a:	e01c      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	8900      	ldrh	r0, [r0, #8]
 8001720:	0b00      	lsrs	r0, r0, #12
 8001722:	4228      	tst	r0, r5
 8001724:	d045      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001726:	2301      	movs	r3, #1
 8001728:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800172a:	1d02      	adds	r2, r0, #4
 800172c:	210e      	movs	r1, #14
 800172e:	7c20      	ldrb	r0, [r4, #16]
 8001730:	68a5      	ldr	r5, [r4, #8]
 8001732:	69ad      	ldr	r5, [r5, #24]
 8001734:	47a8      	blx	r5
 8001736:	203b      	movs	r0, #59	; 0x3b
 8001738:	e00d      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	8900      	ldrh	r0, [r0, #8]
 800173e:	0980      	lsrs	r0, r0, #6
 8001740:	4228      	tst	r0, r5
 8001742:	d036      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001744:	2302      	movs	r3, #2
 8001746:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001748:	1d02      	adds	r2, r0, #4
 800174a:	210c      	movs	r1, #12
 800174c:	7c20      	ldrb	r0, [r4, #16]
 800174e:	68a5      	ldr	r5, [r4, #8]
 8001750:	69ad      	ldr	r5, [r5, #24]
 8001752:	47a8      	blx	r5
 8001754:	203c      	movs	r0, #60	; 0x3c
 8001756:	7460      	strb	r0, [r4, #17]
 8001758:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	8900      	ldrh	r0, [r0, #8]
 800175e:	0a80      	lsrs	r0, r0, #10
 8001760:	e00d      	b.n	800177e <PE_Check_ExtendedMessage+0x19e>
 8001762:	68a0      	ldr	r0, [r4, #8]
 8001764:	6905      	ldr	r5, [r0, #16]
 8001766:	2d00      	cmp	r5, #0
 8001768:	d024      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800176a:	4816      	ldr	r0, [pc, #88]	; (80017c4 <.text_8>)
 800176c:	5a23      	ldrh	r3, [r4, r0]
 800176e:	4816      	ldr	r0, [pc, #88]	; (80017c8 <.text_9>)
 8001770:	1822      	adds	r2, r4, r0
 8001772:	7c20      	ldrb	r0, [r4, #16]
 8001774:	47a8      	blx	r5
 8001776:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	8900      	ldrh	r0, [r0, #8]
 800177c:	0a40      	lsrs	r0, r0, #9
 800177e:	4228      	tst	r0, r5
 8001780:	d017      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001782:	68a0      	ldr	r0, [r4, #8]
 8001784:	6900      	ldr	r0, [r0, #16]
 8001786:	2800      	cmp	r0, #0
 8001788:	d109      	bne.n	800179e <PE_Check_ExtendedMessage+0x1be>
 800178a:	e012      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	8900      	ldrh	r0, [r0, #8]
 8001790:	0a40      	lsrs	r0, r0, #9
 8001792:	4228      	tst	r0, r5
 8001794:	d00e      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 8001796:	68a0      	ldr	r0, [r4, #8]
 8001798:	6900      	ldr	r0, [r0, #16]
 800179a:	2800      	cmp	r0, #0
 800179c:	d00a      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <.text_8>)
 80017a0:	5a23      	ldrh	r3, [r4, r0]
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <.text_9>)
 80017a4:	1822      	adds	r2, r4, r0
 80017a6:	7c20      	ldrb	r0, [r4, #16]
 80017a8:	68a5      	ldr	r5, [r4, #8]
 80017aa:	692d      	ldr	r5, [r5, #16]
 80017ac:	47a8      	blx	r5
 80017ae:	7466      	strb	r6, [r4, #17]
 80017b0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80017b2:	7465      	strb	r5, [r4, #17]
 80017b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080017b8 <.text_5>:
 80017b8:	00000263 	.word	0x00000263

080017bc <.text_6>:
 80017bc:	00000265 	.word	0x00000265

080017c0 <.text_7>:
 80017c0:	0000025a 	.word	0x0000025a

080017c4 <.text_8>:
 80017c4:	0000048e 	.word	0x0000048e

080017c8 <.text_9>:
 80017c8:	00000281 	.word	0x00000281

080017cc <PE_Send_ExtendedMessage>:
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80017d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80017d4:	0004      	movs	r4, r0
 80017d6:	000d      	movs	r5, r1
 80017d8:	4668      	mov	r0, sp
 80017da:	7202      	strb	r2, [r0, #8]
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	6860      	ldr	r0, [r4, #4]
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	04c1      	lsls	r1, r0, #19
 80017e4:	0fc9      	lsrs	r1, r1, #31
 80017e6:	d019      	beq.n	800181c <PE_Send_ExtendedMessage+0x50>
 80017e8:	9601      	str	r6, [sp, #4]
 80017ea:	9700      	str	r7, [sp, #0]
 80017ec:	9b03      	ldr	r3, [sp, #12]
 80017ee:	4668      	mov	r0, sp
 80017f0:	7a00      	ldrb	r0, [r0, #8]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	4302      	orrs	r2, r0
 80017f6:	0029      	movs	r1, r5
 80017f8:	7c20      	ldrb	r0, [r4, #16]
 80017fa:	f003 ffd7 	bl	80057ac <USBPD_PRL_SendMessage>
 80017fe:	2803      	cmp	r0, #3
 8001800:	d0ed      	beq.n	80017de <PE_Send_ExtendedMessage+0x12>
 8001802:	0029      	movs	r1, r5
 8001804:	2810      	cmp	r0, #16
 8001806:	d007      	beq.n	8001818 <PE_Send_ExtendedMessage+0x4c>
 8001808:	aa0b      	add	r2, sp, #44	; 0x2c
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	0003      	movs	r3, r0
 8001810:	2200      	movs	r2, #0
 8001812:	0020      	movs	r0, r4
 8001814:	f000 faca 	bl	8001dac <PE_CheckSendMessageStatus>
 8001818:	b005      	add	sp, #20
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	2011      	movs	r0, #17
 800181e:	7460      	strb	r0, [r4, #17]
 8001820:	2010      	movs	r0, #16
 8001822:	e7f9      	b.n	8001818 <PE_Send_ExtendedMessage+0x4c>

08001824 <PE_SubStateMachine_ExtendedMessages>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	0004      	movs	r4, r0
 800182a:	2702      	movs	r7, #2
 800182c:	4889      	ldr	r0, [pc, #548]	; (8001a54 <.text_12>)
 800182e:	1820      	adds	r0, r4, r0
 8001830:	9000      	str	r0, [sp, #0]
 8001832:	2039      	movs	r0, #57	; 0x39
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	466a      	mov	r2, sp
 8001838:	7211      	strb	r1, [r2, #8]
 800183a:	4a87      	ldr	r2, [pc, #540]	; (8001a58 <.text_13>)
 800183c:	2500      	movs	r5, #0
 800183e:	2603      	movs	r6, #3
 8001840:	7c63      	ldrb	r3, [r4, #17]
 8001842:	2b31      	cmp	r3, #49	; 0x31
 8001844:	d010      	beq.n	8001868 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001846:	2b33      	cmp	r3, #51	; 0x33
 8001848:	d075      	beq.n	8001936 <PE_SubStateMachine_ExtendedMessages+0x112>
 800184a:	2b34      	cmp	r3, #52	; 0x34
 800184c:	d07c      	beq.n	8001948 <PE_SubStateMachine_ExtendedMessages+0x124>
 800184e:	2b35      	cmp	r3, #53	; 0x35
 8001850:	d100      	bne.n	8001854 <PE_SubStateMachine_ExtendedMessages+0x30>
 8001852:	e0a8      	b.n	80019a6 <PE_SubStateMachine_ExtendedMessages+0x182>
 8001854:	2b36      	cmp	r3, #54	; 0x36
 8001856:	d100      	bne.n	800185a <PE_SubStateMachine_ExtendedMessages+0x36>
 8001858:	e0be      	b.n	80019d8 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 800185a:	2b37      	cmp	r3, #55	; 0x37
 800185c:	d100      	bne.n	8001860 <PE_SubStateMachine_ExtendedMessages+0x3c>
 800185e:	e0be      	b.n	80019de <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001860:	2b38      	cmp	r3, #56	; 0x38
 8001862:	d100      	bne.n	8001866 <PE_SubStateMachine_ExtendedMessages+0x42>
 8001864:	e0ef      	b.n	8001a46 <PE_SubStateMachine_ExtendedMessages+0x222>
 8001866:	e0f2      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001868:	487c      	ldr	r0, [pc, #496]	; (8001a5c <.text_14>)
 800186a:	1820      	adds	r0, r4, r0
 800186c:	9004      	str	r0, [sp, #16]
 800186e:	4669      	mov	r1, sp
 8001870:	730d      	strb	r5, [r1, #12]
 8001872:	497b      	ldr	r1, [pc, #492]	; (8001a60 <.text_15>)
 8001874:	5265      	strh	r5, [r4, r1]
 8001876:	7c20      	ldrb	r0, [r4, #16]
 8001878:	f7ff fa64 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800187c:	2801      	cmp	r0, #1
 800187e:	d107      	bne.n	8001890 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001880:	4878      	ldr	r0, [pc, #480]	; (8001a64 <.text_16>)
 8001882:	1820      	adds	r0, r4, r0
 8001884:	7005      	strb	r5, [r0, #0]
 8001886:	7045      	strb	r5, [r0, #1]
 8001888:	4877      	ldr	r0, [pc, #476]	; (8001a68 <.text_17>)
 800188a:	1820      	adds	r0, r4, r0
 800188c:	9004      	str	r0, [sp, #16]
 800188e:	e028      	b.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001890:	4976      	ldr	r1, [pc, #472]	; (8001a6c <.text_18>)
 8001892:	1861      	adds	r1, r4, r1
 8001894:	72cd      	strb	r5, [r1, #11]
 8001896:	4975      	ldr	r1, [pc, #468]	; (8001a6c <.text_18>)
 8001898:	1861      	adds	r1, r4, r1
 800189a:	730d      	strb	r5, [r1, #12]
 800189c:	7c20      	ldrb	r0, [r4, #16]
 800189e:	f7ff fa51 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d106      	bne.n	80018b4 <PE_SubStateMachine_ExtendedMessages+0x90>
 80018a6:	4871      	ldr	r0, [pc, #452]	; (8001a6c <.text_18>)
 80018a8:	1820      	adds	r0, r4, r0
 80018aa:	7b01      	ldrb	r1, [r0, #12]
 80018ac:	466a      	mov	r2, sp
 80018ae:	7a12      	ldrb	r2, [r2, #8]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	7302      	strb	r2, [r0, #12]
 80018b4:	486a      	ldr	r0, [pc, #424]	; (8001a60 <.text_15>)
 80018b6:	1820      	adds	r0, r4, r0
 80018b8:	8841      	ldrh	r1, [r0, #2]
 80018ba:	291b      	cmp	r1, #27
 80018bc:	d30e      	bcc.n	80018dc <PE_SubStateMachine_ExtendedMessages+0xb8>
 80018be:	486a      	ldr	r0, [pc, #424]	; (8001a68 <.text_17>)
 80018c0:	1820      	adds	r0, r4, r0
 80018c2:	5d40      	ldrb	r0, [r0, r5]
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	5548      	strb	r0, [r1, r5]
 80018c8:	1c6d      	adds	r5, r5, #1
 80018ca:	2d1a      	cmp	r5, #26
 80018cc:	d209      	bcs.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 80018ce:	e7f6      	b.n	80018be <PE_SubStateMachine_ExtendedMessages+0x9a>
 80018d0:	4965      	ldr	r1, [pc, #404]	; (8001a68 <.text_17>)
 80018d2:	1861      	adds	r1, r4, r1
 80018d4:	5d49      	ldrb	r1, [r1, r5]
 80018d6:	9a00      	ldr	r2, [sp, #0]
 80018d8:	5551      	strb	r1, [r2, r5]
 80018da:	1c6d      	adds	r5, r5, #1
 80018dc:	8841      	ldrh	r1, [r0, #2]
 80018de:	428d      	cmp	r5, r1
 80018e0:	d3f6      	bcc.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0xac>
 80018e2:	2001      	movs	r0, #1
 80018e4:	6961      	ldr	r1, [r4, #20]
 80018e6:	0949      	lsrs	r1, r1, #5
 80018e8:	4001      	ands	r1, r0
 80018ea:	d00a      	beq.n	8001902 <PE_SubStateMachine_ExtendedMessages+0xde>
 80018ec:	6861      	ldr	r1, [r4, #4]
 80018ee:	6809      	ldr	r1, [r1, #0]
 80018f0:	0889      	lsrs	r1, r1, #2
 80018f2:	4001      	ands	r1, r0
 80018f4:	d002      	beq.n	80018fc <PE_SubStateMachine_ExtendedMessages+0xd8>
 80018f6:	4669      	mov	r1, sp
 80018f8:	7308      	strb	r0, [r1, #12]
 80018fa:	e001      	b.n	8001900 <PE_SubStateMachine_ExtendedMessages+0xdc>
 80018fc:	4669      	mov	r1, sp
 80018fe:	730f      	strb	r7, [r1, #12]
 8001900:	2633      	movs	r6, #51	; 0x33
 8001902:	4668      	mov	r0, sp
 8001904:	7b00      	ldrb	r0, [r0, #12]
 8001906:	9002      	str	r0, [sp, #8]
 8001908:	9601      	str	r6, [sp, #4]
 800190a:	4855      	ldr	r0, [pc, #340]	; (8001a60 <.text_15>)
 800190c:	1820      	adds	r0, r4, r0
 800190e:	8840      	ldrh	r0, [r0, #2]
 8001910:	1d00      	adds	r0, r0, #4
 8001912:	b280      	uxth	r0, r0
 8001914:	9000      	str	r0, [sp, #0]
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	4854      	ldr	r0, [pc, #336]	; (8001a6c <.text_18>)
 800191a:	1820      	adds	r0, r4, r0
 800191c:	78c2      	ldrb	r2, [r0, #3]
 800191e:	2033      	movs	r0, #51	; 0x33
 8001920:	5c21      	ldrb	r1, [r4, r0]
 8001922:	0020      	movs	r0, r4
 8001924:	f7ff ff52 	bl	80017cc <PE_Send_ExtendedMessage>
 8001928:	2800      	cmp	r0, #0
 800192a:	d103      	bne.n	8001934 <PE_SubStateMachine_ExtendedMessages+0x110>
 800192c:	484f      	ldr	r0, [pc, #316]	; (8001a6c <.text_18>)
 800192e:	1820      	adds	r0, r4, r0
 8001930:	7940      	ldrb	r0, [r0, #5]
 8001932:	7720      	strb	r0, [r4, #28]
 8001934:	e08b      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001936:	83e2      	strh	r2, [r4, #30]
 8001938:	271b      	movs	r7, #27
 800193a:	494c      	ldr	r1, [pc, #304]	; (8001a6c <.text_18>)
 800193c:	1861      	adds	r1, r4, r1
 800193e:	78c9      	ldrb	r1, [r1, #3]
 8001940:	2904      	cmp	r1, #4
 8001942:	d151      	bne.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001944:	2074      	movs	r0, #116	; 0x74
 8001946:	e04f      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001948:	4848      	ldr	r0, [pc, #288]	; (8001a6c <.text_18>)
 800194a:	5a20      	ldrh	r0, [r4, r0]
 800194c:	0440      	lsls	r0, r0, #17
 800194e:	0f02      	lsrs	r2, r0, #28
 8001950:	211a      	movs	r1, #26
 8001952:	4351      	muls	r1, r2
 8001954:	4842      	ldr	r0, [pc, #264]	; (8001a60 <.text_15>)
 8001956:	1820      	adds	r0, r4, r0
 8001958:	8843      	ldrh	r3, [r0, #2]
 800195a:	4299      	cmp	r1, r3
 800195c:	da01      	bge.n	8001962 <PE_SubStateMachine_ExtendedMessages+0x13e>
 800195e:	2a0a      	cmp	r2, #10
 8001960:	d301      	bcc.n	8001966 <PE_SubStateMachine_ExtendedMessages+0x142>
 8001962:	7466      	strb	r6, [r4, #17]
 8001964:	e01d      	b.n	80019a2 <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001966:	1a5a      	subs	r2, r3, r1
 8001968:	2a1a      	cmp	r2, #26
 800196a:	d202      	bcs.n	8001972 <PE_SubStateMachine_ExtendedMessages+0x14e>
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e000      	b.n	8001974 <PE_SubStateMachine_ExtendedMessages+0x150>
 8001972:	231a      	movs	r3, #26
 8001974:	2200      	movs	r2, #0
 8001976:	e006      	b.n	8001986 <PE_SubStateMachine_ExtendedMessages+0x162>
 8001978:	4e3b      	ldr	r6, [pc, #236]	; (8001a68 <.text_17>)
 800197a:	19a6      	adds	r6, r4, r6
 800197c:	188f      	adds	r7, r1, r2
 800197e:	5df6      	ldrb	r6, [r6, r7]
 8001980:	9f00      	ldr	r7, [sp, #0]
 8001982:	54be      	strb	r6, [r7, r2]
 8001984:	1c52      	adds	r2, r2, #1
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f6      	bcc.n	8001978 <PE_SubStateMachine_ExtendedMessages+0x154>
 800198a:	4934      	ldr	r1, [pc, #208]	; (8001a5c <.text_14>)
 800198c:	1863      	adds	r3, r4, r1
 800198e:	8842      	ldrh	r2, [r0, #2]
 8001990:	4836      	ldr	r0, [pc, #216]	; (8001a6c <.text_18>)
 8001992:	5a20      	ldrh	r0, [r4, r0]
 8001994:	0440      	lsls	r0, r0, #17
 8001996:	0f01      	lsrs	r1, r0, #28
 8001998:	7c20      	ldrb	r0, [r4, #16]
 800199a:	f004 fba8 	bl	80060ee <USBPD_PRL_PrepareExtendedTxChunkSending>
 800199e:	2035      	movs	r0, #53	; 0x35
 80019a0:	7460      	strb	r0, [r4, #17]
 80019a2:	2700      	movs	r7, #0
 80019a4:	e053      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019a6:	6960      	ldr	r0, [r4, #20]
 80019a8:	0681      	lsls	r1, r0, #26
 80019aa:	0fc9      	lsrs	r1, r1, #31
 80019ac:	d001      	beq.n	80019b2 <PE_SubStateMachine_ExtendedMessages+0x18e>
 80019ae:	2036      	movs	r0, #54	; 0x36
 80019b0:	e000      	b.n	80019b4 <PE_SubStateMachine_ExtendedMessages+0x190>
 80019b2:	2003      	movs	r0, #3
 80019b4:	492a      	ldr	r1, [pc, #168]	; (8001a60 <.text_15>)
 80019b6:	1866      	adds	r6, r4, r1
 80019b8:	9502      	str	r5, [sp, #8]
 80019ba:	9001      	str	r0, [sp, #4]
 80019bc:	8870      	ldrh	r0, [r6, #2]
 80019be:	9000      	str	r0, [sp, #0]
 80019c0:	4826      	ldr	r0, [pc, #152]	; (8001a5c <.text_14>)
 80019c2:	1823      	adds	r3, r4, r0
 80019c4:	3809      	subs	r0, #9
 80019c6:	1820      	adds	r0, r4, r0
 80019c8:	78c2      	ldrb	r2, [r0, #3]
 80019ca:	2030      	movs	r0, #48	; 0x30
 80019cc:	5c21      	ldrb	r1, [r4, r0]
 80019ce:	0020      	movs	r0, r4
 80019d0:	f7ff fefc 	bl	80017cc <PE_Send_ExtendedMessage>
 80019d4:	8035      	strh	r5, [r6, #0]
 80019d6:	e03a      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019d8:	83e2      	strh	r2, [r4, #30]
 80019da:	271b      	movs	r7, #27
 80019dc:	e004      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 80019de:	8be0      	ldrh	r0, [r4, #30]
 80019e0:	020b      	lsls	r3, r1, #8
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d102      	bne.n	80019ec <PE_SubStateMachine_ExtendedMessages+0x1c8>
 80019e6:	200f      	movs	r0, #15
 80019e8:	7460      	strb	r0, [r4, #17]
 80019ea:	e030      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019ec:	83e2      	strh	r2, [r4, #30]
 80019ee:	271b      	movs	r7, #27
 80019f0:	481a      	ldr	r0, [pc, #104]	; (8001a5c <.text_14>)
 80019f2:	1825      	adds	r5, r4, r0
 80019f4:	0029      	movs	r1, r5
 80019f6:	7c20      	ldrb	r0, [r4, #16]
 80019f8:	f004 fba1 	bl	800613e <USBPD_PRL_PrepareChunkRequest>
 80019fc:	6860      	ldr	r0, [r4, #4]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	04c1      	lsls	r1, r0, #19
 8001a02:	0fc9      	lsrs	r1, r1, #31
 8001a04:	d012      	beq.n	8001a2c <PE_SubStateMachine_ExtendedMessages+0x208>
 8001a06:	2000      	movs	r0, #0
 8001a08:	9001      	str	r0, [sp, #4]
 8001a0a:	2006      	movs	r0, #6
 8001a0c:	9000      	str	r0, [sp, #0]
 8001a0e:	002b      	movs	r3, r5
 8001a10:	4816      	ldr	r0, [pc, #88]	; (8001a6c <.text_18>)
 8001a12:	1820      	adds	r0, r4, r0
 8001a14:	7880      	ldrb	r0, [r0, #2]
 8001a16:	4669      	mov	r1, sp
 8001a18:	7a0a      	ldrb	r2, [r1, #8]
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	2030      	movs	r0, #48	; 0x30
 8001a1e:	5c21      	ldrb	r1, [r4, r0]
 8001a20:	7c20      	ldrb	r0, [r4, #16]
 8001a22:	f003 fec3 	bl	80057ac <USBPD_PRL_SendMessage>
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d0e8      	beq.n	80019fc <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001a2a:	e002      	b.n	8001a32 <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	7460      	strb	r0, [r4, #17]
 8001a30:	2010      	movs	r0, #16
 8001a32:	2139      	movs	r1, #57	; 0x39
 8001a34:	9100      	str	r1, [sp, #0]
 8001a36:	0003      	movs	r3, r0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2030      	movs	r0, #48	; 0x30
 8001a3c:	5c21      	ldrb	r1, [r4, r0]
 8001a3e:	0020      	movs	r0, r4
 8001a40:	f000 f9b4 	bl	8001dac <PE_CheckSendMessageStatus>
 8001a44:	e003      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a46:	7466      	strb	r6, [r4, #17]
 8001a48:	2700      	movs	r7, #0
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <.text_15>)
 8001a4c:	5225      	strh	r5, [r4, r0]
 8001a4e:	0038      	movs	r0, r7
 8001a50:	b005      	add	sp, #20
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a54 <.text_12>:
 8001a54:	00000267 	.word	0x00000267

08001a58 <.text_13>:
 8001a58:	0000801b 	.word	0x0000801b

08001a5c <.text_14>:
 8001a5c:	00000263 	.word	0x00000263

08001a60 <.text_15>:
 8001a60:	0000048e 	.word	0x0000048e

08001a64 <.text_16>:
 8001a64:	00000387 	.word	0x00000387

08001a68 <.text_17>:
 8001a68:	00000385 	.word	0x00000385

08001a6c <.text_18>:
 8001a6c:	0000025a 	.word	0x0000025a

08001a70 <PE_ManageRXEvent>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	2130      	movs	r1, #48	; 0x30
 8001a74:	5c41      	ldrb	r1, [r0, r1]
 8001a76:	2231      	movs	r2, #49	; 0x31
 8001a78:	5481      	strb	r1, [r0, r2]
 8001a7a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8001a7c:	0bca      	lsrs	r2, r1, #15
 8001a7e:	d002      	beq.n	8001a86 <PE_ManageRXEvent+0x16>
 8001a80:	f7ff fdae 	bl	80015e0 <PE_Check_ExtendedMessage>
 8001a84:	bd01      	pop	{r0, pc}
 8001a86:	22f0      	movs	r2, #240	; 0xf0
 8001a88:	0212      	lsls	r2, r2, #8
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	d102      	bne.n	8001a94 <PE_ManageRXEvent+0x24>
 8001a8e:	f000 f805 	bl	8001a9c <PE_Check_ControlMessage>
 8001a92:	bd01      	pop	{r0, pc}
 8001a94:	f000 f8e5 	bl	8001c62 <PE_Check_DataMessage>
 8001a98:	bd01      	pop	{r0, pc}
	...

08001a9c <PE_Check_ControlMessage>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	272a      	movs	r7, #42	; 0x2a
 8001aa2:	2603      	movs	r6, #3
 8001aa4:	2501      	movs	r5, #1
 8001aa6:	200b      	movs	r0, #11
 8001aa8:	2134      	movs	r1, #52	; 0x34
 8001aaa:	5c61      	ldrb	r1, [r4, r1]
 8001aac:	06c9      	lsls	r1, r1, #27
 8001aae:	0ec9      	lsrs	r1, r1, #27
 8001ab0:	1e49      	subs	r1, r1, #1
 8001ab2:	2917      	cmp	r1, #23
 8001ab4:	d900      	bls.n	8001ab8 <PE_Check_ControlMessage+0x1c>
 8001ab6:	e0c7      	b.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <PE_Check_ControlMessage+0x24>)
 8001aba:	5c52      	ldrb	r2, [r2, r1]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	4497      	add	pc, r2
 8001ac0:	c0c00bcb 	.word	0xc0c00bcb
 8001ac4:	5b22c020 	.word	0x5b22c020
 8001ac8:	c0413449 	.word	0xc0413449
 8001acc:	bec3c319 	.word	0xbec3c319
 8001ad0:	9fb7936f 	.word	0x9fb7936f
 8001ad4:	bac383b0 	.word	0xbac383b0
 8001ad8:	6860      	ldr	r0, [r4, #4]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	0880      	lsrs	r0, r0, #2
 8001ade:	4005      	ands	r5, r0
 8001ae0:	d000      	beq.n	8001ae4 <PE_Check_ControlMessage+0x48>
 8001ae2:	e0b9      	b.n	8001c58 <PE_Check_ControlMessage+0x1bc>
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	7720      	strb	r0, [r4, #28]
 8001ae8:	212b      	movs	r1, #43	; 0x2b
 8001aea:	7c20      	ldrb	r0, [r4, #16]
 8001aec:	f7fe fcc8 	bl	8000480 <USBPD_PE_Notification>
 8001af0:	2098      	movs	r0, #152	; 0x98
 8001af2:	e0a7      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001af4:	7726      	strb	r6, [r4, #28]
 8001af6:	2132      	movs	r1, #50	; 0x32
 8001af8:	7c20      	ldrb	r0, [r4, #16]
 8001afa:	f7fe fcc1 	bl	8000480 <USBPD_PE_Notification>
 8001afe:	2010      	movs	r0, #16
 8001b00:	e0a0      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b02:	2133      	movs	r1, #51	; 0x33
 8001b04:	e09c      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001b06:	2006      	movs	r0, #6
 8001b08:	7720      	strb	r0, [r4, #28]
 8001b0a:	6860      	ldr	r0, [r4, #4]
 8001b0c:	6800      	ldr	r0, [r0, #0]
 8001b0e:	0881      	lsrs	r1, r0, #2
 8001b10:	4029      	ands	r1, r5
 8001b12:	d104      	bne.n	8001b1e <PE_Check_ControlMessage+0x82>
 8001b14:	6821      	ldr	r1, [r4, #0]
 8001b16:	6849      	ldr	r1, [r1, #4]
 8001b18:	08c9      	lsrs	r1, r1, #3
 8001b1a:	4029      	ands	r1, r5
 8001b1c:	d039      	beq.n	8001b92 <PE_Check_ControlMessage+0xf6>
 8001b1e:	210c      	movs	r1, #12
 8001b20:	7c20      	ldrb	r0, [r4, #16]
 8001b22:	f7fe fcad 	bl	8000480 <USBPD_PE_Notification>
 8001b26:	204c      	movs	r0, #76	; 0x4c
 8001b28:	e08c      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	6840      	ldr	r0, [r0, #4]
 8001b2e:	08c0      	lsrs	r0, r0, #3
 8001b30:	4028      	ands	r0, r5
 8001b32:	d00a      	beq.n	8001b4a <PE_Check_ControlMessage+0xae>
 8001b34:	2008      	movs	r0, #8
 8001b36:	7720      	strb	r0, [r4, #28]
 8001b38:	213c      	movs	r1, #60	; 0x3c
 8001b3a:	7c20      	ldrb	r0, [r4, #16]
 8001b3c:	f7fe fca0 	bl	8000480 <USBPD_PE_Notification>
 8001b40:	2022      	movs	r0, #34	; 0x22
 8001b42:	e07f      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b44:	68a0      	ldr	r0, [r4, #8]
 8001b46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d07d      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b4c:	2011      	movs	r0, #17
 8001b4e:	7720      	strb	r0, [r4, #28]
 8001b50:	209d      	movs	r0, #157	; 0x9d
 8001b52:	e077      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b54:	2123      	movs	r1, #35	; 0x23
 8001b56:	7c20      	ldrb	r0, [r4, #16]
 8001b58:	f7fe fc92 	bl	8000480 <USBPD_PE_Notification>
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	05c0      	lsls	r0, r0, #23
 8001b60:	0f40      	lsrs	r0, r0, #29
 8001b62:	d001      	beq.n	8001b68 <PE_Check_ControlMessage+0xcc>
 8001b64:	200f      	movs	r0, #15
 8001b66:	e06d      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b68:	68a0      	ldr	r0, [r4, #8]
 8001b6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d06b      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b70:	2010      	movs	r0, #16
 8001b72:	7720      	strb	r0, [r4, #28]
 8001b74:	2093      	movs	r0, #147	; 0x93
 8001b76:	e065      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b78:	6860      	ldr	r0, [r4, #4]
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	0541      	lsls	r1, r0, #21
 8001b7e:	0f49      	lsrs	r1, r1, #29
 8001b80:	2903      	cmp	r1, #3
 8001b82:	d163      	bne.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b84:	0881      	lsrs	r1, r0, #2
 8001b86:	4029      	ands	r1, r5
 8001b88:	d004      	beq.n	8001b94 <PE_Check_ControlMessage+0xf8>
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	6849      	ldr	r1, [r1, #4]
 8001b8e:	08c9      	lsrs	r1, r1, #3
 8001b90:	4029      	ands	r1, r5
 8001b92:	d05b      	beq.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b94:	2007      	movs	r0, #7
 8001b96:	7720      	strb	r0, [r4, #28]
 8001b98:	201d      	movs	r0, #29
 8001b9a:	7460      	strb	r0, [r4, #17]
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	e04f      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	8901      	ldrh	r1, [r0, #8]
 8001ba4:	08c9      	lsrs	r1, r1, #3
 8001ba6:	4229      	tst	r1, r5
 8001ba8:	d053      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001baa:	6861      	ldr	r1, [r4, #4]
 8001bac:	6809      	ldr	r1, [r1, #0]
 8001bae:	0889      	lsrs	r1, r1, #2
 8001bb0:	4029      	ands	r1, r5
 8001bb2:	d103      	bne.n	8001bbc <PE_Check_ControlMessage+0x120>
 8001bb4:	6840      	ldr	r0, [r0, #4]
 8001bb6:	08c0      	lsrs	r0, r0, #3
 8001bb8:	4028      	ands	r0, r5
 8001bba:	d04a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	7720      	strb	r0, [r4, #28]
 8001bc0:	2063      	movs	r0, #99	; 0x63
 8001bc2:	7460      	strb	r0, [r4, #17]
 8001bc4:	2146      	movs	r1, #70	; 0x46
 8001bc6:	e03b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001bc8:	6860      	ldr	r0, [r4, #4]
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	0880      	lsrs	r0, r0, #2
 8001bce:	4028      	ands	r0, r5
 8001bd0:	d004      	beq.n	8001bdc <PE_Check_ControlMessage+0x140>
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	6840      	ldr	r0, [r0, #4]
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4028      	ands	r0, r5
 8001bda:	d03a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bdc:	205f      	movs	r0, #95	; 0x5f
 8001bde:	7720      	strb	r0, [r4, #28]
 8001be0:	2064      	movs	r0, #100	; 0x64
 8001be2:	7460      	strb	r0, [r4, #17]
 8001be4:	2160      	movs	r1, #96	; 0x60
 8001be6:	e02b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	8909      	ldrh	r1, [r1, #8]
 8001bec:	0949      	lsrs	r1, r1, #5
 8001bee:	4229      	tst	r1, r5
 8001bf0:	d02f      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bf2:	7720      	strb	r0, [r4, #28]
 8001bf4:	214d      	movs	r1, #77	; 0x4d
 8001bf6:	7c20      	ldrb	r0, [r4, #16]
 8001bf8:	f7fe fc42 	bl	8000480 <USBPD_PE_Notification>
 8001bfc:	2030      	movs	r0, #48	; 0x30
 8001bfe:	e021      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c00:	6821      	ldr	r1, [r4, #0]
 8001c02:	8909      	ldrh	r1, [r1, #8]
 8001c04:	0889      	lsrs	r1, r1, #2
 8001c06:	4229      	tst	r1, r5
 8001c08:	d023      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c0a:	7720      	strb	r0, [r4, #28]
 8001c0c:	2149      	movs	r1, #73	; 0x49
 8001c0e:	7c20      	ldrb	r0, [r4, #16]
 8001c10:	f7fe fc36 	bl	8000480 <USBPD_PE_Notification>
 8001c14:	6860      	ldr	r0, [r4, #4]
 8001c16:	6800      	ldr	r0, [r0, #0]
 8001c18:	0880      	lsrs	r0, r0, #2
 8001c1a:	4005      	ands	r5, r0
 8001c1c:	d011      	beq.n	8001c42 <PE_Check_ControlMessage+0x1a6>
 8001c1e:	202d      	movs	r0, #45	; 0x2d
 8001c20:	e010      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	8900      	ldrh	r0, [r0, #8]
 8001c26:	09c0      	lsrs	r0, r0, #7
 8001c28:	4228      	tst	r0, r5
 8001c2a:	d012      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c2c:	202f      	movs	r0, #47	; 0x2f
 8001c2e:	e009      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c30:	2009      	movs	r0, #9
 8001c32:	7720      	strb	r0, [r4, #28]
 8001c34:	e00d      	b.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c36:	200f      	movs	r0, #15
 8001c38:	7720      	strb	r0, [r4, #28]
 8001c3a:	204b      	movs	r0, #75	; 0x4b
 8001c3c:	e002      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c3e:	2159      	movs	r1, #89	; 0x59
 8001c40:	e00b      	b.n	8001c5a <.text_21>
 8001c42:	2011      	movs	r0, #17
 8001c44:	7460      	strb	r0, [r4, #17]
 8001c46:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c48:	6860      	ldr	r0, [r4, #4]
 8001c4a:	6800      	ldr	r0, [r0, #0]
 8001c4c:	4006      	ands	r6, r0
 8001c4e:	2e02      	cmp	r6, #2
 8001c50:	d101      	bne.n	8001c56 <PE_Check_ControlMessage+0x1ba>
 8001c52:	7465      	strb	r5, [r4, #17]
 8001c54:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c56:	7467      	strb	r7, [r4, #17]
 8001c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c5a <.text_21>:
 8001c5a:	7c20      	ldrb	r0, [r4, #16]
 8001c5c:	f7fe fc10 	bl	8000480 <USBPD_PE_Notification>
 8001c60:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c62 <PE_Check_DataMessage>:
 8001c62:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001c64:	0004      	movs	r4, r0
 8001c66:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001c68:	2501      	movs	r5, #1
 8001c6a:	2603      	movs	r6, #3
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	06c1      	lsls	r1, r0, #27
 8001c70:	0ec9      	lsrs	r1, r1, #27
 8001c72:	2901      	cmp	r1, #1
 8001c74:	d029      	beq.n	8001cca <PE_Check_DataMessage+0x68>
 8001c76:	2902      	cmp	r1, #2
 8001c78:	d00b      	beq.n	8001c92 <PE_Check_DataMessage+0x30>
 8001c7a:	2903      	cmp	r1, #3
 8001c7c:	d03d      	beq.n	8001cfa <PE_Check_DataMessage+0x98>
 8001c7e:	2906      	cmp	r1, #6
 8001c80:	d079      	beq.n	8001d76 <PE_Check_DataMessage+0x114>
 8001c82:	2907      	cmp	r1, #7
 8001c84:	d100      	bne.n	8001c88 <PE_Check_DataMessage+0x26>
 8001c86:	e085      	b.n	8001d94 <PE_Check_DataMessage+0x132>
 8001c88:	290a      	cmp	r1, #10
 8001c8a:	d078      	beq.n	8001d7e <PE_Check_DataMessage+0x11c>
 8001c8c:	290f      	cmp	r1, #15
 8001c8e:	d06e      	beq.n	8001d6e <PE_Check_DataMessage+0x10c>
 8001c90:	e089      	b.n	8001da6 <PE_Check_DataMessage+0x144>
 8001c92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c94:	7881      	ldrb	r1, [r0, #2]
 8001c96:	78c2      	ldrb	r2, [r0, #3]
 8001c98:	0212      	lsls	r2, r2, #8
 8001c9a:	1889      	adds	r1, r1, r2
 8001c9c:	7902      	ldrb	r2, [r0, #4]
 8001c9e:	0412      	lsls	r2, r2, #16
 8001ca0:	1889      	adds	r1, r1, r2
 8001ca2:	7940      	ldrb	r0, [r0, #5]
 8001ca4:	0600      	lsls	r0, r0, #24
 8001ca6:	1808      	adds	r0, r1, r0
 8001ca8:	9000      	str	r0, [sp, #0]
 8001caa:	6860      	ldr	r0, [r4, #4]
 8001cac:	6800      	ldr	r0, [r0, #0]
 8001cae:	0880      	lsrs	r0, r0, #2
 8001cb0:	4028      	ands	r0, r5
 8001cb2:	d07a      	beq.n	8001daa <PE_Check_DataMessage+0x148>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	466a      	mov	r2, sp
 8001cb8:	2106      	movs	r1, #6
 8001cba:	7c20      	ldrb	r0, [r4, #16]
 8001cbc:	68a6      	ldr	r6, [r4, #8]
 8001cbe:	69b6      	ldr	r6, [r6, #24]
 8001cc0:	47b0      	blx	r6
 8001cc2:	7725      	strb	r5, [r4, #28]
 8001cc4:	84a7      	strh	r7, [r4, #36]	; 0x24
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	e06e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cca:	6861      	ldr	r1, [r4, #4]
 8001ccc:	6809      	ldr	r1, [r1, #0]
 8001cce:	0889      	lsrs	r1, r1, #2
 8001cd0:	400d      	ands	r5, r1
 8001cd2:	d16a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001cd4:	0980      	lsrs	r0, r0, #6
 8001cd6:	4006      	ands	r6, r0
 8001cd8:	0031      	movs	r1, r6
 8001cda:	7c20      	ldrb	r0, [r4, #16]
 8001cdc:	f7fe ff8a 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8001ce0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001ce2:	0440      	lsls	r0, r0, #17
 8001ce4:	0f40      	lsrs	r0, r0, #29
 8001ce6:	0083      	lsls	r3, r0, #2
 8001ce8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cea:	1c82      	adds	r2, r0, #2
 8001cec:	2104      	movs	r1, #4
 8001cee:	7c20      	ldrb	r0, [r4, #16]
 8001cf0:	68a5      	ldr	r5, [r4, #8]
 8001cf2:	69ad      	ldr	r5, [r5, #24]
 8001cf4:	47a8      	blx	r5
 8001cf6:	2044      	movs	r0, #68	; 0x44
 8001cf8:	e056      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cfa:	9701      	str	r7, [sp, #4]
 8001cfc:	9700      	str	r7, [sp, #0]
 8001cfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d00:	7881      	ldrb	r1, [r0, #2]
 8001d02:	78c2      	ldrb	r2, [r0, #3]
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	1889      	adds	r1, r1, r2
 8001d08:	7902      	ldrb	r2, [r0, #4]
 8001d0a:	0412      	lsls	r2, r2, #16
 8001d0c:	1889      	adds	r1, r1, r2
 8001d0e:	7940      	ldrb	r0, [r0, #5]
 8001d10:	0600      	lsls	r0, r0, #24
 8001d12:	180d      	adds	r5, r1, r0
 8001d14:	466b      	mov	r3, sp
 8001d16:	aa01      	add	r2, sp, #4
 8001d18:	2103      	movs	r1, #3
 8001d1a:	7c20      	ldrb	r0, [r4, #16]
 8001d1c:	68a7      	ldr	r7, [r4, #8]
 8001d1e:	697f      	ldr	r7, [r7, #20]
 8001d20:	47b8      	blx	r7
 8001d22:	2104      	movs	r1, #4
 8001d24:	9800      	ldr	r0, [sp, #0]
 8001d26:	f7ff fb91 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d11d      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d2e:	6860      	ldr	r0, [r4, #4]
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	0540      	lsls	r0, r0, #21
 8001d34:	0f40      	lsrs	r0, r0, #29
 8001d36:	2803      	cmp	r0, #3
 8001d38:	d117      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d3a:	9801      	ldr	r0, [sp, #4]
 8001d3c:	4938      	ldr	r1, [pc, #224]	; (8001e20 <.text_24>)
 8001d3e:	4288      	cmp	r0, r1
 8001d40:	d113      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d42:	0f28      	lsrs	r0, r5, #28
 8001d44:	2805      	cmp	r0, #5
 8001d46:	d00e      	beq.n	8001d66 <PE_Check_DataMessage+0x104>
 8001d48:	2808      	cmp	r0, #8
 8001d4a:	d00a      	beq.n	8001d62 <PE_Check_DataMessage+0x100>
 8001d4c:	2809      	cmp	r0, #9
 8001d4e:	d003      	beq.n	8001d58 <PE_Check_DataMessage+0xf6>
 8001d50:	280a      	cmp	r0, #10
 8001d52:	d12a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001d54:	2166      	movs	r1, #102	; 0x66
 8001d56:	e000      	b.n	8001d5a <PE_Check_DataMessage+0xf8>
 8001d58:	2165      	movs	r1, #101	; 0x65
 8001d5a:	7c20      	ldrb	r0, [r4, #16]
 8001d5c:	f7fe fb90 	bl	8000480 <USBPD_PE_Notification>
 8001d60:	e003      	b.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d62:	2029      	movs	r0, #41	; 0x29
 8001d64:	e020      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d66:	2027      	movs	r0, #39	; 0x27
 8001d68:	e01e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d6a:	7466      	strb	r6, [r4, #17]
 8001d6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f003 fabe 	bl	80052f0 <PE_Check_DataMessageVDM>
 8001d74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	8900      	ldrh	r0, [r0, #8]
 8001d7a:	0900      	lsrs	r0, r0, #4
 8001d7c:	4228      	tst	r0, r5
 8001d7e:	d010      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d80:	2304      	movs	r3, #4
 8001d82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d84:	1c82      	adds	r2, r0, #2
 8001d86:	210b      	movs	r1, #11
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	68a5      	ldr	r5, [r4, #8]
 8001d8c:	69ad      	ldr	r5, [r5, #24]
 8001d8e:	47a8      	blx	r5
 8001d90:	202c      	movs	r0, #44	; 0x2c
 8001d92:	e009      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	8900      	ldrh	r0, [r0, #8]
 8001d98:	0a00      	lsrs	r0, r0, #8
 8001d9a:	4228      	tst	r0, r5
 8001d9c:	d001      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d9e:	203d      	movs	r0, #61	; 0x3d
 8001da0:	e002      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001da2:	7465      	strb	r5, [r4, #17]
 8001da4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001da6:	2011      	movs	r0, #17
 8001da8:	7460      	strb	r0, [r4, #17]
 8001daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001dac <PE_CheckSendMessageStatus>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	000c      	movs	r4, r1
 8001db0:	2110      	movs	r1, #16
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d006      	beq.n	8001dc4 <PE_CheckSendMessageStatus+0x18>
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d00e      	beq.n	8001dd8 <PE_CheckSendMessageStatus+0x2c>
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d011      	beq.n	8001de2 <PE_CheckSendMessageStatus+0x36>
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d008      	beq.n	8001dd4 <PE_CheckSendMessageStatus+0x28>
 8001dc2:	e02a      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dc4:	9902      	ldr	r1, [sp, #8]
 8001dc6:	7441      	strb	r1, [r0, #17]
 8001dc8:	6941      	ldr	r1, [r0, #20]
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <.text_25>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	6142      	str	r2, [r0, #20]
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	e022      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd4:	2109      	movs	r1, #9
 8001dd6:	e020      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd8:	6942      	ldr	r2, [r0, #20]
 8001dda:	024b      	lsls	r3, r1, #9
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	6143      	str	r3, [r0, #20]
 8001de0:	e01b      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d005      	beq.n	8001df2 <PE_CheckSendMessageStatus+0x46>
 8001de6:	2a01      	cmp	r2, #1
 8001de8:	d101      	bne.n	8001dee <PE_CheckSendMessageStatus+0x42>
 8001dea:	2299      	movs	r2, #153	; 0x99
 8001dec:	e014      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001dee:	2107      	movs	r1, #7
 8001df0:	e013      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001df2:	6844      	ldr	r4, [r0, #4]
 8001df4:	6824      	ldr	r4, [r4, #0]
 8001df6:	0a24      	lsrs	r4, r4, #8
 8001df8:	4023      	ands	r3, r4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <PE_CheckSendMessageStatus+0x5a>
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d109      	bne.n	8001e16 <PE_CheckSendMessageStatus+0x6a>
 8001e02:	220f      	movs	r2, #15
 8001e04:	e008      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d1fb      	bne.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e0a:	6882      	ldr	r2, [r0, #8]
 8001e0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d0f7      	beq.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e12:	2292      	movs	r2, #146	; 0x92
 8001e14:	e000      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e16:	2211      	movs	r2, #17
 8001e18:	7442      	strb	r2, [r0, #17]
 8001e1a:	0008      	movs	r0, r1
 8001e1c:	bd10      	pop	{r4, pc}
	...

08001e20 <.text_24>:
 8001e20:	00001388 	.word	0x00001388

08001e24 <.text_25>:
 8001e24:	ffffbfff 	.word	0xffffbfff

08001e28 <USBPD_PE_StateMachine_SNK>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	0004      	movs	r4, r0
 8001e2e:	4828      	ldr	r0, [pc, #160]	; (8001ed0 <USBPD_PE_StateMachine_SNK+0xa8>)
 8001e30:	00a1      	lsls	r1, r4, #2
 8001e32:	5845      	ldr	r5, [r0, r1]
 8001e34:	7c68      	ldrb	r0, [r5, #17]
 8001e36:	2848      	cmp	r0, #72	; 0x48
 8001e38:	d133      	bne.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	f7fe fe72 	bl	8000b24 <PE_Reset_ZI>
 8001e40:	0028      	movs	r0, r5
 8001e42:	f7fe fea5 	bl	8000b90 <PE_Reset_Counter>
 8001e46:	6828      	ldr	r0, [r5, #0]
 8001e48:	7900      	ldrb	r0, [r0, #4]
 8001e4a:	0783      	lsls	r3, r0, #30
 8001e4c:	0f9b      	lsrs	r3, r3, #30
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	7c28      	ldrb	r0, [r5, #16]
 8001e54:	f003 fc35 	bl	80056c2 <USBPD_PRL_SetHeader>
 8001e58:	6868      	ldr	r0, [r5, #4]
 8001e5a:	6801      	ldr	r1, [r0, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4391      	bics	r1, r2
 8001e60:	6001      	str	r1, [r0, #0]
 8001e62:	6868      	ldr	r0, [r5, #4]
 8001e64:	6801      	ldr	r1, [r0, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	4391      	bics	r1, r2
 8001e6a:	682a      	ldr	r2, [r5, #0]
 8001e6c:	7912      	ldrb	r2, [r2, #4]
 8001e6e:	0792      	lsls	r2, r2, #30
 8001e70:	0f92      	lsrs	r2, r2, #30
 8001e72:	430a      	orrs	r2, r1
 8001e74:	6002      	str	r2, [r0, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	7c28      	ldrb	r0, [r5, #16]
 8001e7a:	f003 fc93 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8001e7e:	7c28      	ldrb	r0, [r5, #16]
 8001e80:	f003 fefc 	bl	8005c7c <USBPD_PRL_Reset>
 8001e84:	203e      	movs	r0, #62	; 0x3e
 8001e86:	7468      	strb	r0, [r5, #17]
 8001e88:	7ca9      	ldrb	r1, [r5, #18]
 8001e8a:	293e      	cmp	r1, #62	; 0x3e
 8001e8c:	d009      	beq.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e8e:	74a8      	strb	r0, [r5, #18]
 8001e90:	2000      	movs	r0, #0
 8001e92:	9000      	str	r0, [sp, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	223e      	movs	r2, #62	; 0x3e
 8001e98:	7c29      	ldrb	r1, [r5, #16]
 8001e9a:	2004      	movs	r0, #4
 8001e9c:	4eb1      	ldr	r6, [pc, #708]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001e9e:	6836      	ldr	r6, [r6, #0]
 8001ea0:	47b0      	blx	r6
 8001ea2:	6968      	ldr	r0, [r5, #20]
 8001ea4:	0341      	lsls	r1, r0, #13
 8001ea6:	0fc9      	lsrs	r1, r1, #31
 8001ea8:	d006      	beq.n	8001eb8 <USBPD_PE_StateMachine_SNK+0x90>
 8001eaa:	49af      	ldr	r1, [pc, #700]	; (8002168 <__iar_annotation$$branch+0x8>)
 8001eac:	4001      	ands	r1, r0
 8001eae:	6169      	str	r1, [r5, #20]
 8001eb0:	2164      	movs	r1, #100	; 0x64
 8001eb2:	7c28      	ldrb	r0, [r5, #16]
 8001eb4:	f7fe fae4 	bl	8000480 <USBPD_PE_Notification>
 8001eb8:	0028      	movs	r0, r5
 8001eba:	f7fe fd15 	bl	80008e8 <PE_Get_RxEvent>
 8001ebe:	4669      	mov	r1, sp
 8001ec0:	7308      	strb	r0, [r1, #12]
 8001ec2:	4668      	mov	r0, sp
 8001ec4:	7b00      	ldrb	r0, [r0, #12]
 8001ec6:	2803      	cmp	r0, #3
 8001ec8:	d104      	bne.n	8001ed4 <USBPD_PE_StateMachine_SNK+0xac>
 8001eca:	2001      	movs	r0, #1
 8001ecc:	b00d      	add	sp, #52	; 0x34
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	20000304 	.word	0x20000304
 8001ed4:	4668      	mov	r0, sp
 8001ed6:	7344      	strb	r4, [r0, #13]
 8001ed8:	2402      	movs	r4, #2
 8001eda:	6868      	ldr	r0, [r5, #4]
 8001edc:	6800      	ldr	r0, [r0, #0]
 8001ede:	04c1      	lsls	r1, r0, #19
 8001ee0:	0fc9      	lsrs	r1, r1, #31
 8001ee2:	d100      	bne.n	8001ee6 <USBPD_PE_StateMachine_SNK+0xbe>
 8001ee4:	e148      	b.n	8002178 <__iar_annotation$$branch+0x18>
 8001ee6:	6968      	ldr	r0, [r5, #20]
 8001ee8:	0381      	lsls	r1, r0, #14
 8001eea:	0fc9      	lsrs	r1, r1, #31
 8001eec:	d014      	beq.n	8001f18 <USBPD_PE_StateMachine_SNK+0xf0>
 8001eee:	21a7      	movs	r1, #167	; 0xa7
 8001ef0:	7469      	strb	r1, [r5, #17]
 8001ef2:	4a9e      	ldr	r2, [pc, #632]	; (800216c <__iar_annotation$$branch+0xc>)
 8001ef4:	4002      	ands	r2, r0
 8001ef6:	616a      	str	r2, [r5, #20]
 8001ef8:	2000      	movs	r0, #0
 8001efa:	2232      	movs	r2, #50	; 0x32
 8001efc:	54a8      	strb	r0, [r5, r2]
 8001efe:	7ca8      	ldrb	r0, [r5, #18]
 8001f00:	28a7      	cmp	r0, #167	; 0xa7
 8001f02:	d02b      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f04:	74a9      	strb	r1, [r5, #18]
 8001f06:	2000      	movs	r0, #0
 8001f08:	9000      	str	r0, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	22a7      	movs	r2, #167	; 0xa7
 8001f0e:	7c29      	ldrb	r1, [r5, #16]
 8001f10:	2004      	movs	r0, #4
 8001f12:	4e94      	ldr	r6, [pc, #592]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f14:	6836      	ldr	r6, [r6, #0]
 8001f16:	47b0      	blx	r6
 8001f18:	2032      	movs	r0, #50	; 0x32
 8001f1a:	5c28      	ldrb	r0, [r5, r0]
 8001f1c:	280f      	cmp	r0, #15
 8001f1e:	d001      	beq.n	8001f24 <USBPD_PE_StateMachine_SNK+0xfc>
 8001f20:	2814      	cmp	r0, #20
 8001f22:	d11b      	bne.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f24:	4668      	mov	r0, sp
 8001f26:	7b00      	ldrb	r0, [r0, #12]
 8001f28:	2814      	cmp	r0, #20
 8001f2a:	d005      	beq.n	8001f38 <USBPD_PE_StateMachine_SNK+0x110>
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	4669      	mov	r1, sp
 8001f30:	7308      	strb	r0, [r1, #12]
 8001f32:	0028      	movs	r0, r5
 8001f34:	f7fe fd0f 	bl	8000956 <PE_Clear_RxEvent>
 8001f38:	2032      	movs	r0, #50	; 0x32
 8001f3a:	5c2a      	ldrb	r2, [r5, r0]
 8001f3c:	746a      	strb	r2, [r5, #17]
 8001f3e:	2000      	movs	r0, #0
 8001f40:	2132      	movs	r1, #50	; 0x32
 8001f42:	5468      	strb	r0, [r5, r1]
 8001f44:	7ca8      	ldrb	r0, [r5, #18]
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d008      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f4a:	74aa      	strb	r2, [r5, #18]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	9000      	str	r0, [sp, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	7c29      	ldrb	r1, [r5, #16]
 8001f54:	2004      	movs	r0, #4
 8001f56:	4e83      	ldr	r6, [pc, #524]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f58:	6836      	ldr	r6, [r6, #0]
 8001f5a:	47b0      	blx	r6
 8001f5c:	4668      	mov	r0, sp
 8001f5e:	7b00      	ldrb	r0, [r0, #12]
 8001f60:	2811      	cmp	r0, #17
 8001f62:	d11f      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f64:	6868      	ldr	r0, [r5, #4]
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	0701      	lsls	r1, r0, #28
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8001f6e:	0680      	lsls	r0, r0, #26
 8001f70:	0fc2      	lsrs	r2, r0, #31
 8001f72:	4291      	cmp	r1, r2
 8001f74:	d116      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f76:	2014      	movs	r0, #20
 8001f78:	4669      	mov	r1, sp
 8001f7a:	7308      	strb	r0, [r1, #12]
 8001f7c:	0028      	movs	r0, r5
 8001f7e:	f7fe fcea 	bl	8000956 <PE_Clear_RxEvent>
 8001f82:	2092      	movs	r0, #146	; 0x92
 8001f84:	7468      	strb	r0, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	2892      	cmp	r0, #146	; 0x92
 8001f8a:	d100      	bne.n	8001f8e <USBPD_PE_StateMachine_SNK+0x166>
 8001f8c:	e104      	b.n	8002198 <__iar_annotation$$branch+0x38>
 8001f8e:	2092      	movs	r0, #146	; 0x92
 8001f90:	74a8      	strb	r0, [r5, #18]
 8001f92:	2000      	movs	r0, #0
 8001f94:	9000      	str	r0, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	2292      	movs	r2, #146	; 0x92
 8001f9a:	7c29      	ldrb	r1, [r5, #16]
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	4e71      	ldr	r6, [pc, #452]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001fa0:	6836      	ldr	r6, [r6, #0]
 8001fa2:	47b0      	blx	r6
 8001fa4:	7c68      	ldrb	r0, [r5, #17]
 8001fa6:	4669      	mov	r1, sp
 8001fa8:	7008      	strb	r0, [r1, #0]
 8001faa:	4f71      	ldr	r7, [pc, #452]	; (8002170 <__iar_annotation$$branch+0x10>)
 8001fac:	20f0      	movs	r0, #240	; 0xf0
 8001fae:	0200      	lsls	r0, r0, #8
 8001fb0:	4e70      	ldr	r6, [pc, #448]	; (8002174 <__iar_annotation$$branch+0x14>)
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	466a      	mov	r2, sp
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	2a00      	cmp	r2, #0
 8001fba:	d100      	bne.n	8001fbe <USBPD_PE_StateMachine_SNK+0x196>
 8001fbc:	e0e0      	b.n	8002180 <__iar_annotation$$branch+0x20>
 8001fbe:	1e52      	subs	r2, r2, #1
 8001fc0:	d040      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001fc2:	1e92      	subs	r2, r2, #2
 8001fc4:	2a01      	cmp	r2, #1
 8001fc6:	d800      	bhi.n	8001fca <USBPD_PE_StateMachine_SNK+0x1a2>
 8001fc8:	e323      	b.n	8002612 <__iar_annotation$$branch+0x4b2>
 8001fca:	1e92      	subs	r2, r2, #2
 8001fcc:	d100      	bne.n	8001fd0 <USBPD_PE_StateMachine_SNK+0x1a8>
 8001fce:	e1fb      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 8001fd0:	3a0a      	subs	r2, #10
 8001fd2:	d100      	bne.n	8001fd6 <USBPD_PE_StateMachine_SNK+0x1ae>
 8001fd4:	e1fd      	b.n	80023d2 <__iar_annotation$$branch+0x272>
 8001fd6:	1e52      	subs	r2, r2, #1
 8001fd8:	d100      	bne.n	8001fdc <USBPD_PE_StateMachine_SNK+0x1b4>
 8001fda:	e299      	b.n	8002510 <__iar_annotation$$branch+0x3b0>
 8001fdc:	1e52      	subs	r2, r2, #1
 8001fde:	d100      	bne.n	8001fe2 <USBPD_PE_StateMachine_SNK+0x1ba>
 8001fe0:	e2a3      	b.n	800252a <__iar_annotation$$branch+0x3ca>
 8001fe2:	1ed2      	subs	r2, r2, #3
 8001fe4:	d100      	bne.n	8001fe8 <USBPD_PE_StateMachine_SNK+0x1c0>
 8001fe6:	e228      	b.n	800243a <__iar_annotation$$branch+0x2da>
 8001fe8:	1f12      	subs	r2, r2, #4
 8001fea:	2a01      	cmp	r2, #1
 8001fec:	d92a      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 8001fee:	1e92      	subs	r2, r2, #2
 8001ff0:	d100      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x1cc>
 8001ff2:	e2d2      	b.n	800259a <__iar_annotation$$branch+0x43a>
 8001ff4:	1ed2      	subs	r2, r2, #3
 8001ff6:	d025      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001ff8:	1e52      	subs	r2, r2, #1
 8001ffa:	d100      	bne.n	8001ffe <USBPD_PE_StateMachine_SNK+0x1d6>
 8001ffc:	e3c3      	b.n	8002786 <__iar_annotation$$branch+0x626>
 8001ffe:	1f12      	subs	r2, r2, #4
 8002000:	d100      	bne.n	8002004 <USBPD_PE_StateMachine_SNK+0x1dc>
 8002002:	e316      	b.n	8002632 <__iar_annotation$$branch+0x4d2>
 8002004:	1f52      	subs	r2, r2, #5
 8002006:	2a02      	cmp	r2, #2
 8002008:	d91c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800200a:	1ed2      	subs	r2, r2, #3
 800200c:	d100      	bne.n	8002010 <USBPD_PE_StateMachine_SNK+0x1e8>
 800200e:	e2f7      	b.n	8002600 <__iar_annotation$$branch+0x4a0>
 8002010:	1e52      	subs	r2, r2, #1
 8002012:	d101      	bne.n	8002018 <__iar_annotation$$branch+0x4>

08002014 <__iar_annotation$$branch>:
 8002014:	f000 fc39 	bl	800288a <__iar_annotation$$branch+0x72a>
 8002018:	1e52      	subs	r2, r2, #1
 800201a:	d013      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800201c:	1e92      	subs	r2, r2, #2
 800201e:	d101      	bne.n	8002024 <__iar_annotation$$branch+0x4>

08002020 <__iar_annotation$$branch>:
 8002020:	f000 fc80 	bl	8002924 <__iar_annotation$$branch+0x7c4>
 8002024:	1e52      	subs	r2, r2, #1
 8002026:	2a01      	cmp	r2, #1
 8002028:	d90c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800202a:	1e92      	subs	r2, r2, #2
 800202c:	d001      	beq.n	8002032 <__iar_annotation$$branch+0x12>
 800202e:	1e92      	subs	r2, r2, #2
 8002030:	2a05      	cmp	r2, #5
 8002032:	d801      	bhi.n	8002038 <__iar_annotation$$branch+0x4>

08002034 <__iar_annotation$$branch>:
 8002034:	f000 fcbc 	bl	80029b0 <__iar_annotation$$branch+0x850>
 8002038:	1f92      	subs	r2, r2, #6
 800203a:	d101      	bne.n	8002040 <__iar_annotation$$branch+0x4>

0800203c <__iar_annotation$$branch>:
 800203c:	f000 fc86 	bl	800294c <__iar_annotation$$branch+0x7ec>
 8002040:	1e52      	subs	r2, r2, #1
 8002042:	2a03      	cmp	r2, #3
 8002044:	d801      	bhi.n	800204a <__iar_annotation$$branch+0x4>

08002046 <__iar_annotation$$branch>:
 8002046:	f000 fcb7 	bl	80029b8 <__iar_annotation$$branch+0x858>
 800204a:	1f12      	subs	r2, r2, #4
 800204c:	d100      	bne.n	8002050 <__iar_annotation$$branch+0xa>
 800204e:	e0af      	b.n	80021b0 <__iar_annotation$$branch+0x50>
 8002050:	1e92      	subs	r2, r2, #2
 8002052:	d100      	bne.n	8002056 <__iar_annotation$$branch+0x10>
 8002054:	e221      	b.n	800249a <__iar_annotation$$branch+0x33a>
 8002056:	1ed2      	subs	r2, r2, #3
 8002058:	d100      	bne.n	800205c <__iar_annotation$$branch+0x16>
 800205a:	e0c1      	b.n	80021e0 <__iar_annotation$$branch+0x80>
 800205c:	1e52      	subs	r2, r2, #1
 800205e:	d100      	bne.n	8002062 <__iar_annotation$$branch+0x1c>
 8002060:	e100      	b.n	8002264 <__iar_annotation$$branch+0x104>
 8002062:	1e52      	subs	r2, r2, #1
 8002064:	d100      	bne.n	8002068 <__iar_annotation$$branch+0x22>
 8002066:	e10f      	b.n	8002288 <__iar_annotation$$branch+0x128>
 8002068:	1e52      	subs	r2, r2, #1
 800206a:	d100      	bne.n	800206e <__iar_annotation$$branch+0x28>
 800206c:	e128      	b.n	80022c0 <__iar_annotation$$branch+0x160>
 800206e:	1e52      	subs	r2, r2, #1
 8002070:	d100      	bne.n	8002074 <__iar_annotation$$branch+0x2e>
 8002072:	e178      	b.n	8002366 <__iar_annotation$$branch+0x206>
 8002074:	1e92      	subs	r2, r2, #2
 8002076:	d0a6      	beq.n	8001fc6 <USBPD_PE_StateMachine_SNK+0x19e>
 8002078:	1e92      	subs	r2, r2, #2
 800207a:	d0e3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800207c:	1e52      	subs	r2, r2, #1
 800207e:	d101      	bne.n	8002084 <__iar_annotation$$branch+0x4>

08002080 <__iar_annotation$$branch>:
 8002080:	f000 fbe5 	bl	800284e <__iar_annotation$$branch+0x6ee>
 8002084:	1f12      	subs	r2, r2, #4
 8002086:	d100      	bne.n	800208a <__iar_annotation$$branch+0xa>
 8002088:	e26a      	b.n	8002560 <__iar_annotation$$branch+0x400>
 800208a:	1ed2      	subs	r2, r2, #3
 800208c:	d100      	bne.n	8002090 <__iar_annotation$$branch+0x10>
 800208e:	e334      	b.n	80026fa <__iar_annotation$$branch+0x59a>
 8002090:	1f52      	subs	r2, r2, #5
 8002092:	d100      	bne.n	8002096 <__iar_annotation$$branch+0x16>
 8002094:	e388      	b.n	80027a8 <__iar_annotation$$branch+0x648>
 8002096:	1e52      	subs	r2, r2, #1
 8002098:	d100      	bne.n	800209c <__iar_annotation$$branch+0x1c>
 800209a:	e2ff      	b.n	800269c <__iar_annotation$$branch+0x53c>
 800209c:	3a09      	subs	r2, #9
 800209e:	2a02      	cmp	r2, #2
 80020a0:	d9d0      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020a2:	1ed2      	subs	r2, r2, #3
 80020a4:	d101      	bne.n	80020aa <__iar_annotation$$branch+0x4>

080020a6 <__iar_annotation$$branch>:
 80020a6:	f000 fc01 	bl	80028ac <__iar_annotation$$branch+0x74c>
 80020aa:	1e52      	subs	r2, r2, #1
 80020ac:	d101      	bne.n	80020b2 <__iar_annotation$$branch+0x4>

080020ae <__iar_annotation$$branch>:
 80020ae:	f000 fc0f 	bl	80028d0 <__iar_annotation$$branch+0x770>
 80020b2:	1e52      	subs	r2, r2, #1
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	d9c5      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020b8:	3a0d      	subs	r2, #13
 80020ba:	d0c3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020bc:	3a12      	subs	r2, #18
 80020be:	d101      	bne.n	80020c4 <__iar_annotation$$branch+0x4>

080020c0 <__iar_annotation$$branch>:
 80020c0:	f000 fc92 	bl	80029e8 <__iar_annotation$$branch+0x888>
 80020c4:	3a0c      	subs	r2, #12
 80020c6:	d067      	beq.n	8002198 <__iar_annotation$$branch+0x38>
 80020c8:	1e52      	subs	r2, r2, #1
 80020ca:	2a02      	cmp	r2, #2
 80020cc:	d9ba      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020ce:	1f52      	subs	r2, r2, #5
 80020d0:	d100      	bne.n	80020d4 <__iar_annotation$$branch+0x14>
 80020d2:	e271      	b.n	80025b8 <__iar_annotation$$branch+0x458>
 80020d4:	1e52      	subs	r2, r2, #1
 80020d6:	d0b5      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020d8:	1e52      	subs	r2, r2, #1
 80020da:	d100      	bne.n	80020de <__iar_annotation$$branch+0x1e>
 80020dc:	e174      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 80020de:	1e52      	subs	r2, r2, #1
 80020e0:	d100      	bne.n	80020e4 <__iar_annotation$$branch+0x24>
 80020e2:	e1be      	b.n	8002462 <__iar_annotation$$branch+0x302>
 80020e4:	1e52      	subs	r2, r2, #1
 80020e6:	2a08      	cmp	r2, #8
 80020e8:	d801      	bhi.n	80020ee <__iar_annotation$$branch+0x4>

080020ea <__iar_annotation$$branch>:
 80020ea:	f000 fc6a 	bl	80029c2 <__iar_annotation$$branch+0x862>
 80020ee:	3a0b      	subs	r2, #11
 80020f0:	d101      	bne.n	80020f6 <__iar_annotation$$branch+0x4>

080020f2 <__iar_annotation$$branch>:
 80020f2:	f000 fc7f 	bl	80029f4 <__iar_annotation$$branch+0x894>
 80020f6:	a903      	add	r1, sp, #12
 80020f8:	0028      	movs	r0, r5
 80020fa:	f002 f9e3 	bl	80044c4 <PE_StateMachine_VDM>
 80020fe:	0004      	movs	r4, r0
 8002100:	7c6a      	ldrb	r2, [r5, #17]
 8002102:	7ca8      	ldrb	r0, [r5, #18]
 8002104:	4290      	cmp	r0, r2
 8002106:	d008      	beq.n	800211a <__iar_annotation$$branch+0x28>
 8002108:	74aa      	strb	r2, [r5, #18]
 800210a:	2000      	movs	r0, #0
 800210c:	9000      	str	r0, [sp, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	7c29      	ldrb	r1, [r5, #16]
 8002112:	2004      	movs	r0, #4
 8002114:	4e13      	ldr	r6, [pc, #76]	; (8002164 <__iar_annotation$$branch+0x4>)
 8002116:	6836      	ldr	r6, [r6, #0]
 8002118:	47b0      	blx	r6
 800211a:	4e12      	ldr	r6, [pc, #72]	; (8002164 <__iar_annotation$$branch+0x4>)
 800211c:	4668      	mov	r0, sp
 800211e:	7b00      	ldrb	r0, [r0, #12]
 8002120:	2814      	cmp	r0, #20
 8002122:	d101      	bne.n	8002128 <__iar_annotation$$branch+0x4>

08002124 <__iar_annotation$$branch>:
 8002124:	f000 fc73 	bl	8002a0e <__iar_annotation$$branch+0x8ae>
 8002128:	0028      	movs	r0, r5
 800212a:	f7fe fc5b 	bl	80009e4 <PE_Check_AMSConflict>
 800212e:	2815      	cmp	r0, #21
 8002130:	d109      	bne.n	8002146 <__iar_annotation$$branch+0x22>
 8002132:	4668      	mov	r0, sp
 8002134:	7b00      	ldrb	r0, [r0, #12]
 8002136:	2814      	cmp	r0, #20
 8002138:	d005      	beq.n	8002146 <__iar_annotation$$branch+0x22>
 800213a:	2014      	movs	r0, #20
 800213c:	4669      	mov	r1, sp
 800213e:	7308      	strb	r0, [r1, #12]
 8002140:	0028      	movs	r0, r5
 8002142:	f7fe fc08 	bl	8000956 <PE_Clear_RxEvent>
 8002146:	7c6a      	ldrb	r2, [r5, #17]
 8002148:	7ca8      	ldrb	r0, [r5, #18]
 800214a:	4290      	cmp	r0, r2
 800214c:	d007      	beq.n	800215e <__iar_annotation$$branch+0x3a>
 800214e:	74aa      	strb	r2, [r5, #18]
 8002150:	2000      	movs	r0, #0
 8002152:	9000      	str	r0, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	7c29      	ldrb	r1, [r5, #16]
 8002158:	2004      	movs	r0, #4
 800215a:	6834      	ldr	r4, [r6, #0]
 800215c:	47a0      	blx	r4
 800215e:	2400      	movs	r4, #0

08002160 <__iar_annotation$$branch>:
 8002160:	f000 fc74 	bl	8002a4c <__iar_annotation$$branch+0x8ec>
 8002164:	20000000 	.word	0x20000000
 8002168:	fffbffff 	.word	0xfffbffff
 800216c:	fffdffff 	.word	0xfffdffff
 8002170:	000081f4 	.word	0x000081f4
 8002174:	0000801b 	.word	0x0000801b
 8002178:	2400      	movs	r4, #0
 800217a:	43e4      	mvns	r4, r4
 800217c:	0020      	movs	r0, r4
 800217e:	e6a5      	b.n	8001ecc <USBPD_PE_StateMachine_SNK+0xa4>
 8002180:	6868      	ldr	r0, [r5, #4]
 8002182:	6801      	ldr	r1, [r0, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4391      	bics	r1, r2
 8002188:	6001      	str	r1, [r0, #0]
 800218a:	215f      	movs	r1, #95	; 0x5f
 800218c:	7c28      	ldrb	r0, [r5, #16]
 800218e:	f7fe f977 	bl	8000480 <USBPD_PE_Notification>
 8002192:	2400      	movs	r4, #0
 8002194:	43e4      	mvns	r4, r4
 8002196:	e7b3      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002198:	6868      	ldr	r0, [r5, #4]
 800219a:	6801      	ldr	r1, [r0, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4391      	bics	r1, r2
 80021a0:	6001      	str	r1, [r0, #0]
 80021a2:	68a8      	ldr	r0, [r5, #8]
 80021a4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80021a6:	2900      	cmp	r1, #0
 80021a8:	d0f3      	beq.n	8002192 <__iar_annotation$$branch+0x32>
 80021aa:	7c28      	ldrb	r0, [r5, #16]
 80021ac:	4788      	blx	r1
 80021ae:	e7f0      	b.n	8002192 <__iar_annotation$$branch+0x32>
 80021b0:	6868      	ldr	r0, [r5, #4]
 80021b2:	6801      	ldr	r1, [r0, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	0b0b      	lsrs	r3, r1, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0a1      	beq.n	8002100 <__iar_annotation$$branch+0xe>
 80021bc:	078b      	lsls	r3, r1, #30
 80021be:	0f9b      	lsrs	r3, r3, #30
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <__iar_annotation$$branch+0x68>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <__iar_annotation$$branch+0x6a>
 80021c8:	2320      	movs	r3, #32
 80021ca:	2420      	movs	r4, #32
 80021cc:	43a1      	bics	r1, r4
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	772a      	strb	r2, [r5, #28]
 80021d4:	83ef      	strh	r7, [r5, #30]
 80021d6:	24fa      	movs	r4, #250	; 0xfa
 80021d8:	0064      	lsls	r4, r4, #1
 80021da:	2043      	movs	r0, #67	; 0x43
 80021dc:	7468      	strb	r0, [r5, #17]
 80021de:	e78f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80021e0:	4668      	mov	r0, sp
 80021e2:	7b00      	ldrb	r0, [r0, #12]
 80021e4:	2811      	cmp	r0, #17
 80021e6:	d135      	bne.n	8002254 <__iar_annotation$$branch+0xf4>
 80021e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80021ea:	0bc2      	lsrs	r2, r0, #15
 80021ec:	d12c      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021ee:	2607      	movs	r6, #7
 80021f0:	0b02      	lsrs	r2, r0, #12
 80021f2:	4232      	tst	r2, r6
 80021f4:	d028      	beq.n	8002248 <__iar_annotation$$branch+0xe8>
 80021f6:	06c2      	lsls	r2, r0, #27
 80021f8:	0ed2      	lsrs	r2, r2, #27
 80021fa:	2a01      	cmp	r2, #1
 80021fc:	d124      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021fe:	2200      	movs	r2, #0
 8002200:	4bc1      	ldr	r3, [pc, #772]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002202:	18eb      	adds	r3, r5, r3
 8002204:	709a      	strb	r2, [r3, #2]
 8002206:	696a      	ldr	r2, [r5, #20]
 8002208:	4311      	orrs	r1, r2
 800220a:	6169      	str	r1, [r5, #20]
 800220c:	0600      	lsls	r0, r0, #24
 800220e:	0f81      	lsrs	r1, r0, #30
 8002210:	4668      	mov	r0, sp
 8002212:	7b40      	ldrb	r0, [r0, #13]
 8002214:	f7fe fcee 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8002218:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800221a:	0b00      	lsrs	r0, r0, #12
 800221c:	4006      	ands	r6, r0
 800221e:	00b3      	lsls	r3, r6, #2
 8002220:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002222:	1c82      	adds	r2, r0, #2
 8002224:	2104      	movs	r1, #4
 8002226:	7c28      	ldrb	r0, [r5, #16]
 8002228:	68ae      	ldr	r6, [r5, #8]
 800222a:	69b6      	ldr	r6, [r6, #24]
 800222c:	47b0      	blx	r6
 800222e:	2001      	movs	r0, #1
 8002230:	7728      	strb	r0, [r5, #28]
 8002232:	6868      	ldr	r0, [r5, #4]
 8002234:	6801      	ldr	r1, [r0, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	4391      	bics	r1, r2
 800223a:	6001      	str	r1, [r0, #0]
 800223c:	2044      	movs	r0, #68	; 0x44
 800223e:	7468      	strb	r0, [r5, #17]
 8002240:	4668      	mov	r0, sp
 8002242:	7b00      	ldrb	r0, [r0, #12]
 8002244:	2814      	cmp	r0, #20
 8002246:	d005      	beq.n	8002254 <__iar_annotation$$branch+0xf4>
 8002248:	2014      	movs	r0, #20
 800224a:	4669      	mov	r1, sp
 800224c:	7308      	strb	r0, [r1, #12]
 800224e:	0028      	movs	r0, r5
 8002250:	f7fe fb81 	bl	8000956 <PE_Clear_RxEvent>
 8002254:	8be8      	ldrh	r0, [r5, #30]
 8002256:	03a1      	lsls	r1, r4, #14
 8002258:	4288      	cmp	r0, r1
 800225a:	d102      	bne.n	8002262 <__iar_annotation$$branch+0x102>
 800225c:	200f      	movs	r0, #15
 800225e:	7468      	strb	r0, [r5, #17]
 8002260:	2400      	movs	r4, #0
 8002262:	e74d      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002264:	466a      	mov	r2, sp
 8002266:	0029      	movs	r1, r5
 8002268:	3118      	adds	r1, #24
 800226a:	7c28      	ldrb	r0, [r5, #16]
 800226c:	68ab      	ldr	r3, [r5, #8]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4798      	blx	r3
 8002272:	6968      	ldr	r0, [r5, #20]
 8002274:	2118      	movs	r1, #24
 8002276:	4388      	bics	r0, r1
 8002278:	9900      	ldr	r1, [sp, #0]
 800227a:	00c9      	lsls	r1, r1, #3
 800227c:	2218      	movs	r2, #24
 800227e:	400a      	ands	r2, r1
 8002280:	4302      	orrs	r2, r0
 8002282:	616a      	str	r2, [r5, #20]
 8002284:	2045      	movs	r0, #69	; 0x45
 8002286:	e7ea      	b.n	800225e <__iar_annotation$$branch+0xfe>
 8002288:	6968      	ldr	r0, [r5, #20]
 800228a:	0401      	lsls	r1, r0, #16
 800228c:	0fc9      	lsrs	r1, r1, #31
 800228e:	d001      	beq.n	8002294 <__iar_annotation$$branch+0x134>
 8002290:	2002      	movs	r0, #2
 8002292:	e000      	b.n	8002296 <__iar_annotation$$branch+0x136>
 8002294:	2000      	movs	r0, #0
 8002296:	9002      	str	r0, [sp, #8]
 8002298:	2046      	movs	r0, #70	; 0x46
 800229a:	9001      	str	r0, [sp, #4]
 800229c:	2001      	movs	r0, #1
 800229e:	9000      	str	r0, [sp, #0]
 80022a0:	002b      	movs	r3, r5
 80022a2:	3318      	adds	r3, #24
 80022a4:	2202      	movs	r2, #2
 80022a6:	2100      	movs	r1, #0
 80022a8:	0028      	movs	r0, r5
 80022aa:	f7ff f95c 	bl	8001566 <PE_Send_DataMessage>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d105      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 80022b2:	6968      	ldr	r0, [r5, #20]
 80022b4:	4995      	ldr	r1, [pc, #596]	; (800250c <__iar_annotation$$branch+0x3ac>)
 80022b6:	4001      	ands	r1, r0
 80022b8:	6169      	str	r1, [r5, #20]
 80022ba:	83ee      	strh	r6, [r5, #30]
 80022bc:	241b      	movs	r4, #27
 80022be:	e71f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80022c0:	4669      	mov	r1, sp
 80022c2:	7b09      	ldrb	r1, [r1, #12]
 80022c4:	2911      	cmp	r1, #17
 80022c6:	d148      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022c8:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80022ca:	4201      	tst	r1, r0
 80022cc:	d145      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022ce:	20fa      	movs	r0, #250	; 0xfa
 80022d0:	0040      	lsls	r0, r0, #1
 80022d2:	261f      	movs	r6, #31
 80022d4:	221f      	movs	r2, #31
 80022d6:	400a      	ands	r2, r1
 80022d8:	1e92      	subs	r2, r2, #2
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d917      	bls.n	800230e <__iar_annotation$$branch+0x1ae>
 80022de:	1e92      	subs	r2, r2, #2
 80022e0:	d001      	beq.n	80022e6 <__iar_annotation$$branch+0x186>
 80022e2:	3a08      	subs	r2, #8
 80022e4:	d125      	bne.n	8002332 <__iar_annotation$$branch+0x1d2>
 80022e6:	686a      	ldr	r2, [r5, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	0f52      	lsrs	r2, r2, #29
 80022ee:	2a03      	cmp	r2, #3
 80022f0:	d004      	beq.n	80022fc <__iar_annotation$$branch+0x19c>
 80022f2:	2143      	movs	r1, #67	; 0x43
 80022f4:	7469      	strb	r1, [r5, #17]
 80022f6:	83ef      	strh	r7, [r5, #30]
 80022f8:	0004      	movs	r4, r0
 80022fa:	e014      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 80022fc:	4031      	ands	r1, r6
 80022fe:	290c      	cmp	r1, #12
 8002300:	d101      	bne.n	8002306 <__iar_annotation$$branch+0x1a6>
 8002302:	2049      	movs	r0, #73	; 0x49
 8002304:	e000      	b.n	8002308 <__iar_annotation$$branch+0x1a8>
 8002306:	2003      	movs	r0, #3
 8002308:	7468      	strb	r0, [r5, #17]
 800230a:	2400      	movs	r4, #0
 800230c:	e00b      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 800230e:	83ef      	strh	r7, [r5, #30]
 8002310:	0004      	movs	r4, r0
 8002312:	2104      	movs	r1, #4
 8002314:	0028      	movs	r0, r5
 8002316:	f7ff f846 	bl	80013a6 <PE_SetPowerNegotiation>
 800231a:	2047      	movs	r0, #71	; 0x47
 800231c:	7468      	strb	r0, [r5, #17]
 800231e:	4668      	mov	r0, sp
 8002320:	7b00      	ldrb	r0, [r0, #12]
 8002322:	2814      	cmp	r0, #20
 8002324:	d005      	beq.n	8002332 <__iar_annotation$$branch+0x1d2>
 8002326:	2014      	movs	r0, #20
 8002328:	4669      	mov	r1, sp
 800232a:	7308      	strb	r0, [r1, #12]
 800232c:	0028      	movs	r0, r5
 800232e:	f7fe fb12 	bl	8000956 <PE_Clear_RxEvent>
 8002332:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002334:	4006      	ands	r6, r0
 8002336:	2e02      	cmp	r6, #2
 8002338:	d009      	beq.n	800234e <__iar_annotation$$branch+0x1ee>
 800233a:	2e03      	cmp	r6, #3
 800233c:	d009      	beq.n	8002352 <__iar_annotation$$branch+0x1f2>
 800233e:	2e04      	cmp	r6, #4
 8002340:	d003      	beq.n	800234a <__iar_annotation$$branch+0x1ea>
 8002342:	2e0c      	cmp	r6, #12
 8002344:	d109      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002346:	2103      	movs	r1, #3
 8002348:	e004      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234a:	2102      	movs	r1, #2
 800234c:	e002      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234e:	2104      	movs	r1, #4
 8002350:	e000      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 8002352:	2101      	movs	r1, #1
 8002354:	7c28      	ldrb	r0, [r5, #16]
 8002356:	f7fe f893 	bl	8000480 <USBPD_PE_Notification>
 800235a:	8be8      	ldrh	r0, [r5, #30]
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0209      	lsls	r1, r1, #8
 8002360:	4288      	cmp	r0, r1
 8002362:	d1ac      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 8002364:	e77a      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002366:	4668      	mov	r0, sp
 8002368:	7b00      	ldrb	r0, [r0, #12]
 800236a:	2811      	cmp	r0, #17
 800236c:	d1f5      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 800236e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002370:	499f      	ldr	r1, [pc, #636]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002372:	4001      	ands	r1, r0
 8002374:	2906      	cmp	r1, #6
 8002376:	d1f0      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002378:	2014      	movs	r0, #20
 800237a:	4669      	mov	r1, sp
 800237c:	7308      	strb	r0, [r1, #12]
 800237e:	0028      	movs	r0, r5
 8002380:	f7fe fae9 	bl	8000956 <PE_Clear_RxEvent>
 8002384:	2103      	movs	r1, #3
 8002386:	0028      	movs	r0, r5
 8002388:	f7ff f80d 	bl	80013a6 <PE_SetPowerNegotiation>
 800238c:	2110      	movs	r1, #16
 800238e:	7c28      	ldrb	r0, [r5, #16]
 8002390:	f7fe f876 	bl	8000480 <USBPD_PE_Notification>
 8002394:	6868      	ldr	r0, [r5, #4]
 8002396:	6800      	ldr	r0, [r0, #0]
 8002398:	0401      	lsls	r1, r0, #16
 800239a:	0fc9      	lsrs	r1, r1, #31
 800239c:	d002      	beq.n	80023a4 <__iar_annotation$$branch+0x244>
 800239e:	6828      	ldr	r0, [r5, #0]
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	e000      	b.n	80023a6 <__iar_annotation$$branch+0x246>
 80023a4:	2101      	movs	r1, #1
 80023a6:	4668      	mov	r0, sp
 80023a8:	7b40      	ldrb	r0, [r0, #13]
 80023aa:	f003 f9fb 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80023ae:	2000      	movs	r0, #0
 80023b0:	84a8      	strh	r0, [r5, #36]	; 0x24
 80023b2:	2003      	movs	r0, #3
 80023b4:	6969      	ldr	r1, [r5, #20]
 80023b6:	08c9      	lsrs	r1, r1, #3
 80023b8:	4001      	ands	r1, r0
 80023ba:	2903      	cmp	r1, #3
 80023bc:	d101      	bne.n	80023c2 <__iar_annotation$$branch+0x262>
 80023be:	498d      	ldr	r1, [pc, #564]	; (80025f4 <__iar_annotation$$branch+0x494>)
 80023c0:	84a9      	strh	r1, [r5, #36]	; 0x24
 80023c2:	7468      	strb	r0, [r5, #17]
 80023c4:	2400      	movs	r4, #0
 80023c6:	e7c8      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 80023c8:	a903      	add	r1, sp, #12
 80023ca:	0028      	movs	r0, r5
 80023cc:	f001 fbac 	bl	8003b28 <PE_StateMachine_VDMCable>
 80023d0:	e695      	b.n	80020fe <__iar_annotation$$branch+0xc>
 80023d2:	2601      	movs	r6, #1
 80023d4:	6868      	ldr	r0, [r5, #4]
 80023d6:	6800      	ldr	r0, [r0, #0]
 80023d8:	0bc0      	lsrs	r0, r0, #15
 80023da:	4030      	ands	r0, r6
 80023dc:	d006      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023de:	68a8      	ldr	r0, [r5, #8]
 80023e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d002      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023e6:	2100      	movs	r1, #0
 80023e8:	7c28      	ldrb	r0, [r5, #16]
 80023ea:	4790      	blx	r2
 80023ec:	6868      	ldr	r0, [r5, #4]
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4391      	bics	r1, r2
 80023f4:	6001      	str	r1, [r0, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	0028      	movs	r0, r5
 80023fa:	f7fe ffd4 	bl	80013a6 <PE_SetPowerNegotiation>
 80023fe:	4842      	ldr	r0, [pc, #264]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002400:	1829      	adds	r1, r5, r0
 8002402:	7888      	ldrb	r0, [r1, #2]
 8002404:	2803      	cmp	r0, #3
 8002406:	d309      	bcc.n	800241c <__iar_annotation$$branch+0x2bc>
 8002408:	6968      	ldr	r0, [r5, #20]
 800240a:	0880      	lsrs	r0, r0, #2
 800240c:	4006      	ands	r6, r0
 800240e:	d003      	beq.n	8002418 <__iar_annotation$$branch+0x2b8>
 8002410:	68a8      	ldr	r0, [r5, #8]
 8002412:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002414:	2800      	cmp	r0, #0
 8002416:	d171      	bne.n	80024fc <__iar_annotation$$branch+0x39c>
 8002418:	2000      	movs	r0, #0
 800241a:	e6df      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 800241c:	1c40      	adds	r0, r0, #1
 800241e:	7088      	strb	r0, [r1, #2]
 8002420:	2105      	movs	r1, #5
 8002422:	0028      	movs	r0, r5
 8002424:	f7fe fa32 	bl	800088c <PE_Send_RESET>
 8002428:	4873      	ldr	r0, [pc, #460]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800242a:	83e8      	strh	r0, [r5, #30]
 800242c:	2201      	movs	r2, #1
 800242e:	2101      	movs	r1, #1
 8002430:	0028      	movs	r0, r5
 8002432:	f7fe ffaf 	bl	8001394 <PE_CallHardResetCallback>
 8002436:	209b      	movs	r0, #155	; 0x9b
 8002438:	e711      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800243a:	6868      	ldr	r0, [r5, #4]
 800243c:	6800      	ldr	r0, [r0, #0]
 800243e:	0401      	lsls	r1, r0, #16
 8002440:	0fc9      	lsrs	r1, r1, #31
 8002442:	d006      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 8002444:	68a8      	ldr	r0, [r5, #8]
 8002446:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002448:	2a00      	cmp	r2, #0
 800244a:	d002      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 800244c:	2100      	movs	r1, #0
 800244e:	7c28      	ldrb	r0, [r5, #16]
 8002450:	4790      	blx	r2
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	0028      	movs	r0, r5
 8002458:	f7fe ff9c 	bl	8001394 <PE_CallHardResetCallback>
 800245c:	4866      	ldr	r0, [pc, #408]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800245e:	83e8      	strh	r0, [r5, #30]
 8002460:	e7e9      	b.n	8002436 <__iar_annotation$$branch+0x2d6>
 8002462:	2100      	movs	r1, #0
 8002464:	4668      	mov	r0, sp
 8002466:	7b40      	ldrb	r0, [r0, #13]
 8002468:	68aa      	ldr	r2, [r5, #8]
 800246a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800246c:	4790      	blx	r2
 800246e:	2801      	cmp	r0, #1
 8002470:	d10d      	bne.n	800248e <__iar_annotation$$branch+0x32e>
 8002472:	4862      	ldr	r0, [pc, #392]	; (80025fc <__iar_annotation$$branch+0x49c>)
 8002474:	83e8      	strh	r0, [r5, #30]
 8002476:	2169      	movs	r1, #105	; 0x69
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe f800 	bl	8000480 <USBPD_PE_Notification>
 8002480:	2040      	movs	r0, #64	; 0x40
 8002482:	7468      	strb	r0, [r5, #17]
 8002484:	2400      	movs	r4, #0
 8002486:	2113      	movs	r1, #19
 8002488:	7c28      	ldrb	r0, [r5, #16]
 800248a:	f7fd fff9 	bl	8000480 <USBPD_PE_Notification>
 800248e:	8be8      	ldrh	r0, [r5, #30]
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0209      	lsls	r1, r1, #8
 8002494:	4288      	cmp	r0, r1
 8002496:	d135      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002498:	e01e      	b.n	80024d8 <__iar_annotation$$branch+0x378>
 800249a:	2101      	movs	r1, #1
 800249c:	4668      	mov	r0, sp
 800249e:	7b40      	ldrb	r0, [r0, #13]
 80024a0:	68aa      	ldr	r2, [r5, #8]
 80024a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024a4:	4790      	blx	r2
 80024a6:	2801      	cmp	r0, #1
 80024a8:	d111      	bne.n	80024ce <__iar_annotation$$branch+0x36e>
 80024aa:	0028      	movs	r0, r5
 80024ac:	f7fe fb01 	bl	8000ab2 <PE_Reset_HardReset>
 80024b0:	2205      	movs	r2, #5
 80024b2:	2100      	movs	r1, #0
 80024b4:	0028      	movs	r0, r5
 80024b6:	f7fe ff6d 	bl	8001394 <PE_CallHardResetCallback>
 80024ba:	2168      	movs	r1, #104	; 0x68
 80024bc:	4668      	mov	r0, sp
 80024be:	7b40      	ldrb	r0, [r0, #13]
 80024c0:	f7fd ffde 	bl	8000480 <USBPD_PE_Notification>
 80024c4:	83ef      	strh	r7, [r5, #30]
 80024c6:	24fa      	movs	r4, #250	; 0xfa
 80024c8:	0064      	lsls	r4, r4, #1
 80024ca:	2043      	movs	r0, #67	; 0x43
 80024cc:	7468      	strb	r0, [r5, #17]
 80024ce:	8be8      	ldrh	r0, [r5, #30]
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0209      	lsls	r1, r1, #8
 80024d4:	4288      	cmp	r0, r1
 80024d6:	d115      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 80024d8:	2206      	movs	r2, #6
 80024da:	2100      	movs	r1, #0
 80024dc:	0028      	movs	r0, r5
 80024de:	f7fe ff59 	bl	8001394 <PE_CallHardResetCallback>
 80024e2:	4809      	ldr	r0, [pc, #36]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 80024e4:	1828      	adds	r0, r5, r0
 80024e6:	7880      	ldrb	r0, [r0, #2]
 80024e8:	2803      	cmp	r0, #3
 80024ea:	d200      	bcs.n	80024ee <__iar_annotation$$branch+0x38e>
 80024ec:	e6b6      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80024ee:	6968      	ldr	r0, [r5, #20]
 80024f0:	0741      	lsls	r1, r0, #29
 80024f2:	0fc9      	lsrs	r1, r1, #31
 80024f4:	d004      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024f6:	68a8      	ldr	r0, [r5, #8]
 80024f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d000      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024fe:	e0fa      	b.n	80026f6 <__iar_annotation$$branch+0x596>
 8002500:	2400      	movs	r4, #0
 8002502:	746c      	strb	r4, [r5, #17]
 8002504:	e5fc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002506:	bf00      	nop
 8002508:	0000025e 	.word	0x0000025e
 800250c:	ffff7fff 	.word	0xffff7fff
 8002510:	2000      	movs	r0, #0
 8002512:	9000      	str	r0, [sp, #0]
 8002514:	2303      	movs	r3, #3
 8002516:	2203      	movs	r2, #3
 8002518:	2100      	movs	r1, #0
 800251a:	0028      	movs	r0, r5
 800251c:	f7fe fff8 	bl	8001510 <PE_Send_CtrlMessage>
 8002520:	2800      	cmp	r0, #0
 8002522:	d1ef      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002524:	2001      	movs	r0, #1
 8002526:	7728      	strb	r0, [r5, #28]
 8002528:	e654      	b.n	80021d4 <__iar_annotation$$branch+0x74>
 800252a:	6868      	ldr	r0, [r5, #4]
 800252c:	6800      	ldr	r0, [r0, #0]
 800252e:	0540      	lsls	r0, r0, #21
 8002530:	0f40      	lsrs	r0, r0, #29
 8002532:	2804      	cmp	r0, #4
 8002534:	d100      	bne.n	8002538 <__iar_annotation$$branch+0x3d8>
 8002536:	e691      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002538:	2000      	movs	r0, #0
 800253a:	9000      	str	r0, [sp, #0]
 800253c:	2350      	movs	r3, #80	; 0x50
 800253e:	220d      	movs	r2, #13
 8002540:	2031      	movs	r0, #49	; 0x31
 8002542:	5c29      	ldrb	r1, [r5, r0]
 8002544:	0028      	movs	r0, r5
 8002546:	f7fe ffe3 	bl	8001510 <PE_Send_CtrlMessage>
 800254a:	2800      	cmp	r0, #0
 800254c:	d107      	bne.n	800255e <__iar_annotation$$branch+0x3fe>
 800254e:	2003      	movs	r0, #3
 8002550:	7728      	strb	r0, [r5, #28]
 8002552:	83ee      	strh	r6, [r5, #30]
 8002554:	241b      	movs	r4, #27
 8002556:	2130      	movs	r1, #48	; 0x30
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	f7fd ff91 	bl	8000480 <USBPD_PE_Notification>
 800255e:	e5cf      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002560:	4668      	mov	r0, sp
 8002562:	7b00      	ldrb	r0, [r0, #12]
 8002564:	2814      	cmp	r0, #20
 8002566:	d017      	beq.n	8002598 <__iar_annotation$$branch+0x438>
 8002568:	2030      	movs	r0, #48	; 0x30
 800256a:	5c28      	ldrb	r0, [r5, r0]
 800256c:	2131      	movs	r1, #49	; 0x31
 800256e:	5c69      	ldrb	r1, [r5, r1]
 8002570:	4288      	cmp	r0, r1
 8002572:	d111      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 8002574:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002576:	491e      	ldr	r1, [pc, #120]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002578:	4001      	ands	r1, r0
 800257a:	2903      	cmp	r1, #3
 800257c:	d10c      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 800257e:	2001      	movs	r0, #1
 8002580:	7728      	strb	r0, [r5, #28]
 8002582:	83ef      	strh	r7, [r5, #30]
 8002584:	24fa      	movs	r4, #250	; 0xfa
 8002586:	0064      	lsls	r4, r4, #1
 8002588:	2043      	movs	r0, #67	; 0x43
 800258a:	7468      	strb	r0, [r5, #17]
 800258c:	2014      	movs	r0, #20
 800258e:	4669      	mov	r1, sp
 8002590:	7308      	strb	r0, [r1, #12]
 8002592:	0028      	movs	r0, r5
 8002594:	f7fe f9df 	bl	8000956 <PE_Clear_RxEvent>
 8002598:	e6df      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 800259a:	9400      	str	r4, [sp, #0]
 800259c:	2343      	movs	r3, #67	; 0x43
 800259e:	2207      	movs	r2, #7
 80025a0:	2100      	movs	r1, #0
 80025a2:	0028      	movs	r0, r5
 80025a4:	f7fe ffb4 	bl	8001510 <PE_Send_CtrlMessage>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d11f      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ac:	2006      	movs	r0, #6
 80025ae:	7728      	strb	r0, [r5, #28]
 80025b0:	83ee      	strh	r6, [r5, #30]
 80025b2:	241b      	movs	r4, #27
 80025b4:	210b      	movs	r1, #11
 80025b6:	e7cf      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80025b8:	4668      	mov	r0, sp
 80025ba:	7b00      	ldrb	r0, [r0, #12]
 80025bc:	2811      	cmp	r0, #17
 80025be:	d115      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025c0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80025c2:	490b      	ldr	r1, [pc, #44]	; (80025f0 <__iar_annotation$$branch+0x490>)
 80025c4:	4001      	ands	r1, r0
 80025c6:	2906      	cmp	r1, #6
 80025c8:	d110      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	7c28      	ldrb	r0, [r5, #16]
 80025ce:	f7fd ff57 	bl	8000480 <USBPD_PE_Notification>
 80025d2:	2003      	movs	r0, #3
 80025d4:	7468      	strb	r0, [r5, #17]
 80025d6:	2400      	movs	r4, #0
 80025d8:	4668      	mov	r0, sp
 80025da:	7b00      	ldrb	r0, [r0, #12]
 80025dc:	2814      	cmp	r0, #20
 80025de:	d005      	beq.n	80025ec <__iar_annotation$$branch+0x48c>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe f9b5 	bl	8000956 <PE_Clear_RxEvent>
 80025ec:	e588      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80025ee:	bf00      	nop
 80025f0:	0000f01f 	.word	0x0000f01f
 80025f4:	0000a328 	.word	0x0000a328
 80025f8:	000083e8 	.word	0x000083e8
 80025fc:	000088e3 	.word	0x000088e3
 8002600:	2000      	movs	r0, #0
 8002602:	9000      	str	r0, [sp, #0]
 8002604:	2303      	movs	r3, #3
 8002606:	2204      	movs	r2, #4
 8002608:	2100      	movs	r1, #0
 800260a:	0028      	movs	r0, r5
 800260c:	f7fe ff80 	bl	8001510 <PE_Send_CtrlMessage>
 8002610:	e576      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002612:	4668      	mov	r0, sp
 8002614:	7800      	ldrb	r0, [r0, #0]
 8002616:	2804      	cmp	r0, #4
 8002618:	d006      	beq.n	8002628 <__iar_annotation$$branch+0x4c8>
 800261a:	2000      	movs	r0, #0
 800261c:	7728      	strb	r0, [r5, #28]
 800261e:	7469      	strb	r1, [r5, #17]
 8002620:	2120      	movs	r1, #32
 8002622:	7c28      	ldrb	r0, [r5, #16]
 8002624:	f7fd ff2c 	bl	8000480 <USBPD_PE_Notification>
 8002628:	a903      	add	r1, sp, #12
 800262a:	0028      	movs	r0, r5
 800262c:	f000 fa1a 	bl	8002a64 <PE_StateMachine_SNK_ReadyWait>
 8002630:	e565      	b.n	80020fe <__iar_annotation$$branch+0xc>
 8002632:	68a8      	ldr	r0, [r5, #8]
 8002634:	6881      	ldr	r1, [r0, #8]
 8002636:	2900      	cmp	r1, #0
 8002638:	d02e      	beq.n	8002698 <__iar_annotation$$branch+0x538>
 800263a:	4668      	mov	r0, sp
 800263c:	7b40      	ldrb	r0, [r0, #13]
 800263e:	4788      	blx	r1
 8002640:	280a      	cmp	r0, #10
 8002642:	d002      	beq.n	800264a <__iar_annotation$$branch+0x4ea>
 8002644:	280d      	cmp	r0, #13
 8002646:	d022      	beq.n	800268e <__iar_annotation$$branch+0x52e>
 8002648:	e026      	b.n	8002698 <__iar_annotation$$branch+0x538>
 800264a:	2201      	movs	r2, #1
 800264c:	2100      	movs	r1, #0
 800264e:	7c28      	ldrb	r0, [r5, #16]
 8002650:	68ab      	ldr	r3, [r5, #8]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	4798      	blx	r3
 8002656:	2000      	movs	r0, #0
 8002658:	9000      	str	r0, [sp, #0]
 800265a:	2359      	movs	r3, #89	; 0x59
 800265c:	2203      	movs	r2, #3
 800265e:	2100      	movs	r1, #0
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ff55 	bl	8001510 <PE_Send_CtrlMessage>
 8002666:	2800      	cmp	r0, #0
 8002668:	d110      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 800266a:	2008      	movs	r0, #8
 800266c:	7728      	strb	r0, [r5, #28]
 800266e:	6868      	ldr	r0, [r5, #4]
 8002670:	6801      	ldr	r1, [r0, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	430a      	orrs	r2, r1
 8002676:	6002      	str	r2, [r0, #0]
 8002678:	2206      	movs	r2, #6
 800267a:	2100      	movs	r1, #0
 800267c:	7c28      	ldrb	r0, [r5, #16]
 800267e:	68ab      	ldr	r3, [r5, #8]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	4798      	blx	r3
 8002684:	48b0      	ldr	r0, [pc, #704]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 8002686:	83e8      	strh	r0, [r5, #30]
 8002688:	24e1      	movs	r4, #225	; 0xe1
 800268a:	00a4      	lsls	r4, r4, #2
 800268c:	e538      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800268e:	2000      	movs	r0, #0
 8002690:	9000      	str	r0, [sp, #0]
 8002692:	2303      	movs	r3, #3
 8002694:	220c      	movs	r2, #12
 8002696:	e7b7      	b.n	8002608 <__iar_annotation$$branch+0x4a8>
 8002698:	202a      	movs	r0, #42	; 0x2a
 800269a:	e5e0      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800269c:	4668      	mov	r0, sp
 800269e:	7b00      	ldrb	r0, [r0, #12]
 80026a0:	2811      	cmp	r0, #17
 80026a2:	d119      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026a4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80026a6:	49c1      	ldr	r1, [pc, #772]	; (80029ac <__iar_annotation$$branch+0x84c>)
 80026a8:	4001      	ands	r1, r0
 80026aa:	2906      	cmp	r1, #6
 80026ac:	d114      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026ae:	7f28      	ldrb	r0, [r5, #28]
 80026b0:	2809      	cmp	r0, #9
 80026b2:	d005      	beq.n	80026c0 <__iar_annotation$$branch+0x560>
 80026b4:	2209      	movs	r2, #9
 80026b6:	2100      	movs	r1, #0
 80026b8:	7c28      	ldrb	r0, [r5, #16]
 80026ba:	68ab      	ldr	r3, [r5, #8]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	4798      	blx	r3
 80026c0:	2053      	movs	r0, #83	; 0x53
 80026c2:	7468      	strb	r0, [r5, #17]
 80026c4:	4668      	mov	r0, sp
 80026c6:	7b00      	ldrb	r0, [r0, #12]
 80026c8:	2814      	cmp	r0, #20
 80026ca:	d005      	beq.n	80026d8 <__iar_annotation$$branch+0x578>
 80026cc:	2014      	movs	r0, #20
 80026ce:	4669      	mov	r1, sp
 80026d0:	7308      	strb	r0, [r1, #12]
 80026d2:	0028      	movs	r0, r5
 80026d4:	f7fe f93f 	bl	8000956 <PE_Clear_RxEvent>
 80026d8:	8be8      	ldrh	r0, [r5, #30]
 80026da:	03a1      	lsls	r1, r4, #14
 80026dc:	4288      	cmp	r0, r1
 80026de:	d1d5      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 80026e0:	220f      	movs	r2, #15
 80026e2:	2100      	movs	r1, #0
 80026e4:	7c28      	ldrb	r0, [r5, #16]
 80026e6:	68ab      	ldr	r3, [r5, #8]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	4798      	blx	r3
 80026ec:	68a8      	ldr	r0, [r5, #8]
 80026ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d100      	bne.n	80026f6 <__iar_annotation$$branch+0x596>
 80026f4:	e5b2      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80026f6:	2092      	movs	r0, #146	; 0x92
 80026f8:	e5b1      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80026fa:	0028      	movs	r0, r5
 80026fc:	f7fe fe53 	bl	80013a6 <PE_SetPowerNegotiation>
 8002700:	220a      	movs	r2, #10
 8002702:	2100      	movs	r1, #0
 8002704:	7c28      	ldrb	r0, [r5, #16]
 8002706:	68ab      	ldr	r3, [r5, #8]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	4798      	blx	r3
 800270c:	6868      	ldr	r0, [r5, #4]
 800270e:	7800      	ldrb	r0, [r0, #0]
 8002710:	0780      	lsls	r0, r0, #30
 8002712:	0f80      	lsrs	r0, r0, #30
 8002714:	2802      	cmp	r0, #2
 8002716:	d102      	bne.n	800271e <__iar_annotation$$branch+0x5be>
 8002718:	7c28      	ldrb	r0, [r5, #16]
 800271a:	f003 f820 	bl	800575e <USBPD_PRL_SRCSetSinkNG>
 800271e:	2101      	movs	r1, #1
 8002720:	0028      	movs	r0, r5
 8002722:	f7fe f8d3 	bl	80008cc <PE_ChangePowerRole>
 8002726:	7f28      	ldrb	r0, [r5, #28]
 8002728:	2809      	cmp	r0, #9
 800272a:	d005      	beq.n	8002738 <__iar_annotation$$branch+0x5d8>
 800272c:	220b      	movs	r2, #11
 800272e:	2101      	movs	r1, #1
 8002730:	7c28      	ldrb	r0, [r5, #16]
 8002732:	68ab      	ldr	r3, [r5, #8]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	4798      	blx	r3
 8002738:	2000      	movs	r0, #0
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	235b      	movs	r3, #91	; 0x5b
 800273e:	2206      	movs	r2, #6
 8002740:	2100      	movs	r1, #0
 8002742:	0028      	movs	r0, r5
 8002744:	f7fe fee4 	bl	8001510 <PE_Send_CtrlMessage>
 8002748:	2800      	cmp	r0, #0
 800274a:	d108      	bne.n	800275e <__iar_annotation$$branch+0x5fe>
 800274c:	220c      	movs	r2, #12
 800274e:	2100      	movs	r1, #0
 8002750:	7c28      	ldrb	r0, [r5, #16]
 8002752:	68ab      	ldr	r3, [r5, #8]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	4798      	blx	r3
 8002758:	48c1      	ldr	r0, [pc, #772]	; (8002a60 <.text_3>)
 800275a:	83e8      	strh	r0, [r5, #30]
 800275c:	2414      	movs	r4, #20
 800275e:	7c68      	ldrb	r0, [r5, #17]
 8002760:	285b      	cmp	r0, #91	; 0x5b
 8002762:	d00f      	beq.n	8002784 <__iar_annotation$$branch+0x624>
 8002764:	2100      	movs	r1, #0
 8002766:	0028      	movs	r0, r5
 8002768:	f7fe f8b0 	bl	80008cc <PE_ChangePowerRole>
 800276c:	2206      	movs	r2, #6
 800276e:	2101      	movs	r1, #1
 8002770:	7c28      	ldrb	r0, [r5, #16]
 8002772:	68ab      	ldr	r3, [r5, #8]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	4798      	blx	r3
 8002778:	2207      	movs	r2, #7
 800277a:	2100      	movs	r1, #0
 800277c:	7c28      	ldrb	r0, [r5, #16]
 800277e:	68ab      	ldr	r3, [r5, #8]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	4798      	blx	r3
 8002784:	e4bc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002786:	9400      	str	r4, [sp, #0]
 8002788:	2358      	movs	r3, #88	; 0x58
 800278a:	220a      	movs	r2, #10
 800278c:	2100      	movs	r1, #0
 800278e:	0028      	movs	r0, r5
 8002790:	f7fe febe 	bl	8001510 <PE_Send_CtrlMessage>
 8002794:	2800      	cmp	r0, #0
 8002796:	d105      	bne.n	80027a4 <__iar_annotation$$branch+0x644>
 8002798:	2008      	movs	r0, #8
 800279a:	7728      	strb	r0, [r5, #28]
 800279c:	83ee      	strh	r6, [r5, #30]
 800279e:	241b      	movs	r4, #27
 80027a0:	2202      	movs	r2, #2
 80027a2:	e7ea      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a4:	220f      	movs	r2, #15
 80027a6:	e7e8      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a8:	4669      	mov	r1, sp
 80027aa:	7b09      	ldrb	r1, [r1, #12]
 80027ac:	2911      	cmp	r1, #17
 80027ae:	d10c      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b0:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80027b2:	4201      	tst	r1, r0
 80027b4:	d109      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b6:	06c8      	lsls	r0, r1, #27
 80027b8:	0ec0      	lsrs	r0, r0, #27
 80027ba:	2803      	cmp	r0, #3
 80027bc:	d006      	beq.n	80027cc <__iar_annotation$$branch+0x66c>
 80027be:	2804      	cmp	r0, #4
 80027c0:	d02d      	beq.n	800281e <__iar_annotation$$branch+0x6be>
 80027c2:	280c      	cmp	r0, #12
 80027c4:	d029      	beq.n	800281a <__iar_annotation$$branch+0x6ba>
 80027c6:	2810      	cmp	r0, #16
 80027c8:	d032      	beq.n	8002830 <__iar_annotation$$branch+0x6d0>
 80027ca:	e0a5      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 80027cc:	6868      	ldr	r0, [r5, #4]
 80027ce:	6801      	ldr	r1, [r0, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	430a      	orrs	r2, r1
 80027d4:	6002      	str	r2, [r0, #0]
 80027d6:	485c      	ldr	r0, [pc, #368]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 80027d8:	83e8      	strh	r0, [r5, #30]
 80027da:	24e1      	movs	r4, #225	; 0xe1
 80027dc:	00a4      	lsls	r4, r4, #2
 80027de:	7f28      	ldrb	r0, [r5, #28]
 80027e0:	2809      	cmp	r0, #9
 80027e2:	d005      	beq.n	80027f0 <__iar_annotation$$branch+0x690>
 80027e4:	2206      	movs	r2, #6
 80027e6:	2100      	movs	r1, #0
 80027e8:	7c28      	ldrb	r0, [r5, #16]
 80027ea:	68ab      	ldr	r3, [r5, #8]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	4798      	blx	r3
 80027f0:	2104      	movs	r1, #4
 80027f2:	0028      	movs	r0, r5
 80027f4:	f7fe fdd7 	bl	80013a6 <PE_SetPowerNegotiation>
 80027f8:	213a      	movs	r1, #58	; 0x3a
 80027fa:	7c28      	ldrb	r0, [r5, #16]
 80027fc:	f7fd fe40 	bl	8000480 <USBPD_PE_Notification>
 8002800:	4668      	mov	r0, sp
 8002802:	7b00      	ldrb	r0, [r0, #12]
 8002804:	2814      	cmp	r0, #20
 8002806:	d005      	beq.n	8002814 <__iar_annotation$$branch+0x6b4>
 8002808:	2014      	movs	r0, #20
 800280a:	4669      	mov	r1, sp
 800280c:	7308      	strb	r0, [r1, #12]
 800280e:	0028      	movs	r0, r5
 8002810:	f7fe f8a1 	bl	8000956 <PE_Clear_RxEvent>
 8002814:	2059      	movs	r0, #89	; 0x59
 8002816:	7468      	strb	r0, [r5, #17]
 8002818:	e07e      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 800281a:	213b      	movs	r1, #59	; 0x3b
 800281c:	e000      	b.n	8002820 <__iar_annotation$$branch+0x6c0>
 800281e:	2116      	movs	r1, #22
 8002820:	7c28      	ldrb	r0, [r5, #16]
 8002822:	f7fd fe2d 	bl	8000480 <USBPD_PE_Notification>
 8002826:	4668      	mov	r0, sp
 8002828:	7b00      	ldrb	r0, [r0, #12]
 800282a:	2814      	cmp	r0, #20
 800282c:	d108      	bne.n	8002840 <__iar_annotation$$branch+0x6e0>
 800282e:	e070      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002830:	2117      	movs	r1, #23
 8002832:	7c28      	ldrb	r0, [r5, #16]
 8002834:	f7fd fe24 	bl	8000480 <USBPD_PE_Notification>
 8002838:	4668      	mov	r0, sp
 800283a:	7b00      	ldrb	r0, [r0, #12]
 800283c:	2814      	cmp	r0, #20
 800283e:	d068      	beq.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002840:	2014      	movs	r0, #20
 8002842:	4669      	mov	r1, sp
 8002844:	7308      	strb	r0, [r1, #12]
 8002846:	0028      	movs	r0, r5
 8002848:	f7fe f885 	bl	8000956 <PE_Clear_RxEvent>
 800284c:	e061      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 800284e:	2000      	movs	r0, #0
 8002850:	9004      	str	r0, [sp, #16]
 8002852:	ab04      	add	r3, sp, #16
 8002854:	aa05      	add	r2, sp, #20
 8002856:	2100      	movs	r1, #0
 8002858:	7c28      	ldrb	r0, [r5, #16]
 800285a:	68ae      	ldr	r6, [r5, #8]
 800285c:	6976      	ldr	r6, [r6, #20]
 800285e:	47b0      	blx	r6
 8002860:	2104      	movs	r1, #4
 8002862:	9804      	ldr	r0, [sp, #16]
 8002864:	f7fe fdf2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8002868:	2800      	cmp	r0, #0
 800286a:	d001      	beq.n	8002870 <__iar_annotation$$branch+0x710>
 800286c:	2003      	movs	r0, #3
 800286e:	e4b5      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 8002870:	9002      	str	r0, [sp, #8]
 8002872:	2003      	movs	r0, #3
 8002874:	9001      	str	r0, [sp, #4]
 8002876:	9804      	ldr	r0, [sp, #16]
 8002878:	0880      	lsrs	r0, r0, #2
 800287a:	9000      	str	r0, [sp, #0]
 800287c:	ab05      	add	r3, sp, #20
 800287e:	2201      	movs	r2, #1
 8002880:	2100      	movs	r1, #0
 8002882:	0028      	movs	r0, r5
 8002884:	f7fe fe6f 	bl	8001566 <PE_Send_DataMessage>
 8002888:	e43a      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800288a:	2000      	movs	r0, #0
 800288c:	9002      	str	r0, [sp, #8]
 800288e:	2003      	movs	r0, #3
 8002890:	9001      	str	r0, [sp, #4]
 8002892:	2001      	movs	r0, #1
 8002894:	9000      	str	r0, [sp, #0]
 8002896:	002b      	movs	r3, r5
 8002898:	332c      	adds	r3, #44	; 0x2c
 800289a:	2206      	movs	r2, #6
 800289c:	2100      	movs	r1, #0
 800289e:	0028      	movs	r0, r5
 80028a0:	f7fe fe61 	bl	8001566 <PE_Send_DataMessage>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1ef      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028a8:	215d      	movs	r1, #93	; 0x5d
 80028aa:	e655      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80028ac:	9400      	str	r4, [sp, #0]
 80028ae:	2366      	movs	r3, #102	; 0x66
 80028b0:	2214      	movs	r2, #20
 80028b2:	2100      	movs	r1, #0
 80028b4:	0028      	movs	r0, r5
 80028b6:	f7fe fe2b 	bl	8001510 <PE_Send_CtrlMessage>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d1e4      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028be:	83ee      	strh	r6, [r5, #30]
 80028c0:	241b      	movs	r4, #27
 80028c2:	214a      	movs	r1, #74	; 0x4a
 80028c4:	7c28      	ldrb	r0, [r5, #16]
 80028c6:	f7fd fddb 	bl	8000480 <USBPD_PE_Notification>
 80028ca:	200b      	movs	r0, #11
 80028cc:	7728      	strb	r0, [r5, #28]
 80028ce:	e7db      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80028d0:	4668      	mov	r0, sp
 80028d2:	7b00      	ldrb	r0, [r0, #12]
 80028d4:	2811      	cmp	r0, #17
 80028d6:	d11f      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028d8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80028da:	0bc1      	lsrs	r1, r0, #15
 80028dc:	d01c      	beq.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028de:	06c0      	lsls	r0, r0, #27
 80028e0:	0ec0      	lsrs	r0, r0, #27
 80028e2:	280c      	cmp	r0, #12
 80028e4:	d118      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028e6:	2304      	movs	r3, #4
 80028e8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80028ea:	1d02      	adds	r2, r0, #4
 80028ec:	210a      	movs	r1, #10
 80028ee:	7c28      	ldrb	r0, [r5, #16]
 80028f0:	68ac      	ldr	r4, [r5, #8]
 80028f2:	69a4      	ldr	r4, [r4, #24]
 80028f4:	47a0      	blx	r4
 80028f6:	4668      	mov	r0, sp
 80028f8:	7b00      	ldrb	r0, [r0, #12]
 80028fa:	2814      	cmp	r0, #20
 80028fc:	d005      	beq.n	800290a <__iar_annotation$$branch+0x7aa>
 80028fe:	2014      	movs	r0, #20
 8002900:	4669      	mov	r1, sp
 8002902:	7308      	strb	r0, [r1, #12]
 8002904:	0028      	movs	r0, r5
 8002906:	f7fe f826 	bl	8000956 <PE_Clear_RxEvent>
 800290a:	214b      	movs	r1, #75	; 0x4b
 800290c:	7c28      	ldrb	r0, [r5, #16]
 800290e:	f7fd fdb7 	bl	8000480 <USBPD_PE_Notification>
 8002912:	2003      	movs	r0, #3
 8002914:	7468      	strb	r0, [r5, #17]
 8002916:	2400      	movs	r4, #0
 8002918:	8be8      	ldrh	r0, [r5, #30]
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	0209      	lsls	r1, r1, #8
 800291e:	4288      	cmp	r0, r1
 8002920:	d1b2      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 8002922:	e041      	b.n	80029a8 <__iar_annotation$$branch+0x848>
 8002924:	4895      	ldr	r0, [pc, #596]	; (8002b7c <.text_5>)
 8002926:	182f      	adds	r7, r5, r0
 8002928:	9400      	str	r4, [sp, #0]
 800292a:	2339      	movs	r3, #57	; 0x39
 800292c:	783a      	ldrb	r2, [r7, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	0028      	movs	r0, r5
 8002932:	f7fe fded 	bl	8001510 <PE_Send_CtrlMessage>
 8002936:	2800      	cmp	r0, #0
 8002938:	d1a6      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 800293a:	7878      	ldrb	r0, [r7, #1]
 800293c:	7728      	strb	r0, [r5, #28]
 800293e:	2144      	movs	r1, #68	; 0x44
 8002940:	7c28      	ldrb	r0, [r5, #16]
 8002942:	f7fd fd9d 	bl	8000480 <USBPD_PE_Notification>
 8002946:	e4b8      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002948:	00008384 	.word	0x00008384
 800294c:	4668      	mov	r0, sp
 800294e:	7b00      	ldrb	r0, [r0, #12]
 8002950:	2814      	cmp	r0, #20
 8002952:	d024      	beq.n	800299e <__iar_annotation$$branch+0x83e>
 8002954:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002956:	0bc0      	lsrs	r0, r0, #15
 8002958:	d00e      	beq.n	8002978 <__iar_annotation$$branch+0x818>
 800295a:	0028      	movs	r0, r5
 800295c:	f7fe fe40 	bl	80015e0 <PE_Check_ExtendedMessage>
 8002960:	4668      	mov	r0, sp
 8002962:	7b00      	ldrb	r0, [r0, #12]
 8002964:	2814      	cmp	r0, #20
 8002966:	d005      	beq.n	8002974 <__iar_annotation$$branch+0x814>
 8002968:	2014      	movs	r0, #20
 800296a:	4669      	mov	r1, sp
 800296c:	7308      	strb	r0, [r1, #12]
 800296e:	0028      	movs	r0, r5
 8002970:	f7fd fff1 	bl	8000956 <PE_Clear_RxEvent>
 8002974:	2000      	movs	r0, #0
 8002976:	83e8      	strh	r0, [r5, #30]
 8002978:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800297a:	490c      	ldr	r1, [pc, #48]	; (80029ac <__iar_annotation$$branch+0x84c>)
 800297c:	4001      	ands	r1, r0
 800297e:	2910      	cmp	r1, #16
 8002980:	d10d      	bne.n	800299e <__iar_annotation$$branch+0x83e>
 8002982:	2003      	movs	r0, #3
 8002984:	7468      	strb	r0, [r5, #17]
 8002986:	2400      	movs	r4, #0
 8002988:	4668      	mov	r0, sp
 800298a:	7b00      	ldrb	r0, [r0, #12]
 800298c:	2814      	cmp	r0, #20
 800298e:	d005      	beq.n	800299c <__iar_annotation$$branch+0x83c>
 8002990:	2014      	movs	r0, #20
 8002992:	4669      	mov	r1, sp
 8002994:	7308      	strb	r0, [r1, #12]
 8002996:	0028      	movs	r0, r5
 8002998:	f7fd ffdd 	bl	8000956 <PE_Clear_RxEvent>
 800299c:	83ec      	strh	r4, [r5, #30]
 800299e:	8be8      	ldrh	r0, [r5, #30]
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	0209      	lsls	r1, r1, #8
 80029a4:	4288      	cmp	r0, r1
 80029a6:	d11c      	bne.n	80029e2 <__iar_annotation$$branch+0x882>
 80029a8:	2003      	movs	r0, #3
 80029aa:	e458      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80029ac:	0000f01f 	.word	0x0000f01f
 80029b0:	0028      	movs	r0, r5
 80029b2:	f7fe ff37 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80029b6:	e63b      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029b8:	a903      	add	r1, sp, #12
 80029ba:	0028      	movs	r0, r5
 80029bc:	f7fe f9d4 	bl	8000d68 <PE_SubStateMachine_Generic>
 80029c0:	e636      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029c2:	a903      	add	r1, sp, #12
 80029c4:	0028      	movs	r0, r5
 80029c6:	f001 f9ef 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80029ca:	0004      	movs	r4, r0
 80029cc:	6868      	ldr	r0, [r5, #4]
 80029ce:	6800      	ldr	r0, [r0, #0]
 80029d0:	0401      	lsls	r1, r0, #16
 80029d2:	0fc9      	lsrs	r1, r1, #31
 80029d4:	d006      	beq.n	80029e4 <__iar_annotation$$branch+0x884>
 80029d6:	6828      	ldr	r0, [r5, #0]
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	4668      	mov	r0, sp
 80029dc:	7b40      	ldrb	r0, [r0, #13]
 80029de:	f002 fee1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80029e2:	e751      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029e4:	2101      	movs	r1, #1
 80029e6:	e7f8      	b.n	80029da <__iar_annotation$$branch+0x87a>
 80029e8:	4668      	mov	r0, sp
 80029ea:	7b01      	ldrb	r1, [r0, #12]
 80029ec:	0028      	movs	r0, r5
 80029ee:	f002 fc3b 	bl	8005268 <PE_StateMachine_UVDM>
 80029f2:	e749      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029f4:	2000      	movs	r0, #0
 80029f6:	9000      	str	r0, [sp, #0]
 80029f8:	2358      	movs	r3, #88	; 0x58
 80029fa:	2213      	movs	r2, #19
 80029fc:	2100      	movs	r1, #0
 80029fe:	0028      	movs	r0, r5
 8002a00:	f7fe fd86 	bl	8001510 <PE_Send_CtrlMessage>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1f4      	bne.n	80029f2 <__iar_annotation$$branch+0x892>
 8002a08:	2009      	movs	r0, #9
 8002a0a:	7728      	strb	r0, [r5, #28]
 8002a0c:	e455      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002a0e:	6968      	ldr	r0, [r5, #20]
 8002a10:	2701      	movs	r7, #1
 8002a12:	0b41      	lsrs	r1, r0, #13
 8002a14:	4039      	ands	r1, r7
 8002a16:	d019      	beq.n	8002a4c <__iar_annotation$$branch+0x8ec>
 8002a18:	0b80      	lsrs	r0, r0, #14
 8002a1a:	4038      	ands	r0, r7
 8002a1c:	d007      	beq.n	8002a2e <__iar_annotation$$branch+0x8ce>
 8002a1e:	215b      	movs	r1, #91	; 0x5b
 8002a20:	7c28      	ldrb	r0, [r5, #16]
 8002a22:	f7fd fd2d 	bl	8000480 <USBPD_PE_Notification>
 8002a26:	6968      	ldr	r0, [r5, #20]
 8002a28:	4955      	ldr	r1, [pc, #340]	; (8002b80 <.text_6>)
 8002a2a:	4001      	ands	r1, r0
 8002a2c:	6169      	str	r1, [r5, #20]
 8002a2e:	2003      	movs	r0, #3
 8002a30:	7468      	strb	r0, [r5, #17]
 8002a32:	7ca9      	ldrb	r1, [r5, #18]
 8002a34:	2903      	cmp	r1, #3
 8002a36:	d008      	beq.n	8002a4a <__iar_annotation$$branch+0x8ea>
 8002a38:	74a8      	strb	r0, [r5, #18]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	9000      	str	r0, [sp, #0]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2203      	movs	r2, #3
 8002a42:	7c29      	ldrb	r1, [r5, #16]
 8002a44:	2004      	movs	r0, #4
 8002a46:	6834      	ldr	r4, [r6, #0]
 8002a48:	47a0      	blx	r4
 8002a4a:	2401      	movs	r4, #1
 8002a4c:	6968      	ldr	r0, [r5, #20]
 8002a4e:	494d      	ldr	r1, [pc, #308]	; (8002b84 <.text_7>)
 8002a50:	4001      	ands	r1, r0
 8002a52:	6169      	str	r1, [r5, #20]
 8002a54:	2c00      	cmp	r4, #0
 8002a56:	d101      	bne.n	8002a5c <__iar_annotation$$branch>

08002a58 <__iar_annotation$$branch>:
 8002a58:	f7ff fa3e 	bl	8001ed8 <USBPD_PE_StateMachine_SNK+0xb0>

08002a5c <__iar_annotation$$branch>:
 8002a5c:	f7ff fb8e 	bl	800217c <__iar_annotation$$branch+0x1c>

08002a60 <.text_3>:
 8002a60:	00008014 	.word	0x00008014

08002a64 <PE_StateMachine_SNK_ReadyWait>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	0004      	movs	r4, r0
 8002a68:	000e      	movs	r6, r1
 8002a6a:	2702      	movs	r7, #2
 8002a6c:	7830      	ldrb	r0, [r6, #0]
 8002a6e:	2814      	cmp	r0, #20
 8002a70:	d00b      	beq.n	8002a8a <PE_StateMachine_SNK_ReadyWait+0x26>
 8002a72:	0020      	movs	r0, r4
 8002a74:	f7fe fffc 	bl	8001a70 <PE_ManageRXEvent>
 8002a78:	7830      	ldrb	r0, [r6, #0]
 8002a7a:	2814      	cmp	r0, #20
 8002a7c:	d07b      	beq.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a7e:	2014      	movs	r0, #20
 8002a80:	7030      	strb	r0, [r6, #0]
 8002a82:	0020      	movs	r0, r4
 8002a84:	f7fd ff67 	bl	8000956 <PE_Clear_RxEvent>
 8002a88:	e075      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a8a:	6961      	ldr	r1, [r4, #20]
 8002a8c:	0cc8      	lsrs	r0, r1, #19
 8002a8e:	03be      	lsls	r6, r7, #14
 8002a90:	2700      	movs	r7, #0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d021      	beq.n	8002ada <PE_StateMachine_SNK_ReadyWait+0x76>
 8002a96:	8c21      	ldrh	r1, [r4, #32]
 8002a98:	42b1      	cmp	r1, r6
 8002a9a:	d111      	bne.n	8002ac0 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002a9c:	200f      	movs	r0, #15
 8002a9e:	7460      	strb	r0, [r4, #17]
 8002aa0:	9700      	str	r7, [sp, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2270      	movs	r2, #112	; 0x70
 8002aa6:	7c21      	ldrb	r1, [r4, #16]
 8002aa8:	2009      	movs	r0, #9
 8002aaa:	4d37      	ldr	r5, [pc, #220]	; (8002b88 <.text_8>)
 8002aac:	682d      	ldr	r5, [r5, #0]
 8002aae:	47a8      	blx	r5
 8002ab0:	2098      	movs	r0, #152	; 0x98
 8002ab2:	0080      	lsls	r0, r0, #2
 8002ab4:	5c20      	ldrb	r0, [r4, r0]
 8002ab6:	1c40      	adds	r0, r0, #1
 8002ab8:	2198      	movs	r1, #152	; 0x98
 8002aba:	0089      	lsls	r1, r1, #2
 8002abc:	5460      	strb	r0, [r4, r1]
 8002abe:	e05a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ac0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002ac2:	0509      	lsls	r1, r1, #20
 8002ac4:	0f49      	lsrs	r1, r1, #29
 8002ac6:	180a      	adds	r2, r1, r0
 8002ac8:	2333      	movs	r3, #51	; 0x33
 8002aca:	435a      	muls	r2, r3
 8002acc:	4316      	orrs	r6, r2
 8002ace:	8426      	strh	r6, [r4, #32]
 8002ad0:	180f      	adds	r7, r1, r0
 8002ad2:	2033      	movs	r0, #51	; 0x33
 8002ad4:	4347      	muls	r7, r0
 8002ad6:	b2bf      	uxth	r7, r7
 8002ad8:	e04d      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ada:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002adc:	42b0      	cmp	r0, r6
 8002ade:	d104      	bne.n	8002aea <PE_StateMachine_SNK_ReadyWait+0x86>
 8002ae0:	2045      	movs	r0, #69	; 0x45
 8002ae2:	7460      	strb	r0, [r4, #17]
 8002ae4:	430e      	orrs	r6, r1
 8002ae6:	6166      	str	r6, [r4, #20]
 8002ae8:	e045      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002aea:	7c20      	ldrb	r0, [r4, #16]
 8002aec:	f7fd ff58 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d128      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002af4:	2032      	movs	r0, #50	; 0x32
 8002af6:	5c20      	ldrb	r0, [r4, r0]
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d024      	beq.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002afc:	6860      	ldr	r0, [r4, #4]
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	2103      	movs	r1, #3
 8002b02:	2203      	movs	r2, #3
 8002b04:	4002      	ands	r2, r0
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d007      	beq.n	8002b1a <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002b0a:	4001      	ands	r1, r0
 8002b0c:	2902      	cmp	r1, #2
 8002b0e:	d11a      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b10:	7c20      	ldrb	r0, [r4, #16]
 8002b12:	f002 fe3b 	bl	800578c <USBPD_PRL_IsResistor_SinkTxOK>
 8002b16:	2801      	cmp	r0, #1
 8002b18:	d115      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b1a:	2033      	movs	r0, #51	; 0x33
 8002b1c:	5c20      	ldrb	r0, [r4, r0]
 8002b1e:	2131      	movs	r1, #49	; 0x31
 8002b20:	5460      	strb	r0, [r4, r1]
 8002b22:	2032      	movs	r0, #50	; 0x32
 8002b24:	5c20      	ldrb	r0, [r4, r0]
 8002b26:	7460      	strb	r0, [r4, #17]
 8002b28:	2845      	cmp	r0, #69	; 0x45
 8002b2a:	d102      	bne.n	8002b32 <PE_StateMachine_SNK_ReadyWait+0xce>
 8002b2c:	6960      	ldr	r0, [r4, #20]
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	6166      	str	r6, [r4, #20]
 8002b32:	2132      	movs	r1, #50	; 0x32
 8002b34:	5467      	strb	r7, [r4, r1]
 8002b36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b38:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002b3a:	6960      	ldr	r0, [r4, #20]
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	01c9      	lsls	r1, r1, #7
 8002b40:	4301      	orrs	r1, r0
 8002b42:	6161      	str	r1, [r4, #20]
 8002b44:	e017      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b46:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002b48:	42b0      	cmp	r0, r6
 8002b4a:	d109      	bne.n	8002b60 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002b4c:	8467      	strh	r7, [r4, #34]	; 0x22
 8002b4e:	2098      	movs	r0, #152	; 0x98
 8002b50:	0080      	lsls	r0, r0, #2
 8002b52:	1820      	adds	r0, r4, r0
 8002b54:	7881      	ldrb	r1, [r0, #2]
 8002b56:	1c49      	adds	r1, r1, #1
 8002b58:	7081      	strb	r1, [r0, #2]
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	7460      	strb	r0, [r4, #17]
 8002b5e:	e00a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7fe fc47 	bl	80013f4 <PE_CalculateMinTiming>
 8002b66:	2132      	movs	r1, #50	; 0x32
 8002b68:	5c61      	ldrb	r1, [r4, r1]
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d002      	beq.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d300      	bcc.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b72:	2002      	movs	r0, #2
 8002b74:	0007      	movs	r7, r0
 8002b76:	0038      	movs	r0, r7
 8002b78:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002b7c <.text_5>:
 8002b7c:	0000025e 	.word	0x0000025e

08002b80 <.text_6>:
 8002b80:	ffffbfff 	.word	0xffffbfff

08002b84 <.text_7>:
 8002b84:	ffffdfff 	.word	0xffffdfff

08002b88 <.text_8>:
 8002b88:	20000000 	.word	0x20000000

08002b8c <USBPD_PE_StateMachine_SRC>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	0005      	movs	r5, r0
 8002b92:	4829      	ldr	r0, [pc, #164]	; (8002c38 <USBPD_PE_StateMachine_SRC+0xac>)
 8002b94:	00a9      	lsls	r1, r5, #2
 8002b96:	5844      	ldr	r4, [r0, r1]
 8002b98:	7c60      	ldrb	r0, [r4, #17]
 8002b9a:	2848      	cmp	r0, #72	; 0x48
 8002b9c:	d134      	bne.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f7fd ffc0 	bl	8000b24 <PE_Reset_ZI>
 8002ba4:	0020      	movs	r0, r4
 8002ba6:	f7fd fff3 	bl	8000b90 <PE_Reset_Counter>
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	7900      	ldrb	r0, [r0, #4]
 8002bae:	0783      	lsls	r3, r0, #30
 8002bb0:	0f9b      	lsrs	r3, r3, #30
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	7c20      	ldrb	r0, [r4, #16]
 8002bb8:	f002 fd83 	bl	80056c2 <USBPD_PRL_SetHeader>
 8002bbc:	6860      	ldr	r0, [r4, #4]
 8002bbe:	6801      	ldr	r1, [r0, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	6002      	str	r2, [r0, #0]
 8002bc6:	6860      	ldr	r0, [r4, #4]
 8002bc8:	6801      	ldr	r1, [r0, #0]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4391      	bics	r1, r2
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	7912      	ldrb	r2, [r2, #4]
 8002bd2:	0792      	lsls	r2, r2, #30
 8002bd4:	0f92      	lsrs	r2, r2, #30
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	6002      	str	r2, [r0, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	7c20      	ldrb	r0, [r4, #16]
 8002bde:	f002 fde1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002be2:	7c20      	ldrb	r0, [r4, #16]
 8002be4:	f003 f84a 	bl	8005c7c <USBPD_PRL_Reset>
 8002be8:	2002      	movs	r0, #2
 8002bea:	7460      	strb	r0, [r4, #17]
 8002bec:	7ca0      	ldrb	r0, [r4, #18]
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d00a      	beq.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	74a0      	strb	r0, [r4, #18]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	7c21      	ldrb	r1, [r4, #16]
 8002c00:	2004      	movs	r0, #4
 8002c02:	4eca      	ldr	r6, [pc, #808]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002c04:	6836      	ldr	r6, [r6, #0]
 8002c06:	47b0      	blx	r6
 8002c08:	6960      	ldr	r0, [r4, #20]
 8002c0a:	0341      	lsls	r1, r0, #13
 8002c0c:	0fc9      	lsrs	r1, r1, #31
 8002c0e:	d006      	beq.n	8002c1e <USBPD_PE_StateMachine_SRC+0x92>
 8002c10:	49c7      	ldr	r1, [pc, #796]	; (8002f30 <__iar_annotation$$branch+0x70>)
 8002c12:	4001      	ands	r1, r0
 8002c14:	6161      	str	r1, [r4, #20]
 8002c16:	2164      	movs	r1, #100	; 0x64
 8002c18:	7c20      	ldrb	r0, [r4, #16]
 8002c1a:	f7fd fc31 	bl	8000480 <USBPD_PE_Notification>
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f7fd fe62 	bl	80008e8 <PE_Get_RxEvent>
 8002c24:	4669      	mov	r1, sp
 8002c26:	7308      	strb	r0, [r1, #12]
 8002c28:	4668      	mov	r0, sp
 8002c2a:	7b00      	ldrb	r0, [r0, #12]
 8002c2c:	2803      	cmp	r0, #3
 8002c2e:	d105      	bne.n	8002c3c <USBPD_PE_StateMachine_SRC+0xb0>
 8002c30:	2001      	movs	r0, #1
 8002c32:	b007      	add	sp, #28
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000304 	.word	0x20000304
 8002c3c:	4668      	mov	r0, sp
 8002c3e:	7345      	strb	r5, [r0, #13]
 8002c40:	6860      	ldr	r0, [r4, #4]
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	04c1      	lsls	r1, r0, #19
 8002c46:	0fc9      	lsrs	r1, r1, #31
 8002c48:	d100      	bne.n	8002c4c <USBPD_PE_StateMachine_SRC+0xc0>
 8002c4a:	e13b      	b.n	8002ec4 <__iar_annotation$$branch+0x4>
 8002c4c:	6960      	ldr	r0, [r4, #20]
 8002c4e:	0381      	lsls	r1, r0, #14
 8002c50:	0fc9      	lsrs	r1, r1, #31
 8002c52:	d100      	bne.n	8002c56 <USBPD_PE_StateMachine_SRC+0xca>
 8002c54:	e144      	b.n	8002ee0 <__iar_annotation$$branch+0x20>
 8002c56:	4668      	mov	r0, sp
 8002c58:	7b40      	ldrb	r0, [r0, #13]
 8002c5a:	f002 fd9b 	bl	8005794 <USBPD_PRL_FastRoleSwapSignalling>
 8002c5e:	20a6      	movs	r0, #166	; 0xa6
 8002c60:	7460      	strb	r0, [r4, #17]
 8002c62:	2109      	movs	r1, #9
 8002c64:	7721      	strb	r1, [r4, #28]
 8002c66:	2100      	movs	r1, #0
 8002c68:	2232      	movs	r2, #50	; 0x32
 8002c6a:	54a1      	strb	r1, [r4, r2]
 8002c6c:	6961      	ldr	r1, [r4, #20]
 8002c6e:	4ab1      	ldr	r2, [pc, #708]	; (8002f34 <__iar_annotation$$branch+0x74>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	6162      	str	r2, [r4, #20]
 8002c74:	49b0      	ldr	r1, [pc, #704]	; (8002f38 <__iar_annotation$$branch+0x78>)
 8002c76:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002c78:	7ca1      	ldrb	r1, [r4, #18]
 8002c7a:	29a6      	cmp	r1, #166	; 0xa6
 8002c7c:	d000      	beq.n	8002c80 <USBPD_PE_StateMachine_SRC+0xf4>
 8002c7e:	e125      	b.n	8002ecc <__iar_annotation$$branch+0xc>
 8002c80:	2502      	movs	r5, #2
 8002c82:	4668      	mov	r0, sp
 8002c84:	7b00      	ldrb	r0, [r0, #12]
 8002c86:	2811      	cmp	r0, #17
 8002c88:	d11f      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c8a:	6860      	ldr	r0, [r4, #4]
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	0701      	lsls	r1, r0, #28
 8002c90:	0fc9      	lsrs	r1, r1, #31
 8002c92:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c94:	0680      	lsls	r0, r0, #26
 8002c96:	0fc2      	lsrs	r2, r0, #31
 8002c98:	4291      	cmp	r1, r2
 8002c9a:	d116      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c9c:	2014      	movs	r0, #20
 8002c9e:	4669      	mov	r1, sp
 8002ca0:	7308      	strb	r0, [r1, #12]
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	f7fd fe57 	bl	8000956 <PE_Clear_RxEvent>
 8002ca8:	2092      	movs	r0, #146	; 0x92
 8002caa:	7460      	strb	r0, [r4, #17]
 8002cac:	7ca0      	ldrb	r0, [r4, #18]
 8002cae:	2892      	cmp	r0, #146	; 0x92
 8002cb0:	d100      	bne.n	8002cb4 <USBPD_PE_StateMachine_SRC+0x128>
 8002cb2:	e155      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002cb4:	2092      	movs	r0, #146	; 0x92
 8002cb6:	74a0      	strb	r0, [r4, #18]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	9000      	str	r0, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2292      	movs	r2, #146	; 0x92
 8002cc0:	7c21      	ldrb	r1, [r4, #16]
 8002cc2:	2004      	movs	r0, #4
 8002cc4:	4e99      	ldr	r6, [pc, #612]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002cc6:	6836      	ldr	r6, [r6, #0]
 8002cc8:	47b0      	blx	r6
 8002cca:	7c60      	ldrb	r0, [r4, #17]
 8002ccc:	499b      	ldr	r1, [pc, #620]	; (8002f3c <__iar_annotation$$branch+0x7c>)
 8002cce:	1866      	adds	r6, r4, r1
 8002cd0:	4f9b      	ldr	r7, [pc, #620]	; (8002f40 <__iar_annotation$$branch+0x80>)
 8002cd2:	499c      	ldr	r1, [pc, #624]	; (8002f44 <__iar_annotation$$branch+0x84>)
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <USBPD_PE_StateMachine_SRC+0x14e>
 8002cd8:	e136      	b.n	8002f48 <__iar_annotation$$branch+0x88>
 8002cda:	1e42      	subs	r2, r0, #1
 8002cdc:	d067      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002cde:	1e52      	subs	r2, r2, #1
 8002ce0:	d100      	bne.n	8002ce4 <USBPD_PE_StateMachine_SRC+0x158>
 8002ce2:	e149      	b.n	8002f78 <__iar_annotation$$branch+0xb8>
 8002ce4:	1e52      	subs	r2, r2, #1
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	d801      	bhi.n	8002cee <__iar_annotation$$branch+0x4>

08002cea <__iar_annotation$$branch>:
 8002cea:	f000 fd90 	bl	800380e <__iar_annotation$$branch+0x94e>
 8002cee:	1e92      	subs	r2, r2, #2
 8002cf0:	d100      	bne.n	8002cf4 <__iar_annotation$$branch+0xa>
 8002cf2:	e189      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002cf4:	1e52      	subs	r2, r2, #1
 8002cf6:	d100      	bne.n	8002cfa <__iar_annotation$$branch+0x10>
 8002cf8:	e18b      	b.n	8003012 <__iar_annotation$$branch+0x152>
 8002cfa:	1e52      	subs	r2, r2, #1
 8002cfc:	d100      	bne.n	8002d00 <__iar_annotation$$branch+0x16>
 8002cfe:	e190      	b.n	8003022 <__iar_annotation$$branch+0x162>
 8002d00:	1e52      	subs	r2, r2, #1
 8002d02:	d100      	bne.n	8002d06 <__iar_annotation$$branch+0x1c>
 8002d04:	e1e1      	b.n	80030ca <__iar_annotation$$branch+0x20a>
 8002d06:	1e52      	subs	r2, r2, #1
 8002d08:	d100      	bne.n	8002d0c <__iar_annotation$$branch+0x22>
 8002d0a:	e223      	b.n	8003154 <__iar_annotation$$branch+0x294>
 8002d0c:	1ed2      	subs	r2, r2, #3
 8002d0e:	d100      	bne.n	8002d12 <__iar_annotation$$branch+0x28>
 8002d10:	e276      	b.n	8003200 <__iar_annotation$$branch+0x340>
 8002d12:	1e52      	subs	r2, r2, #1
 8002d14:	d100      	bne.n	8002d18 <__iar_annotation$$branch+0x2e>
 8002d16:	e286      	b.n	8003226 <__iar_annotation$$branch+0x366>
 8002d18:	1e52      	subs	r2, r2, #1
 8002d1a:	d100      	bne.n	8002d1e <__iar_annotation$$branch+0x34>
 8002d1c:	e11d      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002d1e:	1e52      	subs	r2, r2, #1
 8002d20:	d100      	bne.n	8002d24 <__iar_annotation$$branch+0x3a>
 8002d22:	e30d      	b.n	8003340 <__iar_annotation$$branch+0x480>
 8002d24:	1e52      	subs	r2, r2, #1
 8002d26:	d100      	bne.n	8002d2a <__iar_annotation$$branch+0x40>
 8002d28:	e2c6      	b.n	80032b8 <__iar_annotation$$branch+0x3f8>
 8002d2a:	1e52      	subs	r2, r2, #1
 8002d2c:	d100      	bne.n	8002d30 <__iar_annotation$$branch+0x46>
 8002d2e:	e2cc      	b.n	80032ca <__iar_annotation$$branch+0x40a>
 8002d30:	1e52      	subs	r2, r2, #1
 8002d32:	d100      	bne.n	8002d36 <__iar_annotation$$branch+0x4c>
 8002d34:	e2d8      	b.n	80032e8 <__iar_annotation$$branch+0x428>
 8002d36:	1e52      	subs	r2, r2, #1
 8002d38:	d100      	bne.n	8002d3c <__iar_annotation$$branch+0x52>
 8002d3a:	e389      	b.n	8003450 <__iar_annotation$$branch+0x590>
 8002d3c:	1e52      	subs	r2, r2, #1
 8002d3e:	d100      	bne.n	8002d42 <__iar_annotation$$branch+0x58>
 8002d40:	e32b      	b.n	800339a <__iar_annotation$$branch+0x4da>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	d100      	bne.n	8002d48 <__iar_annotation$$branch+0x5e>
 8002d46:	e332      	b.n	80033ae <__iar_annotation$$branch+0x4ee>
 8002d48:	1e52      	subs	r2, r2, #1
 8002d4a:	d100      	bne.n	8002d4e <__iar_annotation$$branch+0x64>
 8002d4c:	e1d5      	b.n	80030fa <__iar_annotation$$branch+0x23a>
 8002d4e:	1e52      	subs	r2, r2, #1
 8002d50:	d100      	bne.n	8002d54 <__iar_annotation$$branch+0x6a>
 8002d52:	e34c      	b.n	80033ee <__iar_annotation$$branch+0x52e>
 8002d54:	1e52      	subs	r2, r2, #1
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d929      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002d5a:	1e92      	subs	r2, r2, #2
 8002d5c:	d100      	bne.n	8002d60 <__iar_annotation$$branch+0x76>
 8002d5e:	e3a3      	b.n	80034a8 <__iar_annotation$$branch+0x5e8>
 8002d60:	1e52      	subs	r2, r2, #1
 8002d62:	d100      	bne.n	8002d66 <__iar_annotation$$branch+0x7c>
 8002d64:	e3b0      	b.n	80034c8 <__iar_annotation$$branch+0x608>
 8002d66:	1e92      	subs	r2, r2, #2
 8002d68:	d021      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002d6a:	1e52      	subs	r2, r2, #1
 8002d6c:	d101      	bne.n	8002d72 <__iar_annotation$$branch+0x4>

08002d6e <__iar_annotation$$branch>:
 8002d6e:	f000 fc88 	bl	8003682 <__iar_annotation$$branch+0x7c2>
 8002d72:	1e52      	subs	r2, r2, #1
 8002d74:	d101      	bne.n	8002d7a <__iar_annotation$$branch+0x4>

08002d76 <__iar_annotation$$branch>:
 8002d76:	f000 fc9a 	bl	80036ae <__iar_annotation$$branch+0x7ee>
 8002d7a:	1e52      	subs	r2, r2, #1
 8002d7c:	d101      	bne.n	8002d82 <__iar_annotation$$branch+0x4>

08002d7e <__iar_annotation$$branch>:
 8002d7e:	f000 fce6 	bl	800374e <__iar_annotation$$branch+0x88e>
 8002d82:	1e52      	subs	r2, r2, #1
 8002d84:	d101      	bne.n	8002d8a <__iar_annotation$$branch+0x4>

08002d86 <__iar_annotation$$branch>:
 8002d86:	f000 fd0f 	bl	80037a8 <__iar_annotation$$branch+0x8e8>
 8002d8a:	1e52      	subs	r2, r2, #1
 8002d8c:	d101      	bne.n	8002d92 <__iar_annotation$$branch+0x4>

08002d8e <__iar_annotation$$branch>:
 8002d8e:	f000 fbe5 	bl	800355c <__iar_annotation$$branch+0x69c>
 8002d92:	1e92      	subs	r2, r2, #2
 8002d94:	d101      	bne.n	8002d9a <__iar_annotation$$branch+0x4>

08002d96 <__iar_annotation$$branch>:
 8002d96:	f000 fc0a 	bl	80035ae <__iar_annotation$$branch+0x6ee>
 8002d9a:	1e52      	subs	r2, r2, #1
 8002d9c:	d101      	bne.n	8002da2 <__iar_annotation$$branch+0x4>

08002d9e <__iar_annotation$$branch>:
 8002d9e:	f000 fc2e 	bl	80035fe <__iar_annotation$$branch+0x73e>
 8002da2:	1e52      	subs	r2, r2, #1
 8002da4:	d101      	bne.n	8002daa <__iar_annotation$$branch+0x4>

08002da6 <__iar_annotation$$branch>:
 8002da6:	f000 fc49 	bl	800363c <__iar_annotation$$branch+0x77c>
 8002daa:	1e52      	subs	r2, r2, #1
 8002dac:	2a02      	cmp	r2, #2
 8002dae:	d801      	bhi.n	8002db4 <__iar_annotation$$branch+0x4>

08002db0 <__iar_annotation$$branch>:
 8002db0:	f000 fe1b 	bl	80039ea <__iar_annotation$$branch+0x106>
 8002db4:	1ed2      	subs	r2, r2, #3
 8002db6:	d101      	bne.n	8002dbc <__iar_annotation$$branch+0x4>

08002db8 <__iar_annotation$$branch>:
 8002db8:	f000 fbf4 	bl	80035a4 <__iar_annotation$$branch+0x6e4>
 8002dbc:	1e52      	subs	r2, r2, #1
 8002dbe:	d101      	bne.n	8002dc4 <__iar_annotation$$branch+0x4>

08002dc0 <__iar_annotation$$branch>:
 8002dc0:	f000 fd96 	bl	80038f0 <__iar_annotation$$branch+0xc>
 8002dc4:	1e52      	subs	r2, r2, #1
 8002dc6:	d0f2      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dc8:	1e52      	subs	r2, r2, #1
 8002dca:	d101      	bne.n	8002dd0 <__iar_annotation$$branch+0x4>

08002dcc <__iar_annotation$$branch>:
 8002dcc:	f000 fda1 	bl	8003912 <__iar_annotation$$branch+0x2e>
 8002dd0:	1e52      	subs	r2, r2, #1
 8002dd2:	d101      	bne.n	8002dd8 <__iar_annotation$$branch+0x4>

08002dd4 <__iar_annotation$$branch>:
 8002dd4:	f000 fdcf 	bl	8003976 <__iar_annotation$$branch+0x92>
 8002dd8:	1e52      	subs	r2, r2, #1
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	d9e7      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dde:	1e92      	subs	r2, r2, #2
 8002de0:	d001      	beq.n	8002de6 <__iar_annotation$$branch+0x12>
 8002de2:	1e92      	subs	r2, r2, #2
 8002de4:	2a05      	cmp	r2, #5
 8002de6:	d801      	bhi.n	8002dec <__iar_annotation$$branch+0x4>

08002de8 <__iar_annotation$$branch>:
 8002de8:	f000 fdfb 	bl	80039e2 <__iar_annotation$$branch+0xfe>
 8002dec:	1f92      	subs	r2, r2, #6
 8002dee:	d101      	bne.n	8002df4 <__iar_annotation$$branch+0x4>

08002df0 <__iar_annotation$$branch>:
 8002df0:	f000 fdd2 	bl	8003998 <__iar_annotation$$branch+0xb4>
 8002df4:	1e52      	subs	r2, r2, #1
 8002df6:	2a03      	cmp	r2, #3
 8002df8:	d9d9      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfa:	3a11      	subs	r2, #17
 8002dfc:	d0d7      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfe:	1e52      	subs	r2, r2, #1
 8002e00:	d100      	bne.n	8002e04 <__iar_annotation$$branch+0x14>
 8002e02:	e150      	b.n	80030a6 <__iar_annotation$$branch+0x1e6>
 8002e04:	3a0f      	subs	r2, #15
 8002e06:	d101      	bne.n	8002e0c <__iar_annotation$$branch+0x4>

08002e08 <__iar_annotation$$branch>:
 8002e08:	f000 fce9 	bl	80037de <__iar_annotation$$branch+0x91e>
 8002e0c:	1fd2      	subs	r2, r2, #7
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	d9cd      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e12:	1f52      	subs	r2, r2, #5
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d9ca      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e18:	3a0d      	subs	r2, #13
 8002e1a:	d0c8      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e1c:	3a12      	subs	r2, #18
 8002e1e:	d101      	bne.n	8002e24 <__iar_annotation$$branch+0x4>

08002e20 <__iar_annotation$$branch>:
 8002e20:	f000 fe18 	bl	8003a54 <__iar_annotation$$branch+0x62>
 8002e24:	3a0c      	subs	r2, #12
 8002e26:	d100      	bne.n	8002e2a <__iar_annotation$$branch+0xa>
 8002e28:	e09a      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002e2a:	1e52      	subs	r2, r2, #1
 8002e2c:	2a02      	cmp	r2, #2
 8002e2e:	d9be      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e30:	1ed2      	subs	r2, r2, #3
 8002e32:	d100      	bne.n	8002e36 <__iar_annotation$$branch+0x16>
 8002e34:	e213      	b.n	800325e <__iar_annotation$$branch+0x39e>
 8002e36:	1e52      	subs	r2, r2, #1
 8002e38:	d100      	bne.n	8002e3c <__iar_annotation$$branch+0x1c>
 8002e3a:	e229      	b.n	8003290 <__iar_annotation$$branch+0x3d0>
 8002e3c:	1e92      	subs	r2, r2, #2
 8002e3e:	d0b6      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e40:	1e52      	subs	r2, r2, #1
 8002e42:	d100      	bne.n	8002e46 <__iar_annotation$$branch+0x26>
 8002e44:	e0e0      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002e46:	1e92      	subs	r2, r2, #2
 8002e48:	2a08      	cmp	r2, #8
 8002e4a:	d801      	bhi.n	8002e50 <__iar_annotation$$branch+0x4>

08002e4c <__iar_annotation$$branch>:
 8002e4c:	f000 fdd3 	bl	80039f6 <__iar_annotation$$branch+0x4>
 8002e50:	3a0a      	subs	r2, #10
 8002e52:	d101      	bne.n	8002e58 <__iar_annotation$$branch+0x4>

08002e54 <__iar_annotation$$branch>:
 8002e54:	f000 fde2 	bl	8003a1c <__iar_annotation$$branch+0x2a>
 8002e58:	a903      	add	r1, sp, #12
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	f001 fb32 	bl	80044c4 <PE_StateMachine_VDM>
 8002e60:	0005      	movs	r5, r0
 8002e62:	7c62      	ldrb	r2, [r4, #17]
 8002e64:	4e31      	ldr	r6, [pc, #196]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002e66:	7ca0      	ldrb	r0, [r4, #18]
 8002e68:	4290      	cmp	r0, r2
 8002e6a:	d007      	beq.n	8002e7c <__iar_annotation$$branch+0x28>
 8002e6c:	74a2      	strb	r2, [r4, #18]
 8002e6e:	2000      	movs	r0, #0
 8002e70:	9000      	str	r0, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	7c21      	ldrb	r1, [r4, #16]
 8002e76:	2004      	movs	r0, #4
 8002e78:	6837      	ldr	r7, [r6, #0]
 8002e7a:	47b8      	blx	r7
 8002e7c:	4668      	mov	r0, sp
 8002e7e:	7b00      	ldrb	r0, [r0, #12]
 8002e80:	2814      	cmp	r0, #20
 8002e82:	d101      	bne.n	8002e88 <__iar_annotation$$branch+0x4>

08002e84 <__iar_annotation$$branch>:
 8002e84:	f000 fdec 	bl	8003a60 <__iar_annotation$$branch+0x6e>
 8002e88:	0020      	movs	r0, r4
 8002e8a:	f7fd fdab 	bl	80009e4 <PE_Check_AMSConflict>
 8002e8e:	2815      	cmp	r0, #21
 8002e90:	d109      	bne.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e92:	4668      	mov	r0, sp
 8002e94:	7b00      	ldrb	r0, [r0, #12]
 8002e96:	2814      	cmp	r0, #20
 8002e98:	d005      	beq.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e9a:	2014      	movs	r0, #20
 8002e9c:	4669      	mov	r1, sp
 8002e9e:	7308      	strb	r0, [r1, #12]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f7fd fd58 	bl	8000956 <PE_Clear_RxEvent>
 8002ea6:	7c62      	ldrb	r2, [r4, #17]
 8002ea8:	7ca0      	ldrb	r0, [r4, #18]
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d007      	beq.n	8002ebe <__iar_annotation$$branch+0x3a>
 8002eae:	74a2      	strb	r2, [r4, #18]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	9000      	str	r0, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	7c21      	ldrb	r1, [r4, #16]
 8002eb8:	2004      	movs	r0, #4
 8002eba:	6835      	ldr	r5, [r6, #0]
 8002ebc:	47a8      	blx	r5
 8002ebe:	2500      	movs	r5, #0

08002ec0 <__iar_annotation$$branch>:
 8002ec0:	f000 fded 	bl	8003a9e <__iar_annotation$$branch+0xac>
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	43ed      	mvns	r5, r5
 8002ec8:	0028      	movs	r0, r5
 8002eca:	e6b2      	b.n	8002c32 <USBPD_PE_StateMachine_SRC+0xa6>
 8002ecc:	74a0      	strb	r0, [r4, #18]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	9000      	str	r0, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	22a6      	movs	r2, #166	; 0xa6
 8002ed6:	7c21      	ldrb	r1, [r4, #16]
 8002ed8:	2004      	movs	r0, #4
 8002eda:	4d14      	ldr	r5, [pc, #80]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002edc:	682d      	ldr	r5, [r5, #0]
 8002ede:	47a8      	blx	r5
 8002ee0:	2502      	movs	r5, #2
 8002ee2:	2032      	movs	r0, #50	; 0x32
 8002ee4:	5c20      	ldrb	r0, [r4, r0]
 8002ee6:	280f      	cmp	r0, #15
 8002ee8:	d001      	beq.n	8002eee <__iar_annotation$$branch+0x2e>
 8002eea:	2814      	cmp	r0, #20
 8002eec:	d11c      	bne.n	8002f28 <__iar_annotation$$branch+0x68>
 8002eee:	4668      	mov	r0, sp
 8002ef0:	7b00      	ldrb	r0, [r0, #12]
 8002ef2:	2814      	cmp	r0, #20
 8002ef4:	d005      	beq.n	8002f02 <__iar_annotation$$branch+0x42>
 8002ef6:	2014      	movs	r0, #20
 8002ef8:	4669      	mov	r1, sp
 8002efa:	7308      	strb	r0, [r1, #12]
 8002efc:	0020      	movs	r0, r4
 8002efe:	f7fd fd2a 	bl	8000956 <PE_Clear_RxEvent>
 8002f02:	2032      	movs	r0, #50	; 0x32
 8002f04:	5c22      	ldrb	r2, [r4, r0]
 8002f06:	7462      	strb	r2, [r4, #17]
 8002f08:	2000      	movs	r0, #0
 8002f0a:	2332      	movs	r3, #50	; 0x32
 8002f0c:	54e0      	strb	r0, [r4, r3]
 8002f0e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002f10:	7ca0      	ldrb	r0, [r4, #18]
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d008      	beq.n	8002f28 <__iar_annotation$$branch+0x68>
 8002f16:	74a2      	strb	r2, [r4, #18]
 8002f18:	2000      	movs	r0, #0
 8002f1a:	9000      	str	r0, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	7c21      	ldrb	r1, [r4, #16]
 8002f20:	2004      	movs	r0, #4
 8002f22:	4e02      	ldr	r6, [pc, #8]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002f24:	6836      	ldr	r6, [r6, #0]
 8002f26:	47b0      	blx	r6
 8002f28:	e6ab      	b.n	8002c82 <USBPD_PE_StateMachine_SRC+0xf6>
 8002f2a:	bf00      	nop
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	fffbffff 	.word	0xfffbffff
 8002f34:	fffdffff 	.word	0xfffdffff
 8002f38:	00008011 	.word	0x00008011
 8002f3c:	0000025e 	.word	0x0000025e
 8002f40:	0000801b 	.word	0x0000801b
 8002f44:	0000f01f 	.word	0x0000f01f
 8002f48:	6860      	ldr	r0, [r4, #4]
 8002f4a:	6801      	ldr	r1, [r0, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4391      	bics	r1, r2
 8002f50:	6001      	str	r1, [r0, #0]
 8002f52:	215f      	movs	r1, #95	; 0x5f
 8002f54:	7c20      	ldrb	r0, [r4, #16]
 8002f56:	f7fd fa93 	bl	8000480 <USBPD_PE_Notification>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	43ed      	mvns	r5, r5
 8002f5e:	e780      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002f60:	6860      	ldr	r0, [r4, #4]
 8002f62:	6801      	ldr	r1, [r0, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	4391      	bics	r1, r2
 8002f68:	6001      	str	r1, [r0, #0]
 8002f6a:	68a0      	ldr	r0, [r4, #8]
 8002f6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d0f3      	beq.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f72:	7c20      	ldrb	r0, [r4, #16]
 8002f74:	4788      	blx	r1
 8002f76:	e7f0      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f78:	2701      	movs	r7, #1
 8002f7a:	6860      	ldr	r0, [r4, #4]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	0bc0      	lsrs	r0, r0, #15
 8002f80:	4038      	ands	r0, r7
 8002f82:	d002      	beq.n	8002f8a <__iar_annotation$$branch+0xca>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	6801      	ldr	r1, [r0, #0]
 8002f88:	e000      	b.n	8002f8c <__iar_annotation$$branch+0xcc>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4668      	mov	r0, sp
 8002f8e:	7b40      	ldrb	r0, [r0, #13]
 8002f90:	f002 fc08 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002f94:	6860      	ldr	r0, [r4, #4]
 8002f96:	6801      	ldr	r1, [r0, #0]
 8002f98:	0b0a      	lsrs	r2, r1, #12
 8002f9a:	403a      	ands	r2, r7
 8002f9c:	d02f      	beq.n	8002ffe <__iar_annotation$$branch+0x13e>
 8002f9e:	078a      	lsls	r2, r1, #30
 8002fa0:	0f92      	lsrs	r2, r2, #30
 8002fa2:	2a01      	cmp	r2, #1
 8002fa4:	d101      	bne.n	8002faa <__iar_annotation$$branch+0xea>
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	e000      	b.n	8002fac <__iar_annotation$$branch+0xec>
 8002faa:	2220      	movs	r2, #32
 8002fac:	2320      	movs	r3, #32
 8002fae:	4399      	bics	r1, r3
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	6002      	str	r2, [r0, #0]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	70f0      	strb	r0, [r6, #3]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f7fe f9f3 	bl	80013a6 <PE_SetPowerNegotiation>
 8002fc0:	6860      	ldr	r0, [r4, #4]
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	0901      	lsrs	r1, r0, #4
 8002fc6:	4039      	ands	r1, r7
 8002fc8:	d005      	beq.n	8002fd6 <__iar_annotation$$branch+0x116>
 8002fca:	48ae      	ldr	r0, [pc, #696]	; (8003284 <__iar_annotation$$branch+0x3c4>)
 8002fcc:	83e0      	strh	r0, [r4, #30]
 8002fce:	2514      	movs	r5, #20
 8002fd0:	2006      	movs	r0, #6
 8002fd2:	7460      	strb	r0, [r4, #17]
 8002fd4:	e745      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002fd6:	0bc0      	lsrs	r0, r0, #15
 8002fd8:	4007      	ands	r7, r0
 8002fda:	d00a      	beq.n	8002ff2 <__iar_annotation$$branch+0x132>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	7800      	ldrb	r0, [r0, #0]
 8002fe0:	0780      	lsls	r0, r0, #30
 8002fe2:	d400      	bmi.n	8002fe6 <__iar_annotation$$branch+0x126>
 8002fe4:	e087      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fe6:	7930      	ldrb	r0, [r6, #4]
 8002fe8:	2814      	cmp	r0, #20
 8002fea:	d300      	bcc.n	8002fee <__iar_annotation$$branch+0x12e>
 8002fec:	e083      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fee:	68e1      	ldr	r1, [r4, #12]
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d100      	bne.n	8002ff6 <__iar_annotation$$branch+0x136>
 8002ff4:	e07f      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002ff6:	1c40      	adds	r0, r0, #1
 8002ff8:	7130      	strb	r0, [r6, #4]
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	e7e9      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8002ffe:	2121      	movs	r1, #33	; 0x21
 8003000:	7c20      	ldrb	r0, [r4, #16]
 8003002:	f7fd fa3d 	bl	8000480 <USBPD_PE_Notification>
 8003006:	e04c      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003008:	a903      	add	r1, sp, #12
 800300a:	0020      	movs	r0, r4
 800300c:	f000 fd8c 	bl	8003b28 <PE_StateMachine_VDMCable>
 8003010:	e726      	b.n	8002e60 <__iar_annotation$$branch+0xc>
 8003012:	8be0      	ldrh	r0, [r4, #30]
 8003014:	03a9      	lsls	r1, r5, #14
 8003016:	4288      	cmp	r0, r1
 8003018:	d102      	bne.n	8003020 <__iar_annotation$$branch+0x160>
 800301a:	2007      	movs	r0, #7
 800301c:	7460      	strb	r0, [r4, #17]
 800301e:	2500      	movs	r5, #0
 8003020:	e71f      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003022:	6960      	ldr	r0, [r4, #20]
 8003024:	0740      	lsls	r0, r0, #29
 8003026:	0fc1      	lsrs	r1, r0, #31
 8003028:	0020      	movs	r0, r4
 800302a:	f000 fd45 	bl	8003ab8 <PE_Send_SRCCapabilities>
 800302e:	2805      	cmp	r0, #5
 8003030:	d002      	beq.n	8003038 <__iar_annotation$$branch+0x178>
 8003032:	2809      	cmp	r0, #9
 8003034:	d0f4      	beq.n	8003020 <__iar_annotation$$branch+0x160>
 8003036:	e011      	b.n	800305c <__iar_annotation$$branch+0x19c>
 8003038:	2001      	movs	r0, #1
 800303a:	7720      	strb	r0, [r4, #28]
 800303c:	6960      	ldr	r0, [r4, #20]
 800303e:	2104      	movs	r1, #4
 8003040:	4301      	orrs	r1, r0
 8003042:	6161      	str	r1, [r4, #20]
 8003044:	2000      	movs	r0, #0
 8003046:	70f0      	strb	r0, [r6, #3]
 8003048:	70b0      	strb	r0, [r6, #2]
 800304a:	83e7      	strh	r7, [r4, #30]
 800304c:	251b      	movs	r5, #27
 800304e:	2016      	movs	r0, #22
 8003050:	7460      	strb	r0, [r4, #17]
 8003052:	210f      	movs	r1, #15
 8003054:	7c20      	ldrb	r0, [r4, #16]
 8003056:	f7fd fa13 	bl	8000480 <USBPD_PE_Notification>
 800305a:	e702      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800305c:	6960      	ldr	r0, [r4, #20]
 800305e:	0741      	lsls	r1, r0, #29
 8003060:	0fc9      	lsrs	r1, r1, #31
 8003062:	d10f      	bne.n	8003084 <__iar_annotation$$branch+0x1c4>
 8003064:	78f0      	ldrb	r0, [r6, #3]
 8003066:	2833      	cmp	r0, #51	; 0x33
 8003068:	d217      	bcs.n	800309a <__iar_annotation$$branch+0x1da>
 800306a:	4887      	ldr	r0, [pc, #540]	; (8003288 <__iar_annotation$$branch+0x3c8>)
 800306c:	83e0      	strh	r0, [r4, #30]
 800306e:	2596      	movs	r5, #150	; 0x96
 8003070:	2008      	movs	r0, #8
 8003072:	7460      	strb	r0, [r4, #17]
 8003074:	4885      	ldr	r0, [pc, #532]	; (800328c <__iar_annotation$$branch+0x3cc>)
 8003076:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003078:	4201      	tst	r1, r0
 800307a:	d002      	beq.n	8003082 <__iar_annotation$$branch+0x1c2>
 800307c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800307e:	0005      	movs	r5, r0
 8003080:	400d      	ands	r5, r1
 8003082:	e6ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003084:	6860      	ldr	r0, [r4, #4]
 8003086:	7800      	ldrb	r0, [r0, #0]
 8003088:	0780      	lsls	r0, r0, #30
 800308a:	0f80      	lsrs	r0, r0, #30
 800308c:	2802      	cmp	r0, #2
 800308e:	d102      	bne.n	8003096 <__iar_annotation$$branch+0x1d6>
 8003090:	7c20      	ldrb	r0, [r4, #16]
 8003092:	f002 fb68 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003096:	2011      	movs	r0, #17
 8003098:	e7c0      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800309a:	2121      	movs	r1, #33	; 0x21
 800309c:	7c20      	ldrb	r0, [r4, #16]
 800309e:	f7fd f9ef 	bl	8000480 <USBPD_PE_Notification>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e795      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030a6:	2100      	movs	r1, #0
 80030a8:	0020      	movs	r0, r4
 80030aa:	f000 fd05 	bl	8003ab8 <PE_Send_SRCCapabilities>
 80030ae:	2805      	cmp	r0, #5
 80030b0:	d107      	bne.n	80030c2 <__iar_annotation$$branch+0x202>
 80030b2:	2104      	movs	r1, #4
 80030b4:	0020      	movs	r0, r4
 80030b6:	f7fe f976 	bl	80013a6 <PE_SetPowerNegotiation>
 80030ba:	2001      	movs	r0, #1
 80030bc:	7720      	strb	r0, [r4, #28]
 80030be:	83e7      	strh	r7, [r4, #30]
 80030c0:	e7c5      	b.n	800304e <__iar_annotation$$branch+0x18e>
 80030c2:	2000      	movs	r0, #0
 80030c4:	7720      	strb	r0, [r4, #28]
 80030c6:	2011      	movs	r0, #17
 80030c8:	e783      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030ca:	03a8      	lsls	r0, r5, #14
 80030cc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80030ce:	4281      	cmp	r1, r0
 80030d0:	d106      	bne.n	80030e0 <__iar_annotation$$branch+0x220>
 80030d2:	2100      	movs	r1, #0
 80030d4:	8461      	strh	r1, [r4, #34]	; 0x22
 80030d6:	7931      	ldrb	r1, [r6, #4]
 80030d8:	1c49      	adds	r1, r1, #1
 80030da:	7131      	strb	r1, [r6, #4]
 80030dc:	2105      	movs	r1, #5
 80030de:	7461      	strb	r1, [r4, #17]
 80030e0:	8be1      	ldrh	r1, [r4, #30]
 80030e2:	4281      	cmp	r1, r0
 80030e4:	d1cd      	bne.n	8003082 <__iar_annotation$$branch+0x1c2>
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	6840      	ldr	r0, [r0, #4]
 80030ea:	0601      	lsls	r1, r0, #24
 80030ec:	0fc9      	lsrs	r1, r1, #31
 80030ee:	d002      	beq.n	80030f6 <__iar_annotation$$branch+0x236>
 80030f0:	78f0      	ldrb	r0, [r6, #3]
 80030f2:	1c40      	adds	r0, r0, #1
 80030f4:	70f0      	strb	r0, [r6, #3]
 80030f6:	2007      	movs	r0, #7
 80030f8:	e76b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2811      	cmp	r0, #17
 8003100:	d109      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003102:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003104:	0bc1      	lsrs	r1, r0, #15
 8003106:	d106      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003108:	0b01      	lsrs	r1, r0, #12
 800310a:	0749      	lsls	r1, r1, #29
 800310c:	d100      	bne.n	8003110 <__iar_annotation$$branch+0x250>
 800310e:	e111      	b.n	8003334 <__iar_annotation$$branch+0x474>
 8003110:	06c0      	lsls	r0, r0, #27
 8003112:	0ec0      	lsrs	r0, r0, #27
 8003114:	2802      	cmp	r0, #2
 8003116:	d000      	beq.n	800311a <__iar_annotation$$branch+0x25a>
 8003118:	e10c      	b.n	8003334 <__iar_annotation$$branch+0x474>
 800311a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800311c:	7881      	ldrb	r1, [r0, #2]
 800311e:	78c2      	ldrb	r2, [r0, #3]
 8003120:	0212      	lsls	r2, r2, #8
 8003122:	1889      	adds	r1, r1, r2
 8003124:	7902      	ldrb	r2, [r0, #4]
 8003126:	0412      	lsls	r2, r2, #16
 8003128:	1889      	adds	r1, r1, r2
 800312a:	7940      	ldrb	r0, [r0, #5]
 800312c:	0600      	lsls	r0, r0, #24
 800312e:	1808      	adds	r0, r1, r0
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003134:	0600      	lsls	r0, r0, #24
 8003136:	0f81      	lsrs	r1, r0, #30
 8003138:	7c20      	ldrb	r0, [r4, #16]
 800313a:	f7fd fd5b 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 800313e:	2304      	movs	r3, #4
 8003140:	466a      	mov	r2, sp
 8003142:	2106      	movs	r1, #6
 8003144:	7c20      	ldrb	r0, [r4, #16]
 8003146:	68a5      	ldr	r5, [r4, #8]
 8003148:	69ad      	ldr	r5, [r5, #24]
 800314a:	47a8      	blx	r5
 800314c:	2009      	movs	r0, #9
 800314e:	7460      	strb	r0, [r4, #17]
 8003150:	2500      	movs	r5, #0
 8003152:	e0e5      	b.n	8003320 <__iar_annotation$$branch+0x460>
 8003154:	2702      	movs	r7, #2
 8003156:	2507      	movs	r5, #7
 8003158:	a901      	add	r1, sp, #4
 800315a:	7c20      	ldrb	r0, [r4, #16]
 800315c:	68a2      	ldr	r2, [r4, #8]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	4790      	blx	r2
 8003162:	280a      	cmp	r0, #10
 8003164:	d010      	beq.n	8003188 <__iar_annotation$$branch+0x2c8>
 8003166:	280b      	cmp	r0, #11
 8003168:	d035      	beq.n	80031d6 <__iar_annotation$$branch+0x316>
 800316a:	280d      	cmp	r0, #13
 800316c:	6860      	ldr	r0, [r4, #4]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	d136      	bne.n	80031e0 <__iar_annotation$$branch+0x320>
 8003172:	0a00      	lsrs	r0, r0, #8
 8003174:	4005      	ands	r5, r0
 8003176:	2d03      	cmp	r5, #3
 8003178:	d101      	bne.n	800317e <__iar_annotation$$branch+0x2be>
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <__iar_annotation$$branch+0x2c0>
 800317e:	230e      	movs	r3, #14
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	220c      	movs	r2, #12
 8003186:	e035      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 8003188:	48a9      	ldr	r0, [pc, #676]	; (8003430 <__iar_annotation$$branch+0x570>)
 800318a:	83e0      	strh	r0, [r4, #30]
 800318c:	271e      	movs	r7, #30
 800318e:	6860      	ldr	r0, [r4, #4]
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	0a00      	lsrs	r0, r0, #8
 8003194:	4005      	ands	r5, r0
 8003196:	2d01      	cmp	r5, #1
 8003198:	d00b      	beq.n	80031b2 <__iar_annotation$$branch+0x2f2>
 800319a:	9801      	ldr	r0, [sp, #4]
 800319c:	2803      	cmp	r0, #3
 800319e:	d108      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031a0:	6960      	ldr	r0, [r4, #20]
 80031a2:	06c0      	lsls	r0, r0, #27
 80031a4:	0f80      	lsrs	r0, r0, #30
 80031a6:	2803      	cmp	r0, #3
 80031a8:	d103      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031aa:	2080      	movs	r0, #128	; 0x80
 80031ac:	0200      	lsls	r0, r0, #8
 80031ae:	83e0      	strh	r0, [r4, #30]
 80031b0:	2700      	movs	r7, #0
 80031b2:	2000      	movs	r0, #0
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	230c      	movs	r3, #12
 80031b8:	2203      	movs	r2, #3
 80031ba:	2100      	movs	r1, #0
 80031bc:	0020      	movs	r0, r4
 80031be:	f7fe f9a7 	bl	8001510 <PE_Send_CtrlMessage>
 80031c2:	6960      	ldr	r0, [r4, #20]
 80031c4:	2118      	movs	r1, #24
 80031c6:	4388      	bics	r0, r1
 80031c8:	9901      	ldr	r1, [sp, #4]
 80031ca:	00c9      	lsls	r1, r1, #3
 80031cc:	2218      	movs	r2, #24
 80031ce:	400a      	ands	r2, r1
 80031d0:	4302      	orrs	r2, r0
 80031d2:	6162      	str	r2, [r4, #20]
 80031d4:	e012      	b.n	80031fc <__iar_annotation$$branch+0x33c>
 80031d6:	2000      	movs	r0, #0
 80031d8:	9000      	str	r0, [sp, #0]
 80031da:	230c      	movs	r3, #12
 80031dc:	2202      	movs	r2, #2
 80031de:	e009      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 80031e0:	0a00      	lsrs	r0, r0, #8
 80031e2:	4005      	ands	r5, r0
 80031e4:	2d03      	cmp	r5, #3
 80031e6:	d101      	bne.n	80031ec <__iar_annotation$$branch+0x32c>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e000      	b.n	80031ee <__iar_annotation$$branch+0x32e>
 80031ec:	230e      	movs	r3, #14
 80031ee:	2000      	movs	r0, #0
 80031f0:	9000      	str	r0, [sp, #0]
 80031f2:	2204      	movs	r2, #4
 80031f4:	2100      	movs	r1, #0
 80031f6:	0020      	movs	r0, r4
 80031f8:	f7fe f98a 	bl	8001510 <PE_Send_CtrlMessage>
 80031fc:	003d      	movs	r5, r7
 80031fe:	e630      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003200:	8be0      	ldrh	r0, [r4, #30]
 8003202:	03a9      	lsls	r1, r5, #14
 8003204:	4288      	cmp	r0, r1
 8003206:	d1fa      	bne.n	80031fe <__iar_annotation$$branch+0x33e>
 8003208:	2104      	movs	r1, #4
 800320a:	0020      	movs	r0, r4
 800320c:	f7fe f8cb 	bl	80013a6 <PE_SetPowerNegotiation>
 8003210:	68a0      	ldr	r0, [r4, #8]
 8003212:	6801      	ldr	r1, [r0, #0]
 8003214:	2900      	cmp	r1, #0
 8003216:	d0f2      	beq.n	80031fe <__iar_annotation$$branch+0x33e>
 8003218:	7c20      	ldrb	r0, [r4, #16]
 800321a:	4788      	blx	r1
 800321c:	2800      	cmp	r0, #0
 800321e:	d000      	beq.n	8003222 <__iar_annotation$$branch+0x362>
 8003220:	e2db      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003222:	200d      	movs	r0, #13
 8003224:	e6d5      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8003226:	2000      	movs	r0, #0
 8003228:	9000      	str	r0, [sp, #0]
 800322a:	2303      	movs	r3, #3
 800322c:	2206      	movs	r2, #6
 800322e:	2100      	movs	r1, #0
 8003230:	0020      	movs	r0, r4
 8003232:	f7fe f96d 	bl	8001510 <PE_Send_CtrlMessage>
 8003236:	2800      	cmp	r0, #0
 8003238:	d110      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 800323a:	2103      	movs	r1, #3
 800323c:	0020      	movs	r0, r4
 800323e:	f7fe f8b2 	bl	80013a6 <PE_SetPowerNegotiation>
 8003242:	2110      	movs	r1, #16
 8003244:	7c20      	ldrb	r0, [r4, #16]
 8003246:	f7fd f91b 	bl	8000480 <USBPD_PE_Notification>
 800324a:	2000      	movs	r0, #0
 800324c:	84a0      	strh	r0, [r4, #36]	; 0x24
 800324e:	6960      	ldr	r0, [r4, #20]
 8003250:	06c0      	lsls	r0, r0, #27
 8003252:	0f80      	lsrs	r0, r0, #30
 8003254:	2803      	cmp	r0, #3
 8003256:	d101      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003258:	4876      	ldr	r0, [pc, #472]	; (8003434 <__iar_annotation$$branch+0x574>)
 800325a:	84a0      	strh	r0, [r4, #36]	; 0x24
 800325c:	e601      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800325e:	2001      	movs	r0, #1
 8003260:	9000      	str	r0, [sp, #0]
 8003262:	2397      	movs	r3, #151	; 0x97
 8003264:	2202      	movs	r2, #2
 8003266:	2100      	movs	r1, #0
 8003268:	0020      	movs	r0, r4
 800326a:	f7fe f951 	bl	8001510 <PE_Send_CtrlMessage>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1f4      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003272:	7725      	strb	r5, [r4, #28]
 8003274:	2129      	movs	r1, #41	; 0x29
 8003276:	7c20      	ldrb	r0, [r4, #16]
 8003278:	f7fd f902 	bl	8000480 <USBPD_PE_Notification>
 800327c:	486e      	ldr	r0, [pc, #440]	; (8003438 <__iar_annotation$$branch+0x578>)
 800327e:	83e0      	strh	r0, [r4, #30]
 8003280:	4d6e      	ldr	r5, [pc, #440]	; (800343c <__iar_annotation$$branch+0x57c>)
 8003282:	e5ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003284:	00008014 	.word	0x00008014
 8003288:	00008096 	.word	0x00008096
 800328c:	00007fff 	.word	0x00007fff
 8003290:	8be0      	ldrh	r0, [r4, #30]
 8003292:	03a9      	lsls	r1, r5, #14
 8003294:	4288      	cmp	r0, r1
 8003296:	d1f4      	bne.n	8003282 <__iar_annotation$$branch+0x3c2>
 8003298:	212a      	movs	r1, #42	; 0x2a
 800329a:	7c20      	ldrb	r0, [r4, #16]
 800329c:	f7fd f8f0 	bl	8000480 <USBPD_PE_Notification>
 80032a0:	2000      	movs	r0, #0
 80032a2:	9000      	str	r0, [sp, #0]
 80032a4:	2303      	movs	r3, #3
 80032a6:	2206      	movs	r2, #6
 80032a8:	2100      	movs	r1, #0
 80032aa:	0020      	movs	r0, r4
 80032ac:	f7fe f930 	bl	8001510 <PE_Send_CtrlMessage>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d109      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032b4:	212e      	movs	r1, #46	; 0x2e
 80032b6:	e6cd      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032b8:	2000      	movs	r0, #0
 80032ba:	9000      	str	r0, [sp, #0]
 80032bc:	2307      	movs	r3, #7
 80032be:	2203      	movs	r2, #3
 80032c0:	2100      	movs	r1, #0
 80032c2:	0020      	movs	r0, r4
 80032c4:	f7fe f924 	bl	8001510 <PE_Send_CtrlMessage>
 80032c8:	e5cb      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80032ca:	2000      	movs	r0, #0
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	2312      	movs	r3, #18
 80032d0:	220d      	movs	r2, #13
 80032d2:	2031      	movs	r0, #49	; 0x31
 80032d4:	5c21      	ldrb	r1, [r4, r0]
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7fe f91a 	bl	8001510 <PE_Send_CtrlMessage>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d1f3      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032e0:	83e7      	strh	r7, [r4, #30]
 80032e2:	251b      	movs	r5, #27
 80032e4:	2130      	movs	r1, #48	; 0x30
 80032e6:	e6b5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032e8:	4668      	mov	r0, sp
 80032ea:	7b00      	ldrb	r0, [r0, #12]
 80032ec:	2814      	cmp	r0, #20
 80032ee:	d021      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 80032f0:	2030      	movs	r0, #48	; 0x30
 80032f2:	5c20      	ldrb	r0, [r4, r0]
 80032f4:	2231      	movs	r2, #49	; 0x31
 80032f6:	5ca2      	ldrb	r2, [r4, r2]
 80032f8:	4290      	cmp	r0, r2
 80032fa:	d11b      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 80032fc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80032fe:	4001      	ands	r1, r0
 8003300:	2903      	cmp	r1, #3
 8003302:	d117      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 8003304:	2131      	movs	r1, #49	; 0x31
 8003306:	7c20      	ldrb	r0, [r4, #16]
 8003308:	f7fd f8ba 	bl	8000480 <USBPD_PE_Notification>
 800330c:	2030      	movs	r0, #48	; 0x30
 800330e:	5c20      	ldrb	r0, [r4, r0]
 8003310:	2800      	cmp	r0, #0
 8003312:	d102      	bne.n	800331a <__iar_annotation$$branch+0x45a>
 8003314:	2007      	movs	r0, #7
 8003316:	7460      	strb	r0, [r4, #17]
 8003318:	e002      	b.n	8003320 <__iar_annotation$$branch+0x460>
 800331a:	2003      	movs	r0, #3
 800331c:	7460      	strb	r0, [r4, #17]
 800331e:	2500      	movs	r5, #0
 8003320:	4668      	mov	r0, sp
 8003322:	7b00      	ldrb	r0, [r0, #12]
 8003324:	2814      	cmp	r0, #20
 8003326:	d005      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 8003328:	2014      	movs	r0, #20
 800332a:	4669      	mov	r1, sp
 800332c:	7308      	strb	r0, [r1, #12]
 800332e:	0020      	movs	r0, r4
 8003330:	f7fd fb11 	bl	8000956 <PE_Clear_RxEvent>
 8003334:	8be0      	ldrh	r0, [r4, #30]
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	0209      	lsls	r1, r1, #8
 800333a:	4288      	cmp	r0, r1
 800333c:	d1c4      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 800333e:	e24c      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003340:	6860      	ldr	r0, [r4, #4]
 8003342:	7800      	ldrb	r0, [r0, #0]
 8003344:	0780      	lsls	r0, r0, #30
 8003346:	0f80      	lsrs	r0, r0, #30
 8003348:	2802      	cmp	r0, #2
 800334a:	d102      	bne.n	8003352 <__iar_annotation$$branch+0x492>
 800334c:	7c20      	ldrb	r0, [r4, #16]
 800334e:	f002 fa0a 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003352:	2105      	movs	r1, #5
 8003354:	0020      	movs	r0, r4
 8003356:	f7fd fa99 	bl	800088c <PE_Send_RESET>
 800335a:	6860      	ldr	r0, [r4, #4]
 800335c:	6801      	ldr	r1, [r0, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	4391      	bics	r1, r2
 8003362:	6001      	str	r1, [r0, #0]
 8003364:	78b0      	ldrb	r0, [r6, #2]
 8003366:	1c40      	adds	r0, r0, #1
 8003368:	70b0      	strb	r0, [r6, #2]
 800336a:	6961      	ldr	r1, [r4, #20]
 800336c:	4834      	ldr	r0, [pc, #208]	; (8003440 <__iar_annotation$$branch+0x580>)
 800336e:	4008      	ands	r0, r1
 8003370:	6160      	str	r0, [r4, #20]
 8003372:	2100      	movs	r1, #0
 8003374:	2232      	movs	r2, #50	; 0x32
 8003376:	54a1      	strb	r1, [r4, r2]
 8003378:	4932      	ldr	r1, [pc, #200]	; (8003444 <__iar_annotation$$branch+0x584>)
 800337a:	4001      	ands	r1, r0
 800337c:	6161      	str	r1, [r4, #20]
 800337e:	2202      	movs	r2, #2
 8003380:	2101      	movs	r1, #1
 8003382:	0020      	movs	r0, r4
 8003384:	f7fe f806 	bl	8001394 <PE_CallHardResetCallback>
 8003388:	2169      	movs	r1, #105	; 0x69
 800338a:	4668      	mov	r0, sp
 800338c:	7b40      	ldrb	r0, [r0, #13]
 800338e:	f7fd f877 	bl	8000480 <USBPD_PE_Notification>
 8003392:	83e7      	strh	r7, [r4, #30]
 8003394:	251b      	movs	r5, #27
 8003396:	2015      	movs	r0, #21
 8003398:	e61b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 800339a:	6860      	ldr	r0, [r4, #4]
 800339c:	7800      	ldrb	r0, [r0, #0]
 800339e:	0780      	lsls	r0, r0, #30
 80033a0:	0f80      	lsrs	r0, r0, #30
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d1f0      	bne.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033a6:	7c20      	ldrb	r0, [r4, #16]
 80033a8:	f002 f9dd 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 80033ac:	e7ec      	b.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033ae:	8be0      	ldrh	r0, [r4, #30]
 80033b0:	03a9      	lsls	r1, r5, #14
 80033b2:	4288      	cmp	r0, r1
 80033b4:	d11a      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 80033b6:	6960      	ldr	r0, [r4, #20]
 80033b8:	78b1      	ldrb	r1, [r6, #2]
 80033ba:	2903      	cmp	r1, #3
 80033bc:	d303      	bcc.n	80033c6 <__iar_annotation$$branch+0x506>
 80033be:	0741      	lsls	r1, r0, #29
 80033c0:	0fc9      	lsrs	r1, r1, #31
 80033c2:	d130      	bne.n	8003426 <__iar_annotation$$branch+0x566>
 80033c4:	e66d      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 80033c6:	4920      	ldr	r1, [pc, #128]	; (8003448 <__iar_annotation$$branch+0x588>)
 80033c8:	83e1      	strh	r1, [r4, #30]
 80033ca:	2117      	movs	r1, #23
 80033cc:	7461      	strb	r1, [r4, #17]
 80033ce:	2500      	movs	r5, #0
 80033d0:	0540      	lsls	r0, r0, #21
 80033d2:	0f80      	lsrs	r0, r0, #30
 80033d4:	1e42      	subs	r2, r0, #1
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	0fd2      	lsrs	r2, r2, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	0020      	movs	r0, r4
 80033de:	f7fd ffd9 	bl	8001394 <PE_CallHardResetCallback>
 80033e2:	2203      	movs	r2, #3
 80033e4:	2101      	movs	r1, #1
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7fd ffd4 	bl	8001394 <PE_CallHardResetCallback>
 80033ec:	e539      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80033ee:	2100      	movs	r1, #0
 80033f0:	4668      	mov	r0, sp
 80033f2:	7b40      	ldrb	r0, [r0, #13]
 80033f4:	68a2      	ldr	r2, [r4, #8]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033f8:	4790      	blx	r2
 80033fa:	2801      	cmp	r0, #1
 80033fc:	d105      	bne.n	800340a <__iar_annotation$$branch+0x54a>
 80033fe:	4813      	ldr	r0, [pc, #76]	; (800344c <__iar_annotation$$branch+0x58c>)
 8003400:	83e0      	strh	r0, [r4, #30]
 8003402:	25c8      	movs	r5, #200	; 0xc8
 8003404:	00ad      	lsls	r5, r5, #2
 8003406:	2013      	movs	r0, #19
 8003408:	7460      	strb	r0, [r4, #17]
 800340a:	8be0      	ldrh	r0, [r4, #30]
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	0209      	lsls	r1, r1, #8
 8003410:	4288      	cmp	r0, r1
 8003412:	d1eb      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 8003414:	2206      	movs	r2, #6
 8003416:	2101      	movs	r1, #1
 8003418:	0020      	movs	r0, r4
 800341a:	f7fd ffbb 	bl	8001394 <PE_CallHardResetCallback>
 800341e:	6960      	ldr	r0, [r4, #20]
 8003420:	0741      	lsls	r1, r0, #29
 8003422:	0fc9      	lsrs	r1, r1, #31
 8003424:	d003      	beq.n	800342e <__iar_annotation$$branch+0x56e>
 8003426:	68a0      	ldr	r0, [r4, #8]
 8003428:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800342a:	2800      	cmp	r0, #0
 800342c:	d137      	bne.n	800349e <__iar_annotation$$branch+0x5de>
 800342e:	e638      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003430:	0000801e 	.word	0x0000801e
 8003434:	0000b6b0 	.word	0x0000b6b0
 8003438:	00008226 	.word	0x00008226
 800343c:	00000226 	.word	0x00000226
 8003440:	fffff9ff 	.word	0xfffff9ff
 8003444:	fffffe3f 	.word	0xfffffe3f
 8003448:	0000828a 	.word	0x0000828a
 800344c:	00008320 	.word	0x00008320
 8003450:	8be0      	ldrh	r0, [r4, #30]
 8003452:	03a9      	lsls	r1, r5, #14
 8003454:	4288      	cmp	r0, r1
 8003456:	d126      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 8003458:	2204      	movs	r2, #4
 800345a:	2101      	movs	r1, #1
 800345c:	0020      	movs	r0, r4
 800345e:	f7fd ff99 	bl	8001394 <PE_CallHardResetCallback>
 8003462:	2101      	movs	r1, #1
 8003464:	4668      	mov	r0, sp
 8003466:	7b40      	ldrb	r0, [r0, #13]
 8003468:	68a2      	ldr	r2, [r4, #8]
 800346a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800346c:	4790      	blx	r2
 800346e:	2801      	cmp	r0, #1
 8003470:	d10d      	bne.n	800348e <__iar_annotation$$branch+0x5ce>
 8003472:	0020      	movs	r0, r4
 8003474:	f7fd fb1d 	bl	8000ab2 <PE_Reset_HardReset>
 8003478:	2168      	movs	r1, #104	; 0x68
 800347a:	4668      	mov	r0, sp
 800347c:	7b40      	ldrb	r0, [r0, #13]
 800347e:	f7fc ffff 	bl	8000480 <USBPD_PE_Notification>
 8003482:	2205      	movs	r2, #5
 8003484:	2101      	movs	r1, #1
 8003486:	0020      	movs	r0, r4
 8003488:	f7fd ff84 	bl	8001394 <PE_CallHardResetCallback>
 800348c:	e633      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 800348e:	2206      	movs	r2, #6
 8003490:	2101      	movs	r1, #1
 8003492:	0020      	movs	r0, r4
 8003494:	f7fd ff7e 	bl	8001394 <PE_CallHardResetCallback>
 8003498:	68a0      	ldr	r0, [r4, #8]
 800349a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800349c:	2800      	cmp	r0, #0
 800349e:	d000      	beq.n	80034a2 <__iar_annotation$$branch+0x5e2>
 80034a0:	e2d6      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80034a2:	2500      	movs	r5, #0
 80034a4:	7465      	strb	r5, [r4, #17]
 80034a6:	e4dc      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80034a8:	2001      	movs	r0, #1
 80034aa:	9000      	str	r0, [sp, #0]
 80034ac:	231b      	movs	r3, #27
 80034ae:	2207      	movs	r2, #7
 80034b0:	2100      	movs	r1, #0
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7fe f82c 	bl	8001510 <PE_Send_CtrlMessage>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f4      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 80034bc:	2006      	movs	r0, #6
 80034be:	7720      	strb	r0, [r4, #28]
 80034c0:	83e7      	strh	r7, [r4, #30]
 80034c2:	251b      	movs	r5, #27
 80034c4:	210b      	movs	r1, #11
 80034c6:	e5c5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80034c8:	4668      	mov	r0, sp
 80034ca:	7b00      	ldrb	r0, [r0, #12]
 80034cc:	2811      	cmp	r0, #17
 80034ce:	d13e      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 80034d0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80034d2:	0bc1      	lsrs	r1, r0, #15
 80034d4:	d11f      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034d6:	0441      	lsls	r1, r0, #17
 80034d8:	0f49      	lsrs	r1, r1, #29
 80034da:	d01c      	beq.n	8003516 <__iar_annotation$$branch+0x656>
 80034dc:	06c0      	lsls	r0, r0, #27
 80034de:	0ec0      	lsrs	r0, r0, #27
 80034e0:	2801      	cmp	r0, #1
 80034e2:	d118      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034e4:	008b      	lsls	r3, r1, #2
 80034e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80034e8:	1c82      	adds	r2, r0, #2
 80034ea:	2104      	movs	r1, #4
 80034ec:	7c20      	ldrb	r0, [r4, #16]
 80034ee:	68a5      	ldr	r5, [r4, #8]
 80034f0:	69ad      	ldr	r5, [r5, #24]
 80034f2:	47a8      	blx	r5
 80034f4:	2003      	movs	r0, #3
 80034f6:	7460      	strb	r0, [r4, #17]
 80034f8:	2500      	movs	r5, #0
 80034fa:	4668      	mov	r0, sp
 80034fc:	7b00      	ldrb	r0, [r0, #12]
 80034fe:	2814      	cmp	r0, #20
 8003500:	d005      	beq.n	800350e <__iar_annotation$$branch+0x64e>
 8003502:	2014      	movs	r0, #20
 8003504:	4669      	mov	r1, sp
 8003506:	7308      	strb	r0, [r1, #12]
 8003508:	0020      	movs	r0, r4
 800350a:	f7fd fa24 	bl	8000956 <PE_Clear_RxEvent>
 800350e:	210d      	movs	r1, #13
 8003510:	7c20      	ldrb	r0, [r4, #16]
 8003512:	f7fc ffb5 	bl	8000480 <USBPD_PE_Notification>
 8003516:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003518:	21f0      	movs	r1, #240	; 0xf0
 800351a:	0209      	lsls	r1, r1, #8
 800351c:	4001      	ands	r1, r0
 800351e:	d116      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 8003520:	06c0      	lsls	r0, r0, #27
 8003522:	0ec0      	lsrs	r0, r0, #27
 8003524:	2804      	cmp	r0, #4
 8003526:	d001      	beq.n	800352c <__iar_annotation$$branch+0x66c>
 8003528:	2810      	cmp	r0, #16
 800352a:	d110      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 800352c:	2003      	movs	r0, #3
 800352e:	7460      	strb	r0, [r4, #17]
 8003530:	2500      	movs	r5, #0
 8003532:	4668      	mov	r0, sp
 8003534:	7b00      	ldrb	r0, [r0, #12]
 8003536:	2814      	cmp	r0, #20
 8003538:	d005      	beq.n	8003546 <__iar_annotation$$branch+0x686>
 800353a:	2014      	movs	r0, #20
 800353c:	4669      	mov	r1, sp
 800353e:	7308      	strb	r0, [r1, #12]
 8003540:	0020      	movs	r0, r4
 8003542:	f7fd fa08 	bl	8000956 <PE_Clear_RxEvent>
 8003546:	210e      	movs	r1, #14
 8003548:	7c20      	ldrb	r0, [r4, #16]
 800354a:	f7fc ff99 	bl	8000480 <USBPD_PE_Notification>
 800354e:	8be0      	ldrh	r0, [r4, #30]
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0209      	lsls	r1, r1, #8
 8003554:	4288      	cmp	r0, r1
 8003556:	d11f      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003558:	2003      	movs	r0, #3
 800355a:	e55f      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800355c:	68a0      	ldr	r0, [r4, #8]
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	2900      	cmp	r1, #0
 8003562:	d01f      	beq.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003564:	7c20      	ldrb	r0, [r4, #16]
 8003566:	4788      	blx	r1
 8003568:	280a      	cmp	r0, #10
 800356a:	d002      	beq.n	8003572 <__iar_annotation$$branch+0x6b2>
 800356c:	280d      	cmp	r0, #13
 800356e:	d014      	beq.n	800359a <__iar_annotation$$branch+0x6da>
 8003570:	e018      	b.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003572:	1cf8      	adds	r0, r7, #3
 8003574:	83e0      	strh	r0, [r4, #30]
 8003576:	251e      	movs	r5, #30
 8003578:	2000      	movs	r0, #0
 800357a:	9000      	str	r0, [sp, #0]
 800357c:	2324      	movs	r3, #36	; 0x24
 800357e:	2203      	movs	r2, #3
 8003580:	2100      	movs	r1, #0
 8003582:	0020      	movs	r0, r4
 8003584:	f7fd ffc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003588:	2800      	cmp	r0, #0
 800358a:	d105      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 800358c:	2201      	movs	r2, #1
 800358e:	2101      	movs	r1, #1
 8003590:	7c20      	ldrb	r0, [r4, #16]
 8003592:	68a3      	ldr	r3, [r4, #8]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	4798      	blx	r3
 8003598:	e463      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800359a:	2000      	movs	r0, #0
 800359c:	9000      	str	r0, [sp, #0]
 800359e:	2303      	movs	r3, #3
 80035a0:	220c      	movs	r2, #12
 80035a2:	e68d      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035a4:	2000      	movs	r0, #0
 80035a6:	9000      	str	r0, [sp, #0]
 80035a8:	2303      	movs	r3, #3
 80035aa:	2204      	movs	r2, #4
 80035ac:	e688      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035ae:	8be0      	ldrh	r0, [r4, #30]
 80035b0:	03a9      	lsls	r1, r5, #14
 80035b2:	4288      	cmp	r0, r1
 80035b4:	d1f0      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035b6:	2104      	movs	r1, #4
 80035b8:	0020      	movs	r0, r4
 80035ba:	f7fd fef4 	bl	80013a6 <PE_SetPowerNegotiation>
 80035be:	6860      	ldr	r0, [r4, #4]
 80035c0:	6801      	ldr	r1, [r0, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	430a      	orrs	r2, r1
 80035c6:	6002      	str	r2, [r0, #0]
 80035c8:	2206      	movs	r2, #6
 80035ca:	2101      	movs	r1, #1
 80035cc:	7c20      	ldrb	r0, [r4, #16]
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	4798      	blx	r3
 80035d4:	2207      	movs	r2, #7
 80035d6:	2101      	movs	r1, #1
 80035d8:	7c20      	ldrb	r0, [r4, #16]
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	4798      	blx	r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	7c20      	ldrb	r0, [r4, #16]
 80035e4:	f002 f889 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80035e8:	2000      	movs	r0, #0
 80035ea:	9000      	str	r0, [sp, #0]
 80035ec:	2325      	movs	r3, #37	; 0x25
 80035ee:	2206      	movs	r2, #6
 80035f0:	2100      	movs	r1, #0
 80035f2:	0020      	movs	r0, r4
 80035f4:	f7fd ff8c 	bl	8001510 <PE_Send_CtrlMessage>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d1cd      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035fc:	e0c9      	b.n	8003792 <__iar_annotation$$branch+0x8d2>
 80035fe:	4668      	mov	r0, sp
 8003600:	7b00      	ldrb	r0, [r0, #12]
 8003602:	2811      	cmp	r0, #17
 8003604:	d10b      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 8003606:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003608:	4001      	ands	r1, r0
 800360a:	2906      	cmp	r1, #6
 800360c:	d107      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 800360e:	2014      	movs	r0, #20
 8003610:	4669      	mov	r1, sp
 8003612:	7308      	strb	r0, [r1, #12]
 8003614:	0020      	movs	r0, r4
 8003616:	f7fd f99e 	bl	8000956 <PE_Clear_RxEvent>
 800361a:	2026      	movs	r0, #38	; 0x26
 800361c:	7460      	strb	r0, [r4, #17]
 800361e:	8be0      	ldrh	r0, [r4, #30]
 8003620:	03a9      	lsls	r1, r5, #14
 8003622:	4288      	cmp	r0, r1
 8003624:	d1b8      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800362a:	2800      	cmp	r0, #0
 800362c:	d000      	beq.n	8003630 <__iar_annotation$$branch+0x770>
 800362e:	e20f      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 8003630:	220a      	movs	r2, #10
 8003632:	2101      	movs	r1, #1
 8003634:	7c20      	ldrb	r0, [r4, #16]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	4798      	blx	r3
 800363a:	e0ce      	b.n	80037da <__iar_annotation$$branch+0x91a>
 800363c:	2100      	movs	r1, #0
 800363e:	0020      	movs	r0, r4
 8003640:	f7fd f944 	bl	80008cc <PE_ChangePowerRole>
 8003644:	220d      	movs	r2, #13
 8003646:	2100      	movs	r1, #0
 8003648:	7c20      	ldrb	r0, [r4, #16]
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	4798      	blx	r3
 8003650:	2114      	movs	r1, #20
 8003652:	7c20      	ldrb	r0, [r4, #16]
 8003654:	f7fc ff14 	bl	8000480 <USBPD_PE_Notification>
 8003658:	220e      	movs	r2, #14
 800365a:	2100      	movs	r1, #0
 800365c:	7c20      	ldrb	r0, [r4, #16]
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	4798      	blx	r3
 8003664:	6860      	ldr	r0, [r4, #4]
 8003666:	7800      	ldrb	r0, [r0, #0]
 8003668:	0780      	lsls	r0, r0, #30
 800366a:	0f80      	lsrs	r0, r0, #30
 800366c:	2801      	cmp	r0, #1
 800366e:	d104      	bne.n	800367a <__iar_annotation$$branch+0x7ba>
 8003670:	2101      	movs	r1, #1
 8003672:	4668      	mov	r0, sp
 8003674:	7b40      	ldrb	r0, [r0, #13]
 8003676:	f002 f895 	bl	80057a4 <USBPD_PRL_SOPCapability>
 800367a:	0020      	movs	r0, r4
 800367c:	f7fd fa90 	bl	8000ba0 <PE_Reset_StateMachine>
 8003680:	e4cd      	b.n	800301e <__iar_annotation$$branch+0x15e>
 8003682:	2001      	movs	r0, #1
 8003684:	9000      	str	r0, [sp, #0]
 8003686:	231f      	movs	r3, #31
 8003688:	220a      	movs	r2, #10
 800368a:	2100      	movs	r1, #0
 800368c:	0020      	movs	r0, r4
 800368e:	f7fd ff3f 	bl	8001510 <PE_Send_CtrlMessage>
 8003692:	2800      	cmp	r0, #0
 8003694:	d1c6      	bne.n	8003624 <__iar_annotation$$branch+0x764>
 8003696:	2008      	movs	r0, #8
 8003698:	7720      	strb	r0, [r4, #28]
 800369a:	83e7      	strh	r7, [r4, #30]
 800369c:	251b      	movs	r5, #27
 800369e:	2202      	movs	r2, #2
 80036a0:	2101      	movs	r1, #1
 80036a2:	7c20      	ldrb	r0, [r4, #16]
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	4798      	blx	r3
 80036aa:	2139      	movs	r1, #57	; 0x39
 80036ac:	e4d2      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80036ae:	4668      	mov	r0, sp
 80036b0:	7b00      	ldrb	r0, [r0, #12]
 80036b2:	2811      	cmp	r0, #17
 80036b4:	d145      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036b6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80036b8:	391f      	subs	r1, #31
 80036ba:	4001      	ands	r1, r0
 80036bc:	d141      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036be:	06c0      	lsls	r0, r0, #27
 80036c0:	0ec0      	lsrs	r0, r0, #27
 80036c2:	2803      	cmp	r0, #3
 80036c4:	d006      	beq.n	80036d4 <__iar_annotation$$branch+0x814>
 80036c6:	2804      	cmp	r0, #4
 80036c8:	d012      	beq.n	80036f0 <__iar_annotation$$branch+0x830>
 80036ca:	280c      	cmp	r0, #12
 80036cc:	d008      	beq.n	80036e0 <__iar_annotation$$branch+0x820>
 80036ce:	2810      	cmp	r0, #16
 80036d0:	d020      	beq.n	8003714 <__iar_annotation$$branch+0x854>
 80036d2:	e036      	b.n	8003742 <__iar_annotation$$branch+0x882>
 80036d4:	213a      	movs	r1, #58	; 0x3a
 80036d6:	7c20      	ldrb	r0, [r4, #16]
 80036d8:	f7fc fed2 	bl	8000480 <USBPD_PE_Notification>
 80036dc:	2020      	movs	r0, #32
 80036de:	e012      	b.n	8003706 <__iar_annotation$$branch+0x846>
 80036e0:	2205      	movs	r2, #5
 80036e2:	2101      	movs	r1, #1
 80036e4:	7c20      	ldrb	r0, [r4, #16]
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	4798      	blx	r3
 80036ec:	213b      	movs	r1, #59	; 0x3b
 80036ee:	e006      	b.n	80036fe <__iar_annotation$$branch+0x83e>
 80036f0:	2204      	movs	r2, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	7c20      	ldrb	r0, [r4, #16]
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	4798      	blx	r3
 80036fc:	2116      	movs	r1, #22
 80036fe:	7c20      	ldrb	r0, [r4, #16]
 8003700:	f7fc febe 	bl	8000480 <USBPD_PE_Notification>
 8003704:	2003      	movs	r0, #3
 8003706:	7460      	strb	r0, [r4, #17]
 8003708:	2500      	movs	r5, #0
 800370a:	4668      	mov	r0, sp
 800370c:	7b00      	ldrb	r0, [r0, #12]
 800370e:	2814      	cmp	r0, #20
 8003710:	d111      	bne.n	8003736 <__iar_annotation$$branch+0x876>
 8003712:	e016      	b.n	8003742 <__iar_annotation$$branch+0x882>
 8003714:	2204      	movs	r2, #4
 8003716:	2101      	movs	r1, #1
 8003718:	7c20      	ldrb	r0, [r4, #16]
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	4798      	blx	r3
 8003720:	2117      	movs	r1, #23
 8003722:	7c20      	ldrb	r0, [r4, #16]
 8003724:	f7fc feac 	bl	8000480 <USBPD_PE_Notification>
 8003728:	2003      	movs	r0, #3
 800372a:	7460      	strb	r0, [r4, #17]
 800372c:	2500      	movs	r5, #0
 800372e:	4668      	mov	r0, sp
 8003730:	7b00      	ldrb	r0, [r0, #12]
 8003732:	2814      	cmp	r0, #20
 8003734:	d005      	beq.n	8003742 <__iar_annotation$$branch+0x882>
 8003736:	2014      	movs	r0, #20
 8003738:	4669      	mov	r1, sp
 800373a:	7308      	strb	r0, [r1, #12]
 800373c:	0020      	movs	r0, r4
 800373e:	f7fd f90a 	bl	8000956 <PE_Clear_RxEvent>
 8003742:	8be0      	ldrh	r0, [r4, #30]
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0209      	lsls	r1, r1, #8
 8003748:	4288      	cmp	r0, r1
 800374a:	d12c      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 800374c:	e704      	b.n	8003558 <__iar_annotation$$branch+0x698>
 800374e:	6860      	ldr	r0, [r4, #4]
 8003750:	6801      	ldr	r1, [r0, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	430a      	orrs	r2, r1
 8003756:	6002      	str	r2, [r0, #0]
 8003758:	7f20      	ldrb	r0, [r4, #28]
 800375a:	2809      	cmp	r0, #9
 800375c:	d005      	beq.n	800376a <__iar_annotation$$branch+0x8aa>
 800375e:	2206      	movs	r2, #6
 8003760:	2101      	movs	r1, #1
 8003762:	7c20      	ldrb	r0, [r4, #16]
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	4798      	blx	r3
 800376a:	2207      	movs	r2, #7
 800376c:	2101      	movs	r1, #1
 800376e:	7c20      	ldrb	r0, [r4, #16]
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	4798      	blx	r3
 8003776:	2100      	movs	r1, #0
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f001 ffbe 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 800377e:	2000      	movs	r0, #0
 8003780:	9000      	str	r0, [sp, #0]
 8003782:	2321      	movs	r3, #33	; 0x21
 8003784:	2206      	movs	r2, #6
 8003786:	2100      	movs	r1, #0
 8003788:	0020      	movs	r0, r4
 800378a:	f7fd fec1 	bl	8001510 <PE_Send_CtrlMessage>
 800378e:	2800      	cmp	r0, #0
 8003790:	d109      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 8003792:	2208      	movs	r2, #8
 8003794:	2101      	movs	r1, #1
 8003796:	7c20      	ldrb	r0, [r4, #16]
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	4798      	blx	r3
 800379e:	48c5      	ldr	r0, [pc, #788]	; (8003ab4 <.text_3>)
 80037a0:	83e0      	strh	r0, [r4, #30]
 80037a2:	25eb      	movs	r5, #235	; 0xeb
 80037a4:	006d      	lsls	r5, r5, #1
 80037a6:	e6f7      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80037a8:	4668      	mov	r0, sp
 80037aa:	7b00      	ldrb	r0, [r0, #12]
 80037ac:	2811      	cmp	r0, #17
 80037ae:	d10b      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80037b2:	4001      	ands	r1, r0
 80037b4:	2906      	cmp	r1, #6
 80037b6:	d107      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b8:	2026      	movs	r0, #38	; 0x26
 80037ba:	7460      	strb	r0, [r4, #17]
 80037bc:	2014      	movs	r0, #20
 80037be:	4669      	mov	r1, sp
 80037c0:	7308      	strb	r0, [r1, #12]
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fd f8c7 	bl	8000956 <PE_Clear_RxEvent>
 80037c8:	8be0      	ldrh	r0, [r4, #30]
 80037ca:	03a9      	lsls	r1, r5, #14
 80037cc:	4288      	cmp	r0, r1
 80037ce:	d1ea      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037d0:	68a0      	ldr	r0, [r4, #8]
 80037d2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d000      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80037d8:	e13a      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80037da:	200f      	movs	r0, #15
 80037dc:	e6bd      	b.n	800355a <__iar_annotation$$branch+0x69a>
 80037de:	8be0      	ldrh	r0, [r4, #30]
 80037e0:	03a9      	lsls	r1, r5, #14
 80037e2:	4288      	cmp	r0, r1
 80037e4:	d1df      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037e6:	220e      	movs	r2, #14
 80037e8:	2101      	movs	r1, #1
 80037ea:	7c20      	ldrb	r0, [r4, #16]
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	4798      	blx	r3
 80037f2:	6860      	ldr	r0, [r4, #4]
 80037f4:	7800      	ldrb	r0, [r0, #0]
 80037f6:	0780      	lsls	r0, r0, #30
 80037f8:	0f80      	lsrs	r0, r0, #30
 80037fa:	2802      	cmp	r0, #2
 80037fc:	d102      	bne.n	8003804 <__iar_annotation$$branch+0x944>
 80037fe:	7c20      	ldrb	r0, [r4, #16]
 8003800:	f001 ffb1 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003804:	0020      	movs	r0, r4
 8003806:	f7fd f9cb 	bl	8000ba0 <PE_Reset_StateMachine>
 800380a:	2115      	movs	r1, #21
 800380c:	e74e      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 800380e:	2803      	cmp	r0, #3
 8003810:	d110      	bne.n	8003834 <__iar_annotation$$branch+0x974>
 8003812:	2000      	movs	r0, #0
 8003814:	7720      	strb	r0, [r4, #28]
 8003816:	6860      	ldr	r0, [r4, #4]
 8003818:	7800      	ldrb	r0, [r0, #0]
 800381a:	0780      	lsls	r0, r0, #30
 800381c:	0f80      	lsrs	r0, r0, #30
 800381e:	2802      	cmp	r0, #2
 8003820:	d102      	bne.n	8003828 <__iar_annotation$$branch+0x968>
 8003822:	7c20      	ldrb	r0, [r4, #16]
 8003824:	f001 ff9f 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003828:	2004      	movs	r0, #4
 800382a:	7460      	strb	r0, [r4, #17]
 800382c:	2167      	movs	r1, #103	; 0x67
 800382e:	7c20      	ldrb	r0, [r4, #16]
 8003830:	f7fc fe26 	bl	8000480 <USBPD_PE_Notification>
 8003834:	4668      	mov	r0, sp
 8003836:	7b00      	ldrb	r0, [r0, #12]
 8003838:	2814      	cmp	r0, #20
 800383a:	d00d      	beq.n	8003858 <__iar_annotation$$branch+0x998>
 800383c:	0020      	movs	r0, r4
 800383e:	f7fe f917 	bl	8001a70 <PE_ManageRXEvent>
 8003842:	4668      	mov	r0, sp
 8003844:	7b00      	ldrb	r0, [r0, #12]
 8003846:	2814      	cmp	r0, #20
 8003848:	d005      	beq.n	8003856 <__iar_annotation$$branch+0x996>
 800384a:	2014      	movs	r0, #20
 800384c:	4669      	mov	r1, sp
 800384e:	7308      	strb	r0, [r1, #12]
 8003850:	0020      	movs	r0, r4
 8003852:	f7fd f880 	bl	8000956 <PE_Clear_RxEvent>
 8003856:	e69f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003858:	6960      	ldr	r0, [r4, #20]
 800385a:	0cc0      	lsrs	r0, r0, #19
 800385c:	03ad      	lsls	r5, r5, #14
 800385e:	2800      	cmp	r0, #0
 8003860:	d01e      	beq.n	80038a0 <__iar_annotation$$branch+0x9e0>
 8003862:	8c21      	ldrh	r1, [r4, #32]
 8003864:	42a9      	cmp	r1, r5
 8003866:	d10e      	bne.n	8003886 <__iar_annotation$$branch+0x9c6>
 8003868:	200f      	movs	r0, #15
 800386a:	7460      	strb	r0, [r4, #17]
 800386c:	2000      	movs	r0, #0
 800386e:	9000      	str	r0, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	2270      	movs	r2, #112	; 0x70
 8003874:	7c21      	ldrb	r1, [r4, #16]
 8003876:	2009      	movs	r0, #9
 8003878:	4da5      	ldr	r5, [pc, #660]	; (8003b10 <.text_5>)
 800387a:	682d      	ldr	r5, [r5, #0]
 800387c:	47a8      	blx	r5
 800387e:	78b0      	ldrb	r0, [r6, #2]
 8003880:	1c40      	adds	r0, r0, #1
 8003882:	70b0      	strb	r0, [r6, #2]
 8003884:	e6fc      	b.n	8003680 <__iar_annotation$$branch+0x7c0>
 8003886:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003888:	0509      	lsls	r1, r1, #20
 800388a:	0f49      	lsrs	r1, r1, #29
 800388c:	180a      	adds	r2, r1, r0
 800388e:	2333      	movs	r3, #51	; 0x33
 8003890:	435a      	muls	r2, r3
 8003892:	4315      	orrs	r5, r2
 8003894:	8425      	strh	r5, [r4, #32]
 8003896:	180d      	adds	r5, r1, r0
 8003898:	2033      	movs	r0, #51	; 0x33
 800389a:	4345      	muls	r5, r0
 800389c:	b2ad      	uxth	r5, r5
 800389e:	e67b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038a0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80038a2:	42a8      	cmp	r0, r5
 80038a4:	d099      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80038a6:	7c20      	ldrb	r0, [r4, #16]
 80038a8:	f7fd f87a 	bl	80009a0 <PE_PRL_Control_RxEvent>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d113      	bne.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b0:	2032      	movs	r0, #50	; 0x32
 80038b2:	5c20      	ldrb	r0, [r4, r0]
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d00f      	beq.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b8:	2133      	movs	r1, #51	; 0x33
 80038ba:	5c61      	ldrb	r1, [r4, r1]
 80038bc:	2231      	movs	r2, #49	; 0x31
 80038be:	54a1      	strb	r1, [r4, r2]
 80038c0:	7460      	strb	r0, [r4, #17]
 80038c2:	2500      	movs	r5, #0
 80038c4:	2132      	movs	r1, #50	; 0x32
 80038c6:	5465      	strb	r5, [r4, r1]
 80038c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038ca:	62e0      	str	r0, [r4, #44]	; 0x2c
 80038cc:	6960      	ldr	r0, [r4, #20]
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	01c9      	lsls	r1, r1, #7
 80038d2:	4301      	orrs	r1, r0
 80038d4:	6161      	str	r1, [r4, #20]
 80038d6:	e65f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038d8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80038da:	42a8      	cmp	r0, r5
 80038dc:	d104      	bne.n	80038e8 <__iar_annotation$$branch+0x4>
 80038de:	2500      	movs	r5, #0
 80038e0:	8465      	strh	r5, [r4, #34]	; 0x22
 80038e2:	7930      	ldrb	r0, [r6, #4]

080038e4 <__iar_annotation$$branch>:
 80038e4:	f7ff fb87 	bl	8002ff6 <__iar_annotation$$branch+0x136>
 80038e8:	0020      	movs	r0, r4
 80038ea:	f7fd fd83 	bl	80013f4 <PE_CalculateMinTiming>
 80038ee:	e080      	b.n	80039f2 <__iar_annotation$$branch>
 80038f0:	2000      	movs	r0, #0
 80038f2:	9002      	str	r0, [sp, #8]
 80038f4:	2003      	movs	r0, #3
 80038f6:	9001      	str	r0, [sp, #4]
 80038f8:	2001      	movs	r0, #1
 80038fa:	9000      	str	r0, [sp, #0]
 80038fc:	0023      	movs	r3, r4
 80038fe:	332c      	adds	r3, #44	; 0x2c
 8003900:	2206      	movs	r2, #6
 8003902:	2100      	movs	r1, #0
 8003904:	0020      	movs	r0, r4
 8003906:	f7fd fe2e 	bl	8001566 <PE_Send_DataMessage>
 800390a:	2800      	cmp	r0, #0
 800390c:	d1e3      	bne.n	80038d6 <__iar_annotation$$branch+0xa16>
 800390e:	215d      	movs	r1, #93	; 0x5d
 8003910:	e6cc      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003912:	2000      	movs	r0, #0
 8003914:	9004      	str	r0, [sp, #16]
 8003916:	ab04      	add	r3, sp, #16
 8003918:	aa05      	add	r2, sp, #20
 800391a:	210a      	movs	r1, #10
 800391c:	4668      	mov	r0, sp
 800391e:	7b40      	ldrb	r0, [r0, #13]
 8003920:	68a7      	ldr	r7, [r4, #8]
 8003922:	697f      	ldr	r7, [r7, #20]
 8003924:	47b8      	blx	r7
 8003926:	2104      	movs	r1, #4
 8003928:	9804      	ldr	r0, [sp, #16]
 800392a:	f7fd fd8f 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800392e:	2800      	cmp	r0, #0
 8003930:	d11f      	bne.n	8003972 <__iar_annotation$$branch+0x8e>
 8003932:	71f0      	strb	r0, [r6, #7]
 8003934:	7230      	strb	r0, [r6, #8]
 8003936:	7c20      	ldrb	r0, [r4, #16]
 8003938:	f7fd fa04 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800393c:	2800      	cmp	r0, #0
 800393e:	d103      	bne.n	8003948 <__iar_annotation$$branch+0x64>
 8003940:	7a30      	ldrb	r0, [r6, #8]
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	4301      	orrs	r1, r0
 8003946:	7231      	strb	r1, [r6, #8]
 8003948:	9a04      	ldr	r2, [sp, #16]
 800394a:	a905      	add	r1, sp, #20
 800394c:	4871      	ldr	r0, [pc, #452]	; (8003b14 <.text_6>)
 800394e:	1820      	adds	r0, r4, r0
 8003950:	f01f ff60 	bl	8023814 <__aeabi_memcpy>
 8003954:	2000      	movs	r0, #0
 8003956:	9002      	str	r0, [sp, #8]
 8003958:	2003      	movs	r0, #3
 800395a:	9001      	str	r0, [sp, #4]
 800395c:	2008      	movs	r0, #8
 800395e:	9000      	str	r0, [sp, #0]
 8003960:	486d      	ldr	r0, [pc, #436]	; (8003b18 <.text_7>)
 8003962:	1823      	adds	r3, r4, r0
 8003964:	220c      	movs	r2, #12
 8003966:	2100      	movs	r1, #0
 8003968:	0020      	movs	r0, r4
 800396a:	f7fd ff2f 	bl	80017cc <PE_Send_ExtendedMessage>
 800396e:	214c      	movs	r1, #76	; 0x4c
 8003970:	e69c      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003972:	2001      	movs	r0, #1
 8003974:	e510      	b.n	8003398 <__iar_annotation$$branch+0x4d8>
 8003976:	2001      	movs	r0, #1
 8003978:	9000      	str	r0, [sp, #0]
 800397a:	2339      	movs	r3, #57	; 0x39
 800397c:	7832      	ldrb	r2, [r6, #0]
 800397e:	2033      	movs	r0, #51	; 0x33
 8003980:	5c21      	ldrb	r1, [r4, r0]
 8003982:	0020      	movs	r0, r4
 8003984:	f7fd fdc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003988:	2800      	cmp	r0, #0
 800398a:	d144      	bne.n	8003a16 <__iar_annotation$$branch+0x24>
 800398c:	7870      	ldrb	r0, [r6, #1]
 800398e:	7720      	strb	r0, [r4, #28]
 8003990:	83e7      	strh	r7, [r4, #30]
 8003992:	251b      	movs	r5, #27
 8003994:	2144      	movs	r1, #68	; 0x44
 8003996:	e689      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003998:	8be0      	ldrh	r0, [r4, #30]
 800399a:	03a9      	lsls	r1, r5, #14
 800399c:	4288      	cmp	r0, r1
 800399e:	d104      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a0:	4668      	mov	r0, sp
 80039a2:	7b00      	ldrb	r0, [r0, #12]
 80039a4:	2814      	cmp	r0, #20
 80039a6:	d100      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a8:	e5d6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039aa:	4668      	mov	r0, sp
 80039ac:	7b00      	ldrb	r0, [r0, #12]
 80039ae:	2814      	cmp	r0, #20
 80039b0:	d031      	beq.n	8003a16 <__iar_annotation$$branch+0x24>
 80039b2:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80039b4:	0bc1      	lsrs	r1, r0, #15
 80039b6:	d003      	beq.n	80039c0 <__iar_annotation$$branch+0xdc>
 80039b8:	0020      	movs	r0, r4
 80039ba:	f7fd fe11 	bl	80015e0 <PE_Check_ExtendedMessage>
 80039be:	e740      	b.n	8003842 <__iar_annotation$$branch+0x982>
 80039c0:	06c0      	lsls	r0, r0, #27
 80039c2:	0ec0      	lsrs	r0, r0, #27
 80039c4:	2810      	cmp	r0, #16
 80039c6:	d000      	beq.n	80039ca <__iar_annotation$$branch+0xe6>
 80039c8:	e5c6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039ca:	2014      	movs	r0, #20
 80039cc:	4669      	mov	r1, sp
 80039ce:	7308      	strb	r0, [r1, #12]
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc ffc0 	bl	8000956 <PE_Clear_RxEvent>
 80039d6:	2500      	movs	r5, #0
 80039d8:	83e5      	strh	r5, [r4, #30]
 80039da:	2003      	movs	r0, #3
 80039dc:	7460      	strb	r0, [r4, #17]
 80039de:	2159      	movs	r1, #89	; 0x59
 80039e0:	e664      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 80039e2:	0020      	movs	r0, r4
 80039e4:	f7fd ff1e 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80039e8:	e003      	b.n	80039f2 <__iar_annotation$$branch>
 80039ea:	a903      	add	r1, sp, #12
 80039ec:	0020      	movs	r0, r4
 80039ee:	f7fd f9bb 	bl	8000d68 <PE_SubStateMachine_Generic>

080039f2 <__iar_annotation$$branch>:
 80039f2:	f7ff fa35 	bl	8002e60 <__iar_annotation$$branch+0xc>
 80039f6:	a903      	add	r1, sp, #12
 80039f8:	0020      	movs	r0, r4
 80039fa:	f000 f9d5 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80039fe:	0005      	movs	r5, r0
 8003a00:	6860      	ldr	r0, [r4, #4]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	0401      	lsls	r1, r0, #16
 8003a06:	0fc9      	lsrs	r1, r1, #31
 8003a08:	d006      	beq.n	8003a18 <__iar_annotation$$branch+0x26>
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	6801      	ldr	r1, [r0, #0]
 8003a0e:	4668      	mov	r0, sp
 8003a10:	7b40      	ldrb	r0, [r0, #13]
 8003a12:	f001 fec7 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8003a16:	e5bf      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a18:	2101      	movs	r1, #1
 8003a1a:	e7f8      	b.n	8003a0e <__iar_annotation$$branch+0x1c>
 8003a1c:	4668      	mov	r0, sp
 8003a1e:	7b00      	ldrb	r0, [r0, #12]
 8003a20:	2811      	cmp	r0, #17
 8003a22:	d111      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a24:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003a26:	4001      	ands	r1, r0
 8003a28:	2913      	cmp	r1, #19
 8003a2a:	d10d      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a2c:	2014      	movs	r0, #20
 8003a2e:	4669      	mov	r1, sp
 8003a30:	7308      	strb	r0, [r1, #12]
 8003a32:	0020      	movs	r0, r4
 8003a34:	f7fc ff8f 	bl	8000956 <PE_Clear_RxEvent>
 8003a38:	2000      	movs	r0, #0
 8003a3a:	9000      	str	r0, [sp, #0]
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	2203      	movs	r2, #3
 8003a40:	2100      	movs	r1, #0
 8003a42:	0020      	movs	r0, r4
 8003a44:	f7fd fd64 	bl	8001510 <PE_Send_CtrlMessage>
 8003a48:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003a4a:	03a9      	lsls	r1, r5, #14
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	d106      	bne.n	8003a5e <__iar_annotation$$branch+0x6c>
 8003a50:	2092      	movs	r0, #146	; 0x92
 8003a52:	e582      	b.n	800355a <__iar_annotation$$branch+0x69a>
 8003a54:	4668      	mov	r0, sp
 8003a56:	7b01      	ldrb	r1, [r0, #12]
 8003a58:	0020      	movs	r0, r4
 8003a5a:	f001 fc05 	bl	8005268 <PE_StateMachine_UVDM>
 8003a5e:	e59b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a60:	6960      	ldr	r0, [r4, #20]
 8003a62:	2701      	movs	r7, #1
 8003a64:	0b41      	lsrs	r1, r0, #13
 8003a66:	4039      	ands	r1, r7
 8003a68:	d019      	beq.n	8003a9e <__iar_annotation$$branch+0xac>
 8003a6a:	0b80      	lsrs	r0, r0, #14
 8003a6c:	4038      	ands	r0, r7
 8003a6e:	d007      	beq.n	8003a80 <__iar_annotation$$branch+0x8e>
 8003a70:	215b      	movs	r1, #91	; 0x5b
 8003a72:	7c20      	ldrb	r0, [r4, #16]
 8003a74:	f7fc fd04 	bl	8000480 <USBPD_PE_Notification>
 8003a78:	6960      	ldr	r0, [r4, #20]
 8003a7a:	4928      	ldr	r1, [pc, #160]	; (8003b1c <.text_8>)
 8003a7c:	4001      	ands	r1, r0
 8003a7e:	6161      	str	r1, [r4, #20]
 8003a80:	2003      	movs	r0, #3
 8003a82:	7460      	strb	r0, [r4, #17]
 8003a84:	7ca1      	ldrb	r1, [r4, #18]
 8003a86:	2903      	cmp	r1, #3
 8003a88:	d008      	beq.n	8003a9c <__iar_annotation$$branch+0xaa>
 8003a8a:	74a0      	strb	r0, [r4, #18]
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	2203      	movs	r2, #3
 8003a94:	7c21      	ldrb	r1, [r4, #16]
 8003a96:	2004      	movs	r0, #4
 8003a98:	6835      	ldr	r5, [r6, #0]
 8003a9a:	47a8      	blx	r5
 8003a9c:	2501      	movs	r5, #1
 8003a9e:	6960      	ldr	r0, [r4, #20]
 8003aa0:	491f      	ldr	r1, [pc, #124]	; (8003b20 <.text_9>)
 8003aa2:	4001      	ands	r1, r0
 8003aa4:	6161      	str	r1, [r4, #20]
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	d101      	bne.n	8003aae <__iar_annotation$$branch>

08003aaa <__iar_annotation$$branch>:
 8003aaa:	f7ff f8c9 	bl	8002c40 <USBPD_PE_StateMachine_SRC+0xb4>

08003aae <__iar_annotation$$branch>:
 8003aae:	f7ff fa0b 	bl	8002ec8 <__iar_annotation$$branch+0x8>
	...

08003ab4 <.text_3>:
 8003ab4:	000081d6 	.word	0x000081d6

08003ab8 <PE_Send_SRCCapabilities>:
 8003ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003aba:	0004      	movs	r4, r0
 8003abc:	000d      	movs	r5, r1
 8003abe:	2000      	movs	r0, #0
 8003ac0:	9002      	str	r0, [sp, #8]
 8003ac2:	ab02      	add	r3, sp, #8
 8003ac4:	4817      	ldr	r0, [pc, #92]	; (8003b24 <.text_10>)
 8003ac6:	1822      	adds	r2, r4, r0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	7c20      	ldrb	r0, [r4, #16]
 8003acc:	68a6      	ldr	r6, [r4, #8]
 8003ace:	6976      	ldr	r6, [r6, #20]
 8003ad0:	47b0      	blx	r6
 8003ad2:	9802      	ldr	r0, [sp, #8]
 8003ad4:	1c80      	adds	r0, r0, #2
 8003ad6:	9002      	str	r0, [sp, #8]
 8003ad8:	2104      	movs	r1, #4
 8003ada:	9802      	ldr	r0, [sp, #8]
 8003adc:	f7fd fcb6 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d113      	bne.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003ae4:	6860      	ldr	r0, [r4, #4]
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	04c1      	lsls	r1, r0, #19
 8003aea:	0fc9      	lsrs	r1, r1, #31
 8003aec:	d00e      	beq.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003aee:	9501      	str	r5, [sp, #4]
 8003af0:	9802      	ldr	r0, [sp, #8]
 8003af2:	b280      	uxth	r0, r0
 8003af4:	9000      	str	r0, [sp, #0]
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <.text_7>)
 8003af8:	1823      	adds	r3, r4, r0
 8003afa:	2201      	movs	r2, #1
 8003afc:	2100      	movs	r1, #0
 8003afe:	7c20      	ldrb	r0, [r4, #16]
 8003b00:	f001 fe54 	bl	80057ac <USBPD_PRL_SendMessage>
 8003b04:	2803      	cmp	r0, #3
 8003b06:	d0e7      	beq.n	8003ad8 <PE_Send_SRCCapabilities+0x20>
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	e7fb      	b.n	8003b08 <PE_Send_SRCCapabilities+0x50>

08003b10 <.text_5>:
 8003b10:	20000000 	.word	0x20000000

08003b14 <.text_6>:
 8003b14:	00000267 	.word	0x00000267

08003b18 <.text_7>:
 8003b18:	00000263 	.word	0x00000263

08003b1c <.text_8>:
 8003b1c:	ffffbfff 	.word	0xffffbfff

08003b20 <.text_9>:
 8003b20:	ffffdfff 	.word	0xffffdfff

08003b24 <.text_10>:
 8003b24:	00000265 	.word	0x00000265

08003b28 <PE_StateMachine_VDMCable>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	2502      	movs	r5, #2
 8003b30:	2607      	movs	r6, #7
 8003b32:	7c60      	ldrb	r0, [r4, #17]
 8003b34:	2805      	cmp	r0, #5
 8003b36:	d002      	beq.n	8003b3e <PE_StateMachine_VDMCable+0x16>
 8003b38:	289a      	cmp	r0, #154	; 0x9a
 8003b3a:	d072      	beq.n	8003c22 <PE_StateMachine_VDMCable+0xfa>
 8003b3c:	e127      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003b3e:	6860      	ldr	r0, [r4, #4]
 8003b40:	7800      	ldrb	r0, [r0, #0]
 8003b42:	0781      	lsls	r1, r0, #30
 8003b44:	0f89      	lsrs	r1, r1, #30
 8003b46:	0020      	movs	r0, r4
 8003b48:	f000 fa5e 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003b4c:	2094      	movs	r0, #148	; 0x94
 8003b4e:	0080      	lsls	r0, r0, #2
 8003b50:	5821      	ldr	r1, [r4, r0]
 8003b52:	201f      	movs	r0, #31
 8003b54:	4381      	bics	r1, r0
 8003b56:	488f      	ldr	r0, [pc, #572]	; (8003d94 <.text_3>)
 8003b58:	4308      	orrs	r0, r1
 8003b5a:	2194      	movs	r1, #148	; 0x94
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	5060      	str	r0, [r4, r1]
 8003b60:	6861      	ldr	r1, [r4, #4]
 8003b62:	9100      	str	r1, [sp, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	9a00      	ldr	r2, [sp, #0]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	0953      	lsrs	r3, r2, #5
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	4a8a      	ldr	r2, [pc, #552]	; (8003d98 <.text_4>)
 8003b70:	4002      	ands	r2, r0
 8003b72:	0358      	lsls	r0, r3, #13
 8003b74:	4310      	orrs	r0, r2
 8003b76:	22ff      	movs	r2, #255	; 0xff
 8003b78:	0612      	lsls	r2, r2, #24
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	2094      	movs	r0, #148	; 0x94
 8003b7e:	0080      	lsls	r0, r0, #2
 8003b80:	5022      	str	r2, [r4, r0]
 8003b82:	9800      	ldr	r0, [sp, #0]
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	0880      	lsrs	r0, r0, #2
 8003b88:	4001      	ands	r1, r0
 8003b8a:	d003      	beq.n	8003b94 <PE_StateMachine_VDMCable+0x6c>
 8003b8c:	6960      	ldr	r0, [r4, #20]
 8003b8e:	0741      	lsls	r1, r0, #29
 8003b90:	0fc8      	lsrs	r0, r1, #31
 8003b92:	e000      	b.n	8003b96 <PE_StateMachine_VDMCable+0x6e>
 8003b94:	2002      	movs	r0, #2
 8003b96:	2194      	movs	r1, #148	; 0x94
 8003b98:	0089      	lsls	r1, r1, #2
 8003b9a:	1867      	adds	r7, r4, r1
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	209a      	movs	r0, #154	; 0x9a
 8003ba0:	9001      	str	r0, [sp, #4]
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	9000      	str	r0, [sp, #0]
 8003ba6:	003b      	movs	r3, r7
 8003ba8:	220f      	movs	r2, #15
 8003baa:	2101      	movs	r1, #1
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7fd fcda 	bl	8001566 <PE_Send_DataMessage>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d109      	bne.n	8003bca <PE_StateMachine_VDMCable+0xa2>
 8003bb6:	6960      	ldr	r0, [r4, #20]
 8003bb8:	03e9      	lsls	r1, r5, #15
 8003bba:	4301      	orrs	r1, r0
 8003bbc:	6161      	str	r1, [r4, #20]
 8003bbe:	2051      	movs	r0, #81	; 0x51
 8003bc0:	7720      	strb	r0, [r4, #28]
 8003bc2:	4876      	ldr	r0, [pc, #472]	; (8003d9c <.text_5>)
 8003bc4:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bc6:	251e      	movs	r5, #30
 8003bc8:	e0e1      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003bca:	2809      	cmp	r0, #9
 8003bcc:	d0fc      	beq.n	8003bc8 <PE_StateMachine_VDMCable+0xa0>
 8003bce:	7cb8      	ldrb	r0, [r7, #18]
 8003bd0:	2815      	cmp	r0, #21
 8003bd2:	d202      	bcs.n	8003bda <PE_StateMachine_VDMCable+0xb2>
 8003bd4:	4872      	ldr	r0, [pc, #456]	; (8003da0 <.text_6>)
 8003bd6:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bd8:	e00a      	b.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003bda:	68e0      	ldr	r0, [r4, #12]
 8003bdc:	6940      	ldr	r0, [r0, #20]
 8003bde:	9000      	str	r0, [sp, #0]
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d005      	beq.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2205      	movs	r2, #5
 8003be8:	2101      	movs	r1, #1
 8003bea:	7c20      	ldrb	r0, [r4, #16]
 8003bec:	9f00      	ldr	r7, [sp, #0]
 8003bee:	47b8      	blx	r7
 8003bf0:	6860      	ldr	r0, [r4, #4]
 8003bf2:	6800      	ldr	r0, [r0, #0]
 8003bf4:	0a00      	lsrs	r0, r0, #8
 8003bf6:	4030      	ands	r0, r6
 8003bf8:	2803      	cmp	r0, #3
 8003bfa:	d100      	bne.n	8003bfe <PE_StateMachine_VDMCable+0xd6>
 8003bfc:	e0a4      	b.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003bfe:	4869      	ldr	r0, [pc, #420]	; (8003da4 <.text_7>)
 8003c00:	8be1      	ldrh	r1, [r4, #30]
 8003c02:	4201      	tst	r1, r0
 8003c04:	d00b      	beq.n	8003c1e <PE_StateMachine_VDMCable+0xf6>
 8003c06:	2108      	movs	r1, #8
 8003c08:	7461      	strb	r1, [r4, #17]
 8003c0a:	8be1      	ldrh	r1, [r4, #30]
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	292d      	cmp	r1, #45	; 0x2d
 8003c10:	d203      	bcs.n	8003c1a <PE_StateMachine_VDMCable+0xf2>
 8003c12:	8be1      	ldrh	r1, [r4, #30]
 8003c14:	0005      	movs	r5, r0
 8003c16:	400d      	ands	r5, r1
 8003c18:	e0b9      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1a:	252d      	movs	r5, #45	; 0x2d
 8003c1c:	e0b7      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1e:	7466      	strb	r6, [r4, #17]
 8003c20:	e0b5      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c22:	9101      	str	r1, [sp, #4]
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7fc fecf 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8003c2a:	4669      	mov	r1, sp
 8003c2c:	7008      	strb	r0, [r1, #0]
 8003c2e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003c30:	2700      	movs	r7, #0
 8003c32:	221f      	movs	r2, #31
 8003c34:	9801      	ldr	r0, [sp, #4]
 8003c36:	7800      	ldrb	r0, [r0, #0]
 8003c38:	466b      	mov	r3, sp
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4298      	cmp	r0, r3
 8003c3e:	d14f      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c40:	0bc8      	lsrs	r0, r1, #15
 8003c42:	d14d      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c44:	0b08      	lsrs	r0, r1, #12
 8003c46:	4230      	tst	r0, r6
 8003c48:	d04a      	beq.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	4008      	ands	r0, r1
 8003c4e:	280f      	cmp	r0, #15
 8003c50:	d146      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c54:	7880      	ldrb	r0, [r0, #2]
 8003c56:	9000      	str	r0, [sp, #0]
 8003c58:	4002      	ands	r2, r0
 8003c5a:	2a01      	cmp	r2, #1
 8003c5c:	d13b      	bne.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c5e:	0980      	lsrs	r0, r0, #6
 8003c60:	d039      	beq.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c62:	0608      	lsls	r0, r1, #24
 8003c64:	0f81      	lsrs	r1, r0, #30
 8003c66:	0020      	movs	r0, r4
 8003c68:	f000 f9ce 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003c6c:	68e0      	ldr	r0, [r4, #12]
 8003c6e:	6940      	ldr	r0, [r0, #20]
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d023      	beq.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c74:	9800      	ldr	r0, [sp, #0]
 8003c76:	0985      	lsrs	r5, r0, #6
 8003c78:	07a8      	lsls	r0, r5, #30
 8003c7a:	0f80      	lsrs	r0, r0, #30
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d11d      	bne.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c80:	aa03      	add	r2, sp, #12
 8003c82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c84:	1d81      	adds	r1, r0, #6
 8003c86:	7c20      	ldrb	r0, [r4, #16]
 8003c88:	f001 fb9a 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d111      	bne.n	8003cb4 <PE_StateMachine_VDMCable+0x18c>
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	07aa      	lsls	r2, r5, #30
 8003c94:	0f92      	lsrs	r2, r2, #30
 8003c96:	2101      	movs	r1, #1
 8003c98:	7c20      	ldrb	r0, [r4, #16]
 8003c9a:	68e5      	ldr	r5, [r4, #12]
 8003c9c:	696d      	ldr	r5, [r5, #20]
 8003c9e:	47a8      	blx	r5
 8003ca0:	2152      	movs	r1, #82	; 0x52
 8003ca2:	7c20      	ldrb	r0, [r4, #16]
 8003ca4:	f7fc fbec 	bl	8000480 <USBPD_PE_Notification>
 8003ca8:	2014      	movs	r0, #20
 8003caa:	2194      	movs	r1, #148	; 0x94
 8003cac:	0089      	lsls	r1, r1, #2
 8003cae:	1861      	adds	r1, r4, r1
 8003cb0:	7488      	strb	r0, [r1, #18]
 8003cb2:	e003      	b.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003cb4:	211b      	movs	r1, #27
 8003cb6:	7c20      	ldrb	r0, [r4, #16]
 8003cb8:	f7fc fbe2 	bl	8000480 <USBPD_PE_Notification>
 8003cbc:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cbe:	6860      	ldr	r0, [r4, #4]
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	0a00      	lsrs	r0, r0, #8
 8003cc4:	4030      	ands	r0, r6
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	d102      	bne.n	8003cd0 <PE_StateMachine_VDMCable+0x1a8>
 8003cca:	7460      	strb	r0, [r4, #17]
 8003ccc:	2500      	movs	r5, #0
 8003cce:	e002      	b.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003cd0:	7466      	strb	r6, [r4, #17]
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	7727      	strb	r7, [r4, #28]
 8003cd6:	9801      	ldr	r0, [sp, #4]
 8003cd8:	7800      	ldrb	r0, [r0, #0]
 8003cda:	2814      	cmp	r0, #20
 8003cdc:	d119      	bne.n	8003d12 <PE_StateMachine_VDMCable+0x1ea>
 8003cde:	e056      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	2a10      	cmp	r2, #16
 8003ce6:	d11b      	bne.n	8003d20 <PE_StateMachine_VDMCable+0x1f8>
 8003ce8:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cea:	6861      	ldr	r1, [r4, #4]
 8003cec:	6809      	ldr	r1, [r1, #0]
 8003cee:	0a09      	lsrs	r1, r1, #8
 8003cf0:	4031      	ands	r1, r6
 8003cf2:	2903      	cmp	r1, #3
 8003cf4:	d102      	bne.n	8003cfc <PE_StateMachine_VDMCable+0x1d4>
 8003cf6:	7460      	strb	r0, [r4, #17]
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	e002      	b.n	8003d02 <PE_StateMachine_VDMCable+0x1da>
 8003cfc:	7466      	strb	r6, [r4, #17]
 8003cfe:	2500      	movs	r5, #0
 8003d00:	7727      	strb	r7, [r4, #28]
 8003d02:	2159      	movs	r1, #89	; 0x59
 8003d04:	7c20      	ldrb	r0, [r4, #16]
 8003d06:	f7fc fbbb 	bl	8000480 <USBPD_PE_Notification>
 8003d0a:	9801      	ldr	r0, [sp, #4]
 8003d0c:	7800      	ldrb	r0, [r0, #0]
 8003d0e:	2814      	cmp	r0, #20
 8003d10:	d03d      	beq.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d12:	2014      	movs	r0, #20
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	7008      	strb	r0, [r1, #0]
 8003d18:	0020      	movs	r0, r4
 8003d1a:	f7fc fe1c 	bl	8000956 <PE_Clear_RxEvent>
 8003d1e:	e036      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d20:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003d22:	03aa      	lsls	r2, r5, #14
 8003d24:	4291      	cmp	r1, r2
 8003d26:	d132      	bne.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d28:	8467      	strh	r7, [r4, #34]	; 0x22
 8003d2a:	6861      	ldr	r1, [r4, #4]
 8003d2c:	680a      	ldr	r2, [r1, #0]
 8003d2e:	0a13      	lsrs	r3, r2, #8
 8003d30:	4033      	ands	r3, r6
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d10c      	bne.n	8003d50 <PE_StateMachine_VDMCable+0x228>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	6945      	ldr	r5, [r0, #20]
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	d004      	beq.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2204      	movs	r2, #4
 8003d42:	2101      	movs	r1, #1
 8003d44:	7c20      	ldrb	r0, [r4, #16]
 8003d46:	47a8      	blx	r5
 8003d48:	2003      	movs	r0, #3
 8003d4a:	7460      	strb	r0, [r4, #17]
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	e01e      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d50:	0e93      	lsrs	r3, r2, #26
 8003d52:	4018      	ands	r0, r3
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d10e      	bne.n	8003d76 <PE_StateMachine_VDMCable+0x24e>
 8003d58:	48b7      	ldr	r0, [pc, #732]	; (8004038 <.text_10>)
 8003d5a:	4010      	ands	r0, r2
 8003d5c:	066a      	lsls	r2, r5, #25
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	600a      	str	r2, [r1, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	7c20      	ldrb	r0, [r4, #16]
 8003d66:	f001 fcea 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8003d6a:	480d      	ldr	r0, [pc, #52]	; (8003da0 <.text_6>)
 8003d6c:	8460      	strh	r0, [r4, #34]	; 0x22
 8003d6e:	252d      	movs	r5, #45	; 0x2d
 8003d70:	2008      	movs	r0, #8
 8003d72:	7460      	strb	r0, [r4, #17]
 8003d74:	e00a      	b.n	8003d8c <PE_StateMachine_VDMCable+0x264>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	6945      	ldr	r5, [r0, #20]
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d004      	beq.n	8003d88 <PE_StateMachine_VDMCable+0x260>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2204      	movs	r2, #4
 8003d82:	2101      	movs	r1, #1
 8003d84:	7c20      	ldrb	r0, [r4, #16]
 8003d86:	47a8      	blx	r5
 8003d88:	7466      	strb	r6, [r4, #17]
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	7727      	strb	r7, [r4, #28]
 8003d8e:	0028      	movs	r0, r5
 8003d90:	b00d      	add	sp, #52	; 0x34
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d94 <.text_3>:
 8003d94:	00008001 	.word	0x00008001

08003d98 <.text_4>:
 8003d98:	0000983f 	.word	0x0000983f

08003d9c <.text_5>:
 8003d9c:	0000801e 	.word	0x0000801e

08003da0 <.text_6>:
 8003da0:	0000802d 	.word	0x0000802d

08003da4 <.text_7>:
 8003da4:	00007fff 	.word	0x00007fff

08003da8 <PE_SubStateMachine_VconnSwap>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	0004      	movs	r4, r0
 8003dac:	2502      	movs	r5, #2
 8003dae:	2703      	movs	r7, #3
 8003db0:	4ea2      	ldr	r6, [pc, #648]	; (800403c <.text_11>)
 8003db2:	2014      	movs	r0, #20
 8003db4:	7c62      	ldrb	r2, [r4, #17]
 8003db6:	2a9d      	cmp	r2, #157	; 0x9d
 8003db8:	d010      	beq.n	8003ddc <PE_SubStateMachine_VconnSwap+0x34>
 8003dba:	d30e      	bcc.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dbc:	2a9f      	cmp	r2, #159	; 0x9f
 8003dbe:	d057      	beq.n	8003e70 <PE_SubStateMachine_VconnSwap+0xc8>
 8003dc0:	d33d      	bcc.n	8003e3e <PE_SubStateMachine_VconnSwap+0x96>
 8003dc2:	2aa1      	cmp	r2, #161	; 0xa1
 8003dc4:	d100      	bne.n	8003dc8 <PE_SubStateMachine_VconnSwap+0x20>
 8003dc6:	e085      	b.n	8003ed4 <PE_SubStateMachine_VconnSwap+0x12c>
 8003dc8:	d377      	bcc.n	8003eba <PE_SubStateMachine_VconnSwap+0x112>
 8003dca:	2aa3      	cmp	r2, #163	; 0xa3
 8003dcc:	d100      	bne.n	8003dd0 <PE_SubStateMachine_VconnSwap+0x28>
 8003dce:	e0a3      	b.n	8003f18 <PE_SubStateMachine_VconnSwap+0x170>
 8003dd0:	d200      	bcs.n	8003dd4 <PE_SubStateMachine_VconnSwap+0x2c>
 8003dd2:	e08e      	b.n	8003ef2 <PE_SubStateMachine_VconnSwap+0x14a>
 8003dd4:	2aa4      	cmp	r2, #164	; 0xa4
 8003dd6:	d100      	bne.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dd8:	e106      	b.n	8003fe8 <PE_SubStateMachine_VconnSwap+0x240>
 8003dda:	e113      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ddc:	6860      	ldr	r0, [r4, #4]
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	21b8      	movs	r1, #184	; 0xb8
 8003de2:	0149      	lsls	r1, r1, #5
 8003de4:	4001      	ands	r1, r0
 8003de6:	2098      	movs	r0, #152	; 0x98
 8003de8:	0140      	lsls	r0, r0, #5
 8003dea:	4281      	cmp	r1, r0
 8003dec:	d121      	bne.n	8003e32 <PE_SubStateMachine_VconnSwap+0x8a>
 8003dee:	7c20      	ldrb	r0, [r4, #16]
 8003df0:	68a1      	ldr	r1, [r4, #8]
 8003df2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003df4:	4788      	blx	r1
 8003df6:	280a      	cmp	r0, #10
 8003df8:	d002      	beq.n	8003e00 <PE_SubStateMachine_VconnSwap+0x58>
 8003dfa:	280d      	cmp	r0, #13
 8003dfc:	d007      	beq.n	8003e0e <PE_SubStateMachine_VconnSwap+0x66>
 8003dfe:	e00f      	b.n	8003e20 <PE_SubStateMachine_VconnSwap+0x78>
 8003e00:	209e      	movs	r0, #158	; 0x9e
 8003e02:	7460      	strb	r0, [r4, #17]
 8003e04:	6960      	ldr	r0, [r4, #20]
 8003e06:	02e9      	lsls	r1, r5, #11
 8003e08:	4301      	orrs	r1, r0
 8003e0a:	6161      	str	r1, [r4, #20]
 8003e0c:	e0fa      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	9000      	str	r0, [sp, #0]
 8003e12:	2303      	movs	r3, #3
 8003e14:	220c      	movs	r2, #12
 8003e16:	2100      	movs	r1, #0
 8003e18:	0020      	movs	r0, r4
 8003e1a:	f7fd fb79 	bl	8001510 <PE_Send_CtrlMessage>
 8003e1e:	e0f1      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e20:	2000      	movs	r0, #0
 8003e22:	9000      	str	r0, [sp, #0]
 8003e24:	2303      	movs	r3, #3
 8003e26:	2204      	movs	r2, #4
 8003e28:	2100      	movs	r1, #0
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	f7fd fb70 	bl	8001510 <PE_Send_CtrlMessage>
 8003e30:	e002      	b.n	8003e38 <PE_SubStateMachine_VconnSwap+0x90>
 8003e32:	6960      	ldr	r0, [r4, #20]
 8003e34:	4006      	ands	r6, r0
 8003e36:	6166      	str	r6, [r4, #20]
 8003e38:	7467      	strb	r7, [r4, #17]
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	e0e2      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	9000      	str	r0, [sp, #0]
 8003e42:	239e      	movs	r3, #158	; 0x9e
 8003e44:	2203      	movs	r2, #3
 8003e46:	2100      	movs	r1, #0
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f7fd fb61 	bl	8001510 <PE_Send_CtrlMessage>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d1f4      	bne.n	8003e3c <PE_SubStateMachine_VconnSwap+0x94>
 8003e52:	6860      	ldr	r0, [r4, #4]
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	0401      	lsls	r1, r0, #16
 8003e58:	0fc9      	lsrs	r1, r1, #31
 8003e5a:	d005      	beq.n	8003e68 <PE_SubStateMachine_VconnSwap+0xc0>
 8003e5c:	209f      	movs	r0, #159	; 0x9f
 8003e5e:	7460      	strb	r0, [r4, #17]
 8003e60:	4877      	ldr	r0, [pc, #476]	; (8004040 <.text_12>)
 8003e62:	83e0      	strh	r0, [r4, #30]
 8003e64:	2596      	movs	r5, #150	; 0x96
 8003e66:	e001      	b.n	8003e6c <PE_SubStateMachine_VconnSwap+0xc4>
 8003e68:	20a0      	movs	r0, #160	; 0xa0
 8003e6a:	7460      	strb	r0, [r4, #17]
 8003e6c:	213f      	movs	r1, #63	; 0x3f
 8003e6e:	e0b7      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003e70:	8be2      	ldrh	r2, [r4, #30]
 8003e72:	03ab      	lsls	r3, r5, #14
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d100      	bne.n	8003e7a <PE_SubStateMachine_VconnSwap+0xd2>
 8003e78:	e0ac      	b.n	8003fd4 <PE_SubStateMachine_VconnSwap+0x22c>
 8003e7a:	780a      	ldrb	r2, [r1, #0]
 8003e7c:	2a11      	cmp	r2, #17
 8003e7e:	d11b      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e80:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003e82:	4b70      	ldr	r3, [pc, #448]	; (8004044 <.text_13>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d116      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e8a:	7008      	strb	r0, [r1, #0]
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fc fd62 	bl	8000956 <PE_Clear_RxEvent>
 8003e92:	68a0      	ldr	r0, [r4, #8]
 8003e94:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d002      	beq.n	8003ea0 <PE_SubStateMachine_VconnSwap+0xf8>
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	7c20      	ldrb	r0, [r4, #16]
 8003e9e:	4790      	blx	r2
 8003ea0:	6960      	ldr	r0, [r4, #20]
 8003ea2:	4006      	ands	r6, r0
 8003ea4:	6166      	str	r6, [r4, #20]
 8003ea6:	7467      	strb	r7, [r4, #17]
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	2142      	movs	r1, #66	; 0x42
 8003eac:	7c20      	ldrb	r0, [r4, #16]
 8003eae:	f7fc fae7 	bl	8000480 <USBPD_PE_Notification>
 8003eb2:	8465      	strh	r5, [r4, #34]	; 0x22
 8003eb4:	4964      	ldr	r1, [pc, #400]	; (8004048 <.text_14>)
 8003eb6:	5465      	strb	r5, [r4, r1]
 8003eb8:	e0a4      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003eba:	68a0      	ldr	r0, [r4, #8]
 8003ebc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d002      	beq.n	8003ec8 <PE_SubStateMachine_VconnSwap+0x120>
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	7c20      	ldrb	r0, [r4, #16]
 8003ec6:	4790      	blx	r2
 8003ec8:	20a1      	movs	r0, #161	; 0xa1
 8003eca:	7460      	strb	r0, [r4, #17]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	495e      	ldr	r1, [pc, #376]	; (8004048 <.text_14>)
 8003ed0:	5460      	strb	r0, [r4, r1]
 8003ed2:	e097      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	9000      	str	r0, [sp, #0]
 8003ed8:	2303      	movs	r3, #3
 8003eda:	2206      	movs	r2, #6
 8003edc:	2100      	movs	r1, #0
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f7fd fb16 	bl	8001510 <PE_Send_CtrlMessage>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1f4      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003ee8:	6960      	ldr	r0, [r4, #20]
 8003eea:	4006      	ands	r6, r0
 8003eec:	6166      	str	r6, [r4, #20]
 8003eee:	2142      	movs	r1, #66	; 0x42
 8003ef0:	e076      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	9000      	str	r0, [sp, #0]
 8003ef6:	23a3      	movs	r3, #163	; 0xa3
 8003ef8:	220b      	movs	r2, #11
 8003efa:	2100      	movs	r1, #0
 8003efc:	0020      	movs	r0, r4
 8003efe:	f7fd fb07 	bl	8001510 <PE_Send_CtrlMessage>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1e5      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003f06:	6960      	ldr	r0, [r4, #20]
 8003f08:	02e9      	lsls	r1, r5, #11
 8003f0a:	4301      	orrs	r1, r0
 8003f0c:	6161      	str	r1, [r4, #20]
 8003f0e:	484f      	ldr	r0, [pc, #316]	; (800404c <.text_15>)
 8003f10:	83e0      	strh	r0, [r4, #30]
 8003f12:	251b      	movs	r5, #27
 8003f14:	213e      	movs	r1, #62	; 0x3e
 8003f16:	e063      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003f18:	780a      	ldrb	r2, [r1, #0]
 8003f1a:	2a11      	cmp	r2, #17
 8003f1c:	d155      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f1e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003f20:	23f0      	movs	r3, #240	; 0xf0
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d150      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f28:	06d2      	lsls	r2, r2, #27
 8003f2a:	0ed2      	lsrs	r2, r2, #27
 8003f2c:	2a03      	cmp	r2, #3
 8003f2e:	d006      	beq.n	8003f3e <PE_SubStateMachine_VconnSwap+0x196>
 8003f30:	2a04      	cmp	r2, #4
 8003f32:	d024      	beq.n	8003f7e <PE_SubStateMachine_VconnSwap+0x1d6>
 8003f34:	2a0c      	cmp	r2, #12
 8003f36:	d014      	beq.n	8003f62 <PE_SubStateMachine_VconnSwap+0x1ba>
 8003f38:	2a10      	cmp	r2, #16
 8003f3a:	d02e      	beq.n	8003f9a <PE_SubStateMachine_VconnSwap+0x1f2>
 8003f3c:	e045      	b.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	0413      	lsls	r3, r2, #16
 8003f44:	0fdb      	lsrs	r3, r3, #31
 8003f46:	d001      	beq.n	8003f4c <PE_SubStateMachine_VconnSwap+0x1a4>
 8003f48:	229f      	movs	r2, #159	; 0x9f
 8003f4a:	e000      	b.n	8003f4e <PE_SubStateMachine_VconnSwap+0x1a6>
 8003f4c:	22a0      	movs	r2, #160	; 0xa0
 8003f4e:	7462      	strb	r2, [r4, #17]
 8003f50:	780a      	ldrb	r2, [r1, #0]
 8003f52:	2a14      	cmp	r2, #20
 8003f54:	d003      	beq.n	8003f5e <PE_SubStateMachine_VconnSwap+0x1b6>
 8003f56:	7008      	strb	r0, [r1, #0]
 8003f58:	0020      	movs	r0, r4
 8003f5a:	f7fc fcfc 	bl	8000956 <PE_Clear_RxEvent>
 8003f5e:	213f      	movs	r1, #63	; 0x3f
 8003f60:	e030      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f62:	6962      	ldr	r2, [r4, #20]
 8003f64:	4032      	ands	r2, r6
 8003f66:	6162      	str	r2, [r4, #20]
 8003f68:	7467      	strb	r7, [r4, #17]
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	780a      	ldrb	r2, [r1, #0]
 8003f6e:	2a14      	cmp	r2, #20
 8003f70:	d003      	beq.n	8003f7a <PE_SubStateMachine_VconnSwap+0x1d2>
 8003f72:	7008      	strb	r0, [r1, #0]
 8003f74:	0020      	movs	r0, r4
 8003f76:	f7fc fcee 	bl	8000956 <PE_Clear_RxEvent>
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	e022      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f7e:	6962      	ldr	r2, [r4, #20]
 8003f80:	4032      	ands	r2, r6
 8003f82:	6162      	str	r2, [r4, #20]
 8003f84:	7467      	strb	r7, [r4, #17]
 8003f86:	2500      	movs	r5, #0
 8003f88:	780a      	ldrb	r2, [r1, #0]
 8003f8a:	2a14      	cmp	r2, #20
 8003f8c:	d003      	beq.n	8003f96 <PE_SubStateMachine_VconnSwap+0x1ee>
 8003f8e:	7008      	strb	r0, [r1, #0]
 8003f90:	0020      	movs	r0, r4
 8003f92:	f7fc fce0 	bl	8000956 <PE_Clear_RxEvent>
 8003f96:	2141      	movs	r1, #65	; 0x41
 8003f98:	e014      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	0413      	lsls	r3, r2, #16
 8003fa0:	0fdb      	lsrs	r3, r3, #31
 8003fa2:	d102      	bne.n	8003faa <PE_SubStateMachine_VconnSwap+0x202>
 8003fa4:	22a4      	movs	r2, #164	; 0xa4
 8003fa6:	7462      	strb	r2, [r4, #17]
 8003fa8:	e004      	b.n	8003fb4 <PE_SubStateMachine_VconnSwap+0x20c>
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	4032      	ands	r2, r6
 8003fae:	6162      	str	r2, [r4, #20]
 8003fb0:	7467      	strb	r7, [r4, #17]
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	780a      	ldrb	r2, [r1, #0]
 8003fb6:	2a14      	cmp	r2, #20
 8003fb8:	d003      	beq.n	8003fc2 <PE_SubStateMachine_VconnSwap+0x21a>
 8003fba:	7008      	strb	r0, [r1, #0]
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f7fc fcca 	bl	8000956 <PE_Clear_RxEvent>
 8003fc2:	2143      	movs	r1, #67	; 0x43
 8003fc4:	7c20      	ldrb	r0, [r4, #16]
 8003fc6:	f7fc fa5b 	bl	8000480 <USBPD_PE_Notification>
 8003fca:	8be0      	ldrh	r0, [r4, #30]
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	0209      	lsls	r1, r1, #8
 8003fd0:	4288      	cmp	r0, r1
 8003fd2:	d117      	bne.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fd4:	6960      	ldr	r0, [r4, #20]
 8003fd6:	4006      	ands	r6, r0
 8003fd8:	6166      	str	r6, [r4, #20]
 8003fda:	7467      	strb	r7, [r4, #17]
 8003fdc:	2500      	movs	r5, #0
 8003fde:	211c      	movs	r1, #28
 8003fe0:	7c20      	ldrb	r0, [r4, #16]
 8003fe2:	f7fc fa4d 	bl	8000480 <USBPD_PE_Notification>
 8003fe6:	e00d      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fe8:	68a0      	ldr	r0, [r4, #8]
 8003fea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	d002      	beq.n	8003ff6 <PE_SubStateMachine_VconnSwap+0x24e>
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	7c20      	ldrb	r0, [r4, #16]
 8003ff4:	4790      	blx	r2
 8003ff6:	6960      	ldr	r0, [r4, #20]
 8003ff8:	4006      	ands	r6, r0
 8003ffa:	6166      	str	r6, [r4, #20]
 8003ffc:	7467      	strb	r7, [r4, #17]
 8003ffe:	2500      	movs	r5, #0
 8004000:	4813      	ldr	r0, [pc, #76]	; (8004050 <.text_16>)
 8004002:	8460      	strh	r0, [r4, #34]	; 0x22
 8004004:	0028      	movs	r0, r5
 8004006:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004008 <PE_ExtRevisionInteroperability_Cable>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	000a      	movs	r2, r1
 800400c:	6843      	ldr	r3, [r0, #4]
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	2103      	movs	r1, #3
 8004012:	2503      	movs	r5, #3
 8004014:	4025      	ands	r5, r4
 8004016:	42aa      	cmp	r2, r5
 8004018:	d300      	bcc.n	800401c <PE_ExtRevisionInteroperability_Cable+0x14>
 800401a:	002a      	movs	r2, r5
 800401c:	4d06      	ldr	r5, [pc, #24]	; (8004038 <.text_10>)
 800401e:	4025      	ands	r5, r4
 8004020:	0694      	lsls	r4, r2, #26
 8004022:	068a      	lsls	r2, r1, #26
 8004024:	4022      	ands	r2, r4
 8004026:	432a      	orrs	r2, r5
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	0e92      	lsrs	r2, r2, #26
 800402c:	4011      	ands	r1, r2
 800402e:	7c00      	ldrb	r0, [r0, #16]
 8004030:	f001 fb85 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8004034:	bd31      	pop	{r0, r4, r5, pc}
	...

08004038 <.text_10>:
 8004038:	f3ffffff 	.word	0xf3ffffff

0800403c <.text_11>:
 800403c:	ffffefff 	.word	0xffffefff

08004040 <.text_12>:
 8004040:	00008096 	.word	0x00008096

08004044 <.text_13>:
 8004044:	0000f01f 	.word	0x0000f01f

08004048 <.text_14>:
 8004048:	00000262 	.word	0x00000262

0800404c <.text_15>:
 800404c:	0000801b 	.word	0x0000801b

08004050 <.text_16>:
 8004050:	0000802d 	.word	0x0000802d

08004054 <USBPD_PE_SVDM_RequestIdentity>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	000a      	movs	r2, r1
 8004058:	49aa      	ldr	r1, [pc, #680]	; (8004304 <.text_8>)
 800405a:	0083      	lsls	r3, r0, #2
 800405c:	58cb      	ldr	r3, [r1, r3]
 800405e:	2110      	movs	r1, #16
 8004060:	2401      	movs	r4, #1
 8004062:	681d      	ldr	r5, [r3, #0]
 8004064:	686d      	ldr	r5, [r5, #4]
 8004066:	0a6d      	lsrs	r5, r5, #9
 8004068:	4025      	ands	r5, r4
 800406a:	d004      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 800406c:	68dd      	ldr	r5, [r3, #12]
 800406e:	2d00      	cmp	r5, #0
 8004070:	d001      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 8004072:	2a02      	cmp	r2, #2
 8004074:	d101      	bne.n	800407a <USBPD_PE_SVDM_RequestIdentity+0x26>
 8004076:	2102      	movs	r1, #2
 8004078:	e02d      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 800407a:	2532      	movs	r5, #50	; 0x32
 800407c:	5d5d      	ldrb	r5, [r3, r5]
 800407e:	2d00      	cmp	r5, #0
 8004080:	d104      	bne.n	800408c <USBPD_PE_SVDM_RequestIdentity+0x38>
 8004082:	685d      	ldr	r5, [r3, #4]
 8004084:	682d      	ldr	r5, [r5, #0]
 8004086:	0b2d      	lsrs	r5, r5, #12
 8004088:	402c      	ands	r4, r5
 800408a:	d101      	bne.n	8004090 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 800408c:	2103      	movs	r1, #3
 800408e:	e022      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004090:	2433      	movs	r4, #51	; 0x33
 8004092:	551a      	strb	r2, [r3, r4]
 8004094:	2507      	movs	r5, #7
 8004096:	2a00      	cmp	r2, #0
 8004098:	d002      	beq.n	80040a0 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 800409a:	2a01      	cmp	r2, #1
 800409c:	d008      	beq.n	80040b0 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 800409e:	e01a      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	4015      	ands	r5, r2
 80040a8:	2d03      	cmp	r5, #3
 80040aa:	d114      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040ac:	217d      	movs	r1, #125	; 0x7d
 80040ae:	e00c      	b.n	80040ca <USBPD_PE_SVDM_RequestIdentity+0x76>
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4eab      	ldr	r6, [pc, #684]	; (8004364 <.text_10>)
 80040b6:	4016      	ands	r6, r2
 80040b8:	2782      	movs	r7, #130	; 0x82
 80040ba:	007f      	lsls	r7, r7, #1
 80040bc:	42be      	cmp	r6, r7
 80040be:	d003      	beq.n	80040c8 <USBPD_PE_SVDM_RequestIdentity+0x74>
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	4015      	ands	r5, r2
 80040c4:	2d03      	cmp	r5, #3
 80040c6:	d106      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040c8:	2105      	movs	r1, #5
 80040ca:	2232      	movs	r2, #50	; 0x32
 80040cc:	5499      	strb	r1, [r3, r2]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80040d2:	4788      	blx	r1
 80040d4:	2100      	movs	r1, #0
 80040d6:	0008      	movs	r0, r1
 80040d8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080040da <USBPD_PE_SVDM_RequestSVID>:
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	000a      	movs	r2, r1
 80040de:	4989      	ldr	r1, [pc, #548]	; (8004304 <.text_8>)
 80040e0:	0083      	lsls	r3, r0, #2
 80040e2:	58cb      	ldr	r3, [r1, r3]
 80040e4:	2110      	movs	r1, #16
 80040e6:	68dc      	ldr	r4, [r3, #12]
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	d001      	beq.n	80040f0 <USBPD_PE_SVDM_RequestSVID+0x16>
 80040ec:	2a02      	cmp	r2, #2
 80040ee:	d101      	bne.n	80040f4 <USBPD_PE_SVDM_RequestSVID+0x1a>
 80040f0:	2102      	movs	r1, #2
 80040f2:	e020      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80040f4:	2432      	movs	r4, #50	; 0x32
 80040f6:	5d1c      	ldrb	r4, [r3, r4]
 80040f8:	2c00      	cmp	r4, #0
 80040fa:	d105      	bne.n	8004108 <USBPD_PE_SVDM_RequestSVID+0x2e>
 80040fc:	685c      	ldr	r4, [r3, #4]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	2401      	movs	r4, #1
 8004102:	0b2e      	lsrs	r6, r5, #12
 8004104:	4026      	ands	r6, r4
 8004106:	d101      	bne.n	800410c <USBPD_PE_SVDM_RequestSVID+0x32>
 8004108:	2103      	movs	r1, #3
 800410a:	e014      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800410c:	056d      	lsls	r5, r5, #21
 800410e:	0f6d      	lsrs	r5, r5, #29
 8004110:	2d03      	cmp	r5, #3
 8004112:	d110      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004114:	2533      	movs	r5, #51	; 0x33
 8004116:	555a      	strb	r2, [r3, r5]
 8004118:	257f      	movs	r5, #127	; 0x7f
 800411a:	2632      	movs	r6, #50	; 0x32
 800411c:	559d      	strb	r5, [r3, r6]
 800411e:	2a00      	cmp	r2, #0
 8004120:	d005      	beq.n	800412e <USBPD_PE_SVDM_RequestSVID+0x54>
 8004122:	2a01      	cmp	r2, #1
 8004124:	d107      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	0c12      	lsrs	r2, r2, #16
 800412a:	4014      	ands	r4, r2
 800412c:	d003      	beq.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800412e:	6899      	ldr	r1, [r3, #8]
 8004130:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004132:	4788      	blx	r1
 8004134:	2100      	movs	r1, #0
 8004136:	0008      	movs	r0, r1
 8004138:	bd70      	pop	{r4, r5, r6, pc}

0800413a <USBPD_PE_SVDM_RequestMode>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	000b      	movs	r3, r1
 800413e:	4971      	ldr	r1, [pc, #452]	; (8004304 <.text_8>)
 8004140:	0084      	lsls	r4, r0, #2
 8004142:	590c      	ldr	r4, [r1, r4]
 8004144:	2110      	movs	r1, #16
 8004146:	68e5      	ldr	r5, [r4, #12]
 8004148:	2d00      	cmp	r5, #0
 800414a:	d001      	beq.n	8004150 <USBPD_PE_SVDM_RequestMode+0x16>
 800414c:	2b02      	cmp	r3, #2
 800414e:	d101      	bne.n	8004154 <USBPD_PE_SVDM_RequestMode+0x1a>
 8004150:	2102      	movs	r1, #2
 8004152:	e023      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004154:	2532      	movs	r5, #50	; 0x32
 8004156:	5d65      	ldrb	r5, [r4, r5]
 8004158:	2d00      	cmp	r5, #0
 800415a:	d105      	bne.n	8004168 <USBPD_PE_SVDM_RequestMode+0x2e>
 800415c:	6865      	ldr	r5, [r4, #4]
 800415e:	682e      	ldr	r6, [r5, #0]
 8004160:	2501      	movs	r5, #1
 8004162:	0b37      	lsrs	r7, r6, #12
 8004164:	402f      	ands	r7, r5
 8004166:	d101      	bne.n	800416c <USBPD_PE_SVDM_RequestMode+0x32>
 8004168:	2103      	movs	r1, #3
 800416a:	e017      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800416c:	0576      	lsls	r6, r6, #21
 800416e:	0f76      	lsrs	r6, r6, #29
 8004170:	2e03      	cmp	r6, #3
 8004172:	d113      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004174:	2633      	movs	r6, #51	; 0x33
 8004176:	55a3      	strb	r3, [r4, r6]
 8004178:	2681      	movs	r6, #129	; 0x81
 800417a:	2732      	movs	r7, #50	; 0x32
 800417c:	55e6      	strb	r6, [r4, r7]
 800417e:	2696      	movs	r6, #150	; 0x96
 8004180:	00b6      	lsls	r6, r6, #2
 8004182:	53a2      	strh	r2, [r4, r6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USBPD_PE_SVDM_RequestMode+0x5a>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800418c:	6962      	ldr	r2, [r4, #20]
 800418e:	0c12      	lsrs	r2, r2, #16
 8004190:	4015      	ands	r5, r2
 8004192:	d003      	beq.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004198:	4788      	blx	r1
 800419a:	2100      	movs	r1, #0
 800419c:	0008      	movs	r0, r1
 800419e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080041a0 <USBPD_PE_SVDM_RequestModeEnter>:
 80041a0:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80041a2:	4858      	ldr	r0, [pc, #352]	; (8004304 <.text_8>)
 80041a4:	466c      	mov	r4, sp
 80041a6:	7824      	ldrb	r4, [r4, #0]
 80041a8:	00a4      	lsls	r4, r4, #2
 80041aa:	5904      	ldr	r4, [r0, r4]
 80041ac:	2010      	movs	r0, #16
 80041ae:	68e5      	ldr	r5, [r4, #12]
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	d101      	bne.n	80041b8 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 80041b4:	2002      	movs	r0, #2
 80041b6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041b8:	2532      	movs	r5, #50	; 0x32
 80041ba:	5d65      	ldrb	r5, [r4, r5]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d105      	bne.n	80041cc <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 80041c0:	6865      	ldr	r5, [r4, #4]
 80041c2:	682e      	ldr	r6, [r5, #0]
 80041c4:	2501      	movs	r5, #1
 80041c6:	0b37      	lsrs	r7, r6, #12
 80041c8:	402f      	ands	r7, r5
 80041ca:	d101      	bne.n	80041d0 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 80041cc:	2003      	movs	r0, #3
 80041ce:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041d0:	27e1      	movs	r7, #225	; 0xe1
 80041d2:	00ff      	lsls	r7, r7, #3
 80041d4:	4037      	ands	r7, r6
 80041d6:	26c2      	movs	r6, #194	; 0xc2
 80041d8:	00b6      	lsls	r6, r6, #2
 80041da:	42b7      	cmp	r7, r6
 80041dc:	d11e      	bne.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80041de:	2633      	movs	r6, #51	; 0x33
 80041e0:	55a1      	strb	r1, [r4, r6]
 80041e2:	2682      	movs	r6, #130	; 0x82
 80041e4:	2732      	movs	r7, #50	; 0x32
 80041e6:	55e6      	strb	r6, [r4, r7]
 80041e8:	2696      	movs	r6, #150	; 0x96
 80041ea:	00b6      	lsls	r6, r6, #2
 80041ec:	53a2      	strh	r2, [r4, r6]
 80041ee:	6966      	ldr	r6, [r4, #20]
 80041f0:	4aaf      	ldr	r2, [pc, #700]	; (80044b0 <.text_13>)
 80041f2:	4032      	ands	r2, r6
 80041f4:	019e      	lsls	r6, r3, #6
 80041f6:	23e0      	movs	r3, #224	; 0xe0
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4033      	ands	r3, r6
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6163      	str	r3, [r4, #20]
 8004200:	2900      	cmp	r1, #0
 8004202:	d005      	beq.n	8004210 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 8004204:	2902      	cmp	r1, #2
 8004206:	d000      	beq.n	800420a <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004208:	d208      	bcs.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 800420a:	0c19      	lsrs	r1, r3, #16
 800420c:	400d      	ands	r5, r1
 800420e:	d005      	beq.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004210:	4668      	mov	r0, sp
 8004212:	7800      	ldrb	r0, [r0, #0]
 8004214:	68a1      	ldr	r1, [r4, #8]
 8004216:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004218:	4788      	blx	r1
 800421a:	2000      	movs	r0, #0
 800421c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800421e <USBPD_PE_SVDM_RequestModeExit>:
 800421e:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004220:	4838      	ldr	r0, [pc, #224]	; (8004304 <.text_8>)
 8004222:	466c      	mov	r4, sp
 8004224:	7824      	ldrb	r4, [r4, #0]
 8004226:	00a4      	lsls	r4, r4, #2
 8004228:	5904      	ldr	r4, [r0, r4]
 800422a:	2010      	movs	r0, #16
 800422c:	68e5      	ldr	r5, [r4, #12]
 800422e:	2d00      	cmp	r5, #0
 8004230:	d101      	bne.n	8004236 <USBPD_PE_SVDM_RequestModeExit+0x18>
 8004232:	2002      	movs	r0, #2
 8004234:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004236:	2532      	movs	r5, #50	; 0x32
 8004238:	5d65      	ldrb	r5, [r4, r5]
 800423a:	2d00      	cmp	r5, #0
 800423c:	d105      	bne.n	800424a <USBPD_PE_SVDM_RequestModeExit+0x2c>
 800423e:	6865      	ldr	r5, [r4, #4]
 8004240:	682e      	ldr	r6, [r5, #0]
 8004242:	2501      	movs	r5, #1
 8004244:	0b37      	lsrs	r7, r6, #12
 8004246:	402f      	ands	r7, r5
 8004248:	d101      	bne.n	800424e <USBPD_PE_SVDM_RequestModeExit+0x30>
 800424a:	2003      	movs	r0, #3
 800424c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800424e:	27e1      	movs	r7, #225	; 0xe1
 8004250:	00ff      	lsls	r7, r7, #3
 8004252:	4037      	ands	r7, r6
 8004254:	26c2      	movs	r6, #194	; 0xc2
 8004256:	00b6      	lsls	r6, r6, #2
 8004258:	42b7      	cmp	r7, r6
 800425a:	d11e      	bne.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800425c:	2633      	movs	r6, #51	; 0x33
 800425e:	55a1      	strb	r1, [r4, r6]
 8004260:	2683      	movs	r6, #131	; 0x83
 8004262:	2732      	movs	r7, #50	; 0x32
 8004264:	55e6      	strb	r6, [r4, r7]
 8004266:	2696      	movs	r6, #150	; 0x96
 8004268:	00b6      	lsls	r6, r6, #2
 800426a:	53a2      	strh	r2, [r4, r6]
 800426c:	6966      	ldr	r6, [r4, #20]
 800426e:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <.text_13>)
 8004270:	4032      	ands	r2, r6
 8004272:	019e      	lsls	r6, r3, #6
 8004274:	23e0      	movs	r3, #224	; 0xe0
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4033      	ands	r3, r6
 800427a:	4313      	orrs	r3, r2
 800427c:	6163      	str	r3, [r4, #20]
 800427e:	2900      	cmp	r1, #0
 8004280:	d005      	beq.n	800428e <USBPD_PE_SVDM_RequestModeExit+0x70>
 8004282:	2902      	cmp	r1, #2
 8004284:	d000      	beq.n	8004288 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 8004286:	d208      	bcs.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004288:	0c19      	lsrs	r1, r3, #16
 800428a:	400d      	ands	r5, r1
 800428c:	d005      	beq.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800428e:	4668      	mov	r0, sp
 8004290:	7800      	ldrb	r0, [r0, #0]
 8004292:	68a1      	ldr	r1, [r4, #8]
 8004294:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004296:	4788      	blx	r1
 8004298:	2000      	movs	r0, #0
 800429a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800429c <USBPD_PE_SVDM_RequestSpecific>:
 800429c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800429e:	4819      	ldr	r0, [pc, #100]	; (8004304 <.text_8>)
 80042a0:	466c      	mov	r4, sp
 80042a2:	7824      	ldrb	r4, [r4, #0]
 80042a4:	00a4      	lsls	r4, r4, #2
 80042a6:	5904      	ldr	r4, [r0, r4]
 80042a8:	2010      	movs	r0, #16
 80042aa:	68e5      	ldr	r5, [r4, #12]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d101      	bne.n	80042b4 <USBPD_PE_SVDM_RequestSpecific+0x18>
 80042b0:	2002      	movs	r0, #2
 80042b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042b4:	2532      	movs	r5, #50	; 0x32
 80042b6:	5d65      	ldrb	r5, [r4, r5]
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d105      	bne.n	80042c8 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 80042bc:	6865      	ldr	r5, [r4, #4]
 80042be:	682d      	ldr	r5, [r5, #0]
 80042c0:	2601      	movs	r6, #1
 80042c2:	0b2f      	lsrs	r7, r5, #12
 80042c4:	4037      	ands	r7, r6
 80042c6:	d101      	bne.n	80042cc <USBPD_PE_SVDM_RequestSpecific+0x30>
 80042c8:	2003      	movs	r0, #3
 80042ca:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042cc:	6967      	ldr	r7, [r4, #20]
 80042ce:	0c3f      	lsrs	r7, r7, #16
 80042d0:	403e      	ands	r6, r7
 80042d2:	d101      	bne.n	80042d8 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 80042d4:	000e      	movs	r6, r1
 80042d6:	d113      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042d8:	056d      	lsls	r5, r5, #21
 80042da:	0f6d      	lsrs	r5, r5, #29
 80042dc:	2d03      	cmp	r5, #3
 80042de:	d10f      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042e0:	2033      	movs	r0, #51	; 0x33
 80042e2:	5421      	strb	r1, [r4, r0]
 80042e4:	2085      	movs	r0, #133	; 0x85
 80042e6:	2132      	movs	r1, #50	; 0x32
 80042e8:	5460      	strb	r0, [r4, r1]
 80042ea:	2095      	movs	r0, #149	; 0x95
 80042ec:	0080      	lsls	r0, r0, #2
 80042ee:	1820      	adds	r0, r4, r0
 80042f0:	6002      	str	r2, [r0, #0]
 80042f2:	8083      	strh	r3, [r0, #4]
 80042f4:	4668      	mov	r0, sp
 80042f6:	7800      	ldrb	r0, [r0, #0]
 80042f8:	68a1      	ldr	r1, [r4, #8]
 80042fa:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80042fc:	4788      	blx	r1
 80042fe:	2000      	movs	r0, #0
 8004300:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08004304 <.text_8>:
 8004304:	20000304 	.word	0x20000304

08004308 <USBPD_PE_SVDM_RequestAttention>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	000b      	movs	r3, r1
 800430c:	4969      	ldr	r1, [pc, #420]	; (80044b4 <.text_14>)
 800430e:	0084      	lsls	r4, r0, #2
 8004310:	590d      	ldr	r5, [r1, r4]
 8004312:	2110      	movs	r1, #16
 8004314:	68ec      	ldr	r4, [r5, #12]
 8004316:	2c00      	cmp	r4, #0
 8004318:	d001      	beq.n	800431e <USBPD_PE_SVDM_RequestAttention+0x16>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <USBPD_PE_SVDM_RequestAttention+0x1a>
 800431e:	2102      	movs	r1, #2
 8004320:	e01e      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004322:	2332      	movs	r3, #50	; 0x32
 8004324:	5ceb      	ldrb	r3, [r5, r3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <USBPD_PE_SVDM_RequestAttention+0x2c>
 800432a:	686b      	ldr	r3, [r5, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	04dc      	lsls	r4, r3, #19
 8004330:	0fe4      	lsrs	r4, r4, #31
 8004332:	d101      	bne.n	8004338 <USBPD_PE_SVDM_RequestAttention+0x30>
 8004334:	2103      	movs	r1, #3
 8004336:	e013      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004338:	055b      	lsls	r3, r3, #21
 800433a:	0f5b      	lsrs	r3, r3, #29
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10f      	bne.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004340:	2400      	movs	r4, #0
 8004342:	2333      	movs	r3, #51	; 0x33
 8004344:	54ec      	strb	r4, [r5, r3]
 8004346:	2184      	movs	r1, #132	; 0x84
 8004348:	2332      	movs	r3, #50	; 0x32
 800434a:	54e9      	strb	r1, [r5, r3]
 800434c:	2195      	movs	r1, #149	; 0x95
 800434e:	0089      	lsls	r1, r1, #2
 8004350:	1869      	adds	r1, r5, r1
 8004352:	2306      	movs	r3, #6
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	808a      	strh	r2, [r1, #4]
 8004358:	68a9      	ldr	r1, [r5, #8]
 800435a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800435c:	4788      	blx	r1
 800435e:	2100      	movs	r1, #0
 8004360:	0008      	movs	r0, r1
 8004362:	bd32      	pop	{r1, r4, r5, pc}

08004364 <.text_10>:
 8004364:	00000704 	.word	0x00000704

08004368 <USBPD_PE_UVDM_RequestMessage>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	000a      	movs	r2, r1
 800436c:	4951      	ldr	r1, [pc, #324]	; (80044b4 <.text_14>)
 800436e:	0083      	lsls	r3, r0, #2
 8004370:	58cb      	ldr	r3, [r1, r3]
 8004372:	2110      	movs	r1, #16
 8004374:	68dc      	ldr	r4, [r3, #12]
 8004376:	2c00      	cmp	r4, #0
 8004378:	d101      	bne.n	800437e <USBPD_PE_UVDM_RequestMessage+0x16>
 800437a:	2102      	movs	r1, #2
 800437c:	e01d      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 800437e:	2432      	movs	r4, #50	; 0x32
 8004380:	5d1c      	ldrb	r4, [r3, r4]
 8004382:	2c00      	cmp	r4, #0
 8004384:	d105      	bne.n	8004392 <USBPD_PE_UVDM_RequestMessage+0x2a>
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	6824      	ldr	r4, [r4, #0]
 800438a:	2501      	movs	r5, #1
 800438c:	0b26      	lsrs	r6, r4, #12
 800438e:	402e      	ands	r6, r5
 8004390:	d101      	bne.n	8004396 <USBPD_PE_UVDM_RequestMessage+0x2e>
 8004392:	2103      	movs	r1, #3
 8004394:	e011      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 8004396:	0be6      	lsrs	r6, r4, #15
 8004398:	4035      	ands	r5, r6
 800439a:	d101      	bne.n	80043a0 <USBPD_PE_UVDM_RequestMessage+0x38>
 800439c:	0015      	movs	r5, r2
 800439e:	d10c      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a0:	0564      	lsls	r4, r4, #21
 80043a2:	0f64      	lsrs	r4, r4, #29
 80043a4:	2c03      	cmp	r4, #3
 80043a6:	d108      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a8:	2133      	movs	r1, #51	; 0x33
 80043aa:	545a      	strb	r2, [r3, r1]
 80043ac:	2186      	movs	r1, #134	; 0x86
 80043ae:	2232      	movs	r2, #50	; 0x32
 80043b0:	5499      	strb	r1, [r3, r2]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80043b6:	4788      	blx	r1
 80043b8:	2100      	movs	r1, #0
 80043ba:	0008      	movs	r0, r1
 80043bc:	bd70      	pop	{r4, r5, r6, pc}

080043be <PE_Receive_SVDM>:
 80043be:	493e      	ldr	r1, [pc, #248]	; (80044b8 <.text_15>)
 80043c0:	1842      	adds	r2, r0, r1
 80043c2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	0f49      	lsrs	r1, r1, #29
 80043c8:	1e49      	subs	r1, r1, #1
 80043ca:	7611      	strb	r1, [r2, #24]
 80043cc:	2131      	movs	r1, #49	; 0x31
 80043ce:	5c41      	ldrb	r1, [r0, r1]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d000      	beq.n	80043d6 <PE_Receive_SVDM+0x18>
 80043d4:	4770      	bx	lr
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	2300      	movs	r3, #0
 80043da:	e010      	b.n	80043fe <PE_Receive_SVDM+0x40>
 80043dc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80043de:	009c      	lsls	r4, r3, #2
 80043e0:	1909      	adds	r1, r1, r4
 80043e2:	798c      	ldrb	r4, [r1, #6]
 80043e4:	79cd      	ldrb	r5, [r1, #7]
 80043e6:	022d      	lsls	r5, r5, #8
 80043e8:	1964      	adds	r4, r4, r5
 80043ea:	7a0d      	ldrb	r5, [r1, #8]
 80043ec:	042d      	lsls	r5, r5, #16
 80043ee:	1964      	adds	r4, r4, r5
 80043f0:	7a49      	ldrb	r1, [r1, #9]
 80043f2:	0609      	lsls	r1, r1, #24
 80043f4:	1861      	adds	r1, r4, r1
 80043f6:	009c      	lsls	r4, r3, #2
 80043f8:	5111      	str	r1, [r2, r4]
 80043fa:	1c5b      	adds	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	7e11      	ldrb	r1, [r2, #24]
 8004400:	428b      	cmp	r3, r1
 8004402:	dbeb      	blt.n	80043dc <PE_Receive_SVDM+0x1e>
 8004404:	0004      	movs	r4, r0
 8004406:	2503      	movs	r5, #3
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <.text_16>)
 800440a:	482d      	ldr	r0, [pc, #180]	; (80044c0 <.text_17>)
 800440c:	2694      	movs	r6, #148	; 0x94
 800440e:	00b6      	lsls	r6, r6, #2
 8004410:	5da6      	ldrb	r6, [r4, r6]
 8004412:	06f6      	lsls	r6, r6, #27
 8004414:	0ef6      	lsrs	r6, r6, #27
 8004416:	1e76      	subs	r6, r6, #1
 8004418:	d00d      	beq.n	8004436 <PE_Receive_SVDM+0x78>
 800441a:	1e76      	subs	r6, r6, #1
 800441c:	d022      	beq.n	8004464 <PE_Receive_SVDM+0xa6>
 800441e:	1e76      	subs	r6, r6, #1
 8004420:	d025      	beq.n	800446e <PE_Receive_SVDM+0xb0>
 8004422:	1e76      	subs	r6, r6, #1
 8004424:	d028      	beq.n	8004478 <PE_Receive_SVDM+0xba>
 8004426:	1e76      	subs	r6, r6, #1
 8004428:	d02b      	beq.n	8004482 <PE_Receive_SVDM+0xc4>
 800442a:	1e76      	subs	r6, r6, #1
 800442c:	d02e      	beq.n	800448c <PE_Receive_SVDM+0xce>
 800442e:	3e0a      	subs	r6, #10
 8004430:	2e0f      	cmp	r6, #15
 8004432:	d937      	bls.n	80044a4 <PE_Receive_SVDM+0xe6>
 8004434:	bd70      	pop	{r4, r5, r6, pc}
 8004436:	2150      	movs	r1, #80	; 0x50
 8004438:	7721      	strb	r1, [r4, #28]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	680a      	ldr	r2, [r1, #0]
 800443e:	0693      	lsls	r3, r2, #26
 8004440:	0fdb      	lsrs	r3, r3, #31
 8004442:	2694      	movs	r6, #148	; 0x94
 8004444:	00b6      	lsls	r6, r6, #2
 8004446:	59a6      	ldr	r6, [r4, r6]
 8004448:	0b76      	lsrs	r6, r6, #13
 800444a:	4035      	ands	r5, r6
 800444c:	429d      	cmp	r5, r3
 800444e:	da00      	bge.n	8004452 <PE_Receive_SVDM+0x94>
 8004450:	002b      	movs	r3, r5
 8004452:	2520      	movs	r5, #32
 8004454:	43aa      	bics	r2, r5
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	402b      	ands	r3, r5
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
 800445e:	83e0      	strh	r0, [r4, #30]
 8004460:	2075      	movs	r0, #117	; 0x75
 8004462:	e023      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004464:	2152      	movs	r1, #82	; 0x52
 8004466:	7721      	strb	r1, [r4, #28]
 8004468:	83e0      	strh	r0, [r4, #30]
 800446a:	2076      	movs	r0, #118	; 0x76
 800446c:	e01e      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800446e:	2153      	movs	r1, #83	; 0x53
 8004470:	7721      	strb	r1, [r4, #28]
 8004472:	83e0      	strh	r0, [r4, #30]
 8004474:	2078      	movs	r0, #120	; 0x78
 8004476:	e019      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004478:	2054      	movs	r0, #84	; 0x54
 800447a:	7720      	strb	r0, [r4, #28]
 800447c:	83e3      	strh	r3, [r4, #30]
 800447e:	2079      	movs	r0, #121	; 0x79
 8004480:	e014      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004482:	2055      	movs	r0, #85	; 0x55
 8004484:	7720      	strb	r0, [r4, #28]
 8004486:	83e3      	strh	r3, [r4, #30]
 8004488:	207a      	movs	r0, #122	; 0x7a
 800448a:	e00f      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <PE_Receive_SVDM+0xe2>
 8004494:	2900      	cmp	r1, #0
 8004496:	d000      	beq.n	800449a <PE_Receive_SVDM+0xdc>
 8004498:	2101      	movs	r1, #1
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	7c20      	ldrb	r0, [r4, #16]
 800449e:	4798      	blx	r3
 80044a0:	7465      	strb	r5, [r4, #17]
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	215a      	movs	r1, #90	; 0x5a
 80044a6:	7721      	strb	r1, [r4, #28]
 80044a8:	83e0      	strh	r0, [r4, #30]
 80044aa:	207b      	movs	r0, #123	; 0x7b
 80044ac:	7460      	strb	r0, [r4, #17]
 80044ae:	bd70      	pop	{r4, r5, r6, pc}

080044b0 <.text_13>:
 80044b0:	fffffe3f 	.word	0xfffffe3f

080044b4 <.text_14>:
 80044b4:	20000304 	.word	0x20000304

080044b8 <.text_15>:
 80044b8:	00000494 	.word	0x00000494

080044bc <.text_16>:
 80044bc:	00008019 	.word	0x00008019

080044c0 <.text_17>:
 80044c0:	0000800f 	.word	0x0000800f

080044c4 <PE_StateMachine_VDM>:
 80044c4:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 80044c6:	b09c      	sub	sp, #112	; 0x70
 80044c8:	0005      	movs	r5, r0
 80044ca:	2002      	movs	r0, #2
 80044cc:	9004      	str	r0, [sp, #16]
 80044ce:	7c6a      	ldrb	r2, [r5, #17]
 80044d0:	0010      	movs	r0, r2
 80044d2:	3875      	subs	r0, #117	; 0x75
 80044d4:	2807      	cmp	r0, #7
 80044d6:	d206      	bcs.n	80044e6 <__iar_annotation$$branch+0x4>
 80044d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80044da:	7800      	ldrb	r0, [r0, #0]
 80044dc:	2814      	cmp	r0, #20
 80044de:	d002      	beq.n	80044e6 <__iar_annotation$$branch+0x4>
 80044e0:	2002      	movs	r0, #2

080044e2 <__iar_annotation$$branch>:
 80044e2:	f000 febc 	bl	800525e <__iar_annotation$$branch+0xce4>
 80044e6:	2094      	movs	r0, #148	; 0x94
 80044e8:	0080      	lsls	r0, r0, #2
 80044ea:	182c      	adds	r4, r5, r0
 80044ec:	210b      	movs	r1, #11
 80044ee:	271e      	movs	r7, #30
 80044f0:	201f      	movs	r0, #31
 80044f2:	43c0      	mvns	r0, r0
 80044f4:	26c0      	movs	r6, #192	; 0xc0
 80044f6:	43f6      	mvns	r6, r6
 80044f8:	2a75      	cmp	r2, #117	; 0x75
 80044fa:	d041      	beq.n	8004580 <__iar_annotation$$branch+0x6>
 80044fc:	2a76      	cmp	r2, #118	; 0x76
 80044fe:	d100      	bne.n	8004502 <__iar_annotation$$branch+0x20>
 8004500:	e0bb      	b.n	800467a <__iar_annotation$$branch+0x100>
 8004502:	2a77      	cmp	r2, #119	; 0x77
 8004504:	d100      	bne.n	8004508 <__iar_annotation$$branch+0x26>
 8004506:	e144      	b.n	8004792 <__iar_annotation$$branch+0x218>
 8004508:	2a78      	cmp	r2, #120	; 0x78
 800450a:	d100      	bne.n	800450e <__iar_annotation$$branch+0x2c>
 800450c:	e1b4      	b.n	8004878 <__iar_annotation$$branch+0x2fe>
 800450e:	2a79      	cmp	r2, #121	; 0x79
 8004510:	d100      	bne.n	8004514 <__iar_annotation$$branch+0x32>
 8004512:	e216      	b.n	8004942 <__iar_annotation$$branch+0x3c8>
 8004514:	2a7a      	cmp	r2, #122	; 0x7a
 8004516:	d100      	bne.n	800451a <__iar_annotation$$branch+0x38>
 8004518:	e24b      	b.n	80049b2 <__iar_annotation$$branch+0x438>
 800451a:	2a7b      	cmp	r2, #123	; 0x7b
 800451c:	d100      	bne.n	8004520 <__iar_annotation$$branch+0x3e>
 800451e:	e292      	b.n	8004a46 <__iar_annotation$$branch+0x4cc>
 8004520:	2a7d      	cmp	r2, #125	; 0x7d
 8004522:	d100      	bne.n	8004526 <__iar_annotation$$branch+0x44>
 8004524:	e2e0      	b.n	8004ae8 <__iar_annotation$$branch+0x56e>
 8004526:	2a7f      	cmp	r2, #127	; 0x7f
 8004528:	d100      	bne.n	800452c <__iar_annotation$$branch+0x4a>
 800452a:	e352      	b.n	8004bd2 <__iar_annotation$$branch+0x658>
 800452c:	2a81      	cmp	r2, #129	; 0x81
 800452e:	d100      	bne.n	8004532 <__iar_annotation$$branch+0x50>
 8004530:	e3c2      	b.n	8004cb8 <__iar_annotation$$branch+0x73e>
 8004532:	2a82      	cmp	r2, #130	; 0x82
 8004534:	d101      	bne.n	800453a <__iar_annotation$$branch+0x4>

08004536 <__iar_annotation$$branch>:
 8004536:	f000 fc3b 	bl	8004db0 <__iar_annotation$$branch+0x836>
 800453a:	2a83      	cmp	r2, #131	; 0x83
 800453c:	d101      	bne.n	8004542 <__iar_annotation$$branch+0x4>

0800453e <__iar_annotation$$branch>:
 800453e:	f000 fcc9 	bl	8004ed4 <__iar_annotation$$branch+0x95a>
 8004542:	2a84      	cmp	r2, #132	; 0x84
 8004544:	d101      	bne.n	800454a <__iar_annotation$$branch+0x4>

08004546 <__iar_annotation$$branch>:
 8004546:	f000 fe38 	bl	80051ba <__iar_annotation$$branch+0xc40>
 800454a:	2a85      	cmp	r2, #133	; 0x85
 800454c:	d101      	bne.n	8004552 <__iar_annotation$$branch+0x4>

0800454e <__iar_annotation$$branch>:
 800454e:	f000 fd5d 	bl	800500c <__iar_annotation$$branch+0xa92>
 8004552:	2a87      	cmp	r2, #135	; 0x87
 8004554:	d100      	bne.n	8004558 <__iar_annotation$$branch+0xa>
 8004556:	e2fc      	b.n	8004b52 <__iar_annotation$$branch+0x5d8>
 8004558:	2a89      	cmp	r2, #137	; 0x89
 800455a:	d100      	bne.n	800455e <__iar_annotation$$branch+0x10>
 800455c:	e375      	b.n	8004c4a <__iar_annotation$$branch+0x6d0>
 800455e:	2a8b      	cmp	r2, #139	; 0x8b
 8004560:	d101      	bne.n	8004566 <__iar_annotation$$branch+0x4>

08004562 <__iar_annotation$$branch>:
 8004562:	f000 fbe4 	bl	8004d2e <__iar_annotation$$branch+0x7b4>
 8004566:	2a8c      	cmp	r2, #140	; 0x8c
 8004568:	d101      	bne.n	800456e <__iar_annotation$$branch+0x4>

0800456a <__iar_annotation$$branch>:
 800456a:	f000 fc63 	bl	8004e34 <__iar_annotation$$branch+0x8ba>
 800456e:	2a8d      	cmp	r2, #141	; 0x8d
 8004570:	d101      	bne.n	8004576 <__iar_annotation$$branch+0x4>

08004572 <__iar_annotation$$branch>:
 8004572:	f000 fcf7 	bl	8004f64 <__iar_annotation$$branch+0x9ea>
 8004576:	2a8f      	cmp	r2, #143	; 0x8f
 8004578:	d101      	bne.n	800457e <__iar_annotation$$branch+0x4>

0800457a <__iar_annotation$$branch>:
 800457a:	f000 fda5 	bl	80050c8 <__iar_annotation$$branch+0xb4e>
 800457e:	e2b2      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004580:	2201      	movs	r2, #1
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	03d3      	lsls	r3, r2, #15
 8004586:	8bea      	ldrh	r2, [r5, #30]
 8004588:	429a      	cmp	r2, r3
 800458a:	d100      	bne.n	800458e <__iar_annotation$$branch+0x14>
 800458c:	e262      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800458e:	2701      	movs	r7, #1
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	4010      	ands	r0, r2
 8004594:	4338      	orrs	r0, r7
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	4303      	orrs	r3, r0
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	6868      	ldr	r0, [r5, #4]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	0942      	lsrs	r2, r0, #5
 80045a2:	403a      	ands	r2, r7
 80045a4:	48c9      	ldr	r0, [pc, #804]	; (80048cc <__iar_annotation$$branch+0x352>)
 80045a6:	4018      	ands	r0, r3
 80045a8:	0352      	lsls	r2, r2, #13
 80045aa:	4302      	orrs	r2, r0
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	6868      	ldr	r0, [r5, #4]
 80045b0:	6800      	ldr	r0, [r0, #0]
 80045b2:	4001      	ands	r1, r0
 80045b4:	2909      	cmp	r1, #9
 80045b6:	d051      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045b8:	68e8      	ldr	r0, [r5, #12]
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d04e      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045be:	6803      	ldr	r3, [r0, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04b      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045c4:	0c10      	lsrs	r0, r2, #16
 80045c6:	21ff      	movs	r1, #255	; 0xff
 80045c8:	0209      	lsls	r1, r1, #8
 80045ca:	4288      	cmp	r0, r1
 80045cc:	d146      	bne.n	800465c <__iar_annotation$$branch+0xe2>
 80045ce:	a90b      	add	r1, sp, #44	; 0x2c
 80045d0:	7c28      	ldrb	r0, [r5, #16]
 80045d2:	4798      	blx	r3
 80045d4:	2803      	cmp	r0, #3
 80045d6:	d002      	beq.n	80045de <__iar_annotation$$branch+0x64>
 80045d8:	280f      	cmp	r0, #15
 80045da:	d005      	beq.n	80045e8 <__iar_annotation$$branch+0x6e>
 80045dc:	e03e      	b.n	800465c <__iar_annotation$$branch+0xe2>
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	21c0      	movs	r1, #192	; 0xc0
 80045e2:	4301      	orrs	r1, r0
 80045e4:	6021      	str	r1, [r4, #0]
 80045e6:	e03e      	b.n	8004666 <__iar_annotation$$branch+0xec>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	4006      	ands	r6, r0
 80045ec:	2040      	movs	r0, #64	; 0x40
 80045ee:	4330      	orrs	r0, r6
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80045f4:	9015      	str	r0, [sp, #84]	; 0x54
 80045f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80045f8:	9016      	str	r0, [sp, #88]	; 0x58
 80045fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045fc:	9017      	str	r0, [sp, #92]	; 0x5c
 80045fe:	2004      	movs	r0, #4
 8004600:	9003      	str	r0, [sp, #12]
 8004602:	a80b      	add	r0, sp, #44	; 0x2c
 8004604:	2120      	movs	r1, #32
 8004606:	5c40      	ldrb	r0, [r0, r1]
 8004608:	0841      	lsrs	r1, r0, #1
 800460a:	4239      	tst	r1, r7
 800460c:	d003      	beq.n	8004616 <__iar_annotation$$branch+0x9c>
 800460e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004610:	9118      	str	r1, [sp, #96]	; 0x60
 8004612:	2105      	movs	r1, #5
 8004614:	9103      	str	r1, [sp, #12]
 8004616:	08c2      	lsrs	r2, r0, #3
 8004618:	2101      	movs	r1, #1
 800461a:	4011      	ands	r1, r2
 800461c:	d008      	beq.n	8004630 <__iar_annotation$$branch+0xb6>
 800461e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8004620:	aa14      	add	r2, sp, #80	; 0x50
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	50d6      	str	r6, [r2, r3]
 8004628:	9a03      	ldr	r2, [sp, #12]
 800462a:	1c52      	adds	r2, r2, #1
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	9203      	str	r2, [sp, #12]
 8004630:	0900      	lsrs	r0, r0, #4
 8004632:	4238      	tst	r0, r7
 8004634:	d017      	beq.n	8004666 <__iar_annotation$$branch+0xec>
 8004636:	2900      	cmp	r1, #0
 8004638:	d007      	beq.n	800464a <__iar_annotation$$branch+0xd0>
 800463a:	2000      	movs	r0, #0
 800463c:	a914      	add	r1, sp, #80	; 0x50
 800463e:	9a03      	ldr	r2, [sp, #12]
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	5088      	str	r0, [r1, r2]
 8004644:	9803      	ldr	r0, [sp, #12]
 8004646:	1c40      	adds	r0, r0, #1
 8004648:	9003      	str	r0, [sp, #12]
 800464a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800464c:	a914      	add	r1, sp, #80	; 0x50
 800464e:	9a03      	ldr	r2, [sp, #12]
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	5088      	str	r0, [r1, r2]
 8004654:	9803      	ldr	r0, [sp, #12]
 8004656:	1c40      	adds	r0, r0, #1
 8004658:	9003      	str	r0, [sp, #12]
 800465a:	e004      	b.n	8004666 <__iar_annotation$$branch+0xec>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	4006      	ands	r6, r0
 8004660:	2080      	movs	r0, #128	; 0x80
 8004662:	4330      	orrs	r0, r6
 8004664:	6020      	str	r0, [r4, #0]
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	9014      	str	r0, [sp, #80]	; 0x50
 800466a:	2000      	movs	r0, #0
 800466c:	9002      	str	r0, [sp, #8]
 800466e:	2003      	movs	r0, #3
 8004670:	9001      	str	r0, [sp, #4]
 8004672:	9803      	ldr	r0, [sp, #12]
 8004674:	9000      	str	r0, [sp, #0]
 8004676:	ab14      	add	r3, sp, #80	; 0x50
 8004678:	e22f      	b.n	8004ada <__iar_annotation$$branch+0x560>
 800467a:	2201      	movs	r2, #1
 800467c:	466b      	mov	r3, sp
 800467e:	731a      	strb	r2, [r3, #12]
 8004680:	03d2      	lsls	r2, r2, #15
 8004682:	8beb      	ldrh	r3, [r5, #30]
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <__iar_annotation$$branch+0x110>
 8004688:	e1e4      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	4018      	ands	r0, r3
 800468e:	2302      	movs	r3, #2
 8004690:	4303      	orrs	r3, r0
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	431a      	orrs	r2, r3
 8004696:	6022      	str	r2, [r4, #0]
 8004698:	6868      	ldr	r0, [r5, #4]
 800469a:	6803      	ldr	r3, [r0, #0]
 800469c:	0698      	lsls	r0, r3, #26
 800469e:	0fc0      	lsrs	r0, r0, #31
 80046a0:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <__iar_annotation$$branch+0x352>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0340      	lsls	r0, r0, #13
 80046a6:	4318      	orrs	r0, r3
 80046a8:	6020      	str	r0, [r4, #0]
 80046aa:	686a      	ldr	r2, [r5, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4011      	ands	r1, r2
 80046b0:	2909      	cmp	r1, #9
 80046b2:	d05f      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046b4:	68e9      	ldr	r1, [r5, #12]
 80046b6:	684b      	ldr	r3, [r1, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046bc:	0c00      	lsrs	r0, r0, #16
 80046be:	21ff      	movs	r1, #255	; 0xff
 80046c0:	0209      	lsls	r1, r1, #8
 80046c2:	4288      	cmp	r0, r1
 80046c4:	d156      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046c6:	4882      	ldr	r0, [pc, #520]	; (80048d0 <__iar_annotation$$branch+0x356>)
 80046c8:	182a      	adds	r2, r5, r0
 80046ca:	a905      	add	r1, sp, #20
 80046cc:	7c28      	ldrb	r0, [r5, #16]
 80046ce:	4798      	blx	r3
 80046d0:	2803      	cmp	r0, #3
 80046d2:	d04b      	beq.n	800476c <__iar_annotation$$branch+0x1f2>
 80046d4:	280f      	cmp	r0, #15
 80046d6:	d14d      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4006      	ands	r6, r0
 80046dc:	2040      	movs	r0, #64	; 0x40
 80046de:	4330      	orrs	r0, r6
 80046e0:	6020      	str	r0, [r4, #0]
 80046e2:	211c      	movs	r1, #28
 80046e4:	a806      	add	r0, sp, #24
 80046e6:	f01f f8a0 	bl	802382a <__aeabi_memclr>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2200      	movs	r2, #0
 80046ee:	a806      	add	r0, sp, #24
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	e014      	b.n	800471e <__iar_annotation$$branch+0x1a4>
 80046f4:	005f      	lsls	r7, r3, #1
 80046f6:	5bf6      	ldrh	r6, [r6, r7]
 80046f8:	0436      	lsls	r6, r6, #16
 80046fa:	430e      	orrs	r6, r1
 80046fc:	6006      	str	r6, [r0, #0]
 80046fe:	e00d      	b.n	800471c <__iar_annotation$$branch+0x1a2>
 8004700:	1c52      	adds	r2, r2, #1
 8004702:	9800      	ldr	r0, [sp, #0]
 8004704:	1d00      	adds	r0, r0, #4
 8004706:	0859      	lsrs	r1, r3, #1
 8004708:	0089      	lsls	r1, r1, #2
 800470a:	1840      	adds	r0, r0, r1
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	6801      	ldr	r1, [r0, #0]
 8004710:	9e05      	ldr	r6, [sp, #20]
 8004712:	d5ef      	bpl.n	80046f4 <__iar_annotation$$branch+0x17a>
 8004714:	005f      	lsls	r7, r3, #1
 8004716:	5bf6      	ldrh	r6, [r6, r7]
 8004718:	4331      	orrs	r1, r6
 800471a:	6001      	str	r1, [r0, #0]
 800471c:	1c5b      	adds	r3, r3, #1
 800471e:	486d      	ldr	r0, [pc, #436]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004720:	1828      	adds	r0, r5, r0
 8004722:	7840      	ldrb	r0, [r0, #1]
 8004724:	4283      	cmp	r3, r0
 8004726:	d201      	bcs.n	800472c <__iar_annotation$$branch+0x1b2>
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d3e9      	bcc.n	8004700 <__iar_annotation$$branch+0x186>
 800472c:	1a80      	subs	r0, r0, r2
 800472e:	4969      	ldr	r1, [pc, #420]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004730:	1869      	adds	r1, r5, r1
 8004732:	7048      	strb	r0, [r1, #1]
 8004734:	b2d0      	uxtb	r0, r2
 8004736:	280c      	cmp	r0, #12
 8004738:	d111      	bne.n	800475e <__iar_annotation$$branch+0x1e4>
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	9006      	str	r0, [sp, #24]
 800473e:	2000      	movs	r0, #0
 8004740:	9002      	str	r0, [sp, #8]
 8004742:	2077      	movs	r0, #119	; 0x77
 8004744:	9001      	str	r0, [sp, #4]
 8004746:	2007      	movs	r0, #7
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	ab06      	add	r3, sp, #24
 800474c:	220f      	movs	r2, #15
 800474e:	2031      	movs	r0, #49	; 0x31
 8004750:	5c29      	ldrb	r1, [r5, r0]
 8004752:	0028      	movs	r0, r5
 8004754:	f7fc ff07 	bl	8001566 <PE_Send_DataMessage>
 8004758:	485f      	ldr	r0, [pc, #380]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 800475a:	83e8      	strh	r0, [r5, #30]
 800475c:	e1c3      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800475e:	0612      	lsls	r2, r2, #24
 8004760:	0e50      	lsrs	r0, r2, #25
 8004762:	1c80      	adds	r0, r0, #2
 8004764:	4669      	mov	r1, sp
 8004766:	7308      	strb	r0, [r1, #12]
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	e008      	b.n	800477e <__iar_annotation$$branch+0x204>
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	20c0      	movs	r0, #192	; 0xc0
 8004770:	4308      	orrs	r0, r1
 8004772:	e003      	b.n	800477c <__iar_annotation$$branch+0x202>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4006      	ands	r6, r0
 8004778:	2080      	movs	r0, #128	; 0x80
 800477a:	4330      	orrs	r0, r6
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	9006      	str	r0, [sp, #24]
 8004780:	2000      	movs	r0, #0
 8004782:	9002      	str	r0, [sp, #8]
 8004784:	2003      	movs	r0, #3
 8004786:	9001      	str	r0, [sp, #4]
 8004788:	4668      	mov	r0, sp
 800478a:	7b00      	ldrb	r0, [r0, #12]
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	ab06      	add	r3, sp, #24
 8004790:	e1a3      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004792:	2180      	movs	r1, #128	; 0x80
 8004794:	0209      	lsls	r1, r1, #8
 8004796:	8bea      	ldrh	r2, [r5, #30]
 8004798:	428a      	cmp	r2, r1
 800479a:	d100      	bne.n	800479e <__iar_annotation$$branch+0x224>
 800479c:	e15a      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	4010      	ands	r0, r2
 80047a2:	2202      	movs	r2, #2
 80047a4:	4302      	orrs	r2, r0
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	b292      	uxth	r2, r2
 80047aa:	20ff      	movs	r0, #255	; 0xff
 80047ac:	0600      	lsls	r0, r0, #24
 80047ae:	4310      	orrs	r0, r2
 80047b0:	6020      	str	r0, [r4, #0]
 80047b2:	4301      	orrs	r1, r0
 80047b4:	6021      	str	r1, [r4, #0]
 80047b6:	2701      	movs	r7, #1
 80047b8:	6868      	ldr	r0, [r5, #4]
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	0940      	lsrs	r0, r0, #5
 80047be:	4038      	ands	r0, r7
 80047c0:	4a42      	ldr	r2, [pc, #264]	; (80048cc <__iar_annotation$$branch+0x352>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	0340      	lsls	r0, r0, #13
 80047c6:	4310      	orrs	r0, r2
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	4006      	ands	r6, r0
 80047cc:	2040      	movs	r0, #64	; 0x40
 80047ce:	4330      	orrs	r0, r6
 80047d0:	6020      	str	r0, [r4, #0]
 80047d2:	aa03      	add	r2, sp, #12
 80047d4:	a905      	add	r1, sp, #20
 80047d6:	7c28      	ldrb	r0, [r5, #16]
 80047d8:	68eb      	ldr	r3, [r5, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4798      	blx	r3
 80047de:	211c      	movs	r1, #28
 80047e0:	a806      	add	r0, sp, #24
 80047e2:	f01f f822 	bl	802382a <__aeabi_memclr>
 80047e6:	2100      	movs	r1, #0
 80047e8:	2200      	movs	r2, #0
 80047ea:	a806      	add	r0, sp, #24
 80047ec:	002c      	movs	r4, r5
 80047ee:	e016      	b.n	800481e <__iar_annotation$$branch+0x2a4>
 80047f0:	004d      	lsls	r5, r1, #1
 80047f2:	5b75      	ldrh	r5, [r6, r5]
 80047f4:	042d      	lsls	r5, r5, #16
 80047f6:	4666      	mov	r6, ip
 80047f8:	4335      	orrs	r5, r6
 80047fa:	601d      	str	r5, [r3, #0]
 80047fc:	e00e      	b.n	800481c <__iar_annotation$$branch+0x2a2>
 80047fe:	1c52      	adds	r2, r2, #1
 8004800:	1d03      	adds	r3, r0, #4
 8004802:	084d      	lsrs	r5, r1, #1
 8004804:	00ad      	lsls	r5, r5, #2
 8004806:	195b      	adds	r3, r3, r5
 8004808:	4239      	tst	r1, r7
 800480a:	681e      	ldr	r6, [r3, #0]
 800480c:	46b4      	mov	ip, r6
 800480e:	9e05      	ldr	r6, [sp, #20]
 8004810:	d0ee      	beq.n	80047f0 <__iar_annotation$$branch+0x276>
 8004812:	004d      	lsls	r5, r1, #1
 8004814:	5b75      	ldrh	r5, [r6, r5]
 8004816:	4666      	mov	r6, ip
 8004818:	432e      	orrs	r6, r5
 800481a:	601e      	str	r6, [r3, #0]
 800481c:	1c49      	adds	r1, r1, #1
 800481e:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004820:	18e3      	adds	r3, r4, r3
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	4299      	cmp	r1, r3
 8004826:	d201      	bcs.n	800482c <__iar_annotation$$branch+0x2b2>
 8004828:	290c      	cmp	r1, #12
 800482a:	d3e8      	bcc.n	80047fe <__iar_annotation$$branch+0x284>
 800482c:	1a98      	subs	r0, r3, r2
 800482e:	4929      	ldr	r1, [pc, #164]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004830:	1861      	adds	r1, r4, r1
 8004832:	7048      	strb	r0, [r1, #1]
 8004834:	b2d0      	uxtb	r0, r2
 8004836:	280c      	cmp	r0, #12
 8004838:	d10f      	bne.n	800485a <__iar_annotation$$branch+0x2e0>
 800483a:	2000      	movs	r0, #0
 800483c:	9002      	str	r0, [sp, #8]
 800483e:	2077      	movs	r0, #119	; 0x77
 8004840:	9001      	str	r0, [sp, #4]
 8004842:	2007      	movs	r0, #7
 8004844:	9000      	str	r0, [sp, #0]
 8004846:	ab06      	add	r3, sp, #24
 8004848:	220f      	movs	r2, #15
 800484a:	2031      	movs	r0, #49	; 0x31
 800484c:	5c21      	ldrb	r1, [r4, r0]
 800484e:	0020      	movs	r0, r4
 8004850:	f7fc fe89 	bl	8001566 <PE_Send_DataMessage>
 8004854:	4820      	ldr	r0, [pc, #128]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 8004856:	83e0      	strh	r0, [r4, #30]
 8004858:	e145      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800485a:	2000      	movs	r0, #0
 800485c:	9002      	str	r0, [sp, #8]
 800485e:	2003      	movs	r0, #3
 8004860:	9001      	str	r0, [sp, #4]
 8004862:	0610      	lsls	r0, r2, #24
 8004864:	0e40      	lsrs	r0, r0, #25
 8004866:	1c80      	adds	r0, r0, #2
 8004868:	b2c0      	uxtb	r0, r0
 800486a:	9000      	str	r0, [sp, #0]
 800486c:	ab06      	add	r3, sp, #24
 800486e:	220f      	movs	r2, #15
 8004870:	2031      	movs	r0, #49	; 0x31
 8004872:	5c21      	ldrb	r1, [r4, r0]
 8004874:	0020      	movs	r0, r4
 8004876:	e134      	b.n	8004ae2 <__iar_annotation$$branch+0x568>
 8004878:	2201      	movs	r2, #1
 800487a:	9206      	str	r2, [sp, #24]
 800487c:	03d2      	lsls	r2, r2, #15
 800487e:	8beb      	ldrh	r3, [r5, #30]
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <__iar_annotation$$branch+0x30c>
 8004884:	e3c1      	b.n	800500a <__iar_annotation$$branch+0xa90>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4018      	ands	r0, r3
 800488a:	2303      	movs	r3, #3
 800488c:	4303      	orrs	r3, r0
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	6868      	ldr	r0, [r5, #4]
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	0698      	lsls	r0, r3, #26
 800489a:	0fc0      	lsrs	r0, r0, #31
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <__iar_annotation$$branch+0x352>)
 800489e:	4013      	ands	r3, r2
 80048a0:	0340      	lsls	r0, r0, #13
 80048a2:	4318      	orrs	r0, r3
 80048a4:	6020      	str	r0, [r4, #0]
 80048a6:	686a      	ldr	r2, [r5, #4]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4011      	ands	r1, r2
 80048ac:	2909      	cmp	r1, #9
 80048ae:	d037      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b0:	68e9      	ldr	r1, [r5, #12]
 80048b2:	688f      	ldr	r7, [r1, #8]
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	d033      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b8:	ab03      	add	r3, sp, #12
 80048ba:	aa05      	add	r2, sp, #20
 80048bc:	0c01      	lsrs	r1, r0, #16
 80048be:	7c28      	ldrb	r0, [r5, #16]
 80048c0:	47b8      	blx	r7
 80048c2:	2803      	cmp	r0, #3
 80048c4:	d00a      	beq.n	80048dc <__iar_annotation$$branch+0x362>
 80048c6:	280f      	cmp	r0, #15
 80048c8:	d00d      	beq.n	80048e6 <__iar_annotation$$branch+0x36c>
 80048ca:	e029      	b.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048cc:	ffff9fff 	.word	0xffff9fff
 80048d0:	000004ad 	.word	0x000004ad
 80048d4:	000004ac 	.word	0x000004ac
 80048d8:	0000800f 	.word	0x0000800f
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	21c0      	movs	r1, #192	; 0xc0
 80048e0:	4301      	orrs	r1, r0
 80048e2:	6021      	str	r1, [r4, #0]
 80048e4:	e023      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 80048e6:	4668      	mov	r0, sp
 80048e8:	7b00      	ldrb	r0, [r0, #12]
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d018      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048ee:	4668      	mov	r0, sp
 80048f0:	7b02      	ldrb	r2, [r0, #12]
 80048f2:	2a07      	cmp	r2, #7
 80048f4:	d214      	bcs.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	4006      	ands	r6, r0
 80048fa:	2040      	movs	r0, #64	; 0x40
 80048fc:	4330      	orrs	r0, r6
 80048fe:	6020      	str	r0, [r4, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	9806      	ldr	r0, [sp, #24]
 8004904:	4293      	cmp	r3, r2
 8004906:	d211      	bcs.n	800492c <__iar_annotation$$branch+0x3b2>
 8004908:	9905      	ldr	r1, [sp, #20]
 800490a:	6809      	ldr	r1, [r1, #0]
 800490c:	ae07      	add	r6, sp, #28
 800490e:	1d36      	adds	r6, r6, #4
 8004910:	009f      	lsls	r7, r3, #2
 8004912:	51f1      	str	r1, [r6, r7]
 8004914:	9905      	ldr	r1, [sp, #20]
 8004916:	1d09      	adds	r1, r1, #4
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	1c40      	adds	r0, r0, #1
 800491c:	1c5b      	adds	r3, r3, #1
 800491e:	e7f1      	b.n	8004904 <__iar_annotation$$branch+0x38a>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4006      	ands	r6, r0
 8004924:	2080      	movs	r0, #128	; 0x80
 8004926:	4330      	orrs	r0, r6
 8004928:	6020      	str	r0, [r4, #0]
 800492a:	e000      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 800492c:	9006      	str	r0, [sp, #24]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	9007      	str	r0, [sp, #28]
 8004932:	2000      	movs	r0, #0
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	2003      	movs	r0, #3
 8004938:	9001      	str	r0, [sp, #4]
 800493a:	9806      	ldr	r0, [sp, #24]
 800493c:	9000      	str	r0, [sp, #0]
 800493e:	ab07      	add	r3, sp, #28
 8004940:	e0cb      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	0209      	lsls	r1, r1, #8
 8004946:	8bea      	ldrh	r2, [r5, #30]
 8004948:	428a      	cmp	r2, r1
 800494a:	d100      	bne.n	800494e <__iar_annotation$$branch+0x3d4>
 800494c:	e35d      	b.n	800500a <__iar_annotation$$branch+0xa90>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	4010      	ands	r0, r2
 8004952:	2204      	movs	r2, #4
 8004954:	4302      	orrs	r2, r0
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	4311      	orrs	r1, r2
 800495a:	6021      	str	r1, [r4, #0]
 800495c:	2001      	movs	r0, #1
 800495e:	686a      	ldr	r2, [r5, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	0952      	lsrs	r2, r2, #5
 8004964:	4002      	ands	r2, r0
 8004966:	4ba6      	ldr	r3, [pc, #664]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004968:	400b      	ands	r3, r1
 800496a:	0351      	lsls	r1, r2, #13
 800496c:	4319      	orrs	r1, r3
 800496e:	6021      	str	r1, [r4, #0]
 8004970:	686a      	ldr	r2, [r5, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	08d2      	lsrs	r2, r2, #3
 8004976:	4010      	ands	r0, r2
 8004978:	d152      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 800497a:	68e8      	ldr	r0, [r5, #12]
 800497c:	68c3      	ldr	r3, [r0, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04e      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004982:	2707      	movs	r7, #7
 8004984:	0a0a      	lsrs	r2, r1, #8
 8004986:	403a      	ands	r2, r7
 8004988:	0c09      	lsrs	r1, r1, #16
 800498a:	7c28      	ldrb	r0, [r5, #16]
 800498c:	4798      	blx	r3
 800498e:	2803      	cmp	r0, #3
 8004990:	d041      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 8004992:	280f      	cmp	r0, #15
 8004994:	d144      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	4006      	ands	r6, r0
 800499a:	2040      	movs	r0, #64	; 0x40
 800499c:	4330      	orrs	r0, r6
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	0a00      	lsrs	r0, r0, #8
 80049a2:	4007      	ands	r7, r0
 80049a4:	6968      	ldr	r0, [r5, #20]
 80049a6:	4940      	ldr	r1, [pc, #256]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 80049a8:	4001      	ands	r1, r0
 80049aa:	01b8      	lsls	r0, r7, #6
 80049ac:	4308      	orrs	r0, r1
 80049ae:	6168      	str	r0, [r5, #20]
 80049b0:	e03b      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	0209      	lsls	r1, r1, #8
 80049b6:	8bea      	ldrh	r2, [r5, #30]
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d04b      	beq.n	8004a54 <__iar_annotation$$branch+0x4da>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	4010      	ands	r0, r2
 80049c0:	2205      	movs	r2, #5
 80049c2:	4302      	orrs	r2, r0
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	6021      	str	r1, [r4, #0]
 80049ca:	2001      	movs	r0, #1
 80049cc:	686a      	ldr	r2, [r5, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	0952      	lsrs	r2, r2, #5
 80049d2:	4002      	ands	r2, r0
 80049d4:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <__iar_annotation$$branch+0x686>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	0351      	lsls	r1, r2, #13
 80049da:	4319      	orrs	r1, r3
 80049dc:	6021      	str	r1, [r4, #0]
 80049de:	686a      	ldr	r2, [r5, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	08d2      	lsrs	r2, r2, #3
 80049e4:	4010      	ands	r0, r2
 80049e6:	d11b      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049e8:	68e8      	ldr	r0, [r5, #12]
 80049ea:	6903      	ldr	r3, [r0, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049f0:	0548      	lsls	r0, r1, #21
 80049f2:	0f42      	lsrs	r2, r0, #29
 80049f4:	0c09      	lsrs	r1, r1, #16
 80049f6:	7c28      	ldrb	r0, [r5, #16]
 80049f8:	4798      	blx	r3
 80049fa:	2803      	cmp	r0, #3
 80049fc:	d00b      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 80049fe:	280f      	cmp	r0, #15
 8004a00:	d10e      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	4006      	ands	r6, r0
 8004a06:	2040      	movs	r0, #64	; 0x40
 8004a08:	4330      	orrs	r0, r6
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	6968      	ldr	r0, [r5, #20]
 8004a0e:	4926      	ldr	r1, [pc, #152]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 8004a10:	4001      	ands	r1, r0
 8004a12:	6169      	str	r1, [r5, #20]
 8004a14:	e009      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	21c0      	movs	r1, #192	; 0xc0
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	e004      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	4006      	ands	r6, r0
 8004a24:	2080      	movs	r0, #128	; 0x80
 8004a26:	4330      	orrs	r0, r6
 8004a28:	6020      	str	r0, [r4, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	9002      	str	r0, [sp, #8]
 8004a2e:	2003      	movs	r0, #3
 8004a30:	9001      	str	r0, [sp, #4]
 8004a32:	2001      	movs	r0, #1
 8004a34:	9000      	str	r0, [sp, #0]
 8004a36:	0023      	movs	r3, r4
 8004a38:	220f      	movs	r2, #15
 8004a3a:	2031      	movs	r0, #49	; 0x31
 8004a3c:	5c29      	ldrb	r1, [r5, r0]
 8004a3e:	0028      	movs	r0, r5
 8004a40:	f7fc fd91 	bl	8001566 <PE_Send_DataMessage>
 8004a44:	e04f      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004a46:	2001      	movs	r0, #1
 8004a48:	4669      	mov	r1, sp
 8004a4a:	7308      	strb	r0, [r1, #12]
 8004a4c:	8be8      	ldrh	r0, [r5, #30]
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	0209      	lsls	r1, r1, #8
 8004a52:	4288      	cmp	r0, r1
 8004a54:	d100      	bne.n	8004a58 <__iar_annotation$$branch+0x4de>
 8004a56:	e3ab      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8004a58:	68e8      	ldr	r0, [r5, #12]
 8004a5a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d02a      	beq.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a60:	4868      	ldr	r0, [pc, #416]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a62:	182b      	adds	r3, r5, r0
 8004a64:	3018      	adds	r0, #24
 8004a66:	182a      	adds	r2, r5, r0
 8004a68:	7820      	ldrb	r0, [r4, #0]
 8004a6a:	06c1      	lsls	r1, r0, #27
 8004a6c:	0ec9      	lsrs	r1, r1, #27
 8004a6e:	7c28      	ldrb	r0, [r5, #16]
 8004a70:	47b8      	blx	r7
 8004a72:	2803      	cmp	r0, #3
 8004a74:	d01a      	beq.n	8004aac <__iar_annotation$$branch+0x532>
 8004a76:	280f      	cmp	r0, #15
 8004a78:	d11d      	bne.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	4006      	ands	r6, r0
 8004a7e:	2040      	movs	r0, #64	; 0x40
 8004a80:	4330      	orrs	r0, r6
 8004a82:	6020      	str	r0, [r4, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	4668      	mov	r0, sp
 8004a88:	7b00      	ldrb	r0, [r0, #12]
 8004a8a:	495f      	ldr	r1, [pc, #380]	; (8004c08 <__iar_annotation$$branch+0x68e>)
 8004a8c:	5c69      	ldrb	r1, [r5, r1]
 8004a8e:	428a      	cmp	r2, r1
 8004a90:	d217      	bcs.n	8004ac2 <__iar_annotation$$branch+0x548>
 8004a92:	0091      	lsls	r1, r2, #2
 8004a94:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a96:	18eb      	adds	r3, r5, r3
 8004a98:	585b      	ldr	r3, [r3, r1]
 8004a9a:	ae05      	add	r6, sp, #20
 8004a9c:	1d36      	adds	r6, r6, #4
 8004a9e:	5073      	str	r3, [r6, r1]
 8004aa0:	1c40      	adds	r0, r0, #1
 8004aa2:	1c52      	adds	r2, r2, #1
 8004aa4:	e7f1      	b.n	8004a8a <__iar_annotation$$branch+0x510>
 8004aa6:	bf00      	nop
 8004aa8:	fffffe3f 	.word	0xfffffe3f
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	21c0      	movs	r1, #192	; 0xc0
 8004ab0:	4301      	orrs	r1, r0
 8004ab2:	6021      	str	r1, [r4, #0]
 8004ab4:	e007      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	4006      	ands	r6, r0
 8004aba:	2080      	movs	r0, #128	; 0x80
 8004abc:	4330      	orrs	r0, r6
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	e001      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ac2:	4669      	mov	r1, sp
 8004ac4:	7308      	strb	r0, [r1, #12]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	9005      	str	r0, [sp, #20]
 8004aca:	2000      	movs	r0, #0
 8004acc:	9002      	str	r0, [sp, #8]
 8004ace:	2003      	movs	r0, #3
 8004ad0:	9001      	str	r0, [sp, #4]
 8004ad2:	4668      	mov	r0, sp
 8004ad4:	7b00      	ldrb	r0, [r0, #12]
 8004ad6:	9000      	str	r0, [sp, #0]
 8004ad8:	ab05      	add	r3, sp, #20
 8004ada:	220f      	movs	r2, #15
 8004adc:	2031      	movs	r0, #49	; 0x31
 8004ade:	5c29      	ldrb	r1, [r5, r0]
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	f7fc fd40 	bl	8001566 <PE_Send_DataMessage>
 8004ae6:	e3b9      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004ae8:	2101      	movs	r1, #1
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	4010      	ands	r0, r2
 8004aee:	4308      	orrs	r0, r1
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	03ca      	lsls	r2, r1, #15
 8004af4:	4302      	orrs	r2, r0
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	6868      	ldr	r0, [r5, #4]
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	0943      	lsrs	r3, r0, #5
 8004afe:	400b      	ands	r3, r1
 8004b00:	483f      	ldr	r0, [pc, #252]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004b02:	4010      	ands	r0, r2
 8004b04:	035a      	lsls	r2, r3, #13
 8004b06:	4302      	orrs	r2, r0
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	48bf      	ldr	r0, [pc, #764]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004b0c:	4010      	ands	r0, r2
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	4006      	ands	r6, r0
 8004b12:	6026      	str	r6, [r4, #0]
 8004b14:	b2b0      	uxth	r0, r6
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	0612      	lsls	r2, r2, #24
 8004b1a:	4302      	orrs	r2, r0
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	6868      	ldr	r0, [r5, #4]
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	0880      	lsrs	r0, r0, #2
 8004b24:	4001      	ands	r1, r0
 8004b26:	d003      	beq.n	8004b30 <__iar_annotation$$branch+0x5b6>
 8004b28:	6968      	ldr	r0, [r5, #20]
 8004b2a:	0741      	lsls	r1, r0, #29
 8004b2c:	0fc8      	lsrs	r0, r1, #31
 8004b2e:	e000      	b.n	8004b32 <__iar_annotation$$branch+0x5b8>
 8004b30:	2002      	movs	r0, #2
 8004b32:	9002      	str	r0, [sp, #8]
 8004b34:	2087      	movs	r0, #135	; 0x87
 8004b36:	9001      	str	r0, [sp, #4]
 8004b38:	2001      	movs	r0, #1
 8004b3a:	9000      	str	r0, [sp, #0]
 8004b3c:	0023      	movs	r3, r4
 8004b3e:	220f      	movs	r2, #15
 8004b40:	2031      	movs	r0, #49	; 0x31
 8004b42:	5c29      	ldrb	r1, [r5, r0]
 8004b44:	0028      	movs	r0, r5
 8004b46:	f7fc fd0e 	bl	8001566 <PE_Send_DataMessage>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d1cb      	bne.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004b4e:	2050      	movs	r0, #80	; 0x50
 8004b50:	e0e8      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004b52:	2031      	movs	r0, #49	; 0x31
 8004b54:	5c28      	ldrb	r0, [r5, r0]
 8004b56:	f7fb ff37 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004b5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b5c:	7809      	ldrb	r1, [r1, #0]
 8004b5e:	4281      	cmp	r1, r0
 8004b60:	d000      	beq.n	8004b64 <__iar_annotation$$branch+0x5ea>
 8004b62:	e245      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b64:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004b66:	0bc2      	lsrs	r2, r0, #15
 8004b68:	d176      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b6a:	0b02      	lsrs	r2, r0, #12
 8004b6c:	0752      	lsls	r2, r2, #29
 8004b6e:	d012      	beq.n	8004b96 <__iar_annotation$$branch+0x61c>
 8004b70:	06c0      	lsls	r0, r0, #27
 8004b72:	0ec0      	lsrs	r0, r0, #27
 8004b74:	280f      	cmp	r0, #15
 8004b76:	d16f      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b78:	2914      	cmp	r1, #20
 8004b7a:	d005      	beq.n	8004b88 <__iar_annotation$$branch+0x60e>
 8004b7c:	2014      	movs	r0, #20
 8004b7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b80:	7008      	strb	r0, [r1, #0]
 8004b82:	0028      	movs	r0, r5
 8004b84:	f7fb fee7 	bl	8000956 <PE_Clear_RxEvent>
 8004b88:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004b8a:	7881      	ldrb	r1, [r0, #2]
 8004b8c:	06ca      	lsls	r2, r1, #27
 8004b8e:	0ed2      	lsrs	r2, r2, #27
 8004b90:	2a01      	cmp	r2, #1
 8004b92:	d161      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b94:	098c      	lsrs	r4, r1, #6
 8004b96:	d100      	bne.n	8004b9a <__iar_annotation$$branch+0x620>
 8004b98:	e22a      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b9a:	68e9      	ldr	r1, [r5, #12]
 8004b9c:	6949      	ldr	r1, [r1, #20]
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d100      	bne.n	8004ba4 <__iar_annotation$$branch+0x62a>
 8004ba2:	e2e3      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ba4:	2103      	movs	r1, #3
 8004ba6:	4021      	ands	r1, r4
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d000      	beq.n	8004bae <__iar_annotation$$branch+0x634>
 8004bac:	e2de      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8004bb0:	1d81      	adds	r1, r0, #6
 8004bb2:	7c28      	ldrb	r0, [r5, #16]
 8004bb4:	f000 fc04 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d108      	bne.n	8004bce <__iar_annotation$$branch+0x654>
 8004bbc:	ab0b      	add	r3, sp, #44	; 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	7c28      	ldrb	r0, [r5, #16]
 8004bc4:	68ec      	ldr	r4, [r5, #12]
 8004bc6:	6964      	ldr	r4, [r4, #20]
 8004bc8:	47a0      	blx	r4
 8004bca:	2151      	movs	r1, #81	; 0x51
 8004bcc:	e0ec      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bce:	211b      	movs	r1, #27
 8004bd0:	e0ea      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	400e      	ands	r6, r1
 8004bd6:	6026      	str	r6, [r4, #0]
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4030      	ands	r0, r6
 8004bdc:	4308      	orrs	r0, r1
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	b280      	uxth	r0, r0
 8004be2:	22ff      	movs	r2, #255	; 0xff
 8004be4:	0612      	lsls	r2, r2, #24
 8004be6:	4302      	orrs	r2, r0
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	0388      	lsls	r0, r1, #14
 8004bec:	4310      	orrs	r0, r2
 8004bee:	6020      	str	r0, [r4, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	686b      	ldr	r3, [r5, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	095e      	lsrs	r6, r3, #5
 8004bf8:	4016      	ands	r6, r2
 8004bfa:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004bfc:	e006      	b.n	8004c0c <__iar_annotation$$branch+0x692>
 8004bfe:	bf00      	nop
 8004c00:	ffff9fff 	.word	0xffff9fff
 8004c04:	00000494 	.word	0x00000494
 8004c08:	000004ac 	.word	0x000004ac
 8004c0c:	4003      	ands	r3, r0
 8004c0e:	0370      	lsls	r0, r6, #13
 8004c10:	4318      	orrs	r0, r3
 8004c12:	6020      	str	r0, [r4, #0]
 8004c14:	4b7c      	ldr	r3, [pc, #496]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004c16:	4003      	ands	r3, r0
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	6868      	ldr	r0, [r5, #4]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	0880      	lsrs	r0, r0, #2
 8004c20:	4002      	ands	r2, r0
 8004c22:	d002      	beq.n	8004c2a <__iar_annotation$$branch+0x6b0>
 8004c24:	6968      	ldr	r0, [r5, #20]
 8004c26:	0740      	lsls	r0, r0, #29
 8004c28:	0fc1      	lsrs	r1, r0, #31
 8004c2a:	9102      	str	r1, [sp, #8]
 8004c2c:	2089      	movs	r0, #137	; 0x89
 8004c2e:	9001      	str	r0, [sp, #4]
 8004c30:	2001      	movs	r0, #1
 8004c32:	9000      	str	r0, [sp, #0]
 8004c34:	0023      	movs	r3, r4
 8004c36:	220f      	movs	r2, #15
 8004c38:	2031      	movs	r0, #49	; 0x31
 8004c3a:	5c29      	ldrb	r1, [r5, r0]
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	f7fc fc92 	bl	8001566 <PE_Send_DataMessage>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d172      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004c46:	2052      	movs	r0, #82	; 0x52
 8004c48:	e06c      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004c4a:	2031      	movs	r0, #49	; 0x31
 8004c4c:	5c28      	ldrb	r0, [r5, r0]
 8004c4e:	f7fb febb 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004c52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c54:	7809      	ldrb	r1, [r1, #0]
 8004c56:	4281      	cmp	r1, r0
 8004c58:	d000      	beq.n	8004c5c <__iar_annotation$$branch+0x6e2>
 8004c5a:	e1c9      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004c5c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004c5e:	0bc2      	lsrs	r2, r0, #15
 8004c60:	d1fa      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c62:	0b02      	lsrs	r2, r0, #12
 8004c64:	0752      	lsls	r2, r2, #29
 8004c66:	d06f      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c68:	06c0      	lsls	r0, r0, #27
 8004c6a:	0ec0      	lsrs	r0, r0, #27
 8004c6c:	280f      	cmp	r0, #15
 8004c6e:	d1f3      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c70:	2914      	cmp	r1, #20
 8004c72:	d005      	beq.n	8004c80 <__iar_annotation$$branch+0x706>
 8004c74:	2014      	movs	r0, #20
 8004c76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c78:	7008      	strb	r0, [r1, #0]
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7fb fe6b 	bl	8000956 <PE_Clear_RxEvent>
 8004c80:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004c82:	7881      	ldrb	r1, [r0, #2]
 8004c84:	06ca      	lsls	r2, r1, #27
 8004c86:	0ed2      	lsrs	r2, r2, #27
 8004c88:	2a02      	cmp	r2, #2
 8004c8a:	d1e5      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c8c:	060c      	lsls	r4, r1, #24
 8004c8e:	d05b      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c90:	68e9      	ldr	r1, [r5, #12]
 8004c92:	6989      	ldr	r1, [r1, #24]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d100      	bne.n	8004c9a <__iar_annotation$$branch+0x720>
 8004c98:	e268      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c9c:	1d81      	adds	r1, r0, #6
 8004c9e:	7c28      	ldrb	r0, [r5, #16]
 8004ca0:	f000 fc55 	bl	800554e <PE_SVDM_CheckSVIDs>
 8004ca4:	ab0b      	add	r3, sp, #44	; 0x2c
 8004ca6:	0fa2      	lsrs	r2, r4, #30
 8004ca8:	2031      	movs	r0, #49	; 0x31
 8004caa:	5c29      	ldrb	r1, [r5, r0]
 8004cac:	7c28      	ldrb	r0, [r5, #16]
 8004cae:	68ec      	ldr	r4, [r5, #12]
 8004cb0:	69a4      	ldr	r4, [r4, #24]
 8004cb2:	47a0      	blx	r4
 8004cb4:	2153      	movs	r1, #83	; 0x53
 8004cb6:	e077      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	400e      	ands	r6, r1
 8004cbc:	6026      	str	r6, [r4, #0]
 8004cbe:	4030      	ands	r0, r6
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	4301      	orrs	r1, r0
 8004cc4:	6021      	str	r1, [r4, #0]
 8004cc6:	8920      	ldrh	r0, [r4, #8]
 8004cc8:	b28a      	uxth	r2, r1
 8004cca:	0401      	lsls	r1, r0, #16
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	2080      	movs	r0, #128	; 0x80
 8004cd2:	0200      	lsls	r0, r0, #8
 8004cd4:	4308      	orrs	r0, r1
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	686a      	ldr	r2, [r5, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	0952      	lsrs	r2, r2, #5
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	4b9e      	ldr	r3, [pc, #632]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ce4:	4003      	ands	r3, r0
 8004ce6:	0350      	lsls	r0, r2, #13
 8004ce8:	4318      	orrs	r0, r3
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	4a46      	ldr	r2, [pc, #280]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004cee:	4002      	ands	r2, r0
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	6868      	ldr	r0, [r5, #4]
 8004cf4:	6800      	ldr	r0, [r0, #0]
 8004cf6:	0880      	lsrs	r0, r0, #2
 8004cf8:	4001      	ands	r1, r0
 8004cfa:	d003      	beq.n	8004d04 <__iar_annotation$$branch+0x78a>
 8004cfc:	6968      	ldr	r0, [r5, #20]
 8004cfe:	0741      	lsls	r1, r0, #29
 8004d00:	0fc8      	lsrs	r0, r1, #31
 8004d02:	e000      	b.n	8004d06 <__iar_annotation$$branch+0x78c>
 8004d04:	2002      	movs	r0, #2
 8004d06:	9002      	str	r0, [sp, #8]
 8004d08:	208b      	movs	r0, #139	; 0x8b
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	9000      	str	r0, [sp, #0]
 8004d10:	0023      	movs	r3, r4
 8004d12:	220f      	movs	r2, #15
 8004d14:	2031      	movs	r0, #49	; 0x31
 8004d16:	5c29      	ldrb	r1, [r5, r0]
 8004d18:	0028      	movs	r0, r5
 8004d1a:	f7fc fc24 	bl	8001566 <PE_Send_DataMessage>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d104      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004d22:	2053      	movs	r0, #83	; 0x53
 8004d24:	7728      	strb	r0, [r5, #28]
 8004d26:	488e      	ldr	r0, [pc, #568]	; (8004f60 <__iar_annotation$$branch+0x9e6>)
 8004d28:	83e8      	strh	r0, [r5, #30]
 8004d2a:	9704      	str	r7, [sp, #16]
 8004d2c:	e296      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004d2e:	2031      	movs	r0, #49	; 0x31
 8004d30:	5c28      	ldrb	r0, [r5, r0]
 8004d32:	f7fb fe49 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004d36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d38:	7809      	ldrb	r1, [r1, #0]
 8004d3a:	4281      	cmp	r1, r0
 8004d3c:	d18c      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d3e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004d40:	0bc2      	lsrs	r2, r0, #15
 8004d42:	d189      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d44:	0b02      	lsrs	r2, r0, #12
 8004d46:	0752      	lsls	r2, r2, #29
 8004d48:	d100      	bne.n	8004d4c <__iar_annotation$$branch+0x7d2>
 8004d4a:	e151      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d4c:	06c0      	lsls	r0, r0, #27
 8004d4e:	0ec0      	lsrs	r0, r0, #27
 8004d50:	280f      	cmp	r0, #15
 8004d52:	d000      	beq.n	8004d56 <__iar_annotation$$branch+0x7dc>
 8004d54:	e14c      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d56:	2914      	cmp	r1, #20
 8004d58:	d005      	beq.n	8004d66 <__iar_annotation$$branch+0x7ec>
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d5e:	7008      	strb	r0, [r1, #0]
 8004d60:	0028      	movs	r0, r5
 8004d62:	f7fb fdf8 	bl	8000956 <PE_Clear_RxEvent>
 8004d66:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004d68:	7881      	ldrb	r1, [r0, #2]
 8004d6a:	06ca      	lsls	r2, r1, #27
 8004d6c:	0ed2      	lsrs	r2, r2, #27
 8004d6e:	2a03      	cmp	r2, #3
 8004d70:	d1ef      	bne.n	8004d52 <__iar_annotation$$branch+0x7d8>
 8004d72:	098e      	lsrs	r6, r1, #6
 8004d74:	d0e8      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004d76:	68e9      	ldr	r1, [r5, #12]
 8004d78:	69c9      	ldr	r1, [r1, #28]
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d017      	beq.n	8004dae <__iar_annotation$$branch+0x834>
 8004d7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d80:	1d82      	adds	r2, r0, #6
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	0c01      	lsrs	r1, r0, #16
 8004d86:	7c28      	ldrb	r0, [r5, #16]
 8004d88:	f000 fc22 	bl	80055d0 <PE_SVDM_CheckModes>
 8004d8c:	2403      	movs	r4, #3
 8004d8e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d90:	2203      	movs	r2, #3
 8004d92:	4032      	ands	r2, r6
 8004d94:	2031      	movs	r0, #49	; 0x31
 8004d96:	5c29      	ldrb	r1, [r5, r0]
 8004d98:	7c28      	ldrb	r0, [r5, #16]
 8004d9a:	68ef      	ldr	r7, [r5, #12]
 8004d9c:	69ff      	ldr	r7, [r7, #28]
 8004d9e:	47b8      	blx	r7
 8004da0:	4034      	ands	r4, r6
 8004da2:	2c01      	cmp	r4, #1
 8004da4:	d103      	bne.n	8004dae <__iar_annotation$$branch+0x834>
 8004da6:	2154      	movs	r1, #84	; 0x54
 8004da8:	7c28      	ldrb	r0, [r5, #16]
 8004daa:	f7fb fb69 	bl	8000480 <USBPD_PE_Notification>
 8004dae:	e1dd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	400e      	ands	r6, r1
 8004db4:	6026      	str	r6, [r4, #0]
 8004db6:	4030      	ands	r0, r6
 8004db8:	2104      	movs	r1, #4
 8004dba:	4301      	orrs	r1, r0
 8004dbc:	6021      	str	r1, [r4, #0]
 8004dbe:	8920      	ldrh	r0, [r4, #8]
 8004dc0:	b289      	uxth	r1, r1
 8004dc2:	0400      	lsls	r0, r0, #16
 8004dc4:	4308      	orrs	r0, r1
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0209      	lsls	r1, r1, #8
 8004dcc:	4301      	orrs	r1, r0
 8004dce:	6021      	str	r1, [r4, #0]
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	686a      	ldr	r2, [r5, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	0952      	lsrs	r2, r2, #5
 8004dd8:	4002      	ands	r2, r0
 8004dda:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ddc:	400b      	ands	r3, r1
 8004dde:	0351      	lsls	r1, r2, #13
 8004de0:	4319      	orrs	r1, r3
 8004de2:	6021      	str	r1, [r4, #0]
 8004de4:	696a      	ldr	r2, [r5, #20]
 8004de6:	05d2      	lsls	r2, r2, #23
 8004de8:	0f52      	lsrs	r2, r2, #29
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	0211      	lsls	r1, r2, #8
 8004df0:	4319      	orrs	r1, r3
 8004df2:	6021      	str	r1, [r4, #0]
 8004df4:	6869      	ldr	r1, [r5, #4]
 8004df6:	6809      	ldr	r1, [r1, #0]
 8004df8:	0889      	lsrs	r1, r1, #2
 8004dfa:	4008      	ands	r0, r1
 8004dfc:	d006      	beq.n	8004e0c <__iar_annotation$$branch+0x892>
 8004dfe:	6968      	ldr	r0, [r5, #20]
 8004e00:	0741      	lsls	r1, r0, #29
 8004e02:	0fc8      	lsrs	r0, r1, #31
 8004e04:	e003      	b.n	8004e0e <__iar_annotation$$branch+0x894>
 8004e06:	bf00      	nop
 8004e08:	fffff8ff 	.word	0xfffff8ff
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	9002      	str	r0, [sp, #8]
 8004e10:	208c      	movs	r0, #140	; 0x8c
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2001      	movs	r0, #1
 8004e16:	9000      	str	r0, [sp, #0]
 8004e18:	0023      	movs	r3, r4
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	2031      	movs	r0, #49	; 0x31
 8004e1e:	5c29      	ldrb	r1, [r5, r0]
 8004e20:	0028      	movs	r0, r5
 8004e22:	f7fc fba0 	bl	8001566 <PE_Send_DataMessage>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d000      	beq.n	8004e2c <__iar_annotation$$branch+0x8b2>
 8004e2a:	e217      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004e2c:	2054      	movs	r0, #84	; 0x54
 8004e2e:	7728      	strb	r0, [r5, #28]
 8004e30:	2134      	movs	r1, #52	; 0x34
 8004e32:	e08c      	b.n	8004f4e <__iar_annotation$$branch+0x9d4>
 8004e34:	2634      	movs	r6, #52	; 0x34
 8004e36:	2031      	movs	r0, #49	; 0x31
 8004e38:	5c28      	ldrb	r0, [r5, r0]
 8004e3a:	f7fb fdc5 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004e3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e40:	7809      	ldrb	r1, [r1, #0]
 8004e42:	4281      	cmp	r1, r0
 8004e44:	d144      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e46:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004e48:	0bc2      	lsrs	r2, r0, #15
 8004e4a:	d141      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e4c:	2707      	movs	r7, #7
 8004e4e:	0b02      	lsrs	r2, r0, #12
 8004e50:	423a      	tst	r2, r7
 8004e52:	d03d      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e54:	06c0      	lsls	r0, r0, #27
 8004e56:	0ec0      	lsrs	r0, r0, #27
 8004e58:	280f      	cmp	r0, #15
 8004e5a:	d139      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e5c:	2914      	cmp	r1, #20
 8004e5e:	d005      	beq.n	8004e6c <__iar_annotation$$branch+0x8f2>
 8004e60:	2014      	movs	r0, #20
 8004e62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e64:	7008      	strb	r0, [r1, #0]
 8004e66:	0028      	movs	r0, r5
 8004e68:	f7fb fd75 	bl	8000956 <PE_Clear_RxEvent>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	7728      	strb	r0, [r5, #28]
 8004e70:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004e72:	7880      	ldrb	r0, [r0, #2]
 8004e74:	06c1      	lsls	r1, r0, #27
 8004e76:	0ec9      	lsrs	r1, r1, #27
 8004e78:	2904      	cmp	r1, #4
 8004e7a:	d129      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e7c:	0980      	lsrs	r0, r0, #6
 8004e7e:	d027      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e80:	9001      	str	r0, [sp, #4]
 8004e82:	488f      	ldr	r0, [pc, #572]	; (80050c0 <__iar_annotation$$branch+0xb46>)
 8004e84:	9901      	ldr	r1, [sp, #4]
 8004e86:	2901      	cmp	r1, #1
 8004e88:	d004      	beq.n	8004e94 <__iar_annotation$$branch+0x91a>
 8004e8a:	d30e      	bcc.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e8c:	2903      	cmp	r1, #3
 8004e8e:	d008      	beq.n	8004ea2 <__iar_annotation$$branch+0x928>
 8004e90:	d302      	bcc.n	8004e98 <__iar_annotation$$branch+0x91e>
 8004e92:	e00a      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e94:	2635      	movs	r6, #53	; 0x35
 8004e96:	e008      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e98:	6969      	ldr	r1, [r5, #20]
 8004e9a:	4008      	ands	r0, r1
 8004e9c:	6168      	str	r0, [r5, #20]
 8004e9e:	2636      	movs	r6, #54	; 0x36
 8004ea0:	e003      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004ea2:	6969      	ldr	r1, [r5, #20]
 8004ea4:	4008      	ands	r0, r1
 8004ea6:	6168      	str	r0, [r5, #20]
 8004ea8:	2637      	movs	r6, #55	; 0x37
 8004eaa:	0031      	movs	r1, r6
 8004eac:	7c28      	ldrb	r0, [r5, #16]
 8004eae:	f7fb fae7 	bl	8000480 <USBPD_PE_Notification>
 8004eb2:	68e8      	ldr	r0, [r5, #12]
 8004eb4:	6a06      	ldr	r6, [r0, #32]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	d009      	beq.n	8004ece <__iar_annotation$$branch+0x954>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	0a01      	lsrs	r1, r0, #8
 8004ebe:	400f      	ands	r7, r1
 8004ec0:	9700      	str	r7, [sp, #0]
 8004ec2:	0c03      	lsrs	r3, r0, #16
 8004ec4:	9a01      	ldr	r2, [sp, #4]
 8004ec6:	2031      	movs	r0, #49	; 0x31
 8004ec8:	5c29      	ldrb	r1, [r5, r0]
 8004eca:	7c28      	ldrb	r0, [r5, #16]
 8004ecc:	47b0      	blx	r6
 8004ece:	e14d      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ed0:	5da8      	ldrb	r0, [r5, r6]
 8004ed2:	e08f      	b.n	8004ff4 <__iar_annotation$$branch+0xa7a>
 8004ed4:	6821      	ldr	r1, [r4, #0]
 8004ed6:	400e      	ands	r6, r1
 8004ed8:	6026      	str	r6, [r4, #0]
 8004eda:	4030      	ands	r0, r6
 8004edc:	2105      	movs	r1, #5
 8004ede:	4301      	orrs	r1, r0
 8004ee0:	6021      	str	r1, [r4, #0]
 8004ee2:	8920      	ldrh	r0, [r4, #8]
 8004ee4:	b289      	uxth	r1, r1
 8004ee6:	0400      	lsls	r0, r0, #16
 8004ee8:	4308      	orrs	r0, r1
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	0209      	lsls	r1, r1, #8
 8004ef0:	4301      	orrs	r1, r0
 8004ef2:	6021      	str	r1, [r4, #0]
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	686a      	ldr	r2, [r5, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	0952      	lsrs	r2, r2, #5
 8004efc:	4002      	ands	r2, r0
 8004efe:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004f00:	400b      	ands	r3, r1
 8004f02:	0351      	lsls	r1, r2, #13
 8004f04:	4319      	orrs	r1, r3
 8004f06:	6021      	str	r1, [r4, #0]
 8004f08:	696a      	ldr	r2, [r5, #20]
 8004f0a:	05d2      	lsls	r2, r2, #23
 8004f0c:	0f52      	lsrs	r2, r2, #29
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	0211      	lsls	r1, r2, #8
 8004f14:	4319      	orrs	r1, r3
 8004f16:	6021      	str	r1, [r4, #0]
 8004f18:	6869      	ldr	r1, [r5, #4]
 8004f1a:	6809      	ldr	r1, [r1, #0]
 8004f1c:	0889      	lsrs	r1, r1, #2
 8004f1e:	4008      	ands	r0, r1
 8004f20:	d003      	beq.n	8004f2a <__iar_annotation$$branch+0x9b0>
 8004f22:	6968      	ldr	r0, [r5, #20]
 8004f24:	0741      	lsls	r1, r0, #29
 8004f26:	0fc8      	lsrs	r0, r1, #31
 8004f28:	e000      	b.n	8004f2c <__iar_annotation$$branch+0x9b2>
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	208d      	movs	r0, #141	; 0x8d
 8004f30:	9001      	str	r0, [sp, #4]
 8004f32:	2001      	movs	r0, #1
 8004f34:	9000      	str	r0, [sp, #0]
 8004f36:	0023      	movs	r3, r4
 8004f38:	220f      	movs	r2, #15
 8004f3a:	2031      	movs	r0, #49	; 0x31
 8004f3c:	5c29      	ldrb	r1, [r5, r0]
 8004f3e:	0028      	movs	r0, r5
 8004f40:	f7fc fb11 	bl	8001566 <PE_Send_DataMessage>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d15e      	bne.n	8005006 <__iar_annotation$$branch+0xa8c>
 8004f48:	2055      	movs	r0, #85	; 0x55
 8004f4a:	7728      	strb	r0, [r5, #28]
 8004f4c:	2155      	movs	r1, #85	; 0x55
 8004f4e:	7c28      	ldrb	r0, [r5, #16]
 8004f50:	f7fb fa96 	bl	8000480 <USBPD_PE_Notification>
 8004f54:	48c3      	ldr	r0, [pc, #780]	; (8005264 <.text_19>)
 8004f56:	83e8      	strh	r0, [r5, #30]
 8004f58:	2032      	movs	r0, #50	; 0x32
 8004f5a:	e12c      	b.n	80051b6 <__iar_annotation$$branch+0xc3c>
 8004f5c:	ffff9fff 	.word	0xffff9fff
 8004f60:	0000801e 	.word	0x0000801e
 8004f64:	2031      	movs	r0, #49	; 0x31
 8004f66:	5c28      	ldrb	r0, [r5, r0]
 8004f68:	f7fb fd2e 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004f6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f6e:	7809      	ldrb	r1, [r1, #0]
 8004f70:	4281      	cmp	r1, r0
 8004f72:	d13d      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f74:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004f76:	0bc2      	lsrs	r2, r0, #15
 8004f78:	d13a      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f7a:	2607      	movs	r6, #7
 8004f7c:	0b02      	lsrs	r2, r0, #12
 8004f7e:	4232      	tst	r2, r6
 8004f80:	d036      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f82:	06c0      	lsls	r0, r0, #27
 8004f84:	0ec0      	lsrs	r0, r0, #27
 8004f86:	280f      	cmp	r0, #15
 8004f88:	d132      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f8a:	2914      	cmp	r1, #20
 8004f8c:	d005      	beq.n	8004f9a <__iar_annotation$$branch+0xa20>
 8004f8e:	2014      	movs	r0, #20
 8004f90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f92:	7008      	strb	r0, [r1, #0]
 8004f94:	0028      	movs	r0, r5
 8004f96:	f7fb fcde 	bl	8000956 <PE_Clear_RxEvent>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	7728      	strb	r0, [r5, #28]
 8004f9e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004fa0:	7880      	ldrb	r0, [r0, #2]
 8004fa2:	06c1      	lsls	r1, r0, #27
 8004fa4:	0ec9      	lsrs	r1, r1, #27
 8004fa6:	2905      	cmp	r1, #5
 8004fa8:	d122      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004faa:	0980      	lsrs	r0, r0, #6
 8004fac:	d020      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2801      	cmp	r0, #1
 8004fb2:	d004      	beq.n	8004fbe <__iar_annotation$$branch+0xa44>
 8004fb4:	d309      	bcc.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fb6:	2803      	cmp	r0, #3
 8004fb8:	d005      	beq.n	8004fc6 <__iar_annotation$$branch+0xa4c>
 8004fba:	d302      	bcc.n	8004fc2 <__iar_annotation$$branch+0xa48>
 8004fbc:	e005      	b.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fbe:	2156      	movs	r1, #86	; 0x56
 8004fc0:	e004      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc2:	2157      	movs	r1, #87	; 0x57
 8004fc4:	e002      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc6:	2158      	movs	r1, #88	; 0x58
 8004fc8:	e000      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fca:	2155      	movs	r1, #85	; 0x55
 8004fcc:	7c28      	ldrb	r0, [r5, #16]
 8004fce:	f7fb fa57 	bl	8000480 <USBPD_PE_Notification>
 8004fd2:	68e8      	ldr	r0, [r5, #12]
 8004fd4:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d009      	beq.n	8004fee <__iar_annotation$$branch+0xa74>
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	0a01      	lsrs	r1, r0, #8
 8004fde:	400e      	ands	r6, r1
 8004fe0:	9600      	str	r6, [sp, #0]
 8004fe2:	0c03      	lsrs	r3, r0, #16
 8004fe4:	9a01      	ldr	r2, [sp, #4]
 8004fe6:	2031      	movs	r0, #49	; 0x31
 8004fe8:	5c29      	ldrb	r1, [r5, r0]
 8004fea:	7c28      	ldrb	r0, [r5, #16]
 8004fec:	47b8      	blx	r7
 8004fee:	e0bd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ff0:	2034      	movs	r0, #52	; 0x34
 8004ff2:	5c28      	ldrb	r0, [r5, r0]
 8004ff4:	06c0      	lsls	r0, r0, #27
 8004ff6:	0ec0      	lsrs	r0, r0, #27
 8004ff8:	2810      	cmp	r0, #16
 8004ffa:	d100      	bne.n	8004ffe <__iar_annotation$$branch+0xa84>
 8004ffc:	e0bf      	b.n	800517e <__iar_annotation$$branch+0xc04>
 8004ffe:	8be8      	ldrh	r0, [r5, #30]
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	0209      	lsls	r1, r1, #8
 8005004:	4288      	cmp	r0, r1
 8005006:	d000      	beq.n	800500a <__iar_annotation$$branch+0xa90>
 8005008:	e128      	b.n	800525c <__iar_annotation$$branch+0xce2>
 800500a:	e0d1      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 800500c:	2100      	movs	r1, #0
 800500e:	466a      	mov	r2, sp
 8005010:	7311      	strb	r1, [r2, #12]
 8005012:	6821      	ldr	r1, [r4, #0]
 8005014:	400e      	ands	r6, r1
 8005016:	6026      	str	r6, [r4, #0]
 8005018:	6861      	ldr	r1, [r4, #4]
 800501a:	4030      	ands	r0, r6
 800501c:	06c9      	lsls	r1, r1, #27
 800501e:	0ec9      	lsrs	r1, r1, #27
 8005020:	4301      	orrs	r1, r0
 8005022:	6021      	str	r1, [r4, #0]
 8005024:	8920      	ldrh	r0, [r4, #8]
 8005026:	b28a      	uxth	r2, r1
 8005028:	0401      	lsls	r1, r0, #16
 800502a:	4311      	orrs	r1, r2
 800502c:	6021      	str	r1, [r4, #0]
 800502e:	2080      	movs	r0, #128	; 0x80
 8005030:	0200      	lsls	r0, r0, #8
 8005032:	4308      	orrs	r0, r1
 8005034:	6020      	str	r0, [r4, #0]
 8005036:	2601      	movs	r6, #1
 8005038:	6869      	ldr	r1, [r5, #4]
 800503a:	6809      	ldr	r1, [r1, #0]
 800503c:	0949      	lsrs	r1, r1, #5
 800503e:	4031      	ands	r1, r6
 8005040:	4aaa      	ldr	r2, [pc, #680]	; (80052ec <.text_21>)
 8005042:	4002      	ands	r2, r0
 8005044:	0348      	lsls	r0, r1, #13
 8005046:	4310      	orrs	r0, r2
 8005048:	6020      	str	r0, [r4, #0]
 800504a:	491e      	ldr	r1, [pc, #120]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 800504c:	4001      	ands	r1, r0
 800504e:	0230      	lsls	r0, r6, #8
 8005050:	4308      	orrs	r0, r1
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	9005      	str	r0, [sp, #20]
 8005056:	68e8      	ldr	r0, [r5, #12]
 8005058:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2800      	cmp	r0, #0
 800505e:	d00b      	beq.n	8005078 <__iar_annotation$$branch+0xafe>
 8005060:	a805      	add	r0, sp, #20
 8005062:	1d00      	adds	r0, r0, #4
 8005064:	9000      	str	r0, [sp, #0]
 8005066:	ab03      	add	r3, sp, #12
 8005068:	7820      	ldrb	r0, [r4, #0]
 800506a:	06c2      	lsls	r2, r0, #27
 800506c:	0ed2      	lsrs	r2, r2, #27
 800506e:	2031      	movs	r0, #49	; 0x31
 8005070:	5c29      	ldrb	r1, [r5, r0]
 8005072:	7c28      	ldrb	r0, [r5, #16]
 8005074:	9c01      	ldr	r4, [sp, #4]
 8005076:	47a0      	blx	r4
 8005078:	4668      	mov	r0, sp
 800507a:	7b00      	ldrb	r0, [r0, #12]
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	4669      	mov	r1, sp
 8005080:	7308      	strb	r0, [r1, #12]
 8005082:	6868      	ldr	r0, [r5, #4]
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	0880      	lsrs	r0, r0, #2
 8005088:	4006      	ands	r6, r0
 800508a:	d003      	beq.n	8005094 <__iar_annotation$$branch+0xb1a>
 800508c:	6968      	ldr	r0, [r5, #20]
 800508e:	0741      	lsls	r1, r0, #29
 8005090:	0fc8      	lsrs	r0, r1, #31
 8005092:	e000      	b.n	8005096 <__iar_annotation$$branch+0xb1c>
 8005094:	2002      	movs	r0, #2
 8005096:	9002      	str	r0, [sp, #8]
 8005098:	208f      	movs	r0, #143	; 0x8f
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	4668      	mov	r0, sp
 800509e:	7b00      	ldrb	r0, [r0, #12]
 80050a0:	9000      	str	r0, [sp, #0]
 80050a2:	ab05      	add	r3, sp, #20
 80050a4:	220f      	movs	r2, #15
 80050a6:	2031      	movs	r0, #49	; 0x31
 80050a8:	5c29      	ldrb	r1, [r5, r0]
 80050aa:	0028      	movs	r0, r5
 80050ac:	f7fc fa5b 	bl	8001566 <PE_Send_DataMessage>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d104      	bne.n	80050be <__iar_annotation$$branch+0xb44>
 80050b4:	205a      	movs	r0, #90	; 0x5a
 80050b6:	7728      	strb	r0, [r5, #28]
 80050b8:	48bf      	ldr	r0, [pc, #764]	; (80053b8 <.text_23>)
 80050ba:	83e8      	strh	r0, [r5, #30]
 80050bc:	9704      	str	r7, [sp, #16]
 80050be:	e0ca      	b.n	8005256 <__iar_annotation$$branch+0xcdc>
 80050c0:	fffffe3f 	.word	0xfffffe3f
 80050c4:	fffff8ff 	.word	0xfffff8ff
 80050c8:	2607      	movs	r6, #7
 80050ca:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050cc:	0b00      	lsrs	r0, r0, #12
 80050ce:	2107      	movs	r1, #7
 80050d0:	4001      	ands	r1, r0
 80050d2:	1e48      	subs	r0, r1, #1
 80050d4:	4669      	mov	r1, sp
 80050d6:	7108      	strb	r0, [r1, #4]
 80050d8:	2031      	movs	r0, #49	; 0x31
 80050da:	5c28      	ldrb	r0, [r5, r0]
 80050dc:	f7fb fc74 	bl	80009c8 <PE_Convert_SOPRxEvent>
 80050e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050e2:	7809      	ldrb	r1, [r1, #0]
 80050e4:	4281      	cmp	r1, r0
 80050e6:	d144      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050ea:	0bc2      	lsrs	r2, r0, #15
 80050ec:	d141      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050ee:	0b02      	lsrs	r2, r0, #12
 80050f0:	4232      	tst	r2, r6
 80050f2:	d03e      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050f4:	06c0      	lsls	r0, r0, #27
 80050f6:	0ec0      	lsrs	r0, r0, #27
 80050f8:	280f      	cmp	r0, #15
 80050fa:	d13a      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050fc:	2914      	cmp	r1, #20
 80050fe:	d005      	beq.n	800510c <__iar_annotation$$branch+0xb92>
 8005100:	2014      	movs	r0, #20
 8005102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005104:	7008      	strb	r0, [r1, #0]
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb fc25 	bl	8000956 <PE_Clear_RxEvent>
 800510c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800510e:	7880      	ldrb	r0, [r0, #2]
 8005110:	06c1      	lsls	r1, r0, #27
 8005112:	0ec9      	lsrs	r1, r1, #27
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	4291      	cmp	r1, r2
 8005118:	d12b      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511a:	0981      	lsrs	r1, r0, #6
 800511c:	d029      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511e:	68e9      	ldr	r1, [r5, #12]
 8005120:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005122:	2900      	cmp	r1, #0
 8005124:	d022      	beq.n	800516c <__iar_annotation$$branch+0xbf2>
 8005126:	2600      	movs	r6, #0
 8005128:	e011      	b.n	800514e <__iar_annotation$$branch+0xbd4>
 800512a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800512c:	00b2      	lsls	r2, r6, #2
 800512e:	188b      	adds	r3, r1, r2
 8005130:	799c      	ldrb	r4, [r3, #6]
 8005132:	79df      	ldrb	r7, [r3, #7]
 8005134:	023f      	lsls	r7, r7, #8
 8005136:	19e4      	adds	r4, r4, r7
 8005138:	3108      	adds	r1, #8
 800513a:	5c89      	ldrb	r1, [r1, r2]
 800513c:	0409      	lsls	r1, r1, #16
 800513e:	1861      	adds	r1, r4, r1
 8005140:	7a5a      	ldrb	r2, [r3, #9]
 8005142:	0612      	lsls	r2, r2, #24
 8005144:	1889      	adds	r1, r1, r2
 8005146:	aa05      	add	r2, sp, #20
 8005148:	00b3      	lsls	r3, r6, #2
 800514a:	50d1      	str	r1, [r2, r3]
 800514c:	1c76      	adds	r6, r6, #1
 800514e:	4669      	mov	r1, sp
 8005150:	7909      	ldrb	r1, [r1, #4]
 8005152:	428e      	cmp	r6, r1
 8005154:	d3e9      	bcc.n	800512a <__iar_annotation$$branch+0xbb0>
 8005156:	a905      	add	r1, sp, #20
 8005158:	9100      	str	r1, [sp, #0]
 800515a:	ab01      	add	r3, sp, #4
 800515c:	06c2      	lsls	r2, r0, #27
 800515e:	0ed2      	lsrs	r2, r2, #27
 8005160:	2031      	movs	r0, #49	; 0x31
 8005162:	5c29      	ldrb	r1, [r5, r0]
 8005164:	7c28      	ldrb	r0, [r5, #16]
 8005166:	68ec      	ldr	r4, [r5, #12]
 8005168:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800516a:	47a0      	blx	r4
 800516c:	2000      	movs	r0, #0
 800516e:	83e8      	strh	r0, [r5, #30]
 8005170:	e01e      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8005172:	2034      	movs	r0, #52	; 0x34
 8005174:	5c28      	ldrb	r0, [r5, r0]
 8005176:	06c0      	lsls	r0, r0, #27
 8005178:	0ec0      	lsrs	r0, r0, #27
 800517a:	2810      	cmp	r0, #16
 800517c:	d113      	bne.n	80051a6 <__iar_annotation$$branch+0xc2c>
 800517e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005180:	7800      	ldrb	r0, [r0, #0]
 8005182:	2814      	cmp	r0, #20
 8005184:	d005      	beq.n	8005192 <__iar_annotation$$branch+0xc18>
 8005186:	2014      	movs	r0, #20
 8005188:	991c      	ldr	r1, [sp, #112]	; 0x70
 800518a:	7008      	strb	r0, [r1, #0]
 800518c:	0028      	movs	r0, r5
 800518e:	f7fb fbe2 	bl	8000956 <PE_Clear_RxEvent>
 8005192:	2000      	movs	r0, #0
 8005194:	83e8      	strh	r0, [r5, #30]
 8005196:	2103      	movs	r1, #3
 8005198:	7469      	strb	r1, [r5, #17]
 800519a:	9004      	str	r0, [sp, #16]
 800519c:	2159      	movs	r1, #89	; 0x59
 800519e:	7c28      	ldrb	r0, [r5, #16]
 80051a0:	f7fb f96e 	bl	8000480 <USBPD_PE_Notification>
 80051a4:	e05a      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051a6:	8be8      	ldrh	r0, [r5, #30]
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	0209      	lsls	r1, r1, #8
 80051ac:	4288      	cmp	r0, r1
 80051ae:	d155      	bne.n	800525c <__iar_annotation$$branch+0xce2>
 80051b0:	2003      	movs	r0, #3
 80051b2:	7468      	strb	r0, [r5, #17]
 80051b4:	2000      	movs	r0, #0
 80051b6:	9004      	str	r0, [sp, #16]
 80051b8:	e050      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051ba:	2100      	movs	r1, #0
 80051bc:	466a      	mov	r2, sp
 80051be:	7311      	strb	r1, [r2, #12]
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	400e      	ands	r6, r1
 80051c4:	6026      	str	r6, [r4, #0]
 80051c6:	6861      	ldr	r1, [r4, #4]
 80051c8:	4030      	ands	r0, r6
 80051ca:	06c9      	lsls	r1, r1, #27
 80051cc:	0ec9      	lsrs	r1, r1, #27
 80051ce:	4301      	orrs	r1, r0
 80051d0:	6021      	str	r1, [r4, #0]
 80051d2:	8920      	ldrh	r0, [r4, #8]
 80051d4:	b28a      	uxth	r2, r1
 80051d6:	0401      	lsls	r1, r0, #16
 80051d8:	4311      	orrs	r1, r2
 80051da:	6021      	str	r1, [r4, #0]
 80051dc:	2080      	movs	r0, #128	; 0x80
 80051de:	0200      	lsls	r0, r0, #8
 80051e0:	4308      	orrs	r0, r1
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	2601      	movs	r6, #1
 80051e6:	6869      	ldr	r1, [r5, #4]
 80051e8:	6809      	ldr	r1, [r1, #0]
 80051ea:	0949      	lsrs	r1, r1, #5
 80051ec:	4031      	ands	r1, r6
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <.text_21>)
 80051f0:	4002      	ands	r2, r0
 80051f2:	0348      	lsls	r0, r1, #13
 80051f4:	4310      	orrs	r0, r2
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	4970      	ldr	r1, [pc, #448]	; (80053bc <.text_24>)
 80051fa:	4001      	ands	r1, r0
 80051fc:	0230      	lsls	r0, r6, #8
 80051fe:	4308      	orrs	r0, r1
 8005200:	6020      	str	r0, [r4, #0]
 8005202:	9005      	str	r0, [sp, #20]
 8005204:	68e8      	ldr	r0, [r5, #12]
 8005206:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <__iar_annotation$$branch+0xc9c>
 800520c:	a805      	add	r0, sp, #20
 800520e:	1d02      	adds	r2, r0, #4
 8005210:	a903      	add	r1, sp, #12
 8005212:	7c28      	ldrb	r0, [r5, #16]
 8005214:	4798      	blx	r3
 8005216:	4668      	mov	r0, sp
 8005218:	7b00      	ldrb	r0, [r0, #12]
 800521a:	1c40      	adds	r0, r0, #1
 800521c:	4669      	mov	r1, sp
 800521e:	7308      	strb	r0, [r1, #12]
 8005220:	6868      	ldr	r0, [r5, #4]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	0880      	lsrs	r0, r0, #2
 8005226:	4006      	ands	r6, r0
 8005228:	d003      	beq.n	8005232 <__iar_annotation$$branch+0xcb8>
 800522a:	6968      	ldr	r0, [r5, #20]
 800522c:	0741      	lsls	r1, r0, #29
 800522e:	0fc8      	lsrs	r0, r1, #31
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xcba>
 8005232:	2002      	movs	r0, #2
 8005234:	9002      	str	r0, [sp, #8]
 8005236:	2003      	movs	r0, #3
 8005238:	9001      	str	r0, [sp, #4]
 800523a:	4668      	mov	r0, sp
 800523c:	7b00      	ldrb	r0, [r0, #12]
 800523e:	9000      	str	r0, [sp, #0]
 8005240:	ab05      	add	r3, sp, #20
 8005242:	220f      	movs	r2, #15
 8005244:	2031      	movs	r0, #49	; 0x31
 8005246:	5c29      	ldrb	r1, [r5, r0]
 8005248:	0028      	movs	r0, r5
 800524a:	f7fc f98c 	bl	8001566 <PE_Send_DataMessage>
 800524e:	2800      	cmp	r0, #0
 8005250:	d101      	bne.n	8005256 <__iar_annotation$$branch+0xcdc>
 8005252:	205a      	movs	r0, #90	; 0x5a
 8005254:	7728      	strb	r0, [r5, #28]
 8005256:	2000      	movs	r0, #0
 8005258:	2132      	movs	r1, #50	; 0x32
 800525a:	5468      	strb	r0, [r5, r1]
 800525c:	9804      	ldr	r0, [sp, #16]
 800525e:	b01d      	add	sp, #116	; 0x74
 8005260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005264 <.text_19>:
 8005264:	00008032 	.word	0x00008032

08005268 <PE_StateMachine_UVDM>:
 8005268:	2914      	cmp	r1, #20
 800526a:	d000      	beq.n	800526e <PE_StateMachine_UVDM+0x6>
 800526c:	4770      	bx	lr
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	b08c      	sub	sp, #48	; 0x30
 8005272:	0004      	movs	r4, r0
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	2800      	cmp	r0, #0
 8005278:	d035      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 800527a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800527c:	2800      	cmp	r0, #0
 800527e:	d032      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 8005280:	2500      	movs	r5, #0
 8005282:	4669      	mov	r1, sp
 8005284:	730d      	strb	r5, [r1, #12]
 8005286:	a805      	add	r0, sp, #20
 8005288:	1d03      	adds	r3, r0, #4
 800528a:	aa03      	add	r2, sp, #12
 800528c:	a904      	add	r1, sp, #16
 800528e:	7c20      	ldrb	r0, [r4, #16]
 8005290:	68e6      	ldr	r6, [r4, #12]
 8005292:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 8005294:	47b0      	blx	r6
 8005296:	9804      	ldr	r0, [sp, #16]
 8005298:	49cc      	ldr	r1, [pc, #816]	; (80055cc <.text_27>)
 800529a:	4001      	ands	r1, r0
 800529c:	9104      	str	r1, [sp, #16]
 800529e:	4668      	mov	r0, sp
 80052a0:	7b00      	ldrb	r0, [r0, #12]
 80052a2:	1c40      	adds	r0, r0, #1
 80052a4:	4669      	mov	r1, sp
 80052a6:	7308      	strb	r0, [r1, #12]
 80052a8:	9804      	ldr	r0, [sp, #16]
 80052aa:	9005      	str	r0, [sp, #20]
 80052ac:	6860      	ldr	r0, [r4, #4]
 80052ae:	6800      	ldr	r0, [r0, #0]
 80052b0:	0741      	lsls	r1, r0, #29
 80052b2:	0fc9      	lsrs	r1, r1, #31
 80052b4:	d003      	beq.n	80052be <PE_StateMachine_UVDM+0x56>
 80052b6:	6960      	ldr	r0, [r4, #20]
 80052b8:	0741      	lsls	r1, r0, #29
 80052ba:	0fc8      	lsrs	r0, r1, #31
 80052bc:	e000      	b.n	80052c0 <PE_StateMachine_UVDM+0x58>
 80052be:	2002      	movs	r0, #2
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	2003      	movs	r0, #3
 80052c4:	9001      	str	r0, [sp, #4]
 80052c6:	4668      	mov	r0, sp
 80052c8:	7b00      	ldrb	r0, [r0, #12]
 80052ca:	9000      	str	r0, [sp, #0]
 80052cc:	ab05      	add	r3, sp, #20
 80052ce:	220f      	movs	r2, #15
 80052d0:	2031      	movs	r0, #49	; 0x31
 80052d2:	5c21      	ldrb	r1, [r4, r0]
 80052d4:	0020      	movs	r0, r4
 80052d6:	f7fc f946 	bl	8001566 <PE_Send_DataMessage>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d101      	bne.n	80052e2 <PE_StateMachine_UVDM+0x7a>
 80052de:	2059      	movs	r0, #89	; 0x59
 80052e0:	7720      	strb	r0, [r4, #28]
 80052e2:	2032      	movs	r0, #50	; 0x32
 80052e4:	5425      	strb	r5, [r4, r0]
 80052e6:	b00c      	add	sp, #48	; 0x30
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052ec <.text_21>:
 80052ec:	ffff9fff 	.word	0xffff9fff

080052f0 <PE_Check_DataMessageVDM>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	2403      	movs	r4, #3
 80052f4:	2501      	movs	r5, #1
 80052f6:	6801      	ldr	r1, [r0, #0]
 80052f8:	6849      	ldr	r1, [r1, #4]
 80052fa:	0949      	lsrs	r1, r1, #5
 80052fc:	4029      	ands	r1, r5
 80052fe:	d01f      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005300:	68c1      	ldr	r1, [r0, #12]
 8005302:	2900      	cmp	r1, #0
 8005304:	d01c      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005306:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005308:	788a      	ldrb	r2, [r1, #2]
 800530a:	78cb      	ldrb	r3, [r1, #3]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	18d2      	adds	r2, r2, r3
 8005310:	790b      	ldrb	r3, [r1, #4]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	18d2      	adds	r2, r2, r3
 8005316:	7949      	ldrb	r1, [r1, #5]
 8005318:	0609      	lsls	r1, r1, #24
 800531a:	1851      	adds	r1, r2, r1
 800531c:	9100      	str	r1, [sp, #0]
 800531e:	0bca      	lsrs	r2, r1, #15
 8005320:	402a      	ands	r2, r5
 8005322:	d014      	beq.n	800534e <PE_Check_DataMessageVDM+0x5e>
 8005324:	2394      	movs	r3, #148	; 0x94
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	50c1      	str	r1, [r0, r3]
 800532a:	0989      	lsrs	r1, r1, #6
 800532c:	4021      	ands	r1, r4
 800532e:	d107      	bne.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005330:	6801      	ldr	r1, [r0, #0]
 8005332:	6849      	ldr	r1, [r1, #4]
 8005334:	0a09      	lsrs	r1, r1, #8
 8005336:	4029      	ands	r1, r5
 8005338:	d002      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 800533a:	f7ff f840 	bl	80043be <PE_Receive_SVDM>
 800533e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005340:	6841      	ldr	r1, [r0, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	400c      	ands	r4, r1
 8005346:	2c02      	cmp	r4, #2
 8005348:	d134      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 800534a:	7445      	strb	r5, [r0, #17]
 800534c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800534e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8005350:	0449      	lsls	r1, r1, #17
 8005352:	0f49      	lsrs	r1, r1, #29
 8005354:	1e49      	subs	r1, r1, #1
 8005356:	4ab1      	ldr	r2, [pc, #708]	; (800561c <.text_29>)
 8005358:	5481      	strb	r1, [r0, r2]
 800535a:	0006      	movs	r6, r0
 800535c:	2000      	movs	r0, #0
 800535e:	e00f      	b.n	8005380 <PE_Check_DataMessageVDM+0x90>
 8005360:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8005362:	0082      	lsls	r2, r0, #2
 8005364:	1889      	adds	r1, r1, r2
 8005366:	798a      	ldrb	r2, [r1, #6]
 8005368:	79cf      	ldrb	r7, [r1, #7]
 800536a:	023f      	lsls	r7, r7, #8
 800536c:	19d2      	adds	r2, r2, r7
 800536e:	7a0f      	ldrb	r7, [r1, #8]
 8005370:	043f      	lsls	r7, r7, #16
 8005372:	19d2      	adds	r2, r2, r7
 8005374:	7a49      	ldrb	r1, [r1, #9]
 8005376:	0609      	lsls	r1, r1, #24
 8005378:	1851      	adds	r1, r2, r1
 800537a:	0082      	lsls	r2, r0, #2
 800537c:	5099      	str	r1, [r3, r2]
 800537e:	1c40      	adds	r0, r0, #1
 8005380:	49a7      	ldr	r1, [pc, #668]	; (8005620 <.text_30>)
 8005382:	1873      	adds	r3, r6, r1
 8005384:	3118      	adds	r1, #24
 8005386:	1872      	adds	r2, r6, r1
 8005388:	7811      	ldrb	r1, [r2, #0]
 800538a:	4288      	cmp	r0, r1
 800538c:	d3e8      	bcc.n	8005360 <PE_Check_DataMessageVDM+0x70>
 800538e:	9900      	ldr	r1, [sp, #0]
 8005390:	68f0      	ldr	r0, [r6, #12]
 8005392:	2800      	cmp	r0, #0
 8005394:	d008      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 8005396:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005398:	2f00      	cmp	r7, #0
 800539a:	d005      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 800539c:	7c30      	ldrb	r0, [r6, #16]
 800539e:	47b8      	blx	r7
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d101      	bne.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 80053a4:	7474      	strb	r4, [r6, #17]
 80053a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80053a8:	6870      	ldr	r0, [r6, #4]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	4004      	ands	r4, r0
 80053ae:	2c02      	cmp	r4, #2
 80053b0:	d100      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 80053b2:	7475      	strb	r5, [r6, #17]
 80053b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080053b8 <.text_23>:
 80053b8:	0000801e 	.word	0x0000801e

080053bc <.text_24>:
 80053bc:	fffff8ff 	.word	0xfffff8ff

080053c0 <PE_SVDM_CheckIdentity>:
 80053c0:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 80053c2:	0003      	movs	r3, r0
 80053c4:	2000      	movs	r0, #0
 80053c6:	4c97      	ldr	r4, [pc, #604]	; (8005624 <.text_31>)
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	58e3      	ldr	r3, [r4, r3]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80053d0:	045b      	lsls	r3, r3, #17
 80053d2:	0f5b      	lsrs	r3, r3, #29
 80053d4:	1e5c      	subs	r4, r3, #1
 80053d6:	b2e3      	uxtb	r3, r4
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d200      	bcs.n	80053de <PE_SVDM_CheckIdentity+0x1e>
 80053dc:	e0b5      	b.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 80053de:	000b      	movs	r3, r1
 80053e0:	7819      	ldrb	r1, [r3, #0]
 80053e2:	785d      	ldrb	r5, [r3, #1]
 80053e4:	022d      	lsls	r5, r5, #8
 80053e6:	1949      	adds	r1, r1, r5
 80053e8:	789d      	ldrb	r5, [r3, #2]
 80053ea:	042d      	lsls	r5, r5, #16
 80053ec:	1949      	adds	r1, r1, r5
 80053ee:	78dd      	ldrb	r5, [r3, #3]
 80053f0:	062d      	lsls	r5, r5, #24
 80053f2:	194d      	adds	r5, r1, r5
 80053f4:	6015      	str	r5, [r2, #0]
 80053f6:	7919      	ldrb	r1, [r3, #4]
 80053f8:	795e      	ldrb	r6, [r3, #5]
 80053fa:	0236      	lsls	r6, r6, #8
 80053fc:	1989      	adds	r1, r1, r6
 80053fe:	799e      	ldrb	r6, [r3, #6]
 8005400:	0436      	lsls	r6, r6, #16
 8005402:	1989      	adds	r1, r1, r6
 8005404:	79de      	ldrb	r6, [r3, #7]
 8005406:	0636      	lsls	r6, r6, #24
 8005408:	1989      	adds	r1, r1, r6
 800540a:	6051      	str	r1, [r2, #4]
 800540c:	2108      	movs	r1, #8
 800540e:	7a1e      	ldrb	r6, [r3, #8]
 8005410:	7a5f      	ldrb	r7, [r3, #9]
 8005412:	023f      	lsls	r7, r7, #8
 8005414:	19f6      	adds	r6, r6, r7
 8005416:	7a9f      	ldrb	r7, [r3, #10]
 8005418:	043f      	lsls	r7, r7, #16
 800541a:	19f6      	adds	r6, r6, r7
 800541c:	7adf      	ldrb	r7, [r3, #11]
 800541e:	063f      	lsls	r7, r7, #24
 8005420:	19f6      	adds	r6, r6, r7
 8005422:	6096      	str	r6, [r2, #8]
 8005424:	1ee4      	subs	r4, r4, #3
 8005426:	2620      	movs	r6, #32
 8005428:	5d97      	ldrb	r7, [r2, r6]
 800542a:	26e0      	movs	r6, #224	; 0xe0
 800542c:	403e      	ands	r6, r7
 800542e:	466f      	mov	r7, sp
 8005430:	703e      	strb	r6, [r7, #0]
 8005432:	466e      	mov	r6, sp
 8005434:	7836      	ldrb	r6, [r6, #0]
 8005436:	2720      	movs	r7, #32
 8005438:	55d6      	strb	r6, [r2, r7]
 800543a:	0626      	lsls	r6, r4, #24
 800543c:	d022      	beq.n	8005484 <PE_SVDM_CheckIdentity+0xc4>
 800543e:	1e66      	subs	r6, r4, #1
 8005440:	466f      	mov	r7, sp
 8005442:	707e      	strb	r6, [r7, #1]
 8005444:	00ae      	lsls	r6, r5, #2
 8005446:	0f76      	lsrs	r6, r6, #29
 8005448:	2e05      	cmp	r6, #5
 800544a:	d827      	bhi.n	800549c <PE_SVDM_CheckIdentity+0xdc>
 800544c:	a701      	add	r7, pc, #4	; (adr r7, 8005454 <PE_SVDM_CheckIdentity+0x94>)
 800544e:	5dbf      	ldrb	r7, [r7, r6]
 8005450:	44bf      	add	pc, r7
 8005452:	bf00      	nop
 8005454:	5a060632 	.word	0x5a060632
 8005458:	a680      	.short	0xa680
 800545a:	210c      	movs	r1, #12
 800545c:	466c      	mov	r4, sp
 800545e:	7824      	ldrb	r4, [r4, #0]
 8005460:	2608      	movs	r6, #8
 8005462:	4326      	orrs	r6, r4
 8005464:	2420      	movs	r4, #32
 8005466:	5516      	strb	r6, [r2, r4]
 8005468:	7b1c      	ldrb	r4, [r3, #12]
 800546a:	7b5e      	ldrb	r6, [r3, #13]
 800546c:	0236      	lsls	r6, r6, #8
 800546e:	19a4      	adds	r4, r4, r6
 8005470:	7b9e      	ldrb	r6, [r3, #14]
 8005472:	0436      	lsls	r6, r6, #16
 8005474:	19a4      	adds	r4, r4, r6
 8005476:	7bde      	ldrb	r6, [r3, #15]
 8005478:	0636      	lsls	r6, r6, #24
 800547a:	19a4      	adds	r4, r4, r6
 800547c:	6194      	str	r4, [r2, #24]
 800547e:	466c      	mov	r4, sp
 8005480:	7864      	ldrb	r4, [r4, #1]
 8005482:	0026      	movs	r6, r4
 8005484:	d062      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005486:	9e01      	ldr	r6, [sp, #4]
 8005488:	8eb6      	ldrh	r6, [r6, #52]	; 0x34
 800548a:	0636      	lsls	r6, r6, #24
 800548c:	0fb6      	lsrs	r6, r6, #30
 800548e:	2e02      	cmp	r6, #2
 8005490:	d35c      	bcc.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005492:	01ad      	lsls	r5, r5, #6
 8005494:	0f6d      	lsrs	r5, r5, #29
 8005496:	d059      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005498:	1e6d      	subs	r5, r5, #1
 800549a:	2d02      	cmp	r5, #2
 800549c:	d855      	bhi.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 800549e:	2520      	movs	r5, #32
 80054a0:	5d55      	ldrb	r5, [r2, r5]
 80054a2:	08ef      	lsrs	r7, r5, #3
 80054a4:	07ff      	lsls	r7, r7, #31
 80054a6:	d53b      	bpl.n	8005520 <PE_SVDM_CheckIdentity+0x160>
 80054a8:	3108      	adds	r1, #8
 80054aa:	1e64      	subs	r4, r4, #1
 80054ac:	e039      	b.n	8005522 <PE_SVDM_CheckIdentity+0x162>
 80054ae:	210c      	movs	r1, #12
 80054b0:	466c      	mov	r4, sp
 80054b2:	7824      	ldrb	r4, [r4, #0]
 80054b4:	2601      	movs	r6, #1
 80054b6:	4326      	orrs	r6, r4
 80054b8:	2420      	movs	r4, #32
 80054ba:	5516      	strb	r6, [r2, r4]
 80054bc:	7b1c      	ldrb	r4, [r3, #12]
 80054be:	7b5e      	ldrb	r6, [r3, #13]
 80054c0:	0236      	lsls	r6, r6, #8
 80054c2:	19a4      	adds	r4, r4, r6
 80054c4:	7b9e      	ldrb	r6, [r3, #14]
 80054c6:	0436      	lsls	r6, r6, #16
 80054c8:	19a4      	adds	r4, r4, r6
 80054ca:	7bde      	ldrb	r6, [r3, #15]
 80054cc:	0636      	lsls	r6, r6, #24
 80054ce:	19a4      	adds	r4, r4, r6
 80054d0:	60d4      	str	r4, [r2, #12]
 80054d2:	e7d4      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054d4:	210c      	movs	r1, #12
 80054d6:	466c      	mov	r4, sp
 80054d8:	7824      	ldrb	r4, [r4, #0]
 80054da:	2604      	movs	r6, #4
 80054dc:	4326      	orrs	r6, r4
 80054de:	2420      	movs	r4, #32
 80054e0:	5516      	strb	r6, [r2, r4]
 80054e2:	7b1c      	ldrb	r4, [r3, #12]
 80054e4:	7b5e      	ldrb	r6, [r3, #13]
 80054e6:	0236      	lsls	r6, r6, #8
 80054e8:	19a4      	adds	r4, r4, r6
 80054ea:	7b9e      	ldrb	r6, [r3, #14]
 80054ec:	0436      	lsls	r6, r6, #16
 80054ee:	19a4      	adds	r4, r4, r6
 80054f0:	7bde      	ldrb	r6, [r3, #15]
 80054f2:	0636      	lsls	r6, r6, #24
 80054f4:	19a4      	adds	r4, r4, r6
 80054f6:	6154      	str	r4, [r2, #20]
 80054f8:	e7c1      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054fa:	210c      	movs	r1, #12
 80054fc:	466c      	mov	r4, sp
 80054fe:	7824      	ldrb	r4, [r4, #0]
 8005500:	2602      	movs	r6, #2
 8005502:	4326      	orrs	r6, r4
 8005504:	2420      	movs	r4, #32
 8005506:	5516      	strb	r6, [r2, r4]
 8005508:	7b1c      	ldrb	r4, [r3, #12]
 800550a:	7b5e      	ldrb	r6, [r3, #13]
 800550c:	0236      	lsls	r6, r6, #8
 800550e:	19a4      	adds	r4, r4, r6
 8005510:	7b9e      	ldrb	r6, [r3, #14]
 8005512:	0436      	lsls	r6, r6, #16
 8005514:	19a4      	adds	r4, r4, r6
 8005516:	7bde      	ldrb	r6, [r3, #15]
 8005518:	0636      	lsls	r6, r6, #24
 800551a:	19a4      	adds	r4, r4, r6
 800551c:	6114      	str	r4, [r2, #16]
 800551e:	e7ae      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 8005520:	1d09      	adds	r1, r1, #4
 8005522:	b2e4      	uxtb	r4, r4
 8005524:	2c01      	cmp	r4, #1
 8005526:	d110      	bne.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 8005528:	2410      	movs	r4, #16
 800552a:	432c      	orrs	r4, r5
 800552c:	2520      	movs	r5, #32
 800552e:	5554      	strb	r4, [r2, r5]
 8005530:	1859      	adds	r1, r3, r1
 8005532:	780b      	ldrb	r3, [r1, #0]
 8005534:	784c      	ldrb	r4, [r1, #1]
 8005536:	0224      	lsls	r4, r4, #8
 8005538:	191b      	adds	r3, r3, r4
 800553a:	788c      	ldrb	r4, [r1, #2]
 800553c:	0424      	lsls	r4, r4, #16
 800553e:	191b      	adds	r3, r3, r4
 8005540:	78c9      	ldrb	r1, [r1, #3]
 8005542:	0609      	lsls	r1, r1, #24
 8005544:	1859      	adds	r1, r3, r1
 8005546:	61d1      	str	r1, [r2, #28]
 8005548:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 800554a:	2002      	movs	r0, #2
 800554c:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

0800554e <PE_SVDM_CheckSVIDs>:
 800554e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005550:	4b34      	ldr	r3, [pc, #208]	; (8005624 <.text_31>)
 8005552:	0080      	lsls	r0, r0, #2
 8005554:	5818      	ldr	r0, [r3, r0]
 8005556:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8005558:	0440      	lsls	r0, r0, #17
 800555a:	0f40      	lsrs	r0, r0, #29
 800555c:	1e46      	subs	r6, r0, #1
 800555e:	b2f6      	uxtb	r6, r6
 8005560:	2000      	movs	r0, #0
 8005562:	2500      	movs	r5, #0
 8005564:	7610      	strb	r0, [r2, #24]
 8005566:	7650      	strb	r0, [r2, #25]
 8005568:	000b      	movs	r3, r1
 800556a:	0014      	movs	r4, r2
 800556c:	0031      	movs	r1, r6
 800556e:	5c1a      	ldrb	r2, [r3, r0]
 8005570:	1c5e      	adds	r6, r3, #1
 8005572:	5c36      	ldrb	r6, [r6, r0]
 8005574:	0236      	lsls	r6, r6, #8
 8005576:	1992      	adds	r2, r2, r6
 8005578:	7e26      	ldrb	r6, [r4, #24]
 800557a:	0076      	lsls	r6, r6, #1
 800557c:	53a2      	strh	r2, [r4, r6]
 800557e:	7e26      	ldrb	r6, [r4, #24]
 8005580:	2201      	movs	r2, #1
 8005582:	0077      	lsls	r7, r6, #1
 8005584:	5be7      	ldrh	r7, [r4, r7]
 8005586:	2f00      	cmp	r7, #0
 8005588:	d002      	beq.n	8005590 <PE_SVDM_CheckSVIDs+0x42>
 800558a:	1c76      	adds	r6, r6, #1
 800558c:	7626      	strb	r6, [r4, #24]
 800558e:	e001      	b.n	8005594 <PE_SVDM_CheckSVIDs+0x46>
 8005590:	2501      	movs	r5, #1
 8005592:	7662      	strb	r2, [r4, #25]
 8005594:	1c80      	adds	r0, r0, #2
 8005596:	b2c0      	uxtb	r0, r0
 8005598:	5c1e      	ldrb	r6, [r3, r0]
 800559a:	1c5f      	adds	r7, r3, #1
 800559c:	5c3f      	ldrb	r7, [r7, r0]
 800559e:	023f      	lsls	r7, r7, #8
 80055a0:	19f6      	adds	r6, r6, r7
 80055a2:	7e27      	ldrb	r7, [r4, #24]
 80055a4:	007f      	lsls	r7, r7, #1
 80055a6:	53e6      	strh	r6, [r4, r7]
 80055a8:	7e26      	ldrb	r6, [r4, #24]
 80055aa:	0077      	lsls	r7, r6, #1
 80055ac:	5be7      	ldrh	r7, [r4, r7]
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	d002      	beq.n	80055b8 <PE_SVDM_CheckSVIDs+0x6a>
 80055b2:	1c76      	adds	r6, r6, #1
 80055b4:	7626      	strb	r6, [r4, #24]
 80055b6:	e001      	b.n	80055bc <PE_SVDM_CheckSVIDs+0x6e>
 80055b8:	2501      	movs	r5, #1
 80055ba:	7662      	strb	r2, [r4, #25]
 80055bc:	1c80      	adds	r0, r0, #2
 80055be:	b2c0      	uxtb	r0, r0
 80055c0:	008a      	lsls	r2, r1, #2
 80055c2:	4290      	cmp	r0, r2
 80055c4:	d201      	bcs.n	80055ca <PE_SVDM_CheckSVIDs+0x7c>
 80055c6:	002a      	movs	r2, r5
 80055c8:	d0d1      	beq.n	800556e <PE_SVDM_CheckSVIDs+0x20>
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055cc <.text_27>:
 80055cc:	ffff7fff 	.word	0xffff7fff

080055d0 <PE_SVDM_CheckModes>:
 80055d0:	b530      	push	{r4, r5, lr}
 80055d2:	4c14      	ldr	r4, [pc, #80]	; (8005624 <.text_31>)
 80055d4:	0080      	lsls	r0, r0, #2
 80055d6:	5820      	ldr	r0, [r4, r0]
 80055d8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80055da:	0440      	lsls	r0, r0, #17
 80055dc:	0f40      	lsrs	r0, r0, #29
 80055de:	1e40      	subs	r0, r0, #1
 80055e0:	b2c0      	uxtb	r0, r0
 80055e2:	2400      	movs	r4, #0
 80055e4:	8399      	strh	r1, [r3, #28]
 80055e6:	601c      	str	r4, [r3, #0]
 80055e8:	5d11      	ldrb	r1, [r2, r4]
 80055ea:	1915      	adds	r5, r2, r4
 80055ec:	786d      	ldrb	r5, [r5, #1]
 80055ee:	022d      	lsls	r5, r5, #8
 80055f0:	1949      	adds	r1, r1, r5
 80055f2:	1915      	adds	r5, r2, r4
 80055f4:	78ad      	ldrb	r5, [r5, #2]
 80055f6:	042d      	lsls	r5, r5, #16
 80055f8:	1949      	adds	r1, r1, r5
 80055fa:	1915      	adds	r5, r2, r4
 80055fc:	78ed      	ldrb	r5, [r5, #3]
 80055fe:	062d      	lsls	r5, r5, #24
 8005600:	1949      	adds	r1, r1, r5
 8005602:	681d      	ldr	r5, [r3, #0]
 8005604:	00ad      	lsls	r5, r5, #2
 8005606:	195d      	adds	r5, r3, r5
 8005608:	6069      	str	r1, [r5, #4]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	1c49      	adds	r1, r1, #1
 800560e:	6019      	str	r1, [r3, #0]
 8005610:	1d24      	adds	r4, r4, #4
 8005612:	b2e4      	uxtb	r4, r4
 8005614:	0081      	lsls	r1, r0, #2
 8005616:	428c      	cmp	r4, r1
 8005618:	d3e6      	bcc.n	80055e8 <PE_SVDM_CheckModes+0x18>
 800561a:	bd30      	pop	{r4, r5, pc}

0800561c <.text_29>:
 800561c:	000004ac 	.word	0x000004ac

08005620 <.text_30>:
 8005620:	00000494 	.word	0x00000494

08005624 <.text_31>:
 8005624:	20000304 	.word	0x20000304

08005628 <USBPD_PRL_TimerCounter>:
 8005628:	4954      	ldr	r1, [pc, #336]	; (800577c <.text_15>)
 800562a:	0080      	lsls	r0, r0, #2
 800562c:	1808      	adds	r0, r1, r0
 800562e:	6801      	ldr	r1, [r0, #0]
 8005630:	790a      	ldrb	r2, [r1, #4]
 8005632:	2a00      	cmp	r2, #0
 8005634:	d002      	beq.n	800563c <USBPD_PRL_TimerCounter+0x14>
 8005636:	790a      	ldrb	r2, [r1, #4]
 8005638:	1e52      	subs	r2, r2, #1
 800563a:	710a      	strb	r2, [r1, #4]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	7841      	ldrb	r1, [r0, #1]
 8005640:	2900      	cmp	r1, #0
 8005642:	d001      	beq.n	8005648 <USBPD_PRL_TimerCounter+0x20>
 8005644:	1e49      	subs	r1, r1, #1
 8005646:	7041      	strb	r1, [r0, #1]
 8005648:	4770      	bx	lr
	...

0800564c <USBPD_PRL_Init>:
 800564c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800564e:	b081      	sub	sp, #4
 8005650:	0014      	movs	r4, r2
 8005652:	001d      	movs	r5, r3
 8005654:	2616      	movs	r6, #22
 8005656:	209c      	movs	r0, #156	; 0x9c
 8005658:	0040      	lsls	r0, r0, #1
 800565a:	f01d ff25 	bl	80234a8 <malloc>
 800565e:	0007      	movs	r7, r0
 8005660:	d01e      	beq.n	80056a0 <USBPD_PRL_Init+0x54>
 8005662:	9e02      	ldr	r6, [sp, #8]
 8005664:	219c      	movs	r1, #156	; 0x9c
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	f01e f8df 	bl	802382a <__aeabi_memclr>
 800566c:	220f      	movs	r2, #15
 800566e:	2103      	movs	r1, #3
 8005670:	1db8      	adds	r0, r7, #6
 8005672:	f01e f8d3 	bl	802381c <__aeabi_memset>
 8005676:	4841      	ldr	r0, [pc, #260]	; (800577c <.text_15>)
 8005678:	4669      	mov	r1, sp
 800567a:	7909      	ldrb	r1, [r1, #4]
 800567c:	0089      	lsls	r1, r1, #2
 800567e:	5047      	str	r7, [r0, r1]
 8005680:	62bc      	str	r4, [r7, #40]	; 0x28
 8005682:	62fd      	str	r5, [r7, #44]	; 0x2c
 8005684:	2001      	movs	r0, #1
 8005686:	9000      	str	r0, [sp, #0]
 8005688:	6870      	ldr	r0, [r6, #4]
 800568a:	0743      	lsls	r3, r0, #29
 800568c:	0fdb      	lsrs	r3, r3, #31
 800568e:	003a      	movs	r2, r7
 8005690:	3230      	adds	r2, #48	; 0x30
 8005692:	bf00      	nop
 8005694:	a103      	add	r1, pc, #12	; (adr r1, 80056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 8005696:	4668      	mov	r0, sp
 8005698:	7900      	ldrb	r0, [r0, #4]
 800569a:	f00e fc19 	bl	8013ed0 <USBPD_PHY_Init>
 800569e:	0006      	movs	r6, r0
 80056a0:	0030      	movs	r0, r6
 80056a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 80056a4:	5cdd 0800 6035 0800 608f 0800 60a9 0800     .\..5`...`...`..
 80056b4:	60b1 0800 579d 0800                         .`...W..

080056bc <USBPD_PRL_GetMemoryConsumption>:
 80056bc:	20ea      	movs	r0, #234	; 0xea
 80056be:	0080      	lsls	r0, r0, #2
 80056c0:	4770      	bx	lr

080056c2 <USBPD_PRL_SetHeader>:
 80056c2:	b530      	push	{r4, r5, lr}
 80056c4:	4c2d      	ldr	r4, [pc, #180]	; (800577c <.text_15>)
 80056c6:	0080      	lsls	r0, r0, #2
 80056c8:	5820      	ldr	r0, [r4, r0]
 80056ca:	8a44      	ldrh	r4, [r0, #18]
 80056cc:	4d2c      	ldr	r5, [pc, #176]	; (8005780 <.text_16>)
 80056ce:	4025      	ands	r5, r4
 80056d0:	0209      	lsls	r1, r1, #8
 80056d2:	2480      	movs	r4, #128	; 0x80
 80056d4:	0064      	lsls	r4, r4, #1
 80056d6:	4021      	ands	r1, r4
 80056d8:	4329      	orrs	r1, r5
 80056da:	8241      	strh	r1, [r0, #18]
 80056dc:	4c29      	ldr	r4, [pc, #164]	; (8005784 <.text_17>)
 80056de:	400c      	ands	r4, r1
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	2220      	movs	r2, #32
 80056e4:	4011      	ands	r1, r2
 80056e6:	4321      	orrs	r1, r4
 80056e8:	8241      	strh	r1, [r0, #18]
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <.text_18>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	0199      	lsls	r1, r3, #6
 80056f0:	23c0      	movs	r3, #192	; 0xc0
 80056f2:	400b      	ands	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	8243      	strh	r3, [r0, #18]
 80056f8:	bd30      	pop	{r4, r5, pc}

080056fa <USBPD_PRL_SetHeaderPowerRole>:
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <.text_15>)
 80056fc:	0080      	lsls	r0, r0, #2
 80056fe:	5810      	ldr	r0, [r2, r0]
 8005700:	8a42      	ldrh	r2, [r0, #18]
 8005702:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <.text_16>)
 8005704:	4013      	ands	r3, r2
 8005706:	0209      	lsls	r1, r1, #8
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	0052      	lsls	r2, r2, #1
 800570c:	e007      	b.n	800571e <.text_10>

0800570e <USBPD_PRL_SetHeaderDataRole>:
 800570e:	4a1b      	ldr	r2, [pc, #108]	; (800577c <.text_15>)
 8005710:	0080      	lsls	r0, r0, #2
 8005712:	5810      	ldr	r0, [r2, r0]
 8005714:	8a42      	ldrh	r2, [r0, #18]
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <.text_17>)
 8005718:	4013      	ands	r3, r2
 800571a:	0149      	lsls	r1, r1, #5
 800571c:	2220      	movs	r2, #32

0800571e <.text_10>:
 800571e:	4011      	ands	r1, r2
 8005720:	4319      	orrs	r1, r3
 8005722:	8241      	strh	r1, [r0, #18]
 8005724:	4770      	bx	lr

08005726 <USBPD_PRL_SetHeaderSpecification>:
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <.text_15>)
 8005728:	0080      	lsls	r0, r0, #2
 800572a:	5810      	ldr	r0, [r2, r0]
 800572c:	8a42      	ldrh	r2, [r0, #18]
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <.text_18>)
 8005730:	4013      	ands	r3, r2
 8005732:	0189      	lsls	r1, r1, #6
 8005734:	22c0      	movs	r2, #192	; 0xc0
 8005736:	400a      	ands	r2, r1
 8005738:	431a      	orrs	r2, r3
 800573a:	8242      	strh	r2, [r0, #18]
 800573c:	4770      	bx	lr

0800573e <USBPD_PRL_CBL_SetHeaderSpecification>:
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <.text_15>)
 8005740:	0080      	lsls	r0, r0, #2
 8005742:	5810      	ldr	r0, [r2, r0]
 8005744:	018a      	lsls	r2, r1, #6
 8005746:	21c0      	movs	r1, #192	; 0xc0
 8005748:	4011      	ands	r1, r2
 800574a:	4a0f      	ldr	r2, [pc, #60]	; (8005788 <.text_18>)
 800574c:	8a83      	ldrh	r3, [r0, #20]
 800574e:	4013      	ands	r3, r2
 8005750:	430b      	orrs	r3, r1
 8005752:	8283      	strh	r3, [r0, #20]
 8005754:	8ac3      	ldrh	r3, [r0, #22]
 8005756:	401a      	ands	r2, r3
 8005758:	4311      	orrs	r1, r2
 800575a:	82c1      	strh	r1, [r0, #22]
 800575c:	4770      	bx	lr

0800575e <USBPD_PRL_SRCSetSinkNG>:
 800575e:	b580      	push	{r7, lr}
 8005760:	f00e fcab 	bl	80140ba <USBPD_PHY_SetResistor_SinkTxNG>
 8005764:	bd01      	pop	{r0, pc}

08005766 <USBPD_PRL_SRCReleaseSinkNG>:
 8005766:	b510      	push	{r4, lr}
 8005768:	0004      	movs	r4, r0
 800576a:	f00e fcb5 	bl	80140d8 <USBPD_PHY_SetResistor_SinkTxOK>
 800576e:	2000      	movs	r0, #0
 8005770:	4902      	ldr	r1, [pc, #8]	; (800577c <.text_15>)
 8005772:	00a2      	lsls	r2, r4, #2
 8005774:	5889      	ldr	r1, [r1, r2]
 8005776:	7148      	strb	r0, [r1, #5]
 8005778:	bd10      	pop	{r4, pc}
	...

0800577c <.text_15>:
 800577c:	20000310 	.word	0x20000310

08005780 <.text_16>:
 8005780:	0000feff 	.word	0x0000feff

08005784 <.text_17>:
 8005784:	0000ffdf 	.word	0x0000ffdf

08005788 <.text_18>:
 8005788:	0000ff3f 	.word	0x0000ff3f

0800578c <USBPD_PRL_IsResistor_SinkTxOK>:
 800578c:	b580      	push	{r7, lr}
 800578e:	f00e fcc9 	bl	8014124 <USBPD_PHY_IsResistor_SinkTxOk>
 8005792:	bd02      	pop	{r1, pc}

08005794 <USBPD_PRL_FastRoleSwapSignalling>:
 8005794:	b580      	push	{r7, lr}
 8005796:	f00e fcd5 	bl	8014144 <USBPD_PHY_FastRoleSwapSignalling>
 800579a:	bd01      	pop	{r0, pc}

0800579c <PRL_FastRoleSwapReception>:
 800579c:	b580      	push	{r7, lr}
 800579e:	f7fb fa4d 	bl	8000c3c <PE_PRL_FastRoleSwapReception>
 80057a2:	bd01      	pop	{r0, pc}

080057a4 <USBPD_PRL_SOPCapability>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	f00e fca7 	bl	80140f8 <USBPD_PHY_SOPSupported>
 80057aa:	bd01      	pop	{r0, pc}

080057ac <USBPD_PRL_SendMessage>:
 80057ac:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	2503      	movs	r5, #3
 80057b2:	4668      	mov	r0, sp
 80057b4:	7f00      	ldrb	r0, [r0, #28]
 80057b6:	9005      	str	r0, [sp, #20]
 80057b8:	48ca      	ldr	r0, [pc, #808]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	0092      	lsls	r2, r2, #2
 80057be:	1880      	adds	r0, r0, r2
 80057c0:	9000      	str	r0, [sp, #0]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	0004      	movs	r4, r0
 80057c6:	7962      	ldrb	r2, [r4, #5]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d004      	beq.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057cc:	7a62      	ldrb	r2, [r4, #9]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d101      	bne.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057d2:	220f      	movs	r2, #15
 80057d4:	7142      	strb	r2, [r0, #5]
 80057d6:	466a      	mov	r2, sp
 80057d8:	7111      	strb	r1, [r2, #4]
 80057da:	4669      	mov	r1, sp
 80057dc:	7909      	ldrb	r1, [r1, #4]
 80057de:	9104      	str	r1, [sp, #16]
 80057e0:	1861      	adds	r1, r4, r1
 80057e2:	9a05      	ldr	r2, [sp, #20]
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	1c52      	adds	r2, r2, #1
 80057e8:	466e      	mov	r6, sp
 80057ea:	7172      	strb	r2, [r6, #5]
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	0052      	lsls	r2, r2, #1
 80057f0:	9203      	str	r2, [sp, #12]
 80057f2:	2600      	movs	r6, #0
 80057f4:	9302      	str	r3, [sp, #8]
 80057f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057f8:	7963      	ldrb	r3, [r4, #5]
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d900      	bls.n	8005800 <USBPD_PRL_SendMessage+0x54>
 80057fe:	e1f6      	b.n	8005bee <USBPD_PRL_SendMessage+0x442>
 8005800:	a701      	add	r7, pc, #4	; (adr r7, 8005808 <USBPD_PRL_SendMessage+0x5c>)
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	5aff      	ldrh	r7, [r7, r3]
 8005806:	44bf      	add	pc, r7
 8005808:	00480020 	.word	0x00480020
 800580c:	03e4005e 	.word	0x03e4005e
 8005810:	00a8006a 	.word	0x00a8006a
 8005814:	015a0086 	.word	0x015a0086
 8005818:	03e403e4 	.word	0x03e403e4
 800581c:	030802de 	.word	0x030802de
 8005820:	03560334 	.word	0x03560334
 8005824:	03de03e4 	.word	0x03de03e4
 8005828:	03a6      	.short	0x03a6
 800582a:	f3ef 8710 	mrs	r7, PRIMASK
 800582e:	b672      	cpsid	i
 8005830:	4668      	mov	r0, sp
 8005832:	7f00      	ldrb	r0, [r0, #28]
 8005834:	f7fb f8b4 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8005838:	2800      	cmp	r0, #0
 800583a:	d105      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 800583c:	7aa0      	ldrb	r0, [r4, #10]
 800583e:	2800      	cmp	r0, #0
 8005840:	d102      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 8005842:	20ff      	movs	r0, #255	; 0xff
 8005844:	7260      	strb	r0, [r4, #9]
 8005846:	e000      	b.n	800584a <USBPD_PRL_SendMessage+0x9e>
 8005848:	7266      	strb	r6, [r4, #9]
 800584a:	f387 8810 	msr	PRIMASK, r7
 800584e:	2006      	movs	r0, #6
 8005850:	e1a0      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005852:	4668      	mov	r0, sp
 8005854:	7f00      	ldrb	r0, [r0, #28]
 8005856:	f00e fc30 	bl	80140ba <USBPD_PHY_SetResistor_SinkTxNG>
 800585a:	2002      	movs	r0, #2
 800585c:	9900      	ldr	r1, [sp, #0]
 800585e:	6809      	ldr	r1, [r1, #0]
 8005860:	7148      	strb	r0, [r1, #5]
 8005862:	2013      	movs	r0, #19
 8005864:	7060      	strb	r0, [r4, #1]
 8005866:	e1c4      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005868:	2a01      	cmp	r2, #1
 800586a:	d10f      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 800586c:	7861      	ldrb	r1, [r4, #1]
 800586e:	2900      	cmp	r1, #0
 8005870:	d10a      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005872:	e01c      	b.n	80058ae <USBPD_PRL_SendMessage+0x102>
 8005874:	2a02      	cmp	r2, #2
 8005876:	d109      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 8005878:	4668      	mov	r0, sp
 800587a:	7f00      	ldrb	r0, [r0, #28]
 800587c:	f00e fc52 	bl	8014124 <USBPD_PHY_IsResistor_SinkTxOk>
 8005880:	2801      	cmp	r0, #1
 8005882:	d101      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005884:	2005      	movs	r0, #5
 8005886:	e185      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005888:	2509      	movs	r5, #9
 800588a:	e1b2      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 800588c:	2106      	movs	r1, #6
 800588e:	e154      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1861      	adds	r1, r4, r1
 8005894:	8a49      	ldrh	r1, [r1, #18]
 8005896:	0609      	lsls	r1, r1, #24
 8005898:	0f89      	lsrs	r1, r1, #30
 800589a:	2902      	cmp	r1, #2
 800589c:	d107      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 800589e:	2a01      	cmp	r2, #1
 80058a0:	d101      	bne.n	80058a6 <USBPD_PRL_SendMessage+0xfa>
 80058a2:	7142      	strb	r2, [r0, #5]
 80058a4:	e1a5      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 80058a6:	2a02      	cmp	r2, #2
 80058a8:	d101      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 80058aa:	2104      	movs	r1, #4
 80058ac:	e145      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058ae:	2105      	movs	r1, #5
 80058b0:	e143      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058b2:	9803      	ldr	r0, [sp, #12]
 80058b4:	1820      	adds	r0, r4, r0
 80058b6:	8a43      	ldrh	r3, [r0, #18]
 80058b8:	4acf      	ldr	r2, [pc, #828]	; (8005bf8 <.text_24>)
 80058ba:	401a      	ands	r2, r3
 80058bc:	ab08      	add	r3, sp, #32
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	06db      	lsls	r3, r3, #27
 80058c2:	0edb      	lsrs	r3, r3, #27
 80058c4:	4313      	orrs	r3, r2
 80058c6:	8243      	strh	r3, [r0, #18]
 80058c8:	045a      	lsls	r2, r3, #17
 80058ca:	0c52      	lsrs	r2, r2, #17
 80058cc:	ab08      	add	r3, sp, #32
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	03db      	lsls	r3, r3, #15
 80058d4:	4313      	orrs	r3, r2
 80058d6:	8243      	strh	r3, [r0, #18]
 80058d8:	70a6      	strb	r6, [r4, #2]
 80058da:	8a43      	ldrh	r3, [r0, #18]
 80058dc:	0bda      	lsrs	r2, r3, #15
 80058de:	d023      	beq.n	8005928 <USBPD_PRL_SendMessage+0x17c>
 80058e0:	9a02      	ldr	r2, [sp, #8]
 80058e2:	7892      	ldrb	r2, [r2, #2]
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	18d2      	adds	r2, r2, r3
 80058ec:	83a2      	strh	r2, [r4, #28]
 80058ee:	8ba2      	ldrh	r2, [r4, #28]
 80058f0:	0a93      	lsrs	r3, r2, #10
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d40f      	bmi.n	8005916 <USBPD_PRL_SendMessage+0x16a>
 80058f6:	0ad2      	lsrs	r2, r2, #11
 80058f8:	0712      	lsls	r2, r2, #28
 80058fa:	d122      	bne.n	8005942 <USBPD_PRL_SendMessage+0x196>
 80058fc:	466a      	mov	r2, sp
 80058fe:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005900:	1f12      	subs	r2, r2, #4
 8005902:	8462      	strh	r2, [r4, #34]	; 0x22
 8005904:	05d2      	lsls	r2, r2, #23
 8005906:	0dd2      	lsrs	r2, r2, #23
 8005908:	8ba3      	ldrh	r3, [r4, #28]
 800590a:	27fe      	movs	r7, #254	; 0xfe
 800590c:	023f      	lsls	r7, r7, #8
 800590e:	401f      	ands	r7, r3
 8005910:	433a      	orrs	r2, r7
 8005912:	83a2      	strh	r2, [r4, #28]
 8005914:	e015      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005916:	8466      	strh	r6, [r4, #34]	; 0x22
 8005918:	8a42      	ldrh	r2, [r0, #18]
 800591a:	4bb8      	ldr	r3, [pc, #736]	; (8005bfc <.text_25>)
 800591c:	4013      	ands	r3, r2
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	0152      	lsls	r2, r2, #5
 8005922:	431a      	orrs	r2, r3
 8005924:	8242      	strh	r2, [r0, #18]
 8005926:	e00c      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005928:	4ab4      	ldr	r2, [pc, #720]	; (8005bfc <.text_25>)
 800592a:	401a      	ands	r2, r3
 800592c:	466b      	mov	r3, sp
 800592e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005930:	1e9b      	subs	r3, r3, #2
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	27e0      	movs	r7, #224	; 0xe0
 8005938:	01ff      	lsls	r7, r7, #7
 800593a:	401f      	ands	r7, r3
 800593c:	4317      	orrs	r7, r2
 800593e:	8247      	strh	r7, [r0, #18]
 8005940:	8466      	strh	r6, [r4, #34]	; 0x22
 8005942:	aa08      	add	r2, sp, #32
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	2a0d      	cmp	r2, #13
 8005948:	d10a      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 800594a:	8a40      	ldrh	r0, [r0, #18]
 800594c:	22f0      	movs	r2, #240	; 0xf0
 800594e:	0212      	lsls	r2, r2, #8
 8005950:	4002      	ands	r2, r0
 8005952:	d105      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 8005954:	72ce      	strb	r6, [r1, #11]
 8005956:	220f      	movs	r2, #15
 8005958:	2103      	movs	r1, #3
 800595a:	1da0      	adds	r0, r4, #6
 800595c:	f01d ff5e 	bl	802381c <__aeabi_memset>
 8005960:	2007      	movs	r0, #7
 8005962:	e117      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005964:	4669      	mov	r1, sp
 8005966:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 8005968:	9903      	ldr	r1, [sp, #12]
 800596a:	1841      	adds	r1, r0, r1
 800596c:	4a5d      	ldr	r2, [pc, #372]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800596e:	466b      	mov	r3, sp
 8005970:	7f1b      	ldrb	r3, [r3, #28]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	58d2      	ldr	r2, [r2, r3]
 8005976:	466b      	mov	r3, sp
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	8a52      	ldrh	r2, [r2, #18]
 8005980:	0bd3      	lsrs	r3, r2, #15
 8005982:	d074      	beq.n	8005a6e <USBPD_PRL_SendMessage+0x2c2>
 8005984:	8b83      	ldrh	r3, [r0, #28]
 8005986:	0a9b      	lsrs	r3, r3, #10
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d465      	bmi.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 800598c:	4b55      	ldr	r3, [pc, #340]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800598e:	466f      	mov	r7, sp
 8005990:	7f3f      	ldrb	r7, [r7, #28]
 8005992:	00bf      	lsls	r7, r7, #2
 8005994:	59db      	ldr	r3, [r3, r7]
 8005996:	8b9b      	ldrh	r3, [r3, #28]
 8005998:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 800599a:	2f1b      	cmp	r7, #27
 800599c:	d30a      	bcc.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 800599e:	0bdf      	lsrs	r7, r3, #15
 80059a0:	d008      	beq.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 80059a2:	23e0      	movs	r3, #224	; 0xe0
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4313      	orrs	r3, r2
 80059a8:	824b      	strh	r3, [r1, #18]
 80059aa:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 80059ac:	391a      	subs	r1, #26
 80059ae:	8441      	strh	r1, [r0, #34]	; 0x22
 80059b0:	241e      	movs	r4, #30
 80059b2:	e051      	b.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 80059b4:	0ada      	lsrs	r2, r3, #11
 80059b6:	0712      	lsls	r2, r2, #28
 80059b8:	d107      	bne.n	80059ca <USBPD_PRL_SendMessage+0x21e>
 80059ba:	22fe      	movs	r2, #254	; 0xfe
 80059bc:	0212      	lsls	r2, r2, #8
 80059be:	401a      	ands	r2, r3
 80059c0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	0ddb      	lsrs	r3, r3, #23
 80059c6:	4313      	orrs	r3, r2
 80059c8:	8383      	strh	r3, [r0, #28]
 80059ca:	8a4b      	ldrh	r3, [r1, #18]
 80059cc:	4a8b      	ldr	r2, [pc, #556]	; (8005bfc <.text_25>)
 80059ce:	401a      	ands	r2, r3
 80059d0:	824a      	strh	r2, [r1, #18]
 80059d2:	8b83      	ldrh	r3, [r0, #28]
 80059d4:	0bdb      	lsrs	r3, r3, #15
 80059d6:	d03c      	beq.n	8005a52 <USBPD_PRL_SendMessage+0x2a6>
 80059d8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059da:	1c9b      	adds	r3, r3, #2
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	24e0      	movs	r4, #224	; 0xe0
 80059e2:	01e4      	lsls	r4, r4, #7
 80059e4:	401c      	ands	r4, r3
 80059e6:	4314      	orrs	r4, r2
 80059e8:	824c      	strh	r4, [r1, #18]
 80059ea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80059ec:	1c80      	adds	r0, r0, #2
 80059ee:	0781      	lsls	r1, r0, #30
 80059f0:	0f89      	lsrs	r1, r1, #30
 80059f2:	d025      	beq.n	8005a40 <USBPD_PRL_SendMessage+0x294>
 80059f4:	2200      	movs	r2, #0
 80059f6:	483b      	ldr	r0, [pc, #236]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80059f8:	9b05      	ldr	r3, [sp, #20]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18c0      	adds	r0, r0, r3
 80059fe:	9000      	str	r0, [sp, #0]
 8005a00:	9802      	ldr	r0, [sp, #8]
 8005a02:	9102      	str	r1, [sp, #8]
 8005a04:	e004      	b.n	8005a10 <USBPD_PRL_SendMessage+0x264>
 8005a06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005a08:	1859      	adds	r1, r3, r1
 8005a0a:	1841      	adds	r1, r0, r1
 8005a0c:	710e      	strb	r6, [r1, #4]
 8005a0e:	1c52      	adds	r2, r2, #1
 8005a10:	9900      	ldr	r1, [sp, #0]
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	b2d1      	uxtb	r1, r2
 8005a16:	2404      	movs	r4, #4
 8005a18:	9f02      	ldr	r7, [sp, #8]
 8005a1a:	1be4      	subs	r4, r4, r7
 8005a1c:	42a1      	cmp	r1, r4
 8005a1e:	d3f2      	bcc.n	8005a06 <USBPD_PRL_SendMessage+0x25a>
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	0018      	movs	r0, r3
 8005a24:	3012      	adds	r0, #18
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	1840      	adds	r0, r0, r1
 8005a2a:	8801      	ldrh	r1, [r0, #0]
 8005a2c:	4a73      	ldr	r2, [pc, #460]	; (8005bfc <.text_25>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	0b09      	lsrs	r1, r1, #12
 8005a32:	1c49      	adds	r1, r1, #1
 8005a34:	0309      	lsls	r1, r1, #12
 8005a36:	23e0      	movs	r3, #224	; 0xe0
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	8003      	strh	r3, [r0, #0]
 8005a40:	9800      	ldr	r0, [sp, #0]
 8005a42:	6800      	ldr	r0, [r0, #0]
 8005a44:	3012      	adds	r0, #18
 8005a46:	9903      	ldr	r1, [sp, #12]
 8005a48:	5a40      	ldrh	r0, [r0, r1]
 8005a4a:	0440      	lsls	r0, r0, #17
 8005a4c:	0f40      	lsrs	r0, r0, #29
 8005a4e:	0084      	lsls	r4, r0, #2
 8005a50:	1ca4      	adds	r4, r4, #2
 8005a52:	9800      	ldr	r0, [sp, #0]
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	8446      	strh	r6, [r0, #34]	; 0x22
 8005a58:	9800      	ldr	r0, [sp, #0]
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	8b80      	ldrh	r0, [r0, #28]
 8005a5e:	9902      	ldr	r1, [sp, #8]
 8005a60:	7088      	strb	r0, [r1, #2]
 8005a62:	9800      	ldr	r0, [sp, #0]
 8005a64:	6800      	ldr	r0, [r0, #0]
 8005a66:	8b80      	ldrh	r0, [r0, #28]
 8005a68:	0a00      	lsrs	r0, r0, #8
 8005a6a:	9902      	ldr	r1, [sp, #8]
 8005a6c:	70c8      	strb	r0, [r1, #3]
 8005a6e:	9800      	ldr	r0, [sp, #0]
 8005a70:	6802      	ldr	r2, [r0, #0]
 8005a72:	0010      	movs	r0, r2
 8005a74:	3012      	adds	r0, #18
 8005a76:	9903      	ldr	r1, [sp, #12]
 8005a78:	1840      	adds	r0, r0, r1
 8005a7a:	8803      	ldrh	r3, [r0, #0]
 8005a7c:	498c      	ldr	r1, [pc, #560]	; (8005cb0 <.text_30>)
 8005a7e:	4019      	ands	r1, r3
 8005a80:	320b      	adds	r2, #11
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	5cd2      	ldrb	r2, [r2, r3]
 8005a86:	0253      	lsls	r3, r2, #9
 8005a88:	22e0      	movs	r2, #224	; 0xe0
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	8002      	strh	r2, [r0, #0]
 8005a92:	9802      	ldr	r0, [sp, #8]
 8005a94:	7002      	strb	r2, [r0, #0]
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	3012      	adds	r0, #18
 8005a9c:	9903      	ldr	r1, [sp, #12]
 8005a9e:	5a40      	ldrh	r0, [r0, r1]
 8005aa0:	0a00      	lsrs	r0, r0, #8
 8005aa2:	9902      	ldr	r1, [sp, #8]
 8005aa4:	7048      	strb	r0, [r1, #1]
 8005aa6:	9800      	ldr	r0, [sp, #0]
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	81c4      	strh	r4, [r0, #14]
 8005aac:	210a      	movs	r1, #10
 8005aae:	7141      	strb	r1, [r0, #5]
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	7401      	strb	r1, [r0, #16]
 8005ab4:	b2a0      	uxth	r0, r4
 8005ab6:	9000      	str	r0, [sp, #0]
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	4668      	mov	r0, sp
 8005abc:	7902      	ldrb	r2, [r0, #4]
 8005abe:	7f01      	ldrb	r1, [r0, #28]
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	4e7c      	ldr	r6, [pc, #496]	; (8005cb4 <.text_31>)
 8005ac4:	6836      	ldr	r6, [r6, #0]
 8005ac6:	47b0      	blx	r6
 8005ac8:	497b      	ldr	r1, [pc, #492]	; (8005cb8 <.text_32>)
 8005aca:	4668      	mov	r0, sp
 8005acc:	7940      	ldrb	r0, [r0, #5]
 8005ace:	f00f feb5 	bl	801583c <USBPD_TIM_Start>
 8005ad2:	b2a3      	uxth	r3, r4
 8005ad4:	9a02      	ldr	r2, [sp, #8]
 8005ad6:	4668      	mov	r0, sp
 8005ad8:	7901      	ldrb	r1, [r0, #4]
 8005ada:	7f00      	ldrb	r0, [r0, #28]
 8005adc:	f00e faa7 	bl	801402e <USBPD_PHY_SendMessage>
 8005ae0:	e087      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005ae2:	bf00      	nop
 8005ae4:	20000310 	.word	0x20000310
 8005ae8:	f3ef 8410 	mrs	r4, PRIMASK
 8005aec:	b672      	cpsid	i
 8005aee:	9800      	ldr	r0, [sp, #0]
 8005af0:	6800      	ldr	r0, [r0, #0]
 8005af2:	7940      	ldrb	r0, [r0, #5]
 8005af4:	280a      	cmp	r0, #10
 8005af6:	d109      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005af8:	4668      	mov	r0, sp
 8005afa:	7940      	ldrb	r0, [r0, #5]
 8005afc:	f00f ff0c 	bl	8015918 <USBPD_TIM_IsExpired>
 8005b00:	2801      	cmp	r0, #1
 8005b02:	d103      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005b04:	200d      	movs	r0, #13
 8005b06:	9900      	ldr	r1, [sp, #0]
 8005b08:	6809      	ldr	r1, [r1, #0]
 8005b0a:	7148      	strb	r0, [r1, #5]
 8005b0c:	f384 8810 	msr	PRIMASK, r4
 8005b10:	e06f      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b12:	7aca      	ldrb	r2, [r1, #11]
 8005b14:	8b67      	ldrh	r7, [r4, #26]
 8005b16:	053f      	lsls	r7, r7, #20
 8005b18:	0f7f      	lsrs	r7, r7, #29
 8005b1a:	42ba      	cmp	r2, r7
 8005b1c:	d10c      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b1e:	7ea3      	ldrb	r3, [r4, #26]
 8005b20:	06db      	lsls	r3, r3, #27
 8005b22:	0edb      	lsrs	r3, r3, #27
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b28:	1c52      	adds	r2, r2, #1
 8005b2a:	0750      	lsls	r0, r2, #29
 8005b2c:	0f40      	lsrs	r0, r0, #29
 8005b2e:	72c8      	strb	r0, [r1, #11]
 8005b30:	9800      	ldr	r0, [sp, #0]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	7146      	strb	r6, [r0, #5]
 8005b36:	e011      	b.n	8005b5c <USBPD_PRL_SendMessage+0x3b0>
 8005b38:	210d      	movs	r1, #13
 8005b3a:	7141      	strb	r1, [r0, #5]
 8005b3c:	e059      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b3e:	7ac8      	ldrb	r0, [r1, #11]
 8005b40:	1c40      	adds	r0, r0, #1
 8005b42:	0740      	lsls	r0, r0, #29
 8005b44:	0f40      	lsrs	r0, r0, #29
 8005b46:	72c8      	strb	r0, [r1, #11]
 8005b48:	9800      	ldr	r0, [sp, #0]
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	7146      	strb	r6, [r0, #5]
 8005b4e:	8ba1      	ldrh	r1, [r4, #28]
 8005b50:	485a      	ldr	r0, [pc, #360]	; (8005cbc <.text_33>)
 8005b52:	4008      	ands	r0, r1
 8005b54:	83a0      	strh	r0, [r4, #28]
 8005b56:	495a      	ldr	r1, [pc, #360]	; (8005cc0 <.text_34>)
 8005b58:	4001      	ands	r1, r0
 8005b5a:	83a1      	strh	r1, [r4, #28]
 8005b5c:	2505      	movs	r5, #5
 8005b5e:	e048      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b60:	78a0      	ldrb	r0, [r4, #2]
 8005b62:	1c40      	adds	r0, r0, #1
 8005b64:	70a0      	strb	r0, [r4, #2]
 8005b66:	9a03      	ldr	r2, [sp, #12]
 8005b68:	18a2      	adds	r2, r4, r2
 8005b6a:	8a52      	ldrh	r2, [r2, #18]
 8005b6c:	0613      	lsls	r3, r2, #24
 8005b6e:	0f9b      	lsrs	r3, r3, #30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <USBPD_PRL_SendMessage+0x3cc>
 8005b74:	2303      	movs	r3, #3
 8005b76:	e000      	b.n	8005b7a <USBPD_PRL_SendMessage+0x3ce>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	0bd2      	lsrs	r2, r2, #15
 8005b7c:	d006      	beq.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b7e:	8ba2      	ldrh	r2, [r4, #28]
 8005b80:	0bd4      	lsrs	r4, r2, #15
 8005b82:	d103      	bne.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b84:	05d2      	lsls	r2, r2, #23
 8005b86:	0dd2      	lsrs	r2, r2, #23
 8005b88:	2a1b      	cmp	r2, #27
 8005b8a:	d207      	bcs.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b8c:	b2c0      	uxtb	r0, r0
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d304      	bcc.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b92:	2010      	movs	r0, #16
 8005b94:	9900      	ldr	r1, [sp, #0]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	7148      	strb	r0, [r1, #5]
 8005b9a:	e02a      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b9c:	9800      	ldr	r0, [sp, #0]
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	7146      	strb	r6, [r0, #5]
 8005ba2:	2507      	movs	r5, #7
 8005ba4:	7ac8      	ldrb	r0, [r1, #11]
 8005ba6:	1c40      	adds	r0, r0, #1
 8005ba8:	2207      	movs	r2, #7
 8005baa:	4002      	ands	r2, r0
 8005bac:	72ca      	strb	r2, [r1, #11]
 8005bae:	e020      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	7141      	strb	r1, [r0, #5]
 8005bb4:	2002      	movs	r0, #2
 8005bb6:	7420      	strb	r0, [r4, #16]
 8005bb8:	493f      	ldr	r1, [pc, #252]	; (8005cb8 <.text_32>)
 8005bba:	4668      	mov	r0, sp
 8005bbc:	7940      	ldrb	r0, [r0, #5]
 8005bbe:	f00f fe3d 	bl	801583c <USBPD_TIM_Start>
 8005bc2:	89e3      	ldrh	r3, [r4, #14]
 8005bc4:	9a02      	ldr	r2, [sp, #8]
 8005bc6:	4668      	mov	r0, sp
 8005bc8:	7901      	ldrb	r1, [r0, #4]
 8005bca:	7f00      	ldrb	r0, [r0, #28]
 8005bcc:	f00e fa2f 	bl	801402e <USBPD_PHY_SendMessage>
 8005bd0:	4668      	mov	r0, sp
 8005bd2:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8005bd4:	9000      	str	r0, [sp, #0]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	4668      	mov	r0, sp
 8005bda:	7902      	ldrb	r2, [r0, #4]
 8005bdc:	7f01      	ldrb	r1, [r0, #28]
 8005bde:	2002      	movs	r0, #2
 8005be0:	4c34      	ldr	r4, [pc, #208]	; (8005cb4 <.text_31>)
 8005be2:	6824      	ldr	r4, [r4, #0]
 8005be4:	47a0      	blx	r4
 8005be6:	e004      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005be8:	7146      	strb	r6, [r0, #5]
 8005bea:	2506      	movs	r5, #6
 8005bec:	e001      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bee:	7146      	strb	r6, [r0, #5]
 8005bf0:	2510      	movs	r5, #16
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	b009      	add	sp, #36	; 0x24
 8005bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bf8 <.text_24>:
 8005bf8:	0000ffe0 	.word	0x0000ffe0

08005bfc <.text_25>:
 8005bfc:	00008fff 	.word	0x00008fff

08005c00 <USBPD_PRL_ResetRequestProcess>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	0005      	movs	r5, r0
 8005c04:	000e      	movs	r6, r1
 8005c06:	482f      	ldr	r0, [pc, #188]	; (8005cc4 <.text_35>)
 8005c08:	00a9      	lsls	r1, r5, #2
 8005c0a:	1840      	adds	r0, r0, r1
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	6804      	ldr	r4, [r0, #0]
 8005c10:	2700      	movs	r7, #0
 8005c12:	70e7      	strb	r7, [r4, #3]
 8005c14:	72e7      	strb	r7, [r4, #11]
 8005c16:	7327      	strb	r7, [r4, #12]
 8005c18:	7367      	strb	r7, [r4, #13]
 8005c1a:	220f      	movs	r2, #15
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	1da0      	adds	r0, r4, #6
 8005c20:	f01d fdfc 	bl	802381c <__aeabi_memset>
 8005c24:	9800      	ldr	r0, [sp, #0]
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	7147      	strb	r7, [r0, #5]
 8005c2a:	9700      	str	r7, [sp, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	0032      	movs	r2, r6
 8005c30:	0029      	movs	r1, r5
 8005c32:	2002      	movs	r0, #2
 8005c34:	4f1f      	ldr	r7, [pc, #124]	; (8005cb4 <.text_31>)
 8005c36:	683f      	ldr	r7, [r7, #0]
 8005c38:	47b8      	blx	r7
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	f000 f849 	bl	8005cd2 <PRL_DisableRX>
 8005c40:	0031      	movs	r1, r6
 8005c42:	0028      	movs	r0, r5
 8005c44:	f00e f9dd 	bl	8014002 <USBPD_PHY_ResetRequest>
 8005c48:	2005      	movs	r0, #5
 8005c4a:	7120      	strb	r0, [r4, #4]
 8005c4c:	78e0      	ldrb	r0, [r4, #3]
 8005c4e:	2801      	cmp	r0, #1
 8005c50:	d002      	beq.n	8005c58 <USBPD_PRL_ResetRequestProcess+0x58>
 8005c52:	7920      	ldrb	r0, [r4, #4]
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1f9      	bne.n	8005c4c <USBPD_PRL_ResetRequestProcess+0x4c>
 8005c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005c5a <USBDPD_PRL_BistCarrierEyeMode>:
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	2905      	cmp	r1, #5
 8005c5e:	d102      	bne.n	8005c66 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005c60:	f00e fa04 	bl	801406c <USBPD_PHY_Send_BIST_Pattern>
 8005c64:	bd02      	pop	{r1, pc}
 8005c66:	2010      	movs	r0, #16
 8005c68:	bd02      	pop	{r1, pc}

08005c6a <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	2905      	cmp	r1, #5
 8005c6e:	d103      	bne.n	8005c78 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005c70:	2107      	movs	r1, #7
 8005c72:	f00e fa0b 	bl	801408c <USBPD_PHY_ExitTransmit>
 8005c76:	bd02      	pop	{r1, pc}
 8005c78:	2010      	movs	r0, #16
 8005c7a:	bd02      	pop	{r1, pc}

08005c7c <USBPD_PRL_Reset>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	0004      	movs	r4, r0
 8005c80:	4810      	ldr	r0, [pc, #64]	; (8005cc4 <.text_35>)
 8005c82:	00a1      	lsls	r1, r4, #2
 8005c84:	5845      	ldr	r5, [r0, r1]
 8005c86:	2600      	movs	r6, #0
 8005c88:	716e      	strb	r6, [r5, #5]
 8005c8a:	702e      	strb	r6, [r5, #0]
 8005c8c:	712e      	strb	r6, [r5, #4]
 8005c8e:	72ee      	strb	r6, [r5, #11]
 8005c90:	732e      	strb	r6, [r5, #12]
 8005c92:	736e      	strb	r6, [r5, #13]
 8005c94:	220f      	movs	r2, #15
 8005c96:	2103      	movs	r1, #3
 8005c98:	1da8      	adds	r0, r5, #6
 8005c9a:	f01d fdbf 	bl	802381c <__aeabi_memset>
 8005c9e:	2025      	movs	r0, #37	; 0x25
 8005ca0:	542e      	strb	r6, [r5, r0]
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f00e f9a3 	bl	8013fee <USBPD_PHY_Reset>
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f00e fa5a 	bl	8014162 <USBPD_PHY_EnableRX>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}

08005cb0 <.text_30>:
 8005cb0:	0000f1ff 	.word	0x0000f1ff

08005cb4 <.text_31>:
 8005cb4:	20000000 	.word	0x20000000

08005cb8 <.text_32>:
 8005cb8:	00002710 	.word	0x00002710

08005cbc <.text_33>:
 8005cbc:	000087ff 	.word	0x000087ff

08005cc0 <.text_34>:
 8005cc0:	0000fbff 	.word	0x0000fbff

08005cc4 <.text_35>:
 8005cc4:	20000310 	.word	0x20000310

08005cc8 <USBPD_PRL_Stop>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	f00e fa59 	bl	8014180 <USBPD_PHY_DisableRX>
 8005cce:	bd01      	pop	{r0, pc}

08005cd0 <USBPD_PRL_DeInit>:
 8005cd0:	4770      	bx	lr

08005cd2 <PRL_DisableRX>:
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	f00e fa54 	bl	8014180 <USBPD_PHY_DisableRX>
 8005cd8:	bd01      	pop	{r0, pc}
	...

08005cdc <PRL_Received>:
 8005cdc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	a809      	add	r0, sp, #36	; 0x24
 8005ce2:	7805      	ldrb	r5, [r0, #0]
 8005ce4:	48d0      	ldr	r0, [pc, #832]	; (8006028 <PRL_Received+0x34c>)
 8005ce6:	00a9      	lsls	r1, r5, #2
 8005ce8:	1846      	adds	r6, r0, r1
 8005cea:	6834      	ldr	r4, [r6, #0]
 8005cec:	4628      	mov	r0, r5
 8005cee:	f00e f973 	bl	8013fd8 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005cf2:	a909      	add	r1, sp, #36	; 0x24
 8005cf4:	7809      	ldrb	r1, [r1, #0]
 8005cf6:	0049      	lsls	r1, r1, #1
 8005cf8:	466a      	mov	r2, sp
 8005cfa:	7011      	strb	r1, [r2, #0]
 8005cfc:	0001      	movs	r1, r0
 8005cfe:	4668      	mov	r0, sp
 8005d00:	7800      	ldrb	r0, [r0, #0]
 8005d02:	f00f fd9b 	bl	801583c <USBPD_TIM_Start>
 8005d06:	2030      	movs	r0, #48	; 0x30
 8005d08:	5c20      	ldrb	r0, [r4, r0]
 8005d0a:	2131      	movs	r1, #49	; 0x31
 8005d0c:	5c61      	ldrb	r1, [r4, r1]
 8005d0e:	0209      	lsls	r1, r1, #8
 8005d10:	1840      	adds	r0, r0, r1
 8005d12:	4669      	mov	r1, sp
 8005d14:	8088      	strh	r0, [r1, #4]
 8005d16:	4668      	mov	r0, sp
 8005d18:	8880      	ldrh	r0, [r0, #4]
 8005d1a:	0440      	lsls	r0, r0, #17
 8005d1c:	0f40      	lsrs	r0, r0, #29
 8005d1e:	0080      	lsls	r0, r0, #2
 8005d20:	9005      	str	r0, [sp, #20]
 8005d22:	1c80      	adds	r0, r0, #2
 8005d24:	9007      	str	r0, [sp, #28]
 8005d26:	48c1      	ldr	r0, [pc, #772]	; (800602c <.text_40>)
 8005d28:	8889      	ldrh	r1, [r1, #4]
 8005d2a:	4001      	ands	r1, r0
 8005d2c:	2901      	cmp	r1, #1
 8005d2e:	d116      	bne.n	8005d5e <PRL_Received+0x82>
 8005d30:	0068      	lsls	r0, r5, #1
 8005d32:	1c40      	adds	r0, r0, #1
 8005d34:	b2c0      	uxtb	r0, r0
 8005d36:	f00f fdef 	bl	8015918 <USBPD_TIM_IsExpired>
 8005d3a:	2801      	cmp	r0, #1
 8005d3c:	d04c      	beq.n	8005dd8 <PRL_Received+0xfc>
 8005d3e:	200b      	movs	r0, #11
 8005d40:	6831      	ldr	r1, [r6, #0]
 8005d42:	7148      	strb	r0, [r1, #5]
 8005d44:	4668      	mov	r0, sp
 8005d46:	8880      	ldrh	r0, [r0, #4]
 8005d48:	8360      	strh	r0, [r4, #26]
 8005d4a:	9807      	ldr	r0, [sp, #28]
 8005d4c:	9000      	str	r0, [sp, #0]
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3330      	adds	r3, #48	; 0x30
 8005d52:	a80a      	add	r0, sp, #40	; 0x28
 8005d54:	7802      	ldrb	r2, [r0, #0]
 8005d56:	a809      	add	r0, sp, #36	; 0x24
 8005d58:	7801      	ldrb	r1, [r0, #0]
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e15f      	b.n	800601e <PRL_Received+0x342>
 8005d5e:	49b4      	ldr	r1, [pc, #720]	; (8006030 <.text_41>)
 8005d60:	880f      	ldrh	r7, [r1, #0]
 8005d62:	2601      	movs	r6, #1
 8005d64:	72a6      	strb	r6, [r4, #10]
 8005d66:	a90a      	add	r1, sp, #40	; 0x28
 8005d68:	7809      	ldrb	r1, [r1, #0]
 8005d6a:	1861      	adds	r1, r4, r1
 8005d6c:	9104      	str	r1, [sp, #16]
 8005d6e:	2500      	movs	r5, #0
 8005d70:	4669      	mov	r1, sp
 8005d72:	8889      	ldrh	r1, [r1, #4]
 8005d74:	4008      	ands	r0, r1
 8005d76:	280d      	cmp	r0, #13
 8005d78:	d106      	bne.n	8005d88 <PRL_Received+0xac>
 8005d7a:	9904      	ldr	r1, [sp, #16]
 8005d7c:	72cd      	strb	r5, [r1, #11]
 8005d7e:	220f      	movs	r2, #15
 8005d80:	2103      	movs	r1, #3
 8005d82:	1da0      	adds	r0, r4, #6
 8005d84:	f01d fd4a 	bl	802381c <__aeabi_memset>
 8005d88:	a80a      	add	r0, sp, #40	; 0x28
 8005d8a:	7800      	ldrb	r0, [r0, #0]
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d10d      	bne.n	8005dac <PRL_Received+0xd0>
 8005d90:	8a61      	ldrh	r1, [r4, #18]
 8005d92:	094a      	lsrs	r2, r1, #5
 8005d94:	2001      	movs	r0, #1
 8005d96:	4010      	ands	r0, r2
 8005d98:	0a0a      	lsrs	r2, r1, #8
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4011      	ands	r1, r2
 8005d9e:	4abf      	ldr	r2, [pc, #764]	; (800609c <.text_44>)
 8005da0:	403a      	ands	r2, r7
 8005da2:	0143      	lsls	r3, r0, #5
 8005da4:	4313      	orrs	r3, r2
 8005da6:	0208      	lsls	r0, r1, #8
 8005da8:	4318      	orrs	r0, r3
 8005daa:	e001      	b.n	8005db0 <PRL_Received+0xd4>
 8005dac:	48bc      	ldr	r0, [pc, #752]	; (80060a0 <.text_45>)
 8005dae:	4038      	ands	r0, r7
 8005db0:	49bc      	ldr	r1, [pc, #752]	; (80060a4 <.text_46>)
 8005db2:	4001      	ands	r1, r0
 8005db4:	4668      	mov	r0, sp
 8005db6:	8880      	ldrh	r0, [r0, #4]
 8005db8:	22e0      	movs	r2, #224	; 0xe0
 8005dba:	0112      	lsls	r2, r2, #4
 8005dbc:	4002      	ands	r2, r0
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	2040      	movs	r0, #64	; 0x40
 8005dc2:	4310      	orrs	r0, r2
 8005dc4:	7620      	strb	r0, [r4, #24]
 8005dc6:	0a00      	lsrs	r0, r0, #8
 8005dc8:	7660      	strb	r0, [r4, #25]
 8005dca:	a80a      	add	r0, sp, #40	; 0x28
 8005dcc:	7801      	ldrb	r1, [r0, #0]
 8005dce:	a809      	add	r0, sp, #36	; 0x24
 8005dd0:	7800      	ldrb	r0, [r0, #0]
 8005dd2:	f7fa ff49 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d100      	bne.n	8005ddc <PRL_Received+0x100>
 8005dda:	e123      	b.n	8006024 <PRL_Received+0x348>
 8005ddc:	7426      	strb	r6, [r4, #16]
 8005dde:	4668      	mov	r0, sp
 8005de0:	7800      	ldrb	r0, [r0, #0]
 8005de2:	f00f fd99 	bl	8015918 <USBPD_TIM_IsExpired>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f9      	beq.n	8005dde <PRL_Received+0x102>
 8005dea:	2302      	movs	r3, #2
 8005dec:	0022      	movs	r2, r4
 8005dee:	3218      	adds	r2, #24
 8005df0:	a80a      	add	r0, sp, #40	; 0x28
 8005df2:	7801      	ldrb	r1, [r0, #0]
 8005df4:	a809      	add	r0, sp, #36	; 0x24
 8005df6:	7800      	ldrb	r0, [r0, #0]
 8005df8:	f00e f919 	bl	801402e <USBPD_PHY_SendMessage>
 8005dfc:	9006      	str	r0, [sp, #24]
 8005dfe:	a80a      	add	r0, sp, #40	; 0x28
 8005e00:	7800      	ldrb	r0, [r0, #0]
 8005e02:	7260      	strb	r0, [r4, #9]
 8005e04:	0021      	movs	r1, r4
 8005e06:	3130      	adds	r1, #48	; 0x30
 8005e08:	a809      	add	r0, sp, #36	; 0x24
 8005e0a:	7800      	ldrb	r0, [r0, #0]
 8005e0c:	f7fa ff60 	bl	8000cd0 <PE_PRL_PostReceiveEventCopy>
 8005e10:	2033      	movs	r0, #51	; 0x33
 8005e12:	5c20      	ldrb	r0, [r4, r0]
 8005e14:	2132      	movs	r1, #50	; 0x32
 8005e16:	5c61      	ldrb	r1, [r4, r1]
 8005e18:	0203      	lsls	r3, r0, #8
 8005e1a:	18ca      	adds	r2, r1, r3
 8005e1c:	466b      	mov	r3, sp
 8005e1e:	80da      	strh	r2, [r3, #6]
 8005e20:	466a      	mov	r2, sp
 8005e22:	8892      	ldrh	r2, [r2, #4]
 8005e24:	0452      	lsls	r2, r2, #17
 8005e26:	0f52      	lsrs	r2, r2, #29
 8005e28:	81da      	strh	r2, [r3, #14]
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	88d2      	ldrh	r2, [r2, #6]
 8005e2e:	05d2      	lsls	r2, r2, #23
 8005e30:	0dd2      	lsrs	r2, r2, #23
 8005e32:	811a      	strh	r2, [r3, #8]
 8005e34:	466a      	mov	r2, sp
 8005e36:	88d2      	ldrh	r2, [r2, #6]
 8005e38:	0bd2      	lsrs	r2, r2, #15
 8005e3a:	819a      	strh	r2, [r3, #12]
 8005e3c:	466a      	mov	r2, sp
 8005e3e:	8892      	ldrh	r2, [r2, #4]
 8005e40:	0bd2      	lsrs	r2, r2, #15
 8005e42:	815a      	strh	r2, [r3, #10]
 8005e44:	d007      	beq.n	8005e56 <PRL_Received+0x17a>
 8005e46:	466a      	mov	r2, sp
 8005e48:	8992      	ldrh	r2, [r2, #12]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d103      	bne.n	8005e56 <PRL_Received+0x17a>
 8005e4e:	4668      	mov	r0, sp
 8005e50:	8900      	ldrh	r0, [r0, #8]
 8005e52:	1d00      	adds	r0, r0, #4
 8005e54:	e01b      	b.n	8005e8e <PRL_Received+0x1b2>
 8005e56:	7822      	ldrb	r2, [r4, #0]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d117      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e5c:	466a      	mov	r2, sp
 8005e5e:	89d2      	ldrh	r2, [r2, #14]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d013      	beq.n	8005e8c <PRL_Received+0x1b0>
 8005e64:	466a      	mov	r2, sp
 8005e66:	8892      	ldrh	r2, [r2, #4]
 8005e68:	06d2      	lsls	r2, r2, #27
 8005e6a:	0ed2      	lsrs	r2, r2, #27
 8005e6c:	2a03      	cmp	r2, #3
 8005e6e:	d10d      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e70:	0200      	lsls	r0, r0, #8
 8005e72:	1808      	adds	r0, r1, r0
 8005e74:	2134      	movs	r1, #52	; 0x34
 8005e76:	5c61      	ldrb	r1, [r4, r1]
 8005e78:	0409      	lsls	r1, r1, #16
 8005e7a:	1840      	adds	r0, r0, r1
 8005e7c:	2135      	movs	r1, #53	; 0x35
 8005e7e:	5c61      	ldrb	r1, [r4, r1]
 8005e80:	0609      	lsls	r1, r1, #24
 8005e82:	1840      	adds	r0, r0, r1
 8005e84:	0f00      	lsrs	r0, r0, #28
 8005e86:	2808      	cmp	r0, #8
 8005e88:	d100      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e8a:	7026      	strb	r6, [r4, #0]
 8005e8c:	9807      	ldr	r0, [sp, #28]
 8005e8e:	9000      	str	r0, [sp, #0]
 8005e90:	0023      	movs	r3, r4
 8005e92:	3330      	adds	r3, #48	; 0x30
 8005e94:	a80a      	add	r0, sp, #40	; 0x28
 8005e96:	7802      	ldrb	r2, [r0, #0]
 8005e98:	a809      	add	r0, sp, #36	; 0x24
 8005e9a:	7801      	ldrb	r1, [r0, #0]
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	4fc1      	ldr	r7, [pc, #772]	; (80061a4 <.text_51>)
 8005ea0:	683f      	ldr	r7, [r7, #0]
 8005ea2:	47b8      	blx	r7
 8005ea4:	9806      	ldr	r0, [sp, #24]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d10b      	bne.n	8005ec2 <PRL_Received+0x1e6>
 8005eaa:	2002      	movs	r0, #2
 8005eac:	9000      	str	r0, [sp, #0]
 8005eae:	0023      	movs	r3, r4
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	a80a      	add	r0, sp, #40	; 0x28
 8005eb4:	7802      	ldrb	r2, [r0, #0]
 8005eb6:	a809      	add	r0, sp, #36	; 0x24
 8005eb8:	7801      	ldrb	r1, [r0, #0]
 8005eba:	2002      	movs	r0, #2
 8005ebc:	4fb9      	ldr	r7, [pc, #740]	; (80061a4 <.text_51>)
 8005ebe:	683f      	ldr	r7, [r7, #0]
 8005ec0:	47b8      	blx	r7
 8005ec2:	4668      	mov	r0, sp
 8005ec4:	8880      	ldrh	r0, [r0, #4]
 8005ec6:	0a40      	lsrs	r0, r0, #9
 8005ec8:	2107      	movs	r1, #7
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	7992      	ldrb	r2, [r2, #6]
 8005ece:	2307      	movs	r3, #7
 8005ed0:	4003      	ands	r3, r0
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d103      	bne.n	8005ede <PRL_Received+0x202>
 8005ed6:	9a06      	ldr	r2, [sp, #24]
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	d100      	bne.n	8005ede <PRL_Received+0x202>
 8005edc:	e08f      	b.n	8005ffe <PRL_Received+0x322>
 8005ede:	4001      	ands	r1, r0
 8005ee0:	9804      	ldr	r0, [sp, #16]
 8005ee2:	7181      	strb	r1, [r0, #6]
 8005ee4:	4668      	mov	r0, sp
 8005ee6:	8880      	ldrh	r0, [r0, #4]
 8005ee8:	8420      	strh	r0, [r4, #32]
 8005eea:	4668      	mov	r0, sp
 8005eec:	8940      	ldrh	r0, [r0, #10]
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d043      	beq.n	8005f7a <PRL_Received+0x29e>
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	8980      	ldrh	r0, [r0, #12]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d03f      	beq.n	8005f7a <PRL_Received+0x29e>
 8005efa:	4668      	mov	r0, sp
 8005efc:	88c0      	ldrh	r0, [r0, #6]
 8005efe:	83e0      	strh	r0, [r4, #30]
 8005f00:	4668      	mov	r0, sp
 8005f02:	88c0      	ldrh	r0, [r0, #6]
 8005f04:	0440      	lsls	r0, r0, #17
 8005f06:	0f01      	lsrs	r1, r0, #28
 8005f08:	201a      	movs	r0, #26
 8005f0a:	4348      	muls	r0, r1
 8005f0c:	9905      	ldr	r1, [sp, #20]
 8005f0e:	1e89      	subs	r1, r1, #2
 8005f10:	466a      	mov	r2, sp
 8005f12:	88d2      	ldrh	r2, [r2, #6]
 8005f14:	23f8      	movs	r3, #248	; 0xf8
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d12f      	bne.n	8005f7c <PRL_Received+0x2a0>
 8005f1c:	466a      	mov	r2, sp
 8005f1e:	88d2      	ldrh	r2, [r2, #6]
 8005f20:	05d2      	lsls	r2, r2, #23
 8005f22:	0dd2      	lsrs	r2, r2, #23
 8005f24:	466b      	mov	r3, sp
 8005f26:	89db      	ldrh	r3, [r3, #14]
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d30a      	bcc.n	8005f42 <PRL_Received+0x266>
 8005f2c:	2a1a      	cmp	r2, #26
 8005f2e:	d811      	bhi.n	8005f54 <PRL_Received+0x278>
 8005f30:	e007      	b.n	8005f42 <PRL_Received+0x266>
 8005f32:	0023      	movs	r3, r4
 8005f34:	3334      	adds	r3, #52	; 0x34
 8005f36:	5d5b      	ldrb	r3, [r3, r5]
 8005f38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f3a:	182f      	adds	r7, r5, r0
 8005f3c:	55f3      	strb	r3, [r6, r7]
 8005f3e:	1c6d      	adds	r5, r5, #1
 8005f40:	b2ad      	uxth	r5, r5
 8005f42:	428d      	cmp	r5, r1
 8005f44:	d3f5      	bcc.n	8005f32 <PRL_Received+0x256>
 8005f46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005f48:	4291      	cmp	r1, r2
 8005f4a:	d301      	bcc.n	8005f50 <PRL_Received+0x274>
 8005f4c:	4669      	mov	r1, sp
 8005f4e:	8909      	ldrh	r1, [r1, #8]
 8005f50:	8001      	strh	r1, [r0, #0]
 8005f52:	e00c      	b.n	8005f6e <PRL_Received+0x292>
 8005f54:	2025      	movs	r0, #37	; 0x25
 8005f56:	5426      	strb	r6, [r4, r0]
 8005f58:	0020      	movs	r0, r4
 8005f5a:	3034      	adds	r0, #52	; 0x34
 8005f5c:	5d40      	ldrb	r0, [r0, r5]
 8005f5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005f60:	5548      	strb	r0, [r1, r5]
 8005f62:	1c6d      	adds	r5, r5, #1
 8005f64:	2d1a      	cmp	r5, #26
 8005f66:	d3f7      	bcc.n	8005f58 <PRL_Received+0x27c>
 8005f68:	201a      	movs	r0, #26
 8005f6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f6c:	8008      	strh	r0, [r1, #0]
 8005f6e:	a80a      	add	r0, sp, #40	; 0x28
 8005f70:	7801      	ldrb	r1, [r0, #0]
 8005f72:	a809      	add	r0, sp, #36	; 0x24
 8005f74:	7800      	ldrb	r0, [r0, #0]
 8005f76:	f7fa fe77 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005f7a:	e053      	b.n	8006024 <PRL_Received+0x348>
 8005f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	1e9b      	subs	r3, r3, #2
 8005f86:	27ff      	movs	r7, #255	; 0xff
 8005f88:	1dbf      	adds	r7, r7, #6
 8005f8a:	321a      	adds	r2, #26
 8005f8c:	42ba      	cmp	r2, r7
 8005f8e:	d21b      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f90:	466a      	mov	r2, sp
 8005f92:	8912      	ldrh	r2, [r2, #8]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d217      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f98:	2225      	movs	r2, #37	; 0x25
 8005f9a:	54a6      	strb	r6, [r4, r2]
 8005f9c:	e007      	b.n	8005fae <PRL_Received+0x2d2>
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	3234      	adds	r2, #52	; 0x34
 8005fa2:	5d52      	ldrb	r2, [r2, r5]
 8005fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fa6:	182e      	adds	r6, r5, r0
 8005fa8:	559a      	strb	r2, [r3, r6]
 8005faa:	1c6d      	adds	r5, r5, #1
 8005fac:	b2ad      	uxth	r5, r5
 8005fae:	428d      	cmp	r5, r1
 8005fb0:	d3f5      	bcc.n	8005f9e <PRL_Received+0x2c2>
 8005fb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005fb4:	8801      	ldrh	r1, [r0, #0]
 8005fb6:	466a      	mov	r2, sp
 8005fb8:	8892      	ldrh	r2, [r2, #4]
 8005fba:	0a92      	lsrs	r2, r2, #10
 8005fbc:	231c      	movs	r3, #28
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	1e9a      	subs	r2, r3, #2
 8005fc2:	1889      	adds	r1, r1, r2
 8005fc4:	8001      	strh	r1, [r0, #0]
 8005fc6:	e02d      	b.n	8006024 <PRL_Received+0x348>
 8005fc8:	42bb      	cmp	r3, r7
 8005fca:	d215      	bcs.n	8005ff8 <PRL_Received+0x31c>
 8005fcc:	466a      	mov	r2, sp
 8005fce:	8912      	ldrh	r2, [r2, #8]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d311      	bcc.n	8005ff8 <PRL_Received+0x31c>
 8005fd4:	2225      	movs	r2, #37	; 0x25
 8005fd6:	54a6      	strb	r6, [r4, r2]
 8005fd8:	e007      	b.n	8005fea <PRL_Received+0x30e>
 8005fda:	0022      	movs	r2, r4
 8005fdc:	3234      	adds	r2, #52	; 0x34
 8005fde:	5d52      	ldrb	r2, [r2, r5]
 8005fe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fe2:	182e      	adds	r6, r5, r0
 8005fe4:	559a      	strb	r2, [r3, r6]
 8005fe6:	1c6d      	adds	r5, r5, #1
 8005fe8:	b2ad      	uxth	r5, r5
 8005fea:	428d      	cmp	r5, r1
 8005fec:	d3f5      	bcc.n	8005fda <PRL_Received+0x2fe>
 8005fee:	4668      	mov	r0, sp
 8005ff0:	8900      	ldrh	r0, [r0, #8]
 8005ff2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ff4:	8008      	strh	r0, [r1, #0]
 8005ff6:	e015      	b.n	8006024 <PRL_Received+0x348>
 8005ff8:	2025      	movs	r0, #37	; 0x25
 8005ffa:	5425      	strb	r5, [r4, r0]
 8005ffc:	e012      	b.n	8006024 <PRL_Received+0x348>
 8005ffe:	20ff      	movs	r0, #255	; 0xff
 8006000:	7260      	strb	r0, [r4, #9]
 8006002:	7425      	strb	r5, [r4, #16]
 8006004:	a809      	add	r0, sp, #36	; 0x24
 8006006:	7800      	ldrb	r0, [r0, #0]
 8006008:	f7fa fe4a 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 800600c:	72a5      	strb	r5, [r4, #10]
 800600e:	2017      	movs	r0, #23
 8006010:	9000      	str	r0, [sp, #0]
 8006012:	bf00      	nop
 8006014:	a367      	add	r3, pc, #412	; (adr r3, 80061b4 <.text_55>)
 8006016:	2200      	movs	r2, #0
 8006018:	a809      	add	r0, sp, #36	; 0x24
 800601a:	7801      	ldrb	r1, [r0, #0]
 800601c:	2006      	movs	r0, #6
 800601e:	4c61      	ldr	r4, [pc, #388]	; (80061a4 <.text_51>)
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	47a0      	blx	r4
 8006024:	b00b      	add	sp, #44	; 0x2c
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006028:	20000310 	.word	0x20000310

0800602c <.text_40>:
 800602c:	0000f01f 	.word	0x0000f01f

08006030 <.text_41>:
 8006030:	08024f94 	.word	0x08024f94

08006034 <PRL_ResetIndicate>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0004      	movs	r4, r0
 8006038:	000d      	movs	r5, r1
 800603a:	2d05      	cmp	r5, #5
 800603c:	d119      	bne.n	8006072 <PRL_ResetIndicate+0x3e>
 800603e:	485a      	ldr	r0, [pc, #360]	; (80061a8 <.text_52>)
 8006040:	00a1      	lsls	r1, r4, #2
 8006042:	1840      	adds	r0, r0, r1
 8006044:	9000      	str	r0, [sp, #0]
 8006046:	6807      	ldr	r7, [r0, #0]
 8006048:	2600      	movs	r6, #0
 800604a:	2000      	movs	r0, #0
 800604c:	b2c2      	uxtb	r2, r0
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	72d6      	strb	r6, [r2, #11]
 8006052:	1c40      	adds	r0, r0, #1
 8006054:	b2c1      	uxtb	r1, r0
 8006056:	2903      	cmp	r1, #3
 8006058:	d3f8      	bcc.n	800604c <PRL_ResetIndicate+0x18>
 800605a:	220f      	movs	r2, #15
 800605c:	2103      	movs	r1, #3
 800605e:	1db8      	adds	r0, r7, #6
 8006060:	f01d fbdc 	bl	802381c <__aeabi_memset>
 8006064:	9900      	ldr	r1, [sp, #0]
 8006066:	6809      	ldr	r1, [r1, #0]
 8006068:	714e      	strb	r6, [r1, #5]
 800606a:	703e      	strb	r6, [r7, #0]
 800606c:	0020      	movs	r0, r4
 800606e:	f7ff fe30 	bl	8005cd2 <PRL_DisableRX>
 8006072:	2000      	movs	r0, #0
 8006074:	9000      	str	r0, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	002a      	movs	r2, r5
 800607a:	0021      	movs	r1, r4
 800607c:	2001      	movs	r0, #1
 800607e:	4e49      	ldr	r6, [pc, #292]	; (80061a4 <.text_51>)
 8006080:	6836      	ldr	r6, [r6, #0]
 8006082:	47b0      	blx	r6
 8006084:	0029      	movs	r1, r5
 8006086:	0020      	movs	r0, r4
 8006088:	f7fa fce6 	bl	8000a58 <PE_PRL_ResetReceived>
 800608c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800608e <PRL_ResetCompleted>:
 800608e:	2101      	movs	r1, #1
 8006090:	4a45      	ldr	r2, [pc, #276]	; (80061a8 <.text_52>)
 8006092:	0080      	lsls	r0, r0, #2
 8006094:	5810      	ldr	r0, [r2, r0]
 8006096:	70c1      	strb	r1, [r0, #3]
 8006098:	4770      	bx	lr
	...

0800609c <.text_44>:
 800609c:	0000fedf 	.word	0x0000fedf

080060a0 <.text_45>:
 80060a0:	0000feff 	.word	0x0000feff

080060a4 <.text_46>:
 80060a4:	0000f13f 	.word	0x0000f13f

080060a8 <PRL_BistCompleted>:
 80060a8:	b580      	push	{r7, lr}
 80060aa:	f7fa fd01 	bl	8000ab0 <PE_PRL_BistCompleted>
 80060ae:	bd01      	pop	{r0, pc}

080060b0 <PRL_TxCompleted>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	0004      	movs	r4, r0
 80060b4:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <.text_52>)
 80060b6:	00a3      	lsls	r3, r4, #2
 80060b8:	58d6      	ldr	r6, [r2, r3]
 80060ba:	2500      	movs	r5, #0
 80060bc:	7c32      	ldrb	r2, [r6, #16]
 80060be:	2a01      	cmp	r2, #1
 80060c0:	d002      	beq.n	80060c8 <PRL_TxCompleted+0x18>
 80060c2:	2a02      	cmp	r2, #2
 80060c4:	d009      	beq.n	80060da <PRL_TxCompleted+0x2a>
 80060c6:	e010      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d102      	bne.n	80060d2 <PRL_TxCompleted+0x22>
 80060cc:	f7fa fe1a 	bl	8000d04 <PE_PRL_PostReceiveEventComplete>
 80060d0:	e001      	b.n	80060d6 <PRL_TxCompleted+0x26>
 80060d2:	f7fa fde5 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 80060d6:	72b5      	strb	r5, [r6, #10]
 80060d8:	e007      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060da:	f00d ff6f 	bl	8013fbc <USBPD_PHY_GetRetryTimerValue>
 80060de:	0001      	movs	r1, r0
 80060e0:	0060      	lsls	r0, r4, #1
 80060e2:	1c40      	adds	r0, r0, #1
 80060e4:	b2c0      	uxtb	r0, r0
 80060e6:	f00f fba9 	bl	801583c <USBPD_TIM_Start>
 80060ea:	7435      	strb	r5, [r6, #16]
 80060ec:	bd70      	pop	{r4, r5, r6, pc}

080060ee <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4c2d      	ldr	r4, [pc, #180]	; (80061a8 <.text_52>)
 80060f2:	0080      	lsls	r0, r0, #2
 80060f4:	5820      	ldr	r0, [r4, r0]
 80060f6:	2480      	movs	r4, #128	; 0x80
 80060f8:	0224      	lsls	r4, r4, #8
 80060fa:	8b85      	ldrh	r5, [r0, #28]
 80060fc:	4e2b      	ldr	r6, [pc, #172]	; (80061ac <.text_53>)
 80060fe:	402e      	ands	r6, r5
 8006100:	02c9      	lsls	r1, r1, #11
 8006102:	4331      	orrs	r1, r6
 8006104:	25fe      	movs	r5, #254	; 0xfe
 8006106:	022d      	lsls	r5, r5, #8
 8006108:	400d      	ands	r5, r1
 800610a:	05d1      	lsls	r1, r2, #23
 800610c:	0dc9      	lsrs	r1, r1, #23
 800610e:	4329      	orrs	r1, r5
 8006110:	4321      	orrs	r1, r4
 8006112:	8381      	strh	r1, [r0, #28]
 8006114:	8a41      	ldrh	r1, [r0, #18]
 8006116:	430c      	orrs	r4, r1
 8006118:	8244      	strh	r4, [r0, #18]
 800611a:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <.text_54>)
 800611c:	4022      	ands	r2, r4
 800611e:	2120      	movs	r1, #32
 8006120:	5c41      	ldrb	r1, [r0, r1]
 8006122:	06c9      	lsls	r1, r1, #27
 8006124:	0ec9      	lsrs	r1, r1, #27
 8006126:	4311      	orrs	r1, r2
 8006128:	8241      	strh	r1, [r0, #18]
 800612a:	7019      	strb	r1, [r3, #0]
 800612c:	8a41      	ldrh	r1, [r0, #18]
 800612e:	0a09      	lsrs	r1, r1, #8
 8006130:	7059      	strb	r1, [r3, #1]
 8006132:	8b81      	ldrh	r1, [r0, #28]
 8006134:	7099      	strb	r1, [r3, #2]
 8006136:	8b80      	ldrh	r0, [r0, #28]
 8006138:	0a00      	lsrs	r0, r0, #8
 800613a:	70d8      	strb	r0, [r3, #3]
 800613c:	bd70      	pop	{r4, r5, r6, pc}

0800613e <USBPD_PRL_PrepareChunkRequest>:
 800613e:	b510      	push	{r4, lr}
 8006140:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <.text_52>)
 8006142:	0080      	lsls	r0, r0, #2
 8006144:	5810      	ldr	r0, [r2, r0]
 8006146:	8b83      	ldrh	r3, [r0, #28]
 8006148:	2284      	movs	r2, #132	; 0x84
 800614a:	0212      	lsls	r2, r2, #8
 800614c:	431a      	orrs	r2, r3
 800614e:	8382      	strh	r2, [r0, #28]
 8006150:	2386      	movs	r3, #134	; 0x86
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	4013      	ands	r3, r2
 8006156:	8bc2      	ldrh	r2, [r0, #30]
 8006158:	0ad2      	lsrs	r2, r2, #11
 800615a:	1c52      	adds	r2, r2, #1
 800615c:	02d2      	lsls	r2, r2, #11
 800615e:	24f0      	movs	r4, #240	; 0xf0
 8006160:	01e4      	lsls	r4, r4, #7
 8006162:	4014      	ands	r4, r2
 8006164:	431c      	orrs	r4, r3
 8006166:	8384      	strh	r4, [r0, #28]
 8006168:	8a43      	ldrh	r3, [r0, #18]
 800616a:	2280      	movs	r2, #128	; 0x80
 800616c:	0212      	lsls	r2, r2, #8
 800616e:	431a      	orrs	r2, r3
 8006170:	0003      	movs	r3, r0
 8006172:	3312      	adds	r3, #18
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	4c0e      	ldr	r4, [pc, #56]	; (80061b0 <.text_54>)
 8006178:	4014      	ands	r4, r2
 800617a:	2220      	movs	r2, #32
 800617c:	5c82      	ldrb	r2, [r0, r2]
 800617e:	06d2      	lsls	r2, r2, #27
 8006180:	0ed2      	lsrs	r2, r2, #27
 8006182:	4322      	orrs	r2, r4
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	7142      	strb	r2, [r0, #5]
 800618a:	8a43      	ldrh	r3, [r0, #18]
 800618c:	700b      	strb	r3, [r1, #0]
 800618e:	8a43      	ldrh	r3, [r0, #18]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	704b      	strb	r3, [r1, #1]
 8006194:	8b83      	ldrh	r3, [r0, #28]
 8006196:	708b      	strb	r3, [r1, #2]
 8006198:	8b80      	ldrh	r0, [r0, #28]
 800619a:	0a00      	lsrs	r0, r0, #8
 800619c:	70c8      	strb	r0, [r1, #3]
 800619e:	710a      	strb	r2, [r1, #4]
 80061a0:	714a      	strb	r2, [r1, #5]
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <.text_51>:
 80061a4:	20000000 	.word	0x20000000

080061a8 <.text_52>:
 80061a8:	20000310 	.word	0x20000310

080061ac <.text_53>:
 80061ac:	000083ff 	.word	0x000083ff

080061b0 <.text_54>:
 80061b0:	0000ffe0 	.word	0x0000ffe0

080061b4 <.text_55>:
 80061b4:	5f4c5250 	.word	0x5f4c5250
 80061b8:	4e455645 	.word	0x4e455645
 80061bc:	58525f54 	.word	0x58525f54
 80061c0:	5349445f 	.word	0x5349445f
 80061c4:	44524143 	.word	0x44524143
 80061c8:	00004445 	.word	0x00004445

080061cc <strlen>:
 80061cc:	2300      	movs	r3, #0
 80061ce:	5cc2      	ldrb	r2, [r0, r3]
 80061d0:	3301      	adds	r3, #1
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1fb      	bne.n	80061ce <strlen+0x2>
 80061d6:	1e58      	subs	r0, r3, #1
 80061d8:	4770      	bx	lr
	...

080061dc <__gnu_thumb1_case_shi>:
 80061dc:	b403      	push	{r0, r1}
 80061de:	4671      	mov	r1, lr
 80061e0:	0849      	lsrs	r1, r1, #1
 80061e2:	0040      	lsls	r0, r0, #1
 80061e4:	0049      	lsls	r1, r1, #1
 80061e6:	5e09      	ldrsh	r1, [r1, r0]
 80061e8:	0049      	lsls	r1, r1, #1
 80061ea:	448e      	add	lr, r1
 80061ec:	bc03      	pop	{r0, r1}
 80061ee:	4770      	bx	lr

080061f0 <__udivsi3>:
 80061f0:	2200      	movs	r2, #0
 80061f2:	0843      	lsrs	r3, r0, #1
 80061f4:	428b      	cmp	r3, r1
 80061f6:	d374      	bcc.n	80062e2 <__udivsi3+0xf2>
 80061f8:	0903      	lsrs	r3, r0, #4
 80061fa:	428b      	cmp	r3, r1
 80061fc:	d35f      	bcc.n	80062be <__udivsi3+0xce>
 80061fe:	0a03      	lsrs	r3, r0, #8
 8006200:	428b      	cmp	r3, r1
 8006202:	d344      	bcc.n	800628e <__udivsi3+0x9e>
 8006204:	0b03      	lsrs	r3, r0, #12
 8006206:	428b      	cmp	r3, r1
 8006208:	d328      	bcc.n	800625c <__udivsi3+0x6c>
 800620a:	0c03      	lsrs	r3, r0, #16
 800620c:	428b      	cmp	r3, r1
 800620e:	d30d      	bcc.n	800622c <__udivsi3+0x3c>
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	0209      	lsls	r1, r1, #8
 8006214:	ba12      	rev	r2, r2
 8006216:	0c03      	lsrs	r3, r0, #16
 8006218:	428b      	cmp	r3, r1
 800621a:	d302      	bcc.n	8006222 <__udivsi3+0x32>
 800621c:	1212      	asrs	r2, r2, #8
 800621e:	0209      	lsls	r1, r1, #8
 8006220:	d065      	beq.n	80062ee <__udivsi3+0xfe>
 8006222:	0b03      	lsrs	r3, r0, #12
 8006224:	428b      	cmp	r3, r1
 8006226:	d319      	bcc.n	800625c <__udivsi3+0x6c>
 8006228:	e000      	b.n	800622c <__udivsi3+0x3c>
 800622a:	0a09      	lsrs	r1, r1, #8
 800622c:	0bc3      	lsrs	r3, r0, #15
 800622e:	428b      	cmp	r3, r1
 8006230:	d301      	bcc.n	8006236 <__udivsi3+0x46>
 8006232:	03cb      	lsls	r3, r1, #15
 8006234:	1ac0      	subs	r0, r0, r3
 8006236:	4152      	adcs	r2, r2
 8006238:	0b83      	lsrs	r3, r0, #14
 800623a:	428b      	cmp	r3, r1
 800623c:	d301      	bcc.n	8006242 <__udivsi3+0x52>
 800623e:	038b      	lsls	r3, r1, #14
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	4152      	adcs	r2, r2
 8006244:	0b43      	lsrs	r3, r0, #13
 8006246:	428b      	cmp	r3, r1
 8006248:	d301      	bcc.n	800624e <__udivsi3+0x5e>
 800624a:	034b      	lsls	r3, r1, #13
 800624c:	1ac0      	subs	r0, r0, r3
 800624e:	4152      	adcs	r2, r2
 8006250:	0b03      	lsrs	r3, r0, #12
 8006252:	428b      	cmp	r3, r1
 8006254:	d301      	bcc.n	800625a <__udivsi3+0x6a>
 8006256:	030b      	lsls	r3, r1, #12
 8006258:	1ac0      	subs	r0, r0, r3
 800625a:	4152      	adcs	r2, r2
 800625c:	0ac3      	lsrs	r3, r0, #11
 800625e:	428b      	cmp	r3, r1
 8006260:	d301      	bcc.n	8006266 <__udivsi3+0x76>
 8006262:	02cb      	lsls	r3, r1, #11
 8006264:	1ac0      	subs	r0, r0, r3
 8006266:	4152      	adcs	r2, r2
 8006268:	0a83      	lsrs	r3, r0, #10
 800626a:	428b      	cmp	r3, r1
 800626c:	d301      	bcc.n	8006272 <__udivsi3+0x82>
 800626e:	028b      	lsls	r3, r1, #10
 8006270:	1ac0      	subs	r0, r0, r3
 8006272:	4152      	adcs	r2, r2
 8006274:	0a43      	lsrs	r3, r0, #9
 8006276:	428b      	cmp	r3, r1
 8006278:	d301      	bcc.n	800627e <__udivsi3+0x8e>
 800627a:	024b      	lsls	r3, r1, #9
 800627c:	1ac0      	subs	r0, r0, r3
 800627e:	4152      	adcs	r2, r2
 8006280:	0a03      	lsrs	r3, r0, #8
 8006282:	428b      	cmp	r3, r1
 8006284:	d301      	bcc.n	800628a <__udivsi3+0x9a>
 8006286:	020b      	lsls	r3, r1, #8
 8006288:	1ac0      	subs	r0, r0, r3
 800628a:	4152      	adcs	r2, r2
 800628c:	d2cd      	bcs.n	800622a <__udivsi3+0x3a>
 800628e:	09c3      	lsrs	r3, r0, #7
 8006290:	428b      	cmp	r3, r1
 8006292:	d301      	bcc.n	8006298 <__udivsi3+0xa8>
 8006294:	01cb      	lsls	r3, r1, #7
 8006296:	1ac0      	subs	r0, r0, r3
 8006298:	4152      	adcs	r2, r2
 800629a:	0983      	lsrs	r3, r0, #6
 800629c:	428b      	cmp	r3, r1
 800629e:	d301      	bcc.n	80062a4 <__udivsi3+0xb4>
 80062a0:	018b      	lsls	r3, r1, #6
 80062a2:	1ac0      	subs	r0, r0, r3
 80062a4:	4152      	adcs	r2, r2
 80062a6:	0943      	lsrs	r3, r0, #5
 80062a8:	428b      	cmp	r3, r1
 80062aa:	d301      	bcc.n	80062b0 <__udivsi3+0xc0>
 80062ac:	014b      	lsls	r3, r1, #5
 80062ae:	1ac0      	subs	r0, r0, r3
 80062b0:	4152      	adcs	r2, r2
 80062b2:	0903      	lsrs	r3, r0, #4
 80062b4:	428b      	cmp	r3, r1
 80062b6:	d301      	bcc.n	80062bc <__udivsi3+0xcc>
 80062b8:	010b      	lsls	r3, r1, #4
 80062ba:	1ac0      	subs	r0, r0, r3
 80062bc:	4152      	adcs	r2, r2
 80062be:	08c3      	lsrs	r3, r0, #3
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d301      	bcc.n	80062c8 <__udivsi3+0xd8>
 80062c4:	00cb      	lsls	r3, r1, #3
 80062c6:	1ac0      	subs	r0, r0, r3
 80062c8:	4152      	adcs	r2, r2
 80062ca:	0883      	lsrs	r3, r0, #2
 80062cc:	428b      	cmp	r3, r1
 80062ce:	d301      	bcc.n	80062d4 <__udivsi3+0xe4>
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	4152      	adcs	r2, r2
 80062d6:	0843      	lsrs	r3, r0, #1
 80062d8:	428b      	cmp	r3, r1
 80062da:	d301      	bcc.n	80062e0 <__udivsi3+0xf0>
 80062dc:	004b      	lsls	r3, r1, #1
 80062de:	1ac0      	subs	r0, r0, r3
 80062e0:	4152      	adcs	r2, r2
 80062e2:	1a41      	subs	r1, r0, r1
 80062e4:	d200      	bcs.n	80062e8 <__udivsi3+0xf8>
 80062e6:	4601      	mov	r1, r0
 80062e8:	4152      	adcs	r2, r2
 80062ea:	4610      	mov	r0, r2
 80062ec:	4770      	bx	lr
 80062ee:	e7ff      	b.n	80062f0 <__udivsi3+0x100>
 80062f0:	b501      	push	{r0, lr}
 80062f2:	2000      	movs	r0, #0
 80062f4:	f000 f8f0 	bl	80064d8 <__aeabi_idiv0>
 80062f8:	bd02      	pop	{r1, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)

080062fc <__aeabi_uidivmod>:
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d0f7      	beq.n	80062f0 <__udivsi3+0x100>
 8006300:	e776      	b.n	80061f0 <__udivsi3>
 8006302:	4770      	bx	lr

08006304 <__divsi3>:
 8006304:	4603      	mov	r3, r0
 8006306:	430b      	orrs	r3, r1
 8006308:	d47f      	bmi.n	800640a <__divsi3+0x106>
 800630a:	2200      	movs	r2, #0
 800630c:	0843      	lsrs	r3, r0, #1
 800630e:	428b      	cmp	r3, r1
 8006310:	d374      	bcc.n	80063fc <__divsi3+0xf8>
 8006312:	0903      	lsrs	r3, r0, #4
 8006314:	428b      	cmp	r3, r1
 8006316:	d35f      	bcc.n	80063d8 <__divsi3+0xd4>
 8006318:	0a03      	lsrs	r3, r0, #8
 800631a:	428b      	cmp	r3, r1
 800631c:	d344      	bcc.n	80063a8 <__divsi3+0xa4>
 800631e:	0b03      	lsrs	r3, r0, #12
 8006320:	428b      	cmp	r3, r1
 8006322:	d328      	bcc.n	8006376 <__divsi3+0x72>
 8006324:	0c03      	lsrs	r3, r0, #16
 8006326:	428b      	cmp	r3, r1
 8006328:	d30d      	bcc.n	8006346 <__divsi3+0x42>
 800632a:	22ff      	movs	r2, #255	; 0xff
 800632c:	0209      	lsls	r1, r1, #8
 800632e:	ba12      	rev	r2, r2
 8006330:	0c03      	lsrs	r3, r0, #16
 8006332:	428b      	cmp	r3, r1
 8006334:	d302      	bcc.n	800633c <__divsi3+0x38>
 8006336:	1212      	asrs	r2, r2, #8
 8006338:	0209      	lsls	r1, r1, #8
 800633a:	d065      	beq.n	8006408 <__divsi3+0x104>
 800633c:	0b03      	lsrs	r3, r0, #12
 800633e:	428b      	cmp	r3, r1
 8006340:	d319      	bcc.n	8006376 <__divsi3+0x72>
 8006342:	e000      	b.n	8006346 <__divsi3+0x42>
 8006344:	0a09      	lsrs	r1, r1, #8
 8006346:	0bc3      	lsrs	r3, r0, #15
 8006348:	428b      	cmp	r3, r1
 800634a:	d301      	bcc.n	8006350 <__divsi3+0x4c>
 800634c:	03cb      	lsls	r3, r1, #15
 800634e:	1ac0      	subs	r0, r0, r3
 8006350:	4152      	adcs	r2, r2
 8006352:	0b83      	lsrs	r3, r0, #14
 8006354:	428b      	cmp	r3, r1
 8006356:	d301      	bcc.n	800635c <__divsi3+0x58>
 8006358:	038b      	lsls	r3, r1, #14
 800635a:	1ac0      	subs	r0, r0, r3
 800635c:	4152      	adcs	r2, r2
 800635e:	0b43      	lsrs	r3, r0, #13
 8006360:	428b      	cmp	r3, r1
 8006362:	d301      	bcc.n	8006368 <__divsi3+0x64>
 8006364:	034b      	lsls	r3, r1, #13
 8006366:	1ac0      	subs	r0, r0, r3
 8006368:	4152      	adcs	r2, r2
 800636a:	0b03      	lsrs	r3, r0, #12
 800636c:	428b      	cmp	r3, r1
 800636e:	d301      	bcc.n	8006374 <__divsi3+0x70>
 8006370:	030b      	lsls	r3, r1, #12
 8006372:	1ac0      	subs	r0, r0, r3
 8006374:	4152      	adcs	r2, r2
 8006376:	0ac3      	lsrs	r3, r0, #11
 8006378:	428b      	cmp	r3, r1
 800637a:	d301      	bcc.n	8006380 <__divsi3+0x7c>
 800637c:	02cb      	lsls	r3, r1, #11
 800637e:	1ac0      	subs	r0, r0, r3
 8006380:	4152      	adcs	r2, r2
 8006382:	0a83      	lsrs	r3, r0, #10
 8006384:	428b      	cmp	r3, r1
 8006386:	d301      	bcc.n	800638c <__divsi3+0x88>
 8006388:	028b      	lsls	r3, r1, #10
 800638a:	1ac0      	subs	r0, r0, r3
 800638c:	4152      	adcs	r2, r2
 800638e:	0a43      	lsrs	r3, r0, #9
 8006390:	428b      	cmp	r3, r1
 8006392:	d301      	bcc.n	8006398 <__divsi3+0x94>
 8006394:	024b      	lsls	r3, r1, #9
 8006396:	1ac0      	subs	r0, r0, r3
 8006398:	4152      	adcs	r2, r2
 800639a:	0a03      	lsrs	r3, r0, #8
 800639c:	428b      	cmp	r3, r1
 800639e:	d301      	bcc.n	80063a4 <__divsi3+0xa0>
 80063a0:	020b      	lsls	r3, r1, #8
 80063a2:	1ac0      	subs	r0, r0, r3
 80063a4:	4152      	adcs	r2, r2
 80063a6:	d2cd      	bcs.n	8006344 <__divsi3+0x40>
 80063a8:	09c3      	lsrs	r3, r0, #7
 80063aa:	428b      	cmp	r3, r1
 80063ac:	d301      	bcc.n	80063b2 <__divsi3+0xae>
 80063ae:	01cb      	lsls	r3, r1, #7
 80063b0:	1ac0      	subs	r0, r0, r3
 80063b2:	4152      	adcs	r2, r2
 80063b4:	0983      	lsrs	r3, r0, #6
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d301      	bcc.n	80063be <__divsi3+0xba>
 80063ba:	018b      	lsls	r3, r1, #6
 80063bc:	1ac0      	subs	r0, r0, r3
 80063be:	4152      	adcs	r2, r2
 80063c0:	0943      	lsrs	r3, r0, #5
 80063c2:	428b      	cmp	r3, r1
 80063c4:	d301      	bcc.n	80063ca <__divsi3+0xc6>
 80063c6:	014b      	lsls	r3, r1, #5
 80063c8:	1ac0      	subs	r0, r0, r3
 80063ca:	4152      	adcs	r2, r2
 80063cc:	0903      	lsrs	r3, r0, #4
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d301      	bcc.n	80063d6 <__divsi3+0xd2>
 80063d2:	010b      	lsls	r3, r1, #4
 80063d4:	1ac0      	subs	r0, r0, r3
 80063d6:	4152      	adcs	r2, r2
 80063d8:	08c3      	lsrs	r3, r0, #3
 80063da:	428b      	cmp	r3, r1
 80063dc:	d301      	bcc.n	80063e2 <__divsi3+0xde>
 80063de:	00cb      	lsls	r3, r1, #3
 80063e0:	1ac0      	subs	r0, r0, r3
 80063e2:	4152      	adcs	r2, r2
 80063e4:	0883      	lsrs	r3, r0, #2
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d301      	bcc.n	80063ee <__divsi3+0xea>
 80063ea:	008b      	lsls	r3, r1, #2
 80063ec:	1ac0      	subs	r0, r0, r3
 80063ee:	4152      	adcs	r2, r2
 80063f0:	0843      	lsrs	r3, r0, #1
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d301      	bcc.n	80063fa <__divsi3+0xf6>
 80063f6:	004b      	lsls	r3, r1, #1
 80063f8:	1ac0      	subs	r0, r0, r3
 80063fa:	4152      	adcs	r2, r2
 80063fc:	1a41      	subs	r1, r0, r1
 80063fe:	d200      	bcs.n	8006402 <__divsi3+0xfe>
 8006400:	4601      	mov	r1, r0
 8006402:	4152      	adcs	r2, r2
 8006404:	4610      	mov	r0, r2
 8006406:	4770      	bx	lr
 8006408:	e05d      	b.n	80064c6 <__divsi3+0x1c2>
 800640a:	0fca      	lsrs	r2, r1, #31
 800640c:	d000      	beq.n	8006410 <__divsi3+0x10c>
 800640e:	4249      	negs	r1, r1
 8006410:	1003      	asrs	r3, r0, #32
 8006412:	d300      	bcc.n	8006416 <__divsi3+0x112>
 8006414:	4240      	negs	r0, r0
 8006416:	4053      	eors	r3, r2
 8006418:	2200      	movs	r2, #0
 800641a:	469c      	mov	ip, r3
 800641c:	0903      	lsrs	r3, r0, #4
 800641e:	428b      	cmp	r3, r1
 8006420:	d32d      	bcc.n	800647e <__divsi3+0x17a>
 8006422:	0a03      	lsrs	r3, r0, #8
 8006424:	428b      	cmp	r3, r1
 8006426:	d312      	bcc.n	800644e <__divsi3+0x14a>
 8006428:	22fc      	movs	r2, #252	; 0xfc
 800642a:	0189      	lsls	r1, r1, #6
 800642c:	ba12      	rev	r2, r2
 800642e:	0a03      	lsrs	r3, r0, #8
 8006430:	428b      	cmp	r3, r1
 8006432:	d30c      	bcc.n	800644e <__divsi3+0x14a>
 8006434:	0189      	lsls	r1, r1, #6
 8006436:	1192      	asrs	r2, r2, #6
 8006438:	428b      	cmp	r3, r1
 800643a:	d308      	bcc.n	800644e <__divsi3+0x14a>
 800643c:	0189      	lsls	r1, r1, #6
 800643e:	1192      	asrs	r2, r2, #6
 8006440:	428b      	cmp	r3, r1
 8006442:	d304      	bcc.n	800644e <__divsi3+0x14a>
 8006444:	0189      	lsls	r1, r1, #6
 8006446:	d03a      	beq.n	80064be <__divsi3+0x1ba>
 8006448:	1192      	asrs	r2, r2, #6
 800644a:	e000      	b.n	800644e <__divsi3+0x14a>
 800644c:	0989      	lsrs	r1, r1, #6
 800644e:	09c3      	lsrs	r3, r0, #7
 8006450:	428b      	cmp	r3, r1
 8006452:	d301      	bcc.n	8006458 <__divsi3+0x154>
 8006454:	01cb      	lsls	r3, r1, #7
 8006456:	1ac0      	subs	r0, r0, r3
 8006458:	4152      	adcs	r2, r2
 800645a:	0983      	lsrs	r3, r0, #6
 800645c:	428b      	cmp	r3, r1
 800645e:	d301      	bcc.n	8006464 <__divsi3+0x160>
 8006460:	018b      	lsls	r3, r1, #6
 8006462:	1ac0      	subs	r0, r0, r3
 8006464:	4152      	adcs	r2, r2
 8006466:	0943      	lsrs	r3, r0, #5
 8006468:	428b      	cmp	r3, r1
 800646a:	d301      	bcc.n	8006470 <__divsi3+0x16c>
 800646c:	014b      	lsls	r3, r1, #5
 800646e:	1ac0      	subs	r0, r0, r3
 8006470:	4152      	adcs	r2, r2
 8006472:	0903      	lsrs	r3, r0, #4
 8006474:	428b      	cmp	r3, r1
 8006476:	d301      	bcc.n	800647c <__divsi3+0x178>
 8006478:	010b      	lsls	r3, r1, #4
 800647a:	1ac0      	subs	r0, r0, r3
 800647c:	4152      	adcs	r2, r2
 800647e:	08c3      	lsrs	r3, r0, #3
 8006480:	428b      	cmp	r3, r1
 8006482:	d301      	bcc.n	8006488 <__divsi3+0x184>
 8006484:	00cb      	lsls	r3, r1, #3
 8006486:	1ac0      	subs	r0, r0, r3
 8006488:	4152      	adcs	r2, r2
 800648a:	0883      	lsrs	r3, r0, #2
 800648c:	428b      	cmp	r3, r1
 800648e:	d301      	bcc.n	8006494 <__divsi3+0x190>
 8006490:	008b      	lsls	r3, r1, #2
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	4152      	adcs	r2, r2
 8006496:	d2d9      	bcs.n	800644c <__divsi3+0x148>
 8006498:	0843      	lsrs	r3, r0, #1
 800649a:	428b      	cmp	r3, r1
 800649c:	d301      	bcc.n	80064a2 <__divsi3+0x19e>
 800649e:	004b      	lsls	r3, r1, #1
 80064a0:	1ac0      	subs	r0, r0, r3
 80064a2:	4152      	adcs	r2, r2
 80064a4:	1a41      	subs	r1, r0, r1
 80064a6:	d200      	bcs.n	80064aa <__divsi3+0x1a6>
 80064a8:	4601      	mov	r1, r0
 80064aa:	4663      	mov	r3, ip
 80064ac:	4152      	adcs	r2, r2
 80064ae:	105b      	asrs	r3, r3, #1
 80064b0:	4610      	mov	r0, r2
 80064b2:	d301      	bcc.n	80064b8 <__divsi3+0x1b4>
 80064b4:	4240      	negs	r0, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d500      	bpl.n	80064bc <__divsi3+0x1b8>
 80064ba:	4249      	negs	r1, r1
 80064bc:	4770      	bx	lr
 80064be:	4663      	mov	r3, ip
 80064c0:	105b      	asrs	r3, r3, #1
 80064c2:	d300      	bcc.n	80064c6 <__divsi3+0x1c2>
 80064c4:	4240      	negs	r0, r0
 80064c6:	b501      	push	{r0, lr}
 80064c8:	2000      	movs	r0, #0
 80064ca:	f000 f805 	bl	80064d8 <__aeabi_idiv0>
 80064ce:	bd02      	pop	{r1, pc}

080064d0 <__aeabi_idivmod>:
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d0f8      	beq.n	80064c6 <__divsi3+0x1c2>
 80064d4:	e716      	b.n	8006304 <__divsi3>
 80064d6:	4770      	bx	lr

080064d8 <__aeabi_idiv0>:
 80064d8:	4770      	bx	lr
 80064da:	46c0      	nop			; (mov r8, r8)

080064dc <__aeabi_uldivmod>:
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d111      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d10f      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d100      	bne.n	80064ea <__aeabi_uldivmod+0xe>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d002      	beq.n	80064f2 <__aeabi_uldivmod+0x16>
 80064ec:	2100      	movs	r1, #0
 80064ee:	43c9      	mvns	r1, r1
 80064f0:	0008      	movs	r0, r1
 80064f2:	b407      	push	{r0, r1, r2}
 80064f4:	4802      	ldr	r0, [pc, #8]	; (8006500 <__aeabi_uldivmod+0x24>)
 80064f6:	a102      	add	r1, pc, #8	; (adr r1, 8006500 <__aeabi_uldivmod+0x24>)
 80064f8:	1840      	adds	r0, r0, r1
 80064fa:	9002      	str	r0, [sp, #8]
 80064fc:	bd03      	pop	{r0, r1, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	ffffffd9 	.word	0xffffffd9
 8006504:	b403      	push	{r0, r1}
 8006506:	4668      	mov	r0, sp
 8006508:	b501      	push	{r0, lr}
 800650a:	9802      	ldr	r0, [sp, #8]
 800650c:	f000 f806 	bl	800651c <__udivmoddi4>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	469e      	mov	lr, r3
 8006514:	b002      	add	sp, #8
 8006516:	bc0c      	pop	{r2, r3}
 8006518:	4770      	bx	lr
 800651a:	46c0      	nop			; (mov r8, r8)

0800651c <__udivmoddi4>:
 800651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651e:	4657      	mov	r7, sl
 8006520:	464e      	mov	r6, r9
 8006522:	4645      	mov	r5, r8
 8006524:	46de      	mov	lr, fp
 8006526:	b5e0      	push	{r5, r6, r7, lr}
 8006528:	0004      	movs	r4, r0
 800652a:	000d      	movs	r5, r1
 800652c:	4692      	mov	sl, r2
 800652e:	4699      	mov	r9, r3
 8006530:	b083      	sub	sp, #12
 8006532:	428b      	cmp	r3, r1
 8006534:	d830      	bhi.n	8006598 <__udivmoddi4+0x7c>
 8006536:	d02d      	beq.n	8006594 <__udivmoddi4+0x78>
 8006538:	4649      	mov	r1, r9
 800653a:	4650      	mov	r0, sl
 800653c:	f000 f8d8 	bl	80066f0 <__clzdi2>
 8006540:	0029      	movs	r1, r5
 8006542:	0006      	movs	r6, r0
 8006544:	0020      	movs	r0, r4
 8006546:	f000 f8d3 	bl	80066f0 <__clzdi2>
 800654a:	1a33      	subs	r3, r6, r0
 800654c:	4698      	mov	r8, r3
 800654e:	3b20      	subs	r3, #32
 8006550:	d434      	bmi.n	80065bc <__udivmoddi4+0xa0>
 8006552:	469b      	mov	fp, r3
 8006554:	4653      	mov	r3, sl
 8006556:	465a      	mov	r2, fp
 8006558:	4093      	lsls	r3, r2
 800655a:	4642      	mov	r2, r8
 800655c:	001f      	movs	r7, r3
 800655e:	4653      	mov	r3, sl
 8006560:	4093      	lsls	r3, r2
 8006562:	001e      	movs	r6, r3
 8006564:	42af      	cmp	r7, r5
 8006566:	d83b      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006568:	42af      	cmp	r7, r5
 800656a:	d100      	bne.n	800656e <__udivmoddi4+0x52>
 800656c:	e079      	b.n	8006662 <__udivmoddi4+0x146>
 800656e:	465b      	mov	r3, fp
 8006570:	1ba4      	subs	r4, r4, r6
 8006572:	41bd      	sbcs	r5, r7
 8006574:	2b00      	cmp	r3, #0
 8006576:	da00      	bge.n	800657a <__udivmoddi4+0x5e>
 8006578:	e076      	b.n	8006668 <__udivmoddi4+0x14c>
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	9200      	str	r2, [sp, #0]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	2301      	movs	r3, #1
 8006584:	465a      	mov	r2, fp
 8006586:	4093      	lsls	r3, r2
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	2301      	movs	r3, #1
 800658c:	4642      	mov	r2, r8
 800658e:	4093      	lsls	r3, r2
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	e029      	b.n	80065e8 <__udivmoddi4+0xcc>
 8006594:	4282      	cmp	r2, r0
 8006596:	d9cf      	bls.n	8006538 <__udivmoddi4+0x1c>
 8006598:	2200      	movs	r2, #0
 800659a:	2300      	movs	r3, #0
 800659c:	9200      	str	r2, [sp, #0]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <__udivmoddi4+0x8e>
 80065a6:	601c      	str	r4, [r3, #0]
 80065a8:	605d      	str	r5, [r3, #4]
 80065aa:	9800      	ldr	r0, [sp, #0]
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	b003      	add	sp, #12
 80065b0:	bcf0      	pop	{r4, r5, r6, r7}
 80065b2:	46bb      	mov	fp, r7
 80065b4:	46b2      	mov	sl, r6
 80065b6:	46a9      	mov	r9, r5
 80065b8:	46a0      	mov	r8, r4
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065bc:	4642      	mov	r2, r8
 80065be:	469b      	mov	fp, r3
 80065c0:	2320      	movs	r3, #32
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	4652      	mov	r2, sl
 80065c6:	40da      	lsrs	r2, r3
 80065c8:	4641      	mov	r1, r8
 80065ca:	0013      	movs	r3, r2
 80065cc:	464a      	mov	r2, r9
 80065ce:	408a      	lsls	r2, r1
 80065d0:	0017      	movs	r7, r2
 80065d2:	4642      	mov	r2, r8
 80065d4:	431f      	orrs	r7, r3
 80065d6:	4653      	mov	r3, sl
 80065d8:	4093      	lsls	r3, r2
 80065da:	001e      	movs	r6, r3
 80065dc:	42af      	cmp	r7, r5
 80065de:	d9c3      	bls.n	8006568 <__udivmoddi4+0x4c>
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	9200      	str	r2, [sp, #0]
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	4643      	mov	r3, r8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0d8      	beq.n	80065a0 <__udivmoddi4+0x84>
 80065ee:	07fb      	lsls	r3, r7, #31
 80065f0:	0872      	lsrs	r2, r6, #1
 80065f2:	431a      	orrs	r2, r3
 80065f4:	4646      	mov	r6, r8
 80065f6:	087b      	lsrs	r3, r7, #1
 80065f8:	e00e      	b.n	8006618 <__udivmoddi4+0xfc>
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	d101      	bne.n	8006602 <__udivmoddi4+0xe6>
 80065fe:	42a2      	cmp	r2, r4
 8006600:	d80c      	bhi.n	800661c <__udivmoddi4+0x100>
 8006602:	1aa4      	subs	r4, r4, r2
 8006604:	419d      	sbcs	r5, r3
 8006606:	2001      	movs	r0, #1
 8006608:	1924      	adds	r4, r4, r4
 800660a:	416d      	adcs	r5, r5
 800660c:	2100      	movs	r1, #0
 800660e:	3e01      	subs	r6, #1
 8006610:	1824      	adds	r4, r4, r0
 8006612:	414d      	adcs	r5, r1
 8006614:	2e00      	cmp	r6, #0
 8006616:	d006      	beq.n	8006626 <__udivmoddi4+0x10a>
 8006618:	42ab      	cmp	r3, r5
 800661a:	d9ee      	bls.n	80065fa <__udivmoddi4+0xde>
 800661c:	3e01      	subs	r6, #1
 800661e:	1924      	adds	r4, r4, r4
 8006620:	416d      	adcs	r5, r5
 8006622:	2e00      	cmp	r6, #0
 8006624:	d1f8      	bne.n	8006618 <__udivmoddi4+0xfc>
 8006626:	9800      	ldr	r0, [sp, #0]
 8006628:	9901      	ldr	r1, [sp, #4]
 800662a:	465b      	mov	r3, fp
 800662c:	1900      	adds	r0, r0, r4
 800662e:	4169      	adcs	r1, r5
 8006630:	2b00      	cmp	r3, #0
 8006632:	db24      	blt.n	800667e <__udivmoddi4+0x162>
 8006634:	002b      	movs	r3, r5
 8006636:	465a      	mov	r2, fp
 8006638:	4644      	mov	r4, r8
 800663a:	40d3      	lsrs	r3, r2
 800663c:	002a      	movs	r2, r5
 800663e:	40e2      	lsrs	r2, r4
 8006640:	001c      	movs	r4, r3
 8006642:	465b      	mov	r3, fp
 8006644:	0015      	movs	r5, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	db2a      	blt.n	80066a0 <__udivmoddi4+0x184>
 800664a:	0026      	movs	r6, r4
 800664c:	409e      	lsls	r6, r3
 800664e:	0033      	movs	r3, r6
 8006650:	0026      	movs	r6, r4
 8006652:	4647      	mov	r7, r8
 8006654:	40be      	lsls	r6, r7
 8006656:	0032      	movs	r2, r6
 8006658:	1a80      	subs	r0, r0, r2
 800665a:	4199      	sbcs	r1, r3
 800665c:	9000      	str	r0, [sp, #0]
 800665e:	9101      	str	r1, [sp, #4]
 8006660:	e79e      	b.n	80065a0 <__udivmoddi4+0x84>
 8006662:	42a3      	cmp	r3, r4
 8006664:	d8bc      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006666:	e782      	b.n	800656e <__udivmoddi4+0x52>
 8006668:	4642      	mov	r2, r8
 800666a:	2320      	movs	r3, #32
 800666c:	2100      	movs	r1, #0
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	2200      	movs	r2, #0
 8006672:	9100      	str	r1, [sp, #0]
 8006674:	9201      	str	r2, [sp, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	40da      	lsrs	r2, r3
 800667a:	9201      	str	r2, [sp, #4]
 800667c:	e785      	b.n	800658a <__udivmoddi4+0x6e>
 800667e:	4642      	mov	r2, r8
 8006680:	2320      	movs	r3, #32
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	002a      	movs	r2, r5
 8006686:	4646      	mov	r6, r8
 8006688:	409a      	lsls	r2, r3
 800668a:	0023      	movs	r3, r4
 800668c:	40f3      	lsrs	r3, r6
 800668e:	4644      	mov	r4, r8
 8006690:	4313      	orrs	r3, r2
 8006692:	002a      	movs	r2, r5
 8006694:	40e2      	lsrs	r2, r4
 8006696:	001c      	movs	r4, r3
 8006698:	465b      	mov	r3, fp
 800669a:	0015      	movs	r5, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	dad4      	bge.n	800664a <__udivmoddi4+0x12e>
 80066a0:	4642      	mov	r2, r8
 80066a2:	002f      	movs	r7, r5
 80066a4:	2320      	movs	r3, #32
 80066a6:	0026      	movs	r6, r4
 80066a8:	4097      	lsls	r7, r2
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	40de      	lsrs	r6, r3
 80066ae:	003b      	movs	r3, r7
 80066b0:	4333      	orrs	r3, r6
 80066b2:	e7cd      	b.n	8006650 <__udivmoddi4+0x134>

080066b4 <__clzsi2>:
 80066b4:	211c      	movs	r1, #28
 80066b6:	2301      	movs	r3, #1
 80066b8:	041b      	lsls	r3, r3, #16
 80066ba:	4298      	cmp	r0, r3
 80066bc:	d301      	bcc.n	80066c2 <__clzsi2+0xe>
 80066be:	0c00      	lsrs	r0, r0, #16
 80066c0:	3910      	subs	r1, #16
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	4298      	cmp	r0, r3
 80066c6:	d301      	bcc.n	80066cc <__clzsi2+0x18>
 80066c8:	0a00      	lsrs	r0, r0, #8
 80066ca:	3908      	subs	r1, #8
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	4298      	cmp	r0, r3
 80066d0:	d301      	bcc.n	80066d6 <__clzsi2+0x22>
 80066d2:	0900      	lsrs	r0, r0, #4
 80066d4:	3904      	subs	r1, #4
 80066d6:	a202      	add	r2, pc, #8	; (adr r2, 80066e0 <__clzsi2+0x2c>)
 80066d8:	5c10      	ldrb	r0, [r2, r0]
 80066da:	1840      	adds	r0, r0, r1
 80066dc:	4770      	bx	lr
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	02020304 	.word	0x02020304
 80066e4:	01010101 	.word	0x01010101
	...

080066f0 <__clzdi2>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	2900      	cmp	r1, #0
 80066f4:	d103      	bne.n	80066fe <__clzdi2+0xe>
 80066f6:	f7ff ffdd 	bl	80066b4 <__clzsi2>
 80066fa:	3020      	adds	r0, #32
 80066fc:	e002      	b.n	8006704 <__clzdi2+0x14>
 80066fe:	0008      	movs	r0, r1
 8006700:	f7ff ffd8 	bl	80066b4 <__clzsi2>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	46c0      	nop			; (mov r8, r8)

08006708 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2201      	movs	r2, #1
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}

08006724 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006734:	46c0      	nop			; (mov r8, r8)
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}

0800673c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	4252      	negs	r2, r2
 800674a:	611a      	str	r2, [r3, #16]
}
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b002      	add	sp, #8
 8006752:	bd80      	pop	{r7, pc}

08006754 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60da      	str	r2, [r3, #12]
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_ADC_ConvCpltCallback>:
SINKData_HandleTypeDef *dhandle = &SNK_data;


// Callback when ADC conversion is complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_USER_GPIO_Port, LED_USER_Pin);
 8006778:	4b04      	ldr	r3, [pc, #16]	; (800678c <HAL_ADC_ConvCpltCallback+0x1c>)
 800677a:	2120      	movs	r1, #32
 800677c:	0018      	movs	r0, r3
 800677e:	f005 fc7c 	bl	800c07a <HAL_GPIO_TogglePin>
}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	46bd      	mov	sp, r7
 8006786:	b002      	add	sp, #8
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	50000400 	.word	0x50000400

08006790 <HAL_ADCEx_LevelOutOfWindow2Callback>:

// Callback when ADWG2 (CH7 ISENSE) goes out of range
void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	outputState = OUTPUT_OFF_STATE;
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <HAL_ADCEx_LevelOutOfWindow2Callback+0x44>)
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
	//Disable output
	HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	480d      	ldr	r0, [pc, #52]	; (80067d8 <HAL_ADCEx_LevelOutOfWindow2Callback+0x48>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	0019      	movs	r1, r3
 80067a8:	f005 fc4a 	bl	800c040 <HAL_GPIO_WritePin>

	//Print the voltage and current to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
	max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet, 3);
 80067ac:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <HAL_ADCEx_LevelOutOfWindow2Callback+0x4c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2203      	movs	r2, #3
 80067b4:	0019      	movs	r1, r3
 80067b6:	2001      	movs	r0, #1
 80067b8:	f000 ff66 	bl	8007688 <max7219_PrintIspecial>
	max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <HAL_ADCEx_LevelOutOfWindow2Callback+0x4c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2204      	movs	r2, #4
 80067c4:	0019      	movs	r1, r3
 80067c6:	2002      	movs	r0, #2
 80067c8:	f000 ff5e 	bl	8007688 <max7219_PrintIspecial>

}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000344 	.word	0x20000344
 80067d8:	50000800 	.word	0x50000800
 80067dc:	20000044 	.word	0x20000044

080067e0 <app_init>:


/*
 * Initialization function
 */
void app_init(void){
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0

	g = 5;
 80067e4:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <app_init+0xc0>)
 80067e6:	2205      	movs	r2, #5
 80067e8:	601a      	str	r2, [r3, #0]

	//TIM7 initialization
	LL_TIM_EnableIT_UPDATE(TIM7); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
 80067ea:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <app_init+0xc4>)
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7ff ffb1 	bl	8006754 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
 80067f2:	4b2c      	ldr	r3, [pc, #176]	; (80068a4 <app_init+0xc4>)
 80067f4:	0018      	movs	r0, r3
 80067f6:	f7ff ffa1 	bl	800673c <LL_TIM_ClearFlag_UPDATE>

	//TIM14 initialization
	LL_TIM_EnableIT_UPDATE(TIM14); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
 80067fa:	4b2b      	ldr	r3, [pc, #172]	; (80068a8 <app_init+0xc8>)
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff ffa9 	bl	8006754 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM14); //Clear update flag on TIMER14
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <app_init+0xc8>)
 8006804:	0018      	movs	r0, r3
 8006806:	f7ff ff99 	bl	800673c <LL_TIM_ClearFlag_UPDATE>

	//TIM3 initialization of encoder
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800680a:	4b28      	ldr	r3, [pc, #160]	; (80068ac <app_init+0xcc>)
 800680c:	213c      	movs	r1, #60	; 0x3c
 800680e:	0018      	movs	r0, r3
 8006810:	f008 ff0a 	bl	800f628 <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 30000); //write non 0 value to avoid shift from 0 -> max value
 8006814:	4b25      	ldr	r3, [pc, #148]	; (80068ac <app_init+0xcc>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <app_init+0xd0>)
 800681a:	625a      	str	r2, [r3, #36]	; 0x24
	encoderVal = __HAL_TIM_GET_COUNTER(&htim3)/4;
 800681c:	4b23      	ldr	r3, [pc, #140]	; (80068ac <app_init+0xcc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	001a      	movs	r2, r3
 8006826:	4b23      	ldr	r3, [pc, #140]	; (80068b4 <app_init+0xd4>)
 8006828:	601a      	str	r2, [r3, #0]
	LL_TIM_SetCounter(TIM4, 0);
	LL_TIM_EnableCounter(TIM4);*/


	//Init DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800682a:	4b23      	ldr	r3, [pc, #140]	; (80068b8 <app_init+0xd8>)
 800682c:	2100      	movs	r1, #0
 800682e:	0018      	movs	r0, r3
 8006830:	f004 fc2e 	bl	800b090 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8006834:	4b21      	ldr	r3, [pc, #132]	; (80068bc <app_init+0xdc>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	481f      	ldr	r0, [pc, #124]	; (80068b8 <app_init+0xd8>)
 800683a:	2200      	movs	r2, #0
 800683c:	2100      	movs	r1, #0
 800683e:	f004 fcd9 	bl	800b1f4 <HAL_DAC_SetValue>

	//Wait for hardware initialization and then turn DB to HIGH (according to TCPP01-M12 datasheet 6.5)
	HAL_Delay(200);
 8006842:	20c8      	movs	r0, #200	; 0xc8
 8006844:	f002 fdc6 	bl	80093d4 <HAL_Delay>
	HAL_GPIO_WritePin(DB_OUT_GPIO_Port, DB_OUT_Pin, GPIO_PIN_SET);
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <app_init+0xe0>)
 800684a:	2201      	movs	r2, #1
 800684c:	2101      	movs	r1, #1
 800684e:	0018      	movs	r0, r3
 8006850:	f005 fbf6 	bl	800c040 <HAL_GPIO_WritePin>

	//Calibrate and start ADC sensing with DMA
	HAL_ADCEx_Calibration_Start(&hadc1);
 8006854:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <app_init+0xe4>)
 8006856:	0018      	movs	r0, r3
 8006858:	f004 fa20 	bl	800ac9c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&aADCxConvertedValues, ADC_NUM_OF_SAMPLES);
 800685c:	491a      	ldr	r1, [pc, #104]	; (80068c8 <app_init+0xe8>)
 800685e:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <app_init+0xe4>)
 8006860:	2203      	movs	r2, #3
 8006862:	0018      	movs	r0, r3
 8006864:	f003 f9d0 	bl	8009c08 <HAL_ADC_Start_DMA>

	//TIM4 initialization
	HAL_TIM_Base_Start(&htim4);
 8006868:	4b18      	ldr	r3, [pc, #96]	; (80068cc <app_init+0xec>)
 800686a:	0018      	movs	r0, r3
 800686c:	f008 fd78 	bl	800f360 <HAL_TIM_Base_Start>

	//Init 7 segment display
	max7219_Init( 7 );
 8006870:	2007      	movs	r0, #7
 8006872:	f000 fdd1 	bl	8007418 <max7219_Init>
	max7219_Decode_On();
 8006876:	f000 fe5b 	bl	8007530 <max7219_Decode_On>

	//Print decimal points and initial values
	max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 800687a:	4b15      	ldr	r3, [pc, #84]	; (80068d0 <app_init+0xf0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2204      	movs	r2, #4
 8006882:	0019      	movs	r1, r3
 8006884:	2002      	movs	r0, #2
 8006886:	f000 feff 	bl	8007688 <max7219_PrintIspecial>
	max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet, 3);
 800688a:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <app_init+0xf0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2203      	movs	r2, #3
 8006892:	0019      	movs	r1, r3
 8006894:	2001      	movs	r0, #1
 8006896:	f000 fef7 	bl	8007688 <max7219_PrintIspecial>

	//HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);


}
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20000340 	.word	0x20000340
 80068a4:	40001400 	.word	0x40001400
 80068a8:	40002000 	.word	0x40002000
 80068ac:	20000484 	.word	0x20000484
 80068b0:	00007530 	.word	0x00007530
 80068b4:	2000031c 	.word	0x2000031c
 80068b8:	2000040c 	.word	0x2000040c
 80068bc:	20000004 	.word	0x20000004
 80068c0:	50000400 	.word	0x50000400
 80068c4:	20000348 	.word	0x20000348
 80068c8:	20000338 	.word	0x20000338
 80068cc:	200004d0 	.word	0x200004d0
 80068d0:	20000044 	.word	0x20000044

080068d4 <app_loop>:


/*
 * Loop function
 */
void app_loop(void){
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af02      	add	r7, sp, #8
			max7219_BlinkDigit(SEGMENT_2, &currentOCP, encoderPress, 500, 4); //pass voltage address to BlinkDigit function
		}
		break;
	}*/

	if (ocp_reset_needed == 1) {
 80068da:	4b44      	ldr	r3, [pc, #272]	; (80069ec <app_loop+0x118>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d113      	bne.n	800690a <app_loop+0x36>
		HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_RESET);
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	4842      	ldr	r0, [pc, #264]	; (80069f0 <app_loop+0x11c>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	0019      	movs	r1, r3
 80068ec:	f005 fba8 	bl	800c040 <HAL_GPIO_WritePin>
		HAL_Delay(4); //datasheet says 100ns minimum pull down time for resettin alert, but for me even 1ms was not enough
 80068f0:	2004      	movs	r0, #4
 80068f2:	f002 fd6f 	bl	80093d4 <HAL_Delay>
		HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
 80068f6:	2380      	movs	r3, #128	; 0x80
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	483d      	ldr	r0, [pc, #244]	; (80069f0 <app_loop+0x11c>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	0019      	movs	r1, r3
 8006900:	f005 fb9e 	bl	800c040 <HAL_GPIO_WritePin>
		ocp_reset_needed = 0;
 8006904:	4b39      	ldr	r3, [pc, #228]	; (80069ec <app_loop+0x118>)
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
	}


	switch(outputState)
 800690a:	4b3a      	ldr	r3, [pc, #232]	; (80069f4 <app_loop+0x120>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <app_loop+0x46>
 8006914:	2b01      	cmp	r3, #1
 8006916:	d03a      	beq.n	800698e <app_loop+0xba>
			break;
		}

	//CDC_Transmit_FS(data, strlen(data));

}
 8006918:	e063      	b.n	80069e2 <app_loop+0x10e>
				switch(currentState)
 800691a:	4b37      	ldr	r3, [pc, #220]	; (80069f8 <app_loop+0x124>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d023      	beq.n	800696c <app_loop+0x98>
 8006924:	dc5c      	bgt.n	80069e0 <app_loop+0x10c>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d011      	beq.n	800694e <app_loop+0x7a>
 800692a:	2b01      	cmp	r3, #1
 800692c:	d158      	bne.n	80069e0 <app_loop+0x10c>
						max7219_BlinkDigit(SEGMENT_1, &dhandle->voltageSet, dhandle->encoder.selDigit, 500, 3); //pass voltage address to BlinkDigit function
 800692e:	4b33      	ldr	r3, [pc, #204]	; (80069fc <app_loop+0x128>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	0018      	movs	r0, r3
 8006934:	4b31      	ldr	r3, [pc, #196]	; (80069fc <app_loop+0x128>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	b2da      	uxtb	r2, r3
 800693c:	23fa      	movs	r3, #250	; 0xfa
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	2103      	movs	r1, #3
 8006942:	9100      	str	r1, [sp, #0]
 8006944:	0001      	movs	r1, r0
 8006946:	2001      	movs	r0, #1
 8006948:	f000 ff6a 	bl	8007820 <max7219_BlinkDigit>
					 break;
 800694c:	e01e      	b.n	800698c <app_loop+0xb8>
						max7219_BlinkDigit(SEGMENT_2, &dhandle->currentSet, dhandle->encoder.selDigit, 500, 4); //pass voltage address to BlinkDigit function
 800694e:	4b2b      	ldr	r3, [pc, #172]	; (80069fc <app_loop+0x128>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	1d19      	adds	r1, r3, #4
 8006954:	4b29      	ldr	r3, [pc, #164]	; (80069fc <app_loop+0x128>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	b2da      	uxtb	r2, r3
 800695c:	23fa      	movs	r3, #250	; 0xfa
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	2004      	movs	r0, #4
 8006962:	9000      	str	r0, [sp, #0]
 8006964:	2002      	movs	r0, #2
 8006966:	f000 ff5b 	bl	8007820 <max7219_BlinkDigit>
					break;
 800696a:	e00f      	b.n	800698c <app_loop+0xb8>
						max7219_BlinkDigit(SEGMENT_2, &dhandle->currentOCPSet, dhandle->encoder.selDigit, 500, 4); //pass voltage address to BlinkDigit function
 800696c:	4b23      	ldr	r3, [pc, #140]	; (80069fc <app_loop+0x128>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	0019      	movs	r1, r3
 8006974:	4b21      	ldr	r3, [pc, #132]	; (80069fc <app_loop+0x128>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	b2da      	uxtb	r2, r3
 800697c:	23fa      	movs	r3, #250	; 0xfa
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	2004      	movs	r0, #4
 8006982:	9000      	str	r0, [sp, #0]
 8006984:	2002      	movs	r0, #2
 8006986:	f000 ff4b 	bl	8007820 <max7219_BlinkDigit>
					break;
 800698a:	46c0      	nop			; (mov r8, r8)
			break;
 800698c:	e028      	b.n	80069e0 <app_loop+0x10c>
				uint32_t vol = BSP_PWR_VBUSGetVoltage(0)/10; //divide by 10 t oget centivolts since only 4 digit display..
 800698e:	2000      	movs	r0, #0
 8006990:	f015 fe02 	bl	801c598 <BSP_PWR_VBUSGetVoltage>
 8006994:	0003      	movs	r3, r0
 8006996:	210a      	movs	r1, #10
 8006998:	0018      	movs	r0, r3
 800699a:	f7ff fcb3 	bl	8006304 <__divsi3>
 800699e:	0003      	movs	r3, r0
 80069a0:	607b      	str	r3, [r7, #4]
				uint32_t cur = BSP_PWR_VBUSGetCurrent(0);
 80069a2:	2000      	movs	r0, #0
 80069a4:	f015 fe0a 	bl	801c5bc <BSP_PWR_VBUSGetCurrent>
 80069a8:	0003      	movs	r3, r0
 80069aa:	603b      	str	r3, [r7, #0]
				dhandle ->currentMeas = cur;
 80069ac:	4b13      	ldr	r3, [pc, #76]	; (80069fc <app_loop+0x128>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	611a      	str	r2, [r3, #16]
				dhandle ->voltageMeas = vol;
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <app_loop+0x128>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	60da      	str	r2, [r3, #12]
				max7219_PrintIspecial(SEGMENT_1, vol, 3);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2203      	movs	r2, #3
 80069c0:	0019      	movs	r1, r3
 80069c2:	2001      	movs	r0, #1
 80069c4:	f000 fe60 	bl	8007688 <max7219_PrintIspecial>
				max7219_PrintIspecial(SEGMENT_2, cur, 4);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2204      	movs	r2, #4
 80069cc:	0019      	movs	r1, r3
 80069ce:	2002      	movs	r0, #2
 80069d0:	f000 fe5a 	bl	8007688 <max7219_PrintIspecial>
				HAL_Delay(500);
 80069d4:	23fa      	movs	r3, #250	; 0xfa
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	0018      	movs	r0, r3
 80069da:	f002 fcfb 	bl	80093d4 <HAL_Delay>
			break;
 80069de:	e000      	b.n	80069e2 <app_loop+0x10e>
			break;
 80069e0:	46c0      	nop			; (mov r8, r8)
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b002      	add	sp, #8
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	20000320 	.word	0x20000320
 80069f0:	50000400 	.word	0x50000400
 80069f4:	20000344 	.word	0x20000344
 80069f8:	20000008 	.word	0x20000008
 80069fc:	20000044 	.word	0x20000044

08006a00 <Update_AWD_Thresholds>:
/**
 * Update ADC CH3 AWD Treshold
 * Possibility to update parameters on the fly (read more in HAL_ADC_AnalogWDGConfig declaration)
 * Full config and AWD init in main.c
 */
void Update_AWD_Thresholds(uint32_t low, uint32_t high) {
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b089      	sub	sp, #36	; 0x24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
	// Just update the thresholds for an already configured AWD
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8006a0a:	2408      	movs	r4, #8
 8006a0c:	193b      	adds	r3, r7, r4
 8006a0e:	0018      	movs	r0, r3
 8006a10:	2318      	movs	r3, #24
 8006a12:	001a      	movs	r2, r3
 8006a14:	2100      	movs	r1, #0
 8006a16:	f01c fe59 	bl	80236cc <memset>
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2; // Specify which AWD you're updating
 8006a1a:	193b      	adds	r3, r7, r4
 8006a1c:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <Update_AWD_Thresholds+0x48>)
 8006a1e:	601a      	str	r2, [r3, #0]
	AnalogWDGConfig.HighThreshold = high;
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	611a      	str	r2, [r3, #16]
	AnalogWDGConfig.LowThreshold = low;
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8006a2c:	193a      	adds	r2, r7, r4
 8006a2e:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <Update_AWD_Thresholds+0x4c>)
 8006a30:	0011      	movs	r1, r2
 8006a32:	0018      	movs	r0, r3
 8006a34:	f003 fc7e 	bl	800a334 <HAL_ADC_AnalogWDGConfig>
 8006a38:	1e03      	subs	r3, r0, #0
 8006a3a:	d001      	beq.n	8006a40 <Update_AWD_Thresholds+0x40>
	{
	    Error_Handler();
 8006a3c:	f002 f8bc 	bl	8008bb8 <Error_Handler>
	}
}
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b009      	add	sp, #36	; 0x24
 8006a46:	bd90      	pop	{r4, r7, pc}
 8006a48:	0017ffff 	.word	0x0017ffff
 8006a4c:	20000348 	.word	0x20000348

08006a50 <updateVoltage>:

// Helper function to update voltage
void updateVoltage(SINKData_HandleTypeDef *handle) {
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b091      	sub	sp, #68	; 0x44
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	6078      	str	r0, [r7, #4]
	//Get direction of encoder turning
	int voltageTemp = handle->voltageSet;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
	voltageTemp += handle->encoder.direction * handle->encoder.increment;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	4353      	muls	r3, r2
 8006a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a6a:	18d3      	adds	r3, r2, r3
 8006a6c:	637b      	str	r3, [r7, #52]	; 0x34

	//If required temp value is within limits, assign it to voltage else assign limits
	if (voltageTemp > handle->voltageMax) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d204      	bcs.n	8006a82 <updateVoltage+0x32>
		handle->voltageSet = handle->voltageMax;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699a      	ldr	r2, [r3, #24]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e00c      	b.n	8006a9c <updateVoltage+0x4c>

	} else if (voltageTemp < handle->voltageMin) {
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695a      	ldr	r2, [r3, #20]
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d904      	bls.n	8006a96 <updateVoltage+0x46>
		handle->voltageSet = handle->voltageMin;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695a      	ldr	r2, [r3, #20]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	e002      	b.n	8006a9c <updateVoltage+0x4c>

	} else {
		handle->voltageSet = voltageTemp;
 8006a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	601a      	str	r2, [r3, #0]
	}

	//Print selected voltage to disp, decimal at digit 3
	max7219_PrintIspecial(SEGMENT_1, handle->voltageSet, 3);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	0019      	movs	r1, r3
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	f000 fdef 	bl	8007688 <max7219_PrintIspecial>

	//Print to debug
	char _str[40];
	sprintf(_str,"VBUS selected: %d mV", handle->voltageSet*10);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	0013      	movs	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	189b      	adds	r3, r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	490a      	ldr	r1, [pc, #40]	; (8006ae4 <updateVoltage+0x94>)
 8006aba:	240c      	movs	r4, #12
 8006abc:	193b      	adds	r3, r7, r4
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f01c fde4 	bl	802368c <siprintf>
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006ac4:	193b      	adds	r3, r7, r4
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f7ff fb80 	bl	80061cc <strlen>
 8006acc:	0002      	movs	r2, r0
 8006ace:	193b      	adds	r3, r7, r4
 8006ad0:	9200      	str	r2, [sp, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	2006      	movs	r0, #6
 8006ad8:	f00b ff92 	bl	8012a00 <USBPD_TRACE_Add>

}
 8006adc:	46c0      	nop			; (mov r8, r8)
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b00f      	add	sp, #60	; 0x3c
 8006ae2:	bd90      	pop	{r4, r7, pc}
 8006ae4:	08023f94 	.word	0x08023f94

08006ae8 <updateCurrent>:

// Helper function to update voltage
void updateCurrent(SINKData_HandleTypeDef *handle) {
 8006ae8:	b590      	push	{r4, r7, lr}
 8006aea:	b093      	sub	sp, #76	; 0x4c
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	6078      	str	r0, [r7, #4]
	//Get direction of encoder turning
	int currentTemp = handle->currentSet;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
	currentTemp += handle->encoder.direction * handle->encoder.increment;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	4353      	muls	r3, r2
 8006b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b02:	18d3      	adds	r3, r2, r3
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c

	//If required temp value is within limits, assign it to voltage else assign limits
	if (currentTemp > handle->currentMax) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69da      	ldr	r2, [r3, #28]
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d204      	bcs.n	8006b1a <updateCurrent+0x32>
		handle->currentSet = handle->currentMax;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	605a      	str	r2, [r3, #4]
 8006b18:	e00c      	b.n	8006b34 <updateCurrent+0x4c>

	} else if (currentTemp < handle->currentMin) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d904      	bls.n	8006b2e <updateCurrent+0x46>
		handle->currentSet = handle->currentMin;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	605a      	str	r2, [r3, #4]
 8006b2c:	e002      	b.n	8006b34 <updateCurrent+0x4c>

	} else {
		handle->currentSet = currentTemp;
 8006b2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	605a      	str	r2, [r3, #4]
	}

	//Update AWD limits
	int isense_Vtrip_mV = (handle->currentSet *G_SENSE*R_SENSE_MOHMS)/1000; // mV  (mA * mOhms * Gain)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	0013      	movs	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	189b      	adds	r3, r3, r2
 8006b3e:	011a      	lsls	r2, r3, #4
 8006b40:	1ad2      	subs	r2, r2, r3
 8006b42:	00d3      	lsls	r3, r2, #3
 8006b44:	001a      	movs	r2, r3
 8006b46:	23fa      	movs	r3, #250	; 0xfa
 8006b48:	0099      	lsls	r1, r3, #2
 8006b4a:	0010      	movs	r0, r2
 8006b4c:	f7ff fb50 	bl	80061f0 <__udivsi3>
 8006b50:	0003      	movs	r3, r0
 8006b52:	63bb      	str	r3, [r7, #56]	; 0x38
	int isense_rawADCtrip= (isense_Vtrip_mV *4095) / VDDA_APPLI; //value for AWD tershold
 8006b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b56:	0013      	movs	r3, r2
 8006b58:	031b      	lsls	r3, r3, #12
 8006b5a:	1a9b      	subs	r3, r3, r2
 8006b5c:	4914      	ldr	r1, [pc, #80]	; (8006bb0 <updateCurrent+0xc8>)
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7ff fbd0 	bl	8006304 <__divsi3>
 8006b64:	0003      	movs	r3, r0
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
	Update_AWD_Thresholds(0, isense_rawADCtrip);
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	0019      	movs	r1, r3
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f7ff ff47 	bl	8006a00 <Update_AWD_Thresholds>

	//Print selected voltage to disp, decimal at digit 3
	max7219_PrintIspecial(SEGMENT_2, handle->currentSet, 4);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2204      	movs	r2, #4
 8006b78:	0019      	movs	r1, r3
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f000 fd84 	bl	8007688 <max7219_PrintIspecial>

	//Print to debug
	char _str[40];
	sprintf(_str,"IBUS selected: %d mA", handle->currentSet);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	490b      	ldr	r1, [pc, #44]	; (8006bb4 <updateCurrent+0xcc>)
 8006b86:	240c      	movs	r4, #12
 8006b88:	193b      	adds	r3, r7, r4
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f01c fd7e 	bl	802368c <siprintf>
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006b90:	193b      	adds	r3, r7, r4
 8006b92:	0018      	movs	r0, r3
 8006b94:	f7ff fb1a 	bl	80061cc <strlen>
 8006b98:	0002      	movs	r2, r0
 8006b9a:	193b      	adds	r3, r7, r4
 8006b9c:	9200      	str	r2, [sp, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	2006      	movs	r0, #6
 8006ba4:	f00b ff2c 	bl	8012a00 <USBPD_TRACE_Add>
}
 8006ba8:	46c0      	nop			; (mov r8, r8)
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b011      	add	sp, #68	; 0x44
 8006bae:	bd90      	pop	{r4, r7, pc}
 8006bb0:	00000ce4 	.word	0x00000ce4
 8006bb4:	08023fac 	.word	0x08023fac

08006bb8 <updateCurrentOCP>:

// Helper function to update voltage
void updateCurrentOCP(SINKData_HandleTypeDef *handle) {
 8006bb8:	b590      	push	{r4, r7, lr}
 8006bba:	b093      	sub	sp, #76	; 0x4c
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	6078      	str	r0, [r7, #4]
	//Get direction of encoder turning
	int currentTemp = handle->currentOCPSet;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	currentTemp += handle->encoder.direction * handle->encoder.increment;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	4353      	muls	r3, r2
 8006bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bd2:	18d3      	adds	r3, r2, r3
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c

	//If required temp value is within limits, assign it to voltage
	if ( (handle->currentMin <= currentTemp) && (currentTemp <= handle->currentMax) ) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1a      	ldr	r2, [r3, #32]
 8006bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d807      	bhi.n	8006bf0 <updateCurrentOCP+0x38>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d302      	bcc.n	8006bf0 <updateCurrentOCP+0x38>
		handle->currentOCPSet = currentTemp;
 8006bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	609a      	str	r2, [r3, #8]
	} else {
		//currentOCPTemp = currentOCP;
	}

	int V_TRIP = (handle->currentOCPSet * R_OCP_MOHMS * G_OCP)/1000; // mV (mA * mOhms * Gain)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	0013      	movs	r3, r2
 8006bf6:	015b      	lsls	r3, r3, #5
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	189b      	adds	r3, r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	001a      	movs	r2, r3
 8006c02:	23fa      	movs	r3, #250	; 0xfa
 8006c04:	0099      	lsls	r1, r3, #2
 8006c06:	0010      	movs	r0, r2
 8006c08:	f7ff faf2 	bl	80061f0 <__udivsi3>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
	//Convert DAC_OUT voltage to 12B resolution
	int dac_value = (V_TRIP *4095) / VDDA_APPLI;//__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B);
 8006c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c12:	0013      	movs	r3, r2
 8006c14:	031b      	lsls	r3, r3, #12
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	4915      	ldr	r1, [pc, #84]	; (8006c70 <updateCurrentOCP+0xb8>)
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f7ff fb72 	bl	8006304 <__divsi3>
 8006c20:	0003      	movs	r3, r0
 8006c22:	637b      	str	r3, [r7, #52]	; 0x34
	//Write output with DAC..
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	4813      	ldr	r0, [pc, #76]	; (8006c74 <updateCurrentOCP+0xbc>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	f004 fae2 	bl	800b1f4 <HAL_DAC_SetValue>

	//Print selected voltage to disp, decimal at digit 3
	max7219_PrintIspecial(SEGMENT_2, handle->currentOCPSet, 4);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2204      	movs	r2, #4
 8006c36:	0019      	movs	r1, r3
 8006c38:	2002      	movs	r0, #2
 8006c3a:	f000 fd25 	bl	8007688 <max7219_PrintIspecial>

	//Print to debug
	char _str[40];
	sprintf(_str,"IOCP selected: %d mA", handle->currentOCPSet);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	490d      	ldr	r1, [pc, #52]	; (8006c78 <updateCurrentOCP+0xc0>)
 8006c44:	240c      	movs	r4, #12
 8006c46:	193b      	adds	r3, r7, r4
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f01c fd1f 	bl	802368c <siprintf>
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006c4e:	193b      	adds	r3, r7, r4
 8006c50:	0018      	movs	r0, r3
 8006c52:	f7ff fabb 	bl	80061cc <strlen>
 8006c56:	0002      	movs	r2, r0
 8006c58:	193b      	adds	r3, r7, r4
 8006c5a:	9200      	str	r2, [sp, #0]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2100      	movs	r1, #0
 8006c60:	2006      	movs	r0, #6
 8006c62:	f00b fecd 	bl	8012a00 <USBPD_TRACE_Add>

}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	b011      	add	sp, #68	; 0x44
 8006c6c:	bd90      	pop	{r4, r7, pc}
 8006c6e:	46c0      	nop			; (mov r8, r8)
 8006c70:	00000ce4 	.word	0x00000ce4
 8006c74:	2000040c 	.word	0x2000040c
 8006c78:	08023fc4 	.word	0x08023fc4

08006c7c <encoder_turn_isr>:

/**
 * TIM2 encoder turning interrupt service routine
 */
void encoder_turn_isr(void) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
	//Get the TIM3 (encoder) value from CNT register
	encoderVal = (TIM3 -> CNT) >> 2;
 8006c80:	4b21      	ldr	r3, [pc, #132]	; (8006d08 <encoder_turn_isr+0x8c>)
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	089b      	lsrs	r3, r3, #2
 8006c86:	001a      	movs	r2, r3
 8006c88:	4b20      	ldr	r3, [pc, #128]	; (8006d0c <encoder_turn_isr+0x90>)
 8006c8a:	601a      	str	r2, [r3, #0]

	dhandle->encoder.curValue= encoderVal;
 8006c8c:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <encoder_turn_isr+0x94>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1e      	ldr	r2, [pc, #120]	; (8006d0c <encoder_turn_isr+0x90>)
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	625a      	str	r2, [r3, #36]	; 0x24

	if (encoderVal != dhandle->encoder.prevValue){
 8006c96:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <encoder_turn_isr+0x94>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c9c:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <encoder_turn_isr+0x90>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d02e      	beq.n	8006d02 <encoder_turn_isr+0x86>

		dhandle->encoder.direction = (encoderVal < dhandle->encoder.prevValue) ? 1 : -1;
 8006ca4:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <encoder_turn_isr+0x94>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006caa:	4b18      	ldr	r3, [pc, #96]	; (8006d0c <encoder_turn_isr+0x90>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	dd01      	ble.n	8006cb6 <encoder_turn_isr+0x3a>
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	e001      	b.n	8006cba <encoder_turn_isr+0x3e>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	425a      	negs	r2, r3
 8006cba:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <encoder_turn_isr+0x94>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	635a      	str	r2, [r3, #52]	; 0x34

		switch(currentState)
 8006cc0:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <encoder_turn_isr+0x98>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d010      	beq.n	8006cec <encoder_turn_isr+0x70>
 8006cca:	dc15      	bgt.n	8006cf8 <encoder_turn_isr+0x7c>
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <encoder_turn_isr+0x64>
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d111      	bne.n	8006cf8 <encoder_turn_isr+0x7c>
		{
		case ADJUSTMENT_VOLTAGE:
		{
			updateVoltage(dhandle);
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <encoder_turn_isr+0x94>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f7ff feb9 	bl	8006a50 <updateVoltage>
		}
		break;
 8006cde:	e00b      	b.n	8006cf8 <encoder_turn_isr+0x7c>

		case ADJUSTMENT_CURRENT:
		{
			updateCurrent(dhandle);
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <encoder_turn_isr+0x94>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f7ff feff 	bl	8006ae8 <updateCurrent>

		}
		break;
 8006cea:	e005      	b.n	8006cf8 <encoder_turn_isr+0x7c>

		case ADJUSTMENT_CURRENT_OCP:
		{
			updateCurrentOCP(dhandle);
 8006cec:	4b08      	ldr	r3, [pc, #32]	; (8006d10 <encoder_turn_isr+0x94>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7ff ff61 	bl	8006bb8 <updateCurrentOCP>
		}
		break;
 8006cf6:	46c0      	nop			; (mov r8, r8)

		}

		//Save TIM2 CNT value to ValPrev
		dhandle->encoder.prevValue = encoderVal;
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <encoder_turn_isr+0x94>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a03      	ldr	r2, [pc, #12]	; (8006d0c <encoder_turn_isr+0x90>)
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	40000400 	.word	0x40000400
 8006d0c:	2000031c 	.word	0x2000031c
 8006d10:	20000044 	.word	0x20000044
 8006d14:	20000008 	.word	0x20000008

08006d18 <enc_toggle_units_isr>:


/**
 * Button interrupt service routine
 */
void enc_toggle_units_isr(void){
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b096      	sub	sp, #88	; 0x58
 8006d1c:	af02      	add	r7, sp, #8
	/*
	const char response[] = "POWER is ON\r\n";
	        LPUART_Transmit(LPUART2, (const uint8_t*)response, sizeof(response) - 1);*/

	//Mask unwanted button interrupts caused by debouncing on exti line 3 (PD8)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM8);
 8006d1e:	4a4f      	ldr	r2, [pc, #316]	; (8006e5c <enc_toggle_units_isr+0x144>)
 8006d20:	2380      	movs	r3, #128	; 0x80
 8006d22:	58d3      	ldr	r3, [r2, r3]
 8006d24:	494d      	ldr	r1, [pc, #308]	; (8006e5c <enc_toggle_units_isr+0x144>)
 8006d26:	4a4e      	ldr	r2, [pc, #312]	; (8006e60 <enc_toggle_units_isr+0x148>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2280      	movs	r2, #128	; 0x80
 8006d2c:	508b      	str	r3, [r1, r2]

	//Set debouncing time in ms
	TIM7->ARR = 200;
 8006d2e:	4b4d      	ldr	r3, [pc, #308]	; (8006e64 <enc_toggle_units_isr+0x14c>)
 8006d30:	22c8      	movs	r2, #200	; 0xc8
 8006d32:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006d34:	4b4b      	ldr	r3, [pc, #300]	; (8006e64 <enc_toggle_units_isr+0x14c>)
 8006d36:	2100      	movs	r1, #0
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f7ff fcf3 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8006d3e:	4b49      	ldr	r3, [pc, #292]	; (8006e64 <enc_toggle_units_isr+0x14c>)
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7ff fce1 	bl	8006708 <LL_TIM_EnableCounter>

	//Decrement encoderPress value if higher than 4
	if (dhandle->encoder.selDigit > 1){
 8006d46:	4b48      	ldr	r3, [pc, #288]	; (8006e68 <enc_toggle_units_isr+0x150>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	dd05      	ble.n	8006d5c <enc_toggle_units_isr+0x44>
		dhandle->encoder.selDigit--;
 8006d50:	4b45      	ldr	r3, [pc, #276]	; (8006e68 <enc_toggle_units_isr+0x150>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d56:	3a01      	subs	r2, #1
 8006d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d5a:	e003      	b.n	8006d64 <enc_toggle_units_isr+0x4c>
	}
	else {
		dhandle->encoder.selDigit = 4;
 8006d5c:	4b42      	ldr	r3, [pc, #264]	; (8006e68 <enc_toggle_units_isr+0x150>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2204      	movs	r2, #4
 8006d62:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	//Choose addition value based on encoderPress val and current ADJUSTMENT_STATE (voltage/current)
	int val;
	switch (currentState){
 8006d64:	4b41      	ldr	r3, [pc, #260]	; (8006e6c <enc_toggle_units_isr+0x154>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d020      	beq.n	8006db0 <enc_toggle_units_isr+0x98>
 8006d6e:	dc3e      	bgt.n	8006dee <enc_toggle_units_isr+0xd6>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01d      	beq.n	8006db0 <enc_toggle_units_isr+0x98>
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d13a      	bne.n	8006dee <enc_toggle_units_isr+0xd6>
		case ADJUSTMENT_VOLTAGE:
			switch (dhandle->encoder.selDigit) {
 8006d78:	4b3b      	ldr	r3, [pc, #236]	; (8006e68 <enc_toggle_units_isr+0x150>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d011      	beq.n	8006da6 <enc_toggle_units_isr+0x8e>
 8006d82:	dc31      	bgt.n	8006de8 <enc_toggle_units_isr+0xd0>
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d00b      	beq.n	8006da0 <enc_toggle_units_isr+0x88>
 8006d88:	dc2e      	bgt.n	8006de8 <enc_toggle_units_isr+0xd0>
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d002      	beq.n	8006d94 <enc_toggle_units_isr+0x7c>
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d003      	beq.n	8006d9a <enc_toggle_units_isr+0x82>
			case 1: val = 2; break;
			case 2: val = 10; break;
			case 3: val = 100; break;
			case 4: val = 1000; break;
			}
		 break;
 8006d92:	e029      	b.n	8006de8 <enc_toggle_units_isr+0xd0>
			case 1: val = 2; break;
 8006d94:	2302      	movs	r3, #2
 8006d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d98:	e009      	b.n	8006dae <enc_toggle_units_isr+0x96>
			case 2: val = 10; break;
 8006d9a:	230a      	movs	r3, #10
 8006d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d9e:	e006      	b.n	8006dae <enc_toggle_units_isr+0x96>
			case 3: val = 100; break;
 8006da0:	2364      	movs	r3, #100	; 0x64
 8006da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da4:	e003      	b.n	8006dae <enc_toggle_units_isr+0x96>
			case 4: val = 1000; break;
 8006da6:	23fa      	movs	r3, #250	; 0xfa
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dac:	46c0      	nop			; (mov r8, r8)
		 break;
 8006dae:	e01b      	b.n	8006de8 <enc_toggle_units_isr+0xd0>
		case ADJUSTMENT_CURRENT_OCP:
		case ADJUSTMENT_CURRENT:
			switch (dhandle->encoder.selDigit) {
 8006db0:	4b2d      	ldr	r3, [pc, #180]	; (8006e68 <enc_toggle_units_isr+0x150>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d011      	beq.n	8006dde <enc_toggle_units_isr+0xc6>
 8006dba:	dc17      	bgt.n	8006dec <enc_toggle_units_isr+0xd4>
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d00b      	beq.n	8006dd8 <enc_toggle_units_isr+0xc0>
 8006dc0:	dc14      	bgt.n	8006dec <enc_toggle_units_isr+0xd4>
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d002      	beq.n	8006dcc <enc_toggle_units_isr+0xb4>
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d003      	beq.n	8006dd2 <enc_toggle_units_isr+0xba>
			case 1: val = 5; break;
			case 2: val = 10; break;
			case 3: val = 100; break;
			case 4: val = 1000; break;
			}
		 break;
 8006dca:	e00f      	b.n	8006dec <enc_toggle_units_isr+0xd4>
			case 1: val = 5; break;
 8006dcc:	2305      	movs	r3, #5
 8006dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd0:	e009      	b.n	8006de6 <enc_toggle_units_isr+0xce>
			case 2: val = 10; break;
 8006dd2:	230a      	movs	r3, #10
 8006dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd6:	e006      	b.n	8006de6 <enc_toggle_units_isr+0xce>
			case 3: val = 100; break;
 8006dd8:	2364      	movs	r3, #100	; 0x64
 8006dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ddc:	e003      	b.n	8006de6 <enc_toggle_units_isr+0xce>
			case 4: val = 1000; break;
 8006dde:	23fa      	movs	r3, #250	; 0xfa
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de4:	46c0      	nop			; (mov r8, r8)
		 break;
 8006de6:	e001      	b.n	8006dec <enc_toggle_units_isr+0xd4>
		 break;
 8006de8:	46c0      	nop			; (mov r8, r8)
 8006dea:	e000      	b.n	8006dee <enc_toggle_units_isr+0xd6>
		 break;
 8006dec:	46c0      	nop			; (mov r8, r8)
	}

	dhandle->encoder.increment = val;
 8006dee:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <enc_toggle_units_isr+0x150>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30

	char _str[60];
	uint32_t voltageADC = BSP_PWR_VBUSGetVoltage(0);
 8006df6:	2000      	movs	r0, #0
 8006df8:	f015 fbce 	bl	801c598 <BSP_PWR_VBUSGetVoltage>
 8006dfc:	0003      	movs	r3, r0
 8006dfe:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t currentADC= BSP_PWR_VBUSGetCurrent(0);
 8006e00:	2000      	movs	r0, #0
 8006e02:	f015 fbdb 	bl	801c5bc <BSP_PWR_VBUSGetCurrent>
 8006e06:	0003      	movs	r3, r0
 8006e08:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t currentOCP_ADC= BSP_PWR_VBUSGetCurrentOCP(0);
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	f015 fcee 	bl	801c7ec <BSP_PWR_VBUSGetCurrentOCP>
 8006e10:	0003      	movs	r3, r0
 8006e12:	643b      	str	r3, [r7, #64]	; 0x40

	// Use snprintf to limit the number of characters written
	int len = snprintf(_str, sizeof(_str), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltageADC, currentADC, currentOCP_ADC);
 8006e14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006e16:	4a16      	ldr	r2, [pc, #88]	; (8006e70 <enc_toggle_units_isr+0x158>)
 8006e18:	0038      	movs	r0, r7
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	000b      	movs	r3, r1
 8006e24:	213c      	movs	r1, #60	; 0x3c
 8006e26:	f01c fbfd 	bl	8023624 <sniprintf>
 8006e2a:	0003      	movs	r3, r0
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c

	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006e2e:	003b      	movs	r3, r7
 8006e30:	0018      	movs	r0, r3
 8006e32:	f7ff f9cb 	bl	80061cc <strlen>
 8006e36:	0002      	movs	r2, r0
 8006e38:	003b      	movs	r3, r7
 8006e3a:	9200      	str	r2, [sp, #0]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2100      	movs	r1, #0
 8006e40:	2006      	movs	r0, #6
 8006e42:	f00b fddd 	bl	8012a00 <USBPD_TRACE_Add>

	//Erase btn (PC3) interrupt flag
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <enc_toggle_units_isr+0x144>)
 8006e48:	2208      	movs	r2, #8
 8006e4a:	60da      	str	r2, [r3, #12]
 8006e4c:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <enc_toggle_units_isr+0x144>)
 8006e4e:	2208      	movs	r2, #8
 8006e50:	611a      	str	r2, [r3, #16]

}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b014      	add	sp, #80	; 0x50
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	40021800 	.word	0x40021800
 8006e60:	fffffeff 	.word	0xfffffeff
 8006e64:	40001400 	.word	0x40001400
 8006e68:	20000044 	.word	0x20000044
 8006e6c:	20000008 	.word	0x20000008
 8006e70:	08023fdc 	.word	0x08023fdc

08006e74 <tim7_btn_isr>:

/*
 * Timer7 interrupt routine for button debouncing
 */
void tim7_btn_isr(void){
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
	//Unmask exti line 1, 2 and 3
	EXTI->IMR1 |= EXTI_IMR1_IM8; //unmask interrupt mask register on exti line 3 (PD8)
 8006e78:	4a0f      	ldr	r2, [pc, #60]	; (8006eb8 <tim7_btn_isr+0x44>)
 8006e7a:	2380      	movs	r3, #128	; 0x80
 8006e7c:	58d3      	ldr	r3, [r2, r3]
 8006e7e:	490e      	ldr	r1, [pc, #56]	; (8006eb8 <tim7_btn_isr+0x44>)
 8006e80:	2280      	movs	r2, #128	; 0x80
 8006e82:	0052      	lsls	r2, r2, #1
 8006e84:	4313      	orrs	r3, r2
 8006e86:	2280      	movs	r2, #128	; 0x80
 8006e88:	508b      	str	r3, [r1, r2]
	EXTI->IMR1 |= EXTI_IMR1_IM2; //unmask interrupt mask register on exti line 2 (PB2)
 8006e8a:	4a0b      	ldr	r2, [pc, #44]	; (8006eb8 <tim7_btn_isr+0x44>)
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	58d3      	ldr	r3, [r2, r3]
 8006e90:	4909      	ldr	r1, [pc, #36]	; (8006eb8 <tim7_btn_isr+0x44>)
 8006e92:	2204      	movs	r2, #4
 8006e94:	4313      	orrs	r3, r2
 8006e96:	2280      	movs	r2, #128	; 0x80
 8006e98:	508b      	str	r3, [r1, r2]
	EXTI->IMR1 |= EXTI_IMR1_IM1; //unmask interrupt mask register on exti line 1 (PB1)
 8006e9a:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <tim7_btn_isr+0x44>)
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	58d3      	ldr	r3, [r2, r3]
 8006ea0:	4905      	ldr	r1, [pc, #20]	; (8006eb8 <tim7_btn_isr+0x44>)
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	2280      	movs	r2, #128	; 0x80
 8006ea8:	508b      	str	r3, [r1, r2]

	//Clear update flag on TIM7
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
 8006eaa:	4b04      	ldr	r3, [pc, #16]	; (8006ebc <tim7_btn_isr+0x48>)
 8006eac:	0018      	movs	r0, r3
 8006eae:	f7ff fc45 	bl	800673c <LL_TIM_ClearFlag_UPDATE>
}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40021800 	.word	0x40021800
 8006ebc:	40001400 	.word	0x40001400

08006ec0 <tim14_isr>:

/*
 * Timer interrupt routine
 */
void tim14_isr(void){
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
	//Unmask exti line 6
	EXTI->IMR1 |= EXTI_IMR1_IM6; //unmask interrupt (PB6)
 8006ec4:	4a08      	ldr	r2, [pc, #32]	; (8006ee8 <tim14_isr+0x28>)
 8006ec6:	2380      	movs	r3, #128	; 0x80
 8006ec8:	58d3      	ldr	r3, [r2, r3]
 8006eca:	4907      	ldr	r1, [pc, #28]	; (8006ee8 <tim14_isr+0x28>)
 8006ecc:	2240      	movs	r2, #64	; 0x40
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	508b      	str	r3, [r1, r2]

	//Alert set during turning off/on output, we need to clean it
	ocp_reset_needed = 1;
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <tim14_isr+0x2c>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]

	//Clear update flag on TIM7
	LL_TIM_ClearFlag_UPDATE(TIM14); //Clear update flag on TIMER7
 8006eda:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <tim14_isr+0x30>)
 8006edc:	0018      	movs	r0, r3
 8006ede:	f7ff fc2d 	bl	800673c <LL_TIM_ClearFlag_UPDATE>
}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40021800 	.word	0x40021800
 8006eec:	20000320 	.word	0x20000320
 8006ef0:	40002000 	.word	0x40002000

08006ef4 <sw3_on_off_isr>:


/*
 * Request button interrupt routine, request APDO with user voltage and current
 */
void sw3_on_off_isr(void){
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b097      	sub	sp, #92	; 0x5c
 8006ef8:	af02      	add	r7, sp, #8
	//Read SRC capability
	//USBPD_StatusTypeDef status = USBPD_ERROR;
	//status = USBPD_DPM_RequestGetSourceCapability(0);

	//Mask unwanted button interrupts caused by debouncing on exti line 1 (PB1)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM1);
 8006efa:	4a2f      	ldr	r2, [pc, #188]	; (8006fb8 <sw3_on_off_isr+0xc4>)
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	58d3      	ldr	r3, [r2, r3]
 8006f00:	492d      	ldr	r1, [pc, #180]	; (8006fb8 <sw3_on_off_isr+0xc4>)
 8006f02:	2202      	movs	r2, #2
 8006f04:	4393      	bics	r3, r2
 8006f06:	2280      	movs	r2, #128	; 0x80
 8006f08:	508b      	str	r3, [r1, r2]

	//HAL_GPIO_WritePin(OCP_ALERT_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_RESET);

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006f0a:	4b2c      	ldr	r3, [pc, #176]	; (8006fbc <sw3_on_off_isr+0xc8>)
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f7ff fc08 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8006f14:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <sw3_on_off_isr+0xc8>)
 8006f16:	0018      	movs	r0, r3
 8006f18:	f7ff fbf6 	bl	8006708 <LL_TIM_EnableCounter>

	g += 1;
 8006f1c:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <sw3_on_off_isr+0xcc>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	4b27      	ldr	r3, [pc, #156]	; (8006fc0 <sw3_on_off_isr+0xcc>)
 8006f24:	601a      	str	r2, [r3, #0]
	} USBPD_DPM_SNKPowerRequestDetailsTypeDef;
	#endif */

	//sourcecapa_limits();

	int indexSRCAPDO = USER_SERV_FindSRCIndex(0, &powerRequestDetails, dhandle->voltageSet*10, dhandle->currentSet, PDO_SEL_METHOD_MAX_CUR);
 8006f26:	4b27      	ldr	r3, [pc, #156]	; (8006fc4 <sw3_on_off_isr+0xd0>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	1c1a      	adds	r2, r3, #0
 8006f30:	0092      	lsls	r2, r2, #2
 8006f32:	18d3      	adds	r3, r2, r3
 8006f34:	18db      	adds	r3, r3, r3
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	4b22      	ldr	r3, [pc, #136]	; (8006fc4 <sw3_on_off_isr+0xd0>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4921      	ldr	r1, [pc, #132]	; (8006fc8 <sw3_on_off_isr+0xd4>)
 8006f42:	2004      	movs	r0, #4
 8006f44:	9000      	str	r0, [sp, #0]
 8006f46:	2000      	movs	r0, #0
 8006f48:	f016 fb26 	bl	801d598 <USER_SERV_FindSRCIndex>
 8006f4c:	0003      	movs	r3, r0
 8006f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
	//Print to debug
	char _str[70];
	sprintf(_str,"APDO request: indexSRCPDO= %lu, VBUS= %lu mV, Ibus= %d mA", indexSRCAPDO, 10*dhandle->voltageSet, dhandle->currentSet);
 8006f50:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <sw3_on_off_isr+0xd0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	0013      	movs	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	189b      	adds	r3, r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	001c      	movs	r4, r3
 8006f60:	4b18      	ldr	r3, [pc, #96]	; (8006fc4 <sw3_on_off_isr+0xd0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f68:	4918      	ldr	r1, [pc, #96]	; (8006fcc <sw3_on_off_isr+0xd8>)
 8006f6a:	1d38      	adds	r0, r7, #4
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	0023      	movs	r3, r4
 8006f70:	f01c fb8c 	bl	802368c <siprintf>
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006f74:	1d3b      	adds	r3, r7, #4
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7ff f928 	bl	80061cc <strlen>
 8006f7c:	0002      	movs	r2, r0
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	9200      	str	r2, [sp, #0]
 8006f82:	2200      	movs	r2, #0
 8006f84:	2100      	movs	r1, #0
 8006f86:	2006      	movs	r0, #6
 8006f88:	f00b fd3a 	bl	8012a00 <USBPD_TRACE_Add>
	USBPD_DPM_RequestSRCPDO(0, indexSRCAPDO, dhandle->voltageSet*10, dhandle->currentSet);
 8006f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8e:	b2d9      	uxtb	r1, r3
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <sw3_on_off_isr+0xd0>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	1c1a      	adds	r2, r3, #0
 8006f9a:	0092      	lsls	r2, r2, #2
 8006f9c:	18d3      	adds	r3, r2, r3
 8006f9e:	18db      	adds	r3, r3, r3
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <sw3_on_off_isr+0xd0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2000      	movs	r0, #0
 8006fac:	f015 fa8a 	bl	801c4c4 <USBPD_DPM_RequestSRCPDO>
	//HAL_Delay(2);
	//HAL_GPIO_WritePin(OCP_ALERT_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
}
 8006fb0:	46c0      	nop			; (mov r8, r8)
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	b015      	add	sp, #84	; 0x54
 8006fb6:	bd90      	pop	{r4, r7, pc}
 8006fb8:	40021800 	.word	0x40021800
 8006fbc:	40001400 	.word	0x40001400
 8006fc0:	20000340 	.word	0x20000340
 8006fc4:	20000044 	.word	0x20000044
 8006fc8:	20000324 	.word	0x20000324
 8006fcc:	08024004 	.word	0x08024004

08006fd0 <sw1_toggle_i_v_isr>:

/*
 * Change between current and voltage ADJUSTMENT_STATE
 */
void sw1_toggle_i_v_isr(void){
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b096      	sub	sp, #88	; 0x58
 8006fd4:	af02      	add	r7, sp, #8
	//Mask unwanted button interrupts caused by debouncing on exti line 2 (PB2)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM2);
 8006fd6:	4a32      	ldr	r2, [pc, #200]	; (80070a0 <sw1_toggle_i_v_isr+0xd0>)
 8006fd8:	2380      	movs	r3, #128	; 0x80
 8006fda:	58d3      	ldr	r3, [r2, r3]
 8006fdc:	4930      	ldr	r1, [pc, #192]	; (80070a0 <sw1_toggle_i_v_isr+0xd0>)
 8006fde:	2204      	movs	r2, #4
 8006fe0:	4393      	bics	r3, r2
 8006fe2:	2280      	movs	r2, #128	; 0x80
 8006fe4:	508b      	str	r3, [r1, r2]

	//Set debouncing time in ms
	TIM7->ARR = 200;
 8006fe6:	4b2f      	ldr	r3, [pc, #188]	; (80070a4 <sw1_toggle_i_v_isr+0xd4>)
 8006fe8:	22c8      	movs	r2, #200	; 0xc8
 8006fea:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006fec:	4b2d      	ldr	r3, [pc, #180]	; (80070a4 <sw1_toggle_i_v_isr+0xd4>)
 8006fee:	2100      	movs	r1, #0
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f7ff fb97 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8006ff6:	4b2b      	ldr	r3, [pc, #172]	; (80070a4 <sw1_toggle_i_v_isr+0xd4>)
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f7ff fb85 	bl	8006708 <LL_TIM_EnableCounter>

	// Toggle the state
	if (currentState == ADJUSTMENT_CURRENT_OCP)
 8006ffe:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <sw1_toggle_i_v_isr+0xd8>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d103      	bne.n	8007010 <sw1_toggle_i_v_isr+0x40>
	{
		currentState = ADJUSTMENT_VOLTAGE;
 8007008:	4b27      	ldr	r3, [pc, #156]	; (80070a8 <sw1_toggle_i_v_isr+0xd8>)
 800700a:	2201      	movs	r2, #1
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	e01b      	b.n	8007048 <sw1_toggle_i_v_isr+0x78>
	}
	else if (currentState == ADJUSTMENT_VOLTAGE)
 8007010:	4b25      	ldr	r3, [pc, #148]	; (80070a8 <sw1_toggle_i_v_isr+0xd8>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b01      	cmp	r3, #1
 8007018:	d10b      	bne.n	8007032 <sw1_toggle_i_v_isr+0x62>
	{
		currentState = ADJUSTMENT_CURRENT;
 800701a:	4b23      	ldr	r3, [pc, #140]	; (80070a8 <sw1_toggle_i_v_isr+0xd8>)
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]
		//Display output current
		max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 8007020:	4b22      	ldr	r3, [pc, #136]	; (80070ac <sw1_toggle_i_v_isr+0xdc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2204      	movs	r2, #4
 8007028:	0019      	movs	r1, r3
 800702a:	2002      	movs	r0, #2
 800702c:	f000 fb2c 	bl	8007688 <max7219_PrintIspecial>
 8007030:	e00a      	b.n	8007048 <sw1_toggle_i_v_isr+0x78>
	}
	else
	{
		currentState = ADJUSTMENT_CURRENT_OCP;
 8007032:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <sw1_toggle_i_v_isr+0xd8>)
 8007034:	2202      	movs	r2, #2
 8007036:	701a      	strb	r2, [r3, #0]
		//Display output current
		max7219_PrintIspecial(SEGMENT_2, dhandle->currentOCPSet, 4);
 8007038:	4b1c      	ldr	r3, [pc, #112]	; (80070ac <sw1_toggle_i_v_isr+0xdc>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2204      	movs	r2, #4
 8007040:	0019      	movs	r1, r3
 8007042:	2002      	movs	r0, #2
 8007044:	f000 fb20 	bl	8007688 <max7219_PrintIspecial>
	}

	//Get Voltage level into TRACE
	char _str[60];
	uint32_t voltageADC = BSP_PWR_VBUSGetVoltage(0);
 8007048:	2000      	movs	r0, #0
 800704a:	f015 faa5 	bl	801c598 <BSP_PWR_VBUSGetVoltage>
 800704e:	0003      	movs	r3, r0
 8007050:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t currentADC= BSP_PWR_VBUSGetCurrent(0);
 8007052:	2000      	movs	r0, #0
 8007054:	f015 fab2 	bl	801c5bc <BSP_PWR_VBUSGetCurrent>
 8007058:	0003      	movs	r3, r0
 800705a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t currentOCP_ADC= BSP_PWR_VBUSGetCurrentOCP(0);
 800705c:	2000      	movs	r0, #0
 800705e:	f015 fbc5 	bl	801c7ec <BSP_PWR_VBUSGetCurrentOCP>
 8007062:	0003      	movs	r3, r0
 8007064:	647b      	str	r3, [r7, #68]	; 0x44

	// Use snprintf to limit the number of characters written
	int len = snprintf(_str, sizeof(_str), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltageADC, currentADC, currentOCP_ADC);
 8007066:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007068:	4a11      	ldr	r2, [pc, #68]	; (80070b0 <sw1_toggle_i_v_isr+0xe0>)
 800706a:	1d38      	adds	r0, r7, #4
 800706c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	000b      	movs	r3, r1
 8007076:	213c      	movs	r1, #60	; 0x3c
 8007078:	f01c fad4 	bl	8023624 <sniprintf>
 800707c:	0003      	movs	r3, r0
 800707e:	643b      	str	r3, [r7, #64]	; 0x40

	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8007080:	1d3b      	adds	r3, r7, #4
 8007082:	0018      	movs	r0, r3
 8007084:	f7ff f8a2 	bl	80061cc <strlen>
 8007088:	0002      	movs	r2, r0
 800708a:	1d3b      	adds	r3, r7, #4
 800708c:	9200      	str	r2, [sp, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	2100      	movs	r1, #0
 8007092:	2006      	movs	r0, #6
 8007094:	f00b fcb4 	bl	8012a00 <USBPD_TRACE_Add>
}
 8007098:	46c0      	nop			; (mov r8, r8)
 800709a:	46bd      	mov	sp, r7
 800709c:	b014      	add	sp, #80	; 0x50
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40021800 	.word	0x40021800
 80070a4:	40001400 	.word	0x40001400
 80070a8:	20000008 	.word	0x20000008
 80070ac:	20000044 	.word	0x20000044
 80070b0:	08023fdc 	.word	0x08023fdc

080070b4 <sw2_lock_isr>:

void sw2_lock_isr(void){
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b094      	sub	sp, #80	; 0x50
 80070b8:	af02      	add	r7, sp, #8
	//Mask unwanted button interrupts caused by debouncing on exti line 2 (PB2)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM2);
 80070ba:	4a39      	ldr	r2, [pc, #228]	; (80071a0 <sw2_lock_isr+0xec>)
 80070bc:	2380      	movs	r3, #128	; 0x80
 80070be:	58d3      	ldr	r3, [r2, r3]
 80070c0:	4937      	ldr	r1, [pc, #220]	; (80071a0 <sw2_lock_isr+0xec>)
 80070c2:	2204      	movs	r2, #4
 80070c4:	4393      	bics	r3, r2
 80070c6:	2280      	movs	r2, #128	; 0x80
 80070c8:	508b      	str	r3, [r1, r2]

	//Mask alert pin during setting the relay on/off
	//EXTI->IMR1 &= ~(EXTI_IMR1_IM6);

	//Set debouncing time in ms
	TIM7->ARR = 200;
 80070ca:	4b36      	ldr	r3, [pc, #216]	; (80071a4 <sw2_lock_isr+0xf0>)
 80070cc:	22c8      	movs	r2, #200	; 0xc8
 80070ce:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 80070d0:	4b34      	ldr	r3, [pc, #208]	; (80071a4 <sw2_lock_isr+0xf0>)
 80070d2:	2100      	movs	r1, #0
 80070d4:	0018      	movs	r0, r3
 80070d6:	f7ff fb25 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 80070da:	4b32      	ldr	r3, [pc, #200]	; (80071a4 <sw2_lock_isr+0xf0>)
 80070dc:	0018      	movs	r0, r3
 80070de:	f7ff fb13 	bl	8006708 <LL_TIM_EnableCounter>

	char _str[60];

	if (outputState == OUTPUT_OFF_STATE)
 80070e2:	4b31      	ldr	r3, [pc, #196]	; (80071a8 <sw2_lock_isr+0xf4>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d126      	bne.n	800713a <sw2_lock_isr+0x86>
			{
				outputState = OUTPUT_ON_STATE;
 80070ec:	4b2e      	ldr	r3, [pc, #184]	; (80071a8 <sw2_lock_isr+0xf4>)
 80070ee:	2201      	movs	r2, #1
 80070f0:	701a      	strb	r2, [r3, #0]
				//Mask unwanted button interrupts caused by debouncing on exti line 6 (PD6)
				EXTI->IMR1 &= ~(EXTI_IMR1_IM6);
 80070f2:	4a2b      	ldr	r2, [pc, #172]	; (80071a0 <sw2_lock_isr+0xec>)
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	58d3      	ldr	r3, [r2, r3]
 80070f8:	4929      	ldr	r1, [pc, #164]	; (80071a0 <sw2_lock_isr+0xec>)
 80070fa:	2240      	movs	r2, #64	; 0x40
 80070fc:	4393      	bics	r3, r2
 80070fe:	2280      	movs	r2, #128	; 0x80
 8007100:	508b      	str	r3, [r1, r2]

				//Set debouncing time in 6 ms
				TIM14->ARR = 6;
 8007102:	4b2a      	ldr	r3, [pc, #168]	; (80071ac <sw2_lock_isr+0xf8>)
 8007104:	2206      	movs	r2, #6
 8007106:	62da      	str	r2, [r3, #44]	; 0x2c
				//Zero TIM7 counter and start counting
				LL_TIM_SetCounter(TIM14, 0); //set counter register value of timer 7 to 0
 8007108:	4b28      	ldr	r3, [pc, #160]	; (80071ac <sw2_lock_isr+0xf8>)
 800710a:	2100      	movs	r1, #0
 800710c:	0018      	movs	r0, r3
 800710e:	f7ff fb09 	bl	8006724 <LL_TIM_SetCounter>
				LL_TIM_EnableCounter(TIM14); //start counting of timer 7
 8007112:	4b26      	ldr	r3, [pc, #152]	; (80071ac <sw2_lock_isr+0xf8>)
 8007114:	0018      	movs	r0, r3
 8007116:	f7ff faf7 	bl	8006708 <LL_TIM_EnableCounter>

				//put OCP to transparent mode so any alert during on/off is cleared
				//HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_SET);
 800711a:	2380      	movs	r3, #128	; 0x80
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	4824      	ldr	r0, [pc, #144]	; (80071b0 <sw2_lock_isr+0xfc>)
 8007120:	2201      	movs	r2, #1
 8007122:	0019      	movs	r1, r3
 8007124:	f004 ff8c 	bl	800c040 <HAL_GPIO_WritePin>
				// Use snprintf to limit the number of characters written
				int len = snprintf(_str, sizeof(_str), "--------Output Disabled--------");
 8007128:	4a22      	ldr	r2, [pc, #136]	; (80071b4 <sw2_lock_isr+0x100>)
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	213c      	movs	r1, #60	; 0x3c
 800712e:	0018      	movs	r0, r3
 8007130:	f01c fa78 	bl	8023624 <sniprintf>
 8007134:	0003      	movs	r3, r0
 8007136:	643b      	str	r3, [r7, #64]	; 0x40
 8007138:	e021      	b.n	800717e <sw2_lock_isr+0xca>

			}
			else {
				outputState = OUTPUT_OFF_STATE;
 800713a:	4b1b      	ldr	r3, [pc, #108]	; (80071a8 <sw2_lock_isr+0xf4>)
 800713c:	2200      	movs	r2, #0
 800713e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 8007140:	2380      	movs	r3, #128	; 0x80
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	481a      	ldr	r0, [pc, #104]	; (80071b0 <sw2_lock_isr+0xfc>)
 8007146:	2200      	movs	r2, #0
 8007148:	0019      	movs	r1, r3
 800714a:	f004 ff79 	bl	800c040 <HAL_GPIO_WritePin>
				// Use snprintf to limit the number of characters written
				int len = snprintf(_str, sizeof(_str), "--------Output Enabled--------");
 800714e:	4a1a      	ldr	r2, [pc, #104]	; (80071b8 <sw2_lock_isr+0x104>)
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	213c      	movs	r1, #60	; 0x3c
 8007154:	0018      	movs	r0, r3
 8007156:	f01c fa65 	bl	8023624 <sniprintf>
 800715a:	0003      	movs	r3, r0
 800715c:	647b      	str	r3, [r7, #68]	; 0x44

				//Display voltage
				max7219_PrintIspecial(SEGMENT_1,dhandle->voltageSet, 3);
 800715e:	4b17      	ldr	r3, [pc, #92]	; (80071bc <sw2_lock_isr+0x108>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2203      	movs	r2, #3
 8007166:	0019      	movs	r1, r3
 8007168:	2001      	movs	r0, #1
 800716a:	f000 fa8d 	bl	8007688 <max7219_PrintIspecial>
				//Display current
				max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <sw2_lock_isr+0x108>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	2204      	movs	r2, #4
 8007176:	0019      	movs	r1, r3
 8007178:	2002      	movs	r0, #2
 800717a:	f000 fa85 	bl	8007688 <max7219_PrintIspecial>
			}

	//HAL_GPIO_TogglePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin);
	//Get Voltage level into TRACE
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 800717e:	1d3b      	adds	r3, r7, #4
 8007180:	0018      	movs	r0, r3
 8007182:	f7ff f823 	bl	80061cc <strlen>
 8007186:	0002      	movs	r2, r0
 8007188:	1d3b      	adds	r3, r7, #4
 800718a:	9200      	str	r2, [sp, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	2100      	movs	r1, #0
 8007190:	2006      	movs	r0, #6
 8007192:	f00b fc35 	bl	8012a00 <USBPD_TRACE_Add>
}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	46bd      	mov	sp, r7
 800719a:	b012      	add	sp, #72	; 0x48
 800719c:	bd80      	pop	{r7, pc}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	40021800 	.word	0x40021800
 80071a4:	40001400 	.word	0x40001400
 80071a8:	20000344 	.word	0x20000344
 80071ac:	40002000 	.word	0x40002000
 80071b0:	50000800 	.word	0x50000800
 80071b4:	08024040 	.word	0x08024040
 80071b8:	08024060 	.word	0x08024060
 80071bc:	20000044 	.word	0x20000044

080071c0 <ocp_alert_isr>:

void ocp_alert_isr(void) {
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
	//Disable relay
	//Change output state
	outputState = OUTPUT_OFF_STATE;
 80071c4:	4b12      	ldr	r3, [pc, #72]	; (8007210 <ocp_alert_isr+0x50>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]
	//Disable output
	HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 80071ca:	2380      	movs	r3, #128	; 0x80
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	4811      	ldr	r0, [pc, #68]	; (8007214 <ocp_alert_isr+0x54>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	0019      	movs	r1, r3
 80071d4:	f004 ff34 	bl	800c040 <HAL_GPIO_WritePin>


	// Get number of int numbers in voltage var
	//Print the voltage to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
	max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet, 3);
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <ocp_alert_isr+0x58>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2203      	movs	r2, #3
 80071e0:	0019      	movs	r1, r3
 80071e2:	2001      	movs	r0, #1
 80071e4:	f000 fa50 	bl	8007688 <max7219_PrintIspecial>

	//Display output current
	max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 80071e8:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <ocp_alert_isr+0x58>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2204      	movs	r2, #4
 80071f0:	0019      	movs	r1, r3
 80071f2:	2002      	movs	r0, #2
 80071f4:	f000 fa48 	bl	8007688 <max7219_PrintIspecial>


	ocp_reset_needed = 1;
 80071f8:	4b08      	ldr	r3, [pc, #32]	; (800721c <ocp_alert_isr+0x5c>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

	//Clear IT flag
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 80071fe:	4b08      	ldr	r3, [pc, #32]	; (8007220 <ocp_alert_isr+0x60>)
 8007200:	2240      	movs	r2, #64	; 0x40
 8007202:	60da      	str	r2, [r3, #12]
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <ocp_alert_isr+0x60>)
 8007206:	2240      	movs	r2, #64	; 0x40
 8007208:	611a      	str	r2, [r3, #16]
}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000344 	.word	0x20000344
 8007214:	50000800 	.word	0x50000800
 8007218:	20000044 	.word	0x20000044
 800721c:	20000320 	.word	0x20000320
 8007220:	40021800 	.word	0x40021800

08007224 <sourcecapa_limits>:
  * @param  Nav
  * @retval None
  * source: demo_disco.c Display_sourcecapa_menu_nav
  */
void sourcecapa_limits(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b092      	sub	sp, #72	; 0x48
 8007228:	af00      	add	r7, sp, #0
  uint8_t _str[30];
  uint8_t _max = DPM_Ports[0].DPM_NumberOfRcvSRCPDO;
 800722a:	4b75      	ldr	r3, [pc, #468]	; (8007400 <sourcecapa_limits+0x1dc>)
 800722c:	69da      	ldr	r2, [r3, #28]
 800722e:	2346      	movs	r3, #70	; 0x46
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	701a      	strb	r2, [r3, #0]
  uint8_t _start = 0;
 8007234:	2145      	movs	r1, #69	; 0x45
 8007236:	187b      	adds	r3, r7, r1
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
  SINKData_HandleTypeDef *dhandle = &SNK_data;
 800723c:	4b71      	ldr	r3, [pc, #452]	; (8007404 <sourcecapa_limits+0x1e0>)
 800723e:	643b      	str	r3, [r7, #64]	; 0x40

  for(int8_t index=_start; index < _max; index++)
 8007240:	2347      	movs	r3, #71	; 0x47
 8007242:	18fb      	adds	r3, r7, r3
 8007244:	187a      	adds	r2, r7, r1
 8007246:	7812      	ldrb	r2, [r2, #0]
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e0ca      	b.n	80073e2 <sourcecapa_limits+0x1be>
  {
	switch(DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_TYPE_Msk)
 800724c:	2347      	movs	r3, #71	; 0x47
 800724e:	18fb      	adds	r3, r7, r3
 8007250:	2200      	movs	r2, #0
 8007252:	569a      	ldrsb	r2, [r3, r2]
 8007254:	4b6a      	ldr	r3, [pc, #424]	; (8007400 <sourcecapa_limits+0x1dc>)
 8007256:	0092      	lsls	r2, r2, #2
 8007258:	58d3      	ldr	r3, [r2, r3]
 800725a:	0f9b      	lsrs	r3, r3, #30
 800725c:	079b      	lsls	r3, r3, #30
 800725e:	22c0      	movs	r2, #192	; 0xc0
 8007260:	0612      	lsls	r2, r2, #24
 8007262:	4293      	cmp	r3, r2
 8007264:	d057      	beq.n	8007316 <sourcecapa_limits+0xf2>
 8007266:	22c0      	movs	r2, #192	; 0xc0
 8007268:	0612      	lsls	r2, r2, #24
 800726a:	4293      	cmp	r3, r2
 800726c:	d900      	bls.n	8007270 <sourcecapa_limits+0x4c>
 800726e:	e0a5      	b.n	80073bc <sourcecapa_limits+0x198>
 8007270:	2280      	movs	r2, #128	; 0x80
 8007272:	0612      	lsls	r2, r2, #24
 8007274:	4293      	cmp	r3, r2
 8007276:	d027      	beq.n	80072c8 <sourcecapa_limits+0xa4>
 8007278:	2280      	movs	r2, #128	; 0x80
 800727a:	0612      	lsls	r2, r2, #24
 800727c:	4293      	cmp	r3, r2
 800727e:	d900      	bls.n	8007282 <sourcecapa_limits+0x5e>
 8007280:	e09c      	b.n	80073bc <sourcecapa_limits+0x198>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <sourcecapa_limits+0x6e>
 8007286:	2280      	movs	r2, #128	; 0x80
 8007288:	05d2      	lsls	r2, r2, #23
 800728a:	4293      	cmp	r3, r2
 800728c:	d100      	bne.n	8007290 <sourcecapa_limits+0x6c>
 800728e:	e09c      	b.n	80073ca <sourcecapa_limits+0x1a6>
 8007290:	e094      	b.n	80073bc <sourcecapa_limits+0x198>
	{
	case USBPD_PDO_TYPE_FIXED :
	  {
		uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_FIXED_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_FIXED_MAX_CURRENT_Pos)*10;
 8007292:	2147      	movs	r1, #71	; 0x47
 8007294:	187b      	adds	r3, r7, r1
 8007296:	2200      	movs	r2, #0
 8007298:	569a      	ldrsb	r2, [r3, r2]
 800729a:	4b59      	ldr	r3, [pc, #356]	; (8007400 <sourcecapa_limits+0x1dc>)
 800729c:	0092      	lsls	r2, r2, #2
 800729e:	58d3      	ldr	r3, [r2, r3]
 80072a0:	059b      	lsls	r3, r3, #22
 80072a2:	0d9a      	lsrs	r2, r3, #22
 80072a4:	0013      	movs	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	189b      	adds	r3, r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_FIXED_VOLTAGE_Msk) >> USBPD_PDO_SRC_FIXED_VOLTAGE_Pos)*50;
 80072ae:	187b      	adds	r3, r7, r1
 80072b0:	2200      	movs	r2, #0
 80072b2:	569a      	ldrsb	r2, [r3, r2]
 80072b4:	4b52      	ldr	r3, [pc, #328]	; (8007400 <sourcecapa_limits+0x1dc>)
 80072b6:	0092      	lsls	r2, r2, #2
 80072b8:	58d3      	ldr	r3, [r2, r3]
 80072ba:	0a9b      	lsrs	r3, r3, #10
 80072bc:	059b      	lsls	r3, r3, #22
 80072be:	0d9b      	lsrs	r3, r3, #22
 80072c0:	2232      	movs	r2, #50	; 0x32
 80072c2:	4353      	muls	r3, r2
 80072c4:	623b      	str	r3, [r7, #32]
		//sprintf((char*)_str, "FIXED:%2dV %2d.%dA", (int)(maxvoltage/1000), (int)(maxcurrent/1000), (int)((maxcurrent % 1000) /100));
		break;
 80072c6:	e083      	b.n	80073d0 <sourcecapa_limits+0x1ac>

	  }
	  break;
	case USBPD_PDO_TYPE_VARIABLE :
	  {
		uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MAX_VOLTAGE_Msk) >> USBPD_PDO_SRC_VARIABLE_MAX_VOLTAGE_Pos) * 50;
 80072c8:	2147      	movs	r1, #71	; 0x47
 80072ca:	187b      	adds	r3, r7, r1
 80072cc:	2200      	movs	r2, #0
 80072ce:	569a      	ldrsb	r2, [r3, r2]
 80072d0:	4b4b      	ldr	r3, [pc, #300]	; (8007400 <sourcecapa_limits+0x1dc>)
 80072d2:	0092      	lsls	r2, r2, #2
 80072d4:	58d3      	ldr	r3, [r2, r3]
 80072d6:	0d1b      	lsrs	r3, r3, #20
 80072d8:	059b      	lsls	r3, r3, #22
 80072da:	0d9b      	lsrs	r3, r3, #22
 80072dc:	2232      	movs	r2, #50	; 0x32
 80072de:	4353      	muls	r3, r2
 80072e0:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t minvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MIN_VOLTAGE_Msk) >> USBPD_PDO_SRC_VARIABLE_MIN_VOLTAGE_Pos) * 50;
 80072e2:	187b      	adds	r3, r7, r1
 80072e4:	2200      	movs	r2, #0
 80072e6:	569a      	ldrsb	r2, [r3, r2]
 80072e8:	4b45      	ldr	r3, [pc, #276]	; (8007400 <sourcecapa_limits+0x1dc>)
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	58d3      	ldr	r3, [r2, r3]
 80072ee:	0a9b      	lsrs	r3, r3, #10
 80072f0:	059b      	lsls	r3, r3, #22
 80072f2:	0d9b      	lsrs	r3, r3, #22
 80072f4:	2232      	movs	r2, #50	; 0x32
 80072f6:	4353      	muls	r3, r2
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_VARIABLE_MAX_CURRENT_Pos) * 10;
 80072fa:	187b      	adds	r3, r7, r1
 80072fc:	2200      	movs	r2, #0
 80072fe:	569a      	ldrsb	r2, [r3, r2]
 8007300:	4b3f      	ldr	r3, [pc, #252]	; (8007400 <sourcecapa_limits+0x1dc>)
 8007302:	0092      	lsls	r2, r2, #2
 8007304:	58d3      	ldr	r3, [r2, r3]
 8007306:	059b      	lsls	r3, r3, #22
 8007308:	0d9a      	lsrs	r2, r3, #22
 800730a:	0013      	movs	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	189b      	adds	r3, r3, r2
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28
		//sprintf((char*)_str, "V:%2d.%1d-%2d.%1dV %d.%dA", (int)(minvoltage/1000),(int)(minvoltage/100)%10, (int)(maxvoltage/1000),(int)(maxvoltage/100)%10, (int)(maxcurrent/1000), (int)((maxcurrent % 1000) /100));
	  }
	  break;
 8007314:	e05c      	b.n	80073d0 <sourcecapa_limits+0x1ac>
	case USBPD_PDO_TYPE_APDO :
	  {
		uint32_t minvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MIN_VOLTAGE_Msk) >> USBPD_PDO_SRC_APDO_MIN_VOLTAGE_Pos) * 100;
 8007316:	2147      	movs	r1, #71	; 0x47
 8007318:	187b      	adds	r3, r7, r1
 800731a:	2200      	movs	r2, #0
 800731c:	569a      	ldrsb	r2, [r3, r2]
 800731e:	4b38      	ldr	r3, [pc, #224]	; (8007400 <sourcecapa_limits+0x1dc>)
 8007320:	0092      	lsls	r2, r2, #2
 8007322:	58d3      	ldr	r3, [r2, r3]
 8007324:	0a1b      	lsrs	r3, r3, #8
 8007326:	22ff      	movs	r2, #255	; 0xff
 8007328:	4013      	ands	r3, r2
 800732a:	2264      	movs	r2, #100	; 0x64
 800732c:	4353      	muls	r3, r2
 800732e:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MAX_VOLTAGE_Msk) >> USBPD_PDO_SRC_APDO_MAX_VOLTAGE_Pos) * 100;
 8007330:	187b      	adds	r3, r7, r1
 8007332:	2200      	movs	r2, #0
 8007334:	569a      	ldrsb	r2, [r3, r2]
 8007336:	4b32      	ldr	r3, [pc, #200]	; (8007400 <sourcecapa_limits+0x1dc>)
 8007338:	0092      	lsls	r2, r2, #2
 800733a:	58d3      	ldr	r3, [r2, r3]
 800733c:	0c5b      	lsrs	r3, r3, #17
 800733e:	22ff      	movs	r2, #255	; 0xff
 8007340:	4013      	ands	r3, r2
 8007342:	2264      	movs	r2, #100	; 0x64
 8007344:	4353      	muls	r3, r2
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
		uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_APDO_MAX_CURRENT_Pos) * 50;
 8007348:	187b      	adds	r3, r7, r1
 800734a:	2200      	movs	r2, #0
 800734c:	569a      	ldrsb	r2, [r3, r2]
 800734e:	4b2c      	ldr	r3, [pc, #176]	; (8007400 <sourcecapa_limits+0x1dc>)
 8007350:	0092      	lsls	r2, r2, #2
 8007352:	58d3      	ldr	r3, [r2, r3]
 8007354:	227f      	movs	r2, #127	; 0x7f
 8007356:	4013      	ands	r3, r2
 8007358:	2232      	movs	r2, #50	; 0x32
 800735a:	4353      	muls	r3, r2
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
		//sprintf((char*)_str, "A:%2d.%1d-%2d.%1dV %d.%dA",(int) (minvoltageAPDOtemp/1000),(int)(minvoltageAPDOtemp/100)%10, (int)(maxvoltageAPDOtemp/1000),(int)(maxvoltageAPDOtemp/100)%10, (int)(maxcurrentAPDOtemp/1000), (int)((maxcurrentAPDOtemp % 1000) /100));

		if (minvoltage < dhandle->voltageMin*10) {
 800735e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007360:	695a      	ldr	r2, [r3, #20]
 8007362:	0013      	movs	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	189b      	adds	r3, r3, r2
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	001a      	movs	r2, r3
 800736c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736e:	4293      	cmp	r3, r2
 8007370:	d208      	bcs.n	8007384 <sourcecapa_limits+0x160>
			dhandle -> voltageMin = (int)minvoltage/10;
 8007372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007374:	210a      	movs	r1, #10
 8007376:	0018      	movs	r0, r3
 8007378:	f7fe ffc4 	bl	8006304 <__divsi3>
 800737c:	0003      	movs	r3, r0
 800737e:	001a      	movs	r2, r3
 8007380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007382:	615a      	str	r2, [r3, #20]
		}
		if (maxvoltage > dhandle->voltageMax*10) {
 8007384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007386:	699a      	ldr	r2, [r3, #24]
 8007388:	0013      	movs	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	189b      	adds	r3, r3, r2
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	001a      	movs	r2, r3
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	4293      	cmp	r3, r2
 8007396:	d908      	bls.n	80073aa <sourcecapa_limits+0x186>
			dhandle -> voltageMax = (int)maxvoltage/10;
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	210a      	movs	r1, #10
 800739c:	0018      	movs	r0, r3
 800739e:	f7fe ffb1 	bl	8006304 <__divsi3>
 80073a2:	0003      	movs	r3, r0
 80073a4:	001a      	movs	r2, r3
 80073a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a8:	619a      	str	r2, [r3, #24]
		}
		if (maxcurrent > dhandle->currentMax) {
 80073aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d90c      	bls.n	80073ce <sourcecapa_limits+0x1aa>
			dhandle -> currentMax = (int)maxcurrent;
 80073b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073b8:	61da      	str	r2, [r3, #28]
		}
	  }
	  break;
 80073ba:	e008      	b.n	80073ce <sourcecapa_limits+0x1aa>
	default :
	  sprintf((char*)_str,"Unknown Source PDO");
 80073bc:	4a12      	ldr	r2, [pc, #72]	; (8007408 <sourcecapa_limits+0x1e4>)
 80073be:	003b      	movs	r3, r7
 80073c0:	0011      	movs	r1, r2
 80073c2:	0018      	movs	r0, r3
 80073c4:	f01c f962 	bl	802368c <siprintf>
	  break;
 80073c8:	e002      	b.n	80073d0 <sourcecapa_limits+0x1ac>
	  break;
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	e000      	b.n	80073d0 <sourcecapa_limits+0x1ac>
	  break;
 80073ce:	46c0      	nop			; (mov r8, r8)
  for(int8_t index=_start; index < _max; index++)
 80073d0:	2147      	movs	r1, #71	; 0x47
 80073d2:	187b      	adds	r3, r7, r1
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b25b      	sxtb	r3, r3
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	3301      	adds	r3, #1
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	187b      	adds	r3, r7, r1
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	2347      	movs	r3, #71	; 0x47
 80073e4:	18fb      	adds	r3, r7, r3
 80073e6:	2200      	movs	r2, #0
 80073e8:	569a      	ldrsb	r2, [r3, r2]
 80073ea:	2346      	movs	r3, #70	; 0x46
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	da00      	bge.n	80073f6 <sourcecapa_limits+0x1d2>
 80073f4:	e72a      	b.n	800724c <sourcecapa_limits+0x28>
	}
  }
}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	46c0      	nop			; (mov r8, r8)
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b012      	add	sp, #72	; 0x48
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20002f44 	.word	0x20002f44
 8007404:	2000000c 	.word	0x2000000c
 8007408:	08024080 	.word	0x08024080

0800740c <DEMO_Init>:
/**
  * @brief  Demo initialisation
  * @retval DEMO_ErrorCode status
  */
DEMO_ErrorCode DEMO_Init(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0

  /*Print initial values*/
  //max7219_PrintItos(SEGMENT_1, 4, 3300, 3);
  //max7219_PrintItos(SEGMENT_2, 4, 0, 4);

 return DEMO_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	0018      	movs	r0, r3
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <max7219_Init>:
static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);
static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment);

void max7219_Init(uint8_t intensivity)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	0002      	movs	r2, r0
 8007420:	1dfb      	adds	r3, r7, #7
 8007422:	701a      	strb	r2, [r3, #0]
	max7219_Turn_On();
 8007424:	f000 f87a 	bl	800751c <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8007428:	2107      	movs	r1, #7
 800742a:	200b      	movs	r0, #11
 800742c:	f000 f848 	bl	80074c0 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 8007430:	1dfb      	adds	r3, r7, #7
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	0018      	movs	r0, r3
 8007436:	f000 f806 	bl	8007446 <max7219_SetIntensivity>
	max7219_Clean();
 800743a:	f000 f819 	bl	8007470 <max7219_Clean>
}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	46bd      	mov	sp, r7
 8007442:	b002      	add	sp, #8
 8007444:	bd80      	pop	{r7, pc}

08007446 <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	0002      	movs	r2, r0
 800744e:	1dfb      	adds	r3, r7, #7
 8007450:	701a      	strb	r2, [r3, #0]
	if (intensivity > 0x0F)
 8007452:	1dfb      	adds	r3, r7, #7
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d806      	bhi.n	8007468 <max7219_SetIntensivity+0x22>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 800745a:	1dfb      	adds	r3, r7, #7
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	0019      	movs	r1, r3
 8007460:	200a      	movs	r0, #10
 8007462:	f000 f82d 	bl	80074c0 <max7219_SendData>
 8007466:	e000      	b.n	800746a <max7219_SetIntensivity+0x24>
		return;
 8007468:	46c0      	nop			; (mov r8, r8)
}
 800746a:	46bd      	mov	sp, r7
 800746c:	b002      	add	sp, #8
 800746e:	bd80      	pop	{r7, pc}

08007470 <max7219_Clean>:

void max7219_Clean()
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8007476:	1dfb      	adds	r3, r7, #7
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]

	if(decodeMode == 0xFF)
 800747c:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <max7219_Clean+0x4c>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2bff      	cmp	r3, #255	; 0xff
 8007482:	d102      	bne.n	800748a <max7219_Clean+0x1a>
	{
		clear = BLANK;
 8007484:	1dfb      	adds	r3, r7, #7
 8007486:	220f      	movs	r2, #15
 8007488:	701a      	strb	r2, [r3, #0]
	}

	for (int i = 0; i < 8; ++i)
 800748a:	2300      	movs	r3, #0
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	e00c      	b.n	80074aa <max7219_Clean+0x3a>
	{
		max7219_SendData(i + 1, clear);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	3301      	adds	r3, #1
 8007496:	b2da      	uxtb	r2, r3
 8007498:	1dfb      	adds	r3, r7, #7
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	0019      	movs	r1, r3
 800749e:	0010      	movs	r0, r2
 80074a0:	f000 f80e 	bl	80074c0 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	603b      	str	r3, [r7, #0]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b07      	cmp	r3, #7
 80074ae:	ddef      	ble.n	8007490 <max7219_Clean+0x20>
	}
}
 80074b0:	46c0      	nop			; (mov r8, r8)
 80074b2:	46c0      	nop			; (mov r8, r8)
 80074b4:	46bd      	mov	sp, r7
 80074b6:	b002      	add	sp, #8
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	20000345 	.word	0x20000345

080074c0 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	0002      	movs	r2, r0
 80074c8:	1dfb      	adds	r3, r7, #7
 80074ca:	701a      	strb	r2, [r3, #0]
 80074cc:	1dbb      	adds	r3, r7, #6
 80074ce:	1c0a      	adds	r2, r1, #0
 80074d0:	701a      	strb	r2, [r3, #0]
	CS_SET();
 80074d2:	2380      	movs	r3, #128	; 0x80
 80074d4:	015b      	lsls	r3, r3, #5
 80074d6:	480f      	ldr	r0, [pc, #60]	; (8007514 <max7219_SendData+0x54>)
 80074d8:	2200      	movs	r2, #0
 80074da:	0019      	movs	r1, r3
 80074dc:	f004 fdb0 	bl	800c040 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_PORT, &addr, 1, HAL_MAX_DELAY);
 80074e0:	2301      	movs	r3, #1
 80074e2:	425b      	negs	r3, r3
 80074e4:	1df9      	adds	r1, r7, #7
 80074e6:	480c      	ldr	r0, [pc, #48]	; (8007518 <max7219_SendData+0x58>)
 80074e8:	2201      	movs	r2, #1
 80074ea:	f007 fc0b 	bl	800ed04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI_PORT, &data, 1, HAL_MAX_DELAY);
 80074ee:	2301      	movs	r3, #1
 80074f0:	425b      	negs	r3, r3
 80074f2:	1db9      	adds	r1, r7, #6
 80074f4:	4808      	ldr	r0, [pc, #32]	; (8007518 <max7219_SendData+0x58>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	f007 fc04 	bl	800ed04 <HAL_SPI_Transmit>
	CS_RESET();
 80074fc:	2380      	movs	r3, #128	; 0x80
 80074fe:	015b      	lsls	r3, r3, #5
 8007500:	4804      	ldr	r0, [pc, #16]	; (8007514 <max7219_SendData+0x54>)
 8007502:	2201      	movs	r2, #1
 8007504:	0019      	movs	r1, r3
 8007506:	f004 fd9b 	bl	800c040 <HAL_GPIO_WritePin>
}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	46bd      	mov	sp, r7
 800750e:	b002      	add	sp, #8
 8007510:	bd80      	pop	{r7, pc}
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	50000400 	.word	0x50000400
 8007518:	20000420 	.word	0x20000420

0800751c <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8007520:	2101      	movs	r1, #1
 8007522:	200c      	movs	r0, #12
 8007524:	f7ff ffcc 	bl	80074c0 <max7219_SendData>
}
 8007528:	46c0      	nop			; (mov r8, r8)
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <max7219_Decode_On>:
{
	max7219_SendData(REG_SHUTDOWN, 0x00);
}

void max7219_Decode_On(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <max7219_Decode_On+0x1c>)
 8007536:	22ff      	movs	r2, #255	; 0xff
 8007538:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 800753a:	4b04      	ldr	r3, [pc, #16]	; (800754c <max7219_Decode_On+0x1c>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	0019      	movs	r1, r3
 8007540:	2009      	movs	r0, #9
 8007542:	f7ff ffbd 	bl	80074c0 <max7219_SendData>
}
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20000345 	.word	0x20000345

08007550 <mapPosition>:
  * @param  newPosition: Starting position of printing
  * @retval MAX7219_Digits: return new mapped Position
  */

static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	0002      	movs	r2, r0
 8007558:	1dfb      	adds	r3, r7, #7
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	1dbb      	adds	r3, r7, #6
 800755e:	1c0a      	adds	r2, r1, #0
 8007560:	701a      	strb	r2, [r3, #0]
	if (segment == 1)
 8007562:	1dbb      	adds	r3, r7, #6
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d102      	bne.n	8007570 <mapPosition+0x20>
	{
		return newPosition;
 800756a:	1dfb      	adds	r3, r7, #7
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	e009      	b.n	8007584 <mapPosition+0x34>
	}
	else if (segment == 2)
 8007570:	1dbb      	adds	r3, r7, #6
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d104      	bne.n	8007582 <mapPosition+0x32>
	{
		return newPosition +4;
 8007578:	1dfb      	adds	r3, r7, #7
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	3304      	adds	r3, #4
 800757e:	b2db      	uxtb	r3, r3
 8007580:	e000      	b.n	8007584 <mapPosition+0x34>
	}
	return 0; // In case of invalid position
 8007582:	2300      	movs	r3, #0
}
 8007584:	0018      	movs	r0, r3
 8007586:	46bd      	mov	sp, r7
 8007588:	b002      	add	sp, #8
 800758a:	bd80      	pop	{r7, pc}

0800758c <max7219_PrintDigit>:
  * @param  point: Specify if decimal point should be displayed or not
  * @retval None
  */

void max7219_PrintDigit(MAX7219_Segments segment, MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 800758c:	b5b0      	push	{r4, r5, r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	0005      	movs	r5, r0
 8007594:	000c      	movs	r4, r1
 8007596:	0010      	movs	r0, r2
 8007598:	0019      	movs	r1, r3
 800759a:	1dfb      	adds	r3, r7, #7
 800759c:	1c2a      	adds	r2, r5, #0
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	1dbb      	adds	r3, r7, #6
 80075a2:	1c22      	adds	r2, r4, #0
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	1d7b      	adds	r3, r7, #5
 80075a8:	1c02      	adds	r2, r0, #0
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	1d3b      	adds	r3, r7, #4
 80075ae:	1c0a      	adds	r2, r1, #0
 80075b0:	701a      	strb	r2, [r3, #0]
	MAX7219_Digits mappedPosition = mapPosition(position, segment);
 80075b2:	250f      	movs	r5, #15
 80075b4:	197c      	adds	r4, r7, r5
 80075b6:	1dfb      	adds	r3, r7, #7
 80075b8:	781a      	ldrb	r2, [r3, #0]
 80075ba:	1dbb      	adds	r3, r7, #6
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	0011      	movs	r1, r2
 80075c0:	0018      	movs	r0, r3
 80075c2:	f7ff ffc5 	bl	8007550 <mapPosition>
 80075c6:	0003      	movs	r3, r0
 80075c8:	7023      	strb	r3, [r4, #0]
	if(mappedPosition > NUMBER_OF_DIGITS)
 80075ca:	002c      	movs	r4, r5
 80075cc:	193b      	adds	r3, r7, r4
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d852      	bhi.n	800767a <max7219_PrintDigit+0xee>
	{
		return;
	}

	if(point)
 80075d4:	1d3b      	adds	r3, r7, #4
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d027      	beq.n	800762c <max7219_PrintDigit+0xa0>
	{
		if(decodeMode == 0x00)
 80075dc:	4b29      	ldr	r3, [pc, #164]	; (8007684 <max7219_PrintDigit+0xf8>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d111      	bne.n	8007608 <max7219_PrintDigit+0x7c>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) | (1 << 7));
 80075e4:	1d7b      	adds	r3, r7, #5
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	0018      	movs	r0, r3
 80075ea:	f000 f9a7 	bl	800793c <getSymbol>
 80075ee:	0003      	movs	r3, r0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2280      	movs	r2, #128	; 0x80
 80075f4:	4252      	negs	r2, r2
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	193b      	adds	r3, r7, r4
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	0011      	movs	r1, r2
 8007600:	0018      	movs	r0, r3
 8007602:	f7ff ff5d 	bl	80074c0 <max7219_SendData>
 8007606:	e039      	b.n	800767c <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 8007608:	4b1e      	ldr	r3, [pc, #120]	; (8007684 <max7219_PrintDigit+0xf8>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2bff      	cmp	r3, #255	; 0xff
 800760e:	d135      	bne.n	800767c <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric | (1 << 7));
 8007610:	1d7b      	adds	r3, r7, #5
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2280      	movs	r2, #128	; 0x80
 8007616:	4252      	negs	r2, r2
 8007618:	4313      	orrs	r3, r2
 800761a:	b2da      	uxtb	r2, r3
 800761c:	230f      	movs	r3, #15
 800761e:	18fb      	adds	r3, r7, r3
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	0011      	movs	r1, r2
 8007624:	0018      	movs	r0, r3
 8007626:	f7ff ff4b 	bl	80074c0 <max7219_SendData>
 800762a:	e027      	b.n	800767c <max7219_PrintDigit+0xf0>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 800762c:	4b15      	ldr	r3, [pc, #84]	; (8007684 <max7219_PrintDigit+0xf8>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d111      	bne.n	8007658 <max7219_PrintDigit+0xcc>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) & (~(1 << 7)));
 8007634:	1d7b      	adds	r3, r7, #5
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	0018      	movs	r0, r3
 800763a:	f000 f97f 	bl	800793c <getSymbol>
 800763e:	0003      	movs	r3, r0
 8007640:	b2db      	uxtb	r3, r3
 8007642:	227f      	movs	r2, #127	; 0x7f
 8007644:	4013      	ands	r3, r2
 8007646:	b2da      	uxtb	r2, r3
 8007648:	230f      	movs	r3, #15
 800764a:	18fb      	adds	r3, r7, r3
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	0011      	movs	r1, r2
 8007650:	0018      	movs	r0, r3
 8007652:	f7ff ff35 	bl	80074c0 <max7219_SendData>
 8007656:	e011      	b.n	800767c <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <max7219_PrintDigit+0xf8>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2bff      	cmp	r3, #255	; 0xff
 800765e:	d10d      	bne.n	800767c <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric & (~(1 << 7)));
 8007660:	1d7b      	adds	r3, r7, #5
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	227f      	movs	r2, #127	; 0x7f
 8007666:	4013      	ands	r3, r2
 8007668:	b2da      	uxtb	r2, r3
 800766a:	230f      	movs	r3, #15
 800766c:	18fb      	adds	r3, r7, r3
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	0011      	movs	r1, r2
 8007672:	0018      	movs	r0, r3
 8007674:	f7ff ff24 	bl	80074c0 <max7219_SendData>
 8007678:	e000      	b.n	800767c <max7219_PrintDigit+0xf0>
		return;
 800767a:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 800767c:	46bd      	mov	sp, r7
 800767e:	b004      	add	sp, #16
 8007680:	bdb0      	pop	{r4, r5, r7, pc}
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	20000345 	.word	0x20000345

08007688 <max7219_PrintIspecial>:
  * @param  decimal_position: Place of decimal point
  * @retval MAX7219_Digits: current cursor position
  */

MAX7219_Digits max7219_PrintIspecial(MAX7219_Segments segment, int value, uint8_t decimal_position)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6039      	str	r1, [r7, #0]
 8007690:	0011      	movs	r1, r2
 8007692:	1dfb      	adds	r3, r7, #7
 8007694:	1c02      	adds	r2, r0, #0
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	1dbb      	adds	r3, r7, #6
 800769a:	1c0a      	adds	r2, r1, #0
 800769c:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 800769e:	21ff      	movs	r1, #255	; 0xff
 80076a0:	2009      	movs	r0, #9
 80076a2:	f7ff ff0d 	bl	80074c0 <max7219_SendData>

	int32_t i;
    int8_t num_digits = 0;
 80076a6:	2313      	movs	r3, #19
 80076a8:	18fb      	adds	r3, r7, r3
 80076aa:	2200      	movs	r2, #0
 80076ac:	701a      	strb	r2, [r3, #0]


	//Get number of non-zero digits
	i = 1;
 80076ae:	2301      	movs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
	while ((abs(value) / i) > 9)
 80076b2:	e00e      	b.n	80076d2 <max7219_PrintIspecial+0x4a>
	{
		i *= 10;
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	0013      	movs	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	189b      	adds	r3, r3, r2
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	617b      	str	r3, [r7, #20]
		num_digits++;
 80076c0:	2113      	movs	r1, #19
 80076c2:	187b      	adds	r3, r7, r1
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	b25b      	sxtb	r3, r3
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	187b      	adds	r3, r7, r1
 80076d0:	701a      	strb	r2, [r3, #0]
	while ((abs(value) / i) > 9)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	17da      	asrs	r2, r3, #31
 80076d6:	189b      	adds	r3, r3, r2
 80076d8:	4053      	eors	r3, r2
 80076da:	6979      	ldr	r1, [r7, #20]
 80076dc:	0018      	movs	r0, r3
 80076de:	f7fe fe11 	bl	8006304 <__divsi3>
 80076e2:	0003      	movs	r3, r0
 80076e4:	2b09      	cmp	r3, #9
 80076e6:	dce5      	bgt.n	80076b4 <max7219_PrintIspecial+0x2c>
	}
	num_digits++;
 80076e8:	2113      	movs	r1, #19
 80076ea:	187b      	adds	r3, r7, r1
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b25b      	sxtb	r3, r3
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	3301      	adds	r3, #1
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	187b      	adds	r3, r7, r1
 80076f8:	701a      	strb	r2, [r3, #0]

	int position = num_digits;
 80076fa:	187b      	adds	r3, r7, r1
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	60fb      	str	r3, [r7, #12]

	//Handle negative numbers
	if (value < 0)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	da0e      	bge.n	8007726 <max7219_PrintIspecial+0x9e>
	{
		if(position > 0)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dd08      	ble.n	8007720 <max7219_PrintIspecial+0x98>
		{
			max7219_SendData(position, MINUS);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	210a      	movs	r1, #10
 8007714:	0018      	movs	r0, r3
 8007716:	f7ff fed3 	bl	80074c0 <max7219_SendData>
			position--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b01      	subs	r3, #1
 800771e:	60fb      	str	r3, [r7, #12]
		}
		value = -value;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	425b      	negs	r3, r3
 8007724:	603b      	str	r3, [r7, #0]
	}


	//Print leading zeros and check for decimal point
	for (int j= 4; j > num_digits; j--) {
 8007726:	2304      	movs	r3, #4
 8007728:	60bb      	str	r3, [r7, #8]
 800772a:	e018      	b.n	800775e <max7219_PrintIspecial+0xd6>
		if(j == decimal_position) {
 800772c:	1dbb      	adds	r3, r7, #6
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	d108      	bne.n	8007748 <max7219_PrintIspecial+0xc0>
			max7219_PrintDigit(segment, j, 0, true);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	b2d9      	uxtb	r1, r3
 800773a:	1dfb      	adds	r3, r7, #7
 800773c:	7818      	ldrb	r0, [r3, #0]
 800773e:	2301      	movs	r3, #1
 8007740:	2200      	movs	r2, #0
 8007742:	f7ff ff23 	bl	800758c <max7219_PrintDigit>
 8007746:	e007      	b.n	8007758 <max7219_PrintIspecial+0xd0>
		}
		else {
			max7219_PrintDigit(segment, j, 0, false);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	b2d9      	uxtb	r1, r3
 800774c:	1dfb      	adds	r3, r7, #7
 800774e:	7818      	ldrb	r0, [r3, #0]
 8007750:	2300      	movs	r3, #0
 8007752:	2200      	movs	r2, #0
 8007754:	f7ff ff1a 	bl	800758c <max7219_PrintDigit>
	for (int j= 4; j > num_digits; j--) {
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3b01      	subs	r3, #1
 800775c:	60bb      	str	r3, [r7, #8]
 800775e:	2313      	movs	r3, #19
 8007760:	18fb      	adds	r3, r7, r3
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	b25b      	sxtb	r3, r3
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	429a      	cmp	r2, r3
 800776a:	dcdf      	bgt.n	800772c <max7219_PrintIspecial+0xa4>
		}
	}


	//Print each number and decimal point
	while (i > 0)
 800776c:	e046      	b.n	80077fc <max7219_PrintIspecial+0x174>
	{
		if(position > 0)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	dd3c      	ble.n	80077ee <max7219_PrintIspecial+0x166>
		{	//If current number position is decimal point, print also decimal point
			if(position == decimal_position) {
 8007774:	1dbb      	adds	r3, r7, #6
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	429a      	cmp	r2, r3
 800777c:	d11a      	bne.n	80077b4 <max7219_PrintIspecial+0x12c>
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, true);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	b2dc      	uxtb	r4, r3
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	0013      	movs	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	189b      	adds	r3, r3, r2
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	001a      	movs	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	0011      	movs	r1, r2
 8007792:	0018      	movs	r0, r3
 8007794:	f7fe fe9c 	bl	80064d0 <__aeabi_idivmod>
 8007798:	000b      	movs	r3, r1
 800779a:	6979      	ldr	r1, [r7, #20]
 800779c:	0018      	movs	r0, r3
 800779e:	f7fe fdb1 	bl	8006304 <__divsi3>
 80077a2:	0003      	movs	r3, r0
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	1dfb      	adds	r3, r7, #7
 80077a8:	7818      	ldrb	r0, [r3, #0]
 80077aa:	2301      	movs	r3, #1
 80077ac:	0021      	movs	r1, r4
 80077ae:	f7ff feed 	bl	800758c <max7219_PrintDigit>
 80077b2:	e019      	b.n	80077e8 <max7219_PrintIspecial+0x160>
			}
			else {
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, false);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	b2dc      	uxtb	r4, r3
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	0013      	movs	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	189b      	adds	r3, r3, r2
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	001a      	movs	r2, r3
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	0011      	movs	r1, r2
 80077c8:	0018      	movs	r0, r3
 80077ca:	f7fe fe81 	bl	80064d0 <__aeabi_idivmod>
 80077ce:	000b      	movs	r3, r1
 80077d0:	6979      	ldr	r1, [r7, #20]
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7fe fd96 	bl	8006304 <__divsi3>
 80077d8:	0003      	movs	r3, r0
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	1dfb      	adds	r3, r7, #7
 80077de:	7818      	ldrb	r0, [r3, #0]
 80077e0:	2300      	movs	r3, #0
 80077e2:	0021      	movs	r1, r4
 80077e4:	f7ff fed2 	bl	800758c <max7219_PrintDigit>
			}
			position--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
		}

		i /= 10;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	210a      	movs	r1, #10
 80077f2:	0018      	movs	r0, r3
 80077f4:	f7fe fd86 	bl	8006304 <__divsi3>
 80077f8:	0003      	movs	r3, r0
 80077fa:	617b      	str	r3, [r7, #20]
	while (i > 0)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	dcb5      	bgt.n	800776e <max7219_PrintIspecial+0xe6>

	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8007802:	4b06      	ldr	r3, [pc, #24]	; (800781c <max7219_PrintIspecial+0x194>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	0019      	movs	r1, r3
 8007808:	2009      	movs	r0, #9
 800780a:	f7ff fe59 	bl	80074c0 <max7219_SendData>

	return position;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	b2db      	uxtb	r3, r3
}
 8007812:	0018      	movs	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	b007      	add	sp, #28
 8007818:	bd90      	pop	{r4, r7, pc}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	20000345 	.word	0x20000345

08007820 <max7219_BlinkDigit>:
  * @param  ms: Blink delay in milliseconds
  * @param  decimal_position: place of decimal point
  * @retval None
  */

void max7219_BlinkDigit(MAX7219_Segments segment, int *valuePtr, uint8_t n, uint32_t ms, uint8_t decimal_position) {
 8007820:	b5b0      	push	{r4, r5, r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	60b9      	str	r1, [r7, #8]
 8007828:	0011      	movs	r1, r2
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	240f      	movs	r4, #15
 800782e:	193b      	adds	r3, r7, r4
 8007830:	1c02      	adds	r2, r0, #0
 8007832:	701a      	strb	r2, [r3, #0]
 8007834:	200e      	movs	r0, #14
 8007836:	183b      	adds	r3, r7, r0
 8007838:	1c0a      	adds	r2, r1, #0
 800783a:	701a      	strb	r2, [r3, #0]
	uint32_t blinkDelay = ms; // Delay in milliseconds (adjust as needed)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	61fb      	str	r3, [r7, #28]
	uint16_t blinkDigit = n; // Digit to blink (0-3)
 8007840:	211a      	movs	r1, #26
 8007842:	187b      	adds	r3, r7, r1
 8007844:	183a      	adds	r2, r7, r0
 8007846:	7812      	ldrb	r2, [r2, #0]
 8007848:	801a      	strh	r2, [r3, #0]
	uint8_t digit;

	//Print the BLANK and also decimal point
	if (blinkDigit == decimal_position) {
 800784a:	2330      	movs	r3, #48	; 0x30
 800784c:	18fb      	adds	r3, r7, r3
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	187a      	adds	r2, r7, r1
 8007854:	8812      	ldrh	r2, [r2, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d109      	bne.n	800786e <max7219_BlinkDigit+0x4e>
		max7219_PrintDigit(segment, blinkDigit, BLANK, true);
 800785a:	187b      	adds	r3, r7, r1
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b2d9      	uxtb	r1, r3
 8007860:	193b      	adds	r3, r7, r4
 8007862:	7818      	ldrb	r0, [r3, #0]
 8007864:	2301      	movs	r3, #1
 8007866:	220f      	movs	r2, #15
 8007868:	f7ff fe90 	bl	800758c <max7219_PrintDigit>
 800786c:	e00a      	b.n	8007884 <max7219_BlinkDigit+0x64>
	}
	//Print the BLANK without decimal point
	else {
		max7219_PrintDigit(segment, blinkDigit, BLANK, false);
 800786e:	231a      	movs	r3, #26
 8007870:	18fb      	adds	r3, r7, r3
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	b2d9      	uxtb	r1, r3
 8007876:	230f      	movs	r3, #15
 8007878:	18fb      	adds	r3, r7, r3
 800787a:	7818      	ldrb	r0, [r3, #0]
 800787c:	2300      	movs	r3, #0
 800787e:	220f      	movs	r2, #15
 8007880:	f7ff fe84 	bl	800758c <max7219_PrintDigit>
	}

	//Delay
	uint32_t blinkTimer = HAL_GetTick() + blinkDelay;
 8007884:	f001 fd9c 	bl	80093c0 <HAL_GetTick>
 8007888:	0002      	movs	r2, r0
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	189b      	adds	r3, r3, r2
 800788e:	617b      	str	r3, [r7, #20]
	while (HAL_GetTick() < blinkTimer);
 8007890:	46c0      	nop			; (mov r8, r8)
 8007892:	f001 fd95 	bl	80093c0 <HAL_GetTick>
 8007896:	0002      	movs	r2, r0
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	4293      	cmp	r3, r2
 800789c:	d8f9      	bhi.n	8007892 <max7219_BlinkDigit+0x72>

	// Get the specific digit value at n position
    digit = (*valuePtr / lcdPow10(blinkDigit-1)) % 10;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	001c      	movs	r4, r3
 80078a4:	251a      	movs	r5, #26
 80078a6:	197b      	adds	r3, r7, r5
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	0018      	movs	r0, r3
 80078b2:	f000 f855 	bl	8007960 <lcdPow10>
 80078b6:	0003      	movs	r3, r0
 80078b8:	0019      	movs	r1, r3
 80078ba:	0020      	movs	r0, r4
 80078bc:	f7fe fc98 	bl	80061f0 <__udivsi3>
 80078c0:	0003      	movs	r3, r0
 80078c2:	210a      	movs	r1, #10
 80078c4:	0018      	movs	r0, r3
 80078c6:	f7fe fd19 	bl	80062fc <__aeabi_uidivmod>
 80078ca:	000b      	movs	r3, r1
 80078cc:	001a      	movs	r2, r3
 80078ce:	2013      	movs	r0, #19
 80078d0:	183b      	adds	r3, r7, r0
 80078d2:	701a      	strb	r2, [r3, #0]

	//Print back the original digit and also decimal point
	if (blinkDigit == decimal_position) {
 80078d4:	2330      	movs	r3, #48	; 0x30
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	197a      	adds	r2, r7, r5
 80078de:	8812      	ldrh	r2, [r2, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d10b      	bne.n	80078fc <max7219_BlinkDigit+0xdc>
		max7219_PrintDigit(segment, blinkDigit, digit, true);
 80078e4:	197b      	adds	r3, r7, r5
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b2d9      	uxtb	r1, r3
 80078ea:	183b      	adds	r3, r7, r0
 80078ec:	781a      	ldrb	r2, [r3, #0]
 80078ee:	230f      	movs	r3, #15
 80078f0:	18fb      	adds	r3, r7, r3
 80078f2:	7818      	ldrb	r0, [r3, #0]
 80078f4:	2301      	movs	r3, #1
 80078f6:	f7ff fe49 	bl	800758c <max7219_PrintDigit>
 80078fa:	e00c      	b.n	8007916 <max7219_BlinkDigit+0xf6>
	}
	//Print back the original digit without a decimal point
	else {
		max7219_PrintDigit(segment, blinkDigit, digit, false);
 80078fc:	231a      	movs	r3, #26
 80078fe:	18fb      	adds	r3, r7, r3
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b2d9      	uxtb	r1, r3
 8007904:	2313      	movs	r3, #19
 8007906:	18fb      	adds	r3, r7, r3
 8007908:	781a      	ldrb	r2, [r3, #0]
 800790a:	230f      	movs	r3, #15
 800790c:	18fb      	adds	r3, r7, r3
 800790e:	7818      	ldrb	r0, [r3, #0]
 8007910:	2300      	movs	r3, #0
 8007912:	f7ff fe3b 	bl	800758c <max7219_PrintDigit>
	}

	//Delay
	blinkTimer = HAL_GetTick() + blinkDelay;
 8007916:	f001 fd53 	bl	80093c0 <HAL_GetTick>
 800791a:	0002      	movs	r2, r0
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	189b      	adds	r3, r3, r2
 8007920:	617b      	str	r3, [r7, #20]
	while (HAL_GetTick() < blinkTimer);
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	f001 fd4c 	bl	80093c0 <HAL_GetTick>
 8007928:	0002      	movs	r2, r0
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	4293      	cmp	r3, r2
 800792e:	d8f9      	bhi.n	8007924 <max7219_BlinkDigit+0x104>
}
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	46bd      	mov	sp, r7
 8007936:	b008      	add	sp, #32
 8007938:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800793c <getSymbol>:

static uint16_t getSymbol(uint8_t number)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	0002      	movs	r2, r0
 8007944:	1dfb      	adds	r3, r7, #7
 8007946:	701a      	strb	r2, [r3, #0]
	return SYMBOLS[number];
 8007948:	1dfb      	adds	r3, r7, #7
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	4a03      	ldr	r2, [pc, #12]	; (800795c <getSymbol+0x20>)
 800794e:	5cd3      	ldrb	r3, [r2, r3]
 8007950:	b29b      	uxth	r3, r3
}
 8007952:	0018      	movs	r0, r3
 8007954:	46bd      	mov	sp, r7
 8007956:	b002      	add	sp, #8
 8007958:	bd80      	pop	{r7, pc}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	20000048 	.word	0x20000048

08007960 <lcdPow10>:

static uint32_t lcdPow10(uint8_t n)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	0002      	movs	r2, r0
 8007968:	1dfb      	adds	r3, r7, #7
 800796a:	701a      	strb	r2, [r3, #0]
	uint32_t retval = 1u;
 800796c:	2301      	movs	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]

	while (n > 0u)
 8007970:	e00a      	b.n	8007988 <lcdPow10+0x28>
	{
		retval *= 10u;
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	0013      	movs	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	189b      	adds	r3, r3, r2
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
		n--;
 800797e:	1dfb      	adds	r3, r7, #7
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	1dfb      	adds	r3, r7, #7
 8007984:	3a01      	subs	r2, #1
 8007986:	701a      	strb	r2, [r3, #0]
	while (n > 0u)
 8007988:	1dfb      	adds	r3, r7, #7
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f0      	bne.n	8007972 <lcdPow10+0x12>
	}

	return retval;
 8007990:	68fb      	ldr	r3, [r7, #12]
}
 8007992:	0018      	movs	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	b004      	add	sp, #16
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	0002      	movs	r2, r0
 80079a4:	1dfb      	adds	r3, r7, #7
 80079a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80079a8:	1dfb      	adds	r3, r7, #7
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b7f      	cmp	r3, #127	; 0x7f
 80079ae:	d809      	bhi.n	80079c4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079b0:	1dfb      	adds	r3, r7, #7
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	001a      	movs	r2, r3
 80079b6:	231f      	movs	r3, #31
 80079b8:	401a      	ands	r2, r3
 80079ba:	4b04      	ldr	r3, [pc, #16]	; (80079cc <__NVIC_EnableIRQ+0x30>)
 80079bc:	2101      	movs	r1, #1
 80079be:	4091      	lsls	r1, r2
 80079c0:	000a      	movs	r2, r1
 80079c2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b002      	add	sp, #8
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	e000e100 	.word	0xe000e100

080079d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079d0:	b590      	push	{r4, r7, lr}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	0002      	movs	r2, r0
 80079d8:	6039      	str	r1, [r7, #0]
 80079da:	1dfb      	adds	r3, r7, #7
 80079dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80079de:	1dfb      	adds	r3, r7, #7
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b7f      	cmp	r3, #127	; 0x7f
 80079e4:	d828      	bhi.n	8007a38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80079e6:	4a2f      	ldr	r2, [pc, #188]	; (8007aa4 <__NVIC_SetPriority+0xd4>)
 80079e8:	1dfb      	adds	r3, r7, #7
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	b25b      	sxtb	r3, r3
 80079ee:	089b      	lsrs	r3, r3, #2
 80079f0:	33c0      	adds	r3, #192	; 0xc0
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	589b      	ldr	r3, [r3, r2]
 80079f6:	1dfa      	adds	r2, r7, #7
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	0011      	movs	r1, r2
 80079fc:	2203      	movs	r2, #3
 80079fe:	400a      	ands	r2, r1
 8007a00:	00d2      	lsls	r2, r2, #3
 8007a02:	21ff      	movs	r1, #255	; 0xff
 8007a04:	4091      	lsls	r1, r2
 8007a06:	000a      	movs	r2, r1
 8007a08:	43d2      	mvns	r2, r2
 8007a0a:	401a      	ands	r2, r3
 8007a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	019b      	lsls	r3, r3, #6
 8007a12:	22ff      	movs	r2, #255	; 0xff
 8007a14:	401a      	ands	r2, r3
 8007a16:	1dfb      	adds	r3, r7, #7
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	4003      	ands	r3, r0
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a24:	481f      	ldr	r0, [pc, #124]	; (8007aa4 <__NVIC_SetPriority+0xd4>)
 8007a26:	1dfb      	adds	r3, r7, #7
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	089b      	lsrs	r3, r3, #2
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	33c0      	adds	r3, #192	; 0xc0
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007a36:	e031      	b.n	8007a9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a38:	4a1b      	ldr	r2, [pc, #108]	; (8007aa8 <__NVIC_SetPriority+0xd8>)
 8007a3a:	1dfb      	adds	r3, r7, #7
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	0019      	movs	r1, r3
 8007a40:	230f      	movs	r3, #15
 8007a42:	400b      	ands	r3, r1
 8007a44:	3b08      	subs	r3, #8
 8007a46:	089b      	lsrs	r3, r3, #2
 8007a48:	3306      	adds	r3, #6
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	18d3      	adds	r3, r2, r3
 8007a4e:	3304      	adds	r3, #4
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	1dfa      	adds	r2, r7, #7
 8007a54:	7812      	ldrb	r2, [r2, #0]
 8007a56:	0011      	movs	r1, r2
 8007a58:	2203      	movs	r2, #3
 8007a5a:	400a      	ands	r2, r1
 8007a5c:	00d2      	lsls	r2, r2, #3
 8007a5e:	21ff      	movs	r1, #255	; 0xff
 8007a60:	4091      	lsls	r1, r2
 8007a62:	000a      	movs	r2, r1
 8007a64:	43d2      	mvns	r2, r2
 8007a66:	401a      	ands	r2, r3
 8007a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	019b      	lsls	r3, r3, #6
 8007a6e:	22ff      	movs	r2, #255	; 0xff
 8007a70:	401a      	ands	r2, r3
 8007a72:	1dfb      	adds	r3, r7, #7
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	0018      	movs	r0, r3
 8007a78:	2303      	movs	r3, #3
 8007a7a:	4003      	ands	r3, r0
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a80:	4809      	ldr	r0, [pc, #36]	; (8007aa8 <__NVIC_SetPriority+0xd8>)
 8007a82:	1dfb      	adds	r3, r7, #7
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	001c      	movs	r4, r3
 8007a88:	230f      	movs	r3, #15
 8007a8a:	4023      	ands	r3, r4
 8007a8c:	3b08      	subs	r3, #8
 8007a8e:	089b      	lsrs	r3, r3, #2
 8007a90:	430a      	orrs	r2, r1
 8007a92:	3306      	adds	r3, #6
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	18c3      	adds	r3, r0, r3
 8007a98:	3304      	adds	r3, #4
 8007a9a:	601a      	str	r2, [r3, #0]
}
 8007a9c:	46c0      	nop			; (mov r8, r8)
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	b003      	add	sp, #12
 8007aa2:	bd90      	pop	{r4, r7, pc}
 8007aa4:	e000e100 	.word	0xe000e100
 8007aa8:	e000ed00 	.word	0xe000ed00

08007aac <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8007abc:	4a0c      	ldr	r2, [pc, #48]	; (8007af0 <LL_DMA_SetDataTransferDirection+0x44>)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	18d3      	adds	r3, r2, r3
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	001a      	movs	r2, r3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	18d3      	adds	r3, r2, r3
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <LL_DMA_SetDataTransferDirection+0x48>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	0019      	movs	r1, r3
 8007ad2:	4a07      	ldr	r2, [pc, #28]	; (8007af0 <LL_DMA_SetDataTransferDirection+0x44>)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	18d3      	adds	r3, r2, r3
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	001a      	movs	r2, r3
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	18d3      	adds	r3, r2, r3
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b006      	add	sp, #24
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	08024f98 	.word	0x08024f98
 8007af4:	ffffbfef 	.word	0xffffbfef

08007af8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8007b08:	4a0c      	ldr	r2, [pc, #48]	; (8007b3c <LL_DMA_SetMode+0x44>)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	18d3      	adds	r3, r2, r3
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	001a      	movs	r2, r3
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	18d3      	adds	r3, r2, r3
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	4393      	bics	r3, r2
 8007b1c:	0019      	movs	r1, r3
 8007b1e:	4a07      	ldr	r2, [pc, #28]	; (8007b3c <LL_DMA_SetMode+0x44>)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	18d3      	adds	r3, r2, r3
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	001a      	movs	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	18d3      	adds	r3, r2, r3
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	601a      	str	r2, [r3, #0]
             Mode);
}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	46bd      	mov	sp, r7
 8007b36:	b006      	add	sp, #24
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	46c0      	nop			; (mov r8, r8)
 8007b3c:	08024f98 	.word	0x08024f98

08007b40 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8007b50:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <LL_DMA_SetPeriphIncMode+0x44>)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	18d3      	adds	r3, r2, r3
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	001a      	movs	r2, r3
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	18d3      	adds	r3, r2, r3
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2240      	movs	r2, #64	; 0x40
 8007b62:	4393      	bics	r3, r2
 8007b64:	0019      	movs	r1, r3
 8007b66:	4a07      	ldr	r2, [pc, #28]	; (8007b84 <LL_DMA_SetPeriphIncMode+0x44>)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	18d3      	adds	r3, r2, r3
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	001a      	movs	r2, r3
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	18d3      	adds	r3, r2, r3
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b006      	add	sp, #24
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	08024f98 	.word	0x08024f98

08007b88 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8007b98:	4a0c      	ldr	r2, [pc, #48]	; (8007bcc <LL_DMA_SetMemoryIncMode+0x44>)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	18d3      	adds	r3, r2, r3
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	001a      	movs	r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	18d3      	adds	r3, r2, r3
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2280      	movs	r2, #128	; 0x80
 8007baa:	4393      	bics	r3, r2
 8007bac:	0019      	movs	r1, r3
 8007bae:	4a07      	ldr	r2, [pc, #28]	; (8007bcc <LL_DMA_SetMemoryIncMode+0x44>)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	18d3      	adds	r3, r2, r3
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	001a      	movs	r2, r3
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	18d3      	adds	r3, r2, r3
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8007bc2:	46c0      	nop			; (mov r8, r8)
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b006      	add	sp, #24
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	08024f98 	.word	0x08024f98

08007bd0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8007be0:	4a0c      	ldr	r2, [pc, #48]	; (8007c14 <LL_DMA_SetPeriphSize+0x44>)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	18d3      	adds	r3, r2, r3
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	001a      	movs	r2, r3
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	18d3      	adds	r3, r2, r3
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a09      	ldr	r2, [pc, #36]	; (8007c18 <LL_DMA_SetPeriphSize+0x48>)
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	0019      	movs	r1, r3
 8007bf6:	4a07      	ldr	r2, [pc, #28]	; (8007c14 <LL_DMA_SetPeriphSize+0x44>)
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	18d3      	adds	r3, r2, r3
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	001a      	movs	r2, r3
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	18d3      	adds	r3, r2, r3
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b006      	add	sp, #24
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	08024f98 	.word	0x08024f98
 8007c18:	fffffcff 	.word	0xfffffcff

08007c1c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8007c2c:	4a0c      	ldr	r2, [pc, #48]	; (8007c60 <LL_DMA_SetMemorySize+0x44>)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	18d3      	adds	r3, r2, r3
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	001a      	movs	r2, r3
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	18d3      	adds	r3, r2, r3
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a09      	ldr	r2, [pc, #36]	; (8007c64 <LL_DMA_SetMemorySize+0x48>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	0019      	movs	r1, r3
 8007c42:	4a07      	ldr	r2, [pc, #28]	; (8007c60 <LL_DMA_SetMemorySize+0x44>)
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	18d3      	adds	r3, r2, r3
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	001a      	movs	r2, r3
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	18d3      	adds	r3, r2, r3
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b006      	add	sp, #24
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	08024f98 	.word	0x08024f98
 8007c64:	fffff3ff 	.word	0xfffff3ff

08007c68 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8007c78:	4a0c      	ldr	r2, [pc, #48]	; (8007cac <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	18d3      	adds	r3, r2, r3
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	001a      	movs	r2, r3
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	18d3      	adds	r3, r2, r3
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a09      	ldr	r2, [pc, #36]	; (8007cb0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	0019      	movs	r1, r3
 8007c8e:	4a07      	ldr	r2, [pc, #28]	; (8007cac <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	18d3      	adds	r3, r2, r3
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	001a      	movs	r2, r3
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	18d3      	adds	r3, r2, r3
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	601a      	str	r2, [r3, #0]
             Priority);
}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	b006      	add	sp, #24
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	08024f98 	.word	0x08024f98
 8007cb0:	ffffcfff 	.word	0xffffcfff

08007cb4 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	0a9b      	lsrs	r3, r3, #10
 8007cc4:	4a0f      	ldr	r2, [pc, #60]	; (8007d04 <LL_DMA_SetPeriphRequest+0x50>)
 8007cc6:	405a      	eors	r2, r3
 8007cc8:	0013      	movs	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	18d3      	adds	r3, r2, r3
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4a0b      	ldr	r2, [pc, #44]	; (8007d08 <LL_DMA_SetPeriphRequest+0x54>)
 8007cda:	4694      	mov	ip, r2
 8007cdc:	4463      	add	r3, ip
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	227f      	movs	r2, #127	; 0x7f
 8007ce2:	4393      	bics	r3, r2
 8007ce4:	0019      	movs	r1, r3
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	18d3      	adds	r3, r2, r3
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4a06      	ldr	r2, [pc, #24]	; (8007d08 <LL_DMA_SetPeriphRequest+0x54>)
 8007cf0:	4694      	mov	ip, r2
 8007cf2:	4463      	add	r3, ip
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	601a      	str	r2, [r3, #0]
}
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	b006      	add	sp, #24
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	00100080 	.word	0x00100080
 8007d08:	40020800 	.word	0x40020800

08007d0c <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	601a      	str	r2, [r3, #0]
}
 8007d20:	46c0      	nop			; (mov r8, r8)
 8007d22:	46bd      	mov	sp, r7
 8007d24:	b002      	add	sp, #8
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a03      	ldr	r2, [pc, #12]	; (8007d44 <LL_LPUART_DisableFIFO+0x1c>)
 8007d36:	401a      	ands	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
}
 8007d3c:	46c0      	nop			; (mov r8, r8)
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	b002      	add	sp, #8
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	dfffffff 	.word	0xdfffffff

08007d48 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d52:	f3ef 8310 	mrs	r3, PRIMASK
 8007d56:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d58:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f383 8810 	msr	PRIMASK, r3
}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	08da      	lsrs	r2, r3, #3
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	075b      	lsls	r3, r3, #29
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	609a      	str	r2, [r3, #8]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f383 8810 	msr	PRIMASK, r3
}
 8007d84:	46c0      	nop			; (mov r8, r8)
}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	b006      	add	sp, #24
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007da0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	2301      	movs	r3, #1
 8007da6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f383 8810 	msr	PRIMASK, r3
}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	4a08      	ldr	r2, [pc, #32]	; (8007dd8 <LL_LPUART_SetRXFIFOThreshold+0x48>)
 8007db6:	401a      	ands	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	065b      	lsls	r3, r3, #25
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	609a      	str	r2, [r3, #8]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f383 8810 	msr	PRIMASK, r3
}
 8007dcc:	46c0      	nop			; (mov r8, r8)
}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	b006      	add	sp, #24
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	f1ffffff 	.word	0xf1ffffff

08007ddc <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	2380      	movs	r3, #128	; 0x80
 8007dea:	039b      	lsls	r3, r3, #14
 8007dec:	401a      	ands	r2, r3
 8007dee:	2380      	movs	r3, #128	; 0x80
 8007df0:	039b      	lsls	r3, r3, #14
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d101      	bne.n	8007dfa <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b002      	add	sp, #8
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	69da      	ldr	r2, [r3, #28]
 8007e10:	2380      	movs	r3, #128	; 0x80
 8007e12:	03db      	lsls	r3, r3, #15
 8007e14:	401a      	ands	r2, r3
 8007e16:	2380      	movs	r3, #128	; 0x80
 8007e18:	03db      	lsls	r3, r3, #15
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d101      	bne.n	8007e22 <LL_LPUART_IsActiveFlag_REACK+0x1e>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <LL_LPUART_IsActiveFlag_REACK+0x20>
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	0018      	movs	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b002      	add	sp, #8
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e34:	f3ef 8310 	mrs	r3, PRIMASK
 8007e38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	2301      	movs	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f383 8810 	msr	PRIMASK, r3
}
 8007e48:	46c0      	nop			; (mov r8, r8)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f383 8810 	msr	PRIMASK, r3
}
 8007e60:	46c0      	nop			; (mov r8, r8)
}
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	46bd      	mov	sp, r7
 8007e66:	b006      	add	sp, #24
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <LL_TIM_SetOnePulseMode>:
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	4393      	bics	r3, r2
 8007e7c:	001a      	movs	r2, r3
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	601a      	str	r2, [r3, #0]
}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	b002      	add	sp, #8
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <LL_TIM_EnableARRPreload>:
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2280      	movs	r2, #128	; 0x80
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	b002      	add	sp, #8
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <LL_TIM_SetTriggerOutput>:
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2270      	movs	r2, #112	; 0x70
 8007eba:	4393      	bics	r3, r2
 8007ebc:	001a      	movs	r2, r3
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]
}
 8007ec6:	46c0      	nop			; (mov r8, r8)
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	b002      	add	sp, #8
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <LL_TIM_DisableMasterSlaveMode>:
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	2280      	movs	r2, #128	; 0x80
 8007edc:	4393      	bics	r3, r2
 8007ede:	001a      	movs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	609a      	str	r2, [r3, #8]
}
 8007ee4:	46c0      	nop			; (mov r8, r8)
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	b002      	add	sp, #8
 8007eea:	bd80      	pop	{r7, pc}

08007eec <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8007ef4:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <LL_APB1_GRP1_EnableClock+0x28>)
 8007ef6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007ef8:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <LL_APB1_GRP1_EnableClock+0x28>)
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8007f00:	4b04      	ldr	r3, [pc, #16]	; (8007f14 <LL_APB1_GRP1_EnableClock+0x28>)
 8007f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	4013      	ands	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
}
 8007f0c:	46c0      	nop			; (mov r8, r8)
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	b004      	add	sp, #16
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40021000 	.word	0x40021000

08007f18 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <LL_APB2_GRP1_EnableClock+0x28>)
 8007f22:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007f24:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <LL_APB2_GRP1_EnableClock+0x28>)
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8007f2c:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <LL_APB2_GRP1_EnableClock+0x28>)
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	4013      	ands	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f36:	68fb      	ldr	r3, [r7, #12]
}
 8007f38:	46c0      	nop			; (mov r8, r8)
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	b004      	add	sp, #16
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	40021000 	.word	0x40021000

08007f44 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8007f4c:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <LL_IOP_GRP1_EnableClock+0x28>)
 8007f4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007f50:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <LL_IOP_GRP1_EnableClock+0x28>)
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <LL_IOP_GRP1_EnableClock+0x28>)
 8007f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f62:	68fb      	ldr	r3, [r7, #12]
}
 8007f64:	46c0      	nop			; (mov r8, r8)
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b004      	add	sp, #16
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40021000 	.word	0x40021000

08007f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f74:	f001 f9f2 	bl	800935c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f78:	f000 f830 	bl	8007fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f7c:	f000 fcaa 	bl	80088d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007f80:	f000 fc7c 	bl	800887c <MX_DMA_Init>
  MX_UCPD1_Init();
 8007f84:	f000 fbd4 	bl	8008730 <MX_UCPD1_Init>
  MX_ADC1_Init();
 8007f88:	f000 f88a 	bl	80080a0 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8007f8c:	f000 f97e 	bl	800828c <MX_LPUART1_UART_Init>
  MX_TIM7_Init();
 8007f90:	f000 fb56 	bl	8008640 <MX_TIM7_Init>
  MX_SPI2_Init();
 8007f94:	f000 fa5e 	bl	8008454 <MX_SPI2_Init>
  MX_TIM3_Init();
 8007f98:	f000 fa9a 	bl	80084d0 <MX_TIM3_Init>
  MX_USB_Device_Init();
 8007f9c:	f015 fc1c 	bl	801d7d8 <MX_USB_Device_Init>
  MX_DAC1_Init();
 8007fa0:	f000 f93e 	bl	8008220 <MX_DAC1_Init>
  MX_TIM4_Init();
 8007fa4:	f000 faf8 	bl	8008598 <MX_TIM4_Init>
  MX_TIM14_Init();
 8007fa8:	f000 fb88 	bl	80086bc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8007fac:	f7fe fc18 	bl	80067e0 <app_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8007fb0:	f00f ff2c 	bl	8017e0c <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8007fb4:	f012 fcfe 	bl	801a9b4 <MX_USBPD_Init>
  //app_freertos_create();
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007fb8:	4a05      	ldr	r2, [pc, #20]	; (8007fd0 <main+0x60>)
 8007fba:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <main+0x64>)
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f00f ff6c 	bl	8017e9c <osThreadNew>
 8007fc4:	0002      	movs	r2, r0
 8007fc6:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <main+0x68>)
 8007fc8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8007fca:	f00f ff41 	bl	8017e50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007fce:	e7fe      	b.n	8007fce <main+0x5e>
 8007fd0:	08024fa0 	.word	0x08024fa0
 8007fd4:	08008b79 	.word	0x08008b79
 8007fd8:	2000051c 	.word	0x2000051c

08007fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fdc:	b590      	push	{r4, r7, lr}
 8007fde:	b095      	sub	sp, #84	; 0x54
 8007fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fe2:	2414      	movs	r4, #20
 8007fe4:	193b      	adds	r3, r7, r4
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	233c      	movs	r3, #60	; 0x3c
 8007fea:	001a      	movs	r2, r3
 8007fec:	2100      	movs	r1, #0
 8007fee:	f01b fb6d 	bl	80236cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ff2:	1d3b      	adds	r3, r7, #4
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	2310      	movs	r3, #16
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	f01b fb66 	bl	80236cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008000:	2380      	movs	r3, #128	; 0x80
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	0018      	movs	r0, r3
 8008006:	f005 fe0b 	bl	800dc20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800800a:	193b      	adds	r3, r7, r4
 800800c:	2222      	movs	r2, #34	; 0x22
 800800e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008010:	193b      	adds	r3, r7, r4
 8008012:	2280      	movs	r2, #128	; 0x80
 8008014:	0052      	lsls	r2, r2, #1
 8008016:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008018:	193b      	adds	r3, r7, r4
 800801a:	2280      	movs	r2, #128	; 0x80
 800801c:	03d2      	lsls	r2, r2, #15
 800801e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8008020:	0021      	movs	r1, r4
 8008022:	187b      	adds	r3, r7, r1
 8008024:	2200      	movs	r2, #0
 8008026:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008028:	187b      	adds	r3, r7, r1
 800802a:	2240      	movs	r2, #64	; 0x40
 800802c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800802e:	187b      	adds	r3, r7, r1
 8008030:	2202      	movs	r2, #2
 8008032:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008034:	187b      	adds	r3, r7, r1
 8008036:	2202      	movs	r2, #2
 8008038:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800803a:	187b      	adds	r3, r7, r1
 800803c:	2200      	movs	r2, #0
 800803e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8008040:	187b      	adds	r3, r7, r1
 8008042:	2208      	movs	r2, #8
 8008044:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008046:	187b      	adds	r3, r7, r1
 8008048:	2280      	movs	r2, #128	; 0x80
 800804a:	0292      	lsls	r2, r2, #10
 800804c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800804e:	187b      	adds	r3, r7, r1
 8008050:	2280      	movs	r2, #128	; 0x80
 8008052:	0492      	lsls	r2, r2, #18
 8008054:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008056:	187b      	adds	r3, r7, r1
 8008058:	2280      	movs	r2, #128	; 0x80
 800805a:	0592      	lsls	r2, r2, #22
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800805e:	187b      	adds	r3, r7, r1
 8008060:	0018      	movs	r0, r3
 8008062:	f005 fe29 	bl	800dcb8 <HAL_RCC_OscConfig>
 8008066:	1e03      	subs	r3, r0, #0
 8008068:	d001      	beq.n	800806e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800806a:	f000 fda5 	bl	8008bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800806e:	1d3b      	adds	r3, r7, #4
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008074:	1d3b      	adds	r3, r7, #4
 8008076:	2202      	movs	r2, #2
 8008078:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800807a:	1d3b      	adds	r3, r7, #4
 800807c:	2200      	movs	r2, #0
 800807e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008080:	1d3b      	adds	r3, r7, #4
 8008082:	2200      	movs	r2, #0
 8008084:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008086:	1d3b      	adds	r3, r7, #4
 8008088:	2102      	movs	r1, #2
 800808a:	0018      	movs	r0, r3
 800808c:	f006 f974 	bl	800e378 <HAL_RCC_ClockConfig>
 8008090:	1e03      	subs	r3, r0, #0
 8008092:	d001      	beq.n	8008098 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8008094:	f000 fd90 	bl	8008bb8 <Error_Handler>
  }
}
 8008098:	46c0      	nop			; (mov r8, r8)
 800809a:	46bd      	mov	sp, r7
 800809c:	b015      	add	sp, #84	; 0x54
 800809e:	bd90      	pop	{r4, r7, pc}

080080a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08a      	sub	sp, #40	; 0x28
 80080a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80080a6:	231c      	movs	r3, #28
 80080a8:	18fb      	adds	r3, r7, r3
 80080aa:	0018      	movs	r0, r3
 80080ac:	230c      	movs	r3, #12
 80080ae:	001a      	movs	r2, r3
 80080b0:	2100      	movs	r1, #0
 80080b2:	f01b fb0b 	bl	80236cc <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80080b6:	1d3b      	adds	r3, r7, #4
 80080b8:	0018      	movs	r0, r3
 80080ba:	2318      	movs	r3, #24
 80080bc:	001a      	movs	r2, r3
 80080be:	2100      	movs	r1, #0
 80080c0:	f01b fb04 	bl	80236cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80080c4:	4b50      	ldr	r3, [pc, #320]	; (8008208 <MX_ADC1_Init+0x168>)
 80080c6:	4a51      	ldr	r2, [pc, #324]	; (800820c <MX_ADC1_Init+0x16c>)
 80080c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80080ca:	4b4f      	ldr	r3, [pc, #316]	; (8008208 <MX_ADC1_Init+0x168>)
 80080cc:	2280      	movs	r2, #128	; 0x80
 80080ce:	05d2      	lsls	r2, r2, #23
 80080d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80080d2:	4b4d      	ldr	r3, [pc, #308]	; (8008208 <MX_ADC1_Init+0x168>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80080d8:	4b4b      	ldr	r3, [pc, #300]	; (8008208 <MX_ADC1_Init+0x168>)
 80080da:	2200      	movs	r2, #0
 80080dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80080de:	4b4a      	ldr	r3, [pc, #296]	; (8008208 <MX_ADC1_Init+0x168>)
 80080e0:	2280      	movs	r2, #128	; 0x80
 80080e2:	0392      	lsls	r2, r2, #14
 80080e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80080e6:	4b48      	ldr	r3, [pc, #288]	; (8008208 <MX_ADC1_Init+0x168>)
 80080e8:	2208      	movs	r2, #8
 80080ea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80080ec:	4b46      	ldr	r3, [pc, #280]	; (8008208 <MX_ADC1_Init+0x168>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80080f2:	4b45      	ldr	r3, [pc, #276]	; (8008208 <MX_ADC1_Init+0x168>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80080f8:	4b43      	ldr	r3, [pc, #268]	; (8008208 <MX_ADC1_Init+0x168>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 80080fe:	4b42      	ldr	r3, [pc, #264]	; (8008208 <MX_ADC1_Init+0x168>)
 8008100:	2203      	movs	r2, #3
 8008102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008104:	4b40      	ldr	r3, [pc, #256]	; (8008208 <MX_ADC1_Init+0x168>)
 8008106:	2220      	movs	r2, #32
 8008108:	2100      	movs	r1, #0
 800810a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800810c:	4b3e      	ldr	r3, [pc, #248]	; (8008208 <MX_ADC1_Init+0x168>)
 800810e:	22b0      	movs	r2, #176	; 0xb0
 8008110:	00d2      	lsls	r2, r2, #3
 8008112:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8008114:	4b3c      	ldr	r3, [pc, #240]	; (8008208 <MX_ADC1_Init+0x168>)
 8008116:	2280      	movs	r2, #128	; 0x80
 8008118:	00d2      	lsls	r2, r2, #3
 800811a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800811c:	4b3a      	ldr	r3, [pc, #232]	; (8008208 <MX_ADC1_Init+0x168>)
 800811e:	222c      	movs	r2, #44	; 0x2c
 8008120:	2101      	movs	r1, #1
 8008122:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008124:	4b38      	ldr	r3, [pc, #224]	; (8008208 <MX_ADC1_Init+0x168>)
 8008126:	2280      	movs	r2, #128	; 0x80
 8008128:	0152      	lsls	r2, r2, #5
 800812a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800812c:	4b36      	ldr	r3, [pc, #216]	; (8008208 <MX_ADC1_Init+0x168>)
 800812e:	2207      	movs	r2, #7
 8008130:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8008132:	4b35      	ldr	r3, [pc, #212]	; (8008208 <MX_ADC1_Init+0x168>)
 8008134:	2207      	movs	r2, #7
 8008136:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8008138:	4b33      	ldr	r3, [pc, #204]	; (8008208 <MX_ADC1_Init+0x168>)
 800813a:	223c      	movs	r2, #60	; 0x3c
 800813c:	2100      	movs	r1, #0
 800813e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8008140:	4b31      	ldr	r3, [pc, #196]	; (8008208 <MX_ADC1_Init+0x168>)
 8008142:	2200      	movs	r2, #0
 8008144:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008146:	4b30      	ldr	r3, [pc, #192]	; (8008208 <MX_ADC1_Init+0x168>)
 8008148:	0018      	movs	r0, r3
 800814a:	f001 fbb5 	bl	80098b8 <HAL_ADC_Init>
 800814e:	1e03      	subs	r3, r0, #0
 8008150:	d001      	beq.n	8008156 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8008152:	f000 fd31 	bl	8008bb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8008156:	211c      	movs	r1, #28
 8008158:	187b      	adds	r3, r7, r1
 800815a:	4a2d      	ldr	r2, [pc, #180]	; (8008210 <MX_ADC1_Init+0x170>)
 800815c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800815e:	187b      	adds	r3, r7, r1
 8008160:	2200      	movs	r2, #0
 8008162:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8008164:	187b      	adds	r3, r7, r1
 8008166:	2200      	movs	r2, #0
 8008168:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800816a:	187a      	adds	r2, r7, r1
 800816c:	4b26      	ldr	r3, [pc, #152]	; (8008208 <MX_ADC1_Init+0x168>)
 800816e:	0011      	movs	r1, r2
 8008170:	0018      	movs	r0, r3
 8008172:	f001 ff07 	bl	8009f84 <HAL_ADC_ConfigChannel>
 8008176:	1e03      	subs	r3, r0, #0
 8008178:	d001      	beq.n	800817e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800817a:	f000 fd1d 	bl	8008bb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800817e:	211c      	movs	r1, #28
 8008180:	187b      	adds	r3, r7, r1
 8008182:	4a24      	ldr	r2, [pc, #144]	; (8008214 <MX_ADC1_Init+0x174>)
 8008184:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008186:	187b      	adds	r3, r7, r1
 8008188:	2204      	movs	r2, #4
 800818a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800818c:	187a      	adds	r2, r7, r1
 800818e:	4b1e      	ldr	r3, [pc, #120]	; (8008208 <MX_ADC1_Init+0x168>)
 8008190:	0011      	movs	r1, r2
 8008192:	0018      	movs	r0, r3
 8008194:	f001 fef6 	bl	8009f84 <HAL_ADC_ConfigChannel>
 8008198:	1e03      	subs	r3, r0, #0
 800819a:	d001      	beq.n	80081a0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800819c:	f000 fd0c 	bl	8008bb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80081a0:	211c      	movs	r1, #28
 80081a2:	187b      	adds	r3, r7, r1
 80081a4:	4a1c      	ldr	r2, [pc, #112]	; (8008218 <MX_ADC1_Init+0x178>)
 80081a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	2208      	movs	r2, #8
 80081ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081ae:	187a      	adds	r2, r7, r1
 80081b0:	4b15      	ldr	r3, [pc, #84]	; (8008208 <MX_ADC1_Init+0x168>)
 80081b2:	0011      	movs	r1, r2
 80081b4:	0018      	movs	r0, r3
 80081b6:	f001 fee5 	bl	8009f84 <HAL_ADC_ConfigChannel>
 80081ba:	1e03      	subs	r3, r0, #0
 80081bc:	d001      	beq.n	80081c2 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 80081be:	f000 fcfb 	bl	8008bb8 <Error_Handler>
  }

  /** Configure the regular channel to be monitored by WatchDog 2 or 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 80081c2:	1d3b      	adds	r3, r7, #4
 80081c4:	4a15      	ldr	r2, [pc, #84]	; (800821c <MX_ADC1_Init+0x17c>)
 80081c6:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80081c8:	1d3b      	adds	r3, r7, #4
 80081ca:	22c0      	movs	r2, #192	; 0xc0
 80081cc:	0412      	lsls	r2, r2, #16
 80081ce:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_7;
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	4a11      	ldr	r2, [pc, #68]	; (8008218 <MX_ADC1_Init+0x178>)
 80081d4:	609a      	str	r2, [r3, #8]
  AnalogWDGConfig.ITMode = ENABLE;
 80081d6:	1d3b      	adds	r3, r7, #4
 80081d8:	2201      	movs	r2, #1
 80081da:	731a      	strb	r2, [r3, #12]
  AnalogWDGConfig.HighThreshold = 1000;
 80081dc:	1d3b      	adds	r3, r7, #4
 80081de:	22fa      	movs	r2, #250	; 0xfa
 80081e0:	0092      	lsls	r2, r2, #2
 80081e2:	611a      	str	r2, [r3, #16]
  AnalogWDGConfig.LowThreshold = 0;
 80081e4:	1d3b      	adds	r3, r7, #4
 80081e6:	2200      	movs	r2, #0
 80081e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80081ea:	1d3a      	adds	r2, r7, #4
 80081ec:	4b06      	ldr	r3, [pc, #24]	; (8008208 <MX_ADC1_Init+0x168>)
 80081ee:	0011      	movs	r1, r2
 80081f0:	0018      	movs	r0, r3
 80081f2:	f002 f89f 	bl	800a334 <HAL_ADC_AnalogWDGConfig>
 80081f6:	1e03      	subs	r3, r0, #0
 80081f8:	d001      	beq.n	80081fe <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80081fa:	f000 fcdd 	bl	8008bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80081fe:	46c0      	nop			; (mov r8, r8)
 8008200:	46bd      	mov	sp, r7
 8008202:	b00a      	add	sp, #40	; 0x28
 8008204:	bd80      	pop	{r7, pc}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	20000348 	.word	0x20000348
 800820c:	40012400 	.word	0x40012400
 8008210:	14000020 	.word	0x14000020
 8008214:	18000040 	.word	0x18000040
 8008218:	1c000080 	.word	0x1c000080
 800821c:	0017ffff 	.word	0x0017ffff

08008220 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08a      	sub	sp, #40	; 0x28
 8008224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008226:	1d3b      	adds	r3, r7, #4
 8008228:	0018      	movs	r0, r3
 800822a:	2324      	movs	r3, #36	; 0x24
 800822c:	001a      	movs	r2, r3
 800822e:	2100      	movs	r1, #0
 8008230:	f01b fa4c 	bl	80236cc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8008234:	4b13      	ldr	r3, [pc, #76]	; (8008284 <MX_DAC1_Init+0x64>)
 8008236:	4a14      	ldr	r2, [pc, #80]	; (8008288 <MX_DAC1_Init+0x68>)
 8008238:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800823a:	4b12      	ldr	r3, [pc, #72]	; (8008284 <MX_DAC1_Init+0x64>)
 800823c:	0018      	movs	r0, r3
 800823e:	f002 ff04 	bl	800b04a <HAL_DAC_Init>
 8008242:	1e03      	subs	r3, r0, #0
 8008244:	d001      	beq.n	800824a <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8008246:	f000 fcb7 	bl	8008bb8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800824a:	1d3b      	adds	r3, r7, #4
 800824c:	2200      	movs	r2, #0
 800824e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8008250:	1d3b      	adds	r3, r7, #4
 8008252:	2200      	movs	r2, #0
 8008254:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008256:	1d3b      	adds	r3, r7, #4
 8008258:	2200      	movs	r2, #0
 800825a:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800825c:	1d3b      	adds	r3, r7, #4
 800825e:	2200      	movs	r2, #0
 8008260:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8008262:	1d3b      	adds	r3, r7, #4
 8008264:	2200      	movs	r2, #0
 8008266:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008268:	1d39      	adds	r1, r7, #4
 800826a:	4b06      	ldr	r3, [pc, #24]	; (8008284 <MX_DAC1_Init+0x64>)
 800826c:	2200      	movs	r2, #0
 800826e:	0018      	movs	r0, r3
 8008270:	f002 fff0 	bl	800b254 <HAL_DAC_ConfigChannel>
 8008274:	1e03      	subs	r3, r0, #0
 8008276:	d001      	beq.n	800827c <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8008278:	f000 fc9e 	bl	8008bb8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800827c:	46c0      	nop			; (mov r8, r8)
 800827e:	46bd      	mov	sp, r7
 8008280:	b00a      	add	sp, #40	; 0x28
 8008282:	bd80      	pop	{r7, pc}
 8008284:	2000040c 	.word	0x2000040c
 8008288:	40007400 	.word	0x40007400

0800828c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800828c:	b590      	push	{r4, r7, lr}
 800828e:	b0a1      	sub	sp, #132	; 0x84
 8008290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8008292:	2364      	movs	r3, #100	; 0x64
 8008294:	18fb      	adds	r3, r7, r3
 8008296:	0018      	movs	r0, r3
 8008298:	231c      	movs	r3, #28
 800829a:	001a      	movs	r2, r3
 800829c:	2100      	movs	r1, #0
 800829e:	f01b fa15 	bl	80236cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a2:	234c      	movs	r3, #76	; 0x4c
 80082a4:	18fb      	adds	r3, r7, r3
 80082a6:	0018      	movs	r0, r3
 80082a8:	2318      	movs	r3, #24
 80082aa:	001a      	movs	r2, r3
 80082ac:	2100      	movs	r1, #0
 80082ae:	f01b fa0d 	bl	80236cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082b2:	003b      	movs	r3, r7
 80082b4:	0018      	movs	r0, r3
 80082b6:	234c      	movs	r3, #76	; 0x4c
 80082b8:	001a      	movs	r2, r3
 80082ba:	2100      	movs	r1, #0
 80082bc:	f01b fa06 	bl	80236cc <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80082c0:	003b      	movs	r3, r7
 80082c2:	2210      	movs	r2, #16
 80082c4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80082c6:	003b      	movs	r3, r7
 80082c8:	2200      	movs	r2, #0
 80082ca:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082cc:	003b      	movs	r3, r7
 80082ce:	0018      	movs	r0, r3
 80082d0:	f006 fa24 	bl	800e71c <HAL_RCCEx_PeriphCLKConfig>
 80082d4:	1e03      	subs	r3, r0, #0
 80082d6:	d001      	beq.n	80082dc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80082d8:	f000 fc6e 	bl	8008bb8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPUART1);
 80082dc:	2380      	movs	r3, #128	; 0x80
 80082de:	035b      	lsls	r3, r3, #13
 80082e0:	0018      	movs	r0, r3
 80082e2:	f7ff fe03 	bl	8007eec <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80082e6:	2001      	movs	r0, #1
 80082e8:	f7ff fe2c 	bl	8007f44 <LL_IOP_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80082ec:	244c      	movs	r4, #76	; 0x4c
 80082ee:	193b      	adds	r3, r7, r4
 80082f0:	2204      	movs	r2, #4
 80082f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80082f4:	193b      	adds	r3, r7, r4
 80082f6:	2202      	movs	r2, #2
 80082f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80082fa:	193b      	adds	r3, r7, r4
 80082fc:	2200      	movs	r2, #0
 80082fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008300:	193b      	adds	r3, r7, r4
 8008302:	2200      	movs	r2, #0
 8008304:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008306:	193b      	adds	r3, r7, r4
 8008308:	2200      	movs	r2, #0
 800830a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800830c:	193b      	adds	r3, r7, r4
 800830e:	2206      	movs	r2, #6
 8008310:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008312:	193a      	adds	r2, r7, r4
 8008314:	23a0      	movs	r3, #160	; 0xa0
 8008316:	05db      	lsls	r3, r3, #23
 8008318:	0011      	movs	r1, r2
 800831a:	0018      	movs	r0, r3
 800831c:	f007 fff2 	bl	8010304 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8008320:	0021      	movs	r1, r4
 8008322:	187b      	adds	r3, r7, r1
 8008324:	2208      	movs	r2, #8
 8008326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008328:	187b      	adds	r3, r7, r1
 800832a:	2202      	movs	r2, #2
 800832c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800832e:	187b      	adds	r3, r7, r1
 8008330:	2200      	movs	r2, #0
 8008332:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008334:	187b      	adds	r3, r7, r1
 8008336:	2200      	movs	r2, #0
 8008338:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800833a:	187b      	adds	r3, r7, r1
 800833c:	2200      	movs	r2, #0
 800833e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8008340:	187b      	adds	r3, r7, r1
 8008342:	2206      	movs	r2, #6
 8008344:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008346:	187a      	adds	r2, r7, r1
 8008348:	23a0      	movs	r3, #160	; 0xa0
 800834a:	05db      	lsls	r3, r3, #23
 800834c:	0011      	movs	r1, r2
 800834e:	0018      	movs	r0, r3
 8008350:	f007 ffd8 	bl	8010304 <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_LPUART1_TX);
 8008354:	4b3d      	ldr	r3, [pc, #244]	; (800844c <MX_LPUART1_UART_Init+0x1c0>)
 8008356:	220f      	movs	r2, #15
 8008358:	2102      	movs	r1, #2
 800835a:	0018      	movs	r0, r3
 800835c:	f7ff fcaa 	bl	8007cb4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8008360:	4b3a      	ldr	r3, [pc, #232]	; (800844c <MX_LPUART1_UART_Init+0x1c0>)
 8008362:	2210      	movs	r2, #16
 8008364:	2102      	movs	r1, #2
 8008366:	0018      	movs	r0, r3
 8008368:	f7ff fba0 	bl	8007aac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800836c:	4b37      	ldr	r3, [pc, #220]	; (800844c <MX_LPUART1_UART_Init+0x1c0>)
 800836e:	2200      	movs	r2, #0
 8008370:	2102      	movs	r1, #2
 8008372:	0018      	movs	r0, r3
 8008374:	f7ff fc78 	bl	8007c68 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8008378:	4b34      	ldr	r3, [pc, #208]	; (800844c <MX_LPUART1_UART_Init+0x1c0>)
 800837a:	2200      	movs	r2, #0
 800837c:	2102      	movs	r1, #2
 800837e:	0018      	movs	r0, r3
 8008380:	f7ff fbba 	bl	8007af8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8008384:	4b31      	ldr	r3, [pc, #196]	; (800844c <MX_LPUART1_UART_Init+0x1c0>)
 8008386:	2200      	movs	r2, #0
 8008388:	2102      	movs	r1, #2
 800838a:	0018      	movs	r0, r3
 800838c:	f7ff fbd8 	bl	8007b40 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8008390:	4b2e      	ldr	r3, [pc, #184]	; (800844c <MX_LPUART1_UART_Init+0x1c0>)
 8008392:	2280      	movs	r2, #128	; 0x80
 8008394:	2102      	movs	r1, #2
 8008396:	0018      	movs	r0, r3
 8008398:	f7ff fbf6 	bl	8007b88 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 800839c:	4b2b      	ldr	r3, [pc, #172]	; (800844c <MX_LPUART1_UART_Init+0x1c0>)
 800839e:	2200      	movs	r2, #0
 80083a0:	2102      	movs	r1, #2
 80083a2:	0018      	movs	r0, r3
 80083a4:	f7ff fc14 	bl	8007bd0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 80083a8:	4b28      	ldr	r3, [pc, #160]	; (800844c <MX_LPUART1_UART_Init+0x1c0>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	2102      	movs	r1, #2
 80083ae:	0018      	movs	r0, r3
 80083b0:	f7ff fc34 	bl	8007c1c <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 3);
 80083b4:	2103      	movs	r1, #3
 80083b6:	201d      	movs	r0, #29
 80083b8:	f7ff fb0a 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80083bc:	201d      	movs	r0, #29
 80083be:	f7ff faed 	bl	800799c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 80083c2:	2164      	movs	r1, #100	; 0x64
 80083c4:	187b      	adds	r3, r7, r1
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
  LPUART_InitStruct.BaudRate = 921600;
 80083ca:	187b      	adds	r3, r7, r1
 80083cc:	22e1      	movs	r2, #225	; 0xe1
 80083ce:	0312      	lsls	r2, r2, #12
 80083d0:	605a      	str	r2, [r3, #4]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_7B;
 80083d2:	187b      	adds	r3, r7, r1
 80083d4:	2280      	movs	r2, #128	; 0x80
 80083d6:	0552      	lsls	r2, r2, #21
 80083d8:	609a      	str	r2, [r3, #8]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80083da:	187b      	adds	r3, r7, r1
 80083dc:	2200      	movs	r2, #0
 80083de:	60da      	str	r2, [r3, #12]
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80083e0:	187b      	adds	r3, r7, r1
 80083e2:	2200      	movs	r2, #0
 80083e4:	611a      	str	r2, [r3, #16]
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 80083e6:	187b      	adds	r3, r7, r1
 80083e8:	220c      	movs	r2, #12
 80083ea:	615a      	str	r2, [r3, #20]
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 80083ec:	187b      	adds	r3, r7, r1
 80083ee:	2200      	movs	r2, #0
 80083f0:	619a      	str	r2, [r3, #24]
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80083f2:	187b      	adds	r3, r7, r1
 80083f4:	4a16      	ldr	r2, [pc, #88]	; (8008450 <MX_LPUART1_UART_Init+0x1c4>)
 80083f6:	0019      	movs	r1, r3
 80083f8:	0010      	movs	r0, r2
 80083fa:	f008 f86b 	bl	80104d4 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <MX_LPUART1_UART_Init+0x1c4>)
 8008400:	2100      	movs	r1, #0
 8008402:	0018      	movs	r0, r3
 8008404:	f7ff fca0 	bl	8007d48 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8008408:	4b11      	ldr	r3, [pc, #68]	; (8008450 <MX_LPUART1_UART_Init+0x1c4>)
 800840a:	2100      	movs	r1, #0
 800840c:	0018      	movs	r0, r3
 800840e:	f7ff fcbf 	bl	8007d90 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8008412:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <MX_LPUART1_UART_Init+0x1c4>)
 8008414:	0018      	movs	r0, r3
 8008416:	f7ff fc87 	bl	8007d28 <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 800841a:	4b0d      	ldr	r3, [pc, #52]	; (8008450 <MX_LPUART1_UART_Init+0x1c4>)
 800841c:	0018      	movs	r0, r3
 800841e:	f7ff fc75 	bl	8007d0c <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 8008422:	46c0      	nop			; (mov r8, r8)
 8008424:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <MX_LPUART1_UART_Init+0x1c4>)
 8008426:	0018      	movs	r0, r3
 8008428:	f7ff fcd8 	bl	8007ddc <LL_LPUART_IsActiveFlag_TEACK>
 800842c:	1e03      	subs	r3, r0, #0
 800842e:	d0f9      	beq.n	8008424 <MX_LPUART1_UART_Init+0x198>
 8008430:	4b07      	ldr	r3, [pc, #28]	; (8008450 <MX_LPUART1_UART_Init+0x1c4>)
 8008432:	0018      	movs	r0, r3
 8008434:	f7ff fce6 	bl	8007e04 <LL_LPUART_IsActiveFlag_REACK>
 8008438:	1e03      	subs	r3, r0, #0
 800843a:	d0f3      	beq.n	8008424 <MX_LPUART1_UART_Init+0x198>
  {
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  LL_LPUART_EnableIT_RXNE_RXFNE(LPUART1);
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <MX_LPUART1_UART_Init+0x1c4>)
 800843e:	0018      	movs	r0, r3
 8008440:	f7ff fcf4 	bl	8007e2c <LL_LPUART_EnableIT_RXNE_RXFNE>
  /* USER CODE END LPUART1_Init 2 */

}
 8008444:	46c0      	nop			; (mov r8, r8)
 8008446:	46bd      	mov	sp, r7
 8008448:	b021      	add	sp, #132	; 0x84
 800844a:	bd90      	pop	{r4, r7, pc}
 800844c:	40020000 	.word	0x40020000
 8008450:	40008000 	.word	0x40008000

08008454 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008458:	4b1b      	ldr	r3, [pc, #108]	; (80084c8 <MX_SPI2_Init+0x74>)
 800845a:	4a1c      	ldr	r2, [pc, #112]	; (80084cc <MX_SPI2_Init+0x78>)
 800845c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800845e:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <MX_SPI2_Init+0x74>)
 8008460:	2282      	movs	r2, #130	; 0x82
 8008462:	0052      	lsls	r2, r2, #1
 8008464:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008466:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <MX_SPI2_Init+0x74>)
 8008468:	2200      	movs	r2, #0
 800846a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800846c:	4b16      	ldr	r3, [pc, #88]	; (80084c8 <MX_SPI2_Init+0x74>)
 800846e:	22e0      	movs	r2, #224	; 0xe0
 8008470:	00d2      	lsls	r2, r2, #3
 8008472:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008474:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <MX_SPI2_Init+0x74>)
 8008476:	2200      	movs	r2, #0
 8008478:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800847a:	4b13      	ldr	r3, [pc, #76]	; (80084c8 <MX_SPI2_Init+0x74>)
 800847c:	2200      	movs	r2, #0
 800847e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008480:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <MX_SPI2_Init+0x74>)
 8008482:	2280      	movs	r2, #128	; 0x80
 8008484:	0092      	lsls	r2, r2, #2
 8008486:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <MX_SPI2_Init+0x74>)
 800848a:	2220      	movs	r2, #32
 800848c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800848e:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <MX_SPI2_Init+0x74>)
 8008490:	2200      	movs	r2, #0
 8008492:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008494:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <MX_SPI2_Init+0x74>)
 8008496:	2200      	movs	r2, #0
 8008498:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <MX_SPI2_Init+0x74>)
 800849c:	2200      	movs	r2, #0
 800849e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80084a0:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <MX_SPI2_Init+0x74>)
 80084a2:	2207      	movs	r2, #7
 80084a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80084a6:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <MX_SPI2_Init+0x74>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80084ac:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <MX_SPI2_Init+0x74>)
 80084ae:	2208      	movs	r2, #8
 80084b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80084b2:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <MX_SPI2_Init+0x74>)
 80084b4:	0018      	movs	r0, r3
 80084b6:	f006 fb6d 	bl	800eb94 <HAL_SPI_Init>
 80084ba:	1e03      	subs	r3, r0, #0
 80084bc:	d001      	beq.n	80084c2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80084be:	f000 fb7b 	bl	8008bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20000420 	.word	0x20000420
 80084cc:	40003800 	.word	0x40003800

080084d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80084d0:	b590      	push	{r4, r7, lr}
 80084d2:	b08d      	sub	sp, #52	; 0x34
 80084d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80084d6:	240c      	movs	r4, #12
 80084d8:	193b      	adds	r3, r7, r4
 80084da:	0018      	movs	r0, r3
 80084dc:	2324      	movs	r3, #36	; 0x24
 80084de:	001a      	movs	r2, r3
 80084e0:	2100      	movs	r1, #0
 80084e2:	f01b f8f3 	bl	80236cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084e6:	003b      	movs	r3, r7
 80084e8:	0018      	movs	r0, r3
 80084ea:	230c      	movs	r3, #12
 80084ec:	001a      	movs	r2, r3
 80084ee:	2100      	movs	r1, #0
 80084f0:	f01b f8ec 	bl	80236cc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80084f4:	4b25      	ldr	r3, [pc, #148]	; (800858c <MX_TIM3_Init+0xbc>)
 80084f6:	4a26      	ldr	r2, [pc, #152]	; (8008590 <MX_TIM3_Init+0xc0>)
 80084f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80084fa:	4b24      	ldr	r3, [pc, #144]	; (800858c <MX_TIM3_Init+0xbc>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008500:	4b22      	ldr	r3, [pc, #136]	; (800858c <MX_TIM3_Init+0xbc>)
 8008502:	2200      	movs	r2, #0
 8008504:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008506:	4b21      	ldr	r3, [pc, #132]	; (800858c <MX_TIM3_Init+0xbc>)
 8008508:	4a22      	ldr	r2, [pc, #136]	; (8008594 <MX_TIM3_Init+0xc4>)
 800850a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800850c:	4b1f      	ldr	r3, [pc, #124]	; (800858c <MX_TIM3_Init+0xbc>)
 800850e:	2200      	movs	r2, #0
 8008510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008512:	4b1e      	ldr	r3, [pc, #120]	; (800858c <MX_TIM3_Init+0xbc>)
 8008514:	2280      	movs	r2, #128	; 0x80
 8008516:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008518:	0021      	movs	r1, r4
 800851a:	187b      	adds	r3, r7, r1
 800851c:	2203      	movs	r2, #3
 800851e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008520:	187b      	adds	r3, r7, r1
 8008522:	2200      	movs	r2, #0
 8008524:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008526:	187b      	adds	r3, r7, r1
 8008528:	2201      	movs	r2, #1
 800852a:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800852c:	187b      	adds	r3, r7, r1
 800852e:	2200      	movs	r2, #0
 8008530:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 12;
 8008532:	187b      	adds	r3, r7, r1
 8008534:	220c      	movs	r2, #12
 8008536:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008538:	187b      	adds	r3, r7, r1
 800853a:	2200      	movs	r2, #0
 800853c:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800853e:	187b      	adds	r3, r7, r1
 8008540:	2201      	movs	r2, #1
 8008542:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008544:	187b      	adds	r3, r7, r1
 8008546:	2200      	movs	r2, #0
 8008548:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 12;
 800854a:	187b      	adds	r3, r7, r1
 800854c:	220c      	movs	r2, #12
 800854e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8008550:	187a      	adds	r2, r7, r1
 8008552:	4b0e      	ldr	r3, [pc, #56]	; (800858c <MX_TIM3_Init+0xbc>)
 8008554:	0011      	movs	r1, r2
 8008556:	0018      	movs	r0, r3
 8008558:	f006 ffbe 	bl	800f4d8 <HAL_TIM_Encoder_Init>
 800855c:	1e03      	subs	r3, r0, #0
 800855e:	d001      	beq.n	8008564 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8008560:	f000 fb2a 	bl	8008bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008564:	003b      	movs	r3, r7
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800856a:	003b      	movs	r3, r7
 800856c:	2200      	movs	r2, #0
 800856e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008570:	003a      	movs	r2, r7
 8008572:	4b06      	ldr	r3, [pc, #24]	; (800858c <MX_TIM3_Init+0xbc>)
 8008574:	0011      	movs	r1, r2
 8008576:	0018      	movs	r0, r3
 8008578:	f007 fc70 	bl	800fe5c <HAL_TIMEx_MasterConfigSynchronization>
 800857c:	1e03      	subs	r3, r0, #0
 800857e:	d001      	beq.n	8008584 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008580:	f000 fb1a 	bl	8008bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008584:	46c0      	nop			; (mov r8, r8)
 8008586:	46bd      	mov	sp, r7
 8008588:	b00d      	add	sp, #52	; 0x34
 800858a:	bd90      	pop	{r4, r7, pc}
 800858c:	20000484 	.word	0x20000484
 8008590:	40000400 	.word	0x40000400
 8008594:	0000ffff 	.word	0x0000ffff

08008598 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800859e:	2310      	movs	r3, #16
 80085a0:	18fb      	adds	r3, r7, r3
 80085a2:	0018      	movs	r0, r3
 80085a4:	2310      	movs	r3, #16
 80085a6:	001a      	movs	r2, r3
 80085a8:	2100      	movs	r1, #0
 80085aa:	f01b f88f 	bl	80236cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085ae:	1d3b      	adds	r3, r7, #4
 80085b0:	0018      	movs	r0, r3
 80085b2:	230c      	movs	r3, #12
 80085b4:	001a      	movs	r2, r3
 80085b6:	2100      	movs	r1, #0
 80085b8:	f01b f888 	bl	80236cc <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80085bc:	4b1e      	ldr	r3, [pc, #120]	; (8008638 <MX_TIM4_Init+0xa0>)
 80085be:	4a1f      	ldr	r2, [pc, #124]	; (800863c <MX_TIM4_Init+0xa4>)
 80085c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80085c2:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <MX_TIM4_Init+0xa0>)
 80085c4:	223f      	movs	r2, #63	; 0x3f
 80085c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085c8:	4b1b      	ldr	r3, [pc, #108]	; (8008638 <MX_TIM4_Init+0xa0>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80085ce:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <MX_TIM4_Init+0xa0>)
 80085d0:	2263      	movs	r2, #99	; 0x63
 80085d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085d4:	4b18      	ldr	r3, [pc, #96]	; (8008638 <MX_TIM4_Init+0xa0>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085da:	4b17      	ldr	r3, [pc, #92]	; (8008638 <MX_TIM4_Init+0xa0>)
 80085dc:	2200      	movs	r2, #0
 80085de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80085e0:	4b15      	ldr	r3, [pc, #84]	; (8008638 <MX_TIM4_Init+0xa0>)
 80085e2:	0018      	movs	r0, r3
 80085e4:	f006 fe64 	bl	800f2b0 <HAL_TIM_Base_Init>
 80085e8:	1e03      	subs	r3, r0, #0
 80085ea:	d001      	beq.n	80085f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80085ec:	f000 fae4 	bl	8008bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085f0:	2110      	movs	r1, #16
 80085f2:	187b      	adds	r3, r7, r1
 80085f4:	2280      	movs	r2, #128	; 0x80
 80085f6:	0152      	lsls	r2, r2, #5
 80085f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80085fa:	187a      	adds	r2, r7, r1
 80085fc:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <MX_TIM4_Init+0xa0>)
 80085fe:	0011      	movs	r1, r2
 8008600:	0018      	movs	r0, r3
 8008602:	f007 f9dd 	bl	800f9c0 <HAL_TIM_ConfigClockSource>
 8008606:	1e03      	subs	r3, r0, #0
 8008608:	d001      	beq.n	800860e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800860a:	f000 fad5 	bl	8008bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800860e:	1d3b      	adds	r3, r7, #4
 8008610:	2220      	movs	r2, #32
 8008612:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008614:	1d3b      	adds	r3, r7, #4
 8008616:	2200      	movs	r2, #0
 8008618:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800861a:	1d3a      	adds	r2, r7, #4
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <MX_TIM4_Init+0xa0>)
 800861e:	0011      	movs	r1, r2
 8008620:	0018      	movs	r0, r3
 8008622:	f007 fc1b 	bl	800fe5c <HAL_TIMEx_MasterConfigSynchronization>
 8008626:	1e03      	subs	r3, r0, #0
 8008628:	d001      	beq.n	800862e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800862a:	f000 fac5 	bl	8008bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	46bd      	mov	sp, r7
 8008632:	b008      	add	sp, #32
 8008634:	bd80      	pop	{r7, pc}
 8008636:	46c0      	nop			; (mov r8, r8)
 8008638:	200004d0 	.word	0x200004d0
 800863c:	40000800 	.word	0x40000800

08008640 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8008646:	1d3b      	adds	r3, r7, #4
 8008648:	0018      	movs	r0, r3
 800864a:	2314      	movs	r3, #20
 800864c:	001a      	movs	r2, r3
 800864e:	2100      	movs	r1, #0
 8008650:	f01b f83c 	bl	80236cc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8008654:	2020      	movs	r0, #32
 8008656:	f7ff fc49 	bl	8007eec <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_LPTIM2_IRQn, 3);
 800865a:	2103      	movs	r1, #3
 800865c:	2012      	movs	r0, #18
 800865e:	f7ff f9b7 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8008662:	2012      	movs	r0, #18
 8008664:	f7ff f99a 	bl	800799c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 63999;
 8008668:	1d3b      	adds	r3, r7, #4
 800866a:	4a12      	ldr	r2, [pc, #72]	; (80086b4 <MX_TIM7_Init+0x74>)
 800866c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	2200      	movs	r2, #0
 8008672:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 200;
 8008674:	1d3b      	adds	r3, r7, #4
 8008676:	22c8      	movs	r2, #200	; 0xc8
 8008678:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800867a:	1d3b      	adds	r3, r7, #4
 800867c:	4a0e      	ldr	r2, [pc, #56]	; (80086b8 <MX_TIM7_Init+0x78>)
 800867e:	0019      	movs	r1, r3
 8008680:	0010      	movs	r0, r2
 8008682:	f008 f975 	bl	8010970 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8008686:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <MX_TIM7_Init+0x78>)
 8008688:	0018      	movs	r0, r3
 800868a:	f7ff fc00 	bl	8007e8e <LL_TIM_EnableARRPreload>
  LL_TIM_SetOnePulseMode(TIM7, LL_TIM_ONEPULSEMODE_SINGLE);
 800868e:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <MX_TIM7_Init+0x78>)
 8008690:	2108      	movs	r1, #8
 8008692:	0018      	movs	r0, r3
 8008694:	f7ff fbe9 	bl	8007e6a <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8008698:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <MX_TIM7_Init+0x78>)
 800869a:	2100      	movs	r1, #0
 800869c:	0018      	movs	r0, r3
 800869e:	f7ff fc04 	bl	8007eaa <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <MX_TIM7_Init+0x78>)
 80086a4:	0018      	movs	r0, r3
 80086a6:	f7ff fc12 	bl	8007ece <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	46bd      	mov	sp, r7
 80086ae:	b006      	add	sp, #24
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	fffff9ff 	.word	0xfffff9ff
 80086b8:	40001400 	.word	0x40001400

080086bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80086c2:	1d3b      	adds	r3, r7, #4
 80086c4:	0018      	movs	r0, r3
 80086c6:	2314      	movs	r3, #20
 80086c8:	001a      	movs	r2, r3
 80086ca:	2100      	movs	r1, #0
 80086cc:	f01a fffe 	bl	80236cc <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM14);
 80086d0:	2380      	movs	r3, #128	; 0x80
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	0018      	movs	r0, r3
 80086d6:	f7ff fc1f 	bl	8007f18 <LL_APB2_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM14_IRQn, 3);
 80086da:	2103      	movs	r1, #3
 80086dc:	2013      	movs	r0, #19
 80086de:	f7ff f977 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM14_IRQn);
 80086e2:	2013      	movs	r0, #19
 80086e4:	f7ff f95a 	bl	800799c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 63999;
 80086e8:	1d3b      	adds	r3, r7, #4
 80086ea:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <MX_TIM14_Init+0x6c>)
 80086ec:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80086ee:	1d3b      	adds	r3, r7, #4
 80086f0:	2200      	movs	r2, #0
 80086f2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 5;
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	2205      	movs	r2, #5
 80086f8:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80086fa:	1d3b      	adds	r3, r7, #4
 80086fc:	2200      	movs	r2, #0
 80086fe:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8008700:	1d3b      	adds	r3, r7, #4
 8008702:	4a0a      	ldr	r2, [pc, #40]	; (800872c <MX_TIM14_Init+0x70>)
 8008704:	0019      	movs	r1, r3
 8008706:	0010      	movs	r0, r2
 8008708:	f008 f932 	bl	8010970 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM14);
 800870c:	4b07      	ldr	r3, [pc, #28]	; (800872c <MX_TIM14_Init+0x70>)
 800870e:	0018      	movs	r0, r3
 8008710:	f7ff fbbd 	bl	8007e8e <LL_TIM_EnableARRPreload>
  LL_TIM_SetOnePulseMode(TIM14, LL_TIM_ONEPULSEMODE_SINGLE);
 8008714:	4b05      	ldr	r3, [pc, #20]	; (800872c <MX_TIM14_Init+0x70>)
 8008716:	2108      	movs	r1, #8
 8008718:	0018      	movs	r0, r3
 800871a:	f7ff fba6 	bl	8007e6a <LL_TIM_SetOnePulseMode>
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	46bd      	mov	sp, r7
 8008722:	b006      	add	sp, #24
 8008724:	bd80      	pop	{r7, pc}
 8008726:	46c0      	nop			; (mov r8, r8)
 8008728:	fffff9ff 	.word	0xfffff9ff
 800872c:	40002000 	.word	0x40002000

08008730 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008736:	003b      	movs	r3, r7
 8008738:	0018      	movs	r0, r3
 800873a:	2318      	movs	r3, #24
 800873c:	001a      	movs	r2, r3
 800873e:	2100      	movs	r1, #0
 8008740:	f01a ffc4 	bl	80236cc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8008744:	2380      	movs	r3, #128	; 0x80
 8008746:	049b      	lsls	r3, r3, #18
 8008748:	0018      	movs	r0, r3
 800874a:	f7ff fbcf 	bl	8007eec <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 800874e:	2002      	movs	r0, #2
 8008750:	f7ff fbf8 	bl	8007f44 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8008754:	2001      	movs	r0, #1
 8008756:	f7ff fbf5 	bl	8007f44 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800875a:	003b      	movs	r3, r7
 800875c:	2280      	movs	r2, #128	; 0x80
 800875e:	0212      	lsls	r2, r2, #8
 8008760:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008762:	003b      	movs	r3, r7
 8008764:	2203      	movs	r2, #3
 8008766:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008768:	003b      	movs	r3, r7
 800876a:	2200      	movs	r2, #0
 800876c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800876e:	003b      	movs	r3, r7
 8008770:	4a40      	ldr	r2, [pc, #256]	; (8008874 <MX_UCPD1_Init+0x144>)
 8008772:	0019      	movs	r1, r3
 8008774:	0010      	movs	r0, r2
 8008776:	f007 fdc5 	bl	8010304 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800877a:	003b      	movs	r3, r7
 800877c:	2280      	movs	r2, #128	; 0x80
 800877e:	0052      	lsls	r2, r2, #1
 8008780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008782:	003b      	movs	r3, r7
 8008784:	2203      	movs	r2, #3
 8008786:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008788:	003b      	movs	r3, r7
 800878a:	2200      	movs	r2, #0
 800878c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800878e:	003a      	movs	r2, r7
 8008790:	23a0      	movs	r3, #160	; 0xa0
 8008792:	05db      	lsls	r3, r3, #23
 8008794:	0011      	movs	r1, r2
 8008796:	0018      	movs	r0, r3
 8008798:	f007 fdb4 	bl	8010304 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 800879c:	4b36      	ldr	r3, [pc, #216]	; (8008878 <MX_UCPD1_Init+0x148>)
 800879e:	223a      	movs	r2, #58	; 0x3a
 80087a0:	2100      	movs	r1, #0
 80087a2:	0018      	movs	r0, r3
 80087a4:	f7ff fa86 	bl	8007cb4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80087a8:	4b33      	ldr	r3, [pc, #204]	; (8008878 <MX_UCPD1_Init+0x148>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	2100      	movs	r1, #0
 80087ae:	0018      	movs	r0, r3
 80087b0:	f7ff f97c 	bl	8007aac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80087b4:	4b30      	ldr	r3, [pc, #192]	; (8008878 <MX_UCPD1_Init+0x148>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7ff fa54 	bl	8007c68 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80087c0:	4b2d      	ldr	r3, [pc, #180]	; (8008878 <MX_UCPD1_Init+0x148>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	2100      	movs	r1, #0
 80087c6:	0018      	movs	r0, r3
 80087c8:	f7ff f996 	bl	8007af8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80087cc:	4b2a      	ldr	r3, [pc, #168]	; (8008878 <MX_UCPD1_Init+0x148>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	0018      	movs	r0, r3
 80087d4:	f7ff f9b4 	bl	8007b40 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80087d8:	4b27      	ldr	r3, [pc, #156]	; (8008878 <MX_UCPD1_Init+0x148>)
 80087da:	2280      	movs	r2, #128	; 0x80
 80087dc:	2100      	movs	r1, #0
 80087de:	0018      	movs	r0, r3
 80087e0:	f7ff f9d2 	bl	8007b88 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80087e4:	4b24      	ldr	r3, [pc, #144]	; (8008878 <MX_UCPD1_Init+0x148>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7ff f9f0 	bl	8007bd0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80087f0:	4b21      	ldr	r3, [pc, #132]	; (8008878 <MX_UCPD1_Init+0x148>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	2100      	movs	r1, #0
 80087f6:	0018      	movs	r0, r3
 80087f8:	f7ff fa10 	bl	8007c1c <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 80087fc:	4b1e      	ldr	r3, [pc, #120]	; (8008878 <MX_UCPD1_Init+0x148>)
 80087fe:	223b      	movs	r2, #59	; 0x3b
 8008800:	2101      	movs	r1, #1
 8008802:	0018      	movs	r0, r3
 8008804:	f7ff fa56 	bl	8007cb4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8008808:	4b1b      	ldr	r3, [pc, #108]	; (8008878 <MX_UCPD1_Init+0x148>)
 800880a:	2210      	movs	r2, #16
 800880c:	2101      	movs	r1, #1
 800880e:	0018      	movs	r0, r3
 8008810:	f7ff f94c 	bl	8007aac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8008814:	4b18      	ldr	r3, [pc, #96]	; (8008878 <MX_UCPD1_Init+0x148>)
 8008816:	2200      	movs	r2, #0
 8008818:	2101      	movs	r1, #1
 800881a:	0018      	movs	r0, r3
 800881c:	f7ff fa24 	bl	8007c68 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8008820:	4b15      	ldr	r3, [pc, #84]	; (8008878 <MX_UCPD1_Init+0x148>)
 8008822:	2200      	movs	r2, #0
 8008824:	2101      	movs	r1, #1
 8008826:	0018      	movs	r0, r3
 8008828:	f7ff f966 	bl	8007af8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800882c:	4b12      	ldr	r3, [pc, #72]	; (8008878 <MX_UCPD1_Init+0x148>)
 800882e:	2200      	movs	r2, #0
 8008830:	2101      	movs	r1, #1
 8008832:	0018      	movs	r0, r3
 8008834:	f7ff f984 	bl	8007b40 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8008838:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <MX_UCPD1_Init+0x148>)
 800883a:	2280      	movs	r2, #128	; 0x80
 800883c:	2101      	movs	r1, #1
 800883e:	0018      	movs	r0, r3
 8008840:	f7ff f9a2 	bl	8007b88 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8008844:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <MX_UCPD1_Init+0x148>)
 8008846:	2200      	movs	r2, #0
 8008848:	2101      	movs	r1, #1
 800884a:	0018      	movs	r0, r3
 800884c:	f7ff f9c0 	bl	8007bd0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8008850:	4b09      	ldr	r3, [pc, #36]	; (8008878 <MX_UCPD1_Init+0x148>)
 8008852:	2200      	movs	r2, #0
 8008854:	2101      	movs	r1, #1
 8008856:	0018      	movs	r0, r3
 8008858:	f7ff f9e0 	bl	8007c1c <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 3);
 800885c:	2103      	movs	r1, #3
 800885e:	2008      	movs	r0, #8
 8008860:	f7ff f8b6 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8008864:	2008      	movs	r0, #8
 8008866:	f7ff f899 	bl	800799c <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800886a:	46c0      	nop			; (mov r8, r8)
 800886c:	46bd      	mov	sp, r7
 800886e:	b006      	add	sp, #24
 8008870:	bd80      	pop	{r7, pc}
 8008872:	46c0      	nop			; (mov r8, r8)
 8008874:	50000400 	.word	0x50000400
 8008878:	40020000 	.word	0x40020000

0800887c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008882:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <MX_DMA_Init+0x54>)
 8008884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008886:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <MX_DMA_Init+0x54>)
 8008888:	2101      	movs	r1, #1
 800888a:	430a      	orrs	r2, r1
 800888c:	639a      	str	r2, [r3, #56]	; 0x38
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <MX_DMA_Init+0x54>)
 8008890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008892:	2201      	movs	r2, #1
 8008894:	4013      	ands	r3, r2
 8008896:	607b      	str	r3, [r7, #4]
 8008898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 3);
 800889a:	2103      	movs	r1, #3
 800889c:	2009      	movs	r0, #9
 800889e:	f7ff f897 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80088a2:	2009      	movs	r0, #9
 80088a4:	f7ff f87a 	bl	800799c <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3);
 80088a8:	2103      	movs	r1, #3
 80088aa:	200a      	movs	r0, #10
 80088ac:	f7ff f890 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80088b0:	200a      	movs	r0, #10
 80088b2:	f7ff f873 	bl	800799c <__NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 3, 0);
 80088b6:	2200      	movs	r2, #0
 80088b8:	2103      	movs	r1, #3
 80088ba:	200b      	movs	r0, #11
 80088bc:	f002 fb9c 	bl	800aff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 80088c0:	200b      	movs	r0, #11
 80088c2:	f002 fbae 	bl	800b022 <HAL_NVIC_EnableIRQ>

}
 80088c6:	46c0      	nop			; (mov r8, r8)
 80088c8:	46bd      	mov	sp, r7
 80088ca:	b002      	add	sp, #8
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	46c0      	nop			; (mov r8, r8)
 80088d0:	40021000 	.word	0x40021000

080088d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80088d4:	b590      	push	{r4, r7, lr}
 80088d6:	b08b      	sub	sp, #44	; 0x2c
 80088d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088da:	2414      	movs	r4, #20
 80088dc:	193b      	adds	r3, r7, r4
 80088de:	0018      	movs	r0, r3
 80088e0:	2314      	movs	r3, #20
 80088e2:	001a      	movs	r2, r3
 80088e4:	2100      	movs	r1, #0
 80088e6:	f01a fef1 	bl	80236cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ea:	4b81      	ldr	r3, [pc, #516]	; (8008af0 <MX_GPIO_Init+0x21c>)
 80088ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088ee:	4b80      	ldr	r3, [pc, #512]	; (8008af0 <MX_GPIO_Init+0x21c>)
 80088f0:	2101      	movs	r1, #1
 80088f2:	430a      	orrs	r2, r1
 80088f4:	635a      	str	r2, [r3, #52]	; 0x34
 80088f6:	4b7e      	ldr	r3, [pc, #504]	; (8008af0 <MX_GPIO_Init+0x21c>)
 80088f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fa:	2201      	movs	r2, #1
 80088fc:	4013      	ands	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]
 8008900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008902:	4b7b      	ldr	r3, [pc, #492]	; (8008af0 <MX_GPIO_Init+0x21c>)
 8008904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008906:	4b7a      	ldr	r3, [pc, #488]	; (8008af0 <MX_GPIO_Init+0x21c>)
 8008908:	2104      	movs	r1, #4
 800890a:	430a      	orrs	r2, r1
 800890c:	635a      	str	r2, [r3, #52]	; 0x34
 800890e:	4b78      	ldr	r3, [pc, #480]	; (8008af0 <MX_GPIO_Init+0x21c>)
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	2204      	movs	r2, #4
 8008914:	4013      	ands	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800891a:	4b75      	ldr	r3, [pc, #468]	; (8008af0 <MX_GPIO_Init+0x21c>)
 800891c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800891e:	4b74      	ldr	r3, [pc, #464]	; (8008af0 <MX_GPIO_Init+0x21c>)
 8008920:	2102      	movs	r1, #2
 8008922:	430a      	orrs	r2, r1
 8008924:	635a      	str	r2, [r3, #52]	; 0x34
 8008926:	4b72      	ldr	r3, [pc, #456]	; (8008af0 <MX_GPIO_Init+0x21c>)
 8008928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892a:	2202      	movs	r2, #2
 800892c:	4013      	ands	r3, r2
 800892e:	60bb      	str	r3, [r7, #8]
 8008930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008932:	4b6f      	ldr	r3, [pc, #444]	; (8008af0 <MX_GPIO_Init+0x21c>)
 8008934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008936:	4b6e      	ldr	r3, [pc, #440]	; (8008af0 <MX_GPIO_Init+0x21c>)
 8008938:	2108      	movs	r1, #8
 800893a:	430a      	orrs	r2, r1
 800893c:	635a      	str	r2, [r3, #52]	; 0x34
 800893e:	4b6c      	ldr	r3, [pc, #432]	; (8008af0 <MX_GPIO_Init+0x21c>)
 8008940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008942:	2208      	movs	r2, #8
 8008944:	4013      	ands	r3, r2
 8008946:	607b      	str	r3, [r7, #4]
 8008948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_LOCK_Pin|RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 800894a:	2384      	movs	r3, #132	; 0x84
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	4869      	ldr	r0, [pc, #420]	; (8008af4 <MX_GPIO_Init+0x220>)
 8008950:	2200      	movs	r2, #0
 8008952:	0019      	movs	r1, r3
 8008954:	f003 fb74 	bl	800c040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB_OUT_Pin|CS_MAX7219_Pin|LED_USER_Pin, GPIO_PIN_RESET);
 8008958:	4967      	ldr	r1, [pc, #412]	; (8008af8 <MX_GPIO_Init+0x224>)
 800895a:	4b68      	ldr	r3, [pc, #416]	; (8008afc <MX_GPIO_Init+0x228>)
 800895c:	2200      	movs	r2, #0
 800895e:	0018      	movs	r0, r3
 8008960:	f003 fb6e 	bl	800c040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
 8008964:	2380      	movs	r3, #128	; 0x80
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	4864      	ldr	r0, [pc, #400]	; (8008afc <MX_GPIO_Init+0x228>)
 800896a:	2201      	movs	r2, #1
 800896c:	0019      	movs	r1, r3
 800896e:	f003 fb67 	bl	800c040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HighZ_Pin FLT_IN_TCPP_Pin */
  GPIO_InitStruct.Pin = HighZ_Pin|FLT_IN_TCPP_Pin;
 8008972:	193b      	adds	r3, r7, r4
 8008974:	2203      	movs	r2, #3
 8008976:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008978:	193b      	adds	r3, r7, r4
 800897a:	2200      	movs	r2, #0
 800897c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800897e:	193b      	adds	r3, r7, r4
 8008980:	2200      	movs	r2, #0
 8008982:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008984:	193a      	adds	r2, r7, r4
 8008986:	23a0      	movs	r3, #160	; 0xa0
 8008988:	05db      	lsls	r3, r3, #23
 800898a:	0011      	movs	r1, r2
 800898c:	0018      	movs	r0, r3
 800898e:	f003 f9eb 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_DEBUG_BTN_Pin */
  GPIO_InitStruct.Pin = SW2_DEBUG_BTN_Pin;
 8008992:	0021      	movs	r1, r4
 8008994:	187b      	adds	r3, r7, r1
 8008996:	2210      	movs	r2, #16
 8008998:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800899a:	187b      	adds	r3, r7, r1
 800899c:	2284      	movs	r2, #132	; 0x84
 800899e:	0392      	lsls	r2, r2, #14
 80089a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a2:	000c      	movs	r4, r1
 80089a4:	193b      	adds	r3, r7, r4
 80089a6:	2200      	movs	r2, #0
 80089a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW2_DEBUG_BTN_GPIO_Port, &GPIO_InitStruct);
 80089aa:	193b      	adds	r3, r7, r4
 80089ac:	4a51      	ldr	r2, [pc, #324]	; (8008af4 <MX_GPIO_Init+0x220>)
 80089ae:	0019      	movs	r1, r3
 80089b0:	0010      	movs	r0, r2
 80089b2:	f003 f9d9 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_LOCK_Pin */
  GPIO_InitStruct.Pin = LED_LOCK_Pin;
 80089b6:	193b      	adds	r3, r7, r4
 80089b8:	2220      	movs	r2, #32
 80089ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089bc:	193b      	adds	r3, r7, r4
 80089be:	2201      	movs	r2, #1
 80089c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089c2:	193b      	adds	r3, r7, r4
 80089c4:	2201      	movs	r2, #1
 80089c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089c8:	193b      	adds	r3, r7, r4
 80089ca:	2200      	movs	r2, #0
 80089cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_LOCK_GPIO_Port, &GPIO_InitStruct);
 80089ce:	193b      	adds	r3, r7, r4
 80089d0:	4a48      	ldr	r2, [pc, #288]	; (8008af4 <MX_GPIO_Init+0x220>)
 80089d2:	0019      	movs	r1, r3
 80089d4:	0010      	movs	r0, r2
 80089d6:	f003 f9c7 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB_OUT_Pin LED_USER_Pin */
  GPIO_InitStruct.Pin = DB_OUT_Pin|LED_USER_Pin;
 80089da:	193b      	adds	r3, r7, r4
 80089dc:	2221      	movs	r2, #33	; 0x21
 80089de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089e0:	193b      	adds	r3, r7, r4
 80089e2:	2201      	movs	r2, #1
 80089e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089e6:	193b      	adds	r3, r7, r4
 80089e8:	2201      	movs	r2, #1
 80089ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089ec:	193b      	adds	r3, r7, r4
 80089ee:	2200      	movs	r2, #0
 80089f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089f2:	193b      	adds	r3, r7, r4
 80089f4:	4a41      	ldr	r2, [pc, #260]	; (8008afc <MX_GPIO_Init+0x228>)
 80089f6:	0019      	movs	r1, r3
 80089f8:	0010      	movs	r0, r2
 80089fa:	f003 f9b5 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_OFF_ON_Pin SW1_TOGGLE_I_V_Pin OCP_ALERT_Pin OCP_ALERT2_Pin */
  GPIO_InitStruct.Pin = SW3_OFF_ON_Pin|SW1_TOGGLE_I_V_Pin|OCP_ALERT_Pin|OCP_ALERT2_Pin;
 80089fe:	0021      	movs	r1, r4
 8008a00:	187b      	adds	r3, r7, r1
 8008a02:	22c6      	movs	r2, #198	; 0xc6
 8008a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008a06:	187b      	adds	r3, r7, r1
 8008a08:	2284      	movs	r2, #132	; 0x84
 8008a0a:	0392      	lsls	r2, r2, #14
 8008a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a0e:	187b      	adds	r3, r7, r1
 8008a10:	2200      	movs	r2, #0
 8008a12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a14:	000c      	movs	r4, r1
 8008a16:	187b      	adds	r3, r7, r1
 8008a18:	4a38      	ldr	r2, [pc, #224]	; (8008afc <MX_GPIO_Init+0x228>)
 8008a1a:	0019      	movs	r1, r3
 8008a1c:	0010      	movs	r0, r2
 8008a1e:	f003 f9a3 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_MAX7219_Pin OCP_RESET_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin|OCP_RESET_Pin;
 8008a22:	0021      	movs	r1, r4
 8008a24:	187b      	adds	r3, r7, r1
 8008a26:	2288      	movs	r2, #136	; 0x88
 8008a28:	0152      	lsls	r2, r2, #5
 8008a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a2c:	000c      	movs	r4, r1
 8008a2e:	193b      	adds	r3, r7, r4
 8008a30:	2201      	movs	r2, #1
 8008a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a34:	193b      	adds	r3, r7, r4
 8008a36:	2200      	movs	r2, #0
 8008a38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a3a:	193b      	adds	r3, r7, r4
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a40:	193b      	adds	r3, r7, r4
 8008a42:	4a2e      	ldr	r2, [pc, #184]	; (8008afc <MX_GPIO_Init+0x228>)
 8008a44:	0019      	movs	r1, r3
 8008a46:	0010      	movs	r0, r2
 8008a48:	f003 f98e 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_TOGGLE_UNITS_Pin */
  GPIO_InitStruct.Pin = ENC_TOGGLE_UNITS_Pin;
 8008a4c:	0021      	movs	r1, r4
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	2280      	movs	r2, #128	; 0x80
 8008a52:	0052      	lsls	r2, r2, #1
 8008a54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008a56:	187b      	adds	r3, r7, r1
 8008a58:	2284      	movs	r2, #132	; 0x84
 8008a5a:	0392      	lsls	r2, r2, #14
 8008a5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a5e:	000c      	movs	r4, r1
 8008a60:	193b      	adds	r3, r7, r4
 8008a62:	2200      	movs	r2, #0
 8008a64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_TOGGLE_UNITS_GPIO_Port, &GPIO_InitStruct);
 8008a66:	193b      	adds	r3, r7, r4
 8008a68:	4a25      	ldr	r2, [pc, #148]	; (8008b00 <MX_GPIO_Init+0x22c>)
 8008a6a:	0019      	movs	r1, r3
 8008a6c:	0010      	movs	r0, r2
 8008a6e:	f003 f97b 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CC2_G4_Pin */
  GPIO_InitStruct.Pin = CC2_G4_Pin;
 8008a72:	193b      	adds	r3, r7, r4
 8008a74:	2210      	movs	r2, #16
 8008a76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a78:	193b      	adds	r3, r7, r4
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7e:	193b      	adds	r3, r7, r4
 8008a80:	2200      	movs	r2, #0
 8008a82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CC2_G4_GPIO_Port, &GPIO_InitStruct);
 8008a84:	193b      	adds	r3, r7, r4
 8008a86:	4a1d      	ldr	r2, [pc, #116]	; (8008afc <MX_GPIO_Init+0x228>)
 8008a88:	0019      	movs	r1, r3
 8008a8a:	0010      	movs	r0, r2
 8008a8c:	f003 f96c 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_ON_OFF_Pin */
  GPIO_InitStruct.Pin = RELAY_ON_OFF_Pin;
 8008a90:	0021      	movs	r1, r4
 8008a92:	187b      	adds	r3, r7, r1
 8008a94:	2280      	movs	r2, #128	; 0x80
 8008a96:	00d2      	lsls	r2, r2, #3
 8008a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a9a:	187b      	adds	r3, r7, r1
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa0:	187b      	adds	r3, r7, r1
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aa6:	187b      	adds	r3, r7, r1
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RELAY_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8008aac:	187b      	adds	r3, r7, r1
 8008aae:	4a11      	ldr	r2, [pc, #68]	; (8008af4 <MX_GPIO_Init+0x220>)
 8008ab0:	0019      	movs	r1, r3
 8008ab2:	0010      	movs	r0, r2
 8008ab4:	f003 f958 	bl	800bd68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2103      	movs	r1, #3
 8008abc:	2005      	movs	r0, #5
 8008abe:	f002 fa9b 	bl	800aff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8008ac2:	2005      	movs	r0, #5
 8008ac4:	f002 faad 	bl	800b022 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2103      	movs	r1, #3
 8008acc:	2006      	movs	r0, #6
 8008ace:	f002 fa93 	bl	800aff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8008ad2:	2006      	movs	r0, #6
 8008ad4:	f002 faa5 	bl	800b022 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2103      	movs	r1, #3
 8008adc:	2007      	movs	r0, #7
 8008ade:	f002 fa8b 	bl	800aff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8008ae2:	2007      	movs	r0, #7
 8008ae4:	f002 fa9d 	bl	800b022 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008ae8:	46c0      	nop			; (mov r8, r8)
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b00b      	add	sp, #44	; 0x2c
 8008aee:	bd90      	pop	{r4, r7, pc}
 8008af0:	40021000 	.word	0x40021000
 8008af4:	50000800 	.word	0x50000800
 8008af8:	00001021 	.word	0x00001021
 8008afc:	50000400 	.word	0x50000400
 8008b00:	50000c00 	.word	0x50000c00

08008b04 <HAL_GPIO_EXTI_Falling_Callback>:
* @brief EXTI line detection callbacks
* @param GPIO_Pin Specifies the pins connected EXTI line
* @retval None
*/
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008b04:	b590      	push	{r4, r7, lr}
 8008b06:	b099      	sub	sp, #100	; 0x64
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	0002      	movs	r2, r0
 8008b0c:	1dbb      	adds	r3, r7, #6
 8008b0e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == SW2_DEBUG_BTN_Pin) /* Will display in trace the VBUS value when user button
 8008b10:	1dbb      	adds	r3, r7, #6
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	d128      	bne.n	8008b6a <HAL_GPIO_EXTI_Falling_Callback+0x66>
		//HAL_GPIO_TogglePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin);
		//Get Voltage level into TRACE
		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));*/

		char _str2[60];
		uint32_t voltage = BSP_PWR_VBUSGetVoltage(0);
 8008b18:	2000      	movs	r0, #0
 8008b1a:	f013 fd3d 	bl	801c598 <BSP_PWR_VBUSGetVoltage>
 8008b1e:	0003      	movs	r3, r0
 8008b20:	657b      	str	r3, [r7, #84]	; 0x54
		uint32_t current= BSP_PWR_VBUSGetCurrent(0);
 8008b22:	2000      	movs	r0, #0
 8008b24:	f013 fd4a 	bl	801c5bc <BSP_PWR_VBUSGetCurrent>
 8008b28:	0003      	movs	r3, r0
 8008b2a:	653b      	str	r3, [r7, #80]	; 0x50
		uint32_t currentOCP= BSP_PWR_VBUSGetCurrentOCP(0);
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f013 fe5d 	bl	801c7ec <BSP_PWR_VBUSGetCurrentOCP>
 8008b32:	0003      	movs	r3, r0
 8008b34:	64fb      	str	r3, [r7, #76]	; 0x4c

		// Use snprintf to limit the number of characters written
		int len = snprintf(_str2, sizeof(_str2), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltage, current, currentOCP);
 8008b36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b38:	4a0e      	ldr	r2, [pc, #56]	; (8008b74 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8008b3a:	240c      	movs	r4, #12
 8008b3c:	1938      	adds	r0, r7, r4
 8008b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	000b      	movs	r3, r1
 8008b48:	213c      	movs	r1, #60	; 0x3c
 8008b4a:	f01a fd6b 	bl	8023624 <sniprintf>
 8008b4e:	0003      	movs	r3, r0
 8008b50:	64bb      	str	r3, [r7, #72]	; 0x48

		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str2, strlen(_str2));
 8008b52:	193b      	adds	r3, r7, r4
 8008b54:	0018      	movs	r0, r3
 8008b56:	f7fd fb39 	bl	80061cc <strlen>
 8008b5a:	0002      	movs	r2, r0
 8008b5c:	193b      	adds	r3, r7, r4
 8008b5e:	9200      	str	r2, [sp, #0]
 8008b60:	2200      	movs	r2, #0
 8008b62:	2100      	movs	r1, #0
 8008b64:	2006      	movs	r0, #6
 8008b66:	f009 ff4b 	bl	8012a00 <USBPD_TRACE_Add>
				}
			}**/

	}

}
 8008b6a:	46c0      	nop			; (mov r8, r8)
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	b017      	add	sp, #92	; 0x5c
 8008b70:	bd90      	pop	{r4, r7, pc}
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	080240e8 	.word	0x080240e8

08008b78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008b80:	2001      	movs	r0, #1
 8008b82:	f00f fa71 	bl	8018068 <osDelay>
    app_loop();
 8008b86:	f7fd fea5 	bl	80068d4 <app_loop>
    osDelay(1);
 8008b8a:	e7f9      	b.n	8008b80 <StartDefaultTask+0x8>

08008b8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a06      	ldr	r2, [pc, #24]	; (8008bb4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d101      	bne.n	8008ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008b9e:	f000 fbfd 	bl	800939c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  USBPD_DPM_TimerCounter(); //related to PD device manager
 8008ba2:	f012 f897 	bl	801acd4 <USBPD_DPM_TimerCounter>
  GUI_TimerCounter(); //updating a graphical user interface (GUI) based on timer events.
 8008ba6:	f016 fdf9 	bl	801f79c <GUI_TimerCounter>
  /* USER CODE END Callback 1 */
}
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b002      	add	sp, #8
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	46c0      	nop			; (mov r8, r8)
 8008bb4:	40001000 	.word	0x40001000

08008bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008bbc:	b672      	cpsid	i
}
 8008bbe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008bc0:	e7fe      	b.n	8008bc0 <Error_Handler+0x8>
	...

08008bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bca:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <HAL_MspInit+0x5c>)
 8008bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bce:	4b14      	ldr	r3, [pc, #80]	; (8008c20 <HAL_MspInit+0x5c>)
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8008bd6:	4b12      	ldr	r3, [pc, #72]	; (8008c20 <HAL_MspInit+0x5c>)
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	2201      	movs	r2, #1
 8008bdc:	4013      	ands	r3, r2
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008be2:	4b0f      	ldr	r3, [pc, #60]	; (8008c20 <HAL_MspInit+0x5c>)
 8008be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008be6:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <HAL_MspInit+0x5c>)
 8008be8:	2180      	movs	r1, #128	; 0x80
 8008bea:	0549      	lsls	r1, r1, #21
 8008bec:	430a      	orrs	r2, r1
 8008bee:	63da      	str	r2, [r3, #60]	; 0x3c
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <HAL_MspInit+0x5c>)
 8008bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bf4:	2380      	movs	r3, #128	; 0x80
 8008bf6:	055b      	lsls	r3, r3, #21
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	603b      	str	r3, [r7, #0]
 8008bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8008bfe:	2302      	movs	r3, #2
 8008c00:	425b      	negs	r3, r3
 8008c02:	2200      	movs	r2, #0
 8008c04:	2103      	movs	r1, #3
 8008c06:	0018      	movs	r0, r3
 8008c08:	f002 f9f6 	bl	800aff8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8008c0c:	23c0      	movs	r3, #192	; 0xc0
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	0018      	movs	r0, r3
 8008c12:	f000 fc03 	bl	800941c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	b002      	add	sp, #8
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	40021000 	.word	0x40021000

08008c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008c24:	b590      	push	{r4, r7, lr}
 8008c26:	b08b      	sub	sp, #44	; 0x2c
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c2c:	2414      	movs	r4, #20
 8008c2e:	193b      	adds	r3, r7, r4
 8008c30:	0018      	movs	r0, r3
 8008c32:	2314      	movs	r3, #20
 8008c34:	001a      	movs	r2, r3
 8008c36:	2100      	movs	r1, #0
 8008c38:	f01a fd48 	bl	80236cc <memset>
  if(hadc->Instance==ADC1)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a31      	ldr	r2, [pc, #196]	; (8008d08 <HAL_ADC_MspInit+0xe4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d15c      	bne.n	8008d00 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008c46:	4b31      	ldr	r3, [pc, #196]	; (8008d0c <HAL_ADC_MspInit+0xe8>)
 8008c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c4a:	4b30      	ldr	r3, [pc, #192]	; (8008d0c <HAL_ADC_MspInit+0xe8>)
 8008c4c:	2180      	movs	r1, #128	; 0x80
 8008c4e:	0349      	lsls	r1, r1, #13
 8008c50:	430a      	orrs	r2, r1
 8008c52:	641a      	str	r2, [r3, #64]	; 0x40
 8008c54:	4b2d      	ldr	r3, [pc, #180]	; (8008d0c <HAL_ADC_MspInit+0xe8>)
 8008c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c58:	2380      	movs	r3, #128	; 0x80
 8008c5a:	035b      	lsls	r3, r3, #13
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c62:	4b2a      	ldr	r3, [pc, #168]	; (8008d0c <HAL_ADC_MspInit+0xe8>)
 8008c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c66:	4b29      	ldr	r3, [pc, #164]	; (8008d0c <HAL_ADC_MspInit+0xe8>)
 8008c68:	2101      	movs	r1, #1
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8008c6e:	4b27      	ldr	r3, [pc, #156]	; (8008d0c <HAL_ADC_MspInit+0xe8>)
 8008c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c72:	2201      	movs	r2, #1
 8008c74:	4013      	ands	r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VSENSE_Pin|OCP_ADC_I_Pin|ISENSE_Pin;
 8008c7a:	193b      	adds	r3, r7, r4
 8008c7c:	22e0      	movs	r2, #224	; 0xe0
 8008c7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c80:	193b      	adds	r3, r7, r4
 8008c82:	2203      	movs	r2, #3
 8008c84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c86:	193b      	adds	r3, r7, r4
 8008c88:	2200      	movs	r2, #0
 8008c8a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c8c:	193a      	adds	r2, r7, r4
 8008c8e:	23a0      	movs	r3, #160	; 0xa0
 8008c90:	05db      	lsls	r3, r3, #23
 8008c92:	0011      	movs	r1, r2
 8008c94:	0018      	movs	r0, r3
 8008c96:	f003 f867 	bl	800bd68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8008c9a:	4b1d      	ldr	r3, [pc, #116]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008c9c:	4a1d      	ldr	r2, [pc, #116]	; (8008d14 <HAL_ADC_MspInit+0xf0>)
 8008c9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008ca0:	4b1b      	ldr	r3, [pc, #108]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008ca2:	2205      	movs	r2, #5
 8008ca4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ca6:	4b1a      	ldr	r3, [pc, #104]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cac:	4b18      	ldr	r3, [pc, #96]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008cb2:	4b17      	ldr	r3, [pc, #92]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008cb4:	2280      	movs	r2, #128	; 0x80
 8008cb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008cb8:	4b15      	ldr	r3, [pc, #84]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008cba:	2280      	movs	r2, #128	; 0x80
 8008cbc:	0052      	lsls	r2, r2, #1
 8008cbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008cc0:	4b13      	ldr	r3, [pc, #76]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008cc2:	2280      	movs	r2, #128	; 0x80
 8008cc4:	00d2      	lsls	r2, r2, #3
 8008cc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008cc8:	4b11      	ldr	r3, [pc, #68]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008cca:	2220      	movs	r2, #32
 8008ccc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008cce:	4b10      	ldr	r3, [pc, #64]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f002 fbf4 	bl	800b4c4 <HAL_DMA_Init>
 8008cdc:	1e03      	subs	r3, r0, #0
 8008cde:	d001      	beq.n	8008ce4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8008ce0:	f7ff ff6a 	bl	8008bb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a0a      	ldr	r2, [pc, #40]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008ce8:	651a      	str	r2, [r3, #80]	; 0x50
 8008cea:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <HAL_ADC_MspInit+0xec>)
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2103      	movs	r1, #3
 8008cf4:	200c      	movs	r0, #12
 8008cf6:	f002 f97f 	bl	800aff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8008cfa:	200c      	movs	r0, #12
 8008cfc:	f002 f991 	bl	800b022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008d00:	46c0      	nop			; (mov r8, r8)
 8008d02:	46bd      	mov	sp, r7
 8008d04:	b00b      	add	sp, #44	; 0x2c
 8008d06:	bd90      	pop	{r4, r7, pc}
 8008d08:	40012400 	.word	0x40012400
 8008d0c:	40021000 	.word	0x40021000
 8008d10:	200003ac 	.word	0x200003ac
 8008d14:	40020044 	.word	0x40020044

08008d18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008d18:	b590      	push	{r4, r7, lr}
 8008d1a:	b08b      	sub	sp, #44	; 0x2c
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d20:	2414      	movs	r4, #20
 8008d22:	193b      	adds	r3, r7, r4
 8008d24:	0018      	movs	r0, r3
 8008d26:	2314      	movs	r3, #20
 8008d28:	001a      	movs	r2, r3
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	f01a fcce 	bl	80236cc <memset>
  if(hdac->Instance==DAC1)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a1c      	ldr	r2, [pc, #112]	; (8008da8 <HAL_DAC_MspInit+0x90>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d131      	bne.n	8008d9e <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8008d3a:	4b1c      	ldr	r3, [pc, #112]	; (8008dac <HAL_DAC_MspInit+0x94>)
 8008d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d3e:	4b1b      	ldr	r3, [pc, #108]	; (8008dac <HAL_DAC_MspInit+0x94>)
 8008d40:	2180      	movs	r1, #128	; 0x80
 8008d42:	0589      	lsls	r1, r1, #22
 8008d44:	430a      	orrs	r2, r1
 8008d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d48:	4b18      	ldr	r3, [pc, #96]	; (8008dac <HAL_DAC_MspInit+0x94>)
 8008d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d4c:	2380      	movs	r3, #128	; 0x80
 8008d4e:	059b      	lsls	r3, r3, #22
 8008d50:	4013      	ands	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d56:	4b15      	ldr	r3, [pc, #84]	; (8008dac <HAL_DAC_MspInit+0x94>)
 8008d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d5a:	4b14      	ldr	r3, [pc, #80]	; (8008dac <HAL_DAC_MspInit+0x94>)
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	635a      	str	r2, [r3, #52]	; 0x34
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <HAL_DAC_MspInit+0x94>)
 8008d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d66:	2201      	movs	r2, #1
 8008d68:	4013      	ands	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = OCP_DAC_LIMIT_Pin;
 8008d6e:	193b      	adds	r3, r7, r4
 8008d70:	2210      	movs	r2, #16
 8008d72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008d74:	193b      	adds	r3, r7, r4
 8008d76:	2203      	movs	r2, #3
 8008d78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d7a:	193b      	adds	r3, r7, r4
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(OCP_DAC_LIMIT_GPIO_Port, &GPIO_InitStruct);
 8008d80:	193a      	adds	r2, r7, r4
 8008d82:	23a0      	movs	r3, #160	; 0xa0
 8008d84:	05db      	lsls	r3, r3, #23
 8008d86:	0011      	movs	r1, r2
 8008d88:	0018      	movs	r0, r3
 8008d8a:	f002 ffed 	bl	800bd68 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 3, 0);
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2103      	movs	r1, #3
 8008d92:	2011      	movs	r0, #17
 8008d94:	f002 f930 	bl	800aff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8008d98:	2011      	movs	r0, #17
 8008d9a:	f002 f942 	bl	800b022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	46bd      	mov	sp, r7
 8008da2:	b00b      	add	sp, #44	; 0x2c
 8008da4:	bd90      	pop	{r4, r7, pc}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	40007400 	.word	0x40007400
 8008dac:	40021000 	.word	0x40021000

08008db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008db0:	b590      	push	{r4, r7, lr}
 8008db2:	b08b      	sub	sp, #44	; 0x2c
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db8:	2414      	movs	r4, #20
 8008dba:	193b      	adds	r3, r7, r4
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	2314      	movs	r3, #20
 8008dc0:	001a      	movs	r2, r3
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	f01a fc82 	bl	80236cc <memset>
  if(hspi->Instance==SPI2)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a1b      	ldr	r2, [pc, #108]	; (8008e3c <HAL_SPI_MspInit+0x8c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d130      	bne.n	8008e34 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008dd2:	4b1b      	ldr	r3, [pc, #108]	; (8008e40 <HAL_SPI_MspInit+0x90>)
 8008dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dd6:	4b1a      	ldr	r3, [pc, #104]	; (8008e40 <HAL_SPI_MspInit+0x90>)
 8008dd8:	2180      	movs	r1, #128	; 0x80
 8008dda:	01c9      	lsls	r1, r1, #7
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	63da      	str	r2, [r3, #60]	; 0x3c
 8008de0:	4b17      	ldr	r3, [pc, #92]	; (8008e40 <HAL_SPI_MspInit+0x90>)
 8008de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008de4:	2380      	movs	r3, #128	; 0x80
 8008de6:	01db      	lsls	r3, r3, #7
 8008de8:	4013      	ands	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dee:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <HAL_SPI_MspInit+0x90>)
 8008df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008df2:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <HAL_SPI_MspInit+0x90>)
 8008df4:	2102      	movs	r1, #2
 8008df6:	430a      	orrs	r2, r1
 8008df8:	635a      	str	r2, [r3, #52]	; 0x34
 8008dfa:	4b11      	ldr	r3, [pc, #68]	; (8008e40 <HAL_SPI_MspInit+0x90>)
 8008dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfe:	2202      	movs	r2, #2
 8008e00:	4013      	ands	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB11     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008e06:	193b      	adds	r3, r7, r4
 8008e08:	22a0      	movs	r2, #160	; 0xa0
 8008e0a:	0192      	lsls	r2, r2, #6
 8008e0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e0e:	0021      	movs	r1, r4
 8008e10:	187b      	adds	r3, r7, r1
 8008e12:	2202      	movs	r2, #2
 8008e14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e16:	187b      	adds	r3, r7, r1
 8008e18:	2200      	movs	r2, #0
 8008e1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e1c:	187b      	adds	r3, r7, r1
 8008e1e:	2200      	movs	r2, #0
 8008e20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8008e22:	187b      	adds	r3, r7, r1
 8008e24:	2200      	movs	r2, #0
 8008e26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e28:	187b      	adds	r3, r7, r1
 8008e2a:	4a06      	ldr	r2, [pc, #24]	; (8008e44 <HAL_SPI_MspInit+0x94>)
 8008e2c:	0019      	movs	r1, r3
 8008e2e:	0010      	movs	r0, r2
 8008e30:	f002 ff9a 	bl	800bd68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008e34:	46c0      	nop			; (mov r8, r8)
 8008e36:	46bd      	mov	sp, r7
 8008e38:	b00b      	add	sp, #44	; 0x2c
 8008e3a:	bd90      	pop	{r4, r7, pc}
 8008e3c:	40003800 	.word	0x40003800
 8008e40:	40021000 	.word	0x40021000
 8008e44:	50000400 	.word	0x50000400

08008e48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b08b      	sub	sp, #44	; 0x2c
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e50:	2414      	movs	r4, #20
 8008e52:	193b      	adds	r3, r7, r4
 8008e54:	0018      	movs	r0, r3
 8008e56:	2314      	movs	r3, #20
 8008e58:	001a      	movs	r2, r3
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	f01a fc36 	bl	80236cc <memset>
  if(htim_encoder->Instance==TIM3)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1e      	ldr	r2, [pc, #120]	; (8008ee0 <HAL_TIM_Encoder_MspInit+0x98>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d135      	bne.n	8008ed6 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008e6a:	4b1e      	ldr	r3, [pc, #120]	; (8008ee4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e6e:	4b1d      	ldr	r3, [pc, #116]	; (8008ee4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e70:	2102      	movs	r1, #2
 8008e72:	430a      	orrs	r2, r1
 8008e74:	63da      	str	r2, [r3, #60]	; 0x3c
 8008e76:	4b1b      	ldr	r3, [pc, #108]	; (8008ee4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e82:	4b18      	ldr	r3, [pc, #96]	; (8008ee4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e86:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e88:	2104      	movs	r1, #4
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8008e8e:	4b15      	ldr	r3, [pc, #84]	; (8008ee4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	2204      	movs	r2, #4
 8008e94:	4013      	ands	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM3_CH1_Pin|ENC_TIM3_CH2_Pin;
 8008e9a:	0021      	movs	r1, r4
 8008e9c:	187b      	adds	r3, r7, r1
 8008e9e:	22c0      	movs	r2, #192	; 0xc0
 8008ea0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ea2:	187b      	adds	r3, r7, r1
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea8:	187b      	adds	r3, r7, r1
 8008eaa:	2200      	movs	r2, #0
 8008eac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eae:	187b      	adds	r3, r7, r1
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8008eb4:	187b      	adds	r3, r7, r1
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008eba:	187b      	adds	r3, r7, r1
 8008ebc:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008ebe:	0019      	movs	r1, r3
 8008ec0:	0010      	movs	r0, r2
 8008ec2:	f002 ff51 	bl	800bd68 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 3, 0);
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2103      	movs	r1, #3
 8008eca:	2010      	movs	r0, #16
 8008ecc:	f002 f894 	bl	800aff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8008ed0:	2010      	movs	r0, #16
 8008ed2:	f002 f8a6 	bl	800b022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008ed6:	46c0      	nop			; (mov r8, r8)
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	b00b      	add	sp, #44	; 0x2c
 8008edc:	bd90      	pop	{r4, r7, pc}
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	40000400 	.word	0x40000400
 8008ee4:	40021000 	.word	0x40021000
 8008ee8:	50000800 	.word	0x50000800

08008eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a0d      	ldr	r2, [pc, #52]	; (8008f30 <HAL_TIM_Base_MspInit+0x44>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d113      	bne.n	8008f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008efe:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <HAL_TIM_Base_MspInit+0x48>)
 8008f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f02:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <HAL_TIM_Base_MspInit+0x48>)
 8008f04:	2104      	movs	r1, #4
 8008f06:	430a      	orrs	r2, r1
 8008f08:	63da      	str	r2, [r3, #60]	; 0x3c
 8008f0a:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <HAL_TIM_Base_MspInit+0x48>)
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0e:	2204      	movs	r2, #4
 8008f10:	4013      	ands	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 3, 0);
 8008f16:	2200      	movs	r2, #0
 8008f18:	2103      	movs	r1, #3
 8008f1a:	2010      	movs	r0, #16
 8008f1c:	f002 f86c 	bl	800aff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8008f20:	2010      	movs	r0, #16
 8008f22:	f002 f87e 	bl	800b022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008f26:	46c0      	nop			; (mov r8, r8)
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	b004      	add	sp, #16
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	46c0      	nop			; (mov r8, r8)
 8008f30:	40000800 	.word	0x40000800
 8008f34:	40021000 	.word	0x40021000

08008f38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f38:	b5b0      	push	{r4, r5, r7, lr}
 8008f3a:	b08c      	sub	sp, #48	; 0x30
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8008f40:	232b      	movs	r3, #43	; 0x2b
 8008f42:	18fb      	adds	r3, r7, r3
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008f48:	4b37      	ldr	r3, [pc, #220]	; (8009028 <HAL_InitTick+0xf0>)
 8008f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f4c:	4b36      	ldr	r3, [pc, #216]	; (8009028 <HAL_InitTick+0xf0>)
 8008f4e:	2110      	movs	r1, #16
 8008f50:	430a      	orrs	r2, r1
 8008f52:	63da      	str	r2, [r3, #60]	; 0x3c
 8008f54:	4b34      	ldr	r3, [pc, #208]	; (8009028 <HAL_InitTick+0xf0>)
 8008f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f58:	2210      	movs	r2, #16
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	60bb      	str	r3, [r7, #8]
 8008f5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008f60:	230c      	movs	r3, #12
 8008f62:	18fa      	adds	r2, r7, r3
 8008f64:	2410      	movs	r4, #16
 8008f66:	193b      	adds	r3, r7, r4
 8008f68:	0011      	movs	r1, r2
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	f005 fbac 	bl	800e6c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008f70:	193b      	adds	r3, r7, r4
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d104      	bne.n	8008f86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008f7c:	f005 fb8e 	bl	800e69c <HAL_RCC_GetPCLK1Freq>
 8008f80:	0003      	movs	r3, r0
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f84:	e004      	b.n	8008f90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008f86:	f005 fb89 	bl	800e69c <HAL_RCC_GetPCLK1Freq>
 8008f8a:	0003      	movs	r3, r0
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	4926      	ldr	r1, [pc, #152]	; (800902c <HAL_InitTick+0xf4>)
 8008f94:	0018      	movs	r0, r3
 8008f96:	f7fd f92b 	bl	80061f0 <__udivsi3>
 8008f9a:	0003      	movs	r3, r0
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008fa0:	4b23      	ldr	r3, [pc, #140]	; (8009030 <HAL_InitTick+0xf8>)
 8008fa2:	4a24      	ldr	r2, [pc, #144]	; (8009034 <HAL_InitTick+0xfc>)
 8008fa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008fa6:	4b22      	ldr	r3, [pc, #136]	; (8009030 <HAL_InitTick+0xf8>)
 8008fa8:	4a23      	ldr	r2, [pc, #140]	; (8009038 <HAL_InitTick+0x100>)
 8008faa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008fac:	4b20      	ldr	r3, [pc, #128]	; (8009030 <HAL_InitTick+0xf8>)
 8008fae:	6a3a      	ldr	r2, [r7, #32]
 8008fb0:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8008fb2:	4b1f      	ldr	r3, [pc, #124]	; (8009030 <HAL_InitTick+0xf8>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fb8:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <HAL_InitTick+0xf8>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fbe:	4b1c      	ldr	r3, [pc, #112]	; (8009030 <HAL_InitTick+0xf8>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008fc4:	252b      	movs	r5, #43	; 0x2b
 8008fc6:	197c      	adds	r4, r7, r5
 8008fc8:	4b19      	ldr	r3, [pc, #100]	; (8009030 <HAL_InitTick+0xf8>)
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f006 f970 	bl	800f2b0 <HAL_TIM_Base_Init>
 8008fd0:	0003      	movs	r3, r0
 8008fd2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8008fd4:	197b      	adds	r3, r7, r5
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d11e      	bne.n	800901a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008fdc:	197c      	adds	r4, r7, r5
 8008fde:	4b14      	ldr	r3, [pc, #80]	; (8009030 <HAL_InitTick+0xf8>)
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	f006 fa17 	bl	800f414 <HAL_TIM_Base_Start_IT>
 8008fe6:	0003      	movs	r3, r0
 8008fe8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8008fea:	197b      	adds	r3, r7, r5
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d113      	bne.n	800901a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8008ff2:	2011      	movs	r0, #17
 8008ff4:	f002 f815 	bl	800b022 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d809      	bhi.n	8009012 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	0019      	movs	r1, r3
 8009004:	2011      	movs	r0, #17
 8009006:	f001 fff7 	bl	800aff8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800900a:	4b0c      	ldr	r3, [pc, #48]	; (800903c <HAL_InitTick+0x104>)
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	601a      	str	r2, [r3, #0]
 8009010:	e003      	b.n	800901a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8009012:	232b      	movs	r3, #43	; 0x2b
 8009014:	18fb      	adds	r3, r7, r3
 8009016:	2201      	movs	r2, #1
 8009018:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800901a:	232b      	movs	r3, #43	; 0x2b
 800901c:	18fb      	adds	r3, r7, r3
 800901e:	781b      	ldrb	r3, [r3, #0]
}
 8009020:	0018      	movs	r0, r3
 8009022:	46bd      	mov	sp, r7
 8009024:	b00c      	add	sp, #48	; 0x30
 8009026:	bdb0      	pop	{r4, r5, r7, pc}
 8009028:	40021000 	.word	0x40021000
 800902c:	000f4240 	.word	0x000f4240
 8009030:	20000520 	.word	0x20000520
 8009034:	40001000 	.word	0x40001000
 8009038:	000003e7 	.word	0x000003e7
 800903c:	2000005c 	.word	0x2000005c

08009040 <LL_TIM_ClearFlag_UPDATE>:
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2202      	movs	r2, #2
 800904c:	4252      	negs	r2, r2
 800904e:	611a      	str	r2, [r3, #16]
}
 8009050:	46c0      	nop			; (mov r8, r8)
 8009052:	46bd      	mov	sp, r7
 8009054:	b002      	add	sp, #8
 8009056:	bd80      	pop	{r7, pc}

08009058 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	2201      	movs	r2, #1
 8009066:	4013      	ands	r3, r2
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800906c:	2301      	movs	r3, #1
 800906e:	e000      	b.n	8009072 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8009070:	2300      	movs	r3, #0
}
 8009072:	0018      	movs	r0, r3
 8009074:	46bd      	mov	sp, r7
 8009076:	b002      	add	sp, #8
 8009078:	bd80      	pop	{r7, pc}

0800907a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800907e:	e7fe      	b.n	800907e <NMI_Handler+0x4>

08009080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009084:	e7fe      	b.n	8009084 <HardFault_Handler+0x4>
	...

08009088 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(SW3_OFF_ON_Pin) != RESET){
 800908c:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <EXTI0_1_IRQHandler+0x34>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	2202      	movs	r2, #2
 8009092:	4013      	ands	r3, r2
 8009094:	d104      	bne.n	80090a0 <EXTI0_1_IRQHandler+0x18>
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <EXTI0_1_IRQHandler+0x34>)
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	2202      	movs	r2, #2
 800909c:	4013      	ands	r3, r2
 800909e:	d001      	beq.n	80090a4 <EXTI0_1_IRQHandler+0x1c>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e000      	b.n	80090a6 <EXTI0_1_IRQHandler+0x1e>
 80090a4:	2300      	movs	r3, #0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <EXTI0_1_IRQHandler+0x26>
	  sw3_on_off_isr();
 80090aa:	f7fd ff23 	bl	8006ef4 <sw3_on_off_isr>
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_OFF_ON_Pin);
 80090ae:	2002      	movs	r0, #2
 80090b0:	f002 fffe 	bl	800c0b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80090b4:	46c0      	nop			; (mov r8, r8)
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	40021800 	.word	0x40021800

080090c0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(SW1_TOGGLE_I_V_Pin) != RESET){
 80090c4:	4b0b      	ldr	r3, [pc, #44]	; (80090f4 <EXTI2_3_IRQHandler+0x34>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	2204      	movs	r2, #4
 80090ca:	4013      	ands	r3, r2
 80090cc:	d104      	bne.n	80090d8 <EXTI2_3_IRQHandler+0x18>
 80090ce:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <EXTI2_3_IRQHandler+0x34>)
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2204      	movs	r2, #4
 80090d4:	4013      	ands	r3, r2
 80090d6:	d001      	beq.n	80090dc <EXTI2_3_IRQHandler+0x1c>
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <EXTI2_3_IRQHandler+0x1e>
 80090dc:	2300      	movs	r3, #0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <EXTI2_3_IRQHandler+0x26>
	  sw1_toggle_i_v_isr();
 80090e2:	f7fd ff75 	bl	8006fd0 <sw1_toggle_i_v_isr>
  }

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_TOGGLE_I_V_Pin);
 80090e6:	2004      	movs	r0, #4
 80090e8:	f002 ffe2 	bl	800c0b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80090ec:	46c0      	nop			; (mov r8, r8)
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	40021800 	.word	0x40021800

080090f8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(ENC_TOGGLE_UNITS_Pin) != RESET){
 80090fc:	4b26      	ldr	r3, [pc, #152]	; (8009198 <EXTI4_15_IRQHandler+0xa0>)
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	2380      	movs	r3, #128	; 0x80
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	4013      	ands	r3, r2
 8009106:	d105      	bne.n	8009114 <EXTI4_15_IRQHandler+0x1c>
 8009108:	4b23      	ldr	r3, [pc, #140]	; (8009198 <EXTI4_15_IRQHandler+0xa0>)
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	2380      	movs	r3, #128	; 0x80
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	4013      	ands	r3, r2
 8009112:	d001      	beq.n	8009118 <EXTI4_15_IRQHandler+0x20>
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <EXTI4_15_IRQHandler+0x22>
 8009118:	2300      	movs	r3, #0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <EXTI4_15_IRQHandler+0x2a>
	  enc_toggle_units_isr();
 800911e:	f7fd fdfb 	bl	8006d18 <enc_toggle_units_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(SW2_DEBUG_BTN_Pin) != RESET){
 8009122:	4b1d      	ldr	r3, [pc, #116]	; (8009198 <EXTI4_15_IRQHandler+0xa0>)
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	2210      	movs	r2, #16
 8009128:	4013      	ands	r3, r2
 800912a:	d104      	bne.n	8009136 <EXTI4_15_IRQHandler+0x3e>
 800912c:	4b1a      	ldr	r3, [pc, #104]	; (8009198 <EXTI4_15_IRQHandler+0xa0>)
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	2210      	movs	r2, #16
 8009132:	4013      	ands	r3, r2
 8009134:	d001      	beq.n	800913a <EXTI4_15_IRQHandler+0x42>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <EXTI4_15_IRQHandler+0x44>
 800913a:	2300      	movs	r3, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <EXTI4_15_IRQHandler+0x4c>
	  sw2_lock_isr();
 8009140:	f7fd ffb8 	bl	80070b4 <sw2_lock_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(OCP_ALERT_Pin) != RESET){
 8009144:	4b14      	ldr	r3, [pc, #80]	; (8009198 <EXTI4_15_IRQHandler+0xa0>)
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2240      	movs	r2, #64	; 0x40
 800914a:	4013      	ands	r3, r2
 800914c:	d104      	bne.n	8009158 <EXTI4_15_IRQHandler+0x60>
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <EXTI4_15_IRQHandler+0xa0>)
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2240      	movs	r2, #64	; 0x40
 8009154:	4013      	ands	r3, r2
 8009156:	d001      	beq.n	800915c <EXTI4_15_IRQHandler+0x64>
 8009158:	2301      	movs	r3, #1
 800915a:	e000      	b.n	800915e <EXTI4_15_IRQHandler+0x66>
 800915c:	2300      	movs	r3, #0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <EXTI4_15_IRQHandler+0x6e>
	  ocp_alert_isr();
 8009162:	f7fe f82d 	bl	80071c0 <ocp_alert_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(OCP_ALERT2_Pin) != RESET){
 8009166:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <EXTI4_15_IRQHandler+0xa0>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	2280      	movs	r2, #128	; 0x80
 800916c:	4013      	ands	r3, r2
 800916e:	d101      	bne.n	8009174 <EXTI4_15_IRQHandler+0x7c>
 8009170:	4b09      	ldr	r3, [pc, #36]	; (8009198 <EXTI4_15_IRQHandler+0xa0>)
 8009172:	691b      	ldr	r3, [r3, #16]
	  //ocp_alert_isr();
  }
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_DEBUG_BTN_Pin);
 8009174:	2010      	movs	r0, #16
 8009176:	f002 ff9b 	bl	800c0b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OCP_ALERT_Pin);
 800917a:	2040      	movs	r0, #64	; 0x40
 800917c:	f002 ff98 	bl	800c0b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OCP_ALERT2_Pin);
 8009180:	2080      	movs	r0, #128	; 0x80
 8009182:	f002 ff95 	bl	800c0b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_TOGGLE_UNITS_Pin);
 8009186:	2380      	movs	r3, #128	; 0x80
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	0018      	movs	r0, r3
 800918c:	f002 ff90 	bl	800c0b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8009190:	46c0      	nop			; (mov r8, r8)
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	46c0      	nop			; (mov r8, r8)
 8009198:	40021800 	.word	0x40021800

0800919c <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80091a0:	4b04      	ldr	r3, [pc, #16]	; (80091b4 <USB_UCPD1_2_IRQHandler+0x18>)
 80091a2:	0018      	movs	r0, r3
 80091a4:	f003 f93e 	bl	800c424 <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 80091a8:	f00a fc6e 	bl	8013a88 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 80091ac:	46c0      	nop			; (mov r8, r8)
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	20004470 	.word	0x20004470

080091b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80091bc:	46c0      	nop			; (mov r8, r8)
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  TRACER_EMB_IRQHandlerDMA();
 80091c6:	f019 f993 	bl	80224f0 <TRACER_EMB_IRQHandlerDMA>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80091d4:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x14>)
 80091d6:	0018      	movs	r0, r3
 80091d8:	f002 faa6 	bl	800b728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 80091dc:	46c0      	nop			; (mov r8, r8)
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	200003ac 	.word	0x200003ac

080091e8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80091ec:	4b03      	ldr	r3, [pc, #12]	; (80091fc <ADC1_COMP_IRQHandler+0x14>)
 80091ee:	0018      	movs	r0, r3
 80091f0:	f000 fd98 	bl	8009d24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80091f4:	46c0      	nop			; (mov r8, r8)
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	46c0      	nop			; (mov r8, r8)
 80091fc:	20000348 	.word	0x20000348

08009200 <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */
  encoder_turn_isr();
 8009204:	f7fd fd3a 	bl	8006c7c <encoder_turn_isr>
  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009208:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <TIM3_TIM4_IRQHandler+0x34>)
 800920a:	0018      	movs	r0, r3
 800920c:	f006 fad0 	bl	800f7b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim4);
 8009210:	4b09      	ldr	r3, [pc, #36]	; (8009238 <TIM3_TIM4_IRQHandler+0x38>)
 8009212:	0018      	movs	r0, r3
 8009214:	f006 facc 	bl	800f7b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */
  /* Check if TIM4 update interrupt occurred */
  if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 8009218:	4b08      	ldr	r3, [pc, #32]	; (800923c <TIM3_TIM4_IRQHandler+0x3c>)
 800921a:	0018      	movs	r0, r3
 800921c:	f7ff ff1c 	bl	8009058 <LL_TIM_IsActiveFlag_UPDATE>
 8009220:	1e03      	subs	r3, r0, #0
 8009222:	d003      	beq.n	800922c <TIM3_TIM4_IRQHandler+0x2c>
  {
	  LL_TIM_ClearFlag_UPDATE(TIM4);
 8009224:	4b05      	ldr	r3, [pc, #20]	; (800923c <TIM3_TIM4_IRQHandler+0x3c>)
 8009226:	0018      	movs	r0, r3
 8009228:	f7ff ff0a 	bl	8009040 <LL_TIM_ClearFlag_UPDATE>
  }
  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 800922c:	46c0      	nop			; (mov r8, r8)
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	46c0      	nop			; (mov r8, r8)
 8009234:	20000484 	.word	0x20000484
 8009238:	200004d0 	.word	0x200004d0
 800923c:	40000800 	.word	0x40000800

08009240 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <TIM6_DAC_LPTIM1_IRQHandler+0x1c>)
 8009246:	0018      	movs	r0, r3
 8009248:	f006 fab2 	bl	800f7b0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800924c:	4b04      	ldr	r3, [pc, #16]	; (8009260 <TIM6_DAC_LPTIM1_IRQHandler+0x20>)
 800924e:	0018      	movs	r0, r3
 8009250:	f001 ff74 	bl	800b13c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8009254:	46c0      	nop			; (mov r8, r8)
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	46c0      	nop			; (mov r8, r8)
 800925c:	20000520 	.word	0x20000520
 8009260:	2000040c 	.word	0x2000040c

08009264 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
  tim7_btn_isr();
 8009268:	f7fd fe04 	bl	8006e74 <tim7_btn_isr>
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */

  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 800926c:	46c0      	nop			; (mov r8, r8)
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
  tim14_isr();
 8009276:	f7fd fe23 	bl	8006ec0 <tim14_isr>
  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  TRACER_EMB_IRQHandlerUSART();
 8009284:	f019 f93b 	bl	80224fe <TRACER_EMB_IRQHandlerUSART>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8009288:	46c0      	nop			; (mov r8, r8)
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009298:	4a14      	ldr	r2, [pc, #80]	; (80092ec <_sbrk+0x5c>)
 800929a:	4b15      	ldr	r3, [pc, #84]	; (80092f0 <_sbrk+0x60>)
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80092a4:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <_sbrk+0x64>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80092ac:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <_sbrk+0x64>)
 80092ae:	4a12      	ldr	r2, [pc, #72]	; (80092f8 <_sbrk+0x68>)
 80092b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80092b2:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <_sbrk+0x64>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	18d3      	adds	r3, r2, r3
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d207      	bcs.n	80092d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80092c0:	f01a fa7c 	bl	80237bc <__errno>
 80092c4:	0003      	movs	r3, r0
 80092c6:	220c      	movs	r2, #12
 80092c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80092ca:	2301      	movs	r3, #1
 80092cc:	425b      	negs	r3, r3
 80092ce:	e009      	b.n	80092e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80092d0:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <_sbrk+0x64>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80092d6:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <_sbrk+0x64>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	18d2      	adds	r2, r2, r3
 80092de:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <_sbrk+0x64>)
 80092e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80092e2:	68fb      	ldr	r3, [r7, #12]
}
 80092e4:	0018      	movs	r0, r3
 80092e6:	46bd      	mov	sp, r7
 80092e8:	b006      	add	sp, #24
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20024000 	.word	0x20024000
 80092f0:	00000400 	.word	0x00000400
 80092f4:	2000056c 	.word	0x2000056c
 80092f8:	20005180 	.word	0x20005180

080092fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009300:	46c0      	nop			; (mov r8, r8)
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009308:	480d      	ldr	r0, [pc, #52]	; (8009340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800930a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800930c:	f7ff fff6 	bl	80092fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009310:	480c      	ldr	r0, [pc, #48]	; (8009344 <LoopForever+0x6>)
  ldr r1, =_edata
 8009312:	490d      	ldr	r1, [pc, #52]	; (8009348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009314:	4a0d      	ldr	r2, [pc, #52]	; (800934c <LoopForever+0xe>)
  movs r3, #0
 8009316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009318:	e002      	b.n	8009320 <LoopCopyDataInit>

0800931a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800931a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800931c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800931e:	3304      	adds	r3, #4

08009320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009324:	d3f9      	bcc.n	800931a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009326:	4a0a      	ldr	r2, [pc, #40]	; (8009350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009328:	4c0a      	ldr	r4, [pc, #40]	; (8009354 <LoopForever+0x16>)
  movs r3, #0
 800932a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800932c:	e001      	b.n	8009332 <LoopFillZerobss>

0800932e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800932e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009330:	3204      	adds	r2, #4

08009332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009334:	d3fb      	bcc.n	800932e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009336:	f01a fa47 	bl	80237c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800933a:	f7fe fe19 	bl	8007f70 <main>

0800933e <LoopForever>:

LoopForever:
  b LoopForever
 800933e:	e7fe      	b.n	800933e <LoopForever>
  ldr   r0, =_estack
 8009340:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8009344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009348:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 800934c:	080259c8 	.word	0x080259c8
  ldr r2, =_sbss
 8009350:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8009354:	20005180 	.word	0x20005180

08009358 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009358:	e7fe      	b.n	8009358 <CEC_IRQHandler>
	...

0800935c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009362:	1dfb      	adds	r3, r7, #7
 8009364:	2200      	movs	r2, #0
 8009366:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009368:	4b0b      	ldr	r3, [pc, #44]	; (8009398 <HAL_Init+0x3c>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <HAL_Init+0x3c>)
 800936e:	2180      	movs	r1, #128	; 0x80
 8009370:	0049      	lsls	r1, r1, #1
 8009372:	430a      	orrs	r2, r1
 8009374:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009376:	2003      	movs	r0, #3
 8009378:	f7ff fdde 	bl	8008f38 <HAL_InitTick>
 800937c:	1e03      	subs	r3, r0, #0
 800937e:	d003      	beq.n	8009388 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8009380:	1dfb      	adds	r3, r7, #7
 8009382:	2201      	movs	r2, #1
 8009384:	701a      	strb	r2, [r3, #0]
 8009386:	e001      	b.n	800938c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8009388:	f7ff fc1c 	bl	8008bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800938c:	1dfb      	adds	r3, r7, #7
 800938e:	781b      	ldrb	r3, [r3, #0]
}
 8009390:	0018      	movs	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	b002      	add	sp, #8
 8009396:	bd80      	pop	{r7, pc}
 8009398:	40022000 	.word	0x40022000

0800939c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <HAL_IncTick+0x1c>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	001a      	movs	r2, r3
 80093a6:	4b05      	ldr	r3, [pc, #20]	; (80093bc <HAL_IncTick+0x20>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	18d2      	adds	r2, r2, r3
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <HAL_IncTick+0x20>)
 80093ae:	601a      	str	r2, [r3, #0]
}
 80093b0:	46c0      	nop			; (mov r8, r8)
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	20000060 	.word	0x20000060
 80093bc:	20000570 	.word	0x20000570

080093c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	af00      	add	r7, sp, #0
  return uwTick;
 80093c4:	4b02      	ldr	r3, [pc, #8]	; (80093d0 <HAL_GetTick+0x10>)
 80093c6:	681b      	ldr	r3, [r3, #0]
}
 80093c8:	0018      	movs	r0, r3
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	46c0      	nop			; (mov r8, r8)
 80093d0:	20000570 	.word	0x20000570

080093d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80093dc:	f7ff fff0 	bl	80093c0 <HAL_GetTick>
 80093e0:	0003      	movs	r3, r0
 80093e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	d005      	beq.n	80093fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <HAL_Delay+0x44>)
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	001a      	movs	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	189b      	adds	r3, r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80093fa:	46c0      	nop			; (mov r8, r8)
 80093fc:	f7ff ffe0 	bl	80093c0 <HAL_GetTick>
 8009400:	0002      	movs	r2, r0
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	429a      	cmp	r2, r3
 800940a:	d8f7      	bhi.n	80093fc <HAL_Delay+0x28>
  {
  }
}
 800940c:	46c0      	nop			; (mov r8, r8)
 800940e:	46c0      	nop			; (mov r8, r8)
 8009410:	46bd      	mov	sp, r7
 8009412:	b004      	add	sp, #16
 8009414:	bd80      	pop	{r7, pc}
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	20000060 	.word	0x20000060

0800941c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8009424:	4b06      	ldr	r3, [pc, #24]	; (8009440 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a06      	ldr	r2, [pc, #24]	; (8009444 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800942a:	4013      	ands	r3, r2
 800942c:	0019      	movs	r1, r3
 800942e:	4b04      	ldr	r3, [pc, #16]	; (8009440 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	430a      	orrs	r2, r1
 8009434:	601a      	str	r2, [r3, #0]
}
 8009436:	46c0      	nop			; (mov r8, r8)
 8009438:	46bd      	mov	sp, r7
 800943a:	b002      	add	sp, #8
 800943c:	bd80      	pop	{r7, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	40010000 	.word	0x40010000
 8009444:	fffff9ff 	.word	0xfffff9ff

08009448 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a05      	ldr	r2, [pc, #20]	; (800946c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8009458:	401a      	ands	r2, r3
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	431a      	orrs	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	601a      	str	r2, [r3, #0]
}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	46bd      	mov	sp, r7
 8009466:	b002      	add	sp, #8
 8009468:	bd80      	pop	{r7, pc}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	fe3fffff 	.word	0xfe3fffff

08009470 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	23e0      	movs	r3, #224	; 0xe0
 800947e:	045b      	lsls	r3, r3, #17
 8009480:	4013      	ands	r3, r2
}
 8009482:	0018      	movs	r0, r3
 8009484:	46bd      	mov	sp, r7
 8009486:	b002      	add	sp, #8
 8009488:	bd80      	pop	{r7, pc}

0800948a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	2104      	movs	r1, #4
 800949e:	400a      	ands	r2, r1
 80094a0:	2107      	movs	r1, #7
 80094a2:	4091      	lsls	r1, r2
 80094a4:	000a      	movs	r2, r1
 80094a6:	43d2      	mvns	r2, r2
 80094a8:	401a      	ands	r2, r3
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2104      	movs	r1, #4
 80094ae:	400b      	ands	r3, r1
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4099      	lsls	r1, r3
 80094b4:	000b      	movs	r3, r1
 80094b6:	431a      	orrs	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80094bc:	46c0      	nop			; (mov r8, r8)
 80094be:	46bd      	mov	sp, r7
 80094c0:	b004      	add	sp, #16
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	2104      	movs	r1, #4
 80094d6:	400a      	ands	r2, r1
 80094d8:	2107      	movs	r1, #7
 80094da:	4091      	lsls	r1, r2
 80094dc:	000a      	movs	r2, r1
 80094de:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2104      	movs	r1, #4
 80094e4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80094e6:	40da      	lsrs	r2, r3
 80094e8:	0013      	movs	r3, r2
}
 80094ea:	0018      	movs	r0, r3
 80094ec:	46bd      	mov	sp, r7
 80094ee:	b002      	add	sp, #8
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68da      	ldr	r2, [r3, #12]
 80094fe:	23c0      	movs	r3, #192	; 0xc0
 8009500:	011b      	lsls	r3, r3, #4
 8009502:	4013      	ands	r3, r2
 8009504:	d101      	bne.n	800950a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009506:	2301      	movs	r3, #1
 8009508:	e000      	b.n	800950c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800950a:	2300      	movs	r3, #0
}
 800950c:	0018      	movs	r0, r3
 800950e:	46bd      	mov	sp, r7
 8009510:	b002      	add	sp, #8
 8009512:	bd80      	pop	{r7, pc}

08009514 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	211f      	movs	r1, #31
 8009528:	400a      	ands	r2, r1
 800952a:	210f      	movs	r1, #15
 800952c:	4091      	lsls	r1, r2
 800952e:	000a      	movs	r2, r1
 8009530:	43d2      	mvns	r2, r2
 8009532:	401a      	ands	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	0e9b      	lsrs	r3, r3, #26
 8009538:	210f      	movs	r1, #15
 800953a:	4019      	ands	r1, r3
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	201f      	movs	r0, #31
 8009540:	4003      	ands	r3, r0
 8009542:	4099      	lsls	r1, r3
 8009544:	000b      	movs	r3, r1
 8009546:	431a      	orrs	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800954c:	46c0      	nop			; (mov r8, r8)
 800954e:	46bd      	mov	sp, r7
 8009550:	b004      	add	sp, #16
 8009552:	bd80      	pop	{r7, pc}

08009554 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	035b      	lsls	r3, r3, #13
 8009566:	0b5b      	lsrs	r3, r3, #13
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	46bd      	mov	sp, r7
 8009572:	b002      	add	sp, #8
 8009574:	bd80      	pop	{r7, pc}

08009576 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	0352      	lsls	r2, r2, #13
 8009588:	0b52      	lsrs	r2, r2, #13
 800958a:	43d2      	mvns	r2, r2
 800958c:	401a      	ands	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009592:	46c0      	nop			; (mov r8, r8)
 8009594:	46bd      	mov	sp, r7
 8009596:	b002      	add	sp, #8
 8009598:	bd80      	pop	{r7, pc}

0800959a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	2203      	movs	r2, #3
 80095a8:	4013      	ands	r3, r2
}
 80095aa:	0018      	movs	r0, r3
 80095ac:	46bd      	mov	sp, r7
 80095ae:	b002      	add	sp, #8
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	0212      	lsls	r2, r2, #8
 80095c8:	43d2      	mvns	r2, r2
 80095ca:	401a      	ands	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	021b      	lsls	r3, r3, #8
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	400b      	ands	r3, r1
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80095d6:	400b      	ands	r3, r1
 80095d8:	431a      	orrs	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80095de:	46c0      	nop			; (mov r8, r8)
 80095e0:	46bd      	mov	sp, r7
 80095e2:	b004      	add	sp, #16
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	07ffff00 	.word	0x07ffff00

080095ec <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	4a11      	ldr	r2, [pc, #68]	; (8009640 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d103      	bne.n	8009608 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	330c      	adds	r3, #12
 8009604:	617b      	str	r3, [r7, #20]
 8009606:	e009      	b.n	800961c <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	33a0      	adds	r3, #160	; 0xa0
 800960c:	0019      	movs	r1, r3
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	0d5b      	lsrs	r3, r3, #21
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	2204      	movs	r2, #4
 8009616:	4013      	ands	r3, r2
 8009618:	18cb      	adds	r3, r1, r3
 800961a:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	4908      	ldr	r1, [pc, #32]	; (8009644 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8009624:	400a      	ands	r2, r1
 8009626:	43d2      	mvns	r2, r2
 8009628:	401a      	ands	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	400b      	ands	r3, r1
 8009630:	431a      	orrs	r2, r3
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	46bd      	mov	sp, r7
 800963a:	b006      	add	sp, #24
 800963c:	bd80      	pop	{r7, pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	7cc00000 	.word	0x7cc00000
 8009644:	7cc7ffff 	.word	0x7cc7ffff

08009648 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3320      	adds	r3, #32
 800965a:	0018      	movs	r0, r3
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	0d1b      	lsrs	r3, r3, #20
 8009660:	2203      	movs	r2, #3
 8009662:	401a      	ands	r2, r3
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	0d5b      	lsrs	r3, r3, #21
 8009668:	2101      	movs	r1, #1
 800966a:	400b      	ands	r3, r1
 800966c:	18d3      	adds	r3, r2, r3
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	18c3      	adds	r3, r0, r3
 8009672:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a06      	ldr	r2, [pc, #24]	; (8009694 <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 800967a:	401a      	ands	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	0419      	lsls	r1, r3, #16
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	430b      	orrs	r3, r1
 8009684:	431a      	orrs	r2, r3
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	46bd      	mov	sp, r7
 800968e:	b006      	add	sp, #24
 8009690:	bd80      	pop	{r7, pc}
 8009692:	46c0      	nop			; (mov r8, r8)
 8009694:	f000f000 	.word	0xf000f000

08009698 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	4a05      	ldr	r2, [pc, #20]	; (80096bc <LL_ADC_EnableInternalRegulator+0x24>)
 80096a6:	4013      	ands	r3, r2
 80096a8:	2280      	movs	r2, #128	; 0x80
 80096aa:	0552      	lsls	r2, r2, #21
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80096b2:	46c0      	nop			; (mov r8, r8)
 80096b4:	46bd      	mov	sp, r7
 80096b6:	b002      	add	sp, #8
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	46c0      	nop			; (mov r8, r8)
 80096bc:	6fffffe8 	.word	0x6fffffe8

080096c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	689a      	ldr	r2, [r3, #8]
 80096cc:	2380      	movs	r3, #128	; 0x80
 80096ce:	055b      	lsls	r3, r3, #21
 80096d0:	401a      	ands	r2, r3
 80096d2:	2380      	movs	r3, #128	; 0x80
 80096d4:	055b      	lsls	r3, r3, #21
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d101      	bne.n	80096de <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80096da:	2301      	movs	r3, #1
 80096dc:	e000      	b.n	80096e0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80096de:	2300      	movs	r3, #0
}
 80096e0:	0018      	movs	r0, r3
 80096e2:	46bd      	mov	sp, r7
 80096e4:	b002      	add	sp, #8
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	4a04      	ldr	r2, [pc, #16]	; (8009708 <LL_ADC_Enable+0x20>)
 80096f6:	4013      	ands	r3, r2
 80096f8:	2201      	movs	r2, #1
 80096fa:	431a      	orrs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009700:	46c0      	nop			; (mov r8, r8)
 8009702:	46bd      	mov	sp, r7
 8009704:	b002      	add	sp, #8
 8009706:	bd80      	pop	{r7, pc}
 8009708:	7fffffe8 	.word	0x7fffffe8

0800970c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	4a04      	ldr	r2, [pc, #16]	; (800972c <LL_ADC_Disable+0x20>)
 800971a:	4013      	ands	r3, r2
 800971c:	2202      	movs	r2, #2
 800971e:	431a      	orrs	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009724:	46c0      	nop			; (mov r8, r8)
 8009726:	46bd      	mov	sp, r7
 8009728:	b002      	add	sp, #8
 800972a:	bd80      	pop	{r7, pc}
 800972c:	7fffffe8 	.word	0x7fffffe8

08009730 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	2201      	movs	r2, #1
 800973e:	4013      	ands	r3, r2
 8009740:	2b01      	cmp	r3, #1
 8009742:	d101      	bne.n	8009748 <LL_ADC_IsEnabled+0x18>
 8009744:	2301      	movs	r3, #1
 8009746:	e000      	b.n	800974a <LL_ADC_IsEnabled+0x1a>
 8009748:	2300      	movs	r3, #0
}
 800974a:	0018      	movs	r0, r3
 800974c:	46bd      	mov	sp, r7
 800974e:	b002      	add	sp, #8
 8009750:	bd80      	pop	{r7, pc}

08009752 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	2202      	movs	r2, #2
 8009760:	4013      	ands	r3, r2
 8009762:	2b02      	cmp	r3, #2
 8009764:	d101      	bne.n	800976a <LL_ADC_IsDisableOngoing+0x18>
 8009766:	2301      	movs	r3, #1
 8009768:	e000      	b.n	800976c <LL_ADC_IsDisableOngoing+0x1a>
 800976a:	2300      	movs	r3, #0
}
 800976c:	0018      	movs	r0, r3
 800976e:	46bd      	mov	sp, r7
 8009770:	b002      	add	sp, #8
 8009772:	bd80      	pop	{r7, pc}

08009774 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	4a04      	ldr	r2, [pc, #16]	; (8009794 <LL_ADC_REG_StartConversion+0x20>)
 8009782:	4013      	ands	r3, r2
 8009784:	2204      	movs	r2, #4
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800978c:	46c0      	nop			; (mov r8, r8)
 800978e:	46bd      	mov	sp, r7
 8009790:	b002      	add	sp, #8
 8009792:	bd80      	pop	{r7, pc}
 8009794:	7fffffe8 	.word	0x7fffffe8

08009798 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	2204      	movs	r2, #4
 80097a6:	4013      	ands	r3, r2
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d101      	bne.n	80097b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e000      	b.n	80097b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	0018      	movs	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	b002      	add	sp, #8
 80097b8:	bd80      	pop	{r7, pc}

080097ba <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2280      	movs	r2, #128	; 0x80
 80097c6:	601a      	str	r2, [r3, #0]
}
 80097c8:	46c0      	nop			; (mov r8, r8)
 80097ca:	46bd      	mov	sp, r7
 80097cc:	b002      	add	sp, #8
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2280      	movs	r2, #128	; 0x80
 80097dc:	0052      	lsls	r2, r2, #1
 80097de:	601a      	str	r2, [r3, #0]
}
 80097e0:	46c0      	nop			; (mov r8, r8)
 80097e2:	46bd      	mov	sp, r7
 80097e4:	b002      	add	sp, #8
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2280      	movs	r2, #128	; 0x80
 80097f4:	0092      	lsls	r2, r2, #2
 80097f6:	601a      	str	r2, [r3, #0]
}
 80097f8:	46c0      	nop			; (mov r8, r8)
 80097fa:	46bd      	mov	sp, r7
 80097fc:	b002      	add	sp, #8
 80097fe:	bd80      	pop	{r7, pc}

08009800 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	2280      	movs	r2, #128	; 0x80
 800980e:	431a      	orrs	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	605a      	str	r2, [r3, #4]
}
 8009814:	46c0      	nop			; (mov r8, r8)
 8009816:	46bd      	mov	sp, r7
 8009818:	b002      	add	sp, #8
 800981a:	bd80      	pop	{r7, pc}

0800981c <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2280      	movs	r2, #128	; 0x80
 800982a:	0052      	lsls	r2, r2, #1
 800982c:	431a      	orrs	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	605a      	str	r2, [r3, #4]
}
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	46bd      	mov	sp, r7
 8009836:	b002      	add	sp, #8
 8009838:	bd80      	pop	{r7, pc}

0800983a <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	2280      	movs	r2, #128	; 0x80
 8009848:	0092      	lsls	r2, r2, #2
 800984a:	431a      	orrs	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	605a      	str	r2, [r3, #4]
}
 8009850:	46c0      	nop			; (mov r8, r8)
 8009852:	46bd      	mov	sp, r7
 8009854:	b002      	add	sp, #8
 8009856:	bd80      	pop	{r7, pc}

08009858 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	2280      	movs	r2, #128	; 0x80
 8009866:	4393      	bics	r3, r2
 8009868:	001a      	movs	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	605a      	str	r2, [r3, #4]
}
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	46bd      	mov	sp, r7
 8009872:	b002      	add	sp, #8
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	4a03      	ldr	r2, [pc, #12]	; (8009894 <LL_ADC_DisableIT_AWD2+0x1c>)
 8009886:	401a      	ands	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	605a      	str	r2, [r3, #4]
}
 800988c:	46c0      	nop			; (mov r8, r8)
 800988e:	46bd      	mov	sp, r7
 8009890:	b002      	add	sp, #8
 8009892:	bd80      	pop	{r7, pc}
 8009894:	fffffeff 	.word	0xfffffeff

08009898 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4a03      	ldr	r2, [pc, #12]	; (80098b4 <LL_ADC_DisableIT_AWD3+0x1c>)
 80098a6:	401a      	ands	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	605a      	str	r2, [r3, #4]
}
 80098ac:	46c0      	nop			; (mov r8, r8)
 80098ae:	46bd      	mov	sp, r7
 80098b0:	b002      	add	sp, #8
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	fffffdff 	.word	0xfffffdff

080098b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80098c0:	231f      	movs	r3, #31
 80098c2:	18fb      	adds	r3, r7, r3
 80098c4:	2200      	movs	r2, #0
 80098c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80098cc:	2300      	movs	r3, #0
 80098ce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e17f      	b.n	8009bde <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	0018      	movs	r0, r3
 80098ea:	f7ff f99b 	bl	8008c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2254      	movs	r2, #84	; 0x54
 80098f8:	2100      	movs	r1, #0
 80098fa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	0018      	movs	r0, r3
 8009902:	f7ff fedd 	bl	80096c0 <LL_ADC_IsInternalRegulatorEnabled>
 8009906:	1e03      	subs	r3, r0, #0
 8009908:	d115      	bne.n	8009936 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	0018      	movs	r0, r3
 8009910:	f7ff fec2 	bl	8009698 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009914:	4bb4      	ldr	r3, [pc, #720]	; (8009be8 <HAL_ADC_Init+0x330>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	49b4      	ldr	r1, [pc, #720]	; (8009bec <HAL_ADC_Init+0x334>)
 800991a:	0018      	movs	r0, r3
 800991c:	f7fc fc68 	bl	80061f0 <__udivsi3>
 8009920:	0003      	movs	r3, r0
 8009922:	3301      	adds	r3, #1
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009928:	e002      	b.n	8009930 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3b01      	subs	r3, #1
 800992e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f9      	bne.n	800992a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	0018      	movs	r0, r3
 800993c:	f7ff fec0 	bl	80096c0 <LL_ADC_IsInternalRegulatorEnabled>
 8009940:	1e03      	subs	r3, r0, #0
 8009942:	d10f      	bne.n	8009964 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009948:	2210      	movs	r2, #16
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009954:	2201      	movs	r2, #1
 8009956:	431a      	orrs	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800995c:	231f      	movs	r3, #31
 800995e:	18fb      	adds	r3, r7, r3
 8009960:	2201      	movs	r2, #1
 8009962:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	0018      	movs	r0, r3
 800996a:	f7ff ff15 	bl	8009798 <LL_ADC_REG_IsConversionOngoing>
 800996e:	0003      	movs	r3, r0
 8009970:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009976:	2210      	movs	r2, #16
 8009978:	4013      	ands	r3, r2
 800997a:	d000      	beq.n	800997e <HAL_ADC_Init+0xc6>
 800997c:	e122      	b.n	8009bc4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d000      	beq.n	8009986 <HAL_ADC_Init+0xce>
 8009984:	e11e      	b.n	8009bc4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998a:	4a99      	ldr	r2, [pc, #612]	; (8009bf0 <HAL_ADC_Init+0x338>)
 800998c:	4013      	ands	r3, r2
 800998e:	2202      	movs	r2, #2
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	0018      	movs	r0, r3
 800999c:	f7ff fec8 	bl	8009730 <LL_ADC_IsEnabled>
 80099a0:	1e03      	subs	r3, r0, #0
 80099a2:	d000      	beq.n	80099a6 <HAL_ADC_Init+0xee>
 80099a4:	e0ad      	b.n	8009b02 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	7e1b      	ldrb	r3, [r3, #24]
 80099ae:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80099b0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	7e5b      	ldrb	r3, [r3, #25]
 80099b6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80099b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	7e9b      	ldrb	r3, [r3, #26]
 80099be:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80099c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <HAL_ADC_Init+0x118>
 80099ca:	2380      	movs	r3, #128	; 0x80
 80099cc:	015b      	lsls	r3, r3, #5
 80099ce:	e000      	b.n	80099d2 <HAL_ADC_Init+0x11a>
 80099d0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80099d2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80099d8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	da04      	bge.n	80099ec <HAL_ADC_Init+0x134>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	085b      	lsrs	r3, r3, #1
 80099ea:	e001      	b.n	80099f0 <HAL_ADC_Init+0x138>
 80099ec:	2380      	movs	r3, #128	; 0x80
 80099ee:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80099f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	212c      	movs	r1, #44	; 0x2c
 80099f6:	5c5b      	ldrb	r3, [r3, r1]
 80099f8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80099fa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2220      	movs	r2, #32
 8009a06:	5c9b      	ldrb	r3, [r3, r2]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d115      	bne.n	8009a38 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	7e9b      	ldrb	r3, [r3, #26]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d105      	bne.n	8009a20 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	2280      	movs	r2, #128	; 0x80
 8009a18:	0252      	lsls	r2, r2, #9
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	61bb      	str	r3, [r7, #24]
 8009a1e:	e00b      	b.n	8009a38 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a24:	2220      	movs	r2, #32
 8009a26:	431a      	orrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a30:	2201      	movs	r2, #1
 8009a32:	431a      	orrs	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00a      	beq.n	8009a56 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a44:	23e0      	movs	r3, #224	; 0xe0
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	4a65      	ldr	r2, [pc, #404]	; (8009bf4 <HAL_ADC_Init+0x33c>)
 8009a5e:	4013      	ands	r3, r2
 8009a60:	0019      	movs	r1, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69ba      	ldr	r2, [r7, #24]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	0f9b      	lsrs	r3, r3, #30
 8009a72:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	223c      	movs	r2, #60	; 0x3c
 8009a84:	5c9b      	ldrb	r3, [r3, r2]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d111      	bne.n	8009aae <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	0f9b      	lsrs	r3, r3, #30
 8009a90:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009a96:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8009a9c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8009aa2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	4a50      	ldr	r2, [pc, #320]	; (8009bf8 <HAL_ADC_Init+0x340>)
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	0019      	movs	r1, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	23c0      	movs	r3, #192	; 0xc0
 8009aca:	061b      	lsls	r3, r3, #24
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d018      	beq.n	8009b02 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009ad4:	2380      	movs	r3, #128	; 0x80
 8009ad6:	05db      	lsls	r3, r3, #23
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d012      	beq.n	8009b02 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009ae0:	2380      	movs	r3, #128	; 0x80
 8009ae2:	061b      	lsls	r3, r3, #24
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d00c      	beq.n	8009b02 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8009ae8:	4b44      	ldr	r3, [pc, #272]	; (8009bfc <HAL_ADC_Init+0x344>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a44      	ldr	r2, [pc, #272]	; (8009c00 <HAL_ADC_Init+0x348>)
 8009aee:	4013      	ands	r3, r2
 8009af0:	0019      	movs	r1, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	23f0      	movs	r3, #240	; 0xf0
 8009af8:	039b      	lsls	r3, r3, #14
 8009afa:	401a      	ands	r2, r3
 8009afc:	4b3f      	ldr	r3, [pc, #252]	; (8009bfc <HAL_ADC_Init+0x344>)
 8009afe:	430a      	orrs	r2, r1
 8009b00:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0a:	001a      	movs	r2, r3
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	f7ff fcbc 	bl	800948a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6818      	ldr	r0, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	493a      	ldr	r1, [pc, #232]	; (8009c04 <HAL_ADC_Init+0x34c>)
 8009b1c:	001a      	movs	r2, r3
 8009b1e:	f7ff fcb4 	bl	800948a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2110      	movs	r1, #16
 8009b36:	4249      	negs	r1, r1
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8009b3c:	e018      	b.n	8009b70 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691a      	ldr	r2, [r3, #16]
 8009b42:	2380      	movs	r3, #128	; 0x80
 8009b44:	039b      	lsls	r3, r3, #14
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d112      	bne.n	8009b70 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	221c      	movs	r2, #28
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2210      	movs	r2, #16
 8009b5e:	4252      	negs	r2, r2
 8009b60:	409a      	lsls	r2, r3
 8009b62:	0011      	movs	r1, r2
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2100      	movs	r1, #0
 8009b76:	0018      	movs	r0, r3
 8009b78:	f7ff fca4 	bl	80094c4 <LL_ADC_GetSamplingTimeCommonChannels>
 8009b7c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d10b      	bne.n	8009b9e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b90:	2203      	movs	r2, #3
 8009b92:	4393      	bics	r3, r2
 8009b94:	2201      	movs	r2, #1
 8009b96:	431a      	orrs	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009b9c:	e01c      	b.n	8009bd8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba2:	2212      	movs	r2, #18
 8009ba4:	4393      	bics	r3, r2
 8009ba6:	2210      	movs	r2, #16
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8009bba:	231f      	movs	r3, #31
 8009bbc:	18fb      	adds	r3, r7, r3
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009bc2:	e009      	b.n	8009bd8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc8:	2210      	movs	r2, #16
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009bd0:	231f      	movs	r3, #31
 8009bd2:	18fb      	adds	r3, r7, r3
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009bd8:	231f      	movs	r3, #31
 8009bda:	18fb      	adds	r3, r7, r3
 8009bdc:	781b      	ldrb	r3, [r3, #0]
}
 8009bde:	0018      	movs	r0, r3
 8009be0:	46bd      	mov	sp, r7
 8009be2:	b008      	add	sp, #32
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	20000058 	.word	0x20000058
 8009bec:	00030d40 	.word	0x00030d40
 8009bf0:	fffffefd 	.word	0xfffffefd
 8009bf4:	ffde0201 	.word	0xffde0201
 8009bf8:	1ffffc02 	.word	0x1ffffc02
 8009bfc:	40012708 	.word	0x40012708
 8009c00:	ffc3ffff 	.word	0xffc3ffff
 8009c04:	07ffff04 	.word	0x07ffff04

08009c08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009c08:	b5b0      	push	{r4, r5, r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f7ff fdbd 	bl	8009798 <LL_ADC_REG_IsConversionOngoing>
 8009c1e:	1e03      	subs	r3, r0, #0
 8009c20:	d16c      	bne.n	8009cfc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2254      	movs	r2, #84	; 0x54
 8009c26:	5c9b      	ldrb	r3, [r3, r2]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d101      	bne.n	8009c30 <HAL_ADC_Start_DMA+0x28>
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	e06c      	b.n	8009d0a <HAL_ADC_Start_DMA+0x102>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2254      	movs	r2, #84	; 0x54
 8009c34:	2101      	movs	r1, #1
 8009c36:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	4013      	ands	r3, r2
 8009c42:	d113      	bne.n	8009c6c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f7ff fd71 	bl	8009730 <LL_ADC_IsEnabled>
 8009c4e:	1e03      	subs	r3, r0, #0
 8009c50:	d004      	beq.n	8009c5c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	0018      	movs	r0, r3
 8009c58:	f7ff fd58 	bl	800970c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2101      	movs	r1, #1
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8009c6c:	2517      	movs	r5, #23
 8009c6e:	197c      	adds	r4, r7, r5
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	0018      	movs	r0, r3
 8009c74:	f000 fe08 	bl	800a888 <ADC_Enable>
 8009c78:	0003      	movs	r3, r0
 8009c7a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009c7c:	002c      	movs	r4, r5
 8009c7e:	193b      	adds	r3, r7, r4
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d13e      	bne.n	8009d04 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8a:	4a22      	ldr	r2, [pc, #136]	; (8009d14 <HAL_ADC_Start_DMA+0x10c>)
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	2280      	movs	r2, #128	; 0x80
 8009c90:	0052      	lsls	r2, r2, #1
 8009c92:	431a      	orrs	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ca2:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <HAL_ADC_Start_DMA+0x110>)
 8009ca4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009caa:	4a1c      	ldr	r2, [pc, #112]	; (8009d1c <HAL_ADC_Start_DMA+0x114>)
 8009cac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb2:	4a1b      	ldr	r2, [pc, #108]	; (8009d20 <HAL_ADC_Start_DMA+0x118>)
 8009cb4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	221c      	movs	r2, #28
 8009cbc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2254      	movs	r2, #84	; 0x54
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2110      	movs	r1, #16
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3340      	adds	r3, #64	; 0x40
 8009ce0:	0019      	movs	r1, r3
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	193c      	adds	r4, r7, r4
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f001 fc98 	bl	800b61c <HAL_DMA_Start_IT>
 8009cec:	0003      	movs	r3, r0
 8009cee:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f7ff fd3d 	bl	8009774 <LL_ADC_REG_StartConversion>
 8009cfa:	e003      	b.n	8009d04 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009cfc:	2317      	movs	r3, #23
 8009cfe:	18fb      	adds	r3, r7, r3
 8009d00:	2202      	movs	r2, #2
 8009d02:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009d04:	2317      	movs	r3, #23
 8009d06:	18fb      	adds	r3, r7, r3
 8009d08:	781b      	ldrb	r3, [r3, #0]
}
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	b006      	add	sp, #24
 8009d10:	bdb0      	pop	{r4, r5, r7, pc}
 8009d12:	46c0      	nop			; (mov r8, r8)
 8009d14:	fffff0fe 	.word	0xfffff0fe
 8009d18:	0800aa51 	.word	0x0800aa51
 8009d1c:	0800ab19 	.word	0x0800ab19
 8009d20:	0800ab37 	.word	0x0800ab37

08009d24 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	2202      	movs	r2, #2
 8009d44:	4013      	ands	r3, r2
 8009d46:	d017      	beq.n	8009d78 <HAL_ADC_IRQHandler+0x54>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	d013      	beq.n	8009d78 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d54:	2210      	movs	r2, #16
 8009d56:	4013      	ands	r3, r2
 8009d58:	d106      	bne.n	8009d68 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5e:	2280      	movs	r2, #128	; 0x80
 8009d60:	0112      	lsls	r2, r2, #4
 8009d62:	431a      	orrs	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f001 f89a 	bl	800aea4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2202      	movs	r2, #2
 8009d76:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2204      	movs	r2, #4
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	d003      	beq.n	8009d88 <HAL_ADC_IRQHandler+0x64>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2204      	movs	r2, #4
 8009d84:	4013      	ands	r3, r2
 8009d86:	d107      	bne.n	8009d98 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	2208      	movs	r2, #8
 8009d8c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009d8e:	d04d      	beq.n	8009e2c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2208      	movs	r2, #8
 8009d94:	4013      	ands	r3, r2
 8009d96:	d049      	beq.n	8009e2c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9c:	2210      	movs	r2, #16
 8009d9e:	4013      	ands	r3, r2
 8009da0:	d106      	bne.n	8009db0 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da6:	2280      	movs	r2, #128	; 0x80
 8009da8:	0092      	lsls	r2, r2, #2
 8009daa:	431a      	orrs	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	0018      	movs	r0, r3
 8009db6:	f7ff fb9c 	bl	80094f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009dba:	1e03      	subs	r3, r0, #0
 8009dbc:	d02e      	beq.n	8009e1c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	7e9b      	ldrb	r3, [r3, #26]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d12a      	bne.n	8009e1c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2208      	movs	r2, #8
 8009dce:	4013      	ands	r3, r2
 8009dd0:	2b08      	cmp	r3, #8
 8009dd2:	d123      	bne.n	8009e1c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f7ff fcdd 	bl	8009798 <LL_ADC_REG_IsConversionOngoing>
 8009dde:	1e03      	subs	r3, r0, #0
 8009de0:	d110      	bne.n	8009e04 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	210c      	movs	r1, #12
 8009dee:	438a      	bics	r2, r1
 8009df0:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df6:	4a56      	ldr	r2, [pc, #344]	; (8009f50 <HAL_ADC_IRQHandler+0x22c>)
 8009df8:	4013      	ands	r3, r2
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	659a      	str	r2, [r3, #88]	; 0x58
 8009e02:	e00b      	b.n	8009e1c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e08:	2220      	movs	r2, #32
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e14:	2201      	movs	r2, #1
 8009e16:	431a      	orrs	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f7fc fca6 	bl	8006770 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	220c      	movs	r2, #12
 8009e2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2280      	movs	r2, #128	; 0x80
 8009e30:	4013      	ands	r3, r2
 8009e32:	d012      	beq.n	8009e5a <HAL_ADC_IRQHandler+0x136>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2280      	movs	r2, #128	; 0x80
 8009e38:	4013      	ands	r3, r2
 8009e3a:	d00e      	beq.n	8009e5a <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e40:	2280      	movs	r2, #128	; 0x80
 8009e42:	0252      	lsls	r2, r2, #9
 8009e44:	431a      	orrs	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	0018      	movs	r0, r3
 8009e4e:	f000 f889 	bl	8009f64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2280      	movs	r2, #128	; 0x80
 8009e58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	2380      	movs	r3, #128	; 0x80
 8009e5e:	005b      	lsls	r3, r3, #1
 8009e60:	4013      	ands	r3, r2
 8009e62:	d014      	beq.n	8009e8e <HAL_ADC_IRQHandler+0x16a>
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	2380      	movs	r3, #128	; 0x80
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	d00f      	beq.n	8009e8e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e72:	2280      	movs	r2, #128	; 0x80
 8009e74:	0292      	lsls	r2, r2, #10
 8009e76:	431a      	orrs	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f7fc fc86 	bl	8006790 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2280      	movs	r2, #128	; 0x80
 8009e8a:	0052      	lsls	r2, r2, #1
 8009e8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	2380      	movs	r3, #128	; 0x80
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4013      	ands	r3, r2
 8009e96:	d014      	beq.n	8009ec2 <HAL_ADC_IRQHandler+0x19e>
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	2380      	movs	r3, #128	; 0x80
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	d00f      	beq.n	8009ec2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea6:	2280      	movs	r2, #128	; 0x80
 8009ea8:	02d2      	lsls	r2, r2, #11
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	f000 ffee 	bl	800ae94 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2280      	movs	r2, #128	; 0x80
 8009ebe:	0092      	lsls	r2, r2, #2
 8009ec0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2210      	movs	r2, #16
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	d02b      	beq.n	8009f22 <HAL_ADC_IRQHandler+0x1fe>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2210      	movs	r2, #16
 8009ece:	4013      	ands	r3, r2
 8009ed0:	d027      	beq.n	8009f22 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d102      	bne.n	8009ee0 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8009eda:	2301      	movs	r3, #1
 8009edc:	617b      	str	r3, [r7, #20]
 8009ede:	e008      	b.n	8009ef2 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f7ff fb58 	bl	800959a <LL_ADC_REG_GetDMATransfer>
 8009eea:	1e03      	subs	r3, r0, #0
 8009eec:	d001      	beq.n	8009ef2 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d110      	bne.n	8009f1a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009efc:	2280      	movs	r2, #128	; 0x80
 8009efe:	00d2      	lsls	r2, r2, #3
 8009f00:	431a      	orrs	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	0018      	movs	r0, r3
 8009f16:	f000 f82d 	bl	8009f74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2210      	movs	r2, #16
 8009f20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	2380      	movs	r3, #128	; 0x80
 8009f26:	019b      	lsls	r3, r3, #6
 8009f28:	4013      	ands	r3, r2
 8009f2a:	d00d      	beq.n	8009f48 <HAL_ADC_IRQHandler+0x224>
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	2380      	movs	r3, #128	; 0x80
 8009f30:	019b      	lsls	r3, r3, #6
 8009f32:	4013      	ands	r3, r2
 8009f34:	d008      	beq.n	8009f48 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f000 ffbb 	bl	800aeb4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2280      	movs	r2, #128	; 0x80
 8009f44:	0192      	lsls	r2, r2, #6
 8009f46:	601a      	str	r2, [r3, #0]
  }
}
 8009f48:	46c0      	nop			; (mov r8, r8)
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	b006      	add	sp, #24
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	fffffefe 	.word	0xfffffefe

08009f54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009f5c:	46c0      	nop			; (mov r8, r8)
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	b002      	add	sp, #8
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009f6c:	46c0      	nop			; (mov r8, r8)
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b002      	add	sp, #8
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009f7c:	46c0      	nop			; (mov r8, r8)
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	b002      	add	sp, #8
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f8e:	2317      	movs	r3, #23
 8009f90:	18fb      	adds	r3, r7, r3
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2254      	movs	r2, #84	; 0x54
 8009f9e:	5c9b      	ldrb	r3, [r3, r2]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_ADC_ConfigChannel+0x24>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e1c0      	b.n	800a32a <HAL_ADC_ConfigChannel+0x3a6>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2254      	movs	r2, #84	; 0x54
 8009fac:	2101      	movs	r1, #1
 8009fae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	0018      	movs	r0, r3
 8009fb6:	f7ff fbef 	bl	8009798 <LL_ADC_REG_IsConversionOngoing>
 8009fba:	1e03      	subs	r3, r0, #0
 8009fbc:	d000      	beq.n	8009fc0 <HAL_ADC_ConfigChannel+0x3c>
 8009fbe:	e1a3      	b.n	800a308 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d100      	bne.n	8009fca <HAL_ADC_ConfigChannel+0x46>
 8009fc8:	e143      	b.n	800a252 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	691a      	ldr	r2, [r3, #16]
 8009fce:	2380      	movs	r3, #128	; 0x80
 8009fd0:	061b      	lsls	r3, r3, #24
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d004      	beq.n	8009fe0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009fda:	4ac1      	ldr	r2, [pc, #772]	; (800a2e0 <HAL_ADC_ConfigChannel+0x35c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d108      	bne.n	8009ff2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	0019      	movs	r1, r3
 8009fea:	0010      	movs	r0, r2
 8009fec:	f7ff fab2 	bl	8009554 <LL_ADC_REG_SetSequencerChAdd>
 8009ff0:	e0c9      	b.n	800a186 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	211f      	movs	r1, #31
 8009ffc:	400b      	ands	r3, r1
 8009ffe:	210f      	movs	r1, #15
 800a000:	4099      	lsls	r1, r3
 800a002:	000b      	movs	r3, r1
 800a004:	43db      	mvns	r3, r3
 800a006:	4013      	ands	r3, r2
 800a008:	0019      	movs	r1, r3
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	035b      	lsls	r3, r3, #13
 800a010:	0b5b      	lsrs	r3, r3, #13
 800a012:	d105      	bne.n	800a020 <HAL_ADC_ConfigChannel+0x9c>
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	0e9b      	lsrs	r3, r3, #26
 800a01a:	221f      	movs	r2, #31
 800a01c:	4013      	ands	r3, r2
 800a01e:	e098      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2201      	movs	r2, #1
 800a026:	4013      	ands	r3, r2
 800a028:	d000      	beq.n	800a02c <HAL_ADC_ConfigChannel+0xa8>
 800a02a:	e091      	b.n	800a150 <HAL_ADC_ConfigChannel+0x1cc>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2202      	movs	r2, #2
 800a032:	4013      	ands	r3, r2
 800a034:	d000      	beq.n	800a038 <HAL_ADC_ConfigChannel+0xb4>
 800a036:	e089      	b.n	800a14c <HAL_ADC_ConfigChannel+0x1c8>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2204      	movs	r2, #4
 800a03e:	4013      	ands	r3, r2
 800a040:	d000      	beq.n	800a044 <HAL_ADC_ConfigChannel+0xc0>
 800a042:	e081      	b.n	800a148 <HAL_ADC_ConfigChannel+0x1c4>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2208      	movs	r2, #8
 800a04a:	4013      	ands	r3, r2
 800a04c:	d000      	beq.n	800a050 <HAL_ADC_ConfigChannel+0xcc>
 800a04e:	e079      	b.n	800a144 <HAL_ADC_ConfigChannel+0x1c0>
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2210      	movs	r2, #16
 800a056:	4013      	ands	r3, r2
 800a058:	d000      	beq.n	800a05c <HAL_ADC_ConfigChannel+0xd8>
 800a05a:	e071      	b.n	800a140 <HAL_ADC_ConfigChannel+0x1bc>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2220      	movs	r2, #32
 800a062:	4013      	ands	r3, r2
 800a064:	d000      	beq.n	800a068 <HAL_ADC_ConfigChannel+0xe4>
 800a066:	e069      	b.n	800a13c <HAL_ADC_ConfigChannel+0x1b8>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2240      	movs	r2, #64	; 0x40
 800a06e:	4013      	ands	r3, r2
 800a070:	d000      	beq.n	800a074 <HAL_ADC_ConfigChannel+0xf0>
 800a072:	e061      	b.n	800a138 <HAL_ADC_ConfigChannel+0x1b4>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2280      	movs	r2, #128	; 0x80
 800a07a:	4013      	ands	r3, r2
 800a07c:	d000      	beq.n	800a080 <HAL_ADC_ConfigChannel+0xfc>
 800a07e:	e059      	b.n	800a134 <HAL_ADC_ConfigChannel+0x1b0>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	2380      	movs	r3, #128	; 0x80
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	4013      	ands	r3, r2
 800a08a:	d151      	bne.n	800a130 <HAL_ADC_ConfigChannel+0x1ac>
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	2380      	movs	r3, #128	; 0x80
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4013      	ands	r3, r2
 800a096:	d149      	bne.n	800a12c <HAL_ADC_ConfigChannel+0x1a8>
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	2380      	movs	r3, #128	; 0x80
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	d141      	bne.n	800a128 <HAL_ADC_ConfigChannel+0x1a4>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	2380      	movs	r3, #128	; 0x80
 800a0aa:	011b      	lsls	r3, r3, #4
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	d139      	bne.n	800a124 <HAL_ADC_ConfigChannel+0x1a0>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	2380      	movs	r3, #128	; 0x80
 800a0b6:	015b      	lsls	r3, r3, #5
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	d131      	bne.n	800a120 <HAL_ADC_ConfigChannel+0x19c>
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	2380      	movs	r3, #128	; 0x80
 800a0c2:	019b      	lsls	r3, r3, #6
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	d129      	bne.n	800a11c <HAL_ADC_ConfigChannel+0x198>
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	2380      	movs	r3, #128	; 0x80
 800a0ce:	01db      	lsls	r3, r3, #7
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	d121      	bne.n	800a118 <HAL_ADC_ConfigChannel+0x194>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	2380      	movs	r3, #128	; 0x80
 800a0da:	021b      	lsls	r3, r3, #8
 800a0dc:	4013      	ands	r3, r2
 800a0de:	d119      	bne.n	800a114 <HAL_ADC_ConfigChannel+0x190>
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	2380      	movs	r3, #128	; 0x80
 800a0e6:	025b      	lsls	r3, r3, #9
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	d111      	bne.n	800a110 <HAL_ADC_ConfigChannel+0x18c>
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	029b      	lsls	r3, r3, #10
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	d109      	bne.n	800a10c <HAL_ADC_ConfigChannel+0x188>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	2380      	movs	r3, #128	; 0x80
 800a0fe:	02db      	lsls	r3, r3, #11
 800a100:	4013      	ands	r3, r2
 800a102:	d001      	beq.n	800a108 <HAL_ADC_ConfigChannel+0x184>
 800a104:	2312      	movs	r3, #18
 800a106:	e024      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a108:	2300      	movs	r3, #0
 800a10a:	e022      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a10c:	2311      	movs	r3, #17
 800a10e:	e020      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a110:	2310      	movs	r3, #16
 800a112:	e01e      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a114:	230f      	movs	r3, #15
 800a116:	e01c      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a118:	230e      	movs	r3, #14
 800a11a:	e01a      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a11c:	230d      	movs	r3, #13
 800a11e:	e018      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a120:	230c      	movs	r3, #12
 800a122:	e016      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a124:	230b      	movs	r3, #11
 800a126:	e014      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a128:	230a      	movs	r3, #10
 800a12a:	e012      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a12c:	2309      	movs	r3, #9
 800a12e:	e010      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a130:	2308      	movs	r3, #8
 800a132:	e00e      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a134:	2307      	movs	r3, #7
 800a136:	e00c      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a138:	2306      	movs	r3, #6
 800a13a:	e00a      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a13c:	2305      	movs	r3, #5
 800a13e:	e008      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a140:	2304      	movs	r3, #4
 800a142:	e006      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a144:	2303      	movs	r3, #3
 800a146:	e004      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a148:	2302      	movs	r3, #2
 800a14a:	e002      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e000      	b.n	800a152 <HAL_ADC_ConfigChannel+0x1ce>
 800a150:	2300      	movs	r3, #0
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	6852      	ldr	r2, [r2, #4]
 800a156:	201f      	movs	r0, #31
 800a158:	4002      	ands	r2, r0
 800a15a:	4093      	lsls	r3, r2
 800a15c:	000a      	movs	r2, r1
 800a15e:	431a      	orrs	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	089b      	lsrs	r3, r3, #2
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	429a      	cmp	r2, r3
 800a172:	d808      	bhi.n	800a186 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6818      	ldr	r0, [r3, #0]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	6859      	ldr	r1, [r3, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	001a      	movs	r2, r3
 800a182:	f7ff f9c7 	bl	8009514 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	6819      	ldr	r1, [r3, #0]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	001a      	movs	r2, r3
 800a194:	f7ff fa0e 	bl	80095b4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	db00      	blt.n	800a1a2 <HAL_ADC_ConfigChannel+0x21e>
 800a1a0:	e0bc      	b.n	800a31c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a1a2:	4b50      	ldr	r3, [pc, #320]	; (800a2e4 <HAL_ADC_ConfigChannel+0x360>)
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f7ff f963 	bl	8009470 <LL_ADC_GetCommonPathInternalCh>
 800a1aa:	0003      	movs	r3, r0
 800a1ac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a4d      	ldr	r2, [pc, #308]	; (800a2e8 <HAL_ADC_ConfigChannel+0x364>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d122      	bne.n	800a1fe <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	2380      	movs	r3, #128	; 0x80
 800a1bc:	041b      	lsls	r3, r3, #16
 800a1be:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800a1c0:	d11d      	bne.n	800a1fe <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2280      	movs	r2, #128	; 0x80
 800a1c6:	0412      	lsls	r2, r2, #16
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	4a46      	ldr	r2, [pc, #280]	; (800a2e4 <HAL_ADC_ConfigChannel+0x360>)
 800a1cc:	0019      	movs	r1, r3
 800a1ce:	0010      	movs	r0, r2
 800a1d0:	f7ff f93a 	bl	8009448 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a1d4:	4b45      	ldr	r3, [pc, #276]	; (800a2ec <HAL_ADC_ConfigChannel+0x368>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4945      	ldr	r1, [pc, #276]	; (800a2f0 <HAL_ADC_ConfigChannel+0x36c>)
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f7fc f808 	bl	80061f0 <__udivsi3>
 800a1e0:	0003      	movs	r3, r0
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	0013      	movs	r3, r2
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	189b      	adds	r3, r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a1ee:	e002      	b.n	800a1f6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f9      	bne.n	800a1f0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800a1fc:	e08e      	b.n	800a31c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a3c      	ldr	r2, [pc, #240]	; (800a2f4 <HAL_ADC_ConfigChannel+0x370>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d10e      	bne.n	800a226 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	2380      	movs	r3, #128	; 0x80
 800a20c:	045b      	lsls	r3, r3, #17
 800a20e:	4013      	ands	r3, r2
 800a210:	d109      	bne.n	800a226 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	2280      	movs	r2, #128	; 0x80
 800a216:	0452      	lsls	r2, r2, #17
 800a218:	4313      	orrs	r3, r2
 800a21a:	4a32      	ldr	r2, [pc, #200]	; (800a2e4 <HAL_ADC_ConfigChannel+0x360>)
 800a21c:	0019      	movs	r1, r3
 800a21e:	0010      	movs	r0, r2
 800a220:	f7ff f912 	bl	8009448 <LL_ADC_SetCommonPathInternalCh>
 800a224:	e07a      	b.n	800a31c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a33      	ldr	r2, [pc, #204]	; (800a2f8 <HAL_ADC_ConfigChannel+0x374>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d000      	beq.n	800a232 <HAL_ADC_ConfigChannel+0x2ae>
 800a230:	e074      	b.n	800a31c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	2380      	movs	r3, #128	; 0x80
 800a236:	03db      	lsls	r3, r3, #15
 800a238:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800a23a:	d000      	beq.n	800a23e <HAL_ADC_ConfigChannel+0x2ba>
 800a23c:	e06e      	b.n	800a31c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2280      	movs	r2, #128	; 0x80
 800a242:	03d2      	lsls	r2, r2, #15
 800a244:	4313      	orrs	r3, r2
 800a246:	4a27      	ldr	r2, [pc, #156]	; (800a2e4 <HAL_ADC_ConfigChannel+0x360>)
 800a248:	0019      	movs	r1, r3
 800a24a:	0010      	movs	r0, r2
 800a24c:	f7ff f8fc 	bl	8009448 <LL_ADC_SetCommonPathInternalCh>
 800a250:	e064      	b.n	800a31c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691a      	ldr	r2, [r3, #16]
 800a256:	2380      	movs	r3, #128	; 0x80
 800a258:	061b      	lsls	r3, r3, #24
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d004      	beq.n	800a268 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800a262:	4a1f      	ldr	r2, [pc, #124]	; (800a2e0 <HAL_ADC_ConfigChannel+0x35c>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d107      	bne.n	800a278 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	0019      	movs	r1, r3
 800a272:	0010      	movs	r0, r2
 800a274:	f7ff f97f 	bl	8009576 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	da4d      	bge.n	800a31c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a280:	4b18      	ldr	r3, [pc, #96]	; (800a2e4 <HAL_ADC_ConfigChannel+0x360>)
 800a282:	0018      	movs	r0, r3
 800a284:	f7ff f8f4 	bl	8009470 <LL_ADC_GetCommonPathInternalCh>
 800a288:	0003      	movs	r3, r0
 800a28a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a15      	ldr	r2, [pc, #84]	; (800a2e8 <HAL_ADC_ConfigChannel+0x364>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d108      	bne.n	800a2a8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	4a18      	ldr	r2, [pc, #96]	; (800a2fc <HAL_ADC_ConfigChannel+0x378>)
 800a29a:	4013      	ands	r3, r2
 800a29c:	4a11      	ldr	r2, [pc, #68]	; (800a2e4 <HAL_ADC_ConfigChannel+0x360>)
 800a29e:	0019      	movs	r1, r3
 800a2a0:	0010      	movs	r0, r2
 800a2a2:	f7ff f8d1 	bl	8009448 <LL_ADC_SetCommonPathInternalCh>
 800a2a6:	e039      	b.n	800a31c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a11      	ldr	r2, [pc, #68]	; (800a2f4 <HAL_ADC_ConfigChannel+0x370>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d108      	bne.n	800a2c4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	4a12      	ldr	r2, [pc, #72]	; (800a300 <HAL_ADC_ConfigChannel+0x37c>)
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	4a0a      	ldr	r2, [pc, #40]	; (800a2e4 <HAL_ADC_ConfigChannel+0x360>)
 800a2ba:	0019      	movs	r1, r3
 800a2bc:	0010      	movs	r0, r2
 800a2be:	f7ff f8c3 	bl	8009448 <LL_ADC_SetCommonPathInternalCh>
 800a2c2:	e02b      	b.n	800a31c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a0b      	ldr	r2, [pc, #44]	; (800a2f8 <HAL_ADC_ConfigChannel+0x374>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d126      	bne.n	800a31c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	4a0c      	ldr	r2, [pc, #48]	; (800a304 <HAL_ADC_ConfigChannel+0x380>)
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	4a03      	ldr	r2, [pc, #12]	; (800a2e4 <HAL_ADC_ConfigChannel+0x360>)
 800a2d6:	0019      	movs	r1, r3
 800a2d8:	0010      	movs	r0, r2
 800a2da:	f7ff f8b5 	bl	8009448 <LL_ADC_SetCommonPathInternalCh>
 800a2de:	e01d      	b.n	800a31c <HAL_ADC_ConfigChannel+0x398>
 800a2e0:	80000004 	.word	0x80000004
 800a2e4:	40012708 	.word	0x40012708
 800a2e8:	b0001000 	.word	0xb0001000
 800a2ec:	20000058 	.word	0x20000058
 800a2f0:	00030d40 	.word	0x00030d40
 800a2f4:	b8004000 	.word	0xb8004000
 800a2f8:	b4002000 	.word	0xb4002000
 800a2fc:	ff7fffff 	.word	0xff7fffff
 800a300:	feffffff 	.word	0xfeffffff
 800a304:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a30c:	2220      	movs	r2, #32
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a314:	2317      	movs	r3, #23
 800a316:	18fb      	adds	r3, r7, r3
 800a318:	2201      	movs	r2, #1
 800a31a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2254      	movs	r2, #84	; 0x54
 800a320:	2100      	movs	r1, #0
 800a322:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800a324:	2317      	movs	r3, #23
 800a326:	18fb      	adds	r3, r7, r3
 800a328:	781b      	ldrb	r3, [r3, #0]
}
 800a32a:	0018      	movs	r0, r3
 800a32c:	46bd      	mov	sp, r7
 800a32e:	b006      	add	sp, #24
 800a330:	bd80      	pop	{r7, pc}
 800a332:	46c0      	nop			; (mov r8, r8)

0800a334 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 800a334:	b590      	push	{r4, r7, lr}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a33e:	2317      	movs	r3, #23
 800a340:	18fb      	adds	r3, r7, r3
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 800a346:	2300      	movs	r3, #0
 800a348:	60bb      	str	r3, [r7, #8]
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2254      	movs	r2, #84	; 0x54
 800a34e:	5c9b      	ldrb	r3, [r3, r2]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d101      	bne.n	800a358 <HAL_ADC_AnalogWDGConfig+0x24>
 800a354:	2302      	movs	r3, #2
 800a356:	e289      	b.n	800a86c <HAL_ADC_AnalogWDGConfig+0x538>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2254      	movs	r2, #84	; 0x54
 800a35c:	2101      	movs	r1, #1
 800a35e:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	0018      	movs	r0, r3
 800a366:	f7ff fa17 	bl	8009798 <LL_ADC_REG_IsConversionOngoing>
 800a36a:	1e03      	subs	r3, r0, #0
 800a36c:	d000      	beq.n	800a370 <HAL_ADC_AnalogWDGConfig+0x3c>
 800a36e:	e24a      	b.n	800a806 <HAL_ADC_AnalogWDGConfig+0x4d2>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4aa3      	ldr	r2, [pc, #652]	; (800a604 <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d162      	bne.n	800a440 <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	0018      	movs	r0, r3
 800a380:	f7ff f9d6 	bl	8009730 <LL_ADC_IsEnabled>
 800a384:	1e03      	subs	r3, r0, #0
 800a386:	d009      	beq.n	800a39c <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 800a388:	2301      	movs	r3, #1
 800a38a:	60bb      	str	r3, [r7, #8]
        tmp_hal_status = ADC_Disable(hadc);
 800a38c:	2317      	movs	r3, #23
 800a38e:	18fc      	adds	r4, r7, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	0018      	movs	r0, r3
 800a394:	f000 fafe 	bl	800a994 <ADC_Disable>
 800a398:	0003      	movs	r3, r0
 800a39a:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	2280      	movs	r2, #128	; 0x80
 800a3a2:	0412      	lsls	r2, r2, #16
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d011      	beq.n	800a3cc <HAL_ADC_AnalogWDGConfig+0x98>
 800a3a8:	22c0      	movs	r2, #192	; 0xc0
 800a3aa:	0412      	lsls	r2, r2, #16
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d115      	bne.n	800a3dc <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	4a93      	ldr	r2, [pc, #588]	; (800a608 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800a3ba:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800a3bc:	22c0      	movs	r2, #192	; 0xc0
 800a3be:	0412      	lsls	r2, r2, #16
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	4990      	ldr	r1, [pc, #576]	; (800a604 <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800a3c4:	001a      	movs	r2, r3
 800a3c6:	f7ff f911 	bl	80095ec <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 800a3ca:	e00f      	b.n	800a3ec <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a8e      	ldr	r2, [pc, #568]	; (800a60c <HAL_ADC_AnalogWDGConfig+0x2d8>)
 800a3d2:	498c      	ldr	r1, [pc, #560]	; (800a604 <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	f7ff f909 	bl	80095ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800a3da:	e007      	b.n	800a3ec <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4988      	ldr	r1, [pc, #544]	; (800a604 <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f7ff f901 	bl	80095ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800a3ea:	46c0      	nop			; (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d10b      	bne.n	800a40a <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 800a3f2:	2217      	movs	r2, #23
 800a3f4:	18bb      	adds	r3, r7, r2
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d106      	bne.n	800a40a <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 800a3fc:	18bc      	adds	r4, r7, r2
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	0018      	movs	r0, r3
 800a402:	f000 fa41 	bl	800a888 <ADC_Enable>
 800a406:	0003      	movs	r3, r0
 800a408:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a40e:	4a80      	ldr	r2, [pc, #512]	; (800a610 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 800a410:	401a      	ands	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	0018      	movs	r0, r3
 800a41c:	f7ff f9cd 	bl	80097ba <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	7b1b      	ldrb	r3, [r3, #12]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d105      	bne.n	800a434 <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	0018      	movs	r0, r3
 800a42e:	f7ff f9e7 	bl	8009800 <LL_ADC_EnableIT_AWD1>
 800a432:	e1e8      	b.n	800a806 <HAL_ADC_AnalogWDGConfig+0x4d2>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	0018      	movs	r0, r3
 800a43a:	f7ff fa0d 	bl	8009858 <LL_ADC_DisableIT_AWD1>
 800a43e:	e1e2      	b.n	800a806 <HAL_ADC_AnalogWDGConfig+0x4d2>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	2280      	movs	r2, #128	; 0x80
 800a446:	0412      	lsls	r2, r2, #16
 800a448:	4293      	cmp	r3, r2
 800a44a:	d100      	bne.n	800a44e <HAL_ADC_AnalogWDGConfig+0x11a>
 800a44c:	e18f      	b.n	800a76e <HAL_ADC_AnalogWDGConfig+0x43a>
 800a44e:	22c0      	movs	r2, #192	; 0xc0
 800a450:	0412      	lsls	r2, r2, #16
 800a452:	4293      	cmp	r3, r2
 800a454:	d000      	beq.n	800a458 <HAL_ADC_AnalogWDGConfig+0x124>
 800a456:	e193      	b.n	800a780 <HAL_ADC_AnalogWDGConfig+0x44c>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a6d      	ldr	r2, [pc, #436]	; (800a614 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d000      	beq.n	800a464 <HAL_ADC_AnalogWDGConfig+0x130>
 800a462:	e0bc      	b.n	800a5de <HAL_ADC_AnalogWDGConfig+0x2aa>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	22a0      	movs	r2, #160	; 0xa0
 800a46a:	5899      	ldr	r1, [r3, r2]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	035b      	lsls	r3, r3, #13
 800a472:	0b5b      	lsrs	r3, r3, #13
 800a474:	d108      	bne.n	800a488 <HAL_ADC_AnalogWDGConfig+0x154>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	0e9b      	lsrs	r3, r3, #26
 800a47c:	221f      	movs	r2, #31
 800a47e:	4013      	ands	r3, r2
 800a480:	2201      	movs	r2, #1
 800a482:	409a      	lsls	r2, r3
 800a484:	0013      	movs	r3, r2
 800a486:	e0a4      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	2201      	movs	r2, #1
 800a48e:	4013      	ands	r3, r2
 800a490:	d000      	beq.n	800a494 <HAL_ADC_AnalogWDGConfig+0x160>
 800a492:	e09d      	b.n	800a5d0 <HAL_ADC_AnalogWDGConfig+0x29c>
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	2202      	movs	r2, #2
 800a49a:	4013      	ands	r3, r2
 800a49c:	d000      	beq.n	800a4a0 <HAL_ADC_AnalogWDGConfig+0x16c>
 800a49e:	e095      	b.n	800a5cc <HAL_ADC_AnalogWDGConfig+0x298>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	2204      	movs	r2, #4
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	d000      	beq.n	800a4ac <HAL_ADC_AnalogWDGConfig+0x178>
 800a4aa:	e08d      	b.n	800a5c8 <HAL_ADC_AnalogWDGConfig+0x294>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	2208      	movs	r2, #8
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	d000      	beq.n	800a4b8 <HAL_ADC_AnalogWDGConfig+0x184>
 800a4b6:	e085      	b.n	800a5c4 <HAL_ADC_AnalogWDGConfig+0x290>
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	2210      	movs	r2, #16
 800a4be:	4013      	ands	r3, r2
 800a4c0:	d000      	beq.n	800a4c4 <HAL_ADC_AnalogWDGConfig+0x190>
 800a4c2:	e07d      	b.n	800a5c0 <HAL_ADC_AnalogWDGConfig+0x28c>
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	2220      	movs	r2, #32
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	d000      	beq.n	800a4d0 <HAL_ADC_AnalogWDGConfig+0x19c>
 800a4ce:	e075      	b.n	800a5bc <HAL_ADC_AnalogWDGConfig+0x288>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	2240      	movs	r2, #64	; 0x40
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	d000      	beq.n	800a4dc <HAL_ADC_AnalogWDGConfig+0x1a8>
 800a4da:	e06d      	b.n	800a5b8 <HAL_ADC_AnalogWDGConfig+0x284>
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2280      	movs	r2, #128	; 0x80
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	d000      	beq.n	800a4e8 <HAL_ADC_AnalogWDGConfig+0x1b4>
 800a4e6:	e065      	b.n	800a5b4 <HAL_ADC_AnalogWDGConfig+0x280>
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	689a      	ldr	r2, [r3, #8]
 800a4ec:	2380      	movs	r3, #128	; 0x80
 800a4ee:	005b      	lsls	r3, r3, #1
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	d000      	beq.n	800a4f6 <HAL_ADC_AnalogWDGConfig+0x1c2>
 800a4f4:	e05b      	b.n	800a5ae <HAL_ADC_AnalogWDGConfig+0x27a>
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	689a      	ldr	r2, [r3, #8]
 800a4fa:	2380      	movs	r3, #128	; 0x80
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4013      	ands	r3, r2
 800a500:	d152      	bne.n	800a5a8 <HAL_ADC_AnalogWDGConfig+0x274>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	689a      	ldr	r2, [r3, #8]
 800a506:	2380      	movs	r3, #128	; 0x80
 800a508:	00db      	lsls	r3, r3, #3
 800a50a:	4013      	ands	r3, r2
 800a50c:	d149      	bne.n	800a5a2 <HAL_ADC_AnalogWDGConfig+0x26e>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	689a      	ldr	r2, [r3, #8]
 800a512:	2380      	movs	r3, #128	; 0x80
 800a514:	011b      	lsls	r3, r3, #4
 800a516:	4013      	ands	r3, r2
 800a518:	d140      	bne.n	800a59c <HAL_ADC_AnalogWDGConfig+0x268>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	689a      	ldr	r2, [r3, #8]
 800a51e:	2380      	movs	r3, #128	; 0x80
 800a520:	015b      	lsls	r3, r3, #5
 800a522:	4013      	ands	r3, r2
 800a524:	d137      	bne.n	800a596 <HAL_ADC_AnalogWDGConfig+0x262>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	689a      	ldr	r2, [r3, #8]
 800a52a:	2380      	movs	r3, #128	; 0x80
 800a52c:	019b      	lsls	r3, r3, #6
 800a52e:	4013      	ands	r3, r2
 800a530:	d12e      	bne.n	800a590 <HAL_ADC_AnalogWDGConfig+0x25c>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	2380      	movs	r3, #128	; 0x80
 800a538:	01db      	lsls	r3, r3, #7
 800a53a:	4013      	ands	r3, r2
 800a53c:	d125      	bne.n	800a58a <HAL_ADC_AnalogWDGConfig+0x256>
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	2380      	movs	r3, #128	; 0x80
 800a544:	021b      	lsls	r3, r3, #8
 800a546:	4013      	ands	r3, r2
 800a548:	d11c      	bne.n	800a584 <HAL_ADC_AnalogWDGConfig+0x250>
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	689a      	ldr	r2, [r3, #8]
 800a54e:	2380      	movs	r3, #128	; 0x80
 800a550:	025b      	lsls	r3, r3, #9
 800a552:	4013      	ands	r3, r2
 800a554:	d113      	bne.n	800a57e <HAL_ADC_AnalogWDGConfig+0x24a>
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	689a      	ldr	r2, [r3, #8]
 800a55a:	2380      	movs	r3, #128	; 0x80
 800a55c:	029b      	lsls	r3, r3, #10
 800a55e:	4013      	ands	r3, r2
 800a560:	d10a      	bne.n	800a578 <HAL_ADC_AnalogWDGConfig+0x244>
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	689a      	ldr	r2, [r3, #8]
 800a566:	2380      	movs	r3, #128	; 0x80
 800a568:	02db      	lsls	r3, r3, #11
 800a56a:	4013      	ands	r3, r2
 800a56c:	d002      	beq.n	800a574 <HAL_ADC_AnalogWDGConfig+0x240>
 800a56e:	2380      	movs	r3, #128	; 0x80
 800a570:	02db      	lsls	r3, r3, #11
 800a572:	e02e      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a574:	2301      	movs	r3, #1
 800a576:	e02c      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a578:	2380      	movs	r3, #128	; 0x80
 800a57a:	029b      	lsls	r3, r3, #10
 800a57c:	e029      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a57e:	2380      	movs	r3, #128	; 0x80
 800a580:	025b      	lsls	r3, r3, #9
 800a582:	e026      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a584:	2380      	movs	r3, #128	; 0x80
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	e023      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a58a:	2380      	movs	r3, #128	; 0x80
 800a58c:	01db      	lsls	r3, r3, #7
 800a58e:	e020      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a590:	2380      	movs	r3, #128	; 0x80
 800a592:	019b      	lsls	r3, r3, #6
 800a594:	e01d      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a596:	2380      	movs	r3, #128	; 0x80
 800a598:	015b      	lsls	r3, r3, #5
 800a59a:	e01a      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a59c:	2380      	movs	r3, #128	; 0x80
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	e017      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5a2:	2380      	movs	r3, #128	; 0x80
 800a5a4:	00db      	lsls	r3, r3, #3
 800a5a6:	e014      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5a8:	2380      	movs	r3, #128	; 0x80
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	e011      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5ae:	2380      	movs	r3, #128	; 0x80
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	e00e      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5b4:	2380      	movs	r3, #128	; 0x80
 800a5b6:	e00c      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5b8:	2340      	movs	r3, #64	; 0x40
 800a5ba:	e00a      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5bc:	2320      	movs	r3, #32
 800a5be:	e008      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5c0:	2310      	movs	r3, #16
 800a5c2:	e006      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5c4:	2308      	movs	r3, #8
 800a5c6:	e004      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	e002      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e000      	b.n	800a5d2 <HAL_ADC_AnalogWDGConfig+0x29e>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	6812      	ldr	r2, [r2, #0]
 800a5d6:	430b      	orrs	r3, r1
 800a5d8:	21a0      	movs	r1, #160	; 0xa0
 800a5da:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 800a5dc:	e0d9      	b.n	800a792 <HAL_ADC_AnalogWDGConfig+0x45e>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	22a4      	movs	r2, #164	; 0xa4
 800a5e4:	5899      	ldr	r1, [r3, r2]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	035b      	lsls	r3, r3, #13
 800a5ec:	0b5b      	lsrs	r3, r3, #13
 800a5ee:	d113      	bne.n	800a618 <HAL_ADC_AnalogWDGConfig+0x2e4>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	0e9b      	lsrs	r3, r3, #26
 800a5f6:	221f      	movs	r2, #31
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	409a      	lsls	r2, r3
 800a5fe:	0013      	movs	r3, r2
 800a600:	e0af      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a602:	46c0      	nop			; (mov r8, r8)
 800a604:	7cc00000 	.word	0x7cc00000
 800a608:	fc07ffff 	.word	0xfc07ffff
 800a60c:	0087ffff 	.word	0x0087ffff
 800a610:	fffeffff 	.word	0xfffeffff
 800a614:	0017ffff 	.word	0x0017ffff
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	2201      	movs	r2, #1
 800a61e:	4013      	ands	r3, r2
 800a620:	d000      	beq.n	800a624 <HAL_ADC_AnalogWDGConfig+0x2f0>
 800a622:	e09d      	b.n	800a760 <HAL_ADC_AnalogWDGConfig+0x42c>
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	2202      	movs	r2, #2
 800a62a:	4013      	ands	r3, r2
 800a62c:	d000      	beq.n	800a630 <HAL_ADC_AnalogWDGConfig+0x2fc>
 800a62e:	e095      	b.n	800a75c <HAL_ADC_AnalogWDGConfig+0x428>
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	2204      	movs	r2, #4
 800a636:	4013      	ands	r3, r2
 800a638:	d000      	beq.n	800a63c <HAL_ADC_AnalogWDGConfig+0x308>
 800a63a:	e08d      	b.n	800a758 <HAL_ADC_AnalogWDGConfig+0x424>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	2208      	movs	r2, #8
 800a642:	4013      	ands	r3, r2
 800a644:	d000      	beq.n	800a648 <HAL_ADC_AnalogWDGConfig+0x314>
 800a646:	e085      	b.n	800a754 <HAL_ADC_AnalogWDGConfig+0x420>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	2210      	movs	r2, #16
 800a64e:	4013      	ands	r3, r2
 800a650:	d000      	beq.n	800a654 <HAL_ADC_AnalogWDGConfig+0x320>
 800a652:	e07d      	b.n	800a750 <HAL_ADC_AnalogWDGConfig+0x41c>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	2220      	movs	r2, #32
 800a65a:	4013      	ands	r3, r2
 800a65c:	d000      	beq.n	800a660 <HAL_ADC_AnalogWDGConfig+0x32c>
 800a65e:	e075      	b.n	800a74c <HAL_ADC_AnalogWDGConfig+0x418>
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	2240      	movs	r2, #64	; 0x40
 800a666:	4013      	ands	r3, r2
 800a668:	d000      	beq.n	800a66c <HAL_ADC_AnalogWDGConfig+0x338>
 800a66a:	e06d      	b.n	800a748 <HAL_ADC_AnalogWDGConfig+0x414>
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	2280      	movs	r2, #128	; 0x80
 800a672:	4013      	ands	r3, r2
 800a674:	d000      	beq.n	800a678 <HAL_ADC_AnalogWDGConfig+0x344>
 800a676:	e065      	b.n	800a744 <HAL_ADC_AnalogWDGConfig+0x410>
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	689a      	ldr	r2, [r3, #8]
 800a67c:	2380      	movs	r3, #128	; 0x80
 800a67e:	005b      	lsls	r3, r3, #1
 800a680:	4013      	ands	r3, r2
 800a682:	d000      	beq.n	800a686 <HAL_ADC_AnalogWDGConfig+0x352>
 800a684:	e05b      	b.n	800a73e <HAL_ADC_AnalogWDGConfig+0x40a>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	2380      	movs	r3, #128	; 0x80
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4013      	ands	r3, r2
 800a690:	d152      	bne.n	800a738 <HAL_ADC_AnalogWDGConfig+0x404>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	689a      	ldr	r2, [r3, #8]
 800a696:	2380      	movs	r3, #128	; 0x80
 800a698:	00db      	lsls	r3, r3, #3
 800a69a:	4013      	ands	r3, r2
 800a69c:	d149      	bne.n	800a732 <HAL_ADC_AnalogWDGConfig+0x3fe>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	689a      	ldr	r2, [r3, #8]
 800a6a2:	2380      	movs	r3, #128	; 0x80
 800a6a4:	011b      	lsls	r3, r3, #4
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	d140      	bne.n	800a72c <HAL_ADC_AnalogWDGConfig+0x3f8>
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	689a      	ldr	r2, [r3, #8]
 800a6ae:	2380      	movs	r3, #128	; 0x80
 800a6b0:	015b      	lsls	r3, r3, #5
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	d137      	bne.n	800a726 <HAL_ADC_AnalogWDGConfig+0x3f2>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	689a      	ldr	r2, [r3, #8]
 800a6ba:	2380      	movs	r3, #128	; 0x80
 800a6bc:	019b      	lsls	r3, r3, #6
 800a6be:	4013      	ands	r3, r2
 800a6c0:	d12e      	bne.n	800a720 <HAL_ADC_AnalogWDGConfig+0x3ec>
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	689a      	ldr	r2, [r3, #8]
 800a6c6:	2380      	movs	r3, #128	; 0x80
 800a6c8:	01db      	lsls	r3, r3, #7
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	d125      	bne.n	800a71a <HAL_ADC_AnalogWDGConfig+0x3e6>
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	2380      	movs	r3, #128	; 0x80
 800a6d4:	021b      	lsls	r3, r3, #8
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	d11c      	bne.n	800a714 <HAL_ADC_AnalogWDGConfig+0x3e0>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	689a      	ldr	r2, [r3, #8]
 800a6de:	2380      	movs	r3, #128	; 0x80
 800a6e0:	025b      	lsls	r3, r3, #9
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	d113      	bne.n	800a70e <HAL_ADC_AnalogWDGConfig+0x3da>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	2380      	movs	r3, #128	; 0x80
 800a6ec:	029b      	lsls	r3, r3, #10
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	d10a      	bne.n	800a708 <HAL_ADC_AnalogWDGConfig+0x3d4>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	689a      	ldr	r2, [r3, #8]
 800a6f6:	2380      	movs	r3, #128	; 0x80
 800a6f8:	02db      	lsls	r3, r3, #11
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	d002      	beq.n	800a704 <HAL_ADC_AnalogWDGConfig+0x3d0>
 800a6fe:	2380      	movs	r3, #128	; 0x80
 800a700:	02db      	lsls	r3, r3, #11
 800a702:	e02e      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a704:	2301      	movs	r3, #1
 800a706:	e02c      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a708:	2380      	movs	r3, #128	; 0x80
 800a70a:	029b      	lsls	r3, r3, #10
 800a70c:	e029      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a70e:	2380      	movs	r3, #128	; 0x80
 800a710:	025b      	lsls	r3, r3, #9
 800a712:	e026      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a714:	2380      	movs	r3, #128	; 0x80
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	e023      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a71a:	2380      	movs	r3, #128	; 0x80
 800a71c:	01db      	lsls	r3, r3, #7
 800a71e:	e020      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a720:	2380      	movs	r3, #128	; 0x80
 800a722:	019b      	lsls	r3, r3, #6
 800a724:	e01d      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a726:	2380      	movs	r3, #128	; 0x80
 800a728:	015b      	lsls	r3, r3, #5
 800a72a:	e01a      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a72c:	2380      	movs	r3, #128	; 0x80
 800a72e:	011b      	lsls	r3, r3, #4
 800a730:	e017      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a732:	2380      	movs	r3, #128	; 0x80
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	e014      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a738:	2380      	movs	r3, #128	; 0x80
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	e011      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a73e:	2380      	movs	r3, #128	; 0x80
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	e00e      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a744:	2380      	movs	r3, #128	; 0x80
 800a746:	e00c      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a748:	2340      	movs	r3, #64	; 0x40
 800a74a:	e00a      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a74c:	2320      	movs	r3, #32
 800a74e:	e008      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a750:	2310      	movs	r3, #16
 800a752:	e006      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a754:	2308      	movs	r3, #8
 800a756:	e004      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a758:	2304      	movs	r3, #4
 800a75a:	e002      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a75c:	2302      	movs	r3, #2
 800a75e:	e000      	b.n	800a762 <HAL_ADC_AnalogWDGConfig+0x42e>
 800a760:	2301      	movs	r3, #1
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6812      	ldr	r2, [r2, #0]
 800a766:	430b      	orrs	r3, r1
 800a768:	21a4      	movs	r1, #164	; 0xa4
 800a76a:	5053      	str	r3, [r2, r1]
          break;
 800a76c:	e011      	b.n	800a792 <HAL_ADC_AnalogWDGConfig+0x45e>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800a776:	4a3f      	ldr	r2, [pc, #252]	; (800a874 <HAL_ADC_AnalogWDGConfig+0x540>)
 800a778:	0019      	movs	r1, r3
 800a77a:	f7fe ff37 	bl	80095ec <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 800a77e:	e008      	b.n	800a792 <HAL_ADC_AnalogWDGConfig+0x45e>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6818      	ldr	r0, [r3, #0]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2200      	movs	r2, #0
 800a78a:	0019      	movs	r1, r3
 800a78c:	f7fe ff2e 	bl	80095ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800a790:	46c0      	nop			; (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a38      	ldr	r2, [pc, #224]	; (800a878 <HAL_ADC_AnalogWDGConfig+0x544>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d11a      	bne.n	800a7d2 <HAL_ADC_AnalogWDGConfig+0x49e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a0:	4a36      	ldr	r2, [pc, #216]	; (800a87c <HAL_ADC_AnalogWDGConfig+0x548>)
 800a7a2:	401a      	ands	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	0018      	movs	r0, r3
 800a7ae:	f7ff f80f 	bl	80097d0 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	7b1b      	ldrb	r3, [r3, #12]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d105      	bne.n	800a7c6 <HAL_ADC_AnalogWDGConfig+0x492>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	0018      	movs	r0, r3
 800a7c0:	f7ff f82c 	bl	800981c <LL_ADC_EnableIT_AWD2>
 800a7c4:	e01f      	b.n	800a806 <HAL_ADC_AnalogWDGConfig+0x4d2>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	0018      	movs	r0, r3
 800a7cc:	f7ff f854 	bl	8009878 <LL_ADC_DisableIT_AWD2>
 800a7d0:	e019      	b.n	800a806 <HAL_ADC_AnalogWDGConfig+0x4d2>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d6:	4a2a      	ldr	r2, [pc, #168]	; (800a880 <HAL_ADC_AnalogWDGConfig+0x54c>)
 800a7d8:	401a      	ands	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	0018      	movs	r0, r3
 800a7e4:	f7ff f800 	bl	80097e8 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	7b1b      	ldrb	r3, [r3, #12]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d105      	bne.n	800a7fc <HAL_ADC_AnalogWDGConfig+0x4c8>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	0018      	movs	r0, r3
 800a7f6:	f7ff f820 	bl	800983a <LL_ADC_EnableIT_AWD3>
 800a7fa:	e004      	b.n	800a806 <HAL_ADC_AnalogWDGConfig+0x4d2>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	0018      	movs	r0, r3
 800a802:	f7ff f849 	bl	8009898 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a1e      	ldr	r2, [pc, #120]	; (800a884 <HAL_ADC_AnalogWDGConfig+0x550>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d118      	bne.n	800a842 <HAL_ADC_AnalogWDGConfig+0x50e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	691a      	ldr	r2, [r3, #16]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	08db      	lsrs	r3, r3, #3
 800a81c:	2103      	movs	r1, #3
 800a81e:	400b      	ands	r3, r1
 800a820:	005b      	lsls	r3, r3, #1
 800a822:	409a      	lsls	r2, r3
 800a824:	0013      	movs	r3, r2
 800a826:	613b      	str	r3, [r7, #16]
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	695a      	ldr	r2, [r3, #20]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	08db      	lsrs	r3, r3, #3
 800a834:	2103      	movs	r1, #3
 800a836:	400b      	ands	r3, r1
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	409a      	lsls	r2, r3
 800a83c:	0013      	movs	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	e005      	b.n	800a84e <HAL_ADC_AnalogWDGConfig+0x51a>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	613b      	str	r3, [r7, #16]
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	60fb      	str	r3, [r7, #12]
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6818      	ldr	r0, [r3, #0]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	6819      	ldr	r1, [r3, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	f7fe fef5 	bl	8009648 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2254      	movs	r2, #84	; 0x54
 800a862:	2100      	movs	r1, #0
 800a864:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800a866:	2317      	movs	r3, #23
 800a868:	18fb      	adds	r3, r7, r3
 800a86a:	781b      	ldrb	r3, [r3, #0]
}
 800a86c:	0018      	movs	r0, r3
 800a86e:	46bd      	mov	sp, r7
 800a870:	b007      	add	sp, #28
 800a872:	bd90      	pop	{r4, r7, pc}
 800a874:	0087ffff 	.word	0x0087ffff
 800a878:	0017ffff 	.word	0x0017ffff
 800a87c:	fffdffff 	.word	0xfffdffff
 800a880:	fffbffff 	.word	0xfffbffff
 800a884:	7cc00000 	.word	0x7cc00000

0800a888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a890:	2300      	movs	r3, #0
 800a892:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	0018      	movs	r0, r3
 800a89a:	f7fe ff49 	bl	8009730 <LL_ADC_IsEnabled>
 800a89e:	1e03      	subs	r3, r0, #0
 800a8a0:	d000      	beq.n	800a8a4 <ADC_Enable+0x1c>
 800a8a2:	e069      	b.n	800a978 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	4a36      	ldr	r2, [pc, #216]	; (800a984 <ADC_Enable+0xfc>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	d00d      	beq.n	800a8cc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8b4:	2210      	movs	r2, #16
 800a8b6:	431a      	orrs	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e056      	b.n	800a97a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	f7fe ff09 	bl	80096e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800a8d6:	4b2c      	ldr	r3, [pc, #176]	; (800a988 <ADC_Enable+0x100>)
 800a8d8:	0018      	movs	r0, r3
 800a8da:	f7fe fdc9 	bl	8009470 <LL_ADC_GetCommonPathInternalCh>
 800a8de:	0002      	movs	r2, r0
 800a8e0:	2380      	movs	r3, #128	; 0x80
 800a8e2:	041b      	lsls	r3, r3, #16
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	d00f      	beq.n	800a908 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a8e8:	4b28      	ldr	r3, [pc, #160]	; (800a98c <ADC_Enable+0x104>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4928      	ldr	r1, [pc, #160]	; (800a990 <ADC_Enable+0x108>)
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	f7fb fc7e 	bl	80061f0 <__udivsi3>
 800a8f4:	0003      	movs	r3, r0
 800a8f6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800a8f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a8fa:	e002      	b.n	800a902 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1f9      	bne.n	800a8fc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	7e5b      	ldrb	r3, [r3, #25]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d033      	beq.n	800a978 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800a910:	f7fe fd56 	bl	80093c0 <HAL_GetTick>
 800a914:	0003      	movs	r3, r0
 800a916:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a918:	e027      	b.n	800a96a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	0018      	movs	r0, r3
 800a920:	f7fe ff06 	bl	8009730 <LL_ADC_IsEnabled>
 800a924:	1e03      	subs	r3, r0, #0
 800a926:	d104      	bne.n	800a932 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	0018      	movs	r0, r3
 800a92e:	f7fe fedb 	bl	80096e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a932:	f7fe fd45 	bl	80093c0 <HAL_GetTick>
 800a936:	0002      	movs	r2, r0
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d914      	bls.n	800a96a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2201      	movs	r2, #1
 800a948:	4013      	ands	r3, r2
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d00d      	beq.n	800a96a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a952:	2210      	movs	r2, #16
 800a954:	431a      	orrs	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a95e:	2201      	movs	r2, #1
 800a960:	431a      	orrs	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e007      	b.n	800a97a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2201      	movs	r2, #1
 800a972:	4013      	ands	r3, r2
 800a974:	2b01      	cmp	r3, #1
 800a976:	d1d0      	bne.n	800a91a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	0018      	movs	r0, r3
 800a97c:	46bd      	mov	sp, r7
 800a97e:	b004      	add	sp, #16
 800a980:	bd80      	pop	{r7, pc}
 800a982:	46c0      	nop			; (mov r8, r8)
 800a984:	80000017 	.word	0x80000017
 800a988:	40012708 	.word	0x40012708
 800a98c:	20000058 	.word	0x20000058
 800a990:	00030d40 	.word	0x00030d40

0800a994 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	0018      	movs	r0, r3
 800a9a2:	f7fe fed6 	bl	8009752 <LL_ADC_IsDisableOngoing>
 800a9a6:	0003      	movs	r3, r0
 800a9a8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	0018      	movs	r0, r3
 800a9b0:	f7fe febe 	bl	8009730 <LL_ADC_IsEnabled>
 800a9b4:	1e03      	subs	r3, r0, #0
 800a9b6:	d046      	beq.n	800aa46 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d143      	bne.n	800aa46 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	2205      	movs	r2, #5
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d10d      	bne.n	800a9e8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	0018      	movs	r0, r3
 800a9d2:	f7fe fe9b 	bl	800970c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2203      	movs	r2, #3
 800a9dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a9de:	f7fe fcef 	bl	80093c0 <HAL_GetTick>
 800a9e2:	0003      	movs	r3, r0
 800a9e4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a9e6:	e028      	b.n	800aa3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ec:	2210      	movs	r2, #16
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e021      	b.n	800aa48 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800aa04:	f7fe fcdc 	bl	80093c0 <HAL_GetTick>
 800aa08:	0002      	movs	r2, r0
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d913      	bls.n	800aa3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	d00d      	beq.n	800aa3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa22:	2210      	movs	r2, #16
 800aa24:	431a      	orrs	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa2e:	2201      	movs	r2, #1
 800aa30:	431a      	orrs	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e006      	b.n	800aa48 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	2201      	movs	r2, #1
 800aa42:	4013      	ands	r3, r2
 800aa44:	d1de      	bne.n	800aa04 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	0018      	movs	r0, r3
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	b004      	add	sp, #16
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa62:	2250      	movs	r2, #80	; 0x50
 800aa64:	4013      	ands	r3, r2
 800aa66:	d141      	bne.n	800aaec <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa6c:	2280      	movs	r2, #128	; 0x80
 800aa6e:	0092      	lsls	r2, r2, #2
 800aa70:	431a      	orrs	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	0018      	movs	r0, r3
 800aa7c:	f7fe fd39 	bl	80094f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800aa80:	1e03      	subs	r3, r0, #0
 800aa82:	d02e      	beq.n	800aae2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	7e9b      	ldrb	r3, [r3, #26]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d12a      	bne.n	800aae2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2208      	movs	r2, #8
 800aa94:	4013      	ands	r3, r2
 800aa96:	2b08      	cmp	r3, #8
 800aa98:	d123      	bne.n	800aae2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	f7fe fe7a 	bl	8009798 <LL_ADC_REG_IsConversionOngoing>
 800aaa4:	1e03      	subs	r3, r0, #0
 800aaa6:	d110      	bne.n	800aaca <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	210c      	movs	r1, #12
 800aab4:	438a      	bics	r2, r1
 800aab6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aabc:	4a15      	ldr	r2, [pc, #84]	; (800ab14 <ADC_DMAConvCplt+0xc4>)
 800aabe:	4013      	ands	r3, r2
 800aac0:	2201      	movs	r2, #1
 800aac2:	431a      	orrs	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	659a      	str	r2, [r3, #88]	; 0x58
 800aac8:	e00b      	b.n	800aae2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aace:	2220      	movs	r2, #32
 800aad0:	431a      	orrs	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aada:	2201      	movs	r2, #1
 800aadc:	431a      	orrs	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	0018      	movs	r0, r3
 800aae6:	f7fb fe43 	bl	8006770 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800aaea:	e00f      	b.n	800ab0c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf0:	2210      	movs	r2, #16
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	d004      	beq.n	800ab00 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f7ff fa3b 	bl	8009f74 <HAL_ADC_ErrorCallback>
}
 800aafe:	e005      	b.n	800ab0c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	0010      	movs	r0, r2
 800ab0a:	4798      	blx	r3
}
 800ab0c:	46c0      	nop			; (mov r8, r8)
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	b004      	add	sp, #16
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	fffffefe 	.word	0xfffffefe

0800ab18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab24:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	0018      	movs	r0, r3
 800ab2a:	f7ff fa13 	bl	8009f54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ab2e:	46c0      	nop			; (mov r8, r8)
 800ab30:	46bd      	mov	sp, r7
 800ab32:	b004      	add	sp, #16
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b084      	sub	sp, #16
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab48:	2240      	movs	r2, #64	; 0x40
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab54:	2204      	movs	r2, #4
 800ab56:	431a      	orrs	r2, r3
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	0018      	movs	r0, r3
 800ab60:	f7ff fa08 	bl	8009f74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ab64:	46c0      	nop			; (mov r8, r8)
 800ab66:	46bd      	mov	sp, r7
 800ab68:	b004      	add	sp, #16
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <LL_ADC_GetCommonClock>:
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	23f0      	movs	r3, #240	; 0xf0
 800ab7a:	039b      	lsls	r3, r3, #14
 800ab7c:	4013      	ands	r3, r2
}
 800ab7e:	0018      	movs	r0, r3
 800ab80:	46bd      	mov	sp, r7
 800ab82:	b002      	add	sp, #8
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <LL_ADC_GetClock>:
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b082      	sub	sp, #8
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	0f9b      	lsrs	r3, r3, #30
 800ab94:	079b      	lsls	r3, r3, #30
}
 800ab96:	0018      	movs	r0, r3
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	b002      	add	sp, #8
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <LL_ADC_SetCalibrationFactor>:
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	22b4      	movs	r2, #180	; 0xb4
 800abac:	589b      	ldr	r3, [r3, r2]
 800abae:	227f      	movs	r2, #127	; 0x7f
 800abb0:	4393      	bics	r3, r2
 800abb2:	001a      	movs	r2, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	431a      	orrs	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	21b4      	movs	r1, #180	; 0xb4
 800abbc:	505a      	str	r2, [r3, r1]
}
 800abbe:	46c0      	nop			; (mov r8, r8)
 800abc0:	46bd      	mov	sp, r7
 800abc2:	b002      	add	sp, #8
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <LL_ADC_GetCalibrationFactor>:
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b082      	sub	sp, #8
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	22b4      	movs	r2, #180	; 0xb4
 800abd2:	589b      	ldr	r3, [r3, r2]
 800abd4:	227f      	movs	r2, #127	; 0x7f
 800abd6:	4013      	ands	r3, r2
}
 800abd8:	0018      	movs	r0, r3
 800abda:	46bd      	mov	sp, r7
 800abdc:	b002      	add	sp, #8
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <LL_ADC_Enable>:
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	4a04      	ldr	r2, [pc, #16]	; (800ac00 <LL_ADC_Enable+0x20>)
 800abee:	4013      	ands	r3, r2
 800abf0:	2201      	movs	r2, #1
 800abf2:	431a      	orrs	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	609a      	str	r2, [r3, #8]
}
 800abf8:	46c0      	nop			; (mov r8, r8)
 800abfa:	46bd      	mov	sp, r7
 800abfc:	b002      	add	sp, #8
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	7fffffe8 	.word	0x7fffffe8

0800ac04 <LL_ADC_Disable>:
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	4a04      	ldr	r2, [pc, #16]	; (800ac24 <LL_ADC_Disable+0x20>)
 800ac12:	4013      	ands	r3, r2
 800ac14:	2202      	movs	r2, #2
 800ac16:	431a      	orrs	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	609a      	str	r2, [r3, #8]
}
 800ac1c:	46c0      	nop			; (mov r8, r8)
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	b002      	add	sp, #8
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	7fffffe8 	.word	0x7fffffe8

0800ac28 <LL_ADC_IsEnabled>:
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	2201      	movs	r2, #1
 800ac36:	4013      	ands	r3, r2
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d101      	bne.n	800ac40 <LL_ADC_IsEnabled+0x18>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e000      	b.n	800ac42 <LL_ADC_IsEnabled+0x1a>
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	0018      	movs	r0, r3
 800ac44:	46bd      	mov	sp, r7
 800ac46:	b002      	add	sp, #8
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <LL_ADC_StartCalibration>:
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	4a05      	ldr	r2, [pc, #20]	; (800ac70 <LL_ADC_StartCalibration+0x24>)
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	2280      	movs	r2, #128	; 0x80
 800ac5e:	0612      	lsls	r2, r2, #24
 800ac60:	431a      	orrs	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	609a      	str	r2, [r3, #8]
}
 800ac66:	46c0      	nop			; (mov r8, r8)
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	b002      	add	sp, #8
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	46c0      	nop			; (mov r8, r8)
 800ac70:	7fffffe8 	.word	0x7fffffe8

0800ac74 <LL_ADC_IsCalibrationOnGoing>:
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	0fdb      	lsrs	r3, r3, #31
 800ac82:	07da      	lsls	r2, r3, #31
 800ac84:	2380      	movs	r3, #128	; 0x80
 800ac86:	061b      	lsls	r3, r3, #24
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d101      	bne.n	800ac90 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e000      	b.n	800ac92 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	0018      	movs	r0, r3
 800ac94:	46bd      	mov	sp, r7
 800ac96:	b002      	add	sp, #8
 800ac98:	bd80      	pop	{r7, pc}
	...

0800ac9c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800ac9c:	b590      	push	{r4, r7, lr}
 800ac9e:	b08b      	sub	sp, #44	; 0x2c
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2254      	movs	r2, #84	; 0x54
 800acb0:	5c9b      	ldrb	r3, [r3, r2]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d101      	bne.n	800acba <HAL_ADCEx_Calibration_Start+0x1e>
 800acb6:	2302      	movs	r3, #2
 800acb8:	e0dd      	b.n	800ae76 <HAL_ADCEx_Calibration_Start+0x1da>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2254      	movs	r2, #84	; 0x54
 800acbe:	2101      	movs	r1, #1
 800acc0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800acc2:	231f      	movs	r3, #31
 800acc4:	18fc      	adds	r4, r7, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	0018      	movs	r0, r3
 800acca:	f7ff fe63 	bl	800a994 <ADC_Disable>
 800acce:	0003      	movs	r3, r0
 800acd0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	0018      	movs	r0, r3
 800acd8:	f7ff ffa6 	bl	800ac28 <LL_ADC_IsEnabled>
 800acdc:	1e03      	subs	r3, r0, #0
 800acde:	d000      	beq.n	800ace2 <HAL_ADCEx_Calibration_Start+0x46>
 800ace0:	e0bc      	b.n	800ae5c <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ace6:	4a66      	ldr	r2, [pc, #408]	; (800ae80 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800ace8:	4013      	ands	r3, r2
 800acea:	2202      	movs	r2, #2
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	4a62      	ldr	r2, [pc, #392]	; (800ae84 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800acfa:	4013      	ands	r3, r2
 800acfc:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	495f      	ldr	r1, [pc, #380]	; (800ae88 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800ad0a:	400a      	ands	r2, r1
 800ad0c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800ad0e:	2300      	movs	r3, #0
 800ad10:	627b      	str	r3, [r7, #36]	; 0x24
 800ad12:	e02d      	b.n	800ad70 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	0018      	movs	r0, r3
 800ad1a:	f7ff ff97 	bl	800ac4c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ad1e:	e014      	b.n	800ad4a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3301      	adds	r3, #1
 800ad24:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	4a58      	ldr	r2, [pc, #352]	; (800ae8c <HAL_ADCEx_Calibration_Start+0x1f0>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d90d      	bls.n	800ad4a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad32:	2212      	movs	r2, #18
 800ad34:	4393      	bics	r3, r2
 800ad36:	2210      	movs	r2, #16
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2254      	movs	r2, #84	; 0x54
 800ad42:	2100      	movs	r1, #0
 800ad44:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e095      	b.n	800ae76 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	0018      	movs	r0, r3
 800ad50:	f7ff ff90 	bl	800ac74 <LL_ADC_IsCalibrationOnGoing>
 800ad54:	1e03      	subs	r3, r0, #0
 800ad56:	d1e3      	bne.n	800ad20 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	f7ff ff32 	bl	800abc6 <LL_ADC_GetCalibrationFactor>
 800ad62:	0002      	movs	r2, r0
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	189b      	adds	r3, r3, r2
 800ad68:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	2b07      	cmp	r3, #7
 800ad74:	d9ce      	bls.n	800ad14 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800ad76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad78:	6a38      	ldr	r0, [r7, #32]
 800ad7a:	f7fb fa39 	bl	80061f0 <__udivsi3>
 800ad7e:	0003      	movs	r3, r0
 800ad80:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	0018      	movs	r0, r3
 800ad88:	f7ff ff2a 	bl	800abe0 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	0018      	movs	r0, r3
 800ad92:	f7ff fef8 	bl	800ab86 <LL_ADC_GetClock>
 800ad96:	1e03      	subs	r3, r0, #0
 800ad98:	d11b      	bne.n	800add2 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ad9a:	4b3d      	ldr	r3, [pc, #244]	; (800ae90 <HAL_ADCEx_Calibration_Start+0x1f4>)
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	f7ff fee5 	bl	800ab6c <LL_ADC_GetCommonClock>
 800ada2:	0003      	movs	r3, r0
 800ada4:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	23e0      	movs	r3, #224	; 0xe0
 800adaa:	035b      	lsls	r3, r3, #13
 800adac:	429a      	cmp	r2, r3
 800adae:	d310      	bcc.n	800add2 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	0c9b      	lsrs	r3, r3, #18
 800adb4:	3b03      	subs	r3, #3
 800adb6:	2201      	movs	r2, #1
 800adb8:	409a      	lsls	r2, r3
 800adba:	0013      	movs	r3, r2
 800adbc:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	085b      	lsrs	r3, r3, #1
 800adc2:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800adc4:	e002      	b.n	800adcc <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	3b01      	subs	r3, #1
 800adca:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1f9      	bne.n	800adc6 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6a3a      	ldr	r2, [r7, #32]
 800add8:	0011      	movs	r1, r2
 800adda:	0018      	movs	r0, r3
 800addc:	f7ff fedf 	bl	800ab9e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	0018      	movs	r0, r3
 800ade6:	f7ff ff0d 	bl	800ac04 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800adea:	f7fe fae9 	bl	80093c0 <HAL_GetTick>
 800adee:	0003      	movs	r3, r0
 800adf0:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800adf2:	e01b      	b.n	800ae2c <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800adf4:	f7fe fae4 	bl	80093c0 <HAL_GetTick>
 800adf8:	0002      	movs	r2, r0
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d914      	bls.n	800ae2c <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	0018      	movs	r0, r3
 800ae08:	f7ff ff0e 	bl	800ac28 <LL_ADC_IsEnabled>
 800ae0c:	1e03      	subs	r3, r0, #0
 800ae0e:	d00d      	beq.n	800ae2c <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae14:	2210      	movs	r2, #16
 800ae16:	431a      	orrs	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae20:	2201      	movs	r2, #1
 800ae22:	431a      	orrs	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e024      	b.n	800ae76 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	0018      	movs	r0, r3
 800ae32:	f7ff fef9 	bl	800ac28 <LL_ADC_IsEnabled>
 800ae36:	1e03      	subs	r3, r0, #0
 800ae38:	d1dc      	bne.n	800adf4 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68d9      	ldr	r1, [r3, #12]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	69ba      	ldr	r2, [r7, #24]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4e:	2203      	movs	r2, #3
 800ae50:	4393      	bics	r3, r2
 800ae52:	2201      	movs	r2, #1
 800ae54:	431a      	orrs	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	659a      	str	r2, [r3, #88]	; 0x58
 800ae5a:	e005      	b.n	800ae68 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae60:	2210      	movs	r2, #16
 800ae62:	431a      	orrs	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2254      	movs	r2, #84	; 0x54
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800ae70:	231f      	movs	r3, #31
 800ae72:	18fb      	adds	r3, r7, r3
 800ae74:	781b      	ldrb	r3, [r3, #0]
}
 800ae76:	0018      	movs	r0, r3
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b00b      	add	sp, #44	; 0x2c
 800ae7c:	bd90      	pop	{r4, r7, pc}
 800ae7e:	46c0      	nop			; (mov r8, r8)
 800ae80:	fffffefd 	.word	0xfffffefd
 800ae84:	00008003 	.word	0x00008003
 800ae88:	ffff7ffc 	.word	0xffff7ffc
 800ae8c:	0002f1ff 	.word	0x0002f1ff
 800ae90:	40012708 	.word	0x40012708

0800ae94 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800ae9c:	46c0      	nop			; (mov r8, r8)
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	b002      	add	sp, #8
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800aeac:	46c0      	nop			; (mov r8, r8)
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	b002      	add	sp, #8
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800aebc:	46c0      	nop			; (mov r8, r8)
 800aebe:	46bd      	mov	sp, r7
 800aec0:	b002      	add	sp, #8
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <__NVIC_EnableIRQ>:
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	0002      	movs	r2, r0
 800aecc:	1dfb      	adds	r3, r7, #7
 800aece:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aed0:	1dfb      	adds	r3, r7, #7
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b7f      	cmp	r3, #127	; 0x7f
 800aed6:	d809      	bhi.n	800aeec <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aed8:	1dfb      	adds	r3, r7, #7
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	001a      	movs	r2, r3
 800aede:	231f      	movs	r3, #31
 800aee0:	401a      	ands	r2, r3
 800aee2:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <__NVIC_EnableIRQ+0x30>)
 800aee4:	2101      	movs	r1, #1
 800aee6:	4091      	lsls	r1, r2
 800aee8:	000a      	movs	r2, r1
 800aeea:	601a      	str	r2, [r3, #0]
}
 800aeec:	46c0      	nop			; (mov r8, r8)
 800aeee:	46bd      	mov	sp, r7
 800aef0:	b002      	add	sp, #8
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	e000e100 	.word	0xe000e100

0800aef8 <__NVIC_SetPriority>:
{
 800aef8:	b590      	push	{r4, r7, lr}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	0002      	movs	r2, r0
 800af00:	6039      	str	r1, [r7, #0]
 800af02:	1dfb      	adds	r3, r7, #7
 800af04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800af06:	1dfb      	adds	r3, r7, #7
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b7f      	cmp	r3, #127	; 0x7f
 800af0c:	d828      	bhi.n	800af60 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af0e:	4a2f      	ldr	r2, [pc, #188]	; (800afcc <__NVIC_SetPriority+0xd4>)
 800af10:	1dfb      	adds	r3, r7, #7
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	b25b      	sxtb	r3, r3
 800af16:	089b      	lsrs	r3, r3, #2
 800af18:	33c0      	adds	r3, #192	; 0xc0
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	589b      	ldr	r3, [r3, r2]
 800af1e:	1dfa      	adds	r2, r7, #7
 800af20:	7812      	ldrb	r2, [r2, #0]
 800af22:	0011      	movs	r1, r2
 800af24:	2203      	movs	r2, #3
 800af26:	400a      	ands	r2, r1
 800af28:	00d2      	lsls	r2, r2, #3
 800af2a:	21ff      	movs	r1, #255	; 0xff
 800af2c:	4091      	lsls	r1, r2
 800af2e:	000a      	movs	r2, r1
 800af30:	43d2      	mvns	r2, r2
 800af32:	401a      	ands	r2, r3
 800af34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	019b      	lsls	r3, r3, #6
 800af3a:	22ff      	movs	r2, #255	; 0xff
 800af3c:	401a      	ands	r2, r3
 800af3e:	1dfb      	adds	r3, r7, #7
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	0018      	movs	r0, r3
 800af44:	2303      	movs	r3, #3
 800af46:	4003      	ands	r3, r0
 800af48:	00db      	lsls	r3, r3, #3
 800af4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af4c:	481f      	ldr	r0, [pc, #124]	; (800afcc <__NVIC_SetPriority+0xd4>)
 800af4e:	1dfb      	adds	r3, r7, #7
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	b25b      	sxtb	r3, r3
 800af54:	089b      	lsrs	r3, r3, #2
 800af56:	430a      	orrs	r2, r1
 800af58:	33c0      	adds	r3, #192	; 0xc0
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	501a      	str	r2, [r3, r0]
}
 800af5e:	e031      	b.n	800afc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af60:	4a1b      	ldr	r2, [pc, #108]	; (800afd0 <__NVIC_SetPriority+0xd8>)
 800af62:	1dfb      	adds	r3, r7, #7
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	0019      	movs	r1, r3
 800af68:	230f      	movs	r3, #15
 800af6a:	400b      	ands	r3, r1
 800af6c:	3b08      	subs	r3, #8
 800af6e:	089b      	lsrs	r3, r3, #2
 800af70:	3306      	adds	r3, #6
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	18d3      	adds	r3, r2, r3
 800af76:	3304      	adds	r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	1dfa      	adds	r2, r7, #7
 800af7c:	7812      	ldrb	r2, [r2, #0]
 800af7e:	0011      	movs	r1, r2
 800af80:	2203      	movs	r2, #3
 800af82:	400a      	ands	r2, r1
 800af84:	00d2      	lsls	r2, r2, #3
 800af86:	21ff      	movs	r1, #255	; 0xff
 800af88:	4091      	lsls	r1, r2
 800af8a:	000a      	movs	r2, r1
 800af8c:	43d2      	mvns	r2, r2
 800af8e:	401a      	ands	r2, r3
 800af90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	019b      	lsls	r3, r3, #6
 800af96:	22ff      	movs	r2, #255	; 0xff
 800af98:	401a      	ands	r2, r3
 800af9a:	1dfb      	adds	r3, r7, #7
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	0018      	movs	r0, r3
 800afa0:	2303      	movs	r3, #3
 800afa2:	4003      	ands	r3, r0
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800afa8:	4809      	ldr	r0, [pc, #36]	; (800afd0 <__NVIC_SetPriority+0xd8>)
 800afaa:	1dfb      	adds	r3, r7, #7
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	001c      	movs	r4, r3
 800afb0:	230f      	movs	r3, #15
 800afb2:	4023      	ands	r3, r4
 800afb4:	3b08      	subs	r3, #8
 800afb6:	089b      	lsrs	r3, r3, #2
 800afb8:	430a      	orrs	r2, r1
 800afba:	3306      	adds	r3, #6
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	18c3      	adds	r3, r0, r3
 800afc0:	3304      	adds	r3, #4
 800afc2:	601a      	str	r2, [r3, #0]
}
 800afc4:	46c0      	nop			; (mov r8, r8)
 800afc6:	46bd      	mov	sp, r7
 800afc8:	b003      	add	sp, #12
 800afca:	bd90      	pop	{r4, r7, pc}
 800afcc:	e000e100 	.word	0xe000e100
 800afd0:	e000ed00 	.word	0xe000ed00

0800afd4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800afd8:	f3bf 8f4f 	dsb	sy
}
 800afdc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800afde:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <__NVIC_SystemReset+0x1c>)
 800afe0:	4a04      	ldr	r2, [pc, #16]	; (800aff4 <__NVIC_SystemReset+0x20>)
 800afe2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800afe4:	f3bf 8f4f 	dsb	sy
}
 800afe8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	e7fd      	b.n	800afea <__NVIC_SystemReset+0x16>
 800afee:	46c0      	nop			; (mov r8, r8)
 800aff0:	e000ed00 	.word	0xe000ed00
 800aff4:	05fa0004 	.word	0x05fa0004

0800aff8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	60b9      	str	r1, [r7, #8]
 800b000:	607a      	str	r2, [r7, #4]
 800b002:	210f      	movs	r1, #15
 800b004:	187b      	adds	r3, r7, r1
 800b006:	1c02      	adds	r2, r0, #0
 800b008:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	187b      	adds	r3, r7, r1
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	b25b      	sxtb	r3, r3
 800b012:	0011      	movs	r1, r2
 800b014:	0018      	movs	r0, r3
 800b016:	f7ff ff6f 	bl	800aef8 <__NVIC_SetPriority>
}
 800b01a:	46c0      	nop			; (mov r8, r8)
 800b01c:	46bd      	mov	sp, r7
 800b01e:	b004      	add	sp, #16
 800b020:	bd80      	pop	{r7, pc}

0800b022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	0002      	movs	r2, r0
 800b02a:	1dfb      	adds	r3, r7, #7
 800b02c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b02e:	1dfb      	adds	r3, r7, #7
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	b25b      	sxtb	r3, r3
 800b034:	0018      	movs	r0, r3
 800b036:	f7ff ff45 	bl	800aec4 <__NVIC_EnableIRQ>
}
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	46bd      	mov	sp, r7
 800b03e:	b002      	add	sp, #8
 800b040:	bd80      	pop	{r7, pc}

0800b042 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b046:	f7ff ffc5 	bl	800afd4 <__NVIC_SystemReset>

0800b04a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b082      	sub	sp, #8
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e015      	b.n	800b088 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	791b      	ldrb	r3, [r3, #4]
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b00      	cmp	r3, #0
 800b064:	d106      	bne.n	800b074 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	0018      	movs	r0, r3
 800b070:	f7fd fe52 	bl	8008d18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2202      	movs	r2, #2
 800b078:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	0018      	movs	r0, r3
 800b08a:	46bd      	mov	sp, r7
 800b08c:	b002      	add	sp, #8
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e047      	b.n	800b134 <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	795b      	ldrb	r3, [r3, #5]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d101      	bne.n	800b0b0 <HAL_DAC_Start+0x20>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e041      	b.n	800b134 <HAL_DAC_Start+0xa4>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2202      	movs	r2, #2
 800b0ba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6819      	ldr	r1, [r3, #0]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2210      	movs	r2, #16
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	409a      	lsls	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	430a      	orrs	r2, r1
 800b0d2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10f      	bne.n	800b0fa <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	223e      	movs	r2, #62	; 0x3e
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d11e      	bne.n	800b126 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	605a      	str	r2, [r3, #4]
 800b0f8:	e015      	b.n	800b126 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	23f8      	movs	r3, #248	; 0xf8
 800b102:	039b      	lsls	r3, r3, #14
 800b104:	401a      	ands	r2, r3
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	2110      	movs	r1, #16
 800b10a:	400b      	ands	r3, r1
 800b10c:	2102      	movs	r1, #2
 800b10e:	4099      	lsls	r1, r3
 800b110:	000b      	movs	r3, r1
 800b112:	429a      	cmp	r2, r3
 800b114:	d107      	bne.n	800b126 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2102      	movs	r1, #2
 800b122:	430a      	orrs	r2, r1
 800b124:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	0018      	movs	r0, r3
 800b136:	46bd      	mov	sp, r7
 800b138:	b002      	add	sp, #8
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b152:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	2380      	movs	r3, #128	; 0x80
 800b158:	019b      	lsls	r3, r3, #6
 800b15a:	4013      	ands	r3, r2
 800b15c:	d01e      	beq.n	800b19c <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	2380      	movs	r3, #128	; 0x80
 800b162:	019b      	lsls	r3, r3, #6
 800b164:	4013      	ands	r3, r2
 800b166:	d019      	beq.n	800b19c <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2204      	movs	r2, #4
 800b16c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	2201      	movs	r2, #1
 800b174:	431a      	orrs	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2280      	movs	r2, #128	; 0x80
 800b180:	0192      	lsls	r2, r2, #6
 800b182:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4917      	ldr	r1, [pc, #92]	; (800b1ec <HAL_DAC_IRQHandler+0xb0>)
 800b190:	400a      	ands	r2, r1
 800b192:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	0018      	movs	r0, r3
 800b198:	f000 f853 	bl	800b242 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	2380      	movs	r3, #128	; 0x80
 800b1a0:	059b      	lsls	r3, r3, #22
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	d01e      	beq.n	800b1e4 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	2380      	movs	r3, #128	; 0x80
 800b1aa:	059b      	lsls	r3, r3, #22
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	d019      	beq.n	800b1e4 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2280      	movs	r2, #128	; 0x80
 800b1c8:	0592      	lsls	r2, r2, #22
 800b1ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4906      	ldr	r1, [pc, #24]	; (800b1f0 <HAL_DAC_IRQHandler+0xb4>)
 800b1d8:	400a      	ands	r2, r1
 800b1da:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	0018      	movs	r0, r3
 800b1e0:	f000 f968 	bl	800b4b4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800b1e4:	46c0      	nop			; (mov r8, r8)
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	b004      	add	sp, #16
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	ffffefff 	.word	0xffffefff
 800b1f0:	efffffff 	.word	0xefffffff

0800b1f4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e014      	b.n	800b23a <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d105      	bne.n	800b228 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	18d3      	adds	r3, r2, r3
 800b222:	3308      	adds	r3, #8
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e004      	b.n	800b232 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	18d3      	adds	r3, r2, r3
 800b22e:	3314      	adds	r3, #20
 800b230:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	0018      	movs	r0, r3
 800b23c:	46bd      	mov	sp, r7
 800b23e:	b006      	add	sp, #24
 800b240:	bd80      	pop	{r7, pc}

0800b242 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b082      	sub	sp, #8
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800b24a:	46c0      	nop			; (mov r8, r8)
 800b24c:	46bd      	mov	sp, r7
 800b24e:	b002      	add	sp, #8
 800b250:	bd80      	pop	{r7, pc}
	...

0800b254 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b088      	sub	sp, #32
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b260:	231f      	movs	r3, #31
 800b262:	18fb      	adds	r3, r7, r3
 800b264:	2200      	movs	r2, #0
 800b266:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <HAL_DAC_ConfigChannel+0x20>
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e115      	b.n	800b4a4 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	795b      	ldrb	r3, [r3, #5]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d101      	bne.n	800b284 <HAL_DAC_ConfigChannel+0x30>
 800b280:	2302      	movs	r3, #2
 800b282:	e10f      	b.n	800b4a4 <HAL_DAC_ConfigChannel+0x250>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2201      	movs	r2, #1
 800b288:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2202      	movs	r2, #2
 800b28e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b04      	cmp	r3, #4
 800b296:	d000      	beq.n	800b29a <HAL_DAC_ConfigChannel+0x46>
 800b298:	e07a      	b.n	800b390 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800b29a:	f7fe f891 	bl	80093c0 <HAL_GetTick>
 800b29e:	0003      	movs	r3, r0
 800b2a0:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d13d      	bne.n	800b324 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b2a8:	e018      	b.n	800b2dc <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b2aa:	f7fe f889 	bl	80093c0 <HAL_GetTick>
 800b2ae:	0002      	movs	r2, r0
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d911      	bls.n	800b2dc <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2be:	2380      	movs	r3, #128	; 0x80
 800b2c0:	021b      	lsls	r3, r3, #8
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	d00a      	beq.n	800b2dc <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	2208      	movs	r2, #8
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2203      	movs	r2, #3
 800b2d6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e0e3      	b.n	800b4a4 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2e2:	2380      	movs	r3, #128	; 0x80
 800b2e4:	021b      	lsls	r3, r3, #8
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	d1df      	bne.n	800b2aa <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	6992      	ldr	r2, [r2, #24]
 800b2f2:	641a      	str	r2, [r3, #64]	; 0x40
 800b2f4:	e020      	b.n	800b338 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b2f6:	f7fe f863 	bl	80093c0 <HAL_GetTick>
 800b2fa:	0002      	movs	r2, r0
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	2b01      	cmp	r3, #1
 800b302:	d90f      	bls.n	800b324 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da0a      	bge.n	800b324 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	2208      	movs	r2, #8
 800b314:	431a      	orrs	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2203      	movs	r2, #3
 800b31e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e0bf      	b.n	800b4a4 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	dbe3      	blt.n	800b2f6 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	6992      	ldr	r2, [r2, #24]
 800b336:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	2110      	movs	r1, #16
 800b342:	400a      	ands	r2, r1
 800b344:	4959      	ldr	r1, [pc, #356]	; (800b4ac <HAL_DAC_ConfigChannel+0x258>)
 800b346:	4091      	lsls	r1, r2
 800b348:	000a      	movs	r2, r1
 800b34a:	43d2      	mvns	r2, r2
 800b34c:	401a      	ands	r2, r3
 800b34e:	0011      	movs	r1, r2
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	69da      	ldr	r2, [r3, #28]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2010      	movs	r0, #16
 800b358:	4003      	ands	r3, r0
 800b35a:	409a      	lsls	r2, r3
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	430a      	orrs	r2, r1
 800b362:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	2110      	movs	r1, #16
 800b36e:	400a      	ands	r2, r1
 800b370:	21ff      	movs	r1, #255	; 0xff
 800b372:	4091      	lsls	r1, r2
 800b374:	000a      	movs	r2, r1
 800b376:	43d2      	mvns	r2, r2
 800b378:	401a      	ands	r2, r3
 800b37a:	0011      	movs	r1, r2
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	6a1a      	ldr	r2, [r3, #32]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2010      	movs	r0, #16
 800b384:	4003      	ands	r3, r0
 800b386:	409a      	lsls	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d11d      	bne.n	800b3d4 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2210      	movs	r2, #16
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	221f      	movs	r2, #31
 800b3a8:	409a      	lsls	r2, r3
 800b3aa:	0013      	movs	r3, r2
 800b3ac:	43da      	mvns	r2, r3
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2210      	movs	r2, #16
 800b3be:	4013      	ands	r3, r2
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	409a      	lsls	r2, r3
 800b3c4:	0013      	movs	r3, r2
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3da:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2210      	movs	r2, #16
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	2207      	movs	r2, #7
 800b3e4:	409a      	lsls	r2, r3
 800b3e6:	0013      	movs	r3, r2
 800b3e8:	43da      	mvns	r2, r3
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2210      	movs	r2, #16
 800b406:	4013      	ands	r3, r2
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	409a      	lsls	r2, r3
 800b40c:	0013      	movs	r3, r2
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	4313      	orrs	r3, r2
 800b412:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2110      	movs	r1, #16
 800b426:	400b      	ands	r3, r1
 800b428:	2180      	movs	r1, #128	; 0x80
 800b42a:	01c9      	lsls	r1, r1, #7
 800b42c:	4099      	lsls	r1, r3
 800b42e:	000b      	movs	r3, r1
 800b430:	43d9      	mvns	r1, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	400a      	ands	r2, r1
 800b438:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2210      	movs	r2, #16
 800b446:	4013      	ands	r3, r2
 800b448:	4a19      	ldr	r2, [pc, #100]	; (800b4b0 <HAL_DAC_ConfigChannel+0x25c>)
 800b44a:	409a      	lsls	r2, r3
 800b44c:	0013      	movs	r3, r2
 800b44e:	43da      	mvns	r2, r3
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	4013      	ands	r3, r2
 800b454:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2210      	movs	r2, #16
 800b460:	4013      	ands	r3, r2
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	409a      	lsls	r2, r3
 800b466:	0013      	movs	r3, r2
 800b468:	697a      	ldr	r2, [r7, #20]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2110      	movs	r1, #16
 800b480:	400b      	ands	r3, r1
 800b482:	21c0      	movs	r1, #192	; 0xc0
 800b484:	4099      	lsls	r1, r3
 800b486:	000b      	movs	r3, r1
 800b488:	43d9      	mvns	r1, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	400a      	ands	r2, r1
 800b490:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2201      	movs	r2, #1
 800b496:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800b49e:	231f      	movs	r3, #31
 800b4a0:	18fb      	adds	r3, r7, r3
 800b4a2:	781b      	ldrb	r3, [r3, #0]
}
 800b4a4:	0018      	movs	r0, r3
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	b008      	add	sp, #32
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	000003ff 	.word	0x000003ff
 800b4b0:	00000ffe 	.word	0x00000ffe

0800b4b4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800b4bc:	46c0      	nop			; (mov r8, r8)
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	b002      	add	sp, #8
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e091      	b.n	800b5fa <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	001a      	movs	r2, r3
 800b4dc:	4b49      	ldr	r3, [pc, #292]	; (800b604 <HAL_DMA_Init+0x140>)
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d810      	bhi.n	800b504 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a48      	ldr	r2, [pc, #288]	; (800b608 <HAL_DMA_Init+0x144>)
 800b4e8:	4694      	mov	ip, r2
 800b4ea:	4463      	add	r3, ip
 800b4ec:	2114      	movs	r1, #20
 800b4ee:	0018      	movs	r0, r3
 800b4f0:	f7fa fe7e 	bl	80061f0 <__udivsi3>
 800b4f4:	0003      	movs	r3, r0
 800b4f6:	009a      	lsls	r2, r3, #2
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a43      	ldr	r2, [pc, #268]	; (800b60c <HAL_DMA_Init+0x148>)
 800b500:	641a      	str	r2, [r3, #64]	; 0x40
 800b502:	e00f      	b.n	800b524 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a41      	ldr	r2, [pc, #260]	; (800b610 <HAL_DMA_Init+0x14c>)
 800b50a:	4694      	mov	ip, r2
 800b50c:	4463      	add	r3, ip
 800b50e:	2114      	movs	r1, #20
 800b510:	0018      	movs	r0, r3
 800b512:	f7fa fe6d 	bl	80061f0 <__udivsi3>
 800b516:	0003      	movs	r3, r0
 800b518:	009a      	lsls	r2, r3, #2
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a3c      	ldr	r2, [pc, #240]	; (800b614 <HAL_DMA_Init+0x150>)
 800b522:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2225      	movs	r2, #37	; 0x25
 800b528:	2102      	movs	r1, #2
 800b52a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4938      	ldr	r1, [pc, #224]	; (800b618 <HAL_DMA_Init+0x154>)
 800b538:	400a      	ands	r2, r1
 800b53a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6819      	ldr	r1, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	431a      	orrs	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	431a      	orrs	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	695b      	ldr	r3, [r3, #20]
 800b556:	431a      	orrs	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	431a      	orrs	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	69db      	ldr	r3, [r3, #28]
 800b562:	431a      	orrs	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	431a      	orrs	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	430a      	orrs	r2, r1
 800b570:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	0018      	movs	r0, r3
 800b576:	f000 f9d7 	bl	800b928 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	689a      	ldr	r2, [r3, #8]
 800b57e:	2380      	movs	r3, #128	; 0x80
 800b580:	01db      	lsls	r3, r3, #7
 800b582:	429a      	cmp	r2, r3
 800b584:	d102      	bne.n	800b58c <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b594:	217f      	movs	r1, #127	; 0x7f
 800b596:	400a      	ands	r2, r1
 800b598:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b5a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d011      	beq.n	800b5d0 <HAL_DMA_Init+0x10c>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d80d      	bhi.n	800b5d0 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	0018      	movs	r0, r3
 800b5b8:	f000 fa00 	bl	800b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b5cc:	605a      	str	r2, [r3, #4]
 800b5ce:	e008      	b.n	800b5e2 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2225      	movs	r2, #37	; 0x25
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2224      	movs	r2, #36	; 0x24
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	0018      	movs	r0, r3
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	b002      	add	sp, #8
 800b600:	bd80      	pop	{r7, pc}
 800b602:	46c0      	nop			; (mov r8, r8)
 800b604:	40020407 	.word	0x40020407
 800b608:	bffdfff8 	.word	0xbffdfff8
 800b60c:	40020000 	.word	0x40020000
 800b610:	bffdfbf8 	.word	0xbffdfbf8
 800b614:	40020400 	.word	0x40020400
 800b618:	ffff800f 	.word	0xffff800f

0800b61c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b62a:	2317      	movs	r3, #23
 800b62c:	18fb      	adds	r3, r7, r3
 800b62e:	2200      	movs	r2, #0
 800b630:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2224      	movs	r2, #36	; 0x24
 800b636:	5c9b      	ldrb	r3, [r3, r2]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d101      	bne.n	800b640 <HAL_DMA_Start_IT+0x24>
 800b63c:	2302      	movs	r3, #2
 800b63e:	e06f      	b.n	800b720 <HAL_DMA_Start_IT+0x104>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2224      	movs	r2, #36	; 0x24
 800b644:	2101      	movs	r1, #1
 800b646:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2225      	movs	r2, #37	; 0x25
 800b64c:	5c9b      	ldrb	r3, [r3, r2]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b01      	cmp	r3, #1
 800b652:	d157      	bne.n	800b704 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2225      	movs	r2, #37	; 0x25
 800b658:	2102      	movs	r1, #2
 800b65a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2101      	movs	r1, #1
 800b66e:	438a      	bics	r2, r1
 800b670:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	68b9      	ldr	r1, [r7, #8]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f919 	bl	800b8b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b682:	2b00      	cmp	r3, #0
 800b684:	d008      	beq.n	800b698 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	210e      	movs	r1, #14
 800b692:	430a      	orrs	r2, r1
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	e00f      	b.n	800b6b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2104      	movs	r1, #4
 800b6a4:	438a      	bics	r2, r1
 800b6a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	210a      	movs	r1, #10
 800b6b4:	430a      	orrs	r2, r1
 800b6b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	2380      	movs	r3, #128	; 0x80
 800b6c0:	025b      	lsls	r3, r3, #9
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	d008      	beq.n	800b6d8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6d0:	2180      	movs	r1, #128	; 0x80
 800b6d2:	0049      	lsls	r1, r1, #1
 800b6d4:	430a      	orrs	r2, r1
 800b6d6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d008      	beq.n	800b6f2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ea:	2180      	movs	r1, #128	; 0x80
 800b6ec:	0049      	lsls	r1, r1, #1
 800b6ee:	430a      	orrs	r2, r1
 800b6f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	430a      	orrs	r2, r1
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	e00a      	b.n	800b71a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2280      	movs	r2, #128	; 0x80
 800b708:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2224      	movs	r2, #36	; 0x24
 800b70e:	2100      	movs	r1, #0
 800b710:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800b712:	2317      	movs	r3, #23
 800b714:	18fb      	adds	r3, r7, r3
 800b716:	2201      	movs	r2, #1
 800b718:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b71a:	2317      	movs	r3, #23
 800b71c:	18fb      	adds	r3, r7, r3
 800b71e:	781b      	ldrb	r3, [r3, #0]
}
 800b720:	0018      	movs	r0, r3
 800b722:	46bd      	mov	sp, r7
 800b724:	b006      	add	sp, #24
 800b726:	bd80      	pop	{r7, pc}

0800b728 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b744:	221c      	movs	r2, #28
 800b746:	4013      	ands	r3, r2
 800b748:	2204      	movs	r2, #4
 800b74a:	409a      	lsls	r2, r3
 800b74c:	0013      	movs	r3, r2
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	4013      	ands	r3, r2
 800b752:	d026      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x7a>
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2204      	movs	r2, #4
 800b758:	4013      	ands	r3, r2
 800b75a:	d022      	beq.n	800b7a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2220      	movs	r2, #32
 800b764:	4013      	ands	r3, r2
 800b766:	d107      	bne.n	800b778 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2104      	movs	r1, #4
 800b774:	438a      	bics	r2, r1
 800b776:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b77c:	221c      	movs	r2, #28
 800b77e:	401a      	ands	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b784:	2104      	movs	r1, #4
 800b786:	4091      	lsls	r1, r2
 800b788:	000a      	movs	r2, r1
 800b78a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b790:	2b00      	cmp	r3, #0
 800b792:	d100      	bne.n	800b796 <HAL_DMA_IRQHandler+0x6e>
 800b794:	e080      	b.n	800b898 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	0010      	movs	r0, r2
 800b79e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800b7a0:	e07a      	b.n	800b898 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a6:	221c      	movs	r2, #28
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	409a      	lsls	r2, r3
 800b7ae:	0013      	movs	r3, r2
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	d03c      	beq.n	800b830 <HAL_DMA_IRQHandler+0x108>
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	d038      	beq.n	800b830 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2220      	movs	r2, #32
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	d10b      	bne.n	800b7e2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	210a      	movs	r1, #10
 800b7d6:	438a      	bics	r2, r1
 800b7d8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2225      	movs	r2, #37	; 0x25
 800b7de:	2101      	movs	r1, #1
 800b7e0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	001a      	movs	r2, r3
 800b7e8:	4b2e      	ldr	r3, [pc, #184]	; (800b8a4 <HAL_DMA_IRQHandler+0x17c>)
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d909      	bls.n	800b802 <HAL_DMA_IRQHandler+0xda>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7f2:	221c      	movs	r2, #28
 800b7f4:	401a      	ands	r2, r3
 800b7f6:	4b2c      	ldr	r3, [pc, #176]	; (800b8a8 <HAL_DMA_IRQHandler+0x180>)
 800b7f8:	2102      	movs	r1, #2
 800b7fa:	4091      	lsls	r1, r2
 800b7fc:	000a      	movs	r2, r1
 800b7fe:	605a      	str	r2, [r3, #4]
 800b800:	e008      	b.n	800b814 <HAL_DMA_IRQHandler+0xec>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b806:	221c      	movs	r2, #28
 800b808:	401a      	ands	r2, r3
 800b80a:	4b28      	ldr	r3, [pc, #160]	; (800b8ac <HAL_DMA_IRQHandler+0x184>)
 800b80c:	2102      	movs	r1, #2
 800b80e:	4091      	lsls	r1, r2
 800b810:	000a      	movs	r2, r1
 800b812:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2224      	movs	r2, #36	; 0x24
 800b818:	2100      	movs	r1, #0
 800b81a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	2b00      	cmp	r3, #0
 800b822:	d039      	beq.n	800b898 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	0010      	movs	r0, r2
 800b82c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800b82e:	e033      	b.n	800b898 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b834:	221c      	movs	r2, #28
 800b836:	4013      	ands	r3, r2
 800b838:	2208      	movs	r2, #8
 800b83a:	409a      	lsls	r2, r3
 800b83c:	0013      	movs	r3, r2
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	4013      	ands	r3, r2
 800b842:	d02a      	beq.n	800b89a <HAL_DMA_IRQHandler+0x172>
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2208      	movs	r2, #8
 800b848:	4013      	ands	r3, r2
 800b84a:	d026      	beq.n	800b89a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	210e      	movs	r1, #14
 800b858:	438a      	bics	r2, r1
 800b85a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b860:	221c      	movs	r2, #28
 800b862:	401a      	ands	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b868:	2101      	movs	r1, #1
 800b86a:	4091      	lsls	r1, r2
 800b86c:	000a      	movs	r2, r1
 800b86e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2225      	movs	r2, #37	; 0x25
 800b87a:	2101      	movs	r1, #1
 800b87c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2224      	movs	r2, #36	; 0x24
 800b882:	2100      	movs	r1, #0
 800b884:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d005      	beq.n	800b89a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	0010      	movs	r0, r2
 800b896:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b898:	46c0      	nop			; (mov r8, r8)
 800b89a:	46c0      	nop			; (mov r8, r8)
}
 800b89c:	46bd      	mov	sp, r7
 800b89e:	b004      	add	sp, #16
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	46c0      	nop			; (mov r8, r8)
 800b8a4:	40020080 	.word	0x40020080
 800b8a8:	40020400 	.word	0x40020400
 800b8ac:	40020000 	.word	0x40020000

0800b8b0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b8c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d004      	beq.n	800b8da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b8d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8de:	221c      	movs	r2, #28
 800b8e0:	401a      	ands	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4091      	lsls	r1, r2
 800b8ea:	000a      	movs	r2, r1
 800b8ec:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	2b10      	cmp	r3, #16
 800b8fc:	d108      	bne.n	800b910 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b90e:	e007      	b.n	800b920 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	60da      	str	r2, [r3, #12]
}
 800b920:	46c0      	nop			; (mov r8, r8)
 800b922:	46bd      	mov	sp, r7
 800b924:	b004      	add	sp, #16
 800b926:	bd80      	pop	{r7, pc}

0800b928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	001a      	movs	r2, r3
 800b936:	4b1d      	ldr	r3, [pc, #116]	; (800b9ac <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800b938:	429a      	cmp	r2, r3
 800b93a:	d814      	bhi.n	800b966 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b940:	089b      	lsrs	r3, r3, #2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4a1a      	ldr	r2, [pc, #104]	; (800b9b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800b946:	189a      	adds	r2, r3, r2
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	001a      	movs	r2, r3
 800b952:	23ff      	movs	r3, #255	; 0xff
 800b954:	4013      	ands	r3, r2
 800b956:	3b08      	subs	r3, #8
 800b958:	2114      	movs	r1, #20
 800b95a:	0018      	movs	r0, r3
 800b95c:	f7fa fc48 	bl	80061f0 <__udivsi3>
 800b960:	0003      	movs	r3, r0
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	e014      	b.n	800b990 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b96a:	089b      	lsrs	r3, r3, #2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4a11      	ldr	r2, [pc, #68]	; (800b9b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800b970:	189a      	adds	r2, r3, r2
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	001a      	movs	r2, r3
 800b97c:	23ff      	movs	r3, #255	; 0xff
 800b97e:	4013      	ands	r3, r2
 800b980:	3b08      	subs	r3, #8
 800b982:	2114      	movs	r1, #20
 800b984:	0018      	movs	r0, r3
 800b986:	f7fa fc33 	bl	80061f0 <__udivsi3>
 800b98a:	0003      	movs	r3, r0
 800b98c:	3307      	adds	r3, #7
 800b98e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a09      	ldr	r2, [pc, #36]	; (800b9b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800b994:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	221f      	movs	r2, #31
 800b99a:	4013      	ands	r3, r2
 800b99c:	2201      	movs	r2, #1
 800b99e:	409a      	lsls	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b9a4:	46c0      	nop			; (mov r8, r8)
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	b004      	add	sp, #16
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	40020407 	.word	0x40020407
 800b9b0:	40020800 	.word	0x40020800
 800b9b4:	4002081c 	.word	0x4002081c
 800b9b8:	40020880 	.word	0x40020880

0800b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	227f      	movs	r2, #127	; 0x7f
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	4a0a      	ldr	r2, [pc, #40]	; (800b9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b9d2:	4694      	mov	ip, r2
 800b9d4:	4463      	add	r3, ip
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	001a      	movs	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a07      	ldr	r2, [pc, #28]	; (800ba00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b9e2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	2203      	movs	r2, #3
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	409a      	lsls	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b9f4:	46c0      	nop			; (mov r8, r8)
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	b004      	add	sp, #16
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	1000823f 	.word	0x1000823f
 800ba00:	40020940 	.word	0x40020940

0800ba04 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ba04:	b5b0      	push	{r4, r5, r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	603a      	str	r2, [r7, #0]
 800ba10:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ba12:	4b21      	ldr	r3, [pc, #132]	; (800ba98 <HAL_FLASH_Program+0x94>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d101      	bne.n	800ba1e <HAL_FLASH_Program+0x1a>
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	e038      	b.n	800ba90 <HAL_FLASH_Program+0x8c>
 800ba1e:	4b1e      	ldr	r3, [pc, #120]	; (800ba98 <HAL_FLASH_Program+0x94>)
 800ba20:	2201      	movs	r2, #1
 800ba22:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ba24:	4b1c      	ldr	r3, [pc, #112]	; (800ba98 <HAL_FLASH_Program+0x94>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ba2a:	2517      	movs	r5, #23
 800ba2c:	197c      	adds	r4, r7, r5
 800ba2e:	23fa      	movs	r3, #250	; 0xfa
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	0018      	movs	r0, r3
 800ba34:	f000 f87a 	bl	800bb2c <FLASH_WaitForLastOperation>
 800ba38:	0003      	movs	r3, r0
 800ba3a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800ba3c:	197b      	adds	r3, r7, r5
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d11f      	bne.n	800ba84 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d106      	bne.n	800ba58 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	0008      	movs	r0, r1
 800ba52:	f000 f8b9 	bl	800bbc8 <FLASH_Program_DoubleWord>
 800ba56:	e005      	b.n	800ba64 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	0011      	movs	r1, r2
 800ba5e:	0018      	movs	r0, r3
 800ba60:	f018 fa82 	bl	8023f68 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ba64:	2317      	movs	r3, #23
 800ba66:	18fc      	adds	r4, r7, r3
 800ba68:	23fa      	movs	r3, #250	; 0xfa
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	0018      	movs	r0, r3
 800ba6e:	f000 f85d 	bl	800bb2c <FLASH_WaitForLastOperation>
 800ba72:	0003      	movs	r3, r0
 800ba74:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800ba76:	4b09      	ldr	r3, [pc, #36]	; (800ba9c <HAL_FLASH_Program+0x98>)
 800ba78:	695a      	ldr	r2, [r3, #20]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	43d9      	mvns	r1, r3
 800ba7e:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <HAL_FLASH_Program+0x98>)
 800ba80:	400a      	ands	r2, r1
 800ba82:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ba84:	4b04      	ldr	r3, [pc, #16]	; (800ba98 <HAL_FLASH_Program+0x94>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800ba8a:	2317      	movs	r3, #23
 800ba8c:	18fb      	adds	r3, r7, r3
 800ba8e:	781b      	ldrb	r3, [r3, #0]
}
 800ba90:	0018      	movs	r0, r3
 800ba92:	46bd      	mov	sp, r7
 800ba94:	b006      	add	sp, #24
 800ba96:	bdb0      	pop	{r4, r5, r7, pc}
 800ba98:	20000574 	.word	0x20000574
 800ba9c:	40022000 	.word	0x40022000

0800baa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800baa6:	1dfb      	adds	r3, r7, #7
 800baa8:	2200      	movs	r2, #0
 800baaa:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800baac:	4b0b      	ldr	r3, [pc, #44]	; (800badc <HAL_FLASH_Unlock+0x3c>)
 800baae:	695b      	ldr	r3, [r3, #20]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	da0c      	bge.n	800bace <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800bab4:	4b09      	ldr	r3, [pc, #36]	; (800badc <HAL_FLASH_Unlock+0x3c>)
 800bab6:	4a0a      	ldr	r2, [pc, #40]	; (800bae0 <HAL_FLASH_Unlock+0x40>)
 800bab8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800baba:	4b08      	ldr	r3, [pc, #32]	; (800badc <HAL_FLASH_Unlock+0x3c>)
 800babc:	4a09      	ldr	r2, [pc, #36]	; (800bae4 <HAL_FLASH_Unlock+0x44>)
 800babe:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800bac0:	4b06      	ldr	r3, [pc, #24]	; (800badc <HAL_FLASH_Unlock+0x3c>)
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	da02      	bge.n	800bace <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800bac8:	1dfb      	adds	r3, r7, #7
 800baca:	2201      	movs	r2, #1
 800bacc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800bace:	1dfb      	adds	r3, r7, #7
 800bad0:	781b      	ldrb	r3, [r3, #0]
}
 800bad2:	0018      	movs	r0, r3
 800bad4:	46bd      	mov	sp, r7
 800bad6:	b002      	add	sp, #8
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	40022000 	.word	0x40022000
 800bae0:	45670123 	.word	0x45670123
 800bae4:	cdef89ab 	.word	0xcdef89ab

0800bae8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800baee:	1dfb      	adds	r3, r7, #7
 800baf0:	2201      	movs	r2, #1
 800baf2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800baf4:	23fa      	movs	r3, #250	; 0xfa
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	0018      	movs	r0, r3
 800bafa:	f000 f817 	bl	800bb2c <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800bafe:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <HAL_FLASH_Lock+0x40>)
 800bb00:	695a      	ldr	r2, [r3, #20]
 800bb02:	4b09      	ldr	r3, [pc, #36]	; (800bb28 <HAL_FLASH_Lock+0x40>)
 800bb04:	2180      	movs	r1, #128	; 0x80
 800bb06:	0609      	lsls	r1, r1, #24
 800bb08:	430a      	orrs	r2, r1
 800bb0a:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800bb0c:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <HAL_FLASH_Lock+0x40>)
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	da02      	bge.n	800bb1a <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 800bb14:	1dfb      	adds	r3, r7, #7
 800bb16:	2200      	movs	r2, #0
 800bb18:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bb1a:	1dfb      	adds	r3, r7, #7
 800bb1c:	781b      	ldrb	r3, [r3, #0]
}
 800bb1e:	0018      	movs	r0, r3
 800bb20:	46bd      	mov	sp, r7
 800bb22:	b002      	add	sp, #8
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	46c0      	nop			; (mov r8, r8)
 800bb28:	40022000 	.word	0x40022000

0800bb2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800bb34:	f7fd fc44 	bl	80093c0 <HAL_GetTick>
 800bb38:	0003      	movs	r3, r0
 800bb3a:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 800bb3c:	23c0      	movs	r3, #192	; 0xc0
 800bb3e:	029b      	lsls	r3, r3, #10
 800bb40:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800bb42:	e00c      	b.n	800bb5e <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3301      	adds	r3, #1
 800bb48:	d009      	beq.n	800bb5e <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800bb4a:	f7fd fc39 	bl	80093c0 <HAL_GetTick>
 800bb4e:	0002      	movs	r2, r0
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d801      	bhi.n	800bb5e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	e028      	b.n	800bbb0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800bb5e:	4b16      	ldr	r3, [pc, #88]	; (800bbb8 <FLASH_WaitForLastOperation+0x8c>)
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	4013      	ands	r3, r2
 800bb66:	d1ed      	bne.n	800bb44 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800bb68:	4b13      	ldr	r3, [pc, #76]	; (800bbb8 <FLASH_WaitForLastOperation+0x8c>)
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	4a13      	ldr	r2, [pc, #76]	; (800bbbc <FLASH_WaitForLastOperation+0x90>)
 800bb6e:	4013      	ands	r3, r2
 800bb70:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800bb72:	4b11      	ldr	r3, [pc, #68]	; (800bbb8 <FLASH_WaitForLastOperation+0x8c>)
 800bb74:	4a12      	ldr	r2, [pc, #72]	; (800bbc0 <FLASH_WaitForLastOperation+0x94>)
 800bb76:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d011      	beq.n	800bba2 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800bb7e:	4b11      	ldr	r3, [pc, #68]	; (800bbc4 <FLASH_WaitForLastOperation+0x98>)
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e013      	b.n	800bbb0 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	d009      	beq.n	800bba2 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800bb8e:	f7fd fc17 	bl	80093c0 <HAL_GetTick>
 800bb92:	0002      	movs	r2, r0
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d801      	bhi.n	800bba2 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e006      	b.n	800bbb0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800bba2:	4b05      	ldr	r3, [pc, #20]	; (800bbb8 <FLASH_WaitForLastOperation+0x8c>)
 800bba4:	691a      	ldr	r2, [r3, #16]
 800bba6:	2380      	movs	r3, #128	; 0x80
 800bba8:	02db      	lsls	r3, r3, #11
 800bbaa:	4013      	ands	r3, r2
 800bbac:	d1ec      	bne.n	800bb88 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	b004      	add	sp, #16
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	40022000 	.word	0x40022000
 800bbbc:	0000c3fa 	.word	0x0000c3fa
 800bbc0:	0008c3fb 	.word	0x0008c3fb
 800bbc4:	20000574 	.word	0x20000574

0800bbc8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800bbc8:	b5b0      	push	{r4, r5, r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	603a      	str	r2, [r7, #0]
 800bbd2:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800bbd4:	4b0b      	ldr	r3, [pc, #44]	; (800bc04 <FLASH_Program_DoubleWord+0x3c>)
 800bbd6:	695a      	ldr	r2, [r3, #20]
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <FLASH_Program_DoubleWord+0x3c>)
 800bbda:	2101      	movs	r1, #1
 800bbdc:	430a      	orrs	r2, r1
 800bbde:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800bbe6:	f3bf 8f6f 	isb	sy
}
 800bbea:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	001c      	movs	r4, r3
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	001d      	movs	r5, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	0022      	movs	r2, r4
 800bbfa:	601a      	str	r2, [r3, #0]
}
 800bbfc:	46c0      	nop			; (mov r8, r8)
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	b004      	add	sp, #16
 800bc02:	bdb0      	pop	{r4, r5, r7, pc}
 800bc04:	40022000 	.word	0x40022000

0800bc08 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800bc08:	b5b0      	push	{r4, r5, r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bc12:	4b33      	ldr	r3, [pc, #204]	; (800bce0 <HAL_FLASHEx_Erase+0xd8>)
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d101      	bne.n	800bc1e <HAL_FLASHEx_Erase+0x16>
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	e05c      	b.n	800bcd8 <HAL_FLASHEx_Erase+0xd0>
 800bc1e:	4b30      	ldr	r3, [pc, #192]	; (800bce0 <HAL_FLASHEx_Erase+0xd8>)
 800bc20:	2201      	movs	r2, #1
 800bc22:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bc24:	4b2e      	ldr	r3, [pc, #184]	; (800bce0 <HAL_FLASHEx_Erase+0xd8>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800bc2a:	250f      	movs	r5, #15
 800bc2c:	197c      	adds	r4, r7, r5
 800bc2e:	23fa      	movs	r3, #250	; 0xfa
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	0018      	movs	r0, r3
 800bc34:	f7ff ff7a 	bl	800bb2c <FLASH_WaitForLastOperation>
 800bc38:	0003      	movs	r3, r0
 800bc3a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800bc3c:	002c      	movs	r4, r5
 800bc3e:	193b      	adds	r3, r7, r4
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d142      	bne.n	800bccc <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b04      	cmp	r3, #4
 800bc4c:	d10d      	bne.n	800bc6a <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	0018      	movs	r0, r3
 800bc54:	f000 f848 	bl	800bce8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800bc58:	193c      	adds	r4, r7, r4
 800bc5a:	23fa      	movs	r3, #250	; 0xfa
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	0018      	movs	r0, r3
 800bc60:	f7ff ff64 	bl	800bb2c <FLASH_WaitForLastOperation>
 800bc64:	0003      	movs	r3, r0
 800bc66:	7023      	strb	r3, [r4, #0]
 800bc68:	e030      	b.n	800bccc <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	4252      	negs	r2, r2
 800bc70:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	60bb      	str	r3, [r7, #8]
 800bc78:	e01a      	b.n	800bcb0 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	0011      	movs	r1, r2
 800bc82:	0018      	movs	r0, r3
 800bc84:	f000 f844 	bl	800bd10 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800bc88:	250f      	movs	r5, #15
 800bc8a:	197c      	adds	r4, r7, r5
 800bc8c:	23fa      	movs	r3, #250	; 0xfa
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	0018      	movs	r0, r3
 800bc92:	f7ff ff4b 	bl	800bb2c <FLASH_WaitForLastOperation>
 800bc96:	0003      	movs	r3, r0
 800bc98:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800bc9a:	197b      	adds	r3, r7, r5
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	601a      	str	r2, [r3, #0]
          break;
 800bca8:	e00a      	b.n	800bcc0 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	3301      	adds	r3, #1
 800bcae:	60bb      	str	r3, [r7, #8]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	689a      	ldr	r2, [r3, #8]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	18d3      	adds	r3, r2, r3
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d3dc      	bcc.n	800bc7a <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800bcc0:	4b08      	ldr	r3, [pc, #32]	; (800bce4 <HAL_FLASHEx_Erase+0xdc>)
 800bcc2:	695a      	ldr	r2, [r3, #20]
 800bcc4:	4b07      	ldr	r3, [pc, #28]	; (800bce4 <HAL_FLASHEx_Erase+0xdc>)
 800bcc6:	2102      	movs	r1, #2
 800bcc8:	438a      	bics	r2, r1
 800bcca:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800bccc:	4b04      	ldr	r3, [pc, #16]	; (800bce0 <HAL_FLASHEx_Erase+0xd8>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800bcd2:	230f      	movs	r3, #15
 800bcd4:	18fb      	adds	r3, r7, r3
 800bcd6:	781b      	ldrb	r3, [r3, #0]
}
 800bcd8:	0018      	movs	r0, r3
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	b004      	add	sp, #16
 800bcde:	bdb0      	pop	{r4, r5, r7, pc}
 800bce0:	20000574 	.word	0x20000574
 800bce4:	40022000 	.word	0x40022000

0800bce8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800bcf0:	4b06      	ldr	r3, [pc, #24]	; (800bd0c <FLASH_MassErase+0x24>)
 800bcf2:	695a      	ldr	r2, [r3, #20]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	4b04      	ldr	r3, [pc, #16]	; (800bd0c <FLASH_MassErase+0x24>)
 800bcfa:	2180      	movs	r1, #128	; 0x80
 800bcfc:	0249      	lsls	r1, r1, #9
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	615a      	str	r2, [r3, #20]
}
 800bd02:	46c0      	nop			; (mov r8, r8)
 800bd04:	46bd      	mov	sp, r7
 800bd06:	b002      	add	sp, #8
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	46c0      	nop			; (mov r8, r8)
 800bd0c:	40022000 	.word	0x40022000

0800bd10 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800bd1a:	4b0f      	ldr	r3, [pc, #60]	; (800bd58 <FLASH_PageErase+0x48>)
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	4a0f      	ldr	r2, [pc, #60]	; (800bd5c <FLASH_PageErase+0x4c>)
 800bd20:	4013      	ands	r3, r2
 800bd22:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b04      	cmp	r3, #4
 800bd28:	d005      	beq.n	800bd36 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2280      	movs	r2, #128	; 0x80
 800bd2e:	0192      	lsls	r2, r2, #6
 800bd30:	4313      	orrs	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]
 800bd34:	e003      	b.n	800bd3e <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	4a09      	ldr	r2, [pc, #36]	; (800bd60 <FLASH_PageErase+0x50>)
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	00da      	lsls	r2, r3, #3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	431a      	orrs	r2, r3
 800bd46:	4b04      	ldr	r3, [pc, #16]	; (800bd58 <FLASH_PageErase+0x48>)
 800bd48:	4906      	ldr	r1, [pc, #24]	; (800bd64 <FLASH_PageErase+0x54>)
 800bd4a:	430a      	orrs	r2, r1
 800bd4c:	615a      	str	r2, [r3, #20]
}
 800bd4e:	46c0      	nop			; (mov r8, r8)
 800bd50:	46bd      	mov	sp, r7
 800bd52:	b004      	add	sp, #16
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	46c0      	nop			; (mov r8, r8)
 800bd58:	40022000 	.word	0x40022000
 800bd5c:	ffffe007 	.word	0xffffe007
 800bd60:	ffffdfff 	.word	0xffffdfff
 800bd64:	00010002 	.word	0x00010002

0800bd68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bd72:	2300      	movs	r3, #0
 800bd74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bd76:	e14d      	b.n	800c014 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	4091      	lsls	r1, r2
 800bd82:	000a      	movs	r2, r1
 800bd84:	4013      	ands	r3, r2
 800bd86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d100      	bne.n	800bd90 <HAL_GPIO_Init+0x28>
 800bd8e:	e13e      	b.n	800c00e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	2203      	movs	r2, #3
 800bd96:	4013      	ands	r3, r2
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d005      	beq.n	800bda8 <HAL_GPIO_Init+0x40>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	2203      	movs	r2, #3
 800bda2:	4013      	ands	r3, r2
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d130      	bne.n	800be0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	409a      	lsls	r2, r3
 800bdb6:	0013      	movs	r3, r2
 800bdb8:	43da      	mvns	r2, r3
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	68da      	ldr	r2, [r3, #12]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	409a      	lsls	r2, r3
 800bdca:	0013      	movs	r3, r2
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bdde:	2201      	movs	r2, #1
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	409a      	lsls	r2, r3
 800bde4:	0013      	movs	r3, r2
 800bde6:	43da      	mvns	r2, r3
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	4013      	ands	r3, r2
 800bdec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	091b      	lsrs	r3, r3, #4
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	401a      	ands	r2, r3
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	409a      	lsls	r2, r3
 800bdfc:	0013      	movs	r3, r2
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	4313      	orrs	r3, r2
 800be02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	2203      	movs	r2, #3
 800be10:	4013      	ands	r3, r2
 800be12:	2b03      	cmp	r3, #3
 800be14:	d017      	beq.n	800be46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	2203      	movs	r2, #3
 800be22:	409a      	lsls	r2, r3
 800be24:	0013      	movs	r3, r2
 800be26:	43da      	mvns	r2, r3
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	4013      	ands	r3, r2
 800be2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	409a      	lsls	r2, r3
 800be38:	0013      	movs	r3, r2
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	2203      	movs	r2, #3
 800be4c:	4013      	ands	r3, r2
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d123      	bne.n	800be9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	08da      	lsrs	r2, r3, #3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	3208      	adds	r2, #8
 800be5a:	0092      	lsls	r2, r2, #2
 800be5c:	58d3      	ldr	r3, [r2, r3]
 800be5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	2207      	movs	r2, #7
 800be64:	4013      	ands	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	220f      	movs	r2, #15
 800be6a:	409a      	lsls	r2, r3
 800be6c:	0013      	movs	r3, r2
 800be6e:	43da      	mvns	r2, r3
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	4013      	ands	r3, r2
 800be74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	691a      	ldr	r2, [r3, #16]
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2107      	movs	r1, #7
 800be7e:	400b      	ands	r3, r1
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	409a      	lsls	r2, r3
 800be84:	0013      	movs	r3, r2
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	4313      	orrs	r3, r2
 800be8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	08da      	lsrs	r2, r3, #3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3208      	adds	r2, #8
 800be94:	0092      	lsls	r2, r2, #2
 800be96:	6939      	ldr	r1, [r7, #16]
 800be98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	2203      	movs	r2, #3
 800bea6:	409a      	lsls	r2, r3
 800bea8:	0013      	movs	r3, r2
 800beaa:	43da      	mvns	r2, r3
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	4013      	ands	r3, r2
 800beb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	2203      	movs	r2, #3
 800beb8:	401a      	ands	r2, r3
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	409a      	lsls	r2, r3
 800bec0:	0013      	movs	r3, r2
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	23c0      	movs	r3, #192	; 0xc0
 800bed4:	029b      	lsls	r3, r3, #10
 800bed6:	4013      	ands	r3, r2
 800bed8:	d100      	bne.n	800bedc <HAL_GPIO_Init+0x174>
 800beda:	e098      	b.n	800c00e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800bedc:	4a53      	ldr	r2, [pc, #332]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	089b      	lsrs	r3, r3, #2
 800bee2:	3318      	adds	r3, #24
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	589b      	ldr	r3, [r3, r2]
 800bee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	2203      	movs	r2, #3
 800beee:	4013      	ands	r3, r2
 800bef0:	00db      	lsls	r3, r3, #3
 800bef2:	220f      	movs	r2, #15
 800bef4:	409a      	lsls	r2, r3
 800bef6:	0013      	movs	r3, r2
 800bef8:	43da      	mvns	r2, r3
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	4013      	ands	r3, r2
 800befe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	23a0      	movs	r3, #160	; 0xa0
 800bf04:	05db      	lsls	r3, r3, #23
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d019      	beq.n	800bf3e <HAL_GPIO_Init+0x1d6>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a48      	ldr	r2, [pc, #288]	; (800c030 <HAL_GPIO_Init+0x2c8>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d013      	beq.n	800bf3a <HAL_GPIO_Init+0x1d2>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a47      	ldr	r2, [pc, #284]	; (800c034 <HAL_GPIO_Init+0x2cc>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d00d      	beq.n	800bf36 <HAL_GPIO_Init+0x1ce>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a46      	ldr	r2, [pc, #280]	; (800c038 <HAL_GPIO_Init+0x2d0>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d007      	beq.n	800bf32 <HAL_GPIO_Init+0x1ca>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a45      	ldr	r2, [pc, #276]	; (800c03c <HAL_GPIO_Init+0x2d4>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d101      	bne.n	800bf2e <HAL_GPIO_Init+0x1c6>
 800bf2a:	2304      	movs	r3, #4
 800bf2c:	e008      	b.n	800bf40 <HAL_GPIO_Init+0x1d8>
 800bf2e:	2305      	movs	r3, #5
 800bf30:	e006      	b.n	800bf40 <HAL_GPIO_Init+0x1d8>
 800bf32:	2303      	movs	r3, #3
 800bf34:	e004      	b.n	800bf40 <HAL_GPIO_Init+0x1d8>
 800bf36:	2302      	movs	r3, #2
 800bf38:	e002      	b.n	800bf40 <HAL_GPIO_Init+0x1d8>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <HAL_GPIO_Init+0x1d8>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	2103      	movs	r1, #3
 800bf44:	400a      	ands	r2, r1
 800bf46:	00d2      	lsls	r2, r2, #3
 800bf48:	4093      	lsls	r3, r2
 800bf4a:	693a      	ldr	r2, [r7, #16]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800bf50:	4936      	ldr	r1, [pc, #216]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	089b      	lsrs	r3, r3, #2
 800bf56:	3318      	adds	r3, #24
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bf5e:	4b33      	ldr	r3, [pc, #204]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	43da      	mvns	r2, r3
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	685a      	ldr	r2, [r3, #4]
 800bf72:	2380      	movs	r3, #128	; 0x80
 800bf74:	035b      	lsls	r3, r3, #13
 800bf76:	4013      	ands	r3, r2
 800bf78:	d003      	beq.n	800bf82 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bf82:	4b2a      	ldr	r3, [pc, #168]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800bf88:	4b28      	ldr	r3, [pc, #160]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	43da      	mvns	r2, r3
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	4013      	ands	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	685a      	ldr	r2, [r3, #4]
 800bf9c:	2380      	movs	r3, #128	; 0x80
 800bf9e:	039b      	lsls	r3, r3, #14
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	d003      	beq.n	800bfac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bfac:	4b1f      	ldr	r3, [pc, #124]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800bfae:	693a      	ldr	r2, [r7, #16]
 800bfb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800bfb2:	4a1e      	ldr	r2, [pc, #120]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800bfb4:	2384      	movs	r3, #132	; 0x84
 800bfb6:	58d3      	ldr	r3, [r2, r3]
 800bfb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	43da      	mvns	r2, r3
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685a      	ldr	r2, [r3, #4]
 800bfc8:	2380      	movs	r3, #128	; 0x80
 800bfca:	029b      	lsls	r3, r3, #10
 800bfcc:	4013      	ands	r3, r2
 800bfce:	d003      	beq.n	800bfd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bfd8:	4914      	ldr	r1, [pc, #80]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800bfda:	2284      	movs	r2, #132	; 0x84
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800bfe0:	4a12      	ldr	r2, [pc, #72]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800bfe2:	2380      	movs	r3, #128	; 0x80
 800bfe4:	58d3      	ldr	r3, [r2, r3]
 800bfe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	43da      	mvns	r2, r3
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	4013      	ands	r3, r2
 800bff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	2380      	movs	r3, #128	; 0x80
 800bff8:	025b      	lsls	r3, r3, #9
 800bffa:	4013      	ands	r3, r2
 800bffc:	d003      	beq.n	800c006 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800bffe:	693a      	ldr	r2, [r7, #16]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	4313      	orrs	r3, r2
 800c004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c006:	4909      	ldr	r1, [pc, #36]	; (800c02c <HAL_GPIO_Init+0x2c4>)
 800c008:	2280      	movs	r2, #128	; 0x80
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	3301      	adds	r3, #1
 800c012:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	40da      	lsrs	r2, r3
 800c01c:	1e13      	subs	r3, r2, #0
 800c01e:	d000      	beq.n	800c022 <HAL_GPIO_Init+0x2ba>
 800c020:	e6aa      	b.n	800bd78 <HAL_GPIO_Init+0x10>
  }
}
 800c022:	46c0      	nop			; (mov r8, r8)
 800c024:	46c0      	nop			; (mov r8, r8)
 800c026:	46bd      	mov	sp, r7
 800c028:	b006      	add	sp, #24
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	40021800 	.word	0x40021800
 800c030:	50000400 	.word	0x50000400
 800c034:	50000800 	.word	0x50000800
 800c038:	50000c00 	.word	0x50000c00
 800c03c:	50001000 	.word	0x50001000

0800c040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	0008      	movs	r0, r1
 800c04a:	0011      	movs	r1, r2
 800c04c:	1cbb      	adds	r3, r7, #2
 800c04e:	1c02      	adds	r2, r0, #0
 800c050:	801a      	strh	r2, [r3, #0]
 800c052:	1c7b      	adds	r3, r7, #1
 800c054:	1c0a      	adds	r2, r1, #0
 800c056:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c058:	1c7b      	adds	r3, r7, #1
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d004      	beq.n	800c06a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c060:	1cbb      	adds	r3, r7, #2
 800c062:	881a      	ldrh	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c068:	e003      	b.n	800c072 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c06a:	1cbb      	adds	r3, r7, #2
 800c06c:	881a      	ldrh	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c072:	46c0      	nop			; (mov r8, r8)
 800c074:	46bd      	mov	sp, r7
 800c076:	b002      	add	sp, #8
 800c078:	bd80      	pop	{r7, pc}

0800c07a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	000a      	movs	r2, r1
 800c084:	1cbb      	adds	r3, r7, #2
 800c086:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c08e:	1cbb      	adds	r3, r7, #2
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	4013      	ands	r3, r2
 800c096:	041a      	lsls	r2, r3, #16
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	43db      	mvns	r3, r3
 800c09c:	1cb9      	adds	r1, r7, #2
 800c09e:	8809      	ldrh	r1, [r1, #0]
 800c0a0:	400b      	ands	r3, r1
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	619a      	str	r2, [r3, #24]
}
 800c0a8:	46c0      	nop			; (mov r8, r8)
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	b004      	add	sp, #16
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	0002      	movs	r2, r0
 800c0b8:	1dbb      	adds	r3, r7, #6
 800c0ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800c0bc:	4b10      	ldr	r3, [pc, #64]	; (800c100 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	1dba      	adds	r2, r7, #6
 800c0c2:	8812      	ldrh	r2, [r2, #0]
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	d008      	beq.n	800c0da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800c0c8:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800c0ca:	1dba      	adds	r2, r7, #6
 800c0cc:	8812      	ldrh	r2, [r2, #0]
 800c0ce:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800c0d0:	1dbb      	adds	r3, r7, #6
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	f000 f815 	bl	800c104 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800c0da:	4b09      	ldr	r3, [pc, #36]	; (800c100 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	1dba      	adds	r2, r7, #6
 800c0e0:	8812      	ldrh	r2, [r2, #0]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	d008      	beq.n	800c0f8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800c0e6:	4b06      	ldr	r3, [pc, #24]	; (800c100 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800c0e8:	1dba      	adds	r2, r7, #6
 800c0ea:	8812      	ldrh	r2, [r2, #0]
 800c0ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800c0ee:	1dbb      	adds	r3, r7, #6
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	f7fc fd06 	bl	8008b04 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800c0f8:	46c0      	nop			; (mov r8, r8)
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	b002      	add	sp, #8
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	40021800 	.word	0x40021800

0800c104 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	0002      	movs	r2, r0
 800c10c:	1dbb      	adds	r3, r7, #6
 800c10e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800c110:	46c0      	nop			; (mov r8, r8)
 800c112:	46bd      	mov	sp, r7
 800c114:	b002      	add	sp, #8
 800c116:	bd80      	pop	{r7, pc}

0800c118 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	000a      	movs	r2, r1
 800c122:	1cbb      	adds	r3, r7, #2
 800c124:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800c126:	230a      	movs	r3, #10
 800c128:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800c12a:	e002      	b.n	800c132 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3b01      	subs	r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1f9      	bne.n	800c12c <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800c138:	1cbb      	adds	r3, r7, #2
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	00db      	lsls	r3, r3, #3
 800c13e:	4a06      	ldr	r2, [pc, #24]	; (800c158 <PCD_GET_EP_RX_CNT+0x40>)
 800c140:	4694      	mov	ip, r2
 800c142:	4463      	add	r3, ip
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	0c1b      	lsrs	r3, r3, #16
 800c148:	b29b      	uxth	r3, r3
 800c14a:	059b      	lsls	r3, r3, #22
 800c14c:	0d9b      	lsrs	r3, r3, #22
 800c14e:	b29b      	uxth	r3, r3
}
 800c150:	0018      	movs	r0, r3
 800c152:	46bd      	mov	sp, r7
 800c154:	b004      	add	sp, #16
 800c156:	bd80      	pop	{r7, pc}
 800c158:	40009800 	.word	0x40009800

0800c15c <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	000a      	movs	r2, r1
 800c166:	1cbb      	adds	r3, r7, #2
 800c168:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800c16a:	230a      	movs	r3, #10
 800c16c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800c16e:	e002      	b.n	800c176 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	3b01      	subs	r3, #1
 800c174:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1f9      	bne.n	800c170 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800c17c:	1cbb      	adds	r3, r7, #2
 800c17e:	881b      	ldrh	r3, [r3, #0]
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	4a06      	ldr	r2, [pc, #24]	; (800c19c <PCD_GET_EP_DBUF0_CNT+0x40>)
 800c184:	4694      	mov	ip, r2
 800c186:	4463      	add	r3, ip
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	0c1b      	lsrs	r3, r3, #16
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	059b      	lsls	r3, r3, #22
 800c190:	0d9b      	lsrs	r3, r3, #22
 800c192:	b29b      	uxth	r3, r3
}
 800c194:	0018      	movs	r0, r3
 800c196:	46bd      	mov	sp, r7
 800c198:	b004      	add	sp, #16
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	40009800 	.word	0x40009800

0800c1a0 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	000a      	movs	r2, r1
 800c1aa:	1cbb      	adds	r3, r7, #2
 800c1ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800c1ae:	230a      	movs	r3, #10
 800c1b0:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800c1b2:	e002      	b.n	800c1ba <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1f9      	bne.n	800c1b4 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800c1c0:	1cbb      	adds	r3, r7, #2
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	4a06      	ldr	r2, [pc, #24]	; (800c1e0 <PCD_GET_EP_DBUF1_CNT+0x40>)
 800c1c8:	4694      	mov	ip, r2
 800c1ca:	4463      	add	r3, ip
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	0c1b      	lsrs	r3, r3, #16
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	059b      	lsls	r3, r3, #22
 800c1d4:	0d9b      	lsrs	r3, r3, #22
 800c1d6:	b29b      	uxth	r3, r3
}
 800c1d8:	0018      	movs	r0, r3
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	b004      	add	sp, #16
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	40009800 	.word	0x40009800

0800c1e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c1e4:	b590      	push	{r4, r7, lr}
 800c1e6:	b087      	sub	sp, #28
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e0ea      	b.n	800c3cc <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a76      	ldr	r2, [pc, #472]	; (800c3d4 <HAL_PCD_Init+0x1f0>)
 800c1fa:	5c9b      	ldrb	r3, [r3, r2]
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d108      	bne.n	800c214 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	23a5      	movs	r3, #165	; 0xa5
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	2100      	movs	r1, #0
 800c20a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	0018      	movs	r0, r3
 800c210:	f011 fca6 	bl	801db60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4a6f      	ldr	r2, [pc, #444]	; (800c3d4 <HAL_PCD_Init+0x1f0>)
 800c218:	2103      	movs	r1, #3
 800c21a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	0018      	movs	r0, r3
 800c222:	f004 fcb9 	bl	8010b98 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c226:	230f      	movs	r3, #15
 800c228:	18fb      	adds	r3, r7, r3
 800c22a:	2200      	movs	r2, #0
 800c22c:	701a      	strb	r2, [r3, #0]
 800c22e:	e049      	b.n	800c2c4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c230:	200f      	movs	r0, #15
 800c232:	183b      	adds	r3, r7, r0
 800c234:	781a      	ldrb	r2, [r3, #0]
 800c236:	6879      	ldr	r1, [r7, #4]
 800c238:	0013      	movs	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	189b      	adds	r3, r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	18cb      	adds	r3, r1, r3
 800c242:	3315      	adds	r3, #21
 800c244:	2201      	movs	r2, #1
 800c246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c248:	183b      	adds	r3, r7, r0
 800c24a:	781a      	ldrb	r2, [r3, #0]
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	0013      	movs	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	189b      	adds	r3, r3, r2
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	18cb      	adds	r3, r1, r3
 800c258:	3314      	adds	r3, #20
 800c25a:	183a      	adds	r2, r7, r0
 800c25c:	7812      	ldrb	r2, [r2, #0]
 800c25e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c260:	183b      	adds	r3, r7, r0
 800c262:	781a      	ldrb	r2, [r3, #0]
 800c264:	6879      	ldr	r1, [r7, #4]
 800c266:	0013      	movs	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	189b      	adds	r3, r3, r2
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	18cb      	adds	r3, r1, r3
 800c270:	3317      	adds	r3, #23
 800c272:	2200      	movs	r2, #0
 800c274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c276:	183b      	adds	r3, r7, r0
 800c278:	781a      	ldrb	r2, [r3, #0]
 800c27a:	6879      	ldr	r1, [r7, #4]
 800c27c:	0013      	movs	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	189b      	adds	r3, r3, r2
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	18cb      	adds	r3, r1, r3
 800c286:	3324      	adds	r3, #36	; 0x24
 800c288:	2200      	movs	r2, #0
 800c28a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c28c:	183b      	adds	r3, r7, r0
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	6879      	ldr	r1, [r7, #4]
 800c292:	0013      	movs	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	189b      	adds	r3, r3, r2
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	18cb      	adds	r3, r1, r3
 800c29c:	3328      	adds	r3, #40	; 0x28
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c2a2:	183b      	adds	r3, r7, r0
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	6879      	ldr	r1, [r7, #4]
 800c2a8:	1c5a      	adds	r2, r3, #1
 800c2aa:	0013      	movs	r3, r2
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	189b      	adds	r3, r3, r2
 800c2b0:	00db      	lsls	r3, r3, #3
 800c2b2:	18cb      	adds	r3, r1, r3
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2ba:	183b      	adds	r3, r7, r0
 800c2bc:	781a      	ldrb	r2, [r3, #0]
 800c2be:	183b      	adds	r3, r7, r0
 800c2c0:	3201      	adds	r2, #1
 800c2c2:	701a      	strb	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	791b      	ldrb	r3, [r3, #4]
 800c2c8:	210f      	movs	r1, #15
 800c2ca:	187a      	adds	r2, r7, r1
 800c2cc:	7812      	ldrb	r2, [r2, #0]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d3ae      	bcc.n	800c230 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2d2:	187b      	adds	r3, r7, r1
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	701a      	strb	r2, [r3, #0]
 800c2d8:	e056      	b.n	800c388 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c2da:	240f      	movs	r4, #15
 800c2dc:	193b      	adds	r3, r7, r4
 800c2de:	781a      	ldrb	r2, [r3, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	2356      	movs	r3, #86	; 0x56
 800c2e4:	33ff      	adds	r3, #255	; 0xff
 800c2e6:	0019      	movs	r1, r3
 800c2e8:	0013      	movs	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	189b      	adds	r3, r3, r2
 800c2ee:	00db      	lsls	r3, r3, #3
 800c2f0:	18c3      	adds	r3, r0, r3
 800c2f2:	185b      	adds	r3, r3, r1
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c2f8:	193b      	adds	r3, r7, r4
 800c2fa:	781a      	ldrb	r2, [r3, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	23aa      	movs	r3, #170	; 0xaa
 800c300:	0059      	lsls	r1, r3, #1
 800c302:	0013      	movs	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	189b      	adds	r3, r3, r2
 800c308:	00db      	lsls	r3, r3, #3
 800c30a:	18c3      	adds	r3, r0, r3
 800c30c:	185b      	adds	r3, r3, r1
 800c30e:	193a      	adds	r2, r7, r4
 800c310:	7812      	ldrb	r2, [r2, #0]
 800c312:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c314:	193b      	adds	r3, r7, r4
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	2358      	movs	r3, #88	; 0x58
 800c31c:	33ff      	adds	r3, #255	; 0xff
 800c31e:	0019      	movs	r1, r3
 800c320:	0013      	movs	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	189b      	adds	r3, r3, r2
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	18c3      	adds	r3, r0, r3
 800c32a:	185b      	adds	r3, r3, r1
 800c32c:	2200      	movs	r2, #0
 800c32e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c330:	193b      	adds	r3, r7, r4
 800c332:	781a      	ldrb	r2, [r3, #0]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	23b2      	movs	r3, #178	; 0xb2
 800c338:	0059      	lsls	r1, r3, #1
 800c33a:	0013      	movs	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	189b      	adds	r3, r3, r2
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	18c3      	adds	r3, r0, r3
 800c344:	185b      	adds	r3, r3, r1
 800c346:	2200      	movs	r2, #0
 800c348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c34a:	193b      	adds	r3, r7, r4
 800c34c:	781a      	ldrb	r2, [r3, #0]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	23b4      	movs	r3, #180	; 0xb4
 800c352:	0059      	lsls	r1, r3, #1
 800c354:	0013      	movs	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	189b      	adds	r3, r3, r2
 800c35a:	00db      	lsls	r3, r3, #3
 800c35c:	18c3      	adds	r3, r0, r3
 800c35e:	185b      	adds	r3, r3, r1
 800c360:	2200      	movs	r2, #0
 800c362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c364:	193b      	adds	r3, r7, r4
 800c366:	781a      	ldrb	r2, [r3, #0]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	23b6      	movs	r3, #182	; 0xb6
 800c36c:	0059      	lsls	r1, r3, #1
 800c36e:	0013      	movs	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	189b      	adds	r3, r3, r2
 800c374:	00db      	lsls	r3, r3, #3
 800c376:	18c3      	adds	r3, r0, r3
 800c378:	185b      	adds	r3, r3, r1
 800c37a:	2200      	movs	r2, #0
 800c37c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c37e:	193b      	adds	r3, r7, r4
 800c380:	781a      	ldrb	r2, [r3, #0]
 800c382:	193b      	adds	r3, r7, r4
 800c384:	3201      	adds	r2, #1
 800c386:	701a      	strb	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	791b      	ldrb	r3, [r3, #4]
 800c38c:	220f      	movs	r2, #15
 800c38e:	18ba      	adds	r2, r7, r2
 800c390:	7812      	ldrb	r2, [r2, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d3a1      	bcc.n	800c2da <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6818      	ldr	r0, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	466a      	mov	r2, sp
 800c39e:	7c19      	ldrb	r1, [r3, #16]
 800c3a0:	7011      	strb	r1, [r2, #0]
 800c3a2:	6859      	ldr	r1, [r3, #4]
 800c3a4:	689a      	ldr	r2, [r3, #8]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	f004 fc2f 	bl	8010c0a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4a07      	ldr	r2, [pc, #28]	; (800c3d4 <HAL_PCD_Init+0x1f0>)
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	7b1b      	ldrb	r3, [r3, #12]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d103      	bne.n	800c3ca <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	0018      	movs	r0, r3
 800c3c6:	f001 fbfb 	bl	800dbc0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	0018      	movs	r0, r3
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	b005      	add	sp, #20
 800c3d2:	bd90      	pop	{r4, r7, pc}
 800c3d4:	00000295 	.word	0x00000295

0800c3d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	23a5      	movs	r3, #165	; 0xa5
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	5cd3      	ldrb	r3, [r2, r3]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d101      	bne.n	800c3f0 <HAL_PCD_Start+0x18>
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	e014      	b.n	800c41a <HAL_PCD_Start+0x42>
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	23a5      	movs	r3, #165	; 0xa5
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	0018      	movs	r0, r3
 800c400:	f004 fbb6 	bl	8010b70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	0018      	movs	r0, r3
 800c40a:	f006 f9c0 	bl	801278e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	23a5      	movs	r3, #165	; 0xa5
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	2100      	movs	r1, #0
 800c416:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	0018      	movs	r0, r3
 800c41c:	46bd      	mov	sp, r7
 800c41e:	b002      	add	sp, #8
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	0018      	movs	r0, r3
 800c432:	f006 f9bc 	bl	80127ae <USB_ReadInterrupts>
 800c436:	0003      	movs	r3, r0
 800c438:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800c43a:	4a7c      	ldr	r2, [pc, #496]	; (800c62c <HAL_PCD_IRQHandler+0x208>)
 800c43c:	23a0      	movs	r3, #160	; 0xa0
 800c43e:	58d3      	ldr	r3, [r2, r3]
 800c440:	2204      	movs	r2, #4
 800c442:	4013      	ands	r3, r2
 800c444:	d100      	bne.n	800c448 <HAL_PCD_IRQHandler+0x24>
 800c446:	e0ed      	b.n	800c624 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	2380      	movs	r3, #128	; 0x80
 800c44c:	021b      	lsls	r3, r3, #8
 800c44e:	4013      	ands	r3, r2
 800c450:	d004      	beq.n	800c45c <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	0018      	movs	r0, r3
 800c456:	f000 fb35 	bl	800cac4 <PCD_EP_ISR_Handler>

    return;
 800c45a:	e0e4      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	2380      	movs	r3, #128	; 0x80
 800c460:	00db      	lsls	r3, r3, #3
 800c462:	4013      	ands	r3, r2
 800c464:	d011      	beq.n	800c48a <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	496f      	ldr	r1, [pc, #444]	; (800c630 <HAL_PCD_IRQHandler+0x20c>)
 800c472:	400a      	ands	r2, r1
 800c474:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	0018      	movs	r0, r3
 800c47a:	f011 fc34 	bl	801dce6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2100      	movs	r1, #0
 800c482:	0018      	movs	r0, r3
 800c484:	f000 f8e4 	bl	800c650 <HAL_PCD_SetAddress>

    return;
 800c488:	e0cd      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	2380      	movs	r3, #128	; 0x80
 800c48e:	01db      	lsls	r3, r3, #7
 800c490:	4013      	ands	r3, r2
 800c492:	d008      	beq.n	800c4a6 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4965      	ldr	r1, [pc, #404]	; (800c634 <HAL_PCD_IRQHandler+0x210>)
 800c4a0:	400a      	ands	r2, r1
 800c4a2:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800c4a4:	e0bf      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	2380      	movs	r3, #128	; 0x80
 800c4aa:	019b      	lsls	r3, r3, #6
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	d008      	beq.n	800c4c2 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	495f      	ldr	r1, [pc, #380]	; (800c638 <HAL_PCD_IRQHandler+0x214>)
 800c4bc:	400a      	ands	r2, r1
 800c4be:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800c4c0:	e0b1      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	2380      	movs	r3, #128	; 0x80
 800c4c6:	015b      	lsls	r3, r3, #5
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	d02c      	beq.n	800c526 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2104      	movs	r1, #4
 800c4d8:	438a      	bics	r2, r1
 800c4da:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2108      	movs	r1, #8
 800c4e8:	438a      	bics	r2, r1
 800c4ea:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	23b3      	movs	r3, #179	; 0xb3
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	5cd3      	ldrb	r3, [r2, r3]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d109      	bne.n	800c50c <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	23b3      	movs	r3, #179	; 0xb3
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	2100      	movs	r1, #0
 800c500:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2100      	movs	r1, #0
 800c506:	0018      	movs	r0, r3
 800c508:	f011 fe6c 	bl	801e1e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	0018      	movs	r0, r3
 800c510:	f011 fc2a 	bl	801dd68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4947      	ldr	r1, [pc, #284]	; (800c63c <HAL_PCD_IRQHandler+0x218>)
 800c520:	400a      	ands	r2, r1
 800c522:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800c524:	e07f      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	2380      	movs	r3, #128	; 0x80
 800c52a:	011b      	lsls	r3, r3, #4
 800c52c:	4013      	ands	r3, r2
 800c52e:	d01c      	beq.n	800c56a <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2108      	movs	r1, #8
 800c53c:	430a      	orrs	r2, r1
 800c53e:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	493d      	ldr	r1, [pc, #244]	; (800c640 <HAL_PCD_IRQHandler+0x21c>)
 800c54c:	400a      	ands	r2, r1
 800c54e:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2104      	movs	r1, #4
 800c55c:	430a      	orrs	r2, r1
 800c55e:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	0018      	movs	r0, r3
 800c564:	f011 fbe4 	bl	801dd30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c568:	e05d      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2280      	movs	r2, #128	; 0x80
 800c56e:	4013      	ands	r3, r2
 800c570:	d038      	beq.n	800c5e4 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4931      	ldr	r1, [pc, #196]	; (800c644 <HAL_PCD_IRQHandler+0x220>)
 800c57e:	400a      	ands	r2, r1
 800c580:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	23b3      	movs	r3, #179	; 0xb3
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	5cd3      	ldrb	r3, [r2, r3]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d125      	bne.n	800c5da <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2104      	movs	r1, #4
 800c59a:	430a      	orrs	r2, r1
 800c59c:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2108      	movs	r1, #8
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	23b3      	movs	r3, #179	; 0xb3
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5be:	089b      	lsrs	r3, r3, #2
 800c5c0:	223c      	movs	r2, #60	; 0x3c
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	0019      	movs	r1, r3
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	23b4      	movs	r3, #180	; 0xb4
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	f011 fe06 	bl	801e1e4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800c5d8:	e025      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	0018      	movs	r0, r3
 800c5de:	f011 fba7 	bl	801dd30 <HAL_PCD_SuspendCallback>
    return;
 800c5e2:	e020      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	2380      	movs	r3, #128	; 0x80
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	d00c      	beq.n	800c608 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4913      	ldr	r1, [pc, #76]	; (800c648 <HAL_PCD_IRQHandler+0x224>)
 800c5fa:	400a      	ands	r2, r1
 800c5fc:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	0018      	movs	r0, r3
 800c602:	f011 fb61 	bl	801dcc8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c606:	e00e      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	2380      	movs	r3, #128	; 0x80
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	4013      	ands	r3, r2
 800c610:	d009      	beq.n	800c626 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	490b      	ldr	r1, [pc, #44]	; (800c64c <HAL_PCD_IRQHandler+0x228>)
 800c61e:	400a      	ands	r2, r1
 800c620:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800c622:	e000      	b.n	800c626 <HAL_PCD_IRQHandler+0x202>
    return;
 800c624:	46c0      	nop			; (mov r8, r8)
  }
}
 800c626:	46bd      	mov	sp, r7
 800c628:	b004      	add	sp, #16
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	40010000 	.word	0x40010000
 800c630:	0000fbff 	.word	0x0000fbff
 800c634:	0000bfff 	.word	0x0000bfff
 800c638:	0000dfff 	.word	0x0000dfff
 800c63c:	0000efff 	.word	0x0000efff
 800c640:	0000f7ff 	.word	0x0000f7ff
 800c644:	0000ff7f 	.word	0x0000ff7f
 800c648:	0000fdff 	.word	0x0000fdff
 800c64c:	0000feff 	.word	0x0000feff

0800c650 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	000a      	movs	r2, r1
 800c65a:	1cfb      	adds	r3, r7, #3
 800c65c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	23a5      	movs	r3, #165	; 0xa5
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	5cd3      	ldrb	r3, [r2, r3]
 800c666:	2b01      	cmp	r3, #1
 800c668:	d101      	bne.n	800c66e <HAL_PCD_SetAddress+0x1e>
 800c66a:	2302      	movs	r3, #2
 800c66c:	e016      	b.n	800c69c <HAL_PCD_SetAddress+0x4c>
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	23a5      	movs	r3, #165	; 0xa5
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	2101      	movs	r1, #1
 800c676:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	1cfa      	adds	r2, r7, #3
 800c67c:	7812      	ldrb	r2, [r2, #0]
 800c67e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	1cfb      	adds	r3, r7, #3
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	0019      	movs	r1, r3
 800c68a:	0010      	movs	r0, r2
 800c68c:	f006 f86c 	bl	8012768 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	23a5      	movs	r3, #165	; 0xa5
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	2100      	movs	r1, #0
 800c698:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	0018      	movs	r0, r3
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	b002      	add	sp, #8
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c6a4:	b590      	push	{r4, r7, lr}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	000c      	movs	r4, r1
 800c6ae:	0010      	movs	r0, r2
 800c6b0:	0019      	movs	r1, r3
 800c6b2:	1cfb      	adds	r3, r7, #3
 800c6b4:	1c22      	adds	r2, r4, #0
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	003b      	movs	r3, r7
 800c6ba:	1c02      	adds	r2, r0, #0
 800c6bc:	801a      	strh	r2, [r3, #0]
 800c6be:	1cbb      	adds	r3, r7, #2
 800c6c0:	1c0a      	adds	r2, r1, #0
 800c6c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c6c4:	230b      	movs	r3, #11
 800c6c6:	18fb      	adds	r3, r7, r3
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c6cc:	1cfb      	adds	r3, r7, #3
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	b25b      	sxtb	r3, r3
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	da10      	bge.n	800c6f8 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6d6:	1cfb      	adds	r3, r7, #3
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	2207      	movs	r2, #7
 800c6dc:	401a      	ands	r2, r3
 800c6de:	0013      	movs	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	189b      	adds	r3, r3, r2
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	3310      	adds	r3, #16
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	18d3      	adds	r3, r2, r3
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	705a      	strb	r2, [r3, #1]
 800c6f6:	e010      	b.n	800c71a <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c6f8:	1cfb      	adds	r3, r7, #3
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2207      	movs	r2, #7
 800c6fe:	401a      	ands	r2, r3
 800c700:	0013      	movs	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	189b      	adds	r3, r3, r2
 800c706:	00db      	lsls	r3, r3, #3
 800c708:	3351      	adds	r3, #81	; 0x51
 800c70a:	33ff      	adds	r3, #255	; 0xff
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	18d3      	adds	r3, r2, r3
 800c710:	3304      	adds	r3, #4
 800c712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c71a:	1cfb      	adds	r3, r7, #3
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	2207      	movs	r2, #7
 800c720:	4013      	ands	r3, r2
 800c722:	b2da      	uxtb	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c728:	003b      	movs	r3, r7
 800c72a:	881a      	ldrh	r2, [r3, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	1cba      	adds	r2, r7, #2
 800c734:	7812      	ldrb	r2, [r2, #0]
 800c736:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c738:	1cbb      	adds	r3, r7, #2
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d102      	bne.n	800c746 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	23a5      	movs	r3, #165	; 0xa5
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	5cd3      	ldrb	r3, [r2, r3]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d101      	bne.n	800c756 <HAL_PCD_EP_Open+0xb2>
 800c752:	2302      	movs	r3, #2
 800c754:	e013      	b.n	800c77e <HAL_PCD_EP_Open+0xda>
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	23a5      	movs	r3, #165	; 0xa5
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	2101      	movs	r1, #1
 800c75e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	0011      	movs	r1, r2
 800c768:	0018      	movs	r0, r3
 800c76a:	f004 fa79 	bl	8010c60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	23a5      	movs	r3, #165	; 0xa5
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	2100      	movs	r1, #0
 800c776:	54d1      	strb	r1, [r2, r3]

  return ret;
 800c778:	230b      	movs	r3, #11
 800c77a:	18fb      	adds	r3, r7, r3
 800c77c:	781b      	ldrb	r3, [r3, #0]
}
 800c77e:	0018      	movs	r0, r3
 800c780:	46bd      	mov	sp, r7
 800c782:	b005      	add	sp, #20
 800c784:	bd90      	pop	{r4, r7, pc}

0800c786 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	000a      	movs	r2, r1
 800c790:	1cfb      	adds	r3, r7, #3
 800c792:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c794:	1cfb      	adds	r3, r7, #3
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	b25b      	sxtb	r3, r3
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	da10      	bge.n	800c7c0 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c79e:	1cfb      	adds	r3, r7, #3
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	2207      	movs	r2, #7
 800c7a4:	401a      	ands	r2, r3
 800c7a6:	0013      	movs	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	189b      	adds	r3, r3, r2
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	3310      	adds	r3, #16
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	18d3      	adds	r3, r2, r3
 800c7b4:	3304      	adds	r3, #4
 800c7b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	705a      	strb	r2, [r3, #1]
 800c7be:	e010      	b.n	800c7e2 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c7c0:	1cfb      	adds	r3, r7, #3
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	2207      	movs	r2, #7
 800c7c6:	401a      	ands	r2, r3
 800c7c8:	0013      	movs	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	189b      	adds	r3, r3, r2
 800c7ce:	00db      	lsls	r3, r3, #3
 800c7d0:	3351      	adds	r3, #81	; 0x51
 800c7d2:	33ff      	adds	r3, #255	; 0xff
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	18d3      	adds	r3, r2, r3
 800c7d8:	3304      	adds	r3, #4
 800c7da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c7e2:	1cfb      	adds	r3, r7, #3
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2207      	movs	r2, #7
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	23a5      	movs	r3, #165	; 0xa5
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	5cd3      	ldrb	r3, [r2, r3]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d101      	bne.n	800c800 <HAL_PCD_EP_Close+0x7a>
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	e011      	b.n	800c824 <HAL_PCD_EP_Close+0x9e>
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	23a5      	movs	r3, #165	; 0xa5
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	2101      	movs	r1, #1
 800c808:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	0011      	movs	r1, r2
 800c812:	0018      	movs	r0, r3
 800c814:	f004 fd58 	bl	80112c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	23a5      	movs	r3, #165	; 0xa5
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	2100      	movs	r1, #0
 800c820:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	0018      	movs	r0, r3
 800c826:	46bd      	mov	sp, r7
 800c828:	b004      	add	sp, #16
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	607a      	str	r2, [r7, #4]
 800c836:	603b      	str	r3, [r7, #0]
 800c838:	200b      	movs	r0, #11
 800c83a:	183b      	adds	r3, r7, r0
 800c83c:	1c0a      	adds	r2, r1, #0
 800c83e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c840:	0001      	movs	r1, r0
 800c842:	187b      	adds	r3, r7, r1
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	2207      	movs	r2, #7
 800c848:	401a      	ands	r2, r3
 800c84a:	0013      	movs	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	189b      	adds	r3, r3, r2
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	3351      	adds	r3, #81	; 0x51
 800c854:	33ff      	adds	r3, #255	; 0xff
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	18d3      	adds	r3, r2, r3
 800c85a:	3304      	adds	r3, #4
 800c85c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2200      	movs	r2, #0
 800c86e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	2200      	movs	r2, #0
 800c874:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c876:	187b      	adds	r3, r7, r1
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	2207      	movs	r2, #7
 800c87c:	4013      	ands	r3, r2
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	0011      	movs	r1, r2
 800c88c:	0018      	movs	r0, r3
 800c88e:	f004 fe81 	bl	8011594 <USB_EPStartXfer>

  return HAL_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	0018      	movs	r0, r3
 800c896:	46bd      	mov	sp, r7
 800c898:	b006      	add	sp, #24
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	000a      	movs	r2, r1
 800c8a6:	1cfb      	adds	r3, r7, #3
 800c8a8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c8aa:	1cfb      	adds	r3, r7, #3
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	2207      	movs	r2, #7
 800c8b0:	401a      	ands	r2, r3
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	23b8      	movs	r3, #184	; 0xb8
 800c8b6:	0059      	lsls	r1, r3, #1
 800c8b8:	0013      	movs	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	189b      	adds	r3, r3, r2
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	18c3      	adds	r3, r0, r3
 800c8c2:	185b      	adds	r3, r3, r1
 800c8c4:	681b      	ldr	r3, [r3, #0]
}
 800c8c6:	0018      	movs	r0, r3
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	b002      	add	sp, #8
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b086      	sub	sp, #24
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	60f8      	str	r0, [r7, #12]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	603b      	str	r3, [r7, #0]
 800c8da:	200b      	movs	r0, #11
 800c8dc:	183b      	adds	r3, r7, r0
 800c8de:	1c0a      	adds	r2, r1, #0
 800c8e0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c8e2:	183b      	adds	r3, r7, r0
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2207      	movs	r2, #7
 800c8e8:	401a      	ands	r2, r3
 800c8ea:	0013      	movs	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	189b      	adds	r3, r3, r2
 800c8f0:	00db      	lsls	r3, r3, #3
 800c8f2:	3310      	adds	r3, #16
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	18d3      	adds	r3, r2, r3
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	2224      	movs	r2, #36	; 0x24
 800c90c:	2101      	movs	r1, #1
 800c90e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2200      	movs	r2, #0
 800c91a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	2201      	movs	r2, #1
 800c920:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c922:	183b      	adds	r3, r7, r0
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	2207      	movs	r2, #7
 800c928:	4013      	ands	r3, r2
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	0011      	movs	r1, r2
 800c938:	0018      	movs	r0, r3
 800c93a:	f004 fe2b 	bl	8011594 <USB_EPStartXfer>

  return HAL_OK;
 800c93e:	2300      	movs	r3, #0
}
 800c940:	0018      	movs	r0, r3
 800c942:	46bd      	mov	sp, r7
 800c944:	b006      	add	sp, #24
 800c946:	bd80      	pop	{r7, pc}

0800c948 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	000a      	movs	r2, r1
 800c952:	1cfb      	adds	r3, r7, #3
 800c954:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c956:	1cfb      	adds	r3, r7, #3
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2207      	movs	r2, #7
 800c95c:	4013      	ands	r3, r2
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	7912      	ldrb	r2, [r2, #4]
 800c962:	4293      	cmp	r3, r2
 800c964:	d901      	bls.n	800c96a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	e048      	b.n	800c9fc <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c96a:	1cfb      	adds	r3, r7, #3
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	b25b      	sxtb	r3, r3
 800c970:	2b00      	cmp	r3, #0
 800c972:	da10      	bge.n	800c996 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c974:	1cfb      	adds	r3, r7, #3
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	2207      	movs	r2, #7
 800c97a:	401a      	ands	r2, r3
 800c97c:	0013      	movs	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	189b      	adds	r3, r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	3310      	adds	r3, #16
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	18d3      	adds	r3, r2, r3
 800c98a:	3304      	adds	r3, #4
 800c98c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2201      	movs	r2, #1
 800c992:	705a      	strb	r2, [r3, #1]
 800c994:	e00e      	b.n	800c9b4 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c996:	1cfb      	adds	r3, r7, #3
 800c998:	781a      	ldrb	r2, [r3, #0]
 800c99a:	0013      	movs	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	189b      	adds	r3, r3, r2
 800c9a0:	00db      	lsls	r3, r3, #3
 800c9a2:	3351      	adds	r3, #81	; 0x51
 800c9a4:	33ff      	adds	r3, #255	; 0xff
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	18d3      	adds	r3, r2, r3
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9ba:	1cfb      	adds	r3, r7, #3
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	2207      	movs	r2, #7
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	23a5      	movs	r3, #165	; 0xa5
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	5cd3      	ldrb	r3, [r2, r3]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d101      	bne.n	800c9d8 <HAL_PCD_EP_SetStall+0x90>
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	e011      	b.n	800c9fc <HAL_PCD_EP_SetStall+0xb4>
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	23a5      	movs	r3, #165	; 0xa5
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	2101      	movs	r1, #1
 800c9e0:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	0011      	movs	r1, r2
 800c9ea:	0018      	movs	r0, r3
 800c9ec:	f005 fde8 	bl	80125c0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	23a5      	movs	r3, #165	; 0xa5
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	0018      	movs	r0, r3
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	b004      	add	sp, #16
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	000a      	movs	r2, r1
 800ca0e:	1cfb      	adds	r3, r7, #3
 800ca10:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ca12:	1cfb      	adds	r3, r7, #3
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	220f      	movs	r2, #15
 800ca18:	4013      	ands	r3, r2
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	7912      	ldrb	r2, [r2, #4]
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d901      	bls.n	800ca26 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e04a      	b.n	800cabc <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ca26:	1cfb      	adds	r3, r7, #3
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	b25b      	sxtb	r3, r3
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	da10      	bge.n	800ca52 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca30:	1cfb      	adds	r3, r7, #3
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	2207      	movs	r2, #7
 800ca36:	401a      	ands	r2, r3
 800ca38:	0013      	movs	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	189b      	adds	r3, r3, r2
 800ca3e:	00db      	lsls	r3, r3, #3
 800ca40:	3310      	adds	r3, #16
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	18d3      	adds	r3, r2, r3
 800ca46:	3304      	adds	r3, #4
 800ca48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	705a      	strb	r2, [r3, #1]
 800ca50:	e010      	b.n	800ca74 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca52:	1cfb      	adds	r3, r7, #3
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2207      	movs	r2, #7
 800ca58:	401a      	ands	r2, r3
 800ca5a:	0013      	movs	r3, r2
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	189b      	adds	r3, r3, r2
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	3351      	adds	r3, #81	; 0x51
 800ca64:	33ff      	adds	r3, #255	; 0xff
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	18d3      	adds	r3, r2, r3
 800ca6a:	3304      	adds	r3, #4
 800ca6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca7a:	1cfb      	adds	r3, r7, #3
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	2207      	movs	r2, #7
 800ca80:	4013      	ands	r3, r2
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	23a5      	movs	r3, #165	; 0xa5
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	5cd3      	ldrb	r3, [r2, r3]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d101      	bne.n	800ca98 <HAL_PCD_EP_ClrStall+0x94>
 800ca94:	2302      	movs	r3, #2
 800ca96:	e011      	b.n	800cabc <HAL_PCD_EP_ClrStall+0xb8>
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	23a5      	movs	r3, #165	; 0xa5
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	2101      	movs	r1, #1
 800caa0:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	0011      	movs	r1, r2
 800caaa:	0018      	movs	r0, r3
 800caac:	f005 fdca 	bl	8012644 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	23a5      	movs	r3, #165	; 0xa5
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	2100      	movs	r1, #0
 800cab8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	0018      	movs	r0, r3
 800cabe:	46bd      	mov	sp, r7
 800cac0:	b004      	add	sp, #16
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800cac4:	b5b0      	push	{r4, r5, r7, lr}
 800cac6:	b08e      	sub	sp, #56	; 0x38
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800cacc:	e362      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cad4:	2022      	movs	r0, #34	; 0x22
 800cad6:	183b      	adds	r3, r7, r0
 800cad8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800cada:	183b      	adds	r3, r7, r0
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	2421      	movs	r4, #33	; 0x21
 800cae2:	193b      	adds	r3, r7, r4
 800cae4:	210f      	movs	r1, #15
 800cae6:	400a      	ands	r2, r1
 800cae8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800caea:	193b      	adds	r3, r7, r4
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d000      	beq.n	800caf4 <PCD_EP_ISR_Handler+0x30>
 800caf2:	e12d      	b.n	800cd50 <PCD_EP_ISR_Handler+0x28c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800caf4:	183b      	adds	r3, r7, r0
 800caf6:	881b      	ldrh	r3, [r3, #0]
 800caf8:	2210      	movs	r2, #16
 800cafa:	4013      	ands	r3, r2
 800cafc:	d140      	bne.n	800cb80 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4ac6      	ldr	r2, [pc, #792]	; (800ce20 <PCD_EP_ISR_Handler+0x35c>)
 800cb06:	4013      	ands	r3, r2
 800cb08:	60bb      	str	r3, [r7, #8]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	2180      	movs	r1, #128	; 0x80
 800cb12:	0209      	lsls	r1, r1, #8
 800cb14:	430a      	orrs	r2, r1
 800cb16:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	3314      	adds	r3, #20
 800cb1c:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	4abf      	ldr	r2, [pc, #764]	; (800ce24 <PCD_EP_ISR_Handler+0x360>)
 800cb26:	4694      	mov	ip, r2
 800cb28:	4463      	add	r3, ip
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	0c1b      	lsrs	r3, r3, #16
 800cb2e:	059b      	lsls	r3, r3, #22
 800cb30:	0d9a      	lsrs	r2, r3, #22
 800cb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800cb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb38:	695a      	ldr	r2, [r3, #20]
 800cb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3c:	69db      	ldr	r3, [r3, #28]
 800cb3e:	18d2      	adds	r2, r2, r3
 800cb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb42:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2100      	movs	r1, #0
 800cb48:	0018      	movs	r0, r3
 800cb4a:	f011 f89f 	bl	801dc8c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7c5b      	ldrb	r3, [r3, #17]
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d100      	bne.n	800cb5a <PCD_EP_ISR_Handler+0x96>
 800cb58:	e31c      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
 800cb5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d000      	beq.n	800cb64 <PCD_EP_ISR_Handler+0xa0>
 800cb62:	e317      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	7c5b      	ldrb	r3, [r3, #17]
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2280      	movs	r2, #128	; 0x80
 800cb6c:	4252      	negs	r2, r2
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	745a      	strb	r2, [r3, #17]
 800cb7e:	e309      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3355      	adds	r3, #85	; 0x55
 800cb84:	33ff      	adds	r3, #255	; 0xff
 800cb86:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	2132      	movs	r1, #50	; 0x32
 800cb90:	187b      	adds	r3, r7, r1
 800cb92:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800cb94:	187b      	adds	r3, r7, r1
 800cb96:	881a      	ldrh	r2, [r3, #0]
 800cb98:	2380      	movs	r3, #128	; 0x80
 800cb9a:	011b      	lsls	r3, r3, #4
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	d02a      	beq.n	800cbf6 <PCD_EP_ISR_Handler+0x132>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	0019      	movs	r1, r3
 800cbac:	0010      	movs	r0, r2
 800cbae:	f7ff fab3 	bl	800c118 <PCD_GET_EP_RX_CNT>
 800cbb2:	0003      	movs	r3, r0
 800cbb4:	001a      	movs	r2, r3
 800cbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6818      	ldr	r0, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	22a7      	movs	r2, #167	; 0xa7
 800cbc2:	0092      	lsls	r2, r2, #2
 800cbc4:	1899      	adds	r1, r3, r2
 800cbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800cbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbcc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	f005 fe70 	bl	80128b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a93      	ldr	r2, [pc, #588]	; (800ce28 <PCD_EP_ISR_Handler+0x364>)
 800cbdc:	4013      	ands	r3, r2
 800cbde:	60fb      	str	r3, [r7, #12]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	2180      	movs	r1, #128	; 0x80
 800cbe8:	430a      	orrs	r2, r1
 800cbea:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	0018      	movs	r0, r3
 800cbf0:	f011 f816 	bl	801dc20 <HAL_PCD_SetupStageCallback>
 800cbf4:	e2ce      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800cbf6:	2332      	movs	r3, #50	; 0x32
 800cbf8:	18fb      	adds	r3, r7, r3
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	5e9b      	ldrsh	r3, [r3, r2]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	db00      	blt.n	800cc04 <PCD_EP_ISR_Handler+0x140>
 800cc02:	e2c7      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a87      	ldr	r2, [pc, #540]	; (800ce28 <PCD_EP_ISR_Handler+0x364>)
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc16:	2180      	movs	r1, #128	; 0x80
 800cc18:	430a      	orrs	r2, r1
 800cc1a:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	0019      	movs	r1, r3
 800cc28:	0010      	movs	r0, r2
 800cc2a:	f7ff fa75 	bl	800c118 <PCD_GET_EP_RX_CNT>
 800cc2e:	0003      	movs	r3, r0
 800cc30:	001a      	movs	r2, r3
 800cc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc34:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800cc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc38:	69db      	ldr	r3, [r3, #28]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d01a      	beq.n	800cc74 <PCD_EP_ISR_Handler+0x1b0>
 800cc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc40:	695b      	ldr	r3, [r3, #20]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d016      	beq.n	800cc74 <PCD_EP_ISR_Handler+0x1b0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6818      	ldr	r0, [r3, #0]
 800cc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4c:	6959      	ldr	r1, [r3, #20]
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc50:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800cc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc54:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	f005 fe2c 	bl	80128b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800cc5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc5e:	695a      	ldr	r2, [r3, #20]
 800cc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc62:	69db      	ldr	r3, [r3, #28]
 800cc64:	18d2      	adds	r2, r2, r3
 800cc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc68:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	0018      	movs	r0, r3
 800cc70:	f010 ffeb 	bl	801dc4a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	2132      	movs	r1, #50	; 0x32
 800cc7c:	187b      	adds	r3, r7, r1
 800cc7e:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800cc80:	187b      	adds	r3, r7, r1
 800cc82:	881a      	ldrh	r2, [r3, #0]
 800cc84:	2380      	movs	r3, #128	; 0x80
 800cc86:	011b      	lsls	r3, r3, #4
 800cc88:	4013      	ands	r3, r2
 800cc8a:	d000      	beq.n	800cc8e <PCD_EP_ISR_Handler+0x1ca>
 800cc8c:	e282      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
 800cc8e:	187b      	adds	r3, r7, r1
 800cc90:	881a      	ldrh	r2, [r3, #0]
 800cc92:	23c0      	movs	r3, #192	; 0xc0
 800cc94:	019b      	lsls	r3, r3, #6
 800cc96:	401a      	ands	r2, r3
 800cc98:	23c0      	movs	r3, #192	; 0xc0
 800cc9a:	019b      	lsls	r3, r3, #6
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d100      	bne.n	800cca2 <PCD_EP_ISR_Handler+0x1de>
 800cca0:	e278      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800cca2:	4b60      	ldr	r3, [pc, #384]	; (800ce24 <PCD_EP_ISR_Handler+0x360>)
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	4b5f      	ldr	r3, [pc, #380]	; (800ce24 <PCD_EP_ISR_Handler+0x360>)
 800cca8:	0192      	lsls	r2, r2, #6
 800ccaa:	0992      	lsrs	r2, r2, #6
 800ccac:	605a      	str	r2, [r3, #4]
 800ccae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb0:	691b      	ldr	r3, [r3, #16]
 800ccb2:	2b3e      	cmp	r3, #62	; 0x3e
 800ccb4:	d916      	bls.n	800cce4 <PCD_EP_ISR_Handler+0x220>
 800ccb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	095b      	lsrs	r3, r3, #5
 800ccbc:	617b      	str	r3, [r7, #20]
 800ccbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	221f      	movs	r2, #31
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	d102      	bne.n	800ccce <PCD_EP_ISR_Handler+0x20a>
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	617b      	str	r3, [r7, #20]
 800ccce:	4b55      	ldr	r3, [pc, #340]	; (800ce24 <PCD_EP_ISR_Handler+0x360>)
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	069b      	lsls	r3, r3, #26
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	4b52      	ldr	r3, [pc, #328]	; (800ce24 <PCD_EP_ISR_Handler+0x360>)
 800ccda:	2180      	movs	r1, #128	; 0x80
 800ccdc:	0609      	lsls	r1, r1, #24
 800ccde:	430a      	orrs	r2, r1
 800cce0:	605a      	str	r2, [r3, #4]
 800cce2:	e01e      	b.n	800cd22 <PCD_EP_ISR_Handler+0x25e>
 800cce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d107      	bne.n	800ccfc <PCD_EP_ISR_Handler+0x238>
 800ccec:	4b4d      	ldr	r3, [pc, #308]	; (800ce24 <PCD_EP_ISR_Handler+0x360>)
 800ccee:	685a      	ldr	r2, [r3, #4]
 800ccf0:	4b4c      	ldr	r3, [pc, #304]	; (800ce24 <PCD_EP_ISR_Handler+0x360>)
 800ccf2:	2180      	movs	r1, #128	; 0x80
 800ccf4:	0609      	lsls	r1, r1, #24
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	605a      	str	r2, [r3, #4]
 800ccfa:	e012      	b.n	800cd22 <PCD_EP_ISR_Handler+0x25e>
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	085b      	lsrs	r3, r3, #1
 800cd02:	617b      	str	r3, [r7, #20]
 800cd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	d002      	beq.n	800cd14 <PCD_EP_ISR_Handler+0x250>
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	3301      	adds	r3, #1
 800cd12:	617b      	str	r3, [r7, #20]
 800cd14:	4b43      	ldr	r3, [pc, #268]	; (800ce24 <PCD_EP_ISR_Handler+0x360>)
 800cd16:	6859      	ldr	r1, [r3, #4]
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	069a      	lsls	r2, r3, #26
 800cd1c:	4b41      	ldr	r3, [pc, #260]	; (800ce24 <PCD_EP_ISR_Handler+0x360>)
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a40      	ldr	r2, [pc, #256]	; (800ce2c <PCD_EP_ISR_Handler+0x368>)
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	613b      	str	r3, [r7, #16]
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	2280      	movs	r2, #128	; 0x80
 800cd32:	0152      	lsls	r2, r2, #5
 800cd34:	4053      	eors	r3, r2
 800cd36:	613b      	str	r3, [r7, #16]
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	2280      	movs	r2, #128	; 0x80
 800cd3c:	0192      	lsls	r2, r2, #6
 800cd3e:	4053      	eors	r3, r2
 800cd40:	613b      	str	r3, [r7, #16]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	693a      	ldr	r2, [r7, #16]
 800cd48:	4939      	ldr	r1, [pc, #228]	; (800ce30 <PCD_EP_ISR_Handler+0x36c>)
 800cd4a:	430a      	orrs	r2, r1
 800cd4c:	601a      	str	r2, [r3, #0]
 800cd4e:	e221      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	001a      	movs	r2, r3
 800cd56:	2121      	movs	r1, #33	; 0x21
 800cd58:	187b      	adds	r3, r7, r1
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	18d3      	adds	r3, r2, r3
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	2032      	movs	r0, #50	; 0x32
 800cd64:	183b      	adds	r3, r7, r0
 800cd66:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800cd68:	183b      	adds	r3, r7, r0
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	5e9b      	ldrsh	r3, [r3, r2]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	db00      	blt.n	800cd74 <PCD_EP_ISR_Handler+0x2b0>
 800cd72:	e0e2      	b.n	800cf3a <PCD_EP_ISR_Handler+0x476>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	001a      	movs	r2, r3
 800cd7a:	187b      	adds	r3, r7, r1
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	18d3      	adds	r3, r2, r3
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a28      	ldr	r2, [pc, #160]	; (800ce28 <PCD_EP_ISR_Handler+0x364>)
 800cd86:	4013      	ands	r3, r2
 800cd88:	61fb      	str	r3, [r7, #28]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	001a      	movs	r2, r3
 800cd90:	0008      	movs	r0, r1
 800cd92:	187b      	adds	r3, r7, r1
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	18d3      	adds	r3, r2, r3
 800cd9a:	69fa      	ldr	r2, [r7, #28]
 800cd9c:	2180      	movs	r1, #128	; 0x80
 800cd9e:	430a      	orrs	r2, r1
 800cda0:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800cda2:	183b      	adds	r3, r7, r0
 800cda4:	781a      	ldrb	r2, [r3, #0]
 800cda6:	0013      	movs	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	189b      	adds	r3, r3, r2
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	3351      	adds	r3, #81	; 0x51
 800cdb0:	33ff      	adds	r3, #255	; 0xff
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	18d3      	adds	r3, r2, r3
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800cdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbc:	7b1b      	ldrb	r3, [r3, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d11d      	bne.n	800cdfe <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	2524      	movs	r5, #36	; 0x24
 800cdce:	197c      	adds	r4, r7, r5
 800cdd0:	0019      	movs	r1, r3
 800cdd2:	0010      	movs	r0, r2
 800cdd4:	f7ff f9a0 	bl	800c118 <PCD_GET_EP_RX_CNT>
 800cdd8:	0003      	movs	r3, r0
 800cdda:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800cddc:	002c      	movs	r4, r5
 800cdde:	193b      	adds	r3, r7, r4
 800cde0:	881b      	ldrh	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d100      	bne.n	800cde8 <PCD_EP_ISR_Handler+0x324>
 800cde6:	e080      	b.n	800ceea <PCD_EP_ISR_Handler+0x426>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6818      	ldr	r0, [r3, #0]
 800cdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdee:	6959      	ldr	r1, [r3, #20]
 800cdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf2:	88da      	ldrh	r2, [r3, #6]
 800cdf4:	193b      	adds	r3, r7, r4
 800cdf6:	881b      	ldrh	r3, [r3, #0]
 800cdf8:	f005 fd5c 	bl	80128b4 <USB_ReadPMA>
 800cdfc:	e075      	b.n	800ceea <PCD_EP_ISR_Handler+0x426>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800cdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce00:	78db      	ldrb	r3, [r3, #3]
 800ce02:	2b02      	cmp	r3, #2
 800ce04:	d116      	bne.n	800ce34 <PCD_EP_ISR_Handler+0x370>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ce06:	2324      	movs	r3, #36	; 0x24
 800ce08:	18fc      	adds	r4, r7, r3
 800ce0a:	2332      	movs	r3, #50	; 0x32
 800ce0c:	18fb      	adds	r3, r7, r3
 800ce0e:	881a      	ldrh	r2, [r3, #0]
 800ce10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	0018      	movs	r0, r3
 800ce16:	f000 f9cb 	bl	800d1b0 <HAL_PCD_EP_DB_Receive>
 800ce1a:	0003      	movs	r3, r0
 800ce1c:	8023      	strh	r3, [r4, #0]
 800ce1e:	e064      	b.n	800ceea <PCD_EP_ISR_Handler+0x426>
 800ce20:	07ff8f0f 	.word	0x07ff8f0f
 800ce24:	40009800 	.word	0x40009800
 800ce28:	07ff0f8f 	.word	0x07ff0f8f
 800ce2c:	07ffbf8f 	.word	0x07ffbf8f
 800ce30:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	001a      	movs	r2, r3
 800ce3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	18d3      	adds	r3, r2, r3
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4acb      	ldr	r2, [pc, #812]	; (800d174 <PCD_EP_ISR_Handler+0x6b0>)
 800ce46:	4013      	ands	r3, r2
 800ce48:	61bb      	str	r3, [r7, #24]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	001a      	movs	r2, r3
 800ce50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	18d3      	adds	r3, r2, r3
 800ce58:	69ba      	ldr	r2, [r7, #24]
 800ce5a:	49c7      	ldr	r1, [pc, #796]	; (800d178 <PCD_EP_ISR_Handler+0x6b4>)
 800ce5c:	430a      	orrs	r2, r1
 800ce5e:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	001a      	movs	r2, r3
 800ce66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	18d3      	adds	r3, r2, r3
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	2380      	movs	r3, #128	; 0x80
 800ce72:	01db      	lsls	r3, r3, #7
 800ce74:	4013      	ands	r3, r2
 800ce76:	d01c      	beq.n	800ceb2 <PCD_EP_ISR_Handler+0x3ee>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	2524      	movs	r5, #36	; 0x24
 800ce84:	197c      	adds	r4, r7, r5
 800ce86:	0019      	movs	r1, r3
 800ce88:	0010      	movs	r0, r2
 800ce8a:	f7ff f967 	bl	800c15c <PCD_GET_EP_DBUF0_CNT>
 800ce8e:	0003      	movs	r3, r0
 800ce90:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800ce92:	002c      	movs	r4, r5
 800ce94:	193b      	adds	r3, r7, r4
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d026      	beq.n	800ceea <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6818      	ldr	r0, [r3, #0]
 800cea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea2:	6959      	ldr	r1, [r3, #20]
 800cea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea6:	891a      	ldrh	r2, [r3, #8]
 800cea8:	193b      	adds	r3, r7, r4
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	f005 fd02 	bl	80128b4 <USB_ReadPMA>
 800ceb0:	e01b      	b.n	800ceea <PCD_EP_ISR_Handler+0x426>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	2524      	movs	r5, #36	; 0x24
 800cebe:	197c      	adds	r4, r7, r5
 800cec0:	0019      	movs	r1, r3
 800cec2:	0010      	movs	r0, r2
 800cec4:	f7ff f96c 	bl	800c1a0 <PCD_GET_EP_DBUF1_CNT>
 800cec8:	0003      	movs	r3, r0
 800ceca:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800cecc:	002c      	movs	r4, r5
 800cece:	193b      	adds	r3, r7, r4
 800ced0:	881b      	ldrh	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d009      	beq.n	800ceea <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6818      	ldr	r0, [r3, #0]
 800ceda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cedc:	6959      	ldr	r1, [r3, #20]
 800cede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee0:	895a      	ldrh	r2, [r3, #10]
 800cee2:	193b      	adds	r3, r7, r4
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	f005 fce5 	bl	80128b4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ceea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceec:	69da      	ldr	r2, [r3, #28]
 800ceee:	2124      	movs	r1, #36	; 0x24
 800cef0:	187b      	adds	r3, r7, r1
 800cef2:	881b      	ldrh	r3, [r3, #0]
 800cef4:	18d2      	adds	r2, r2, r3
 800cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800cefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefc:	695a      	ldr	r2, [r3, #20]
 800cefe:	187b      	adds	r3, r7, r1
 800cf00:	881b      	ldrh	r3, [r3, #0]
 800cf02:	18d2      	adds	r2, r2, r3
 800cf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf06:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800cf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d005      	beq.n	800cf1c <PCD_EP_ISR_Handler+0x458>
 800cf10:	187b      	adds	r3, r7, r1
 800cf12:	881a      	ldrh	r2, [r3, #0]
 800cf14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d207      	bcs.n	800cf2c <PCD_EP_ISR_Handler+0x468>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800cf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1e:	781a      	ldrb	r2, [r3, #0]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	0011      	movs	r1, r2
 800cf24:	0018      	movs	r0, r3
 800cf26:	f010 fe90 	bl	801dc4a <HAL_PCD_DataOutStageCallback>
 800cf2a:	e006      	b.n	800cf3a <PCD_EP_ISR_Handler+0x476>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf32:	0011      	movs	r1, r2
 800cf34:	0018      	movs	r0, r3
 800cf36:	f004 fb2d 	bl	8011594 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800cf3a:	2032      	movs	r0, #50	; 0x32
 800cf3c:	183b      	adds	r3, r7, r0
 800cf3e:	881b      	ldrh	r3, [r3, #0]
 800cf40:	2280      	movs	r2, #128	; 0x80
 800cf42:	4013      	ands	r3, r2
 800cf44:	d100      	bne.n	800cf48 <PCD_EP_ISR_Handler+0x484>
 800cf46:	e125      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
      {
        ep = &hpcd->IN_ep[epindex];
 800cf48:	2121      	movs	r1, #33	; 0x21
 800cf4a:	187b      	adds	r3, r7, r1
 800cf4c:	781a      	ldrb	r2, [r3, #0]
 800cf4e:	0013      	movs	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	189b      	adds	r3, r3, r2
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	3310      	adds	r3, #16
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	18d3      	adds	r3, r2, r3
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	001a      	movs	r2, r3
 800cf66:	187b      	adds	r3, r7, r1
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	18d3      	adds	r3, r2, r3
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a82      	ldr	r2, [pc, #520]	; (800d17c <PCD_EP_ISR_Handler+0x6b8>)
 800cf72:	4013      	ands	r3, r2
 800cf74:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	001a      	movs	r2, r3
 800cf7c:	187b      	adds	r3, r7, r1
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	18d3      	adds	r3, r2, r3
 800cf84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf86:	2180      	movs	r1, #128	; 0x80
 800cf88:	0209      	lsls	r1, r1, #8
 800cf8a:	430a      	orrs	r2, r1
 800cf8c:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800cf8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf90:	78db      	ldrb	r3, [r3, #3]
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d000      	beq.n	800cf98 <PCD_EP_ISR_Handler+0x4d4>
 800cf96:	e0a3      	b.n	800d0e0 <PCD_EP_ISR_Handler+0x61c>
        {
          ep->xfer_len = 0U;
 800cf98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800cf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa0:	7b1b      	ldrb	r3, [r3, #12]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d100      	bne.n	800cfa8 <PCD_EP_ISR_Handler+0x4e4>
 800cfa6:	e093      	b.n	800d0d0 <PCD_EP_ISR_Handler+0x60c>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cfa8:	183b      	adds	r3, r7, r0
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	2240      	movs	r2, #64	; 0x40
 800cfae:	4013      	ands	r3, r2
 800cfb0:	d047      	beq.n	800d042 <PCD_EP_ISR_Handler+0x57e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cfb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb4:	785b      	ldrb	r3, [r3, #1]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d121      	bne.n	800cffe <PCD_EP_ISR_Handler+0x53a>
 800cfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	4a6f      	ldr	r2, [pc, #444]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800cfc2:	4694      	mov	ip, r2
 800cfc4:	4463      	add	r3, ip
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	00db      	lsls	r3, r3, #3
 800cfce:	496c      	ldr	r1, [pc, #432]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800cfd0:	468c      	mov	ip, r1
 800cfd2:	4463      	add	r3, ip
 800cfd4:	0192      	lsls	r2, r2, #6
 800cfd6:	0992      	lsrs	r2, r2, #6
 800cfd8:	601a      	str	r2, [r3, #0]
 800cfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	00db      	lsls	r3, r3, #3
 800cfe0:	4a67      	ldr	r2, [pc, #412]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800cfe2:	4694      	mov	ip, r2
 800cfe4:	4463      	add	r3, ip
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	4964      	ldr	r1, [pc, #400]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800cff0:	468c      	mov	ip, r1
 800cff2:	4463      	add	r3, ip
 800cff4:	2180      	movs	r1, #128	; 0x80
 800cff6:	0609      	lsls	r1, r1, #24
 800cff8:	430a      	orrs	r2, r1
 800cffa:	601a      	str	r2, [r3, #0]
 800cffc:	e068      	b.n	800d0d0 <PCD_EP_ISR_Handler+0x60c>
 800cffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d000:	785b      	ldrb	r3, [r3, #1]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d164      	bne.n	800d0d0 <PCD_EP_ISR_Handler+0x60c>
 800d006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	4a5c      	ldr	r2, [pc, #368]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d00e:	4694      	mov	ip, r2
 800d010:	4463      	add	r3, ip
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	4959      	ldr	r1, [pc, #356]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d01c:	468c      	mov	ip, r1
 800d01e:	4463      	add	r3, ip
 800d020:	0412      	lsls	r2, r2, #16
 800d022:	0c12      	lsrs	r2, r2, #16
 800d024:	601a      	str	r2, [r3, #0]
 800d026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	4a54      	ldr	r2, [pc, #336]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d02e:	189a      	adds	r2, r3, r2
 800d030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	00db      	lsls	r3, r3, #3
 800d036:	4952      	ldr	r1, [pc, #328]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d038:	468c      	mov	ip, r1
 800d03a:	4463      	add	r3, ip
 800d03c:	6812      	ldr	r2, [r2, #0]
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	e046      	b.n	800d0d0 <PCD_EP_ISR_Handler+0x60c>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d044:	785b      	ldrb	r3, [r3, #1]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d121      	bne.n	800d08e <PCD_EP_ISR_Handler+0x5ca>
 800d04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	00db      	lsls	r3, r3, #3
 800d050:	4a4b      	ldr	r2, [pc, #300]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d052:	4694      	mov	ip, r2
 800d054:	4463      	add	r3, ip
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	00db      	lsls	r3, r3, #3
 800d05e:	4948      	ldr	r1, [pc, #288]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d060:	468c      	mov	ip, r1
 800d062:	4463      	add	r3, ip
 800d064:	0192      	lsls	r2, r2, #6
 800d066:	0992      	lsrs	r2, r2, #6
 800d068:	605a      	str	r2, [r3, #4]
 800d06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	00db      	lsls	r3, r3, #3
 800d070:	4a43      	ldr	r2, [pc, #268]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d072:	4694      	mov	ip, r2
 800d074:	4463      	add	r3, ip
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	00db      	lsls	r3, r3, #3
 800d07e:	4940      	ldr	r1, [pc, #256]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d080:	468c      	mov	ip, r1
 800d082:	4463      	add	r3, ip
 800d084:	2180      	movs	r1, #128	; 0x80
 800d086:	0609      	lsls	r1, r1, #24
 800d088:	430a      	orrs	r2, r1
 800d08a:	605a      	str	r2, [r3, #4]
 800d08c:	e020      	b.n	800d0d0 <PCD_EP_ISR_Handler+0x60c>
 800d08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d090:	785b      	ldrb	r3, [r3, #1]
 800d092:	2b01      	cmp	r3, #1
 800d094:	d11c      	bne.n	800d0d0 <PCD_EP_ISR_Handler+0x60c>
 800d096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	00db      	lsls	r3, r3, #3
 800d09c:	4a38      	ldr	r2, [pc, #224]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d09e:	4694      	mov	ip, r2
 800d0a0:	4463      	add	r3, ip
 800d0a2:	685a      	ldr	r2, [r3, #4]
 800d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	4935      	ldr	r1, [pc, #212]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d0ac:	468c      	mov	ip, r1
 800d0ae:	4463      	add	r3, ip
 800d0b0:	0412      	lsls	r2, r2, #16
 800d0b2:	0c12      	lsrs	r2, r2, #16
 800d0b4:	605a      	str	r2, [r3, #4]
 800d0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	00db      	lsls	r3, r3, #3
 800d0bc:	4a30      	ldr	r2, [pc, #192]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d0be:	189a      	adds	r2, r3, r2
 800d0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	00db      	lsls	r3, r3, #3
 800d0c6:	492e      	ldr	r1, [pc, #184]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d0c8:	468c      	mov	ip, r1
 800d0ca:	4463      	add	r3, ip
 800d0cc:	6852      	ldr	r2, [r2, #4]
 800d0ce:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d2:	781a      	ldrb	r2, [r3, #0]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	0011      	movs	r1, r2
 800d0d8:	0018      	movs	r0, r3
 800d0da:	f010 fdd7 	bl	801dc8c <HAL_PCD_DataInStageCallback>
 800d0de:	e059      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800d0e0:	2332      	movs	r3, #50	; 0x32
 800d0e2:	18fb      	adds	r3, r7, r3
 800d0e4:	881a      	ldrh	r2, [r3, #0]
 800d0e6:	2380      	movs	r3, #128	; 0x80
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	d14a      	bne.n	800d184 <PCD_EP_ISR_Handler+0x6c0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	4a22      	ldr	r2, [pc, #136]	; (800d180 <PCD_EP_ISR_Handler+0x6bc>)
 800d0f6:	4694      	mov	ip, r2
 800d0f8:	4463      	add	r3, ip
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	0c1b      	lsrs	r3, r3, #16
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	2126      	movs	r1, #38	; 0x26
 800d102:	187b      	adds	r3, r7, r1
 800d104:	0592      	lsls	r2, r2, #22
 800d106:	0d92      	lsrs	r2, r2, #22
 800d108:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800d10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10c:	699a      	ldr	r2, [r3, #24]
 800d10e:	187b      	adds	r3, r7, r1
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d907      	bls.n	800d126 <PCD_EP_ISR_Handler+0x662>
            {
              ep->xfer_len -= TxPctSize;
 800d116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d118:	699a      	ldr	r2, [r3, #24]
 800d11a:	187b      	adds	r3, r7, r1
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	1ad2      	subs	r2, r2, r3
 800d120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d122:	619a      	str	r2, [r3, #24]
 800d124:	e002      	b.n	800d12c <PCD_EP_ISR_Handler+0x668>
            }
            else
            {
              ep->xfer_len = 0U;
 800d126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d128:	2200      	movs	r2, #0
 800d12a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800d12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d107      	bne.n	800d144 <PCD_EP_ISR_Handler+0x680>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d136:	781a      	ldrb	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	0011      	movs	r1, r2
 800d13c:	0018      	movs	r0, r3
 800d13e:	f010 fda5 	bl	801dc8c <HAL_PCD_DataInStageCallback>
 800d142:	e027      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800d144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d146:	695a      	ldr	r2, [r3, #20]
 800d148:	2126      	movs	r1, #38	; 0x26
 800d14a:	187b      	adds	r3, r7, r1
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	18d2      	adds	r2, r2, r3
 800d150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d152:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800d154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d156:	69da      	ldr	r2, [r3, #28]
 800d158:	187b      	adds	r3, r7, r1
 800d15a:	881b      	ldrh	r3, [r3, #0]
 800d15c:	18d2      	adds	r2, r2, r3
 800d15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d160:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d168:	0011      	movs	r1, r2
 800d16a:	0018      	movs	r0, r3
 800d16c:	f004 fa12 	bl	8011594 <USB_EPStartXfer>
 800d170:	e010      	b.n	800d194 <PCD_EP_ISR_Handler+0x6d0>
 800d172:	46c0      	nop			; (mov r8, r8)
 800d174:	07ff8f8f 	.word	0x07ff8f8f
 800d178:	000080c0 	.word	0x000080c0
 800d17c:	07ff8f0f 	.word	0x07ff8f0f
 800d180:	40009800 	.word	0x40009800
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800d184:	2332      	movs	r3, #50	; 0x32
 800d186:	18fb      	adds	r3, r7, r3
 800d188:	881a      	ldrh	r2, [r3, #0]
 800d18a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	0018      	movs	r0, r3
 800d190:	f000 f8fa 	bl	800d388 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d19a:	2380      	movs	r3, #128	; 0x80
 800d19c:	021b      	lsls	r3, r3, #8
 800d19e:	4013      	ands	r3, r2
 800d1a0:	d000      	beq.n	800d1a4 <PCD_EP_ISR_Handler+0x6e0>
 800d1a2:	e494      	b.n	800cace <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	0018      	movs	r0, r3
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	b00e      	add	sp, #56	; 0x38
 800d1ac:	bdb0      	pop	{r4, r5, r7, pc}
 800d1ae:	46c0      	nop			; (mov r8, r8)

0800d1b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d1b0:	b5b0      	push	{r4, r5, r7, lr}
 800d1b2:	b08a      	sub	sp, #40	; 0x28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	1dbb      	adds	r3, r7, #6
 800d1bc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d1be:	1dbb      	adds	r3, r7, #6
 800d1c0:	881a      	ldrh	r2, [r3, #0]
 800d1c2:	2380      	movs	r3, #128	; 0x80
 800d1c4:	01db      	lsls	r3, r3, #7
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	d068      	beq.n	800d29c <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	251e      	movs	r5, #30
 800d1d6:	197c      	adds	r4, r7, r5
 800d1d8:	0019      	movs	r1, r3
 800d1da:	0010      	movs	r0, r2
 800d1dc:	f7fe ffbe 	bl	800c15c <PCD_GET_EP_DBUF0_CNT>
 800d1e0:	0003      	movs	r3, r0
 800d1e2:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	699a      	ldr	r2, [r3, #24]
 800d1e8:	197b      	adds	r3, r7, r5
 800d1ea:	881b      	ldrh	r3, [r3, #0]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d307      	bcc.n	800d200 <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	699a      	ldr	r2, [r3, #24]
 800d1f4:	197b      	adds	r3, r7, r5
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	1ad2      	subs	r2, r2, r3
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	619a      	str	r2, [r3, #24]
 800d1fe:	e002      	b.n	800d206 <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2200      	movs	r2, #0
 800d204:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	699b      	ldr	r3, [r3, #24]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d11a      	bne.n	800d244 <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	001a      	movs	r2, r3
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	18d3      	adds	r3, r2, r3
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a56      	ldr	r2, [pc, #344]	; (800d378 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800d220:	4013      	ands	r3, r2
 800d222:	61bb      	str	r3, [r7, #24]
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	2280      	movs	r2, #128	; 0x80
 800d228:	0192      	lsls	r2, r2, #6
 800d22a:	4053      	eors	r3, r2
 800d22c:	61bb      	str	r3, [r7, #24]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	001a      	movs	r2, r3
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	18d3      	adds	r3, r2, r3
 800d23c:	69ba      	ldr	r2, [r7, #24]
 800d23e:	494f      	ldr	r1, [pc, #316]	; (800d37c <HAL_PCD_EP_DB_Receive+0x1cc>)
 800d240:	430a      	orrs	r2, r1
 800d242:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d244:	1dbb      	adds	r3, r7, #6
 800d246:	881b      	ldrh	r3, [r3, #0]
 800d248:	2240      	movs	r2, #64	; 0x40
 800d24a:	4013      	ands	r3, r2
 800d24c:	d015      	beq.n	800d27a <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	001a      	movs	r2, r3
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	18d3      	adds	r3, r2, r3
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a48      	ldr	r2, [pc, #288]	; (800d380 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800d260:	4013      	ands	r3, r2
 800d262:	617b      	str	r3, [r7, #20]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	001a      	movs	r2, r3
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	18d3      	adds	r3, r2, r3
 800d272:	697a      	ldr	r2, [r7, #20]
 800d274:	4943      	ldr	r1, [pc, #268]	; (800d384 <HAL_PCD_EP_DB_Receive+0x1d4>)
 800d276:	430a      	orrs	r2, r1
 800d278:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800d27a:	241e      	movs	r4, #30
 800d27c:	193b      	adds	r3, r7, r4
 800d27e:	881b      	ldrh	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d100      	bne.n	800d286 <HAL_PCD_EP_DB_Receive+0xd6>
 800d284:	e071      	b.n	800d36a <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6818      	ldr	r0, [r3, #0]
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	6959      	ldr	r1, [r3, #20]
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	891a      	ldrh	r2, [r3, #8]
 800d292:	193b      	adds	r3, r7, r4
 800d294:	881b      	ldrh	r3, [r3, #0]
 800d296:	f005 fb0d 	bl	80128b4 <USB_ReadPMA>
 800d29a:	e066      	b.n	800d36a <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	251e      	movs	r5, #30
 800d2a8:	197c      	adds	r4, r7, r5
 800d2aa:	0019      	movs	r1, r3
 800d2ac:	0010      	movs	r0, r2
 800d2ae:	f7fe ff77 	bl	800c1a0 <PCD_GET_EP_DBUF1_CNT>
 800d2b2:	0003      	movs	r3, r0
 800d2b4:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	699a      	ldr	r2, [r3, #24]
 800d2ba:	197b      	adds	r3, r7, r5
 800d2bc:	881b      	ldrh	r3, [r3, #0]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d307      	bcc.n	800d2d2 <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	699a      	ldr	r2, [r3, #24]
 800d2c6:	197b      	adds	r3, r7, r5
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	1ad2      	subs	r2, r2, r3
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	619a      	str	r2, [r3, #24]
 800d2d0:	e002      	b.n	800d2d8 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	699b      	ldr	r3, [r3, #24]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d11a      	bne.n	800d316 <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	001a      	movs	r2, r3
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	18d3      	adds	r3, r2, r3
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a21      	ldr	r2, [pc, #132]	; (800d378 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f8:	2280      	movs	r2, #128	; 0x80
 800d2fa:	0192      	lsls	r2, r2, #6
 800d2fc:	4053      	eors	r3, r2
 800d2fe:	627b      	str	r3, [r7, #36]	; 0x24
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	001a      	movs	r2, r3
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	18d3      	adds	r3, r2, r3
 800d30e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d310:	491a      	ldr	r1, [pc, #104]	; (800d37c <HAL_PCD_EP_DB_Receive+0x1cc>)
 800d312:	430a      	orrs	r2, r1
 800d314:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800d316:	1dbb      	adds	r3, r7, #6
 800d318:	881b      	ldrh	r3, [r3, #0]
 800d31a:	2240      	movs	r2, #64	; 0x40
 800d31c:	4013      	ands	r3, r2
 800d31e:	d115      	bne.n	800d34c <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	001a      	movs	r2, r3
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	18d3      	adds	r3, r2, r3
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a13      	ldr	r2, [pc, #76]	; (800d380 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800d332:	4013      	ands	r3, r2
 800d334:	623b      	str	r3, [r7, #32]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	001a      	movs	r2, r3
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	18d3      	adds	r3, r2, r3
 800d344:	6a3a      	ldr	r2, [r7, #32]
 800d346:	490f      	ldr	r1, [pc, #60]	; (800d384 <HAL_PCD_EP_DB_Receive+0x1d4>)
 800d348:	430a      	orrs	r2, r1
 800d34a:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800d34c:	241e      	movs	r4, #30
 800d34e:	193b      	adds	r3, r7, r4
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d009      	beq.n	800d36a <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6818      	ldr	r0, [r3, #0]
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	6959      	ldr	r1, [r3, #20]
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	895a      	ldrh	r2, [r3, #10]
 800d362:	193b      	adds	r3, r7, r4
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	f005 faa5 	bl	80128b4 <USB_ReadPMA>
    }
  }

  return count;
 800d36a:	231e      	movs	r3, #30
 800d36c:	18fb      	adds	r3, r7, r3
 800d36e:	881b      	ldrh	r3, [r3, #0]
}
 800d370:	0018      	movs	r0, r3
 800d372:	46bd      	mov	sp, r7
 800d374:	b00a      	add	sp, #40	; 0x28
 800d376:	bdb0      	pop	{r4, r5, r7, pc}
 800d378:	07ffbf8f 	.word	0x07ffbf8f
 800d37c:	00008080 	.word	0x00008080
 800d380:	07ff8f8f 	.word	0x07ff8f8f
 800d384:	000080c0 	.word	0x000080c0

0800d388 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d388:	b5b0      	push	{r4, r5, r7, lr}
 800d38a:	b08e      	sub	sp, #56	; 0x38
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	1dbb      	adds	r3, r7, #6
 800d394:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d396:	1dbb      	adds	r3, r7, #6
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	2240      	movs	r2, #64	; 0x40
 800d39c:	4013      	ands	r3, r2
 800d39e:	d100      	bne.n	800d3a2 <HAL_PCD_EP_DB_Transmit+0x1a>
 800d3a0:	e1c4      	b.n	800d72c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	251e      	movs	r5, #30
 800d3ae:	197c      	adds	r4, r7, r5
 800d3b0:	0019      	movs	r1, r3
 800d3b2:	0010      	movs	r0, r2
 800d3b4:	f7fe fed2 	bl	800c15c <PCD_GET_EP_DBUF0_CNT>
 800d3b8:	0003      	movs	r3, r0
 800d3ba:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	699a      	ldr	r2, [r3, #24]
 800d3c0:	197b      	adds	r3, r7, r5
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d907      	bls.n	800d3d8 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	699a      	ldr	r2, [r3, #24]
 800d3cc:	197b      	adds	r3, r7, r5
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	1ad2      	subs	r2, r2, r3
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	619a      	str	r2, [r3, #24]
 800d3d6:	e002      	b.n	800d3de <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d000      	beq.n	800d3e8 <HAL_PCD_EP_DB_Transmit+0x60>
 800d3e6:	e0b2      	b.n	800d54e <HAL_PCD_EP_DB_Transmit+0x1c6>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	785b      	ldrb	r3, [r3, #1]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d121      	bne.n	800d434 <HAL_PCD_EP_DB_Transmit+0xac>
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	00db      	lsls	r3, r3, #3
 800d3f6:	4adb      	ldr	r2, [pc, #876]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d3f8:	4694      	mov	ip, r2
 800d3fa:	4463      	add	r3, ip
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	49d7      	ldr	r1, [pc, #860]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d406:	468c      	mov	ip, r1
 800d408:	4463      	add	r3, ip
 800d40a:	0192      	lsls	r2, r2, #6
 800d40c:	0992      	lsrs	r2, r2, #6
 800d40e:	601a      	str	r2, [r3, #0]
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	4ad3      	ldr	r2, [pc, #844]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d418:	4694      	mov	ip, r2
 800d41a:	4463      	add	r3, ip
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	49cf      	ldr	r1, [pc, #828]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d426:	468c      	mov	ip, r1
 800d428:	4463      	add	r3, ip
 800d42a:	2180      	movs	r1, #128	; 0x80
 800d42c:	0609      	lsls	r1, r1, #24
 800d42e:	430a      	orrs	r2, r1
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	e020      	b.n	800d476 <HAL_PCD_EP_DB_Transmit+0xee>
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	785b      	ldrb	r3, [r3, #1]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d11c      	bne.n	800d476 <HAL_PCD_EP_DB_Transmit+0xee>
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	4ac8      	ldr	r2, [pc, #800]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d444:	4694      	mov	ip, r2
 800d446:	4463      	add	r3, ip
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	00db      	lsls	r3, r3, #3
 800d450:	49c4      	ldr	r1, [pc, #784]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d452:	468c      	mov	ip, r1
 800d454:	4463      	add	r3, ip
 800d456:	0412      	lsls	r2, r2, #16
 800d458:	0c12      	lsrs	r2, r2, #16
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	00db      	lsls	r3, r3, #3
 800d462:	4ac0      	ldr	r2, [pc, #768]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d464:	189a      	adds	r2, r3, r2
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	00db      	lsls	r3, r3, #3
 800d46c:	49bd      	ldr	r1, [pc, #756]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d46e:	468c      	mov	ip, r1
 800d470:	4463      	add	r3, ip
 800d472:	6812      	ldr	r2, [r2, #0]
 800d474:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	785b      	ldrb	r3, [r3, #1]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d121      	bne.n	800d4c2 <HAL_PCD_EP_DB_Transmit+0x13a>
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	4ab7      	ldr	r2, [pc, #732]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d486:	4694      	mov	ip, r2
 800d488:	4463      	add	r3, ip
 800d48a:	685a      	ldr	r2, [r3, #4]
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	00db      	lsls	r3, r3, #3
 800d492:	49b4      	ldr	r1, [pc, #720]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d494:	468c      	mov	ip, r1
 800d496:	4463      	add	r3, ip
 800d498:	0192      	lsls	r2, r2, #6
 800d49a:	0992      	lsrs	r2, r2, #6
 800d49c:	605a      	str	r2, [r3, #4]
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	4aaf      	ldr	r2, [pc, #700]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d4a6:	4694      	mov	ip, r2
 800d4a8:	4463      	add	r3, ip
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	00db      	lsls	r3, r3, #3
 800d4b2:	49ac      	ldr	r1, [pc, #688]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d4b4:	468c      	mov	ip, r1
 800d4b6:	4463      	add	r3, ip
 800d4b8:	2180      	movs	r1, #128	; 0x80
 800d4ba:	0609      	lsls	r1, r1, #24
 800d4bc:	430a      	orrs	r2, r1
 800d4be:	605a      	str	r2, [r3, #4]
 800d4c0:	e020      	b.n	800d504 <HAL_PCD_EP_DB_Transmit+0x17c>
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	785b      	ldrb	r3, [r3, #1]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d11c      	bne.n	800d504 <HAL_PCD_EP_DB_Transmit+0x17c>
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	00db      	lsls	r3, r3, #3
 800d4d0:	4aa4      	ldr	r2, [pc, #656]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d4d2:	4694      	mov	ip, r2
 800d4d4:	4463      	add	r3, ip
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	00db      	lsls	r3, r3, #3
 800d4de:	49a1      	ldr	r1, [pc, #644]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d4e0:	468c      	mov	ip, r1
 800d4e2:	4463      	add	r3, ip
 800d4e4:	0412      	lsls	r2, r2, #16
 800d4e6:	0c12      	lsrs	r2, r2, #16
 800d4e8:	605a      	str	r2, [r3, #4]
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	4a9c      	ldr	r2, [pc, #624]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d4f2:	189a      	adds	r2, r3, r2
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	00db      	lsls	r3, r3, #3
 800d4fa:	499a      	ldr	r1, [pc, #616]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d4fc:	468c      	mov	ip, r1
 800d4fe:	4463      	add	r3, ip
 800d500:	6852      	ldr	r2, [r2, #4]
 800d502:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	781a      	ldrb	r2, [r3, #0]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	0011      	movs	r1, r2
 800d50c:	0018      	movs	r0, r3
 800d50e:	f010 fbbd 	bl	801dc8c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d512:	1dbb      	adds	r3, r7, #6
 800d514:	881a      	ldrh	r2, [r3, #0]
 800d516:	2380      	movs	r3, #128	; 0x80
 800d518:	01db      	lsls	r3, r3, #7
 800d51a:	4013      	ands	r3, r2
 800d51c:	d100      	bne.n	800d520 <HAL_PCD_EP_DB_Transmit+0x198>
 800d51e:	e2d6      	b.n	800dace <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	001a      	movs	r2, r3
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	18d3      	adds	r3, r2, r3
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a8d      	ldr	r2, [pc, #564]	; (800d768 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800d532:	4013      	ands	r3, r2
 800d534:	637b      	str	r3, [r7, #52]	; 0x34
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	001a      	movs	r2, r3
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	18d3      	adds	r3, r2, r3
 800d544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d546:	4989      	ldr	r1, [pc, #548]	; (800d76c <HAL_PCD_EP_DB_Transmit+0x3e4>)
 800d548:	430a      	orrs	r2, r1
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	e2bf      	b.n	800dace <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d54e:	1dbb      	adds	r3, r7, #6
 800d550:	881a      	ldrh	r2, [r3, #0]
 800d552:	2380      	movs	r3, #128	; 0x80
 800d554:	01db      	lsls	r3, r3, #7
 800d556:	4013      	ands	r3, r2
 800d558:	d015      	beq.n	800d586 <HAL_PCD_EP_DB_Transmit+0x1fe>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	001a      	movs	r2, r3
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	18d3      	adds	r3, r2, r3
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a7f      	ldr	r2, [pc, #508]	; (800d768 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800d56c:	4013      	ands	r3, r2
 800d56e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	001a      	movs	r2, r3
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	18d3      	adds	r3, r2, r3
 800d57e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d580:	497a      	ldr	r1, [pc, #488]	; (800d76c <HAL_PCD_EP_DB_Transmit+0x3e4>)
 800d582:	430a      	orrs	r2, r1
 800d584:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2224      	movs	r2, #36	; 0x24
 800d58a:	5c9b      	ldrb	r3, [r3, r2]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d000      	beq.n	800d592 <HAL_PCD_EP_DB_Transmit+0x20a>
 800d590:	e29d      	b.n	800dace <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	695a      	ldr	r2, [r3, #20]
 800d596:	211e      	movs	r1, #30
 800d598:	187b      	adds	r3, r7, r1
 800d59a:	881b      	ldrh	r3, [r3, #0]
 800d59c:	18d2      	adds	r2, r2, r3
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	69da      	ldr	r2, [r3, #28]
 800d5a6:	187b      	adds	r3, r7, r1
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	18d2      	adds	r2, r2, r3
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	6a1a      	ldr	r2, [r3, #32]
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d309      	bcc.n	800d5d0 <HAL_PCD_EP_DB_Transmit+0x248>
        {
          len = ep->maxpacket;
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	6a1a      	ldr	r2, [r3, #32]
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c8:	1ad2      	subs	r2, r2, r3
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	621a      	str	r2, [r3, #32]
 800d5ce:	e016      	b.n	800d5fe <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else if (ep->xfer_len_db == 0U)
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d108      	bne.n	800d5ea <HAL_PCD_EP_DB_Transmit+0x262>
        {
          len = TxPctSize;
 800d5d8:	231e      	movs	r3, #30
 800d5da:	18fb      	adds	r3, r7, r3
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	2224      	movs	r2, #36	; 0x24
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	5499      	strb	r1, [r3, r2]
 800d5e8:	e009      	b.n	800d5fe <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2224      	movs	r2, #36	; 0x24
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	785b      	ldrb	r3, [r3, #1]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d162      	bne.n	800d6cc <HAL_PCD_EP_DB_Transmit+0x344>
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	00db      	lsls	r3, r3, #3
 800d60c:	4a55      	ldr	r2, [pc, #340]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d60e:	4694      	mov	ip, r2
 800d610:	4463      	add	r3, ip
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	4952      	ldr	r1, [pc, #328]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d61c:	468c      	mov	ip, r1
 800d61e:	4463      	add	r3, ip
 800d620:	0192      	lsls	r2, r2, #6
 800d622:	0992      	lsrs	r2, r2, #6
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d628:	2b3e      	cmp	r3, #62	; 0x3e
 800d62a:	d91e      	bls.n	800d66a <HAL_PCD_EP_DB_Transmit+0x2e2>
 800d62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62e:	095b      	lsrs	r3, r3, #5
 800d630:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d634:	221f      	movs	r2, #31
 800d636:	4013      	ands	r3, r2
 800d638:	d102      	bne.n	800d640 <HAL_PCD_EP_DB_Transmit+0x2b8>
 800d63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63c:	3b01      	subs	r3, #1
 800d63e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	4a47      	ldr	r2, [pc, #284]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d648:	4694      	mov	ip, r2
 800d64a:	4463      	add	r3, ip
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d650:	069b      	lsls	r3, r3, #26
 800d652:	431a      	orrs	r2, r3
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	00db      	lsls	r3, r3, #3
 800d65a:	4942      	ldr	r1, [pc, #264]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d65c:	468c      	mov	ip, r1
 800d65e:	4463      	add	r3, ip
 800d660:	2180      	movs	r1, #128	; 0x80
 800d662:	0609      	lsls	r1, r1, #24
 800d664:	430a      	orrs	r2, r1
 800d666:	601a      	str	r2, [r3, #0]
 800d668:	e055      	b.n	800d716 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d111      	bne.n	800d694 <HAL_PCD_EP_DB_Transmit+0x30c>
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	00db      	lsls	r3, r3, #3
 800d676:	4a3b      	ldr	r2, [pc, #236]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d678:	4694      	mov	ip, r2
 800d67a:	4463      	add	r3, ip
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	00db      	lsls	r3, r3, #3
 800d684:	4937      	ldr	r1, [pc, #220]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d686:	468c      	mov	ip, r1
 800d688:	4463      	add	r3, ip
 800d68a:	2180      	movs	r1, #128	; 0x80
 800d68c:	0609      	lsls	r1, r1, #24
 800d68e:	430a      	orrs	r2, r1
 800d690:	601a      	str	r2, [r3, #0]
 800d692:	e040      	b.n	800d716 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d696:	085b      	lsrs	r3, r3, #1
 800d698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	2201      	movs	r2, #1
 800d69e:	4013      	ands	r3, r2
 800d6a0:	d002      	beq.n	800d6a8 <HAL_PCD_EP_DB_Transmit+0x320>
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	00db      	lsls	r3, r3, #3
 800d6ae:	4a2d      	ldr	r2, [pc, #180]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d6b0:	4694      	mov	ip, r2
 800d6b2:	4463      	add	r3, ip
 800d6b4:	6819      	ldr	r1, [r3, #0]
 800d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b8:	069a      	lsls	r2, r3, #26
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	4828      	ldr	r0, [pc, #160]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d6c2:	4684      	mov	ip, r0
 800d6c4:	4463      	add	r3, ip
 800d6c6:	430a      	orrs	r2, r1
 800d6c8:	601a      	str	r2, [r3, #0]
 800d6ca:	e024      	b.n	800d716 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	785b      	ldrb	r3, [r3, #1]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d120      	bne.n	800d716 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	00db      	lsls	r3, r3, #3
 800d6da:	4a22      	ldr	r2, [pc, #136]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d6dc:	4694      	mov	ip, r2
 800d6de:	4463      	add	r3, ip
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	00db      	lsls	r3, r3, #3
 800d6e8:	491e      	ldr	r1, [pc, #120]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d6ea:	468c      	mov	ip, r1
 800d6ec:	4463      	add	r3, ip
 800d6ee:	0412      	lsls	r2, r2, #16
 800d6f0:	0c12      	lsrs	r2, r2, #16
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	4a1a      	ldr	r2, [pc, #104]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d6fc:	4694      	mov	ip, r2
 800d6fe:	4463      	add	r3, ip
 800d700:	6819      	ldr	r1, [r3, #0]
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d704:	041a      	lsls	r2, r3, #16
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	00db      	lsls	r3, r3, #3
 800d70c:	4815      	ldr	r0, [pc, #84]	; (800d764 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d70e:	4684      	mov	ip, r0
 800d710:	4463      	add	r3, ip
 800d712:	430a      	orrs	r2, r1
 800d714:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6818      	ldr	r0, [r3, #0]
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6959      	ldr	r1, [r3, #20]
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	891a      	ldrh	r2, [r3, #8]
 800d722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d724:	b29b      	uxth	r3, r3
 800d726:	f005 f84f 	bl	80127c8 <USB_WritePMA>
 800d72a:	e1d0      	b.n	800dace <HAL_PCD_EP_DB_Transmit+0x746>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	b29b      	uxth	r3, r3
 800d736:	251e      	movs	r5, #30
 800d738:	197c      	adds	r4, r7, r5
 800d73a:	0019      	movs	r1, r3
 800d73c:	0010      	movs	r0, r2
 800d73e:	f7fe fd2f 	bl	800c1a0 <PCD_GET_EP_DBUF1_CNT>
 800d742:	0003      	movs	r3, r0
 800d744:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	699a      	ldr	r2, [r3, #24]
 800d74a:	197b      	adds	r3, r7, r5
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d30e      	bcc.n	800d770 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	699a      	ldr	r2, [r3, #24]
 800d756:	197b      	adds	r3, r7, r5
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	1ad2      	subs	r2, r2, r3
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	619a      	str	r2, [r3, #24]
 800d760:	e009      	b.n	800d776 <HAL_PCD_EP_DB_Transmit+0x3ee>
 800d762:	46c0      	nop			; (mov r8, r8)
 800d764:	40009800 	.word	0x40009800
 800d768:	07ff8f8f 	.word	0x07ff8f8f
 800d76c:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	2200      	movs	r2, #0
 800d774:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d000      	beq.n	800d780 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800d77e:	e0b2      	b.n	800d8e6 <HAL_PCD_EP_DB_Transmit+0x55e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	785b      	ldrb	r3, [r3, #1]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d121      	bne.n	800d7cc <HAL_PCD_EP_DB_Transmit+0x444>
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	4ab5      	ldr	r2, [pc, #724]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d790:	4694      	mov	ip, r2
 800d792:	4463      	add	r3, ip
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	49b1      	ldr	r1, [pc, #708]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d79e:	468c      	mov	ip, r1
 800d7a0:	4463      	add	r3, ip
 800d7a2:	0192      	lsls	r2, r2, #6
 800d7a4:	0992      	lsrs	r2, r2, #6
 800d7a6:	601a      	str	r2, [r3, #0]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	4aad      	ldr	r2, [pc, #692]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7b0:	4694      	mov	ip, r2
 800d7b2:	4463      	add	r3, ip
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	00db      	lsls	r3, r3, #3
 800d7bc:	49a9      	ldr	r1, [pc, #676]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7be:	468c      	mov	ip, r1
 800d7c0:	4463      	add	r3, ip
 800d7c2:	2180      	movs	r1, #128	; 0x80
 800d7c4:	0609      	lsls	r1, r1, #24
 800d7c6:	430a      	orrs	r2, r1
 800d7c8:	601a      	str	r2, [r3, #0]
 800d7ca:	e020      	b.n	800d80e <HAL_PCD_EP_DB_Transmit+0x486>
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	785b      	ldrb	r3, [r3, #1]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d11c      	bne.n	800d80e <HAL_PCD_EP_DB_Transmit+0x486>
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	00db      	lsls	r3, r3, #3
 800d7da:	4aa2      	ldr	r2, [pc, #648]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7dc:	4694      	mov	ip, r2
 800d7de:	4463      	add	r3, ip
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	499e      	ldr	r1, [pc, #632]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7ea:	468c      	mov	ip, r1
 800d7ec:	4463      	add	r3, ip
 800d7ee:	0412      	lsls	r2, r2, #16
 800d7f0:	0c12      	lsrs	r2, r2, #16
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	00db      	lsls	r3, r3, #3
 800d7fa:	4a9a      	ldr	r2, [pc, #616]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7fc:	189a      	adds	r2, r3, r2
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	4997      	ldr	r1, [pc, #604]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d806:	468c      	mov	ip, r1
 800d808:	4463      	add	r3, ip
 800d80a:	6812      	ldr	r2, [r2, #0]
 800d80c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	785b      	ldrb	r3, [r3, #1]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d121      	bne.n	800d85a <HAL_PCD_EP_DB_Transmit+0x4d2>
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	00db      	lsls	r3, r3, #3
 800d81c:	4a91      	ldr	r2, [pc, #580]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d81e:	4694      	mov	ip, r2
 800d820:	4463      	add	r3, ip
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	498e      	ldr	r1, [pc, #568]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d82c:	468c      	mov	ip, r1
 800d82e:	4463      	add	r3, ip
 800d830:	0192      	lsls	r2, r2, #6
 800d832:	0992      	lsrs	r2, r2, #6
 800d834:	605a      	str	r2, [r3, #4]
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	00db      	lsls	r3, r3, #3
 800d83c:	4a89      	ldr	r2, [pc, #548]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d83e:	4694      	mov	ip, r2
 800d840:	4463      	add	r3, ip
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	4986      	ldr	r1, [pc, #536]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d84c:	468c      	mov	ip, r1
 800d84e:	4463      	add	r3, ip
 800d850:	2180      	movs	r1, #128	; 0x80
 800d852:	0609      	lsls	r1, r1, #24
 800d854:	430a      	orrs	r2, r1
 800d856:	605a      	str	r2, [r3, #4]
 800d858:	e020      	b.n	800d89c <HAL_PCD_EP_DB_Transmit+0x514>
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	785b      	ldrb	r3, [r3, #1]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d11c      	bne.n	800d89c <HAL_PCD_EP_DB_Transmit+0x514>
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	4a7e      	ldr	r2, [pc, #504]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d86a:	4694      	mov	ip, r2
 800d86c:	4463      	add	r3, ip
 800d86e:	685a      	ldr	r2, [r3, #4]
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	00db      	lsls	r3, r3, #3
 800d876:	497b      	ldr	r1, [pc, #492]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d878:	468c      	mov	ip, r1
 800d87a:	4463      	add	r3, ip
 800d87c:	0412      	lsls	r2, r2, #16
 800d87e:	0c12      	lsrs	r2, r2, #16
 800d880:	605a      	str	r2, [r3, #4]
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	00db      	lsls	r3, r3, #3
 800d888:	4a76      	ldr	r2, [pc, #472]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d88a:	189a      	adds	r2, r3, r2
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	00db      	lsls	r3, r3, #3
 800d892:	4974      	ldr	r1, [pc, #464]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d894:	468c      	mov	ip, r1
 800d896:	4463      	add	r3, ip
 800d898:	6852      	ldr	r2, [r2, #4]
 800d89a:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	781a      	ldrb	r2, [r3, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	0011      	movs	r1, r2
 800d8a4:	0018      	movs	r0, r3
 800d8a6:	f010 f9f1 	bl	801dc8c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d8aa:	1dbb      	adds	r3, r7, #6
 800d8ac:	881a      	ldrh	r2, [r3, #0]
 800d8ae:	2380      	movs	r3, #128	; 0x80
 800d8b0:	01db      	lsls	r3, r3, #7
 800d8b2:	4013      	ands	r3, r2
 800d8b4:	d000      	beq.n	800d8b8 <HAL_PCD_EP_DB_Transmit+0x530>
 800d8b6:	e10a      	b.n	800dace <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	001a      	movs	r2, r3
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	18d3      	adds	r3, r2, r3
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a67      	ldr	r2, [pc, #412]	; (800da68 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	623b      	str	r3, [r7, #32]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	001a      	movs	r2, r3
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	18d3      	adds	r3, r2, r3
 800d8dc:	6a3a      	ldr	r2, [r7, #32]
 800d8de:	4963      	ldr	r1, [pc, #396]	; (800da6c <HAL_PCD_EP_DB_Transmit+0x6e4>)
 800d8e0:	430a      	orrs	r2, r1
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	e0f3      	b.n	800dace <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d8e6:	1dbb      	adds	r3, r7, #6
 800d8e8:	881a      	ldrh	r2, [r3, #0]
 800d8ea:	2380      	movs	r3, #128	; 0x80
 800d8ec:	01db      	lsls	r3, r3, #7
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	d115      	bne.n	800d91e <HAL_PCD_EP_DB_Transmit+0x596>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	001a      	movs	r2, r3
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	18d3      	adds	r3, r2, r3
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	4a59      	ldr	r2, [pc, #356]	; (800da68 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800d904:	4013      	ands	r3, r2
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	001a      	movs	r2, r3
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	18d3      	adds	r3, r2, r3
 800d916:	697a      	ldr	r2, [r7, #20]
 800d918:	4954      	ldr	r1, [pc, #336]	; (800da6c <HAL_PCD_EP_DB_Transmit+0x6e4>)
 800d91a:	430a      	orrs	r2, r1
 800d91c:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	2224      	movs	r2, #36	; 0x24
 800d922:	5c9b      	ldrb	r3, [r3, r2]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d000      	beq.n	800d92a <HAL_PCD_EP_DB_Transmit+0x5a2>
 800d928:	e0d1      	b.n	800dace <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	695a      	ldr	r2, [r3, #20]
 800d92e:	211e      	movs	r1, #30
 800d930:	187b      	adds	r3, r7, r1
 800d932:	881b      	ldrh	r3, [r3, #0]
 800d934:	18d2      	adds	r2, r2, r3
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	69da      	ldr	r2, [r3, #28]
 800d93e:	187b      	adds	r3, r7, r1
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	18d2      	adds	r2, r2, r3
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	6a1a      	ldr	r2, [r3, #32]
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	691b      	ldr	r3, [r3, #16]
 800d950:	429a      	cmp	r2, r3
 800d952:	d309      	bcc.n	800d968 <HAL_PCD_EP_DB_Transmit+0x5e0>
        {
          len = ep->maxpacket;
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	6a1a      	ldr	r2, [r3, #32]
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	1ad2      	subs	r2, r2, r3
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	621a      	str	r2, [r3, #32]
 800d966:	e016      	b.n	800d996 <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else if (ep->xfer_len_db == 0U)
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	6a1b      	ldr	r3, [r3, #32]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d108      	bne.n	800d982 <HAL_PCD_EP_DB_Transmit+0x5fa>
        {
          len = TxPctSize;
 800d970:	231e      	movs	r3, #30
 800d972:	18fb      	adds	r3, r7, r3
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	2224      	movs	r2, #36	; 0x24
 800d97c:	2100      	movs	r1, #0
 800d97e:	5499      	strb	r1, [r3, r2]
 800d980:	e009      	b.n	800d996 <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else
        {
          len = ep->xfer_len_db;
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	6a1b      	ldr	r3, [r3, #32]
 800d986:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2200      	movs	r2, #0
 800d98c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2224      	movs	r2, #36	; 0x24
 800d992:	2100      	movs	r1, #0
 800d994:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	785b      	ldrb	r3, [r3, #1]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d168      	bne.n	800da70 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	4a2f      	ldr	r2, [pc, #188]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d9a6:	4694      	mov	ip, r2
 800d9a8:	4463      	add	r3, ip
 800d9aa:	685a      	ldr	r2, [r3, #4]
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	492c      	ldr	r1, [pc, #176]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d9b4:	468c      	mov	ip, r1
 800d9b6:	4463      	add	r3, ip
 800d9b8:	0192      	lsls	r2, r2, #6
 800d9ba:	0992      	lsrs	r2, r2, #6
 800d9bc:	605a      	str	r2, [r3, #4]
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	2b3e      	cmp	r3, #62	; 0x3e
 800d9c2:	d91e      	bls.n	800da02 <HAL_PCD_EP_DB_Transmit+0x67a>
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	095b      	lsrs	r3, r3, #5
 800d9c8:	61bb      	str	r3, [r7, #24]
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	221f      	movs	r2, #31
 800d9ce:	4013      	ands	r3, r2
 800d9d0:	d102      	bne.n	800d9d8 <HAL_PCD_EP_DB_Transmit+0x650>
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	61bb      	str	r3, [r7, #24]
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	00db      	lsls	r3, r3, #3
 800d9de:	4a21      	ldr	r2, [pc, #132]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d9e0:	4694      	mov	ip, r2
 800d9e2:	4463      	add	r3, ip
 800d9e4:	685a      	ldr	r2, [r3, #4]
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	069b      	lsls	r3, r3, #26
 800d9ea:	431a      	orrs	r2, r3
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	00db      	lsls	r3, r3, #3
 800d9f2:	491c      	ldr	r1, [pc, #112]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d9f4:	468c      	mov	ip, r1
 800d9f6:	4463      	add	r3, ip
 800d9f8:	2180      	movs	r1, #128	; 0x80
 800d9fa:	0609      	lsls	r1, r1, #24
 800d9fc:	430a      	orrs	r2, r1
 800d9fe:	605a      	str	r2, [r3, #4]
 800da00:	e05b      	b.n	800daba <HAL_PCD_EP_DB_Transmit+0x732>
 800da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da04:	2b00      	cmp	r3, #0
 800da06:	d111      	bne.n	800da2c <HAL_PCD_EP_DB_Transmit+0x6a4>
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	4a15      	ldr	r2, [pc, #84]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800da10:	4694      	mov	ip, r2
 800da12:	4463      	add	r3, ip
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	00db      	lsls	r3, r3, #3
 800da1c:	4911      	ldr	r1, [pc, #68]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800da1e:	468c      	mov	ip, r1
 800da20:	4463      	add	r3, ip
 800da22:	2180      	movs	r1, #128	; 0x80
 800da24:	0609      	lsls	r1, r1, #24
 800da26:	430a      	orrs	r2, r1
 800da28:	605a      	str	r2, [r3, #4]
 800da2a:	e046      	b.n	800daba <HAL_PCD_EP_DB_Transmit+0x732>
 800da2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2e:	085b      	lsrs	r3, r3, #1
 800da30:	61bb      	str	r3, [r7, #24]
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	2201      	movs	r2, #1
 800da36:	4013      	ands	r3, r2
 800da38:	d002      	beq.n	800da40 <HAL_PCD_EP_DB_Transmit+0x6b8>
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	3301      	adds	r3, #1
 800da3e:	61bb      	str	r3, [r7, #24]
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	00db      	lsls	r3, r3, #3
 800da46:	4a07      	ldr	r2, [pc, #28]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800da48:	4694      	mov	ip, r2
 800da4a:	4463      	add	r3, ip
 800da4c:	6859      	ldr	r1, [r3, #4]
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	069a      	lsls	r2, r3, #26
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	00db      	lsls	r3, r3, #3
 800da58:	4802      	ldr	r0, [pc, #8]	; (800da64 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800da5a:	4684      	mov	ip, r0
 800da5c:	4463      	add	r3, ip
 800da5e:	430a      	orrs	r2, r1
 800da60:	605a      	str	r2, [r3, #4]
 800da62:	e02a      	b.n	800daba <HAL_PCD_EP_DB_Transmit+0x732>
 800da64:	40009800 	.word	0x40009800
 800da68:	07ff8f8f 	.word	0x07ff8f8f
 800da6c:	0000c080 	.word	0x0000c080
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	785b      	ldrb	r3, [r3, #1]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d120      	bne.n	800daba <HAL_PCD_EP_DB_Transmit+0x732>
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	00db      	lsls	r3, r3, #3
 800da7e:	4a25      	ldr	r2, [pc, #148]	; (800db14 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800da80:	4694      	mov	ip, r2
 800da82:	4463      	add	r3, ip
 800da84:	685a      	ldr	r2, [r3, #4]
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	00db      	lsls	r3, r3, #3
 800da8c:	4921      	ldr	r1, [pc, #132]	; (800db14 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800da8e:	468c      	mov	ip, r1
 800da90:	4463      	add	r3, ip
 800da92:	0412      	lsls	r2, r2, #16
 800da94:	0c12      	lsrs	r2, r2, #16
 800da96:	605a      	str	r2, [r3, #4]
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	00db      	lsls	r3, r3, #3
 800da9e:	4a1d      	ldr	r2, [pc, #116]	; (800db14 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800daa0:	4694      	mov	ip, r2
 800daa2:	4463      	add	r3, ip
 800daa4:	6859      	ldr	r1, [r3, #4]
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	041a      	lsls	r2, r3, #16
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	00db      	lsls	r3, r3, #3
 800dab0:	4818      	ldr	r0, [pc, #96]	; (800db14 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800dab2:	4684      	mov	ip, r0
 800dab4:	4463      	add	r3, ip
 800dab6:	430a      	orrs	r2, r1
 800dab8:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6818      	ldr	r0, [r3, #0]
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	6959      	ldr	r1, [r3, #20]
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	895a      	ldrh	r2, [r3, #10]
 800dac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac8:	b29b      	uxth	r3, r3
 800daca:	f004 fe7d 	bl	80127c8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	001a      	movs	r2, r3
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	18d3      	adds	r3, r2, r3
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a0e      	ldr	r2, [pc, #56]	; (800db18 <HAL_PCD_EP_DB_Transmit+0x790>)
 800dae0:	4013      	ands	r3, r2
 800dae2:	633b      	str	r3, [r7, #48]	; 0x30
 800dae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae6:	2210      	movs	r2, #16
 800dae8:	4053      	eors	r3, r2
 800daea:	633b      	str	r3, [r7, #48]	; 0x30
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	2220      	movs	r2, #32
 800daf0:	4053      	eors	r3, r2
 800daf2:	633b      	str	r3, [r7, #48]	; 0x30
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	001a      	movs	r2, r3
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	18d3      	adds	r3, r2, r3
 800db02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db04:	4905      	ldr	r1, [pc, #20]	; (800db1c <HAL_PCD_EP_DB_Transmit+0x794>)
 800db06:	430a      	orrs	r2, r1
 800db08:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	0018      	movs	r0, r3
 800db0e:	46bd      	mov	sp, r7
 800db10:	b00e      	add	sp, #56	; 0x38
 800db12:	bdb0      	pop	{r4, r5, r7, pc}
 800db14:	40009800 	.word	0x40009800
 800db18:	07ff8fbf 	.word	0x07ff8fbf
 800db1c:	00008080 	.word	0x00008080

0800db20 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800db20:	b590      	push	{r4, r7, lr}
 800db22:	b087      	sub	sp, #28
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	0008      	movs	r0, r1
 800db2a:	0011      	movs	r1, r2
 800db2c:	607b      	str	r3, [r7, #4]
 800db2e:	240a      	movs	r4, #10
 800db30:	193b      	adds	r3, r7, r4
 800db32:	1c02      	adds	r2, r0, #0
 800db34:	801a      	strh	r2, [r3, #0]
 800db36:	2308      	movs	r3, #8
 800db38:	18fb      	adds	r3, r7, r3
 800db3a:	1c0a      	adds	r2, r1, #0
 800db3c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800db3e:	0021      	movs	r1, r4
 800db40:	187b      	adds	r3, r7, r1
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	2280      	movs	r2, #128	; 0x80
 800db46:	4013      	ands	r3, r2
 800db48:	b29b      	uxth	r3, r3
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d00d      	beq.n	800db6a <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800db4e:	187b      	adds	r3, r7, r1
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	2207      	movs	r2, #7
 800db54:	401a      	ands	r2, r3
 800db56:	0013      	movs	r3, r2
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	189b      	adds	r3, r3, r2
 800db5c:	00db      	lsls	r3, r3, #3
 800db5e:	3310      	adds	r3, #16
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	18d3      	adds	r3, r2, r3
 800db64:	3304      	adds	r3, #4
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	e00c      	b.n	800db84 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800db6a:	230a      	movs	r3, #10
 800db6c:	18fb      	adds	r3, r7, r3
 800db6e:	881a      	ldrh	r2, [r3, #0]
 800db70:	0013      	movs	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	189b      	adds	r3, r3, r2
 800db76:	00db      	lsls	r3, r3, #3
 800db78:	3351      	adds	r3, #81	; 0x51
 800db7a:	33ff      	adds	r3, #255	; 0xff
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	18d3      	adds	r3, r2, r3
 800db80:	3304      	adds	r3, #4
 800db82:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800db84:	2308      	movs	r3, #8
 800db86:	18fb      	adds	r3, r7, r3
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d107      	bne.n	800db9e <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	2200      	movs	r2, #0
 800db92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	b29a      	uxth	r2, r3
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	80da      	strh	r2, [r3, #6]
 800db9c:	e00b      	b.n	800dbb6 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	2201      	movs	r2, #1
 800dba2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	0c1b      	lsrs	r3, r3, #16
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	0018      	movs	r0, r3
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	b007      	add	sp, #28
 800dbbe:	bd90      	pop	{r4, r7, pc}

0800dbc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	23b5      	movs	r3, #181	; 0xb5
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	2101      	movs	r1, #1
 800dbd6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	23b3      	movs	r3, #179	; 0xb3
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	2100      	movs	r1, #0
 800dbe0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	431a      	orrs	r2, r3
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbf2:	2202      	movs	r2, #2
 800dbf4:	431a      	orrs	r2, r3
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	0018      	movs	r0, r3
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	b004      	add	sp, #16
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800dc08:	4b04      	ldr	r3, [pc, #16]	; (800dc1c <HAL_PWREx_EnableVddUSB+0x18>)
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	4b03      	ldr	r3, [pc, #12]	; (800dc1c <HAL_PWREx_EnableVddUSB+0x18>)
 800dc0e:	2180      	movs	r1, #128	; 0x80
 800dc10:	00c9      	lsls	r1, r1, #3
 800dc12:	430a      	orrs	r2, r1
 800dc14:	605a      	str	r2, [r3, #4]
}
 800dc16:	46c0      	nop			; (mov r8, r8)
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	40007000 	.word	0x40007000

0800dc20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800dc28:	4b19      	ldr	r3, [pc, #100]	; (800dc90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a19      	ldr	r2, [pc, #100]	; (800dc94 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800dc2e:	4013      	ands	r3, r2
 800dc30:	0019      	movs	r1, r3
 800dc32:	4b17      	ldr	r3, [pc, #92]	; (800dc90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	430a      	orrs	r2, r1
 800dc38:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	2380      	movs	r3, #128	; 0x80
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d11f      	bne.n	800dc84 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800dc44:	4b14      	ldr	r3, [pc, #80]	; (800dc98 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	0013      	movs	r3, r2
 800dc4a:	005b      	lsls	r3, r3, #1
 800dc4c:	189b      	adds	r3, r3, r2
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	4912      	ldr	r1, [pc, #72]	; (800dc9c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800dc52:	0018      	movs	r0, r3
 800dc54:	f7f8 facc 	bl	80061f0 <__udivsi3>
 800dc58:	0003      	movs	r3, r0
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800dc5e:	e008      	b.n	800dc72 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d003      	beq.n	800dc6e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	e001      	b.n	800dc72 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800dc6e:	2303      	movs	r3, #3
 800dc70:	e009      	b.n	800dc86 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800dc72:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800dc74:	695a      	ldr	r2, [r3, #20]
 800dc76:	2380      	movs	r3, #128	; 0x80
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	401a      	ands	r2, r3
 800dc7c:	2380      	movs	r3, #128	; 0x80
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d0ed      	beq.n	800dc60 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	0018      	movs	r0, r3
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	b004      	add	sp, #16
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	46c0      	nop			; (mov r8, r8)
 800dc90:	40007000 	.word	0x40007000
 800dc94:	fffff9ff 	.word	0xfffff9ff
 800dc98:	20000058 	.word	0x20000058
 800dc9c:	000f4240 	.word	0x000f4240

0800dca0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800dca4:	4b03      	ldr	r3, [pc, #12]	; (800dcb4 <LL_RCC_GetAPB1Prescaler+0x14>)
 800dca6:	689a      	ldr	r2, [r3, #8]
 800dca8:	23e0      	movs	r3, #224	; 0xe0
 800dcaa:	01db      	lsls	r3, r3, #7
 800dcac:	4013      	ands	r3, r2
}
 800dcae:	0018      	movs	r0, r3
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	40021000 	.word	0x40021000

0800dcb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b088      	sub	sp, #32
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d102      	bne.n	800dccc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	f000 fb50 	bl	800e36c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	4013      	ands	r3, r2
 800dcd4:	d100      	bne.n	800dcd8 <HAL_RCC_OscConfig+0x20>
 800dcd6:	e07c      	b.n	800ddd2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dcd8:	4bc3      	ldr	r3, [pc, #780]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	2238      	movs	r2, #56	; 0x38
 800dcde:	4013      	ands	r3, r2
 800dce0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dce2:	4bc1      	ldr	r3, [pc, #772]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	2203      	movs	r2, #3
 800dce8:	4013      	ands	r3, r2
 800dcea:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	2b10      	cmp	r3, #16
 800dcf0:	d102      	bne.n	800dcf8 <HAL_RCC_OscConfig+0x40>
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	2b03      	cmp	r3, #3
 800dcf6:	d002      	beq.n	800dcfe <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	2b08      	cmp	r3, #8
 800dcfc:	d10b      	bne.n	800dd16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dcfe:	4bba      	ldr	r3, [pc, #744]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	2380      	movs	r3, #128	; 0x80
 800dd04:	029b      	lsls	r3, r3, #10
 800dd06:	4013      	ands	r3, r2
 800dd08:	d062      	beq.n	800ddd0 <HAL_RCC_OscConfig+0x118>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d15e      	bne.n	800ddd0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e32a      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	2380      	movs	r3, #128	; 0x80
 800dd1c:	025b      	lsls	r3, r3, #9
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d107      	bne.n	800dd32 <HAL_RCC_OscConfig+0x7a>
 800dd22:	4bb1      	ldr	r3, [pc, #708]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	4bb0      	ldr	r3, [pc, #704]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd28:	2180      	movs	r1, #128	; 0x80
 800dd2a:	0249      	lsls	r1, r1, #9
 800dd2c:	430a      	orrs	r2, r1
 800dd2e:	601a      	str	r2, [r3, #0]
 800dd30:	e020      	b.n	800dd74 <HAL_RCC_OscConfig+0xbc>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	23a0      	movs	r3, #160	; 0xa0
 800dd38:	02db      	lsls	r3, r3, #11
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d10e      	bne.n	800dd5c <HAL_RCC_OscConfig+0xa4>
 800dd3e:	4baa      	ldr	r3, [pc, #680]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	4ba9      	ldr	r3, [pc, #676]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd44:	2180      	movs	r1, #128	; 0x80
 800dd46:	02c9      	lsls	r1, r1, #11
 800dd48:	430a      	orrs	r2, r1
 800dd4a:	601a      	str	r2, [r3, #0]
 800dd4c:	4ba6      	ldr	r3, [pc, #664]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	4ba5      	ldr	r3, [pc, #660]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd52:	2180      	movs	r1, #128	; 0x80
 800dd54:	0249      	lsls	r1, r1, #9
 800dd56:	430a      	orrs	r2, r1
 800dd58:	601a      	str	r2, [r3, #0]
 800dd5a:	e00b      	b.n	800dd74 <HAL_RCC_OscConfig+0xbc>
 800dd5c:	4ba2      	ldr	r3, [pc, #648]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	4ba1      	ldr	r3, [pc, #644]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd62:	49a2      	ldr	r1, [pc, #648]	; (800dfec <HAL_RCC_OscConfig+0x334>)
 800dd64:	400a      	ands	r2, r1
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	4b9f      	ldr	r3, [pc, #636]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	4b9e      	ldr	r3, [pc, #632]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd6e:	49a0      	ldr	r1, [pc, #640]	; (800dff0 <HAL_RCC_OscConfig+0x338>)
 800dd70:	400a      	ands	r2, r1
 800dd72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d014      	beq.n	800dda6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd7c:	f7fb fb20 	bl	80093c0 <HAL_GetTick>
 800dd80:	0003      	movs	r3, r0
 800dd82:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dd84:	e008      	b.n	800dd98 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dd86:	f7fb fb1b 	bl	80093c0 <HAL_GetTick>
 800dd8a:	0002      	movs	r2, r0
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	1ad3      	subs	r3, r2, r3
 800dd90:	2b64      	cmp	r3, #100	; 0x64
 800dd92:	d901      	bls.n	800dd98 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800dd94:	2303      	movs	r3, #3
 800dd96:	e2e9      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dd98:	4b93      	ldr	r3, [pc, #588]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	2380      	movs	r3, #128	; 0x80
 800dd9e:	029b      	lsls	r3, r3, #10
 800dda0:	4013      	ands	r3, r2
 800dda2:	d0f0      	beq.n	800dd86 <HAL_RCC_OscConfig+0xce>
 800dda4:	e015      	b.n	800ddd2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dda6:	f7fb fb0b 	bl	80093c0 <HAL_GetTick>
 800ddaa:	0003      	movs	r3, r0
 800ddac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ddae:	e008      	b.n	800ddc2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ddb0:	f7fb fb06 	bl	80093c0 <HAL_GetTick>
 800ddb4:	0002      	movs	r2, r0
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	2b64      	cmp	r3, #100	; 0x64
 800ddbc:	d901      	bls.n	800ddc2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	e2d4      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ddc2:	4b89      	ldr	r3, [pc, #548]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	2380      	movs	r3, #128	; 0x80
 800ddc8:	029b      	lsls	r3, r3, #10
 800ddca:	4013      	ands	r3, r2
 800ddcc:	d1f0      	bne.n	800ddb0 <HAL_RCC_OscConfig+0xf8>
 800ddce:	e000      	b.n	800ddd2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ddd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2202      	movs	r2, #2
 800ddd8:	4013      	ands	r3, r2
 800ddda:	d100      	bne.n	800ddde <HAL_RCC_OscConfig+0x126>
 800dddc:	e099      	b.n	800df12 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ddde:	4b82      	ldr	r3, [pc, #520]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	2238      	movs	r2, #56	; 0x38
 800dde4:	4013      	ands	r3, r2
 800dde6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dde8:	4b7f      	ldr	r3, [pc, #508]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	2203      	movs	r2, #3
 800ddee:	4013      	ands	r3, r2
 800ddf0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	2b10      	cmp	r3, #16
 800ddf6:	d102      	bne.n	800ddfe <HAL_RCC_OscConfig+0x146>
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d002      	beq.n	800de04 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d135      	bne.n	800de70 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800de04:	4b78      	ldr	r3, [pc, #480]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	2380      	movs	r3, #128	; 0x80
 800de0a:	00db      	lsls	r3, r3, #3
 800de0c:	4013      	ands	r3, r2
 800de0e:	d005      	beq.n	800de1c <HAL_RCC_OscConfig+0x164>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d101      	bne.n	800de1c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800de18:	2301      	movs	r3, #1
 800de1a:	e2a7      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de1c:	4b72      	ldr	r3, [pc, #456]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	4a74      	ldr	r2, [pc, #464]	; (800dff4 <HAL_RCC_OscConfig+0x33c>)
 800de22:	4013      	ands	r3, r2
 800de24:	0019      	movs	r1, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	021a      	lsls	r2, r3, #8
 800de2c:	4b6e      	ldr	r3, [pc, #440]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de2e:	430a      	orrs	r2, r1
 800de30:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d112      	bne.n	800de5e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800de38:	4b6b      	ldr	r3, [pc, #428]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a6e      	ldr	r2, [pc, #440]	; (800dff8 <HAL_RCC_OscConfig+0x340>)
 800de3e:	4013      	ands	r3, r2
 800de40:	0019      	movs	r1, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	691a      	ldr	r2, [r3, #16]
 800de46:	4b68      	ldr	r3, [pc, #416]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de48:	430a      	orrs	r2, r1
 800de4a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800de4c:	4b66      	ldr	r3, [pc, #408]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	0adb      	lsrs	r3, r3, #11
 800de52:	2207      	movs	r2, #7
 800de54:	4013      	ands	r3, r2
 800de56:	4a69      	ldr	r2, [pc, #420]	; (800dffc <HAL_RCC_OscConfig+0x344>)
 800de58:	40da      	lsrs	r2, r3
 800de5a:	4b69      	ldr	r3, [pc, #420]	; (800e000 <HAL_RCC_OscConfig+0x348>)
 800de5c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800de5e:	4b69      	ldr	r3, [pc, #420]	; (800e004 <HAL_RCC_OscConfig+0x34c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	0018      	movs	r0, r3
 800de64:	f7fb f868 	bl	8008f38 <HAL_InitTick>
 800de68:	1e03      	subs	r3, r0, #0
 800de6a:	d051      	beq.n	800df10 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	e27d      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d030      	beq.n	800deda <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800de78:	4b5b      	ldr	r3, [pc, #364]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a5e      	ldr	r2, [pc, #376]	; (800dff8 <HAL_RCC_OscConfig+0x340>)
 800de7e:	4013      	ands	r3, r2
 800de80:	0019      	movs	r1, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	691a      	ldr	r2, [r3, #16]
 800de86:	4b58      	ldr	r3, [pc, #352]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de88:	430a      	orrs	r2, r1
 800de8a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800de8c:	4b56      	ldr	r3, [pc, #344]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	4b55      	ldr	r3, [pc, #340]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800de92:	2180      	movs	r1, #128	; 0x80
 800de94:	0049      	lsls	r1, r1, #1
 800de96:	430a      	orrs	r2, r1
 800de98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de9a:	f7fb fa91 	bl	80093c0 <HAL_GetTick>
 800de9e:	0003      	movs	r3, r0
 800dea0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dea2:	e008      	b.n	800deb6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dea4:	f7fb fa8c 	bl	80093c0 <HAL_GetTick>
 800dea8:	0002      	movs	r2, r0
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d901      	bls.n	800deb6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800deb2:	2303      	movs	r3, #3
 800deb4:	e25a      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800deb6:	4b4c      	ldr	r3, [pc, #304]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	2380      	movs	r3, #128	; 0x80
 800debc:	00db      	lsls	r3, r3, #3
 800debe:	4013      	ands	r3, r2
 800dec0:	d0f0      	beq.n	800dea4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dec2:	4b49      	ldr	r3, [pc, #292]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	4a4b      	ldr	r2, [pc, #300]	; (800dff4 <HAL_RCC_OscConfig+0x33c>)
 800dec8:	4013      	ands	r3, r2
 800deca:	0019      	movs	r1, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	695b      	ldr	r3, [r3, #20]
 800ded0:	021a      	lsls	r2, r3, #8
 800ded2:	4b45      	ldr	r3, [pc, #276]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800ded4:	430a      	orrs	r2, r1
 800ded6:	605a      	str	r2, [r3, #4]
 800ded8:	e01b      	b.n	800df12 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800deda:	4b43      	ldr	r3, [pc, #268]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	4b42      	ldr	r3, [pc, #264]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dee0:	4949      	ldr	r1, [pc, #292]	; (800e008 <HAL_RCC_OscConfig+0x350>)
 800dee2:	400a      	ands	r2, r1
 800dee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dee6:	f7fb fa6b 	bl	80093c0 <HAL_GetTick>
 800deea:	0003      	movs	r3, r0
 800deec:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800deee:	e008      	b.n	800df02 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800def0:	f7fb fa66 	bl	80093c0 <HAL_GetTick>
 800def4:	0002      	movs	r2, r0
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	2b02      	cmp	r3, #2
 800defc:	d901      	bls.n	800df02 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800defe:	2303      	movs	r3, #3
 800df00:	e234      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800df02:	4b39      	ldr	r3, [pc, #228]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	2380      	movs	r3, #128	; 0x80
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	4013      	ands	r3, r2
 800df0c:	d1f0      	bne.n	800def0 <HAL_RCC_OscConfig+0x238>
 800df0e:	e000      	b.n	800df12 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800df10:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2208      	movs	r2, #8
 800df18:	4013      	ands	r3, r2
 800df1a:	d047      	beq.n	800dfac <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800df1c:	4b32      	ldr	r3, [pc, #200]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	2238      	movs	r2, #56	; 0x38
 800df22:	4013      	ands	r3, r2
 800df24:	2b18      	cmp	r3, #24
 800df26:	d10a      	bne.n	800df3e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800df28:	4b2f      	ldr	r3, [pc, #188]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800df2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df2c:	2202      	movs	r2, #2
 800df2e:	4013      	ands	r3, r2
 800df30:	d03c      	beq.n	800dfac <HAL_RCC_OscConfig+0x2f4>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	699b      	ldr	r3, [r3, #24]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d138      	bne.n	800dfac <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e216      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	699b      	ldr	r3, [r3, #24]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d019      	beq.n	800df7a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800df46:	4b28      	ldr	r3, [pc, #160]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800df48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800df4a:	4b27      	ldr	r3, [pc, #156]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800df4c:	2101      	movs	r1, #1
 800df4e:	430a      	orrs	r2, r1
 800df50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df52:	f7fb fa35 	bl	80093c0 <HAL_GetTick>
 800df56:	0003      	movs	r3, r0
 800df58:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800df5a:	e008      	b.n	800df6e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df5c:	f7fb fa30 	bl	80093c0 <HAL_GetTick>
 800df60:	0002      	movs	r2, r0
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	2b02      	cmp	r3, #2
 800df68:	d901      	bls.n	800df6e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800df6a:	2303      	movs	r3, #3
 800df6c:	e1fe      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800df6e:	4b1e      	ldr	r3, [pc, #120]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800df70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df72:	2202      	movs	r2, #2
 800df74:	4013      	ands	r3, r2
 800df76:	d0f1      	beq.n	800df5c <HAL_RCC_OscConfig+0x2a4>
 800df78:	e018      	b.n	800dfac <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800df7a:	4b1b      	ldr	r3, [pc, #108]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800df7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800df7e:	4b1a      	ldr	r3, [pc, #104]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800df80:	2101      	movs	r1, #1
 800df82:	438a      	bics	r2, r1
 800df84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df86:	f7fb fa1b 	bl	80093c0 <HAL_GetTick>
 800df8a:	0003      	movs	r3, r0
 800df8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800df8e:	e008      	b.n	800dfa2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df90:	f7fb fa16 	bl	80093c0 <HAL_GetTick>
 800df94:	0002      	movs	r2, r0
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	2b02      	cmp	r3, #2
 800df9c:	d901      	bls.n	800dfa2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	e1e4      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800dfa2:	4b11      	ldr	r3, [pc, #68]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dfa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfa6:	2202      	movs	r2, #2
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	d1f1      	bne.n	800df90 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2204      	movs	r2, #4
 800dfb2:	4013      	ands	r3, r2
 800dfb4:	d100      	bne.n	800dfb8 <HAL_RCC_OscConfig+0x300>
 800dfb6:	e0c7      	b.n	800e148 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dfb8:	231f      	movs	r3, #31
 800dfba:	18fb      	adds	r3, r7, r3
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800dfc0:	4b09      	ldr	r3, [pc, #36]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	2238      	movs	r2, #56	; 0x38
 800dfc6:	4013      	ands	r3, r2
 800dfc8:	2b20      	cmp	r3, #32
 800dfca:	d11f      	bne.n	800e00c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800dfcc:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <HAL_RCC_OscConfig+0x330>)
 800dfce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	4013      	ands	r3, r2
 800dfd4:	d100      	bne.n	800dfd8 <HAL_RCC_OscConfig+0x320>
 800dfd6:	e0b7      	b.n	800e148 <HAL_RCC_OscConfig+0x490>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d000      	beq.n	800dfe2 <HAL_RCC_OscConfig+0x32a>
 800dfe0:	e0b2      	b.n	800e148 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e1c2      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
 800dfe6:	46c0      	nop			; (mov r8, r8)
 800dfe8:	40021000 	.word	0x40021000
 800dfec:	fffeffff 	.word	0xfffeffff
 800dff0:	fffbffff 	.word	0xfffbffff
 800dff4:	ffff80ff 	.word	0xffff80ff
 800dff8:	ffffc7ff 	.word	0xffffc7ff
 800dffc:	00f42400 	.word	0x00f42400
 800e000:	20000058 	.word	0x20000058
 800e004:	2000005c 	.word	0x2000005c
 800e008:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e00c:	4bb5      	ldr	r3, [pc, #724]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e00e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e010:	2380      	movs	r3, #128	; 0x80
 800e012:	055b      	lsls	r3, r3, #21
 800e014:	4013      	ands	r3, r2
 800e016:	d101      	bne.n	800e01c <HAL_RCC_OscConfig+0x364>
 800e018:	2301      	movs	r3, #1
 800e01a:	e000      	b.n	800e01e <HAL_RCC_OscConfig+0x366>
 800e01c:	2300      	movs	r3, #0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d011      	beq.n	800e046 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800e022:	4bb0      	ldr	r3, [pc, #704]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e026:	4baf      	ldr	r3, [pc, #700]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e028:	2180      	movs	r1, #128	; 0x80
 800e02a:	0549      	lsls	r1, r1, #21
 800e02c:	430a      	orrs	r2, r1
 800e02e:	63da      	str	r2, [r3, #60]	; 0x3c
 800e030:	4bac      	ldr	r3, [pc, #688]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e034:	2380      	movs	r3, #128	; 0x80
 800e036:	055b      	lsls	r3, r3, #21
 800e038:	4013      	ands	r3, r2
 800e03a:	60fb      	str	r3, [r7, #12]
 800e03c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800e03e:	231f      	movs	r3, #31
 800e040:	18fb      	adds	r3, r7, r3
 800e042:	2201      	movs	r2, #1
 800e044:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e046:	4ba8      	ldr	r3, [pc, #672]	; (800e2e8 <HAL_RCC_OscConfig+0x630>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	2380      	movs	r3, #128	; 0x80
 800e04c:	005b      	lsls	r3, r3, #1
 800e04e:	4013      	ands	r3, r2
 800e050:	d11a      	bne.n	800e088 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e052:	4ba5      	ldr	r3, [pc, #660]	; (800e2e8 <HAL_RCC_OscConfig+0x630>)
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	4ba4      	ldr	r3, [pc, #656]	; (800e2e8 <HAL_RCC_OscConfig+0x630>)
 800e058:	2180      	movs	r1, #128	; 0x80
 800e05a:	0049      	lsls	r1, r1, #1
 800e05c:	430a      	orrs	r2, r1
 800e05e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800e060:	f7fb f9ae 	bl	80093c0 <HAL_GetTick>
 800e064:	0003      	movs	r3, r0
 800e066:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e068:	e008      	b.n	800e07c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e06a:	f7fb f9a9 	bl	80093c0 <HAL_GetTick>
 800e06e:	0002      	movs	r2, r0
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	1ad3      	subs	r3, r2, r3
 800e074:	2b02      	cmp	r3, #2
 800e076:	d901      	bls.n	800e07c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800e078:	2303      	movs	r3, #3
 800e07a:	e177      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e07c:	4b9a      	ldr	r3, [pc, #616]	; (800e2e8 <HAL_RCC_OscConfig+0x630>)
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	2380      	movs	r3, #128	; 0x80
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	4013      	ands	r3, r2
 800e086:	d0f0      	beq.n	800e06a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d106      	bne.n	800e09e <HAL_RCC_OscConfig+0x3e6>
 800e090:	4b94      	ldr	r3, [pc, #592]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e092:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e094:	4b93      	ldr	r3, [pc, #588]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e096:	2101      	movs	r1, #1
 800e098:	430a      	orrs	r2, r1
 800e09a:	65da      	str	r2, [r3, #92]	; 0x5c
 800e09c:	e01c      	b.n	800e0d8 <HAL_RCC_OscConfig+0x420>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	2b05      	cmp	r3, #5
 800e0a4:	d10c      	bne.n	800e0c0 <HAL_RCC_OscConfig+0x408>
 800e0a6:	4b8f      	ldr	r3, [pc, #572]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e0a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e0aa:	4b8e      	ldr	r3, [pc, #568]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e0ac:	2104      	movs	r1, #4
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	65da      	str	r2, [r3, #92]	; 0x5c
 800e0b2:	4b8c      	ldr	r3, [pc, #560]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e0b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e0b6:	4b8b      	ldr	r3, [pc, #556]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	430a      	orrs	r2, r1
 800e0bc:	65da      	str	r2, [r3, #92]	; 0x5c
 800e0be:	e00b      	b.n	800e0d8 <HAL_RCC_OscConfig+0x420>
 800e0c0:	4b88      	ldr	r3, [pc, #544]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e0c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e0c4:	4b87      	ldr	r3, [pc, #540]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	438a      	bics	r2, r1
 800e0ca:	65da      	str	r2, [r3, #92]	; 0x5c
 800e0cc:	4b85      	ldr	r3, [pc, #532]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e0ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e0d0:	4b84      	ldr	r3, [pc, #528]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e0d2:	2104      	movs	r1, #4
 800e0d4:	438a      	bics	r2, r1
 800e0d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d014      	beq.n	800e10a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0e0:	f7fb f96e 	bl	80093c0 <HAL_GetTick>
 800e0e4:	0003      	movs	r3, r0
 800e0e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e0e8:	e009      	b.n	800e0fe <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0ea:	f7fb f969 	bl	80093c0 <HAL_GetTick>
 800e0ee:	0002      	movs	r2, r0
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	4a7d      	ldr	r2, [pc, #500]	; (800e2ec <HAL_RCC_OscConfig+0x634>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d901      	bls.n	800e0fe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	e136      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e0fe:	4b79      	ldr	r3, [pc, #484]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e102:	2202      	movs	r2, #2
 800e104:	4013      	ands	r3, r2
 800e106:	d0f0      	beq.n	800e0ea <HAL_RCC_OscConfig+0x432>
 800e108:	e013      	b.n	800e132 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e10a:	f7fb f959 	bl	80093c0 <HAL_GetTick>
 800e10e:	0003      	movs	r3, r0
 800e110:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e112:	e009      	b.n	800e128 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e114:	f7fb f954 	bl	80093c0 <HAL_GetTick>
 800e118:	0002      	movs	r2, r0
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	4a73      	ldr	r2, [pc, #460]	; (800e2ec <HAL_RCC_OscConfig+0x634>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d901      	bls.n	800e128 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800e124:	2303      	movs	r3, #3
 800e126:	e121      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e128:	4b6e      	ldr	r3, [pc, #440]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e12a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e12c:	2202      	movs	r2, #2
 800e12e:	4013      	ands	r3, r2
 800e130:	d1f0      	bne.n	800e114 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800e132:	231f      	movs	r3, #31
 800e134:	18fb      	adds	r3, r7, r3
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d105      	bne.n	800e148 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800e13c:	4b69      	ldr	r3, [pc, #420]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e13e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e140:	4b68      	ldr	r3, [pc, #416]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e142:	496b      	ldr	r1, [pc, #428]	; (800e2f0 <HAL_RCC_OscConfig+0x638>)
 800e144:	400a      	ands	r2, r1
 800e146:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2220      	movs	r2, #32
 800e14e:	4013      	ands	r3, r2
 800e150:	d039      	beq.n	800e1c6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d01b      	beq.n	800e192 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e15a:	4b62      	ldr	r3, [pc, #392]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	4b61      	ldr	r3, [pc, #388]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e160:	2180      	movs	r1, #128	; 0x80
 800e162:	03c9      	lsls	r1, r1, #15
 800e164:	430a      	orrs	r2, r1
 800e166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e168:	f7fb f92a 	bl	80093c0 <HAL_GetTick>
 800e16c:	0003      	movs	r3, r0
 800e16e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800e170:	e008      	b.n	800e184 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e172:	f7fb f925 	bl	80093c0 <HAL_GetTick>
 800e176:	0002      	movs	r2, r0
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	2b02      	cmp	r3, #2
 800e17e:	d901      	bls.n	800e184 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800e180:	2303      	movs	r3, #3
 800e182:	e0f3      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800e184:	4b57      	ldr	r3, [pc, #348]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	2380      	movs	r3, #128	; 0x80
 800e18a:	041b      	lsls	r3, r3, #16
 800e18c:	4013      	ands	r3, r2
 800e18e:	d0f0      	beq.n	800e172 <HAL_RCC_OscConfig+0x4ba>
 800e190:	e019      	b.n	800e1c6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e192:	4b54      	ldr	r3, [pc, #336]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	4b53      	ldr	r3, [pc, #332]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e198:	4956      	ldr	r1, [pc, #344]	; (800e2f4 <HAL_RCC_OscConfig+0x63c>)
 800e19a:	400a      	ands	r2, r1
 800e19c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e19e:	f7fb f90f 	bl	80093c0 <HAL_GetTick>
 800e1a2:	0003      	movs	r3, r0
 800e1a4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800e1a6:	e008      	b.n	800e1ba <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e1a8:	f7fb f90a 	bl	80093c0 <HAL_GetTick>
 800e1ac:	0002      	movs	r2, r0
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	1ad3      	subs	r3, r2, r3
 800e1b2:	2b02      	cmp	r3, #2
 800e1b4:	d901      	bls.n	800e1ba <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800e1b6:	2303      	movs	r3, #3
 800e1b8:	e0d8      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800e1ba:	4b4a      	ldr	r3, [pc, #296]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	2380      	movs	r3, #128	; 0x80
 800e1c0:	041b      	lsls	r3, r3, #16
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	d1f0      	bne.n	800e1a8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6a1b      	ldr	r3, [r3, #32]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d100      	bne.n	800e1d0 <HAL_RCC_OscConfig+0x518>
 800e1ce:	e0cc      	b.n	800e36a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e1d0:	4b44      	ldr	r3, [pc, #272]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	2238      	movs	r2, #56	; 0x38
 800e1d6:	4013      	ands	r3, r2
 800e1d8:	2b10      	cmp	r3, #16
 800e1da:	d100      	bne.n	800e1de <HAL_RCC_OscConfig+0x526>
 800e1dc:	e07b      	b.n	800e2d6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a1b      	ldr	r3, [r3, #32]
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	d156      	bne.n	800e294 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e1e6:	4b3f      	ldr	r3, [pc, #252]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	4b3e      	ldr	r3, [pc, #248]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e1ec:	4942      	ldr	r1, [pc, #264]	; (800e2f8 <HAL_RCC_OscConfig+0x640>)
 800e1ee:	400a      	ands	r2, r1
 800e1f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1f2:	f7fb f8e5 	bl	80093c0 <HAL_GetTick>
 800e1f6:	0003      	movs	r3, r0
 800e1f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e1fa:	e008      	b.n	800e20e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e1fc:	f7fb f8e0 	bl	80093c0 <HAL_GetTick>
 800e200:	0002      	movs	r2, r0
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	2b02      	cmp	r3, #2
 800e208:	d901      	bls.n	800e20e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800e20a:	2303      	movs	r3, #3
 800e20c:	e0ae      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e20e:	4b35      	ldr	r3, [pc, #212]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	2380      	movs	r3, #128	; 0x80
 800e214:	049b      	lsls	r3, r3, #18
 800e216:	4013      	ands	r3, r2
 800e218:	d1f0      	bne.n	800e1fc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e21a:	4b32      	ldr	r3, [pc, #200]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	4a37      	ldr	r2, [pc, #220]	; (800e2fc <HAL_RCC_OscConfig+0x644>)
 800e220:	4013      	ands	r3, r2
 800e222:	0019      	movs	r1, r3
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e22c:	431a      	orrs	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e232:	021b      	lsls	r3, r3, #8
 800e234:	431a      	orrs	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23a:	431a      	orrs	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e240:	431a      	orrs	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e246:	431a      	orrs	r2, r3
 800e248:	4b26      	ldr	r3, [pc, #152]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e24a:	430a      	orrs	r2, r1
 800e24c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e24e:	4b25      	ldr	r3, [pc, #148]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	4b24      	ldr	r3, [pc, #144]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e254:	2180      	movs	r1, #128	; 0x80
 800e256:	0449      	lsls	r1, r1, #17
 800e258:	430a      	orrs	r2, r1
 800e25a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800e25c:	4b21      	ldr	r3, [pc, #132]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e25e:	68da      	ldr	r2, [r3, #12]
 800e260:	4b20      	ldr	r3, [pc, #128]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e262:	2180      	movs	r1, #128	; 0x80
 800e264:	0549      	lsls	r1, r1, #21
 800e266:	430a      	orrs	r2, r1
 800e268:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e26a:	f7fb f8a9 	bl	80093c0 <HAL_GetTick>
 800e26e:	0003      	movs	r3, r0
 800e270:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e272:	e008      	b.n	800e286 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e274:	f7fb f8a4 	bl	80093c0 <HAL_GetTick>
 800e278:	0002      	movs	r2, r0
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	1ad3      	subs	r3, r2, r3
 800e27e:	2b02      	cmp	r3, #2
 800e280:	d901      	bls.n	800e286 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800e282:	2303      	movs	r3, #3
 800e284:	e072      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e286:	4b17      	ldr	r3, [pc, #92]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	2380      	movs	r3, #128	; 0x80
 800e28c:	049b      	lsls	r3, r3, #18
 800e28e:	4013      	ands	r3, r2
 800e290:	d0f0      	beq.n	800e274 <HAL_RCC_OscConfig+0x5bc>
 800e292:	e06a      	b.n	800e36a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e294:	4b13      	ldr	r3, [pc, #76]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	4b12      	ldr	r3, [pc, #72]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e29a:	4917      	ldr	r1, [pc, #92]	; (800e2f8 <HAL_RCC_OscConfig+0x640>)
 800e29c:	400a      	ands	r2, r1
 800e29e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2a0:	f7fb f88e 	bl	80093c0 <HAL_GetTick>
 800e2a4:	0003      	movs	r3, r0
 800e2a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e2a8:	e008      	b.n	800e2bc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2aa:	f7fb f889 	bl	80093c0 <HAL_GetTick>
 800e2ae:	0002      	movs	r2, r0
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	d901      	bls.n	800e2bc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800e2b8:	2303      	movs	r3, #3
 800e2ba:	e057      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e2bc:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	2380      	movs	r3, #128	; 0x80
 800e2c2:	049b      	lsls	r3, r3, #18
 800e2c4:	4013      	ands	r3, r2
 800e2c6:	d1f0      	bne.n	800e2aa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800e2c8:	4b06      	ldr	r3, [pc, #24]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e2ca:	68da      	ldr	r2, [r3, #12]
 800e2cc:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <HAL_RCC_OscConfig+0x62c>)
 800e2ce:	490c      	ldr	r1, [pc, #48]	; (800e300 <HAL_RCC_OscConfig+0x648>)
 800e2d0:	400a      	ands	r2, r1
 800e2d2:	60da      	str	r2, [r3, #12]
 800e2d4:	e049      	b.n	800e36a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d112      	bne.n	800e304 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e044      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
 800e2e2:	46c0      	nop			; (mov r8, r8)
 800e2e4:	40021000 	.word	0x40021000
 800e2e8:	40007000 	.word	0x40007000
 800e2ec:	00001388 	.word	0x00001388
 800e2f0:	efffffff 	.word	0xefffffff
 800e2f4:	ffbfffff 	.word	0xffbfffff
 800e2f8:	feffffff 	.word	0xfeffffff
 800e2fc:	11c1808c 	.word	0x11c1808c
 800e300:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800e304:	4b1b      	ldr	r3, [pc, #108]	; (800e374 <HAL_RCC_OscConfig+0x6bc>)
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2203      	movs	r2, #3
 800e30e:	401a      	ands	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e314:	429a      	cmp	r2, r3
 800e316:	d126      	bne.n	800e366 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	2270      	movs	r2, #112	; 0x70
 800e31c:	401a      	ands	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e322:	429a      	cmp	r2, r3
 800e324:	d11f      	bne.n	800e366 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	23fe      	movs	r3, #254	; 0xfe
 800e32a:	01db      	lsls	r3, r3, #7
 800e32c:	401a      	ands	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e332:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e334:	429a      	cmp	r2, r3
 800e336:	d116      	bne.n	800e366 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e338:	697a      	ldr	r2, [r7, #20]
 800e33a:	23f8      	movs	r3, #248	; 0xf8
 800e33c:	039b      	lsls	r3, r3, #14
 800e33e:	401a      	ands	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e344:	429a      	cmp	r2, r3
 800e346:	d10e      	bne.n	800e366 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e348:	697a      	ldr	r2, [r7, #20]
 800e34a:	23e0      	movs	r3, #224	; 0xe0
 800e34c:	051b      	lsls	r3, r3, #20
 800e34e:	401a      	ands	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e354:	429a      	cmp	r2, r3
 800e356:	d106      	bne.n	800e366 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	0f5b      	lsrs	r3, r3, #29
 800e35c:	075a      	lsls	r2, r3, #29
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e362:	429a      	cmp	r2, r3
 800e364:	d001      	beq.n	800e36a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	e000      	b.n	800e36c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	0018      	movs	r0, r3
 800e36e:	46bd      	mov	sp, r7
 800e370:	b008      	add	sp, #32
 800e372:	bd80      	pop	{r7, pc}
 800e374:	40021000 	.word	0x40021000

0800e378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	e0e9      	b.n	800e560 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e38c:	4b76      	ldr	r3, [pc, #472]	; (800e568 <HAL_RCC_ClockConfig+0x1f0>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2207      	movs	r2, #7
 800e392:	4013      	ands	r3, r2
 800e394:	683a      	ldr	r2, [r7, #0]
 800e396:	429a      	cmp	r2, r3
 800e398:	d91e      	bls.n	800e3d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e39a:	4b73      	ldr	r3, [pc, #460]	; (800e568 <HAL_RCC_ClockConfig+0x1f0>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2207      	movs	r2, #7
 800e3a0:	4393      	bics	r3, r2
 800e3a2:	0019      	movs	r1, r3
 800e3a4:	4b70      	ldr	r3, [pc, #448]	; (800e568 <HAL_RCC_ClockConfig+0x1f0>)
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	430a      	orrs	r2, r1
 800e3aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e3ac:	f7fb f808 	bl	80093c0 <HAL_GetTick>
 800e3b0:	0003      	movs	r3, r0
 800e3b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e3b4:	e009      	b.n	800e3ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e3b6:	f7fb f803 	bl	80093c0 <HAL_GetTick>
 800e3ba:	0002      	movs	r2, r0
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	4a6a      	ldr	r2, [pc, #424]	; (800e56c <HAL_RCC_ClockConfig+0x1f4>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d901      	bls.n	800e3ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	e0ca      	b.n	800e560 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e3ca:	4b67      	ldr	r3, [pc, #412]	; (800e568 <HAL_RCC_ClockConfig+0x1f0>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2207      	movs	r2, #7
 800e3d0:	4013      	ands	r3, r2
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d1ee      	bne.n	800e3b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2202      	movs	r2, #2
 800e3de:	4013      	ands	r3, r2
 800e3e0:	d015      	beq.n	800e40e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2204      	movs	r2, #4
 800e3e8:	4013      	ands	r3, r2
 800e3ea:	d006      	beq.n	800e3fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800e3ec:	4b60      	ldr	r3, [pc, #384]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e3ee:	689a      	ldr	r2, [r3, #8]
 800e3f0:	4b5f      	ldr	r3, [pc, #380]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e3f2:	21e0      	movs	r1, #224	; 0xe0
 800e3f4:	01c9      	lsls	r1, r1, #7
 800e3f6:	430a      	orrs	r2, r1
 800e3f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e3fa:	4b5d      	ldr	r3, [pc, #372]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	4a5d      	ldr	r2, [pc, #372]	; (800e574 <HAL_RCC_ClockConfig+0x1fc>)
 800e400:	4013      	ands	r3, r2
 800e402:	0019      	movs	r1, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	689a      	ldr	r2, [r3, #8]
 800e408:	4b59      	ldr	r3, [pc, #356]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e40a:	430a      	orrs	r2, r1
 800e40c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2201      	movs	r2, #1
 800e414:	4013      	ands	r3, r2
 800e416:	d057      	beq.n	800e4c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d107      	bne.n	800e430 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e420:	4b53      	ldr	r3, [pc, #332]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	2380      	movs	r3, #128	; 0x80
 800e426:	029b      	lsls	r3, r3, #10
 800e428:	4013      	ands	r3, r2
 800e42a:	d12b      	bne.n	800e484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e42c:	2301      	movs	r3, #1
 800e42e:	e097      	b.n	800e560 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	2b02      	cmp	r3, #2
 800e436:	d107      	bne.n	800e448 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e438:	4b4d      	ldr	r3, [pc, #308]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	2380      	movs	r3, #128	; 0x80
 800e43e:	049b      	lsls	r3, r3, #18
 800e440:	4013      	ands	r3, r2
 800e442:	d11f      	bne.n	800e484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	e08b      	b.n	800e560 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d107      	bne.n	800e460 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e450:	4b47      	ldr	r3, [pc, #284]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	2380      	movs	r3, #128	; 0x80
 800e456:	00db      	lsls	r3, r3, #3
 800e458:	4013      	ands	r3, r2
 800e45a:	d113      	bne.n	800e484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	e07f      	b.n	800e560 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	2b03      	cmp	r3, #3
 800e466:	d106      	bne.n	800e476 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e468:	4b41      	ldr	r3, [pc, #260]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e46a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e46c:	2202      	movs	r2, #2
 800e46e:	4013      	ands	r3, r2
 800e470:	d108      	bne.n	800e484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e472:	2301      	movs	r3, #1
 800e474:	e074      	b.n	800e560 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e476:	4b3e      	ldr	r3, [pc, #248]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e47a:	2202      	movs	r2, #2
 800e47c:	4013      	ands	r3, r2
 800e47e:	d101      	bne.n	800e484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	e06d      	b.n	800e560 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e484:	4b3a      	ldr	r3, [pc, #232]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	2207      	movs	r2, #7
 800e48a:	4393      	bics	r3, r2
 800e48c:	0019      	movs	r1, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	685a      	ldr	r2, [r3, #4]
 800e492:	4b37      	ldr	r3, [pc, #220]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e494:	430a      	orrs	r2, r1
 800e496:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e498:	f7fa ff92 	bl	80093c0 <HAL_GetTick>
 800e49c:	0003      	movs	r3, r0
 800e49e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e4a0:	e009      	b.n	800e4b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e4a2:	f7fa ff8d 	bl	80093c0 <HAL_GetTick>
 800e4a6:	0002      	movs	r2, r0
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	4a2f      	ldr	r2, [pc, #188]	; (800e56c <HAL_RCC_ClockConfig+0x1f4>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d901      	bls.n	800e4b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800e4b2:	2303      	movs	r3, #3
 800e4b4:	e054      	b.n	800e560 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e4b6:	4b2e      	ldr	r3, [pc, #184]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	2238      	movs	r2, #56	; 0x38
 800e4bc:	401a      	ands	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	00db      	lsls	r3, r3, #3
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d1ec      	bne.n	800e4a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e4c8:	4b27      	ldr	r3, [pc, #156]	; (800e568 <HAL_RCC_ClockConfig+0x1f0>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2207      	movs	r2, #7
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	683a      	ldr	r2, [r7, #0]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d21e      	bcs.n	800e514 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e4d6:	4b24      	ldr	r3, [pc, #144]	; (800e568 <HAL_RCC_ClockConfig+0x1f0>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2207      	movs	r2, #7
 800e4dc:	4393      	bics	r3, r2
 800e4de:	0019      	movs	r1, r3
 800e4e0:	4b21      	ldr	r3, [pc, #132]	; (800e568 <HAL_RCC_ClockConfig+0x1f0>)
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	430a      	orrs	r2, r1
 800e4e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e4e8:	f7fa ff6a 	bl	80093c0 <HAL_GetTick>
 800e4ec:	0003      	movs	r3, r0
 800e4ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e4f0:	e009      	b.n	800e506 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e4f2:	f7fa ff65 	bl	80093c0 <HAL_GetTick>
 800e4f6:	0002      	movs	r2, r0
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	1ad3      	subs	r3, r2, r3
 800e4fc:	4a1b      	ldr	r2, [pc, #108]	; (800e56c <HAL_RCC_ClockConfig+0x1f4>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d901      	bls.n	800e506 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800e502:	2303      	movs	r3, #3
 800e504:	e02c      	b.n	800e560 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e506:	4b18      	ldr	r3, [pc, #96]	; (800e568 <HAL_RCC_ClockConfig+0x1f0>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2207      	movs	r2, #7
 800e50c:	4013      	ands	r3, r2
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	429a      	cmp	r2, r3
 800e512:	d1ee      	bne.n	800e4f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2204      	movs	r2, #4
 800e51a:	4013      	ands	r3, r2
 800e51c:	d009      	beq.n	800e532 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800e51e:	4b14      	ldr	r3, [pc, #80]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	4a15      	ldr	r2, [pc, #84]	; (800e578 <HAL_RCC_ClockConfig+0x200>)
 800e524:	4013      	ands	r3, r2
 800e526:	0019      	movs	r1, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	68da      	ldr	r2, [r3, #12]
 800e52c:	4b10      	ldr	r3, [pc, #64]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e52e:	430a      	orrs	r2, r1
 800e530:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800e532:	f000 f829 	bl	800e588 <HAL_RCC_GetSysClockFreq>
 800e536:	0001      	movs	r1, r0
 800e538:	4b0d      	ldr	r3, [pc, #52]	; (800e570 <HAL_RCC_ClockConfig+0x1f8>)
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	0a1b      	lsrs	r3, r3, #8
 800e53e:	220f      	movs	r2, #15
 800e540:	401a      	ands	r2, r3
 800e542:	4b0e      	ldr	r3, [pc, #56]	; (800e57c <HAL_RCC_ClockConfig+0x204>)
 800e544:	0092      	lsls	r2, r2, #2
 800e546:	58d3      	ldr	r3, [r2, r3]
 800e548:	221f      	movs	r2, #31
 800e54a:	4013      	ands	r3, r2
 800e54c:	000a      	movs	r2, r1
 800e54e:	40da      	lsrs	r2, r3
 800e550:	4b0b      	ldr	r3, [pc, #44]	; (800e580 <HAL_RCC_ClockConfig+0x208>)
 800e552:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e554:	4b0b      	ldr	r3, [pc, #44]	; (800e584 <HAL_RCC_ClockConfig+0x20c>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	0018      	movs	r0, r3
 800e55a:	f7fa fced 	bl	8008f38 <HAL_InitTick>
 800e55e:	0003      	movs	r3, r0
}
 800e560:	0018      	movs	r0, r3
 800e562:	46bd      	mov	sp, r7
 800e564:	b004      	add	sp, #16
 800e566:	bd80      	pop	{r7, pc}
 800e568:	40022000 	.word	0x40022000
 800e56c:	00001388 	.word	0x00001388
 800e570:	40021000 	.word	0x40021000
 800e574:	fffff0ff 	.word	0xfffff0ff
 800e578:	ffff8fff 	.word	0xffff8fff
 800e57c:	08024fc4 	.word	0x08024fc4
 800e580:	20000058 	.word	0x20000058
 800e584:	2000005c 	.word	0x2000005c

0800e588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e58e:	4b3c      	ldr	r3, [pc, #240]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	2238      	movs	r2, #56	; 0x38
 800e594:	4013      	ands	r3, r2
 800e596:	d10f      	bne.n	800e5b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800e598:	4b39      	ldr	r3, [pc, #228]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	0adb      	lsrs	r3, r3, #11
 800e59e:	2207      	movs	r2, #7
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	409a      	lsls	r2, r3
 800e5a6:	0013      	movs	r3, r2
 800e5a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800e5aa:	6839      	ldr	r1, [r7, #0]
 800e5ac:	4835      	ldr	r0, [pc, #212]	; (800e684 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e5ae:	f7f7 fe1f 	bl	80061f0 <__udivsi3>
 800e5b2:	0003      	movs	r3, r0
 800e5b4:	613b      	str	r3, [r7, #16]
 800e5b6:	e05d      	b.n	800e674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e5b8:	4b31      	ldr	r3, [pc, #196]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	2238      	movs	r2, #56	; 0x38
 800e5be:	4013      	ands	r3, r2
 800e5c0:	2b08      	cmp	r3, #8
 800e5c2:	d102      	bne.n	800e5ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e5c4:	4b2f      	ldr	r3, [pc, #188]	; (800e684 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e5c6:	613b      	str	r3, [r7, #16]
 800e5c8:	e054      	b.n	800e674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e5ca:	4b2d      	ldr	r3, [pc, #180]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	2238      	movs	r2, #56	; 0x38
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	2b10      	cmp	r3, #16
 800e5d4:	d138      	bne.n	800e648 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800e5d6:	4b2a      	ldr	r3, [pc, #168]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	2203      	movs	r2, #3
 800e5dc:	4013      	ands	r3, r2
 800e5de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e5e0:	4b27      	ldr	r3, [pc, #156]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	091b      	lsrs	r3, r3, #4
 800e5e6:	2207      	movs	r2, #7
 800e5e8:	4013      	ands	r3, r2
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	d10d      	bne.n	800e610 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e5f4:	68b9      	ldr	r1, [r7, #8]
 800e5f6:	4823      	ldr	r0, [pc, #140]	; (800e684 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e5f8:	f7f7 fdfa 	bl	80061f0 <__udivsi3>
 800e5fc:	0003      	movs	r3, r0
 800e5fe:	0019      	movs	r1, r3
 800e600:	4b1f      	ldr	r3, [pc, #124]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	0a1b      	lsrs	r3, r3, #8
 800e606:	227f      	movs	r2, #127	; 0x7f
 800e608:	4013      	ands	r3, r2
 800e60a:	434b      	muls	r3, r1
 800e60c:	617b      	str	r3, [r7, #20]
        break;
 800e60e:	e00d      	b.n	800e62c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800e610:	68b9      	ldr	r1, [r7, #8]
 800e612:	481c      	ldr	r0, [pc, #112]	; (800e684 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e614:	f7f7 fdec 	bl	80061f0 <__udivsi3>
 800e618:	0003      	movs	r3, r0
 800e61a:	0019      	movs	r1, r3
 800e61c:	4b18      	ldr	r3, [pc, #96]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	0a1b      	lsrs	r3, r3, #8
 800e622:	227f      	movs	r2, #127	; 0x7f
 800e624:	4013      	ands	r3, r2
 800e626:	434b      	muls	r3, r1
 800e628:	617b      	str	r3, [r7, #20]
        break;
 800e62a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800e62c:	4b14      	ldr	r3, [pc, #80]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	0f5b      	lsrs	r3, r3, #29
 800e632:	2207      	movs	r2, #7
 800e634:	4013      	ands	r3, r2
 800e636:	3301      	adds	r3, #1
 800e638:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800e63a:	6879      	ldr	r1, [r7, #4]
 800e63c:	6978      	ldr	r0, [r7, #20]
 800e63e:	f7f7 fdd7 	bl	80061f0 <__udivsi3>
 800e642:	0003      	movs	r3, r0
 800e644:	613b      	str	r3, [r7, #16]
 800e646:	e015      	b.n	800e674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800e648:	4b0d      	ldr	r3, [pc, #52]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	2238      	movs	r2, #56	; 0x38
 800e64e:	4013      	ands	r3, r2
 800e650:	2b20      	cmp	r3, #32
 800e652:	d103      	bne.n	800e65c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800e654:	2380      	movs	r3, #128	; 0x80
 800e656:	021b      	lsls	r3, r3, #8
 800e658:	613b      	str	r3, [r7, #16]
 800e65a:	e00b      	b.n	800e674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800e65c:	4b08      	ldr	r3, [pc, #32]	; (800e680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	2238      	movs	r2, #56	; 0x38
 800e662:	4013      	ands	r3, r2
 800e664:	2b18      	cmp	r3, #24
 800e666:	d103      	bne.n	800e670 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800e668:	23fa      	movs	r3, #250	; 0xfa
 800e66a:	01db      	lsls	r3, r3, #7
 800e66c:	613b      	str	r3, [r7, #16]
 800e66e:	e001      	b.n	800e674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800e670:	2300      	movs	r3, #0
 800e672:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e674:	693b      	ldr	r3, [r7, #16]
}
 800e676:	0018      	movs	r0, r3
 800e678:	46bd      	mov	sp, r7
 800e67a:	b006      	add	sp, #24
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	46c0      	nop			; (mov r8, r8)
 800e680:	40021000 	.word	0x40021000
 800e684:	00f42400 	.word	0x00f42400

0800e688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e68c:	4b02      	ldr	r3, [pc, #8]	; (800e698 <HAL_RCC_GetHCLKFreq+0x10>)
 800e68e:	681b      	ldr	r3, [r3, #0]
}
 800e690:	0018      	movs	r0, r3
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	46c0      	nop			; (mov r8, r8)
 800e698:	20000058 	.word	0x20000058

0800e69c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e69c:	b5b0      	push	{r4, r5, r7, lr}
 800e69e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800e6a0:	f7ff fff2 	bl	800e688 <HAL_RCC_GetHCLKFreq>
 800e6a4:	0004      	movs	r4, r0
 800e6a6:	f7ff fafb 	bl	800dca0 <LL_RCC_GetAPB1Prescaler>
 800e6aa:	0003      	movs	r3, r0
 800e6ac:	0b1a      	lsrs	r2, r3, #12
 800e6ae:	4b05      	ldr	r3, [pc, #20]	; (800e6c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e6b0:	0092      	lsls	r2, r2, #2
 800e6b2:	58d3      	ldr	r3, [r2, r3]
 800e6b4:	221f      	movs	r2, #31
 800e6b6:	4013      	ands	r3, r2
 800e6b8:	40dc      	lsrs	r4, r3
 800e6ba:	0023      	movs	r3, r4
}
 800e6bc:	0018      	movs	r0, r3
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e6c2:	46c0      	nop			; (mov r8, r8)
 800e6c4:	08025004 	.word	0x08025004

0800e6c8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2207      	movs	r2, #7
 800e6d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e6d8:	4b0e      	ldr	r3, [pc, #56]	; (800e714 <HAL_RCC_GetClockConfig+0x4c>)
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	2207      	movs	r2, #7
 800e6de:	401a      	ands	r2, r3
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e6e4:	4b0b      	ldr	r3, [pc, #44]	; (800e714 <HAL_RCC_GetClockConfig+0x4c>)
 800e6e6:	689a      	ldr	r2, [r3, #8]
 800e6e8:	23f0      	movs	r3, #240	; 0xf0
 800e6ea:	011b      	lsls	r3, r3, #4
 800e6ec:	401a      	ands	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800e6f2:	4b08      	ldr	r3, [pc, #32]	; (800e714 <HAL_RCC_GetClockConfig+0x4c>)
 800e6f4:	689a      	ldr	r2, [r3, #8]
 800e6f6:	23e0      	movs	r3, #224	; 0xe0
 800e6f8:	01db      	lsls	r3, r3, #7
 800e6fa:	401a      	ands	r2, r3
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e700:	4b05      	ldr	r3, [pc, #20]	; (800e718 <HAL_RCC_GetClockConfig+0x50>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2207      	movs	r2, #7
 800e706:	401a      	ands	r2, r3
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	601a      	str	r2, [r3, #0]
}
 800e70c:	46c0      	nop			; (mov r8, r8)
 800e70e:	46bd      	mov	sp, r7
 800e710:	b002      	add	sp, #8
 800e712:	bd80      	pop	{r7, pc}
 800e714:	40021000 	.word	0x40021000
 800e718:	40022000 	.word	0x40022000

0800e71c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b086      	sub	sp, #24
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800e724:	2313      	movs	r3, #19
 800e726:	18fb      	adds	r3, r7, r3
 800e728:	2200      	movs	r2, #0
 800e72a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e72c:	2312      	movs	r3, #18
 800e72e:	18fb      	adds	r3, r7, r3
 800e730:	2200      	movs	r2, #0
 800e732:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	2380      	movs	r3, #128	; 0x80
 800e73a:	029b      	lsls	r3, r3, #10
 800e73c:	4013      	ands	r3, r2
 800e73e:	d100      	bne.n	800e742 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800e740:	e0ad      	b.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e742:	2011      	movs	r0, #17
 800e744:	183b      	adds	r3, r7, r0
 800e746:	2200      	movs	r2, #0
 800e748:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e74a:	4b47      	ldr	r3, [pc, #284]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e74c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e74e:	2380      	movs	r3, #128	; 0x80
 800e750:	055b      	lsls	r3, r3, #21
 800e752:	4013      	ands	r3, r2
 800e754:	d110      	bne.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e756:	4b44      	ldr	r3, [pc, #272]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e75a:	4b43      	ldr	r3, [pc, #268]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e75c:	2180      	movs	r1, #128	; 0x80
 800e75e:	0549      	lsls	r1, r1, #21
 800e760:	430a      	orrs	r2, r1
 800e762:	63da      	str	r2, [r3, #60]	; 0x3c
 800e764:	4b40      	ldr	r3, [pc, #256]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e768:	2380      	movs	r3, #128	; 0x80
 800e76a:	055b      	lsls	r3, r3, #21
 800e76c:	4013      	ands	r3, r2
 800e76e:	60bb      	str	r3, [r7, #8]
 800e770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e772:	183b      	adds	r3, r7, r0
 800e774:	2201      	movs	r2, #1
 800e776:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e778:	4b3c      	ldr	r3, [pc, #240]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	4b3b      	ldr	r3, [pc, #236]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800e77e:	2180      	movs	r1, #128	; 0x80
 800e780:	0049      	lsls	r1, r1, #1
 800e782:	430a      	orrs	r2, r1
 800e784:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e786:	f7fa fe1b 	bl	80093c0 <HAL_GetTick>
 800e78a:	0003      	movs	r3, r0
 800e78c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e78e:	e00b      	b.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e790:	f7fa fe16 	bl	80093c0 <HAL_GetTick>
 800e794:	0002      	movs	r2, r0
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	2b02      	cmp	r3, #2
 800e79c:	d904      	bls.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800e79e:	2313      	movs	r3, #19
 800e7a0:	18fb      	adds	r3, r7, r3
 800e7a2:	2203      	movs	r2, #3
 800e7a4:	701a      	strb	r2, [r3, #0]
        break;
 800e7a6:	e005      	b.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e7a8:	4b30      	ldr	r3, [pc, #192]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	2380      	movs	r3, #128	; 0x80
 800e7ae:	005b      	lsls	r3, r3, #1
 800e7b0:	4013      	ands	r3, r2
 800e7b2:	d0ed      	beq.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800e7b4:	2313      	movs	r3, #19
 800e7b6:	18fb      	adds	r3, r7, r3
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d15e      	bne.n	800e87c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e7be:	4b2a      	ldr	r3, [pc, #168]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e7c2:	23c0      	movs	r3, #192	; 0xc0
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	4013      	ands	r3, r2
 800e7c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d019      	beq.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d014      	beq.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e7da:	4b23      	ldr	r3, [pc, #140]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7de:	4a24      	ldr	r2, [pc, #144]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e7e4:	4b20      	ldr	r3, [pc, #128]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e7e8:	4b1f      	ldr	r3, [pc, #124]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7ea:	2180      	movs	r1, #128	; 0x80
 800e7ec:	0249      	lsls	r1, r1, #9
 800e7ee:	430a      	orrs	r2, r1
 800e7f0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e7f2:	4b1d      	ldr	r3, [pc, #116]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e7f6:	4b1c      	ldr	r3, [pc, #112]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7f8:	491e      	ldr	r1, [pc, #120]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800e7fa:	400a      	ands	r2, r1
 800e7fc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e7fe:	4b1a      	ldr	r3, [pc, #104]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e800:	697a      	ldr	r2, [r7, #20]
 800e802:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	2201      	movs	r2, #1
 800e808:	4013      	ands	r3, r2
 800e80a:	d016      	beq.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e80c:	f7fa fdd8 	bl	80093c0 <HAL_GetTick>
 800e810:	0003      	movs	r3, r0
 800e812:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e814:	e00c      	b.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e816:	f7fa fdd3 	bl	80093c0 <HAL_GetTick>
 800e81a:	0002      	movs	r2, r0
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	4a15      	ldr	r2, [pc, #84]	; (800e878 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d904      	bls.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800e826:	2313      	movs	r3, #19
 800e828:	18fb      	adds	r3, r7, r3
 800e82a:	2203      	movs	r2, #3
 800e82c:	701a      	strb	r2, [r3, #0]
            break;
 800e82e:	e004      	b.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e830:	4b0d      	ldr	r3, [pc, #52]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e834:	2202      	movs	r2, #2
 800e836:	4013      	ands	r3, r2
 800e838:	d0ed      	beq.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800e83a:	2313      	movs	r3, #19
 800e83c:	18fb      	adds	r3, r7, r3
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d10a      	bne.n	800e85a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e844:	4b08      	ldr	r3, [pc, #32]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e848:	4a09      	ldr	r2, [pc, #36]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800e84a:	4013      	ands	r3, r2
 800e84c:	0019      	movs	r1, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e852:	4b05      	ldr	r3, [pc, #20]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e854:	430a      	orrs	r2, r1
 800e856:	65da      	str	r2, [r3, #92]	; 0x5c
 800e858:	e016      	b.n	800e888 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e85a:	2312      	movs	r3, #18
 800e85c:	18fb      	adds	r3, r7, r3
 800e85e:	2213      	movs	r2, #19
 800e860:	18ba      	adds	r2, r7, r2
 800e862:	7812      	ldrb	r2, [r2, #0]
 800e864:	701a      	strb	r2, [r3, #0]
 800e866:	e00f      	b.n	800e888 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800e868:	40021000 	.word	0x40021000
 800e86c:	40007000 	.word	0x40007000
 800e870:	fffffcff 	.word	0xfffffcff
 800e874:	fffeffff 	.word	0xfffeffff
 800e878:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e87c:	2312      	movs	r3, #18
 800e87e:	18fb      	adds	r3, r7, r3
 800e880:	2213      	movs	r2, #19
 800e882:	18ba      	adds	r2, r7, r2
 800e884:	7812      	ldrb	r2, [r2, #0]
 800e886:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e888:	2311      	movs	r3, #17
 800e88a:	18fb      	adds	r3, r7, r3
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d105      	bne.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e892:	4bb6      	ldr	r3, [pc, #728]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e896:	4bb5      	ldr	r3, [pc, #724]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e898:	49b5      	ldr	r1, [pc, #724]	; (800eb70 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800e89a:	400a      	ands	r2, r1
 800e89c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	4013      	ands	r3, r2
 800e8a6:	d009      	beq.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e8a8:	4bb0      	ldr	r3, [pc, #704]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ac:	2203      	movs	r2, #3
 800e8ae:	4393      	bics	r3, r2
 800e8b0:	0019      	movs	r1, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	685a      	ldr	r2, [r3, #4]
 800e8b6:	4bad      	ldr	r3, [pc, #692]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8b8:	430a      	orrs	r2, r1
 800e8ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2202      	movs	r2, #2
 800e8c2:	4013      	ands	r3, r2
 800e8c4:	d009      	beq.n	800e8da <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e8c6:	4ba9      	ldr	r3, [pc, #676]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ca:	220c      	movs	r2, #12
 800e8cc:	4393      	bics	r3, r2
 800e8ce:	0019      	movs	r1, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	689a      	ldr	r2, [r3, #8]
 800e8d4:	4ba5      	ldr	r3, [pc, #660]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8d6:	430a      	orrs	r2, r1
 800e8d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2204      	movs	r2, #4
 800e8e0:	4013      	ands	r3, r2
 800e8e2:	d009      	beq.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e8e4:	4ba1      	ldr	r3, [pc, #644]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8e8:	2230      	movs	r2, #48	; 0x30
 800e8ea:	4393      	bics	r3, r2
 800e8ec:	0019      	movs	r1, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	68da      	ldr	r2, [r3, #12]
 800e8f2:	4b9e      	ldr	r3, [pc, #632]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8f4:	430a      	orrs	r2, r1
 800e8f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2210      	movs	r2, #16
 800e8fe:	4013      	ands	r3, r2
 800e900:	d009      	beq.n	800e916 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e902:	4b9a      	ldr	r3, [pc, #616]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e906:	4a9b      	ldr	r2, [pc, #620]	; (800eb74 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e908:	4013      	ands	r3, r2
 800e90a:	0019      	movs	r1, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	691a      	ldr	r2, [r3, #16]
 800e910:	4b96      	ldr	r3, [pc, #600]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e912:	430a      	orrs	r2, r1
 800e914:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	2380      	movs	r3, #128	; 0x80
 800e91c:	015b      	lsls	r3, r3, #5
 800e91e:	4013      	ands	r3, r2
 800e920:	d009      	beq.n	800e936 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800e922:	4b92      	ldr	r3, [pc, #584]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e926:	4a94      	ldr	r2, [pc, #592]	; (800eb78 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e928:	4013      	ands	r3, r2
 800e92a:	0019      	movs	r1, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	695a      	ldr	r2, [r3, #20]
 800e930:	4b8e      	ldr	r3, [pc, #568]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e932:	430a      	orrs	r2, r1
 800e934:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	2380      	movs	r3, #128	; 0x80
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	4013      	ands	r3, r2
 800e940:	d009      	beq.n	800e956 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e942:	4b8a      	ldr	r3, [pc, #552]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e946:	4a8d      	ldr	r2, [pc, #564]	; (800eb7c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800e948:	4013      	ands	r3, r2
 800e94a:	0019      	movs	r1, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e950:	4b86      	ldr	r3, [pc, #536]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e952:	430a      	orrs	r2, r1
 800e954:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	2380      	movs	r3, #128	; 0x80
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	4013      	ands	r3, r2
 800e960:	d009      	beq.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e962:	4b82      	ldr	r3, [pc, #520]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e966:	4a86      	ldr	r2, [pc, #536]	; (800eb80 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800e968:	4013      	ands	r3, r2
 800e96a:	0019      	movs	r1, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e970:	4b7e      	ldr	r3, [pc, #504]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e972:	430a      	orrs	r2, r1
 800e974:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2220      	movs	r2, #32
 800e97c:	4013      	ands	r3, r2
 800e97e:	d009      	beq.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e980:	4b7a      	ldr	r3, [pc, #488]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e984:	4a7f      	ldr	r2, [pc, #508]	; (800eb84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e986:	4013      	ands	r3, r2
 800e988:	0019      	movs	r1, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	699a      	ldr	r2, [r3, #24]
 800e98e:	4b77      	ldr	r3, [pc, #476]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e990:	430a      	orrs	r2, r1
 800e992:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2240      	movs	r2, #64	; 0x40
 800e99a:	4013      	ands	r3, r2
 800e99c:	d009      	beq.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e99e:	4b73      	ldr	r3, [pc, #460]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9a2:	4a79      	ldr	r2, [pc, #484]	; (800eb88 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800e9a4:	4013      	ands	r3, r2
 800e9a6:	0019      	movs	r1, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	69da      	ldr	r2, [r3, #28]
 800e9ac:	4b6f      	ldr	r3, [pc, #444]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9ae:	430a      	orrs	r2, r1
 800e9b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	2380      	movs	r3, #128	; 0x80
 800e9b8:	01db      	lsls	r3, r3, #7
 800e9ba:	4013      	ands	r3, r2
 800e9bc:	d015      	beq.n	800e9ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e9be:	4b6b      	ldr	r3, [pc, #428]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	0899      	lsrs	r1, r3, #2
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9ca:	4b68      	ldr	r3, [pc, #416]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9cc:	430a      	orrs	r2, r1
 800e9ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9d4:	2380      	movs	r3, #128	; 0x80
 800e9d6:	05db      	lsls	r3, r3, #23
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d106      	bne.n	800e9ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800e9dc:	4b63      	ldr	r3, [pc, #396]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9de:	68da      	ldr	r2, [r3, #12]
 800e9e0:	4b62      	ldr	r3, [pc, #392]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9e2:	2180      	movs	r1, #128	; 0x80
 800e9e4:	0249      	lsls	r1, r1, #9
 800e9e6:	430a      	orrs	r2, r1
 800e9e8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	2380      	movs	r3, #128	; 0x80
 800e9f0:	031b      	lsls	r3, r3, #12
 800e9f2:	4013      	ands	r3, r2
 800e9f4:	d009      	beq.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e9f6:	4b5d      	ldr	r3, [pc, #372]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9fa:	2240      	movs	r2, #64	; 0x40
 800e9fc:	4393      	bics	r3, r2
 800e9fe:	0019      	movs	r1, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea04:	4b59      	ldr	r3, [pc, #356]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea06:	430a      	orrs	r2, r1
 800ea08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	2380      	movs	r3, #128	; 0x80
 800ea10:	039b      	lsls	r3, r3, #14
 800ea12:	4013      	ands	r3, r2
 800ea14:	d016      	beq.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800ea16:	4b55      	ldr	r3, [pc, #340]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea1a:	4a5c      	ldr	r2, [pc, #368]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ea1c:	4013      	ands	r3, r2
 800ea1e:	0019      	movs	r1, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea24:	4b51      	ldr	r3, [pc, #324]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea26:	430a      	orrs	r2, r1
 800ea28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea2e:	2380      	movs	r3, #128	; 0x80
 800ea30:	03db      	lsls	r3, r3, #15
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d106      	bne.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ea36:	4b4d      	ldr	r3, [pc, #308]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea38:	68da      	ldr	r2, [r3, #12]
 800ea3a:	4b4c      	ldr	r3, [pc, #304]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea3c:	2180      	movs	r1, #128	; 0x80
 800ea3e:	0449      	lsls	r1, r1, #17
 800ea40:	430a      	orrs	r2, r1
 800ea42:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	2380      	movs	r3, #128	; 0x80
 800ea4a:	03db      	lsls	r3, r3, #15
 800ea4c:	4013      	ands	r3, r2
 800ea4e:	d016      	beq.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800ea50:	4b46      	ldr	r3, [pc, #280]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea54:	4a4e      	ldr	r2, [pc, #312]	; (800eb90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ea56:	4013      	ands	r3, r2
 800ea58:	0019      	movs	r1, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea5e:	4b43      	ldr	r3, [pc, #268]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea60:	430a      	orrs	r2, r1
 800ea62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea68:	2380      	movs	r3, #128	; 0x80
 800ea6a:	045b      	lsls	r3, r3, #17
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d106      	bne.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ea70:	4b3e      	ldr	r3, [pc, #248]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea72:	68da      	ldr	r2, [r3, #12]
 800ea74:	4b3d      	ldr	r3, [pc, #244]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea76:	2180      	movs	r1, #128	; 0x80
 800ea78:	0449      	lsls	r1, r1, #17
 800ea7a:	430a      	orrs	r2, r1
 800ea7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	2380      	movs	r3, #128	; 0x80
 800ea84:	011b      	lsls	r3, r3, #4
 800ea86:	4013      	ands	r3, r2
 800ea88:	d014      	beq.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800ea8a:	4b38      	ldr	r3, [pc, #224]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea8e:	2203      	movs	r2, #3
 800ea90:	4393      	bics	r3, r2
 800ea92:	0019      	movs	r1, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6a1a      	ldr	r2, [r3, #32]
 800ea98:	4b34      	ldr	r3, [pc, #208]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea9a:	430a      	orrs	r2, r1
 800ea9c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a1b      	ldr	r3, [r3, #32]
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d106      	bne.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800eaa6:	4b31      	ldr	r3, [pc, #196]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eaa8:	68da      	ldr	r2, [r3, #12]
 800eaaa:	4b30      	ldr	r3, [pc, #192]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eaac:	2180      	movs	r1, #128	; 0x80
 800eaae:	0249      	lsls	r1, r1, #9
 800eab0:	430a      	orrs	r2, r1
 800eab2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	2380      	movs	r3, #128	; 0x80
 800eaba:	019b      	lsls	r3, r3, #6
 800eabc:	4013      	ands	r3, r2
 800eabe:	d014      	beq.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800eac0:	4b2a      	ldr	r3, [pc, #168]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eac4:	220c      	movs	r2, #12
 800eac6:	4393      	bics	r3, r2
 800eac8:	0019      	movs	r1, r3
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eace:	4b27      	ldr	r3, [pc, #156]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ead0:	430a      	orrs	r2, r1
 800ead2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead8:	2b04      	cmp	r3, #4
 800eada:	d106      	bne.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800eadc:	4b23      	ldr	r3, [pc, #140]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eade:	68da      	ldr	r2, [r3, #12]
 800eae0:	4b22      	ldr	r3, [pc, #136]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eae2:	2180      	movs	r1, #128	; 0x80
 800eae4:	0249      	lsls	r1, r1, #9
 800eae6:	430a      	orrs	r2, r1
 800eae8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	2380      	movs	r3, #128	; 0x80
 800eaf0:	045b      	lsls	r3, r3, #17
 800eaf2:	4013      	ands	r3, r2
 800eaf4:	d016      	beq.n	800eb24 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eaf6:	4b1d      	ldr	r3, [pc, #116]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eaf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eafa:	4a22      	ldr	r2, [pc, #136]	; (800eb84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eafc:	4013      	ands	r3, r2
 800eafe:	0019      	movs	r1, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb04:	4b19      	ldr	r3, [pc, #100]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eb06:	430a      	orrs	r2, r1
 800eb08:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb0e:	2380      	movs	r3, #128	; 0x80
 800eb10:	019b      	lsls	r3, r3, #6
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d106      	bne.n	800eb24 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800eb16:	4b15      	ldr	r3, [pc, #84]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eb18:	68da      	ldr	r2, [r3, #12]
 800eb1a:	4b14      	ldr	r3, [pc, #80]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eb1c:	2180      	movs	r1, #128	; 0x80
 800eb1e:	0449      	lsls	r1, r1, #17
 800eb20:	430a      	orrs	r2, r1
 800eb22:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	2380      	movs	r3, #128	; 0x80
 800eb2a:	049b      	lsls	r3, r3, #18
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	d016      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800eb30:	4b0e      	ldr	r3, [pc, #56]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eb32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb34:	4a10      	ldr	r2, [pc, #64]	; (800eb78 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eb36:	4013      	ands	r3, r2
 800eb38:	0019      	movs	r1, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb3e:	4b0b      	ldr	r3, [pc, #44]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eb40:	430a      	orrs	r2, r1
 800eb42:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb48:	2380      	movs	r3, #128	; 0x80
 800eb4a:	005b      	lsls	r3, r3, #1
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d106      	bne.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800eb50:	4b06      	ldr	r3, [pc, #24]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eb52:	68da      	ldr	r2, [r3, #12]
 800eb54:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eb56:	2180      	movs	r1, #128	; 0x80
 800eb58:	0449      	lsls	r1, r1, #17
 800eb5a:	430a      	orrs	r2, r1
 800eb5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800eb5e:	2312      	movs	r3, #18
 800eb60:	18fb      	adds	r3, r7, r3
 800eb62:	781b      	ldrb	r3, [r3, #0]
}
 800eb64:	0018      	movs	r0, r3
 800eb66:	46bd      	mov	sp, r7
 800eb68:	b006      	add	sp, #24
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	40021000 	.word	0x40021000
 800eb70:	efffffff 	.word	0xefffffff
 800eb74:	fffff3ff 	.word	0xfffff3ff
 800eb78:	fffffcff 	.word	0xfffffcff
 800eb7c:	fff3ffff 	.word	0xfff3ffff
 800eb80:	ffcfffff 	.word	0xffcfffff
 800eb84:	ffffcfff 	.word	0xffffcfff
 800eb88:	ffff3fff 	.word	0xffff3fff
 800eb8c:	ffbfffff 	.word	0xffbfffff
 800eb90:	feffffff 	.word	0xfeffffff

0800eb94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d101      	bne.n	800eba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	e0a8      	b.n	800ecf8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d109      	bne.n	800ebc2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	2382      	movs	r3, #130	; 0x82
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d009      	beq.n	800ebce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	61da      	str	r2, [r3, #28]
 800ebc0:	e005      	b.n	800ebce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	225d      	movs	r2, #93	; 0x5d
 800ebd8:	5c9b      	ldrb	r3, [r3, r2]
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d107      	bne.n	800ebf0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	225c      	movs	r2, #92	; 0x5c
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	0018      	movs	r0, r3
 800ebec:	f7fa f8e0 	bl	8008db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	225d      	movs	r2, #93	; 0x5d
 800ebf4:	2102      	movs	r1, #2
 800ebf6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2140      	movs	r1, #64	; 0x40
 800ec04:	438a      	bics	r2, r1
 800ec06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	68da      	ldr	r2, [r3, #12]
 800ec0c:	23e0      	movs	r3, #224	; 0xe0
 800ec0e:	00db      	lsls	r3, r3, #3
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d902      	bls.n	800ec1a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ec14:	2300      	movs	r3, #0
 800ec16:	60fb      	str	r3, [r7, #12]
 800ec18:	e002      	b.n	800ec20 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ec1a:	2380      	movs	r3, #128	; 0x80
 800ec1c:	015b      	lsls	r3, r3, #5
 800ec1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	68da      	ldr	r2, [r3, #12]
 800ec24:	23f0      	movs	r3, #240	; 0xf0
 800ec26:	011b      	lsls	r3, r3, #4
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d008      	beq.n	800ec3e <HAL_SPI_Init+0xaa>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	68da      	ldr	r2, [r3, #12]
 800ec30:	23e0      	movs	r3, #224	; 0xe0
 800ec32:	00db      	lsls	r3, r3, #3
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d002      	beq.n	800ec3e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	2382      	movs	r3, #130	; 0x82
 800ec44:	005b      	lsls	r3, r3, #1
 800ec46:	401a      	ands	r2, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6899      	ldr	r1, [r3, #8]
 800ec4c:	2384      	movs	r3, #132	; 0x84
 800ec4e:	021b      	lsls	r3, r3, #8
 800ec50:	400b      	ands	r3, r1
 800ec52:	431a      	orrs	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	2102      	movs	r1, #2
 800ec5a:	400b      	ands	r3, r1
 800ec5c:	431a      	orrs	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	695b      	ldr	r3, [r3, #20]
 800ec62:	2101      	movs	r1, #1
 800ec64:	400b      	ands	r3, r1
 800ec66:	431a      	orrs	r2, r3
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6999      	ldr	r1, [r3, #24]
 800ec6c:	2380      	movs	r3, #128	; 0x80
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	400b      	ands	r3, r1
 800ec72:	431a      	orrs	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	69db      	ldr	r3, [r3, #28]
 800ec78:	2138      	movs	r1, #56	; 0x38
 800ec7a:	400b      	ands	r3, r1
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a1b      	ldr	r3, [r3, #32]
 800ec82:	2180      	movs	r1, #128	; 0x80
 800ec84:	400b      	ands	r3, r1
 800ec86:	431a      	orrs	r2, r3
 800ec88:	0011      	movs	r1, r2
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec8e:	2380      	movs	r3, #128	; 0x80
 800ec90:	019b      	lsls	r3, r3, #6
 800ec92:	401a      	ands	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	430a      	orrs	r2, r1
 800ec9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	699b      	ldr	r3, [r3, #24]
 800eca0:	0c1b      	lsrs	r3, r3, #16
 800eca2:	2204      	movs	r2, #4
 800eca4:	401a      	ands	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecaa:	2110      	movs	r1, #16
 800ecac:	400b      	ands	r3, r1
 800ecae:	431a      	orrs	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb4:	2108      	movs	r1, #8
 800ecb6:	400b      	ands	r3, r1
 800ecb8:	431a      	orrs	r2, r3
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	68d9      	ldr	r1, [r3, #12]
 800ecbe:	23f0      	movs	r3, #240	; 0xf0
 800ecc0:	011b      	lsls	r3, r3, #4
 800ecc2:	400b      	ands	r3, r1
 800ecc4:	431a      	orrs	r2, r3
 800ecc6:	0011      	movs	r1, r2
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	2380      	movs	r3, #128	; 0x80
 800eccc:	015b      	lsls	r3, r3, #5
 800ecce:	401a      	ands	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	430a      	orrs	r2, r1
 800ecd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	69da      	ldr	r2, [r3, #28]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4907      	ldr	r1, [pc, #28]	; (800ed00 <HAL_SPI_Init+0x16c>)
 800ece4:	400a      	ands	r2, r1
 800ece6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	225d      	movs	r2, #93	; 0x5d
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	0018      	movs	r0, r3
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	b004      	add	sp, #16
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	fffff7ff 	.word	0xfffff7ff

0800ed04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b088      	sub	sp, #32
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	603b      	str	r3, [r7, #0]
 800ed10:	1dbb      	adds	r3, r7, #6
 800ed12:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ed14:	231f      	movs	r3, #31
 800ed16:	18fb      	adds	r3, r7, r3
 800ed18:	2200      	movs	r2, #0
 800ed1a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	225c      	movs	r2, #92	; 0x5c
 800ed20:	5c9b      	ldrb	r3, [r3, r2]
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d101      	bne.n	800ed2a <HAL_SPI_Transmit+0x26>
 800ed26:	2302      	movs	r3, #2
 800ed28:	e147      	b.n	800efba <HAL_SPI_Transmit+0x2b6>
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	225c      	movs	r2, #92	; 0x5c
 800ed2e:	2101      	movs	r1, #1
 800ed30:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed32:	f7fa fb45 	bl	80093c0 <HAL_GetTick>
 800ed36:	0003      	movs	r3, r0
 800ed38:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ed3a:	2316      	movs	r3, #22
 800ed3c:	18fb      	adds	r3, r7, r3
 800ed3e:	1dba      	adds	r2, r7, #6
 800ed40:	8812      	ldrh	r2, [r2, #0]
 800ed42:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	225d      	movs	r2, #93	; 0x5d
 800ed48:	5c9b      	ldrb	r3, [r3, r2]
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d004      	beq.n	800ed5a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800ed50:	231f      	movs	r3, #31
 800ed52:	18fb      	adds	r3, r7, r3
 800ed54:	2202      	movs	r2, #2
 800ed56:	701a      	strb	r2, [r3, #0]
    goto error;
 800ed58:	e128      	b.n	800efac <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d003      	beq.n	800ed68 <HAL_SPI_Transmit+0x64>
 800ed60:	1dbb      	adds	r3, r7, #6
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d104      	bne.n	800ed72 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800ed68:	231f      	movs	r3, #31
 800ed6a:	18fb      	adds	r3, r7, r3
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	701a      	strb	r2, [r3, #0]
    goto error;
 800ed70:	e11c      	b.n	800efac <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	225d      	movs	r2, #93	; 0x5d
 800ed76:	2103      	movs	r1, #3
 800ed78:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	68ba      	ldr	r2, [r7, #8]
 800ed84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	1dba      	adds	r2, r7, #6
 800ed8a:	8812      	ldrh	r2, [r2, #0]
 800ed8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	1dba      	adds	r2, r7, #6
 800ed92:	8812      	ldrh	r2, [r2, #0]
 800ed94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2244      	movs	r2, #68	; 0x44
 800eda0:	2100      	movs	r1, #0
 800eda2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2246      	movs	r2, #70	; 0x46
 800eda8:	2100      	movs	r1, #0
 800edaa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2200      	movs	r2, #0
 800edb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	689a      	ldr	r2, [r3, #8]
 800edbc:	2380      	movs	r3, #128	; 0x80
 800edbe:	021b      	lsls	r3, r3, #8
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d110      	bne.n	800ede6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2140      	movs	r1, #64	; 0x40
 800edd0:	438a      	bics	r2, r1
 800edd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2180      	movs	r1, #128	; 0x80
 800ede0:	01c9      	lsls	r1, r1, #7
 800ede2:	430a      	orrs	r2, r1
 800ede4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2240      	movs	r2, #64	; 0x40
 800edee:	4013      	ands	r3, r2
 800edf0:	2b40      	cmp	r3, #64	; 0x40
 800edf2:	d007      	beq.n	800ee04 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2140      	movs	r1, #64	; 0x40
 800ee00:	430a      	orrs	r2, r1
 800ee02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	68da      	ldr	r2, [r3, #12]
 800ee08:	23e0      	movs	r3, #224	; 0xe0
 800ee0a:	00db      	lsls	r3, r3, #3
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d952      	bls.n	800eeb6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d004      	beq.n	800ee22 <HAL_SPI_Transmit+0x11e>
 800ee18:	2316      	movs	r3, #22
 800ee1a:	18fb      	adds	r3, r7, r3
 800ee1c:	881b      	ldrh	r3, [r3, #0]
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d143      	bne.n	800eeaa <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee26:	881a      	ldrh	r2, [r3, #0]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee32:	1c9a      	adds	r2, r3, #2
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	b29a      	uxth	r2, r3
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ee46:	e030      	b.n	800eeaa <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	2202      	movs	r2, #2
 800ee50:	4013      	ands	r3, r2
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	d112      	bne.n	800ee7c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5a:	881a      	ldrh	r2, [r3, #0]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee66:	1c9a      	adds	r2, r3, #2
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	3b01      	subs	r3, #1
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ee7a:	e016      	b.n	800eeaa <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee7c:	f7fa faa0 	bl	80093c0 <HAL_GetTick>
 800ee80:	0002      	movs	r2, r0
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	1ad3      	subs	r3, r2, r3
 800ee86:	683a      	ldr	r2, [r7, #0]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d802      	bhi.n	800ee92 <HAL_SPI_Transmit+0x18e>
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	d102      	bne.n	800ee98 <HAL_SPI_Transmit+0x194>
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d108      	bne.n	800eeaa <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800ee98:	231f      	movs	r3, #31
 800ee9a:	18fb      	adds	r3, r7, r3
 800ee9c:	2203      	movs	r2, #3
 800ee9e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	225d      	movs	r2, #93	; 0x5d
 800eea4:	2101      	movs	r1, #1
 800eea6:	5499      	strb	r1, [r3, r2]
          goto error;
 800eea8:	e080      	b.n	800efac <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1c9      	bne.n	800ee48 <HAL_SPI_Transmit+0x144>
 800eeb4:	e053      	b.n	800ef5e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d004      	beq.n	800eec8 <HAL_SPI_Transmit+0x1c4>
 800eebe:	2316      	movs	r3, #22
 800eec0:	18fb      	adds	r3, r7, r3
 800eec2:	881b      	ldrh	r3, [r3, #0]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d145      	bne.n	800ef54 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	330c      	adds	r3, #12
 800eed2:	7812      	ldrb	r2, [r2, #0]
 800eed4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeda:	1c5a      	adds	r2, r3, #1
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	3b01      	subs	r3, #1
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800eeee:	e031      	b.n	800ef54 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	2202      	movs	r2, #2
 800eef8:	4013      	ands	r3, r2
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d113      	bne.n	800ef26 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	330c      	adds	r3, #12
 800ef08:	7812      	ldrb	r2, [r2, #0]
 800ef0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef10:	1c5a      	adds	r2, r3, #1
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	b29a      	uxth	r2, r3
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ef24:	e016      	b.n	800ef54 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef26:	f7fa fa4b 	bl	80093c0 <HAL_GetTick>
 800ef2a:	0002      	movs	r2, r0
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	1ad3      	subs	r3, r2, r3
 800ef30:	683a      	ldr	r2, [r7, #0]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d802      	bhi.n	800ef3c <HAL_SPI_Transmit+0x238>
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	d102      	bne.n	800ef42 <HAL_SPI_Transmit+0x23e>
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d108      	bne.n	800ef54 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800ef42:	231f      	movs	r3, #31
 800ef44:	18fb      	adds	r3, r7, r3
 800ef46:	2203      	movs	r2, #3
 800ef48:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	225d      	movs	r2, #93	; 0x5d
 800ef4e:	2101      	movs	r1, #1
 800ef50:	5499      	strb	r1, [r3, r2]
          goto error;
 800ef52:	e02b      	b.n	800efac <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1c8      	bne.n	800eef0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ef5e:	69ba      	ldr	r2, [r7, #24]
 800ef60:	6839      	ldr	r1, [r7, #0]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	0018      	movs	r0, r3
 800ef66:	f000 f95d 	bl	800f224 <SPI_EndRxTxTransaction>
 800ef6a:	1e03      	subs	r3, r0, #0
 800ef6c:	d002      	beq.n	800ef74 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2220      	movs	r2, #32
 800ef72:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d10a      	bne.n	800ef92 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	613b      	str	r3, [r7, #16]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	613b      	str	r3, [r7, #16]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	613b      	str	r3, [r7, #16]
 800ef90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d004      	beq.n	800efa4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800ef9a:	231f      	movs	r3, #31
 800ef9c:	18fb      	adds	r3, r7, r3
 800ef9e:	2201      	movs	r2, #1
 800efa0:	701a      	strb	r2, [r3, #0]
 800efa2:	e003      	b.n	800efac <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	225d      	movs	r2, #93	; 0x5d
 800efa8:	2101      	movs	r1, #1
 800efaa:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	225c      	movs	r2, #92	; 0x5c
 800efb0:	2100      	movs	r1, #0
 800efb2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800efb4:	231f      	movs	r3, #31
 800efb6:	18fb      	adds	r3, r7, r3
 800efb8:	781b      	ldrb	r3, [r3, #0]
}
 800efba:	0018      	movs	r0, r3
 800efbc:	46bd      	mov	sp, r7
 800efbe:	b008      	add	sp, #32
 800efc0:	bd80      	pop	{r7, pc}
	...

0800efc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b088      	sub	sp, #32
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	603b      	str	r3, [r7, #0]
 800efd0:	1dfb      	adds	r3, r7, #7
 800efd2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800efd4:	f7fa f9f4 	bl	80093c0 <HAL_GetTick>
 800efd8:	0002      	movs	r2, r0
 800efda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efdc:	1a9b      	subs	r3, r3, r2
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	18d3      	adds	r3, r2, r3
 800efe2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800efe4:	f7fa f9ec 	bl	80093c0 <HAL_GetTick>
 800efe8:	0003      	movs	r3, r0
 800efea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800efec:	4b3a      	ldr	r3, [pc, #232]	; (800f0d8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	015b      	lsls	r3, r3, #5
 800eff2:	0d1b      	lsrs	r3, r3, #20
 800eff4:	69fa      	ldr	r2, [r7, #28]
 800eff6:	4353      	muls	r3, r2
 800eff8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800effa:	e058      	b.n	800f0ae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	3301      	adds	r3, #1
 800f000:	d055      	beq.n	800f0ae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f002:	f7fa f9dd 	bl	80093c0 <HAL_GetTick>
 800f006:	0002      	movs	r2, r0
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	69fa      	ldr	r2, [r7, #28]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d902      	bls.n	800f018 <SPI_WaitFlagStateUntilTimeout+0x54>
 800f012:	69fb      	ldr	r3, [r7, #28]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d142      	bne.n	800f09e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	685a      	ldr	r2, [r3, #4]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	21e0      	movs	r1, #224	; 0xe0
 800f024:	438a      	bics	r2, r1
 800f026:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	685a      	ldr	r2, [r3, #4]
 800f02c:	2382      	movs	r3, #130	; 0x82
 800f02e:	005b      	lsls	r3, r3, #1
 800f030:	429a      	cmp	r2, r3
 800f032:	d113      	bne.n	800f05c <SPI_WaitFlagStateUntilTimeout+0x98>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	689a      	ldr	r2, [r3, #8]
 800f038:	2380      	movs	r3, #128	; 0x80
 800f03a:	021b      	lsls	r3, r3, #8
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d005      	beq.n	800f04c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	689a      	ldr	r2, [r3, #8]
 800f044:	2380      	movs	r3, #128	; 0x80
 800f046:	00db      	lsls	r3, r3, #3
 800f048:	429a      	cmp	r2, r3
 800f04a:	d107      	bne.n	800f05c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2140      	movs	r1, #64	; 0x40
 800f058:	438a      	bics	r2, r1
 800f05a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f060:	2380      	movs	r3, #128	; 0x80
 800f062:	019b      	lsls	r3, r3, #6
 800f064:	429a      	cmp	r2, r3
 800f066:	d110      	bne.n	800f08a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	491a      	ldr	r1, [pc, #104]	; (800f0dc <SPI_WaitFlagStateUntilTimeout+0x118>)
 800f074:	400a      	ands	r2, r1
 800f076:	601a      	str	r2, [r3, #0]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2180      	movs	r1, #128	; 0x80
 800f084:	0189      	lsls	r1, r1, #6
 800f086:	430a      	orrs	r2, r1
 800f088:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	225d      	movs	r2, #93	; 0x5d
 800f08e:	2101      	movs	r1, #1
 800f090:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	225c      	movs	r2, #92	; 0x5c
 800f096:	2100      	movs	r1, #0
 800f098:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f09a:	2303      	movs	r3, #3
 800f09c:	e017      	b.n	800f0ce <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d101      	bne.n	800f0a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	3b01      	subs	r3, #1
 800f0ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	689b      	ldr	r3, [r3, #8]
 800f0b4:	68ba      	ldr	r2, [r7, #8]
 800f0b6:	4013      	ands	r3, r2
 800f0b8:	68ba      	ldr	r2, [r7, #8]
 800f0ba:	1ad3      	subs	r3, r2, r3
 800f0bc:	425a      	negs	r2, r3
 800f0be:	4153      	adcs	r3, r2
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	001a      	movs	r2, r3
 800f0c4:	1dfb      	adds	r3, r7, #7
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d197      	bne.n	800effc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f0cc:	2300      	movs	r3, #0
}
 800f0ce:	0018      	movs	r0, r3
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	b008      	add	sp, #32
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	46c0      	nop			; (mov r8, r8)
 800f0d8:	20000058 	.word	0x20000058
 800f0dc:	ffffdfff 	.word	0xffffdfff

0800f0e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b08a      	sub	sp, #40	; 0x28
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
 800f0ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f0ee:	2317      	movs	r3, #23
 800f0f0:	18fb      	adds	r3, r7, r3
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f0f6:	f7fa f963 	bl	80093c0 <HAL_GetTick>
 800f0fa:	0002      	movs	r2, r0
 800f0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fe:	1a9b      	subs	r3, r3, r2
 800f100:	683a      	ldr	r2, [r7, #0]
 800f102:	18d3      	adds	r3, r2, r3
 800f104:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f106:	f7fa f95b 	bl	80093c0 <HAL_GetTick>
 800f10a:	0003      	movs	r3, r0
 800f10c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	330c      	adds	r3, #12
 800f114:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f116:	4b41      	ldr	r3, [pc, #260]	; (800f21c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	0013      	movs	r3, r2
 800f11c:	009b      	lsls	r3, r3, #2
 800f11e:	189b      	adds	r3, r3, r2
 800f120:	00da      	lsls	r2, r3, #3
 800f122:	1ad3      	subs	r3, r2, r3
 800f124:	0d1b      	lsrs	r3, r3, #20
 800f126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f128:	4353      	muls	r3, r2
 800f12a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f12c:	e068      	b.n	800f200 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	23c0      	movs	r3, #192	; 0xc0
 800f132:	00db      	lsls	r3, r3, #3
 800f134:	429a      	cmp	r2, r3
 800f136:	d10a      	bne.n	800f14e <SPI_WaitFifoStateUntilTimeout+0x6e>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d107      	bne.n	800f14e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	b2da      	uxtb	r2, r3
 800f144:	2117      	movs	r1, #23
 800f146:	187b      	adds	r3, r7, r1
 800f148:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f14a:	187b      	adds	r3, r7, r1
 800f14c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	3301      	adds	r3, #1
 800f152:	d055      	beq.n	800f200 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f154:	f7fa f934 	bl	80093c0 <HAL_GetTick>
 800f158:	0002      	movs	r2, r0
 800f15a:	6a3b      	ldr	r3, [r7, #32]
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f160:	429a      	cmp	r2, r3
 800f162:	d902      	bls.n	800f16a <SPI_WaitFifoStateUntilTimeout+0x8a>
 800f164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f166:	2b00      	cmp	r3, #0
 800f168:	d142      	bne.n	800f1f0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	685a      	ldr	r2, [r3, #4]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	21e0      	movs	r1, #224	; 0xe0
 800f176:	438a      	bics	r2, r1
 800f178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	685a      	ldr	r2, [r3, #4]
 800f17e:	2382      	movs	r3, #130	; 0x82
 800f180:	005b      	lsls	r3, r3, #1
 800f182:	429a      	cmp	r2, r3
 800f184:	d113      	bne.n	800f1ae <SPI_WaitFifoStateUntilTimeout+0xce>
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	689a      	ldr	r2, [r3, #8]
 800f18a:	2380      	movs	r3, #128	; 0x80
 800f18c:	021b      	lsls	r3, r3, #8
 800f18e:	429a      	cmp	r2, r3
 800f190:	d005      	beq.n	800f19e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	689a      	ldr	r2, [r3, #8]
 800f196:	2380      	movs	r3, #128	; 0x80
 800f198:	00db      	lsls	r3, r3, #3
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d107      	bne.n	800f1ae <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2140      	movs	r1, #64	; 0x40
 800f1aa:	438a      	bics	r2, r1
 800f1ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1b2:	2380      	movs	r3, #128	; 0x80
 800f1b4:	019b      	lsls	r3, r3, #6
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d110      	bne.n	800f1dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4916      	ldr	r1, [pc, #88]	; (800f220 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800f1c6:	400a      	ands	r2, r1
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2180      	movs	r1, #128	; 0x80
 800f1d6:	0189      	lsls	r1, r1, #6
 800f1d8:	430a      	orrs	r2, r1
 800f1da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	225d      	movs	r2, #93	; 0x5d
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	225c      	movs	r2, #92	; 0x5c
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f1ec:	2303      	movs	r3, #3
 800f1ee:	e010      	b.n	800f212 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d101      	bne.n	800f1fa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	3b01      	subs	r3, #1
 800f1fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	68ba      	ldr	r2, [r7, #8]
 800f208:	4013      	ands	r3, r2
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d18e      	bne.n	800f12e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800f210:	2300      	movs	r3, #0
}
 800f212:	0018      	movs	r0, r3
 800f214:	46bd      	mov	sp, r7
 800f216:	b00a      	add	sp, #40	; 0x28
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	46c0      	nop			; (mov r8, r8)
 800f21c:	20000058 	.word	0x20000058
 800f220:	ffffdfff 	.word	0xffffdfff

0800f224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b086      	sub	sp, #24
 800f228:	af02      	add	r7, sp, #8
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	23c0      	movs	r3, #192	; 0xc0
 800f234:	0159      	lsls	r1, r3, #5
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	0013      	movs	r3, r2
 800f23e:	2200      	movs	r2, #0
 800f240:	f7ff ff4e 	bl	800f0e0 <SPI_WaitFifoStateUntilTimeout>
 800f244:	1e03      	subs	r3, r0, #0
 800f246:	d007      	beq.n	800f258 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f24c:	2220      	movs	r2, #32
 800f24e:	431a      	orrs	r2, r3
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f254:	2303      	movs	r3, #3
 800f256:	e027      	b.n	800f2a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	9300      	str	r3, [sp, #0]
 800f260:	0013      	movs	r3, r2
 800f262:	2200      	movs	r2, #0
 800f264:	2180      	movs	r1, #128	; 0x80
 800f266:	f7ff fead 	bl	800efc4 <SPI_WaitFlagStateUntilTimeout>
 800f26a:	1e03      	subs	r3, r0, #0
 800f26c:	d007      	beq.n	800f27e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f272:	2220      	movs	r2, #32
 800f274:	431a      	orrs	r2, r3
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f27a:	2303      	movs	r3, #3
 800f27c:	e014      	b.n	800f2a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f27e:	68ba      	ldr	r2, [r7, #8]
 800f280:	23c0      	movs	r3, #192	; 0xc0
 800f282:	00d9      	lsls	r1, r3, #3
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	9300      	str	r3, [sp, #0]
 800f28a:	0013      	movs	r3, r2
 800f28c:	2200      	movs	r2, #0
 800f28e:	f7ff ff27 	bl	800f0e0 <SPI_WaitFifoStateUntilTimeout>
 800f292:	1e03      	subs	r3, r0, #0
 800f294:	d007      	beq.n	800f2a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f29a:	2220      	movs	r2, #32
 800f29c:	431a      	orrs	r2, r3
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	e000      	b.n	800f2a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	0018      	movs	r0, r3
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	b004      	add	sp, #16
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d101      	bne.n	800f2c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e04a      	b.n	800f358 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	223d      	movs	r2, #61	; 0x3d
 800f2c6:	5c9b      	ldrb	r3, [r3, r2]
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d107      	bne.n	800f2de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	223c      	movs	r2, #60	; 0x3c
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	0018      	movs	r0, r3
 800f2da:	f7f9 fe07 	bl	8008eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	223d      	movs	r2, #61	; 0x3d
 800f2e2:	2102      	movs	r1, #2
 800f2e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	3304      	adds	r3, #4
 800f2ee:	0019      	movs	r1, r3
 800f2f0:	0010      	movs	r0, r2
 800f2f2:	f000 fc5b 	bl	800fbac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2248      	movs	r2, #72	; 0x48
 800f2fa:	2101      	movs	r1, #1
 800f2fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	223e      	movs	r2, #62	; 0x3e
 800f302:	2101      	movs	r1, #1
 800f304:	5499      	strb	r1, [r3, r2]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	223f      	movs	r2, #63	; 0x3f
 800f30a:	2101      	movs	r1, #1
 800f30c:	5499      	strb	r1, [r3, r2]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2240      	movs	r2, #64	; 0x40
 800f312:	2101      	movs	r1, #1
 800f314:	5499      	strb	r1, [r3, r2]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2241      	movs	r2, #65	; 0x41
 800f31a:	2101      	movs	r1, #1
 800f31c:	5499      	strb	r1, [r3, r2]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2242      	movs	r2, #66	; 0x42
 800f322:	2101      	movs	r1, #1
 800f324:	5499      	strb	r1, [r3, r2]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2243      	movs	r2, #67	; 0x43
 800f32a:	2101      	movs	r1, #1
 800f32c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2244      	movs	r2, #68	; 0x44
 800f332:	2101      	movs	r1, #1
 800f334:	5499      	strb	r1, [r3, r2]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2245      	movs	r2, #69	; 0x45
 800f33a:	2101      	movs	r1, #1
 800f33c:	5499      	strb	r1, [r3, r2]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2246      	movs	r2, #70	; 0x46
 800f342:	2101      	movs	r1, #1
 800f344:	5499      	strb	r1, [r3, r2]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2247      	movs	r2, #71	; 0x47
 800f34a:	2101      	movs	r1, #1
 800f34c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	223d      	movs	r2, #61	; 0x3d
 800f352:	2101      	movs	r1, #1
 800f354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f356:	2300      	movs	r3, #0
}
 800f358:	0018      	movs	r0, r3
 800f35a:	46bd      	mov	sp, r7
 800f35c:	b002      	add	sp, #8
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	223d      	movs	r2, #61	; 0x3d
 800f36c:	5c9b      	ldrb	r3, [r3, r2]
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	2b01      	cmp	r3, #1
 800f372:	d001      	beq.n	800f378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f374:	2301      	movs	r3, #1
 800f376:	e03f      	b.n	800f3f8 <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	223d      	movs	r2, #61	; 0x3d
 800f37c:	2102      	movs	r1, #2
 800f37e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a1e      	ldr	r2, [pc, #120]	; (800f400 <HAL_TIM_Base_Start+0xa0>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d014      	beq.n	800f3b4 <HAL_TIM_Base_Start+0x54>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	2380      	movs	r3, #128	; 0x80
 800f390:	05db      	lsls	r3, r3, #23
 800f392:	429a      	cmp	r2, r3
 800f394:	d00e      	beq.n	800f3b4 <HAL_TIM_Base_Start+0x54>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4a1a      	ldr	r2, [pc, #104]	; (800f404 <HAL_TIM_Base_Start+0xa4>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d009      	beq.n	800f3b4 <HAL_TIM_Base_Start+0x54>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a18      	ldr	r2, [pc, #96]	; (800f408 <HAL_TIM_Base_Start+0xa8>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d004      	beq.n	800f3b4 <HAL_TIM_Base_Start+0x54>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4a17      	ldr	r2, [pc, #92]	; (800f40c <HAL_TIM_Base_Start+0xac>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d116      	bne.n	800f3e2 <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	4a15      	ldr	r2, [pc, #84]	; (800f410 <HAL_TIM_Base_Start+0xb0>)
 800f3bc:	4013      	ands	r3, r2
 800f3be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2b06      	cmp	r3, #6
 800f3c4:	d016      	beq.n	800f3f4 <HAL_TIM_Base_Start+0x94>
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	2380      	movs	r3, #128	; 0x80
 800f3ca:	025b      	lsls	r3, r3, #9
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d011      	beq.n	800f3f4 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2101      	movs	r1, #1
 800f3dc:	430a      	orrs	r2, r1
 800f3de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3e0:	e008      	b.n	800f3f4 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	430a      	orrs	r2, r1
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	e000      	b.n	800f3f6 <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3f4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	0018      	movs	r0, r3
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	b004      	add	sp, #16
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	40012c00 	.word	0x40012c00
 800f404:	40000400 	.word	0x40000400
 800f408:	40000800 	.word	0x40000800
 800f40c:	40014000 	.word	0x40014000
 800f410:	00010007 	.word	0x00010007

0800f414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	223d      	movs	r2, #61	; 0x3d
 800f420:	5c9b      	ldrb	r3, [r3, r2]
 800f422:	b2db      	uxtb	r3, r3
 800f424:	2b01      	cmp	r3, #1
 800f426:	d001      	beq.n	800f42c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f428:	2301      	movs	r3, #1
 800f42a:	e047      	b.n	800f4bc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	223d      	movs	r2, #61	; 0x3d
 800f430:	2102      	movs	r1, #2
 800f432:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	68da      	ldr	r2, [r3, #12]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2101      	movs	r1, #1
 800f440:	430a      	orrs	r2, r1
 800f442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a1e      	ldr	r2, [pc, #120]	; (800f4c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d014      	beq.n	800f478 <HAL_TIM_Base_Start_IT+0x64>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	2380      	movs	r3, #128	; 0x80
 800f454:	05db      	lsls	r3, r3, #23
 800f456:	429a      	cmp	r2, r3
 800f458:	d00e      	beq.n	800f478 <HAL_TIM_Base_Start_IT+0x64>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4a1a      	ldr	r2, [pc, #104]	; (800f4c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d009      	beq.n	800f478 <HAL_TIM_Base_Start_IT+0x64>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a18      	ldr	r2, [pc, #96]	; (800f4cc <HAL_TIM_Base_Start_IT+0xb8>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d004      	beq.n	800f478 <HAL_TIM_Base_Start_IT+0x64>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a17      	ldr	r2, [pc, #92]	; (800f4d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d116      	bne.n	800f4a6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	4a15      	ldr	r2, [pc, #84]	; (800f4d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800f480:	4013      	ands	r3, r2
 800f482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2b06      	cmp	r3, #6
 800f488:	d016      	beq.n	800f4b8 <HAL_TIM_Base_Start_IT+0xa4>
 800f48a:	68fa      	ldr	r2, [r7, #12]
 800f48c:	2380      	movs	r3, #128	; 0x80
 800f48e:	025b      	lsls	r3, r3, #9
 800f490:	429a      	cmp	r2, r3
 800f492:	d011      	beq.n	800f4b8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2101      	movs	r1, #1
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4a4:	e008      	b.n	800f4b8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2101      	movs	r1, #1
 800f4b2:	430a      	orrs	r2, r1
 800f4b4:	601a      	str	r2, [r3, #0]
 800f4b6:	e000      	b.n	800f4ba <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4b8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800f4ba:	2300      	movs	r3, #0
}
 800f4bc:	0018      	movs	r0, r3
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	b004      	add	sp, #16
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	40012c00 	.word	0x40012c00
 800f4c8:	40000400 	.word	0x40000400
 800f4cc:	40000800 	.word	0x40000800
 800f4d0:	40014000 	.word	0x40014000
 800f4d4:	00010007 	.word	0x00010007

0800f4d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b086      	sub	sp, #24
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d101      	bne.n	800f4ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	e090      	b.n	800f60e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	223d      	movs	r2, #61	; 0x3d
 800f4f0:	5c9b      	ldrb	r3, [r3, r2]
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d107      	bne.n	800f508 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	223c      	movs	r2, #60	; 0x3c
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	0018      	movs	r0, r3
 800f504:	f7f9 fca0 	bl	8008e48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	223d      	movs	r2, #61	; 0x3d
 800f50c:	2102      	movs	r1, #2
 800f50e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	689a      	ldr	r2, [r3, #8]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	493f      	ldr	r1, [pc, #252]	; (800f618 <HAL_TIM_Encoder_Init+0x140>)
 800f51c:	400a      	ands	r2, r1
 800f51e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	3304      	adds	r3, #4
 800f528:	0019      	movs	r1, r3
 800f52a:	0010      	movs	r0, r2
 800f52c:	f000 fb3e 	bl	800fbac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	689b      	ldr	r3, [r3, #8]
 800f536:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	699b      	ldr	r3, [r3, #24]
 800f53e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	6a1b      	ldr	r3, [r3, #32]
 800f546:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	697a      	ldr	r2, [r7, #20]
 800f54e:	4313      	orrs	r3, r2
 800f550:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	4a31      	ldr	r2, [pc, #196]	; (800f61c <HAL_TIM_Encoder_Init+0x144>)
 800f556:	4013      	ands	r3, r2
 800f558:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	689a      	ldr	r2, [r3, #8]
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	699b      	ldr	r3, [r3, #24]
 800f562:	021b      	lsls	r3, r3, #8
 800f564:	4313      	orrs	r3, r2
 800f566:	693a      	ldr	r2, [r7, #16]
 800f568:	4313      	orrs	r3, r2
 800f56a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	4a2c      	ldr	r2, [pc, #176]	; (800f620 <HAL_TIM_Encoder_Init+0x148>)
 800f570:	4013      	ands	r3, r2
 800f572:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	4a2b      	ldr	r2, [pc, #172]	; (800f624 <HAL_TIM_Encoder_Init+0x14c>)
 800f578:	4013      	ands	r3, r2
 800f57a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	68da      	ldr	r2, [r3, #12]
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	69db      	ldr	r3, [r3, #28]
 800f584:	021b      	lsls	r3, r3, #8
 800f586:	4313      	orrs	r3, r2
 800f588:	693a      	ldr	r2, [r7, #16]
 800f58a:	4313      	orrs	r3, r2
 800f58c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	011a      	lsls	r2, r3, #4
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	6a1b      	ldr	r3, [r3, #32]
 800f598:	031b      	lsls	r3, r3, #12
 800f59a:	4313      	orrs	r3, r2
 800f59c:	693a      	ldr	r2, [r7, #16]
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2222      	movs	r2, #34	; 0x22
 800f5a6:	4393      	bics	r3, r2
 800f5a8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2288      	movs	r2, #136	; 0x88
 800f5ae:	4393      	bics	r3, r2
 800f5b0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	695b      	ldr	r3, [r3, #20]
 800f5ba:	011b      	lsls	r3, r3, #4
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	697a      	ldr	r2, [r7, #20]
 800f5ca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	693a      	ldr	r2, [r7, #16]
 800f5d2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2248      	movs	r2, #72	; 0x48
 800f5e0:	2101      	movs	r1, #1
 800f5e2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	223e      	movs	r2, #62	; 0x3e
 800f5e8:	2101      	movs	r1, #1
 800f5ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	223f      	movs	r2, #63	; 0x3f
 800f5f0:	2101      	movs	r1, #1
 800f5f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2244      	movs	r2, #68	; 0x44
 800f5f8:	2101      	movs	r1, #1
 800f5fa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2245      	movs	r2, #69	; 0x45
 800f600:	2101      	movs	r1, #1
 800f602:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	223d      	movs	r2, #61	; 0x3d
 800f608:	2101      	movs	r1, #1
 800f60a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f60c:	2300      	movs	r3, #0
}
 800f60e:	0018      	movs	r0, r3
 800f610:	46bd      	mov	sp, r7
 800f612:	b006      	add	sp, #24
 800f614:	bd80      	pop	{r7, pc}
 800f616:	46c0      	nop			; (mov r8, r8)
 800f618:	fffebff8 	.word	0xfffebff8
 800f61c:	fffffcfc 	.word	0xfffffcfc
 800f620:	fffff3f3 	.word	0xfffff3f3
 800f624:	ffff0f0f 	.word	0xffff0f0f

0800f628 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f628:	b590      	push	{r4, r7, lr}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f632:	200f      	movs	r0, #15
 800f634:	183b      	adds	r3, r7, r0
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	213e      	movs	r1, #62	; 0x3e
 800f63a:	5c52      	ldrb	r2, [r2, r1]
 800f63c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f63e:	230e      	movs	r3, #14
 800f640:	18fb      	adds	r3, r7, r3
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	213f      	movs	r1, #63	; 0x3f
 800f646:	5c52      	ldrb	r2, [r2, r1]
 800f648:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f64a:	240d      	movs	r4, #13
 800f64c:	193b      	adds	r3, r7, r4
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	2144      	movs	r1, #68	; 0x44
 800f652:	5c52      	ldrb	r2, [r2, r1]
 800f654:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f656:	230c      	movs	r3, #12
 800f658:	18fb      	adds	r3, r7, r3
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	2145      	movs	r1, #69	; 0x45
 800f65e:	5c52      	ldrb	r2, [r2, r1]
 800f660:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d112      	bne.n	800f68e <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f668:	183b      	adds	r3, r7, r0
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d103      	bne.n	800f678 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800f670:	193b      	adds	r3, r7, r4
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b01      	cmp	r3, #1
 800f676:	d001      	beq.n	800f67c <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 800f678:	2301      	movs	r3, #1
 800f67a:	e095      	b.n	800f7a8 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	223e      	movs	r2, #62	; 0x3e
 800f680:	2102      	movs	r1, #2
 800f682:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2244      	movs	r2, #68	; 0x44
 800f688:	2102      	movs	r1, #2
 800f68a:	5499      	strb	r1, [r3, r2]
 800f68c:	e03d      	b.n	800f70a <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	2b04      	cmp	r3, #4
 800f692:	d114      	bne.n	800f6be <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f694:	230e      	movs	r3, #14
 800f696:	18fb      	adds	r3, r7, r3
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d104      	bne.n	800f6a8 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f69e:	230c      	movs	r3, #12
 800f6a0:	18fb      	adds	r3, r7, r3
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d001      	beq.n	800f6ac <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e07d      	b.n	800f7a8 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	223f      	movs	r2, #63	; 0x3f
 800f6b0:	2102      	movs	r1, #2
 800f6b2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2245      	movs	r2, #69	; 0x45
 800f6b8:	2102      	movs	r1, #2
 800f6ba:	5499      	strb	r1, [r3, r2]
 800f6bc:	e025      	b.n	800f70a <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f6be:	230f      	movs	r3, #15
 800f6c0:	18fb      	adds	r3, r7, r3
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d10e      	bne.n	800f6e6 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f6c8:	230e      	movs	r3, #14
 800f6ca:	18fb      	adds	r3, r7, r3
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d109      	bne.n	800f6e6 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f6d2:	230d      	movs	r3, #13
 800f6d4:	18fb      	adds	r3, r7, r3
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d104      	bne.n	800f6e6 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f6dc:	230c      	movs	r3, #12
 800f6de:	18fb      	adds	r3, r7, r3
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d001      	beq.n	800f6ea <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e05e      	b.n	800f7a8 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	223e      	movs	r2, #62	; 0x3e
 800f6ee:	2102      	movs	r1, #2
 800f6f0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	223f      	movs	r2, #63	; 0x3f
 800f6f6:	2102      	movs	r1, #2
 800f6f8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2244      	movs	r2, #68	; 0x44
 800f6fe:	2102      	movs	r1, #2
 800f700:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2245      	movs	r2, #69	; 0x45
 800f706:	2102      	movs	r1, #2
 800f708:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d003      	beq.n	800f718 <HAL_TIM_Encoder_Start_IT+0xf0>
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	2b04      	cmp	r3, #4
 800f714:	d010      	beq.n	800f738 <HAL_TIM_Encoder_Start_IT+0x110>
 800f716:	e01f      	b.n	800f758 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2201      	movs	r2, #1
 800f71e:	2100      	movs	r1, #0
 800f720:	0018      	movs	r0, r3
 800f722:	f000 fb77 	bl	800fe14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68da      	ldr	r2, [r3, #12]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2102      	movs	r1, #2
 800f732:	430a      	orrs	r2, r1
 800f734:	60da      	str	r2, [r3, #12]
      break;
 800f736:	e02e      	b.n	800f796 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	2201      	movs	r2, #1
 800f73e:	2104      	movs	r1, #4
 800f740:	0018      	movs	r0, r3
 800f742:	f000 fb67 	bl	800fe14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	68da      	ldr	r2, [r3, #12]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2104      	movs	r1, #4
 800f752:	430a      	orrs	r2, r1
 800f754:	60da      	str	r2, [r3, #12]
      break;
 800f756:	e01e      	b.n	800f796 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2201      	movs	r2, #1
 800f75e:	2100      	movs	r1, #0
 800f760:	0018      	movs	r0, r3
 800f762:	f000 fb57 	bl	800fe14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	2201      	movs	r2, #1
 800f76c:	2104      	movs	r1, #4
 800f76e:	0018      	movs	r0, r3
 800f770:	f000 fb50 	bl	800fe14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	68da      	ldr	r2, [r3, #12]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2102      	movs	r1, #2
 800f780:	430a      	orrs	r2, r1
 800f782:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	68da      	ldr	r2, [r3, #12]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2104      	movs	r1, #4
 800f790:	430a      	orrs	r2, r1
 800f792:	60da      	str	r2, [r3, #12]
      break;
 800f794:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2101      	movs	r1, #1
 800f7a2:	430a      	orrs	r2, r1
 800f7a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	0018      	movs	r0, r3
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	b005      	add	sp, #20
 800f7ae:	bd90      	pop	{r4, r7, pc}

0800f7b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	691b      	ldr	r3, [r3, #16]
 800f7c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	2202      	movs	r2, #2
 800f7cc:	4013      	ands	r3, r2
 800f7ce:	d021      	beq.n	800f814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	d01d      	beq.n	800f814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2203      	movs	r2, #3
 800f7de:	4252      	negs	r2, r2
 800f7e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	699b      	ldr	r3, [r3, #24]
 800f7ee:	2203      	movs	r2, #3
 800f7f0:	4013      	ands	r3, r2
 800f7f2:	d004      	beq.n	800f7fe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	0018      	movs	r0, r3
 800f7f8:	f000 f9c0 	bl	800fb7c <HAL_TIM_IC_CaptureCallback>
 800f7fc:	e007      	b.n	800f80e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	0018      	movs	r0, r3
 800f802:	f000 f9b3 	bl	800fb6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	0018      	movs	r0, r3
 800f80a:	f000 f9bf 	bl	800fb8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	2204      	movs	r2, #4
 800f818:	4013      	ands	r3, r2
 800f81a:	d022      	beq.n	800f862 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2204      	movs	r2, #4
 800f820:	4013      	ands	r3, r2
 800f822:	d01e      	beq.n	800f862 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2205      	movs	r2, #5
 800f82a:	4252      	negs	r2, r2
 800f82c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2202      	movs	r2, #2
 800f832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	699a      	ldr	r2, [r3, #24]
 800f83a:	23c0      	movs	r3, #192	; 0xc0
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	4013      	ands	r3, r2
 800f840:	d004      	beq.n	800f84c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	0018      	movs	r0, r3
 800f846:	f000 f999 	bl	800fb7c <HAL_TIM_IC_CaptureCallback>
 800f84a:	e007      	b.n	800f85c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	0018      	movs	r0, r3
 800f850:	f000 f98c 	bl	800fb6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	0018      	movs	r0, r3
 800f858:	f000 f998 	bl	800fb8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	2208      	movs	r2, #8
 800f866:	4013      	ands	r3, r2
 800f868:	d021      	beq.n	800f8ae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2208      	movs	r2, #8
 800f86e:	4013      	ands	r3, r2
 800f870:	d01d      	beq.n	800f8ae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2209      	movs	r2, #9
 800f878:	4252      	negs	r2, r2
 800f87a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2204      	movs	r2, #4
 800f880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	69db      	ldr	r3, [r3, #28]
 800f888:	2203      	movs	r2, #3
 800f88a:	4013      	ands	r3, r2
 800f88c:	d004      	beq.n	800f898 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	0018      	movs	r0, r3
 800f892:	f000 f973 	bl	800fb7c <HAL_TIM_IC_CaptureCallback>
 800f896:	e007      	b.n	800f8a8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	0018      	movs	r0, r3
 800f89c:	f000 f966 	bl	800fb6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	0018      	movs	r0, r3
 800f8a4:	f000 f972 	bl	800fb8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	2210      	movs	r2, #16
 800f8b2:	4013      	ands	r3, r2
 800f8b4:	d022      	beq.n	800f8fc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2210      	movs	r2, #16
 800f8ba:	4013      	ands	r3, r2
 800f8bc:	d01e      	beq.n	800f8fc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	2211      	movs	r2, #17
 800f8c4:	4252      	negs	r2, r2
 800f8c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2208      	movs	r2, #8
 800f8cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	69da      	ldr	r2, [r3, #28]
 800f8d4:	23c0      	movs	r3, #192	; 0xc0
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	4013      	ands	r3, r2
 800f8da:	d004      	beq.n	800f8e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	0018      	movs	r0, r3
 800f8e0:	f000 f94c 	bl	800fb7c <HAL_TIM_IC_CaptureCallback>
 800f8e4:	e007      	b.n	800f8f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	0018      	movs	r0, r3
 800f8ea:	f000 f93f 	bl	800fb6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	0018      	movs	r0, r3
 800f8f2:	f000 f94b 	bl	800fb8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	2201      	movs	r2, #1
 800f900:	4013      	ands	r3, r2
 800f902:	d00c      	beq.n	800f91e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2201      	movs	r2, #1
 800f908:	4013      	ands	r3, r2
 800f90a:	d008      	beq.n	800f91e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2202      	movs	r2, #2
 800f912:	4252      	negs	r2, r2
 800f914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	0018      	movs	r0, r3
 800f91a:	f7f9 f937 	bl	8008b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	2280      	movs	r2, #128	; 0x80
 800f922:	4013      	ands	r3, r2
 800f924:	d104      	bne.n	800f930 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f926:	68ba      	ldr	r2, [r7, #8]
 800f928:	2380      	movs	r3, #128	; 0x80
 800f92a:	019b      	lsls	r3, r3, #6
 800f92c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f92e:	d00b      	beq.n	800f948 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2280      	movs	r2, #128	; 0x80
 800f934:	4013      	ands	r3, r2
 800f936:	d007      	beq.n	800f948 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a1e      	ldr	r2, [pc, #120]	; (800f9b8 <HAL_TIM_IRQHandler+0x208>)
 800f93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	0018      	movs	r0, r3
 800f944:	f000 fb08 	bl	800ff58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	2380      	movs	r3, #128	; 0x80
 800f94c:	005b      	lsls	r3, r3, #1
 800f94e:	4013      	ands	r3, r2
 800f950:	d00b      	beq.n	800f96a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2280      	movs	r2, #128	; 0x80
 800f956:	4013      	ands	r3, r2
 800f958:	d007      	beq.n	800f96a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4a17      	ldr	r2, [pc, #92]	; (800f9bc <HAL_TIM_IRQHandler+0x20c>)
 800f960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	0018      	movs	r0, r3
 800f966:	f000 faff 	bl	800ff68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	2240      	movs	r2, #64	; 0x40
 800f96e:	4013      	ands	r3, r2
 800f970:	d00c      	beq.n	800f98c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2240      	movs	r2, #64	; 0x40
 800f976:	4013      	ands	r3, r2
 800f978:	d008      	beq.n	800f98c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2241      	movs	r2, #65	; 0x41
 800f980:	4252      	negs	r2, r2
 800f982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	0018      	movs	r0, r3
 800f988:	f000 f908 	bl	800fb9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	2220      	movs	r2, #32
 800f990:	4013      	ands	r3, r2
 800f992:	d00c      	beq.n	800f9ae <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2220      	movs	r2, #32
 800f998:	4013      	ands	r3, r2
 800f99a:	d008      	beq.n	800f9ae <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2221      	movs	r2, #33	; 0x21
 800f9a2:	4252      	negs	r2, r2
 800f9a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	0018      	movs	r0, r3
 800f9aa:	f000 facd 	bl	800ff48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f9ae:	46c0      	nop			; (mov r8, r8)
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	b004      	add	sp, #16
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	46c0      	nop			; (mov r8, r8)
 800f9b8:	ffffdf7f 	.word	0xffffdf7f
 800f9bc:	fffffeff 	.word	0xfffffeff

0800f9c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f9ca:	230f      	movs	r3, #15
 800f9cc:	18fb      	adds	r3, r7, r3
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	223c      	movs	r2, #60	; 0x3c
 800f9d6:	5c9b      	ldrb	r3, [r3, r2]
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d101      	bne.n	800f9e0 <HAL_TIM_ConfigClockSource+0x20>
 800f9dc:	2302      	movs	r3, #2
 800f9de:	e0bc      	b.n	800fb5a <HAL_TIM_ConfigClockSource+0x19a>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	223c      	movs	r2, #60	; 0x3c
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	223d      	movs	r2, #61	; 0x3d
 800f9ec:	2102      	movs	r1, #2
 800f9ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	689b      	ldr	r3, [r3, #8]
 800f9f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	4a5a      	ldr	r2, [pc, #360]	; (800fb64 <HAL_TIM_ConfigClockSource+0x1a4>)
 800f9fc:	4013      	ands	r3, r2
 800f9fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	4a59      	ldr	r2, [pc, #356]	; (800fb68 <HAL_TIM_ConfigClockSource+0x1a8>)
 800fa04:	4013      	ands	r3, r2
 800fa06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2280      	movs	r2, #128	; 0x80
 800fa16:	0192      	lsls	r2, r2, #6
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d040      	beq.n	800fa9e <HAL_TIM_ConfigClockSource+0xde>
 800fa1c:	2280      	movs	r2, #128	; 0x80
 800fa1e:	0192      	lsls	r2, r2, #6
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d900      	bls.n	800fa26 <HAL_TIM_ConfigClockSource+0x66>
 800fa24:	e088      	b.n	800fb38 <HAL_TIM_ConfigClockSource+0x178>
 800fa26:	2280      	movs	r2, #128	; 0x80
 800fa28:	0152      	lsls	r2, r2, #5
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d100      	bne.n	800fa30 <HAL_TIM_ConfigClockSource+0x70>
 800fa2e:	e088      	b.n	800fb42 <HAL_TIM_ConfigClockSource+0x182>
 800fa30:	2280      	movs	r2, #128	; 0x80
 800fa32:	0152      	lsls	r2, r2, #5
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d900      	bls.n	800fa3a <HAL_TIM_ConfigClockSource+0x7a>
 800fa38:	e07e      	b.n	800fb38 <HAL_TIM_ConfigClockSource+0x178>
 800fa3a:	2b70      	cmp	r3, #112	; 0x70
 800fa3c:	d018      	beq.n	800fa70 <HAL_TIM_ConfigClockSource+0xb0>
 800fa3e:	d900      	bls.n	800fa42 <HAL_TIM_ConfigClockSource+0x82>
 800fa40:	e07a      	b.n	800fb38 <HAL_TIM_ConfigClockSource+0x178>
 800fa42:	2b60      	cmp	r3, #96	; 0x60
 800fa44:	d04f      	beq.n	800fae6 <HAL_TIM_ConfigClockSource+0x126>
 800fa46:	d900      	bls.n	800fa4a <HAL_TIM_ConfigClockSource+0x8a>
 800fa48:	e076      	b.n	800fb38 <HAL_TIM_ConfigClockSource+0x178>
 800fa4a:	2b50      	cmp	r3, #80	; 0x50
 800fa4c:	d03b      	beq.n	800fac6 <HAL_TIM_ConfigClockSource+0x106>
 800fa4e:	d900      	bls.n	800fa52 <HAL_TIM_ConfigClockSource+0x92>
 800fa50:	e072      	b.n	800fb38 <HAL_TIM_ConfigClockSource+0x178>
 800fa52:	2b40      	cmp	r3, #64	; 0x40
 800fa54:	d057      	beq.n	800fb06 <HAL_TIM_ConfigClockSource+0x146>
 800fa56:	d900      	bls.n	800fa5a <HAL_TIM_ConfigClockSource+0x9a>
 800fa58:	e06e      	b.n	800fb38 <HAL_TIM_ConfigClockSource+0x178>
 800fa5a:	2b30      	cmp	r3, #48	; 0x30
 800fa5c:	d063      	beq.n	800fb26 <HAL_TIM_ConfigClockSource+0x166>
 800fa5e:	d86b      	bhi.n	800fb38 <HAL_TIM_ConfigClockSource+0x178>
 800fa60:	2b20      	cmp	r3, #32
 800fa62:	d060      	beq.n	800fb26 <HAL_TIM_ConfigClockSource+0x166>
 800fa64:	d868      	bhi.n	800fb38 <HAL_TIM_ConfigClockSource+0x178>
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d05d      	beq.n	800fb26 <HAL_TIM_ConfigClockSource+0x166>
 800fa6a:	2b10      	cmp	r3, #16
 800fa6c:	d05b      	beq.n	800fb26 <HAL_TIM_ConfigClockSource+0x166>
 800fa6e:	e063      	b.n	800fb38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fa80:	f000 f9a8 	bl	800fdd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	689b      	ldr	r3, [r3, #8]
 800fa8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	2277      	movs	r2, #119	; 0x77
 800fa90:	4313      	orrs	r3, r2
 800fa92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	609a      	str	r2, [r3, #8]
      break;
 800fa9c:	e052      	b.n	800fb44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800faae:	f000 f991 	bl	800fdd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	689a      	ldr	r2, [r3, #8]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2180      	movs	r1, #128	; 0x80
 800fabe:	01c9      	lsls	r1, r1, #7
 800fac0:	430a      	orrs	r2, r1
 800fac2:	609a      	str	r2, [r3, #8]
      break;
 800fac4:	e03e      	b.n	800fb44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fad2:	001a      	movs	r2, r3
 800fad4:	f000 f902 	bl	800fcdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2150      	movs	r1, #80	; 0x50
 800fade:	0018      	movs	r0, r3
 800fae0:	f000 f95c 	bl	800fd9c <TIM_ITRx_SetConfig>
      break;
 800fae4:	e02e      	b.n	800fb44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800faf2:	001a      	movs	r2, r3
 800faf4:	f000 f920 	bl	800fd38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2160      	movs	r1, #96	; 0x60
 800fafe:	0018      	movs	r0, r3
 800fb00:	f000 f94c 	bl	800fd9c <TIM_ITRx_SetConfig>
      break;
 800fb04:	e01e      	b.n	800fb44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb12:	001a      	movs	r2, r3
 800fb14:	f000 f8e2 	bl	800fcdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	2140      	movs	r1, #64	; 0x40
 800fb1e:	0018      	movs	r0, r3
 800fb20:	f000 f93c 	bl	800fd9c <TIM_ITRx_SetConfig>
      break;
 800fb24:	e00e      	b.n	800fb44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	0019      	movs	r1, r3
 800fb30:	0010      	movs	r0, r2
 800fb32:	f000 f933 	bl	800fd9c <TIM_ITRx_SetConfig>
      break;
 800fb36:	e005      	b.n	800fb44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800fb38:	230f      	movs	r3, #15
 800fb3a:	18fb      	adds	r3, r7, r3
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	701a      	strb	r2, [r3, #0]
      break;
 800fb40:	e000      	b.n	800fb44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800fb42:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	223d      	movs	r2, #61	; 0x3d
 800fb48:	2101      	movs	r1, #1
 800fb4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	223c      	movs	r2, #60	; 0x3c
 800fb50:	2100      	movs	r1, #0
 800fb52:	5499      	strb	r1, [r3, r2]

  return status;
 800fb54:	230f      	movs	r3, #15
 800fb56:	18fb      	adds	r3, r7, r3
 800fb58:	781b      	ldrb	r3, [r3, #0]
}
 800fb5a:	0018      	movs	r0, r3
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	b004      	add	sp, #16
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	46c0      	nop			; (mov r8, r8)
 800fb64:	ffceff88 	.word	0xffceff88
 800fb68:	ffff00ff 	.word	0xffff00ff

0800fb6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fb74:	46c0      	nop			; (mov r8, r8)
 800fb76:	46bd      	mov	sp, r7
 800fb78:	b002      	add	sp, #8
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fb84:	46c0      	nop			; (mov r8, r8)
 800fb86:	46bd      	mov	sp, r7
 800fb88:	b002      	add	sp, #8
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fb94:	46c0      	nop			; (mov r8, r8)
 800fb96:	46bd      	mov	sp, r7
 800fb98:	b002      	add	sp, #8
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fba4:	46c0      	nop			; (mov r8, r8)
 800fba6:	46bd      	mov	sp, r7
 800fba8:	b002      	add	sp, #8
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b084      	sub	sp, #16
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	4a3f      	ldr	r2, [pc, #252]	; (800fcbc <TIM_Base_SetConfig+0x110>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d00c      	beq.n	800fbde <TIM_Base_SetConfig+0x32>
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	2380      	movs	r3, #128	; 0x80
 800fbc8:	05db      	lsls	r3, r3, #23
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d007      	beq.n	800fbde <TIM_Base_SetConfig+0x32>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4a3b      	ldr	r2, [pc, #236]	; (800fcc0 <TIM_Base_SetConfig+0x114>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d003      	beq.n	800fbde <TIM_Base_SetConfig+0x32>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4a3a      	ldr	r2, [pc, #232]	; (800fcc4 <TIM_Base_SetConfig+0x118>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d108      	bne.n	800fbf0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2270      	movs	r2, #112	; 0x70
 800fbe2:	4393      	bics	r3, r2
 800fbe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	68fa      	ldr	r2, [r7, #12]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4a32      	ldr	r2, [pc, #200]	; (800fcbc <TIM_Base_SetConfig+0x110>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d01c      	beq.n	800fc32 <TIM_Base_SetConfig+0x86>
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	2380      	movs	r3, #128	; 0x80
 800fbfc:	05db      	lsls	r3, r3, #23
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d017      	beq.n	800fc32 <TIM_Base_SetConfig+0x86>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4a2e      	ldr	r2, [pc, #184]	; (800fcc0 <TIM_Base_SetConfig+0x114>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d013      	beq.n	800fc32 <TIM_Base_SetConfig+0x86>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4a2d      	ldr	r2, [pc, #180]	; (800fcc4 <TIM_Base_SetConfig+0x118>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d00f      	beq.n	800fc32 <TIM_Base_SetConfig+0x86>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4a2c      	ldr	r2, [pc, #176]	; (800fcc8 <TIM_Base_SetConfig+0x11c>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d00b      	beq.n	800fc32 <TIM_Base_SetConfig+0x86>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4a2b      	ldr	r2, [pc, #172]	; (800fccc <TIM_Base_SetConfig+0x120>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d007      	beq.n	800fc32 <TIM_Base_SetConfig+0x86>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4a2a      	ldr	r2, [pc, #168]	; (800fcd0 <TIM_Base_SetConfig+0x124>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d003      	beq.n	800fc32 <TIM_Base_SetConfig+0x86>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4a29      	ldr	r2, [pc, #164]	; (800fcd4 <TIM_Base_SetConfig+0x128>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d108      	bne.n	800fc44 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	4a28      	ldr	r2, [pc, #160]	; (800fcd8 <TIM_Base_SetConfig+0x12c>)
 800fc36:	4013      	ands	r3, r2
 800fc38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	4313      	orrs	r3, r2
 800fc42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2280      	movs	r2, #128	; 0x80
 800fc48:	4393      	bics	r3, r2
 800fc4a:	001a      	movs	r2, r3
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	695b      	ldr	r3, [r3, #20]
 800fc50:	4313      	orrs	r3, r2
 800fc52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	689a      	ldr	r2, [r3, #8]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4a13      	ldr	r2, [pc, #76]	; (800fcbc <TIM_Base_SetConfig+0x110>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d00b      	beq.n	800fc8a <TIM_Base_SetConfig+0xde>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4a15      	ldr	r2, [pc, #84]	; (800fccc <TIM_Base_SetConfig+0x120>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d007      	beq.n	800fc8a <TIM_Base_SetConfig+0xde>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4a14      	ldr	r2, [pc, #80]	; (800fcd0 <TIM_Base_SetConfig+0x124>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d003      	beq.n	800fc8a <TIM_Base_SetConfig+0xde>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4a13      	ldr	r2, [pc, #76]	; (800fcd4 <TIM_Base_SetConfig+0x128>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d103      	bne.n	800fc92 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	691a      	ldr	r2, [r3, #16]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2201      	movs	r2, #1
 800fc96:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	691b      	ldr	r3, [r3, #16]
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	4013      	ands	r3, r2
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d106      	bne.n	800fcb2 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	2201      	movs	r2, #1
 800fcaa:	4393      	bics	r3, r2
 800fcac:	001a      	movs	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	611a      	str	r2, [r3, #16]
  }
}
 800fcb2:	46c0      	nop			; (mov r8, r8)
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	b004      	add	sp, #16
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	46c0      	nop			; (mov r8, r8)
 800fcbc:	40012c00 	.word	0x40012c00
 800fcc0:	40000400 	.word	0x40000400
 800fcc4:	40000800 	.word	0x40000800
 800fcc8:	40002000 	.word	0x40002000
 800fccc:	40014000 	.word	0x40014000
 800fcd0:	40014400 	.word	0x40014400
 800fcd4:	40014800 	.word	0x40014800
 800fcd8:	fffffcff 	.word	0xfffffcff

0800fcdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b086      	sub	sp, #24
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6a1b      	ldr	r3, [r3, #32]
 800fcec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6a1b      	ldr	r3, [r3, #32]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	4393      	bics	r3, r2
 800fcf6:	001a      	movs	r2, r3
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	699b      	ldr	r3, [r3, #24]
 800fd00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	22f0      	movs	r2, #240	; 0xf0
 800fd06:	4393      	bics	r3, r2
 800fd08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	011b      	lsls	r3, r3, #4
 800fd0e:	693a      	ldr	r2, [r7, #16]
 800fd10:	4313      	orrs	r3, r2
 800fd12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	220a      	movs	r2, #10
 800fd18:	4393      	bics	r3, r2
 800fd1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd1c:	697a      	ldr	r2, [r7, #20]
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	4313      	orrs	r3, r2
 800fd22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	693a      	ldr	r2, [r7, #16]
 800fd28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	697a      	ldr	r2, [r7, #20]
 800fd2e:	621a      	str	r2, [r3, #32]
}
 800fd30:	46c0      	nop			; (mov r8, r8)
 800fd32:	46bd      	mov	sp, r7
 800fd34:	b006      	add	sp, #24
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	60b9      	str	r1, [r7, #8]
 800fd42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6a1b      	ldr	r3, [r3, #32]
 800fd48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	6a1b      	ldr	r3, [r3, #32]
 800fd4e:	2210      	movs	r2, #16
 800fd50:	4393      	bics	r3, r2
 800fd52:	001a      	movs	r2, r3
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	699b      	ldr	r3, [r3, #24]
 800fd5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	4a0d      	ldr	r2, [pc, #52]	; (800fd98 <TIM_TI2_ConfigInputStage+0x60>)
 800fd62:	4013      	ands	r3, r2
 800fd64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	031b      	lsls	r3, r3, #12
 800fd6a:	693a      	ldr	r2, [r7, #16]
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	22a0      	movs	r2, #160	; 0xa0
 800fd74:	4393      	bics	r3, r2
 800fd76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	011b      	lsls	r3, r3, #4
 800fd7c:	697a      	ldr	r2, [r7, #20]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	693a      	ldr	r2, [r7, #16]
 800fd86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	621a      	str	r2, [r3, #32]
}
 800fd8e:	46c0      	nop			; (mov r8, r8)
 800fd90:	46bd      	mov	sp, r7
 800fd92:	b006      	add	sp, #24
 800fd94:	bd80      	pop	{r7, pc}
 800fd96:	46c0      	nop			; (mov r8, r8)
 800fd98:	ffff0fff 	.word	0xffff0fff

0800fd9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	4a08      	ldr	r2, [pc, #32]	; (800fdd0 <TIM_ITRx_SetConfig+0x34>)
 800fdb0:	4013      	ands	r3, r2
 800fdb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fdb4:	683a      	ldr	r2, [r7, #0]
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	4313      	orrs	r3, r2
 800fdba:	2207      	movs	r2, #7
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	609a      	str	r2, [r3, #8]
}
 800fdc6:	46c0      	nop			; (mov r8, r8)
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	b004      	add	sp, #16
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	46c0      	nop			; (mov r8, r8)
 800fdd0:	ffcfff8f 	.word	0xffcfff8f

0800fdd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b086      	sub	sp, #24
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
 800fde0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	4a09      	ldr	r2, [pc, #36]	; (800fe10 <TIM_ETR_SetConfig+0x3c>)
 800fdec:	4013      	ands	r3, r2
 800fdee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	021a      	lsls	r2, r3, #8
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	431a      	orrs	r2, r3
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	697a      	ldr	r2, [r7, #20]
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	697a      	ldr	r2, [r7, #20]
 800fe06:	609a      	str	r2, [r3, #8]
}
 800fe08:	46c0      	nop			; (mov r8, r8)
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	b006      	add	sp, #24
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	ffff00ff 	.word	0xffff00ff

0800fe14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b086      	sub	sp, #24
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	221f      	movs	r2, #31
 800fe24:	4013      	ands	r3, r2
 800fe26:	2201      	movs	r2, #1
 800fe28:	409a      	lsls	r2, r3
 800fe2a:	0013      	movs	r3, r2
 800fe2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6a1b      	ldr	r3, [r3, #32]
 800fe32:	697a      	ldr	r2, [r7, #20]
 800fe34:	43d2      	mvns	r2, r2
 800fe36:	401a      	ands	r2, r3
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6a1a      	ldr	r2, [r3, #32]
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	211f      	movs	r1, #31
 800fe44:	400b      	ands	r3, r1
 800fe46:	6879      	ldr	r1, [r7, #4]
 800fe48:	4099      	lsls	r1, r3
 800fe4a:	000b      	movs	r3, r1
 800fe4c:	431a      	orrs	r2, r3
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	621a      	str	r2, [r3, #32]
}
 800fe52:	46c0      	nop			; (mov r8, r8)
 800fe54:	46bd      	mov	sp, r7
 800fe56:	b006      	add	sp, #24
 800fe58:	bd80      	pop	{r7, pc}
	...

0800fe5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	223c      	movs	r2, #60	; 0x3c
 800fe6a:	5c9b      	ldrb	r3, [r3, r2]
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d101      	bne.n	800fe74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe70:	2302      	movs	r3, #2
 800fe72:	e05a      	b.n	800ff2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	223c      	movs	r2, #60	; 0x3c
 800fe78:	2101      	movs	r1, #1
 800fe7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	223d      	movs	r2, #61	; 0x3d
 800fe80:	2102      	movs	r1, #2
 800fe82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a26      	ldr	r2, [pc, #152]	; (800ff34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d108      	bne.n	800feb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	4a25      	ldr	r2, [pc, #148]	; (800ff38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fea2:	4013      	ands	r3, r2
 800fea4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	4313      	orrs	r3, r2
 800feae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2270      	movs	r2, #112	; 0x70
 800feb4:	4393      	bics	r3, r2
 800feb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	68fa      	ldr	r2, [r7, #12]
 800febe:	4313      	orrs	r3, r2
 800fec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	68fa      	ldr	r2, [r7, #12]
 800fec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a19      	ldr	r2, [pc, #100]	; (800ff34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d014      	beq.n	800fefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	2380      	movs	r3, #128	; 0x80
 800feda:	05db      	lsls	r3, r3, #23
 800fedc:	429a      	cmp	r2, r3
 800fede:	d00e      	beq.n	800fefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4a15      	ldr	r2, [pc, #84]	; (800ff3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d009      	beq.n	800fefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4a14      	ldr	r2, [pc, #80]	; (800ff40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d004      	beq.n	800fefe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4a12      	ldr	r2, [pc, #72]	; (800ff44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d10c      	bne.n	800ff18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	2280      	movs	r2, #128	; 0x80
 800ff02:	4393      	bics	r3, r2
 800ff04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	689b      	ldr	r3, [r3, #8]
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	68ba      	ldr	r2, [r7, #8]
 800ff16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	223d      	movs	r2, #61	; 0x3d
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	223c      	movs	r2, #60	; 0x3c
 800ff24:	2100      	movs	r1, #0
 800ff26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ff28:	2300      	movs	r3, #0
}
 800ff2a:	0018      	movs	r0, r3
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	b004      	add	sp, #16
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	46c0      	nop			; (mov r8, r8)
 800ff34:	40012c00 	.word	0x40012c00
 800ff38:	ff0fffff 	.word	0xff0fffff
 800ff3c:	40000400 	.word	0x40000400
 800ff40:	40000800 	.word	0x40000800
 800ff44:	40014000 	.word	0x40014000

0800ff48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff50:	46c0      	nop			; (mov r8, r8)
 800ff52:	46bd      	mov	sp, r7
 800ff54:	b002      	add	sp, #8
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff60:	46c0      	nop			; (mov r8, r8)
 800ff62:	46bd      	mov	sp, r7
 800ff64:	b002      	add	sp, #8
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff70:	46c0      	nop			; (mov r8, r8)
 800ff72:	46bd      	mov	sp, r7
 800ff74:	b002      	add	sp, #8
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <LL_DMA_ConfigTransfer>:
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800ff88:	4a0c      	ldr	r2, [pc, #48]	; (800ffbc <LL_DMA_ConfigTransfer+0x44>)
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	18d3      	adds	r3, r2, r3
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	001a      	movs	r2, r3
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	18d3      	adds	r3, r2, r3
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4a09      	ldr	r2, [pc, #36]	; (800ffc0 <LL_DMA_ConfigTransfer+0x48>)
 800ff9a:	4013      	ands	r3, r2
 800ff9c:	0019      	movs	r1, r3
 800ff9e:	4a07      	ldr	r2, [pc, #28]	; (800ffbc <LL_DMA_ConfigTransfer+0x44>)
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	18d3      	adds	r3, r2, r3
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	001a      	movs	r2, r3
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	18d3      	adds	r3, r2, r3
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	430a      	orrs	r2, r1
 800ffb0:	601a      	str	r2, [r3, #0]
}
 800ffb2:	46c0      	nop			; (mov r8, r8)
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	b006      	add	sp, #24
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	46c0      	nop			; (mov r8, r8)
 800ffbc:	08025024 	.word	0x08025024
 800ffc0:	ffff800f 	.word	0xffff800f

0800ffc4 <LL_DMA_SetDataLength>:
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800ffd4:	4a0b      	ldr	r2, [pc, #44]	; (8010004 <LL_DMA_SetDataLength+0x40>)
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	18d3      	adds	r3, r2, r3
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	001a      	movs	r2, r3
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	18d3      	adds	r3, r2, r3
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	0c1b      	lsrs	r3, r3, #16
 800ffe6:	0419      	lsls	r1, r3, #16
 800ffe8:	4a06      	ldr	r2, [pc, #24]	; (8010004 <LL_DMA_SetDataLength+0x40>)
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	18d3      	adds	r3, r2, r3
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	001a      	movs	r2, r3
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	18d3      	adds	r3, r2, r3
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	430a      	orrs	r2, r1
 800fffa:	605a      	str	r2, [r3, #4]
}
 800fffc:	46c0      	nop			; (mov r8, r8)
 800fffe:	46bd      	mov	sp, r7
 8010000:	b006      	add	sp, #24
 8010002:	bd80      	pop	{r7, pc}
 8010004:	08025024 	.word	0x08025024

08010008 <LL_DMA_SetMemoryAddress>:
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b086      	sub	sp, #24
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8010018:	4a06      	ldr	r2, [pc, #24]	; (8010034 <LL_DMA_SetMemoryAddress+0x2c>)
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	18d3      	adds	r3, r2, r3
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	001a      	movs	r2, r3
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	18d3      	adds	r3, r2, r3
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	60da      	str	r2, [r3, #12]
}
 801002a:	46c0      	nop			; (mov r8, r8)
 801002c:	46bd      	mov	sp, r7
 801002e:	b006      	add	sp, #24
 8010030:	bd80      	pop	{r7, pc}
 8010032:	46c0      	nop			; (mov r8, r8)
 8010034:	08025024 	.word	0x08025024

08010038 <LL_DMA_SetPeriphAddress>:
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8010048:	4a06      	ldr	r2, [pc, #24]	; (8010064 <LL_DMA_SetPeriphAddress+0x2c>)
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	18d3      	adds	r3, r2, r3
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	001a      	movs	r2, r3
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	18d3      	adds	r3, r2, r3
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	609a      	str	r2, [r3, #8]
}
 801005a:	46c0      	nop			; (mov r8, r8)
 801005c:	46bd      	mov	sp, r7
 801005e:	b006      	add	sp, #24
 8010060:	bd80      	pop	{r7, pc}
 8010062:	46c0      	nop			; (mov r8, r8)
 8010064:	08025024 	.word	0x08025024

08010068 <LL_DMA_SetPeriphRequest>:
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b086      	sub	sp, #24
 801006c:	af00      	add	r7, sp, #0
 801006e:	60f8      	str	r0, [r7, #12]
 8010070:	60b9      	str	r1, [r7, #8]
 8010072:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	0a9b      	lsrs	r3, r3, #10
 8010078:	4a0f      	ldr	r2, [pc, #60]	; (80100b8 <LL_DMA_SetPeriphRequest+0x50>)
 801007a:	405a      	eors	r2, r3
 801007c:	0013      	movs	r3, r2
 801007e:	00db      	lsls	r3, r3, #3
 8010080:	1a9b      	subs	r3, r3, r2
 8010082:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8010084:	68ba      	ldr	r2, [r7, #8]
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	18d3      	adds	r3, r2, r3
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4a0b      	ldr	r2, [pc, #44]	; (80100bc <LL_DMA_SetPeriphRequest+0x54>)
 801008e:	4694      	mov	ip, r2
 8010090:	4463      	add	r3, ip
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	227f      	movs	r2, #127	; 0x7f
 8010096:	4393      	bics	r3, r2
 8010098:	0019      	movs	r1, r3
 801009a:	68ba      	ldr	r2, [r7, #8]
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	18d3      	adds	r3, r2, r3
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	4a06      	ldr	r2, [pc, #24]	; (80100bc <LL_DMA_SetPeriphRequest+0x54>)
 80100a4:	4694      	mov	ip, r2
 80100a6:	4463      	add	r3, ip
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	430a      	orrs	r2, r1
 80100ac:	601a      	str	r2, [r3, #0]
}
 80100ae:	46c0      	nop			; (mov r8, r8)
 80100b0:	46bd      	mov	sp, r7
 80100b2:	b006      	add	sp, #24
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	46c0      	nop			; (mov r8, r8)
 80100b8:	00100080 	.word	0x00100080
 80100bc:	40020800 	.word	0x40020800

080100c0 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80100d4:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 80100da:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80100e0:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80100e6:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80100ec:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80100f2:	431a      	orrs	r2, r3
 80100f4:	68b9      	ldr	r1, [r7, #8]
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	0018      	movs	r0, r3
 80100fa:	f7ff ff3d 	bl	800ff78 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	68b9      	ldr	r1, [r7, #8]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	0018      	movs	r0, r3
 8010108:	f7ff ff7e 	bl	8010008 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	68b9      	ldr	r1, [r7, #8]
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	0018      	movs	r0, r3
 8010116:	f7ff ff8f 	bl	8010038 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6a1a      	ldr	r2, [r3, #32]
 801011e:	68b9      	ldr	r1, [r7, #8]
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	0018      	movs	r0, r3
 8010124:	f7ff ff4e 	bl	800ffc4 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801012c:	68b9      	ldr	r1, [r7, #8]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	0018      	movs	r0, r3
 8010132:	f7ff ff99 	bl	8010068 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 8010136:	2300      	movs	r3, #0
}
 8010138:	0018      	movs	r0, r3
 801013a:	46bd      	mov	sp, r7
 801013c:	b004      	add	sp, #16
 801013e:	bd80      	pop	{r7, pc}

08010140 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2200      	movs	r2, #0
 801014c:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2200      	movs	r2, #0
 8010152:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2200      	movs	r2, #0
 8010164:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2200      	movs	r2, #0
 801016a:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2200      	movs	r2, #0
 8010170:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2200      	movs	r2, #0
 8010176:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2200      	movs	r2, #0
 8010182:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	629a      	str	r2, [r3, #40]	; 0x28
}
 801018a:	46c0      	nop			; (mov r8, r8)
 801018c:	46bd      	mov	sp, r7
 801018e:	b002      	add	sp, #8
 8010190:	bd80      	pop	{r7, pc}

08010192 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	60f8      	str	r0, [r7, #12]
 801019a:	60b9      	str	r1, [r7, #8]
 801019c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6819      	ldr	r1, [r3, #0]
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	435b      	muls	r3, r3
 80101a6:	001a      	movs	r2, r3
 80101a8:	0013      	movs	r3, r2
 80101aa:	005b      	lsls	r3, r3, #1
 80101ac:	189b      	adds	r3, r3, r2
 80101ae:	43db      	mvns	r3, r3
 80101b0:	400b      	ands	r3, r1
 80101b2:	001a      	movs	r2, r3
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	435b      	muls	r3, r3
 80101b8:	6879      	ldr	r1, [r7, #4]
 80101ba:	434b      	muls	r3, r1
 80101bc:	431a      	orrs	r2, r3
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	601a      	str	r2, [r3, #0]
}
 80101c2:	46c0      	nop			; (mov r8, r8)
 80101c4:	46bd      	mov	sp, r7
 80101c6:	b004      	add	sp, #16
 80101c8:	bd80      	pop	{r7, pc}

080101ca <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b084      	sub	sp, #16
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	60f8      	str	r0, [r7, #12]
 80101d2:	60b9      	str	r1, [r7, #8]
 80101d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	68ba      	ldr	r2, [r7, #8]
 80101dc:	43d2      	mvns	r2, r2
 80101de:	401a      	ands	r2, r3
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	6879      	ldr	r1, [r7, #4]
 80101e4:	434b      	muls	r3, r1
 80101e6:	431a      	orrs	r2, r3
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	605a      	str	r2, [r3, #4]
}
 80101ec:	46c0      	nop			; (mov r8, r8)
 80101ee:	46bd      	mov	sp, r7
 80101f0:	b004      	add	sp, #16
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	60b9      	str	r1, [r7, #8]
 80101fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	6899      	ldr	r1, [r3, #8]
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	435b      	muls	r3, r3
 8010208:	001a      	movs	r2, r3
 801020a:	0013      	movs	r3, r2
 801020c:	005b      	lsls	r3, r3, #1
 801020e:	189b      	adds	r3, r3, r2
 8010210:	43db      	mvns	r3, r3
 8010212:	400b      	ands	r3, r1
 8010214:	001a      	movs	r2, r3
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	435b      	muls	r3, r3
 801021a:	6879      	ldr	r1, [r7, #4]
 801021c:	434b      	muls	r3, r1
 801021e:	431a      	orrs	r2, r3
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	609a      	str	r2, [r3, #8]
}
 8010224:	46c0      	nop			; (mov r8, r8)
 8010226:	46bd      	mov	sp, r7
 8010228:	b004      	add	sp, #16
 801022a:	bd80      	pop	{r7, pc}

0801022c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	60b9      	str	r1, [r7, #8]
 8010236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	68d9      	ldr	r1, [r3, #12]
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	435b      	muls	r3, r3
 8010240:	001a      	movs	r2, r3
 8010242:	0013      	movs	r3, r2
 8010244:	005b      	lsls	r3, r3, #1
 8010246:	189b      	adds	r3, r3, r2
 8010248:	43db      	mvns	r3, r3
 801024a:	400b      	ands	r3, r1
 801024c:	001a      	movs	r2, r3
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	435b      	muls	r3, r3
 8010252:	6879      	ldr	r1, [r7, #4]
 8010254:	434b      	muls	r3, r1
 8010256:	431a      	orrs	r2, r3
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	60da      	str	r2, [r3, #12]
}
 801025c:	46c0      	nop			; (mov r8, r8)
 801025e:	46bd      	mov	sp, r7
 8010260:	b004      	add	sp, #16
 8010262:	bd80      	pop	{r7, pc}

08010264 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6a19      	ldr	r1, [r3, #32]
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	435b      	muls	r3, r3
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	4353      	muls	r3, r2
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	435a      	muls	r2, r3
 8010280:	0013      	movs	r3, r2
 8010282:	011b      	lsls	r3, r3, #4
 8010284:	1a9b      	subs	r3, r3, r2
 8010286:	43db      	mvns	r3, r3
 8010288:	400b      	ands	r3, r1
 801028a:	001a      	movs	r2, r3
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	435b      	muls	r3, r3
 8010290:	68b9      	ldr	r1, [r7, #8]
 8010292:	434b      	muls	r3, r1
 8010294:	68b9      	ldr	r1, [r7, #8]
 8010296:	434b      	muls	r3, r1
 8010298:	6879      	ldr	r1, [r7, #4]
 801029a:	434b      	muls	r3, r1
 801029c:	431a      	orrs	r2, r3
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80102a2:	46c0      	nop			; (mov r8, r8)
 80102a4:	46bd      	mov	sp, r7
 80102a6:	b004      	add	sp, #16
 80102a8:	bd80      	pop	{r7, pc}

080102aa <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b084      	sub	sp, #16
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	60f8      	str	r0, [r7, #12]
 80102b2:	60b9      	str	r1, [r7, #8]
 80102b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	0a1b      	lsrs	r3, r3, #8
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	0a12      	lsrs	r2, r2, #8
 80102c2:	4353      	muls	r3, r2
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	0a12      	lsrs	r2, r2, #8
 80102c8:	4353      	muls	r3, r2
 80102ca:	68ba      	ldr	r2, [r7, #8]
 80102cc:	0a12      	lsrs	r2, r2, #8
 80102ce:	435a      	muls	r2, r3
 80102d0:	0013      	movs	r3, r2
 80102d2:	011b      	lsls	r3, r3, #4
 80102d4:	1a9b      	subs	r3, r3, r2
 80102d6:	43db      	mvns	r3, r3
 80102d8:	400b      	ands	r3, r1
 80102da:	001a      	movs	r2, r3
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	0a1b      	lsrs	r3, r3, #8
 80102e0:	68b9      	ldr	r1, [r7, #8]
 80102e2:	0a09      	lsrs	r1, r1, #8
 80102e4:	434b      	muls	r3, r1
 80102e6:	68b9      	ldr	r1, [r7, #8]
 80102e8:	0a09      	lsrs	r1, r1, #8
 80102ea:	434b      	muls	r3, r1
 80102ec:	68b9      	ldr	r1, [r7, #8]
 80102ee:	0a09      	lsrs	r1, r1, #8
 80102f0:	434b      	muls	r3, r1
 80102f2:	6879      	ldr	r1, [r7, #4]
 80102f4:	434b      	muls	r3, r1
 80102f6:	431a      	orrs	r2, r3
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80102fc:	46c0      	nop			; (mov r8, r8)
 80102fe:	46bd      	mov	sp, r7
 8010300:	b004      	add	sp, #16
 8010302:	bd80      	pop	{r7, pc}

08010304 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8010312:	e047      	b.n	80103a4 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2101      	movs	r1, #1
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	4091      	lsls	r1, r2
 801031e:	000a      	movs	r2, r1
 8010320:	4013      	ands	r3, r2
 8010322:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d039      	beq.n	801039e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	2b01      	cmp	r3, #1
 8010330:	d003      	beq.n	801033a <LL_GPIO_Init+0x36>
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	2b02      	cmp	r3, #2
 8010338:	d10d      	bne.n	8010356 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	689a      	ldr	r2, [r3, #8]
 801033e:	68b9      	ldr	r1, [r7, #8]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	0018      	movs	r0, r3
 8010344:	f7ff ff56 	bl	80101f4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	68da      	ldr	r2, [r3, #12]
 801034c:	68b9      	ldr	r1, [r7, #8]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	0018      	movs	r0, r3
 8010352:	f7ff ff3a 	bl	80101ca <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	691a      	ldr	r2, [r3, #16]
 801035a:	68b9      	ldr	r1, [r7, #8]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	0018      	movs	r0, r3
 8010360:	f7ff ff64 	bl	801022c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	2b02      	cmp	r3, #2
 801036a:	d111      	bne.n	8010390 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	2bff      	cmp	r3, #255	; 0xff
 8010370:	d807      	bhi.n	8010382 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	695a      	ldr	r2, [r3, #20]
 8010376:	68b9      	ldr	r1, [r7, #8]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	0018      	movs	r0, r3
 801037c:	f7ff ff72 	bl	8010264 <LL_GPIO_SetAFPin_0_7>
 8010380:	e006      	b.n	8010390 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	695a      	ldr	r2, [r3, #20]
 8010386:	68b9      	ldr	r1, [r7, #8]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	0018      	movs	r0, r3
 801038c:	f7ff ff8d 	bl	80102aa <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	685a      	ldr	r2, [r3, #4]
 8010394:	68b9      	ldr	r1, [r7, #8]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	0018      	movs	r0, r3
 801039a:	f7ff fefa 	bl	8010192 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	3301      	adds	r3, #1
 80103a2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	40da      	lsrs	r2, r3
 80103ac:	1e13      	subs	r3, r2, #0
 80103ae:	d1b1      	bne.n	8010314 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80103b0:	2300      	movs	r3, #0
}
 80103b2:	0018      	movs	r0, r3
 80103b4:	46bd      	mov	sp, r7
 80103b6:	b004      	add	sp, #16
 80103b8:	bd80      	pop	{r7, pc}

080103ba <LL_LPUART_IsEnabled>:
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b082      	sub	sp, #8
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2201      	movs	r2, #1
 80103c8:	4013      	ands	r3, r2
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d101      	bne.n	80103d2 <LL_LPUART_IsEnabled+0x18>
 80103ce:	2301      	movs	r3, #1
 80103d0:	e000      	b.n	80103d4 <LL_LPUART_IsEnabled+0x1a>
 80103d2:	2300      	movs	r3, #0
}
 80103d4:	0018      	movs	r0, r3
 80103d6:	46bd      	mov	sp, r7
 80103d8:	b002      	add	sp, #8
 80103da:	bd80      	pop	{r7, pc}

080103dc <LL_LPUART_SetPrescaler>:
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ea:	220f      	movs	r2, #15
 80103ec:	4393      	bics	r3, r2
 80103ee:	683a      	ldr	r2, [r7, #0]
 80103f0:	b292      	uxth	r2, r2
 80103f2:	431a      	orrs	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80103f8:	46c0      	nop			; (mov r8, r8)
 80103fa:	46bd      	mov	sp, r7
 80103fc:	b002      	add	sp, #8
 80103fe:	bd80      	pop	{r7, pc}

08010400 <LL_LPUART_SetStopBitsLength>:
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	4a05      	ldr	r2, [pc, #20]	; (8010424 <LL_LPUART_SetStopBitsLength+0x24>)
 8010410:	401a      	ands	r2, r3
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	431a      	orrs	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	605a      	str	r2, [r3, #4]
}
 801041a:	46c0      	nop			; (mov r8, r8)
 801041c:	46bd      	mov	sp, r7
 801041e:	b002      	add	sp, #8
 8010420:	bd80      	pop	{r7, pc}
 8010422:	46c0      	nop			; (mov r8, r8)
 8010424:	ffffcfff 	.word	0xffffcfff

08010428 <LL_LPUART_SetHWFlowCtrl>:
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	689b      	ldr	r3, [r3, #8]
 8010436:	4a05      	ldr	r2, [pc, #20]	; (801044c <LL_LPUART_SetHWFlowCtrl+0x24>)
 8010438:	401a      	ands	r2, r3
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	431a      	orrs	r2, r3
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	609a      	str	r2, [r3, #8]
}
 8010442:	46c0      	nop			; (mov r8, r8)
 8010444:	46bd      	mov	sp, r7
 8010446:	b002      	add	sp, #8
 8010448:	bd80      	pop	{r7, pc}
 801044a:	46c0      	nop			; (mov r8, r8)
 801044c:	fffffcff 	.word	0xfffffcff

08010450 <LL_LPUART_SetBaudRate>:
{
 8010450:	b5b0      	push	{r4, r5, r7, lr}
 8010452:	b08c      	sub	sp, #48	; 0x30
 8010454:	af00      	add	r7, sp, #0
 8010456:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010458:	62b9      	str	r1, [r7, #40]	; 0x28
 801045a:	627a      	str	r2, [r7, #36]	; 0x24
 801045c:	623b      	str	r3, [r7, #32]
  if (BaudRate != 0U)
 801045e:	6a3b      	ldr	r3, [r7, #32]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d030      	beq.n	80104c6 <LL_LPUART_SetBaudRate+0x76>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8010464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010466:	61bb      	str	r3, [r7, #24]
 8010468:	2300      	movs	r3, #0
 801046a:	61fb      	str	r3, [r7, #28]
 801046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046e:	b29b      	uxth	r3, r3
 8010470:	001a      	movs	r2, r3
 8010472:	4b17      	ldr	r3, [pc, #92]	; (80104d0 <LL_LPUART_SetBaudRate+0x80>)
 8010474:	0052      	lsls	r2, r2, #1
 8010476:	5ad3      	ldrh	r3, [r2, r3]
 8010478:	613b      	str	r3, [r7, #16]
 801047a:	2300      	movs	r3, #0
 801047c:	617b      	str	r3, [r7, #20]
 801047e:	693a      	ldr	r2, [r7, #16]
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	69b8      	ldr	r0, [r7, #24]
 8010484:	69f9      	ldr	r1, [r7, #28]
 8010486:	f7f6 f829 	bl	80064dc <__aeabi_uldivmod>
 801048a:	0002      	movs	r2, r0
 801048c:	000b      	movs	r3, r1
 801048e:	0e11      	lsrs	r1, r2, #24
 8010490:	021d      	lsls	r5, r3, #8
 8010492:	430d      	orrs	r5, r1
 8010494:	0214      	lsls	r4, r2, #8
 8010496:	6a3b      	ldr	r3, [r7, #32]
 8010498:	085b      	lsrs	r3, r3, #1
 801049a:	60bb      	str	r3, [r7, #8]
 801049c:	2300      	movs	r3, #0
 801049e:	60fb      	str	r3, [r7, #12]
 80104a0:	68b8      	ldr	r0, [r7, #8]
 80104a2:	68f9      	ldr	r1, [r7, #12]
 80104a4:	1900      	adds	r0, r0, r4
 80104a6:	4169      	adcs	r1, r5
 80104a8:	6a3b      	ldr	r3, [r7, #32]
 80104aa:	603b      	str	r3, [r7, #0]
 80104ac:	2300      	movs	r3, #0
 80104ae:	607b      	str	r3, [r7, #4]
 80104b0:	683a      	ldr	r2, [r7, #0]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f7f6 f812 	bl	80064dc <__aeabi_uldivmod>
 80104b8:	0002      	movs	r2, r0
 80104ba:	000b      	movs	r3, r1
 80104bc:	0013      	movs	r3, r2
 80104be:	031b      	lsls	r3, r3, #12
 80104c0:	0b1a      	lsrs	r2, r3, #12
 80104c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c4:	60da      	str	r2, [r3, #12]
}
 80104c6:	46c0      	nop			; (mov r8, r8)
 80104c8:	46bd      	mov	sp, r7
 80104ca:	b00c      	add	sp, #48	; 0x30
 80104cc:	bdb0      	pop	{r4, r5, r7, pc}
 80104ce:	46c0      	nop			; (mov r8, r8)
 80104d0:	0802502c 	.word	0x0802502c

080104d4 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80104de:	230f      	movs	r3, #15
 80104e0:	18fb      	adds	r3, r7, r3
 80104e2:	2201      	movs	r2, #1
 80104e4:	701a      	strb	r2, [r3, #0]
#if defined(LPUART2)
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80104e6:	2300      	movs	r3, #0
 80104e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	0018      	movs	r0, r3
 80104ee:	f7ff ff64 	bl	80103ba <LL_LPUART_IsEnabled>
 80104f2:	1e03      	subs	r3, r0, #0
 80104f4:	d14d      	bne.n	8010592 <LL_LPUART_Init+0xbe>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4a29      	ldr	r2, [pc, #164]	; (80105a0 <LL_LPUART_Init+0xcc>)
 80104fc:	401a      	ands	r2, r3
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	6899      	ldr	r1, [r3, #8]
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	691b      	ldr	r3, [r3, #16]
 8010506:	4319      	orrs	r1, r3
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	695b      	ldr	r3, [r3, #20]
 801050c:	430b      	orrs	r3, r1
 801050e:	431a      	orrs	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	68da      	ldr	r2, [r3, #12]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	0011      	movs	r1, r2
 801051c:	0018      	movs	r0, r3
 801051e:	f7ff ff6f 	bl	8010400 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	699a      	ldr	r2, [r3, #24]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	0011      	movs	r1, r2
 801052a:	0018      	movs	r0, r3
 801052c:	f7ff ff7c 	bl	8010428 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
#if defined(LPUART2)
    if (LPUARTx == LPUART1)
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	4a1c      	ldr	r2, [pc, #112]	; (80105a4 <LL_LPUART_Init+0xd0>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d107      	bne.n	8010548 <LL_LPUART_Init+0x74>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8010538:	23c0      	movs	r3, #192	; 0xc0
 801053a:	011b      	lsls	r3, r3, #4
 801053c:	0018      	movs	r0, r3
 801053e:	f000 f8bf 	bl	80106c0 <LL_RCC_GetLPUARTClockFreq>
 8010542:	0003      	movs	r3, r0
 8010544:	60bb      	str	r3, [r7, #8]
 8010546:	e00a      	b.n	801055e <LL_LPUART_Init+0x8a>
    }
    else if (LPUARTx == LPUART2)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	4a17      	ldr	r2, [pc, #92]	; (80105a8 <LL_LPUART_Init+0xd4>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d106      	bne.n	801055e <LL_LPUART_Init+0x8a>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART2_CLKSOURCE);
 8010550:	23c0      	movs	r3, #192	; 0xc0
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	0018      	movs	r0, r3
 8010556:	f000 f8b3 	bl	80106c0 <LL_RCC_GetLPUARTClockFreq>
 801055a:	0003      	movs	r3, r0
 801055c:	60bb      	str	r3, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00f      	beq.n	8010584 <LL_LPUART_Init+0xb0>
        && (LPUART_InitStruct->BaudRate != 0U))
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00b      	beq.n	8010584 <LL_LPUART_Init+0xb0>
    {
      status = SUCCESS;
 801056c:	230f      	movs	r3, #15
 801056e:	18fb      	adds	r3, r7, r3
 8010570:	2200      	movs	r2, #0
 8010572:	701a      	strb	r2, [r3, #0]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 801057c:	68b9      	ldr	r1, [r7, #8]
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7ff ff66 	bl	8010450 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	0011      	movs	r1, r2
 801058c:	0018      	movs	r0, r3
 801058e:	f7ff ff25 	bl	80103dc <LL_LPUART_SetPrescaler>
  }

  return (status);
 8010592:	230f      	movs	r3, #15
 8010594:	18fb      	adds	r3, r7, r3
 8010596:	781b      	ldrb	r3, [r3, #0]
}
 8010598:	0018      	movs	r0, r3
 801059a:	46bd      	mov	sp, r7
 801059c:	b004      	add	sp, #16
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	efffe9f3 	.word	0xefffe9f3
 80105a4:	40008000 	.word	0x40008000
 80105a8:	40008400 	.word	0x40008400

080105ac <LL_RCC_HSI_IsReady>:
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80105b0:	4b07      	ldr	r3, [pc, #28]	; (80105d0 <LL_RCC_HSI_IsReady+0x24>)
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	2380      	movs	r3, #128	; 0x80
 80105b6:	00db      	lsls	r3, r3, #3
 80105b8:	401a      	ands	r2, r3
 80105ba:	2380      	movs	r3, #128	; 0x80
 80105bc:	00db      	lsls	r3, r3, #3
 80105be:	429a      	cmp	r2, r3
 80105c0:	d101      	bne.n	80105c6 <LL_RCC_HSI_IsReady+0x1a>
 80105c2:	2301      	movs	r3, #1
 80105c4:	e000      	b.n	80105c8 <LL_RCC_HSI_IsReady+0x1c>
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	0018      	movs	r0, r3
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
 80105ce:	46c0      	nop			; (mov r8, r8)
 80105d0:	40021000 	.word	0x40021000

080105d4 <LL_RCC_LSE_IsReady>:
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80105d8:	4b05      	ldr	r3, [pc, #20]	; (80105f0 <LL_RCC_LSE_IsReady+0x1c>)
 80105da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105dc:	2202      	movs	r2, #2
 80105de:	4013      	ands	r3, r2
 80105e0:	2b02      	cmp	r3, #2
 80105e2:	d101      	bne.n	80105e8 <LL_RCC_LSE_IsReady+0x14>
 80105e4:	2301      	movs	r3, #1
 80105e6:	e000      	b.n	80105ea <LL_RCC_LSE_IsReady+0x16>
 80105e8:	2300      	movs	r3, #0
}
 80105ea:	0018      	movs	r0, r3
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	40021000 	.word	0x40021000

080105f4 <LL_RCC_GetSysClkSource>:
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80105f8:	4b03      	ldr	r3, [pc, #12]	; (8010608 <LL_RCC_GetSysClkSource+0x14>)
 80105fa:	689b      	ldr	r3, [r3, #8]
 80105fc:	2238      	movs	r2, #56	; 0x38
 80105fe:	4013      	ands	r3, r2
}
 8010600:	0018      	movs	r0, r3
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	46c0      	nop			; (mov r8, r8)
 8010608:	40021000 	.word	0x40021000

0801060c <LL_RCC_GetAHBPrescaler>:
{
 801060c:	b580      	push	{r7, lr}
 801060e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8010610:	4b03      	ldr	r3, [pc, #12]	; (8010620 <LL_RCC_GetAHBPrescaler+0x14>)
 8010612:	689a      	ldr	r2, [r3, #8]
 8010614:	23f0      	movs	r3, #240	; 0xf0
 8010616:	011b      	lsls	r3, r3, #4
 8010618:	4013      	ands	r3, r2
}
 801061a:	0018      	movs	r0, r3
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	40021000 	.word	0x40021000

08010624 <LL_RCC_GetAPB1Prescaler>:
{
 8010624:	b580      	push	{r7, lr}
 8010626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8010628:	4b03      	ldr	r3, [pc, #12]	; (8010638 <LL_RCC_GetAPB1Prescaler+0x14>)
 801062a:	689a      	ldr	r2, [r3, #8]
 801062c:	23e0      	movs	r3, #224	; 0xe0
 801062e:	01db      	lsls	r3, r3, #7
 8010630:	4013      	ands	r3, r2
}
 8010632:	0018      	movs	r0, r3
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	40021000 	.word	0x40021000

0801063c <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx) | (LPUARTx << 16U));
 8010644:	4b05      	ldr	r3, [pc, #20]	; (801065c <LL_RCC_GetLPUARTClockSource+0x20>)
 8010646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	401a      	ands	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	041b      	lsls	r3, r3, #16
 8010650:	4313      	orrs	r3, r2
}
 8010652:	0018      	movs	r0, r3
 8010654:	46bd      	mov	sp, r7
 8010656:	b002      	add	sp, #8
 8010658:	bd80      	pop	{r7, pc}
 801065a:	46c0      	nop			; (mov r8, r8)
 801065c:	40021000 	.word	0x40021000

08010660 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8010664:	4b03      	ldr	r3, [pc, #12]	; (8010674 <LL_RCC_PLL_GetN+0x14>)
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	0a1b      	lsrs	r3, r3, #8
 801066a:	227f      	movs	r2, #127	; 0x7f
 801066c:	4013      	ands	r3, r2
}
 801066e:	0018      	movs	r0, r3
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	40021000 	.word	0x40021000

08010678 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 801067c:	4b03      	ldr	r3, [pc, #12]	; (801068c <LL_RCC_PLL_GetR+0x14>)
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	0f5b      	lsrs	r3, r3, #29
 8010682:	075b      	lsls	r3, r3, #29
}
 8010684:	0018      	movs	r0, r3
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	46c0      	nop			; (mov r8, r8)
 801068c:	40021000 	.word	0x40021000

08010690 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8010694:	4b03      	ldr	r3, [pc, #12]	; (80106a4 <LL_RCC_PLL_GetMainSource+0x14>)
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	2203      	movs	r2, #3
 801069a:	4013      	ands	r3, r2
}
 801069c:	0018      	movs	r0, r3
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	46c0      	nop			; (mov r8, r8)
 80106a4:	40021000 	.word	0x40021000

080106a8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80106ac:	4b03      	ldr	r3, [pc, #12]	; (80106bc <LL_RCC_PLL_GetDivider+0x14>)
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	2270      	movs	r2, #112	; 0x70
 80106b2:	4013      	ands	r3, r2
}
 80106b4:	0018      	movs	r0, r3
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	46c0      	nop			; (mov r8, r8)
 80106bc:	40021000 	.word	0x40021000

080106c0 <LL_RCC_GetLPUARTClockFreq>:
  * @retval LPUART clock frequency (in Hz)
  *         @arg @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  * (*) feature not available on all devices
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80106c8:	2300      	movs	r3, #0
 80106ca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  if (LPUARTxSource == LL_RCC_LPUART1_CLKSOURCE)
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	23c0      	movs	r3, #192	; 0xc0
 80106d0:	011b      	lsls	r3, r3, #4
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d134      	bne.n	8010740 <LL_RCC_GetLPUARTClockFreq+0x80>
  {
    /* LPUART1CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	0018      	movs	r0, r3
 80106da:	f7ff ffaf 	bl	801063c <LL_RCC_GetLPUARTClockSource>
 80106de:	0003      	movs	r3, r0
 80106e0:	4a3a      	ldr	r2, [pc, #232]	; (80107cc <LL_RCC_GetLPUARTClockFreq+0x10c>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d016      	beq.n	8010714 <LL_RCC_GetLPUARTClockFreq+0x54>
 80106e6:	4a39      	ldr	r2, [pc, #228]	; (80107cc <LL_RCC_GetLPUARTClockFreq+0x10c>)
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d81c      	bhi.n	8010726 <LL_RCC_GetLPUARTClockFreq+0x66>
 80106ec:	4a38      	ldr	r2, [pc, #224]	; (80107d0 <LL_RCC_GetLPUARTClockFreq+0x110>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d003      	beq.n	80106fa <LL_RCC_GetLPUARTClockFreq+0x3a>
 80106f2:	4a38      	ldr	r2, [pc, #224]	; (80107d4 <LL_RCC_GetLPUARTClockFreq+0x114>)
 80106f4:	4293      	cmp	r3, r2
 80106f6:	d005      	beq.n	8010704 <LL_RCC_GetLPUARTClockFreq+0x44>
 80106f8:	e015      	b.n	8010726 <LL_RCC_GetLPUARTClockFreq+0x66>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 80106fa:	f000 f875 	bl	80107e8 <RCC_GetSystemClockFreq>
 80106fe:	0003      	movs	r3, r0
 8010700:	60fb      	str	r3, [r7, #12]
        break;
 8010702:	e05e      	b.n	80107c2 <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8010704:	f7ff ff52 	bl	80105ac <LL_RCC_HSI_IsReady>
 8010708:	0003      	movs	r3, r0
 801070a:	2b01      	cmp	r3, #1
 801070c:	d152      	bne.n	80107b4 <LL_RCC_GetLPUARTClockFreq+0xf4>
        {
          lpuart_frequency = HSI_VALUE;
 801070e:	4b32      	ldr	r3, [pc, #200]	; (80107d8 <LL_RCC_GetLPUARTClockFreq+0x118>)
 8010710:	60fb      	str	r3, [r7, #12]
        }
        break;
 8010712:	e04f      	b.n	80107b4 <LL_RCC_GetLPUARTClockFreq+0xf4>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8010714:	f7ff ff5e 	bl	80105d4 <LL_RCC_LSE_IsReady>
 8010718:	0003      	movs	r3, r0
 801071a:	2b01      	cmp	r3, #1
 801071c:	d14c      	bne.n	80107b8 <LL_RCC_GetLPUARTClockFreq+0xf8>
        {
          lpuart_frequency = LSE_VALUE;
 801071e:	2380      	movs	r3, #128	; 0x80
 8010720:	021b      	lsls	r3, r3, #8
 8010722:	60fb      	str	r3, [r7, #12]
        }
        break;
 8010724:	e048      	b.n	80107b8 <LL_RCC_GetLPUARTClockFreq+0xf8>

      case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8010726:	f000 f85f 	bl	80107e8 <RCC_GetSystemClockFreq>
 801072a:	0003      	movs	r3, r0
 801072c:	0018      	movs	r0, r3
 801072e:	f000 f887 	bl	8010840 <RCC_GetHCLKClockFreq>
 8010732:	0003      	movs	r3, r0
 8010734:	0018      	movs	r0, r3
 8010736:	f000 f89b 	bl	8010870 <RCC_GetPCLK1ClockFreq>
 801073a:	0003      	movs	r3, r0
 801073c:	60fb      	str	r3, [r7, #12]
        break;
 801073e:	e040      	b.n	80107c2 <LL_RCC_GetLPUARTClockFreq+0x102>
    }
  }
#if defined(LPUART2)
  else if (LPUARTxSource == LL_RCC_LPUART2_CLKSOURCE)
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	23c0      	movs	r3, #192	; 0xc0
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	429a      	cmp	r2, r3
 8010748:	d13b      	bne.n	80107c2 <LL_RCC_GetLPUARTClockFreq+0x102>
  {
    /* LPUART2CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	0018      	movs	r0, r3
 801074e:	f7ff ff75 	bl	801063c <LL_RCC_GetLPUARTClockSource>
 8010752:	0003      	movs	r3, r0
 8010754:	4a21      	ldr	r2, [pc, #132]	; (80107dc <LL_RCC_GetLPUARTClockFreq+0x11c>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d016      	beq.n	8010788 <LL_RCC_GetLPUARTClockFreq+0xc8>
 801075a:	4a20      	ldr	r2, [pc, #128]	; (80107dc <LL_RCC_GetLPUARTClockFreq+0x11c>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d81c      	bhi.n	801079a <LL_RCC_GetLPUARTClockFreq+0xda>
 8010760:	4a1f      	ldr	r2, [pc, #124]	; (80107e0 <LL_RCC_GetLPUARTClockFreq+0x120>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d003      	beq.n	801076e <LL_RCC_GetLPUARTClockFreq+0xae>
 8010766:	4a1f      	ldr	r2, [pc, #124]	; (80107e4 <LL_RCC_GetLPUARTClockFreq+0x124>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d005      	beq.n	8010778 <LL_RCC_GetLPUARTClockFreq+0xb8>
 801076c:	e015      	b.n	801079a <LL_RCC_GetLPUARTClockFreq+0xda>
    {
      case LL_RCC_LPUART2_CLKSOURCE_SYSCLK: /* LPUART2 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 801076e:	f000 f83b 	bl	80107e8 <RCC_GetSystemClockFreq>
 8010772:	0003      	movs	r3, r0
 8010774:	60fb      	str	r3, [r7, #12]
        break;
 8010776:	e024      	b.n	80107c2 <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART2_CLKSOURCE_HSI:    /* LPUART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8010778:	f7ff ff18 	bl	80105ac <LL_RCC_HSI_IsReady>
 801077c:	0003      	movs	r3, r0
 801077e:	2b01      	cmp	r3, #1
 8010780:	d11c      	bne.n	80107bc <LL_RCC_GetLPUARTClockFreq+0xfc>
        {
          lpuart_frequency = HSI_VALUE;
 8010782:	4b15      	ldr	r3, [pc, #84]	; (80107d8 <LL_RCC_GetLPUARTClockFreq+0x118>)
 8010784:	60fb      	str	r3, [r7, #12]
        }
        break;
 8010786:	e019      	b.n	80107bc <LL_RCC_GetLPUARTClockFreq+0xfc>

      case LL_RCC_LPUART2_CLKSOURCE_LSE:    /* LPUART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8010788:	f7ff ff24 	bl	80105d4 <LL_RCC_LSE_IsReady>
 801078c:	0003      	movs	r3, r0
 801078e:	2b01      	cmp	r3, #1
 8010790:	d116      	bne.n	80107c0 <LL_RCC_GetLPUARTClockFreq+0x100>
        {
          lpuart_frequency = LSE_VALUE;
 8010792:	2380      	movs	r3, #128	; 0x80
 8010794:	021b      	lsls	r3, r3, #8
 8010796:	60fb      	str	r3, [r7, #12]
        }
        break;
 8010798:	e012      	b.n	80107c0 <LL_RCC_GetLPUARTClockFreq+0x100>

      case LL_RCC_LPUART2_CLKSOURCE_PCLK1:  /* LPUART2 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801079a:	f000 f825 	bl	80107e8 <RCC_GetSystemClockFreq>
 801079e:	0003      	movs	r3, r0
 80107a0:	0018      	movs	r0, r3
 80107a2:	f000 f84d 	bl	8010840 <RCC_GetHCLKClockFreq>
 80107a6:	0003      	movs	r3, r0
 80107a8:	0018      	movs	r0, r3
 80107aa:	f000 f861 	bl	8010870 <RCC_GetPCLK1ClockFreq>
 80107ae:	0003      	movs	r3, r0
 80107b0:	60fb      	str	r3, [r7, #12]
        break;
 80107b2:	e006      	b.n	80107c2 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 80107b4:	46c0      	nop			; (mov r8, r8)
 80107b6:	e004      	b.n	80107c2 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 80107b8:	46c0      	nop			; (mov r8, r8)
 80107ba:	e002      	b.n	80107c2 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 80107bc:	46c0      	nop			; (mov r8, r8)
 80107be:	e000      	b.n	80107c2 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 80107c0:	46c0      	nop			; (mov r8, r8)
  else
  {
    /*nothing to do*/
  }

  return lpuart_frequency;
 80107c2:	68fb      	ldr	r3, [r7, #12]
}
 80107c4:	0018      	movs	r0, r3
 80107c6:	46bd      	mov	sp, r7
 80107c8:	b004      	add	sp, #16
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	0c000c00 	.word	0x0c000c00
 80107d0:	0c000400 	.word	0x0c000400
 80107d4:	0c000800 	.word	0x0c000800
 80107d8:	00f42400 	.word	0x00f42400
 80107dc:	03000300 	.word	0x03000300
 80107e0:	03000100 	.word	0x03000100
 80107e4:	03000200 	.word	0x03000200

080107e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80107ee:	f7ff ff01 	bl	80105f4 <LL_RCC_GetSysClkSource>
 80107f2:	0003      	movs	r3, r0
 80107f4:	2b08      	cmp	r3, #8
 80107f6:	d002      	beq.n	80107fe <RCC_GetSystemClockFreq+0x16>
 80107f8:	2b10      	cmp	r3, #16
 80107fa:	d003      	beq.n	8010804 <RCC_GetSystemClockFreq+0x1c>
 80107fc:	e007      	b.n	801080e <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80107fe:	4b0e      	ldr	r3, [pc, #56]	; (8010838 <RCC_GetSystemClockFreq+0x50>)
 8010800:	607b      	str	r3, [r7, #4]
      break;
 8010802:	e014      	b.n	801082e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8010804:	f000 f84a 	bl	801089c <RCC_PLL_GetFreqDomain_SYS>
 8010808:	0003      	movs	r3, r0
 801080a:	607b      	str	r3, [r7, #4]
      break;
 801080c:	e00f      	b.n	801082e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 801080e:	4b0b      	ldr	r3, [pc, #44]	; (801083c <RCC_GetSystemClockFreq+0x54>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	0adb      	lsrs	r3, r3, #11
 8010814:	2207      	movs	r2, #7
 8010816:	4013      	ands	r3, r2
 8010818:	2201      	movs	r2, #1
 801081a:	409a      	lsls	r2, r3
 801081c:	0013      	movs	r3, r2
 801081e:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8010820:	6839      	ldr	r1, [r7, #0]
 8010822:	4805      	ldr	r0, [pc, #20]	; (8010838 <RCC_GetSystemClockFreq+0x50>)
 8010824:	f7f5 fce4 	bl	80061f0 <__udivsi3>
 8010828:	0003      	movs	r3, r0
 801082a:	607b      	str	r3, [r7, #4]
      break;
 801082c:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 801082e:	687b      	ldr	r3, [r7, #4]
}
 8010830:	0018      	movs	r0, r3
 8010832:	46bd      	mov	sp, r7
 8010834:	b002      	add	sp, #8
 8010836:	bd80      	pop	{r7, pc}
 8010838:	00f42400 	.word	0x00f42400
 801083c:	40021000 	.word	0x40021000

08010840 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8010848:	f7ff fee0 	bl	801060c <LL_RCC_GetAHBPrescaler>
 801084c:	0003      	movs	r3, r0
 801084e:	0a1b      	lsrs	r3, r3, #8
 8010850:	220f      	movs	r2, #15
 8010852:	401a      	ands	r2, r3
 8010854:	4b05      	ldr	r3, [pc, #20]	; (801086c <RCC_GetHCLKClockFreq+0x2c>)
 8010856:	0092      	lsls	r2, r2, #2
 8010858:	58d3      	ldr	r3, [r2, r3]
 801085a:	221f      	movs	r2, #31
 801085c:	4013      	ands	r3, r2
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	40da      	lsrs	r2, r3
 8010862:	0013      	movs	r3, r2
}
 8010864:	0018      	movs	r0, r3
 8010866:	46bd      	mov	sp, r7
 8010868:	b002      	add	sp, #8
 801086a:	bd80      	pop	{r7, pc}
 801086c:	08024fc4 	.word	0x08024fc4

08010870 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8010878:	f7ff fed4 	bl	8010624 <LL_RCC_GetAPB1Prescaler>
 801087c:	0003      	movs	r3, r0
 801087e:	0b1a      	lsrs	r2, r3, #12
 8010880:	4b05      	ldr	r3, [pc, #20]	; (8010898 <RCC_GetPCLK1ClockFreq+0x28>)
 8010882:	0092      	lsls	r2, r2, #2
 8010884:	58d3      	ldr	r3, [r2, r3]
 8010886:	221f      	movs	r2, #31
 8010888:	4013      	ands	r3, r2
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	40da      	lsrs	r2, r3
 801088e:	0013      	movs	r3, r2
}
 8010890:	0018      	movs	r0, r3
 8010892:	46bd      	mov	sp, r7
 8010894:	b002      	add	sp, #8
 8010896:	bd80      	pop	{r7, pc}
 8010898:	08025004 	.word	0x08025004

0801089c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 801089c:	b590      	push	{r4, r7, lr}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80108a2:	f7ff fef5 	bl	8010690 <LL_RCC_PLL_GetMainSource>
 80108a6:	0003      	movs	r3, r0
 80108a8:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d003      	beq.n	80108b8 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	2b03      	cmp	r3, #3
 80108b4:	d003      	beq.n	80108be <RCC_PLL_GetFreqDomain_SYS+0x22>
 80108b6:	e005      	b.n	80108c4 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80108b8:	4b13      	ldr	r3, [pc, #76]	; (8010908 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80108ba:	607b      	str	r3, [r7, #4]
      break;
 80108bc:	e005      	b.n	80108ca <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80108be:	4b12      	ldr	r3, [pc, #72]	; (8010908 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80108c0:	607b      	str	r3, [r7, #4]
      break;
 80108c2:	e002      	b.n	80108ca <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 80108c4:	4b10      	ldr	r3, [pc, #64]	; (8010908 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80108c6:	607b      	str	r3, [r7, #4]
      break;
 80108c8:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80108ca:	f7ff fec9 	bl	8010660 <LL_RCC_PLL_GetN>
 80108ce:	0002      	movs	r2, r0
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	4353      	muls	r3, r2
 80108d4:	001c      	movs	r4, r3
 80108d6:	f7ff fee7 	bl	80106a8 <LL_RCC_PLL_GetDivider>
 80108da:	0003      	movs	r3, r0
 80108dc:	091b      	lsrs	r3, r3, #4
 80108de:	3301      	adds	r3, #1
 80108e0:	0019      	movs	r1, r3
 80108e2:	0020      	movs	r0, r4
 80108e4:	f7f5 fc84 	bl	80061f0 <__udivsi3>
 80108e8:	0003      	movs	r3, r0
 80108ea:	001c      	movs	r4, r3
 80108ec:	f7ff fec4 	bl	8010678 <LL_RCC_PLL_GetR>
 80108f0:	0003      	movs	r3, r0
 80108f2:	0f5b      	lsrs	r3, r3, #29
 80108f4:	3301      	adds	r3, #1
 80108f6:	0019      	movs	r1, r3
 80108f8:	0020      	movs	r0, r4
 80108fa:	f7f5 fc79 	bl	80061f0 <__udivsi3>
 80108fe:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8010900:	0018      	movs	r0, r3
 8010902:	46bd      	mov	sp, r7
 8010904:	b003      	add	sp, #12
 8010906:	bd90      	pop	{r4, r7, pc}
 8010908:	00f42400 	.word	0x00f42400

0801090c <LL_TIM_SetPrescaler>:
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	683a      	ldr	r2, [r7, #0]
 801091a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801091c:	46c0      	nop			; (mov r8, r8)
 801091e:	46bd      	mov	sp, r7
 8010920:	b002      	add	sp, #8
 8010922:	bd80      	pop	{r7, pc}

08010924 <LL_TIM_SetAutoReload>:
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010934:	46c0      	nop			; (mov r8, r8)
 8010936:	46bd      	mov	sp, r7
 8010938:	b002      	add	sp, #8
 801093a:	bd80      	pop	{r7, pc}

0801093c <LL_TIM_SetRepetitionCounter>:
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	683a      	ldr	r2, [r7, #0]
 801094a:	631a      	str	r2, [r3, #48]	; 0x30
}
 801094c:	46c0      	nop			; (mov r8, r8)
 801094e:	46bd      	mov	sp, r7
 8010950:	b002      	add	sp, #8
 8010952:	bd80      	pop	{r7, pc}

08010954 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	695b      	ldr	r3, [r3, #20]
 8010960:	2201      	movs	r2, #1
 8010962:	431a      	orrs	r2, r3
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	615a      	str	r2, [r3, #20]
}
 8010968:	46c0      	nop			; (mov r8, r8)
 801096a:	46bd      	mov	sp, r7
 801096c:	b002      	add	sp, #8
 801096e:	bd80      	pop	{r7, pc}

08010970 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a39      	ldr	r2, [pc, #228]	; (8010a68 <LL_TIM_Init+0xf8>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d00c      	beq.n	80109a2 <LL_TIM_Init+0x32>
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	2380      	movs	r3, #128	; 0x80
 801098c:	05db      	lsls	r3, r3, #23
 801098e:	429a      	cmp	r2, r3
 8010990:	d007      	beq.n	80109a2 <LL_TIM_Init+0x32>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4a35      	ldr	r2, [pc, #212]	; (8010a6c <LL_TIM_Init+0xfc>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d003      	beq.n	80109a2 <LL_TIM_Init+0x32>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	4a34      	ldr	r2, [pc, #208]	; (8010a70 <LL_TIM_Init+0x100>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d107      	bne.n	80109b2 <LL_TIM_Init+0x42>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2270      	movs	r2, #112	; 0x70
 80109a6:	4393      	bics	r3, r2
 80109a8:	001a      	movs	r2, r3
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	4313      	orrs	r3, r2
 80109b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	4a2c      	ldr	r2, [pc, #176]	; (8010a68 <LL_TIM_Init+0xf8>)
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d01c      	beq.n	80109f4 <LL_TIM_Init+0x84>
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	2380      	movs	r3, #128	; 0x80
 80109be:	05db      	lsls	r3, r3, #23
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d017      	beq.n	80109f4 <LL_TIM_Init+0x84>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	4a29      	ldr	r2, [pc, #164]	; (8010a6c <LL_TIM_Init+0xfc>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d013      	beq.n	80109f4 <LL_TIM_Init+0x84>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	4a28      	ldr	r2, [pc, #160]	; (8010a70 <LL_TIM_Init+0x100>)
 80109d0:	4293      	cmp	r3, r2
 80109d2:	d00f      	beq.n	80109f4 <LL_TIM_Init+0x84>
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	4a27      	ldr	r2, [pc, #156]	; (8010a74 <LL_TIM_Init+0x104>)
 80109d8:	4293      	cmp	r3, r2
 80109da:	d00b      	beq.n	80109f4 <LL_TIM_Init+0x84>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	4a26      	ldr	r2, [pc, #152]	; (8010a78 <LL_TIM_Init+0x108>)
 80109e0:	4293      	cmp	r3, r2
 80109e2:	d007      	beq.n	80109f4 <LL_TIM_Init+0x84>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	4a25      	ldr	r2, [pc, #148]	; (8010a7c <LL_TIM_Init+0x10c>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d003      	beq.n	80109f4 <LL_TIM_Init+0x84>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	4a24      	ldr	r2, [pc, #144]	; (8010a80 <LL_TIM_Init+0x110>)
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d106      	bne.n	8010a02 <LL_TIM_Init+0x92>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	4a23      	ldr	r2, [pc, #140]	; (8010a84 <LL_TIM_Init+0x114>)
 80109f8:	401a      	ands	r2, r3
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	4313      	orrs	r3, r2
 8010a00:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	68fa      	ldr	r2, [r7, #12]
 8010a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	689a      	ldr	r2, [r3, #8]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	0011      	movs	r1, r2
 8010a10:	0018      	movs	r0, r3
 8010a12:	f7ff ff87 	bl	8010924 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	881b      	ldrh	r3, [r3, #0]
 8010a1a:	001a      	movs	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	0011      	movs	r1, r2
 8010a20:	0018      	movs	r0, r3
 8010a22:	f7ff ff73 	bl	801090c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4a0f      	ldr	r2, [pc, #60]	; (8010a68 <LL_TIM_Init+0xf8>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d00b      	beq.n	8010a46 <LL_TIM_Init+0xd6>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4a11      	ldr	r2, [pc, #68]	; (8010a78 <LL_TIM_Init+0x108>)
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d007      	beq.n	8010a46 <LL_TIM_Init+0xd6>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	4a10      	ldr	r2, [pc, #64]	; (8010a7c <LL_TIM_Init+0x10c>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d003      	beq.n	8010a46 <LL_TIM_Init+0xd6>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4a0f      	ldr	r2, [pc, #60]	; (8010a80 <LL_TIM_Init+0x110>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d106      	bne.n	8010a54 <LL_TIM_Init+0xe4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	691a      	ldr	r2, [r3, #16]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	0011      	movs	r1, r2
 8010a4e:	0018      	movs	r0, r3
 8010a50:	f7ff ff74 	bl	801093c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	0018      	movs	r0, r3
 8010a58:	f7ff ff7c 	bl	8010954 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	0018      	movs	r0, r3
 8010a60:	46bd      	mov	sp, r7
 8010a62:	b004      	add	sp, #16
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	46c0      	nop			; (mov r8, r8)
 8010a68:	40012c00 	.word	0x40012c00
 8010a6c:	40000400 	.word	0x40000400
 8010a70:	40000800 	.word	0x40000800
 8010a74:	40002000 	.word	0x40002000
 8010a78:	40014000 	.word	0x40014000
 8010a7c:	40014400 	.word	0x40014400
 8010a80:	40014800 	.word	0x40014800
 8010a84:	fffffcff 	.word	0xfffffcff

08010a88 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	005b      	lsls	r3, r3, #1
 8010a96:	085a      	lsrs	r2, r3, #1
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	601a      	str	r2, [r3, #0]
}
 8010a9c:	46c0      	nop			; (mov r8, r8)
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	b002      	add	sp, #8
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <LL_APB1_GRP1_EnableClock>:
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8010aac:	4b07      	ldr	r3, [pc, #28]	; (8010acc <LL_APB1_GRP1_EnableClock+0x28>)
 8010aae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010ab0:	4b06      	ldr	r3, [pc, #24]	; (8010acc <LL_APB1_GRP1_EnableClock+0x28>)
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	430a      	orrs	r2, r1
 8010ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8010ab8:	4b04      	ldr	r3, [pc, #16]	; (8010acc <LL_APB1_GRP1_EnableClock+0x28>)
 8010aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	4013      	ands	r3, r2
 8010ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
}
 8010ac4:	46c0      	nop			; (mov r8, r8)
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	b004      	add	sp, #16
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	40021000 	.word	0x40021000

08010ad0 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	4a16      	ldr	r2, [pc, #88]	; (8010b38 <LL_UCPD_Init+0x68>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d104      	bne.n	8010aec <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8010ae2:	2380      	movs	r3, #128	; 0x80
 8010ae4:	049b      	lsls	r3, r3, #18
 8010ae6:	0018      	movs	r0, r3
 8010ae8:	f7ff ffdc 	bl	8010aa4 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4a13      	ldr	r2, [pc, #76]	; (8010b3c <LL_UCPD_Init+0x6c>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d104      	bne.n	8010afe <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8010af4:	2380      	movs	r3, #128	; 0x80
 8010af6:	04db      	lsls	r3, r3, #19
 8010af8:	0018      	movs	r0, r3
 8010afa:	f7ff ffd3 	bl	8010aa4 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	0018      	movs	r0, r3
 8010b02:	f7ff ffc1 	bl	8010a88 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4a0d      	ldr	r2, [pc, #52]	; (8010b40 <LL_UCPD_Init+0x70>)
 8010b0c:	401a      	ands	r2, r3
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	6819      	ldr	r1, [r3, #0]
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	02db      	lsls	r3, r3, #11
 8010b18:	4319      	orrs	r1, r3
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	019b      	lsls	r3, r3, #6
 8010b20:	4319      	orrs	r1, r3
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	430b      	orrs	r3, r1
 8010b28:	431a      	orrs	r2, r3
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8010b2e:	2300      	movs	r3, #0
}
 8010b30:	0018      	movs	r0, r3
 8010b32:	46bd      	mov	sp, r7
 8010b34:	b002      	add	sp, #8
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	4000a000 	.word	0x4000a000
 8010b3c:	4000a400 	.word	0x4000a400
 8010b40:	fff10000 	.word	0xfff10000

08010b44 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2280      	movs	r2, #128	; 0x80
 8010b50:	0292      	lsls	r2, r2, #10
 8010b52:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2207      	movs	r2, #7
 8010b58:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2210      	movs	r2, #16
 8010b5e:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	220d      	movs	r2, #13
 8010b64:	60da      	str	r2, [r3, #12]
}
 8010b66:	46c0      	nop			; (mov r8, r8)
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	b002      	add	sp, #8
 8010b6c:	bd80      	pop	{r7, pc}
	...

08010b70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010b7e:	4b05      	ldr	r3, [pc, #20]	; (8010b94 <USB_EnableGlobalInt+0x24>)
 8010b80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	68fa      	ldr	r2, [r7, #12]
 8010b86:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010b88:	2300      	movs	r3, #0
}
 8010b8a:	0018      	movs	r0, r3
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	b004      	add	sp, #16
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	46c0      	nop			; (mov r8, r8)
 8010b94:	0000bf80 	.word	0x0000bf80

08010b98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010ba0:	4b06      	ldr	r3, [pc, #24]	; (8010bbc <USB_DisableGlobalInt+0x24>)
 8010ba2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	43d2      	mvns	r2, r2
 8010bac:	401a      	ands	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010bb2:	2300      	movs	r3, #0
}
 8010bb4:	0018      	movs	r0, r3
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	b004      	add	sp, #16
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	0000bf80 	.word	0x0000bf80

08010bc0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	000a      	movs	r2, r1
 8010bca:	1cfb      	adds	r3, r7, #3
 8010bcc:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8010bce:	1cfb      	adds	r3, r7, #3
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d106      	bne.n	8010be4 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bda:	005b      	lsls	r3, r3, #1
 8010bdc:	085a      	lsrs	r2, r3, #1
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	641a      	str	r2, [r3, #64]	; 0x40
 8010be2:	e00d      	b.n	8010c00 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 8010be4:	1cfb      	adds	r3, r7, #3
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d107      	bne.n	8010bfc <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf0:	2280      	movs	r2, #128	; 0x80
 8010bf2:	0612      	lsls	r2, r2, #24
 8010bf4:	431a      	orrs	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	641a      	str	r2, [r3, #64]	; 0x40
 8010bfa:	e001      	b.n	8010c00 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	e000      	b.n	8010c02 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8010c00:	2300      	movs	r3, #0
}
 8010c02:	0018      	movs	r0, r3
 8010c04:	46bd      	mov	sp, r7
 8010c06:	b002      	add	sp, #8
 8010c08:	bd80      	pop	{r7, pc}

08010c0a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	b5b0      	push	{r4, r5, r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	2004      	movs	r0, #4
 8010c16:	2420      	movs	r4, #32
 8010c18:	1900      	adds	r0, r0, r4
 8010c1a:	19c0      	adds	r0, r0, r7
 8010c1c:	6001      	str	r1, [r0, #0]
 8010c1e:	6042      	str	r2, [r0, #4]
 8010c20:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2201      	movs	r2, #1
 8010c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	4393      	bics	r3, r2
 8010c30:	001a      	movs	r2, r3
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8010c36:	250f      	movs	r5, #15
 8010c38:	197c      	adds	r4, r7, r5
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	0018      	movs	r0, r3
 8010c40:	f7ff ffbe 	bl	8010bc0 <USB_SetCurrentMode>
 8010c44:	0003      	movs	r3, r0
 8010c46:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8010c4e:	197b      	adds	r3, r7, r5
 8010c50:	781b      	ldrb	r3, [r3, #0]
}
 8010c52:	0018      	movs	r0, r3
 8010c54:	46bd      	mov	sp, r7
 8010c56:	b004      	add	sp, #16
 8010c58:	bcb0      	pop	{r4, r5, r7}
 8010c5a:	bc08      	pop	{r3}
 8010c5c:	b004      	add	sp, #16
 8010c5e:	4718      	bx	r3

08010c60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b09e      	sub	sp, #120	; 0x78
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010c6a:	2377      	movs	r3, #119	; 0x77
 8010c6c:	18fb      	adds	r3, r7, r3
 8010c6e:	2200      	movs	r2, #0
 8010c70:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	18d3      	adds	r3, r2, r3
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4adc      	ldr	r2, [pc, #880]	; (8010ff0 <USB_ActivateEndpoint+0x390>)
 8010c80:	4013      	ands	r3, r2
 8010c82:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	78db      	ldrb	r3, [r3, #3]
 8010c88:	2b03      	cmp	r3, #3
 8010c8a:	d00e      	beq.n	8010caa <USB_ActivateEndpoint+0x4a>
 8010c8c:	dc19      	bgt.n	8010cc2 <USB_ActivateEndpoint+0x62>
 8010c8e:	2b02      	cmp	r3, #2
 8010c90:	d01c      	beq.n	8010ccc <USB_ActivateEndpoint+0x6c>
 8010c92:	dc16      	bgt.n	8010cc2 <USB_ActivateEndpoint+0x62>
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <USB_ActivateEndpoint+0x3e>
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	d00c      	beq.n	8010cb6 <USB_ActivateEndpoint+0x56>
 8010c9c:	e011      	b.n	8010cc2 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ca0:	2280      	movs	r2, #128	; 0x80
 8010ca2:	0092      	lsls	r2, r2, #2
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8010ca8:	e011      	b.n	8010cce <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010cac:	22c0      	movs	r2, #192	; 0xc0
 8010cae:	00d2      	lsls	r2, r2, #3
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8010cb4:	e00b      	b.n	8010cce <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010cb8:	2280      	movs	r2, #128	; 0x80
 8010cba:	00d2      	lsls	r2, r2, #3
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8010cc0:	e005      	b.n	8010cce <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8010cc2:	2377      	movs	r3, #119	; 0x77
 8010cc4:	18fb      	adds	r3, r7, r3
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	701a      	strb	r2, [r3, #0]
      break;
 8010cca:	e000      	b.n	8010cce <USB_ActivateEndpoint+0x6e>
      break;
 8010ccc:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	18d3      	adds	r3, r2, r3
 8010cd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010cda:	49c6      	ldr	r1, [pc, #792]	; (8010ff4 <USB_ActivateEndpoint+0x394>)
 8010cdc:	430a      	orrs	r2, r1
 8010cde:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	009b      	lsls	r3, r3, #2
 8010ce8:	18d3      	adds	r3, r2, r3
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4ac2      	ldr	r2, [pc, #776]	; (8010ff8 <USB_ActivateEndpoint+0x398>)
 8010cee:	4013      	ands	r3, r2
 8010cf0:	683a      	ldr	r2, [r7, #0]
 8010cf2:	7812      	ldrb	r2, [r2, #0]
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	18d3      	adds	r3, r2, r3
 8010d02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d04:	49bb      	ldr	r1, [pc, #748]	; (8010ff4 <USB_ActivateEndpoint+0x394>)
 8010d06:	430a      	orrs	r2, r1
 8010d08:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	7b1b      	ldrb	r3, [r3, #12]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d000      	beq.n	8010d14 <USB_ActivateEndpoint+0xb4>
 8010d12:	e155      	b.n	8010fc0 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	785b      	ldrb	r3, [r3, #1]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d06e      	beq.n	8010dfa <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	00db      	lsls	r3, r3, #3
 8010d22:	4ab6      	ldr	r2, [pc, #728]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010d24:	4694      	mov	ip, r2
 8010d26:	4463      	add	r3, ip
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	00db      	lsls	r3, r3, #3
 8010d30:	49b2      	ldr	r1, [pc, #712]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010d32:	468c      	mov	ip, r1
 8010d34:	4463      	add	r3, ip
 8010d36:	0c12      	lsrs	r2, r2, #16
 8010d38:	0412      	lsls	r2, r2, #16
 8010d3a:	601a      	str	r2, [r3, #0]
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	00db      	lsls	r3, r3, #3
 8010d42:	4aae      	ldr	r2, [pc, #696]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010d44:	4694      	mov	ip, r2
 8010d46:	4463      	add	r3, ip
 8010d48:	6819      	ldr	r1, [r3, #0]
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	88db      	ldrh	r3, [r3, #6]
 8010d4e:	089b      	lsrs	r3, r3, #2
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	009a      	lsls	r2, r3, #2
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	00db      	lsls	r3, r3, #3
 8010d5a:	48a8      	ldr	r0, [pc, #672]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010d5c:	4684      	mov	ip, r0
 8010d5e:	4463      	add	r3, ip
 8010d60:	430a      	orrs	r2, r1
 8010d62:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	009b      	lsls	r3, r3, #2
 8010d6c:	18d3      	adds	r3, r2, r3
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	61bb      	str	r3, [r7, #24]
 8010d72:	69bb      	ldr	r3, [r7, #24]
 8010d74:	2240      	movs	r2, #64	; 0x40
 8010d76:	4013      	ands	r3, r2
 8010d78:	d011      	beq.n	8010d9e <USB_ActivateEndpoint+0x13e>
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	18d3      	adds	r3, r2, r3
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4a9c      	ldr	r2, [pc, #624]	; (8010ff8 <USB_ActivateEndpoint+0x398>)
 8010d88:	4013      	ands	r3, r2
 8010d8a:	617b      	str	r3, [r7, #20]
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	18d3      	adds	r3, r2, r3
 8010d96:	697a      	ldr	r2, [r7, #20]
 8010d98:	4999      	ldr	r1, [pc, #612]	; (8011000 <USB_ActivateEndpoint+0x3a0>)
 8010d9a:	430a      	orrs	r2, r1
 8010d9c:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	78db      	ldrb	r3, [r3, #3]
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d016      	beq.n	8010dd4 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	18d3      	adds	r3, r2, r3
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	4a94      	ldr	r2, [pc, #592]	; (8011004 <USB_ActivateEndpoint+0x3a4>)
 8010db4:	4013      	ands	r3, r2
 8010db6:	60fb      	str	r3, [r7, #12]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	2220      	movs	r2, #32
 8010dbc:	4053      	eors	r3, r2
 8010dbe:	60fb      	str	r3, [r7, #12]
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	009b      	lsls	r3, r3, #2
 8010dc8:	18d3      	adds	r3, r2, r3
 8010dca:	68fa      	ldr	r2, [r7, #12]
 8010dcc:	4989      	ldr	r1, [pc, #548]	; (8010ff4 <USB_ActivateEndpoint+0x394>)
 8010dce:	430a      	orrs	r2, r1
 8010dd0:	601a      	str	r2, [r3, #0]
 8010dd2:	e261      	b.n	8011298 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	009b      	lsls	r3, r3, #2
 8010ddc:	18d3      	adds	r3, r2, r3
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	4a88      	ldr	r2, [pc, #544]	; (8011004 <USB_ActivateEndpoint+0x3a4>)
 8010de2:	4013      	ands	r3, r2
 8010de4:	613b      	str	r3, [r7, #16]
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	18d3      	adds	r3, r2, r3
 8010df0:	693a      	ldr	r2, [r7, #16]
 8010df2:	4980      	ldr	r1, [pc, #512]	; (8010ff4 <USB_ActivateEndpoint+0x394>)
 8010df4:	430a      	orrs	r2, r1
 8010df6:	601a      	str	r2, [r3, #0]
 8010df8:	e24e      	b.n	8011298 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	00db      	lsls	r3, r3, #3
 8010e00:	4a7e      	ldr	r2, [pc, #504]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010e02:	4694      	mov	ip, r2
 8010e04:	4463      	add	r3, ip
 8010e06:	685a      	ldr	r2, [r3, #4]
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	00db      	lsls	r3, r3, #3
 8010e0e:	497b      	ldr	r1, [pc, #492]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010e10:	468c      	mov	ip, r1
 8010e12:	4463      	add	r3, ip
 8010e14:	0c12      	lsrs	r2, r2, #16
 8010e16:	0412      	lsls	r2, r2, #16
 8010e18:	605a      	str	r2, [r3, #4]
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	00db      	lsls	r3, r3, #3
 8010e20:	4a76      	ldr	r2, [pc, #472]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010e22:	4694      	mov	ip, r2
 8010e24:	4463      	add	r3, ip
 8010e26:	6859      	ldr	r1, [r3, #4]
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	88db      	ldrh	r3, [r3, #6]
 8010e2c:	089b      	lsrs	r3, r3, #2
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	009a      	lsls	r2, r3, #2
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	00db      	lsls	r3, r3, #3
 8010e38:	4870      	ldr	r0, [pc, #448]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010e3a:	4684      	mov	ip, r0
 8010e3c:	4463      	add	r3, ip
 8010e3e:	430a      	orrs	r2, r1
 8010e40:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	00db      	lsls	r3, r3, #3
 8010e48:	4a6c      	ldr	r2, [pc, #432]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010e4a:	4694      	mov	ip, r2
 8010e4c:	4463      	add	r3, ip
 8010e4e:	685a      	ldr	r2, [r3, #4]
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	00db      	lsls	r3, r3, #3
 8010e56:	4969      	ldr	r1, [pc, #420]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010e58:	468c      	mov	ip, r1
 8010e5a:	4463      	add	r3, ip
 8010e5c:	0192      	lsls	r2, r2, #6
 8010e5e:	0992      	lsrs	r2, r2, #6
 8010e60:	605a      	str	r2, [r3, #4]
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	691b      	ldr	r3, [r3, #16]
 8010e66:	2b3e      	cmp	r3, #62	; 0x3e
 8010e68:	d920      	bls.n	8010eac <USB_ActivateEndpoint+0x24c>
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	691b      	ldr	r3, [r3, #16]
 8010e6e:	095b      	lsrs	r3, r3, #5
 8010e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	691b      	ldr	r3, [r3, #16]
 8010e76:	221f      	movs	r2, #31
 8010e78:	4013      	ands	r3, r2
 8010e7a:	d102      	bne.n	8010e82 <USB_ActivateEndpoint+0x222>
 8010e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e7e:	3b01      	subs	r3, #1
 8010e80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	00db      	lsls	r3, r3, #3
 8010e88:	4a5c      	ldr	r2, [pc, #368]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010e8a:	4694      	mov	ip, r2
 8010e8c:	4463      	add	r3, ip
 8010e8e:	685a      	ldr	r2, [r3, #4]
 8010e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e92:	069b      	lsls	r3, r3, #26
 8010e94:	431a      	orrs	r2, r3
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	00db      	lsls	r3, r3, #3
 8010e9c:	4957      	ldr	r1, [pc, #348]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010e9e:	468c      	mov	ip, r1
 8010ea0:	4463      	add	r3, ip
 8010ea2:	2180      	movs	r1, #128	; 0x80
 8010ea4:	0609      	lsls	r1, r1, #24
 8010ea6:	430a      	orrs	r2, r1
 8010ea8:	605a      	str	r2, [r3, #4]
 8010eaa:	e032      	b.n	8010f12 <USB_ActivateEndpoint+0x2b2>
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d111      	bne.n	8010ed8 <USB_ActivateEndpoint+0x278>
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	00db      	lsls	r3, r3, #3
 8010eba:	4a50      	ldr	r2, [pc, #320]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010ebc:	4694      	mov	ip, r2
 8010ebe:	4463      	add	r3, ip
 8010ec0:	685a      	ldr	r2, [r3, #4]
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	00db      	lsls	r3, r3, #3
 8010ec8:	494c      	ldr	r1, [pc, #304]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010eca:	468c      	mov	ip, r1
 8010ecc:	4463      	add	r3, ip
 8010ece:	2180      	movs	r1, #128	; 0x80
 8010ed0:	0609      	lsls	r1, r1, #24
 8010ed2:	430a      	orrs	r2, r1
 8010ed4:	605a      	str	r2, [r3, #4]
 8010ed6:	e01c      	b.n	8010f12 <USB_ActivateEndpoint+0x2b2>
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	691b      	ldr	r3, [r3, #16]
 8010edc:	085b      	lsrs	r3, r3, #1
 8010ede:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	691b      	ldr	r3, [r3, #16]
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	4013      	ands	r3, r2
 8010ee8:	d002      	beq.n	8010ef0 <USB_ActivateEndpoint+0x290>
 8010eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010eec:	3301      	adds	r3, #1
 8010eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	00db      	lsls	r3, r3, #3
 8010ef6:	4a41      	ldr	r2, [pc, #260]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010ef8:	4694      	mov	ip, r2
 8010efa:	4463      	add	r3, ip
 8010efc:	6859      	ldr	r1, [r3, #4]
 8010efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f00:	069a      	lsls	r2, r3, #26
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	00db      	lsls	r3, r3, #3
 8010f08:	483c      	ldr	r0, [pc, #240]	; (8010ffc <USB_ActivateEndpoint+0x39c>)
 8010f0a:	4684      	mov	ip, r0
 8010f0c:	4463      	add	r3, ip
 8010f0e:	430a      	orrs	r2, r1
 8010f10:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	18d3      	adds	r3, r2, r3
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f22:	2380      	movs	r3, #128	; 0x80
 8010f24:	01db      	lsls	r3, r3, #7
 8010f26:	4013      	ands	r3, r2
 8010f28:	d011      	beq.n	8010f4e <USB_ActivateEndpoint+0x2ee>
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	18d3      	adds	r3, r2, r3
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4a30      	ldr	r2, [pc, #192]	; (8010ff8 <USB_ActivateEndpoint+0x398>)
 8010f38:	4013      	ands	r3, r2
 8010f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	18d3      	adds	r3, r2, r3
 8010f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f48:	492f      	ldr	r1, [pc, #188]	; (8011008 <USB_ActivateEndpoint+0x3a8>)
 8010f4a:	430a      	orrs	r2, r1
 8010f4c:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d11c      	bne.n	8010f90 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	009b      	lsls	r3, r3, #2
 8010f5e:	18d3      	adds	r3, r2, r3
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	4a2a      	ldr	r2, [pc, #168]	; (801100c <USB_ActivateEndpoint+0x3ac>)
 8010f64:	4013      	ands	r3, r2
 8010f66:	61fb      	str	r3, [r7, #28]
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	2280      	movs	r2, #128	; 0x80
 8010f6c:	0152      	lsls	r2, r2, #5
 8010f6e:	4053      	eors	r3, r2
 8010f70:	61fb      	str	r3, [r7, #28]
 8010f72:	69fb      	ldr	r3, [r7, #28]
 8010f74:	2280      	movs	r2, #128	; 0x80
 8010f76:	0192      	lsls	r2, r2, #6
 8010f78:	4053      	eors	r3, r2
 8010f7a:	61fb      	str	r3, [r7, #28]
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	18d3      	adds	r3, r2, r3
 8010f86:	69fa      	ldr	r2, [r7, #28]
 8010f88:	491a      	ldr	r1, [pc, #104]	; (8010ff4 <USB_ActivateEndpoint+0x394>)
 8010f8a:	430a      	orrs	r2, r1
 8010f8c:	601a      	str	r2, [r3, #0]
 8010f8e:	e183      	b.n	8011298 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	18d3      	adds	r3, r2, r3
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	4a1b      	ldr	r2, [pc, #108]	; (801100c <USB_ActivateEndpoint+0x3ac>)
 8010f9e:	4013      	ands	r3, r2
 8010fa0:	623b      	str	r3, [r7, #32]
 8010fa2:	6a3b      	ldr	r3, [r7, #32]
 8010fa4:	2280      	movs	r2, #128	; 0x80
 8010fa6:	0192      	lsls	r2, r2, #6
 8010fa8:	4053      	eors	r3, r2
 8010faa:	623b      	str	r3, [r7, #32]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	009b      	lsls	r3, r3, #2
 8010fb4:	18d3      	adds	r3, r2, r3
 8010fb6:	6a3a      	ldr	r2, [r7, #32]
 8010fb8:	490e      	ldr	r1, [pc, #56]	; (8010ff4 <USB_ActivateEndpoint+0x394>)
 8010fba:	430a      	orrs	r2, r1
 8010fbc:	601a      	str	r2, [r3, #0]
 8010fbe:	e16b      	b.n	8011298 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	78db      	ldrb	r3, [r3, #3]
 8010fc4:	2b02      	cmp	r3, #2
 8010fc6:	d125      	bne.n	8011014 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	18d3      	adds	r3, r2, r3
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	4a08      	ldr	r2, [pc, #32]	; (8010ff8 <USB_ActivateEndpoint+0x398>)
 8010fd6:	4013      	ands	r3, r2
 8010fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	009b      	lsls	r3, r3, #2
 8010fe2:	18d3      	adds	r3, r2, r3
 8010fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010fe6:	490a      	ldr	r1, [pc, #40]	; (8011010 <USB_ActivateEndpoint+0x3b0>)
 8010fe8:	430a      	orrs	r2, r1
 8010fea:	601a      	str	r2, [r3, #0]
 8010fec:	e024      	b.n	8011038 <USB_ActivateEndpoint+0x3d8>
 8010fee:	46c0      	nop			; (mov r8, r8)
 8010ff0:	07ff898f 	.word	0x07ff898f
 8010ff4:	00008080 	.word	0x00008080
 8010ff8:	07ff8f8f 	.word	0x07ff8f8f
 8010ffc:	40009800 	.word	0x40009800
 8011000:	000080c0 	.word	0x000080c0
 8011004:	07ff8fbf 	.word	0x07ff8fbf
 8011008:	0000c080 	.word	0x0000c080
 801100c:	07ffbf8f 	.word	0x07ffbf8f
 8011010:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	18d3      	adds	r3, r2, r3
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4aa1      	ldr	r2, [pc, #644]	; (80112a8 <USB_ActivateEndpoint+0x648>)
 8011022:	4013      	ands	r3, r2
 8011024:	667b      	str	r3, [r7, #100]	; 0x64
 8011026:	687a      	ldr	r2, [r7, #4]
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	009b      	lsls	r3, r3, #2
 801102e:	18d3      	adds	r3, r2, r3
 8011030:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011032:	499e      	ldr	r1, [pc, #632]	; (80112ac <USB_ActivateEndpoint+0x64c>)
 8011034:	430a      	orrs	r2, r1
 8011036:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	00db      	lsls	r3, r3, #3
 801103e:	4a9c      	ldr	r2, [pc, #624]	; (80112b0 <USB_ActivateEndpoint+0x650>)
 8011040:	4694      	mov	ip, r2
 8011042:	4463      	add	r3, ip
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	00db      	lsls	r3, r3, #3
 801104c:	4998      	ldr	r1, [pc, #608]	; (80112b0 <USB_ActivateEndpoint+0x650>)
 801104e:	468c      	mov	ip, r1
 8011050:	4463      	add	r3, ip
 8011052:	0c12      	lsrs	r2, r2, #16
 8011054:	0412      	lsls	r2, r2, #16
 8011056:	601a      	str	r2, [r3, #0]
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	00db      	lsls	r3, r3, #3
 801105e:	4a94      	ldr	r2, [pc, #592]	; (80112b0 <USB_ActivateEndpoint+0x650>)
 8011060:	4694      	mov	ip, r2
 8011062:	4463      	add	r3, ip
 8011064:	6819      	ldr	r1, [r3, #0]
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	891b      	ldrh	r3, [r3, #8]
 801106a:	089b      	lsrs	r3, r3, #2
 801106c:	b29b      	uxth	r3, r3
 801106e:	009a      	lsls	r2, r3, #2
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	00db      	lsls	r3, r3, #3
 8011076:	488e      	ldr	r0, [pc, #568]	; (80112b0 <USB_ActivateEndpoint+0x650>)
 8011078:	4684      	mov	ip, r0
 801107a:	4463      	add	r3, ip
 801107c:	430a      	orrs	r2, r1
 801107e:	601a      	str	r2, [r3, #0]
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	00db      	lsls	r3, r3, #3
 8011086:	4a8a      	ldr	r2, [pc, #552]	; (80112b0 <USB_ActivateEndpoint+0x650>)
 8011088:	4694      	mov	ip, r2
 801108a:	4463      	add	r3, ip
 801108c:	685a      	ldr	r2, [r3, #4]
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	00db      	lsls	r3, r3, #3
 8011094:	4986      	ldr	r1, [pc, #536]	; (80112b0 <USB_ActivateEndpoint+0x650>)
 8011096:	468c      	mov	ip, r1
 8011098:	4463      	add	r3, ip
 801109a:	0c12      	lsrs	r2, r2, #16
 801109c:	0412      	lsls	r2, r2, #16
 801109e:	605a      	str	r2, [r3, #4]
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	00db      	lsls	r3, r3, #3
 80110a6:	4a82      	ldr	r2, [pc, #520]	; (80112b0 <USB_ActivateEndpoint+0x650>)
 80110a8:	4694      	mov	ip, r2
 80110aa:	4463      	add	r3, ip
 80110ac:	6859      	ldr	r1, [r3, #4]
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	895b      	ldrh	r3, [r3, #10]
 80110b2:	089b      	lsrs	r3, r3, #2
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	009a      	lsls	r2, r3, #2
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	00db      	lsls	r3, r3, #3
 80110be:	487c      	ldr	r0, [pc, #496]	; (80112b0 <USB_ActivateEndpoint+0x650>)
 80110c0:	4684      	mov	ip, r0
 80110c2:	4463      	add	r3, ip
 80110c4:	430a      	orrs	r2, r1
 80110c6:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	785b      	ldrb	r3, [r3, #1]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d169      	bne.n	80111a4 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	18d3      	adds	r3, r2, r3
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	643b      	str	r3, [r7, #64]	; 0x40
 80110de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80110e0:	2380      	movs	r3, #128	; 0x80
 80110e2:	01db      	lsls	r3, r3, #7
 80110e4:	4013      	ands	r3, r2
 80110e6:	d011      	beq.n	801110c <USB_ActivateEndpoint+0x4ac>
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	18d3      	adds	r3, r2, r3
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a6f      	ldr	r2, [pc, #444]	; (80112b4 <USB_ActivateEndpoint+0x654>)
 80110f6:	4013      	ands	r3, r2
 80110f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	18d3      	adds	r3, r2, r3
 8011104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011106:	496c      	ldr	r1, [pc, #432]	; (80112b8 <USB_ActivateEndpoint+0x658>)
 8011108:	430a      	orrs	r2, r1
 801110a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	009b      	lsls	r3, r3, #2
 8011114:	18d3      	adds	r3, r2, r3
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	63bb      	str	r3, [r7, #56]	; 0x38
 801111a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111c:	2240      	movs	r2, #64	; 0x40
 801111e:	4013      	ands	r3, r2
 8011120:	d011      	beq.n	8011146 <USB_ActivateEndpoint+0x4e6>
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	18d3      	adds	r3, r2, r3
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	4a61      	ldr	r2, [pc, #388]	; (80112b4 <USB_ActivateEndpoint+0x654>)
 8011130:	4013      	ands	r3, r2
 8011132:	637b      	str	r3, [r7, #52]	; 0x34
 8011134:	687a      	ldr	r2, [r7, #4]
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	18d3      	adds	r3, r2, r3
 801113e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011140:	495e      	ldr	r1, [pc, #376]	; (80112bc <USB_ActivateEndpoint+0x65c>)
 8011142:	430a      	orrs	r2, r1
 8011144:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	18d3      	adds	r3, r2, r3
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a5b      	ldr	r2, [pc, #364]	; (80112c0 <USB_ActivateEndpoint+0x660>)
 8011154:	4013      	ands	r3, r2
 8011156:	633b      	str	r3, [r7, #48]	; 0x30
 8011158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115a:	2280      	movs	r2, #128	; 0x80
 801115c:	0152      	lsls	r2, r2, #5
 801115e:	4053      	eors	r3, r2
 8011160:	633b      	str	r3, [r7, #48]	; 0x30
 8011162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011164:	2280      	movs	r2, #128	; 0x80
 8011166:	0192      	lsls	r2, r2, #6
 8011168:	4053      	eors	r3, r2
 801116a:	633b      	str	r3, [r7, #48]	; 0x30
 801116c:	687a      	ldr	r2, [r7, #4]
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	009b      	lsls	r3, r3, #2
 8011174:	18d3      	adds	r3, r2, r3
 8011176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011178:	494c      	ldr	r1, [pc, #304]	; (80112ac <USB_ActivateEndpoint+0x64c>)
 801117a:	430a      	orrs	r2, r1
 801117c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	009b      	lsls	r3, r3, #2
 8011186:	18d3      	adds	r3, r2, r3
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	4a4e      	ldr	r2, [pc, #312]	; (80112c4 <USB_ActivateEndpoint+0x664>)
 801118c:	4013      	ands	r3, r2
 801118e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	18d3      	adds	r3, r2, r3
 801119a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801119c:	4943      	ldr	r1, [pc, #268]	; (80112ac <USB_ActivateEndpoint+0x64c>)
 801119e:	430a      	orrs	r2, r1
 80111a0:	601a      	str	r2, [r3, #0]
 80111a2:	e079      	b.n	8011298 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80111a4:	687a      	ldr	r2, [r7, #4]
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	18d3      	adds	r3, r2, r3
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80111b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80111b4:	2380      	movs	r3, #128	; 0x80
 80111b6:	01db      	lsls	r3, r3, #7
 80111b8:	4013      	ands	r3, r2
 80111ba:	d011      	beq.n	80111e0 <USB_ActivateEndpoint+0x580>
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	009b      	lsls	r3, r3, #2
 80111c4:	18d3      	adds	r3, r2, r3
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	4a3a      	ldr	r2, [pc, #232]	; (80112b4 <USB_ActivateEndpoint+0x654>)
 80111ca:	4013      	ands	r3, r2
 80111cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	009b      	lsls	r3, r3, #2
 80111d6:	18d3      	adds	r3, r2, r3
 80111d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80111da:	4937      	ldr	r1, [pc, #220]	; (80112b8 <USB_ActivateEndpoint+0x658>)
 80111dc:	430a      	orrs	r2, r1
 80111de:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	18d3      	adds	r3, r2, r3
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	657b      	str	r3, [r7, #84]	; 0x54
 80111ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111f0:	2240      	movs	r2, #64	; 0x40
 80111f2:	4013      	ands	r3, r2
 80111f4:	d011      	beq.n	801121a <USB_ActivateEndpoint+0x5ba>
 80111f6:	687a      	ldr	r2, [r7, #4]
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	009b      	lsls	r3, r3, #2
 80111fe:	18d3      	adds	r3, r2, r3
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4a2c      	ldr	r2, [pc, #176]	; (80112b4 <USB_ActivateEndpoint+0x654>)
 8011204:	4013      	ands	r3, r2
 8011206:	653b      	str	r3, [r7, #80]	; 0x50
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	18d3      	adds	r3, r2, r3
 8011212:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011214:	4929      	ldr	r1, [pc, #164]	; (80112bc <USB_ActivateEndpoint+0x65c>)
 8011216:	430a      	orrs	r2, r1
 8011218:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	78db      	ldrb	r3, [r3, #3]
 801121e:	2b01      	cmp	r3, #1
 8011220:	d016      	beq.n	8011250 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	009b      	lsls	r3, r3, #2
 801122a:	18d3      	adds	r3, r2, r3
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	4a25      	ldr	r2, [pc, #148]	; (80112c4 <USB_ActivateEndpoint+0x664>)
 8011230:	4013      	ands	r3, r2
 8011232:	64bb      	str	r3, [r7, #72]	; 0x48
 8011234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011236:	2220      	movs	r2, #32
 8011238:	4053      	eors	r3, r2
 801123a:	64bb      	str	r3, [r7, #72]	; 0x48
 801123c:	687a      	ldr	r2, [r7, #4]
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	009b      	lsls	r3, r3, #2
 8011244:	18d3      	adds	r3, r2, r3
 8011246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011248:	4918      	ldr	r1, [pc, #96]	; (80112ac <USB_ActivateEndpoint+0x64c>)
 801124a:	430a      	orrs	r2, r1
 801124c:	601a      	str	r2, [r3, #0]
 801124e:	e011      	b.n	8011274 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	009b      	lsls	r3, r3, #2
 8011258:	18d3      	adds	r3, r2, r3
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4a19      	ldr	r2, [pc, #100]	; (80112c4 <USB_ActivateEndpoint+0x664>)
 801125e:	4013      	ands	r3, r2
 8011260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	009b      	lsls	r3, r3, #2
 801126a:	18d3      	adds	r3, r2, r3
 801126c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801126e:	490f      	ldr	r1, [pc, #60]	; (80112ac <USB_ActivateEndpoint+0x64c>)
 8011270:	430a      	orrs	r2, r1
 8011272:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011274:	687a      	ldr	r2, [r7, #4]
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	18d3      	adds	r3, r2, r3
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4a0f      	ldr	r2, [pc, #60]	; (80112c0 <USB_ActivateEndpoint+0x660>)
 8011282:	4013      	ands	r3, r2
 8011284:	647b      	str	r3, [r7, #68]	; 0x44
 8011286:	687a      	ldr	r2, [r7, #4]
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	009b      	lsls	r3, r3, #2
 801128e:	18d3      	adds	r3, r2, r3
 8011290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011292:	4906      	ldr	r1, [pc, #24]	; (80112ac <USB_ActivateEndpoint+0x64c>)
 8011294:	430a      	orrs	r2, r1
 8011296:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011298:	2377      	movs	r3, #119	; 0x77
 801129a:	18fb      	adds	r3, r7, r3
 801129c:	781b      	ldrb	r3, [r3, #0]
}
 801129e:	0018      	movs	r0, r3
 80112a0:	46bd      	mov	sp, r7
 80112a2:	b01e      	add	sp, #120	; 0x78
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	46c0      	nop			; (mov r8, r8)
 80112a8:	07ff8e8f 	.word	0x07ff8e8f
 80112ac:	00008080 	.word	0x00008080
 80112b0:	40009800 	.word	0x40009800
 80112b4:	07ff8f8f 	.word	0x07ff8f8f
 80112b8:	0000c080 	.word	0x0000c080
 80112bc:	000080c0 	.word	0x000080c0
 80112c0:	07ffbf8f 	.word	0x07ffbf8f
 80112c4:	07ff8fbf 	.word	0x07ff8fbf

080112c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b096      	sub	sp, #88	; 0x58
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	7b1b      	ldrb	r3, [r3, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d164      	bne.n	80113a4 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	785b      	ldrb	r3, [r3, #1]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d02f      	beq.n	8011342 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	009b      	lsls	r3, r3, #2
 80112ea:	18d3      	adds	r3, r2, r3
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	613b      	str	r3, [r7, #16]
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	2240      	movs	r2, #64	; 0x40
 80112f4:	4013      	ands	r3, r2
 80112f6:	d011      	beq.n	801131c <USB_DeactivateEndpoint+0x54>
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	18d3      	adds	r3, r2, r3
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a9d      	ldr	r2, [pc, #628]	; (801157c <USB_DeactivateEndpoint+0x2b4>)
 8011306:	4013      	ands	r3, r2
 8011308:	60fb      	str	r3, [r7, #12]
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	18d3      	adds	r3, r2, r3
 8011314:	68fa      	ldr	r2, [r7, #12]
 8011316:	499a      	ldr	r1, [pc, #616]	; (8011580 <USB_DeactivateEndpoint+0x2b8>)
 8011318:	430a      	orrs	r2, r1
 801131a:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	009b      	lsls	r3, r3, #2
 8011324:	18d3      	adds	r3, r2, r3
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	4a96      	ldr	r2, [pc, #600]	; (8011584 <USB_DeactivateEndpoint+0x2bc>)
 801132a:	4013      	ands	r3, r2
 801132c:	60bb      	str	r3, [r7, #8]
 801132e:	687a      	ldr	r2, [r7, #4]
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	009b      	lsls	r3, r3, #2
 8011336:	18d3      	adds	r3, r2, r3
 8011338:	68ba      	ldr	r2, [r7, #8]
 801133a:	4993      	ldr	r1, [pc, #588]	; (8011588 <USB_DeactivateEndpoint+0x2c0>)
 801133c:	430a      	orrs	r2, r1
 801133e:	601a      	str	r2, [r3, #0]
 8011340:	e117      	b.n	8011572 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	18d3      	adds	r3, r2, r3
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	61fb      	str	r3, [r7, #28]
 8011350:	69fa      	ldr	r2, [r7, #28]
 8011352:	2380      	movs	r3, #128	; 0x80
 8011354:	01db      	lsls	r3, r3, #7
 8011356:	4013      	ands	r3, r2
 8011358:	d011      	beq.n	801137e <USB_DeactivateEndpoint+0xb6>
 801135a:	687a      	ldr	r2, [r7, #4]
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	18d3      	adds	r3, r2, r3
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4a85      	ldr	r2, [pc, #532]	; (801157c <USB_DeactivateEndpoint+0x2b4>)
 8011368:	4013      	ands	r3, r2
 801136a:	61bb      	str	r3, [r7, #24]
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	18d3      	adds	r3, r2, r3
 8011376:	69ba      	ldr	r2, [r7, #24]
 8011378:	4984      	ldr	r1, [pc, #528]	; (801158c <USB_DeactivateEndpoint+0x2c4>)
 801137a:	430a      	orrs	r2, r1
 801137c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	18d3      	adds	r3, r2, r3
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	4a81      	ldr	r2, [pc, #516]	; (8011590 <USB_DeactivateEndpoint+0x2c8>)
 801138c:	4013      	ands	r3, r2
 801138e:	617b      	str	r3, [r7, #20]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	18d3      	adds	r3, r2, r3
 801139a:	697a      	ldr	r2, [r7, #20]
 801139c:	497a      	ldr	r1, [pc, #488]	; (8011588 <USB_DeactivateEndpoint+0x2c0>)
 801139e:	430a      	orrs	r2, r1
 80113a0:	601a      	str	r2, [r3, #0]
 80113a2:	e0e6      	b.n	8011572 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	785b      	ldrb	r3, [r3, #1]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d171      	bne.n	8011490 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80113ac:	687a      	ldr	r2, [r7, #4]
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	18d3      	adds	r3, r2, r3
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80113ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113bc:	2380      	movs	r3, #128	; 0x80
 80113be:	01db      	lsls	r3, r3, #7
 80113c0:	4013      	ands	r3, r2
 80113c2:	d011      	beq.n	80113e8 <USB_DeactivateEndpoint+0x120>
 80113c4:	687a      	ldr	r2, [r7, #4]
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	18d3      	adds	r3, r2, r3
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4a6a      	ldr	r2, [pc, #424]	; (801157c <USB_DeactivateEndpoint+0x2b4>)
 80113d2:	4013      	ands	r3, r2
 80113d4:	637b      	str	r3, [r7, #52]	; 0x34
 80113d6:	687a      	ldr	r2, [r7, #4]
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	009b      	lsls	r3, r3, #2
 80113de:	18d3      	adds	r3, r2, r3
 80113e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113e2:	496a      	ldr	r1, [pc, #424]	; (801158c <USB_DeactivateEndpoint+0x2c4>)
 80113e4:	430a      	orrs	r2, r1
 80113e6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	18d3      	adds	r3, r2, r3
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	633b      	str	r3, [r7, #48]	; 0x30
 80113f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f8:	2240      	movs	r2, #64	; 0x40
 80113fa:	4013      	ands	r3, r2
 80113fc:	d011      	beq.n	8011422 <USB_DeactivateEndpoint+0x15a>
 80113fe:	687a      	ldr	r2, [r7, #4]
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	18d3      	adds	r3, r2, r3
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	4a5c      	ldr	r2, [pc, #368]	; (801157c <USB_DeactivateEndpoint+0x2b4>)
 801140c:	4013      	ands	r3, r2
 801140e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	009b      	lsls	r3, r3, #2
 8011418:	18d3      	adds	r3, r2, r3
 801141a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801141c:	4958      	ldr	r1, [pc, #352]	; (8011580 <USB_DeactivateEndpoint+0x2b8>)
 801141e:	430a      	orrs	r2, r1
 8011420:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011422:	687a      	ldr	r2, [r7, #4]
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	18d3      	adds	r3, r2, r3
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	4a53      	ldr	r2, [pc, #332]	; (801157c <USB_DeactivateEndpoint+0x2b4>)
 8011430:	4013      	ands	r3, r2
 8011432:	62bb      	str	r3, [r7, #40]	; 0x28
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	18d3      	adds	r3, r2, r3
 801143e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011440:	494f      	ldr	r1, [pc, #316]	; (8011580 <USB_DeactivateEndpoint+0x2b8>)
 8011442:	430a      	orrs	r2, r1
 8011444:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	18d3      	adds	r3, r2, r3
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	4a4f      	ldr	r2, [pc, #316]	; (8011590 <USB_DeactivateEndpoint+0x2c8>)
 8011454:	4013      	ands	r3, r2
 8011456:	627b      	str	r3, [r7, #36]	; 0x24
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	009b      	lsls	r3, r3, #2
 8011460:	18d3      	adds	r3, r2, r3
 8011462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011464:	4948      	ldr	r1, [pc, #288]	; (8011588 <USB_DeactivateEndpoint+0x2c0>)
 8011466:	430a      	orrs	r2, r1
 8011468:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	009b      	lsls	r3, r3, #2
 8011472:	18d3      	adds	r3, r2, r3
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	4a43      	ldr	r2, [pc, #268]	; (8011584 <USB_DeactivateEndpoint+0x2bc>)
 8011478:	4013      	ands	r3, r2
 801147a:	623b      	str	r3, [r7, #32]
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	18d3      	adds	r3, r2, r3
 8011486:	6a3a      	ldr	r2, [r7, #32]
 8011488:	493f      	ldr	r1, [pc, #252]	; (8011588 <USB_DeactivateEndpoint+0x2c0>)
 801148a:	430a      	orrs	r2, r1
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	e070      	b.n	8011572 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	18d3      	adds	r3, r2, r3
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	657b      	str	r3, [r7, #84]	; 0x54
 801149e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80114a0:	2380      	movs	r3, #128	; 0x80
 80114a2:	01db      	lsls	r3, r3, #7
 80114a4:	4013      	ands	r3, r2
 80114a6:	d011      	beq.n	80114cc <USB_DeactivateEndpoint+0x204>
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	009b      	lsls	r3, r3, #2
 80114b0:	18d3      	adds	r3, r2, r3
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4a31      	ldr	r2, [pc, #196]	; (801157c <USB_DeactivateEndpoint+0x2b4>)
 80114b6:	4013      	ands	r3, r2
 80114b8:	653b      	str	r3, [r7, #80]	; 0x50
 80114ba:	687a      	ldr	r2, [r7, #4]
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	18d3      	adds	r3, r2, r3
 80114c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114c6:	4931      	ldr	r1, [pc, #196]	; (801158c <USB_DeactivateEndpoint+0x2c4>)
 80114c8:	430a      	orrs	r2, r1
 80114ca:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	18d3      	adds	r3, r2, r3
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114dc:	2240      	movs	r2, #64	; 0x40
 80114de:	4013      	ands	r3, r2
 80114e0:	d011      	beq.n	8011506 <USB_DeactivateEndpoint+0x23e>
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	18d3      	adds	r3, r2, r3
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4a23      	ldr	r2, [pc, #140]	; (801157c <USB_DeactivateEndpoint+0x2b4>)
 80114f0:	4013      	ands	r3, r2
 80114f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	18d3      	adds	r3, r2, r3
 80114fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011500:	491f      	ldr	r1, [pc, #124]	; (8011580 <USB_DeactivateEndpoint+0x2b8>)
 8011502:	430a      	orrs	r2, r1
 8011504:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	18d3      	adds	r3, r2, r3
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	4a1a      	ldr	r2, [pc, #104]	; (801157c <USB_DeactivateEndpoint+0x2b4>)
 8011514:	4013      	ands	r3, r2
 8011516:	647b      	str	r3, [r7, #68]	; 0x44
 8011518:	687a      	ldr	r2, [r7, #4]
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	18d3      	adds	r3, r2, r3
 8011522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011524:	4919      	ldr	r1, [pc, #100]	; (801158c <USB_DeactivateEndpoint+0x2c4>)
 8011526:	430a      	orrs	r2, r1
 8011528:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801152a:	687a      	ldr	r2, [r7, #4]
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	18d3      	adds	r3, r2, r3
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	4a13      	ldr	r2, [pc, #76]	; (8011584 <USB_DeactivateEndpoint+0x2bc>)
 8011538:	4013      	ands	r3, r2
 801153a:	643b      	str	r3, [r7, #64]	; 0x40
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	18d3      	adds	r3, r2, r3
 8011546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011548:	490f      	ldr	r1, [pc, #60]	; (8011588 <USB_DeactivateEndpoint+0x2c0>)
 801154a:	430a      	orrs	r2, r1
 801154c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	009b      	lsls	r3, r3, #2
 8011556:	18d3      	adds	r3, r2, r3
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4a0d      	ldr	r2, [pc, #52]	; (8011590 <USB_DeactivateEndpoint+0x2c8>)
 801155c:	4013      	ands	r3, r2
 801155e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011560:	687a      	ldr	r2, [r7, #4]
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	18d3      	adds	r3, r2, r3
 801156a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801156c:	4906      	ldr	r1, [pc, #24]	; (8011588 <USB_DeactivateEndpoint+0x2c0>)
 801156e:	430a      	orrs	r2, r1
 8011570:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011572:	2300      	movs	r3, #0
}
 8011574:	0018      	movs	r0, r3
 8011576:	46bd      	mov	sp, r7
 8011578:	b016      	add	sp, #88	; 0x58
 801157a:	bd80      	pop	{r7, pc}
 801157c:	07ff8f8f 	.word	0x07ff8f8f
 8011580:	000080c0 	.word	0x000080c0
 8011584:	07ff8fbf 	.word	0x07ff8fbf
 8011588:	00008080 	.word	0x00008080
 801158c:	0000c080 	.word	0x0000c080
 8011590:	07ffbf8f 	.word	0x07ffbf8f

08011594 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8011594:	b590      	push	{r4, r7, lr}
 8011596:	b097      	sub	sp, #92	; 0x5c
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	785b      	ldrb	r3, [r3, #1]
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	d001      	beq.n	80115aa <USB_EPStartXfer+0x16>
 80115a6:	f000 fcbf 	bl	8011f28 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	699a      	ldr	r2, [r3, #24]
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	691b      	ldr	r3, [r3, #16]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d903      	bls.n	80115be <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	691b      	ldr	r3, [r3, #16]
 80115ba:	657b      	str	r3, [r7, #84]	; 0x54
 80115bc:	e002      	b.n	80115c4 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	699b      	ldr	r3, [r3, #24]
 80115c2:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	7b1b      	ldrb	r3, [r3, #12]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d12b      	bne.n	8011624 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	6959      	ldr	r1, [r3, #20]
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	88da      	ldrh	r2, [r3, #6]
 80115d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f001 f8f5 	bl	80127c8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	00db      	lsls	r3, r3, #3
 80115e4:	4ace      	ldr	r2, [pc, #824]	; (8011920 <USB_EPStartXfer+0x38c>)
 80115e6:	4694      	mov	ip, r2
 80115e8:	4463      	add	r3, ip
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	00db      	lsls	r3, r3, #3
 80115f2:	49cb      	ldr	r1, [pc, #812]	; (8011920 <USB_EPStartXfer+0x38c>)
 80115f4:	468c      	mov	ip, r1
 80115f6:	4463      	add	r3, ip
 80115f8:	0412      	lsls	r2, r2, #16
 80115fa:	0c12      	lsrs	r2, r2, #16
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	00db      	lsls	r3, r3, #3
 8011604:	4ac6      	ldr	r2, [pc, #792]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011606:	4694      	mov	ip, r2
 8011608:	4463      	add	r3, ip
 801160a:	6819      	ldr	r1, [r3, #0]
 801160c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801160e:	041a      	lsls	r2, r3, #16
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	00db      	lsls	r3, r3, #3
 8011616:	48c2      	ldr	r0, [pc, #776]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011618:	4684      	mov	ip, r0
 801161a:	4463      	add	r3, ip
 801161c:	430a      	orrs	r2, r1
 801161e:	601a      	str	r2, [r3, #0]
 8011620:	f000 fc67 	bl	8011ef2 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	78db      	ldrb	r3, [r3, #3]
 8011628:	2b02      	cmp	r3, #2
 801162a:	d000      	beq.n	801162e <USB_EPStartXfer+0x9a>
 801162c:	e31a      	b.n	8011c64 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	6a1a      	ldr	r2, [r3, #32]
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	691b      	ldr	r3, [r3, #16]
 8011636:	429a      	cmp	r2, r3
 8011638:	d800      	bhi.n	801163c <USB_EPStartXfer+0xa8>
 801163a:	e2c7      	b.n	8011bcc <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	18d3      	adds	r3, r2, r3
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	4ab6      	ldr	r2, [pc, #728]	; (8011924 <USB_EPStartXfer+0x390>)
 801164a:	4013      	ands	r3, r2
 801164c:	613b      	str	r3, [r7, #16]
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	18d3      	adds	r3, r2, r3
 8011658:	693a      	ldr	r2, [r7, #16]
 801165a:	49b3      	ldr	r1, [pc, #716]	; (8011928 <USB_EPStartXfer+0x394>)
 801165c:	430a      	orrs	r2, r1
 801165e:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	6a1a      	ldr	r2, [r3, #32]
 8011664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011666:	1ad2      	subs	r2, r2, r3
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	009b      	lsls	r3, r3, #2
 8011674:	18d3      	adds	r3, r2, r3
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2240      	movs	r2, #64	; 0x40
 801167a:	4013      	ands	r3, r2
 801167c:	d100      	bne.n	8011680 <USB_EPStartXfer+0xec>
 801167e:	e155      	b.n	801192c <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	785b      	ldrb	r3, [r3, #1]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d162      	bne.n	801174e <USB_EPStartXfer+0x1ba>
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	4aa4      	ldr	r2, [pc, #656]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011690:	4694      	mov	ip, r2
 8011692:	4463      	add	r3, ip
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	00db      	lsls	r3, r3, #3
 801169c:	49a0      	ldr	r1, [pc, #640]	; (8011920 <USB_EPStartXfer+0x38c>)
 801169e:	468c      	mov	ip, r1
 80116a0:	4463      	add	r3, ip
 80116a2:	0192      	lsls	r2, r2, #6
 80116a4:	0992      	lsrs	r2, r2, #6
 80116a6:	605a      	str	r2, [r3, #4]
 80116a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116aa:	2b3e      	cmp	r3, #62	; 0x3e
 80116ac:	d91e      	bls.n	80116ec <USB_EPStartXfer+0x158>
 80116ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116b0:	095b      	lsrs	r3, r3, #5
 80116b2:	653b      	str	r3, [r7, #80]	; 0x50
 80116b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116b6:	221f      	movs	r2, #31
 80116b8:	4013      	ands	r3, r2
 80116ba:	d102      	bne.n	80116c2 <USB_EPStartXfer+0x12e>
 80116bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116be:	3b01      	subs	r3, #1
 80116c0:	653b      	str	r3, [r7, #80]	; 0x50
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	00db      	lsls	r3, r3, #3
 80116c8:	4a95      	ldr	r2, [pc, #596]	; (8011920 <USB_EPStartXfer+0x38c>)
 80116ca:	4694      	mov	ip, r2
 80116cc:	4463      	add	r3, ip
 80116ce:	685a      	ldr	r2, [r3, #4]
 80116d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d2:	069b      	lsls	r3, r3, #26
 80116d4:	431a      	orrs	r2, r3
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	00db      	lsls	r3, r3, #3
 80116dc:	4990      	ldr	r1, [pc, #576]	; (8011920 <USB_EPStartXfer+0x38c>)
 80116de:	468c      	mov	ip, r1
 80116e0:	4463      	add	r3, ip
 80116e2:	2180      	movs	r1, #128	; 0x80
 80116e4:	0609      	lsls	r1, r1, #24
 80116e6:	430a      	orrs	r2, r1
 80116e8:	605a      	str	r2, [r3, #4]
 80116ea:	e055      	b.n	8011798 <USB_EPStartXfer+0x204>
 80116ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d111      	bne.n	8011716 <USB_EPStartXfer+0x182>
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	00db      	lsls	r3, r3, #3
 80116f8:	4a89      	ldr	r2, [pc, #548]	; (8011920 <USB_EPStartXfer+0x38c>)
 80116fa:	4694      	mov	ip, r2
 80116fc:	4463      	add	r3, ip
 80116fe:	685a      	ldr	r2, [r3, #4]
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	00db      	lsls	r3, r3, #3
 8011706:	4986      	ldr	r1, [pc, #536]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011708:	468c      	mov	ip, r1
 801170a:	4463      	add	r3, ip
 801170c:	2180      	movs	r1, #128	; 0x80
 801170e:	0609      	lsls	r1, r1, #24
 8011710:	430a      	orrs	r2, r1
 8011712:	605a      	str	r2, [r3, #4]
 8011714:	e040      	b.n	8011798 <USB_EPStartXfer+0x204>
 8011716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011718:	085b      	lsrs	r3, r3, #1
 801171a:	653b      	str	r3, [r7, #80]	; 0x50
 801171c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801171e:	2201      	movs	r2, #1
 8011720:	4013      	ands	r3, r2
 8011722:	d002      	beq.n	801172a <USB_EPStartXfer+0x196>
 8011724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011726:	3301      	adds	r3, #1
 8011728:	653b      	str	r3, [r7, #80]	; 0x50
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	00db      	lsls	r3, r3, #3
 8011730:	4a7b      	ldr	r2, [pc, #492]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011732:	4694      	mov	ip, r2
 8011734:	4463      	add	r3, ip
 8011736:	6859      	ldr	r1, [r3, #4]
 8011738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801173a:	069a      	lsls	r2, r3, #26
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	00db      	lsls	r3, r3, #3
 8011742:	4877      	ldr	r0, [pc, #476]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011744:	4684      	mov	ip, r0
 8011746:	4463      	add	r3, ip
 8011748:	430a      	orrs	r2, r1
 801174a:	605a      	str	r2, [r3, #4]
 801174c:	e024      	b.n	8011798 <USB_EPStartXfer+0x204>
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	785b      	ldrb	r3, [r3, #1]
 8011752:	2b01      	cmp	r3, #1
 8011754:	d120      	bne.n	8011798 <USB_EPStartXfer+0x204>
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	00db      	lsls	r3, r3, #3
 801175c:	4a70      	ldr	r2, [pc, #448]	; (8011920 <USB_EPStartXfer+0x38c>)
 801175e:	4694      	mov	ip, r2
 8011760:	4463      	add	r3, ip
 8011762:	685a      	ldr	r2, [r3, #4]
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	00db      	lsls	r3, r3, #3
 801176a:	496d      	ldr	r1, [pc, #436]	; (8011920 <USB_EPStartXfer+0x38c>)
 801176c:	468c      	mov	ip, r1
 801176e:	4463      	add	r3, ip
 8011770:	0412      	lsls	r2, r2, #16
 8011772:	0c12      	lsrs	r2, r2, #16
 8011774:	605a      	str	r2, [r3, #4]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	00db      	lsls	r3, r3, #3
 801177c:	4a68      	ldr	r2, [pc, #416]	; (8011920 <USB_EPStartXfer+0x38c>)
 801177e:	4694      	mov	ip, r2
 8011780:	4463      	add	r3, ip
 8011782:	6859      	ldr	r1, [r3, #4]
 8011784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011786:	041a      	lsls	r2, r3, #16
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	00db      	lsls	r3, r3, #3
 801178e:	4864      	ldr	r0, [pc, #400]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011790:	4684      	mov	ip, r0
 8011792:	4463      	add	r3, ip
 8011794:	430a      	orrs	r2, r1
 8011796:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8011798:	201a      	movs	r0, #26
 801179a:	183b      	adds	r3, r7, r0
 801179c:	683a      	ldr	r2, [r7, #0]
 801179e:	8952      	ldrh	r2, [r2, #10]
 80117a0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	6959      	ldr	r1, [r3, #20]
 80117a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117a8:	b29c      	uxth	r4, r3
 80117aa:	183b      	adds	r3, r7, r0
 80117ac:	881a      	ldrh	r2, [r3, #0]
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	0023      	movs	r3, r4
 80117b2:	f001 f809 	bl	80127c8 <USB_WritePMA>
            ep->xfer_buff += len;
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	695a      	ldr	r2, [r3, #20]
 80117ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117bc:	18d2      	adds	r2, r2, r3
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	6a1a      	ldr	r2, [r3, #32]
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	691b      	ldr	r3, [r3, #16]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d906      	bls.n	80117dc <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	6a1a      	ldr	r2, [r3, #32]
 80117d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117d4:	1ad2      	subs	r2, r2, r3
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	621a      	str	r2, [r3, #32]
 80117da:	e005      	b.n	80117e8 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	6a1b      	ldr	r3, [r3, #32]
 80117e0:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	2200      	movs	r2, #0
 80117e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	785b      	ldrb	r3, [r3, #1]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d162      	bne.n	80118b6 <USB_EPStartXfer+0x322>
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	781b      	ldrb	r3, [r3, #0]
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	4a4a      	ldr	r2, [pc, #296]	; (8011920 <USB_EPStartXfer+0x38c>)
 80117f8:	4694      	mov	ip, r2
 80117fa:	4463      	add	r3, ip
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	00db      	lsls	r3, r3, #3
 8011804:	4946      	ldr	r1, [pc, #280]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011806:	468c      	mov	ip, r1
 8011808:	4463      	add	r3, ip
 801180a:	0192      	lsls	r2, r2, #6
 801180c:	0992      	lsrs	r2, r2, #6
 801180e:	601a      	str	r2, [r3, #0]
 8011810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011812:	2b3e      	cmp	r3, #62	; 0x3e
 8011814:	d91e      	bls.n	8011854 <USB_EPStartXfer+0x2c0>
 8011816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011818:	095b      	lsrs	r3, r3, #5
 801181a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801181c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801181e:	221f      	movs	r2, #31
 8011820:	4013      	ands	r3, r2
 8011822:	d102      	bne.n	801182a <USB_EPStartXfer+0x296>
 8011824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011826:	3b01      	subs	r3, #1
 8011828:	64fb      	str	r3, [r7, #76]	; 0x4c
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	00db      	lsls	r3, r3, #3
 8011830:	4a3b      	ldr	r2, [pc, #236]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011832:	4694      	mov	ip, r2
 8011834:	4463      	add	r3, ip
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801183a:	069b      	lsls	r3, r3, #26
 801183c:	431a      	orrs	r2, r3
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	00db      	lsls	r3, r3, #3
 8011844:	4936      	ldr	r1, [pc, #216]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011846:	468c      	mov	ip, r1
 8011848:	4463      	add	r3, ip
 801184a:	2180      	movs	r1, #128	; 0x80
 801184c:	0609      	lsls	r1, r1, #24
 801184e:	430a      	orrs	r2, r1
 8011850:	601a      	str	r2, [r3, #0]
 8011852:	e055      	b.n	8011900 <USB_EPStartXfer+0x36c>
 8011854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011856:	2b00      	cmp	r3, #0
 8011858:	d111      	bne.n	801187e <USB_EPStartXfer+0x2ea>
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	00db      	lsls	r3, r3, #3
 8011860:	4a2f      	ldr	r2, [pc, #188]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011862:	4694      	mov	ip, r2
 8011864:	4463      	add	r3, ip
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	00db      	lsls	r3, r3, #3
 801186e:	492c      	ldr	r1, [pc, #176]	; (8011920 <USB_EPStartXfer+0x38c>)
 8011870:	468c      	mov	ip, r1
 8011872:	4463      	add	r3, ip
 8011874:	2180      	movs	r1, #128	; 0x80
 8011876:	0609      	lsls	r1, r1, #24
 8011878:	430a      	orrs	r2, r1
 801187a:	601a      	str	r2, [r3, #0]
 801187c:	e040      	b.n	8011900 <USB_EPStartXfer+0x36c>
 801187e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011880:	085b      	lsrs	r3, r3, #1
 8011882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011886:	2201      	movs	r2, #1
 8011888:	4013      	ands	r3, r2
 801188a:	d002      	beq.n	8011892 <USB_EPStartXfer+0x2fe>
 801188c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801188e:	3301      	adds	r3, #1
 8011890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	781b      	ldrb	r3, [r3, #0]
 8011896:	00db      	lsls	r3, r3, #3
 8011898:	4a21      	ldr	r2, [pc, #132]	; (8011920 <USB_EPStartXfer+0x38c>)
 801189a:	4694      	mov	ip, r2
 801189c:	4463      	add	r3, ip
 801189e:	6819      	ldr	r1, [r3, #0]
 80118a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118a2:	069a      	lsls	r2, r3, #26
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	00db      	lsls	r3, r3, #3
 80118aa:	481d      	ldr	r0, [pc, #116]	; (8011920 <USB_EPStartXfer+0x38c>)
 80118ac:	4684      	mov	ip, r0
 80118ae:	4463      	add	r3, ip
 80118b0:	430a      	orrs	r2, r1
 80118b2:	601a      	str	r2, [r3, #0]
 80118b4:	e024      	b.n	8011900 <USB_EPStartXfer+0x36c>
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	785b      	ldrb	r3, [r3, #1]
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d120      	bne.n	8011900 <USB_EPStartXfer+0x36c>
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	00db      	lsls	r3, r3, #3
 80118c4:	4a16      	ldr	r2, [pc, #88]	; (8011920 <USB_EPStartXfer+0x38c>)
 80118c6:	4694      	mov	ip, r2
 80118c8:	4463      	add	r3, ip
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	00db      	lsls	r3, r3, #3
 80118d2:	4913      	ldr	r1, [pc, #76]	; (8011920 <USB_EPStartXfer+0x38c>)
 80118d4:	468c      	mov	ip, r1
 80118d6:	4463      	add	r3, ip
 80118d8:	0412      	lsls	r2, r2, #16
 80118da:	0c12      	lsrs	r2, r2, #16
 80118dc:	601a      	str	r2, [r3, #0]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	00db      	lsls	r3, r3, #3
 80118e4:	4a0e      	ldr	r2, [pc, #56]	; (8011920 <USB_EPStartXfer+0x38c>)
 80118e6:	4694      	mov	ip, r2
 80118e8:	4463      	add	r3, ip
 80118ea:	6819      	ldr	r1, [r3, #0]
 80118ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118ee:	041a      	lsls	r2, r3, #16
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	00db      	lsls	r3, r3, #3
 80118f6:	480a      	ldr	r0, [pc, #40]	; (8011920 <USB_EPStartXfer+0x38c>)
 80118f8:	4684      	mov	ip, r0
 80118fa:	4463      	add	r3, ip
 80118fc:	430a      	orrs	r2, r1
 80118fe:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011900:	201a      	movs	r0, #26
 8011902:	183b      	adds	r3, r7, r0
 8011904:	683a      	ldr	r2, [r7, #0]
 8011906:	8912      	ldrh	r2, [r2, #8]
 8011908:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	6959      	ldr	r1, [r3, #20]
 801190e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011910:	b29c      	uxth	r4, r3
 8011912:	183b      	adds	r3, r7, r0
 8011914:	881a      	ldrh	r2, [r3, #0]
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	0023      	movs	r3, r4
 801191a:	f000 ff55 	bl	80127c8 <USB_WritePMA>
 801191e:	e2e8      	b.n	8011ef2 <USB_EPStartXfer+0x95e>
 8011920:	40009800 	.word	0x40009800
 8011924:	07ff8f8f 	.word	0x07ff8f8f
 8011928:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	785b      	ldrb	r3, [r3, #1]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d162      	bne.n	80119fa <USB_EPStartXfer+0x466>
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	00db      	lsls	r3, r3, #3
 801193a:	4ac7      	ldr	r2, [pc, #796]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 801193c:	4694      	mov	ip, r2
 801193e:	4463      	add	r3, ip
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	00db      	lsls	r3, r3, #3
 8011948:	49c3      	ldr	r1, [pc, #780]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 801194a:	468c      	mov	ip, r1
 801194c:	4463      	add	r3, ip
 801194e:	0192      	lsls	r2, r2, #6
 8011950:	0992      	lsrs	r2, r2, #6
 8011952:	601a      	str	r2, [r3, #0]
 8011954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011956:	2b3e      	cmp	r3, #62	; 0x3e
 8011958:	d91e      	bls.n	8011998 <USB_EPStartXfer+0x404>
 801195a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801195c:	095b      	lsrs	r3, r3, #5
 801195e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011962:	221f      	movs	r2, #31
 8011964:	4013      	ands	r3, r2
 8011966:	d102      	bne.n	801196e <USB_EPStartXfer+0x3da>
 8011968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801196a:	3b01      	subs	r3, #1
 801196c:	64bb      	str	r3, [r7, #72]	; 0x48
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	00db      	lsls	r3, r3, #3
 8011974:	4ab8      	ldr	r2, [pc, #736]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011976:	4694      	mov	ip, r2
 8011978:	4463      	add	r3, ip
 801197a:	681a      	ldr	r2, [r3, #0]
 801197c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801197e:	069b      	lsls	r3, r3, #26
 8011980:	431a      	orrs	r2, r3
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	00db      	lsls	r3, r3, #3
 8011988:	49b3      	ldr	r1, [pc, #716]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 801198a:	468c      	mov	ip, r1
 801198c:	4463      	add	r3, ip
 801198e:	2180      	movs	r1, #128	; 0x80
 8011990:	0609      	lsls	r1, r1, #24
 8011992:	430a      	orrs	r2, r1
 8011994:	601a      	str	r2, [r3, #0]
 8011996:	e055      	b.n	8011a44 <USB_EPStartXfer+0x4b0>
 8011998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801199a:	2b00      	cmp	r3, #0
 801199c:	d111      	bne.n	80119c2 <USB_EPStartXfer+0x42e>
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	00db      	lsls	r3, r3, #3
 80119a4:	4aac      	ldr	r2, [pc, #688]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 80119a6:	4694      	mov	ip, r2
 80119a8:	4463      	add	r3, ip
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	00db      	lsls	r3, r3, #3
 80119b2:	49a9      	ldr	r1, [pc, #676]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 80119b4:	468c      	mov	ip, r1
 80119b6:	4463      	add	r3, ip
 80119b8:	2180      	movs	r1, #128	; 0x80
 80119ba:	0609      	lsls	r1, r1, #24
 80119bc:	430a      	orrs	r2, r1
 80119be:	601a      	str	r2, [r3, #0]
 80119c0:	e040      	b.n	8011a44 <USB_EPStartXfer+0x4b0>
 80119c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119c4:	085b      	lsrs	r3, r3, #1
 80119c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80119c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119ca:	2201      	movs	r2, #1
 80119cc:	4013      	ands	r3, r2
 80119ce:	d002      	beq.n	80119d6 <USB_EPStartXfer+0x442>
 80119d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119d2:	3301      	adds	r3, #1
 80119d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	00db      	lsls	r3, r3, #3
 80119dc:	4a9e      	ldr	r2, [pc, #632]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 80119de:	4694      	mov	ip, r2
 80119e0:	4463      	add	r3, ip
 80119e2:	6819      	ldr	r1, [r3, #0]
 80119e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e6:	069a      	lsls	r2, r3, #26
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	00db      	lsls	r3, r3, #3
 80119ee:	489a      	ldr	r0, [pc, #616]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 80119f0:	4684      	mov	ip, r0
 80119f2:	4463      	add	r3, ip
 80119f4:	430a      	orrs	r2, r1
 80119f6:	601a      	str	r2, [r3, #0]
 80119f8:	e024      	b.n	8011a44 <USB_EPStartXfer+0x4b0>
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	785b      	ldrb	r3, [r3, #1]
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d120      	bne.n	8011a44 <USB_EPStartXfer+0x4b0>
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	00db      	lsls	r3, r3, #3
 8011a08:	4a93      	ldr	r2, [pc, #588]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011a0a:	4694      	mov	ip, r2
 8011a0c:	4463      	add	r3, ip
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	00db      	lsls	r3, r3, #3
 8011a16:	4990      	ldr	r1, [pc, #576]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011a18:	468c      	mov	ip, r1
 8011a1a:	4463      	add	r3, ip
 8011a1c:	0412      	lsls	r2, r2, #16
 8011a1e:	0c12      	lsrs	r2, r2, #16
 8011a20:	601a      	str	r2, [r3, #0]
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	781b      	ldrb	r3, [r3, #0]
 8011a26:	00db      	lsls	r3, r3, #3
 8011a28:	4a8b      	ldr	r2, [pc, #556]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011a2a:	4694      	mov	ip, r2
 8011a2c:	4463      	add	r3, ip
 8011a2e:	6819      	ldr	r1, [r3, #0]
 8011a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a32:	041a      	lsls	r2, r3, #16
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	00db      	lsls	r3, r3, #3
 8011a3a:	4887      	ldr	r0, [pc, #540]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011a3c:	4684      	mov	ip, r0
 8011a3e:	4463      	add	r3, ip
 8011a40:	430a      	orrs	r2, r1
 8011a42:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011a44:	201a      	movs	r0, #26
 8011a46:	183b      	adds	r3, r7, r0
 8011a48:	683a      	ldr	r2, [r7, #0]
 8011a4a:	8912      	ldrh	r2, [r2, #8]
 8011a4c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	6959      	ldr	r1, [r3, #20]
 8011a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a54:	b29c      	uxth	r4, r3
 8011a56:	183b      	adds	r3, r7, r0
 8011a58:	881a      	ldrh	r2, [r3, #0]
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	0023      	movs	r3, r4
 8011a5e:	f000 feb3 	bl	80127c8 <USB_WritePMA>
            ep->xfer_buff += len;
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	695a      	ldr	r2, [r3, #20]
 8011a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a68:	18d2      	adds	r2, r2, r3
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	6a1a      	ldr	r2, [r3, #32]
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	691b      	ldr	r3, [r3, #16]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d906      	bls.n	8011a88 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	6a1a      	ldr	r2, [r3, #32]
 8011a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a80:	1ad2      	subs	r2, r2, r3
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	621a      	str	r2, [r3, #32]
 8011a86:	e005      	b.n	8011a94 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	6a1b      	ldr	r3, [r3, #32]
 8011a8c:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	2200      	movs	r2, #0
 8011a92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	785b      	ldrb	r3, [r3, #1]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d162      	bne.n	8011b62 <USB_EPStartXfer+0x5ce>
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	00db      	lsls	r3, r3, #3
 8011aa2:	4a6d      	ldr	r2, [pc, #436]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011aa4:	4694      	mov	ip, r2
 8011aa6:	4463      	add	r3, ip
 8011aa8:	685a      	ldr	r2, [r3, #4]
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	00db      	lsls	r3, r3, #3
 8011ab0:	4969      	ldr	r1, [pc, #420]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011ab2:	468c      	mov	ip, r1
 8011ab4:	4463      	add	r3, ip
 8011ab6:	0192      	lsls	r2, r2, #6
 8011ab8:	0992      	lsrs	r2, r2, #6
 8011aba:	605a      	str	r2, [r3, #4]
 8011abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011abe:	2b3e      	cmp	r3, #62	; 0x3e
 8011ac0:	d91e      	bls.n	8011b00 <USB_EPStartXfer+0x56c>
 8011ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ac4:	095b      	lsrs	r3, r3, #5
 8011ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8011ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aca:	221f      	movs	r2, #31
 8011acc:	4013      	ands	r3, r2
 8011ace:	d102      	bne.n	8011ad6 <USB_EPStartXfer+0x542>
 8011ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ad2:	3b01      	subs	r3, #1
 8011ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	00db      	lsls	r3, r3, #3
 8011adc:	4a5e      	ldr	r2, [pc, #376]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011ade:	4694      	mov	ip, r2
 8011ae0:	4463      	add	r3, ip
 8011ae2:	685a      	ldr	r2, [r3, #4]
 8011ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ae6:	069b      	lsls	r3, r3, #26
 8011ae8:	431a      	orrs	r2, r3
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	00db      	lsls	r3, r3, #3
 8011af0:	4959      	ldr	r1, [pc, #356]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011af2:	468c      	mov	ip, r1
 8011af4:	4463      	add	r3, ip
 8011af6:	2180      	movs	r1, #128	; 0x80
 8011af8:	0609      	lsls	r1, r1, #24
 8011afa:	430a      	orrs	r2, r1
 8011afc:	605a      	str	r2, [r3, #4]
 8011afe:	e055      	b.n	8011bac <USB_EPStartXfer+0x618>
 8011b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d111      	bne.n	8011b2a <USB_EPStartXfer+0x596>
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	00db      	lsls	r3, r3, #3
 8011b0c:	4a52      	ldr	r2, [pc, #328]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011b0e:	4694      	mov	ip, r2
 8011b10:	4463      	add	r3, ip
 8011b12:	685a      	ldr	r2, [r3, #4]
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	00db      	lsls	r3, r3, #3
 8011b1a:	494f      	ldr	r1, [pc, #316]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011b1c:	468c      	mov	ip, r1
 8011b1e:	4463      	add	r3, ip
 8011b20:	2180      	movs	r1, #128	; 0x80
 8011b22:	0609      	lsls	r1, r1, #24
 8011b24:	430a      	orrs	r2, r1
 8011b26:	605a      	str	r2, [r3, #4]
 8011b28:	e040      	b.n	8011bac <USB_EPStartXfer+0x618>
 8011b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b2c:	085b      	lsrs	r3, r3, #1
 8011b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8011b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b32:	2201      	movs	r2, #1
 8011b34:	4013      	ands	r3, r2
 8011b36:	d002      	beq.n	8011b3e <USB_EPStartXfer+0x5aa>
 8011b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b3a:	3301      	adds	r3, #1
 8011b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	00db      	lsls	r3, r3, #3
 8011b44:	4a44      	ldr	r2, [pc, #272]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011b46:	4694      	mov	ip, r2
 8011b48:	4463      	add	r3, ip
 8011b4a:	6859      	ldr	r1, [r3, #4]
 8011b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b4e:	069a      	lsls	r2, r3, #26
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	00db      	lsls	r3, r3, #3
 8011b56:	4840      	ldr	r0, [pc, #256]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011b58:	4684      	mov	ip, r0
 8011b5a:	4463      	add	r3, ip
 8011b5c:	430a      	orrs	r2, r1
 8011b5e:	605a      	str	r2, [r3, #4]
 8011b60:	e024      	b.n	8011bac <USB_EPStartXfer+0x618>
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	785b      	ldrb	r3, [r3, #1]
 8011b66:	2b01      	cmp	r3, #1
 8011b68:	d120      	bne.n	8011bac <USB_EPStartXfer+0x618>
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	00db      	lsls	r3, r3, #3
 8011b70:	4a39      	ldr	r2, [pc, #228]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011b72:	4694      	mov	ip, r2
 8011b74:	4463      	add	r3, ip
 8011b76:	685a      	ldr	r2, [r3, #4]
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	00db      	lsls	r3, r3, #3
 8011b7e:	4936      	ldr	r1, [pc, #216]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011b80:	468c      	mov	ip, r1
 8011b82:	4463      	add	r3, ip
 8011b84:	0412      	lsls	r2, r2, #16
 8011b86:	0c12      	lsrs	r2, r2, #16
 8011b88:	605a      	str	r2, [r3, #4]
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	00db      	lsls	r3, r3, #3
 8011b90:	4a31      	ldr	r2, [pc, #196]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011b92:	4694      	mov	ip, r2
 8011b94:	4463      	add	r3, ip
 8011b96:	6859      	ldr	r1, [r3, #4]
 8011b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b9a:	041a      	lsls	r2, r3, #16
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	00db      	lsls	r3, r3, #3
 8011ba2:	482d      	ldr	r0, [pc, #180]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011ba4:	4684      	mov	ip, r0
 8011ba6:	4463      	add	r3, ip
 8011ba8:	430a      	orrs	r2, r1
 8011baa:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8011bac:	201a      	movs	r0, #26
 8011bae:	183b      	adds	r3, r7, r0
 8011bb0:	683a      	ldr	r2, [r7, #0]
 8011bb2:	8952      	ldrh	r2, [r2, #10]
 8011bb4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	6959      	ldr	r1, [r3, #20]
 8011bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bbc:	b29c      	uxth	r4, r3
 8011bbe:	183b      	adds	r3, r7, r0
 8011bc0:	881a      	ldrh	r2, [r3, #0]
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	0023      	movs	r3, r4
 8011bc6:	f000 fdff 	bl	80127c8 <USB_WritePMA>
 8011bca:	e192      	b.n	8011ef2 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	6a1b      	ldr	r3, [r3, #32]
 8011bd0:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	009b      	lsls	r3, r3, #2
 8011bda:	18d3      	adds	r3, r2, r3
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4a1f      	ldr	r2, [pc, #124]	; (8011c5c <USB_EPStartXfer+0x6c8>)
 8011be0:	4013      	ands	r3, r2
 8011be2:	617b      	str	r3, [r7, #20]
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	18d3      	adds	r3, r2, r3
 8011bee:	697a      	ldr	r2, [r7, #20]
 8011bf0:	491b      	ldr	r1, [pc, #108]	; (8011c60 <USB_EPStartXfer+0x6cc>)
 8011bf2:	430a      	orrs	r2, r1
 8011bf4:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	00db      	lsls	r3, r3, #3
 8011bfc:	4a16      	ldr	r2, [pc, #88]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011bfe:	4694      	mov	ip, r2
 8011c00:	4463      	add	r3, ip
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	00db      	lsls	r3, r3, #3
 8011c0a:	4913      	ldr	r1, [pc, #76]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011c0c:	468c      	mov	ip, r1
 8011c0e:	4463      	add	r3, ip
 8011c10:	0412      	lsls	r2, r2, #16
 8011c12:	0c12      	lsrs	r2, r2, #16
 8011c14:	601a      	str	r2, [r3, #0]
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	00db      	lsls	r3, r3, #3
 8011c1c:	4a0e      	ldr	r2, [pc, #56]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011c1e:	4694      	mov	ip, r2
 8011c20:	4463      	add	r3, ip
 8011c22:	6819      	ldr	r1, [r3, #0]
 8011c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c26:	041a      	lsls	r2, r3, #16
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	00db      	lsls	r3, r3, #3
 8011c2e:	480a      	ldr	r0, [pc, #40]	; (8011c58 <USB_EPStartXfer+0x6c4>)
 8011c30:	4684      	mov	ip, r0
 8011c32:	4463      	add	r3, ip
 8011c34:	430a      	orrs	r2, r1
 8011c36:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011c38:	201a      	movs	r0, #26
 8011c3a:	183b      	adds	r3, r7, r0
 8011c3c:	683a      	ldr	r2, [r7, #0]
 8011c3e:	8912      	ldrh	r2, [r2, #8]
 8011c40:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	6959      	ldr	r1, [r3, #20]
 8011c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c48:	b29c      	uxth	r4, r3
 8011c4a:	183b      	adds	r3, r7, r0
 8011c4c:	881a      	ldrh	r2, [r3, #0]
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	0023      	movs	r3, r4
 8011c52:	f000 fdb9 	bl	80127c8 <USB_WritePMA>
 8011c56:	e14c      	b.n	8011ef2 <USB_EPStartXfer+0x95e>
 8011c58:	40009800 	.word	0x40009800
 8011c5c:	07ff8e8f 	.word	0x07ff8e8f
 8011c60:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	6a1a      	ldr	r2, [r3, #32]
 8011c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c6a:	1ad2      	subs	r2, r2, r3
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	781b      	ldrb	r3, [r3, #0]
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	18d3      	adds	r3, r2, r3
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	2240      	movs	r2, #64	; 0x40
 8011c7e:	4013      	ands	r3, r2
 8011c80:	d100      	bne.n	8011c84 <USB_EPStartXfer+0x6f0>
 8011c82:	e09b      	b.n	8011dbc <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	785b      	ldrb	r3, [r3, #1]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d162      	bne.n	8011d52 <USB_EPStartXfer+0x7be>
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	00db      	lsls	r3, r3, #3
 8011c92:	4ad6      	ldr	r2, [pc, #856]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011c94:	4694      	mov	ip, r2
 8011c96:	4463      	add	r3, ip
 8011c98:	685a      	ldr	r2, [r3, #4]
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	00db      	lsls	r3, r3, #3
 8011ca0:	49d2      	ldr	r1, [pc, #840]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011ca2:	468c      	mov	ip, r1
 8011ca4:	4463      	add	r3, ip
 8011ca6:	0192      	lsls	r2, r2, #6
 8011ca8:	0992      	lsrs	r2, r2, #6
 8011caa:	605a      	str	r2, [r3, #4]
 8011cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cae:	2b3e      	cmp	r3, #62	; 0x3e
 8011cb0:	d91e      	bls.n	8011cf0 <USB_EPStartXfer+0x75c>
 8011cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cb4:	095b      	lsrs	r3, r3, #5
 8011cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8011cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cba:	221f      	movs	r2, #31
 8011cbc:	4013      	ands	r3, r2
 8011cbe:	d102      	bne.n	8011cc6 <USB_EPStartXfer+0x732>
 8011cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cc2:	3b01      	subs	r3, #1
 8011cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	00db      	lsls	r3, r3, #3
 8011ccc:	4ac7      	ldr	r2, [pc, #796]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011cce:	4694      	mov	ip, r2
 8011cd0:	4463      	add	r3, ip
 8011cd2:	685a      	ldr	r2, [r3, #4]
 8011cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cd6:	069b      	lsls	r3, r3, #26
 8011cd8:	431a      	orrs	r2, r3
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	00db      	lsls	r3, r3, #3
 8011ce0:	49c2      	ldr	r1, [pc, #776]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011ce2:	468c      	mov	ip, r1
 8011ce4:	4463      	add	r3, ip
 8011ce6:	2180      	movs	r1, #128	; 0x80
 8011ce8:	0609      	lsls	r1, r1, #24
 8011cea:	430a      	orrs	r2, r1
 8011cec:	605a      	str	r2, [r3, #4]
 8011cee:	e055      	b.n	8011d9c <USB_EPStartXfer+0x808>
 8011cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d111      	bne.n	8011d1a <USB_EPStartXfer+0x786>
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	781b      	ldrb	r3, [r3, #0]
 8011cfa:	00db      	lsls	r3, r3, #3
 8011cfc:	4abb      	ldr	r2, [pc, #748]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011cfe:	4694      	mov	ip, r2
 8011d00:	4463      	add	r3, ip
 8011d02:	685a      	ldr	r2, [r3, #4]
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	00db      	lsls	r3, r3, #3
 8011d0a:	49b8      	ldr	r1, [pc, #736]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011d0c:	468c      	mov	ip, r1
 8011d0e:	4463      	add	r3, ip
 8011d10:	2180      	movs	r1, #128	; 0x80
 8011d12:	0609      	lsls	r1, r1, #24
 8011d14:	430a      	orrs	r2, r1
 8011d16:	605a      	str	r2, [r3, #4]
 8011d18:	e040      	b.n	8011d9c <USB_EPStartXfer+0x808>
 8011d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d1c:	085b      	lsrs	r3, r3, #1
 8011d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8011d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d22:	2201      	movs	r2, #1
 8011d24:	4013      	ands	r3, r2
 8011d26:	d002      	beq.n	8011d2e <USB_EPStartXfer+0x79a>
 8011d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	00db      	lsls	r3, r3, #3
 8011d34:	4aad      	ldr	r2, [pc, #692]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011d36:	4694      	mov	ip, r2
 8011d38:	4463      	add	r3, ip
 8011d3a:	6859      	ldr	r1, [r3, #4]
 8011d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d3e:	069a      	lsls	r2, r3, #26
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	00db      	lsls	r3, r3, #3
 8011d46:	48a9      	ldr	r0, [pc, #676]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011d48:	4684      	mov	ip, r0
 8011d4a:	4463      	add	r3, ip
 8011d4c:	430a      	orrs	r2, r1
 8011d4e:	605a      	str	r2, [r3, #4]
 8011d50:	e024      	b.n	8011d9c <USB_EPStartXfer+0x808>
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	785b      	ldrb	r3, [r3, #1]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d120      	bne.n	8011d9c <USB_EPStartXfer+0x808>
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	00db      	lsls	r3, r3, #3
 8011d60:	4aa2      	ldr	r2, [pc, #648]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011d62:	4694      	mov	ip, r2
 8011d64:	4463      	add	r3, ip
 8011d66:	685a      	ldr	r2, [r3, #4]
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	00db      	lsls	r3, r3, #3
 8011d6e:	499f      	ldr	r1, [pc, #636]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011d70:	468c      	mov	ip, r1
 8011d72:	4463      	add	r3, ip
 8011d74:	0412      	lsls	r2, r2, #16
 8011d76:	0c12      	lsrs	r2, r2, #16
 8011d78:	605a      	str	r2, [r3, #4]
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	00db      	lsls	r3, r3, #3
 8011d80:	4a9a      	ldr	r2, [pc, #616]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011d82:	4694      	mov	ip, r2
 8011d84:	4463      	add	r3, ip
 8011d86:	6859      	ldr	r1, [r3, #4]
 8011d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d8a:	041a      	lsls	r2, r3, #16
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	00db      	lsls	r3, r3, #3
 8011d92:	4896      	ldr	r0, [pc, #600]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011d94:	4684      	mov	ip, r0
 8011d96:	4463      	add	r3, ip
 8011d98:	430a      	orrs	r2, r1
 8011d9a:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8011d9c:	201a      	movs	r0, #26
 8011d9e:	183b      	adds	r3, r7, r0
 8011da0:	683a      	ldr	r2, [r7, #0]
 8011da2:	8952      	ldrh	r2, [r2, #10]
 8011da4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	6959      	ldr	r1, [r3, #20]
 8011daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dac:	b29c      	uxth	r4, r3
 8011dae:	183b      	adds	r3, r7, r0
 8011db0:	881a      	ldrh	r2, [r3, #0]
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	0023      	movs	r3, r4
 8011db6:	f000 fd07 	bl	80127c8 <USB_WritePMA>
 8011dba:	e09a      	b.n	8011ef2 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	785b      	ldrb	r3, [r3, #1]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d162      	bne.n	8011e8a <USB_EPStartXfer+0x8f6>
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	00db      	lsls	r3, r3, #3
 8011dca:	4a88      	ldr	r2, [pc, #544]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011dcc:	4694      	mov	ip, r2
 8011dce:	4463      	add	r3, ip
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	00db      	lsls	r3, r3, #3
 8011dd8:	4984      	ldr	r1, [pc, #528]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011dda:	468c      	mov	ip, r1
 8011ddc:	4463      	add	r3, ip
 8011dde:	0192      	lsls	r2, r2, #6
 8011de0:	0992      	lsrs	r2, r2, #6
 8011de2:	601a      	str	r2, [r3, #0]
 8011de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011de6:	2b3e      	cmp	r3, #62	; 0x3e
 8011de8:	d91e      	bls.n	8011e28 <USB_EPStartXfer+0x894>
 8011dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dec:	095b      	lsrs	r3, r3, #5
 8011dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011df2:	221f      	movs	r2, #31
 8011df4:	4013      	ands	r3, r2
 8011df6:	d102      	bne.n	8011dfe <USB_EPStartXfer+0x86a>
 8011df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dfa:	3b01      	subs	r3, #1
 8011dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	00db      	lsls	r3, r3, #3
 8011e04:	4a79      	ldr	r2, [pc, #484]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011e06:	4694      	mov	ip, r2
 8011e08:	4463      	add	r3, ip
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e0e:	069b      	lsls	r3, r3, #26
 8011e10:	431a      	orrs	r2, r3
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	4974      	ldr	r1, [pc, #464]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011e1a:	468c      	mov	ip, r1
 8011e1c:	4463      	add	r3, ip
 8011e1e:	2180      	movs	r1, #128	; 0x80
 8011e20:	0609      	lsls	r1, r1, #24
 8011e22:	430a      	orrs	r2, r1
 8011e24:	601a      	str	r2, [r3, #0]
 8011e26:	e055      	b.n	8011ed4 <USB_EPStartXfer+0x940>
 8011e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d111      	bne.n	8011e52 <USB_EPStartXfer+0x8be>
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	00db      	lsls	r3, r3, #3
 8011e34:	4a6d      	ldr	r2, [pc, #436]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011e36:	4694      	mov	ip, r2
 8011e38:	4463      	add	r3, ip
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	00db      	lsls	r3, r3, #3
 8011e42:	496a      	ldr	r1, [pc, #424]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011e44:	468c      	mov	ip, r1
 8011e46:	4463      	add	r3, ip
 8011e48:	2180      	movs	r1, #128	; 0x80
 8011e4a:	0609      	lsls	r1, r1, #24
 8011e4c:	430a      	orrs	r2, r1
 8011e4e:	601a      	str	r2, [r3, #0]
 8011e50:	e040      	b.n	8011ed4 <USB_EPStartXfer+0x940>
 8011e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e54:	085b      	lsrs	r3, r3, #1
 8011e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	4013      	ands	r3, r2
 8011e5e:	d002      	beq.n	8011e66 <USB_EPStartXfer+0x8d2>
 8011e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e62:	3301      	adds	r3, #1
 8011e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	00db      	lsls	r3, r3, #3
 8011e6c:	4a5f      	ldr	r2, [pc, #380]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011e6e:	4694      	mov	ip, r2
 8011e70:	4463      	add	r3, ip
 8011e72:	6819      	ldr	r1, [r3, #0]
 8011e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e76:	069a      	lsls	r2, r3, #26
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	00db      	lsls	r3, r3, #3
 8011e7e:	485b      	ldr	r0, [pc, #364]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011e80:	4684      	mov	ip, r0
 8011e82:	4463      	add	r3, ip
 8011e84:	430a      	orrs	r2, r1
 8011e86:	601a      	str	r2, [r3, #0]
 8011e88:	e024      	b.n	8011ed4 <USB_EPStartXfer+0x940>
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	785b      	ldrb	r3, [r3, #1]
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	d120      	bne.n	8011ed4 <USB_EPStartXfer+0x940>
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	00db      	lsls	r3, r3, #3
 8011e98:	4a54      	ldr	r2, [pc, #336]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011e9a:	4694      	mov	ip, r2
 8011e9c:	4463      	add	r3, ip
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	00db      	lsls	r3, r3, #3
 8011ea6:	4951      	ldr	r1, [pc, #324]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011ea8:	468c      	mov	ip, r1
 8011eaa:	4463      	add	r3, ip
 8011eac:	0412      	lsls	r2, r2, #16
 8011eae:	0c12      	lsrs	r2, r2, #16
 8011eb0:	601a      	str	r2, [r3, #0]
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	00db      	lsls	r3, r3, #3
 8011eb8:	4a4c      	ldr	r2, [pc, #304]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011eba:	4694      	mov	ip, r2
 8011ebc:	4463      	add	r3, ip
 8011ebe:	6819      	ldr	r1, [r3, #0]
 8011ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ec2:	041a      	lsls	r2, r3, #16
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	00db      	lsls	r3, r3, #3
 8011eca:	4848      	ldr	r0, [pc, #288]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011ecc:	4684      	mov	ip, r0
 8011ece:	4463      	add	r3, ip
 8011ed0:	430a      	orrs	r2, r1
 8011ed2:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011ed4:	201a      	movs	r0, #26
 8011ed6:	183b      	adds	r3, r7, r0
 8011ed8:	683a      	ldr	r2, [r7, #0]
 8011eda:	8912      	ldrh	r2, [r2, #8]
 8011edc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	6959      	ldr	r1, [r3, #20]
 8011ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ee4:	b29c      	uxth	r4, r3
 8011ee6:	183b      	adds	r3, r7, r0
 8011ee8:	881a      	ldrh	r2, [r3, #0]
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	0023      	movs	r3, r4
 8011eee:	f000 fc6b 	bl	80127c8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	18d3      	adds	r3, r2, r3
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	4a3c      	ldr	r2, [pc, #240]	; (8011ff0 <USB_EPStartXfer+0xa5c>)
 8011f00:	4013      	ands	r3, r2
 8011f02:	60fb      	str	r3, [r7, #12]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2210      	movs	r2, #16
 8011f08:	4053      	eors	r3, r2
 8011f0a:	60fb      	str	r3, [r7, #12]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	2220      	movs	r2, #32
 8011f10:	4053      	eors	r3, r2
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	18d3      	adds	r3, r2, r3
 8011f1e:	68fa      	ldr	r2, [r7, #12]
 8011f20:	4934      	ldr	r1, [pc, #208]	; (8011ff4 <USB_EPStartXfer+0xa60>)
 8011f22:	430a      	orrs	r2, r1
 8011f24:	601a      	str	r2, [r3, #0]
 8011f26:	e340      	b.n	80125aa <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	7b1b      	ldrb	r3, [r3, #12]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d000      	beq.n	8011f32 <USB_EPStartXfer+0x99e>
 8011f30:	e07e      	b.n	8012030 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	699a      	ldr	r2, [r3, #24]
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d909      	bls.n	8011f52 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	691b      	ldr	r3, [r3, #16]
 8011f42:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	699a      	ldr	r2, [r3, #24]
 8011f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f4a:	1ad2      	subs	r2, r2, r3
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	619a      	str	r2, [r3, #24]
 8011f50:	e005      	b.n	8011f5e <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	699b      	ldr	r3, [r3, #24]
 8011f56:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	00db      	lsls	r3, r3, #3
 8011f64:	4a21      	ldr	r2, [pc, #132]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011f66:	4694      	mov	ip, r2
 8011f68:	4463      	add	r3, ip
 8011f6a:	685a      	ldr	r2, [r3, #4]
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	00db      	lsls	r3, r3, #3
 8011f72:	491e      	ldr	r1, [pc, #120]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011f74:	468c      	mov	ip, r1
 8011f76:	4463      	add	r3, ip
 8011f78:	0192      	lsls	r2, r2, #6
 8011f7a:	0992      	lsrs	r2, r2, #6
 8011f7c:	605a      	str	r2, [r3, #4]
 8011f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f80:	2b3e      	cmp	r3, #62	; 0x3e
 8011f82:	d91e      	bls.n	8011fc2 <USB_EPStartXfer+0xa2e>
 8011f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f86:	095b      	lsrs	r3, r3, #5
 8011f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f8c:	221f      	movs	r2, #31
 8011f8e:	4013      	ands	r3, r2
 8011f90:	d102      	bne.n	8011f98 <USB_EPStartXfer+0xa04>
 8011f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f94:	3b01      	subs	r3, #1
 8011f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	00db      	lsls	r3, r3, #3
 8011f9e:	4a13      	ldr	r2, [pc, #76]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011fa0:	4694      	mov	ip, r2
 8011fa2:	4463      	add	r3, ip
 8011fa4:	685a      	ldr	r2, [r3, #4]
 8011fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa8:	069b      	lsls	r3, r3, #26
 8011faa:	431a      	orrs	r2, r3
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	00db      	lsls	r3, r3, #3
 8011fb2:	490e      	ldr	r1, [pc, #56]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011fb4:	468c      	mov	ip, r1
 8011fb6:	4463      	add	r3, ip
 8011fb8:	2180      	movs	r1, #128	; 0x80
 8011fba:	0609      	lsls	r1, r1, #24
 8011fbc:	430a      	orrs	r2, r1
 8011fbe:	605a      	str	r2, [r3, #4]
 8011fc0:	e2d7      	b.n	8012572 <USB_EPStartXfer+0xfde>
 8011fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d117      	bne.n	8011ff8 <USB_EPStartXfer+0xa64>
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	00db      	lsls	r3, r3, #3
 8011fce:	4a07      	ldr	r2, [pc, #28]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011fd0:	4694      	mov	ip, r2
 8011fd2:	4463      	add	r3, ip
 8011fd4:	685a      	ldr	r2, [r3, #4]
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	00db      	lsls	r3, r3, #3
 8011fdc:	4903      	ldr	r1, [pc, #12]	; (8011fec <USB_EPStartXfer+0xa58>)
 8011fde:	468c      	mov	ip, r1
 8011fe0:	4463      	add	r3, ip
 8011fe2:	2180      	movs	r1, #128	; 0x80
 8011fe4:	0609      	lsls	r1, r1, #24
 8011fe6:	430a      	orrs	r2, r1
 8011fe8:	605a      	str	r2, [r3, #4]
 8011fea:	e2c2      	b.n	8012572 <USB_EPStartXfer+0xfde>
 8011fec:	40009800 	.word	0x40009800
 8011ff0:	07ff8fbf 	.word	0x07ff8fbf
 8011ff4:	00008080 	.word	0x00008080
 8011ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ffa:	085b      	lsrs	r3, r3, #1
 8011ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012000:	2201      	movs	r2, #1
 8012002:	4013      	ands	r3, r2
 8012004:	d002      	beq.n	801200c <USB_EPStartXfer+0xa78>
 8012006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012008:	3301      	adds	r3, #1
 801200a:	63bb      	str	r3, [r7, #56]	; 0x38
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	00db      	lsls	r3, r3, #3
 8012012:	4ac4      	ldr	r2, [pc, #784]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012014:	4694      	mov	ip, r2
 8012016:	4463      	add	r3, ip
 8012018:	6859      	ldr	r1, [r3, #4]
 801201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201c:	069a      	lsls	r2, r3, #26
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	00db      	lsls	r3, r3, #3
 8012024:	48bf      	ldr	r0, [pc, #764]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012026:	4684      	mov	ip, r0
 8012028:	4463      	add	r3, ip
 801202a:	430a      	orrs	r2, r1
 801202c:	605a      	str	r2, [r3, #4]
 801202e:	e2a0      	b.n	8012572 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	78db      	ldrb	r3, [r3, #3]
 8012034:	2b02      	cmp	r3, #2
 8012036:	d000      	beq.n	801203a <USB_EPStartXfer+0xaa6>
 8012038:	e15f      	b.n	80122fa <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	785b      	ldrb	r3, [r3, #1]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d168      	bne.n	8012114 <USB_EPStartXfer+0xb80>
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	00db      	lsls	r3, r3, #3
 8012048:	4ab6      	ldr	r2, [pc, #728]	; (8012324 <USB_EPStartXfer+0xd90>)
 801204a:	4694      	mov	ip, r2
 801204c:	4463      	add	r3, ip
 801204e:	681a      	ldr	r2, [r3, #0]
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	00db      	lsls	r3, r3, #3
 8012056:	49b3      	ldr	r1, [pc, #716]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012058:	468c      	mov	ip, r1
 801205a:	4463      	add	r3, ip
 801205c:	0192      	lsls	r2, r2, #6
 801205e:	0992      	lsrs	r2, r2, #6
 8012060:	601a      	str	r2, [r3, #0]
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	691b      	ldr	r3, [r3, #16]
 8012066:	2b3e      	cmp	r3, #62	; 0x3e
 8012068:	d920      	bls.n	80120ac <USB_EPStartXfer+0xb18>
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	095b      	lsrs	r3, r3, #5
 8012070:	637b      	str	r3, [r7, #52]	; 0x34
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	691b      	ldr	r3, [r3, #16]
 8012076:	221f      	movs	r2, #31
 8012078:	4013      	ands	r3, r2
 801207a:	d102      	bne.n	8012082 <USB_EPStartXfer+0xaee>
 801207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801207e:	3b01      	subs	r3, #1
 8012080:	637b      	str	r3, [r7, #52]	; 0x34
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	4aa6      	ldr	r2, [pc, #664]	; (8012324 <USB_EPStartXfer+0xd90>)
 801208a:	4694      	mov	ip, r2
 801208c:	4463      	add	r3, ip
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012092:	069b      	lsls	r3, r3, #26
 8012094:	431a      	orrs	r2, r3
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	00db      	lsls	r3, r3, #3
 801209c:	49a1      	ldr	r1, [pc, #644]	; (8012324 <USB_EPStartXfer+0xd90>)
 801209e:	468c      	mov	ip, r1
 80120a0:	4463      	add	r3, ip
 80120a2:	2180      	movs	r1, #128	; 0x80
 80120a4:	0609      	lsls	r1, r1, #24
 80120a6:	430a      	orrs	r2, r1
 80120a8:	601a      	str	r2, [r3, #0]
 80120aa:	e059      	b.n	8012160 <USB_EPStartXfer+0xbcc>
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	691b      	ldr	r3, [r3, #16]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d111      	bne.n	80120d8 <USB_EPStartXfer+0xb44>
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	00db      	lsls	r3, r3, #3
 80120ba:	4a9a      	ldr	r2, [pc, #616]	; (8012324 <USB_EPStartXfer+0xd90>)
 80120bc:	4694      	mov	ip, r2
 80120be:	4463      	add	r3, ip
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	00db      	lsls	r3, r3, #3
 80120c8:	4996      	ldr	r1, [pc, #600]	; (8012324 <USB_EPStartXfer+0xd90>)
 80120ca:	468c      	mov	ip, r1
 80120cc:	4463      	add	r3, ip
 80120ce:	2180      	movs	r1, #128	; 0x80
 80120d0:	0609      	lsls	r1, r1, #24
 80120d2:	430a      	orrs	r2, r1
 80120d4:	601a      	str	r2, [r3, #0]
 80120d6:	e043      	b.n	8012160 <USB_EPStartXfer+0xbcc>
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	691b      	ldr	r3, [r3, #16]
 80120dc:	085b      	lsrs	r3, r3, #1
 80120de:	637b      	str	r3, [r7, #52]	; 0x34
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	691b      	ldr	r3, [r3, #16]
 80120e4:	2201      	movs	r2, #1
 80120e6:	4013      	ands	r3, r2
 80120e8:	d002      	beq.n	80120f0 <USB_EPStartXfer+0xb5c>
 80120ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120ec:	3301      	adds	r3, #1
 80120ee:	637b      	str	r3, [r7, #52]	; 0x34
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	00db      	lsls	r3, r3, #3
 80120f6:	4a8b      	ldr	r2, [pc, #556]	; (8012324 <USB_EPStartXfer+0xd90>)
 80120f8:	4694      	mov	ip, r2
 80120fa:	4463      	add	r3, ip
 80120fc:	6819      	ldr	r1, [r3, #0]
 80120fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012100:	069a      	lsls	r2, r3, #26
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	00db      	lsls	r3, r3, #3
 8012108:	4886      	ldr	r0, [pc, #536]	; (8012324 <USB_EPStartXfer+0xd90>)
 801210a:	4684      	mov	ip, r0
 801210c:	4463      	add	r3, ip
 801210e:	430a      	orrs	r2, r1
 8012110:	601a      	str	r2, [r3, #0]
 8012112:	e025      	b.n	8012160 <USB_EPStartXfer+0xbcc>
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	785b      	ldrb	r3, [r3, #1]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d121      	bne.n	8012160 <USB_EPStartXfer+0xbcc>
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	00db      	lsls	r3, r3, #3
 8012122:	4a80      	ldr	r2, [pc, #512]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012124:	4694      	mov	ip, r2
 8012126:	4463      	add	r3, ip
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	00db      	lsls	r3, r3, #3
 8012130:	497c      	ldr	r1, [pc, #496]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012132:	468c      	mov	ip, r1
 8012134:	4463      	add	r3, ip
 8012136:	0412      	lsls	r2, r2, #16
 8012138:	0c12      	lsrs	r2, r2, #16
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	00db      	lsls	r3, r3, #3
 8012142:	4a78      	ldr	r2, [pc, #480]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012144:	4694      	mov	ip, r2
 8012146:	4463      	add	r3, ip
 8012148:	6819      	ldr	r1, [r3, #0]
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	691b      	ldr	r3, [r3, #16]
 801214e:	041a      	lsls	r2, r3, #16
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	00db      	lsls	r3, r3, #3
 8012156:	4873      	ldr	r0, [pc, #460]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012158:	4684      	mov	ip, r0
 801215a:	4463      	add	r3, ip
 801215c:	430a      	orrs	r2, r1
 801215e:	601a      	str	r2, [r3, #0]
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	785b      	ldrb	r3, [r3, #1]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d168      	bne.n	801223a <USB_EPStartXfer+0xca6>
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	00db      	lsls	r3, r3, #3
 801216e:	4a6d      	ldr	r2, [pc, #436]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012170:	4694      	mov	ip, r2
 8012172:	4463      	add	r3, ip
 8012174:	685a      	ldr	r2, [r3, #4]
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	00db      	lsls	r3, r3, #3
 801217c:	4969      	ldr	r1, [pc, #420]	; (8012324 <USB_EPStartXfer+0xd90>)
 801217e:	468c      	mov	ip, r1
 8012180:	4463      	add	r3, ip
 8012182:	0192      	lsls	r2, r2, #6
 8012184:	0992      	lsrs	r2, r2, #6
 8012186:	605a      	str	r2, [r3, #4]
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	691b      	ldr	r3, [r3, #16]
 801218c:	2b3e      	cmp	r3, #62	; 0x3e
 801218e:	d920      	bls.n	80121d2 <USB_EPStartXfer+0xc3e>
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	691b      	ldr	r3, [r3, #16]
 8012194:	095b      	lsrs	r3, r3, #5
 8012196:	633b      	str	r3, [r7, #48]	; 0x30
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	691b      	ldr	r3, [r3, #16]
 801219c:	221f      	movs	r2, #31
 801219e:	4013      	ands	r3, r2
 80121a0:	d102      	bne.n	80121a8 <USB_EPStartXfer+0xc14>
 80121a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a4:	3b01      	subs	r3, #1
 80121a6:	633b      	str	r3, [r7, #48]	; 0x30
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	00db      	lsls	r3, r3, #3
 80121ae:	4a5d      	ldr	r2, [pc, #372]	; (8012324 <USB_EPStartXfer+0xd90>)
 80121b0:	4694      	mov	ip, r2
 80121b2:	4463      	add	r3, ip
 80121b4:	685a      	ldr	r2, [r3, #4]
 80121b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b8:	069b      	lsls	r3, r3, #26
 80121ba:	431a      	orrs	r2, r3
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	4958      	ldr	r1, [pc, #352]	; (8012324 <USB_EPStartXfer+0xd90>)
 80121c4:	468c      	mov	ip, r1
 80121c6:	4463      	add	r3, ip
 80121c8:	2180      	movs	r1, #128	; 0x80
 80121ca:	0609      	lsls	r1, r1, #24
 80121cc:	430a      	orrs	r2, r1
 80121ce:	605a      	str	r2, [r3, #4]
 80121d0:	e059      	b.n	8012286 <USB_EPStartXfer+0xcf2>
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	691b      	ldr	r3, [r3, #16]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d111      	bne.n	80121fe <USB_EPStartXfer+0xc6a>
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	00db      	lsls	r3, r3, #3
 80121e0:	4a50      	ldr	r2, [pc, #320]	; (8012324 <USB_EPStartXfer+0xd90>)
 80121e2:	4694      	mov	ip, r2
 80121e4:	4463      	add	r3, ip
 80121e6:	685a      	ldr	r2, [r3, #4]
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	00db      	lsls	r3, r3, #3
 80121ee:	494d      	ldr	r1, [pc, #308]	; (8012324 <USB_EPStartXfer+0xd90>)
 80121f0:	468c      	mov	ip, r1
 80121f2:	4463      	add	r3, ip
 80121f4:	2180      	movs	r1, #128	; 0x80
 80121f6:	0609      	lsls	r1, r1, #24
 80121f8:	430a      	orrs	r2, r1
 80121fa:	605a      	str	r2, [r3, #4]
 80121fc:	e043      	b.n	8012286 <USB_EPStartXfer+0xcf2>
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	691b      	ldr	r3, [r3, #16]
 8012202:	085b      	lsrs	r3, r3, #1
 8012204:	633b      	str	r3, [r7, #48]	; 0x30
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	691b      	ldr	r3, [r3, #16]
 801220a:	2201      	movs	r2, #1
 801220c:	4013      	ands	r3, r2
 801220e:	d002      	beq.n	8012216 <USB_EPStartXfer+0xc82>
 8012210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012212:	3301      	adds	r3, #1
 8012214:	633b      	str	r3, [r7, #48]	; 0x30
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	00db      	lsls	r3, r3, #3
 801221c:	4a41      	ldr	r2, [pc, #260]	; (8012324 <USB_EPStartXfer+0xd90>)
 801221e:	4694      	mov	ip, r2
 8012220:	4463      	add	r3, ip
 8012222:	6859      	ldr	r1, [r3, #4]
 8012224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012226:	069a      	lsls	r2, r3, #26
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	00db      	lsls	r3, r3, #3
 801222e:	483d      	ldr	r0, [pc, #244]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012230:	4684      	mov	ip, r0
 8012232:	4463      	add	r3, ip
 8012234:	430a      	orrs	r2, r1
 8012236:	605a      	str	r2, [r3, #4]
 8012238:	e025      	b.n	8012286 <USB_EPStartXfer+0xcf2>
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	785b      	ldrb	r3, [r3, #1]
 801223e:	2b01      	cmp	r3, #1
 8012240:	d121      	bne.n	8012286 <USB_EPStartXfer+0xcf2>
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	00db      	lsls	r3, r3, #3
 8012248:	4a36      	ldr	r2, [pc, #216]	; (8012324 <USB_EPStartXfer+0xd90>)
 801224a:	4694      	mov	ip, r2
 801224c:	4463      	add	r3, ip
 801224e:	685a      	ldr	r2, [r3, #4]
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	00db      	lsls	r3, r3, #3
 8012256:	4933      	ldr	r1, [pc, #204]	; (8012324 <USB_EPStartXfer+0xd90>)
 8012258:	468c      	mov	ip, r1
 801225a:	4463      	add	r3, ip
 801225c:	0412      	lsls	r2, r2, #16
 801225e:	0c12      	lsrs	r2, r2, #16
 8012260:	605a      	str	r2, [r3, #4]
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	00db      	lsls	r3, r3, #3
 8012268:	4a2e      	ldr	r2, [pc, #184]	; (8012324 <USB_EPStartXfer+0xd90>)
 801226a:	4694      	mov	ip, r2
 801226c:	4463      	add	r3, ip
 801226e:	6859      	ldr	r1, [r3, #4]
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	691b      	ldr	r3, [r3, #16]
 8012274:	041a      	lsls	r2, r3, #16
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	00db      	lsls	r3, r3, #3
 801227c:	4829      	ldr	r0, [pc, #164]	; (8012324 <USB_EPStartXfer+0xd90>)
 801227e:	4684      	mov	ip, r0
 8012280:	4463      	add	r3, ip
 8012282:	430a      	orrs	r2, r1
 8012284:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	69db      	ldr	r3, [r3, #28]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d100      	bne.n	8012290 <USB_EPStartXfer+0xcfc>
 801228e:	e170      	b.n	8012572 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	18d3      	adds	r3, r2, r3
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	2126      	movs	r1, #38	; 0x26
 801229e:	187b      	adds	r3, r7, r1
 80122a0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80122a2:	187b      	adds	r3, r7, r1
 80122a4:	881a      	ldrh	r2, [r3, #0]
 80122a6:	2380      	movs	r3, #128	; 0x80
 80122a8:	01db      	lsls	r3, r3, #7
 80122aa:	4013      	ands	r3, r2
 80122ac:	d004      	beq.n	80122b8 <USB_EPStartXfer+0xd24>
 80122ae:	187b      	adds	r3, r7, r1
 80122b0:	881b      	ldrh	r3, [r3, #0]
 80122b2:	2240      	movs	r2, #64	; 0x40
 80122b4:	4013      	ands	r3, r2
 80122b6:	d10d      	bne.n	80122d4 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80122b8:	2126      	movs	r1, #38	; 0x26
 80122ba:	187b      	adds	r3, r7, r1
 80122bc:	881a      	ldrh	r2, [r3, #0]
 80122be:	2380      	movs	r3, #128	; 0x80
 80122c0:	01db      	lsls	r3, r3, #7
 80122c2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80122c4:	d000      	beq.n	80122c8 <USB_EPStartXfer+0xd34>
 80122c6:	e154      	b.n	8012572 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80122c8:	187b      	adds	r3, r7, r1
 80122ca:	881b      	ldrh	r3, [r3, #0]
 80122cc:	2240      	movs	r2, #64	; 0x40
 80122ce:	4013      	ands	r3, r2
 80122d0:	d000      	beq.n	80122d4 <USB_EPStartXfer+0xd40>
 80122d2:	e14e      	b.n	8012572 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	009b      	lsls	r3, r3, #2
 80122dc:	18d3      	adds	r3, r2, r3
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	4a11      	ldr	r2, [pc, #68]	; (8012328 <USB_EPStartXfer+0xd94>)
 80122e2:	4013      	ands	r3, r2
 80122e4:	623b      	str	r3, [r7, #32]
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	009b      	lsls	r3, r3, #2
 80122ee:	18d3      	adds	r3, r2, r3
 80122f0:	6a3a      	ldr	r2, [r7, #32]
 80122f2:	490e      	ldr	r1, [pc, #56]	; (801232c <USB_EPStartXfer+0xd98>)
 80122f4:	430a      	orrs	r2, r1
 80122f6:	601a      	str	r2, [r3, #0]
 80122f8:	e13b      	b.n	8012572 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	78db      	ldrb	r3, [r3, #3]
 80122fe:	2b01      	cmp	r3, #1
 8012300:	d000      	beq.n	8012304 <USB_EPStartXfer+0xd70>
 8012302:	e134      	b.n	801256e <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	699a      	ldr	r2, [r3, #24]
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	691b      	ldr	r3, [r3, #16]
 801230c:	429a      	cmp	r2, r3
 801230e:	d90f      	bls.n	8012330 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	691b      	ldr	r3, [r3, #16]
 8012314:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	699a      	ldr	r2, [r3, #24]
 801231a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801231c:	1ad2      	subs	r2, r2, r3
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	619a      	str	r2, [r3, #24]
 8012322:	e00b      	b.n	801233c <USB_EPStartXfer+0xda8>
 8012324:	40009800 	.word	0x40009800
 8012328:	07ff8f8f 	.word	0x07ff8f8f
 801232c:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	699b      	ldr	r3, [r3, #24]
 8012334:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	2200      	movs	r2, #0
 801233a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	785b      	ldrb	r3, [r3, #1]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d162      	bne.n	801240a <USB_EPStartXfer+0xe76>
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	00db      	lsls	r3, r3, #3
 801234a:	4a9a      	ldr	r2, [pc, #616]	; (80125b4 <USB_EPStartXfer+0x1020>)
 801234c:	4694      	mov	ip, r2
 801234e:	4463      	add	r3, ip
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	4996      	ldr	r1, [pc, #600]	; (80125b4 <USB_EPStartXfer+0x1020>)
 801235a:	468c      	mov	ip, r1
 801235c:	4463      	add	r3, ip
 801235e:	0192      	lsls	r2, r2, #6
 8012360:	0992      	lsrs	r2, r2, #6
 8012362:	601a      	str	r2, [r3, #0]
 8012364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012366:	2b3e      	cmp	r3, #62	; 0x3e
 8012368:	d91e      	bls.n	80123a8 <USB_EPStartXfer+0xe14>
 801236a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801236c:	095b      	lsrs	r3, r3, #5
 801236e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012372:	221f      	movs	r2, #31
 8012374:	4013      	ands	r3, r2
 8012376:	d102      	bne.n	801237e <USB_EPStartXfer+0xdea>
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	3b01      	subs	r3, #1
 801237c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	00db      	lsls	r3, r3, #3
 8012384:	4a8b      	ldr	r2, [pc, #556]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012386:	4694      	mov	ip, r2
 8012388:	4463      	add	r3, ip
 801238a:	681a      	ldr	r2, [r3, #0]
 801238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238e:	069b      	lsls	r3, r3, #26
 8012390:	431a      	orrs	r2, r3
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	00db      	lsls	r3, r3, #3
 8012398:	4986      	ldr	r1, [pc, #536]	; (80125b4 <USB_EPStartXfer+0x1020>)
 801239a:	468c      	mov	ip, r1
 801239c:	4463      	add	r3, ip
 801239e:	2180      	movs	r1, #128	; 0x80
 80123a0:	0609      	lsls	r1, r1, #24
 80123a2:	430a      	orrs	r2, r1
 80123a4:	601a      	str	r2, [r3, #0]
 80123a6:	e055      	b.n	8012454 <USB_EPStartXfer+0xec0>
 80123a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d111      	bne.n	80123d2 <USB_EPStartXfer+0xe3e>
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	00db      	lsls	r3, r3, #3
 80123b4:	4a7f      	ldr	r2, [pc, #508]	; (80125b4 <USB_EPStartXfer+0x1020>)
 80123b6:	4694      	mov	ip, r2
 80123b8:	4463      	add	r3, ip
 80123ba:	681a      	ldr	r2, [r3, #0]
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	00db      	lsls	r3, r3, #3
 80123c2:	497c      	ldr	r1, [pc, #496]	; (80125b4 <USB_EPStartXfer+0x1020>)
 80123c4:	468c      	mov	ip, r1
 80123c6:	4463      	add	r3, ip
 80123c8:	2180      	movs	r1, #128	; 0x80
 80123ca:	0609      	lsls	r1, r1, #24
 80123cc:	430a      	orrs	r2, r1
 80123ce:	601a      	str	r2, [r3, #0]
 80123d0:	e040      	b.n	8012454 <USB_EPStartXfer+0xec0>
 80123d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123d4:	085b      	lsrs	r3, r3, #1
 80123d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123da:	2201      	movs	r2, #1
 80123dc:	4013      	ands	r3, r2
 80123de:	d002      	beq.n	80123e6 <USB_EPStartXfer+0xe52>
 80123e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e2:	3301      	adds	r3, #1
 80123e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	00db      	lsls	r3, r3, #3
 80123ec:	4a71      	ldr	r2, [pc, #452]	; (80125b4 <USB_EPStartXfer+0x1020>)
 80123ee:	4694      	mov	ip, r2
 80123f0:	4463      	add	r3, ip
 80123f2:	6819      	ldr	r1, [r3, #0]
 80123f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f6:	069a      	lsls	r2, r3, #26
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	00db      	lsls	r3, r3, #3
 80123fe:	486d      	ldr	r0, [pc, #436]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012400:	4684      	mov	ip, r0
 8012402:	4463      	add	r3, ip
 8012404:	430a      	orrs	r2, r1
 8012406:	601a      	str	r2, [r3, #0]
 8012408:	e024      	b.n	8012454 <USB_EPStartXfer+0xec0>
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	785b      	ldrb	r3, [r3, #1]
 801240e:	2b01      	cmp	r3, #1
 8012410:	d120      	bne.n	8012454 <USB_EPStartXfer+0xec0>
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	00db      	lsls	r3, r3, #3
 8012418:	4a66      	ldr	r2, [pc, #408]	; (80125b4 <USB_EPStartXfer+0x1020>)
 801241a:	4694      	mov	ip, r2
 801241c:	4463      	add	r3, ip
 801241e:	681a      	ldr	r2, [r3, #0]
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	00db      	lsls	r3, r3, #3
 8012426:	4963      	ldr	r1, [pc, #396]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012428:	468c      	mov	ip, r1
 801242a:	4463      	add	r3, ip
 801242c:	0412      	lsls	r2, r2, #16
 801242e:	0c12      	lsrs	r2, r2, #16
 8012430:	601a      	str	r2, [r3, #0]
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	00db      	lsls	r3, r3, #3
 8012438:	4a5e      	ldr	r2, [pc, #376]	; (80125b4 <USB_EPStartXfer+0x1020>)
 801243a:	4694      	mov	ip, r2
 801243c:	4463      	add	r3, ip
 801243e:	6819      	ldr	r1, [r3, #0]
 8012440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012442:	041a      	lsls	r2, r3, #16
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	00db      	lsls	r3, r3, #3
 801244a:	485a      	ldr	r0, [pc, #360]	; (80125b4 <USB_EPStartXfer+0x1020>)
 801244c:	4684      	mov	ip, r0
 801244e:	4463      	add	r3, ip
 8012450:	430a      	orrs	r2, r1
 8012452:	601a      	str	r2, [r3, #0]
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	785b      	ldrb	r3, [r3, #1]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d162      	bne.n	8012522 <USB_EPStartXfer+0xf8e>
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	00db      	lsls	r3, r3, #3
 8012462:	4a54      	ldr	r2, [pc, #336]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012464:	4694      	mov	ip, r2
 8012466:	4463      	add	r3, ip
 8012468:	685a      	ldr	r2, [r3, #4]
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	00db      	lsls	r3, r3, #3
 8012470:	4950      	ldr	r1, [pc, #320]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012472:	468c      	mov	ip, r1
 8012474:	4463      	add	r3, ip
 8012476:	0192      	lsls	r2, r2, #6
 8012478:	0992      	lsrs	r2, r2, #6
 801247a:	605a      	str	r2, [r3, #4]
 801247c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801247e:	2b3e      	cmp	r3, #62	; 0x3e
 8012480:	d91e      	bls.n	80124c0 <USB_EPStartXfer+0xf2c>
 8012482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012484:	095b      	lsrs	r3, r3, #5
 8012486:	62bb      	str	r3, [r7, #40]	; 0x28
 8012488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801248a:	221f      	movs	r2, #31
 801248c:	4013      	ands	r3, r2
 801248e:	d102      	bne.n	8012496 <USB_EPStartXfer+0xf02>
 8012490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012492:	3b01      	subs	r3, #1
 8012494:	62bb      	str	r3, [r7, #40]	; 0x28
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	781b      	ldrb	r3, [r3, #0]
 801249a:	00db      	lsls	r3, r3, #3
 801249c:	4a45      	ldr	r2, [pc, #276]	; (80125b4 <USB_EPStartXfer+0x1020>)
 801249e:	4694      	mov	ip, r2
 80124a0:	4463      	add	r3, ip
 80124a2:	685a      	ldr	r2, [r3, #4]
 80124a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a6:	069b      	lsls	r3, r3, #26
 80124a8:	431a      	orrs	r2, r3
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	00db      	lsls	r3, r3, #3
 80124b0:	4940      	ldr	r1, [pc, #256]	; (80125b4 <USB_EPStartXfer+0x1020>)
 80124b2:	468c      	mov	ip, r1
 80124b4:	4463      	add	r3, ip
 80124b6:	2180      	movs	r1, #128	; 0x80
 80124b8:	0609      	lsls	r1, r1, #24
 80124ba:	430a      	orrs	r2, r1
 80124bc:	605a      	str	r2, [r3, #4]
 80124be:	e058      	b.n	8012572 <USB_EPStartXfer+0xfde>
 80124c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d111      	bne.n	80124ea <USB_EPStartXfer+0xf56>
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	00db      	lsls	r3, r3, #3
 80124cc:	4a39      	ldr	r2, [pc, #228]	; (80125b4 <USB_EPStartXfer+0x1020>)
 80124ce:	4694      	mov	ip, r2
 80124d0:	4463      	add	r3, ip
 80124d2:	685a      	ldr	r2, [r3, #4]
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	781b      	ldrb	r3, [r3, #0]
 80124d8:	00db      	lsls	r3, r3, #3
 80124da:	4936      	ldr	r1, [pc, #216]	; (80125b4 <USB_EPStartXfer+0x1020>)
 80124dc:	468c      	mov	ip, r1
 80124de:	4463      	add	r3, ip
 80124e0:	2180      	movs	r1, #128	; 0x80
 80124e2:	0609      	lsls	r1, r1, #24
 80124e4:	430a      	orrs	r2, r1
 80124e6:	605a      	str	r2, [r3, #4]
 80124e8:	e043      	b.n	8012572 <USB_EPStartXfer+0xfde>
 80124ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124ec:	085b      	lsrs	r3, r3, #1
 80124ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80124f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124f2:	2201      	movs	r2, #1
 80124f4:	4013      	ands	r3, r2
 80124f6:	d002      	beq.n	80124fe <USB_EPStartXfer+0xf6a>
 80124f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124fa:	3301      	adds	r3, #1
 80124fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	00db      	lsls	r3, r3, #3
 8012504:	4a2b      	ldr	r2, [pc, #172]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012506:	4694      	mov	ip, r2
 8012508:	4463      	add	r3, ip
 801250a:	6859      	ldr	r1, [r3, #4]
 801250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250e:	069a      	lsls	r2, r3, #26
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	00db      	lsls	r3, r3, #3
 8012516:	4827      	ldr	r0, [pc, #156]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012518:	4684      	mov	ip, r0
 801251a:	4463      	add	r3, ip
 801251c:	430a      	orrs	r2, r1
 801251e:	605a      	str	r2, [r3, #4]
 8012520:	e027      	b.n	8012572 <USB_EPStartXfer+0xfde>
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	785b      	ldrb	r3, [r3, #1]
 8012526:	2b01      	cmp	r3, #1
 8012528:	d123      	bne.n	8012572 <USB_EPStartXfer+0xfde>
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	00db      	lsls	r3, r3, #3
 8012530:	4a20      	ldr	r2, [pc, #128]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012532:	4694      	mov	ip, r2
 8012534:	4463      	add	r3, ip
 8012536:	685a      	ldr	r2, [r3, #4]
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	00db      	lsls	r3, r3, #3
 801253e:	491d      	ldr	r1, [pc, #116]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012540:	468c      	mov	ip, r1
 8012542:	4463      	add	r3, ip
 8012544:	0412      	lsls	r2, r2, #16
 8012546:	0c12      	lsrs	r2, r2, #16
 8012548:	605a      	str	r2, [r3, #4]
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	00db      	lsls	r3, r3, #3
 8012550:	4a18      	ldr	r2, [pc, #96]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012552:	4694      	mov	ip, r2
 8012554:	4463      	add	r3, ip
 8012556:	6859      	ldr	r1, [r3, #4]
 8012558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801255a:	041a      	lsls	r2, r3, #16
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	00db      	lsls	r3, r3, #3
 8012562:	4814      	ldr	r0, [pc, #80]	; (80125b4 <USB_EPStartXfer+0x1020>)
 8012564:	4684      	mov	ip, r0
 8012566:	4463      	add	r3, ip
 8012568:	430a      	orrs	r2, r1
 801256a:	605a      	str	r2, [r3, #4]
 801256c:	e001      	b.n	8012572 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 801256e:	2301      	movs	r3, #1
 8012570:	e01c      	b.n	80125ac <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	18d3      	adds	r3, r2, r3
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	4a0e      	ldr	r2, [pc, #56]	; (80125b8 <USB_EPStartXfer+0x1024>)
 8012580:	4013      	ands	r3, r2
 8012582:	61fb      	str	r3, [r7, #28]
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	2280      	movs	r2, #128	; 0x80
 8012588:	0152      	lsls	r2, r2, #5
 801258a:	4053      	eors	r3, r2
 801258c:	61fb      	str	r3, [r7, #28]
 801258e:	69fb      	ldr	r3, [r7, #28]
 8012590:	2280      	movs	r2, #128	; 0x80
 8012592:	0192      	lsls	r2, r2, #6
 8012594:	4053      	eors	r3, r2
 8012596:	61fb      	str	r3, [r7, #28]
 8012598:	687a      	ldr	r2, [r7, #4]
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	009b      	lsls	r3, r3, #2
 80125a0:	18d3      	adds	r3, r2, r3
 80125a2:	69fa      	ldr	r2, [r7, #28]
 80125a4:	4905      	ldr	r1, [pc, #20]	; (80125bc <USB_EPStartXfer+0x1028>)
 80125a6:	430a      	orrs	r2, r1
 80125a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80125aa:	2300      	movs	r3, #0
}
 80125ac:	0018      	movs	r0, r3
 80125ae:	46bd      	mov	sp, r7
 80125b0:	b017      	add	sp, #92	; 0x5c
 80125b2:	bd90      	pop	{r4, r7, pc}
 80125b4:	40009800 	.word	0x40009800
 80125b8:	07ffbf8f 	.word	0x07ffbf8f
 80125bc:	00008080 	.word	0x00008080

080125c0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	785b      	ldrb	r3, [r3, #1]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d016      	beq.n	8012600 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	009b      	lsls	r3, r3, #2
 80125da:	18d3      	adds	r3, r2, r3
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	4a16      	ldr	r2, [pc, #88]	; (8012638 <USB_EPSetStall+0x78>)
 80125e0:	4013      	ands	r3, r2
 80125e2:	60bb      	str	r3, [r7, #8]
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	2210      	movs	r2, #16
 80125e8:	4053      	eors	r3, r2
 80125ea:	60bb      	str	r3, [r7, #8]
 80125ec:	687a      	ldr	r2, [r7, #4]
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	18d3      	adds	r3, r2, r3
 80125f6:	68ba      	ldr	r2, [r7, #8]
 80125f8:	4910      	ldr	r1, [pc, #64]	; (801263c <USB_EPSetStall+0x7c>)
 80125fa:	430a      	orrs	r2, r1
 80125fc:	601a      	str	r2, [r3, #0]
 80125fe:	e016      	b.n	801262e <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	18d3      	adds	r3, r2, r3
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a0c      	ldr	r2, [pc, #48]	; (8012640 <USB_EPSetStall+0x80>)
 801260e:	4013      	ands	r3, r2
 8012610:	60fb      	str	r3, [r7, #12]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2280      	movs	r2, #128	; 0x80
 8012616:	0152      	lsls	r2, r2, #5
 8012618:	4053      	eors	r3, r2
 801261a:	60fb      	str	r3, [r7, #12]
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	009b      	lsls	r3, r3, #2
 8012624:	18d3      	adds	r3, r2, r3
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	4904      	ldr	r1, [pc, #16]	; (801263c <USB_EPSetStall+0x7c>)
 801262a:	430a      	orrs	r2, r1
 801262c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801262e:	2300      	movs	r3, #0
}
 8012630:	0018      	movs	r0, r3
 8012632:	46bd      	mov	sp, r7
 8012634:	b004      	add	sp, #16
 8012636:	bd80      	pop	{r7, pc}
 8012638:	07ff8fbf 	.word	0x07ff8fbf
 801263c:	00008080 	.word	0x00008080
 8012640:	07ffbf8f 	.word	0x07ffbf8f

08012644 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b088      	sub	sp, #32
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	7b1b      	ldrb	r3, [r3, #12]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d000      	beq.n	8012658 <USB_EPClearStall+0x14>
 8012656:	e075      	b.n	8012744 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	785b      	ldrb	r3, [r3, #1]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d037      	beq.n	80126d0 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	18d3      	adds	r3, r2, r3
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	613b      	str	r3, [r7, #16]
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	2240      	movs	r2, #64	; 0x40
 8012672:	4013      	ands	r3, r2
 8012674:	d011      	beq.n	801269a <USB_EPClearStall+0x56>
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	009b      	lsls	r3, r3, #2
 801267e:	18d3      	adds	r3, r2, r3
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	4a33      	ldr	r2, [pc, #204]	; (8012750 <USB_EPClearStall+0x10c>)
 8012684:	4013      	ands	r3, r2
 8012686:	60fb      	str	r3, [r7, #12]
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	009b      	lsls	r3, r3, #2
 8012690:	18d3      	adds	r3, r2, r3
 8012692:	68fa      	ldr	r2, [r7, #12]
 8012694:	492f      	ldr	r1, [pc, #188]	; (8012754 <USB_EPClearStall+0x110>)
 8012696:	430a      	orrs	r2, r1
 8012698:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	78db      	ldrb	r3, [r3, #3]
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d050      	beq.n	8012744 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80126a2:	687a      	ldr	r2, [r7, #4]
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	18d3      	adds	r3, r2, r3
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	4a2a      	ldr	r2, [pc, #168]	; (8012758 <USB_EPClearStall+0x114>)
 80126b0:	4013      	ands	r3, r2
 80126b2:	60bb      	str	r3, [r7, #8]
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	2220      	movs	r2, #32
 80126b8:	4053      	eors	r3, r2
 80126ba:	60bb      	str	r3, [r7, #8]
 80126bc:	687a      	ldr	r2, [r7, #4]
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	009b      	lsls	r3, r3, #2
 80126c4:	18d3      	adds	r3, r2, r3
 80126c6:	68ba      	ldr	r2, [r7, #8]
 80126c8:	4924      	ldr	r1, [pc, #144]	; (801275c <USB_EPClearStall+0x118>)
 80126ca:	430a      	orrs	r2, r1
 80126cc:	601a      	str	r2, [r3, #0]
 80126ce:	e039      	b.n	8012744 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	18d3      	adds	r3, r2, r3
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	61fb      	str	r3, [r7, #28]
 80126de:	69fa      	ldr	r2, [r7, #28]
 80126e0:	2380      	movs	r3, #128	; 0x80
 80126e2:	01db      	lsls	r3, r3, #7
 80126e4:	4013      	ands	r3, r2
 80126e6:	d011      	beq.n	801270c <USB_EPClearStall+0xc8>
 80126e8:	687a      	ldr	r2, [r7, #4]
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	009b      	lsls	r3, r3, #2
 80126f0:	18d3      	adds	r3, r2, r3
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	4a16      	ldr	r2, [pc, #88]	; (8012750 <USB_EPClearStall+0x10c>)
 80126f6:	4013      	ands	r3, r2
 80126f8:	61bb      	str	r3, [r7, #24]
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	18d3      	adds	r3, r2, r3
 8012704:	69ba      	ldr	r2, [r7, #24]
 8012706:	4916      	ldr	r1, [pc, #88]	; (8012760 <USB_EPClearStall+0x11c>)
 8012708:	430a      	orrs	r2, r1
 801270a:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801270c:	687a      	ldr	r2, [r7, #4]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	009b      	lsls	r3, r3, #2
 8012714:	18d3      	adds	r3, r2, r3
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	4a12      	ldr	r2, [pc, #72]	; (8012764 <USB_EPClearStall+0x120>)
 801271a:	4013      	ands	r3, r2
 801271c:	617b      	str	r3, [r7, #20]
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	2280      	movs	r2, #128	; 0x80
 8012722:	0152      	lsls	r2, r2, #5
 8012724:	4053      	eors	r3, r2
 8012726:	617b      	str	r3, [r7, #20]
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	2280      	movs	r2, #128	; 0x80
 801272c:	0192      	lsls	r2, r2, #6
 801272e:	4053      	eors	r3, r2
 8012730:	617b      	str	r3, [r7, #20]
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	009b      	lsls	r3, r3, #2
 801273a:	18d3      	adds	r3, r2, r3
 801273c:	697a      	ldr	r2, [r7, #20]
 801273e:	4907      	ldr	r1, [pc, #28]	; (801275c <USB_EPClearStall+0x118>)
 8012740:	430a      	orrs	r2, r1
 8012742:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8012744:	2300      	movs	r3, #0
}
 8012746:	0018      	movs	r0, r3
 8012748:	46bd      	mov	sp, r7
 801274a:	b008      	add	sp, #32
 801274c:	bd80      	pop	{r7, pc}
 801274e:	46c0      	nop			; (mov r8, r8)
 8012750:	07ff8f8f 	.word	0x07ff8f8f
 8012754:	000080c0 	.word	0x000080c0
 8012758:	07ff8fbf 	.word	0x07ff8fbf
 801275c:	00008080 	.word	0x00008080
 8012760:	0000c080 	.word	0x0000c080
 8012764:	07ffbf8f 	.word	0x07ffbf8f

08012768 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	000a      	movs	r2, r1
 8012772:	1cfb      	adds	r3, r7, #3
 8012774:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8012776:	1cfb      	adds	r3, r7, #3
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d102      	bne.n	8012784 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2280      	movs	r2, #128	; 0x80
 8012782:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012784:	2300      	movs	r3, #0
}
 8012786:	0018      	movs	r0, r3
 8012788:	46bd      	mov	sp, r7
 801278a:	b002      	add	sp, #8
 801278c:	bd80      	pop	{r7, pc}

0801278e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801279a:	2280      	movs	r2, #128	; 0x80
 801279c:	0212      	lsls	r2, r2, #8
 801279e:	431a      	orrs	r2, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80127a4:	2300      	movs	r3, #0
}
 80127a6:	0018      	movs	r0, r3
 80127a8:	46bd      	mov	sp, r7
 80127aa:	b002      	add	sp, #8
 80127ac:	bd80      	pop	{r7, pc}

080127ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 80127ae:	b580      	push	{r7, lr}
 80127b0:	b084      	sub	sp, #16
 80127b2:	af00      	add	r7, sp, #0
 80127b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80127bc:	68fb      	ldr	r3, [r7, #12]
}
 80127be:	0018      	movs	r0, r3
 80127c0:	46bd      	mov	sp, r7
 80127c2:	b004      	add	sp, #16
 80127c4:	bd80      	pop	{r7, pc}
	...

080127c8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b08a      	sub	sp, #40	; 0x28
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	0019      	movs	r1, r3
 80127d4:	1dbb      	adds	r3, r7, #6
 80127d6:	801a      	strh	r2, [r3, #0]
 80127d8:	1d3b      	adds	r3, r7, #4
 80127da:	1c0a      	adds	r2, r1, #0
 80127dc:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80127de:	1d3b      	adds	r3, r7, #4
 80127e0:	881b      	ldrh	r3, [r3, #0]
 80127e2:	3303      	adds	r3, #3
 80127e4:	089b      	lsrs	r3, r3, #2
 80127e6:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80127e8:	2016      	movs	r0, #22
 80127ea:	183b      	adds	r3, r7, r0
 80127ec:	1d3a      	adds	r2, r7, #4
 80127ee:	8812      	ldrh	r2, [r2, #0]
 80127f0:	2103      	movs	r1, #3
 80127f2:	400a      	ands	r2, r1
 80127f4:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 80127fa:	183b      	adds	r3, r7, r0
 80127fc:	881b      	ldrh	r3, [r3, #0]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d002      	beq.n	8012808 <USB_WritePMA+0x40>
  {
    NbWords--;
 8012802:	69bb      	ldr	r3, [r7, #24]
 8012804:	3b01      	subs	r3, #1
 8012806:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8012808:	1dbb      	adds	r3, r7, #6
 801280a:	881b      	ldrh	r3, [r3, #0]
 801280c:	4a28      	ldr	r2, [pc, #160]	; (80128b0 <USB_WritePMA+0xe8>)
 801280e:	4694      	mov	ip, r2
 8012810:	4463      	add	r3, ip
 8012812:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	623b      	str	r3, [r7, #32]
 8012818:	e01f      	b.n	801285a <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	781a      	ldrb	r2, [r3, #0]
 801281e:	7859      	ldrb	r1, [r3, #1]
 8012820:	0209      	lsls	r1, r1, #8
 8012822:	430a      	orrs	r2, r1
 8012824:	7899      	ldrb	r1, [r3, #2]
 8012826:	0409      	lsls	r1, r1, #16
 8012828:	430a      	orrs	r2, r1
 801282a:	78db      	ldrb	r3, [r3, #3]
 801282c:	061b      	lsls	r3, r3, #24
 801282e:	4313      	orrs	r3, r2
 8012830:	001a      	movs	r2, r3
 8012832:	69fb      	ldr	r3, [r7, #28]
 8012834:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	3304      	adds	r3, #4
 801283a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	3301      	adds	r3, #1
 8012840:	613b      	str	r3, [r7, #16]
    pBuf++;
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	3301      	adds	r3, #1
 8012846:	613b      	str	r3, [r7, #16]
    pBuf++;
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	3301      	adds	r3, #1
 801284c:	613b      	str	r3, [r7, #16]
    pBuf++;
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	3301      	adds	r3, #1
 8012852:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8012854:	6a3b      	ldr	r3, [r7, #32]
 8012856:	3b01      	subs	r3, #1
 8012858:	623b      	str	r3, [r7, #32]
 801285a:	6a3b      	ldr	r3, [r7, #32]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d1dc      	bne.n	801281a <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8012860:	2316      	movs	r3, #22
 8012862:	18fb      	adds	r3, r7, r3
 8012864:	881b      	ldrh	r3, [r3, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d01e      	beq.n	80128a8 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 801286a:	2300      	movs	r3, #0
 801286c:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	001a      	movs	r2, r3
 8012874:	6a3b      	ldr	r3, [r7, #32]
 8012876:	00db      	lsls	r3, r3, #3
 8012878:	409a      	lsls	r2, r3
 801287a:	0013      	movs	r3, r2
 801287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801287e:	4313      	orrs	r3, r2
 8012880:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 8012882:	6a3b      	ldr	r3, [r7, #32]
 8012884:	3301      	adds	r3, #1
 8012886:	623b      	str	r3, [r7, #32]
      pBuf++;
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	3301      	adds	r3, #1
 801288c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 801288e:	2116      	movs	r1, #22
 8012890:	187b      	adds	r3, r7, r1
 8012892:	881a      	ldrh	r2, [r3, #0]
 8012894:	187b      	adds	r3, r7, r1
 8012896:	3a01      	subs	r2, #1
 8012898:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 801289a:	187b      	adds	r3, r7, r1
 801289c:	881b      	ldrh	r3, [r3, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d1e5      	bne.n	801286e <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128a6:	601a      	str	r2, [r3, #0]
  }
}
 80128a8:	46c0      	nop			; (mov r8, r8)
 80128aa:	46bd      	mov	sp, r7
 80128ac:	b00a      	add	sp, #40	; 0x28
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	40009800 	.word	0x40009800

080128b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80128b4:	b590      	push	{r4, r7, lr}
 80128b6:	b08b      	sub	sp, #44	; 0x2c
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	60b9      	str	r1, [r7, #8]
 80128be:	0019      	movs	r1, r3
 80128c0:	1dbb      	adds	r3, r7, #6
 80128c2:	801a      	strh	r2, [r3, #0]
 80128c4:	1d3b      	adds	r3, r7, #4
 80128c6:	1c0a      	adds	r2, r1, #0
 80128c8:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80128ca:	1d3b      	adds	r3, r7, #4
 80128cc:	881b      	ldrh	r3, [r3, #0]
 80128ce:	3303      	adds	r3, #3
 80128d0:	089b      	lsrs	r3, r3, #2
 80128d2:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80128d4:	201a      	movs	r0, #26
 80128d6:	183b      	adds	r3, r7, r0
 80128d8:	1d3a      	adds	r2, r7, #4
 80128da:	8812      	ldrh	r2, [r2, #0]
 80128dc:	2103      	movs	r1, #3
 80128de:	400a      	ands	r2, r1
 80128e0:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80128e6:	1dbb      	adds	r3, r7, #6
 80128e8:	881b      	ldrh	r3, [r3, #0]
 80128ea:	4a39      	ldr	r2, [pc, #228]	; (80129d0 <USB_ReadPMA+0x11c>)
 80128ec:	4694      	mov	ip, r2
 80128ee:	4463      	add	r3, ip
 80128f0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80128f2:	183b      	adds	r3, r7, r0
 80128f4:	881b      	ldrh	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d002      	beq.n	8012900 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	3b01      	subs	r3, #1
 80128fe:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	627b      	str	r3, [r7, #36]	; 0x24
 8012904:	e03c      	b.n	8012980 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8012906:	6a3b      	ldr	r3, [r7, #32]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	21ff      	movs	r1, #255	; 0xff
 801290e:	4011      	ands	r1, r2
 8012910:	000c      	movs	r4, r1
 8012912:	7819      	ldrb	r1, [r3, #0]
 8012914:	2000      	movs	r0, #0
 8012916:	4001      	ands	r1, r0
 8012918:	1c08      	adds	r0, r1, #0
 801291a:	1c21      	adds	r1, r4, #0
 801291c:	4301      	orrs	r1, r0
 801291e:	7019      	strb	r1, [r3, #0]
 8012920:	0a11      	lsrs	r1, r2, #8
 8012922:	20ff      	movs	r0, #255	; 0xff
 8012924:	4001      	ands	r1, r0
 8012926:	000c      	movs	r4, r1
 8012928:	7859      	ldrb	r1, [r3, #1]
 801292a:	2000      	movs	r0, #0
 801292c:	4001      	ands	r1, r0
 801292e:	1c08      	adds	r0, r1, #0
 8012930:	1c21      	adds	r1, r4, #0
 8012932:	4301      	orrs	r1, r0
 8012934:	7059      	strb	r1, [r3, #1]
 8012936:	0c11      	lsrs	r1, r2, #16
 8012938:	20ff      	movs	r0, #255	; 0xff
 801293a:	4001      	ands	r1, r0
 801293c:	000c      	movs	r4, r1
 801293e:	7899      	ldrb	r1, [r3, #2]
 8012940:	2000      	movs	r0, #0
 8012942:	4001      	ands	r1, r0
 8012944:	1c08      	adds	r0, r1, #0
 8012946:	1c21      	adds	r1, r4, #0
 8012948:	4301      	orrs	r1, r0
 801294a:	7099      	strb	r1, [r3, #2]
 801294c:	0e10      	lsrs	r0, r2, #24
 801294e:	78da      	ldrb	r2, [r3, #3]
 8012950:	2100      	movs	r1, #0
 8012952:	400a      	ands	r2, r1
 8012954:	1c11      	adds	r1, r2, #0
 8012956:	1c02      	adds	r2, r0, #0
 8012958:	430a      	orrs	r2, r1
 801295a:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 801295c:	6a3b      	ldr	r3, [r7, #32]
 801295e:	3304      	adds	r3, #4
 8012960:	623b      	str	r3, [r7, #32]
    pBuf++;
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	3301      	adds	r3, #1
 8012966:	617b      	str	r3, [r7, #20]
    pBuf++;
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	3301      	adds	r3, #1
 801296c:	617b      	str	r3, [r7, #20]
    pBuf++;
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	3301      	adds	r3, #1
 8012972:	617b      	str	r3, [r7, #20]
    pBuf++;
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	3301      	adds	r3, #1
 8012978:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 801297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297c:	3b01      	subs	r3, #1
 801297e:	627b      	str	r3, [r7, #36]	; 0x24
 8012980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012982:	2b00      	cmp	r3, #0
 8012984:	d1bf      	bne.n	8012906 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8012986:	231a      	movs	r3, #26
 8012988:	18fb      	adds	r3, r7, r3
 801298a:	881b      	ldrh	r3, [r3, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d01b      	beq.n	80129c8 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8012990:	6a3b      	ldr	r3, [r7, #32]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8012996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012998:	b2db      	uxtb	r3, r3
 801299a:	00db      	lsls	r3, r3, #3
 801299c:	693a      	ldr	r2, [r7, #16]
 801299e:	40da      	lsrs	r2, r3
 80129a0:	0013      	movs	r3, r2
 80129a2:	b2da      	uxtb	r2, r3
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	701a      	strb	r2, [r3, #0]
      count++;
 80129a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129aa:	3301      	adds	r3, #1
 80129ac:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	3301      	adds	r3, #1
 80129b2:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 80129b4:	211a      	movs	r1, #26
 80129b6:	187b      	adds	r3, r7, r1
 80129b8:	881a      	ldrh	r2, [r3, #0]
 80129ba:	187b      	adds	r3, r7, r1
 80129bc:	3a01      	subs	r2, #1
 80129be:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 80129c0:	187b      	adds	r3, r7, r1
 80129c2:	881b      	ldrh	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d1e6      	bne.n	8012996 <USB_ReadPMA+0xe2>
  }
}
 80129c8:	46c0      	nop			; (mov r8, r8)
 80129ca:	46bd      	mov	sp, r7
 80129cc:	b00b      	add	sp, #44	; 0x2c
 80129ce:	bd90      	pop	{r4, r7, pc}
 80129d0:	40009800 	.word	0x40009800

080129d4 <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	af00      	add	r7, sp, #0
    'T', 'R', 'A', 'C', 'E', ' ', 'O', 'V', 'E', 'R', '_', 'F', 'L', 'O', 'W', /* Data */
    TLV_EOF, TLV_EOF, TLV_EOF, TLV_EOF                                         /* Buffer end */
  };

  /* initialize tracer module */
  TRACER_EMB_Init();
 80129d8:	f00f fd32 	bl	8022440 <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 80129dc:	4b06      	ldr	r3, [pc, #24]	; (80129f8 <USBPD_TRACE_Init+0x24>)
 80129de:	2103      	movs	r1, #3
 80129e0:	0018      	movs	r0, r3
 80129e2:	f7ee fd75 	bl	80014d0 <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, (uint8_t)sizeof(OverFlow_String));
 80129e6:	4b05      	ldr	r3, [pc, #20]	; (80129fc <USBPD_TRACE_Init+0x28>)
 80129e8:	2123      	movs	r1, #35	; 0x23
 80129ea:	0018      	movs	r0, r3
 80129ec:	f00f fdb4 	bl	8022558 <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif /* _TRACE */
}
 80129f0:	46c0      	nop			; (mov r8, r8)
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	46c0      	nop			; (mov r8, r8)
 80129f8:	08012a01 	.word	0x08012a01
 80129fc:	08025044 	.word	0x08025044

08012a00 <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 8012a00:	b5b0      	push	{r4, r5, r7, lr}
 8012a02:	b086      	sub	sp, #24
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	0004      	movs	r4, r0
 8012a08:	0008      	movs	r0, r1
 8012a0a:	0011      	movs	r1, r2
 8012a0c:	603b      	str	r3, [r7, #0]
 8012a0e:	1dfb      	adds	r3, r7, #7
 8012a10:	1c22      	adds	r2, r4, #0
 8012a12:	701a      	strb	r2, [r3, #0]
 8012a14:	1dbb      	adds	r3, r7, #6
 8012a16:	1c02      	adds	r2, r0, #0
 8012a18:	701a      	strb	r2, [r3, #0]
 8012a1a:	1d7b      	adds	r3, r7, #5
 8012a1c:	1c0a      	adds	r2, r1, #0
 8012a1e:	701a      	strb	r2, [r3, #0]
  uint32_t _time;
  int32_t _allocation;
  uint16_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 8012a20:	f7f6 fcce 	bl	80093c0 <HAL_GetTick>
 8012a24:	0003      	movs	r3, r0
 8012a26:	613b      	str	r3, [r7, #16]

  TRACER_EMB_Lock();
 8012a28:	f00f fdfa 	bl	8022620 <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _allocation = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE +
 8012a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2e:	3314      	adds	r3, #20
 8012a30:	0018      	movs	r0, r3
 8012a32:	f00f fe8f 	bl	8022754 <TRACER_EMB_AllocateBufer>
 8012a36:	0003      	movs	r3, r0
 8012a38:	60fb      	str	r3, [r7, #12]
                                         TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);

  /* Check allocation */
  if (_allocation  != -1)
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	d100      	bne.n	8012a42 <USBPD_TRACE_Add+0x42>
 8012a40:	e11d      	b.n	8012c7e <USBPD_TRACE_Add+0x27e>
  {
    uint16_t _writepos = (uint16_t)_allocation;
 8012a42:	2314      	movs	r3, #20
 8012a44:	18fb      	adds	r3, r7, r3
 8012a46:	68fa      	ldr	r2, [r7, #12]
 8012a48:	801a      	strh	r2, [r3, #0]

    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 8012a4a:	2316      	movs	r3, #22
 8012a4c:	18fb      	adds	r3, r7, r3
 8012a4e:	2200      	movs	r2, #0
 8012a50:	801a      	strh	r2, [r3, #0]
 8012a52:	e011      	b.n	8012a78 <USBPD_TRACE_Add+0x78>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 8012a54:	2414      	movs	r4, #20
 8012a56:	193b      	adds	r3, r7, r4
 8012a58:	881b      	ldrh	r3, [r3, #0]
 8012a5a:	21fd      	movs	r1, #253	; 0xfd
 8012a5c:	0018      	movs	r0, r3
 8012a5e:	f00f fd55 	bl	802250c <TRACER_EMB_WriteData>
 8012a62:	193b      	adds	r3, r7, r4
 8012a64:	193a      	adds	r2, r7, r4
 8012a66:	8812      	ldrh	r2, [r2, #0]
 8012a68:	3201      	adds	r2, #1
 8012a6a:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 8012a6c:	2116      	movs	r1, #22
 8012a6e:	187b      	adds	r3, r7, r1
 8012a70:	881a      	ldrh	r2, [r3, #0]
 8012a72:	187b      	adds	r3, r7, r1
 8012a74:	3201      	adds	r2, #1
 8012a76:	801a      	strh	r2, [r3, #0]
 8012a78:	2516      	movs	r5, #22
 8012a7a:	197b      	adds	r3, r7, r5
 8012a7c:	881b      	ldrh	r3, [r3, #0]
 8012a7e:	2b03      	cmp	r3, #3
 8012a80:	d9e8      	bls.n	8012a54 <USBPD_TRACE_Add+0x54>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 8012a82:	1dbb      	adds	r3, r7, #6
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	3301      	adds	r3, #1
 8012a88:	b2db      	uxtb	r3, r3
 8012a8a:	015b      	lsls	r3, r3, #5
 8012a8c:	b2db      	uxtb	r3, r3
 8012a8e:	2212      	movs	r2, #18
 8012a90:	4313      	orrs	r3, r2
 8012a92:	b2da      	uxtb	r2, r3
 8012a94:	2414      	movs	r4, #20
 8012a96:	193b      	adds	r3, r7, r4
 8012a98:	881b      	ldrh	r3, [r3, #0]
 8012a9a:	0011      	movs	r1, r2
 8012a9c:	0018      	movs	r0, r3
 8012a9e:	f00f fd35 	bl	802250c <TRACER_EMB_WriteData>
 8012aa2:	0021      	movs	r1, r4
 8012aa4:	187b      	adds	r3, r7, r1
 8012aa6:	187a      	adds	r2, r7, r1
 8012aa8:	8812      	ldrh	r2, [r2, #0]
 8012aaa:	3201      	adds	r2, #1
 8012aac:	801a      	strh	r2, [r3, #0]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 8012aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab0:	3309      	adds	r3, #9
 8012ab2:	0a1b      	lsrs	r3, r3, #8
 8012ab4:	b2da      	uxtb	r2, r3
 8012ab6:	000c      	movs	r4, r1
 8012ab8:	187b      	adds	r3, r7, r1
 8012aba:	881b      	ldrh	r3, [r3, #0]
 8012abc:	0011      	movs	r1, r2
 8012abe:	0018      	movs	r0, r3
 8012ac0:	f00f fd24 	bl	802250c <TRACER_EMB_WriteData>
 8012ac4:	0021      	movs	r1, r4
 8012ac6:	187b      	adds	r3, r7, r1
 8012ac8:	187a      	adds	r2, r7, r1
 8012aca:	8812      	ldrh	r2, [r2, #0]
 8012acc:	3201      	adds	r2, #1
 8012ace:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size + TRACE_SIZE_HEADER_TRACE));
 8012ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	3309      	adds	r3, #9
 8012ad6:	b2da      	uxtb	r2, r3
 8012ad8:	000c      	movs	r4, r1
 8012ada:	187b      	adds	r3, r7, r1
 8012adc:	881b      	ldrh	r3, [r3, #0]
 8012ade:	0011      	movs	r1, r2
 8012ae0:	0018      	movs	r0, r3
 8012ae2:	f00f fd13 	bl	802250c <TRACER_EMB_WriteData>
 8012ae6:	0021      	movs	r1, r4
 8012ae8:	187b      	adds	r3, r7, r1
 8012aea:	187a      	adds	r2, r7, r1
 8012aec:	8812      	ldrh	r2, [r2, #0]
 8012aee:	3201      	adds	r2, #1
 8012af0:	801a      	strh	r2, [r3, #0]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 8012af2:	1dfb      	adds	r3, r7, #7
 8012af4:	781a      	ldrb	r2, [r3, #0]
 8012af6:	000c      	movs	r4, r1
 8012af8:	187b      	adds	r3, r7, r1
 8012afa:	881b      	ldrh	r3, [r3, #0]
 8012afc:	0011      	movs	r1, r2
 8012afe:	0018      	movs	r0, r3
 8012b00:	f00f fd04 	bl	802250c <TRACER_EMB_WriteData>
 8012b04:	0021      	movs	r1, r4
 8012b06:	187b      	adds	r3, r7, r1
 8012b08:	187a      	adds	r2, r7, r1
 8012b0a:	8812      	ldrh	r2, [r2, #0]
 8012b0c:	3201      	adds	r2, #1
 8012b0e:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	b2da      	uxtb	r2, r3
 8012b14:	000c      	movs	r4, r1
 8012b16:	187b      	adds	r3, r7, r1
 8012b18:	881b      	ldrh	r3, [r3, #0]
 8012b1a:	0011      	movs	r1, r2
 8012b1c:	0018      	movs	r0, r3
 8012b1e:	f00f fcf5 	bl	802250c <TRACER_EMB_WriteData>
 8012b22:	0021      	movs	r1, r4
 8012b24:	187b      	adds	r3, r7, r1
 8012b26:	187a      	adds	r2, r7, r1
 8012b28:	8812      	ldrh	r2, [r2, #0]
 8012b2a:	3201      	adds	r2, #1
 8012b2c:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	0a1b      	lsrs	r3, r3, #8
 8012b32:	b2da      	uxtb	r2, r3
 8012b34:	000c      	movs	r4, r1
 8012b36:	187b      	adds	r3, r7, r1
 8012b38:	881b      	ldrh	r3, [r3, #0]
 8012b3a:	0011      	movs	r1, r2
 8012b3c:	0018      	movs	r0, r3
 8012b3e:	f00f fce5 	bl	802250c <TRACER_EMB_WriteData>
 8012b42:	0021      	movs	r1, r4
 8012b44:	187b      	adds	r3, r7, r1
 8012b46:	187a      	adds	r2, r7, r1
 8012b48:	8812      	ldrh	r2, [r2, #0]
 8012b4a:	3201      	adds	r2, #1
 8012b4c:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	0c1b      	lsrs	r3, r3, #16
 8012b52:	b2da      	uxtb	r2, r3
 8012b54:	000c      	movs	r4, r1
 8012b56:	187b      	adds	r3, r7, r1
 8012b58:	881b      	ldrh	r3, [r3, #0]
 8012b5a:	0011      	movs	r1, r2
 8012b5c:	0018      	movs	r0, r3
 8012b5e:	f00f fcd5 	bl	802250c <TRACER_EMB_WriteData>
 8012b62:	0021      	movs	r1, r4
 8012b64:	187b      	adds	r3, r7, r1
 8012b66:	187a      	adds	r2, r7, r1
 8012b68:	8812      	ldrh	r2, [r2, #0]
 8012b6a:	3201      	adds	r2, #1
 8012b6c:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	0e1b      	lsrs	r3, r3, #24
 8012b72:	b2da      	uxtb	r2, r3
 8012b74:	000c      	movs	r4, r1
 8012b76:	187b      	adds	r3, r7, r1
 8012b78:	881b      	ldrh	r3, [r3, #0]
 8012b7a:	0011      	movs	r1, r2
 8012b7c:	0018      	movs	r0, r3
 8012b7e:	f00f fcc5 	bl	802250c <TRACER_EMB_WriteData>
 8012b82:	0021      	movs	r1, r4
 8012b84:	187b      	adds	r3, r7, r1
 8012b86:	187a      	adds	r2, r7, r1
 8012b88:	8812      	ldrh	r2, [r2, #0]
 8012b8a:	3201      	adds	r2, #1
 8012b8c:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 8012b8e:	1dbb      	adds	r3, r7, #6
 8012b90:	781a      	ldrb	r2, [r3, #0]
 8012b92:	000c      	movs	r4, r1
 8012b94:	187b      	adds	r3, r7, r1
 8012b96:	881b      	ldrh	r3, [r3, #0]
 8012b98:	0011      	movs	r1, r2
 8012b9a:	0018      	movs	r0, r3
 8012b9c:	f00f fcb6 	bl	802250c <TRACER_EMB_WriteData>
 8012ba0:	0021      	movs	r1, r4
 8012ba2:	187b      	adds	r3, r7, r1
 8012ba4:	187a      	adds	r2, r7, r1
 8012ba6:	8812      	ldrh	r2, [r2, #0]
 8012ba8:	3201      	adds	r2, #1
 8012baa:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 8012bac:	1d7b      	adds	r3, r7, #5
 8012bae:	781a      	ldrb	r2, [r3, #0]
 8012bb0:	000c      	movs	r4, r1
 8012bb2:	187b      	adds	r3, r7, r1
 8012bb4:	881b      	ldrh	r3, [r3, #0]
 8012bb6:	0011      	movs	r1, r2
 8012bb8:	0018      	movs	r0, r3
 8012bba:	f00f fca7 	bl	802250c <TRACER_EMB_WriteData>
 8012bbe:	0021      	movs	r1, r4
 8012bc0:	187b      	adds	r3, r7, r1
 8012bc2:	187a      	adds	r2, r7, r1
 8012bc4:	8812      	ldrh	r2, [r2, #0]
 8012bc6:	3201      	adds	r2, #1
 8012bc8:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 8012bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bcc:	0a1b      	lsrs	r3, r3, #8
 8012bce:	b2da      	uxtb	r2, r3
 8012bd0:	000c      	movs	r4, r1
 8012bd2:	187b      	adds	r3, r7, r1
 8012bd4:	881b      	ldrh	r3, [r3, #0]
 8012bd6:	0011      	movs	r1, r2
 8012bd8:	0018      	movs	r0, r3
 8012bda:	f00f fc97 	bl	802250c <TRACER_EMB_WriteData>
 8012bde:	0021      	movs	r1, r4
 8012be0:	187b      	adds	r3, r7, r1
 8012be2:	187a      	adds	r2, r7, r1
 8012be4:	8812      	ldrh	r2, [r2, #0]
 8012be6:	3201      	adds	r2, #1
 8012be8:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 8012bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bec:	b2da      	uxtb	r2, r3
 8012bee:	000c      	movs	r4, r1
 8012bf0:	187b      	adds	r3, r7, r1
 8012bf2:	881b      	ldrh	r3, [r3, #0]
 8012bf4:	0011      	movs	r1, r2
 8012bf6:	0018      	movs	r0, r3
 8012bf8:	f00f fc88 	bl	802250c <TRACER_EMB_WriteData>
 8012bfc:	193b      	adds	r3, r7, r4
 8012bfe:	193a      	adds	r2, r7, r4
 8012c00:	8812      	ldrh	r2, [r2, #0]
 8012c02:	3201      	adds	r2, #1
 8012c04:	801a      	strh	r2, [r3, #0]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 8012c06:	197b      	adds	r3, r7, r5
 8012c08:	2200      	movs	r2, #0
 8012c0a:	801a      	strh	r2, [r3, #0]
 8012c0c:	e016      	b.n	8012c3c <USBPD_TRACE_Add+0x23c>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 8012c0e:	2416      	movs	r4, #22
 8012c10:	193b      	adds	r3, r7, r4
 8012c12:	881b      	ldrh	r3, [r3, #0]
 8012c14:	683a      	ldr	r2, [r7, #0]
 8012c16:	18d3      	adds	r3, r2, r3
 8012c18:	781a      	ldrb	r2, [r3, #0]
 8012c1a:	2514      	movs	r5, #20
 8012c1c:	197b      	adds	r3, r7, r5
 8012c1e:	881b      	ldrh	r3, [r3, #0]
 8012c20:	0011      	movs	r1, r2
 8012c22:	0018      	movs	r0, r3
 8012c24:	f00f fc72 	bl	802250c <TRACER_EMB_WriteData>
 8012c28:	197b      	adds	r3, r7, r5
 8012c2a:	197a      	adds	r2, r7, r5
 8012c2c:	8812      	ldrh	r2, [r2, #0]
 8012c2e:	3201      	adds	r2, #1
 8012c30:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < Size; index++)
 8012c32:	193b      	adds	r3, r7, r4
 8012c34:	881a      	ldrh	r2, [r3, #0]
 8012c36:	193b      	adds	r3, r7, r4
 8012c38:	3201      	adds	r2, #1
 8012c3a:	801a      	strh	r2, [r3, #0]
 8012c3c:	2116      	movs	r1, #22
 8012c3e:	187b      	adds	r3, r7, r1
 8012c40:	881b      	ldrh	r3, [r3, #0]
 8012c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d8e2      	bhi.n	8012c0e <USBPD_TRACE_Add+0x20e>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 8012c48:	187b      	adds	r3, r7, r1
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	801a      	strh	r2, [r3, #0]
 8012c4e:	e011      	b.n	8012c74 <USBPD_TRACE_Add+0x274>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 8012c50:	2414      	movs	r4, #20
 8012c52:	193b      	adds	r3, r7, r4
 8012c54:	881b      	ldrh	r3, [r3, #0]
 8012c56:	21a5      	movs	r1, #165	; 0xa5
 8012c58:	0018      	movs	r0, r3
 8012c5a:	f00f fc57 	bl	802250c <TRACER_EMB_WriteData>
 8012c5e:	193b      	adds	r3, r7, r4
 8012c60:	193a      	adds	r2, r7, r4
 8012c62:	8812      	ldrh	r2, [r2, #0]
 8012c64:	3201      	adds	r2, #1
 8012c66:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 8012c68:	2116      	movs	r1, #22
 8012c6a:	187b      	adds	r3, r7, r1
 8012c6c:	881a      	ldrh	r2, [r3, #0]
 8012c6e:	187b      	adds	r3, r7, r1
 8012c70:	3201      	adds	r2, #1
 8012c72:	801a      	strh	r2, [r3, #0]
 8012c74:	2316      	movs	r3, #22
 8012c76:	18fb      	adds	r3, r7, r3
 8012c78:	881b      	ldrh	r3, [r3, #0]
 8012c7a:	2b03      	cmp	r3, #3
 8012c7c:	d9e8      	bls.n	8012c50 <USBPD_TRACE_Add+0x250>
    }
  }

  TRACER_EMB_UnLock();
 8012c7e:	f00f fced 	bl	802265c <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 8012c82:	f00f fd09 	bl	8022698 <TRACER_EMB_SendData>
#else
  return;
#endif /* _TRACE */
}
 8012c86:	46c0      	nop			; (mov r8, r8)
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	b006      	add	sp, #24
 8012c8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012c90 <__NVIC_EnableIRQ>:
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	0002      	movs	r2, r0
 8012c98:	1dfb      	adds	r3, r7, #7
 8012c9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012c9c:	1dfb      	adds	r3, r7, #7
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8012ca2:	d809      	bhi.n	8012cb8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012ca4:	1dfb      	adds	r3, r7, #7
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	001a      	movs	r2, r3
 8012caa:	231f      	movs	r3, #31
 8012cac:	401a      	ands	r2, r3
 8012cae:	4b04      	ldr	r3, [pc, #16]	; (8012cc0 <__NVIC_EnableIRQ+0x30>)
 8012cb0:	2101      	movs	r1, #1
 8012cb2:	4091      	lsls	r1, r2
 8012cb4:	000a      	movs	r2, r1
 8012cb6:	601a      	str	r2, [r3, #0]
}
 8012cb8:	46c0      	nop			; (mov r8, r8)
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	b002      	add	sp, #8
 8012cbe:	bd80      	pop	{r7, pc}
 8012cc0:	e000e100 	.word	0xe000e100

08012cc4 <__NVIC_SetPriority>:
{
 8012cc4:	b590      	push	{r4, r7, lr}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	0002      	movs	r2, r0
 8012ccc:	6039      	str	r1, [r7, #0]
 8012cce:	1dfb      	adds	r3, r7, #7
 8012cd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012cd2:	1dfb      	adds	r3, r7, #7
 8012cd4:	781b      	ldrb	r3, [r3, #0]
 8012cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8012cd8:	d828      	bhi.n	8012d2c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012cda:	4a2f      	ldr	r2, [pc, #188]	; (8012d98 <__NVIC_SetPriority+0xd4>)
 8012cdc:	1dfb      	adds	r3, r7, #7
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	b25b      	sxtb	r3, r3
 8012ce2:	089b      	lsrs	r3, r3, #2
 8012ce4:	33c0      	adds	r3, #192	; 0xc0
 8012ce6:	009b      	lsls	r3, r3, #2
 8012ce8:	589b      	ldr	r3, [r3, r2]
 8012cea:	1dfa      	adds	r2, r7, #7
 8012cec:	7812      	ldrb	r2, [r2, #0]
 8012cee:	0011      	movs	r1, r2
 8012cf0:	2203      	movs	r2, #3
 8012cf2:	400a      	ands	r2, r1
 8012cf4:	00d2      	lsls	r2, r2, #3
 8012cf6:	21ff      	movs	r1, #255	; 0xff
 8012cf8:	4091      	lsls	r1, r2
 8012cfa:	000a      	movs	r2, r1
 8012cfc:	43d2      	mvns	r2, r2
 8012cfe:	401a      	ands	r2, r3
 8012d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	019b      	lsls	r3, r3, #6
 8012d06:	22ff      	movs	r2, #255	; 0xff
 8012d08:	401a      	ands	r2, r3
 8012d0a:	1dfb      	adds	r3, r7, #7
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	0018      	movs	r0, r3
 8012d10:	2303      	movs	r3, #3
 8012d12:	4003      	ands	r3, r0
 8012d14:	00db      	lsls	r3, r3, #3
 8012d16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012d18:	481f      	ldr	r0, [pc, #124]	; (8012d98 <__NVIC_SetPriority+0xd4>)
 8012d1a:	1dfb      	adds	r3, r7, #7
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	b25b      	sxtb	r3, r3
 8012d20:	089b      	lsrs	r3, r3, #2
 8012d22:	430a      	orrs	r2, r1
 8012d24:	33c0      	adds	r3, #192	; 0xc0
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	501a      	str	r2, [r3, r0]
}
 8012d2a:	e031      	b.n	8012d90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012d2c:	4a1b      	ldr	r2, [pc, #108]	; (8012d9c <__NVIC_SetPriority+0xd8>)
 8012d2e:	1dfb      	adds	r3, r7, #7
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	0019      	movs	r1, r3
 8012d34:	230f      	movs	r3, #15
 8012d36:	400b      	ands	r3, r1
 8012d38:	3b08      	subs	r3, #8
 8012d3a:	089b      	lsrs	r3, r3, #2
 8012d3c:	3306      	adds	r3, #6
 8012d3e:	009b      	lsls	r3, r3, #2
 8012d40:	18d3      	adds	r3, r2, r3
 8012d42:	3304      	adds	r3, #4
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	1dfa      	adds	r2, r7, #7
 8012d48:	7812      	ldrb	r2, [r2, #0]
 8012d4a:	0011      	movs	r1, r2
 8012d4c:	2203      	movs	r2, #3
 8012d4e:	400a      	ands	r2, r1
 8012d50:	00d2      	lsls	r2, r2, #3
 8012d52:	21ff      	movs	r1, #255	; 0xff
 8012d54:	4091      	lsls	r1, r2
 8012d56:	000a      	movs	r2, r1
 8012d58:	43d2      	mvns	r2, r2
 8012d5a:	401a      	ands	r2, r3
 8012d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	019b      	lsls	r3, r3, #6
 8012d62:	22ff      	movs	r2, #255	; 0xff
 8012d64:	401a      	ands	r2, r3
 8012d66:	1dfb      	adds	r3, r7, #7
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	0018      	movs	r0, r3
 8012d6c:	2303      	movs	r3, #3
 8012d6e:	4003      	ands	r3, r0
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012d74:	4809      	ldr	r0, [pc, #36]	; (8012d9c <__NVIC_SetPriority+0xd8>)
 8012d76:	1dfb      	adds	r3, r7, #7
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	001c      	movs	r4, r3
 8012d7c:	230f      	movs	r3, #15
 8012d7e:	4023      	ands	r3, r4
 8012d80:	3b08      	subs	r3, #8
 8012d82:	089b      	lsrs	r3, r3, #2
 8012d84:	430a      	orrs	r2, r1
 8012d86:	3306      	adds	r3, #6
 8012d88:	009b      	lsls	r3, r3, #2
 8012d8a:	18c3      	adds	r3, r0, r3
 8012d8c:	3304      	adds	r3, #4
 8012d8e:	601a      	str	r2, [r3, #0]
}
 8012d90:	46c0      	nop			; (mov r8, r8)
 8012d92:	46bd      	mov	sp, r7
 8012d94:	b003      	add	sp, #12
 8012d96:	bd90      	pop	{r4, r7, pc}
 8012d98:	e000e100 	.word	0xe000e100
 8012d9c:	e000ed00 	.word	0xe000ed00

08012da0 <LL_UCPD_Enable>:
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2280      	movs	r2, #128	; 0x80
 8012dae:	0612      	lsls	r2, r2, #24
 8012db0:	431a      	orrs	r2, r3
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	601a      	str	r2, [r3, #0]
}
 8012db6:	46c0      	nop			; (mov r8, r8)
 8012db8:	46bd      	mov	sp, r7
 8012dba:	b002      	add	sp, #8
 8012dbc:	bd80      	pop	{r7, pc}
	...

08012dc0 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4a05      	ldr	r2, [pc, #20]	; (8012de4 <LL_UCPD_SetRxOrderSet+0x24>)
 8012dd0:	401a      	ands	r2, r3
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	431a      	orrs	r2, r3
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	601a      	str	r2, [r3, #0]
}
 8012dda:	46c0      	nop			; (mov r8, r8)
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	b002      	add	sp, #8
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	46c0      	nop			; (mov r8, r8)
 8012de4:	e00fffff 	.word	0xe00fffff

08012de8 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	4a05      	ldr	r2, [pc, #20]	; (8012e0c <LL_UCPD_SetccEnable+0x24>)
 8012df8:	401a      	ands	r2, r3
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	431a      	orrs	r2, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	60da      	str	r2, [r3, #12]
}
 8012e02:	46c0      	nop			; (mov r8, r8)
 8012e04:	46bd      	mov	sp, r7
 8012e06:	b002      	add	sp, #8
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	46c0      	nop			; (mov r8, r8)
 8012e0c:	fffff3ff 	.word	0xfffff3ff

08012e10 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	691b      	ldr	r3, [r3, #16]
 8012e1c:	2280      	movs	r2, #128	; 0x80
 8012e1e:	0212      	lsls	r2, r2, #8
 8012e20:	431a      	orrs	r2, r3
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	611a      	str	r2, [r3, #16]
}
 8012e26:	46c0      	nop			; (mov r8, r8)
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	b002      	add	sp, #8
 8012e2c:	bd80      	pop	{r7, pc}

08012e2e <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8012e2e:	b580      	push	{r7, lr}
 8012e30:	b082      	sub	sp, #8
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	691b      	ldr	r3, [r3, #16]
 8012e3a:	2280      	movs	r2, #128	; 0x80
 8012e3c:	01d2      	lsls	r2, r2, #7
 8012e3e:	431a      	orrs	r2, r3
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	611a      	str	r2, [r3, #16]
}
 8012e44:	46c0      	nop			; (mov r8, r8)
 8012e46:	46bd      	mov	sp, r7
 8012e48:	b002      	add	sp, #8
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 8012e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e4e:	b08b      	sub	sp, #44	; 0x2c
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	60b9      	str	r1, [r7, #8]
 8012e54:	607a      	str	r2, [r7, #4]
 8012e56:	603b      	str	r3, [r7, #0]
 8012e58:	240f      	movs	r4, #15
 8012e5a:	193b      	adds	r3, r7, r4
 8012e5c:	1c02      	adds	r2, r0, #0
 8012e5e:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8012e60:	193b      	adds	r3, r7, r4
 8012e62:	781a      	ldrb	r2, [r3, #0]
 8012e64:	0013      	movs	r3, r2
 8012e66:	005b      	lsls	r3, r3, #1
 8012e68:	189b      	adds	r3, r3, r2
 8012e6a:	009b      	lsls	r3, r3, #2
 8012e6c:	4a65      	ldr	r2, [pc, #404]	; (8013004 <CAD_Init+0x1b8>)
 8012e6e:	189b      	adds	r3, r3, r2
 8012e70:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8012e72:	193b      	adds	r3, r7, r4
 8012e74:	781a      	ldrb	r2, [r3, #0]
 8012e76:	4964      	ldr	r1, [pc, #400]	; (8013008 <CAD_Init+0x1bc>)
 8012e78:	0013      	movs	r3, r2
 8012e7a:	011b      	lsls	r3, r3, #4
 8012e7c:	1a9b      	subs	r3, r3, r2
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	18cb      	adds	r3, r1, r3
 8012e82:	3310      	adds	r3, #16
 8012e84:	687a      	ldr	r2, [r7, #4]
 8012e86:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8012e88:	193b      	adds	r3, r7, r4
 8012e8a:	781a      	ldrb	r2, [r3, #0]
 8012e8c:	495e      	ldr	r1, [pc, #376]	; (8013008 <CAD_Init+0x1bc>)
 8012e8e:	0013      	movs	r3, r2
 8012e90:	011b      	lsls	r3, r3, #4
 8012e92:	1a9b      	subs	r3, r3, r2
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	18cb      	adds	r3, r1, r3
 8012e98:	330c      	adds	r3, #12
 8012e9a:	68ba      	ldr	r2, [r7, #8]
 8012e9c:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8012e9e:	193b      	adds	r3, r7, r4
 8012ea0:	781a      	ldrb	r2, [r3, #0]
 8012ea2:	4959      	ldr	r1, [pc, #356]	; (8013008 <CAD_Init+0x1bc>)
 8012ea4:	0013      	movs	r3, r2
 8012ea6:	011b      	lsls	r3, r3, #4
 8012ea8:	1a9b      	subs	r3, r3, r2
 8012eaa:	009b      	lsls	r3, r3, #2
 8012eac:	18cb      	adds	r3, r1, r3
 8012eae:	330c      	adds	r3, #12
 8012eb0:	6819      	ldr	r1, [r3, #0]
 8012eb2:	193b      	adds	r3, r7, r4
 8012eb4:	781a      	ldrb	r2, [r3, #0]
 8012eb6:	4854      	ldr	r0, [pc, #336]	; (8013008 <CAD_Init+0x1bc>)
 8012eb8:	0013      	movs	r3, r2
 8012eba:	011b      	lsls	r3, r3, #4
 8012ebc:	1a9b      	subs	r3, r3, r2
 8012ebe:	009b      	lsls	r3, r3, #2
 8012ec0:	18c3      	adds	r3, r0, r3
 8012ec2:	3310      	adds	r3, #16
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	794a      	ldrb	r2, [r1, #5]
 8012ec8:	0612      	lsls	r2, r2, #24
 8012eca:	0f92      	lsrs	r2, r2, #30
 8012ecc:	b2d2      	uxtb	r2, r2
 8012ece:	2103      	movs	r1, #3
 8012ed0:	400a      	ands	r2, r1
 8012ed2:	0010      	movs	r0, r2
 8012ed4:	789a      	ldrb	r2, [r3, #2]
 8012ed6:	2103      	movs	r1, #3
 8012ed8:	438a      	bics	r2, r1
 8012eda:	1c11      	adds	r1, r2, #0
 8012edc:	1c02      	adds	r2, r0, #0
 8012ede:	430a      	orrs	r2, r1
 8012ee0:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8012ee2:	193b      	adds	r3, r7, r4
 8012ee4:	781a      	ldrb	r2, [r3, #0]
 8012ee6:	4948      	ldr	r1, [pc, #288]	; (8013008 <CAD_Init+0x1bc>)
 8012ee8:	0013      	movs	r3, r2
 8012eea:	011b      	lsls	r3, r3, #4
 8012eec:	1a9b      	subs	r3, r3, r2
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	18cb      	adds	r3, r1, r3
 8012ef2:	3310      	adds	r3, #16
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	789a      	ldrb	r2, [r3, #2]
 8012ef8:	210c      	movs	r1, #12
 8012efa:	438a      	bics	r2, r1
 8012efc:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8012efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f00:	220c      	movs	r2, #12
 8012f02:	2100      	movs	r1, #0
 8012f04:	0018      	movs	r0, r3
 8012f06:	f010 fbe1 	bl	80236cc <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8012f0a:	193b      	adds	r3, r7, r4
 8012f0c:	781a      	ldrb	r2, [r3, #0]
 8012f0e:	493e      	ldr	r1, [pc, #248]	; (8013008 <CAD_Init+0x1bc>)
 8012f10:	0013      	movs	r3, r2
 8012f12:	011b      	lsls	r3, r3, #4
 8012f14:	1a9b      	subs	r3, r3, r2
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	18cb      	adds	r3, r1, r3
 8012f1a:	332c      	adds	r3, #44	; 0x2c
 8012f1c:	683a      	ldr	r2, [r7, #0]
 8012f1e:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 8012f20:	0025      	movs	r5, r4
 8012f22:	193b      	adds	r3, r7, r4
 8012f24:	781c      	ldrb	r4, [r3, #0]
 8012f26:	197b      	adds	r3, r7, r5
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	0018      	movs	r0, r3
 8012f2c:	f000 fc42 	bl	80137b4 <USBPD_HW_GetUSPDInstance>
 8012f30:	0001      	movs	r1, r0
 8012f32:	4a35      	ldr	r2, [pc, #212]	; (8013008 <CAD_Init+0x1bc>)
 8012f34:	0023      	movs	r3, r4
 8012f36:	011b      	lsls	r3, r3, #4
 8012f38:	1b1b      	subs	r3, r3, r4
 8012f3a:	009b      	lsls	r3, r3, #2
 8012f3c:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 8012f3e:	2614      	movs	r6, #20
 8012f40:	19bb      	adds	r3, r7, r6
 8012f42:	0018      	movs	r0, r3
 8012f44:	f7fd fdfe 	bl	8010b44 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8012f48:	002c      	movs	r4, r5
 8012f4a:	193b      	adds	r3, r7, r4
 8012f4c:	781a      	ldrb	r2, [r3, #0]
 8012f4e:	492e      	ldr	r1, [pc, #184]	; (8013008 <CAD_Init+0x1bc>)
 8012f50:	0013      	movs	r3, r2
 8012f52:	011b      	lsls	r3, r3, #4
 8012f54:	1a9b      	subs	r3, r3, r2
 8012f56:	009b      	lsls	r3, r3, #2
 8012f58:	585b      	ldr	r3, [r3, r1]
 8012f5a:	19ba      	adds	r2, r7, r6
 8012f5c:	0011      	movs	r1, r2
 8012f5e:	0018      	movs	r0, r3
 8012f60:	f7fd fdb6 	bl	8010ad0 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 8012f64:	193b      	adds	r3, r7, r4
 8012f66:	781a      	ldrb	r2, [r3, #0]
 8012f68:	4927      	ldr	r1, [pc, #156]	; (8013008 <CAD_Init+0x1bc>)
 8012f6a:	0013      	movs	r3, r2
 8012f6c:	011b      	lsls	r3, r3, #4
 8012f6e:	1a9b      	subs	r3, r3, r2
 8012f70:	009b      	lsls	r3, r3, #2
 8012f72:	585b      	ldr	r3, [r3, r1]
 8012f74:	22f8      	movs	r2, #248	; 0xf8
 8012f76:	0452      	lsls	r2, r2, #17
 8012f78:	0011      	movs	r1, r2
 8012f7a:	0018      	movs	r0, r3
 8012f7c:	f7ff ff20 	bl	8012dc0 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8012f80:	193b      	adds	r3, r7, r4
 8012f82:	781a      	ldrb	r2, [r3, #0]
 8012f84:	4920      	ldr	r1, [pc, #128]	; (8013008 <CAD_Init+0x1bc>)
 8012f86:	0013      	movs	r3, r2
 8012f88:	011b      	lsls	r3, r3, #4
 8012f8a:	1a9b      	subs	r3, r3, r2
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	585b      	ldr	r3, [r3, r1]
 8012f90:	22c0      	movs	r2, #192	; 0xc0
 8012f92:	0112      	lsls	r2, r2, #4
 8012f94:	0011      	movs	r1, r2
 8012f96:	0018      	movs	r0, r3
 8012f98:	f7ff ff26 	bl	8012de8 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8012f9c:	193b      	adds	r3, r7, r4
 8012f9e:	781b      	ldrb	r3, [r3, #0]
 8012fa0:	0018      	movs	r0, r3
 8012fa2:	f009 fb1d 	bl	801c5e0 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8012fa6:	193b      	adds	r3, r7, r4
 8012fa8:	781a      	ldrb	r2, [r3, #0]
 8012faa:	4917      	ldr	r1, [pc, #92]	; (8013008 <CAD_Init+0x1bc>)
 8012fac:	0013      	movs	r3, r2
 8012fae:	011b      	lsls	r3, r3, #4
 8012fb0:	1a9b      	subs	r3, r3, r2
 8012fb2:	009b      	lsls	r3, r3, #2
 8012fb4:	585b      	ldr	r3, [r3, r1]
 8012fb6:	0018      	movs	r0, r3
 8012fb8:	f7ff fef2 	bl	8012da0 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8012fbc:	193b      	adds	r3, r7, r4
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	0018      	movs	r0, r3
 8012fc2:	f001 fdc1 	bl	8014b48 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8012fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc8:	4a10      	ldr	r2, [pc, #64]	; (801300c <CAD_Init+0x1c0>)
 8012fca:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8012fcc:	193b      	adds	r3, r7, r4
 8012fce:	781a      	ldrb	r2, [r3, #0]
 8012fd0:	490d      	ldr	r1, [pc, #52]	; (8013008 <CAD_Init+0x1bc>)
 8012fd2:	0013      	movs	r3, r2
 8012fd4:	011b      	lsls	r3, r3, #4
 8012fd6:	1a9b      	subs	r3, r3, r2
 8012fd8:	009b      	lsls	r3, r3, #2
 8012fda:	18cb      	adds	r3, r1, r3
 8012fdc:	330c      	adds	r3, #12
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	795b      	ldrb	r3, [r3, #5]
 8012fe2:	06db      	lsls	r3, r3, #27
 8012fe4:	0fdb      	lsrs	r3, r3, #31
 8012fe6:	b2da      	uxtb	r2, r3
 8012fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fea:	01d0      	lsls	r0, r2, #7
 8012fec:	785a      	ldrb	r2, [r3, #1]
 8012fee:	217f      	movs	r1, #127	; 0x7f
 8012ff0:	400a      	ands	r2, r1
 8012ff2:	1c11      	adds	r1, r2, #0
 8012ff4:	1c02      	adds	r2, r0, #0
 8012ff6:	430a      	orrs	r2, r1
 8012ff8:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 8012ffa:	46c0      	nop			; (mov r8, r8)
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	b00b      	add	sp, #44	; 0x2c
 8013000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013002:	46c0      	nop			; (mov r8, r8)
 8013004:	20000590 	.word	0x20000590
 8013008:	200005a8 	.word	0x200005a8
 801300c:	0801310d 	.word	0x0801310d

08013010 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	0002      	movs	r2, r0
 8013018:	1dfb      	adds	r3, r7, #7
 801301a:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 801301c:	1dfb      	adds	r3, r7, #7
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	0018      	movs	r0, r3
 8013022:	f001 fe41 	bl	8014ca8 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 8013026:	1dfb      	adds	r3, r7, #7
 8013028:	7819      	ldrb	r1, [r3, #0]
 801302a:	4a0c      	ldr	r2, [pc, #48]	; (801305c <CAD_Enter_ErrorRecovery+0x4c>)
 801302c:	000b      	movs	r3, r1
 801302e:	005b      	lsls	r3, r3, #1
 8013030:	185b      	adds	r3, r3, r1
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	5c99      	ldrb	r1, [r3, r2]
 8013036:	2080      	movs	r0, #128	; 0x80
 8013038:	4240      	negs	r0, r0
 801303a:	4301      	orrs	r1, r0
 801303c:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 801303e:	1dfb      	adds	r3, r7, #7
 8013040:	781a      	ldrb	r2, [r3, #0]
 8013042:	4907      	ldr	r1, [pc, #28]	; (8013060 <CAD_Enter_ErrorRecovery+0x50>)
 8013044:	0013      	movs	r3, r2
 8013046:	011b      	lsls	r3, r3, #4
 8013048:	1a9b      	subs	r3, r3, r2
 801304a:	009b      	lsls	r3, r3, #2
 801304c:	18cb      	adds	r3, r1, r3
 801304e:	332c      	adds	r3, #44	; 0x2c
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	4798      	blx	r3
}
 8013054:	46c0      	nop			; (mov r8, r8)
 8013056:	46bd      	mov	sp, r7
 8013058:	b002      	add	sp, #8
 801305a:	bd80      	pop	{r7, pc}
 801305c:	20000590 	.word	0x20000590
 8013060:	200005a8 	.word	0x200005a8

08013064 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	0002      	movs	r2, r0
 801306c:	6039      	str	r1, [r7, #0]
 801306e:	1dfb      	adds	r3, r7, #7
 8013070:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 8013072:	1dfb      	adds	r3, r7, #7
 8013074:	781a      	ldrb	r2, [r3, #0]
 8013076:	4919      	ldr	r1, [pc, #100]	; (80130dc <CAD_SRC_Set_ResistorRp+0x78>)
 8013078:	0013      	movs	r3, r2
 801307a:	011b      	lsls	r3, r3, #4
 801307c:	1a9b      	subs	r3, r3, r2
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	18cb      	adds	r3, r1, r3
 8013082:	3310      	adds	r3, #16
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	683a      	ldr	r2, [r7, #0]
 8013088:	1c11      	adds	r1, r2, #0
 801308a:	2203      	movs	r2, #3
 801308c:	400a      	ands	r2, r1
 801308e:	b2d2      	uxtb	r2, r2
 8013090:	2103      	movs	r1, #3
 8013092:	400a      	ands	r2, r1
 8013094:	0010      	movs	r0, r2
 8013096:	789a      	ldrb	r2, [r3, #2]
 8013098:	2103      	movs	r1, #3
 801309a:	438a      	bics	r2, r1
 801309c:	1c11      	adds	r1, r2, #0
 801309e:	1c02      	adds	r2, r0, #0
 80130a0:	430a      	orrs	r2, r1
 80130a2:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 80130a4:	1dfb      	adds	r3, r7, #7
 80130a6:	781a      	ldrb	r2, [r3, #0]
 80130a8:	490d      	ldr	r1, [pc, #52]	; (80130e0 <CAD_SRC_Set_ResistorRp+0x7c>)
 80130aa:	0013      	movs	r3, r2
 80130ac:	005b      	lsls	r3, r3, #1
 80130ae:	189b      	adds	r3, r3, r2
 80130b0:	009b      	lsls	r3, r3, #2
 80130b2:	18cb      	adds	r3, r1, r3
 80130b4:	785a      	ldrb	r2, [r3, #1]
 80130b6:	2101      	movs	r1, #1
 80130b8:	430a      	orrs	r2, r1
 80130ba:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 80130bc:	1dfb      	adds	r3, r7, #7
 80130be:	781a      	ldrb	r2, [r3, #0]
 80130c0:	4906      	ldr	r1, [pc, #24]	; (80130dc <CAD_SRC_Set_ResistorRp+0x78>)
 80130c2:	0013      	movs	r3, r2
 80130c4:	011b      	lsls	r3, r3, #4
 80130c6:	1a9b      	subs	r3, r3, r2
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	18cb      	adds	r3, r1, r3
 80130cc:	332c      	adds	r3, #44	; 0x2c
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4798      	blx	r3
  return 0;
 80130d2:	2300      	movs	r3, #0
}
 80130d4:	0018      	movs	r0, r3
 80130d6:	46bd      	mov	sp, r7
 80130d8:	b002      	add	sp, #8
 80130da:	bd80      	pop	{r7, pc}
 80130dc:	200005a8 	.word	0x200005a8
 80130e0:	20000590 	.word	0x20000590

080130e4 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	0002      	movs	r2, r0
 80130ec:	6039      	str	r1, [r7, #0]
 80130ee:	1dfb      	adds	r3, r7, #7
 80130f0:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 80130f2:	683a      	ldr	r2, [r7, #0]
 80130f4:	1dfb      	adds	r3, r7, #7
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	0011      	movs	r1, r2
 80130fa:	0018      	movs	r0, r3
 80130fc:	f7ff ffb2 	bl	8013064 <CAD_SRC_Set_ResistorRp>
 8013100:	0003      	movs	r3, r0
}
 8013102:	0018      	movs	r0, r3
 8013104:	46bd      	mov	sp, r7
 8013106:	b002      	add	sp, #8
 8013108:	bd80      	pop	{r7, pc}
	...

0801310c <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b086      	sub	sp, #24
 8013110:	af00      	add	r7, sp, #0
 8013112:	60b9      	str	r1, [r7, #8]
 8013114:	607a      	str	r2, [r7, #4]
 8013116:	210f      	movs	r1, #15
 8013118:	187b      	adds	r3, r7, r1
 801311a:	1c02      	adds	r2, r0, #0
 801311c:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801311e:	187b      	adds	r3, r7, r1
 8013120:	781a      	ldrb	r2, [r3, #0]
 8013122:	0013      	movs	r3, r2
 8013124:	005b      	lsls	r3, r3, #1
 8013126:	189b      	adds	r3, r3, r2
 8013128:	009b      	lsls	r3, r3, #2
 801312a:	4a1b      	ldr	r2, [pc, #108]	; (8013198 <CAD_StateMachine_SNK+0x8c>)
 801312c:	189b      	adds	r3, r3, r2
 801312e:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013130:	2302      	movs	r3, #2
 8013132:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8013134:	693b      	ldr	r3, [r7, #16]
 8013136:	785b      	ldrb	r3, [r3, #1]
 8013138:	069b      	lsls	r3, r3, #26
 801313a:	0edb      	lsrs	r3, r3, #27
 801313c:	b2db      	uxtb	r3, r3
 801313e:	2b03      	cmp	r3, #3
 8013140:	d019      	beq.n	8013176 <CAD_StateMachine_SNK+0x6a>
 8013142:	dc23      	bgt.n	801318c <CAD_StateMachine_SNK+0x80>
 8013144:	2b01      	cmp	r3, #1
 8013146:	d002      	beq.n	801314e <CAD_StateMachine_SNK+0x42>
 8013148:	2b02      	cmp	r3, #2
 801314a:	d009      	beq.n	8013160 <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 801314c:	e01e      	b.n	801318c <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 801314e:	230f      	movs	r3, #15
 8013150:	18fb      	adds	r3, r7, r3
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	0018      	movs	r0, r3
 8013156:	f000 f9c5 	bl	80134e4 <ManageStateDetached_SNK>
 801315a:	0003      	movs	r3, r0
 801315c:	617b      	str	r3, [r7, #20]
      break;
 801315e:	e016      	b.n	801318e <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 8013160:	687a      	ldr	r2, [r7, #4]
 8013162:	68b9      	ldr	r1, [r7, #8]
 8013164:	230f      	movs	r3, #15
 8013166:	18fb      	adds	r3, r7, r3
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	0018      	movs	r0, r3
 801316c:	f000 fa0c 	bl	8013588 <ManageStateAttachedWait_SNK>
 8013170:	0003      	movs	r3, r0
 8013172:	617b      	str	r3, [r7, #20]
      break;
 8013174:	e00b      	b.n	801318e <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 8013176:	687a      	ldr	r2, [r7, #4]
 8013178:	68b9      	ldr	r1, [r7, #8]
 801317a:	230f      	movs	r3, #15
 801317c:	18fb      	adds	r3, r7, r3
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	0018      	movs	r0, r3
 8013182:	f000 fa8f 	bl	80136a4 <ManageStateAttached_SNK>
 8013186:	0003      	movs	r3, r0
 8013188:	617b      	str	r3, [r7, #20]
      break;
 801318a:	e000      	b.n	801318e <CAD_StateMachine_SNK+0x82>
      break;
 801318c:	46c0      	nop			; (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 801318e:	697b      	ldr	r3, [r7, #20]
}
 8013190:	0018      	movs	r0, r3
 8013192:	46bd      	mov	sp, r7
 8013194:	b006      	add	sp, #24
 8013196:	bd80      	pop	{r7, pc}
 8013198:	20000590 	.word	0x20000590

0801319c <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 801319c:	b590      	push	{r4, r7, lr}
 801319e:	b089      	sub	sp, #36	; 0x24
 80131a0:	af02      	add	r7, sp, #8
 80131a2:	60b9      	str	r1, [r7, #8]
 80131a4:	607a      	str	r2, [r7, #4]
 80131a6:	210f      	movs	r1, #15
 80131a8:	187b      	adds	r3, r7, r1
 80131aa:	1c02      	adds	r2, r0, #0
 80131ac:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80131ae:	187b      	adds	r3, r7, r1
 80131b0:	781a      	ldrb	r2, [r3, #0]
 80131b2:	0013      	movs	r3, r2
 80131b4:	005b      	lsls	r3, r3, #1
 80131b6:	189b      	adds	r3, r3, r2
 80131b8:	009b      	lsls	r3, r3, #2
 80131ba:	4a7a      	ldr	r2, [pc, #488]	; (80133a4 <CAD_StateMachine+0x208>)
 80131bc:	189b      	adds	r3, r3, r2
 80131be:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80131c0:	2302      	movs	r3, #2
 80131c2:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	2200      	movs	r2, #0
 80131c8:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 80131ca:	187b      	adds	r3, r7, r1
 80131cc:	781a      	ldrb	r2, [r3, #0]
 80131ce:	4976      	ldr	r1, [pc, #472]	; (80133a8 <CAD_StateMachine+0x20c>)
 80131d0:	0013      	movs	r3, r2
 80131d2:	011b      	lsls	r3, r3, #4
 80131d4:	1a9b      	subs	r3, r3, r2
 80131d6:	009b      	lsls	r3, r3, #2
 80131d8:	18cb      	adds	r3, r1, r3
 80131da:	3310      	adds	r3, #16
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	2210      	movs	r2, #16
 80131e2:	4013      	ands	r3, r2
 80131e4:	b2db      	uxtb	r3, r3
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d001      	beq.n	80131ee <CAD_StateMachine+0x52>
  {
    return _timing;
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	e0d6      	b.n	801339c <CAD_StateMachine+0x200>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	227f      	movs	r2, #127	; 0x7f
 80131f4:	4393      	bics	r3, r2
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d01b      	beq.n	8013234 <CAD_StateMachine+0x98>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	781a      	ldrb	r2, [r3, #0]
 8013200:	217f      	movs	r1, #127	; 0x7f
 8013202:	400a      	ands	r2, r1
 8013204:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	785a      	ldrb	r2, [r3, #1]
 801320a:	213e      	movs	r1, #62	; 0x3e
 801320c:	438a      	bics	r2, r1
 801320e:	1c11      	adds	r1, r2, #0
 8013210:	2218      	movs	r2, #24
 8013212:	430a      	orrs	r2, r1
 8013214:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	785b      	ldrb	r3, [r3, #1]
 801321a:	069b      	lsls	r3, r3, #26
 801321c:	0edb      	lsrs	r3, r3, #27
 801321e:	b2db      	uxtb	r3, r3
 8013220:	001a      	movs	r2, r3
 8013222:	230f      	movs	r3, #15
 8013224:	18fb      	adds	r3, r7, r3
 8013226:	7819      	ldrb	r1, [r3, #0]
 8013228:	2300      	movs	r3, #0
 801322a:	9300      	str	r3, [sp, #0]
 801322c:	2300      	movs	r3, #0
 801322e:	2005      	movs	r0, #5
 8013230:	f7ff fbe6 	bl	8012a00 <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	785b      	ldrb	r3, [r3, #1]
 8013238:	069b      	lsls	r3, r3, #26
 801323a:	0edb      	lsrs	r3, r3, #27
 801323c:	b2db      	uxtb	r3, r3
 801323e:	2b0d      	cmp	r3, #13
 8013240:	d05c      	beq.n	80132fc <CAD_StateMachine+0x160>
 8013242:	dc72      	bgt.n	801332a <CAD_StateMachine+0x18e>
 8013244:	2b00      	cmp	r3, #0
 8013246:	d002      	beq.n	801324e <CAD_StateMachine+0xb2>
 8013248:	2b0c      	cmp	r3, #12
 801324a:	d02b      	beq.n	80132a4 <CAD_StateMachine+0x108>
 801324c:	e06d      	b.n	801332a <CAD_StateMachine+0x18e>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 801324e:	240f      	movs	r4, #15
 8013250:	193b      	adds	r3, r7, r4
 8013252:	781a      	ldrb	r2, [r3, #0]
 8013254:	4954      	ldr	r1, [pc, #336]	; (80133a8 <CAD_StateMachine+0x20c>)
 8013256:	0013      	movs	r3, r2
 8013258:	011b      	lsls	r3, r3, #4
 801325a:	1a9b      	subs	r3, r3, r2
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	585b      	ldr	r3, [r3, r1]
 8013260:	0018      	movs	r0, r3
 8013262:	f7ff fdd5 	bl	8012e10 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8013266:	193b      	adds	r3, r7, r4
 8013268:	781a      	ldrb	r2, [r3, #0]
 801326a:	494f      	ldr	r1, [pc, #316]	; (80133a8 <CAD_StateMachine+0x20c>)
 801326c:	0013      	movs	r3, r2
 801326e:	011b      	lsls	r3, r3, #4
 8013270:	1a9b      	subs	r3, r3, r2
 8013272:	009b      	lsls	r3, r3, #2
 8013274:	585b      	ldr	r3, [r3, r1]
 8013276:	0018      	movs	r0, r3
 8013278:	f7ff fdd9 	bl	8012e2e <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 801327c:	193b      	adds	r3, r7, r4
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d106      	bne.n	8013292 <CAD_StateMachine+0xf6>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 8013284:	2102      	movs	r1, #2
 8013286:	2008      	movs	r0, #8
 8013288:	f7ff fd1c 	bl	8012cc4 <__NVIC_SetPriority>
 801328c:	2008      	movs	r0, #8
 801328e:	f7ff fcff 	bl	8012c90 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	785a      	ldrb	r2, [r3, #1]
 8013296:	213e      	movs	r1, #62	; 0x3e
 8013298:	438a      	bics	r2, r1
 801329a:	1c11      	adds	r1, r2, #0
 801329c:	2202      	movs	r2, #2
 801329e:	430a      	orrs	r2, r1
 80132a0:	705a      	strb	r2, [r3, #1]
      break;
 80132a2:	e04f      	b.n	8013344 <CAD_StateMachine+0x1a8>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 80132a4:	240f      	movs	r4, #15
 80132a6:	193b      	adds	r3, r7, r4
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	0018      	movs	r0, r3
 80132ac:	f001 fcfc 	bl	8014ca8 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 80132b0:	193b      	adds	r3, r7, r4
 80132b2:	781a      	ldrb	r2, [r3, #0]
 80132b4:	493c      	ldr	r1, [pc, #240]	; (80133a8 <CAD_StateMachine+0x20c>)
 80132b6:	0013      	movs	r3, r2
 80132b8:	011b      	lsls	r3, r3, #4
 80132ba:	1a9b      	subs	r3, r3, r2
 80132bc:	009b      	lsls	r3, r3, #2
 80132be:	18cb      	adds	r3, r1, r3
 80132c0:	3334      	adds	r3, #52	; 0x34
 80132c2:	2200      	movs	r2, #0
 80132c4:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2200      	movs	r2, #0
 80132ca:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	781a      	ldrb	r2, [r3, #0]
 80132d0:	2103      	movs	r1, #3
 80132d2:	438a      	bics	r2, r1
 80132d4:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	2201      	movs	r2, #1
 80132da:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 80132dc:	f7f6 f870 	bl	80093c0 <HAL_GetTick>
 80132e0:	0002      	movs	r2, r0
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 80132e6:	231a      	movs	r3, #26
 80132e8:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	785a      	ldrb	r2, [r3, #1]
 80132ee:	213e      	movs	r1, #62	; 0x3e
 80132f0:	438a      	bics	r2, r1
 80132f2:	1c11      	adds	r1, r2, #0
 80132f4:	221a      	movs	r2, #26
 80132f6:	430a      	orrs	r2, r1
 80132f8:	705a      	strb	r2, [r3, #1]
      break;
 80132fa:	e023      	b.n	8013344 <CAD_StateMachine+0x1a8>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 80132fc:	f7f6 f860 	bl	80093c0 <HAL_GetTick>
 8013300:	0002      	movs	r2, r0
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	1ad3      	subs	r3, r2, r3
 8013308:	2b1a      	cmp	r3, #26
 801330a:	d91a      	bls.n	8013342 <CAD_StateMachine+0x1a6>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 801330c:	230f      	movs	r3, #15
 801330e:	18fb      	adds	r3, r7, r3
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	0018      	movs	r0, r3
 8013314:	f001 fc18 	bl	8014b48 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	785a      	ldrb	r2, [r3, #1]
 801331c:	213e      	movs	r1, #62	; 0x3e
 801331e:	438a      	bics	r2, r1
 8013320:	1c11      	adds	r1, r2, #0
 8013322:	2202      	movs	r2, #2
 8013324:	430a      	orrs	r2, r1
 8013326:	705a      	strb	r2, [r3, #1]
      }
      break;
 8013328:	e00b      	b.n	8013342 <CAD_StateMachine+0x1a6>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	689b      	ldr	r3, [r3, #8]
 801332e:	687c      	ldr	r4, [r7, #4]
 8013330:	68b9      	ldr	r1, [r7, #8]
 8013332:	220f      	movs	r2, #15
 8013334:	18ba      	adds	r2, r7, r2
 8013336:	7810      	ldrb	r0, [r2, #0]
 8013338:	0022      	movs	r2, r4
 801333a:	4798      	blx	r3
 801333c:	0003      	movs	r3, r0
 801333e:	617b      	str	r3, [r7, #20]
      break;
 8013340:	e000      	b.n	8013344 <CAD_StateMachine+0x1a8>
      break;
 8013342:	46c0      	nop			; (mov r8, r8)
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	785b      	ldrb	r3, [r3, #1]
 8013348:	069b      	lsls	r3, r3, #26
 801334a:	0edb      	lsrs	r3, r3, #27
 801334c:	b2da      	uxtb	r2, r3
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	789b      	ldrb	r3, [r3, #2]
 8013352:	069b      	lsls	r3, r3, #26
 8013354:	0edb      	lsrs	r3, r3, #27
 8013356:	b2db      	uxtb	r3, r3
 8013358:	429a      	cmp	r2, r3
 801335a:	d01e      	beq.n	801339a <CAD_StateMachine+0x1fe>
  {
    _handle->pstate = _handle->cstate;
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	785b      	ldrb	r3, [r3, #1]
 8013360:	069b      	lsls	r3, r3, #26
 8013362:	0edb      	lsrs	r3, r3, #27
 8013364:	b2da      	uxtb	r2, r3
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	211f      	movs	r1, #31
 801336a:	400a      	ands	r2, r1
 801336c:	1890      	adds	r0, r2, r2
 801336e:	789a      	ldrb	r2, [r3, #2]
 8013370:	213e      	movs	r1, #62	; 0x3e
 8013372:	438a      	bics	r2, r1
 8013374:	1c11      	adds	r1, r2, #0
 8013376:	1c02      	adds	r2, r0, #0
 8013378:	430a      	orrs	r2, r1
 801337a:	709a      	strb	r2, [r3, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	785b      	ldrb	r3, [r3, #1]
 8013380:	069b      	lsls	r3, r3, #26
 8013382:	0edb      	lsrs	r3, r3, #27
 8013384:	b2db      	uxtb	r3, r3
 8013386:	001a      	movs	r2, r3
 8013388:	230f      	movs	r3, #15
 801338a:	18fb      	adds	r3, r7, r3
 801338c:	7819      	ldrb	r1, [r3, #0]
 801338e:	2300      	movs	r3, #0
 8013390:	9300      	str	r3, [sp, #0]
 8013392:	2300      	movs	r3, #0
 8013394:	2005      	movs	r0, #5
 8013396:	f7ff fb33 	bl	8012a00 <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 801339a:	697b      	ldr	r3, [r7, #20]
}
 801339c:	0018      	movs	r0, r3
 801339e:	46bd      	mov	sp, r7
 80133a0:	b007      	add	sp, #28
 80133a2:	bd90      	pop	{r4, r7, pc}
 80133a4:	20000590 	.word	0x20000590
 80133a8:	200005a8 	.word	0x200005a8

080133ac <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b086      	sub	sp, #24
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	0002      	movs	r2, r0
 80133b4:	1dfb      	adds	r3, r7, #7
 80133b6:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80133b8:	1dfb      	adds	r3, r7, #7
 80133ba:	781a      	ldrb	r2, [r3, #0]
 80133bc:	0013      	movs	r3, r2
 80133be:	005b      	lsls	r3, r3, #1
 80133c0:	189b      	adds	r3, r3, r2
 80133c2:	009b      	lsls	r3, r3, #2
 80133c4:	4a45      	ldr	r2, [pc, #276]	; (80134dc <CAD_Check_HW_SNK+0x130>)
 80133c6:	189b      	adds	r3, r3, r2
 80133c8:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 80133ca:	1dfb      	adds	r3, r7, #7
 80133cc:	781a      	ldrb	r2, [r3, #0]
 80133ce:	4944      	ldr	r1, [pc, #272]	; (80134e0 <CAD_Check_HW_SNK+0x134>)
 80133d0:	0013      	movs	r3, r2
 80133d2:	011b      	lsls	r3, r3, #4
 80133d4:	1a9b      	subs	r3, r3, r2
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	585b      	ldr	r3, [r3, r1]
 80133da:	695a      	ldr	r2, [r3, #20]
 80133dc:	23c0      	movs	r3, #192	; 0xc0
 80133de:	029b      	lsls	r3, r3, #10
 80133e0:	4013      	ands	r3, r2
 80133e2:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 80133e4:	1dfb      	adds	r3, r7, #7
 80133e6:	781a      	ldrb	r2, [r3, #0]
 80133e8:	493d      	ldr	r1, [pc, #244]	; (80134e0 <CAD_Check_HW_SNK+0x134>)
 80133ea:	0013      	movs	r3, r2
 80133ec:	011b      	lsls	r3, r3, #4
 80133ee:	1a9b      	subs	r3, r3, r2
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	585b      	ldr	r3, [r3, r1]
 80133f4:	695a      	ldr	r2, [r3, #20]
 80133f6:	23c0      	movs	r3, #192	; 0xc0
 80133f8:	031b      	lsls	r3, r3, #12
 80133fa:	4013      	ands	r3, r2
 80133fc:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	781a      	ldrb	r2, [r3, #0]
 8013402:	2103      	movs	r1, #3
 8013404:	438a      	bics	r2, r1
 8013406:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	781a      	ldrb	r2, [r3, #0]
 801340c:	211c      	movs	r1, #28
 801340e:	438a      	bics	r2, r1
 8013410:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d02c      	beq.n	8013472 <CAD_Check_HW_SNK+0xc6>
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d129      	bne.n	8013472 <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	781a      	ldrb	r2, [r3, #0]
 8013422:	211c      	movs	r1, #28
 8013424:	438a      	bics	r2, r1
 8013426:	1c11      	adds	r1, r2, #0
 8013428:	2204      	movs	r2, #4
 801342a:	430a      	orrs	r2, r1
 801342c:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	781a      	ldrb	r2, [r3, #0]
 8013432:	2103      	movs	r1, #3
 8013434:	438a      	bics	r2, r1
 8013436:	1c11      	adds	r1, r2, #0
 8013438:	2201      	movs	r2, #1
 801343a:	430a      	orrs	r2, r1
 801343c:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	0c18      	lsrs	r0, r3, #16
 8013442:	1dfb      	adds	r3, r7, #7
 8013444:	781a      	ldrb	r2, [r3, #0]
 8013446:	4926      	ldr	r1, [pc, #152]	; (80134e0 <CAD_Check_HW_SNK+0x134>)
 8013448:	0013      	movs	r3, r2
 801344a:	011b      	lsls	r3, r3, #4
 801344c:	1a9b      	subs	r3, r3, r2
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	18cb      	adds	r3, r1, r3
 8013452:	3310      	adds	r3, #16
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	1c01      	adds	r1, r0, #0
 8013458:	2203      	movs	r2, #3
 801345a:	400a      	ands	r2, r1
 801345c:	b2d2      	uxtb	r2, r2
 801345e:	2103      	movs	r1, #3
 8013460:	400a      	ands	r2, r1
 8013462:	0090      	lsls	r0, r2, #2
 8013464:	789a      	ldrb	r2, [r3, #2]
 8013466:	210c      	movs	r1, #12
 8013468:	438a      	bics	r2, r1
 801346a:	1c11      	adds	r1, r2, #0
 801346c:	1c02      	adds	r2, r0, #0
 801346e:	430a      	orrs	r2, r1
 8013470:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d12c      	bne.n	80134d2 <CAD_Check_HW_SNK+0x126>
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d029      	beq.n	80134d2 <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	781a      	ldrb	r2, [r3, #0]
 8013482:	211c      	movs	r1, #28
 8013484:	438a      	bics	r2, r1
 8013486:	1c11      	adds	r1, r2, #0
 8013488:	2204      	movs	r2, #4
 801348a:	430a      	orrs	r2, r1
 801348c:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	781a      	ldrb	r2, [r3, #0]
 8013492:	2103      	movs	r1, #3
 8013494:	438a      	bics	r2, r1
 8013496:	1c11      	adds	r1, r2, #0
 8013498:	2202      	movs	r2, #2
 801349a:	430a      	orrs	r2, r1
 801349c:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	0c98      	lsrs	r0, r3, #18
 80134a2:	1dfb      	adds	r3, r7, #7
 80134a4:	781a      	ldrb	r2, [r3, #0]
 80134a6:	490e      	ldr	r1, [pc, #56]	; (80134e0 <CAD_Check_HW_SNK+0x134>)
 80134a8:	0013      	movs	r3, r2
 80134aa:	011b      	lsls	r3, r3, #4
 80134ac:	1a9b      	subs	r3, r3, r2
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	18cb      	adds	r3, r1, r3
 80134b2:	3310      	adds	r3, #16
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	1c01      	adds	r1, r0, #0
 80134b8:	2203      	movs	r2, #3
 80134ba:	400a      	ands	r2, r1
 80134bc:	b2d2      	uxtb	r2, r2
 80134be:	2103      	movs	r1, #3
 80134c0:	400a      	ands	r2, r1
 80134c2:	0090      	lsls	r0, r2, #2
 80134c4:	789a      	ldrb	r2, [r3, #2]
 80134c6:	210c      	movs	r1, #12
 80134c8:	438a      	bics	r2, r1
 80134ca:	1c11      	adds	r1, r2, #0
 80134cc:	1c02      	adds	r2, r0, #0
 80134ce:	430a      	orrs	r2, r1
 80134d0:	709a      	strb	r2, [r3, #2]
  }
}
 80134d2:	46c0      	nop			; (mov r8, r8)
 80134d4:	46bd      	mov	sp, r7
 80134d6:	b006      	add	sp, #24
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	46c0      	nop			; (mov r8, r8)
 80134dc:	20000590 	.word	0x20000590
 80134e0:	200005a8 	.word	0x200005a8

080134e4 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	0002      	movs	r2, r0
 80134ec:	1dfb      	adds	r3, r7, #7
 80134ee:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80134f0:	1dfb      	adds	r3, r7, #7
 80134f2:	781a      	ldrb	r2, [r3, #0]
 80134f4:	0013      	movs	r3, r2
 80134f6:	005b      	lsls	r3, r3, #1
 80134f8:	189b      	adds	r3, r3, r2
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	4a21      	ldr	r2, [pc, #132]	; (8013584 <ManageStateDetached_SNK+0xa0>)
 80134fe:	189b      	adds	r3, r3, r2
 8013500:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013502:	2302      	movs	r3, #2
 8013504:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8013506:	1dfb      	adds	r3, r7, #7
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	0018      	movs	r0, r3
 801350c:	f7ff ff4e 	bl	80133ac <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	221c      	movs	r2, #28
 8013516:	4013      	ands	r3, r2
 8013518:	b2db      	uxtb	r3, r3
 801351a:	2b00      	cmp	r3, #0
 801351c:	d103      	bne.n	8013526 <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 801351e:	2301      	movs	r3, #1
 8013520:	425b      	negs	r3, r3
 8013522:	60fb      	str	r3, [r7, #12]
 8013524:	e029      	b.n	801357a <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8013526:	f7f5 ff4b 	bl	80093c0 <HAL_GetTick>
 801352a:	0002      	movs	r2, r0
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	785a      	ldrb	r2, [r3, #1]
 8013534:	213e      	movs	r1, #62	; 0x3e
 8013536:	438a      	bics	r2, r1
 8013538:	1c11      	adds	r1, r2, #0
 801353a:	2204      	movs	r2, #4
 801353c:	430a      	orrs	r2, r1
 801353e:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 8013540:	2001      	movs	r0, #1
 8013542:	f7f5 ff47 	bl	80093d4 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8013546:	1dfb      	adds	r3, r7, #7
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	0018      	movs	r0, r3
 801354c:	f7ff ff2e 	bl	80133ac <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	221c      	movs	r2, #28
 8013556:	4013      	ands	r3, r2
 8013558:	b2db      	uxtb	r3, r3
 801355a:	2b00      	cmp	r3, #0
 801355c:	d108      	bne.n	8013570 <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	785a      	ldrb	r2, [r3, #1]
 8013562:	213e      	movs	r1, #62	; 0x3e
 8013564:	438a      	bics	r2, r1
 8013566:	1c11      	adds	r1, r2, #0
 8013568:	2202      	movs	r2, #2
 801356a:	430a      	orrs	r2, r1
 801356c:	705a      	strb	r2, [r3, #1]
 801356e:	e004      	b.n	801357a <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8013570:	1dfb      	adds	r3, r7, #7
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	0018      	movs	r0, r3
 8013576:	f009 f845 	bl	801c604 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 801357a:	68fb      	ldr	r3, [r7, #12]
}
 801357c:	0018      	movs	r0, r3
 801357e:	46bd      	mov	sp, r7
 8013580:	b004      	add	sp, #16
 8013582:	bd80      	pop	{r7, pc}
 8013584:	20000590 	.word	0x20000590

08013588 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013588:	b590      	push	{r4, r7, lr}
 801358a:	b089      	sub	sp, #36	; 0x24
 801358c:	af00      	add	r7, sp, #0
 801358e:	60b9      	str	r1, [r7, #8]
 8013590:	607a      	str	r2, [r7, #4]
 8013592:	240f      	movs	r4, #15
 8013594:	193b      	adds	r3, r7, r4
 8013596:	1c02      	adds	r2, r0, #0
 8013598:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801359a:	193b      	adds	r3, r7, r4
 801359c:	781a      	ldrb	r2, [r3, #0]
 801359e:	0013      	movs	r3, r2
 80135a0:	005b      	lsls	r3, r3, #1
 80135a2:	189b      	adds	r3, r3, r2
 80135a4:	009b      	lsls	r3, r3, #2
 80135a6:	4a3e      	ldr	r2, [pc, #248]	; (80136a0 <ManageStateAttachedWait_SNK+0x118>)
 80135a8:	189b      	adds	r3, r3, r2
 80135aa:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80135ac:	2302      	movs	r3, #2
 80135ae:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 80135b0:	f7f5 ff06 	bl	80093c0 <HAL_GetTick>
 80135b4:	0002      	movs	r2, r0
 80135b6:	69bb      	ldr	r3, [r7, #24]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	1ad3      	subs	r3, r2, r3
 80135bc:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 80135be:	193b      	adds	r3, r7, r4
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	0018      	movs	r0, r3
 80135c4:	f7ff fef2 	bl	80133ac <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 80135c8:	69bb      	ldr	r3, [r7, #24]
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	221c      	movs	r2, #28
 80135ce:	4013      	ands	r3, r2
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	2b04      	cmp	r3, #4
 80135d4:	d130      	bne.n	8013638 <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	2b78      	cmp	r3, #120	; 0x78
 80135da:	d927      	bls.n	801362c <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 80135dc:	193b      	adds	r3, r7, r4
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	2101      	movs	r1, #1
 80135e2:	0018      	movs	r0, r3
 80135e4:	f007 fd24 	bl	801b030 <USBPD_PWR_IF_GetVBUSStatus>
 80135e8:	0003      	movs	r3, r0
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	d11e      	bne.n	801362c <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	079b      	lsls	r3, r3, #30
 80135f4:	0f9b      	lsrs	r3, r3, #30
 80135f6:	b2db      	uxtb	r3, r3
 80135f8:	001a      	movs	r2, r3
 80135fa:	193b      	adds	r3, r7, r4
 80135fc:	781b      	ldrb	r3, [r3, #0]
 80135fe:	0011      	movs	r1, r2
 8013600:	0018      	movs	r0, r3
 8013602:	f001 fbf3 	bl	8014dec <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	785a      	ldrb	r2, [r3, #1]
 801360a:	213e      	movs	r1, #62	; 0x3e
 801360c:	438a      	bics	r2, r1
 801360e:	1c11      	adds	r1, r2, #0
 8013610:	2206      	movs	r2, #6
 8013612:	430a      	orrs	r2, r1
 8013614:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	2202      	movs	r2, #2
 801361a:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 801361c:	69bb      	ldr	r3, [r7, #24]
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	079b      	lsls	r3, r3, #30
 8013622:	0f9b      	lsrs	r3, r3, #30
 8013624:	b2db      	uxtb	r3, r3
 8013626:	001a      	movs	r2, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	781a      	ldrb	r2, [r3, #0]
 8013630:	2120      	movs	r1, #32
 8013632:	438a      	bics	r2, r1
 8013634:	701a      	strb	r2, [r3, #0]
 8013636:	e02e      	b.n	8013696 <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	2220      	movs	r2, #32
 801363e:	4013      	ands	r3, r2
 8013640:	b2db      	uxtb	r3, r3
 8013642:	2b00      	cmp	r3, #0
 8013644:	d10c      	bne.n	8013660 <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8013646:	f7f5 febb 	bl	80093c0 <HAL_GetTick>
 801364a:	0002      	movs	r2, r0
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	781a      	ldrb	r2, [r3, #0]
 8013654:	2120      	movs	r1, #32
 8013656:	430a      	orrs	r2, r1
 8013658:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 801365a:	230c      	movs	r3, #12
 801365c:	61fb      	str	r3, [r7, #28]
 801365e:	e01a      	b.n	8013696 <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 8013660:	f7f5 feae 	bl	80093c0 <HAL_GetTick>
 8013664:	0002      	movs	r2, r0
 8013666:	69bb      	ldr	r3, [r7, #24]
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	2b0c      	cmp	r3, #12
 801366e:	d912      	bls.n	8013696 <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8013670:	69bb      	ldr	r3, [r7, #24]
 8013672:	781a      	ldrb	r2, [r3, #0]
 8013674:	2120      	movs	r1, #32
 8013676:	438a      	bics	r2, r1
 8013678:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	785a      	ldrb	r2, [r3, #1]
 801367e:	213e      	movs	r1, #62	; 0x3e
 8013680:	438a      	bics	r2, r1
 8013682:	1c11      	adds	r1, r2, #0
 8013684:	2202      	movs	r2, #2
 8013686:	430a      	orrs	r2, r1
 8013688:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801368a:	230f      	movs	r3, #15
 801368c:	18fb      	adds	r3, r7, r3
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	0018      	movs	r0, r3
 8013692:	f008 ffd5 	bl	801c640 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8013696:	69fb      	ldr	r3, [r7, #28]
}
 8013698:	0018      	movs	r0, r3
 801369a:	46bd      	mov	sp, r7
 801369c:	b009      	add	sp, #36	; 0x24
 801369e:	bd90      	pop	{r4, r7, pc}
 80136a0:	20000590 	.word	0x20000590

080136a4 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80136a4:	b590      	push	{r4, r7, lr}
 80136a6:	b089      	sub	sp, #36	; 0x24
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	60b9      	str	r1, [r7, #8]
 80136ac:	607a      	str	r2, [r7, #4]
 80136ae:	210f      	movs	r1, #15
 80136b0:	187b      	adds	r3, r7, r1
 80136b2:	1c02      	adds	r2, r0, #0
 80136b4:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80136b6:	0008      	movs	r0, r1
 80136b8:	183b      	adds	r3, r7, r0
 80136ba:	781a      	ldrb	r2, [r3, #0]
 80136bc:	0013      	movs	r3, r2
 80136be:	005b      	lsls	r3, r3, #1
 80136c0:	189b      	adds	r3, r3, r2
 80136c2:	009b      	lsls	r3, r3, #2
 80136c4:	4a2e      	ldr	r2, [pc, #184]	; (8013780 <ManageStateAttached_SNK+0xdc>)
 80136c6:	189b      	adds	r3, r3, r2
 80136c8:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80136ca:	2302      	movs	r3, #2
 80136cc:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 80136ce:	2300      	movs	r3, #0
 80136d0:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80136d2:	183b      	adds	r3, r7, r0
 80136d4:	781a      	ldrb	r2, [r3, #0]
 80136d6:	492b      	ldr	r1, [pc, #172]	; (8013784 <ManageStateAttached_SNK+0xe0>)
 80136d8:	0013      	movs	r3, r2
 80136da:	011b      	lsls	r3, r3, #4
 80136dc:	1a9b      	subs	r3, r3, r2
 80136de:	009b      	lsls	r3, r3, #2
 80136e0:	18cb      	adds	r3, r1, r3
 80136e2:	3334      	adds	r3, #52	; 0x34
 80136e4:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80136e6:	2b01      	cmp	r3, #1
 80136e8:	d10c      	bne.n	8013704 <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80136ea:	183b      	adds	r3, r7, r0
 80136ec:	781a      	ldrb	r2, [r3, #0]
 80136ee:	4925      	ldr	r1, [pc, #148]	; (8013784 <ManageStateAttached_SNK+0xe0>)
 80136f0:	0013      	movs	r3, r2
 80136f2:	011b      	lsls	r3, r3, #4
 80136f4:	1a9b      	subs	r3, r3, r2
 80136f6:	009b      	lsls	r3, r3, #2
 80136f8:	585b      	ldr	r3, [r3, r1]
 80136fa:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80136fc:	23c0      	movs	r3, #192	; 0xc0
 80136fe:	029b      	lsls	r3, r3, #10
 8013700:	4013      	ands	r3, r2
 8013702:	e00c      	b.n	801371e <ManageStateAttached_SNK+0x7a>
 8013704:	230f      	movs	r3, #15
 8013706:	18fb      	adds	r3, r7, r3
 8013708:	781a      	ldrb	r2, [r3, #0]
 801370a:	491e      	ldr	r1, [pc, #120]	; (8013784 <ManageStateAttached_SNK+0xe0>)
 801370c:	0013      	movs	r3, r2
 801370e:	011b      	lsls	r3, r3, #4
 8013710:	1a9b      	subs	r3, r3, r2
 8013712:	009b      	lsls	r3, r3, #2
 8013714:	585b      	ldr	r3, [r3, r1]
 8013716:	695a      	ldr	r2, [r3, #20]
 8013718:	23c0      	movs	r3, #192	; 0xc0
 801371a:	031b      	lsls	r3, r3, #12
 801371c:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 801371e:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8013720:	240f      	movs	r4, #15
 8013722:	193b      	adds	r3, r7, r4
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	2102      	movs	r1, #2
 8013728:	0018      	movs	r0, r3
 801372a:	f007 fc81 	bl	801b030 <USBPD_PWR_IF_GetVBUSStatus>
 801372e:	0003      	movs	r3, r0
 8013730:	2b01      	cmp	r3, #1
 8013732:	d11e      	bne.n	8013772 <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8013734:	697a      	ldr	r2, [r7, #20]
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	429a      	cmp	r2, r3
 801373a:	d11a      	bne.n	8013772 <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 801373c:	193b      	adds	r3, r7, r4
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	0018      	movs	r0, r3
 8013742:	f001 fcb5 	bl	80150b0 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8013746:	69bb      	ldr	r3, [r7, #24]
 8013748:	781a      	ldrb	r2, [r3, #0]
 801374a:	211c      	movs	r1, #28
 801374c:	438a      	bics	r2, r1
 801374e:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	785a      	ldrb	r2, [r3, #1]
 8013754:	213e      	movs	r1, #62	; 0x3e
 8013756:	438a      	bics	r2, r1
 8013758:	1c11      	adds	r1, r2, #0
 801375a:	2202      	movs	r2, #2
 801375c:	430a      	orrs	r2, r1
 801375e:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	2201      	movs	r2, #1
 8013764:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	2200      	movs	r2, #0
 801376a:	601a      	str	r2, [r3, #0]
    _timing = 0;
 801376c:	2300      	movs	r3, #0
 801376e:	61fb      	str	r3, [r7, #28]
 8013770:	e001      	b.n	8013776 <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8013772:	230a      	movs	r3, #10
 8013774:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8013776:	69fb      	ldr	r3, [r7, #28]
}
 8013778:	0018      	movs	r0, r3
 801377a:	46bd      	mov	sp, r7
 801377c:	b009      	add	sp, #36	; 0x24
 801377e:	bd90      	pop	{r4, r7, pc}
 8013780:	20000590 	.word	0x20000590
 8013784:	200005a8 	.word	0x200005a8

08013788 <LL_AHB1_GRP1_EnableClock>:
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8013790:	4b07      	ldr	r3, [pc, #28]	; (80137b0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8013792:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013794:	4b06      	ldr	r3, [pc, #24]	; (80137b0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	430a      	orrs	r2, r1
 801379a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 801379c:	4b04      	ldr	r3, [pc, #16]	; (80137b0 <LL_AHB1_GRP1_EnableClock+0x28>)
 801379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137a0:	687a      	ldr	r2, [r7, #4]
 80137a2:	4013      	ands	r3, r2
 80137a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80137a6:	68fb      	ldr	r3, [r7, #12]
}
 80137a8:	46c0      	nop			; (mov r8, r8)
 80137aa:	46bd      	mov	sp, r7
 80137ac:	b004      	add	sp, #16
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	40021000 	.word	0x40021000

080137b4 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	0002      	movs	r2, r0
 80137bc:	1dfb      	adds	r3, r7, #7
 80137be:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 80137c0:	4b02      	ldr	r3, [pc, #8]	; (80137cc <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 80137c2:	0018      	movs	r0, r3
 80137c4:	46bd      	mov	sp, r7
 80137c6:	b002      	add	sp, #8
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	46c0      	nop			; (mov r8, r8)
 80137cc:	4000a000 	.word	0x4000a000

080137d0 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 80137d0:	b590      	push	{r4, r7, lr}
 80137d2:	b08f      	sub	sp, #60	; 0x3c
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	0002      	movs	r2, r0
 80137d8:	1dfb      	adds	r3, r7, #7
 80137da:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 80137dc:	240c      	movs	r4, #12
 80137de:	193b      	adds	r3, r7, r4
 80137e0:	0018      	movs	r0, r3
 80137e2:	f7fc fcad 	bl	8010140 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80137e6:	193b      	adds	r3, r7, r4
 80137e8:	2200      	movs	r2, #0
 80137ea:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80137ec:	193b      	adds	r3, r7, r4
 80137ee:	2200      	movs	r2, #0
 80137f0:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80137f2:	193b      	adds	r3, r7, r4
 80137f4:	2200      	movs	r2, #0
 80137f6:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80137f8:	193b      	adds	r3, r7, r4
 80137fa:	2280      	movs	r2, #128	; 0x80
 80137fc:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80137fe:	193b      	adds	r3, r7, r4
 8013800:	2200      	movs	r2, #0
 8013802:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8013804:	193b      	adds	r3, r7, r4
 8013806:	2200      	movs	r2, #0
 8013808:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 801380a:	193b      	adds	r3, r7, r4
 801380c:	2200      	movs	r2, #0
 801380e:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8013810:	193b      	adds	r3, r7, r4
 8013812:	2200      	movs	r2, #0
 8013814:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8013816:	193b      	adds	r3, r7, r4
 8013818:	2200      	movs	r2, #0
 801381a:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 801381c:	193b      	adds	r3, r7, r4
 801381e:	2280      	movs	r2, #128	; 0x80
 8013820:	0192      	lsls	r2, r2, #6
 8013822:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 8013824:	1dfb      	adds	r3, r7, #7
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d10c      	bne.n	8013846 <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 801382c:	2001      	movs	r0, #1
 801382e:	f7ff ffab 	bl	8013788 <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8013832:	193b      	adds	r3, r7, r4
 8013834:	223a      	movs	r2, #58	; 0x3a
 8013836:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8013838:	193b      	adds	r3, r7, r4
 801383a:	4806      	ldr	r0, [pc, #24]	; (8013854 <USBPD_HW_Init_DMARxInstance+0x84>)
 801383c:	001a      	movs	r2, r3
 801383e:	2100      	movs	r1, #0
 8013840:	f7fc fc3e 	bl	80100c0 <LL_DMA_Init>
      break;
 8013844:	e000      	b.n	8013848 <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8013846:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 8013848:	4b03      	ldr	r3, [pc, #12]	; (8013858 <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 801384a:	0018      	movs	r0, r3
 801384c:	46bd      	mov	sp, r7
 801384e:	b00f      	add	sp, #60	; 0x3c
 8013850:	bd90      	pop	{r4, r7, pc}
 8013852:	46c0      	nop			; (mov r8, r8)
 8013854:	40020000 	.word	0x40020000
 8013858:	40020008 	.word	0x40020008

0801385c <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	af00      	add	r7, sp, #0
 8013862:	0002      	movs	r2, r0
 8013864:	1dfb      	adds	r3, r7, #7
 8013866:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8013868:	46c0      	nop			; (mov r8, r8)
 801386a:	46bd      	mov	sp, r7
 801386c:	b002      	add	sp, #8
 801386e:	bd80      	pop	{r7, pc}

08013870 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8013870:	b590      	push	{r4, r7, lr}
 8013872:	b08f      	sub	sp, #60	; 0x3c
 8013874:	af00      	add	r7, sp, #0
 8013876:	0002      	movs	r2, r0
 8013878:	1dfb      	adds	r3, r7, #7
 801387a:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 801387c:	240c      	movs	r4, #12
 801387e:	193b      	adds	r3, r7, r4
 8013880:	0018      	movs	r0, r3
 8013882:	f7fc fc5d 	bl	8010140 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8013886:	193b      	adds	r3, r7, r4
 8013888:	2210      	movs	r2, #16
 801388a:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 801388c:	193b      	adds	r3, r7, r4
 801388e:	2200      	movs	r2, #0
 8013890:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8013892:	193b      	adds	r3, r7, r4
 8013894:	2200      	movs	r2, #0
 8013896:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8013898:	193b      	adds	r3, r7, r4
 801389a:	2280      	movs	r2, #128	; 0x80
 801389c:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 801389e:	193b      	adds	r3, r7, r4
 80138a0:	2200      	movs	r2, #0
 80138a2:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80138a4:	193b      	adds	r3, r7, r4
 80138a6:	2200      	movs	r2, #0
 80138a8:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 80138aa:	193b      	adds	r3, r7, r4
 80138ac:	2200      	movs	r2, #0
 80138ae:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 80138b0:	193b      	adds	r3, r7, r4
 80138b2:	2200      	movs	r2, #0
 80138b4:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 80138b6:	193b      	adds	r3, r7, r4
 80138b8:	2200      	movs	r2, #0
 80138ba:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 80138bc:	1dfb      	adds	r3, r7, #7
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d110      	bne.n	80138e6 <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 80138c4:	2001      	movs	r0, #1
 80138c6:	f7ff ff5f 	bl	8013788 <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 80138ca:	193b      	adds	r3, r7, r4
 80138cc:	223b      	movs	r2, #59	; 0x3b
 80138ce:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 80138d0:	193b      	adds	r3, r7, r4
 80138d2:	2280      	movs	r2, #128	; 0x80
 80138d4:	0152      	lsls	r2, r2, #5
 80138d6:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 80138d8:	193b      	adds	r3, r7, r4
 80138da:	4806      	ldr	r0, [pc, #24]	; (80138f4 <USBPD_HW_Init_DMATxInstance+0x84>)
 80138dc:	001a      	movs	r2, r3
 80138de:	2101      	movs	r1, #1
 80138e0:	f7fc fbee 	bl	80100c0 <LL_DMA_Init>
      break;
 80138e4:	e000      	b.n	80138e8 <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 80138e6:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 80138e8:	4b03      	ldr	r3, [pc, #12]	; (80138f8 <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 80138ea:	0018      	movs	r0, r3
 80138ec:	46bd      	mov	sp, r7
 80138ee:	b00f      	add	sp, #60	; 0x3c
 80138f0:	bd90      	pop	{r4, r7, pc}
 80138f2:	46c0      	nop			; (mov r8, r8)
 80138f4:	40020000 	.word	0x40020000
 80138f8:	4002001c 	.word	0x4002001c

080138fc <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	0002      	movs	r2, r0
 8013904:	1dfb      	adds	r3, r7, #7
 8013906:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8013908:	46c0      	nop			; (mov r8, r8)
 801390a:	46bd      	mov	sp, r7
 801390c:	b002      	add	sp, #8
 801390e:	bd80      	pop	{r7, pc}

08013910 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	0002      	movs	r2, r0
 8013918:	1dfb      	adds	r3, r7, #7
 801391a:	701a      	strb	r2, [r3, #0]
 801391c:	1dbb      	adds	r3, r7, #6
 801391e:	1c0a      	adds	r2, r1, #0
 8013920:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8013922:	46c0      	nop			; (mov r8, r8)
  }
}
 8013924:	46c0      	nop			; (mov r8, r8)
 8013926:	46bd      	mov	sp, r7
 8013928:	b002      	add	sp, #8
 801392a:	bd80      	pop	{r7, pc}

0801392c <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	699b      	ldr	r3, [r3, #24]
 8013938:	2280      	movs	r2, #128	; 0x80
 801393a:	0212      	lsls	r2, r2, #8
 801393c:	431a      	orrs	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	619a      	str	r2, [r3, #24]
}
 8013942:	46c0      	nop			; (mov r8, r8)
 8013944:	46bd      	mov	sp, r7
 8013946:	b002      	add	sp, #8
 8013948:	bd80      	pop	{r7, pc}

0801394a <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 801394a:	b580      	push	{r7, lr}
 801394c:	b082      	sub	sp, #8
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	699b      	ldr	r3, [r3, #24]
 8013956:	2280      	movs	r2, #128	; 0x80
 8013958:	01d2      	lsls	r2, r2, #7
 801395a:	431a      	orrs	r2, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	619a      	str	r2, [r3, #24]
}
 8013960:	46c0      	nop			; (mov r8, r8)
 8013962:	46bd      	mov	sp, r7
 8013964:	b002      	add	sp, #8
 8013966:	bd80      	pop	{r7, pc}

08013968 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b082      	sub	sp, #8
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	699b      	ldr	r3, [r3, #24]
 8013974:	2280      	movs	r2, #128	; 0x80
 8013976:	0152      	lsls	r2, r2, #5
 8013978:	431a      	orrs	r2, r3
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	619a      	str	r2, [r3, #24]
}
 801397e:	46c0      	nop			; (mov r8, r8)
 8013980:	46bd      	mov	sp, r7
 8013982:	b002      	add	sp, #8
 8013984:	bd80      	pop	{r7, pc}

08013986 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8013986:	b580      	push	{r7, lr}
 8013988:	b082      	sub	sp, #8
 801398a:	af00      	add	r7, sp, #0
 801398c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	699b      	ldr	r3, [r3, #24]
 8013992:	2280      	movs	r2, #128	; 0x80
 8013994:	0112      	lsls	r2, r2, #4
 8013996:	431a      	orrs	r2, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	619a      	str	r2, [r3, #24]
}
 801399c:	46c0      	nop			; (mov r8, r8)
 801399e:	46bd      	mov	sp, r7
 80139a0:	b002      	add	sp, #8
 80139a2:	bd80      	pop	{r7, pc}

080139a4 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b082      	sub	sp, #8
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	699b      	ldr	r3, [r3, #24]
 80139b0:	2280      	movs	r2, #128	; 0x80
 80139b2:	00d2      	lsls	r2, r2, #3
 80139b4:	431a      	orrs	r2, r3
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	619a      	str	r2, [r3, #24]
}
 80139ba:	46c0      	nop			; (mov r8, r8)
 80139bc:	46bd      	mov	sp, r7
 80139be:	b002      	add	sp, #8
 80139c0:	bd80      	pop	{r7, pc}

080139c2 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 80139c2:	b580      	push	{r7, lr}
 80139c4:	b082      	sub	sp, #8
 80139c6:	af00      	add	r7, sp, #0
 80139c8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	699b      	ldr	r3, [r3, #24]
 80139ce:	2280      	movs	r2, #128	; 0x80
 80139d0:	0092      	lsls	r2, r2, #2
 80139d2:	431a      	orrs	r2, r3
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	619a      	str	r2, [r3, #24]
}
 80139d8:	46c0      	nop			; (mov r8, r8)
 80139da:	46bd      	mov	sp, r7
 80139dc:	b002      	add	sp, #8
 80139de:	bd80      	pop	{r7, pc}

080139e0 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b082      	sub	sp, #8
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	699b      	ldr	r3, [r3, #24]
 80139ec:	2240      	movs	r2, #64	; 0x40
 80139ee:	431a      	orrs	r2, r3
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	619a      	str	r2, [r3, #24]
}
 80139f4:	46c0      	nop			; (mov r8, r8)
 80139f6:	46bd      	mov	sp, r7
 80139f8:	b002      	add	sp, #8
 80139fa:	bd80      	pop	{r7, pc}

080139fc <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	699b      	ldr	r3, [r3, #24]
 8013a08:	2220      	movs	r2, #32
 8013a0a:	431a      	orrs	r2, r3
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	619a      	str	r2, [r3, #24]
}
 8013a10:	46c0      	nop			; (mov r8, r8)
 8013a12:	46bd      	mov	sp, r7
 8013a14:	b002      	add	sp, #8
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	699b      	ldr	r3, [r3, #24]
 8013a24:	2210      	movs	r2, #16
 8013a26:	431a      	orrs	r2, r3
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	619a      	str	r2, [r3, #24]
}
 8013a2c:	46c0      	nop			; (mov r8, r8)
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	b002      	add	sp, #8
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	699b      	ldr	r3, [r3, #24]
 8013a40:	2208      	movs	r2, #8
 8013a42:	431a      	orrs	r2, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	619a      	str	r2, [r3, #24]
}
 8013a48:	46c0      	nop			; (mov r8, r8)
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	b002      	add	sp, #8
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	699b      	ldr	r3, [r3, #24]
 8013a5c:	2204      	movs	r2, #4
 8013a5e:	431a      	orrs	r2, r3
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	619a      	str	r2, [r3, #24]
}
 8013a64:	46c0      	nop			; (mov r8, r8)
 8013a66:	46bd      	mov	sp, r7
 8013a68:	b002      	add	sp, #8
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	699b      	ldr	r3, [r3, #24]
 8013a78:	2202      	movs	r2, #2
 8013a7a:	431a      	orrs	r2, r3
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	619a      	str	r2, [r3, #24]
}
 8013a80:	46c0      	nop			; (mov r8, r8)
 8013a82:	46bd      	mov	sp, r7
 8013a84:	b002      	add	sp, #8
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8013a8c:	2000      	movs	r0, #0
 8013a8e:	f000 f803 	bl	8013a98 <PORTx_IRQHandler>
}
 8013a92:	46c0      	nop			; (mov r8, r8)
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b084      	sub	sp, #16
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	0002      	movs	r2, r0
 8013aa0:	1dfb      	adds	r3, r7, #7
 8013aa2:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8013aa4:	1dfb      	adds	r3, r7, #7
 8013aa6:	781a      	ldrb	r2, [r3, #0]
 8013aa8:	49a6      	ldr	r1, [pc, #664]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013aaa:	0013      	movs	r3, r2
 8013aac:	011b      	lsls	r3, r3, #4
 8013aae:	1a9b      	subs	r3, r3, r2
 8013ab0:	009b      	lsls	r3, r3, #2
 8013ab2:	585b      	ldr	r3, [r3, r1]
 8013ab4:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	695b      	ldr	r3, [r3, #20]
 8013aba:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	691b      	ldr	r3, [r3, #16]
 8013ac0:	68ba      	ldr	r2, [r7, #8]
 8013ac2:	4013      	ands	r3, r2
 8013ac4:	d100      	bne.n	8013ac8 <PORTx_IRQHandler+0x30>
 8013ac6:	e1fc      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	2202      	movs	r2, #2
 8013acc:	4013      	ands	r3, r2
 8013ace:	d03c      	beq.n	8013b4a <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	0018      	movs	r0, r3
 8013ad4:	f7ff ffca 	bl	8013a6c <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8013ad8:	1dfb      	adds	r3, r7, #7
 8013ada:	781a      	ldrb	r2, [r3, #0]
 8013adc:	4999      	ldr	r1, [pc, #612]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013ade:	0013      	movs	r3, r2
 8013ae0:	011b      	lsls	r3, r3, #4
 8013ae2:	1a9b      	subs	r3, r3, r2
 8013ae4:	009b      	lsls	r3, r3, #2
 8013ae6:	18cb      	adds	r3, r1, r3
 8013ae8:	3304      	adds	r3, #4
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	6819      	ldr	r1, [r3, #0]
 8013aee:	1dfb      	adds	r3, r7, #7
 8013af0:	781a      	ldrb	r2, [r3, #0]
 8013af2:	4894      	ldr	r0, [pc, #592]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013af4:	0013      	movs	r3, r2
 8013af6:	011b      	lsls	r3, r3, #4
 8013af8:	1a9b      	subs	r3, r3, r2
 8013afa:	009b      	lsls	r3, r3, #2
 8013afc:	18c3      	adds	r3, r0, r3
 8013afe:	3304      	adds	r3, #4
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	2201      	movs	r2, #1
 8013b04:	4391      	bics	r1, r2
 8013b06:	000a      	movs	r2, r1
 8013b08:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8013b0a:	46c0      	nop			; (mov r8, r8)
 8013b0c:	1dfb      	adds	r3, r7, #7
 8013b0e:	781a      	ldrb	r2, [r3, #0]
 8013b10:	498c      	ldr	r1, [pc, #560]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013b12:	0013      	movs	r3, r2
 8013b14:	011b      	lsls	r3, r3, #4
 8013b16:	1a9b      	subs	r3, r3, r2
 8013b18:	009b      	lsls	r3, r3, #2
 8013b1a:	18cb      	adds	r3, r1, r3
 8013b1c:	3304      	adds	r3, #4
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2201      	movs	r2, #1
 8013b24:	4013      	ands	r3, r2
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d0f0      	beq.n	8013b0c <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8013b2a:	1dfb      	adds	r3, r7, #7
 8013b2c:	781a      	ldrb	r2, [r3, #0]
 8013b2e:	4985      	ldr	r1, [pc, #532]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013b30:	0013      	movs	r3, r2
 8013b32:	011b      	lsls	r3, r3, #4
 8013b34:	1a9b      	subs	r3, r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	18cb      	adds	r3, r1, r3
 8013b3a:	3314      	adds	r3, #20
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	1dfa      	adds	r2, r7, #7
 8013b40:	7812      	ldrb	r2, [r2, #0]
 8013b42:	2101      	movs	r1, #1
 8013b44:	0010      	movs	r0, r2
 8013b46:	4798      	blx	r3
      return;
 8013b48:	e1bb      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	2204      	movs	r2, #4
 8013b4e:	4013      	ands	r3, r2
 8013b50:	d03c      	beq.n	8013bcc <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	0018      	movs	r0, r3
 8013b56:	f7ff ff7b 	bl	8013a50 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8013b5a:	1dfb      	adds	r3, r7, #7
 8013b5c:	781a      	ldrb	r2, [r3, #0]
 8013b5e:	4979      	ldr	r1, [pc, #484]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013b60:	0013      	movs	r3, r2
 8013b62:	011b      	lsls	r3, r3, #4
 8013b64:	1a9b      	subs	r3, r3, r2
 8013b66:	009b      	lsls	r3, r3, #2
 8013b68:	18cb      	adds	r3, r1, r3
 8013b6a:	3304      	adds	r3, #4
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	6819      	ldr	r1, [r3, #0]
 8013b70:	1dfb      	adds	r3, r7, #7
 8013b72:	781a      	ldrb	r2, [r3, #0]
 8013b74:	4873      	ldr	r0, [pc, #460]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013b76:	0013      	movs	r3, r2
 8013b78:	011b      	lsls	r3, r3, #4
 8013b7a:	1a9b      	subs	r3, r3, r2
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	18c3      	adds	r3, r0, r3
 8013b80:	3304      	adds	r3, #4
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	2201      	movs	r2, #1
 8013b86:	4391      	bics	r1, r2
 8013b88:	000a      	movs	r2, r1
 8013b8a:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8013b8c:	46c0      	nop			; (mov r8, r8)
 8013b8e:	1dfb      	adds	r3, r7, #7
 8013b90:	781a      	ldrb	r2, [r3, #0]
 8013b92:	496c      	ldr	r1, [pc, #432]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013b94:	0013      	movs	r3, r2
 8013b96:	011b      	lsls	r3, r3, #4
 8013b98:	1a9b      	subs	r3, r3, r2
 8013b9a:	009b      	lsls	r3, r3, #2
 8013b9c:	18cb      	adds	r3, r1, r3
 8013b9e:	3304      	adds	r3, #4
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	2201      	movs	r2, #1
 8013ba6:	4013      	ands	r3, r2
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d0f0      	beq.n	8013b8e <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8013bac:	1dfb      	adds	r3, r7, #7
 8013bae:	781a      	ldrb	r2, [r3, #0]
 8013bb0:	4964      	ldr	r1, [pc, #400]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013bb2:	0013      	movs	r3, r2
 8013bb4:	011b      	lsls	r3, r3, #4
 8013bb6:	1a9b      	subs	r3, r3, r2
 8013bb8:	009b      	lsls	r3, r3, #2
 8013bba:	18cb      	adds	r3, r1, r3
 8013bbc:	3314      	adds	r3, #20
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	1dfa      	adds	r2, r7, #7
 8013bc2:	7812      	ldrb	r2, [r2, #0]
 8013bc4:	2100      	movs	r1, #0
 8013bc6:	0010      	movs	r0, r2
 8013bc8:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8013bca:	e17a      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	2208      	movs	r2, #8
 8013bd0:	4013      	ands	r3, r2
 8013bd2:	d03c      	beq.n	8013c4e <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	0018      	movs	r0, r3
 8013bd8:	f7ff ff2c 	bl	8013a34 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8013bdc:	1dfb      	adds	r3, r7, #7
 8013bde:	781a      	ldrb	r2, [r3, #0]
 8013be0:	4958      	ldr	r1, [pc, #352]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013be2:	0013      	movs	r3, r2
 8013be4:	011b      	lsls	r3, r3, #4
 8013be6:	1a9b      	subs	r3, r3, r2
 8013be8:	009b      	lsls	r3, r3, #2
 8013bea:	18cb      	adds	r3, r1, r3
 8013bec:	3304      	adds	r3, #4
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	6819      	ldr	r1, [r3, #0]
 8013bf2:	1dfb      	adds	r3, r7, #7
 8013bf4:	781a      	ldrb	r2, [r3, #0]
 8013bf6:	4853      	ldr	r0, [pc, #332]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013bf8:	0013      	movs	r3, r2
 8013bfa:	011b      	lsls	r3, r3, #4
 8013bfc:	1a9b      	subs	r3, r3, r2
 8013bfe:	009b      	lsls	r3, r3, #2
 8013c00:	18c3      	adds	r3, r0, r3
 8013c02:	3304      	adds	r3, #4
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	2201      	movs	r2, #1
 8013c08:	4391      	bics	r1, r2
 8013c0a:	000a      	movs	r2, r1
 8013c0c:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8013c0e:	46c0      	nop			; (mov r8, r8)
 8013c10:	1dfb      	adds	r3, r7, #7
 8013c12:	781a      	ldrb	r2, [r3, #0]
 8013c14:	494b      	ldr	r1, [pc, #300]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013c16:	0013      	movs	r3, r2
 8013c18:	011b      	lsls	r3, r3, #4
 8013c1a:	1a9b      	subs	r3, r3, r2
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	18cb      	adds	r3, r1, r3
 8013c20:	3304      	adds	r3, #4
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	2201      	movs	r2, #1
 8013c28:	4013      	ands	r3, r2
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	d0f0      	beq.n	8013c10 <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8013c2e:	1dfb      	adds	r3, r7, #7
 8013c30:	781a      	ldrb	r2, [r3, #0]
 8013c32:	4944      	ldr	r1, [pc, #272]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013c34:	0013      	movs	r3, r2
 8013c36:	011b      	lsls	r3, r3, #4
 8013c38:	1a9b      	subs	r3, r3, r2
 8013c3a:	009b      	lsls	r3, r3, #2
 8013c3c:	18cb      	adds	r3, r1, r3
 8013c3e:	3314      	adds	r3, #20
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	1dfa      	adds	r2, r7, #7
 8013c44:	7812      	ldrb	r2, [r2, #0]
 8013c46:	2102      	movs	r1, #2
 8013c48:	0010      	movs	r0, r2
 8013c4a:	4798      	blx	r3
      return;
 8013c4c:	e139      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	2210      	movs	r2, #16
 8013c52:	4013      	ands	r3, r2
 8013c54:	d004      	beq.n	8013c60 <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	0018      	movs	r0, r3
 8013c5a:	f7ff fedd 	bl	8013a18 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8013c5e:	e130      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	2220      	movs	r2, #32
 8013c64:	4013      	ands	r3, r2
 8013c66:	d013      	beq.n	8013c90 <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	0018      	movs	r0, r3
 8013c6c:	f7ff fec6 	bl	80139fc <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8013c70:	1dfb      	adds	r3, r7, #7
 8013c72:	781a      	ldrb	r2, [r3, #0]
 8013c74:	4933      	ldr	r1, [pc, #204]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013c76:	0013      	movs	r3, r2
 8013c78:	011b      	lsls	r3, r3, #4
 8013c7a:	1a9b      	subs	r3, r3, r2
 8013c7c:	009b      	lsls	r3, r3, #2
 8013c7e:	18cb      	adds	r3, r1, r3
 8013c80:	3324      	adds	r3, #36	; 0x24
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	1dfa      	adds	r2, r7, #7
 8013c86:	7812      	ldrb	r2, [r2, #0]
 8013c88:	2105      	movs	r1, #5
 8013c8a:	0010      	movs	r0, r2
 8013c8c:	4798      	blx	r3
      return;
 8013c8e:	e118      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	2240      	movs	r2, #64	; 0x40
 8013c94:	4013      	ands	r3, r2
 8013c96:	d004      	beq.n	8013ca2 <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	0018      	movs	r0, r3
 8013c9c:	f7ff fea0 	bl	80139e0 <LL_UCPD_ClearFlag_TxUND>
      return;
 8013ca0:	e10f      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8013ca2:	68ba      	ldr	r2, [r7, #8]
 8013ca4:	2380      	movs	r3, #128	; 0x80
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	4013      	ands	r3, r2
 8013caa:	d023      	beq.n	8013cf4 <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cb0:	2b05      	cmp	r3, #5
 8013cb2:	d10e      	bne.n	8013cd2 <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8013cb4:	1dfb      	adds	r3, r7, #7
 8013cb6:	781a      	ldrb	r2, [r3, #0]
 8013cb8:	4922      	ldr	r1, [pc, #136]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013cba:	0013      	movs	r3, r2
 8013cbc:	011b      	lsls	r3, r3, #4
 8013cbe:	1a9b      	subs	r3, r3, r2
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	18cb      	adds	r3, r1, r3
 8013cc4:	331c      	adds	r3, #28
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	1dfa      	adds	r2, r7, #7
 8013cca:	7812      	ldrb	r2, [r2, #0]
 8013ccc:	2106      	movs	r1, #6
 8013cce:	0010      	movs	r0, r2
 8013cd0:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	0018      	movs	r0, r3
 8013cd6:	f7ff fe74 	bl	80139c2 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8013cda:	1dfb      	adds	r3, r7, #7
 8013cdc:	781a      	ldrb	r2, [r3, #0]
 8013cde:	4919      	ldr	r1, [pc, #100]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013ce0:	2038      	movs	r0, #56	; 0x38
 8013ce2:	0013      	movs	r3, r2
 8013ce4:	011b      	lsls	r3, r3, #4
 8013ce6:	1a9b      	subs	r3, r3, r2
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	18cb      	adds	r3, r1, r3
 8013cec:	181b      	adds	r3, r3, r0
 8013cee:	2201      	movs	r2, #1
 8013cf0:	701a      	strb	r2, [r3, #0]
      return;
 8013cf2:	e0e6      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8013cf4:	68ba      	ldr	r2, [r7, #8]
 8013cf6:	2380      	movs	r3, #128	; 0x80
 8013cf8:	00db      	lsls	r3, r3, #3
 8013cfa:	4013      	ands	r3, r2
 8013cfc:	d013      	beq.n	8013d26 <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8013cfe:	1dfb      	adds	r3, r7, #7
 8013d00:	781a      	ldrb	r2, [r3, #0]
 8013d02:	4910      	ldr	r1, [pc, #64]	; (8013d44 <PORTx_IRQHandler+0x2ac>)
 8013d04:	0013      	movs	r3, r2
 8013d06:	011b      	lsls	r3, r3, #4
 8013d08:	1a9b      	subs	r3, r3, r2
 8013d0a:	009b      	lsls	r3, r3, #2
 8013d0c:	18cb      	adds	r3, r1, r3
 8013d0e:	331c      	adds	r3, #28
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	1dfa      	adds	r2, r7, #7
 8013d14:	7812      	ldrb	r2, [r2, #0]
 8013d16:	2105      	movs	r1, #5
 8013d18:	0010      	movs	r0, r2
 8013d1a:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	0018      	movs	r0, r3
 8013d20:	f7ff fe40 	bl	80139a4 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8013d24:	e0cd      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8013d26:	68ba      	ldr	r2, [r7, #8]
 8013d28:	2380      	movs	r3, #128	; 0x80
 8013d2a:	011b      	lsls	r3, r3, #4
 8013d2c:	4013      	ands	r3, r2
 8013d2e:	d00d      	beq.n	8013d4c <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 8013d30:	1dfb      	adds	r3, r7, #7
 8013d32:	781b      	ldrb	r3, [r3, #0]
 8013d34:	4a04      	ldr	r2, [pc, #16]	; (8013d48 <PORTx_IRQHandler+0x2b0>)
 8013d36:	2101      	movs	r1, #1
 8013d38:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	0018      	movs	r0, r3
 8013d3e:	f7ff fe22 	bl	8013986 <LL_UCPD_ClearFlag_RxOvr>
      return;
 8013d42:	e0be      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
 8013d44:	200005a8 	.word	0x200005a8
 8013d48:	2000059c 	.word	0x2000059c
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8013d4c:	68ba      	ldr	r2, [r7, #8]
 8013d4e:	2380      	movs	r3, #128	; 0x80
 8013d50:	015b      	lsls	r3, r3, #5
 8013d52:	4013      	ands	r3, r2
 8013d54:	d100      	bne.n	8013d58 <PORTx_IRQHandler+0x2c0>
 8013d56:	e096      	b.n	8013e86 <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8013d58:	1dfb      	adds	r3, r7, #7
 8013d5a:	781a      	ldrb	r2, [r3, #0]
 8013d5c:	495a      	ldr	r1, [pc, #360]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013d5e:	2038      	movs	r0, #56	; 0x38
 8013d60:	0013      	movs	r3, r2
 8013d62:	011b      	lsls	r3, r3, #4
 8013d64:	1a9b      	subs	r3, r3, r2
 8013d66:	009b      	lsls	r3, r3, #2
 8013d68:	18cb      	adds	r3, r1, r3
 8013d6a:	181b      	adds	r3, r3, r0
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	0018      	movs	r0, r3
 8013d74:	f7ff fdf8 	bl	8013968 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8013d78:	1dfb      	adds	r3, r7, #7
 8013d7a:	781a      	ldrb	r2, [r3, #0]
 8013d7c:	4952      	ldr	r1, [pc, #328]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013d7e:	0013      	movs	r3, r2
 8013d80:	011b      	lsls	r3, r3, #4
 8013d82:	1a9b      	subs	r3, r3, r2
 8013d84:	009b      	lsls	r3, r3, #2
 8013d86:	18cb      	adds	r3, r1, r3
 8013d88:	3308      	adds	r3, #8
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	6819      	ldr	r1, [r3, #0]
 8013d8e:	1dfb      	adds	r3, r7, #7
 8013d90:	781a      	ldrb	r2, [r3, #0]
 8013d92:	484d      	ldr	r0, [pc, #308]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013d94:	0013      	movs	r3, r2
 8013d96:	011b      	lsls	r3, r3, #4
 8013d98:	1a9b      	subs	r3, r3, r2
 8013d9a:	009b      	lsls	r3, r3, #2
 8013d9c:	18c3      	adds	r3, r0, r3
 8013d9e:	3308      	adds	r3, #8
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2201      	movs	r2, #1
 8013da4:	4391      	bics	r1, r2
 8013da6:	000a      	movs	r2, r1
 8013da8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8013daa:	46c0      	nop			; (mov r8, r8)
 8013dac:	1dfb      	adds	r3, r7, #7
 8013dae:	781a      	ldrb	r2, [r3, #0]
 8013db0:	4945      	ldr	r1, [pc, #276]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013db2:	0013      	movs	r3, r2
 8013db4:	011b      	lsls	r3, r3, #4
 8013db6:	1a9b      	subs	r3, r3, r2
 8013db8:	009b      	lsls	r3, r3, #2
 8013dba:	18cb      	adds	r3, r1, r3
 8013dbc:	3308      	adds	r3, #8
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	4013      	ands	r3, r2
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d0f0      	beq.n	8013dac <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8013dca:	1dfb      	adds	r3, r7, #7
 8013dcc:	781a      	ldrb	r2, [r3, #0]
 8013dce:	493e      	ldr	r1, [pc, #248]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013dd0:	0013      	movs	r3, r2
 8013dd2:	011b      	lsls	r3, r3, #4
 8013dd4:	1a9b      	subs	r3, r3, r2
 8013dd6:	009b      	lsls	r3, r3, #2
 8013dd8:	18cb      	adds	r3, r1, r3
 8013dda:	3330      	adds	r3, #48	; 0x30
 8013ddc:	6818      	ldr	r0, [r3, #0]
 8013dde:	1dfb      	adds	r3, r7, #7
 8013de0:	781a      	ldrb	r2, [r3, #0]
 8013de2:	4939      	ldr	r1, [pc, #228]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013de4:	0013      	movs	r3, r2
 8013de6:	011b      	lsls	r3, r3, #4
 8013de8:	1a9b      	subs	r3, r3, r2
 8013dea:	009b      	lsls	r3, r3, #2
 8013dec:	18cb      	adds	r3, r1, r3
 8013dee:	3308      	adds	r3, #8
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	0002      	movs	r2, r0
 8013df4:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8013df6:	1dfb      	adds	r3, r7, #7
 8013df8:	781a      	ldrb	r2, [r3, #0]
 8013dfa:	4933      	ldr	r1, [pc, #204]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013dfc:	0013      	movs	r3, r2
 8013dfe:	011b      	lsls	r3, r3, #4
 8013e00:	1a9b      	subs	r3, r3, r2
 8013e02:	009b      	lsls	r3, r3, #2
 8013e04:	18cb      	adds	r3, r1, r3
 8013e06:	3308      	adds	r3, #8
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	2284      	movs	r2, #132	; 0x84
 8013e0c:	0052      	lsls	r2, r2, #1
 8013e0e:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8013e10:	1dfb      	adds	r3, r7, #7
 8013e12:	781a      	ldrb	r2, [r3, #0]
 8013e14:	492c      	ldr	r1, [pc, #176]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013e16:	0013      	movs	r3, r2
 8013e18:	011b      	lsls	r3, r3, #4
 8013e1a:	1a9b      	subs	r3, r3, r2
 8013e1c:	009b      	lsls	r3, r3, #2
 8013e1e:	18cb      	adds	r3, r1, r3
 8013e20:	3308      	adds	r3, #8
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	6819      	ldr	r1, [r3, #0]
 8013e26:	1dfb      	adds	r3, r7, #7
 8013e28:	781a      	ldrb	r2, [r3, #0]
 8013e2a:	4827      	ldr	r0, [pc, #156]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013e2c:	0013      	movs	r3, r2
 8013e2e:	011b      	lsls	r3, r3, #4
 8013e30:	1a9b      	subs	r3, r3, r2
 8013e32:	009b      	lsls	r3, r3, #2
 8013e34:	18c3      	adds	r3, r0, r3
 8013e36:	3308      	adds	r3, #8
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	430a      	orrs	r2, r1
 8013e3e:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 8013e40:	68ba      	ldr	r2, [r7, #8]
 8013e42:	2380      	movs	r3, #128	; 0x80
 8013e44:	019b      	lsls	r3, r3, #6
 8013e46:	4013      	ands	r3, r2
 8013e48:	d117      	bne.n	8013e7a <PORTx_IRQHandler+0x3e2>
 8013e4a:	1dfb      	adds	r3, r7, #7
 8013e4c:	781b      	ldrb	r3, [r3, #0]
 8013e4e:	4a1f      	ldr	r2, [pc, #124]	; (8013ecc <PORTx_IRQHandler+0x434>)
 8013e50:	5cd3      	ldrb	r3, [r2, r3]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d111      	bne.n	8013e7a <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8013e56:	1dfb      	adds	r3, r7, #7
 8013e58:	781a      	ldrb	r2, [r3, #0]
 8013e5a:	491b      	ldr	r1, [pc, #108]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013e5c:	0013      	movs	r3, r2
 8013e5e:	011b      	lsls	r3, r3, #4
 8013e60:	1a9b      	subs	r3, r3, r2
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	18cb      	adds	r3, r1, r3
 8013e66:	3320      	adds	r3, #32
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e6e:	2107      	movs	r1, #7
 8013e70:	4019      	ands	r1, r3
 8013e72:	1dfb      	adds	r3, r7, #7
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	0018      	movs	r0, r3
 8013e78:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 8013e7a:	1dfb      	adds	r3, r7, #7
 8013e7c:	781b      	ldrb	r3, [r3, #0]
 8013e7e:	4a13      	ldr	r2, [pc, #76]	; (8013ecc <PORTx_IRQHandler+0x434>)
 8013e80:	2100      	movs	r1, #0
 8013e82:	54d1      	strb	r1, [r2, r3]
      return;
 8013e84:	e01d      	b.n	8013ec2 <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8013e86:	68ba      	ldr	r2, [r7, #8]
 8013e88:	2380      	movs	r3, #128	; 0x80
 8013e8a:	01db      	lsls	r3, r3, #7
 8013e8c:	4013      	ands	r3, r2
 8013e8e:	d104      	bne.n	8013e9a <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8013e90:	68ba      	ldr	r2, [r7, #8]
 8013e92:	2380      	movs	r3, #128	; 0x80
 8013e94:	021b      	lsls	r3, r3, #8
 8013e96:	4013      	ands	r3, r2
 8013e98:	d013      	beq.n	8013ec2 <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	0018      	movs	r0, r3
 8013e9e:	f7ff fd54 	bl	801394a <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	0018      	movs	r0, r3
 8013ea6:	f7ff fd41 	bl	801392c <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8013eaa:	1dfb      	adds	r3, r7, #7
 8013eac:	781a      	ldrb	r2, [r3, #0]
 8013eae:	4906      	ldr	r1, [pc, #24]	; (8013ec8 <PORTx_IRQHandler+0x430>)
 8013eb0:	0013      	movs	r3, r2
 8013eb2:	011b      	lsls	r3, r3, #4
 8013eb4:	1a9b      	subs	r3, r3, r2
 8013eb6:	009b      	lsls	r3, r3, #2
 8013eb8:	18cb      	adds	r3, r1, r3
 8013eba:	332c      	adds	r3, #44	; 0x2c
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 8013ec0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	b004      	add	sp, #16
 8013ec6:	bd80      	pop	{r7, pc}
 8013ec8:	200005a8 	.word	0x200005a8
 8013ecc:	2000059c 	.word	0x2000059c

08013ed0 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 8013ed0:	b590      	push	{r4, r7, lr}
 8013ed2:	b085      	sub	sp, #20
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	60b9      	str	r1, [r7, #8]
 8013ed8:	607a      	str	r2, [r7, #4]
 8013eda:	603b      	str	r3, [r7, #0]
 8013edc:	240f      	movs	r4, #15
 8013ede:	193b      	adds	r3, r7, r4
 8013ee0:	1c02      	adds	r2, r0, #0
 8013ee2:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 8013ee4:	193b      	adds	r3, r7, r4
 8013ee6:	781a      	ldrb	r2, [r3, #0]
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	6919      	ldr	r1, [r3, #16]
 8013eec:	4830      	ldr	r0, [pc, #192]	; (8013fb0 <USBPD_PHY_Init+0xe0>)
 8013eee:	0013      	movs	r3, r2
 8013ef0:	011b      	lsls	r3, r3, #4
 8013ef2:	1a9b      	subs	r3, r3, r2
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	18c3      	adds	r3, r0, r3
 8013ef8:	3314      	adds	r3, #20
 8013efa:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 8013efc:	193b      	adds	r3, r7, r4
 8013efe:	781a      	ldrb	r2, [r3, #0]
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	68d9      	ldr	r1, [r3, #12]
 8013f04:	482a      	ldr	r0, [pc, #168]	; (8013fb0 <USBPD_PHY_Init+0xe0>)
 8013f06:	0013      	movs	r3, r2
 8013f08:	011b      	lsls	r3, r3, #4
 8013f0a:	1a9b      	subs	r3, r3, r2
 8013f0c:	009b      	lsls	r3, r3, #2
 8013f0e:	18c3      	adds	r3, r0, r3
 8013f10:	3318      	adds	r3, #24
 8013f12:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8013f14:	193b      	adds	r3, r7, r4
 8013f16:	781a      	ldrb	r2, [r3, #0]
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	6859      	ldr	r1, [r3, #4]
 8013f1c:	4824      	ldr	r0, [pc, #144]	; (8013fb0 <USBPD_PHY_Init+0xe0>)
 8013f1e:	0013      	movs	r3, r2
 8013f20:	011b      	lsls	r3, r3, #4
 8013f22:	1a9b      	subs	r3, r3, r2
 8013f24:	009b      	lsls	r3, r3, #2
 8013f26:	18c3      	adds	r3, r0, r3
 8013f28:	331c      	adds	r3, #28
 8013f2a:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8013f2c:	193b      	adds	r3, r7, r4
 8013f2e:	781a      	ldrb	r2, [r3, #0]
 8013f30:	491f      	ldr	r1, [pc, #124]	; (8013fb0 <USBPD_PHY_Init+0xe0>)
 8013f32:	0013      	movs	r3, r2
 8013f34:	011b      	lsls	r3, r3, #4
 8013f36:	1a9b      	subs	r3, r3, r2
 8013f38:	009b      	lsls	r3, r3, #2
 8013f3a:	18cb      	adds	r3, r1, r3
 8013f3c:	3320      	adds	r3, #32
 8013f3e:	4a1d      	ldr	r2, [pc, #116]	; (8013fb4 <USBPD_PHY_Init+0xe4>)
 8013f40:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8013f42:	193b      	adds	r3, r7, r4
 8013f44:	781a      	ldrb	r2, [r3, #0]
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	6899      	ldr	r1, [r3, #8]
 8013f4a:	4819      	ldr	r0, [pc, #100]	; (8013fb0 <USBPD_PHY_Init+0xe0>)
 8013f4c:	0013      	movs	r3, r2
 8013f4e:	011b      	lsls	r3, r3, #4
 8013f50:	1a9b      	subs	r3, r3, r2
 8013f52:	009b      	lsls	r3, r3, #2
 8013f54:	18c3      	adds	r3, r0, r3
 8013f56:	3324      	adds	r3, #36	; 0x24
 8013f58:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8013f5a:	193b      	adds	r3, r7, r4
 8013f5c:	781a      	ldrb	r2, [r3, #0]
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	6959      	ldr	r1, [r3, #20]
 8013f62:	4813      	ldr	r0, [pc, #76]	; (8013fb0 <USBPD_PHY_Init+0xe0>)
 8013f64:	0013      	movs	r3, r2
 8013f66:	011b      	lsls	r3, r3, #4
 8013f68:	1a9b      	subs	r3, r3, r2
 8013f6a:	009b      	lsls	r3, r3, #2
 8013f6c:	18c3      	adds	r3, r0, r3
 8013f6e:	3328      	adds	r3, #40	; 0x28
 8013f70:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8013f72:	193b      	adds	r3, r7, r4
 8013f74:	781a      	ldrb	r2, [r3, #0]
 8013f76:	490e      	ldr	r1, [pc, #56]	; (8013fb0 <USBPD_PHY_Init+0xe0>)
 8013f78:	0013      	movs	r3, r2
 8013f7a:	011b      	lsls	r3, r3, #4
 8013f7c:	1a9b      	subs	r3, r3, r2
 8013f7e:	009b      	lsls	r3, r3, #2
 8013f80:	18cb      	adds	r3, r1, r3
 8013f82:	3330      	adds	r3, #48	; 0x30
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8013f88:	193b      	adds	r3, r7, r4
 8013f8a:	781b      	ldrb	r3, [r3, #0]
 8013f8c:	4a0a      	ldr	r2, [pc, #40]	; (8013fb8 <USBPD_PHY_Init+0xe8>)
 8013f8e:	00db      	lsls	r3, r3, #3
 8013f90:	18d3      	adds	r3, r2, r3
 8013f92:	3304      	adds	r3, #4
 8013f94:	6a3a      	ldr	r2, [r7, #32]
 8013f96:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 8013f98:	193b      	adds	r3, r7, r4
 8013f9a:	781a      	ldrb	r2, [r3, #0]
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	6819      	ldr	r1, [r3, #0]
 8013fa0:	4b05      	ldr	r3, [pc, #20]	; (8013fb8 <USBPD_PHY_Init+0xe8>)
 8013fa2:	00d2      	lsls	r2, r2, #3
 8013fa4:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 8013fa6:	2300      	movs	r3, #0
}
 8013fa8:	0018      	movs	r0, r3
 8013faa:	46bd      	mov	sp, r7
 8013fac:	b005      	add	sp, #20
 8013fae:	bd90      	pop	{r4, r7, pc}
 8013fb0:	200005a8 	.word	0x200005a8
 8013fb4:	080141a1 	.word	0x080141a1
 8013fb8:	200005a0 	.word	0x200005a0

08013fbc <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b082      	sub	sp, #8
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	0002      	movs	r2, r0
 8013fc4:	1dfb      	adds	r3, r7, #7
 8013fc6:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 8013fc8:	4b02      	ldr	r3, [pc, #8]	; (8013fd4 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 8013fca:	0018      	movs	r0, r3
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	b002      	add	sp, #8
 8013fd0:	bd80      	pop	{r7, pc}
 8013fd2:	46c0      	nop			; (mov r8, r8)
 8013fd4:	00000389 	.word	0x00000389

08013fd8 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b082      	sub	sp, #8
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	0002      	movs	r2, r0
 8013fe0:	1dfb      	adds	r3, r7, #7
 8013fe2:	701a      	strb	r2, [r3, #0]
  return 30u;
 8013fe4:	231e      	movs	r3, #30
}
 8013fe6:	0018      	movs	r0, r3
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	b002      	add	sp, #8
 8013fec:	bd80      	pop	{r7, pc}

08013fee <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 8013fee:	b580      	push	{r7, lr}
 8013ff0:	b082      	sub	sp, #8
 8013ff2:	af00      	add	r7, sp, #0
 8013ff4:	0002      	movs	r2, r0
 8013ff6:	1dfb      	adds	r3, r7, #7
 8013ff8:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 8013ffa:	46c0      	nop			; (mov r8, r8)
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	b002      	add	sp, #8
 8014000:	bd80      	pop	{r7, pc}

08014002 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 8014002:	b580      	push	{r7, lr}
 8014004:	b082      	sub	sp, #8
 8014006:	af00      	add	r7, sp, #0
 8014008:	0002      	movs	r2, r0
 801400a:	1dfb      	adds	r3, r7, #7
 801400c:	701a      	strb	r2, [r3, #0]
 801400e:	1dbb      	adds	r3, r7, #6
 8014010:	1c0a      	adds	r2, r1, #0
 8014012:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 8014014:	1dbb      	adds	r3, r7, #6
 8014016:	7819      	ldrb	r1, [r3, #0]
 8014018:	1dfb      	adds	r3, r7, #7
 801401a:	7818      	ldrb	r0, [r3, #0]
 801401c:	2300      	movs	r3, #0
 801401e:	2200      	movs	r2, #0
 8014020:	f000 f805 	bl	801402e <USBPD_PHY_SendMessage>
 8014024:	0003      	movs	r3, r0
}
 8014026:	0018      	movs	r0, r3
 8014028:	46bd      	mov	sp, r7
 801402a:	b002      	add	sp, #8
 801402c:	bd80      	pop	{r7, pc}

0801402e <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 801402e:	b590      	push	{r4, r7, lr}
 8014030:	b083      	sub	sp, #12
 8014032:	af00      	add	r7, sp, #0
 8014034:	0004      	movs	r4, r0
 8014036:	0008      	movs	r0, r1
 8014038:	603a      	str	r2, [r7, #0]
 801403a:	0019      	movs	r1, r3
 801403c:	1dfb      	adds	r3, r7, #7
 801403e:	1c22      	adds	r2, r4, #0
 8014040:	701a      	strb	r2, [r3, #0]
 8014042:	1dbb      	adds	r3, r7, #6
 8014044:	1c02      	adds	r2, r0, #0
 8014046:	701a      	strb	r2, [r3, #0]
 8014048:	1d3b      	adds	r3, r7, #4
 801404a:	1c0a      	adds	r2, r1, #0
 801404c:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 801404e:	1d3b      	adds	r3, r7, #4
 8014050:	881c      	ldrh	r4, [r3, #0]
 8014052:	683a      	ldr	r2, [r7, #0]
 8014054:	1dbb      	adds	r3, r7, #6
 8014056:	7819      	ldrb	r1, [r3, #0]
 8014058:	1dfb      	adds	r3, r7, #7
 801405a:	7818      	ldrb	r0, [r3, #0]
 801405c:	0023      	movs	r3, r4
 801405e:	f000 fb2f 	bl	80146c0 <USBPD_HW_IF_SendBuffer>
 8014062:	0003      	movs	r3, r0
}
 8014064:	0018      	movs	r0, r3
 8014066:	46bd      	mov	sp, r7
 8014068:	b003      	add	sp, #12
 801406a:	bd90      	pop	{r4, r7, pc}

0801406c <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	0002      	movs	r2, r0
 8014074:	1dfb      	adds	r3, r7, #7
 8014076:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8014078:	1dfb      	adds	r3, r7, #7
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	0018      	movs	r0, r3
 801407e:	f000 fc7d 	bl	801497c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 8014082:	2300      	movs	r3, #0
}
 8014084:	0018      	movs	r0, r3
 8014086:	46bd      	mov	sp, r7
 8014088:	b002      	add	sp, #8
 801408a:	bd80      	pop	{r7, pc}

0801408c <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	0002      	movs	r2, r0
 8014094:	1dfb      	adds	r3, r7, #7
 8014096:	701a      	strb	r2, [r3, #0]
 8014098:	1dbb      	adds	r3, r7, #6
 801409a:	1c0a      	adds	r2, r1, #0
 801409c:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 801409e:	1dbb      	adds	r3, r7, #6
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	2b07      	cmp	r3, #7
 80140a4:	d104      	bne.n	80140b0 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 80140a6:	1dfb      	adds	r3, r7, #7
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	0018      	movs	r0, r3
 80140ac:	f000 fad0 	bl	8014650 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 80140b0:	2300      	movs	r3, #0
}
 80140b2:	0018      	movs	r0, r3
 80140b4:	46bd      	mov	sp, r7
 80140b6:	b002      	add	sp, #8
 80140b8:	bd80      	pop	{r7, pc}

080140ba <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80140ba:	b580      	push	{r7, lr}
 80140bc:	b082      	sub	sp, #8
 80140be:	af00      	add	r7, sp, #0
 80140c0:	0002      	movs	r2, r0
 80140c2:	1dfb      	adds	r3, r7, #7
 80140c4:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 80140c6:	1dfb      	adds	r3, r7, #7
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	0018      	movs	r0, r3
 80140cc:	f001 f87e 	bl	80151cc <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 80140d0:	46c0      	nop			; (mov r8, r8)
 80140d2:	46bd      	mov	sp, r7
 80140d4:	b002      	add	sp, #8
 80140d6:	bd80      	pop	{r7, pc}

080140d8 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b082      	sub	sp, #8
 80140dc:	af00      	add	r7, sp, #0
 80140de:	0002      	movs	r2, r0
 80140e0:	1dfb      	adds	r3, r7, #7
 80140e2:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 80140e4:	1dfb      	adds	r3, r7, #7
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	0018      	movs	r0, r3
 80140ea:	f001 f889 	bl	8015200 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 80140ee:	46c0      	nop			; (mov r8, r8)
 80140f0:	46bd      	mov	sp, r7
 80140f2:	b002      	add	sp, #8
 80140f4:	bd80      	pop	{r7, pc}
	...

080140f8 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	0002      	movs	r2, r0
 8014100:	6039      	str	r1, [r7, #0]
 8014102:	1dfb      	adds	r3, r7, #7
 8014104:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 8014106:	1dfb      	adds	r3, r7, #7
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	4a05      	ldr	r2, [pc, #20]	; (8014120 <USBPD_PHY_SOPSupported+0x28>)
 801410c:	00db      	lsls	r3, r3, #3
 801410e:	18d3      	adds	r3, r2, r3
 8014110:	3304      	adds	r3, #4
 8014112:	683a      	ldr	r2, [r7, #0]
 8014114:	601a      	str	r2, [r3, #0]
}
 8014116:	46c0      	nop			; (mov r8, r8)
 8014118:	46bd      	mov	sp, r7
 801411a:	b002      	add	sp, #8
 801411c:	bd80      	pop	{r7, pc}
 801411e:	46c0      	nop			; (mov r8, r8)
 8014120:	200005a0 	.word	0x200005a0

08014124 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	0002      	movs	r2, r0
 801412c:	1dfb      	adds	r3, r7, #7
 801412e:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 8014130:	1dfb      	adds	r3, r7, #7
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	0018      	movs	r0, r3
 8014136:	f001 f87d 	bl	8015234 <USBPD_HW_IF_IsResistor_SinkTxOk>
 801413a:	0003      	movs	r3, r0
}
 801413c:	0018      	movs	r0, r3
 801413e:	46bd      	mov	sp, r7
 8014140:	b002      	add	sp, #8
 8014142:	bd80      	pop	{r7, pc}

08014144 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b082      	sub	sp, #8
 8014148:	af00      	add	r7, sp, #0
 801414a:	0002      	movs	r2, r0
 801414c:	1dfb      	adds	r3, r7, #7
 801414e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 8014150:	1dfb      	adds	r3, r7, #7
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	0018      	movs	r0, r3
 8014156:	f001 f8b1 	bl	80152bc <USBPD_HW_IF_FastRoleSwapSignalling>
}
 801415a:	46c0      	nop			; (mov r8, r8)
 801415c:	46bd      	mov	sp, r7
 801415e:	b002      	add	sp, #8
 8014160:	bd80      	pop	{r7, pc}

08014162 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 8014162:	b580      	push	{r7, lr}
 8014164:	b082      	sub	sp, #8
 8014166:	af00      	add	r7, sp, #0
 8014168:	0002      	movs	r2, r0
 801416a:	1dfb      	adds	r3, r7, #7
 801416c:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 801416e:	1dfb      	adds	r3, r7, #7
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	0018      	movs	r0, r3
 8014174:	f000 fe0a 	bl	8014d8c <USBPD_HW_IF_EnableRX>
}
 8014178:	46c0      	nop			; (mov r8, r8)
 801417a:	46bd      	mov	sp, r7
 801417c:	b002      	add	sp, #8
 801417e:	bd80      	pop	{r7, pc}

08014180 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b082      	sub	sp, #8
 8014184:	af00      	add	r7, sp, #0
 8014186:	0002      	movs	r2, r0
 8014188:	1dfb      	adds	r3, r7, #7
 801418a:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 801418c:	1dfb      	adds	r3, r7, #7
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	0018      	movs	r0, r3
 8014192:	f000 fe13 	bl	8014dbc <USBPD_HW_IF_DisableRX>
}
 8014196:	46c0      	nop			; (mov r8, r8)
 8014198:	46bd      	mov	sp, r7
 801419a:	b002      	add	sp, #8
 801419c:	bd80      	pop	{r7, pc}
	...

080141a0 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 80141a0:	b590      	push	{r4, r7, lr}
 80141a2:	b085      	sub	sp, #20
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	0002      	movs	r2, r0
 80141a8:	6039      	str	r1, [r7, #0]
 80141aa:	1dfb      	adds	r3, r7, #7
 80141ac:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 80141ae:	2008      	movs	r0, #8
 80141b0:	183b      	adds	r3, r7, r0
 80141b2:	4a2e      	ldr	r2, [pc, #184]	; (801426c <PHY_Rx_Completed+0xcc>)
 80141b4:	6811      	ldr	r1, [r2, #0]
 80141b6:	6019      	str	r1, [r3, #0]
 80141b8:	8892      	ldrh	r2, [r2, #4]
 80141ba:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 80141bc:	240f      	movs	r4, #15
 80141be:	193b      	adds	r3, r7, r4
 80141c0:	1839      	adds	r1, r7, r0
 80141c2:	683a      	ldr	r2, [r7, #0]
 80141c4:	188a      	adds	r2, r1, r2
 80141c6:	7812      	ldrb	r2, [r2, #0]
 80141c8:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 80141ca:	193b      	adds	r3, r7, r4
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	2b04      	cmp	r3, #4
 80141d0:	dc02      	bgt.n	80141d8 <PHY_Rx_Completed+0x38>
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	da1d      	bge.n	8014212 <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 80141d6:	e040      	b.n	801425a <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 80141d8:	2b06      	cmp	r3, #6
 80141da:	d13e      	bne.n	801425a <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 80141dc:	1dfb      	adds	r3, r7, #7
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	4a23      	ldr	r2, [pc, #140]	; (8014270 <PHY_Rx_Completed+0xd0>)
 80141e2:	00db      	lsls	r3, r3, #3
 80141e4:	18d3      	adds	r3, r2, r3
 80141e6:	3304      	adds	r3, #4
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	221e      	movs	r2, #30
 80141ec:	4013      	ands	r3, r2
 80141ee:	2b1e      	cmp	r3, #30
 80141f0:	d135      	bne.n	801425e <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 80141f2:	1dfb      	adds	r3, r7, #7
 80141f4:	781a      	ldrb	r2, [r3, #0]
 80141f6:	491f      	ldr	r1, [pc, #124]	; (8014274 <PHY_Rx_Completed+0xd4>)
 80141f8:	0013      	movs	r3, r2
 80141fa:	011b      	lsls	r3, r3, #4
 80141fc:	1a9b      	subs	r3, r3, r2
 80141fe:	009b      	lsls	r3, r3, #2
 8014200:	18cb      	adds	r3, r1, r3
 8014202:	331c      	adds	r3, #28
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	1dfa      	adds	r2, r7, #7
 8014208:	7812      	ldrb	r2, [r2, #0]
 801420a:	2106      	movs	r1, #6
 801420c:	0010      	movs	r0, r2
 801420e:	4798      	blx	r3
      break;
 8014210:	e025      	b.n	801425e <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 8014212:	240f      	movs	r4, #15
 8014214:	193b      	adds	r3, r7, r4
 8014216:	781b      	ldrb	r3, [r3, #0]
 8014218:	2201      	movs	r2, #1
 801421a:	409a      	lsls	r2, r3
 801421c:	0013      	movs	r3, r2
 801421e:	b2db      	uxtb	r3, r3
 8014220:	0018      	movs	r0, r3
 8014222:	1dfb      	adds	r3, r7, #7
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	4a12      	ldr	r2, [pc, #72]	; (8014270 <PHY_Rx_Completed+0xd0>)
 8014228:	00db      	lsls	r3, r3, #3
 801422a:	18d3      	adds	r3, r2, r3
 801422c:	3304      	adds	r3, #4
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	193a      	adds	r2, r7, r4
 8014232:	7812      	ldrb	r2, [r2, #0]
 8014234:	2101      	movs	r1, #1
 8014236:	4091      	lsls	r1, r2
 8014238:	000a      	movs	r2, r1
 801423a:	b2d2      	uxtb	r2, r2
 801423c:	4013      	ands	r3, r2
 801423e:	4298      	cmp	r0, r3
 8014240:	d10f      	bne.n	8014262 <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 8014242:	1dfb      	adds	r3, r7, #7
 8014244:	781a      	ldrb	r2, [r3, #0]
 8014246:	4b0a      	ldr	r3, [pc, #40]	; (8014270 <PHY_Rx_Completed+0xd0>)
 8014248:	00d2      	lsls	r2, r2, #3
 801424a:	58d3      	ldr	r3, [r2, r3]
 801424c:	193a      	adds	r2, r7, r4
 801424e:	7811      	ldrb	r1, [r2, #0]
 8014250:	1dfa      	adds	r2, r7, #7
 8014252:	7812      	ldrb	r2, [r2, #0]
 8014254:	0010      	movs	r0, r2
 8014256:	4798      	blx	r3
      break;
 8014258:	e003      	b.n	8014262 <PHY_Rx_Completed+0xc2>
      break;
 801425a:	46c0      	nop			; (mov r8, r8)
 801425c:	e002      	b.n	8014264 <PHY_Rx_Completed+0xc4>
      break;
 801425e:	46c0      	nop			; (mov r8, r8)
 8014260:	e000      	b.n	8014264 <PHY_Rx_Completed+0xc4>
      break;
 8014262:	46c0      	nop			; (mov r8, r8)
  }
}
 8014264:	46c0      	nop			; (mov r8, r8)
 8014266:	46bd      	mov	sp, r7
 8014268:	b005      	add	sp, #20
 801426a:	bd90      	pop	{r4, r7, pc}
 801426c:	08024110 	.word	0x08024110
 8014270:	200005a0 	.word	0x200005a0
 8014274:	200005a8 	.word	0x200005a8

08014278 <LL_AHB1_GRP1_EnableClock>:
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8014280:	4b07      	ldr	r3, [pc, #28]	; (80142a0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8014282:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014284:	4b06      	ldr	r3, [pc, #24]	; (80142a0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	430a      	orrs	r2, r1
 801428a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 801428c:	4b04      	ldr	r3, [pc, #16]	; (80142a0 <LL_AHB1_GRP1_EnableClock+0x28>)
 801428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	4013      	ands	r3, r2
 8014294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014296:	68fb      	ldr	r3, [r7, #12]
}
 8014298:	46c0      	nop			; (mov r8, r8)
 801429a:	46bd      	mov	sp, r7
 801429c:	b004      	add	sp, #16
 801429e:	bd80      	pop	{r7, pc}
 80142a0:	40021000 	.word	0x40021000

080142a4 <LL_APB1_GRP1_EnableClock>:
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80142ac:	4b07      	ldr	r3, [pc, #28]	; (80142cc <LL_APB1_GRP1_EnableClock+0x28>)
 80142ae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80142b0:	4b06      	ldr	r3, [pc, #24]	; (80142cc <LL_APB1_GRP1_EnableClock+0x28>)
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	430a      	orrs	r2, r1
 80142b6:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80142b8:	4b04      	ldr	r3, [pc, #16]	; (80142cc <LL_APB1_GRP1_EnableClock+0x28>)
 80142ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142bc:	687a      	ldr	r2, [r7, #4]
 80142be:	4013      	ands	r3, r2
 80142c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80142c2:	68fb      	ldr	r3, [r7, #12]
}
 80142c4:	46c0      	nop			; (mov r8, r8)
 80142c6:	46bd      	mov	sp, r7
 80142c8:	b004      	add	sp, #16
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	40021000 	.word	0x40021000

080142d0 <LL_APB2_GRP1_EnableClock>:
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80142d8:	4b07      	ldr	r3, [pc, #28]	; (80142f8 <LL_APB2_GRP1_EnableClock+0x28>)
 80142da:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80142dc:	4b06      	ldr	r3, [pc, #24]	; (80142f8 <LL_APB2_GRP1_EnableClock+0x28>)
 80142de:	687a      	ldr	r2, [r7, #4]
 80142e0:	430a      	orrs	r2, r1
 80142e2:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80142e4:	4b04      	ldr	r3, [pc, #16]	; (80142f8 <LL_APB2_GRP1_EnableClock+0x28>)
 80142e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	4013      	ands	r3, r2
 80142ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80142ee:	68fb      	ldr	r3, [r7, #12]
}
 80142f0:	46c0      	nop			; (mov r8, r8)
 80142f2:	46bd      	mov	sp, r7
 80142f4:	b004      	add	sp, #16
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	40021000 	.word	0x40021000

080142fc <LL_UCPD_Enable>:
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2280      	movs	r2, #128	; 0x80
 801430a:	0612      	lsls	r2, r2, #24
 801430c:	431a      	orrs	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	601a      	str	r2, [r3, #0]
}
 8014312:	46c0      	nop			; (mov r8, r8)
 8014314:	46bd      	mov	sp, r7
 8014316:	b002      	add	sp, #8
 8014318:	bd80      	pop	{r7, pc}

0801431a <LL_UCPD_Disable>:
{
 801431a:	b580      	push	{r7, lr}
 801431c:	b082      	sub	sp, #8
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	005b      	lsls	r3, r3, #1
 8014328:	085a      	lsrs	r2, r3, #1
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	601a      	str	r2, [r3, #0]
}
 801432e:	46c0      	nop			; (mov r8, r8)
 8014330:	46bd      	mov	sp, r7
 8014332:	b002      	add	sp, #8
 8014334:	bd80      	pop	{r7, pc}
	...

08014338 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	4a03      	ldr	r2, [pc, #12]	; (8014354 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 8014346:	401a      	ands	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	60da      	str	r2, [r3, #12]
}
 801434c:	46c0      	nop			; (mov r8, r8)
 801434e:	46bd      	mov	sp, r7
 8014350:	b002      	add	sp, #8
 8014352:	bd80      	pop	{r7, pc}
 8014354:	ffdfffff 	.word	0xffdfffff

08014358 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	2280      	movs	r2, #128	; 0x80
 8014366:	0392      	lsls	r2, r2, #14
 8014368:	431a      	orrs	r2, r3
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	60da      	str	r2, [r3, #12]
}
 801436e:	46c0      	nop			; (mov r8, r8)
 8014370:	46bd      	mov	sp, r7
 8014372:	b002      	add	sp, #8
 8014374:	bd80      	pop	{r7, pc}
	...

08014378 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	68db      	ldr	r3, [r3, #12]
 8014384:	4a03      	ldr	r2, [pc, #12]	; (8014394 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 8014386:	401a      	ands	r2, r3
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	60da      	str	r2, [r3, #12]
}
 801438c:	46c0      	nop			; (mov r8, r8)
 801438e:	46bd      	mov	sp, r7
 8014390:	b002      	add	sp, #8
 8014392:	bd80      	pop	{r7, pc}
 8014394:	ffefffff 	.word	0xffefffff

08014398 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b082      	sub	sp, #8
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	2280      	movs	r2, #128	; 0x80
 80143a6:	0352      	lsls	r2, r2, #13
 80143a8:	431a      	orrs	r2, r3
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	60da      	str	r2, [r3, #12]
}
 80143ae:	46c0      	nop			; (mov r8, r8)
 80143b0:	46bd      	mov	sp, r7
 80143b2:	b002      	add	sp, #8
 80143b4:	bd80      	pop	{r7, pc}

080143b6 <LL_UCPD_SignalFRSTX>:
{
 80143b6:	b580      	push	{r7, lr}
 80143b8:	b082      	sub	sp, #8
 80143ba:	af00      	add	r7, sp, #0
 80143bc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	68db      	ldr	r3, [r3, #12]
 80143c2:	2280      	movs	r2, #128	; 0x80
 80143c4:	0292      	lsls	r2, r2, #10
 80143c6:	431a      	orrs	r2, r3
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	60da      	str	r2, [r3, #12]
}
 80143cc:	46c0      	nop			; (mov r8, r8)
 80143ce:	46bd      	mov	sp, r7
 80143d0:	b002      	add	sp, #8
 80143d2:	bd80      	pop	{r7, pc}

080143d4 <LL_UCPD_FRSDetectionEnable>:
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	2280      	movs	r2, #128	; 0x80
 80143e2:	0252      	lsls	r2, r2, #9
 80143e4:	431a      	orrs	r2, r3
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	60da      	str	r2, [r3, #12]
}
 80143ea:	46c0      	nop			; (mov r8, r8)
 80143ec:	46bd      	mov	sp, r7
 80143ee:	b002      	add	sp, #8
 80143f0:	bd80      	pop	{r7, pc}
	...

080143f4 <LL_UCPD_FRSDetectionDisable>:
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	68db      	ldr	r3, [r3, #12]
 8014400:	4a03      	ldr	r2, [pc, #12]	; (8014410 <LL_UCPD_FRSDetectionDisable+0x1c>)
 8014402:	401a      	ands	r2, r3
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	60da      	str	r2, [r3, #12]
}
 8014408:	46c0      	nop			; (mov r8, r8)
 801440a:	46bd      	mov	sp, r7
 801440c:	b002      	add	sp, #8
 801440e:	bd80      	pop	{r7, pc}
 8014410:	fffeffff 	.word	0xfffeffff

08014414 <LL_UCPD_SetccEnable>:
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	68db      	ldr	r3, [r3, #12]
 8014422:	4a05      	ldr	r2, [pc, #20]	; (8014438 <LL_UCPD_SetccEnable+0x24>)
 8014424:	401a      	ands	r2, r3
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	431a      	orrs	r2, r3
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	60da      	str	r2, [r3, #12]
}
 801442e:	46c0      	nop			; (mov r8, r8)
 8014430:	46bd      	mov	sp, r7
 8014432:	b002      	add	sp, #8
 8014434:	bd80      	pop	{r7, pc}
 8014436:	46c0      	nop			; (mov r8, r8)
 8014438:	fffff3ff 	.word	0xfffff3ff

0801443c <LL_UCPD_SetSNKRole>:
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	68db      	ldr	r3, [r3, #12]
 8014448:	2280      	movs	r2, #128	; 0x80
 801444a:	0092      	lsls	r2, r2, #2
 801444c:	431a      	orrs	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	60da      	str	r2, [r3, #12]
}
 8014452:	46c0      	nop			; (mov r8, r8)
 8014454:	46bd      	mov	sp, r7
 8014456:	b002      	add	sp, #8
 8014458:	bd80      	pop	{r7, pc}
	...

0801445c <LL_UCPD_SetSRCRole>:
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	68db      	ldr	r3, [r3, #12]
 8014468:	4a03      	ldr	r2, [pc, #12]	; (8014478 <LL_UCPD_SetSRCRole+0x1c>)
 801446a:	401a      	ands	r2, r3
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	60da      	str	r2, [r3, #12]
}
 8014470:	46c0      	nop			; (mov r8, r8)
 8014472:	46bd      	mov	sp, r7
 8014474:	b002      	add	sp, #8
 8014476:	bd80      	pop	{r7, pc}
 8014478:	fffffdff 	.word	0xfffffdff

0801447c <LL_UCPD_SetRpResistor>:
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	68db      	ldr	r3, [r3, #12]
 801448a:	4a05      	ldr	r2, [pc, #20]	; (80144a0 <LL_UCPD_SetRpResistor+0x24>)
 801448c:	401a      	ands	r2, r3
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	431a      	orrs	r2, r3
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	60da      	str	r2, [r3, #12]
}
 8014496:	46c0      	nop			; (mov r8, r8)
 8014498:	46bd      	mov	sp, r7
 801449a:	b002      	add	sp, #8
 801449c:	bd80      	pop	{r7, pc}
 801449e:	46c0      	nop			; (mov r8, r8)
 80144a0:	fffffe7f 	.word	0xfffffe7f

080144a4 <LL_UCPD_SetCCPin>:
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	68db      	ldr	r3, [r3, #12]
 80144b2:	2240      	movs	r2, #64	; 0x40
 80144b4:	4393      	bics	r3, r2
 80144b6:	001a      	movs	r2, r3
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	431a      	orrs	r2, r3
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	60da      	str	r2, [r3, #12]
}
 80144c0:	46c0      	nop			; (mov r8, r8)
 80144c2:	46bd      	mov	sp, r7
 80144c4:	b002      	add	sp, #8
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <LL_UCPD_RxEnable>:
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	68db      	ldr	r3, [r3, #12]
 80144d4:	2220      	movs	r2, #32
 80144d6:	431a      	orrs	r2, r3
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	60da      	str	r2, [r3, #12]
}
 80144dc:	46c0      	nop			; (mov r8, r8)
 80144de:	46bd      	mov	sp, r7
 80144e0:	b002      	add	sp, #8
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <LL_UCPD_RxDisable>:
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b082      	sub	sp, #8
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	68db      	ldr	r3, [r3, #12]
 80144f0:	2220      	movs	r2, #32
 80144f2:	4393      	bics	r3, r2
 80144f4:	001a      	movs	r2, r3
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	60da      	str	r2, [r3, #12]
}
 80144fa:	46c0      	nop			; (mov r8, r8)
 80144fc:	46bd      	mov	sp, r7
 80144fe:	b002      	add	sp, #8
 8014500:	bd80      	pop	{r7, pc}

08014502 <LL_UCPD_SetRxMode>:
{
 8014502:	b580      	push	{r7, lr}
 8014504:	b082      	sub	sp, #8
 8014506:	af00      	add	r7, sp, #0
 8014508:	6078      	str	r0, [r7, #4]
 801450a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	2210      	movs	r2, #16
 8014512:	4393      	bics	r3, r2
 8014514:	001a      	movs	r2, r3
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	431a      	orrs	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	60da      	str	r2, [r3, #12]
}
 801451e:	46c0      	nop			; (mov r8, r8)
 8014520:	46bd      	mov	sp, r7
 8014522:	b002      	add	sp, #8
 8014524:	bd80      	pop	{r7, pc}

08014526 <LL_UCPD_SendHardReset>:
{
 8014526:	b580      	push	{r7, lr}
 8014528:	b082      	sub	sp, #8
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	68db      	ldr	r3, [r3, #12]
 8014532:	2208      	movs	r2, #8
 8014534:	431a      	orrs	r2, r3
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	60da      	str	r2, [r3, #12]
}
 801453a:	46c0      	nop			; (mov r8, r8)
 801453c:	46bd      	mov	sp, r7
 801453e:	b002      	add	sp, #8
 8014540:	bd80      	pop	{r7, pc}

08014542 <LL_UCPD_SendMessage>:
{
 8014542:	b580      	push	{r7, lr}
 8014544:	b082      	sub	sp, #8
 8014546:	af00      	add	r7, sp, #0
 8014548:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	2204      	movs	r2, #4
 8014550:	431a      	orrs	r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	60da      	str	r2, [r3, #12]
}
 8014556:	46c0      	nop			; (mov r8, r8)
 8014558:	46bd      	mov	sp, r7
 801455a:	b002      	add	sp, #8
 801455c:	bd80      	pop	{r7, pc}

0801455e <LL_UCPD_SetTxMode>:
{
 801455e:	b580      	push	{r7, lr}
 8014560:	b082      	sub	sp, #8
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
 8014566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	68db      	ldr	r3, [r3, #12]
 801456c:	2203      	movs	r2, #3
 801456e:	4393      	bics	r3, r2
 8014570:	001a      	movs	r2, r3
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	431a      	orrs	r2, r3
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	60da      	str	r2, [r3, #12]
}
 801457a:	46c0      	nop			; (mov r8, r8)
 801457c:	46bd      	mov	sp, r7
 801457e:	b002      	add	sp, #8
 8014580:	bd80      	pop	{r7, pc}

08014582 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8014582:	b580      	push	{r7, lr}
 8014584:	b082      	sub	sp, #8
 8014586:	af00      	add	r7, sp, #0
 8014588:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	2280      	movs	r2, #128	; 0x80
 8014590:	05d2      	lsls	r2, r2, #23
 8014592:	431a      	orrs	r2, r3
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	601a      	str	r2, [r3, #0]
}
 8014598:	46c0      	nop			; (mov r8, r8)
 801459a:	46bd      	mov	sp, r7
 801459c:	b002      	add	sp, #8
 801459e:	bd80      	pop	{r7, pc}

080145a0 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4a03      	ldr	r2, [pc, #12]	; (80145bc <LL_UCPD_RxDMADisable+0x1c>)
 80145ae:	401a      	ands	r2, r3
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	601a      	str	r2, [r3, #0]
}
 80145b4:	46c0      	nop			; (mov r8, r8)
 80145b6:	46bd      	mov	sp, r7
 80145b8:	b002      	add	sp, #8
 80145ba:	bd80      	pop	{r7, pc}
 80145bc:	bfffffff 	.word	0xbfffffff

080145c0 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2280      	movs	r2, #128	; 0x80
 80145ce:	0592      	lsls	r2, r2, #22
 80145d0:	431a      	orrs	r2, r3
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	601a      	str	r2, [r3, #0]
}
 80145d6:	46c0      	nop			; (mov r8, r8)
 80145d8:	46bd      	mov	sp, r7
 80145da:	b002      	add	sp, #8
 80145dc:	bd80      	pop	{r7, pc}
	...

080145e0 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	4a03      	ldr	r2, [pc, #12]	; (80145fc <LL_UCPD_TxDMADisable+0x1c>)
 80145ee:	401a      	ands	r2, r3
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	601a      	str	r2, [r3, #0]
}
 80145f4:	46c0      	nop			; (mov r8, r8)
 80145f6:	46bd      	mov	sp, r7
 80145f8:	b002      	add	sp, #8
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	dfffffff 	.word	0xdfffffff

08014600 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b082      	sub	sp, #8
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	683a      	ldr	r2, [r7, #0]
 801460e:	61da      	str	r2, [r3, #28]
}
 8014610:	46c0      	nop			; (mov r8, r8)
 8014612:	46bd      	mov	sp, r7
 8014614:	b002      	add	sp, #8
 8014616:	bd80      	pop	{r7, pc}

08014618 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	683a      	ldr	r2, [r7, #0]
 8014626:	621a      	str	r2, [r3, #32]
}
 8014628:	46c0      	nop			; (mov r8, r8)
 801462a:	46bd      	mov	sp, r7
 801462c:	b002      	add	sp, #8
 801462e:	bd80      	pop	{r7, pc}

08014630 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8014634:	2380      	movs	r3, #128	; 0x80
 8014636:	055b      	lsls	r3, r3, #21
 8014638:	0018      	movs	r0, r3
 801463a:	f7ff fe33 	bl	80142a4 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 801463e:	2380      	movs	r3, #128	; 0x80
 8014640:	015b      	lsls	r3, r3, #5
 8014642:	0018      	movs	r0, r3
 8014644:	f7ff fe18 	bl	8014278 <LL_AHB1_GRP1_EnableClock>
}
 8014648:	46c0      	nop			; (mov r8, r8)
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
	...

08014650 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	0002      	movs	r2, r0
 8014658:	1dfb      	adds	r3, r7, #7
 801465a:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 801465c:	1dfb      	adds	r3, r7, #7
 801465e:	781a      	ldrb	r2, [r3, #0]
 8014660:	4916      	ldr	r1, [pc, #88]	; (80146bc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8014662:	0013      	movs	r3, r2
 8014664:	011b      	lsls	r3, r3, #4
 8014666:	1a9b      	subs	r3, r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	585b      	ldr	r3, [r3, r1]
 801466c:	68db      	ldr	r3, [r3, #12]
 801466e:	2207      	movs	r2, #7
 8014670:	4393      	bics	r3, r2
 8014672:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8014674:	1dfb      	adds	r3, r7, #7
 8014676:	781a      	ldrb	r2, [r3, #0]
 8014678:	4910      	ldr	r1, [pc, #64]	; (80146bc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801467a:	0013      	movs	r3, r2
 801467c:	011b      	lsls	r3, r3, #4
 801467e:	1a9b      	subs	r3, r3, r2
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	585b      	ldr	r3, [r3, r1]
 8014684:	0018      	movs	r0, r3
 8014686:	f7ff fe48 	bl	801431a <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 801468a:	1dfb      	adds	r3, r7, #7
 801468c:	781a      	ldrb	r2, [r3, #0]
 801468e:	490b      	ldr	r1, [pc, #44]	; (80146bc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8014690:	0013      	movs	r3, r2
 8014692:	011b      	lsls	r3, r3, #4
 8014694:	1a9b      	subs	r3, r3, r2
 8014696:	009b      	lsls	r3, r3, #2
 8014698:	585b      	ldr	r3, [r3, r1]
 801469a:	0018      	movs	r0, r3
 801469c:	f7ff fe2e 	bl	80142fc <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 80146a0:	1dfb      	adds	r3, r7, #7
 80146a2:	781a      	ldrb	r2, [r3, #0]
 80146a4:	4905      	ldr	r1, [pc, #20]	; (80146bc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80146a6:	0013      	movs	r3, r2
 80146a8:	011b      	lsls	r3, r3, #4
 80146aa:	1a9b      	subs	r3, r3, r2
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	585b      	ldr	r3, [r3, r1]
 80146b0:	68fa      	ldr	r2, [r7, #12]
 80146b2:	60da      	str	r2, [r3, #12]
}
 80146b4:	46c0      	nop			; (mov r8, r8)
 80146b6:	46bd      	mov	sp, r7
 80146b8:	b004      	add	sp, #16
 80146ba:	bd80      	pop	{r7, pc}
 80146bc:	200005a8 	.word	0x200005a8

080146c0 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 80146c0:	b590      	push	{r4, r7, lr}
 80146c2:	b08b      	sub	sp, #44	; 0x2c
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	60ba      	str	r2, [r7, #8]
 80146c8:	607b      	str	r3, [r7, #4]
 80146ca:	240f      	movs	r4, #15
 80146cc:	193b      	adds	r3, r7, r4
 80146ce:	1c02      	adds	r2, r0, #0
 80146d0:	701a      	strb	r2, [r3, #0]
 80146d2:	200e      	movs	r0, #14
 80146d4:	183b      	adds	r3, r7, r0
 80146d6:	1c0a      	adds	r2, r1, #0
 80146d8:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 80146da:	2327      	movs	r3, #39	; 0x27
 80146dc:	18fb      	adds	r3, r7, r3
 80146de:	2200      	movs	r2, #0
 80146e0:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 80146e2:	183b      	adds	r3, r7, r0
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	2b05      	cmp	r3, #5
 80146e8:	d10b      	bne.n	8014702 <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 80146ea:	193b      	adds	r3, r7, r4
 80146ec:	781a      	ldrb	r2, [r3, #0]
 80146ee:	499e      	ldr	r1, [pc, #632]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80146f0:	0013      	movs	r3, r2
 80146f2:	011b      	lsls	r3, r3, #4
 80146f4:	1a9b      	subs	r3, r3, r2
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	585b      	ldr	r3, [r3, r1]
 80146fa:	0018      	movs	r0, r3
 80146fc:	f7ff ff13 	bl	8014526 <LL_UCPD_SendHardReset>
 8014700:	e12a      	b.n	8014958 <USBPD_HW_IF_SendBuffer+0x298>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014702:	f3ef 8310 	mrs	r3, PRIMASK
 8014706:	61fb      	str	r3, [r7, #28]
  return(result);
 8014708:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 801470a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801470c:	b672      	cpsid	i
}
 801470e:	46c0      	nop			; (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8014710:	240f      	movs	r4, #15
 8014712:	193b      	adds	r3, r7, r4
 8014714:	781a      	ldrb	r2, [r3, #0]
 8014716:	4994      	ldr	r1, [pc, #592]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014718:	2038      	movs	r0, #56	; 0x38
 801471a:	0013      	movs	r3, r2
 801471c:	011b      	lsls	r3, r3, #4
 801471e:	1a9b      	subs	r3, r3, r2
 8014720:	009b      	lsls	r3, r3, #2
 8014722:	18cb      	adds	r3, r1, r3
 8014724:	181b      	adds	r3, r3, r0
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	b2db      	uxtb	r3, r3
 801472a:	2b01      	cmp	r3, #1
 801472c:	d00e      	beq.n	801474c <USBPD_HW_IF_SendBuffer+0x8c>
 801472e:	193b      	adds	r3, r7, r4
 8014730:	781a      	ldrb	r2, [r3, #0]
 8014732:	498d      	ldr	r1, [pc, #564]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014734:	0013      	movs	r3, r2
 8014736:	011b      	lsls	r3, r3, #4
 8014738:	1a9b      	subs	r3, r3, r2
 801473a:	009b      	lsls	r3, r3, #2
 801473c:	18cb      	adds	r3, r1, r3
 801473e:	3304      	adds	r3, #4
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	2201      	movs	r2, #1
 8014746:	4013      	ands	r3, r2
 8014748:	2b01      	cmp	r3, #1
 801474a:	d10a      	bne.n	8014762 <USBPD_HW_IF_SendBuffer+0xa2>
 801474c:	6a3b      	ldr	r3, [r7, #32]
 801474e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	f383 8810 	msr	PRIMASK, r3
}
 8014756:	46c0      	nop			; (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8014758:	2327      	movs	r3, #39	; 0x27
 801475a:	18fb      	adds	r3, r7, r3
 801475c:	2202      	movs	r2, #2
 801475e:	701a      	strb	r2, [r3, #0]
 8014760:	e0fa      	b.n	8014958 <USBPD_HW_IF_SendBuffer+0x298>
 8014762:	6a3b      	ldr	r3, [r7, #32]
 8014764:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014766:	697b      	ldr	r3, [r7, #20]
 8014768:	f383 8810 	msr	PRIMASK, r3
}
 801476c:	46c0      	nop			; (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 801476e:	230e      	movs	r3, #14
 8014770:	18fb      	adds	r3, r7, r3
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	2b07      	cmp	r3, #7
 8014776:	d871      	bhi.n	801485c <USBPD_HW_IF_SendBuffer+0x19c>
 8014778:	009a      	lsls	r2, r3, #2
 801477a:	4b7c      	ldr	r3, [pc, #496]	; (801496c <USBPD_HW_IF_SendBuffer+0x2ac>)
 801477c:	18d3      	adds	r3, r2, r3
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8014782:	240f      	movs	r4, #15
 8014784:	193b      	adds	r3, r7, r4
 8014786:	781a      	ldrb	r2, [r3, #0]
 8014788:	4977      	ldr	r1, [pc, #476]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801478a:	0013      	movs	r3, r2
 801478c:	011b      	lsls	r3, r3, #4
 801478e:	1a9b      	subs	r3, r3, r2
 8014790:	009b      	lsls	r3, r3, #2
 8014792:	585b      	ldr	r3, [r3, r1]
 8014794:	4a76      	ldr	r2, [pc, #472]	; (8014970 <USBPD_HW_IF_SendBuffer+0x2b0>)
 8014796:	0011      	movs	r1, r2
 8014798:	0018      	movs	r0, r3
 801479a:	f7ff ff31 	bl	8014600 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801479e:	193b      	adds	r3, r7, r4
 80147a0:	781a      	ldrb	r2, [r3, #0]
 80147a2:	4971      	ldr	r1, [pc, #452]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80147a4:	0013      	movs	r3, r2
 80147a6:	011b      	lsls	r3, r3, #4
 80147a8:	1a9b      	subs	r3, r3, r2
 80147aa:	009b      	lsls	r3, r3, #2
 80147ac:	585b      	ldr	r3, [r3, r1]
 80147ae:	2100      	movs	r1, #0
 80147b0:	0018      	movs	r0, r3
 80147b2:	f7ff fed4 	bl	801455e <LL_UCPD_SetTxMode>
          break;
 80147b6:	e056      	b.n	8014866 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 80147b8:	240f      	movs	r4, #15
 80147ba:	193b      	adds	r3, r7, r4
 80147bc:	781a      	ldrb	r2, [r3, #0]
 80147be:	496a      	ldr	r1, [pc, #424]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80147c0:	0013      	movs	r3, r2
 80147c2:	011b      	lsls	r3, r3, #4
 80147c4:	1a9b      	subs	r3, r3, r2
 80147c6:	009b      	lsls	r3, r3, #2
 80147c8:	585b      	ldr	r3, [r3, r1]
 80147ca:	4a6a      	ldr	r2, [pc, #424]	; (8014974 <USBPD_HW_IF_SendBuffer+0x2b4>)
 80147cc:	0011      	movs	r1, r2
 80147ce:	0018      	movs	r0, r3
 80147d0:	f7ff ff16 	bl	8014600 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80147d4:	193b      	adds	r3, r7, r4
 80147d6:	781a      	ldrb	r2, [r3, #0]
 80147d8:	4963      	ldr	r1, [pc, #396]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80147da:	0013      	movs	r3, r2
 80147dc:	011b      	lsls	r3, r3, #4
 80147de:	1a9b      	subs	r3, r3, r2
 80147e0:	009b      	lsls	r3, r3, #2
 80147e2:	585b      	ldr	r3, [r3, r1]
 80147e4:	2100      	movs	r1, #0
 80147e6:	0018      	movs	r0, r3
 80147e8:	f7ff feb9 	bl	801455e <LL_UCPD_SetTxMode>
          break;
 80147ec:	e03b      	b.n	8014866 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 80147ee:	240f      	movs	r4, #15
 80147f0:	193b      	adds	r3, r7, r4
 80147f2:	781a      	ldrb	r2, [r3, #0]
 80147f4:	495c      	ldr	r1, [pc, #368]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80147f6:	0013      	movs	r3, r2
 80147f8:	011b      	lsls	r3, r3, #4
 80147fa:	1a9b      	subs	r3, r3, r2
 80147fc:	009b      	lsls	r3, r3, #2
 80147fe:	585b      	ldr	r3, [r3, r1]
 8014800:	4a5d      	ldr	r2, [pc, #372]	; (8014978 <USBPD_HW_IF_SendBuffer+0x2b8>)
 8014802:	0011      	movs	r1, r2
 8014804:	0018      	movs	r0, r3
 8014806:	f7ff fefb 	bl	8014600 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801480a:	193b      	adds	r3, r7, r4
 801480c:	781a      	ldrb	r2, [r3, #0]
 801480e:	4956      	ldr	r1, [pc, #344]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014810:	0013      	movs	r3, r2
 8014812:	011b      	lsls	r3, r3, #4
 8014814:	1a9b      	subs	r3, r3, r2
 8014816:	009b      	lsls	r3, r3, #2
 8014818:	585b      	ldr	r3, [r3, r1]
 801481a:	2100      	movs	r1, #0
 801481c:	0018      	movs	r0, r3
 801481e:	f7ff fe9e 	bl	801455e <LL_UCPD_SetTxMode>
          break;
 8014822:	e020      	b.n	8014866 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8014824:	230f      	movs	r3, #15
 8014826:	18fb      	adds	r3, r7, r3
 8014828:	781a      	ldrb	r2, [r3, #0]
 801482a:	494f      	ldr	r1, [pc, #316]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801482c:	0013      	movs	r3, r2
 801482e:	011b      	lsls	r3, r3, #4
 8014830:	1a9b      	subs	r3, r3, r2
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	585b      	ldr	r3, [r3, r1]
 8014836:	2101      	movs	r1, #1
 8014838:	0018      	movs	r0, r3
 801483a:	f7ff fe90 	bl	801455e <LL_UCPD_SetTxMode>
          break;
 801483e:	e012      	b.n	8014866 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8014840:	230f      	movs	r3, #15
 8014842:	18fb      	adds	r3, r7, r3
 8014844:	781a      	ldrb	r2, [r3, #0]
 8014846:	4948      	ldr	r1, [pc, #288]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014848:	0013      	movs	r3, r2
 801484a:	011b      	lsls	r3, r3, #4
 801484c:	1a9b      	subs	r3, r3, r2
 801484e:	009b      	lsls	r3, r3, #2
 8014850:	585b      	ldr	r3, [r3, r1]
 8014852:	2102      	movs	r1, #2
 8014854:	0018      	movs	r0, r3
 8014856:	f7ff fe82 	bl	801455e <LL_UCPD_SetTxMode>
          break;
 801485a:	e004      	b.n	8014866 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 801485c:	2327      	movs	r3, #39	; 0x27
 801485e:	18fb      	adds	r3, r7, r3
 8014860:	2202      	movs	r2, #2
 8014862:	701a      	strb	r2, [r3, #0]
          break;
 8014864:	46c0      	nop			; (mov r8, r8)
      }

      if (USBPD_OK == _status)
 8014866:	2327      	movs	r3, #39	; 0x27
 8014868:	18fb      	adds	r3, r7, r3
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d173      	bne.n	8014958 <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8014870:	200f      	movs	r0, #15
 8014872:	183b      	adds	r3, r7, r0
 8014874:	781a      	ldrb	r2, [r3, #0]
 8014876:	493c      	ldr	r1, [pc, #240]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014878:	0013      	movs	r3, r2
 801487a:	011b      	lsls	r3, r3, #4
 801487c:	1a9b      	subs	r3, r3, r2
 801487e:	009b      	lsls	r3, r3, #2
 8014880:	18cb      	adds	r3, r1, r3
 8014882:	3304      	adds	r3, #4
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	6819      	ldr	r1, [r3, #0]
 8014888:	183b      	adds	r3, r7, r0
 801488a:	781a      	ldrb	r2, [r3, #0]
 801488c:	4836      	ldr	r0, [pc, #216]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801488e:	0013      	movs	r3, r2
 8014890:	011b      	lsls	r3, r3, #4
 8014892:	1a9b      	subs	r3, r3, r2
 8014894:	009b      	lsls	r3, r3, #2
 8014896:	18c3      	adds	r3, r0, r3
 8014898:	3304      	adds	r3, #4
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2201      	movs	r2, #1
 801489e:	4391      	bics	r1, r2
 80148a0:	000a      	movs	r2, r1
 80148a2:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 80148a4:	46c0      	nop			; (mov r8, r8)
 80148a6:	200f      	movs	r0, #15
 80148a8:	183b      	adds	r3, r7, r0
 80148aa:	781a      	ldrb	r2, [r3, #0]
 80148ac:	492e      	ldr	r1, [pc, #184]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80148ae:	0013      	movs	r3, r2
 80148b0:	011b      	lsls	r3, r3, #4
 80148b2:	1a9b      	subs	r3, r3, r2
 80148b4:	009b      	lsls	r3, r3, #2
 80148b6:	18cb      	adds	r3, r1, r3
 80148b8:	3304      	adds	r3, #4
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	2201      	movs	r2, #1
 80148c0:	4013      	ands	r3, r2
 80148c2:	2b01      	cmp	r3, #1
 80148c4:	d0ef      	beq.n	80148a6 <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 80148c6:	0004      	movs	r4, r0
 80148c8:	193b      	adds	r3, r7, r4
 80148ca:	781a      	ldrb	r2, [r3, #0]
 80148cc:	4926      	ldr	r1, [pc, #152]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80148ce:	0013      	movs	r3, r2
 80148d0:	011b      	lsls	r3, r3, #4
 80148d2:	1a9b      	subs	r3, r3, r2
 80148d4:	009b      	lsls	r3, r3, #2
 80148d6:	18cb      	adds	r3, r1, r3
 80148d8:	3304      	adds	r3, #4
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	68ba      	ldr	r2, [r7, #8]
 80148de:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 80148e0:	193b      	adds	r3, r7, r4
 80148e2:	781a      	ldrb	r2, [r3, #0]
 80148e4:	4920      	ldr	r1, [pc, #128]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80148e6:	0013      	movs	r3, r2
 80148e8:	011b      	lsls	r3, r3, #4
 80148ea:	1a9b      	subs	r3, r3, r2
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	18cb      	adds	r3, r1, r3
 80148f0:	3304      	adds	r3, #4
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	687a      	ldr	r2, [r7, #4]
 80148f6:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80148f8:	193b      	adds	r3, r7, r4
 80148fa:	781a      	ldrb	r2, [r3, #0]
 80148fc:	491a      	ldr	r1, [pc, #104]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80148fe:	0013      	movs	r3, r2
 8014900:	011b      	lsls	r3, r3, #4
 8014902:	1a9b      	subs	r3, r3, r2
 8014904:	009b      	lsls	r3, r3, #2
 8014906:	18cb      	adds	r3, r1, r3
 8014908:	3304      	adds	r3, #4
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	6819      	ldr	r1, [r3, #0]
 801490e:	193b      	adds	r3, r7, r4
 8014910:	781a      	ldrb	r2, [r3, #0]
 8014912:	4815      	ldr	r0, [pc, #84]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014914:	0013      	movs	r3, r2
 8014916:	011b      	lsls	r3, r3, #4
 8014918:	1a9b      	subs	r3, r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	18c3      	adds	r3, r0, r3
 801491e:	3304      	adds	r3, #4
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	2201      	movs	r2, #1
 8014924:	430a      	orrs	r2, r1
 8014926:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8014928:	193b      	adds	r3, r7, r4
 801492a:	781a      	ldrb	r2, [r3, #0]
 801492c:	490e      	ldr	r1, [pc, #56]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801492e:	0013      	movs	r3, r2
 8014930:	011b      	lsls	r3, r3, #4
 8014932:	1a9b      	subs	r3, r3, r2
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	585b      	ldr	r3, [r3, r1]
 8014938:	687a      	ldr	r2, [r7, #4]
 801493a:	0011      	movs	r1, r2
 801493c:	0018      	movs	r0, r3
 801493e:	f7ff fe6b 	bl	8014618 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8014942:	193b      	adds	r3, r7, r4
 8014944:	781a      	ldrb	r2, [r3, #0]
 8014946:	4908      	ldr	r1, [pc, #32]	; (8014968 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014948:	0013      	movs	r3, r2
 801494a:	011b      	lsls	r3, r3, #4
 801494c:	1a9b      	subs	r3, r3, r2
 801494e:	009b      	lsls	r3, r3, #2
 8014950:	585b      	ldr	r3, [r3, r1]
 8014952:	0018      	movs	r0, r3
 8014954:	f7ff fdf5 	bl	8014542 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8014958:	2327      	movs	r3, #39	; 0x27
 801495a:	18fb      	adds	r3, r7, r3
 801495c:	781b      	ldrb	r3, [r3, #0]
}
 801495e:	0018      	movs	r0, r3
 8014960:	46bd      	mov	sp, r7
 8014962:	b00b      	add	sp, #44	; 0x2c
 8014964:	bd90      	pop	{r4, r7, pc}
 8014966:	46c0      	nop			; (mov r8, r8)
 8014968:	200005a8 	.word	0x200005a8
 801496c:	08025068 	.word	0x08025068
 8014970:	0008e318 	.word	0x0008e318
 8014974:	00031b18 	.word	0x00031b18
 8014978:	000360d8 	.word	0x000360d8

0801497c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	0002      	movs	r2, r0
 8014984:	1dfb      	adds	r3, r7, #7
 8014986:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8014988:	1dfb      	adds	r3, r7, #7
 801498a:	781a      	ldrb	r2, [r3, #0]
 801498c:	490c      	ldr	r1, [pc, #48]	; (80149c0 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 801498e:	0013      	movs	r3, r2
 8014990:	011b      	lsls	r3, r3, #4
 8014992:	1a9b      	subs	r3, r3, r2
 8014994:	009b      	lsls	r3, r3, #2
 8014996:	585b      	ldr	r3, [r3, r1]
 8014998:	2102      	movs	r1, #2
 801499a:	0018      	movs	r0, r3
 801499c:	f7ff fddf 	bl	801455e <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80149a0:	1dfb      	adds	r3, r7, #7
 80149a2:	781a      	ldrb	r2, [r3, #0]
 80149a4:	4906      	ldr	r1, [pc, #24]	; (80149c0 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 80149a6:	0013      	movs	r3, r2
 80149a8:	011b      	lsls	r3, r3, #4
 80149aa:	1a9b      	subs	r3, r3, r2
 80149ac:	009b      	lsls	r3, r3, #2
 80149ae:	585b      	ldr	r3, [r3, r1]
 80149b0:	0018      	movs	r0, r3
 80149b2:	f7ff fdc6 	bl	8014542 <LL_UCPD_SendMessage>
}
 80149b6:	46c0      	nop			; (mov r8, r8)
 80149b8:	46bd      	mov	sp, r7
 80149ba:	b002      	add	sp, #8
 80149bc:	bd80      	pop	{r7, pc}
 80149be:	46c0      	nop			; (mov r8, r8)
 80149c0:	200005a8 	.word	0x200005a8

080149c4 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b082      	sub	sp, #8
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	0002      	movs	r2, r0
 80149cc:	1dfb      	adds	r3, r7, #7
 80149ce:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80149d0:	2001      	movs	r0, #1
 80149d2:	f7ff fc7d 	bl	80142d0 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 80149d6:	1dfb      	adds	r3, r7, #7
 80149d8:	781a      	ldrb	r2, [r3, #0]
 80149da:	4953      	ldr	r1, [pc, #332]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 80149dc:	0013      	movs	r3, r2
 80149de:	011b      	lsls	r3, r3, #4
 80149e0:	1a9b      	subs	r3, r3, r2
 80149e2:	009b      	lsls	r3, r3, #2
 80149e4:	18cb      	adds	r3, r1, r3
 80149e6:	3310      	adds	r3, #16
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	789b      	ldrb	r3, [r3, #2]
 80149ec:	079b      	lsls	r3, r3, #30
 80149ee:	0f9b      	lsrs	r3, r3, #30
 80149f0:	b2db      	uxtb	r3, r3
 80149f2:	2b02      	cmp	r3, #2
 80149f4:	d021      	beq.n	8014a3a <USBPDM1_AssertRp+0x76>
 80149f6:	dc2f      	bgt.n	8014a58 <USBPDM1_AssertRp+0x94>
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d002      	beq.n	8014a02 <USBPDM1_AssertRp+0x3e>
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d00d      	beq.n	8014a1c <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8014a00:	e02a      	b.n	8014a58 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8014a02:	1dfb      	adds	r3, r7, #7
 8014a04:	781a      	ldrb	r2, [r3, #0]
 8014a06:	4948      	ldr	r1, [pc, #288]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014a08:	0013      	movs	r3, r2
 8014a0a:	011b      	lsls	r3, r3, #4
 8014a0c:	1a9b      	subs	r3, r3, r2
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	585b      	ldr	r3, [r3, r1]
 8014a12:	2180      	movs	r1, #128	; 0x80
 8014a14:	0018      	movs	r0, r3
 8014a16:	f7ff fd31 	bl	801447c <LL_UCPD_SetRpResistor>
      break;
 8014a1a:	e01e      	b.n	8014a5a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8014a1c:	1dfb      	adds	r3, r7, #7
 8014a1e:	781a      	ldrb	r2, [r3, #0]
 8014a20:	4941      	ldr	r1, [pc, #260]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014a22:	0013      	movs	r3, r2
 8014a24:	011b      	lsls	r3, r3, #4
 8014a26:	1a9b      	subs	r3, r3, r2
 8014a28:	009b      	lsls	r3, r3, #2
 8014a2a:	585b      	ldr	r3, [r3, r1]
 8014a2c:	2280      	movs	r2, #128	; 0x80
 8014a2e:	0052      	lsls	r2, r2, #1
 8014a30:	0011      	movs	r1, r2
 8014a32:	0018      	movs	r0, r3
 8014a34:	f7ff fd22 	bl	801447c <LL_UCPD_SetRpResistor>
      break;
 8014a38:	e00f      	b.n	8014a5a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8014a3a:	1dfb      	adds	r3, r7, #7
 8014a3c:	781a      	ldrb	r2, [r3, #0]
 8014a3e:	493a      	ldr	r1, [pc, #232]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014a40:	0013      	movs	r3, r2
 8014a42:	011b      	lsls	r3, r3, #4
 8014a44:	1a9b      	subs	r3, r3, r2
 8014a46:	009b      	lsls	r3, r3, #2
 8014a48:	585b      	ldr	r3, [r3, r1]
 8014a4a:	22c0      	movs	r2, #192	; 0xc0
 8014a4c:	0052      	lsls	r2, r2, #1
 8014a4e:	0011      	movs	r1, r2
 8014a50:	0018      	movs	r0, r3
 8014a52:	f7ff fd13 	bl	801447c <LL_UCPD_SetRpResistor>
      break;
 8014a56:	e000      	b.n	8014a5a <USBPDM1_AssertRp+0x96>
      break;
 8014a58:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8014a5a:	1dfb      	adds	r3, r7, #7
 8014a5c:	781a      	ldrb	r2, [r3, #0]
 8014a5e:	4932      	ldr	r1, [pc, #200]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014a60:	0013      	movs	r3, r2
 8014a62:	011b      	lsls	r3, r3, #4
 8014a64:	1a9b      	subs	r3, r3, r2
 8014a66:	009b      	lsls	r3, r3, #2
 8014a68:	585b      	ldr	r3, [r3, r1]
 8014a6a:	2100      	movs	r1, #0
 8014a6c:	0018      	movs	r0, r3
 8014a6e:	f7ff fcd1 	bl	8014414 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8014a72:	1dfb      	adds	r3, r7, #7
 8014a74:	781a      	ldrb	r2, [r3, #0]
 8014a76:	492c      	ldr	r1, [pc, #176]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014a78:	0013      	movs	r3, r2
 8014a7a:	011b      	lsls	r3, r3, #4
 8014a7c:	1a9b      	subs	r3, r3, r2
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	585b      	ldr	r3, [r3, r1]
 8014a82:	0018      	movs	r0, r3
 8014a84:	f7ff fcea 	bl	801445c <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8014a88:	1dfb      	adds	r3, r7, #7
 8014a8a:	781a      	ldrb	r2, [r3, #0]
 8014a8c:	4926      	ldr	r1, [pc, #152]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014a8e:	0013      	movs	r3, r2
 8014a90:	011b      	lsls	r3, r3, #4
 8014a92:	1a9b      	subs	r3, r3, r2
 8014a94:	009b      	lsls	r3, r3, #2
 8014a96:	18cb      	adds	r3, r1, r3
 8014a98:	3334      	adds	r3, #52	; 0x34
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d10e      	bne.n	8014abe <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8014aa0:	1dfb      	adds	r3, r7, #7
 8014aa2:	781a      	ldrb	r2, [r3, #0]
 8014aa4:	4920      	ldr	r1, [pc, #128]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014aa6:	0013      	movs	r3, r2
 8014aa8:	011b      	lsls	r3, r3, #4
 8014aaa:	1a9b      	subs	r3, r3, r2
 8014aac:	009b      	lsls	r3, r3, #2
 8014aae:	585b      	ldr	r3, [r3, r1]
 8014ab0:	22c0      	movs	r2, #192	; 0xc0
 8014ab2:	0112      	lsls	r2, r2, #4
 8014ab4:	0011      	movs	r1, r2
 8014ab6:	0018      	movs	r0, r3
 8014ab8:	f7ff fcac 	bl	8014414 <LL_UCPD_SetccEnable>
 8014abc:	e01b      	b.n	8014af6 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8014abe:	1dfb      	adds	r3, r7, #7
 8014ac0:	781a      	ldrb	r2, [r3, #0]
 8014ac2:	4919      	ldr	r1, [pc, #100]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014ac4:	0013      	movs	r3, r2
 8014ac6:	011b      	lsls	r3, r3, #4
 8014ac8:	1a9b      	subs	r3, r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8014ace:	1dfb      	adds	r3, r7, #7
 8014ad0:	781a      	ldrb	r2, [r3, #0]
 8014ad2:	4915      	ldr	r1, [pc, #84]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014ad4:	0013      	movs	r3, r2
 8014ad6:	011b      	lsls	r3, r3, #4
 8014ad8:	1a9b      	subs	r3, r3, r2
 8014ada:	009b      	lsls	r3, r3, #2
 8014adc:	18cb      	adds	r3, r1, r3
 8014ade:	3334      	adds	r3, #52	; 0x34
 8014ae0:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8014ae2:	2b01      	cmp	r3, #1
 8014ae4:	d102      	bne.n	8014aec <USBPDM1_AssertRp+0x128>
 8014ae6:	2380      	movs	r3, #128	; 0x80
 8014ae8:	00db      	lsls	r3, r3, #3
 8014aea:	e001      	b.n	8014af0 <USBPDM1_AssertRp+0x12c>
 8014aec:	2380      	movs	r3, #128	; 0x80
 8014aee:	011b      	lsls	r3, r3, #4
 8014af0:	0019      	movs	r1, r3
 8014af2:	f7ff fc8f 	bl	8014414 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8014af6:	4b0d      	ldr	r3, [pc, #52]	; (8014b2c <USBPDM1_AssertRp+0x168>)
 8014af8:	6819      	ldr	r1, [r3, #0]
 8014afa:	1dfb      	adds	r3, r7, #7
 8014afc:	781a      	ldrb	r2, [r3, #0]
 8014afe:	480a      	ldr	r0, [pc, #40]	; (8014b28 <USBPDM1_AssertRp+0x164>)
 8014b00:	0013      	movs	r3, r2
 8014b02:	011b      	lsls	r3, r3, #4
 8014b04:	1a9b      	subs	r3, r3, r2
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	581b      	ldr	r3, [r3, r0]
 8014b0a:	4a09      	ldr	r2, [pc, #36]	; (8014b30 <USBPDM1_AssertRp+0x16c>)
 8014b0c:	4293      	cmp	r3, r2
 8014b0e:	d102      	bne.n	8014b16 <USBPDM1_AssertRp+0x152>
 8014b10:	2380      	movs	r3, #128	; 0x80
 8014b12:	009b      	lsls	r3, r3, #2
 8014b14:	e001      	b.n	8014b1a <USBPDM1_AssertRp+0x156>
 8014b16:	2380      	movs	r3, #128	; 0x80
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	4a04      	ldr	r2, [pc, #16]	; (8014b2c <USBPDM1_AssertRp+0x168>)
 8014b1c:	430b      	orrs	r3, r1
 8014b1e:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8014b20:	46c0      	nop			; (mov r8, r8)
 8014b22:	46bd      	mov	sp, r7
 8014b24:	b002      	add	sp, #8
 8014b26:	bd80      	pop	{r7, pc}
 8014b28:	200005a8 	.word	0x200005a8
 8014b2c:	40010000 	.word	0x40010000
 8014b30:	4000a000 	.word	0x4000a000

08014b34 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	0002      	movs	r2, r0
 8014b3c:	1dfb      	adds	r3, r7, #7
 8014b3e:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8014b40:	46c0      	nop			; (mov r8, r8)
 8014b42:	46bd      	mov	sp, r7
 8014b44:	b002      	add	sp, #8
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	0002      	movs	r2, r0
 8014b50:	1dfb      	adds	r3, r7, #7
 8014b52:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8014b54:	1dfb      	adds	r3, r7, #7
 8014b56:	781a      	ldrb	r2, [r3, #0]
 8014b58:	494b      	ldr	r1, [pc, #300]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014b5a:	0013      	movs	r3, r2
 8014b5c:	011b      	lsls	r3, r3, #4
 8014b5e:	1a9b      	subs	r3, r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	585b      	ldr	r3, [r3, r1]
 8014b64:	0018      	movs	r0, r3
 8014b66:	f7ff fbf7 	bl	8014358 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8014b6a:	1dfb      	adds	r3, r7, #7
 8014b6c:	781a      	ldrb	r2, [r3, #0]
 8014b6e:	4946      	ldr	r1, [pc, #280]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014b70:	0013      	movs	r3, r2
 8014b72:	011b      	lsls	r3, r3, #4
 8014b74:	1a9b      	subs	r3, r3, r2
 8014b76:	009b      	lsls	r3, r3, #2
 8014b78:	585b      	ldr	r3, [r3, r1]
 8014b7a:	0018      	movs	r0, r3
 8014b7c:	f7ff fc0c 	bl	8014398 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8014b80:	2001      	movs	r0, #1
 8014b82:	f7ff fba5 	bl	80142d0 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8014b86:	1dfb      	adds	r3, r7, #7
 8014b88:	781a      	ldrb	r2, [r3, #0]
 8014b8a:	493f      	ldr	r1, [pc, #252]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014b8c:	0013      	movs	r3, r2
 8014b8e:	011b      	lsls	r3, r3, #4
 8014b90:	1a9b      	subs	r3, r3, r2
 8014b92:	009b      	lsls	r3, r3, #2
 8014b94:	585b      	ldr	r3, [r3, r1]
 8014b96:	2100      	movs	r1, #0
 8014b98:	0018      	movs	r0, r3
 8014b9a:	f7ff fc3b 	bl	8014414 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8014b9e:	1dfb      	adds	r3, r7, #7
 8014ba0:	781a      	ldrb	r2, [r3, #0]
 8014ba2:	4939      	ldr	r1, [pc, #228]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014ba4:	0013      	movs	r3, r2
 8014ba6:	011b      	lsls	r3, r3, #4
 8014ba8:	1a9b      	subs	r3, r3, r2
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	585b      	ldr	r3, [r3, r1]
 8014bae:	0018      	movs	r0, r3
 8014bb0:	f7ff fc44 	bl	801443c <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8014bb4:	1dfb      	adds	r3, r7, #7
 8014bb6:	781a      	ldrb	r2, [r3, #0]
 8014bb8:	4933      	ldr	r1, [pc, #204]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014bba:	0013      	movs	r3, r2
 8014bbc:	011b      	lsls	r3, r3, #4
 8014bbe:	1a9b      	subs	r3, r3, r2
 8014bc0:	009b      	lsls	r3, r3, #2
 8014bc2:	18cb      	adds	r3, r1, r3
 8014bc4:	3334      	adds	r3, #52	; 0x34
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d10e      	bne.n	8014bea <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8014bcc:	1dfb      	adds	r3, r7, #7
 8014bce:	781a      	ldrb	r2, [r3, #0]
 8014bd0:	492d      	ldr	r1, [pc, #180]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014bd2:	0013      	movs	r3, r2
 8014bd4:	011b      	lsls	r3, r3, #4
 8014bd6:	1a9b      	subs	r3, r3, r2
 8014bd8:	009b      	lsls	r3, r3, #2
 8014bda:	585b      	ldr	r3, [r3, r1]
 8014bdc:	22c0      	movs	r2, #192	; 0xc0
 8014bde:	0112      	lsls	r2, r2, #4
 8014be0:	0011      	movs	r1, r2
 8014be2:	0018      	movs	r0, r3
 8014be4:	f7ff fc16 	bl	8014414 <LL_UCPD_SetccEnable>
 8014be8:	e01b      	b.n	8014c22 <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8014bea:	1dfb      	adds	r3, r7, #7
 8014bec:	781a      	ldrb	r2, [r3, #0]
 8014bee:	4926      	ldr	r1, [pc, #152]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014bf0:	0013      	movs	r3, r2
 8014bf2:	011b      	lsls	r3, r3, #4
 8014bf4:	1a9b      	subs	r3, r3, r2
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8014bfa:	1dfb      	adds	r3, r7, #7
 8014bfc:	781a      	ldrb	r2, [r3, #0]
 8014bfe:	4922      	ldr	r1, [pc, #136]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014c00:	0013      	movs	r3, r2
 8014c02:	011b      	lsls	r3, r3, #4
 8014c04:	1a9b      	subs	r3, r3, r2
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	18cb      	adds	r3, r1, r3
 8014c0a:	3334      	adds	r3, #52	; 0x34
 8014c0c:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8014c0e:	2b01      	cmp	r3, #1
 8014c10:	d102      	bne.n	8014c18 <USBPDM1_AssertRd+0xd0>
 8014c12:	2380      	movs	r3, #128	; 0x80
 8014c14:	00db      	lsls	r3, r3, #3
 8014c16:	e001      	b.n	8014c1c <USBPDM1_AssertRd+0xd4>
 8014c18:	2380      	movs	r3, #128	; 0x80
 8014c1a:	011b      	lsls	r3, r3, #4
 8014c1c:	0019      	movs	r1, r3
 8014c1e:	f7ff fbf9 	bl	8014414 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8014c22:	4b1a      	ldr	r3, [pc, #104]	; (8014c8c <USBPDM1_AssertRd+0x144>)
 8014c24:	6819      	ldr	r1, [r3, #0]
 8014c26:	1dfb      	adds	r3, r7, #7
 8014c28:	781a      	ldrb	r2, [r3, #0]
 8014c2a:	4817      	ldr	r0, [pc, #92]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014c2c:	0013      	movs	r3, r2
 8014c2e:	011b      	lsls	r3, r3, #4
 8014c30:	1a9b      	subs	r3, r3, r2
 8014c32:	009b      	lsls	r3, r3, #2
 8014c34:	581b      	ldr	r3, [r3, r0]
 8014c36:	4a16      	ldr	r2, [pc, #88]	; (8014c90 <USBPDM1_AssertRd+0x148>)
 8014c38:	4293      	cmp	r3, r2
 8014c3a:	d102      	bne.n	8014c42 <USBPDM1_AssertRd+0xfa>
 8014c3c:	2380      	movs	r3, #128	; 0x80
 8014c3e:	009b      	lsls	r3, r3, #2
 8014c40:	e001      	b.n	8014c46 <USBPDM1_AssertRd+0xfe>
 8014c42:	2380      	movs	r3, #128	; 0x80
 8014c44:	00db      	lsls	r3, r3, #3
 8014c46:	4a11      	ldr	r2, [pc, #68]	; (8014c8c <USBPDM1_AssertRd+0x144>)
 8014c48:	430b      	orrs	r3, r1
 8014c4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8014c4c:	2001      	movs	r0, #1
 8014c4e:	f7f4 fbc1 	bl	80093d4 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8014c52:	1dfb      	adds	r3, r7, #7
 8014c54:	781a      	ldrb	r2, [r3, #0]
 8014c56:	490c      	ldr	r1, [pc, #48]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014c58:	0013      	movs	r3, r2
 8014c5a:	011b      	lsls	r3, r3, #4
 8014c5c:	1a9b      	subs	r3, r3, r2
 8014c5e:	009b      	lsls	r3, r3, #2
 8014c60:	585b      	ldr	r3, [r3, r1]
 8014c62:	0018      	movs	r0, r3
 8014c64:	f7ff fb68 	bl	8014338 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8014c68:	1dfb      	adds	r3, r7, #7
 8014c6a:	781a      	ldrb	r2, [r3, #0]
 8014c6c:	4906      	ldr	r1, [pc, #24]	; (8014c88 <USBPDM1_AssertRd+0x140>)
 8014c6e:	0013      	movs	r3, r2
 8014c70:	011b      	lsls	r3, r3, #4
 8014c72:	1a9b      	subs	r3, r3, r2
 8014c74:	009b      	lsls	r3, r3, #2
 8014c76:	585b      	ldr	r3, [r3, r1]
 8014c78:	0018      	movs	r0, r3
 8014c7a:	f7ff fb7d 	bl	8014378 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8014c7e:	46c0      	nop			; (mov r8, r8)
 8014c80:	46bd      	mov	sp, r7
 8014c82:	b002      	add	sp, #8
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	46c0      	nop			; (mov r8, r8)
 8014c88:	200005a8 	.word	0x200005a8
 8014c8c:	40010000 	.word	0x40010000
 8014c90:	4000a000 	.word	0x4000a000

08014c94 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	0002      	movs	r2, r0
 8014c9c:	1dfb      	adds	r3, r7, #7
 8014c9e:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8014ca0:	46c0      	nop			; (mov r8, r8)
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	b002      	add	sp, #8
 8014ca6:	bd80      	pop	{r7, pc}

08014ca8 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	0002      	movs	r2, r0
 8014cb0:	1dfb      	adds	r3, r7, #7
 8014cb2:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8014cb4:	2001      	movs	r0, #1
 8014cb6:	f7ff fb0b 	bl	80142d0 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8014cba:	1dfb      	adds	r3, r7, #7
 8014cbc:	781a      	ldrb	r2, [r3, #0]
 8014cbe:	4930      	ldr	r1, [pc, #192]	; (8014d80 <USBPDM1_EnterErrorRecovery+0xd8>)
 8014cc0:	0013      	movs	r3, r2
 8014cc2:	011b      	lsls	r3, r3, #4
 8014cc4:	1a9b      	subs	r3, r3, r2
 8014cc6:	009b      	lsls	r3, r3, #2
 8014cc8:	585b      	ldr	r3, [r3, r1]
 8014cca:	0018      	movs	r0, r3
 8014ccc:	f7ff fbc6 	bl	801445c <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8014cd0:	1dfb      	adds	r3, r7, #7
 8014cd2:	781a      	ldrb	r2, [r3, #0]
 8014cd4:	492a      	ldr	r1, [pc, #168]	; (8014d80 <USBPDM1_EnterErrorRecovery+0xd8>)
 8014cd6:	0013      	movs	r3, r2
 8014cd8:	011b      	lsls	r3, r3, #4
 8014cda:	1a9b      	subs	r3, r3, r2
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	585b      	ldr	r3, [r3, r1]
 8014ce0:	2100      	movs	r1, #0
 8014ce2:	0018      	movs	r0, r3
 8014ce4:	f7ff fbca 	bl	801447c <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8014ce8:	1dfb      	adds	r3, r7, #7
 8014cea:	781a      	ldrb	r2, [r3, #0]
 8014cec:	4924      	ldr	r1, [pc, #144]	; (8014d80 <USBPDM1_EnterErrorRecovery+0xd8>)
 8014cee:	0013      	movs	r3, r2
 8014cf0:	011b      	lsls	r3, r3, #4
 8014cf2:	1a9b      	subs	r3, r3, r2
 8014cf4:	009b      	lsls	r3, r3, #2
 8014cf6:	585b      	ldr	r3, [r3, r1]
 8014cf8:	2100      	movs	r1, #0
 8014cfa:	0018      	movs	r0, r3
 8014cfc:	f7ff fb8a 	bl	8014414 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8014d00:	4b20      	ldr	r3, [pc, #128]	; (8014d84 <USBPDM1_EnterErrorRecovery+0xdc>)
 8014d02:	6819      	ldr	r1, [r3, #0]
 8014d04:	1dfb      	adds	r3, r7, #7
 8014d06:	781a      	ldrb	r2, [r3, #0]
 8014d08:	481d      	ldr	r0, [pc, #116]	; (8014d80 <USBPDM1_EnterErrorRecovery+0xd8>)
 8014d0a:	0013      	movs	r3, r2
 8014d0c:	011b      	lsls	r3, r3, #4
 8014d0e:	1a9b      	subs	r3, r3, r2
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	581b      	ldr	r3, [r3, r0]
 8014d14:	4a1c      	ldr	r2, [pc, #112]	; (8014d88 <USBPDM1_EnterErrorRecovery+0xe0>)
 8014d16:	4293      	cmp	r3, r2
 8014d18:	d102      	bne.n	8014d20 <USBPDM1_EnterErrorRecovery+0x78>
 8014d1a:	2380      	movs	r3, #128	; 0x80
 8014d1c:	009b      	lsls	r3, r3, #2
 8014d1e:	e001      	b.n	8014d24 <USBPDM1_EnterErrorRecovery+0x7c>
 8014d20:	2380      	movs	r3, #128	; 0x80
 8014d22:	00db      	lsls	r3, r3, #3
 8014d24:	4a17      	ldr	r2, [pc, #92]	; (8014d84 <USBPDM1_EnterErrorRecovery+0xdc>)
 8014d26:	430b      	orrs	r3, r1
 8014d28:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8014d2a:	1dfb      	adds	r3, r7, #7
 8014d2c:	781a      	ldrb	r2, [r3, #0]
 8014d2e:	4914      	ldr	r1, [pc, #80]	; (8014d80 <USBPDM1_EnterErrorRecovery+0xd8>)
 8014d30:	0013      	movs	r3, r2
 8014d32:	011b      	lsls	r3, r3, #4
 8014d34:	1a9b      	subs	r3, r3, r2
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	585b      	ldr	r3, [r3, r1]
 8014d3a:	0018      	movs	r0, r3
 8014d3c:	f7ff fbd2 	bl	80144e4 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8014d40:	1dfb      	adds	r3, r7, #7
 8014d42:	781a      	ldrb	r2, [r3, #0]
 8014d44:	490e      	ldr	r1, [pc, #56]	; (8014d80 <USBPDM1_EnterErrorRecovery+0xd8>)
 8014d46:	0013      	movs	r3, r2
 8014d48:	011b      	lsls	r3, r3, #4
 8014d4a:	1a9b      	subs	r3, r3, r2
 8014d4c:	009b      	lsls	r3, r3, #2
 8014d4e:	18cb      	adds	r3, r1, r3
 8014d50:	330c      	adds	r3, #12
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	7a1b      	ldrb	r3, [r3, #8]
 8014d56:	2202      	movs	r2, #2
 8014d58:	4013      	ands	r3, r2
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d00a      	beq.n	8014d76 <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8014d60:	1dfb      	adds	r3, r7, #7
 8014d62:	781a      	ldrb	r2, [r3, #0]
 8014d64:	4906      	ldr	r1, [pc, #24]	; (8014d80 <USBPDM1_EnterErrorRecovery+0xd8>)
 8014d66:	0013      	movs	r3, r2
 8014d68:	011b      	lsls	r3, r3, #4
 8014d6a:	1a9b      	subs	r3, r3, r2
 8014d6c:	009b      	lsls	r3, r3, #2
 8014d6e:	585b      	ldr	r3, [r3, r1]
 8014d70:	0018      	movs	r0, r3
 8014d72:	f7ff fb3f 	bl	80143f4 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 8014d76:	46c0      	nop			; (mov r8, r8)
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	b002      	add	sp, #8
 8014d7c:	bd80      	pop	{r7, pc}
 8014d7e:	46c0      	nop			; (mov r8, r8)
 8014d80:	200005a8 	.word	0x200005a8
 8014d84:	40010000 	.word	0x40010000
 8014d88:	4000a000 	.word	0x4000a000

08014d8c <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b082      	sub	sp, #8
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	0002      	movs	r2, r0
 8014d94:	1dfb      	adds	r3, r7, #7
 8014d96:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8014d98:	1dfb      	adds	r3, r7, #7
 8014d9a:	781a      	ldrb	r2, [r3, #0]
 8014d9c:	4906      	ldr	r1, [pc, #24]	; (8014db8 <USBPD_HW_IF_EnableRX+0x2c>)
 8014d9e:	0013      	movs	r3, r2
 8014da0:	011b      	lsls	r3, r3, #4
 8014da2:	1a9b      	subs	r3, r3, r2
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	585b      	ldr	r3, [r3, r1]
 8014da8:	0018      	movs	r0, r3
 8014daa:	f7ff fb8d 	bl	80144c8 <LL_UCPD_RxEnable>
}
 8014dae:	46c0      	nop			; (mov r8, r8)
 8014db0:	46bd      	mov	sp, r7
 8014db2:	b002      	add	sp, #8
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	46c0      	nop			; (mov r8, r8)
 8014db8:	200005a8 	.word	0x200005a8

08014dbc <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b082      	sub	sp, #8
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	0002      	movs	r2, r0
 8014dc4:	1dfb      	adds	r3, r7, #7
 8014dc6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8014dc8:	1dfb      	adds	r3, r7, #7
 8014dca:	781a      	ldrb	r2, [r3, #0]
 8014dcc:	4906      	ldr	r1, [pc, #24]	; (8014de8 <USBPD_HW_IF_DisableRX+0x2c>)
 8014dce:	0013      	movs	r3, r2
 8014dd0:	011b      	lsls	r3, r3, #4
 8014dd2:	1a9b      	subs	r3, r3, r2
 8014dd4:	009b      	lsls	r3, r3, #2
 8014dd6:	585b      	ldr	r3, [r3, r1]
 8014dd8:	0018      	movs	r0, r3
 8014dda:	f7ff fb83 	bl	80144e4 <LL_UCPD_RxDisable>
}
 8014dde:	46c0      	nop			; (mov r8, r8)
 8014de0:	46bd      	mov	sp, r7
 8014de2:	b002      	add	sp, #8
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	46c0      	nop			; (mov r8, r8)
 8014de8:	200005a8 	.word	0x200005a8

08014dec <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8014dec:	b590      	push	{r4, r7, lr}
 8014dee:	b085      	sub	sp, #20
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	0002      	movs	r2, r0
 8014df4:	6039      	str	r1, [r7, #0]
 8014df6:	1dfb      	adds	r3, r7, #7
 8014df8:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8014dfa:	f000 fc65 	bl	80156c8 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8014dfe:	1dfb      	adds	r3, r7, #7
 8014e00:	781c      	ldrb	r4, [r3, #0]
 8014e02:	1dfb      	adds	r3, r7, #7
 8014e04:	781b      	ldrb	r3, [r3, #0]
 8014e06:	0018      	movs	r0, r3
 8014e08:	f7fe fd32 	bl	8013870 <USBPD_HW_Init_DMATxInstance>
 8014e0c:	0001      	movs	r1, r0
 8014e0e:	4aa6      	ldr	r2, [pc, #664]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014e10:	0023      	movs	r3, r4
 8014e12:	011b      	lsls	r3, r3, #4
 8014e14:	1b1b      	subs	r3, r3, r4
 8014e16:	009b      	lsls	r3, r3, #2
 8014e18:	18d3      	adds	r3, r2, r3
 8014e1a:	3304      	adds	r3, #4
 8014e1c:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8014e1e:	1dfb      	adds	r3, r7, #7
 8014e20:	781c      	ldrb	r4, [r3, #0]
 8014e22:	1dfb      	adds	r3, r7, #7
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	0018      	movs	r0, r3
 8014e28:	f7fe fcd2 	bl	80137d0 <USBPD_HW_Init_DMARxInstance>
 8014e2c:	0001      	movs	r1, r0
 8014e2e:	4a9e      	ldr	r2, [pc, #632]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014e30:	0023      	movs	r3, r4
 8014e32:	011b      	lsls	r3, r3, #4
 8014e34:	1b1b      	subs	r3, r3, r4
 8014e36:	009b      	lsls	r3, r3, #2
 8014e38:	18d3      	adds	r3, r2, r3
 8014e3a:	3308      	adds	r3, #8
 8014e3c:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8014e3e:	1dfb      	adds	r3, r7, #7
 8014e40:	781a      	ldrb	r2, [r3, #0]
 8014e42:	4999      	ldr	r1, [pc, #612]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014e44:	0013      	movs	r3, r2
 8014e46:	011b      	lsls	r3, r3, #4
 8014e48:	1a9b      	subs	r3, r3, r2
 8014e4a:	009b      	lsls	r3, r3, #2
 8014e4c:	585b      	ldr	r3, [r3, r1]
 8014e4e:	3330      	adds	r3, #48	; 0x30
 8014e50:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8014e52:	1dfb      	adds	r3, r7, #7
 8014e54:	781a      	ldrb	r2, [r3, #0]
 8014e56:	4994      	ldr	r1, [pc, #592]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014e58:	0013      	movs	r3, r2
 8014e5a:	011b      	lsls	r3, r3, #4
 8014e5c:	1a9b      	subs	r3, r3, r2
 8014e5e:	009b      	lsls	r3, r3, #2
 8014e60:	18cb      	adds	r3, r1, r3
 8014e62:	3308      	adds	r3, #8
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	68fa      	ldr	r2, [r7, #12]
 8014e68:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8014e6a:	1dfb      	adds	r3, r7, #7
 8014e6c:	781a      	ldrb	r2, [r3, #0]
 8014e6e:	498e      	ldr	r1, [pc, #568]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014e70:	0013      	movs	r3, r2
 8014e72:	011b      	lsls	r3, r3, #4
 8014e74:	1a9b      	subs	r3, r3, r2
 8014e76:	009b      	lsls	r3, r3, #2
 8014e78:	18cb      	adds	r3, r1, r3
 8014e7a:	3330      	adds	r3, #48	; 0x30
 8014e7c:	6818      	ldr	r0, [r3, #0]
 8014e7e:	1dfb      	adds	r3, r7, #7
 8014e80:	781a      	ldrb	r2, [r3, #0]
 8014e82:	4989      	ldr	r1, [pc, #548]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014e84:	0013      	movs	r3, r2
 8014e86:	011b      	lsls	r3, r3, #4
 8014e88:	1a9b      	subs	r3, r3, r2
 8014e8a:	009b      	lsls	r3, r3, #2
 8014e8c:	18cb      	adds	r3, r1, r3
 8014e8e:	3308      	adds	r3, #8
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	0002      	movs	r2, r0
 8014e94:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 8014e96:	1dfb      	adds	r3, r7, #7
 8014e98:	781a      	ldrb	r2, [r3, #0]
 8014e9a:	4983      	ldr	r1, [pc, #524]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014e9c:	0013      	movs	r3, r2
 8014e9e:	011b      	lsls	r3, r3, #4
 8014ea0:	1a9b      	subs	r3, r3, r2
 8014ea2:	009b      	lsls	r3, r3, #2
 8014ea4:	18cb      	adds	r3, r1, r3
 8014ea6:	3308      	adds	r3, #8
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	2284      	movs	r2, #132	; 0x84
 8014eac:	0052      	lsls	r2, r2, #1
 8014eae:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8014eb0:	1dfb      	adds	r3, r7, #7
 8014eb2:	781a      	ldrb	r2, [r3, #0]
 8014eb4:	497c      	ldr	r1, [pc, #496]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014eb6:	0013      	movs	r3, r2
 8014eb8:	011b      	lsls	r3, r3, #4
 8014eba:	1a9b      	subs	r3, r3, r2
 8014ebc:	009b      	lsls	r3, r3, #2
 8014ebe:	18cb      	adds	r3, r1, r3
 8014ec0:	3308      	adds	r3, #8
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	6819      	ldr	r1, [r3, #0]
 8014ec6:	1dfb      	adds	r3, r7, #7
 8014ec8:	781a      	ldrb	r2, [r3, #0]
 8014eca:	4877      	ldr	r0, [pc, #476]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014ecc:	0013      	movs	r3, r2
 8014ece:	011b      	lsls	r3, r3, #4
 8014ed0:	1a9b      	subs	r3, r3, r2
 8014ed2:	009b      	lsls	r3, r3, #2
 8014ed4:	18c3      	adds	r3, r0, r3
 8014ed6:	3308      	adds	r3, #8
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	2201      	movs	r2, #1
 8014edc:	430a      	orrs	r2, r1
 8014ede:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8014ee0:	1dfb      	adds	r3, r7, #7
 8014ee2:	781a      	ldrb	r2, [r3, #0]
 8014ee4:	4970      	ldr	r1, [pc, #448]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014ee6:	0013      	movs	r3, r2
 8014ee8:	011b      	lsls	r3, r3, #4
 8014eea:	1a9b      	subs	r3, r3, r2
 8014eec:	009b      	lsls	r3, r3, #2
 8014eee:	585b      	ldr	r3, [r3, r1]
 8014ef0:	3324      	adds	r3, #36	; 0x24
 8014ef2:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8014ef4:	1dfb      	adds	r3, r7, #7
 8014ef6:	781a      	ldrb	r2, [r3, #0]
 8014ef8:	496b      	ldr	r1, [pc, #428]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014efa:	0013      	movs	r3, r2
 8014efc:	011b      	lsls	r3, r3, #4
 8014efe:	1a9b      	subs	r3, r3, r2
 8014f00:	009b      	lsls	r3, r3, #2
 8014f02:	18cb      	adds	r3, r1, r3
 8014f04:	3304      	adds	r3, #4
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	68fa      	ldr	r2, [r7, #12]
 8014f0a:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8014f0c:	1dfb      	adds	r3, r7, #7
 8014f0e:	781a      	ldrb	r2, [r3, #0]
 8014f10:	4965      	ldr	r1, [pc, #404]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014f12:	0013      	movs	r3, r2
 8014f14:	011b      	lsls	r3, r3, #4
 8014f16:	1a9b      	subs	r3, r3, r2
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	585b      	ldr	r3, [r3, r1]
 8014f1c:	6919      	ldr	r1, [r3, #16]
 8014f1e:	1dfb      	adds	r3, r7, #7
 8014f20:	781a      	ldrb	r2, [r3, #0]
 8014f22:	4861      	ldr	r0, [pc, #388]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014f24:	0013      	movs	r3, r2
 8014f26:	011b      	lsls	r3, r3, #4
 8014f28:	1a9b      	subs	r3, r3, r2
 8014f2a:	009b      	lsls	r3, r3, #2
 8014f2c:	581b      	ldr	r3, [r3, r0]
 8014f2e:	4a5f      	ldr	r2, [pc, #380]	; (80150ac <HW_SignalAttachement+0x2c0>)
 8014f30:	430a      	orrs	r2, r1
 8014f32:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8014f34:	1dfb      	adds	r3, r7, #7
 8014f36:	781a      	ldrb	r2, [r3, #0]
 8014f38:	495b      	ldr	r1, [pc, #364]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014f3a:	0013      	movs	r3, r2
 8014f3c:	011b      	lsls	r3, r3, #4
 8014f3e:	1a9b      	subs	r3, r3, r2
 8014f40:	009b      	lsls	r3, r3, #2
 8014f42:	18cb      	adds	r3, r1, r3
 8014f44:	3334      	adds	r3, #52	; 0x34
 8014f46:	683a      	ldr	r2, [r7, #0]
 8014f48:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8014f4a:	1dfb      	adds	r3, r7, #7
 8014f4c:	781a      	ldrb	r2, [r3, #0]
 8014f4e:	4956      	ldr	r1, [pc, #344]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014f50:	0013      	movs	r3, r2
 8014f52:	011b      	lsls	r3, r3, #4
 8014f54:	1a9b      	subs	r3, r3, r2
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	5858      	ldr	r0, [r3, r1]
 8014f5a:	1dfb      	adds	r3, r7, #7
 8014f5c:	781a      	ldrb	r2, [r3, #0]
 8014f5e:	4952      	ldr	r1, [pc, #328]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014f60:	0013      	movs	r3, r2
 8014f62:	011b      	lsls	r3, r3, #4
 8014f64:	1a9b      	subs	r3, r3, r2
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	18cb      	adds	r3, r1, r3
 8014f6a:	3334      	adds	r3, #52	; 0x34
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d101      	bne.n	8014f76 <HW_SignalAttachement+0x18a>
 8014f72:	2300      	movs	r3, #0
 8014f74:	e000      	b.n	8014f78 <HW_SignalAttachement+0x18c>
 8014f76:	2340      	movs	r3, #64	; 0x40
 8014f78:	0019      	movs	r1, r3
 8014f7a:	f7ff fa93 	bl	80144a4 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8014f7e:	1dfb      	adds	r3, r7, #7
 8014f80:	781a      	ldrb	r2, [r3, #0]
 8014f82:	4949      	ldr	r1, [pc, #292]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014f84:	0013      	movs	r3, r2
 8014f86:	011b      	lsls	r3, r3, #4
 8014f88:	1a9b      	subs	r3, r3, r2
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	18cb      	adds	r3, r1, r3
 8014f8e:	330c      	adds	r3, #12
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	7a1b      	ldrb	r3, [r3, #8]
 8014f94:	2202      	movs	r2, #2
 8014f96:	4013      	ands	r3, r2
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d034      	beq.n	8015008 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8014f9e:	1dfb      	adds	r3, r7, #7
 8014fa0:	781a      	ldrb	r2, [r3, #0]
 8014fa2:	4941      	ldr	r1, [pc, #260]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014fa4:	0013      	movs	r3, r2
 8014fa6:	011b      	lsls	r3, r3, #4
 8014fa8:	1a9b      	subs	r3, r3, r2
 8014faa:	009b      	lsls	r3, r3, #2
 8014fac:	18cb      	adds	r3, r1, r3
 8014fae:	3334      	adds	r3, #52	; 0x34
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	d101      	bne.n	8014fba <HW_SignalAttachement+0x1ce>
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	e000      	b.n	8014fbc <HW_SignalAttachement+0x1d0>
 8014fba:	2302      	movs	r3, #2
 8014fbc:	1dfa      	adds	r2, r7, #7
 8014fbe:	7812      	ldrb	r2, [r2, #0]
 8014fc0:	0019      	movs	r1, r3
 8014fc2:	0010      	movs	r0, r2
 8014fc4:	f7fe fca4 	bl	8013910 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8014fc8:	1dfb      	adds	r3, r7, #7
 8014fca:	781a      	ldrb	r2, [r3, #0]
 8014fcc:	4936      	ldr	r1, [pc, #216]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014fce:	0013      	movs	r3, r2
 8014fd0:	011b      	lsls	r3, r3, #4
 8014fd2:	1a9b      	subs	r3, r3, r2
 8014fd4:	009b      	lsls	r3, r3, #2
 8014fd6:	585b      	ldr	r3, [r3, r1]
 8014fd8:	0018      	movs	r0, r3
 8014fda:	f7ff f9fb 	bl	80143d4 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8014fde:	1dfb      	adds	r3, r7, #7
 8014fe0:	781a      	ldrb	r2, [r3, #0]
 8014fe2:	4931      	ldr	r1, [pc, #196]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014fe4:	0013      	movs	r3, r2
 8014fe6:	011b      	lsls	r3, r3, #4
 8014fe8:	1a9b      	subs	r3, r3, r2
 8014fea:	009b      	lsls	r3, r3, #2
 8014fec:	585b      	ldr	r3, [r3, r1]
 8014fee:	6919      	ldr	r1, [r3, #16]
 8014ff0:	1dfb      	adds	r3, r7, #7
 8014ff2:	781a      	ldrb	r2, [r3, #0]
 8014ff4:	482c      	ldr	r0, [pc, #176]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8014ff6:	0013      	movs	r3, r2
 8014ff8:	011b      	lsls	r3, r3, #4
 8014ffa:	1a9b      	subs	r3, r3, r2
 8014ffc:	009b      	lsls	r3, r3, #2
 8014ffe:	581b      	ldr	r3, [r3, r0]
 8015000:	2280      	movs	r2, #128	; 0x80
 8015002:	0352      	lsls	r2, r2, #13
 8015004:	430a      	orrs	r2, r1
 8015006:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8015008:	1dfb      	adds	r3, r7, #7
 801500a:	781a      	ldrb	r2, [r3, #0]
 801500c:	4926      	ldr	r1, [pc, #152]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 801500e:	0013      	movs	r3, r2
 8015010:	011b      	lsls	r3, r3, #4
 8015012:	1a9b      	subs	r3, r3, r2
 8015014:	009b      	lsls	r3, r3, #2
 8015016:	18cb      	adds	r3, r1, r3
 8015018:	3334      	adds	r3, #52	; 0x34
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2b01      	cmp	r3, #1
 801501e:	d10e      	bne.n	801503e <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8015020:	1dfb      	adds	r3, r7, #7
 8015022:	781a      	ldrb	r2, [r3, #0]
 8015024:	4920      	ldr	r1, [pc, #128]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8015026:	0013      	movs	r3, r2
 8015028:	011b      	lsls	r3, r3, #4
 801502a:	1a9b      	subs	r3, r3, r2
 801502c:	009b      	lsls	r3, r3, #2
 801502e:	585b      	ldr	r3, [r3, r1]
 8015030:	2280      	movs	r2, #128	; 0x80
 8015032:	00d2      	lsls	r2, r2, #3
 8015034:	0011      	movs	r1, r2
 8015036:	0018      	movs	r0, r3
 8015038:	f7ff f9ec 	bl	8014414 <LL_UCPD_SetccEnable>
 801503c:	e00d      	b.n	801505a <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 801503e:	1dfb      	adds	r3, r7, #7
 8015040:	781a      	ldrb	r2, [r3, #0]
 8015042:	4919      	ldr	r1, [pc, #100]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8015044:	0013      	movs	r3, r2
 8015046:	011b      	lsls	r3, r3, #4
 8015048:	1a9b      	subs	r3, r3, r2
 801504a:	009b      	lsls	r3, r3, #2
 801504c:	585b      	ldr	r3, [r3, r1]
 801504e:	2280      	movs	r2, #128	; 0x80
 8015050:	0112      	lsls	r2, r2, #4
 8015052:	0011      	movs	r1, r2
 8015054:	0018      	movs	r0, r3
 8015056:	f7ff f9dd 	bl	8014414 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 801505a:	1dfb      	adds	r3, r7, #7
 801505c:	781a      	ldrb	r2, [r3, #0]
 801505e:	4912      	ldr	r1, [pc, #72]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8015060:	0013      	movs	r3, r2
 8015062:	011b      	lsls	r3, r3, #4
 8015064:	1a9b      	subs	r3, r3, r2
 8015066:	009b      	lsls	r3, r3, #2
 8015068:	585b      	ldr	r3, [r3, r1]
 801506a:	2100      	movs	r1, #0
 801506c:	0018      	movs	r0, r3
 801506e:	f7ff fa48 	bl	8014502 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8015072:	1dfb      	adds	r3, r7, #7
 8015074:	781a      	ldrb	r2, [r3, #0]
 8015076:	490c      	ldr	r1, [pc, #48]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 8015078:	0013      	movs	r3, r2
 801507a:	011b      	lsls	r3, r3, #4
 801507c:	1a9b      	subs	r3, r3, r2
 801507e:	009b      	lsls	r3, r3, #2
 8015080:	585b      	ldr	r3, [r3, r1]
 8015082:	0018      	movs	r0, r3
 8015084:	f7ff fa7d 	bl	8014582 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8015088:	1dfb      	adds	r3, r7, #7
 801508a:	781a      	ldrb	r2, [r3, #0]
 801508c:	4906      	ldr	r1, [pc, #24]	; (80150a8 <HW_SignalAttachement+0x2bc>)
 801508e:	0013      	movs	r3, r2
 8015090:	011b      	lsls	r3, r3, #4
 8015092:	1a9b      	subs	r3, r3, r2
 8015094:	009b      	lsls	r3, r3, #2
 8015096:	585b      	ldr	r3, [r3, r1]
 8015098:	0018      	movs	r0, r3
 801509a:	f7ff fa91 	bl	80145c0 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 801509e:	46c0      	nop			; (mov r8, r8)
 80150a0:	46bd      	mov	sp, r7
 80150a2:	b005      	add	sp, #20
 80150a4:	bd90      	pop	{r4, r7, pc}
 80150a6:	46c0      	nop			; (mov r8, r8)
 80150a8:	200005a8 	.word	0x200005a8
 80150ac:	00001e7e 	.word	0x00001e7e

080150b0 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	0002      	movs	r2, r0
 80150b8:	1dfb      	adds	r3, r7, #7
 80150ba:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 80150bc:	1dfb      	adds	r3, r7, #7
 80150be:	781a      	ldrb	r2, [r3, #0]
 80150c0:	4941      	ldr	r1, [pc, #260]	; (80151c8 <HW_SignalDetachment+0x118>)
 80150c2:	0013      	movs	r3, r2
 80150c4:	011b      	lsls	r3, r3, #4
 80150c6:	1a9b      	subs	r3, r3, r2
 80150c8:	009b      	lsls	r3, r3, #2
 80150ca:	585b      	ldr	r3, [r3, r1]
 80150cc:	0018      	movs	r0, r3
 80150ce:	f7ff fa67 	bl	80145a0 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 80150d2:	1dfb      	adds	r3, r7, #7
 80150d4:	781a      	ldrb	r2, [r3, #0]
 80150d6:	493c      	ldr	r1, [pc, #240]	; (80151c8 <HW_SignalDetachment+0x118>)
 80150d8:	0013      	movs	r3, r2
 80150da:	011b      	lsls	r3, r3, #4
 80150dc:	1a9b      	subs	r3, r3, r2
 80150de:	009b      	lsls	r3, r3, #2
 80150e0:	585b      	ldr	r3, [r3, r1]
 80150e2:	0018      	movs	r0, r3
 80150e4:	f7ff fa7c 	bl	80145e0 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80150e8:	1dfb      	adds	r3, r7, #7
 80150ea:	781a      	ldrb	r2, [r3, #0]
 80150ec:	4936      	ldr	r1, [pc, #216]	; (80151c8 <HW_SignalDetachment+0x118>)
 80150ee:	0013      	movs	r3, r2
 80150f0:	011b      	lsls	r3, r3, #4
 80150f2:	1a9b      	subs	r3, r3, r2
 80150f4:	009b      	lsls	r3, r3, #2
 80150f6:	585b      	ldr	r3, [r3, r1]
 80150f8:	0018      	movs	r0, r3
 80150fa:	f7ff f9f3 	bl	80144e4 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 80150fe:	1dfb      	adds	r3, r7, #7
 8015100:	781a      	ldrb	r2, [r3, #0]
 8015102:	4931      	ldr	r1, [pc, #196]	; (80151c8 <HW_SignalDetachment+0x118>)
 8015104:	0013      	movs	r3, r2
 8015106:	011b      	lsls	r3, r3, #4
 8015108:	1a9b      	subs	r3, r3, r2
 801510a:	009b      	lsls	r3, r3, #2
 801510c:	585b      	ldr	r3, [r3, r1]
 801510e:	22c0      	movs	r2, #192	; 0xc0
 8015110:	0212      	lsls	r2, r2, #8
 8015112:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8015114:	1dfb      	adds	r3, r7, #7
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	0018      	movs	r0, r3
 801511a:	f7fe fbef 	bl	80138fc <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 801511e:	1dfb      	adds	r3, r7, #7
 8015120:	781b      	ldrb	r3, [r3, #0]
 8015122:	0018      	movs	r0, r3
 8015124:	f7fe fb9a 	bl	801385c <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8015128:	1dfb      	adds	r3, r7, #7
 801512a:	781a      	ldrb	r2, [r3, #0]
 801512c:	4926      	ldr	r1, [pc, #152]	; (80151c8 <HW_SignalDetachment+0x118>)
 801512e:	0013      	movs	r3, r2
 8015130:	011b      	lsls	r3, r3, #4
 8015132:	1a9b      	subs	r3, r3, r2
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	585b      	ldr	r3, [r3, r1]
 8015138:	22c0      	movs	r2, #192	; 0xc0
 801513a:	0112      	lsls	r2, r2, #4
 801513c:	0011      	movs	r1, r2
 801513e:	0018      	movs	r0, r3
 8015140:	f7ff f968 	bl	8014414 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8015144:	1dfb      	adds	r3, r7, #7
 8015146:	781a      	ldrb	r2, [r3, #0]
 8015148:	491f      	ldr	r1, [pc, #124]	; (80151c8 <HW_SignalDetachment+0x118>)
 801514a:	0013      	movs	r3, r2
 801514c:	011b      	lsls	r3, r3, #4
 801514e:	1a9b      	subs	r3, r3, r2
 8015150:	009b      	lsls	r3, r3, #2
 8015152:	18cb      	adds	r3, r1, r3
 8015154:	3310      	adds	r3, #16
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	781b      	ldrb	r3, [r3, #0]
 801515a:	2204      	movs	r2, #4
 801515c:	4013      	ands	r3, r2
 801515e:	b2db      	uxtb	r3, r3
 8015160:	2b00      	cmp	r3, #0
 8015162:	d104      	bne.n	801516e <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8015164:	1dfb      	adds	r3, r7, #7
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	0018      	movs	r0, r3
 801516a:	f007 fa69 	bl	801c640 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801516e:	1dfb      	adds	r3, r7, #7
 8015170:	781a      	ldrb	r2, [r3, #0]
 8015172:	4915      	ldr	r1, [pc, #84]	; (80151c8 <HW_SignalDetachment+0x118>)
 8015174:	0013      	movs	r3, r2
 8015176:	011b      	lsls	r3, r3, #4
 8015178:	1a9b      	subs	r3, r3, r2
 801517a:	009b      	lsls	r3, r3, #2
 801517c:	18cb      	adds	r3, r1, r3
 801517e:	330c      	adds	r3, #12
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	7a1b      	ldrb	r3, [r3, #8]
 8015184:	2202      	movs	r2, #2
 8015186:	4013      	ands	r3, r2
 8015188:	b2db      	uxtb	r3, r3
 801518a:	2b00      	cmp	r3, #0
 801518c:	d00a      	beq.n	80151a4 <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 801518e:	1dfb      	adds	r3, r7, #7
 8015190:	781a      	ldrb	r2, [r3, #0]
 8015192:	490d      	ldr	r1, [pc, #52]	; (80151c8 <HW_SignalDetachment+0x118>)
 8015194:	0013      	movs	r3, r2
 8015196:	011b      	lsls	r3, r3, #4
 8015198:	1a9b      	subs	r3, r3, r2
 801519a:	009b      	lsls	r3, r3, #2
 801519c:	585b      	ldr	r3, [r3, r1]
 801519e:	0018      	movs	r0, r3
 80151a0:	f7ff f928 	bl	80143f4 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80151a4:	1dfb      	adds	r3, r7, #7
 80151a6:	781a      	ldrb	r2, [r3, #0]
 80151a8:	4907      	ldr	r1, [pc, #28]	; (80151c8 <HW_SignalDetachment+0x118>)
 80151aa:	0013      	movs	r3, r2
 80151ac:	011b      	lsls	r3, r3, #4
 80151ae:	1a9b      	subs	r3, r3, r2
 80151b0:	009b      	lsls	r3, r3, #2
 80151b2:	18cb      	adds	r3, r1, r3
 80151b4:	3334      	adds	r3, #52	; 0x34
 80151b6:	2200      	movs	r2, #0
 80151b8:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80151ba:	f000 fb25 	bl	8015808 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80151be:	46c0      	nop			; (mov r8, r8)
 80151c0:	46bd      	mov	sp, r7
 80151c2:	b002      	add	sp, #8
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	46c0      	nop			; (mov r8, r8)
 80151c8:	200005a8 	.word	0x200005a8

080151cc <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	0002      	movs	r2, r0
 80151d4:	1dfb      	adds	r3, r7, #7
 80151d6:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80151d8:	1dfb      	adds	r3, r7, #7
 80151da:	781a      	ldrb	r2, [r3, #0]
 80151dc:	4907      	ldr	r1, [pc, #28]	; (80151fc <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 80151de:	0013      	movs	r3, r2
 80151e0:	011b      	lsls	r3, r3, #4
 80151e2:	1a9b      	subs	r3, r3, r2
 80151e4:	009b      	lsls	r3, r3, #2
 80151e6:	585b      	ldr	r3, [r3, r1]
 80151e8:	2280      	movs	r2, #128	; 0x80
 80151ea:	0052      	lsls	r2, r2, #1
 80151ec:	0011      	movs	r1, r2
 80151ee:	0018      	movs	r0, r3
 80151f0:	f7ff f944 	bl	801447c <LL_UCPD_SetRpResistor>
}
 80151f4:	46c0      	nop			; (mov r8, r8)
 80151f6:	46bd      	mov	sp, r7
 80151f8:	b002      	add	sp, #8
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	200005a8 	.word	0x200005a8

08015200 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b082      	sub	sp, #8
 8015204:	af00      	add	r7, sp, #0
 8015206:	0002      	movs	r2, r0
 8015208:	1dfb      	adds	r3, r7, #7
 801520a:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 801520c:	1dfb      	adds	r3, r7, #7
 801520e:	781a      	ldrb	r2, [r3, #0]
 8015210:	4907      	ldr	r1, [pc, #28]	; (8015230 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 8015212:	0013      	movs	r3, r2
 8015214:	011b      	lsls	r3, r3, #4
 8015216:	1a9b      	subs	r3, r3, r2
 8015218:	009b      	lsls	r3, r3, #2
 801521a:	585b      	ldr	r3, [r3, r1]
 801521c:	22c0      	movs	r2, #192	; 0xc0
 801521e:	0052      	lsls	r2, r2, #1
 8015220:	0011      	movs	r1, r2
 8015222:	0018      	movs	r0, r3
 8015224:	f7ff f92a 	bl	801447c <LL_UCPD_SetRpResistor>
}
 8015228:	46c0      	nop			; (mov r8, r8)
 801522a:	46bd      	mov	sp, r7
 801522c:	b002      	add	sp, #8
 801522e:	bd80      	pop	{r7, pc}
 8015230:	200005a8 	.word	0x200005a8

08015234 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	0002      	movs	r2, r0
 801523c:	1dfb      	adds	r3, r7, #7
 801523e:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8015240:	1dfb      	adds	r3, r7, #7
 8015242:	781a      	ldrb	r2, [r3, #0]
 8015244:	491c      	ldr	r1, [pc, #112]	; (80152b8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8015246:	0013      	movs	r3, r2
 8015248:	011b      	lsls	r3, r3, #4
 801524a:	1a9b      	subs	r3, r3, r2
 801524c:	009b      	lsls	r3, r3, #2
 801524e:	18cb      	adds	r3, r1, r3
 8015250:	3334      	adds	r3, #52	; 0x34
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	2b01      	cmp	r3, #1
 8015256:	d002      	beq.n	801525e <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 8015258:	2b02      	cmp	r3, #2
 801525a:	d012      	beq.n	8015282 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 801525c:	e026      	b.n	80152ac <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 801525e:	1dfb      	adds	r3, r7, #7
 8015260:	781a      	ldrb	r2, [r3, #0]
 8015262:	4915      	ldr	r1, [pc, #84]	; (80152b8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8015264:	0013      	movs	r3, r2
 8015266:	011b      	lsls	r3, r3, #4
 8015268:	1a9b      	subs	r3, r3, r2
 801526a:	009b      	lsls	r3, r3, #2
 801526c:	585b      	ldr	r3, [r3, r1]
 801526e:	695a      	ldr	r2, [r3, #20]
 8015270:	23c0      	movs	r3, #192	; 0xc0
 8015272:	029b      	lsls	r3, r3, #10
 8015274:	401a      	ands	r2, r3
 8015276:	23c0      	movs	r3, #192	; 0xc0
 8015278:	029b      	lsls	r3, r3, #10
 801527a:	429a      	cmp	r2, r3
 801527c:	d113      	bne.n	80152a6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 801527e:	2301      	movs	r3, #1
 8015280:	e015      	b.n	80152ae <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8015282:	1dfb      	adds	r3, r7, #7
 8015284:	781a      	ldrb	r2, [r3, #0]
 8015286:	490c      	ldr	r1, [pc, #48]	; (80152b8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8015288:	0013      	movs	r3, r2
 801528a:	011b      	lsls	r3, r3, #4
 801528c:	1a9b      	subs	r3, r3, r2
 801528e:	009b      	lsls	r3, r3, #2
 8015290:	585b      	ldr	r3, [r3, r1]
 8015292:	695a      	ldr	r2, [r3, #20]
 8015294:	23c0      	movs	r3, #192	; 0xc0
 8015296:	031b      	lsls	r3, r3, #12
 8015298:	401a      	ands	r2, r3
 801529a:	23c0      	movs	r3, #192	; 0xc0
 801529c:	031b      	lsls	r3, r3, #12
 801529e:	429a      	cmp	r2, r3
 80152a0:	d103      	bne.n	80152aa <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 80152a2:	2301      	movs	r3, #1
 80152a4:	e003      	b.n	80152ae <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 80152a6:	46c0      	nop			; (mov r8, r8)
 80152a8:	e000      	b.n	80152ac <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 80152aa:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 80152ac:	2300      	movs	r3, #0
}
 80152ae:	0018      	movs	r0, r3
 80152b0:	46bd      	mov	sp, r7
 80152b2:	b002      	add	sp, #8
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	46c0      	nop			; (mov r8, r8)
 80152b8:	200005a8 	.word	0x200005a8

080152bc <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	0002      	movs	r2, r0
 80152c4:	1dfb      	adds	r3, r7, #7
 80152c6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 80152c8:	1dfb      	adds	r3, r7, #7
 80152ca:	781a      	ldrb	r2, [r3, #0]
 80152cc:	4906      	ldr	r1, [pc, #24]	; (80152e8 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 80152ce:	0013      	movs	r3, r2
 80152d0:	011b      	lsls	r3, r3, #4
 80152d2:	1a9b      	subs	r3, r3, r2
 80152d4:	009b      	lsls	r3, r3, #2
 80152d6:	585b      	ldr	r3, [r3, r1]
 80152d8:	0018      	movs	r0, r3
 80152da:	f7ff f86c 	bl	80143b6 <LL_UCPD_SignalFRSTX>
}
 80152de:	46c0      	nop			; (mov r8, r8)
 80152e0:	46bd      	mov	sp, r7
 80152e2:	b002      	add	sp, #8
 80152e4:	bd80      	pop	{r7, pc}
 80152e6:	46c0      	nop			; (mov r8, r8)
 80152e8:	200005a8 	.word	0x200005a8

080152ec <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b084      	sub	sp, #16
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	0002      	movs	r2, r0
 80152f4:	1dfb      	adds	r3, r7, #7
 80152f6:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 80152f8:	1dfb      	adds	r3, r7, #7
 80152fa:	781b      	ldrb	r3, [r3, #0]
 80152fc:	220c      	movs	r2, #12
 80152fe:	18ba      	adds	r2, r7, r2
 8015300:	0011      	movs	r1, r2
 8015302:	0018      	movs	r0, r3
 8015304:	f007 f9ba 	bl	801c67c <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	b29b      	uxth	r3, r3
}
 801530c:	0018      	movs	r0, r3
 801530e:	46bd      	mov	sp, r7
 8015310:	b004      	add	sp, #16
 8015312:	bd80      	pop	{r7, pc}

08015314 <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b084      	sub	sp, #16
 8015318:	af00      	add	r7, sp, #0
 801531a:	0002      	movs	r2, r0
 801531c:	1dfb      	adds	r3, r7, #7
 801531e:	701a      	strb	r2, [r3, #0]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 8015320:	1dfb      	adds	r3, r7, #7
 8015322:	781b      	ldrb	r3, [r3, #0]
 8015324:	220c      	movs	r2, #12
 8015326:	18ba      	adds	r2, r7, r2
 8015328:	0011      	movs	r1, r2
 801532a:	0018      	movs	r0, r3
 801532c:	f007 f9e2 	bl	801c6f4 <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	b21b      	sxth	r3, r3
}
 8015334:	0018      	movs	r0, r3
 8015336:	46bd      	mov	sp, r7
 8015338:	b004      	add	sp, #16
 801533a:	bd80      	pop	{r7, pc}

0801533c <LL_APB2_GRP1_EnableClock>:
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b084      	sub	sp, #16
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8015344:	4b07      	ldr	r3, [pc, #28]	; (8015364 <LL_APB2_GRP1_EnableClock+0x28>)
 8015346:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8015348:	4b06      	ldr	r3, [pc, #24]	; (8015364 <LL_APB2_GRP1_EnableClock+0x28>)
 801534a:	687a      	ldr	r2, [r7, #4]
 801534c:	430a      	orrs	r2, r1
 801534e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8015350:	4b04      	ldr	r3, [pc, #16]	; (8015364 <LL_APB2_GRP1_EnableClock+0x28>)
 8015352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015354:	687a      	ldr	r2, [r7, #4]
 8015356:	4013      	ands	r3, r2
 8015358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801535a:	68fb      	ldr	r3, [r7, #12]
}
 801535c:	46c0      	nop			; (mov r8, r8)
 801535e:	46bd      	mov	sp, r7
 8015360:	b004      	add	sp, #16
 8015362:	bd80      	pop	{r7, pc}
 8015364:	40021000 	.word	0x40021000

08015368 <LL_APB2_GRP1_DisableClock>:
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 8015370:	4b05      	ldr	r3, [pc, #20]	; (8015388 <LL_APB2_GRP1_DisableClock+0x20>)
 8015372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	43d9      	mvns	r1, r3
 8015378:	4b03      	ldr	r3, [pc, #12]	; (8015388 <LL_APB2_GRP1_DisableClock+0x20>)
 801537a:	400a      	ands	r2, r1
 801537c:	641a      	str	r2, [r3, #64]	; 0x40
}
 801537e:	46c0      	nop			; (mov r8, r8)
 8015380:	46bd      	mov	sp, r7
 8015382:	b002      	add	sp, #8
 8015384:	bd80      	pop	{r7, pc}
 8015386:	46c0      	nop			; (mov r8, r8)
 8015388:	40021000 	.word	0x40021000

0801538c <LL_TIM_EnableCounter>:
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	2201      	movs	r2, #1
 801539a:	431a      	orrs	r2, r3
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	601a      	str	r2, [r3, #0]
}
 80153a0:	46c0      	nop			; (mov r8, r8)
 80153a2:	46bd      	mov	sp, r7
 80153a4:	b002      	add	sp, #8
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <LL_TIM_SetCounterMode>:
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2270      	movs	r2, #112	; 0x70
 80153b8:	4393      	bics	r3, r2
 80153ba:	001a      	movs	r2, r3
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	431a      	orrs	r2, r3
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	601a      	str	r2, [r3, #0]
}
 80153c4:	46c0      	nop			; (mov r8, r8)
 80153c6:	46bd      	mov	sp, r7
 80153c8:	b002      	add	sp, #8
 80153ca:	bd80      	pop	{r7, pc}

080153cc <LL_TIM_SetPrescaler>:
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
 80153d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	683a      	ldr	r2, [r7, #0]
 80153da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80153dc:	46c0      	nop			; (mov r8, r8)
 80153de:	46bd      	mov	sp, r7
 80153e0:	b002      	add	sp, #8
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <LL_TIM_GetPrescaler>:
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80153f0:	0018      	movs	r0, r3
 80153f2:	46bd      	mov	sp, r7
 80153f4:	b002      	add	sp, #8
 80153f6:	bd80      	pop	{r7, pc}

080153f8 <LL_TIM_SetAutoReload>:
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	683a      	ldr	r2, [r7, #0]
 8015406:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8015408:	46c0      	nop			; (mov r8, r8)
 801540a:	46bd      	mov	sp, r7
 801540c:	b002      	add	sp, #8
 801540e:	bd80      	pop	{r7, pc}

08015410 <LL_TIM_OC_SetMode>:
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b086      	sub	sp, #24
 8015414:	af00      	add	r7, sp, #0
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	60b9      	str	r1, [r7, #8]
 801541a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 801541c:	68bb      	ldr	r3, [r7, #8]
 801541e:	2b01      	cmp	r3, #1
 8015420:	d02c      	beq.n	801547c <LL_TIM_OC_SetMode+0x6c>
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	2b04      	cmp	r3, #4
 8015426:	d027      	beq.n	8015478 <LL_TIM_OC_SetMode+0x68>
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	2b10      	cmp	r3, #16
 801542c:	d022      	beq.n	8015474 <LL_TIM_OC_SetMode+0x64>
 801542e:	68bb      	ldr	r3, [r7, #8]
 8015430:	2b40      	cmp	r3, #64	; 0x40
 8015432:	d01d      	beq.n	8015470 <LL_TIM_OC_SetMode+0x60>
 8015434:	68ba      	ldr	r2, [r7, #8]
 8015436:	2380      	movs	r3, #128	; 0x80
 8015438:	005b      	lsls	r3, r3, #1
 801543a:	429a      	cmp	r2, r3
 801543c:	d016      	beq.n	801546c <LL_TIM_OC_SetMode+0x5c>
 801543e:	68ba      	ldr	r2, [r7, #8]
 8015440:	2380      	movs	r3, #128	; 0x80
 8015442:	00db      	lsls	r3, r3, #3
 8015444:	429a      	cmp	r2, r3
 8015446:	d00f      	beq.n	8015468 <LL_TIM_OC_SetMode+0x58>
 8015448:	68ba      	ldr	r2, [r7, #8]
 801544a:	2380      	movs	r3, #128	; 0x80
 801544c:	015b      	lsls	r3, r3, #5
 801544e:	429a      	cmp	r2, r3
 8015450:	d008      	beq.n	8015464 <LL_TIM_OC_SetMode+0x54>
 8015452:	68ba      	ldr	r2, [r7, #8]
 8015454:	2380      	movs	r3, #128	; 0x80
 8015456:	025b      	lsls	r3, r3, #9
 8015458:	429a      	cmp	r2, r3
 801545a:	d101      	bne.n	8015460 <LL_TIM_OC_SetMode+0x50>
 801545c:	2307      	movs	r3, #7
 801545e:	e00e      	b.n	801547e <LL_TIM_OC_SetMode+0x6e>
 8015460:	2308      	movs	r3, #8
 8015462:	e00c      	b.n	801547e <LL_TIM_OC_SetMode+0x6e>
 8015464:	2306      	movs	r3, #6
 8015466:	e00a      	b.n	801547e <LL_TIM_OC_SetMode+0x6e>
 8015468:	2305      	movs	r3, #5
 801546a:	e008      	b.n	801547e <LL_TIM_OC_SetMode+0x6e>
 801546c:	2304      	movs	r3, #4
 801546e:	e006      	b.n	801547e <LL_TIM_OC_SetMode+0x6e>
 8015470:	2303      	movs	r3, #3
 8015472:	e004      	b.n	801547e <LL_TIM_OC_SetMode+0x6e>
 8015474:	2302      	movs	r3, #2
 8015476:	e002      	b.n	801547e <LL_TIM_OC_SetMode+0x6e>
 8015478:	2301      	movs	r3, #1
 801547a:	e000      	b.n	801547e <LL_TIM_OC_SetMode+0x6e>
 801547c:	2300      	movs	r3, #0
 801547e:	2017      	movs	r0, #23
 8015480:	183a      	adds	r2, r7, r0
 8015482:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	3318      	adds	r3, #24
 8015488:	0019      	movs	r1, r3
 801548a:	183b      	adds	r3, r7, r0
 801548c:	781b      	ldrb	r3, [r3, #0]
 801548e:	4a0e      	ldr	r2, [pc, #56]	; (80154c8 <LL_TIM_OC_SetMode+0xb8>)
 8015490:	5cd3      	ldrb	r3, [r2, r3]
 8015492:	18cb      	adds	r3, r1, r3
 8015494:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	183a      	adds	r2, r7, r0
 801549c:	7812      	ldrb	r2, [r2, #0]
 801549e:	490b      	ldr	r1, [pc, #44]	; (80154cc <LL_TIM_OC_SetMode+0xbc>)
 80154a0:	5c8a      	ldrb	r2, [r1, r2]
 80154a2:	0011      	movs	r1, r2
 80154a4:	4a0a      	ldr	r2, [pc, #40]	; (80154d0 <LL_TIM_OC_SetMode+0xc0>)
 80154a6:	408a      	lsls	r2, r1
 80154a8:	43d2      	mvns	r2, r2
 80154aa:	401a      	ands	r2, r3
 80154ac:	183b      	adds	r3, r7, r0
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	4906      	ldr	r1, [pc, #24]	; (80154cc <LL_TIM_OC_SetMode+0xbc>)
 80154b2:	5ccb      	ldrb	r3, [r1, r3]
 80154b4:	0019      	movs	r1, r3
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	408b      	lsls	r3, r1
 80154ba:	431a      	orrs	r2, r3
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	601a      	str	r2, [r3, #0]
}
 80154c0:	46c0      	nop			; (mov r8, r8)
 80154c2:	46bd      	mov	sp, r7
 80154c4:	b006      	add	sp, #24
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	08025088 	.word	0x08025088
 80154cc:	08025094 	.word	0x08025094
 80154d0:	00010073 	.word	0x00010073

080154d4 <LL_TIM_OC_SetPolarity>:
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b086      	sub	sp, #24
 80154d8:	af00      	add	r7, sp, #0
 80154da:	60f8      	str	r0, [r7, #12]
 80154dc:	60b9      	str	r1, [r7, #8]
 80154de:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	d02c      	beq.n	8015540 <LL_TIM_OC_SetPolarity+0x6c>
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	2b04      	cmp	r3, #4
 80154ea:	d027      	beq.n	801553c <LL_TIM_OC_SetPolarity+0x68>
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	2b10      	cmp	r3, #16
 80154f0:	d022      	beq.n	8015538 <LL_TIM_OC_SetPolarity+0x64>
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	2b40      	cmp	r3, #64	; 0x40
 80154f6:	d01d      	beq.n	8015534 <LL_TIM_OC_SetPolarity+0x60>
 80154f8:	68ba      	ldr	r2, [r7, #8]
 80154fa:	2380      	movs	r3, #128	; 0x80
 80154fc:	005b      	lsls	r3, r3, #1
 80154fe:	429a      	cmp	r2, r3
 8015500:	d016      	beq.n	8015530 <LL_TIM_OC_SetPolarity+0x5c>
 8015502:	68ba      	ldr	r2, [r7, #8]
 8015504:	2380      	movs	r3, #128	; 0x80
 8015506:	00db      	lsls	r3, r3, #3
 8015508:	429a      	cmp	r2, r3
 801550a:	d00f      	beq.n	801552c <LL_TIM_OC_SetPolarity+0x58>
 801550c:	68ba      	ldr	r2, [r7, #8]
 801550e:	2380      	movs	r3, #128	; 0x80
 8015510:	015b      	lsls	r3, r3, #5
 8015512:	429a      	cmp	r2, r3
 8015514:	d008      	beq.n	8015528 <LL_TIM_OC_SetPolarity+0x54>
 8015516:	68ba      	ldr	r2, [r7, #8]
 8015518:	2380      	movs	r3, #128	; 0x80
 801551a:	025b      	lsls	r3, r3, #9
 801551c:	429a      	cmp	r2, r3
 801551e:	d101      	bne.n	8015524 <LL_TIM_OC_SetPolarity+0x50>
 8015520:	2307      	movs	r3, #7
 8015522:	e00e      	b.n	8015542 <LL_TIM_OC_SetPolarity+0x6e>
 8015524:	2308      	movs	r3, #8
 8015526:	e00c      	b.n	8015542 <LL_TIM_OC_SetPolarity+0x6e>
 8015528:	2306      	movs	r3, #6
 801552a:	e00a      	b.n	8015542 <LL_TIM_OC_SetPolarity+0x6e>
 801552c:	2305      	movs	r3, #5
 801552e:	e008      	b.n	8015542 <LL_TIM_OC_SetPolarity+0x6e>
 8015530:	2304      	movs	r3, #4
 8015532:	e006      	b.n	8015542 <LL_TIM_OC_SetPolarity+0x6e>
 8015534:	2303      	movs	r3, #3
 8015536:	e004      	b.n	8015542 <LL_TIM_OC_SetPolarity+0x6e>
 8015538:	2302      	movs	r3, #2
 801553a:	e002      	b.n	8015542 <LL_TIM_OC_SetPolarity+0x6e>
 801553c:	2301      	movs	r3, #1
 801553e:	e000      	b.n	8015542 <LL_TIM_OC_SetPolarity+0x6e>
 8015540:	2300      	movs	r3, #0
 8015542:	2017      	movs	r0, #23
 8015544:	183a      	adds	r2, r7, r0
 8015546:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	6a1b      	ldr	r3, [r3, #32]
 801554c:	183a      	adds	r2, r7, r0
 801554e:	7812      	ldrb	r2, [r2, #0]
 8015550:	490a      	ldr	r1, [pc, #40]	; (801557c <LL_TIM_OC_SetPolarity+0xa8>)
 8015552:	5c8a      	ldrb	r2, [r1, r2]
 8015554:	0011      	movs	r1, r2
 8015556:	2202      	movs	r2, #2
 8015558:	408a      	lsls	r2, r1
 801555a:	43d2      	mvns	r2, r2
 801555c:	401a      	ands	r2, r3
 801555e:	183b      	adds	r3, r7, r0
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	4906      	ldr	r1, [pc, #24]	; (801557c <LL_TIM_OC_SetPolarity+0xa8>)
 8015564:	5ccb      	ldrb	r3, [r1, r3]
 8015566:	0019      	movs	r1, r3
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	408b      	lsls	r3, r1
 801556c:	431a      	orrs	r2, r3
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	621a      	str	r2, [r3, #32]
}
 8015572:	46c0      	nop			; (mov r8, r8)
 8015574:	46bd      	mov	sp, r7
 8015576:	b006      	add	sp, #24
 8015578:	bd80      	pop	{r7, pc}
 801557a:	46c0      	nop			; (mov r8, r8)
 801557c:	080250a0 	.word	0x080250a0

08015580 <LL_TIM_OC_SetCompareCH1>:
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	683a      	ldr	r2, [r7, #0]
 801558e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8015590:	46c0      	nop			; (mov r8, r8)
 8015592:	46bd      	mov	sp, r7
 8015594:	b002      	add	sp, #8
 8015596:	bd80      	pop	{r7, pc}

08015598 <LL_TIM_OC_SetCompareCH2>:
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	683a      	ldr	r2, [r7, #0]
 80155a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80155a8:	46c0      	nop			; (mov r8, r8)
 80155aa:	46bd      	mov	sp, r7
 80155ac:	b002      	add	sp, #8
 80155ae:	bd80      	pop	{r7, pc}

080155b0 <LL_TIM_OC_SetCompareCH3>:
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	683a      	ldr	r2, [r7, #0]
 80155be:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80155c0:	46c0      	nop			; (mov r8, r8)
 80155c2:	46bd      	mov	sp, r7
 80155c4:	b002      	add	sp, #8
 80155c6:	bd80      	pop	{r7, pc}

080155c8 <LL_TIM_OC_SetCompareCH4>:
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b082      	sub	sp, #8
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
 80155d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	683a      	ldr	r2, [r7, #0]
 80155d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80155d8:	46c0      	nop			; (mov r8, r8)
 80155da:	46bd      	mov	sp, r7
 80155dc:	b002      	add	sp, #8
 80155de:	bd80      	pop	{r7, pc}

080155e0 <LL_TIM_ClearFlag_CC1>:
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2203      	movs	r2, #3
 80155ec:	4252      	negs	r2, r2
 80155ee:	611a      	str	r2, [r3, #16]
}
 80155f0:	46c0      	nop			; (mov r8, r8)
 80155f2:	46bd      	mov	sp, r7
 80155f4:	b002      	add	sp, #8
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <LL_TIM_IsActiveFlag_CC1>:
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	691b      	ldr	r3, [r3, #16]
 8015604:	2202      	movs	r2, #2
 8015606:	4013      	ands	r3, r2
 8015608:	2b02      	cmp	r3, #2
 801560a:	d101      	bne.n	8015610 <LL_TIM_IsActiveFlag_CC1+0x18>
 801560c:	2301      	movs	r3, #1
 801560e:	e000      	b.n	8015612 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8015610:	2300      	movs	r3, #0
}
 8015612:	0018      	movs	r0, r3
 8015614:	46bd      	mov	sp, r7
 8015616:	b002      	add	sp, #8
 8015618:	bd80      	pop	{r7, pc}

0801561a <LL_TIM_ClearFlag_CC2>:
{
 801561a:	b580      	push	{r7, lr}
 801561c:	b082      	sub	sp, #8
 801561e:	af00      	add	r7, sp, #0
 8015620:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2205      	movs	r2, #5
 8015626:	4252      	negs	r2, r2
 8015628:	611a      	str	r2, [r3, #16]
}
 801562a:	46c0      	nop			; (mov r8, r8)
 801562c:	46bd      	mov	sp, r7
 801562e:	b002      	add	sp, #8
 8015630:	bd80      	pop	{r7, pc}

08015632 <LL_TIM_IsActiveFlag_CC2>:
{
 8015632:	b580      	push	{r7, lr}
 8015634:	b082      	sub	sp, #8
 8015636:	af00      	add	r7, sp, #0
 8015638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	691b      	ldr	r3, [r3, #16]
 801563e:	2204      	movs	r2, #4
 8015640:	4013      	ands	r3, r2
 8015642:	2b04      	cmp	r3, #4
 8015644:	d101      	bne.n	801564a <LL_TIM_IsActiveFlag_CC2+0x18>
 8015646:	2301      	movs	r3, #1
 8015648:	e000      	b.n	801564c <LL_TIM_IsActiveFlag_CC2+0x1a>
 801564a:	2300      	movs	r3, #0
}
 801564c:	0018      	movs	r0, r3
 801564e:	46bd      	mov	sp, r7
 8015650:	b002      	add	sp, #8
 8015652:	bd80      	pop	{r7, pc}

08015654 <LL_TIM_ClearFlag_CC3>:
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2209      	movs	r2, #9
 8015660:	4252      	negs	r2, r2
 8015662:	611a      	str	r2, [r3, #16]
}
 8015664:	46c0      	nop			; (mov r8, r8)
 8015666:	46bd      	mov	sp, r7
 8015668:	b002      	add	sp, #8
 801566a:	bd80      	pop	{r7, pc}

0801566c <LL_TIM_IsActiveFlag_CC3>:
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b082      	sub	sp, #8
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	691b      	ldr	r3, [r3, #16]
 8015678:	2208      	movs	r2, #8
 801567a:	4013      	ands	r3, r2
 801567c:	2b08      	cmp	r3, #8
 801567e:	d101      	bne.n	8015684 <LL_TIM_IsActiveFlag_CC3+0x18>
 8015680:	2301      	movs	r3, #1
 8015682:	e000      	b.n	8015686 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8015684:	2300      	movs	r3, #0
}
 8015686:	0018      	movs	r0, r3
 8015688:	46bd      	mov	sp, r7
 801568a:	b002      	add	sp, #8
 801568c:	bd80      	pop	{r7, pc}

0801568e <LL_TIM_ClearFlag_CC4>:
{
 801568e:	b580      	push	{r7, lr}
 8015690:	b082      	sub	sp, #8
 8015692:	af00      	add	r7, sp, #0
 8015694:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2211      	movs	r2, #17
 801569a:	4252      	negs	r2, r2
 801569c:	611a      	str	r2, [r3, #16]
}
 801569e:	46c0      	nop			; (mov r8, r8)
 80156a0:	46bd      	mov	sp, r7
 80156a2:	b002      	add	sp, #8
 80156a4:	bd80      	pop	{r7, pc}

080156a6 <LL_TIM_IsActiveFlag_CC4>:
{
 80156a6:	b580      	push	{r7, lr}
 80156a8:	b082      	sub	sp, #8
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	691b      	ldr	r3, [r3, #16]
 80156b2:	2210      	movs	r2, #16
 80156b4:	4013      	ands	r3, r2
 80156b6:	2b10      	cmp	r3, #16
 80156b8:	d101      	bne.n	80156be <LL_TIM_IsActiveFlag_CC4+0x18>
 80156ba:	2301      	movs	r3, #1
 80156bc:	e000      	b.n	80156c0 <LL_TIM_IsActiveFlag_CC4+0x1a>
 80156be:	2300      	movs	r3, #0
}
 80156c0:	0018      	movs	r0, r3
 80156c2:	46bd      	mov	sp, r7
 80156c4:	b002      	add	sp, #8
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 80156c8:	b5b0      	push	{r4, r5, r7, lr}
 80156ca:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 80156cc:	4b48      	ldr	r3, [pc, #288]	; (80157f0 <USBPD_TIM_Init+0x128>)
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	b25b      	sxtb	r3, r3
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d000      	beq.n	80156d8 <USBPD_TIM_Init+0x10>
 80156d6:	e07e      	b.n	80157d6 <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 80156d8:	2380      	movs	r3, #128	; 0x80
 80156da:	011b      	lsls	r3, r3, #4
 80156dc:	0018      	movs	r0, r3
 80156de:	f7ff fe2d 	bl	801533c <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 80156e2:	4b44      	ldr	r3, [pc, #272]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 80156e4:	2100      	movs	r1, #0
 80156e6:	0018      	movs	r0, r3
 80156e8:	f7ff fe5e 	bl	80153a8 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 80156ec:	4b42      	ldr	r3, [pc, #264]	; (80157f8 <USBPD_TIM_Init+0x130>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	4a42      	ldr	r2, [pc, #264]	; (80157fc <USBPD_TIM_Init+0x134>)
 80156f2:	4293      	cmp	r3, r2
 80156f4:	d90b      	bls.n	801570e <USBPD_TIM_Init+0x46>
 80156f6:	4b40      	ldr	r3, [pc, #256]	; (80157f8 <USBPD_TIM_Init+0x130>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	4a41      	ldr	r2, [pc, #260]	; (8015800 <USBPD_TIM_Init+0x138>)
 80156fc:	4694      	mov	ip, r2
 80156fe:	4463      	add	r3, ip
 8015700:	4940      	ldr	r1, [pc, #256]	; (8015804 <USBPD_TIM_Init+0x13c>)
 8015702:	0018      	movs	r0, r3
 8015704:	f7f0 fd74 	bl	80061f0 <__udivsi3>
 8015708:	0003      	movs	r3, r0
 801570a:	3b01      	subs	r3, #1
 801570c:	e000      	b.n	8015710 <USBPD_TIM_Init+0x48>
 801570e:	2300      	movs	r3, #0
 8015710:	4a38      	ldr	r2, [pc, #224]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 8015712:	0019      	movs	r1, r3
 8015714:	0010      	movs	r0, r2
 8015716:	f7ff fe59 	bl	80153cc <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 801571a:	4b37      	ldr	r3, [pc, #220]	; (80157f8 <USBPD_TIM_Init+0x130>)
 801571c:	681c      	ldr	r4, [r3, #0]
 801571e:	4b35      	ldr	r3, [pc, #212]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 8015720:	0018      	movs	r0, r3
 8015722:	f7ff fe5f 	bl	80153e4 <LL_TIM_GetPrescaler>
 8015726:	0003      	movs	r3, r0
 8015728:	3301      	adds	r3, #1
 801572a:	0019      	movs	r1, r3
 801572c:	0020      	movs	r0, r4
 801572e:	f7f0 fd5f 	bl	80061f0 <__udivsi3>
 8015732:	0003      	movs	r3, r0
 8015734:	2b63      	cmp	r3, #99	; 0x63
 8015736:	d910      	bls.n	801575a <USBPD_TIM_Init+0x92>
 8015738:	4b2f      	ldr	r3, [pc, #188]	; (80157f8 <USBPD_TIM_Init+0x130>)
 801573a:	681c      	ldr	r4, [r3, #0]
 801573c:	4b2d      	ldr	r3, [pc, #180]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 801573e:	0018      	movs	r0, r3
 8015740:	f7ff fe50 	bl	80153e4 <LL_TIM_GetPrescaler>
 8015744:	0003      	movs	r3, r0
 8015746:	3301      	adds	r3, #1
 8015748:	2264      	movs	r2, #100	; 0x64
 801574a:	4353      	muls	r3, r2
 801574c:	0019      	movs	r1, r3
 801574e:	0020      	movs	r0, r4
 8015750:	f7f0 fd4e 	bl	80061f0 <__udivsi3>
 8015754:	0003      	movs	r3, r0
 8015756:	3b01      	subs	r3, #1
 8015758:	e000      	b.n	801575c <USBPD_TIM_Init+0x94>
 801575a:	2300      	movs	r3, #0
 801575c:	4a25      	ldr	r2, [pc, #148]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 801575e:	0019      	movs	r1, r3
 8015760:	0010      	movs	r0, r2
 8015762:	f7ff fe49 	bl	80153f8 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8015766:	4b23      	ldr	r3, [pc, #140]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 8015768:	2230      	movs	r2, #48	; 0x30
 801576a:	2101      	movs	r1, #1
 801576c:	0018      	movs	r0, r3
 801576e:	f7ff fe4f 	bl	8015410 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8015772:	4b20      	ldr	r3, [pc, #128]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 8015774:	2230      	movs	r2, #48	; 0x30
 8015776:	2110      	movs	r1, #16
 8015778:	0018      	movs	r0, r3
 801577a:	f7ff fe49 	bl	8015410 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 801577e:	2380      	movs	r3, #128	; 0x80
 8015780:	005b      	lsls	r3, r3, #1
 8015782:	481c      	ldr	r0, [pc, #112]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 8015784:	2230      	movs	r2, #48	; 0x30
 8015786:	0019      	movs	r1, r3
 8015788:	f7ff fe42 	bl	8015410 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 801578c:	2380      	movs	r3, #128	; 0x80
 801578e:	015b      	lsls	r3, r3, #5
 8015790:	4818      	ldr	r0, [pc, #96]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 8015792:	2230      	movs	r2, #48	; 0x30
 8015794:	0019      	movs	r1, r3
 8015796:	f7ff fe3b 	bl	8015410 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 801579a:	4b16      	ldr	r3, [pc, #88]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 801579c:	2200      	movs	r2, #0
 801579e:	2101      	movs	r1, #1
 80157a0:	0018      	movs	r0, r3
 80157a2:	f7ff fe97 	bl	80154d4 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 80157a6:	4b13      	ldr	r3, [pc, #76]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 80157a8:	2200      	movs	r2, #0
 80157aa:	2110      	movs	r1, #16
 80157ac:	0018      	movs	r0, r3
 80157ae:	f7ff fe91 	bl	80154d4 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 80157b2:	2380      	movs	r3, #128	; 0x80
 80157b4:	005b      	lsls	r3, r3, #1
 80157b6:	480f      	ldr	r0, [pc, #60]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 80157b8:	2200      	movs	r2, #0
 80157ba:	0019      	movs	r1, r3
 80157bc:	f7ff fe8a 	bl	80154d4 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 80157c0:	2380      	movs	r3, #128	; 0x80
 80157c2:	015b      	lsls	r3, r3, #5
 80157c4:	480b      	ldr	r0, [pc, #44]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 80157c6:	2200      	movs	r2, #0
 80157c8:	0019      	movs	r1, r3
 80157ca:	f7ff fe83 	bl	80154d4 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 80157ce:	4b09      	ldr	r3, [pc, #36]	; (80157f4 <USBPD_TIM_Init+0x12c>)
 80157d0:	0018      	movs	r0, r3
 80157d2:	f7ff fddb 	bl	801538c <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 80157d6:	4b06      	ldr	r3, [pc, #24]	; (80157f0 <USBPD_TIM_Init+0x128>)
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	b25b      	sxtb	r3, r3
 80157dc:	b2db      	uxtb	r3, r3
 80157de:	3301      	adds	r3, #1
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	b25a      	sxtb	r2, r3
 80157e4:	4b02      	ldr	r3, [pc, #8]	; (80157f0 <USBPD_TIM_Init+0x128>)
 80157e6:	701a      	strb	r2, [r3, #0]
}
 80157e8:	46c0      	nop			; (mov r8, r8)
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bdb0      	pop	{r4, r5, r7, pc}
 80157ee:	46c0      	nop			; (mov r8, r8)
 80157f0:	200005e4 	.word	0x200005e4
 80157f4:	40012c00 	.word	0x40012c00
 80157f8:	20000058 	.word	0x20000058
 80157fc:	000f423f 	.word	0x000f423f
 8015800:	0007a120 	.word	0x0007a120
 8015804:	000f4240 	.word	0x000f4240

08015808 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	af00      	add	r7, sp, #0
  timer_initcounter--;
 801580c:	4b0a      	ldr	r3, [pc, #40]	; (8015838 <USBPD_TIM_DeInit+0x30>)
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	b25b      	sxtb	r3, r3
 8015812:	b2db      	uxtb	r3, r3
 8015814:	3b01      	subs	r3, #1
 8015816:	b2db      	uxtb	r3, r3
 8015818:	b25a      	sxtb	r2, r3
 801581a:	4b07      	ldr	r3, [pc, #28]	; (8015838 <USBPD_TIM_DeInit+0x30>)
 801581c:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 801581e:	4b06      	ldr	r3, [pc, #24]	; (8015838 <USBPD_TIM_DeInit+0x30>)
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	b25b      	sxtb	r3, r3
 8015824:	2b00      	cmp	r3, #0
 8015826:	d104      	bne.n	8015832 <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 8015828:	2380      	movs	r3, #128	; 0x80
 801582a:	011b      	lsls	r3, r3, #4
 801582c:	0018      	movs	r0, r3
 801582e:	f7ff fd9b 	bl	8015368 <LL_APB2_GRP1_DisableClock>
  }
}
 8015832:	46c0      	nop			; (mov r8, r8)
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}
 8015838:	200005e4 	.word	0x200005e4

0801583c <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af00      	add	r7, sp, #0
 8015842:	0002      	movs	r2, r0
 8015844:	6039      	str	r1, [r7, #0]
 8015846:	1dfb      	adds	r3, r7, #7
 8015848:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 801584a:	1dfb      	adds	r3, r7, #7
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	2b03      	cmp	r3, #3
 8015850:	d044      	beq.n	80158dc <USBPD_TIM_Start+0xa0>
 8015852:	dc57      	bgt.n	8015904 <USBPD_TIM_Start+0xc8>
 8015854:	2b02      	cmp	r3, #2
 8015856:	d02d      	beq.n	80158b4 <USBPD_TIM_Start+0x78>
 8015858:	dc54      	bgt.n	8015904 <USBPD_TIM_Start+0xc8>
 801585a:	2b00      	cmp	r3, #0
 801585c:	d002      	beq.n	8015864 <USBPD_TIM_Start+0x28>
 801585e:	2b01      	cmp	r3, #1
 8015860:	d014      	beq.n	801588c <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 8015862:	e04f      	b.n	8015904 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 8015864:	4b2a      	ldr	r3, [pc, #168]	; (8015910 <USBPD_TIM_Start+0xd4>)
 8015866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	18d3      	adds	r3, r2, r3
 801586c:	4929      	ldr	r1, [pc, #164]	; (8015914 <USBPD_TIM_Start+0xd8>)
 801586e:	0018      	movs	r0, r3
 8015870:	f7f0 fd44 	bl	80062fc <__aeabi_uidivmod>
 8015874:	000b      	movs	r3, r1
 8015876:	001a      	movs	r2, r3
 8015878:	4b25      	ldr	r3, [pc, #148]	; (8015910 <USBPD_TIM_Start+0xd4>)
 801587a:	0011      	movs	r1, r2
 801587c:	0018      	movs	r0, r3
 801587e:	f7ff fe7f 	bl	8015580 <LL_TIM_OC_SetCompareCH1>
 8015882:	4b23      	ldr	r3, [pc, #140]	; (8015910 <USBPD_TIM_Start+0xd4>)
 8015884:	0018      	movs	r0, r3
 8015886:	f7ff feab 	bl	80155e0 <LL_TIM_ClearFlag_CC1>
      break;
 801588a:	e03c      	b.n	8015906 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 801588c:	4b20      	ldr	r3, [pc, #128]	; (8015910 <USBPD_TIM_Start+0xd4>)
 801588e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	18d3      	adds	r3, r2, r3
 8015894:	491f      	ldr	r1, [pc, #124]	; (8015914 <USBPD_TIM_Start+0xd8>)
 8015896:	0018      	movs	r0, r3
 8015898:	f7f0 fd30 	bl	80062fc <__aeabi_uidivmod>
 801589c:	000b      	movs	r3, r1
 801589e:	001a      	movs	r2, r3
 80158a0:	4b1b      	ldr	r3, [pc, #108]	; (8015910 <USBPD_TIM_Start+0xd4>)
 80158a2:	0011      	movs	r1, r2
 80158a4:	0018      	movs	r0, r3
 80158a6:	f7ff fe77 	bl	8015598 <LL_TIM_OC_SetCompareCH2>
 80158aa:	4b19      	ldr	r3, [pc, #100]	; (8015910 <USBPD_TIM_Start+0xd4>)
 80158ac:	0018      	movs	r0, r3
 80158ae:	f7ff feb4 	bl	801561a <LL_TIM_ClearFlag_CC2>
      break;
 80158b2:	e028      	b.n	8015906 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 80158b4:	4b16      	ldr	r3, [pc, #88]	; (8015910 <USBPD_TIM_Start+0xd4>)
 80158b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	18d3      	adds	r3, r2, r3
 80158bc:	4915      	ldr	r1, [pc, #84]	; (8015914 <USBPD_TIM_Start+0xd8>)
 80158be:	0018      	movs	r0, r3
 80158c0:	f7f0 fd1c 	bl	80062fc <__aeabi_uidivmod>
 80158c4:	000b      	movs	r3, r1
 80158c6:	001a      	movs	r2, r3
 80158c8:	4b11      	ldr	r3, [pc, #68]	; (8015910 <USBPD_TIM_Start+0xd4>)
 80158ca:	0011      	movs	r1, r2
 80158cc:	0018      	movs	r0, r3
 80158ce:	f7ff fe6f 	bl	80155b0 <LL_TIM_OC_SetCompareCH3>
 80158d2:	4b0f      	ldr	r3, [pc, #60]	; (8015910 <USBPD_TIM_Start+0xd4>)
 80158d4:	0018      	movs	r0, r3
 80158d6:	f7ff febd 	bl	8015654 <LL_TIM_ClearFlag_CC3>
      break;
 80158da:	e014      	b.n	8015906 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 80158dc:	4b0c      	ldr	r3, [pc, #48]	; (8015910 <USBPD_TIM_Start+0xd4>)
 80158de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	18d3      	adds	r3, r2, r3
 80158e4:	490b      	ldr	r1, [pc, #44]	; (8015914 <USBPD_TIM_Start+0xd8>)
 80158e6:	0018      	movs	r0, r3
 80158e8:	f7f0 fd08 	bl	80062fc <__aeabi_uidivmod>
 80158ec:	000b      	movs	r3, r1
 80158ee:	001a      	movs	r2, r3
 80158f0:	4b07      	ldr	r3, [pc, #28]	; (8015910 <USBPD_TIM_Start+0xd4>)
 80158f2:	0011      	movs	r1, r2
 80158f4:	0018      	movs	r0, r3
 80158f6:	f7ff fe67 	bl	80155c8 <LL_TIM_OC_SetCompareCH4>
 80158fa:	4b05      	ldr	r3, [pc, #20]	; (8015910 <USBPD_TIM_Start+0xd4>)
 80158fc:	0018      	movs	r0, r3
 80158fe:	f7ff fec6 	bl	801568e <LL_TIM_ClearFlag_CC4>
      break;
 8015902:	e000      	b.n	8015906 <USBPD_TIM_Start+0xca>
      break;
 8015904:	46c0      	nop			; (mov r8, r8)
  }
}
 8015906:	46c0      	nop			; (mov r8, r8)
 8015908:	46bd      	mov	sp, r7
 801590a:	b002      	add	sp, #8
 801590c:	bd80      	pop	{r7, pc}
 801590e:	46c0      	nop			; (mov r8, r8)
 8015910:	40012c00 	.word	0x40012c00
 8015914:	00002710 	.word	0x00002710

08015918 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b084      	sub	sp, #16
 801591c:	af00      	add	r7, sp, #0
 801591e:	0002      	movs	r2, r0
 8015920:	1dfb      	adds	r3, r7, #7
 8015922:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 8015924:	2301      	movs	r3, #1
 8015926:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8015928:	1dfb      	adds	r3, r7, #7
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	2b03      	cmp	r3, #3
 801592e:	d01d      	beq.n	801596c <USBPD_TIM_IsExpired+0x54>
 8015930:	dc23      	bgt.n	801597a <USBPD_TIM_IsExpired+0x62>
 8015932:	2b02      	cmp	r3, #2
 8015934:	d013      	beq.n	801595e <USBPD_TIM_IsExpired+0x46>
 8015936:	dc20      	bgt.n	801597a <USBPD_TIM_IsExpired+0x62>
 8015938:	2b00      	cmp	r3, #0
 801593a:	d002      	beq.n	8015942 <USBPD_TIM_IsExpired+0x2a>
 801593c:	2b01      	cmp	r3, #1
 801593e:	d007      	beq.n	8015950 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 8015940:	e01b      	b.n	801597a <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8015942:	4b11      	ldr	r3, [pc, #68]	; (8015988 <USBPD_TIM_IsExpired+0x70>)
 8015944:	0018      	movs	r0, r3
 8015946:	f7ff fe57 	bl	80155f8 <LL_TIM_IsActiveFlag_CC1>
 801594a:	0003      	movs	r3, r0
 801594c:	60fb      	str	r3, [r7, #12]
      break;
 801594e:	e015      	b.n	801597c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8015950:	4b0d      	ldr	r3, [pc, #52]	; (8015988 <USBPD_TIM_IsExpired+0x70>)
 8015952:	0018      	movs	r0, r3
 8015954:	f7ff fe6d 	bl	8015632 <LL_TIM_IsActiveFlag_CC2>
 8015958:	0003      	movs	r3, r0
 801595a:	60fb      	str	r3, [r7, #12]
      break;
 801595c:	e00e      	b.n	801597c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 801595e:	4b0a      	ldr	r3, [pc, #40]	; (8015988 <USBPD_TIM_IsExpired+0x70>)
 8015960:	0018      	movs	r0, r3
 8015962:	f7ff fe83 	bl	801566c <LL_TIM_IsActiveFlag_CC3>
 8015966:	0003      	movs	r3, r0
 8015968:	60fb      	str	r3, [r7, #12]
      break;
 801596a:	e007      	b.n	801597c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 801596c:	4b06      	ldr	r3, [pc, #24]	; (8015988 <USBPD_TIM_IsExpired+0x70>)
 801596e:	0018      	movs	r0, r3
 8015970:	f7ff fe99 	bl	80156a6 <LL_TIM_IsActiveFlag_CC4>
 8015974:	0003      	movs	r3, r0
 8015976:	60fb      	str	r3, [r7, #12]
      break;
 8015978:	e000      	b.n	801597c <USBPD_TIM_IsExpired+0x64>
      break;
 801597a:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 801597c:	68fb      	ldr	r3, [r7, #12]
}
 801597e:	0018      	movs	r0, r3
 8015980:	46bd      	mov	sp, r7
 8015982:	b004      	add	sp, #16
 8015984:	bd80      	pop	{r7, pc}
 8015986:	46c0      	nop			; (mov r8, r8)
 8015988:	40012c00 	.word	0x40012c00

0801598c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	000a      	movs	r2, r1
 8015996:	1cfb      	adds	r3, r7, #3
 8015998:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801599a:	2387      	movs	r3, #135	; 0x87
 801599c:	009b      	lsls	r3, r3, #2
 801599e:	0018      	movs	r0, r3
 80159a0:	f008 fc5a 	bl	801e258 <USBD_static_malloc>
 80159a4:	0003      	movs	r3, r0
 80159a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d10a      	bne.n	80159c4 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80159ae:	687a      	ldr	r2, [r7, #4]
 80159b0:	23b5      	movs	r3, #181	; 0xb5
 80159b2:	009b      	lsls	r3, r3, #2
 80159b4:	58d2      	ldr	r2, [r2, r3]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	32b0      	adds	r2, #176	; 0xb0
 80159ba:	0092      	lsls	r2, r2, #2
 80159bc:	2100      	movs	r1, #0
 80159be:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 80159c0:	2302      	movs	r3, #2
 80159c2:	e0e9      	b.n	8015b98 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80159c4:	2387      	movs	r3, #135	; 0x87
 80159c6:	009a      	lsls	r2, r3, #2
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	2100      	movs	r1, #0
 80159cc:	0018      	movs	r0, r3
 80159ce:	f00d fe7d 	bl	80236cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80159d2:	687a      	ldr	r2, [r7, #4]
 80159d4:	23b5      	movs	r3, #181	; 0xb5
 80159d6:	009b      	lsls	r3, r3, #2
 80159d8:	58d2      	ldr	r2, [r2, r3]
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	32b0      	adds	r2, #176	; 0xb0
 80159de:	0092      	lsls	r2, r2, #2
 80159e0:	68f9      	ldr	r1, [r7, #12]
 80159e2:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80159e4:	687a      	ldr	r2, [r7, #4]
 80159e6:	23b5      	movs	r3, #181	; 0xb5
 80159e8:	009b      	lsls	r3, r3, #2
 80159ea:	58d2      	ldr	r2, [r2, r3]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	32b0      	adds	r2, #176	; 0xb0
 80159f0:	0092      	lsls	r2, r2, #2
 80159f2:	58d1      	ldr	r1, [r2, r3]
 80159f4:	687a      	ldr	r2, [r7, #4]
 80159f6:	23af      	movs	r3, #175	; 0xaf
 80159f8:	009b      	lsls	r3, r3, #2
 80159fa:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	7c1b      	ldrb	r3, [r3, #16]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d13c      	bne.n	8015a7e <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015a04:	4b66      	ldr	r3, [pc, #408]	; (8015ba0 <USBD_CDC_Init+0x214>)
 8015a06:	7819      	ldrb	r1, [r3, #0]
 8015a08:	2380      	movs	r3, #128	; 0x80
 8015a0a:	009b      	lsls	r3, r3, #2
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	2202      	movs	r2, #2
 8015a10:	f008 fa5f 	bl	801ded2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015a14:	4b62      	ldr	r3, [pc, #392]	; (8015ba0 <USBD_CDC_Init+0x214>)
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	001a      	movs	r2, r3
 8015a1a:	230f      	movs	r3, #15
 8015a1c:	401a      	ands	r2, r3
 8015a1e:	6879      	ldr	r1, [r7, #4]
 8015a20:	0013      	movs	r3, r2
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	189b      	adds	r3, r3, r2
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	18cb      	adds	r3, r1, r3
 8015a2a:	3324      	adds	r3, #36	; 0x24
 8015a2c:	2201      	movs	r2, #1
 8015a2e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015a30:	4b5c      	ldr	r3, [pc, #368]	; (8015ba4 <USBD_CDC_Init+0x218>)
 8015a32:	7819      	ldrb	r1, [r3, #0]
 8015a34:	2380      	movs	r3, #128	; 0x80
 8015a36:	009b      	lsls	r3, r3, #2
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	2202      	movs	r2, #2
 8015a3c:	f008 fa49 	bl	801ded2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015a40:	4b58      	ldr	r3, [pc, #352]	; (8015ba4 <USBD_CDC_Init+0x218>)
 8015a42:	781b      	ldrb	r3, [r3, #0]
 8015a44:	001a      	movs	r2, r3
 8015a46:	230f      	movs	r3, #15
 8015a48:	401a      	ands	r2, r3
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	23b2      	movs	r3, #178	; 0xb2
 8015a4e:	0059      	lsls	r1, r3, #1
 8015a50:	0013      	movs	r3, r2
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	189b      	adds	r3, r3, r2
 8015a56:	009b      	lsls	r3, r3, #2
 8015a58:	18c3      	adds	r3, r0, r3
 8015a5a:	185b      	adds	r3, r3, r1
 8015a5c:	2201      	movs	r2, #1
 8015a5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015a60:	4b51      	ldr	r3, [pc, #324]	; (8015ba8 <USBD_CDC_Init+0x21c>)
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	001a      	movs	r2, r3
 8015a66:	230f      	movs	r3, #15
 8015a68:	401a      	ands	r2, r3
 8015a6a:	6879      	ldr	r1, [r7, #4]
 8015a6c:	0013      	movs	r3, r2
 8015a6e:	009b      	lsls	r3, r3, #2
 8015a70:	189b      	adds	r3, r3, r2
 8015a72:	009b      	lsls	r3, r3, #2
 8015a74:	18cb      	adds	r3, r1, r3
 8015a76:	3326      	adds	r3, #38	; 0x26
 8015a78:	2210      	movs	r2, #16
 8015a7a:	801a      	strh	r2, [r3, #0]
 8015a7c:	e039      	b.n	8015af2 <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015a7e:	4b48      	ldr	r3, [pc, #288]	; (8015ba0 <USBD_CDC_Init+0x214>)
 8015a80:	7819      	ldrb	r1, [r3, #0]
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	2340      	movs	r3, #64	; 0x40
 8015a86:	2202      	movs	r2, #2
 8015a88:	f008 fa23 	bl	801ded2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015a8c:	4b44      	ldr	r3, [pc, #272]	; (8015ba0 <USBD_CDC_Init+0x214>)
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	001a      	movs	r2, r3
 8015a92:	230f      	movs	r3, #15
 8015a94:	401a      	ands	r2, r3
 8015a96:	6879      	ldr	r1, [r7, #4]
 8015a98:	0013      	movs	r3, r2
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	189b      	adds	r3, r3, r2
 8015a9e:	009b      	lsls	r3, r3, #2
 8015aa0:	18cb      	adds	r3, r1, r3
 8015aa2:	3324      	adds	r3, #36	; 0x24
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015aa8:	4b3e      	ldr	r3, [pc, #248]	; (8015ba4 <USBD_CDC_Init+0x218>)
 8015aaa:	7819      	ldrb	r1, [r3, #0]
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	2340      	movs	r3, #64	; 0x40
 8015ab0:	2202      	movs	r2, #2
 8015ab2:	f008 fa0e 	bl	801ded2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015ab6:	4b3b      	ldr	r3, [pc, #236]	; (8015ba4 <USBD_CDC_Init+0x218>)
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	001a      	movs	r2, r3
 8015abc:	230f      	movs	r3, #15
 8015abe:	401a      	ands	r2, r3
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	23b2      	movs	r3, #178	; 0xb2
 8015ac4:	0059      	lsls	r1, r3, #1
 8015ac6:	0013      	movs	r3, r2
 8015ac8:	009b      	lsls	r3, r3, #2
 8015aca:	189b      	adds	r3, r3, r2
 8015acc:	009b      	lsls	r3, r3, #2
 8015ace:	18c3      	adds	r3, r0, r3
 8015ad0:	185b      	adds	r3, r3, r1
 8015ad2:	2201      	movs	r2, #1
 8015ad4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015ad6:	4b34      	ldr	r3, [pc, #208]	; (8015ba8 <USBD_CDC_Init+0x21c>)
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	001a      	movs	r2, r3
 8015adc:	230f      	movs	r3, #15
 8015ade:	401a      	ands	r2, r3
 8015ae0:	6879      	ldr	r1, [r7, #4]
 8015ae2:	0013      	movs	r3, r2
 8015ae4:	009b      	lsls	r3, r3, #2
 8015ae6:	189b      	adds	r3, r3, r2
 8015ae8:	009b      	lsls	r3, r3, #2
 8015aea:	18cb      	adds	r3, r1, r3
 8015aec:	3326      	adds	r3, #38	; 0x26
 8015aee:	2210      	movs	r2, #16
 8015af0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015af2:	4b2d      	ldr	r3, [pc, #180]	; (8015ba8 <USBD_CDC_Init+0x21c>)
 8015af4:	7819      	ldrb	r1, [r3, #0]
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	2308      	movs	r3, #8
 8015afa:	2203      	movs	r2, #3
 8015afc:	f008 f9e9 	bl	801ded2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015b00:	4b29      	ldr	r3, [pc, #164]	; (8015ba8 <USBD_CDC_Init+0x21c>)
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	001a      	movs	r2, r3
 8015b06:	230f      	movs	r3, #15
 8015b08:	401a      	ands	r2, r3
 8015b0a:	6879      	ldr	r1, [r7, #4]
 8015b0c:	0013      	movs	r3, r2
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	189b      	adds	r3, r3, r2
 8015b12:	009b      	lsls	r3, r3, #2
 8015b14:	18cb      	adds	r3, r1, r3
 8015b16:	3324      	adds	r3, #36	; 0x24
 8015b18:	2201      	movs	r2, #1
 8015b1a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015b1c:	68fa      	ldr	r2, [r7, #12]
 8015b1e:	2381      	movs	r3, #129	; 0x81
 8015b20:	009b      	lsls	r3, r3, #2
 8015b22:	2100      	movs	r1, #0
 8015b24:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015b26:	687a      	ldr	r2, [r7, #4]
 8015b28:	23b5      	movs	r3, #181	; 0xb5
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	58d3      	ldr	r3, [r2, r3]
 8015b2e:	687a      	ldr	r2, [r7, #4]
 8015b30:	33b0      	adds	r3, #176	; 0xb0
 8015b32:	009b      	lsls	r3, r3, #2
 8015b34:	18d3      	adds	r3, r2, r3
 8015b36:	3304      	adds	r3, #4
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015b3e:	68fa      	ldr	r2, [r7, #12]
 8015b40:	2385      	movs	r3, #133	; 0x85
 8015b42:	009b      	lsls	r3, r3, #2
 8015b44:	2100      	movs	r1, #0
 8015b46:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8015b48:	68fa      	ldr	r2, [r7, #12]
 8015b4a:	2386      	movs	r3, #134	; 0x86
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	2100      	movs	r1, #0
 8015b50:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8015b52:	68fa      	ldr	r2, [r7, #12]
 8015b54:	2381      	movs	r3, #129	; 0x81
 8015b56:	009b      	lsls	r3, r3, #2
 8015b58:	58d3      	ldr	r3, [r2, r3]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d101      	bne.n	8015b62 <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 8015b5e:	2302      	movs	r3, #2
 8015b60:	e01a      	b.n	8015b98 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	7c1b      	ldrb	r3, [r3, #16]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d10b      	bne.n	8015b82 <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015b6a:	4b0e      	ldr	r3, [pc, #56]	; (8015ba4 <USBD_CDC_Init+0x218>)
 8015b6c:	7819      	ldrb	r1, [r3, #0]
 8015b6e:	68fa      	ldr	r2, [r7, #12]
 8015b70:	2381      	movs	r3, #129	; 0x81
 8015b72:	009b      	lsls	r3, r3, #2
 8015b74:	58d2      	ldr	r2, [r2, r3]
 8015b76:	2380      	movs	r3, #128	; 0x80
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f008 faec 	bl	801e158 <USBD_LL_PrepareReceive>
 8015b80:	e009      	b.n	8015b96 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015b82:	4b08      	ldr	r3, [pc, #32]	; (8015ba4 <USBD_CDC_Init+0x218>)
 8015b84:	7819      	ldrb	r1, [r3, #0]
 8015b86:	68fa      	ldr	r2, [r7, #12]
 8015b88:	2381      	movs	r3, #129	; 0x81
 8015b8a:	009b      	lsls	r3, r3, #2
 8015b8c:	58d2      	ldr	r2, [r2, r3]
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	2340      	movs	r3, #64	; 0x40
 8015b92:	f008 fae1 	bl	801e158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015b96:	2300      	movs	r3, #0
}
 8015b98:	0018      	movs	r0, r3
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	b004      	add	sp, #16
 8015b9e:	bd80      	pop	{r7, pc}
 8015ba0:	200000eb 	.word	0x200000eb
 8015ba4:	200000ec 	.word	0x200000ec
 8015ba8:	200000ed 	.word	0x200000ed

08015bac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b082      	sub	sp, #8
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	000a      	movs	r2, r1
 8015bb6:	1cfb      	adds	r3, r7, #3
 8015bb8:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015bba:	4b41      	ldr	r3, [pc, #260]	; (8015cc0 <USBD_CDC_DeInit+0x114>)
 8015bbc:	781a      	ldrb	r2, [r3, #0]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	0011      	movs	r1, r2
 8015bc2:	0018      	movs	r0, r3
 8015bc4:	f008 f9bc 	bl	801df40 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015bc8:	4b3d      	ldr	r3, [pc, #244]	; (8015cc0 <USBD_CDC_DeInit+0x114>)
 8015bca:	781b      	ldrb	r3, [r3, #0]
 8015bcc:	001a      	movs	r2, r3
 8015bce:	230f      	movs	r3, #15
 8015bd0:	401a      	ands	r2, r3
 8015bd2:	6879      	ldr	r1, [r7, #4]
 8015bd4:	0013      	movs	r3, r2
 8015bd6:	009b      	lsls	r3, r3, #2
 8015bd8:	189b      	adds	r3, r3, r2
 8015bda:	009b      	lsls	r3, r3, #2
 8015bdc:	18cb      	adds	r3, r1, r3
 8015bde:	3324      	adds	r3, #36	; 0x24
 8015be0:	2200      	movs	r2, #0
 8015be2:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015be4:	4b37      	ldr	r3, [pc, #220]	; (8015cc4 <USBD_CDC_DeInit+0x118>)
 8015be6:	781a      	ldrb	r2, [r3, #0]
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	0011      	movs	r1, r2
 8015bec:	0018      	movs	r0, r3
 8015bee:	f008 f9a7 	bl	801df40 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015bf2:	4b34      	ldr	r3, [pc, #208]	; (8015cc4 <USBD_CDC_DeInit+0x118>)
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	001a      	movs	r2, r3
 8015bf8:	230f      	movs	r3, #15
 8015bfa:	401a      	ands	r2, r3
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	23b2      	movs	r3, #178	; 0xb2
 8015c00:	0059      	lsls	r1, r3, #1
 8015c02:	0013      	movs	r3, r2
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	189b      	adds	r3, r3, r2
 8015c08:	009b      	lsls	r3, r3, #2
 8015c0a:	18c3      	adds	r3, r0, r3
 8015c0c:	185b      	adds	r3, r3, r1
 8015c0e:	2200      	movs	r2, #0
 8015c10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015c12:	4b2d      	ldr	r3, [pc, #180]	; (8015cc8 <USBD_CDC_DeInit+0x11c>)
 8015c14:	781a      	ldrb	r2, [r3, #0]
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	0011      	movs	r1, r2
 8015c1a:	0018      	movs	r0, r3
 8015c1c:	f008 f990 	bl	801df40 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015c20:	4b29      	ldr	r3, [pc, #164]	; (8015cc8 <USBD_CDC_DeInit+0x11c>)
 8015c22:	781b      	ldrb	r3, [r3, #0]
 8015c24:	001a      	movs	r2, r3
 8015c26:	230f      	movs	r3, #15
 8015c28:	401a      	ands	r2, r3
 8015c2a:	6879      	ldr	r1, [r7, #4]
 8015c2c:	0013      	movs	r3, r2
 8015c2e:	009b      	lsls	r3, r3, #2
 8015c30:	189b      	adds	r3, r3, r2
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	18cb      	adds	r3, r1, r3
 8015c36:	3324      	adds	r3, #36	; 0x24
 8015c38:	2200      	movs	r2, #0
 8015c3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015c3c:	4b22      	ldr	r3, [pc, #136]	; (8015cc8 <USBD_CDC_DeInit+0x11c>)
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	001a      	movs	r2, r3
 8015c42:	230f      	movs	r3, #15
 8015c44:	401a      	ands	r2, r3
 8015c46:	6879      	ldr	r1, [r7, #4]
 8015c48:	0013      	movs	r3, r2
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	189b      	adds	r3, r3, r2
 8015c4e:	009b      	lsls	r3, r3, #2
 8015c50:	18cb      	adds	r3, r1, r3
 8015c52:	3326      	adds	r3, #38	; 0x26
 8015c54:	2200      	movs	r2, #0
 8015c56:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	23b5      	movs	r3, #181	; 0xb5
 8015c5c:	009b      	lsls	r3, r3, #2
 8015c5e:	58d2      	ldr	r2, [r2, r3]
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	32b0      	adds	r2, #176	; 0xb0
 8015c64:	0092      	lsls	r2, r2, #2
 8015c66:	58d3      	ldr	r3, [r2, r3]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d024      	beq.n	8015cb6 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015c6c:	687a      	ldr	r2, [r7, #4]
 8015c6e:	23b5      	movs	r3, #181	; 0xb5
 8015c70:	009b      	lsls	r3, r3, #2
 8015c72:	58d3      	ldr	r3, [r2, r3]
 8015c74:	687a      	ldr	r2, [r7, #4]
 8015c76:	33b0      	adds	r3, #176	; 0xb0
 8015c78:	009b      	lsls	r3, r3, #2
 8015c7a:	18d3      	adds	r3, r2, r3
 8015c7c:	3304      	adds	r3, #4
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	685b      	ldr	r3, [r3, #4]
 8015c82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	23b5      	movs	r3, #181	; 0xb5
 8015c88:	009b      	lsls	r3, r3, #2
 8015c8a:	58d2      	ldr	r2, [r2, r3]
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	32b0      	adds	r2, #176	; 0xb0
 8015c90:	0092      	lsls	r2, r2, #2
 8015c92:	58d3      	ldr	r3, [r2, r3]
 8015c94:	0018      	movs	r0, r3
 8015c96:	f008 faeb 	bl	801e270 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015c9a:	687a      	ldr	r2, [r7, #4]
 8015c9c:	23b5      	movs	r3, #181	; 0xb5
 8015c9e:	009b      	lsls	r3, r3, #2
 8015ca0:	58d2      	ldr	r2, [r2, r3]
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	32b0      	adds	r2, #176	; 0xb0
 8015ca6:	0092      	lsls	r2, r2, #2
 8015ca8:	2100      	movs	r1, #0
 8015caa:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8015cac:	687a      	ldr	r2, [r7, #4]
 8015cae:	23af      	movs	r3, #175	; 0xaf
 8015cb0:	009b      	lsls	r3, r3, #2
 8015cb2:	2100      	movs	r1, #0
 8015cb4:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8015cb6:	2300      	movs	r3, #0
}
 8015cb8:	0018      	movs	r0, r3
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	b002      	add	sp, #8
 8015cbe:	bd80      	pop	{r7, pc}
 8015cc0:	200000eb 	.word	0x200000eb
 8015cc4:	200000ec 	.word	0x200000ec
 8015cc8:	200000ed 	.word	0x200000ed

08015ccc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b086      	sub	sp, #24
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cd6:	687a      	ldr	r2, [r7, #4]
 8015cd8:	23b5      	movs	r3, #181	; 0xb5
 8015cda:	009b      	lsls	r3, r3, #2
 8015cdc:	58d2      	ldr	r2, [r2, r3]
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	32b0      	adds	r2, #176	; 0xb0
 8015ce2:	0092      	lsls	r2, r2, #2
 8015ce4:	58d3      	ldr	r3, [r2, r3]
 8015ce6:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015ce8:	230d      	movs	r3, #13
 8015cea:	18fb      	adds	r3, r7, r3
 8015cec:	2200      	movs	r2, #0
 8015cee:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8015cf0:	230a      	movs	r3, #10
 8015cf2:	18fb      	adds	r3, r7, r3
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cf8:	2317      	movs	r3, #23
 8015cfa:	18fb      	adds	r3, r7, r3
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d101      	bne.n	8015d0a <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 8015d06:	2303      	movs	r3, #3
 8015d08:	e0d1      	b.n	8015eae <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	001a      	movs	r2, r3
 8015d10:	2360      	movs	r3, #96	; 0x60
 8015d12:	4013      	ands	r3, r2
 8015d14:	d05b      	beq.n	8015dce <USBD_CDC_Setup+0x102>
 8015d16:	2b20      	cmp	r3, #32
 8015d18:	d000      	beq.n	8015d1c <USBD_CDC_Setup+0x50>
 8015d1a:	e0ba      	b.n	8015e92 <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	88db      	ldrh	r3, [r3, #6]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d043      	beq.n	8015dac <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	781b      	ldrb	r3, [r3, #0]
 8015d28:	b25b      	sxtb	r3, r3
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	da22      	bge.n	8015d74 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	23b5      	movs	r3, #181	; 0xb5
 8015d32:	009b      	lsls	r3, r3, #2
 8015d34:	58d3      	ldr	r3, [r2, r3]
 8015d36:	687a      	ldr	r2, [r7, #4]
 8015d38:	33b0      	adds	r3, #176	; 0xb0
 8015d3a:	009b      	lsls	r3, r3, #2
 8015d3c:	18d3      	adds	r3, r2, r3
 8015d3e:	3304      	adds	r3, #4
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	689b      	ldr	r3, [r3, #8]
 8015d44:	683a      	ldr	r2, [r7, #0]
 8015d46:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015d48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015d4a:	683a      	ldr	r2, [r7, #0]
 8015d4c:	88d2      	ldrh	r2, [r2, #6]
 8015d4e:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015d50:	683b      	ldr	r3, [r7, #0]
 8015d52:	88db      	ldrh	r3, [r3, #6]
 8015d54:	220e      	movs	r2, #14
 8015d56:	18ba      	adds	r2, r7, r2
 8015d58:	b299      	uxth	r1, r3
 8015d5a:	2907      	cmp	r1, #7
 8015d5c:	d900      	bls.n	8015d60 <USBD_CDC_Setup+0x94>
 8015d5e:	2307      	movs	r3, #7
 8015d60:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015d62:	6939      	ldr	r1, [r7, #16]
 8015d64:	230e      	movs	r3, #14
 8015d66:	18fb      	adds	r3, r7, r3
 8015d68:	881a      	ldrh	r2, [r3, #0]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	0018      	movs	r0, r3
 8015d6e:	f001 ff3d 	bl	8017bec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015d72:	e099      	b.n	8015ea8 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	7859      	ldrb	r1, [r3, #1]
 8015d78:	693a      	ldr	r2, [r7, #16]
 8015d7a:	2380      	movs	r3, #128	; 0x80
 8015d7c:	009b      	lsls	r3, r3, #2
 8015d7e:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	88db      	ldrh	r3, [r3, #6]
 8015d84:	2b3f      	cmp	r3, #63	; 0x3f
 8015d86:	d803      	bhi.n	8015d90 <USBD_CDC_Setup+0xc4>
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	88db      	ldrh	r3, [r3, #6]
 8015d8c:	b2da      	uxtb	r2, r3
 8015d8e:	e000      	b.n	8015d92 <USBD_CDC_Setup+0xc6>
 8015d90:	2240      	movs	r2, #64	; 0x40
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	4948      	ldr	r1, [pc, #288]	; (8015eb8 <USBD_CDC_Setup+0x1ec>)
 8015d96:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015d98:	6939      	ldr	r1, [r7, #16]
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	4a46      	ldr	r2, [pc, #280]	; (8015eb8 <USBD_CDC_Setup+0x1ec>)
 8015d9e:	5c9b      	ldrb	r3, [r3, r2]
 8015da0:	001a      	movs	r2, r3
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	0018      	movs	r0, r3
 8015da6:	f001 ff4e 	bl	8017c46 <USBD_CtlPrepareRx>
      break;
 8015daa:	e07d      	b.n	8015ea8 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	23b5      	movs	r3, #181	; 0xb5
 8015db0:	009b      	lsls	r3, r3, #2
 8015db2:	58d3      	ldr	r3, [r2, r3]
 8015db4:	687a      	ldr	r2, [r7, #4]
 8015db6:	33b0      	adds	r3, #176	; 0xb0
 8015db8:	009b      	lsls	r3, r3, #2
 8015dba:	18d3      	adds	r3, r2, r3
 8015dbc:	3304      	adds	r3, #4
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	689b      	ldr	r3, [r3, #8]
 8015dc2:	683a      	ldr	r2, [r7, #0]
 8015dc4:	7850      	ldrb	r0, [r2, #1]
 8015dc6:	6839      	ldr	r1, [r7, #0]
 8015dc8:	2200      	movs	r2, #0
 8015dca:	4798      	blx	r3
      break;
 8015dcc:	e06c      	b.n	8015ea8 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	785b      	ldrb	r3, [r3, #1]
 8015dd2:	2b0b      	cmp	r3, #11
 8015dd4:	d03c      	beq.n	8015e50 <USBD_CDC_Setup+0x184>
 8015dd6:	dc4d      	bgt.n	8015e74 <USBD_CDC_Setup+0x1a8>
 8015dd8:	2b0a      	cmp	r3, #10
 8015dda:	d01f      	beq.n	8015e1c <USBD_CDC_Setup+0x150>
 8015ddc:	dc4a      	bgt.n	8015e74 <USBD_CDC_Setup+0x1a8>
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d002      	beq.n	8015de8 <USBD_CDC_Setup+0x11c>
 8015de2:	2b01      	cmp	r3, #1
 8015de4:	d051      	beq.n	8015e8a <USBD_CDC_Setup+0x1be>
 8015de6:	e045      	b.n	8015e74 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	23a7      	movs	r3, #167	; 0xa7
 8015dec:	009b      	lsls	r3, r3, #2
 8015dee:	5cd3      	ldrb	r3, [r2, r3]
 8015df0:	b2db      	uxtb	r3, r3
 8015df2:	2b03      	cmp	r3, #3
 8015df4:	d107      	bne.n	8015e06 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015df6:	230a      	movs	r3, #10
 8015df8:	18f9      	adds	r1, r7, r3
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2202      	movs	r2, #2
 8015dfe:	0018      	movs	r0, r3
 8015e00:	f001 fef4 	bl	8017bec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e04:	e044      	b.n	8015e90 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8015e06:	683a      	ldr	r2, [r7, #0]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	0011      	movs	r1, r2
 8015e0c:	0018      	movs	r0, r3
 8015e0e:	f001 fe65 	bl	8017adc <USBD_CtlError>
            ret = USBD_FAIL;
 8015e12:	2317      	movs	r3, #23
 8015e14:	18fb      	adds	r3, r7, r3
 8015e16:	2203      	movs	r2, #3
 8015e18:	701a      	strb	r2, [r3, #0]
          break;
 8015e1a:	e039      	b.n	8015e90 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e1c:	687a      	ldr	r2, [r7, #4]
 8015e1e:	23a7      	movs	r3, #167	; 0xa7
 8015e20:	009b      	lsls	r3, r3, #2
 8015e22:	5cd3      	ldrb	r3, [r2, r3]
 8015e24:	b2db      	uxtb	r3, r3
 8015e26:	2b03      	cmp	r3, #3
 8015e28:	d107      	bne.n	8015e3a <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015e2a:	230d      	movs	r3, #13
 8015e2c:	18f9      	adds	r1, r7, r3
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2201      	movs	r2, #1
 8015e32:	0018      	movs	r0, r3
 8015e34:	f001 feda 	bl	8017bec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e38:	e02a      	b.n	8015e90 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8015e3a:	683a      	ldr	r2, [r7, #0]
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	0011      	movs	r1, r2
 8015e40:	0018      	movs	r0, r3
 8015e42:	f001 fe4b 	bl	8017adc <USBD_CtlError>
            ret = USBD_FAIL;
 8015e46:	2317      	movs	r3, #23
 8015e48:	18fb      	adds	r3, r7, r3
 8015e4a:	2203      	movs	r2, #3
 8015e4c:	701a      	strb	r2, [r3, #0]
          break;
 8015e4e:	e01f      	b.n	8015e90 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015e50:	687a      	ldr	r2, [r7, #4]
 8015e52:	23a7      	movs	r3, #167	; 0xa7
 8015e54:	009b      	lsls	r3, r3, #2
 8015e56:	5cd3      	ldrb	r3, [r2, r3]
 8015e58:	b2db      	uxtb	r3, r3
 8015e5a:	2b03      	cmp	r3, #3
 8015e5c:	d017      	beq.n	8015e8e <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 8015e5e:	683a      	ldr	r2, [r7, #0]
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	0011      	movs	r1, r2
 8015e64:	0018      	movs	r0, r3
 8015e66:	f001 fe39 	bl	8017adc <USBD_CtlError>
            ret = USBD_FAIL;
 8015e6a:	2317      	movs	r3, #23
 8015e6c:	18fb      	adds	r3, r7, r3
 8015e6e:	2203      	movs	r2, #3
 8015e70:	701a      	strb	r2, [r3, #0]
          }
          break;
 8015e72:	e00c      	b.n	8015e8e <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015e74:	683a      	ldr	r2, [r7, #0]
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	0011      	movs	r1, r2
 8015e7a:	0018      	movs	r0, r3
 8015e7c:	f001 fe2e 	bl	8017adc <USBD_CtlError>
          ret = USBD_FAIL;
 8015e80:	2317      	movs	r3, #23
 8015e82:	18fb      	adds	r3, r7, r3
 8015e84:	2203      	movs	r2, #3
 8015e86:	701a      	strb	r2, [r3, #0]
          break;
 8015e88:	e002      	b.n	8015e90 <USBD_CDC_Setup+0x1c4>
          break;
 8015e8a:	46c0      	nop			; (mov r8, r8)
 8015e8c:	e00c      	b.n	8015ea8 <USBD_CDC_Setup+0x1dc>
          break;
 8015e8e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8015e90:	e00a      	b.n	8015ea8 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 8015e92:	683a      	ldr	r2, [r7, #0]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	0011      	movs	r1, r2
 8015e98:	0018      	movs	r0, r3
 8015e9a:	f001 fe1f 	bl	8017adc <USBD_CtlError>
      ret = USBD_FAIL;
 8015e9e:	2317      	movs	r3, #23
 8015ea0:	18fb      	adds	r3, r7, r3
 8015ea2:	2203      	movs	r2, #3
 8015ea4:	701a      	strb	r2, [r3, #0]
      break;
 8015ea6:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8015ea8:	2317      	movs	r3, #23
 8015eaa:	18fb      	adds	r3, r7, r3
 8015eac:	781b      	ldrb	r3, [r3, #0]
}
 8015eae:	0018      	movs	r0, r3
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	b006      	add	sp, #24
 8015eb4:	bd80      	pop	{r7, pc}
 8015eb6:	46c0      	nop			; (mov r8, r8)
 8015eb8:	00000201 	.word	0x00000201

08015ebc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015ebc:	b590      	push	{r4, r7, lr}
 8015ebe:	b085      	sub	sp, #20
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
 8015ec4:	000a      	movs	r2, r1
 8015ec6:	1cfb      	adds	r3, r7, #3
 8015ec8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015eca:	687a      	ldr	r2, [r7, #4]
 8015ecc:	23b2      	movs	r3, #178	; 0xb2
 8015ece:	009b      	lsls	r3, r3, #2
 8015ed0:	58d3      	ldr	r3, [r2, r3]
 8015ed2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ed4:	687a      	ldr	r2, [r7, #4]
 8015ed6:	23b5      	movs	r3, #181	; 0xb5
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	58d2      	ldr	r2, [r2, r3]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	32b0      	adds	r2, #176	; 0xb0
 8015ee0:	0092      	lsls	r2, r2, #2
 8015ee2:	58d3      	ldr	r3, [r2, r3]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d101      	bne.n	8015eec <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015ee8:	2303      	movs	r3, #3
 8015eea:	e072      	b.n	8015fd2 <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015eec:	687a      	ldr	r2, [r7, #4]
 8015eee:	23b5      	movs	r3, #181	; 0xb5
 8015ef0:	009b      	lsls	r3, r3, #2
 8015ef2:	58d2      	ldr	r2, [r2, r3]
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	32b0      	adds	r2, #176	; 0xb0
 8015ef8:	0092      	lsls	r2, r2, #2
 8015efa:	58d3      	ldr	r3, [r2, r3]
 8015efc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015efe:	1cfb      	adds	r3, r7, #3
 8015f00:	781b      	ldrb	r3, [r3, #0]
 8015f02:	220f      	movs	r2, #15
 8015f04:	401a      	ands	r2, r3
 8015f06:	6879      	ldr	r1, [r7, #4]
 8015f08:	0013      	movs	r3, r2
 8015f0a:	009b      	lsls	r3, r3, #2
 8015f0c:	189b      	adds	r3, r3, r2
 8015f0e:	009b      	lsls	r3, r3, #2
 8015f10:	18cb      	adds	r3, r1, r3
 8015f12:	3318      	adds	r3, #24
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d031      	beq.n	8015f7e <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015f1a:	1cfb      	adds	r3, r7, #3
 8015f1c:	781b      	ldrb	r3, [r3, #0]
 8015f1e:	220f      	movs	r2, #15
 8015f20:	401a      	ands	r2, r3
 8015f22:	6879      	ldr	r1, [r7, #4]
 8015f24:	0013      	movs	r3, r2
 8015f26:	009b      	lsls	r3, r3, #2
 8015f28:	189b      	adds	r3, r3, r2
 8015f2a:	009b      	lsls	r3, r3, #2
 8015f2c:	18cb      	adds	r3, r1, r3
 8015f2e:	3318      	adds	r3, #24
 8015f30:	6818      	ldr	r0, [r3, #0]
 8015f32:	1cfb      	adds	r3, r7, #3
 8015f34:	781b      	ldrb	r3, [r3, #0]
 8015f36:	220f      	movs	r2, #15
 8015f38:	401a      	ands	r2, r3
 8015f3a:	68f9      	ldr	r1, [r7, #12]
 8015f3c:	0013      	movs	r3, r2
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	189b      	adds	r3, r3, r2
 8015f42:	00db      	lsls	r3, r3, #3
 8015f44:	18cb      	adds	r3, r1, r3
 8015f46:	3324      	adds	r3, #36	; 0x24
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	0019      	movs	r1, r3
 8015f4c:	f7f0 f9d6 	bl	80062fc <__aeabi_uidivmod>
 8015f50:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f52:	d114      	bne.n	8015f7e <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015f54:	1cfb      	adds	r3, r7, #3
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	220f      	movs	r2, #15
 8015f5a:	401a      	ands	r2, r3
 8015f5c:	6879      	ldr	r1, [r7, #4]
 8015f5e:	0013      	movs	r3, r2
 8015f60:	009b      	lsls	r3, r3, #2
 8015f62:	189b      	adds	r3, r3, r2
 8015f64:	009b      	lsls	r3, r3, #2
 8015f66:	18cb      	adds	r3, r1, r3
 8015f68:	3318      	adds	r3, #24
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015f6e:	1cfb      	adds	r3, r7, #3
 8015f70:	7819      	ldrb	r1, [r3, #0]
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	2300      	movs	r3, #0
 8015f76:	2200      	movs	r2, #0
 8015f78:	f008 f8be 	bl	801e0f8 <USBD_LL_Transmit>
 8015f7c:	e028      	b.n	8015fd0 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 8015f7e:	68ba      	ldr	r2, [r7, #8]
 8015f80:	2385      	movs	r3, #133	; 0x85
 8015f82:	009b      	lsls	r3, r3, #2
 8015f84:	2100      	movs	r1, #0
 8015f86:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015f88:	687a      	ldr	r2, [r7, #4]
 8015f8a:	23b5      	movs	r3, #181	; 0xb5
 8015f8c:	009b      	lsls	r3, r3, #2
 8015f8e:	58d3      	ldr	r3, [r2, r3]
 8015f90:	687a      	ldr	r2, [r7, #4]
 8015f92:	33b0      	adds	r3, #176	; 0xb0
 8015f94:	009b      	lsls	r3, r3, #2
 8015f96:	18d3      	adds	r3, r2, r3
 8015f98:	3304      	adds	r3, #4
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	691b      	ldr	r3, [r3, #16]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d016      	beq.n	8015fd0 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015fa2:	687a      	ldr	r2, [r7, #4]
 8015fa4:	23b5      	movs	r3, #181	; 0xb5
 8015fa6:	009b      	lsls	r3, r3, #2
 8015fa8:	58d3      	ldr	r3, [r2, r3]
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	33b0      	adds	r3, #176	; 0xb0
 8015fae:	009b      	lsls	r3, r3, #2
 8015fb0:	18d3      	adds	r3, r2, r3
 8015fb2:	3304      	adds	r3, #4
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	691c      	ldr	r4, [r3, #16]
 8015fb8:	68ba      	ldr	r2, [r7, #8]
 8015fba:	2382      	movs	r3, #130	; 0x82
 8015fbc:	009b      	lsls	r3, r3, #2
 8015fbe:	58d0      	ldr	r0, [r2, r3]
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	2284      	movs	r2, #132	; 0x84
 8015fc4:	0092      	lsls	r2, r2, #2
 8015fc6:	1899      	adds	r1, r3, r2
 8015fc8:	1cfb      	adds	r3, r7, #3
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	001a      	movs	r2, r3
 8015fce:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8015fd0:	2300      	movs	r3, #0
}
 8015fd2:	0018      	movs	r0, r3
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	b005      	add	sp, #20
 8015fd8:	bd90      	pop	{r4, r7, pc}

08015fda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015fda:	b580      	push	{r7, lr}
 8015fdc:	b084      	sub	sp, #16
 8015fde:	af00      	add	r7, sp, #0
 8015fe0:	6078      	str	r0, [r7, #4]
 8015fe2:	000a      	movs	r2, r1
 8015fe4:	1cfb      	adds	r3, r7, #3
 8015fe6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	23b5      	movs	r3, #181	; 0xb5
 8015fec:	009b      	lsls	r3, r3, #2
 8015fee:	58d2      	ldr	r2, [r2, r3]
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	32b0      	adds	r2, #176	; 0xb0
 8015ff4:	0092      	lsls	r2, r2, #2
 8015ff6:	58d3      	ldr	r3, [r2, r3]
 8015ff8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ffa:	687a      	ldr	r2, [r7, #4]
 8015ffc:	23b5      	movs	r3, #181	; 0xb5
 8015ffe:	009b      	lsls	r3, r3, #2
 8016000:	58d2      	ldr	r2, [r2, r3]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	32b0      	adds	r2, #176	; 0xb0
 8016006:	0092      	lsls	r2, r2, #2
 8016008:	58d3      	ldr	r3, [r2, r3]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d101      	bne.n	8016012 <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 801600e:	2303      	movs	r3, #3
 8016010:	e022      	b.n	8016058 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016012:	1cfb      	adds	r3, r7, #3
 8016014:	781a      	ldrb	r2, [r3, #0]
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	0011      	movs	r1, r2
 801601a:	0018      	movs	r0, r3
 801601c:	f008 f8cc 	bl	801e1b8 <USBD_LL_GetRxDataSize>
 8016020:	0001      	movs	r1, r0
 8016022:	68fa      	ldr	r2, [r7, #12]
 8016024:	2383      	movs	r3, #131	; 0x83
 8016026:	009b      	lsls	r3, r3, #2
 8016028:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801602a:	687a      	ldr	r2, [r7, #4]
 801602c:	23b5      	movs	r3, #181	; 0xb5
 801602e:	009b      	lsls	r3, r3, #2
 8016030:	58d3      	ldr	r3, [r2, r3]
 8016032:	687a      	ldr	r2, [r7, #4]
 8016034:	33b0      	adds	r3, #176	; 0xb0
 8016036:	009b      	lsls	r3, r3, #2
 8016038:	18d3      	adds	r3, r2, r3
 801603a:	3304      	adds	r3, #4
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	68da      	ldr	r2, [r3, #12]
 8016040:	68f9      	ldr	r1, [r7, #12]
 8016042:	2381      	movs	r3, #129	; 0x81
 8016044:	009b      	lsls	r3, r3, #2
 8016046:	58c8      	ldr	r0, [r1, r3]
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2183      	movs	r1, #131	; 0x83
 801604c:	0089      	lsls	r1, r1, #2
 801604e:	468c      	mov	ip, r1
 8016050:	4463      	add	r3, ip
 8016052:	0019      	movs	r1, r3
 8016054:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 8016056:	2300      	movs	r3, #0
}
 8016058:	0018      	movs	r0, r3
 801605a:	46bd      	mov	sp, r7
 801605c:	b004      	add	sp, #16
 801605e:	bd80      	pop	{r7, pc}

08016060 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016060:	b590      	push	{r4, r7, lr}
 8016062:	b085      	sub	sp, #20
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016068:	687a      	ldr	r2, [r7, #4]
 801606a:	23b5      	movs	r3, #181	; 0xb5
 801606c:	009b      	lsls	r3, r3, #2
 801606e:	58d2      	ldr	r2, [r2, r3]
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	32b0      	adds	r2, #176	; 0xb0
 8016074:	0092      	lsls	r2, r2, #2
 8016076:	58d3      	ldr	r3, [r2, r3]
 8016078:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d101      	bne.n	8016084 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8016080:	2303      	movs	r3, #3
 8016082:	e02c      	b.n	80160de <USBD_CDC_EP0_RxReady+0x7e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	23b5      	movs	r3, #181	; 0xb5
 8016088:	009b      	lsls	r3, r3, #2
 801608a:	58d3      	ldr	r3, [r2, r3]
 801608c:	687a      	ldr	r2, [r7, #4]
 801608e:	33b0      	adds	r3, #176	; 0xb0
 8016090:	009b      	lsls	r3, r3, #2
 8016092:	18d3      	adds	r3, r2, r3
 8016094:	3304      	adds	r3, #4
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d01f      	beq.n	80160dc <USBD_CDC_EP0_RxReady+0x7c>
 801609c:	68fa      	ldr	r2, [r7, #12]
 801609e:	2380      	movs	r3, #128	; 0x80
 80160a0:	009b      	lsls	r3, r3, #2
 80160a2:	5cd3      	ldrb	r3, [r2, r3]
 80160a4:	2bff      	cmp	r3, #255	; 0xff
 80160a6:	d019      	beq.n	80160dc <USBD_CDC_EP0_RxReady+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80160a8:	687a      	ldr	r2, [r7, #4]
 80160aa:	23b5      	movs	r3, #181	; 0xb5
 80160ac:	009b      	lsls	r3, r3, #2
 80160ae:	58d3      	ldr	r3, [r2, r3]
 80160b0:	687a      	ldr	r2, [r7, #4]
 80160b2:	33b0      	adds	r3, #176	; 0xb0
 80160b4:	009b      	lsls	r3, r3, #2
 80160b6:	18d3      	adds	r3, r2, r3
 80160b8:	3304      	adds	r3, #4
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	689b      	ldr	r3, [r3, #8]
 80160be:	68f9      	ldr	r1, [r7, #12]
 80160c0:	2280      	movs	r2, #128	; 0x80
 80160c2:	0092      	lsls	r2, r2, #2
 80160c4:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 80160c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80160c8:	68fa      	ldr	r2, [r7, #12]
 80160ca:	4c07      	ldr	r4, [pc, #28]	; (80160e8 <USBD_CDC_EP0_RxReady+0x88>)
 80160cc:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80160ce:	b292      	uxth	r2, r2
 80160d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80160d2:	68fa      	ldr	r2, [r7, #12]
 80160d4:	2380      	movs	r3, #128	; 0x80
 80160d6:	009b      	lsls	r3, r3, #2
 80160d8:	21ff      	movs	r1, #255	; 0xff
 80160da:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 80160dc:	2300      	movs	r3, #0
}
 80160de:	0018      	movs	r0, r3
 80160e0:	46bd      	mov	sp, r7
 80160e2:	b005      	add	sp, #20
 80160e4:	bd90      	pop	{r4, r7, pc}
 80160e6:	46c0      	nop			; (mov r8, r8)
 80160e8:	00000201 	.word	0x00000201

080160ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b086      	sub	sp, #24
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80160f4:	4b20      	ldr	r3, [pc, #128]	; (8016178 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80160f6:	2182      	movs	r1, #130	; 0x82
 80160f8:	0018      	movs	r0, r3
 80160fa:	f000 fd4e 	bl	8016b9a <USBD_GetEpDesc>
 80160fe:	0003      	movs	r3, r0
 8016100:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016102:	4b1d      	ldr	r3, [pc, #116]	; (8016178 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8016104:	2101      	movs	r1, #1
 8016106:	0018      	movs	r0, r3
 8016108:	f000 fd47 	bl	8016b9a <USBD_GetEpDesc>
 801610c:	0003      	movs	r3, r0
 801610e:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016110:	4b19      	ldr	r3, [pc, #100]	; (8016178 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8016112:	2181      	movs	r1, #129	; 0x81
 8016114:	0018      	movs	r0, r3
 8016116:	f000 fd40 	bl	8016b9a <USBD_GetEpDesc>
 801611a:	0003      	movs	r3, r0
 801611c:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d002      	beq.n	801612a <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016124:	697b      	ldr	r3, [r7, #20]
 8016126:	2210      	movs	r2, #16
 8016128:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d00b      	beq.n	8016148 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016130:	693b      	ldr	r3, [r7, #16]
 8016132:	791a      	ldrb	r2, [r3, #4]
 8016134:	2100      	movs	r1, #0
 8016136:	400a      	ands	r2, r1
 8016138:	1c11      	adds	r1, r2, #0
 801613a:	2240      	movs	r2, #64	; 0x40
 801613c:	430a      	orrs	r2, r1
 801613e:	711a      	strb	r2, [r3, #4]
 8016140:	795a      	ldrb	r2, [r3, #5]
 8016142:	2100      	movs	r1, #0
 8016144:	400a      	ands	r2, r1
 8016146:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d00b      	beq.n	8016166 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	791a      	ldrb	r2, [r3, #4]
 8016152:	2100      	movs	r1, #0
 8016154:	400a      	ands	r2, r1
 8016156:	1c11      	adds	r1, r2, #0
 8016158:	2240      	movs	r2, #64	; 0x40
 801615a:	430a      	orrs	r2, r1
 801615c:	711a      	strb	r2, [r3, #4]
 801615e:	795a      	ldrb	r2, [r3, #5]
 8016160:	2100      	movs	r1, #0
 8016162:	400a      	ands	r2, r1
 8016164:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2243      	movs	r2, #67	; 0x43
 801616a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801616c:	4b02      	ldr	r3, [pc, #8]	; (8016178 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 801616e:	0018      	movs	r0, r3
 8016170:	46bd      	mov	sp, r7
 8016172:	b006      	add	sp, #24
 8016174:	bd80      	pop	{r7, pc}
 8016176:	46c0      	nop			; (mov r8, r8)
 8016178:	200000a8 	.word	0x200000a8

0801617c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b086      	sub	sp, #24
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016184:	4b20      	ldr	r3, [pc, #128]	; (8016208 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8016186:	2182      	movs	r1, #130	; 0x82
 8016188:	0018      	movs	r0, r3
 801618a:	f000 fd06 	bl	8016b9a <USBD_GetEpDesc>
 801618e:	0003      	movs	r3, r0
 8016190:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016192:	4b1d      	ldr	r3, [pc, #116]	; (8016208 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8016194:	2101      	movs	r1, #1
 8016196:	0018      	movs	r0, r3
 8016198:	f000 fcff 	bl	8016b9a <USBD_GetEpDesc>
 801619c:	0003      	movs	r3, r0
 801619e:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80161a0:	4b19      	ldr	r3, [pc, #100]	; (8016208 <USBD_CDC_GetHSCfgDesc+0x8c>)
 80161a2:	2181      	movs	r1, #129	; 0x81
 80161a4:	0018      	movs	r0, r3
 80161a6:	f000 fcf8 	bl	8016b9a <USBD_GetEpDesc>
 80161aa:	0003      	movs	r3, r0
 80161ac:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d002      	beq.n	80161ba <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	2210      	movs	r2, #16
 80161b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d00b      	beq.n	80161d8 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80161c0:	693b      	ldr	r3, [r7, #16]
 80161c2:	791a      	ldrb	r2, [r3, #4]
 80161c4:	2100      	movs	r1, #0
 80161c6:	400a      	ands	r2, r1
 80161c8:	711a      	strb	r2, [r3, #4]
 80161ca:	795a      	ldrb	r2, [r3, #5]
 80161cc:	2100      	movs	r1, #0
 80161ce:	400a      	ands	r2, r1
 80161d0:	1c11      	adds	r1, r2, #0
 80161d2:	2202      	movs	r2, #2
 80161d4:	430a      	orrs	r2, r1
 80161d6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d00b      	beq.n	80161f6 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	791a      	ldrb	r2, [r3, #4]
 80161e2:	2100      	movs	r1, #0
 80161e4:	400a      	ands	r2, r1
 80161e6:	711a      	strb	r2, [r3, #4]
 80161e8:	795a      	ldrb	r2, [r3, #5]
 80161ea:	2100      	movs	r1, #0
 80161ec:	400a      	ands	r2, r1
 80161ee:	1c11      	adds	r1, r2, #0
 80161f0:	2202      	movs	r2, #2
 80161f2:	430a      	orrs	r2, r1
 80161f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2243      	movs	r2, #67	; 0x43
 80161fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80161fc:	4b02      	ldr	r3, [pc, #8]	; (8016208 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 80161fe:	0018      	movs	r0, r3
 8016200:	46bd      	mov	sp, r7
 8016202:	b006      	add	sp, #24
 8016204:	bd80      	pop	{r7, pc}
 8016206:	46c0      	nop			; (mov r8, r8)
 8016208:	200000a8 	.word	0x200000a8

0801620c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b086      	sub	sp, #24
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016214:	4b20      	ldr	r3, [pc, #128]	; (8016298 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8016216:	2182      	movs	r1, #130	; 0x82
 8016218:	0018      	movs	r0, r3
 801621a:	f000 fcbe 	bl	8016b9a <USBD_GetEpDesc>
 801621e:	0003      	movs	r3, r0
 8016220:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016222:	4b1d      	ldr	r3, [pc, #116]	; (8016298 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8016224:	2101      	movs	r1, #1
 8016226:	0018      	movs	r0, r3
 8016228:	f000 fcb7 	bl	8016b9a <USBD_GetEpDesc>
 801622c:	0003      	movs	r3, r0
 801622e:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016230:	4b19      	ldr	r3, [pc, #100]	; (8016298 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8016232:	2181      	movs	r1, #129	; 0x81
 8016234:	0018      	movs	r0, r3
 8016236:	f000 fcb0 	bl	8016b9a <USBD_GetEpDesc>
 801623a:	0003      	movs	r3, r0
 801623c:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 801623e:	697b      	ldr	r3, [r7, #20]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d002      	beq.n	801624a <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016244:	697b      	ldr	r3, [r7, #20]
 8016246:	2210      	movs	r2, #16
 8016248:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801624a:	693b      	ldr	r3, [r7, #16]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d00b      	beq.n	8016268 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	791a      	ldrb	r2, [r3, #4]
 8016254:	2100      	movs	r1, #0
 8016256:	400a      	ands	r2, r1
 8016258:	1c11      	adds	r1, r2, #0
 801625a:	2240      	movs	r2, #64	; 0x40
 801625c:	430a      	orrs	r2, r1
 801625e:	711a      	strb	r2, [r3, #4]
 8016260:	795a      	ldrb	r2, [r3, #5]
 8016262:	2100      	movs	r1, #0
 8016264:	400a      	ands	r2, r1
 8016266:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d00b      	beq.n	8016286 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	791a      	ldrb	r2, [r3, #4]
 8016272:	2100      	movs	r1, #0
 8016274:	400a      	ands	r2, r1
 8016276:	1c11      	adds	r1, r2, #0
 8016278:	2240      	movs	r2, #64	; 0x40
 801627a:	430a      	orrs	r2, r1
 801627c:	711a      	strb	r2, [r3, #4]
 801627e:	795a      	ldrb	r2, [r3, #5]
 8016280:	2100      	movs	r1, #0
 8016282:	400a      	ands	r2, r1
 8016284:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2243      	movs	r2, #67	; 0x43
 801628a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801628c:	4b02      	ldr	r3, [pc, #8]	; (8016298 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 801628e:	0018      	movs	r0, r3
 8016290:	46bd      	mov	sp, r7
 8016292:	b006      	add	sp, #24
 8016294:	bd80      	pop	{r7, pc}
 8016296:	46c0      	nop			; (mov r8, r8)
 8016298:	200000a8 	.word	0x200000a8

0801629c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	220a      	movs	r2, #10
 80162a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80162aa:	4b02      	ldr	r3, [pc, #8]	; (80162b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80162ac:	0018      	movs	r0, r3
 80162ae:	46bd      	mov	sp, r7
 80162b0:	b002      	add	sp, #8
 80162b2:	bd80      	pop	{r7, pc}
 80162b4:	20000064 	.word	0x20000064

080162b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b082      	sub	sp, #8
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
 80162c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d101      	bne.n	80162cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80162c8:	2303      	movs	r3, #3
 80162ca:	e00b      	b.n	80162e4 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 80162cc:	687a      	ldr	r2, [r7, #4]
 80162ce:	23b5      	movs	r3, #181	; 0xb5
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	58d3      	ldr	r3, [r2, r3]
 80162d4:	687a      	ldr	r2, [r7, #4]
 80162d6:	33b0      	adds	r3, #176	; 0xb0
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	18d3      	adds	r3, r2, r3
 80162dc:	3304      	adds	r3, #4
 80162de:	683a      	ldr	r2, [r7, #0]
 80162e0:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 80162e2:	2300      	movs	r3, #0
}
 80162e4:	0018      	movs	r0, r3
 80162e6:	46bd      	mov	sp, r7
 80162e8:	b002      	add	sp, #8
 80162ea:	bd80      	pop	{r7, pc}

080162ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b086      	sub	sp, #24
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162f8:	68fa      	ldr	r2, [r7, #12]
 80162fa:	23b5      	movs	r3, #181	; 0xb5
 80162fc:	009b      	lsls	r3, r3, #2
 80162fe:	58d2      	ldr	r2, [r2, r3]
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	32b0      	adds	r2, #176	; 0xb0
 8016304:	0092      	lsls	r2, r2, #2
 8016306:	58d3      	ldr	r3, [r2, r3]
 8016308:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801630a:	697b      	ldr	r3, [r7, #20]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d101      	bne.n	8016314 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8016310:	2303      	movs	r3, #3
 8016312:	e00a      	b.n	801632a <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 8016314:	697a      	ldr	r2, [r7, #20]
 8016316:	2382      	movs	r3, #130	; 0x82
 8016318:	009b      	lsls	r3, r3, #2
 801631a:	68b9      	ldr	r1, [r7, #8]
 801631c:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801631e:	697a      	ldr	r2, [r7, #20]
 8016320:	2384      	movs	r3, #132	; 0x84
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	6879      	ldr	r1, [r7, #4]
 8016326:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8016328:	2300      	movs	r3, #0
}
 801632a:	0018      	movs	r0, r3
 801632c:	46bd      	mov	sp, r7
 801632e:	b006      	add	sp, #24
 8016330:	bd80      	pop	{r7, pc}

08016332 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016332:	b580      	push	{r7, lr}
 8016334:	b084      	sub	sp, #16
 8016336:	af00      	add	r7, sp, #0
 8016338:	6078      	str	r0, [r7, #4]
 801633a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801633c:	687a      	ldr	r2, [r7, #4]
 801633e:	23b5      	movs	r3, #181	; 0xb5
 8016340:	009b      	lsls	r3, r3, #2
 8016342:	58d2      	ldr	r2, [r2, r3]
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	32b0      	adds	r2, #176	; 0xb0
 8016348:	0092      	lsls	r2, r2, #2
 801634a:	58d3      	ldr	r3, [r2, r3]
 801634c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d101      	bne.n	8016358 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016354:	2303      	movs	r3, #3
 8016356:	e005      	b.n	8016364 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 8016358:	68fa      	ldr	r2, [r7, #12]
 801635a:	2381      	movs	r3, #129	; 0x81
 801635c:	009b      	lsls	r3, r3, #2
 801635e:	6839      	ldr	r1, [r7, #0]
 8016360:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8016362:	2300      	movs	r3, #0
}
 8016364:	0018      	movs	r0, r3
 8016366:	46bd      	mov	sp, r7
 8016368:	b004      	add	sp, #16
 801636a:	bd80      	pop	{r7, pc}

0801636c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b084      	sub	sp, #16
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016374:	687a      	ldr	r2, [r7, #4]
 8016376:	23b5      	movs	r3, #181	; 0xb5
 8016378:	009b      	lsls	r3, r3, #2
 801637a:	58d2      	ldr	r2, [r2, r3]
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	32b0      	adds	r2, #176	; 0xb0
 8016380:	0092      	lsls	r2, r2, #2
 8016382:	58d3      	ldr	r3, [r2, r3]
 8016384:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016386:	687a      	ldr	r2, [r7, #4]
 8016388:	23b5      	movs	r3, #181	; 0xb5
 801638a:	009b      	lsls	r3, r3, #2
 801638c:	58d2      	ldr	r2, [r2, r3]
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	32b0      	adds	r2, #176	; 0xb0
 8016392:	0092      	lsls	r2, r2, #2
 8016394:	58d3      	ldr	r3, [r2, r3]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d101      	bne.n	801639e <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801639a:	2303      	movs	r3, #3
 801639c:	e01a      	b.n	80163d4 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	7c1b      	ldrb	r3, [r3, #16]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d10b      	bne.n	80163be <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80163a6:	4b0d      	ldr	r3, [pc, #52]	; (80163dc <USBD_CDC_ReceivePacket+0x70>)
 80163a8:	7819      	ldrb	r1, [r3, #0]
 80163aa:	68fa      	ldr	r2, [r7, #12]
 80163ac:	2381      	movs	r3, #129	; 0x81
 80163ae:	009b      	lsls	r3, r3, #2
 80163b0:	58d2      	ldr	r2, [r2, r3]
 80163b2:	2380      	movs	r3, #128	; 0x80
 80163b4:	009b      	lsls	r3, r3, #2
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f007 fece 	bl	801e158 <USBD_LL_PrepareReceive>
 80163bc:	e009      	b.n	80163d2 <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80163be:	4b07      	ldr	r3, [pc, #28]	; (80163dc <USBD_CDC_ReceivePacket+0x70>)
 80163c0:	7819      	ldrb	r1, [r3, #0]
 80163c2:	68fa      	ldr	r2, [r7, #12]
 80163c4:	2381      	movs	r3, #129	; 0x81
 80163c6:	009b      	lsls	r3, r3, #2
 80163c8:	58d2      	ldr	r2, [r2, r3]
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	2340      	movs	r3, #64	; 0x40
 80163ce:	f007 fec3 	bl	801e158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80163d2:	2300      	movs	r3, #0
}
 80163d4:	0018      	movs	r0, r3
 80163d6:	46bd      	mov	sp, r7
 80163d8:	b004      	add	sp, #16
 80163da:	bd80      	pop	{r7, pc}
 80163dc:	200000ec 	.word	0x200000ec

080163e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80163e0:	b5b0      	push	{r4, r5, r7, lr}
 80163e2:	b086      	sub	sp, #24
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	60f8      	str	r0, [r7, #12]
 80163e8:	60b9      	str	r1, [r7, #8]
 80163ea:	1dfb      	adds	r3, r7, #7
 80163ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d101      	bne.n	80163f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80163f4:	2303      	movs	r3, #3
 80163f6:	e029      	b.n	801644c <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80163f8:	68fa      	ldr	r2, [r7, #12]
 80163fa:	23ae      	movs	r3, #174	; 0xae
 80163fc:	009b      	lsls	r3, r3, #2
 80163fe:	2100      	movs	r1, #0
 8016400:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 8016402:	68fa      	ldr	r2, [r7, #12]
 8016404:	23b1      	movs	r3, #177	; 0xb1
 8016406:	009b      	lsls	r3, r3, #2
 8016408:	2100      	movs	r1, #0
 801640a:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801640c:	68fa      	ldr	r2, [r7, #12]
 801640e:	23b4      	movs	r3, #180	; 0xb4
 8016410:	009b      	lsls	r3, r3, #2
 8016412:	2100      	movs	r1, #0
 8016414:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016416:	68bb      	ldr	r3, [r7, #8]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d004      	beq.n	8016426 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 801641c:	68fa      	ldr	r2, [r7, #12]
 801641e:	23ad      	movs	r3, #173	; 0xad
 8016420:	009b      	lsls	r3, r3, #2
 8016422:	68b9      	ldr	r1, [r7, #8]
 8016424:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016426:	68fa      	ldr	r2, [r7, #12]
 8016428:	23a7      	movs	r3, #167	; 0xa7
 801642a:	009b      	lsls	r3, r3, #2
 801642c:	2101      	movs	r1, #1
 801642e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	1dfa      	adds	r2, r7, #7
 8016434:	7812      	ldrb	r2, [r2, #0]
 8016436:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016438:	2517      	movs	r5, #23
 801643a:	197c      	adds	r4, r7, r5
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	0018      	movs	r0, r3
 8016440:	f007 fcb0 	bl	801dda4 <USBD_LL_Init>
 8016444:	0003      	movs	r3, r0
 8016446:	7023      	strb	r3, [r4, #0]

  return ret;
 8016448:	197b      	adds	r3, r7, r5
 801644a:	781b      	ldrb	r3, [r3, #0]
}
 801644c:	0018      	movs	r0, r3
 801644e:	46bd      	mov	sp, r7
 8016450:	b006      	add	sp, #24
 8016452:	bdb0      	pop	{r4, r5, r7, pc}

08016454 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b084      	sub	sp, #16
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801645e:	230e      	movs	r3, #14
 8016460:	18fb      	adds	r3, r7, r3
 8016462:	2200      	movs	r2, #0
 8016464:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d101      	bne.n	8016470 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801646c:	2303      	movs	r3, #3
 801646e:	e02b      	b.n	80164c8 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016470:	687a      	ldr	r2, [r7, #4]
 8016472:	23ae      	movs	r3, #174	; 0xae
 8016474:	009b      	lsls	r3, r3, #2
 8016476:	6839      	ldr	r1, [r7, #0]
 8016478:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801647a:	687a      	ldr	r2, [r7, #4]
 801647c:	23b5      	movs	r3, #181	; 0xb5
 801647e:	009b      	lsls	r3, r3, #2
 8016480:	58d2      	ldr	r2, [r2, r3]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	32ae      	adds	r2, #174	; 0xae
 8016486:	0092      	lsls	r2, r2, #2
 8016488:	58d3      	ldr	r3, [r2, r3]
 801648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801648c:	2b00      	cmp	r3, #0
 801648e:	d011      	beq.n	80164b4 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016490:	687a      	ldr	r2, [r7, #4]
 8016492:	23b5      	movs	r3, #181	; 0xb5
 8016494:	009b      	lsls	r3, r3, #2
 8016496:	58d2      	ldr	r2, [r2, r3]
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	32ae      	adds	r2, #174	; 0xae
 801649c:	0092      	lsls	r2, r2, #2
 801649e:	58d3      	ldr	r3, [r2, r3]
 80164a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164a2:	220e      	movs	r2, #14
 80164a4:	18ba      	adds	r2, r7, r2
 80164a6:	0010      	movs	r0, r2
 80164a8:	4798      	blx	r3
 80164aa:	0001      	movs	r1, r0
 80164ac:	687a      	ldr	r2, [r7, #4]
 80164ae:	23b4      	movs	r3, #180	; 0xb4
 80164b0:	009b      	lsls	r3, r3, #2
 80164b2:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80164b4:	687a      	ldr	r2, [r7, #4]
 80164b6:	23b6      	movs	r3, #182	; 0xb6
 80164b8:	009b      	lsls	r3, r3, #2
 80164ba:	58d3      	ldr	r3, [r2, r3]
 80164bc:	1c59      	adds	r1, r3, #1
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	23b6      	movs	r3, #182	; 0xb6
 80164c2:	009b      	lsls	r3, r3, #2
 80164c4:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80164c6:	2300      	movs	r3, #0
}
 80164c8:	0018      	movs	r0, r3
 80164ca:	46bd      	mov	sp, r7
 80164cc:	b004      	add	sp, #16
 80164ce:	bd80      	pop	{r7, pc}

080164d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	0018      	movs	r0, r3
 80164dc:	f007 fcd4 	bl	801de88 <USBD_LL_Start>
 80164e0:	0003      	movs	r3, r0
}
 80164e2:	0018      	movs	r0, r3
 80164e4:	46bd      	mov	sp, r7
 80164e6:	b002      	add	sp, #8
 80164e8:	bd80      	pop	{r7, pc}

080164ea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80164ea:	b580      	push	{r7, lr}
 80164ec:	b082      	sub	sp, #8
 80164ee:	af00      	add	r7, sp, #0
 80164f0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80164f2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80164f4:	0018      	movs	r0, r3
 80164f6:	46bd      	mov	sp, r7
 80164f8:	b002      	add	sp, #8
 80164fa:	bd80      	pop	{r7, pc}

080164fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80164fc:	b590      	push	{r4, r7, lr}
 80164fe:	b085      	sub	sp, #20
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	000a      	movs	r2, r1
 8016506:	1cfb      	adds	r3, r7, #3
 8016508:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801650a:	210f      	movs	r1, #15
 801650c:	187b      	adds	r3, r7, r1
 801650e:	2200      	movs	r2, #0
 8016510:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016512:	687a      	ldr	r2, [r7, #4]
 8016514:	23ae      	movs	r3, #174	; 0xae
 8016516:	009b      	lsls	r3, r3, #2
 8016518:	58d3      	ldr	r3, [r2, r3]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d00c      	beq.n	8016538 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801651e:	687a      	ldr	r2, [r7, #4]
 8016520:	23ae      	movs	r3, #174	; 0xae
 8016522:	009b      	lsls	r3, r3, #2
 8016524:	58d3      	ldr	r3, [r2, r3]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	187c      	adds	r4, r7, r1
 801652a:	1cfa      	adds	r2, r7, #3
 801652c:	7811      	ldrb	r1, [r2, #0]
 801652e:	687a      	ldr	r2, [r7, #4]
 8016530:	0010      	movs	r0, r2
 8016532:	4798      	blx	r3
 8016534:	0003      	movs	r3, r0
 8016536:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016538:	230f      	movs	r3, #15
 801653a:	18fb      	adds	r3, r7, r3
 801653c:	781b      	ldrb	r3, [r3, #0]
}
 801653e:	0018      	movs	r0, r3
 8016540:	46bd      	mov	sp, r7
 8016542:	b005      	add	sp, #20
 8016544:	bd90      	pop	{r4, r7, pc}

08016546 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016546:	b590      	push	{r4, r7, lr}
 8016548:	b085      	sub	sp, #20
 801654a:	af00      	add	r7, sp, #0
 801654c:	6078      	str	r0, [r7, #4]
 801654e:	000a      	movs	r2, r1
 8016550:	1cfb      	adds	r3, r7, #3
 8016552:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016554:	240f      	movs	r4, #15
 8016556:	193b      	adds	r3, r7, r4
 8016558:	2200      	movs	r2, #0
 801655a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801655c:	687a      	ldr	r2, [r7, #4]
 801655e:	23ae      	movs	r3, #174	; 0xae
 8016560:	009b      	lsls	r3, r3, #2
 8016562:	58d3      	ldr	r3, [r2, r3]
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	1cfa      	adds	r2, r7, #3
 8016568:	7811      	ldrb	r1, [r2, #0]
 801656a:	687a      	ldr	r2, [r7, #4]
 801656c:	0010      	movs	r0, r2
 801656e:	4798      	blx	r3
 8016570:	1e03      	subs	r3, r0, #0
 8016572:	d002      	beq.n	801657a <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 8016574:	193b      	adds	r3, r7, r4
 8016576:	2203      	movs	r2, #3
 8016578:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801657a:	230f      	movs	r3, #15
 801657c:	18fb      	adds	r3, r7, r3
 801657e:	781b      	ldrb	r3, [r3, #0]
}
 8016580:	0018      	movs	r0, r3
 8016582:	46bd      	mov	sp, r7
 8016584:	b005      	add	sp, #20
 8016586:	bd90      	pop	{r4, r7, pc}

08016588 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016588:	b590      	push	{r4, r7, lr}
 801658a:	b085      	sub	sp, #20
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
 8016590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	4a30      	ldr	r2, [pc, #192]	; (8016658 <USBD_LL_SetupStage+0xd0>)
 8016596:	4694      	mov	ip, r2
 8016598:	4463      	add	r3, ip
 801659a:	683a      	ldr	r2, [r7, #0]
 801659c:	0011      	movs	r1, r2
 801659e:	0018      	movs	r0, r3
 80165a0:	f001 fa5f 	bl	8017a62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80165a4:	687a      	ldr	r2, [r7, #4]
 80165a6:	23a5      	movs	r3, #165	; 0xa5
 80165a8:	009b      	lsls	r3, r3, #2
 80165aa:	2101      	movs	r1, #1
 80165ac:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	23ac      	movs	r3, #172	; 0xac
 80165b2:	009b      	lsls	r3, r3, #2
 80165b4:	5ad3      	ldrh	r3, [r2, r3]
 80165b6:	0019      	movs	r1, r3
 80165b8:	687a      	ldr	r2, [r7, #4]
 80165ba:	23a6      	movs	r3, #166	; 0xa6
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	4a25      	ldr	r2, [pc, #148]	; (8016658 <USBD_LL_SetupStage+0xd0>)
 80165c4:	5c9b      	ldrb	r3, [r3, r2]
 80165c6:	001a      	movs	r2, r3
 80165c8:	231f      	movs	r3, #31
 80165ca:	4013      	ands	r3, r2
 80165cc:	2b02      	cmp	r3, #2
 80165ce:	d01f      	beq.n	8016610 <USBD_LL_SetupStage+0x88>
 80165d0:	d82b      	bhi.n	801662a <USBD_LL_SetupStage+0xa2>
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d002      	beq.n	80165dc <USBD_LL_SetupStage+0x54>
 80165d6:	2b01      	cmp	r3, #1
 80165d8:	d00d      	beq.n	80165f6 <USBD_LL_SetupStage+0x6e>
 80165da:	e026      	b.n	801662a <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	4a1e      	ldr	r2, [pc, #120]	; (8016658 <USBD_LL_SetupStage+0xd0>)
 80165e0:	189a      	adds	r2, r3, r2
 80165e2:	230f      	movs	r3, #15
 80165e4:	18fc      	adds	r4, r7, r3
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	0011      	movs	r1, r2
 80165ea:	0018      	movs	r0, r3
 80165ec:	f000 fb5e 	bl	8016cac <USBD_StdDevReq>
 80165f0:	0003      	movs	r3, r0
 80165f2:	7023      	strb	r3, [r4, #0]
      break;
 80165f4:	e029      	b.n	801664a <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	4a17      	ldr	r2, [pc, #92]	; (8016658 <USBD_LL_SetupStage+0xd0>)
 80165fa:	189a      	adds	r2, r3, r2
 80165fc:	230f      	movs	r3, #15
 80165fe:	18fc      	adds	r4, r7, r3
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	0011      	movs	r1, r2
 8016604:	0018      	movs	r0, r3
 8016606:	f000 fbcf 	bl	8016da8 <USBD_StdItfReq>
 801660a:	0003      	movs	r3, r0
 801660c:	7023      	strb	r3, [r4, #0]
      break;
 801660e:	e01c      	b.n	801664a <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	4a11      	ldr	r2, [pc, #68]	; (8016658 <USBD_LL_SetupStage+0xd0>)
 8016614:	189a      	adds	r2, r3, r2
 8016616:	230f      	movs	r3, #15
 8016618:	18fc      	adds	r4, r7, r3
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	0011      	movs	r1, r2
 801661e:	0018      	movs	r0, r3
 8016620:	f000 fc4f 	bl	8016ec2 <USBD_StdEPReq>
 8016624:	0003      	movs	r3, r0
 8016626:	7023      	strb	r3, [r4, #0]
      break;
 8016628:	e00f      	b.n	801664a <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	4a0a      	ldr	r2, [pc, #40]	; (8016658 <USBD_LL_SetupStage+0xd0>)
 801662e:	5c9b      	ldrb	r3, [r3, r2]
 8016630:	227f      	movs	r2, #127	; 0x7f
 8016632:	4393      	bics	r3, r2
 8016634:	b2da      	uxtb	r2, r3
 8016636:	230f      	movs	r3, #15
 8016638:	18fc      	adds	r4, r7, r3
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	0011      	movs	r1, r2
 801663e:	0018      	movs	r0, r3
 8016640:	f007 fca9 	bl	801df96 <USBD_LL_StallEP>
 8016644:	0003      	movs	r3, r0
 8016646:	7023      	strb	r3, [r4, #0]
      break;
 8016648:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801664a:	230f      	movs	r3, #15
 801664c:	18fb      	adds	r3, r7, r3
 801664e:	781b      	ldrb	r3, [r3, #0]
}
 8016650:	0018      	movs	r0, r3
 8016652:	46bd      	mov	sp, r7
 8016654:	b005      	add	sp, #20
 8016656:	bd90      	pop	{r4, r7, pc}
 8016658:	000002aa 	.word	0x000002aa

0801665c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801665c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801665e:	b087      	sub	sp, #28
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	607a      	str	r2, [r7, #4]
 8016666:	200b      	movs	r0, #11
 8016668:	183b      	adds	r3, r7, r0
 801666a:	1c0a      	adds	r2, r1, #0
 801666c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801666e:	2317      	movs	r3, #23
 8016670:	18fb      	adds	r3, r7, r3
 8016672:	2200      	movs	r2, #0
 8016674:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 8016676:	183b      	adds	r3, r7, r0
 8016678:	781b      	ldrb	r3, [r3, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d000      	beq.n	8016680 <USBD_LL_DataOutStage+0x24>
 801667e:	e084      	b.n	801678a <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	3355      	adds	r3, #85	; 0x55
 8016684:	33ff      	adds	r3, #255	; 0xff
 8016686:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016688:	68fa      	ldr	r2, [r7, #12]
 801668a:	23a5      	movs	r3, #165	; 0xa5
 801668c:	009b      	lsls	r3, r3, #2
 801668e:	58d3      	ldr	r3, [r2, r3]
 8016690:	2b03      	cmp	r3, #3
 8016692:	d000      	beq.n	8016696 <USBD_LL_DataOutStage+0x3a>
 8016694:	e0c0      	b.n	8016818 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	689a      	ldr	r2, [r3, #8]
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	68db      	ldr	r3, [r3, #12]
 801669e:	429a      	cmp	r2, r3
 80166a0:	d914      	bls.n	80166cc <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 80166a2:	693b      	ldr	r3, [r7, #16]
 80166a4:	689a      	ldr	r2, [r3, #8]
 80166a6:	693b      	ldr	r3, [r7, #16]
 80166a8:	68db      	ldr	r3, [r3, #12]
 80166aa:	1ad2      	subs	r2, r2, r3
 80166ac:	693b      	ldr	r3, [r7, #16]
 80166ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80166b0:	693b      	ldr	r3, [r7, #16]
 80166b2:	68d9      	ldr	r1, [r3, #12]
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	689a      	ldr	r2, [r3, #8]
 80166b8:	000b      	movs	r3, r1
 80166ba:	4293      	cmp	r3, r2
 80166bc:	d900      	bls.n	80166c0 <USBD_LL_DataOutStage+0x64>
 80166be:	0013      	movs	r3, r2
 80166c0:	6879      	ldr	r1, [r7, #4]
 80166c2:	68f8      	ldr	r0, [r7, #12]
 80166c4:	001a      	movs	r2, r3
 80166c6:	f001 fade 	bl	8017c86 <USBD_CtlContinueRx>
 80166ca:	e0a5      	b.n	8016818 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	4a55      	ldr	r2, [pc, #340]	; (8016824 <USBD_LL_DataOutStage+0x1c8>)
 80166d0:	5c9b      	ldrb	r3, [r3, r2]
 80166d2:	001a      	movs	r2, r3
 80166d4:	231f      	movs	r3, #31
 80166d6:	4013      	ands	r3, r2
 80166d8:	2b02      	cmp	r3, #2
 80166da:	d018      	beq.n	801670e <USBD_LL_DataOutStage+0xb2>
 80166dc:	d825      	bhi.n	801672a <USBD_LL_DataOutStage+0xce>
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d002      	beq.n	80166e8 <USBD_LL_DataOutStage+0x8c>
 80166e2:	2b01      	cmp	r3, #1
 80166e4:	d005      	beq.n	80166f2 <USBD_LL_DataOutStage+0x96>
 80166e6:	e020      	b.n	801672a <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80166e8:	2316      	movs	r3, #22
 80166ea:	18fb      	adds	r3, r7, r3
 80166ec:	2200      	movs	r2, #0
 80166ee:	701a      	strb	r2, [r3, #0]
            break;
 80166f0:	e020      	b.n	8016734 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	4a4c      	ldr	r2, [pc, #304]	; (8016828 <USBD_LL_DataOutStage+0x1cc>)
 80166f6:	5a9b      	ldrh	r3, [r3, r2]
 80166f8:	b2da      	uxtb	r2, r3
 80166fa:	2316      	movs	r3, #22
 80166fc:	18fc      	adds	r4, r7, r3
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	0011      	movs	r1, r2
 8016702:	0018      	movs	r0, r3
 8016704:	f000 fa31 	bl	8016b6a <USBD_CoreFindIF>
 8016708:	0003      	movs	r3, r0
 801670a:	7023      	strb	r3, [r4, #0]
            break;
 801670c:	e012      	b.n	8016734 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	4a45      	ldr	r2, [pc, #276]	; (8016828 <USBD_LL_DataOutStage+0x1cc>)
 8016712:	5a9b      	ldrh	r3, [r3, r2]
 8016714:	b2da      	uxtb	r2, r3
 8016716:	2316      	movs	r3, #22
 8016718:	18fc      	adds	r4, r7, r3
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	0011      	movs	r1, r2
 801671e:	0018      	movs	r0, r3
 8016720:	f000 fa2f 	bl	8016b82 <USBD_CoreFindEP>
 8016724:	0003      	movs	r3, r0
 8016726:	7023      	strb	r3, [r4, #0]
            break;
 8016728:	e004      	b.n	8016734 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801672a:	2316      	movs	r3, #22
 801672c:	18fb      	adds	r3, r7, r3
 801672e:	2200      	movs	r2, #0
 8016730:	701a      	strb	r2, [r3, #0]
            break;
 8016732:	46c0      	nop			; (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016734:	2116      	movs	r1, #22
 8016736:	187b      	adds	r3, r7, r1
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d120      	bne.n	8016780 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801673e:	68fa      	ldr	r2, [r7, #12]
 8016740:	23a7      	movs	r3, #167	; 0xa7
 8016742:	009b      	lsls	r3, r3, #2
 8016744:	5cd3      	ldrb	r3, [r2, r3]
 8016746:	b2db      	uxtb	r3, r3
 8016748:	2b03      	cmp	r3, #3
 801674a:	d119      	bne.n	8016780 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801674c:	187b      	adds	r3, r7, r1
 801674e:	781a      	ldrb	r2, [r3, #0]
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	32ae      	adds	r2, #174	; 0xae
 8016754:	0092      	lsls	r2, r2, #2
 8016756:	58d3      	ldr	r3, [r2, r3]
 8016758:	691b      	ldr	r3, [r3, #16]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d010      	beq.n	8016780 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 801675e:	0008      	movs	r0, r1
 8016760:	187b      	adds	r3, r7, r1
 8016762:	7819      	ldrb	r1, [r3, #0]
 8016764:	68fa      	ldr	r2, [r7, #12]
 8016766:	23b5      	movs	r3, #181	; 0xb5
 8016768:	009b      	lsls	r3, r3, #2
 801676a:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801676c:	183b      	adds	r3, r7, r0
 801676e:	781a      	ldrb	r2, [r3, #0]
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	32ae      	adds	r2, #174	; 0xae
 8016774:	0092      	lsls	r2, r2, #2
 8016776:	58d3      	ldr	r3, [r2, r3]
 8016778:	691b      	ldr	r3, [r3, #16]
 801677a:	68fa      	ldr	r2, [r7, #12]
 801677c:	0010      	movs	r0, r2
 801677e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	0018      	movs	r0, r3
 8016784:	f001 fa90 	bl	8017ca8 <USBD_CtlSendStatus>
 8016788:	e046      	b.n	8016818 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801678a:	260b      	movs	r6, #11
 801678c:	19bb      	adds	r3, r7, r6
 801678e:	781b      	ldrb	r3, [r3, #0]
 8016790:	227f      	movs	r2, #127	; 0x7f
 8016792:	4013      	ands	r3, r2
 8016794:	b2da      	uxtb	r2, r3
 8016796:	2516      	movs	r5, #22
 8016798:	197c      	adds	r4, r7, r5
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	0011      	movs	r1, r2
 801679e:	0018      	movs	r0, r3
 80167a0:	f000 f9ef 	bl	8016b82 <USBD_CoreFindEP>
 80167a4:	0003      	movs	r3, r0
 80167a6:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80167a8:	0029      	movs	r1, r5
 80167aa:	187b      	adds	r3, r7, r1
 80167ac:	781b      	ldrb	r3, [r3, #0]
 80167ae:	2bff      	cmp	r3, #255	; 0xff
 80167b0:	d032      	beq.n	8016818 <USBD_LL_DataOutStage+0x1bc>
 80167b2:	187b      	adds	r3, r7, r1
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d12e      	bne.n	8016818 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167ba:	68fa      	ldr	r2, [r7, #12]
 80167bc:	23a7      	movs	r3, #167	; 0xa7
 80167be:	009b      	lsls	r3, r3, #2
 80167c0:	5cd3      	ldrb	r3, [r2, r3]
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	2b03      	cmp	r3, #3
 80167c6:	d11f      	bne.n	8016808 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80167c8:	187b      	adds	r3, r7, r1
 80167ca:	781a      	ldrb	r2, [r3, #0]
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	32ae      	adds	r2, #174	; 0xae
 80167d0:	0092      	lsls	r2, r2, #2
 80167d2:	58d3      	ldr	r3, [r2, r3]
 80167d4:	699b      	ldr	r3, [r3, #24]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d016      	beq.n	8016808 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 80167da:	0008      	movs	r0, r1
 80167dc:	187b      	adds	r3, r7, r1
 80167de:	7819      	ldrb	r1, [r3, #0]
 80167e0:	68fa      	ldr	r2, [r7, #12]
 80167e2:	23b5      	movs	r3, #181	; 0xb5
 80167e4:	009b      	lsls	r3, r3, #2
 80167e6:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80167e8:	183b      	adds	r3, r7, r0
 80167ea:	781a      	ldrb	r2, [r3, #0]
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	32ae      	adds	r2, #174	; 0xae
 80167f0:	0092      	lsls	r2, r2, #2
 80167f2:	58d3      	ldr	r3, [r2, r3]
 80167f4:	699b      	ldr	r3, [r3, #24]
 80167f6:	2217      	movs	r2, #23
 80167f8:	18bc      	adds	r4, r7, r2
 80167fa:	19ba      	adds	r2, r7, r6
 80167fc:	7811      	ldrb	r1, [r2, #0]
 80167fe:	68fa      	ldr	r2, [r7, #12]
 8016800:	0010      	movs	r0, r2
 8016802:	4798      	blx	r3
 8016804:	0003      	movs	r3, r0
 8016806:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 8016808:	2217      	movs	r2, #23
 801680a:	18bb      	adds	r3, r7, r2
 801680c:	781b      	ldrb	r3, [r3, #0]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d002      	beq.n	8016818 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 8016812:	18bb      	adds	r3, r7, r2
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	e000      	b.n	801681a <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 8016818:	2300      	movs	r3, #0
}
 801681a:	0018      	movs	r0, r3
 801681c:	46bd      	mov	sp, r7
 801681e:	b007      	add	sp, #28
 8016820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016822:	46c0      	nop			; (mov r8, r8)
 8016824:	000002aa 	.word	0x000002aa
 8016828:	000002ae 	.word	0x000002ae

0801682c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801682c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801682e:	b087      	sub	sp, #28
 8016830:	af00      	add	r7, sp, #0
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	607a      	str	r2, [r7, #4]
 8016836:	200b      	movs	r0, #11
 8016838:	183b      	adds	r3, r7, r0
 801683a:	1c0a      	adds	r2, r1, #0
 801683c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801683e:	183b      	adds	r3, r7, r0
 8016840:	781b      	ldrb	r3, [r3, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d000      	beq.n	8016848 <USBD_LL_DataInStage+0x1c>
 8016846:	e07d      	b.n	8016944 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	3314      	adds	r3, #20
 801684c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801684e:	68fa      	ldr	r2, [r7, #12]
 8016850:	23a5      	movs	r3, #165	; 0xa5
 8016852:	009b      	lsls	r3, r3, #2
 8016854:	58d3      	ldr	r3, [r2, r3]
 8016856:	2b02      	cmp	r3, #2
 8016858:	d164      	bne.n	8016924 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	689a      	ldr	r2, [r3, #8]
 801685e:	693b      	ldr	r3, [r7, #16]
 8016860:	68db      	ldr	r3, [r3, #12]
 8016862:	429a      	cmp	r2, r3
 8016864:	d914      	bls.n	8016890 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 8016866:	693b      	ldr	r3, [r7, #16]
 8016868:	689a      	ldr	r2, [r3, #8]
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	68db      	ldr	r3, [r3, #12]
 801686e:	1ad2      	subs	r2, r2, r3
 8016870:	693b      	ldr	r3, [r7, #16]
 8016872:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016874:	693b      	ldr	r3, [r7, #16]
 8016876:	689a      	ldr	r2, [r3, #8]
 8016878:	6879      	ldr	r1, [r7, #4]
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	0018      	movs	r0, r3
 801687e:	f001 f9d1 	bl	8017c24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016882:	68f8      	ldr	r0, [r7, #12]
 8016884:	2300      	movs	r3, #0
 8016886:	2200      	movs	r2, #0
 8016888:	2100      	movs	r1, #0
 801688a:	f007 fc65 	bl	801e158 <USBD_LL_PrepareReceive>
 801688e:	e049      	b.n	8016924 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016890:	693b      	ldr	r3, [r7, #16]
 8016892:	68da      	ldr	r2, [r3, #12]
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	689b      	ldr	r3, [r3, #8]
 8016898:	429a      	cmp	r2, r3
 801689a:	d11f      	bne.n	80168dc <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 801689c:	693b      	ldr	r3, [r7, #16]
 801689e:	685a      	ldr	r2, [r3, #4]
 80168a0:	693b      	ldr	r3, [r7, #16]
 80168a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80168a4:	429a      	cmp	r2, r3
 80168a6:	d319      	bcc.n	80168dc <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	685a      	ldr	r2, [r3, #4]
 80168ac:	68f9      	ldr	r1, [r7, #12]
 80168ae:	23a6      	movs	r3, #166	; 0xa6
 80168b0:	009b      	lsls	r3, r3, #2
 80168b2:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d211      	bcs.n	80168dc <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	2200      	movs	r2, #0
 80168bc:	2100      	movs	r1, #0
 80168be:	0018      	movs	r0, r3
 80168c0:	f001 f9b0 	bl	8017c24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80168c4:	68fa      	ldr	r2, [r7, #12]
 80168c6:	23a6      	movs	r3, #166	; 0xa6
 80168c8:	009b      	lsls	r3, r3, #2
 80168ca:	2100      	movs	r1, #0
 80168cc:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80168ce:	68f8      	ldr	r0, [r7, #12]
 80168d0:	2300      	movs	r3, #0
 80168d2:	2200      	movs	r2, #0
 80168d4:	2100      	movs	r1, #0
 80168d6:	f007 fc3f 	bl	801e158 <USBD_LL_PrepareReceive>
 80168da:	e023      	b.n	8016924 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168dc:	68fa      	ldr	r2, [r7, #12]
 80168de:	23a7      	movs	r3, #167	; 0xa7
 80168e0:	009b      	lsls	r3, r3, #2
 80168e2:	5cd3      	ldrb	r3, [r2, r3]
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	2b03      	cmp	r3, #3
 80168e8:	d113      	bne.n	8016912 <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80168ea:	68fa      	ldr	r2, [r7, #12]
 80168ec:	23ae      	movs	r3, #174	; 0xae
 80168ee:	009b      	lsls	r3, r3, #2
 80168f0:	58d3      	ldr	r3, [r2, r3]
 80168f2:	68db      	ldr	r3, [r3, #12]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d00c      	beq.n	8016912 <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 80168f8:	68fa      	ldr	r2, [r7, #12]
 80168fa:	23b5      	movs	r3, #181	; 0xb5
 80168fc:	009b      	lsls	r3, r3, #2
 80168fe:	2100      	movs	r1, #0
 8016900:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016902:	68fa      	ldr	r2, [r7, #12]
 8016904:	23ae      	movs	r3, #174	; 0xae
 8016906:	009b      	lsls	r3, r3, #2
 8016908:	58d3      	ldr	r3, [r2, r3]
 801690a:	68db      	ldr	r3, [r3, #12]
 801690c:	68fa      	ldr	r2, [r7, #12]
 801690e:	0010      	movs	r0, r2
 8016910:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	2180      	movs	r1, #128	; 0x80
 8016916:	0018      	movs	r0, r3
 8016918:	f007 fb3d 	bl	801df96 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	0018      	movs	r0, r3
 8016920:	f001 f9d6 	bl	8017cd0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8016924:	68fa      	ldr	r2, [r7, #12]
 8016926:	23a8      	movs	r3, #168	; 0xa8
 8016928:	009b      	lsls	r3, r3, #2
 801692a:	5cd3      	ldrb	r3, [r2, r3]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d050      	beq.n	80169d2 <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	0018      	movs	r0, r3
 8016934:	f7ff fdd9 	bl	80164ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016938:	68fa      	ldr	r2, [r7, #12]
 801693a:	23a8      	movs	r3, #168	; 0xa8
 801693c:	009b      	lsls	r3, r3, #2
 801693e:	2100      	movs	r1, #0
 8016940:	54d1      	strb	r1, [r2, r3]
 8016942:	e046      	b.n	80169d2 <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016944:	260b      	movs	r6, #11
 8016946:	19bb      	adds	r3, r7, r6
 8016948:	781b      	ldrb	r3, [r3, #0]
 801694a:	2280      	movs	r2, #128	; 0x80
 801694c:	4252      	negs	r2, r2
 801694e:	4313      	orrs	r3, r2
 8016950:	b2da      	uxtb	r2, r3
 8016952:	2517      	movs	r5, #23
 8016954:	197c      	adds	r4, r7, r5
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	0011      	movs	r1, r2
 801695a:	0018      	movs	r0, r3
 801695c:	f000 f911 	bl	8016b82 <USBD_CoreFindEP>
 8016960:	0003      	movs	r3, r0
 8016962:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016964:	0029      	movs	r1, r5
 8016966:	187b      	adds	r3, r7, r1
 8016968:	781b      	ldrb	r3, [r3, #0]
 801696a:	2bff      	cmp	r3, #255	; 0xff
 801696c:	d031      	beq.n	80169d2 <USBD_LL_DataInStage+0x1a6>
 801696e:	187b      	adds	r3, r7, r1
 8016970:	781b      	ldrb	r3, [r3, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d12d      	bne.n	80169d2 <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016976:	68fa      	ldr	r2, [r7, #12]
 8016978:	23a7      	movs	r3, #167	; 0xa7
 801697a:	009b      	lsls	r3, r3, #2
 801697c:	5cd3      	ldrb	r3, [r2, r3]
 801697e:	b2db      	uxtb	r3, r3
 8016980:	2b03      	cmp	r3, #3
 8016982:	d126      	bne.n	80169d2 <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016984:	187b      	adds	r3, r7, r1
 8016986:	781a      	ldrb	r2, [r3, #0]
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	32ae      	adds	r2, #174	; 0xae
 801698c:	0092      	lsls	r2, r2, #2
 801698e:	58d3      	ldr	r3, [r2, r3]
 8016990:	695b      	ldr	r3, [r3, #20]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d01d      	beq.n	80169d2 <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 8016996:	0008      	movs	r0, r1
 8016998:	187b      	adds	r3, r7, r1
 801699a:	7819      	ldrb	r1, [r3, #0]
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	23b5      	movs	r3, #181	; 0xb5
 80169a0:	009b      	lsls	r3, r3, #2
 80169a2:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80169a4:	183b      	adds	r3, r7, r0
 80169a6:	781a      	ldrb	r2, [r3, #0]
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	32ae      	adds	r2, #174	; 0xae
 80169ac:	0092      	lsls	r2, r2, #2
 80169ae:	58d3      	ldr	r3, [r2, r3]
 80169b0:	695b      	ldr	r3, [r3, #20]
 80169b2:	2516      	movs	r5, #22
 80169b4:	197c      	adds	r4, r7, r5
 80169b6:	19ba      	adds	r2, r7, r6
 80169b8:	7811      	ldrb	r1, [r2, #0]
 80169ba:	68fa      	ldr	r2, [r7, #12]
 80169bc:	0010      	movs	r0, r2
 80169be:	4798      	blx	r3
 80169c0:	0003      	movs	r3, r0
 80169c2:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 80169c4:	197b      	adds	r3, r7, r5
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d002      	beq.n	80169d2 <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 80169cc:	197b      	adds	r3, r7, r5
 80169ce:	781b      	ldrb	r3, [r3, #0]
 80169d0:	e000      	b.n	80169d4 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 80169d2:	2300      	movs	r3, #0
}
 80169d4:	0018      	movs	r0, r3
 80169d6:	46bd      	mov	sp, r7
 80169d8:	b007      	add	sp, #28
 80169da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080169dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80169dc:	b590      	push	{r4, r7, lr}
 80169de:	b085      	sub	sp, #20
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80169e4:	240f      	movs	r4, #15
 80169e6:	193b      	adds	r3, r7, r4
 80169e8:	2200      	movs	r2, #0
 80169ea:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80169ec:	687a      	ldr	r2, [r7, #4]
 80169ee:	23a7      	movs	r3, #167	; 0xa7
 80169f0:	009b      	lsls	r3, r3, #2
 80169f2:	2101      	movs	r1, #1
 80169f4:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	23a5      	movs	r3, #165	; 0xa5
 80169fa:	009b      	lsls	r3, r3, #2
 80169fc:	2100      	movs	r1, #0
 80169fe:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2200      	movs	r2, #0
 8016a04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016a06:	687a      	ldr	r2, [r7, #4]
 8016a08:	23a9      	movs	r3, #169	; 0xa9
 8016a0a:	009b      	lsls	r3, r3, #2
 8016a0c:	2100      	movs	r1, #0
 8016a0e:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 8016a10:	687a      	ldr	r2, [r7, #4]
 8016a12:	23a8      	movs	r3, #168	; 0xa8
 8016a14:	009b      	lsls	r3, r3, #2
 8016a16:	2100      	movs	r1, #0
 8016a18:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016a1a:	687a      	ldr	r2, [r7, #4]
 8016a1c:	23ae      	movs	r3, #174	; 0xae
 8016a1e:	009b      	lsls	r3, r3, #2
 8016a20:	58d3      	ldr	r3, [r2, r3]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d016      	beq.n	8016a54 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016a26:	687a      	ldr	r2, [r7, #4]
 8016a28:	23ae      	movs	r3, #174	; 0xae
 8016a2a:	009b      	lsls	r3, r3, #2
 8016a2c:	58d3      	ldr	r3, [r2, r3]
 8016a2e:	685b      	ldr	r3, [r3, #4]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d00f      	beq.n	8016a54 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	23ae      	movs	r3, #174	; 0xae
 8016a38:	009b      	lsls	r3, r3, #2
 8016a3a:	58d3      	ldr	r3, [r2, r3]
 8016a3c:	685a      	ldr	r2, [r3, #4]
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	b2d9      	uxtb	r1, r3
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	0018      	movs	r0, r3
 8016a48:	4790      	blx	r2
 8016a4a:	1e03      	subs	r3, r0, #0
 8016a4c:	d002      	beq.n	8016a54 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 8016a4e:	193b      	adds	r3, r7, r4
 8016a50:	2203      	movs	r2, #3
 8016a52:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	2340      	movs	r3, #64	; 0x40
 8016a58:	2200      	movs	r2, #0
 8016a5a:	2100      	movs	r1, #0
 8016a5c:	f007 fa39 	bl	801ded2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016a60:	687a      	ldr	r2, [r7, #4]
 8016a62:	23b2      	movs	r3, #178	; 0xb2
 8016a64:	005b      	lsls	r3, r3, #1
 8016a66:	2101      	movs	r1, #1
 8016a68:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016a6a:	687a      	ldr	r2, [r7, #4]
 8016a6c:	23b0      	movs	r3, #176	; 0xb0
 8016a6e:	005b      	lsls	r3, r3, #1
 8016a70:	2140      	movs	r1, #64	; 0x40
 8016a72:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	2340      	movs	r3, #64	; 0x40
 8016a78:	2200      	movs	r2, #0
 8016a7a:	2180      	movs	r1, #128	; 0x80
 8016a7c:	f007 fa29 	bl	801ded2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2201      	movs	r2, #1
 8016a84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2240      	movs	r2, #64	; 0x40
 8016a8a:	621a      	str	r2, [r3, #32]

  return ret;
 8016a8c:	230f      	movs	r3, #15
 8016a8e:	18fb      	adds	r3, r7, r3
 8016a90:	781b      	ldrb	r3, [r3, #0]
}
 8016a92:	0018      	movs	r0, r3
 8016a94:	46bd      	mov	sp, r7
 8016a96:	b005      	add	sp, #20
 8016a98:	bd90      	pop	{r4, r7, pc}

08016a9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016a9a:	b580      	push	{r7, lr}
 8016a9c:	b082      	sub	sp, #8
 8016a9e:	af00      	add	r7, sp, #0
 8016aa0:	6078      	str	r0, [r7, #4]
 8016aa2:	000a      	movs	r2, r1
 8016aa4:	1cfb      	adds	r3, r7, #3
 8016aa6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	1cfa      	adds	r2, r7, #3
 8016aac:	7812      	ldrb	r2, [r2, #0]
 8016aae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016ab0:	2300      	movs	r3, #0
}
 8016ab2:	0018      	movs	r0, r3
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	b002      	add	sp, #8
 8016ab8:	bd80      	pop	{r7, pc}
	...

08016abc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016ac4:	687a      	ldr	r2, [r7, #4]
 8016ac6:	23a7      	movs	r3, #167	; 0xa7
 8016ac8:	009b      	lsls	r3, r3, #2
 8016aca:	5cd3      	ldrb	r3, [r2, r3]
 8016acc:	b2d9      	uxtb	r1, r3
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	4a05      	ldr	r2, [pc, #20]	; (8016ae8 <USBD_LL_Suspend+0x2c>)
 8016ad2:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	23a7      	movs	r3, #167	; 0xa7
 8016ad8:	009b      	lsls	r3, r3, #2
 8016ada:	2104      	movs	r1, #4
 8016adc:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8016ade:	2300      	movs	r3, #0
}
 8016ae0:	0018      	movs	r0, r3
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	b002      	add	sp, #8
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	0000029d 	.word	0x0000029d

08016aec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b082      	sub	sp, #8
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016af4:	687a      	ldr	r2, [r7, #4]
 8016af6:	23a7      	movs	r3, #167	; 0xa7
 8016af8:	009b      	lsls	r3, r3, #2
 8016afa:	5cd3      	ldrb	r3, [r2, r3]
 8016afc:	b2db      	uxtb	r3, r3
 8016afe:	2b04      	cmp	r3, #4
 8016b00:	d107      	bne.n	8016b12 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	4a05      	ldr	r2, [pc, #20]	; (8016b1c <USBD_LL_Resume+0x30>)
 8016b06:	5c9b      	ldrb	r3, [r3, r2]
 8016b08:	b2d9      	uxtb	r1, r3
 8016b0a:	687a      	ldr	r2, [r7, #4]
 8016b0c:	23a7      	movs	r3, #167	; 0xa7
 8016b0e:	009b      	lsls	r3, r3, #2
 8016b10:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8016b12:	2300      	movs	r3, #0
}
 8016b14:	0018      	movs	r0, r3
 8016b16:	46bd      	mov	sp, r7
 8016b18:	b002      	add	sp, #8
 8016b1a:	bd80      	pop	{r7, pc}
 8016b1c:	0000029d 	.word	0x0000029d

08016b20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b082      	sub	sp, #8
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b28:	687a      	ldr	r2, [r7, #4]
 8016b2a:	23a7      	movs	r3, #167	; 0xa7
 8016b2c:	009b      	lsls	r3, r3, #2
 8016b2e:	5cd3      	ldrb	r3, [r2, r3]
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	2b03      	cmp	r3, #3
 8016b34:	d114      	bne.n	8016b60 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016b36:	687a      	ldr	r2, [r7, #4]
 8016b38:	23ae      	movs	r3, #174	; 0xae
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	58d3      	ldr	r3, [r2, r3]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d00e      	beq.n	8016b60 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016b42:	687a      	ldr	r2, [r7, #4]
 8016b44:	23ae      	movs	r3, #174	; 0xae
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	58d3      	ldr	r3, [r2, r3]
 8016b4a:	69db      	ldr	r3, [r3, #28]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d007      	beq.n	8016b60 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016b50:	687a      	ldr	r2, [r7, #4]
 8016b52:	23ae      	movs	r3, #174	; 0xae
 8016b54:	009b      	lsls	r3, r3, #2
 8016b56:	58d3      	ldr	r3, [r2, r3]
 8016b58:	69db      	ldr	r3, [r3, #28]
 8016b5a:	687a      	ldr	r2, [r7, #4]
 8016b5c:	0010      	movs	r0, r2
 8016b5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016b60:	2300      	movs	r3, #0
}
 8016b62:	0018      	movs	r0, r3
 8016b64:	46bd      	mov	sp, r7
 8016b66:	b002      	add	sp, #8
 8016b68:	bd80      	pop	{r7, pc}

08016b6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b6a:	b580      	push	{r7, lr}
 8016b6c:	b082      	sub	sp, #8
 8016b6e:	af00      	add	r7, sp, #0
 8016b70:	6078      	str	r0, [r7, #4]
 8016b72:	000a      	movs	r2, r1
 8016b74:	1cfb      	adds	r3, r7, #3
 8016b76:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b78:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b7a:	0018      	movs	r0, r3
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	b002      	add	sp, #8
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b082      	sub	sp, #8
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	6078      	str	r0, [r7, #4]
 8016b8a:	000a      	movs	r2, r1
 8016b8c:	1cfb      	adds	r3, r7, #3
 8016b8e:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b92:	0018      	movs	r0, r3
 8016b94:	46bd      	mov	sp, r7
 8016b96:	b002      	add	sp, #8
 8016b98:	bd80      	pop	{r7, pc}

08016b9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b086      	sub	sp, #24
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
 8016ba2:	000a      	movs	r2, r1
 8016ba4:	1cfb      	adds	r3, r7, #3
 8016ba6:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	789a      	ldrb	r2, [r3, #2]
 8016bb8:	78db      	ldrb	r3, [r3, #3]
 8016bba:	021b      	lsls	r3, r3, #8
 8016bbc:	4313      	orrs	r3, r2
 8016bbe:	b29a      	uxth	r2, r3
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	b29b      	uxth	r3, r3
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d92a      	bls.n	8016c20 <USBD_GetEpDesc+0x86>
  {
    ptr = desc->bLength;
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	781b      	ldrb	r3, [r3, #0]
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	230a      	movs	r3, #10
 8016bd2:	18fb      	adds	r3, r7, r3
 8016bd4:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 8016bd6:	e016      	b.n	8016c06 <USBD_GetEpDesc+0x6c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016bd8:	230a      	movs	r3, #10
 8016bda:	18fa      	adds	r2, r7, r3
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	0011      	movs	r1, r2
 8016be0:	0018      	movs	r0, r3
 8016be2:	f000 f822 	bl	8016c2a <USBD_GetNextDesc>
 8016be6:	0003      	movs	r3, r0
 8016be8:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016bea:	697b      	ldr	r3, [r7, #20]
 8016bec:	785b      	ldrb	r3, [r3, #1]
 8016bee:	2b05      	cmp	r3, #5
 8016bf0:	d109      	bne.n	8016c06 <USBD_GetEpDesc+0x6c>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016bf2:	697b      	ldr	r3, [r7, #20]
 8016bf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016bf6:	693b      	ldr	r3, [r7, #16]
 8016bf8:	789b      	ldrb	r3, [r3, #2]
 8016bfa:	1cfa      	adds	r2, r7, #3
 8016bfc:	7812      	ldrb	r2, [r2, #0]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d00d      	beq.n	8016c1e <USBD_GetEpDesc+0x84>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016c02:	2300      	movs	r3, #0
 8016c04:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	789a      	ldrb	r2, [r3, #2]
 8016c0a:	78db      	ldrb	r3, [r3, #3]
 8016c0c:	021b      	lsls	r3, r3, #8
 8016c0e:	4313      	orrs	r3, r2
 8016c10:	b29a      	uxth	r2, r3
 8016c12:	230a      	movs	r3, #10
 8016c14:	18fb      	adds	r3, r7, r3
 8016c16:	881b      	ldrh	r3, [r3, #0]
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d8dd      	bhi.n	8016bd8 <USBD_GetEpDesc+0x3e>
 8016c1c:	e000      	b.n	8016c20 <USBD_GetEpDesc+0x86>
          break;
 8016c1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016c20:	693b      	ldr	r3, [r7, #16]
}
 8016c22:	0018      	movs	r0, r3
 8016c24:	46bd      	mov	sp, r7
 8016c26:	b006      	add	sp, #24
 8016c28:	bd80      	pop	{r7, pc}

08016c2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016c2a:	b580      	push	{r7, lr}
 8016c2c:	b084      	sub	sp, #16
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	6078      	str	r0, [r7, #4]
 8016c32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	881a      	ldrh	r2, [r3, #0]
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	b29b      	uxth	r3, r3
 8016c42:	18d3      	adds	r3, r2, r3
 8016c44:	b29a      	uxth	r2, r3
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	001a      	movs	r2, r3
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	189b      	adds	r3, r3, r2
 8016c54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016c56:	68fb      	ldr	r3, [r7, #12]
}
 8016c58:	0018      	movs	r0, r3
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	b004      	add	sp, #16
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b086      	sub	sp, #24
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	781a      	ldrb	r2, [r3, #0]
 8016c70:	2112      	movs	r1, #18
 8016c72:	187b      	adds	r3, r7, r1
 8016c74:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 8016c76:	697b      	ldr	r3, [r7, #20]
 8016c78:	3301      	adds	r3, #1
 8016c7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	781a      	ldrb	r2, [r3, #0]
 8016c80:	2010      	movs	r0, #16
 8016c82:	183b      	adds	r3, r7, r0
 8016c84:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016c86:	183b      	adds	r3, r7, r0
 8016c88:	881b      	ldrh	r3, [r3, #0]
 8016c8a:	021b      	lsls	r3, r3, #8
 8016c8c:	b21a      	sxth	r2, r3
 8016c8e:	187b      	adds	r3, r7, r1
 8016c90:	2100      	movs	r1, #0
 8016c92:	5e5b      	ldrsh	r3, [r3, r1]
 8016c94:	4313      	orrs	r3, r2
 8016c96:	b21a      	sxth	r2, r3
 8016c98:	210e      	movs	r1, #14
 8016c9a:	187b      	adds	r3, r7, r1
 8016c9c:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 8016c9e:	187b      	adds	r3, r7, r1
 8016ca0:	881b      	ldrh	r3, [r3, #0]
}
 8016ca2:	0018      	movs	r0, r3
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	b006      	add	sp, #24
 8016ca8:	bd80      	pop	{r7, pc}
	...

08016cac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016cac:	b590      	push	{r4, r7, lr}
 8016cae:	b085      	sub	sp, #20
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
 8016cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016cb6:	230f      	movs	r3, #15
 8016cb8:	18fb      	adds	r3, r7, r3
 8016cba:	2200      	movs	r2, #0
 8016cbc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	001a      	movs	r2, r3
 8016cc4:	2360      	movs	r3, #96	; 0x60
 8016cc6:	4013      	ands	r3, r2
 8016cc8:	2b40      	cmp	r3, #64	; 0x40
 8016cca:	d004      	beq.n	8016cd6 <USBD_StdDevReq+0x2a>
 8016ccc:	d85b      	bhi.n	8016d86 <USBD_StdDevReq+0xda>
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d013      	beq.n	8016cfa <USBD_StdDevReq+0x4e>
 8016cd2:	2b20      	cmp	r3, #32
 8016cd4:	d157      	bne.n	8016d86 <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016cd6:	687a      	ldr	r2, [r7, #4]
 8016cd8:	23b5      	movs	r3, #181	; 0xb5
 8016cda:	009b      	lsls	r3, r3, #2
 8016cdc:	58d2      	ldr	r2, [r2, r3]
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	32ae      	adds	r2, #174	; 0xae
 8016ce2:	0092      	lsls	r2, r2, #2
 8016ce4:	58d3      	ldr	r3, [r2, r3]
 8016ce6:	689b      	ldr	r3, [r3, #8]
 8016ce8:	220f      	movs	r2, #15
 8016cea:	18bc      	adds	r4, r7, r2
 8016cec:	6839      	ldr	r1, [r7, #0]
 8016cee:	687a      	ldr	r2, [r7, #4]
 8016cf0:	0010      	movs	r0, r2
 8016cf2:	4798      	blx	r3
 8016cf4:	0003      	movs	r3, r0
 8016cf6:	7023      	strb	r3, [r4, #0]
      break;
 8016cf8:	e04c      	b.n	8016d94 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016cfa:	683b      	ldr	r3, [r7, #0]
 8016cfc:	785b      	ldrb	r3, [r3, #1]
 8016cfe:	2b09      	cmp	r3, #9
 8016d00:	d839      	bhi.n	8016d76 <USBD_StdDevReq+0xca>
 8016d02:	009a      	lsls	r2, r3, #2
 8016d04:	4b27      	ldr	r3, [pc, #156]	; (8016da4 <USBD_StdDevReq+0xf8>)
 8016d06:	18d3      	adds	r3, r2, r3
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016d0c:	683a      	ldr	r2, [r7, #0]
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	0011      	movs	r1, r2
 8016d12:	0018      	movs	r0, r3
 8016d14:	f000 fada 	bl	80172cc <USBD_GetDescriptor>
          break;
 8016d18:	e034      	b.n	8016d84 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016d1a:	683a      	ldr	r2, [r7, #0]
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	0011      	movs	r1, r2
 8016d20:	0018      	movs	r0, r3
 8016d22:	f000 fcad 	bl	8017680 <USBD_SetAddress>
          break;
 8016d26:	e02d      	b.n	8016d84 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016d28:	230f      	movs	r3, #15
 8016d2a:	18fc      	adds	r4, r7, r3
 8016d2c:	683a      	ldr	r2, [r7, #0]
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	0011      	movs	r1, r2
 8016d32:	0018      	movs	r0, r3
 8016d34:	f000 fcfa 	bl	801772c <USBD_SetConfig>
 8016d38:	0003      	movs	r3, r0
 8016d3a:	7023      	strb	r3, [r4, #0]
          break;
 8016d3c:	e022      	b.n	8016d84 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016d3e:	683a      	ldr	r2, [r7, #0]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	0011      	movs	r1, r2
 8016d44:	0018      	movs	r0, r3
 8016d46:	f000 fdbf 	bl	80178c8 <USBD_GetConfig>
          break;
 8016d4a:	e01b      	b.n	8016d84 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016d4c:	683a      	ldr	r2, [r7, #0]
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	0011      	movs	r1, r2
 8016d52:	0018      	movs	r0, r3
 8016d54:	f000 fdf4 	bl	8017940 <USBD_GetStatus>
          break;
 8016d58:	e014      	b.n	8016d84 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016d5a:	683a      	ldr	r2, [r7, #0]
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	0011      	movs	r1, r2
 8016d60:	0018      	movs	r0, r3
 8016d62:	f000 fe28 	bl	80179b6 <USBD_SetFeature>
          break;
 8016d66:	e00d      	b.n	8016d84 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016d68:	683a      	ldr	r2, [r7, #0]
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	0011      	movs	r1, r2
 8016d6e:	0018      	movs	r0, r3
 8016d70:	f000 fe50 	bl	8017a14 <USBD_ClrFeature>
          break;
 8016d74:	e006      	b.n	8016d84 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 8016d76:	683a      	ldr	r2, [r7, #0]
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	0011      	movs	r1, r2
 8016d7c:	0018      	movs	r0, r3
 8016d7e:	f000 fead 	bl	8017adc <USBD_CtlError>
          break;
 8016d82:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8016d84:	e006      	b.n	8016d94 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 8016d86:	683a      	ldr	r2, [r7, #0]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	0011      	movs	r1, r2
 8016d8c:	0018      	movs	r0, r3
 8016d8e:	f000 fea5 	bl	8017adc <USBD_CtlError>
      break;
 8016d92:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8016d94:	230f      	movs	r3, #15
 8016d96:	18fb      	adds	r3, r7, r3
 8016d98:	781b      	ldrb	r3, [r3, #0]
}
 8016d9a:	0018      	movs	r0, r3
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	b005      	add	sp, #20
 8016da0:	bd90      	pop	{r4, r7, pc}
 8016da2:	46c0      	nop			; (mov r8, r8)
 8016da4:	080250ac 	.word	0x080250ac

08016da8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016da8:	b5b0      	push	{r4, r5, r7, lr}
 8016daa:	b084      	sub	sp, #16
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
 8016db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016db2:	230f      	movs	r3, #15
 8016db4:	18fb      	adds	r3, r7, r3
 8016db6:	2200      	movs	r2, #0
 8016db8:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	001a      	movs	r2, r3
 8016dc0:	2360      	movs	r3, #96	; 0x60
 8016dc2:	4013      	ands	r3, r2
 8016dc4:	2b40      	cmp	r3, #64	; 0x40
 8016dc6:	d005      	beq.n	8016dd4 <USBD_StdItfReq+0x2c>
 8016dc8:	d900      	bls.n	8016dcc <USBD_StdItfReq+0x24>
 8016dca:	e06c      	b.n	8016ea6 <USBD_StdItfReq+0xfe>
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d001      	beq.n	8016dd4 <USBD_StdItfReq+0x2c>
 8016dd0:	2b20      	cmp	r3, #32
 8016dd2:	d168      	bne.n	8016ea6 <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016dd4:	687a      	ldr	r2, [r7, #4]
 8016dd6:	23a7      	movs	r3, #167	; 0xa7
 8016dd8:	009b      	lsls	r3, r3, #2
 8016dda:	5cd3      	ldrb	r3, [r2, r3]
 8016ddc:	b2db      	uxtb	r3, r3
 8016dde:	3b01      	subs	r3, #1
 8016de0:	2b02      	cmp	r3, #2
 8016de2:	d857      	bhi.n	8016e94 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	889b      	ldrh	r3, [r3, #4]
 8016de8:	b2db      	uxtb	r3, r3
 8016dea:	2b01      	cmp	r3, #1
 8016dec:	d84b      	bhi.n	8016e86 <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	889b      	ldrh	r3, [r3, #4]
 8016df2:	b2da      	uxtb	r2, r3
 8016df4:	250e      	movs	r5, #14
 8016df6:	197c      	adds	r4, r7, r5
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	0011      	movs	r1, r2
 8016dfc:	0018      	movs	r0, r3
 8016dfe:	f7ff feb4 	bl	8016b6a <USBD_CoreFindIF>
 8016e02:	0003      	movs	r3, r0
 8016e04:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016e06:	0029      	movs	r1, r5
 8016e08:	187b      	adds	r3, r7, r1
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	2bff      	cmp	r3, #255	; 0xff
 8016e0e:	d028      	beq.n	8016e62 <USBD_StdItfReq+0xba>
 8016e10:	187b      	adds	r3, r7, r1
 8016e12:	781b      	ldrb	r3, [r3, #0]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d124      	bne.n	8016e62 <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016e18:	187b      	adds	r3, r7, r1
 8016e1a:	781a      	ldrb	r2, [r3, #0]
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	32ae      	adds	r2, #174	; 0xae
 8016e20:	0092      	lsls	r2, r2, #2
 8016e22:	58d3      	ldr	r3, [r2, r3]
 8016e24:	689b      	ldr	r3, [r3, #8]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d016      	beq.n	8016e58 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 8016e2a:	0008      	movs	r0, r1
 8016e2c:	187b      	adds	r3, r7, r1
 8016e2e:	7819      	ldrb	r1, [r3, #0]
 8016e30:	687a      	ldr	r2, [r7, #4]
 8016e32:	23b5      	movs	r3, #181	; 0xb5
 8016e34:	009b      	lsls	r3, r3, #2
 8016e36:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016e38:	183b      	adds	r3, r7, r0
 8016e3a:	781a      	ldrb	r2, [r3, #0]
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	32ae      	adds	r2, #174	; 0xae
 8016e40:	0092      	lsls	r2, r2, #2
 8016e42:	58d3      	ldr	r3, [r2, r3]
 8016e44:	689b      	ldr	r3, [r3, #8]
 8016e46:	220f      	movs	r2, #15
 8016e48:	18bc      	adds	r4, r7, r2
 8016e4a:	6839      	ldr	r1, [r7, #0]
 8016e4c:	687a      	ldr	r2, [r7, #4]
 8016e4e:	0010      	movs	r0, r2
 8016e50:	4798      	blx	r3
 8016e52:	0003      	movs	r3, r0
 8016e54:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e56:	e008      	b.n	8016e6a <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016e58:	230f      	movs	r3, #15
 8016e5a:	18fb      	adds	r3, r7, r3
 8016e5c:	2203      	movs	r2, #3
 8016e5e:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e60:	e003      	b.n	8016e6a <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016e62:	230f      	movs	r3, #15
 8016e64:	18fb      	adds	r3, r7, r3
 8016e66:	2203      	movs	r2, #3
 8016e68:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	88db      	ldrh	r3, [r3, #6]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d117      	bne.n	8016ea2 <USBD_StdItfReq+0xfa>
 8016e72:	230f      	movs	r3, #15
 8016e74:	18fb      	adds	r3, r7, r3
 8016e76:	781b      	ldrb	r3, [r3, #0]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d112      	bne.n	8016ea2 <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	0018      	movs	r0, r3
 8016e80:	f000 ff12 	bl	8017ca8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016e84:	e00d      	b.n	8016ea2 <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 8016e86:	683a      	ldr	r2, [r7, #0]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	0011      	movs	r1, r2
 8016e8c:	0018      	movs	r0, r3
 8016e8e:	f000 fe25 	bl	8017adc <USBD_CtlError>
          break;
 8016e92:	e006      	b.n	8016ea2 <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 8016e94:	683a      	ldr	r2, [r7, #0]
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	0011      	movs	r1, r2
 8016e9a:	0018      	movs	r0, r3
 8016e9c:	f000 fe1e 	bl	8017adc <USBD_CtlError>
          break;
 8016ea0:	e000      	b.n	8016ea4 <USBD_StdItfReq+0xfc>
          break;
 8016ea2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8016ea4:	e006      	b.n	8016eb4 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 8016ea6:	683a      	ldr	r2, [r7, #0]
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	0011      	movs	r1, r2
 8016eac:	0018      	movs	r0, r3
 8016eae:	f000 fe15 	bl	8017adc <USBD_CtlError>
      break;
 8016eb2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8016eb4:	230f      	movs	r3, #15
 8016eb6:	18fb      	adds	r3, r7, r3
 8016eb8:	781b      	ldrb	r3, [r3, #0]
}
 8016eba:	0018      	movs	r0, r3
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	b004      	add	sp, #16
 8016ec0:	bdb0      	pop	{r4, r5, r7, pc}

08016ec2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ec2:	b5b0      	push	{r4, r5, r7, lr}
 8016ec4:	b084      	sub	sp, #16
 8016ec6:	af00      	add	r7, sp, #0
 8016ec8:	6078      	str	r0, [r7, #4]
 8016eca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016ecc:	230f      	movs	r3, #15
 8016ece:	18fb      	adds	r3, r7, r3
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	889a      	ldrh	r2, [r3, #4]
 8016ed8:	230e      	movs	r3, #14
 8016eda:	18fb      	adds	r3, r7, r3
 8016edc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	781b      	ldrb	r3, [r3, #0]
 8016ee2:	001a      	movs	r2, r3
 8016ee4:	2360      	movs	r3, #96	; 0x60
 8016ee6:	4013      	ands	r3, r2
 8016ee8:	2b40      	cmp	r3, #64	; 0x40
 8016eea:	d006      	beq.n	8016efa <USBD_StdEPReq+0x38>
 8016eec:	d900      	bls.n	8016ef0 <USBD_StdEPReq+0x2e>
 8016eee:	e1de      	b.n	80172ae <USBD_StdEPReq+0x3ec>
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d039      	beq.n	8016f68 <USBD_StdEPReq+0xa6>
 8016ef4:	2b20      	cmp	r3, #32
 8016ef6:	d000      	beq.n	8016efa <USBD_StdEPReq+0x38>
 8016ef8:	e1d9      	b.n	80172ae <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016efa:	250d      	movs	r5, #13
 8016efc:	197c      	adds	r4, r7, r5
 8016efe:	230e      	movs	r3, #14
 8016f00:	18fb      	adds	r3, r7, r3
 8016f02:	781a      	ldrb	r2, [r3, #0]
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	0011      	movs	r1, r2
 8016f08:	0018      	movs	r0, r3
 8016f0a:	f7ff fe3a 	bl	8016b82 <USBD_CoreFindEP>
 8016f0e:	0003      	movs	r3, r0
 8016f10:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016f12:	197b      	adds	r3, r7, r5
 8016f14:	781b      	ldrb	r3, [r3, #0]
 8016f16:	2bff      	cmp	r3, #255	; 0xff
 8016f18:	d100      	bne.n	8016f1c <USBD_StdEPReq+0x5a>
 8016f1a:	e1cf      	b.n	80172bc <USBD_StdEPReq+0x3fa>
 8016f1c:	197b      	adds	r3, r7, r5
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d000      	beq.n	8016f26 <USBD_StdEPReq+0x64>
 8016f24:	e1ca      	b.n	80172bc <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 8016f26:	197b      	adds	r3, r7, r5
 8016f28:	7819      	ldrb	r1, [r3, #0]
 8016f2a:	687a      	ldr	r2, [r7, #4]
 8016f2c:	23b5      	movs	r3, #181	; 0xb5
 8016f2e:	009b      	lsls	r3, r3, #2
 8016f30:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016f32:	0029      	movs	r1, r5
 8016f34:	187b      	adds	r3, r7, r1
 8016f36:	781a      	ldrb	r2, [r3, #0]
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	32ae      	adds	r2, #174	; 0xae
 8016f3c:	0092      	lsls	r2, r2, #2
 8016f3e:	58d3      	ldr	r3, [r2, r3]
 8016f40:	689b      	ldr	r3, [r3, #8]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d100      	bne.n	8016f48 <USBD_StdEPReq+0x86>
 8016f46:	e1b9      	b.n	80172bc <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016f48:	187b      	adds	r3, r7, r1
 8016f4a:	781a      	ldrb	r2, [r3, #0]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	32ae      	adds	r2, #174	; 0xae
 8016f50:	0092      	lsls	r2, r2, #2
 8016f52:	58d3      	ldr	r3, [r2, r3]
 8016f54:	689b      	ldr	r3, [r3, #8]
 8016f56:	220f      	movs	r2, #15
 8016f58:	18bc      	adds	r4, r7, r2
 8016f5a:	6839      	ldr	r1, [r7, #0]
 8016f5c:	687a      	ldr	r2, [r7, #4]
 8016f5e:	0010      	movs	r0, r2
 8016f60:	4798      	blx	r3
 8016f62:	0003      	movs	r3, r0
 8016f64:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 8016f66:	e1a9      	b.n	80172bc <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	785b      	ldrb	r3, [r3, #1]
 8016f6c:	2b03      	cmp	r3, #3
 8016f6e:	d007      	beq.n	8016f80 <USBD_StdEPReq+0xbe>
 8016f70:	dd00      	ble.n	8016f74 <USBD_StdEPReq+0xb2>
 8016f72:	e194      	b.n	801729e <USBD_StdEPReq+0x3dc>
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d100      	bne.n	8016f7a <USBD_StdEPReq+0xb8>
 8016f78:	e0c9      	b.n	801710e <USBD_StdEPReq+0x24c>
 8016f7a:	2b01      	cmp	r3, #1
 8016f7c:	d04d      	beq.n	801701a <USBD_StdEPReq+0x158>
 8016f7e:	e18e      	b.n	801729e <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016f80:	687a      	ldr	r2, [r7, #4]
 8016f82:	23a7      	movs	r3, #167	; 0xa7
 8016f84:	009b      	lsls	r3, r3, #2
 8016f86:	5cd3      	ldrb	r3, [r2, r3]
 8016f88:	b2db      	uxtb	r3, r3
 8016f8a:	2b02      	cmp	r3, #2
 8016f8c:	d002      	beq.n	8016f94 <USBD_StdEPReq+0xd2>
 8016f8e:	2b03      	cmp	r3, #3
 8016f90:	d01e      	beq.n	8016fd0 <USBD_StdEPReq+0x10e>
 8016f92:	e03a      	b.n	801700a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016f94:	220e      	movs	r2, #14
 8016f96:	18bb      	adds	r3, r7, r2
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d011      	beq.n	8016fc2 <USBD_StdEPReq+0x100>
 8016f9e:	18bb      	adds	r3, r7, r2
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	2b80      	cmp	r3, #128	; 0x80
 8016fa4:	d00d      	beq.n	8016fc2 <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016fa6:	18bb      	adds	r3, r7, r2
 8016fa8:	781a      	ldrb	r2, [r3, #0]
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	0011      	movs	r1, r2
 8016fae:	0018      	movs	r0, r3
 8016fb0:	f006 fff1 	bl	801df96 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2180      	movs	r1, #128	; 0x80
 8016fb8:	0018      	movs	r0, r3
 8016fba:	f006 ffec 	bl	801df96 <USBD_LL_StallEP>
 8016fbe:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016fc0:	e02a      	b.n	8017018 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 8016fc2:	683a      	ldr	r2, [r7, #0]
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	0011      	movs	r1, r2
 8016fc8:	0018      	movs	r0, r3
 8016fca:	f000 fd87 	bl	8017adc <USBD_CtlError>
              break;
 8016fce:	e023      	b.n	8017018 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	885b      	ldrh	r3, [r3, #2]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d113      	bne.n	8017000 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016fd8:	220e      	movs	r2, #14
 8016fda:	18bb      	adds	r3, r7, r2
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d00e      	beq.n	8017000 <USBD_StdEPReq+0x13e>
 8016fe2:	18bb      	adds	r3, r7, r2
 8016fe4:	781b      	ldrb	r3, [r3, #0]
 8016fe6:	2b80      	cmp	r3, #128	; 0x80
 8016fe8:	d00a      	beq.n	8017000 <USBD_StdEPReq+0x13e>
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	88db      	ldrh	r3, [r3, #6]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d106      	bne.n	8017000 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ff2:	18bb      	adds	r3, r7, r2
 8016ff4:	781a      	ldrb	r2, [r3, #0]
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	0011      	movs	r1, r2
 8016ffa:	0018      	movs	r0, r3
 8016ffc:	f006 ffcb 	bl	801df96 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	0018      	movs	r0, r3
 8017004:	f000 fe50 	bl	8017ca8 <USBD_CtlSendStatus>

              break;
 8017008:	e006      	b.n	8017018 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 801700a:	683a      	ldr	r2, [r7, #0]
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	0011      	movs	r1, r2
 8017010:	0018      	movs	r0, r3
 8017012:	f000 fd63 	bl	8017adc <USBD_CtlError>
              break;
 8017016:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8017018:	e148      	b.n	80172ac <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801701a:	687a      	ldr	r2, [r7, #4]
 801701c:	23a7      	movs	r3, #167	; 0xa7
 801701e:	009b      	lsls	r3, r3, #2
 8017020:	5cd3      	ldrb	r3, [r2, r3]
 8017022:	b2db      	uxtb	r3, r3
 8017024:	2b02      	cmp	r3, #2
 8017026:	d002      	beq.n	801702e <USBD_StdEPReq+0x16c>
 8017028:	2b03      	cmp	r3, #3
 801702a:	d01e      	beq.n	801706a <USBD_StdEPReq+0x1a8>
 801702c:	e066      	b.n	80170fc <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801702e:	220e      	movs	r2, #14
 8017030:	18bb      	adds	r3, r7, r2
 8017032:	781b      	ldrb	r3, [r3, #0]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d011      	beq.n	801705c <USBD_StdEPReq+0x19a>
 8017038:	18bb      	adds	r3, r7, r2
 801703a:	781b      	ldrb	r3, [r3, #0]
 801703c:	2b80      	cmp	r3, #128	; 0x80
 801703e:	d00d      	beq.n	801705c <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017040:	18bb      	adds	r3, r7, r2
 8017042:	781a      	ldrb	r2, [r3, #0]
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	0011      	movs	r1, r2
 8017048:	0018      	movs	r0, r3
 801704a:	f006 ffa4 	bl	801df96 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	2180      	movs	r1, #128	; 0x80
 8017052:	0018      	movs	r0, r3
 8017054:	f006 ff9f 	bl	801df96 <USBD_LL_StallEP>
 8017058:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801705a:	e057      	b.n	801710c <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 801705c:	683a      	ldr	r2, [r7, #0]
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	0011      	movs	r1, r2
 8017062:	0018      	movs	r0, r3
 8017064:	f000 fd3a 	bl	8017adc <USBD_CtlError>
              break;
 8017068:	e050      	b.n	801710c <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	885b      	ldrh	r3, [r3, #2]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d14b      	bne.n	801710a <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017072:	210e      	movs	r1, #14
 8017074:	187b      	adds	r3, r7, r1
 8017076:	781b      	ldrb	r3, [r3, #0]
 8017078:	227f      	movs	r2, #127	; 0x7f
 801707a:	4013      	ands	r3, r2
 801707c:	d006      	beq.n	801708c <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801707e:	187b      	adds	r3, r7, r1
 8017080:	781a      	ldrb	r2, [r3, #0]
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	0011      	movs	r1, r2
 8017086:	0018      	movs	r0, r3
 8017088:	f006 ffb0 	bl	801dfec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	0018      	movs	r0, r3
 8017090:	f000 fe0a 	bl	8017ca8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017094:	250d      	movs	r5, #13
 8017096:	197c      	adds	r4, r7, r5
 8017098:	230e      	movs	r3, #14
 801709a:	18fb      	adds	r3, r7, r3
 801709c:	781a      	ldrb	r2, [r3, #0]
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	0011      	movs	r1, r2
 80170a2:	0018      	movs	r0, r3
 80170a4:	f7ff fd6d 	bl	8016b82 <USBD_CoreFindEP>
 80170a8:	0003      	movs	r3, r0
 80170aa:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80170ac:	197b      	adds	r3, r7, r5
 80170ae:	781b      	ldrb	r3, [r3, #0]
 80170b0:	2bff      	cmp	r3, #255	; 0xff
 80170b2:	d02a      	beq.n	801710a <USBD_StdEPReq+0x248>
 80170b4:	197b      	adds	r3, r7, r5
 80170b6:	781b      	ldrb	r3, [r3, #0]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d126      	bne.n	801710a <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 80170bc:	197b      	adds	r3, r7, r5
 80170be:	7819      	ldrb	r1, [r3, #0]
 80170c0:	687a      	ldr	r2, [r7, #4]
 80170c2:	23b5      	movs	r3, #181	; 0xb5
 80170c4:	009b      	lsls	r3, r3, #2
 80170c6:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80170c8:	0029      	movs	r1, r5
 80170ca:	187b      	adds	r3, r7, r1
 80170cc:	781a      	ldrb	r2, [r3, #0]
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	32ae      	adds	r2, #174	; 0xae
 80170d2:	0092      	lsls	r2, r2, #2
 80170d4:	58d3      	ldr	r3, [r2, r3]
 80170d6:	689b      	ldr	r3, [r3, #8]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d016      	beq.n	801710a <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80170dc:	187b      	adds	r3, r7, r1
 80170de:	781a      	ldrb	r2, [r3, #0]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	32ae      	adds	r2, #174	; 0xae
 80170e4:	0092      	lsls	r2, r2, #2
 80170e6:	58d3      	ldr	r3, [r2, r3]
 80170e8:	689b      	ldr	r3, [r3, #8]
 80170ea:	220f      	movs	r2, #15
 80170ec:	18bc      	adds	r4, r7, r2
 80170ee:	6839      	ldr	r1, [r7, #0]
 80170f0:	687a      	ldr	r2, [r7, #4]
 80170f2:	0010      	movs	r0, r2
 80170f4:	4798      	blx	r3
 80170f6:	0003      	movs	r3, r0
 80170f8:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 80170fa:	e006      	b.n	801710a <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 80170fc:	683a      	ldr	r2, [r7, #0]
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	0011      	movs	r1, r2
 8017102:	0018      	movs	r0, r3
 8017104:	f000 fcea 	bl	8017adc <USBD_CtlError>
              break;
 8017108:	e000      	b.n	801710c <USBD_StdEPReq+0x24a>
              break;
 801710a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 801710c:	e0ce      	b.n	80172ac <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801710e:	687a      	ldr	r2, [r7, #4]
 8017110:	23a7      	movs	r3, #167	; 0xa7
 8017112:	009b      	lsls	r3, r3, #2
 8017114:	5cd3      	ldrb	r3, [r2, r3]
 8017116:	b2db      	uxtb	r3, r3
 8017118:	2b02      	cmp	r3, #2
 801711a:	d002      	beq.n	8017122 <USBD_StdEPReq+0x260>
 801711c:	2b03      	cmp	r3, #3
 801711e:	d03c      	beq.n	801719a <USBD_StdEPReq+0x2d8>
 8017120:	e0b5      	b.n	801728e <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017122:	220e      	movs	r2, #14
 8017124:	18bb      	adds	r3, r7, r2
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d00a      	beq.n	8017142 <USBD_StdEPReq+0x280>
 801712c:	18bb      	adds	r3, r7, r2
 801712e:	781b      	ldrb	r3, [r3, #0]
 8017130:	2b80      	cmp	r3, #128	; 0x80
 8017132:	d006      	beq.n	8017142 <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 8017134:	683a      	ldr	r2, [r7, #0]
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	0011      	movs	r1, r2
 801713a:	0018      	movs	r0, r3
 801713c:	f000 fcce 	bl	8017adc <USBD_CtlError>
                break;
 8017140:	e0ac      	b.n	801729c <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017142:	220e      	movs	r2, #14
 8017144:	18bb      	adds	r3, r7, r2
 8017146:	781b      	ldrb	r3, [r3, #0]
 8017148:	b25b      	sxtb	r3, r3
 801714a:	2b00      	cmp	r3, #0
 801714c:	da0c      	bge.n	8017168 <USBD_StdEPReq+0x2a6>
 801714e:	18bb      	adds	r3, r7, r2
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	227f      	movs	r2, #127	; 0x7f
 8017154:	401a      	ands	r2, r3
 8017156:	0013      	movs	r3, r2
 8017158:	009b      	lsls	r3, r3, #2
 801715a:	189b      	adds	r3, r3, r2
 801715c:	009b      	lsls	r3, r3, #2
 801715e:	3310      	adds	r3, #16
 8017160:	687a      	ldr	r2, [r7, #4]
 8017162:	18d3      	adds	r3, r2, r3
 8017164:	3304      	adds	r3, #4
 8017166:	e00d      	b.n	8017184 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017168:	230e      	movs	r3, #14
 801716a:	18fb      	adds	r3, r7, r3
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	227f      	movs	r2, #127	; 0x7f
 8017170:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017172:	0013      	movs	r3, r2
 8017174:	009b      	lsls	r3, r3, #2
 8017176:	189b      	adds	r3, r3, r2
 8017178:	009b      	lsls	r3, r3, #2
 801717a:	3351      	adds	r3, #81	; 0x51
 801717c:	33ff      	adds	r3, #255	; 0xff
 801717e:	687a      	ldr	r2, [r7, #4]
 8017180:	18d3      	adds	r3, r2, r3
 8017182:	3304      	adds	r3, #4
 8017184:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	2200      	movs	r2, #0
 801718a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801718c:	68b9      	ldr	r1, [r7, #8]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	2202      	movs	r2, #2
 8017192:	0018      	movs	r0, r3
 8017194:	f000 fd2a 	bl	8017bec <USBD_CtlSendData>
              break;
 8017198:	e080      	b.n	801729c <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801719a:	220e      	movs	r2, #14
 801719c:	18bb      	adds	r3, r7, r2
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	b25b      	sxtb	r3, r3
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	da14      	bge.n	80171d0 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80171a6:	18bb      	adds	r3, r7, r2
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	220f      	movs	r2, #15
 80171ac:	401a      	ands	r2, r3
 80171ae:	6879      	ldr	r1, [r7, #4]
 80171b0:	0013      	movs	r3, r2
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	189b      	adds	r3, r3, r2
 80171b6:	009b      	lsls	r3, r3, #2
 80171b8:	18cb      	adds	r3, r1, r3
 80171ba:	3324      	adds	r3, #36	; 0x24
 80171bc:	881b      	ldrh	r3, [r3, #0]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d11e      	bne.n	8017200 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 80171c2:	683a      	ldr	r2, [r7, #0]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	0011      	movs	r1, r2
 80171c8:	0018      	movs	r0, r3
 80171ca:	f000 fc87 	bl	8017adc <USBD_CtlError>
                  break;
 80171ce:	e065      	b.n	801729c <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80171d0:	230e      	movs	r3, #14
 80171d2:	18fb      	adds	r3, r7, r3
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	220f      	movs	r2, #15
 80171d8:	401a      	ands	r2, r3
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	23b2      	movs	r3, #178	; 0xb2
 80171de:	0059      	lsls	r1, r3, #1
 80171e0:	0013      	movs	r3, r2
 80171e2:	009b      	lsls	r3, r3, #2
 80171e4:	189b      	adds	r3, r3, r2
 80171e6:	009b      	lsls	r3, r3, #2
 80171e8:	18c3      	adds	r3, r0, r3
 80171ea:	185b      	adds	r3, r3, r1
 80171ec:	881b      	ldrh	r3, [r3, #0]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d106      	bne.n	8017200 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 80171f2:	683a      	ldr	r2, [r7, #0]
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	0011      	movs	r1, r2
 80171f8:	0018      	movs	r0, r3
 80171fa:	f000 fc6f 	bl	8017adc <USBD_CtlError>
                  break;
 80171fe:	e04d      	b.n	801729c <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017200:	220e      	movs	r2, #14
 8017202:	18bb      	adds	r3, r7, r2
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	b25b      	sxtb	r3, r3
 8017208:	2b00      	cmp	r3, #0
 801720a:	da0c      	bge.n	8017226 <USBD_StdEPReq+0x364>
 801720c:	18bb      	adds	r3, r7, r2
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	227f      	movs	r2, #127	; 0x7f
 8017212:	401a      	ands	r2, r3
 8017214:	0013      	movs	r3, r2
 8017216:	009b      	lsls	r3, r3, #2
 8017218:	189b      	adds	r3, r3, r2
 801721a:	009b      	lsls	r3, r3, #2
 801721c:	3310      	adds	r3, #16
 801721e:	687a      	ldr	r2, [r7, #4]
 8017220:	18d3      	adds	r3, r2, r3
 8017222:	3304      	adds	r3, #4
 8017224:	e00d      	b.n	8017242 <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017226:	230e      	movs	r3, #14
 8017228:	18fb      	adds	r3, r7, r3
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	227f      	movs	r2, #127	; 0x7f
 801722e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017230:	0013      	movs	r3, r2
 8017232:	009b      	lsls	r3, r3, #2
 8017234:	189b      	adds	r3, r3, r2
 8017236:	009b      	lsls	r3, r3, #2
 8017238:	3351      	adds	r3, #81	; 0x51
 801723a:	33ff      	adds	r3, #255	; 0xff
 801723c:	687a      	ldr	r2, [r7, #4]
 801723e:	18d3      	adds	r3, r2, r3
 8017240:	3304      	adds	r3, #4
 8017242:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017244:	220e      	movs	r2, #14
 8017246:	18bb      	adds	r3, r7, r2
 8017248:	781b      	ldrb	r3, [r3, #0]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d003      	beq.n	8017256 <USBD_StdEPReq+0x394>
 801724e:	18bb      	adds	r3, r7, r2
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	2b80      	cmp	r3, #128	; 0x80
 8017254:	d103      	bne.n	801725e <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	2200      	movs	r2, #0
 801725a:	601a      	str	r2, [r3, #0]
 801725c:	e010      	b.n	8017280 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801725e:	230e      	movs	r3, #14
 8017260:	18fb      	adds	r3, r7, r3
 8017262:	781a      	ldrb	r2, [r3, #0]
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	0011      	movs	r1, r2
 8017268:	0018      	movs	r0, r3
 801726a:	f006 feea 	bl	801e042 <USBD_LL_IsStallEP>
 801726e:	1e03      	subs	r3, r0, #0
 8017270:	d003      	beq.n	801727a <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	2201      	movs	r2, #1
 8017276:	601a      	str	r2, [r3, #0]
 8017278:	e002      	b.n	8017280 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	2200      	movs	r2, #0
 801727e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017280:	68b9      	ldr	r1, [r7, #8]
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	2202      	movs	r2, #2
 8017286:	0018      	movs	r0, r3
 8017288:	f000 fcb0 	bl	8017bec <USBD_CtlSendData>
              break;
 801728c:	e006      	b.n	801729c <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 801728e:	683a      	ldr	r2, [r7, #0]
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	0011      	movs	r1, r2
 8017294:	0018      	movs	r0, r3
 8017296:	f000 fc21 	bl	8017adc <USBD_CtlError>
              break;
 801729a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 801729c:	e006      	b.n	80172ac <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 801729e:	683a      	ldr	r2, [r7, #0]
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	0011      	movs	r1, r2
 80172a4:	0018      	movs	r0, r3
 80172a6:	f000 fc19 	bl	8017adc <USBD_CtlError>
          break;
 80172aa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80172ac:	e007      	b.n	80172be <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 80172ae:	683a      	ldr	r2, [r7, #0]
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	0011      	movs	r1, r2
 80172b4:	0018      	movs	r0, r3
 80172b6:	f000 fc11 	bl	8017adc <USBD_CtlError>
      break;
 80172ba:	e000      	b.n	80172be <USBD_StdEPReq+0x3fc>
      break;
 80172bc:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80172be:	230f      	movs	r3, #15
 80172c0:	18fb      	adds	r3, r7, r3
 80172c2:	781b      	ldrb	r3, [r3, #0]
}
 80172c4:	0018      	movs	r0, r3
 80172c6:	46bd      	mov	sp, r7
 80172c8:	b004      	add	sp, #16
 80172ca:	bdb0      	pop	{r4, r5, r7, pc}

080172cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b084      	sub	sp, #16
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
 80172d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80172d6:	2308      	movs	r3, #8
 80172d8:	18fb      	adds	r3, r7, r3
 80172da:	2200      	movs	r2, #0
 80172dc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80172de:	2300      	movs	r3, #0
 80172e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80172e2:	230b      	movs	r3, #11
 80172e4:	18fb      	adds	r3, r7, r3
 80172e6:	2200      	movs	r2, #0
 80172e8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	885b      	ldrh	r3, [r3, #2]
 80172ee:	0a1b      	lsrs	r3, r3, #8
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	2b0f      	cmp	r3, #15
 80172f4:	d900      	bls.n	80172f8 <USBD_GetDescriptor+0x2c>
 80172f6:	e17b      	b.n	80175f0 <USBD_GetDescriptor+0x324>
 80172f8:	009a      	lsls	r2, r3, #2
 80172fa:	4bdd      	ldr	r3, [pc, #884]	; (8017670 <USBD_GetDescriptor+0x3a4>)
 80172fc:	18d3      	adds	r3, r2, r3
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017302:	687a      	ldr	r2, [r7, #4]
 8017304:	23ad      	movs	r3, #173	; 0xad
 8017306:	009b      	lsls	r3, r3, #2
 8017308:	58d3      	ldr	r3, [r2, r3]
 801730a:	69db      	ldr	r3, [r3, #28]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d00d      	beq.n	801732c <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017310:	687a      	ldr	r2, [r7, #4]
 8017312:	23ad      	movs	r3, #173	; 0xad
 8017314:	009b      	lsls	r3, r3, #2
 8017316:	58d3      	ldr	r3, [r2, r3]
 8017318:	69db      	ldr	r3, [r3, #28]
 801731a:	687a      	ldr	r2, [r7, #4]
 801731c:	7c12      	ldrb	r2, [r2, #16]
 801731e:	2108      	movs	r1, #8
 8017320:	1879      	adds	r1, r7, r1
 8017322:	0010      	movs	r0, r2
 8017324:	4798      	blx	r3
 8017326:	0003      	movs	r3, r0
 8017328:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801732a:	e16e      	b.n	801760a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 801732c:	683a      	ldr	r2, [r7, #0]
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	0011      	movs	r1, r2
 8017332:	0018      	movs	r0, r3
 8017334:	f000 fbd2 	bl	8017adc <USBD_CtlError>
        err++;
 8017338:	210b      	movs	r1, #11
 801733a:	187b      	adds	r3, r7, r1
 801733c:	781a      	ldrb	r2, [r3, #0]
 801733e:	187b      	adds	r3, r7, r1
 8017340:	3201      	adds	r2, #1
 8017342:	701a      	strb	r2, [r3, #0]
      break;
 8017344:	e161      	b.n	801760a <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017346:	687a      	ldr	r2, [r7, #4]
 8017348:	23ad      	movs	r3, #173	; 0xad
 801734a:	009b      	lsls	r3, r3, #2
 801734c:	58d3      	ldr	r3, [r2, r3]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	687a      	ldr	r2, [r7, #4]
 8017352:	7c12      	ldrb	r2, [r2, #16]
 8017354:	2108      	movs	r1, #8
 8017356:	1879      	adds	r1, r7, r1
 8017358:	0010      	movs	r0, r2
 801735a:	4798      	blx	r3
 801735c:	0003      	movs	r3, r0
 801735e:	60fb      	str	r3, [r7, #12]
      break;
 8017360:	e153      	b.n	801760a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	7c1b      	ldrb	r3, [r3, #16]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d10f      	bne.n	801738a <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801736a:	687a      	ldr	r2, [r7, #4]
 801736c:	23ae      	movs	r3, #174	; 0xae
 801736e:	009b      	lsls	r3, r3, #2
 8017370:	58d3      	ldr	r3, [r2, r3]
 8017372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017374:	2208      	movs	r2, #8
 8017376:	18ba      	adds	r2, r7, r2
 8017378:	0010      	movs	r0, r2
 801737a:	4798      	blx	r3
 801737c:	0003      	movs	r3, r0
 801737e:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	3301      	adds	r3, #1
 8017384:	2202      	movs	r2, #2
 8017386:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017388:	e13f      	b.n	801760a <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801738a:	687a      	ldr	r2, [r7, #4]
 801738c:	23ae      	movs	r3, #174	; 0xae
 801738e:	009b      	lsls	r3, r3, #2
 8017390:	58d3      	ldr	r3, [r2, r3]
 8017392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017394:	2208      	movs	r2, #8
 8017396:	18ba      	adds	r2, r7, r2
 8017398:	0010      	movs	r0, r2
 801739a:	4798      	blx	r3
 801739c:	0003      	movs	r3, r0
 801739e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	3301      	adds	r3, #1
 80173a4:	2202      	movs	r2, #2
 80173a6:	701a      	strb	r2, [r3, #0]
      break;
 80173a8:	e12f      	b.n	801760a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	885b      	ldrh	r3, [r3, #2]
 80173ae:	b2db      	uxtb	r3, r3
 80173b0:	2b05      	cmp	r3, #5
 80173b2:	d900      	bls.n	80173b6 <USBD_GetDescriptor+0xea>
 80173b4:	e0d0      	b.n	8017558 <USBD_GetDescriptor+0x28c>
 80173b6:	009a      	lsls	r2, r3, #2
 80173b8:	4bae      	ldr	r3, [pc, #696]	; (8017674 <USBD_GetDescriptor+0x3a8>)
 80173ba:	18d3      	adds	r3, r2, r3
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80173c0:	687a      	ldr	r2, [r7, #4]
 80173c2:	23ad      	movs	r3, #173	; 0xad
 80173c4:	009b      	lsls	r3, r3, #2
 80173c6:	58d3      	ldr	r3, [r2, r3]
 80173c8:	685b      	ldr	r3, [r3, #4]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d00d      	beq.n	80173ea <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80173ce:	687a      	ldr	r2, [r7, #4]
 80173d0:	23ad      	movs	r3, #173	; 0xad
 80173d2:	009b      	lsls	r3, r3, #2
 80173d4:	58d3      	ldr	r3, [r2, r3]
 80173d6:	685b      	ldr	r3, [r3, #4]
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	7c12      	ldrb	r2, [r2, #16]
 80173dc:	2108      	movs	r1, #8
 80173de:	1879      	adds	r1, r7, r1
 80173e0:	0010      	movs	r0, r2
 80173e2:	4798      	blx	r3
 80173e4:	0003      	movs	r3, r0
 80173e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173e8:	e0c3      	b.n	8017572 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80173ea:	683a      	ldr	r2, [r7, #0]
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	0011      	movs	r1, r2
 80173f0:	0018      	movs	r0, r3
 80173f2:	f000 fb73 	bl	8017adc <USBD_CtlError>
            err++;
 80173f6:	210b      	movs	r1, #11
 80173f8:	187b      	adds	r3, r7, r1
 80173fa:	781a      	ldrb	r2, [r3, #0]
 80173fc:	187b      	adds	r3, r7, r1
 80173fe:	3201      	adds	r2, #1
 8017400:	701a      	strb	r2, [r3, #0]
          break;
 8017402:	e0b6      	b.n	8017572 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017404:	687a      	ldr	r2, [r7, #4]
 8017406:	23ad      	movs	r3, #173	; 0xad
 8017408:	009b      	lsls	r3, r3, #2
 801740a:	58d3      	ldr	r3, [r2, r3]
 801740c:	689b      	ldr	r3, [r3, #8]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d00d      	beq.n	801742e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017412:	687a      	ldr	r2, [r7, #4]
 8017414:	23ad      	movs	r3, #173	; 0xad
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	58d3      	ldr	r3, [r2, r3]
 801741a:	689b      	ldr	r3, [r3, #8]
 801741c:	687a      	ldr	r2, [r7, #4]
 801741e:	7c12      	ldrb	r2, [r2, #16]
 8017420:	2108      	movs	r1, #8
 8017422:	1879      	adds	r1, r7, r1
 8017424:	0010      	movs	r0, r2
 8017426:	4798      	blx	r3
 8017428:	0003      	movs	r3, r0
 801742a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801742c:	e0a1      	b.n	8017572 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801742e:	683a      	ldr	r2, [r7, #0]
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	0011      	movs	r1, r2
 8017434:	0018      	movs	r0, r3
 8017436:	f000 fb51 	bl	8017adc <USBD_CtlError>
            err++;
 801743a:	210b      	movs	r1, #11
 801743c:	187b      	adds	r3, r7, r1
 801743e:	781a      	ldrb	r2, [r3, #0]
 8017440:	187b      	adds	r3, r7, r1
 8017442:	3201      	adds	r2, #1
 8017444:	701a      	strb	r2, [r3, #0]
          break;
 8017446:	e094      	b.n	8017572 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017448:	687a      	ldr	r2, [r7, #4]
 801744a:	23ad      	movs	r3, #173	; 0xad
 801744c:	009b      	lsls	r3, r3, #2
 801744e:	58d3      	ldr	r3, [r2, r3]
 8017450:	68db      	ldr	r3, [r3, #12]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d00d      	beq.n	8017472 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017456:	687a      	ldr	r2, [r7, #4]
 8017458:	23ad      	movs	r3, #173	; 0xad
 801745a:	009b      	lsls	r3, r3, #2
 801745c:	58d3      	ldr	r3, [r2, r3]
 801745e:	68db      	ldr	r3, [r3, #12]
 8017460:	687a      	ldr	r2, [r7, #4]
 8017462:	7c12      	ldrb	r2, [r2, #16]
 8017464:	2108      	movs	r1, #8
 8017466:	1879      	adds	r1, r7, r1
 8017468:	0010      	movs	r0, r2
 801746a:	4798      	blx	r3
 801746c:	0003      	movs	r3, r0
 801746e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017470:	e07f      	b.n	8017572 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8017472:	683a      	ldr	r2, [r7, #0]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	0011      	movs	r1, r2
 8017478:	0018      	movs	r0, r3
 801747a:	f000 fb2f 	bl	8017adc <USBD_CtlError>
            err++;
 801747e:	210b      	movs	r1, #11
 8017480:	187b      	adds	r3, r7, r1
 8017482:	781a      	ldrb	r2, [r3, #0]
 8017484:	187b      	adds	r3, r7, r1
 8017486:	3201      	adds	r2, #1
 8017488:	701a      	strb	r2, [r3, #0]
          break;
 801748a:	e072      	b.n	8017572 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801748c:	687a      	ldr	r2, [r7, #4]
 801748e:	23ad      	movs	r3, #173	; 0xad
 8017490:	009b      	lsls	r3, r3, #2
 8017492:	58d3      	ldr	r3, [r2, r3]
 8017494:	691b      	ldr	r3, [r3, #16]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d00d      	beq.n	80174b6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801749a:	687a      	ldr	r2, [r7, #4]
 801749c:	23ad      	movs	r3, #173	; 0xad
 801749e:	009b      	lsls	r3, r3, #2
 80174a0:	58d3      	ldr	r3, [r2, r3]
 80174a2:	691b      	ldr	r3, [r3, #16]
 80174a4:	687a      	ldr	r2, [r7, #4]
 80174a6:	7c12      	ldrb	r2, [r2, #16]
 80174a8:	2108      	movs	r1, #8
 80174aa:	1879      	adds	r1, r7, r1
 80174ac:	0010      	movs	r0, r2
 80174ae:	4798      	blx	r3
 80174b0:	0003      	movs	r3, r0
 80174b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80174b4:	e05d      	b.n	8017572 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80174b6:	683a      	ldr	r2, [r7, #0]
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	0011      	movs	r1, r2
 80174bc:	0018      	movs	r0, r3
 80174be:	f000 fb0d 	bl	8017adc <USBD_CtlError>
            err++;
 80174c2:	210b      	movs	r1, #11
 80174c4:	187b      	adds	r3, r7, r1
 80174c6:	781a      	ldrb	r2, [r3, #0]
 80174c8:	187b      	adds	r3, r7, r1
 80174ca:	3201      	adds	r2, #1
 80174cc:	701a      	strb	r2, [r3, #0]
          break;
 80174ce:	e050      	b.n	8017572 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	23ad      	movs	r3, #173	; 0xad
 80174d4:	009b      	lsls	r3, r3, #2
 80174d6:	58d3      	ldr	r3, [r2, r3]
 80174d8:	695b      	ldr	r3, [r3, #20]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d00d      	beq.n	80174fa <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80174de:	687a      	ldr	r2, [r7, #4]
 80174e0:	23ad      	movs	r3, #173	; 0xad
 80174e2:	009b      	lsls	r3, r3, #2
 80174e4:	58d3      	ldr	r3, [r2, r3]
 80174e6:	695b      	ldr	r3, [r3, #20]
 80174e8:	687a      	ldr	r2, [r7, #4]
 80174ea:	7c12      	ldrb	r2, [r2, #16]
 80174ec:	2108      	movs	r1, #8
 80174ee:	1879      	adds	r1, r7, r1
 80174f0:	0010      	movs	r0, r2
 80174f2:	4798      	blx	r3
 80174f4:	0003      	movs	r3, r0
 80174f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80174f8:	e03b      	b.n	8017572 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80174fa:	683a      	ldr	r2, [r7, #0]
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	0011      	movs	r1, r2
 8017500:	0018      	movs	r0, r3
 8017502:	f000 faeb 	bl	8017adc <USBD_CtlError>
            err++;
 8017506:	210b      	movs	r1, #11
 8017508:	187b      	adds	r3, r7, r1
 801750a:	781a      	ldrb	r2, [r3, #0]
 801750c:	187b      	adds	r3, r7, r1
 801750e:	3201      	adds	r2, #1
 8017510:	701a      	strb	r2, [r3, #0]
          break;
 8017512:	e02e      	b.n	8017572 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	23ad      	movs	r3, #173	; 0xad
 8017518:	009b      	lsls	r3, r3, #2
 801751a:	58d3      	ldr	r3, [r2, r3]
 801751c:	699b      	ldr	r3, [r3, #24]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d00d      	beq.n	801753e <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017522:	687a      	ldr	r2, [r7, #4]
 8017524:	23ad      	movs	r3, #173	; 0xad
 8017526:	009b      	lsls	r3, r3, #2
 8017528:	58d3      	ldr	r3, [r2, r3]
 801752a:	699b      	ldr	r3, [r3, #24]
 801752c:	687a      	ldr	r2, [r7, #4]
 801752e:	7c12      	ldrb	r2, [r2, #16]
 8017530:	2108      	movs	r1, #8
 8017532:	1879      	adds	r1, r7, r1
 8017534:	0010      	movs	r0, r2
 8017536:	4798      	blx	r3
 8017538:	0003      	movs	r3, r0
 801753a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801753c:	e019      	b.n	8017572 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801753e:	683a      	ldr	r2, [r7, #0]
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	0011      	movs	r1, r2
 8017544:	0018      	movs	r0, r3
 8017546:	f000 fac9 	bl	8017adc <USBD_CtlError>
            err++;
 801754a:	210b      	movs	r1, #11
 801754c:	187b      	adds	r3, r7, r1
 801754e:	781a      	ldrb	r2, [r3, #0]
 8017550:	187b      	adds	r3, r7, r1
 8017552:	3201      	adds	r2, #1
 8017554:	701a      	strb	r2, [r3, #0]
          break;
 8017556:	e00c      	b.n	8017572 <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017558:	683a      	ldr	r2, [r7, #0]
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	0011      	movs	r1, r2
 801755e:	0018      	movs	r0, r3
 8017560:	f000 fabc 	bl	8017adc <USBD_CtlError>
          err++;
 8017564:	210b      	movs	r1, #11
 8017566:	187b      	adds	r3, r7, r1
 8017568:	781a      	ldrb	r2, [r3, #0]
 801756a:	187b      	adds	r3, r7, r1
 801756c:	3201      	adds	r2, #1
 801756e:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017570:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8017572:	e04a      	b.n	801760a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	7c1b      	ldrb	r3, [r3, #16]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d10b      	bne.n	8017594 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801757c:	687a      	ldr	r2, [r7, #4]
 801757e:	23ae      	movs	r3, #174	; 0xae
 8017580:	009b      	lsls	r3, r3, #2
 8017582:	58d3      	ldr	r3, [r2, r3]
 8017584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017586:	2208      	movs	r2, #8
 8017588:	18ba      	adds	r2, r7, r2
 801758a:	0010      	movs	r0, r2
 801758c:	4798      	blx	r3
 801758e:	0003      	movs	r3, r0
 8017590:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017592:	e03a      	b.n	801760a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8017594:	683a      	ldr	r2, [r7, #0]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	0011      	movs	r1, r2
 801759a:	0018      	movs	r0, r3
 801759c:	f000 fa9e 	bl	8017adc <USBD_CtlError>
        err++;
 80175a0:	210b      	movs	r1, #11
 80175a2:	187b      	adds	r3, r7, r1
 80175a4:	781a      	ldrb	r2, [r3, #0]
 80175a6:	187b      	adds	r3, r7, r1
 80175a8:	3201      	adds	r2, #1
 80175aa:	701a      	strb	r2, [r3, #0]
      break;
 80175ac:	e02d      	b.n	801760a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	7c1b      	ldrb	r3, [r3, #16]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d10f      	bne.n	80175d6 <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80175b6:	687a      	ldr	r2, [r7, #4]
 80175b8:	23ae      	movs	r3, #174	; 0xae
 80175ba:	009b      	lsls	r3, r3, #2
 80175bc:	58d3      	ldr	r3, [r2, r3]
 80175be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175c0:	2208      	movs	r2, #8
 80175c2:	18ba      	adds	r2, r7, r2
 80175c4:	0010      	movs	r0, r2
 80175c6:	4798      	blx	r3
 80175c8:	0003      	movs	r3, r0
 80175ca:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	3301      	adds	r3, #1
 80175d0:	2207      	movs	r2, #7
 80175d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80175d4:	e019      	b.n	801760a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 80175d6:	683a      	ldr	r2, [r7, #0]
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	0011      	movs	r1, r2
 80175dc:	0018      	movs	r0, r3
 80175de:	f000 fa7d 	bl	8017adc <USBD_CtlError>
        err++;
 80175e2:	210b      	movs	r1, #11
 80175e4:	187b      	adds	r3, r7, r1
 80175e6:	781a      	ldrb	r2, [r3, #0]
 80175e8:	187b      	adds	r3, r7, r1
 80175ea:	3201      	adds	r2, #1
 80175ec:	701a      	strb	r2, [r3, #0]
      break;
 80175ee:	e00c      	b.n	801760a <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 80175f0:	683a      	ldr	r2, [r7, #0]
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	0011      	movs	r1, r2
 80175f6:	0018      	movs	r0, r3
 80175f8:	f000 fa70 	bl	8017adc <USBD_CtlError>
      err++;
 80175fc:	210b      	movs	r1, #11
 80175fe:	187b      	adds	r3, r7, r1
 8017600:	781a      	ldrb	r2, [r3, #0]
 8017602:	187b      	adds	r3, r7, r1
 8017604:	3201      	adds	r2, #1
 8017606:	701a      	strb	r2, [r3, #0]
      break;
 8017608:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 801760a:	230b      	movs	r3, #11
 801760c:	18fb      	adds	r3, r7, r3
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d131      	bne.n	8017678 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	88db      	ldrh	r3, [r3, #6]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d023      	beq.n	8017664 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 801761c:	2108      	movs	r1, #8
 801761e:	187b      	adds	r3, r7, r1
 8017620:	881b      	ldrh	r3, [r3, #0]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d017      	beq.n	8017656 <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 8017626:	683b      	ldr	r3, [r7, #0]
 8017628:	88da      	ldrh	r2, [r3, #6]
 801762a:	187b      	adds	r3, r7, r1
 801762c:	881b      	ldrh	r3, [r3, #0]
 801762e:	1c18      	adds	r0, r3, #0
 8017630:	1c11      	adds	r1, r2, #0
 8017632:	b28a      	uxth	r2, r1
 8017634:	b283      	uxth	r3, r0
 8017636:	429a      	cmp	r2, r3
 8017638:	d900      	bls.n	801763c <USBD_GetDescriptor+0x370>
 801763a:	1c01      	adds	r1, r0, #0
 801763c:	b28a      	uxth	r2, r1
 801763e:	2108      	movs	r1, #8
 8017640:	187b      	adds	r3, r7, r1
 8017642:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017644:	187b      	adds	r3, r7, r1
 8017646:	881b      	ldrh	r3, [r3, #0]
 8017648:	001a      	movs	r2, r3
 801764a:	68f9      	ldr	r1, [r7, #12]
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	0018      	movs	r0, r3
 8017650:	f000 facc 	bl	8017bec <USBD_CtlSendData>
 8017654:	e011      	b.n	801767a <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017656:	683a      	ldr	r2, [r7, #0]
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	0011      	movs	r1, r2
 801765c:	0018      	movs	r0, r3
 801765e:	f000 fa3d 	bl	8017adc <USBD_CtlError>
 8017662:	e00a      	b.n	801767a <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	0018      	movs	r0, r3
 8017668:	f000 fb1e 	bl	8017ca8 <USBD_CtlSendStatus>
 801766c:	e005      	b.n	801767a <USBD_GetDescriptor+0x3ae>
 801766e:	46c0      	nop			; (mov r8, r8)
 8017670:	080250d4 	.word	0x080250d4
 8017674:	08025114 	.word	0x08025114
    return;
 8017678:	46c0      	nop			; (mov r8, r8)
  }
}
 801767a:	46bd      	mov	sp, r7
 801767c:	b004      	add	sp, #16
 801767e:	bd80      	pop	{r7, pc}

08017680 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017680:	b590      	push	{r4, r7, lr}
 8017682:	b085      	sub	sp, #20
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801768a:	683b      	ldr	r3, [r7, #0]
 801768c:	889b      	ldrh	r3, [r3, #4]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d13e      	bne.n	8017710 <USBD_SetAddress+0x90>
 8017692:	683b      	ldr	r3, [r7, #0]
 8017694:	88db      	ldrh	r3, [r3, #6]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d13a      	bne.n	8017710 <USBD_SetAddress+0x90>
 801769a:	683b      	ldr	r3, [r7, #0]
 801769c:	885b      	ldrh	r3, [r3, #2]
 801769e:	2b7f      	cmp	r3, #127	; 0x7f
 80176a0:	d836      	bhi.n	8017710 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80176a2:	683b      	ldr	r3, [r7, #0]
 80176a4:	885b      	ldrh	r3, [r3, #2]
 80176a6:	b2da      	uxtb	r2, r3
 80176a8:	230f      	movs	r3, #15
 80176aa:	18fb      	adds	r3, r7, r3
 80176ac:	217f      	movs	r1, #127	; 0x7f
 80176ae:	400a      	ands	r2, r1
 80176b0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80176b2:	687a      	ldr	r2, [r7, #4]
 80176b4:	23a7      	movs	r3, #167	; 0xa7
 80176b6:	009b      	lsls	r3, r3, #2
 80176b8:	5cd3      	ldrb	r3, [r2, r3]
 80176ba:	b2db      	uxtb	r3, r3
 80176bc:	2b03      	cmp	r3, #3
 80176be:	d106      	bne.n	80176ce <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 80176c0:	683a      	ldr	r2, [r7, #0]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	0011      	movs	r1, r2
 80176c6:	0018      	movs	r0, r3
 80176c8:	f000 fa08 	bl	8017adc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80176cc:	e027      	b.n	801771e <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	240f      	movs	r4, #15
 80176d2:	193a      	adds	r2, r7, r4
 80176d4:	4914      	ldr	r1, [pc, #80]	; (8017728 <USBD_SetAddress+0xa8>)
 80176d6:	7812      	ldrb	r2, [r2, #0]
 80176d8:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80176da:	193b      	adds	r3, r7, r4
 80176dc:	781a      	ldrb	r2, [r3, #0]
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	0011      	movs	r1, r2
 80176e2:	0018      	movs	r0, r3
 80176e4:	f006 fcdd 	bl	801e0a2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	0018      	movs	r0, r3
 80176ec:	f000 fadc 	bl	8017ca8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80176f0:	193b      	adds	r3, r7, r4
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d005      	beq.n	8017704 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80176f8:	687a      	ldr	r2, [r7, #4]
 80176fa:	23a7      	movs	r3, #167	; 0xa7
 80176fc:	009b      	lsls	r3, r3, #2
 80176fe:	2102      	movs	r1, #2
 8017700:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017702:	e00c      	b.n	801771e <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017704:	687a      	ldr	r2, [r7, #4]
 8017706:	23a7      	movs	r3, #167	; 0xa7
 8017708:	009b      	lsls	r3, r3, #2
 801770a:	2101      	movs	r1, #1
 801770c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801770e:	e006      	b.n	801771e <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017710:	683a      	ldr	r2, [r7, #0]
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	0011      	movs	r1, r2
 8017716:	0018      	movs	r0, r3
 8017718:	f000 f9e0 	bl	8017adc <USBD_CtlError>
  }
}
 801771c:	46c0      	nop			; (mov r8, r8)
 801771e:	46c0      	nop			; (mov r8, r8)
 8017720:	46bd      	mov	sp, r7
 8017722:	b005      	add	sp, #20
 8017724:	bd90      	pop	{r4, r7, pc}
 8017726:	46c0      	nop			; (mov r8, r8)
 8017728:	0000029e 	.word	0x0000029e

0801772c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801772c:	b5b0      	push	{r4, r5, r7, lr}
 801772e:	b084      	sub	sp, #16
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
 8017734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017736:	230f      	movs	r3, #15
 8017738:	18fb      	adds	r3, r7, r3
 801773a:	2200      	movs	r2, #0
 801773c:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	885b      	ldrh	r3, [r3, #2]
 8017742:	b2da      	uxtb	r2, r3
 8017744:	4b5f      	ldr	r3, [pc, #380]	; (80178c4 <USBD_SetConfig+0x198>)
 8017746:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017748:	4b5e      	ldr	r3, [pc, #376]	; (80178c4 <USBD_SetConfig+0x198>)
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	2b01      	cmp	r3, #1
 801774e:	d907      	bls.n	8017760 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 8017750:	683a      	ldr	r2, [r7, #0]
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	0011      	movs	r1, r2
 8017756:	0018      	movs	r0, r3
 8017758:	f000 f9c0 	bl	8017adc <USBD_CtlError>
    return USBD_FAIL;
 801775c:	2303      	movs	r3, #3
 801775e:	e0ac      	b.n	80178ba <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 8017760:	687a      	ldr	r2, [r7, #4]
 8017762:	23a7      	movs	r3, #167	; 0xa7
 8017764:	009b      	lsls	r3, r3, #2
 8017766:	5cd3      	ldrb	r3, [r2, r3]
 8017768:	b2db      	uxtb	r3, r3
 801776a:	2b02      	cmp	r3, #2
 801776c:	d002      	beq.n	8017774 <USBD_SetConfig+0x48>
 801776e:	2b03      	cmp	r3, #3
 8017770:	d033      	beq.n	80177da <USBD_SetConfig+0xae>
 8017772:	e08d      	b.n	8017890 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017774:	4b53      	ldr	r3, [pc, #332]	; (80178c4 <USBD_SetConfig+0x198>)
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d029      	beq.n	80177d0 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 801777c:	4b51      	ldr	r3, [pc, #324]	; (80178c4 <USBD_SetConfig+0x198>)
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	001a      	movs	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017786:	4b4f      	ldr	r3, [pc, #316]	; (80178c4 <USBD_SetConfig+0x198>)
 8017788:	781a      	ldrb	r2, [r3, #0]
 801778a:	250f      	movs	r5, #15
 801778c:	197c      	adds	r4, r7, r5
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	0011      	movs	r1, r2
 8017792:	0018      	movs	r0, r3
 8017794:	f7fe feb2 	bl	80164fc <USBD_SetClassConfig>
 8017798:	0003      	movs	r3, r0
 801779a:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 801779c:	197b      	adds	r3, r7, r5
 801779e:	781b      	ldrb	r3, [r3, #0]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d00b      	beq.n	80177bc <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 80177a4:	683a      	ldr	r2, [r7, #0]
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	0011      	movs	r1, r2
 80177aa:	0018      	movs	r0, r3
 80177ac:	f000 f996 	bl	8017adc <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80177b0:	687a      	ldr	r2, [r7, #4]
 80177b2:	23a7      	movs	r3, #167	; 0xa7
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	2102      	movs	r1, #2
 80177b8:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80177ba:	e07b      	b.n	80178b4 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	0018      	movs	r0, r3
 80177c0:	f000 fa72 	bl	8017ca8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80177c4:	687a      	ldr	r2, [r7, #4]
 80177c6:	23a7      	movs	r3, #167	; 0xa7
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	2103      	movs	r1, #3
 80177cc:	54d1      	strb	r1, [r2, r3]
      break;
 80177ce:	e071      	b.n	80178b4 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	0018      	movs	r0, r3
 80177d4:	f000 fa68 	bl	8017ca8 <USBD_CtlSendStatus>
      break;
 80177d8:	e06c      	b.n	80178b4 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80177da:	4b3a      	ldr	r3, [pc, #232]	; (80178c4 <USBD_SetConfig+0x198>)
 80177dc:	781b      	ldrb	r3, [r3, #0]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d115      	bne.n	801780e <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80177e2:	687a      	ldr	r2, [r7, #4]
 80177e4:	23a7      	movs	r3, #167	; 0xa7
 80177e6:	009b      	lsls	r3, r3, #2
 80177e8:	2102      	movs	r1, #2
 80177ea:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 80177ec:	4b35      	ldr	r3, [pc, #212]	; (80178c4 <USBD_SetConfig+0x198>)
 80177ee:	781b      	ldrb	r3, [r3, #0]
 80177f0:	001a      	movs	r2, r3
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80177f6:	4b33      	ldr	r3, [pc, #204]	; (80178c4 <USBD_SetConfig+0x198>)
 80177f8:	781a      	ldrb	r2, [r3, #0]
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	0011      	movs	r1, r2
 80177fe:	0018      	movs	r0, r3
 8017800:	f7fe fea1 	bl	8016546 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	0018      	movs	r0, r3
 8017808:	f000 fa4e 	bl	8017ca8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801780c:	e052      	b.n	80178b4 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 801780e:	4b2d      	ldr	r3, [pc, #180]	; (80178c4 <USBD_SetConfig+0x198>)
 8017810:	781b      	ldrb	r3, [r3, #0]
 8017812:	001a      	movs	r2, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	685b      	ldr	r3, [r3, #4]
 8017818:	429a      	cmp	r2, r3
 801781a:	d034      	beq.n	8017886 <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	685b      	ldr	r3, [r3, #4]
 8017820:	b2da      	uxtb	r2, r3
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	0011      	movs	r1, r2
 8017826:	0018      	movs	r0, r3
 8017828:	f7fe fe8d 	bl	8016546 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801782c:	4b25      	ldr	r3, [pc, #148]	; (80178c4 <USBD_SetConfig+0x198>)
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	001a      	movs	r2, r3
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017836:	4b23      	ldr	r3, [pc, #140]	; (80178c4 <USBD_SetConfig+0x198>)
 8017838:	781a      	ldrb	r2, [r3, #0]
 801783a:	250f      	movs	r5, #15
 801783c:	197c      	adds	r4, r7, r5
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	0011      	movs	r1, r2
 8017842:	0018      	movs	r0, r3
 8017844:	f7fe fe5a 	bl	80164fc <USBD_SetClassConfig>
 8017848:	0003      	movs	r3, r0
 801784a:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 801784c:	197b      	adds	r3, r7, r5
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d013      	beq.n	801787c <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 8017854:	683a      	ldr	r2, [r7, #0]
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	0011      	movs	r1, r2
 801785a:	0018      	movs	r0, r3
 801785c:	f000 f93e 	bl	8017adc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	685b      	ldr	r3, [r3, #4]
 8017864:	b2da      	uxtb	r2, r3
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	0011      	movs	r1, r2
 801786a:	0018      	movs	r0, r3
 801786c:	f7fe fe6b 	bl	8016546 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017870:	687a      	ldr	r2, [r7, #4]
 8017872:	23a7      	movs	r3, #167	; 0xa7
 8017874:	009b      	lsls	r3, r3, #2
 8017876:	2102      	movs	r1, #2
 8017878:	54d1      	strb	r1, [r2, r3]
      break;
 801787a:	e01b      	b.n	80178b4 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	0018      	movs	r0, r3
 8017880:	f000 fa12 	bl	8017ca8 <USBD_CtlSendStatus>
      break;
 8017884:	e016      	b.n	80178b4 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	0018      	movs	r0, r3
 801788a:	f000 fa0d 	bl	8017ca8 <USBD_CtlSendStatus>
      break;
 801788e:	e011      	b.n	80178b4 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 8017890:	683a      	ldr	r2, [r7, #0]
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	0011      	movs	r1, r2
 8017896:	0018      	movs	r0, r3
 8017898:	f000 f920 	bl	8017adc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801789c:	4b09      	ldr	r3, [pc, #36]	; (80178c4 <USBD_SetConfig+0x198>)
 801789e:	781a      	ldrb	r2, [r3, #0]
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	0011      	movs	r1, r2
 80178a4:	0018      	movs	r0, r3
 80178a6:	f7fe fe4e 	bl	8016546 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80178aa:	230f      	movs	r3, #15
 80178ac:	18fb      	adds	r3, r7, r3
 80178ae:	2203      	movs	r2, #3
 80178b0:	701a      	strb	r2, [r3, #0]
      break;
 80178b2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80178b4:	230f      	movs	r3, #15
 80178b6:	18fb      	adds	r3, r7, r3
 80178b8:	781b      	ldrb	r3, [r3, #0]
}
 80178ba:	0018      	movs	r0, r3
 80178bc:	46bd      	mov	sp, r7
 80178be:	b004      	add	sp, #16
 80178c0:	bdb0      	pop	{r4, r5, r7, pc}
 80178c2:	46c0      	nop			; (mov r8, r8)
 80178c4:	200005e5 	.word	0x200005e5

080178c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b082      	sub	sp, #8
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
 80178d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80178d2:	683b      	ldr	r3, [r7, #0]
 80178d4:	88db      	ldrh	r3, [r3, #6]
 80178d6:	2b01      	cmp	r3, #1
 80178d8:	d006      	beq.n	80178e8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80178da:	683a      	ldr	r2, [r7, #0]
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	0011      	movs	r1, r2
 80178e0:	0018      	movs	r0, r3
 80178e2:	f000 f8fb 	bl	8017adc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80178e6:	e027      	b.n	8017938 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 80178e8:	687a      	ldr	r2, [r7, #4]
 80178ea:	23a7      	movs	r3, #167	; 0xa7
 80178ec:	009b      	lsls	r3, r3, #2
 80178ee:	5cd3      	ldrb	r3, [r2, r3]
 80178f0:	b2db      	uxtb	r3, r3
 80178f2:	2b02      	cmp	r3, #2
 80178f4:	dc02      	bgt.n	80178fc <USBD_GetConfig+0x34>
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	dc03      	bgt.n	8017902 <USBD_GetConfig+0x3a>
 80178fa:	e016      	b.n	801792a <USBD_GetConfig+0x62>
 80178fc:	2b03      	cmp	r3, #3
 80178fe:	d00c      	beq.n	801791a <USBD_GetConfig+0x52>
 8017900:	e013      	b.n	801792a <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	2200      	movs	r2, #0
 8017906:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	3308      	adds	r3, #8
 801790c:	0019      	movs	r1, r3
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	2201      	movs	r2, #1
 8017912:	0018      	movs	r0, r3
 8017914:	f000 f96a 	bl	8017bec <USBD_CtlSendData>
        break;
 8017918:	e00e      	b.n	8017938 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	1d19      	adds	r1, r3, #4
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	2201      	movs	r2, #1
 8017922:	0018      	movs	r0, r3
 8017924:	f000 f962 	bl	8017bec <USBD_CtlSendData>
        break;
 8017928:	e006      	b.n	8017938 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 801792a:	683a      	ldr	r2, [r7, #0]
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	0011      	movs	r1, r2
 8017930:	0018      	movs	r0, r3
 8017932:	f000 f8d3 	bl	8017adc <USBD_CtlError>
        break;
 8017936:	46c0      	nop			; (mov r8, r8)
}
 8017938:	46c0      	nop			; (mov r8, r8)
 801793a:	46bd      	mov	sp, r7
 801793c:	b002      	add	sp, #8
 801793e:	bd80      	pop	{r7, pc}

08017940 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
 8017948:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801794a:	687a      	ldr	r2, [r7, #4]
 801794c:	23a7      	movs	r3, #167	; 0xa7
 801794e:	009b      	lsls	r3, r3, #2
 8017950:	5cd3      	ldrb	r3, [r2, r3]
 8017952:	b2db      	uxtb	r3, r3
 8017954:	3b01      	subs	r3, #1
 8017956:	2b02      	cmp	r3, #2
 8017958:	d822      	bhi.n	80179a0 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	88db      	ldrh	r3, [r3, #6]
 801795e:	2b02      	cmp	r3, #2
 8017960:	d006      	beq.n	8017970 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 8017962:	683a      	ldr	r2, [r7, #0]
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	0011      	movs	r1, r2
 8017968:	0018      	movs	r0, r3
 801796a:	f000 f8b7 	bl	8017adc <USBD_CtlError>
        break;
 801796e:	e01e      	b.n	80179ae <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	2201      	movs	r2, #1
 8017974:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017976:	687a      	ldr	r2, [r7, #4]
 8017978:	23a9      	movs	r3, #169	; 0xa9
 801797a:	009b      	lsls	r3, r3, #2
 801797c:	58d3      	ldr	r3, [r2, r3]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d005      	beq.n	801798e <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	68db      	ldr	r3, [r3, #12]
 8017986:	2202      	movs	r2, #2
 8017988:	431a      	orrs	r2, r3
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	330c      	adds	r3, #12
 8017992:	0019      	movs	r1, r3
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2202      	movs	r2, #2
 8017998:	0018      	movs	r0, r3
 801799a:	f000 f927 	bl	8017bec <USBD_CtlSendData>
      break;
 801799e:	e006      	b.n	80179ae <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 80179a0:	683a      	ldr	r2, [r7, #0]
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	0011      	movs	r1, r2
 80179a6:	0018      	movs	r0, r3
 80179a8:	f000 f898 	bl	8017adc <USBD_CtlError>
      break;
 80179ac:	46c0      	nop			; (mov r8, r8)
  }
}
 80179ae:	46c0      	nop			; (mov r8, r8)
 80179b0:	46bd      	mov	sp, r7
 80179b2:	b002      	add	sp, #8
 80179b4:	bd80      	pop	{r7, pc}

080179b6 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179b6:	b580      	push	{r7, lr}
 80179b8:	b082      	sub	sp, #8
 80179ba:	af00      	add	r7, sp, #0
 80179bc:	6078      	str	r0, [r7, #4]
 80179be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	885b      	ldrh	r3, [r3, #2]
 80179c4:	2b01      	cmp	r3, #1
 80179c6:	d109      	bne.n	80179dc <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 80179c8:	687a      	ldr	r2, [r7, #4]
 80179ca:	23a9      	movs	r3, #169	; 0xa9
 80179cc:	009b      	lsls	r3, r3, #2
 80179ce:	2101      	movs	r1, #1
 80179d0:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	0018      	movs	r0, r3
 80179d6:	f000 f967 	bl	8017ca8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80179da:	e017      	b.n	8017a0c <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	885b      	ldrh	r3, [r3, #2]
 80179e0:	2b02      	cmp	r3, #2
 80179e2:	d10d      	bne.n	8017a00 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	889b      	ldrh	r3, [r3, #4]
 80179e8:	0a1b      	lsrs	r3, r3, #8
 80179ea:	b29b      	uxth	r3, r3
 80179ec:	b2d9      	uxtb	r1, r3
 80179ee:	687a      	ldr	r2, [r7, #4]
 80179f0:	23a8      	movs	r3, #168	; 0xa8
 80179f2:	009b      	lsls	r3, r3, #2
 80179f4:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	0018      	movs	r0, r3
 80179fa:	f000 f955 	bl	8017ca8 <USBD_CtlSendStatus>
}
 80179fe:	e005      	b.n	8017a0c <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 8017a00:	683a      	ldr	r2, [r7, #0]
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	0011      	movs	r1, r2
 8017a06:	0018      	movs	r0, r3
 8017a08:	f000 f868 	bl	8017adc <USBD_CtlError>
}
 8017a0c:	46c0      	nop			; (mov r8, r8)
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	b002      	add	sp, #8
 8017a12:	bd80      	pop	{r7, pc}

08017a14 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b082      	sub	sp, #8
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
 8017a1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017a1e:	687a      	ldr	r2, [r7, #4]
 8017a20:	23a7      	movs	r3, #167	; 0xa7
 8017a22:	009b      	lsls	r3, r3, #2
 8017a24:	5cd3      	ldrb	r3, [r2, r3]
 8017a26:	b2db      	uxtb	r3, r3
 8017a28:	3b01      	subs	r3, #1
 8017a2a:	2b02      	cmp	r3, #2
 8017a2c:	d80d      	bhi.n	8017a4a <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017a2e:	683b      	ldr	r3, [r7, #0]
 8017a30:	885b      	ldrh	r3, [r3, #2]
 8017a32:	2b01      	cmp	r3, #1
 8017a34:	d110      	bne.n	8017a58 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 8017a36:	687a      	ldr	r2, [r7, #4]
 8017a38:	23a9      	movs	r3, #169	; 0xa9
 8017a3a:	009b      	lsls	r3, r3, #2
 8017a3c:	2100      	movs	r1, #0
 8017a3e:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	0018      	movs	r0, r3
 8017a44:	f000 f930 	bl	8017ca8 <USBD_CtlSendStatus>
      }
      break;
 8017a48:	e006      	b.n	8017a58 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 8017a4a:	683a      	ldr	r2, [r7, #0]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	0011      	movs	r1, r2
 8017a50:	0018      	movs	r0, r3
 8017a52:	f000 f843 	bl	8017adc <USBD_CtlError>
      break;
 8017a56:	e000      	b.n	8017a5a <USBD_ClrFeature+0x46>
      break;
 8017a58:	46c0      	nop			; (mov r8, r8)
  }
}
 8017a5a:	46c0      	nop			; (mov r8, r8)
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	b002      	add	sp, #8
 8017a60:	bd80      	pop	{r7, pc}

08017a62 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017a62:	b580      	push	{r7, lr}
 8017a64:	b084      	sub	sp, #16
 8017a66:	af00      	add	r7, sp, #0
 8017a68:	6078      	str	r0, [r7, #4]
 8017a6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	781a      	ldrb	r2, [r3, #0]
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	3301      	adds	r3, #1
 8017a7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	781a      	ldrb	r2, [r3, #0]
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	0018      	movs	r0, r3
 8017a90:	f7ff f8e6 	bl	8016c60 <SWAPBYTE>
 8017a94:	0003      	movs	r3, r0
 8017a96:	001a      	movs	r2, r3
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	3301      	adds	r3, #1
 8017aa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	3301      	adds	r3, #1
 8017aa6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	0018      	movs	r0, r3
 8017aac:	f7ff f8d8 	bl	8016c60 <SWAPBYTE>
 8017ab0:	0003      	movs	r3, r0
 8017ab2:	001a      	movs	r2, r3
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	3301      	adds	r3, #1
 8017abc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	3301      	adds	r3, #1
 8017ac2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	0018      	movs	r0, r3
 8017ac8:	f7ff f8ca 	bl	8016c60 <SWAPBYTE>
 8017acc:	0003      	movs	r3, r0
 8017ace:	001a      	movs	r2, r3
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	80da      	strh	r2, [r3, #6]
}
 8017ad4:	46c0      	nop			; (mov r8, r8)
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	b004      	add	sp, #16
 8017ada:	bd80      	pop	{r7, pc}

08017adc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b082      	sub	sp, #8
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
 8017ae4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	2180      	movs	r1, #128	; 0x80
 8017aea:	0018      	movs	r0, r3
 8017aec:	f006 fa53 	bl	801df96 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	2100      	movs	r1, #0
 8017af4:	0018      	movs	r0, r3
 8017af6:	f006 fa4e 	bl	801df96 <USBD_LL_StallEP>
}
 8017afa:	46c0      	nop			; (mov r8, r8)
 8017afc:	46bd      	mov	sp, r7
 8017afe:	b002      	add	sp, #8
 8017b00:	bd80      	pop	{r7, pc}

08017b02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017b02:	b590      	push	{r4, r7, lr}
 8017b04:	b087      	sub	sp, #28
 8017b06:	af00      	add	r7, sp, #0
 8017b08:	60f8      	str	r0, [r7, #12]
 8017b0a:	60b9      	str	r1, [r7, #8]
 8017b0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017b0e:	2417      	movs	r4, #23
 8017b10:	193b      	adds	r3, r7, r4
 8017b12:	2200      	movs	r2, #0
 8017b14:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d044      	beq.n	8017ba6 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017b20:	693b      	ldr	r3, [r7, #16]
 8017b22:	0018      	movs	r0, r3
 8017b24:	f000 f843 	bl	8017bae <USBD_GetLen>
 8017b28:	0003      	movs	r3, r0
 8017b2a:	3301      	adds	r3, #1
 8017b2c:	b29b      	uxth	r3, r3
 8017b2e:	18db      	adds	r3, r3, r3
 8017b30:	b29a      	uxth	r2, r3
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017b36:	193b      	adds	r3, r7, r4
 8017b38:	781b      	ldrb	r3, [r3, #0]
 8017b3a:	68ba      	ldr	r2, [r7, #8]
 8017b3c:	18d3      	adds	r3, r2, r3
 8017b3e:	687a      	ldr	r2, [r7, #4]
 8017b40:	7812      	ldrb	r2, [r2, #0]
 8017b42:	701a      	strb	r2, [r3, #0]
  idx++;
 8017b44:	193b      	adds	r3, r7, r4
 8017b46:	781a      	ldrb	r2, [r3, #0]
 8017b48:	193b      	adds	r3, r7, r4
 8017b4a:	3201      	adds	r2, #1
 8017b4c:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017b4e:	193b      	adds	r3, r7, r4
 8017b50:	781b      	ldrb	r3, [r3, #0]
 8017b52:	68ba      	ldr	r2, [r7, #8]
 8017b54:	18d3      	adds	r3, r2, r3
 8017b56:	2203      	movs	r2, #3
 8017b58:	701a      	strb	r2, [r3, #0]
  idx++;
 8017b5a:	193b      	adds	r3, r7, r4
 8017b5c:	781a      	ldrb	r2, [r3, #0]
 8017b5e:	193b      	adds	r3, r7, r4
 8017b60:	3201      	adds	r2, #1
 8017b62:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8017b64:	e01a      	b.n	8017b9c <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8017b66:	2117      	movs	r1, #23
 8017b68:	187b      	adds	r3, r7, r1
 8017b6a:	781b      	ldrb	r3, [r3, #0]
 8017b6c:	68ba      	ldr	r2, [r7, #8]
 8017b6e:	18d3      	adds	r3, r2, r3
 8017b70:	693a      	ldr	r2, [r7, #16]
 8017b72:	7812      	ldrb	r2, [r2, #0]
 8017b74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	3301      	adds	r3, #1
 8017b7a:	613b      	str	r3, [r7, #16]
    idx++;
 8017b7c:	187b      	adds	r3, r7, r1
 8017b7e:	781a      	ldrb	r2, [r3, #0]
 8017b80:	187b      	adds	r3, r7, r1
 8017b82:	3201      	adds	r2, #1
 8017b84:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8017b86:	187b      	adds	r3, r7, r1
 8017b88:	781b      	ldrb	r3, [r3, #0]
 8017b8a:	68ba      	ldr	r2, [r7, #8]
 8017b8c:	18d3      	adds	r3, r2, r3
 8017b8e:	2200      	movs	r2, #0
 8017b90:	701a      	strb	r2, [r3, #0]
    idx++;
 8017b92:	187b      	adds	r3, r7, r1
 8017b94:	781a      	ldrb	r2, [r3, #0]
 8017b96:	187b      	adds	r3, r7, r1
 8017b98:	3201      	adds	r2, #1
 8017b9a:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 8017b9c:	693b      	ldr	r3, [r7, #16]
 8017b9e:	781b      	ldrb	r3, [r3, #0]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d1e0      	bne.n	8017b66 <USBD_GetString+0x64>
 8017ba4:	e000      	b.n	8017ba8 <USBD_GetString+0xa6>
    return;
 8017ba6:	46c0      	nop			; (mov r8, r8)
  }
}
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	b007      	add	sp, #28
 8017bac:	bd90      	pop	{r4, r7, pc}

08017bae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017bae:	b580      	push	{r7, lr}
 8017bb0:	b084      	sub	sp, #16
 8017bb2:	af00      	add	r7, sp, #0
 8017bb4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017bb6:	230f      	movs	r3, #15
 8017bb8:	18fb      	adds	r3, r7, r3
 8017bba:	2200      	movs	r2, #0
 8017bbc:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017bc2:	e008      	b.n	8017bd6 <USBD_GetLen+0x28>
  {
    len++;
 8017bc4:	210f      	movs	r1, #15
 8017bc6:	187b      	adds	r3, r7, r1
 8017bc8:	781a      	ldrb	r2, [r3, #0]
 8017bca:	187b      	adds	r3, r7, r1
 8017bcc:	3201      	adds	r2, #1
 8017bce:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8017bd0:	68bb      	ldr	r3, [r7, #8]
 8017bd2:	3301      	adds	r3, #1
 8017bd4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017bd6:	68bb      	ldr	r3, [r7, #8]
 8017bd8:	781b      	ldrb	r3, [r3, #0]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d1f2      	bne.n	8017bc4 <USBD_GetLen+0x16>
  }

  return len;
 8017bde:	230f      	movs	r3, #15
 8017be0:	18fb      	adds	r3, r7, r3
 8017be2:	781b      	ldrb	r3, [r3, #0]
}
 8017be4:	0018      	movs	r0, r3
 8017be6:	46bd      	mov	sp, r7
 8017be8:	b004      	add	sp, #16
 8017bea:	bd80      	pop	{r7, pc}

08017bec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b084      	sub	sp, #16
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	60f8      	str	r0, [r7, #12]
 8017bf4:	60b9      	str	r1, [r7, #8]
 8017bf6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017bf8:	68fa      	ldr	r2, [r7, #12]
 8017bfa:	23a5      	movs	r3, #165	; 0xa5
 8017bfc:	009b      	lsls	r3, r3, #2
 8017bfe:	2102      	movs	r1, #2
 8017c00:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	687a      	ldr	r2, [r7, #4]
 8017c06:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	687a      	ldr	r2, [r7, #4]
 8017c0c:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	68ba      	ldr	r2, [r7, #8]
 8017c12:	68f8      	ldr	r0, [r7, #12]
 8017c14:	2100      	movs	r1, #0
 8017c16:	f006 fa6f 	bl	801e0f8 <USBD_LL_Transmit>

  return USBD_OK;
 8017c1a:	2300      	movs	r3, #0
}
 8017c1c:	0018      	movs	r0, r3
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	b004      	add	sp, #16
 8017c22:	bd80      	pop	{r7, pc}

08017c24 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b084      	sub	sp, #16
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	60f8      	str	r0, [r7, #12]
 8017c2c:	60b9      	str	r1, [r7, #8]
 8017c2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	68ba      	ldr	r2, [r7, #8]
 8017c34:	68f8      	ldr	r0, [r7, #12]
 8017c36:	2100      	movs	r1, #0
 8017c38:	f006 fa5e 	bl	801e0f8 <USBD_LL_Transmit>

  return USBD_OK;
 8017c3c:	2300      	movs	r3, #0
}
 8017c3e:	0018      	movs	r0, r3
 8017c40:	46bd      	mov	sp, r7
 8017c42:	b004      	add	sp, #16
 8017c44:	bd80      	pop	{r7, pc}

08017c46 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017c46:	b580      	push	{r7, lr}
 8017c48:	b084      	sub	sp, #16
 8017c4a:	af00      	add	r7, sp, #0
 8017c4c:	60f8      	str	r0, [r7, #12]
 8017c4e:	60b9      	str	r1, [r7, #8]
 8017c50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017c52:	68fa      	ldr	r2, [r7, #12]
 8017c54:	23a5      	movs	r3, #165	; 0xa5
 8017c56:	009b      	lsls	r3, r3, #2
 8017c58:	2103      	movs	r1, #3
 8017c5a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8017c5c:	68fa      	ldr	r2, [r7, #12]
 8017c5e:	23ac      	movs	r3, #172	; 0xac
 8017c60:	005b      	lsls	r3, r3, #1
 8017c62:	6879      	ldr	r1, [r7, #4]
 8017c64:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017c66:	68fa      	ldr	r2, [r7, #12]
 8017c68:	23ae      	movs	r3, #174	; 0xae
 8017c6a:	005b      	lsls	r3, r3, #1
 8017c6c:	6879      	ldr	r1, [r7, #4]
 8017c6e:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	68ba      	ldr	r2, [r7, #8]
 8017c74:	68f8      	ldr	r0, [r7, #12]
 8017c76:	2100      	movs	r1, #0
 8017c78:	f006 fa6e 	bl	801e158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c7c:	2300      	movs	r3, #0
}
 8017c7e:	0018      	movs	r0, r3
 8017c80:	46bd      	mov	sp, r7
 8017c82:	b004      	add	sp, #16
 8017c84:	bd80      	pop	{r7, pc}

08017c86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017c86:	b580      	push	{r7, lr}
 8017c88:	b084      	sub	sp, #16
 8017c8a:	af00      	add	r7, sp, #0
 8017c8c:	60f8      	str	r0, [r7, #12]
 8017c8e:	60b9      	str	r1, [r7, #8]
 8017c90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	68ba      	ldr	r2, [r7, #8]
 8017c96:	68f8      	ldr	r0, [r7, #12]
 8017c98:	2100      	movs	r1, #0
 8017c9a:	f006 fa5d 	bl	801e158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c9e:	2300      	movs	r3, #0
}
 8017ca0:	0018      	movs	r0, r3
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	b004      	add	sp, #16
 8017ca6:	bd80      	pop	{r7, pc}

08017ca8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b082      	sub	sp, #8
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017cb0:	687a      	ldr	r2, [r7, #4]
 8017cb2:	23a5      	movs	r3, #165	; 0xa5
 8017cb4:	009b      	lsls	r3, r3, #2
 8017cb6:	2104      	movs	r1, #4
 8017cb8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017cba:	6878      	ldr	r0, [r7, #4]
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	2100      	movs	r1, #0
 8017cc2:	f006 fa19 	bl	801e0f8 <USBD_LL_Transmit>

  return USBD_OK;
 8017cc6:	2300      	movs	r3, #0
}
 8017cc8:	0018      	movs	r0, r3
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	b002      	add	sp, #8
 8017cce:	bd80      	pop	{r7, pc}

08017cd0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b082      	sub	sp, #8
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017cd8:	687a      	ldr	r2, [r7, #4]
 8017cda:	23a5      	movs	r3, #165	; 0xa5
 8017cdc:	009b      	lsls	r3, r3, #2
 8017cde:	2105      	movs	r1, #5
 8017ce0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017ce2:	6878      	ldr	r0, [r7, #4]
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	2100      	movs	r1, #0
 8017cea:	f006 fa35 	bl	801e158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017cee:	2300      	movs	r3, #0
}
 8017cf0:	0018      	movs	r0, r3
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	b002      	add	sp, #8
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <__NVIC_SetPriority>:
{
 8017cf8:	b590      	push	{r4, r7, lr}
 8017cfa:	b083      	sub	sp, #12
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	0002      	movs	r2, r0
 8017d00:	6039      	str	r1, [r7, #0]
 8017d02:	1dfb      	adds	r3, r7, #7
 8017d04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8017d06:	1dfb      	adds	r3, r7, #7
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8017d0c:	d828      	bhi.n	8017d60 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8017d0e:	4a2f      	ldr	r2, [pc, #188]	; (8017dcc <__NVIC_SetPriority+0xd4>)
 8017d10:	1dfb      	adds	r3, r7, #7
 8017d12:	781b      	ldrb	r3, [r3, #0]
 8017d14:	b25b      	sxtb	r3, r3
 8017d16:	089b      	lsrs	r3, r3, #2
 8017d18:	33c0      	adds	r3, #192	; 0xc0
 8017d1a:	009b      	lsls	r3, r3, #2
 8017d1c:	589b      	ldr	r3, [r3, r2]
 8017d1e:	1dfa      	adds	r2, r7, #7
 8017d20:	7812      	ldrb	r2, [r2, #0]
 8017d22:	0011      	movs	r1, r2
 8017d24:	2203      	movs	r2, #3
 8017d26:	400a      	ands	r2, r1
 8017d28:	00d2      	lsls	r2, r2, #3
 8017d2a:	21ff      	movs	r1, #255	; 0xff
 8017d2c:	4091      	lsls	r1, r2
 8017d2e:	000a      	movs	r2, r1
 8017d30:	43d2      	mvns	r2, r2
 8017d32:	401a      	ands	r2, r3
 8017d34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	019b      	lsls	r3, r3, #6
 8017d3a:	22ff      	movs	r2, #255	; 0xff
 8017d3c:	401a      	ands	r2, r3
 8017d3e:	1dfb      	adds	r3, r7, #7
 8017d40:	781b      	ldrb	r3, [r3, #0]
 8017d42:	0018      	movs	r0, r3
 8017d44:	2303      	movs	r3, #3
 8017d46:	4003      	ands	r3, r0
 8017d48:	00db      	lsls	r3, r3, #3
 8017d4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8017d4c:	481f      	ldr	r0, [pc, #124]	; (8017dcc <__NVIC_SetPriority+0xd4>)
 8017d4e:	1dfb      	adds	r3, r7, #7
 8017d50:	781b      	ldrb	r3, [r3, #0]
 8017d52:	b25b      	sxtb	r3, r3
 8017d54:	089b      	lsrs	r3, r3, #2
 8017d56:	430a      	orrs	r2, r1
 8017d58:	33c0      	adds	r3, #192	; 0xc0
 8017d5a:	009b      	lsls	r3, r3, #2
 8017d5c:	501a      	str	r2, [r3, r0]
}
 8017d5e:	e031      	b.n	8017dc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8017d60:	4a1b      	ldr	r2, [pc, #108]	; (8017dd0 <__NVIC_SetPriority+0xd8>)
 8017d62:	1dfb      	adds	r3, r7, #7
 8017d64:	781b      	ldrb	r3, [r3, #0]
 8017d66:	0019      	movs	r1, r3
 8017d68:	230f      	movs	r3, #15
 8017d6a:	400b      	ands	r3, r1
 8017d6c:	3b08      	subs	r3, #8
 8017d6e:	089b      	lsrs	r3, r3, #2
 8017d70:	3306      	adds	r3, #6
 8017d72:	009b      	lsls	r3, r3, #2
 8017d74:	18d3      	adds	r3, r2, r3
 8017d76:	3304      	adds	r3, #4
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	1dfa      	adds	r2, r7, #7
 8017d7c:	7812      	ldrb	r2, [r2, #0]
 8017d7e:	0011      	movs	r1, r2
 8017d80:	2203      	movs	r2, #3
 8017d82:	400a      	ands	r2, r1
 8017d84:	00d2      	lsls	r2, r2, #3
 8017d86:	21ff      	movs	r1, #255	; 0xff
 8017d88:	4091      	lsls	r1, r2
 8017d8a:	000a      	movs	r2, r1
 8017d8c:	43d2      	mvns	r2, r2
 8017d8e:	401a      	ands	r2, r3
 8017d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8017d92:	683b      	ldr	r3, [r7, #0]
 8017d94:	019b      	lsls	r3, r3, #6
 8017d96:	22ff      	movs	r2, #255	; 0xff
 8017d98:	401a      	ands	r2, r3
 8017d9a:	1dfb      	adds	r3, r7, #7
 8017d9c:	781b      	ldrb	r3, [r3, #0]
 8017d9e:	0018      	movs	r0, r3
 8017da0:	2303      	movs	r3, #3
 8017da2:	4003      	ands	r3, r0
 8017da4:	00db      	lsls	r3, r3, #3
 8017da6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8017da8:	4809      	ldr	r0, [pc, #36]	; (8017dd0 <__NVIC_SetPriority+0xd8>)
 8017daa:	1dfb      	adds	r3, r7, #7
 8017dac:	781b      	ldrb	r3, [r3, #0]
 8017dae:	001c      	movs	r4, r3
 8017db0:	230f      	movs	r3, #15
 8017db2:	4023      	ands	r3, r4
 8017db4:	3b08      	subs	r3, #8
 8017db6:	089b      	lsrs	r3, r3, #2
 8017db8:	430a      	orrs	r2, r1
 8017dba:	3306      	adds	r3, #6
 8017dbc:	009b      	lsls	r3, r3, #2
 8017dbe:	18c3      	adds	r3, r0, r3
 8017dc0:	3304      	adds	r3, #4
 8017dc2:	601a      	str	r2, [r3, #0]
}
 8017dc4:	46c0      	nop			; (mov r8, r8)
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	b003      	add	sp, #12
 8017dca:	bd90      	pop	{r4, r7, pc}
 8017dcc:	e000e100 	.word	0xe000e100
 8017dd0:	e000ed00 	.word	0xe000ed00

08017dd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8017dd8:	4b05      	ldr	r3, [pc, #20]	; (8017df0 <SysTick_Handler+0x1c>)
 8017dda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017ddc:	f001 ff2a 	bl	8019c34 <xTaskGetSchedulerState>
 8017de0:	0003      	movs	r3, r0
 8017de2:	2b01      	cmp	r3, #1
 8017de4:	d001      	beq.n	8017dea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8017de6:	f002 fbf7 	bl	801a5d8 <xPortSysTickHandler>
  }
}
 8017dea:	46c0      	nop			; (mov r8, r8)
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bd80      	pop	{r7, pc}
 8017df0:	e000e010 	.word	0xe000e010

08017df4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017df4:	b580      	push	{r7, lr}
 8017df6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8017df8:	2305      	movs	r3, #5
 8017dfa:	425b      	negs	r3, r3
 8017dfc:	2100      	movs	r1, #0
 8017dfe:	0018      	movs	r0, r3
 8017e00:	f7ff ff7a 	bl	8017cf8 <__NVIC_SetPriority>
#endif
}
 8017e04:	46c0      	nop			; (mov r8, r8)
 8017e06:	46bd      	mov	sp, r7
 8017e08:	bd80      	pop	{r7, pc}
	...

08017e0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e12:	f3ef 8305 	mrs	r3, IPSR
 8017e16:	603b      	str	r3, [r7, #0]
  return(result);
 8017e18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d003      	beq.n	8017e26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8017e1e:	2306      	movs	r3, #6
 8017e20:	425b      	negs	r3, r3
 8017e22:	607b      	str	r3, [r7, #4]
 8017e24:	e00c      	b.n	8017e40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017e26:	4b09      	ldr	r3, [pc, #36]	; (8017e4c <osKernelInitialize+0x40>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d105      	bne.n	8017e3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017e2e:	4b07      	ldr	r3, [pc, #28]	; (8017e4c <osKernelInitialize+0x40>)
 8017e30:	2201      	movs	r2, #1
 8017e32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017e34:	2300      	movs	r3, #0
 8017e36:	607b      	str	r3, [r7, #4]
 8017e38:	e002      	b.n	8017e40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	425b      	negs	r3, r3
 8017e3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017e40:	687b      	ldr	r3, [r7, #4]
}
 8017e42:	0018      	movs	r0, r3
 8017e44:	46bd      	mov	sp, r7
 8017e46:	b002      	add	sp, #8
 8017e48:	bd80      	pop	{r7, pc}
 8017e4a:	46c0      	nop			; (mov r8, r8)
 8017e4c:	200005e8 	.word	0x200005e8

08017e50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b082      	sub	sp, #8
 8017e54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e56:	f3ef 8305 	mrs	r3, IPSR
 8017e5a:	603b      	str	r3, [r7, #0]
  return(result);
 8017e5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d003      	beq.n	8017e6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8017e62:	2306      	movs	r3, #6
 8017e64:	425b      	negs	r3, r3
 8017e66:	607b      	str	r3, [r7, #4]
 8017e68:	e010      	b.n	8017e8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017e6a:	4b0b      	ldr	r3, [pc, #44]	; (8017e98 <osKernelStart+0x48>)
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	2b01      	cmp	r3, #1
 8017e70:	d109      	bne.n	8017e86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017e72:	f7ff ffbf 	bl	8017df4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017e76:	4b08      	ldr	r3, [pc, #32]	; (8017e98 <osKernelStart+0x48>)
 8017e78:	2202      	movs	r2, #2
 8017e7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017e7c:	f001 fae2 	bl	8019444 <vTaskStartScheduler>
      stat = osOK;
 8017e80:	2300      	movs	r3, #0
 8017e82:	607b      	str	r3, [r7, #4]
 8017e84:	e002      	b.n	8017e8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8017e86:	2301      	movs	r3, #1
 8017e88:	425b      	negs	r3, r3
 8017e8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017e8c:	687b      	ldr	r3, [r7, #4]
}
 8017e8e:	0018      	movs	r0, r3
 8017e90:	46bd      	mov	sp, r7
 8017e92:	b002      	add	sp, #8
 8017e94:	bd80      	pop	{r7, pc}
 8017e96:	46c0      	nop			; (mov r8, r8)
 8017e98:	200005e8 	.word	0x200005e8

08017e9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017e9c:	b5b0      	push	{r4, r5, r7, lr}
 8017e9e:	b08e      	sub	sp, #56	; 0x38
 8017ea0:	af04      	add	r7, sp, #16
 8017ea2:	60f8      	str	r0, [r7, #12]
 8017ea4:	60b9      	str	r1, [r7, #8]
 8017ea6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017eac:	f3ef 8305 	mrs	r3, IPSR
 8017eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8017eb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d000      	beq.n	8017eba <osThreadNew+0x1e>
 8017eb8:	e081      	b.n	8017fbe <osThreadNew+0x122>
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d100      	bne.n	8017ec2 <osThreadNew+0x26>
 8017ec0:	e07d      	b.n	8017fbe <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8017ec2:	2380      	movs	r3, #128	; 0x80
 8017ec4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017ec6:	2318      	movs	r3, #24
 8017ec8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8017eca:	2300      	movs	r3, #0
 8017ecc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017ece:	2301      	movs	r3, #1
 8017ed0:	425b      	negs	r3, r3
 8017ed2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d044      	beq.n	8017f64 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d002      	beq.n	8017ee8 <osThreadNew+0x4c>
        name = attr->name;
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	699b      	ldr	r3, [r3, #24]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d002      	beq.n	8017ef6 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	699b      	ldr	r3, [r3, #24]
 8017ef4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017ef6:	69fb      	ldr	r3, [r7, #28]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d007      	beq.n	8017f0c <osThreadNew+0x70>
 8017efc:	69fb      	ldr	r3, [r7, #28]
 8017efe:	2b38      	cmp	r3, #56	; 0x38
 8017f00:	d804      	bhi.n	8017f0c <osThreadNew+0x70>
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	685b      	ldr	r3, [r3, #4]
 8017f06:	2201      	movs	r2, #1
 8017f08:	4013      	ands	r3, r2
 8017f0a:	d001      	beq.n	8017f10 <osThreadNew+0x74>
        return (NULL);
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	e057      	b.n	8017fc0 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	695b      	ldr	r3, [r3, #20]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d003      	beq.n	8017f20 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	695b      	ldr	r3, [r3, #20]
 8017f1c:	089b      	lsrs	r3, r3, #2
 8017f1e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	689b      	ldr	r3, [r3, #8]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d00e      	beq.n	8017f46 <osThreadNew+0xaa>
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	68db      	ldr	r3, [r3, #12]
 8017f2c:	2ba7      	cmp	r3, #167	; 0xa7
 8017f2e:	d90a      	bls.n	8017f46 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d006      	beq.n	8017f46 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	695b      	ldr	r3, [r3, #20]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d002      	beq.n	8017f46 <osThreadNew+0xaa>
        mem = 1;
 8017f40:	2301      	movs	r3, #1
 8017f42:	61bb      	str	r3, [r7, #24]
 8017f44:	e010      	b.n	8017f68 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	689b      	ldr	r3, [r3, #8]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d10c      	bne.n	8017f68 <osThreadNew+0xcc>
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	68db      	ldr	r3, [r3, #12]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d108      	bne.n	8017f68 <osThreadNew+0xcc>
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	691b      	ldr	r3, [r3, #16]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d104      	bne.n	8017f68 <osThreadNew+0xcc>
          mem = 0;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	61bb      	str	r3, [r7, #24]
 8017f62:	e001      	b.n	8017f68 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8017f64:	2300      	movs	r3, #0
 8017f66:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017f68:	69bb      	ldr	r3, [r7, #24]
 8017f6a:	2b01      	cmp	r3, #1
 8017f6c:	d112      	bne.n	8017f94 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017f76:	68bd      	ldr	r5, [r7, #8]
 8017f78:	6a3c      	ldr	r4, [r7, #32]
 8017f7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017f7c:	68f8      	ldr	r0, [r7, #12]
 8017f7e:	9302      	str	r3, [sp, #8]
 8017f80:	9201      	str	r2, [sp, #4]
 8017f82:	69fb      	ldr	r3, [r7, #28]
 8017f84:	9300      	str	r3, [sp, #0]
 8017f86:	002b      	movs	r3, r5
 8017f88:	0022      	movs	r2, r4
 8017f8a:	f000 ff54 	bl	8018e36 <xTaskCreateStatic>
 8017f8e:	0003      	movs	r3, r0
 8017f90:	613b      	str	r3, [r7, #16]
 8017f92:	e014      	b.n	8017fbe <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8017f94:	69bb      	ldr	r3, [r7, #24]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d111      	bne.n	8017fbe <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017f9a:	6a3b      	ldr	r3, [r7, #32]
 8017f9c:	b29a      	uxth	r2, r3
 8017f9e:	68bc      	ldr	r4, [r7, #8]
 8017fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017fa2:	68f8      	ldr	r0, [r7, #12]
 8017fa4:	2310      	movs	r3, #16
 8017fa6:	18fb      	adds	r3, r7, r3
 8017fa8:	9301      	str	r3, [sp, #4]
 8017faa:	69fb      	ldr	r3, [r7, #28]
 8017fac:	9300      	str	r3, [sp, #0]
 8017fae:	0023      	movs	r3, r4
 8017fb0:	f000 ff85 	bl	8018ebe <xTaskCreate>
 8017fb4:	0003      	movs	r3, r0
 8017fb6:	2b01      	cmp	r3, #1
 8017fb8:	d001      	beq.n	8017fbe <osThreadNew+0x122>
            hTask = NULL;
 8017fba:	2300      	movs	r3, #0
 8017fbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017fbe:	693b      	ldr	r3, [r7, #16]
}
 8017fc0:	0018      	movs	r0, r3
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	b00a      	add	sp, #40	; 0x28
 8017fc6:	bdb0      	pop	{r4, r5, r7, pc}

08017fc8 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	b082      	sub	sp, #8
 8017fcc:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8017fce:	f001 fe23 	bl	8019c18 <xTaskGetCurrentTaskHandle>
 8017fd2:	0003      	movs	r3, r0
 8017fd4:	607b      	str	r3, [r7, #4]

  return (id);
 8017fd6:	687b      	ldr	r3, [r7, #4]
}
 8017fd8:	0018      	movs	r0, r3
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	b002      	add	sp, #8
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b086      	sub	sp, #24
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017fec:	f3ef 8305 	mrs	r3, IPSR
 8017ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8017ff2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d003      	beq.n	8018000 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8017ff8:	2306      	movs	r3, #6
 8017ffa:	425b      	negs	r3, r3
 8017ffc:	617b      	str	r3, [r7, #20]
 8017ffe:	e00c      	b.n	801801a <osThreadSuspend+0x3a>
  }
  else if (hTask == NULL) {
 8018000:	693b      	ldr	r3, [r7, #16]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d103      	bne.n	801800e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8018006:	2304      	movs	r3, #4
 8018008:	425b      	negs	r3, r3
 801800a:	617b      	str	r3, [r7, #20]
 801800c:	e005      	b.n	801801a <osThreadSuspend+0x3a>
  }
  else {
    stat = osOK;
 801800e:	2300      	movs	r3, #0
 8018010:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8018012:	693b      	ldr	r3, [r7, #16]
 8018014:	0018      	movs	r0, r3
 8018016:	f001 f93b 	bl	8019290 <vTaskSuspend>
  }

  return (stat);
 801801a:	697b      	ldr	r3, [r7, #20]
}
 801801c:	0018      	movs	r0, r3
 801801e:	46bd      	mov	sp, r7
 8018020:	b006      	add	sp, #24
 8018022:	bd80      	pop	{r7, pc}

08018024 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8018024:	b580      	push	{r7, lr}
 8018026:	b086      	sub	sp, #24
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018030:	f3ef 8305 	mrs	r3, IPSR
 8018034:	60fb      	str	r3, [r7, #12]
  return(result);
 8018036:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018038:	2b00      	cmp	r3, #0
 801803a:	d003      	beq.n	8018044 <osThreadResume+0x20>
    stat = osErrorISR;
 801803c:	2306      	movs	r3, #6
 801803e:	425b      	negs	r3, r3
 8018040:	617b      	str	r3, [r7, #20]
 8018042:	e00c      	b.n	801805e <osThreadResume+0x3a>
  }
  else if (hTask == NULL) {
 8018044:	693b      	ldr	r3, [r7, #16]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d103      	bne.n	8018052 <osThreadResume+0x2e>
    stat = osErrorParameter;
 801804a:	2304      	movs	r3, #4
 801804c:	425b      	negs	r3, r3
 801804e:	617b      	str	r3, [r7, #20]
 8018050:	e005      	b.n	801805e <osThreadResume+0x3a>
  }
  else {
    stat = osOK;
 8018052:	2300      	movs	r3, #0
 8018054:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	0018      	movs	r0, r3
 801805a:	f001 f9a5 	bl	80193a8 <vTaskResume>
  }

  return (stat);
 801805e:	697b      	ldr	r3, [r7, #20]
}
 8018060:	0018      	movs	r0, r3
 8018062:	46bd      	mov	sp, r7
 8018064:	b006      	add	sp, #24
 8018066:	bd80      	pop	{r7, pc}

08018068 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8018068:	b580      	push	{r7, lr}
 801806a:	b084      	sub	sp, #16
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018070:	f3ef 8305 	mrs	r3, IPSR
 8018074:	60bb      	str	r3, [r7, #8]
  return(result);
 8018076:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018078:	2b00      	cmp	r3, #0
 801807a:	d003      	beq.n	8018084 <osDelay+0x1c>
    stat = osErrorISR;
 801807c:	2306      	movs	r3, #6
 801807e:	425b      	negs	r3, r3
 8018080:	60fb      	str	r3, [r7, #12]
 8018082:	e008      	b.n	8018096 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8018084:	2300      	movs	r3, #0
 8018086:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d003      	beq.n	8018096 <osDelay+0x2e>
      vTaskDelay(ticks);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	0018      	movs	r0, r3
 8018092:	f001 f869 	bl	8019168 <vTaskDelay>
    }
  }

  return (stat);
 8018096:	68fb      	ldr	r3, [r7, #12]
}
 8018098:	0018      	movs	r0, r3
 801809a:	46bd      	mov	sp, r7
 801809c:	b004      	add	sp, #16
 801809e:	bd80      	pop	{r7, pc}

080180a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80180a0:	b590      	push	{r4, r7, lr}
 80180a2:	b08b      	sub	sp, #44	; 0x2c
 80180a4:	af02      	add	r7, sp, #8
 80180a6:	60f8      	str	r0, [r7, #12]
 80180a8:	60b9      	str	r1, [r7, #8]
 80180aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80180ac:	2300      	movs	r3, #0
 80180ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80180b0:	f3ef 8305 	mrs	r3, IPSR
 80180b4:	613b      	str	r3, [r7, #16]
  return(result);
 80180b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d000      	beq.n	80180be <osMessageQueueNew+0x1e>
 80180bc:	e064      	b.n	8018188 <osMessageQueueNew+0xe8>
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d100      	bne.n	80180c6 <osMessageQueueNew+0x26>
 80180c4:	e060      	b.n	8018188 <osMessageQueueNew+0xe8>
 80180c6:	68bb      	ldr	r3, [r7, #8]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d05d      	beq.n	8018188 <osMessageQueueNew+0xe8>
    mem = -1;
 80180cc:	2301      	movs	r3, #1
 80180ce:	425b      	negs	r3, r3
 80180d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d028      	beq.n	801812a <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	689b      	ldr	r3, [r3, #8]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d011      	beq.n	8018104 <osMessageQueueNew+0x64>
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	68db      	ldr	r3, [r3, #12]
 80180e4:	2b4f      	cmp	r3, #79	; 0x4f
 80180e6:	d90d      	bls.n	8018104 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d009      	beq.n	8018104 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	695a      	ldr	r2, [r3, #20]
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	68b9      	ldr	r1, [r7, #8]
 80180f8:	434b      	muls	r3, r1
 80180fa:	429a      	cmp	r2, r3
 80180fc:	d302      	bcc.n	8018104 <osMessageQueueNew+0x64>
        mem = 1;
 80180fe:	2301      	movs	r3, #1
 8018100:	61bb      	str	r3, [r7, #24]
 8018102:	e014      	b.n	801812e <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	689b      	ldr	r3, [r3, #8]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d110      	bne.n	801812e <osMessageQueueNew+0x8e>
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	68db      	ldr	r3, [r3, #12]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d10c      	bne.n	801812e <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018118:	2b00      	cmp	r3, #0
 801811a:	d108      	bne.n	801812e <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	695b      	ldr	r3, [r3, #20]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d104      	bne.n	801812e <osMessageQueueNew+0x8e>
          mem = 0;
 8018124:	2300      	movs	r3, #0
 8018126:	61bb      	str	r3, [r7, #24]
 8018128:	e001      	b.n	801812e <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 801812a:	2300      	movs	r3, #0
 801812c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801812e:	69bb      	ldr	r3, [r7, #24]
 8018130:	2b01      	cmp	r3, #1
 8018132:	d10c      	bne.n	801814e <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	691a      	ldr	r2, [r3, #16]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	689b      	ldr	r3, [r3, #8]
 801813c:	68b9      	ldr	r1, [r7, #8]
 801813e:	68f8      	ldr	r0, [r7, #12]
 8018140:	2400      	movs	r4, #0
 8018142:	9400      	str	r4, [sp, #0]
 8018144:	f000 fa09 	bl	801855a <xQueueGenericCreateStatic>
 8018148:	0003      	movs	r3, r0
 801814a:	61fb      	str	r3, [r7, #28]
 801814c:	e00a      	b.n	8018164 <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 801814e:	69bb      	ldr	r3, [r7, #24]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d107      	bne.n	8018164 <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8018154:	68b9      	ldr	r1, [r7, #8]
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	2200      	movs	r2, #0
 801815a:	0018      	movs	r0, r3
 801815c:	f000 fa49 	bl	80185f2 <xQueueGenericCreate>
 8018160:	0003      	movs	r3, r0
 8018162:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8018164:	69fb      	ldr	r3, [r7, #28]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d00e      	beq.n	8018188 <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d003      	beq.n	8018178 <osMessageQueueNew+0xd8>
        name = attr->name;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	617b      	str	r3, [r7, #20]
 8018176:	e001      	b.n	801817c <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 8018178:	2300      	movs	r3, #0
 801817a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801817c:	697a      	ldr	r2, [r7, #20]
 801817e:	69fb      	ldr	r3, [r7, #28]
 8018180:	0011      	movs	r1, r2
 8018182:	0018      	movs	r0, r3
 8018184:	f000 fdfc 	bl	8018d80 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8018188:	69fb      	ldr	r3, [r7, #28]
}
 801818a:	0018      	movs	r0, r3
 801818c:	46bd      	mov	sp, r7
 801818e:	b009      	add	sp, #36	; 0x24
 8018190:	bd90      	pop	{r4, r7, pc}
	...

08018194 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8018194:	b580      	push	{r7, lr}
 8018196:	b088      	sub	sp, #32
 8018198:	af00      	add	r7, sp, #0
 801819a:	60f8      	str	r0, [r7, #12]
 801819c:	60b9      	str	r1, [r7, #8]
 801819e:	603b      	str	r3, [r7, #0]
 80181a0:	1dfb      	adds	r3, r7, #7
 80181a2:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80181a8:	2300      	movs	r3, #0
 80181aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80181ac:	f3ef 8305 	mrs	r3, IPSR
 80181b0:	617b      	str	r3, [r7, #20]
  return(result);
 80181b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d024      	beq.n	8018202 <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80181b8:	69bb      	ldr	r3, [r7, #24]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d005      	beq.n	80181ca <osMessageQueuePut+0x36>
 80181be:	68bb      	ldr	r3, [r7, #8]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d002      	beq.n	80181ca <osMessageQueuePut+0x36>
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d003      	beq.n	80181d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80181ca:	2304      	movs	r3, #4
 80181cc:	425b      	negs	r3, r3
 80181ce:	61fb      	str	r3, [r7, #28]
 80181d0:	e034      	b.n	801823c <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 80181d2:	2300      	movs	r3, #0
 80181d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80181d6:	2310      	movs	r3, #16
 80181d8:	18fa      	adds	r2, r7, r3
 80181da:	68b9      	ldr	r1, [r7, #8]
 80181dc:	69b8      	ldr	r0, [r7, #24]
 80181de:	2300      	movs	r3, #0
 80181e0:	f000 fb24 	bl	801882c <xQueueGenericSendFromISR>
 80181e4:	0003      	movs	r3, r0
 80181e6:	2b01      	cmp	r3, #1
 80181e8:	d003      	beq.n	80181f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80181ea:	2303      	movs	r3, #3
 80181ec:	425b      	negs	r3, r3
 80181ee:	61fb      	str	r3, [r7, #28]
 80181f0:	e024      	b.n	801823c <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 80181f2:	693b      	ldr	r3, [r7, #16]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d021      	beq.n	801823c <osMessageQueuePut+0xa8>
 80181f8:	4b13      	ldr	r3, [pc, #76]	; (8018248 <osMessageQueuePut+0xb4>)
 80181fa:	2280      	movs	r2, #128	; 0x80
 80181fc:	0552      	lsls	r2, r2, #21
 80181fe:	601a      	str	r2, [r3, #0]
 8018200:	e01c      	b.n	801823c <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018202:	69bb      	ldr	r3, [r7, #24]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d002      	beq.n	801820e <osMessageQueuePut+0x7a>
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d103      	bne.n	8018216 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 801820e:	2304      	movs	r3, #4
 8018210:	425b      	negs	r3, r3
 8018212:	61fb      	str	r3, [r7, #28]
 8018214:	e012      	b.n	801823c <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018216:	683a      	ldr	r2, [r7, #0]
 8018218:	68b9      	ldr	r1, [r7, #8]
 801821a:	69b8      	ldr	r0, [r7, #24]
 801821c:	2300      	movs	r3, #0
 801821e:	f000 fa41 	bl	80186a4 <xQueueGenericSend>
 8018222:	0003      	movs	r3, r0
 8018224:	2b01      	cmp	r3, #1
 8018226:	d009      	beq.n	801823c <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 8018228:	683b      	ldr	r3, [r7, #0]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d003      	beq.n	8018236 <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 801822e:	2302      	movs	r3, #2
 8018230:	425b      	negs	r3, r3
 8018232:	61fb      	str	r3, [r7, #28]
 8018234:	e002      	b.n	801823c <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 8018236:	2303      	movs	r3, #3
 8018238:	425b      	negs	r3, r3
 801823a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801823c:	69fb      	ldr	r3, [r7, #28]
}
 801823e:	0018      	movs	r0, r3
 8018240:	46bd      	mov	sp, r7
 8018242:	b008      	add	sp, #32
 8018244:	bd80      	pop	{r7, pc}
 8018246:	46c0      	nop			; (mov r8, r8)
 8018248:	e000ed04 	.word	0xe000ed04

0801824c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801824c:	b580      	push	{r7, lr}
 801824e:	b088      	sub	sp, #32
 8018250:	af00      	add	r7, sp, #0
 8018252:	60f8      	str	r0, [r7, #12]
 8018254:	60b9      	str	r1, [r7, #8]
 8018256:	607a      	str	r2, [r7, #4]
 8018258:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801825e:	2300      	movs	r3, #0
 8018260:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018262:	f3ef 8305 	mrs	r3, IPSR
 8018266:	617b      	str	r3, [r7, #20]
  return(result);
 8018268:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801826a:	2b00      	cmp	r3, #0
 801826c:	d024      	beq.n	80182b8 <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801826e:	69bb      	ldr	r3, [r7, #24]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d005      	beq.n	8018280 <osMessageQueueGet+0x34>
 8018274:	68bb      	ldr	r3, [r7, #8]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d002      	beq.n	8018280 <osMessageQueueGet+0x34>
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d003      	beq.n	8018288 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8018280:	2304      	movs	r3, #4
 8018282:	425b      	negs	r3, r3
 8018284:	61fb      	str	r3, [r7, #28]
 8018286:	e034      	b.n	80182f2 <osMessageQueueGet+0xa6>
    }
    else {
      yield = pdFALSE;
 8018288:	2300      	movs	r3, #0
 801828a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801828c:	2310      	movs	r3, #16
 801828e:	18fa      	adds	r2, r7, r3
 8018290:	68b9      	ldr	r1, [r7, #8]
 8018292:	69bb      	ldr	r3, [r7, #24]
 8018294:	0018      	movs	r0, r3
 8018296:	f000 fbf2 	bl	8018a7e <xQueueReceiveFromISR>
 801829a:	0003      	movs	r3, r0
 801829c:	2b01      	cmp	r3, #1
 801829e:	d003      	beq.n	80182a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80182a0:	2303      	movs	r3, #3
 80182a2:	425b      	negs	r3, r3
 80182a4:	61fb      	str	r3, [r7, #28]
 80182a6:	e024      	b.n	80182f2 <osMessageQueueGet+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 80182a8:	693b      	ldr	r3, [r7, #16]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d021      	beq.n	80182f2 <osMessageQueueGet+0xa6>
 80182ae:	4b13      	ldr	r3, [pc, #76]	; (80182fc <osMessageQueueGet+0xb0>)
 80182b0:	2280      	movs	r2, #128	; 0x80
 80182b2:	0552      	lsls	r2, r2, #21
 80182b4:	601a      	str	r2, [r3, #0]
 80182b6:	e01c      	b.n	80182f2 <osMessageQueueGet+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80182b8:	69bb      	ldr	r3, [r7, #24]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d002      	beq.n	80182c4 <osMessageQueueGet+0x78>
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d103      	bne.n	80182cc <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 80182c4:	2304      	movs	r3, #4
 80182c6:	425b      	negs	r3, r3
 80182c8:	61fb      	str	r3, [r7, #28]
 80182ca:	e012      	b.n	80182f2 <osMessageQueueGet+0xa6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80182cc:	683a      	ldr	r2, [r7, #0]
 80182ce:	68b9      	ldr	r1, [r7, #8]
 80182d0:	69bb      	ldr	r3, [r7, #24]
 80182d2:	0018      	movs	r0, r3
 80182d4:	f000 fb1e 	bl	8018914 <xQueueReceive>
 80182d8:	0003      	movs	r3, r0
 80182da:	2b01      	cmp	r3, #1
 80182dc:	d009      	beq.n	80182f2 <osMessageQueueGet+0xa6>
        if (timeout != 0U) {
 80182de:	683b      	ldr	r3, [r7, #0]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d003      	beq.n	80182ec <osMessageQueueGet+0xa0>
          stat = osErrorTimeout;
 80182e4:	2302      	movs	r3, #2
 80182e6:	425b      	negs	r3, r3
 80182e8:	61fb      	str	r3, [r7, #28]
 80182ea:	e002      	b.n	80182f2 <osMessageQueueGet+0xa6>
        } else {
          stat = osErrorResource;
 80182ec:	2303      	movs	r3, #3
 80182ee:	425b      	negs	r3, r3
 80182f0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80182f2:	69fb      	ldr	r3, [r7, #28]
}
 80182f4:	0018      	movs	r0, r3
 80182f6:	46bd      	mov	sp, r7
 80182f8:	b008      	add	sp, #32
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	e000ed04 	.word	0xe000ed04

08018300 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8018300:	b580      	push	{r7, lr}
 8018302:	b084      	sub	sp, #16
 8018304:	af00      	add	r7, sp, #0
 8018306:	60f8      	str	r0, [r7, #12]
 8018308:	60b9      	str	r1, [r7, #8]
 801830a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	4a06      	ldr	r2, [pc, #24]	; (8018328 <vApplicationGetIdleTaskMemory+0x28>)
 8018310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	4a05      	ldr	r2, [pc, #20]	; (801832c <vApplicationGetIdleTaskMemory+0x2c>)
 8018316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	2280      	movs	r2, #128	; 0x80
 801831c:	601a      	str	r2, [r3, #0]
}
 801831e:	46c0      	nop			; (mov r8, r8)
 8018320:	46bd      	mov	sp, r7
 8018322:	b004      	add	sp, #16
 8018324:	bd80      	pop	{r7, pc}
 8018326:	46c0      	nop			; (mov r8, r8)
 8018328:	200005ec 	.word	0x200005ec
 801832c:	20000694 	.word	0x20000694

08018330 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8018330:	b580      	push	{r7, lr}
 8018332:	b084      	sub	sp, #16
 8018334:	af00      	add	r7, sp, #0
 8018336:	60f8      	str	r0, [r7, #12]
 8018338:	60b9      	str	r1, [r7, #8]
 801833a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	4a06      	ldr	r2, [pc, #24]	; (8018358 <vApplicationGetTimerTaskMemory+0x28>)
 8018340:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018342:	68bb      	ldr	r3, [r7, #8]
 8018344:	4a05      	ldr	r2, [pc, #20]	; (801835c <vApplicationGetTimerTaskMemory+0x2c>)
 8018346:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	2280      	movs	r2, #128	; 0x80
 801834c:	0052      	lsls	r2, r2, #1
 801834e:	601a      	str	r2, [r3, #0]
}
 8018350:	46c0      	nop			; (mov r8, r8)
 8018352:	46bd      	mov	sp, r7
 8018354:	b004      	add	sp, #16
 8018356:	bd80      	pop	{r7, pc}
 8018358:	20000894 	.word	0x20000894
 801835c:	2000093c 	.word	0x2000093c

08018360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b082      	sub	sp, #8
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	3308      	adds	r3, #8
 801836c:	001a      	movs	r2, r3
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2201      	movs	r2, #1
 8018376:	4252      	negs	r2, r2
 8018378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	3308      	adds	r3, #8
 801837e:	001a      	movs	r2, r3
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	3308      	adds	r3, #8
 8018388:	001a      	movs	r2, r3
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	2200      	movs	r2, #0
 8018392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018394:	46c0      	nop			; (mov r8, r8)
 8018396:	46bd      	mov	sp, r7
 8018398:	b002      	add	sp, #8
 801839a:	bd80      	pop	{r7, pc}

0801839c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801839c:	b580      	push	{r7, lr}
 801839e:	b082      	sub	sp, #8
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	2200      	movs	r2, #0
 80183a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80183aa:	46c0      	nop			; (mov r8, r8)
 80183ac:	46bd      	mov	sp, r7
 80183ae:	b002      	add	sp, #8
 80183b0:	bd80      	pop	{r7, pc}

080183b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80183b2:	b580      	push	{r7, lr}
 80183b4:	b084      	sub	sp, #16
 80183b6:	af00      	add	r7, sp, #0
 80183b8:	6078      	str	r0, [r7, #4]
 80183ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	685b      	ldr	r3, [r3, #4]
 80183c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80183c2:	683b      	ldr	r3, [r7, #0]
 80183c4:	68fa      	ldr	r2, [r7, #12]
 80183c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	689a      	ldr	r2, [r3, #8]
 80183cc:	683b      	ldr	r3, [r7, #0]
 80183ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	689b      	ldr	r3, [r3, #8]
 80183d4:	683a      	ldr	r2, [r7, #0]
 80183d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	683a      	ldr	r2, [r7, #0]
 80183dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	687a      	ldr	r2, [r7, #4]
 80183e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	1c5a      	adds	r2, r3, #1
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	601a      	str	r2, [r3, #0]
}
 80183ee:	46c0      	nop			; (mov r8, r8)
 80183f0:	46bd      	mov	sp, r7
 80183f2:	b004      	add	sp, #16
 80183f4:	bd80      	pop	{r7, pc}

080183f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80183f6:	b580      	push	{r7, lr}
 80183f8:	b084      	sub	sp, #16
 80183fa:	af00      	add	r7, sp, #0
 80183fc:	6078      	str	r0, [r7, #4]
 80183fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018400:	683b      	ldr	r3, [r7, #0]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018406:	68bb      	ldr	r3, [r7, #8]
 8018408:	3301      	adds	r3, #1
 801840a:	d103      	bne.n	8018414 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	691b      	ldr	r3, [r3, #16]
 8018410:	60fb      	str	r3, [r7, #12]
 8018412:	e00c      	b.n	801842e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	3308      	adds	r3, #8
 8018418:	60fb      	str	r3, [r7, #12]
 801841a:	e002      	b.n	8018422 <vListInsert+0x2c>
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	685b      	ldr	r3, [r3, #4]
 8018420:	60fb      	str	r3, [r7, #12]
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	685b      	ldr	r3, [r3, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	68ba      	ldr	r2, [r7, #8]
 801842a:	429a      	cmp	r2, r3
 801842c:	d2f6      	bcs.n	801841c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	685a      	ldr	r2, [r3, #4]
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018436:	683b      	ldr	r3, [r7, #0]
 8018438:	685b      	ldr	r3, [r3, #4]
 801843a:	683a      	ldr	r2, [r7, #0]
 801843c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	68fa      	ldr	r2, [r7, #12]
 8018442:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	683a      	ldr	r2, [r7, #0]
 8018448:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	687a      	ldr	r2, [r7, #4]
 801844e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	1c5a      	adds	r2, r3, #1
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	601a      	str	r2, [r3, #0]
}
 801845a:	46c0      	nop			; (mov r8, r8)
 801845c:	46bd      	mov	sp, r7
 801845e:	b004      	add	sp, #16
 8018460:	bd80      	pop	{r7, pc}

08018462 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018462:	b580      	push	{r7, lr}
 8018464:	b084      	sub	sp, #16
 8018466:	af00      	add	r7, sp, #0
 8018468:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	691b      	ldr	r3, [r3, #16]
 801846e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	687a      	ldr	r2, [r7, #4]
 8018476:	6892      	ldr	r2, [r2, #8]
 8018478:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	689b      	ldr	r3, [r3, #8]
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	6852      	ldr	r2, [r2, #4]
 8018482:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	685b      	ldr	r3, [r3, #4]
 8018488:	687a      	ldr	r2, [r7, #4]
 801848a:	429a      	cmp	r2, r3
 801848c:	d103      	bne.n	8018496 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	689a      	ldr	r2, [r3, #8]
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	2200      	movs	r2, #0
 801849a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	1e5a      	subs	r2, r3, #1
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	681b      	ldr	r3, [r3, #0]
}
 80184aa:	0018      	movs	r0, r3
 80184ac:	46bd      	mov	sp, r7
 80184ae:	b004      	add	sp, #16
 80184b0:	bd80      	pop	{r7, pc}

080184b2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80184b2:	b580      	push	{r7, lr}
 80184b4:	b084      	sub	sp, #16
 80184b6:	af00      	add	r7, sp, #0
 80184b8:	6078      	str	r0, [r7, #4]
 80184ba:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d101      	bne.n	80184ca <xQueueGenericReset+0x18>
 80184c6:	b672      	cpsid	i
 80184c8:	e7fe      	b.n	80184c8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80184ca:	f002 f829 	bl	801a520 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	681a      	ldr	r2, [r3, #0]
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184da:	434b      	muls	r3, r1
 80184dc:	18d2      	adds	r2, r2, r3
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	2200      	movs	r2, #0
 80184e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	681a      	ldr	r2, [r3, #0]
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	681a      	ldr	r2, [r3, #0]
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184f8:	1e59      	subs	r1, r3, #1
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184fe:	434b      	muls	r3, r1
 8018500:	18d2      	adds	r2, r2, r3
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	2244      	movs	r2, #68	; 0x44
 801850a:	21ff      	movs	r1, #255	; 0xff
 801850c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	2245      	movs	r2, #69	; 0x45
 8018512:	21ff      	movs	r1, #255	; 0xff
 8018514:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d10d      	bne.n	8018538 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	691b      	ldr	r3, [r3, #16]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d013      	beq.n	801854c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	3310      	adds	r3, #16
 8018528:	0018      	movs	r0, r3
 801852a:	f001 f9dd 	bl	80198e8 <xTaskRemoveFromEventList>
 801852e:	1e03      	subs	r3, r0, #0
 8018530:	d00c      	beq.n	801854c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018532:	f001 ffe5 	bl	801a500 <vPortYield>
 8018536:	e009      	b.n	801854c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	3310      	adds	r3, #16
 801853c:	0018      	movs	r0, r3
 801853e:	f7ff ff0f 	bl	8018360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	3324      	adds	r3, #36	; 0x24
 8018546:	0018      	movs	r0, r3
 8018548:	f7ff ff0a 	bl	8018360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801854c:	f001 fffa 	bl	801a544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018550:	2301      	movs	r3, #1
}
 8018552:	0018      	movs	r0, r3
 8018554:	46bd      	mov	sp, r7
 8018556:	b004      	add	sp, #16
 8018558:	bd80      	pop	{r7, pc}

0801855a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801855a:	b590      	push	{r4, r7, lr}
 801855c:	b089      	sub	sp, #36	; 0x24
 801855e:	af02      	add	r7, sp, #8
 8018560:	60f8      	str	r0, [r7, #12]
 8018562:	60b9      	str	r1, [r7, #8]
 8018564:	607a      	str	r2, [r7, #4]
 8018566:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d101      	bne.n	8018572 <xQueueGenericCreateStatic+0x18>
 801856e:	b672      	cpsid	i
 8018570:	e7fe      	b.n	8018570 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018572:	683b      	ldr	r3, [r7, #0]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d101      	bne.n	801857c <xQueueGenericCreateStatic+0x22>
 8018578:	b672      	cpsid	i
 801857a:	e7fe      	b.n	801857a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d002      	beq.n	8018588 <xQueueGenericCreateStatic+0x2e>
 8018582:	68bb      	ldr	r3, [r7, #8]
 8018584:	2b00      	cmp	r3, #0
 8018586:	d001      	beq.n	801858c <xQueueGenericCreateStatic+0x32>
 8018588:	2301      	movs	r3, #1
 801858a:	e000      	b.n	801858e <xQueueGenericCreateStatic+0x34>
 801858c:	2300      	movs	r3, #0
 801858e:	2b00      	cmp	r3, #0
 8018590:	d101      	bne.n	8018596 <xQueueGenericCreateStatic+0x3c>
 8018592:	b672      	cpsid	i
 8018594:	e7fe      	b.n	8018594 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d102      	bne.n	80185a2 <xQueueGenericCreateStatic+0x48>
 801859c:	68bb      	ldr	r3, [r7, #8]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d101      	bne.n	80185a6 <xQueueGenericCreateStatic+0x4c>
 80185a2:	2301      	movs	r3, #1
 80185a4:	e000      	b.n	80185a8 <xQueueGenericCreateStatic+0x4e>
 80185a6:	2300      	movs	r3, #0
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d101      	bne.n	80185b0 <xQueueGenericCreateStatic+0x56>
 80185ac:	b672      	cpsid	i
 80185ae:	e7fe      	b.n	80185ae <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80185b0:	2350      	movs	r3, #80	; 0x50
 80185b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80185b4:	693b      	ldr	r3, [r7, #16]
 80185b6:	2b50      	cmp	r3, #80	; 0x50
 80185b8:	d001      	beq.n	80185be <xQueueGenericCreateStatic+0x64>
 80185ba:	b672      	cpsid	i
 80185bc:	e7fe      	b.n	80185bc <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80185be:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80185c0:	683b      	ldr	r3, [r7, #0]
 80185c2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80185c4:	697b      	ldr	r3, [r7, #20]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d00e      	beq.n	80185e8 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	2246      	movs	r2, #70	; 0x46
 80185ce:	2101      	movs	r1, #1
 80185d0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80185d2:	2328      	movs	r3, #40	; 0x28
 80185d4:	18fb      	adds	r3, r7, r3
 80185d6:	781c      	ldrb	r4, [r3, #0]
 80185d8:	687a      	ldr	r2, [r7, #4]
 80185da:	68b9      	ldr	r1, [r7, #8]
 80185dc:	68f8      	ldr	r0, [r7, #12]
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	9300      	str	r3, [sp, #0]
 80185e2:	0023      	movs	r3, r4
 80185e4:	f000 f837 	bl	8018656 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80185e8:	697b      	ldr	r3, [r7, #20]
	}
 80185ea:	0018      	movs	r0, r3
 80185ec:	46bd      	mov	sp, r7
 80185ee:	b007      	add	sp, #28
 80185f0:	bd90      	pop	{r4, r7, pc}

080185f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80185f2:	b590      	push	{r4, r7, lr}
 80185f4:	b08b      	sub	sp, #44	; 0x2c
 80185f6:	af02      	add	r7, sp, #8
 80185f8:	60f8      	str	r0, [r7, #12]
 80185fa:	60b9      	str	r1, [r7, #8]
 80185fc:	1dfb      	adds	r3, r7, #7
 80185fe:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d101      	bne.n	801860a <xQueueGenericCreate+0x18>
 8018606:	b672      	cpsid	i
 8018608:	e7fe      	b.n	8018608 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	68ba      	ldr	r2, [r7, #8]
 801860e:	4353      	muls	r3, r2
 8018610:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018612:	69fb      	ldr	r3, [r7, #28]
 8018614:	3350      	adds	r3, #80	; 0x50
 8018616:	0018      	movs	r0, r3
 8018618:	f002 f81a 	bl	801a650 <pvPortMalloc>
 801861c:	0003      	movs	r3, r0
 801861e:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8018620:	69bb      	ldr	r3, [r7, #24]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d012      	beq.n	801864c <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018626:	69bb      	ldr	r3, [r7, #24]
 8018628:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801862a:	697b      	ldr	r3, [r7, #20]
 801862c:	3350      	adds	r3, #80	; 0x50
 801862e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018630:	69bb      	ldr	r3, [r7, #24]
 8018632:	2246      	movs	r2, #70	; 0x46
 8018634:	2100      	movs	r1, #0
 8018636:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018638:	1dfb      	adds	r3, r7, #7
 801863a:	781c      	ldrb	r4, [r3, #0]
 801863c:	697a      	ldr	r2, [r7, #20]
 801863e:	68b9      	ldr	r1, [r7, #8]
 8018640:	68f8      	ldr	r0, [r7, #12]
 8018642:	69bb      	ldr	r3, [r7, #24]
 8018644:	9300      	str	r3, [sp, #0]
 8018646:	0023      	movs	r3, r4
 8018648:	f000 f805 	bl	8018656 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801864c:	69bb      	ldr	r3, [r7, #24]
	}
 801864e:	0018      	movs	r0, r3
 8018650:	46bd      	mov	sp, r7
 8018652:	b009      	add	sp, #36	; 0x24
 8018654:	bd90      	pop	{r4, r7, pc}

08018656 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018656:	b580      	push	{r7, lr}
 8018658:	b084      	sub	sp, #16
 801865a:	af00      	add	r7, sp, #0
 801865c:	60f8      	str	r0, [r7, #12]
 801865e:	60b9      	str	r1, [r7, #8]
 8018660:	607a      	str	r2, [r7, #4]
 8018662:	001a      	movs	r2, r3
 8018664:	1cfb      	adds	r3, r7, #3
 8018666:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018668:	68bb      	ldr	r3, [r7, #8]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d103      	bne.n	8018676 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801866e:	69bb      	ldr	r3, [r7, #24]
 8018670:	69ba      	ldr	r2, [r7, #24]
 8018672:	601a      	str	r2, [r3, #0]
 8018674:	e002      	b.n	801867c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018676:	69bb      	ldr	r3, [r7, #24]
 8018678:	687a      	ldr	r2, [r7, #4]
 801867a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801867c:	69bb      	ldr	r3, [r7, #24]
 801867e:	68fa      	ldr	r2, [r7, #12]
 8018680:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018682:	69bb      	ldr	r3, [r7, #24]
 8018684:	68ba      	ldr	r2, [r7, #8]
 8018686:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018688:	69bb      	ldr	r3, [r7, #24]
 801868a:	2101      	movs	r1, #1
 801868c:	0018      	movs	r0, r3
 801868e:	f7ff ff10 	bl	80184b2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8018692:	69bb      	ldr	r3, [r7, #24]
 8018694:	1cfa      	adds	r2, r7, #3
 8018696:	214c      	movs	r1, #76	; 0x4c
 8018698:	7812      	ldrb	r2, [r2, #0]
 801869a:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801869c:	46c0      	nop			; (mov r8, r8)
 801869e:	46bd      	mov	sp, r7
 80186a0:	b004      	add	sp, #16
 80186a2:	bd80      	pop	{r7, pc}

080186a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b08a      	sub	sp, #40	; 0x28
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	60f8      	str	r0, [r7, #12]
 80186ac:	60b9      	str	r1, [r7, #8]
 80186ae:	607a      	str	r2, [r7, #4]
 80186b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80186b2:	2300      	movs	r3, #0
 80186b4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80186ba:	6a3b      	ldr	r3, [r7, #32]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d101      	bne.n	80186c4 <xQueueGenericSend+0x20>
 80186c0:	b672      	cpsid	i
 80186c2:	e7fe      	b.n	80186c2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80186c4:	68bb      	ldr	r3, [r7, #8]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d103      	bne.n	80186d2 <xQueueGenericSend+0x2e>
 80186ca:	6a3b      	ldr	r3, [r7, #32]
 80186cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d101      	bne.n	80186d6 <xQueueGenericSend+0x32>
 80186d2:	2301      	movs	r3, #1
 80186d4:	e000      	b.n	80186d8 <xQueueGenericSend+0x34>
 80186d6:	2300      	movs	r3, #0
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d101      	bne.n	80186e0 <xQueueGenericSend+0x3c>
 80186dc:	b672      	cpsid	i
 80186de:	e7fe      	b.n	80186de <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	2b02      	cmp	r3, #2
 80186e4:	d103      	bne.n	80186ee <xQueueGenericSend+0x4a>
 80186e6:	6a3b      	ldr	r3, [r7, #32]
 80186e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186ea:	2b01      	cmp	r3, #1
 80186ec:	d101      	bne.n	80186f2 <xQueueGenericSend+0x4e>
 80186ee:	2301      	movs	r3, #1
 80186f0:	e000      	b.n	80186f4 <xQueueGenericSend+0x50>
 80186f2:	2300      	movs	r3, #0
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d101      	bne.n	80186fc <xQueueGenericSend+0x58>
 80186f8:	b672      	cpsid	i
 80186fa:	e7fe      	b.n	80186fa <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80186fc:	f001 fa9a 	bl	8019c34 <xTaskGetSchedulerState>
 8018700:	1e03      	subs	r3, r0, #0
 8018702:	d102      	bne.n	801870a <xQueueGenericSend+0x66>
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d101      	bne.n	801870e <xQueueGenericSend+0x6a>
 801870a:	2301      	movs	r3, #1
 801870c:	e000      	b.n	8018710 <xQueueGenericSend+0x6c>
 801870e:	2300      	movs	r3, #0
 8018710:	2b00      	cmp	r3, #0
 8018712:	d101      	bne.n	8018718 <xQueueGenericSend+0x74>
 8018714:	b672      	cpsid	i
 8018716:	e7fe      	b.n	8018716 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018718:	f001 ff02 	bl	801a520 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801871c:	6a3b      	ldr	r3, [r7, #32]
 801871e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018720:	6a3b      	ldr	r3, [r7, #32]
 8018722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018724:	429a      	cmp	r2, r3
 8018726:	d302      	bcc.n	801872e <xQueueGenericSend+0x8a>
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	2b02      	cmp	r3, #2
 801872c:	d11e      	bne.n	801876c <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801872e:	683a      	ldr	r2, [r7, #0]
 8018730:	68b9      	ldr	r1, [r7, #8]
 8018732:	6a3b      	ldr	r3, [r7, #32]
 8018734:	0018      	movs	r0, r3
 8018736:	f000 fa05 	bl	8018b44 <prvCopyDataToQueue>
 801873a:	0003      	movs	r3, r0
 801873c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801873e:	6a3b      	ldr	r3, [r7, #32]
 8018740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018742:	2b00      	cmp	r3, #0
 8018744:	d009      	beq.n	801875a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018746:	6a3b      	ldr	r3, [r7, #32]
 8018748:	3324      	adds	r3, #36	; 0x24
 801874a:	0018      	movs	r0, r3
 801874c:	f001 f8cc 	bl	80198e8 <xTaskRemoveFromEventList>
 8018750:	1e03      	subs	r3, r0, #0
 8018752:	d007      	beq.n	8018764 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018754:	f001 fed4 	bl	801a500 <vPortYield>
 8018758:	e004      	b.n	8018764 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801875a:	69fb      	ldr	r3, [r7, #28]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d001      	beq.n	8018764 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018760:	f001 fece 	bl	801a500 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018764:	f001 feee 	bl	801a544 <vPortExitCritical>
				return pdPASS;
 8018768:	2301      	movs	r3, #1
 801876a:	e05b      	b.n	8018824 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d103      	bne.n	801877a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018772:	f001 fee7 	bl	801a544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018776:	2300      	movs	r3, #0
 8018778:	e054      	b.n	8018824 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 801877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801877c:	2b00      	cmp	r3, #0
 801877e:	d106      	bne.n	801878e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018780:	2314      	movs	r3, #20
 8018782:	18fb      	adds	r3, r7, r3
 8018784:	0018      	movs	r0, r3
 8018786:	f001 f90b 	bl	80199a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801878a:	2301      	movs	r3, #1
 801878c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801878e:	f001 fed9 	bl	801a544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018792:	f000 feb5 	bl	8019500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018796:	f001 fec3 	bl	801a520 <vPortEnterCritical>
 801879a:	6a3b      	ldr	r3, [r7, #32]
 801879c:	2244      	movs	r2, #68	; 0x44
 801879e:	5c9b      	ldrb	r3, [r3, r2]
 80187a0:	b25b      	sxtb	r3, r3
 80187a2:	3301      	adds	r3, #1
 80187a4:	d103      	bne.n	80187ae <xQueueGenericSend+0x10a>
 80187a6:	6a3b      	ldr	r3, [r7, #32]
 80187a8:	2244      	movs	r2, #68	; 0x44
 80187aa:	2100      	movs	r1, #0
 80187ac:	5499      	strb	r1, [r3, r2]
 80187ae:	6a3b      	ldr	r3, [r7, #32]
 80187b0:	2245      	movs	r2, #69	; 0x45
 80187b2:	5c9b      	ldrb	r3, [r3, r2]
 80187b4:	b25b      	sxtb	r3, r3
 80187b6:	3301      	adds	r3, #1
 80187b8:	d103      	bne.n	80187c2 <xQueueGenericSend+0x11e>
 80187ba:	6a3b      	ldr	r3, [r7, #32]
 80187bc:	2245      	movs	r2, #69	; 0x45
 80187be:	2100      	movs	r1, #0
 80187c0:	5499      	strb	r1, [r3, r2]
 80187c2:	f001 febf 	bl	801a544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80187c6:	1d3a      	adds	r2, r7, #4
 80187c8:	2314      	movs	r3, #20
 80187ca:	18fb      	adds	r3, r7, r3
 80187cc:	0011      	movs	r1, r2
 80187ce:	0018      	movs	r0, r3
 80187d0:	f001 f8fa 	bl	80199c8 <xTaskCheckForTimeOut>
 80187d4:	1e03      	subs	r3, r0, #0
 80187d6:	d11e      	bne.n	8018816 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80187d8:	6a3b      	ldr	r3, [r7, #32]
 80187da:	0018      	movs	r0, r3
 80187dc:	f000 fab7 	bl	8018d4e <prvIsQueueFull>
 80187e0:	1e03      	subs	r3, r0, #0
 80187e2:	d011      	beq.n	8018808 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80187e4:	6a3b      	ldr	r3, [r7, #32]
 80187e6:	3310      	adds	r3, #16
 80187e8:	687a      	ldr	r2, [r7, #4]
 80187ea:	0011      	movs	r1, r2
 80187ec:	0018      	movs	r0, r3
 80187ee:	f001 f837 	bl	8019860 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80187f2:	6a3b      	ldr	r3, [r7, #32]
 80187f4:	0018      	movs	r0, r3
 80187f6:	f000 fa36 	bl	8018c66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80187fa:	f000 fe8d 	bl	8019518 <xTaskResumeAll>
 80187fe:	1e03      	subs	r3, r0, #0
 8018800:	d18a      	bne.n	8018718 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8018802:	f001 fe7d 	bl	801a500 <vPortYield>
 8018806:	e787      	b.n	8018718 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018808:	6a3b      	ldr	r3, [r7, #32]
 801880a:	0018      	movs	r0, r3
 801880c:	f000 fa2b 	bl	8018c66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018810:	f000 fe82 	bl	8019518 <xTaskResumeAll>
 8018814:	e780      	b.n	8018718 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018816:	6a3b      	ldr	r3, [r7, #32]
 8018818:	0018      	movs	r0, r3
 801881a:	f000 fa24 	bl	8018c66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801881e:	f000 fe7b 	bl	8019518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018822:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018824:	0018      	movs	r0, r3
 8018826:	46bd      	mov	sp, r7
 8018828:	b00a      	add	sp, #40	; 0x28
 801882a:	bd80      	pop	{r7, pc}

0801882c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801882c:	b590      	push	{r4, r7, lr}
 801882e:	b08b      	sub	sp, #44	; 0x2c
 8018830:	af00      	add	r7, sp, #0
 8018832:	60f8      	str	r0, [r7, #12]
 8018834:	60b9      	str	r1, [r7, #8]
 8018836:	607a      	str	r2, [r7, #4]
 8018838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801883e:	6a3b      	ldr	r3, [r7, #32]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d101      	bne.n	8018848 <xQueueGenericSendFromISR+0x1c>
 8018844:	b672      	cpsid	i
 8018846:	e7fe      	b.n	8018846 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018848:	68bb      	ldr	r3, [r7, #8]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d103      	bne.n	8018856 <xQueueGenericSendFromISR+0x2a>
 801884e:	6a3b      	ldr	r3, [r7, #32]
 8018850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018852:	2b00      	cmp	r3, #0
 8018854:	d101      	bne.n	801885a <xQueueGenericSendFromISR+0x2e>
 8018856:	2301      	movs	r3, #1
 8018858:	e000      	b.n	801885c <xQueueGenericSendFromISR+0x30>
 801885a:	2300      	movs	r3, #0
 801885c:	2b00      	cmp	r3, #0
 801885e:	d101      	bne.n	8018864 <xQueueGenericSendFromISR+0x38>
 8018860:	b672      	cpsid	i
 8018862:	e7fe      	b.n	8018862 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018864:	683b      	ldr	r3, [r7, #0]
 8018866:	2b02      	cmp	r3, #2
 8018868:	d103      	bne.n	8018872 <xQueueGenericSendFromISR+0x46>
 801886a:	6a3b      	ldr	r3, [r7, #32]
 801886c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801886e:	2b01      	cmp	r3, #1
 8018870:	d101      	bne.n	8018876 <xQueueGenericSendFromISR+0x4a>
 8018872:	2301      	movs	r3, #1
 8018874:	e000      	b.n	8018878 <xQueueGenericSendFromISR+0x4c>
 8018876:	2300      	movs	r3, #0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d101      	bne.n	8018880 <xQueueGenericSendFromISR+0x54>
 801887c:	b672      	cpsid	i
 801887e:	e7fe      	b.n	801887e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018880:	f001 fe78 	bl	801a574 <ulSetInterruptMaskFromISR>
 8018884:	0003      	movs	r3, r0
 8018886:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018888:	6a3b      	ldr	r3, [r7, #32]
 801888a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801888c:	6a3b      	ldr	r3, [r7, #32]
 801888e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018890:	429a      	cmp	r2, r3
 8018892:	d302      	bcc.n	801889a <xQueueGenericSendFromISR+0x6e>
 8018894:	683b      	ldr	r3, [r7, #0]
 8018896:	2b02      	cmp	r3, #2
 8018898:	d131      	bne.n	80188fe <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801889a:	241b      	movs	r4, #27
 801889c:	193b      	adds	r3, r7, r4
 801889e:	6a3a      	ldr	r2, [r7, #32]
 80188a0:	2145      	movs	r1, #69	; 0x45
 80188a2:	5c52      	ldrb	r2, [r2, r1]
 80188a4:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80188a6:	6a3b      	ldr	r3, [r7, #32]
 80188a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188aa:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80188ac:	683a      	ldr	r2, [r7, #0]
 80188ae:	68b9      	ldr	r1, [r7, #8]
 80188b0:	6a3b      	ldr	r3, [r7, #32]
 80188b2:	0018      	movs	r0, r3
 80188b4:	f000 f946 	bl	8018b44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80188b8:	193b      	adds	r3, r7, r4
 80188ba:	781b      	ldrb	r3, [r3, #0]
 80188bc:	b25b      	sxtb	r3, r3
 80188be:	3301      	adds	r3, #1
 80188c0:	d111      	bne.n	80188e6 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80188c2:	6a3b      	ldr	r3, [r7, #32]
 80188c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d016      	beq.n	80188f8 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80188ca:	6a3b      	ldr	r3, [r7, #32]
 80188cc:	3324      	adds	r3, #36	; 0x24
 80188ce:	0018      	movs	r0, r3
 80188d0:	f001 f80a 	bl	80198e8 <xTaskRemoveFromEventList>
 80188d4:	1e03      	subs	r3, r0, #0
 80188d6:	d00f      	beq.n	80188f8 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d00c      	beq.n	80188f8 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	2201      	movs	r2, #1
 80188e2:	601a      	str	r2, [r3, #0]
 80188e4:	e008      	b.n	80188f8 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80188e6:	231b      	movs	r3, #27
 80188e8:	18fb      	adds	r3, r7, r3
 80188ea:	781b      	ldrb	r3, [r3, #0]
 80188ec:	3301      	adds	r3, #1
 80188ee:	b2db      	uxtb	r3, r3
 80188f0:	b259      	sxtb	r1, r3
 80188f2:	6a3b      	ldr	r3, [r7, #32]
 80188f4:	2245      	movs	r2, #69	; 0x45
 80188f6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80188f8:	2301      	movs	r3, #1
 80188fa:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80188fc:	e001      	b.n	8018902 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80188fe:	2300      	movs	r3, #0
 8018900:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8018902:	69fb      	ldr	r3, [r7, #28]
 8018904:	0018      	movs	r0, r3
 8018906:	f001 fe3b 	bl	801a580 <vClearInterruptMaskFromISR>

	return xReturn;
 801890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801890c:	0018      	movs	r0, r3
 801890e:	46bd      	mov	sp, r7
 8018910:	b00b      	add	sp, #44	; 0x2c
 8018912:	bd90      	pop	{r4, r7, pc}

08018914 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b08a      	sub	sp, #40	; 0x28
 8018918:	af00      	add	r7, sp, #0
 801891a:	60f8      	str	r0, [r7, #12]
 801891c:	60b9      	str	r1, [r7, #8]
 801891e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018920:	2300      	movs	r3, #0
 8018922:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018928:	6a3b      	ldr	r3, [r7, #32]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d101      	bne.n	8018932 <xQueueReceive+0x1e>
 801892e:	b672      	cpsid	i
 8018930:	e7fe      	b.n	8018930 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d103      	bne.n	8018940 <xQueueReceive+0x2c>
 8018938:	6a3b      	ldr	r3, [r7, #32]
 801893a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801893c:	2b00      	cmp	r3, #0
 801893e:	d101      	bne.n	8018944 <xQueueReceive+0x30>
 8018940:	2301      	movs	r3, #1
 8018942:	e000      	b.n	8018946 <xQueueReceive+0x32>
 8018944:	2300      	movs	r3, #0
 8018946:	2b00      	cmp	r3, #0
 8018948:	d101      	bne.n	801894e <xQueueReceive+0x3a>
 801894a:	b672      	cpsid	i
 801894c:	e7fe      	b.n	801894c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801894e:	f001 f971 	bl	8019c34 <xTaskGetSchedulerState>
 8018952:	1e03      	subs	r3, r0, #0
 8018954:	d102      	bne.n	801895c <xQueueReceive+0x48>
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d101      	bne.n	8018960 <xQueueReceive+0x4c>
 801895c:	2301      	movs	r3, #1
 801895e:	e000      	b.n	8018962 <xQueueReceive+0x4e>
 8018960:	2300      	movs	r3, #0
 8018962:	2b00      	cmp	r3, #0
 8018964:	d101      	bne.n	801896a <xQueueReceive+0x56>
 8018966:	b672      	cpsid	i
 8018968:	e7fe      	b.n	8018968 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801896a:	f001 fdd9 	bl	801a520 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801896e:	6a3b      	ldr	r3, [r7, #32]
 8018970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018972:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018974:	69fb      	ldr	r3, [r7, #28]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d01a      	beq.n	80189b0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801897a:	68ba      	ldr	r2, [r7, #8]
 801897c:	6a3b      	ldr	r3, [r7, #32]
 801897e:	0011      	movs	r1, r2
 8018980:	0018      	movs	r0, r3
 8018982:	f000 f94a 	bl	8018c1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018986:	69fb      	ldr	r3, [r7, #28]
 8018988:	1e5a      	subs	r2, r3, #1
 801898a:	6a3b      	ldr	r3, [r7, #32]
 801898c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801898e:	6a3b      	ldr	r3, [r7, #32]
 8018990:	691b      	ldr	r3, [r3, #16]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d008      	beq.n	80189a8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018996:	6a3b      	ldr	r3, [r7, #32]
 8018998:	3310      	adds	r3, #16
 801899a:	0018      	movs	r0, r3
 801899c:	f000 ffa4 	bl	80198e8 <xTaskRemoveFromEventList>
 80189a0:	1e03      	subs	r3, r0, #0
 80189a2:	d001      	beq.n	80189a8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80189a4:	f001 fdac 	bl	801a500 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80189a8:	f001 fdcc 	bl	801a544 <vPortExitCritical>
				return pdPASS;
 80189ac:	2301      	movs	r3, #1
 80189ae:	e062      	b.n	8018a76 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d103      	bne.n	80189be <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80189b6:	f001 fdc5 	bl	801a544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80189ba:	2300      	movs	r3, #0
 80189bc:	e05b      	b.n	8018a76 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80189be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d106      	bne.n	80189d2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80189c4:	2314      	movs	r3, #20
 80189c6:	18fb      	adds	r3, r7, r3
 80189c8:	0018      	movs	r0, r3
 80189ca:	f000 ffe9 	bl	80199a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80189ce:	2301      	movs	r3, #1
 80189d0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80189d2:	f001 fdb7 	bl	801a544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80189d6:	f000 fd93 	bl	8019500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80189da:	f001 fda1 	bl	801a520 <vPortEnterCritical>
 80189de:	6a3b      	ldr	r3, [r7, #32]
 80189e0:	2244      	movs	r2, #68	; 0x44
 80189e2:	5c9b      	ldrb	r3, [r3, r2]
 80189e4:	b25b      	sxtb	r3, r3
 80189e6:	3301      	adds	r3, #1
 80189e8:	d103      	bne.n	80189f2 <xQueueReceive+0xde>
 80189ea:	6a3b      	ldr	r3, [r7, #32]
 80189ec:	2244      	movs	r2, #68	; 0x44
 80189ee:	2100      	movs	r1, #0
 80189f0:	5499      	strb	r1, [r3, r2]
 80189f2:	6a3b      	ldr	r3, [r7, #32]
 80189f4:	2245      	movs	r2, #69	; 0x45
 80189f6:	5c9b      	ldrb	r3, [r3, r2]
 80189f8:	b25b      	sxtb	r3, r3
 80189fa:	3301      	adds	r3, #1
 80189fc:	d103      	bne.n	8018a06 <xQueueReceive+0xf2>
 80189fe:	6a3b      	ldr	r3, [r7, #32]
 8018a00:	2245      	movs	r2, #69	; 0x45
 8018a02:	2100      	movs	r1, #0
 8018a04:	5499      	strb	r1, [r3, r2]
 8018a06:	f001 fd9d 	bl	801a544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018a0a:	1d3a      	adds	r2, r7, #4
 8018a0c:	2314      	movs	r3, #20
 8018a0e:	18fb      	adds	r3, r7, r3
 8018a10:	0011      	movs	r1, r2
 8018a12:	0018      	movs	r0, r3
 8018a14:	f000 ffd8 	bl	80199c8 <xTaskCheckForTimeOut>
 8018a18:	1e03      	subs	r3, r0, #0
 8018a1a:	d11e      	bne.n	8018a5a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018a1c:	6a3b      	ldr	r3, [r7, #32]
 8018a1e:	0018      	movs	r0, r3
 8018a20:	f000 f97f 	bl	8018d22 <prvIsQueueEmpty>
 8018a24:	1e03      	subs	r3, r0, #0
 8018a26:	d011      	beq.n	8018a4c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018a28:	6a3b      	ldr	r3, [r7, #32]
 8018a2a:	3324      	adds	r3, #36	; 0x24
 8018a2c:	687a      	ldr	r2, [r7, #4]
 8018a2e:	0011      	movs	r1, r2
 8018a30:	0018      	movs	r0, r3
 8018a32:	f000 ff15 	bl	8019860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018a36:	6a3b      	ldr	r3, [r7, #32]
 8018a38:	0018      	movs	r0, r3
 8018a3a:	f000 f914 	bl	8018c66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018a3e:	f000 fd6b 	bl	8019518 <xTaskResumeAll>
 8018a42:	1e03      	subs	r3, r0, #0
 8018a44:	d191      	bne.n	801896a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8018a46:	f001 fd5b 	bl	801a500 <vPortYield>
 8018a4a:	e78e      	b.n	801896a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018a4c:	6a3b      	ldr	r3, [r7, #32]
 8018a4e:	0018      	movs	r0, r3
 8018a50:	f000 f909 	bl	8018c66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018a54:	f000 fd60 	bl	8019518 <xTaskResumeAll>
 8018a58:	e787      	b.n	801896a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018a5a:	6a3b      	ldr	r3, [r7, #32]
 8018a5c:	0018      	movs	r0, r3
 8018a5e:	f000 f902 	bl	8018c66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018a62:	f000 fd59 	bl	8019518 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018a66:	6a3b      	ldr	r3, [r7, #32]
 8018a68:	0018      	movs	r0, r3
 8018a6a:	f000 f95a 	bl	8018d22 <prvIsQueueEmpty>
 8018a6e:	1e03      	subs	r3, r0, #0
 8018a70:	d100      	bne.n	8018a74 <xQueueReceive+0x160>
 8018a72:	e77a      	b.n	801896a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018a74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018a76:	0018      	movs	r0, r3
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	b00a      	add	sp, #40	; 0x28
 8018a7c:	bd80      	pop	{r7, pc}

08018a7e <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018a7e:	b590      	push	{r4, r7, lr}
 8018a80:	b08b      	sub	sp, #44	; 0x2c
 8018a82:	af00      	add	r7, sp, #0
 8018a84:	60f8      	str	r0, [r7, #12]
 8018a86:	60b9      	str	r1, [r7, #8]
 8018a88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8018a8e:	6a3b      	ldr	r3, [r7, #32]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d101      	bne.n	8018a98 <xQueueReceiveFromISR+0x1a>
 8018a94:	b672      	cpsid	i
 8018a96:	e7fe      	b.n	8018a96 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d103      	bne.n	8018aa6 <xQueueReceiveFromISR+0x28>
 8018a9e:	6a3b      	ldr	r3, [r7, #32]
 8018aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d101      	bne.n	8018aaa <xQueueReceiveFromISR+0x2c>
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	e000      	b.n	8018aac <xQueueReceiveFromISR+0x2e>
 8018aaa:	2300      	movs	r3, #0
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d101      	bne.n	8018ab4 <xQueueReceiveFromISR+0x36>
 8018ab0:	b672      	cpsid	i
 8018ab2:	e7fe      	b.n	8018ab2 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018ab4:	f001 fd5e 	bl	801a574 <ulSetInterruptMaskFromISR>
 8018ab8:	0003      	movs	r3, r0
 8018aba:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018abc:	6a3b      	ldr	r3, [r7, #32]
 8018abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ac0:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018ac2:	69bb      	ldr	r3, [r7, #24]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d032      	beq.n	8018b2e <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018ac8:	2417      	movs	r4, #23
 8018aca:	193b      	adds	r3, r7, r4
 8018acc:	6a3a      	ldr	r2, [r7, #32]
 8018ace:	2144      	movs	r1, #68	; 0x44
 8018ad0:	5c52      	ldrb	r2, [r2, r1]
 8018ad2:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018ad4:	68ba      	ldr	r2, [r7, #8]
 8018ad6:	6a3b      	ldr	r3, [r7, #32]
 8018ad8:	0011      	movs	r1, r2
 8018ada:	0018      	movs	r0, r3
 8018adc:	f000 f89d 	bl	8018c1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018ae0:	69bb      	ldr	r3, [r7, #24]
 8018ae2:	1e5a      	subs	r2, r3, #1
 8018ae4:	6a3b      	ldr	r3, [r7, #32]
 8018ae6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8018ae8:	193b      	adds	r3, r7, r4
 8018aea:	781b      	ldrb	r3, [r3, #0]
 8018aec:	b25b      	sxtb	r3, r3
 8018aee:	3301      	adds	r3, #1
 8018af0:	d111      	bne.n	8018b16 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018af2:	6a3b      	ldr	r3, [r7, #32]
 8018af4:	691b      	ldr	r3, [r3, #16]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d016      	beq.n	8018b28 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018afa:	6a3b      	ldr	r3, [r7, #32]
 8018afc:	3310      	adds	r3, #16
 8018afe:	0018      	movs	r0, r3
 8018b00:	f000 fef2 	bl	80198e8 <xTaskRemoveFromEventList>
 8018b04:	1e03      	subs	r3, r0, #0
 8018b06:	d00f      	beq.n	8018b28 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d00c      	beq.n	8018b28 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	2201      	movs	r2, #1
 8018b12:	601a      	str	r2, [r3, #0]
 8018b14:	e008      	b.n	8018b28 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018b16:	2317      	movs	r3, #23
 8018b18:	18fb      	adds	r3, r7, r3
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	3301      	adds	r3, #1
 8018b1e:	b2db      	uxtb	r3, r3
 8018b20:	b259      	sxtb	r1, r3
 8018b22:	6a3b      	ldr	r3, [r7, #32]
 8018b24:	2244      	movs	r2, #68	; 0x44
 8018b26:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8018b28:	2301      	movs	r3, #1
 8018b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8018b2c:	e001      	b.n	8018b32 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8018b2e:	2300      	movs	r3, #0
 8018b30:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8018b32:	69fb      	ldr	r3, [r7, #28]
 8018b34:	0018      	movs	r0, r3
 8018b36:	f001 fd23 	bl	801a580 <vClearInterruptMaskFromISR>

	return xReturn;
 8018b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018b3c:	0018      	movs	r0, r3
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	b00b      	add	sp, #44	; 0x2c
 8018b42:	bd90      	pop	{r4, r7, pc}

08018b44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b086      	sub	sp, #24
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	60f8      	str	r0, [r7, #12]
 8018b4c:	60b9      	str	r1, [r7, #8]
 8018b4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018b50:	2300      	movs	r3, #0
 8018b52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d10e      	bne.n	8018b80 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d14e      	bne.n	8018c08 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	689b      	ldr	r3, [r3, #8]
 8018b6e:	0018      	movs	r0, r3
 8018b70:	f001 f87c 	bl	8019c6c <xTaskPriorityDisinherit>
 8018b74:	0003      	movs	r3, r0
 8018b76:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	609a      	str	r2, [r3, #8]
 8018b7e:	e043      	b.n	8018c08 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d119      	bne.n	8018bba <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	6858      	ldr	r0, [r3, #4]
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	0019      	movs	r1, r3
 8018b92:	f00a fe4f 	bl	8023834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	685a      	ldr	r2, [r3, #4]
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b9e:	18d2      	adds	r2, r2, r3
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	685a      	ldr	r2, [r3, #4]
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	689b      	ldr	r3, [r3, #8]
 8018bac:	429a      	cmp	r2, r3
 8018bae:	d32b      	bcc.n	8018c08 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	681a      	ldr	r2, [r3, #0]
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	605a      	str	r2, [r3, #4]
 8018bb8:	e026      	b.n	8018c08 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	68d8      	ldr	r0, [r3, #12]
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018bc2:	68bb      	ldr	r3, [r7, #8]
 8018bc4:	0019      	movs	r1, r3
 8018bc6:	f00a fe35 	bl	8023834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	68da      	ldr	r2, [r3, #12]
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bd2:	425b      	negs	r3, r3
 8018bd4:	18d2      	adds	r2, r2, r3
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	68da      	ldr	r2, [r3, #12]
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	429a      	cmp	r2, r3
 8018be4:	d207      	bcs.n	8018bf6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	689a      	ldr	r2, [r3, #8]
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bee:	425b      	negs	r3, r3
 8018bf0:	18d2      	adds	r2, r2, r3
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	2b02      	cmp	r3, #2
 8018bfa:	d105      	bne.n	8018c08 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018bfc:	693b      	ldr	r3, [r7, #16]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d002      	beq.n	8018c08 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018c02:	693b      	ldr	r3, [r7, #16]
 8018c04:	3b01      	subs	r3, #1
 8018c06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018c08:	693b      	ldr	r3, [r7, #16]
 8018c0a:	1c5a      	adds	r2, r3, #1
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018c10:	697b      	ldr	r3, [r7, #20]
}
 8018c12:	0018      	movs	r0, r3
 8018c14:	46bd      	mov	sp, r7
 8018c16:	b006      	add	sp, #24
 8018c18:	bd80      	pop	{r7, pc}

08018c1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018c1a:	b580      	push	{r7, lr}
 8018c1c:	b082      	sub	sp, #8
 8018c1e:	af00      	add	r7, sp, #0
 8018c20:	6078      	str	r0, [r7, #4]
 8018c22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d018      	beq.n	8018c5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	68da      	ldr	r2, [r3, #12]
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c34:	18d2      	adds	r2, r2, r3
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	68da      	ldr	r2, [r3, #12]
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	689b      	ldr	r3, [r3, #8]
 8018c42:	429a      	cmp	r2, r3
 8018c44:	d303      	bcc.n	8018c4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	681a      	ldr	r2, [r3, #0]
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	68d9      	ldr	r1, [r3, #12]
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	0018      	movs	r0, r3
 8018c5a:	f00a fdeb 	bl	8023834 <memcpy>
	}
}
 8018c5e:	46c0      	nop			; (mov r8, r8)
 8018c60:	46bd      	mov	sp, r7
 8018c62:	b002      	add	sp, #8
 8018c64:	bd80      	pop	{r7, pc}

08018c66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018c66:	b580      	push	{r7, lr}
 8018c68:	b084      	sub	sp, #16
 8018c6a:	af00      	add	r7, sp, #0
 8018c6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018c6e:	f001 fc57 	bl	801a520 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018c72:	230f      	movs	r3, #15
 8018c74:	18fb      	adds	r3, r7, r3
 8018c76:	687a      	ldr	r2, [r7, #4]
 8018c78:	2145      	movs	r1, #69	; 0x45
 8018c7a:	5c52      	ldrb	r2, [r2, r1]
 8018c7c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018c7e:	e013      	b.n	8018ca8 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d016      	beq.n	8018cb6 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	3324      	adds	r3, #36	; 0x24
 8018c8c:	0018      	movs	r0, r3
 8018c8e:	f000 fe2b 	bl	80198e8 <xTaskRemoveFromEventList>
 8018c92:	1e03      	subs	r3, r0, #0
 8018c94:	d001      	beq.n	8018c9a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018c96:	f000 fee7 	bl	8019a68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018c9a:	210f      	movs	r1, #15
 8018c9c:	187b      	adds	r3, r7, r1
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	3b01      	subs	r3, #1
 8018ca2:	b2da      	uxtb	r2, r3
 8018ca4:	187b      	adds	r3, r7, r1
 8018ca6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018ca8:	230f      	movs	r3, #15
 8018caa:	18fb      	adds	r3, r7, r3
 8018cac:	781b      	ldrb	r3, [r3, #0]
 8018cae:	b25b      	sxtb	r3, r3
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	dce5      	bgt.n	8018c80 <prvUnlockQueue+0x1a>
 8018cb4:	e000      	b.n	8018cb8 <prvUnlockQueue+0x52>
					break;
 8018cb6:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2245      	movs	r2, #69	; 0x45
 8018cbc:	21ff      	movs	r1, #255	; 0xff
 8018cbe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8018cc0:	f001 fc40 	bl	801a544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018cc4:	f001 fc2c 	bl	801a520 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018cc8:	230e      	movs	r3, #14
 8018cca:	18fb      	adds	r3, r7, r3
 8018ccc:	687a      	ldr	r2, [r7, #4]
 8018cce:	2144      	movs	r1, #68	; 0x44
 8018cd0:	5c52      	ldrb	r2, [r2, r1]
 8018cd2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018cd4:	e013      	b.n	8018cfe <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	691b      	ldr	r3, [r3, #16]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d016      	beq.n	8018d0c <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	3310      	adds	r3, #16
 8018ce2:	0018      	movs	r0, r3
 8018ce4:	f000 fe00 	bl	80198e8 <xTaskRemoveFromEventList>
 8018ce8:	1e03      	subs	r3, r0, #0
 8018cea:	d001      	beq.n	8018cf0 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8018cec:	f000 febc 	bl	8019a68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018cf0:	210e      	movs	r1, #14
 8018cf2:	187b      	adds	r3, r7, r1
 8018cf4:	781b      	ldrb	r3, [r3, #0]
 8018cf6:	3b01      	subs	r3, #1
 8018cf8:	b2da      	uxtb	r2, r3
 8018cfa:	187b      	adds	r3, r7, r1
 8018cfc:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018cfe:	230e      	movs	r3, #14
 8018d00:	18fb      	adds	r3, r7, r3
 8018d02:	781b      	ldrb	r3, [r3, #0]
 8018d04:	b25b      	sxtb	r3, r3
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	dce5      	bgt.n	8018cd6 <prvUnlockQueue+0x70>
 8018d0a:	e000      	b.n	8018d0e <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8018d0c:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	2244      	movs	r2, #68	; 0x44
 8018d12:	21ff      	movs	r1, #255	; 0xff
 8018d14:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8018d16:	f001 fc15 	bl	801a544 <vPortExitCritical>
}
 8018d1a:	46c0      	nop			; (mov r8, r8)
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	b004      	add	sp, #16
 8018d20:	bd80      	pop	{r7, pc}

08018d22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018d22:	b580      	push	{r7, lr}
 8018d24:	b084      	sub	sp, #16
 8018d26:	af00      	add	r7, sp, #0
 8018d28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018d2a:	f001 fbf9 	bl	801a520 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d102      	bne.n	8018d3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018d36:	2301      	movs	r3, #1
 8018d38:	60fb      	str	r3, [r7, #12]
 8018d3a:	e001      	b.n	8018d40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018d40:	f001 fc00 	bl	801a544 <vPortExitCritical>

	return xReturn;
 8018d44:	68fb      	ldr	r3, [r7, #12]
}
 8018d46:	0018      	movs	r0, r3
 8018d48:	46bd      	mov	sp, r7
 8018d4a:	b004      	add	sp, #16
 8018d4c:	bd80      	pop	{r7, pc}

08018d4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018d4e:	b580      	push	{r7, lr}
 8018d50:	b084      	sub	sp, #16
 8018d52:	af00      	add	r7, sp, #0
 8018d54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018d56:	f001 fbe3 	bl	801a520 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d102      	bne.n	8018d6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018d66:	2301      	movs	r3, #1
 8018d68:	60fb      	str	r3, [r7, #12]
 8018d6a:	e001      	b.n	8018d70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018d70:	f001 fbe8 	bl	801a544 <vPortExitCritical>

	return xReturn;
 8018d74:	68fb      	ldr	r3, [r7, #12]
}
 8018d76:	0018      	movs	r0, r3
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	b004      	add	sp, #16
 8018d7c:	bd80      	pop	{r7, pc}
	...

08018d80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b084      	sub	sp, #16
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	60fb      	str	r3, [r7, #12]
 8018d8e:	e015      	b.n	8018dbc <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018d90:	4b0e      	ldr	r3, [pc, #56]	; (8018dcc <vQueueAddToRegistry+0x4c>)
 8018d92:	68fa      	ldr	r2, [r7, #12]
 8018d94:	00d2      	lsls	r2, r2, #3
 8018d96:	58d3      	ldr	r3, [r2, r3]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d10c      	bne.n	8018db6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018d9c:	4b0b      	ldr	r3, [pc, #44]	; (8018dcc <vQueueAddToRegistry+0x4c>)
 8018d9e:	68fa      	ldr	r2, [r7, #12]
 8018da0:	00d2      	lsls	r2, r2, #3
 8018da2:	6839      	ldr	r1, [r7, #0]
 8018da4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018da6:	4a09      	ldr	r2, [pc, #36]	; (8018dcc <vQueueAddToRegistry+0x4c>)
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	00db      	lsls	r3, r3, #3
 8018dac:	18d3      	adds	r3, r2, r3
 8018dae:	3304      	adds	r3, #4
 8018db0:	687a      	ldr	r2, [r7, #4]
 8018db2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018db4:	e006      	b.n	8018dc4 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	3301      	adds	r3, #1
 8018dba:	60fb      	str	r3, [r7, #12]
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	2b07      	cmp	r3, #7
 8018dc0:	d9e6      	bls.n	8018d90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018dc2:	46c0      	nop			; (mov r8, r8)
 8018dc4:	46c0      	nop			; (mov r8, r8)
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	b004      	add	sp, #16
 8018dca:	bd80      	pop	{r7, pc}
 8018dcc:	20000d3c 	.word	0x20000d3c

08018dd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b086      	sub	sp, #24
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	60f8      	str	r0, [r7, #12]
 8018dd8:	60b9      	str	r1, [r7, #8]
 8018dda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018de0:	f001 fb9e 	bl	801a520 <vPortEnterCritical>
 8018de4:	697b      	ldr	r3, [r7, #20]
 8018de6:	2244      	movs	r2, #68	; 0x44
 8018de8:	5c9b      	ldrb	r3, [r3, r2]
 8018dea:	b25b      	sxtb	r3, r3
 8018dec:	3301      	adds	r3, #1
 8018dee:	d103      	bne.n	8018df8 <vQueueWaitForMessageRestricted+0x28>
 8018df0:	697b      	ldr	r3, [r7, #20]
 8018df2:	2244      	movs	r2, #68	; 0x44
 8018df4:	2100      	movs	r1, #0
 8018df6:	5499      	strb	r1, [r3, r2]
 8018df8:	697b      	ldr	r3, [r7, #20]
 8018dfa:	2245      	movs	r2, #69	; 0x45
 8018dfc:	5c9b      	ldrb	r3, [r3, r2]
 8018dfe:	b25b      	sxtb	r3, r3
 8018e00:	3301      	adds	r3, #1
 8018e02:	d103      	bne.n	8018e0c <vQueueWaitForMessageRestricted+0x3c>
 8018e04:	697b      	ldr	r3, [r7, #20]
 8018e06:	2245      	movs	r2, #69	; 0x45
 8018e08:	2100      	movs	r1, #0
 8018e0a:	5499      	strb	r1, [r3, r2]
 8018e0c:	f001 fb9a 	bl	801a544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018e10:	697b      	ldr	r3, [r7, #20]
 8018e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d106      	bne.n	8018e26 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018e18:	697b      	ldr	r3, [r7, #20]
 8018e1a:	3324      	adds	r3, #36	; 0x24
 8018e1c:	687a      	ldr	r2, [r7, #4]
 8018e1e:	68b9      	ldr	r1, [r7, #8]
 8018e20:	0018      	movs	r0, r3
 8018e22:	f000 fd3b 	bl	801989c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018e26:	697b      	ldr	r3, [r7, #20]
 8018e28:	0018      	movs	r0, r3
 8018e2a:	f7ff ff1c 	bl	8018c66 <prvUnlockQueue>
	}
 8018e2e:	46c0      	nop			; (mov r8, r8)
 8018e30:	46bd      	mov	sp, r7
 8018e32:	b006      	add	sp, #24
 8018e34:	bd80      	pop	{r7, pc}

08018e36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018e36:	b590      	push	{r4, r7, lr}
 8018e38:	b08d      	sub	sp, #52	; 0x34
 8018e3a:	af04      	add	r7, sp, #16
 8018e3c:	60f8      	str	r0, [r7, #12]
 8018e3e:	60b9      	str	r1, [r7, #8]
 8018e40:	607a      	str	r2, [r7, #4]
 8018e42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d101      	bne.n	8018e4e <xTaskCreateStatic+0x18>
 8018e4a:	b672      	cpsid	i
 8018e4c:	e7fe      	b.n	8018e4c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8018e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d101      	bne.n	8018e58 <xTaskCreateStatic+0x22>
 8018e54:	b672      	cpsid	i
 8018e56:	e7fe      	b.n	8018e56 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018e58:	23a8      	movs	r3, #168	; 0xa8
 8018e5a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	2ba8      	cmp	r3, #168	; 0xa8
 8018e60:	d001      	beq.n	8018e66 <xTaskCreateStatic+0x30>
 8018e62:	b672      	cpsid	i
 8018e64:	e7fe      	b.n	8018e64 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018e66:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d020      	beq.n	8018eb0 <xTaskCreateStatic+0x7a>
 8018e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d01d      	beq.n	8018eb0 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e76:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018e78:	69fb      	ldr	r3, [r7, #28]
 8018e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018e7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018e7e:	69fb      	ldr	r3, [r7, #28]
 8018e80:	22a5      	movs	r2, #165	; 0xa5
 8018e82:	2102      	movs	r1, #2
 8018e84:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018e86:	683c      	ldr	r4, [r7, #0]
 8018e88:	687a      	ldr	r2, [r7, #4]
 8018e8a:	68b9      	ldr	r1, [r7, #8]
 8018e8c:	68f8      	ldr	r0, [r7, #12]
 8018e8e:	2300      	movs	r3, #0
 8018e90:	9303      	str	r3, [sp, #12]
 8018e92:	69fb      	ldr	r3, [r7, #28]
 8018e94:	9302      	str	r3, [sp, #8]
 8018e96:	2318      	movs	r3, #24
 8018e98:	18fb      	adds	r3, r7, r3
 8018e9a:	9301      	str	r3, [sp, #4]
 8018e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e9e:	9300      	str	r3, [sp, #0]
 8018ea0:	0023      	movs	r3, r4
 8018ea2:	f000 f859 	bl	8018f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018ea6:	69fb      	ldr	r3, [r7, #28]
 8018ea8:	0018      	movs	r0, r3
 8018eaa:	f000 f8f5 	bl	8019098 <prvAddNewTaskToReadyList>
 8018eae:	e001      	b.n	8018eb4 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018eb4:	69bb      	ldr	r3, [r7, #24]
	}
 8018eb6:	0018      	movs	r0, r3
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	b009      	add	sp, #36	; 0x24
 8018ebc:	bd90      	pop	{r4, r7, pc}

08018ebe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018ebe:	b590      	push	{r4, r7, lr}
 8018ec0:	b08d      	sub	sp, #52	; 0x34
 8018ec2:	af04      	add	r7, sp, #16
 8018ec4:	60f8      	str	r0, [r7, #12]
 8018ec6:	60b9      	str	r1, [r7, #8]
 8018ec8:	603b      	str	r3, [r7, #0]
 8018eca:	1dbb      	adds	r3, r7, #6
 8018ecc:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018ece:	1dbb      	adds	r3, r7, #6
 8018ed0:	881b      	ldrh	r3, [r3, #0]
 8018ed2:	009b      	lsls	r3, r3, #2
 8018ed4:	0018      	movs	r0, r3
 8018ed6:	f001 fbbb 	bl	801a650 <pvPortMalloc>
 8018eda:	0003      	movs	r3, r0
 8018edc:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d010      	beq.n	8018f06 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018ee4:	20a8      	movs	r0, #168	; 0xa8
 8018ee6:	f001 fbb3 	bl	801a650 <pvPortMalloc>
 8018eea:	0003      	movs	r3, r0
 8018eec:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8018eee:	69fb      	ldr	r3, [r7, #28]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d003      	beq.n	8018efc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018ef4:	69fb      	ldr	r3, [r7, #28]
 8018ef6:	697a      	ldr	r2, [r7, #20]
 8018ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8018efa:	e006      	b.n	8018f0a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018efc:	697b      	ldr	r3, [r7, #20]
 8018efe:	0018      	movs	r0, r3
 8018f00:	f001 fc52 	bl	801a7a8 <vPortFree>
 8018f04:	e001      	b.n	8018f0a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018f06:	2300      	movs	r3, #0
 8018f08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018f0a:	69fb      	ldr	r3, [r7, #28]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d01a      	beq.n	8018f46 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018f10:	69fb      	ldr	r3, [r7, #28]
 8018f12:	22a5      	movs	r2, #165	; 0xa5
 8018f14:	2100      	movs	r1, #0
 8018f16:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018f18:	1dbb      	adds	r3, r7, #6
 8018f1a:	881a      	ldrh	r2, [r3, #0]
 8018f1c:	683c      	ldr	r4, [r7, #0]
 8018f1e:	68b9      	ldr	r1, [r7, #8]
 8018f20:	68f8      	ldr	r0, [r7, #12]
 8018f22:	2300      	movs	r3, #0
 8018f24:	9303      	str	r3, [sp, #12]
 8018f26:	69fb      	ldr	r3, [r7, #28]
 8018f28:	9302      	str	r3, [sp, #8]
 8018f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f2c:	9301      	str	r3, [sp, #4]
 8018f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f30:	9300      	str	r3, [sp, #0]
 8018f32:	0023      	movs	r3, r4
 8018f34:	f000 f810 	bl	8018f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018f38:	69fb      	ldr	r3, [r7, #28]
 8018f3a:	0018      	movs	r0, r3
 8018f3c:	f000 f8ac 	bl	8019098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018f40:	2301      	movs	r3, #1
 8018f42:	61bb      	str	r3, [r7, #24]
 8018f44:	e002      	b.n	8018f4c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018f46:	2301      	movs	r3, #1
 8018f48:	425b      	negs	r3, r3
 8018f4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018f4c:	69bb      	ldr	r3, [r7, #24]
	}
 8018f4e:	0018      	movs	r0, r3
 8018f50:	46bd      	mov	sp, r7
 8018f52:	b009      	add	sp, #36	; 0x24
 8018f54:	bd90      	pop	{r4, r7, pc}
	...

08018f58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b086      	sub	sp, #24
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	60f8      	str	r0, [r7, #12]
 8018f60:	60b9      	str	r1, [r7, #8]
 8018f62:	607a      	str	r2, [r7, #4]
 8018f64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	009b      	lsls	r3, r3, #2
 8018f6e:	001a      	movs	r2, r3
 8018f70:	21a5      	movs	r1, #165	; 0xa5
 8018f72:	f00a fbab 	bl	80236cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	4942      	ldr	r1, [pc, #264]	; (8019088 <prvInitialiseNewTask+0x130>)
 8018f7e:	468c      	mov	ip, r1
 8018f80:	4463      	add	r3, ip
 8018f82:	009b      	lsls	r3, r3, #2
 8018f84:	18d3      	adds	r3, r2, r3
 8018f86:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018f88:	693b      	ldr	r3, [r7, #16]
 8018f8a:	2207      	movs	r2, #7
 8018f8c:	4393      	bics	r3, r2
 8018f8e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018f90:	693b      	ldr	r3, [r7, #16]
 8018f92:	2207      	movs	r2, #7
 8018f94:	4013      	ands	r3, r2
 8018f96:	d001      	beq.n	8018f9c <prvInitialiseNewTask+0x44>
 8018f98:	b672      	cpsid	i
 8018f9a:	e7fe      	b.n	8018f9a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018f9c:	68bb      	ldr	r3, [r7, #8]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d020      	beq.n	8018fe4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	617b      	str	r3, [r7, #20]
 8018fa6:	e013      	b.n	8018fd0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018fa8:	68ba      	ldr	r2, [r7, #8]
 8018faa:	697b      	ldr	r3, [r7, #20]
 8018fac:	18d3      	adds	r3, r2, r3
 8018fae:	7818      	ldrb	r0, [r3, #0]
 8018fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018fb2:	2134      	movs	r1, #52	; 0x34
 8018fb4:	697b      	ldr	r3, [r7, #20]
 8018fb6:	18d3      	adds	r3, r2, r3
 8018fb8:	185b      	adds	r3, r3, r1
 8018fba:	1c02      	adds	r2, r0, #0
 8018fbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018fbe:	68ba      	ldr	r2, [r7, #8]
 8018fc0:	697b      	ldr	r3, [r7, #20]
 8018fc2:	18d3      	adds	r3, r2, r3
 8018fc4:	781b      	ldrb	r3, [r3, #0]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d006      	beq.n	8018fd8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018fca:	697b      	ldr	r3, [r7, #20]
 8018fcc:	3301      	adds	r3, #1
 8018fce:	617b      	str	r3, [r7, #20]
 8018fd0:	697b      	ldr	r3, [r7, #20]
 8018fd2:	2b0f      	cmp	r3, #15
 8018fd4:	d9e8      	bls.n	8018fa8 <prvInitialiseNewTask+0x50>
 8018fd6:	e000      	b.n	8018fda <prvInitialiseNewTask+0x82>
			{
				break;
 8018fd8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fdc:	2243      	movs	r2, #67	; 0x43
 8018fde:	2100      	movs	r1, #0
 8018fe0:	5499      	strb	r1, [r3, r2]
 8018fe2:	e003      	b.n	8018fec <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe6:	2234      	movs	r2, #52	; 0x34
 8018fe8:	2100      	movs	r1, #0
 8018fea:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018fec:	6a3b      	ldr	r3, [r7, #32]
 8018fee:	2b37      	cmp	r3, #55	; 0x37
 8018ff0:	d901      	bls.n	8018ff6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018ff2:	2337      	movs	r3, #55	; 0x37
 8018ff4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ff8:	6a3a      	ldr	r2, [r7, #32]
 8018ffa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ffe:	6a3a      	ldr	r2, [r7, #32]
 8019000:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019004:	2200      	movs	r2, #0
 8019006:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801900a:	3304      	adds	r3, #4
 801900c:	0018      	movs	r0, r3
 801900e:	f7ff f9c5 	bl	801839c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019014:	3318      	adds	r3, #24
 8019016:	0018      	movs	r0, r3
 8019018:	f7ff f9c0 	bl	801839c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801901e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019020:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019022:	6a3b      	ldr	r3, [r7, #32]
 8019024:	2238      	movs	r2, #56	; 0x38
 8019026:	1ad2      	subs	r2, r2, r3
 8019028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801902a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801902e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019030:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019034:	22a0      	movs	r2, #160	; 0xa0
 8019036:	2100      	movs	r1, #0
 8019038:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801903c:	22a4      	movs	r2, #164	; 0xa4
 801903e:	2100      	movs	r1, #0
 8019040:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8019042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019044:	3354      	adds	r3, #84	; 0x54
 8019046:	224c      	movs	r2, #76	; 0x4c
 8019048:	2100      	movs	r1, #0
 801904a:	0018      	movs	r0, r3
 801904c:	f00a fb3e 	bl	80236cc <memset>
 8019050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019052:	4a0e      	ldr	r2, [pc, #56]	; (801908c <prvInitialiseNewTask+0x134>)
 8019054:	659a      	str	r2, [r3, #88]	; 0x58
 8019056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019058:	4a0d      	ldr	r2, [pc, #52]	; (8019090 <prvInitialiseNewTask+0x138>)
 801905a:	65da      	str	r2, [r3, #92]	; 0x5c
 801905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801905e:	4a0d      	ldr	r2, [pc, #52]	; (8019094 <prvInitialiseNewTask+0x13c>)
 8019060:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019062:	683a      	ldr	r2, [r7, #0]
 8019064:	68f9      	ldr	r1, [r7, #12]
 8019066:	693b      	ldr	r3, [r7, #16]
 8019068:	0018      	movs	r0, r3
 801906a:	f001 f9c1 	bl	801a3f0 <pxPortInitialiseStack>
 801906e:	0002      	movs	r2, r0
 8019070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019072:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019076:	2b00      	cmp	r3, #0
 8019078:	d002      	beq.n	8019080 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801907c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801907e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019080:	46c0      	nop			; (mov r8, r8)
 8019082:	46bd      	mov	sp, r7
 8019084:	b006      	add	sp, #24
 8019086:	bd80      	pop	{r7, pc}
 8019088:	3fffffff 	.word	0x3fffffff
 801908c:	20005040 	.word	0x20005040
 8019090:	200050a8 	.word	0x200050a8
 8019094:	20005110 	.word	0x20005110

08019098 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b082      	sub	sp, #8
 801909c:	af00      	add	r7, sp, #0
 801909e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80190a0:	f001 fa3e 	bl	801a520 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80190a4:	4b2a      	ldr	r3, [pc, #168]	; (8019150 <prvAddNewTaskToReadyList+0xb8>)
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	1c5a      	adds	r2, r3, #1
 80190aa:	4b29      	ldr	r3, [pc, #164]	; (8019150 <prvAddNewTaskToReadyList+0xb8>)
 80190ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80190ae:	4b29      	ldr	r3, [pc, #164]	; (8019154 <prvAddNewTaskToReadyList+0xbc>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d109      	bne.n	80190ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80190b6:	4b27      	ldr	r3, [pc, #156]	; (8019154 <prvAddNewTaskToReadyList+0xbc>)
 80190b8:	687a      	ldr	r2, [r7, #4]
 80190ba:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80190bc:	4b24      	ldr	r3, [pc, #144]	; (8019150 <prvAddNewTaskToReadyList+0xb8>)
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	2b01      	cmp	r3, #1
 80190c2:	d110      	bne.n	80190e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80190c4:	f000 fcea 	bl	8019a9c <prvInitialiseTaskLists>
 80190c8:	e00d      	b.n	80190e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80190ca:	4b23      	ldr	r3, [pc, #140]	; (8019158 <prvAddNewTaskToReadyList+0xc0>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d109      	bne.n	80190e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80190d2:	4b20      	ldr	r3, [pc, #128]	; (8019154 <prvAddNewTaskToReadyList+0xbc>)
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190dc:	429a      	cmp	r2, r3
 80190de:	d802      	bhi.n	80190e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80190e0:	4b1c      	ldr	r3, [pc, #112]	; (8019154 <prvAddNewTaskToReadyList+0xbc>)
 80190e2:	687a      	ldr	r2, [r7, #4]
 80190e4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80190e6:	4b1d      	ldr	r3, [pc, #116]	; (801915c <prvAddNewTaskToReadyList+0xc4>)
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	1c5a      	adds	r2, r3, #1
 80190ec:	4b1b      	ldr	r3, [pc, #108]	; (801915c <prvAddNewTaskToReadyList+0xc4>)
 80190ee:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80190f0:	4b1a      	ldr	r3, [pc, #104]	; (801915c <prvAddNewTaskToReadyList+0xc4>)
 80190f2:	681a      	ldr	r2, [r3, #0]
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190fc:	4b18      	ldr	r3, [pc, #96]	; (8019160 <prvAddNewTaskToReadyList+0xc8>)
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	429a      	cmp	r2, r3
 8019102:	d903      	bls.n	801910c <prvAddNewTaskToReadyList+0x74>
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019108:	4b15      	ldr	r3, [pc, #84]	; (8019160 <prvAddNewTaskToReadyList+0xc8>)
 801910a:	601a      	str	r2, [r3, #0]
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019110:	0013      	movs	r3, r2
 8019112:	009b      	lsls	r3, r3, #2
 8019114:	189b      	adds	r3, r3, r2
 8019116:	009b      	lsls	r3, r3, #2
 8019118:	4a12      	ldr	r2, [pc, #72]	; (8019164 <prvAddNewTaskToReadyList+0xcc>)
 801911a:	189a      	adds	r2, r3, r2
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	3304      	adds	r3, #4
 8019120:	0019      	movs	r1, r3
 8019122:	0010      	movs	r0, r2
 8019124:	f7ff f945 	bl	80183b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019128:	f001 fa0c 	bl	801a544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801912c:	4b0a      	ldr	r3, [pc, #40]	; (8019158 <prvAddNewTaskToReadyList+0xc0>)
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d008      	beq.n	8019146 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019134:	4b07      	ldr	r3, [pc, #28]	; (8019154 <prvAddNewTaskToReadyList+0xbc>)
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801913e:	429a      	cmp	r2, r3
 8019140:	d201      	bcs.n	8019146 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019142:	f001 f9dd 	bl	801a500 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019146:	46c0      	nop			; (mov r8, r8)
 8019148:	46bd      	mov	sp, r7
 801914a:	b002      	add	sp, #8
 801914c:	bd80      	pop	{r7, pc}
 801914e:	46c0      	nop			; (mov r8, r8)
 8019150:	20001250 	.word	0x20001250
 8019154:	20000d7c 	.word	0x20000d7c
 8019158:	2000125c 	.word	0x2000125c
 801915c:	2000126c 	.word	0x2000126c
 8019160:	20001258 	.word	0x20001258
 8019164:	20000d80 	.word	0x20000d80

08019168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019168:	b580      	push	{r7, lr}
 801916a:	b084      	sub	sp, #16
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019170:	2300      	movs	r3, #0
 8019172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d010      	beq.n	801919c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801917a:	4b0d      	ldr	r3, [pc, #52]	; (80191b0 <vTaskDelay+0x48>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d001      	beq.n	8019186 <vTaskDelay+0x1e>
 8019182:	b672      	cpsid	i
 8019184:	e7fe      	b.n	8019184 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8019186:	f000 f9bb 	bl	8019500 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	2100      	movs	r1, #0
 801918e:	0018      	movs	r0, r3
 8019190:	f000 fdc8 	bl	8019d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019194:	f000 f9c0 	bl	8019518 <xTaskResumeAll>
 8019198:	0003      	movs	r3, r0
 801919a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d101      	bne.n	80191a6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80191a2:	f001 f9ad 	bl	801a500 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80191a6:	46c0      	nop			; (mov r8, r8)
 80191a8:	46bd      	mov	sp, r7
 80191aa:	b004      	add	sp, #16
 80191ac:	bd80      	pop	{r7, pc}
 80191ae:	46c0      	nop			; (mov r8, r8)
 80191b0:	20001278 	.word	0x20001278

080191b4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b088      	sub	sp, #32
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80191c0:	69bb      	ldr	r3, [r7, #24]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d101      	bne.n	80191ca <eTaskGetState+0x16>
 80191c6:	b672      	cpsid	i
 80191c8:	e7fe      	b.n	80191c8 <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 80191ca:	4b2c      	ldr	r3, [pc, #176]	; (801927c <eTaskGetState+0xc8>)
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	69ba      	ldr	r2, [r7, #24]
 80191d0:	429a      	cmp	r2, r3
 80191d2:	d104      	bne.n	80191de <eTaskGetState+0x2a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80191d4:	231f      	movs	r3, #31
 80191d6:	18fb      	adds	r3, r7, r3
 80191d8:	2200      	movs	r2, #0
 80191da:	701a      	strb	r2, [r3, #0]
 80191dc:	e046      	b.n	801926c <eTaskGetState+0xb8>
		}
		else
		{
			taskENTER_CRITICAL();
 80191de:	f001 f99f 	bl	801a520 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80191e2:	69bb      	ldr	r3, [r7, #24]
 80191e4:	695b      	ldr	r3, [r3, #20]
 80191e6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80191e8:	4b25      	ldr	r3, [pc, #148]	; (8019280 <eTaskGetState+0xcc>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80191ee:	4b25      	ldr	r3, [pc, #148]	; (8019284 <eTaskGetState+0xd0>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80191f4:	f001 f9a6 	bl	801a544 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80191f8:	697a      	ldr	r2, [r7, #20]
 80191fa:	693b      	ldr	r3, [r7, #16]
 80191fc:	429a      	cmp	r2, r3
 80191fe:	d003      	beq.n	8019208 <eTaskGetState+0x54>
 8019200:	697a      	ldr	r2, [r7, #20]
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	429a      	cmp	r2, r3
 8019206:	d104      	bne.n	8019212 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8019208:	231f      	movs	r3, #31
 801920a:	18fb      	adds	r3, r7, r3
 801920c:	2202      	movs	r2, #2
 801920e:	701a      	strb	r2, [r3, #0]
 8019210:	e02c      	b.n	801926c <eTaskGetState+0xb8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8019212:	697a      	ldr	r2, [r7, #20]
 8019214:	4b1c      	ldr	r3, [pc, #112]	; (8019288 <eTaskGetState+0xd4>)
 8019216:	429a      	cmp	r2, r3
 8019218:	d118      	bne.n	801924c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801921a:	69bb      	ldr	r3, [r7, #24]
 801921c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801921e:	2b00      	cmp	r3, #0
 8019220:	d10f      	bne.n	8019242 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8019222:	69bb      	ldr	r3, [r7, #24]
 8019224:	22a4      	movs	r2, #164	; 0xa4
 8019226:	5c9b      	ldrb	r3, [r3, r2]
 8019228:	b2db      	uxtb	r3, r3
 801922a:	2b01      	cmp	r3, #1
 801922c:	d104      	bne.n	8019238 <eTaskGetState+0x84>
							{
								eReturn = eBlocked;
 801922e:	231f      	movs	r3, #31
 8019230:	18fb      	adds	r3, r7, r3
 8019232:	2202      	movs	r2, #2
 8019234:	701a      	strb	r2, [r3, #0]
 8019236:	e019      	b.n	801926c <eTaskGetState+0xb8>
							}
							else
							{
								eReturn = eSuspended;
 8019238:	231f      	movs	r3, #31
 801923a:	18fb      	adds	r3, r7, r3
 801923c:	2203      	movs	r2, #3
 801923e:	701a      	strb	r2, [r3, #0]
 8019240:	e014      	b.n	801926c <eTaskGetState+0xb8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8019242:	231f      	movs	r3, #31
 8019244:	18fb      	adds	r3, r7, r3
 8019246:	2202      	movs	r2, #2
 8019248:	701a      	strb	r2, [r3, #0]
 801924a:	e00f      	b.n	801926c <eTaskGetState+0xb8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801924c:	697a      	ldr	r2, [r7, #20]
 801924e:	4b0f      	ldr	r3, [pc, #60]	; (801928c <eTaskGetState+0xd8>)
 8019250:	429a      	cmp	r2, r3
 8019252:	d002      	beq.n	801925a <eTaskGetState+0xa6>
 8019254:	697b      	ldr	r3, [r7, #20]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d104      	bne.n	8019264 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801925a:	231f      	movs	r3, #31
 801925c:	18fb      	adds	r3, r7, r3
 801925e:	2204      	movs	r2, #4
 8019260:	701a      	strb	r2, [r3, #0]
 8019262:	e003      	b.n	801926c <eTaskGetState+0xb8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8019264:	231f      	movs	r3, #31
 8019266:	18fb      	adds	r3, r7, r3
 8019268:	2201      	movs	r2, #1
 801926a:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 801926c:	231f      	movs	r3, #31
 801926e:	18fb      	adds	r3, r7, r3
 8019270:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8019272:	0018      	movs	r0, r3
 8019274:	46bd      	mov	sp, r7
 8019276:	b008      	add	sp, #32
 8019278:	bd80      	pop	{r7, pc}
 801927a:	46c0      	nop			; (mov r8, r8)
 801927c:	20000d7c 	.word	0x20000d7c
 8019280:	20001208 	.word	0x20001208
 8019284:	2000120c 	.word	0x2000120c
 8019288:	2000123c 	.word	0x2000123c
 801928c:	20001224 	.word	0x20001224

08019290 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8019290:	b580      	push	{r7, lr}
 8019292:	b084      	sub	sp, #16
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8019298:	f001 f942 	bl	801a520 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d102      	bne.n	80192a8 <vTaskSuspend+0x18>
 80192a2:	4b29      	ldr	r3, [pc, #164]	; (8019348 <vTaskSuspend+0xb8>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	e000      	b.n	80192aa <vTaskSuspend+0x1a>
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	3304      	adds	r3, #4
 80192b0:	0018      	movs	r0, r3
 80192b2:	f7ff f8d6 	bl	8018462 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d004      	beq.n	80192c8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	3318      	adds	r3, #24
 80192c2:	0018      	movs	r0, r3
 80192c4:	f7ff f8cd 	bl	8018462 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	1d1a      	adds	r2, r3, #4
 80192cc:	4b1f      	ldr	r3, [pc, #124]	; (801934c <vTaskSuspend+0xbc>)
 80192ce:	0011      	movs	r1, r2
 80192d0:	0018      	movs	r0, r3
 80192d2:	f7ff f86e 	bl	80183b2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	22a4      	movs	r2, #164	; 0xa4
 80192da:	5c9b      	ldrb	r3, [r3, r2]
 80192dc:	b2db      	uxtb	r3, r3
 80192de:	2b01      	cmp	r3, #1
 80192e0:	d103      	bne.n	80192ea <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	22a4      	movs	r2, #164	; 0xa4
 80192e6:	2100      	movs	r1, #0
 80192e8:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80192ea:	f001 f92b 	bl	801a544 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80192ee:	4b18      	ldr	r3, [pc, #96]	; (8019350 <vTaskSuspend+0xc0>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d005      	beq.n	8019302 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80192f6:	f001 f913 	bl	801a520 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80192fa:	f000 fc6f 	bl	8019bdc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80192fe:	f001 f921 	bl	801a544 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8019302:	4b11      	ldr	r3, [pc, #68]	; (8019348 <vTaskSuspend+0xb8>)
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	68fa      	ldr	r2, [r7, #12]
 8019308:	429a      	cmp	r2, r3
 801930a:	d118      	bne.n	801933e <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 801930c:	4b10      	ldr	r3, [pc, #64]	; (8019350 <vTaskSuspend+0xc0>)
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d008      	beq.n	8019326 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8019314:	4b0f      	ldr	r3, [pc, #60]	; (8019354 <vTaskSuspend+0xc4>)
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d001      	beq.n	8019320 <vTaskSuspend+0x90>
 801931c:	b672      	cpsid	i
 801931e:	e7fe      	b.n	801931e <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8019320:	f001 f8ee 	bl	801a500 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019324:	e00b      	b.n	801933e <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8019326:	4b09      	ldr	r3, [pc, #36]	; (801934c <vTaskSuspend+0xbc>)
 8019328:	681a      	ldr	r2, [r3, #0]
 801932a:	4b0b      	ldr	r3, [pc, #44]	; (8019358 <vTaskSuspend+0xc8>)
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	429a      	cmp	r2, r3
 8019330:	d103      	bne.n	801933a <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8019332:	4b05      	ldr	r3, [pc, #20]	; (8019348 <vTaskSuspend+0xb8>)
 8019334:	2200      	movs	r2, #0
 8019336:	601a      	str	r2, [r3, #0]
	}
 8019338:	e001      	b.n	801933e <vTaskSuspend+0xae>
					vTaskSwitchContext();
 801933a:	f000 fa37 	bl	80197ac <vTaskSwitchContext>
	}
 801933e:	46c0      	nop			; (mov r8, r8)
 8019340:	46bd      	mov	sp, r7
 8019342:	b004      	add	sp, #16
 8019344:	bd80      	pop	{r7, pc}
 8019346:	46c0      	nop			; (mov r8, r8)
 8019348:	20000d7c 	.word	0x20000d7c
 801934c:	2000123c 	.word	0x2000123c
 8019350:	2000125c 	.word	0x2000125c
 8019354:	20001278 	.word	0x20001278
 8019358:	20001250 	.word	0x20001250

0801935c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801935c:	b580      	push	{r7, lr}
 801935e:	b084      	sub	sp, #16
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8019364:	2300      	movs	r3, #0
 8019366:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d101      	bne.n	8019376 <prvTaskIsTaskSuspended+0x1a>
 8019372:	b672      	cpsid	i
 8019374:	e7fe      	b.n	8019374 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019376:	68bb      	ldr	r3, [r7, #8]
 8019378:	695a      	ldr	r2, [r3, #20]
 801937a:	4b09      	ldr	r3, [pc, #36]	; (80193a0 <prvTaskIsTaskSuspended+0x44>)
 801937c:	429a      	cmp	r2, r3
 801937e:	d10a      	bne.n	8019396 <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8019380:	68bb      	ldr	r3, [r7, #8]
 8019382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019384:	4b07      	ldr	r3, [pc, #28]	; (80193a4 <prvTaskIsTaskSuspended+0x48>)
 8019386:	429a      	cmp	r2, r3
 8019388:	d005      	beq.n	8019396 <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801938a:	68bb      	ldr	r3, [r7, #8]
 801938c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801938e:	2b00      	cmp	r3, #0
 8019390:	d101      	bne.n	8019396 <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 8019392:	2301      	movs	r3, #1
 8019394:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019396:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8019398:	0018      	movs	r0, r3
 801939a:	46bd      	mov	sp, r7
 801939c:	b004      	add	sp, #16
 801939e:	bd80      	pop	{r7, pc}
 80193a0:	2000123c 	.word	0x2000123c
 80193a4:	20001210 	.word	0x20001210

080193a8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b084      	sub	sp, #16
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d101      	bne.n	80193be <vTaskResume+0x16>
 80193ba:	b672      	cpsid	i
 80193bc:	e7fe      	b.n	80193bc <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80193be:	4b1e      	ldr	r3, [pc, #120]	; (8019438 <vTaskResume+0x90>)
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	68fa      	ldr	r2, [r7, #12]
 80193c4:	429a      	cmp	r2, r3
 80193c6:	d032      	beq.n	801942e <vTaskResume+0x86>
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d02f      	beq.n	801942e <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 80193ce:	f001 f8a7 	bl	801a520 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	0018      	movs	r0, r3
 80193d6:	f7ff ffc1 	bl	801935c <prvTaskIsTaskSuspended>
 80193da:	1e03      	subs	r3, r0, #0
 80193dc:	d025      	beq.n	801942a <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	3304      	adds	r3, #4
 80193e2:	0018      	movs	r0, r3
 80193e4:	f7ff f83d 	bl	8018462 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193ec:	4b13      	ldr	r3, [pc, #76]	; (801943c <vTaskResume+0x94>)
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	429a      	cmp	r2, r3
 80193f2:	d903      	bls.n	80193fc <vTaskResume+0x54>
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193f8:	4b10      	ldr	r3, [pc, #64]	; (801943c <vTaskResume+0x94>)
 80193fa:	601a      	str	r2, [r3, #0]
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019400:	0013      	movs	r3, r2
 8019402:	009b      	lsls	r3, r3, #2
 8019404:	189b      	adds	r3, r3, r2
 8019406:	009b      	lsls	r3, r3, #2
 8019408:	4a0d      	ldr	r2, [pc, #52]	; (8019440 <vTaskResume+0x98>)
 801940a:	189a      	adds	r2, r3, r2
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	3304      	adds	r3, #4
 8019410:	0019      	movs	r1, r3
 8019412:	0010      	movs	r0, r2
 8019414:	f7fe ffcd 	bl	80183b2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801941c:	4b06      	ldr	r3, [pc, #24]	; (8019438 <vTaskResume+0x90>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019422:	429a      	cmp	r2, r3
 8019424:	d301      	bcc.n	801942a <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8019426:	f001 f86b 	bl	801a500 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801942a:	f001 f88b 	bl	801a544 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801942e:	46c0      	nop			; (mov r8, r8)
 8019430:	46bd      	mov	sp, r7
 8019432:	b004      	add	sp, #16
 8019434:	bd80      	pop	{r7, pc}
 8019436:	46c0      	nop			; (mov r8, r8)
 8019438:	20000d7c 	.word	0x20000d7c
 801943c:	20001258 	.word	0x20001258
 8019440:	20000d80 	.word	0x20000d80

08019444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019444:	b590      	push	{r4, r7, lr}
 8019446:	b089      	sub	sp, #36	; 0x24
 8019448:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801944a:	2300      	movs	r3, #0
 801944c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801944e:	2300      	movs	r3, #0
 8019450:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019452:	003a      	movs	r2, r7
 8019454:	1d39      	adds	r1, r7, #4
 8019456:	2308      	movs	r3, #8
 8019458:	18fb      	adds	r3, r7, r3
 801945a:	0018      	movs	r0, r3
 801945c:	f7fe ff50 	bl	8018300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019460:	683c      	ldr	r4, [r7, #0]
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	68ba      	ldr	r2, [r7, #8]
 8019466:	491e      	ldr	r1, [pc, #120]	; (80194e0 <vTaskStartScheduler+0x9c>)
 8019468:	481e      	ldr	r0, [pc, #120]	; (80194e4 <vTaskStartScheduler+0xa0>)
 801946a:	9202      	str	r2, [sp, #8]
 801946c:	9301      	str	r3, [sp, #4]
 801946e:	2300      	movs	r3, #0
 8019470:	9300      	str	r3, [sp, #0]
 8019472:	2300      	movs	r3, #0
 8019474:	0022      	movs	r2, r4
 8019476:	f7ff fcde 	bl	8018e36 <xTaskCreateStatic>
 801947a:	0002      	movs	r2, r0
 801947c:	4b1a      	ldr	r3, [pc, #104]	; (80194e8 <vTaskStartScheduler+0xa4>)
 801947e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019480:	4b19      	ldr	r3, [pc, #100]	; (80194e8 <vTaskStartScheduler+0xa4>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d002      	beq.n	801948e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019488:	2301      	movs	r3, #1
 801948a:	60fb      	str	r3, [r7, #12]
 801948c:	e001      	b.n	8019492 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801948e:	2300      	movs	r3, #0
 8019490:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	2b01      	cmp	r3, #1
 8019496:	d103      	bne.n	80194a0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8019498:	f000 fc98 	bl	8019dcc <xTimerCreateTimerTask>
 801949c:	0003      	movs	r3, r0
 801949e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	2b01      	cmp	r3, #1
 80194a4:	d113      	bne.n	80194ce <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80194a6:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80194a8:	4b10      	ldr	r3, [pc, #64]	; (80194ec <vTaskStartScheduler+0xa8>)
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	3354      	adds	r3, #84	; 0x54
 80194ae:	001a      	movs	r2, r3
 80194b0:	4b0f      	ldr	r3, [pc, #60]	; (80194f0 <vTaskStartScheduler+0xac>)
 80194b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80194b4:	4b0f      	ldr	r3, [pc, #60]	; (80194f4 <vTaskStartScheduler+0xb0>)
 80194b6:	2201      	movs	r2, #1
 80194b8:	4252      	negs	r2, r2
 80194ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80194bc:	4b0e      	ldr	r3, [pc, #56]	; (80194f8 <vTaskStartScheduler+0xb4>)
 80194be:	2201      	movs	r2, #1
 80194c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80194c2:	4b0e      	ldr	r3, [pc, #56]	; (80194fc <vTaskStartScheduler+0xb8>)
 80194c4:	2200      	movs	r2, #0
 80194c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80194c8:	f000 fff6 	bl	801a4b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80194cc:	e004      	b.n	80194d8 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	3301      	adds	r3, #1
 80194d2:	d101      	bne.n	80194d8 <vTaskStartScheduler+0x94>
 80194d4:	b672      	cpsid	i
 80194d6:	e7fe      	b.n	80194d6 <vTaskStartScheduler+0x92>
}
 80194d8:	46c0      	nop			; (mov r8, r8)
 80194da:	46bd      	mov	sp, r7
 80194dc:	b005      	add	sp, #20
 80194de:	bd90      	pop	{r4, r7, pc}
 80194e0:	08024118 	.word	0x08024118
 80194e4:	08019a7d 	.word	0x08019a7d
 80194e8:	20001274 	.word	0x20001274
 80194ec:	20000d7c 	.word	0x20000d7c
 80194f0:	20000250 	.word	0x20000250
 80194f4:	20001270 	.word	0x20001270
 80194f8:	2000125c 	.word	0x2000125c
 80194fc:	20001254 	.word	0x20001254

08019500 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019500:	b580      	push	{r7, lr}
 8019502:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8019504:	4b03      	ldr	r3, [pc, #12]	; (8019514 <vTaskSuspendAll+0x14>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	1c5a      	adds	r2, r3, #1
 801950a:	4b02      	ldr	r3, [pc, #8]	; (8019514 <vTaskSuspendAll+0x14>)
 801950c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801950e:	46c0      	nop			; (mov r8, r8)
 8019510:	46bd      	mov	sp, r7
 8019512:	bd80      	pop	{r7, pc}
 8019514:	20001278 	.word	0x20001278

08019518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b084      	sub	sp, #16
 801951c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801951e:	2300      	movs	r3, #0
 8019520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019522:	2300      	movs	r3, #0
 8019524:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019526:	4b3a      	ldr	r3, [pc, #232]	; (8019610 <xTaskResumeAll+0xf8>)
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d101      	bne.n	8019532 <xTaskResumeAll+0x1a>
 801952e:	b672      	cpsid	i
 8019530:	e7fe      	b.n	8019530 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019532:	f000 fff5 	bl	801a520 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019536:	4b36      	ldr	r3, [pc, #216]	; (8019610 <xTaskResumeAll+0xf8>)
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	1e5a      	subs	r2, r3, #1
 801953c:	4b34      	ldr	r3, [pc, #208]	; (8019610 <xTaskResumeAll+0xf8>)
 801953e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019540:	4b33      	ldr	r3, [pc, #204]	; (8019610 <xTaskResumeAll+0xf8>)
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d15b      	bne.n	8019600 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019548:	4b32      	ldr	r3, [pc, #200]	; (8019614 <xTaskResumeAll+0xfc>)
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d057      	beq.n	8019600 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019550:	e02f      	b.n	80195b2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019552:	4b31      	ldr	r3, [pc, #196]	; (8019618 <xTaskResumeAll+0x100>)
 8019554:	68db      	ldr	r3, [r3, #12]
 8019556:	68db      	ldr	r3, [r3, #12]
 8019558:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	3318      	adds	r3, #24
 801955e:	0018      	movs	r0, r3
 8019560:	f7fe ff7f 	bl	8018462 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	3304      	adds	r3, #4
 8019568:	0018      	movs	r0, r3
 801956a:	f7fe ff7a 	bl	8018462 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019572:	4b2a      	ldr	r3, [pc, #168]	; (801961c <xTaskResumeAll+0x104>)
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	429a      	cmp	r2, r3
 8019578:	d903      	bls.n	8019582 <xTaskResumeAll+0x6a>
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801957e:	4b27      	ldr	r3, [pc, #156]	; (801961c <xTaskResumeAll+0x104>)
 8019580:	601a      	str	r2, [r3, #0]
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019586:	0013      	movs	r3, r2
 8019588:	009b      	lsls	r3, r3, #2
 801958a:	189b      	adds	r3, r3, r2
 801958c:	009b      	lsls	r3, r3, #2
 801958e:	4a24      	ldr	r2, [pc, #144]	; (8019620 <xTaskResumeAll+0x108>)
 8019590:	189a      	adds	r2, r3, r2
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	3304      	adds	r3, #4
 8019596:	0019      	movs	r1, r3
 8019598:	0010      	movs	r0, r2
 801959a:	f7fe ff0a 	bl	80183b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80195a2:	4b20      	ldr	r3, [pc, #128]	; (8019624 <xTaskResumeAll+0x10c>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195a8:	429a      	cmp	r2, r3
 80195aa:	d302      	bcc.n	80195b2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80195ac:	4b1e      	ldr	r3, [pc, #120]	; (8019628 <xTaskResumeAll+0x110>)
 80195ae:	2201      	movs	r2, #1
 80195b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80195b2:	4b19      	ldr	r3, [pc, #100]	; (8019618 <xTaskResumeAll+0x100>)
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d1cb      	bne.n	8019552 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d001      	beq.n	80195c4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80195c0:	f000 fb0c 	bl	8019bdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80195c4:	4b19      	ldr	r3, [pc, #100]	; (801962c <xTaskResumeAll+0x114>)
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d00f      	beq.n	80195f0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80195d0:	f000 f83c 	bl	801964c <xTaskIncrementTick>
 80195d4:	1e03      	subs	r3, r0, #0
 80195d6:	d002      	beq.n	80195de <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80195d8:	4b13      	ldr	r3, [pc, #76]	; (8019628 <xTaskResumeAll+0x110>)
 80195da:	2201      	movs	r2, #1
 80195dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	3b01      	subs	r3, #1
 80195e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d1f2      	bne.n	80195d0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80195ea:	4b10      	ldr	r3, [pc, #64]	; (801962c <xTaskResumeAll+0x114>)
 80195ec:	2200      	movs	r2, #0
 80195ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80195f0:	4b0d      	ldr	r3, [pc, #52]	; (8019628 <xTaskResumeAll+0x110>)
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d003      	beq.n	8019600 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80195f8:	2301      	movs	r3, #1
 80195fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80195fc:	f000 ff80 	bl	801a500 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019600:	f000 ffa0 	bl	801a544 <vPortExitCritical>

	return xAlreadyYielded;
 8019604:	68bb      	ldr	r3, [r7, #8]
}
 8019606:	0018      	movs	r0, r3
 8019608:	46bd      	mov	sp, r7
 801960a:	b004      	add	sp, #16
 801960c:	bd80      	pop	{r7, pc}
 801960e:	46c0      	nop			; (mov r8, r8)
 8019610:	20001278 	.word	0x20001278
 8019614:	20001250 	.word	0x20001250
 8019618:	20001210 	.word	0x20001210
 801961c:	20001258 	.word	0x20001258
 8019620:	20000d80 	.word	0x20000d80
 8019624:	20000d7c 	.word	0x20000d7c
 8019628:	20001264 	.word	0x20001264
 801962c:	20001260 	.word	0x20001260

08019630 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b082      	sub	sp, #8
 8019634:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019636:	4b04      	ldr	r3, [pc, #16]	; (8019648 <xTaskGetTickCount+0x18>)
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801963c:	687b      	ldr	r3, [r7, #4]
}
 801963e:	0018      	movs	r0, r3
 8019640:	46bd      	mov	sp, r7
 8019642:	b002      	add	sp, #8
 8019644:	bd80      	pop	{r7, pc}
 8019646:	46c0      	nop			; (mov r8, r8)
 8019648:	20001254 	.word	0x20001254

0801964c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b086      	sub	sp, #24
 8019650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019652:	2300      	movs	r3, #0
 8019654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019656:	4b4a      	ldr	r3, [pc, #296]	; (8019780 <xTaskIncrementTick+0x134>)
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d000      	beq.n	8019660 <xTaskIncrementTick+0x14>
 801965e:	e084      	b.n	801976a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019660:	4b48      	ldr	r3, [pc, #288]	; (8019784 <xTaskIncrementTick+0x138>)
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	3301      	adds	r3, #1
 8019666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019668:	4b46      	ldr	r3, [pc, #280]	; (8019784 <xTaskIncrementTick+0x138>)
 801966a:	693a      	ldr	r2, [r7, #16]
 801966c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801966e:	693b      	ldr	r3, [r7, #16]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d117      	bne.n	80196a4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8019674:	4b44      	ldr	r3, [pc, #272]	; (8019788 <xTaskIncrementTick+0x13c>)
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d001      	beq.n	8019682 <xTaskIncrementTick+0x36>
 801967e:	b672      	cpsid	i
 8019680:	e7fe      	b.n	8019680 <xTaskIncrementTick+0x34>
 8019682:	4b41      	ldr	r3, [pc, #260]	; (8019788 <xTaskIncrementTick+0x13c>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	60fb      	str	r3, [r7, #12]
 8019688:	4b40      	ldr	r3, [pc, #256]	; (801978c <xTaskIncrementTick+0x140>)
 801968a:	681a      	ldr	r2, [r3, #0]
 801968c:	4b3e      	ldr	r3, [pc, #248]	; (8019788 <xTaskIncrementTick+0x13c>)
 801968e:	601a      	str	r2, [r3, #0]
 8019690:	4b3e      	ldr	r3, [pc, #248]	; (801978c <xTaskIncrementTick+0x140>)
 8019692:	68fa      	ldr	r2, [r7, #12]
 8019694:	601a      	str	r2, [r3, #0]
 8019696:	4b3e      	ldr	r3, [pc, #248]	; (8019790 <xTaskIncrementTick+0x144>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	1c5a      	adds	r2, r3, #1
 801969c:	4b3c      	ldr	r3, [pc, #240]	; (8019790 <xTaskIncrementTick+0x144>)
 801969e:	601a      	str	r2, [r3, #0]
 80196a0:	f000 fa9c 	bl	8019bdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80196a4:	4b3b      	ldr	r3, [pc, #236]	; (8019794 <xTaskIncrementTick+0x148>)
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	693a      	ldr	r2, [r7, #16]
 80196aa:	429a      	cmp	r2, r3
 80196ac:	d349      	bcc.n	8019742 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80196ae:	4b36      	ldr	r3, [pc, #216]	; (8019788 <xTaskIncrementTick+0x13c>)
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d104      	bne.n	80196c2 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196b8:	4b36      	ldr	r3, [pc, #216]	; (8019794 <xTaskIncrementTick+0x148>)
 80196ba:	2201      	movs	r2, #1
 80196bc:	4252      	negs	r2, r2
 80196be:	601a      	str	r2, [r3, #0]
					break;
 80196c0:	e03f      	b.n	8019742 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80196c2:	4b31      	ldr	r3, [pc, #196]	; (8019788 <xTaskIncrementTick+0x13c>)
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	68db      	ldr	r3, [r3, #12]
 80196c8:	68db      	ldr	r3, [r3, #12]
 80196ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80196cc:	68bb      	ldr	r3, [r7, #8]
 80196ce:	685b      	ldr	r3, [r3, #4]
 80196d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80196d2:	693a      	ldr	r2, [r7, #16]
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d203      	bcs.n	80196e2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80196da:	4b2e      	ldr	r3, [pc, #184]	; (8019794 <xTaskIncrementTick+0x148>)
 80196dc:	687a      	ldr	r2, [r7, #4]
 80196de:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80196e0:	e02f      	b.n	8019742 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80196e2:	68bb      	ldr	r3, [r7, #8]
 80196e4:	3304      	adds	r3, #4
 80196e6:	0018      	movs	r0, r3
 80196e8:	f7fe febb 	bl	8018462 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80196ec:	68bb      	ldr	r3, [r7, #8]
 80196ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d004      	beq.n	80196fe <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80196f4:	68bb      	ldr	r3, [r7, #8]
 80196f6:	3318      	adds	r3, #24
 80196f8:	0018      	movs	r0, r3
 80196fa:	f7fe feb2 	bl	8018462 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019702:	4b25      	ldr	r3, [pc, #148]	; (8019798 <xTaskIncrementTick+0x14c>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	429a      	cmp	r2, r3
 8019708:	d903      	bls.n	8019712 <xTaskIncrementTick+0xc6>
 801970a:	68bb      	ldr	r3, [r7, #8]
 801970c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801970e:	4b22      	ldr	r3, [pc, #136]	; (8019798 <xTaskIncrementTick+0x14c>)
 8019710:	601a      	str	r2, [r3, #0]
 8019712:	68bb      	ldr	r3, [r7, #8]
 8019714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019716:	0013      	movs	r3, r2
 8019718:	009b      	lsls	r3, r3, #2
 801971a:	189b      	adds	r3, r3, r2
 801971c:	009b      	lsls	r3, r3, #2
 801971e:	4a1f      	ldr	r2, [pc, #124]	; (801979c <xTaskIncrementTick+0x150>)
 8019720:	189a      	adds	r2, r3, r2
 8019722:	68bb      	ldr	r3, [r7, #8]
 8019724:	3304      	adds	r3, #4
 8019726:	0019      	movs	r1, r3
 8019728:	0010      	movs	r0, r2
 801972a:	f7fe fe42 	bl	80183b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801972e:	68bb      	ldr	r3, [r7, #8]
 8019730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019732:	4b1b      	ldr	r3, [pc, #108]	; (80197a0 <xTaskIncrementTick+0x154>)
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019738:	429a      	cmp	r2, r3
 801973a:	d3b8      	bcc.n	80196ae <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 801973c:	2301      	movs	r3, #1
 801973e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019740:	e7b5      	b.n	80196ae <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019742:	4b17      	ldr	r3, [pc, #92]	; (80197a0 <xTaskIncrementTick+0x154>)
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019748:	4914      	ldr	r1, [pc, #80]	; (801979c <xTaskIncrementTick+0x150>)
 801974a:	0013      	movs	r3, r2
 801974c:	009b      	lsls	r3, r3, #2
 801974e:	189b      	adds	r3, r3, r2
 8019750:	009b      	lsls	r3, r3, #2
 8019752:	585b      	ldr	r3, [r3, r1]
 8019754:	2b01      	cmp	r3, #1
 8019756:	d901      	bls.n	801975c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8019758:	2301      	movs	r3, #1
 801975a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801975c:	4b11      	ldr	r3, [pc, #68]	; (80197a4 <xTaskIncrementTick+0x158>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d007      	beq.n	8019774 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8019764:	2301      	movs	r3, #1
 8019766:	617b      	str	r3, [r7, #20]
 8019768:	e004      	b.n	8019774 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801976a:	4b0f      	ldr	r3, [pc, #60]	; (80197a8 <xTaskIncrementTick+0x15c>)
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	1c5a      	adds	r2, r3, #1
 8019770:	4b0d      	ldr	r3, [pc, #52]	; (80197a8 <xTaskIncrementTick+0x15c>)
 8019772:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8019774:	697b      	ldr	r3, [r7, #20]
}
 8019776:	0018      	movs	r0, r3
 8019778:	46bd      	mov	sp, r7
 801977a:	b006      	add	sp, #24
 801977c:	bd80      	pop	{r7, pc}
 801977e:	46c0      	nop			; (mov r8, r8)
 8019780:	20001278 	.word	0x20001278
 8019784:	20001254 	.word	0x20001254
 8019788:	20001208 	.word	0x20001208
 801978c:	2000120c 	.word	0x2000120c
 8019790:	20001268 	.word	0x20001268
 8019794:	20001270 	.word	0x20001270
 8019798:	20001258 	.word	0x20001258
 801979c:	20000d80 	.word	0x20000d80
 80197a0:	20000d7c 	.word	0x20000d7c
 80197a4:	20001264 	.word	0x20001264
 80197a8:	20001260 	.word	0x20001260

080197ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80197ac:	b580      	push	{r7, lr}
 80197ae:	b082      	sub	sp, #8
 80197b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80197b2:	4b25      	ldr	r3, [pc, #148]	; (8019848 <vTaskSwitchContext+0x9c>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d003      	beq.n	80197c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80197ba:	4b24      	ldr	r3, [pc, #144]	; (801984c <vTaskSwitchContext+0xa0>)
 80197bc:	2201      	movs	r2, #1
 80197be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80197c0:	e03d      	b.n	801983e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80197c2:	4b22      	ldr	r3, [pc, #136]	; (801984c <vTaskSwitchContext+0xa0>)
 80197c4:	2200      	movs	r2, #0
 80197c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80197c8:	4b21      	ldr	r3, [pc, #132]	; (8019850 <vTaskSwitchContext+0xa4>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	607b      	str	r3, [r7, #4]
 80197ce:	e007      	b.n	80197e0 <vTaskSwitchContext+0x34>
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d101      	bne.n	80197da <vTaskSwitchContext+0x2e>
 80197d6:	b672      	cpsid	i
 80197d8:	e7fe      	b.n	80197d8 <vTaskSwitchContext+0x2c>
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	3b01      	subs	r3, #1
 80197de:	607b      	str	r3, [r7, #4]
 80197e0:	491c      	ldr	r1, [pc, #112]	; (8019854 <vTaskSwitchContext+0xa8>)
 80197e2:	687a      	ldr	r2, [r7, #4]
 80197e4:	0013      	movs	r3, r2
 80197e6:	009b      	lsls	r3, r3, #2
 80197e8:	189b      	adds	r3, r3, r2
 80197ea:	009b      	lsls	r3, r3, #2
 80197ec:	585b      	ldr	r3, [r3, r1]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d0ee      	beq.n	80197d0 <vTaskSwitchContext+0x24>
 80197f2:	687a      	ldr	r2, [r7, #4]
 80197f4:	0013      	movs	r3, r2
 80197f6:	009b      	lsls	r3, r3, #2
 80197f8:	189b      	adds	r3, r3, r2
 80197fa:	009b      	lsls	r3, r3, #2
 80197fc:	4a15      	ldr	r2, [pc, #84]	; (8019854 <vTaskSwitchContext+0xa8>)
 80197fe:	189b      	adds	r3, r3, r2
 8019800:	603b      	str	r3, [r7, #0]
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	685b      	ldr	r3, [r3, #4]
 8019806:	685a      	ldr	r2, [r3, #4]
 8019808:	683b      	ldr	r3, [r7, #0]
 801980a:	605a      	str	r2, [r3, #4]
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	685a      	ldr	r2, [r3, #4]
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	3308      	adds	r3, #8
 8019814:	429a      	cmp	r2, r3
 8019816:	d104      	bne.n	8019822 <vTaskSwitchContext+0x76>
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	685b      	ldr	r3, [r3, #4]
 801981c:	685a      	ldr	r2, [r3, #4]
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	605a      	str	r2, [r3, #4]
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	685b      	ldr	r3, [r3, #4]
 8019826:	68da      	ldr	r2, [r3, #12]
 8019828:	4b0b      	ldr	r3, [pc, #44]	; (8019858 <vTaskSwitchContext+0xac>)
 801982a:	601a      	str	r2, [r3, #0]
 801982c:	4b08      	ldr	r3, [pc, #32]	; (8019850 <vTaskSwitchContext+0xa4>)
 801982e:	687a      	ldr	r2, [r7, #4]
 8019830:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019832:	4b09      	ldr	r3, [pc, #36]	; (8019858 <vTaskSwitchContext+0xac>)
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	3354      	adds	r3, #84	; 0x54
 8019838:	001a      	movs	r2, r3
 801983a:	4b08      	ldr	r3, [pc, #32]	; (801985c <vTaskSwitchContext+0xb0>)
 801983c:	601a      	str	r2, [r3, #0]
}
 801983e:	46c0      	nop			; (mov r8, r8)
 8019840:	46bd      	mov	sp, r7
 8019842:	b002      	add	sp, #8
 8019844:	bd80      	pop	{r7, pc}
 8019846:	46c0      	nop			; (mov r8, r8)
 8019848:	20001278 	.word	0x20001278
 801984c:	20001264 	.word	0x20001264
 8019850:	20001258 	.word	0x20001258
 8019854:	20000d80 	.word	0x20000d80
 8019858:	20000d7c 	.word	0x20000d7c
 801985c:	20000250 	.word	0x20000250

08019860 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b082      	sub	sp, #8
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
 8019868:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d101      	bne.n	8019874 <vTaskPlaceOnEventList+0x14>
 8019870:	b672      	cpsid	i
 8019872:	e7fe      	b.n	8019872 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019874:	4b08      	ldr	r3, [pc, #32]	; (8019898 <vTaskPlaceOnEventList+0x38>)
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	3318      	adds	r3, #24
 801987a:	001a      	movs	r2, r3
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	0011      	movs	r1, r2
 8019880:	0018      	movs	r0, r3
 8019882:	f7fe fdb8 	bl	80183f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019886:	683b      	ldr	r3, [r7, #0]
 8019888:	2101      	movs	r1, #1
 801988a:	0018      	movs	r0, r3
 801988c:	f000 fa4a 	bl	8019d24 <prvAddCurrentTaskToDelayedList>
}
 8019890:	46c0      	nop			; (mov r8, r8)
 8019892:	46bd      	mov	sp, r7
 8019894:	b002      	add	sp, #8
 8019896:	bd80      	pop	{r7, pc}
 8019898:	20000d7c 	.word	0x20000d7c

0801989c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801989c:	b580      	push	{r7, lr}
 801989e:	b084      	sub	sp, #16
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	60f8      	str	r0, [r7, #12]
 80198a4:	60b9      	str	r1, [r7, #8]
 80198a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d101      	bne.n	80198b2 <vTaskPlaceOnEventListRestricted+0x16>
 80198ae:	b672      	cpsid	i
 80198b0:	e7fe      	b.n	80198b0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80198b2:	4b0c      	ldr	r3, [pc, #48]	; (80198e4 <vTaskPlaceOnEventListRestricted+0x48>)
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	3318      	adds	r3, #24
 80198b8:	001a      	movs	r2, r3
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	0011      	movs	r1, r2
 80198be:	0018      	movs	r0, r3
 80198c0:	f7fe fd77 	bl	80183b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d002      	beq.n	80198d0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80198ca:	2301      	movs	r3, #1
 80198cc:	425b      	negs	r3, r3
 80198ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80198d0:	687a      	ldr	r2, [r7, #4]
 80198d2:	68bb      	ldr	r3, [r7, #8]
 80198d4:	0011      	movs	r1, r2
 80198d6:	0018      	movs	r0, r3
 80198d8:	f000 fa24 	bl	8019d24 <prvAddCurrentTaskToDelayedList>
	}
 80198dc:	46c0      	nop			; (mov r8, r8)
 80198de:	46bd      	mov	sp, r7
 80198e0:	b004      	add	sp, #16
 80198e2:	bd80      	pop	{r7, pc}
 80198e4:	20000d7c 	.word	0x20000d7c

080198e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b084      	sub	sp, #16
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	68db      	ldr	r3, [r3, #12]
 80198f4:	68db      	ldr	r3, [r3, #12]
 80198f6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d101      	bne.n	8019902 <xTaskRemoveFromEventList+0x1a>
 80198fe:	b672      	cpsid	i
 8019900:	e7fe      	b.n	8019900 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019902:	68bb      	ldr	r3, [r7, #8]
 8019904:	3318      	adds	r3, #24
 8019906:	0018      	movs	r0, r3
 8019908:	f7fe fdab 	bl	8018462 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801990c:	4b1e      	ldr	r3, [pc, #120]	; (8019988 <xTaskRemoveFromEventList+0xa0>)
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d11d      	bne.n	8019950 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019914:	68bb      	ldr	r3, [r7, #8]
 8019916:	3304      	adds	r3, #4
 8019918:	0018      	movs	r0, r3
 801991a:	f7fe fda2 	bl	8018462 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801991e:	68bb      	ldr	r3, [r7, #8]
 8019920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019922:	4b1a      	ldr	r3, [pc, #104]	; (801998c <xTaskRemoveFromEventList+0xa4>)
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	429a      	cmp	r2, r3
 8019928:	d903      	bls.n	8019932 <xTaskRemoveFromEventList+0x4a>
 801992a:	68bb      	ldr	r3, [r7, #8]
 801992c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801992e:	4b17      	ldr	r3, [pc, #92]	; (801998c <xTaskRemoveFromEventList+0xa4>)
 8019930:	601a      	str	r2, [r3, #0]
 8019932:	68bb      	ldr	r3, [r7, #8]
 8019934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019936:	0013      	movs	r3, r2
 8019938:	009b      	lsls	r3, r3, #2
 801993a:	189b      	adds	r3, r3, r2
 801993c:	009b      	lsls	r3, r3, #2
 801993e:	4a14      	ldr	r2, [pc, #80]	; (8019990 <xTaskRemoveFromEventList+0xa8>)
 8019940:	189a      	adds	r2, r3, r2
 8019942:	68bb      	ldr	r3, [r7, #8]
 8019944:	3304      	adds	r3, #4
 8019946:	0019      	movs	r1, r3
 8019948:	0010      	movs	r0, r2
 801994a:	f7fe fd32 	bl	80183b2 <vListInsertEnd>
 801994e:	e007      	b.n	8019960 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019950:	68bb      	ldr	r3, [r7, #8]
 8019952:	3318      	adds	r3, #24
 8019954:	001a      	movs	r2, r3
 8019956:	4b0f      	ldr	r3, [pc, #60]	; (8019994 <xTaskRemoveFromEventList+0xac>)
 8019958:	0011      	movs	r1, r2
 801995a:	0018      	movs	r0, r3
 801995c:	f7fe fd29 	bl	80183b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019964:	4b0c      	ldr	r3, [pc, #48]	; (8019998 <xTaskRemoveFromEventList+0xb0>)
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801996a:	429a      	cmp	r2, r3
 801996c:	d905      	bls.n	801997a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801996e:	2301      	movs	r3, #1
 8019970:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019972:	4b0a      	ldr	r3, [pc, #40]	; (801999c <xTaskRemoveFromEventList+0xb4>)
 8019974:	2201      	movs	r2, #1
 8019976:	601a      	str	r2, [r3, #0]
 8019978:	e001      	b.n	801997e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 801997a:	2300      	movs	r3, #0
 801997c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801997e:	68fb      	ldr	r3, [r7, #12]
}
 8019980:	0018      	movs	r0, r3
 8019982:	46bd      	mov	sp, r7
 8019984:	b004      	add	sp, #16
 8019986:	bd80      	pop	{r7, pc}
 8019988:	20001278 	.word	0x20001278
 801998c:	20001258 	.word	0x20001258
 8019990:	20000d80 	.word	0x20000d80
 8019994:	20001210 	.word	0x20001210
 8019998:	20000d7c 	.word	0x20000d7c
 801999c:	20001264 	.word	0x20001264

080199a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b082      	sub	sp, #8
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80199a8:	4b05      	ldr	r3, [pc, #20]	; (80199c0 <vTaskInternalSetTimeOutState+0x20>)
 80199aa:	681a      	ldr	r2, [r3, #0]
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80199b0:	4b04      	ldr	r3, [pc, #16]	; (80199c4 <vTaskInternalSetTimeOutState+0x24>)
 80199b2:	681a      	ldr	r2, [r3, #0]
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	605a      	str	r2, [r3, #4]
}
 80199b8:	46c0      	nop			; (mov r8, r8)
 80199ba:	46bd      	mov	sp, r7
 80199bc:	b002      	add	sp, #8
 80199be:	bd80      	pop	{r7, pc}
 80199c0:	20001268 	.word	0x20001268
 80199c4:	20001254 	.word	0x20001254

080199c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b086      	sub	sp, #24
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
 80199d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d101      	bne.n	80199dc <xTaskCheckForTimeOut+0x14>
 80199d8:	b672      	cpsid	i
 80199da:	e7fe      	b.n	80199da <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80199dc:	683b      	ldr	r3, [r7, #0]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d101      	bne.n	80199e6 <xTaskCheckForTimeOut+0x1e>
 80199e2:	b672      	cpsid	i
 80199e4:	e7fe      	b.n	80199e4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80199e6:	f000 fd9b 	bl	801a520 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80199ea:	4b1d      	ldr	r3, [pc, #116]	; (8019a60 <xTaskCheckForTimeOut+0x98>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	685b      	ldr	r3, [r3, #4]
 80199f4:	693a      	ldr	r2, [r7, #16]
 80199f6:	1ad3      	subs	r3, r2, r3
 80199f8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80199fa:	683b      	ldr	r3, [r7, #0]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	3301      	adds	r3, #1
 8019a00:	d102      	bne.n	8019a08 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019a02:	2300      	movs	r3, #0
 8019a04:	617b      	str	r3, [r7, #20]
 8019a06:	e024      	b.n	8019a52 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	681a      	ldr	r2, [r3, #0]
 8019a0c:	4b15      	ldr	r3, [pc, #84]	; (8019a64 <xTaskCheckForTimeOut+0x9c>)
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	429a      	cmp	r2, r3
 8019a12:	d007      	beq.n	8019a24 <xTaskCheckForTimeOut+0x5c>
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	685b      	ldr	r3, [r3, #4]
 8019a18:	693a      	ldr	r2, [r7, #16]
 8019a1a:	429a      	cmp	r2, r3
 8019a1c:	d302      	bcc.n	8019a24 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019a1e:	2301      	movs	r3, #1
 8019a20:	617b      	str	r3, [r7, #20]
 8019a22:	e016      	b.n	8019a52 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	68fa      	ldr	r2, [r7, #12]
 8019a2a:	429a      	cmp	r2, r3
 8019a2c:	d20c      	bcs.n	8019a48 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	681a      	ldr	r2, [r3, #0]
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	1ad2      	subs	r2, r2, r3
 8019a36:	683b      	ldr	r3, [r7, #0]
 8019a38:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	0018      	movs	r0, r3
 8019a3e:	f7ff ffaf 	bl	80199a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019a42:	2300      	movs	r3, #0
 8019a44:	617b      	str	r3, [r7, #20]
 8019a46:	e004      	b.n	8019a52 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019a4e:	2301      	movs	r3, #1
 8019a50:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8019a52:	f000 fd77 	bl	801a544 <vPortExitCritical>

	return xReturn;
 8019a56:	697b      	ldr	r3, [r7, #20]
}
 8019a58:	0018      	movs	r0, r3
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	b006      	add	sp, #24
 8019a5e:	bd80      	pop	{r7, pc}
 8019a60:	20001254 	.word	0x20001254
 8019a64:	20001268 	.word	0x20001268

08019a68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019a6c:	4b02      	ldr	r3, [pc, #8]	; (8019a78 <vTaskMissedYield+0x10>)
 8019a6e:	2201      	movs	r2, #1
 8019a70:	601a      	str	r2, [r3, #0]
}
 8019a72:	46c0      	nop			; (mov r8, r8)
 8019a74:	46bd      	mov	sp, r7
 8019a76:	bd80      	pop	{r7, pc}
 8019a78:	20001264 	.word	0x20001264

08019a7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b082      	sub	sp, #8
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019a84:	f000 f84e 	bl	8019b24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019a88:	4b03      	ldr	r3, [pc, #12]	; (8019a98 <prvIdleTask+0x1c>)
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	2b01      	cmp	r3, #1
 8019a8e:	d9f9      	bls.n	8019a84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8019a90:	f000 fd36 	bl	801a500 <vPortYield>
		prvCheckTasksWaitingTermination();
 8019a94:	e7f6      	b.n	8019a84 <prvIdleTask+0x8>
 8019a96:	46c0      	nop			; (mov r8, r8)
 8019a98:	20000d80 	.word	0x20000d80

08019a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b082      	sub	sp, #8
 8019aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	607b      	str	r3, [r7, #4]
 8019aa6:	e00c      	b.n	8019ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019aa8:	687a      	ldr	r2, [r7, #4]
 8019aaa:	0013      	movs	r3, r2
 8019aac:	009b      	lsls	r3, r3, #2
 8019aae:	189b      	adds	r3, r3, r2
 8019ab0:	009b      	lsls	r3, r3, #2
 8019ab2:	4a14      	ldr	r2, [pc, #80]	; (8019b04 <prvInitialiseTaskLists+0x68>)
 8019ab4:	189b      	adds	r3, r3, r2
 8019ab6:	0018      	movs	r0, r3
 8019ab8:	f7fe fc52 	bl	8018360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	3301      	adds	r3, #1
 8019ac0:	607b      	str	r3, [r7, #4]
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	2b37      	cmp	r3, #55	; 0x37
 8019ac6:	d9ef      	bls.n	8019aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019ac8:	4b0f      	ldr	r3, [pc, #60]	; (8019b08 <prvInitialiseTaskLists+0x6c>)
 8019aca:	0018      	movs	r0, r3
 8019acc:	f7fe fc48 	bl	8018360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019ad0:	4b0e      	ldr	r3, [pc, #56]	; (8019b0c <prvInitialiseTaskLists+0x70>)
 8019ad2:	0018      	movs	r0, r3
 8019ad4:	f7fe fc44 	bl	8018360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019ad8:	4b0d      	ldr	r3, [pc, #52]	; (8019b10 <prvInitialiseTaskLists+0x74>)
 8019ada:	0018      	movs	r0, r3
 8019adc:	f7fe fc40 	bl	8018360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019ae0:	4b0c      	ldr	r3, [pc, #48]	; (8019b14 <prvInitialiseTaskLists+0x78>)
 8019ae2:	0018      	movs	r0, r3
 8019ae4:	f7fe fc3c 	bl	8018360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019ae8:	4b0b      	ldr	r3, [pc, #44]	; (8019b18 <prvInitialiseTaskLists+0x7c>)
 8019aea:	0018      	movs	r0, r3
 8019aec:	f7fe fc38 	bl	8018360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019af0:	4b0a      	ldr	r3, [pc, #40]	; (8019b1c <prvInitialiseTaskLists+0x80>)
 8019af2:	4a05      	ldr	r2, [pc, #20]	; (8019b08 <prvInitialiseTaskLists+0x6c>)
 8019af4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019af6:	4b0a      	ldr	r3, [pc, #40]	; (8019b20 <prvInitialiseTaskLists+0x84>)
 8019af8:	4a04      	ldr	r2, [pc, #16]	; (8019b0c <prvInitialiseTaskLists+0x70>)
 8019afa:	601a      	str	r2, [r3, #0]
}
 8019afc:	46c0      	nop			; (mov r8, r8)
 8019afe:	46bd      	mov	sp, r7
 8019b00:	b002      	add	sp, #8
 8019b02:	bd80      	pop	{r7, pc}
 8019b04:	20000d80 	.word	0x20000d80
 8019b08:	200011e0 	.word	0x200011e0
 8019b0c:	200011f4 	.word	0x200011f4
 8019b10:	20001210 	.word	0x20001210
 8019b14:	20001224 	.word	0x20001224
 8019b18:	2000123c 	.word	0x2000123c
 8019b1c:	20001208 	.word	0x20001208
 8019b20:	2000120c 	.word	0x2000120c

08019b24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b082      	sub	sp, #8
 8019b28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019b2a:	e01a      	b.n	8019b62 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8019b2c:	f000 fcf8 	bl	801a520 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019b30:	4b10      	ldr	r3, [pc, #64]	; (8019b74 <prvCheckTasksWaitingTermination+0x50>)
 8019b32:	68db      	ldr	r3, [r3, #12]
 8019b34:	68db      	ldr	r3, [r3, #12]
 8019b36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	3304      	adds	r3, #4
 8019b3c:	0018      	movs	r0, r3
 8019b3e:	f7fe fc90 	bl	8018462 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019b42:	4b0d      	ldr	r3, [pc, #52]	; (8019b78 <prvCheckTasksWaitingTermination+0x54>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	1e5a      	subs	r2, r3, #1
 8019b48:	4b0b      	ldr	r3, [pc, #44]	; (8019b78 <prvCheckTasksWaitingTermination+0x54>)
 8019b4a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019b4c:	4b0b      	ldr	r3, [pc, #44]	; (8019b7c <prvCheckTasksWaitingTermination+0x58>)
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	1e5a      	subs	r2, r3, #1
 8019b52:	4b0a      	ldr	r3, [pc, #40]	; (8019b7c <prvCheckTasksWaitingTermination+0x58>)
 8019b54:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8019b56:	f000 fcf5 	bl	801a544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	0018      	movs	r0, r3
 8019b5e:	f000 f80f 	bl	8019b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019b62:	4b06      	ldr	r3, [pc, #24]	; (8019b7c <prvCheckTasksWaitingTermination+0x58>)
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d1e0      	bne.n	8019b2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019b6a:	46c0      	nop			; (mov r8, r8)
 8019b6c:	46c0      	nop			; (mov r8, r8)
 8019b6e:	46bd      	mov	sp, r7
 8019b70:	b002      	add	sp, #8
 8019b72:	bd80      	pop	{r7, pc}
 8019b74:	20001224 	.word	0x20001224
 8019b78:	20001250 	.word	0x20001250
 8019b7c:	20001238 	.word	0x20001238

08019b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b082      	sub	sp, #8
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	3354      	adds	r3, #84	; 0x54
 8019b8c:	0018      	movs	r0, r3
 8019b8e:	f009 fda5 	bl	80236dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	22a5      	movs	r2, #165	; 0xa5
 8019b96:	5c9b      	ldrb	r3, [r3, r2]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d109      	bne.n	8019bb0 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ba0:	0018      	movs	r0, r3
 8019ba2:	f000 fe01 	bl	801a7a8 <vPortFree>
				vPortFree( pxTCB );
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	0018      	movs	r0, r3
 8019baa:	f000 fdfd 	bl	801a7a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019bae:	e010      	b.n	8019bd2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	22a5      	movs	r2, #165	; 0xa5
 8019bb4:	5c9b      	ldrb	r3, [r3, r2]
 8019bb6:	2b01      	cmp	r3, #1
 8019bb8:	d104      	bne.n	8019bc4 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	0018      	movs	r0, r3
 8019bbe:	f000 fdf3 	bl	801a7a8 <vPortFree>
	}
 8019bc2:	e006      	b.n	8019bd2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	22a5      	movs	r2, #165	; 0xa5
 8019bc8:	5c9b      	ldrb	r3, [r3, r2]
 8019bca:	2b02      	cmp	r3, #2
 8019bcc:	d001      	beq.n	8019bd2 <prvDeleteTCB+0x52>
 8019bce:	b672      	cpsid	i
 8019bd0:	e7fe      	b.n	8019bd0 <prvDeleteTCB+0x50>
	}
 8019bd2:	46c0      	nop			; (mov r8, r8)
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	b002      	add	sp, #8
 8019bd8:	bd80      	pop	{r7, pc}
	...

08019bdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b082      	sub	sp, #8
 8019be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019be2:	4b0b      	ldr	r3, [pc, #44]	; (8019c10 <prvResetNextTaskUnblockTime+0x34>)
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d104      	bne.n	8019bf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019bec:	4b09      	ldr	r3, [pc, #36]	; (8019c14 <prvResetNextTaskUnblockTime+0x38>)
 8019bee:	2201      	movs	r2, #1
 8019bf0:	4252      	negs	r2, r2
 8019bf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019bf4:	e008      	b.n	8019c08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019bf6:	4b06      	ldr	r3, [pc, #24]	; (8019c10 <prvResetNextTaskUnblockTime+0x34>)
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	68db      	ldr	r3, [r3, #12]
 8019bfc:	68db      	ldr	r3, [r3, #12]
 8019bfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	685a      	ldr	r2, [r3, #4]
 8019c04:	4b03      	ldr	r3, [pc, #12]	; (8019c14 <prvResetNextTaskUnblockTime+0x38>)
 8019c06:	601a      	str	r2, [r3, #0]
}
 8019c08:	46c0      	nop			; (mov r8, r8)
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	b002      	add	sp, #8
 8019c0e:	bd80      	pop	{r7, pc}
 8019c10:	20001208 	.word	0x20001208
 8019c14:	20001270 	.word	0x20001270

08019c18 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b082      	sub	sp, #8
 8019c1c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8019c1e:	4b04      	ldr	r3, [pc, #16]	; (8019c30 <xTaskGetCurrentTaskHandle+0x18>)
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	607b      	str	r3, [r7, #4]

		return xReturn;
 8019c24:	687b      	ldr	r3, [r7, #4]
	}
 8019c26:	0018      	movs	r0, r3
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	b002      	add	sp, #8
 8019c2c:	bd80      	pop	{r7, pc}
 8019c2e:	46c0      	nop			; (mov r8, r8)
 8019c30:	20000d7c 	.word	0x20000d7c

08019c34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b082      	sub	sp, #8
 8019c38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8019c3a:	4b0a      	ldr	r3, [pc, #40]	; (8019c64 <xTaskGetSchedulerState+0x30>)
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d102      	bne.n	8019c48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019c42:	2301      	movs	r3, #1
 8019c44:	607b      	str	r3, [r7, #4]
 8019c46:	e008      	b.n	8019c5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019c48:	4b07      	ldr	r3, [pc, #28]	; (8019c68 <xTaskGetSchedulerState+0x34>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d102      	bne.n	8019c56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019c50:	2302      	movs	r3, #2
 8019c52:	607b      	str	r3, [r7, #4]
 8019c54:	e001      	b.n	8019c5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019c56:	2300      	movs	r3, #0
 8019c58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019c5a:	687b      	ldr	r3, [r7, #4]
	}
 8019c5c:	0018      	movs	r0, r3
 8019c5e:	46bd      	mov	sp, r7
 8019c60:	b002      	add	sp, #8
 8019c62:	bd80      	pop	{r7, pc}
 8019c64:	2000125c 	.word	0x2000125c
 8019c68:	20001278 	.word	0x20001278

08019c6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019c78:	2300      	movs	r3, #0
 8019c7a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	d044      	beq.n	8019d0c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019c82:	4b25      	ldr	r3, [pc, #148]	; (8019d18 <xTaskPriorityDisinherit+0xac>)
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	68ba      	ldr	r2, [r7, #8]
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	d001      	beq.n	8019c90 <xTaskPriorityDisinherit+0x24>
 8019c8c:	b672      	cpsid	i
 8019c8e:	e7fe      	b.n	8019c8e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d101      	bne.n	8019c9c <xTaskPriorityDisinherit+0x30>
 8019c98:	b672      	cpsid	i
 8019c9a:	e7fe      	b.n	8019c9a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8019c9c:	68bb      	ldr	r3, [r7, #8]
 8019c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ca0:	1e5a      	subs	r2, r3, #1
 8019ca2:	68bb      	ldr	r3, [r7, #8]
 8019ca4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019ca6:	68bb      	ldr	r3, [r7, #8]
 8019ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019caa:	68bb      	ldr	r3, [r7, #8]
 8019cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019cae:	429a      	cmp	r2, r3
 8019cb0:	d02c      	beq.n	8019d0c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019cb2:	68bb      	ldr	r3, [r7, #8]
 8019cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d128      	bne.n	8019d0c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019cba:	68bb      	ldr	r3, [r7, #8]
 8019cbc:	3304      	adds	r3, #4
 8019cbe:	0018      	movs	r0, r3
 8019cc0:	f7fe fbcf 	bl	8018462 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019cc4:	68bb      	ldr	r3, [r7, #8]
 8019cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019cc8:	68bb      	ldr	r3, [r7, #8]
 8019cca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019ccc:	68bb      	ldr	r3, [r7, #8]
 8019cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cd0:	2238      	movs	r2, #56	; 0x38
 8019cd2:	1ad2      	subs	r2, r2, r3
 8019cd4:	68bb      	ldr	r3, [r7, #8]
 8019cd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019cd8:	68bb      	ldr	r3, [r7, #8]
 8019cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cdc:	4b0f      	ldr	r3, [pc, #60]	; (8019d1c <xTaskPriorityDisinherit+0xb0>)
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	429a      	cmp	r2, r3
 8019ce2:	d903      	bls.n	8019cec <xTaskPriorityDisinherit+0x80>
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ce8:	4b0c      	ldr	r3, [pc, #48]	; (8019d1c <xTaskPriorityDisinherit+0xb0>)
 8019cea:	601a      	str	r2, [r3, #0]
 8019cec:	68bb      	ldr	r3, [r7, #8]
 8019cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cf0:	0013      	movs	r3, r2
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	189b      	adds	r3, r3, r2
 8019cf6:	009b      	lsls	r3, r3, #2
 8019cf8:	4a09      	ldr	r2, [pc, #36]	; (8019d20 <xTaskPriorityDisinherit+0xb4>)
 8019cfa:	189a      	adds	r2, r3, r2
 8019cfc:	68bb      	ldr	r3, [r7, #8]
 8019cfe:	3304      	adds	r3, #4
 8019d00:	0019      	movs	r1, r3
 8019d02:	0010      	movs	r0, r2
 8019d04:	f7fe fb55 	bl	80183b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019d08:	2301      	movs	r3, #1
 8019d0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019d0c:	68fb      	ldr	r3, [r7, #12]
	}
 8019d0e:	0018      	movs	r0, r3
 8019d10:	46bd      	mov	sp, r7
 8019d12:	b004      	add	sp, #16
 8019d14:	bd80      	pop	{r7, pc}
 8019d16:	46c0      	nop			; (mov r8, r8)
 8019d18:	20000d7c 	.word	0x20000d7c
 8019d1c:	20001258 	.word	0x20001258
 8019d20:	20000d80 	.word	0x20000d80

08019d24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b084      	sub	sp, #16
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	6078      	str	r0, [r7, #4]
 8019d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019d2e:	4b21      	ldr	r3, [pc, #132]	; (8019db4 <prvAddCurrentTaskToDelayedList+0x90>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019d34:	4b20      	ldr	r3, [pc, #128]	; (8019db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	3304      	adds	r3, #4
 8019d3a:	0018      	movs	r0, r3
 8019d3c:	f7fe fb91 	bl	8018462 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	3301      	adds	r3, #1
 8019d44:	d10b      	bne.n	8019d5e <prvAddCurrentTaskToDelayedList+0x3a>
 8019d46:	683b      	ldr	r3, [r7, #0]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d008      	beq.n	8019d5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019d4c:	4b1a      	ldr	r3, [pc, #104]	; (8019db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	1d1a      	adds	r2, r3, #4
 8019d52:	4b1a      	ldr	r3, [pc, #104]	; (8019dbc <prvAddCurrentTaskToDelayedList+0x98>)
 8019d54:	0011      	movs	r1, r2
 8019d56:	0018      	movs	r0, r3
 8019d58:	f7fe fb2b 	bl	80183b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019d5c:	e026      	b.n	8019dac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019d5e:	68fa      	ldr	r2, [r7, #12]
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	18d3      	adds	r3, r2, r3
 8019d64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019d66:	4b14      	ldr	r3, [pc, #80]	; (8019db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	68ba      	ldr	r2, [r7, #8]
 8019d6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019d6e:	68ba      	ldr	r2, [r7, #8]
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	429a      	cmp	r2, r3
 8019d74:	d209      	bcs.n	8019d8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019d76:	4b12      	ldr	r3, [pc, #72]	; (8019dc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019d78:	681a      	ldr	r2, [r3, #0]
 8019d7a:	4b0f      	ldr	r3, [pc, #60]	; (8019db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	3304      	adds	r3, #4
 8019d80:	0019      	movs	r1, r3
 8019d82:	0010      	movs	r0, r2
 8019d84:	f7fe fb37 	bl	80183f6 <vListInsert>
}
 8019d88:	e010      	b.n	8019dac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019d8a:	4b0e      	ldr	r3, [pc, #56]	; (8019dc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019d8c:	681a      	ldr	r2, [r3, #0]
 8019d8e:	4b0a      	ldr	r3, [pc, #40]	; (8019db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	3304      	adds	r3, #4
 8019d94:	0019      	movs	r1, r3
 8019d96:	0010      	movs	r0, r2
 8019d98:	f7fe fb2d 	bl	80183f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019d9c:	4b0a      	ldr	r3, [pc, #40]	; (8019dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	68ba      	ldr	r2, [r7, #8]
 8019da2:	429a      	cmp	r2, r3
 8019da4:	d202      	bcs.n	8019dac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019da6:	4b08      	ldr	r3, [pc, #32]	; (8019dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019da8:	68ba      	ldr	r2, [r7, #8]
 8019daa:	601a      	str	r2, [r3, #0]
}
 8019dac:	46c0      	nop			; (mov r8, r8)
 8019dae:	46bd      	mov	sp, r7
 8019db0:	b004      	add	sp, #16
 8019db2:	bd80      	pop	{r7, pc}
 8019db4:	20001254 	.word	0x20001254
 8019db8:	20000d7c 	.word	0x20000d7c
 8019dbc:	2000123c 	.word	0x2000123c
 8019dc0:	2000120c 	.word	0x2000120c
 8019dc4:	20001208 	.word	0x20001208
 8019dc8:	20001270 	.word	0x20001270

08019dcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019dcc:	b590      	push	{r4, r7, lr}
 8019dce:	b089      	sub	sp, #36	; 0x24
 8019dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019dd6:	f000 fac9 	bl	801a36c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019dda:	4b17      	ldr	r3, [pc, #92]	; (8019e38 <xTimerCreateTimerTask+0x6c>)
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d020      	beq.n	8019e24 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019de2:	2300      	movs	r3, #0
 8019de4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019de6:	2300      	movs	r3, #0
 8019de8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019dea:	003a      	movs	r2, r7
 8019dec:	1d39      	adds	r1, r7, #4
 8019dee:	2308      	movs	r3, #8
 8019df0:	18fb      	adds	r3, r7, r3
 8019df2:	0018      	movs	r0, r3
 8019df4:	f7fe fa9c 	bl	8018330 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019df8:	683c      	ldr	r4, [r7, #0]
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	68ba      	ldr	r2, [r7, #8]
 8019dfe:	490f      	ldr	r1, [pc, #60]	; (8019e3c <xTimerCreateTimerTask+0x70>)
 8019e00:	480f      	ldr	r0, [pc, #60]	; (8019e40 <xTimerCreateTimerTask+0x74>)
 8019e02:	9202      	str	r2, [sp, #8]
 8019e04:	9301      	str	r3, [sp, #4]
 8019e06:	2302      	movs	r3, #2
 8019e08:	9300      	str	r3, [sp, #0]
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	0022      	movs	r2, r4
 8019e0e:	f7ff f812 	bl	8018e36 <xTaskCreateStatic>
 8019e12:	0002      	movs	r2, r0
 8019e14:	4b0b      	ldr	r3, [pc, #44]	; (8019e44 <xTimerCreateTimerTask+0x78>)
 8019e16:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019e18:	4b0a      	ldr	r3, [pc, #40]	; (8019e44 <xTimerCreateTimerTask+0x78>)
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d001      	beq.n	8019e24 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8019e20:	2301      	movs	r3, #1
 8019e22:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d101      	bne.n	8019e2e <xTimerCreateTimerTask+0x62>
 8019e2a:	b672      	cpsid	i
 8019e2c:	e7fe      	b.n	8019e2c <xTimerCreateTimerTask+0x60>
	return xReturn;
 8019e2e:	68fb      	ldr	r3, [r7, #12]
}
 8019e30:	0018      	movs	r0, r3
 8019e32:	46bd      	mov	sp, r7
 8019e34:	b005      	add	sp, #20
 8019e36:	bd90      	pop	{r4, r7, pc}
 8019e38:	200012ac 	.word	0x200012ac
 8019e3c:	08024120 	.word	0x08024120
 8019e40:	08019f65 	.word	0x08019f65
 8019e44:	200012b0 	.word	0x200012b0

08019e48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019e48:	b590      	push	{r4, r7, lr}
 8019e4a:	b08b      	sub	sp, #44	; 0x2c
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	60f8      	str	r0, [r7, #12]
 8019e50:	60b9      	str	r1, [r7, #8]
 8019e52:	607a      	str	r2, [r7, #4]
 8019e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019e56:	2300      	movs	r3, #0
 8019e58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d101      	bne.n	8019e64 <xTimerGenericCommand+0x1c>
 8019e60:	b672      	cpsid	i
 8019e62:	e7fe      	b.n	8019e62 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019e64:	4b1c      	ldr	r3, [pc, #112]	; (8019ed8 <xTimerGenericCommand+0x90>)
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d030      	beq.n	8019ece <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019e6c:	2414      	movs	r4, #20
 8019e6e:	193b      	adds	r3, r7, r4
 8019e70:	68ba      	ldr	r2, [r7, #8]
 8019e72:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019e74:	193b      	adds	r3, r7, r4
 8019e76:	687a      	ldr	r2, [r7, #4]
 8019e78:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019e7a:	193b      	adds	r3, r7, r4
 8019e7c:	68fa      	ldr	r2, [r7, #12]
 8019e7e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	2b05      	cmp	r3, #5
 8019e84:	dc19      	bgt.n	8019eba <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019e86:	f7ff fed5 	bl	8019c34 <xTaskGetSchedulerState>
 8019e8a:	0003      	movs	r3, r0
 8019e8c:	2b02      	cmp	r3, #2
 8019e8e:	d109      	bne.n	8019ea4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019e90:	4b11      	ldr	r3, [pc, #68]	; (8019ed8 <xTimerGenericCommand+0x90>)
 8019e92:	6818      	ldr	r0, [r3, #0]
 8019e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019e96:	1939      	adds	r1, r7, r4
 8019e98:	2300      	movs	r3, #0
 8019e9a:	f7fe fc03 	bl	80186a4 <xQueueGenericSend>
 8019e9e:	0003      	movs	r3, r0
 8019ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8019ea2:	e014      	b.n	8019ece <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019ea4:	4b0c      	ldr	r3, [pc, #48]	; (8019ed8 <xTimerGenericCommand+0x90>)
 8019ea6:	6818      	ldr	r0, [r3, #0]
 8019ea8:	2314      	movs	r3, #20
 8019eaa:	18f9      	adds	r1, r7, r3
 8019eac:	2300      	movs	r3, #0
 8019eae:	2200      	movs	r2, #0
 8019eb0:	f7fe fbf8 	bl	80186a4 <xQueueGenericSend>
 8019eb4:	0003      	movs	r3, r0
 8019eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8019eb8:	e009      	b.n	8019ece <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019eba:	4b07      	ldr	r3, [pc, #28]	; (8019ed8 <xTimerGenericCommand+0x90>)
 8019ebc:	6818      	ldr	r0, [r3, #0]
 8019ebe:	683a      	ldr	r2, [r7, #0]
 8019ec0:	2314      	movs	r3, #20
 8019ec2:	18f9      	adds	r1, r7, r3
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	f7fe fcb1 	bl	801882c <xQueueGenericSendFromISR>
 8019eca:	0003      	movs	r3, r0
 8019ecc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019ed0:	0018      	movs	r0, r3
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	b00b      	add	sp, #44	; 0x2c
 8019ed6:	bd90      	pop	{r4, r7, pc}
 8019ed8:	200012ac 	.word	0x200012ac

08019edc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b086      	sub	sp, #24
 8019ee0:	af02      	add	r7, sp, #8
 8019ee2:	6078      	str	r0, [r7, #4]
 8019ee4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ee6:	4b1e      	ldr	r3, [pc, #120]	; (8019f60 <prvProcessExpiredTimer+0x84>)
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	68db      	ldr	r3, [r3, #12]
 8019eec:	68db      	ldr	r3, [r3, #12]
 8019eee:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	3304      	adds	r3, #4
 8019ef4:	0018      	movs	r0, r3
 8019ef6:	f7fe fab4 	bl	8018462 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	2228      	movs	r2, #40	; 0x28
 8019efe:	5c9b      	ldrb	r3, [r3, r2]
 8019f00:	001a      	movs	r2, r3
 8019f02:	2304      	movs	r3, #4
 8019f04:	4013      	ands	r3, r2
 8019f06:	d019      	beq.n	8019f3c <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	699a      	ldr	r2, [r3, #24]
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	18d1      	adds	r1, r2, r3
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	683a      	ldr	r2, [r7, #0]
 8019f14:	68f8      	ldr	r0, [r7, #12]
 8019f16:	f000 f8c3 	bl	801a0a0 <prvInsertTimerInActiveList>
 8019f1a:	1e03      	subs	r3, r0, #0
 8019f1c:	d017      	beq.n	8019f4e <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019f1e:	687a      	ldr	r2, [r7, #4]
 8019f20:	68f8      	ldr	r0, [r7, #12]
 8019f22:	2300      	movs	r3, #0
 8019f24:	9300      	str	r3, [sp, #0]
 8019f26:	2300      	movs	r3, #0
 8019f28:	2100      	movs	r1, #0
 8019f2a:	f7ff ff8d 	bl	8019e48 <xTimerGenericCommand>
 8019f2e:	0003      	movs	r3, r0
 8019f30:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8019f32:	68bb      	ldr	r3, [r7, #8]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d10a      	bne.n	8019f4e <prvProcessExpiredTimer+0x72>
 8019f38:	b672      	cpsid	i
 8019f3a:	e7fe      	b.n	8019f3a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	2228      	movs	r2, #40	; 0x28
 8019f40:	5c9b      	ldrb	r3, [r3, r2]
 8019f42:	2201      	movs	r2, #1
 8019f44:	4393      	bics	r3, r2
 8019f46:	b2d9      	uxtb	r1, r3
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	2228      	movs	r2, #40	; 0x28
 8019f4c:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	6a1b      	ldr	r3, [r3, #32]
 8019f52:	68fa      	ldr	r2, [r7, #12]
 8019f54:	0010      	movs	r0, r2
 8019f56:	4798      	blx	r3
}
 8019f58:	46c0      	nop			; (mov r8, r8)
 8019f5a:	46bd      	mov	sp, r7
 8019f5c:	b004      	add	sp, #16
 8019f5e:	bd80      	pop	{r7, pc}
 8019f60:	200012a4 	.word	0x200012a4

08019f64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b084      	sub	sp, #16
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019f6c:	2308      	movs	r3, #8
 8019f6e:	18fb      	adds	r3, r7, r3
 8019f70:	0018      	movs	r0, r3
 8019f72:	f000 f853 	bl	801a01c <prvGetNextExpireTime>
 8019f76:	0003      	movs	r3, r0
 8019f78:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019f7a:	68ba      	ldr	r2, [r7, #8]
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	0011      	movs	r1, r2
 8019f80:	0018      	movs	r0, r3
 8019f82:	f000 f803 	bl	8019f8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019f86:	f000 f8cd 	bl	801a124 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019f8a:	e7ef      	b.n	8019f6c <prvTimerTask+0x8>

08019f8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019f8c:	b580      	push	{r7, lr}
 8019f8e:	b084      	sub	sp, #16
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019f96:	f7ff fab3 	bl	8019500 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019f9a:	2308      	movs	r3, #8
 8019f9c:	18fb      	adds	r3, r7, r3
 8019f9e:	0018      	movs	r0, r3
 8019fa0:	f000 f85e 	bl	801a060 <prvSampleTimeNow>
 8019fa4:	0003      	movs	r3, r0
 8019fa6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d12b      	bne.n	801a006 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d10c      	bne.n	8019fce <prvProcessTimerOrBlockTask+0x42>
 8019fb4:	687a      	ldr	r2, [r7, #4]
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	429a      	cmp	r2, r3
 8019fba:	d808      	bhi.n	8019fce <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8019fbc:	f7ff faac 	bl	8019518 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019fc0:	68fa      	ldr	r2, [r7, #12]
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	0011      	movs	r1, r2
 8019fc6:	0018      	movs	r0, r3
 8019fc8:	f7ff ff88 	bl	8019edc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019fcc:	e01d      	b.n	801a00a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8019fce:	683b      	ldr	r3, [r7, #0]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d008      	beq.n	8019fe6 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019fd4:	4b0f      	ldr	r3, [pc, #60]	; (801a014 <prvProcessTimerOrBlockTask+0x88>)
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d101      	bne.n	8019fe2 <prvProcessTimerOrBlockTask+0x56>
 8019fde:	2301      	movs	r3, #1
 8019fe0:	e000      	b.n	8019fe4 <prvProcessTimerOrBlockTask+0x58>
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019fe6:	4b0c      	ldr	r3, [pc, #48]	; (801a018 <prvProcessTimerOrBlockTask+0x8c>)
 8019fe8:	6818      	ldr	r0, [r3, #0]
 8019fea:	687a      	ldr	r2, [r7, #4]
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	1ad3      	subs	r3, r2, r3
 8019ff0:	683a      	ldr	r2, [r7, #0]
 8019ff2:	0019      	movs	r1, r3
 8019ff4:	f7fe feec 	bl	8018dd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019ff8:	f7ff fa8e 	bl	8019518 <xTaskResumeAll>
 8019ffc:	1e03      	subs	r3, r0, #0
 8019ffe:	d104      	bne.n	801a00a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 801a000:	f000 fa7e 	bl	801a500 <vPortYield>
}
 801a004:	e001      	b.n	801a00a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 801a006:	f7ff fa87 	bl	8019518 <xTaskResumeAll>
}
 801a00a:	46c0      	nop			; (mov r8, r8)
 801a00c:	46bd      	mov	sp, r7
 801a00e:	b004      	add	sp, #16
 801a010:	bd80      	pop	{r7, pc}
 801a012:	46c0      	nop			; (mov r8, r8)
 801a014:	200012a8 	.word	0x200012a8
 801a018:	200012ac 	.word	0x200012ac

0801a01c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b084      	sub	sp, #16
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a024:	4b0d      	ldr	r3, [pc, #52]	; (801a05c <prvGetNextExpireTime+0x40>)
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d101      	bne.n	801a032 <prvGetNextExpireTime+0x16>
 801a02e:	2201      	movs	r2, #1
 801a030:	e000      	b.n	801a034 <prvGetNextExpireTime+0x18>
 801a032:	2200      	movs	r2, #0
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d105      	bne.n	801a04c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a040:	4b06      	ldr	r3, [pc, #24]	; (801a05c <prvGetNextExpireTime+0x40>)
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	68db      	ldr	r3, [r3, #12]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	60fb      	str	r3, [r7, #12]
 801a04a:	e001      	b.n	801a050 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a04c:	2300      	movs	r3, #0
 801a04e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801a050:	68fb      	ldr	r3, [r7, #12]
}
 801a052:	0018      	movs	r0, r3
 801a054:	46bd      	mov	sp, r7
 801a056:	b004      	add	sp, #16
 801a058:	bd80      	pop	{r7, pc}
 801a05a:	46c0      	nop			; (mov r8, r8)
 801a05c:	200012a4 	.word	0x200012a4

0801a060 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b084      	sub	sp, #16
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801a068:	f7ff fae2 	bl	8019630 <xTaskGetTickCount>
 801a06c:	0003      	movs	r3, r0
 801a06e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 801a070:	4b0a      	ldr	r3, [pc, #40]	; (801a09c <prvSampleTimeNow+0x3c>)
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	68fa      	ldr	r2, [r7, #12]
 801a076:	429a      	cmp	r2, r3
 801a078:	d205      	bcs.n	801a086 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 801a07a:	f000 f919 	bl	801a2b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	2201      	movs	r2, #1
 801a082:	601a      	str	r2, [r3, #0]
 801a084:	e002      	b.n	801a08c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	2200      	movs	r2, #0
 801a08a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801a08c:	4b03      	ldr	r3, [pc, #12]	; (801a09c <prvSampleTimeNow+0x3c>)
 801a08e:	68fa      	ldr	r2, [r7, #12]
 801a090:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 801a092:	68fb      	ldr	r3, [r7, #12]
}
 801a094:	0018      	movs	r0, r3
 801a096:	46bd      	mov	sp, r7
 801a098:	b004      	add	sp, #16
 801a09a:	bd80      	pop	{r7, pc}
 801a09c:	200012b4 	.word	0x200012b4

0801a0a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b086      	sub	sp, #24
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	60f8      	str	r0, [r7, #12]
 801a0a8:	60b9      	str	r1, [r7, #8]
 801a0aa:	607a      	str	r2, [r7, #4]
 801a0ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	68ba      	ldr	r2, [r7, #8]
 801a0b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	68fa      	ldr	r2, [r7, #12]
 801a0bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a0be:	68ba      	ldr	r2, [r7, #8]
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	429a      	cmp	r2, r3
 801a0c4:	d812      	bhi.n	801a0ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a0c6:	687a      	ldr	r2, [r7, #4]
 801a0c8:	683b      	ldr	r3, [r7, #0]
 801a0ca:	1ad2      	subs	r2, r2, r3
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	699b      	ldr	r3, [r3, #24]
 801a0d0:	429a      	cmp	r2, r3
 801a0d2:	d302      	bcc.n	801a0da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a0d4:	2301      	movs	r3, #1
 801a0d6:	617b      	str	r3, [r7, #20]
 801a0d8:	e01b      	b.n	801a112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a0da:	4b10      	ldr	r3, [pc, #64]	; (801a11c <prvInsertTimerInActiveList+0x7c>)
 801a0dc:	681a      	ldr	r2, [r3, #0]
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	3304      	adds	r3, #4
 801a0e2:	0019      	movs	r1, r3
 801a0e4:	0010      	movs	r0, r2
 801a0e6:	f7fe f986 	bl	80183f6 <vListInsert>
 801a0ea:	e012      	b.n	801a112 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a0ec:	687a      	ldr	r2, [r7, #4]
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	d206      	bcs.n	801a102 <prvInsertTimerInActiveList+0x62>
 801a0f4:	68ba      	ldr	r2, [r7, #8]
 801a0f6:	683b      	ldr	r3, [r7, #0]
 801a0f8:	429a      	cmp	r2, r3
 801a0fa:	d302      	bcc.n	801a102 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801a0fc:	2301      	movs	r3, #1
 801a0fe:	617b      	str	r3, [r7, #20]
 801a100:	e007      	b.n	801a112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a102:	4b07      	ldr	r3, [pc, #28]	; (801a120 <prvInsertTimerInActiveList+0x80>)
 801a104:	681a      	ldr	r2, [r3, #0]
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	3304      	adds	r3, #4
 801a10a:	0019      	movs	r1, r3
 801a10c:	0010      	movs	r0, r2
 801a10e:	f7fe f972 	bl	80183f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801a112:	697b      	ldr	r3, [r7, #20]
}
 801a114:	0018      	movs	r0, r3
 801a116:	46bd      	mov	sp, r7
 801a118:	b006      	add	sp, #24
 801a11a:	bd80      	pop	{r7, pc}
 801a11c:	200012a8 	.word	0x200012a8
 801a120:	200012a4 	.word	0x200012a4

0801a124 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801a124:	b590      	push	{r4, r7, lr}
 801a126:	b08d      	sub	sp, #52	; 0x34
 801a128:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a12a:	e0ac      	b.n	801a286 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a12c:	2208      	movs	r2, #8
 801a12e:	18bb      	adds	r3, r7, r2
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	2b00      	cmp	r3, #0
 801a134:	da0f      	bge.n	801a156 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801a136:	18bb      	adds	r3, r7, r2
 801a138:	3304      	adds	r3, #4
 801a13a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d101      	bne.n	801a146 <prvProcessReceivedCommands+0x22>
 801a142:	b672      	cpsid	i
 801a144:	e7fe      	b.n	801a144 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a148:	681a      	ldr	r2, [r3, #0]
 801a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a14c:	6858      	ldr	r0, [r3, #4]
 801a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a150:	689b      	ldr	r3, [r3, #8]
 801a152:	0019      	movs	r1, r3
 801a154:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a156:	2208      	movs	r2, #8
 801a158:	18bb      	adds	r3, r7, r2
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	da00      	bge.n	801a162 <prvProcessReceivedCommands+0x3e>
 801a160:	e091      	b.n	801a286 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a162:	18bb      	adds	r3, r7, r2
 801a164:	689b      	ldr	r3, [r3, #8]
 801a166:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a168:	6a3b      	ldr	r3, [r7, #32]
 801a16a:	695b      	ldr	r3, [r3, #20]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d004      	beq.n	801a17a <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a170:	6a3b      	ldr	r3, [r7, #32]
 801a172:	3304      	adds	r3, #4
 801a174:	0018      	movs	r0, r3
 801a176:	f7fe f974 	bl	8018462 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a17a:	1d3b      	adds	r3, r7, #4
 801a17c:	0018      	movs	r0, r3
 801a17e:	f7ff ff6f 	bl	801a060 <prvSampleTimeNow>
 801a182:	0003      	movs	r3, r0
 801a184:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 801a186:	2308      	movs	r3, #8
 801a188:	18fb      	adds	r3, r7, r3
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	2b09      	cmp	r3, #9
 801a18e:	d900      	bls.n	801a192 <prvProcessReceivedCommands+0x6e>
 801a190:	e078      	b.n	801a284 <prvProcessReceivedCommands+0x160>
 801a192:	009a      	lsls	r2, r3, #2
 801a194:	4b44      	ldr	r3, [pc, #272]	; (801a2a8 <prvProcessReceivedCommands+0x184>)
 801a196:	18d3      	adds	r3, r2, r3
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a19c:	6a3b      	ldr	r3, [r7, #32]
 801a19e:	2228      	movs	r2, #40	; 0x28
 801a1a0:	5c9b      	ldrb	r3, [r3, r2]
 801a1a2:	2201      	movs	r2, #1
 801a1a4:	4313      	orrs	r3, r2
 801a1a6:	b2d9      	uxtb	r1, r3
 801a1a8:	6a3b      	ldr	r3, [r7, #32]
 801a1aa:	2228      	movs	r2, #40	; 0x28
 801a1ac:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a1ae:	2408      	movs	r4, #8
 801a1b0:	193b      	adds	r3, r7, r4
 801a1b2:	685a      	ldr	r2, [r3, #4]
 801a1b4:	6a3b      	ldr	r3, [r7, #32]
 801a1b6:	699b      	ldr	r3, [r3, #24]
 801a1b8:	18d1      	adds	r1, r2, r3
 801a1ba:	193b      	adds	r3, r7, r4
 801a1bc:	685b      	ldr	r3, [r3, #4]
 801a1be:	69fa      	ldr	r2, [r7, #28]
 801a1c0:	6a38      	ldr	r0, [r7, #32]
 801a1c2:	f7ff ff6d 	bl	801a0a0 <prvInsertTimerInActiveList>
 801a1c6:	1e03      	subs	r3, r0, #0
 801a1c8:	d05d      	beq.n	801a286 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a1ca:	6a3b      	ldr	r3, [r7, #32]
 801a1cc:	6a1b      	ldr	r3, [r3, #32]
 801a1ce:	6a3a      	ldr	r2, [r7, #32]
 801a1d0:	0010      	movs	r0, r2
 801a1d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a1d4:	6a3b      	ldr	r3, [r7, #32]
 801a1d6:	2228      	movs	r2, #40	; 0x28
 801a1d8:	5c9b      	ldrb	r3, [r3, r2]
 801a1da:	001a      	movs	r2, r3
 801a1dc:	2304      	movs	r3, #4
 801a1de:	4013      	ands	r3, r2
 801a1e0:	d051      	beq.n	801a286 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a1e2:	193b      	adds	r3, r7, r4
 801a1e4:	685a      	ldr	r2, [r3, #4]
 801a1e6:	6a3b      	ldr	r3, [r7, #32]
 801a1e8:	699b      	ldr	r3, [r3, #24]
 801a1ea:	18d2      	adds	r2, r2, r3
 801a1ec:	6a38      	ldr	r0, [r7, #32]
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	9300      	str	r3, [sp, #0]
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	f7ff fe27 	bl	8019e48 <xTimerGenericCommand>
 801a1fa:	0003      	movs	r3, r0
 801a1fc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 801a1fe:	69bb      	ldr	r3, [r7, #24]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d140      	bne.n	801a286 <prvProcessReceivedCommands+0x162>
 801a204:	b672      	cpsid	i
 801a206:	e7fe      	b.n	801a206 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a208:	6a3b      	ldr	r3, [r7, #32]
 801a20a:	2228      	movs	r2, #40	; 0x28
 801a20c:	5c9b      	ldrb	r3, [r3, r2]
 801a20e:	2201      	movs	r2, #1
 801a210:	4393      	bics	r3, r2
 801a212:	b2d9      	uxtb	r1, r3
 801a214:	6a3b      	ldr	r3, [r7, #32]
 801a216:	2228      	movs	r2, #40	; 0x28
 801a218:	5499      	strb	r1, [r3, r2]
					break;
 801a21a:	e034      	b.n	801a286 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a21c:	6a3b      	ldr	r3, [r7, #32]
 801a21e:	2228      	movs	r2, #40	; 0x28
 801a220:	5c9b      	ldrb	r3, [r3, r2]
 801a222:	2201      	movs	r2, #1
 801a224:	4313      	orrs	r3, r2
 801a226:	b2d9      	uxtb	r1, r3
 801a228:	6a3b      	ldr	r3, [r7, #32]
 801a22a:	2228      	movs	r2, #40	; 0x28
 801a22c:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a22e:	2308      	movs	r3, #8
 801a230:	18fb      	adds	r3, r7, r3
 801a232:	685a      	ldr	r2, [r3, #4]
 801a234:	6a3b      	ldr	r3, [r7, #32]
 801a236:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a238:	6a3b      	ldr	r3, [r7, #32]
 801a23a:	699b      	ldr	r3, [r3, #24]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d101      	bne.n	801a244 <prvProcessReceivedCommands+0x120>
 801a240:	b672      	cpsid	i
 801a242:	e7fe      	b.n	801a242 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a244:	6a3b      	ldr	r3, [r7, #32]
 801a246:	699a      	ldr	r2, [r3, #24]
 801a248:	69fb      	ldr	r3, [r7, #28]
 801a24a:	18d1      	adds	r1, r2, r3
 801a24c:	69fb      	ldr	r3, [r7, #28]
 801a24e:	69fa      	ldr	r2, [r7, #28]
 801a250:	6a38      	ldr	r0, [r7, #32]
 801a252:	f7ff ff25 	bl	801a0a0 <prvInsertTimerInActiveList>
					break;
 801a256:	e016      	b.n	801a286 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a258:	6a3b      	ldr	r3, [r7, #32]
 801a25a:	2228      	movs	r2, #40	; 0x28
 801a25c:	5c9b      	ldrb	r3, [r3, r2]
 801a25e:	001a      	movs	r2, r3
 801a260:	2302      	movs	r3, #2
 801a262:	4013      	ands	r3, r2
 801a264:	d104      	bne.n	801a270 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 801a266:	6a3b      	ldr	r3, [r7, #32]
 801a268:	0018      	movs	r0, r3
 801a26a:	f000 fa9d 	bl	801a7a8 <vPortFree>
 801a26e:	e00a      	b.n	801a286 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a270:	6a3b      	ldr	r3, [r7, #32]
 801a272:	2228      	movs	r2, #40	; 0x28
 801a274:	5c9b      	ldrb	r3, [r3, r2]
 801a276:	2201      	movs	r2, #1
 801a278:	4393      	bics	r3, r2
 801a27a:	b2d9      	uxtb	r1, r3
 801a27c:	6a3b      	ldr	r3, [r7, #32]
 801a27e:	2228      	movs	r2, #40	; 0x28
 801a280:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801a282:	e000      	b.n	801a286 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 801a284:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a286:	4b09      	ldr	r3, [pc, #36]	; (801a2ac <prvProcessReceivedCommands+0x188>)
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	2208      	movs	r2, #8
 801a28c:	18b9      	adds	r1, r7, r2
 801a28e:	2200      	movs	r2, #0
 801a290:	0018      	movs	r0, r3
 801a292:	f7fe fb3f 	bl	8018914 <xQueueReceive>
 801a296:	1e03      	subs	r3, r0, #0
 801a298:	d000      	beq.n	801a29c <prvProcessReceivedCommands+0x178>
 801a29a:	e747      	b.n	801a12c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801a29c:	46c0      	nop			; (mov r8, r8)
 801a29e:	46c0      	nop			; (mov r8, r8)
 801a2a0:	46bd      	mov	sp, r7
 801a2a2:	b00b      	add	sp, #44	; 0x2c
 801a2a4:	bd90      	pop	{r4, r7, pc}
 801a2a6:	46c0      	nop			; (mov r8, r8)
 801a2a8:	0802512c 	.word	0x0802512c
 801a2ac:	200012ac 	.word	0x200012ac

0801a2b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b088      	sub	sp, #32
 801a2b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a2b6:	e041      	b.n	801a33c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a2b8:	4b2a      	ldr	r3, [pc, #168]	; (801a364 <prvSwitchTimerLists+0xb4>)
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	68db      	ldr	r3, [r3, #12]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a2c2:	4b28      	ldr	r3, [pc, #160]	; (801a364 <prvSwitchTimerLists+0xb4>)
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	68db      	ldr	r3, [r3, #12]
 801a2c8:	68db      	ldr	r3, [r3, #12]
 801a2ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	3304      	adds	r3, #4
 801a2d0:	0018      	movs	r0, r3
 801a2d2:	f7fe f8c6 	bl	8018462 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	6a1b      	ldr	r3, [r3, #32]
 801a2da:	68fa      	ldr	r2, [r7, #12]
 801a2dc:	0010      	movs	r0, r2
 801a2de:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	2228      	movs	r2, #40	; 0x28
 801a2e4:	5c9b      	ldrb	r3, [r3, r2]
 801a2e6:	001a      	movs	r2, r3
 801a2e8:	2304      	movs	r3, #4
 801a2ea:	4013      	ands	r3, r2
 801a2ec:	d026      	beq.n	801a33c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	699b      	ldr	r3, [r3, #24]
 801a2f2:	693a      	ldr	r2, [r7, #16]
 801a2f4:	18d3      	adds	r3, r2, r3
 801a2f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801a2f8:	68ba      	ldr	r2, [r7, #8]
 801a2fa:	693b      	ldr	r3, [r7, #16]
 801a2fc:	429a      	cmp	r2, r3
 801a2fe:	d90e      	bls.n	801a31e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	68ba      	ldr	r2, [r7, #8]
 801a304:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	68fa      	ldr	r2, [r7, #12]
 801a30a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a30c:	4b15      	ldr	r3, [pc, #84]	; (801a364 <prvSwitchTimerLists+0xb4>)
 801a30e:	681a      	ldr	r2, [r3, #0]
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	3304      	adds	r3, #4
 801a314:	0019      	movs	r1, r3
 801a316:	0010      	movs	r0, r2
 801a318:	f7fe f86d 	bl	80183f6 <vListInsert>
 801a31c:	e00e      	b.n	801a33c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a31e:	693a      	ldr	r2, [r7, #16]
 801a320:	68f8      	ldr	r0, [r7, #12]
 801a322:	2300      	movs	r3, #0
 801a324:	9300      	str	r3, [sp, #0]
 801a326:	2300      	movs	r3, #0
 801a328:	2100      	movs	r1, #0
 801a32a:	f7ff fd8d 	bl	8019e48 <xTimerGenericCommand>
 801a32e:	0003      	movs	r3, r0
 801a330:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d101      	bne.n	801a33c <prvSwitchTimerLists+0x8c>
 801a338:	b672      	cpsid	i
 801a33a:	e7fe      	b.n	801a33a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a33c:	4b09      	ldr	r3, [pc, #36]	; (801a364 <prvSwitchTimerLists+0xb4>)
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d1b8      	bne.n	801a2b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801a346:	4b07      	ldr	r3, [pc, #28]	; (801a364 <prvSwitchTimerLists+0xb4>)
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801a34c:	4b06      	ldr	r3, [pc, #24]	; (801a368 <prvSwitchTimerLists+0xb8>)
 801a34e:	681a      	ldr	r2, [r3, #0]
 801a350:	4b04      	ldr	r3, [pc, #16]	; (801a364 <prvSwitchTimerLists+0xb4>)
 801a352:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 801a354:	4b04      	ldr	r3, [pc, #16]	; (801a368 <prvSwitchTimerLists+0xb8>)
 801a356:	697a      	ldr	r2, [r7, #20]
 801a358:	601a      	str	r2, [r3, #0]
}
 801a35a:	46c0      	nop			; (mov r8, r8)
 801a35c:	46bd      	mov	sp, r7
 801a35e:	b006      	add	sp, #24
 801a360:	bd80      	pop	{r7, pc}
 801a362:	46c0      	nop			; (mov r8, r8)
 801a364:	200012a4 	.word	0x200012a4
 801a368:	200012a8 	.word	0x200012a8

0801a36c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b082      	sub	sp, #8
 801a370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a372:	f000 f8d5 	bl	801a520 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a376:	4b16      	ldr	r3, [pc, #88]	; (801a3d0 <prvCheckForValidListAndQueue+0x64>)
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d123      	bne.n	801a3c6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 801a37e:	4b15      	ldr	r3, [pc, #84]	; (801a3d4 <prvCheckForValidListAndQueue+0x68>)
 801a380:	0018      	movs	r0, r3
 801a382:	f7fd ffed 	bl	8018360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a386:	4b14      	ldr	r3, [pc, #80]	; (801a3d8 <prvCheckForValidListAndQueue+0x6c>)
 801a388:	0018      	movs	r0, r3
 801a38a:	f7fd ffe9 	bl	8018360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a38e:	4b13      	ldr	r3, [pc, #76]	; (801a3dc <prvCheckForValidListAndQueue+0x70>)
 801a390:	4a10      	ldr	r2, [pc, #64]	; (801a3d4 <prvCheckForValidListAndQueue+0x68>)
 801a392:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a394:	4b12      	ldr	r3, [pc, #72]	; (801a3e0 <prvCheckForValidListAndQueue+0x74>)
 801a396:	4a10      	ldr	r2, [pc, #64]	; (801a3d8 <prvCheckForValidListAndQueue+0x6c>)
 801a398:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a39a:	4b12      	ldr	r3, [pc, #72]	; (801a3e4 <prvCheckForValidListAndQueue+0x78>)
 801a39c:	4a12      	ldr	r2, [pc, #72]	; (801a3e8 <prvCheckForValidListAndQueue+0x7c>)
 801a39e:	2100      	movs	r1, #0
 801a3a0:	9100      	str	r1, [sp, #0]
 801a3a2:	2110      	movs	r1, #16
 801a3a4:	200a      	movs	r0, #10
 801a3a6:	f7fe f8d8 	bl	801855a <xQueueGenericCreateStatic>
 801a3aa:	0002      	movs	r2, r0
 801a3ac:	4b08      	ldr	r3, [pc, #32]	; (801a3d0 <prvCheckForValidListAndQueue+0x64>)
 801a3ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801a3b0:	4b07      	ldr	r3, [pc, #28]	; (801a3d0 <prvCheckForValidListAndQueue+0x64>)
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d006      	beq.n	801a3c6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a3b8:	4b05      	ldr	r3, [pc, #20]	; (801a3d0 <prvCheckForValidListAndQueue+0x64>)
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	4a0b      	ldr	r2, [pc, #44]	; (801a3ec <prvCheckForValidListAndQueue+0x80>)
 801a3be:	0011      	movs	r1, r2
 801a3c0:	0018      	movs	r0, r3
 801a3c2:	f7fe fcdd 	bl	8018d80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a3c6:	f000 f8bd 	bl	801a544 <vPortExitCritical>
}
 801a3ca:	46c0      	nop			; (mov r8, r8)
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	bd80      	pop	{r7, pc}
 801a3d0:	200012ac 	.word	0x200012ac
 801a3d4:	2000127c 	.word	0x2000127c
 801a3d8:	20001290 	.word	0x20001290
 801a3dc:	200012a4 	.word	0x200012a4
 801a3e0:	200012a8 	.word	0x200012a8
 801a3e4:	20001358 	.word	0x20001358
 801a3e8:	200012b8 	.word	0x200012b8
 801a3ec:	08024128 	.word	0x08024128

0801a3f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b084      	sub	sp, #16
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	60f8      	str	r0, [r7, #12]
 801a3f8:	60b9      	str	r1, [r7, #8]
 801a3fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	3b04      	subs	r3, #4
 801a400:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	2280      	movs	r2, #128	; 0x80
 801a406:	0452      	lsls	r2, r2, #17
 801a408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	3b04      	subs	r3, #4
 801a40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801a410:	68ba      	ldr	r2, [r7, #8]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	3b04      	subs	r3, #4
 801a41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a41c:	4a08      	ldr	r2, [pc, #32]	; (801a440 <pxPortInitialiseStack+0x50>)
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	3b14      	subs	r3, #20
 801a426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a428:	687a      	ldr	r2, [r7, #4]
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	3b20      	subs	r3, #32
 801a432:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a434:	68fb      	ldr	r3, [r7, #12]
}
 801a436:	0018      	movs	r0, r3
 801a438:	46bd      	mov	sp, r7
 801a43a:	b004      	add	sp, #16
 801a43c:	bd80      	pop	{r7, pc}
 801a43e:	46c0      	nop			; (mov r8, r8)
 801a440:	0801a445 	.word	0x0801a445

0801a444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b082      	sub	sp, #8
 801a448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801a44a:	2300      	movs	r3, #0
 801a44c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a44e:	4b08      	ldr	r3, [pc, #32]	; (801a470 <prvTaskExitError+0x2c>)
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	3301      	adds	r3, #1
 801a454:	d001      	beq.n	801a45a <prvTaskExitError+0x16>
 801a456:	b672      	cpsid	i
 801a458:	e7fe      	b.n	801a458 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 801a45a:	b672      	cpsid	i
	while( ulDummy == 0 )
 801a45c:	46c0      	nop			; (mov r8, r8)
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d0fc      	beq.n	801a45e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a464:	46c0      	nop			; (mov r8, r8)
 801a466:	46c0      	nop			; (mov r8, r8)
 801a468:	46bd      	mov	sp, r7
 801a46a:	b002      	add	sp, #8
 801a46c:	bd80      	pop	{r7, pc}
 801a46e:	46c0      	nop			; (mov r8, r8)
 801a470:	200000f0 	.word	0x200000f0

0801a474 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 801a474:	b580      	push	{r7, lr}
 801a476:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 801a478:	46c0      	nop			; (mov r8, r8)
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}
	...

0801a480 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 801a480:	4a0b      	ldr	r2, [pc, #44]	; (801a4b0 <pxCurrentTCBConst2>)
 801a482:	6813      	ldr	r3, [r2, #0]
 801a484:	6818      	ldr	r0, [r3, #0]
 801a486:	3020      	adds	r0, #32
 801a488:	f380 8809 	msr	PSP, r0
 801a48c:	2002      	movs	r0, #2
 801a48e:	f380 8814 	msr	CONTROL, r0
 801a492:	f3bf 8f6f 	isb	sy
 801a496:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 801a498:	46ae      	mov	lr, r5
 801a49a:	bc08      	pop	{r3}
 801a49c:	bc04      	pop	{r2}
 801a49e:	b662      	cpsie	i
 801a4a0:	4718      	bx	r3
 801a4a2:	46c0      	nop			; (mov r8, r8)
 801a4a4:	46c0      	nop			; (mov r8, r8)
 801a4a6:	46c0      	nop			; (mov r8, r8)
 801a4a8:	46c0      	nop			; (mov r8, r8)
 801a4aa:	46c0      	nop			; (mov r8, r8)
 801a4ac:	46c0      	nop			; (mov r8, r8)
 801a4ae:	46c0      	nop			; (mov r8, r8)

0801a4b0 <pxCurrentTCBConst2>:
 801a4b0:	20000d7c 	.word	0x20000d7c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 801a4b4:	46c0      	nop			; (mov r8, r8)
 801a4b6:	46c0      	nop			; (mov r8, r8)

0801a4b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a4bc:	4b0e      	ldr	r3, [pc, #56]	; (801a4f8 <xPortStartScheduler+0x40>)
 801a4be:	681a      	ldr	r2, [r3, #0]
 801a4c0:	4b0d      	ldr	r3, [pc, #52]	; (801a4f8 <xPortStartScheduler+0x40>)
 801a4c2:	21ff      	movs	r1, #255	; 0xff
 801a4c4:	0409      	lsls	r1, r1, #16
 801a4c6:	430a      	orrs	r2, r1
 801a4c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a4ca:	4b0b      	ldr	r3, [pc, #44]	; (801a4f8 <xPortStartScheduler+0x40>)
 801a4cc:	681a      	ldr	r2, [r3, #0]
 801a4ce:	4b0a      	ldr	r3, [pc, #40]	; (801a4f8 <xPortStartScheduler+0x40>)
 801a4d0:	21ff      	movs	r1, #255	; 0xff
 801a4d2:	0609      	lsls	r1, r1, #24
 801a4d4:	430a      	orrs	r2, r1
 801a4d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a4d8:	f000 f898 	bl	801a60c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a4dc:	4b07      	ldr	r3, [pc, #28]	; (801a4fc <xPortStartScheduler+0x44>)
 801a4de:	2200      	movs	r2, #0
 801a4e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 801a4e2:	f7ff ffcd 	bl	801a480 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a4e6:	f7ff f961 	bl	80197ac <vTaskSwitchContext>
	prvTaskExitError();
 801a4ea:	f7ff ffab 	bl	801a444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a4ee:	2300      	movs	r3, #0
}
 801a4f0:	0018      	movs	r0, r3
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	bd80      	pop	{r7, pc}
 801a4f6:	46c0      	nop			; (mov r8, r8)
 801a4f8:	e000ed20 	.word	0xe000ed20
 801a4fc:	200000f0 	.word	0x200000f0

0801a500 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 801a500:	b580      	push	{r7, lr}
 801a502:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a504:	4b05      	ldr	r3, [pc, #20]	; (801a51c <vPortYield+0x1c>)
 801a506:	2280      	movs	r2, #128	; 0x80
 801a508:	0552      	lsls	r2, r2, #21
 801a50a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801a50c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801a510:	f3bf 8f6f 	isb	sy
}
 801a514:	46c0      	nop			; (mov r8, r8)
 801a516:	46bd      	mov	sp, r7
 801a518:	bd80      	pop	{r7, pc}
 801a51a:	46c0      	nop			; (mov r8, r8)
 801a51c:	e000ed04 	.word	0xe000ed04

0801a520 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a520:	b580      	push	{r7, lr}
 801a522:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801a524:	b672      	cpsid	i
	uxCriticalNesting++;
 801a526:	4b06      	ldr	r3, [pc, #24]	; (801a540 <vPortEnterCritical+0x20>)
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	1c5a      	adds	r2, r3, #1
 801a52c:	4b04      	ldr	r3, [pc, #16]	; (801a540 <vPortEnterCritical+0x20>)
 801a52e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 801a530:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801a534:	f3bf 8f6f 	isb	sy
}
 801a538:	46c0      	nop			; (mov r8, r8)
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bd80      	pop	{r7, pc}
 801a53e:	46c0      	nop			; (mov r8, r8)
 801a540:	200000f0 	.word	0x200000f0

0801a544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a544:	b580      	push	{r7, lr}
 801a546:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a548:	4b09      	ldr	r3, [pc, #36]	; (801a570 <vPortExitCritical+0x2c>)
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d101      	bne.n	801a554 <vPortExitCritical+0x10>
 801a550:	b672      	cpsid	i
 801a552:	e7fe      	b.n	801a552 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 801a554:	4b06      	ldr	r3, [pc, #24]	; (801a570 <vPortExitCritical+0x2c>)
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	1e5a      	subs	r2, r3, #1
 801a55a:	4b05      	ldr	r3, [pc, #20]	; (801a570 <vPortExitCritical+0x2c>)
 801a55c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 801a55e:	4b04      	ldr	r3, [pc, #16]	; (801a570 <vPortExitCritical+0x2c>)
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d100      	bne.n	801a568 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 801a566:	b662      	cpsie	i
	}
}
 801a568:	46c0      	nop			; (mov r8, r8)
 801a56a:	46bd      	mov	sp, r7
 801a56c:	bd80      	pop	{r7, pc}
 801a56e:	46c0      	nop			; (mov r8, r8)
 801a570:	200000f0 	.word	0x200000f0

0801a574 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 801a574:	f3ef 8010 	mrs	r0, PRIMASK
 801a578:	b672      	cpsid	i
 801a57a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801a57c:	46c0      	nop			; (mov r8, r8)
 801a57e:	0018      	movs	r0, r3

0801a580 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 801a580:	f380 8810 	msr	PRIMASK, r0
 801a584:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801a586:	46c0      	nop			; (mov r8, r8)
	...

0801a590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a590:	f3ef 8009 	mrs	r0, PSP
 801a594:	4b0e      	ldr	r3, [pc, #56]	; (801a5d0 <pxCurrentTCBConst>)
 801a596:	681a      	ldr	r2, [r3, #0]
 801a598:	3820      	subs	r0, #32
 801a59a:	6010      	str	r0, [r2, #0]
 801a59c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801a59e:	4644      	mov	r4, r8
 801a5a0:	464d      	mov	r5, r9
 801a5a2:	4656      	mov	r6, sl
 801a5a4:	465f      	mov	r7, fp
 801a5a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801a5a8:	b508      	push	{r3, lr}
 801a5aa:	b672      	cpsid	i
 801a5ac:	f7ff f8fe 	bl	80197ac <vTaskSwitchContext>
 801a5b0:	b662      	cpsie	i
 801a5b2:	bc0c      	pop	{r2, r3}
 801a5b4:	6811      	ldr	r1, [r2, #0]
 801a5b6:	6808      	ldr	r0, [r1, #0]
 801a5b8:	3010      	adds	r0, #16
 801a5ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801a5bc:	46a0      	mov	r8, r4
 801a5be:	46a9      	mov	r9, r5
 801a5c0:	46b2      	mov	sl, r6
 801a5c2:	46bb      	mov	fp, r7
 801a5c4:	f380 8809 	msr	PSP, r0
 801a5c8:	3820      	subs	r0, #32
 801a5ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801a5cc:	4718      	bx	r3
 801a5ce:	46c0      	nop			; (mov r8, r8)

0801a5d0 <pxCurrentTCBConst>:
 801a5d0:	20000d7c 	.word	0x20000d7c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 801a5d4:	46c0      	nop			; (mov r8, r8)
 801a5d6:	46c0      	nop			; (mov r8, r8)

0801a5d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b082      	sub	sp, #8
 801a5dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801a5de:	f7ff ffc9 	bl	801a574 <ulSetInterruptMaskFromISR>
 801a5e2:	0003      	movs	r3, r0
 801a5e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a5e6:	f7ff f831 	bl	801964c <xTaskIncrementTick>
 801a5ea:	1e03      	subs	r3, r0, #0
 801a5ec:	d003      	beq.n	801a5f6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a5ee:	4b06      	ldr	r3, [pc, #24]	; (801a608 <xPortSysTickHandler+0x30>)
 801a5f0:	2280      	movs	r2, #128	; 0x80
 801a5f2:	0552      	lsls	r2, r2, #21
 801a5f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	0018      	movs	r0, r3
 801a5fa:	f7ff ffc1 	bl	801a580 <vClearInterruptMaskFromISR>
}
 801a5fe:	46c0      	nop			; (mov r8, r8)
 801a600:	46bd      	mov	sp, r7
 801a602:	b002      	add	sp, #8
 801a604:	bd80      	pop	{r7, pc}
 801a606:	46c0      	nop			; (mov r8, r8)
 801a608:	e000ed04 	.word	0xe000ed04

0801a60c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a610:	4b0b      	ldr	r3, [pc, #44]	; (801a640 <vPortSetupTimerInterrupt+0x34>)
 801a612:	2200      	movs	r2, #0
 801a614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a616:	4b0b      	ldr	r3, [pc, #44]	; (801a644 <vPortSetupTimerInterrupt+0x38>)
 801a618:	2200      	movs	r2, #0
 801a61a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a61c:	4b0a      	ldr	r3, [pc, #40]	; (801a648 <vPortSetupTimerInterrupt+0x3c>)
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	22fa      	movs	r2, #250	; 0xfa
 801a622:	0091      	lsls	r1, r2, #2
 801a624:	0018      	movs	r0, r3
 801a626:	f7eb fde3 	bl	80061f0 <__udivsi3>
 801a62a:	0003      	movs	r3, r0
 801a62c:	001a      	movs	r2, r3
 801a62e:	4b07      	ldr	r3, [pc, #28]	; (801a64c <vPortSetupTimerInterrupt+0x40>)
 801a630:	3a01      	subs	r2, #1
 801a632:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801a634:	4b02      	ldr	r3, [pc, #8]	; (801a640 <vPortSetupTimerInterrupt+0x34>)
 801a636:	2207      	movs	r2, #7
 801a638:	601a      	str	r2, [r3, #0]
}
 801a63a:	46c0      	nop			; (mov r8, r8)
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd80      	pop	{r7, pc}
 801a640:	e000e010 	.word	0xe000e010
 801a644:	e000e018 	.word	0xe000e018
 801a648:	20000058 	.word	0x20000058
 801a64c:	e000e014 	.word	0xe000e014

0801a650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a650:	b580      	push	{r7, lr}
 801a652:	b086      	sub	sp, #24
 801a654:	af00      	add	r7, sp, #0
 801a656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a658:	2300      	movs	r3, #0
 801a65a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801a65c:	f7fe ff50 	bl	8019500 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a660:	4b4b      	ldr	r3, [pc, #300]	; (801a790 <pvPortMalloc+0x140>)
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	2b00      	cmp	r3, #0
 801a666:	d101      	bne.n	801a66c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a668:	f000 f8ec 	bl	801a844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a66c:	4b49      	ldr	r3, [pc, #292]	; (801a794 <pvPortMalloc+0x144>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	687a      	ldr	r2, [r7, #4]
 801a672:	4013      	ands	r3, r2
 801a674:	d000      	beq.n	801a678 <pvPortMalloc+0x28>
 801a676:	e07e      	b.n	801a776 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d012      	beq.n	801a6a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 801a67e:	2208      	movs	r2, #8
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	189b      	adds	r3, r3, r2
 801a684:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	2207      	movs	r2, #7
 801a68a:	4013      	ands	r3, r2
 801a68c:	d00a      	beq.n	801a6a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	2207      	movs	r2, #7
 801a692:	4393      	bics	r3, r2
 801a694:	3308      	adds	r3, #8
 801a696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	2207      	movs	r2, #7
 801a69c:	4013      	ands	r3, r2
 801a69e:	d001      	beq.n	801a6a4 <pvPortMalloc+0x54>
 801a6a0:	b672      	cpsid	i
 801a6a2:	e7fe      	b.n	801a6a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d065      	beq.n	801a776 <pvPortMalloc+0x126>
 801a6aa:	4b3b      	ldr	r3, [pc, #236]	; (801a798 <pvPortMalloc+0x148>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	687a      	ldr	r2, [r7, #4]
 801a6b0:	429a      	cmp	r2, r3
 801a6b2:	d860      	bhi.n	801a776 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a6b4:	4b39      	ldr	r3, [pc, #228]	; (801a79c <pvPortMalloc+0x14c>)
 801a6b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801a6b8:	4b38      	ldr	r3, [pc, #224]	; (801a79c <pvPortMalloc+0x14c>)
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a6be:	e004      	b.n	801a6ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 801a6c0:	697b      	ldr	r3, [r7, #20]
 801a6c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a6c4:	697b      	ldr	r3, [r7, #20]
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a6ca:	697b      	ldr	r3, [r7, #20]
 801a6cc:	685b      	ldr	r3, [r3, #4]
 801a6ce:	687a      	ldr	r2, [r7, #4]
 801a6d0:	429a      	cmp	r2, r3
 801a6d2:	d903      	bls.n	801a6dc <pvPortMalloc+0x8c>
 801a6d4:	697b      	ldr	r3, [r7, #20]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d1f1      	bne.n	801a6c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a6dc:	4b2c      	ldr	r3, [pc, #176]	; (801a790 <pvPortMalloc+0x140>)
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	697a      	ldr	r2, [r7, #20]
 801a6e2:	429a      	cmp	r2, r3
 801a6e4:	d047      	beq.n	801a776 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	2208      	movs	r2, #8
 801a6ec:	189b      	adds	r3, r3, r2
 801a6ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a6f0:	697b      	ldr	r3, [r7, #20]
 801a6f2:	681a      	ldr	r2, [r3, #0]
 801a6f4:	693b      	ldr	r3, [r7, #16]
 801a6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a6f8:	697b      	ldr	r3, [r7, #20]
 801a6fa:	685a      	ldr	r2, [r3, #4]
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	1ad2      	subs	r2, r2, r3
 801a700:	2308      	movs	r3, #8
 801a702:	005b      	lsls	r3, r3, #1
 801a704:	429a      	cmp	r2, r3
 801a706:	d916      	bls.n	801a736 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a708:	697a      	ldr	r2, [r7, #20]
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	18d3      	adds	r3, r2, r3
 801a70e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	2207      	movs	r2, #7
 801a714:	4013      	ands	r3, r2
 801a716:	d001      	beq.n	801a71c <pvPortMalloc+0xcc>
 801a718:	b672      	cpsid	i
 801a71a:	e7fe      	b.n	801a71a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a71c:	697b      	ldr	r3, [r7, #20]
 801a71e:	685a      	ldr	r2, [r3, #4]
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	1ad2      	subs	r2, r2, r3
 801a724:	68bb      	ldr	r3, [r7, #8]
 801a726:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a728:	697b      	ldr	r3, [r7, #20]
 801a72a:	687a      	ldr	r2, [r7, #4]
 801a72c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a72e:	68bb      	ldr	r3, [r7, #8]
 801a730:	0018      	movs	r0, r3
 801a732:	f000 f8e7 	bl	801a904 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a736:	4b18      	ldr	r3, [pc, #96]	; (801a798 <pvPortMalloc+0x148>)
 801a738:	681a      	ldr	r2, [r3, #0]
 801a73a:	697b      	ldr	r3, [r7, #20]
 801a73c:	685b      	ldr	r3, [r3, #4]
 801a73e:	1ad2      	subs	r2, r2, r3
 801a740:	4b15      	ldr	r3, [pc, #84]	; (801a798 <pvPortMalloc+0x148>)
 801a742:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a744:	4b14      	ldr	r3, [pc, #80]	; (801a798 <pvPortMalloc+0x148>)
 801a746:	681a      	ldr	r2, [r3, #0]
 801a748:	4b15      	ldr	r3, [pc, #84]	; (801a7a0 <pvPortMalloc+0x150>)
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	429a      	cmp	r2, r3
 801a74e:	d203      	bcs.n	801a758 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a750:	4b11      	ldr	r3, [pc, #68]	; (801a798 <pvPortMalloc+0x148>)
 801a752:	681a      	ldr	r2, [r3, #0]
 801a754:	4b12      	ldr	r3, [pc, #72]	; (801a7a0 <pvPortMalloc+0x150>)
 801a756:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a758:	697b      	ldr	r3, [r7, #20]
 801a75a:	685a      	ldr	r2, [r3, #4]
 801a75c:	4b0d      	ldr	r3, [pc, #52]	; (801a794 <pvPortMalloc+0x144>)
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	431a      	orrs	r2, r3
 801a762:	697b      	ldr	r3, [r7, #20]
 801a764:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a766:	697b      	ldr	r3, [r7, #20]
 801a768:	2200      	movs	r2, #0
 801a76a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a76c:	4b0d      	ldr	r3, [pc, #52]	; (801a7a4 <pvPortMalloc+0x154>)
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	1c5a      	adds	r2, r3, #1
 801a772:	4b0c      	ldr	r3, [pc, #48]	; (801a7a4 <pvPortMalloc+0x154>)
 801a774:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a776:	f7fe fecf 	bl	8019518 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	2207      	movs	r2, #7
 801a77e:	4013      	ands	r3, r2
 801a780:	d001      	beq.n	801a786 <pvPortMalloc+0x136>
 801a782:	b672      	cpsid	i
 801a784:	e7fe      	b.n	801a784 <pvPortMalloc+0x134>
	return pvReturn;
 801a786:	68fb      	ldr	r3, [r7, #12]
}
 801a788:	0018      	movs	r0, r3
 801a78a:	46bd      	mov	sp, r7
 801a78c:	b006      	add	sp, #24
 801a78e:	bd80      	pop	{r7, pc}
 801a790:	20002f08 	.word	0x20002f08
 801a794:	20002f1c 	.word	0x20002f1c
 801a798:	20002f0c 	.word	0x20002f0c
 801a79c:	20002f00 	.word	0x20002f00
 801a7a0:	20002f10 	.word	0x20002f10
 801a7a4:	20002f14 	.word	0x20002f14

0801a7a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b084      	sub	sp, #16
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d03a      	beq.n	801a830 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a7ba:	2308      	movs	r3, #8
 801a7bc:	425b      	negs	r3, r3
 801a7be:	68fa      	ldr	r2, [r7, #12]
 801a7c0:	18d3      	adds	r3, r2, r3
 801a7c2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a7c8:	68bb      	ldr	r3, [r7, #8]
 801a7ca:	685a      	ldr	r2, [r3, #4]
 801a7cc:	4b1a      	ldr	r3, [pc, #104]	; (801a838 <vPortFree+0x90>)
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	4013      	ands	r3, r2
 801a7d2:	d101      	bne.n	801a7d8 <vPortFree+0x30>
 801a7d4:	b672      	cpsid	i
 801a7d6:	e7fe      	b.n	801a7d6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d001      	beq.n	801a7e4 <vPortFree+0x3c>
 801a7e0:	b672      	cpsid	i
 801a7e2:	e7fe      	b.n	801a7e2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	685a      	ldr	r2, [r3, #4]
 801a7e8:	4b13      	ldr	r3, [pc, #76]	; (801a838 <vPortFree+0x90>)
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	4013      	ands	r3, r2
 801a7ee:	d01f      	beq.n	801a830 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a7f0:	68bb      	ldr	r3, [r7, #8]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d11b      	bne.n	801a830 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	685a      	ldr	r2, [r3, #4]
 801a7fc:	4b0e      	ldr	r3, [pc, #56]	; (801a838 <vPortFree+0x90>)
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	43db      	mvns	r3, r3
 801a802:	401a      	ands	r2, r3
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a808:	f7fe fe7a 	bl	8019500 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	685a      	ldr	r2, [r3, #4]
 801a810:	4b0a      	ldr	r3, [pc, #40]	; (801a83c <vPortFree+0x94>)
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	18d2      	adds	r2, r2, r3
 801a816:	4b09      	ldr	r3, [pc, #36]	; (801a83c <vPortFree+0x94>)
 801a818:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a81a:	68bb      	ldr	r3, [r7, #8]
 801a81c:	0018      	movs	r0, r3
 801a81e:	f000 f871 	bl	801a904 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a822:	4b07      	ldr	r3, [pc, #28]	; (801a840 <vPortFree+0x98>)
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	1c5a      	adds	r2, r3, #1
 801a828:	4b05      	ldr	r3, [pc, #20]	; (801a840 <vPortFree+0x98>)
 801a82a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 801a82c:	f7fe fe74 	bl	8019518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a830:	46c0      	nop			; (mov r8, r8)
 801a832:	46bd      	mov	sp, r7
 801a834:	b004      	add	sp, #16
 801a836:	bd80      	pop	{r7, pc}
 801a838:	20002f1c 	.word	0x20002f1c
 801a83c:	20002f0c 	.word	0x20002f0c
 801a840:	20002f18 	.word	0x20002f18

0801a844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a844:	b580      	push	{r7, lr}
 801a846:	b084      	sub	sp, #16
 801a848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a84a:	4b27      	ldr	r3, [pc, #156]	; (801a8e8 <prvHeapInit+0xa4>)
 801a84c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a84e:	4b27      	ldr	r3, [pc, #156]	; (801a8ec <prvHeapInit+0xa8>)
 801a850:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	2207      	movs	r2, #7
 801a856:	4013      	ands	r3, r2
 801a858:	d00c      	beq.n	801a874 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	3307      	adds	r3, #7
 801a85e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	2207      	movs	r2, #7
 801a864:	4393      	bics	r3, r2
 801a866:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a868:	68ba      	ldr	r2, [r7, #8]
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	1ad2      	subs	r2, r2, r3
 801a86e:	4b1f      	ldr	r3, [pc, #124]	; (801a8ec <prvHeapInit+0xa8>)
 801a870:	18d3      	adds	r3, r2, r3
 801a872:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a878:	4b1d      	ldr	r3, [pc, #116]	; (801a8f0 <prvHeapInit+0xac>)
 801a87a:	687a      	ldr	r2, [r7, #4]
 801a87c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a87e:	4b1c      	ldr	r3, [pc, #112]	; (801a8f0 <prvHeapInit+0xac>)
 801a880:	2200      	movs	r2, #0
 801a882:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	68ba      	ldr	r2, [r7, #8]
 801a888:	18d3      	adds	r3, r2, r3
 801a88a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a88c:	2208      	movs	r2, #8
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	1a9b      	subs	r3, r3, r2
 801a892:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	2207      	movs	r2, #7
 801a898:	4393      	bics	r3, r2
 801a89a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a89c:	68fa      	ldr	r2, [r7, #12]
 801a89e:	4b15      	ldr	r3, [pc, #84]	; (801a8f4 <prvHeapInit+0xb0>)
 801a8a0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 801a8a2:	4b14      	ldr	r3, [pc, #80]	; (801a8f4 <prvHeapInit+0xb0>)
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	2200      	movs	r2, #0
 801a8a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a8aa:	4b12      	ldr	r3, [pc, #72]	; (801a8f4 <prvHeapInit+0xb0>)
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a8b6:	683b      	ldr	r3, [r7, #0]
 801a8b8:	68fa      	ldr	r2, [r7, #12]
 801a8ba:	1ad2      	subs	r2, r2, r3
 801a8bc:	683b      	ldr	r3, [r7, #0]
 801a8be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a8c0:	4b0c      	ldr	r3, [pc, #48]	; (801a8f4 <prvHeapInit+0xb0>)
 801a8c2:	681a      	ldr	r2, [r3, #0]
 801a8c4:	683b      	ldr	r3, [r7, #0]
 801a8c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	685a      	ldr	r2, [r3, #4]
 801a8cc:	4b0a      	ldr	r3, [pc, #40]	; (801a8f8 <prvHeapInit+0xb4>)
 801a8ce:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a8d0:	683b      	ldr	r3, [r7, #0]
 801a8d2:	685a      	ldr	r2, [r3, #4]
 801a8d4:	4b09      	ldr	r3, [pc, #36]	; (801a8fc <prvHeapInit+0xb8>)
 801a8d6:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a8d8:	4b09      	ldr	r3, [pc, #36]	; (801a900 <prvHeapInit+0xbc>)
 801a8da:	2280      	movs	r2, #128	; 0x80
 801a8dc:	0612      	lsls	r2, r2, #24
 801a8de:	601a      	str	r2, [r3, #0]
}
 801a8e0:	46c0      	nop			; (mov r8, r8)
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	b004      	add	sp, #16
 801a8e6:	bd80      	pop	{r7, pc}
 801a8e8:	00001b58 	.word	0x00001b58
 801a8ec:	200013a8 	.word	0x200013a8
 801a8f0:	20002f00 	.word	0x20002f00
 801a8f4:	20002f08 	.word	0x20002f08
 801a8f8:	20002f10 	.word	0x20002f10
 801a8fc:	20002f0c 	.word	0x20002f0c
 801a900:	20002f1c 	.word	0x20002f1c

0801a904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b084      	sub	sp, #16
 801a908:	af00      	add	r7, sp, #0
 801a90a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a90c:	4b27      	ldr	r3, [pc, #156]	; (801a9ac <prvInsertBlockIntoFreeList+0xa8>)
 801a90e:	60fb      	str	r3, [r7, #12]
 801a910:	e002      	b.n	801a918 <prvInsertBlockIntoFreeList+0x14>
 801a912:	68fb      	ldr	r3, [r7, #12]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	60fb      	str	r3, [r7, #12]
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	687a      	ldr	r2, [r7, #4]
 801a91e:	429a      	cmp	r2, r3
 801a920:	d8f7      	bhi.n	801a912 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	685b      	ldr	r3, [r3, #4]
 801a92a:	68ba      	ldr	r2, [r7, #8]
 801a92c:	18d3      	adds	r3, r2, r3
 801a92e:	687a      	ldr	r2, [r7, #4]
 801a930:	429a      	cmp	r2, r3
 801a932:	d108      	bne.n	801a946 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	685a      	ldr	r2, [r3, #4]
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	685b      	ldr	r3, [r3, #4]
 801a93c:	18d2      	adds	r2, r2, r3
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	685b      	ldr	r3, [r3, #4]
 801a94e:	68ba      	ldr	r2, [r7, #8]
 801a950:	18d2      	adds	r2, r2, r3
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	429a      	cmp	r2, r3
 801a958:	d118      	bne.n	801a98c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a95a:	68fb      	ldr	r3, [r7, #12]
 801a95c:	681a      	ldr	r2, [r3, #0]
 801a95e:	4b14      	ldr	r3, [pc, #80]	; (801a9b0 <prvInsertBlockIntoFreeList+0xac>)
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	429a      	cmp	r2, r3
 801a964:	d00d      	beq.n	801a982 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	685a      	ldr	r2, [r3, #4]
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	685b      	ldr	r3, [r3, #4]
 801a970:	18d2      	adds	r2, r2, r3
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	681a      	ldr	r2, [r3, #0]
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	601a      	str	r2, [r3, #0]
 801a980:	e008      	b.n	801a994 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a982:	4b0b      	ldr	r3, [pc, #44]	; (801a9b0 <prvInsertBlockIntoFreeList+0xac>)
 801a984:	681a      	ldr	r2, [r3, #0]
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	601a      	str	r2, [r3, #0]
 801a98a:	e003      	b.n	801a994 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	681a      	ldr	r2, [r3, #0]
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a994:	68fa      	ldr	r2, [r7, #12]
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	429a      	cmp	r2, r3
 801a99a:	d002      	beq.n	801a9a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	687a      	ldr	r2, [r7, #4]
 801a9a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a9a2:	46c0      	nop			; (mov r8, r8)
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	b004      	add	sp, #16
 801a9a8:	bd80      	pop	{r7, pc}
 801a9aa:	46c0      	nop			; (mov r8, r8)
 801a9ac:	20002f00 	.word	0x20002f00
 801a9b0:	20002f08 	.word	0x20002f08

0801a9b4 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 801a9b4:	b580      	push	{r7, lr}
 801a9b6:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 801a9b8:	f7f9 fe3a 	bl	8014630 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 801a9bc:	f000 f830 	bl	801aa20 <USBPD_DPM_InitCore>
 801a9c0:	1e03      	subs	r3, r0, #0
 801a9c2:	d000      	beq.n	801a9c6 <MX_USBPD_Init+0x12>
  {
    while(1);
 801a9c4:	e7fe      	b.n	801a9c4 <MX_USBPD_Init+0x10>
  }

  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 801a9c6:	4b0a      	ldr	r3, [pc, #40]	; (801a9f0 <MX_USBPD_Init+0x3c>)
 801a9c8:	4a0a      	ldr	r2, [pc, #40]	; (801a9f4 <MX_USBPD_Init+0x40>)
 801a9ca:	490b      	ldr	r1, [pc, #44]	; (801a9f8 <MX_USBPD_Init+0x44>)
 801a9cc:	480b      	ldr	r0, [pc, #44]	; (801a9fc <MX_USBPD_Init+0x48>)
 801a9ce:	f004 fcf3 	bl	801f3b8 <GUI_Init>

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 801a9d2:	f000 fb7d 	bl	801b0d0 <USBPD_DPM_UserInit>
 801a9d6:	1e03      	subs	r3, r0, #0
 801a9d8:	d000      	beq.n	801a9dc <MX_USBPD_Init+0x28>
  {
    while(1);
 801a9da:	e7fe      	b.n	801a9da <MX_USBPD_Init+0x26>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 801a9dc:	f000 f8f8 	bl	801abd0 <USBPD_DPM_InitOS>
 801a9e0:	1e03      	subs	r3, r0, #0
 801a9e2:	d000      	beq.n	801a9e6 <MX_USBPD_Init+0x32>
  {
    while(1);
 801a9e4:	e7fe      	b.n	801a9e4 <MX_USBPD_Init+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 801a9e6:	b662      	cpsie	i
}
 801a9e8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801a9ea:	46c0      	nop			; (mov r8, r8)
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}
 801a9f0:	08015315 	.word	0x08015315
 801a9f4:	080152ed 	.word	0x080152ed
 801a9f8:	0801aa11 	.word	0x0801aa11
 801a9fc:	0801aa01 	.word	0x0801aa01

0801aa00 <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
__weak const uint8_t* BSP_GetBoardName(void)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_NAME;
 801aa04:	4b01      	ldr	r3, [pc, #4]	; (801aa0c <BSP_GetBoardName+0xc>)
}
 801aa06:	0018      	movs	r0, r3
 801aa08:	46bd      	mov	sp, r7
 801aa0a:	bd80      	pop	{r7, pc}
 801aa0c:	08024130 	.word	0x08024130

0801aa10 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
__weak const uint8_t* BSP_GetBoardID(void)
{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_ID;
 801aa14:	4b01      	ldr	r3, [pc, #4]	; (801aa1c <BSP_GetBoardID+0xc>)
}
 801aa16:	0018      	movs	r0, r3
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bd80      	pop	{r7, pc}
 801aa1c:	0802413c 	.word	0x0802413c

0801aa20 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 801aa20:	b5b0      	push	{r4, r5, r7, lr}
 801aa22:	b082      	sub	sp, #8
 801aa24:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801aa26:	1dfb      	adds	r3, r7, #7
 801aa28:	2200      	movs	r2, #0
 801aa2a:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 801aa2c:	4b63      	ldr	r3, [pc, #396]	; (801abbc <USBPD_DPM_InitCore+0x19c>)
 801aa2e:	0018      	movs	r0, r3
 801aa30:	f7e6 fd54 	bl	80014dc <USBPD_PE_CheckLIB>
 801aa34:	0003      	movs	r3, r0
 801aa36:	2b01      	cmp	r3, #1
 801aa38:	d003      	beq.n	801aa42 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 801aa3a:	1dfb      	adds	r3, r7, #7
 801aa3c:	2202      	movs	r2, #2
 801aa3e:	701a      	strb	r2, [r3, #0]
    goto error;
 801aa40:	e0b6      	b.n	801abb0 <USBPD_DPM_InitCore+0x190>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801aa42:	f7e6 fd59 	bl	80014f8 <USBPD_PE_GetMemoryConsumption>
 801aa46:	0003      	movs	r3, r0
 801aa48:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 801aa4a:	f7f7 ffc3 	bl	80129d4 <USBPD_TRACE_Init>

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801aa4e:	1dbb      	adds	r3, r7, #6
 801aa50:	2200      	movs	r2, #0
 801aa52:	701a      	strb	r2, [r3, #0]
 801aa54:	e0a6      	b.n	801aba4 <USBPD_DPM_InitCore+0x184>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801aa56:	1dbb      	adds	r3, r7, #6
 801aa58:	781b      	ldrb	r3, [r3, #0]
 801aa5a:	4a59      	ldr	r2, [pc, #356]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801aa5c:	009b      	lsls	r3, r3, #2
 801aa5e:	18d3      	adds	r3, r2, r3
 801aa60:	785a      	ldrb	r2, [r3, #1]
 801aa62:	2108      	movs	r1, #8
 801aa64:	438a      	bics	r2, r1
 801aa66:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801aa68:	1dbb      	adds	r3, r7, #6
 801aa6a:	781a      	ldrb	r2, [r3, #0]
 801aa6c:	1dbb      	adds	r3, r7, #6
 801aa6e:	7818      	ldrb	r0, [r3, #0]
 801aa70:	4954      	ldr	r1, [pc, #336]	; (801abc4 <USBPD_DPM_InitCore+0x1a4>)
 801aa72:	0013      	movs	r3, r2
 801aa74:	005b      	lsls	r3, r3, #1
 801aa76:	189b      	adds	r3, r3, r2
 801aa78:	009b      	lsls	r3, r3, #2
 801aa7a:	18cb      	adds	r3, r1, r3
 801aa7c:	791b      	ldrb	r3, [r3, #4]
 801aa7e:	079b      	lsls	r3, r3, #30
 801aa80:	0f9b      	lsrs	r3, r3, #30
 801aa82:	b2d9      	uxtb	r1, r3
 801aa84:	4b4e      	ldr	r3, [pc, #312]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801aa86:	0082      	lsls	r2, r0, #2
 801aa88:	2003      	movs	r0, #3
 801aa8a:	4001      	ands	r1, r0
 801aa8c:	000c      	movs	r4, r1
 801aa8e:	5cd1      	ldrb	r1, [r2, r3]
 801aa90:	2003      	movs	r0, #3
 801aa92:	4381      	bics	r1, r0
 801aa94:	1c08      	adds	r0, r1, #0
 801aa96:	1c21      	adds	r1, r4, #0
 801aa98:	4301      	orrs	r1, r0
 801aa9a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801aa9c:	1dbb      	adds	r3, r7, #6
 801aa9e:	781a      	ldrb	r2, [r3, #0]
 801aaa0:	1dbb      	adds	r3, r7, #6
 801aaa2:	7818      	ldrb	r0, [r3, #0]
 801aaa4:	4947      	ldr	r1, [pc, #284]	; (801abc4 <USBPD_DPM_InitCore+0x1a4>)
 801aaa6:	0013      	movs	r3, r2
 801aaa8:	005b      	lsls	r3, r3, #1
 801aaaa:	189b      	adds	r3, r3, r2
 801aaac:	009b      	lsls	r3, r3, #2
 801aaae:	18cb      	adds	r3, r1, r3
 801aab0:	791b      	ldrb	r3, [r3, #4]
 801aab2:	075b      	lsls	r3, r3, #29
 801aab4:	0fdb      	lsrs	r3, r3, #31
 801aab6:	b2d9      	uxtb	r1, r3
 801aab8:	4b41      	ldr	r3, [pc, #260]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801aaba:	0082      	lsls	r2, r0, #2
 801aabc:	2001      	movs	r0, #1
 801aabe:	4001      	ands	r1, r0
 801aac0:	008c      	lsls	r4, r1, #2
 801aac2:	5cd1      	ldrb	r1, [r2, r3]
 801aac4:	2004      	movs	r0, #4
 801aac6:	4381      	bics	r1, r0
 801aac8:	1c08      	adds	r0, r1, #0
 801aaca:	1c21      	adds	r1, r4, #0
 801aacc:	4301      	orrs	r1, r0
 801aace:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801aad0:	1dbb      	adds	r3, r7, #6
 801aad2:	781a      	ldrb	r2, [r3, #0]
 801aad4:	4b3a      	ldr	r3, [pc, #232]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801aad6:	0092      	lsls	r2, r2, #2
 801aad8:	5cd1      	ldrb	r1, [r2, r3]
 801aada:	2010      	movs	r0, #16
 801aadc:	4381      	bics	r1, r0
 801aade:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801aae0:	1dbb      	adds	r3, r7, #6
 801aae2:	781a      	ldrb	r2, [r3, #0]
 801aae4:	4b36      	ldr	r3, [pc, #216]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801aae6:	0092      	lsls	r2, r2, #2
 801aae8:	5cd1      	ldrb	r1, [r2, r3]
 801aaea:	203f      	movs	r0, #63	; 0x3f
 801aaec:	4001      	ands	r1, r0
 801aaee:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801aaf0:	1dbb      	adds	r3, r7, #6
 801aaf2:	781b      	ldrb	r3, [r3, #0]
 801aaf4:	4a32      	ldr	r2, [pc, #200]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801aaf6:	009b      	lsls	r3, r3, #2
 801aaf8:	18d3      	adds	r3, r2, r3
 801aafa:	785a      	ldrb	r2, [r3, #1]
 801aafc:	2160      	movs	r1, #96	; 0x60
 801aafe:	438a      	bics	r2, r1
 801ab00:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 801ab02:	1dbb      	adds	r3, r7, #6
 801ab04:	781b      	ldrb	r3, [r3, #0]
 801ab06:	4a2e      	ldr	r2, [pc, #184]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801ab08:	009b      	lsls	r3, r3, #2
 801ab0a:	18d3      	adds	r3, r2, r3
 801ab0c:	785a      	ldrb	r2, [r3, #1]
 801ab0e:	217f      	movs	r1, #127	; 0x7f
 801ab10:	400a      	ands	r2, r1
 801ab12:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 801ab14:	1dbb      	adds	r3, r7, #6
 801ab16:	781a      	ldrb	r2, [r3, #0]
 801ab18:	0013      	movs	r3, r2
 801ab1a:	005b      	lsls	r3, r3, #1
 801ab1c:	189b      	adds	r3, r3, r2
 801ab1e:	009b      	lsls	r3, r3, #2
 801ab20:	4a28      	ldr	r2, [pc, #160]	; (801abc4 <USBPD_DPM_InitCore+0x1a4>)
 801ab22:	189c      	adds	r4, r3, r2
 801ab24:	1dbb      	adds	r3, r7, #6
 801ab26:	781b      	ldrb	r3, [r3, #0]
 801ab28:	009a      	lsls	r2, r3, #2
 801ab2a:	4b25      	ldr	r3, [pc, #148]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801ab2c:	18d2      	adds	r2, r2, r3
 801ab2e:	4926      	ldr	r1, [pc, #152]	; (801abc8 <USBPD_DPM_InitCore+0x1a8>)
 801ab30:	1dbb      	adds	r3, r7, #6
 801ab32:	7818      	ldrb	r0, [r3, #0]
 801ab34:	0013      	movs	r3, r2
 801ab36:	0022      	movs	r2, r4
 801ab38:	f7e5 fae6 	bl	8000108 <USBPD_CAD_Init>
 801ab3c:	1e03      	subs	r3, r0, #0
 801ab3e:	d003      	beq.n	801ab48 <USBPD_DPM_InitCore+0x128>
 801ab40:	1dfb      	adds	r3, r7, #7
 801ab42:	2202      	movs	r2, #2
 801ab44:	701a      	strb	r2, [r3, #0]
 801ab46:	e033      	b.n	801abb0 <USBPD_DPM_InitCore+0x190>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 801ab48:	1dbb      	adds	r3, r7, #6
 801ab4a:	781a      	ldrb	r2, [r3, #0]
 801ab4c:	0013      	movs	r3, r2
 801ab4e:	005b      	lsls	r3, r3, #1
 801ab50:	189b      	adds	r3, r3, r2
 801ab52:	009b      	lsls	r3, r3, #2
 801ab54:	4a1b      	ldr	r2, [pc, #108]	; (801abc4 <USBPD_DPM_InitCore+0x1a4>)
 801ab56:	1899      	adds	r1, r3, r2
 801ab58:	1dbb      	adds	r3, r7, #6
 801ab5a:	781b      	ldrb	r3, [r3, #0]
 801ab5c:	009a      	lsls	r2, r3, #2
 801ab5e:	4b18      	ldr	r3, [pc, #96]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801ab60:	18d2      	adds	r2, r2, r3
 801ab62:	1dfc      	adds	r4, r7, #7
 801ab64:	4d19      	ldr	r5, [pc, #100]	; (801abcc <USBPD_DPM_InitCore+0x1ac>)
 801ab66:	1dbb      	adds	r3, r7, #6
 801ab68:	7818      	ldrb	r0, [r3, #0]
 801ab6a:	002b      	movs	r3, r5
 801ab6c:	f7e5 fbaa 	bl	80002c4 <USBPD_PE_Init>
 801ab70:	0003      	movs	r3, r0
 801ab72:	7023      	strb	r3, [r4, #0]
 801ab74:	1dfb      	adds	r3, r7, #7
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d119      	bne.n	801abb0 <USBPD_DPM_InitCore+0x190>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801ab7c:	1dbb      	adds	r3, r7, #6
 801ab7e:	781b      	ldrb	r3, [r3, #0]
 801ab80:	4a0f      	ldr	r2, [pc, #60]	; (801abc0 <USBPD_DPM_InitCore+0x1a0>)
 801ab82:	009b      	lsls	r3, r3, #2
 801ab84:	18d3      	adds	r3, r2, r3
 801ab86:	785a      	ldrb	r2, [r3, #1]
 801ab88:	2108      	movs	r1, #8
 801ab8a:	430a      	orrs	r2, r1
 801ab8c:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801ab8e:	1dbb      	adds	r3, r7, #6
 801ab90:	781b      	ldrb	r3, [r3, #0]
 801ab92:	2101      	movs	r1, #1
 801ab94:	0018      	movs	r0, r3
 801ab96:	f7e5 fae4 	bl	8000162 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801ab9a:	1dbb      	adds	r3, r7, #6
 801ab9c:	1dba      	adds	r2, r7, #6
 801ab9e:	7812      	ldrb	r2, [r2, #0]
 801aba0:	3201      	adds	r2, #1
 801aba2:	701a      	strb	r2, [r3, #0]
 801aba4:	1dbb      	adds	r3, r7, #6
 801aba6:	781b      	ldrb	r3, [r3, #0]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d100      	bne.n	801abae <USBPD_DPM_InitCore+0x18e>
 801abac:	e753      	b.n	801aa56 <USBPD_DPM_InitCore+0x36>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 801abae:	46c0      	nop			; (mov r8, r8)
  return _retr;
 801abb0:	1dfb      	adds	r3, r7, #7
 801abb2:	781b      	ldrb	r3, [r3, #0]
}
 801abb4:	0018      	movs	r0, r3
 801abb6:	46bd      	mov	sp, r7
 801abb8:	b002      	add	sp, #8
 801abba:	bdb0      	pop	{r4, r5, r7, pc}
 801abbc:	30410000 	.word	0x30410000
 801abc0:	20002f30 	.word	0x20002f30
 801abc4:	200000f4 	.word	0x200000f4
 801abc8:	08025154 	.word	0x08025154
 801abcc:	0802515c 	.word	0x0802515c

0801abd0 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 801abd0:	b590      	push	{r4, r7, lr}
 801abd2:	b08d      	sub	sp, #52	; 0x34
 801abd4:	af00      	add	r7, sp, #0
  OS_INIT();
 801abd6:	242f      	movs	r4, #47	; 0x2f
 801abd8:	193b      	adds	r3, r7, r4
 801abda:	2200      	movs	r2, #0
 801abdc:	701a      	strb	r2, [r3, #0]
  {
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 801abde:	2200      	movs	r2, #0
 801abe0:	2102      	movs	r1, #2
 801abe2:	2001      	movs	r0, #1
 801abe4:	f7fd fa5c 	bl	80180a0 <osMessageQueueNew>
 801abe8:	0002      	movs	r2, r0
 801abea:	4b32      	ldr	r3, [pc, #200]	; (801acb4 <USBPD_DPM_InitOS+0xe4>)
 801abec:	601a      	str	r2, [r3, #0]
    OS_DEFINE_TASK(CAD, USBPD_CAD_Task, OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, NULL);
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 801abee:	1d3b      	adds	r3, r7, #4
 801abf0:	0018      	movs	r0, r3
 801abf2:	2324      	movs	r3, #36	; 0x24
 801abf4:	001a      	movs	r2, r3
 801abf6:	2100      	movs	r1, #0
 801abf8:	f008 fd68 	bl	80236cc <memset>
 801abfc:	1d3b      	adds	r3, r7, #4
 801abfe:	4a2e      	ldr	r2, [pc, #184]	; (801acb8 <USBPD_DPM_InitOS+0xe8>)
 801ac00:	601a      	str	r2, [r3, #0]
 801ac02:	1d3b      	adds	r3, r7, #4
 801ac04:	2296      	movs	r2, #150	; 0x96
 801ac06:	00d2      	lsls	r2, r2, #3
 801ac08:	615a      	str	r2, [r3, #20]
 801ac0a:	1d3b      	adds	r3, r7, #4
 801ac0c:	2230      	movs	r2, #48	; 0x30
 801ac0e:	619a      	str	r2, [r3, #24]
 801ac10:	1d3a      	adds	r2, r7, #4
 801ac12:	4b2a      	ldr	r3, [pc, #168]	; (801acbc <USBPD_DPM_InitOS+0xec>)
 801ac14:	2100      	movs	r1, #0
 801ac16:	0018      	movs	r0, r3
 801ac18:	f7fd f940 	bl	8017e9c <osThreadNew>
 801ac1c:	0002      	movs	r2, r0
 801ac1e:	4b28      	ldr	r3, [pc, #160]	; (801acc0 <USBPD_DPM_InitOS+0xf0>)
 801ac20:	601a      	str	r2, [r3, #0]
 801ac22:	4b27      	ldr	r3, [pc, #156]	; (801acc0 <USBPD_DPM_InitOS+0xf0>)
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d103      	bne.n	801ac32 <USBPD_DPM_InitOS+0x62>
 801ac2a:	193b      	adds	r3, r7, r4
 801ac2c:	2202      	movs	r2, #2
 801ac2e:	701a      	strb	r2, [r3, #0]
 801ac30:	e039      	b.n	801aca6 <USBPD_DPM_InitOS+0xd6>
  }

  /* Create the queue corresponding to PE task */
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 801ac32:	2300      	movs	r3, #0
 801ac34:	62bb      	str	r3, [r7, #40]	; 0x28
 801ac36:	e032      	b.n	801ac9e <USBPD_DPM_InitOS+0xce>
  {
    OS_CREATE_QUEUE(PEQueueId[index], "QPE", 1, OS_ELEMENT_SIZE);
 801ac38:	2200      	movs	r2, #0
 801ac3a:	2102      	movs	r1, #2
 801ac3c:	2001      	movs	r0, #1
 801ac3e:	f7fd fa2f 	bl	80180a0 <osMessageQueueNew>
 801ac42:	0001      	movs	r1, r0
 801ac44:	4b1f      	ldr	r3, [pc, #124]	; (801acc4 <USBPD_DPM_InitOS+0xf4>)
 801ac46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ac48:	0092      	lsls	r2, r2, #2
 801ac4a:	50d1      	str	r1, [r2, r3]

    if (index == USBPD_PORT_0)
 801ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d122      	bne.n	801ac98 <USBPD_DPM_InitOS+0xc8>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_0, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_0);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_0], PE_0, USBPD_PE_Task,
 801ac52:	1d3b      	adds	r3, r7, #4
 801ac54:	0018      	movs	r0, r3
 801ac56:	2324      	movs	r3, #36	; 0x24
 801ac58:	001a      	movs	r2, r3
 801ac5a:	2100      	movs	r1, #0
 801ac5c:	f008 fd36 	bl	80236cc <memset>
 801ac60:	1d3b      	adds	r3, r7, #4
 801ac62:	4a19      	ldr	r2, [pc, #100]	; (801acc8 <USBPD_DPM_InitOS+0xf8>)
 801ac64:	601a      	str	r2, [r3, #0]
 801ac66:	1d3b      	adds	r3, r7, #4
 801ac68:	22af      	movs	r2, #175	; 0xaf
 801ac6a:	00d2      	lsls	r2, r2, #3
 801ac6c:	615a      	str	r2, [r3, #20]
 801ac6e:	1d3b      	adds	r3, r7, #4
 801ac70:	2220      	movs	r2, #32
 801ac72:	619a      	str	r2, [r3, #24]
 801ac74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ac76:	1d3a      	adds	r2, r7, #4
 801ac78:	4b14      	ldr	r3, [pc, #80]	; (801accc <USBPD_DPM_InitOS+0xfc>)
 801ac7a:	0018      	movs	r0, r3
 801ac7c:	f7fd f90e 	bl	8017e9c <osThreadNew>
 801ac80:	0002      	movs	r2, r0
 801ac82:	4b13      	ldr	r3, [pc, #76]	; (801acd0 <USBPD_DPM_InitOS+0x100>)
 801ac84:	601a      	str	r2, [r3, #0]
 801ac86:	4b12      	ldr	r3, [pc, #72]	; (801acd0 <USBPD_DPM_InitOS+0x100>)
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d104      	bne.n	801ac98 <USBPD_DPM_InitOS+0xc8>
 801ac8e:	232f      	movs	r3, #47	; 0x2f
 801ac90:	18fb      	adds	r3, r7, r3
 801ac92:	2202      	movs	r2, #2
 801ac94:	701a      	strb	r2, [r3, #0]
 801ac96:	e006      	b.n	801aca6 <USBPD_DPM_InitOS+0xd6>
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 801ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac9a:	3301      	adds	r3, #1
 801ac9c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d0c9      	beq.n	801ac38 <USBPD_DPM_InitOS+0x68>
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_1], PE_1, USBPD_PE_Task,
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#endif /* USBPD_PORT_COUNT > 1*/
  }
error:
 801aca4:	46c0      	nop			; (mov r8, r8)

  return _retr;
 801aca6:	232f      	movs	r3, #47	; 0x2f
 801aca8:	18fb      	adds	r3, r7, r3
 801acaa:	781b      	ldrb	r3, [r3, #0]
}
 801acac:	0018      	movs	r0, r3
 801acae:	46bd      	mov	sp, r7
 801acb0:	b00d      	add	sp, #52	; 0x34
 801acb2:	bd90      	pop	{r4, r7, pc}
 801acb4:	20002f24 	.word	0x20002f24
 801acb8:	08024144 	.word	0x08024144
 801acbc:	0801adc9 	.word	0x0801adc9
 801acc0:	20002f28 	.word	0x20002f28
 801acc4:	20002f2c 	.word	0x20002f2c
 801acc8:	08024148 	.word	0x08024148
 801accc:	0801ad65 	.word	0x0801ad65
 801acd0:	20002f20 	.word	0x20002f20

0801acd4 <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 801acd8:	4b09      	ldr	r3, [pc, #36]	; (801ad00 <USBPD_DPM_TimerCounter+0x2c>)
 801acda:	785b      	ldrb	r3, [r3, #1]
 801acdc:	2208      	movs	r2, #8
 801acde:	4013      	ands	r3, r2
 801ace0:	b2db      	uxtb	r3, r3
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d008      	beq.n	801acf8 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 801ace6:	2000      	movs	r0, #0
 801ace8:	f000 fa6e 	bl	801b1c8 <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 801acec:	2000      	movs	r0, #0
 801acee:	f7e5 fb46 	bl	800037e <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 801acf2:	2000      	movs	r0, #0
 801acf4:	f7ea fc98 	bl	8005628 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 801acf8:	46c0      	nop			; (mov r8, r8)
 801acfa:	46bd      	mov	sp, r7
 801acfc:	bd80      	pop	{r7, pc}
 801acfe:	46c0      	nop			; (mov r8, r8)
 801ad00:	20002f30 	.word	0x20002f30

0801ad04 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801ad04:	b580      	push	{r7, lr}
 801ad06:	b084      	sub	sp, #16
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	0002      	movs	r2, r0
 801ad0c:	1dfb      	adds	r3, r7, #7
 801ad0e:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 801ad10:	4b08      	ldr	r3, [pc, #32]	; (801ad34 <USBPD_PE_TaskWakeUp+0x30>)
 801ad12:	60fb      	str	r3, [r7, #12]
 801ad14:	1dfb      	adds	r3, r7, #7
 801ad16:	781a      	ldrb	r2, [r3, #0]
 801ad18:	4b07      	ldr	r3, [pc, #28]	; (801ad38 <USBPD_PE_TaskWakeUp+0x34>)
 801ad1a:	0092      	lsls	r2, r2, #2
 801ad1c:	58d0      	ldr	r0, [r2, r3]
 801ad1e:	230c      	movs	r3, #12
 801ad20:	18f9      	adds	r1, r7, r3
 801ad22:	2300      	movs	r3, #0
 801ad24:	2200      	movs	r2, #0
 801ad26:	f7fd fa35 	bl	8018194 <osMessageQueuePut>
}
 801ad2a:	46c0      	nop			; (mov r8, r8)
 801ad2c:	46bd      	mov	sp, r7
 801ad2e:	b004      	add	sp, #16
 801ad30:	bd80      	pop	{r7, pc}
 801ad32:	46c0      	nop			; (mov r8, r8)
 801ad34:	0000ffff 	.word	0x0000ffff
 801ad38:	20002f2c 	.word	0x20002f2c

0801ad3c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b082      	sub	sp, #8
 801ad40:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 801ad42:	4b06      	ldr	r3, [pc, #24]	; (801ad5c <USBPD_DPM_CADTaskWakeUp+0x20>)
 801ad44:	607b      	str	r3, [r7, #4]
 801ad46:	4b06      	ldr	r3, [pc, #24]	; (801ad60 <USBPD_DPM_CADTaskWakeUp+0x24>)
 801ad48:	6818      	ldr	r0, [r3, #0]
 801ad4a:	1d39      	adds	r1, r7, #4
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	2200      	movs	r2, #0
 801ad50:	f7fd fa20 	bl	8018194 <osMessageQueuePut>
}
 801ad54:	46c0      	nop			; (mov r8, r8)
 801ad56:	46bd      	mov	sp, r7
 801ad58:	b002      	add	sp, #8
 801ad5a:	bd80      	pop	{r7, pc}
 801ad5c:	0000ffff 	.word	0x0000ffff
 801ad60:	20002f24 	.word	0x20002f24

0801ad64 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_PE_Task)
{
 801ad64:	b590      	push	{r4, r7, lr}
 801ad66:	b087      	sub	sp, #28
 801ad68:	af00      	add	r7, sp, #0
 801ad6a:	6078      	str	r0, [r7, #4]
  uint8_t _port = (uint32_t)argument;
 801ad6c:	687a      	ldr	r2, [r7, #4]
 801ad6e:	2317      	movs	r3, #23
 801ad70:	18fb      	adds	r3, r7, r3
 801ad72:	701a      	strb	r2, [r3, #0]
  UTIL_LPM_SetOffMode(0 == _port ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

  for (;;)
  {
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 801ad74:	2317      	movs	r3, #23
 801ad76:	18fb      	adds	r3, r7, r3
 801ad78:	781b      	ldrb	r3, [r3, #0]
 801ad7a:	4a11      	ldr	r2, [pc, #68]	; (801adc0 <USBPD_PE_Task+0x5c>)
 801ad7c:	009b      	lsls	r3, r3, #2
 801ad7e:	18d3      	adds	r3, r2, r3
 801ad80:	785b      	ldrb	r3, [r3, #1]
 801ad82:	06db      	lsls	r3, r3, #27
 801ad84:	0fdb      	lsrs	r3, r3, #31
 801ad86:	b2db      	uxtb	r3, r3
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d105      	bne.n	801ad98 <USBPD_PE_Task+0x34>
    {
      /* if the port is no more connected, suspend the PE thread */
      OS_TASK_SUSPEND(OS_TASK_GETID());
 801ad8c:	f7fd f91c 	bl	8017fc8 <osThreadGetId>
 801ad90:	0003      	movs	r3, r0
 801ad92:	0018      	movs	r0, r3
 801ad94:	f7fd f924 	bl	8017fe0 <osThreadSuspend>
    }

    _timing = USBPD_PE_StateMachine_SNK(_port);
 801ad98:	2417      	movs	r4, #23
 801ad9a:	193b      	adds	r3, r7, r4
 801ad9c:	781b      	ldrb	r3, [r3, #0]
 801ad9e:	0018      	movs	r0, r3
 801ada0:	f7e7 f842 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 801ada4:	0003      	movs	r3, r0
 801ada6:	613b      	str	r3, [r7, #16]
 /* _DRP || ( _SRC && _SNK) */

    OS_GETMESSAGE_QUEUE(PEQueueId[_port], _timing);
 801ada8:	193b      	adds	r3, r7, r4
 801adaa:	781a      	ldrb	r2, [r3, #0]
 801adac:	4b05      	ldr	r3, [pc, #20]	; (801adc4 <USBPD_PE_Task+0x60>)
 801adae:	0092      	lsls	r2, r2, #2
 801adb0:	58d0      	ldr	r0, [r2, r3]
 801adb2:	693b      	ldr	r3, [r7, #16]
 801adb4:	220c      	movs	r2, #12
 801adb6:	18b9      	adds	r1, r7, r2
 801adb8:	2200      	movs	r2, #0
 801adba:	f7fd fa47 	bl	801824c <osMessageQueueGet>
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 801adbe:	e7d9      	b.n	801ad74 <USBPD_PE_Task+0x10>
 801adc0:	20002f30 	.word	0x20002f30
 801adc4:	20002f2c 	.word	0x20002f2c

0801adc8 <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	b084      	sub	sp, #16
 801adcc:	af00      	add	r7, sp, #0
 801adce:	6078      	str	r0, [r7, #4]
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 801add0:	f7e5 f9ce 	bl	8000170 <USBPD_CAD_Process>
 801add4:	0003      	movs	r3, r0
 801add6:	60fb      	str	r3, [r7, #12]
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 801add8:	4b04      	ldr	r3, [pc, #16]	; (801adec <USBPD_CAD_Task+0x24>)
 801adda:	6818      	ldr	r0, [r3, #0]
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	2208      	movs	r2, #8
 801ade0:	18b9      	adds	r1, r7, r2
 801ade2:	2200      	movs	r2, #0
 801ade4:	f7fd fa32 	bl	801824c <osMessageQueueGet>
    _timing = USBPD_CAD_Process();
 801ade8:	e7f2      	b.n	801add0 <USBPD_CAD_Task+0x8>
 801adea:	46c0      	nop			; (mov r8, r8)
 801adec:	20002f24 	.word	0x20002f24

0801adf0 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b086      	sub	sp, #24
 801adf4:	af02      	add	r7, sp, #8
 801adf6:	603a      	str	r2, [r7, #0]
 801adf8:	1dfb      	adds	r3, r7, #7
 801adfa:	1c02      	adds	r2, r0, #0
 801adfc:	701a      	strb	r2, [r3, #0]
 801adfe:	1dbb      	adds	r3, r7, #6
 801ae00:	1c0a      	adds	r2, r1, #0
 801ae02:	701a      	strb	r2, [r3, #0]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 801ae04:	1dbb      	adds	r3, r7, #6
 801ae06:	781a      	ldrb	r2, [r3, #0]
 801ae08:	1dfb      	adds	r3, r7, #7
 801ae0a:	7819      	ldrb	r1, [r3, #0]
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	9300      	str	r3, [sp, #0]
 801ae10:	2300      	movs	r3, #0
 801ae12:	2003      	movs	r0, #3
 801ae14:	f7f7 fdf4 	bl	8012a00 <USBPD_TRACE_Add>
 /* _TRACE */
  (void)(Cc);
  switch (State)
 801ae18:	1dbb      	adds	r3, r7, #6
 801ae1a:	781b      	ldrb	r3, [r3, #0]
 801ae1c:	2b04      	cmp	r3, #4
 801ae1e:	d009      	beq.n	801ae34 <USBPD_DPM_CADCallback+0x44>
 801ae20:	dd00      	ble.n	801ae24 <USBPD_DPM_CADCallback+0x34>
 801ae22:	e06f      	b.n	801af04 <USBPD_DPM_CADCallback+0x114>
 801ae24:	2b03      	cmp	r3, #3
 801ae26:	d01d      	beq.n	801ae64 <USBPD_DPM_CADCallback+0x74>
 801ae28:	dc6c      	bgt.n	801af04 <USBPD_DPM_CADCallback+0x114>
 801ae2a:	2b01      	cmp	r3, #1
 801ae2c:	d01a      	beq.n	801ae64 <USBPD_DPM_CADCallback+0x74>
 801ae2e:	2b02      	cmp	r3, #2
 801ae30:	d00c      	beq.n	801ae4c <USBPD_DPM_CADCallback+0x5c>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 801ae32:	e067      	b.n	801af04 <USBPD_DPM_CADCallback+0x114>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 801ae34:	1dfb      	adds	r3, r7, #7
 801ae36:	781b      	ldrb	r3, [r3, #0]
 801ae38:	2104      	movs	r1, #4
 801ae3a:	0018      	movs	r0, r3
 801ae3c:	f000 f96a 	bl	801b114 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801ae40:	1dfb      	adds	r3, r7, #7
 801ae42:	781b      	ldrb	r3, [r3, #0]
 801ae44:	0018      	movs	r0, r3
 801ae46:	f000 f867 	bl	801af18 <DPM_StartPETask>
      break;
 801ae4a:	e05c      	b.n	801af06 <USBPD_DPM_CADCallback+0x116>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 801ae4c:	1dfb      	adds	r3, r7, #7
 801ae4e:	781b      	ldrb	r3, [r3, #0]
 801ae50:	2102      	movs	r1, #2
 801ae52:	0018      	movs	r0, r3
 801ae54:	f000 f95e 	bl	801b114 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801ae58:	1dfb      	adds	r3, r7, #7
 801ae5a:	781b      	ldrb	r3, [r3, #0]
 801ae5c:	0018      	movs	r0, r3
 801ae5e:	f000 f85b 	bl	801af18 <DPM_StartPETask>
      break;
 801ae62:	e050      	b.n	801af06 <USBPD_DPM_CADCallback+0x116>
      uint8_t _timeout = 0;
 801ae64:	230f      	movs	r3, #15
 801ae66:	18fb      	adds	r3, r7, r3
 801ae68:	2200      	movs	r2, #0
 801ae6a:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 801ae6c:	1dfb      	adds	r3, r7, #7
 801ae6e:	781b      	ldrb	r3, [r3, #0]
 801ae70:	0018      	movs	r0, r3
 801ae72:	f7ff ff47 	bl	801ad04 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801ae76:	e015      	b.n	801aea4 <USBPD_DPM_CADCallback+0xb4>
        (void)OS_DELAY(1);
 801ae78:	2001      	movs	r0, #1
 801ae7a:	f7fd f8f5 	bl	8018068 <osDelay>
        _timeout++;
 801ae7e:	210f      	movs	r1, #15
 801ae80:	187b      	adds	r3, r7, r1
 801ae82:	781a      	ldrb	r2, [r3, #0]
 801ae84:	187b      	adds	r3, r7, r1
 801ae86:	3201      	adds	r2, #1
 801ae88:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 801ae8a:	187b      	adds	r3, r7, r1
 801ae8c:	781b      	ldrb	r3, [r3, #0]
 801ae8e:	2b1e      	cmp	r3, #30
 801ae90:	d908      	bls.n	801aea4 <USBPD_DPM_CADCallback+0xb4>
          (void)OS_TASK_SUSPEND(DPM_PEThreadId_Table[PortNum]);
 801ae92:	1dfb      	adds	r3, r7, #7
 801ae94:	781a      	ldrb	r2, [r3, #0]
 801ae96:	4b1e      	ldr	r3, [pc, #120]	; (801af10 <USBPD_DPM_CADCallback+0x120>)
 801ae98:	0092      	lsls	r2, r2, #2
 801ae9a:	58d3      	ldr	r3, [r2, r3]
 801ae9c:	0018      	movs	r0, r3
 801ae9e:	f7fd f89f 	bl	8017fe0 <osThreadSuspend>
          break;
 801aea2:	e00a      	b.n	801aeba <USBPD_DPM_CADCallback+0xca>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801aea4:	1dfb      	adds	r3, r7, #7
 801aea6:	781a      	ldrb	r2, [r3, #0]
 801aea8:	4b19      	ldr	r3, [pc, #100]	; (801af10 <USBPD_DPM_CADCallback+0x120>)
 801aeaa:	0092      	lsls	r2, r2, #2
 801aeac:	58d3      	ldr	r3, [r2, r3]
 801aeae:	0018      	movs	r0, r3
 801aeb0:	f7fe f980 	bl	80191b4 <eTaskGetState>
 801aeb4:	0003      	movs	r3, r0
 801aeb6:	2b03      	cmp	r3, #3
 801aeb8:	d1de      	bne.n	801ae78 <USBPD_DPM_CADCallback+0x88>
      USBPD_PE_StateMachine_Stop(PortNum);
 801aeba:	1dfb      	adds	r3, r7, #7
 801aebc:	781b      	ldrb	r3, [r3, #0]
 801aebe:	0018      	movs	r0, r3
 801aec0:	f7e5 facb 	bl	800045a <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801aec4:	1dfb      	adds	r3, r7, #7
 801aec6:	781a      	ldrb	r2, [r3, #0]
 801aec8:	4b12      	ldr	r3, [pc, #72]	; (801af14 <USBPD_DPM_CADCallback+0x124>)
 801aeca:	0092      	lsls	r2, r2, #2
 801aecc:	5cd1      	ldrb	r1, [r2, r3]
 801aece:	2010      	movs	r0, #16
 801aed0:	4381      	bics	r1, r0
 801aed2:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801aed4:	1dfb      	adds	r3, r7, #7
 801aed6:	781b      	ldrb	r3, [r3, #0]
 801aed8:	4a0e      	ldr	r2, [pc, #56]	; (801af14 <USBPD_DPM_CADCallback+0x124>)
 801aeda:	009b      	lsls	r3, r3, #2
 801aedc:	18d3      	adds	r3, r2, r3
 801aede:	785a      	ldrb	r2, [r3, #1]
 801aee0:	2107      	movs	r1, #7
 801aee2:	438a      	bics	r2, r1
 801aee4:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801aee6:	1dbb      	adds	r3, r7, #6
 801aee8:	781a      	ldrb	r2, [r3, #0]
 801aeea:	1dfb      	adds	r3, r7, #7
 801aeec:	781b      	ldrb	r3, [r3, #0]
 801aeee:	0011      	movs	r1, r2
 801aef0:	0018      	movs	r0, r3
 801aef2:	f000 f90f 	bl	801b114 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 801aef6:	1dfb      	adds	r3, r7, #7
 801aef8:	781b      	ldrb	r3, [r3, #0]
 801aefa:	2169      	movs	r1, #105	; 0x69
 801aefc:	0018      	movs	r0, r3
 801aefe:	f000 f96d 	bl	801b1dc <USBPD_DPM_Notification>
      break;
 801af02:	e000      	b.n	801af06 <USBPD_DPM_CADCallback+0x116>
      break;
 801af04:	46c0      	nop			; (mov r8, r8)
  }
}
 801af06:	46c0      	nop			; (mov r8, r8)
 801af08:	46bd      	mov	sp, r7
 801af0a:	b004      	add	sp, #16
 801af0c:	bd80      	pop	{r7, pc}
 801af0e:	46c0      	nop			; (mov r8, r8)
 801af10:	20002f20 	.word	0x20002f20
 801af14:	20002f30 	.word	0x20002f30

0801af18 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b082      	sub	sp, #8
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	0002      	movs	r2, r0
 801af20:	1dfb      	adds	r3, r7, #7
 801af22:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 801af24:	1dfb      	adds	r3, r7, #7
 801af26:	781b      	ldrb	r3, [r3, #0]
 801af28:	0018      	movs	r0, r3
 801af2a:	f7e5 fa90 	bl	800044e <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 801af2e:	1dfb      	adds	r3, r7, #7
 801af30:	781b      	ldrb	r3, [r3, #0]
 801af32:	2b01      	cmp	r3, #1
 801af34:	d808      	bhi.n	801af48 <DPM_StartPETask+0x30>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 801af36:	1dfb      	adds	r3, r7, #7
 801af38:	781a      	ldrb	r2, [r3, #0]
 801af3a:	4b0a      	ldr	r3, [pc, #40]	; (801af64 <DPM_StartPETask+0x4c>)
 801af3c:	0092      	lsls	r2, r2, #2
 801af3e:	58d3      	ldr	r3, [r2, r3]
 801af40:	0018      	movs	r0, r3
 801af42:	f7fd f86f 	bl	8018024 <osThreadResume>
      break;
 801af46:	e002      	b.n	801af4e <DPM_StartPETask+0x36>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 801af48:	f000 f80e 	bl	801af68 <USBPD_DPM_ErrorHandler>
      break;
 801af4c:	46c0      	nop			; (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 801af4e:	1dfb      	adds	r3, r7, #7
 801af50:	781b      	ldrb	r3, [r3, #0]
 801af52:	2168      	movs	r1, #104	; 0x68
 801af54:	0018      	movs	r0, r3
 801af56:	f000 f941 	bl	801b1dc <USBPD_DPM_Notification>
}
 801af5a:	46c0      	nop			; (mov r8, r8)
 801af5c:	46bd      	mov	sp, r7
 801af5e:	b002      	add	sp, #8
 801af60:	bd80      	pop	{r7, pc}
 801af62:	46c0      	nop			; (mov r8, r8)
 801af64:	20002f20 	.word	0x20002f20

0801af68 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 801af6c:	e7fe      	b.n	801af6c <USBPD_DPM_ErrorHandler+0x4>
	...

0801af70 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801af70:	b580      	push	{r7, lr}
 801af72:	b084      	sub	sp, #16
 801af74:	af00      	add	r7, sp, #0
 801af76:	0002      	movs	r2, r0
 801af78:	1dfb      	adds	r3, r7, #7
 801af7a:	701a      	strb	r2, [r3, #0]
 801af7c:	1dbb      	adds	r3, r7, #6
 801af7e:	1c0a      	adds	r2, r1, #0
 801af80:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801af82:	230f      	movs	r3, #15
 801af84:	18fb      	adds	r3, r7, r3
 801af86:	2202      	movs	r2, #2
 801af88:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801af8a:	1dfb      	adds	r3, r7, #7
 801af8c:	781b      	ldrb	r3, [r3, #0]
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d001      	beq.n	801af96 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 801af92:	2302      	movs	r3, #2
 801af94:	e024      	b.n	801afe0 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801af96:	1dfb      	adds	r3, r7, #7
 801af98:	781b      	ldrb	r3, [r3, #0]
 801af9a:	2208      	movs	r2, #8
 801af9c:	18ba      	adds	r2, r7, r2
 801af9e:	0011      	movs	r1, r2
 801afa0:	0018      	movs	r0, r3
 801afa2:	f001 fb6b 	bl	801c67c <BSP_USBPD_PWR_VBUSGetVoltage>

  if (USBPD_VSAFE_0V == Vsafe)
 801afa6:	1dbb      	adds	r3, r7, #6
 801afa8:	781b      	ldrb	r3, [r3, #0]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d10a      	bne.n	801afc4 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801afae:	68bb      	ldr	r3, [r7, #8]
 801afb0:	4a0d      	ldr	r2, [pc, #52]	; (801afe8 <USBPD_PWR_IF_SupplyReady+0x78>)
 801afb2:	4293      	cmp	r3, r2
 801afb4:	d801      	bhi.n	801afba <USBPD_PWR_IF_SupplyReady+0x4a>
 801afb6:	2200      	movs	r2, #0
 801afb8:	e000      	b.n	801afbc <USBPD_PWR_IF_SupplyReady+0x4c>
 801afba:	2202      	movs	r2, #2
 801afbc:	230f      	movs	r3, #15
 801afbe:	18fb      	adds	r3, r7, r3
 801afc0:	701a      	strb	r2, [r3, #0]
 801afc2:	e00a      	b.n	801afda <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801afc4:	68ba      	ldr	r2, [r7, #8]
 801afc6:	23af      	movs	r3, #175	; 0xaf
 801afc8:	011b      	lsls	r3, r3, #4
 801afca:	429a      	cmp	r2, r3
 801afcc:	d901      	bls.n	801afd2 <USBPD_PWR_IF_SupplyReady+0x62>
 801afce:	2200      	movs	r2, #0
 801afd0:	e000      	b.n	801afd4 <USBPD_PWR_IF_SupplyReady+0x64>
 801afd2:	2202      	movs	r2, #2
 801afd4:	230f      	movs	r3, #15
 801afd6:	18fb      	adds	r3, r7, r3
 801afd8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801afda:	230f      	movs	r3, #15
 801afdc:	18fb      	adds	r3, r7, r3
 801afde:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 801afe0:	0018      	movs	r0, r3
 801afe2:	46bd      	mov	sp, r7
 801afe4:	b004      	add	sp, #16
 801afe6:	bd80      	pop	{r7, pc}
 801afe8:	000002ed 	.word	0x000002ed

0801afec <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801afec:	b580      	push	{r7, lr}
 801afee:	b084      	sub	sp, #16
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	60ba      	str	r2, [r7, #8]
 801aff4:	607b      	str	r3, [r7, #4]
 801aff6:	230f      	movs	r3, #15
 801aff8:	18fb      	adds	r3, r7, r3
 801affa:	1c02      	adds	r2, r0, #0
 801affc:	701a      	strb	r2, [r3, #0]
 801affe:	230e      	movs	r3, #14
 801b000:	18fb      	adds	r3, r7, r3
 801b002:	1c0a      	adds	r2, r1, #0
 801b004:	701a      	strb	r2, [r3, #0]
    {
      *Size = USBPD_NbPDO[0];
 801b006:	4b08      	ldr	r3, [pc, #32]	; (801b028 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	001a      	movs	r2, r3
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * USBPD_NbPDO[0]);
 801b010:	4b05      	ldr	r3, [pc, #20]	; (801b028 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 801b012:	781b      	ldrb	r3, [r3, #0]
 801b014:	009a      	lsls	r2, r3, #2
 801b016:	4905      	ldr	r1, [pc, #20]	; (801b02c <USBPD_PWR_IF_GetPortPDOs+0x40>)
 801b018:	68bb      	ldr	r3, [r7, #8]
 801b01a:	0018      	movs	r0, r3
 801b01c:	f008 fc0a 	bl	8023834 <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 801b020:	46c0      	nop			; (mov r8, r8)
 801b022:	46bd      	mov	sp, r7
 801b024:	b004      	add	sp, #16
 801b026:	bd80      	pop	{r7, pc}
 801b028:	2000017c 	.word	0x2000017c
 801b02c:	20000180 	.word	0x20000180

0801b030 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801b030:	b580      	push	{r7, lr}
 801b032:	b084      	sub	sp, #16
 801b034:	af00      	add	r7, sp, #0
 801b036:	0002      	movs	r2, r0
 801b038:	1dfb      	adds	r3, r7, #7
 801b03a:	701a      	strb	r2, [r3, #0]
 801b03c:	1dbb      	adds	r3, r7, #6
 801b03e:	1c0a      	adds	r2, r1, #0
 801b040:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801b042:	230f      	movs	r3, #15
 801b044:	18fb      	adds	r3, r7, r3
 801b046:	2200      	movs	r2, #0
 801b048:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801b04a:	1dfb      	adds	r3, r7, #7
 801b04c:	781b      	ldrb	r3, [r3, #0]
 801b04e:	0018      	movs	r0, r3
 801b050:	f7fa f94c 	bl	80152ec <HW_IF_PWR_GetVoltage>
 801b054:	0003      	movs	r3, r0
 801b056:	60bb      	str	r3, [r7, #8]

  _vbus = 5000;
 801b058:	4b1b      	ldr	r3, [pc, #108]	; (801b0c8 <USBPD_PWR_IF_GetVBUSStatus+0x98>)
 801b05a:	60bb      	str	r3, [r7, #8]
  switch(PowerTypeStatus)
 801b05c:	1dbb      	adds	r3, r7, #6
 801b05e:	781b      	ldrb	r3, [r3, #0]
 801b060:	2b02      	cmp	r3, #2
 801b062:	d018      	beq.n	801b096 <USBPD_PWR_IF_GetVBUSStatus+0x66>
 801b064:	dc21      	bgt.n	801b0aa <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 801b066:	2b00      	cmp	r3, #0
 801b068:	d002      	beq.n	801b070 <USBPD_PWR_IF_GetVBUSStatus+0x40>
 801b06a:	2b01      	cmp	r3, #1
 801b06c:	d009      	beq.n	801b082 <USBPD_PWR_IF_GetVBUSStatus+0x52>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801b06e:	e01c      	b.n	801b0aa <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801b070:	68bb      	ldr	r3, [r7, #8]
 801b072:	4a16      	ldr	r2, [pc, #88]	; (801b0cc <USBPD_PWR_IF_GetVBUSStatus+0x9c>)
 801b074:	4293      	cmp	r3, r2
 801b076:	d81a      	bhi.n	801b0ae <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 801b078:	230f      	movs	r3, #15
 801b07a:	18fb      	adds	r3, r7, r3
 801b07c:	2201      	movs	r2, #1
 801b07e:	701a      	strb	r2, [r3, #0]
    break;
 801b080:	e015      	b.n	801b0ae <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801b082:	68ba      	ldr	r2, [r7, #8]
 801b084:	23af      	movs	r3, #175	; 0xaf
 801b086:	011b      	lsls	r3, r3, #4
 801b088:	429a      	cmp	r2, r3
 801b08a:	d312      	bcc.n	801b0b2 <USBPD_PWR_IF_GetVBUSStatus+0x82>
 801b08c:	230f      	movs	r3, #15
 801b08e:	18fb      	adds	r3, r7, r3
 801b090:	2201      	movs	r2, #1
 801b092:	701a      	strb	r2, [r3, #0]
    break;
 801b094:	e00d      	b.n	801b0b2 <USBPD_PWR_IF_GetVBUSStatus+0x82>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801b096:	68ba      	ldr	r2, [r7, #8]
 801b098:	23af      	movs	r3, #175	; 0xaf
 801b09a:	011b      	lsls	r3, r3, #4
 801b09c:	429a      	cmp	r2, r3
 801b09e:	d20a      	bcs.n	801b0b6 <USBPD_PWR_IF_GetVBUSStatus+0x86>
 801b0a0:	230f      	movs	r3, #15
 801b0a2:	18fb      	adds	r3, r7, r3
 801b0a4:	2201      	movs	r2, #1
 801b0a6:	701a      	strb	r2, [r3, #0]
    break;
 801b0a8:	e005      	b.n	801b0b6 <USBPD_PWR_IF_GetVBUSStatus+0x86>
    break;
 801b0aa:	46c0      	nop			; (mov r8, r8)
 801b0ac:	e004      	b.n	801b0b8 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801b0ae:	46c0      	nop			; (mov r8, r8)
 801b0b0:	e002      	b.n	801b0b8 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801b0b2:	46c0      	nop			; (mov r8, r8)
 801b0b4:	e000      	b.n	801b0b8 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801b0b6:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 801b0b8:	230f      	movs	r3, #15
 801b0ba:	18fb      	adds	r3, r7, r3
 801b0bc:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801b0be:	0018      	movs	r0, r3
 801b0c0:	46bd      	mov	sp, r7
 801b0c2:	b004      	add	sp, #16
 801b0c4:	bd80      	pop	{r7, pc}
 801b0c6:	46c0      	nop			; (mov r8, r8)
 801b0c8:	00001388 	.word	0x00001388
 801b0cc:	000002ed 	.word	0x000002ed

0801b0d0 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  /* Demo initialisation */
  DEMO_Init();
 801b0d4:	f7ec f99a 	bl	800740c <DEMO_Init>
  {
	return USBPD_ERROR;
  }*/


  return USBPD_OK;
 801b0d8:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801b0da:	0018      	movs	r0, r3
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}

0801b0e0 <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b084      	sub	sp, #16
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	60f8      	str	r0, [r7, #12]
 801b0e8:	60b9      	str	r1, [r7, #8]
 801b0ea:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 801b0ec:	4b06      	ldr	r3, [pc, #24]	; (801b108 <USBPD_DPM_SetNotification_GUI+0x28>)
 801b0ee:	68ba      	ldr	r2, [r7, #8]
 801b0f0:	601a      	str	r2, [r3, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 801b0f2:	4b06      	ldr	r3, [pc, #24]	; (801b10c <USBPD_DPM_SetNotification_GUI+0x2c>)
 801b0f4:	68fa      	ldr	r2, [r7, #12]
 801b0f6:	601a      	str	r2, [r3, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 801b0f8:	4b05      	ldr	r3, [pc, #20]	; (801b110 <USBPD_DPM_SetNotification_GUI+0x30>)
 801b0fa:	687a      	ldr	r2, [r7, #4]
 801b0fc:	601a      	str	r2, [r3, #0]
}
 801b0fe:	46c0      	nop			; (mov r8, r8)
 801b100:	46bd      	mov	sp, r7
 801b102:	b004      	add	sp, #16
 801b104:	bd80      	pop	{r7, pc}
 801b106:	46c0      	nop			; (mov r8, r8)
 801b108:	20002f34 	.word	0x20002f34
 801b10c:	20002f38 	.word	0x20002f38
 801b110:	20002f3c 	.word	0x20002f3c

0801b114 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801b114:	b590      	push	{r4, r7, lr}
 801b116:	b093      	sub	sp, #76	; 0x4c
 801b118:	af02      	add	r7, sp, #8
 801b11a:	0002      	movs	r2, r0
 801b11c:	1dfb      	adds	r3, r7, #7
 801b11e:	701a      	strb	r2, [r3, #0]
 801b120:	1dbb      	adds	r3, r7, #6
 801b122:	1c0a      	adds	r2, r1, #0
 801b124:	701a      	strb	r2, [r3, #0]
  switch(State)
 801b126:	1dbb      	adds	r3, r7, #6
 801b128:	781b      	ldrb	r3, [r3, #0]
 801b12a:	2b02      	cmp	r3, #2
 801b12c:	d001      	beq.n	801b132 <USBPD_DPM_UserCableDetection+0x1e>
 801b12e:	2b04      	cmp	r3, #4
 801b130:	d10b      	bne.n	801b14a <USBPD_DPM_UserCableDetection+0x36>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801b132:	4b22      	ldr	r3, [pc, #136]	; (801b1bc <USBPD_DPM_UserCableDetection+0xa8>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d013      	beq.n	801b162 <USBPD_DPM_UserCableDetection+0x4e>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 801b13a:	4b20      	ldr	r3, [pc, #128]	; (801b1bc <USBPD_DPM_UserCableDetection+0xa8>)
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	1dfa      	adds	r2, r7, #7
 801b140:	7810      	ldrb	r0, [r2, #0]
 801b142:	2200      	movs	r2, #0
 801b144:	2120      	movs	r1, #32
 801b146:	4798      	blx	r3
    }
    break;
 801b148:	e00b      	b.n	801b162 <USBPD_DPM_UserCableDetection+0x4e>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801b14a:	4b1c      	ldr	r3, [pc, #112]	; (801b1bc <USBPD_DPM_UserCableDetection+0xa8>)
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d008      	beq.n	801b164 <USBPD_DPM_UserCableDetection+0x50>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 801b152:	4b1a      	ldr	r3, [pc, #104]	; (801b1bc <USBPD_DPM_UserCableDetection+0xa8>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	1dfa      	adds	r2, r7, #7
 801b158:	7810      	ldrb	r0, [r2, #0]
 801b15a:	4919      	ldr	r1, [pc, #100]	; (801b1c0 <USBPD_DPM_UserCableDetection+0xac>)
 801b15c:	2200      	movs	r2, #0
 801b15e:	4798      	blx	r3
 801b160:	e000      	b.n	801b164 <USBPD_DPM_UserCableDetection+0x50>
    break;
 801b162:	46c0      	nop			; (mov r8, r8)
    }
  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 801b164:	4a17      	ldr	r2, [pc, #92]	; (801b1c4 <USBPD_DPM_UserCableDetection+0xb0>)
 801b166:	240c      	movs	r4, #12
 801b168:	193b      	adds	r3, r7, r4
 801b16a:	2132      	movs	r1, #50	; 0x32
 801b16c:	0018      	movs	r0, r3
 801b16e:	f008 fa59 	bl	8023624 <sniprintf>
 801b172:	0002      	movs	r2, r0
 801b174:	213f      	movs	r1, #63	; 0x3f
 801b176:	187b      	adds	r3, r7, r1
 801b178:	701a      	strb	r2, [r3, #0]
 801b17a:	187b      	adds	r3, r7, r1
 801b17c:	781b      	ldrb	r3, [r3, #0]
 801b17e:	2b31      	cmp	r3, #49	; 0x31
 801b180:	d80d      	bhi.n	801b19e <USBPD_DPM_UserCableDetection+0x8a>
 801b182:	193b      	adds	r3, r7, r4
 801b184:	0018      	movs	r0, r3
 801b186:	f7eb f821 	bl	80061cc <strlen>
 801b18a:	193a      	adds	r2, r7, r4
 801b18c:	1dfb      	adds	r3, r7, #7
 801b18e:	7819      	ldrb	r1, [r3, #0]
 801b190:	9000      	str	r0, [sp, #0]
 801b192:	0013      	movs	r3, r2
 801b194:	2200      	movs	r2, #0
 801b196:	2006      	movs	r0, #6
 801b198:	f7f7 fc32 	bl	8012a00 <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801b19c:	e00a      	b.n	801b1b4 <USBPD_DPM_UserCableDetection+0xa0>
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 801b19e:	230c      	movs	r3, #12
 801b1a0:	18fa      	adds	r2, r7, r3
 801b1a2:	1dfb      	adds	r3, r7, #7
 801b1a4:	7819      	ldrb	r1, [r3, #0]
 801b1a6:	2332      	movs	r3, #50	; 0x32
 801b1a8:	9300      	str	r3, [sp, #0]
 801b1aa:	0013      	movs	r3, r2
 801b1ac:	2200      	movs	r2, #0
 801b1ae:	2006      	movs	r0, #6
 801b1b0:	f7f7 fc26 	bl	8012a00 <USBPD_TRACE_Add>
}
 801b1b4:	46c0      	nop			; (mov r8, r8)
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	b011      	add	sp, #68	; 0x44
 801b1ba:	bd90      	pop	{r4, r7, pc}
 801b1bc:	20002f38 	.word	0x20002f38
 801b1c0:	00008020 	.word	0x00008020
 801b1c4:	08024150 	.word	0x08024150

0801b1c8 <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b082      	sub	sp, #8
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	0002      	movs	r2, r0
 801b1d0:	1dfb      	adds	r3, r7, #7
 801b1d2:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 801b1d4:	46c0      	nop			; (mov r8, r8)
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	b002      	add	sp, #8
 801b1da:	bd80      	pop	{r7, pc}

0801b1dc <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801b1dc:	b590      	push	{r4, r7, lr}
 801b1de:	b095      	sub	sp, #84	; 0x54
 801b1e0:	af02      	add	r7, sp, #8
 801b1e2:	0002      	movs	r2, r0
 801b1e4:	1dfb      	adds	r3, r7, #7
 801b1e6:	701a      	strb	r2, [r3, #0]
 801b1e8:	1dbb      	adds	r3, r7, #6
 801b1ea:	1c0a      	adds	r2, r1, #0
 801b1ec:	701a      	strb	r2, [r3, #0]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 801b1ee:	4b3b      	ldr	r3, [pc, #236]	; (801b2dc <USBPD_DPM_Notification+0x100>)
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d008      	beq.n	801b208 <USBPD_DPM_Notification+0x2c>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 801b1f6:	4b39      	ldr	r3, [pc, #228]	; (801b2dc <USBPD_DPM_Notification+0x100>)
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	1dba      	adds	r2, r7, #6
 801b1fc:	7812      	ldrb	r2, [r2, #0]
 801b1fe:	b291      	uxth	r1, r2
 801b200:	1dfa      	adds	r2, r7, #7
 801b202:	7812      	ldrb	r2, [r2, #0]
 801b204:	0010      	movs	r0, r2
 801b206:	4798      	blx	r3
  }
/* USER CODE BEGIN USBPD_DPM_Notification */
  /* Manage event notified by the stack? */
  switch(EventVal)
 801b208:	1dbb      	adds	r3, r7, #6
 801b20a:	781b      	ldrb	r3, [r3, #0]
 801b20c:	2b10      	cmp	r3, #16
 801b20e:	d002      	beq.n	801b216 <USBPD_DPM_Notification+0x3a>
 801b210:	2b20      	cmp	r3, #32
 801b212:	d015      	beq.n	801b240 <USBPD_DPM_Notification+0x64>
 801b214:	e034      	b.n	801b280 <USBPD_DPM_Notification+0xa4>
  {
    case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
    	char _str[50];
    	sprintf(_str,"POWER_EXPLICIT_CONTRACT notification as DPM notif");
 801b216:	4a32      	ldr	r2, [pc, #200]	; (801b2e0 <USBPD_DPM_Notification+0x104>)
 801b218:	240c      	movs	r4, #12
 801b21a:	193b      	adds	r3, r7, r4
 801b21c:	0011      	movs	r1, r2
 801b21e:	0018      	movs	r0, r3
 801b220:	f008 fa34 	bl	802368c <siprintf>
    	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t*)_str, strlen(_str));
 801b224:	193b      	adds	r3, r7, r4
 801b226:	0018      	movs	r0, r3
 801b228:	f7ea ffd0 	bl	80061cc <strlen>
 801b22c:	193a      	adds	r2, r7, r4
 801b22e:	1dfb      	adds	r3, r7, #7
 801b230:	7819      	ldrb	r1, [r3, #0]
 801b232:	9000      	str	r0, [sp, #0]
 801b234:	0013      	movs	r3, r2
 801b236:	2200      	movs	r2, #0
 801b238:	2006      	movs	r0, #6
 801b23a:	f7f7 fbe1 	bl	8012a00 <USBPD_TRACE_Add>
      break;
 801b23e:	e049      	b.n	801b2d4 <USBPD_DPM_Notification+0xf8>
//    case USBPD_NOTIFY_REQUEST_WAIT:
//      break;
//    case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE:
//      break;
    case USBPD_NOTIFY_STATE_SNK_READY:
    	uint32_t voltage = BSP_PWR_VBUSGetVoltage(0);
 801b240:	2000      	movs	r0, #0
 801b242:	f001 f9a9 	bl	801c598 <BSP_PWR_VBUSGetVoltage>
 801b246:	0003      	movs	r3, r0
 801b248:	647b      	str	r3, [r7, #68]	; 0x44

    	char _str2[50];
		// Use snprintf to limit the number of characters written
		int len = snprintf(_str2, sizeof(_str2), "VBUSmeas:%lu mV, VBUSset:%lu mV", voltage, dhandle->voltageSet);
 801b24a:	4b26      	ldr	r3, [pc, #152]	; (801b2e4 <USBPD_DPM_Notification+0x108>)
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801b252:	4a25      	ldr	r2, [pc, #148]	; (801b2e8 <USBPD_DPM_Notification+0x10c>)
 801b254:	240c      	movs	r4, #12
 801b256:	1938      	adds	r0, r7, r4
 801b258:	9300      	str	r3, [sp, #0]
 801b25a:	000b      	movs	r3, r1
 801b25c:	2132      	movs	r1, #50	; 0x32
 801b25e:	f008 f9e1 	bl	8023624 <sniprintf>
 801b262:	0003      	movs	r3, r0
 801b264:	643b      	str	r3, [r7, #64]	; 0x40
		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str2, strlen(_str2));
 801b266:	193b      	adds	r3, r7, r4
 801b268:	0018      	movs	r0, r3
 801b26a:	f7ea ffaf 	bl	80061cc <strlen>
 801b26e:	0002      	movs	r2, r0
 801b270:	193b      	adds	r3, r7, r4
 801b272:	9200      	str	r2, [sp, #0]
 801b274:	2200      	movs	r2, #0
 801b276:	2100      	movs	r1, #0
 801b278:	2006      	movs	r0, #6
 801b27a:	f7f7 fbc1 	bl	8012a00 <USBPD_TRACE_Add>
      break;
 801b27e:	e029      	b.n	801b2d4 <USBPD_DPM_Notification+0xf8>
//    case USBPD_NOTIFY_DATAROLESWAP_DFP :
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801b280:	1dbb      	adds	r3, r7, #6
 801b282:	781b      	ldrb	r3, [r3, #0]
 801b284:	4a19      	ldr	r2, [pc, #100]	; (801b2ec <USBPD_DPM_Notification+0x110>)
 801b286:	240c      	movs	r4, #12
 801b288:	1938      	adds	r0, r7, r4
 801b28a:	2132      	movs	r1, #50	; 0x32
 801b28c:	f008 f9ca 	bl	8023624 <sniprintf>
 801b290:	0002      	movs	r2, r0
 801b292:	213f      	movs	r1, #63	; 0x3f
 801b294:	187b      	adds	r3, r7, r1
 801b296:	701a      	strb	r2, [r3, #0]
 801b298:	187b      	adds	r3, r7, r1
 801b29a:	781b      	ldrb	r3, [r3, #0]
 801b29c:	2b31      	cmp	r3, #49	; 0x31
 801b29e:	d80d      	bhi.n	801b2bc <USBPD_DPM_Notification+0xe0>
 801b2a0:	193b      	adds	r3, r7, r4
 801b2a2:	0018      	movs	r0, r3
 801b2a4:	f7ea ff92 	bl	80061cc <strlen>
 801b2a8:	193a      	adds	r2, r7, r4
 801b2aa:	1dfb      	adds	r3, r7, #7
 801b2ac:	7819      	ldrb	r1, [r3, #0]
 801b2ae:	9000      	str	r0, [sp, #0]
 801b2b0:	0013      	movs	r3, r2
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	2006      	movs	r0, #6
 801b2b6:	f7f7 fba3 	bl	8012a00 <USBPD_TRACE_Add>
      break;
 801b2ba:	e00a      	b.n	801b2d2 <USBPD_DPM_Notification+0xf6>
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801b2bc:	230c      	movs	r3, #12
 801b2be:	18fa      	adds	r2, r7, r3
 801b2c0:	1dfb      	adds	r3, r7, #7
 801b2c2:	7819      	ldrb	r1, [r3, #0]
 801b2c4:	2332      	movs	r3, #50	; 0x32
 801b2c6:	9300      	str	r3, [sp, #0]
 801b2c8:	0013      	movs	r3, r2
 801b2ca:	2200      	movs	r2, #0
 801b2cc:	2006      	movs	r0, #6
 801b2ce:	f7f7 fb97 	bl	8012a00 <USBPD_TRACE_Add>
      break;
 801b2d2:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801b2d4:	46c0      	nop			; (mov r8, r8)
 801b2d6:	46bd      	mov	sp, r7
 801b2d8:	b013      	add	sp, #76	; 0x4c
 801b2da:	bd90      	pop	{r4, r7, pc}
 801b2dc:	20002f34 	.word	0x20002f34
 801b2e0:	0802417c 	.word	0x0802417c
 801b2e4:	20000044 	.word	0x20000044
 801b2e8:	080241b0 	.word	0x080241b0
 801b2ec:	080241d0 	.word	0x080241d0

0801b2f0 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801b2f0:	b590      	push	{r4, r7, lr}
 801b2f2:	b093      	sub	sp, #76	; 0x4c
 801b2f4:	af02      	add	r7, sp, #8
 801b2f6:	6039      	str	r1, [r7, #0]
 801b2f8:	0011      	movs	r1, r2
 801b2fa:	1dfb      	adds	r3, r7, #7
 801b2fc:	1c02      	adds	r2, r0, #0
 801b2fe:	701a      	strb	r2, [r3, #0]
 801b300:	1dbb      	adds	r3, r7, #6
 801b302:	1c0a      	adds	r2, r1, #0
 801b304:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 801b306:	4a16      	ldr	r2, [pc, #88]	; (801b360 <USBPD_DPM_HardReset+0x70>)
 801b308:	240c      	movs	r4, #12
 801b30a:	193b      	adds	r3, r7, r4
 801b30c:	2132      	movs	r1, #50	; 0x32
 801b30e:	0018      	movs	r0, r3
 801b310:	f008 f988 	bl	8023624 <sniprintf>
 801b314:	0002      	movs	r2, r0
 801b316:	213f      	movs	r1, #63	; 0x3f
 801b318:	187b      	adds	r3, r7, r1
 801b31a:	701a      	strb	r2, [r3, #0]
 801b31c:	187b      	adds	r3, r7, r1
 801b31e:	781b      	ldrb	r3, [r3, #0]
 801b320:	2b31      	cmp	r3, #49	; 0x31
 801b322:	d80d      	bhi.n	801b340 <USBPD_DPM_HardReset+0x50>
 801b324:	193b      	adds	r3, r7, r4
 801b326:	0018      	movs	r0, r3
 801b328:	f7ea ff50 	bl	80061cc <strlen>
 801b32c:	193a      	adds	r2, r7, r4
 801b32e:	1dfb      	adds	r3, r7, #7
 801b330:	7819      	ldrb	r1, [r3, #0]
 801b332:	9000      	str	r0, [sp, #0]
 801b334:	0013      	movs	r3, r2
 801b336:	2200      	movs	r2, #0
 801b338:	2006      	movs	r0, #6
 801b33a:	f7f7 fb61 	bl	8012a00 <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_HardReset */
}
 801b33e:	e00a      	b.n	801b356 <USBPD_DPM_HardReset+0x66>
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 801b340:	230c      	movs	r3, #12
 801b342:	18fa      	adds	r2, r7, r3
 801b344:	1dfb      	adds	r3, r7, #7
 801b346:	7819      	ldrb	r1, [r3, #0]
 801b348:	2332      	movs	r3, #50	; 0x32
 801b34a:	9300      	str	r3, [sp, #0]
 801b34c:	0013      	movs	r3, r2
 801b34e:	2200      	movs	r2, #0
 801b350:	2006      	movs	r0, #6
 801b352:	f7f7 fb55 	bl	8012a00 <USBPD_TRACE_Add>
}
 801b356:	46c0      	nop			; (mov r8, r8)
 801b358:	46bd      	mov	sp, r7
 801b35a:	b011      	add	sp, #68	; 0x44
 801b35c:	bd90      	pop	{r4, r7, pc}
 801b35e:	46c0      	nop			; (mov r8, r8)
 801b360:	080241f4 	.word	0x080241f4

0801b364 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801b364:	b590      	push	{r4, r7, lr}
 801b366:	b097      	sub	sp, #92	; 0x5c
 801b368:	af02      	add	r7, sp, #8
 801b36a:	60ba      	str	r2, [r7, #8]
 801b36c:	607b      	str	r3, [r7, #4]
 801b36e:	230f      	movs	r3, #15
 801b370:	18fb      	adds	r3, r7, r3
 801b372:	1c02      	adds	r2, r0, #0
 801b374:	701a      	strb	r2, [r3, #0]
 801b376:	200e      	movs	r0, #14
 801b378:	183b      	adds	r3, r7, r0
 801b37a:	1c0a      	adds	r2, r1, #0
 801b37c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801b37e:	183b      	adds	r3, r7, r0
 801b380:	781b      	ldrb	r3, [r3, #0]
 801b382:	2b01      	cmp	r3, #1
 801b384:	d002      	beq.n	801b38c <USBPD_DPM_GetDataInfo+0x28>
 801b386:	2b0a      	cmp	r3, #10
 801b388:	d011      	beq.n	801b3ae <USBPD_DPM_GetDataInfo+0x4a>
 801b38a:	e01e      	b.n	801b3ca <USBPD_DPM_GetDataInfo+0x66>
  {

  case USBPD_CORE_DATATYPE_SNK_PDO: /*!< Handling of port Sink PDO, requested by get sink capa*/
  USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 801b38c:	687c      	ldr	r4, [r7, #4]
 801b38e:	68ba      	ldr	r2, [r7, #8]
 801b390:	230e      	movs	r3, #14
 801b392:	18fb      	adds	r3, r7, r3
 801b394:	7819      	ldrb	r1, [r3, #0]
 801b396:	230f      	movs	r3, #15
 801b398:	18fb      	adds	r3, r7, r3
 801b39a:	7818      	ldrb	r0, [r3, #0]
 801b39c:	0023      	movs	r3, r4
 801b39e:	f7ff fe25 	bl	801afec <USBPD_PWR_IF_GetPortPDOs>
  *Size *= 4;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	009a      	lsls	r2, r3, #2
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	601a      	str	r2, [r3, #0]
  break;
 801b3ac:	e03a      	b.n	801b424 <USBPD_DPM_GetDataInfo+0xc0>

  case USBPD_CORE_PPS_STATUS :
	  {
		/* Get current drawn by sink */
		USBPD_PPSSDB_TypeDef pps_status = {0};
 801b3ae:	2300      	movs	r3, #0
 801b3b0:	64bb      	str	r3, [r7, #72]	; 0x48
		/*
		pps_status.fields.OutputVoltageIn20mVunits  = 0xFFFF;
		pps_status.fields.OutputCurrentIn50mAunits  = 0xFF;
		pps_status.fields.RealTimeFlags             = USBPD_PPS_REALTIMEFLAGS_PTF_NOT_SUPPORTED | USBPD_PPS_REALTIMEFLAGS_OMF_DISABLED;*/

		*Size = 4;
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	2204      	movs	r2, #4
 801b3b6:	601a      	str	r2, [r3, #0]
		(void)memcpy((uint8_t*)Ptr, (uint8_t *)&pps_status.d32, *Size);
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	681a      	ldr	r2, [r3, #0]
 801b3bc:	2348      	movs	r3, #72	; 0x48
 801b3be:	18f9      	adds	r1, r7, r3
 801b3c0:	68bb      	ldr	r3, [r7, #8]
 801b3c2:	0018      	movs	r0, r3
 801b3c4:	f008 fa36 	bl	8023834 <memcpy>
	  }
	  break;
 801b3c8:	e02c      	b.n	801b424 <USBPD_DPM_GetDataInfo+0xc0>
//  case USBPD_CORE_BATTERY_STATUS:             /*!< Retrieve of Battery status message content          */
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 801b3ca:	230e      	movs	r3, #14
 801b3cc:	18fb      	adds	r3, r7, r3
 801b3ce:	781b      	ldrb	r3, [r3, #0]
 801b3d0:	4a16      	ldr	r2, [pc, #88]	; (801b42c <USBPD_DPM_GetDataInfo+0xc8>)
 801b3d2:	2414      	movs	r4, #20
 801b3d4:	1938      	adds	r0, r7, r4
 801b3d6:	2132      	movs	r1, #50	; 0x32
 801b3d8:	f008 f924 	bl	8023624 <sniprintf>
 801b3dc:	0002      	movs	r2, r0
 801b3de:	214f      	movs	r1, #79	; 0x4f
 801b3e0:	187b      	adds	r3, r7, r1
 801b3e2:	701a      	strb	r2, [r3, #0]
 801b3e4:	187b      	adds	r3, r7, r1
 801b3e6:	781b      	ldrb	r3, [r3, #0]
 801b3e8:	2b31      	cmp	r3, #49	; 0x31
 801b3ea:	d80e      	bhi.n	801b40a <USBPD_DPM_GetDataInfo+0xa6>
 801b3ec:	193b      	adds	r3, r7, r4
 801b3ee:	0018      	movs	r0, r3
 801b3f0:	f7ea feec 	bl	80061cc <strlen>
 801b3f4:	193a      	adds	r2, r7, r4
 801b3f6:	230f      	movs	r3, #15
 801b3f8:	18fb      	adds	r3, r7, r3
 801b3fa:	7819      	ldrb	r1, [r3, #0]
 801b3fc:	9000      	str	r0, [sp, #0]
 801b3fe:	0013      	movs	r3, r2
 801b400:	2200      	movs	r2, #0
 801b402:	2006      	movs	r0, #6
 801b404:	f7f7 fafc 	bl	8012a00 <USBPD_TRACE_Add>
    break;
 801b408:	e00b      	b.n	801b422 <USBPD_DPM_GetDataInfo+0xbe>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 801b40a:	2314      	movs	r3, #20
 801b40c:	18fa      	adds	r2, r7, r3
 801b40e:	230f      	movs	r3, #15
 801b410:	18fb      	adds	r3, r7, r3
 801b412:	7819      	ldrb	r1, [r3, #0]
 801b414:	2332      	movs	r3, #50	; 0x32
 801b416:	9300      	str	r3, [sp, #0]
 801b418:	0013      	movs	r3, r2
 801b41a:	2200      	movs	r2, #0
 801b41c:	2006      	movs	r0, #6
 801b41e:	f7f7 faef 	bl	8012a00 <USBPD_TRACE_Add>
    break;
 801b422:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801b424:	46c0      	nop			; (mov r8, r8)
 801b426:	46bd      	mov	sp, r7
 801b428:	b015      	add	sp, #84	; 0x54
 801b42a:	bd90      	pop	{r4, r7, pc}
 801b42c:	08024218 	.word	0x08024218

0801b430 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801b430:	b5b0      	push	{r4, r5, r7, lr}
 801b432:	b094      	sub	sp, #80	; 0x50
 801b434:	af02      	add	r7, sp, #8
 801b436:	60ba      	str	r2, [r7, #8]
 801b438:	607b      	str	r3, [r7, #4]
 801b43a:	230f      	movs	r3, #15
 801b43c:	18fb      	adds	r3, r7, r3
 801b43e:	1c02      	adds	r2, r0, #0
 801b440:	701a      	strb	r2, [r3, #0]
 801b442:	200e      	movs	r0, #14
 801b444:	183b      	adds	r3, r7, r0
 801b446:	1c0a      	adds	r2, r1, #0
 801b448:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801b44a:	183b      	adds	r3, r7, r0
 801b44c:	781b      	ldrb	r3, [r3, #0]
 801b44e:	2b04      	cmp	r3, #4
 801b450:	d002      	beq.n	801b458 <USBPD_DPM_SetDataInfo+0x28>
 801b452:	2b0a      	cmp	r3, #10
 801b454:	d00b      	beq.n	801b46e <USBPD_DPM_SetDataInfo+0x3e>
 801b456:	e01d      	b.n	801b494 <USBPD_DPM_SetDataInfo+0x64>
  {
  /* Case Received Source PDO values Data information :*/
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO:         /*!< Storage of Received Source PDO values        */
       USBPD_USER_SERV_StoreSRCPDO(PortNum, Ptr, Size);
 801b458:	687a      	ldr	r2, [r7, #4]
 801b45a:	68b9      	ldr	r1, [r7, #8]
 801b45c:	230f      	movs	r3, #15
 801b45e:	18fb      	adds	r3, r7, r3
 801b460:	781b      	ldrb	r3, [r3, #0]
 801b462:	0018      	movs	r0, r3
 801b464:	f001 f9d4 	bl	801c810 <USBPD_USER_SERV_StoreSRCPDO>
       USER_SERV_ExtractSRCCapa();
 801b468:	f002 f9ae 	bl	801d7c8 <USER_SERV_ExtractSRCCapa>
       break;
 801b46c:	e03f      	b.n	801b4ee <USBPD_DPM_SetDataInfo+0xbe>

    case USBPD_CORE_PPS_STATUS :
	  {
		uint8_t*  ext_capa;
		ext_capa = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvPPSStatus;
 801b46e:	230f      	movs	r3, #15
 801b470:	18fb      	adds	r3, r7, r3
 801b472:	781a      	ldrb	r2, [r3, #0]
 801b474:	0013      	movs	r3, r2
 801b476:	009b      	lsls	r3, r3, #2
 801b478:	189b      	adds	r3, r3, r2
 801b47a:	011b      	lsls	r3, r3, #4
 801b47c:	3320      	adds	r3, #32
 801b47e:	001a      	movs	r2, r3
 801b480:	4b25      	ldr	r3, [pc, #148]	; (801b518 <USBPD_DPM_SetDataInfo+0xe8>)
 801b482:	18d3      	adds	r3, r2, r3
 801b484:	647b      	str	r3, [r7, #68]	; 0x44
		memcpy(ext_capa, Ptr, Size);
 801b486:	687a      	ldr	r2, [r7, #4]
 801b488:	68b9      	ldr	r1, [r7, #8]
 801b48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b48c:	0018      	movs	r0, r3
 801b48e:	f008 f9d1 	bl	8023834 <memcpy>
	  }
	  break;
 801b492:	e02c      	b.n	801b4ee <USBPD_DPM_SetDataInfo+0xbe>
//  case USBPD_CORE_GET_BATTERY_CAPABILITY:     /*!< Storing of received Get Battery capability message content*/
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801b494:	230e      	movs	r3, #14
 801b496:	18fb      	adds	r3, r7, r3
 801b498:	781b      	ldrb	r3, [r3, #0]
 801b49a:	4a20      	ldr	r2, [pc, #128]	; (801b51c <USBPD_DPM_SetDataInfo+0xec>)
 801b49c:	2410      	movs	r4, #16
 801b49e:	1938      	adds	r0, r7, r4
 801b4a0:	2132      	movs	r1, #50	; 0x32
 801b4a2:	f008 f8bf 	bl	8023624 <sniprintf>
 801b4a6:	0002      	movs	r2, r0
 801b4a8:	2143      	movs	r1, #67	; 0x43
 801b4aa:	187b      	adds	r3, r7, r1
 801b4ac:	701a      	strb	r2, [r3, #0]
 801b4ae:	187b      	adds	r3, r7, r1
 801b4b0:	781b      	ldrb	r3, [r3, #0]
 801b4b2:	2b31      	cmp	r3, #49	; 0x31
 801b4b4:	d80e      	bhi.n	801b4d4 <USBPD_DPM_SetDataInfo+0xa4>
 801b4b6:	193b      	adds	r3, r7, r4
 801b4b8:	0018      	movs	r0, r3
 801b4ba:	f7ea fe87 	bl	80061cc <strlen>
 801b4be:	193a      	adds	r2, r7, r4
 801b4c0:	230f      	movs	r3, #15
 801b4c2:	18fb      	adds	r3, r7, r3
 801b4c4:	7819      	ldrb	r1, [r3, #0]
 801b4c6:	9000      	str	r0, [sp, #0]
 801b4c8:	0013      	movs	r3, r2
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	2006      	movs	r0, #6
 801b4ce:	f7f7 fa97 	bl	8012a00 <USBPD_TRACE_Add>
    break;
 801b4d2:	e00b      	b.n	801b4ec <USBPD_DPM_SetDataInfo+0xbc>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801b4d4:	2310      	movs	r3, #16
 801b4d6:	18fa      	adds	r2, r7, r3
 801b4d8:	230f      	movs	r3, #15
 801b4da:	18fb      	adds	r3, r7, r3
 801b4dc:	7819      	ldrb	r1, [r3, #0]
 801b4de:	2332      	movs	r3, #50	; 0x32
 801b4e0:	9300      	str	r3, [sp, #0]
 801b4e2:	0013      	movs	r3, r2
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	2006      	movs	r0, #6
 801b4e8:	f7f7 fa8a 	bl	8012a00 <USBPD_TRACE_Add>
    break;
 801b4ec:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 801b4ee:	4b0c      	ldr	r3, [pc, #48]	; (801b520 <USBPD_DPM_SetDataInfo+0xf0>)
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d00b      	beq.n	801b50e <USBPD_DPM_SetDataInfo+0xde>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 801b4f6:	4b0a      	ldr	r3, [pc, #40]	; (801b520 <USBPD_DPM_SetDataInfo+0xf0>)
 801b4f8:	681c      	ldr	r4, [r3, #0]
 801b4fa:	687d      	ldr	r5, [r7, #4]
 801b4fc:	68ba      	ldr	r2, [r7, #8]
 801b4fe:	230e      	movs	r3, #14
 801b500:	18fb      	adds	r3, r7, r3
 801b502:	7819      	ldrb	r1, [r3, #0]
 801b504:	230f      	movs	r3, #15
 801b506:	18fb      	adds	r3, r7, r3
 801b508:	7818      	ldrb	r0, [r3, #0]
 801b50a:	002b      	movs	r3, r5
 801b50c:	47a0      	blx	r4
  }
}
 801b50e:	46c0      	nop			; (mov r8, r8)
 801b510:	46bd      	mov	sp, r7
 801b512:	b012      	add	sp, #72	; 0x48
 801b514:	bdb0      	pop	{r4, r5, r7, pc}
 801b516:	46c0      	nop			; (mov r8, r8)
 801b518:	20002f44 	.word	0x20002f44
 801b51c:	08024240 	.word	0x08024240
 801b520:	20002f3c 	.word	0x20002f3c

0801b524 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801b524:	b590      	push	{r4, r7, lr}
 801b526:	b085      	sub	sp, #20
 801b528:	af00      	add	r7, sp, #0
 801b52a:	60b9      	str	r1, [r7, #8]
 801b52c:	607a      	str	r2, [r7, #4]
 801b52e:	240f      	movs	r4, #15
 801b530:	193b      	adds	r3, r7, r4
 801b532:	1c02      	adds	r2, r0, #0
 801b534:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */

	/* Variable PDO*/
	USBPD_USER_SERV_EvaluateCapa(PortNum, PtrRequestData, PtrPowerObjectType);
 801b536:	687a      	ldr	r2, [r7, #4]
 801b538:	68b9      	ldr	r1, [r7, #8]
 801b53a:	193b      	adds	r3, r7, r4
 801b53c:	781b      	ldrb	r3, [r3, #0]
 801b53e:	0018      	movs	r0, r3
 801b540:	f001 f9a6 	bl	801c890 <USBPD_USER_SERV_EvaluateCapa>
	*PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
	*PtrRequestData = rdo.d32;*/


/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801b544:	46c0      	nop			; (mov r8, r8)
 801b546:	46bd      	mov	sp, r7
 801b548:	b005      	add	sp, #20
 801b54a:	bd90      	pop	{r4, r7, pc}

0801b54c <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801b54c:	b590      	push	{r4, r7, lr}
 801b54e:	b083      	sub	sp, #12
 801b550:	af00      	add	r7, sp, #0
 801b552:	0004      	movs	r4, r0
 801b554:	0008      	movs	r0, r1
 801b556:	603a      	str	r2, [r7, #0]
 801b558:	0019      	movs	r1, r3
 801b55a:	1dfb      	adds	r3, r7, #7
 801b55c:	1c22      	adds	r2, r4, #0
 801b55e:	701a      	strb	r2, [r3, #0]
 801b560:	1dbb      	adds	r3, r7, #6
 801b562:	1c02      	adds	r2, r0, #0
 801b564:	701a      	strb	r2, [r3, #0]
 801b566:	1d3b      	adds	r3, r7, #4
 801b568:	1c0a      	adds	r2, r1, #0
 801b56a:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801b56c:	46c0      	nop			; (mov r8, r8)
 801b56e:	46bd      	mov	sp, r7
 801b570:	b003      	add	sp, #12
 801b572:	bd90      	pop	{r4, r7, pc}

0801b574 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801b574:	b580      	push	{r7, lr}
 801b576:	b082      	sub	sp, #8
 801b578:	af00      	add	r7, sp, #0
 801b57a:	0002      	movs	r2, r0
 801b57c:	1dfb      	adds	r3, r7, #7
 801b57e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801b580:	1dfb      	adds	r3, r7, #7
 801b582:	781b      	ldrb	r3, [r3, #0]
 801b584:	0018      	movs	r0, r3
 801b586:	f7e4 fe89 	bl	800029c <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801b58a:	46c0      	nop			; (mov r8, r8)
 801b58c:	46bd      	mov	sp, r7
 801b58e:	b002      	add	sp, #8
 801b590:	bd80      	pop	{r7, pc}
	...

0801b594 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801b594:	b580      	push	{r7, lr}
 801b596:	b084      	sub	sp, #16
 801b598:	af00      	add	r7, sp, #0
 801b59a:	0002      	movs	r2, r0
 801b59c:	1dfb      	adds	r3, r7, #7
 801b59e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801b5a0:	230f      	movs	r3, #15
 801b5a2:	18fb      	adds	r3, r7, r3
 801b5a4:	220c      	movs	r2, #12
 801b5a6:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801b5a8:	1dfb      	adds	r3, r7, #7
 801b5aa:	781a      	ldrb	r2, [r3, #0]
 801b5ac:	4b2c      	ldr	r3, [pc, #176]	; (801b660 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b5ae:	2174      	movs	r1, #116	; 0x74
 801b5b0:	434a      	muls	r2, r1
 801b5b2:	5cd3      	ldrb	r3, [r2, r3]
 801b5b4:	07db      	lsls	r3, r3, #31
 801b5b6:	0fdb      	lsrs	r3, r3, #31
 801b5b8:	b2db      	uxtb	r3, r3
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d015      	beq.n	801b5ea <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801b5be:	1dfb      	adds	r3, r7, #7
 801b5c0:	781a      	ldrb	r2, [r3, #0]
 801b5c2:	4b27      	ldr	r3, [pc, #156]	; (801b660 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b5c4:	2174      	movs	r1, #116	; 0x74
 801b5c6:	434a      	muls	r2, r1
 801b5c8:	5cd3      	ldrb	r3, [r2, r3]
 801b5ca:	075b      	lsls	r3, r3, #29
 801b5cc:	0fdb      	lsrs	r3, r3, #31
 801b5ce:	b2db      	uxtb	r3, r3
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d10f      	bne.n	801b5f4 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801b5d4:	1dfb      	adds	r3, r7, #7
 801b5d6:	781a      	ldrb	r2, [r3, #0]
 801b5d8:	4b21      	ldr	r3, [pc, #132]	; (801b660 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b5da:	2174      	movs	r1, #116	; 0x74
 801b5dc:	434a      	muls	r2, r1
 801b5de:	5cd3      	ldrb	r3, [r2, r3]
 801b5e0:	071b      	lsls	r3, r3, #28
 801b5e2:	0fdb      	lsrs	r3, r3, #31
 801b5e4:	b2db      	uxtb	r3, r3
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d104      	bne.n	801b5f4 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 801b5ea:	230f      	movs	r3, #15
 801b5ec:	18fb      	adds	r3, r7, r3
 801b5ee:	2201      	movs	r2, #1
 801b5f0:	701a      	strb	r2, [r3, #0]
 801b5f2:	e02d      	b.n	801b650 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801b5f4:	1dfb      	adds	r3, r7, #7
 801b5f6:	781a      	ldrb	r2, [r3, #0]
 801b5f8:	4b19      	ldr	r3, [pc, #100]	; (801b660 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b5fa:	2174      	movs	r1, #116	; 0x74
 801b5fc:	434a      	muls	r2, r1
 801b5fe:	5cd3      	ldrb	r3, [r2, r3]
 801b600:	075b      	lsls	r3, r3, #29
 801b602:	0fdb      	lsrs	r3, r3, #31
 801b604:	b2db      	uxtb	r3, r3
 801b606:	2b01      	cmp	r3, #1
 801b608:	d109      	bne.n	801b61e <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 801b60a:	1dfb      	adds	r3, r7, #7
 801b60c:	781a      	ldrb	r2, [r3, #0]
 801b60e:	4b15      	ldr	r3, [pc, #84]	; (801b664 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801b610:	0092      	lsls	r2, r2, #2
 801b612:	5cd3      	ldrb	r3, [r2, r3]
 801b614:	071b      	lsls	r3, r3, #28
 801b616:	0fdb      	lsrs	r3, r3, #31
 801b618:	b2db      	uxtb	r3, r3
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d014      	beq.n	801b648 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801b61e:	1dfb      	adds	r3, r7, #7
 801b620:	781a      	ldrb	r2, [r3, #0]
 801b622:	4b0f      	ldr	r3, [pc, #60]	; (801b660 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b624:	2174      	movs	r1, #116	; 0x74
 801b626:	434a      	muls	r2, r1
 801b628:	5cd3      	ldrb	r3, [r2, r3]
 801b62a:	071b      	lsls	r3, r3, #28
 801b62c:	0fdb      	lsrs	r3, r3, #31
 801b62e:	b2db      	uxtb	r3, r3
 801b630:	2b01      	cmp	r3, #1
 801b632:	d10d      	bne.n	801b650 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 801b634:	1dfb      	adds	r3, r7, #7
 801b636:	781a      	ldrb	r2, [r3, #0]
 801b638:	4b0a      	ldr	r3, [pc, #40]	; (801b664 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801b63a:	0092      	lsls	r2, r2, #2
 801b63c:	5cd3      	ldrb	r3, [r2, r3]
 801b63e:	071b      	lsls	r3, r3, #28
 801b640:	0fdb      	lsrs	r3, r3, #31
 801b642:	b2db      	uxtb	r3, r3
 801b644:	2b01      	cmp	r3, #1
 801b646:	d103      	bne.n	801b650 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 801b648:	230f      	movs	r3, #15
 801b64a:	18fb      	adds	r3, r7, r3
 801b64c:	220a      	movs	r2, #10
 801b64e:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 801b650:	230f      	movs	r3, #15
 801b652:	18fb      	adds	r3, r7, r3
 801b654:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801b656:	0018      	movs	r0, r3
 801b658:	46bd      	mov	sp, r7
 801b65a:	b004      	add	sp, #16
 801b65c:	bd80      	pop	{r7, pc}
 801b65e:	46c0      	nop			; (mov r8, r8)
 801b660:	20000108 	.word	0x20000108
 801b664:	20002f30 	.word	0x20002f30

0801b668 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801b668:	b580      	push	{r7, lr}
 801b66a:	b082      	sub	sp, #8
 801b66c:	af00      	add	r7, sp, #0
 801b66e:	0002      	movs	r2, r0
 801b670:	1dfb      	adds	r3, r7, #7
 801b672:	701a      	strb	r2, [r3, #0]
 801b674:	1dbb      	adds	r3, r7, #6
 801b676:	1c0a      	adds	r2, r1, #0
 801b678:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801b67a:	1dbb      	adds	r3, r7, #6
 801b67c:	781a      	ldrb	r2, [r3, #0]
 801b67e:	1dfb      	adds	r3, r7, #7
 801b680:	781b      	ldrb	r3, [r3, #0]
 801b682:	0011      	movs	r1, r2
 801b684:	0018      	movs	r0, r3
 801b686:	f7ff fc73 	bl	801af70 <USBPD_PWR_IF_SupplyReady>
 801b68a:	0003      	movs	r3, r0
 801b68c:	425a      	negs	r2, r3
 801b68e:	4153      	adcs	r3, r2
 801b690:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801b692:	0018      	movs	r0, r3
 801b694:	46bd      	mov	sp, r7
 801b696:	b002      	add	sp, #8
 801b698:	bd80      	pop	{r7, pc}
	...

0801b69c <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 801b69c:	b5b0      	push	{r4, r5, r7, lr}
 801b69e:	b092      	sub	sp, #72	; 0x48
 801b6a0:	af02      	add	r7, sp, #8
 801b6a2:	0002      	movs	r2, r0
 801b6a4:	1dfb      	adds	r3, r7, #7
 801b6a6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 801b6a8:	253f      	movs	r5, #63	; 0x3f
 801b6aa:	197c      	adds	r4, r7, r5
 801b6ac:	1dfb      	adds	r3, r7, #7
 801b6ae:	781b      	ldrb	r3, [r3, #0]
 801b6b0:	0018      	movs	r0, r3
 801b6b2:	f7e4 ff01 	bl	80004b8 <USBPD_PE_Request_HardReset>
 801b6b6:	0003      	movs	r3, r0
 801b6b8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 801b6ba:	197b      	adds	r3, r7, r5
 801b6bc:	781b      	ldrb	r3, [r3, #0]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d027      	beq.n	801b712 <USBPD_DPM_RequestHardReset+0x76>
 801b6c2:	4a17      	ldr	r2, [pc, #92]	; (801b720 <USBPD_DPM_RequestHardReset+0x84>)
 801b6c4:	240c      	movs	r4, #12
 801b6c6:	193b      	adds	r3, r7, r4
 801b6c8:	2132      	movs	r1, #50	; 0x32
 801b6ca:	0018      	movs	r0, r3
 801b6cc:	f007 ffaa 	bl	8023624 <sniprintf>
 801b6d0:	0002      	movs	r2, r0
 801b6d2:	213e      	movs	r1, #62	; 0x3e
 801b6d4:	187b      	adds	r3, r7, r1
 801b6d6:	701a      	strb	r2, [r3, #0]
 801b6d8:	187b      	adds	r3, r7, r1
 801b6da:	781b      	ldrb	r3, [r3, #0]
 801b6dc:	2b31      	cmp	r3, #49	; 0x31
 801b6de:	d80d      	bhi.n	801b6fc <USBPD_DPM_RequestHardReset+0x60>
 801b6e0:	193b      	adds	r3, r7, r4
 801b6e2:	0018      	movs	r0, r3
 801b6e4:	f7ea fd72 	bl	80061cc <strlen>
 801b6e8:	193a      	adds	r2, r7, r4
 801b6ea:	1dfb      	adds	r3, r7, #7
 801b6ec:	7819      	ldrb	r1, [r3, #0]
 801b6ee:	9000      	str	r0, [sp, #0]
 801b6f0:	0013      	movs	r3, r2
 801b6f2:	2200      	movs	r2, #0
 801b6f4:	2006      	movs	r0, #6
 801b6f6:	f7f7 f983 	bl	8012a00 <USBPD_TRACE_Add>
 801b6fa:	e00a      	b.n	801b712 <USBPD_DPM_RequestHardReset+0x76>
 801b6fc:	230c      	movs	r3, #12
 801b6fe:	18fa      	adds	r2, r7, r3
 801b700:	1dfb      	adds	r3, r7, #7
 801b702:	7819      	ldrb	r1, [r3, #0]
 801b704:	2332      	movs	r3, #50	; 0x32
 801b706:	9300      	str	r3, [sp, #0]
 801b708:	0013      	movs	r3, r2
 801b70a:	2200      	movs	r2, #0
 801b70c:	2006      	movs	r0, #6
 801b70e:	f7f7 f977 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801b712:	233f      	movs	r3, #63	; 0x3f
 801b714:	18fb      	adds	r3, r7, r3
 801b716:	781b      	ldrb	r3, [r3, #0]
}
 801b718:	0018      	movs	r0, r3
 801b71a:	46bd      	mov	sp, r7
 801b71c:	b010      	add	sp, #64	; 0x40
 801b71e:	bdb0      	pop	{r4, r5, r7, pc}
 801b720:	08024268 	.word	0x08024268

0801b724 <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 801b724:	b5b0      	push	{r4, r5, r7, lr}
 801b726:	b092      	sub	sp, #72	; 0x48
 801b728:	af02      	add	r7, sp, #8
 801b72a:	0002      	movs	r2, r0
 801b72c:	1dfb      	adds	r3, r7, #7
 801b72e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 801b730:	253f      	movs	r5, #63	; 0x3f
 801b732:	197c      	adds	r4, r7, r5
 801b734:	1dfb      	adds	r3, r7, #7
 801b736:	781b      	ldrb	r3, [r3, #0]
 801b738:	0018      	movs	r0, r3
 801b73a:	f7e4 fec9 	bl	80004d0 <USBPD_PE_Request_CableReset>
 801b73e:	0003      	movs	r3, r0
 801b740:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 801b742:	197b      	adds	r3, r7, r5
 801b744:	781b      	ldrb	r3, [r3, #0]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d027      	beq.n	801b79a <USBPD_DPM_RequestCableReset+0x76>
 801b74a:	4a17      	ldr	r2, [pc, #92]	; (801b7a8 <USBPD_DPM_RequestCableReset+0x84>)
 801b74c:	240c      	movs	r4, #12
 801b74e:	193b      	adds	r3, r7, r4
 801b750:	2132      	movs	r1, #50	; 0x32
 801b752:	0018      	movs	r0, r3
 801b754:	f007 ff66 	bl	8023624 <sniprintf>
 801b758:	0002      	movs	r2, r0
 801b75a:	213e      	movs	r1, #62	; 0x3e
 801b75c:	187b      	adds	r3, r7, r1
 801b75e:	701a      	strb	r2, [r3, #0]
 801b760:	187b      	adds	r3, r7, r1
 801b762:	781b      	ldrb	r3, [r3, #0]
 801b764:	2b31      	cmp	r3, #49	; 0x31
 801b766:	d80d      	bhi.n	801b784 <USBPD_DPM_RequestCableReset+0x60>
 801b768:	193b      	adds	r3, r7, r4
 801b76a:	0018      	movs	r0, r3
 801b76c:	f7ea fd2e 	bl	80061cc <strlen>
 801b770:	193a      	adds	r2, r7, r4
 801b772:	1dfb      	adds	r3, r7, #7
 801b774:	7819      	ldrb	r1, [r3, #0]
 801b776:	9000      	str	r0, [sp, #0]
 801b778:	0013      	movs	r3, r2
 801b77a:	2200      	movs	r2, #0
 801b77c:	2006      	movs	r0, #6
 801b77e:	f7f7 f93f 	bl	8012a00 <USBPD_TRACE_Add>
 801b782:	e00a      	b.n	801b79a <USBPD_DPM_RequestCableReset+0x76>
 801b784:	230c      	movs	r3, #12
 801b786:	18fa      	adds	r2, r7, r3
 801b788:	1dfb      	adds	r3, r7, #7
 801b78a:	7819      	ldrb	r1, [r3, #0]
 801b78c:	2332      	movs	r3, #50	; 0x32
 801b78e:	9300      	str	r3, [sp, #0]
 801b790:	0013      	movs	r3, r2
 801b792:	2200      	movs	r2, #0
 801b794:	2006      	movs	r0, #6
 801b796:	f7f7 f933 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801b79a:	233f      	movs	r3, #63	; 0x3f
 801b79c:	18fb      	adds	r3, r7, r3
 801b79e:	781b      	ldrb	r3, [r3, #0]
}
 801b7a0:	0018      	movs	r0, r3
 801b7a2:	46bd      	mov	sp, r7
 801b7a4:	b010      	add	sp, #64	; 0x40
 801b7a6:	bdb0      	pop	{r4, r5, r7, pc}
 801b7a8:	08024290 	.word	0x08024290

0801b7ac <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 801b7ac:	b5b0      	push	{r4, r5, r7, lr}
 801b7ae:	b092      	sub	sp, #72	; 0x48
 801b7b0:	af02      	add	r7, sp, #8
 801b7b2:	0002      	movs	r2, r0
 801b7b4:	1dfb      	adds	r3, r7, #7
 801b7b6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 801b7b8:	253f      	movs	r5, #63	; 0x3f
 801b7ba:	197c      	adds	r4, r7, r5
 801b7bc:	1dfb      	adds	r3, r7, #7
 801b7be:	781b      	ldrb	r3, [r3, #0]
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	2102      	movs	r1, #2
 801b7c4:	0018      	movs	r0, r3
 801b7c6:	f7e4 fe9d 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801b7ca:	0003      	movs	r3, r0
 801b7cc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 801b7ce:	197b      	adds	r3, r7, r5
 801b7d0:	781b      	ldrb	r3, [r3, #0]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d027      	beq.n	801b826 <USBPD_DPM_RequestGotoMin+0x7a>
 801b7d6:	4a17      	ldr	r2, [pc, #92]	; (801b834 <USBPD_DPM_RequestGotoMin+0x88>)
 801b7d8:	240c      	movs	r4, #12
 801b7da:	193b      	adds	r3, r7, r4
 801b7dc:	2132      	movs	r1, #50	; 0x32
 801b7de:	0018      	movs	r0, r3
 801b7e0:	f007 ff20 	bl	8023624 <sniprintf>
 801b7e4:	0002      	movs	r2, r0
 801b7e6:	213e      	movs	r1, #62	; 0x3e
 801b7e8:	187b      	adds	r3, r7, r1
 801b7ea:	701a      	strb	r2, [r3, #0]
 801b7ec:	187b      	adds	r3, r7, r1
 801b7ee:	781b      	ldrb	r3, [r3, #0]
 801b7f0:	2b31      	cmp	r3, #49	; 0x31
 801b7f2:	d80d      	bhi.n	801b810 <USBPD_DPM_RequestGotoMin+0x64>
 801b7f4:	193b      	adds	r3, r7, r4
 801b7f6:	0018      	movs	r0, r3
 801b7f8:	f7ea fce8 	bl	80061cc <strlen>
 801b7fc:	193a      	adds	r2, r7, r4
 801b7fe:	1dfb      	adds	r3, r7, #7
 801b800:	7819      	ldrb	r1, [r3, #0]
 801b802:	9000      	str	r0, [sp, #0]
 801b804:	0013      	movs	r3, r2
 801b806:	2200      	movs	r2, #0
 801b808:	2006      	movs	r0, #6
 801b80a:	f7f7 f8f9 	bl	8012a00 <USBPD_TRACE_Add>
 801b80e:	e00a      	b.n	801b826 <USBPD_DPM_RequestGotoMin+0x7a>
 801b810:	230c      	movs	r3, #12
 801b812:	18fa      	adds	r2, r7, r3
 801b814:	1dfb      	adds	r3, r7, #7
 801b816:	7819      	ldrb	r1, [r3, #0]
 801b818:	2332      	movs	r3, #50	; 0x32
 801b81a:	9300      	str	r3, [sp, #0]
 801b81c:	0013      	movs	r3, r2
 801b81e:	2200      	movs	r2, #0
 801b820:	2006      	movs	r0, #6
 801b822:	f7f7 f8ed 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801b826:	233f      	movs	r3, #63	; 0x3f
 801b828:	18fb      	adds	r3, r7, r3
 801b82a:	781b      	ldrb	r3, [r3, #0]
}
 801b82c:	0018      	movs	r0, r3
 801b82e:	46bd      	mov	sp, r7
 801b830:	b010      	add	sp, #64	; 0x40
 801b832:	bdb0      	pop	{r4, r5, r7, pc}
 801b834:	080242b8 	.word	0x080242b8

0801b838 <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 801b838:	b5b0      	push	{r4, r5, r7, lr}
 801b83a:	b092      	sub	sp, #72	; 0x48
 801b83c:	af02      	add	r7, sp, #8
 801b83e:	0002      	movs	r2, r0
 801b840:	1dfb      	adds	r3, r7, #7
 801b842:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 801b844:	253f      	movs	r5, #63	; 0x3f
 801b846:	197c      	adds	r4, r7, r5
 801b848:	1dfb      	adds	r3, r7, #7
 801b84a:	781b      	ldrb	r3, [r3, #0]
 801b84c:	2200      	movs	r2, #0
 801b84e:	2105      	movs	r1, #5
 801b850:	0018      	movs	r0, r3
 801b852:	f7e4 fe57 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801b856:	0003      	movs	r3, r0
 801b858:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 801b85a:	197b      	adds	r3, r7, r5
 801b85c:	781b      	ldrb	r3, [r3, #0]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d027      	beq.n	801b8b2 <USBPD_DPM_RequestPing+0x7a>
 801b862:	4a17      	ldr	r2, [pc, #92]	; (801b8c0 <USBPD_DPM_RequestPing+0x88>)
 801b864:	240c      	movs	r4, #12
 801b866:	193b      	adds	r3, r7, r4
 801b868:	2132      	movs	r1, #50	; 0x32
 801b86a:	0018      	movs	r0, r3
 801b86c:	f007 feda 	bl	8023624 <sniprintf>
 801b870:	0002      	movs	r2, r0
 801b872:	213e      	movs	r1, #62	; 0x3e
 801b874:	187b      	adds	r3, r7, r1
 801b876:	701a      	strb	r2, [r3, #0]
 801b878:	187b      	adds	r3, r7, r1
 801b87a:	781b      	ldrb	r3, [r3, #0]
 801b87c:	2b31      	cmp	r3, #49	; 0x31
 801b87e:	d80d      	bhi.n	801b89c <USBPD_DPM_RequestPing+0x64>
 801b880:	193b      	adds	r3, r7, r4
 801b882:	0018      	movs	r0, r3
 801b884:	f7ea fca2 	bl	80061cc <strlen>
 801b888:	193a      	adds	r2, r7, r4
 801b88a:	1dfb      	adds	r3, r7, #7
 801b88c:	7819      	ldrb	r1, [r3, #0]
 801b88e:	9000      	str	r0, [sp, #0]
 801b890:	0013      	movs	r3, r2
 801b892:	2200      	movs	r2, #0
 801b894:	2006      	movs	r0, #6
 801b896:	f7f7 f8b3 	bl	8012a00 <USBPD_TRACE_Add>
 801b89a:	e00a      	b.n	801b8b2 <USBPD_DPM_RequestPing+0x7a>
 801b89c:	230c      	movs	r3, #12
 801b89e:	18fa      	adds	r2, r7, r3
 801b8a0:	1dfb      	adds	r3, r7, #7
 801b8a2:	7819      	ldrb	r1, [r3, #0]
 801b8a4:	2332      	movs	r3, #50	; 0x32
 801b8a6:	9300      	str	r3, [sp, #0]
 801b8a8:	0013      	movs	r3, r2
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	2006      	movs	r0, #6
 801b8ae:	f7f7 f8a7 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801b8b2:	233f      	movs	r3, #63	; 0x3f
 801b8b4:	18fb      	adds	r3, r7, r3
 801b8b6:	781b      	ldrb	r3, [r3, #0]
}
 801b8b8:	0018      	movs	r0, r3
 801b8ba:	46bd      	mov	sp, r7
 801b8bc:	b010      	add	sp, #64	; 0x40
 801b8be:	bdb0      	pop	{r4, r5, r7, pc}
 801b8c0:	080242dc 	.word	0x080242dc

0801b8c4 <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 801b8c4:	b5b0      	push	{r4, r5, r7, lr}
 801b8c6:	b09e      	sub	sp, #120	; 0x78
 801b8c8:	af02      	add	r7, sp, #8
 801b8ca:	0004      	movs	r4, r0
 801b8cc:	0008      	movs	r0, r1
 801b8ce:	0011      	movs	r1, r2
 801b8d0:	1dfb      	adds	r3, r7, #7
 801b8d2:	1c22      	adds	r2, r4, #0
 801b8d4:	701a      	strb	r2, [r3, #0]
 801b8d6:	1dbb      	adds	r3, r7, #6
 801b8d8:	1c02      	adds	r2, r0, #0
 801b8da:	701a      	strb	r2, [r3, #0]
 801b8dc:	1d3b      	adds	r3, r7, #4
 801b8de:	1c0a      	adds	r2, r1, #0
 801b8e0:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801b8e2:	256f      	movs	r5, #111	; 0x6f
 801b8e4:	197b      	adds	r3, r7, r5
 801b8e6:	2202      	movs	r2, #2
 801b8e8:	701a      	strb	r2, [r3, #0]
  //source: https://community.st.com/t5/stm32-mcus-other-solutions/message-rejected-for-this-port-configuration-on-the-stm32-x-cube/td-p/86358
    uint32_t voltage, allowablepower;
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_PDO_TypeDef  pdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801b8ea:	1dfb      	adds	r3, r7, #7
 801b8ec:	781b      	ldrb	r3, [r3, #0]
 801b8ee:	2274      	movs	r2, #116	; 0x74
 801b8f0:	435a      	muls	r2, r3
 801b8f2:	4b52      	ldr	r3, [pc, #328]	; (801ba3c <USBPD_DPM_RequestMessageRequest+0x178>)
 801b8f4:	18d3      	adds	r3, r2, r3
 801b8f6:	66bb      	str	r3, [r7, #104]	; 0x68
	USBPD_DPM_SNKPowerRequestDetailsTypeDef request_details;
	rdo.d32 = 0;
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	65bb      	str	r3, [r7, #88]	; 0x58

	/* selected SRC PDO */
	pdo.d32 = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[(IndexSrcPDO - 1)];
 801b8fc:	1dfb      	adds	r3, r7, #7
 801b8fe:	781a      	ldrb	r2, [r3, #0]
 801b900:	1dbb      	adds	r3, r7, #6
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	1e58      	subs	r0, r3, #1
 801b906:	494e      	ldr	r1, [pc, #312]	; (801ba40 <USBPD_DPM_RequestMessageRequest+0x17c>)
 801b908:	0013      	movs	r3, r2
 801b90a:	009b      	lsls	r3, r3, #2
 801b90c:	189b      	adds	r3, r3, r2
 801b90e:	009b      	lsls	r3, r3, #2
 801b910:	181b      	adds	r3, r3, r0
 801b912:	009b      	lsls	r3, r3, #2
 801b914:	585b      	ldr	r3, [r3, r1]
 801b916:	657b      	str	r3, [r7, #84]	; 0x54
	voltage = RequestedVoltage;
 801b918:	1d3b      	adds	r3, r7, #4
 801b91a:	881b      	ldrh	r3, [r3, #0]
 801b91c:	663b      	str	r3, [r7, #96]	; 0x60
	allowablepower = (puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits * RequestedVoltage) / 1000U;
 801b91e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b920:	685b      	ldr	r3, [r3, #4]
 801b922:	1d3a      	adds	r2, r7, #4
 801b924:	8812      	ldrh	r2, [r2, #0]
 801b926:	4353      	muls	r3, r2
 801b928:	22fa      	movs	r2, #250	; 0xfa
 801b92a:	0091      	lsls	r1, r2, #2
 801b92c:	0018      	movs	r0, r3
 801b92e:	f7ea fc5f 	bl	80061f0 <__udivsi3>
 801b932:	0003      	movs	r3, r0
 801b934:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 801b936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b938:	235c      	movs	r3, #92	; 0x5c
 801b93a:	18fc      	adds	r4, r7, r3
 801b93c:	2360      	movs	r3, #96	; 0x60
 801b93e:	18fa      	adds	r2, r7, r3
 801b940:	1dfb      	adds	r3, r7, #7
 801b942:	7818      	ldrb	r0, [r3, #0]
 801b944:	0023      	movs	r3, r4
 801b946:	f001 f88b 	bl	801ca60 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 801b94a:	0003      	movs	r3, r0
 801b94c:	2b01      	cmp	r3, #1
 801b94e:	d141      	bne.n	801b9d4 <USBPD_DPM_RequestMessageRequest+0x110>
	{
	  /* Check that voltage has been correctly selected */
	  if (RequestedVoltage == voltage)
 801b950:	1d3b      	adds	r3, r7, #4
 801b952:	881a      	ldrh	r2, [r3, #0]
 801b954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b956:	429a      	cmp	r2, r3
 801b958:	d13c      	bne.n	801b9d4 <USBPD_DPM_RequestMessageRequest+0x110>
	  {
		request_details.RequestedVoltageInmVunits    = RequestedVoltage;
 801b95a:	1d3b      	adds	r3, r7, #4
 801b95c:	881a      	ldrh	r2, [r3, #0]
 801b95e:	243c      	movs	r4, #60	; 0x3c
 801b960:	193b      	adds	r3, r7, r4
 801b962:	601a      	str	r2, [r3, #0]
		request_details.OperatingCurrentInmAunits    = (1000U * allowablepower)/RequestedVoltage;
 801b964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801b966:	0013      	movs	r3, r2
 801b968:	015b      	lsls	r3, r3, #5
 801b96a:	1a9b      	subs	r3, r3, r2
 801b96c:	009b      	lsls	r3, r3, #2
 801b96e:	189b      	adds	r3, r3, r2
 801b970:	00db      	lsls	r3, r3, #3
 801b972:	001a      	movs	r2, r3
 801b974:	1d3b      	adds	r3, r7, #4
 801b976:	881b      	ldrh	r3, [r3, #0]
 801b978:	0019      	movs	r1, r3
 801b97a:	0010      	movs	r0, r2
 801b97c:	f7ea fc38 	bl	80061f0 <__udivsi3>
 801b980:	0003      	movs	r3, r0
 801b982:	001a      	movs	r2, r3
 801b984:	0020      	movs	r0, r4
 801b986:	183b      	adds	r3, r7, r0
 801b988:	609a      	str	r2, [r3, #8]
		request_details.MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801b98a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b98c:	685a      	ldr	r2, [r3, #4]
 801b98e:	183b      	adds	r3, r7, r0
 801b990:	605a      	str	r2, [r3, #4]
		request_details.MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 801b992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b994:	699a      	ldr	r2, [r3, #24]
 801b996:	183b      	adds	r3, r7, r0
 801b998:	60da      	str	r2, [r3, #12]
		request_details.OperatingPowerInmWunits      = puser->DPM_SNKRequestedPower.OperatingPowerInmWunits;
 801b99a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b99c:	695a      	ldr	r2, [r3, #20]
 801b99e:	183b      	adds	r3, r7, r0
 801b9a0:	611a      	str	r2, [r3, #16]

		USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, (IndexSrcPDO - 1), &request_details, &rdo, &pdo_object);
 801b9a2:	1dbb      	adds	r3, r7, #6
 801b9a4:	781b      	ldrb	r3, [r3, #0]
 801b9a6:	3b01      	subs	r3, #1
 801b9a8:	b2d9      	uxtb	r1, r3
 801b9aa:	2358      	movs	r3, #88	; 0x58
 801b9ac:	18fc      	adds	r4, r7, r3
 801b9ae:	183a      	adds	r2, r7, r0
 801b9b0:	1dfb      	adds	r3, r7, #7
 801b9b2:	7818      	ldrb	r0, [r3, #0]
 801b9b4:	2350      	movs	r3, #80	; 0x50
 801b9b6:	18fb      	adds	r3, r7, r3
 801b9b8:	9300      	str	r3, [sp, #0]
 801b9ba:	0023      	movs	r3, r4
 801b9bc:	f001 fae4 	bl	801cf88 <USER_SERV_SNK_BuildRDOfromSelectedPDO>

		_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 801b9c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801b9c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b9c4:	197c      	adds	r4, r7, r5
 801b9c6:	1dfb      	adds	r3, r7, #7
 801b9c8:	781b      	ldrb	r3, [r3, #0]
 801b9ca:	0018      	movs	r0, r3
 801b9cc:	f7e4 fe9c 	bl	8000708 <USBPD_PE_Send_Request>
 801b9d0:	0003      	movs	r3, r0
 801b9d2:	7023      	strb	r3, [r4, #0]
	  }
	}

/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 801b9d4:	236f      	movs	r3, #111	; 0x6f
 801b9d6:	18fb      	adds	r3, r7, r3
 801b9d8:	781b      	ldrb	r3, [r3, #0]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d027      	beq.n	801ba2e <USBPD_DPM_RequestMessageRequest+0x16a>
 801b9de:	4a19      	ldr	r2, [pc, #100]	; (801ba44 <USBPD_DPM_RequestMessageRequest+0x180>)
 801b9e0:	2408      	movs	r4, #8
 801b9e2:	193b      	adds	r3, r7, r4
 801b9e4:	2132      	movs	r1, #50	; 0x32
 801b9e6:	0018      	movs	r0, r3
 801b9e8:	f007 fe1c 	bl	8023624 <sniprintf>
 801b9ec:	0002      	movs	r2, r0
 801b9ee:	2167      	movs	r1, #103	; 0x67
 801b9f0:	187b      	adds	r3, r7, r1
 801b9f2:	701a      	strb	r2, [r3, #0]
 801b9f4:	187b      	adds	r3, r7, r1
 801b9f6:	781b      	ldrb	r3, [r3, #0]
 801b9f8:	2b31      	cmp	r3, #49	; 0x31
 801b9fa:	d80d      	bhi.n	801ba18 <USBPD_DPM_RequestMessageRequest+0x154>
 801b9fc:	193b      	adds	r3, r7, r4
 801b9fe:	0018      	movs	r0, r3
 801ba00:	f7ea fbe4 	bl	80061cc <strlen>
 801ba04:	193a      	adds	r2, r7, r4
 801ba06:	1dfb      	adds	r3, r7, #7
 801ba08:	7819      	ldrb	r1, [r3, #0]
 801ba0a:	9000      	str	r0, [sp, #0]
 801ba0c:	0013      	movs	r3, r2
 801ba0e:	2200      	movs	r2, #0
 801ba10:	2006      	movs	r0, #6
 801ba12:	f7f6 fff5 	bl	8012a00 <USBPD_TRACE_Add>
 801ba16:	e00a      	b.n	801ba2e <USBPD_DPM_RequestMessageRequest+0x16a>
 801ba18:	2308      	movs	r3, #8
 801ba1a:	18fa      	adds	r2, r7, r3
 801ba1c:	1dfb      	adds	r3, r7, #7
 801ba1e:	7819      	ldrb	r1, [r3, #0]
 801ba20:	2332      	movs	r3, #50	; 0x32
 801ba22:	9300      	str	r3, [sp, #0]
 801ba24:	0013      	movs	r3, r2
 801ba26:	2200      	movs	r2, #0
 801ba28:	2006      	movs	r0, #6
 801ba2a:	f7f6 ffe9 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801ba2e:	236f      	movs	r3, #111	; 0x6f
 801ba30:	18fb      	adds	r3, r7, r3
 801ba32:	781b      	ldrb	r3, [r3, #0]
}
 801ba34:	0018      	movs	r0, r3
 801ba36:	46bd      	mov	sp, r7
 801ba38:	b01c      	add	sp, #112	; 0x70
 801ba3a:	bdb0      	pop	{r4, r5, r7, pc}
 801ba3c:	20000108 	.word	0x20000108
 801ba40:	20002f44 	.word	0x20002f44
 801ba44:	080242fc 	.word	0x080242fc

0801ba48 <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 801ba48:	b5b0      	push	{r4, r5, r7, lr}
 801ba4a:	b092      	sub	sp, #72	; 0x48
 801ba4c:	af02      	add	r7, sp, #8
 801ba4e:	0002      	movs	r2, r0
 801ba50:	1dfb      	adds	r3, r7, #7
 801ba52:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 801ba54:	253f      	movs	r5, #63	; 0x3f
 801ba56:	197c      	adds	r4, r7, r5
 801ba58:	1dfb      	adds	r3, r7, #7
 801ba5a:	781b      	ldrb	r3, [r3, #0]
 801ba5c:	2200      	movs	r2, #0
 801ba5e:	2107      	movs	r1, #7
 801ba60:	0018      	movs	r0, r3
 801ba62:	f7e4 fd4f 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ba66:	0003      	movs	r3, r0
 801ba68:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 801ba6a:	197b      	adds	r3, r7, r5
 801ba6c:	781b      	ldrb	r3, [r3, #0]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d027      	beq.n	801bac2 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 801ba72:	4a17      	ldr	r2, [pc, #92]	; (801bad0 <USBPD_DPM_RequestGetSourceCapability+0x88>)
 801ba74:	240c      	movs	r4, #12
 801ba76:	193b      	adds	r3, r7, r4
 801ba78:	2132      	movs	r1, #50	; 0x32
 801ba7a:	0018      	movs	r0, r3
 801ba7c:	f007 fdd2 	bl	8023624 <sniprintf>
 801ba80:	0002      	movs	r2, r0
 801ba82:	213e      	movs	r1, #62	; 0x3e
 801ba84:	187b      	adds	r3, r7, r1
 801ba86:	701a      	strb	r2, [r3, #0]
 801ba88:	187b      	adds	r3, r7, r1
 801ba8a:	781b      	ldrb	r3, [r3, #0]
 801ba8c:	2b31      	cmp	r3, #49	; 0x31
 801ba8e:	d80d      	bhi.n	801baac <USBPD_DPM_RequestGetSourceCapability+0x64>
 801ba90:	193b      	adds	r3, r7, r4
 801ba92:	0018      	movs	r0, r3
 801ba94:	f7ea fb9a 	bl	80061cc <strlen>
 801ba98:	193a      	adds	r2, r7, r4
 801ba9a:	1dfb      	adds	r3, r7, #7
 801ba9c:	7819      	ldrb	r1, [r3, #0]
 801ba9e:	9000      	str	r0, [sp, #0]
 801baa0:	0013      	movs	r3, r2
 801baa2:	2200      	movs	r2, #0
 801baa4:	2006      	movs	r0, #6
 801baa6:	f7f6 ffab 	bl	8012a00 <USBPD_TRACE_Add>
 801baaa:	e00a      	b.n	801bac2 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 801baac:	230c      	movs	r3, #12
 801baae:	18fa      	adds	r2, r7, r3
 801bab0:	1dfb      	adds	r3, r7, #7
 801bab2:	7819      	ldrb	r1, [r3, #0]
 801bab4:	2332      	movs	r3, #50	; 0x32
 801bab6:	9300      	str	r3, [sp, #0]
 801bab8:	0013      	movs	r3, r2
 801baba:	2200      	movs	r2, #0
 801babc:	2006      	movs	r0, #6
 801babe:	f7f6 ff9f 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801bac2:	233f      	movs	r3, #63	; 0x3f
 801bac4:	18fb      	adds	r3, r7, r3
 801bac6:	781b      	ldrb	r3, [r3, #0]
}
 801bac8:	0018      	movs	r0, r3
 801baca:	46bd      	mov	sp, r7
 801bacc:	b010      	add	sp, #64	; 0x40
 801bace:	bdb0      	pop	{r4, r5, r7, pc}
 801bad0:	08024320 	.word	0x08024320

0801bad4 <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 801bad4:	b5b0      	push	{r4, r5, r7, lr}
 801bad6:	b092      	sub	sp, #72	; 0x48
 801bad8:	af02      	add	r7, sp, #8
 801bada:	0002      	movs	r2, r0
 801badc:	1dfb      	adds	r3, r7, #7
 801bade:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 801bae0:	253f      	movs	r5, #63	; 0x3f
 801bae2:	197c      	adds	r4, r7, r5
 801bae4:	1dfb      	adds	r3, r7, #7
 801bae6:	781b      	ldrb	r3, [r3, #0]
 801bae8:	2200      	movs	r2, #0
 801baea:	2108      	movs	r1, #8
 801baec:	0018      	movs	r0, r3
 801baee:	f7e4 fd09 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801baf2:	0003      	movs	r3, r0
 801baf4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 801baf6:	197b      	adds	r3, r7, r5
 801baf8:	781b      	ldrb	r3, [r3, #0]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d027      	beq.n	801bb4e <USBPD_DPM_RequestGetSinkCapability+0x7a>
 801bafe:	4a17      	ldr	r2, [pc, #92]	; (801bb5c <USBPD_DPM_RequestGetSinkCapability+0x88>)
 801bb00:	240c      	movs	r4, #12
 801bb02:	193b      	adds	r3, r7, r4
 801bb04:	2132      	movs	r1, #50	; 0x32
 801bb06:	0018      	movs	r0, r3
 801bb08:	f007 fd8c 	bl	8023624 <sniprintf>
 801bb0c:	0002      	movs	r2, r0
 801bb0e:	213e      	movs	r1, #62	; 0x3e
 801bb10:	187b      	adds	r3, r7, r1
 801bb12:	701a      	strb	r2, [r3, #0]
 801bb14:	187b      	adds	r3, r7, r1
 801bb16:	781b      	ldrb	r3, [r3, #0]
 801bb18:	2b31      	cmp	r3, #49	; 0x31
 801bb1a:	d80d      	bhi.n	801bb38 <USBPD_DPM_RequestGetSinkCapability+0x64>
 801bb1c:	193b      	adds	r3, r7, r4
 801bb1e:	0018      	movs	r0, r3
 801bb20:	f7ea fb54 	bl	80061cc <strlen>
 801bb24:	193a      	adds	r2, r7, r4
 801bb26:	1dfb      	adds	r3, r7, #7
 801bb28:	7819      	ldrb	r1, [r3, #0]
 801bb2a:	9000      	str	r0, [sp, #0]
 801bb2c:	0013      	movs	r3, r2
 801bb2e:	2200      	movs	r2, #0
 801bb30:	2006      	movs	r0, #6
 801bb32:	f7f6 ff65 	bl	8012a00 <USBPD_TRACE_Add>
 801bb36:	e00a      	b.n	801bb4e <USBPD_DPM_RequestGetSinkCapability+0x7a>
 801bb38:	230c      	movs	r3, #12
 801bb3a:	18fa      	adds	r2, r7, r3
 801bb3c:	1dfb      	adds	r3, r7, #7
 801bb3e:	7819      	ldrb	r1, [r3, #0]
 801bb40:	2332      	movs	r3, #50	; 0x32
 801bb42:	9300      	str	r3, [sp, #0]
 801bb44:	0013      	movs	r3, r2
 801bb46:	2200      	movs	r2, #0
 801bb48:	2006      	movs	r0, #6
 801bb4a:	f7f6 ff59 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801bb4e:	233f      	movs	r3, #63	; 0x3f
 801bb50:	18fb      	adds	r3, r7, r3
 801bb52:	781b      	ldrb	r3, [r3, #0]
}
 801bb54:	0018      	movs	r0, r3
 801bb56:	46bd      	mov	sp, r7
 801bb58:	b010      	add	sp, #64	; 0x40
 801bb5a:	bdb0      	pop	{r4, r5, r7, pc}
 801bb5c:	08024348 	.word	0x08024348

0801bb60 <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 801bb60:	b5b0      	push	{r4, r5, r7, lr}
 801bb62:	b092      	sub	sp, #72	; 0x48
 801bb64:	af02      	add	r7, sp, #8
 801bb66:	0002      	movs	r2, r0
 801bb68:	1dfb      	adds	r3, r7, #7
 801bb6a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 801bb6c:	253f      	movs	r5, #63	; 0x3f
 801bb6e:	197c      	adds	r4, r7, r5
 801bb70:	1dfb      	adds	r3, r7, #7
 801bb72:	781b      	ldrb	r3, [r3, #0]
 801bb74:	2200      	movs	r2, #0
 801bb76:	2109      	movs	r1, #9
 801bb78:	0018      	movs	r0, r3
 801bb7a:	f7e4 fcc3 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801bb7e:	0003      	movs	r3, r0
 801bb80:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 801bb82:	197b      	adds	r3, r7, r5
 801bb84:	781b      	ldrb	r3, [r3, #0]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d027      	beq.n	801bbda <USBPD_DPM_RequestDataRoleSwap+0x7a>
 801bb8a:	4a17      	ldr	r2, [pc, #92]	; (801bbe8 <USBPD_DPM_RequestDataRoleSwap+0x88>)
 801bb8c:	240c      	movs	r4, #12
 801bb8e:	193b      	adds	r3, r7, r4
 801bb90:	2132      	movs	r1, #50	; 0x32
 801bb92:	0018      	movs	r0, r3
 801bb94:	f007 fd46 	bl	8023624 <sniprintf>
 801bb98:	0002      	movs	r2, r0
 801bb9a:	213e      	movs	r1, #62	; 0x3e
 801bb9c:	187b      	adds	r3, r7, r1
 801bb9e:	701a      	strb	r2, [r3, #0]
 801bba0:	187b      	adds	r3, r7, r1
 801bba2:	781b      	ldrb	r3, [r3, #0]
 801bba4:	2b31      	cmp	r3, #49	; 0x31
 801bba6:	d80d      	bhi.n	801bbc4 <USBPD_DPM_RequestDataRoleSwap+0x64>
 801bba8:	193b      	adds	r3, r7, r4
 801bbaa:	0018      	movs	r0, r3
 801bbac:	f7ea fb0e 	bl	80061cc <strlen>
 801bbb0:	193a      	adds	r2, r7, r4
 801bbb2:	1dfb      	adds	r3, r7, #7
 801bbb4:	7819      	ldrb	r1, [r3, #0]
 801bbb6:	9000      	str	r0, [sp, #0]
 801bbb8:	0013      	movs	r3, r2
 801bbba:	2200      	movs	r2, #0
 801bbbc:	2006      	movs	r0, #6
 801bbbe:	f7f6 ff1f 	bl	8012a00 <USBPD_TRACE_Add>
 801bbc2:	e00a      	b.n	801bbda <USBPD_DPM_RequestDataRoleSwap+0x7a>
 801bbc4:	230c      	movs	r3, #12
 801bbc6:	18fa      	adds	r2, r7, r3
 801bbc8:	1dfb      	adds	r3, r7, #7
 801bbca:	7819      	ldrb	r1, [r3, #0]
 801bbcc:	2332      	movs	r3, #50	; 0x32
 801bbce:	9300      	str	r3, [sp, #0]
 801bbd0:	0013      	movs	r3, r2
 801bbd2:	2200      	movs	r2, #0
 801bbd4:	2006      	movs	r0, #6
 801bbd6:	f7f6 ff13 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801bbda:	233f      	movs	r3, #63	; 0x3f
 801bbdc:	18fb      	adds	r3, r7, r3
 801bbde:	781b      	ldrb	r3, [r3, #0]
}
 801bbe0:	0018      	movs	r0, r3
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	b010      	add	sp, #64	; 0x40
 801bbe6:	bdb0      	pop	{r4, r5, r7, pc}
 801bbe8:	08024370 	.word	0x08024370

0801bbec <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 801bbec:	b590      	push	{r4, r7, lr}
 801bbee:	b093      	sub	sp, #76	; 0x4c
 801bbf0:	af02      	add	r7, sp, #8
 801bbf2:	0002      	movs	r2, r0
 801bbf4:	1dfb      	adds	r3, r7, #7
 801bbf6:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "PRS not accepted by the stack");
 801bbf8:	4a16      	ldr	r2, [pc, #88]	; (801bc54 <USBPD_DPM_RequestPowerRoleSwap+0x68>)
 801bbfa:	240c      	movs	r4, #12
 801bbfc:	193b      	adds	r3, r7, r4
 801bbfe:	2132      	movs	r1, #50	; 0x32
 801bc00:	0018      	movs	r0, r3
 801bc02:	f007 fd0f 	bl	8023624 <sniprintf>
 801bc06:	0002      	movs	r2, r0
 801bc08:	213f      	movs	r1, #63	; 0x3f
 801bc0a:	187b      	adds	r3, r7, r1
 801bc0c:	701a      	strb	r2, [r3, #0]
 801bc0e:	187b      	adds	r3, r7, r1
 801bc10:	781b      	ldrb	r3, [r3, #0]
 801bc12:	2b31      	cmp	r3, #49	; 0x31
 801bc14:	d80d      	bhi.n	801bc32 <USBPD_DPM_RequestPowerRoleSwap+0x46>
 801bc16:	193b      	adds	r3, r7, r4
 801bc18:	0018      	movs	r0, r3
 801bc1a:	f7ea fad7 	bl	80061cc <strlen>
 801bc1e:	193a      	adds	r2, r7, r4
 801bc20:	1dfb      	adds	r3, r7, #7
 801bc22:	7819      	ldrb	r1, [r3, #0]
 801bc24:	9000      	str	r0, [sp, #0]
 801bc26:	0013      	movs	r3, r2
 801bc28:	2200      	movs	r2, #0
 801bc2a:	2006      	movs	r0, #6
 801bc2c:	f7f6 fee8 	bl	8012a00 <USBPD_TRACE_Add>
 801bc30:	e00a      	b.n	801bc48 <USBPD_DPM_RequestPowerRoleSwap+0x5c>
 801bc32:	230c      	movs	r3, #12
 801bc34:	18fa      	adds	r2, r7, r3
 801bc36:	1dfb      	adds	r3, r7, #7
 801bc38:	7819      	ldrb	r1, [r3, #0]
 801bc3a:	2332      	movs	r3, #50	; 0x32
 801bc3c:	9300      	str	r3, [sp, #0]
 801bc3e:	0013      	movs	r3, r2
 801bc40:	2200      	movs	r2, #0
 801bc42:	2006      	movs	r0, #6
 801bc44:	f7f6 fedc 	bl	8012a00 <USBPD_TRACE_Add>
  return USBPD_ERROR;
 801bc48:	2302      	movs	r3, #2
}
 801bc4a:	0018      	movs	r0, r3
 801bc4c:	46bd      	mov	sp, r7
 801bc4e:	b011      	add	sp, #68	; 0x44
 801bc50:	bd90      	pop	{r4, r7, pc}
 801bc52:	46c0      	nop			; (mov r8, r8)
 801bc54:	08024390 	.word	0x08024390

0801bc58 <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 801bc58:	b5b0      	push	{r4, r5, r7, lr}
 801bc5a:	b092      	sub	sp, #72	; 0x48
 801bc5c:	af02      	add	r7, sp, #8
 801bc5e:	0002      	movs	r2, r0
 801bc60:	1dfb      	adds	r3, r7, #7
 801bc62:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 801bc64:	253f      	movs	r5, #63	; 0x3f
 801bc66:	197c      	adds	r4, r7, r5
 801bc68:	1dfb      	adds	r3, r7, #7
 801bc6a:	781b      	ldrb	r3, [r3, #0]
 801bc6c:	2200      	movs	r2, #0
 801bc6e:	210b      	movs	r1, #11
 801bc70:	0018      	movs	r0, r3
 801bc72:	f7e4 fc47 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801bc76:	0003      	movs	r3, r0
 801bc78:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 801bc7a:	197b      	adds	r3, r7, r5
 801bc7c:	781b      	ldrb	r3, [r3, #0]
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d027      	beq.n	801bcd2 <USBPD_DPM_RequestVconnSwap+0x7a>
 801bc82:	4a17      	ldr	r2, [pc, #92]	; (801bce0 <USBPD_DPM_RequestVconnSwap+0x88>)
 801bc84:	240c      	movs	r4, #12
 801bc86:	193b      	adds	r3, r7, r4
 801bc88:	2132      	movs	r1, #50	; 0x32
 801bc8a:	0018      	movs	r0, r3
 801bc8c:	f007 fcca 	bl	8023624 <sniprintf>
 801bc90:	0002      	movs	r2, r0
 801bc92:	213e      	movs	r1, #62	; 0x3e
 801bc94:	187b      	adds	r3, r7, r1
 801bc96:	701a      	strb	r2, [r3, #0]
 801bc98:	187b      	adds	r3, r7, r1
 801bc9a:	781b      	ldrb	r3, [r3, #0]
 801bc9c:	2b31      	cmp	r3, #49	; 0x31
 801bc9e:	d80d      	bhi.n	801bcbc <USBPD_DPM_RequestVconnSwap+0x64>
 801bca0:	193b      	adds	r3, r7, r4
 801bca2:	0018      	movs	r0, r3
 801bca4:	f7ea fa92 	bl	80061cc <strlen>
 801bca8:	193a      	adds	r2, r7, r4
 801bcaa:	1dfb      	adds	r3, r7, #7
 801bcac:	7819      	ldrb	r1, [r3, #0]
 801bcae:	9000      	str	r0, [sp, #0]
 801bcb0:	0013      	movs	r3, r2
 801bcb2:	2200      	movs	r2, #0
 801bcb4:	2006      	movs	r0, #6
 801bcb6:	f7f6 fea3 	bl	8012a00 <USBPD_TRACE_Add>
 801bcba:	e00a      	b.n	801bcd2 <USBPD_DPM_RequestVconnSwap+0x7a>
 801bcbc:	230c      	movs	r3, #12
 801bcbe:	18fa      	adds	r2, r7, r3
 801bcc0:	1dfb      	adds	r3, r7, #7
 801bcc2:	7819      	ldrb	r1, [r3, #0]
 801bcc4:	2332      	movs	r3, #50	; 0x32
 801bcc6:	9300      	str	r3, [sp, #0]
 801bcc8:	0013      	movs	r3, r2
 801bcca:	2200      	movs	r2, #0
 801bccc:	2006      	movs	r0, #6
 801bcce:	f7f6 fe97 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801bcd2:	233f      	movs	r3, #63	; 0x3f
 801bcd4:	18fb      	adds	r3, r7, r3
 801bcd6:	781b      	ldrb	r3, [r3, #0]
}
 801bcd8:	0018      	movs	r0, r3
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	b010      	add	sp, #64	; 0x40
 801bcde:	bdb0      	pop	{r4, r5, r7, pc}
 801bce0:	080243b0 	.word	0x080243b0

0801bce4 <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 801bce4:	b5b0      	push	{r4, r5, r7, lr}
 801bce6:	b092      	sub	sp, #72	; 0x48
 801bce8:	af02      	add	r7, sp, #8
 801bcea:	0002      	movs	r2, r0
 801bcec:	1dfb      	adds	r3, r7, #7
 801bcee:	701a      	strb	r2, [r3, #0]
 801bcf0:	1dbb      	adds	r3, r7, #6
 801bcf2:	1c0a      	adds	r2, r1, #0
 801bcf4:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 801bcf6:	253f      	movs	r5, #63	; 0x3f
 801bcf8:	197c      	adds	r4, r7, r5
 801bcfa:	1dbb      	adds	r3, r7, #6
 801bcfc:	781a      	ldrb	r2, [r3, #0]
 801bcfe:	1dfb      	adds	r3, r7, #7
 801bd00:	781b      	ldrb	r3, [r3, #0]
 801bd02:	210d      	movs	r1, #13
 801bd04:	0018      	movs	r0, r3
 801bd06:	f7e4 fbfd 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801bd0a:	0003      	movs	r3, r0
 801bd0c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 801bd0e:	197b      	adds	r3, r7, r5
 801bd10:	781b      	ldrb	r3, [r3, #0]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d027      	beq.n	801bd66 <USBPD_DPM_RequestSoftReset+0x82>
 801bd16:	4a17      	ldr	r2, [pc, #92]	; (801bd74 <USBPD_DPM_RequestSoftReset+0x90>)
 801bd18:	240c      	movs	r4, #12
 801bd1a:	193b      	adds	r3, r7, r4
 801bd1c:	2132      	movs	r1, #50	; 0x32
 801bd1e:	0018      	movs	r0, r3
 801bd20:	f007 fc80 	bl	8023624 <sniprintf>
 801bd24:	0002      	movs	r2, r0
 801bd26:	213e      	movs	r1, #62	; 0x3e
 801bd28:	187b      	adds	r3, r7, r1
 801bd2a:	701a      	strb	r2, [r3, #0]
 801bd2c:	187b      	adds	r3, r7, r1
 801bd2e:	781b      	ldrb	r3, [r3, #0]
 801bd30:	2b31      	cmp	r3, #49	; 0x31
 801bd32:	d80d      	bhi.n	801bd50 <USBPD_DPM_RequestSoftReset+0x6c>
 801bd34:	193b      	adds	r3, r7, r4
 801bd36:	0018      	movs	r0, r3
 801bd38:	f7ea fa48 	bl	80061cc <strlen>
 801bd3c:	193a      	adds	r2, r7, r4
 801bd3e:	1dfb      	adds	r3, r7, #7
 801bd40:	7819      	ldrb	r1, [r3, #0]
 801bd42:	9000      	str	r0, [sp, #0]
 801bd44:	0013      	movs	r3, r2
 801bd46:	2200      	movs	r2, #0
 801bd48:	2006      	movs	r0, #6
 801bd4a:	f7f6 fe59 	bl	8012a00 <USBPD_TRACE_Add>
 801bd4e:	e00a      	b.n	801bd66 <USBPD_DPM_RequestSoftReset+0x82>
 801bd50:	230c      	movs	r3, #12
 801bd52:	18fa      	adds	r2, r7, r3
 801bd54:	1dfb      	adds	r3, r7, #7
 801bd56:	7819      	ldrb	r1, [r3, #0]
 801bd58:	2332      	movs	r3, #50	; 0x32
 801bd5a:	9300      	str	r3, [sp, #0]
 801bd5c:	0013      	movs	r3, r2
 801bd5e:	2200      	movs	r2, #0
 801bd60:	2006      	movs	r0, #6
 801bd62:	f7f6 fe4d 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801bd66:	233f      	movs	r3, #63	; 0x3f
 801bd68:	18fb      	adds	r3, r7, r3
 801bd6a:	781b      	ldrb	r3, [r3, #0]
}
 801bd6c:	0018      	movs	r0, r3
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	b010      	add	sp, #64	; 0x40
 801bd72:	bdb0      	pop	{r4, r5, r7, pc}
 801bd74:	080243d0 	.word	0x080243d0

0801bd78 <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 801bd78:	b5b0      	push	{r4, r5, r7, lr}
 801bd7a:	b092      	sub	sp, #72	; 0x48
 801bd7c:	af02      	add	r7, sp, #8
 801bd7e:	0002      	movs	r2, r0
 801bd80:	1dfb      	adds	r3, r7, #7
 801bd82:	701a      	strb	r2, [r3, #0]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 801bd84:	253f      	movs	r5, #63	; 0x3f
 801bd86:	197c      	adds	r4, r7, r5
 801bd88:	1dfb      	adds	r3, r7, #7
 801bd8a:	781b      	ldrb	r3, [r3, #0]
 801bd8c:	2200      	movs	r2, #0
 801bd8e:	2101      	movs	r1, #1
 801bd90:	0018      	movs	r0, r3
 801bd92:	f7e4 fc63 	bl	800065c <USBPD_PE_Request_DataMessage>
 801bd96:	0003      	movs	r3, r0
 801bd98:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 801bd9a:	197b      	adds	r3, r7, r5
 801bd9c:	781b      	ldrb	r3, [r3, #0]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d027      	beq.n	801bdf2 <USBPD_DPM_RequestSourceCapability+0x7a>
 801bda2:	4a17      	ldr	r2, [pc, #92]	; (801be00 <USBPD_DPM_RequestSourceCapability+0x88>)
 801bda4:	240c      	movs	r4, #12
 801bda6:	193b      	adds	r3, r7, r4
 801bda8:	2132      	movs	r1, #50	; 0x32
 801bdaa:	0018      	movs	r0, r3
 801bdac:	f007 fc3a 	bl	8023624 <sniprintf>
 801bdb0:	0002      	movs	r2, r0
 801bdb2:	213e      	movs	r1, #62	; 0x3e
 801bdb4:	187b      	adds	r3, r7, r1
 801bdb6:	701a      	strb	r2, [r3, #0]
 801bdb8:	187b      	adds	r3, r7, r1
 801bdba:	781b      	ldrb	r3, [r3, #0]
 801bdbc:	2b31      	cmp	r3, #49	; 0x31
 801bdbe:	d80d      	bhi.n	801bddc <USBPD_DPM_RequestSourceCapability+0x64>
 801bdc0:	193b      	adds	r3, r7, r4
 801bdc2:	0018      	movs	r0, r3
 801bdc4:	f7ea fa02 	bl	80061cc <strlen>
 801bdc8:	193a      	adds	r2, r7, r4
 801bdca:	1dfb      	adds	r3, r7, #7
 801bdcc:	7819      	ldrb	r1, [r3, #0]
 801bdce:	9000      	str	r0, [sp, #0]
 801bdd0:	0013      	movs	r3, r2
 801bdd2:	2200      	movs	r2, #0
 801bdd4:	2006      	movs	r0, #6
 801bdd6:	f7f6 fe13 	bl	8012a00 <USBPD_TRACE_Add>
 801bdda:	e00a      	b.n	801bdf2 <USBPD_DPM_RequestSourceCapability+0x7a>
 801bddc:	230c      	movs	r3, #12
 801bdde:	18fa      	adds	r2, r7, r3
 801bde0:	1dfb      	adds	r3, r7, #7
 801bde2:	7819      	ldrb	r1, [r3, #0]
 801bde4:	2332      	movs	r3, #50	; 0x32
 801bde6:	9300      	str	r3, [sp, #0]
 801bde8:	0013      	movs	r3, r2
 801bdea:	2200      	movs	r2, #0
 801bdec:	2006      	movs	r0, #6
 801bdee:	f7f6 fe07 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801bdf2:	233f      	movs	r3, #63	; 0x3f
 801bdf4:	18fb      	adds	r3, r7, r3
 801bdf6:	781b      	ldrb	r3, [r3, #0]
}
 801bdf8:	0018      	movs	r0, r3
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	b010      	add	sp, #64	; 0x40
 801bdfe:	bdb0      	pop	{r4, r5, r7, pc}
 801be00:	080243f8 	.word	0x080243f8

0801be04 <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 801be04:	b5b0      	push	{r4, r5, r7, lr}
 801be06:	b092      	sub	sp, #72	; 0x48
 801be08:	af02      	add	r7, sp, #8
 801be0a:	0002      	movs	r2, r0
 801be0c:	6039      	str	r1, [r7, #0]
 801be0e:	1dfb      	adds	r3, r7, #7
 801be10:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 801be12:	253f      	movs	r5, #63	; 0x3f
 801be14:	197c      	adds	r4, r7, r5
 801be16:	003a      	movs	r2, r7
 801be18:	1dfb      	adds	r3, r7, #7
 801be1a:	781b      	ldrb	r3, [r3, #0]
 801be1c:	2106      	movs	r1, #6
 801be1e:	0018      	movs	r0, r3
 801be20:	f7e4 fc1c 	bl	800065c <USBPD_PE_Request_DataMessage>
 801be24:	0003      	movs	r3, r0
 801be26:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 801be28:	197b      	adds	r3, r7, r5
 801be2a:	781b      	ldrb	r3, [r3, #0]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d027      	beq.n	801be80 <USBPD_DPM_RequestAlert+0x7c>
 801be30:	4a17      	ldr	r2, [pc, #92]	; (801be90 <USBPD_DPM_RequestAlert+0x8c>)
 801be32:	240c      	movs	r4, #12
 801be34:	193b      	adds	r3, r7, r4
 801be36:	2132      	movs	r1, #50	; 0x32
 801be38:	0018      	movs	r0, r3
 801be3a:	f007 fbf3 	bl	8023624 <sniprintf>
 801be3e:	0002      	movs	r2, r0
 801be40:	213e      	movs	r1, #62	; 0x3e
 801be42:	187b      	adds	r3, r7, r1
 801be44:	701a      	strb	r2, [r3, #0]
 801be46:	187b      	adds	r3, r7, r1
 801be48:	781b      	ldrb	r3, [r3, #0]
 801be4a:	2b31      	cmp	r3, #49	; 0x31
 801be4c:	d80d      	bhi.n	801be6a <USBPD_DPM_RequestAlert+0x66>
 801be4e:	193b      	adds	r3, r7, r4
 801be50:	0018      	movs	r0, r3
 801be52:	f7ea f9bb 	bl	80061cc <strlen>
 801be56:	193a      	adds	r2, r7, r4
 801be58:	1dfb      	adds	r3, r7, #7
 801be5a:	7819      	ldrb	r1, [r3, #0]
 801be5c:	9000      	str	r0, [sp, #0]
 801be5e:	0013      	movs	r3, r2
 801be60:	2200      	movs	r2, #0
 801be62:	2006      	movs	r0, #6
 801be64:	f7f6 fdcc 	bl	8012a00 <USBPD_TRACE_Add>
 801be68:	e00a      	b.n	801be80 <USBPD_DPM_RequestAlert+0x7c>
 801be6a:	230c      	movs	r3, #12
 801be6c:	18fa      	adds	r2, r7, r3
 801be6e:	1dfb      	adds	r3, r7, #7
 801be70:	7819      	ldrb	r1, [r3, #0]
 801be72:	2332      	movs	r3, #50	; 0x32
 801be74:	9300      	str	r3, [sp, #0]
 801be76:	0013      	movs	r3, r2
 801be78:	2200      	movs	r2, #0
 801be7a:	2006      	movs	r0, #6
 801be7c:	f7f6 fdc0 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801be80:	233f      	movs	r3, #63	; 0x3f
 801be82:	18fb      	adds	r3, r7, r3
 801be84:	781b      	ldrb	r3, [r3, #0]
}
 801be86:	0018      	movs	r0, r3
 801be88:	46bd      	mov	sp, r7
 801be8a:	b010      	add	sp, #64	; 0x40
 801be8c:	bdb0      	pop	{r4, r5, r7, pc}
 801be8e:	46c0      	nop			; (mov r8, r8)
 801be90:	08024588 	.word	0x08024588

0801be94 <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 801be94:	b5b0      	push	{r4, r5, r7, lr}
 801be96:	b092      	sub	sp, #72	; 0x48
 801be98:	af02      	add	r7, sp, #8
 801be9a:	0002      	movs	r2, r0
 801be9c:	1dfb      	adds	r3, r7, #7
 801be9e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 801bea0:	253f      	movs	r5, #63	; 0x3f
 801bea2:	197c      	adds	r4, r7, r5
 801bea4:	1dfb      	adds	r3, r7, #7
 801bea6:	781b      	ldrb	r3, [r3, #0]
 801bea8:	2200      	movs	r2, #0
 801beaa:	2111      	movs	r1, #17
 801beac:	0018      	movs	r0, r3
 801beae:	f7e4 fb29 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801beb2:	0003      	movs	r3, r0
 801beb4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 801beb6:	197b      	adds	r3, r7, r5
 801beb8:	781b      	ldrb	r3, [r3, #0]
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d027      	beq.n	801bf0e <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 801bebe:	4a17      	ldr	r2, [pc, #92]	; (801bf1c <USBPD_DPM_RequestGetSourceCapabilityExt+0x88>)
 801bec0:	240c      	movs	r4, #12
 801bec2:	193b      	adds	r3, r7, r4
 801bec4:	2132      	movs	r1, #50	; 0x32
 801bec6:	0018      	movs	r0, r3
 801bec8:	f007 fbac 	bl	8023624 <sniprintf>
 801becc:	0002      	movs	r2, r0
 801bece:	213e      	movs	r1, #62	; 0x3e
 801bed0:	187b      	adds	r3, r7, r1
 801bed2:	701a      	strb	r2, [r3, #0]
 801bed4:	187b      	adds	r3, r7, r1
 801bed6:	781b      	ldrb	r3, [r3, #0]
 801bed8:	2b31      	cmp	r3, #49	; 0x31
 801beda:	d80d      	bhi.n	801bef8 <USBPD_DPM_RequestGetSourceCapabilityExt+0x64>
 801bedc:	193b      	adds	r3, r7, r4
 801bede:	0018      	movs	r0, r3
 801bee0:	f7ea f974 	bl	80061cc <strlen>
 801bee4:	193a      	adds	r2, r7, r4
 801bee6:	1dfb      	adds	r3, r7, #7
 801bee8:	7819      	ldrb	r1, [r3, #0]
 801beea:	9000      	str	r0, [sp, #0]
 801beec:	0013      	movs	r3, r2
 801beee:	2200      	movs	r2, #0
 801bef0:	2006      	movs	r0, #6
 801bef2:	f7f6 fd85 	bl	8012a00 <USBPD_TRACE_Add>
 801bef6:	e00a      	b.n	801bf0e <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 801bef8:	230c      	movs	r3, #12
 801befa:	18fa      	adds	r2, r7, r3
 801befc:	1dfb      	adds	r3, r7, #7
 801befe:	7819      	ldrb	r1, [r3, #0]
 801bf00:	2332      	movs	r3, #50	; 0x32
 801bf02:	9300      	str	r3, [sp, #0]
 801bf04:	0013      	movs	r3, r2
 801bf06:	2200      	movs	r2, #0
 801bf08:	2006      	movs	r0, #6
 801bf0a:	f7f6 fd79 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801bf0e:	233f      	movs	r3, #63	; 0x3f
 801bf10:	18fb      	adds	r3, r7, r3
 801bf12:	781b      	ldrb	r3, [r3, #0]
}
 801bf14:	0018      	movs	r0, r3
 801bf16:	46bd      	mov	sp, r7
 801bf18:	b010      	add	sp, #64	; 0x40
 801bf1a:	bdb0      	pop	{r4, r5, r7, pc}
 801bf1c:	080245a8 	.word	0x080245a8

0801bf20 <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 801bf20:	b5b0      	push	{r4, r5, r7, lr}
 801bf22:	b092      	sub	sp, #72	; 0x48
 801bf24:	af02      	add	r7, sp, #8
 801bf26:	0002      	movs	r2, r0
 801bf28:	1dfb      	adds	r3, r7, #7
 801bf2a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAPEXT, USBPD_SOPTYPE_SOP);
 801bf2c:	253f      	movs	r5, #63	; 0x3f
 801bf2e:	197c      	adds	r4, r7, r5
 801bf30:	1dfb      	adds	r3, r7, #7
 801bf32:	781b      	ldrb	r3, [r3, #0]
 801bf34:	2200      	movs	r2, #0
 801bf36:	2116      	movs	r1, #22
 801bf38:	0018      	movs	r0, r3
 801bf3a:	f7e4 fae3 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801bf3e:	0003      	movs	r3, r0
 801bf40:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA_EXT not accepted by the stack");
 801bf42:	197b      	adds	r3, r7, r5
 801bf44:	781b      	ldrb	r3, [r3, #0]
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d027      	beq.n	801bf9a <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 801bf4a:	4a17      	ldr	r2, [pc, #92]	; (801bfa8 <USBPD_DPM_RequestGetSinkCapabilityExt+0x88>)
 801bf4c:	240c      	movs	r4, #12
 801bf4e:	193b      	adds	r3, r7, r4
 801bf50:	2132      	movs	r1, #50	; 0x32
 801bf52:	0018      	movs	r0, r3
 801bf54:	f007 fb66 	bl	8023624 <sniprintf>
 801bf58:	0002      	movs	r2, r0
 801bf5a:	213e      	movs	r1, #62	; 0x3e
 801bf5c:	187b      	adds	r3, r7, r1
 801bf5e:	701a      	strb	r2, [r3, #0]
 801bf60:	187b      	adds	r3, r7, r1
 801bf62:	781b      	ldrb	r3, [r3, #0]
 801bf64:	2b31      	cmp	r3, #49	; 0x31
 801bf66:	d80d      	bhi.n	801bf84 <USBPD_DPM_RequestGetSinkCapabilityExt+0x64>
 801bf68:	193b      	adds	r3, r7, r4
 801bf6a:	0018      	movs	r0, r3
 801bf6c:	f7ea f92e 	bl	80061cc <strlen>
 801bf70:	193a      	adds	r2, r7, r4
 801bf72:	1dfb      	adds	r3, r7, #7
 801bf74:	7819      	ldrb	r1, [r3, #0]
 801bf76:	9000      	str	r0, [sp, #0]
 801bf78:	0013      	movs	r3, r2
 801bf7a:	2200      	movs	r2, #0
 801bf7c:	2006      	movs	r0, #6
 801bf7e:	f7f6 fd3f 	bl	8012a00 <USBPD_TRACE_Add>
 801bf82:	e00a      	b.n	801bf9a <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 801bf84:	230c      	movs	r3, #12
 801bf86:	18fa      	adds	r2, r7, r3
 801bf88:	1dfb      	adds	r3, r7, #7
 801bf8a:	7819      	ldrb	r1, [r3, #0]
 801bf8c:	2332      	movs	r3, #50	; 0x32
 801bf8e:	9300      	str	r3, [sp, #0]
 801bf90:	0013      	movs	r3, r2
 801bf92:	2200      	movs	r2, #0
 801bf94:	2006      	movs	r0, #6
 801bf96:	f7f6 fd33 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801bf9a:	233f      	movs	r3, #63	; 0x3f
 801bf9c:	18fb      	adds	r3, r7, r3
 801bf9e:	781b      	ldrb	r3, [r3, #0]
}
 801bfa0:	0018      	movs	r0, r3
 801bfa2:	46bd      	mov	sp, r7
 801bfa4:	b010      	add	sp, #64	; 0x40
 801bfa6:	bdb0      	pop	{r4, r5, r7, pc}
 801bfa8:	080245d4 	.word	0x080245d4

0801bfac <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 801bfac:	b590      	push	{r4, r7, lr}
 801bfae:	b093      	sub	sp, #76	; 0x4c
 801bfb0:	af02      	add	r7, sp, #8
 801bfb2:	603a      	str	r2, [r7, #0]
 801bfb4:	1dfb      	adds	r3, r7, #7
 801bfb6:	1c02      	adds	r2, r0, #0
 801bfb8:	701a      	strb	r2, [r3, #0]
 801bfba:	1dbb      	adds	r3, r7, #6
 801bfbc:	1c0a      	adds	r2, r1, #0
 801bfbe:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801bfc0:	213f      	movs	r1, #63	; 0x3f
 801bfc2:	187b      	adds	r3, r7, r1
 801bfc4:	2202      	movs	r2, #2
 801bfc6:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_SOP == SOPType)
 801bfc8:	1dbb      	adds	r3, r7, #6
 801bfca:	781b      	ldrb	r3, [r3, #0]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d10d      	bne.n	801bfec <USBPD_DPM_RequestGetManufacturerInfo+0x40>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 801bfd0:	187c      	adds	r4, r7, r1
 801bfd2:	683a      	ldr	r2, [r7, #0]
 801bfd4:	1dbb      	adds	r3, r7, #6
 801bfd6:	7819      	ldrb	r1, [r3, #0]
 801bfd8:	1dfb      	adds	r3, r7, #7
 801bfda:	7818      	ldrb	r0, [r3, #0]
 801bfdc:	2302      	movs	r3, #2
 801bfde:	9300      	str	r3, [sp, #0]
 801bfe0:	0013      	movs	r3, r2
 801bfe2:	2206      	movs	r2, #6
 801bfe4:	f7e4 fbc6 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801bfe8:	0003      	movs	r3, r0
 801bfea:	7023      	strb	r3, [r4, #0]
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 801bfec:	233f      	movs	r3, #63	; 0x3f
 801bfee:	18fb      	adds	r3, r7, r3
 801bff0:	781b      	ldrb	r3, [r3, #0]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d027      	beq.n	801c046 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 801bff6:	4a17      	ldr	r2, [pc, #92]	; (801c054 <USBPD_DPM_RequestGetManufacturerInfo+0xa8>)
 801bff8:	240c      	movs	r4, #12
 801bffa:	193b      	adds	r3, r7, r4
 801bffc:	2132      	movs	r1, #50	; 0x32
 801bffe:	0018      	movs	r0, r3
 801c000:	f007 fb10 	bl	8023624 <sniprintf>
 801c004:	0002      	movs	r2, r0
 801c006:	213e      	movs	r1, #62	; 0x3e
 801c008:	187b      	adds	r3, r7, r1
 801c00a:	701a      	strb	r2, [r3, #0]
 801c00c:	187b      	adds	r3, r7, r1
 801c00e:	781b      	ldrb	r3, [r3, #0]
 801c010:	2b31      	cmp	r3, #49	; 0x31
 801c012:	d80d      	bhi.n	801c030 <USBPD_DPM_RequestGetManufacturerInfo+0x84>
 801c014:	193b      	adds	r3, r7, r4
 801c016:	0018      	movs	r0, r3
 801c018:	f7ea f8d8 	bl	80061cc <strlen>
 801c01c:	193a      	adds	r2, r7, r4
 801c01e:	1dfb      	adds	r3, r7, #7
 801c020:	7819      	ldrb	r1, [r3, #0]
 801c022:	9000      	str	r0, [sp, #0]
 801c024:	0013      	movs	r3, r2
 801c026:	2200      	movs	r2, #0
 801c028:	2006      	movs	r0, #6
 801c02a:	f7f6 fce9 	bl	8012a00 <USBPD_TRACE_Add>
 801c02e:	e00a      	b.n	801c046 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 801c030:	230c      	movs	r3, #12
 801c032:	18fa      	adds	r2, r7, r3
 801c034:	1dfb      	adds	r3, r7, #7
 801c036:	7819      	ldrb	r1, [r3, #0]
 801c038:	2332      	movs	r3, #50	; 0x32
 801c03a:	9300      	str	r3, [sp, #0]
 801c03c:	0013      	movs	r3, r2
 801c03e:	2200      	movs	r2, #0
 801c040:	2006      	movs	r0, #6
 801c042:	f7f6 fcdd 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801c046:	233f      	movs	r3, #63	; 0x3f
 801c048:	18fb      	adds	r3, r7, r3
 801c04a:	781b      	ldrb	r3, [r3, #0]
}
 801c04c:	0018      	movs	r0, r3
 801c04e:	46bd      	mov	sp, r7
 801c050:	b011      	add	sp, #68	; 0x44
 801c052:	bd90      	pop	{r4, r7, pc}
 801c054:	08024600 	.word	0x08024600

0801c058 <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 801c058:	b5b0      	push	{r4, r5, r7, lr}
 801c05a:	b092      	sub	sp, #72	; 0x48
 801c05c:	af02      	add	r7, sp, #8
 801c05e:	0002      	movs	r2, r0
 801c060:	1dfb      	adds	r3, r7, #7
 801c062:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 801c064:	253f      	movs	r5, #63	; 0x3f
 801c066:	197c      	adds	r4, r7, r5
 801c068:	1dfb      	adds	r3, r7, #7
 801c06a:	781b      	ldrb	r3, [r3, #0]
 801c06c:	2200      	movs	r2, #0
 801c06e:	2114      	movs	r1, #20
 801c070:	0018      	movs	r0, r3
 801c072:	f7e4 fa47 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801c076:	0003      	movs	r3, r0
 801c078:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 801c07a:	197b      	adds	r3, r7, r5
 801c07c:	781b      	ldrb	r3, [r3, #0]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d027      	beq.n	801c0d2 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 801c082:	4a17      	ldr	r2, [pc, #92]	; (801c0e0 <USBPD_DPM_RequestGetPPS_Status+0x88>)
 801c084:	240c      	movs	r4, #12
 801c086:	193b      	adds	r3, r7, r4
 801c088:	2132      	movs	r1, #50	; 0x32
 801c08a:	0018      	movs	r0, r3
 801c08c:	f007 faca 	bl	8023624 <sniprintf>
 801c090:	0002      	movs	r2, r0
 801c092:	213e      	movs	r1, #62	; 0x3e
 801c094:	187b      	adds	r3, r7, r1
 801c096:	701a      	strb	r2, [r3, #0]
 801c098:	187b      	adds	r3, r7, r1
 801c09a:	781b      	ldrb	r3, [r3, #0]
 801c09c:	2b31      	cmp	r3, #49	; 0x31
 801c09e:	d80d      	bhi.n	801c0bc <USBPD_DPM_RequestGetPPS_Status+0x64>
 801c0a0:	193b      	adds	r3, r7, r4
 801c0a2:	0018      	movs	r0, r3
 801c0a4:	f7ea f892 	bl	80061cc <strlen>
 801c0a8:	193a      	adds	r2, r7, r4
 801c0aa:	1dfb      	adds	r3, r7, #7
 801c0ac:	7819      	ldrb	r1, [r3, #0]
 801c0ae:	9000      	str	r0, [sp, #0]
 801c0b0:	0013      	movs	r3, r2
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	2006      	movs	r0, #6
 801c0b6:	f7f6 fca3 	bl	8012a00 <USBPD_TRACE_Add>
 801c0ba:	e00a      	b.n	801c0d2 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 801c0bc:	230c      	movs	r3, #12
 801c0be:	18fa      	adds	r2, r7, r3
 801c0c0:	1dfb      	adds	r3, r7, #7
 801c0c2:	7819      	ldrb	r1, [r3, #0]
 801c0c4:	2332      	movs	r3, #50	; 0x32
 801c0c6:	9300      	str	r3, [sp, #0]
 801c0c8:	0013      	movs	r3, r2
 801c0ca:	2200      	movs	r2, #0
 801c0cc:	2006      	movs	r0, #6
 801c0ce:	f7f6 fc97 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801c0d2:	233f      	movs	r3, #63	; 0x3f
 801c0d4:	18fb      	adds	r3, r7, r3
 801c0d6:	781b      	ldrb	r3, [r3, #0]
}
 801c0d8:	0018      	movs	r0, r3
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	b010      	add	sp, #64	; 0x40
 801c0de:	bdb0      	pop	{r4, r5, r7, pc}
 801c0e0:	08024628 	.word	0x08024628

0801c0e4 <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 801c0e4:	b5b0      	push	{r4, r5, r7, lr}
 801c0e6:	b092      	sub	sp, #72	; 0x48
 801c0e8:	af02      	add	r7, sp, #8
 801c0ea:	0002      	movs	r2, r0
 801c0ec:	1dfb      	adds	r3, r7, #7
 801c0ee:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 801c0f0:	253f      	movs	r5, #63	; 0x3f
 801c0f2:	197c      	adds	r4, r7, r5
 801c0f4:	1dfb      	adds	r3, r7, #7
 801c0f6:	781b      	ldrb	r3, [r3, #0]
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	2112      	movs	r1, #18
 801c0fc:	0018      	movs	r0, r3
 801c0fe:	f7e4 fa01 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801c102:	0003      	movs	r3, r0
 801c104:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 801c106:	197b      	adds	r3, r7, r5
 801c108:	781b      	ldrb	r3, [r3, #0]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d027      	beq.n	801c15e <USBPD_DPM_RequestGetStatus+0x7a>
 801c10e:	4a17      	ldr	r2, [pc, #92]	; (801c16c <USBPD_DPM_RequestGetStatus+0x88>)
 801c110:	240c      	movs	r4, #12
 801c112:	193b      	adds	r3, r7, r4
 801c114:	2132      	movs	r1, #50	; 0x32
 801c116:	0018      	movs	r0, r3
 801c118:	f007 fa84 	bl	8023624 <sniprintf>
 801c11c:	0002      	movs	r2, r0
 801c11e:	213e      	movs	r1, #62	; 0x3e
 801c120:	187b      	adds	r3, r7, r1
 801c122:	701a      	strb	r2, [r3, #0]
 801c124:	187b      	adds	r3, r7, r1
 801c126:	781b      	ldrb	r3, [r3, #0]
 801c128:	2b31      	cmp	r3, #49	; 0x31
 801c12a:	d80d      	bhi.n	801c148 <USBPD_DPM_RequestGetStatus+0x64>
 801c12c:	193b      	adds	r3, r7, r4
 801c12e:	0018      	movs	r0, r3
 801c130:	f7ea f84c 	bl	80061cc <strlen>
 801c134:	193a      	adds	r2, r7, r4
 801c136:	1dfb      	adds	r3, r7, #7
 801c138:	7819      	ldrb	r1, [r3, #0]
 801c13a:	9000      	str	r0, [sp, #0]
 801c13c:	0013      	movs	r3, r2
 801c13e:	2200      	movs	r2, #0
 801c140:	2006      	movs	r0, #6
 801c142:	f7f6 fc5d 	bl	8012a00 <USBPD_TRACE_Add>
 801c146:	e00a      	b.n	801c15e <USBPD_DPM_RequestGetStatus+0x7a>
 801c148:	230c      	movs	r3, #12
 801c14a:	18fa      	adds	r2, r7, r3
 801c14c:	1dfb      	adds	r3, r7, #7
 801c14e:	7819      	ldrb	r1, [r3, #0]
 801c150:	2332      	movs	r3, #50	; 0x32
 801c152:	9300      	str	r3, [sp, #0]
 801c154:	0013      	movs	r3, r2
 801c156:	2200      	movs	r2, #0
 801c158:	2006      	movs	r0, #6
 801c15a:	f7f6 fc51 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801c15e:	233f      	movs	r3, #63	; 0x3f
 801c160:	18fb      	adds	r3, r7, r3
 801c162:	781b      	ldrb	r3, [r3, #0]
}
 801c164:	0018      	movs	r0, r3
 801c166:	46bd      	mov	sp, r7
 801c168:	b010      	add	sp, #64	; 0x40
 801c16a:	bdb0      	pop	{r4, r5, r7, pc}
 801c16c:	08024654 	.word	0x08024654

0801c170 <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 801c170:	b5b0      	push	{r4, r5, r7, lr}
 801c172:	b092      	sub	sp, #72	; 0x48
 801c174:	af02      	add	r7, sp, #8
 801c176:	0002      	movs	r2, r0
 801c178:	1dfb      	adds	r3, r7, #7
 801c17a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 801c17c:	253f      	movs	r5, #63	; 0x3f
 801c17e:	197c      	adds	r4, r7, r5
 801c180:	1dfb      	adds	r3, r7, #7
 801c182:	781b      	ldrb	r3, [r3, #0]
 801c184:	2200      	movs	r2, #0
 801c186:	2113      	movs	r1, #19
 801c188:	0018      	movs	r0, r3
 801c18a:	f7e4 f9bb 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801c18e:	0003      	movs	r3, r0
 801c190:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 801c192:	197b      	adds	r3, r7, r5
 801c194:	781b      	ldrb	r3, [r3, #0]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d027      	beq.n	801c1ea <USBPD_DPM_RequestFastRoleSwap+0x7a>
 801c19a:	4a17      	ldr	r2, [pc, #92]	; (801c1f8 <USBPD_DPM_RequestFastRoleSwap+0x88>)
 801c19c:	240c      	movs	r4, #12
 801c19e:	193b      	adds	r3, r7, r4
 801c1a0:	2132      	movs	r1, #50	; 0x32
 801c1a2:	0018      	movs	r0, r3
 801c1a4:	f007 fa3e 	bl	8023624 <sniprintf>
 801c1a8:	0002      	movs	r2, r0
 801c1aa:	213e      	movs	r1, #62	; 0x3e
 801c1ac:	187b      	adds	r3, r7, r1
 801c1ae:	701a      	strb	r2, [r3, #0]
 801c1b0:	187b      	adds	r3, r7, r1
 801c1b2:	781b      	ldrb	r3, [r3, #0]
 801c1b4:	2b31      	cmp	r3, #49	; 0x31
 801c1b6:	d80d      	bhi.n	801c1d4 <USBPD_DPM_RequestFastRoleSwap+0x64>
 801c1b8:	193b      	adds	r3, r7, r4
 801c1ba:	0018      	movs	r0, r3
 801c1bc:	f7ea f806 	bl	80061cc <strlen>
 801c1c0:	193a      	adds	r2, r7, r4
 801c1c2:	1dfb      	adds	r3, r7, #7
 801c1c4:	7819      	ldrb	r1, [r3, #0]
 801c1c6:	9000      	str	r0, [sp, #0]
 801c1c8:	0013      	movs	r3, r2
 801c1ca:	2200      	movs	r2, #0
 801c1cc:	2006      	movs	r0, #6
 801c1ce:	f7f6 fc17 	bl	8012a00 <USBPD_TRACE_Add>
 801c1d2:	e00a      	b.n	801c1ea <USBPD_DPM_RequestFastRoleSwap+0x7a>
 801c1d4:	230c      	movs	r3, #12
 801c1d6:	18fa      	adds	r2, r7, r3
 801c1d8:	1dfb      	adds	r3, r7, #7
 801c1da:	7819      	ldrb	r1, [r3, #0]
 801c1dc:	2332      	movs	r3, #50	; 0x32
 801c1de:	9300      	str	r3, [sp, #0]
 801c1e0:	0013      	movs	r3, r2
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	2006      	movs	r0, #6
 801c1e6:	f7f6 fc0b 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801c1ea:	233f      	movs	r3, #63	; 0x3f
 801c1ec:	18fb      	adds	r3, r7, r3
 801c1ee:	781b      	ldrb	r3, [r3, #0]
}
 801c1f0:	0018      	movs	r0, r3
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	b010      	add	sp, #64	; 0x40
 801c1f6:	bdb0      	pop	{r4, r5, r7, pc}
 801c1f8:	0802467c 	.word	0x0802467c

0801c1fc <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 801c1fc:	b5b0      	push	{r4, r5, r7, lr}
 801c1fe:	b092      	sub	sp, #72	; 0x48
 801c200:	af02      	add	r7, sp, #8
 801c202:	0002      	movs	r2, r0
 801c204:	1dfb      	adds	r3, r7, #7
 801c206:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 801c208:	253f      	movs	r5, #63	; 0x3f
 801c20a:	197c      	adds	r4, r7, r5
 801c20c:	1dfb      	adds	r3, r7, #7
 801c20e:	781b      	ldrb	r3, [r3, #0]
 801c210:	2200      	movs	r2, #0
 801c212:	2115      	movs	r1, #21
 801c214:	0018      	movs	r0, r3
 801c216:	f7e4 f975 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801c21a:	0003      	movs	r3, r0
 801c21c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 801c21e:	197b      	adds	r3, r7, r5
 801c220:	781b      	ldrb	r3, [r3, #0]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d027      	beq.n	801c276 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 801c226:	4a17      	ldr	r2, [pc, #92]	; (801c284 <USBPD_DPM_RequestGetCountryCodes+0x88>)
 801c228:	240c      	movs	r4, #12
 801c22a:	193b      	adds	r3, r7, r4
 801c22c:	2132      	movs	r1, #50	; 0x32
 801c22e:	0018      	movs	r0, r3
 801c230:	f007 f9f8 	bl	8023624 <sniprintf>
 801c234:	0002      	movs	r2, r0
 801c236:	213e      	movs	r1, #62	; 0x3e
 801c238:	187b      	adds	r3, r7, r1
 801c23a:	701a      	strb	r2, [r3, #0]
 801c23c:	187b      	adds	r3, r7, r1
 801c23e:	781b      	ldrb	r3, [r3, #0]
 801c240:	2b31      	cmp	r3, #49	; 0x31
 801c242:	d80d      	bhi.n	801c260 <USBPD_DPM_RequestGetCountryCodes+0x64>
 801c244:	193b      	adds	r3, r7, r4
 801c246:	0018      	movs	r0, r3
 801c248:	f7e9 ffc0 	bl	80061cc <strlen>
 801c24c:	193a      	adds	r2, r7, r4
 801c24e:	1dfb      	adds	r3, r7, #7
 801c250:	7819      	ldrb	r1, [r3, #0]
 801c252:	9000      	str	r0, [sp, #0]
 801c254:	0013      	movs	r3, r2
 801c256:	2200      	movs	r2, #0
 801c258:	2006      	movs	r0, #6
 801c25a:	f7f6 fbd1 	bl	8012a00 <USBPD_TRACE_Add>
 801c25e:	e00a      	b.n	801c276 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 801c260:	230c      	movs	r3, #12
 801c262:	18fa      	adds	r2, r7, r3
 801c264:	1dfb      	adds	r3, r7, #7
 801c266:	7819      	ldrb	r1, [r3, #0]
 801c268:	2332      	movs	r3, #50	; 0x32
 801c26a:	9300      	str	r3, [sp, #0]
 801c26c:	0013      	movs	r3, r2
 801c26e:	2200      	movs	r2, #0
 801c270:	2006      	movs	r0, #6
 801c272:	f7f6 fbc5 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801c276:	233f      	movs	r3, #63	; 0x3f
 801c278:	18fb      	adds	r3, r7, r3
 801c27a:	781b      	ldrb	r3, [r3, #0]
}
 801c27c:	0018      	movs	r0, r3
 801c27e:	46bd      	mov	sp, r7
 801c280:	b010      	add	sp, #64	; 0x40
 801c282:	bdb0      	pop	{r4, r5, r7, pc}
 801c284:	0802469c 	.word	0x0802469c

0801c288 <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 801c288:	b5b0      	push	{r4, r5, r7, lr}
 801c28a:	b092      	sub	sp, #72	; 0x48
 801c28c:	af02      	add	r7, sp, #8
 801c28e:	0002      	movs	r2, r0
 801c290:	1dfb      	adds	r3, r7, #7
 801c292:	701a      	strb	r2, [r3, #0]
 801c294:	1d3b      	adds	r3, r7, #4
 801c296:	1c0a      	adds	r2, r1, #0
 801c298:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 801c29a:	253f      	movs	r5, #63	; 0x3f
 801c29c:	197c      	adds	r4, r7, r5
 801c29e:	1d3a      	adds	r2, r7, #4
 801c2a0:	1dfb      	adds	r3, r7, #7
 801c2a2:	781b      	ldrb	r3, [r3, #0]
 801c2a4:	2107      	movs	r1, #7
 801c2a6:	0018      	movs	r0, r3
 801c2a8:	f7e4 f9d8 	bl	800065c <USBPD_PE_Request_DataMessage>
 801c2ac:	0003      	movs	r3, r0
 801c2ae:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 801c2b0:	197b      	adds	r3, r7, r5
 801c2b2:	781b      	ldrb	r3, [r3, #0]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d027      	beq.n	801c308 <USBPD_DPM_RequestGetCountryInfo+0x80>
 801c2b8:	4a17      	ldr	r2, [pc, #92]	; (801c318 <USBPD_DPM_RequestGetCountryInfo+0x90>)
 801c2ba:	240c      	movs	r4, #12
 801c2bc:	193b      	adds	r3, r7, r4
 801c2be:	2132      	movs	r1, #50	; 0x32
 801c2c0:	0018      	movs	r0, r3
 801c2c2:	f007 f9af 	bl	8023624 <sniprintf>
 801c2c6:	0002      	movs	r2, r0
 801c2c8:	213e      	movs	r1, #62	; 0x3e
 801c2ca:	187b      	adds	r3, r7, r1
 801c2cc:	701a      	strb	r2, [r3, #0]
 801c2ce:	187b      	adds	r3, r7, r1
 801c2d0:	781b      	ldrb	r3, [r3, #0]
 801c2d2:	2b31      	cmp	r3, #49	; 0x31
 801c2d4:	d80d      	bhi.n	801c2f2 <USBPD_DPM_RequestGetCountryInfo+0x6a>
 801c2d6:	193b      	adds	r3, r7, r4
 801c2d8:	0018      	movs	r0, r3
 801c2da:	f7e9 ff77 	bl	80061cc <strlen>
 801c2de:	193a      	adds	r2, r7, r4
 801c2e0:	1dfb      	adds	r3, r7, #7
 801c2e2:	7819      	ldrb	r1, [r3, #0]
 801c2e4:	9000      	str	r0, [sp, #0]
 801c2e6:	0013      	movs	r3, r2
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	2006      	movs	r0, #6
 801c2ec:	f7f6 fb88 	bl	8012a00 <USBPD_TRACE_Add>
 801c2f0:	e00a      	b.n	801c308 <USBPD_DPM_RequestGetCountryInfo+0x80>
 801c2f2:	230c      	movs	r3, #12
 801c2f4:	18fa      	adds	r2, r7, r3
 801c2f6:	1dfb      	adds	r3, r7, #7
 801c2f8:	7819      	ldrb	r1, [r3, #0]
 801c2fa:	2332      	movs	r3, #50	; 0x32
 801c2fc:	9300      	str	r3, [sp, #0]
 801c2fe:	0013      	movs	r3, r2
 801c300:	2200      	movs	r2, #0
 801c302:	2006      	movs	r0, #6
 801c304:	f7f6 fb7c 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801c308:	233f      	movs	r3, #63	; 0x3f
 801c30a:	18fb      	adds	r3, r7, r3
 801c30c:	781b      	ldrb	r3, [r3, #0]
}
 801c30e:	0018      	movs	r0, r3
 801c310:	46bd      	mov	sp, r7
 801c312:	b010      	add	sp, #64	; 0x40
 801c314:	bdb0      	pop	{r4, r5, r7, pc}
 801c316:	46c0      	nop			; (mov r8, r8)
 801c318:	080246c8 	.word	0x080246c8

0801c31c <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 801c31c:	b5b0      	push	{r4, r5, r7, lr}
 801c31e:	b092      	sub	sp, #72	; 0x48
 801c320:	af02      	add	r7, sp, #8
 801c322:	0002      	movs	r2, r0
 801c324:	6039      	str	r1, [r7, #0]
 801c326:	1dfb      	adds	r3, r7, #7
 801c328:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 801c32a:	253f      	movs	r5, #63	; 0x3f
 801c32c:	197c      	adds	r4, r7, r5
 801c32e:	683a      	ldr	r2, [r7, #0]
 801c330:	1dfb      	adds	r3, r7, #7
 801c332:	7818      	ldrb	r0, [r3, #0]
 801c334:	2301      	movs	r3, #1
 801c336:	9300      	str	r3, [sp, #0]
 801c338:	0013      	movs	r3, r2
 801c33a:	2203      	movs	r2, #3
 801c33c:	2100      	movs	r1, #0
 801c33e:	f7e4 fa19 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801c342:	0003      	movs	r3, r0
 801c344:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 801c346:	197b      	adds	r3, r7, r5
 801c348:	781b      	ldrb	r3, [r3, #0]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d027      	beq.n	801c39e <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801c34e:	4a17      	ldr	r2, [pc, #92]	; (801c3ac <USBPD_DPM_RequestGetBatteryCapability+0x90>)
 801c350:	240c      	movs	r4, #12
 801c352:	193b      	adds	r3, r7, r4
 801c354:	2132      	movs	r1, #50	; 0x32
 801c356:	0018      	movs	r0, r3
 801c358:	f007 f964 	bl	8023624 <sniprintf>
 801c35c:	0002      	movs	r2, r0
 801c35e:	213e      	movs	r1, #62	; 0x3e
 801c360:	187b      	adds	r3, r7, r1
 801c362:	701a      	strb	r2, [r3, #0]
 801c364:	187b      	adds	r3, r7, r1
 801c366:	781b      	ldrb	r3, [r3, #0]
 801c368:	2b31      	cmp	r3, #49	; 0x31
 801c36a:	d80d      	bhi.n	801c388 <USBPD_DPM_RequestGetBatteryCapability+0x6c>
 801c36c:	193b      	adds	r3, r7, r4
 801c36e:	0018      	movs	r0, r3
 801c370:	f7e9 ff2c 	bl	80061cc <strlen>
 801c374:	193a      	adds	r2, r7, r4
 801c376:	1dfb      	adds	r3, r7, #7
 801c378:	7819      	ldrb	r1, [r3, #0]
 801c37a:	9000      	str	r0, [sp, #0]
 801c37c:	0013      	movs	r3, r2
 801c37e:	2200      	movs	r2, #0
 801c380:	2006      	movs	r0, #6
 801c382:	f7f6 fb3d 	bl	8012a00 <USBPD_TRACE_Add>
 801c386:	e00a      	b.n	801c39e <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801c388:	230c      	movs	r3, #12
 801c38a:	18fa      	adds	r2, r7, r3
 801c38c:	1dfb      	adds	r3, r7, #7
 801c38e:	7819      	ldrb	r1, [r3, #0]
 801c390:	2332      	movs	r3, #50	; 0x32
 801c392:	9300      	str	r3, [sp, #0]
 801c394:	0013      	movs	r3, r2
 801c396:	2200      	movs	r2, #0
 801c398:	2006      	movs	r0, #6
 801c39a:	f7f6 fb31 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801c39e:	233f      	movs	r3, #63	; 0x3f
 801c3a0:	18fb      	adds	r3, r7, r3
 801c3a2:	781b      	ldrb	r3, [r3, #0]
}
 801c3a4:	0018      	movs	r0, r3
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	b010      	add	sp, #64	; 0x40
 801c3aa:	bdb0      	pop	{r4, r5, r7, pc}
 801c3ac:	080246f4 	.word	0x080246f4

0801c3b0 <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 801c3b0:	b5b0      	push	{r4, r5, r7, lr}
 801c3b2:	b092      	sub	sp, #72	; 0x48
 801c3b4:	af02      	add	r7, sp, #8
 801c3b6:	0002      	movs	r2, r0
 801c3b8:	6039      	str	r1, [r7, #0]
 801c3ba:	1dfb      	adds	r3, r7, #7
 801c3bc:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 801c3be:	253f      	movs	r5, #63	; 0x3f
 801c3c0:	197c      	adds	r4, r7, r5
 801c3c2:	683a      	ldr	r2, [r7, #0]
 801c3c4:	1dfb      	adds	r3, r7, #7
 801c3c6:	7818      	ldrb	r0, [r3, #0]
 801c3c8:	2301      	movs	r3, #1
 801c3ca:	9300      	str	r3, [sp, #0]
 801c3cc:	0013      	movs	r3, r2
 801c3ce:	2204      	movs	r2, #4
 801c3d0:	2100      	movs	r1, #0
 801c3d2:	f7e4 f9cf 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801c3d6:	0003      	movs	r3, r0
 801c3d8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 801c3da:	197b      	adds	r3, r7, r5
 801c3dc:	781b      	ldrb	r3, [r3, #0]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d027      	beq.n	801c432 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801c3e2:	4a17      	ldr	r2, [pc, #92]	; (801c440 <USBPD_DPM_RequestGetBatteryStatus+0x90>)
 801c3e4:	240c      	movs	r4, #12
 801c3e6:	193b      	adds	r3, r7, r4
 801c3e8:	2132      	movs	r1, #50	; 0x32
 801c3ea:	0018      	movs	r0, r3
 801c3ec:	f007 f91a 	bl	8023624 <sniprintf>
 801c3f0:	0002      	movs	r2, r0
 801c3f2:	213e      	movs	r1, #62	; 0x3e
 801c3f4:	187b      	adds	r3, r7, r1
 801c3f6:	701a      	strb	r2, [r3, #0]
 801c3f8:	187b      	adds	r3, r7, r1
 801c3fa:	781b      	ldrb	r3, [r3, #0]
 801c3fc:	2b31      	cmp	r3, #49	; 0x31
 801c3fe:	d80d      	bhi.n	801c41c <USBPD_DPM_RequestGetBatteryStatus+0x6c>
 801c400:	193b      	adds	r3, r7, r4
 801c402:	0018      	movs	r0, r3
 801c404:	f7e9 fee2 	bl	80061cc <strlen>
 801c408:	193a      	adds	r2, r7, r4
 801c40a:	1dfb      	adds	r3, r7, #7
 801c40c:	7819      	ldrb	r1, [r3, #0]
 801c40e:	9000      	str	r0, [sp, #0]
 801c410:	0013      	movs	r3, r2
 801c412:	2200      	movs	r2, #0
 801c414:	2006      	movs	r0, #6
 801c416:	f7f6 faf3 	bl	8012a00 <USBPD_TRACE_Add>
 801c41a:	e00a      	b.n	801c432 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801c41c:	230c      	movs	r3, #12
 801c41e:	18fa      	adds	r2, r7, r3
 801c420:	1dfb      	adds	r3, r7, #7
 801c422:	7819      	ldrb	r1, [r3, #0]
 801c424:	2332      	movs	r3, #50	; 0x32
 801c426:	9300      	str	r3, [sp, #0]
 801c428:	0013      	movs	r3, r2
 801c42a:	2200      	movs	r2, #0
 801c42c:	2006      	movs	r0, #6
 801c42e:	f7f6 fae7 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801c432:	233f      	movs	r3, #63	; 0x3f
 801c434:	18fb      	adds	r3, r7, r3
 801c436:	781b      	ldrb	r3, [r3, #0]
}
 801c438:	0018      	movs	r0, r3
 801c43a:	46bd      	mov	sp, r7
 801c43c:	b010      	add	sp, #64	; 0x40
 801c43e:	bdb0      	pop	{r4, r5, r7, pc}
 801c440:	08024720 	.word	0x08024720

0801c444 <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 801c444:	b590      	push	{r4, r7, lr}
 801c446:	b093      	sub	sp, #76	; 0x4c
 801c448:	af02      	add	r7, sp, #8
 801c44a:	0002      	movs	r2, r0
 801c44c:	1dfb      	adds	r3, r7, #7
 801c44e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801c450:	213f      	movs	r1, #63	; 0x3f
 801c452:	187b      	adds	r3, r7, r1
 801c454:	2202      	movs	r2, #2
 801c456:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 801c458:	187b      	adds	r3, r7, r1
 801c45a:	781b      	ldrb	r3, [r3, #0]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d027      	beq.n	801c4b0 <USBPD_DPM_RequestSecurityRequest+0x6c>
 801c460:	4a17      	ldr	r2, [pc, #92]	; (801c4c0 <USBPD_DPM_RequestSecurityRequest+0x7c>)
 801c462:	240c      	movs	r4, #12
 801c464:	193b      	adds	r3, r7, r4
 801c466:	2132      	movs	r1, #50	; 0x32
 801c468:	0018      	movs	r0, r3
 801c46a:	f007 f8db 	bl	8023624 <sniprintf>
 801c46e:	0002      	movs	r2, r0
 801c470:	213e      	movs	r1, #62	; 0x3e
 801c472:	187b      	adds	r3, r7, r1
 801c474:	701a      	strb	r2, [r3, #0]
 801c476:	187b      	adds	r3, r7, r1
 801c478:	781b      	ldrb	r3, [r3, #0]
 801c47a:	2b31      	cmp	r3, #49	; 0x31
 801c47c:	d80d      	bhi.n	801c49a <USBPD_DPM_RequestSecurityRequest+0x56>
 801c47e:	193b      	adds	r3, r7, r4
 801c480:	0018      	movs	r0, r3
 801c482:	f7e9 fea3 	bl	80061cc <strlen>
 801c486:	193a      	adds	r2, r7, r4
 801c488:	1dfb      	adds	r3, r7, #7
 801c48a:	7819      	ldrb	r1, [r3, #0]
 801c48c:	9000      	str	r0, [sp, #0]
 801c48e:	0013      	movs	r3, r2
 801c490:	2200      	movs	r2, #0
 801c492:	2006      	movs	r0, #6
 801c494:	f7f6 fab4 	bl	8012a00 <USBPD_TRACE_Add>
 801c498:	e00a      	b.n	801c4b0 <USBPD_DPM_RequestSecurityRequest+0x6c>
 801c49a:	230c      	movs	r3, #12
 801c49c:	18fa      	adds	r2, r7, r3
 801c49e:	1dfb      	adds	r3, r7, #7
 801c4a0:	7819      	ldrb	r1, [r3, #0]
 801c4a2:	2332      	movs	r3, #50	; 0x32
 801c4a4:	9300      	str	r3, [sp, #0]
 801c4a6:	0013      	movs	r3, r2
 801c4a8:	2200      	movs	r2, #0
 801c4aa:	2006      	movs	r0, #6
 801c4ac:	f7f6 faa8 	bl	8012a00 <USBPD_TRACE_Add>
  return _status;
 801c4b0:	233f      	movs	r3, #63	; 0x3f
 801c4b2:	18fb      	adds	r3, r7, r3
 801c4b4:	781b      	ldrb	r3, [r3, #0]
}
 801c4b6:	0018      	movs	r0, r3
 801c4b8:	46bd      	mov	sp, r7
 801c4ba:	b011      	add	sp, #68	; 0x44
 801c4bc:	bd90      	pop	{r4, r7, pc}
 801c4be:	46c0      	nop			; (mov r8, r8)
 801c4c0:	08024750 	.word	0x08024750

0801c4c4 <USBPD_DPM_RequestSRCPDO>:
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @param  RequestedCurrent Requested current (in MA and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSRCPDO(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage, uint16_t RequestedCurrent)
{
 801c4c4:	b5b0      	push	{r4, r5, r7, lr}
 801c4c6:	b094      	sub	sp, #80	; 0x50
 801c4c8:	af02      	add	r7, sp, #8
 801c4ca:	0005      	movs	r5, r0
 801c4cc:	000c      	movs	r4, r1
 801c4ce:	0010      	movs	r0, r2
 801c4d0:	0019      	movs	r1, r3
 801c4d2:	1dfb      	adds	r3, r7, #7
 801c4d4:	1c2a      	adds	r2, r5, #0
 801c4d6:	701a      	strb	r2, [r3, #0]
 801c4d8:	1dbb      	adds	r3, r7, #6
 801c4da:	1c22      	adds	r2, r4, #0
 801c4dc:	701a      	strb	r2, [r3, #0]
 801c4de:	1d3b      	adds	r3, r7, #4
 801c4e0:	1c02      	adds	r2, r0, #0
 801c4e2:	801a      	strh	r2, [r3, #0]
 801c4e4:	1cbb      	adds	r3, r7, #2
 801c4e6:	1c0a      	adds	r2, r1, #0
 801c4e8:	801a      	strh	r2, [r3, #0]
	USBPD_StatusTypeDef _status = USBPD_ERROR;
 801c4ea:	2547      	movs	r5, #71	; 0x47
 801c4ec:	197b      	adds	r3, r7, r5
 801c4ee:	2202      	movs	r2, #2
 801c4f0:	701a      	strb	r2, [r3, #0]
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;

	/* Initialize RDO object*/
	rdo.d32 = 0;
 801c4f2:	2300      	movs	r3, #0
 801c4f4:	643b      	str	r3, [r7, #64]	; 0x40

	USER_SERV_SNK_BuildRequestedRDO(PortNum,IndexSrcPDO, RequestedVoltage, RequestedCurrent, &rdo, &pdo_object);
 801c4f6:	1dbb      	adds	r3, r7, #6
 801c4f8:	781b      	ldrb	r3, [r3, #0]
 801c4fa:	b299      	uxth	r1, r3
 801c4fc:	1cbb      	adds	r3, r7, #2
 801c4fe:	881c      	ldrh	r4, [r3, #0]
 801c500:	1d3b      	adds	r3, r7, #4
 801c502:	881a      	ldrh	r2, [r3, #0]
 801c504:	1dfb      	adds	r3, r7, #7
 801c506:	7818      	ldrb	r0, [r3, #0]
 801c508:	233c      	movs	r3, #60	; 0x3c
 801c50a:	18fb      	adds	r3, r7, r3
 801c50c:	9301      	str	r3, [sp, #4]
 801c50e:	2340      	movs	r3, #64	; 0x40
 801c510:	18fb      	adds	r3, r7, r3
 801c512:	9300      	str	r3, [sp, #0]
 801c514:	0023      	movs	r3, r4
 801c516:	f000 ff53 	bl	801d3c0 <USER_SERV_SNK_BuildRequestedRDO>

	/*Send requested rdo to Policy Engine */
	_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 801c51a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c51c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c51e:	197c      	adds	r4, r7, r5
 801c520:	1dfb      	adds	r3, r7, #7
 801c522:	781b      	ldrb	r3, [r3, #0]
 801c524:	0018      	movs	r0, r3
 801c526:	f7e4 f8ef 	bl	8000708 <USBPD_PE_Send_Request>
 801c52a:	0003      	movs	r3, r0
 801c52c:	7023      	strb	r3, [r4, #0]

    /* USER CODE END USBPD_DPM_RequestMessageRequest */
	DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 801c52e:	197b      	adds	r3, r7, r5
 801c530:	781b      	ldrb	r3, [r3, #0]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d027      	beq.n	801c586 <USBPD_DPM_RequestSRCPDO+0xc2>
 801c536:	4a17      	ldr	r2, [pc, #92]	; (801c594 <USBPD_DPM_RequestSRCPDO+0xd0>)
 801c538:	2408      	movs	r4, #8
 801c53a:	193b      	adds	r3, r7, r4
 801c53c:	2132      	movs	r1, #50	; 0x32
 801c53e:	0018      	movs	r0, r3
 801c540:	f007 f870 	bl	8023624 <sniprintf>
 801c544:	0002      	movs	r2, r0
 801c546:	2146      	movs	r1, #70	; 0x46
 801c548:	187b      	adds	r3, r7, r1
 801c54a:	701a      	strb	r2, [r3, #0]
 801c54c:	187b      	adds	r3, r7, r1
 801c54e:	781b      	ldrb	r3, [r3, #0]
 801c550:	2b31      	cmp	r3, #49	; 0x31
 801c552:	d80d      	bhi.n	801c570 <USBPD_DPM_RequestSRCPDO+0xac>
 801c554:	193b      	adds	r3, r7, r4
 801c556:	0018      	movs	r0, r3
 801c558:	f7e9 fe38 	bl	80061cc <strlen>
 801c55c:	193a      	adds	r2, r7, r4
 801c55e:	1dfb      	adds	r3, r7, #7
 801c560:	7819      	ldrb	r1, [r3, #0]
 801c562:	9000      	str	r0, [sp, #0]
 801c564:	0013      	movs	r3, r2
 801c566:	2200      	movs	r2, #0
 801c568:	2006      	movs	r0, #6
 801c56a:	f7f6 fa49 	bl	8012a00 <USBPD_TRACE_Add>
 801c56e:	e00a      	b.n	801c586 <USBPD_DPM_RequestSRCPDO+0xc2>
 801c570:	2308      	movs	r3, #8
 801c572:	18fa      	adds	r2, r7, r3
 801c574:	1dfb      	adds	r3, r7, #7
 801c576:	7819      	ldrb	r1, [r3, #0]
 801c578:	2332      	movs	r3, #50	; 0x32
 801c57a:	9300      	str	r3, [sp, #0]
 801c57c:	0013      	movs	r3, r2
 801c57e:	2200      	movs	r2, #0
 801c580:	2006      	movs	r0, #6
 801c582:	f7f6 fa3d 	bl	8012a00 <USBPD_TRACE_Add>
	return _status;
 801c586:	2347      	movs	r3, #71	; 0x47
 801c588:	18fb      	adds	r3, r7, r3
 801c58a:	781b      	ldrb	r3, [r3, #0]
}
 801c58c:	0018      	movs	r0, r3
 801c58e:	46bd      	mov	sp, r7
 801c590:	b012      	add	sp, #72	; 0x48
 801c592:	bdb0      	pop	{r4, r5, r7, pc}
 801c594:	080242fc 	.word	0x080242fc

0801c598 <BSP_PWR_VBUSGetVoltage>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Voltage measured voltage level (in mV)
  */
__weak uint32_t BSP_PWR_VBUSGetVoltage(uint32_t PortId)
{
 801c598:	b580      	push	{r7, lr}
 801c59a:	b084      	sub	sp, #16
 801c59c:	af00      	add	r7, sp, #0
 801c59e:	6078      	str	r0, [r7, #4]
  //PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetVoltage");
/* USER CODE BEGIN BSP_PWR_VBUSGetVoltage */
  uint32_t voltage = 0;
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetVoltage(PortId, &voltage);
 801c5a4:	230c      	movs	r3, #12
 801c5a6:	18fa      	adds	r2, r7, r3
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	0011      	movs	r1, r2
 801c5ac:	0018      	movs	r0, r3
 801c5ae:	f000 f865 	bl	801c67c <BSP_USBPD_PWR_VBUSGetVoltage>
  return voltage;
 801c5b2:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetVoltage */
}
 801c5b4:	0018      	movs	r0, r3
 801c5b6:	46bd      	mov	sp, r7
 801c5b8:	b004      	add	sp, #16
 801c5ba:	bd80      	pop	{r7, pc}

0801c5bc <BSP_PWR_VBUSGetCurrent>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Current measured current level (in mA)
  */
__weak int32_t BSP_PWR_VBUSGetCurrent(uint32_t PortId)
{
 801c5bc:	b580      	push	{r7, lr}
 801c5be:	b084      	sub	sp, #16
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	6078      	str	r0, [r7, #4]
  //PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetCurrent");
/* USER CODE BEGIN BSP_PWR_VBUSGetCurrent */
  int32_t current = 0;
 801c5c4:	2300      	movs	r3, #0
 801c5c6:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetCurrent(PortId, &current);
 801c5c8:	230c      	movs	r3, #12
 801c5ca:	18fa      	adds	r2, r7, r3
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	0011      	movs	r1, r2
 801c5d0:	0018      	movs	r0, r3
 801c5d2:	f000 f88f 	bl	801c6f4 <BSP_USBPD_PWR_VBUSGetCurrent>

  return current;
 801c5d6:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetCurrent */
}
 801c5d8:	0018      	movs	r0, r3
 801c5da:	46bd      	mov	sp, r7
 801c5dc:	b004      	add	sp, #16
 801c5de:	bd80      	pop	{r7, pc}

0801c5e0 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b084      	sub	sp, #16
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	2b01      	cmp	r3, #1
 801c5f0:	d902      	bls.n	801c5f8 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c5f2:	2302      	movs	r3, #2
 801c5f4:	425b      	negs	r3, r3
 801c5f6:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801c5f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801c5fa:	0018      	movs	r0, r3
 801c5fc:	46bd      	mov	sp, r7
 801c5fe:	b004      	add	sp, #16
 801c600:	bd80      	pop	{r7, pc}
	...

0801c604 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801c604:	b580      	push	{r7, lr}
 801c606:	b086      	sub	sp, #24
 801c608:	af02      	add	r7, sp, #8
 801c60a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801c60c:	2300      	movs	r3, #0
 801c60e:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	2b01      	cmp	r3, #1
 801c614:	d903      	bls.n	801c61e <BSP_USBPD_PWR_VBUSInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c616:	2302      	movs	r3, #2
 801c618:	425b      	negs	r3, r3
 801c61a:	60fb      	str	r3, [r7, #12]
 801c61c:	e008      	b.n	801c630 <BSP_USBPD_PWR_VBUSInit+0x2c>
  {
    /* !!!
      BSP_PWR_VBUSInit is obsolete. You may need to move your user code
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	b2d9      	uxtb	r1, r3
 801c622:	4b06      	ldr	r3, [pc, #24]	; (801c63c <BSP_USBPD_PWR_VBUSInit+0x38>)
 801c624:	2225      	movs	r2, #37	; 0x25
 801c626:	9200      	str	r2, [sp, #0]
 801c628:	2200      	movs	r2, #0
 801c62a:	2006      	movs	r0, #6
 801c62c:	f7f6 f9e8 	bl	8012a00 <USBPD_TRACE_Add>
  }

  return ret;
 801c630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801c632:	0018      	movs	r0, r3
 801c634:	46bd      	mov	sp, r7
 801c636:	b004      	add	sp, #16
 801c638:	bd80      	pop	{r7, pc}
 801c63a:	46c0      	nop			; (mov r8, r8)
 801c63c:	08024adc 	.word	0x08024adc

0801c640 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801c640:	b580      	push	{r7, lr}
 801c642:	b086      	sub	sp, #24
 801c644:	af02      	add	r7, sp, #8
 801c646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801c648:	230b      	movs	r3, #11
 801c64a:	425b      	negs	r3, r3
 801c64c:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	2b01      	cmp	r3, #1
 801c652:	d902      	bls.n	801c65a <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c654:	2302      	movs	r3, #2
 801c656:	425b      	negs	r3, r3
 801c658:	60fb      	str	r3, [r7, #12]
  }
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	b2d9      	uxtb	r1, r3
 801c65e:	4b06      	ldr	r3, [pc, #24]	; (801c678 <BSP_USBPD_PWR_VBUSDeInit+0x38>)
 801c660:	2227      	movs	r2, #39	; 0x27
 801c662:	9200      	str	r2, [sp, #0]
 801c664:	2200      	movs	r2, #0
 801c666:	2006      	movs	r0, #6
 801c668:	f7f6 f9ca 	bl	8012a00 <USBPD_TRACE_Add>
  return ret;
 801c66c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801c66e:	0018      	movs	r0, r3
 801c670:	46bd      	mov	sp, r7
 801c672:	b004      	add	sp, #16
 801c674:	bd80      	pop	{r7, pc}
 801c676:	46c0      	nop			; (mov r8, r8)
 801c678:	08024b04 	.word	0x08024b04

0801c67c <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801c67c:	b580      	push	{r7, lr}
 801c67e:	b086      	sub	sp, #24
 801c680:	af00      	add	r7, sp, #0
 801c682:	6078      	str	r0, [r7, #4]
 801c684:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid */
  int32_t ret = BSP_ERROR_NONE;
 801c686:	2300      	movs	r3, #0
 801c688:	617b      	str	r3, [r7, #20]
  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	2b01      	cmp	r3, #1
 801c68e:	d802      	bhi.n	801c696 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801c690:	683b      	ldr	r3, [r7, #0]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d106      	bne.n	801c6a4 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  {
	  ret = BSP_ERROR_WRONG_PARAM;
 801c696:	2302      	movs	r3, #2
 801c698:	425b      	negs	r3, r3
 801c69a:	617b      	str	r3, [r7, #20]
	  *pVoltage = 0;
 801c69c:	683b      	ldr	r3, [r7, #0]
 801c69e:	2200      	movs	r2, #0
 801c6a0:	601a      	str	r2, [r3, #0]
 801c6a2:	e017      	b.n	801c6d4 <BSP_USBPD_PWR_VBUSGetVoltage+0x58>
  {
	  uint32_t vadc;
	  uint32_t vsense;

	  //Calculate vadc(mV) on ADC pin based on ADC resolution and reference voltage VDDA
	  vadc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801c6a4:	4b0e      	ldr	r3, [pc, #56]	; (801c6e0 <BSP_USBPD_PWR_VBUSGetVoltage+0x64>)
 801c6a6:	881b      	ldrh	r3, [r3, #0]
 801c6a8:	b29b      	uxth	r3, r3
 801c6aa:	001a      	movs	r2, r3
 801c6ac:	4b0d      	ldr	r3, [pc, #52]	; (801c6e4 <BSP_USBPD_PWR_VBUSGetVoltage+0x68>)
 801c6ae:	4353      	muls	r3, r2
 801c6b0:	490d      	ldr	r1, [pc, #52]	; (801c6e8 <BSP_USBPD_PWR_VBUSGetVoltage+0x6c>)
 801c6b2:	0018      	movs	r0, r3
 801c6b4:	f7e9 fd9c 	bl	80061f0 <__udivsi3>
 801c6b8:	0003      	movs	r3, r0
 801c6ba:	613b      	str	r3, [r7, #16]
			  LL_ADC_RESOLUTION_12B); /* mV */


	  /* Calculate VBUS on PD_sense line*/
	  /* Value is multiplied by 5.97 (Divider R_B/R_A (40.2K/200K) for VSENSE) */
	  vsense = vadc * (R_A + R_B)/R_B;
 801c6bc:	693b      	ldr	r3, [r7, #16]
 801c6be:	4a0b      	ldr	r2, [pc, #44]	; (801c6ec <BSP_USBPD_PWR_VBUSGetVoltage+0x70>)
 801c6c0:	4353      	muls	r3, r2
 801c6c2:	490b      	ldr	r1, [pc, #44]	; (801c6f0 <BSP_USBPD_PWR_VBUSGetVoltage+0x74>)
 801c6c4:	0018      	movs	r0, r3
 801c6c6:	f7e9 fd93 	bl	80061f0 <__udivsi3>
 801c6ca:	0003      	movs	r3, r0
 801c6cc:	60fb      	str	r3, [r7, #12]
	  *pVoltage = vsense;
 801c6ce:	683b      	ldr	r3, [r7, #0]
 801c6d0:	68fa      	ldr	r2, [r7, #12]
 801c6d2:	601a      	str	r2, [r3, #0]
  }
  return ret;
 801c6d4:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801c6d6:	0018      	movs	r0, r3
 801c6d8:	46bd      	mov	sp, r7
 801c6da:	b006      	add	sp, #24
 801c6dc:	bd80      	pop	{r7, pc}
 801c6de:	46c0      	nop			; (mov r8, r8)
 801c6e0:	20000338 	.word	0x20000338
 801c6e4:	00000ce4 	.word	0x00000ce4
 801c6e8:	00000fff 	.word	0x00000fff
 801c6ec:	000399e0 	.word	0x000399e0
 801c6f0:	00008ca0 	.word	0x00008ca0

0801c6f4 <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t Instance, int32_t *pCurrent)
{
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b086      	sub	sp, #24
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	6078      	str	r0, [r7, #4]
 801c6fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	2b01      	cmp	r3, #1
 801c702:	d802      	bhi.n	801c70a <BSP_USBPD_PWR_VBUSGetCurrent+0x16>
 801c704:	683b      	ldr	r3, [r7, #0]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d106      	bne.n	801c718 <BSP_USBPD_PWR_VBUSGetCurrent+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c70a:	2302      	movs	r3, #2
 801c70c:	425b      	negs	r3, r3
 801c70e:	617b      	str	r3, [r7, #20]
    *pCurrent = 0;
 801c710:	683b      	ldr	r3, [r7, #0]
 801c712:	2200      	movs	r2, #0
 801c714:	601a      	str	r2, [r3, #0]
 801c716:	e020      	b.n	801c75a <BSP_USBPD_PWR_VBUSGetCurrent+0x66>
  {
	 uint32_t vout_adc;
	 uint32_t isense;

	 //Calculate vout_adc(mV) on ADC pin based on ADC resolution and reference voltage VDDA and raw ADC value
	 vout_adc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801c718:	4b12      	ldr	r3, [pc, #72]	; (801c764 <BSP_USBPD_PWR_VBUSGetCurrent+0x70>)
 801c71a:	889b      	ldrh	r3, [r3, #4]
 801c71c:	b29b      	uxth	r3, r3
 801c71e:	001a      	movs	r2, r3
 801c720:	4b11      	ldr	r3, [pc, #68]	; (801c768 <BSP_USBPD_PWR_VBUSGetCurrent+0x74>)
 801c722:	4353      	muls	r3, r2
 801c724:	4911      	ldr	r1, [pc, #68]	; (801c76c <BSP_USBPD_PWR_VBUSGetCurrent+0x78>)
 801c726:	0018      	movs	r0, r3
 801c728:	f7e9 fd62 	bl	80061f0 <__udivsi3>
 801c72c:	0003      	movs	r3, r0
 801c72e:	613b      	str	r3, [r7, #16]
	  			  aADCxConvertedValues[RANK_2], \
	  			  LL_ADC_RESOLUTION_12B); /* mV */

	 //Calculate isense on PD_sense based on R_SENSE and G of amplifier
	 isense = vout_adc * 1000 / (G_SENSE*R_SENSE_MOHMS); /* mA */
 801c730:	693a      	ldr	r2, [r7, #16]
 801c732:	0013      	movs	r3, r2
 801c734:	015b      	lsls	r3, r3, #5
 801c736:	1a9b      	subs	r3, r3, r2
 801c738:	009b      	lsls	r3, r3, #2
 801c73a:	189b      	adds	r3, r3, r2
 801c73c:	00db      	lsls	r3, r3, #3
 801c73e:	001a      	movs	r2, r3
 801c740:	2396      	movs	r3, #150	; 0x96
 801c742:	0099      	lsls	r1, r3, #2
 801c744:	0010      	movs	r0, r2
 801c746:	f7e9 fd53 	bl	80061f0 <__udivsi3>
 801c74a:	0003      	movs	r3, r0
 801c74c:	60fb      	str	r3, [r7, #12]
	*pCurrent = isense;
 801c74e:	68fa      	ldr	r2, [r7, #12]
 801c750:	683b      	ldr	r3, [r7, #0]
 801c752:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801c754:	230b      	movs	r3, #11
 801c756:	425b      	negs	r3, r3
 801c758:	617b      	str	r3, [r7, #20]
  /* !!!
      BSP_PWR_VBUSGetCurrent is obsolete. You may need to move your user code
      inside this function
   !!! */
  //PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetCurrent");
  return ret;
 801c75a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 801c75c:	0018      	movs	r0, r3
 801c75e:	46bd      	mov	sp, r7
 801c760:	b006      	add	sp, #24
 801c762:	bd80      	pop	{r7, pc}
 801c764:	20000338 	.word	0x20000338
 801c768:	00000ce4 	.word	0x00000ce4
 801c76c:	00000fff 	.word	0x00000fff

0801c770 <BSP_USBPD_PWR_VBUSGetCurrentOCP>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrentOCP(uint32_t Instance, int32_t *pCurrentOCP)
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b086      	sub	sp, #24
 801c774:	af00      	add	r7, sp, #0
 801c776:	6078      	str	r0, [r7, #4]
 801c778:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrentOCP))
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	2b01      	cmp	r3, #1
 801c77e:	d802      	bhi.n	801c786 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x16>
 801c780:	683b      	ldr	r3, [r7, #0]
 801c782:	2b00      	cmp	r3, #0
 801c784:	d106      	bne.n	801c794 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c786:	2302      	movs	r3, #2
 801c788:	425b      	negs	r3, r3
 801c78a:	617b      	str	r3, [r7, #20]
    *pCurrentOCP = 0;
 801c78c:	683b      	ldr	r3, [r7, #0]
 801c78e:	2200      	movs	r2, #0
 801c790:	601a      	str	r2, [r3, #0]
 801c792:	e020      	b.n	801c7d6 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x66>
  {
	 uint32_t vout_adc;
	 uint32_t isense;

	 //Calculate vout_adc(mV) on ADC pin based on ADC resolution and reference voltage VDDA and raw ADC value
	 vout_adc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801c794:	4b12      	ldr	r3, [pc, #72]	; (801c7e0 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x70>)
 801c796:	885b      	ldrh	r3, [r3, #2]
 801c798:	b29b      	uxth	r3, r3
 801c79a:	001a      	movs	r2, r3
 801c79c:	4b11      	ldr	r3, [pc, #68]	; (801c7e4 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x74>)
 801c79e:	4353      	muls	r3, r2
 801c7a0:	4911      	ldr	r1, [pc, #68]	; (801c7e8 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x78>)
 801c7a2:	0018      	movs	r0, r3
 801c7a4:	f7e9 fd24 	bl	80061f0 <__udivsi3>
 801c7a8:	0003      	movs	r3, r0
 801c7aa:	613b      	str	r3, [r7, #16]
	  			  aADCxConvertedValues[RANK_1], \
	  			  LL_ADC_RESOLUTION_12B); /* mV */

	 //Calculate OCP current on PD_OCP line based on R_OCP and G of amplifier INA301
	 isense = vout_adc * 1000 / (G_OCP*R_OCP_MOHMS); /* mA */
 801c7ac:	693a      	ldr	r2, [r7, #16]
 801c7ae:	0013      	movs	r3, r2
 801c7b0:	015b      	lsls	r3, r3, #5
 801c7b2:	1a9b      	subs	r3, r3, r2
 801c7b4:	009b      	lsls	r3, r3, #2
 801c7b6:	189b      	adds	r3, r3, r2
 801c7b8:	00db      	lsls	r3, r3, #3
 801c7ba:	001a      	movs	r2, r3
 801c7bc:	23fa      	movs	r3, #250	; 0xfa
 801c7be:	0059      	lsls	r1, r3, #1
 801c7c0:	0010      	movs	r0, r2
 801c7c2:	f7e9 fd15 	bl	80061f0 <__udivsi3>
 801c7c6:	0003      	movs	r3, r0
 801c7c8:	60fb      	str	r3, [r7, #12]
	*pCurrentOCP = isense;
 801c7ca:	68fa      	ldr	r2, [r7, #12]
 801c7cc:	683b      	ldr	r3, [r7, #0]
 801c7ce:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801c7d0:	230b      	movs	r3, #11
 801c7d2:	425b      	negs	r3, r3
 801c7d4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 801c7d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 801c7d8:	0018      	movs	r0, r3
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	b006      	add	sp, #24
 801c7de:	bd80      	pop	{r7, pc}
 801c7e0:	20000338 	.word	0x20000338
 801c7e4:	00000ce4 	.word	0x00000ce4
 801c7e8:	00000fff 	.word	0x00000fff

0801c7ec <BSP_PWR_VBUSGetCurrentOCP>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Current measured current level (in mA)
  */
__weak int32_t BSP_PWR_VBUSGetCurrentOCP(uint32_t PortId)
{
 801c7ec:	b580      	push	{r7, lr}
 801c7ee:	b084      	sub	sp, #16
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	6078      	str	r0, [r7, #4]
  //PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetCurrentOCP");
/* USER CODE BEGIN BSP_PWR_VBUSGetCurrent */
  int32_t currentOCP = 0;
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetCurrentOCP(PortId, &currentOCP);
 801c7f8:	230c      	movs	r3, #12
 801c7fa:	18fa      	adds	r2, r7, r3
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	0011      	movs	r1, r2
 801c800:	0018      	movs	r0, r3
 801c802:	f7ff ffb5 	bl	801c770 <BSP_USBPD_PWR_VBUSGetCurrentOCP>

  return currentOCP;
 801c806:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetCurrent */
}
 801c808:	0018      	movs	r0, r3
 801c80a:	46bd      	mov	sp, r7
 801c80c:	b004      	add	sp, #16
 801c80e:	bd80      	pop	{r7, pc}

0801c810 <USBPD_USER_SERV_StoreSRCPDO>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_USER_SERV_StoreSRCPDO(uint8_t PortNum, uint8_t *Ptr, uint32_t Size)
{
 801c810:	b580      	push	{r7, lr}
 801c812:	b086      	sub	sp, #24
 801c814:	af00      	add	r7, sp, #0
 801c816:	60b9      	str	r1, [r7, #8]
 801c818:	607a      	str	r2, [r7, #4]
 801c81a:	210f      	movs	r1, #15
 801c81c:	187b      	adds	r3, r7, r1
 801c81e:	1c02      	adds	r2, r0, #0
 801c820:	701a      	strb	r2, [r3, #0]
  /*!< Storage of Received Source PDO values */
  if (Size <= (USBPD_MAX_NB_PDO * 4U))
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	2b1c      	cmp	r3, #28
 801c826:	d82c      	bhi.n	801c882 <USBPD_USER_SERV_StoreSRCPDO+0x72>
  {
    uint8_t *rdo;
    DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO = (Size / 4U);
 801c828:	187b      	adds	r3, r7, r1
 801c82a:	781a      	ldrb	r2, [r3, #0]
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	0899      	lsrs	r1, r3, #2
 801c830:	4816      	ldr	r0, [pc, #88]	; (801c88c <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 801c832:	0013      	movs	r3, r2
 801c834:	009b      	lsls	r3, r3, #2
 801c836:	189b      	adds	r3, r3, r2
 801c838:	011b      	lsls	r3, r3, #4
 801c83a:	18c3      	adds	r3, r0, r3
 801c83c:	331c      	adds	r3, #28
 801c83e:	6019      	str	r1, [r3, #0]
    /* Copy PDO data in DPM Handle field */
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801c840:	2300      	movs	r3, #0
 801c842:	617b      	str	r3, [r7, #20]
 801c844:	e018      	b.n	801c878 <USBPD_USER_SERV_StoreSRCPDO+0x68>
    {
      rdo = (uint8_t *)&DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[index];
 801c846:	230f      	movs	r3, #15
 801c848:	18fb      	adds	r3, r7, r3
 801c84a:	781a      	ldrb	r2, [r3, #0]
 801c84c:	0013      	movs	r3, r2
 801c84e:	009b      	lsls	r3, r3, #2
 801c850:	189b      	adds	r3, r3, r2
 801c852:	009b      	lsls	r3, r3, #2
 801c854:	697a      	ldr	r2, [r7, #20]
 801c856:	189b      	adds	r3, r3, r2
 801c858:	009a      	lsls	r2, r3, #2
 801c85a:	4b0c      	ldr	r3, [pc, #48]	; (801c88c <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 801c85c:	18d3      	adds	r3, r2, r3
 801c85e:	613b      	str	r3, [r7, #16]
      (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 801c860:	697b      	ldr	r3, [r7, #20]
 801c862:	009b      	lsls	r3, r3, #2
 801c864:	68ba      	ldr	r2, [r7, #8]
 801c866:	18d1      	adds	r1, r2, r3
 801c868:	693b      	ldr	r3, [r7, #16]
 801c86a:	2204      	movs	r2, #4
 801c86c:	0018      	movs	r0, r3
 801c86e:	f006 ffe1 	bl	8023834 <memcpy>
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801c872:	697b      	ldr	r3, [r7, #20]
 801c874:	3301      	adds	r3, #1
 801c876:	617b      	str	r3, [r7, #20]
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	089b      	lsrs	r3, r3, #2
 801c87c:	697a      	ldr	r2, [r7, #20]
 801c87e:	429a      	cmp	r2, r3
 801c880:	d3e1      	bcc.n	801c846 <USBPD_USER_SERV_StoreSRCPDO+0x36>
    }
  }
}
 801c882:	46c0      	nop			; (mov r8, r8)
 801c884:	46bd      	mov	sp, r7
 801c886:	b006      	add	sp, #24
 801c888:	bd80      	pop	{r7, pc}
 801c88a:	46c0      	nop			; (mov r8, r8)
 801c88c:	20002f44 	.word	0x20002f44

0801c890 <USBPD_USER_SERV_EvaluateCapa>:
  * @retval None
  */
void USBPD_USER_SERV_EvaluateCapa(uint8_t PortNum,
                                  uint32_t *PtrRequestData,
                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801c890:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c892:	b0ab      	sub	sp, #172	; 0xac
 801c894:	af02      	add	r7, sp, #8
 801c896:	60b9      	str	r1, [r7, #8]
 801c898:	607a      	str	r2, [r7, #4]
 801c89a:	240f      	movs	r4, #15
 801c89c:	193b      	adds	r3, r7, r4
 801c89e:	1c02      	adds	r2, r0, #0
 801c8a0:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef  fixed_pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801c8a2:	193b      	adds	r3, r7, r4
 801c8a4:	781a      	ldrb	r2, [r3, #0]
 801c8a6:	0013      	movs	r3, r2
 801c8a8:	009b      	lsls	r3, r3, #2
 801c8aa:	189b      	adds	r3, r3, r2
 801c8ac:	011b      	lsls	r3, r3, #4
 801c8ae:	4a66      	ldr	r2, [pc, #408]	; (801ca48 <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 801c8b0:	189b      	adds	r3, r3, r2
 801c8b2:	269c      	movs	r6, #156	; 0x9c
 801c8b4:	19ba      	adds	r2, r7, r6
 801c8b6:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801c8b8:	193b      	adds	r3, r7, r4
 801c8ba:	781b      	ldrb	r3, [r3, #0]
 801c8bc:	2274      	movs	r2, #116	; 0x74
 801c8be:	435a      	muls	r2, r3
 801c8c0:	4b62      	ldr	r3, [pc, #392]	; (801ca4c <USBPD_USER_SERV_EvaluateCapa+0x1bc>)
 801c8c2:	18d3      	adds	r3, r2, r3
 801c8c4:	2298      	movs	r2, #152	; 0x98
 801c8c6:	18b9      	adds	r1, r7, r2
 801c8c8:	600b      	str	r3, [r1, #0]
  uint32_t pdoindex;
  uint32_t size;
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  snkpowerrequestdetails.RequestedVoltageInmVunits = 0;
 801c8ca:	2178      	movs	r1, #120	; 0x78
 801c8cc:	187b      	adds	r3, r7, r1
 801c8ce:	2200      	movs	r2, #0
 801c8d0:	601a      	str	r2, [r3, #0]
  snkpowerrequestdetails.OperatingCurrentInmAunits = 0;
 801c8d2:	187b      	adds	r3, r7, r1
 801c8d4:	2200      	movs	r2, #0
 801c8d6:	609a      	str	r2, [r3, #8]

  /* Find the Pdo index for the requested voltage, depending on the wanted method */
  pdoindex = USER_SERV_FindVoltageIndex(PortNum, &snkpowerrequestdetails, USER_SERV_PDO_Sel_Method);
 801c8d8:	193b      	adds	r3, r7, r4
 801c8da:	7818      	ldrb	r0, [r3, #0]
 801c8dc:	4b5c      	ldr	r3, [pc, #368]	; (801ca50 <USBPD_USER_SERV_EvaluateCapa+0x1c0>)
 801c8de:	781a      	ldrb	r2, [r3, #0]
 801c8e0:	187b      	adds	r3, r7, r1
 801c8e2:	0019      	movs	r1, r3
 801c8e4:	f000 fa56 	bl	801cd94 <USER_SERV_FindVoltageIndex>
 801c8e8:	0003      	movs	r3, r0
 801c8ea:	2194      	movs	r1, #148	; 0x94
 801c8ec:	1878      	adds	r0, r7, r1
 801c8ee:	6003      	str	r3, [r0, #0]

  /* Initialize RDO */
  rdo.d32 = 0;
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	258c      	movs	r5, #140	; 0x8c
 801c8f4:	1978      	adds	r0, r7, r5
 801c8f6:	6003      	str	r3, [r0, #0]

  /* If no valid SNK PDO or if no SRC PDO match found
      (index>=nb of valid received SRC PDOs or function returned DPM_NO_SRC_PDO_FOUND */
  if (pdoindex >= pdhandle->DPM_NumberOfRcvSRCPDO)
 801c8f8:	19b8      	adds	r0, r7, r6
 801c8fa:	6803      	ldr	r3, [r0, #0]
 801c8fc:	69db      	ldr	r3, [r3, #28]
 801c8fe:	1879      	adds	r1, r7, r1
 801c900:	680a      	ldr	r2, [r1, #0]
 801c902:	429a      	cmp	r2, r3
 801c904:	d200      	bcs.n	801c908 <USBPD_USER_SERV_EvaluateCapa+0x78>
 801c906:	e085      	b.n	801ca14 <USBPD_USER_SERV_EvaluateCapa+0x184>
  {
#if defined(_TRACE)
    uint8_t msg[] = "USBPD_USER_SERV_EvaluateCapa: could not find desired voltage";
 801c908:	2114      	movs	r1, #20
 801c90a:	187a      	adds	r2, r7, r1
 801c90c:	4b51      	ldr	r3, [pc, #324]	; (801ca54 <USBPD_USER_SERV_EvaluateCapa+0x1c4>)
 801c90e:	0010      	movs	r0, r2
 801c910:	0019      	movs	r1, r3
 801c912:	233d      	movs	r3, #61	; 0x3d
 801c914:	001a      	movs	r2, r3
 801c916:	f006 ff8d 	bl	8023834 <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 801c91a:	2114      	movs	r1, #20
 801c91c:	187a      	adds	r2, r7, r1
 801c91e:	193b      	adds	r3, r7, r4
 801c920:	7819      	ldrb	r1, [r3, #0]
 801c922:	233d      	movs	r3, #61	; 0x3d
 801c924:	9300      	str	r3, [sp, #0]
 801c926:	0013      	movs	r3, r2
 801c928:	2200      	movs	r2, #0
 801c92a:	2006      	movs	r0, #6
 801c92c:	f7f6 f868 	bl	8012a00 <USBPD_TRACE_Add>
#endif /* _TRACE */
    fixed_pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 801c930:	19b9      	adds	r1, r7, r6
 801c932:	680b      	ldr	r3, [r1, #0]
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	2090      	movs	r0, #144	; 0x90
 801c938:	1839      	adds	r1, r7, r0
 801c93a:	600b      	str	r3, [r1, #0]
    /* Read SNK PDO list for retrieving useful data to fill in RDO */
    USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 801c93c:	2174      	movs	r1, #116	; 0x74
 801c93e:	1879      	adds	r1, r7, r1
 801c940:	2358      	movs	r3, #88	; 0x58
 801c942:	18fa      	adds	r2, r7, r3
 801c944:	193b      	adds	r3, r7, r4
 801c946:	7818      	ldrb	r0, [r3, #0]
 801c948:	000b      	movs	r3, r1
 801c94a:	2101      	movs	r1, #1
 801c94c:	f7fe fb4e 	bl	801afec <USBPD_PWR_IF_GetPortPDOs>
    /* Store value of 1st SNK PDO (Fixed) in local variable */
    snk_fixed_pdo.d32 = snkpdolist[0];
 801c950:	2158      	movs	r1, #88	; 0x58
 801c952:	187b      	adds	r3, r7, r1
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	657b      	str	r3, [r7, #84]	; 0x54
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 801c958:	238f      	movs	r3, #143	; 0x8f
 801c95a:	18fb      	adds	r3, r7, r3
 801c95c:	781a      	ldrb	r2, [r3, #0]
 801c95e:	2170      	movs	r1, #112	; 0x70
 801c960:	438a      	bics	r2, r1
 801c962:	1c11      	adds	r1, r2, #0
 801c964:	2210      	movs	r2, #16
 801c966:	430a      	orrs	r2, r1
 801c968:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801c96a:	2090      	movs	r0, #144	; 0x90
 801c96c:	183b      	adds	r3, r7, r0
 801c96e:	881b      	ldrh	r3, [r3, #0]
 801c970:	059b      	lsls	r3, r3, #22
 801c972:	0d9b      	lsrs	r3, r3, #22
 801c974:	b29b      	uxth	r3, r3
 801c976:	059b      	lsls	r3, r3, #22
 801c978:	0d9b      	lsrs	r3, r3, #22
 801c97a:	029b      	lsls	r3, r3, #10
 801c97c:	1979      	adds	r1, r7, r5
 801c97e:	680a      	ldr	r2, [r1, #0]
 801c980:	4935      	ldr	r1, [pc, #212]	; (801ca58 <USBPD_USER_SERV_EvaluateCapa+0x1c8>)
 801c982:	400a      	ands	r2, r1
 801c984:	4313      	orrs	r3, r2
 801c986:	1979      	adds	r1, r7, r5
 801c988:	600b      	str	r3, [r1, #0]
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801c98a:	183b      	adds	r3, r7, r0
 801c98c:	881b      	ldrh	r3, [r3, #0]
 801c98e:	059b      	lsls	r3, r3, #22
 801c990:	0d9b      	lsrs	r3, r3, #22
 801c992:	b29a      	uxth	r2, r3
 801c994:	197b      	adds	r3, r7, r5
 801c996:	0592      	lsls	r2, r2, #22
 801c998:	0d90      	lsrs	r0, r2, #22
 801c99a:	881a      	ldrh	r2, [r3, #0]
 801c99c:	0a92      	lsrs	r2, r2, #10
 801c99e:	0292      	lsls	r2, r2, #10
 801c9a0:	1c11      	adds	r1, r2, #0
 801c9a2:	1c02      	adds	r2, r0, #0
 801c9a4:	430a      	orrs	r2, r1
 801c9a6:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch = 1U;
 801c9a8:	208f      	movs	r0, #143	; 0x8f
 801c9aa:	183b      	adds	r3, r7, r0
 801c9ac:	781a      	ldrb	r2, [r3, #0]
 801c9ae:	2104      	movs	r1, #4
 801c9b0:	430a      	orrs	r2, r1
 801c9b2:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801c9b4:	2157      	movs	r1, #87	; 0x57
 801c9b6:	187b      	adds	r3, r7, r1
 801c9b8:	781b      	ldrb	r3, [r3, #0]
 801c9ba:	075b      	lsls	r3, r3, #29
 801c9bc:	0fdb      	lsrs	r3, r3, #31
 801c9be:	b2da      	uxtb	r2, r3
 801c9c0:	183b      	adds	r3, r7, r0
 801c9c2:	2101      	movs	r1, #1
 801c9c4:	400a      	ands	r2, r1
 801c9c6:	1890      	adds	r0, r2, r2
 801c9c8:	781a      	ldrb	r2, [r3, #0]
 801c9ca:	2102      	movs	r1, #2
 801c9cc:	438a      	bics	r2, r1
 801c9ce:	1c11      	adds	r1, r2, #0
 801c9d0:	1c02      	adds	r2, r0, #0
 801c9d2:	430a      	orrs	r2, r1
 801c9d4:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801c9d6:	193b      	adds	r3, r7, r4
 801c9d8:	781a      	ldrb	r2, [r3, #0]
 801c9da:	2398      	movs	r3, #152	; 0x98
 801c9dc:	18fb      	adds	r3, r7, r3
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	6859      	ldr	r1, [r3, #4]
 801c9e2:	4819      	ldr	r0, [pc, #100]	; (801ca48 <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 801c9e4:	0013      	movs	r3, r2
 801c9e6:	009b      	lsls	r3, r3, #2
 801c9e8:	189b      	adds	r3, r3, r2
 801c9ea:	011b      	lsls	r3, r3, #4
 801c9ec:	18c3      	adds	r3, r0, r3
 801c9ee:	334c      	adds	r3, #76	; 0x4c
 801c9f0:	6019      	str	r1, [r3, #0]

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 801c9f2:	197b      	adds	r3, r7, r5
 801c9f4:	681a      	ldr	r2, [r3, #0]
 801c9f6:	19bb      	adds	r3, r7, r6
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	63da      	str	r2, [r3, #60]	; 0x3c
    *PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	2200      	movs	r2, #0
 801ca00:	601a      	str	r2, [r3, #0]
    *PtrRequestData = rdo.d32;
 801ca02:	197b      	adds	r3, r7, r5
 801ca04:	681a      	ldr	r2, [r3, #0]
 801ca06:	68bb      	ldr	r3, [r7, #8]
 801ca08:	601a      	str	r2, [r3, #0]
    pdhandle->DPM_RequestedVoltage = 5000U;
 801ca0a:	19bb      	adds	r3, r7, r6
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	4a13      	ldr	r2, [pc, #76]	; (801ca5c <USBPD_USER_SERV_EvaluateCapa+0x1cc>)
 801ca10:	649a      	str	r2, [r3, #72]	; 0x48
 801ca12:	e015      	b.n	801ca40 <USBPD_USER_SERV_EvaluateCapa+0x1b0>
    return;
  }

  USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, pdoindex, &snkpowerrequestdetails, &rdo, PtrPowerObjectType);
 801ca14:	2394      	movs	r3, #148	; 0x94
 801ca16:	18fb      	adds	r3, r7, r3
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	b2d9      	uxtb	r1, r3
 801ca1c:	238c      	movs	r3, #140	; 0x8c
 801ca1e:	18fc      	adds	r4, r7, r3
 801ca20:	2378      	movs	r3, #120	; 0x78
 801ca22:	18fa      	adds	r2, r7, r3
 801ca24:	230f      	movs	r3, #15
 801ca26:	18fb      	adds	r3, r7, r3
 801ca28:	7818      	ldrb	r0, [r3, #0]
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	9300      	str	r3, [sp, #0]
 801ca2e:	0023      	movs	r3, r4
 801ca30:	f000 faaa 	bl	801cf88 <USER_SERV_SNK_BuildRDOfromSelectedPDO>

  *PtrRequestData = pdhandle->DPM_RequestDOMsg;
 801ca34:	239c      	movs	r3, #156	; 0x9c
 801ca36:	18fb      	adds	r3, r7, r3
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801ca3c:	68bb      	ldr	r3, [r7, #8]
 801ca3e:	601a      	str	r2, [r3, #0]
}
 801ca40:	46bd      	mov	sp, r7
 801ca42:	b029      	add	sp, #164	; 0xa4
 801ca44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca46:	46c0      	nop			; (mov r8, r8)
 801ca48:	20002f44 	.word	0x20002f44
 801ca4c:	20000108 	.word	0x20000108
 801ca50:	20002f40 	.word	0x20002f40
 801ca54:	08024e0c 	.word	0x08024e0c
 801ca58:	fff003ff 	.word	0xfff003ff
 801ca5c:	00001388 	.word	0x00001388

0801ca60 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>:
  */
uint32_t USER_SERV_SNK_EvaluateMatchWithSRCPDO(uint8_t PortNum,
                                                      uint32_t SrcPDO,
                                                      uint32_t *PtrRequestedVoltage,
                                                      uint32_t *PtrRequestedPower)
{
 801ca60:	b590      	push	{r4, r7, lr}
 801ca62:	b09b      	sub	sp, #108	; 0x6c
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	60b9      	str	r1, [r7, #8]
 801ca68:	607a      	str	r2, [r7, #4]
 801ca6a:	603b      	str	r3, [r7, #0]
 801ca6c:	240f      	movs	r4, #15
 801ca6e:	193b      	adds	r3, r7, r4
 801ca70:	1c02      	adds	r2, r0, #0
 801ca72:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef srcpdo;
  USBPD_PDO_TypeDef snkpdo;
  uint32_t match = USBPD_FALSE;
 801ca74:	2300      	movs	r3, #0
 801ca76:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t currentrequestedpower;
  uint32_t maxrequestedvoltage;
  uint32_t currentrequestedvoltage;

  /* Retrieve SNK PDO list from PWR_IF storage : PDO values + nb of u32 written by PWR_IF (nb of PDOs) */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)snkpdo_array, &nbsnkpdo);
 801ca78:	2330      	movs	r3, #48	; 0x30
 801ca7a:	18f9      	adds	r1, r7, r3
 801ca7c:	2314      	movs	r3, #20
 801ca7e:	18fa      	adds	r2, r7, r3
 801ca80:	193b      	adds	r3, r7, r4
 801ca82:	7818      	ldrb	r0, [r3, #0]
 801ca84:	000b      	movs	r3, r1
 801ca86:	2101      	movs	r1, #1
 801ca88:	f7fe fab0 	bl	801afec <USBPD_PWR_IF_GetPortPDOs>

  if (0 == nbsnkpdo)
 801ca8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d101      	bne.n	801ca96 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x36>
  {
    return (USBPD_FALSE);
 801ca92:	2300      	movs	r3, #0
 801ca94:	e179      	b.n	801cd8a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  /* Set default output values */
  maxrequestedpower    = 0;
 801ca96:	2300      	movs	r3, #0
 801ca98:	663b      	str	r3, [r7, #96]	; 0x60
  maxrequestedvoltage  = 0;
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Check SRC PDO value according to its type */
  srcpdo.d32 = SrcPDO;
 801ca9e:	68bb      	ldr	r3, [r7, #8]
 801caa0:	63bb      	str	r3, [r7, #56]	; 0x38
  switch (srcpdo.GenericPDO.PowerObject)
 801caa2:	233b      	movs	r3, #59	; 0x3b
 801caa4:	18fb      	adds	r3, r7, r3
 801caa6:	781b      	ldrb	r3, [r3, #0]
 801caa8:	061b      	lsls	r3, r3, #24
 801caaa:	0f9b      	lsrs	r3, r3, #30
 801caac:	b2db      	uxtb	r3, r3
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d003      	beq.n	801caba <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x5a>
 801cab2:	2b03      	cmp	r3, #3
 801cab4:	d100      	bne.n	801cab8 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x58>
 801cab6:	e06c      	b.n	801cb92 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x132>
 801cab8:	e159      	b.n	801cd6e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30e>
  {
    /* SRC Fixed Supply PDO */
    case USBPD_CORE_PDO_TYPE_FIXED:
    {
      srcvoltage50mv = srcpdo.SRCFixedPDO.VoltageIn50mVunits;
 801caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cabc:	031b      	lsls	r3, r3, #12
 801cabe:	0d9b      	lsrs	r3, r3, #22
 801cac0:	b29a      	uxth	r2, r3
 801cac2:	2342      	movs	r3, #66	; 0x42
 801cac4:	18fb      	adds	r3, r7, r3
 801cac6:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent10ma = srcpdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801cac8:	2338      	movs	r3, #56	; 0x38
 801caca:	18fb      	adds	r3, r7, r3
 801cacc:	881b      	ldrh	r3, [r3, #0]
 801cace:	059b      	lsls	r3, r3, #22
 801cad0:	0d9b      	lsrs	r3, r3, #22
 801cad2:	b29a      	uxth	r2, r3
 801cad4:	2340      	movs	r3, #64	; 0x40
 801cad6:	18fb      	adds	r3, r7, r3
 801cad8:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801cada:	2352      	movs	r3, #82	; 0x52
 801cadc:	18fb      	adds	r3, r7, r3
 801cade:	2200      	movs	r2, #0
 801cae0:	801a      	strh	r2, [r3, #0]
 801cae2:	e04f      	b.n	801cb84 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x124>
      {
        currentrequestedpower = 0;
 801cae4:	2300      	movs	r3, #0
 801cae6:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 801cae8:	2300      	movs	r3, #0
 801caea:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 801caec:	2352      	movs	r3, #82	; 0x52
 801caee:	18fb      	adds	r3, r7, r3
 801caf0:	881a      	ldrh	r2, [r3, #0]
 801caf2:	2314      	movs	r3, #20
 801caf4:	18fb      	adds	r3, r7, r3
 801caf6:	0092      	lsls	r2, r2, #2
 801caf8:	58d3      	ldr	r3, [r2, r3]
 801cafa:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 801cafc:	2337      	movs	r3, #55	; 0x37
 801cafe:	18fb      	adds	r3, r7, r3
 801cb00:	781b      	ldrb	r3, [r3, #0]
 801cb02:	061b      	lsls	r3, r3, #24
 801cb04:	0f9b      	lsrs	r3, r3, #30
 801cb06:	b2db      	uxtb	r3, r3
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d128      	bne.n	801cb5e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0xfe>
        {
          /* SNK Fixed Supply PDO */
          case USBPD_CORE_PDO_TYPE_FIXED:
          {
            snkvoltage50mv = snkpdo.SNKFixedPDO.VoltageIn50mVunits;
 801cb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb0e:	031b      	lsls	r3, r3, #12
 801cb10:	0d9b      	lsrs	r3, r3, #22
 801cb12:	b29a      	uxth	r2, r3
 801cb14:	213e      	movs	r1, #62	; 0x3e
 801cb16:	187b      	adds	r3, r7, r1
 801cb18:	801a      	strh	r2, [r3, #0]
            snkopcurrent10ma = snkpdo.SNKFixedPDO.OperationalCurrentIn10mAunits;
 801cb1a:	2334      	movs	r3, #52	; 0x34
 801cb1c:	18fb      	adds	r3, r7, r3
 801cb1e:	881b      	ldrh	r3, [r3, #0]
 801cb20:	059b      	lsls	r3, r3, #22
 801cb22:	0d9b      	lsrs	r3, r3, #22
 801cb24:	b29a      	uxth	r2, r3
 801cb26:	203c      	movs	r0, #60	; 0x3c
 801cb28:	183b      	adds	r3, r7, r0
 801cb2a:	801a      	strh	r2, [r3, #0]

               Requested Voltage: SNK Voltage
               Requested Op Current: SNK Op Current
               Requested Max Current: SNK Op Current
            */
            if ((snkvoltage50mv == srcvoltage50mv) && (snkopcurrent10ma <= srcmaxcurrent10ma))
 801cb2c:	187a      	adds	r2, r7, r1
 801cb2e:	2342      	movs	r3, #66	; 0x42
 801cb30:	18fb      	adds	r3, r7, r3
 801cb32:	8812      	ldrh	r2, [r2, #0]
 801cb34:	881b      	ldrh	r3, [r3, #0]
 801cb36:	429a      	cmp	r2, r3
 801cb38:	d113      	bne.n	801cb62 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
 801cb3a:	183a      	adds	r2, r7, r0
 801cb3c:	2340      	movs	r3, #64	; 0x40
 801cb3e:	18fb      	adds	r3, r7, r3
 801cb40:	8812      	ldrh	r2, [r2, #0]
 801cb42:	881b      	ldrh	r3, [r3, #0]
 801cb44:	429a      	cmp	r2, r3
 801cb46:	d80c      	bhi.n	801cb62 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
            {
              currentrequestedpower = (snkvoltage50mv * snkopcurrent10ma) / 2U; /* To get value in mW */
 801cb48:	187b      	adds	r3, r7, r1
 801cb4a:	881b      	ldrh	r3, [r3, #0]
 801cb4c:	183a      	adds	r2, r7, r0
 801cb4e:	8812      	ldrh	r2, [r2, #0]
 801cb50:	4353      	muls	r3, r2
 801cb52:	085b      	lsrs	r3, r3, #1
 801cb54:	65fb      	str	r3, [r7, #92]	; 0x5c
              currentrequestedvoltage = snkvoltage50mv;
 801cb56:	187b      	adds	r3, r7, r1
 801cb58:	881b      	ldrh	r3, [r3, #0]
 801cb5a:	657b      	str	r3, [r7, #84]	; 0x54
            }
            break;
 801cb5c:	e001      	b.n	801cb62 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
          }
          /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;
 801cb5e:	46c0      	nop			; (mov r8, r8)
 801cb60:	e000      	b.n	801cb64 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x104>
            break;
 801cb62:	46c0      	nop			; (mov r8, r8)

          default:
            break;
        }

        if (currentrequestedpower > maxrequestedpower)
 801cb64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801cb66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cb68:	429a      	cmp	r2, r3
 801cb6a:	d905      	bls.n	801cb78 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x118>
        {
          match = USBPD_TRUE;
 801cb6c:	2301      	movs	r3, #1
 801cb6e:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 801cb70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cb72:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 801cb74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb76:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801cb78:	2152      	movs	r1, #82	; 0x52
 801cb7a:	187b      	adds	r3, r7, r1
 801cb7c:	881a      	ldrh	r2, [r3, #0]
 801cb7e:	187b      	adds	r3, r7, r1
 801cb80:	3201      	adds	r2, #1
 801cb82:	801a      	strh	r2, [r3, #0]
 801cb84:	2352      	movs	r3, #82	; 0x52
 801cb86:	18fb      	adds	r3, r7, r3
 801cb88:	881a      	ldrh	r2, [r3, #0]
 801cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb8c:	429a      	cmp	r2, r3
 801cb8e:	d3a9      	bcc.n	801cae4 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x84>
        }
      }
    }
    break;
 801cb90:	e0ef      	b.n	801cd72 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>
    case USBPD_CORE_PDO_TYPE_APDO:
    {
      uint16_t srcmaxvoltage100mv;
      uint16_t srcminvoltage100mv;
      uint16_t srcmaxcurrent50ma;
      srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801cb92:	233a      	movs	r3, #58	; 0x3a
 801cb94:	18fb      	adds	r3, r7, r3
 801cb96:	881b      	ldrh	r3, [r3, #0]
 801cb98:	05db      	lsls	r3, r3, #23
 801cb9a:	0e1b      	lsrs	r3, r3, #24
 801cb9c:	b2da      	uxtb	r2, r3
 801cb9e:	234e      	movs	r3, #78	; 0x4e
 801cba0:	18fb      	adds	r3, r7, r3
 801cba2:	801a      	strh	r2, [r3, #0]
      srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801cba4:	2138      	movs	r1, #56	; 0x38
 801cba6:	187b      	adds	r3, r7, r1
 801cba8:	785a      	ldrb	r2, [r3, #1]
 801cbaa:	234c      	movs	r3, #76	; 0x4c
 801cbac:	18fb      	adds	r3, r7, r3
 801cbae:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801cbb0:	187b      	adds	r3, r7, r1
 801cbb2:	781b      	ldrb	r3, [r3, #0]
 801cbb4:	065b      	lsls	r3, r3, #25
 801cbb6:	0e5b      	lsrs	r3, r3, #25
 801cbb8:	b2da      	uxtb	r2, r3
 801cbba:	234a      	movs	r3, #74	; 0x4a
 801cbbc:	18fb      	adds	r3, r7, r3
 801cbbe:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801cbc0:	2350      	movs	r3, #80	; 0x50
 801cbc2:	18fb      	adds	r3, r7, r3
 801cbc4:	2200      	movs	r2, #0
 801cbc6:	801a      	strh	r2, [r3, #0]
 801cbc8:	e0c9      	b.n	801cd5e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2fe>
      {
        currentrequestedpower = 0;
 801cbca:	2300      	movs	r3, #0
 801cbcc:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 801cbce:	2300      	movs	r3, #0
 801cbd0:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 801cbd2:	2350      	movs	r3, #80	; 0x50
 801cbd4:	18fb      	adds	r3, r7, r3
 801cbd6:	881a      	ldrh	r2, [r3, #0]
 801cbd8:	2314      	movs	r3, #20
 801cbda:	18fb      	adds	r3, r7, r3
 801cbdc:	0092      	lsls	r2, r2, #2
 801cbde:	58d3      	ldr	r3, [r2, r3]
 801cbe0:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 801cbe2:	2337      	movs	r3, #55	; 0x37
 801cbe4:	18fb      	adds	r3, r7, r3
 801cbe6:	781b      	ldrb	r3, [r3, #0]
 801cbe8:	061b      	lsls	r3, r3, #24
 801cbea:	0f9b      	lsrs	r3, r3, #30
 801cbec:	b2db      	uxtb	r3, r3
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d100      	bne.n	801cbf4 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x194>
 801cbf2:	e09f      	b.n	801cd34 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d4>
 801cbf4:	2b03      	cmp	r3, #3
 801cbf6:	d000      	beq.n	801cbfa <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x19a>
 801cbf8:	e09e      	b.n	801cd38 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d8>
          {
            uint16_t snkmaxvoltage100mv;
            uint16_t snkminvoltage100mv;
            uint16_t snkmaxcurrent50ma;

            snkminvoltage100mv = snkpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801cbfa:	2134      	movs	r1, #52	; 0x34
 801cbfc:	187b      	adds	r3, r7, r1
 801cbfe:	785a      	ldrb	r2, [r3, #1]
 801cc00:	2048      	movs	r0, #72	; 0x48
 801cc02:	183b      	adds	r3, r7, r0
 801cc04:	801a      	strh	r2, [r3, #0]
            snkmaxvoltage100mv = snkpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801cc06:	2336      	movs	r3, #54	; 0x36
 801cc08:	18fb      	adds	r3, r7, r3
 801cc0a:	881b      	ldrh	r3, [r3, #0]
 801cc0c:	05db      	lsls	r3, r3, #23
 801cc0e:	0e1b      	lsrs	r3, r3, #24
 801cc10:	b2da      	uxtb	r2, r3
 801cc12:	2446      	movs	r4, #70	; 0x46
 801cc14:	193b      	adds	r3, r7, r4
 801cc16:	801a      	strh	r2, [r3, #0]
            snkmaxcurrent50ma = snkpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801cc18:	187b      	adds	r3, r7, r1
 801cc1a:	781b      	ldrb	r3, [r3, #0]
 801cc1c:	065b      	lsls	r3, r3, #25
 801cc1e:	0e5b      	lsrs	r3, r3, #25
 801cc20:	b2da      	uxtb	r2, r3
 801cc22:	2344      	movs	r3, #68	; 0x44
 801cc24:	18fb      	adds	r3, r7, r3
 801cc26:	801a      	strh	r2, [r3, #0]

            /* Match if SNK APDO voltage overlaps with the SRC APDO voltage range */
            if (((srcminvoltage100mv <= snkmaxvoltage100mv) && (srcminvoltage100mv >= snkminvoltage100mv)) ||
 801cc28:	214c      	movs	r1, #76	; 0x4c
 801cc2a:	187a      	adds	r2, r7, r1
 801cc2c:	193b      	adds	r3, r7, r4
 801cc2e:	8812      	ldrh	r2, [r2, #0]
 801cc30:	881b      	ldrh	r3, [r3, #0]
 801cc32:	429a      	cmp	r2, r3
 801cc34:	d805      	bhi.n	801cc42 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1e2>
 801cc36:	187a      	adds	r2, r7, r1
 801cc38:	183b      	adds	r3, r7, r0
 801cc3a:	8812      	ldrh	r2, [r2, #0]
 801cc3c:	881b      	ldrh	r3, [r3, #0]
 801cc3e:	429a      	cmp	r2, r3
 801cc40:	d210      	bcs.n	801cc64 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 801cc42:	2148      	movs	r1, #72	; 0x48
 801cc44:	187a      	adds	r2, r7, r1
 801cc46:	234e      	movs	r3, #78	; 0x4e
 801cc48:	18fb      	adds	r3, r7, r3
 801cc4a:	8812      	ldrh	r2, [r2, #0]
 801cc4c:	881b      	ldrh	r3, [r3, #0]
 801cc4e:	429a      	cmp	r2, r3
 801cc50:	d900      	bls.n	801cc54 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1f4>
 801cc52:	e073      	b.n	801cd3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				((snkminvoltage100mv <= srcmaxvoltage100mv) && (snkminvoltage100mv >= srcminvoltage100mv)))
 801cc54:	187a      	adds	r2, r7, r1
 801cc56:	234c      	movs	r3, #76	; 0x4c
 801cc58:	18fb      	adds	r3, r7, r3
 801cc5a:	8812      	ldrh	r2, [r2, #0]
 801cc5c:	881b      	ldrh	r3, [r3, #0]
 801cc5e:	429a      	cmp	r2, r3
 801cc60:	d200      	bcs.n	801cc64 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 801cc62:	e06b      	b.n	801cd3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			{
			  if (snkmaxcurrent50ma <= srcmaxcurrent50ma)
 801cc64:	2044      	movs	r0, #68	; 0x44
 801cc66:	183a      	adds	r2, r7, r0
 801cc68:	234a      	movs	r3, #74	; 0x4a
 801cc6a:	18fb      	adds	r3, r7, r3
 801cc6c:	8812      	ldrh	r2, [r2, #0]
 801cc6e:	881b      	ldrh	r3, [r3, #0]
 801cc70:	429a      	cmp	r2, r3
 801cc72:	d863      	bhi.n	801cd3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			  {
				if (0U != *PtrRequestedPower)
 801cc74:	683b      	ldr	r3, [r7, #0]
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d02c      	beq.n	801ccd6 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x276>
				{
				  /* A specific voltage was requested, verify it */
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 801cc7c:	2348      	movs	r3, #72	; 0x48
 801cc7e:	18fb      	adds	r3, r7, r3
 801cc80:	881b      	ldrh	r3, [r3, #0]
 801cc82:	2264      	movs	r2, #100	; 0x64
 801cc84:	4353      	muls	r3, r2
 801cc86:	b29b      	uxth	r3, r3
 801cc88:	001a      	movs	r2, r3
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	429a      	cmp	r2, r3
 801cc90:	d854      	bhi.n	801cd3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
					 ((*PtrRequestedVoltage) <= PWR_DECODE_100MV(snkmaxvoltage100mv)))
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	2246      	movs	r2, #70	; 0x46
 801cc98:	18ba      	adds	r2, r7, r2
 801cc9a:	8812      	ldrh	r2, [r2, #0]
 801cc9c:	2164      	movs	r1, #100	; 0x64
 801cc9e:	434a      	muls	r2, r1
 801cca0:	b292      	uxth	r2, r2
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 801cca2:	4293      	cmp	r3, r2
 801cca4:	d84a      	bhi.n	801cd3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  {
					currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	183a      	adds	r2, r7, r0
 801ccac:	8812      	ldrh	r2, [r2, #0]
 801ccae:	2132      	movs	r1, #50	; 0x32
 801ccb0:	434a      	muls	r2, r1
 801ccb2:	b292      	uxth	r2, r2
 801ccb4:	4353      	muls	r3, r2
 801ccb6:	22fa      	movs	r2, #250	; 0xfa
 801ccb8:	0091      	lsls	r1, r2, #2
 801ccba:	0018      	movs	r0, r3
 801ccbc:	f7e9 fa98 	bl	80061f0 <__udivsi3>
 801ccc0:	0003      	movs	r3, r0
 801ccc2:	65fb      	str	r3, [r7, #92]	; 0x5c
											/ 1000U; /* mW */
					currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	2132      	movs	r1, #50	; 0x32
 801ccca:	0018      	movs	r0, r3
 801cccc:	f7e9 fa90 	bl	80061f0 <__udivsi3>
 801ccd0:	0003      	movs	r3, r0
 801ccd2:	657b      	str	r3, [r7, #84]	; 0x54
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
				}
			  }
			}
          }
          break;
 801ccd4:	e032      	b.n	801cd3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  *PtrRequestedVoltage = MIN(PWR_DECODE_100MV(srcmaxvoltage100mv),
 801ccd6:	2346      	movs	r3, #70	; 0x46
 801ccd8:	18fb      	adds	r3, r7, r3
 801ccda:	881b      	ldrh	r3, [r3, #0]
 801ccdc:	2264      	movs	r2, #100	; 0x64
 801ccde:	4353      	muls	r3, r2
 801cce0:	b299      	uxth	r1, r3
 801cce2:	234e      	movs	r3, #78	; 0x4e
 801cce4:	18fb      	adds	r3, r7, r3
 801cce6:	881b      	ldrh	r3, [r3, #0]
 801cce8:	2264      	movs	r2, #100	; 0x64
 801ccea:	4353      	muls	r3, r2
 801ccec:	b29b      	uxth	r3, r3
 801ccee:	1c18      	adds	r0, r3, #0
 801ccf0:	b28a      	uxth	r2, r1
 801ccf2:	b283      	uxth	r3, r0
 801ccf4:	429a      	cmp	r2, r3
 801ccf6:	d900      	bls.n	801ccfa <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x29a>
 801ccf8:	1c01      	adds	r1, r0, #0
 801ccfa:	b28b      	uxth	r3, r1
 801ccfc:	001a      	movs	r2, r3
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	601a      	str	r2, [r3, #0]
				  currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	2244      	movs	r2, #68	; 0x44
 801cd08:	18ba      	adds	r2, r7, r2
 801cd0a:	8812      	ldrh	r2, [r2, #0]
 801cd0c:	2132      	movs	r1, #50	; 0x32
 801cd0e:	434a      	muls	r2, r1
 801cd10:	b292      	uxth	r2, r2
 801cd12:	4353      	muls	r3, r2
 801cd14:	22fa      	movs	r2, #250	; 0xfa
 801cd16:	0091      	lsls	r1, r2, #2
 801cd18:	0018      	movs	r0, r3
 801cd1a:	f7e9 fa69 	bl	80061f0 <__udivsi3>
 801cd1e:	0003      	movs	r3, r0
 801cd20:	65fb      	str	r3, [r7, #92]	; 0x5c
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	681b      	ldr	r3, [r3, #0]
 801cd26:	2132      	movs	r1, #50	; 0x32
 801cd28:	0018      	movs	r0, r3
 801cd2a:	f7e9 fa61 	bl	80061f0 <__udivsi3>
 801cd2e:	0003      	movs	r3, r0
 801cd30:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 801cd32:	e003      	b.n	801cd3c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
            break;
 801cd34:	46c0      	nop			; (mov r8, r8)
 801cd36:	e002      	b.n	801cd3e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>

          default:
            break;
 801cd38:	46c0      	nop			; (mov r8, r8)
 801cd3a:	e000      	b.n	801cd3e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>
          break;
 801cd3c:	46c0      	nop			; (mov r8, r8)
        }

        if (currentrequestedpower > maxrequestedpower)
 801cd3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801cd40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cd42:	429a      	cmp	r2, r3
 801cd44:	d905      	bls.n	801cd52 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2f2>
        {
          match = USBPD_TRUE;
 801cd46:	2301      	movs	r3, #1
 801cd48:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 801cd4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cd4c:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 801cd4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cd50:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801cd52:	2150      	movs	r1, #80	; 0x50
 801cd54:	187b      	adds	r3, r7, r1
 801cd56:	881a      	ldrh	r2, [r3, #0]
 801cd58:	187b      	adds	r3, r7, r1
 801cd5a:	3201      	adds	r2, #1
 801cd5c:	801a      	strh	r2, [r3, #0]
 801cd5e:	2350      	movs	r3, #80	; 0x50
 801cd60:	18fb      	adds	r3, r7, r3
 801cd62:	881a      	ldrh	r2, [r3, #0]
 801cd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd66:	429a      	cmp	r2, r3
 801cd68:	d200      	bcs.n	801cd6c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30c>
 801cd6a:	e72e      	b.n	801cbca <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x16a>
        }
      }
    }
    break;
 801cd6c:	e001      	b.n	801cd72 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>

    default:
      return (USBPD_FALSE);
 801cd6e:	2300      	movs	r3, #0
 801cd70:	e00b      	b.n	801cd8a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  if (maxrequestedpower > 0)
 801cd72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d007      	beq.n	801cd88 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x328>
  {
    *PtrRequestedPower   = maxrequestedpower;
 801cd78:	683b      	ldr	r3, [r7, #0]
 801cd7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cd7c:	601a      	str	r2, [r3, #0]
    *PtrRequestedVoltage = maxrequestedvoltage * 50U; /* value in mV */
 801cd7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cd80:	2232      	movs	r2, #50	; 0x32
 801cd82:	435a      	muls	r2, r3
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	601a      	str	r2, [r3, #0]
  }
  return (match);
 801cd88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 801cd8a:	0018      	movs	r0, r3
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	b01b      	add	sp, #108	; 0x6c
 801cd90:	bd90      	pop	{r4, r7, pc}
	...

0801cd94 <USER_SERV_FindVoltageIndex>:
  * @retval Index of PDO within source capabilities message (DPM_NO_SRC_PDO_FOUND indicating not found)
  */
uint32_t USER_SERV_FindVoltageIndex(uint32_t PortNum,
                                           USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                           uint8_t Method)
{
 801cd94:	b580      	push	{r7, lr}
 801cd96:	b090      	sub	sp, #64	; 0x40
 801cd98:	af00      	add	r7, sp, #0
 801cd9a:	60f8      	str	r0, [r7, #12]
 801cd9c:	60b9      	str	r1, [r7, #8]
 801cd9e:	1dfb      	adds	r3, r7, #7
 801cda0:	701a      	strb	r2, [r3, #0]
  uint32_t nbpdo;
  uint32_t allowablepower;
  uint32_t selpower;
  uint32_t allowablecurrent;
  uint32_t selcurrent;
  uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 801cda2:	23ff      	movs	r3, #255	; 0xff
 801cda4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temp_index;
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801cda6:	68fb      	ldr	r3, [r7, #12]
 801cda8:	2274      	movs	r2, #116	; 0x74
 801cdaa:	435a      	muls	r2, r3
 801cdac:	4b73      	ldr	r3, [pc, #460]	; (801cf7c <USER_SERV_FindVoltageIndex+0x1e8>)
 801cdae:	18d3      	adds	r3, r2, r3
 801cdb0:	62bb      	str	r3, [r7, #40]	; 0x28

  allowablepower = 0;
 801cdb2:	2300      	movs	r3, #0
 801cdb4:	613b      	str	r3, [r7, #16]
  selpower       = 0;
 801cdb6:	2300      	movs	r3, #0
 801cdb8:	63bb      	str	r3, [r7, #56]	; 0x38
  reqvoltage     = 0;
 801cdba:	2300      	movs	r3, #0
 801cdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  voltage        = 0;
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	617b      	str	r3, [r7, #20]
  selcurrent     = 0;
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Search PDO index among Source PDO of Port */
  nbpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 801cdc6:	496e      	ldr	r1, [pc, #440]	; (801cf80 <USER_SERV_FindVoltageIndex+0x1ec>)
 801cdc8:	68fa      	ldr	r2, [r7, #12]
 801cdca:	0013      	movs	r3, r2
 801cdcc:	009b      	lsls	r3, r3, #2
 801cdce:	189b      	adds	r3, r3, r2
 801cdd0:	011b      	lsls	r3, r3, #4
 801cdd2:	18cb      	adds	r3, r1, r3
 801cdd4:	331c      	adds	r3, #28
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	627b      	str	r3, [r7, #36]	; 0x24
  ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 801cdda:	68fa      	ldr	r2, [r7, #12]
 801cddc:	0013      	movs	r3, r2
 801cdde:	009b      	lsls	r3, r3, #2
 801cde0:	189b      	adds	r3, r3, r2
 801cde2:	011b      	lsls	r3, r3, #4
 801cde4:	4a66      	ldr	r2, [pc, #408]	; (801cf80 <USER_SERV_FindVoltageIndex+0x1ec>)
 801cde6:	189b      	adds	r3, r3, r2
 801cde8:	623b      	str	r3, [r7, #32]

  /* search the best PDO in the list of source PDOs */
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 801cdea:	2300      	movs	r3, #0
 801cdec:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cdee:	e09a      	b.n	801cf26 <USER_SERV_FindVoltageIndex+0x192>
  {
    pdo.d32 = ptpdoarray[temp_index];
 801cdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdf2:	009b      	lsls	r3, r3, #2
 801cdf4:	6a3a      	ldr	r2, [r7, #32]
 801cdf6:	18d3      	adds	r3, r2, r3
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	61bb      	str	r3, [r7, #24]

    /* Check if the received source PDO is matching any of the SNK PDO */
    allowablepower = 0;
 801cdfc:	2300      	movs	r3, #0
 801cdfe:	613b      	str	r3, [r7, #16]
    if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	b2d8      	uxtb	r0, r3
 801ce04:	69b9      	ldr	r1, [r7, #24]
 801ce06:	2310      	movs	r3, #16
 801ce08:	18fb      	adds	r3, r7, r3
 801ce0a:	2214      	movs	r2, #20
 801ce0c:	18ba      	adds	r2, r7, r2
 801ce0e:	f7ff fe27 	bl	801ca60 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 801ce12:	0003      	movs	r3, r0
 801ce14:	2b01      	cmp	r3, #1
 801ce16:	d000      	beq.n	801ce1a <USER_SERV_FindVoltageIndex+0x86>
 801ce18:	e082      	b.n	801cf20 <USER_SERV_FindVoltageIndex+0x18c>
    {
      allowablecurrent = (allowablepower / voltage) * 1000U;
 801ce1a:	693b      	ldr	r3, [r7, #16]
 801ce1c:	697a      	ldr	r2, [r7, #20]
 801ce1e:	0011      	movs	r1, r2
 801ce20:	0018      	movs	r0, r3
 801ce22:	f7e9 f9e5 	bl	80061f0 <__udivsi3>
 801ce26:	0003      	movs	r3, r0
 801ce28:	001a      	movs	r2, r3
 801ce2a:	0013      	movs	r3, r2
 801ce2c:	015b      	lsls	r3, r3, #5
 801ce2e:	1a9b      	subs	r3, r3, r2
 801ce30:	009b      	lsls	r3, r3, #2
 801ce32:	189b      	adds	r3, r3, r2
 801ce34:	00db      	lsls	r3, r3, #3
 801ce36:	61fb      	str	r3, [r7, #28]

      /* Choose the best PDO depending on the user preferences */
      switch (Method)
 801ce38:	1dfb      	adds	r3, r7, #7
 801ce3a:	781b      	ldrb	r3, [r3, #0]
 801ce3c:	2b05      	cmp	r3, #5
 801ce3e:	d85b      	bhi.n	801cef8 <USER_SERV_FindVoltageIndex+0x164>
 801ce40:	009a      	lsls	r2, r3, #2
 801ce42:	4b50      	ldr	r3, [pc, #320]	; (801cf84 <USER_SERV_FindVoltageIndex+0x1f0>)
 801ce44:	18d3      	adds	r3, r2, r3
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	469f      	mov	pc, r3
      {
        case PDO_SEL_METHOD_MAX_PWR:
          if (allowablepower > selpower)
 801ce4a:	693b      	ldr	r3, [r7, #16]
 801ce4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ce4e:	429a      	cmp	r2, r3
 801ce50:	d25b      	bcs.n	801cf0a <USER_SERV_FindVoltageIndex+0x176>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce54:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ce56:	693b      	ldr	r3, [r7, #16]
 801ce58:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ce5a:	697b      	ldr	r3, [r7, #20]
 801ce5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ce5e:	69fb      	ldr	r3, [r7, #28]
 801ce60:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ce62:	e052      	b.n	801cf0a <USER_SERV_FindVoltageIndex+0x176>

        case PDO_SEL_METHOD_MIN_PWR:
          if ((allowablepower < selpower) || (selpower == 0))
 801ce64:	693b      	ldr	r3, [r7, #16]
 801ce66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ce68:	429a      	cmp	r2, r3
 801ce6a:	d802      	bhi.n	801ce72 <USER_SERV_FindVoltageIndex+0xde>
 801ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d14d      	bne.n	801cf0e <USER_SERV_FindVoltageIndex+0x17a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce74:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ce76:	693b      	ldr	r3, [r7, #16]
 801ce78:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ce7a:	697b      	ldr	r3, [r7, #20]
 801ce7c:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ce7e:	69fb      	ldr	r3, [r7, #28]
 801ce80:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ce82:	e044      	b.n	801cf0e <USER_SERV_FindVoltageIndex+0x17a>

        case PDO_SEL_METHOD_MAX_VOLT:
          if (voltage > reqvoltage)
 801ce84:	697b      	ldr	r3, [r7, #20]
 801ce86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ce88:	429a      	cmp	r2, r3
 801ce8a:	d242      	bcs.n	801cf12 <USER_SERV_FindVoltageIndex+0x17e>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce8e:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ce90:	693b      	ldr	r3, [r7, #16]
 801ce92:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ce94:	697b      	ldr	r3, [r7, #20]
 801ce96:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ce98:	69fb      	ldr	r3, [r7, #28]
 801ce9a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ce9c:	e039      	b.n	801cf12 <USER_SERV_FindVoltageIndex+0x17e>

        case PDO_SEL_METHOD_MIN_VOLT:
          if ((voltage < reqvoltage) || (reqvoltage == 0))
 801ce9e:	697b      	ldr	r3, [r7, #20]
 801cea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cea2:	429a      	cmp	r2, r3
 801cea4:	d802      	bhi.n	801ceac <USER_SERV_FindVoltageIndex+0x118>
 801cea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d134      	bne.n	801cf16 <USER_SERV_FindVoltageIndex+0x182>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ceae:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ceb0:	693b      	ldr	r3, [r7, #16]
 801ceb2:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ceb4:	697b      	ldr	r3, [r7, #20]
 801ceb6:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ceb8:	69fb      	ldr	r3, [r7, #28]
 801ceba:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801cebc:	e02b      	b.n	801cf16 <USER_SERV_FindVoltageIndex+0x182>

        case PDO_SEL_METHOD_MAX_CUR:
          if (allowablecurrent > selcurrent)
 801cebe:	69fa      	ldr	r2, [r7, #28]
 801cec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cec2:	429a      	cmp	r2, r3
 801cec4:	d929      	bls.n	801cf1a <USER_SERV_FindVoltageIndex+0x186>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cec8:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ceca:	693b      	ldr	r3, [r7, #16]
 801cecc:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801cece:	697b      	ldr	r3, [r7, #20]
 801ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ced2:	69fb      	ldr	r3, [r7, #28]
 801ced4:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ced6:	e020      	b.n	801cf1a <USER_SERV_FindVoltageIndex+0x186>

        case PDO_SEL_METHOD_MIN_CUR:
          if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 801ced8:	69fa      	ldr	r2, [r7, #28]
 801ceda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cedc:	429a      	cmp	r2, r3
 801cede:	d302      	bcc.n	801cee6 <USER_SERV_FindVoltageIndex+0x152>
 801cee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d11b      	bne.n	801cf1e <USER_SERV_FindVoltageIndex+0x18a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cee8:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ceea:	693b      	ldr	r3, [r7, #16]
 801ceec:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ceee:	697b      	ldr	r3, [r7, #20]
 801cef0:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801cef2:	69fb      	ldr	r3, [r7, #28]
 801cef4:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801cef6:	e012      	b.n	801cf1e <USER_SERV_FindVoltageIndex+0x18a>

        default:
          /* Default behavior: last PDO is selected */
          curr_index = temp_index;
 801cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cefa:	633b      	str	r3, [r7, #48]	; 0x30
          selpower   = allowablepower;
 801cefc:	693b      	ldr	r3, [r7, #16]
 801cefe:	63bb      	str	r3, [r7, #56]	; 0x38
          reqvoltage = voltage;
 801cf00:	697b      	ldr	r3, [r7, #20]
 801cf02:	63fb      	str	r3, [r7, #60]	; 0x3c
          selcurrent = allowablecurrent;
 801cf04:	69fb      	ldr	r3, [r7, #28]
 801cf06:	637b      	str	r3, [r7, #52]	; 0x34
 801cf08:	e00a      	b.n	801cf20 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801cf0a:	46c0      	nop			; (mov r8, r8)
 801cf0c:	e008      	b.n	801cf20 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801cf0e:	46c0      	nop			; (mov r8, r8)
 801cf10:	e006      	b.n	801cf20 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801cf12:	46c0      	nop			; (mov r8, r8)
 801cf14:	e004      	b.n	801cf20 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801cf16:	46c0      	nop			; (mov r8, r8)
 801cf18:	e002      	b.n	801cf20 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801cf1a:	46c0      	nop			; (mov r8, r8)
 801cf1c:	e000      	b.n	801cf20 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801cf1e:	46c0      	nop			; (mov r8, r8)
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 801cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf22:	3301      	adds	r3, #1
 801cf24:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cf26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf2a:	429a      	cmp	r2, r3
 801cf2c:	d200      	bcs.n	801cf30 <USER_SERV_FindVoltageIndex+0x19c>
 801cf2e:	e75f      	b.n	801cdf0 <USER_SERV_FindVoltageIndex+0x5c>
      }
    }
  }

  /* If a suitable PDO was found */
  if (curr_index != DPM_NO_SRC_PDO_FOUND)
 801cf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf32:	2bff      	cmp	r3, #255	; 0xff
 801cf34:	d01c      	beq.n	801cf70 <USER_SERV_FindVoltageIndex+0x1dc>
  {
    /* Fill the request power details */
    PtrRequestPowerDetails->MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf38:	685a      	ldr	r2, [r3, #4]
 801cf3a:	68bb      	ldr	r3, [r7, #8]
 801cf3c:	605a      	str	r2, [r3, #4]
    PtrRequestPowerDetails->OperatingCurrentInmAunits    = (1000U * selpower) / reqvoltage;
 801cf3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cf40:	0013      	movs	r3, r2
 801cf42:	015b      	lsls	r3, r3, #5
 801cf44:	1a9b      	subs	r3, r3, r2
 801cf46:	009b      	lsls	r3, r3, #2
 801cf48:	189b      	adds	r3, r3, r2
 801cf4a:	00db      	lsls	r3, r3, #3
 801cf4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cf4e:	0018      	movs	r0, r3
 801cf50:	f7e9 f94e 	bl	80061f0 <__udivsi3>
 801cf54:	0003      	movs	r3, r0
 801cf56:	001a      	movs	r2, r3
 801cf58:	68bb      	ldr	r3, [r7, #8]
 801cf5a:	609a      	str	r2, [r3, #8]
    PtrRequestPowerDetails->MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 801cf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf5e:	699a      	ldr	r2, [r3, #24]
 801cf60:	68bb      	ldr	r3, [r7, #8]
 801cf62:	60da      	str	r2, [r3, #12]
    PtrRequestPowerDetails->OperatingPowerInmWunits      = selpower;
 801cf64:	68bb      	ldr	r3, [r7, #8]
 801cf66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cf68:	611a      	str	r2, [r3, #16]
    PtrRequestPowerDetails->RequestedVoltageInmVunits    = reqvoltage;
 801cf6a:	68bb      	ldr	r3, [r7, #8]
 801cf6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cf6e:	601a      	str	r2, [r3, #0]
  }

  return curr_index;
 801cf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801cf72:	0018      	movs	r0, r3
 801cf74:	46bd      	mov	sp, r7
 801cf76:	b010      	add	sp, #64	; 0x40
 801cf78:	bd80      	pop	{r7, pc}
 801cf7a:	46c0      	nop			; (mov r8, r8)
 801cf7c:	20000108 	.word	0x20000108
 801cf80:	20002f44 	.word	0x20002f44
 801cf84:	0802519c 	.word	0x0802519c

0801cf88 <USER_SERV_SNK_BuildRDOfromSelectedPDO>:
void USER_SERV_SNK_BuildRDOfromSelectedPDO(uint8_t PortNum,
                                                  uint8_t IndexSrcPDO,
                                                  USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 801cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf8a:	b0b7      	sub	sp, #220	; 0xdc
 801cf8c:	af02      	add	r7, sp, #8
 801cf8e:	60ba      	str	r2, [r7, #8]
 801cf90:	607b      	str	r3, [r7, #4]
 801cf92:	240f      	movs	r4, #15
 801cf94:	193b      	adds	r3, r7, r4
 801cf96:	1c02      	adds	r2, r0, #0
 801cf98:	701a      	strb	r2, [r3, #0]
 801cf9a:	230e      	movs	r3, #14
 801cf9c:	18fb      	adds	r3, r7, r3
 801cf9e:	1c0a      	adds	r2, r1, #0
 801cfa0:	701a      	strb	r2, [r3, #0]
  uint32_t mv = 0;
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	22cc      	movs	r2, #204	; 0xcc
 801cfa6:	18ba      	adds	r2, r7, r2
 801cfa8:	6013      	str	r3, [r2, #0]
  uint32_t ma = 0;
 801cfaa:	2300      	movs	r3, #0
 801cfac:	22c8      	movs	r2, #200	; 0xc8
 801cfae:	18ba      	adds	r2, r7, r2
 801cfb0:	6013      	str	r3, [r2, #0]
  uint32_t size;
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801cfb2:	193b      	adds	r3, r7, r4
 801cfb4:	781a      	ldrb	r2, [r3, #0]
 801cfb6:	0013      	movs	r3, r2
 801cfb8:	009b      	lsls	r3, r3, #2
 801cfba:	189b      	adds	r3, r3, r2
 801cfbc:	011b      	lsls	r3, r3, #4
 801cfbe:	4ab4      	ldr	r2, [pc, #720]	; (801d290 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x308>)
 801cfc0:	189b      	adds	r3, r3, r2
 801cfc2:	25c4      	movs	r5, #196	; 0xc4
 801cfc4:	197a      	adds	r2, r7, r5
 801cfc6:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801cfc8:	193b      	adds	r3, r7, r4
 801cfca:	781b      	ldrb	r3, [r3, #0]
 801cfcc:	2274      	movs	r2, #116	; 0x74
 801cfce:	435a      	muls	r2, r3
 801cfd0:	4bb0      	ldr	r3, [pc, #704]	; (801d294 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x30c>)
 801cfd2:	18d3      	adds	r3, r2, r3
 801cfd4:	22c0      	movs	r2, #192	; 0xc0
 801cfd6:	18ba      	adds	r2, r7, r2
 801cfd8:	6013      	str	r3, [r2, #0]
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  /* Initialize RDO */
  rdo.d32 = 0;
 801cfda:	2300      	movs	r3, #0
 801cfdc:	22b0      	movs	r2, #176	; 0xb0
 801cfde:	18ba      	adds	r2, r7, r2
 801cfe0:	6013      	str	r3, [r2, #0]

  /* Read SNK PDO list for retrieving useful data to fill in RDO */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 801cfe2:	23b8      	movs	r3, #184	; 0xb8
 801cfe4:	18f9      	adds	r1, r7, r3
 801cfe6:	2694      	movs	r6, #148	; 0x94
 801cfe8:	19ba      	adds	r2, r7, r6
 801cfea:	193b      	adds	r3, r7, r4
 801cfec:	7818      	ldrb	r0, [r3, #0]
 801cfee:	000b      	movs	r3, r1
 801cff0:	2101      	movs	r1, #1
 801cff2:	f7fd fffb 	bl	801afec <USBPD_PWR_IF_GetPortPDOs>

  /* Store value of 1st SNK PDO (Fixed) in local variable */
  snk_fixed_pdo.d32 = snkpdolist[0];
 801cff6:	19bb      	adds	r3, r7, r6
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	2290      	movs	r2, #144	; 0x90
 801cffc:	18ba      	adds	r2, r7, r2
 801cffe:	6013      	str	r3, [r2, #0]

  /* Set common fields in RDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 801d000:	197b      	adds	r3, r7, r5
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	22b4      	movs	r2, #180	; 0xb4
 801d008:	18ba      	adds	r2, r7, r2
 801d00a:	6013      	str	r3, [r2, #0]
  rdo.GenericRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801d00c:	2393      	movs	r3, #147	; 0x93
 801d00e:	18fb      	adds	r3, r7, r3
 801d010:	781b      	ldrb	r3, [r3, #0]
 801d012:	075b      	lsls	r3, r3, #29
 801d014:	0fdb      	lsrs	r3, r3, #31
 801d016:	b2da      	uxtb	r2, r3
 801d018:	23b3      	movs	r3, #179	; 0xb3
 801d01a:	18fb      	adds	r3, r7, r3
 801d01c:	2101      	movs	r1, #1
 801d01e:	400a      	ands	r2, r1
 801d020:	1890      	adds	r0, r2, r2
 801d022:	781a      	ldrb	r2, [r3, #0]
 801d024:	2102      	movs	r1, #2
 801d026:	438a      	bics	r2, r1
 801d028:	1c11      	adds	r1, r2, #0
 801d02a:	1c02      	adds	r2, r0, #0
 801d02c:	430a      	orrs	r2, r1
 801d02e:	701a      	strb	r2, [r3, #0]
  if (USBPD_SPECIFICATION_REV2 < DPM_Params[PortNum].PE_SpecRevision)
 801d030:	193b      	adds	r3, r7, r4
 801d032:	781a      	ldrb	r2, [r3, #0]
 801d034:	4b98      	ldr	r3, [pc, #608]	; (801d298 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x310>)
 801d036:	0092      	lsls	r2, r2, #2
 801d038:	5cd3      	ldrb	r3, [r2, r3]
 801d03a:	079b      	lsls	r3, r3, #30
 801d03c:	0f9b      	lsrs	r3, r3, #30
 801d03e:	b2db      	uxtb	r3, r3
 801d040:	2b01      	cmp	r3, #1
 801d042:	d931      	bls.n	801d0a8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x120>
  {
#if defined(USBPDCORE_UNCHUNCKED_MODE)
    rdo.FixedVariableRDO.UnchunkedExtendedMessage = DPM_Settings[PortNum].PE_PD3_Support.d.PE_UnchunkSupport;
 801d044:	193b      	adds	r3, r7, r4
 801d046:	781a      	ldrb	r2, [r3, #0]
 801d048:	4994      	ldr	r1, [pc, #592]	; (801d29c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x314>)
 801d04a:	2008      	movs	r0, #8
 801d04c:	0013      	movs	r3, r2
 801d04e:	005b      	lsls	r3, r3, #1
 801d050:	189b      	adds	r3, r3, r2
 801d052:	009b      	lsls	r3, r3, #2
 801d054:	18cb      	adds	r3, r1, r3
 801d056:	181b      	adds	r3, r3, r0
 801d058:	781b      	ldrb	r3, [r3, #0]
 801d05a:	07db      	lsls	r3, r3, #31
 801d05c:	0fdb      	lsrs	r3, r3, #31
 801d05e:	b2da      	uxtb	r2, r3
 801d060:	23b2      	movs	r3, #178	; 0xb2
 801d062:	18fb      	adds	r3, r7, r3
 801d064:	01d0      	lsls	r0, r2, #7
 801d066:	781a      	ldrb	r2, [r3, #0]
 801d068:	217f      	movs	r1, #127	; 0x7f
 801d06a:	400a      	ands	r2, r1
 801d06c:	1c11      	adds	r1, r2, #0
 801d06e:	1c02      	adds	r2, r0, #0
 801d070:	430a      	orrs	r2, r1
 801d072:	701a      	strb	r2, [r3, #0]
    DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_FALSE;
 801d074:	193b      	adds	r3, r7, r4
 801d076:	781b      	ldrb	r3, [r3, #0]
 801d078:	4a87      	ldr	r2, [pc, #540]	; (801d298 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x310>)
 801d07a:	009b      	lsls	r3, r3, #2
 801d07c:	18d3      	adds	r3, r2, r3
 801d07e:	78da      	ldrb	r2, [r3, #3]
 801d080:	2102      	movs	r1, #2
 801d082:	438a      	bics	r2, r1
 801d084:	70da      	strb	r2, [r3, #3]
    /* Set unchuncked bit if supported by port partner;*/
    if (USBPD_TRUE == pdo.SRCFixedPDO.UnchunkedExtendedMessage)
 801d086:	23b7      	movs	r3, #183	; 0xb7
 801d088:	18fb      	adds	r3, r7, r3
 801d08a:	781b      	ldrb	r3, [r3, #0]
 801d08c:	2201      	movs	r2, #1
 801d08e:	4013      	ands	r3, r2
 801d090:	b2db      	uxtb	r3, r3
 801d092:	2b00      	cmp	r3, #0
 801d094:	d008      	beq.n	801d0a8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x120>
    {
      DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_TRUE;
 801d096:	193b      	adds	r3, r7, r4
 801d098:	781b      	ldrb	r3, [r3, #0]
 801d09a:	4a7f      	ldr	r2, [pc, #508]	; (801d298 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x310>)
 801d09c:	009b      	lsls	r3, r3, #2
 801d09e:	18d3      	adds	r3, r2, r3
 801d0a0:	78da      	ldrb	r2, [r3, #3]
 801d0a2:	2102      	movs	r1, #2
 801d0a4:	430a      	orrs	r2, r1
 801d0a6:	70da      	strb	r2, [r3, #3]
    }
#endif /* USBPDCORE_UNCHUNCKED_MODE */
  }

  /* If no valid SNK PDO or if no SRC PDO match found (index>=nb of valid received SRC PDOs */
  if ((size < 1) || (IndexSrcPDO >= pdhandle->DPM_NumberOfRcvSRCPDO))
 801d0a8:	23b8      	movs	r3, #184	; 0xb8
 801d0aa:	18fb      	adds	r3, r7, r3
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d008      	beq.n	801d0c4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x13c>
 801d0b2:	230e      	movs	r3, #14
 801d0b4:	18fb      	adds	r3, r7, r3
 801d0b6:	781a      	ldrb	r2, [r3, #0]
 801d0b8:	23c4      	movs	r3, #196	; 0xc4
 801d0ba:	18fb      	adds	r3, r7, r3
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	69db      	ldr	r3, [r3, #28]
 801d0c0:	429a      	cmp	r2, r3
 801d0c2:	d367      	bcc.n	801d194 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x20c>
  {
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */
#ifdef _TRACE
    uint8_t msg[] = "USER_SERV_SNK_BuildRDOfromSelectedPDO: Pb in SRC PDO selection";
 801d0c4:	2414      	movs	r4, #20
 801d0c6:	193a      	adds	r2, r7, r4
 801d0c8:	4b75      	ldr	r3, [pc, #468]	; (801d2a0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x318>)
 801d0ca:	0010      	movs	r0, r2
 801d0cc:	0019      	movs	r1, r3
 801d0ce:	233f      	movs	r3, #63	; 0x3f
 801d0d0:	001a      	movs	r2, r3
 801d0d2:	f006 fbaf 	bl	8023834 <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 801d0d6:	193a      	adds	r2, r7, r4
 801d0d8:	260f      	movs	r6, #15
 801d0da:	19bb      	adds	r3, r7, r6
 801d0dc:	7819      	ldrb	r1, [r3, #0]
 801d0de:	233f      	movs	r3, #63	; 0x3f
 801d0e0:	9300      	str	r3, [sp, #0]
 801d0e2:	0013      	movs	r3, r2
 801d0e4:	2200      	movs	r2, #0
 801d0e6:	2006      	movs	r0, #6
 801d0e8:	f7f5 fc8a 	bl	8012a00 <USBPD_TRACE_Add>
#endif /* _TRACE */
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 801d0ec:	25b3      	movs	r5, #179	; 0xb3
 801d0ee:	197b      	adds	r3, r7, r5
 801d0f0:	781a      	ldrb	r2, [r3, #0]
 801d0f2:	2170      	movs	r1, #112	; 0x70
 801d0f4:	438a      	bics	r2, r1
 801d0f6:	1c11      	adds	r1, r2, #0
 801d0f8:	2210      	movs	r2, #16
 801d0fa:	430a      	orrs	r2, r1
 801d0fc:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801d0fe:	20b4      	movs	r0, #180	; 0xb4
 801d100:	183b      	adds	r3, r7, r0
 801d102:	881b      	ldrh	r3, [r3, #0]
 801d104:	059b      	lsls	r3, r3, #22
 801d106:	0d9b      	lsrs	r3, r3, #22
 801d108:	b29b      	uxth	r3, r3
 801d10a:	059b      	lsls	r3, r3, #22
 801d10c:	0d9b      	lsrs	r3, r3, #22
 801d10e:	029b      	lsls	r3, r3, #10
 801d110:	24b0      	movs	r4, #176	; 0xb0
 801d112:	193a      	adds	r2, r7, r4
 801d114:	6812      	ldr	r2, [r2, #0]
 801d116:	4963      	ldr	r1, [pc, #396]	; (801d2a4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x31c>)
 801d118:	400a      	ands	r2, r1
 801d11a:	4313      	orrs	r3, r2
 801d11c:	193a      	adds	r2, r7, r4
 801d11e:	6013      	str	r3, [r2, #0]
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801d120:	183b      	adds	r3, r7, r0
 801d122:	881b      	ldrh	r3, [r3, #0]
 801d124:	059b      	lsls	r3, r3, #22
 801d126:	0d9b      	lsrs	r3, r3, #22
 801d128:	b29a      	uxth	r2, r3
 801d12a:	193b      	adds	r3, r7, r4
 801d12c:	0592      	lsls	r2, r2, #22
 801d12e:	0d90      	lsrs	r0, r2, #22
 801d130:	881a      	ldrh	r2, [r3, #0]
 801d132:	0a92      	lsrs	r2, r2, #10
 801d134:	0292      	lsls	r2, r2, #10
 801d136:	1c11      	adds	r1, r2, #0
 801d138:	1c02      	adds	r2, r0, #0
 801d13a:	430a      	orrs	r2, r1
 801d13c:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch           = 1U;
 801d13e:	197b      	adds	r3, r7, r5
 801d140:	781a      	ldrb	r2, [r3, #0]
 801d142:	2104      	movs	r1, #4
 801d144:	430a      	orrs	r2, r1
 801d146:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801d148:	2393      	movs	r3, #147	; 0x93
 801d14a:	18fb      	adds	r3, r7, r3
 801d14c:	781b      	ldrb	r3, [r3, #0]
 801d14e:	075b      	lsls	r3, r3, #29
 801d150:	0fdb      	lsrs	r3, r3, #31
 801d152:	b2da      	uxtb	r2, r3
 801d154:	197b      	adds	r3, r7, r5
 801d156:	2101      	movs	r1, #1
 801d158:	400a      	ands	r2, r1
 801d15a:	1890      	adds	r0, r2, r2
 801d15c:	781a      	ldrb	r2, [r3, #0]
 801d15e:	2102      	movs	r1, #2
 801d160:	438a      	bics	r2, r1
 801d162:	1c11      	adds	r1, r2, #0
 801d164:	1c02      	adds	r2, r0, #0
 801d166:	430a      	orrs	r2, r1
 801d168:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent           = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801d16a:	19bb      	adds	r3, r7, r6
 801d16c:	781a      	ldrb	r2, [r3, #0]
 801d16e:	23c0      	movs	r3, #192	; 0xc0
 801d170:	18fb      	adds	r3, r7, r3
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	6859      	ldr	r1, [r3, #4]
 801d176:	4846      	ldr	r0, [pc, #280]	; (801d290 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x308>)
 801d178:	0013      	movs	r3, r2
 801d17a:	009b      	lsls	r3, r3, #2
 801d17c:	189b      	adds	r3, r3, r2
 801d17e:	011b      	lsls	r3, r3, #4
 801d180:	18c3      	adds	r3, r0, r3
 801d182:	334c      	adds	r3, #76	; 0x4c
 801d184:	6019      	str	r1, [r3, #0]
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 801d186:	193b      	adds	r3, r7, r4
 801d188:	681a      	ldr	r2, [r3, #0]
 801d18a:	23c4      	movs	r3, #196	; 0xc4
 801d18c:	18fb      	adds	r3, r7, r3
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	63da      	str	r2, [r3, #60]	; 0x3c
 801d192:	e10c      	b.n	801d3ae <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x426>
    return;
  }

  /* Set the Object position */
  rdo.GenericRDO.ObjectPosition               = IndexSrcPDO + 1U;
 801d194:	240e      	movs	r4, #14
 801d196:	193b      	adds	r3, r7, r4
 801d198:	781b      	ldrb	r3, [r3, #0]
 801d19a:	3301      	adds	r3, #1
 801d19c:	b2db      	uxtb	r3, r3
 801d19e:	1c1a      	adds	r2, r3, #0
 801d1a0:	2307      	movs	r3, #7
 801d1a2:	4013      	ands	r3, r2
 801d1a4:	b2da      	uxtb	r2, r3
 801d1a6:	25b3      	movs	r5, #179	; 0xb3
 801d1a8:	197b      	adds	r3, r7, r5
 801d1aa:	2107      	movs	r1, #7
 801d1ac:	400a      	ands	r2, r1
 801d1ae:	0110      	lsls	r0, r2, #4
 801d1b0:	781a      	ldrb	r2, [r3, #0]
 801d1b2:	2170      	movs	r1, #112	; 0x70
 801d1b4:	438a      	bics	r2, r1
 801d1b6:	1c11      	adds	r1, r2, #0
 801d1b8:	1c02      	adds	r2, r0, #0
 801d1ba:	430a      	orrs	r2, r1
 801d1bc:	701a      	strb	r2, [r3, #0]
  rdo.GenericRDO.NoUSBSuspend                 = 0;
 801d1be:	197b      	adds	r3, r7, r5
 801d1c0:	781a      	ldrb	r2, [r3, #0]
 801d1c2:	2101      	movs	r1, #1
 801d1c4:	438a      	bics	r2, r1
 801d1c6:	701a      	strb	r2, [r3, #0]

  /* Extract power information from Power Data Object */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO];
 801d1c8:	193b      	adds	r3, r7, r4
 801d1ca:	781a      	ldrb	r2, [r3, #0]
 801d1cc:	23c4      	movs	r3, #196	; 0xc4
 801d1ce:	18fb      	adds	r3, r7, r3
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	0092      	lsls	r2, r2, #2
 801d1d4:	58d3      	ldr	r3, [r2, r3]
 801d1d6:	22b4      	movs	r2, #180	; 0xb4
 801d1d8:	18ba      	adds	r2, r7, r2
 801d1da:	6013      	str	r3, [r2, #0]

  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 801d1dc:	21b7      	movs	r1, #183	; 0xb7
 801d1de:	187b      	adds	r3, r7, r1
 801d1e0:	781b      	ldrb	r3, [r3, #0]
 801d1e2:	061b      	lsls	r3, r3, #24
 801d1e4:	0f9b      	lsrs	r3, r3, #30
 801d1e6:	b2db      	uxtb	r3, r3
 801d1e8:	001a      	movs	r2, r3
 801d1ea:	23d8      	movs	r3, #216	; 0xd8
 801d1ec:	2010      	movs	r0, #16
 801d1ee:	181b      	adds	r3, r3, r0
 801d1f0:	19db      	adds	r3, r3, r7
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	601a      	str	r2, [r3, #0]

  /* Retrieve request details from SRC PDO selection */
  mv = PtrRequestPowerDetails->RequestedVoltageInmVunits;
 801d1f6:	68bb      	ldr	r3, [r7, #8]
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	22cc      	movs	r2, #204	; 0xcc
 801d1fc:	18ba      	adds	r2, r7, r2
 801d1fe:	6013      	str	r3, [r2, #0]
  ma = PtrRequestPowerDetails->OperatingCurrentInmAunits;
 801d200:	68bb      	ldr	r3, [r7, #8]
 801d202:	689b      	ldr	r3, [r3, #8]
 801d204:	22c8      	movs	r2, #200	; 0xc8
 801d206:	18ba      	adds	r2, r7, r2
 801d208:	6013      	str	r3, [r2, #0]

  switch (pdo.GenericPDO.PowerObject)
 801d20a:	187b      	adds	r3, r7, r1
 801d20c:	781b      	ldrb	r3, [r3, #0]
 801d20e:	061b      	lsls	r3, r3, #24
 801d210:	0f9b      	lsrs	r3, r3, #30
 801d212:	b2db      	uxtb	r3, r3
 801d214:	2b00      	cmp	r3, #0
 801d216:	d002      	beq.n	801d21e <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x296>
 801d218:	2b03      	cmp	r3, #3
 801d21a:	d045      	beq.n	801d2a8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x320>
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
    }
    break;

    default:
      break;
 801d21c:	e094      	b.n	801d348 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>
      DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 801d21e:	230f      	movs	r3, #15
 801d220:	18fb      	adds	r3, r7, r3
 801d222:	781a      	ldrb	r2, [r3, #0]
 801d224:	491a      	ldr	r1, [pc, #104]	; (801d290 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x308>)
 801d226:	0013      	movs	r3, r2
 801d228:	009b      	lsls	r3, r3, #2
 801d22a:	189b      	adds	r3, r3, r2
 801d22c:	011b      	lsls	r3, r3, #4
 801d22e:	18cb      	adds	r3, r1, r3
 801d230:	334c      	adds	r3, #76	; 0x4c
 801d232:	24c8      	movs	r4, #200	; 0xc8
 801d234:	193a      	adds	r2, r7, r4
 801d236:	6812      	ldr	r2, [r2, #0]
 801d238:	601a      	str	r2, [r3, #0]
      rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 801d23a:	193b      	adds	r3, r7, r4
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	210a      	movs	r1, #10
 801d240:	0018      	movs	r0, r3
 801d242:	f7e8 ffd5 	bl	80061f0 <__udivsi3>
 801d246:	0003      	movs	r3, r0
 801d248:	059b      	lsls	r3, r3, #22
 801d24a:	0d9b      	lsrs	r3, r3, #22
 801d24c:	b29b      	uxth	r3, r3
 801d24e:	059b      	lsls	r3, r3, #22
 801d250:	0d9b      	lsrs	r3, r3, #22
 801d252:	029b      	lsls	r3, r3, #10
 801d254:	25b0      	movs	r5, #176	; 0xb0
 801d256:	197a      	adds	r2, r7, r5
 801d258:	6812      	ldr	r2, [r2, #0]
 801d25a:	4912      	ldr	r1, [pc, #72]	; (801d2a4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x31c>)
 801d25c:	400a      	ands	r2, r1
 801d25e:	4313      	orrs	r3, r2
 801d260:	197a      	adds	r2, r7, r5
 801d262:	6013      	str	r3, [r2, #0]
      rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = ma / 10U;
 801d264:	193b      	adds	r3, r7, r4
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	210a      	movs	r1, #10
 801d26a:	0018      	movs	r0, r3
 801d26c:	f7e8 ffc0 	bl	80061f0 <__udivsi3>
 801d270:	0003      	movs	r3, r0
 801d272:	059b      	lsls	r3, r3, #22
 801d274:	0d9b      	lsrs	r3, r3, #22
 801d276:	b29a      	uxth	r2, r3
 801d278:	197b      	adds	r3, r7, r5
 801d27a:	0592      	lsls	r2, r2, #22
 801d27c:	0d90      	lsrs	r0, r2, #22
 801d27e:	881a      	ldrh	r2, [r3, #0]
 801d280:	0a92      	lsrs	r2, r2, #10
 801d282:	0292      	lsls	r2, r2, #10
 801d284:	1c11      	adds	r1, r2, #0
 801d286:	1c02      	adds	r2, r0, #0
 801d288:	430a      	orrs	r2, r1
 801d28a:	801a      	strh	r2, [r3, #0]
    break;
 801d28c:	e05c      	b.n	801d348 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>
 801d28e:	46c0      	nop			; (mov r8, r8)
 801d290:	20002f44 	.word	0x20002f44
 801d294:	20000108 	.word	0x20000108
 801d298:	20002f30 	.word	0x20002f30
 801d29c:	200000f4 	.word	0x200000f4
 801d2a0:	08024e6c 	.word	0x08024e6c
 801d2a4:	fff003ff 	.word	0xfff003ff
      DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 801d2a8:	230f      	movs	r3, #15
 801d2aa:	18fb      	adds	r3, r7, r3
 801d2ac:	781a      	ldrb	r2, [r3, #0]
 801d2ae:	4941      	ldr	r1, [pc, #260]	; (801d3b4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x42c>)
 801d2b0:	0013      	movs	r3, r2
 801d2b2:	009b      	lsls	r3, r3, #2
 801d2b4:	189b      	adds	r3, r3, r2
 801d2b6:	011b      	lsls	r3, r3, #4
 801d2b8:	18cb      	adds	r3, r1, r3
 801d2ba:	334c      	adds	r3, #76	; 0x4c
 801d2bc:	24c8      	movs	r4, #200	; 0xc8
 801d2be:	193a      	adds	r2, r7, r4
 801d2c0:	6812      	ldr	r2, [r2, #0]
 801d2c2:	601a      	str	r2, [r3, #0]
      rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO + 1U;
 801d2c4:	230e      	movs	r3, #14
 801d2c6:	18fb      	adds	r3, r7, r3
 801d2c8:	781b      	ldrb	r3, [r3, #0]
 801d2ca:	3301      	adds	r3, #1
 801d2cc:	b2db      	uxtb	r3, r3
 801d2ce:	1c1a      	adds	r2, r3, #0
 801d2d0:	2307      	movs	r3, #7
 801d2d2:	4013      	ands	r3, r2
 801d2d4:	b2da      	uxtb	r2, r3
 801d2d6:	23b3      	movs	r3, #179	; 0xb3
 801d2d8:	18fb      	adds	r3, r7, r3
 801d2da:	2107      	movs	r1, #7
 801d2dc:	400a      	ands	r2, r1
 801d2de:	0110      	lsls	r0, r2, #4
 801d2e0:	781a      	ldrb	r2, [r3, #0]
 801d2e2:	2170      	movs	r1, #112	; 0x70
 801d2e4:	438a      	bics	r2, r1
 801d2e6:	1c11      	adds	r1, r2, #0
 801d2e8:	1c02      	adds	r2, r0, #0
 801d2ea:	430a      	orrs	r2, r1
 801d2ec:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 801d2ee:	193b      	adds	r3, r7, r4
 801d2f0:	681b      	ldr	r3, [r3, #0]
 801d2f2:	2132      	movs	r1, #50	; 0x32
 801d2f4:	0018      	movs	r0, r3
 801d2f6:	f7e8 ff7b 	bl	80061f0 <__udivsi3>
 801d2fa:	0003      	movs	r3, r0
 801d2fc:	1c1a      	adds	r2, r3, #0
 801d2fe:	237f      	movs	r3, #127	; 0x7f
 801d300:	4013      	ands	r3, r2
 801d302:	b2da      	uxtb	r2, r3
 801d304:	24b0      	movs	r4, #176	; 0xb0
 801d306:	193b      	adds	r3, r7, r4
 801d308:	217f      	movs	r1, #127	; 0x7f
 801d30a:	400a      	ands	r2, r1
 801d30c:	0010      	movs	r0, r2
 801d30e:	781a      	ldrb	r2, [r3, #0]
 801d310:	217f      	movs	r1, #127	; 0x7f
 801d312:	438a      	bics	r2, r1
 801d314:	1c11      	adds	r1, r2, #0
 801d316:	1c02      	adds	r2, r0, #0
 801d318:	430a      	orrs	r2, r1
 801d31a:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 801d31c:	23cc      	movs	r3, #204	; 0xcc
 801d31e:	18fb      	adds	r3, r7, r3
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	2114      	movs	r1, #20
 801d324:	0018      	movs	r0, r3
 801d326:	f7e8 ff63 	bl	80061f0 <__udivsi3>
 801d32a:	0003      	movs	r3, r0
 801d32c:	055b      	lsls	r3, r3, #21
 801d32e:	0d5b      	lsrs	r3, r3, #21
 801d330:	b29b      	uxth	r3, r3
 801d332:	055b      	lsls	r3, r3, #21
 801d334:	0d5b      	lsrs	r3, r3, #21
 801d336:	025b      	lsls	r3, r3, #9
 801d338:	193a      	adds	r2, r7, r4
 801d33a:	6812      	ldr	r2, [r2, #0]
 801d33c:	491e      	ldr	r1, [pc, #120]	; (801d3b8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x430>)
 801d33e:	400a      	ands	r2, r1
 801d340:	4313      	orrs	r3, r2
 801d342:	193a      	adds	r2, r7, r4
 801d344:	6013      	str	r3, [r2, #0]
    break;
 801d346:	46c0      	nop			; (mov r8, r8)
  }

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 801d348:	23b0      	movs	r3, #176	; 0xb0
 801d34a:	18fb      	adds	r3, r7, r3
 801d34c:	681a      	ldr	r2, [r3, #0]
 801d34e:	21c4      	movs	r1, #196	; 0xc4
 801d350:	187b      	adds	r3, r7, r1
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	63da      	str	r2, [r3, #60]	; 0x3c
  pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 801d356:	23b3      	movs	r3, #179	; 0xb3
 801d358:	18fb      	adds	r3, r7, r3
 801d35a:	781b      	ldrb	r3, [r3, #0]
 801d35c:	065b      	lsls	r3, r3, #25
 801d35e:	0f5b      	lsrs	r3, r3, #29
 801d360:	b2db      	uxtb	r3, r3
 801d362:	001a      	movs	r2, r3
 801d364:	187b      	adds	r3, r7, r1
 801d366:	681b      	ldr	r3, [r3, #0]
 801d368:	641a      	str	r2, [r3, #64]	; 0x40

  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 801d36a:	187b      	adds	r3, r7, r1
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	601a      	str	r2, [r3, #0]
  /* Get the requested voltage */
  pdhandle->DPM_RequestedVoltage = mv;
 801d374:	187b      	adds	r3, r7, r1
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	22cc      	movs	r2, #204	; 0xcc
 801d37a:	18ba      	adds	r2, r7, r2
 801d37c:	6812      	ldr	r2, [r2, #0]
 801d37e:	649a      	str	r2, [r3, #72]	; 0x48

  char _str2[60];
  int len = snprintf(_str2, sizeof(_str2), "Call of native BuildRDO made");
 801d380:	4a0e      	ldr	r2, [pc, #56]	; (801d3bc <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x434>)
 801d382:	2454      	movs	r4, #84	; 0x54
 801d384:	193b      	adds	r3, r7, r4
 801d386:	213c      	movs	r1, #60	; 0x3c
 801d388:	0018      	movs	r0, r3
 801d38a:	f006 f94b 	bl	8023624 <sniprintf>
 801d38e:	0003      	movs	r3, r0
 801d390:	22bc      	movs	r2, #188	; 0xbc
 801d392:	18ba      	adds	r2, r7, r2
 801d394:	6013      	str	r3, [r2, #0]
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str2, strlen(_str2));
 801d396:	193b      	adds	r3, r7, r4
 801d398:	0018      	movs	r0, r3
 801d39a:	f7e8 ff17 	bl	80061cc <strlen>
 801d39e:	0002      	movs	r2, r0
 801d3a0:	193b      	adds	r3, r7, r4
 801d3a2:	9200      	str	r2, [sp, #0]
 801d3a4:	2200      	movs	r2, #0
 801d3a6:	2100      	movs	r1, #0
 801d3a8:	2006      	movs	r0, #6
 801d3aa:	f7f5 fb29 	bl	8012a00 <USBPD_TRACE_Add>
}
 801d3ae:	46bd      	mov	sp, r7
 801d3b0:	b035      	add	sp, #212	; 0xd4
 801d3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3b4:	20002f44 	.word	0x20002f44
 801d3b8:	fff001ff 	.word	0xfff001ff
 801d3bc:	08024e4c 	.word	0x08024e4c

0801d3c0 <USER_SERV_SNK_BuildRequestedRDO>:
void USER_SERV_SNK_BuildRequestedRDO(uint8_t PortNum,
                                                  uint16_t IndexSrcPDO,
												  uint16_t Voltage_mV, uint16_t Current_mA,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 801d3c0:	b5b0      	push	{r4, r5, r7, lr}
 801d3c2:	b088      	sub	sp, #32
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	0005      	movs	r5, r0
 801d3c8:	000c      	movs	r4, r1
 801d3ca:	0010      	movs	r0, r2
 801d3cc:	0019      	movs	r1, r3
 801d3ce:	1dfb      	adds	r3, r7, #7
 801d3d0:	1c2a      	adds	r2, r5, #0
 801d3d2:	701a      	strb	r2, [r3, #0]
 801d3d4:	1d3b      	adds	r3, r7, #4
 801d3d6:	1c22      	adds	r2, r4, #0
 801d3d8:	801a      	strh	r2, [r3, #0]
 801d3da:	1cbb      	adds	r3, r7, #2
 801d3dc:	1c02      	adds	r2, r0, #0
 801d3de:	801a      	strh	r2, [r3, #0]
 801d3e0:	003b      	movs	r3, r7
 801d3e2:	1c0a      	adds	r2, r1, #0
 801d3e4:	801a      	strh	r2, [r3, #0]
  uint32_t mv = Voltage_mV;
 801d3e6:	1cbb      	adds	r3, r7, #2
 801d3e8:	881b      	ldrh	r3, [r3, #0]
 801d3ea:	61fb      	str	r3, [r7, #28]
  uint32_t ma = Current_mA;
 801d3ec:	003b      	movs	r3, r7
 801d3ee:	881b      	ldrh	r3, [r3, #0]
 801d3f0:	61bb      	str	r3, [r7, #24]
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801d3f2:	1dfb      	adds	r3, r7, #7
 801d3f4:	781a      	ldrb	r2, [r3, #0]
 801d3f6:	0013      	movs	r3, r2
 801d3f8:	009b      	lsls	r3, r3, #2
 801d3fa:	189b      	adds	r3, r3, r2
 801d3fc:	011b      	lsls	r3, r3, #4
 801d3fe:	4a63      	ldr	r2, [pc, #396]	; (801d58c <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 801d400:	189b      	adds	r3, r3, r2
 801d402:	617b      	str	r3, [r7, #20]

  /* Initialize RDO */
  rdo.d32 = 0;
 801d404:	2300      	movs	r3, #0
 801d406:	60fb      	str	r3, [r7, #12]
  rdo.GenericRDO.USBCommunicationsCapable = 0; //snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801d408:	200f      	movs	r0, #15
 801d40a:	183b      	adds	r3, r7, r0
 801d40c:	781a      	ldrb	r2, [r3, #0]
 801d40e:	2102      	movs	r1, #2
 801d410:	438a      	bics	r2, r1
 801d412:	701a      	strb	r2, [r3, #0]
                                               //Shall only be set for Sources capable of communication over the USB data lines
  rdo.GenericRDO.NoUSBSuspend             = 1; //Sinks May indicate to the Source that they would prefer to have the USB Suspend Supported flag cleared by setting
 801d414:	183b      	adds	r3, r7, r0
 801d416:	781a      	ldrb	r2, [r3, #0]
 801d418:	2101      	movs	r1, #1
 801d41a:	430a      	orrs	r2, r1
 801d41c:	701a      	strb	r2, [r3, #0]
                                               //the No USB Suspend flag in a Request Message
  rdo.GenericRDO.ObjectPosition = IndexSrcPDO;
 801d41e:	1d3b      	adds	r3, r7, #4
 801d420:	881b      	ldrh	r3, [r3, #0]
 801d422:	1c1a      	adds	r2, r3, #0
 801d424:	2307      	movs	r3, #7
 801d426:	4013      	ands	r3, r2
 801d428:	b2da      	uxtb	r2, r3
 801d42a:	183b      	adds	r3, r7, r0
 801d42c:	2107      	movs	r1, #7
 801d42e:	400a      	ands	r2, r1
 801d430:	0110      	lsls	r0, r2, #4
 801d432:	781a      	ldrb	r2, [r3, #0]
 801d434:	2170      	movs	r1, #112	; 0x70
 801d436:	438a      	bics	r2, r1
 801d438:	1c11      	adds	r1, r2, #0
 801d43a:	1c02      	adds	r2, r0, #0
 801d43c:	430a      	orrs	r2, r1
 801d43e:	701a      	strb	r2, [r3, #0]

  /* Initialize PDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO-1];
 801d440:	1d3b      	adds	r3, r7, #4
 801d442:	881b      	ldrh	r3, [r3, #0]
 801d444:	1e5a      	subs	r2, r3, #1
 801d446:	697b      	ldr	r3, [r7, #20]
 801d448:	0092      	lsls	r2, r2, #2
 801d44a:	58d3      	ldr	r3, [r2, r3]
 801d44c:	613b      	str	r3, [r7, #16]
  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 801d44e:	2113      	movs	r1, #19
 801d450:	187b      	adds	r3, r7, r1
 801d452:	781b      	ldrb	r3, [r3, #0]
 801d454:	061b      	lsls	r3, r3, #24
 801d456:	0f9b      	lsrs	r3, r3, #30
 801d458:	b2db      	uxtb	r3, r3
 801d45a:	001a      	movs	r2, r3
 801d45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d45e:	601a      	str	r2, [r3, #0]

  /* Build RDO*/
  switch (pdo.GenericPDO.PowerObject)
 801d460:	187b      	adds	r3, r7, r1
 801d462:	781b      	ldrb	r3, [r3, #0]
 801d464:	061b      	lsls	r3, r3, #24
 801d466:	0f9b      	lsrs	r3, r3, #30
 801d468:	b2db      	uxtb	r3, r3
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d002      	beq.n	801d474 <USER_SERV_SNK_BuildRequestedRDO+0xb4>
 801d46e:	2b03      	cmp	r3, #3
 801d470:	d02e      	beq.n	801d4d0 <USER_SERV_SNK_BuildRequestedRDO+0x110>
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
      }
      break;

      default:
        break;
 801d472:	e072      	b.n	801d55a <USER_SERV_SNK_BuildRequestedRDO+0x19a>
        DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 801d474:	1dfb      	adds	r3, r7, #7
 801d476:	781a      	ldrb	r2, [r3, #0]
 801d478:	4944      	ldr	r1, [pc, #272]	; (801d58c <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 801d47a:	0013      	movs	r3, r2
 801d47c:	009b      	lsls	r3, r3, #2
 801d47e:	189b      	adds	r3, r3, r2
 801d480:	011b      	lsls	r3, r3, #4
 801d482:	18cb      	adds	r3, r1, r3
 801d484:	334c      	adds	r3, #76	; 0x4c
 801d486:	69ba      	ldr	r2, [r7, #24]
 801d488:	601a      	str	r2, [r3, #0]
        rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 801d48a:	69bb      	ldr	r3, [r7, #24]
 801d48c:	210a      	movs	r1, #10
 801d48e:	0018      	movs	r0, r3
 801d490:	f7e8 feae 	bl	80061f0 <__udivsi3>
 801d494:	0003      	movs	r3, r0
 801d496:	059b      	lsls	r3, r3, #22
 801d498:	0d9b      	lsrs	r3, r3, #22
 801d49a:	b29b      	uxth	r3, r3
 801d49c:	059b      	lsls	r3, r3, #22
 801d49e:	0d9b      	lsrs	r3, r3, #22
 801d4a0:	029b      	lsls	r3, r3, #10
 801d4a2:	68fa      	ldr	r2, [r7, #12]
 801d4a4:	493a      	ldr	r1, [pc, #232]	; (801d590 <USER_SERV_SNK_BuildRequestedRDO+0x1d0>)
 801d4a6:	400a      	ands	r2, r1
 801d4a8:	4313      	orrs	r3, r2
 801d4aa:	60fb      	str	r3, [r7, #12]
        rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits; //ma / 10U;
 801d4ac:	2310      	movs	r3, #16
 801d4ae:	18fb      	adds	r3, r7, r3
 801d4b0:	881b      	ldrh	r3, [r3, #0]
 801d4b2:	059b      	lsls	r3, r3, #22
 801d4b4:	0d9b      	lsrs	r3, r3, #22
 801d4b6:	b29a      	uxth	r2, r3
 801d4b8:	230c      	movs	r3, #12
 801d4ba:	18fb      	adds	r3, r7, r3
 801d4bc:	0592      	lsls	r2, r2, #22
 801d4be:	0d90      	lsrs	r0, r2, #22
 801d4c0:	881a      	ldrh	r2, [r3, #0]
 801d4c2:	0a92      	lsrs	r2, r2, #10
 801d4c4:	0292      	lsls	r2, r2, #10
 801d4c6:	1c11      	adds	r1, r2, #0
 801d4c8:	1c02      	adds	r2, r0, #0
 801d4ca:	430a      	orrs	r2, r1
 801d4cc:	801a      	strh	r2, [r3, #0]
      break;
 801d4ce:	e044      	b.n	801d55a <USER_SERV_SNK_BuildRequestedRDO+0x19a>
        DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 801d4d0:	1dfb      	adds	r3, r7, #7
 801d4d2:	781a      	ldrb	r2, [r3, #0]
 801d4d4:	492d      	ldr	r1, [pc, #180]	; (801d58c <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 801d4d6:	0013      	movs	r3, r2
 801d4d8:	009b      	lsls	r3, r3, #2
 801d4da:	189b      	adds	r3, r3, r2
 801d4dc:	011b      	lsls	r3, r3, #4
 801d4de:	18cb      	adds	r3, r1, r3
 801d4e0:	334c      	adds	r3, #76	; 0x4c
 801d4e2:	69ba      	ldr	r2, [r7, #24]
 801d4e4:	601a      	str	r2, [r3, #0]
        rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO;
 801d4e6:	1d3b      	adds	r3, r7, #4
 801d4e8:	881b      	ldrh	r3, [r3, #0]
 801d4ea:	1c1a      	adds	r2, r3, #0
 801d4ec:	2307      	movs	r3, #7
 801d4ee:	4013      	ands	r3, r2
 801d4f0:	b2da      	uxtb	r2, r3
 801d4f2:	230f      	movs	r3, #15
 801d4f4:	18fb      	adds	r3, r7, r3
 801d4f6:	2107      	movs	r1, #7
 801d4f8:	400a      	ands	r2, r1
 801d4fa:	0110      	lsls	r0, r2, #4
 801d4fc:	781a      	ldrb	r2, [r3, #0]
 801d4fe:	2170      	movs	r1, #112	; 0x70
 801d500:	438a      	bics	r2, r1
 801d502:	1c11      	adds	r1, r2, #0
 801d504:	1c02      	adds	r2, r0, #0
 801d506:	430a      	orrs	r2, r1
 801d508:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 801d50a:	69bb      	ldr	r3, [r7, #24]
 801d50c:	2132      	movs	r1, #50	; 0x32
 801d50e:	0018      	movs	r0, r3
 801d510:	f7e8 fe6e 	bl	80061f0 <__udivsi3>
 801d514:	0003      	movs	r3, r0
 801d516:	1c1a      	adds	r2, r3, #0
 801d518:	237f      	movs	r3, #127	; 0x7f
 801d51a:	4013      	ands	r3, r2
 801d51c:	b2da      	uxtb	r2, r3
 801d51e:	230c      	movs	r3, #12
 801d520:	18fb      	adds	r3, r7, r3
 801d522:	217f      	movs	r1, #127	; 0x7f
 801d524:	400a      	ands	r2, r1
 801d526:	0010      	movs	r0, r2
 801d528:	781a      	ldrb	r2, [r3, #0]
 801d52a:	217f      	movs	r1, #127	; 0x7f
 801d52c:	438a      	bics	r2, r1
 801d52e:	1c11      	adds	r1, r2, #0
 801d530:	1c02      	adds	r2, r0, #0
 801d532:	430a      	orrs	r2, r1
 801d534:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 801d536:	69fb      	ldr	r3, [r7, #28]
 801d538:	2114      	movs	r1, #20
 801d53a:	0018      	movs	r0, r3
 801d53c:	f7e8 fe58 	bl	80061f0 <__udivsi3>
 801d540:	0003      	movs	r3, r0
 801d542:	055b      	lsls	r3, r3, #21
 801d544:	0d5b      	lsrs	r3, r3, #21
 801d546:	b29b      	uxth	r3, r3
 801d548:	055b      	lsls	r3, r3, #21
 801d54a:	0d5b      	lsrs	r3, r3, #21
 801d54c:	025b      	lsls	r3, r3, #9
 801d54e:	68fa      	ldr	r2, [r7, #12]
 801d550:	4910      	ldr	r1, [pc, #64]	; (801d594 <USER_SERV_SNK_BuildRequestedRDO+0x1d4>)
 801d552:	400a      	ands	r2, r1
 801d554:	4313      	orrs	r3, r2
 801d556:	60fb      	str	r3, [r7, #12]
      break;
 801d558:	46c0      	nop			; (mov r8, r8)
    }

  /*Assign request values to pdhandle*/
  pdhandle->DPM_RDOPositionPrevious = pdhandle->DPM_RDOPosition;
 801d55a:	697b      	ldr	r3, [r7, #20]
 801d55c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d55e:	697b      	ldr	r3, [r7, #20]
 801d560:	645a      	str	r2, [r3, #68]	; 0x44
  pdhandle->DPM_RDOPosition = IndexSrcPDO; //pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 801d562:	1d3b      	adds	r3, r7, #4
 801d564:	881a      	ldrh	r2, [r3, #0]
 801d566:	697b      	ldr	r3, [r7, #20]
 801d568:	641a      	str	r2, [r3, #64]	; 0x40
  pdhandle->DPM_RequestedVoltage = mv;
 801d56a:	697b      	ldr	r3, [r7, #20]
 801d56c:	69fa      	ldr	r2, [r7, #28]
 801d56e:	649a      	str	r2, [r3, #72]	; 0x48
  pdhandle->DPM_RequestedCurrent = ma;
 801d570:	697b      	ldr	r3, [r7, #20]
 801d572:	69ba      	ldr	r2, [r7, #24]
 801d574:	64da      	str	r2, [r3, #76]	; 0x4c

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 801d576:	68fa      	ldr	r2, [r7, #12]
 801d578:	697b      	ldr	r3, [r7, #20]
 801d57a:	63da      	str	r2, [r3, #60]	; 0x3c
  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 801d57c:	697b      	ldr	r3, [r7, #20]
 801d57e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d582:	601a      	str	r2, [r3, #0]

}
 801d584:	46c0      	nop			; (mov r8, r8)
 801d586:	46bd      	mov	sp, r7
 801d588:	b008      	add	sp, #32
 801d58a:	bdb0      	pop	{r4, r5, r7, pc}
 801d58c:	20002f44 	.word	0x20002f44
 801d590:	fff003ff 	.word	0xfff003ff
 801d594:	fff001ff 	.word	0xfff001ff

0801d598 <USER_SERV_FindSRCIndex>:
											USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
											uint16_t Voltage_mV,
											uint16_t Current_mA,
											uint8_t Method)

{
 801d598:	b590      	push	{r4, r7, lr}
 801d59a:	b099      	sub	sp, #100	; 0x64
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	60f8      	str	r0, [r7, #12]
 801d5a0:	60b9      	str	r1, [r7, #8]
 801d5a2:	0019      	movs	r1, r3
 801d5a4:	1dbb      	adds	r3, r7, #6
 801d5a6:	801a      	strh	r2, [r3, #0]
 801d5a8:	1d3b      	adds	r3, r7, #4
 801d5aa:	1c0a      	adds	r2, r1, #0
 801d5ac:	801a      	strh	r2, [r3, #0]
	USBPD_PDO_TypeDef srcpdo;
	uint32_t *ptpdoarray;
	uint32_t reqvoltage = Voltage_mV;
 801d5ae:	1dbb      	adds	r3, r7, #6
 801d5b0:	881b      	ldrh	r3, [r3, #0]
 801d5b2:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t reqcurrent = Current_mA;
 801d5b4:	1d3b      	adds	r3, r7, #4
 801d5b6:	881b      	ldrh	r3, [r3, #0]
 801d5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t nbsrcpdo;
	uint32_t allowablepower;
	uint32_t selpower;
	uint32_t allowablecurrent;
	uint32_t selcurrent = 0;
 801d5ba:	2300      	movs	r3, #0
 801d5bc:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 801d5be:	23ff      	movs	r3, #255	; 0xff
 801d5c0:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t temp_index;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	2274      	movs	r2, #116	; 0x74
 801d5c6:	435a      	muls	r2, r3
 801d5c8:	4b7d      	ldr	r3, [pc, #500]	; (801d7c0 <USER_SERV_FindSRCIndex+0x228>)
 801d5ca:	18d3      	adds	r3, r2, r3
 801d5cc:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t RDOposition;
	uint32_t nbsrcAPDO = 0;
 801d5ce:	2300      	movs	r3, #0
 801d5d0:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t nbsrcFixedPDO = 0;
 801d5d2:	2300      	movs	r3, #0
 801d5d4:	64fb      	str	r3, [r7, #76]	; 0x4c


	//Get current PDO position
	USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801d5d6:	68fa      	ldr	r2, [r7, #12]
 801d5d8:	0013      	movs	r3, r2
 801d5da:	009b      	lsls	r3, r3, #2
 801d5dc:	189b      	adds	r3, r3, r2
 801d5de:	011b      	lsls	r3, r3, #4
 801d5e0:	4a78      	ldr	r2, [pc, #480]	; (801d7c4 <USER_SERV_FindSRCIndex+0x22c>)
 801d5e2:	189b      	adds	r3, r3, r2
 801d5e4:	637b      	str	r3, [r7, #52]	; 0x34
	RDOposition = pdhandle->DPM_RDOPosition;
 801d5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5ea:	633b      	str	r3, [r7, #48]	; 0x30

	//Get number of source PDOs
	nbsrcpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 801d5ec:	4975      	ldr	r1, [pc, #468]	; (801d7c4 <USER_SERV_FindSRCIndex+0x22c>)
 801d5ee:	68fa      	ldr	r2, [r7, #12]
 801d5f0:	0013      	movs	r3, r2
 801d5f2:	009b      	lsls	r3, r3, #2
 801d5f4:	189b      	adds	r3, r3, r2
 801d5f6:	011b      	lsls	r3, r3, #4
 801d5f8:	18cb      	adds	r3, r1, r3
 801d5fa:	331c      	adds	r3, #28
 801d5fc:	681b      	ldr	r3, [r3, #0]
 801d5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	//Get array list of SRC PDOs
	ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 801d600:	68fa      	ldr	r2, [r7, #12]
 801d602:	0013      	movs	r3, r2
 801d604:	009b      	lsls	r3, r3, #2
 801d606:	189b      	adds	r3, r3, r2
 801d608:	011b      	lsls	r3, r3, #4
 801d60a:	4a6e      	ldr	r2, [pc, #440]	; (801d7c4 <USER_SERV_FindSRCIndex+0x22c>)
 801d60c:	189b      	adds	r3, r3, r2
 801d60e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Get number of APDOs and FixedPDOs */
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801d610:	2300      	movs	r3, #0
 801d612:	657b      	str	r3, [r7, #84]	; 0x54
 801d614:	e019      	b.n	801d64a <USER_SERV_FindSRCIndex+0xb2>
	{
		srcpdo.d32 = ptpdoarray[temp_index];
 801d616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d618:	009b      	lsls	r3, r3, #2
 801d61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d61c:	18d3      	adds	r3, r2, r3
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	613b      	str	r3, [r7, #16]

		switch (srcpdo.GenericPDO.PowerObject)
 801d622:	2313      	movs	r3, #19
 801d624:	18fb      	adds	r3, r7, r3
 801d626:	781b      	ldrb	r3, [r3, #0]
 801d628:	061b      	lsls	r3, r3, #24
 801d62a:	0f9b      	lsrs	r3, r3, #30
 801d62c:	b2db      	uxtb	r3, r3
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d002      	beq.n	801d638 <USER_SERV_FindSRCIndex+0xa0>
 801d632:	2b03      	cmp	r3, #3
 801d634:	d003      	beq.n	801d63e <USER_SERV_FindSRCIndex+0xa6>
 801d636:	e005      	b.n	801d644 <USER_SERV_FindSRCIndex+0xac>
		{
			/* SRC Fixed Supply PDO */
			case USBPD_CORE_PDO_TYPE_FIXED:
			{
				nbsrcFixedPDO++;
 801d638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d63a:	3301      	adds	r3, #1
 801d63c:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			/* Augmented Power Data Object (APDO) */
			case USBPD_CORE_PDO_TYPE_APDO:
			{
				//nbsrcAPDO++;
				nbsrcAPDO++;
 801d63e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d640:	3301      	adds	r3, #1
 801d642:	653b      	str	r3, [r7, #80]	; 0x50
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801d644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d646:	3301      	adds	r3, #1
 801d648:	657b      	str	r3, [r7, #84]	; 0x54
 801d64a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d64e:	429a      	cmp	r2, r3
 801d650:	d3e1      	bcc.n	801d616 <USER_SERV_FindSRCIndex+0x7e>
		}
	}


	// Search for matching APDO or find next FixedPDO
	if (nbsrcAPDO > 0)
 801d652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d654:	2b00      	cmp	r3, #0
 801d656:	d100      	bne.n	801d65a <USER_SERV_FindSRCIndex+0xc2>
 801d658:	e07c      	b.n	801d754 <USER_SERV_FindSRCIndex+0x1bc>
	{

		/* Check SRC PDO value according to its type */
		for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801d65a:	2300      	movs	r3, #0
 801d65c:	657b      	str	r3, [r7, #84]	; 0x54
 801d65e:	e074      	b.n	801d74a <USER_SERV_FindSRCIndex+0x1b2>
		{
			srcpdo.d32 = ptpdoarray[temp_index];
 801d660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d662:	009b      	lsls	r3, r3, #2
 801d664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d666:	18d3      	adds	r3, r2, r3
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	613b      	str	r3, [r7, #16]

			switch (srcpdo.GenericPDO.PowerObject)
 801d66c:	2313      	movs	r3, #19
 801d66e:	18fb      	adds	r3, r7, r3
 801d670:	781b      	ldrb	r3, [r3, #0]
 801d672:	061b      	lsls	r3, r3, #24
 801d674:	0f9b      	lsrs	r3, r3, #30
 801d676:	b2db      	uxtb	r3, r3
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d001      	beq.n	801d680 <USER_SERV_FindSRCIndex+0xe8>
 801d67c:	2b03      	cmp	r3, #3
 801d67e:	d161      	bne.n	801d744 <USER_SERV_FindSRCIndex+0x1ac>
			{
				uint16_t srcmaxvoltage100mv;
				uint16_t srcminvoltage100mv;
				uint16_t srcmaxcurrent50ma;
				//Extract voltage and current limits of given SRC APDO
				srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801d680:	2312      	movs	r3, #18
 801d682:	18fb      	adds	r3, r7, r3
 801d684:	881b      	ldrh	r3, [r3, #0]
 801d686:	05db      	lsls	r3, r3, #23
 801d688:	0e1b      	lsrs	r3, r3, #24
 801d68a:	b2da      	uxtb	r2, r3
 801d68c:	201e      	movs	r0, #30
 801d68e:	183b      	adds	r3, r7, r0
 801d690:	801a      	strh	r2, [r3, #0]
				srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801d692:	2110      	movs	r1, #16
 801d694:	187b      	adds	r3, r7, r1
 801d696:	785a      	ldrb	r2, [r3, #1]
 801d698:	241c      	movs	r4, #28
 801d69a:	193b      	adds	r3, r7, r4
 801d69c:	801a      	strh	r2, [r3, #0]
				srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801d69e:	187b      	adds	r3, r7, r1
 801d6a0:	781b      	ldrb	r3, [r3, #0]
 801d6a2:	065b      	lsls	r3, r3, #25
 801d6a4:	0e5b      	lsrs	r3, r3, #25
 801d6a6:	b2da      	uxtb	r2, r3
 801d6a8:	211a      	movs	r1, #26
 801d6aa:	187b      	adds	r3, r7, r1
 801d6ac:	801a      	strh	r2, [r3, #0]

				/*Check if reqvoltage falls within SRC_APDO voltage range*/
				if ( (PWR_DECODE_100MV(srcminvoltage100mv) <= reqvoltage) && (reqvoltage <= PWR_DECODE_100MV(srcmaxvoltage100mv)) )
 801d6ae:	193b      	adds	r3, r7, r4
 801d6b0:	881b      	ldrh	r3, [r3, #0]
 801d6b2:	2264      	movs	r2, #100	; 0x64
 801d6b4:	4353      	muls	r3, r2
 801d6b6:	b29b      	uxth	r3, r3
 801d6b8:	001a      	movs	r2, r3
 801d6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d6bc:	4293      	cmp	r3, r2
 801d6be:	d341      	bcc.n	801d744 <USER_SERV_FindSRCIndex+0x1ac>
 801d6c0:	183b      	adds	r3, r7, r0
 801d6c2:	881b      	ldrh	r3, [r3, #0]
 801d6c4:	2264      	movs	r2, #100	; 0x64
 801d6c6:	4353      	muls	r3, r2
 801d6c8:	b29b      	uxth	r3, r3
 801d6ca:	001a      	movs	r2, r3
 801d6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d6ce:	4293      	cmp	r3, r2
 801d6d0:	d838      	bhi.n	801d744 <USER_SERV_FindSRCIndex+0x1ac>
				{
					/*Check that reqcurrent is smaller or equal to srcmaxcurrent*/
					if ( (reqcurrent <= PWR_DECODE_50MA(srcmaxcurrent50ma)) && (reqcurrent != 0) )
 801d6d2:	187b      	adds	r3, r7, r1
 801d6d4:	881b      	ldrh	r3, [r3, #0]
 801d6d6:	2232      	movs	r2, #50	; 0x32
 801d6d8:	4353      	muls	r3, r2
 801d6da:	b29b      	uxth	r3, r3
 801d6dc:	001a      	movs	r2, r3
 801d6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6e0:	4293      	cmp	r3, r2
 801d6e2:	d82f      	bhi.n	801d744 <USER_SERV_FindSRCIndex+0x1ac>
 801d6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d02c      	beq.n	801d744 <USER_SERV_FindSRCIndex+0x1ac>
					{
						/*Convert srcmaxcurrent into mV*/
						allowablecurrent = PWR_DECODE_50MA(srcmaxcurrent50ma);
 801d6ea:	187b      	adds	r3, r7, r1
 801d6ec:	881b      	ldrh	r3, [r3, #0]
 801d6ee:	2232      	movs	r2, #50	; 0x32
 801d6f0:	4353      	muls	r3, r2
 801d6f2:	b29b      	uxth	r3, r3
 801d6f4:	617b      	str	r3, [r7, #20]

						/*Find the best APDO index based on the method */
						switch(Method)
 801d6f6:	2368      	movs	r3, #104	; 0x68
 801d6f8:	2208      	movs	r2, #8
 801d6fa:	189b      	adds	r3, r3, r2
 801d6fc:	19db      	adds	r3, r3, r7
 801d6fe:	781b      	ldrb	r3, [r3, #0]
 801d700:	2b04      	cmp	r3, #4
 801d702:	d002      	beq.n	801d70a <USER_SERV_FindSRCIndex+0x172>
 801d704:	2b05      	cmp	r3, #5
 801d706:	d009      	beq.n	801d71c <USER_SERV_FindSRCIndex+0x184>
 801d708:	e014      	b.n	801d734 <USER_SERV_FindSRCIndex+0x19c>
						{
						case PDO_SEL_METHOD_MAX_CUR:
							if (allowablecurrent > selcurrent)
 801d70a:	697a      	ldr	r2, [r7, #20]
 801d70c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d70e:	429a      	cmp	r2, r3
 801d710:	d915      	bls.n	801d73e <USER_SERV_FindSRCIndex+0x1a6>
							{
								/* Consider the current PDO the best one until now */
								curr_index = temp_index;
 801d712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d714:	65bb      	str	r3, [r7, #88]	; 0x58
								selcurrent = allowablecurrent;
 801d716:	697b      	ldr	r3, [r7, #20]
 801d718:	65fb      	str	r3, [r7, #92]	; 0x5c
							}
							break;
 801d71a:	e010      	b.n	801d73e <USER_SERV_FindSRCIndex+0x1a6>

						case PDO_SEL_METHOD_MIN_CUR:
							if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 801d71c:	697a      	ldr	r2, [r7, #20]
 801d71e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d720:	429a      	cmp	r2, r3
 801d722:	d302      	bcc.n	801d72a <USER_SERV_FindSRCIndex+0x192>
 801d724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d726:	2b00      	cmp	r3, #0
 801d728:	d10b      	bne.n	801d742 <USER_SERV_FindSRCIndex+0x1aa>
							{
								/* Consider the current PDO the best one until now */
								curr_index = temp_index;
 801d72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d72c:	65bb      	str	r3, [r7, #88]	; 0x58
								selcurrent = allowablecurrent;
 801d72e:	697b      	ldr	r3, [r7, #20]
 801d730:	65fb      	str	r3, [r7, #92]	; 0x5c
							}
							break;
 801d732:	e006      	b.n	801d742 <USER_SERV_FindSRCIndex+0x1aa>

						default:
							/* Default behavior: last PDO is selected */
							curr_index = temp_index;
 801d734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d736:	65bb      	str	r3, [r7, #88]	; 0x58
							selcurrent = allowablecurrent;
 801d738:	697b      	ldr	r3, [r7, #20]
 801d73a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d73c:	e002      	b.n	801d744 <USER_SERV_FindSRCIndex+0x1ac>
							break;
 801d73e:	46c0      	nop			; (mov r8, r8)
 801d740:	e000      	b.n	801d744 <USER_SERV_FindSRCIndex+0x1ac>
							break;
 801d742:	46c0      	nop			; (mov r8, r8)
		for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801d744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d746:	3301      	adds	r3, #1
 801d748:	657b      	str	r3, [r7, #84]	; 0x54
 801d74a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d74e:	429a      	cmp	r2, r3
 801d750:	d386      	bcc.n	801d660 <USER_SERV_FindSRCIndex+0xc8>
 801d752:	e02e      	b.n	801d7b2 <USER_SERV_FindSRCIndex+0x21a>
		}
	}

	else
	{
		uint32_t start_index = RDOposition;
 801d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d756:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t found_fixed_pdo = 0;
 801d758:	2300      	movs	r3, #0
 801d75a:	64bb      	str	r3, [r7, #72]	; 0x48

		// Start searching for the next Fixed PDO
		for (uint32_t i = 0; i < nbsrcpdo; i++)
 801d75c:	2300      	movs	r3, #0
 801d75e:	647b      	str	r3, [r7, #68]	; 0x44
 801d760:	e01e      	b.n	801d7a0 <USER_SERV_FindSRCIndex+0x208>
		{
			// Increment and wrap around if necessary
			uint32_t check_index = (start_index + i) % nbsrcpdo;
 801d762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d766:	18d3      	adds	r3, r2, r3
 801d768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d76a:	0018      	movs	r0, r3
 801d76c:	f7e8 fdc6 	bl	80062fc <__aeabi_uidivmod>
 801d770:	000b      	movs	r3, r1
 801d772:	623b      	str	r3, [r7, #32]

			// Load the PDO
			srcpdo.d32 = ptpdoarray[check_index];
 801d774:	6a3b      	ldr	r3, [r7, #32]
 801d776:	009b      	lsls	r3, r3, #2
 801d778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d77a:	18d3      	adds	r3, r2, r3
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	613b      	str	r3, [r7, #16]

			// Check if it's a Fixed PDO
			if (srcpdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_FIXED)
 801d780:	2313      	movs	r3, #19
 801d782:	18fb      	adds	r3, r7, r3
 801d784:	781b      	ldrb	r3, [r3, #0]
 801d786:	223f      	movs	r2, #63	; 0x3f
 801d788:	4393      	bics	r3, r2
 801d78a:	b2db      	uxtb	r3, r3
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d104      	bne.n	801d79a <USER_SERV_FindSRCIndex+0x202>
			{
				curr_index = check_index;
 801d790:	6a3b      	ldr	r3, [r7, #32]
 801d792:	65bb      	str	r3, [r7, #88]	; 0x58
				found_fixed_pdo = 1;
 801d794:	2301      	movs	r3, #1
 801d796:	64bb      	str	r3, [r7, #72]	; 0x48
				break;
 801d798:	e006      	b.n	801d7a8 <USER_SERV_FindSRCIndex+0x210>
		for (uint32_t i = 0; i < nbsrcpdo; i++)
 801d79a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d79c:	3301      	adds	r3, #1
 801d79e:	647b      	str	r3, [r7, #68]	; 0x44
 801d7a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7a4:	429a      	cmp	r2, r3
 801d7a6:	d3dc      	bcc.n	801d762 <USER_SERV_FindSRCIndex+0x1ca>
			}
		}

		// Default to the first Fixed PDO if none found (failsafe)
		if (!found_fixed_pdo)
 801d7a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d101      	bne.n	801d7b2 <USER_SERV_FindSRCIndex+0x21a>
		{
			curr_index = 0;
 801d7ae:	2300      	movs	r3, #0
 801d7b0:	65bb      	str	r3, [r7, #88]	; 0x58
		}
	}

	return curr_index+1;
 801d7b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d7b4:	3301      	adds	r3, #1
}
 801d7b6:	0018      	movs	r0, r3
 801d7b8:	46bd      	mov	sp, r7
 801d7ba:	b019      	add	sp, #100	; 0x64
 801d7bc:	bd90      	pop	{r4, r7, pc}
 801d7be:	46c0      	nop			; (mov r8, r8)
 801d7c0:	20000108 	.word	0x20000108
 801d7c4:	20002f44 	.word	0x20002f44

0801d7c8 <USER_SERV_ExtractSRCCapa>:

void USER_SERV_ExtractSRCCapa(void) {
 801d7c8:	b580      	push	{r7, lr}
 801d7ca:	af00      	add	r7, sp, #0
	sourcecapa_limits();
 801d7cc:	f7e9 fd2a 	bl	8007224 <sourcecapa_limits>
}
 801d7d0:	46c0      	nop			; (mov r8, r8)
 801d7d2:	46bd      	mov	sp, r7
 801d7d4:	bd80      	pop	{r7, pc}
	...

0801d7d8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801d7d8:	b580      	push	{r7, lr}
 801d7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801d7dc:	4914      	ldr	r1, [pc, #80]	; (801d830 <MX_USB_Device_Init+0x58>)
 801d7de:	4b15      	ldr	r3, [pc, #84]	; (801d834 <MX_USB_Device_Init+0x5c>)
 801d7e0:	2200      	movs	r2, #0
 801d7e2:	0018      	movs	r0, r3
 801d7e4:	f7f8 fdfc 	bl	80163e0 <USBD_Init>
 801d7e8:	1e03      	subs	r3, r0, #0
 801d7ea:	d001      	beq.n	801d7f0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801d7ec:	f7eb f9e4 	bl	8008bb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801d7f0:	4a11      	ldr	r2, [pc, #68]	; (801d838 <MX_USB_Device_Init+0x60>)
 801d7f2:	4b10      	ldr	r3, [pc, #64]	; (801d834 <MX_USB_Device_Init+0x5c>)
 801d7f4:	0011      	movs	r1, r2
 801d7f6:	0018      	movs	r0, r3
 801d7f8:	f7f8 fe2c 	bl	8016454 <USBD_RegisterClass>
 801d7fc:	1e03      	subs	r3, r0, #0
 801d7fe:	d001      	beq.n	801d804 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 801d800:	f7eb f9da 	bl	8008bb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801d804:	4a0d      	ldr	r2, [pc, #52]	; (801d83c <MX_USB_Device_Init+0x64>)
 801d806:	4b0b      	ldr	r3, [pc, #44]	; (801d834 <MX_USB_Device_Init+0x5c>)
 801d808:	0011      	movs	r1, r2
 801d80a:	0018      	movs	r0, r3
 801d80c:	f7f8 fd54 	bl	80162b8 <USBD_CDC_RegisterInterface>
 801d810:	1e03      	subs	r3, r0, #0
 801d812:	d001      	beq.n	801d818 <MX_USB_Device_Init+0x40>
    Error_Handler();
 801d814:	f7eb f9d0 	bl	8008bb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801d818:	4b06      	ldr	r3, [pc, #24]	; (801d834 <MX_USB_Device_Init+0x5c>)
 801d81a:	0018      	movs	r0, r3
 801d81c:	f7f8 fe58 	bl	80164d0 <USBD_Start>
 801d820:	1e03      	subs	r3, r0, #0
 801d822:	d001      	beq.n	801d828 <MX_USB_Device_Init+0x50>
    Error_Handler();
 801d824:	f7eb f9c8 	bl	8008bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801d828:	46c0      	nop			; (mov r8, r8)
 801d82a:	46bd      	mov	sp, r7
 801d82c:	bd80      	pop	{r7, pc}
 801d82e:	46c0      	nop			; (mov r8, r8)
 801d830:	200001b0 	.word	0x200001b0
 801d834:	20002f94 	.word	0x20002f94
 801d838:	20000070 	.word	0x20000070
 801d83c:	2000019c 	.word	0x2000019c

0801d840 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d844:	4907      	ldr	r1, [pc, #28]	; (801d864 <CDC_Init_FS+0x24>)
 801d846:	4b08      	ldr	r3, [pc, #32]	; (801d868 <CDC_Init_FS+0x28>)
 801d848:	2200      	movs	r2, #0
 801d84a:	0018      	movs	r0, r3
 801d84c:	f7f8 fd4e 	bl	80162ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d850:	4a06      	ldr	r2, [pc, #24]	; (801d86c <CDC_Init_FS+0x2c>)
 801d852:	4b05      	ldr	r3, [pc, #20]	; (801d868 <CDC_Init_FS+0x28>)
 801d854:	0011      	movs	r1, r2
 801d856:	0018      	movs	r0, r3
 801d858:	f7f8 fd6b 	bl	8016332 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d85c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d85e:	0018      	movs	r0, r3
 801d860:	46bd      	mov	sp, r7
 801d862:	bd80      	pop	{r7, pc}
 801d864:	20003a70 	.word	0x20003a70
 801d868:	20002f94 	.word	0x20002f94
 801d86c:	20003270 	.word	0x20003270

0801d870 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d870:	b580      	push	{r7, lr}
 801d872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d874:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d876:	0018      	movs	r0, r3
 801d878:	46bd      	mov	sp, r7
 801d87a:	bd80      	pop	{r7, pc}

0801d87c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d87c:	b580      	push	{r7, lr}
 801d87e:	b082      	sub	sp, #8
 801d880:	af00      	add	r7, sp, #0
 801d882:	6039      	str	r1, [r7, #0]
 801d884:	0011      	movs	r1, r2
 801d886:	1dfb      	adds	r3, r7, #7
 801d888:	1c02      	adds	r2, r0, #0
 801d88a:	701a      	strb	r2, [r3, #0]
 801d88c:	1d3b      	adds	r3, r7, #4
 801d88e:	1c0a      	adds	r2, r1, #0
 801d890:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d892:	1dfb      	adds	r3, r7, #7
 801d894:	781b      	ldrb	r3, [r3, #0]
 801d896:	2b23      	cmp	r3, #35	; 0x23
 801d898:	d804      	bhi.n	801d8a4 <CDC_Control_FS+0x28>
 801d89a:	009a      	lsls	r2, r3, #2
 801d89c:	4b04      	ldr	r3, [pc, #16]	; (801d8b0 <CDC_Control_FS+0x34>)
 801d89e:	18d3      	adds	r3, r2, r3
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d8a4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 801d8a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d8a8:	0018      	movs	r0, r3
 801d8aa:	46bd      	mov	sp, r7
 801d8ac:	b002      	add	sp, #8
 801d8ae:	bd80      	pop	{r7, pc}
 801d8b0:	080251b4 	.word	0x080251b4

0801d8b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d8b4:	b580      	push	{r7, lr}
 801d8b6:	b082      	sub	sp, #8
 801d8b8:	af00      	add	r7, sp, #0
 801d8ba:	6078      	str	r0, [r7, #4]
 801d8bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d8be:	687a      	ldr	r2, [r7, #4]
 801d8c0:	4b06      	ldr	r3, [pc, #24]	; (801d8dc <CDC_Receive_FS+0x28>)
 801d8c2:	0011      	movs	r1, r2
 801d8c4:	0018      	movs	r0, r3
 801d8c6:	f7f8 fd34 	bl	8016332 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d8ca:	4b04      	ldr	r3, [pc, #16]	; (801d8dc <CDC_Receive_FS+0x28>)
 801d8cc:	0018      	movs	r0, r3
 801d8ce:	f7f8 fd4d 	bl	801636c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d8d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d8d4:	0018      	movs	r0, r3
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	b002      	add	sp, #8
 801d8da:	bd80      	pop	{r7, pc}
 801d8dc:	20002f94 	.word	0x20002f94

0801d8e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801d8e0:	b580      	push	{r7, lr}
 801d8e2:	b086      	sub	sp, #24
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	60f8      	str	r0, [r7, #12]
 801d8e8:	60b9      	str	r1, [r7, #8]
 801d8ea:	1dfb      	adds	r3, r7, #7
 801d8ec:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801d8ee:	2117      	movs	r1, #23
 801d8f0:	187b      	adds	r3, r7, r1
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801d8f6:	187b      	adds	r3, r7, r1
 801d8f8:	781b      	ldrb	r3, [r3, #0]
 801d8fa:	b25b      	sxtb	r3, r3
}
 801d8fc:	0018      	movs	r0, r3
 801d8fe:	46bd      	mov	sp, r7
 801d900:	b006      	add	sp, #24
 801d902:	bd80      	pop	{r7, pc}

0801d904 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d904:	b580      	push	{r7, lr}
 801d906:	b082      	sub	sp, #8
 801d908:	af00      	add	r7, sp, #0
 801d90a:	0002      	movs	r2, r0
 801d90c:	6039      	str	r1, [r7, #0]
 801d90e:	1dfb      	adds	r3, r7, #7
 801d910:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801d912:	683b      	ldr	r3, [r7, #0]
 801d914:	2212      	movs	r2, #18
 801d916:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801d918:	4b02      	ldr	r3, [pc, #8]	; (801d924 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801d91a:	0018      	movs	r0, r3
 801d91c:	46bd      	mov	sp, r7
 801d91e:	b002      	add	sp, #8
 801d920:	bd80      	pop	{r7, pc}
 801d922:	46c0      	nop			; (mov r8, r8)
 801d924:	200001d0 	.word	0x200001d0

0801d928 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	b082      	sub	sp, #8
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	0002      	movs	r2, r0
 801d930:	6039      	str	r1, [r7, #0]
 801d932:	1dfb      	adds	r3, r7, #7
 801d934:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d936:	683b      	ldr	r3, [r7, #0]
 801d938:	2204      	movs	r2, #4
 801d93a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d93c:	4b02      	ldr	r3, [pc, #8]	; (801d948 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801d93e:	0018      	movs	r0, r3
 801d940:	46bd      	mov	sp, r7
 801d942:	b002      	add	sp, #8
 801d944:	bd80      	pop	{r7, pc}
 801d946:	46c0      	nop			; (mov r8, r8)
 801d948:	200001e4 	.word	0x200001e4

0801d94c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d94c:	b580      	push	{r7, lr}
 801d94e:	b082      	sub	sp, #8
 801d950:	af00      	add	r7, sp, #0
 801d952:	0002      	movs	r2, r0
 801d954:	6039      	str	r1, [r7, #0]
 801d956:	1dfb      	adds	r3, r7, #7
 801d958:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d95a:	1dfb      	adds	r3, r7, #7
 801d95c:	781b      	ldrb	r3, [r3, #0]
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d106      	bne.n	801d970 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801d962:	683a      	ldr	r2, [r7, #0]
 801d964:	4908      	ldr	r1, [pc, #32]	; (801d988 <USBD_CDC_ProductStrDescriptor+0x3c>)
 801d966:	4b09      	ldr	r3, [pc, #36]	; (801d98c <USBD_CDC_ProductStrDescriptor+0x40>)
 801d968:	0018      	movs	r0, r3
 801d96a:	f7fa f8ca 	bl	8017b02 <USBD_GetString>
 801d96e:	e005      	b.n	801d97c <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801d970:	683a      	ldr	r2, [r7, #0]
 801d972:	4905      	ldr	r1, [pc, #20]	; (801d988 <USBD_CDC_ProductStrDescriptor+0x3c>)
 801d974:	4b05      	ldr	r3, [pc, #20]	; (801d98c <USBD_CDC_ProductStrDescriptor+0x40>)
 801d976:	0018      	movs	r0, r3
 801d978:	f7fa f8c3 	bl	8017b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d97c:	4b02      	ldr	r3, [pc, #8]	; (801d988 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 801d97e:	0018      	movs	r0, r3
 801d980:	46bd      	mov	sp, r7
 801d982:	b002      	add	sp, #8
 801d984:	bd80      	pop	{r7, pc}
 801d986:	46c0      	nop			; (mov r8, r8)
 801d988:	20004270 	.word	0x20004270
 801d98c:	08024eac 	.word	0x08024eac

0801d990 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d990:	b580      	push	{r7, lr}
 801d992:	b082      	sub	sp, #8
 801d994:	af00      	add	r7, sp, #0
 801d996:	0002      	movs	r2, r0
 801d998:	6039      	str	r1, [r7, #0]
 801d99a:	1dfb      	adds	r3, r7, #7
 801d99c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d99e:	683a      	ldr	r2, [r7, #0]
 801d9a0:	4904      	ldr	r1, [pc, #16]	; (801d9b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801d9a2:	4b05      	ldr	r3, [pc, #20]	; (801d9b8 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 801d9a4:	0018      	movs	r0, r3
 801d9a6:	f7fa f8ac 	bl	8017b02 <USBD_GetString>
  return USBD_StrDesc;
 801d9aa:	4b02      	ldr	r3, [pc, #8]	; (801d9b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 801d9ac:	0018      	movs	r0, r3
 801d9ae:	46bd      	mov	sp, r7
 801d9b0:	b002      	add	sp, #8
 801d9b2:	bd80      	pop	{r7, pc}
 801d9b4:	20004270 	.word	0x20004270
 801d9b8:	08024ec4 	.word	0x08024ec4

0801d9bc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d9bc:	b580      	push	{r7, lr}
 801d9be:	b082      	sub	sp, #8
 801d9c0:	af00      	add	r7, sp, #0
 801d9c2:	0002      	movs	r2, r0
 801d9c4:	6039      	str	r1, [r7, #0]
 801d9c6:	1dfb      	adds	r3, r7, #7
 801d9c8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d9ca:	683b      	ldr	r3, [r7, #0]
 801d9cc:	221a      	movs	r2, #26
 801d9ce:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d9d0:	f000 f84c 	bl	801da6c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801d9d4:	4b02      	ldr	r3, [pc, #8]	; (801d9e0 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 801d9d6:	0018      	movs	r0, r3
 801d9d8:	46bd      	mov	sp, r7
 801d9da:	b002      	add	sp, #8
 801d9dc:	bd80      	pop	{r7, pc}
 801d9de:	46c0      	nop			; (mov r8, r8)
 801d9e0:	200001e8 	.word	0x200001e8

0801d9e4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d9e4:	b580      	push	{r7, lr}
 801d9e6:	b082      	sub	sp, #8
 801d9e8:	af00      	add	r7, sp, #0
 801d9ea:	0002      	movs	r2, r0
 801d9ec:	6039      	str	r1, [r7, #0]
 801d9ee:	1dfb      	adds	r3, r7, #7
 801d9f0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801d9f2:	1dfb      	adds	r3, r7, #7
 801d9f4:	781b      	ldrb	r3, [r3, #0]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d106      	bne.n	801da08 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801d9fa:	683a      	ldr	r2, [r7, #0]
 801d9fc:	4908      	ldr	r1, [pc, #32]	; (801da20 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 801d9fe:	4b09      	ldr	r3, [pc, #36]	; (801da24 <USBD_CDC_ConfigStrDescriptor+0x40>)
 801da00:	0018      	movs	r0, r3
 801da02:	f7fa f87e 	bl	8017b02 <USBD_GetString>
 801da06:	e005      	b.n	801da14 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801da08:	683a      	ldr	r2, [r7, #0]
 801da0a:	4905      	ldr	r1, [pc, #20]	; (801da20 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 801da0c:	4b05      	ldr	r3, [pc, #20]	; (801da24 <USBD_CDC_ConfigStrDescriptor+0x40>)
 801da0e:	0018      	movs	r0, r3
 801da10:	f7fa f877 	bl	8017b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 801da14:	4b02      	ldr	r3, [pc, #8]	; (801da20 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 801da16:	0018      	movs	r0, r3
 801da18:	46bd      	mov	sp, r7
 801da1a:	b002      	add	sp, #8
 801da1c:	bd80      	pop	{r7, pc}
 801da1e:	46c0      	nop			; (mov r8, r8)
 801da20:	20004270 	.word	0x20004270
 801da24:	08024ed8 	.word	0x08024ed8

0801da28 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801da28:	b580      	push	{r7, lr}
 801da2a:	b082      	sub	sp, #8
 801da2c:	af00      	add	r7, sp, #0
 801da2e:	0002      	movs	r2, r0
 801da30:	6039      	str	r1, [r7, #0]
 801da32:	1dfb      	adds	r3, r7, #7
 801da34:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801da36:	1dfb      	adds	r3, r7, #7
 801da38:	781b      	ldrb	r3, [r3, #0]
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d106      	bne.n	801da4c <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801da3e:	683a      	ldr	r2, [r7, #0]
 801da40:	4908      	ldr	r1, [pc, #32]	; (801da64 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 801da42:	4b09      	ldr	r3, [pc, #36]	; (801da68 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 801da44:	0018      	movs	r0, r3
 801da46:	f7fa f85c 	bl	8017b02 <USBD_GetString>
 801da4a:	e005      	b.n	801da58 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801da4c:	683a      	ldr	r2, [r7, #0]
 801da4e:	4905      	ldr	r1, [pc, #20]	; (801da64 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 801da50:	4b05      	ldr	r3, [pc, #20]	; (801da68 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 801da52:	0018      	movs	r0, r3
 801da54:	f7fa f855 	bl	8017b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 801da58:	4b02      	ldr	r3, [pc, #8]	; (801da64 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 801da5a:	0018      	movs	r0, r3
 801da5c:	46bd      	mov	sp, r7
 801da5e:	b002      	add	sp, #8
 801da60:	bd80      	pop	{r7, pc}
 801da62:	46c0      	nop			; (mov r8, r8)
 801da64:	20004270 	.word	0x20004270
 801da68:	08024ee4 	.word	0x08024ee4

0801da6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801da6c:	b580      	push	{r7, lr}
 801da6e:	b084      	sub	sp, #16
 801da70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801da72:	4b10      	ldr	r3, [pc, #64]	; (801dab4 <Get_SerialNum+0x48>)
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801da78:	4b0f      	ldr	r3, [pc, #60]	; (801dab8 <Get_SerialNum+0x4c>)
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801da7e:	4b0f      	ldr	r3, [pc, #60]	; (801dabc <Get_SerialNum+0x50>)
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801da84:	68fa      	ldr	r2, [r7, #12]
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	18d3      	adds	r3, r2, r3
 801da8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d00b      	beq.n	801daaa <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801da92:	490b      	ldr	r1, [pc, #44]	; (801dac0 <Get_SerialNum+0x54>)
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	2208      	movs	r2, #8
 801da98:	0018      	movs	r0, r3
 801da9a:	f000 f815 	bl	801dac8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801da9e:	4909      	ldr	r1, [pc, #36]	; (801dac4 <Get_SerialNum+0x58>)
 801daa0:	68bb      	ldr	r3, [r7, #8]
 801daa2:	2204      	movs	r2, #4
 801daa4:	0018      	movs	r0, r3
 801daa6:	f000 f80f 	bl	801dac8 <IntToUnicode>
  }
}
 801daaa:	46c0      	nop			; (mov r8, r8)
 801daac:	46bd      	mov	sp, r7
 801daae:	b004      	add	sp, #16
 801dab0:	bd80      	pop	{r7, pc}
 801dab2:	46c0      	nop			; (mov r8, r8)
 801dab4:	1fff7590 	.word	0x1fff7590
 801dab8:	1fff7594 	.word	0x1fff7594
 801dabc:	1fff7598 	.word	0x1fff7598
 801dac0:	200001ea 	.word	0x200001ea
 801dac4:	200001fa 	.word	0x200001fa

0801dac8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801dac8:	b580      	push	{r7, lr}
 801daca:	b086      	sub	sp, #24
 801dacc:	af00      	add	r7, sp, #0
 801dace:	60f8      	str	r0, [r7, #12]
 801dad0:	60b9      	str	r1, [r7, #8]
 801dad2:	1dfb      	adds	r3, r7, #7
 801dad4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801dad6:	2117      	movs	r1, #23
 801dad8:	187b      	adds	r3, r7, r1
 801dada:	2200      	movs	r2, #0
 801dadc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801dade:	187b      	adds	r3, r7, r1
 801dae0:	2200      	movs	r2, #0
 801dae2:	701a      	strb	r2, [r3, #0]
 801dae4:	e02f      	b.n	801db46 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	0f1b      	lsrs	r3, r3, #28
 801daea:	2b09      	cmp	r3, #9
 801daec:	d80d      	bhi.n	801db0a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801daee:	68fb      	ldr	r3, [r7, #12]
 801daf0:	0f1b      	lsrs	r3, r3, #28
 801daf2:	b2da      	uxtb	r2, r3
 801daf4:	2317      	movs	r3, #23
 801daf6:	18fb      	adds	r3, r7, r3
 801daf8:	781b      	ldrb	r3, [r3, #0]
 801dafa:	005b      	lsls	r3, r3, #1
 801dafc:	0019      	movs	r1, r3
 801dafe:	68bb      	ldr	r3, [r7, #8]
 801db00:	185b      	adds	r3, r3, r1
 801db02:	3230      	adds	r2, #48	; 0x30
 801db04:	b2d2      	uxtb	r2, r2
 801db06:	701a      	strb	r2, [r3, #0]
 801db08:	e00c      	b.n	801db24 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801db0a:	68fb      	ldr	r3, [r7, #12]
 801db0c:	0f1b      	lsrs	r3, r3, #28
 801db0e:	b2da      	uxtb	r2, r3
 801db10:	2317      	movs	r3, #23
 801db12:	18fb      	adds	r3, r7, r3
 801db14:	781b      	ldrb	r3, [r3, #0]
 801db16:	005b      	lsls	r3, r3, #1
 801db18:	0019      	movs	r1, r3
 801db1a:	68bb      	ldr	r3, [r7, #8]
 801db1c:	185b      	adds	r3, r3, r1
 801db1e:	3237      	adds	r2, #55	; 0x37
 801db20:	b2d2      	uxtb	r2, r2
 801db22:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	011b      	lsls	r3, r3, #4
 801db28:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801db2a:	2117      	movs	r1, #23
 801db2c:	187b      	adds	r3, r7, r1
 801db2e:	781b      	ldrb	r3, [r3, #0]
 801db30:	005b      	lsls	r3, r3, #1
 801db32:	3301      	adds	r3, #1
 801db34:	68ba      	ldr	r2, [r7, #8]
 801db36:	18d3      	adds	r3, r2, r3
 801db38:	2200      	movs	r2, #0
 801db3a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801db3c:	187b      	adds	r3, r7, r1
 801db3e:	781a      	ldrb	r2, [r3, #0]
 801db40:	187b      	adds	r3, r7, r1
 801db42:	3201      	adds	r2, #1
 801db44:	701a      	strb	r2, [r3, #0]
 801db46:	2317      	movs	r3, #23
 801db48:	18fa      	adds	r2, r7, r3
 801db4a:	1dfb      	adds	r3, r7, #7
 801db4c:	7812      	ldrb	r2, [r2, #0]
 801db4e:	781b      	ldrb	r3, [r3, #0]
 801db50:	429a      	cmp	r2, r3
 801db52:	d3c8      	bcc.n	801dae6 <IntToUnicode+0x1e>
  }
}
 801db54:	46c0      	nop			; (mov r8, r8)
 801db56:	46c0      	nop			; (mov r8, r8)
 801db58:	46bd      	mov	sp, r7
 801db5a:	b006      	add	sp, #24
 801db5c:	bd80      	pop	{r7, pc}
	...

0801db60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801db60:	b590      	push	{r4, r7, lr}
 801db62:	b099      	sub	sp, #100	; 0x64
 801db64:	af00      	add	r7, sp, #0
 801db66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801db68:	2414      	movs	r4, #20
 801db6a:	193b      	adds	r3, r7, r4
 801db6c:	0018      	movs	r0, r3
 801db6e:	234c      	movs	r3, #76	; 0x4c
 801db70:	001a      	movs	r2, r3
 801db72:	2100      	movs	r1, #0
 801db74:	f005 fdaa 	bl	80236cc <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	4a25      	ldr	r2, [pc, #148]	; (801dc14 <HAL_PCD_MspInit+0xb4>)
 801db7e:	4293      	cmp	r3, r2
 801db80:	d143      	bne.n	801dc0a <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801db82:	193b      	adds	r3, r7, r4
 801db84:	2280      	movs	r2, #128	; 0x80
 801db86:	0452      	lsls	r2, r2, #17
 801db88:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801db8a:	193b      	adds	r3, r7, r4
 801db8c:	2200      	movs	r2, #0
 801db8e:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801db90:	193b      	adds	r3, r7, r4
 801db92:	0018      	movs	r0, r3
 801db94:	f7f0 fdc2 	bl	800e71c <HAL_RCCEx_PeriphCLKConfig>
 801db98:	1e03      	subs	r3, r0, #0
 801db9a:	d001      	beq.n	801dba0 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 801db9c:	f7eb f80c 	bl	8008bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801dba0:	4b1d      	ldr	r3, [pc, #116]	; (801dc18 <HAL_PCD_MspInit+0xb8>)
 801dba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801dba4:	4b1c      	ldr	r3, [pc, #112]	; (801dc18 <HAL_PCD_MspInit+0xb8>)
 801dba6:	2180      	movs	r1, #128	; 0x80
 801dba8:	0189      	lsls	r1, r1, #6
 801dbaa:	430a      	orrs	r2, r1
 801dbac:	63da      	str	r2, [r3, #60]	; 0x3c
 801dbae:	4b1a      	ldr	r3, [pc, #104]	; (801dc18 <HAL_PCD_MspInit+0xb8>)
 801dbb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801dbb2:	2380      	movs	r3, #128	; 0x80
 801dbb4:	019b      	lsls	r3, r3, #6
 801dbb6:	4013      	ands	r3, r2
 801dbb8:	613b      	str	r3, [r7, #16]
 801dbba:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801dbbc:	4b16      	ldr	r3, [pc, #88]	; (801dc18 <HAL_PCD_MspInit+0xb8>)
 801dbbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801dbc0:	2380      	movs	r3, #128	; 0x80
 801dbc2:	055b      	lsls	r3, r3, #21
 801dbc4:	4013      	ands	r3, r2
 801dbc6:	d116      	bne.n	801dbf6 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801dbc8:	4b13      	ldr	r3, [pc, #76]	; (801dc18 <HAL_PCD_MspInit+0xb8>)
 801dbca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801dbcc:	4b12      	ldr	r3, [pc, #72]	; (801dc18 <HAL_PCD_MspInit+0xb8>)
 801dbce:	2180      	movs	r1, #128	; 0x80
 801dbd0:	0549      	lsls	r1, r1, #21
 801dbd2:	430a      	orrs	r2, r1
 801dbd4:	63da      	str	r2, [r3, #60]	; 0x3c
 801dbd6:	4b10      	ldr	r3, [pc, #64]	; (801dc18 <HAL_PCD_MspInit+0xb8>)
 801dbd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801dbda:	2380      	movs	r3, #128	; 0x80
 801dbdc:	055b      	lsls	r3, r3, #21
 801dbde:	4013      	ands	r3, r2
 801dbe0:	60fb      	str	r3, [r7, #12]
 801dbe2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 801dbe4:	f7f0 f80e 	bl	800dc04 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801dbe8:	4b0b      	ldr	r3, [pc, #44]	; (801dc18 <HAL_PCD_MspInit+0xb8>)
 801dbea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801dbec:	4b0a      	ldr	r3, [pc, #40]	; (801dc18 <HAL_PCD_MspInit+0xb8>)
 801dbee:	490b      	ldr	r1, [pc, #44]	; (801dc1c <HAL_PCD_MspInit+0xbc>)
 801dbf0:	400a      	ands	r2, r1
 801dbf2:	63da      	str	r2, [r3, #60]	; 0x3c
 801dbf4:	e001      	b.n	801dbfa <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801dbf6:	f7f0 f805 	bl	800dc04 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 3, 0);
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	2103      	movs	r1, #3
 801dbfe:	2008      	movs	r0, #8
 801dc00:	f7ed f9fa 	bl	800aff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 801dc04:	2008      	movs	r0, #8
 801dc06:	f7ed fa0c 	bl	800b022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 801dc0a:	46c0      	nop			; (mov r8, r8)
 801dc0c:	46bd      	mov	sp, r7
 801dc0e:	b019      	add	sp, #100	; 0x64
 801dc10:	bd90      	pop	{r4, r7, pc}
 801dc12:	46c0      	nop			; (mov r8, r8)
 801dc14:	40005c00 	.word	0x40005c00
 801dc18:	40021000 	.word	0x40021000
 801dc1c:	efffffff 	.word	0xefffffff

0801dc20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc20:	b580      	push	{r7, lr}
 801dc22:	b082      	sub	sp, #8
 801dc24:	af00      	add	r7, sp, #0
 801dc26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801dc28:	687a      	ldr	r2, [r7, #4]
 801dc2a:	23b7      	movs	r3, #183	; 0xb7
 801dc2c:	009b      	lsls	r3, r3, #2
 801dc2e:	58d2      	ldr	r2, [r2, r3]
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	21a7      	movs	r1, #167	; 0xa7
 801dc34:	0089      	lsls	r1, r1, #2
 801dc36:	468c      	mov	ip, r1
 801dc38:	4463      	add	r3, ip
 801dc3a:	0019      	movs	r1, r3
 801dc3c:	0010      	movs	r0, r2
 801dc3e:	f7f8 fca3 	bl	8016588 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801dc42:	46c0      	nop			; (mov r8, r8)
 801dc44:	46bd      	mov	sp, r7
 801dc46:	b002      	add	sp, #8
 801dc48:	bd80      	pop	{r7, pc}

0801dc4a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc4a:	b590      	push	{r4, r7, lr}
 801dc4c:	b083      	sub	sp, #12
 801dc4e:	af00      	add	r7, sp, #0
 801dc50:	6078      	str	r0, [r7, #4]
 801dc52:	000a      	movs	r2, r1
 801dc54:	1cfb      	adds	r3, r7, #3
 801dc56:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801dc58:	687a      	ldr	r2, [r7, #4]
 801dc5a:	23b7      	movs	r3, #183	; 0xb7
 801dc5c:	009b      	lsls	r3, r3, #2
 801dc5e:	58d4      	ldr	r4, [r2, r3]
 801dc60:	1cfb      	adds	r3, r7, #3
 801dc62:	781a      	ldrb	r2, [r3, #0]
 801dc64:	6878      	ldr	r0, [r7, #4]
 801dc66:	23b4      	movs	r3, #180	; 0xb4
 801dc68:	0059      	lsls	r1, r3, #1
 801dc6a:	0013      	movs	r3, r2
 801dc6c:	009b      	lsls	r3, r3, #2
 801dc6e:	189b      	adds	r3, r3, r2
 801dc70:	00db      	lsls	r3, r3, #3
 801dc72:	18c3      	adds	r3, r0, r3
 801dc74:	185b      	adds	r3, r3, r1
 801dc76:	681a      	ldr	r2, [r3, #0]
 801dc78:	1cfb      	adds	r3, r7, #3
 801dc7a:	781b      	ldrb	r3, [r3, #0]
 801dc7c:	0019      	movs	r1, r3
 801dc7e:	0020      	movs	r0, r4
 801dc80:	f7f8 fcec 	bl	801665c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801dc84:	46c0      	nop			; (mov r8, r8)
 801dc86:	46bd      	mov	sp, r7
 801dc88:	b003      	add	sp, #12
 801dc8a:	bd90      	pop	{r4, r7, pc}

0801dc8c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc8c:	b580      	push	{r7, lr}
 801dc8e:	b082      	sub	sp, #8
 801dc90:	af00      	add	r7, sp, #0
 801dc92:	6078      	str	r0, [r7, #4]
 801dc94:	000a      	movs	r2, r1
 801dc96:	1cfb      	adds	r3, r7, #3
 801dc98:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801dc9a:	687a      	ldr	r2, [r7, #4]
 801dc9c:	23b7      	movs	r3, #183	; 0xb7
 801dc9e:	009b      	lsls	r3, r3, #2
 801dca0:	58d0      	ldr	r0, [r2, r3]
 801dca2:	1cfb      	adds	r3, r7, #3
 801dca4:	781a      	ldrb	r2, [r3, #0]
 801dca6:	6879      	ldr	r1, [r7, #4]
 801dca8:	0013      	movs	r3, r2
 801dcaa:	009b      	lsls	r3, r3, #2
 801dcac:	189b      	adds	r3, r3, r2
 801dcae:	00db      	lsls	r3, r3, #3
 801dcb0:	18cb      	adds	r3, r1, r3
 801dcb2:	3328      	adds	r3, #40	; 0x28
 801dcb4:	681a      	ldr	r2, [r3, #0]
 801dcb6:	1cfb      	adds	r3, r7, #3
 801dcb8:	781b      	ldrb	r3, [r3, #0]
 801dcba:	0019      	movs	r1, r3
 801dcbc:	f7f8 fdb6 	bl	801682c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801dcc0:	46c0      	nop			; (mov r8, r8)
 801dcc2:	46bd      	mov	sp, r7
 801dcc4:	b002      	add	sp, #8
 801dcc6:	bd80      	pop	{r7, pc}

0801dcc8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dcc8:	b580      	push	{r7, lr}
 801dcca:	b082      	sub	sp, #8
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801dcd0:	687a      	ldr	r2, [r7, #4]
 801dcd2:	23b7      	movs	r3, #183	; 0xb7
 801dcd4:	009b      	lsls	r3, r3, #2
 801dcd6:	58d3      	ldr	r3, [r2, r3]
 801dcd8:	0018      	movs	r0, r3
 801dcda:	f7f8 ff21 	bl	8016b20 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801dcde:	46c0      	nop			; (mov r8, r8)
 801dce0:	46bd      	mov	sp, r7
 801dce2:	b002      	add	sp, #8
 801dce4:	bd80      	pop	{r7, pc}

0801dce6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dce6:	b580      	push	{r7, lr}
 801dce8:	b084      	sub	sp, #16
 801dcea:	af00      	add	r7, sp, #0
 801dcec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801dcee:	230f      	movs	r3, #15
 801dcf0:	18fb      	adds	r3, r7, r3
 801dcf2:	2201      	movs	r2, #1
 801dcf4:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	79db      	ldrb	r3, [r3, #7]
 801dcfa:	2b02      	cmp	r3, #2
 801dcfc:	d001      	beq.n	801dd02 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801dcfe:	f7ea ff5b 	bl	8008bb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801dd02:	687a      	ldr	r2, [r7, #4]
 801dd04:	23b7      	movs	r3, #183	; 0xb7
 801dd06:	009b      	lsls	r3, r3, #2
 801dd08:	58d2      	ldr	r2, [r2, r3]
 801dd0a:	230f      	movs	r3, #15
 801dd0c:	18fb      	adds	r3, r7, r3
 801dd0e:	781b      	ldrb	r3, [r3, #0]
 801dd10:	0019      	movs	r1, r3
 801dd12:	0010      	movs	r0, r2
 801dd14:	f7f8 fec1 	bl	8016a9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801dd18:	687a      	ldr	r2, [r7, #4]
 801dd1a:	23b7      	movs	r3, #183	; 0xb7
 801dd1c:	009b      	lsls	r3, r3, #2
 801dd1e:	58d3      	ldr	r3, [r2, r3]
 801dd20:	0018      	movs	r0, r3
 801dd22:	f7f8 fe5b 	bl	80169dc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801dd26:	46c0      	nop			; (mov r8, r8)
 801dd28:	46bd      	mov	sp, r7
 801dd2a:	b004      	add	sp, #16
 801dd2c:	bd80      	pop	{r7, pc}
	...

0801dd30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd30:	b580      	push	{r7, lr}
 801dd32:	b082      	sub	sp, #8
 801dd34:	af00      	add	r7, sp, #0
 801dd36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801dd38:	687a      	ldr	r2, [r7, #4]
 801dd3a:	23b7      	movs	r3, #183	; 0xb7
 801dd3c:	009b      	lsls	r3, r3, #2
 801dd3e:	58d3      	ldr	r3, [r2, r3]
 801dd40:	0018      	movs	r0, r3
 801dd42:	f7f8 febb 	bl	8016abc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	7adb      	ldrb	r3, [r3, #11]
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d005      	beq.n	801dd5a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dd4e:	4b05      	ldr	r3, [pc, #20]	; (801dd64 <HAL_PCD_SuspendCallback+0x34>)
 801dd50:	691a      	ldr	r2, [r3, #16]
 801dd52:	4b04      	ldr	r3, [pc, #16]	; (801dd64 <HAL_PCD_SuspendCallback+0x34>)
 801dd54:	2106      	movs	r1, #6
 801dd56:	430a      	orrs	r2, r1
 801dd58:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801dd5a:	46c0      	nop			; (mov r8, r8)
 801dd5c:	46bd      	mov	sp, r7
 801dd5e:	b002      	add	sp, #8
 801dd60:	bd80      	pop	{r7, pc}
 801dd62:	46c0      	nop			; (mov r8, r8)
 801dd64:	e000ed00 	.word	0xe000ed00

0801dd68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	b082      	sub	sp, #8
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	7adb      	ldrb	r3, [r3, #11]
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d007      	beq.n	801dd88 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dd78:	4b09      	ldr	r3, [pc, #36]	; (801dda0 <HAL_PCD_ResumeCallback+0x38>)
 801dd7a:	691a      	ldr	r2, [r3, #16]
 801dd7c:	4b08      	ldr	r3, [pc, #32]	; (801dda0 <HAL_PCD_ResumeCallback+0x38>)
 801dd7e:	2106      	movs	r1, #6
 801dd80:	438a      	bics	r2, r1
 801dd82:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801dd84:	f000 fa7c 	bl	801e280 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801dd88:	687a      	ldr	r2, [r7, #4]
 801dd8a:	23b7      	movs	r3, #183	; 0xb7
 801dd8c:	009b      	lsls	r3, r3, #2
 801dd8e:	58d3      	ldr	r3, [r2, r3]
 801dd90:	0018      	movs	r0, r3
 801dd92:	f7f8 feab 	bl	8016aec <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801dd96:	46c0      	nop			; (mov r8, r8)
 801dd98:	46bd      	mov	sp, r7
 801dd9a:	b002      	add	sp, #8
 801dd9c:	bd80      	pop	{r7, pc}
 801dd9e:	46c0      	nop			; (mov r8, r8)
 801dda0:	e000ed00 	.word	0xe000ed00

0801dda4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801dda4:	b580      	push	{r7, lr}
 801dda6:	b082      	sub	sp, #8
 801dda8:	af00      	add	r7, sp, #0
 801ddaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 801ddac:	4a34      	ldr	r2, [pc, #208]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddae:	23b7      	movs	r3, #183	; 0xb7
 801ddb0:	009b      	lsls	r3, r3, #2
 801ddb2:	6879      	ldr	r1, [r7, #4]
 801ddb4:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 801ddb6:	687a      	ldr	r2, [r7, #4]
 801ddb8:	23b2      	movs	r3, #178	; 0xb2
 801ddba:	009b      	lsls	r3, r3, #2
 801ddbc:	4930      	ldr	r1, [pc, #192]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddbe:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 801ddc0:	4b2f      	ldr	r3, [pc, #188]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddc2:	4a30      	ldr	r2, [pc, #192]	; (801de84 <USBD_LL_Init+0xe0>)
 801ddc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 801ddc6:	4b2e      	ldr	r3, [pc, #184]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddc8:	2208      	movs	r2, #8
 801ddca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 801ddcc:	4b2c      	ldr	r3, [pc, #176]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddce:	2208      	movs	r2, #8
 801ddd0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 801ddd2:	4b2b      	ldr	r3, [pc, #172]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddd4:	2202      	movs	r2, #2
 801ddd6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ddd8:	4b29      	ldr	r3, [pc, #164]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddda:	2202      	movs	r2, #2
 801dddc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 801ddde:	4b28      	ldr	r3, [pc, #160]	; (801de80 <USBD_LL_Init+0xdc>)
 801dde0:	2200      	movs	r2, #0
 801dde2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 801dde4:	4b26      	ldr	r3, [pc, #152]	; (801de80 <USBD_LL_Init+0xdc>)
 801dde6:	2200      	movs	r2, #0
 801dde8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 801ddea:	4b25      	ldr	r3, [pc, #148]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddec:	2200      	movs	r2, #0
 801ddee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 801ddf0:	4b23      	ldr	r3, [pc, #140]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddf2:	2200      	movs	r2, #0
 801ddf4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 801ddf6:	4b22      	ldr	r3, [pc, #136]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddf8:	2200      	movs	r2, #0
 801ddfa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 801ddfc:	4b20      	ldr	r3, [pc, #128]	; (801de80 <USBD_LL_Init+0xdc>)
 801ddfe:	2200      	movs	r2, #0
 801de00:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 801de02:	4b1f      	ldr	r3, [pc, #124]	; (801de80 <USBD_LL_Init+0xdc>)
 801de04:	2200      	movs	r2, #0
 801de06:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 801de08:	4b1d      	ldr	r3, [pc, #116]	; (801de80 <USBD_LL_Init+0xdc>)
 801de0a:	0018      	movs	r0, r3
 801de0c:	f7ee f9ea 	bl	800c1e4 <HAL_PCD_Init>
 801de10:	1e03      	subs	r3, r0, #0
 801de12:	d001      	beq.n	801de18 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 801de14:	f7ea fed0 	bl	8008bb8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801de18:	687a      	ldr	r2, [r7, #4]
 801de1a:	23b2      	movs	r3, #178	; 0xb2
 801de1c:	009b      	lsls	r3, r3, #2
 801de1e:	58d0      	ldr	r0, [r2, r3]
 801de20:	2318      	movs	r3, #24
 801de22:	2200      	movs	r2, #0
 801de24:	2100      	movs	r1, #0
 801de26:	f7ef fe7b 	bl	800db20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801de2a:	687a      	ldr	r2, [r7, #4]
 801de2c:	23b2      	movs	r3, #178	; 0xb2
 801de2e:	009b      	lsls	r3, r3, #2
 801de30:	58d0      	ldr	r0, [r2, r3]
 801de32:	2358      	movs	r3, #88	; 0x58
 801de34:	2200      	movs	r2, #0
 801de36:	2180      	movs	r1, #128	; 0x80
 801de38:	f7ef fe72 	bl	800db20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801de3c:	687a      	ldr	r2, [r7, #4]
 801de3e:	23b2      	movs	r3, #178	; 0xb2
 801de40:	009b      	lsls	r3, r3, #2
 801de42:	58d0      	ldr	r0, [r2, r3]
 801de44:	23c0      	movs	r3, #192	; 0xc0
 801de46:	2200      	movs	r2, #0
 801de48:	2181      	movs	r1, #129	; 0x81
 801de4a:	f7ef fe69 	bl	800db20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801de4e:	687a      	ldr	r2, [r7, #4]
 801de50:	23b2      	movs	r3, #178	; 0xb2
 801de52:	009b      	lsls	r3, r3, #2
 801de54:	58d0      	ldr	r0, [r2, r3]
 801de56:	2388      	movs	r3, #136	; 0x88
 801de58:	005b      	lsls	r3, r3, #1
 801de5a:	2200      	movs	r2, #0
 801de5c:	2101      	movs	r1, #1
 801de5e:	f7ef fe5f 	bl	800db20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801de62:	687a      	ldr	r2, [r7, #4]
 801de64:	23b2      	movs	r3, #178	; 0xb2
 801de66:	009b      	lsls	r3, r3, #2
 801de68:	58d0      	ldr	r0, [r2, r3]
 801de6a:	2380      	movs	r3, #128	; 0x80
 801de6c:	005b      	lsls	r3, r3, #1
 801de6e:	2200      	movs	r2, #0
 801de70:	2182      	movs	r1, #130	; 0x82
 801de72:	f7ef fe55 	bl	800db20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 801de76:	2300      	movs	r3, #0
}
 801de78:	0018      	movs	r0, r3
 801de7a:	46bd      	mov	sp, r7
 801de7c:	b002      	add	sp, #8
 801de7e:	bd80      	pop	{r7, pc}
 801de80:	20004470 	.word	0x20004470
 801de84:	40005c00 	.word	0x40005c00

0801de88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801de88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de8a:	b085      	sub	sp, #20
 801de8c:	af00      	add	r7, sp, #0
 801de8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de90:	210f      	movs	r1, #15
 801de92:	187b      	adds	r3, r7, r1
 801de94:	2200      	movs	r2, #0
 801de96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de98:	260e      	movs	r6, #14
 801de9a:	19bb      	adds	r3, r7, r6
 801de9c:	2200      	movs	r2, #0
 801de9e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801dea0:	687a      	ldr	r2, [r7, #4]
 801dea2:	23b2      	movs	r3, #178	; 0xb2
 801dea4:	009b      	lsls	r3, r3, #2
 801dea6:	58d3      	ldr	r3, [r2, r3]
 801dea8:	000d      	movs	r5, r1
 801deaa:	187c      	adds	r4, r7, r1
 801deac:	0018      	movs	r0, r3
 801deae:	f7ee fa93 	bl	800c3d8 <HAL_PCD_Start>
 801deb2:	0003      	movs	r3, r0
 801deb4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801deb6:	19bc      	adds	r4, r7, r6
 801deb8:	197b      	adds	r3, r7, r5
 801deba:	781b      	ldrb	r3, [r3, #0]
 801debc:	0018      	movs	r0, r3
 801debe:	f000 f9e6 	bl	801e28e <USBD_Get_USB_Status>
 801dec2:	0003      	movs	r3, r0
 801dec4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801dec6:	19bb      	adds	r3, r7, r6
 801dec8:	781b      	ldrb	r3, [r3, #0]
}
 801deca:	0018      	movs	r0, r3
 801decc:	46bd      	mov	sp, r7
 801dece:	b005      	add	sp, #20
 801ded0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ded2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ded2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ded4:	b085      	sub	sp, #20
 801ded6:	af00      	add	r7, sp, #0
 801ded8:	6078      	str	r0, [r7, #4]
 801deda:	000c      	movs	r4, r1
 801dedc:	0010      	movs	r0, r2
 801dede:	0019      	movs	r1, r3
 801dee0:	1cfb      	adds	r3, r7, #3
 801dee2:	1c22      	adds	r2, r4, #0
 801dee4:	701a      	strb	r2, [r3, #0]
 801dee6:	1cbb      	adds	r3, r7, #2
 801dee8:	1c02      	adds	r2, r0, #0
 801deea:	701a      	strb	r2, [r3, #0]
 801deec:	003b      	movs	r3, r7
 801deee:	1c0a      	adds	r2, r1, #0
 801def0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801def2:	260f      	movs	r6, #15
 801def4:	19bb      	adds	r3, r7, r6
 801def6:	2200      	movs	r2, #0
 801def8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801defa:	250e      	movs	r5, #14
 801defc:	197b      	adds	r3, r7, r5
 801defe:	2200      	movs	r2, #0
 801df00:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801df02:	687a      	ldr	r2, [r7, #4]
 801df04:	23b2      	movs	r3, #178	; 0xb2
 801df06:	009b      	lsls	r3, r3, #2
 801df08:	58d0      	ldr	r0, [r2, r3]
 801df0a:	19bc      	adds	r4, r7, r6
 801df0c:	1cbb      	adds	r3, r7, #2
 801df0e:	781d      	ldrb	r5, [r3, #0]
 801df10:	003b      	movs	r3, r7
 801df12:	881a      	ldrh	r2, [r3, #0]
 801df14:	1cfb      	adds	r3, r7, #3
 801df16:	7819      	ldrb	r1, [r3, #0]
 801df18:	002b      	movs	r3, r5
 801df1a:	f7ee fbc3 	bl	800c6a4 <HAL_PCD_EP_Open>
 801df1e:	0003      	movs	r3, r0
 801df20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801df22:	250e      	movs	r5, #14
 801df24:	197c      	adds	r4, r7, r5
 801df26:	19bb      	adds	r3, r7, r6
 801df28:	781b      	ldrb	r3, [r3, #0]
 801df2a:	0018      	movs	r0, r3
 801df2c:	f000 f9af 	bl	801e28e <USBD_Get_USB_Status>
 801df30:	0003      	movs	r3, r0
 801df32:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801df34:	197b      	adds	r3, r7, r5
 801df36:	781b      	ldrb	r3, [r3, #0]
}
 801df38:	0018      	movs	r0, r3
 801df3a:	46bd      	mov	sp, r7
 801df3c:	b005      	add	sp, #20
 801df3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801df40 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801df40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df42:	b085      	sub	sp, #20
 801df44:	af00      	add	r7, sp, #0
 801df46:	6078      	str	r0, [r7, #4]
 801df48:	000a      	movs	r2, r1
 801df4a:	1cfb      	adds	r3, r7, #3
 801df4c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801df4e:	210f      	movs	r1, #15
 801df50:	187b      	adds	r3, r7, r1
 801df52:	2200      	movs	r2, #0
 801df54:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801df56:	260e      	movs	r6, #14
 801df58:	19bb      	adds	r3, r7, r6
 801df5a:	2200      	movs	r2, #0
 801df5c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801df5e:	687a      	ldr	r2, [r7, #4]
 801df60:	23b2      	movs	r3, #178	; 0xb2
 801df62:	009b      	lsls	r3, r3, #2
 801df64:	58d2      	ldr	r2, [r2, r3]
 801df66:	000d      	movs	r5, r1
 801df68:	187c      	adds	r4, r7, r1
 801df6a:	1cfb      	adds	r3, r7, #3
 801df6c:	781b      	ldrb	r3, [r3, #0]
 801df6e:	0019      	movs	r1, r3
 801df70:	0010      	movs	r0, r2
 801df72:	f7ee fc08 	bl	800c786 <HAL_PCD_EP_Close>
 801df76:	0003      	movs	r3, r0
 801df78:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801df7a:	19bc      	adds	r4, r7, r6
 801df7c:	197b      	adds	r3, r7, r5
 801df7e:	781b      	ldrb	r3, [r3, #0]
 801df80:	0018      	movs	r0, r3
 801df82:	f000 f984 	bl	801e28e <USBD_Get_USB_Status>
 801df86:	0003      	movs	r3, r0
 801df88:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801df8a:	19bb      	adds	r3, r7, r6
 801df8c:	781b      	ldrb	r3, [r3, #0]
}
 801df8e:	0018      	movs	r0, r3
 801df90:	46bd      	mov	sp, r7
 801df92:	b005      	add	sp, #20
 801df94:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801df96 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801df96:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df98:	b085      	sub	sp, #20
 801df9a:	af00      	add	r7, sp, #0
 801df9c:	6078      	str	r0, [r7, #4]
 801df9e:	000a      	movs	r2, r1
 801dfa0:	1cfb      	adds	r3, r7, #3
 801dfa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dfa4:	210f      	movs	r1, #15
 801dfa6:	187b      	adds	r3, r7, r1
 801dfa8:	2200      	movs	r2, #0
 801dfaa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dfac:	260e      	movs	r6, #14
 801dfae:	19bb      	adds	r3, r7, r6
 801dfb0:	2200      	movs	r2, #0
 801dfb2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801dfb4:	687a      	ldr	r2, [r7, #4]
 801dfb6:	23b2      	movs	r3, #178	; 0xb2
 801dfb8:	009b      	lsls	r3, r3, #2
 801dfba:	58d2      	ldr	r2, [r2, r3]
 801dfbc:	000d      	movs	r5, r1
 801dfbe:	187c      	adds	r4, r7, r1
 801dfc0:	1cfb      	adds	r3, r7, #3
 801dfc2:	781b      	ldrb	r3, [r3, #0]
 801dfc4:	0019      	movs	r1, r3
 801dfc6:	0010      	movs	r0, r2
 801dfc8:	f7ee fcbe 	bl	800c948 <HAL_PCD_EP_SetStall>
 801dfcc:	0003      	movs	r3, r0
 801dfce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dfd0:	19bc      	adds	r4, r7, r6
 801dfd2:	197b      	adds	r3, r7, r5
 801dfd4:	781b      	ldrb	r3, [r3, #0]
 801dfd6:	0018      	movs	r0, r3
 801dfd8:	f000 f959 	bl	801e28e <USBD_Get_USB_Status>
 801dfdc:	0003      	movs	r3, r0
 801dfde:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801dfe0:	19bb      	adds	r3, r7, r6
 801dfe2:	781b      	ldrb	r3, [r3, #0]
}
 801dfe4:	0018      	movs	r0, r3
 801dfe6:	46bd      	mov	sp, r7
 801dfe8:	b005      	add	sp, #20
 801dfea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dfec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfee:	b085      	sub	sp, #20
 801dff0:	af00      	add	r7, sp, #0
 801dff2:	6078      	str	r0, [r7, #4]
 801dff4:	000a      	movs	r2, r1
 801dff6:	1cfb      	adds	r3, r7, #3
 801dff8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dffa:	210f      	movs	r1, #15
 801dffc:	187b      	adds	r3, r7, r1
 801dffe:	2200      	movs	r2, #0
 801e000:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e002:	260e      	movs	r6, #14
 801e004:	19bb      	adds	r3, r7, r6
 801e006:	2200      	movs	r2, #0
 801e008:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e00a:	687a      	ldr	r2, [r7, #4]
 801e00c:	23b2      	movs	r3, #178	; 0xb2
 801e00e:	009b      	lsls	r3, r3, #2
 801e010:	58d2      	ldr	r2, [r2, r3]
 801e012:	000d      	movs	r5, r1
 801e014:	187c      	adds	r4, r7, r1
 801e016:	1cfb      	adds	r3, r7, #3
 801e018:	781b      	ldrb	r3, [r3, #0]
 801e01a:	0019      	movs	r1, r3
 801e01c:	0010      	movs	r0, r2
 801e01e:	f7ee fcf1 	bl	800ca04 <HAL_PCD_EP_ClrStall>
 801e022:	0003      	movs	r3, r0
 801e024:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e026:	19bc      	adds	r4, r7, r6
 801e028:	197b      	adds	r3, r7, r5
 801e02a:	781b      	ldrb	r3, [r3, #0]
 801e02c:	0018      	movs	r0, r3
 801e02e:	f000 f92e 	bl	801e28e <USBD_Get_USB_Status>
 801e032:	0003      	movs	r3, r0
 801e034:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e036:	19bb      	adds	r3, r7, r6
 801e038:	781b      	ldrb	r3, [r3, #0]
}
 801e03a:	0018      	movs	r0, r3
 801e03c:	46bd      	mov	sp, r7
 801e03e:	b005      	add	sp, #20
 801e040:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e042 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e042:	b580      	push	{r7, lr}
 801e044:	b084      	sub	sp, #16
 801e046:	af00      	add	r7, sp, #0
 801e048:	6078      	str	r0, [r7, #4]
 801e04a:	000a      	movs	r2, r1
 801e04c:	1cfb      	adds	r3, r7, #3
 801e04e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e050:	687a      	ldr	r2, [r7, #4]
 801e052:	23b2      	movs	r3, #178	; 0xb2
 801e054:	009b      	lsls	r3, r3, #2
 801e056:	58d3      	ldr	r3, [r2, r3]
 801e058:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801e05a:	1cfb      	adds	r3, r7, #3
 801e05c:	781b      	ldrb	r3, [r3, #0]
 801e05e:	b25b      	sxtb	r3, r3
 801e060:	2b00      	cmp	r3, #0
 801e062:	da0c      	bge.n	801e07e <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801e064:	1cfb      	adds	r3, r7, #3
 801e066:	781b      	ldrb	r3, [r3, #0]
 801e068:	227f      	movs	r2, #127	; 0x7f
 801e06a:	401a      	ands	r2, r3
 801e06c:	68f9      	ldr	r1, [r7, #12]
 801e06e:	0013      	movs	r3, r2
 801e070:	009b      	lsls	r3, r3, #2
 801e072:	189b      	adds	r3, r3, r2
 801e074:	00db      	lsls	r3, r3, #3
 801e076:	18cb      	adds	r3, r1, r3
 801e078:	3316      	adds	r3, #22
 801e07a:	781b      	ldrb	r3, [r3, #0]
 801e07c:	e00d      	b.n	801e09a <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801e07e:	1cfb      	adds	r3, r7, #3
 801e080:	781b      	ldrb	r3, [r3, #0]
 801e082:	227f      	movs	r2, #127	; 0x7f
 801e084:	401a      	ands	r2, r3
 801e086:	68f8      	ldr	r0, [r7, #12]
 801e088:	23ab      	movs	r3, #171	; 0xab
 801e08a:	0059      	lsls	r1, r3, #1
 801e08c:	0013      	movs	r3, r2
 801e08e:	009b      	lsls	r3, r3, #2
 801e090:	189b      	adds	r3, r3, r2
 801e092:	00db      	lsls	r3, r3, #3
 801e094:	18c3      	adds	r3, r0, r3
 801e096:	185b      	adds	r3, r3, r1
 801e098:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e09a:	0018      	movs	r0, r3
 801e09c:	46bd      	mov	sp, r7
 801e09e:	b004      	add	sp, #16
 801e0a0:	bd80      	pop	{r7, pc}

0801e0a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e0a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0a4:	b085      	sub	sp, #20
 801e0a6:	af00      	add	r7, sp, #0
 801e0a8:	6078      	str	r0, [r7, #4]
 801e0aa:	000a      	movs	r2, r1
 801e0ac:	1cfb      	adds	r3, r7, #3
 801e0ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e0b0:	210f      	movs	r1, #15
 801e0b2:	187b      	adds	r3, r7, r1
 801e0b4:	2200      	movs	r2, #0
 801e0b6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e0b8:	260e      	movs	r6, #14
 801e0ba:	19bb      	adds	r3, r7, r6
 801e0bc:	2200      	movs	r2, #0
 801e0be:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e0c0:	687a      	ldr	r2, [r7, #4]
 801e0c2:	23b2      	movs	r3, #178	; 0xb2
 801e0c4:	009b      	lsls	r3, r3, #2
 801e0c6:	58d2      	ldr	r2, [r2, r3]
 801e0c8:	000d      	movs	r5, r1
 801e0ca:	187c      	adds	r4, r7, r1
 801e0cc:	1cfb      	adds	r3, r7, #3
 801e0ce:	781b      	ldrb	r3, [r3, #0]
 801e0d0:	0019      	movs	r1, r3
 801e0d2:	0010      	movs	r0, r2
 801e0d4:	f7ee fabc 	bl	800c650 <HAL_PCD_SetAddress>
 801e0d8:	0003      	movs	r3, r0
 801e0da:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e0dc:	19bc      	adds	r4, r7, r6
 801e0de:	197b      	adds	r3, r7, r5
 801e0e0:	781b      	ldrb	r3, [r3, #0]
 801e0e2:	0018      	movs	r0, r3
 801e0e4:	f000 f8d3 	bl	801e28e <USBD_Get_USB_Status>
 801e0e8:	0003      	movs	r3, r0
 801e0ea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e0ec:	19bb      	adds	r3, r7, r6
 801e0ee:	781b      	ldrb	r3, [r3, #0]
}
 801e0f0:	0018      	movs	r0, r3
 801e0f2:	46bd      	mov	sp, r7
 801e0f4:	b005      	add	sp, #20
 801e0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e0f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0fa:	b087      	sub	sp, #28
 801e0fc:	af00      	add	r7, sp, #0
 801e0fe:	60f8      	str	r0, [r7, #12]
 801e100:	607a      	str	r2, [r7, #4]
 801e102:	603b      	str	r3, [r7, #0]
 801e104:	230b      	movs	r3, #11
 801e106:	18fb      	adds	r3, r7, r3
 801e108:	1c0a      	adds	r2, r1, #0
 801e10a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e10c:	2617      	movs	r6, #23
 801e10e:	19bb      	adds	r3, r7, r6
 801e110:	2200      	movs	r2, #0
 801e112:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e114:	2516      	movs	r5, #22
 801e116:	197b      	adds	r3, r7, r5
 801e118:	2200      	movs	r2, #0
 801e11a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e11c:	68fa      	ldr	r2, [r7, #12]
 801e11e:	23b2      	movs	r3, #178	; 0xb2
 801e120:	009b      	lsls	r3, r3, #2
 801e122:	58d0      	ldr	r0, [r2, r3]
 801e124:	19bc      	adds	r4, r7, r6
 801e126:	683d      	ldr	r5, [r7, #0]
 801e128:	687a      	ldr	r2, [r7, #4]
 801e12a:	230b      	movs	r3, #11
 801e12c:	18fb      	adds	r3, r7, r3
 801e12e:	7819      	ldrb	r1, [r3, #0]
 801e130:	002b      	movs	r3, r5
 801e132:	f7ee fbcc 	bl	800c8ce <HAL_PCD_EP_Transmit>
 801e136:	0003      	movs	r3, r0
 801e138:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e13a:	2516      	movs	r5, #22
 801e13c:	197c      	adds	r4, r7, r5
 801e13e:	19bb      	adds	r3, r7, r6
 801e140:	781b      	ldrb	r3, [r3, #0]
 801e142:	0018      	movs	r0, r3
 801e144:	f000 f8a3 	bl	801e28e <USBD_Get_USB_Status>
 801e148:	0003      	movs	r3, r0
 801e14a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e14c:	197b      	adds	r3, r7, r5
 801e14e:	781b      	ldrb	r3, [r3, #0]
}
 801e150:	0018      	movs	r0, r3
 801e152:	46bd      	mov	sp, r7
 801e154:	b007      	add	sp, #28
 801e156:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e158 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e15a:	b087      	sub	sp, #28
 801e15c:	af00      	add	r7, sp, #0
 801e15e:	60f8      	str	r0, [r7, #12]
 801e160:	607a      	str	r2, [r7, #4]
 801e162:	603b      	str	r3, [r7, #0]
 801e164:	230b      	movs	r3, #11
 801e166:	18fb      	adds	r3, r7, r3
 801e168:	1c0a      	adds	r2, r1, #0
 801e16a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e16c:	2617      	movs	r6, #23
 801e16e:	19bb      	adds	r3, r7, r6
 801e170:	2200      	movs	r2, #0
 801e172:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e174:	2516      	movs	r5, #22
 801e176:	197b      	adds	r3, r7, r5
 801e178:	2200      	movs	r2, #0
 801e17a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e17c:	68fa      	ldr	r2, [r7, #12]
 801e17e:	23b2      	movs	r3, #178	; 0xb2
 801e180:	009b      	lsls	r3, r3, #2
 801e182:	58d0      	ldr	r0, [r2, r3]
 801e184:	19bc      	adds	r4, r7, r6
 801e186:	683d      	ldr	r5, [r7, #0]
 801e188:	687a      	ldr	r2, [r7, #4]
 801e18a:	230b      	movs	r3, #11
 801e18c:	18fb      	adds	r3, r7, r3
 801e18e:	7819      	ldrb	r1, [r3, #0]
 801e190:	002b      	movs	r3, r5
 801e192:	f7ee fb4b 	bl	800c82c <HAL_PCD_EP_Receive>
 801e196:	0003      	movs	r3, r0
 801e198:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e19a:	2516      	movs	r5, #22
 801e19c:	197c      	adds	r4, r7, r5
 801e19e:	19bb      	adds	r3, r7, r6
 801e1a0:	781b      	ldrb	r3, [r3, #0]
 801e1a2:	0018      	movs	r0, r3
 801e1a4:	f000 f873 	bl	801e28e <USBD_Get_USB_Status>
 801e1a8:	0003      	movs	r3, r0
 801e1aa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e1ac:	197b      	adds	r3, r7, r5
 801e1ae:	781b      	ldrb	r3, [r3, #0]
}
 801e1b0:	0018      	movs	r0, r3
 801e1b2:	46bd      	mov	sp, r7
 801e1b4:	b007      	add	sp, #28
 801e1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e1b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e1b8:	b580      	push	{r7, lr}
 801e1ba:	b082      	sub	sp, #8
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	6078      	str	r0, [r7, #4]
 801e1c0:	000a      	movs	r2, r1
 801e1c2:	1cfb      	adds	r3, r7, #3
 801e1c4:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e1c6:	687a      	ldr	r2, [r7, #4]
 801e1c8:	23b2      	movs	r3, #178	; 0xb2
 801e1ca:	009b      	lsls	r3, r3, #2
 801e1cc:	58d2      	ldr	r2, [r2, r3]
 801e1ce:	1cfb      	adds	r3, r7, #3
 801e1d0:	781b      	ldrb	r3, [r3, #0]
 801e1d2:	0019      	movs	r1, r3
 801e1d4:	0010      	movs	r0, r2
 801e1d6:	f7ee fb61 	bl	800c89c <HAL_PCD_EP_GetRxCount>
 801e1da:	0003      	movs	r3, r0
}
 801e1dc:	0018      	movs	r0, r3
 801e1de:	46bd      	mov	sp, r7
 801e1e0:	b002      	add	sp, #8
 801e1e2:	bd80      	pop	{r7, pc}

0801e1e4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1e4:	b580      	push	{r7, lr}
 801e1e6:	b082      	sub	sp, #8
 801e1e8:	af00      	add	r7, sp, #0
 801e1ea:	6078      	str	r0, [r7, #4]
 801e1ec:	000a      	movs	r2, r1
 801e1ee:	1cfb      	adds	r3, r7, #3
 801e1f0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801e1f2:	1cfb      	adds	r3, r7, #3
 801e1f4:	781b      	ldrb	r3, [r3, #0]
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d002      	beq.n	801e200 <HAL_PCDEx_LPM_Callback+0x1c>
 801e1fa:	2b01      	cmp	r3, #1
 801e1fc:	d014      	beq.n	801e228 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801e1fe:	e025      	b.n	801e24c <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	7adb      	ldrb	r3, [r3, #11]
 801e204:	2b00      	cmp	r3, #0
 801e206:	d007      	beq.n	801e218 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 801e208:	f000 f83a 	bl	801e280 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e20c:	4b11      	ldr	r3, [pc, #68]	; (801e254 <HAL_PCDEx_LPM_Callback+0x70>)
 801e20e:	691a      	ldr	r2, [r3, #16]
 801e210:	4b10      	ldr	r3, [pc, #64]	; (801e254 <HAL_PCDEx_LPM_Callback+0x70>)
 801e212:	2106      	movs	r1, #6
 801e214:	438a      	bics	r2, r1
 801e216:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 801e218:	687a      	ldr	r2, [r7, #4]
 801e21a:	23b7      	movs	r3, #183	; 0xb7
 801e21c:	009b      	lsls	r3, r3, #2
 801e21e:	58d3      	ldr	r3, [r2, r3]
 801e220:	0018      	movs	r0, r3
 801e222:	f7f8 fc63 	bl	8016aec <USBD_LL_Resume>
    break;
 801e226:	e011      	b.n	801e24c <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 801e228:	687a      	ldr	r2, [r7, #4]
 801e22a:	23b7      	movs	r3, #183	; 0xb7
 801e22c:	009b      	lsls	r3, r3, #2
 801e22e:	58d3      	ldr	r3, [r2, r3]
 801e230:	0018      	movs	r0, r3
 801e232:	f7f8 fc43 	bl	8016abc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	7adb      	ldrb	r3, [r3, #11]
 801e23a:	2b00      	cmp	r3, #0
 801e23c:	d005      	beq.n	801e24a <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e23e:	4b05      	ldr	r3, [pc, #20]	; (801e254 <HAL_PCDEx_LPM_Callback+0x70>)
 801e240:	691a      	ldr	r2, [r3, #16]
 801e242:	4b04      	ldr	r3, [pc, #16]	; (801e254 <HAL_PCDEx_LPM_Callback+0x70>)
 801e244:	2106      	movs	r1, #6
 801e246:	430a      	orrs	r2, r1
 801e248:	611a      	str	r2, [r3, #16]
    break;
 801e24a:	46c0      	nop			; (mov r8, r8)
}
 801e24c:	46c0      	nop			; (mov r8, r8)
 801e24e:	46bd      	mov	sp, r7
 801e250:	b002      	add	sp, #8
 801e252:	bd80      	pop	{r7, pc}
 801e254:	e000ed00 	.word	0xe000ed00

0801e258 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b082      	sub	sp, #8
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801e260:	4b02      	ldr	r3, [pc, #8]	; (801e26c <USBD_static_malloc+0x14>)
}
 801e262:	0018      	movs	r0, r3
 801e264:	46bd      	mov	sp, r7
 801e266:	b002      	add	sp, #8
 801e268:	bd80      	pop	{r7, pc}
 801e26a:	46c0      	nop			; (mov r8, r8)
 801e26c:	20004750 	.word	0x20004750

0801e270 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801e270:	b580      	push	{r7, lr}
 801e272:	b082      	sub	sp, #8
 801e274:	af00      	add	r7, sp, #0
 801e276:	6078      	str	r0, [r7, #4]

}
 801e278:	46c0      	nop			; (mov r8, r8)
 801e27a:	46bd      	mov	sp, r7
 801e27c:	b002      	add	sp, #8
 801e27e:	bd80      	pop	{r7, pc}

0801e280 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801e280:	b580      	push	{r7, lr}
 801e282:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801e284:	f7e9 feaa 	bl	8007fdc <SystemClock_Config>
}
 801e288:	46c0      	nop			; (mov r8, r8)
 801e28a:	46bd      	mov	sp, r7
 801e28c:	bd80      	pop	{r7, pc}

0801e28e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e28e:	b580      	push	{r7, lr}
 801e290:	b084      	sub	sp, #16
 801e292:	af00      	add	r7, sp, #0
 801e294:	0002      	movs	r2, r0
 801e296:	1dfb      	adds	r3, r7, #7
 801e298:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e29a:	230f      	movs	r3, #15
 801e29c:	18fb      	adds	r3, r7, r3
 801e29e:	2200      	movs	r2, #0
 801e2a0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801e2a2:	1dfb      	adds	r3, r7, #7
 801e2a4:	781b      	ldrb	r3, [r3, #0]
 801e2a6:	2b03      	cmp	r3, #3
 801e2a8:	d017      	beq.n	801e2da <USBD_Get_USB_Status+0x4c>
 801e2aa:	dc1b      	bgt.n	801e2e4 <USBD_Get_USB_Status+0x56>
 801e2ac:	2b02      	cmp	r3, #2
 801e2ae:	d00f      	beq.n	801e2d0 <USBD_Get_USB_Status+0x42>
 801e2b0:	dc18      	bgt.n	801e2e4 <USBD_Get_USB_Status+0x56>
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d002      	beq.n	801e2bc <USBD_Get_USB_Status+0x2e>
 801e2b6:	2b01      	cmp	r3, #1
 801e2b8:	d005      	beq.n	801e2c6 <USBD_Get_USB_Status+0x38>
 801e2ba:	e013      	b.n	801e2e4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e2bc:	230f      	movs	r3, #15
 801e2be:	18fb      	adds	r3, r7, r3
 801e2c0:	2200      	movs	r2, #0
 801e2c2:	701a      	strb	r2, [r3, #0]
    break;
 801e2c4:	e013      	b.n	801e2ee <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e2c6:	230f      	movs	r3, #15
 801e2c8:	18fb      	adds	r3, r7, r3
 801e2ca:	2203      	movs	r2, #3
 801e2cc:	701a      	strb	r2, [r3, #0]
    break;
 801e2ce:	e00e      	b.n	801e2ee <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e2d0:	230f      	movs	r3, #15
 801e2d2:	18fb      	adds	r3, r7, r3
 801e2d4:	2201      	movs	r2, #1
 801e2d6:	701a      	strb	r2, [r3, #0]
    break;
 801e2d8:	e009      	b.n	801e2ee <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e2da:	230f      	movs	r3, #15
 801e2dc:	18fb      	adds	r3, r7, r3
 801e2de:	2203      	movs	r2, #3
 801e2e0:	701a      	strb	r2, [r3, #0]
    break;
 801e2e2:	e004      	b.n	801e2ee <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801e2e4:	230f      	movs	r3, #15
 801e2e6:	18fb      	adds	r3, r7, r3
 801e2e8:	2203      	movs	r2, #3
 801e2ea:	701a      	strb	r2, [r3, #0]
    break;
 801e2ec:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 801e2ee:	230f      	movs	r3, #15
 801e2f0:	18fb      	adds	r3, r7, r3
 801e2f2:	781b      	ldrb	r3, [r3, #0]
}
 801e2f4:	0018      	movs	r0, r3
 801e2f6:	46bd      	mov	sp, r7
 801e2f8:	b004      	add	sp, #16
 801e2fa:	bd80      	pop	{r7, pc}

0801e2fc <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 801e2fc:	b580      	push	{r7, lr}
 801e2fe:	b086      	sub	sp, #24
 801e300:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 801e302:	230f      	movs	r3, #15
 801e304:	18fb      	adds	r3, r7, r3
 801e306:	2203      	movs	r2, #3
 801e308:	701a      	strb	r2, [r3, #0]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 801e30a:	4bc0      	ldr	r3, [pc, #768]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e30c:	681a      	ldr	r2, [r3, #0]
 801e30e:	23c0      	movs	r3, #192	; 0xc0
 801e310:	049b      	lsls	r3, r3, #18
 801e312:	4013      	ands	r3, r2
 801e314:	d00e      	beq.n	801e334 <BSP_GUI_LoadDataFromFlash+0x38>
 801e316:	4bbd      	ldr	r3, [pc, #756]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e318:	681a      	ldr	r2, [r3, #0]
 801e31a:	23c0      	movs	r3, #192	; 0xc0
 801e31c:	049b      	lsls	r3, r3, #18
 801e31e:	401a      	ands	r2, r3
 801e320:	2380      	movs	r3, #128	; 0x80
 801e322:	045b      	lsls	r3, r3, #17
 801e324:	429a      	cmp	r2, r3
 801e326:	d110      	bne.n	801e34a <BSP_GUI_LoadDataFromFlash+0x4e>
 801e328:	4bb9      	ldr	r3, [pc, #740]	; (801e610 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e32a:	681a      	ldr	r2, [r3, #0]
 801e32c:	2380      	movs	r3, #128	; 0x80
 801e32e:	039b      	lsls	r3, r3, #14
 801e330:	4013      	ands	r3, r2
 801e332:	d10a      	bne.n	801e34a <BSP_GUI_LoadDataFromFlash+0x4e>
 801e334:	4bb7      	ldr	r3, [pc, #732]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e336:	681b      	ldr	r3, [r3, #0]
 801e338:	029b      	lsls	r3, r3, #10
 801e33a:	4ab7      	ldr	r2, [pc, #732]	; (801e618 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e33c:	4013      	ands	r3, r2
 801e33e:	0adb      	lsrs	r3, r3, #11
 801e340:	031b      	lsls	r3, r3, #12
 801e342:	4ab6      	ldr	r2, [pc, #728]	; (801e61c <BSP_GUI_LoadDataFromFlash+0x320>)
 801e344:	4694      	mov	ip, r2
 801e346:	4463      	add	r3, ip
 801e348:	e00a      	b.n	801e360 <BSP_GUI_LoadDataFromFlash+0x64>
 801e34a:	4bb2      	ldr	r3, [pc, #712]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	029b      	lsls	r3, r3, #10
 801e350:	085b      	lsrs	r3, r3, #1
 801e352:	4ab3      	ldr	r2, [pc, #716]	; (801e620 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e354:	4013      	ands	r3, r2
 801e356:	0adb      	lsrs	r3, r3, #11
 801e358:	031b      	lsls	r3, r3, #12
 801e35a:	4ab0      	ldr	r2, [pc, #704]	; (801e61c <BSP_GUI_LoadDataFromFlash+0x320>)
 801e35c:	4694      	mov	ip, r2
 801e35e:	4463      	add	r3, ip
 801e360:	60bb      	str	r3, [r7, #8]
#else
  uint32_t _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
#endif /* GUI_FLASH_MAGIC_NUMBER */

  /* Check that we did not reach the end of page */
  if (GUI_FLASH_ADDR_RESERVED > ADDR_FLASH_PAGE_END)
 801e362:	4baa      	ldr	r3, [pc, #680]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e364:	681a      	ldr	r2, [r3, #0]
 801e366:	23c0      	movs	r3, #192	; 0xc0
 801e368:	049b      	lsls	r3, r3, #18
 801e36a:	4013      	ands	r3, r2
 801e36c:	d00e      	beq.n	801e38c <BSP_GUI_LoadDataFromFlash+0x90>
 801e36e:	4ba7      	ldr	r3, [pc, #668]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e370:	681a      	ldr	r2, [r3, #0]
 801e372:	23c0      	movs	r3, #192	; 0xc0
 801e374:	049b      	lsls	r3, r3, #18
 801e376:	401a      	ands	r2, r3
 801e378:	2380      	movs	r3, #128	; 0x80
 801e37a:	045b      	lsls	r3, r3, #17
 801e37c:	429a      	cmp	r2, r3
 801e37e:	d10f      	bne.n	801e3a0 <BSP_GUI_LoadDataFromFlash+0xa4>
 801e380:	4ba3      	ldr	r3, [pc, #652]	; (801e610 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e382:	681a      	ldr	r2, [r3, #0]
 801e384:	2380      	movs	r3, #128	; 0x80
 801e386:	039b      	lsls	r3, r3, #14
 801e388:	4013      	ands	r3, r2
 801e38a:	d109      	bne.n	801e3a0 <BSP_GUI_LoadDataFromFlash+0xa4>
 801e38c:	4ba1      	ldr	r3, [pc, #644]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	029b      	lsls	r3, r3, #10
 801e392:	4aa1      	ldr	r2, [pc, #644]	; (801e618 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e394:	4013      	ands	r3, r2
 801e396:	0adb      	lsrs	r3, r3, #11
 801e398:	031b      	lsls	r3, r3, #12
 801e39a:	4aa2      	ldr	r2, [pc, #648]	; (801e624 <BSP_GUI_LoadDataFromFlash+0x328>)
 801e39c:	189a      	adds	r2, r3, r2
 801e39e:	e009      	b.n	801e3b4 <BSP_GUI_LoadDataFromFlash+0xb8>
 801e3a0:	4b9c      	ldr	r3, [pc, #624]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	029b      	lsls	r3, r3, #10
 801e3a6:	085b      	lsrs	r3, r3, #1
 801e3a8:	4a9d      	ldr	r2, [pc, #628]	; (801e620 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e3aa:	4013      	ands	r3, r2
 801e3ac:	0adb      	lsrs	r3, r3, #11
 801e3ae:	031b      	lsls	r3, r3, #12
 801e3b0:	4a9c      	ldr	r2, [pc, #624]	; (801e624 <BSP_GUI_LoadDataFromFlash+0x328>)
 801e3b2:	189a      	adds	r2, r3, r2
 801e3b4:	4b95      	ldr	r3, [pc, #596]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e3b6:	6819      	ldr	r1, [r3, #0]
 801e3b8:	23c0      	movs	r3, #192	; 0xc0
 801e3ba:	049b      	lsls	r3, r3, #18
 801e3bc:	400b      	ands	r3, r1
 801e3be:	d00e      	beq.n	801e3de <BSP_GUI_LoadDataFromFlash+0xe2>
 801e3c0:	4b92      	ldr	r3, [pc, #584]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e3c2:	6819      	ldr	r1, [r3, #0]
 801e3c4:	23c0      	movs	r3, #192	; 0xc0
 801e3c6:	049b      	lsls	r3, r3, #18
 801e3c8:	4019      	ands	r1, r3
 801e3ca:	2380      	movs	r3, #128	; 0x80
 801e3cc:	045b      	lsls	r3, r3, #17
 801e3ce:	4299      	cmp	r1, r3
 801e3d0:	d112      	bne.n	801e3f8 <BSP_GUI_LoadDataFromFlash+0xfc>
 801e3d2:	4b8f      	ldr	r3, [pc, #572]	; (801e610 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e3d4:	6819      	ldr	r1, [r3, #0]
 801e3d6:	2380      	movs	r3, #128	; 0x80
 801e3d8:	039b      	lsls	r3, r3, #14
 801e3da:	400b      	ands	r3, r1
 801e3dc:	d10c      	bne.n	801e3f8 <BSP_GUI_LoadDataFromFlash+0xfc>
 801e3de:	4b8d      	ldr	r3, [pc, #564]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e3e0:	681b      	ldr	r3, [r3, #0]
 801e3e2:	029b      	lsls	r3, r3, #10
 801e3e4:	498c      	ldr	r1, [pc, #560]	; (801e618 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e3e6:	400b      	ands	r3, r1
 801e3e8:	0adb      	lsrs	r3, r3, #11
 801e3ea:	2180      	movs	r1, #128	; 0x80
 801e3ec:	0209      	lsls	r1, r1, #8
 801e3ee:	468c      	mov	ip, r1
 801e3f0:	4463      	add	r3, ip
 801e3f2:	031b      	lsls	r3, r3, #12
 801e3f4:	3b01      	subs	r3, #1
 801e3f6:	e00c      	b.n	801e412 <BSP_GUI_LoadDataFromFlash+0x116>
 801e3f8:	4b86      	ldr	r3, [pc, #536]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	029b      	lsls	r3, r3, #10
 801e3fe:	085b      	lsrs	r3, r3, #1
 801e400:	4987      	ldr	r1, [pc, #540]	; (801e620 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e402:	400b      	ands	r3, r1
 801e404:	0adb      	lsrs	r3, r3, #11
 801e406:	2180      	movs	r1, #128	; 0x80
 801e408:	0209      	lsls	r1, r1, #8
 801e40a:	468c      	mov	ip, r1
 801e40c:	4463      	add	r3, ip
 801e40e:	031b      	lsls	r3, r3, #12
 801e410:	3b01      	subs	r3, #1
 801e412:	429a      	cmp	r2, r3
 801e414:	d900      	bls.n	801e418 <BSP_GUI_LoadDataFromFlash+0x11c>
 801e416:	e17a      	b.n	801e70e <BSP_GUI_LoadDataFromFlash+0x412>
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  if ((0xFFFFFFFFu != *((uint32_t *)_addr)) && (MagicNumber != *((uint64_t *)_addr)))
 801e418:	68bb      	ldr	r3, [r7, #8]
 801e41a:	681b      	ldr	r3, [r3, #0]
 801e41c:	3301      	adds	r3, #1
 801e41e:	d011      	beq.n	801e444 <BSP_GUI_LoadDataFromFlash+0x148>
 801e420:	68bb      	ldr	r3, [r7, #8]
 801e422:	681a      	ldr	r2, [r3, #0]
 801e424:	685b      	ldr	r3, [r3, #4]
 801e426:	4880      	ldr	r0, [pc, #512]	; (801e628 <BSP_GUI_LoadDataFromFlash+0x32c>)
 801e428:	4980      	ldr	r1, [pc, #512]	; (801e62c <BSP_GUI_LoadDataFromFlash+0x330>)
 801e42a:	4282      	cmp	r2, r0
 801e42c:	d101      	bne.n	801e432 <BSP_GUI_LoadDataFromFlash+0x136>
 801e42e:	428b      	cmp	r3, r1
 801e430:	d008      	beq.n	801e444 <BSP_GUI_LoadDataFromFlash+0x148>
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
  {
#if defined(_TRACE)
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t *)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 801e432:	4b7f      	ldr	r3, [pc, #508]	; (801e630 <BSP_GUI_LoadDataFromFlash+0x334>)
 801e434:	2218      	movs	r2, #24
 801e436:	9200      	str	r2, [sp, #0]
 801e438:	2200      	movs	r2, #0
 801e43a:	2100      	movs	r1, #0
 801e43c:	2006      	movs	r0, #6
 801e43e:	f7f4 fadf 	bl	8012a00 <USBPD_TRACE_Add>
#endif /* _TRACE */
    goto _exit;
 801e442:	e167      	b.n	801e714 <BSP_GUI_LoadDataFromFlash+0x418>
  }
  if (0xFFFFFFFFu == *((uint32_t *)_addr))
 801e444:	68bb      	ldr	r3, [r7, #8]
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	3301      	adds	r3, #1
 801e44a:	d100      	bne.n	801e44e <BSP_GUI_LoadDataFromFlash+0x152>
 801e44c:	e161      	b.n	801e712 <BSP_GUI_LoadDataFromFlash+0x416>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 801e44e:	4b6f      	ldr	r3, [pc, #444]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e450:	681a      	ldr	r2, [r3, #0]
 801e452:	23c0      	movs	r3, #192	; 0xc0
 801e454:	049b      	lsls	r3, r3, #18
 801e456:	4013      	ands	r3, r2
 801e458:	d00e      	beq.n	801e478 <BSP_GUI_LoadDataFromFlash+0x17c>
 801e45a:	4b6c      	ldr	r3, [pc, #432]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e45c:	681a      	ldr	r2, [r3, #0]
 801e45e:	23c0      	movs	r3, #192	; 0xc0
 801e460:	049b      	lsls	r3, r3, #18
 801e462:	401a      	ands	r2, r3
 801e464:	2380      	movs	r3, #128	; 0x80
 801e466:	045b      	lsls	r3, r3, #17
 801e468:	429a      	cmp	r2, r3
 801e46a:	d110      	bne.n	801e48e <BSP_GUI_LoadDataFromFlash+0x192>
 801e46c:	4b68      	ldr	r3, [pc, #416]	; (801e610 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e46e:	681a      	ldr	r2, [r3, #0]
 801e470:	2380      	movs	r3, #128	; 0x80
 801e472:	039b      	lsls	r3, r3, #14
 801e474:	4013      	ands	r3, r2
 801e476:	d10a      	bne.n	801e48e <BSP_GUI_LoadDataFromFlash+0x192>
 801e478:	4b66      	ldr	r3, [pc, #408]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	029b      	lsls	r3, r3, #10
 801e47e:	4a66      	ldr	r2, [pc, #408]	; (801e618 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e480:	4013      	ands	r3, r2
 801e482:	0adb      	lsrs	r3, r3, #11
 801e484:	031b      	lsls	r3, r3, #12
 801e486:	4a6b      	ldr	r2, [pc, #428]	; (801e634 <BSP_GUI_LoadDataFromFlash+0x338>)
 801e488:	4694      	mov	ip, r2
 801e48a:	4463      	add	r3, ip
 801e48c:	e00a      	b.n	801e4a4 <BSP_GUI_LoadDataFromFlash+0x1a8>
 801e48e:	4b61      	ldr	r3, [pc, #388]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e490:	681b      	ldr	r3, [r3, #0]
 801e492:	029b      	lsls	r3, r3, #10
 801e494:	085b      	lsrs	r3, r3, #1
 801e496:	4a62      	ldr	r2, [pc, #392]	; (801e620 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e498:	4013      	ands	r3, r2
 801e49a:	0adb      	lsrs	r3, r3, #11
 801e49c:	031b      	lsls	r3, r3, #12
 801e49e:	4a65      	ldr	r2, [pc, #404]	; (801e634 <BSP_GUI_LoadDataFromFlash+0x338>)
 801e4a0:	4694      	mov	ip, r2
 801e4a2:	4463      	add	r3, ip
 801e4a4:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t *_ptr = (uint32_t *)USBPD_NbPDO;
 801e4a6:	4b64      	ldr	r3, [pc, #400]	; (801e638 <BSP_GUI_LoadDataFromFlash+0x33c>)
 801e4a8:	607b      	str	r3, [r7, #4]
    USBPD_WRITE32(_ptr, *((uint32_t *)_addr));
 801e4aa:	230e      	movs	r3, #14
 801e4ac:	18fb      	adds	r3, r7, r3
 801e4ae:	2200      	movs	r2, #0
 801e4b0:	701a      	strb	r2, [r3, #0]
 801e4b2:	e012      	b.n	801e4da <BSP_GUI_LoadDataFromFlash+0x1de>
 801e4b4:	68bb      	ldr	r3, [r7, #8]
 801e4b6:	681a      	ldr	r2, [r3, #0]
 801e4b8:	200e      	movs	r0, #14
 801e4ba:	183b      	adds	r3, r7, r0
 801e4bc:	781b      	ldrb	r3, [r3, #0]
 801e4be:	00db      	lsls	r3, r3, #3
 801e4c0:	40da      	lsrs	r2, r3
 801e4c2:	0011      	movs	r1, r2
 801e4c4:	183b      	adds	r3, r7, r0
 801e4c6:	781b      	ldrb	r3, [r3, #0]
 801e4c8:	687a      	ldr	r2, [r7, #4]
 801e4ca:	18d3      	adds	r3, r2, r3
 801e4cc:	b2ca      	uxtb	r2, r1
 801e4ce:	701a      	strb	r2, [r3, #0]
 801e4d0:	183b      	adds	r3, r7, r0
 801e4d2:	781a      	ldrb	r2, [r3, #0]
 801e4d4:	183b      	adds	r3, r7, r0
 801e4d6:	3201      	adds	r2, #1
 801e4d8:	701a      	strb	r2, [r3, #0]
 801e4da:	230e      	movs	r3, #14
 801e4dc:	18fb      	adds	r3, r7, r3
 801e4de:	781b      	ldrb	r3, [r3, #0]
 801e4e0:	2b03      	cmp	r3, #3
 801e4e2:	d9e7      	bls.n	801e4b4 <BSP_GUI_LoadDataFromFlash+0x1b8>
    _status = GUI_OK;
 801e4e4:	230f      	movs	r3, #15
 801e4e6:	18fb      	adds	r3, r7, r3
 801e4e8:	2200      	movs	r2, #0
 801e4ea:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
  /* Load PORT0_PDO_ListSNK */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 801e4ec:	4b47      	ldr	r3, [pc, #284]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e4ee:	681a      	ldr	r2, [r3, #0]
 801e4f0:	23c0      	movs	r3, #192	; 0xc0
 801e4f2:	049b      	lsls	r3, r3, #18
 801e4f4:	4013      	ands	r3, r2
 801e4f6:	d00e      	beq.n	801e516 <BSP_GUI_LoadDataFromFlash+0x21a>
 801e4f8:	4b44      	ldr	r3, [pc, #272]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e4fa:	681a      	ldr	r2, [r3, #0]
 801e4fc:	23c0      	movs	r3, #192	; 0xc0
 801e4fe:	049b      	lsls	r3, r3, #18
 801e500:	401a      	ands	r2, r3
 801e502:	2380      	movs	r3, #128	; 0x80
 801e504:	045b      	lsls	r3, r3, #17
 801e506:	429a      	cmp	r2, r3
 801e508:	d110      	bne.n	801e52c <BSP_GUI_LoadDataFromFlash+0x230>
 801e50a:	4b41      	ldr	r3, [pc, #260]	; (801e610 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e50c:	681a      	ldr	r2, [r3, #0]
 801e50e:	2380      	movs	r3, #128	; 0x80
 801e510:	039b      	lsls	r3, r3, #14
 801e512:	4013      	ands	r3, r2
 801e514:	d10a      	bne.n	801e52c <BSP_GUI_LoadDataFromFlash+0x230>
 801e516:	4b3f      	ldr	r3, [pc, #252]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	029b      	lsls	r3, r3, #10
 801e51c:	4a3e      	ldr	r2, [pc, #248]	; (801e618 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e51e:	4013      	ands	r3, r2
 801e520:	0adb      	lsrs	r3, r3, #11
 801e522:	031b      	lsls	r3, r3, #12
 801e524:	4a45      	ldr	r2, [pc, #276]	; (801e63c <BSP_GUI_LoadDataFromFlash+0x340>)
 801e526:	4694      	mov	ip, r2
 801e528:	4463      	add	r3, ip
 801e52a:	e00a      	b.n	801e542 <BSP_GUI_LoadDataFromFlash+0x246>
 801e52c:	4b39      	ldr	r3, [pc, #228]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	029b      	lsls	r3, r3, #10
 801e532:	085b      	lsrs	r3, r3, #1
 801e534:	4a3a      	ldr	r2, [pc, #232]	; (801e620 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e536:	4013      	ands	r3, r2
 801e538:	0adb      	lsrs	r3, r3, #11
 801e53a:	031b      	lsls	r3, r3, #12
 801e53c:	4a3f      	ldr	r2, [pc, #252]	; (801e63c <BSP_GUI_LoadDataFromFlash+0x340>)
 801e53e:	4694      	mov	ip, r2
 801e540:	4463      	add	r3, ip
 801e542:	4a3f      	ldr	r2, [pc, #252]	; (801e640 <BSP_GUI_LoadDataFromFlash+0x344>)
 801e544:	0011      	movs	r1, r2
 801e546:	0018      	movs	r0, r3
 801e548:	f000 fc52 	bl	801edf0 <LoadPDOFromFlash>
 801e54c:	0003      	movs	r3, r0
 801e54e:	0019      	movs	r1, r3
 801e550:	220f      	movs	r2, #15
 801e552:	18bb      	adds	r3, r7, r2
 801e554:	18ba      	adds	r2, r7, r2
 801e556:	7812      	ldrb	r2, [r2, #0]
 801e558:	430a      	orrs	r2, r1
 801e55a:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t *)DPM_Settings,
 801e55c:	4b2b      	ldr	r3, [pc, #172]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e55e:	681a      	ldr	r2, [r3, #0]
 801e560:	23c0      	movs	r3, #192	; 0xc0
 801e562:	049b      	lsls	r3, r3, #18
 801e564:	4013      	ands	r3, r2
 801e566:	d00e      	beq.n	801e586 <BSP_GUI_LoadDataFromFlash+0x28a>
 801e568:	4b28      	ldr	r3, [pc, #160]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e56a:	681a      	ldr	r2, [r3, #0]
 801e56c:	23c0      	movs	r3, #192	; 0xc0
 801e56e:	049b      	lsls	r3, r3, #18
 801e570:	401a      	ands	r2, r3
 801e572:	2380      	movs	r3, #128	; 0x80
 801e574:	045b      	lsls	r3, r3, #17
 801e576:	429a      	cmp	r2, r3
 801e578:	d110      	bne.n	801e59c <BSP_GUI_LoadDataFromFlash+0x2a0>
 801e57a:	4b25      	ldr	r3, [pc, #148]	; (801e610 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e57c:	681a      	ldr	r2, [r3, #0]
 801e57e:	2380      	movs	r3, #128	; 0x80
 801e580:	039b      	lsls	r3, r3, #14
 801e582:	4013      	ands	r3, r2
 801e584:	d10a      	bne.n	801e59c <BSP_GUI_LoadDataFromFlash+0x2a0>
 801e586:	4b23      	ldr	r3, [pc, #140]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	029b      	lsls	r3, r3, #10
 801e58c:	4a22      	ldr	r2, [pc, #136]	; (801e618 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e58e:	4013      	ands	r3, r2
 801e590:	0adb      	lsrs	r3, r3, #11
 801e592:	031b      	lsls	r3, r3, #12
 801e594:	4a2b      	ldr	r2, [pc, #172]	; (801e644 <BSP_GUI_LoadDataFromFlash+0x348>)
 801e596:	4694      	mov	ip, r2
 801e598:	4463      	add	r3, ip
 801e59a:	e00a      	b.n	801e5b2 <BSP_GUI_LoadDataFromFlash+0x2b6>
 801e59c:	4b1d      	ldr	r3, [pc, #116]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e59e:	681b      	ldr	r3, [r3, #0]
 801e5a0:	029b      	lsls	r3, r3, #10
 801e5a2:	085b      	lsrs	r3, r3, #1
 801e5a4:	4a1e      	ldr	r2, [pc, #120]	; (801e620 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e5a6:	4013      	ands	r3, r2
 801e5a8:	0adb      	lsrs	r3, r3, #11
 801e5aa:	031b      	lsls	r3, r3, #12
 801e5ac:	4a25      	ldr	r2, [pc, #148]	; (801e644 <BSP_GUI_LoadDataFromFlash+0x348>)
 801e5ae:	4694      	mov	ip, r2
 801e5b0:	4463      	add	r3, ip
 801e5b2:	4925      	ldr	r1, [pc, #148]	; (801e648 <BSP_GUI_LoadDataFromFlash+0x34c>)
 801e5b4:	220c      	movs	r2, #12
 801e5b6:	0018      	movs	r0, r3
 801e5b8:	f000 fc42 	bl	801ee40 <LoadSettingsFromFlash>
 801e5bc:	0003      	movs	r3, r0
 801e5be:	0019      	movs	r1, r3
 801e5c0:	220f      	movs	r2, #15
 801e5c2:	18bb      	adds	r3, r7, r2
 801e5c4:	18ba      	adds	r2, r7, r2
 801e5c6:	7812      	ldrb	r2, [r2, #0]
 801e5c8:	430a      	orrs	r2, r1
 801e5ca:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Load DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t *)DPM_ID_Settings,
 801e5cc:	4b0f      	ldr	r3, [pc, #60]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e5ce:	681a      	ldr	r2, [r3, #0]
 801e5d0:	23c0      	movs	r3, #192	; 0xc0
 801e5d2:	049b      	lsls	r3, r3, #18
 801e5d4:	4013      	ands	r3, r2
 801e5d6:	d00e      	beq.n	801e5f6 <BSP_GUI_LoadDataFromFlash+0x2fa>
 801e5d8:	4b0c      	ldr	r3, [pc, #48]	; (801e60c <BSP_GUI_LoadDataFromFlash+0x310>)
 801e5da:	681a      	ldr	r2, [r3, #0]
 801e5dc:	23c0      	movs	r3, #192	; 0xc0
 801e5de:	049b      	lsls	r3, r3, #18
 801e5e0:	401a      	ands	r2, r3
 801e5e2:	2380      	movs	r3, #128	; 0x80
 801e5e4:	045b      	lsls	r3, r3, #17
 801e5e6:	429a      	cmp	r2, r3
 801e5e8:	d132      	bne.n	801e650 <BSP_GUI_LoadDataFromFlash+0x354>
 801e5ea:	4b09      	ldr	r3, [pc, #36]	; (801e610 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e5ec:	681a      	ldr	r2, [r3, #0]
 801e5ee:	2380      	movs	r3, #128	; 0x80
 801e5f0:	039b      	lsls	r3, r3, #14
 801e5f2:	4013      	ands	r3, r2
 801e5f4:	d12c      	bne.n	801e650 <BSP_GUI_LoadDataFromFlash+0x354>
 801e5f6:	4b07      	ldr	r3, [pc, #28]	; (801e614 <BSP_GUI_LoadDataFromFlash+0x318>)
 801e5f8:	681b      	ldr	r3, [r3, #0]
 801e5fa:	029b      	lsls	r3, r3, #10
 801e5fc:	4a06      	ldr	r2, [pc, #24]	; (801e618 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e5fe:	4013      	ands	r3, r2
 801e600:	0adb      	lsrs	r3, r3, #11
 801e602:	031b      	lsls	r3, r3, #12
 801e604:	4a11      	ldr	r2, [pc, #68]	; (801e64c <BSP_GUI_LoadDataFromFlash+0x350>)
 801e606:	4694      	mov	ip, r2
 801e608:	4463      	add	r3, ip
 801e60a:	e02c      	b.n	801e666 <BSP_GUI_LoadDataFromFlash+0x36a>
 801e60c:	1fff7500 	.word	0x1fff7500
 801e610:	40022020 	.word	0x40022020
 801e614:	1fff75e0 	.word	0x1fff75e0
 801e618:	000ffc00 	.word	0x000ffc00
 801e61c:	07fff800 	.word	0x07fff800
 801e620:	0007fe00 	.word	0x0007fe00
 801e624:	07fff924 	.word	0x07fff924
 801e628:	deadf00d 	.word	0xdeadf00d
 801e62c:	deadbabe 	.word	0xdeadbabe
 801e630:	08024ef4 	.word	0x08024ef4
 801e634:	07fff808 	.word	0x07fff808
 801e638:	2000017c 	.word	0x2000017c
 801e63c:	07fff830 	.word	0x07fff830
 801e640:	20000180 	.word	0x20000180
 801e644:	07fff890 	.word	0x07fff890
 801e648:	200000f4 	.word	0x200000f4
 801e64c:	07fff91c 	.word	0x07fff91c
 801e650:	4b34      	ldr	r3, [pc, #208]	; (801e724 <BSP_GUI_LoadDataFromFlash+0x428>)
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	029b      	lsls	r3, r3, #10
 801e656:	085b      	lsrs	r3, r3, #1
 801e658:	4a33      	ldr	r2, [pc, #204]	; (801e728 <BSP_GUI_LoadDataFromFlash+0x42c>)
 801e65a:	4013      	ands	r3, r2
 801e65c:	0adb      	lsrs	r3, r3, #11
 801e65e:	031b      	lsls	r3, r3, #12
 801e660:	4a32      	ldr	r2, [pc, #200]	; (801e72c <BSP_GUI_LoadDataFromFlash+0x430>)
 801e662:	4694      	mov	ip, r2
 801e664:	4463      	add	r3, ip
 801e666:	4932      	ldr	r1, [pc, #200]	; (801e730 <BSP_GUI_LoadDataFromFlash+0x434>)
 801e668:	2208      	movs	r2, #8
 801e66a:	0018      	movs	r0, r3
 801e66c:	f000 fbe8 	bl	801ee40 <LoadSettingsFromFlash>
 801e670:	0003      	movs	r3, r0
 801e672:	0019      	movs	r1, r3
 801e674:	220f      	movs	r2, #15
 801e676:	18bb      	adds	r3, r7, r2
 801e678:	18ba      	adds	r2, r7, r2
 801e67a:	7812      	ldrb	r2, [r2, #0]
 801e67c:	430a      	orrs	r2, r1
 801e67e:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_IdSettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t *)DPM_USER_Settings,
 801e680:	4b2c      	ldr	r3, [pc, #176]	; (801e734 <BSP_GUI_LoadDataFromFlash+0x438>)
 801e682:	681a      	ldr	r2, [r3, #0]
 801e684:	23c0      	movs	r3, #192	; 0xc0
 801e686:	049b      	lsls	r3, r3, #18
 801e688:	4013      	ands	r3, r2
 801e68a:	d00e      	beq.n	801e6aa <BSP_GUI_LoadDataFromFlash+0x3ae>
 801e68c:	4b29      	ldr	r3, [pc, #164]	; (801e734 <BSP_GUI_LoadDataFromFlash+0x438>)
 801e68e:	681a      	ldr	r2, [r3, #0]
 801e690:	23c0      	movs	r3, #192	; 0xc0
 801e692:	049b      	lsls	r3, r3, #18
 801e694:	401a      	ands	r2, r3
 801e696:	2380      	movs	r3, #128	; 0x80
 801e698:	045b      	lsls	r3, r3, #17
 801e69a:	429a      	cmp	r2, r3
 801e69c:	d110      	bne.n	801e6c0 <BSP_GUI_LoadDataFromFlash+0x3c4>
 801e69e:	4b26      	ldr	r3, [pc, #152]	; (801e738 <BSP_GUI_LoadDataFromFlash+0x43c>)
 801e6a0:	681a      	ldr	r2, [r3, #0]
 801e6a2:	2380      	movs	r3, #128	; 0x80
 801e6a4:	039b      	lsls	r3, r3, #14
 801e6a6:	4013      	ands	r3, r2
 801e6a8:	d10a      	bne.n	801e6c0 <BSP_GUI_LoadDataFromFlash+0x3c4>
 801e6aa:	4b1e      	ldr	r3, [pc, #120]	; (801e724 <BSP_GUI_LoadDataFromFlash+0x428>)
 801e6ac:	681b      	ldr	r3, [r3, #0]
 801e6ae:	029b      	lsls	r3, r3, #10
 801e6b0:	4a22      	ldr	r2, [pc, #136]	; (801e73c <BSP_GUI_LoadDataFromFlash+0x440>)
 801e6b2:	4013      	ands	r3, r2
 801e6b4:	0adb      	lsrs	r3, r3, #11
 801e6b6:	031b      	lsls	r3, r3, #12
 801e6b8:	4a21      	ldr	r2, [pc, #132]	; (801e740 <BSP_GUI_LoadDataFromFlash+0x444>)
 801e6ba:	4694      	mov	ip, r2
 801e6bc:	4463      	add	r3, ip
 801e6be:	e00a      	b.n	801e6d6 <BSP_GUI_LoadDataFromFlash+0x3da>
 801e6c0:	4b18      	ldr	r3, [pc, #96]	; (801e724 <BSP_GUI_LoadDataFromFlash+0x428>)
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	029b      	lsls	r3, r3, #10
 801e6c6:	085b      	lsrs	r3, r3, #1
 801e6c8:	4a17      	ldr	r2, [pc, #92]	; (801e728 <BSP_GUI_LoadDataFromFlash+0x42c>)
 801e6ca:	4013      	ands	r3, r2
 801e6cc:	0adb      	lsrs	r3, r3, #11
 801e6ce:	031b      	lsls	r3, r3, #12
 801e6d0:	4a1b      	ldr	r2, [pc, #108]	; (801e740 <BSP_GUI_LoadDataFromFlash+0x444>)
 801e6d2:	4694      	mov	ip, r2
 801e6d4:	4463      	add	r3, ip
 801e6d6:	491b      	ldr	r1, [pc, #108]	; (801e744 <BSP_GUI_LoadDataFromFlash+0x448>)
 801e6d8:	2274      	movs	r2, #116	; 0x74
 801e6da:	0018      	movs	r0, r3
 801e6dc:	f000 fbb0 	bl	801ee40 <LoadSettingsFromFlash>
 801e6e0:	0003      	movs	r3, r0
 801e6e2:	0019      	movs	r1, r3
 801e6e4:	220f      	movs	r2, #15
 801e6e6:	18bb      	adds	r3, r7, r2
 801e6e8:	18ba      	adds	r2, r7, r2
 801e6ea:	7812      	ldrb	r2, [r2, #0]
 801e6ec:	430a      	orrs	r2, r1
 801e6ee:	701a      	strb	r2, [r3, #0]
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_1].VID;
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_1].PID;
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _SRC_CAPA_EXT && (_SRC || _DRP) */
#if defined(_SNK)||defined(_DRP)
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.XID = DPM_ID_Settings[USBPD_PORT_0].XID;
 801e6f0:	4b0f      	ldr	r3, [pc, #60]	; (801e730 <BSP_GUI_LoadDataFromFlash+0x434>)
 801e6f2:	681a      	ldr	r2, [r3, #0]
 801e6f4:	4b13      	ldr	r3, [pc, #76]	; (801e744 <BSP_GUI_LoadDataFromFlash+0x448>)
 801e6f6:	655a      	str	r2, [r3, #84]	; 0x54
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_0].VID;
 801e6f8:	4b0d      	ldr	r3, [pc, #52]	; (801e730 <BSP_GUI_LoadDataFromFlash+0x434>)
 801e6fa:	8899      	ldrh	r1, [r3, #4]
 801e6fc:	4b11      	ldr	r3, [pc, #68]	; (801e744 <BSP_GUI_LoadDataFromFlash+0x448>)
 801e6fe:	2250      	movs	r2, #80	; 0x50
 801e700:	5299      	strh	r1, [r3, r2]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_0].PID;
 801e702:	4b0b      	ldr	r3, [pc, #44]	; (801e730 <BSP_GUI_LoadDataFromFlash+0x434>)
 801e704:	88d9      	ldrh	r1, [r3, #6]
 801e706:	4b0f      	ldr	r3, [pc, #60]	; (801e744 <BSP_GUI_LoadDataFromFlash+0x448>)
 801e708:	2252      	movs	r2, #82	; 0x52
 801e70a:	5299      	strh	r1, [r3, r2]
 801e70c:	e002      	b.n	801e714 <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 801e70e:	46c0      	nop			; (mov r8, r8)
 801e710:	e000      	b.n	801e714 <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 801e712:	46c0      	nop			; (mov r8, r8)
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 801e714:	230f      	movs	r3, #15
 801e716:	18fb      	adds	r3, r7, r3
 801e718:	781b      	ldrb	r3, [r3, #0]
}
 801e71a:	0018      	movs	r0, r3
 801e71c:	46bd      	mov	sp, r7
 801e71e:	b004      	add	sp, #16
 801e720:	bd80      	pop	{r7, pc}
 801e722:	46c0      	nop			; (mov r8, r8)
 801e724:	1fff75e0 	.word	0x1fff75e0
 801e728:	0007fe00 	.word	0x0007fe00
 801e72c:	07fff91c 	.word	0x07fff91c
 801e730:	20000100 	.word	0x20000100
 801e734:	1fff7500 	.word	0x1fff7500
 801e738:	40022020 	.word	0x40022020
 801e73c:	000ffc00 	.word	0x000ffc00
 801e740:	07fff89c 	.word	0x07fff89c
 801e744:	20000108 	.word	0x20000108

0801e748 <BSP_GUI_SaveDataInFlash>:

  return status;
}

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 801e748:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e74a:	b099      	sub	sp, #100	; 0x64
 801e74c:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_OK;
 801e74e:	2327      	movs	r3, #39	; 0x27
 801e750:	2638      	movs	r6, #56	; 0x38
 801e752:	199b      	adds	r3, r3, r6
 801e754:	19da      	adds	r2, r3, r7
 801e756:	2300      	movs	r3, #0
 801e758:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801e75a:	b672      	cpsid	i
}
 801e75c:	46c0      	nop			; (mov r8, r8)

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  (void)HAL_FLASH_Unlock();
 801e75e:	f7ed f99f 	bl	800baa0 <HAL_FLASH_Unlock>
  erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
  erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
  erase_init.Sector        = FLASH_SECTOR_ID;
  erase_init.NbSectors     = 1;
#else
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 801e762:	2308      	movs	r3, #8
 801e764:	199b      	adds	r3, r3, r6
 801e766:	19da      	adds	r2, r3, r7
 801e768:	2302      	movs	r3, #2
 801e76a:	6013      	str	r3, [r2, #0]

#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress  = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 801e76c:	4bbf      	ldr	r3, [pc, #764]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801e76e:	681a      	ldr	r2, [r3, #0]
 801e770:	23c0      	movs	r3, #192	; 0xc0
 801e772:	049b      	lsls	r3, r3, #18
 801e774:	4013      	ands	r3, r2
 801e776:	d00e      	beq.n	801e796 <BSP_GUI_SaveDataInFlash+0x4e>
 801e778:	4bbc      	ldr	r3, [pc, #752]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801e77a:	681a      	ldr	r2, [r3, #0]
 801e77c:	23c0      	movs	r3, #192	; 0xc0
 801e77e:	049b      	lsls	r3, r3, #18
 801e780:	401a      	ands	r2, r3
 801e782:	2380      	movs	r3, #128	; 0x80
 801e784:	045b      	lsls	r3, r3, #17
 801e786:	429a      	cmp	r2, r3
 801e788:	d10e      	bne.n	801e7a8 <BSP_GUI_SaveDataInFlash+0x60>
 801e78a:	4bb9      	ldr	r3, [pc, #740]	; (801ea70 <BSP_GUI_SaveDataInFlash+0x328>)
 801e78c:	681a      	ldr	r2, [r3, #0]
 801e78e:	2380      	movs	r3, #128	; 0x80
 801e790:	039b      	lsls	r3, r3, #14
 801e792:	4013      	ands	r3, r2
 801e794:	d108      	bne.n	801e7a8 <BSP_GUI_SaveDataInFlash+0x60>
 801e796:	4bb7      	ldr	r3, [pc, #732]	; (801ea74 <BSP_GUI_SaveDataInFlash+0x32c>)
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	029a      	lsls	r2, r3, #10
 801e79c:	4bb6      	ldr	r3, [pc, #728]	; (801ea78 <BSP_GUI_SaveDataInFlash+0x330>)
 801e79e:	4013      	ands	r3, r2
 801e7a0:	0adb      	lsrs	r3, r3, #11
 801e7a2:	005b      	lsls	r3, r3, #1
 801e7a4:	1e5a      	subs	r2, r3, #1
 801e7a6:	e008      	b.n	801e7ba <BSP_GUI_SaveDataInFlash+0x72>
 801e7a8:	4bb2      	ldr	r3, [pc, #712]	; (801ea74 <BSP_GUI_SaveDataInFlash+0x32c>)
 801e7aa:	681b      	ldr	r3, [r3, #0]
 801e7ac:	029b      	lsls	r3, r3, #10
 801e7ae:	085a      	lsrs	r2, r3, #1
 801e7b0:	4bb2      	ldr	r3, [pc, #712]	; (801ea7c <BSP_GUI_SaveDataInFlash+0x334>)
 801e7b2:	4013      	ands	r3, r2
 801e7b4:	0adb      	lsrs	r3, r3, #11
 801e7b6:	005b      	lsls	r3, r3, #1
 801e7b8:	1e5a      	subs	r2, r3, #1
 801e7ba:	2108      	movs	r1, #8
 801e7bc:	2038      	movs	r0, #56	; 0x38
 801e7be:	180b      	adds	r3, r1, r0
 801e7c0:	19db      	adds	r3, r3, r7
 801e7c2:	609a      	str	r2, [r3, #8]
#endif /* STM32F072xB || STM32F051x8 */
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_2)
  erase_init.Banks      = FLASH_BANK_2;
 801e7c4:	180b      	adds	r3, r1, r0
 801e7c6:	19da      	adds	r2, r3, r7
 801e7c8:	2380      	movs	r3, #128	; 0x80
 801e7ca:	021b      	lsls	r3, r3, #8
 801e7cc:	6053      	str	r3, [r2, #4]
#elif defined(FLASH_BANK_1)
  erase_init.Banks      = FLASH_BANK_1;
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 801e7ce:	180b      	adds	r3, r1, r0
 801e7d0:	19da      	adds	r2, r3, r7
 801e7d2:	2301      	movs	r3, #1
 801e7d4:	60d3      	str	r3, [r2, #12]

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if (FLASH->SR != 0x00)
 801e7d6:	4baa      	ldr	r3, [pc, #680]	; (801ea80 <BSP_GUI_SaveDataInFlash+0x338>)
 801e7d8:	691b      	ldr	r3, [r3, #16]
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d003      	beq.n	801e7e6 <BSP_GUI_SaveDataInFlash+0x9e>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 801e7de:	4aa8      	ldr	r2, [pc, #672]	; (801ea80 <BSP_GUI_SaveDataInFlash+0x338>)
 801e7e0:	2380      	movs	r3, #128	; 0x80
 801e7e2:	021b      	lsls	r3, r3, #8
 801e7e4:	6113      	str	r3, [r2, #16]
  }
#endif /* FLASH_SR_OPTVERR */
#endif /* FLASH_CR_SER */

  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &page_error))
 801e7e6:	233c      	movs	r3, #60	; 0x3c
 801e7e8:	18fa      	adds	r2, r7, r3
 801e7ea:	2308      	movs	r3, #8
 801e7ec:	2638      	movs	r6, #56	; 0x38
 801e7ee:	199b      	adds	r3, r3, r6
 801e7f0:	19db      	adds	r3, r3, r7
 801e7f2:	0011      	movs	r1, r2
 801e7f4:	0018      	movs	r0, r3
 801e7f6:	f7ed fa07 	bl	800bc08 <HAL_FLASHEx_Erase>
 801e7fa:	1e03      	subs	r3, r0, #0
 801e7fc:	d004      	beq.n	801e808 <BSP_GUI_SaveDataInFlash+0xc0>
  {
    status = GUI_ERASE_ERROR;
 801e7fe:	2327      	movs	r3, #39	; 0x27
 801e800:	199b      	adds	r3, r3, r6
 801e802:	19da      	adds	r2, r3, r7
 801e804:	2301      	movs	r3, #1
 801e806:	7013      	strb	r3, [r2, #0]
  }

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFFU == page_error) && (GUI_OK == status))
 801e808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e80a:	3301      	adds	r3, #1
 801e80c:	d000      	beq.n	801e810 <BSP_GUI_SaveDataInFlash+0xc8>
 801e80e:	e1d9      	b.n	801ebc4 <BSP_GUI_SaveDataInFlash+0x47c>
 801e810:	2327      	movs	r3, #39	; 0x27
 801e812:	2238      	movs	r2, #56	; 0x38
 801e814:	189b      	adds	r3, r3, r2
 801e816:	19db      	adds	r3, r3, r7
 801e818:	781b      	ldrb	r3, [r3, #0]
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	d000      	beq.n	801e820 <BSP_GUI_SaveDataInFlash+0xd8>
 801e81e:	e1d1      	b.n	801ebc4 <BSP_GUI_SaveDataInFlash+0x47c>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber))
 801e820:	4b92      	ldr	r3, [pc, #584]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801e822:	681a      	ldr	r2, [r3, #0]
 801e824:	23c0      	movs	r3, #192	; 0xc0
 801e826:	049b      	lsls	r3, r3, #18
 801e828:	4013      	ands	r3, r2
 801e82a:	d00e      	beq.n	801e84a <BSP_GUI_SaveDataInFlash+0x102>
 801e82c:	4b8f      	ldr	r3, [pc, #572]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801e82e:	681a      	ldr	r2, [r3, #0]
 801e830:	23c0      	movs	r3, #192	; 0xc0
 801e832:	049b      	lsls	r3, r3, #18
 801e834:	401a      	ands	r2, r3
 801e836:	2380      	movs	r3, #128	; 0x80
 801e838:	045b      	lsls	r3, r3, #17
 801e83a:	429a      	cmp	r2, r3
 801e83c:	d10f      	bne.n	801e85e <BSP_GUI_SaveDataInFlash+0x116>
 801e83e:	4b8c      	ldr	r3, [pc, #560]	; (801ea70 <BSP_GUI_SaveDataInFlash+0x328>)
 801e840:	681a      	ldr	r2, [r3, #0]
 801e842:	2380      	movs	r3, #128	; 0x80
 801e844:	039b      	lsls	r3, r3, #14
 801e846:	4013      	ands	r3, r2
 801e848:	d109      	bne.n	801e85e <BSP_GUI_SaveDataInFlash+0x116>
 801e84a:	4b8a      	ldr	r3, [pc, #552]	; (801ea74 <BSP_GUI_SaveDataInFlash+0x32c>)
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	029a      	lsls	r2, r3, #10
 801e850:	4b89      	ldr	r3, [pc, #548]	; (801ea78 <BSP_GUI_SaveDataInFlash+0x330>)
 801e852:	4013      	ands	r3, r2
 801e854:	0adb      	lsrs	r3, r3, #11
 801e856:	031b      	lsls	r3, r3, #12
 801e858:	4a8a      	ldr	r2, [pc, #552]	; (801ea84 <BSP_GUI_SaveDataInFlash+0x33c>)
 801e85a:	1899      	adds	r1, r3, r2
 801e85c:	e009      	b.n	801e872 <BSP_GUI_SaveDataInFlash+0x12a>
 801e85e:	4b85      	ldr	r3, [pc, #532]	; (801ea74 <BSP_GUI_SaveDataInFlash+0x32c>)
 801e860:	681b      	ldr	r3, [r3, #0]
 801e862:	029b      	lsls	r3, r3, #10
 801e864:	085a      	lsrs	r2, r3, #1
 801e866:	4b85      	ldr	r3, [pc, #532]	; (801ea7c <BSP_GUI_SaveDataInFlash+0x334>)
 801e868:	4013      	ands	r3, r2
 801e86a:	0adb      	lsrs	r3, r3, #11
 801e86c:	031b      	lsls	r3, r3, #12
 801e86e:	4a85      	ldr	r2, [pc, #532]	; (801ea84 <BSP_GUI_SaveDataInFlash+0x33c>)
 801e870:	1899      	adds	r1, r3, r2
 801e872:	4a85      	ldr	r2, [pc, #532]	; (801ea88 <BSP_GUI_SaveDataInFlash+0x340>)
 801e874:	4b85      	ldr	r3, [pc, #532]	; (801ea8c <BSP_GUI_SaveDataInFlash+0x344>)
 801e876:	2001      	movs	r0, #1
 801e878:	f7ed f8c4 	bl	800ba04 <HAL_FLASH_Program>
 801e87c:	1e03      	subs	r3, r0, #0
 801e87e:	d005      	beq.n	801e88c <BSP_GUI_SaveDataInFlash+0x144>
    {
      status = GUI_WRITE_ERROR;
 801e880:	2327      	movs	r3, #39	; 0x27
 801e882:	2238      	movs	r2, #56	; 0x38
 801e884:	189b      	adds	r3, r3, r2
 801e886:	19da      	adds	r2, r3, r7
 801e888:	2302      	movs	r3, #2
 801e88a:	7013      	strb	r3, [r2, #0]
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 801e88c:	2327      	movs	r3, #39	; 0x27
 801e88e:	2238      	movs	r2, #56	; 0x38
 801e890:	189b      	adds	r3, r3, r2
 801e892:	19db      	adds	r3, r3, r7
 801e894:	781b      	ldrb	r3, [r3, #0]
 801e896:	2b00      	cmp	r3, #0
 801e898:	d000      	beq.n	801e89c <BSP_GUI_SaveDataInFlash+0x154>
 801e89a:	e082      	b.n	801e9a2 <BSP_GUI_SaveDataInFlash+0x25a>
    {
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 801e89c:	2200      	movs	r2, #0
 801e89e:	2300      	movs	r3, #0
 801e8a0:	653a      	str	r2, [r7, #80]	; 0x50
 801e8a2:	657b      	str	r3, [r7, #84]	; 0x54
      value |= USBPD_NbPDO[0];
 801e8a4:	4b7a      	ldr	r3, [pc, #488]	; (801ea90 <BSP_GUI_SaveDataInFlash+0x348>)
 801e8a6:	781b      	ldrb	r3, [r3, #0]
 801e8a8:	633b      	str	r3, [r7, #48]	; 0x30
 801e8aa:	2300      	movs	r3, #0
 801e8ac:	637b      	str	r3, [r7, #52]	; 0x34
 801e8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e8b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e8b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e8b4:	0008      	movs	r0, r1
 801e8b6:	4318      	orrs	r0, r3
 801e8b8:	0004      	movs	r4, r0
 801e8ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e8bc:	431a      	orrs	r2, r3
 801e8be:	0015      	movs	r5, r2
 801e8c0:	653c      	str	r4, [r7, #80]	; 0x50
 801e8c2:	657d      	str	r5, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[1] << 8);
 801e8c4:	4b72      	ldr	r3, [pc, #456]	; (801ea90 <BSP_GUI_SaveDataInFlash+0x348>)
 801e8c6:	785b      	ldrb	r3, [r3, #1]
 801e8c8:	021b      	lsls	r3, r3, #8
 801e8ca:	62bb      	str	r3, [r7, #40]	; 0x28
 801e8cc:	17db      	asrs	r3, r3, #31
 801e8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e8d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e8d6:	0008      	movs	r0, r1
 801e8d8:	4318      	orrs	r0, r3
 801e8da:	6138      	str	r0, [r7, #16]
 801e8dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e8de:	431a      	orrs	r2, r3
 801e8e0:	617a      	str	r2, [r7, #20]
 801e8e2:	693b      	ldr	r3, [r7, #16]
 801e8e4:	697c      	ldr	r4, [r7, #20]
 801e8e6:	653b      	str	r3, [r7, #80]	; 0x50
 801e8e8:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[2] << 16);
 801e8ea:	4b69      	ldr	r3, [pc, #420]	; (801ea90 <BSP_GUI_SaveDataInFlash+0x348>)
 801e8ec:	789b      	ldrb	r3, [r3, #2]
 801e8ee:	041b      	lsls	r3, r3, #16
 801e8f0:	623b      	str	r3, [r7, #32]
 801e8f2:	17db      	asrs	r3, r3, #31
 801e8f4:	627b      	str	r3, [r7, #36]	; 0x24
 801e8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e8f8:	6a39      	ldr	r1, [r7, #32]
 801e8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8fc:	0008      	movs	r0, r1
 801e8fe:	4318      	orrs	r0, r3
 801e900:	60b8      	str	r0, [r7, #8]
 801e902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e904:	431a      	orrs	r2, r3
 801e906:	60fa      	str	r2, [r7, #12]
 801e908:	68bb      	ldr	r3, [r7, #8]
 801e90a:	68fc      	ldr	r4, [r7, #12]
 801e90c:	653b      	str	r3, [r7, #80]	; 0x50
 801e90e:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[3] << 24);
 801e910:	4b5f      	ldr	r3, [pc, #380]	; (801ea90 <BSP_GUI_SaveDataInFlash+0x348>)
 801e912:	78db      	ldrb	r3, [r3, #3]
 801e914:	061b      	lsls	r3, r3, #24
 801e916:	61bb      	str	r3, [r7, #24]
 801e918:	17db      	asrs	r3, r3, #31
 801e91a:	61fb      	str	r3, [r7, #28]
 801e91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e91e:	69b9      	ldr	r1, [r7, #24]
 801e920:	69fa      	ldr	r2, [r7, #28]
 801e922:	0008      	movs	r0, r1
 801e924:	4318      	orrs	r0, r3
 801e926:	6038      	str	r0, [r7, #0]
 801e928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e92a:	431a      	orrs	r2, r3
 801e92c:	607a      	str	r2, [r7, #4]
 801e92e:	683b      	ldr	r3, [r7, #0]
 801e930:	687c      	ldr	r4, [r7, #4]
 801e932:	653b      	str	r3, [r7, #80]	; 0x50
 801e934:	657c      	str	r4, [r7, #84]	; 0x54
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value))
 801e936:	4b4d      	ldr	r3, [pc, #308]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801e938:	681a      	ldr	r2, [r3, #0]
 801e93a:	23c0      	movs	r3, #192	; 0xc0
 801e93c:	049b      	lsls	r3, r3, #18
 801e93e:	4013      	ands	r3, r2
 801e940:	d00e      	beq.n	801e960 <BSP_GUI_SaveDataInFlash+0x218>
 801e942:	4b4a      	ldr	r3, [pc, #296]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801e944:	681a      	ldr	r2, [r3, #0]
 801e946:	23c0      	movs	r3, #192	; 0xc0
 801e948:	049b      	lsls	r3, r3, #18
 801e94a:	401a      	ands	r2, r3
 801e94c:	2380      	movs	r3, #128	; 0x80
 801e94e:	045b      	lsls	r3, r3, #17
 801e950:	429a      	cmp	r2, r3
 801e952:	d10f      	bne.n	801e974 <BSP_GUI_SaveDataInFlash+0x22c>
 801e954:	4b46      	ldr	r3, [pc, #280]	; (801ea70 <BSP_GUI_SaveDataInFlash+0x328>)
 801e956:	681a      	ldr	r2, [r3, #0]
 801e958:	2380      	movs	r3, #128	; 0x80
 801e95a:	039b      	lsls	r3, r3, #14
 801e95c:	4013      	ands	r3, r2
 801e95e:	d109      	bne.n	801e974 <BSP_GUI_SaveDataInFlash+0x22c>
 801e960:	4b44      	ldr	r3, [pc, #272]	; (801ea74 <BSP_GUI_SaveDataInFlash+0x32c>)
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	029b      	lsls	r3, r3, #10
 801e966:	4a44      	ldr	r2, [pc, #272]	; (801ea78 <BSP_GUI_SaveDataInFlash+0x330>)
 801e968:	4013      	ands	r3, r2
 801e96a:	0adb      	lsrs	r3, r3, #11
 801e96c:	031b      	lsls	r3, r3, #12
 801e96e:	4a49      	ldr	r2, [pc, #292]	; (801ea94 <BSP_GUI_SaveDataInFlash+0x34c>)
 801e970:	1899      	adds	r1, r3, r2
 801e972:	e009      	b.n	801e988 <BSP_GUI_SaveDataInFlash+0x240>
 801e974:	4b3f      	ldr	r3, [pc, #252]	; (801ea74 <BSP_GUI_SaveDataInFlash+0x32c>)
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	029b      	lsls	r3, r3, #10
 801e97a:	085b      	lsrs	r3, r3, #1
 801e97c:	4a3f      	ldr	r2, [pc, #252]	; (801ea7c <BSP_GUI_SaveDataInFlash+0x334>)
 801e97e:	4013      	ands	r3, r2
 801e980:	0adb      	lsrs	r3, r3, #11
 801e982:	031b      	lsls	r3, r3, #12
 801e984:	4a43      	ldr	r2, [pc, #268]	; (801ea94 <BSP_GUI_SaveDataInFlash+0x34c>)
 801e986:	1899      	adds	r1, r3, r2
 801e988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e98c:	2001      	movs	r0, #1
 801e98e:	f7ed f839 	bl	800ba04 <HAL_FLASH_Program>
 801e992:	1e03      	subs	r3, r0, #0
 801e994:	d005      	beq.n	801e9a2 <BSP_GUI_SaveDataInFlash+0x25a>
      {
        status = GUI_WRITE_ERROR;
 801e996:	2327      	movs	r3, #39	; 0x27
 801e998:	2238      	movs	r2, #56	; 0x38
 801e99a:	189b      	adds	r3, r3, r2
 801e99c:	19db      	adds	r3, r3, r7
 801e99e:	2202      	movs	r2, #2
 801e9a0:	701a      	strb	r2, [r3, #0]
    }
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
    /* Save PORT0_PDO_ListSNK */
    if (GUI_OK == status)
 801e9a2:	2327      	movs	r3, #39	; 0x27
 801e9a4:	2238      	movs	r2, #56	; 0x38
 801e9a6:	189b      	adds	r3, r3, r2
 801e9a8:	19db      	adds	r3, r3, r7
 801e9aa:	781b      	ldrb	r3, [r3, #0]
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	d135      	bne.n	801ea1c <BSP_GUI_SaveDataInFlash+0x2d4>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 801e9b0:	4b2e      	ldr	r3, [pc, #184]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801e9b2:	681a      	ldr	r2, [r3, #0]
 801e9b4:	23c0      	movs	r3, #192	; 0xc0
 801e9b6:	049b      	lsls	r3, r3, #18
 801e9b8:	4013      	ands	r3, r2
 801e9ba:	d00e      	beq.n	801e9da <BSP_GUI_SaveDataInFlash+0x292>
 801e9bc:	4b2b      	ldr	r3, [pc, #172]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801e9be:	681a      	ldr	r2, [r3, #0]
 801e9c0:	23c0      	movs	r3, #192	; 0xc0
 801e9c2:	049b      	lsls	r3, r3, #18
 801e9c4:	401a      	ands	r2, r3
 801e9c6:	2380      	movs	r3, #128	; 0x80
 801e9c8:	045b      	lsls	r3, r3, #17
 801e9ca:	429a      	cmp	r2, r3
 801e9cc:	d110      	bne.n	801e9f0 <BSP_GUI_SaveDataInFlash+0x2a8>
 801e9ce:	4b28      	ldr	r3, [pc, #160]	; (801ea70 <BSP_GUI_SaveDataInFlash+0x328>)
 801e9d0:	681a      	ldr	r2, [r3, #0]
 801e9d2:	2380      	movs	r3, #128	; 0x80
 801e9d4:	039b      	lsls	r3, r3, #14
 801e9d6:	4013      	ands	r3, r2
 801e9d8:	d10a      	bne.n	801e9f0 <BSP_GUI_SaveDataInFlash+0x2a8>
 801e9da:	4b26      	ldr	r3, [pc, #152]	; (801ea74 <BSP_GUI_SaveDataInFlash+0x32c>)
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	029b      	lsls	r3, r3, #10
 801e9e0:	4a25      	ldr	r2, [pc, #148]	; (801ea78 <BSP_GUI_SaveDataInFlash+0x330>)
 801e9e2:	4013      	ands	r3, r2
 801e9e4:	0adb      	lsrs	r3, r3, #11
 801e9e6:	031b      	lsls	r3, r3, #12
 801e9e8:	4a2b      	ldr	r2, [pc, #172]	; (801ea98 <BSP_GUI_SaveDataInFlash+0x350>)
 801e9ea:	4694      	mov	ip, r2
 801e9ec:	4463      	add	r3, ip
 801e9ee:	e00a      	b.n	801ea06 <BSP_GUI_SaveDataInFlash+0x2be>
 801e9f0:	4b20      	ldr	r3, [pc, #128]	; (801ea74 <BSP_GUI_SaveDataInFlash+0x32c>)
 801e9f2:	681b      	ldr	r3, [r3, #0]
 801e9f4:	029b      	lsls	r3, r3, #10
 801e9f6:	085b      	lsrs	r3, r3, #1
 801e9f8:	4a20      	ldr	r2, [pc, #128]	; (801ea7c <BSP_GUI_SaveDataInFlash+0x334>)
 801e9fa:	4013      	ands	r3, r2
 801e9fc:	0adb      	lsrs	r3, r3, #11
 801e9fe:	031b      	lsls	r3, r3, #12
 801ea00:	4a25      	ldr	r2, [pc, #148]	; (801ea98 <BSP_GUI_SaveDataInFlash+0x350>)
 801ea02:	4694      	mov	ip, r2
 801ea04:	4463      	add	r3, ip
 801ea06:	2227      	movs	r2, #39	; 0x27
 801ea08:	2138      	movs	r1, #56	; 0x38
 801ea0a:	1852      	adds	r2, r2, r1
 801ea0c:	19d4      	adds	r4, r2, r7
 801ea0e:	4a23      	ldr	r2, [pc, #140]	; (801ea9c <BSP_GUI_SaveDataInFlash+0x354>)
 801ea10:	0011      	movs	r1, r2
 801ea12:	0018      	movs	r0, r3
 801ea14:	f000 f8fa 	bl	801ec0c <SavePDOInFlash>
 801ea18:	0003      	movs	r3, r0
 801ea1a:	7023      	strb	r3, [r4, #0]
    }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 801ea1c:	2327      	movs	r3, #39	; 0x27
 801ea1e:	2238      	movs	r2, #56	; 0x38
 801ea20:	189b      	adds	r3, r3, r2
 801ea22:	19db      	adds	r3, r3, r7
 801ea24:	781b      	ldrb	r3, [r3, #0]
 801ea26:	2b00      	cmp	r3, #0
 801ea28:	d152      	bne.n	801ead0 <BSP_GUI_SaveDataInFlash+0x388>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS,
 801ea2a:	4b10      	ldr	r3, [pc, #64]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801ea2c:	681a      	ldr	r2, [r3, #0]
 801ea2e:	23c0      	movs	r3, #192	; 0xc0
 801ea30:	049b      	lsls	r3, r3, #18
 801ea32:	4013      	ands	r3, r2
 801ea34:	d00e      	beq.n	801ea54 <BSP_GUI_SaveDataInFlash+0x30c>
 801ea36:	4b0d      	ldr	r3, [pc, #52]	; (801ea6c <BSP_GUI_SaveDataInFlash+0x324>)
 801ea38:	681a      	ldr	r2, [r3, #0]
 801ea3a:	23c0      	movs	r3, #192	; 0xc0
 801ea3c:	049b      	lsls	r3, r3, #18
 801ea3e:	401a      	ands	r2, r3
 801ea40:	2380      	movs	r3, #128	; 0x80
 801ea42:	045b      	lsls	r3, r3, #17
 801ea44:	429a      	cmp	r2, r3
 801ea46:	d12d      	bne.n	801eaa4 <BSP_GUI_SaveDataInFlash+0x35c>
 801ea48:	4b09      	ldr	r3, [pc, #36]	; (801ea70 <BSP_GUI_SaveDataInFlash+0x328>)
 801ea4a:	681a      	ldr	r2, [r3, #0]
 801ea4c:	2380      	movs	r3, #128	; 0x80
 801ea4e:	039b      	lsls	r3, r3, #14
 801ea50:	4013      	ands	r3, r2
 801ea52:	d127      	bne.n	801eaa4 <BSP_GUI_SaveDataInFlash+0x35c>
 801ea54:	4b07      	ldr	r3, [pc, #28]	; (801ea74 <BSP_GUI_SaveDataInFlash+0x32c>)
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	029b      	lsls	r3, r3, #10
 801ea5a:	4a07      	ldr	r2, [pc, #28]	; (801ea78 <BSP_GUI_SaveDataInFlash+0x330>)
 801ea5c:	4013      	ands	r3, r2
 801ea5e:	0adb      	lsrs	r3, r3, #11
 801ea60:	031b      	lsls	r3, r3, #12
 801ea62:	4a0f      	ldr	r2, [pc, #60]	; (801eaa0 <BSP_GUI_SaveDataInFlash+0x358>)
 801ea64:	4694      	mov	ip, r2
 801ea66:	4463      	add	r3, ip
 801ea68:	e027      	b.n	801eaba <BSP_GUI_SaveDataInFlash+0x372>
 801ea6a:	46c0      	nop			; (mov r8, r8)
 801ea6c:	1fff7500 	.word	0x1fff7500
 801ea70:	40022020 	.word	0x40022020
 801ea74:	1fff75e0 	.word	0x1fff75e0
 801ea78:	000ffc00 	.word	0x000ffc00
 801ea7c:	0007fe00 	.word	0x0007fe00
 801ea80:	40022000 	.word	0x40022000
 801ea84:	07fff800 	.word	0x07fff800
 801ea88:	deadf00d 	.word	0xdeadf00d
 801ea8c:	deadbabe 	.word	0xdeadbabe
 801ea90:	2000017c 	.word	0x2000017c
 801ea94:	07fff808 	.word	0x07fff808
 801ea98:	07fff830 	.word	0x07fff830
 801ea9c:	20000180 	.word	0x20000180
 801eaa0:	07fff890 	.word	0x07fff890
 801eaa4:	4b4e      	ldr	r3, [pc, #312]	; (801ebe0 <BSP_GUI_SaveDataInFlash+0x498>)
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	029b      	lsls	r3, r3, #10
 801eaaa:	085b      	lsrs	r3, r3, #1
 801eaac:	4a4d      	ldr	r2, [pc, #308]	; (801ebe4 <BSP_GUI_SaveDataInFlash+0x49c>)
 801eaae:	4013      	ands	r3, r2
 801eab0:	0adb      	lsrs	r3, r3, #11
 801eab2:	031b      	lsls	r3, r3, #12
 801eab4:	4a4c      	ldr	r2, [pc, #304]	; (801ebe8 <BSP_GUI_SaveDataInFlash+0x4a0>)
 801eab6:	4694      	mov	ip, r2
 801eab8:	4463      	add	r3, ip
 801eaba:	2227      	movs	r2, #39	; 0x27
 801eabc:	2138      	movs	r1, #56	; 0x38
 801eabe:	1852      	adds	r2, r2, r1
 801eac0:	19d4      	adds	r4, r2, r7
 801eac2:	494a      	ldr	r1, [pc, #296]	; (801ebec <BSP_GUI_SaveDataInFlash+0x4a4>)
 801eac4:	220c      	movs	r2, #12
 801eac6:	0018      	movs	r0, r3
 801eac8:	f000 f913 	bl	801ecf2 <SaveSettingsInFlash>
 801eacc:	0003      	movs	r3, r0
 801eace:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 801ead0:	2327      	movs	r3, #39	; 0x27
 801ead2:	2238      	movs	r2, #56	; 0x38
 801ead4:	189b      	adds	r3, r3, r2
 801ead6:	19db      	adds	r3, r3, r7
 801ead8:	781b      	ldrb	r3, [r3, #0]
 801eada:	2b00      	cmp	r3, #0
 801eadc:	d135      	bne.n	801eb4a <BSP_GUI_SaveDataInFlash+0x402>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS,
 801eade:	4b44      	ldr	r3, [pc, #272]	; (801ebf0 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801eae0:	681a      	ldr	r2, [r3, #0]
 801eae2:	23c0      	movs	r3, #192	; 0xc0
 801eae4:	049b      	lsls	r3, r3, #18
 801eae6:	4013      	ands	r3, r2
 801eae8:	d00e      	beq.n	801eb08 <BSP_GUI_SaveDataInFlash+0x3c0>
 801eaea:	4b41      	ldr	r3, [pc, #260]	; (801ebf0 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801eaec:	681a      	ldr	r2, [r3, #0]
 801eaee:	23c0      	movs	r3, #192	; 0xc0
 801eaf0:	049b      	lsls	r3, r3, #18
 801eaf2:	401a      	ands	r2, r3
 801eaf4:	2380      	movs	r3, #128	; 0x80
 801eaf6:	045b      	lsls	r3, r3, #17
 801eaf8:	429a      	cmp	r2, r3
 801eafa:	d110      	bne.n	801eb1e <BSP_GUI_SaveDataInFlash+0x3d6>
 801eafc:	4b3d      	ldr	r3, [pc, #244]	; (801ebf4 <BSP_GUI_SaveDataInFlash+0x4ac>)
 801eafe:	681a      	ldr	r2, [r3, #0]
 801eb00:	2380      	movs	r3, #128	; 0x80
 801eb02:	039b      	lsls	r3, r3, #14
 801eb04:	4013      	ands	r3, r2
 801eb06:	d10a      	bne.n	801eb1e <BSP_GUI_SaveDataInFlash+0x3d6>
 801eb08:	4b35      	ldr	r3, [pc, #212]	; (801ebe0 <BSP_GUI_SaveDataInFlash+0x498>)
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	029b      	lsls	r3, r3, #10
 801eb0e:	4a3a      	ldr	r2, [pc, #232]	; (801ebf8 <BSP_GUI_SaveDataInFlash+0x4b0>)
 801eb10:	4013      	ands	r3, r2
 801eb12:	0adb      	lsrs	r3, r3, #11
 801eb14:	031b      	lsls	r3, r3, #12
 801eb16:	4a39      	ldr	r2, [pc, #228]	; (801ebfc <BSP_GUI_SaveDataInFlash+0x4b4>)
 801eb18:	4694      	mov	ip, r2
 801eb1a:	4463      	add	r3, ip
 801eb1c:	e00a      	b.n	801eb34 <BSP_GUI_SaveDataInFlash+0x3ec>
 801eb1e:	4b30      	ldr	r3, [pc, #192]	; (801ebe0 <BSP_GUI_SaveDataInFlash+0x498>)
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	029b      	lsls	r3, r3, #10
 801eb24:	085b      	lsrs	r3, r3, #1
 801eb26:	4a2f      	ldr	r2, [pc, #188]	; (801ebe4 <BSP_GUI_SaveDataInFlash+0x49c>)
 801eb28:	4013      	ands	r3, r2
 801eb2a:	0adb      	lsrs	r3, r3, #11
 801eb2c:	031b      	lsls	r3, r3, #12
 801eb2e:	4a33      	ldr	r2, [pc, #204]	; (801ebfc <BSP_GUI_SaveDataInFlash+0x4b4>)
 801eb30:	4694      	mov	ip, r2
 801eb32:	4463      	add	r3, ip
 801eb34:	2227      	movs	r2, #39	; 0x27
 801eb36:	2138      	movs	r1, #56	; 0x38
 801eb38:	1852      	adds	r2, r2, r1
 801eb3a:	19d4      	adds	r4, r2, r7
 801eb3c:	4930      	ldr	r1, [pc, #192]	; (801ec00 <BSP_GUI_SaveDataInFlash+0x4b8>)
 801eb3e:	2208      	movs	r2, #8
 801eb40:	0018      	movs	r0, r3
 801eb42:	f000 f8d6 	bl	801ecf2 <SaveSettingsInFlash>
 801eb46:	0003      	movs	r3, r0
 801eb48:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_IdSettingsTypeDef));
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 801eb4a:	2327      	movs	r3, #39	; 0x27
 801eb4c:	2238      	movs	r2, #56	; 0x38
 801eb4e:	189b      	adds	r3, r3, r2
 801eb50:	19db      	adds	r3, r3, r7
 801eb52:	781b      	ldrb	r3, [r3, #0]
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d135      	bne.n	801ebc4 <BSP_GUI_SaveDataInFlash+0x47c>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS,
 801eb58:	4b25      	ldr	r3, [pc, #148]	; (801ebf0 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801eb5a:	681a      	ldr	r2, [r3, #0]
 801eb5c:	23c0      	movs	r3, #192	; 0xc0
 801eb5e:	049b      	lsls	r3, r3, #18
 801eb60:	4013      	ands	r3, r2
 801eb62:	d00e      	beq.n	801eb82 <BSP_GUI_SaveDataInFlash+0x43a>
 801eb64:	4b22      	ldr	r3, [pc, #136]	; (801ebf0 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801eb66:	681a      	ldr	r2, [r3, #0]
 801eb68:	23c0      	movs	r3, #192	; 0xc0
 801eb6a:	049b      	lsls	r3, r3, #18
 801eb6c:	401a      	ands	r2, r3
 801eb6e:	2380      	movs	r3, #128	; 0x80
 801eb70:	045b      	lsls	r3, r3, #17
 801eb72:	429a      	cmp	r2, r3
 801eb74:	d110      	bne.n	801eb98 <BSP_GUI_SaveDataInFlash+0x450>
 801eb76:	4b1f      	ldr	r3, [pc, #124]	; (801ebf4 <BSP_GUI_SaveDataInFlash+0x4ac>)
 801eb78:	681a      	ldr	r2, [r3, #0]
 801eb7a:	2380      	movs	r3, #128	; 0x80
 801eb7c:	039b      	lsls	r3, r3, #14
 801eb7e:	4013      	ands	r3, r2
 801eb80:	d10a      	bne.n	801eb98 <BSP_GUI_SaveDataInFlash+0x450>
 801eb82:	4b17      	ldr	r3, [pc, #92]	; (801ebe0 <BSP_GUI_SaveDataInFlash+0x498>)
 801eb84:	681b      	ldr	r3, [r3, #0]
 801eb86:	029b      	lsls	r3, r3, #10
 801eb88:	4a1b      	ldr	r2, [pc, #108]	; (801ebf8 <BSP_GUI_SaveDataInFlash+0x4b0>)
 801eb8a:	4013      	ands	r3, r2
 801eb8c:	0adb      	lsrs	r3, r3, #11
 801eb8e:	031b      	lsls	r3, r3, #12
 801eb90:	4a1c      	ldr	r2, [pc, #112]	; (801ec04 <BSP_GUI_SaveDataInFlash+0x4bc>)
 801eb92:	4694      	mov	ip, r2
 801eb94:	4463      	add	r3, ip
 801eb96:	e00a      	b.n	801ebae <BSP_GUI_SaveDataInFlash+0x466>
 801eb98:	4b11      	ldr	r3, [pc, #68]	; (801ebe0 <BSP_GUI_SaveDataInFlash+0x498>)
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	029b      	lsls	r3, r3, #10
 801eb9e:	085b      	lsrs	r3, r3, #1
 801eba0:	4a10      	ldr	r2, [pc, #64]	; (801ebe4 <BSP_GUI_SaveDataInFlash+0x49c>)
 801eba2:	4013      	ands	r3, r2
 801eba4:	0adb      	lsrs	r3, r3, #11
 801eba6:	031b      	lsls	r3, r3, #12
 801eba8:	4a16      	ldr	r2, [pc, #88]	; (801ec04 <BSP_GUI_SaveDataInFlash+0x4bc>)
 801ebaa:	4694      	mov	ip, r2
 801ebac:	4463      	add	r3, ip
 801ebae:	2227      	movs	r2, #39	; 0x27
 801ebb0:	2138      	movs	r1, #56	; 0x38
 801ebb2:	1852      	adds	r2, r2, r1
 801ebb4:	19d4      	adds	r4, r2, r7
 801ebb6:	4914      	ldr	r1, [pc, #80]	; (801ec08 <BSP_GUI_SaveDataInFlash+0x4c0>)
 801ebb8:	2274      	movs	r2, #116	; 0x74
 801ebba:	0018      	movs	r0, r3
 801ebbc:	f000 f899 	bl	801ecf2 <SaveSettingsInFlash>
 801ebc0:	0003      	movs	r3, r0
 801ebc2:	7023      	strb	r3, [r4, #0]
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  (void) HAL_FLASH_Lock();
 801ebc4:	f7ec ff90 	bl	800bae8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 801ebc8:	b662      	cpsie	i
}
 801ebca:	46c0      	nop			; (mov r8, r8)

  /* Enable interrupts */
  __enable_irq();

  return status;
 801ebcc:	2327      	movs	r3, #39	; 0x27
 801ebce:	2238      	movs	r2, #56	; 0x38
 801ebd0:	189b      	adds	r3, r3, r2
 801ebd2:	19db      	adds	r3, r3, r7
 801ebd4:	781b      	ldrb	r3, [r3, #0]
}
 801ebd6:	0018      	movs	r0, r3
 801ebd8:	46bd      	mov	sp, r7
 801ebda:	b019      	add	sp, #100	; 0x64
 801ebdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebde:	46c0      	nop			; (mov r8, r8)
 801ebe0:	1fff75e0 	.word	0x1fff75e0
 801ebe4:	0007fe00 	.word	0x0007fe00
 801ebe8:	07fff890 	.word	0x07fff890
 801ebec:	200000f4 	.word	0x200000f4
 801ebf0:	1fff7500 	.word	0x1fff7500
 801ebf4:	40022020 	.word	0x40022020
 801ebf8:	000ffc00 	.word	0x000ffc00
 801ebfc:	07fff91c 	.word	0x07fff91c
 801ec00:	20000100 	.word	0x20000100
 801ec04:	07fff89c 	.word	0x07fff89c
 801ec08:	20000108 	.word	0x20000108

0801ec0c <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 801ec0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec0e:	b08f      	sub	sp, #60	; 0x3c
 801ec10:	af00      	add	r7, sp, #0
 801ec12:	6178      	str	r0, [r7, #20]
 801ec14:	6139      	str	r1, [r7, #16]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 801ec16:	231f      	movs	r3, #31
 801ec18:	2210      	movs	r2, #16
 801ec1a:	189b      	adds	r3, r3, r2
 801ec1c:	19db      	adds	r3, r3, r7
 801ec1e:	2200      	movs	r2, #0
 801ec20:	701a      	strb	r2, [r3, #0]

  index_flash = 0U;
 801ec22:	2300      	movs	r3, #0
 801ec24:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 801ec26:	2300      	movs	r3, #0
 801ec28:	637b      	str	r3, [r7, #52]	; 0x34
 801ec2a:	e04f      	b.n	801eccc <SavePDOInFlash+0xc0>
  {
    value[0] = pListOfPDO[index];
 801ec2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec2e:	009b      	lsls	r3, r3, #2
 801ec30:	693a      	ldr	r2, [r7, #16]
 801ec32:	18d3      	adds	r3, r2, r3
 801ec34:	681a      	ldr	r2, [r3, #0]
 801ec36:	2108      	movs	r1, #8
 801ec38:	2010      	movs	r0, #16
 801ec3a:	180b      	adds	r3, r1, r0
 801ec3c:	19db      	adds	r3, r3, r7
 801ec3e:	601a      	str	r2, [r3, #0]
    index++;
 801ec40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec42:	3301      	adds	r3, #1
 801ec44:	637b      	str	r3, [r7, #52]	; 0x34
    if (index < USBPD_MAX_NB_PDO)
 801ec46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec48:	2b06      	cmp	r3, #6
 801ec4a:	d808      	bhi.n	801ec5e <SavePDOInFlash+0x52>
    {
      value[1] = pListOfPDO[index];
 801ec4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec4e:	009b      	lsls	r3, r3, #2
 801ec50:	693a      	ldr	r2, [r7, #16]
 801ec52:	18d3      	adds	r3, r2, r3
 801ec54:	681a      	ldr	r2, [r3, #0]
 801ec56:	180b      	adds	r3, r1, r0
 801ec58:	19db      	adds	r3, r3, r7
 801ec5a:	605a      	str	r2, [r3, #4]
 801ec5c:	e006      	b.n	801ec6c <SavePDOInFlash+0x60>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 801ec5e:	2308      	movs	r3, #8
 801ec60:	2210      	movs	r2, #16
 801ec62:	189b      	adds	r3, r3, r2
 801ec64:	19db      	adds	r3, r3, r7
 801ec66:	2201      	movs	r2, #1
 801ec68:	4252      	negs	r2, r2
 801ec6a:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 801ec6c:	2208      	movs	r2, #8
 801ec6e:	2610      	movs	r6, #16
 801ec70:	1993      	adds	r3, r2, r6
 801ec72:	19db      	adds	r3, r3, r7
 801ec74:	681b      	ldr	r3, [r3, #0]
 801ec76:	60bb      	str	r3, [r7, #8]
 801ec78:	2300      	movs	r3, #0
 801ec7a:	60fb      	str	r3, [r7, #12]
 801ec7c:	1993      	adds	r3, r2, r6
 801ec7e:	19db      	adds	r3, r3, r7
 801ec80:	685b      	ldr	r3, [r3, #4]
 801ec82:	603b      	str	r3, [r7, #0]
 801ec84:	2300      	movs	r3, #0
 801ec86:	607b      	str	r3, [r7, #4]
 801ec88:	683b      	ldr	r3, [r7, #0]
 801ec8a:	001d      	movs	r5, r3
 801ec8c:	2300      	movs	r3, #0
 801ec8e:	001c      	movs	r4, r3
 801ec90:	68b9      	ldr	r1, [r7, #8]
 801ec92:	68fa      	ldr	r2, [r7, #12]
 801ec94:	000b      	movs	r3, r1
 801ec96:	4323      	orrs	r3, r4
 801ec98:	623b      	str	r3, [r7, #32]
 801ec9a:	0013      	movs	r3, r2
 801ec9c:	432b      	orrs	r3, r5
 801ec9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 801eca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eca2:	00da      	lsls	r2, r3, #3
 801eca4:	697b      	ldr	r3, [r7, #20]
 801eca6:	18d1      	adds	r1, r2, r3
 801eca8:	6a3a      	ldr	r2, [r7, #32]
 801ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecac:	2001      	movs	r0, #1
 801ecae:	f7ec fea9 	bl	800ba04 <HAL_FLASH_Program>
 801ecb2:	1e03      	subs	r3, r0, #0
 801ecb4:	d004      	beq.n	801ecc0 <SavePDOInFlash+0xb4>
    {
      status = GUI_WRITE_ERROR;
 801ecb6:	231f      	movs	r3, #31
 801ecb8:	199b      	adds	r3, r3, r6
 801ecba:	19db      	adds	r3, r3, r7
 801ecbc:	2202      	movs	r2, #2
 801ecbe:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1;
 801ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ecc2:	3301      	adds	r3, #1
 801ecc4:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 801ecc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ecc8:	3301      	adds	r3, #1
 801ecca:	637b      	str	r3, [r7, #52]	; 0x34
 801eccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ecce:	2b06      	cmp	r3, #6
 801ecd0:	d806      	bhi.n	801ece0 <SavePDOInFlash+0xd4>
 801ecd2:	231f      	movs	r3, #31
 801ecd4:	2210      	movs	r2, #16
 801ecd6:	189b      	adds	r3, r3, r2
 801ecd8:	19db      	adds	r3, r3, r7
 801ecda:	781b      	ldrb	r3, [r3, #0]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d0a5      	beq.n	801ec2c <SavePDOInFlash+0x20>
  }
  return status;
 801ece0:	231f      	movs	r3, #31
 801ece2:	2210      	movs	r2, #16
 801ece4:	189b      	adds	r3, r3, r2
 801ece6:	19db      	adds	r3, r3, r7
 801ece8:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 801ecea:	0018      	movs	r0, r3
 801ecec:	46bd      	mov	sp, r7
 801ecee:	b00f      	add	sp, #60	; 0x3c
 801ecf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ecf2 <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 801ecf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecf4:	b091      	sub	sp, #68	; 0x44
 801ecf6:	af00      	add	r7, sp, #0
 801ecf8:	61f8      	str	r0, [r7, #28]
 801ecfa:	61b9      	str	r1, [r7, #24]
 801ecfc:	617a      	str	r2, [r7, #20]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  uint32_t nb_u32   = ((Size) / 4U);
 801ecfe:	697b      	ldr	r3, [r7, #20]
 801ed00:	089b      	lsrs	r3, r3, #2
 801ed02:	633b      	str	r3, [r7, #48]	; 0x30
  GUI_StatusTypeDef status = GUI_OK;
 801ed04:	2327      	movs	r3, #39	; 0x27
 801ed06:	2210      	movs	r2, #16
 801ed08:	189b      	adds	r3, r3, r2
 801ed0a:	19db      	adds	r3, r3, r7
 801ed0c:	2200      	movs	r2, #0
 801ed0e:	701a      	strb	r2, [r3, #0]

  /* Ensure nb of bytes to be writeent is 4-multiple */
  if (((Size) % 4U) != 0U)
 801ed10:	697b      	ldr	r3, [r7, #20]
 801ed12:	2203      	movs	r2, #3
 801ed14:	4013      	ands	r3, r2
 801ed16:	d001      	beq.n	801ed1c <SaveSettingsInFlash+0x2a>
  {
    return (GUI_ERROR);
 801ed18:	2303      	movs	r3, #3
 801ed1a:	e065      	b.n	801ede8 <SaveSettingsInFlash+0xf6>
  }

  /* Save Settings in the FLASH */
  index_flash = 0U;
 801ed1c:	2300      	movs	r3, #0
 801ed1e:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 801ed20:	2300      	movs	r3, #0
 801ed22:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ed24:	e050      	b.n	801edc8 <SaveSettingsInFlash+0xd6>
  {
    value[0] = pSettings[index];
 801ed26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ed28:	009b      	lsls	r3, r3, #2
 801ed2a:	69ba      	ldr	r2, [r7, #24]
 801ed2c:	18d3      	adds	r3, r2, r3
 801ed2e:	681a      	ldr	r2, [r3, #0]
 801ed30:	2110      	movs	r1, #16
 801ed32:	2010      	movs	r0, #16
 801ed34:	180b      	adds	r3, r1, r0
 801ed36:	19db      	adds	r3, r3, r7
 801ed38:	601a      	str	r2, [r3, #0]
    index++;
 801ed3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ed3c:	3301      	adds	r3, #1
 801ed3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (index < nb_u32)
 801ed40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed44:	429a      	cmp	r2, r3
 801ed46:	d208      	bcs.n	801ed5a <SaveSettingsInFlash+0x68>
    {
      value[1] = pSettings[index];
 801ed48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ed4a:	009b      	lsls	r3, r3, #2
 801ed4c:	69ba      	ldr	r2, [r7, #24]
 801ed4e:	18d3      	adds	r3, r2, r3
 801ed50:	681a      	ldr	r2, [r3, #0]
 801ed52:	180b      	adds	r3, r1, r0
 801ed54:	19db      	adds	r3, r3, r7
 801ed56:	605a      	str	r2, [r3, #4]
 801ed58:	e006      	b.n	801ed68 <SaveSettingsInFlash+0x76>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 801ed5a:	2310      	movs	r3, #16
 801ed5c:	2210      	movs	r2, #16
 801ed5e:	189b      	adds	r3, r3, r2
 801ed60:	19db      	adds	r3, r3, r7
 801ed62:	2201      	movs	r2, #1
 801ed64:	4252      	negs	r2, r2
 801ed66:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 801ed68:	2210      	movs	r2, #16
 801ed6a:	2610      	movs	r6, #16
 801ed6c:	1993      	adds	r3, r2, r6
 801ed6e:	19db      	adds	r3, r3, r7
 801ed70:	681b      	ldr	r3, [r3, #0]
 801ed72:	60bb      	str	r3, [r7, #8]
 801ed74:	2300      	movs	r3, #0
 801ed76:	60fb      	str	r3, [r7, #12]
 801ed78:	1993      	adds	r3, r2, r6
 801ed7a:	19db      	adds	r3, r3, r7
 801ed7c:	685b      	ldr	r3, [r3, #4]
 801ed7e:	603b      	str	r3, [r7, #0]
 801ed80:	2300      	movs	r3, #0
 801ed82:	607b      	str	r3, [r7, #4]
 801ed84:	683b      	ldr	r3, [r7, #0]
 801ed86:	001d      	movs	r5, r3
 801ed88:	2300      	movs	r3, #0
 801ed8a:	001c      	movs	r4, r3
 801ed8c:	68b9      	ldr	r1, [r7, #8]
 801ed8e:	68fa      	ldr	r2, [r7, #12]
 801ed90:	000b      	movs	r3, r1
 801ed92:	4323      	orrs	r3, r4
 801ed94:	62bb      	str	r3, [r7, #40]	; 0x28
 801ed96:	0013      	movs	r3, r2
 801ed98:	432b      	orrs	r3, r5
 801ed9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 801ed9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ed9e:	00da      	lsls	r2, r3, #3
 801eda0:	69fb      	ldr	r3, [r7, #28]
 801eda2:	18d1      	adds	r1, r2, r3
 801eda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eda8:	2001      	movs	r0, #1
 801edaa:	f7ec fe2b 	bl	800ba04 <HAL_FLASH_Program>
 801edae:	1e03      	subs	r3, r0, #0
 801edb0:	d004      	beq.n	801edbc <SaveSettingsInFlash+0xca>
    {
      status = GUI_WRITE_ERROR;
 801edb2:	2327      	movs	r3, #39	; 0x27
 801edb4:	199b      	adds	r3, r3, r6
 801edb6:	19db      	adds	r3, r3, r7
 801edb8:	2202      	movs	r2, #2
 801edba:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1U;
 801edbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801edbe:	3301      	adds	r3, #1
 801edc0:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 801edc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801edc4:	3301      	adds	r3, #1
 801edc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801edc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801edca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edcc:	429a      	cmp	r2, r3
 801edce:	d206      	bcs.n	801edde <SaveSettingsInFlash+0xec>
 801edd0:	2327      	movs	r3, #39	; 0x27
 801edd2:	2210      	movs	r2, #16
 801edd4:	189b      	adds	r3, r3, r2
 801edd6:	19db      	adds	r3, r3, r7
 801edd8:	781b      	ldrb	r3, [r3, #0]
 801edda:	2b00      	cmp	r3, #0
 801eddc:	d0a3      	beq.n	801ed26 <SaveSettingsInFlash+0x34>
  }
  return status;
 801edde:	2327      	movs	r3, #39	; 0x27
 801ede0:	2210      	movs	r2, #16
 801ede2:	189b      	adds	r3, r3, r2
 801ede4:	19db      	adds	r3, r3, r7
 801ede6:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 801ede8:	0018      	movs	r0, r3
 801edea:	46bd      	mov	sp, r7
 801edec:	b011      	add	sp, #68	; 0x44
 801edee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801edf0 <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 801edf0:	b580      	push	{r7, lr}
 801edf2:	b086      	sub	sp, #24
 801edf4:	af00      	add	r7, sp, #0
 801edf6:	6078      	str	r0, [r7, #4]
 801edf8:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 801edfe:	230f      	movs	r3, #15
 801ee00:	18fb      	adds	r3, r7, r3
 801ee02:	2203      	movs	r2, #3
 801ee04:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 801ee06:	2300      	movs	r3, #0
 801ee08:	613b      	str	r3, [r7, #16]
 801ee0a:	e00c      	b.n	801ee26 <LoadPDOFromFlash+0x36>
    {
      pListOfPDO[_index] = *((uint32_t *)_addr);
 801ee0c:	697a      	ldr	r2, [r7, #20]
 801ee0e:	693b      	ldr	r3, [r7, #16]
 801ee10:	009b      	lsls	r3, r3, #2
 801ee12:	6839      	ldr	r1, [r7, #0]
 801ee14:	18cb      	adds	r3, r1, r3
 801ee16:	6812      	ldr	r2, [r2, #0]
 801ee18:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4U;
 801ee1a:	697b      	ldr	r3, [r7, #20]
 801ee1c:	3304      	adds	r3, #4
 801ee1e:	617b      	str	r3, [r7, #20]
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 801ee20:	693b      	ldr	r3, [r7, #16]
 801ee22:	3301      	adds	r3, #1
 801ee24:	613b      	str	r3, [r7, #16]
 801ee26:	693b      	ldr	r3, [r7, #16]
 801ee28:	2b06      	cmp	r3, #6
 801ee2a:	d9ef      	bls.n	801ee0c <LoadPDOFromFlash+0x1c>
    }
    _status = GUI_OK;
 801ee2c:	210f      	movs	r1, #15
 801ee2e:	187b      	adds	r3, r7, r1
 801ee30:	2200      	movs	r2, #0
 801ee32:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 801ee34:	187b      	adds	r3, r7, r1
 801ee36:	781b      	ldrb	r3, [r3, #0]
}
 801ee38:	0018      	movs	r0, r3
 801ee3a:	46bd      	mov	sp, r7
 801ee3c:	b006      	add	sp, #24
 801ee3e:	bd80      	pop	{r7, pc}

0801ee40 <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 801ee40:	b590      	push	{r4, r7, lr}
 801ee42:	b087      	sub	sp, #28
 801ee44:	af00      	add	r7, sp, #0
 801ee46:	60f8      	str	r0, [r7, #12]
 801ee48:	60b9      	str	r1, [r7, #8]
 801ee4a:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 801ee50:	2413      	movs	r4, #19
 801ee52:	193b      	adds	r3, r7, r4
 801ee54:	2203      	movs	r2, #3
 801ee56:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    (void) memcpy(pSettings, ((uint32_t *)_addr), Size);
 801ee58:	6979      	ldr	r1, [r7, #20]
 801ee5a:	687a      	ldr	r2, [r7, #4]
 801ee5c:	68bb      	ldr	r3, [r7, #8]
 801ee5e:	0018      	movs	r0, r3
 801ee60:	f004 fce8 	bl	8023834 <memcpy>
    _status = GUI_OK;
 801ee64:	193b      	adds	r3, r7, r4
 801ee66:	2200      	movs	r2, #0
 801ee68:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 801ee6a:	193b      	adds	r3, r7, r4
 801ee6c:	781b      	ldrb	r3, [r3, #0]
}
 801ee6e:	0018      	movs	r0, r3
 801ee70:	46bd      	mov	sp, r7
 801ee72:	b007      	add	sp, #28
 801ee74:	bd90      	pop	{r4, r7, pc}

0801ee76 <TLV_init_encode>:
  * @param    Ptr          A pointer to the value. This function does not allocate memory,
  *                        it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 801ee76:	b580      	push	{r7, lr}
 801ee78:	b084      	sub	sp, #16
 801ee7a:	af00      	add	r7, sp, #0
 801ee7c:	60f8      	str	r0, [r7, #12]
 801ee7e:	0008      	movs	r0, r1
 801ee80:	0011      	movs	r1, r2
 801ee82:	607b      	str	r3, [r7, #4]
 801ee84:	230b      	movs	r3, #11
 801ee86:	18fb      	adds	r3, r7, r3
 801ee88:	1c02      	adds	r2, r0, #0
 801ee8a:	701a      	strb	r2, [r3, #0]
 801ee8c:	2308      	movs	r3, #8
 801ee8e:	18fb      	adds	r3, r7, r3
 801ee90:	1c0a      	adds	r2, r1, #0
 801ee92:	801a      	strh	r2, [r3, #0]
  if (Ptr == NULL)
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d101      	bne.n	801ee9e <TLV_init_encode+0x28>
  {
    return 0xFF;  /* Buffer is NULL*/
 801ee9a:	23ff      	movs	r3, #255	; 0xff
 801ee9c:	e04a      	b.n	801ef34 <TLV_init_encode+0xbe>
  }
  if (SizeMax < 11U)
 801ee9e:	2308      	movs	r3, #8
 801eea0:	18fb      	adds	r3, r7, r3
 801eea2:	881b      	ldrh	r3, [r3, #0]
 801eea4:	2b0a      	cmp	r3, #10
 801eea6:	d801      	bhi.n	801eeac <TLV_init_encode+0x36>
  {
    return 0xFF;  /* Because of his small max size, the buffer can't even receive one empty TLV*/
 801eea8:	23ff      	movs	r3, #255	; 0xff
 801eeaa:	e043      	b.n	801ef34 <TLV_init_encode+0xbe>
  }

  ToSendTLV->data = Ptr;
 801eeac:	68fb      	ldr	r3, [r7, #12]
 801eeae:	687a      	ldr	r2, [r7, #4]
 801eeb0:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 801eeb2:	68fb      	ldr	r3, [r7, #12]
 801eeb4:	2208      	movs	r2, #8
 801eeb6:	18ba      	adds	r2, r7, r2
 801eeb8:	8812      	ldrh	r2, [r2, #0]
 801eeba:	809a      	strh	r2, [r3, #4]

  ToSendTLV->data[0] = TLV_SOF;
 801eebc:	68fb      	ldr	r3, [r7, #12]
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	22fd      	movs	r2, #253	; 0xfd
 801eec2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[1] = TLV_SOF;
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	3301      	adds	r3, #1
 801eeca:	22fd      	movs	r2, #253	; 0xfd
 801eecc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[2] = TLV_SOF;
 801eece:	68fb      	ldr	r3, [r7, #12]
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	3302      	adds	r3, #2
 801eed4:	22fd      	movs	r2, #253	; 0xfd
 801eed6:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 801eed8:	68fb      	ldr	r3, [r7, #12]
 801eeda:	681b      	ldr	r3, [r3, #0]
 801eedc:	3303      	adds	r3, #3
 801eede:	22fd      	movs	r2, #253	; 0xfd
 801eee0:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[4] = Tag;              /* Tag*/
 801eee2:	68fb      	ldr	r3, [r7, #12]
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	3304      	adds	r3, #4
 801eee8:	220b      	movs	r2, #11
 801eeea:	18ba      	adds	r2, r7, r2
 801eeec:	7812      	ldrb	r2, [r2, #0]
 801eeee:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[5] = 0;
 801eef0:	68fb      	ldr	r3, [r7, #12]
 801eef2:	681b      	ldr	r3, [r3, #0]
 801eef4:	3305      	adds	r3, #5
 801eef6:	2200      	movs	r2, #0
 801eef8:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = 0;                /* Size*/
 801eefa:	68fb      	ldr	r3, [r7, #12]
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	3306      	adds	r3, #6
 801ef00:	2200      	movs	r2, #0
 801ef02:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[7] = TLV_EOF;
 801ef04:	68fb      	ldr	r3, [r7, #12]
 801ef06:	681b      	ldr	r3, [r3, #0]
 801ef08:	3307      	adds	r3, #7
 801ef0a:	22a5      	movs	r2, #165	; 0xa5
 801ef0c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[8] = TLV_EOF;
 801ef0e:	68fb      	ldr	r3, [r7, #12]
 801ef10:	681b      	ldr	r3, [r3, #0]
 801ef12:	3308      	adds	r3, #8
 801ef14:	22a5      	movs	r2, #165	; 0xa5
 801ef16:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[9] = TLV_EOF;
 801ef18:	68fb      	ldr	r3, [r7, #12]
 801ef1a:	681b      	ldr	r3, [r3, #0]
 801ef1c:	3309      	adds	r3, #9
 801ef1e:	22a5      	movs	r2, #165	; 0xa5
 801ef20:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 801ef22:	68fb      	ldr	r3, [r7, #12]
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	330a      	adds	r3, #10
 801ef28:	22a5      	movs	r2, #165	; 0xa5
 801ef2a:	701a      	strb	r2, [r3, #0]

  ToSendTLV->EOFposition = 7;
 801ef2c:	68fb      	ldr	r3, [r7, #12]
 801ef2e:	2207      	movs	r2, #7
 801ef30:	80da      	strh	r2, [r3, #6]

  return 0;
 801ef32:	2300      	movs	r3, #0
}
 801ef34:	0018      	movs	r0, r3
 801ef36:	46bd      	mov	sp, r7
 801ef38:	b004      	add	sp, #16
 801ef3a:	bd80      	pop	{r7, pc}

0801ef3c <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 801ef3c:	b580      	push	{r7, lr}
 801ef3e:	b086      	sub	sp, #24
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	60f8      	str	r0, [r7, #12]
 801ef44:	0008      	movs	r0, r1
 801ef46:	0011      	movs	r1, r2
 801ef48:	607b      	str	r3, [r7, #4]
 801ef4a:	230b      	movs	r3, #11
 801ef4c:	18fb      	adds	r3, r7, r3
 801ef4e:	1c02      	adds	r2, r0, #0
 801ef50:	701a      	strb	r2, [r3, #0]
 801ef52:	2308      	movs	r3, #8
 801ef54:	18fb      	adds	r3, r7, r3
 801ef56:	1c0a      	adds	r2, r1, #0
 801ef58:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 801ef5a:	68fb      	ldr	r3, [r7, #12]
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	68fa      	ldr	r2, [r7, #12]
 801ef60:	88d2      	ldrh	r2, [r2, #6]
 801ef62:	189b      	adds	r3, r3, r2
 801ef64:	781b      	ldrb	r3, [r3, #0]
 801ef66:	2ba5      	cmp	r3, #165	; 0xa5
 801ef68:	d001      	beq.n	801ef6e <TLV_add+0x32>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 801ef6a:	4b5a      	ldr	r3, [pc, #360]	; (801f0d4 <TLV_add+0x198>)
 801ef6c:	e0ae      	b.n	801f0cc <TLV_add+0x190>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 801ef6e:	68fb      	ldr	r3, [r7, #12]
 801ef70:	88db      	ldrh	r3, [r3, #6]
 801ef72:	001a      	movs	r2, r3
 801ef74:	2308      	movs	r3, #8
 801ef76:	18fb      	adds	r3, r7, r3
 801ef78:	881b      	ldrh	r3, [r3, #0]
 801ef7a:	18d3      	adds	r3, r2, r3
 801ef7c:	3307      	adds	r3, #7
 801ef7e:	68fa      	ldr	r2, [r7, #12]
 801ef80:	8892      	ldrh	r2, [r2, #4]
 801ef82:	4293      	cmp	r3, r2
 801ef84:	d901      	bls.n	801ef8a <TLV_add+0x4e>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 801ef86:	4b53      	ldr	r3, [pc, #332]	; (801f0d4 <TLV_add+0x198>)
 801ef88:	e0a0      	b.n	801f0cc <TLV_add+0x190>
  }
  if (ToSendTLV->data == NULL)
 801ef8a:	68fb      	ldr	r3, [r7, #12]
 801ef8c:	681b      	ldr	r3, [r3, #0]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d101      	bne.n	801ef96 <TLV_add+0x5a>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 801ef92:	4b50      	ldr	r3, [pc, #320]	; (801f0d4 <TLV_add+0x198>)
 801ef94:	e09a      	b.n	801f0cc <TLV_add+0x190>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 801ef96:	68fb      	ldr	r3, [r7, #12]
 801ef98:	88db      	ldrh	r3, [r3, #6]
 801ef9a:	4a4e      	ldr	r2, [pc, #312]	; (801f0d4 <TLV_add+0x198>)
 801ef9c:	4293      	cmp	r3, r2
 801ef9e:	d101      	bne.n	801efa4 <TLV_add+0x68>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 801efa0:	4b4c      	ldr	r3, [pc, #304]	; (801f0d4 <TLV_add+0x198>)
 801efa2:	e093      	b.n	801f0cc <TLV_add+0x190>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 801efa4:	68fb      	ldr	r3, [r7, #12]
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	68fa      	ldr	r2, [r7, #12]
 801efaa:	88d2      	ldrh	r2, [r2, #6]
 801efac:	189b      	adds	r3, r3, r2
 801efae:	220b      	movs	r2, #11
 801efb0:	18ba      	adds	r2, r7, r2
 801efb2:	7812      	ldrb	r2, [r2, #0]
 801efb4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 801efb6:	68fb      	ldr	r3, [r7, #12]
 801efb8:	88db      	ldrh	r3, [r3, #6]
 801efba:	3301      	adds	r3, #1
 801efbc:	b29a      	uxth	r2, r3
 801efbe:	68fb      	ldr	r3, [r7, #12]
 801efc0:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 801efc2:	68fb      	ldr	r3, [r7, #12]
 801efc4:	88da      	ldrh	r2, [r3, #6]
 801efc6:	68fb      	ldr	r3, [r7, #12]
 801efc8:	811a      	strh	r2, [r3, #8]

  ToSendTLV->data[ToSendTLV->EOFposition] = (uint8_t)((Size >> 8) & 0x00FFU);  /* Size*/
 801efca:	2008      	movs	r0, #8
 801efcc:	183b      	adds	r3, r7, r0
 801efce:	881b      	ldrh	r3, [r3, #0]
 801efd0:	0a1b      	lsrs	r3, r3, #8
 801efd2:	b299      	uxth	r1, r3
 801efd4:	68fb      	ldr	r3, [r7, #12]
 801efd6:	681b      	ldr	r3, [r3, #0]
 801efd8:	68fa      	ldr	r2, [r7, #12]
 801efda:	88d2      	ldrh	r2, [r2, #6]
 801efdc:	189b      	adds	r3, r3, r2
 801efde:	b2ca      	uxtb	r2, r1
 801efe0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = (uint8_t)((Size) & 0x00FFU);
 801efe2:	68fb      	ldr	r3, [r7, #12]
 801efe4:	681a      	ldr	r2, [r3, #0]
 801efe6:	68fb      	ldr	r3, [r7, #12]
 801efe8:	88db      	ldrh	r3, [r3, #6]
 801efea:	3301      	adds	r3, #1
 801efec:	18d3      	adds	r3, r2, r3
 801efee:	183a      	adds	r2, r7, r0
 801eff0:	8812      	ldrh	r2, [r2, #0]
 801eff2:	b2d2      	uxtb	r2, r2
 801eff4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2U;
 801eff6:	68fb      	ldr	r3, [r7, #12]
 801eff8:	88db      	ldrh	r3, [r3, #6]
 801effa:	3302      	adds	r3, #2
 801effc:	b29a      	uxth	r2, r3
 801effe:	68fb      	ldr	r3, [r7, #12]
 801f000:	80da      	strh	r2, [r3, #6]

  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 801f002:	2300      	movs	r3, #0
 801f004:	617b      	str	r3, [r7, #20]
 801f006:	e012      	b.n	801f02e <TLV_add+0xf2>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 801f008:	687a      	ldr	r2, [r7, #4]
 801f00a:	697b      	ldr	r3, [r7, #20]
 801f00c:	18d2      	adds	r2, r2, r3
 801f00e:	68fb      	ldr	r3, [r7, #12]
 801f010:	681b      	ldr	r3, [r3, #0]
 801f012:	68f9      	ldr	r1, [r7, #12]
 801f014:	88c9      	ldrh	r1, [r1, #6]
 801f016:	185b      	adds	r3, r3, r1
 801f018:	7812      	ldrb	r2, [r2, #0]
 801f01a:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 801f01c:	68fb      	ldr	r3, [r7, #12]
 801f01e:	88db      	ldrh	r3, [r3, #6]
 801f020:	3301      	adds	r3, #1
 801f022:	b29a      	uxth	r2, r3
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 801f028:	697b      	ldr	r3, [r7, #20]
 801f02a:	3301      	adds	r3, #1
 801f02c:	617b      	str	r3, [r7, #20]
 801f02e:	2108      	movs	r1, #8
 801f030:	187b      	adds	r3, r7, r1
 801f032:	881b      	ldrh	r3, [r3, #0]
 801f034:	697a      	ldr	r2, [r7, #20]
 801f036:	429a      	cmp	r2, r3
 801f038:	d3e6      	bcc.n	801f008 <TLV_add+0xcc>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 801f03a:	68fb      	ldr	r3, [r7, #12]
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	68fa      	ldr	r2, [r7, #12]
 801f040:	88d2      	ldrh	r2, [r2, #6]
 801f042:	189b      	adds	r3, r3, r2
 801f044:	22a5      	movs	r2, #165	; 0xa5
 801f046:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 801f048:	68fb      	ldr	r3, [r7, #12]
 801f04a:	681a      	ldr	r2, [r3, #0]
 801f04c:	68fb      	ldr	r3, [r7, #12]
 801f04e:	88db      	ldrh	r3, [r3, #6]
 801f050:	3301      	adds	r3, #1
 801f052:	18d3      	adds	r3, r2, r3
 801f054:	22a5      	movs	r2, #165	; 0xa5
 801f056:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	681a      	ldr	r2, [r3, #0]
 801f05c:	68fb      	ldr	r3, [r7, #12]
 801f05e:	88db      	ldrh	r3, [r3, #6]
 801f060:	3302      	adds	r3, #2
 801f062:	18d3      	adds	r3, r2, r3
 801f064:	22a5      	movs	r2, #165	; 0xa5
 801f066:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                  /* EOF*/
 801f068:	68fb      	ldr	r3, [r7, #12]
 801f06a:	681a      	ldr	r2, [r3, #0]
 801f06c:	68fb      	ldr	r3, [r7, #12]
 801f06e:	88db      	ldrh	r3, [r3, #6]
 801f070:	3303      	adds	r3, #3
 801f072:	18d3      	adds	r3, r2, r3
 801f074:	22a5      	movs	r2, #165	; 0xa5
 801f076:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + 3U + Size;
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	681b      	ldr	r3, [r3, #0]
 801f07c:	3305      	adds	r3, #5
 801f07e:	781b      	ldrb	r3, [r3, #0]
 801f080:	b29b      	uxth	r3, r3
 801f082:	021b      	lsls	r3, r3, #8
 801f084:	b29a      	uxth	r2, r3
 801f086:	68fb      	ldr	r3, [r7, #12]
 801f088:	681b      	ldr	r3, [r3, #0]
 801f08a:	3306      	adds	r3, #6
 801f08c:	781b      	ldrb	r3, [r3, #0]
 801f08e:	b29b      	uxth	r3, r3
 801f090:	18d3      	adds	r3, r2, r3
 801f092:	b29a      	uxth	r2, r3
 801f094:	187b      	adds	r3, r7, r1
 801f096:	881b      	ldrh	r3, [r3, #0]
 801f098:	18d3      	adds	r3, r2, r3
 801f09a:	b29a      	uxth	r2, r3
 801f09c:	2012      	movs	r0, #18
 801f09e:	183b      	adds	r3, r7, r0
 801f0a0:	3203      	adds	r2, #3
 801f0a2:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 801f0a4:	183b      	adds	r3, r7, r0
 801f0a6:	881b      	ldrh	r3, [r3, #0]
 801f0a8:	0a1b      	lsrs	r3, r3, #8
 801f0aa:	b29a      	uxth	r2, r3
 801f0ac:	68fb      	ldr	r3, [r7, #12]
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	3305      	adds	r3, #5
 801f0b2:	b2d2      	uxtb	r2, r2
 801f0b4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)total_lgth;
 801f0b6:	68fb      	ldr	r3, [r7, #12]
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	3306      	adds	r3, #6
 801f0bc:	183a      	adds	r2, r7, r0
 801f0be:	8812      	ldrh	r2, [r2, #0]
 801f0c0:	b2d2      	uxtb	r2, r2
 801f0c2:	701a      	strb	r2, [r3, #0]

  return (3U + Size);
 801f0c4:	187b      	adds	r3, r7, r1
 801f0c6:	881b      	ldrh	r3, [r3, #0]
 801f0c8:	3303      	adds	r3, #3
 801f0ca:	b29b      	uxth	r3, r3
}
 801f0cc:	0018      	movs	r0, r3
 801f0ce:	46bd      	mov	sp, r7
 801f0d0:	b006      	add	sp, #24
 801f0d2:	bd80      	pop	{r7, pc}
 801f0d4:	0000ffff 	.word	0x0000ffff

0801f0d8 <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data_t *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 801f0d8:	b580      	push	{r7, lr}
 801f0da:	b086      	sub	sp, #24
 801f0dc:	af00      	add	r7, sp, #0
 801f0de:	60f8      	str	r0, [r7, #12]
 801f0e0:	60b9      	str	r1, [r7, #8]
 801f0e2:	1dbb      	adds	r3, r7, #6
 801f0e4:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 801f0e6:	68fb      	ldr	r3, [r7, #12]
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	68fa      	ldr	r2, [r7, #12]
 801f0ec:	88d2      	ldrh	r2, [r2, #6]
 801f0ee:	189b      	adds	r3, r3, r2
 801f0f0:	781b      	ldrb	r3, [r3, #0]
 801f0f2:	2ba5      	cmp	r3, #165	; 0xa5
 801f0f4:	d001      	beq.n	801f0fa <TLV_addValue+0x22>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 801f0f6:	4b41      	ldr	r3, [pc, #260]	; (801f1fc <TLV_addValue+0x124>)
 801f0f8:	e07c      	b.n	801f1f4 <TLV_addValue+0x11c>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 801f0fa:	68fb      	ldr	r3, [r7, #12]
 801f0fc:	88db      	ldrh	r3, [r3, #6]
 801f0fe:	001a      	movs	r2, r3
 801f100:	1dbb      	adds	r3, r7, #6
 801f102:	881b      	ldrh	r3, [r3, #0]
 801f104:	18d3      	adds	r3, r2, r3
 801f106:	3307      	adds	r3, #7
 801f108:	68fa      	ldr	r2, [r7, #12]
 801f10a:	8892      	ldrh	r2, [r2, #4]
 801f10c:	4293      	cmp	r3, r2
 801f10e:	d901      	bls.n	801f114 <TLV_addValue+0x3c>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 801f110:	4b3a      	ldr	r3, [pc, #232]	; (801f1fc <TLV_addValue+0x124>)
 801f112:	e06f      	b.n	801f1f4 <TLV_addValue+0x11c>
  }
  if (ToSendTLV->data == NULL)
 801f114:	68fb      	ldr	r3, [r7, #12]
 801f116:	681b      	ldr	r3, [r3, #0]
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d101      	bne.n	801f120 <TLV_addValue+0x48>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 801f11c:	4b37      	ldr	r3, [pc, #220]	; (801f1fc <TLV_addValue+0x124>)
 801f11e:	e069      	b.n	801f1f4 <TLV_addValue+0x11c>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 801f120:	68fb      	ldr	r3, [r7, #12]
 801f122:	88db      	ldrh	r3, [r3, #6]
 801f124:	4a35      	ldr	r2, [pc, #212]	; (801f1fc <TLV_addValue+0x124>)
 801f126:	4293      	cmp	r3, r2
 801f128:	d101      	bne.n	801f12e <TLV_addValue+0x56>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 801f12a:	4b34      	ldr	r3, [pc, #208]	; (801f1fc <TLV_addValue+0x124>)
 801f12c:	e062      	b.n	801f1f4 <TLV_addValue+0x11c>
  }

  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 801f12e:	2300      	movs	r3, #0
 801f130:	617b      	str	r3, [r7, #20]
 801f132:	e012      	b.n	801f15a <TLV_addValue+0x82>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 801f134:	68ba      	ldr	r2, [r7, #8]
 801f136:	697b      	ldr	r3, [r7, #20]
 801f138:	18d2      	adds	r2, r2, r3
 801f13a:	68fb      	ldr	r3, [r7, #12]
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	68f9      	ldr	r1, [r7, #12]
 801f140:	88c9      	ldrh	r1, [r1, #6]
 801f142:	185b      	adds	r3, r3, r1
 801f144:	7812      	ldrb	r2, [r2, #0]
 801f146:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 801f148:	68fb      	ldr	r3, [r7, #12]
 801f14a:	88db      	ldrh	r3, [r3, #6]
 801f14c:	3301      	adds	r3, #1
 801f14e:	b29a      	uxth	r2, r3
 801f150:	68fb      	ldr	r3, [r7, #12]
 801f152:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 801f154:	697b      	ldr	r3, [r7, #20]
 801f156:	3301      	adds	r3, #1
 801f158:	617b      	str	r3, [r7, #20]
 801f15a:	1dbb      	adds	r3, r7, #6
 801f15c:	881b      	ldrh	r3, [r3, #0]
 801f15e:	697a      	ldr	r2, [r7, #20]
 801f160:	429a      	cmp	r2, r3
 801f162:	d3e7      	bcc.n	801f134 <TLV_addValue+0x5c>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 801f164:	68fb      	ldr	r3, [r7, #12]
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	68fa      	ldr	r2, [r7, #12]
 801f16a:	88d2      	ldrh	r2, [r2, #6]
 801f16c:	189b      	adds	r3, r3, r2
 801f16e:	22a5      	movs	r2, #165	; 0xa5
 801f170:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 801f172:	68fb      	ldr	r3, [r7, #12]
 801f174:	681a      	ldr	r2, [r3, #0]
 801f176:	68fb      	ldr	r3, [r7, #12]
 801f178:	88db      	ldrh	r3, [r3, #6]
 801f17a:	3301      	adds	r3, #1
 801f17c:	18d3      	adds	r3, r2, r3
 801f17e:	22a5      	movs	r2, #165	; 0xa5
 801f180:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 801f182:	68fb      	ldr	r3, [r7, #12]
 801f184:	681a      	ldr	r2, [r3, #0]
 801f186:	68fb      	ldr	r3, [r7, #12]
 801f188:	88db      	ldrh	r3, [r3, #6]
 801f18a:	3302      	adds	r3, #2
 801f18c:	18d3      	adds	r3, r2, r3
 801f18e:	22a5      	movs	r2, #165	; 0xa5
 801f190:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                   /* EOF*/
 801f192:	68fb      	ldr	r3, [r7, #12]
 801f194:	681a      	ldr	r2, [r3, #0]
 801f196:	68fb      	ldr	r3, [r7, #12]
 801f198:	88db      	ldrh	r3, [r3, #6]
 801f19a:	3303      	adds	r3, #3
 801f19c:	18d3      	adds	r3, r2, r3
 801f19e:	22a5      	movs	r2, #165	; 0xa5
 801f1a0:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + Size;
 801f1a2:	68fb      	ldr	r3, [r7, #12]
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	3305      	adds	r3, #5
 801f1a8:	781b      	ldrb	r3, [r3, #0]
 801f1aa:	b29b      	uxth	r3, r3
 801f1ac:	021b      	lsls	r3, r3, #8
 801f1ae:	b29a      	uxth	r2, r3
 801f1b0:	68fb      	ldr	r3, [r7, #12]
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	3306      	adds	r3, #6
 801f1b6:	781b      	ldrb	r3, [r3, #0]
 801f1b8:	b29b      	uxth	r3, r3
 801f1ba:	18d3      	adds	r3, r2, r3
 801f1bc:	b299      	uxth	r1, r3
 801f1be:	2012      	movs	r0, #18
 801f1c0:	183b      	adds	r3, r7, r0
 801f1c2:	1dba      	adds	r2, r7, #6
 801f1c4:	8812      	ldrh	r2, [r2, #0]
 801f1c6:	188a      	adds	r2, r1, r2
 801f1c8:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 801f1ca:	0001      	movs	r1, r0
 801f1cc:	187b      	adds	r3, r7, r1
 801f1ce:	881b      	ldrh	r3, [r3, #0]
 801f1d0:	0a1b      	lsrs	r3, r3, #8
 801f1d2:	b29a      	uxth	r2, r3
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	3305      	adds	r3, #5
 801f1da:	b2d2      	uxtb	r2, r2
 801f1dc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)(total_lgth);
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	3306      	adds	r3, #6
 801f1e4:	187a      	adds	r2, r7, r1
 801f1e6:	8812      	ldrh	r2, [r2, #0]
 801f1e8:	b2d2      	uxtb	r2, r2
 801f1ea:	701a      	strb	r2, [r3, #0]

  return 3U + Size;
 801f1ec:	1dbb      	adds	r3, r7, #6
 801f1ee:	881b      	ldrh	r3, [r3, #0]
 801f1f0:	3303      	adds	r3, #3
 801f1f2:	b29b      	uxth	r3, r3
}
 801f1f4:	0018      	movs	r0, r3
 801f1f6:	46bd      	mov	sp, r7
 801f1f8:	b006      	add	sp, #24
 801f1fa:	bd80      	pop	{r7, pc}
 801f1fc:	0000ffff 	.word	0x0000ffff

0801f200 <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data_t *ToSendTLV)
{
 801f200:	b580      	push	{r7, lr}
 801f202:	b082      	sub	sp, #8
 801f204:	af00      	add	r7, sp, #0
 801f206:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	2200      	movs	r2, #0
 801f20c:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 801f20e:	687b      	ldr	r3, [r7, #4]
 801f210:	2201      	movs	r2, #1
 801f212:	4252      	negs	r2, r2
 801f214:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	2200      	movs	r2, #0
 801f21a:	809a      	strh	r2, [r3, #4]
}
 801f21c:	46c0      	nop			; (mov r8, r8)
 801f21e:	46bd      	mov	sp, r7
 801f220:	b002      	add	sp, #8
 801f222:	bd80      	pop	{r7, pc}

0801f224 <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data_t that will be used.
  * @param    pReceivedString The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data_t *ToProcessTLV, uint8_t *pReceivedString)
{
 801f224:	b580      	push	{r7, lr}
 801f226:	b082      	sub	sp, #8
 801f228:	af00      	add	r7, sp, #0
 801f22a:	6078      	str	r0, [r7, #4]
 801f22c:	6039      	str	r1, [r7, #0]
  if (pReceivedString == NULL)
 801f22e:	683b      	ldr	r3, [r7, #0]
 801f230:	2b00      	cmp	r3, #0
 801f232:	d101      	bne.n	801f238 <TLV_init_decode+0x14>
  {
    return 0xFF;  /* Received string is NULL*/
 801f234:	23ff      	movs	r3, #255	; 0xff
 801f236:	e01d      	b.n	801f274 <TLV_init_decode+0x50>
  }
  if ((pReceivedString[0] != TLV_SOF)
 801f238:	683b      	ldr	r3, [r7, #0]
 801f23a:	781b      	ldrb	r3, [r3, #0]
 801f23c:	2bfd      	cmp	r3, #253	; 0xfd
 801f23e:	d10e      	bne.n	801f25e <TLV_init_decode+0x3a>
      || (pReceivedString[1] != TLV_SOF)
 801f240:	683b      	ldr	r3, [r7, #0]
 801f242:	3301      	adds	r3, #1
 801f244:	781b      	ldrb	r3, [r3, #0]
 801f246:	2bfd      	cmp	r3, #253	; 0xfd
 801f248:	d109      	bne.n	801f25e <TLV_init_decode+0x3a>
      || (pReceivedString[2] != TLV_SOF)
 801f24a:	683b      	ldr	r3, [r7, #0]
 801f24c:	3302      	adds	r3, #2
 801f24e:	781b      	ldrb	r3, [r3, #0]
 801f250:	2bfd      	cmp	r3, #253	; 0xfd
 801f252:	d104      	bne.n	801f25e <TLV_init_decode+0x3a>
      || (pReceivedString[3] != TLV_SOF))
 801f254:	683b      	ldr	r3, [r7, #0]
 801f256:	3303      	adds	r3, #3
 801f258:	781b      	ldrb	r3, [r3, #0]
 801f25a:	2bfd      	cmp	r3, #253	; 0xfd
 801f25c:	d001      	beq.n	801f262 <TLV_init_decode+0x3e>
  {
    return 0xFF;  /* Incorrect SOF*/
 801f25e:	23ff      	movs	r3, #255	; 0xff
 801f260:	e008      	b.n	801f274 <TLV_init_decode+0x50>
  }

  ToProcessTLV->data = pReceivedString;
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	683a      	ldr	r2, [r7, #0]
 801f266:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	2207      	movs	r2, #7
 801f26c:	809a      	strh	r2, [r3, #4]

  return ((uint8_t)(ToProcessTLV->cursor));
 801f26e:	687b      	ldr	r3, [r7, #4]
 801f270:	889b      	ldrh	r3, [r3, #4]
 801f272:	b2db      	uxtb	r3, r3
}
 801f274:	0018      	movs	r0, r3
 801f276:	46bd      	mov	sp, r7
 801f278:	b002      	add	sp, #8
 801f27a:	bd80      	pop	{r7, pc}

0801f27c <TLV_get>:
  * @param    Value        A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after,
  *           1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data_t *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 801f27c:	b580      	push	{r7, lr}
 801f27e:	b084      	sub	sp, #16
 801f280:	af00      	add	r7, sp, #0
 801f282:	60f8      	str	r0, [r7, #12]
 801f284:	60b9      	str	r1, [r7, #8]
 801f286:	607a      	str	r2, [r7, #4]
 801f288:	603b      	str	r3, [r7, #0]
  if (ToProcessTLV->data == NULL)
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	2b00      	cmp	r3, #0
 801f290:	d101      	bne.n	801f296 <TLV_get+0x1a>
  {
    return 0xFF;  /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 801f292:	23ff      	movs	r3, #255	; 0xff
 801f294:	e048      	b.n	801f328 <TLV_get+0xac>
  }
  if (ToProcessTLV->cursor == 0U)
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	889b      	ldrh	r3, [r3, #4]
 801f29a:	2b00      	cmp	r3, #0
 801f29c:	d101      	bne.n	801f2a2 <TLV_get+0x26>
  {
    return 0xFF;  /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 801f29e:	23ff      	movs	r3, #255	; 0xff
 801f2a0:	e042      	b.n	801f328 <TLV_get+0xac>
  }
  if (ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF)
 801f2a2:	68fb      	ldr	r3, [r7, #12]
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	68fa      	ldr	r2, [r7, #12]
 801f2a8:	8892      	ldrh	r2, [r2, #4]
 801f2aa:	189b      	adds	r3, r3, r2
 801f2ac:	781b      	ldrb	r3, [r3, #0]
 801f2ae:	2ba5      	cmp	r3, #165	; 0xa5
 801f2b0:	d101      	bne.n	801f2b6 <TLV_get+0x3a>
  {
    return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 801f2b2:	23ff      	movs	r3, #255	; 0xff
 801f2b4:	e038      	b.n	801f328 <TLV_get+0xac>
  }

  /* Tag*/
  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];
 801f2b6:	68fb      	ldr	r3, [r7, #12]
 801f2b8:	681b      	ldr	r3, [r3, #0]
 801f2ba:	68fa      	ldr	r2, [r7, #12]
 801f2bc:	8892      	ldrh	r2, [r2, #4]
 801f2be:	189b      	adds	r3, r3, r2
 801f2c0:	781a      	ldrb	r2, [r3, #0]
 801f2c2:	68bb      	ldr	r3, [r7, #8]
 801f2c4:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 801f2c6:	68fb      	ldr	r3, [r7, #12]
 801f2c8:	889b      	ldrh	r3, [r3, #4]
 801f2ca:	3301      	adds	r3, #1
 801f2cc:	b29a      	uxth	r2, r3
 801f2ce:	68fb      	ldr	r3, [r7, #12]
 801f2d0:	809a      	strh	r2, [r3, #4]
  /* Length*/
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 801f2d2:	68fb      	ldr	r3, [r7, #12]
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	68fa      	ldr	r2, [r7, #12]
 801f2d8:	8892      	ldrh	r2, [r2, #4]
 801f2da:	189b      	adds	r3, r3, r2
 801f2dc:	781b      	ldrb	r3, [r3, #0]
 801f2de:	b29b      	uxth	r3, r3
 801f2e0:	021b      	lsls	r3, r3, #8
 801f2e2:	b29a      	uxth	r2, r3
            + (uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor + 1U]);
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	6819      	ldr	r1, [r3, #0]
 801f2e8:	68fb      	ldr	r3, [r7, #12]
 801f2ea:	889b      	ldrh	r3, [r3, #4]
 801f2ec:	3301      	adds	r3, #1
 801f2ee:	18cb      	adds	r3, r1, r3
 801f2f0:	781b      	ldrb	r3, [r3, #0]
 801f2f2:	b29b      	uxth	r3, r3
 801f2f4:	18d3      	adds	r3, r2, r3
 801f2f6:	b29a      	uxth	r2, r3
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2U;
 801f2fc:	68fb      	ldr	r3, [r7, #12]
 801f2fe:	889b      	ldrh	r3, [r3, #4]
 801f300:	3302      	adds	r3, #2
 801f302:	b29a      	uxth	r2, r3
 801f304:	68fb      	ldr	r3, [r7, #12]
 801f306:	809a      	strh	r2, [r3, #4]
  /* Value*/
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];
 801f308:	68fb      	ldr	r3, [r7, #12]
 801f30a:	681b      	ldr	r3, [r3, #0]
 801f30c:	68fa      	ldr	r2, [r7, #12]
 801f30e:	8892      	ldrh	r2, [r2, #4]
 801f310:	189a      	adds	r2, r3, r2
 801f312:	683b      	ldr	r3, [r7, #0]
 801f314:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	889a      	ldrh	r2, [r3, #4]
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	881b      	ldrh	r3, [r3, #0]
 801f31e:	18d3      	adds	r3, r2, r3
 801f320:	b29a      	uxth	r2, r3
 801f322:	68fb      	ldr	r3, [r7, #12]
 801f324:	809a      	strh	r2, [r3, #4]

  return 0;
 801f326:	2300      	movs	r3, #0
}
 801f328:	0018      	movs	r0, r3
 801f32a:	46bd      	mov	sp, r7
 801f32c:	b004      	add	sp, #16
 801f32e:	bd80      	pop	{r7, pc}

0801f330 <TLV_deinit_decode>:
  *           to restart decoding from the beginning). This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data_t *ToProcessTLV)
{
 801f330:	b580      	push	{r7, lr}
 801f332:	b082      	sub	sp, #8
 801f334:	af00      	add	r7, sp, #0
 801f336:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	2200      	movs	r2, #0
 801f33c:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 801f33e:	687b      	ldr	r3, [r7, #4]
 801f340:	2200      	movs	r2, #0
 801f342:	809a      	strh	r2, [r3, #4]
}
 801f344:	46c0      	nop			; (mov r8, r8)
 801f346:	46bd      	mov	sp, r7
 801f348:	b002      	add	sp, #8
 801f34a:	bd80      	pop	{r7, pc}

0801f34c <TLV_get_string_length>:
  *           it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t *pString)
{
 801f34c:	b580      	push	{r7, lr}
 801f34e:	b084      	sub	sp, #16
 801f350:	af00      	add	r7, sp, #0
 801f352:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 801f354:	230f      	movs	r3, #15
 801f356:	18fb      	adds	r3, r7, r3
 801f358:	2200      	movs	r2, #0
 801f35a:	701a      	strb	r2, [r3, #0]

  while (pString[start] == TLV_SOF)
 801f35c:	e005      	b.n	801f36a <TLV_get_string_length+0x1e>
  {
    start++;
 801f35e:	210f      	movs	r1, #15
 801f360:	187b      	adds	r3, r7, r1
 801f362:	781a      	ldrb	r2, [r3, #0]
 801f364:	187b      	adds	r3, r7, r1
 801f366:	3201      	adds	r2, #1
 801f368:	701a      	strb	r2, [r3, #0]
  while (pString[start] == TLV_SOF)
 801f36a:	210f      	movs	r1, #15
 801f36c:	187b      	adds	r3, r7, r1
 801f36e:	781b      	ldrb	r3, [r3, #0]
 801f370:	687a      	ldr	r2, [r7, #4]
 801f372:	18d3      	adds	r3, r2, r3
 801f374:	781b      	ldrb	r3, [r3, #0]
 801f376:	2bfd      	cmp	r3, #253	; 0xfd
 801f378:	d0f1      	beq.n	801f35e <TLV_get_string_length+0x12>
  } /* start variable is now after the SOF if there is one.*/

  length = ((uint16_t)pString[start + 1U] << 8) | (uint16_t)pString[start + 2U];
 801f37a:	187b      	adds	r3, r7, r1
 801f37c:	781b      	ldrb	r3, [r3, #0]
 801f37e:	3301      	adds	r3, #1
 801f380:	687a      	ldr	r2, [r7, #4]
 801f382:	18d3      	adds	r3, r2, r3
 801f384:	781b      	ldrb	r3, [r3, #0]
 801f386:	021b      	lsls	r3, r3, #8
 801f388:	b21a      	sxth	r2, r3
 801f38a:	187b      	adds	r3, r7, r1
 801f38c:	781b      	ldrb	r3, [r3, #0]
 801f38e:	3302      	adds	r3, #2
 801f390:	6879      	ldr	r1, [r7, #4]
 801f392:	18cb      	adds	r3, r1, r3
 801f394:	781b      	ldrb	r3, [r3, #0]
 801f396:	b21b      	sxth	r3, r3
 801f398:	4313      	orrs	r3, r2
 801f39a:	b21a      	sxth	r2, r3
 801f39c:	210c      	movs	r1, #12
 801f39e:	187b      	adds	r3, r7, r1
 801f3a0:	801a      	strh	r2, [r3, #0]
  length += 3U;
 801f3a2:	187b      	adds	r3, r7, r1
 801f3a4:	187a      	adds	r2, r7, r1
 801f3a6:	8812      	ldrh	r2, [r2, #0]
 801f3a8:	3203      	adds	r2, #3
 801f3aa:	801a      	strh	r2, [r3, #0]

  return length;
 801f3ac:	187b      	adds	r3, r7, r1
 801f3ae:	881b      	ldrh	r3, [r3, #0]
}
 801f3b0:	0018      	movs	r0, r3
 801f3b2:	46bd      	mov	sp, r7
 801f3b4:	b004      	add	sp, #16
 801f3b6:	bd80      	pop	{r7, pc}

0801f3b8 <GUI_Init>:
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t *(*CB_HWBoardVersion)(void), const uint8_t *(*CB_HWPDType)(void),
                               uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	b086      	sub	sp, #24
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	60f8      	str	r0, [r7, #12]
 801f3c0:	60b9      	str	r1, [r7, #8]
 801f3c2:	607a      	str	r2, [r7, #4]
 801f3c4:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 801f3c6:	2317      	movs	r3, #23
 801f3c8:	18fb      	adds	r3, r7, r3
 801f3ca:	2201      	movs	r2, #1
 801f3cc:	701a      	strb	r2, [r3, #0]
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 801f3ce:	f7fe ff95 	bl	801e2fc <BSP_GUI_LoadDataFromFlash>
 801f3d2:	0003      	movs	r3, r0
 801f3d4:	1e5a      	subs	r2, r3, #1
 801f3d6:	4193      	sbcs	r3, r2
 801f3d8:	b2db      	uxtb	r3, r3
 801f3da:	001a      	movs	r2, r3
 801f3dc:	4b3f      	ldr	r3, [pc, #252]	; (801f4dc <GUI_Init+0x124>)
 801f3de:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 801f3e0:	4b3f      	ldr	r3, [pc, #252]	; (801f4e0 <GUI_Init+0x128>)
 801f3e2:	799b      	ldrb	r3, [r3, #6]
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d003      	beq.n	801f3f0 <GUI_Init+0x38>
 801f3e8:	4b3d      	ldr	r3, [pc, #244]	; (801f4e0 <GUI_Init+0x128>)
 801f3ea:	79db      	ldrb	r3, [r3, #7]
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d115      	bne.n	801f41c <GUI_Init+0x64>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 801f3f0:	4b3c      	ldr	r3, [pc, #240]	; (801f4e4 <GUI_Init+0x12c>)
 801f3f2:	226b      	movs	r2, #107	; 0x6b
 801f3f4:	189b      	adds	r3, r3, r2
 801f3f6:	785a      	ldrb	r2, [r3, #1]
 801f3f8:	2101      	movs	r1, #1
 801f3fa:	400a      	ands	r2, r1
 801f3fc:	1c11      	adds	r1, r2, #0
 801f3fe:	2260      	movs	r2, #96	; 0x60
 801f400:	4252      	negs	r2, r2
 801f402:	430a      	orrs	r2, r1
 801f404:	705a      	strb	r2, [r3, #1]
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 801f406:	4b37      	ldr	r3, [pc, #220]	; (801f4e4 <GUI_Init+0x12c>)
 801f408:	226b      	movs	r2, #107	; 0x6b
 801f40a:	189b      	adds	r3, r3, r2
 801f40c:	789a      	ldrb	r2, [r3, #2]
 801f40e:	217f      	movs	r1, #127	; 0x7f
 801f410:	438a      	bics	r2, r1
 801f412:	1c11      	adds	r1, r2, #0
 801f414:	2232      	movs	r2, #50	; 0x32
 801f416:	430a      	orrs	r2, r1
 801f418:	709a      	strb	r2, [r3, #2]
 801f41a:	e040      	b.n	801f49e <GUI_Init+0xe6>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801f41c:	4b30      	ldr	r3, [pc, #192]	; (801f4e0 <GUI_Init+0x128>)
 801f41e:	79db      	ldrb	r3, [r3, #7]
 801f420:	001a      	movs	r2, r3
 801f422:	2364      	movs	r3, #100	; 0x64
 801f424:	435a      	muls	r2, r3
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 801f426:	4b2e      	ldr	r3, [pc, #184]	; (801f4e0 <GUI_Init+0x128>)
 801f428:	79db      	ldrb	r3, [r3, #7]
 801f42a:	0019      	movs	r1, r3
                                                     DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 801f42c:	4b2c      	ldr	r3, [pc, #176]	; (801f4e0 <GUI_Init+0x128>)
 801f42e:	799b      	ldrb	r3, [r3, #6]
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 801f430:	18cb      	adds	r3, r1, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801f432:	0019      	movs	r1, r3
 801f434:	0010      	movs	r0, r2
 801f436:	f7e6 fedb 	bl	80061f0 <__udivsi3>
 801f43a:	0003      	movs	r3, r0
 801f43c:	1c1a      	adds	r2, r3, #0
 801f43e:	237f      	movs	r3, #127	; 0x7f
 801f440:	4013      	ands	r3, r2
 801f442:	b2da      	uxtb	r2, r3
 801f444:	4b27      	ldr	r3, [pc, #156]	; (801f4e4 <GUI_Init+0x12c>)
 801f446:	216b      	movs	r1, #107	; 0x6b
 801f448:	185b      	adds	r3, r3, r1
 801f44a:	217f      	movs	r1, #127	; 0x7f
 801f44c:	400a      	ands	r2, r1
 801f44e:	0010      	movs	r0, r2
 801f450:	789a      	ldrb	r2, [r3, #2]
 801f452:	217f      	movs	r1, #127	; 0x7f
 801f454:	438a      	bics	r2, r1
 801f456:	1c11      	adds	r1, r2, #0
 801f458:	1c02      	adds	r2, r0, #0
 801f45a:	430a      	orrs	r2, r1
 801f45c:	709a      	strb	r2, [r3, #2]
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801f45e:	4b20      	ldr	r3, [pc, #128]	; (801f4e0 <GUI_Init+0x128>)
 801f460:	79db      	ldrb	r3, [r3, #7]
 801f462:	001a      	movs	r2, r3
 801f464:	2364      	movs	r3, #100	; 0x64
 801f466:	435a      	muls	r2, r3
                                               DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 801f468:	4b1e      	ldr	r3, [pc, #120]	; (801f4e4 <GUI_Init+0x12c>)
 801f46a:	216d      	movs	r1, #109	; 0x6d
 801f46c:	5c5b      	ldrb	r3, [r3, r1]
 801f46e:	065b      	lsls	r3, r3, #25
 801f470:	0e5b      	lsrs	r3, r3, #25
 801f472:	b2db      	uxtb	r3, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801f474:	0019      	movs	r1, r3
 801f476:	0010      	movs	r0, r2
 801f478:	f7e6 feba 	bl	80061f0 <__udivsi3>
 801f47c:	0003      	movs	r3, r0
 801f47e:	1c1a      	adds	r2, r3, #0
 801f480:	237f      	movs	r3, #127	; 0x7f
 801f482:	4013      	ands	r3, r2
 801f484:	b2d9      	uxtb	r1, r3
 801f486:	4b17      	ldr	r3, [pc, #92]	; (801f4e4 <GUI_Init+0x12c>)
 801f488:	226b      	movs	r2, #107	; 0x6b
 801f48a:	189b      	adds	r3, r3, r2
 801f48c:	1c0a      	adds	r2, r1, #0
 801f48e:	1890      	adds	r0, r2, r2
 801f490:	785a      	ldrb	r2, [r3, #1]
 801f492:	2101      	movs	r1, #1
 801f494:	400a      	ands	r2, r1
 801f496:	1c11      	adds	r1, r2, #0
 801f498:	1c02      	adds	r2, r0, #0
 801f49a:	430a      	orrs	r2, r1
 801f49c:	705a      	strb	r2, [r3, #1]
                                               DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 801f49e:	4b12      	ldr	r3, [pc, #72]	; (801f4e8 <GUI_Init+0x130>)
 801f4a0:	68fa      	ldr	r2, [r7, #12]
 801f4a2:	601a      	str	r2, [r3, #0]
  pCB_HWPDType        = CB_HWPDType;
 801f4a4:	4b11      	ldr	r3, [pc, #68]	; (801f4ec <GUI_Init+0x134>)
 801f4a6:	68ba      	ldr	r2, [r7, #8]
 801f4a8:	601a      	str	r2, [r3, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 801f4aa:	4b11      	ldr	r3, [pc, #68]	; (801f4f0 <GUI_Init+0x138>)
 801f4ac:	687a      	ldr	r2, [r7, #4]
 801f4ae:	601a      	str	r2, [r3, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 801f4b0:	4b10      	ldr	r3, [pc, #64]	; (801f4f4 <GUI_Init+0x13c>)
 801f4b2:	683a      	ldr	r2, [r7, #0]
 801f4b4:	601a      	str	r2, [r3, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 801f4b6:	4a10      	ldr	r2, [pc, #64]	; (801f4f8 <GUI_Init+0x140>)
 801f4b8:	4910      	ldr	r1, [pc, #64]	; (801f4fc <GUI_Init+0x144>)
 801f4ba:	4b11      	ldr	r3, [pc, #68]	; (801f500 <GUI_Init+0x148>)
 801f4bc:	0018      	movs	r0, r3
 801f4be:	f7fb fe0f 	bl	801b0e0 <USBPD_DPM_SetNotification_GUI>

#if !defined(USBPD_THREADX)
  _status = (USBPD_FunctionalState) GUI_InitOS(NULL);
 801f4c2:	2000      	movs	r0, #0
 801f4c4:	f000 f81e 	bl	801f504 <GUI_InitOS>
 801f4c8:	0002      	movs	r2, r0
 801f4ca:	2117      	movs	r1, #23
 801f4cc:	187b      	adds	r3, r7, r1
 801f4ce:	701a      	strb	r2, [r3, #0]
#endif /* !USBPD_THREADX */
  return _status;
 801f4d0:	187b      	adds	r3, r7, r1
 801f4d2:	781b      	ldrb	r3, [r3, #0]
}
 801f4d4:	0018      	movs	r0, r3
 801f4d6:	46bd      	mov	sp, r7
 801f4d8:	b006      	add	sp, #24
 801f4da:	bd80      	pop	{r7, pc}
 801f4dc:	20004b7d 	.word	0x20004b7d
 801f4e0:	200000f4 	.word	0x200000f4
 801f4e4:	20000108 	.word	0x20000108
 801f4e8:	20004b88 	.word	0x20004b88
 801f4ec:	20004b8c 	.word	0x20004b8c
 801f4f0:	20004b90 	.word	0x20004b90
 801f4f4:	20004b94 	.word	0x20004b94
 801f4f8:	080205e9 	.word	0x080205e9
 801f4fc:	08020519 	.word	0x08020519
 801f500:	0801f8df 	.word	0x0801f8df

0801f504 <GUI_InitOS>:

uint32_t GUI_InitOS(void *MemoryPtr)
{
 801f504:	b590      	push	{r4, r7, lr}
 801f506:	b08d      	sub	sp, #52	; 0x34
 801f508:	af00      	add	r7, sp, #0
 801f50a:	6078      	str	r0, [r7, #4]
  static uint8_t _init = 0;
  GUIOS_INIT();
 801f50c:	2301      	movs	r3, #1
 801f50e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* This init check to keep the compatibility with the previous version of the GUI */
  /* Only threadX required to separate the OS object init with the init code.       */
  if (_init == 0)
 801f510:	4b1f      	ldr	r3, [pc, #124]	; (801f590 <GUI_InitOS+0x8c>)
 801f512:	781b      	ldrb	r3, [r3, #0]
 801f514:	2b00      	cmp	r3, #0
 801f516:	d134      	bne.n	801f582 <GUI_InitOS+0x7e>
  {
    _init = 1;
 801f518:	4b1d      	ldr	r3, [pc, #116]	; (801f590 <GUI_InitOS+0x8c>)
 801f51a:	2201      	movs	r2, #1
 801f51c:	701a      	strb	r2, [r3, #0]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_CREATE_QUEUE(GUIMsgBox, "GUIBOX", GUI_BOX_MESSAGES_MAX, GUIOS_ELEMENT_SIZE);
 801f51e:	2200      	movs	r2, #0
 801f520:	2104      	movs	r1, #4
 801f522:	201e      	movs	r0, #30
 801f524:	f7f8 fdbc 	bl	80180a0 <osMessageQueueNew>
 801f528:	0002      	movs	r2, r0
 801f52a:	4b1a      	ldr	r3, [pc, #104]	; (801f594 <GUI_InitOS+0x90>)
 801f52c:	601a      	str	r2, [r3, #0]
 801f52e:	4b19      	ldr	r3, [pc, #100]	; (801f594 <GUI_InitOS+0x90>)
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	2b00      	cmp	r3, #0
 801f534:	d102      	bne.n	801f53c <GUI_InitOS+0x38>
 801f536:	2300      	movs	r3, #0
 801f538:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f53a:	e023      	b.n	801f584 <GUI_InitOS+0x80>
    GUIOS_CREATE_TASK(GUI_ThreadID, GUI, TaskGUI, OS_GUI_PRIORITY, OS_GUI_STACK_SIZE, &GUIMsgBox);
 801f53c:	2408      	movs	r4, #8
 801f53e:	193b      	adds	r3, r7, r4
 801f540:	0018      	movs	r0, r3
 801f542:	2324      	movs	r3, #36	; 0x24
 801f544:	001a      	movs	r2, r3
 801f546:	2100      	movs	r1, #0
 801f548:	f004 f8c0 	bl	80236cc <memset>
 801f54c:	0021      	movs	r1, r4
 801f54e:	187b      	adds	r3, r7, r1
 801f550:	4a11      	ldr	r2, [pc, #68]	; (801f598 <GUI_InitOS+0x94>)
 801f552:	601a      	str	r2, [r3, #0]
 801f554:	187b      	adds	r3, r7, r1
 801f556:	2296      	movs	r2, #150	; 0x96
 801f558:	00d2      	lsls	r2, r2, #3
 801f55a:	615a      	str	r2, [r3, #20]
 801f55c:	187b      	adds	r3, r7, r1
 801f55e:	2208      	movs	r2, #8
 801f560:	619a      	str	r2, [r3, #24]
 801f562:	187a      	adds	r2, r7, r1
 801f564:	490b      	ldr	r1, [pc, #44]	; (801f594 <GUI_InitOS+0x90>)
 801f566:	4b0d      	ldr	r3, [pc, #52]	; (801f59c <GUI_InitOS+0x98>)
 801f568:	0018      	movs	r0, r3
 801f56a:	f7f8 fc97 	bl	8017e9c <osThreadNew>
 801f56e:	0002      	movs	r2, r0
 801f570:	4b0b      	ldr	r3, [pc, #44]	; (801f5a0 <GUI_InitOS+0x9c>)
 801f572:	601a      	str	r2, [r3, #0]
 801f574:	4b0a      	ldr	r3, [pc, #40]	; (801f5a0 <GUI_InitOS+0x9c>)
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d103      	bne.n	801f584 <GUI_InitOS+0x80>
 801f57c:	2300      	movs	r3, #0
 801f57e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f580:	e000      	b.n	801f584 <GUI_InitOS+0x80>
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS || USBPD_THREADX */
  }

#if defined(_RTOS) || defined(USBPD_THREADX)
error:
 801f582:	46c0      	nop			; (mov r8, r8)
  return(_status);
 801f584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#else
  return(USBPD_ENABLE);
#endif /* _RTOS || USBPD_THREADX */
}
 801f586:	0018      	movs	r0, r3
 801f588:	46bd      	mov	sp, r7
 801f58a:	b00d      	add	sp, #52	; 0x34
 801f58c:	bd90      	pop	{r4, r7, pc}
 801f58e:	46c0      	nop			; (mov r8, r8)
 801f590:	20004c0c 	.word	0x20004c0c
 801f594:	20004b80 	.word	0x20004b80
 801f598:	08024f0c 	.word	0x08024f0c
 801f59c:	0801f5bd 	.word	0x0801f5bd
 801f5a0:	20004b84 	.word	0x20004b84

0801f5a4 <GUI_Start>:
{
  BSP_GUI_EraseDataInFlash();
}

void GUI_Start(void)
{
 801f5a4:	b580      	push	{r7, lr}
 801f5a6:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 801f5a8:	4b03      	ldr	r3, [pc, #12]	; (801f5b8 <GUI_Start+0x14>)
 801f5aa:	0018      	movs	r0, r3
 801f5ac:	f002 ffc6 	bl	802253c <TRACER_EMB_StartRX>
}
 801f5b0:	46c0      	nop			; (mov r8, r8)
 801f5b2:	46bd      	mov	sp, r7
 801f5b4:	bd80      	pop	{r7, pc}
 801f5b6:	46c0      	nop			; (mov r8, r8)
 801f5b8:	0801f7d9 	.word	0x0801f7d9

0801f5bc <TaskGUI>:
#if defined(_RTOS) || defined(USBPD_THREADX)
GUIDEF_TASK_FUNCTION(TaskGUI)
#else
void GUI_Execute(void)
#endif /* _RTOS || USBPD_THREADX */
{
 801f5bc:	b580      	push	{r7, lr}
 801f5be:	b088      	sub	sp, #32
 801f5c0:	af00      	add	r7, sp, #0
 801f5c2:	6078      	str	r0, [r7, #4]
#if defined(_RTOS) || defined(USBPD_THREADX)
  uint32_t _timing = GUI_DEFAULT_WAIT;
 801f5c4:	2301      	movs	r3, #1
 801f5c6:	425b      	negs	r3, r3
 801f5c8:	61fb      	str	r3, [r7, #28]
  GUI_Start();
 801f5ca:	f7ff ffeb 	bl	801f5a4 <GUI_Start>
  do
  {
    GUIOS_QUEUE_EVENT event = 0;
 801f5ce:	2300      	movs	r3, #0
 801f5d0:	613b      	str	r3, [r7, #16]
    GUIOS_GETMESSAGE_QUEUE(GUIMsgBox, _timing, event);
 801f5d2:	4b54      	ldr	r3, [pc, #336]	; (801f724 <TaskGUI+0x168>)
 801f5d4:	6818      	ldr	r0, [r3, #0]
 801f5d6:	69fb      	ldr	r3, [r7, #28]
 801f5d8:	2210      	movs	r2, #16
 801f5da:	18b9      	adds	r1, r7, r2
 801f5dc:	2200      	movs	r2, #0
 801f5de:	f7f8 fe35 	bl	801824c <osMessageQueueGet>
    switch ((GUI_USER_EVENT)(event & 0xFU))
 801f5e2:	693b      	ldr	r3, [r7, #16]
 801f5e4:	b2db      	uxtb	r3, r3
 801f5e6:	001a      	movs	r2, r3
 801f5e8:	230f      	movs	r3, #15
 801f5ea:	4013      	ands	r3, r2
 801f5ec:	d011      	beq.n	801f612 <TaskGUI+0x56>
 801f5ee:	2b01      	cmp	r3, #1
 801f5f0:	d000      	beq.n	801f5f4 <TaskGUI+0x38>
 801f5f2:	e090      	b.n	801f716 <TaskGUI+0x15a>
    {
      case GUI_USER_EVENT_GUI:
      {
        (void)GUI_RXProcess((uint32_t)event);
 801f5f4:	693b      	ldr	r3, [r7, #16]
 801f5f6:	0018      	movs	r0, r3
 801f5f8:	f000 f918 	bl	801f82c <GUI_RXProcess>
        /* Sent an event to check if measurement report has been requested */
        GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_TIMER, 0U);
 801f5fc:	2300      	movs	r3, #0
 801f5fe:	60fb      	str	r3, [r7, #12]
 801f600:	4b48      	ldr	r3, [pc, #288]	; (801f724 <TaskGUI+0x168>)
 801f602:	6818      	ldr	r0, [r3, #0]
 801f604:	230c      	movs	r3, #12
 801f606:	18f9      	adds	r1, r7, r3
 801f608:	2300      	movs	r3, #0
 801f60a:	2200      	movs	r2, #0
 801f60c:	f7f8 fdc2 	bl	8018194 <osMessageQueuePut>
        break;
 801f610:	e082      	b.n	801f718 <TaskGUI+0x15c>
          default:
            break;
        }
        GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* _RTOS || USBPD_THREADX */
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 801f612:	231b      	movs	r3, #27
 801f614:	18fb      	adds	r3, r7, r3
 801f616:	2200      	movs	r2, #0
 801f618:	701a      	strb	r2, [r3, #0]
 801f61a:	e076      	b.n	801f70a <TaskGUI+0x14e>
          /* -------------------------------------------------  */
          /* Check if timeout related to Measurement reporting  */
          /* -------------------------------------------------  */
          /* - Send a GUI Event only if PE is connected
             and Measurement report has been enabled          */
          if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 801f61c:	201b      	movs	r0, #27
 801f61e:	183b      	adds	r3, r7, r0
 801f620:	781b      	ldrb	r3, [r3, #0]
 801f622:	4a41      	ldr	r2, [pc, #260]	; (801f728 <TaskGUI+0x16c>)
 801f624:	009b      	lsls	r3, r3, #2
 801f626:	18d3      	adds	r3, r2, r3
 801f628:	785b      	ldrb	r3, [r3, #1]
 801f62a:	06db      	lsls	r3, r3, #27
 801f62c:	0fdb      	lsrs	r3, r3, #31
 801f62e:	b2db      	uxtb	r3, r3
 801f630:	2b01      	cmp	r3, #1
 801f632:	d15d      	bne.n	801f6f0 <TaskGUI+0x134>
              && (1U == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 801f634:	183b      	adds	r3, r7, r0
 801f636:	781a      	ldrb	r2, [r3, #0]
 801f638:	493c      	ldr	r1, [pc, #240]	; (801f72c <TaskGUI+0x170>)
 801f63a:	0013      	movs	r3, r2
 801f63c:	005b      	lsls	r3, r3, #1
 801f63e:	189b      	adds	r3, r3, r2
 801f640:	005b      	lsls	r3, r3, #1
 801f642:	18cb      	adds	r3, r1, r3
 801f644:	791b      	ldrb	r3, [r3, #4]
 801f646:	061b      	lsls	r3, r3, #24
 801f648:	0fdb      	lsrs	r3, r3, #31
 801f64a:	b2db      	uxtb	r3, r3
 801f64c:	2b01      	cmp	r3, #1
 801f64e:	d14f      	bne.n	801f6f0 <TaskGUI+0x134>
              && (0U != GUI_USER_Params[_instance].u.d.MeasReportValue))
 801f650:	183b      	adds	r3, r7, r0
 801f652:	781a      	ldrb	r2, [r3, #0]
 801f654:	4935      	ldr	r1, [pc, #212]	; (801f72c <TaskGUI+0x170>)
 801f656:	0013      	movs	r3, r2
 801f658:	005b      	lsls	r3, r3, #1
 801f65a:	189b      	adds	r3, r3, r2
 801f65c:	005b      	lsls	r3, r3, #1
 801f65e:	18cb      	adds	r3, r1, r3
 801f660:	791b      	ldrb	r3, [r3, #4]
 801f662:	065b      	lsls	r3, r3, #25
 801f664:	0e5b      	lsrs	r3, r3, #25
 801f666:	b2db      	uxtb	r3, r3
 801f668:	2b00      	cmp	r3, #0
 801f66a:	d041      	beq.n	801f6f0 <TaskGUI+0x134>
          {
            /* Check if timer has expired */
            if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 801f66c:	183b      	adds	r3, r7, r0
 801f66e:	781a      	ldrb	r2, [r3, #0]
 801f670:	4b2f      	ldr	r3, [pc, #188]	; (801f730 <TaskGUI+0x174>)
 801f672:	0052      	lsls	r2, r2, #1
 801f674:	5ad3      	ldrh	r3, [r2, r3]
 801f676:	b29a      	uxth	r2, r3
 801f678:	2380      	movs	r3, #128	; 0x80
 801f67a:	021b      	lsls	r3, r3, #8
 801f67c:	429a      	cmp	r2, r3
 801f67e:	d109      	bne.n	801f694 <TaskGUI+0xd8>
            {
              uint32_t event_mr = GUI_USER_EVENT_GUI
                                  | (_instance << GUI_PE_PORT_NUM_Pos)
 801f680:	183b      	adds	r3, r7, r0
 801f682:	781b      	ldrb	r3, [r3, #0]
 801f684:	061b      	lsls	r3, r3, #24
                                  | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 801f686:	4a2b      	ldr	r2, [pc, #172]	; (801f734 <TaskGUI+0x178>)
 801f688:	4313      	orrs	r3, r2
              uint32_t event_mr = GUI_USER_EVENT_GUI
 801f68a:	617b      	str	r3, [r7, #20]
              (void)GUI_RXProcess(event_mr);
 801f68c:	697b      	ldr	r3, [r7, #20]
 801f68e:	0018      	movs	r0, r3
 801f690:	f000 f8cc 	bl	801f82c <GUI_RXProcess>
            }
            /* Start or Restart Measurement report timer */
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 801f694:	201b      	movs	r0, #27
 801f696:	183b      	adds	r3, r7, r0
 801f698:	781a      	ldrb	r2, [r3, #0]
 801f69a:	4b25      	ldr	r3, [pc, #148]	; (801f730 <TaskGUI+0x174>)
 801f69c:	0052      	lsls	r2, r2, #1
 801f69e:	5ad3      	ldrh	r3, [r2, r3]
 801f6a0:	b29b      	uxth	r3, r3
 801f6a2:	045b      	lsls	r3, r3, #17
 801f6a4:	0c5b      	lsrs	r3, r3, #17
 801f6a6:	2b00      	cmp	r3, #0
 801f6a8:	dc29      	bgt.n	801f6fe <TaskGUI+0x142>
            {
              GUI_START_TIMER(_instance, GUI_TimerMeasReport,
 801f6aa:	183b      	adds	r3, r7, r0
 801f6ac:	781a      	ldrb	r2, [r3, #0]
 801f6ae:	491f      	ldr	r1, [pc, #124]	; (801f72c <TaskGUI+0x170>)
 801f6b0:	0013      	movs	r3, r2
 801f6b2:	005b      	lsls	r3, r3, #1
 801f6b4:	189b      	adds	r3, r3, r2
 801f6b6:	005b      	lsls	r3, r3, #1
 801f6b8:	18cb      	adds	r3, r1, r3
 801f6ba:	791b      	ldrb	r3, [r3, #4]
 801f6bc:	065b      	lsls	r3, r3, #25
 801f6be:	0e5b      	lsrs	r3, r3, #25
 801f6c0:	b2db      	uxtb	r3, r3
 801f6c2:	b29b      	uxth	r3, r3
 801f6c4:	2228      	movs	r2, #40	; 0x28
 801f6c6:	4353      	muls	r3, r2
 801f6c8:	b29b      	uxth	r3, r3
 801f6ca:	183a      	adds	r2, r7, r0
 801f6cc:	7812      	ldrb	r2, [r2, #0]
 801f6ce:	491a      	ldr	r1, [pc, #104]	; (801f738 <TaskGUI+0x17c>)
 801f6d0:	430b      	orrs	r3, r1
 801f6d2:	b299      	uxth	r1, r3
 801f6d4:	4b16      	ldr	r3, [pc, #88]	; (801f730 <TaskGUI+0x174>)
 801f6d6:	0052      	lsls	r2, r2, #1
 801f6d8:	52d1      	strh	r1, [r2, r3]
 801f6da:	2300      	movs	r3, #0
 801f6dc:	60bb      	str	r3, [r7, #8]
 801f6de:	4b11      	ldr	r3, [pc, #68]	; (801f724 <TaskGUI+0x168>)
 801f6e0:	6818      	ldr	r0, [r3, #0]
 801f6e2:	2308      	movs	r3, #8
 801f6e4:	18f9      	adds	r1, r7, r3
 801f6e6:	2300      	movs	r3, #0
 801f6e8:	2200      	movs	r2, #0
 801f6ea:	f7f8 fd53 	bl	8018194 <osMessageQueuePut>
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 801f6ee:	e006      	b.n	801f6fe <TaskGUI+0x142>
            }
          }
          else
          {
            /* Stop measurement report timer */
            GUI_TimerMeasReport[_instance] = 0;
 801f6f0:	231b      	movs	r3, #27
 801f6f2:	18fb      	adds	r3, r7, r3
 801f6f4:	781a      	ldrb	r2, [r3, #0]
 801f6f6:	4b0e      	ldr	r3, [pc, #56]	; (801f730 <TaskGUI+0x174>)
 801f6f8:	0052      	lsls	r2, r2, #1
 801f6fa:	2100      	movs	r1, #0
 801f6fc:	52d1      	strh	r1, [r2, r3]
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 801f6fe:	211b      	movs	r1, #27
 801f700:	187b      	adds	r3, r7, r1
 801f702:	781a      	ldrb	r2, [r3, #0]
 801f704:	187b      	adds	r3, r7, r1
 801f706:	3201      	adds	r2, #1
 801f708:	701a      	strb	r2, [r3, #0]
 801f70a:	231b      	movs	r3, #27
 801f70c:	18fb      	adds	r3, r7, r3
 801f70e:	781b      	ldrb	r3, [r3, #0]
 801f710:	2b00      	cmp	r3, #0
 801f712:	d083      	beq.n	801f61c <TaskGUI+0x60>
          }
        }
#if defined(_RTOS) || defined(USBPD_THREADX)
        break;
 801f714:	e000      	b.n	801f718 <TaskGUI+0x15c>
      }

      default:
        break;
 801f716:	46c0      	nop			; (mov r8, r8)
    }
    _timing = CheckGUITimers();
 801f718:	f000 f810 	bl	801f73c <CheckGUITimers>
 801f71c:	0003      	movs	r3, r0
 801f71e:	61fb      	str	r3, [r7, #28]
  {
 801f720:	e755      	b.n	801f5ce <TaskGUI+0x12>
 801f722:	46c0      	nop			; (mov r8, r8)
 801f724:	20004b80 	.word	0x20004b80
 801f728:	20002f30 	.word	0x20002f30
 801f72c:	20004974 	.word	0x20004974
 801f730:	20004970 	.word	0x20004970
 801f734:	00000711 	.word	0x00000711
 801f738:	ffff8000 	.word	0xffff8000

0801f73c <CheckGUITimers>:
#endif /* _RTOS || USBPD_THREADX */
}

#if defined(_RTOS) || defined(USBPD_THREADX)
static uint32_t CheckGUITimers(void)
{
 801f73c:	b580      	push	{r7, lr}
 801f73e:	b084      	sub	sp, #16
 801f740:	af00      	add	r7, sp, #0
  uint32_t _timing = GUI_DEFAULT_WAIT;
 801f742:	2301      	movs	r3, #1
 801f744:	425b      	negs	r3, r3
 801f746:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 801f748:	230b      	movs	r3, #11
 801f74a:	18fb      	adds	r3, r7, r3
 801f74c:	2200      	movs	r2, #0
 801f74e:	701a      	strb	r2, [r3, #0]
 801f750:	e018      	b.n	801f784 <CheckGUITimers+0x48>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = (uint32_t)(GUI_TimerMeasReport[instance]) & GUI_TIMER_READ_MSK;
 801f752:	230b      	movs	r3, #11
 801f754:	18fb      	adds	r3, r7, r3
 801f756:	781a      	ldrb	r2, [r3, #0]
 801f758:	4b0f      	ldr	r3, [pc, #60]	; (801f798 <CheckGUITimers+0x5c>)
 801f75a:	0052      	lsls	r2, r2, #1
 801f75c:	5ad3      	ldrh	r3, [r2, r3]
 801f75e:	b29b      	uxth	r3, r3
 801f760:	045b      	lsls	r3, r3, #17
 801f762:	0c5b      	lsrs	r3, r3, #17
 801f764:	607b      	str	r3, [r7, #4]
    if (_current_timing > 0U)
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	d005      	beq.n	801f778 <CheckGUITimers+0x3c>
    {
      if (_current_timing < _timing)
 801f76c:	687a      	ldr	r2, [r7, #4]
 801f76e:	68fb      	ldr	r3, [r7, #12]
 801f770:	429a      	cmp	r2, r3
 801f772:	d201      	bcs.n	801f778 <CheckGUITimers+0x3c>
      {
        _timing = _current_timing;
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	60fb      	str	r3, [r7, #12]
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 801f778:	210b      	movs	r1, #11
 801f77a:	187b      	adds	r3, r7, r1
 801f77c:	781a      	ldrb	r2, [r3, #0]
 801f77e:	187b      	adds	r3, r7, r1
 801f780:	3201      	adds	r2, #1
 801f782:	701a      	strb	r2, [r3, #0]
 801f784:	230b      	movs	r3, #11
 801f786:	18fb      	adds	r3, r7, r3
 801f788:	781b      	ldrb	r3, [r3, #0]
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d0e1      	beq.n	801f752 <CheckGUITimers+0x16>
      }
    }
  }
  return _timing;
 801f78e:	68fb      	ldr	r3, [r7, #12]
}
 801f790:	0018      	movs	r0, r3
 801f792:	46bd      	mov	sp, r7
 801f794:	b004      	add	sp, #16
 801f796:	bd80      	pop	{r7, pc}
 801f798:	20004970 	.word	0x20004970

0801f79c <GUI_TimerCounter>:
#endif /* RTOS || USBPD_THREADX */

void GUI_TimerCounter(void)
{
 801f79c:	b580      	push	{r7, lr}
 801f79e:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1U == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 801f7a0:	4b0b      	ldr	r3, [pc, #44]	; (801f7d0 <GUI_TimerCounter+0x34>)
 801f7a2:	791b      	ldrb	r3, [r3, #4]
 801f7a4:	227f      	movs	r2, #127	; 0x7f
 801f7a6:	4393      	bics	r3, r2
 801f7a8:	b2db      	uxtb	r3, r3
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d00c      	beq.n	801f7c8 <GUI_TimerCounter+0x2c>
  {
    if ((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0U)
 801f7ae:	4b09      	ldr	r3, [pc, #36]	; (801f7d4 <GUI_TimerCounter+0x38>)
 801f7b0:	881b      	ldrh	r3, [r3, #0]
 801f7b2:	b29b      	uxth	r3, r3
 801f7b4:	045b      	lsls	r3, r3, #17
 801f7b6:	0c5b      	lsrs	r3, r3, #17
 801f7b8:	d006      	beq.n	801f7c8 <GUI_TimerCounter+0x2c>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 801f7ba:	4b06      	ldr	r3, [pc, #24]	; (801f7d4 <GUI_TimerCounter+0x38>)
 801f7bc:	881b      	ldrh	r3, [r3, #0]
 801f7be:	b29b      	uxth	r3, r3
 801f7c0:	3b01      	subs	r3, #1
 801f7c2:	b29a      	uxth	r2, r3
 801f7c4:	4b03      	ldr	r3, [pc, #12]	; (801f7d4 <GUI_TimerCounter+0x38>)
 801f7c6:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !(_RTOS || USBPD_THREADX) && USE_STM32_UTILITY_OS) */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 801f7c8:	46c0      	nop			; (mov r8, r8)
 801f7ca:	46bd      	mov	sp, r7
 801f7cc:	bd80      	pop	{r7, pc}
 801f7ce:	46c0      	nop			; (mov r8, r8)
 801f7d0:	20004974 	.word	0x20004974
 801f7d4:	20004970 	.word	0x20004970

0801f7d8 <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 801f7d8:	b580      	push	{r7, lr}
 801f7da:	b084      	sub	sp, #16
 801f7dc:	af00      	add	r7, sp, #0
 801f7de:	0002      	movs	r2, r0
 801f7e0:	1dfb      	adds	r3, r7, #7
 801f7e2:	701a      	strb	r2, [r3, #0]
 801f7e4:	1dbb      	adds	r3, r7, #6
 801f7e6:	1c0a      	adds	r2, r1, #0
 801f7e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801f7ea:	b672      	cpsid	i
}
 801f7ec:	46c0      	nop			; (mov r8, r8)
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 801f7ee:	1dbb      	adds	r3, r7, #6
 801f7f0:	781a      	ldrb	r2, [r3, #0]
 801f7f2:	1dfb      	adds	r3, r7, #7
 801f7f4:	781b      	ldrb	r3, [r3, #0]
 801f7f6:	0011      	movs	r1, r2
 801f7f8:	0018      	movs	r0, r3
 801f7fa:	f000 f891 	bl	801f920 <GUI_GetMessage>
 801f7fe:	0003      	movs	r3, r0
 801f800:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 801f802:	b662      	cpsie	i
}
 801f804:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
  if (event == 1U)
 801f806:	68fb      	ldr	r3, [r7, #12]
 801f808:	2b01      	cmp	r3, #1
 801f80a:	d109      	bne.n	801f820 <GUI_CALLBACK_RX+0x48>
  {
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_GUI, 0U);
 801f80c:	2301      	movs	r3, #1
 801f80e:	60bb      	str	r3, [r7, #8]
 801f810:	4b05      	ldr	r3, [pc, #20]	; (801f828 <GUI_CALLBACK_RX+0x50>)
 801f812:	6818      	ldr	r0, [r3, #0]
 801f814:	2308      	movs	r3, #8
 801f816:	18f9      	adds	r1, r7, r3
 801f818:	2300      	movs	r3, #0
 801f81a:	2200      	movs	r2, #0
 801f81c:	f7f8 fcba 	bl	8018194 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 801f820:	46c0      	nop			; (mov r8, r8)
 801f822:	46bd      	mov	sp, r7
 801f824:	b004      	add	sp, #16
 801f826:	bd80      	pop	{r7, pc}
 801f828:	20004b80 	.word	0x20004b80

0801f82c <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 801f82c:	b5b0      	push	{r4, r5, r7, lr}
 801f82e:	b086      	sub	sp, #24
 801f830:	af00      	add	r7, sp, #0
 801f832:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0U == (Event & GUI_PE_NOTIF_Msk))
 801f834:	687a      	ldr	r2, [r7, #4]
 801f836:	23ff      	movs	r3, #255	; 0xff
 801f838:	011b      	lsls	r3, r3, #4
 801f83a:	4013      	ands	r3, r2
 801f83c:	d11f      	bne.n	801f87e <GUI_RXProcess+0x52>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 801f83e:	2515      	movs	r5, #21
 801f840:	197c      	adds	r4, r7, r5
 801f842:	230f      	movs	r3, #15
 801f844:	18fa      	adds	r2, r7, r3
 801f846:	2310      	movs	r3, #16
 801f848:	18fb      	adds	r3, r7, r3
 801f84a:	0011      	movs	r1, r2
 801f84c:	0018      	movs	r0, r3
 801f84e:	f000 f96b 	bl	801fb28 <GUI_SendAnswer>
 801f852:	0003      	movs	r3, r0
 801f854:	7023      	strb	r3, [r4, #0]

    switch (state)
 801f856:	197b      	adds	r3, r7, r5
 801f858:	781b      	ldrb	r3, [r3, #0]
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	d039      	beq.n	801f8d2 <GUI_RXProcess+0xa6>
 801f85e:	2b02      	cmp	r3, #2
 801f860:	d104      	bne.n	801f86c <GUI_RXProcess+0x40>
    {
      case GUI_STATE_RESET:
        /* DPM_RESET_REQ received by the device */
        /* Save parameters in FLASH */
        (void)BSP_GUI_SaveDataInFlash();
 801f862:	f7fe ff71 	bl	801e748 <BSP_GUI_SaveDataInFlash>
        HAL_NVIC_SystemReset();
 801f866:	f7eb fbec 	bl	800b042 <HAL_NVIC_SystemReset>
        break;
 801f86a:	e033      	b.n	801f8d4 <GUI_RXProcess+0xa8>
      case GUI_STATE_INIT:
        /* DPM_INIT_REQ received by the device */
        break;
      default:
        /* Another GUI messages received by the device */
        TRACER_EMB_Add(msg, size);
 801f86c:	693a      	ldr	r2, [r7, #16]
 801f86e:	230f      	movs	r3, #15
 801f870:	18fb      	adds	r3, r7, r3
 801f872:	781b      	ldrb	r3, [r3, #0]
 801f874:	0019      	movs	r1, r3
 801f876:	0010      	movs	r0, r2
 801f878:	f002 fdf6 	bl	8022468 <TRACER_EMB_Add>
        break;
 801f87c:	e02a      	b.n	801f8d4 <GUI_RXProcess+0xa8>
    }
  }
  else
  {
    uint16_t type_event = ((uint16_t)Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	b29b      	uxth	r3, r3
 801f882:	091b      	lsrs	r3, r3, #4
 801f884:	b29a      	uxth	r2, r3
 801f886:	2016      	movs	r0, #22
 801f888:	183b      	adds	r3, r7, r0
 801f88a:	21ff      	movs	r1, #255	; 0xff
 801f88c:	400a      	ands	r2, r1
 801f88e:	801a      	strh	r2, [r3, #0]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 801f890:	183b      	adds	r3, r7, r0
 801f892:	881b      	ldrh	r3, [r3, #0]
 801f894:	2b71      	cmp	r3, #113	; 0x71
 801f896:	d10e      	bne.n	801f8b6 <GUI_RXProcess+0x8a>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	0e1b      	lsrs	r3, r3, #24
 801f89c:	2203      	movs	r2, #3
 801f89e:	4013      	ands	r3, r2
 801f8a0:	001c      	movs	r4, r3
 801f8a2:	f7e9 fd8d 	bl	80093c0 <HAL_GetTick>
 801f8a6:	0002      	movs	r2, r0
 801f8a8:	2380      	movs	r3, #128	; 0x80
 801f8aa:	011b      	lsls	r3, r3, #4
 801f8ac:	0019      	movs	r1, r3
 801f8ae:	0020      	movs	r0, r4
 801f8b0:	f000 f815 	bl	801f8de <GUI_FormatAndSendNotification>
 801f8b4:	e00e      	b.n	801f8d4 <GUI_RXProcess+0xa8>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	0e1b      	lsrs	r3, r3, #24
 801f8ba:	2203      	movs	r2, #3
 801f8bc:	4013      	ands	r3, r2
 801f8be:	0018      	movs	r0, r3
 801f8c0:	2316      	movs	r3, #22
 801f8c2:	18fb      	adds	r3, r7, r3
 801f8c4:	881a      	ldrh	r2, [r3, #0]
 801f8c6:	2380      	movs	r3, #128	; 0x80
 801f8c8:	019b      	lsls	r3, r3, #6
 801f8ca:	0019      	movs	r1, r3
 801f8cc:	f000 f807 	bl	801f8de <GUI_FormatAndSendNotification>
 801f8d0:	e000      	b.n	801f8d4 <GUI_RXProcess+0xa8>
        break;
 801f8d2:	46c0      	nop			; (mov r8, r8)
                                          GUI_NOTIF_PE_EVENT,
                                          type_event);
    }
  }
  return 0;
 801f8d4:	2300      	movs	r3, #0
}
 801f8d6:	0018      	movs	r0, r3
 801f8d8:	46bd      	mov	sp, r7
 801f8da:	b006      	add	sp, #24
 801f8dc:	bdb0      	pop	{r4, r5, r7, pc}

0801f8de <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 801f8de:	b5b0      	push	{r4, r5, r7, lr}
 801f8e0:	b088      	sub	sp, #32
 801f8e2:	af02      	add	r7, sp, #8
 801f8e4:	60f8      	str	r0, [r7, #12]
 801f8e6:	60b9      	str	r1, [r7, #8]
 801f8e8:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification((uint8_t)PortNum, &msg, &size, TypeNotification, Value))
 801f8ea:	68fb      	ldr	r3, [r7, #12]
 801f8ec:	b2d8      	uxtb	r0, r3
 801f8ee:	68bc      	ldr	r4, [r7, #8]
 801f8f0:	2513      	movs	r5, #19
 801f8f2:	197a      	adds	r2, r7, r5
 801f8f4:	2314      	movs	r3, #20
 801f8f6:	18f9      	adds	r1, r7, r3
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	9300      	str	r3, [sp, #0]
 801f8fc:	0023      	movs	r3, r4
 801f8fe:	f000 fa03 	bl	801fd08 <GUI_SendNotification>
 801f902:	1e03      	subs	r3, r0, #0
 801f904:	d006      	beq.n	801f914 <GUI_FormatAndSendNotification+0x36>
  {
    TRACER_EMB_Add(msg, size);
 801f906:	697a      	ldr	r2, [r7, #20]
 801f908:	197b      	adds	r3, r7, r5
 801f90a:	781b      	ldrb	r3, [r3, #0]
 801f90c:	0019      	movs	r1, r3
 801f90e:	0010      	movs	r0, r2
 801f910:	f002 fdaa 	bl	8022468 <TRACER_EMB_Add>
  }
  return 0;
 801f914:	2300      	movs	r3, #0
}
 801f916:	0018      	movs	r0, r3
 801f918:	46bd      	mov	sp, r7
 801f91a:	b006      	add	sp, #24
 801f91c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801f920 <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 801f920:	b580      	push	{r7, lr}
 801f922:	b084      	sub	sp, #16
 801f924:	af00      	add	r7, sp, #0
 801f926:	0002      	movs	r2, r0
 801f928:	1dfb      	adds	r3, r7, #7
 801f92a:	701a      	strb	r2, [r3, #0]
 801f92c:	1dbb      	adds	r3, r7, #6
 801f92e:	1c0a      	adds	r2, r1, #0
 801f930:	701a      	strb	r2, [r3, #0]
  uint32_t status = 0;
 801f932:	2300      	movs	r3, #0
 801f934:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if (cursor < TLV_SIZE_MAX)
 801f936:	4b76      	ldr	r3, [pc, #472]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801f938:	881b      	ldrh	r3, [r3, #0]
 801f93a:	2bff      	cmp	r3, #255	; 0xff
 801f93c:	d80b      	bhi.n	801f956 <GUI_GetMessage+0x36>
  {
    PtrDataRx[cursor] = Character;
 801f93e:	4b74      	ldr	r3, [pc, #464]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801f940:	881b      	ldrh	r3, [r3, #0]
 801f942:	0019      	movs	r1, r3
 801f944:	4b73      	ldr	r3, [pc, #460]	; (801fb14 <GUI_GetMessage+0x1f4>)
 801f946:	1dfa      	adds	r2, r7, #7
 801f948:	7812      	ldrb	r2, [r2, #0]
 801f94a:	545a      	strb	r2, [r3, r1]
    counter = 0U;
    Rstate = Rstart;
    return 0;
  }

  if (Error != 0U)
 801f94c:	1dbb      	adds	r3, r7, #6
 801f94e:	781b      	ldrb	r3, [r3, #0]
 801f950:	2b00      	cmp	r3, #0
 801f952:	d00e      	beq.n	801f972 <GUI_GetMessage+0x52>
 801f954:	e00a      	b.n	801f96c <GUI_GetMessage+0x4c>
    cursor = 0U;
 801f956:	4b6e      	ldr	r3, [pc, #440]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801f958:	2200      	movs	r2, #0
 801f95a:	801a      	strh	r2, [r3, #0]
    counter = 0U;
 801f95c:	4b6e      	ldr	r3, [pc, #440]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801f95e:	2200      	movs	r2, #0
 801f960:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 801f962:	4b6e      	ldr	r3, [pc, #440]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801f964:	2200      	movs	r2, #0
 801f966:	701a      	strb	r2, [r3, #0]
    return 0;
 801f968:	2300      	movs	r3, #0
 801f96a:	e0cc      	b.n	801fb06 <GUI_GetMessage+0x1e6>
  {
    Rstate = Rerror;
 801f96c:	4b6b      	ldr	r3, [pc, #428]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801f96e:	2204      	movs	r2, #4
 801f970:	701a      	strb	r2, [r3, #0]
  }

  switch (Rstate)
 801f972:	4b6a      	ldr	r3, [pc, #424]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801f974:	781b      	ldrb	r3, [r3, #0]
 801f976:	2b04      	cmp	r3, #4
 801f978:	d900      	bls.n	801f97c <GUI_GetMessage+0x5c>
 801f97a:	e0b4      	b.n	801fae6 <GUI_GetMessage+0x1c6>
 801f97c:	009a      	lsls	r2, r3, #2
 801f97e:	4b68      	ldr	r3, [pc, #416]	; (801fb20 <GUI_GetMessage+0x200>)
 801f980:	18d3      	adds	r3, r2, r3
 801f982:	681b      	ldr	r3, [r3, #0]
 801f984:	469f      	mov	pc, r3
  {
    case Rstart :
      if (PtrDataRx[cursor] == TLV_SOF)
 801f986:	4b62      	ldr	r3, [pc, #392]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801f988:	881b      	ldrh	r3, [r3, #0]
 801f98a:	001a      	movs	r2, r3
 801f98c:	4b61      	ldr	r3, [pc, #388]	; (801fb14 <GUI_GetMessage+0x1f4>)
 801f98e:	5c9b      	ldrb	r3, [r3, r2]
 801f990:	2bfd      	cmp	r3, #253	; 0xfd
 801f992:	d106      	bne.n	801f9a2 <GUI_GetMessage+0x82>
      {
        counter++;
 801f994:	4b60      	ldr	r3, [pc, #384]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801f996:	881b      	ldrh	r3, [r3, #0]
 801f998:	3301      	adds	r3, #1
 801f99a:	b29a      	uxth	r2, r3
 801f99c:	4b5e      	ldr	r3, [pc, #376]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801f99e:	801a      	strh	r2, [r3, #0]
 801f9a0:	e006      	b.n	801f9b0 <GUI_GetMessage+0x90>
      }
      else
      {
        counter = 0U;
 801f9a2:	4b5d      	ldr	r3, [pc, #372]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801f9a4:	2200      	movs	r2, #0
 801f9a6:	801a      	strh	r2, [r3, #0]
        /* cursor is unsigned, but it will inevitably increments at the end of function,
           and we need a 0 at the next pass here */
        cursor = 0xFFFFU;
 801f9a8:	4b59      	ldr	r3, [pc, #356]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801f9aa:	2201      	movs	r2, #1
 801f9ac:	4252      	negs	r2, r2
 801f9ae:	801a      	strh	r2, [r3, #0]
      }

      if (counter == 4U) /* The whole SOF is received */
 801f9b0:	4b59      	ldr	r3, [pc, #356]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801f9b2:	881b      	ldrh	r3, [r3, #0]
 801f9b4:	2b04      	cmp	r3, #4
 801f9b6:	d000      	beq.n	801f9ba <GUI_GetMessage+0x9a>
 801f9b8:	e097      	b.n	801faea <GUI_GetMessage+0x1ca>
      {
        counter = 0U;
 801f9ba:	4b57      	ldr	r3, [pc, #348]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801f9bc:	2200      	movs	r2, #0
 801f9be:	801a      	strh	r2, [r3, #0]
        Rstate = Rsize;
 801f9c0:	4b56      	ldr	r3, [pc, #344]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801f9c2:	2202      	movs	r2, #2
 801f9c4:	701a      	strb	r2, [r3, #0]
      }
      break;
 801f9c6:	e090      	b.n	801faea <GUI_GetMessage+0x1ca>
    case Rsize :
      counter++;
 801f9c8:	4b53      	ldr	r3, [pc, #332]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801f9ca:	881b      	ldrh	r3, [r3, #0]
 801f9cc:	3301      	adds	r3, #1
 801f9ce:	b29a      	uxth	r2, r3
 801f9d0:	4b51      	ldr	r3, [pc, #324]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801f9d2:	801a      	strh	r2, [r3, #0]

      if (counter == 3U) /* We have received the size */
 801f9d4:	4b50      	ldr	r3, [pc, #320]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801f9d6:	881b      	ldrh	r3, [r3, #0]
 801f9d8:	2b03      	cmp	r3, #3
 801f9da:	d000      	beq.n	801f9de <GUI_GetMessage+0xbe>
 801f9dc:	e087      	b.n	801faee <GUI_GetMessage+0x1ce>
      {
        currentSize = (uint16_t)((PtrDataRx[cursor - 1U]) << 8) + (uint16_t)(PtrDataRx[cursor]);
 801f9de:	4b4c      	ldr	r3, [pc, #304]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801f9e0:	881b      	ldrh	r3, [r3, #0]
 801f9e2:	3b01      	subs	r3, #1
 801f9e4:	4a4b      	ldr	r2, [pc, #300]	; (801fb14 <GUI_GetMessage+0x1f4>)
 801f9e6:	5cd3      	ldrb	r3, [r2, r3]
 801f9e8:	b29b      	uxth	r3, r3
 801f9ea:	021b      	lsls	r3, r3, #8
 801f9ec:	b29a      	uxth	r2, r3
 801f9ee:	4b48      	ldr	r3, [pc, #288]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801f9f0:	881b      	ldrh	r3, [r3, #0]
 801f9f2:	0019      	movs	r1, r3
 801f9f4:	4b47      	ldr	r3, [pc, #284]	; (801fb14 <GUI_GetMessage+0x1f4>)
 801f9f6:	5c5b      	ldrb	r3, [r3, r1]
 801f9f8:	b29b      	uxth	r3, r3
 801f9fa:	18d3      	adds	r3, r2, r3
 801f9fc:	b29a      	uxth	r2, r3
 801f9fe:	4b49      	ldr	r3, [pc, #292]	; (801fb24 <GUI_GetMessage+0x204>)
 801fa00:	801a      	strh	r2, [r3, #0]
        if (0U == currentSize)
 801fa02:	4b48      	ldr	r3, [pc, #288]	; (801fb24 <GUI_GetMessage+0x204>)
 801fa04:	881b      	ldrh	r3, [r3, #0]
 801fa06:	2b00      	cmp	r3, #0
 801fa08:	d103      	bne.n	801fa12 <GUI_GetMessage+0xf2>
        {
          Rstate = Rend;
 801fa0a:	4b44      	ldr	r3, [pc, #272]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801fa0c:	2203      	movs	r2, #3
 801fa0e:	701a      	strb	r2, [r3, #0]
 801fa10:	e002      	b.n	801fa18 <GUI_GetMessage+0xf8>
        }
        else
        {
          Rstate = RonGoing;
 801fa12:	4b42      	ldr	r3, [pc, #264]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801fa14:	2201      	movs	r2, #1
 801fa16:	701a      	strb	r2, [r3, #0]
        }
        counter = 0U;
 801fa18:	4b3f      	ldr	r3, [pc, #252]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fa1a:	2200      	movs	r2, #0
 801fa1c:	801a      	strh	r2, [r3, #0]
      }
      break;
 801fa1e:	e066      	b.n	801faee <GUI_GetMessage+0x1ce>
    case RonGoing :
      counter++;
 801fa20:	4b3d      	ldr	r3, [pc, #244]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fa22:	881b      	ldrh	r3, [r3, #0]
 801fa24:	3301      	adds	r3, #1
 801fa26:	b29a      	uxth	r2, r3
 801fa28:	4b3b      	ldr	r3, [pc, #236]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fa2a:	801a      	strh	r2, [r3, #0]

      if (counter == currentSize)
 801fa2c:	4b3a      	ldr	r3, [pc, #232]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fa2e:	881a      	ldrh	r2, [r3, #0]
 801fa30:	4b3c      	ldr	r3, [pc, #240]	; (801fb24 <GUI_GetMessage+0x204>)
 801fa32:	881b      	ldrh	r3, [r3, #0]
 801fa34:	429a      	cmp	r2, r3
 801fa36:	d15c      	bne.n	801faf2 <GUI_GetMessage+0x1d2>
      {
        /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
        counter = 0U;
 801fa38:	4b37      	ldr	r3, [pc, #220]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fa3a:	2200      	movs	r2, #0
 801fa3c:	801a      	strh	r2, [r3, #0]
        Rstate = Rend;
 801fa3e:	4b37      	ldr	r3, [pc, #220]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801fa40:	2203      	movs	r2, #3
 801fa42:	701a      	strb	r2, [r3, #0]
      }
      break;
 801fa44:	e055      	b.n	801faf2 <GUI_GetMessage+0x1d2>
    case Rend :
      counter++;
 801fa46:	4b34      	ldr	r3, [pc, #208]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fa48:	881b      	ldrh	r3, [r3, #0]
 801fa4a:	3301      	adds	r3, #1
 801fa4c:	b29a      	uxth	r2, r3
 801fa4e:	4b32      	ldr	r3, [pc, #200]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fa50:	801a      	strh	r2, [r3, #0]
      if ((PtrDataRx[cursor] == TLV_EOF)
 801fa52:	4b2f      	ldr	r3, [pc, #188]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801fa54:	881b      	ldrh	r3, [r3, #0]
 801fa56:	001a      	movs	r2, r3
 801fa58:	4b2e      	ldr	r3, [pc, #184]	; (801fb14 <GUI_GetMessage+0x1f4>)
 801fa5a:	5c9b      	ldrb	r3, [r3, r2]
 801fa5c:	2ba5      	cmp	r3, #165	; 0xa5
 801fa5e:	d124      	bne.n	801faaa <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 1U] == TLV_EOF)
 801fa60:	4b2b      	ldr	r3, [pc, #172]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801fa62:	881b      	ldrh	r3, [r3, #0]
 801fa64:	3b01      	subs	r3, #1
 801fa66:	4a2b      	ldr	r2, [pc, #172]	; (801fb14 <GUI_GetMessage+0x1f4>)
 801fa68:	5cd3      	ldrb	r3, [r2, r3]
 801fa6a:	2ba5      	cmp	r3, #165	; 0xa5
 801fa6c:	d11d      	bne.n	801faaa <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 2U] == TLV_EOF)
 801fa6e:	4b28      	ldr	r3, [pc, #160]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801fa70:	881b      	ldrh	r3, [r3, #0]
 801fa72:	3b02      	subs	r3, #2
 801fa74:	4a27      	ldr	r2, [pc, #156]	; (801fb14 <GUI_GetMessage+0x1f4>)
 801fa76:	5cd3      	ldrb	r3, [r2, r3]
 801fa78:	2ba5      	cmp	r3, #165	; 0xa5
 801fa7a:	d116      	bne.n	801faaa <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 3U] == TLV_EOF))
 801fa7c:	4b24      	ldr	r3, [pc, #144]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801fa7e:	881b      	ldrh	r3, [r3, #0]
 801fa80:	3b03      	subs	r3, #3
 801fa82:	4a24      	ldr	r2, [pc, #144]	; (801fb14 <GUI_GetMessage+0x1f4>)
 801fa84:	5cd3      	ldrb	r3, [r2, r3]
 801fa86:	2ba5      	cmp	r3, #165	; 0xa5
 801fa88:	d10f      	bne.n	801faaa <GUI_GetMessage+0x18a>
      {
        /* The semaphore must be given only in this case, because otherwise
           it means we didn't receive the correct size of bytes */
        if (counter == 4U)
 801fa8a:	4b23      	ldr	r3, [pc, #140]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fa8c:	881b      	ldrh	r3, [r3, #0]
 801fa8e:	2b04      	cmp	r3, #4
 801fa90:	d101      	bne.n	801fa96 <GUI_GetMessage+0x176>
        {
          status = 1U;
 801fa92:	2301      	movs	r3, #1
 801fa94:	60fb      	str	r3, [r7, #12]
        }
        counter = 0U;
 801fa96:	4b20      	ldr	r3, [pc, #128]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fa98:	2200      	movs	r2, #0
 801fa9a:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 801fa9c:	4b1c      	ldr	r3, [pc, #112]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801fa9e:	2201      	movs	r2, #1
 801faa0:	4252      	negs	r2, r2
 801faa2:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 801faa4:	4b1d      	ldr	r3, [pc, #116]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801faa6:	2200      	movs	r2, #0
 801faa8:	701a      	strb	r2, [r3, #0]
      }

      if (cursor == (currentSize + 11U))
 801faaa:	4b19      	ldr	r3, [pc, #100]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801faac:	881b      	ldrh	r3, [r3, #0]
 801faae:	001a      	movs	r2, r3
 801fab0:	4b1c      	ldr	r3, [pc, #112]	; (801fb24 <GUI_GetMessage+0x204>)
 801fab2:	881b      	ldrh	r3, [r3, #0]
 801fab4:	330b      	adds	r3, #11
 801fab6:	429a      	cmp	r2, r3
 801fab8:	d11d      	bne.n	801faf6 <GUI_GetMessage+0x1d6>
      {
        /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
        counter = 0U;
 801faba:	4b17      	ldr	r3, [pc, #92]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fabc:	2200      	movs	r2, #0
 801fabe:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 801fac0:	4b13      	ldr	r3, [pc, #76]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801fac2:	2201      	movs	r2, #1
 801fac4:	4252      	negs	r2, r2
 801fac6:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 801fac8:	4b14      	ldr	r3, [pc, #80]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801faca:	2200      	movs	r2, #0
 801facc:	701a      	strb	r2, [r3, #0]
      }
      break;
 801face:	e012      	b.n	801faf6 <GUI_GetMessage+0x1d6>
    case Rerror :
      counter = 0U;
 801fad0:	4b11      	ldr	r3, [pc, #68]	; (801fb18 <GUI_GetMessage+0x1f8>)
 801fad2:	2200      	movs	r2, #0
 801fad4:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFFU;
 801fad6:	4b0e      	ldr	r3, [pc, #56]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801fad8:	2201      	movs	r2, #1
 801fada:	4252      	negs	r2, r2
 801fadc:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 801fade:	4b0f      	ldr	r3, [pc, #60]	; (801fb1c <GUI_GetMessage+0x1fc>)
 801fae0:	2200      	movs	r2, #0
 801fae2:	701a      	strb	r2, [r3, #0]
      break;
 801fae4:	e008      	b.n	801faf8 <GUI_GetMessage+0x1d8>
    default:
      break;
 801fae6:	46c0      	nop			; (mov r8, r8)
 801fae8:	e006      	b.n	801faf8 <GUI_GetMessage+0x1d8>
      break;
 801faea:	46c0      	nop			; (mov r8, r8)
 801faec:	e004      	b.n	801faf8 <GUI_GetMessage+0x1d8>
      break;
 801faee:	46c0      	nop			; (mov r8, r8)
 801faf0:	e002      	b.n	801faf8 <GUI_GetMessage+0x1d8>
      break;
 801faf2:	46c0      	nop			; (mov r8, r8)
 801faf4:	e000      	b.n	801faf8 <GUI_GetMessage+0x1d8>
      break;
 801faf6:	46c0      	nop			; (mov r8, r8)
  }

  cursor++;
 801faf8:	4b05      	ldr	r3, [pc, #20]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801fafa:	881b      	ldrh	r3, [r3, #0]
 801fafc:	3301      	adds	r3, #1
 801fafe:	b29a      	uxth	r2, r3
 801fb00:	4b03      	ldr	r3, [pc, #12]	; (801fb10 <GUI_GetMessage+0x1f0>)
 801fb02:	801a      	strh	r2, [r3, #0]
  return status;
 801fb04:	68fb      	ldr	r3, [r7, #12]
}
 801fb06:	0018      	movs	r0, r3
 801fb08:	46bd      	mov	sp, r7
 801fb0a:	b004      	add	sp, #16
 801fb0c:	bd80      	pop	{r7, pc}
 801fb0e:	46c0      	nop			; (mov r8, r8)
 801fb10:	20004c0e 	.word	0x20004c0e
 801fb14:	2000497c 	.word	0x2000497c
 801fb18:	20004c10 	.word	0x20004c10
 801fb1c:	20004c12 	.word	0x20004c12
 801fb20:	08025244 	.word	0x08025244
 801fb24:	20004c14 	.word	0x20004c14

0801fb28 <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 801fb28:	b590      	push	{r4, r7, lr}
 801fb2a:	b085      	sub	sp, #20
 801fb2c:	af00      	add	r7, sp, #0
 801fb2e:	6078      	str	r0, [r7, #4]
 801fb30:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 801fb32:	4b70      	ldr	r3, [pc, #448]	; (801fcf4 <GUI_SendAnswer+0x1cc>)
 801fb34:	791a      	ldrb	r2, [r3, #4]
 801fb36:	230f      	movs	r3, #15
 801fb38:	18fb      	adds	r3, r7, r3
 801fb3a:	0952      	lsrs	r2, r2, #5
 801fb3c:	701a      	strb	r2, [r3, #0]

  /* Do the appropriate treatment in response to what we have received */
  switch (PtrDataRx[TLV_TAG_POSITION] & 0x1FU)
 801fb3e:	4b6d      	ldr	r3, [pc, #436]	; (801fcf4 <GUI_SendAnswer+0x1cc>)
 801fb40:	791b      	ldrb	r3, [r3, #4]
 801fb42:	001a      	movs	r2, r3
 801fb44:	231f      	movs	r3, #31
 801fb46:	4013      	ands	r3, r2
 801fb48:	2b10      	cmp	r3, #16
 801fb4a:	d900      	bls.n	801fb4e <GUI_SendAnswer+0x26>
 801fb4c:	e0be      	b.n	801fccc <GUI_SendAnswer+0x1a4>
 801fb4e:	009a      	lsls	r2, r3, #2
 801fb50:	4b69      	ldr	r3, [pc, #420]	; (801fcf8 <GUI_SendAnswer+0x1d0>)
 801fb52:	18d3      	adds	r3, r2, r3
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	469f      	mov	pc, r3
  {
    case DPM_RESET_REQ:
      /* Reset*/
      return GUI_STATE_RESET;
 801fb58:	2302      	movs	r3, #2
 801fb5a:	e0c7      	b.n	801fcec <GUI_SendAnswer+0x1c4>

    case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 801fb5c:	4a67      	ldr	r2, [pc, #412]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fb5e:	240f      	movs	r4, #15
 801fb60:	193b      	adds	r3, r7, r4
 801fb62:	781b      	ldrb	r3, [r3, #0]
 801fb64:	0011      	movs	r1, r2
 801fb66:	0018      	movs	r0, r3
 801fb68:	f000 fe2c 	bl	80207c4 <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	4a63      	ldr	r2, [pc, #396]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fb70:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 801fb72:	4b62      	ldr	r3, [pc, #392]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fb74:	0018      	movs	r0, r3
 801fb76:	f7ff fbe9 	bl	801f34c <TLV_get_string_length>
 801fb7a:	0003      	movs	r3, r0
 801fb7c:	b2db      	uxtb	r3, r3
 801fb7e:	3308      	adds	r3, #8
 801fb80:	b2da      	uxtb	r2, r3
 801fb82:	683b      	ldr	r3, [r7, #0]
 801fb84:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	681a      	ldr	r2, [r3, #0]
 801fb8a:	683b      	ldr	r3, [r7, #0]
 801fb8c:	781b      	ldrb	r3, [r3, #0]
 801fb8e:	0019      	movs	r1, r3
 801fb90:	0010      	movs	r0, r2
 801fb92:	f002 fc69 	bl	8022468 <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 801fb96:	4b5a      	ldr	r3, [pc, #360]	; (801fd00 <GUI_SendAnswer+0x1d8>)
 801fb98:	2201      	movs	r2, #1
 801fb9a:	701a      	strb	r2, [r3, #0]
      if (0U == port)
 801fb9c:	193b      	adds	r3, r7, r4
 801fb9e:	781b      	ldrb	r3, [r3, #0]
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	d105      	bne.n	801fbb0 <GUI_SendAnswer+0x88>
      {
        /* Send a notification all the port */
        (void)GUI_FormatAndSendNotification(USBPD_PORT_0,
 801fba4:	4b57      	ldr	r3, [pc, #348]	; (801fd04 <GUI_SendAnswer+0x1dc>)
 801fba6:	2270      	movs	r2, #112	; 0x70
 801fba8:	0019      	movs	r1, r3
 801fbaa:	2000      	movs	r0, #0
 801fbac:	f7ff fe97 	bl	801f8de <GUI_FormatAndSendNotification>
        (void)GUI_FormatAndSendNotification(USBPD_PORT_1,
                                            GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP,
                                            USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 801fbb0:	2300      	movs	r3, #0
 801fbb2:	e09b      	b.n	801fcec <GUI_SendAnswer+0x1c4>
    }

    case DPM_CONFIG_GET_REQ:
      if (0U != port)
 801fbb4:	220f      	movs	r2, #15
 801fbb6:	18bb      	adds	r3, r7, r2
 801fbb8:	781b      	ldrb	r3, [r3, #0]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d009      	beq.n	801fbd2 <GUI_SendAnswer+0xaa>
      {
        Send_DpmConfigGetCnf((port - 1U), PtrDataRx, Processed);
 801fbbe:	18bb      	adds	r3, r7, r2
 801fbc0:	781b      	ldrb	r3, [r3, #0]
 801fbc2:	3b01      	subs	r3, #1
 801fbc4:	b2db      	uxtb	r3, r3
 801fbc6:	4a4d      	ldr	r2, [pc, #308]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fbc8:	494a      	ldr	r1, [pc, #296]	; (801fcf4 <GUI_SendAnswer+0x1cc>)
 801fbca:	0018      	movs	r0, r3
 801fbcc:	f001 ff28 	bl	8021a20 <Send_DpmConfigGetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fbd0:	e07d      	b.n	801fcce <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fbd2:	494a      	ldr	r1, [pc, #296]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fbd4:	230f      	movs	r3, #15
 801fbd6:	18fb      	adds	r3, r7, r3
 801fbd8:	781b      	ldrb	r3, [r3, #0]
 801fbda:	2205      	movs	r2, #5
 801fbdc:	0018      	movs	r0, r3
 801fbde:	f002 f9ff 	bl	8021fe0 <Send_DpmConfigGetRej>
      break;
 801fbe2:	e074      	b.n	801fcce <GUI_SendAnswer+0x1a6>
    case DPM_CONFIG_SET_REQ:
      if (0U != port)
 801fbe4:	220f      	movs	r2, #15
 801fbe6:	18bb      	adds	r3, r7, r2
 801fbe8:	781b      	ldrb	r3, [r3, #0]
 801fbea:	2b00      	cmp	r3, #0
 801fbec:	d009      	beq.n	801fc02 <GUI_SendAnswer+0xda>
      {
        Send_DpmConfigSetCnf((port - 1U), PtrDataRx, Processed);
 801fbee:	18bb      	adds	r3, r7, r2
 801fbf0:	781b      	ldrb	r3, [r3, #0]
 801fbf2:	3b01      	subs	r3, #1
 801fbf4:	b2db      	uxtb	r3, r3
 801fbf6:	4a41      	ldr	r2, [pc, #260]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fbf8:	493e      	ldr	r1, [pc, #248]	; (801fcf4 <GUI_SendAnswer+0x1cc>)
 801fbfa:	0018      	movs	r0, r3
 801fbfc:	f001 fad0 	bl	80211a0 <Send_DpmConfigSetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fc00:	e065      	b.n	801fcce <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fc02:	493e      	ldr	r1, [pc, #248]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fc04:	230f      	movs	r3, #15
 801fc06:	18fb      	adds	r3, r7, r3
 801fc08:	781b      	ldrb	r3, [r3, #0]
 801fc0a:	2205      	movs	r2, #5
 801fc0c:	0018      	movs	r0, r3
 801fc0e:	f002 f9e7 	bl	8021fe0 <Send_DpmConfigGetRej>
      break;
 801fc12:	e05c      	b.n	801fcce <GUI_SendAnswer+0x1a6>
    case DPM_MESSAGE_REQ:
      if (0U != port)
 801fc14:	220f      	movs	r2, #15
 801fc16:	18bb      	adds	r3, r7, r2
 801fc18:	781b      	ldrb	r3, [r3, #0]
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d009      	beq.n	801fc32 <GUI_SendAnswer+0x10a>
      {
        Request_MessageReq((port - 1U), PtrDataRx, Processed);
 801fc1e:	18bb      	adds	r3, r7, r2
 801fc20:	781b      	ldrb	r3, [r3, #0]
 801fc22:	3b01      	subs	r3, #1
 801fc24:	b2db      	uxtb	r3, r3
 801fc26:	4a35      	ldr	r2, [pc, #212]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fc28:	4932      	ldr	r1, [pc, #200]	; (801fcf4 <GUI_SendAnswer+0x1cc>)
 801fc2a:	0018      	movs	r0, r3
 801fc2c:	f000 ff78 	bl	8020b20 <Request_MessageReq>
      }
      else
      {
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fc30:	e04d      	b.n	801fcce <GUI_SendAnswer+0x1a6>
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fc32:	4932      	ldr	r1, [pc, #200]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fc34:	230f      	movs	r3, #15
 801fc36:	18fb      	adds	r3, r7, r3
 801fc38:	781b      	ldrb	r3, [r3, #0]
 801fc3a:	2205      	movs	r2, #5
 801fc3c:	0018      	movs	r0, r3
 801fc3e:	f002 f9f1 	bl	8022024 <Send_DpmMessageRej>
      break;
 801fc42:	e044      	b.n	801fcce <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_READ_REQ:
      if (0U != port)
 801fc44:	220f      	movs	r2, #15
 801fc46:	18bb      	adds	r3, r7, r2
 801fc48:	781b      	ldrb	r3, [r3, #0]
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	d01d      	beq.n	801fc8a <GUI_SendAnswer+0x162>
      {
        /* If size is 0*/
        if ((PtrDataRx[TLV_LENGTH_HIGH_POSITION] == 0U) && (PtrDataRx[TLV_LENGTH_LOW_POSITION] == 0U))
 801fc4e:	4b29      	ldr	r3, [pc, #164]	; (801fcf4 <GUI_SendAnswer+0x1cc>)
 801fc50:	795b      	ldrb	r3, [r3, #5]
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	d10d      	bne.n	801fc72 <GUI_SendAnswer+0x14a>
 801fc56:	4b27      	ldr	r3, [pc, #156]	; (801fcf4 <GUI_SendAnswer+0x1cc>)
 801fc58:	799b      	ldrb	r3, [r3, #6]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d109      	bne.n	801fc72 <GUI_SendAnswer+0x14a>
        {
          Send_DpmRegisterReadCnf((port - 1U), Processed, 0xFF);
 801fc5e:	18bb      	adds	r3, r7, r2
 801fc60:	781b      	ldrb	r3, [r3, #0]
 801fc62:	3b01      	subs	r3, #1
 801fc64:	b2db      	uxtb	r3, r3
 801fc66:	4925      	ldr	r1, [pc, #148]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fc68:	22ff      	movs	r2, #255	; 0xff
 801fc6a:	0018      	movs	r0, r3
 801fc6c:	f002 f9fc 	bl	8022068 <Send_DpmRegisterReadCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fc70:	e02d      	b.n	801fcce <GUI_SendAnswer+0x1a6>
          Send_DpmRegisterReadCnf((port - 1U), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 801fc72:	230f      	movs	r3, #15
 801fc74:	18fb      	adds	r3, r7, r3
 801fc76:	781b      	ldrb	r3, [r3, #0]
 801fc78:	3b01      	subs	r3, #1
 801fc7a:	b2d8      	uxtb	r0, r3
 801fc7c:	4b1d      	ldr	r3, [pc, #116]	; (801fcf4 <GUI_SendAnswer+0x1cc>)
 801fc7e:	79da      	ldrb	r2, [r3, #7]
 801fc80:	4b1e      	ldr	r3, [pc, #120]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fc82:	0019      	movs	r1, r3
 801fc84:	f002 f9f0 	bl	8022068 <Send_DpmRegisterReadCnf>
      break;
 801fc88:	e021      	b.n	801fcce <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fc8a:	491c      	ldr	r1, [pc, #112]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fc8c:	230f      	movs	r3, #15
 801fc8e:	18fb      	adds	r3, r7, r3
 801fc90:	781b      	ldrb	r3, [r3, #0]
 801fc92:	2205      	movs	r2, #5
 801fc94:	0018      	movs	r0, r3
 801fc96:	f002 f9a3 	bl	8021fe0 <Send_DpmConfigGetRej>
      break;
 801fc9a:	e018      	b.n	801fcce <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_WRITE_REQ:
      if (0U != port)
 801fc9c:	220f      	movs	r2, #15
 801fc9e:	18bb      	adds	r3, r7, r2
 801fca0:	781b      	ldrb	r3, [r3, #0]
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	d009      	beq.n	801fcba <GUI_SendAnswer+0x192>
      {
        Send_DpmRegisterWriteCnf((port - 1U), Processed, PtrDataRx);
 801fca6:	18bb      	adds	r3, r7, r2
 801fca8:	781b      	ldrb	r3, [r3, #0]
 801fcaa:	3b01      	subs	r3, #1
 801fcac:	b2db      	uxtb	r3, r3
 801fcae:	4a11      	ldr	r2, [pc, #68]	; (801fcf4 <GUI_SendAnswer+0x1cc>)
 801fcb0:	4912      	ldr	r1, [pc, #72]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fcb2:	0018      	movs	r0, r3
 801fcb4:	f002 fa36 	bl	8022124 <Send_DpmRegisterWriteCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fcb8:	e009      	b.n	801fcce <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fcba:	4910      	ldr	r1, [pc, #64]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fcbc:	230f      	movs	r3, #15
 801fcbe:	18fb      	adds	r3, r7, r3
 801fcc0:	781b      	ldrb	r3, [r3, #0]
 801fcc2:	2205      	movs	r2, #5
 801fcc4:	0018      	movs	r0, r3
 801fcc6:	f002 f98b 	bl	8021fe0 <Send_DpmConfigGetRej>
      break;
 801fcca:	e000      	b.n	801fcce <GUI_SendAnswer+0x1a6>
    default :
      break;
 801fccc:	46c0      	nop			; (mov r8, r8)
  }

  *pMsgToSend = Processed;
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	4a0a      	ldr	r2, [pc, #40]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fcd2:	601a      	str	r2, [r3, #0]
  *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 801fcd4:	4b09      	ldr	r3, [pc, #36]	; (801fcfc <GUI_SendAnswer+0x1d4>)
 801fcd6:	0018      	movs	r0, r3
 801fcd8:	f7ff fb38 	bl	801f34c <TLV_get_string_length>
 801fcdc:	0003      	movs	r3, r0
 801fcde:	b2db      	uxtb	r3, r3
 801fce0:	3308      	adds	r3, #8
 801fce2:	b2da      	uxtb	r2, r3
 801fce4:	683b      	ldr	r3, [r7, #0]
 801fce6:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 801fce8:	4b05      	ldr	r3, [pc, #20]	; (801fd00 <GUI_SendAnswer+0x1d8>)
 801fcea:	781b      	ldrb	r3, [r3, #0]
}
 801fcec:	0018      	movs	r0, r3
 801fcee:	46bd      	mov	sp, r7
 801fcf0:	b005      	add	sp, #20
 801fcf2:	bd90      	pop	{r4, r7, pc}
 801fcf4:	2000497c 	.word	0x2000497c
 801fcf8:	08025258 	.word	0x08025258
 801fcfc:	20004a7c 	.word	0x20004a7c
 801fd00:	20004b7c 	.word	0x20004b7c
 801fd04:	00006020 	.word	0x00006020

0801fd08 <GUI_SendNotification>:
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg,
                                     uint32_t TypeNotification, uint32_t Value)
{
 801fd08:	b5b0      	push	{r4, r5, r7, lr}
 801fd0a:	b0a6      	sub	sp, #152	; 0x98
 801fd0c:	af00      	add	r7, sp, #0
 801fd0e:	60b9      	str	r1, [r7, #8]
 801fd10:	607a      	str	r2, [r7, #4]
 801fd12:	603b      	str	r3, [r7, #0]
 801fd14:	240f      	movs	r4, #15
 801fd16:	193b      	adds	r3, r7, r4
 801fd18:	1c02      	adds	r2, r0, #0
 801fd1a:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 801fd1c:	2397      	movs	r3, #151	; 0x97
 801fd1e:	18fb      	adds	r3, r7, r3
 801fd20:	2200      	movs	r2, #0
 801fd22:	701a      	strb	r2, [r3, #0]

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 801fd24:	4bbf      	ldr	r3, [pc, #764]	; (8020024 <GUI_SendNotification+0x31c>)
 801fd26:	781b      	ldrb	r3, [r3, #0]
 801fd28:	2b01      	cmp	r3, #1
 801fd2a:	d001      	beq.n	801fd30 <GUI_SendNotification+0x28>
 801fd2c:	f000 fbe4 	bl	80204f8 <GUI_SendNotification+0x7f0>
  {
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1U), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 801fd30:	193b      	adds	r3, r7, r4
 801fd32:	781b      	ldrb	r3, [r3, #0]
 801fd34:	3301      	adds	r3, #1
 801fd36:	b2db      	uxtb	r3, r3
 801fd38:	015b      	lsls	r3, r3, #5
 801fd3a:	b2db      	uxtb	r3, r3
 801fd3c:	220c      	movs	r2, #12
 801fd3e:	4313      	orrs	r3, r2
 801fd40:	b2d9      	uxtb	r1, r3
 801fd42:	4bb9      	ldr	r3, [pc, #740]	; (8020028 <GUI_SendNotification+0x320>)
 801fd44:	2280      	movs	r2, #128	; 0x80
 801fd46:	0052      	lsls	r2, r2, #1
 801fd48:	2584      	movs	r5, #132	; 0x84
 801fd4a:	1978      	adds	r0, r7, r5
 801fd4c:	f7ff f893 	bl	801ee76 <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 801fd50:	683b      	ldr	r3, [r7, #0]
 801fd52:	2220      	movs	r2, #32
 801fd54:	4013      	ands	r3, r2
 801fd56:	d100      	bne.n	801fd5a <GUI_SendNotification+0x52>
 801fd58:	e08d      	b.n	801fe76 <GUI_SendNotification+0x16e>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                    (uint8_t[]){ DPM_Params[PortNum].PE_Power });
 801fd5a:	193b      	adds	r3, r7, r4
 801fd5c:	781b      	ldrb	r3, [r3, #0]
 801fd5e:	4ab3      	ldr	r2, [pc, #716]	; (802002c <GUI_SendNotification+0x324>)
 801fd60:	009b      	lsls	r3, r3, #2
 801fd62:	18d3      	adds	r3, r2, r3
 801fd64:	785b      	ldrb	r3, [r3, #1]
 801fd66:	075b      	lsls	r3, r3, #29
 801fd68:	0f5b      	lsrs	r3, r3, #29
 801fd6a:	b2db      	uxtb	r3, r3
 801fd6c:	001a      	movs	r2, r3
 801fd6e:	2180      	movs	r1, #128	; 0x80
 801fd70:	187b      	adds	r3, r7, r1
 801fd72:	701a      	strb	r2, [r3, #0]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 801fd74:	187b      	adds	r3, r7, r1
 801fd76:	1978      	adds	r0, r7, r5
 801fd78:	2201      	movs	r2, #1
 801fd7a:	2105      	movs	r1, #5
 801fd7c:	f7ff f8de 	bl	801ef3c <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 801fd80:	193b      	adds	r3, r7, r4
 801fd82:	781b      	ldrb	r3, [r3, #0]
 801fd84:	4aa9      	ldr	r2, [pc, #676]	; (802002c <GUI_SendNotification+0x324>)
 801fd86:	009b      	lsls	r3, r3, #2
 801fd88:	18d3      	adds	r3, r2, r3
 801fd8a:	785b      	ldrb	r3, [r3, #1]
 801fd8c:	06db      	lsls	r3, r3, #27
 801fd8e:	0fdb      	lsrs	r3, r3, #31
 801fd90:	b2db      	uxtb	r3, r3
 801fd92:	2b01      	cmp	r3, #1
 801fd94:	d16f      	bne.n	801fe76 <GUI_SendNotification+0x16e>
      {
        uint8_t rp_value;
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                      (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801fd96:	193b      	adds	r3, r7, r4
 801fd98:	781a      	ldrb	r2, [r3, #0]
 801fd9a:	4ba4      	ldr	r3, [pc, #656]	; (802002c <GUI_SendNotification+0x324>)
 801fd9c:	0092      	lsls	r2, r2, #2
 801fd9e:	5cd3      	ldrb	r3, [r2, r3]
 801fda0:	061b      	lsls	r3, r3, #24
 801fda2:	0f9b      	lsrs	r3, r3, #30
 801fda4:	b2db      	uxtb	r3, r3
 801fda6:	001a      	movs	r2, r3
 801fda8:	217c      	movs	r1, #124	; 0x7c
 801fdaa:	187b      	adds	r3, r7, r1
 801fdac:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 801fdae:	187b      	adds	r3, r7, r1
 801fdb0:	1978      	adds	r0, r7, r5
 801fdb2:	2201      	movs	r2, #1
 801fdb4:	2106      	movs	r1, #6
 801fdb6:	f7ff f8c1 	bl	801ef3c <TLV_add>
        /* Power Role*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                      (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801fdba:	193b      	adds	r3, r7, r4
 801fdbc:	781a      	ldrb	r2, [r3, #0]
 801fdbe:	4b9b      	ldr	r3, [pc, #620]	; (802002c <GUI_SendNotification+0x324>)
 801fdc0:	0092      	lsls	r2, r2, #2
 801fdc2:	5cd3      	ldrb	r3, [r2, r3]
 801fdc4:	075b      	lsls	r3, r3, #29
 801fdc6:	0fdb      	lsrs	r3, r3, #31
 801fdc8:	b2db      	uxtb	r3, r3
 801fdca:	001a      	movs	r2, r3
 801fdcc:	2178      	movs	r1, #120	; 0x78
 801fdce:	187b      	adds	r3, r7, r1
 801fdd0:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801fdd2:	187b      	adds	r3, r7, r1
 801fdd4:	1978      	adds	r0, r7, r5
 801fdd6:	2201      	movs	r2, #1
 801fdd8:	2108      	movs	r1, #8
 801fdda:	f7ff f8af 	bl	801ef3c <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 801fdde:	217f      	movs	r1, #127	; 0x7f
 801fde0:	187b      	adds	r3, r7, r1
 801fde2:	2203      	movs	r2, #3
 801fde4:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 801fde6:	187b      	adds	r3, r7, r1
 801fde8:	1978      	adds	r0, r7, r5
 801fdea:	2201      	movs	r2, #1
 801fdec:	2109      	movs	r1, #9
 801fdee:	f7ff f8a5 	bl	801ef3c <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 801fdf2:	193b      	adds	r3, r7, r4
 801fdf4:	781b      	ldrb	r3, [r3, #0]
 801fdf6:	4a8d      	ldr	r2, [pc, #564]	; (802002c <GUI_SendNotification+0x324>)
 801fdf8:	009b      	lsls	r3, r3, #2
 801fdfa:	18d3      	adds	r3, r2, r3
 801fdfc:	785b      	ldrb	r3, [r3, #1]
 801fdfe:	075b      	lsls	r3, r3, #29
 801fe00:	0f5b      	lsrs	r3, r3, #29
 801fe02:	b2db      	uxtb	r3, r3
 801fe04:	2b03      	cmp	r3, #3
 801fe06:	d136      	bne.n	801fe76 <GUI_SendNotification+0x16e>
        {
          /* Data Role*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 801fe08:	193b      	adds	r3, r7, r4
 801fe0a:	781a      	ldrb	r2, [r3, #0]
 801fe0c:	4b87      	ldr	r3, [pc, #540]	; (802002c <GUI_SendNotification+0x324>)
 801fe0e:	0092      	lsls	r2, r2, #2
 801fe10:	5cd3      	ldrb	r3, [r2, r3]
 801fe12:	071b      	lsls	r3, r3, #28
 801fe14:	0fdb      	lsrs	r3, r3, #31
 801fe16:	b2db      	uxtb	r3, r3
 801fe18:	001a      	movs	r2, r3
 801fe1a:	2174      	movs	r1, #116	; 0x74
 801fe1c:	187b      	adds	r3, r7, r1
 801fe1e:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 801fe20:	187b      	adds	r3, r7, r1
 801fe22:	1978      	adds	r0, r7, r5
 801fe24:	2201      	movs	r2, #1
 801fe26:	2107      	movs	r1, #7
 801fe28:	f7ff f888 	bl	801ef3c <TLV_add>
          /* Vconn ON*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                        (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 801fe2c:	193b      	adds	r3, r7, r4
 801fe2e:	781b      	ldrb	r3, [r3, #0]
 801fe30:	4a7e      	ldr	r2, [pc, #504]	; (802002c <GUI_SendNotification+0x324>)
 801fe32:	009b      	lsls	r3, r3, #2
 801fe34:	18d3      	adds	r3, r2, r3
 801fe36:	785b      	ldrb	r3, [r3, #1]
 801fe38:	061b      	lsls	r3, r3, #24
 801fe3a:	0fdb      	lsrs	r3, r3, #31
 801fe3c:	b2db      	uxtb	r3, r3
 801fe3e:	001a      	movs	r2, r3
 801fe40:	2170      	movs	r1, #112	; 0x70
 801fe42:	187b      	adds	r3, r7, r1
 801fe44:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 801fe46:	187b      	adds	r3, r7, r1
 801fe48:	1978      	adds	r0, r7, r5
 801fe4a:	2201      	movs	r2, #1
 801fe4c:	210a      	movs	r1, #10
 801fe4e:	f7ff f875 	bl	801ef3c <TLV_add>
          /* PD_Spec Revision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801fe52:	193b      	adds	r3, r7, r4
 801fe54:	781a      	ldrb	r2, [r3, #0]
 801fe56:	4b75      	ldr	r3, [pc, #468]	; (802002c <GUI_SendNotification+0x324>)
 801fe58:	0092      	lsls	r2, r2, #2
 801fe5a:	5cd3      	ldrb	r3, [r2, r3]
 801fe5c:	079b      	lsls	r3, r3, #30
 801fe5e:	0f9b      	lsrs	r3, r3, #30
 801fe60:	b2db      	uxtb	r3, r3
 801fe62:	001a      	movs	r2, r3
 801fe64:	216c      	movs	r1, #108	; 0x6c
 801fe66:	187b      	adds	r3, r7, r1
 801fe68:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 801fe6a:	187b      	adds	r3, r7, r1
 801fe6c:	1978      	adds	r0, r7, r5
 801fe6e:	2201      	movs	r2, #1
 801fe70:	210d      	movs	r1, #13
 801fe72:	f7ff f863 	bl	801ef3c <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 801fe76:	683a      	ldr	r2, [r7, #0]
 801fe78:	2380      	movs	r3, #128	; 0x80
 801fe7a:	019b      	lsls	r3, r3, #6
 801fe7c:	4013      	ands	r3, r2
 801fe7e:	d100      	bne.n	801fe82 <GUI_SendNotification+0x17a>
 801fe80:	e27d      	b.n	802037e <GUI_SendNotification+0x676>
    {
      if ((uint32_t)USBPD_NOTIFY_ALL != Value)
 801fe82:	22a0      	movs	r2, #160	; 0xa0
 801fe84:	2108      	movs	r1, #8
 801fe86:	1853      	adds	r3, r2, r1
 801fe88:	19db      	adds	r3, r3, r7
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	2b70      	cmp	r3, #112	; 0x70
 801fe8e:	d100      	bne.n	801fe92 <GUI_SendNotification+0x18a>
 801fe90:	e1c1      	b.n	8020216 <GUI_SendNotification+0x50e>
      {
        /* PD_MessageNotif */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t *)&Value);
 801fe92:	2384      	movs	r3, #132	; 0x84
 801fe94:	18f8      	adds	r0, r7, r3
 801fe96:	0014      	movs	r4, r2
 801fe98:	000d      	movs	r5, r1
 801fe9a:	1853      	adds	r3, r2, r1
 801fe9c:	19db      	adds	r3, r3, r7
 801fe9e:	2201      	movs	r2, #1
 801fea0:	210e      	movs	r1, #14
 801fea2:	f7ff f84b 	bl	801ef3c <TLV_add>

        switch (Value)
 801fea6:	0022      	movs	r2, r4
 801fea8:	1953      	adds	r3, r2, r5
 801feaa:	19db      	adds	r3, r3, r7
 801feac:	681b      	ldr	r3, [r3, #0]
 801feae:	2b42      	cmp	r3, #66	; 0x42
 801feb0:	d80b      	bhi.n	801feca <GUI_SendNotification+0x1c2>
 801feb2:	2b07      	cmp	r3, #7
 801feb4:	d200      	bcs.n	801feb8 <GUI_SendNotification+0x1b0>
 801feb6:	e25b      	b.n	8020370 <GUI_SendNotification+0x668>
 801feb8:	3b07      	subs	r3, #7
 801feba:	2b3b      	cmp	r3, #59	; 0x3b
 801febc:	d900      	bls.n	801fec0 <GUI_SendNotification+0x1b8>
 801febe:	e257      	b.n	8020370 <GUI_SendNotification+0x668>
 801fec0:	009a      	lsls	r2, r3, #2
 801fec2:	4b5b      	ldr	r3, [pc, #364]	; (8020030 <GUI_SendNotification+0x328>)
 801fec4:	18d3      	adds	r3, r2, r3
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	469f      	mov	pc, r3
 801feca:	2b5a      	cmp	r3, #90	; 0x5a
 801fecc:	d000      	beq.n	801fed0 <GUI_SendNotification+0x1c8>
 801fece:	e24f      	b.n	8020370 <GUI_SendNotification+0x668>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 801fed0:	240f      	movs	r4, #15
 801fed2:	193b      	adds	r3, r7, r4
 801fed4:	781b      	ldrb	r3, [r3, #0]
 801fed6:	4a55      	ldr	r2, [pc, #340]	; (802002c <GUI_SendNotification+0x324>)
 801fed8:	009b      	lsls	r3, r3, #2
 801feda:	18d3      	adds	r3, r2, r3
 801fedc:	785b      	ldrb	r3, [r3, #1]
 801fede:	075b      	lsls	r3, r3, #29
 801fee0:	0f5b      	lsrs	r3, r3, #29
 801fee2:	b2db      	uxtb	r3, r3
 801fee4:	001a      	movs	r2, r3
 801fee6:	2168      	movs	r1, #104	; 0x68
 801fee8:	187b      	adds	r3, r7, r1
 801feea:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 801feec:	187b      	adds	r3, r7, r1
 801feee:	2584      	movs	r5, #132	; 0x84
 801fef0:	1978      	adds	r0, r7, r5
 801fef2:	2201      	movs	r2, #1
 801fef4:	2105      	movs	r1, #5
 801fef6:	f7ff f821 	bl	801ef3c <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 801fefa:	193b      	adds	r3, r7, r4
 801fefc:	781b      	ldrb	r3, [r3, #0]
 801fefe:	4a4b      	ldr	r2, [pc, #300]	; (802002c <GUI_SendNotification+0x324>)
 801ff00:	009b      	lsls	r3, r3, #2
 801ff02:	18d3      	adds	r3, r2, r3
 801ff04:	785b      	ldrb	r3, [r3, #1]
 801ff06:	075b      	lsls	r3, r3, #29
 801ff08:	0f5b      	lsrs	r3, r3, #29
 801ff0a:	b2db      	uxtb	r3, r3
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	d000      	beq.n	801ff12 <GUI_SendNotification+0x20a>
 801ff10:	e234      	b.n	802037c <GUI_SendNotification+0x674>
            {
              /* CC line */
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                            (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801ff12:	193b      	adds	r3, r7, r4
 801ff14:	781a      	ldrb	r2, [r3, #0]
 801ff16:	4b45      	ldr	r3, [pc, #276]	; (802002c <GUI_SendNotification+0x324>)
 801ff18:	0092      	lsls	r2, r2, #2
 801ff1a:	5cd3      	ldrb	r3, [r2, r3]
 801ff1c:	061b      	lsls	r3, r3, #24
 801ff1e:	0f9b      	lsrs	r3, r3, #30
 801ff20:	b2db      	uxtb	r3, r3
 801ff22:	001a      	movs	r2, r3
 801ff24:	2138      	movs	r1, #56	; 0x38
 801ff26:	187b      	adds	r3, r7, r1
 801ff28:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 801ff2a:	187b      	adds	r3, r7, r1
 801ff2c:	1978      	adds	r0, r7, r5
 801ff2e:	2201      	movs	r2, #1
 801ff30:	2106      	movs	r1, #6
 801ff32:	f7ff f803 	bl	801ef3c <TLV_add>
              /* PowerRole*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                            (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801ff36:	193b      	adds	r3, r7, r4
 801ff38:	781a      	ldrb	r2, [r3, #0]
 801ff3a:	4b3c      	ldr	r3, [pc, #240]	; (802002c <GUI_SendNotification+0x324>)
 801ff3c:	0092      	lsls	r2, r2, #2
 801ff3e:	5cd3      	ldrb	r3, [r2, r3]
 801ff40:	075b      	lsls	r3, r3, #29
 801ff42:	0fdb      	lsrs	r3, r3, #31
 801ff44:	b2db      	uxtb	r3, r3
 801ff46:	001a      	movs	r2, r3
 801ff48:	2134      	movs	r1, #52	; 0x34
 801ff4a:	187b      	adds	r3, r7, r1
 801ff4c:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801ff4e:	187b      	adds	r3, r7, r1
 801ff50:	1978      	adds	r0, r7, r5
 801ff52:	2201      	movs	r2, #1
 801ff54:	2108      	movs	r1, #8
 801ff56:	f7fe fff1 	bl	801ef3c <TLV_add>
            }
            break;
 801ff5a:	e20f      	b.n	802037c <GUI_SendNotification+0x674>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO
 801ff5c:	240f      	movs	r4, #15
 801ff5e:	193b      	adds	r3, r7, r4
 801ff60:	781a      	ldrb	r2, [r3, #0]
 801ff62:	4934      	ldr	r1, [pc, #208]	; (8020034 <GUI_SendNotification+0x32c>)
 801ff64:	0013      	movs	r3, r2
 801ff66:	00db      	lsls	r3, r3, #3
 801ff68:	1a9b      	subs	r3, r3, r2
 801ff6a:	011b      	lsls	r3, r3, #4
 801ff6c:	18cb      	adds	r3, r1, r3
 801ff6e:	333c      	adds	r3, #60	; 0x3c
 801ff70:	681b      	ldr	r3, [r3, #0]
 801ff72:	b2da      	uxtb	r2, r3
 801ff74:	2164      	movs	r1, #100	; 0x64
 801ff76:	187b      	adds	r3, r7, r1
 801ff78:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 801ff7a:	187b      	adds	r3, r7, r1
 801ff7c:	2584      	movs	r5, #132	; 0x84
 801ff7e:	1978      	adds	r0, r7, r5
 801ff80:	2201      	movs	r2, #1
 801ff82:	2100      	movs	r1, #0
 801ff84:	f7fe ffda 	bl	801ef3c <TLV_add>
            });
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 801ff88:	193b      	adds	r3, r7, r4
 801ff8a:	781a      	ldrb	r2, [r3, #0]
 801ff8c:	4929      	ldr	r1, [pc, #164]	; (8020034 <GUI_SendNotification+0x32c>)
 801ff8e:	0013      	movs	r3, r2
 801ff90:	00db      	lsls	r3, r3, #3
 801ff92:	1a9b      	subs	r3, r3, r2
 801ff94:	011b      	lsls	r3, r3, #4
 801ff96:	18cb      	adds	r3, r1, r3
 801ff98:	333c      	adds	r3, #60	; 0x3c
 801ff9a:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801ff9c:	b29b      	uxth	r3, r3
 801ff9e:	009b      	lsls	r3, r3, #2
 801ffa0:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 801ffa2:	193b      	adds	r3, r7, r4
 801ffa4:	781a      	ldrb	r2, [r3, #0]
 801ffa6:	0013      	movs	r3, r2
 801ffa8:	00db      	lsls	r3, r3, #3
 801ffaa:	1a9b      	subs	r3, r3, r2
 801ffac:	011b      	lsls	r3, r3, #4
 801ffae:	3320      	adds	r3, #32
 801ffb0:	001a      	movs	r2, r3
 801ffb2:	4b20      	ldr	r3, [pc, #128]	; (8020034 <GUI_SendNotification+0x32c>)
 801ffb4:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801ffb6:	1978      	adds	r0, r7, r5
 801ffb8:	000a      	movs	r2, r1
 801ffba:	2104      	movs	r1, #4
 801ffbc:	f7fe ffbe 	bl	801ef3c <TLV_add>
            break;
 801ffc0:	e1dd      	b.n	802037e <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 801ffc2:	240f      	movs	r4, #15
 801ffc4:	193b      	adds	r3, r7, r4
 801ffc6:	781a      	ldrb	r2, [r3, #0]
 801ffc8:	491a      	ldr	r1, [pc, #104]	; (8020034 <GUI_SendNotification+0x32c>)
 801ffca:	0013      	movs	r3, r2
 801ffcc:	00db      	lsls	r3, r3, #3
 801ffce:	1a9b      	subs	r3, r3, r2
 801ffd0:	011b      	lsls	r3, r3, #4
 801ffd2:	18cb      	adds	r3, r1, r3
 801ffd4:	331c      	adds	r3, #28
 801ffd6:	681b      	ldr	r3, [r3, #0]
 801ffd8:	b2da      	uxtb	r2, r3
 801ffda:	2160      	movs	r1, #96	; 0x60
 801ffdc:	187b      	adds	r3, r7, r1
 801ffde:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 801ffe0:	187b      	adds	r3, r7, r1
 801ffe2:	2584      	movs	r5, #132	; 0x84
 801ffe4:	1978      	adds	r0, r7, r5
 801ffe6:	2201      	movs	r2, #1
 801ffe8:	2103      	movs	r1, #3
 801ffea:	f7fe ffa7 	bl	801ef3c <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 801ffee:	193b      	adds	r3, r7, r4
 801fff0:	781a      	ldrb	r2, [r3, #0]
 801fff2:	4910      	ldr	r1, [pc, #64]	; (8020034 <GUI_SendNotification+0x32c>)
 801fff4:	0013      	movs	r3, r2
 801fff6:	00db      	lsls	r3, r3, #3
 801fff8:	1a9b      	subs	r3, r3, r2
 801fffa:	011b      	lsls	r3, r3, #4
 801fffc:	18cb      	adds	r3, r1, r3
 801fffe:	331c      	adds	r3, #28
 8020000:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8020002:	b29b      	uxth	r3, r3
 8020004:	009b      	lsls	r3, r3, #2
 8020006:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8020008:	193b      	adds	r3, r7, r4
 802000a:	781a      	ldrb	r2, [r3, #0]
 802000c:	0013      	movs	r3, r2
 802000e:	00db      	lsls	r3, r3, #3
 8020010:	1a9b      	subs	r3, r3, r2
 8020012:	011b      	lsls	r3, r3, #4
 8020014:	4a07      	ldr	r2, [pc, #28]	; (8020034 <GUI_SendNotification+0x32c>)
 8020016:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8020018:	1978      	adds	r0, r7, r5
 802001a:	000a      	movs	r2, r1
 802001c:	2102      	movs	r1, #2
 802001e:	f7fe ff8d 	bl	801ef3c <TLV_add>
            break;
 8020022:	e1ac      	b.n	802037e <GUI_SendNotification+0x676>
 8020024:	20004b7c 	.word	0x20004b7c
 8020028:	20004a7c 	.word	0x20004a7c
 802002c:	20002f30 	.word	0x20002f30
 8020030:	0802529c 	.word	0x0802529c
 8020034:	20004b9c 	.word	0x20004b9c
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 8020038:	240f      	movs	r4, #15
 802003a:	193b      	adds	r3, r7, r4
 802003c:	781a      	ldrb	r2, [r3, #0]
 802003e:	4bcd      	ldr	r3, [pc, #820]	; (8020374 <GUI_SendNotification+0x66c>)
 8020040:	0092      	lsls	r2, r2, #2
 8020042:	5cd3      	ldrb	r3, [r2, r3]
 8020044:	075b      	lsls	r3, r3, #29
 8020046:	0fdb      	lsrs	r3, r3, #31
 8020048:	b2db      	uxtb	r3, r3
 802004a:	2b00      	cmp	r3, #0
 802004c:	d12e      	bne.n	80200ac <GUI_SendNotification+0x3a4>
            {
              /* NumberOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                            (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 802004e:	193b      	adds	r3, r7, r4
 8020050:	781a      	ldrb	r2, [r3, #0]
 8020052:	49c9      	ldr	r1, [pc, #804]	; (8020378 <GUI_SendNotification+0x670>)
 8020054:	0013      	movs	r3, r2
 8020056:	00db      	lsls	r3, r3, #3
 8020058:	1a9b      	subs	r3, r3, r2
 802005a:	011b      	lsls	r3, r3, #4
 802005c:	18cb      	adds	r3, r1, r3
 802005e:	331c      	adds	r3, #28
 8020060:	681b      	ldr	r3, [r3, #0]
 8020062:	b2da      	uxtb	r2, r3
 8020064:	2130      	movs	r1, #48	; 0x30
 8020066:	187b      	adds	r3, r7, r1
 8020068:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 802006a:	187b      	adds	r3, r7, r1
 802006c:	2584      	movs	r5, #132	; 0x84
 802006e:	1978      	adds	r0, r7, r5
 8020070:	2201      	movs	r2, #1
 8020072:	2103      	movs	r1, #3
 8020074:	f7fe ff62 	bl	801ef3c <TLV_add>
              /* ListOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                            (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 8020078:	193b      	adds	r3, r7, r4
 802007a:	781a      	ldrb	r2, [r3, #0]
 802007c:	49be      	ldr	r1, [pc, #760]	; (8020378 <GUI_SendNotification+0x670>)
 802007e:	0013      	movs	r3, r2
 8020080:	00db      	lsls	r3, r3, #3
 8020082:	1a9b      	subs	r3, r3, r2
 8020084:	011b      	lsls	r3, r3, #4
 8020086:	18cb      	adds	r3, r1, r3
 8020088:	331c      	adds	r3, #28
 802008a:	681b      	ldr	r3, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 802008c:	b29b      	uxth	r3, r3
 802008e:	009b      	lsls	r3, r3, #2
 8020090:	b299      	uxth	r1, r3
                            (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8020092:	193b      	adds	r3, r7, r4
 8020094:	781a      	ldrb	r2, [r3, #0]
 8020096:	0013      	movs	r3, r2
 8020098:	00db      	lsls	r3, r3, #3
 802009a:	1a9b      	subs	r3, r3, r2
 802009c:	011b      	lsls	r3, r3, #4
 802009e:	4ab6      	ldr	r2, [pc, #728]	; (8020378 <GUI_SendNotification+0x670>)
 80200a0:	189b      	adds	r3, r3, r2
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 80200a2:	1978      	adds	r0, r7, r5
 80200a4:	000a      	movs	r2, r1
 80200a6:	2102      	movs	r1, #2
 80200a8:	f7fe ff48 	bl	801ef3c <TLV_add>
            }
            /* RDOPosition */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 80200ac:	240f      	movs	r4, #15
 80200ae:	193b      	adds	r3, r7, r4
 80200b0:	781a      	ldrb	r2, [r3, #0]
 80200b2:	49b1      	ldr	r1, [pc, #708]	; (8020378 <GUI_SendNotification+0x670>)
 80200b4:	0013      	movs	r3, r2
 80200b6:	00db      	lsls	r3, r3, #3
 80200b8:	1a9b      	subs	r3, r3, r2
 80200ba:	011b      	lsls	r3, r3, #4
 80200bc:	18cb      	adds	r3, r1, r3
 80200be:	3340      	adds	r3, #64	; 0x40
 80200c0:	681b      	ldr	r3, [r3, #0]
 80200c2:	b2da      	uxtb	r2, r3
 80200c4:	215c      	movs	r1, #92	; 0x5c
 80200c6:	187b      	adds	r3, r7, r1
 80200c8:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 80200ca:	187b      	adds	r3, r7, r1
 80200cc:	2584      	movs	r5, #132	; 0x84
 80200ce:	1978      	adds	r0, r7, r5
 80200d0:	2201      	movs	r2, #1
 80200d2:	2101      	movs	r1, #1
 80200d4:	f7fe ff32 	bl	801ef3c <TLV_add>
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 80200d8:	193b      	adds	r3, r7, r4
 80200da:	781a      	ldrb	r2, [r3, #0]
 80200dc:	4ba5      	ldr	r3, [pc, #660]	; (8020374 <GUI_SendNotification+0x66c>)
 80200de:	0092      	lsls	r2, r2, #2
 80200e0:	5cd3      	ldrb	r3, [r2, r3]
 80200e2:	071b      	lsls	r3, r3, #28
 80200e4:	0fdb      	lsrs	r3, r3, #31
 80200e6:	b2db      	uxtb	r3, r3
 80200e8:	001a      	movs	r2, r3
 80200ea:	2158      	movs	r1, #88	; 0x58
 80200ec:	187b      	adds	r3, r7, r1
 80200ee:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80200f0:	187b      	adds	r3, r7, r1
 80200f2:	1978      	adds	r0, r7, r5
 80200f4:	2201      	movs	r2, #1
 80200f6:	2107      	movs	r1, #7
 80200f8:	f7fe ff20 	bl	801ef3c <TLV_add>
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80200fc:	193b      	adds	r3, r7, r4
 80200fe:	781a      	ldrb	r2, [r3, #0]
 8020100:	4b9c      	ldr	r3, [pc, #624]	; (8020374 <GUI_SendNotification+0x66c>)
 8020102:	0092      	lsls	r2, r2, #2
 8020104:	5cd3      	ldrb	r3, [r2, r3]
 8020106:	075b      	lsls	r3, r3, #29
 8020108:	0fdb      	lsrs	r3, r3, #31
 802010a:	b2db      	uxtb	r3, r3
 802010c:	001a      	movs	r2, r3
 802010e:	2154      	movs	r1, #84	; 0x54
 8020110:	187b      	adds	r3, r7, r1
 8020112:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8020114:	187b      	adds	r3, r7, r1
 8020116:	1978      	adds	r0, r7, r5
 8020118:	2201      	movs	r2, #1
 802011a:	2108      	movs	r1, #8
 802011c:	f7fe ff0e 	bl	801ef3c <TLV_add>
            /* VconnON*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8020120:	193b      	adds	r3, r7, r4
 8020122:	781b      	ldrb	r3, [r3, #0]
 8020124:	4a93      	ldr	r2, [pc, #588]	; (8020374 <GUI_SendNotification+0x66c>)
 8020126:	009b      	lsls	r3, r3, #2
 8020128:	18d3      	adds	r3, r2, r3
 802012a:	785b      	ldrb	r3, [r3, #1]
 802012c:	061b      	lsls	r3, r3, #24
 802012e:	0fdb      	lsrs	r3, r3, #31
 8020130:	b2db      	uxtb	r3, r3
 8020132:	001a      	movs	r2, r3
 8020134:	2150      	movs	r1, #80	; 0x50
 8020136:	187b      	adds	r3, r7, r1
 8020138:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 802013a:	187b      	adds	r3, r7, r1
 802013c:	1978      	adds	r0, r7, r5
 802013e:	2201      	movs	r2, #1
 8020140:	210a      	movs	r1, #10
 8020142:	f7fe fefb 	bl	801ef3c <TLV_add>
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8020146:	193b      	adds	r3, r7, r4
 8020148:	781a      	ldrb	r2, [r3, #0]
 802014a:	4b8a      	ldr	r3, [pc, #552]	; (8020374 <GUI_SendNotification+0x66c>)
 802014c:	0092      	lsls	r2, r2, #2
 802014e:	5cd3      	ldrb	r3, [r2, r3]
 8020150:	079b      	lsls	r3, r3, #30
 8020152:	0f9b      	lsrs	r3, r3, #30
 8020154:	b2db      	uxtb	r3, r3
 8020156:	001a      	movs	r2, r3
 8020158:	214c      	movs	r1, #76	; 0x4c
 802015a:	187b      	adds	r3, r7, r1
 802015c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 802015e:	187b      	adds	r3, r7, r1
 8020160:	1978      	adds	r0, r7, r5
 8020162:	2201      	movs	r2, #1
 8020164:	210d      	movs	r1, #13
 8020166:	f7fe fee9 	bl	801ef3c <TLV_add>
            break;
 802016a:	e108      	b.n	802037e <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 802016c:	230f      	movs	r3, #15
 802016e:	18fb      	adds	r3, r7, r3
 8020170:	781a      	ldrb	r2, [r3, #0]
 8020172:	4b80      	ldr	r3, [pc, #512]	; (8020374 <GUI_SendNotification+0x66c>)
 8020174:	0092      	lsls	r2, r2, #2
 8020176:	5cd3      	ldrb	r3, [r2, r3]
 8020178:	075b      	lsls	r3, r3, #29
 802017a:	0fdb      	lsrs	r3, r3, #31
 802017c:	b2db      	uxtb	r3, r3
 802017e:	001a      	movs	r2, r3
 8020180:	2148      	movs	r1, #72	; 0x48
 8020182:	187b      	adds	r3, r7, r1
 8020184:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8020186:	187b      	adds	r3, r7, r1
 8020188:	2284      	movs	r2, #132	; 0x84
 802018a:	18b8      	adds	r0, r7, r2
 802018c:	2201      	movs	r2, #1
 802018e:	2108      	movs	r1, #8
 8020190:	f7fe fed4 	bl	801ef3c <TLV_add>
            break;
 8020194:	e0f3      	b.n	802037e <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8020196:	230f      	movs	r3, #15
 8020198:	18fb      	adds	r3, r7, r3
 802019a:	781a      	ldrb	r2, [r3, #0]
 802019c:	4b75      	ldr	r3, [pc, #468]	; (8020374 <GUI_SendNotification+0x66c>)
 802019e:	0092      	lsls	r2, r2, #2
 80201a0:	5cd3      	ldrb	r3, [r2, r3]
 80201a2:	071b      	lsls	r3, r3, #28
 80201a4:	0fdb      	lsrs	r3, r3, #31
 80201a6:	b2db      	uxtb	r3, r3
 80201a8:	001a      	movs	r2, r3
 80201aa:	2144      	movs	r1, #68	; 0x44
 80201ac:	187b      	adds	r3, r7, r1
 80201ae:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80201b0:	187b      	adds	r3, r7, r1
 80201b2:	2284      	movs	r2, #132	; 0x84
 80201b4:	18b8      	adds	r0, r7, r2
 80201b6:	2201      	movs	r2, #1
 80201b8:	2107      	movs	r1, #7
 80201ba:	f7fe febf 	bl	801ef3c <TLV_add>
            break;
 80201be:	e0de      	b.n	802037e <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 80201c0:	230f      	movs	r3, #15
 80201c2:	18fb      	adds	r3, r7, r3
 80201c4:	781a      	ldrb	r2, [r3, #0]
 80201c6:	4b6b      	ldr	r3, [pc, #428]	; (8020374 <GUI_SendNotification+0x66c>)
 80201c8:	0092      	lsls	r2, r2, #2
 80201ca:	5cd3      	ldrb	r3, [r2, r3]
 80201cc:	079b      	lsls	r3, r3, #30
 80201ce:	0f9b      	lsrs	r3, r3, #30
 80201d0:	b2db      	uxtb	r3, r3
 80201d2:	001a      	movs	r2, r3
 80201d4:	2140      	movs	r1, #64	; 0x40
 80201d6:	187b      	adds	r3, r7, r1
 80201d8:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80201da:	187b      	adds	r3, r7, r1
 80201dc:	2284      	movs	r2, #132	; 0x84
 80201de:	18b8      	adds	r0, r7, r2
 80201e0:	2201      	movs	r2, #1
 80201e2:	210d      	movs	r1, #13
 80201e4:	f7fe feaa 	bl	801ef3c <TLV_add>
            break;
 80201e8:	e0c9      	b.n	802037e <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 80201ea:	230f      	movs	r3, #15
 80201ec:	18fb      	adds	r3, r7, r3
 80201ee:	781b      	ldrb	r3, [r3, #0]
 80201f0:	4a60      	ldr	r2, [pc, #384]	; (8020374 <GUI_SendNotification+0x66c>)
 80201f2:	009b      	lsls	r3, r3, #2
 80201f4:	18d3      	adds	r3, r2, r3
 80201f6:	785b      	ldrb	r3, [r3, #1]
 80201f8:	061b      	lsls	r3, r3, #24
 80201fa:	0fdb      	lsrs	r3, r3, #31
 80201fc:	b2db      	uxtb	r3, r3
 80201fe:	001a      	movs	r2, r3
 8020200:	213c      	movs	r1, #60	; 0x3c
 8020202:	187b      	adds	r3, r7, r1
 8020204:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8020206:	187b      	adds	r3, r7, r1
 8020208:	2284      	movs	r2, #132	; 0x84
 802020a:	18b8      	adds	r0, r7, r2
 802020c:	2201      	movs	r2, #1
 802020e:	210a      	movs	r1, #10
 8020210:	f7fe fe94 	bl	801ef3c <TLV_add>
            break;
 8020214:	e0b3      	b.n	802037e <GUI_SendNotification+0x676>
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 8020216:	240f      	movs	r4, #15
 8020218:	193b      	adds	r3, r7, r4
 802021a:	781b      	ldrb	r3, [r3, #0]
 802021c:	4a55      	ldr	r2, [pc, #340]	; (8020374 <GUI_SendNotification+0x66c>)
 802021e:	009b      	lsls	r3, r3, #2
 8020220:	18d3      	adds	r3, r2, r3
 8020222:	785b      	ldrb	r3, [r3, #1]
 8020224:	06db      	lsls	r3, r3, #27
 8020226:	0fdb      	lsrs	r3, r3, #31
 8020228:	b2db      	uxtb	r3, r3
 802022a:	2b01      	cmp	r3, #1
 802022c:	d000      	beq.n	8020230 <GUI_SendNotification+0x528>
 802022e:	e0a6      	b.n	802037e <GUI_SendNotification+0x676>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0U != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 8020230:	193b      	adds	r3, r7, r4
 8020232:	781a      	ldrb	r2, [r3, #0]
 8020234:	4950      	ldr	r1, [pc, #320]	; (8020378 <GUI_SendNotification+0x670>)
 8020236:	0013      	movs	r3, r2
 8020238:	00db      	lsls	r3, r3, #3
 802023a:	1a9b      	subs	r3, r3, r2
 802023c:	011b      	lsls	r3, r3, #4
 802023e:	18cb      	adds	r3, r1, r3
 8020240:	333c      	adds	r3, #60	; 0x3c
 8020242:	681b      	ldr	r3, [r3, #0]
 8020244:	2b00      	cmp	r3, #0
 8020246:	d030      	beq.n	80202aa <GUI_SendNotification+0x5a2>
          {
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 8020248:	193b      	adds	r3, r7, r4
 802024a:	781a      	ldrb	r2, [r3, #0]
 802024c:	494a      	ldr	r1, [pc, #296]	; (8020378 <GUI_SendNotification+0x670>)
 802024e:	0013      	movs	r3, r2
 8020250:	00db      	lsls	r3, r3, #3
 8020252:	1a9b      	subs	r3, r3, r2
 8020254:	011b      	lsls	r3, r3, #4
 8020256:	18cb      	adds	r3, r1, r3
 8020258:	333c      	adds	r3, #60	; 0x3c
 802025a:	681b      	ldr	r3, [r3, #0]
 802025c:	b2da      	uxtb	r2, r3
 802025e:	2124      	movs	r1, #36	; 0x24
 8020260:	187b      	adds	r3, r7, r1
 8020262:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 8020264:	187b      	adds	r3, r7, r1
 8020266:	2584      	movs	r5, #132	; 0x84
 8020268:	1978      	adds	r0, r7, r5
 802026a:	2201      	movs	r2, #1
 802026c:	2100      	movs	r1, #0
 802026e:	f7fe fe65 	bl	801ef3c <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 8020272:	193b      	adds	r3, r7, r4
 8020274:	781a      	ldrb	r2, [r3, #0]
 8020276:	4940      	ldr	r1, [pc, #256]	; (8020378 <GUI_SendNotification+0x670>)
 8020278:	0013      	movs	r3, r2
 802027a:	00db      	lsls	r3, r3, #3
 802027c:	1a9b      	subs	r3, r3, r2
 802027e:	011b      	lsls	r3, r3, #4
 8020280:	18cb      	adds	r3, r1, r3
 8020282:	333c      	adds	r3, #60	; 0x3c
 8020284:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8020286:	b29b      	uxth	r3, r3
 8020288:	009b      	lsls	r3, r3, #2
 802028a:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 802028c:	193b      	adds	r3, r7, r4
 802028e:	781a      	ldrb	r2, [r3, #0]
 8020290:	0013      	movs	r3, r2
 8020292:	00db      	lsls	r3, r3, #3
 8020294:	1a9b      	subs	r3, r3, r2
 8020296:	011b      	lsls	r3, r3, #4
 8020298:	3320      	adds	r3, #32
 802029a:	001a      	movs	r2, r3
 802029c:	4b36      	ldr	r3, [pc, #216]	; (8020378 <GUI_SendNotification+0x670>)
 802029e:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80202a0:	1978      	adds	r0, r7, r5
 80202a2:	000a      	movs	r2, r1
 80202a4:	2104      	movs	r1, #4
 80202a6:	f7fe fe49 	bl	801ef3c <TLV_add>
          }
          /* RDOPosition */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                        (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 80202aa:	240f      	movs	r4, #15
 80202ac:	193b      	adds	r3, r7, r4
 80202ae:	781a      	ldrb	r2, [r3, #0]
 80202b0:	4931      	ldr	r1, [pc, #196]	; (8020378 <GUI_SendNotification+0x670>)
 80202b2:	0013      	movs	r3, r2
 80202b4:	00db      	lsls	r3, r3, #3
 80202b6:	1a9b      	subs	r3, r3, r2
 80202b8:	011b      	lsls	r3, r3, #4
 80202ba:	18cb      	adds	r3, r1, r3
 80202bc:	3340      	adds	r3, #64	; 0x40
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	b2da      	uxtb	r2, r3
 80202c2:	212c      	movs	r1, #44	; 0x2c
 80202c4:	187b      	adds	r3, r7, r1
 80202c6:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 80202c8:	187b      	adds	r3, r7, r1
 80202ca:	2584      	movs	r5, #132	; 0x84
 80202cc:	1978      	adds	r0, r7, r5
 80202ce:	2201      	movs	r2, #1
 80202d0:	2101      	movs	r1, #1
 80202d2:	f7fe fe33 	bl	801ef3c <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 80202d6:	193b      	adds	r3, r7, r4
 80202d8:	781a      	ldrb	r2, [r3, #0]
 80202da:	4b26      	ldr	r3, [pc, #152]	; (8020374 <GUI_SendNotification+0x66c>)
 80202dc:	0092      	lsls	r2, r2, #2
 80202de:	5cd3      	ldrb	r3, [r2, r3]
 80202e0:	075b      	lsls	r3, r3, #29
 80202e2:	0fdb      	lsrs	r3, r3, #31
 80202e4:	b2db      	uxtb	r3, r3
 80202e6:	2b00      	cmp	r3, #0
 80202e8:	d12d      	bne.n	8020346 <GUI_SendNotification+0x63e>
          {
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 80202ea:	193b      	adds	r3, r7, r4
 80202ec:	781a      	ldrb	r2, [r3, #0]
 80202ee:	4922      	ldr	r1, [pc, #136]	; (8020378 <GUI_SendNotification+0x670>)
 80202f0:	0013      	movs	r3, r2
 80202f2:	00db      	lsls	r3, r3, #3
 80202f4:	1a9b      	subs	r3, r3, r2
 80202f6:	011b      	lsls	r3, r3, #4
 80202f8:	18cb      	adds	r3, r1, r3
 80202fa:	331c      	adds	r3, #28
 80202fc:	681b      	ldr	r3, [r3, #0]
 80202fe:	b2da      	uxtb	r2, r3
 8020300:	2120      	movs	r1, #32
 8020302:	187b      	adds	r3, r7, r1
 8020304:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8020306:	187b      	adds	r3, r7, r1
 8020308:	1978      	adds	r0, r7, r5
 802030a:	2201      	movs	r2, #1
 802030c:	2103      	movs	r1, #3
 802030e:	f7fe fe15 	bl	801ef3c <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U,
 8020312:	193b      	adds	r3, r7, r4
 8020314:	781a      	ldrb	r2, [r3, #0]
 8020316:	4918      	ldr	r1, [pc, #96]	; (8020378 <GUI_SendNotification+0x670>)
 8020318:	0013      	movs	r3, r2
 802031a:	00db      	lsls	r3, r3, #3
 802031c:	1a9b      	subs	r3, r3, r2
 802031e:	011b      	lsls	r3, r3, #4
 8020320:	18cb      	adds	r3, r1, r3
 8020322:	331c      	adds	r3, #28
 8020324:	681b      	ldr	r3, [r3, #0]
 8020326:	b29b      	uxth	r3, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8020328:	009b      	lsls	r3, r3, #2
 802032a:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 802032c:	193b      	adds	r3, r7, r4
 802032e:	781a      	ldrb	r2, [r3, #0]
 8020330:	0013      	movs	r3, r2
 8020332:	00db      	lsls	r3, r3, #3
 8020334:	1a9b      	subs	r3, r3, r2
 8020336:	011b      	lsls	r3, r3, #4
 8020338:	4a0f      	ldr	r2, [pc, #60]	; (8020378 <GUI_SendNotification+0x670>)
 802033a:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 802033c:	1978      	adds	r0, r7, r5
 802033e:	000a      	movs	r2, r1
 8020340:	2102      	movs	r1, #2
 8020342:	f7fe fdfb 	bl	801ef3c <TLV_add>
          }
          /* PD_SpecRevision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8020346:	230f      	movs	r3, #15
 8020348:	18fb      	adds	r3, r7, r3
 802034a:	781a      	ldrb	r2, [r3, #0]
 802034c:	4b09      	ldr	r3, [pc, #36]	; (8020374 <GUI_SendNotification+0x66c>)
 802034e:	0092      	lsls	r2, r2, #2
 8020350:	5cd3      	ldrb	r3, [r2, r3]
 8020352:	079b      	lsls	r3, r3, #30
 8020354:	0f9b      	lsrs	r3, r3, #30
 8020356:	b2db      	uxtb	r3, r3
 8020358:	001a      	movs	r2, r3
 802035a:	2128      	movs	r1, #40	; 0x28
 802035c:	187b      	adds	r3, r7, r1
 802035e:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8020360:	187b      	adds	r3, r7, r1
 8020362:	2284      	movs	r2, #132	; 0x84
 8020364:	18b8      	adds	r0, r7, r2
 8020366:	2201      	movs	r2, #1
 8020368:	210d      	movs	r1, #13
 802036a:	f7fe fde7 	bl	801ef3c <TLV_add>
 802036e:	e006      	b.n	802037e <GUI_SendNotification+0x676>
            break;
 8020370:	46c0      	nop			; (mov r8, r8)
 8020372:	e004      	b.n	802037e <GUI_SendNotification+0x676>
 8020374:	20002f30 	.word	0x20002f30
 8020378:	20004b9c 	.word	0x20004b9c
            break;
 802037c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 802037e:	683a      	ldr	r2, [r7, #0]
 8020380:	2380      	movs	r3, #128	; 0x80
 8020382:	011b      	lsls	r3, r3, #4
 8020384:	4013      	ands	r3, r2
 8020386:	d043      	beq.n	8020410 <GUI_SendNotification+0x708>
    {
      uint32_t vsense = 0;
 8020388:	2300      	movs	r3, #0
 802038a:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 802038c:	2300      	movs	r3, #0
 802038e:	2290      	movs	r2, #144	; 0x90
 8020390:	18ba      	adds	r2, r7, r2
 8020392:	6013      	str	r3, [r2, #0]

      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 8020394:	2384      	movs	r3, #132	; 0x84
 8020396:	18f8      	adds	r0, r7, r3
 8020398:	23a0      	movs	r3, #160	; 0xa0
 802039a:	2208      	movs	r2, #8
 802039c:	189b      	adds	r3, r3, r2
 802039e:	19db      	adds	r3, r3, r7
 80203a0:	2204      	movs	r2, #4
 80203a2:	2113      	movs	r1, #19
 80203a4:	f7fe fdca 	bl	801ef3c <TLV_add>

      if (NULL != pCB_GetVoltage)
 80203a8:	4b57      	ldr	r3, [pc, #348]	; (8020508 <GUI_SendNotification+0x800>)
 80203aa:	681b      	ldr	r3, [r3, #0]
 80203ac:	2b00      	cmp	r3, #0
 80203ae:	d008      	beq.n	80203c2 <GUI_SendNotification+0x6ba>
      {
        vsense = pCB_GetVoltage(PortNum);
 80203b0:	4b55      	ldr	r3, [pc, #340]	; (8020508 <GUI_SendNotification+0x800>)
 80203b2:	681b      	ldr	r3, [r3, #0]
 80203b4:	220f      	movs	r2, #15
 80203b6:	18ba      	adds	r2, r7, r2
 80203b8:	7812      	ldrb	r2, [r2, #0]
 80203ba:	0010      	movs	r0, r2
 80203bc:	4798      	blx	r3
 80203be:	0003      	movs	r3, r0
 80203c0:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 80203c2:	4b51      	ldr	r3, [pc, #324]	; (8020508 <GUI_SendNotification+0x800>)
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	d013      	beq.n	80203f2 <GUI_SendNotification+0x6ea>
      {
        isense = pCB_GetCurrent(PortNum);
 80203ca:	4b50      	ldr	r3, [pc, #320]	; (802050c <GUI_SendNotification+0x804>)
 80203cc:	681b      	ldr	r3, [r3, #0]
 80203ce:	220f      	movs	r2, #15
 80203d0:	18ba      	adds	r2, r7, r2
 80203d2:	7812      	ldrb	r2, [r2, #0]
 80203d4:	0010      	movs	r0, r2
 80203d6:	4798      	blx	r3
 80203d8:	0003      	movs	r3, r0
 80203da:	2290      	movs	r2, #144	; 0x90
 80203dc:	18b9      	adds	r1, r7, r2
 80203de:	600b      	str	r3, [r1, #0]
        if (isense < 0)
 80203e0:	18bb      	adds	r3, r7, r2
 80203e2:	681b      	ldr	r3, [r3, #0]
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	da04      	bge.n	80203f2 <GUI_SendNotification+0x6ea>
        {
          isense = -isense;
 80203e8:	18bb      	adds	r3, r7, r2
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	425b      	negs	r3, r3
 80203ee:	18ba      	adds	r2, r7, r2
 80203f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* VBUS & IBUS level */
      vsense = ((uint32_t)(isense) << 16) | vsense;
 80203f2:	2390      	movs	r3, #144	; 0x90
 80203f4:	18fb      	adds	r3, r7, r3
 80203f6:	681b      	ldr	r3, [r3, #0]
 80203f8:	041a      	lsls	r2, r3, #16
 80203fa:	69fb      	ldr	r3, [r7, #28]
 80203fc:	4313      	orrs	r3, r2
 80203fe:	61fb      	str	r3, [r7, #28]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VBUS_LEVEL, 4, (uint8_t *)&vsense);
 8020400:	231c      	movs	r3, #28
 8020402:	18fb      	adds	r3, r7, r3
 8020404:	2284      	movs	r2, #132	; 0x84
 8020406:	18b8      	adds	r0, r7, r2
 8020408:	2204      	movs	r2, #4
 802040a:	210c      	movs	r1, #12
 802040c:	f7fe fd96 	bl	801ef3c <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 8020410:	683a      	ldr	r2, [r7, #0]
 8020412:	2380      	movs	r3, #128	; 0x80
 8020414:	01db      	lsls	r3, r3, #7
 8020416:	4013      	ands	r3, r2
 8020418:	d009      	beq.n	802042e <GUI_SendNotification+0x726>
    {
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 802041a:	2384      	movs	r3, #132	; 0x84
 802041c:	18f8      	adds	r0, r7, r3
 802041e:	23a0      	movs	r3, #160	; 0xa0
 8020420:	2208      	movs	r2, #8
 8020422:	189b      	adds	r3, r3, r2
 8020424:	19db      	adds	r3, r3, r7
 8020426:	2204      	movs	r2, #4
 8020428:	2113      	movs	r1, #19
 802042a:	f7fe fd87 	bl	801ef3c <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 802042e:	683a      	ldr	r2, [r7, #0]
 8020430:	2380      	movs	r3, #128	; 0x80
 8020432:	021b      	lsls	r3, r3, #8
 8020434:	4013      	ands	r3, r2
 8020436:	d043      	beq.n	80204c0 <GUI_SendNotification+0x7b8>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1, (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 8020438:	240f      	movs	r4, #15
 802043a:	193b      	adds	r3, r7, r4
 802043c:	781b      	ldrb	r3, [r3, #0]
 802043e:	4a34      	ldr	r2, [pc, #208]	; (8020510 <GUI_SendNotification+0x808>)
 8020440:	009b      	lsls	r3, r3, #2
 8020442:	18d3      	adds	r3, r2, r3
 8020444:	785b      	ldrb	r3, [r3, #1]
 8020446:	075b      	lsls	r3, r3, #29
 8020448:	0f5b      	lsrs	r3, r3, #29
 802044a:	b2db      	uxtb	r3, r3
 802044c:	001a      	movs	r2, r3
 802044e:	2118      	movs	r1, #24
 8020450:	187b      	adds	r3, r7, r1
 8020452:	701a      	strb	r2, [r3, #0]
 8020454:	187b      	adds	r3, r7, r1
 8020456:	2584      	movs	r5, #132	; 0x84
 8020458:	1978      	adds	r0, r7, r5
 802045a:	2201      	movs	r2, #1
 802045c:	2105      	movs	r1, #5
 802045e:	f7fe fd6d 	bl	801ef3c <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8020462:	193b      	adds	r3, r7, r4
 8020464:	781b      	ldrb	r3, [r3, #0]
 8020466:	4a2a      	ldr	r2, [pc, #168]	; (8020510 <GUI_SendNotification+0x808>)
 8020468:	009b      	lsls	r3, r3, #2
 802046a:	18d3      	adds	r3, r2, r3
 802046c:	785b      	ldrb	r3, [r3, #1]
 802046e:	075b      	lsls	r3, r3, #29
 8020470:	0f5b      	lsrs	r3, r3, #29
 8020472:	b2db      	uxtb	r3, r3
 8020474:	2b00      	cmp	r3, #0
 8020476:	d123      	bne.n	80204c0 <GUI_SendNotification+0x7b8>
      {
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1, (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8020478:	193b      	adds	r3, r7, r4
 802047a:	781a      	ldrb	r2, [r3, #0]
 802047c:	4b24      	ldr	r3, [pc, #144]	; (8020510 <GUI_SendNotification+0x808>)
 802047e:	0092      	lsls	r2, r2, #2
 8020480:	5cd3      	ldrb	r3, [r2, r3]
 8020482:	061b      	lsls	r3, r3, #24
 8020484:	0f9b      	lsrs	r3, r3, #30
 8020486:	b2db      	uxtb	r3, r3
 8020488:	001a      	movs	r2, r3
 802048a:	2114      	movs	r1, #20
 802048c:	187b      	adds	r3, r7, r1
 802048e:	701a      	strb	r2, [r3, #0]
 8020490:	187b      	adds	r3, r7, r1
 8020492:	1978      	adds	r0, r7, r5
 8020494:	2201      	movs	r2, #1
 8020496:	2106      	movs	r1, #6
 8020498:	f7fe fd50 	bl	801ef3c <TLV_add>
        /* PowerRole*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1, (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 802049c:	193b      	adds	r3, r7, r4
 802049e:	781a      	ldrb	r2, [r3, #0]
 80204a0:	4b1b      	ldr	r3, [pc, #108]	; (8020510 <GUI_SendNotification+0x808>)
 80204a2:	0092      	lsls	r2, r2, #2
 80204a4:	5cd3      	ldrb	r3, [r2, r3]
 80204a6:	075b      	lsls	r3, r3, #29
 80204a8:	0fdb      	lsrs	r3, r3, #31
 80204aa:	b2db      	uxtb	r3, r3
 80204ac:	001a      	movs	r2, r3
 80204ae:	2110      	movs	r1, #16
 80204b0:	187b      	adds	r3, r7, r1
 80204b2:	701a      	strb	r2, [r3, #0]
 80204b4:	187b      	adds	r3, r7, r1
 80204b6:	1978      	adds	r0, r7, r5
 80204b8:	2201      	movs	r2, #1
 80204ba:	2108      	movs	r1, #8
 80204bc:	f7fe fd3e 	bl	801ef3c <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 80204c0:	2384      	movs	r3, #132	; 0x84
 80204c2:	18fb      	adds	r3, r7, r3
 80204c4:	0018      	movs	r0, r3
 80204c6:	f7fe fe9b 	bl	801f200 <TLV_deinit_encode>

    if (0U != TLV_get_string_length(Processed))
 80204ca:	4b12      	ldr	r3, [pc, #72]	; (8020514 <GUI_SendNotification+0x80c>)
 80204cc:	0018      	movs	r0, r3
 80204ce:	f7fe ff3d 	bl	801f34c <TLV_get_string_length>
 80204d2:	1e03      	subs	r3, r0, #0
 80204d4:	d010      	beq.n	80204f8 <GUI_SendNotification+0x7f0>
    {
      *pMsgToSend = Processed;
 80204d6:	68bb      	ldr	r3, [r7, #8]
 80204d8:	4a0e      	ldr	r2, [pc, #56]	; (8020514 <GUI_SendNotification+0x80c>)
 80204da:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)TLV_get_string_length(Processed) + 8U;
 80204dc:	4b0d      	ldr	r3, [pc, #52]	; (8020514 <GUI_SendNotification+0x80c>)
 80204de:	0018      	movs	r0, r3
 80204e0:	f7fe ff34 	bl	801f34c <TLV_get_string_length>
 80204e4:	0003      	movs	r3, r0
 80204e6:	b2db      	uxtb	r3, r3
 80204e8:	3308      	adds	r3, #8
 80204ea:	b2da      	uxtb	r2, r3
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 80204f0:	2397      	movs	r3, #151	; 0x97
 80204f2:	18fb      	adds	r3, r7, r3
 80204f4:	2201      	movs	r2, #1
 80204f6:	701a      	strb	r2, [r3, #0]

    }

  }

  return gui_state;
 80204f8:	2397      	movs	r3, #151	; 0x97
 80204fa:	18fb      	adds	r3, r7, r3
 80204fc:	781b      	ldrb	r3, [r3, #0]
}
 80204fe:	0018      	movs	r0, r3
 8020500:	46bd      	mov	sp, r7
 8020502:	b026      	add	sp, #152	; 0x98
 8020504:	bdb0      	pop	{r4, r5, r7, pc}
 8020506:	46c0      	nop			; (mov r8, r8)
 8020508:	20004b90 	.word	0x20004b90
 802050c:	20004b94 	.word	0x20004b94
 8020510:	20002f30 	.word	0x20002f30
 8020514:	20004a7c 	.word	0x20004a7c

08020518 <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 8020518:	b590      	push	{r4, r7, lr}
 802051a:	b085      	sub	sp, #20
 802051c:	af00      	add	r7, sp, #0
 802051e:	0002      	movs	r2, r0
 8020520:	1dfb      	adds	r3, r7, #7
 8020522:	701a      	strb	r2, [r3, #0]
 8020524:	1d3b      	adds	r3, r7, #4
 8020526:	1c0a      	adds	r2, r1, #0
 8020528:	801a      	strh	r2, [r3, #0]
#if defined(_SNK) || defined(_DRP)
  if ((uint16_t)USBPD_NOTIFY_REQUEST_ACCEPTED == EventVal)
 802052a:	1d3b      	adds	r3, r7, #4
 802052c:	881b      	ldrh	r3, [r3, #0]
 802052e:	2b01      	cmp	r3, #1
 8020530:	d136      	bne.n	80205a0 <GUI_PostNotificationMessage+0x88>
  {
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 8020532:	1dfb      	adds	r3, r7, #7
 8020534:	781a      	ldrb	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
 8020536:	1dfb      	adds	r3, r7, #7
 8020538:	7818      	ldrb	r0, [r3, #0]
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 802053a:	4927      	ldr	r1, [pc, #156]	; (80205d8 <GUI_PostNotificationMessage+0xc0>)
 802053c:	0013      	movs	r3, r2
 802053e:	00db      	lsls	r3, r3, #3
 8020540:	1a9b      	subs	r3, r3, r2
 8020542:	011b      	lsls	r3, r3, #4
 8020544:	18cb      	adds	r3, r1, r3
 8020546:	3344      	adds	r3, #68	; 0x44
 8020548:	681a      	ldr	r2, [r3, #0]
 802054a:	4924      	ldr	r1, [pc, #144]	; (80205dc <GUI_PostNotificationMessage+0xc4>)
 802054c:	2374      	movs	r3, #116	; 0x74
 802054e:	4343      	muls	r3, r0
 8020550:	18cb      	adds	r3, r1, r3
 8020552:	3308      	adds	r3, #8
 8020554:	601a      	str	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 8020556:	1dfb      	adds	r3, r7, #7
 8020558:	781a      	ldrb	r2, [r3, #0]
 802055a:	491f      	ldr	r1, [pc, #124]	; (80205d8 <GUI_PostNotificationMessage+0xc0>)
 802055c:	0013      	movs	r3, r2
 802055e:	00db      	lsls	r3, r3, #3
 8020560:	1a9b      	subs	r3, r3, r2
 8020562:	011b      	lsls	r3, r3, #4
 8020564:	18cb      	adds	r3, r1, r3
 8020566:	3344      	adds	r3, #68	; 0x44
 8020568:	6819      	ldr	r1, [r3, #0]
 802056a:	1dfb      	adds	r3, r7, #7
 802056c:	781a      	ldrb	r2, [r3, #0]
 802056e:	481a      	ldr	r0, [pc, #104]	; (80205d8 <GUI_PostNotificationMessage+0xc0>)
 8020570:	0013      	movs	r3, r2
 8020572:	00db      	lsls	r3, r3, #3
 8020574:	1a9b      	subs	r3, r3, r2
 8020576:	011b      	lsls	r3, r3, #4
 8020578:	18c3      	adds	r3, r0, r3
 802057a:	3348      	adds	r3, #72	; 0x48
 802057c:	681b      	ldr	r3, [r3, #0]
 802057e:	434b      	muls	r3, r1
 8020580:	001a      	movs	r2, r3
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
 8020582:	1dfb      	adds	r3, r7, #7
 8020584:	781c      	ldrb	r4, [r3, #0]
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 8020586:	23fa      	movs	r3, #250	; 0xfa
 8020588:	0099      	lsls	r1, r3, #2
 802058a:	0010      	movs	r0, r2
 802058c:	f7e5 fe30 	bl	80061f0 <__udivsi3>
 8020590:	0003      	movs	r3, r0
 8020592:	0019      	movs	r1, r3
 8020594:	4a11      	ldr	r2, [pc, #68]	; (80205dc <GUI_PostNotificationMessage+0xc4>)
 8020596:	2374      	movs	r3, #116	; 0x74
 8020598:	4363      	muls	r3, r4
 802059a:	18d3      	adds	r3, r2, r3
 802059c:	3314      	adds	r3, #20
 802059e:	6019      	str	r1, [r3, #0]
  }
#endif /* _SNK || _DRP */

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 80205a0:	4b0f      	ldr	r3, [pc, #60]	; (80205e0 <GUI_PostNotificationMessage+0xc8>)
 80205a2:	781b      	ldrb	r3, [r3, #0]
 80205a4:	2b01      	cmp	r3, #1
 80205a6:	d113      	bne.n	80205d0 <GUI_PostNotificationMessage+0xb8>
  {
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
                     | ((uint32_t)PortNum << GUI_PE_PORT_NUM_Pos)
 80205a8:	1dfb      	adds	r3, r7, #7
 80205aa:	781b      	ldrb	r3, [r3, #0]
 80205ac:	061a      	lsls	r2, r3, #24
                     | ((uint32_t)EventVal << GUI_PE_NOTIF_Pos);
 80205ae:	1d3b      	adds	r3, r7, #4
 80205b0:	881b      	ldrh	r3, [r3, #0]
 80205b2:	011b      	lsls	r3, r3, #4
 80205b4:	4313      	orrs	r3, r2
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
 80205b6:	2201      	movs	r2, #1
 80205b8:	4313      	orrs	r3, r2
 80205ba:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, event, 0U);
 80205bc:	68fb      	ldr	r3, [r7, #12]
 80205be:	60bb      	str	r3, [r7, #8]
 80205c0:	4b08      	ldr	r3, [pc, #32]	; (80205e4 <GUI_PostNotificationMessage+0xcc>)
 80205c2:	6818      	ldr	r0, [r3, #0]
 80205c4:	2308      	movs	r3, #8
 80205c6:	18f9      	adds	r1, r7, r3
 80205c8:	2300      	movs	r3, #0
 80205ca:	2200      	movs	r2, #0
 80205cc:	f7f7 fde2 	bl	8018194 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 80205d0:	46c0      	nop			; (mov r8, r8)
 80205d2:	46bd      	mov	sp, r7
 80205d4:	b005      	add	sp, #20
 80205d6:	bd90      	pop	{r4, r7, pc}
 80205d8:	20004b9c 	.word	0x20004b9c
 80205dc:	20000108 	.word	0x20000108
 80205e0:	20004b7c 	.word	0x20004b7c
 80205e4:	20004b80 	.word	0x20004b80

080205e8 <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 80205e8:	b590      	push	{r4, r7, lr}
 80205ea:	b08b      	sub	sp, #44	; 0x2c
 80205ec:	af00      	add	r7, sp, #0
 80205ee:	60ba      	str	r2, [r7, #8]
 80205f0:	607b      	str	r3, [r7, #4]
 80205f2:	230f      	movs	r3, #15
 80205f4:	18fb      	adds	r3, r7, r3
 80205f6:	1c02      	adds	r2, r0, #0
 80205f8:	701a      	strb	r2, [r3, #0]
 80205fa:	200e      	movs	r0, #14
 80205fc:	183b      	adds	r3, r7, r0
 80205fe:	1c0a      	adds	r2, r1, #0
 8020600:	701a      	strb	r2, [r3, #0]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 8020602:	183b      	adds	r3, r7, r0
 8020604:	781b      	ldrb	r3, [r3, #0]
 8020606:	2b13      	cmp	r3, #19
 8020608:	d900      	bls.n	802060c <GUI_SaveInfo+0x24>
 802060a:	e0ca      	b.n	80207a2 <GUI_SaveInfo+0x1ba>
 802060c:	009a      	lsls	r2, r3, #2
 802060e:	4b6b      	ldr	r3, [pc, #428]	; (80207bc <GUI_SaveInfo+0x1d4>)
 8020610:	18d3      	adds	r3, r2, r3
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	469f      	mov	pc, r3
  {
    /* Case requested DO position Data information :
    */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4U)
 8020616:	687b      	ldr	r3, [r7, #4]
 8020618:	2b04      	cmp	r3, #4
 802061a:	d000      	beq.n	802061e <GUI_SaveInfo+0x36>
 802061c:	e0c3      	b.n	80207a6 <GUI_SaveInfo+0x1be>
      {
        uint8_t *temp;
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPosition;
 802061e:	240f      	movs	r4, #15
 8020620:	193b      	adds	r3, r7, r4
 8020622:	781a      	ldrb	r2, [r3, #0]
 8020624:	0013      	movs	r3, r2
 8020626:	00db      	lsls	r3, r3, #3
 8020628:	1a9b      	subs	r3, r3, r2
 802062a:	011b      	lsls	r3, r3, #4
 802062c:	3340      	adds	r3, #64	; 0x40
 802062e:	001a      	movs	r2, r3
 8020630:	4b63      	ldr	r3, [pc, #396]	; (80207c0 <GUI_SaveInfo+0x1d8>)
 8020632:	18d3      	adds	r3, r2, r3
 8020634:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 8020636:	687a      	ldr	r2, [r7, #4]
 8020638:	68b9      	ldr	r1, [r7, #8]
 802063a:	693b      	ldr	r3, [r7, #16]
 802063c:	0018      	movs	r0, r3
 802063e:	f003 f8f9 	bl	8023834 <memcpy>
        GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 8020642:	68bb      	ldr	r3, [r7, #8]
 8020644:	7819      	ldrb	r1, [r3, #0]
 8020646:	193b      	adds	r3, r7, r4
 8020648:	781a      	ldrb	r2, [r3, #0]
 802064a:	0008      	movs	r0, r1
 802064c:	495c      	ldr	r1, [pc, #368]	; (80207c0 <GUI_SaveInfo+0x1d8>)
 802064e:	0013      	movs	r3, r2
 8020650:	00db      	lsls	r3, r3, #3
 8020652:	1a9b      	subs	r3, r3, r2
 8020654:	011b      	lsls	r3, r3, #4
 8020656:	18cb      	adds	r3, r1, r3
 8020658:	334c      	adds	r3, #76	; 0x4c
 802065a:	6018      	str	r0, [r3, #0]
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 802065c:	193b      	adds	r3, r7, r4
 802065e:	781a      	ldrb	r2, [r3, #0]
 8020660:	0013      	movs	r3, r2
 8020662:	00db      	lsls	r3, r3, #3
 8020664:	1a9b      	subs	r3, r3, r2
 8020666:	011b      	lsls	r3, r3, #4
 8020668:	3348      	adds	r3, #72	; 0x48
 802066a:	001a      	movs	r2, r3
 802066c:	4b54      	ldr	r3, [pc, #336]	; (80207c0 <GUI_SaveInfo+0x1d8>)
 802066e:	18d3      	adds	r3, r2, r3
 8020670:	3304      	adds	r3, #4
 8020672:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 8020674:	687a      	ldr	r2, [r7, #4]
 8020676:	68b9      	ldr	r1, [r7, #8]
 8020678:	693b      	ldr	r3, [r7, #16]
 802067a:	0018      	movs	r0, r3
 802067c:	f003 f8da 	bl	8023834 <memcpy>
      }
      break;
 8020680:	e091      	b.n	80207a6 <GUI_SaveInfo+0x1be>

    /* Case Received Source PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	2b1c      	cmp	r3, #28
 8020686:	d900      	bls.n	802068a <GUI_SaveInfo+0xa2>
 8020688:	e08f      	b.n	80207aa <GUI_SaveInfo+0x1c2>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4U);
 802068a:	230f      	movs	r3, #15
 802068c:	18fb      	adds	r3, r7, r3
 802068e:	781a      	ldrb	r2, [r3, #0]
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	0899      	lsrs	r1, r3, #2
 8020694:	484a      	ldr	r0, [pc, #296]	; (80207c0 <GUI_SaveInfo+0x1d8>)
 8020696:	0013      	movs	r3, r2
 8020698:	00db      	lsls	r3, r3, #3
 802069a:	1a9b      	subs	r3, r3, r2
 802069c:	011b      	lsls	r3, r3, #4
 802069e:	18c3      	adds	r3, r0, r3
 80206a0:	331c      	adds	r3, #28
 80206a2:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 80206a4:	2300      	movs	r3, #0
 80206a6:	627b      	str	r3, [r7, #36]	; 0x24
 80206a8:	e018      	b.n	80206dc <GUI_SaveInfo+0xf4>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 80206aa:	230f      	movs	r3, #15
 80206ac:	18fb      	adds	r3, r7, r3
 80206ae:	781a      	ldrb	r2, [r3, #0]
 80206b0:	0013      	movs	r3, r2
 80206b2:	00db      	lsls	r3, r3, #3
 80206b4:	1a9b      	subs	r3, r3, r2
 80206b6:	009b      	lsls	r3, r3, #2
 80206b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80206ba:	189b      	adds	r3, r3, r2
 80206bc:	009a      	lsls	r2, r3, #2
 80206be:	4b40      	ldr	r3, [pc, #256]	; (80207c0 <GUI_SaveInfo+0x1d8>)
 80206c0:	18d3      	adds	r3, r2, r3
 80206c2:	617b      	str	r3, [r7, #20]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 80206c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80206c6:	009b      	lsls	r3, r3, #2
 80206c8:	68ba      	ldr	r2, [r7, #8]
 80206ca:	18d1      	adds	r1, r2, r3
 80206cc:	697b      	ldr	r3, [r7, #20]
 80206ce:	2204      	movs	r2, #4
 80206d0:	0018      	movs	r0, r3
 80206d2:	f003 f8af 	bl	8023834 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 80206d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80206d8:	3301      	adds	r3, #1
 80206da:	627b      	str	r3, [r7, #36]	; 0x24
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	089b      	lsrs	r3, r3, #2
 80206e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80206e2:	429a      	cmp	r2, r3
 80206e4:	d3e1      	bcc.n	80206aa <GUI_SaveInfo+0xc2>
        }
      }
      break;
 80206e6:	e060      	b.n	80207aa <GUI_SaveInfo+0x1c2>

    /* Case Received Sink PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	2b1c      	cmp	r3, #28
 80206ec:	d85f      	bhi.n	80207ae <GUI_SaveInfo+0x1c6>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4U);
 80206ee:	230f      	movs	r3, #15
 80206f0:	18fb      	adds	r3, r7, r3
 80206f2:	781a      	ldrb	r2, [r3, #0]
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	0899      	lsrs	r1, r3, #2
 80206f8:	4831      	ldr	r0, [pc, #196]	; (80207c0 <GUI_SaveInfo+0x1d8>)
 80206fa:	0013      	movs	r3, r2
 80206fc:	00db      	lsls	r3, r3, #3
 80206fe:	1a9b      	subs	r3, r3, r2
 8020700:	011b      	lsls	r3, r3, #4
 8020702:	18c3      	adds	r3, r0, r3
 8020704:	333c      	adds	r3, #60	; 0x3c
 8020706:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8020708:	2300      	movs	r3, #0
 802070a:	627b      	str	r3, [r7, #36]	; 0x24
 802070c:	e019      	b.n	8020742 <GUI_SaveInfo+0x15a>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 802070e:	230f      	movs	r3, #15
 8020710:	18fb      	adds	r3, r7, r3
 8020712:	781a      	ldrb	r2, [r3, #0]
 8020714:	0013      	movs	r3, r2
 8020716:	00db      	lsls	r3, r3, #3
 8020718:	1a9b      	subs	r3, r3, r2
 802071a:	009b      	lsls	r3, r3, #2
 802071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802071e:	189b      	adds	r3, r3, r2
 8020720:	3308      	adds	r3, #8
 8020722:	009a      	lsls	r2, r3, #2
 8020724:	4b26      	ldr	r3, [pc, #152]	; (80207c0 <GUI_SaveInfo+0x1d8>)
 8020726:	18d3      	adds	r3, r2, r3
 8020728:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 802072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802072c:	009b      	lsls	r3, r3, #2
 802072e:	68ba      	ldr	r2, [r7, #8]
 8020730:	18d1      	adds	r1, r2, r3
 8020732:	69bb      	ldr	r3, [r7, #24]
 8020734:	2204      	movs	r2, #4
 8020736:	0018      	movs	r0, r3
 8020738:	f003 f87c 	bl	8023834 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 802073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802073e:	3301      	adds	r3, #1
 8020740:	627b      	str	r3, [r7, #36]	; 0x24
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	089b      	lsrs	r3, r3, #2
 8020746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020748:	429a      	cmp	r2, r3
 802074a:	d3e0      	bcc.n	802070e <GUI_SaveInfo+0x126>
        }
      }
      break;
 802074c:	e02f      	b.n	80207ae <GUI_SaveInfo+0x1c6>

    /* Case Received Request PDO Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4U)
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	2b04      	cmp	r3, #4
 8020752:	d12e      	bne.n	80207b2 <GUI_SaveInfo+0x1ca>
      {
        uint8_t *rdo;
        rdo = (uint8_t *)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 8020754:	230f      	movs	r3, #15
 8020756:	18fb      	adds	r3, r7, r3
 8020758:	781a      	ldrb	r2, [r3, #0]
 802075a:	0013      	movs	r3, r2
 802075c:	00db      	lsls	r3, r3, #3
 802075e:	1a9b      	subs	r3, r3, r2
 8020760:	011b      	lsls	r3, r3, #4
 8020762:	3350      	adds	r3, #80	; 0x50
 8020764:	001a      	movs	r2, r3
 8020766:	4b16      	ldr	r3, [pc, #88]	; (80207c0 <GUI_SaveInfo+0x1d8>)
 8020768:	18d3      	adds	r3, r2, r3
 802076a:	61fb      	str	r3, [r7, #28]
        (void)memcpy(rdo, Ptr, Size);
 802076c:	687a      	ldr	r2, [r7, #4]
 802076e:	68b9      	ldr	r1, [r7, #8]
 8020770:	69fb      	ldr	r3, [r7, #28]
 8020772:	0018      	movs	r0, r3
 8020774:	f003 f85e 	bl	8023834 <memcpy>
      }
      break;
 8020778:	e01b      	b.n	80207b2 <GUI_SaveInfo+0x1ca>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t  *_snk_ext_capa;
      _snk_ext_capa = (uint8_t *)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 802077a:	230f      	movs	r3, #15
 802077c:	18fb      	adds	r3, r7, r3
 802077e:	781a      	ldrb	r2, [r3, #0]
 8020780:	0013      	movs	r3, r2
 8020782:	00db      	lsls	r3, r3, #3
 8020784:	1a9b      	subs	r3, r3, r2
 8020786:	011b      	lsls	r3, r3, #4
 8020788:	3350      	adds	r3, #80	; 0x50
 802078a:	001a      	movs	r2, r3
 802078c:	4b0c      	ldr	r3, [pc, #48]	; (80207c0 <GUI_SaveInfo+0x1d8>)
 802078e:	18d3      	adds	r3, r2, r3
 8020790:	3304      	adds	r3, #4
 8020792:	623b      	str	r3, [r7, #32]
      (void)memcpy(_snk_ext_capa, Ptr, Size);
 8020794:	687a      	ldr	r2, [r7, #4]
 8020796:	68b9      	ldr	r1, [r7, #8]
 8020798:	6a3b      	ldr	r3, [r7, #32]
 802079a:	0018      	movs	r0, r3
 802079c:	f003 f84a 	bl	8023834 <memcpy>
      break;
 80207a0:	e008      	b.n	80207b4 <GUI_SaveInfo+0x1cc>
#endif /* _VCONN_SUPPORT */

    /* In case of unexpected data type (Set request could not be fulfilled) :
     */
    default :
      break;
 80207a2:	46c0      	nop			; (mov r8, r8)
 80207a4:	e006      	b.n	80207b4 <GUI_SaveInfo+0x1cc>
      break;
 80207a6:	46c0      	nop			; (mov r8, r8)
 80207a8:	e004      	b.n	80207b4 <GUI_SaveInfo+0x1cc>
      break;
 80207aa:	46c0      	nop			; (mov r8, r8)
 80207ac:	e002      	b.n	80207b4 <GUI_SaveInfo+0x1cc>
      break;
 80207ae:	46c0      	nop			; (mov r8, r8)
 80207b0:	e000      	b.n	80207b4 <GUI_SaveInfo+0x1cc>
      break;
 80207b2:	46c0      	nop			; (mov r8, r8)
  }
}
 80207b4:	46c0      	nop			; (mov r8, r8)
 80207b6:	46bd      	mov	sp, r7
 80207b8:	b00b      	add	sp, #44	; 0x2c
 80207ba:	bd90      	pop	{r4, r7, pc}
 80207bc:	0802538c 	.word	0x0802538c
 80207c0:	20004b9c 	.word	0x20004b9c

080207c4 <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 80207c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80207c6:	b091      	sub	sp, #68	; 0x44
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	0002      	movs	r2, r0
 80207cc:	6039      	str	r1, [r7, #0]
 80207ce:	1dfb      	adds	r3, r7, #7
 80207d0:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 80207d2:	1dfb      	adds	r3, r7, #7
 80207d4:	781b      	ldrb	r3, [r3, #0]
 80207d6:	015b      	lsls	r3, r3, #5
 80207d8:	b25b      	sxtb	r3, r3
 80207da:	2203      	movs	r2, #3
 80207dc:	4313      	orrs	r3, r2
 80207de:	b25b      	sxtb	r3, r3
 80207e0:	b2d9      	uxtb	r1, r3
 80207e2:	683b      	ldr	r3, [r7, #0]
 80207e4:	2280      	movs	r2, #128	; 0x80
 80207e6:	0052      	lsls	r2, r2, #1
 80207e8:	2028      	movs	r0, #40	; 0x28
 80207ea:	1838      	adds	r0, r7, r0
 80207ec:	f7fe fb43 	bl	801ee76 <TLV_init_encode>

  /* Information by board */
  if (0U == PortNum)
 80207f0:	1dfb      	adds	r3, r7, #7
 80207f2:	781b      	ldrb	r3, [r3, #0]
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d163      	bne.n	80208c0 <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t *hwversion;
    if (NULL != pCB_HWBoardVersion)
 80207f8:	4bc2      	ldr	r3, [pc, #776]	; (8020b04 <Send_DpmInitCnf+0x340>)
 80207fa:	681b      	ldr	r3, [r3, #0]
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	d005      	beq.n	802080c <Send_DpmInitCnf+0x48>
    {
      hwversion = pCB_HWBoardVersion();
 8020800:	4bc0      	ldr	r3, [pc, #768]	; (8020b04 <Send_DpmInitCnf+0x340>)
 8020802:	681b      	ldr	r3, [r3, #0]
 8020804:	4798      	blx	r3
 8020806:	0003      	movs	r3, r0
 8020808:	63fb      	str	r3, [r7, #60]	; 0x3c
 802080a:	e001      	b.n	8020810 <Send_DpmInitCnf+0x4c>
    }
    else
    {
      hwversion = (uint8_t *) "UNKNOWN";
 802080c:	4bbe      	ldr	r3, [pc, #760]	; (8020b08 <Send_DpmInitCnf+0x344>)
 802080e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWBOARDVERSION, (uint16_t)(strlen((const char *)hwversion)), hwversion);
 8020810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020812:	0018      	movs	r0, r3
 8020814:	f7e5 fcda 	bl	80061cc <strlen>
 8020818:	0003      	movs	r3, r0
 802081a:	b29a      	uxth	r2, r3
 802081c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802081e:	2128      	movs	r1, #40	; 0x28
 8020820:	1878      	adds	r0, r7, r1
 8020822:	2100      	movs	r1, #0
 8020824:	f7fe fb8a 	bl	801ef3c <TLV_add>

    /* HWPDType */
    const uint8_t *hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 8020828:	4bb6      	ldr	r3, [pc, #728]	; (8020b04 <Send_DpmInitCnf+0x340>)
 802082a:	681b      	ldr	r3, [r3, #0]
 802082c:	2b00      	cmp	r3, #0
 802082e:	d005      	beq.n	802083c <Send_DpmInitCnf+0x78>
    {
      hwpdtype  = pCB_HWPDType();
 8020830:	4bb6      	ldr	r3, [pc, #728]	; (8020b0c <Send_DpmInitCnf+0x348>)
 8020832:	681b      	ldr	r3, [r3, #0]
 8020834:	4798      	blx	r3
 8020836:	0003      	movs	r3, r0
 8020838:	63bb      	str	r3, [r7, #56]	; 0x38
 802083a:	e001      	b.n	8020840 <Send_DpmInitCnf+0x7c>
    }
    else
    {
      hwpdtype = (uint8_t *) "UNKNOWN";
 802083c:	4bb2      	ldr	r3, [pc, #712]	; (8020b08 <Send_DpmInitCnf+0x344>)
 802083e:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWPDTYPE, (uint16_t)(strlen((const char *)hwpdtype)), hwpdtype);
 8020840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020842:	0018      	movs	r0, r3
 8020844:	f7e5 fcc2 	bl	80061cc <strlen>
 8020848:	0003      	movs	r3, r0
 802084a:	b29a      	uxth	r2, r3
 802084c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802084e:	2428      	movs	r4, #40	; 0x28
 8020850:	1938      	adds	r0, r7, r4
 8020852:	2101      	movs	r1, #1
 8020854:	f7fe fb72 	bl	801ef3c <TLV_add>

    /* NbPortMax */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NBPORTMAX, 1, (uint8_t[]) { USBPD_PORT_COUNT });
 8020858:	2124      	movs	r1, #36	; 0x24
 802085a:	187b      	adds	r3, r7, r1
 802085c:	2201      	movs	r2, #1
 802085e:	701a      	strb	r2, [r3, #0]
 8020860:	187b      	adds	r3, r7, r1
 8020862:	1938      	adds	r0, r7, r4
 8020864:	2201      	movs	r2, #1
 8020866:	2102      	movs	r1, #2
 8020868:	f7fe fb68 	bl	801ef3c <TLV_add>
    /* FW Version */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
    {
 802086c:	251c      	movs	r5, #28
 802086e:	197b      	adds	r3, r7, r5
 8020870:	4aa7      	ldr	r2, [pc, #668]	; (8020b10 <Send_DpmInitCnf+0x34c>)
 8020872:	ca03      	ldmia	r2!, {r0, r1}
 8020874:	c303      	stmia	r3!, {r0, r1}
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
 8020876:	197b      	adds	r3, r7, r5
 8020878:	1938      	adds	r0, r7, r4
 802087a:	2208      	movs	r2, #8
 802087c:	2103      	movs	r1, #3
 802087e:	f7fe fb5d 	bl	801ef3c <TLV_add>
      (_LIB_ID & 0x00FF0000U) >> 16,
      (_LIB_ID & 0xFF000000U) >> 24
    }
                 );
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8020882:	2118      	movs	r1, #24
 8020884:	187b      	adds	r3, r7, r1
 8020886:	2200      	movs	r2, #0
 8020888:	701a      	strb	r2, [r3, #0]
 802088a:	187b      	adds	r3, r7, r1
 802088c:	1938      	adds	r0, r7, r4
 802088e:	2201      	movs	r2, #1
 8020890:	211e      	movs	r1, #30
 8020892:	f7fe fb53 	bl	801ef3c <TLV_add>
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8020896:	2114      	movs	r1, #20
 8020898:	187b      	adds	r3, r7, r1
 802089a:	2200      	movs	r2, #0
 802089c:	701a      	strb	r2, [r3, #0]
 802089e:	187b      	adds	r3, r7, r1
 80208a0:	1938      	adds	r0, r7, r4
 80208a2:	2201      	movs	r2, #1
 80208a4:	211e      	movs	r1, #30
 80208a6:	f7fe fb49 	bl	801ef3c <TLV_add>

    /* Original settings */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t *)&GUI_OriginalSettings);
 80208aa:	4b9a      	ldr	r3, [pc, #616]	; (8020b14 <Send_DpmInitCnf+0x350>)
 80208ac:	1938      	adds	r0, r7, r4
 80208ae:	2201      	movs	r2, #1
 80208b0:	211f      	movs	r1, #31
 80208b2:	f7fe fb43 	bl	801ef3c <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 80208b6:	193b      	adds	r3, r7, r4
 80208b8:	0018      	movs	r0, r3
 80208ba:	f7fe fca1 	bl	801f200 <TLV_deinit_encode>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_VCONNSUPPLY, 2, (uint8_t *)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 80208be:	e11c      	b.n	8020afa <Send_DpmInitCnf+0x336>
    uint8_t port = PortNum - 1U;
 80208c0:	2637      	movs	r6, #55	; 0x37
 80208c2:	19bb      	adds	r3, r7, r6
 80208c4:	1dfa      	adds	r2, r7, #7
 80208c6:	7812      	ldrb	r2, [r2, #0]
 80208c8:	3a01      	subs	r2, #1
 80208ca:	701a      	strb	r2, [r3, #0]
    settings = (uint16_t)DPM_Settings[port].PE_SpecRevision;
 80208cc:	19bb      	adds	r3, r7, r6
 80208ce:	781a      	ldrb	r2, [r3, #0]
 80208d0:	4991      	ldr	r1, [pc, #580]	; (8020b18 <Send_DpmInitCnf+0x354>)
 80208d2:	0013      	movs	r3, r2
 80208d4:	005b      	lsls	r3, r3, #1
 80208d6:	189b      	adds	r3, r3, r2
 80208d8:	009b      	lsls	r3, r3, #2
 80208da:	18cb      	adds	r3, r1, r3
 80208dc:	791b      	ldrb	r3, [r3, #4]
 80208de:	079b      	lsls	r3, r3, #30
 80208e0:	0f9b      	lsrs	r3, r3, #30
 80208e2:	b2db      	uxtb	r3, r3
 80208e4:	b29a      	uxth	r2, r3
 80208e6:	2412      	movs	r4, #18
 80208e8:	193b      	adds	r3, r7, r4
 80208ea:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]) { 0x12, settings });
 80208ec:	2110      	movs	r1, #16
 80208ee:	187b      	adds	r3, r7, r1
 80208f0:	2212      	movs	r2, #18
 80208f2:	701a      	strb	r2, [r3, #0]
 80208f4:	193b      	adds	r3, r7, r4
 80208f6:	881b      	ldrh	r3, [r3, #0]
 80208f8:	b2da      	uxtb	r2, r3
 80208fa:	187b      	adds	r3, r7, r1
 80208fc:	705a      	strb	r2, [r3, #1]
 80208fe:	187b      	adds	r3, r7, r1
 8020900:	2528      	movs	r5, #40	; 0x28
 8020902:	1978      	adds	r0, r7, r5
 8020904:	2202      	movs	r2, #2
 8020906:	2104      	movs	r1, #4
 8020908:	f7fe fb18 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 802090c:	19bb      	adds	r3, r7, r6
 802090e:	781a      	ldrb	r2, [r3, #0]
 8020910:	4981      	ldr	r1, [pc, #516]	; (8020b18 <Send_DpmInitCnf+0x354>)
 8020912:	2008      	movs	r0, #8
 8020914:	0013      	movs	r3, r2
 8020916:	005b      	lsls	r3, r3, #1
 8020918:	189b      	adds	r3, r3, r2
 802091a:	009b      	lsls	r3, r3, #2
 802091c:	18cb      	adds	r3, r1, r3
 802091e:	181b      	adds	r3, r3, r0
 8020920:	781b      	ldrb	r3, [r3, #0]
 8020922:	07db      	lsls	r3, r3, #31
 8020924:	0fdb      	lsrs	r3, r3, #31
 8020926:	b2db      	uxtb	r3, r3
 8020928:	b29a      	uxth	r2, r3
 802092a:	193b      	adds	r3, r7, r4
 802092c:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t *)&settings);
 802092e:	193b      	adds	r3, r7, r4
 8020930:	1978      	adds	r0, r7, r5
 8020932:	2201      	movs	r2, #1
 8020934:	2106      	movs	r1, #6
 8020936:	f7fe fb01 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_AccesorySupport;
 802093a:	19bb      	adds	r3, r7, r6
 802093c:	781a      	ldrb	r2, [r3, #0]
 802093e:	4976      	ldr	r1, [pc, #472]	; (8020b18 <Send_DpmInitCnf+0x354>)
 8020940:	0013      	movs	r3, r2
 8020942:	005b      	lsls	r3, r3, #1
 8020944:	189b      	adds	r3, r3, r2
 8020946:	009b      	lsls	r3, r3, #2
 8020948:	18cb      	adds	r3, r1, r3
 802094a:	795b      	ldrb	r3, [r3, #5]
 802094c:	06db      	lsls	r3, r3, #27
 802094e:	0fdb      	lsrs	r3, r3, #31
 8020950:	b2db      	uxtb	r3, r3
 8020952:	b29a      	uxth	r2, r3
 8020954:	193b      	adds	r3, r7, r4
 8020956:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ACCESSORYSUPP, 1, (uint8_t *)&settings);
 8020958:	193b      	adds	r3, r7, r4
 802095a:	1978      	adds	r0, r7, r5
 802095c:	2201      	movs	r2, #1
 802095e:	2107      	movs	r1, #7
 8020960:	f7fe faec 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryDetection;
 8020964:	19bb      	adds	r3, r7, r6
 8020966:	781b      	ldrb	r3, [r3, #0]
 8020968:	4a6c      	ldr	r2, [pc, #432]	; (8020b1c <Send_DpmInitCnf+0x358>)
 802096a:	2168      	movs	r1, #104	; 0x68
 802096c:	2074      	movs	r0, #116	; 0x74
 802096e:	4343      	muls	r3, r0
 8020970:	18d3      	adds	r3, r2, r3
 8020972:	185b      	adds	r3, r3, r1
 8020974:	78db      	ldrb	r3, [r3, #3]
 8020976:	07db      	lsls	r3, r3, #31
 8020978:	0fdb      	lsrs	r3, r3, #31
 802097a:	b2db      	uxtb	r3, r3
 802097c:	b29a      	uxth	r2, r3
 802097e:	193b      	adds	r3, r7, r4
 8020980:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t *)&settings);
 8020982:	193b      	adds	r3, r7, r4
 8020984:	1978      	adds	r0, r7, r5
 8020986:	2201      	movs	r2, #1
 8020988:	2108      	movs	r1, #8
 802098a:	f7fe fad7 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryTransition;
 802098e:	19bb      	adds	r3, r7, r6
 8020990:	781b      	ldrb	r3, [r3, #0]
 8020992:	4a62      	ldr	r2, [pc, #392]	; (8020b1c <Send_DpmInitCnf+0x358>)
 8020994:	2168      	movs	r1, #104	; 0x68
 8020996:	2074      	movs	r0, #116	; 0x74
 8020998:	4343      	muls	r3, r0
 802099a:	18d3      	adds	r3, r2, r3
 802099c:	185b      	adds	r3, r3, r1
 802099e:	78db      	ldrb	r3, [r3, #3]
 80209a0:	079b      	lsls	r3, r3, #30
 80209a2:	0fdb      	lsrs	r3, r3, #31
 80209a4:	b2db      	uxtb	r3, r3
 80209a6:	b29a      	uxth	r2, r3
 80209a8:	193b      	adds	r3, r7, r4
 80209aa:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t *)&settings);
 80209ac:	193b      	adds	r3, r7, r4
 80209ae:	1978      	adds	r0, r7, r5
 80209b0:	2201      	movs	r2, #1
 80209b2:	2109      	movs	r1, #9
 80209b4:	f7fe fac2 	bl	801ef3c <TLV_add>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ISCABLE, 1, (uint8_t[]) { 0x00 });
 80209b8:	210c      	movs	r1, #12
 80209ba:	187b      	adds	r3, r7, r1
 80209bc:	2200      	movs	r2, #0
 80209be:	701a      	strb	r2, [r3, #0]
 80209c0:	187b      	adds	r3, r7, r1
 80209c2:	1978      	adds	r0, r7, r5
 80209c4:	2201      	movs	r2, #1
 80209c6:	210b      	movs	r1, #11
 80209c8:	f7fe fab8 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_TryFeature;
 80209cc:	19bb      	adds	r3, r7, r6
 80209ce:	781a      	ldrb	r2, [r3, #0]
 80209d0:	4951      	ldr	r1, [pc, #324]	; (8020b18 <Send_DpmInitCnf+0x354>)
 80209d2:	0013      	movs	r3, r2
 80209d4:	005b      	lsls	r3, r3, #1
 80209d6:	189b      	adds	r3, r3, r2
 80209d8:	009b      	lsls	r3, r3, #2
 80209da:	18cb      	adds	r3, r1, r3
 80209dc:	795b      	ldrb	r3, [r3, #5]
 80209de:	071b      	lsls	r3, r3, #28
 80209e0:	0f9b      	lsrs	r3, r3, #30
 80209e2:	b2db      	uxtb	r3, r3
 80209e4:	b29a      	uxth	r2, r3
 80209e6:	193b      	adds	r3, r7, r4
 80209e8:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TRYFEATURE, 1, (uint8_t *)&settings);
 80209ea:	193b      	adds	r3, r7, r4
 80209ec:	1978      	adds	r0, r7, r5
 80209ee:	2201      	movs	r2, #1
 80209f0:	2110      	movs	r1, #16
 80209f2:	f7fe faa3 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_RpResistorValue;
 80209f6:	19bb      	adds	r3, r7, r6
 80209f8:	781b      	ldrb	r3, [r3, #0]
 80209fa:	4a48      	ldr	r2, [pc, #288]	; (8020b1c <Send_DpmInitCnf+0x358>)
 80209fc:	2168      	movs	r1, #104	; 0x68
 80209fe:	2074      	movs	r0, #116	; 0x74
 8020a00:	4343      	muls	r3, r0
 8020a02:	18d3      	adds	r3, r2, r3
 8020a04:	185b      	adds	r3, r3, r1
 8020a06:	78db      	ldrb	r3, [r3, #3]
 8020a08:	06db      	lsls	r3, r3, #27
 8020a0a:	0f9b      	lsrs	r3, r3, #30
 8020a0c:	b2db      	uxtb	r3, r3
 8020a0e:	b29a      	uxth	r2, r3
 8020a10:	193b      	adds	r3, r7, r4
 8020a12:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_RPRESISTORVALUE, 1, (uint8_t *)&settings);
 8020a14:	193b      	adds	r3, r7, r4
 8020a16:	1978      	adds	r0, r7, r5
 8020a18:	2201      	movs	r2, #1
 8020a1a:	2112      	movs	r1, #18
 8020a1c:	f7fe fa8e 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Support;
 8020a20:	19bb      	adds	r3, r7, r6
 8020a22:	781b      	ldrb	r3, [r3, #0]
 8020a24:	4a3d      	ldr	r2, [pc, #244]	; (8020b1c <Send_DpmInitCnf+0x358>)
 8020a26:	2168      	movs	r1, #104	; 0x68
 8020a28:	2074      	movs	r0, #116	; 0x74
 8020a2a:	4343      	muls	r3, r0
 8020a2c:	18d3      	adds	r3, r2, r3
 8020a2e:	185b      	adds	r3, r3, r1
 8020a30:	78db      	ldrb	r3, [r3, #3]
 8020a32:	069b      	lsls	r3, r3, #26
 8020a34:	0fdb      	lsrs	r3, r3, #31
 8020a36:	b2db      	uxtb	r3, r3
 8020a38:	b29a      	uxth	r2, r3
 8020a3a:	193b      	adds	r3, r7, r4
 8020a3c:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUPPORT, 1, (uint8_t *)&settings);
 8020a3e:	193b      	adds	r3, r7, r4
 8020a40:	1978      	adds	r0, r7, r5
 8020a42:	2201      	movs	r2, #1
 8020a44:	2113      	movs	r1, #19
 8020a46:	f7fe fa79 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Device;
 8020a4a:	19bb      	adds	r3, r7, r6
 8020a4c:	781b      	ldrb	r3, [r3, #0]
 8020a4e:	4a33      	ldr	r2, [pc, #204]	; (8020b1c <Send_DpmInitCnf+0x358>)
 8020a50:	2168      	movs	r1, #104	; 0x68
 8020a52:	2074      	movs	r0, #116	; 0x74
 8020a54:	4343      	muls	r3, r0
 8020a56:	18d3      	adds	r3, r2, r3
 8020a58:	185b      	adds	r3, r3, r1
 8020a5a:	78db      	ldrb	r3, [r3, #3]
 8020a5c:	065b      	lsls	r3, r3, #25
 8020a5e:	0fdb      	lsrs	r3, r3, #31
 8020a60:	b2db      	uxtb	r3, r3
 8020a62:	b29a      	uxth	r2, r3
 8020a64:	193b      	adds	r3, r7, r4
 8020a66:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBDEVICE, 1, (uint8_t *)&settings);
 8020a68:	193b      	adds	r3, r7, r4
 8020a6a:	1978      	adds	r0, r7, r5
 8020a6c:	2201      	movs	r2, #1
 8020a6e:	2114      	movs	r1, #20
 8020a70:	f7fe fa64 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Host;
 8020a74:	19bb      	adds	r3, r7, r6
 8020a76:	781b      	ldrb	r3, [r3, #0]
 8020a78:	4a28      	ldr	r2, [pc, #160]	; (8020b1c <Send_DpmInitCnf+0x358>)
 8020a7a:	2168      	movs	r1, #104	; 0x68
 8020a7c:	2074      	movs	r0, #116	; 0x74
 8020a7e:	4343      	muls	r3, r0
 8020a80:	18d3      	adds	r3, r2, r3
 8020a82:	185b      	adds	r3, r3, r1
 8020a84:	78db      	ldrb	r3, [r3, #3]
 8020a86:	061b      	lsls	r3, r3, #24
 8020a88:	0fdb      	lsrs	r3, r3, #31
 8020a8a:	b2db      	uxtb	r3, r3
 8020a8c:	b29a      	uxth	r2, r3
 8020a8e:	193b      	adds	r3, r7, r4
 8020a90:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBHOST, 1, (uint8_t *)&settings);
 8020a92:	193b      	adds	r3, r7, r4
 8020a94:	1978      	adds	r0, r7, r5
 8020a96:	2201      	movs	r2, #1
 8020a98:	2115      	movs	r1, #21
 8020a9a:	f7fe fa4f 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_UnconstrainedPower;
 8020a9e:	19bb      	adds	r3, r7, r6
 8020aa0:	781b      	ldrb	r3, [r3, #0]
 8020aa2:	4a1e      	ldr	r2, [pc, #120]	; (8020b1c <Send_DpmInitCnf+0x358>)
 8020aa4:	2168      	movs	r1, #104	; 0x68
 8020aa6:	2074      	movs	r0, #116	; 0x74
 8020aa8:	4343      	muls	r3, r0
 8020aaa:	18d3      	adds	r3, r2, r3
 8020aac:	185b      	adds	r3, r3, r1
 8020aae:	78db      	ldrb	r3, [r3, #3]
 8020ab0:	075b      	lsls	r3, r3, #29
 8020ab2:	0fdb      	lsrs	r3, r3, #31
 8020ab4:	b2db      	uxtb	r3, r3
 8020ab6:	b29a      	uxth	r2, r3
 8020ab8:	193b      	adds	r3, r7, r4
 8020aba:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t *)&settings);
 8020abc:	193b      	adds	r3, r7, r4
 8020abe:	1978      	adds	r0, r7, r5
 8020ac0:	2201      	movs	r2, #1
 8020ac2:	2116      	movs	r1, #22
 8020ac4:	f7fe fa3a 	bl	801ef3c <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_SuspendSupport;
 8020ac8:	19bb      	adds	r3, r7, r6
 8020aca:	781b      	ldrb	r3, [r3, #0]
 8020acc:	4a13      	ldr	r2, [pc, #76]	; (8020b1c <Send_DpmInitCnf+0x358>)
 8020ace:	2168      	movs	r1, #104	; 0x68
 8020ad0:	2074      	movs	r0, #116	; 0x74
 8020ad2:	4343      	muls	r3, r0
 8020ad4:	18d3      	adds	r3, r2, r3
 8020ad6:	185b      	adds	r3, r3, r1
 8020ad8:	791b      	ldrb	r3, [r3, #4]
 8020ada:	07db      	lsls	r3, r3, #31
 8020adc:	0fdb      	lsrs	r3, r3, #31
 8020ade:	b2db      	uxtb	r3, r3
 8020ae0:	b29a      	uxth	r2, r3
 8020ae2:	193b      	adds	r3, r7, r4
 8020ae4:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t *)&settings);
 8020ae6:	193b      	adds	r3, r7, r4
 8020ae8:	1978      	adds	r0, r7, r5
 8020aea:	2201      	movs	r2, #1
 8020aec:	2117      	movs	r1, #23
 8020aee:	f7fe fa25 	bl	801ef3c <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 8020af2:	197b      	adds	r3, r7, r5
 8020af4:	0018      	movs	r0, r3
 8020af6:	f7fe fb83 	bl	801f200 <TLV_deinit_encode>
}
 8020afa:	46c0      	nop			; (mov r8, r8)
 8020afc:	46bd      	mov	sp, r7
 8020afe:	b011      	add	sp, #68	; 0x44
 8020b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b02:	46c0      	nop			; (mov r8, r8)
 8020b04:	20004b88 	.word	0x20004b88
 8020b08:	08024f10 	.word	0x08024f10
 8020b0c:	20004b8c 	.word	0x20004b8c
 8020b10:	08024f18 	.word	0x08024f18
 8020b14:	20004b7d 	.word	0x20004b7d
 8020b18:	200000f4 	.word	0x200000f4
 8020b1c:	20000108 	.word	0x20000108

08020b20 <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8020b20:	b5b0      	push	{r4, r5, r7, lr}
 8020b22:	b090      	sub	sp, #64	; 0x40
 8020b24:	af00      	add	r7, sp, #0
 8020b26:	60b9      	str	r1, [r7, #8]
 8020b28:	607a      	str	r2, [r7, #4]
 8020b2a:	240f      	movs	r4, #15
 8020b2c:	193b      	adds	r3, r7, r4
 8020b2e:	1c02      	adds	r2, r0, #0
 8020b30:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8020b32:	233f      	movs	r3, #63	; 0x3f
 8020b34:	18fb      	adds	r3, r7, r3
 8020b36:	2202      	movs	r2, #2
 8020b38:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t process_tlv;
  TLV_ToSend_Data_t send_tlv;

  (void)TLV_init_decode(&process_tlv, instruction);
 8020b3a:	68ba      	ldr	r2, [r7, #8]
 8020b3c:	252c      	movs	r5, #44	; 0x2c
 8020b3e:	197b      	adds	r3, r7, r5
 8020b40:	0011      	movs	r1, r2
 8020b42:	0018      	movs	r0, r3
 8020b44:	f7fe fb6e 	bl	801f224 <TLV_init_decode>
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8020b48:	193b      	adds	r3, r7, r4
 8020b4a:	781b      	ldrb	r3, [r3, #0]
 8020b4c:	3301      	adds	r3, #1
 8020b4e:	015b      	lsls	r3, r3, #5
 8020b50:	b25b      	sxtb	r3, r3
 8020b52:	220a      	movs	r2, #10
 8020b54:	4313      	orrs	r3, r2
 8020b56:	b25b      	sxtb	r3, r3
 8020b58:	b2d9      	uxtb	r1, r3
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	2280      	movs	r2, #128	; 0x80
 8020b5e:	0052      	lsls	r2, r2, #1
 8020b60:	2020      	movs	r0, #32
 8020b62:	1838      	adds	r0, r7, r0
 8020b64:	f7fe f987 	bl	801ee76 <TLV_init_encode>
  USBPD_GUI_Reject_Reason error;

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020b68:	2318      	movs	r3, #24
 8020b6a:	18fb      	adds	r3, r7, r3
 8020b6c:	221c      	movs	r2, #28
 8020b6e:	18ba      	adds	r2, r7, r2
 8020b70:	241e      	movs	r4, #30
 8020b72:	1939      	adds	r1, r7, r4
 8020b74:	1978      	adds	r0, r7, r5
 8020b76:	f7fe fb81 	bl	801f27c <TLV_get>
  switch (tag)
 8020b7a:	193b      	adds	r3, r7, r4
 8020b7c:	781b      	ldrb	r3, [r3, #0]
 8020b7e:	2b2b      	cmp	r3, #43	; 0x2b
 8020b80:	d900      	bls.n	8020b84 <Request_MessageReq+0x64>
 8020b82:	e2a8      	b.n	80210d6 <Request_MessageReq+0x5b6>
 8020b84:	009a      	lsls	r2, r3, #2
 8020b86:	4bdb      	ldr	r3, [pc, #876]	; (8020ef4 <Request_MessageReq+0x3d4>)
 8020b88:	18d3      	adds	r3, r2, r3
 8020b8a:	681b      	ldr	r3, [r3, #0]
 8020b8c:	469f      	mov	pc, r3
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
    case GUI_MSG_GOTOMIN :
      status = USBPD_DPM_RequestGotoMin(PortNum);
 8020b8e:	233f      	movs	r3, #63	; 0x3f
 8020b90:	18fc      	adds	r4, r7, r3
 8020b92:	230f      	movs	r3, #15
 8020b94:	18fb      	adds	r3, r7, r3
 8020b96:	781b      	ldrb	r3, [r3, #0]
 8020b98:	0018      	movs	r0, r3
 8020b9a:	f7fa fe07 	bl	801b7ac <USBPD_DPM_RequestGotoMin>
 8020b9e:	0003      	movs	r3, r0
 8020ba0:	7023      	strb	r3, [r4, #0]
      break;
 8020ba2:	e2b7      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_PING :
      status = USBPD_DPM_RequestPing(PortNum);
 8020ba4:	233f      	movs	r3, #63	; 0x3f
 8020ba6:	18fc      	adds	r4, r7, r3
 8020ba8:	230f      	movs	r3, #15
 8020baa:	18fb      	adds	r3, r7, r3
 8020bac:	781b      	ldrb	r3, [r3, #0]
 8020bae:	0018      	movs	r0, r3
 8020bb0:	f7fa fe42 	bl	801b838 <USBPD_DPM_RequestPing>
 8020bb4:	0003      	movs	r3, r0
 8020bb6:	7023      	strb	r3, [r4, #0]
      break;
 8020bb8:	e2ac      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SRC_CAPA :
      status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 8020bba:	233f      	movs	r3, #63	; 0x3f
 8020bbc:	18fc      	adds	r4, r7, r3
 8020bbe:	230f      	movs	r3, #15
 8020bc0:	18fb      	adds	r3, r7, r3
 8020bc2:	781b      	ldrb	r3, [r3, #0]
 8020bc4:	0018      	movs	r0, r3
 8020bc6:	f7fa ff3f 	bl	801ba48 <USBPD_DPM_RequestGetSourceCapability>
 8020bca:	0003      	movs	r3, r0
 8020bcc:	7023      	strb	r3, [r4, #0]
      break;
 8020bce:	e2a1      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SNK_CAPA :
      status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 8020bd0:	233f      	movs	r3, #63	; 0x3f
 8020bd2:	18fc      	adds	r4, r7, r3
 8020bd4:	230f      	movs	r3, #15
 8020bd6:	18fb      	adds	r3, r7, r3
 8020bd8:	781b      	ldrb	r3, [r3, #0]
 8020bda:	0018      	movs	r0, r3
 8020bdc:	f7fa ff7a 	bl	801bad4 <USBPD_DPM_RequestGetSinkCapability>
 8020be0:	0003      	movs	r3, r0
 8020be2:	7023      	strb	r3, [r4, #0]
      break;
 8020be4:	e296      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_DR_SWAP :
      status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 8020be6:	233f      	movs	r3, #63	; 0x3f
 8020be8:	18fc      	adds	r4, r7, r3
 8020bea:	230f      	movs	r3, #15
 8020bec:	18fb      	adds	r3, r7, r3
 8020bee:	781b      	ldrb	r3, [r3, #0]
 8020bf0:	0018      	movs	r0, r3
 8020bf2:	f7fa ffb5 	bl	801bb60 <USBPD_DPM_RequestDataRoleSwap>
 8020bf6:	0003      	movs	r3, r0
 8020bf8:	7023      	strb	r3, [r4, #0]
      break;
 8020bfa:	e28b      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_PR_SWAP :
      status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 8020bfc:	233f      	movs	r3, #63	; 0x3f
 8020bfe:	18fc      	adds	r4, r7, r3
 8020c00:	230f      	movs	r3, #15
 8020c02:	18fb      	adds	r3, r7, r3
 8020c04:	781b      	ldrb	r3, [r3, #0]
 8020c06:	0018      	movs	r0, r3
 8020c08:	f7fa fff0 	bl	801bbec <USBPD_DPM_RequestPowerRoleSwap>
 8020c0c:	0003      	movs	r3, r0
 8020c0e:	7023      	strb	r3, [r4, #0]
      break;
 8020c10:	e280      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_VCONN_SWAP :
      status = USBPD_DPM_RequestVconnSwap(PortNum);
 8020c12:	233f      	movs	r3, #63	; 0x3f
 8020c14:	18fc      	adds	r4, r7, r3
 8020c16:	230f      	movs	r3, #15
 8020c18:	18fb      	adds	r3, r7, r3
 8020c1a:	781b      	ldrb	r3, [r3, #0]
 8020c1c:	0018      	movs	r0, r3
 8020c1e:	f7fb f81b 	bl	801bc58 <USBPD_DPM_RequestVconnSwap>
 8020c22:	0003      	movs	r3, r0
 8020c24:	7023      	strb	r3, [r4, #0]
      break;
 8020c26:	e275      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_SOURCE_CAPA :
      status = USBPD_DPM_RequestSourceCapability(PortNum);
 8020c28:	233f      	movs	r3, #63	; 0x3f
 8020c2a:	18fc      	adds	r4, r7, r3
 8020c2c:	230f      	movs	r3, #15
 8020c2e:	18fb      	adds	r3, r7, r3
 8020c30:	781b      	ldrb	r3, [r3, #0]
 8020c32:	0018      	movs	r0, r3
 8020c34:	f7fb f8a0 	bl	801bd78 <USBPD_DPM_RequestSourceCapability>
 8020c38:	0003      	movs	r3, r0
 8020c3a:	7023      	strb	r3, [r4, #0]
      break;
 8020c3c:	e26a      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 8020c3e:	233c      	movs	r3, #60	; 0x3c
 8020c40:	18fb      	adds	r3, r7, r3
 8020c42:	2200      	movs	r2, #0
 8020c44:	801a      	strh	r2, [r3, #0]
      uint8_t nb_expected_tag = 0U;
 8020c46:	233b      	movs	r3, #59	; 0x3b
 8020c48:	18fb      	adds	r3, r7, r3
 8020c4a:	2200      	movs	r2, #0
 8020c4c:	701a      	strb	r2, [r3, #0]
      uint8_t index_pdo = 0;
 8020c4e:	233a      	movs	r3, #58	; 0x3a
 8020c50:	18fb      	adds	r3, r7, r3
 8020c52:	2200      	movs	r2, #0
 8020c54:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8020c56:	211c      	movs	r1, #28
 8020c58:	187b      	adds	r3, r7, r1
 8020c5a:	881a      	ldrh	r2, [r3, #0]
 8020c5c:	2380      	movs	r3, #128	; 0x80
 8020c5e:	005b      	lsls	r3, r3, #1
 8020c60:	429a      	cmp	r2, r3
 8020c62:	d900      	bls.n	8020c66 <Request_MessageReq+0x146>
 8020c64:	e239      	b.n	80210da <Request_MessageReq+0x5ba>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020c66:	2318      	movs	r3, #24
 8020c68:	18fb      	adds	r3, r7, r3
 8020c6a:	187a      	adds	r2, r7, r1
 8020c6c:	211e      	movs	r1, #30
 8020c6e:	1879      	adds	r1, r7, r1
 8020c70:	202c      	movs	r0, #44	; 0x2c
 8020c72:	1838      	adds	r0, r7, r0
 8020c74:	f7fe fb02 	bl	801f27c <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8020c78:	e02c      	b.n	8020cd4 <Request_MessageReq+0x1b4>
      {
        nb_expected_tag++;
 8020c7a:	213b      	movs	r1, #59	; 0x3b
 8020c7c:	187b      	adds	r3, r7, r1
 8020c7e:	781a      	ldrb	r2, [r3, #0]
 8020c80:	187b      	adds	r3, r7, r1
 8020c82:	3201      	adds	r2, #1
 8020c84:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 8020c86:	231e      	movs	r3, #30
 8020c88:	18fb      	adds	r3, r7, r3
 8020c8a:	781b      	ldrb	r3, [r3, #0]
 8020c8c:	2b01      	cmp	r3, #1
 8020c8e:	d105      	bne.n	8020c9c <Request_MessageReq+0x17c>
        {
          index_pdo = value[0];
 8020c90:	69ba      	ldr	r2, [r7, #24]
 8020c92:	233a      	movs	r3, #58	; 0x3a
 8020c94:	18fb      	adds	r3, r7, r3
 8020c96:	7812      	ldrb	r2, [r2, #0]
 8020c98:	701a      	strb	r2, [r3, #0]
 8020c9a:	e011      	b.n	8020cc0 <Request_MessageReq+0x1a0>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 8020c9c:	231e      	movs	r3, #30
 8020c9e:	18fb      	adds	r3, r7, r3
 8020ca0:	781b      	ldrb	r3, [r3, #0]
 8020ca2:	2b02      	cmp	r3, #2
 8020ca4:	d10c      	bne.n	8020cc0 <Request_MessageReq+0x1a0>
        {
          voltage = USBPD_LE16(&value[0]);
 8020ca6:	69bb      	ldr	r3, [r7, #24]
 8020ca8:	781b      	ldrb	r3, [r3, #0]
 8020caa:	b299      	uxth	r1, r3
 8020cac:	69bb      	ldr	r3, [r7, #24]
 8020cae:	3301      	adds	r3, #1
 8020cb0:	781b      	ldrb	r3, [r3, #0]
 8020cb2:	b29b      	uxth	r3, r3
 8020cb4:	021b      	lsls	r3, r3, #8
 8020cb6:	b29a      	uxth	r2, r3
 8020cb8:	233c      	movs	r3, #60	; 0x3c
 8020cba:	18fb      	adds	r3, r7, r3
 8020cbc:	188a      	adds	r2, r1, r2
 8020cbe:	801a      	strh	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020cc0:	2318      	movs	r3, #24
 8020cc2:	18fb      	adds	r3, r7, r3
 8020cc4:	221c      	movs	r2, #28
 8020cc6:	18ba      	adds	r2, r7, r2
 8020cc8:	211e      	movs	r1, #30
 8020cca:	1879      	adds	r1, r7, r1
 8020ccc:	202c      	movs	r0, #44	; 0x2c
 8020cce:	1838      	adds	r0, r7, r0
 8020cd0:	f7fe fad4 	bl	801f27c <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8020cd4:	221c      	movs	r2, #28
 8020cd6:	18bb      	adds	r3, r7, r2
 8020cd8:	881b      	ldrh	r3, [r3, #0]
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d008      	beq.n	8020cf0 <Request_MessageReq+0x1d0>
 8020cde:	18bb      	adds	r3, r7, r2
 8020ce0:	881b      	ldrh	r3, [r3, #0]
 8020ce2:	2bff      	cmp	r3, #255	; 0xff
 8020ce4:	d804      	bhi.n	8020cf0 <Request_MessageReq+0x1d0>
 8020ce6:	233b      	movs	r3, #59	; 0x3b
 8020ce8:	18fb      	adds	r3, r7, r3
 8020cea:	781b      	ldrb	r3, [r3, #0]
 8020cec:	2b01      	cmp	r3, #1
 8020cee:	d9c4      	bls.n	8020c7a <Request_MessageReq+0x15a>
      }
      if (2U == nb_expected_tag)
 8020cf0:	233b      	movs	r3, #59	; 0x3b
 8020cf2:	18fb      	adds	r3, r7, r3
 8020cf4:	781b      	ldrb	r3, [r3, #0]
 8020cf6:	2b02      	cmp	r3, #2
 8020cf8:	d000      	beq.n	8020cfc <Request_MessageReq+0x1dc>
 8020cfa:	e1f0      	b.n	80210de <Request_MessageReq+0x5be>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 8020cfc:	233f      	movs	r3, #63	; 0x3f
 8020cfe:	18fc      	adds	r4, r7, r3
 8020d00:	233c      	movs	r3, #60	; 0x3c
 8020d02:	18fb      	adds	r3, r7, r3
 8020d04:	881a      	ldrh	r2, [r3, #0]
 8020d06:	233a      	movs	r3, #58	; 0x3a
 8020d08:	18fb      	adds	r3, r7, r3
 8020d0a:	7819      	ldrb	r1, [r3, #0]
 8020d0c:	230f      	movs	r3, #15
 8020d0e:	18fb      	adds	r3, r7, r3
 8020d10:	781b      	ldrb	r3, [r3, #0]
 8020d12:	0018      	movs	r0, r3
 8020d14:	f7fa fdd6 	bl	801b8c4 <USBPD_DPM_RequestMessageRequest>
 8020d18:	0003      	movs	r3, r0
 8020d1a:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020d1c:	e1df      	b.n	80210de <Request_MessageReq+0x5be>
    }
    case GUI_MSG_SOFT_RESET :
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020d1e:	2318      	movs	r3, #24
 8020d20:	18fb      	adds	r3, r7, r3
 8020d22:	221c      	movs	r2, #28
 8020d24:	18ba      	adds	r2, r7, r2
 8020d26:	241e      	movs	r4, #30
 8020d28:	1939      	adds	r1, r7, r4
 8020d2a:	202c      	movs	r0, #44	; 0x2c
 8020d2c:	1838      	adds	r0, r7, r0
 8020d2e:	f7fe faa5 	bl	801f27c <TLV_get>
      if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8020d32:	193b      	adds	r3, r7, r4
 8020d34:	781b      	ldrb	r3, [r3, #0]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d000      	beq.n	8020d3c <Request_MessageReq+0x21c>
 8020d3a:	e1d2      	b.n	80210e2 <Request_MessageReq+0x5c2>
      {
        status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 8020d3c:	69bb      	ldr	r3, [r7, #24]
 8020d3e:	781a      	ldrb	r2, [r3, #0]
 8020d40:	233f      	movs	r3, #63	; 0x3f
 8020d42:	18fc      	adds	r4, r7, r3
 8020d44:	230f      	movs	r3, #15
 8020d46:	18fb      	adds	r3, r7, r3
 8020d48:	781b      	ldrb	r3, [r3, #0]
 8020d4a:	0011      	movs	r1, r2
 8020d4c:	0018      	movs	r0, r3
 8020d4e:	f7fa ffc9 	bl	801bce4 <USBPD_DPM_RequestSoftReset>
 8020d52:	0003      	movs	r3, r0
 8020d54:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020d56:	e1c4      	b.n	80210e2 <Request_MessageReq+0x5c2>
    case GUI_MSG_HARD_RESET :
      status = USBPD_DPM_RequestHardReset(PortNum);
 8020d58:	233f      	movs	r3, #63	; 0x3f
 8020d5a:	18fc      	adds	r4, r7, r3
 8020d5c:	230f      	movs	r3, #15
 8020d5e:	18fb      	adds	r3, r7, r3
 8020d60:	781b      	ldrb	r3, [r3, #0]
 8020d62:	0018      	movs	r0, r3
 8020d64:	f7fa fc9a 	bl	801b69c <USBPD_DPM_RequestHardReset>
 8020d68:	0003      	movs	r3, r0
 8020d6a:	7023      	strb	r3, [r4, #0]
      break;
 8020d6c:	e1d2      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_CABLE_RESET :
      status = USBPD_DPM_RequestCableReset(PortNum);
 8020d6e:	233f      	movs	r3, #63	; 0x3f
 8020d70:	18fc      	adds	r4, r7, r3
 8020d72:	230f      	movs	r3, #15
 8020d74:	18fb      	adds	r3, r7, r3
 8020d76:	781b      	ldrb	r3, [r3, #0]
 8020d78:	0018      	movs	r0, r3
 8020d7a:	f7fa fcd3 	bl	801b724 <USBPD_DPM_RequestCableReset>
 8020d7e:	0003      	movs	r3, r0
 8020d80:	7023      	strb	r3, [r4, #0]
      break;
 8020d82:	e1c7      	b.n	8021114 <Request_MessageReq+0x5f4>
    }
    break;
#endif /* _VDM */
    case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0U;
 8020d84:	2339      	movs	r3, #57	; 0x39
 8020d86:	18fb      	adds	r3, r7, r3
 8020d88:	2200      	movs	r2, #0
 8020d8a:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8020d8c:	211c      	movs	r1, #28
 8020d8e:	187b      	adds	r3, r7, r1
 8020d90:	881a      	ldrh	r2, [r3, #0]
 8020d92:	2380      	movs	r3, #128	; 0x80
 8020d94:	005b      	lsls	r3, r3, #1
 8020d96:	429a      	cmp	r2, r3
 8020d98:	d900      	bls.n	8020d9c <Request_MessageReq+0x27c>
 8020d9a:	e1a4      	b.n	80210e6 <Request_MessageReq+0x5c6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020d9c:	2318      	movs	r3, #24
 8020d9e:	18fb      	adds	r3, r7, r3
 8020da0:	187a      	adds	r2, r7, r1
 8020da2:	211e      	movs	r1, #30
 8020da4:	1879      	adds	r1, r7, r1
 8020da6:	202c      	movs	r0, #44	; 0x2c
 8020da8:	1838      	adds	r0, r7, r0
 8020daa:	f7fe fa67 	bl	801f27c <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 8020dae:	e005      	b.n	8020dbc <Request_MessageReq+0x29c>
      {
        nb_expected_tag++;
 8020db0:	2139      	movs	r1, #57	; 0x39
 8020db2:	187b      	adds	r3, r7, r1
 8020db4:	781a      	ldrb	r2, [r3, #0]
 8020db6:	187b      	adds	r3, r7, r1
 8020db8:	3201      	adds	r2, #1
 8020dba:	701a      	strb	r2, [r3, #0]
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 8020dbc:	221c      	movs	r2, #28
 8020dbe:	18bb      	adds	r3, r7, r2
 8020dc0:	881b      	ldrh	r3, [r3, #0]
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	d008      	beq.n	8020dd8 <Request_MessageReq+0x2b8>
 8020dc6:	18bb      	adds	r3, r7, r2
 8020dc8:	881b      	ldrh	r3, [r3, #0]
 8020dca:	2bff      	cmp	r3, #255	; 0xff
 8020dcc:	d804      	bhi.n	8020dd8 <Request_MessageReq+0x2b8>
 8020dce:	2339      	movs	r3, #57	; 0x39
 8020dd0:	18fb      	adds	r3, r7, r3
 8020dd2:	781b      	ldrb	r3, [r3, #0]
 8020dd4:	2b00      	cmp	r3, #0
 8020dd6:	d0eb      	beq.n	8020db0 <Request_MessageReq+0x290>
      }
      if (1U == nb_expected_tag)
 8020dd8:	2339      	movs	r3, #57	; 0x39
 8020dda:	18fb      	adds	r3, r7, r3
 8020ddc:	781b      	ldrb	r3, [r3, #0]
 8020dde:	2b01      	cmp	r3, #1
 8020de0:	d000      	beq.n	8020de4 <Request_MessageReq+0x2c4>
 8020de2:	e182      	b.n	80210ea <Request_MessageReq+0x5ca>
      {
        status = Manage_FreeText(PortNum, value, length);
 8020de4:	69b9      	ldr	r1, [r7, #24]
 8020de6:	231c      	movs	r3, #28
 8020de8:	18fb      	adds	r3, r7, r3
 8020dea:	881a      	ldrh	r2, [r3, #0]
 8020dec:	233f      	movs	r3, #63	; 0x3f
 8020dee:	18fc      	adds	r4, r7, r3
 8020df0:	230f      	movs	r3, #15
 8020df2:	18fb      	adds	r3, r7, r3
 8020df4:	781b      	ldrb	r3, [r3, #0]
 8020df6:	0018      	movs	r0, r3
 8020df8:	f001 f9d6 	bl	80221a8 <Manage_FreeText>
 8020dfc:	0003      	movs	r3, r0
 8020dfe:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020e00:	e173      	b.n	80210ea <Request_MessageReq+0x5ca>
    }
#ifdef USBPD_REV30_SUPPORT
    case GUI_MSG_FR_SWAP :
      status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 8020e02:	233f      	movs	r3, #63	; 0x3f
 8020e04:	18fc      	adds	r4, r7, r3
 8020e06:	230f      	movs	r3, #15
 8020e08:	18fb      	adds	r3, r7, r3
 8020e0a:	781b      	ldrb	r3, [r3, #0]
 8020e0c:	0018      	movs	r0, r3
 8020e0e:	f7fb f9af 	bl	801c170 <USBPD_DPM_RequestFastRoleSwap>
 8020e12:	0003      	movs	r3, r0
 8020e14:	7023      	strb	r3, [r4, #0]
      break;
 8020e16:	e17d      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_PPS_STATUS :
      status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 8020e18:	233f      	movs	r3, #63	; 0x3f
 8020e1a:	18fc      	adds	r4, r7, r3
 8020e1c:	230f      	movs	r3, #15
 8020e1e:	18fb      	adds	r3, r7, r3
 8020e20:	781b      	ldrb	r3, [r3, #0]
 8020e22:	0018      	movs	r0, r3
 8020e24:	f7fb f918 	bl	801c058 <USBPD_DPM_RequestGetPPS_Status>
 8020e28:	0003      	movs	r3, r0
 8020e2a:	7023      	strb	r3, [r4, #0]
      break;
 8020e2c:	e172      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_COUNTRY_CODES :
      status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 8020e2e:	233f      	movs	r3, #63	; 0x3f
 8020e30:	18fc      	adds	r4, r7, r3
 8020e32:	230f      	movs	r3, #15
 8020e34:	18fb      	adds	r3, r7, r3
 8020e36:	781b      	ldrb	r3, [r3, #0]
 8020e38:	0018      	movs	r0, r3
 8020e3a:	f7fb f9df 	bl	801c1fc <USBPD_DPM_RequestGetCountryCodes>
 8020e3e:	0003      	movs	r3, r0
 8020e40:	7023      	strb	r3, [r4, #0]
      break;
 8020e42:	e167      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_STATUS :
      status = USBPD_DPM_RequestGetStatus(PortNum);
 8020e44:	233f      	movs	r3, #63	; 0x3f
 8020e46:	18fc      	adds	r4, r7, r3
 8020e48:	230f      	movs	r3, #15
 8020e4a:	18fb      	adds	r3, r7, r3
 8020e4c:	781b      	ldrb	r3, [r3, #0]
 8020e4e:	0018      	movs	r0, r3
 8020e50:	f7fb f948 	bl	801c0e4 <USBPD_DPM_RequestGetStatus>
 8020e54:	0003      	movs	r3, r0
 8020e56:	7023      	strb	r3, [r4, #0]
      break;
 8020e58:	e15c      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 8020e5a:	233f      	movs	r3, #63	; 0x3f
 8020e5c:	18fc      	adds	r4, r7, r3
 8020e5e:	230f      	movs	r3, #15
 8020e60:	18fb      	adds	r3, r7, r3
 8020e62:	781b      	ldrb	r3, [r3, #0]
 8020e64:	0018      	movs	r0, r3
 8020e66:	f7fb f815 	bl	801be94 <USBPD_DPM_RequestGetSourceCapabilityExt>
 8020e6a:	0003      	movs	r3, r0
 8020e6c:	7023      	strb	r3, [r4, #0]
      break;
 8020e6e:	e151      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SINK_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 8020e70:	233f      	movs	r3, #63	; 0x3f
 8020e72:	18fc      	adds	r4, r7, r3
 8020e74:	230f      	movs	r3, #15
 8020e76:	18fb      	adds	r3, r7, r3
 8020e78:	781b      	ldrb	r3, [r3, #0]
 8020e7a:	0018      	movs	r0, r3
 8020e7c:	f7fb f850 	bl	801bf20 <USBPD_DPM_RequestGetSinkCapabilityExt>
 8020e80:	0003      	movs	r3, r0
 8020e82:	7023      	strb	r3, [r4, #0]
      break;
 8020e84:	e146      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_ALERT :
      if (length > TLV_SIZE_MAX)
 8020e86:	211c      	movs	r1, #28
 8020e88:	187b      	adds	r3, r7, r1
 8020e8a:	881a      	ldrh	r2, [r3, #0]
 8020e8c:	2380      	movs	r3, #128	; 0x80
 8020e8e:	005b      	lsls	r3, r3, #1
 8020e90:	429a      	cmp	r2, r3
 8020e92:	d900      	bls.n	8020e96 <Request_MessageReq+0x376>
 8020e94:	e12b      	b.n	80210ee <Request_MessageReq+0x5ce>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020e96:	2318      	movs	r3, #24
 8020e98:	18fb      	adds	r3, r7, r3
 8020e9a:	187a      	adds	r2, r7, r1
 8020e9c:	241e      	movs	r4, #30
 8020e9e:	1939      	adds	r1, r7, r4
 8020ea0:	202c      	movs	r0, #44	; 0x2c
 8020ea2:	1838      	adds	r0, r7, r0
 8020ea4:	f7fe f9ea 	bl	801f27c <TLV_get>
      if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 8020ea8:	193b      	adds	r3, r7, r4
 8020eaa:	781b      	ldrb	r3, [r3, #0]
 8020eac:	2b04      	cmp	r3, #4
 8020eae:	d000      	beq.n	8020eb2 <Request_MessageReq+0x392>
 8020eb0:	e11f      	b.n	80210f2 <Request_MessageReq+0x5d2>
      {
        USBPD_ADO_TypeDef alert;
        alert.d32 = USBPD_LE32(&value[0]);
 8020eb2:	69bb      	ldr	r3, [r7, #24]
 8020eb4:	781b      	ldrb	r3, [r3, #0]
 8020eb6:	001a      	movs	r2, r3
 8020eb8:	69bb      	ldr	r3, [r7, #24]
 8020eba:	3301      	adds	r3, #1
 8020ebc:	781b      	ldrb	r3, [r3, #0]
 8020ebe:	021b      	lsls	r3, r3, #8
 8020ec0:	18d2      	adds	r2, r2, r3
 8020ec2:	69bb      	ldr	r3, [r7, #24]
 8020ec4:	3302      	adds	r3, #2
 8020ec6:	781b      	ldrb	r3, [r3, #0]
 8020ec8:	041b      	lsls	r3, r3, #16
 8020eca:	18d2      	adds	r2, r2, r3
 8020ecc:	69bb      	ldr	r3, [r7, #24]
 8020ece:	3303      	adds	r3, #3
 8020ed0:	781b      	ldrb	r3, [r3, #0]
 8020ed2:	061b      	lsls	r3, r3, #24
 8020ed4:	18d3      	adds	r3, r2, r3
 8020ed6:	617b      	str	r3, [r7, #20]
        status = USBPD_DPM_RequestAlert(PortNum, alert);
 8020ed8:	233f      	movs	r3, #63	; 0x3f
 8020eda:	18fc      	adds	r4, r7, r3
 8020edc:	697a      	ldr	r2, [r7, #20]
 8020ede:	230f      	movs	r3, #15
 8020ee0:	18fb      	adds	r3, r7, r3
 8020ee2:	781b      	ldrb	r3, [r3, #0]
 8020ee4:	0011      	movs	r1, r2
 8020ee6:	0018      	movs	r0, r3
 8020ee8:	f7fa ff8c 	bl	801be04 <USBPD_DPM_RequestAlert>
 8020eec:	0003      	movs	r3, r0
 8020eee:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020ef0:	e0ff      	b.n	80210f2 <Request_MessageReq+0x5d2>
 8020ef2:	46c0      	nop			; (mov r8, r8)
 8020ef4:	080253dc 	.word	0x080253dc
    case GUI_MSG_GET_COUNTRY_INFO :
      if (length > TLV_SIZE_MAX)
 8020ef8:	211c      	movs	r1, #28
 8020efa:	187b      	adds	r3, r7, r1
 8020efc:	881a      	ldrh	r2, [r3, #0]
 8020efe:	2380      	movs	r3, #128	; 0x80
 8020f00:	005b      	lsls	r3, r3, #1
 8020f02:	429a      	cmp	r2, r3
 8020f04:	d900      	bls.n	8020f08 <Request_MessageReq+0x3e8>
 8020f06:	e0f6      	b.n	80210f6 <Request_MessageReq+0x5d6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020f08:	2318      	movs	r3, #24
 8020f0a:	18fb      	adds	r3, r7, r3
 8020f0c:	187a      	adds	r2, r7, r1
 8020f0e:	241e      	movs	r4, #30
 8020f10:	1939      	adds	r1, r7, r4
 8020f12:	202c      	movs	r0, #44	; 0x2c
 8020f14:	1838      	adds	r0, r7, r0
 8020f16:	f7fe f9b1 	bl	801f27c <TLV_get>
      if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 8020f1a:	193b      	adds	r3, r7, r4
 8020f1c:	781b      	ldrb	r3, [r3, #0]
 8020f1e:	2b05      	cmp	r3, #5
 8020f20:	d000      	beq.n	8020f24 <Request_MessageReq+0x404>
 8020f22:	e0ea      	b.n	80210fa <Request_MessageReq+0x5da>
      {
        uint16_t country_code;
        country_code = USBPD_LE16(&value[0]);
 8020f24:	69bb      	ldr	r3, [r7, #24]
 8020f26:	781b      	ldrb	r3, [r3, #0]
 8020f28:	b299      	uxth	r1, r3
 8020f2a:	69bb      	ldr	r3, [r7, #24]
 8020f2c:	3301      	adds	r3, #1
 8020f2e:	781b      	ldrb	r3, [r3, #0]
 8020f30:	b29b      	uxth	r3, r3
 8020f32:	021b      	lsls	r3, r3, #8
 8020f34:	b29a      	uxth	r2, r3
 8020f36:	2034      	movs	r0, #52	; 0x34
 8020f38:	183b      	adds	r3, r7, r0
 8020f3a:	188a      	adds	r2, r1, r2
 8020f3c:	801a      	strh	r2, [r3, #0]
        status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 8020f3e:	233f      	movs	r3, #63	; 0x3f
 8020f40:	18fc      	adds	r4, r7, r3
 8020f42:	183b      	adds	r3, r7, r0
 8020f44:	881a      	ldrh	r2, [r3, #0]
 8020f46:	230f      	movs	r3, #15
 8020f48:	18fb      	adds	r3, r7, r3
 8020f4a:	781b      	ldrb	r3, [r3, #0]
 8020f4c:	0011      	movs	r1, r2
 8020f4e:	0018      	movs	r0, r3
 8020f50:	f7fb f99a 	bl	801c288 <USBPD_DPM_RequestGetCountryInfo>
 8020f54:	0003      	movs	r3, r0
 8020f56:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020f58:	e0cf      	b.n	80210fa <Request_MessageReq+0x5da>
    case GUI_MSG_GET_BAT_CAPA :
      if (length > TLV_SIZE_MAX)
 8020f5a:	211c      	movs	r1, #28
 8020f5c:	187b      	adds	r3, r7, r1
 8020f5e:	881a      	ldrh	r2, [r3, #0]
 8020f60:	2380      	movs	r3, #128	; 0x80
 8020f62:	005b      	lsls	r3, r3, #1
 8020f64:	429a      	cmp	r2, r3
 8020f66:	d900      	bls.n	8020f6a <Request_MessageReq+0x44a>
 8020f68:	e0c9      	b.n	80210fe <Request_MessageReq+0x5de>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020f6a:	2318      	movs	r3, #24
 8020f6c:	18fb      	adds	r3, r7, r3
 8020f6e:	187a      	adds	r2, r7, r1
 8020f70:	241e      	movs	r4, #30
 8020f72:	1939      	adds	r1, r7, r4
 8020f74:	202c      	movs	r0, #44	; 0x2c
 8020f76:	1838      	adds	r0, r7, r0
 8020f78:	f7fe f980 	bl	801f27c <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8020f7c:	193b      	adds	r3, r7, r4
 8020f7e:	781b      	ldrb	r3, [r3, #0]
 8020f80:	2b0c      	cmp	r3, #12
 8020f82:	d000      	beq.n	8020f86 <Request_MessageReq+0x466>
 8020f84:	e0bd      	b.n	8021102 <Request_MessageReq+0x5e2>
      {
        status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t *)&value[0]);
 8020f86:	69ba      	ldr	r2, [r7, #24]
 8020f88:	233f      	movs	r3, #63	; 0x3f
 8020f8a:	18fc      	adds	r4, r7, r3
 8020f8c:	230f      	movs	r3, #15
 8020f8e:	18fb      	adds	r3, r7, r3
 8020f90:	781b      	ldrb	r3, [r3, #0]
 8020f92:	0011      	movs	r1, r2
 8020f94:	0018      	movs	r0, r3
 8020f96:	f7fb f9c1 	bl	801c31c <USBPD_DPM_RequestGetBatteryCapability>
 8020f9a:	0003      	movs	r3, r0
 8020f9c:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020f9e:	e0b0      	b.n	8021102 <Request_MessageReq+0x5e2>
    case GUI_MSG_GET_BAT_STATUS :
      if (length > TLV_SIZE_MAX)
 8020fa0:	211c      	movs	r1, #28
 8020fa2:	187b      	adds	r3, r7, r1
 8020fa4:	881a      	ldrh	r2, [r3, #0]
 8020fa6:	2380      	movs	r3, #128	; 0x80
 8020fa8:	005b      	lsls	r3, r3, #1
 8020faa:	429a      	cmp	r2, r3
 8020fac:	d900      	bls.n	8020fb0 <Request_MessageReq+0x490>
 8020fae:	e0aa      	b.n	8021106 <Request_MessageReq+0x5e6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020fb0:	2318      	movs	r3, #24
 8020fb2:	18fb      	adds	r3, r7, r3
 8020fb4:	187a      	adds	r2, r7, r1
 8020fb6:	241e      	movs	r4, #30
 8020fb8:	1939      	adds	r1, r7, r4
 8020fba:	202c      	movs	r0, #44	; 0x2c
 8020fbc:	1838      	adds	r0, r7, r0
 8020fbe:	f7fe f95d 	bl	801f27c <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8020fc2:	193b      	adds	r3, r7, r4
 8020fc4:	781b      	ldrb	r3, [r3, #0]
 8020fc6:	2b0c      	cmp	r3, #12
 8020fc8:	d000      	beq.n	8020fcc <Request_MessageReq+0x4ac>
 8020fca:	e09e      	b.n	802110a <Request_MessageReq+0x5ea>
      {
        status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t *)&value[0]);
 8020fcc:	69ba      	ldr	r2, [r7, #24]
 8020fce:	233f      	movs	r3, #63	; 0x3f
 8020fd0:	18fc      	adds	r4, r7, r3
 8020fd2:	230f      	movs	r3, #15
 8020fd4:	18fb      	adds	r3, r7, r3
 8020fd6:	781b      	ldrb	r3, [r3, #0]
 8020fd8:	0011      	movs	r1, r2
 8020fda:	0018      	movs	r0, r3
 8020fdc:	f7fb f9e8 	bl	801c3b0 <USBPD_DPM_RequestGetBatteryStatus>
 8020fe0:	0003      	movs	r3, r0
 8020fe2:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020fe4:	e091      	b.n	802110a <Request_MessageReq+0x5ea>
    case GUI_MSG_GET_MANU_INFO :
    {
      uint8_t manu_info[2];
      uint8_t nb_expected_tag = 0U;
 8020fe6:	2338      	movs	r3, #56	; 0x38
 8020fe8:	18fb      	adds	r3, r7, r3
 8020fea:	2200      	movs	r2, #0
 8020fec:	701a      	strb	r2, [r3, #0]
      uint8_t sop = (uint8_t)USBPD_SOPTYPE_SOP;
 8020fee:	2337      	movs	r3, #55	; 0x37
 8020ff0:	18fb      	adds	r3, r7, r3
 8020ff2:	2200      	movs	r2, #0
 8020ff4:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8020ff6:	211c      	movs	r1, #28
 8020ff8:	187b      	adds	r3, r7, r1
 8020ffa:	881a      	ldrh	r2, [r3, #0]
 8020ffc:	2380      	movs	r3, #128	; 0x80
 8020ffe:	005b      	lsls	r3, r3, #1
 8021000:	429a      	cmp	r2, r3
 8021002:	d900      	bls.n	8021006 <Request_MessageReq+0x4e6>
 8021004:	e083      	b.n	802110e <Request_MessageReq+0x5ee>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8021006:	2318      	movs	r3, #24
 8021008:	18fb      	adds	r3, r7, r3
 802100a:	187a      	adds	r2, r7, r1
 802100c:	211e      	movs	r1, #30
 802100e:	1879      	adds	r1, r7, r1
 8021010:	202c      	movs	r0, #44	; 0x2c
 8021012:	1838      	adds	r0, r7, r0
 8021014:	f7fe f932 	bl	801f27c <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8021018:	e02f      	b.n	802107a <Request_MessageReq+0x55a>
      {
        nb_expected_tag++;
 802101a:	2138      	movs	r1, #56	; 0x38
 802101c:	187b      	adds	r3, r7, r1
 802101e:	781a      	ldrb	r2, [r3, #0]
 8021020:	187b      	adds	r3, r7, r1
 8021022:	3201      	adds	r2, #1
 8021024:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8021026:	231e      	movs	r3, #30
 8021028:	18fb      	adds	r3, r7, r3
 802102a:	781b      	ldrb	r3, [r3, #0]
 802102c:	2b00      	cmp	r3, #0
 802102e:	d105      	bne.n	802103c <Request_MessageReq+0x51c>
        {
          sop = value[0];
 8021030:	69ba      	ldr	r2, [r7, #24]
 8021032:	2337      	movs	r3, #55	; 0x37
 8021034:	18fb      	adds	r3, r7, r3
 8021036:	7812      	ldrb	r2, [r2, #0]
 8021038:	701a      	strb	r2, [r3, #0]
 802103a:	e014      	b.n	8021066 <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 802103c:	231e      	movs	r3, #30
 802103e:	18fb      	adds	r3, r7, r3
 8021040:	781b      	ldrb	r3, [r3, #0]
 8021042:	2b0c      	cmp	r3, #12
 8021044:	d105      	bne.n	8021052 <Request_MessageReq+0x532>
        {
          manu_info[1] = value[0];
 8021046:	69bb      	ldr	r3, [r7, #24]
 8021048:	781a      	ldrb	r2, [r3, #0]
 802104a:	2310      	movs	r3, #16
 802104c:	18fb      	adds	r3, r7, r3
 802104e:	705a      	strb	r2, [r3, #1]
 8021050:	e009      	b.n	8021066 <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 8021052:	231e      	movs	r3, #30
 8021054:	18fb      	adds	r3, r7, r3
 8021056:	781b      	ldrb	r3, [r3, #0]
 8021058:	2b0d      	cmp	r3, #13
 802105a:	d104      	bne.n	8021066 <Request_MessageReq+0x546>
        {
          manu_info[0] = value[0];
 802105c:	69bb      	ldr	r3, [r7, #24]
 802105e:	781a      	ldrb	r2, [r3, #0]
 8021060:	2310      	movs	r3, #16
 8021062:	18fb      	adds	r3, r7, r3
 8021064:	701a      	strb	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8021066:	2318      	movs	r3, #24
 8021068:	18fb      	adds	r3, r7, r3
 802106a:	221c      	movs	r2, #28
 802106c:	18ba      	adds	r2, r7, r2
 802106e:	211e      	movs	r1, #30
 8021070:	1879      	adds	r1, r7, r1
 8021072:	202c      	movs	r0, #44	; 0x2c
 8021074:	1838      	adds	r0, r7, r0
 8021076:	f7fe f901 	bl	801f27c <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 802107a:	221c      	movs	r2, #28
 802107c:	18bb      	adds	r3, r7, r2
 802107e:	881b      	ldrh	r3, [r3, #0]
 8021080:	2b00      	cmp	r3, #0
 8021082:	d008      	beq.n	8021096 <Request_MessageReq+0x576>
 8021084:	18bb      	adds	r3, r7, r2
 8021086:	881b      	ldrh	r3, [r3, #0]
 8021088:	2bff      	cmp	r3, #255	; 0xff
 802108a:	d804      	bhi.n	8021096 <Request_MessageReq+0x576>
 802108c:	2338      	movs	r3, #56	; 0x38
 802108e:	18fb      	adds	r3, r7, r3
 8021090:	781b      	ldrb	r3, [r3, #0]
 8021092:	2b02      	cmp	r3, #2
 8021094:	d9c1      	bls.n	802101a <Request_MessageReq+0x4fa>
      }
      if (3U == nb_expected_tag)
 8021096:	2338      	movs	r3, #56	; 0x38
 8021098:	18fb      	adds	r3, r7, r3
 802109a:	781b      	ldrb	r3, [r3, #0]
 802109c:	2b03      	cmp	r3, #3
 802109e:	d138      	bne.n	8021112 <Request_MessageReq+0x5f2>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t *)&manu_info);
 80210a0:	233f      	movs	r3, #63	; 0x3f
 80210a2:	18fc      	adds	r4, r7, r3
 80210a4:	2310      	movs	r3, #16
 80210a6:	18fa      	adds	r2, r7, r3
 80210a8:	2337      	movs	r3, #55	; 0x37
 80210aa:	18fb      	adds	r3, r7, r3
 80210ac:	7819      	ldrb	r1, [r3, #0]
 80210ae:	230f      	movs	r3, #15
 80210b0:	18fb      	adds	r3, r7, r3
 80210b2:	781b      	ldrb	r3, [r3, #0]
 80210b4:	0018      	movs	r0, r3
 80210b6:	f7fa ff79 	bl	801bfac <USBPD_DPM_RequestGetManufacturerInfo>
 80210ba:	0003      	movs	r3, r0
 80210bc:	7023      	strb	r3, [r4, #0]
      }
      break;
 80210be:	e028      	b.n	8021112 <Request_MessageReq+0x5f2>
    }
    case GUI_MSG_SECU_REQUEST :
      status = USBPD_DPM_RequestSecurityRequest(PortNum);
 80210c0:	233f      	movs	r3, #63	; 0x3f
 80210c2:	18fc      	adds	r4, r7, r3
 80210c4:	230f      	movs	r3, #15
 80210c6:	18fb      	adds	r3, r7, r3
 80210c8:	781b      	ldrb	r3, [r3, #0]
 80210ca:	0018      	movs	r0, r3
 80210cc:	f7fb f9ba 	bl	801c444 <USBPD_DPM_RequestSecurityRequest>
 80210d0:	0003      	movs	r3, r0
 80210d2:	7023      	strb	r3, [r4, #0]
      break;
 80210d4:	e01e      	b.n	8021114 <Request_MessageReq+0x5f4>
    case GUI_MSG_FIRM_UPDATE_REQUEST :
      break;
#endif /* USBPD_REV30_SUPPORT */
    default :
      break;
 80210d6:	46c0      	nop			; (mov r8, r8)
 80210d8:	e01c      	b.n	8021114 <Request_MessageReq+0x5f4>
        break;
 80210da:	46c0      	nop			; (mov r8, r8)
 80210dc:	e01a      	b.n	8021114 <Request_MessageReq+0x5f4>
      break;
 80210de:	46c0      	nop			; (mov r8, r8)
 80210e0:	e018      	b.n	8021114 <Request_MessageReq+0x5f4>
      break;
 80210e2:	46c0      	nop			; (mov r8, r8)
 80210e4:	e016      	b.n	8021114 <Request_MessageReq+0x5f4>
        break;
 80210e6:	46c0      	nop			; (mov r8, r8)
 80210e8:	e014      	b.n	8021114 <Request_MessageReq+0x5f4>
      break;
 80210ea:	46c0      	nop			; (mov r8, r8)
 80210ec:	e012      	b.n	8021114 <Request_MessageReq+0x5f4>
        break;
 80210ee:	46c0      	nop			; (mov r8, r8)
 80210f0:	e010      	b.n	8021114 <Request_MessageReq+0x5f4>
      break;
 80210f2:	46c0      	nop			; (mov r8, r8)
 80210f4:	e00e      	b.n	8021114 <Request_MessageReq+0x5f4>
        break;
 80210f6:	46c0      	nop			; (mov r8, r8)
 80210f8:	e00c      	b.n	8021114 <Request_MessageReq+0x5f4>
      break;
 80210fa:	46c0      	nop			; (mov r8, r8)
 80210fc:	e00a      	b.n	8021114 <Request_MessageReq+0x5f4>
        break;
 80210fe:	46c0      	nop			; (mov r8, r8)
 8021100:	e008      	b.n	8021114 <Request_MessageReq+0x5f4>
      break;
 8021102:	46c0      	nop			; (mov r8, r8)
 8021104:	e006      	b.n	8021114 <Request_MessageReq+0x5f4>
        break;
 8021106:	46c0      	nop			; (mov r8, r8)
 8021108:	e004      	b.n	8021114 <Request_MessageReq+0x5f4>
      break;
 802110a:	46c0      	nop			; (mov r8, r8)
 802110c:	e002      	b.n	8021114 <Request_MessageReq+0x5f4>
        break;
 802110e:	46c0      	nop			; (mov r8, r8)
 8021110:	e000      	b.n	8021114 <Request_MessageReq+0x5f4>
      break;
 8021112:	46c0      	nop			; (mov r8, r8)
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 8021114:	223f      	movs	r2, #63	; 0x3f
 8021116:	18bb      	adds	r3, r7, r2
 8021118:	781b      	ldrb	r3, [r3, #0]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d031      	beq.n	8021182 <Request_MessageReq+0x662>
  {
    switch (status)
 802111e:	18bb      	adds	r3, r7, r2
 8021120:	781b      	ldrb	r3, [r3, #0]
 8021122:	2b03      	cmp	r3, #3
 8021124:	d002      	beq.n	802112c <Request_MessageReq+0x60c>
 8021126:	2b04      	cmp	r3, #4
 8021128:	d005      	beq.n	8021136 <Request_MessageReq+0x616>
 802112a:	e009      	b.n	8021140 <Request_MessageReq+0x620>
    {
      case USBPD_BUSY:
        error = GUI_REJ_DPM_NOT_READY;
 802112c:	231f      	movs	r3, #31
 802112e:	18fb      	adds	r3, r7, r3
 8021130:	2206      	movs	r2, #6
 8021132:	701a      	strb	r2, [r3, #0]
        break;
 8021134:	e009      	b.n	802114a <Request_MessageReq+0x62a>
      case USBPD_TIMEOUT:
        error = GUI_REJ_DPM_TIMEOUT;
 8021136:	231f      	movs	r3, #31
 8021138:	18fb      	adds	r3, r7, r3
 802113a:	2202      	movs	r2, #2
 802113c:	701a      	strb	r2, [r3, #0]
        break;
 802113e:	e004      	b.n	802114a <Request_MessageReq+0x62a>
      case USBPD_NOTSUPPORTED:
      case USBPD_ERROR:
      default:
        error = GUI_REJ_DPM_REJECT;
 8021140:	231f      	movs	r3, #31
 8021142:	18fb      	adds	r3, r7, r3
 8021144:	2200      	movs	r2, #0
 8021146:	701a      	strb	r2, [r3, #0]
        break;
 8021148:	46c0      	nop			; (mov r8, r8)
    }
    TLV_deinit_encode(&send_tlv);
 802114a:	2420      	movs	r4, #32
 802114c:	193b      	adds	r3, r7, r4
 802114e:	0018      	movs	r0, r3
 8021150:	f7fe f856 	bl	801f200 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX,
 8021154:	230f      	movs	r3, #15
 8021156:	18fb      	adds	r3, r7, r3
 8021158:	781b      	ldrb	r3, [r3, #0]
 802115a:	3301      	adds	r3, #1
 802115c:	015b      	lsls	r3, r3, #5
 802115e:	b25b      	sxtb	r3, r3
 8021160:	220b      	movs	r2, #11
 8021162:	4313      	orrs	r3, r2
 8021164:	b25b      	sxtb	r3, r3
 8021166:	b2d9      	uxtb	r1, r3
 8021168:	687b      	ldr	r3, [r7, #4]
 802116a:	2280      	movs	r2, #128	; 0x80
 802116c:	0052      	lsls	r2, r2, #1
 802116e:	1938      	adds	r0, r7, r4
 8021170:	f7fd fe81 	bl	801ee76 <TLV_init_encode>
                          pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
    (void)TLV_addValue(&send_tlv, (uint8_t *)&error, 1);
 8021174:	231f      	movs	r3, #31
 8021176:	18f9      	adds	r1, r7, r3
 8021178:	193b      	adds	r3, r7, r4
 802117a:	2201      	movs	r2, #1
 802117c:	0018      	movs	r0, r3
 802117e:	f7fd ffab 	bl	801f0d8 <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 8021182:	2320      	movs	r3, #32
 8021184:	18fb      	adds	r3, r7, r3
 8021186:	0018      	movs	r0, r3
 8021188:	f7fe f83a 	bl	801f200 <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 802118c:	232c      	movs	r3, #44	; 0x2c
 802118e:	18fb      	adds	r3, r7, r3
 8021190:	0018      	movs	r0, r3
 8021192:	f7fe f8cd 	bl	801f330 <TLV_deinit_decode>
}
 8021196:	46c0      	nop			; (mov r8, r8)
 8021198:	46bd      	mov	sp, r7
 802119a:	b010      	add	sp, #64	; 0x40
 802119c:	bdb0      	pop	{r4, r5, r7, pc}
 802119e:	46c0      	nop			; (mov r8, r8)

080211a0 <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 80211a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80211a2:	b0d5      	sub	sp, #340	; 0x154
 80211a4:	af00      	add	r7, sp, #0
 80211a6:	60b9      	str	r1, [r7, #8]
 80211a8:	607a      	str	r2, [r7, #4]
 80211aa:	4bcd      	ldr	r3, [pc, #820]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 80211ac:	24a8      	movs	r4, #168	; 0xa8
 80211ae:	0064      	lsls	r4, r4, #1
 80211b0:	191b      	adds	r3, r3, r4
 80211b2:	19db      	adds	r3, r3, r7
 80211b4:	1c02      	adds	r2, r0, #0
 80211b6:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 80211b8:	23a7      	movs	r3, #167	; 0xa7
 80211ba:	005b      	lsls	r3, r3, #1
 80211bc:	18fb      	adds	r3, r7, r3
 80211be:	2200      	movs	r2, #0
 80211c0:	801a      	strh	r2, [r3, #0]
  uint8_t error = 0xFF;
 80211c2:	231a      	movs	r3, #26
 80211c4:	33ff      	adds	r3, #255	; 0xff
 80211c6:	18fb      	adds	r3, r7, r3
 80211c8:	22ff      	movs	r2, #255	; 0xff
 80211ca:	701a      	strb	r2, [r3, #0]
  uint8_t param_not_applicated[GUI_PARAM_ALL]; /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0U;  /* Counter of not applicated parameters */
 80211cc:	234e      	movs	r3, #78	; 0x4e
 80211ce:	33ff      	adds	r3, #255	; 0xff
 80211d0:	18fb      	adds	r3, r7, r3
 80211d2:	2200      	movs	r2, #0
 80211d4:	701a      	strb	r2, [r3, #0]
  uint8_t tag;
  uint8_t flag_drp = 0;
 80211d6:	23a6      	movs	r3, #166	; 0xa6
 80211d8:	005b      	lsls	r3, r3, #1
 80211da:	18fb      	adds	r3, r7, r3
 80211dc:	2200      	movs	r2, #0
 80211de:	701a      	strb	r2, [r3, #0]
  uint8_t tdrp = 0;
 80211e0:	234c      	movs	r3, #76	; 0x4c
 80211e2:	33ff      	adds	r3, #255	; 0xff
 80211e4:	18fb      	adds	r3, r7, r3
 80211e6:	2200      	movs	r2, #0
 80211e8:	701a      	strb	r2, [r3, #0]

  (void)TLV_init_decode(&process_tlv, instruction);
 80211ea:	68ba      	ldr	r2, [r7, #8]
 80211ec:	2390      	movs	r3, #144	; 0x90
 80211ee:	005b      	lsls	r3, r3, #1
 80211f0:	18fb      	adds	r3, r7, r3
 80211f2:	0011      	movs	r1, r2
 80211f4:	0018      	movs	r0, r3
 80211f6:	f7fe f815 	bl	801f224 <TLV_init_decode>
  /* pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 80211fa:	4bb9      	ldr	r3, [pc, #740]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 80211fc:	191b      	adds	r3, r3, r4
 80211fe:	19db      	adds	r3, r3, r7
 8021200:	781b      	ldrb	r3, [r3, #0]
 8021202:	3301      	adds	r3, #1
 8021204:	015b      	lsls	r3, r3, #5
 8021206:	b25b      	sxtb	r3, r3
 8021208:	2207      	movs	r2, #7
 802120a:	4313      	orrs	r3, r2
 802120c:	b25b      	sxtb	r3, r3
 802120e:	b2d9      	uxtb	r1, r3
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	2280      	movs	r2, #128	; 0x80
 8021214:	0052      	lsls	r2, r2, #1
 8021216:	2094      	movs	r0, #148	; 0x94
 8021218:	0040      	lsls	r0, r0, #1
 802121a:	1838      	adds	r0, r7, r0
 802121c:	f7fd fe2b 	bl	801ee76 <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 8021220:	e2e5      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch ((USBPD_GUI_Tag_Param)tag)
 8021222:	4bb0      	ldr	r3, [pc, #704]	; (80214e4 <Send_DpmConfigSetCnf+0x344>)
 8021224:	22a8      	movs	r2, #168	; 0xa8
 8021226:	0052      	lsls	r2, r2, #1
 8021228:	189b      	adds	r3, r3, r2
 802122a:	19db      	adds	r3, r3, r7
 802122c:	781b      	ldrb	r3, [r3, #0]
 802122e:	2b1c      	cmp	r3, #28
 8021230:	d900      	bls.n	8021234 <Send_DpmConfigSetCnf+0x94>
 8021232:	e2c3      	b.n	80217bc <Send_DpmConfigSetCnf+0x61c>
 8021234:	009a      	lsls	r2, r3, #2
 8021236:	4bac      	ldr	r3, [pc, #688]	; (80214e8 <Send_DpmConfigSetCnf+0x348>)
 8021238:	18d3      	adds	r3, r2, r3
 802123a:	681b      	ldr	r3, [r3, #0]
 802123c:	469f      	mov	pc, r3
    {
      case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        DPM_Settings[PortNum].PE_SupportedSOP = value[0];
 802123e:	238e      	movs	r3, #142	; 0x8e
 8021240:	005b      	lsls	r3, r3, #1
 8021242:	18fb      	adds	r3, r7, r3
 8021244:	681b      	ldr	r3, [r3, #0]
 8021246:	7819      	ldrb	r1, [r3, #0]
 8021248:	4ba5      	ldr	r3, [pc, #660]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 802124a:	22a8      	movs	r2, #168	; 0xa8
 802124c:	0052      	lsls	r2, r2, #1
 802124e:	189b      	adds	r3, r3, r2
 8021250:	19db      	adds	r3, r3, r7
 8021252:	781a      	ldrb	r2, [r3, #0]
 8021254:	0008      	movs	r0, r1
 8021256:	49a5      	ldr	r1, [pc, #660]	; (80214ec <Send_DpmConfigSetCnf+0x34c>)
 8021258:	0013      	movs	r3, r2
 802125a:	005b      	lsls	r3, r3, #1
 802125c:	189b      	adds	r3, r3, r2
 802125e:	009b      	lsls	r3, r3, #2
 8021260:	5058      	str	r0, [r3, r1]
#endif /* !USBPDCORE_LIB_NO_PD */
        break;
 8021262:	e2c4      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
        /*FastRoleSwap*/
        DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 8021264:	238e      	movs	r3, #142	; 0x8e
 8021266:	005b      	lsls	r3, r3, #1
 8021268:	18fb      	adds	r3, r7, r3
 802126a:	681b      	ldr	r3, [r3, #0]
 802126c:	7819      	ldrb	r1, [r3, #0]
 802126e:	4b9c      	ldr	r3, [pc, #624]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 8021270:	22a8      	movs	r2, #168	; 0xa8
 8021272:	0052      	lsls	r2, r2, #1
 8021274:	189b      	adds	r3, r3, r2
 8021276:	19db      	adds	r3, r3, r7
 8021278:	781a      	ldrb	r2, [r3, #0]
 802127a:	2301      	movs	r3, #1
 802127c:	400b      	ands	r3, r1
 802127e:	b2d9      	uxtb	r1, r3
 8021280:	489a      	ldr	r0, [pc, #616]	; (80214ec <Send_DpmConfigSetCnf+0x34c>)
 8021282:	2408      	movs	r4, #8
 8021284:	0013      	movs	r3, r2
 8021286:	005b      	lsls	r3, r3, #1
 8021288:	189b      	adds	r3, r3, r2
 802128a:	009b      	lsls	r3, r3, #2
 802128c:	18c3      	adds	r3, r0, r3
 802128e:	191b      	adds	r3, r3, r4
 8021290:	2201      	movs	r2, #1
 8021292:	400a      	ands	r2, r1
 8021294:	1890      	adds	r0, r2, r2
 8021296:	781a      	ldrb	r2, [r3, #0]
 8021298:	2102      	movs	r1, #2
 802129a:	438a      	bics	r2, r1
 802129c:	1c11      	adds	r1, r2, #0
 802129e:	1c02      	adds	r2, r0, #0
 80212a0:	430a      	orrs	r2, r1
 80212a2:	701a      	strb	r2, [r3, #0]
        break;
 80212a4:	e2a3      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
#endif /*USBPD_REV30_SUPPORT*/
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
        /*DataRoleSwap to UFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 80212a6:	238e      	movs	r3, #142	; 0x8e
 80212a8:	005b      	lsls	r3, r3, #1
 80212aa:	18fb      	adds	r3, r7, r3
 80212ac:	681b      	ldr	r3, [r3, #0]
 80212ae:	7819      	ldrb	r1, [r3, #0]
 80212b0:	4b8b      	ldr	r3, [pc, #556]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 80212b2:	22a8      	movs	r2, #168	; 0xa8
 80212b4:	0052      	lsls	r2, r2, #1
 80212b6:	189b      	adds	r3, r3, r2
 80212b8:	19db      	adds	r3, r3, r7
 80212ba:	781a      	ldrb	r2, [r3, #0]
 80212bc:	2301      	movs	r3, #1
 80212be:	400b      	ands	r3, r1
 80212c0:	b2d9      	uxtb	r1, r3
 80212c2:	4b8b      	ldr	r3, [pc, #556]	; (80214f0 <Send_DpmConfigSetCnf+0x350>)
 80212c4:	2074      	movs	r0, #116	; 0x74
 80212c6:	4342      	muls	r2, r0
 80212c8:	2001      	movs	r0, #1
 80212ca:	4001      	ands	r1, r0
 80212cc:	00cc      	lsls	r4, r1, #3
 80212ce:	5cd1      	ldrb	r1, [r2, r3]
 80212d0:	2008      	movs	r0, #8
 80212d2:	4381      	bics	r1, r0
 80212d4:	1c08      	adds	r0, r1, #0
 80212d6:	1c21      	adds	r1, r4, #0
 80212d8:	4301      	orrs	r1, r0
 80212da:	54d1      	strb	r1, [r2, r3]
        break;
 80212dc:	e287      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
        /*DataRoleSwap to DFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 80212de:	238e      	movs	r3, #142	; 0x8e
 80212e0:	005b      	lsls	r3, r3, #1
 80212e2:	18fb      	adds	r3, r7, r3
 80212e4:	681b      	ldr	r3, [r3, #0]
 80212e6:	7819      	ldrb	r1, [r3, #0]
 80212e8:	4b7d      	ldr	r3, [pc, #500]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 80212ea:	22a8      	movs	r2, #168	; 0xa8
 80212ec:	0052      	lsls	r2, r2, #1
 80212ee:	189b      	adds	r3, r3, r2
 80212f0:	19db      	adds	r3, r3, r7
 80212f2:	781a      	ldrb	r2, [r3, #0]
 80212f4:	2301      	movs	r3, #1
 80212f6:	400b      	ands	r3, r1
 80212f8:	b2d9      	uxtb	r1, r3
 80212fa:	4b7d      	ldr	r3, [pc, #500]	; (80214f0 <Send_DpmConfigSetCnf+0x350>)
 80212fc:	2074      	movs	r0, #116	; 0x74
 80212fe:	4342      	muls	r2, r0
 8021300:	2001      	movs	r0, #1
 8021302:	4001      	ands	r1, r0
 8021304:	008c      	lsls	r4, r1, #2
 8021306:	5cd1      	ldrb	r1, [r2, r3]
 8021308:	2004      	movs	r0, #4
 802130a:	4381      	bics	r1, r0
 802130c:	1c08      	adds	r0, r1, #0
 802130e:	1c21      	adds	r1, r4, #0
 8021310:	4301      	orrs	r1, r0
 8021312:	54d1      	strb	r1, [r2, r3]
        break;
 8021314:	e26b      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DEFAULTPOWERROLE :
        /*DefaultPowerRole*/
        DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 8021316:	238e      	movs	r3, #142	; 0x8e
 8021318:	005b      	lsls	r3, r3, #1
 802131a:	18fb      	adds	r3, r7, r3
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	7819      	ldrb	r1, [r3, #0]
 8021320:	4b6f      	ldr	r3, [pc, #444]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 8021322:	22a8      	movs	r2, #168	; 0xa8
 8021324:	0052      	lsls	r2, r2, #1
 8021326:	189b      	adds	r3, r3, r2
 8021328:	19db      	adds	r3, r3, r7
 802132a:	781a      	ldrb	r2, [r3, #0]
 802132c:	2301      	movs	r3, #1
 802132e:	400b      	ands	r3, r1
 8021330:	b2d9      	uxtb	r1, r3
 8021332:	486e      	ldr	r0, [pc, #440]	; (80214ec <Send_DpmConfigSetCnf+0x34c>)
 8021334:	0013      	movs	r3, r2
 8021336:	005b      	lsls	r3, r3, #1
 8021338:	189b      	adds	r3, r3, r2
 802133a:	009b      	lsls	r3, r3, #2
 802133c:	18c3      	adds	r3, r0, r3
 802133e:	2201      	movs	r2, #1
 8021340:	400a      	ands	r2, r1
 8021342:	0090      	lsls	r0, r2, #2
 8021344:	791a      	ldrb	r2, [r3, #4]
 8021346:	2104      	movs	r1, #4
 8021348:	438a      	bics	r2, r1
 802134a:	1c11      	adds	r1, r2, #0
 802134c:	1c02      	adds	r2, r0, #0
 802134e:	430a      	orrs	r2, r1
 8021350:	711a      	strb	r2, [r3, #4]
        break;
 8021352:	e24c      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
        /*DRP_Support*/
        DPM_Settings[PortNum].PE_RoleSwap = value[0];
 8021354:	238e      	movs	r3, #142	; 0x8e
 8021356:	005b      	lsls	r3, r3, #1
 8021358:	18fb      	adds	r3, r7, r3
 802135a:	681b      	ldr	r3, [r3, #0]
 802135c:	7819      	ldrb	r1, [r3, #0]
 802135e:	4b60      	ldr	r3, [pc, #384]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 8021360:	22a8      	movs	r2, #168	; 0xa8
 8021362:	0052      	lsls	r2, r2, #1
 8021364:	189b      	adds	r3, r3, r2
 8021366:	19db      	adds	r3, r3, r7
 8021368:	781a      	ldrb	r2, [r3, #0]
 802136a:	2301      	movs	r3, #1
 802136c:	400b      	ands	r3, r1
 802136e:	b2d9      	uxtb	r1, r3
 8021370:	485e      	ldr	r0, [pc, #376]	; (80214ec <Send_DpmConfigSetCnf+0x34c>)
 8021372:	0013      	movs	r3, r2
 8021374:	005b      	lsls	r3, r3, #1
 8021376:	189b      	adds	r3, r3, r2
 8021378:	009b      	lsls	r3, r3, #2
 802137a:	18c3      	adds	r3, r0, r3
 802137c:	2201      	movs	r2, #1
 802137e:	400a      	ands	r2, r1
 8021380:	00d0      	lsls	r0, r2, #3
 8021382:	791a      	ldrb	r2, [r3, #4]
 8021384:	2108      	movs	r1, #8
 8021386:	438a      	bics	r2, r1
 8021388:	1c11      	adds	r1, r2, #0
 802138a:	1c02      	adds	r2, r0, #0
 802138c:	430a      	orrs	r2, r1
 802138e:	711a      	strb	r2, [r3, #4]
        break;
 8021390:	e22d      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_CADROLETOGGLE :
        /*CADRoleToggle*/
        DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 8021392:	238e      	movs	r3, #142	; 0x8e
 8021394:	005b      	lsls	r3, r3, #1
 8021396:	18fb      	adds	r3, r7, r3
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	7819      	ldrb	r1, [r3, #0]
 802139c:	4b50      	ldr	r3, [pc, #320]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 802139e:	22a8      	movs	r2, #168	; 0xa8
 80213a0:	0052      	lsls	r2, r2, #1
 80213a2:	189b      	adds	r3, r3, r2
 80213a4:	19db      	adds	r3, r3, r7
 80213a6:	781a      	ldrb	r2, [r3, #0]
 80213a8:	2301      	movs	r3, #1
 80213aa:	400b      	ands	r3, r1
 80213ac:	b2d9      	uxtb	r1, r3
 80213ae:	484f      	ldr	r0, [pc, #316]	; (80214ec <Send_DpmConfigSetCnf+0x34c>)
 80213b0:	0013      	movs	r3, r2
 80213b2:	005b      	lsls	r3, r3, #1
 80213b4:	189b      	adds	r3, r3, r2
 80213b6:	009b      	lsls	r3, r3, #2
 80213b8:	18c3      	adds	r3, r0, r3
 80213ba:	2201      	movs	r2, #1
 80213bc:	400a      	ands	r2, r1
 80213be:	0150      	lsls	r0, r2, #5
 80213c0:	795a      	ldrb	r2, [r3, #5]
 80213c2:	2120      	movs	r1, #32
 80213c4:	438a      	bics	r2, r1
 80213c6:	1c11      	adds	r1, r2, #0
 80213c8:	1c02      	adds	r2, r0, #0
 80213ca:	430a      	orrs	r2, r1
 80213cc:	715a      	strb	r2, [r3, #5]
        break;
 80213ce:	e20e      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PE_SCAP_HR :
        /*PE_SCAP_HR*/
        DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 80213d0:	238e      	movs	r3, #142	; 0x8e
 80213d2:	005b      	lsls	r3, r3, #1
 80213d4:	18fb      	adds	r3, r7, r3
 80213d6:	681b      	ldr	r3, [r3, #0]
 80213d8:	7819      	ldrb	r1, [r3, #0]
 80213da:	4b41      	ldr	r3, [pc, #260]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 80213dc:	22a8      	movs	r2, #168	; 0xa8
 80213de:	0052      	lsls	r2, r2, #1
 80213e0:	189b      	adds	r3, r3, r2
 80213e2:	19db      	adds	r3, r3, r7
 80213e4:	781a      	ldrb	r2, [r3, #0]
 80213e6:	2301      	movs	r3, #1
 80213e8:	400b      	ands	r3, r1
 80213ea:	b2d9      	uxtb	r1, r3
 80213ec:	483f      	ldr	r0, [pc, #252]	; (80214ec <Send_DpmConfigSetCnf+0x34c>)
 80213ee:	0013      	movs	r3, r2
 80213f0:	005b      	lsls	r3, r3, #1
 80213f2:	189b      	adds	r3, r3, r2
 80213f4:	009b      	lsls	r3, r3, #2
 80213f6:	18c3      	adds	r3, r0, r3
 80213f8:	01c8      	lsls	r0, r1, #7
 80213fa:	791a      	ldrb	r2, [r3, #4]
 80213fc:	217f      	movs	r1, #127	; 0x7f
 80213fe:	400a      	ands	r2, r1
 8021400:	1c11      	adds	r1, r2, #0
 8021402:	1c02      	adds	r2, r0, #0
 8021404:	430a      	orrs	r2, r1
 8021406:	711a      	strb	r2, [r3, #4]
        break;
 8021408:	e1f1      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_VCONNSWAP :
        /*VConnSwap*/
        DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 802140a:	238e      	movs	r3, #142	; 0x8e
 802140c:	005b      	lsls	r3, r3, #1
 802140e:	18fb      	adds	r3, r7, r3
 8021410:	681b      	ldr	r3, [r3, #0]
 8021412:	7819      	ldrb	r1, [r3, #0]
 8021414:	4b32      	ldr	r3, [pc, #200]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 8021416:	22a8      	movs	r2, #168	; 0xa8
 8021418:	0052      	lsls	r2, r2, #1
 802141a:	189b      	adds	r3, r3, r2
 802141c:	19db      	adds	r3, r3, r7
 802141e:	781a      	ldrb	r2, [r3, #0]
 8021420:	2301      	movs	r3, #1
 8021422:	400b      	ands	r3, r1
 8021424:	b2d9      	uxtb	r1, r3
 8021426:	4b32      	ldr	r3, [pc, #200]	; (80214f0 <Send_DpmConfigSetCnf+0x350>)
 8021428:	2074      	movs	r0, #116	; 0x74
 802142a:	4342      	muls	r2, r0
 802142c:	2001      	movs	r0, #1
 802142e:	4001      	ands	r1, r0
 8021430:	184c      	adds	r4, r1, r1
 8021432:	5cd1      	ldrb	r1, [r2, r3]
 8021434:	2002      	movs	r0, #2
 8021436:	4381      	bics	r1, r0
 8021438:	1c08      	adds	r0, r1, #0
 802143a:	1c21      	adds	r1, r4, #0
 802143c:	4301      	orrs	r1, r0
 802143e:	54d1      	strb	r1, [r2, r3]
        break;
 8021440:	e1d5      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
        DPM_Settings[PortNum].PE_VDMSupport = value[0];
        break;
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
        /* Ping Support */
        DPM_Settings[PortNum].PE_PingSupport = value[0];
 8021442:	238e      	movs	r3, #142	; 0x8e
 8021444:	005b      	lsls	r3, r3, #1
 8021446:	18fb      	adds	r3, r7, r3
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	7819      	ldrb	r1, [r3, #0]
 802144c:	4b24      	ldr	r3, [pc, #144]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 802144e:	22a8      	movs	r2, #168	; 0xa8
 8021450:	0052      	lsls	r2, r2, #1
 8021452:	189b      	adds	r3, r3, r2
 8021454:	19db      	adds	r3, r3, r7
 8021456:	781a      	ldrb	r2, [r3, #0]
 8021458:	2301      	movs	r3, #1
 802145a:	400b      	ands	r3, r1
 802145c:	b2d9      	uxtb	r1, r3
 802145e:	4823      	ldr	r0, [pc, #140]	; (80214ec <Send_DpmConfigSetCnf+0x34c>)
 8021460:	0013      	movs	r3, r2
 8021462:	005b      	lsls	r3, r3, #1
 8021464:	189b      	adds	r3, r3, r2
 8021466:	009b      	lsls	r3, r3, #2
 8021468:	18c3      	adds	r3, r0, r3
 802146a:	2201      	movs	r2, #1
 802146c:	400a      	ands	r2, r1
 802146e:	0190      	lsls	r0, r2, #6
 8021470:	791a      	ldrb	r2, [r3, #4]
 8021472:	2140      	movs	r1, #64	; 0x40
 8021474:	438a      	bics	r2, r1
 8021476:	1c11      	adds	r1, r2, #0
 8021478:	1c02      	adds	r2, r0, #0
 802147a:	430a      	orrs	r2, r1
 802147c:	711a      	strb	r2, [r3, #4]
        break;
 802147e:	e1b6      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
        DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = USBPD_LE16(&value[0]);
 8021480:	228e      	movs	r2, #142	; 0x8e
 8021482:	0052      	lsls	r2, r2, #1
 8021484:	18bb      	adds	r3, r7, r2
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	781b      	ldrb	r3, [r3, #0]
 802148a:	b299      	uxth	r1, r3
 802148c:	18bb      	adds	r3, r7, r2
 802148e:	681b      	ldr	r3, [r3, #0]
 8021490:	3301      	adds	r3, #1
 8021492:	781b      	ldrb	r3, [r3, #0]
 8021494:	b29b      	uxth	r3, r3
 8021496:	021b      	lsls	r3, r3, #8
 8021498:	b29b      	uxth	r3, r3
 802149a:	4a11      	ldr	r2, [pc, #68]	; (80214e0 <Send_DpmConfigSetCnf+0x340>)
 802149c:	20a8      	movs	r0, #168	; 0xa8
 802149e:	0040      	lsls	r0, r0, #1
 80214a0:	1812      	adds	r2, r2, r0
 80214a2:	19d2      	adds	r2, r2, r7
 80214a4:	7812      	ldrb	r2, [r2, #0]
 80214a6:	18cb      	adds	r3, r1, r3
 80214a8:	b298      	uxth	r0, r3
 80214aa:	4910      	ldr	r1, [pc, #64]	; (80214ec <Send_DpmConfigSetCnf+0x34c>)
 80214ac:	0013      	movs	r3, r2
 80214ae:	005b      	lsls	r3, r3, #1
 80214b0:	189b      	adds	r3, r3, r2
 80214b2:	009b      	lsls	r3, r3, #2
 80214b4:	18cb      	adds	r3, r1, r3
 80214b6:	3308      	adds	r3, #8
 80214b8:	1c02      	adds	r2, r0, #0
 80214ba:	801a      	strh	r2, [r3, #0]
        break;
 80214bc:	e197      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSNK, 0, sizeof(PORT0_PDO_ListSNK));
 80214be:	4b0d      	ldr	r3, [pc, #52]	; (80214f4 <Send_DpmConfigSetCnf+0x354>)
 80214c0:	221c      	movs	r2, #28
 80214c2:	2100      	movs	r1, #0
 80214c4:	0018      	movs	r0, r3
 80214c6:	f002 f901 	bl	80236cc <memset>
          index_pdo = 0;
 80214ca:	2300      	movs	r3, #0
 80214cc:	22a2      	movs	r2, #162	; 0xa2
 80214ce:	0052      	lsls	r2, r2, #1
 80214d0:	18ba      	adds	r2, r7, r2
 80214d2:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 80214d4:	2300      	movs	r3, #0
 80214d6:	22a0      	movs	r2, #160	; 0xa0
 80214d8:	0052      	lsls	r2, r2, #1
 80214da:	18ba      	adds	r2, r7, r2
 80214dc:	6013      	str	r3, [r2, #0]
 80214de:	e048      	b.n	8021572 <Send_DpmConfigSetCnf+0x3d2>
 80214e0:	fffffebf 	.word	0xfffffebf
 80214e4:	fffffec7 	.word	0xfffffec7
 80214e8:	0802548c 	.word	0x0802548c
 80214ec:	200000f4 	.word	0x200000f4
 80214f0:	20000108 	.word	0x20000108
 80214f4:	20000180 	.word	0x20000180
          {
            pdo = USBPD_LE32(&value[index_gui]);
 80214f8:	248e      	movs	r4, #142	; 0x8e
 80214fa:	0064      	lsls	r4, r4, #1
 80214fc:	193b      	adds	r3, r7, r4
 80214fe:	681a      	ldr	r2, [r3, #0]
 8021500:	20a0      	movs	r0, #160	; 0xa0
 8021502:	0040      	lsls	r0, r0, #1
 8021504:	183b      	adds	r3, r7, r0
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	18d3      	adds	r3, r2, r3
 802150a:	781b      	ldrb	r3, [r3, #0]
 802150c:	0019      	movs	r1, r3
 802150e:	193b      	adds	r3, r7, r4
 8021510:	681a      	ldr	r2, [r3, #0]
 8021512:	183b      	adds	r3, r7, r0
 8021514:	681b      	ldr	r3, [r3, #0]
 8021516:	3301      	adds	r3, #1
 8021518:	18d3      	adds	r3, r2, r3
 802151a:	781b      	ldrb	r3, [r3, #0]
 802151c:	021b      	lsls	r3, r3, #8
 802151e:	18ca      	adds	r2, r1, r3
 8021520:	193b      	adds	r3, r7, r4
 8021522:	6819      	ldr	r1, [r3, #0]
 8021524:	183b      	adds	r3, r7, r0
 8021526:	681b      	ldr	r3, [r3, #0]
 8021528:	3302      	adds	r3, #2
 802152a:	18cb      	adds	r3, r1, r3
 802152c:	781b      	ldrb	r3, [r3, #0]
 802152e:	041b      	lsls	r3, r3, #16
 8021530:	18d2      	adds	r2, r2, r3
 8021532:	193b      	adds	r3, r7, r4
 8021534:	6819      	ldr	r1, [r3, #0]
 8021536:	183b      	adds	r3, r7, r0
 8021538:	681b      	ldr	r3, [r3, #0]
 802153a:	3303      	adds	r3, #3
 802153c:	18cb      	adds	r3, r1, r3
 802153e:	781b      	ldrb	r3, [r3, #0]
 8021540:	061b      	lsls	r3, r3, #24
 8021542:	18d3      	adds	r3, r2, r3
 8021544:	219a      	movs	r1, #154	; 0x9a
 8021546:	0049      	lsls	r1, r1, #1
 8021548:	187a      	adds	r2, r7, r1
 802154a:	6013      	str	r3, [r2, #0]
            PORT0_PDO_ListSNK[index_pdo] = pdo;
 802154c:	4b94      	ldr	r3, [pc, #592]	; (80217a0 <Send_DpmConfigSetCnf+0x600>)
 802154e:	24a2      	movs	r4, #162	; 0xa2
 8021550:	0064      	lsls	r4, r4, #1
 8021552:	193a      	adds	r2, r7, r4
 8021554:	6812      	ldr	r2, [r2, #0]
 8021556:	0092      	lsls	r2, r2, #2
 8021558:	1879      	adds	r1, r7, r1
 802155a:	6809      	ldr	r1, [r1, #0]
 802155c:	50d1      	str	r1, [r2, r3]
            index_pdo++;
 802155e:	193b      	adds	r3, r7, r4
 8021560:	681b      	ldr	r3, [r3, #0]
 8021562:	3301      	adds	r3, #1
 8021564:	193a      	adds	r2, r7, r4
 8021566:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 8021568:	183b      	adds	r3, r7, r0
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	3304      	adds	r3, #4
 802156e:	183a      	adds	r2, r7, r0
 8021570:	6013      	str	r3, [r2, #0]
 8021572:	218d      	movs	r1, #141	; 0x8d
 8021574:	0049      	lsls	r1, r1, #1
 8021576:	187b      	adds	r3, r7, r1
 8021578:	881b      	ldrh	r3, [r3, #0]
 802157a:	001a      	movs	r2, r3
 802157c:	23a0      	movs	r3, #160	; 0xa0
 802157e:	005b      	lsls	r3, r3, #1
 8021580:	18fb      	adds	r3, r7, r3
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	4293      	cmp	r3, r2
 8021586:	d3b7      	bcc.n	80214f8 <Send_DpmConfigSetCnf+0x358>
          }
          USBPD_NbPDO[0] = (uint8_t)(size / 4U);
 8021588:	187b      	adds	r3, r7, r1
 802158a:	881b      	ldrh	r3, [r3, #0]
 802158c:	089b      	lsrs	r3, r3, #2
 802158e:	b29b      	uxth	r3, r3
 8021590:	b2da      	uxtb	r2, r3
 8021592:	4b84      	ldr	r3, [pc, #528]	; (80217a4 <Send_DpmConfigSetCnf+0x604>)
 8021594:	701a      	strb	r2, [r3, #0]
          UpdateSNKPowerPort0();
 8021596:	f000 fe2f 	bl	80221f8 <UpdateSNKPowerPort0>
          }
          USBPD_NbPDO[2] = (uint8_t)(size / 4U);
          UpdateSNKPowerPort1();
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 802159a:	e128      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
#endif /* USBPD_PORT_COUNT==2 */
        break;
      }
#endif /* (_SRC) || (_DRP) */
      case GUI_PARAM_TDRP :
        tdrp = value[0];
 802159c:	238e      	movs	r3, #142	; 0x8e
 802159e:	005b      	lsls	r3, r3, #1
 80215a0:	18fb      	adds	r3, r7, r3
 80215a2:	681a      	ldr	r2, [r3, #0]
 80215a4:	214c      	movs	r1, #76	; 0x4c
 80215a6:	31ff      	adds	r1, #255	; 0xff
 80215a8:	187b      	adds	r3, r7, r1
 80215aa:	7812      	ldrb	r2, [r2, #0]
 80215ac:	701a      	strb	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 80215ae:	4b7e      	ldr	r3, [pc, #504]	; (80217a8 <Send_DpmConfigSetCnf+0x608>)
 80215b0:	22a8      	movs	r2, #168	; 0xa8
 80215b2:	0052      	lsls	r2, r2, #1
 80215b4:	189b      	adds	r3, r3, r2
 80215b6:	19db      	adds	r3, r3, r7
 80215b8:	781b      	ldrb	r3, [r3, #0]
 80215ba:	187a      	adds	r2, r7, r1
 80215bc:	7812      	ldrb	r2, [r2, #0]
 80215be:	217f      	movs	r1, #127	; 0x7f
 80215c0:	400a      	ands	r2, r1
 80215c2:	b2d4      	uxtb	r4, r2
 80215c4:	4a79      	ldr	r2, [pc, #484]	; (80217ac <Send_DpmConfigSetCnf+0x60c>)
 80215c6:	2168      	movs	r1, #104	; 0x68
 80215c8:	2074      	movs	r0, #116	; 0x74
 80215ca:	4343      	muls	r3, r0
 80215cc:	18d3      	adds	r3, r2, r3
 80215ce:	185b      	adds	r3, r3, r1
 80215d0:	1c22      	adds	r2, r4, #0
 80215d2:	1890      	adds	r0, r2, r2
 80215d4:	791a      	ldrb	r2, [r3, #4]
 80215d6:	2101      	movs	r1, #1
 80215d8:	400a      	ands	r2, r1
 80215da:	1c11      	adds	r1, r2, #0
 80215dc:	1c02      	adds	r2, r0, #0
 80215de:	430a      	orrs	r2, r1
 80215e0:	711a      	strb	r2, [r3, #4]
        flag_drp = 1;
 80215e2:	23a6      	movs	r3, #166	; 0xa6
 80215e4:	005b      	lsls	r3, r3, #1
 80215e6:	18fb      	adds	r3, r7, r3
 80215e8:	2201      	movs	r2, #1
 80215ea:	701a      	strb	r2, [r3, #0]
        break;
 80215ec:	e0ff      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DCSRC_DRP :
        dcdrp = value[0];
 80215ee:	238e      	movs	r3, #142	; 0x8e
 80215f0:	005b      	lsls	r3, r3, #1
 80215f2:	18fb      	adds	r3, r7, r3
 80215f4:	681b      	ldr	r3, [r3, #0]
 80215f6:	781a      	ldrb	r2, [r3, #0]
 80215f8:	21a7      	movs	r1, #167	; 0xa7
 80215fa:	0049      	lsls	r1, r1, #1
 80215fc:	187b      	adds	r3, r7, r1
 80215fe:	801a      	strh	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 8021600:	4b69      	ldr	r3, [pc, #420]	; (80217a8 <Send_DpmConfigSetCnf+0x608>)
 8021602:	22a8      	movs	r2, #168	; 0xa8
 8021604:	0052      	lsls	r2, r2, #1
 8021606:	189b      	adds	r3, r3, r2
 8021608:	19db      	adds	r3, r3, r7
 802160a:	781b      	ldrb	r3, [r3, #0]
 802160c:	187a      	adds	r2, r7, r1
 802160e:	8812      	ldrh	r2, [r2, #0]
 8021610:	1c11      	adds	r1, r2, #0
 8021612:	227f      	movs	r2, #127	; 0x7f
 8021614:	400a      	ands	r2, r1
 8021616:	b2d2      	uxtb	r2, r2
 8021618:	4964      	ldr	r1, [pc, #400]	; (80217ac <Send_DpmConfigSetCnf+0x60c>)
 802161a:	2068      	movs	r0, #104	; 0x68
 802161c:	2474      	movs	r4, #116	; 0x74
 802161e:	4363      	muls	r3, r4
 8021620:	18cb      	adds	r3, r1, r3
 8021622:	181b      	adds	r3, r3, r0
 8021624:	217f      	movs	r1, #127	; 0x7f
 8021626:	400a      	ands	r2, r1
 8021628:	0010      	movs	r0, r2
 802162a:	795a      	ldrb	r2, [r3, #5]
 802162c:	217f      	movs	r1, #127	; 0x7f
 802162e:	438a      	bics	r2, r1
 8021630:	1c11      	adds	r1, r2, #0
 8021632:	1c02      	adds	r2, r0, #0
 8021634:	430a      	orrs	r2, r1
 8021636:	715a      	strb	r2, [r3, #5]
        flag_drp = 1;
 8021638:	23a6      	movs	r3, #166	; 0xa6
 802163a:	005b      	lsls	r3, r3, #1
 802163c:	18fb      	adds	r3, r7, r3
 802163e:	2201      	movs	r2, #1
 8021640:	701a      	strb	r2, [r3, #0]
        break;
 8021642:	e0d4      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
        DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 8021644:	238e      	movs	r3, #142	; 0x8e
 8021646:	005b      	lsls	r3, r3, #1
 8021648:	18fb      	adds	r3, r7, r3
 802164a:	681b      	ldr	r3, [r3, #0]
 802164c:	7819      	ldrb	r1, [r3, #0]
 802164e:	4b56      	ldr	r3, [pc, #344]	; (80217a8 <Send_DpmConfigSetCnf+0x608>)
 8021650:	22a8      	movs	r2, #168	; 0xa8
 8021652:	0052      	lsls	r2, r2, #1
 8021654:	189b      	adds	r3, r3, r2
 8021656:	19db      	adds	r3, r3, r7
 8021658:	781a      	ldrb	r2, [r3, #0]
 802165a:	2301      	movs	r3, #1
 802165c:	400b      	ands	r3, r1
 802165e:	b2d9      	uxtb	r1, r3
 8021660:	4853      	ldr	r0, [pc, #332]	; (80217b0 <Send_DpmConfigSetCnf+0x610>)
 8021662:	0013      	movs	r3, r2
 8021664:	005b      	lsls	r3, r3, #1
 8021666:	189b      	adds	r3, r3, r2
 8021668:	009b      	lsls	r3, r3, #2
 802166a:	18c3      	adds	r3, r0, r3
 802166c:	2201      	movs	r2, #1
 802166e:	4011      	ands	r1, r2
 8021670:	0008      	movs	r0, r1
 8021672:	795a      	ldrb	r2, [r3, #5]
 8021674:	2101      	movs	r1, #1
 8021676:	438a      	bics	r2, r1
 8021678:	1c11      	adds	r1, r2, #0
 802167a:	1c02      	adds	r2, r0, #0
 802167c:	430a      	orrs	r2, r1
 802167e:	715a      	strb	r2, [r3, #5]
        break;
 8021680:	e0b5      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
        DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 8021682:	238e      	movs	r3, #142	; 0x8e
 8021684:	005b      	lsls	r3, r3, #1
 8021686:	18fb      	adds	r3, r7, r3
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	7819      	ldrb	r1, [r3, #0]
 802168c:	4b46      	ldr	r3, [pc, #280]	; (80217a8 <Send_DpmConfigSetCnf+0x608>)
 802168e:	22a8      	movs	r2, #168	; 0xa8
 8021690:	0052      	lsls	r2, r2, #1
 8021692:	189b      	adds	r3, r3, r2
 8021694:	19db      	adds	r3, r3, r7
 8021696:	781a      	ldrb	r2, [r3, #0]
 8021698:	2301      	movs	r3, #1
 802169a:	400b      	ands	r3, r1
 802169c:	b2d9      	uxtb	r1, r3
 802169e:	4844      	ldr	r0, [pc, #272]	; (80217b0 <Send_DpmConfigSetCnf+0x610>)
 80216a0:	0013      	movs	r3, r2
 80216a2:	005b      	lsls	r3, r3, #1
 80216a4:	189b      	adds	r3, r3, r2
 80216a6:	009b      	lsls	r3, r3, #2
 80216a8:	18c3      	adds	r3, r0, r3
 80216aa:	2201      	movs	r2, #1
 80216ac:	400a      	ands	r2, r1
 80216ae:	1890      	adds	r0, r2, r2
 80216b0:	795a      	ldrb	r2, [r3, #5]
 80216b2:	2102      	movs	r1, #2
 80216b4:	438a      	bics	r2, r1
 80216b6:	1c11      	adds	r1, r2, #0
 80216b8:	1c02      	adds	r2, r0, #0
 80216ba:	430a      	orrs	r2, r1
 80216bc:	715a      	strb	r2, [r3, #5]
        break;
 80216be:	e096      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_XID_SOP :
        DPM_ID_Settings[PortNum].XID       = USBPD_LE32(&value[0]);
 80216c0:	208e      	movs	r0, #142	; 0x8e
 80216c2:	0040      	lsls	r0, r0, #1
 80216c4:	183b      	adds	r3, r7, r0
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	781b      	ldrb	r3, [r3, #0]
 80216ca:	001a      	movs	r2, r3
 80216cc:	183b      	adds	r3, r7, r0
 80216ce:	681b      	ldr	r3, [r3, #0]
 80216d0:	3301      	adds	r3, #1
 80216d2:	781b      	ldrb	r3, [r3, #0]
 80216d4:	021b      	lsls	r3, r3, #8
 80216d6:	18d2      	adds	r2, r2, r3
 80216d8:	183b      	adds	r3, r7, r0
 80216da:	681b      	ldr	r3, [r3, #0]
 80216dc:	3302      	adds	r3, #2
 80216de:	781b      	ldrb	r3, [r3, #0]
 80216e0:	041b      	lsls	r3, r3, #16
 80216e2:	18d1      	adds	r1, r2, r3
 80216e4:	183b      	adds	r3, r7, r0
 80216e6:	681b      	ldr	r3, [r3, #0]
 80216e8:	3303      	adds	r3, #3
 80216ea:	781b      	ldrb	r3, [r3, #0]
 80216ec:	061b      	lsls	r3, r3, #24
 80216ee:	4a2e      	ldr	r2, [pc, #184]	; (80217a8 <Send_DpmConfigSetCnf+0x608>)
 80216f0:	20a8      	movs	r0, #168	; 0xa8
 80216f2:	0040      	lsls	r0, r0, #1
 80216f4:	1812      	adds	r2, r2, r0
 80216f6:	19d2      	adds	r2, r2, r7
 80216f8:	7812      	ldrb	r2, [r2, #0]
 80216fa:	18c9      	adds	r1, r1, r3
 80216fc:	4b2d      	ldr	r3, [pc, #180]	; (80217b4 <Send_DpmConfigSetCnf+0x614>)
 80216fe:	00d2      	lsls	r2, r2, #3
 8021700:	50d1      	str	r1, [r2, r3]
        break;
 8021702:	e074      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_USB_VID_SOP :
        DPM_ID_Settings[PortNum].VID       = USBPD_LE16(&value[0]);
 8021704:	228e      	movs	r2, #142	; 0x8e
 8021706:	0052      	lsls	r2, r2, #1
 8021708:	18bb      	adds	r3, r7, r2
 802170a:	681b      	ldr	r3, [r3, #0]
 802170c:	781b      	ldrb	r3, [r3, #0]
 802170e:	b299      	uxth	r1, r3
 8021710:	18bb      	adds	r3, r7, r2
 8021712:	681b      	ldr	r3, [r3, #0]
 8021714:	3301      	adds	r3, #1
 8021716:	781b      	ldrb	r3, [r3, #0]
 8021718:	b29b      	uxth	r3, r3
 802171a:	021b      	lsls	r3, r3, #8
 802171c:	b29a      	uxth	r2, r3
 802171e:	4b22      	ldr	r3, [pc, #136]	; (80217a8 <Send_DpmConfigSetCnf+0x608>)
 8021720:	20a8      	movs	r0, #168	; 0xa8
 8021722:	0040      	lsls	r0, r0, #1
 8021724:	181b      	adds	r3, r3, r0
 8021726:	19db      	adds	r3, r3, r7
 8021728:	781b      	ldrb	r3, [r3, #0]
 802172a:	188a      	adds	r2, r1, r2
 802172c:	b291      	uxth	r1, r2
 802172e:	4a21      	ldr	r2, [pc, #132]	; (80217b4 <Send_DpmConfigSetCnf+0x614>)
 8021730:	00db      	lsls	r3, r3, #3
 8021732:	18d3      	adds	r3, r2, r3
 8021734:	3304      	adds	r3, #4
 8021736:	1c0a      	adds	r2, r1, #0
 8021738:	801a      	strh	r2, [r3, #0]
        break;
 802173a:	e058      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PID_SOP :
        DPM_ID_Settings[PortNum].PID       = USBPD_LE16(&value[0]);
 802173c:	228e      	movs	r2, #142	; 0x8e
 802173e:	0052      	lsls	r2, r2, #1
 8021740:	18bb      	adds	r3, r7, r2
 8021742:	681b      	ldr	r3, [r3, #0]
 8021744:	781b      	ldrb	r3, [r3, #0]
 8021746:	b299      	uxth	r1, r3
 8021748:	18bb      	adds	r3, r7, r2
 802174a:	681b      	ldr	r3, [r3, #0]
 802174c:	3301      	adds	r3, #1
 802174e:	781b      	ldrb	r3, [r3, #0]
 8021750:	b29b      	uxth	r3, r3
 8021752:	021b      	lsls	r3, r3, #8
 8021754:	b29a      	uxth	r2, r3
 8021756:	4b14      	ldr	r3, [pc, #80]	; (80217a8 <Send_DpmConfigSetCnf+0x608>)
 8021758:	20a8      	movs	r0, #168	; 0xa8
 802175a:	0040      	lsls	r0, r0, #1
 802175c:	181b      	adds	r3, r3, r0
 802175e:	19db      	adds	r3, r3, r7
 8021760:	781b      	ldrb	r3, [r3, #0]
 8021762:	188a      	adds	r2, r1, r2
 8021764:	b291      	uxth	r1, r2
 8021766:	4a13      	ldr	r2, [pc, #76]	; (80217b4 <Send_DpmConfigSetCnf+0x614>)
 8021768:	00db      	lsls	r3, r3, #3
 802176a:	18d3      	adds	r3, r2, r3
 802176c:	3306      	adds	r3, #6
 802176e:	1c0a      	adds	r2, r1, #0
 8021770:	801a      	strh	r2, [r3, #0]
        break;
 8021772:	e03c      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
        DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = USBPD_LE16(&value[0]);
        break;
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
        /* MeasurementReporting */
        GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 8021774:	238e      	movs	r3, #142	; 0x8e
 8021776:	005b      	lsls	r3, r3, #1
 8021778:	18fb      	adds	r3, r7, r3
 802177a:	681b      	ldr	r3, [r3, #0]
 802177c:	4a0a      	ldr	r2, [pc, #40]	; (80217a8 <Send_DpmConfigSetCnf+0x608>)
 802177e:	21a8      	movs	r1, #168	; 0xa8
 8021780:	0049      	lsls	r1, r1, #1
 8021782:	1852      	adds	r2, r2, r1
 8021784:	19d2      	adds	r2, r2, r7
 8021786:	7812      	ldrb	r2, [r2, #0]
 8021788:	7818      	ldrb	r0, [r3, #0]
 802178a:	490b      	ldr	r1, [pc, #44]	; (80217b8 <Send_DpmConfigSetCnf+0x618>)
 802178c:	0013      	movs	r3, r2
 802178e:	005b      	lsls	r3, r3, #1
 8021790:	189b      	adds	r3, r3, r2
 8021792:	005b      	lsls	r3, r3, #1
 8021794:	18cb      	adds	r3, r1, r3
 8021796:	3304      	adds	r3, #4
 8021798:	1c02      	adds	r2, r0, #0
 802179a:	701a      	strb	r2, [r3, #0]
        break;
 802179c:	e027      	b.n	80217ee <Send_DpmConfigSetCnf+0x64e>
 802179e:	46c0      	nop			; (mov r8, r8)
 80217a0:	20000180 	.word	0x20000180
 80217a4:	2000017c 	.word	0x2000017c
 80217a8:	fffffebf 	.word	0xfffffebf
 80217ac:	20000108 	.word	0x20000108
 80217b0:	200000f4 	.word	0x200000f4
 80217b4:	20000100 	.word	0x20000100
 80217b8:	20004974 	.word	0x20004974
        (void)memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
        break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default :
        error = (uint8_t)GUI_REJ_DPM_REJECT;
 80217bc:	231a      	movs	r3, #26
 80217be:	33ff      	adds	r3, #255	; 0xff
 80217c0:	18fb      	adds	r3, r7, r3
 80217c2:	2200      	movs	r2, #0
 80217c4:	701a      	strb	r2, [r3, #0]
        param_not_applicated[counter_param_not_applicated] = tag;
 80217c6:	204e      	movs	r0, #78	; 0x4e
 80217c8:	30ff      	adds	r0, #255	; 0xff
 80217ca:	183b      	adds	r3, r7, r0
 80217cc:	781b      	ldrb	r3, [r3, #0]
 80217ce:	4a90      	ldr	r2, [pc, #576]	; (8021a10 <Send_DpmConfigSetCnf+0x870>)
 80217d0:	24a8      	movs	r4, #168	; 0xa8
 80217d2:	0064      	lsls	r4, r4, #1
 80217d4:	1912      	adds	r2, r2, r4
 80217d6:	19d2      	adds	r2, r2, r7
 80217d8:	7811      	ldrb	r1, [r2, #0]
 80217da:	4a8e      	ldr	r2, [pc, #568]	; (8021a14 <Send_DpmConfigSetCnf+0x874>)
 80217dc:	1912      	adds	r2, r2, r4
 80217de:	19d2      	adds	r2, r2, r7
 80217e0:	54d1      	strb	r1, [r2, r3]
        counter_param_not_applicated++;
 80217e2:	183b      	adds	r3, r7, r0
 80217e4:	781a      	ldrb	r2, [r3, #0]
 80217e6:	183b      	adds	r3, r7, r0
 80217e8:	3201      	adds	r2, #1
 80217ea:	701a      	strb	r2, [r3, #0]
        break;
 80217ec:	46c0      	nop			; (mov r8, r8)
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 80217ee:	238e      	movs	r3, #142	; 0x8e
 80217f0:	005b      	lsls	r3, r3, #1
 80217f2:	18fb      	adds	r3, r7, r3
 80217f4:	228d      	movs	r2, #141	; 0x8d
 80217f6:	0052      	lsls	r2, r2, #1
 80217f8:	18ba      	adds	r2, r7, r2
 80217fa:	2117      	movs	r1, #23
 80217fc:	1879      	adds	r1, r7, r1
 80217fe:	2090      	movs	r0, #144	; 0x90
 8021800:	0040      	lsls	r0, r0, #1
 8021802:	1838      	adds	r0, r7, r0
 8021804:	f7fd fd3a 	bl	801f27c <TLV_get>
 8021808:	0003      	movs	r3, r0
 802180a:	2bff      	cmp	r3, #255	; 0xff
 802180c:	d000      	beq.n	8021810 <Send_DpmConfigSetCnf+0x670>
 802180e:	e508      	b.n	8021222 <Send_DpmConfigSetCnf+0x82>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1U == flag_drp)
 8021810:	23a6      	movs	r3, #166	; 0xa6
 8021812:	005b      	lsls	r3, r3, #1
 8021814:	18fb      	adds	r3, r7, r3
 8021816:	781b      	ldrb	r3, [r3, #0]
 8021818:	2b01      	cmp	r3, #1
 802181a:	d000      	beq.n	802181e <Send_DpmConfigSetCnf+0x67e>
 802181c:	e0a2      	b.n	8021964 <Send_DpmConfigSetCnf+0x7c4>
  {
    uint16_t calcul;
    if (0U == tdrp)
 802181e:	244c      	movs	r4, #76	; 0x4c
 8021820:	34ff      	adds	r4, #255	; 0xff
 8021822:	193b      	adds	r3, r7, r4
 8021824:	781b      	ldrb	r3, [r3, #0]
 8021826:	2b00      	cmp	r3, #0
 8021828:	d11c      	bne.n	8021864 <Send_DpmConfigSetCnf+0x6c4>
    {
      tdrp = (uint8_t)(DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 802182a:	4b7b      	ldr	r3, [pc, #492]	; (8021a18 <Send_DpmConfigSetCnf+0x878>)
 802182c:	20a8      	movs	r0, #168	; 0xa8
 802182e:	0040      	lsls	r0, r0, #1
 8021830:	181b      	adds	r3, r3, r0
 8021832:	19db      	adds	r3, r3, r7
 8021834:	781a      	ldrb	r2, [r3, #0]
 8021836:	4979      	ldr	r1, [pc, #484]	; (8021a1c <Send_DpmConfigSetCnf+0x87c>)
 8021838:	0013      	movs	r3, r2
 802183a:	005b      	lsls	r3, r3, #1
 802183c:	189b      	adds	r3, r3, r2
 802183e:	009b      	lsls	r3, r3, #2
 8021840:	18cb      	adds	r3, r1, r3
 8021842:	3306      	adds	r3, #6
 8021844:	7819      	ldrb	r1, [r3, #0]
 8021846:	4b74      	ldr	r3, [pc, #464]	; (8021a18 <Send_DpmConfigSetCnf+0x878>)
 8021848:	181b      	adds	r3, r3, r0
 802184a:	19db      	adds	r3, r3, r7
 802184c:	781a      	ldrb	r2, [r3, #0]
 802184e:	4873      	ldr	r0, [pc, #460]	; (8021a1c <Send_DpmConfigSetCnf+0x87c>)
 8021850:	0013      	movs	r3, r2
 8021852:	005b      	lsls	r3, r3, #1
 8021854:	189b      	adds	r3, r3, r2
 8021856:	009b      	lsls	r3, r3, #2
 8021858:	18c3      	adds	r3, r0, r3
 802185a:	3307      	adds	r3, #7
 802185c:	781a      	ldrb	r2, [r3, #0]
 802185e:	193b      	adds	r3, r7, r4
 8021860:	188a      	adds	r2, r1, r2
 8021862:	701a      	strb	r2, [r3, #0]
    }
    if (0U == dcdrp)
 8021864:	26a7      	movs	r6, #167	; 0xa7
 8021866:	0076      	lsls	r6, r6, #1
 8021868:	19bb      	adds	r3, r7, r6
 802186a:	881b      	ldrh	r3, [r3, #0]
 802186c:	2b00      	cmp	r3, #0
 802186e:	d133      	bne.n	80218d8 <Send_DpmConfigSetCnf+0x738>
    {
      dcdrp = (uint16_t)
              ((DPM_Settings[PortNum].CAD_SRCToggleTime * 100U)
 8021870:	4b69      	ldr	r3, [pc, #420]	; (8021a18 <Send_DpmConfigSetCnf+0x878>)
 8021872:	24a8      	movs	r4, #168	; 0xa8
 8021874:	0064      	lsls	r4, r4, #1
 8021876:	191b      	adds	r3, r3, r4
 8021878:	19db      	adds	r3, r3, r7
 802187a:	781a      	ldrb	r2, [r3, #0]
 802187c:	4967      	ldr	r1, [pc, #412]	; (8021a1c <Send_DpmConfigSetCnf+0x87c>)
 802187e:	0013      	movs	r3, r2
 8021880:	005b      	lsls	r3, r3, #1
 8021882:	189b      	adds	r3, r3, r2
 8021884:	009b      	lsls	r3, r3, #2
 8021886:	18cb      	adds	r3, r1, r3
 8021888:	3307      	adds	r3, #7
 802188a:	781b      	ldrb	r3, [r3, #0]
 802188c:	001a      	movs	r2, r3
 802188e:	2364      	movs	r3, #100	; 0x64
 8021890:	4353      	muls	r3, r2
 8021892:	0018      	movs	r0, r3
               / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime));
 8021894:	4b60      	ldr	r3, [pc, #384]	; (8021a18 <Send_DpmConfigSetCnf+0x878>)
 8021896:	0025      	movs	r5, r4
 8021898:	191b      	adds	r3, r3, r4
 802189a:	19db      	adds	r3, r3, r7
 802189c:	781a      	ldrb	r2, [r3, #0]
 802189e:	495f      	ldr	r1, [pc, #380]	; (8021a1c <Send_DpmConfigSetCnf+0x87c>)
 80218a0:	0013      	movs	r3, r2
 80218a2:	005b      	lsls	r3, r3, #1
 80218a4:	189b      	adds	r3, r3, r2
 80218a6:	009b      	lsls	r3, r3, #2
 80218a8:	18cb      	adds	r3, r1, r3
 80218aa:	3306      	adds	r3, #6
 80218ac:	781b      	ldrb	r3, [r3, #0]
 80218ae:	001c      	movs	r4, r3
 80218b0:	4b59      	ldr	r3, [pc, #356]	; (8021a18 <Send_DpmConfigSetCnf+0x878>)
 80218b2:	195b      	adds	r3, r3, r5
 80218b4:	19db      	adds	r3, r3, r7
 80218b6:	781a      	ldrb	r2, [r3, #0]
 80218b8:	4958      	ldr	r1, [pc, #352]	; (8021a1c <Send_DpmConfigSetCnf+0x87c>)
 80218ba:	0013      	movs	r3, r2
 80218bc:	005b      	lsls	r3, r3, #1
 80218be:	189b      	adds	r3, r3, r2
 80218c0:	009b      	lsls	r3, r3, #2
 80218c2:	18cb      	adds	r3, r1, r3
 80218c4:	3307      	adds	r3, #7
 80218c6:	781b      	ldrb	r3, [r3, #0]
 80218c8:	18e3      	adds	r3, r4, r3
 80218ca:	0019      	movs	r1, r3
 80218cc:	f7e4 fc90 	bl	80061f0 <__udivsi3>
 80218d0:	0003      	movs	r3, r0
 80218d2:	001a      	movs	r2, r3
      dcdrp = (uint16_t)
 80218d4:	19bb      	adds	r3, r7, r6
 80218d6:	801a      	strh	r2, [r3, #0]
    }
    calcul = (tdrp * dcdrp) / 100U;
 80218d8:	254c      	movs	r5, #76	; 0x4c
 80218da:	35ff      	adds	r5, #255	; 0xff
 80218dc:	197b      	adds	r3, r7, r5
 80218de:	781b      	ldrb	r3, [r3, #0]
 80218e0:	26a7      	movs	r6, #167	; 0xa7
 80218e2:	0076      	lsls	r6, r6, #1
 80218e4:	19ba      	adds	r2, r7, r6
 80218e6:	8812      	ldrh	r2, [r2, #0]
 80218e8:	4353      	muls	r3, r2
 80218ea:	2164      	movs	r1, #100	; 0x64
 80218ec:	0018      	movs	r0, r3
 80218ee:	f7e4 fc7f 	bl	80061f0 <__udivsi3>
 80218f2:	0003      	movs	r3, r0
 80218f4:	001a      	movs	r2, r3
 80218f6:	249d      	movs	r4, #157	; 0x9d
 80218f8:	0064      	lsls	r4, r4, #1
 80218fa:	193b      	adds	r3, r7, r4
 80218fc:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 80218fe:	4b46      	ldr	r3, [pc, #280]	; (8021a18 <Send_DpmConfigSetCnf+0x878>)
 8021900:	22a8      	movs	r2, #168	; 0xa8
 8021902:	0052      	lsls	r2, r2, #1
 8021904:	189b      	adds	r3, r3, r2
 8021906:	19db      	adds	r3, r3, r7
 8021908:	781a      	ldrb	r2, [r3, #0]
 802190a:	193b      	adds	r3, r7, r4
 802190c:	881b      	ldrh	r3, [r3, #0]
 802190e:	b2d8      	uxtb	r0, r3
 8021910:	4942      	ldr	r1, [pc, #264]	; (8021a1c <Send_DpmConfigSetCnf+0x87c>)
 8021912:	0013      	movs	r3, r2
 8021914:	005b      	lsls	r3, r3, #1
 8021916:	189b      	adds	r3, r3, r2
 8021918:	009b      	lsls	r3, r3, #2
 802191a:	18cb      	adds	r3, r1, r3
 802191c:	3307      	adds	r3, #7
 802191e:	1c02      	adds	r2, r0, #0
 8021920:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100U - dcdrp) / 100U;
 8021922:	197b      	adds	r3, r7, r5
 8021924:	781b      	ldrb	r3, [r3, #0]
 8021926:	19ba      	adds	r2, r7, r6
 8021928:	8812      	ldrh	r2, [r2, #0]
 802192a:	2164      	movs	r1, #100	; 0x64
 802192c:	1a8a      	subs	r2, r1, r2
 802192e:	4353      	muls	r3, r2
 8021930:	2164      	movs	r1, #100	; 0x64
 8021932:	0018      	movs	r0, r3
 8021934:	f7e4 fc5c 	bl	80061f0 <__udivsi3>
 8021938:	0003      	movs	r3, r0
 802193a:	001a      	movs	r2, r3
 802193c:	193b      	adds	r3, r7, r4
 802193e:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 8021940:	4b35      	ldr	r3, [pc, #212]	; (8021a18 <Send_DpmConfigSetCnf+0x878>)
 8021942:	22a8      	movs	r2, #168	; 0xa8
 8021944:	0052      	lsls	r2, r2, #1
 8021946:	189b      	adds	r3, r3, r2
 8021948:	19db      	adds	r3, r3, r7
 802194a:	781a      	ldrb	r2, [r3, #0]
 802194c:	193b      	adds	r3, r7, r4
 802194e:	881b      	ldrh	r3, [r3, #0]
 8021950:	b2d8      	uxtb	r0, r3
 8021952:	4932      	ldr	r1, [pc, #200]	; (8021a1c <Send_DpmConfigSetCnf+0x87c>)
 8021954:	0013      	movs	r3, r2
 8021956:	005b      	lsls	r3, r3, #1
 8021958:	189b      	adds	r3, r3, r2
 802195a:	009b      	lsls	r3, r3, #2
 802195c:	18cb      	adds	r3, r1, r3
 802195e:	3306      	adds	r3, #6
 8021960:	1c02      	adds	r2, r0, #0
 8021962:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if (error != 0xFFU)
 8021964:	241a      	movs	r4, #26
 8021966:	34ff      	adds	r4, #255	; 0xff
 8021968:	193b      	adds	r3, r7, r4
 802196a:	781b      	ldrb	r3, [r3, #0]
 802196c:	2bff      	cmp	r3, #255	; 0xff
 802196e:	d04b      	beq.n	8021a08 <Send_DpmConfigSetCnf+0x868>
  {
    TLV_deinit_encode(&send_tlv);
 8021970:	2594      	movs	r5, #148	; 0x94
 8021972:	006d      	lsls	r5, r5, #1
 8021974:	197b      	adds	r3, r7, r5
 8021976:	0018      	movs	r0, r3
 8021978:	f7fd fc42 	bl	801f200 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 802197c:	4b26      	ldr	r3, [pc, #152]	; (8021a18 <Send_DpmConfigSetCnf+0x878>)
 802197e:	22a8      	movs	r2, #168	; 0xa8
 8021980:	0052      	lsls	r2, r2, #1
 8021982:	189b      	adds	r3, r3, r2
 8021984:	19db      	adds	r3, r3, r7
 8021986:	781b      	ldrb	r3, [r3, #0]
 8021988:	3301      	adds	r3, #1
 802198a:	015b      	lsls	r3, r3, #5
 802198c:	b25b      	sxtb	r3, r3
 802198e:	2208      	movs	r2, #8
 8021990:	4313      	orrs	r3, r2
 8021992:	b25b      	sxtb	r3, r3
 8021994:	b2d9      	uxtb	r1, r3
 8021996:	687b      	ldr	r3, [r7, #4]
 8021998:	2280      	movs	r2, #128	; 0x80
 802199a:	0052      	lsls	r2, r2, #1
 802199c:	1978      	adds	r0, r7, r5
 802199e:	f7fd fa6a 	bl	801ee76 <TLV_init_encode>
    (void)TLV_addValue(&send_tlv, &error, 1);
 80219a2:	1939      	adds	r1, r7, r4
 80219a4:	197b      	adds	r3, r7, r5
 80219a6:	2201      	movs	r2, #1
 80219a8:	0018      	movs	r0, r3
 80219aa:	f7fd fb95 	bl	801f0d8 <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if (error != 0U)
 80219ae:	193b      	adds	r3, r7, r4
 80219b0:	781b      	ldrb	r3, [r3, #0]
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	d022      	beq.n	80219fc <Send_DpmConfigSetCnf+0x85c>
    {
      uint32_t index;
      for (index = 0; index < counter_param_not_applicated; index++)
 80219b6:	2300      	movs	r3, #0
 80219b8:	229e      	movs	r2, #158	; 0x9e
 80219ba:	0052      	lsls	r2, r2, #1
 80219bc:	18ba      	adds	r2, r7, r2
 80219be:	6013      	str	r3, [r2, #0]
 80219c0:	e012      	b.n	80219e8 <Send_DpmConfigSetCnf+0x848>
      {
        (void)TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 80219c2:	2318      	movs	r3, #24
 80219c4:	18fa      	adds	r2, r7, r3
 80219c6:	249e      	movs	r4, #158	; 0x9e
 80219c8:	0064      	lsls	r4, r4, #1
 80219ca:	193b      	adds	r3, r7, r4
 80219cc:	681b      	ldr	r3, [r3, #0]
 80219ce:	18d1      	adds	r1, r2, r3
 80219d0:	2394      	movs	r3, #148	; 0x94
 80219d2:	005b      	lsls	r3, r3, #1
 80219d4:	18fb      	adds	r3, r7, r3
 80219d6:	2201      	movs	r2, #1
 80219d8:	0018      	movs	r0, r3
 80219da:	f7fd fb7d 	bl	801f0d8 <TLV_addValue>
      for (index = 0; index < counter_param_not_applicated; index++)
 80219de:	193b      	adds	r3, r7, r4
 80219e0:	681b      	ldr	r3, [r3, #0]
 80219e2:	3301      	adds	r3, #1
 80219e4:	193a      	adds	r2, r7, r4
 80219e6:	6013      	str	r3, [r2, #0]
 80219e8:	234e      	movs	r3, #78	; 0x4e
 80219ea:	33ff      	adds	r3, #255	; 0xff
 80219ec:	18fb      	adds	r3, r7, r3
 80219ee:	781b      	ldrb	r3, [r3, #0]
 80219f0:	229e      	movs	r2, #158	; 0x9e
 80219f2:	0052      	lsls	r2, r2, #1
 80219f4:	18ba      	adds	r2, r7, r2
 80219f6:	6812      	ldr	r2, [r2, #0]
 80219f8:	429a      	cmp	r2, r3
 80219fa:	d3e2      	bcc.n	80219c2 <Send_DpmConfigSetCnf+0x822>
      }
    }
    TLV_deinit_encode(&send_tlv);
 80219fc:	2394      	movs	r3, #148	; 0x94
 80219fe:	005b      	lsls	r3, r3, #1
 8021a00:	18fb      	adds	r3, r7, r3
 8021a02:	0018      	movs	r0, r3
 8021a04:	f7fd fbfc 	bl	801f200 <TLV_deinit_encode>
  }
}
 8021a08:	46c0      	nop			; (mov r8, r8)
 8021a0a:	46bd      	mov	sp, r7
 8021a0c:	b055      	add	sp, #340	; 0x154
 8021a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a10:	fffffec7 	.word	0xfffffec7
 8021a14:	fffffec8 	.word	0xfffffec8
 8021a18:	fffffebf 	.word	0xfffffebf
 8021a1c:	200000f4 	.word	0x200000f4

08021a20 <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8021a20:	b580      	push	{r7, lr}
 8021a22:	b092      	sub	sp, #72	; 0x48
 8021a24:	af00      	add	r7, sp, #0
 8021a26:	60b9      	str	r1, [r7, #8]
 8021a28:	607a      	str	r2, [r7, #4]
 8021a2a:	210f      	movs	r1, #15
 8021a2c:	187b      	adds	r3, r7, r1
 8021a2e:	1c02      	adds	r2, r0, #0
 8021a30:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8021a32:	187b      	adds	r3, r7, r1
 8021a34:	781b      	ldrb	r3, [r3, #0]
 8021a36:	3301      	adds	r3, #1
 8021a38:	015b      	lsls	r3, r3, #5
 8021a3a:	b25b      	sxtb	r3, r3
 8021a3c:	2205      	movs	r2, #5
 8021a3e:	4313      	orrs	r3, r2
 8021a40:	b25b      	sxtb	r3, r3
 8021a42:	b2d9      	uxtb	r1, r3
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	2280      	movs	r2, #128	; 0x80
 8021a48:	0052      	lsls	r2, r2, #1
 8021a4a:	2030      	movs	r0, #48	; 0x30
 8021a4c:	1838      	adds	r0, r7, r0
 8021a4e:	f7fd fa12 	bl	801ee76 <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 8021a52:	68bb      	ldr	r3, [r7, #8]
 8021a54:	0018      	movs	r0, r3
 8021a56:	f7fd fc79 	bl	801f34c <TLV_get_string_length>
 8021a5a:	0003      	movs	r3, r0
 8021a5c:	001a      	movs	r2, r3
 8021a5e:	2344      	movs	r3, #68	; 0x44
 8021a60:	18fb      	adds	r3, r7, r3
 8021a62:	3a03      	subs	r2, #3
 8021a64:	801a      	strh	r2, [r3, #0]
  uint8_t index = 0;
 8021a66:	2347      	movs	r3, #71	; 0x47
 8021a68:	18fb      	adds	r3, r7, r3
 8021a6a:	2200      	movs	r2, #0
 8021a6c:	701a      	strb	r2, [r3, #0]

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditional breaks) */
    if (0U == length)
 8021a6e:	2344      	movs	r3, #68	; 0x44
 8021a70:	18fb      	adds	r3, r7, r3
 8021a72:	881b      	ldrh	r3, [r3, #0]
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d104      	bne.n	8021a82 <Send_DpmConfigGetCnf+0x62>
    {
      param = (uint8_t)GUI_PARAM_ALL;
 8021a78:	2346      	movs	r3, #70	; 0x46
 8021a7a:	18fb      	adds	r3, r7, r3
 8021a7c:	22ff      	movs	r2, #255	; 0xff
 8021a7e:	701a      	strb	r2, [r3, #0]
 8021a80:	e009      	b.n	8021a96 <Send_DpmConfigGetCnf+0x76>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 8021a82:	2347      	movs	r3, #71	; 0x47
 8021a84:	18fb      	adds	r3, r7, r3
 8021a86:	781b      	ldrb	r3, [r3, #0]
 8021a88:	3307      	adds	r3, #7
 8021a8a:	68ba      	ldr	r2, [r7, #8]
 8021a8c:	18d2      	adds	r2, r2, r3
 8021a8e:	2346      	movs	r3, #70	; 0x46
 8021a90:	18fb      	adds	r3, r7, r3
 8021a92:	7812      	ldrb	r2, [r2, #0]
 8021a94:	701a      	strb	r2, [r3, #0]

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch ((USBPD_GUI_Tag_Param)param)
 8021a96:	2346      	movs	r3, #70	; 0x46
 8021a98:	18fb      	adds	r3, r7, r3
 8021a9a:	781b      	ldrb	r3, [r3, #0]
 8021a9c:	2b1c      	cmp	r3, #28
 8021a9e:	dc0d      	bgt.n	8021abc <Send_DpmConfigGetCnf+0x9c>
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	da00      	bge.n	8021aa6 <Send_DpmConfigGetCnf+0x86>
 8021aa4:	e243      	b.n	8021f2e <Send_DpmConfigGetCnf+0x50e>
 8021aa6:	2b1c      	cmp	r3, #28
 8021aa8:	d900      	bls.n	8021aac <Send_DpmConfigGetCnf+0x8c>
 8021aaa:	e240      	b.n	8021f2e <Send_DpmConfigGetCnf+0x50e>
 8021aac:	009a      	lsls	r2, r3, #2
 8021aae:	4b02      	ldr	r3, [pc, #8]	; (8021ab8 <Send_DpmConfigGetCnf+0x98>)
 8021ab0:	18d3      	adds	r3, r2, r3
 8021ab2:	681b      	ldr	r3, [r3, #0]
 8021ab4:	469f      	mov	pc, r3
 8021ab6:	46c0      	nop			; (mov r8, r8)
 8021ab8:	08025500 	.word	0x08025500
 8021abc:	2bff      	cmp	r3, #255	; 0xff
 8021abe:	d000      	beq.n	8021ac2 <Send_DpmConfigGetCnf+0xa2>
 8021ac0:	e235      	b.n	8021f2e <Send_DpmConfigGetCnf+0x50e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_SupportedSOP;
 8021ac2:	230f      	movs	r3, #15
 8021ac4:	18fb      	adds	r3, r7, r3
 8021ac6:	781a      	ldrb	r2, [r3, #0]
 8021ac8:	49ed      	ldr	r1, [pc, #948]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021aca:	0013      	movs	r3, r2
 8021acc:	005b      	lsls	r3, r3, #1
 8021ace:	189b      	adds	r3, r3, r2
 8021ad0:	009b      	lsls	r3, r3, #2
 8021ad2:	585b      	ldr	r3, [r3, r1]
 8021ad4:	b2da      	uxtb	r2, r3
 8021ad6:	212f      	movs	r1, #47	; 0x2f
 8021ad8:	187b      	adds	r3, r7, r1
 8021ada:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SOP, 1, &settings);
 8021adc:	187b      	adds	r3, r7, r1
 8021ade:	2230      	movs	r2, #48	; 0x30
 8021ae0:	18b8      	adds	r0, r7, r2
 8021ae2:	2201      	movs	r2, #1
 8021ae4:	2100      	movs	r1, #0
 8021ae6:	f7fd fa29 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021aea:	2344      	movs	r3, #68	; 0x44
 8021aec:	18fb      	adds	r3, r7, r3
 8021aee:	881b      	ldrh	r3, [r3, #0]
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d000      	beq.n	8021af6 <Send_DpmConfigGetCnf+0xd6>
 8021af4:	e22e      	b.n	8021f54 <Send_DpmConfigGetCnf+0x534>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 8021af6:	230f      	movs	r3, #15
 8021af8:	18fb      	adds	r3, r7, r3
 8021afa:	781a      	ldrb	r2, [r3, #0]
 8021afc:	49e0      	ldr	r1, [pc, #896]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021afe:	2008      	movs	r0, #8
 8021b00:	0013      	movs	r3, r2
 8021b02:	005b      	lsls	r3, r3, #1
 8021b04:	189b      	adds	r3, r3, r2
 8021b06:	009b      	lsls	r3, r3, #2
 8021b08:	18cb      	adds	r3, r1, r3
 8021b0a:	181b      	adds	r3, r3, r0
 8021b0c:	781b      	ldrb	r3, [r3, #0]
 8021b0e:	079b      	lsls	r3, r3, #30
 8021b10:	0fdb      	lsrs	r3, r3, #31
 8021b12:	b2db      	uxtb	r3, r3
 8021b14:	001a      	movs	r2, r3
 8021b16:	212e      	movs	r1, #46	; 0x2e
 8021b18:	187b      	adds	r3, r7, r1
 8021b1a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_FASTROLESWAP, 1, &settings);
 8021b1c:	187b      	adds	r3, r7, r1
 8021b1e:	2230      	movs	r2, #48	; 0x30
 8021b20:	18b8      	adds	r0, r7, r2
 8021b22:	2201      	movs	r2, #1
 8021b24:	2102      	movs	r1, #2
 8021b26:	f7fd fa09 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021b2a:	2344      	movs	r3, #68	; 0x44
 8021b2c:	18fb      	adds	r3, r7, r3
 8021b2e:	881b      	ldrh	r3, [r3, #0]
 8021b30:	2b00      	cmp	r3, #0
 8021b32:	d000      	beq.n	8021b36 <Send_DpmConfigGetCnf+0x116>
 8021b34:	e210      	b.n	8021f58 <Send_DpmConfigGetCnf+0x538>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 8021b36:	230f      	movs	r3, #15
 8021b38:	18fb      	adds	r3, r7, r3
 8021b3a:	781a      	ldrb	r2, [r3, #0]
 8021b3c:	4bd1      	ldr	r3, [pc, #836]	; (8021e84 <Send_DpmConfigGetCnf+0x464>)
 8021b3e:	2174      	movs	r1, #116	; 0x74
 8021b40:	434a      	muls	r2, r1
 8021b42:	5cd3      	ldrb	r3, [r2, r3]
 8021b44:	071b      	lsls	r3, r3, #28
 8021b46:	0fdb      	lsrs	r3, r3, #31
 8021b48:	b2db      	uxtb	r3, r3
 8021b4a:	001a      	movs	r2, r3
 8021b4c:	212d      	movs	r1, #45	; 0x2d
 8021b4e:	187b      	adds	r3, r7, r1
 8021b50:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 8021b52:	187b      	adds	r3, r7, r1
 8021b54:	2230      	movs	r2, #48	; 0x30
 8021b56:	18b8      	adds	r0, r7, r2
 8021b58:	2201      	movs	r2, #1
 8021b5a:	2103      	movs	r1, #3
 8021b5c:	f7fd f9ee 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021b60:	2344      	movs	r3, #68	; 0x44
 8021b62:	18fb      	adds	r3, r7, r3
 8021b64:	881b      	ldrh	r3, [r3, #0]
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d000      	beq.n	8021b6c <Send_DpmConfigGetCnf+0x14c>
 8021b6a:	e1f7      	b.n	8021f5c <Send_DpmConfigGetCnf+0x53c>
        }
      }
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 8021b6c:	230f      	movs	r3, #15
 8021b6e:	18fb      	adds	r3, r7, r3
 8021b70:	781a      	ldrb	r2, [r3, #0]
 8021b72:	4bc4      	ldr	r3, [pc, #784]	; (8021e84 <Send_DpmConfigGetCnf+0x464>)
 8021b74:	2174      	movs	r1, #116	; 0x74
 8021b76:	434a      	muls	r2, r1
 8021b78:	5cd3      	ldrb	r3, [r2, r3]
 8021b7a:	075b      	lsls	r3, r3, #29
 8021b7c:	0fdb      	lsrs	r3, r3, #31
 8021b7e:	b2db      	uxtb	r3, r3
 8021b80:	001a      	movs	r2, r3
 8021b82:	212c      	movs	r1, #44	; 0x2c
 8021b84:	187b      	adds	r3, r7, r1
 8021b86:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 8021b88:	187b      	adds	r3, r7, r1
 8021b8a:	2230      	movs	r2, #48	; 0x30
 8021b8c:	18b8      	adds	r0, r7, r2
 8021b8e:	2201      	movs	r2, #1
 8021b90:	211c      	movs	r1, #28
 8021b92:	f7fd f9d3 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021b96:	2344      	movs	r3, #68	; 0x44
 8021b98:	18fb      	adds	r3, r7, r3
 8021b9a:	881b      	ldrh	r3, [r3, #0]
 8021b9c:	2b00      	cmp	r3, #0
 8021b9e:	d000      	beq.n	8021ba2 <Send_DpmConfigGetCnf+0x182>
 8021ba0:	e1de      	b.n	8021f60 <Send_DpmConfigGetCnf+0x540>
        }
      }
      case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_DefaultRole;
 8021ba2:	230f      	movs	r3, #15
 8021ba4:	18fb      	adds	r3, r7, r3
 8021ba6:	781a      	ldrb	r2, [r3, #0]
 8021ba8:	49b5      	ldr	r1, [pc, #724]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021baa:	0013      	movs	r3, r2
 8021bac:	005b      	lsls	r3, r3, #1
 8021bae:	189b      	adds	r3, r3, r2
 8021bb0:	009b      	lsls	r3, r3, #2
 8021bb2:	18cb      	adds	r3, r1, r3
 8021bb4:	791b      	ldrb	r3, [r3, #4]
 8021bb6:	075b      	lsls	r3, r3, #29
 8021bb8:	0fdb      	lsrs	r3, r3, #31
 8021bba:	b2db      	uxtb	r3, r3
 8021bbc:	001a      	movs	r2, r3
 8021bbe:	212b      	movs	r1, #43	; 0x2b
 8021bc0:	187b      	adds	r3, r7, r1
 8021bc2:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 8021bc4:	187b      	adds	r3, r7, r1
 8021bc6:	2230      	movs	r2, #48	; 0x30
 8021bc8:	18b8      	adds	r0, r7, r2
 8021bca:	2201      	movs	r2, #1
 8021bcc:	2104      	movs	r1, #4
 8021bce:	f7fd f9b5 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021bd2:	2344      	movs	r3, #68	; 0x44
 8021bd4:	18fb      	adds	r3, r7, r3
 8021bd6:	881b      	ldrh	r3, [r3, #0]
 8021bd8:	2b00      	cmp	r3, #0
 8021bda:	d000      	beq.n	8021bde <Send_DpmConfigGetCnf+0x1be>
 8021bdc:	e1c2      	b.n	8021f64 <Send_DpmConfigGetCnf+0x544>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RoleSwap;
 8021bde:	230f      	movs	r3, #15
 8021be0:	18fb      	adds	r3, r7, r3
 8021be2:	781a      	ldrb	r2, [r3, #0]
 8021be4:	49a6      	ldr	r1, [pc, #664]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021be6:	0013      	movs	r3, r2
 8021be8:	005b      	lsls	r3, r3, #1
 8021bea:	189b      	adds	r3, r3, r2
 8021bec:	009b      	lsls	r3, r3, #2
 8021bee:	18cb      	adds	r3, r1, r3
 8021bf0:	791b      	ldrb	r3, [r3, #4]
 8021bf2:	071b      	lsls	r3, r3, #28
 8021bf4:	0fdb      	lsrs	r3, r3, #31
 8021bf6:	b2db      	uxtb	r3, r3
 8021bf8:	001a      	movs	r2, r3
 8021bfa:	212a      	movs	r1, #42	; 0x2a
 8021bfc:	187b      	adds	r3, r7, r1
 8021bfe:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DRP_SUPPORT, 1, &settings);
 8021c00:	187b      	adds	r3, r7, r1
 8021c02:	2230      	movs	r2, #48	; 0x30
 8021c04:	18b8      	adds	r0, r7, r2
 8021c06:	2201      	movs	r2, #1
 8021c08:	2105      	movs	r1, #5
 8021c0a:	f7fd f997 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021c0e:	2344      	movs	r3, #68	; 0x44
 8021c10:	18fb      	adds	r3, r7, r3
 8021c12:	881b      	ldrh	r3, [r3, #0]
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	d000      	beq.n	8021c1a <Send_DpmConfigGetCnf+0x1fa>
 8021c18:	e1a6      	b.n	8021f68 <Send_DpmConfigGetCnf+0x548>
        }
      }
      case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].CAD_RoleToggle;
 8021c1a:	230f      	movs	r3, #15
 8021c1c:	18fb      	adds	r3, r7, r3
 8021c1e:	781a      	ldrb	r2, [r3, #0]
 8021c20:	4997      	ldr	r1, [pc, #604]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021c22:	0013      	movs	r3, r2
 8021c24:	005b      	lsls	r3, r3, #1
 8021c26:	189b      	adds	r3, r3, r2
 8021c28:	009b      	lsls	r3, r3, #2
 8021c2a:	18cb      	adds	r3, r1, r3
 8021c2c:	795b      	ldrb	r3, [r3, #5]
 8021c2e:	069b      	lsls	r3, r3, #26
 8021c30:	0fdb      	lsrs	r3, r3, #31
 8021c32:	b2db      	uxtb	r3, r3
 8021c34:	001a      	movs	r2, r3
 8021c36:	2129      	movs	r1, #41	; 0x29
 8021c38:	187b      	adds	r3, r7, r1
 8021c3a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_CADROLETOGGLE, 1, &settings);
 8021c3c:	187b      	adds	r3, r7, r1
 8021c3e:	2230      	movs	r2, #48	; 0x30
 8021c40:	18b8      	adds	r0, r7, r2
 8021c42:	2201      	movs	r2, #1
 8021c44:	2106      	movs	r1, #6
 8021c46:	f7fd f979 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021c4a:	2344      	movs	r3, #68	; 0x44
 8021c4c:	18fb      	adds	r3, r7, r3
 8021c4e:	881b      	ldrh	r3, [r3, #0]
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d000      	beq.n	8021c56 <Send_DpmConfigGetCnf+0x236>
 8021c54:	e18a      	b.n	8021f6c <Send_DpmConfigGetCnf+0x54c>
        }
      }
      case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_CapscounterSupport;
 8021c56:	230f      	movs	r3, #15
 8021c58:	18fb      	adds	r3, r7, r3
 8021c5a:	781a      	ldrb	r2, [r3, #0]
 8021c5c:	4988      	ldr	r1, [pc, #544]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021c5e:	0013      	movs	r3, r2
 8021c60:	005b      	lsls	r3, r3, #1
 8021c62:	189b      	adds	r3, r3, r2
 8021c64:	009b      	lsls	r3, r3, #2
 8021c66:	18cb      	adds	r3, r1, r3
 8021c68:	791b      	ldrb	r3, [r3, #4]
 8021c6a:	061b      	lsls	r3, r3, #24
 8021c6c:	0fdb      	lsrs	r3, r3, #31
 8021c6e:	b2db      	uxtb	r3, r3
 8021c70:	001a      	movs	r2, r3
 8021c72:	2128      	movs	r1, #40	; 0x28
 8021c74:	187b      	adds	r3, r7, r1
 8021c76:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8021c78:	187b      	adds	r3, r7, r1
 8021c7a:	2230      	movs	r2, #48	; 0x30
 8021c7c:	18b8      	adds	r0, r7, r2
 8021c7e:	2201      	movs	r2, #1
 8021c80:	2107      	movs	r1, #7
 8021c82:	f7fd f95b 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021c86:	2344      	movs	r3, #68	; 0x44
 8021c88:	18fb      	adds	r3, r7, r3
 8021c8a:	881b      	ldrh	r3, [r3, #0]
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d000      	beq.n	8021c92 <Send_DpmConfigGetCnf+0x272>
 8021c90:	e16e      	b.n	8021f70 <Send_DpmConfigGetCnf+0x550>
      }
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PingSupport;
 8021c92:	230f      	movs	r3, #15
 8021c94:	18fb      	adds	r3, r7, r3
 8021c96:	781a      	ldrb	r2, [r3, #0]
 8021c98:	4979      	ldr	r1, [pc, #484]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021c9a:	0013      	movs	r3, r2
 8021c9c:	005b      	lsls	r3, r3, #1
 8021c9e:	189b      	adds	r3, r3, r2
 8021ca0:	009b      	lsls	r3, r3, #2
 8021ca2:	18cb      	adds	r3, r1, r3
 8021ca4:	791b      	ldrb	r3, [r3, #4]
 8021ca6:	065b      	lsls	r3, r3, #25
 8021ca8:	0fdb      	lsrs	r3, r3, #31
 8021caa:	b2db      	uxtb	r3, r3
 8021cac:	001a      	movs	r2, r3
 8021cae:	2127      	movs	r1, #39	; 0x27
 8021cb0:	187b      	adds	r3, r7, r1
 8021cb2:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PING_SUPPORT, 1, &settings);
 8021cb4:	187b      	adds	r3, r7, r1
 8021cb6:	2230      	movs	r2, #48	; 0x30
 8021cb8:	18b8      	adds	r0, r7, r2
 8021cba:	2201      	movs	r2, #1
 8021cbc:	210a      	movs	r1, #10
 8021cbe:	f7fd f93d 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021cc2:	2344      	movs	r3, #68	; 0x44
 8021cc4:	18fb      	adds	r3, r7, r3
 8021cc6:	881b      	ldrh	r3, [r3, #0]
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	d000      	beq.n	8021cce <Send_DpmConfigGetCnf+0x2ae>
 8021ccc:	e152      	b.n	8021f74 <Send_DpmConfigGetCnf+0x554>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = (uint16_t)DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 8021cce:	230f      	movs	r3, #15
 8021cd0:	18fb      	adds	r3, r7, r3
 8021cd2:	781a      	ldrb	r2, [r3, #0]
 8021cd4:	496a      	ldr	r1, [pc, #424]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021cd6:	0013      	movs	r3, r2
 8021cd8:	005b      	lsls	r3, r3, #1
 8021cda:	189b      	adds	r3, r3, r2
 8021cdc:	009b      	lsls	r3, r3, #2
 8021cde:	18cb      	adds	r3, r1, r3
 8021ce0:	3308      	adds	r3, #8
 8021ce2:	881a      	ldrh	r2, [r3, #0]
 8021ce4:	2124      	movs	r1, #36	; 0x24
 8021ce6:	187b      	adds	r3, r7, r1
 8021ce8:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PPS_SUPPORT, 2, (uint8_t *)&settings);
 8021cea:	187b      	adds	r3, r7, r1
 8021cec:	2230      	movs	r2, #48	; 0x30
 8021cee:	18b8      	adds	r0, r7, r2
 8021cf0:	2202      	movs	r2, #2
 8021cf2:	210b      	movs	r1, #11
 8021cf4:	f7fd f922 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021cf8:	2344      	movs	r3, #68	; 0x44
 8021cfa:	18fb      	adds	r3, r7, r3
 8021cfc:	881b      	ldrh	r3, [r3, #0]
 8021cfe:	2b00      	cmp	r3, #0
 8021d00:	d000      	beq.n	8021d04 <Send_DpmConfigGetCnf+0x2e4>
 8021d02:	e139      	b.n	8021f78 <Send_DpmConfigGetCnf+0x558>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_VconnSwap;
 8021d04:	230f      	movs	r3, #15
 8021d06:	18fb      	adds	r3, r7, r3
 8021d08:	781a      	ldrb	r2, [r3, #0]
 8021d0a:	4b5e      	ldr	r3, [pc, #376]	; (8021e84 <Send_DpmConfigGetCnf+0x464>)
 8021d0c:	2174      	movs	r1, #116	; 0x74
 8021d0e:	434a      	muls	r2, r1
 8021d10:	5cd3      	ldrb	r3, [r2, r3]
 8021d12:	079b      	lsls	r3, r3, #30
 8021d14:	0fdb      	lsrs	r3, r3, #31
 8021d16:	b2db      	uxtb	r3, r3
 8021d18:	001a      	movs	r2, r3
 8021d1a:	2123      	movs	r1, #35	; 0x23
 8021d1c:	187b      	adds	r3, r7, r1
 8021d1e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_VCONNSWAP, 1, &settings);
 8021d20:	187b      	adds	r3, r7, r1
 8021d22:	2230      	movs	r2, #48	; 0x30
 8021d24:	18b8      	adds	r0, r7, r2
 8021d26:	2201      	movs	r2, #1
 8021d28:	2108      	movs	r1, #8
 8021d2a:	f7fd f907 	bl	801ef3c <TLV_add>
        if (0U != length)
 8021d2e:	2344      	movs	r3, #68	; 0x44
 8021d30:	18fb      	adds	r3, r7, r3
 8021d32:	881b      	ldrh	r3, [r3, #0]
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	d000      	beq.n	8021d3a <Send_DpmConfigGetCnf+0x31a>
 8021d38:	e120      	b.n	8021f7c <Send_DpmConfigGetCnf+0x55c>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[0];
 8021d3a:	2143      	movs	r1, #67	; 0x43
 8021d3c:	187b      	adds	r3, r7, r1
 8021d3e:	4a52      	ldr	r2, [pc, #328]	; (8021e88 <Send_DpmConfigGetCnf+0x468>)
 8021d40:	7812      	ldrb	r2, [r2, #0]
 8021d42:	701a      	strb	r2, [r3, #0]
          list_pdo  = (uint8_t *)PORT0_PDO_ListSNK;
 8021d44:	4b51      	ldr	r3, [pc, #324]	; (8021e8c <Send_DpmConfigGetCnf+0x46c>)
 8021d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[2];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSNK;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SNK_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 8021d48:	187b      	adds	r3, r7, r1
 8021d4a:	781b      	ldrb	r3, [r3, #0]
 8021d4c:	b29b      	uxth	r3, r3
 8021d4e:	009b      	lsls	r3, r3, #2
 8021d50:	b29a      	uxth	r2, r3
 8021d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021d54:	2130      	movs	r1, #48	; 0x30
 8021d56:	1878      	adds	r0, r7, r1
 8021d58:	210c      	movs	r1, #12
 8021d5a:	f7fd f8ef 	bl	801ef3c <TLV_add>
      }
      if (0U != length)
 8021d5e:	2344      	movs	r3, #68	; 0x44
 8021d60:	18fb      	adds	r3, r7, r3
 8021d62:	881b      	ldrh	r3, [r3, #0]
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d000      	beq.n	8021d6a <Send_DpmConfigGetCnf+0x34a>
 8021d68:	e10a      	b.n	8021f80 <Send_DpmConfigGetCnf+0x560>
      }
#endif /* _SRC || _DRP */
      case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_tDRP;
 8021d6a:	230f      	movs	r3, #15
 8021d6c:	18fb      	adds	r3, r7, r3
 8021d6e:	781b      	ldrb	r3, [r3, #0]
 8021d70:	4a44      	ldr	r2, [pc, #272]	; (8021e84 <Send_DpmConfigGetCnf+0x464>)
 8021d72:	2168      	movs	r1, #104	; 0x68
 8021d74:	2074      	movs	r0, #116	; 0x74
 8021d76:	4343      	muls	r3, r0
 8021d78:	18d3      	adds	r3, r2, r3
 8021d7a:	185b      	adds	r3, r3, r1
 8021d7c:	791b      	ldrb	r3, [r3, #4]
 8021d7e:	061b      	lsls	r3, r3, #24
 8021d80:	0e5b      	lsrs	r3, r3, #25
 8021d82:	b2db      	uxtb	r3, r3
 8021d84:	001a      	movs	r2, r3
 8021d86:	2122      	movs	r1, #34	; 0x22
 8021d88:	187b      	adds	r3, r7, r1
 8021d8a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_TDRP, 1, &value);
 8021d8c:	187b      	adds	r3, r7, r1
 8021d8e:	2230      	movs	r2, #48	; 0x30
 8021d90:	18b8      	adds	r0, r7, r2
 8021d92:	2201      	movs	r2, #1
 8021d94:	210e      	movs	r1, #14
 8021d96:	f7fd f8d1 	bl	801ef3c <TLV_add>
      }
      if (0U != length)
 8021d9a:	2344      	movs	r3, #68	; 0x44
 8021d9c:	18fb      	adds	r3, r7, r3
 8021d9e:	881b      	ldrh	r3, [r3, #0]
 8021da0:	2b00      	cmp	r3, #0
 8021da2:	d000      	beq.n	8021da6 <Send_DpmConfigGetCnf+0x386>
 8021da4:	e0ee      	b.n	8021f84 <Send_DpmConfigGetCnf+0x564>
        break;
      }
      case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 8021da6:	230f      	movs	r3, #15
 8021da8:	18fb      	adds	r3, r7, r3
 8021daa:	781b      	ldrb	r3, [r3, #0]
 8021dac:	4a35      	ldr	r2, [pc, #212]	; (8021e84 <Send_DpmConfigGetCnf+0x464>)
 8021dae:	2168      	movs	r1, #104	; 0x68
 8021db0:	2074      	movs	r0, #116	; 0x74
 8021db2:	4343      	muls	r3, r0
 8021db4:	18d3      	adds	r3, r2, r3
 8021db6:	185b      	adds	r3, r3, r1
 8021db8:	795b      	ldrb	r3, [r3, #5]
 8021dba:	065b      	lsls	r3, r3, #25
 8021dbc:	0e5b      	lsrs	r3, r3, #25
 8021dbe:	b2db      	uxtb	r3, r3
 8021dc0:	001a      	movs	r2, r3
 8021dc2:	2121      	movs	r1, #33	; 0x21
 8021dc4:	187b      	adds	r3, r7, r1
 8021dc6:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DCSRC_DRP, 1, &value);
 8021dc8:	187b      	adds	r3, r7, r1
 8021dca:	2230      	movs	r2, #48	; 0x30
 8021dcc:	18b8      	adds	r0, r7, r2
 8021dce:	2201      	movs	r2, #1
 8021dd0:	210f      	movs	r1, #15
 8021dd2:	f7fd f8b3 	bl	801ef3c <TLV_add>
      }
      if (0U != length)
 8021dd6:	2344      	movs	r3, #68	; 0x44
 8021dd8:	18fb      	adds	r3, r7, r3
 8021dda:	881b      	ldrh	r3, [r3, #0]
 8021ddc:	2b00      	cmp	r3, #0
 8021dde:	d000      	beq.n	8021de2 <Send_DpmConfigGetCnf+0x3c2>
 8021de0:	e0d2      	b.n	8021f88 <Send_DpmConfigGetCnf+0x568>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 8021de2:	230f      	movs	r3, #15
 8021de4:	18fb      	adds	r3, r7, r3
 8021de6:	781a      	ldrb	r2, [r3, #0]
 8021de8:	4925      	ldr	r1, [pc, #148]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021dea:	0013      	movs	r3, r2
 8021dec:	005b      	lsls	r3, r3, #1
 8021dee:	189b      	adds	r3, r3, r2
 8021df0:	009b      	lsls	r3, r3, #2
 8021df2:	18cb      	adds	r3, r1, r3
 8021df4:	795b      	ldrb	r3, [r3, #5]
 8021df6:	07db      	lsls	r3, r3, #31
 8021df8:	0fdb      	lsrs	r3, r3, #31
 8021dfa:	b2db      	uxtb	r3, r3
 8021dfc:	001a      	movs	r2, r3
 8021dfe:	2120      	movs	r1, #32
 8021e00:	187b      	adds	r3, r7, r1
 8021e02:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 8021e04:	187b      	adds	r3, r7, r1
 8021e06:	2230      	movs	r2, #48	; 0x30
 8021e08:	18b8      	adds	r0, r7, r2
 8021e0a:	2201      	movs	r2, #1
 8021e0c:	2110      	movs	r1, #16
 8021e0e:	f7fd f895 	bl	801ef3c <TLV_add>
      }
      if (0U != length)
 8021e12:	2344      	movs	r3, #68	; 0x44
 8021e14:	18fb      	adds	r3, r7, r3
 8021e16:	881b      	ldrh	r3, [r3, #0]
 8021e18:	2b00      	cmp	r3, #0
 8021e1a:	d000      	beq.n	8021e1e <Send_DpmConfigGetCnf+0x3fe>
 8021e1c:	e0b6      	b.n	8021f8c <Send_DpmConfigGetCnf+0x56c>
      {
        break;
      }
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 8021e1e:	230f      	movs	r3, #15
 8021e20:	18fb      	adds	r3, r7, r3
 8021e22:	781a      	ldrb	r2, [r3, #0]
 8021e24:	4916      	ldr	r1, [pc, #88]	; (8021e80 <Send_DpmConfigGetCnf+0x460>)
 8021e26:	0013      	movs	r3, r2
 8021e28:	005b      	lsls	r3, r3, #1
 8021e2a:	189b      	adds	r3, r3, r2
 8021e2c:	009b      	lsls	r3, r3, #2
 8021e2e:	18cb      	adds	r3, r1, r3
 8021e30:	795b      	ldrb	r3, [r3, #5]
 8021e32:	079b      	lsls	r3, r3, #30
 8021e34:	0fdb      	lsrs	r3, r3, #31
 8021e36:	b2db      	uxtb	r3, r3
 8021e38:	001a      	movs	r2, r3
 8021e3a:	211f      	movs	r1, #31
 8021e3c:	187b      	adds	r3, r7, r1
 8021e3e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 8021e40:	187b      	adds	r3, r7, r1
 8021e42:	2230      	movs	r2, #48	; 0x30
 8021e44:	18b8      	adds	r0, r7, r2
 8021e46:	2201      	movs	r2, #1
 8021e48:	2111      	movs	r1, #17
 8021e4a:	f7fd f877 	bl	801ef3c <TLV_add>
      }
      if (0U != length)
 8021e4e:	2344      	movs	r3, #68	; 0x44
 8021e50:	18fb      	adds	r3, r7, r3
 8021e52:	881b      	ldrh	r3, [r3, #0]
 8021e54:	2b00      	cmp	r3, #0
 8021e56:	d000      	beq.n	8021e5a <Send_DpmConfigGetCnf+0x43a>
 8021e58:	e09a      	b.n	8021f90 <Send_DpmConfigGetCnf+0x570>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 8021e5a:	230f      	movs	r3, #15
 8021e5c:	18fb      	adds	r3, r7, r3
 8021e5e:	781a      	ldrb	r2, [r3, #0]
 8021e60:	4b0b      	ldr	r3, [pc, #44]	; (8021e90 <Send_DpmConfigGetCnf+0x470>)
 8021e62:	00d2      	lsls	r2, r2, #3
 8021e64:	58d3      	ldr	r3, [r2, r3]
 8021e66:	61bb      	str	r3, [r7, #24]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_XID_SOP, 4, (uint8_t *)&value);
 8021e68:	2318      	movs	r3, #24
 8021e6a:	18fb      	adds	r3, r7, r3
 8021e6c:	2230      	movs	r2, #48	; 0x30
 8021e6e:	18b8      	adds	r0, r7, r2
 8021e70:	2204      	movs	r2, #4
 8021e72:	2112      	movs	r1, #18
 8021e74:	f7fd f862 	bl	801ef3c <TLV_add>
      }
      if (0U != length)
 8021e78:	2344      	movs	r3, #68	; 0x44
 8021e7a:	18fb      	adds	r3, r7, r3
 8021e7c:	e00a      	b.n	8021e94 <Send_DpmConfigGetCnf+0x474>
 8021e7e:	46c0      	nop			; (mov r8, r8)
 8021e80:	200000f4 	.word	0x200000f4
 8021e84:	20000108 	.word	0x20000108
 8021e88:	2000017c 	.word	0x2000017c
 8021e8c:	20000180 	.word	0x20000180
 8021e90:	20000100 	.word	0x20000100
 8021e94:	881b      	ldrh	r3, [r3, #0]
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d000      	beq.n	8021e9c <Send_DpmConfigGetCnf+0x47c>
 8021e9a:	e07b      	b.n	8021f94 <Send_DpmConfigGetCnf+0x574>
      {
        break;
      }
      case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].VID;
 8021e9c:	230f      	movs	r3, #15
 8021e9e:	18fb      	adds	r3, r7, r3
 8021ea0:	781b      	ldrb	r3, [r3, #0]
 8021ea2:	4a4d      	ldr	r2, [pc, #308]	; (8021fd8 <Send_DpmConfigGetCnf+0x5b8>)
 8021ea4:	00db      	lsls	r3, r3, #3
 8021ea6:	18d3      	adds	r3, r2, r3
 8021ea8:	3304      	adds	r3, #4
 8021eaa:	881a      	ldrh	r2, [r3, #0]
 8021eac:	2116      	movs	r1, #22
 8021eae:	187b      	adds	r3, r7, r1
 8021eb0:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_USB_VID_SOP, 2, (uint8_t *)&value);
 8021eb2:	187b      	adds	r3, r7, r1
 8021eb4:	2230      	movs	r2, #48	; 0x30
 8021eb6:	18b8      	adds	r0, r7, r2
 8021eb8:	2202      	movs	r2, #2
 8021eba:	2117      	movs	r1, #23
 8021ebc:	f7fd f83e 	bl	801ef3c <TLV_add>
      }
      if (0U != length)
 8021ec0:	2344      	movs	r3, #68	; 0x44
 8021ec2:	18fb      	adds	r3, r7, r3
 8021ec4:	881b      	ldrh	r3, [r3, #0]
 8021ec6:	2b00      	cmp	r3, #0
 8021ec8:	d000      	beq.n	8021ecc <Send_DpmConfigGetCnf+0x4ac>
 8021eca:	e065      	b.n	8021f98 <Send_DpmConfigGetCnf+0x578>
      {
        break;
      }
      case GUI_PARAM_PID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].PID;
 8021ecc:	230f      	movs	r3, #15
 8021ece:	18fb      	adds	r3, r7, r3
 8021ed0:	781b      	ldrb	r3, [r3, #0]
 8021ed2:	4a41      	ldr	r2, [pc, #260]	; (8021fd8 <Send_DpmConfigGetCnf+0x5b8>)
 8021ed4:	00db      	lsls	r3, r3, #3
 8021ed6:	18d3      	adds	r3, r2, r3
 8021ed8:	3306      	adds	r3, #6
 8021eda:	881a      	ldrh	r2, [r3, #0]
 8021edc:	2114      	movs	r1, #20
 8021ede:	187b      	adds	r3, r7, r1
 8021ee0:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PID_SOP, 2, (uint8_t *)&value);
 8021ee2:	187b      	adds	r3, r7, r1
 8021ee4:	2230      	movs	r2, #48	; 0x30
 8021ee6:	18b8      	adds	r0, r7, r2
 8021ee8:	2202      	movs	r2, #2
 8021eea:	2118      	movs	r1, #24
 8021eec:	f7fd f826 	bl	801ef3c <TLV_add>
      }
      if (0U != length)
 8021ef0:	2344      	movs	r3, #68	; 0x44
 8021ef2:	18fb      	adds	r3, r7, r3
 8021ef4:	881b      	ldrh	r3, [r3, #0]
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d150      	bne.n	8021f9c <Send_DpmConfigGetCnf+0x57c>
        break;
      }
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = (uint8_t)GUI_USER_Params[PortNum].u.MeasurementReporting;
 8021efa:	230f      	movs	r3, #15
 8021efc:	18fb      	adds	r3, r7, r3
 8021efe:	781a      	ldrb	r2, [r3, #0]
 8021f00:	4936      	ldr	r1, [pc, #216]	; (8021fdc <Send_DpmConfigGetCnf+0x5bc>)
 8021f02:	0013      	movs	r3, r2
 8021f04:	005b      	lsls	r3, r3, #1
 8021f06:	189b      	adds	r3, r3, r2
 8021f08:	005b      	lsls	r3, r3, #1
 8021f0a:	18cb      	adds	r3, r1, r3
 8021f0c:	3304      	adds	r3, #4
 8021f0e:	781a      	ldrb	r2, [r3, #0]
 8021f10:	2113      	movs	r1, #19
 8021f12:	187b      	adds	r3, r7, r1
 8021f14:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_MEASUREREPORTING, 1, &settings);
 8021f16:	187b      	adds	r3, r7, r1
 8021f18:	2230      	movs	r2, #48	; 0x30
 8021f1a:	18b8      	adds	r0, r7, r2
 8021f1c:	2201      	movs	r2, #1
 8021f1e:	211a      	movs	r1, #26
 8021f20:	f7fd f80c 	bl	801ef3c <TLV_add>
      }
      if (0U != length)
 8021f24:	2344      	movs	r3, #68	; 0x44
 8021f26:	18fb      	adds	r3, r7, r3
 8021f28:	881b      	ldrh	r3, [r3, #0]
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d138      	bne.n	8021fa0 <Send_DpmConfigGetCnf+0x580>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default:
        if (0U != length)
 8021f2e:	2344      	movs	r3, #68	; 0x44
 8021f30:	18fb      	adds	r3, r7, r3
 8021f32:	881b      	ldrh	r3, [r3, #0]
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	d035      	beq.n	8021fa4 <Send_DpmConfigGetCnf+0x584>
        {
          /* At least 1 parameter does not exist */
          TLV_deinit_encode(&send_tlv);
 8021f38:	2330      	movs	r3, #48	; 0x30
 8021f3a:	18fb      	adds	r3, r7, r3
 8021f3c:	0018      	movs	r0, r3
 8021f3e:	f7fd f95f 	bl	801f200 <TLV_deinit_encode>
          Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 8021f42:	6879      	ldr	r1, [r7, #4]
 8021f44:	230f      	movs	r3, #15
 8021f46:	18fb      	adds	r3, r7, r3
 8021f48:	781b      	ldrb	r3, [r3, #0]
 8021f4a:	2203      	movs	r2, #3
 8021f4c:	0018      	movs	r0, r3
 8021f4e:	f000 f847 	bl	8021fe0 <Send_DpmConfigGetRej>
          goto __end;
 8021f52:	e038      	b.n	8021fc6 <Send_DpmConfigGetCnf+0x5a6>
          break;
 8021f54:	46c0      	nop			; (mov r8, r8)
 8021f56:	e026      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f58:	46c0      	nop			; (mov r8, r8)
 8021f5a:	e024      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f5c:	46c0      	nop			; (mov r8, r8)
 8021f5e:	e022      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f60:	46c0      	nop			; (mov r8, r8)
 8021f62:	e020      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f64:	46c0      	nop			; (mov r8, r8)
 8021f66:	e01e      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f68:	46c0      	nop			; (mov r8, r8)
 8021f6a:	e01c      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f6c:	46c0      	nop			; (mov r8, r8)
 8021f6e:	e01a      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f70:	46c0      	nop			; (mov r8, r8)
 8021f72:	e018      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f74:	46c0      	nop			; (mov r8, r8)
 8021f76:	e016      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f78:	46c0      	nop			; (mov r8, r8)
 8021f7a:	e014      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
          break;
 8021f7c:	46c0      	nop			; (mov r8, r8)
 8021f7e:	e012      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        break;
 8021f80:	46c0      	nop			; (mov r8, r8)
 8021f82:	e010      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        break;
 8021f84:	46c0      	nop			; (mov r8, r8)
 8021f86:	e00e      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        break;
 8021f88:	46c0      	nop			; (mov r8, r8)
 8021f8a:	e00c      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        break;
 8021f8c:	46c0      	nop			; (mov r8, r8)
 8021f8e:	e00a      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        break;
 8021f90:	46c0      	nop			; (mov r8, r8)
 8021f92:	e008      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        break;
 8021f94:	46c0      	nop			; (mov r8, r8)
 8021f96:	e006      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        break;
 8021f98:	46c0      	nop			; (mov r8, r8)
 8021f9a:	e004      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        break;
 8021f9c:	46c0      	nop			; (mov r8, r8)
 8021f9e:	e002      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        break;
 8021fa0:	46c0      	nop			; (mov r8, r8)
 8021fa2:	e000      	b.n	8021fa6 <Send_DpmConfigGetCnf+0x586>
        }
        break;
 8021fa4:	46c0      	nop			; (mov r8, r8)
    }
    index++;
 8021fa6:	2147      	movs	r1, #71	; 0x47
 8021fa8:	187b      	adds	r3, r7, r1
 8021faa:	781a      	ldrb	r2, [r3, #0]
 8021fac:	187b      	adds	r3, r7, r1
 8021fae:	3201      	adds	r2, #1
 8021fb0:	701a      	strb	r2, [r3, #0]
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while (index < length);
 8021fb2:	187b      	adds	r3, r7, r1
 8021fb4:	781b      	ldrb	r3, [r3, #0]
 8021fb6:	b29b      	uxth	r3, r3
 8021fb8:	2244      	movs	r2, #68	; 0x44
 8021fba:	18ba      	adds	r2, r7, r2
 8021fbc:	8812      	ldrh	r2, [r2, #0]
 8021fbe:	429a      	cmp	r2, r3
 8021fc0:	d900      	bls.n	8021fc4 <Send_DpmConfigGetCnf+0x5a4>
 8021fc2:	e554      	b.n	8021a6e <Send_DpmConfigGetCnf+0x4e>

__end:
 8021fc4:	46c0      	nop			; (mov r8, r8)
  TLV_deinit_encode(&send_tlv);
 8021fc6:	2330      	movs	r3, #48	; 0x30
 8021fc8:	18fb      	adds	r3, r7, r3
 8021fca:	0018      	movs	r0, r3
 8021fcc:	f7fd f918 	bl	801f200 <TLV_deinit_encode>
}
 8021fd0:	46c0      	nop			; (mov r8, r8)
 8021fd2:	46bd      	mov	sp, r7
 8021fd4:	b012      	add	sp, #72	; 0x48
 8021fd6:	bd80      	pop	{r7, pc}
 8021fd8:	20000100 	.word	0x20000100
 8021fdc:	20004974 	.word	0x20004974

08021fe0 <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8021fe0:	b590      	push	{r4, r7, lr}
 8021fe2:	b087      	sub	sp, #28
 8021fe4:	af00      	add	r7, sp, #0
 8021fe6:	6039      	str	r1, [r7, #0]
 8021fe8:	0011      	movs	r1, r2
 8021fea:	1dfb      	adds	r3, r7, #7
 8021fec:	1c02      	adds	r2, r0, #0
 8021fee:	701a      	strb	r2, [r3, #0]
 8021ff0:	1dbb      	adds	r3, r7, #6
 8021ff2:	1c0a      	adds	r2, r1, #0
 8021ff4:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8021ff6:	683b      	ldr	r3, [r7, #0]
 8021ff8:	2280      	movs	r2, #128	; 0x80
 8021ffa:	0052      	lsls	r2, r2, #1
 8021ffc:	240c      	movs	r4, #12
 8021ffe:	1938      	adds	r0, r7, r4
 8022000:	2108      	movs	r1, #8
 8022002:	f7fc ff38 	bl	801ee76 <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8022006:	1dbb      	adds	r3, r7, #6
 8022008:	7819      	ldrb	r1, [r3, #0]
 802200a:	1938      	adds	r0, r7, r4
 802200c:	2300      	movs	r3, #0
 802200e:	2200      	movs	r2, #0
 8022010:	f7fc ff94 	bl	801ef3c <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8022014:	193b      	adds	r3, r7, r4
 8022016:	0018      	movs	r0, r3
 8022018:	f7fd f8f2 	bl	801f200 <TLV_deinit_encode>
}
 802201c:	46c0      	nop			; (mov r8, r8)
 802201e:	46bd      	mov	sp, r7
 8022020:	b007      	add	sp, #28
 8022022:	bd90      	pop	{r4, r7, pc}

08022024 <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8022024:	b590      	push	{r4, r7, lr}
 8022026:	b087      	sub	sp, #28
 8022028:	af00      	add	r7, sp, #0
 802202a:	6039      	str	r1, [r7, #0]
 802202c:	0011      	movs	r1, r2
 802202e:	1dfb      	adds	r3, r7, #7
 8022030:	1c02      	adds	r2, r0, #0
 8022032:	701a      	strb	r2, [r3, #0]
 8022034:	1dbb      	adds	r3, r7, #6
 8022036:	1c0a      	adds	r2, r1, #0
 8022038:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 802203a:	683b      	ldr	r3, [r7, #0]
 802203c:	2280      	movs	r2, #128	; 0x80
 802203e:	0052      	lsls	r2, r2, #1
 8022040:	240c      	movs	r4, #12
 8022042:	1938      	adds	r0, r7, r4
 8022044:	210b      	movs	r1, #11
 8022046:	f7fc ff16 	bl	801ee76 <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 802204a:	1dbb      	adds	r3, r7, #6
 802204c:	7819      	ldrb	r1, [r3, #0]
 802204e:	1938      	adds	r0, r7, r4
 8022050:	2300      	movs	r3, #0
 8022052:	2200      	movs	r2, #0
 8022054:	f7fc ff72 	bl	801ef3c <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8022058:	193b      	adds	r3, r7, r4
 802205a:	0018      	movs	r0, r3
 802205c:	f7fd f8d0 	bl	801f200 <TLV_deinit_encode>
}
 8022060:	46c0      	nop			; (mov r8, r8)
 8022062:	46bd      	mov	sp, r7
 8022064:	b007      	add	sp, #28
 8022066:	bd90      	pop	{r4, r7, pc}

08022068 <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 8022068:	b5b0      	push	{r4, r5, r7, lr}
 802206a:	b090      	sub	sp, #64	; 0x40
 802206c:	af00      	add	r7, sp, #0
 802206e:	6039      	str	r1, [r7, #0]
 8022070:	0011      	movs	r1, r2
 8022072:	1dfb      	adds	r3, r7, #7
 8022074:	1c02      	adds	r2, r0, #0
 8022076:	701a      	strb	r2, [r3, #0]
 8022078:	1dbb      	adds	r3, r7, #6
 802207a:	1c0a      	adds	r2, r1, #0
 802207c:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 802207e:	1dfb      	adds	r3, r7, #7
 8022080:	781b      	ldrb	r3, [r3, #0]
 8022082:	3301      	adds	r3, #1
 8022084:	015b      	lsls	r3, r3, #5
 8022086:	b25b      	sxtb	r3, r3
 8022088:	220f      	movs	r2, #15
 802208a:	4313      	orrs	r3, r2
 802208c:	b25b      	sxtb	r3, r3
 802208e:	b2d9      	uxtb	r1, r3
 8022090:	683b      	ldr	r3, [r7, #0]
 8022092:	2280      	movs	r2, #128	; 0x80
 8022094:	0052      	lsls	r2, r2, #1
 8022096:	2030      	movs	r0, #48	; 0x30
 8022098:	1838      	adds	r0, r7, r0
 802209a:	f7fc feec 	bl	801ee76 <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] =
 802209e:	2508      	movs	r5, #8
 80220a0:	197b      	adds	r3, r7, r5
 80220a2:	4a1e      	ldr	r2, [pc, #120]	; (802211c <Send_DpmRegisterReadCnf+0xb4>)
 80220a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80220a6:	c313      	stmia	r3!, {r0, r1, r4}
 80220a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80220aa:	c313      	stmia	r3!, {r0, r1, r4}
 80220ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80220ae:	c313      	stmia	r3!, {r0, r1, r4}
 80220b0:	8811      	ldrh	r1, [r2, #0]
 80220b2:	8019      	strh	r1, [r3, #0]
 80220b4:	7892      	ldrb	r2, [r2, #2]
 80220b6:	709a      	strb	r2, [r3, #2]
    (uint8_t)GUI_REG_TX_HEADER, (uint8_t)GUI_REG_TX_DATA, (uint8_t)GUI_REG_VBUS_VOLTAGE,
    (uint8_t)GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, (uint8_t)GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG,
    (uint8_t)GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 80220b8:	233f      	movs	r3, #63	; 0x3f
 80220ba:	18fb      	adds	r3, r7, r3
 80220bc:	2200      	movs	r2, #0
 80220be:	701a      	strb	r2, [r3, #0]

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if (param != 0xFFU)
 80220c0:	1dbb      	adds	r3, r7, #6
 80220c2:	781b      	ldrb	r3, [r3, #0]
 80220c4:	2bff      	cmp	r3, #255	; 0xff
 80220c6:	d003      	beq.n	80220d0 <Send_DpmRegisterReadCnf+0x68>
  {
    *stateMachineArray = param;
 80220c8:	197b      	adds	r3, r7, r5
 80220ca:	1dba      	adds	r2, r7, #6
 80220cc:	7812      	ldrb	r2, [r2, #0]
 80220ce:	701a      	strb	r2, [r3, #0]
  }

  do
  {
    switch (stateMachineArray[counter])
 80220d0:	233f      	movs	r3, #63	; 0x3f
 80220d2:	18fb      	adds	r3, r7, r3
 80220d4:	781b      	ldrb	r3, [r3, #0]
 80220d6:	2208      	movs	r2, #8
 80220d8:	18ba      	adds	r2, r7, r2
 80220da:	5cd3      	ldrb	r3, [r2, r3]
 80220dc:	2b80      	cmp	r3, #128	; 0x80
 80220de:	d804      	bhi.n	80220ea <Send_DpmRegisterReadCnf+0x82>
 80220e0:	009a      	lsls	r2, r3, #2
 80220e2:	4b0f      	ldr	r3, [pc, #60]	; (8022120 <Send_DpmRegisterReadCnf+0xb8>)
 80220e4:	18d3      	adds	r3, r2, r3
 80220e6:	681b      	ldr	r3, [r3, #0]
 80220e8:	469f      	mov	pc, r3
        break;
      case GUI_REG_VENDOR_DATA :

        break;
      default :
        break;
 80220ea:	46c0      	nop			; (mov r8, r8)
    }
    counter++;
 80220ec:	213f      	movs	r1, #63	; 0x3f
 80220ee:	187b      	adds	r3, r7, r1
 80220f0:	781a      	ldrb	r2, [r3, #0]
 80220f2:	187b      	adds	r3, r7, r1
 80220f4:	3201      	adds	r2, #1
 80220f6:	701a      	strb	r2, [r3, #0]
  } while ((counter < GUI_REG_NUMBER_OF_REGISTERS) && (param != 0xFFU));
 80220f8:	187b      	adds	r3, r7, r1
 80220fa:	781b      	ldrb	r3, [r3, #0]
 80220fc:	2b26      	cmp	r3, #38	; 0x26
 80220fe:	d803      	bhi.n	8022108 <Send_DpmRegisterReadCnf+0xa0>
 8022100:	1dbb      	adds	r3, r7, #6
 8022102:	781b      	ldrb	r3, [r3, #0]
 8022104:	2bff      	cmp	r3, #255	; 0xff
 8022106:	d1e3      	bne.n	80220d0 <Send_DpmRegisterReadCnf+0x68>

  TLV_deinit_encode(&ToSendTLV);
 8022108:	2330      	movs	r3, #48	; 0x30
 802210a:	18fb      	adds	r3, r7, r3
 802210c:	0018      	movs	r0, r3
 802210e:	f7fd f877 	bl	801f200 <TLV_deinit_encode>
}
 8022112:	46c0      	nop			; (mov r8, r8)
 8022114:	46bd      	mov	sp, r7
 8022116:	b010      	add	sp, #64	; 0x40
 8022118:	bdb0      	pop	{r4, r5, r7, pc}
 802211a:	46c0      	nop			; (mov r8, r8)
 802211c:	08024f20 	.word	0x08024f20
 8022120:	08025574 	.word	0x08025574

08022124 <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 8022124:	b5b0      	push	{r4, r5, r7, lr}
 8022126:	b08c      	sub	sp, #48	; 0x30
 8022128:	af00      	add	r7, sp, #0
 802212a:	60b9      	str	r1, [r7, #8]
 802212c:	607a      	str	r2, [r7, #4]
 802212e:	230f      	movs	r3, #15
 8022130:	18fb      	adds	r3, r7, r3
 8022132:	1c02      	adds	r2, r0, #0
 8022134:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t ToProcessTLV;
  (void)TLV_init_decode(&ToProcessTLV, toProcess);
 8022136:	687a      	ldr	r2, [r7, #4]
 8022138:	2428      	movs	r4, #40	; 0x28
 802213a:	193b      	adds	r3, r7, r4
 802213c:	0011      	movs	r1, r2
 802213e:	0018      	movs	r0, r3
 8022140:	f7fd f870 	bl	801f224 <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  (void)TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 8022144:	2320      	movs	r3, #32
 8022146:	18fb      	adds	r3, r7, r3
 8022148:	2224      	movs	r2, #36	; 0x24
 802214a:	18ba      	adds	r2, r7, r2
 802214c:	2527      	movs	r5, #39	; 0x27
 802214e:	1979      	adds	r1, r7, r5
 8022150:	1938      	adds	r0, r7, r4
 8022152:	f7fd f893 	bl	801f27c <TLV_get>

  switch (registerName)
 8022156:	197b      	adds	r3, r7, r5
 8022158:	781b      	ldrb	r3, [r3, #0]
 802215a:	2b80      	cmp	r3, #128	; 0x80
 802215c:	d804      	bhi.n	8022168 <Send_DpmRegisterWriteCnf+0x44>
 802215e:	009a      	lsls	r2, r3, #2
 8022160:	4b10      	ldr	r3, [pc, #64]	; (80221a4 <Send_DpmRegisterWriteCnf+0x80>)
 8022162:	18d3      	adds	r3, r2, r3
 8022164:	681b      	ldr	r3, [r3, #0]
 8022166:	469f      	mov	pc, r3
      break;
    case GUI_REG_VENDOR_DATA :

      break;
    default :
      break;
 8022168:	46c0      	nop			; (mov r8, r8)
  }
  TLV_deinit_decode(&ToProcessTLV);
 802216a:	2328      	movs	r3, #40	; 0x28
 802216c:	18fb      	adds	r3, r7, r3
 802216e:	0018      	movs	r0, r3
 8022170:	f7fd f8de 	bl	801f330 <TLV_deinit_decode>

  TLV_ToSend_Data_t ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 8022174:	230f      	movs	r3, #15
 8022176:	18fb      	adds	r3, r7, r3
 8022178:	781b      	ldrb	r3, [r3, #0]
 802217a:	3301      	adds	r3, #1
 802217c:	015b      	lsls	r3, r3, #5
 802217e:	b25b      	sxtb	r3, r3
 8022180:	2211      	movs	r2, #17
 8022182:	4313      	orrs	r3, r2
 8022184:	b25b      	sxtb	r3, r3
 8022186:	b2d9      	uxtb	r1, r3
 8022188:	68bb      	ldr	r3, [r7, #8]
 802218a:	2414      	movs	r4, #20
 802218c:	1938      	adds	r0, r7, r4
 802218e:	220c      	movs	r2, #12
 8022190:	f7fc fe71 	bl	801ee76 <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 8022194:	193b      	adds	r3, r7, r4
 8022196:	0018      	movs	r0, r3
 8022198:	f7fd f832 	bl	801f200 <TLV_deinit_encode>
}
 802219c:	46c0      	nop			; (mov r8, r8)
 802219e:	46bd      	mov	sp, r7
 80221a0:	b00c      	add	sp, #48	; 0x30
 80221a2:	bdb0      	pop	{r4, r5, r7, pc}
 80221a4:	08025778 	.word	0x08025778

080221a8 <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 80221a8:	b5b0      	push	{r4, r5, r7, lr}
 80221aa:	b084      	sub	sp, #16
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	6039      	str	r1, [r7, #0]
 80221b0:	0011      	movs	r1, r2
 80221b2:	1dfb      	adds	r3, r7, #7
 80221b4:	1c02      	adds	r2, r0, #0
 80221b6:	701a      	strb	r2, [r3, #0]
 80221b8:	1d3b      	adds	r3, r7, #4
 80221ba:	1c0a      	adds	r2, r1, #0
 80221bc:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 80221be:	250f      	movs	r5, #15
 80221c0:	197b      	adds	r3, r7, r5
 80221c2:	2210      	movs	r2, #16
 80221c4:	701a      	strb	r2, [r3, #0]

  if (NULL != pCB_FreeText)
 80221c6:	4b0b      	ldr	r3, [pc, #44]	; (80221f4 <Manage_FreeText+0x4c>)
 80221c8:	681b      	ldr	r3, [r3, #0]
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d00b      	beq.n	80221e6 <Manage_FreeText+0x3e>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 80221ce:	4b09      	ldr	r3, [pc, #36]	; (80221f4 <Manage_FreeText+0x4c>)
 80221d0:	681b      	ldr	r3, [r3, #0]
 80221d2:	1d3a      	adds	r2, r7, #4
 80221d4:	8814      	ldrh	r4, [r2, #0]
 80221d6:	6839      	ldr	r1, [r7, #0]
 80221d8:	1dfa      	adds	r2, r7, #7
 80221da:	7810      	ldrb	r0, [r2, #0]
 80221dc:	0022      	movs	r2, r4
 80221de:	4798      	blx	r3
    _status = USBPD_OK;
 80221e0:	197b      	adds	r3, r7, r5
 80221e2:	2200      	movs	r2, #0
 80221e4:	701a      	strb	r2, [r3, #0]
  }

  return _status;
 80221e6:	230f      	movs	r3, #15
 80221e8:	18fb      	adds	r3, r7, r3
 80221ea:	781b      	ldrb	r3, [r3, #0]
}
 80221ec:	0018      	movs	r0, r3
 80221ee:	46bd      	mov	sp, r7
 80221f0:	b004      	add	sp, #16
 80221f2:	bdb0      	pop	{r4, r5, r7, pc}
 80221f4:	20004b98 	.word	0x20004b98

080221f8 <UpdateSNKPowerPort0>:
/**
  * @brief  Function to update SNK PDO and power user settings on Port0
  * @retval None
  */
static void UpdateSNKPowerPort0(void)
{
 80221f8:	b580      	push	{r7, lr}
 80221fa:	b088      	sub	sp, #32
 80221fc:	af00      	add	r7, sp, #0
  USBPD_PDO_TypeDef pdo;
  uint32_t _max_power = 0;
 80221fe:	2300      	movs	r3, #0
 8022200:	61fb      	str	r3, [r7, #28]
  uint16_t _voltage;
  uint16_t _current;
  uint16_t _power;
  uint16_t _min_voltage = 0xFFFF;
 8022202:	231a      	movs	r3, #26
 8022204:	18fb      	adds	r3, r7, r3
 8022206:	2201      	movs	r2, #1
 8022208:	4252      	negs	r2, r2
 802220a:	801a      	strh	r2, [r3, #0]
  uint16_t _max_voltage = 0;
 802220c:	2318      	movs	r3, #24
 802220e:	18fb      	adds	r3, r7, r3
 8022210:	2200      	movs	r2, #0
 8022212:	801a      	strh	r2, [r3, #0]
  uint16_t _max_current = 0;
 8022214:	2316      	movs	r3, #22
 8022216:	18fb      	adds	r3, r7, r3
 8022218:	2200      	movs	r2, #0
 802221a:	801a      	strh	r2, [r3, #0]

  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 802221c:	2300      	movs	r3, #0
 802221e:	613b      	str	r3, [r7, #16]
 8022220:	e0de      	b.n	80223e0 <UpdateSNKPowerPort0+0x1e8>
  {
    pdo.d32 = PORT0_PDO_ListSNK[_index];
 8022222:	4b84      	ldr	r3, [pc, #528]	; (8022434 <UpdateSNKPowerPort0+0x23c>)
 8022224:	693a      	ldr	r2, [r7, #16]
 8022226:	0092      	lsls	r2, r2, #2
 8022228:	58d3      	ldr	r3, [r2, r3]
 802222a:	607b      	str	r3, [r7, #4]
    switch (pdo.GenericPDO.PowerObject)
 802222c:	1dfb      	adds	r3, r7, #7
 802222e:	781b      	ldrb	r3, [r3, #0]
 8022230:	061b      	lsls	r3, r3, #24
 8022232:	0f9b      	lsrs	r3, r3, #30
 8022234:	b2db      	uxtb	r3, r3
 8022236:	2b02      	cmp	r3, #2
 8022238:	d100      	bne.n	802223c <UpdateSNKPowerPort0+0x44>
 802223a:	e082      	b.n	8022342 <UpdateSNKPowerPort0+0x14a>
 802223c:	dd00      	ble.n	8022240 <UpdateSNKPowerPort0+0x48>
 802223e:	e0c5      	b.n	80223cc <UpdateSNKPowerPort0+0x1d4>
 8022240:	2b00      	cmp	r3, #0
 8022242:	d002      	beq.n	802224a <UpdateSNKPowerPort0+0x52>
 8022244:	2b01      	cmp	r3, #1
 8022246:	d03b      	beq.n	80222c0 <UpdateSNKPowerPort0+0xc8>
        _current = GUI_DECODE_50MA(pdo.SRCSNKAPDO.MaxCurrentIn50mAunits);
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
        break;
#endif /*_USBPD_REV30_SUPPORT && PPS*/
      default:
        break;
 8022248:	e0c0      	b.n	80223cc <UpdateSNKPowerPort0+0x1d4>
        _voltage = GUI_DECODE_50MV(pdo.SNKFixedPDO.VoltageIn50mVunits);
 802224a:	687b      	ldr	r3, [r7, #4]
 802224c:	031b      	lsls	r3, r3, #12
 802224e:	0d9b      	lsrs	r3, r3, #22
 8022250:	b29b      	uxth	r3, r3
 8022252:	0019      	movs	r1, r3
 8022254:	200e      	movs	r0, #14
 8022256:	183b      	adds	r3, r7, r0
 8022258:	2232      	movs	r2, #50	; 0x32
 802225a:	434a      	muls	r2, r1
 802225c:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 802225e:	0001      	movs	r1, r0
 8022260:	187a      	adds	r2, r7, r1
 8022262:	201a      	movs	r0, #26
 8022264:	183b      	adds	r3, r7, r0
 8022266:	8812      	ldrh	r2, [r2, #0]
 8022268:	881b      	ldrh	r3, [r3, #0]
 802226a:	429a      	cmp	r2, r3
 802226c:	d203      	bcs.n	8022276 <UpdateSNKPowerPort0+0x7e>
 802226e:	183b      	adds	r3, r7, r0
 8022270:	187a      	adds	r2, r7, r1
 8022272:	8812      	ldrh	r2, [r2, #0]
 8022274:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 8022276:	210e      	movs	r1, #14
 8022278:	187a      	adds	r2, r7, r1
 802227a:	2018      	movs	r0, #24
 802227c:	183b      	adds	r3, r7, r0
 802227e:	8812      	ldrh	r2, [r2, #0]
 8022280:	881b      	ldrh	r3, [r3, #0]
 8022282:	429a      	cmp	r2, r3
 8022284:	d903      	bls.n	802228e <UpdateSNKPowerPort0+0x96>
 8022286:	183b      	adds	r3, r7, r0
 8022288:	187a      	adds	r2, r7, r1
 802228a:	8812      	ldrh	r2, [r2, #0]
 802228c:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKFixedPDO.OperationalCurrentIn10mAunits);
 802228e:	1d3b      	adds	r3, r7, #4
 8022290:	881b      	ldrh	r3, [r3, #0]
 8022292:	059b      	lsls	r3, r3, #22
 8022294:	0d9b      	lsrs	r3, r3, #22
 8022296:	b29b      	uxth	r3, r3
 8022298:	200c      	movs	r0, #12
 802229a:	183a      	adds	r2, r7, r0
 802229c:	1c19      	adds	r1, r3, #0
 802229e:	0089      	lsls	r1, r1, #2
 80222a0:	18cb      	adds	r3, r1, r3
 80222a2:	18db      	adds	r3, r3, r3
 80222a4:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 80222a6:	183a      	adds	r2, r7, r0
 80222a8:	2116      	movs	r1, #22
 80222aa:	187b      	adds	r3, r7, r1
 80222ac:	8812      	ldrh	r2, [r2, #0]
 80222ae:	881b      	ldrh	r3, [r3, #0]
 80222b0:	429a      	cmp	r2, r3
 80222b2:	d800      	bhi.n	80222b6 <UpdateSNKPowerPort0+0xbe>
 80222b4:	e08c      	b.n	80223d0 <UpdateSNKPowerPort0+0x1d8>
 80222b6:	187b      	adds	r3, r7, r1
 80222b8:	183a      	adds	r2, r7, r0
 80222ba:	8812      	ldrh	r2, [r2, #0]
 80222bc:	801a      	strh	r2, [r3, #0]
        break;
 80222be:	e087      	b.n	80223d0 <UpdateSNKPowerPort0+0x1d8>
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MinVoltageIn50mVunits);
 80222c0:	687b      	ldr	r3, [r7, #4]
 80222c2:	031b      	lsls	r3, r3, #12
 80222c4:	0d9b      	lsrs	r3, r3, #22
 80222c6:	b29b      	uxth	r3, r3
 80222c8:	0019      	movs	r1, r3
 80222ca:	200e      	movs	r0, #14
 80222cc:	183b      	adds	r3, r7, r0
 80222ce:	2232      	movs	r2, #50	; 0x32
 80222d0:	434a      	muls	r2, r1
 80222d2:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 80222d4:	0001      	movs	r1, r0
 80222d6:	187a      	adds	r2, r7, r1
 80222d8:	201a      	movs	r0, #26
 80222da:	183b      	adds	r3, r7, r0
 80222dc:	8812      	ldrh	r2, [r2, #0]
 80222de:	881b      	ldrh	r3, [r3, #0]
 80222e0:	429a      	cmp	r2, r3
 80222e2:	d203      	bcs.n	80222ec <UpdateSNKPowerPort0+0xf4>
 80222e4:	183b      	adds	r3, r7, r0
 80222e6:	187a      	adds	r2, r7, r1
 80222e8:	8812      	ldrh	r2, [r2, #0]
 80222ea:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MaxVoltageIn50mVunits);
 80222ec:	1dbb      	adds	r3, r7, #6
 80222ee:	881b      	ldrh	r3, [r3, #0]
 80222f0:	049b      	lsls	r3, r3, #18
 80222f2:	0d9b      	lsrs	r3, r3, #22
 80222f4:	b29b      	uxth	r3, r3
 80222f6:	0019      	movs	r1, r3
 80222f8:	200e      	movs	r0, #14
 80222fa:	183b      	adds	r3, r7, r0
 80222fc:	2232      	movs	r2, #50	; 0x32
 80222fe:	434a      	muls	r2, r1
 8022300:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 8022302:	0001      	movs	r1, r0
 8022304:	187a      	adds	r2, r7, r1
 8022306:	2018      	movs	r0, #24
 8022308:	183b      	adds	r3, r7, r0
 802230a:	8812      	ldrh	r2, [r2, #0]
 802230c:	881b      	ldrh	r3, [r3, #0]
 802230e:	429a      	cmp	r2, r3
 8022310:	d903      	bls.n	802231a <UpdateSNKPowerPort0+0x122>
 8022312:	183b      	adds	r3, r7, r0
 8022314:	187a      	adds	r2, r7, r1
 8022316:	8812      	ldrh	r2, [r2, #0]
 8022318:	801a      	strh	r2, [r3, #0]
        _power = GUI_DECODE_MW(pdo.SNKBatteryPDO.OperationalPowerIn250mWunits);
 802231a:	1d3b      	adds	r3, r7, #4
 802231c:	881b      	ldrh	r3, [r3, #0]
 802231e:	059b      	lsls	r3, r3, #22
 8022320:	0d9b      	lsrs	r3, r3, #22
 8022322:	b29b      	uxth	r3, r3
 8022324:	0019      	movs	r1, r3
 8022326:	200a      	movs	r0, #10
 8022328:	183b      	adds	r3, r7, r0
 802232a:	22fa      	movs	r2, #250	; 0xfa
 802232c:	434a      	muls	r2, r1
 802232e:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_POWER_MAX(_power, _max_power);
 8022330:	183b      	adds	r3, r7, r0
 8022332:	881b      	ldrh	r3, [r3, #0]
 8022334:	69fa      	ldr	r2, [r7, #28]
 8022336:	429a      	cmp	r2, r3
 8022338:	d24c      	bcs.n	80223d4 <UpdateSNKPowerPort0+0x1dc>
 802233a:	183b      	adds	r3, r7, r0
 802233c:	881b      	ldrh	r3, [r3, #0]
 802233e:	61fb      	str	r3, [r7, #28]
        break;
 8022340:	e048      	b.n	80223d4 <UpdateSNKPowerPort0+0x1dc>
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MinVoltageIn50mVunits);
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	031b      	lsls	r3, r3, #12
 8022346:	0d9b      	lsrs	r3, r3, #22
 8022348:	b29b      	uxth	r3, r3
 802234a:	0019      	movs	r1, r3
 802234c:	200e      	movs	r0, #14
 802234e:	183b      	adds	r3, r7, r0
 8022350:	2232      	movs	r2, #50	; 0x32
 8022352:	434a      	muls	r2, r1
 8022354:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 8022356:	0001      	movs	r1, r0
 8022358:	187a      	adds	r2, r7, r1
 802235a:	201a      	movs	r0, #26
 802235c:	183b      	adds	r3, r7, r0
 802235e:	8812      	ldrh	r2, [r2, #0]
 8022360:	881b      	ldrh	r3, [r3, #0]
 8022362:	429a      	cmp	r2, r3
 8022364:	d203      	bcs.n	802236e <UpdateSNKPowerPort0+0x176>
 8022366:	183b      	adds	r3, r7, r0
 8022368:	187a      	adds	r2, r7, r1
 802236a:	8812      	ldrh	r2, [r2, #0]
 802236c:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MaxVoltageIn50mVunits);
 802236e:	1dbb      	adds	r3, r7, #6
 8022370:	881b      	ldrh	r3, [r3, #0]
 8022372:	049b      	lsls	r3, r3, #18
 8022374:	0d9b      	lsrs	r3, r3, #22
 8022376:	b29b      	uxth	r3, r3
 8022378:	0019      	movs	r1, r3
 802237a:	200e      	movs	r0, #14
 802237c:	183b      	adds	r3, r7, r0
 802237e:	2232      	movs	r2, #50	; 0x32
 8022380:	434a      	muls	r2, r1
 8022382:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 8022384:	0001      	movs	r1, r0
 8022386:	187a      	adds	r2, r7, r1
 8022388:	2018      	movs	r0, #24
 802238a:	183b      	adds	r3, r7, r0
 802238c:	8812      	ldrh	r2, [r2, #0]
 802238e:	881b      	ldrh	r3, [r3, #0]
 8022390:	429a      	cmp	r2, r3
 8022392:	d903      	bls.n	802239c <UpdateSNKPowerPort0+0x1a4>
 8022394:	183b      	adds	r3, r7, r0
 8022396:	187a      	adds	r2, r7, r1
 8022398:	8812      	ldrh	r2, [r2, #0]
 802239a:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKVariablePDO.OperationalCurrentIn10mAunits);
 802239c:	1d3b      	adds	r3, r7, #4
 802239e:	881b      	ldrh	r3, [r3, #0]
 80223a0:	059b      	lsls	r3, r3, #22
 80223a2:	0d9b      	lsrs	r3, r3, #22
 80223a4:	b29b      	uxth	r3, r3
 80223a6:	200c      	movs	r0, #12
 80223a8:	183a      	adds	r2, r7, r0
 80223aa:	1c19      	adds	r1, r3, #0
 80223ac:	0089      	lsls	r1, r1, #2
 80223ae:	18cb      	adds	r3, r1, r3
 80223b0:	18db      	adds	r3, r3, r3
 80223b2:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 80223b4:	183a      	adds	r2, r7, r0
 80223b6:	2116      	movs	r1, #22
 80223b8:	187b      	adds	r3, r7, r1
 80223ba:	8812      	ldrh	r2, [r2, #0]
 80223bc:	881b      	ldrh	r3, [r3, #0]
 80223be:	429a      	cmp	r2, r3
 80223c0:	d90a      	bls.n	80223d8 <UpdateSNKPowerPort0+0x1e0>
 80223c2:	187b      	adds	r3, r7, r1
 80223c4:	183a      	adds	r2, r7, r0
 80223c6:	8812      	ldrh	r2, [r2, #0]
 80223c8:	801a      	strh	r2, [r3, #0]
        break;
 80223ca:	e005      	b.n	80223d8 <UpdateSNKPowerPort0+0x1e0>
        break;
 80223cc:	46c0      	nop			; (mov r8, r8)
 80223ce:	e004      	b.n	80223da <UpdateSNKPowerPort0+0x1e2>
        break;
 80223d0:	46c0      	nop			; (mov r8, r8)
 80223d2:	e002      	b.n	80223da <UpdateSNKPowerPort0+0x1e2>
        break;
 80223d4:	46c0      	nop			; (mov r8, r8)
 80223d6:	e000      	b.n	80223da <UpdateSNKPowerPort0+0x1e2>
        break;
 80223d8:	46c0      	nop			; (mov r8, r8)
  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 80223da:	693b      	ldr	r3, [r7, #16]
 80223dc:	3301      	adds	r3, #1
 80223de:	613b      	str	r3, [r7, #16]
 80223e0:	4b15      	ldr	r3, [pc, #84]	; (8022438 <UpdateSNKPowerPort0+0x240>)
 80223e2:	781b      	ldrb	r3, [r3, #0]
 80223e4:	001a      	movs	r2, r3
 80223e6:	693b      	ldr	r3, [r7, #16]
 80223e8:	4293      	cmp	r3, r2
 80223ea:	d200      	bcs.n	80223ee <UpdateSNKPowerPort0+0x1f6>
 80223ec:	e719      	b.n	8022222 <UpdateSNKPowerPort0+0x2a>
    }
  }

  GUI_CHECK_VOLTAGE_MIN(_min_voltage,
 80223ee:	231a      	movs	r3, #26
 80223f0:	18fb      	adds	r3, r7, r3
 80223f2:	881a      	ldrh	r2, [r3, #0]
 80223f4:	4b11      	ldr	r3, [pc, #68]	; (802243c <UpdateSNKPowerPort0+0x244>)
 80223f6:	611a      	str	r2, [r3, #16]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits);
  GUI_CHECK_VOLTAGE_MAX(_max_voltage,
 80223f8:	2118      	movs	r1, #24
 80223fa:	187b      	adds	r3, r7, r1
 80223fc:	881a      	ldrh	r2, [r3, #0]
 80223fe:	4b0f      	ldr	r3, [pc, #60]	; (802243c <UpdateSNKPowerPort0+0x244>)
 8022400:	60da      	str	r2, [r3, #12]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits);
  GUI_CHECK_CURRENT_MAX(_max_current,
 8022402:	2016      	movs	r0, #22
 8022404:	183b      	adds	r3, r7, r0
 8022406:	881a      	ldrh	r2, [r3, #0]
 8022408:	4b0c      	ldr	r3, [pc, #48]	; (802243c <UpdateSNKPowerPort0+0x244>)
 802240a:	605a      	str	r2, [r3, #4]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
  _max_power = ((uint32_t)(_max_voltage) * (uint32_t)(_max_current)) / 1000U;
 802240c:	187b      	adds	r3, r7, r1
 802240e:	881b      	ldrh	r3, [r3, #0]
 8022410:	183a      	adds	r2, r7, r0
 8022412:	8812      	ldrh	r2, [r2, #0]
 8022414:	4353      	muls	r3, r2
 8022416:	22fa      	movs	r2, #250	; 0xfa
 8022418:	0091      	lsls	r1, r2, #2
 802241a:	0018      	movs	r0, r3
 802241c:	f7e3 fee8 	bl	80061f0 <__udivsi3>
 8022420:	0003      	movs	r3, r0
 8022422:	61fb      	str	r3, [r7, #28]
  GUI_CHECK_POWER_MAX(_max_power, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits);
 8022424:	4b05      	ldr	r3, [pc, #20]	; (802243c <UpdateSNKPowerPort0+0x244>)
 8022426:	69fa      	ldr	r2, [r7, #28]
 8022428:	619a      	str	r2, [r3, #24]
}
 802242a:	46c0      	nop			; (mov r8, r8)
 802242c:	46bd      	mov	sp, r7
 802242e:	b008      	add	sp, #32
 8022430:	bd80      	pop	{r7, pc}
 8022432:	46c0      	nop			; (mov r8, r8)
 8022434:	20000180 	.word	0x20000180
 8022438:	2000017c 	.word	0x2000017c
 802243c:	20000108 	.word	0x20000108

08022440 <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 8022440:	b580      	push	{r7, lr}
 8022442:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef_t));
 8022444:	4a06      	ldr	r2, [pc, #24]	; (8022460 <TRACER_EMB_Init+0x20>)
 8022446:	4b07      	ldr	r3, [pc, #28]	; (8022464 <TRACER_EMB_Init+0x24>)
 8022448:	2100      	movs	r1, #0
 802244a:	0018      	movs	r0, r3
 802244c:	f001 f93e 	bl	80236cc <memset>

  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 8022450:	f000 fe22 	bl	8023098 <HW_TRACER_EMB_Init>

  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 8022454:	f000 f9d8 	bl	8022808 <TRACER_EMB_LowPowerInit>
}
 8022458:	46c0      	nop			; (mov r8, r8)
 802245a:	46bd      	mov	sp, r7
 802245c:	bd80      	pop	{r7, pc}
 802245e:	46c0      	nop			; (mov r8, r8)
 8022460:	0000041c 	.word	0x0000041c
 8022464:	20004c18 	.word	0x20004c18

08022468 <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 8022468:	b580      	push	{r7, lr}
 802246a:	b086      	sub	sp, #24
 802246c:	af00      	add	r7, sp, #0
 802246e:	6078      	str	r0, [r7, #4]
 8022470:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 8022476:	f000 f8d3 	bl	8022620 <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 802247a:	683b      	ldr	r3, [r7, #0]
 802247c:	0018      	movs	r0, r3
 802247e:	f000 f969 	bl	8022754 <TRACER_EMB_AllocateBufer>
 8022482:	0003      	movs	r3, r0
 8022484:	617b      	str	r3, [r7, #20]

  /* if allocation is ok, write data into the buffer */
  if (_writepos != -1)
 8022486:	697b      	ldr	r3, [r7, #20]
 8022488:	3301      	adds	r3, #1
 802248a:	d023      	beq.n	80224d4 <TRACER_EMB_Add+0x6c>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0U; index < Size; index++)
 802248c:	2300      	movs	r3, #0
 802248e:	613b      	str	r3, [r7, #16]
 8022490:	e01c      	b.n	80224cc <TRACER_EMB_Add+0x64>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 8022492:	68fa      	ldr	r2, [r7, #12]
 8022494:	693b      	ldr	r3, [r7, #16]
 8022496:	18d2      	adds	r2, r2, r3
 8022498:	697b      	ldr	r3, [r7, #20]
 802249a:	4912      	ldr	r1, [pc, #72]	; (80224e4 <TRACER_EMB_Add+0x7c>)
 802249c:	400b      	ands	r3, r1
 802249e:	d503      	bpl.n	80224a8 <TRACER_EMB_Add+0x40>
 80224a0:	3b01      	subs	r3, #1
 80224a2:	4911      	ldr	r1, [pc, #68]	; (80224e8 <TRACER_EMB_Add+0x80>)
 80224a4:	430b      	orrs	r3, r1
 80224a6:	3301      	adds	r3, #1
 80224a8:	0019      	movs	r1, r3
 80224aa:	7812      	ldrb	r2, [r2, #0]
 80224ac:	4b0f      	ldr	r3, [pc, #60]	; (80224ec <TRACER_EMB_Add+0x84>)
 80224ae:	185b      	adds	r3, r3, r1
 80224b0:	76da      	strb	r2, [r3, #27]
 80224b2:	697b      	ldr	r3, [r7, #20]
 80224b4:	3301      	adds	r3, #1
 80224b6:	4a0b      	ldr	r2, [pc, #44]	; (80224e4 <TRACER_EMB_Add+0x7c>)
 80224b8:	4013      	ands	r3, r2
 80224ba:	d503      	bpl.n	80224c4 <TRACER_EMB_Add+0x5c>
 80224bc:	3b01      	subs	r3, #1
 80224be:	4a0a      	ldr	r2, [pc, #40]	; (80224e8 <TRACER_EMB_Add+0x80>)
 80224c0:	4313      	orrs	r3, r2
 80224c2:	3301      	adds	r3, #1
 80224c4:	617b      	str	r3, [r7, #20]
    for (index = 0U; index < Size; index++)
 80224c6:	693b      	ldr	r3, [r7, #16]
 80224c8:	3301      	adds	r3, #1
 80224ca:	613b      	str	r3, [r7, #16]
 80224cc:	693a      	ldr	r2, [r7, #16]
 80224ce:	683b      	ldr	r3, [r7, #0]
 80224d0:	429a      	cmp	r2, r3
 80224d2:	d3de      	bcc.n	8022492 <TRACER_EMB_Add+0x2a>
    }
  }
  TRACER_EMB_UnLock();
 80224d4:	f000 f8c2 	bl	802265c <TRACER_EMB_UnLock>

  /* Tx processing */
  TRACER_EMB_SendData();
 80224d8:	f000 f8de 	bl	8022698 <TRACER_EMB_SendData>
}
 80224dc:	46c0      	nop			; (mov r8, r8)
 80224de:	46bd      	mov	sp, r7
 80224e0:	b006      	add	sp, #24
 80224e2:	bd80      	pop	{r7, pc}
 80224e4:	800003ff 	.word	0x800003ff
 80224e8:	fffffc00 	.word	0xfffffc00
 80224ec:	20004c18 	.word	0x20004c18

080224f0 <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 80224f0:	b580      	push	{r7, lr}
 80224f2:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 80224f4:	f000 febc 	bl	8023270 <HW_TRACER_EMB_IRQHandlerDMA>
}
 80224f8:	46c0      	nop			; (mov r8, r8)
 80224fa:	46bd      	mov	sp, r7
 80224fc:	bd80      	pop	{r7, pc}

080224fe <TRACER_EMB_IRQHandlerUSART>:
#endif /* TRACER_EMB_DMA_MODE == 1 */

void TRACER_EMB_IRQHandlerUSART(void)
{
 80224fe:	b580      	push	{r7, lr}
 8022500:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 8022502:	f000 fecd 	bl	80232a0 <HW_TRACER_EMB_IRQHandlerUSART>
}
 8022506:	46c0      	nop			; (mov r8, r8)
 8022508:	46bd      	mov	sp, r7
 802250a:	bd80      	pop	{r7, pc}

0802250c <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 802250c:	b580      	push	{r7, lr}
 802250e:	b082      	sub	sp, #8
 8022510:	af00      	add	r7, sp, #0
 8022512:	0002      	movs	r2, r0
 8022514:	1dbb      	adds	r3, r7, #6
 8022516:	801a      	strh	r2, [r3, #0]
 8022518:	1d7b      	adds	r3, r7, #5
 802251a:	1c0a      	adds	r2, r1, #0
 802251c:	701a      	strb	r2, [r3, #0]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 802251e:	1dbb      	adds	r3, r7, #6
 8022520:	881b      	ldrh	r3, [r3, #0]
 8022522:	059b      	lsls	r3, r3, #22
 8022524:	0d9b      	lsrs	r3, r3, #22
 8022526:	4a04      	ldr	r2, [pc, #16]	; (8022538 <TRACER_EMB_WriteData+0x2c>)
 8022528:	18d3      	adds	r3, r2, r3
 802252a:	1d7a      	adds	r2, r7, #5
 802252c:	7812      	ldrb	r2, [r2, #0]
 802252e:	76da      	strb	r2, [r3, #27]
}
 8022530:	46c0      	nop			; (mov r8, r8)
 8022532:	46bd      	mov	sp, r7
 8022534:	b002      	add	sp, #8
 8022536:	bd80      	pop	{r7, pc}
 8022538:	20004c18 	.word	0x20004c18

0802253c <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 802253c:	b580      	push	{r7, lr}
 802253e:	b082      	sub	sp, #8
 8022540:	af00      	add	r7, sp, #0
 8022542:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	0018      	movs	r0, r3
 8022548:	f000 fe66 	bl	8023218 <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 802254c:	f000 fe76 	bl	802323c <HW_TRACER_EMB_StartRX>
}
 8022550:	46c0      	nop			; (mov r8, r8)
 8022552:	46bd      	mov	sp, r7
 8022554:	b002      	add	sp, #8
 8022556:	bd80      	pop	{r7, pc}

08022558 <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 8022558:	b580      	push	{r7, lr}
 802255a:	b082      	sub	sp, #8
 802255c:	af00      	add	r7, sp, #0
 802255e:	6078      	str	r0, [r7, #4]
 8022560:	000a      	movs	r2, r1
 8022562:	1cfb      	adds	r3, r7, #3
 8022564:	701a      	strb	r2, [r3, #0]
  if (Size != 0U)
 8022566:	1cfb      	adds	r3, r7, #3
 8022568:	781b      	ldrb	r3, [r3, #0]
 802256a:	2b00      	cmp	r3, #0
 802256c:	d008      	beq.n	8022580 <TRACER_EMB_EnableOverFlow+0x28>
  {
    TracerContext.OverFlow_Data = Data;
 802256e:	4b07      	ldr	r3, [pc, #28]	; (802258c <TRACER_EMB_EnableOverFlow+0x34>)
 8022570:	687a      	ldr	r2, [r7, #4]
 8022572:	615a      	str	r2, [r3, #20]
    TracerContext.OverFlow_Size = Size;
 8022574:	4b05      	ldr	r3, [pc, #20]	; (802258c <TRACER_EMB_EnableOverFlow+0x34>)
 8022576:	1cfa      	adds	r2, r7, #3
 8022578:	7812      	ldrb	r2, [r2, #0]
 802257a:	761a      	strb	r2, [r3, #24]
    return 0;
 802257c:	2300      	movs	r3, #0
 802257e:	e001      	b.n	8022584 <TRACER_EMB_EnableOverFlow+0x2c>
  }
  return -1;
 8022580:	2301      	movs	r3, #1
 8022582:	425b      	negs	r3, r3
}
 8022584:	0018      	movs	r0, r3
 8022586:	46bd      	mov	sp, r7
 8022588:	b002      	add	sp, #8
 802258a:	bd80      	pop	{r7, pc}
 802258c:	20004c18 	.word	0x20004c18

08022590 <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 8022590:	b580      	push	{r7, lr}
 8022592:	b084      	sub	sp, #16
 8022594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022596:	f3ef 8310 	mrs	r3, PRIMASK
 802259a:	60bb      	str	r3, [r7, #8]
  return(result);
 802259c:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 802259e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80225a0:	b672      	cpsid	i
}
 80225a2:	46c0      	nop			; (mov r8, r8)
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 80225a4:	4b1d      	ldr	r3, [pc, #116]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225a6:	681a      	ldr	r2, [r3, #0]
 80225a8:	4b1c      	ldr	r3, [pc, #112]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225aa:	689b      	ldr	r3, [r3, #8]
 80225ac:	18d3      	adds	r3, r2, r3
 80225ae:	059b      	lsls	r3, r3, #22
 80225b0:	0d9a      	lsrs	r2, r3, #22
 80225b2:	4b1a      	ldr	r3, [pc, #104]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225b4:	601a      	str	r2, [r3, #0]

  if ((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 80225b6:	4b19      	ldr	r3, [pc, #100]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225b8:	695b      	ldr	r3, [r3, #20]
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d019      	beq.n	80225f2 <TRACER_EMB_CALLBACK_TX+0x62>
 80225be:	4b17      	ldr	r3, [pc, #92]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225c0:	7e9b      	ldrb	r3, [r3, #26]
 80225c2:	2b01      	cmp	r3, #1
 80225c4:	d115      	bne.n	80225f2 <TRACER_EMB_CALLBACK_TX+0x62>
      && (TracerContext.discontinue == 0U))
 80225c6:	4b15      	ldr	r3, [pc, #84]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225c8:	7e5b      	ldrb	r3, [r3, #25]
 80225ca:	2b00      	cmp	r3, #0
 80225cc:	d111      	bne.n	80225f2 <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 80225ce:	4b13      	ldr	r3, [pc, #76]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225d0:	2202      	movs	r2, #2
 80225d2:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData(TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 80225d4:	4b11      	ldr	r3, [pc, #68]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225d6:	695a      	ldr	r2, [r3, #20]
 80225d8:	4b10      	ldr	r3, [pc, #64]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225da:	7e1b      	ldrb	r3, [r3, #24]
 80225dc:	0019      	movs	r1, r3
 80225de:	0010      	movs	r0, r2
 80225e0:	f000 ff2c 	bl	802343c <HW_TRACER_EMB_SendData>
 80225e4:	68fb      	ldr	r3, [r7, #12]
 80225e6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80225e8:	687b      	ldr	r3, [r7, #4]
 80225ea:	f383 8810 	msr	PRIMASK, r3
}
 80225ee:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
 80225f0:	e00f      	b.n	8022612 <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 80225f2:	4b0a      	ldr	r3, [pc, #40]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225f4:	68db      	ldr	r3, [r3, #12]
 80225f6:	1e5a      	subs	r2, r3, #1
 80225f8:	4b08      	ldr	r3, [pc, #32]	; (802261c <TRACER_EMB_CALLBACK_TX+0x8c>)
 80225fa:	60da      	str	r2, [r3, #12]
 80225fc:	68fb      	ldr	r3, [r7, #12]
 80225fe:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022600:	683b      	ldr	r3, [r7, #0]
 8022602:	f383 8810 	msr	PRIMASK, r3
}
 8022606:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 8022608:	f000 f828 	bl	802265c <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 802260c:	f000 f844 	bl	8022698 <TRACER_EMB_SendData>
  }
}
 8022610:	46c0      	nop			; (mov r8, r8)
 8022612:	46c0      	nop			; (mov r8, r8)
 8022614:	46bd      	mov	sp, r7
 8022616:	b004      	add	sp, #16
 8022618:	bd80      	pop	{r7, pc}
 802261a:	46c0      	nop			; (mov r8, r8)
 802261c:	20004c18 	.word	0x20004c18

08022620 <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 8022620:	b580      	push	{r7, lr}
 8022622:	b084      	sub	sp, #16
 8022624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022626:	f3ef 8310 	mrs	r3, PRIMASK
 802262a:	607b      	str	r3, [r7, #4]
  return(result);
 802262c:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 802262e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8022630:	b672      	cpsid	i
}
 8022632:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter++;
 8022634:	4b08      	ldr	r3, [pc, #32]	; (8022658 <TRACER_EMB_Lock+0x38>)
 8022636:	7c1b      	ldrb	r3, [r3, #16]
 8022638:	b2db      	uxtb	r3, r3
 802263a:	3301      	adds	r3, #1
 802263c:	b2da      	uxtb	r2, r3
 802263e:	4b06      	ldr	r3, [pc, #24]	; (8022658 <TRACER_EMB_Lock+0x38>)
 8022640:	741a      	strb	r2, [r3, #16]
 8022642:	68fb      	ldr	r3, [r7, #12]
 8022644:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022646:	68bb      	ldr	r3, [r7, #8]
 8022648:	f383 8810 	msr	PRIMASK, r3
}
 802264c:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 802264e:	46c0      	nop			; (mov r8, r8)
 8022650:	46bd      	mov	sp, r7
 8022652:	b004      	add	sp, #16
 8022654:	bd80      	pop	{r7, pc}
 8022656:	46c0      	nop			; (mov r8, r8)
 8022658:	20004c18 	.word	0x20004c18

0802265c <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 802265c:	b580      	push	{r7, lr}
 802265e:	b084      	sub	sp, #16
 8022660:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022662:	f3ef 8310 	mrs	r3, PRIMASK
 8022666:	607b      	str	r3, [r7, #4]
  return(result);
 8022668:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 802266a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 802266c:	b672      	cpsid	i
}
 802266e:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter--;
 8022670:	4b08      	ldr	r3, [pc, #32]	; (8022694 <TRACER_EMB_UnLock+0x38>)
 8022672:	7c1b      	ldrb	r3, [r3, #16]
 8022674:	b2db      	uxtb	r3, r3
 8022676:	3b01      	subs	r3, #1
 8022678:	b2da      	uxtb	r2, r3
 802267a:	4b06      	ldr	r3, [pc, #24]	; (8022694 <TRACER_EMB_UnLock+0x38>)
 802267c:	741a      	strb	r2, [r3, #16]
 802267e:	68fb      	ldr	r3, [r7, #12]
 8022680:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022682:	68bb      	ldr	r3, [r7, #8]
 8022684:	f383 8810 	msr	PRIMASK, r3
}
 8022688:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 802268a:	46c0      	nop			; (mov r8, r8)
 802268c:	46bd      	mov	sp, r7
 802268e:	b004      	add	sp, #16
 8022690:	bd80      	pop	{r7, pc}
 8022692:	46c0      	nop			; (mov r8, r8)
 8022694:	20004c18 	.word	0x20004c18

08022698 <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 8022698:	b580      	push	{r7, lr}
 802269a:	b086      	sub	sp, #24
 802269c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802269e:	f3ef 8310 	mrs	r3, PRIMASK
 80226a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80226a4:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;

  TRACER_ENTER_CRITICAL_SECTION();
 80226a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80226a8:	b672      	cpsid	i
}
 80226aa:	46c0      	nop			; (mov r8, r8)

  if (0u == TracerContext.Counter)
 80226ac:	4b28      	ldr	r3, [pc, #160]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 80226ae:	7c1b      	ldrb	r3, [r3, #16]
 80226b0:	b2db      	uxtb	r3, r3
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d134      	bne.n	8022720 <TRACER_EMB_SendData+0x88>
  {
    _begin = TracerContext.PtrTx_Read;
 80226b6:	4b26      	ldr	r3, [pc, #152]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 80226b8:	681b      	ldr	r3, [r3, #0]
 80226ba:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 80226bc:	4b24      	ldr	r3, [pc, #144]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 80226be:	685b      	ldr	r3, [r3, #4]
 80226c0:	60fb      	str	r3, [r7, #12]

    if (_begin != _end)
 80226c2:	693a      	ldr	r2, [r7, #16]
 80226c4:	68fb      	ldr	r3, [r7, #12]
 80226c6:	429a      	cmp	r2, r3
 80226c8:	d02a      	beq.n	8022720 <TRACER_EMB_SendData+0x88>
    {
      TRACER_EMB_Lock();
 80226ca:	f7ff ffa9 	bl	8022620 <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 80226ce:	68fa      	ldr	r2, [r7, #12]
 80226d0:	693b      	ldr	r3, [r7, #16]
 80226d2:	429a      	cmp	r2, r3
 80226d4:	d908      	bls.n	80226e8 <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 80226d6:	68fa      	ldr	r2, [r7, #12]
 80226d8:	693b      	ldr	r3, [r7, #16]
 80226da:	1ad2      	subs	r2, r2, r3
 80226dc:	4b1c      	ldr	r3, [pc, #112]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 80226de:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 0;
 80226e0:	4b1b      	ldr	r3, [pc, #108]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 80226e2:	2200      	movs	r2, #0
 80226e4:	765a      	strb	r2, [r3, #25]
 80226e6:	e008      	b.n	80226fa <TRACER_EMB_SendData+0x62>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 80226e8:	693b      	ldr	r3, [r7, #16]
 80226ea:	2280      	movs	r2, #128	; 0x80
 80226ec:	00d2      	lsls	r2, r2, #3
 80226ee:	1ad2      	subs	r2, r2, r3
 80226f0:	4b17      	ldr	r3, [pc, #92]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 80226f2:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 1;
 80226f4:	4b16      	ldr	r3, [pc, #88]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 80226f6:	2201      	movs	r2, #1
 80226f8:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 80226fa:	f000 f88a 	bl	8022812 <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 80226fe:	4b14      	ldr	r3, [pc, #80]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 8022700:	68db      	ldr	r3, [r3, #12]
 8022702:	1c5a      	adds	r2, r3, #1
 8022704:	4b12      	ldr	r3, [pc, #72]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 8022706:	60da      	str	r2, [r3, #12]
      HW_TRACER_EMB_SendData((const uint8_t *)(&(TracerContext.PtrDataTx[_begin])), TracerContext.SizeSent);
 8022708:	693b      	ldr	r3, [r7, #16]
 802270a:	3318      	adds	r3, #24
 802270c:	001a      	movs	r2, r3
 802270e:	4b10      	ldr	r3, [pc, #64]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 8022710:	18d3      	adds	r3, r2, r3
 8022712:	1cda      	adds	r2, r3, #3
 8022714:	4b0e      	ldr	r3, [pc, #56]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 8022716:	689b      	ldr	r3, [r3, #8]
 8022718:	0019      	movs	r1, r3
 802271a:	0010      	movs	r0, r2
 802271c:	f000 fe8e 	bl	802343c <HW_TRACER_EMB_SendData>
    }
  }

  /* Low power processing */
  switch (TracerContext.LowPower_Counter)
 8022720:	4b0b      	ldr	r3, [pc, #44]	; (8022750 <TRACER_EMB_SendData+0xb8>)
 8022722:	68db      	ldr	r3, [r3, #12]
 8022724:	2b00      	cmp	r3, #0
 8022726:	d004      	beq.n	8022732 <TRACER_EMB_SendData+0x9a>
 8022728:	2b01      	cmp	r3, #1
 802272a:	d105      	bne.n	8022738 <TRACER_EMB_SendData+0xa0>
  {
    case 1:
      TRACER_EMB_LowPowerSendData();
 802272c:	f000 f871 	bl	8022812 <TRACER_EMB_LowPowerSendData>
      break;
 8022730:	e003      	b.n	802273a <TRACER_EMB_SendData+0xa2>
    case 0:
      TRACER_EMB_LowPowerSendDataComplete();
 8022732:	f000 f873 	bl	802281c <TRACER_EMB_LowPowerSendDataComplete>
      break;
 8022736:	e000      	b.n	802273a <TRACER_EMB_SendData+0xa2>
    default:
      break;
 8022738:	46c0      	nop			; (mov r8, r8)
 802273a:	697b      	ldr	r3, [r7, #20]
 802273c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	f383 8810 	msr	PRIMASK, r3
}
 8022744:	46c0      	nop			; (mov r8, r8)
  }

  TRACER_LEAVE_CRITICAL_SECTION();
}
 8022746:	46c0      	nop			; (mov r8, r8)
 8022748:	46bd      	mov	sp, r7
 802274a:	b006      	add	sp, #24
 802274c:	bd80      	pop	{r7, pc}
 802274e:	46c0      	nop			; (mov r8, r8)
 8022750:	20004c18 	.word	0x20004c18

08022754 <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 8022754:	b580      	push	{r7, lr}
 8022756:	b088      	sub	sp, #32
 8022758:	af00      	add	r7, sp, #0
 802275a:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 802275c:	2301      	movs	r3, #1
 802275e:	425b      	negs	r3, r3
 8022760:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022762:	f3ef 8310 	mrs	r3, PRIMASK
 8022766:	613b      	str	r3, [r7, #16]
  return(result);
 8022768:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 802276a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 802276c:	b672      	cpsid	i
}
 802276e:	46c0      	nop			; (mov r8, r8)

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 8022770:	4b24      	ldr	r3, [pc, #144]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 8022772:	685a      	ldr	r2, [r3, #4]
 8022774:	4b23      	ldr	r3, [pc, #140]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 8022776:	681b      	ldr	r3, [r3, #0]
 8022778:	429a      	cmp	r2, r3
 802277a:	d103      	bne.n	8022784 <TRACER_EMB_AllocateBufer+0x30>
  {
    /* Need to add buffer full management */
    _freesize = TRACER_EMB_BUFFER_SIZE;
 802277c:	2380      	movs	r3, #128	; 0x80
 802277e:	00db      	lsls	r3, r3, #3
 8022780:	61fb      	str	r3, [r7, #28]
 8022782:	e016      	b.n	80227b2 <TRACER_EMB_AllocateBufer+0x5e>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 8022784:	4b1f      	ldr	r3, [pc, #124]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 8022786:	685a      	ldr	r2, [r3, #4]
 8022788:	4b1e      	ldr	r3, [pc, #120]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	429a      	cmp	r2, r3
 802278e:	d90a      	bls.n	80227a6 <TRACER_EMB_AllocateBufer+0x52>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 8022790:	4b1c      	ldr	r3, [pc, #112]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 8022792:	681a      	ldr	r2, [r3, #0]
 8022794:	4b1b      	ldr	r3, [pc, #108]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 8022796:	685b      	ldr	r3, [r3, #4]
 8022798:	1ad3      	subs	r3, r2, r3
 802279a:	2280      	movs	r2, #128	; 0x80
 802279c:	00d2      	lsls	r2, r2, #3
 802279e:	4694      	mov	ip, r2
 80227a0:	4463      	add	r3, ip
 80227a2:	61fb      	str	r3, [r7, #28]
 80227a4:	e005      	b.n	80227b2 <TRACER_EMB_AllocateBufer+0x5e>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 80227a6:	4b17      	ldr	r3, [pc, #92]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 80227a8:	681a      	ldr	r2, [r3, #0]
 80227aa:	4b16      	ldr	r3, [pc, #88]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 80227ac:	685b      	ldr	r3, [r3, #4]
 80227ae:	1ad3      	subs	r3, r2, r3
 80227b0:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 80227b2:	69fa      	ldr	r2, [r7, #28]
 80227b4:	687b      	ldr	r3, [r7, #4]
 80227b6:	429a      	cmp	r2, r3
 80227b8:	d912      	bls.n	80227e0 <TRACER_EMB_AllocateBufer+0x8c>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 80227ba:	4b12      	ldr	r3, [pc, #72]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 80227bc:	685b      	ldr	r3, [r3, #4]
 80227be:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 80227c0:	4b10      	ldr	r3, [pc, #64]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 80227c2:	685a      	ldr	r2, [r3, #4]
 80227c4:	687b      	ldr	r3, [r7, #4]
 80227c6:	18d3      	adds	r3, r2, r3
 80227c8:	059b      	lsls	r3, r3, #22
 80227ca:	0d9a      	lsrs	r2, r3, #22
 80227cc:	4b0d      	ldr	r3, [pc, #52]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 80227ce:	605a      	str	r2, [r3, #4]
    if (TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 80227d0:	4b0c      	ldr	r3, [pc, #48]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 80227d2:	7e9b      	ldrb	r3, [r3, #26]
 80227d4:	2b02      	cmp	r3, #2
 80227d6:	d10a      	bne.n	80227ee <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 80227d8:	4b0a      	ldr	r3, [pc, #40]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 80227da:	2200      	movs	r2, #0
 80227dc:	769a      	strb	r2, [r3, #26]
 80227de:	e006      	b.n	80227ee <TRACER_EMB_AllocateBufer+0x9a>
    }
  }
  else
  {
    if (TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 80227e0:	4b08      	ldr	r3, [pc, #32]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 80227e2:	7e9b      	ldrb	r3, [r3, #26]
 80227e4:	2b00      	cmp	r3, #0
 80227e6:	d102      	bne.n	80227ee <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 80227e8:	4b06      	ldr	r3, [pc, #24]	; (8022804 <TRACER_EMB_AllocateBufer+0xb0>)
 80227ea:	2201      	movs	r2, #1
 80227ec:	769a      	strb	r2, [r3, #26]
 80227ee:	697b      	ldr	r3, [r7, #20]
 80227f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80227f2:	68fb      	ldr	r3, [r7, #12]
 80227f4:	f383 8810 	msr	PRIMASK, r3
}
 80227f8:	46c0      	nop			; (mov r8, r8)
    }
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 80227fa:	69bb      	ldr	r3, [r7, #24]
}
 80227fc:	0018      	movs	r0, r3
 80227fe:	46bd      	mov	sp, r7
 8022800:	b008      	add	sp, #32
 8022802:	bd80      	pop	{r7, pc}
 8022804:	20004c18 	.word	0x20004c18

08022808 <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 8022808:	b580      	push	{r7, lr}
 802280a:	af00      	add	r7, sp, #0
}
 802280c:	46c0      	nop			; (mov r8, r8)
 802280e:	46bd      	mov	sp, r7
 8022810:	bd80      	pop	{r7, pc}

08022812 <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 8022812:	b580      	push	{r7, lr}
 8022814:	af00      	add	r7, sp, #0
}
 8022816:	46c0      	nop			; (mov r8, r8)
 8022818:	46bd      	mov	sp, r7
 802281a:	bd80      	pop	{r7, pc}

0802281c <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 802281c:	b580      	push	{r7, lr}
 802281e:	af00      	add	r7, sp, #0
}
 8022820:	46c0      	nop			; (mov r8, r8)
 8022822:	46bd      	mov	sp, r7
 8022824:	bd80      	pop	{r7, pc}
	...

08022828 <__NVIC_EnableIRQ>:
{
 8022828:	b580      	push	{r7, lr}
 802282a:	b082      	sub	sp, #8
 802282c:	af00      	add	r7, sp, #0
 802282e:	0002      	movs	r2, r0
 8022830:	1dfb      	adds	r3, r7, #7
 8022832:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8022834:	1dfb      	adds	r3, r7, #7
 8022836:	781b      	ldrb	r3, [r3, #0]
 8022838:	2b7f      	cmp	r3, #127	; 0x7f
 802283a:	d809      	bhi.n	8022850 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802283c:	1dfb      	adds	r3, r7, #7
 802283e:	781b      	ldrb	r3, [r3, #0]
 8022840:	001a      	movs	r2, r3
 8022842:	231f      	movs	r3, #31
 8022844:	401a      	ands	r2, r3
 8022846:	4b04      	ldr	r3, [pc, #16]	; (8022858 <__NVIC_EnableIRQ+0x30>)
 8022848:	2101      	movs	r1, #1
 802284a:	4091      	lsls	r1, r2
 802284c:	000a      	movs	r2, r1
 802284e:	601a      	str	r2, [r3, #0]
}
 8022850:	46c0      	nop			; (mov r8, r8)
 8022852:	46bd      	mov	sp, r7
 8022854:	b002      	add	sp, #8
 8022856:	bd80      	pop	{r7, pc}
 8022858:	e000e100 	.word	0xe000e100

0802285c <__NVIC_SetPriority>:
{
 802285c:	b590      	push	{r4, r7, lr}
 802285e:	b083      	sub	sp, #12
 8022860:	af00      	add	r7, sp, #0
 8022862:	0002      	movs	r2, r0
 8022864:	6039      	str	r1, [r7, #0]
 8022866:	1dfb      	adds	r3, r7, #7
 8022868:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 802286a:	1dfb      	adds	r3, r7, #7
 802286c:	781b      	ldrb	r3, [r3, #0]
 802286e:	2b7f      	cmp	r3, #127	; 0x7f
 8022870:	d828      	bhi.n	80228c4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8022872:	4a2f      	ldr	r2, [pc, #188]	; (8022930 <__NVIC_SetPriority+0xd4>)
 8022874:	1dfb      	adds	r3, r7, #7
 8022876:	781b      	ldrb	r3, [r3, #0]
 8022878:	b25b      	sxtb	r3, r3
 802287a:	089b      	lsrs	r3, r3, #2
 802287c:	33c0      	adds	r3, #192	; 0xc0
 802287e:	009b      	lsls	r3, r3, #2
 8022880:	589b      	ldr	r3, [r3, r2]
 8022882:	1dfa      	adds	r2, r7, #7
 8022884:	7812      	ldrb	r2, [r2, #0]
 8022886:	0011      	movs	r1, r2
 8022888:	2203      	movs	r2, #3
 802288a:	400a      	ands	r2, r1
 802288c:	00d2      	lsls	r2, r2, #3
 802288e:	21ff      	movs	r1, #255	; 0xff
 8022890:	4091      	lsls	r1, r2
 8022892:	000a      	movs	r2, r1
 8022894:	43d2      	mvns	r2, r2
 8022896:	401a      	ands	r2, r3
 8022898:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 802289a:	683b      	ldr	r3, [r7, #0]
 802289c:	019b      	lsls	r3, r3, #6
 802289e:	22ff      	movs	r2, #255	; 0xff
 80228a0:	401a      	ands	r2, r3
 80228a2:	1dfb      	adds	r3, r7, #7
 80228a4:	781b      	ldrb	r3, [r3, #0]
 80228a6:	0018      	movs	r0, r3
 80228a8:	2303      	movs	r3, #3
 80228aa:	4003      	ands	r3, r0
 80228ac:	00db      	lsls	r3, r3, #3
 80228ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80228b0:	481f      	ldr	r0, [pc, #124]	; (8022930 <__NVIC_SetPriority+0xd4>)
 80228b2:	1dfb      	adds	r3, r7, #7
 80228b4:	781b      	ldrb	r3, [r3, #0]
 80228b6:	b25b      	sxtb	r3, r3
 80228b8:	089b      	lsrs	r3, r3, #2
 80228ba:	430a      	orrs	r2, r1
 80228bc:	33c0      	adds	r3, #192	; 0xc0
 80228be:	009b      	lsls	r3, r3, #2
 80228c0:	501a      	str	r2, [r3, r0]
}
 80228c2:	e031      	b.n	8022928 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80228c4:	4a1b      	ldr	r2, [pc, #108]	; (8022934 <__NVIC_SetPriority+0xd8>)
 80228c6:	1dfb      	adds	r3, r7, #7
 80228c8:	781b      	ldrb	r3, [r3, #0]
 80228ca:	0019      	movs	r1, r3
 80228cc:	230f      	movs	r3, #15
 80228ce:	400b      	ands	r3, r1
 80228d0:	3b08      	subs	r3, #8
 80228d2:	089b      	lsrs	r3, r3, #2
 80228d4:	3306      	adds	r3, #6
 80228d6:	009b      	lsls	r3, r3, #2
 80228d8:	18d3      	adds	r3, r2, r3
 80228da:	3304      	adds	r3, #4
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	1dfa      	adds	r2, r7, #7
 80228e0:	7812      	ldrb	r2, [r2, #0]
 80228e2:	0011      	movs	r1, r2
 80228e4:	2203      	movs	r2, #3
 80228e6:	400a      	ands	r2, r1
 80228e8:	00d2      	lsls	r2, r2, #3
 80228ea:	21ff      	movs	r1, #255	; 0xff
 80228ec:	4091      	lsls	r1, r2
 80228ee:	000a      	movs	r2, r1
 80228f0:	43d2      	mvns	r2, r2
 80228f2:	401a      	ands	r2, r3
 80228f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80228f6:	683b      	ldr	r3, [r7, #0]
 80228f8:	019b      	lsls	r3, r3, #6
 80228fa:	22ff      	movs	r2, #255	; 0xff
 80228fc:	401a      	ands	r2, r3
 80228fe:	1dfb      	adds	r3, r7, #7
 8022900:	781b      	ldrb	r3, [r3, #0]
 8022902:	0018      	movs	r0, r3
 8022904:	2303      	movs	r3, #3
 8022906:	4003      	ands	r3, r0
 8022908:	00db      	lsls	r3, r3, #3
 802290a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802290c:	4809      	ldr	r0, [pc, #36]	; (8022934 <__NVIC_SetPriority+0xd8>)
 802290e:	1dfb      	adds	r3, r7, #7
 8022910:	781b      	ldrb	r3, [r3, #0]
 8022912:	001c      	movs	r4, r3
 8022914:	230f      	movs	r3, #15
 8022916:	4023      	ands	r3, r4
 8022918:	3b08      	subs	r3, #8
 802291a:	089b      	lsrs	r3, r3, #2
 802291c:	430a      	orrs	r2, r1
 802291e:	3306      	adds	r3, #6
 8022920:	009b      	lsls	r3, r3, #2
 8022922:	18c3      	adds	r3, r0, r3
 8022924:	3304      	adds	r3, #4
 8022926:	601a      	str	r2, [r3, #0]
}
 8022928:	46c0      	nop			; (mov r8, r8)
 802292a:	46bd      	mov	sp, r7
 802292c:	b003      	add	sp, #12
 802292e:	bd90      	pop	{r4, r7, pc}
 8022930:	e000e100 	.word	0xe000e100
 8022934:	e000ed00 	.word	0xe000ed00

08022938 <LL_DMA_EnableChannel>:
{
 8022938:	b580      	push	{r7, lr}
 802293a:	b084      	sub	sp, #16
 802293c:	af00      	add	r7, sp, #0
 802293e:	6078      	str	r0, [r7, #4]
 8022940:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8022942:	687b      	ldr	r3, [r7, #4]
 8022944:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8022946:	4a0b      	ldr	r2, [pc, #44]	; (8022974 <LL_DMA_EnableChannel+0x3c>)
 8022948:	683b      	ldr	r3, [r7, #0]
 802294a:	18d3      	adds	r3, r2, r3
 802294c:	781b      	ldrb	r3, [r3, #0]
 802294e:	001a      	movs	r2, r3
 8022950:	68fb      	ldr	r3, [r7, #12]
 8022952:	18d3      	adds	r3, r2, r3
 8022954:	681a      	ldr	r2, [r3, #0]
 8022956:	4907      	ldr	r1, [pc, #28]	; (8022974 <LL_DMA_EnableChannel+0x3c>)
 8022958:	683b      	ldr	r3, [r7, #0]
 802295a:	18cb      	adds	r3, r1, r3
 802295c:	781b      	ldrb	r3, [r3, #0]
 802295e:	0019      	movs	r1, r3
 8022960:	68fb      	ldr	r3, [r7, #12]
 8022962:	18cb      	adds	r3, r1, r3
 8022964:	2101      	movs	r1, #1
 8022966:	430a      	orrs	r2, r1
 8022968:	601a      	str	r2, [r3, #0]
}
 802296a:	46c0      	nop			; (mov r8, r8)
 802296c:	46bd      	mov	sp, r7
 802296e:	b004      	add	sp, #16
 8022970:	bd80      	pop	{r7, pc}
 8022972:	46c0      	nop			; (mov r8, r8)
 8022974:	0802597c 	.word	0x0802597c

08022978 <LL_DMA_DisableChannel>:
{
 8022978:	b580      	push	{r7, lr}
 802297a:	b084      	sub	sp, #16
 802297c:	af00      	add	r7, sp, #0
 802297e:	6078      	str	r0, [r7, #4]
 8022980:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8022982:	687b      	ldr	r3, [r7, #4]
 8022984:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8022986:	4a0b      	ldr	r2, [pc, #44]	; (80229b4 <LL_DMA_DisableChannel+0x3c>)
 8022988:	683b      	ldr	r3, [r7, #0]
 802298a:	18d3      	adds	r3, r2, r3
 802298c:	781b      	ldrb	r3, [r3, #0]
 802298e:	001a      	movs	r2, r3
 8022990:	68fb      	ldr	r3, [r7, #12]
 8022992:	18d3      	adds	r3, r2, r3
 8022994:	681a      	ldr	r2, [r3, #0]
 8022996:	4907      	ldr	r1, [pc, #28]	; (80229b4 <LL_DMA_DisableChannel+0x3c>)
 8022998:	683b      	ldr	r3, [r7, #0]
 802299a:	18cb      	adds	r3, r1, r3
 802299c:	781b      	ldrb	r3, [r3, #0]
 802299e:	0019      	movs	r1, r3
 80229a0:	68fb      	ldr	r3, [r7, #12]
 80229a2:	18cb      	adds	r3, r1, r3
 80229a4:	2101      	movs	r1, #1
 80229a6:	438a      	bics	r2, r1
 80229a8:	601a      	str	r2, [r3, #0]
}
 80229aa:	46c0      	nop			; (mov r8, r8)
 80229ac:	46bd      	mov	sp, r7
 80229ae:	b004      	add	sp, #16
 80229b0:	bd80      	pop	{r7, pc}
 80229b2:	46c0      	nop			; (mov r8, r8)
 80229b4:	0802597c 	.word	0x0802597c

080229b8 <LL_DMA_ConfigTransfer>:
{
 80229b8:	b580      	push	{r7, lr}
 80229ba:	b086      	sub	sp, #24
 80229bc:	af00      	add	r7, sp, #0
 80229be:	60f8      	str	r0, [r7, #12]
 80229c0:	60b9      	str	r1, [r7, #8]
 80229c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80229c4:	68fb      	ldr	r3, [r7, #12]
 80229c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80229c8:	4a0c      	ldr	r2, [pc, #48]	; (80229fc <LL_DMA_ConfigTransfer+0x44>)
 80229ca:	68bb      	ldr	r3, [r7, #8]
 80229cc:	18d3      	adds	r3, r2, r3
 80229ce:	781b      	ldrb	r3, [r3, #0]
 80229d0:	001a      	movs	r2, r3
 80229d2:	697b      	ldr	r3, [r7, #20]
 80229d4:	18d3      	adds	r3, r2, r3
 80229d6:	681b      	ldr	r3, [r3, #0]
 80229d8:	4a09      	ldr	r2, [pc, #36]	; (8022a00 <LL_DMA_ConfigTransfer+0x48>)
 80229da:	4013      	ands	r3, r2
 80229dc:	0019      	movs	r1, r3
 80229de:	4a07      	ldr	r2, [pc, #28]	; (80229fc <LL_DMA_ConfigTransfer+0x44>)
 80229e0:	68bb      	ldr	r3, [r7, #8]
 80229e2:	18d3      	adds	r3, r2, r3
 80229e4:	781b      	ldrb	r3, [r3, #0]
 80229e6:	001a      	movs	r2, r3
 80229e8:	697b      	ldr	r3, [r7, #20]
 80229ea:	18d3      	adds	r3, r2, r3
 80229ec:	687a      	ldr	r2, [r7, #4]
 80229ee:	430a      	orrs	r2, r1
 80229f0:	601a      	str	r2, [r3, #0]
}
 80229f2:	46c0      	nop			; (mov r8, r8)
 80229f4:	46bd      	mov	sp, r7
 80229f6:	b006      	add	sp, #24
 80229f8:	bd80      	pop	{r7, pc}
 80229fa:	46c0      	nop			; (mov r8, r8)
 80229fc:	0802597c 	.word	0x0802597c
 8022a00:	ffff800f 	.word	0xffff800f

08022a04 <LL_DMA_GetDataTransferDirection>:
{
 8022a04:	b580      	push	{r7, lr}
 8022a06:	b084      	sub	sp, #16
 8022a08:	af00      	add	r7, sp, #0
 8022a0a:	6078      	str	r0, [r7, #4]
 8022a0c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8022a0e:	687b      	ldr	r3, [r7, #4]
 8022a10:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8022a12:	4a07      	ldr	r2, [pc, #28]	; (8022a30 <LL_DMA_GetDataTransferDirection+0x2c>)
 8022a14:	683b      	ldr	r3, [r7, #0]
 8022a16:	18d3      	adds	r3, r2, r3
 8022a18:	781b      	ldrb	r3, [r3, #0]
 8022a1a:	001a      	movs	r2, r3
 8022a1c:	68fb      	ldr	r3, [r7, #12]
 8022a1e:	18d3      	adds	r3, r2, r3
 8022a20:	681b      	ldr	r3, [r3, #0]
 8022a22:	4a04      	ldr	r2, [pc, #16]	; (8022a34 <LL_DMA_GetDataTransferDirection+0x30>)
 8022a24:	4013      	ands	r3, r2
}
 8022a26:	0018      	movs	r0, r3
 8022a28:	46bd      	mov	sp, r7
 8022a2a:	b004      	add	sp, #16
 8022a2c:	bd80      	pop	{r7, pc}
 8022a2e:	46c0      	nop			; (mov r8, r8)
 8022a30:	0802597c 	.word	0x0802597c
 8022a34:	00004010 	.word	0x00004010

08022a38 <LL_DMA_SetDataLength>:
{
 8022a38:	b580      	push	{r7, lr}
 8022a3a:	b086      	sub	sp, #24
 8022a3c:	af00      	add	r7, sp, #0
 8022a3e:	60f8      	str	r0, [r7, #12]
 8022a40:	60b9      	str	r1, [r7, #8]
 8022a42:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8022a44:	68fb      	ldr	r3, [r7, #12]
 8022a46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8022a48:	4a0b      	ldr	r2, [pc, #44]	; (8022a78 <LL_DMA_SetDataLength+0x40>)
 8022a4a:	68bb      	ldr	r3, [r7, #8]
 8022a4c:	18d3      	adds	r3, r2, r3
 8022a4e:	781b      	ldrb	r3, [r3, #0]
 8022a50:	001a      	movs	r2, r3
 8022a52:	697b      	ldr	r3, [r7, #20]
 8022a54:	18d3      	adds	r3, r2, r3
 8022a56:	685b      	ldr	r3, [r3, #4]
 8022a58:	0c1b      	lsrs	r3, r3, #16
 8022a5a:	0419      	lsls	r1, r3, #16
 8022a5c:	4a06      	ldr	r2, [pc, #24]	; (8022a78 <LL_DMA_SetDataLength+0x40>)
 8022a5e:	68bb      	ldr	r3, [r7, #8]
 8022a60:	18d3      	adds	r3, r2, r3
 8022a62:	781b      	ldrb	r3, [r3, #0]
 8022a64:	001a      	movs	r2, r3
 8022a66:	697b      	ldr	r3, [r7, #20]
 8022a68:	18d3      	adds	r3, r2, r3
 8022a6a:	687a      	ldr	r2, [r7, #4]
 8022a6c:	430a      	orrs	r2, r1
 8022a6e:	605a      	str	r2, [r3, #4]
}
 8022a70:	46c0      	nop			; (mov r8, r8)
 8022a72:	46bd      	mov	sp, r7
 8022a74:	b006      	add	sp, #24
 8022a76:	bd80      	pop	{r7, pc}
 8022a78:	0802597c 	.word	0x0802597c

08022a7c <LL_DMA_ConfigAddresses>:
{
 8022a7c:	b580      	push	{r7, lr}
 8022a7e:	b086      	sub	sp, #24
 8022a80:	af00      	add	r7, sp, #0
 8022a82:	60f8      	str	r0, [r7, #12]
 8022a84:	60b9      	str	r1, [r7, #8]
 8022a86:	607a      	str	r2, [r7, #4]
 8022a88:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8022a8a:	68fb      	ldr	r3, [r7, #12]
 8022a8c:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8022a8e:	6a3b      	ldr	r3, [r7, #32]
 8022a90:	2b10      	cmp	r3, #16
 8022a92:	d112      	bne.n	8022aba <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8022a94:	4a14      	ldr	r2, [pc, #80]	; (8022ae8 <LL_DMA_ConfigAddresses+0x6c>)
 8022a96:	68bb      	ldr	r3, [r7, #8]
 8022a98:	18d3      	adds	r3, r2, r3
 8022a9a:	781b      	ldrb	r3, [r3, #0]
 8022a9c:	001a      	movs	r2, r3
 8022a9e:	697b      	ldr	r3, [r7, #20]
 8022aa0:	18d3      	adds	r3, r2, r3
 8022aa2:	687a      	ldr	r2, [r7, #4]
 8022aa4:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8022aa6:	4a10      	ldr	r2, [pc, #64]	; (8022ae8 <LL_DMA_ConfigAddresses+0x6c>)
 8022aa8:	68bb      	ldr	r3, [r7, #8]
 8022aaa:	18d3      	adds	r3, r2, r3
 8022aac:	781b      	ldrb	r3, [r3, #0]
 8022aae:	001a      	movs	r2, r3
 8022ab0:	697b      	ldr	r3, [r7, #20]
 8022ab2:	18d3      	adds	r3, r2, r3
 8022ab4:	683a      	ldr	r2, [r7, #0]
 8022ab6:	609a      	str	r2, [r3, #8]
}
 8022ab8:	e011      	b.n	8022ade <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8022aba:	4a0b      	ldr	r2, [pc, #44]	; (8022ae8 <LL_DMA_ConfigAddresses+0x6c>)
 8022abc:	68bb      	ldr	r3, [r7, #8]
 8022abe:	18d3      	adds	r3, r2, r3
 8022ac0:	781b      	ldrb	r3, [r3, #0]
 8022ac2:	001a      	movs	r2, r3
 8022ac4:	697b      	ldr	r3, [r7, #20]
 8022ac6:	18d3      	adds	r3, r2, r3
 8022ac8:	687a      	ldr	r2, [r7, #4]
 8022aca:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8022acc:	4a06      	ldr	r2, [pc, #24]	; (8022ae8 <LL_DMA_ConfigAddresses+0x6c>)
 8022ace:	68bb      	ldr	r3, [r7, #8]
 8022ad0:	18d3      	adds	r3, r2, r3
 8022ad2:	781b      	ldrb	r3, [r3, #0]
 8022ad4:	001a      	movs	r2, r3
 8022ad6:	697b      	ldr	r3, [r7, #20]
 8022ad8:	18d3      	adds	r3, r2, r3
 8022ada:	683a      	ldr	r2, [r7, #0]
 8022adc:	60da      	str	r2, [r3, #12]
}
 8022ade:	46c0      	nop			; (mov r8, r8)
 8022ae0:	46bd      	mov	sp, r7
 8022ae2:	b006      	add	sp, #24
 8022ae4:	bd80      	pop	{r7, pc}
 8022ae6:	46c0      	nop			; (mov r8, r8)
 8022ae8:	0802597c 	.word	0x0802597c

08022aec <LL_DMA_SetPeriphRequest>:
{
 8022aec:	b580      	push	{r7, lr}
 8022aee:	b086      	sub	sp, #24
 8022af0:	af00      	add	r7, sp, #0
 8022af2:	60f8      	str	r0, [r7, #12]
 8022af4:	60b9      	str	r1, [r7, #8]
 8022af6:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8022af8:	68fb      	ldr	r3, [r7, #12]
 8022afa:	0a9b      	lsrs	r3, r3, #10
 8022afc:	4a0f      	ldr	r2, [pc, #60]	; (8022b3c <LL_DMA_SetPeriphRequest+0x50>)
 8022afe:	405a      	eors	r2, r3
 8022b00:	0013      	movs	r3, r2
 8022b02:	00db      	lsls	r3, r3, #3
 8022b04:	1a9b      	subs	r3, r3, r2
 8022b06:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8022b08:	68ba      	ldr	r2, [r7, #8]
 8022b0a:	697b      	ldr	r3, [r7, #20]
 8022b0c:	18d3      	adds	r3, r2, r3
 8022b0e:	009b      	lsls	r3, r3, #2
 8022b10:	4a0b      	ldr	r2, [pc, #44]	; (8022b40 <LL_DMA_SetPeriphRequest+0x54>)
 8022b12:	4694      	mov	ip, r2
 8022b14:	4463      	add	r3, ip
 8022b16:	681b      	ldr	r3, [r3, #0]
 8022b18:	227f      	movs	r2, #127	; 0x7f
 8022b1a:	4393      	bics	r3, r2
 8022b1c:	0019      	movs	r1, r3
 8022b1e:	68ba      	ldr	r2, [r7, #8]
 8022b20:	697b      	ldr	r3, [r7, #20]
 8022b22:	18d3      	adds	r3, r2, r3
 8022b24:	009b      	lsls	r3, r3, #2
 8022b26:	4a06      	ldr	r2, [pc, #24]	; (8022b40 <LL_DMA_SetPeriphRequest+0x54>)
 8022b28:	4694      	mov	ip, r2
 8022b2a:	4463      	add	r3, ip
 8022b2c:	687a      	ldr	r2, [r7, #4]
 8022b2e:	430a      	orrs	r2, r1
 8022b30:	601a      	str	r2, [r3, #0]
}
 8022b32:	46c0      	nop			; (mov r8, r8)
 8022b34:	46bd      	mov	sp, r7
 8022b36:	b006      	add	sp, #24
 8022b38:	bd80      	pop	{r7, pc}
 8022b3a:	46c0      	nop			; (mov r8, r8)
 8022b3c:	00100080 	.word	0x00100080
 8022b40:	40020800 	.word	0x40020800

08022b44 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(const DMA_TypeDef *DMAx)
{
 8022b44:	b580      	push	{r7, lr}
 8022b46:	b082      	sub	sp, #8
 8022b48:	af00      	add	r7, sp, #0
 8022b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8022b4c:	687b      	ldr	r3, [r7, #4]
 8022b4e:	681a      	ldr	r2, [r3, #0]
 8022b50:	2380      	movs	r3, #128	; 0x80
 8022b52:	009b      	lsls	r3, r3, #2
 8022b54:	401a      	ands	r2, r3
 8022b56:	2380      	movs	r3, #128	; 0x80
 8022b58:	009b      	lsls	r3, r3, #2
 8022b5a:	429a      	cmp	r2, r3
 8022b5c:	d101      	bne.n	8022b62 <LL_DMA_IsActiveFlag_TC3+0x1e>
 8022b5e:	2301      	movs	r3, #1
 8022b60:	e000      	b.n	8022b64 <LL_DMA_IsActiveFlag_TC3+0x20>
 8022b62:	2300      	movs	r3, #0
}
 8022b64:	0018      	movs	r0, r3
 8022b66:	46bd      	mov	sp, r7
 8022b68:	b002      	add	sp, #8
 8022b6a:	bd80      	pop	{r7, pc}

08022b6c <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 8022b6c:	b580      	push	{r7, lr}
 8022b6e:	b082      	sub	sp, #8
 8022b70:	af00      	add	r7, sp, #0
 8022b72:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8022b74:	687b      	ldr	r3, [r7, #4]
 8022b76:	2280      	movs	r2, #128	; 0x80
 8022b78:	0052      	lsls	r2, r2, #1
 8022b7a:	605a      	str	r2, [r3, #4]
}
 8022b7c:	46c0      	nop			; (mov r8, r8)
 8022b7e:	46bd      	mov	sp, r7
 8022b80:	b002      	add	sp, #8
 8022b82:	bd80      	pop	{r7, pc}

08022b84 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8022b84:	b580      	push	{r7, lr}
 8022b86:	b084      	sub	sp, #16
 8022b88:	af00      	add	r7, sp, #0
 8022b8a:	6078      	str	r0, [r7, #4]
 8022b8c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8022b92:	4a0b      	ldr	r2, [pc, #44]	; (8022bc0 <LL_DMA_EnableIT_TC+0x3c>)
 8022b94:	683b      	ldr	r3, [r7, #0]
 8022b96:	18d3      	adds	r3, r2, r3
 8022b98:	781b      	ldrb	r3, [r3, #0]
 8022b9a:	001a      	movs	r2, r3
 8022b9c:	68fb      	ldr	r3, [r7, #12]
 8022b9e:	18d3      	adds	r3, r2, r3
 8022ba0:	681a      	ldr	r2, [r3, #0]
 8022ba2:	4907      	ldr	r1, [pc, #28]	; (8022bc0 <LL_DMA_EnableIT_TC+0x3c>)
 8022ba4:	683b      	ldr	r3, [r7, #0]
 8022ba6:	18cb      	adds	r3, r1, r3
 8022ba8:	781b      	ldrb	r3, [r3, #0]
 8022baa:	0019      	movs	r1, r3
 8022bac:	68fb      	ldr	r3, [r7, #12]
 8022bae:	18cb      	adds	r3, r1, r3
 8022bb0:	2102      	movs	r1, #2
 8022bb2:	430a      	orrs	r2, r1
 8022bb4:	601a      	str	r2, [r3, #0]
}
 8022bb6:	46c0      	nop			; (mov r8, r8)
 8022bb8:	46bd      	mov	sp, r7
 8022bba:	b004      	add	sp, #16
 8022bbc:	bd80      	pop	{r7, pc}
 8022bbe:	46c0      	nop			; (mov r8, r8)
 8022bc0:	0802597c 	.word	0x0802597c

08022bc4 <LL_AHB1_GRP1_EnableClock>:
{
 8022bc4:	b580      	push	{r7, lr}
 8022bc6:	b084      	sub	sp, #16
 8022bc8:	af00      	add	r7, sp, #0
 8022bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8022bcc:	4b07      	ldr	r3, [pc, #28]	; (8022bec <LL_AHB1_GRP1_EnableClock+0x28>)
 8022bce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8022bd0:	4b06      	ldr	r3, [pc, #24]	; (8022bec <LL_AHB1_GRP1_EnableClock+0x28>)
 8022bd2:	687a      	ldr	r2, [r7, #4]
 8022bd4:	430a      	orrs	r2, r1
 8022bd6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8022bd8:	4b04      	ldr	r3, [pc, #16]	; (8022bec <LL_AHB1_GRP1_EnableClock+0x28>)
 8022bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bdc:	687a      	ldr	r2, [r7, #4]
 8022bde:	4013      	ands	r3, r2
 8022be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8022be2:	68fb      	ldr	r3, [r7, #12]
}
 8022be4:	46c0      	nop			; (mov r8, r8)
 8022be6:	46bd      	mov	sp, r7
 8022be8:	b004      	add	sp, #16
 8022bea:	bd80      	pop	{r7, pc}
 8022bec:	40021000 	.word	0x40021000

08022bf0 <LL_APB1_GRP1_EnableClock>:
{
 8022bf0:	b580      	push	{r7, lr}
 8022bf2:	b084      	sub	sp, #16
 8022bf4:	af00      	add	r7, sp, #0
 8022bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8022bf8:	4b07      	ldr	r3, [pc, #28]	; (8022c18 <LL_APB1_GRP1_EnableClock+0x28>)
 8022bfa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8022bfc:	4b06      	ldr	r3, [pc, #24]	; (8022c18 <LL_APB1_GRP1_EnableClock+0x28>)
 8022bfe:	687a      	ldr	r2, [r7, #4]
 8022c00:	430a      	orrs	r2, r1
 8022c02:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8022c04:	4b04      	ldr	r3, [pc, #16]	; (8022c18 <LL_APB1_GRP1_EnableClock+0x28>)
 8022c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022c08:	687a      	ldr	r2, [r7, #4]
 8022c0a:	4013      	ands	r3, r2
 8022c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8022c0e:	68fb      	ldr	r3, [r7, #12]
}
 8022c10:	46c0      	nop			; (mov r8, r8)
 8022c12:	46bd      	mov	sp, r7
 8022c14:	b004      	add	sp, #16
 8022c16:	bd80      	pop	{r7, pc}
 8022c18:	40021000 	.word	0x40021000

08022c1c <LL_APB1_GRP1_DisableClock>:
{
 8022c1c:	b580      	push	{r7, lr}
 8022c1e:	b082      	sub	sp, #8
 8022c20:	af00      	add	r7, sp, #0
 8022c22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 8022c24:	4b05      	ldr	r3, [pc, #20]	; (8022c3c <LL_APB1_GRP1_DisableClock+0x20>)
 8022c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	43d9      	mvns	r1, r3
 8022c2c:	4b03      	ldr	r3, [pc, #12]	; (8022c3c <LL_APB1_GRP1_DisableClock+0x20>)
 8022c2e:	400a      	ands	r2, r1
 8022c30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8022c32:	46c0      	nop			; (mov r8, r8)
 8022c34:	46bd      	mov	sp, r7
 8022c36:	b002      	add	sp, #8
 8022c38:	bd80      	pop	{r7, pc}
 8022c3a:	46c0      	nop			; (mov r8, r8)
 8022c3c:	40021000 	.word	0x40021000

08022c40 <LL_IOP_GRP1_EnableClock>:
{
 8022c40:	b580      	push	{r7, lr}
 8022c42:	b084      	sub	sp, #16
 8022c44:	af00      	add	r7, sp, #0
 8022c46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8022c48:	4b07      	ldr	r3, [pc, #28]	; (8022c68 <LL_IOP_GRP1_EnableClock+0x28>)
 8022c4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8022c4c:	4b06      	ldr	r3, [pc, #24]	; (8022c68 <LL_IOP_GRP1_EnableClock+0x28>)
 8022c4e:	687a      	ldr	r2, [r7, #4]
 8022c50:	430a      	orrs	r2, r1
 8022c52:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8022c54:	4b04      	ldr	r3, [pc, #16]	; (8022c68 <LL_IOP_GRP1_EnableClock+0x28>)
 8022c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022c58:	687a      	ldr	r2, [r7, #4]
 8022c5a:	4013      	ands	r3, r2
 8022c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8022c5e:	68fb      	ldr	r3, [r7, #12]
}
 8022c60:	46c0      	nop			; (mov r8, r8)
 8022c62:	46bd      	mov	sp, r7
 8022c64:	b004      	add	sp, #16
 8022c66:	bd80      	pop	{r7, pc}
 8022c68:	40021000 	.word	0x40021000

08022c6c <LL_GPIO_SetPinMode>:
{
 8022c6c:	b580      	push	{r7, lr}
 8022c6e:	b084      	sub	sp, #16
 8022c70:	af00      	add	r7, sp, #0
 8022c72:	60f8      	str	r0, [r7, #12]
 8022c74:	60b9      	str	r1, [r7, #8]
 8022c76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8022c78:	68fb      	ldr	r3, [r7, #12]
 8022c7a:	6819      	ldr	r1, [r3, #0]
 8022c7c:	68bb      	ldr	r3, [r7, #8]
 8022c7e:	435b      	muls	r3, r3
 8022c80:	001a      	movs	r2, r3
 8022c82:	0013      	movs	r3, r2
 8022c84:	005b      	lsls	r3, r3, #1
 8022c86:	189b      	adds	r3, r3, r2
 8022c88:	43db      	mvns	r3, r3
 8022c8a:	400b      	ands	r3, r1
 8022c8c:	001a      	movs	r2, r3
 8022c8e:	68bb      	ldr	r3, [r7, #8]
 8022c90:	435b      	muls	r3, r3
 8022c92:	6879      	ldr	r1, [r7, #4]
 8022c94:	434b      	muls	r3, r1
 8022c96:	431a      	orrs	r2, r3
 8022c98:	68fb      	ldr	r3, [r7, #12]
 8022c9a:	601a      	str	r2, [r3, #0]
}
 8022c9c:	46c0      	nop			; (mov r8, r8)
 8022c9e:	46bd      	mov	sp, r7
 8022ca0:	b004      	add	sp, #16
 8022ca2:	bd80      	pop	{r7, pc}

08022ca4 <LL_GPIO_SetPinOutputType>:
{
 8022ca4:	b580      	push	{r7, lr}
 8022ca6:	b084      	sub	sp, #16
 8022ca8:	af00      	add	r7, sp, #0
 8022caa:	60f8      	str	r0, [r7, #12]
 8022cac:	60b9      	str	r1, [r7, #8]
 8022cae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8022cb0:	68fb      	ldr	r3, [r7, #12]
 8022cb2:	685b      	ldr	r3, [r3, #4]
 8022cb4:	68ba      	ldr	r2, [r7, #8]
 8022cb6:	43d2      	mvns	r2, r2
 8022cb8:	401a      	ands	r2, r3
 8022cba:	68bb      	ldr	r3, [r7, #8]
 8022cbc:	6879      	ldr	r1, [r7, #4]
 8022cbe:	434b      	muls	r3, r1
 8022cc0:	431a      	orrs	r2, r3
 8022cc2:	68fb      	ldr	r3, [r7, #12]
 8022cc4:	605a      	str	r2, [r3, #4]
}
 8022cc6:	46c0      	nop			; (mov r8, r8)
 8022cc8:	46bd      	mov	sp, r7
 8022cca:	b004      	add	sp, #16
 8022ccc:	bd80      	pop	{r7, pc}

08022cce <LL_GPIO_SetPinSpeed>:
{
 8022cce:	b580      	push	{r7, lr}
 8022cd0:	b084      	sub	sp, #16
 8022cd2:	af00      	add	r7, sp, #0
 8022cd4:	60f8      	str	r0, [r7, #12]
 8022cd6:	60b9      	str	r1, [r7, #8]
 8022cd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8022cda:	68fb      	ldr	r3, [r7, #12]
 8022cdc:	6899      	ldr	r1, [r3, #8]
 8022cde:	68bb      	ldr	r3, [r7, #8]
 8022ce0:	435b      	muls	r3, r3
 8022ce2:	001a      	movs	r2, r3
 8022ce4:	0013      	movs	r3, r2
 8022ce6:	005b      	lsls	r3, r3, #1
 8022ce8:	189b      	adds	r3, r3, r2
 8022cea:	43db      	mvns	r3, r3
 8022cec:	400b      	ands	r3, r1
 8022cee:	001a      	movs	r2, r3
 8022cf0:	68bb      	ldr	r3, [r7, #8]
 8022cf2:	435b      	muls	r3, r3
 8022cf4:	6879      	ldr	r1, [r7, #4]
 8022cf6:	434b      	muls	r3, r1
 8022cf8:	431a      	orrs	r2, r3
 8022cfa:	68fb      	ldr	r3, [r7, #12]
 8022cfc:	609a      	str	r2, [r3, #8]
}
 8022cfe:	46c0      	nop			; (mov r8, r8)
 8022d00:	46bd      	mov	sp, r7
 8022d02:	b004      	add	sp, #16
 8022d04:	bd80      	pop	{r7, pc}

08022d06 <LL_GPIO_SetPinPull>:
{
 8022d06:	b580      	push	{r7, lr}
 8022d08:	b084      	sub	sp, #16
 8022d0a:	af00      	add	r7, sp, #0
 8022d0c:	60f8      	str	r0, [r7, #12]
 8022d0e:	60b9      	str	r1, [r7, #8]
 8022d10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8022d12:	68fb      	ldr	r3, [r7, #12]
 8022d14:	68d9      	ldr	r1, [r3, #12]
 8022d16:	68bb      	ldr	r3, [r7, #8]
 8022d18:	435b      	muls	r3, r3
 8022d1a:	001a      	movs	r2, r3
 8022d1c:	0013      	movs	r3, r2
 8022d1e:	005b      	lsls	r3, r3, #1
 8022d20:	189b      	adds	r3, r3, r2
 8022d22:	43db      	mvns	r3, r3
 8022d24:	400b      	ands	r3, r1
 8022d26:	001a      	movs	r2, r3
 8022d28:	68bb      	ldr	r3, [r7, #8]
 8022d2a:	435b      	muls	r3, r3
 8022d2c:	6879      	ldr	r1, [r7, #4]
 8022d2e:	434b      	muls	r3, r1
 8022d30:	431a      	orrs	r2, r3
 8022d32:	68fb      	ldr	r3, [r7, #12]
 8022d34:	60da      	str	r2, [r3, #12]
}
 8022d36:	46c0      	nop			; (mov r8, r8)
 8022d38:	46bd      	mov	sp, r7
 8022d3a:	b004      	add	sp, #16
 8022d3c:	bd80      	pop	{r7, pc}

08022d3e <LL_GPIO_SetAFPin_0_7>:
{
 8022d3e:	b580      	push	{r7, lr}
 8022d40:	b084      	sub	sp, #16
 8022d42:	af00      	add	r7, sp, #0
 8022d44:	60f8      	str	r0, [r7, #12]
 8022d46:	60b9      	str	r1, [r7, #8]
 8022d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8022d4a:	68fb      	ldr	r3, [r7, #12]
 8022d4c:	6a19      	ldr	r1, [r3, #32]
 8022d4e:	68bb      	ldr	r3, [r7, #8]
 8022d50:	435b      	muls	r3, r3
 8022d52:	68ba      	ldr	r2, [r7, #8]
 8022d54:	4353      	muls	r3, r2
 8022d56:	68ba      	ldr	r2, [r7, #8]
 8022d58:	435a      	muls	r2, r3
 8022d5a:	0013      	movs	r3, r2
 8022d5c:	011b      	lsls	r3, r3, #4
 8022d5e:	1a9b      	subs	r3, r3, r2
 8022d60:	43db      	mvns	r3, r3
 8022d62:	400b      	ands	r3, r1
 8022d64:	001a      	movs	r2, r3
 8022d66:	68bb      	ldr	r3, [r7, #8]
 8022d68:	435b      	muls	r3, r3
 8022d6a:	68b9      	ldr	r1, [r7, #8]
 8022d6c:	434b      	muls	r3, r1
 8022d6e:	68b9      	ldr	r1, [r7, #8]
 8022d70:	434b      	muls	r3, r1
 8022d72:	6879      	ldr	r1, [r7, #4]
 8022d74:	434b      	muls	r3, r1
 8022d76:	431a      	orrs	r2, r3
 8022d78:	68fb      	ldr	r3, [r7, #12]
 8022d7a:	621a      	str	r2, [r3, #32]
}
 8022d7c:	46c0      	nop			; (mov r8, r8)
 8022d7e:	46bd      	mov	sp, r7
 8022d80:	b004      	add	sp, #16
 8022d82:	bd80      	pop	{r7, pc}

08022d84 <LL_LPUART_Enable>:
{
 8022d84:	b580      	push	{r7, lr}
 8022d86:	b082      	sub	sp, #8
 8022d88:	af00      	add	r7, sp, #0
 8022d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	681b      	ldr	r3, [r3, #0]
 8022d90:	2201      	movs	r2, #1
 8022d92:	431a      	orrs	r2, r3
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	601a      	str	r2, [r3, #0]
}
 8022d98:	46c0      	nop			; (mov r8, r8)
 8022d9a:	46bd      	mov	sp, r7
 8022d9c:	b002      	add	sp, #8
 8022d9e:	bd80      	pop	{r7, pc}

08022da0 <LL_LPUART_Disable>:
{
 8022da0:	b580      	push	{r7, lr}
 8022da2:	b082      	sub	sp, #8
 8022da4:	af00      	add	r7, sp, #0
 8022da6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	681b      	ldr	r3, [r3, #0]
 8022dac:	2201      	movs	r2, #1
 8022dae:	4393      	bics	r3, r2
 8022db0:	001a      	movs	r2, r3
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	601a      	str	r2, [r3, #0]
}
 8022db6:	46c0      	nop			; (mov r8, r8)
 8022db8:	46bd      	mov	sp, r7
 8022dba:	b002      	add	sp, #8
 8022dbc:	bd80      	pop	{r7, pc}

08022dbe <LL_LPUART_EnableDirectionRx>:
{
 8022dbe:	b580      	push	{r7, lr}
 8022dc0:	b086      	sub	sp, #24
 8022dc2:	af00      	add	r7, sp, #0
 8022dc4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8022dca:	60bb      	str	r3, [r7, #8]
  return(result);
 8022dcc:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8022dce:	617b      	str	r3, [r7, #20]
 8022dd0:	2301      	movs	r3, #1
 8022dd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022dd4:	68fb      	ldr	r3, [r7, #12]
 8022dd6:	f383 8810 	msr	PRIMASK, r3
}
 8022dda:	46c0      	nop			; (mov r8, r8)
 8022ddc:	687b      	ldr	r3, [r7, #4]
 8022dde:	681b      	ldr	r3, [r3, #0]
 8022de0:	2204      	movs	r2, #4
 8022de2:	431a      	orrs	r2, r3
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	601a      	str	r2, [r3, #0]
 8022de8:	697b      	ldr	r3, [r7, #20]
 8022dea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022dec:	693b      	ldr	r3, [r7, #16]
 8022dee:	f383 8810 	msr	PRIMASK, r3
}
 8022df2:	46c0      	nop			; (mov r8, r8)
}
 8022df4:	46c0      	nop			; (mov r8, r8)
 8022df6:	46bd      	mov	sp, r7
 8022df8:	b006      	add	sp, #24
 8022dfa:	bd80      	pop	{r7, pc}

08022dfc <LL_LPUART_IsActiveFlag_TEACK>:
{
 8022dfc:	b580      	push	{r7, lr}
 8022dfe:	b082      	sub	sp, #8
 8022e00:	af00      	add	r7, sp, #0
 8022e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8022e04:	687b      	ldr	r3, [r7, #4]
 8022e06:	69da      	ldr	r2, [r3, #28]
 8022e08:	2380      	movs	r3, #128	; 0x80
 8022e0a:	039b      	lsls	r3, r3, #14
 8022e0c:	401a      	ands	r2, r3
 8022e0e:	2380      	movs	r3, #128	; 0x80
 8022e10:	039b      	lsls	r3, r3, #14
 8022e12:	429a      	cmp	r2, r3
 8022e14:	d101      	bne.n	8022e1a <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8022e16:	2301      	movs	r3, #1
 8022e18:	e000      	b.n	8022e1c <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8022e1a:	2300      	movs	r3, #0
}
 8022e1c:	0018      	movs	r0, r3
 8022e1e:	46bd      	mov	sp, r7
 8022e20:	b002      	add	sp, #8
 8022e22:	bd80      	pop	{r7, pc}

08022e24 <LL_LPUART_ClearFlag_PE>:
{
 8022e24:	b580      	push	{r7, lr}
 8022e26:	b082      	sub	sp, #8
 8022e28:	af00      	add	r7, sp, #0
 8022e2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	2201      	movs	r2, #1
 8022e30:	621a      	str	r2, [r3, #32]
}
 8022e32:	46c0      	nop			; (mov r8, r8)
 8022e34:	46bd      	mov	sp, r7
 8022e36:	b002      	add	sp, #8
 8022e38:	bd80      	pop	{r7, pc}

08022e3a <LL_LPUART_ClearFlag_FE>:
{
 8022e3a:	b580      	push	{r7, lr}
 8022e3c:	b082      	sub	sp, #8
 8022e3e:	af00      	add	r7, sp, #0
 8022e40:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 8022e42:	687b      	ldr	r3, [r7, #4]
 8022e44:	2202      	movs	r2, #2
 8022e46:	621a      	str	r2, [r3, #32]
}
 8022e48:	46c0      	nop			; (mov r8, r8)
 8022e4a:	46bd      	mov	sp, r7
 8022e4c:	b002      	add	sp, #8
 8022e4e:	bd80      	pop	{r7, pc}

08022e50 <LL_LPUART_ClearFlag_NE>:
{
 8022e50:	b580      	push	{r7, lr}
 8022e52:	b082      	sub	sp, #8
 8022e54:	af00      	add	r7, sp, #0
 8022e56:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	2204      	movs	r2, #4
 8022e5c:	621a      	str	r2, [r3, #32]
}
 8022e5e:	46c0      	nop			; (mov r8, r8)
 8022e60:	46bd      	mov	sp, r7
 8022e62:	b002      	add	sp, #8
 8022e64:	bd80      	pop	{r7, pc}

08022e66 <LL_LPUART_ClearFlag_ORE>:
{
 8022e66:	b580      	push	{r7, lr}
 8022e68:	b082      	sub	sp, #8
 8022e6a:	af00      	add	r7, sp, #0
 8022e6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8022e6e:	687b      	ldr	r3, [r7, #4]
 8022e70:	2208      	movs	r2, #8
 8022e72:	621a      	str	r2, [r3, #32]
}
 8022e74:	46c0      	nop			; (mov r8, r8)
 8022e76:	46bd      	mov	sp, r7
 8022e78:	b002      	add	sp, #8
 8022e7a:	bd80      	pop	{r7, pc}

08022e7c <LL_LPUART_ClearFlag_TC>:
{
 8022e7c:	b580      	push	{r7, lr}
 8022e7e:	b082      	sub	sp, #8
 8022e80:	af00      	add	r7, sp, #0
 8022e82:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	2240      	movs	r2, #64	; 0x40
 8022e88:	621a      	str	r2, [r3, #32]
}
 8022e8a:	46c0      	nop			; (mov r8, r8)
 8022e8c:	46bd      	mov	sp, r7
 8022e8e:	b002      	add	sp, #8
 8022e90:	bd80      	pop	{r7, pc}

08022e92 <LL_LPUART_EnableIT_RXNE_RXFNE>:
{
 8022e92:	b580      	push	{r7, lr}
 8022e94:	b086      	sub	sp, #24
 8022e96:	af00      	add	r7, sp, #0
 8022e98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8022e9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8022ea0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8022ea2:	617b      	str	r3, [r7, #20]
 8022ea4:	2301      	movs	r3, #1
 8022ea6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022ea8:	68fb      	ldr	r3, [r7, #12]
 8022eaa:	f383 8810 	msr	PRIMASK, r3
}
 8022eae:	46c0      	nop			; (mov r8, r8)
 8022eb0:	687b      	ldr	r3, [r7, #4]
 8022eb2:	681b      	ldr	r3, [r3, #0]
 8022eb4:	2220      	movs	r2, #32
 8022eb6:	431a      	orrs	r2, r3
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	601a      	str	r2, [r3, #0]
 8022ebc:	697b      	ldr	r3, [r7, #20]
 8022ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022ec0:	693b      	ldr	r3, [r7, #16]
 8022ec2:	f383 8810 	msr	PRIMASK, r3
}
 8022ec6:	46c0      	nop			; (mov r8, r8)
}
 8022ec8:	46c0      	nop			; (mov r8, r8)
 8022eca:	46bd      	mov	sp, r7
 8022ecc:	b006      	add	sp, #24
 8022ece:	bd80      	pop	{r7, pc}

08022ed0 <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 8022ed0:	b580      	push	{r7, lr}
 8022ed2:	b086      	sub	sp, #24
 8022ed4:	af00      	add	r7, sp, #0
 8022ed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8022edc:	60bb      	str	r3, [r7, #8]
  return(result);
 8022ede:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8022ee0:	617b      	str	r3, [r7, #20]
 8022ee2:	2301      	movs	r3, #1
 8022ee4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022ee6:	68fb      	ldr	r3, [r7, #12]
 8022ee8:	f383 8810 	msr	PRIMASK, r3
}
 8022eec:	46c0      	nop			; (mov r8, r8)
 8022eee:	687b      	ldr	r3, [r7, #4]
 8022ef0:	681b      	ldr	r3, [r3, #0]
 8022ef2:	2240      	movs	r2, #64	; 0x40
 8022ef4:	431a      	orrs	r2, r3
 8022ef6:	687b      	ldr	r3, [r7, #4]
 8022ef8:	601a      	str	r2, [r3, #0]
 8022efa:	697b      	ldr	r3, [r7, #20]
 8022efc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022efe:	693b      	ldr	r3, [r7, #16]
 8022f00:	f383 8810 	msr	PRIMASK, r3
}
 8022f04:	46c0      	nop			; (mov r8, r8)
}
 8022f06:	46c0      	nop			; (mov r8, r8)
 8022f08:	46bd      	mov	sp, r7
 8022f0a:	b006      	add	sp, #24
 8022f0c:	bd80      	pop	{r7, pc}

08022f0e <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 8022f0e:	b580      	push	{r7, lr}
 8022f10:	b086      	sub	sp, #24
 8022f12:	af00      	add	r7, sp, #0
 8022f14:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022f16:	f3ef 8310 	mrs	r3, PRIMASK
 8022f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8022f1c:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8022f1e:	617b      	str	r3, [r7, #20]
 8022f20:	2301      	movs	r3, #1
 8022f22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022f24:	68fb      	ldr	r3, [r7, #12]
 8022f26:	f383 8810 	msr	PRIMASK, r3
}
 8022f2a:	46c0      	nop			; (mov r8, r8)
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	689b      	ldr	r3, [r3, #8]
 8022f30:	2201      	movs	r2, #1
 8022f32:	431a      	orrs	r2, r3
 8022f34:	687b      	ldr	r3, [r7, #4]
 8022f36:	609a      	str	r2, [r3, #8]
 8022f38:	697b      	ldr	r3, [r7, #20]
 8022f3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022f3c:	693b      	ldr	r3, [r7, #16]
 8022f3e:	f383 8810 	msr	PRIMASK, r3
}
 8022f42:	46c0      	nop			; (mov r8, r8)
}
 8022f44:	46c0      	nop			; (mov r8, r8)
 8022f46:	46bd      	mov	sp, r7
 8022f48:	b006      	add	sp, #24
 8022f4a:	bd80      	pop	{r7, pc}

08022f4c <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 8022f4c:	b580      	push	{r7, lr}
 8022f4e:	b086      	sub	sp, #24
 8022f50:	af00      	add	r7, sp, #0
 8022f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022f54:	f3ef 8310 	mrs	r3, PRIMASK
 8022f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8022f5a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8022f5c:	617b      	str	r3, [r7, #20]
 8022f5e:	2301      	movs	r3, #1
 8022f60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022f62:	68fb      	ldr	r3, [r7, #12]
 8022f64:	f383 8810 	msr	PRIMASK, r3
}
 8022f68:	46c0      	nop			; (mov r8, r8)
 8022f6a:	687b      	ldr	r3, [r7, #4]
 8022f6c:	681b      	ldr	r3, [r3, #0]
 8022f6e:	2240      	movs	r2, #64	; 0x40
 8022f70:	4393      	bics	r3, r2
 8022f72:	001a      	movs	r2, r3
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	601a      	str	r2, [r3, #0]
 8022f78:	697b      	ldr	r3, [r7, #20]
 8022f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022f7c:	693b      	ldr	r3, [r7, #16]
 8022f7e:	f383 8810 	msr	PRIMASK, r3
}
 8022f82:	46c0      	nop			; (mov r8, r8)
}
 8022f84:	46c0      	nop			; (mov r8, r8)
 8022f86:	46bd      	mov	sp, r7
 8022f88:	b006      	add	sp, #24
 8022f8a:	bd80      	pop	{r7, pc}

08022f8c <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *LPUARTx)
{
 8022f8c:	b580      	push	{r7, lr}
 8022f8e:	b082      	sub	sp, #8
 8022f90:	af00      	add	r7, sp, #0
 8022f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	681b      	ldr	r3, [r3, #0]
 8022f98:	2220      	movs	r2, #32
 8022f9a:	4013      	ands	r3, r2
 8022f9c:	2b20      	cmp	r3, #32
 8022f9e:	d101      	bne.n	8022fa4 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 8022fa0:	2301      	movs	r3, #1
 8022fa2:	e000      	b.n	8022fa6 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8022fa4:	2300      	movs	r3, #0
}
 8022fa6:	0018      	movs	r0, r3
 8022fa8:	46bd      	mov	sp, r7
 8022faa:	b002      	add	sp, #8
 8022fac:	bd80      	pop	{r7, pc}

08022fae <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(const USART_TypeDef *LPUARTx)
{
 8022fae:	b580      	push	{r7, lr}
 8022fb0:	b082      	sub	sp, #8
 8022fb2:	af00      	add	r7, sp, #0
 8022fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	681b      	ldr	r3, [r3, #0]
 8022fba:	2240      	movs	r2, #64	; 0x40
 8022fbc:	4013      	ands	r3, r2
 8022fbe:	2b40      	cmp	r3, #64	; 0x40
 8022fc0:	d101      	bne.n	8022fc6 <LL_LPUART_IsEnabledIT_TC+0x18>
 8022fc2:	2301      	movs	r3, #1
 8022fc4:	e000      	b.n	8022fc8 <LL_LPUART_IsEnabledIT_TC+0x1a>
 8022fc6:	2300      	movs	r3, #0
}
 8022fc8:	0018      	movs	r0, r3
 8022fca:	46bd      	mov	sp, r7
 8022fcc:	b002      	add	sp, #8
 8022fce:	bd80      	pop	{r7, pc}

08022fd0 <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(const USART_TypeDef *LPUARTx)
{
 8022fd0:	b580      	push	{r7, lr}
 8022fd2:	b082      	sub	sp, #8
 8022fd4:	af00      	add	r7, sp, #0
 8022fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 8022fd8:	687b      	ldr	r3, [r7, #4]
 8022fda:	681a      	ldr	r2, [r3, #0]
 8022fdc:	2380      	movs	r3, #128	; 0x80
 8022fde:	005b      	lsls	r3, r3, #1
 8022fe0:	401a      	ands	r2, r3
 8022fe2:	2380      	movs	r3, #128	; 0x80
 8022fe4:	005b      	lsls	r3, r3, #1
 8022fe6:	429a      	cmp	r2, r3
 8022fe8:	d101      	bne.n	8022fee <LL_LPUART_IsEnabledIT_PE+0x1e>
 8022fea:	2301      	movs	r3, #1
 8022fec:	e000      	b.n	8022ff0 <LL_LPUART_IsEnabledIT_PE+0x20>
 8022fee:	2300      	movs	r3, #0
}
 8022ff0:	0018      	movs	r0, r3
 8022ff2:	46bd      	mov	sp, r7
 8022ff4:	b002      	add	sp, #8
 8022ff6:	bd80      	pop	{r7, pc}

08022ff8 <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(const USART_TypeDef *LPUARTx)
{
 8022ff8:	b580      	push	{r7, lr}
 8022ffa:	b082      	sub	sp, #8
 8022ffc:	af00      	add	r7, sp, #0
 8022ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8023000:	687b      	ldr	r3, [r7, #4]
 8023002:	689b      	ldr	r3, [r3, #8]
 8023004:	2201      	movs	r2, #1
 8023006:	4013      	ands	r3, r2
 8023008:	2b01      	cmp	r3, #1
 802300a:	d101      	bne.n	8023010 <LL_LPUART_IsEnabledIT_ERROR+0x18>
 802300c:	2301      	movs	r3, #1
 802300e:	e000      	b.n	8023012 <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 8023010:	2300      	movs	r3, #0
}
 8023012:	0018      	movs	r0, r3
 8023014:	46bd      	mov	sp, r7
 8023016:	b002      	add	sp, #8
 8023018:	bd80      	pop	{r7, pc}

0802301a <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 802301a:	b580      	push	{r7, lr}
 802301c:	b086      	sub	sp, #24
 802301e:	af00      	add	r7, sp, #0
 8023020:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8023022:	f3ef 8310 	mrs	r3, PRIMASK
 8023026:	60bb      	str	r3, [r7, #8]
  return(result);
 8023028:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 802302a:	617b      	str	r3, [r7, #20]
 802302c:	2301      	movs	r3, #1
 802302e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8023030:	68fb      	ldr	r3, [r7, #12]
 8023032:	f383 8810 	msr	PRIMASK, r3
}
 8023036:	46c0      	nop			; (mov r8, r8)
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	689b      	ldr	r3, [r3, #8]
 802303c:	2280      	movs	r2, #128	; 0x80
 802303e:	431a      	orrs	r2, r3
 8023040:	687b      	ldr	r3, [r7, #4]
 8023042:	609a      	str	r2, [r3, #8]
 8023044:	697b      	ldr	r3, [r7, #20]
 8023046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8023048:	693b      	ldr	r3, [r7, #16]
 802304a:	f383 8810 	msr	PRIMASK, r3
}
 802304e:	46c0      	nop			; (mov r8, r8)
}
 8023050:	46c0      	nop			; (mov r8, r8)
 8023052:	46bd      	mov	sp, r7
 8023054:	b006      	add	sp, #24
 8023056:	bd80      	pop	{r7, pc}

08023058 <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 8023058:	b580      	push	{r7, lr}
 802305a:	b084      	sub	sp, #16
 802305c:	af00      	add	r7, sp, #0
 802305e:	6078      	str	r0, [r7, #4]
 8023060:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 8023062:	683b      	ldr	r3, [r7, #0]
 8023064:	2b00      	cmp	r3, #0
 8023066:	d103      	bne.n	8023070 <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 8023068:	687b      	ldr	r3, [r7, #4]
 802306a:	3328      	adds	r3, #40	; 0x28
 802306c:	60fb      	str	r3, [r7, #12]
 802306e:	e002      	b.n	8023076 <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 8023070:	687b      	ldr	r3, [r7, #4]
 8023072:	3324      	adds	r3, #36	; 0x24
 8023074:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8023076:	68fb      	ldr	r3, [r7, #12]
}
 8023078:	0018      	movs	r0, r3
 802307a:	46bd      	mov	sp, r7
 802307c:	b004      	add	sp, #16
 802307e:	bd80      	pop	{r7, pc}

08023080 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 8023080:	b580      	push	{r7, lr}
 8023082:	b082      	sub	sp, #8
 8023084:	af00      	add	r7, sp, #0
 8023086:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8023088:	687b      	ldr	r3, [r7, #4]
 802308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802308c:	b2db      	uxtb	r3, r3
}
 802308e:	0018      	movs	r0, r3
 8023090:	46bd      	mov	sp, r7
 8023092:	b002      	add	sp, #8
 8023094:	bd80      	pop	{r7, pc}
	...

08023098 <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 8023098:	b580      	push	{r7, lr}
 802309a:	b088      	sub	sp, #32
 802309c:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 802309e:	2001      	movs	r0, #1
 80230a0:	f7ff fdce 	bl	8022c40 <LL_IOP_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 80230a4:	2001      	movs	r0, #1
 80230a6:	f7ff fdcb 	bl	8022c40 <LL_IOP_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 80230aa:	23a0      	movs	r3, #160	; 0xa0
 80230ac:	05db      	lsls	r3, r3, #23
 80230ae:	2206      	movs	r2, #6
 80230b0:	2104      	movs	r1, #4
 80230b2:	0018      	movs	r0, r3
 80230b4:	f7ff fe43 	bl	8022d3e <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 80230b8:	23a0      	movs	r3, #160	; 0xa0
 80230ba:	05db      	lsls	r3, r3, #23
 80230bc:	2202      	movs	r2, #2
 80230be:	2104      	movs	r1, #4
 80230c0:	0018      	movs	r0, r3
 80230c2:	f7ff fdd3 	bl	8022c6c <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 80230c6:	23a0      	movs	r3, #160	; 0xa0
 80230c8:	05db      	lsls	r3, r3, #23
 80230ca:	2202      	movs	r2, #2
 80230cc:	2104      	movs	r1, #4
 80230ce:	0018      	movs	r0, r3
 80230d0:	f7ff fdfd 	bl	8022cce <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 80230d4:	23a0      	movs	r3, #160	; 0xa0
 80230d6:	05db      	lsls	r3, r3, #23
 80230d8:	2200      	movs	r2, #0
 80230da:	2104      	movs	r1, #4
 80230dc:	0018      	movs	r0, r3
 80230de:	f7ff fde1 	bl	8022ca4 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 80230e2:	23a0      	movs	r3, #160	; 0xa0
 80230e4:	05db      	lsls	r3, r3, #23
 80230e6:	2201      	movs	r2, #1
 80230e8:	2104      	movs	r1, #4
 80230ea:	0018      	movs	r0, r3
 80230ec:	f7ff fe0b 	bl	8022d06 <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 80230f0:	23a0      	movs	r3, #160	; 0xa0
 80230f2:	05db      	lsls	r3, r3, #23
 80230f4:	2206      	movs	r2, #6
 80230f6:	2108      	movs	r1, #8
 80230f8:	0018      	movs	r0, r3
 80230fa:	f7ff fe20 	bl	8022d3e <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 80230fe:	23a0      	movs	r3, #160	; 0xa0
 8023100:	05db      	lsls	r3, r3, #23
 8023102:	2202      	movs	r2, #2
 8023104:	2108      	movs	r1, #8
 8023106:	0018      	movs	r0, r3
 8023108:	f7ff fdb0 	bl	8022c6c <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 802310c:	23a0      	movs	r3, #160	; 0xa0
 802310e:	05db      	lsls	r3, r3, #23
 8023110:	2202      	movs	r2, #2
 8023112:	2108      	movs	r1, #8
 8023114:	0018      	movs	r0, r3
 8023116:	f7ff fdda 	bl	8022cce <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 802311a:	23a0      	movs	r3, #160	; 0xa0
 802311c:	05db      	lsls	r3, r3, #23
 802311e:	2200      	movs	r2, #0
 8023120:	2108      	movs	r1, #8
 8023122:	0018      	movs	r0, r3
 8023124:	f7ff fdbe 	bl	8022ca4 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 8023128:	23a0      	movs	r3, #160	; 0xa0
 802312a:	05db      	lsls	r3, r3, #23
 802312c:	2201      	movs	r2, #1
 802312e:	2108      	movs	r1, #8
 8023130:	0018      	movs	r0, r3
 8023132:	f7ff fde8 	bl	8022d06 <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 8023136:	2380      	movs	r3, #128	; 0x80
 8023138:	035b      	lsls	r3, r3, #13
 802313a:	0018      	movs	r0, r3
 802313c:	f7ff fd58 	bl	8022bf0 <LL_APB1_GRP1_EnableClock>
  {
    /* Configure LPUART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 8023140:	4b31      	ldr	r3, [pc, #196]	; (8023208 <HW_TRACER_EMB_Init+0x170>)
 8023142:	0018      	movs	r0, r3
 8023144:	f7ff fe2c 	bl	8022da0 <LL_LPUART_Disable>
    /*  - Parity              : LL_LPUART_PARITY_NONE           */
    /*  - TransferDirection   : LL_LPUART_DIRECTION_TX          */
    /*  - HardwareFlowControl : LL_LPUART_HWCONTROL_NONE        */
    /*  - OverSampling        : LL_LPUART_OVERSAMPLING_16       */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_LPUART_PRESCALER_DIV1;
 8023148:	003b      	movs	r3, r7
 802314a:	2200      	movs	r2, #0
 802314c:	601a      	str	r2, [r3, #0]
#endif
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 802314e:	003b      	movs	r3, r7
 8023150:	22e1      	movs	r2, #225	; 0xe1
 8023152:	0312      	lsls	r2, r2, #12
 8023154:	605a      	str	r2, [r3, #4]
    lpuart_initstruct.DataWidth           = LL_LPUART_DATAWIDTH_8B;
 8023156:	003b      	movs	r3, r7
 8023158:	2200      	movs	r2, #0
 802315a:	609a      	str	r2, [r3, #8]
    lpuart_initstruct.StopBits            = LL_LPUART_STOPBITS_1;
 802315c:	003b      	movs	r3, r7
 802315e:	2200      	movs	r2, #0
 8023160:	60da      	str	r2, [r3, #12]
    lpuart_initstruct.Parity              = LL_LPUART_PARITY_NONE;
 8023162:	003b      	movs	r3, r7
 8023164:	2200      	movs	r2, #0
 8023166:	611a      	str	r2, [r3, #16]
    lpuart_initstruct.TransferDirection   = LL_LPUART_DIRECTION_TX;
 8023168:	003b      	movs	r3, r7
 802316a:	2208      	movs	r2, #8
 802316c:	615a      	str	r2, [r3, #20]
#if defined(USART_CR3_RTSE)
    lpuart_initstruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 802316e:	003b      	movs	r3, r7
 8023170:	2200      	movs	r2, #0
 8023172:	619a      	str	r2, [r3, #24]
#endif

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 8023174:	003b      	movs	r3, r7
 8023176:	4a24      	ldr	r2, [pc, #144]	; (8023208 <HW_TRACER_EMB_Init+0x170>)
 8023178:	0019      	movs	r1, r3
 802317a:	0010      	movs	r0, r2
 802317c:	f7ed f9aa 	bl	80104d4 <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 8023180:	4b21      	ldr	r3, [pc, #132]	; (8023208 <HW_TRACER_EMB_Init+0x170>)
 8023182:	0018      	movs	r0, r3
 8023184:	f7ff fdfe 	bl	8022d84 <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 8023188:	4b1f      	ldr	r3, [pc, #124]	; (8023208 <HW_TRACER_EMB_Init+0x170>)
 802318a:	0018      	movs	r0, r3
 802318c:	f7ff fe36 	bl	8022dfc <LL_LPUART_IsActiveFlag_TEACK>
 8023190:	0003      	movs	r3, r0
 8023192:	61fb      	str	r3, [r7, #28]
    /* Polling USART initialisation */
    while (_temp1 == 0U)
 8023194:	e005      	b.n	80231a2 <HW_TRACER_EMB_Init+0x10a>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 8023196:	4b1c      	ldr	r3, [pc, #112]	; (8023208 <HW_TRACER_EMB_Init+0x170>)
 8023198:	0018      	movs	r0, r3
 802319a:	f7ff fe2f 	bl	8022dfc <LL_LPUART_IsActiveFlag_TEACK>
 802319e:	0003      	movs	r3, r0
 80231a0:	61fb      	str	r3, [r7, #28]
    while (_temp1 == 0U)
 80231a2:	69fb      	ldr	r3, [r7, #28]
 80231a4:	2b00      	cmp	r3, #0
 80231a6:	d0f6      	beq.n	8023196 <HW_TRACER_EMB_Init+0xfe>
  }
#endif /* TRACER_EMB_IS_INSTANCE_LPUART_TYPE == 0UL */

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 80231a8:	2001      	movs	r0, #1
 80231aa:	f7ff fd0b 	bl	8022bc4 <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 80231ae:	4a17      	ldr	r2, [pc, #92]	; (802320c <HW_TRACER_EMB_Init+0x174>)
 80231b0:	4b17      	ldr	r3, [pc, #92]	; (8023210 <HW_TRACER_EMB_Init+0x178>)
 80231b2:	2102      	movs	r1, #2
 80231b4:	0018      	movs	r0, r3
 80231b6:	f7ff fbff 	bl	80229b8 <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID) || defined(DMA_CSELR_C1S)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 80231ba:	4b15      	ldr	r3, [pc, #84]	; (8023210 <HW_TRACER_EMB_Init+0x178>)
 80231bc:	220f      	movs	r2, #15
 80231be:	2102      	movs	r1, #2
 80231c0:	0018      	movs	r0, r3
 80231c2:	f7ff fc93 	bl	8022aec <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 80231c6:	4b12      	ldr	r3, [pc, #72]	; (8023210 <HW_TRACER_EMB_Init+0x178>)
 80231c8:	2102      	movs	r1, #2
 80231ca:	0018      	movs	r0, r3
 80231cc:	f7ff fcda 	bl	8022b84 <LL_DMA_EnableIT_TC>
#endif /* TRACER_EMB_DMA_MODE == 1*/

  /* Configure the interrupt for TX */
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
 80231d0:	2100      	movs	r1, #0
 80231d2:	200a      	movs	r0, #10
 80231d4:	f7ff fb42 	bl	802285c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 80231d8:	200a      	movs	r0, #10
 80231da:	f7ff fb25 	bl	8022828 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#endif /* TRACER_EMB_TX_DMA_PRIORITY */
#endif /* TRACER_EMB_DMA_MODE == 1 */
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
 80231de:	2103      	movs	r1, #3
 80231e0:	201d      	movs	r0, #29
 80231e2:	f7ff fb3b 	bl	802285c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 80231e6:	201d      	movs	r0, #29
 80231e8:	f7ff fb1e 	bl	8022828 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#endif /* TRACER_EMB_TX_IRQ_PRIORITY */

  /* Disable the UART */
  if (fptr_rx == NULL)
 80231ec:	4b09      	ldr	r3, [pc, #36]	; (8023214 <HW_TRACER_EMB_Init+0x17c>)
 80231ee:	681b      	ldr	r3, [r3, #0]
 80231f0:	2b00      	cmp	r3, #0
 80231f2:	d105      	bne.n	8023200 <HW_TRACER_EMB_Init+0x168>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 80231f4:	2380      	movs	r3, #128	; 0x80
 80231f6:	035b      	lsls	r3, r3, #13
 80231f8:	0018      	movs	r0, r3
 80231fa:	f7ff fd0f 	bl	8022c1c <LL_APB1_GRP1_DisableClock>
  }
  return;
 80231fe:	46c0      	nop			; (mov r8, r8)
 8023200:	46c0      	nop			; (mov r8, r8)
}
 8023202:	46bd      	mov	sp, r7
 8023204:	b008      	add	sp, #32
 8023206:	bd80      	pop	{r7, pc}
 8023208:	40008000 	.word	0x40008000
 802320c:	00002090 	.word	0x00002090
 8023210:	40020000 	.word	0x40020000
 8023214:	20005034 	.word	0x20005034

08023218 <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 8023218:	b580      	push	{r7, lr}
 802321a:	b082      	sub	sp, #8
 802321c:	af00      	add	r7, sp, #0
 802321e:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 8023220:	4b05      	ldr	r3, [pc, #20]	; (8023238 <HW_TRACER_EMB_RegisterRxCallback+0x20>)
 8023222:	687a      	ldr	r2, [r7, #4]
 8023224:	601a      	str	r2, [r3, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 8023226:	2380      	movs	r3, #128	; 0x80
 8023228:	035b      	lsls	r3, r3, #13
 802322a:	0018      	movs	r0, r3
 802322c:	f7ff fce0 	bl	8022bf0 <LL_APB1_GRP1_EnableClock>
}
 8023230:	46c0      	nop			; (mov r8, r8)
 8023232:	46bd      	mov	sp, r7
 8023234:	b002      	add	sp, #8
 8023236:	bd80      	pop	{r7, pc}
 8023238:	20005034 	.word	0x20005034

0802323c <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 802323c:	b580      	push	{r7, lr}
 802323e:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 8023240:	4b0a      	ldr	r3, [pc, #40]	; (802326c <HW_TRACER_EMB_StartRX+0x30>)
 8023242:	0018      	movs	r0, r3
 8023244:	f7ff fe25 	bl	8022e92 <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 8023248:	4b08      	ldr	r3, [pc, #32]	; (802326c <HW_TRACER_EMB_StartRX+0x30>)
 802324a:	0018      	movs	r0, r3
 802324c:	f7ff fe5f 	bl	8022f0e <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 8023250:	4b06      	ldr	r3, [pc, #24]	; (802326c <HW_TRACER_EMB_StartRX+0x30>)
 8023252:	0018      	movs	r0, r3
 8023254:	f7ff fdb3 	bl	8022dbe <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 8023258:	2103      	movs	r1, #3
 802325a:	201d      	movs	r0, #29
 802325c:	f7ff fafe 	bl	802285c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 8023260:	201d      	movs	r0, #29
 8023262:	f7ff fae1 	bl	8022828 <__NVIC_EnableIRQ>
}
 8023266:	46c0      	nop			; (mov r8, r8)
 8023268:	46bd      	mov	sp, r7
 802326a:	bd80      	pop	{r7, pc}
 802326c:	40008000 	.word	0x40008000

08023270 <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 8023270:	b580      	push	{r7, lr}
 8023272:	af00      	add	r7, sp, #0
  if (TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE) == 1UL)
 8023274:	4b08      	ldr	r3, [pc, #32]	; (8023298 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 8023276:	0018      	movs	r0, r3
 8023278:	f7ff fc64 	bl	8022b44 <LL_DMA_IsActiveFlag_TC3>
 802327c:	0003      	movs	r3, r0
 802327e:	2b01      	cmp	r3, #1
 8023280:	d107      	bne.n	8023292 <HW_TRACER_EMB_IRQHandlerDMA+0x22>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 8023282:	4b06      	ldr	r3, [pc, #24]	; (802329c <HW_TRACER_EMB_IRQHandlerDMA+0x2c>)
 8023284:	0018      	movs	r0, r3
 8023286:	f7ff fe23 	bl	8022ed0 <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 802328a:	4b03      	ldr	r3, [pc, #12]	; (8023298 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 802328c:	0018      	movs	r0, r3
 802328e:	f7ff fc6d 	bl	8022b6c <LL_DMA_ClearFlag_GI3>
  }
}
 8023292:	46c0      	nop			; (mov r8, r8)
 8023294:	46bd      	mov	sp, r7
 8023296:	bd80      	pop	{r7, pc}
 8023298:	40020000 	.word	0x40020000
 802329c:	40008000 	.word	0x40008000

080232a0 <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 80232a0:	b580      	push	{r7, lr}
 80232a2:	b086      	sub	sp, #24
 80232a4:	af00      	add	r7, sp, #0
  uint32_t _temp1;
  uint32_t  _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 80232a6:	2317      	movs	r3, #23
 80232a8:	18fb      	adds	r3, r7, r3
 80232aa:	2200      	movs	r2, #0
 80232ac:	701a      	strb	r2, [r3, #0]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 80232ae:	4b60      	ldr	r3, [pc, #384]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80232b0:	69db      	ldr	r3, [r3, #28]
 80232b2:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 80232b4:	4b5e      	ldr	r3, [pc, #376]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80232b6:	0018      	movs	r0, r3
 80232b8:	f7ff fe68 	bl	8022f8c <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 80232bc:	0003      	movs	r3, r0
 80232be:	60fb      	str	r3, [r7, #12]

  /* If Reception is ongoing */
  if (_temp1 == 1UL)
 80232c0:	68fb      	ldr	r3, [r7, #12]
 80232c2:	2b01      	cmp	r3, #1
 80232c4:	d000      	beq.n	80232c8 <HW_TRACER_EMB_IRQHandlerUSART+0x28>
 80232c6:	e087      	b.n	80233d8 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 80232c8:	693b      	ldr	r3, [r7, #16]
 80232ca:	220f      	movs	r2, #15
 80232cc:	4013      	ands	r3, r2
 80232ce:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 80232d0:	693b      	ldr	r3, [r7, #16]
 80232d2:	2220      	movs	r2, #32
 80232d4:	4013      	ands	r3, r2
 80232d6:	d015      	beq.n	8023304 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
        && (_errorflags == 0UL))
 80232d8:	68bb      	ldr	r3, [r7, #8]
 80232da:	2b00      	cmp	r3, #0
 80232dc:	d112      	bne.n	8023304 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 80232de:	4b54      	ldr	r3, [pc, #336]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80232e0:	0018      	movs	r0, r3
 80232e2:	f7ff fecd 	bl	8023080 <LL_LPUART_ReceiveData8>
 80232e6:	0003      	movs	r3, r0
 80232e8:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 80232ea:	4b52      	ldr	r3, [pc, #328]	; (8023434 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80232ec:	681b      	ldr	r3, [r3, #0]
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	d100      	bne.n	80232f4 <HW_TRACER_EMB_IRQHandlerUSART+0x54>
 80232f2:	e097      	b.n	8023424 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
      {
        fptr_rx(received_char, 0U);
 80232f4:	4b4f      	ldr	r3, [pc, #316]	; (8023434 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80232f6:	681b      	ldr	r3, [r3, #0]
 80232f8:	683a      	ldr	r2, [r7, #0]
 80232fa:	b2d2      	uxtb	r2, r2
 80232fc:	2100      	movs	r1, #0
 80232fe:	0010      	movs	r0, r2
 8023300:	4798      	blx	r3
      }
      return;
 8023302:	e08f      	b.n	8023424 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
    }
    else if (_errorflags != 0UL)
 8023304:	68bb      	ldr	r3, [r7, #8]
 8023306:	2b00      	cmp	r3, #0
 8023308:	d066      	beq.n	80233d8 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 802330a:	693b      	ldr	r3, [r7, #16]
 802330c:	2220      	movs	r2, #32
 802330e:	4013      	ands	r3, r2
 8023310:	d012      	beq.n	8023338 <HW_TRACER_EMB_IRQHandlerUSART+0x98>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 8023312:	4b47      	ldr	r3, [pc, #284]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8023314:	0018      	movs	r0, r3
 8023316:	f7ff feb3 	bl	8023080 <LL_LPUART_ReceiveData8>
 802331a:	0003      	movs	r3, r0
 802331c:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 802331e:	4b45      	ldr	r3, [pc, #276]	; (8023434 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8023320:	681b      	ldr	r3, [r3, #0]
 8023322:	2b00      	cmp	r3, #0
 8023324:	d100      	bne.n	8023328 <HW_TRACER_EMB_IRQHandlerUSART+0x88>
 8023326:	e07f      	b.n	8023428 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
        {
          fptr_rx(received_char, 0U);
 8023328:	4b42      	ldr	r3, [pc, #264]	; (8023434 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	683a      	ldr	r2, [r7, #0]
 802332e:	b2d2      	uxtb	r2, r2
 8023330:	2100      	movs	r1, #0
 8023332:	0010      	movs	r0, r2
 8023334:	4798      	blx	r3
        }
        return;
 8023336:	e077      	b.n	8023428 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 8023338:	4b3d      	ldr	r3, [pc, #244]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802333a:	0018      	movs	r0, r3
 802333c:	f7ff fe48 	bl	8022fd0 <LL_LPUART_IsEnabledIT_PE>
 8023340:	0003      	movs	r3, r0
 8023342:	607b      	str	r3, [r7, #4]
      if ((_temp2 == 1U)
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	2b01      	cmp	r3, #1
 8023348:	d10b      	bne.n	8023362 <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
          && (TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))))
 802334a:	68bb      	ldr	r3, [r7, #8]
 802334c:	2201      	movs	r2, #1
 802334e:	4013      	ands	r3, r2
 8023350:	d007      	beq.n	8023362 <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 8023352:	4b37      	ldr	r3, [pc, #220]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8023354:	0018      	movs	r0, r3
 8023356:	f7ff fd65 	bl	8022e24 <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 802335a:	2317      	movs	r3, #23
 802335c:	18fb      	adds	r3, r7, r3
 802335e:	2201      	movs	r2, #1
 8023360:	701a      	strb	r2, [r3, #0]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 8023362:	4b33      	ldr	r3, [pc, #204]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8023364:	0018      	movs	r0, r3
 8023366:	f7ff fe47 	bl	8022ff8 <LL_LPUART_IsEnabledIT_ERROR>
 802336a:	0003      	movs	r3, r0
 802336c:	607b      	str	r3, [r7, #4]
      if (_temp2 == 1U)
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	2b01      	cmp	r3, #1
 8023372:	d123      	bne.n	80233bc <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 8023374:	68bb      	ldr	r3, [r7, #8]
 8023376:	2202      	movs	r2, #2
 8023378:	4013      	ands	r3, r2
 802337a:	d007      	beq.n	802338c <HW_TRACER_EMB_IRQHandlerUSART+0xec>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 802337c:	4b2c      	ldr	r3, [pc, #176]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802337e:	0018      	movs	r0, r3
 8023380:	f7ff fd5b 	bl	8022e3a <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 8023384:	2317      	movs	r3, #23
 8023386:	18fb      	adds	r3, r7, r3
 8023388:	2201      	movs	r2, #1
 802338a:	701a      	strb	r2, [r3, #0]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 802338c:	68bb      	ldr	r3, [r7, #8]
 802338e:	2208      	movs	r2, #8
 8023390:	4013      	ands	r3, r2
 8023392:	d007      	beq.n	80233a4 <HW_TRACER_EMB_IRQHandlerUSART+0x104>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 8023394:	4b26      	ldr	r3, [pc, #152]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8023396:	0018      	movs	r0, r3
 8023398:	f7ff fd65 	bl	8022e66 <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 802339c:	2317      	movs	r3, #23
 802339e:	18fb      	adds	r3, r7, r3
 80233a0:	2201      	movs	r2, #1
 80233a2:	701a      	strb	r2, [r3, #0]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 80233a4:	68bb      	ldr	r3, [r7, #8]
 80233a6:	2204      	movs	r2, #4
 80233a8:	4013      	ands	r3, r2
 80233aa:	d007      	beq.n	80233bc <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 80233ac:	4b20      	ldr	r3, [pc, #128]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80233ae:	0018      	movs	r0, r3
 80233b0:	f7ff fd4e 	bl	8022e50 <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 80233b4:	2317      	movs	r3, #23
 80233b6:	18fb      	adds	r3, r7, r3
 80233b8:	2201      	movs	r2, #1
 80233ba:	701a      	strb	r2, [r3, #0]
        }
      }

      if ((_error == 1U) && (fptr_rx != NULL))
 80233bc:	2317      	movs	r3, #23
 80233be:	18fb      	adds	r3, r7, r3
 80233c0:	781b      	ldrb	r3, [r3, #0]
 80233c2:	2b01      	cmp	r3, #1
 80233c4:	d108      	bne.n	80233d8 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
 80233c6:	4b1b      	ldr	r3, [pc, #108]	; (8023434 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80233c8:	681b      	ldr	r3, [r3, #0]
 80233ca:	2b00      	cmp	r3, #0
 80233cc:	d004      	beq.n	80233d8 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 80233ce:	4b19      	ldr	r3, [pc, #100]	; (8023434 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80233d0:	681b      	ldr	r3, [r3, #0]
 80233d2:	2101      	movs	r1, #1
 80233d4:	2001      	movs	r0, #1
 80233d6:	4798      	blx	r3
  }
#endif /* TRACER_EMB_IT_MODE == 1 */

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 80233d8:	4b15      	ldr	r3, [pc, #84]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80233da:	0018      	movs	r0, r3
 80233dc:	f7ff fde7 	bl	8022fae <LL_LPUART_IsEnabledIT_TC>
 80233e0:	0003      	movs	r3, r0
 80233e2:	607b      	str	r3, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (_temp2 == 1UL))
 80233e4:	693b      	ldr	r3, [r7, #16]
 80233e6:	2240      	movs	r2, #64	; 0x40
 80233e8:	4013      	ands	r3, r2
 80233ea:	d01e      	beq.n	802342a <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
 80233ec:	687b      	ldr	r3, [r7, #4]
 80233ee:	2b01      	cmp	r3, #1
 80233f0:	d11b      	bne.n	802342a <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 80233f2:	4b0f      	ldr	r3, [pc, #60]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80233f4:	0018      	movs	r0, r3
 80233f6:	f7ff fda9 	bl	8022f4c <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 80233fa:	4b0d      	ldr	r3, [pc, #52]	; (8023430 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80233fc:	0018      	movs	r0, r3
 80233fe:	f7ff fd3d 	bl	8022e7c <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 8023402:	4b0d      	ldr	r3, [pc, #52]	; (8023438 <HW_TRACER_EMB_IRQHandlerUSART+0x198>)
 8023404:	2102      	movs	r1, #2
 8023406:	0018      	movs	r0, r3
 8023408:	f7ff fab6 	bl	8022978 <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if (fptr_rx == NULL)
 802340c:	4b09      	ldr	r3, [pc, #36]	; (8023434 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 802340e:	681b      	ldr	r3, [r3, #0]
 8023410:	2b00      	cmp	r3, #0
 8023412:	d104      	bne.n	802341e <HW_TRACER_EMB_IRQHandlerUSART+0x17e>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 8023414:	2380      	movs	r3, #128	; 0x80
 8023416:	035b      	lsls	r3, r3, #13
 8023418:	0018      	movs	r0, r3
 802341a:	f7ff fbff 	bl	8022c1c <LL_APB1_GRP1_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 802341e:	f7ff f8b7 	bl	8022590 <TRACER_EMB_CALLBACK_TX>
 8023422:	e002      	b.n	802342a <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
      return;
 8023424:	46c0      	nop			; (mov r8, r8)
 8023426:	e000      	b.n	802342a <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
        return;
 8023428:	46c0      	nop			; (mov r8, r8)
  }
#endif /* TRACER_EMB_DMA_MODE == 1 */

}
 802342a:	46bd      	mov	sp, r7
 802342c:	b006      	add	sp, #24
 802342e:	bd80      	pop	{r7, pc}
 8023430:	40008000 	.word	0x40008000
 8023434:	20005034 	.word	0x20005034
 8023438:	40020000 	.word	0x40020000

0802343c <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(const uint8_t *pData, uint32_t Size)
{
 802343c:	b5b0      	push	{r4, r5, r7, lr}
 802343e:	b084      	sub	sp, #16
 8023440:	af02      	add	r7, sp, #8
 8023442:	6078      	str	r0, [r7, #4]
 8023444:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 8023446:	2380      	movs	r3, #128	; 0x80
 8023448:	035b      	lsls	r3, r3, #13
 802344a:	0018      	movs	r0, r3
 802344c:	f7ff fbd0 	bl	8022bf0 <LL_APB1_GRP1_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 8023450:	687c      	ldr	r4, [r7, #4]
 8023452:	4b13      	ldr	r3, [pc, #76]	; (80234a0 <HW_TRACER_EMB_SendData+0x64>)
 8023454:	2100      	movs	r1, #0
 8023456:	0018      	movs	r0, r3
 8023458:	f7ff fdfe 	bl	8023058 <LL_LPUART_DMA_GetRegAddr>
 802345c:	0005      	movs	r5, r0
 802345e:	4b11      	ldr	r3, [pc, #68]	; (80234a4 <HW_TRACER_EMB_SendData+0x68>)
 8023460:	2102      	movs	r1, #2
 8023462:	0018      	movs	r0, r3
 8023464:	f7ff face 	bl	8022a04 <LL_DMA_GetDataTransferDirection>
 8023468:	0003      	movs	r3, r0
 802346a:	480e      	ldr	r0, [pc, #56]	; (80234a4 <HW_TRACER_EMB_SendData+0x68>)
 802346c:	9300      	str	r3, [sp, #0]
 802346e:	002b      	movs	r3, r5
 8023470:	0022      	movs	r2, r4
 8023472:	2102      	movs	r1, #2
 8023474:	f7ff fb02 	bl	8022a7c <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, TRACER_EMB_DMA_DIRECTION),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 8023478:	683b      	ldr	r3, [r7, #0]
 802347a:	480a      	ldr	r0, [pc, #40]	; (80234a4 <HW_TRACER_EMB_SendData+0x68>)
 802347c:	001a      	movs	r2, r3
 802347e:	2102      	movs	r1, #2
 8023480:	f7ff fada 	bl	8022a38 <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 8023484:	4b06      	ldr	r3, [pc, #24]	; (80234a0 <HW_TRACER_EMB_SendData+0x64>)
 8023486:	0018      	movs	r0, r3
 8023488:	f7ff fdc7 	bl	802301a <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 802348c:	4b05      	ldr	r3, [pc, #20]	; (80234a4 <HW_TRACER_EMB_SendData+0x68>)
 802348e:	2102      	movs	r1, #2
 8023490:	0018      	movs	r0, r3
 8023492:	f7ff fa51 	bl	8022938 <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif /* TRACER_EMB_IT_MODE == 1 */
}
 8023496:	46c0      	nop			; (mov r8, r8)
 8023498:	46bd      	mov	sp, r7
 802349a:	b002      	add	sp, #8
 802349c:	bdb0      	pop	{r4, r5, r7, pc}
 802349e:	46c0      	nop			; (mov r8, r8)
 80234a0:	40008000 	.word	0x40008000
 80234a4:	40020000 	.word	0x40020000

080234a8 <malloc>:
 80234a8:	b510      	push	{r4, lr}
 80234aa:	4b03      	ldr	r3, [pc, #12]	; (80234b8 <malloc+0x10>)
 80234ac:	0001      	movs	r1, r0
 80234ae:	6818      	ldr	r0, [r3, #0]
 80234b0:	f000 f826 	bl	8023500 <_malloc_r>
 80234b4:	bd10      	pop	{r4, pc}
 80234b6:	46c0      	nop			; (mov r8, r8)
 80234b8:	20000250 	.word	0x20000250

080234bc <sbrk_aligned>:
 80234bc:	b570      	push	{r4, r5, r6, lr}
 80234be:	4e0f      	ldr	r6, [pc, #60]	; (80234fc <sbrk_aligned+0x40>)
 80234c0:	000d      	movs	r5, r1
 80234c2:	6831      	ldr	r1, [r6, #0]
 80234c4:	0004      	movs	r4, r0
 80234c6:	2900      	cmp	r1, #0
 80234c8:	d102      	bne.n	80234d0 <sbrk_aligned+0x14>
 80234ca:	f000 f965 	bl	8023798 <_sbrk_r>
 80234ce:	6030      	str	r0, [r6, #0]
 80234d0:	0029      	movs	r1, r5
 80234d2:	0020      	movs	r0, r4
 80234d4:	f000 f960 	bl	8023798 <_sbrk_r>
 80234d8:	1c43      	adds	r3, r0, #1
 80234da:	d00a      	beq.n	80234f2 <sbrk_aligned+0x36>
 80234dc:	2303      	movs	r3, #3
 80234de:	1cc5      	adds	r5, r0, #3
 80234e0:	439d      	bics	r5, r3
 80234e2:	42a8      	cmp	r0, r5
 80234e4:	d007      	beq.n	80234f6 <sbrk_aligned+0x3a>
 80234e6:	1a29      	subs	r1, r5, r0
 80234e8:	0020      	movs	r0, r4
 80234ea:	f000 f955 	bl	8023798 <_sbrk_r>
 80234ee:	3001      	adds	r0, #1
 80234f0:	d101      	bne.n	80234f6 <sbrk_aligned+0x3a>
 80234f2:	2501      	movs	r5, #1
 80234f4:	426d      	negs	r5, r5
 80234f6:	0028      	movs	r0, r5
 80234f8:	bd70      	pop	{r4, r5, r6, pc}
 80234fa:	46c0      	nop			; (mov r8, r8)
 80234fc:	2000503c 	.word	0x2000503c

08023500 <_malloc_r>:
 8023500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023502:	2203      	movs	r2, #3
 8023504:	1ccb      	adds	r3, r1, #3
 8023506:	4393      	bics	r3, r2
 8023508:	3308      	adds	r3, #8
 802350a:	0006      	movs	r6, r0
 802350c:	001f      	movs	r7, r3
 802350e:	2b0c      	cmp	r3, #12
 8023510:	d238      	bcs.n	8023584 <_malloc_r+0x84>
 8023512:	270c      	movs	r7, #12
 8023514:	42b9      	cmp	r1, r7
 8023516:	d837      	bhi.n	8023588 <_malloc_r+0x88>
 8023518:	0030      	movs	r0, r6
 802351a:	f000 f873 	bl	8023604 <__malloc_lock>
 802351e:	4b38      	ldr	r3, [pc, #224]	; (8023600 <_malloc_r+0x100>)
 8023520:	9300      	str	r3, [sp, #0]
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	001c      	movs	r4, r3
 8023526:	2c00      	cmp	r4, #0
 8023528:	d133      	bne.n	8023592 <_malloc_r+0x92>
 802352a:	0039      	movs	r1, r7
 802352c:	0030      	movs	r0, r6
 802352e:	f7ff ffc5 	bl	80234bc <sbrk_aligned>
 8023532:	0004      	movs	r4, r0
 8023534:	1c43      	adds	r3, r0, #1
 8023536:	d15e      	bne.n	80235f6 <_malloc_r+0xf6>
 8023538:	9b00      	ldr	r3, [sp, #0]
 802353a:	681c      	ldr	r4, [r3, #0]
 802353c:	0025      	movs	r5, r4
 802353e:	2d00      	cmp	r5, #0
 8023540:	d14e      	bne.n	80235e0 <_malloc_r+0xe0>
 8023542:	2c00      	cmp	r4, #0
 8023544:	d051      	beq.n	80235ea <_malloc_r+0xea>
 8023546:	6823      	ldr	r3, [r4, #0]
 8023548:	0029      	movs	r1, r5
 802354a:	18e3      	adds	r3, r4, r3
 802354c:	0030      	movs	r0, r6
 802354e:	9301      	str	r3, [sp, #4]
 8023550:	f000 f922 	bl	8023798 <_sbrk_r>
 8023554:	9b01      	ldr	r3, [sp, #4]
 8023556:	4283      	cmp	r3, r0
 8023558:	d147      	bne.n	80235ea <_malloc_r+0xea>
 802355a:	6823      	ldr	r3, [r4, #0]
 802355c:	0030      	movs	r0, r6
 802355e:	1aff      	subs	r7, r7, r3
 8023560:	0039      	movs	r1, r7
 8023562:	f7ff ffab 	bl	80234bc <sbrk_aligned>
 8023566:	3001      	adds	r0, #1
 8023568:	d03f      	beq.n	80235ea <_malloc_r+0xea>
 802356a:	6823      	ldr	r3, [r4, #0]
 802356c:	19db      	adds	r3, r3, r7
 802356e:	6023      	str	r3, [r4, #0]
 8023570:	9b00      	ldr	r3, [sp, #0]
 8023572:	681b      	ldr	r3, [r3, #0]
 8023574:	2b00      	cmp	r3, #0
 8023576:	d040      	beq.n	80235fa <_malloc_r+0xfa>
 8023578:	685a      	ldr	r2, [r3, #4]
 802357a:	42a2      	cmp	r2, r4
 802357c:	d133      	bne.n	80235e6 <_malloc_r+0xe6>
 802357e:	2200      	movs	r2, #0
 8023580:	605a      	str	r2, [r3, #4]
 8023582:	e014      	b.n	80235ae <_malloc_r+0xae>
 8023584:	2b00      	cmp	r3, #0
 8023586:	dac5      	bge.n	8023514 <_malloc_r+0x14>
 8023588:	230c      	movs	r3, #12
 802358a:	2500      	movs	r5, #0
 802358c:	6033      	str	r3, [r6, #0]
 802358e:	0028      	movs	r0, r5
 8023590:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023592:	6821      	ldr	r1, [r4, #0]
 8023594:	1bc9      	subs	r1, r1, r7
 8023596:	d420      	bmi.n	80235da <_malloc_r+0xda>
 8023598:	290b      	cmp	r1, #11
 802359a:	d918      	bls.n	80235ce <_malloc_r+0xce>
 802359c:	19e2      	adds	r2, r4, r7
 802359e:	6027      	str	r7, [r4, #0]
 80235a0:	42a3      	cmp	r3, r4
 80235a2:	d112      	bne.n	80235ca <_malloc_r+0xca>
 80235a4:	9b00      	ldr	r3, [sp, #0]
 80235a6:	601a      	str	r2, [r3, #0]
 80235a8:	6863      	ldr	r3, [r4, #4]
 80235aa:	6011      	str	r1, [r2, #0]
 80235ac:	6053      	str	r3, [r2, #4]
 80235ae:	0030      	movs	r0, r6
 80235b0:	0025      	movs	r5, r4
 80235b2:	f000 f82f 	bl	8023614 <__malloc_unlock>
 80235b6:	2207      	movs	r2, #7
 80235b8:	350b      	adds	r5, #11
 80235ba:	1d23      	adds	r3, r4, #4
 80235bc:	4395      	bics	r5, r2
 80235be:	1aea      	subs	r2, r5, r3
 80235c0:	429d      	cmp	r5, r3
 80235c2:	d0e4      	beq.n	802358e <_malloc_r+0x8e>
 80235c4:	1b5b      	subs	r3, r3, r5
 80235c6:	50a3      	str	r3, [r4, r2]
 80235c8:	e7e1      	b.n	802358e <_malloc_r+0x8e>
 80235ca:	605a      	str	r2, [r3, #4]
 80235cc:	e7ec      	b.n	80235a8 <_malloc_r+0xa8>
 80235ce:	6862      	ldr	r2, [r4, #4]
 80235d0:	42a3      	cmp	r3, r4
 80235d2:	d1d5      	bne.n	8023580 <_malloc_r+0x80>
 80235d4:	9b00      	ldr	r3, [sp, #0]
 80235d6:	601a      	str	r2, [r3, #0]
 80235d8:	e7e9      	b.n	80235ae <_malloc_r+0xae>
 80235da:	0023      	movs	r3, r4
 80235dc:	6864      	ldr	r4, [r4, #4]
 80235de:	e7a2      	b.n	8023526 <_malloc_r+0x26>
 80235e0:	002c      	movs	r4, r5
 80235e2:	686d      	ldr	r5, [r5, #4]
 80235e4:	e7ab      	b.n	802353e <_malloc_r+0x3e>
 80235e6:	0013      	movs	r3, r2
 80235e8:	e7c4      	b.n	8023574 <_malloc_r+0x74>
 80235ea:	230c      	movs	r3, #12
 80235ec:	0030      	movs	r0, r6
 80235ee:	6033      	str	r3, [r6, #0]
 80235f0:	f000 f810 	bl	8023614 <__malloc_unlock>
 80235f4:	e7cb      	b.n	802358e <_malloc_r+0x8e>
 80235f6:	6027      	str	r7, [r4, #0]
 80235f8:	e7d9      	b.n	80235ae <_malloc_r+0xae>
 80235fa:	605b      	str	r3, [r3, #4]
 80235fc:	deff      	udf	#255	; 0xff
 80235fe:	46c0      	nop			; (mov r8, r8)
 8023600:	20005038 	.word	0x20005038

08023604 <__malloc_lock>:
 8023604:	b510      	push	{r4, lr}
 8023606:	4802      	ldr	r0, [pc, #8]	; (8023610 <__malloc_lock+0xc>)
 8023608:	f000 f902 	bl	8023810 <__retarget_lock_acquire_recursive>
 802360c:	bd10      	pop	{r4, pc}
 802360e:	46c0      	nop			; (mov r8, r8)
 8023610:	2000517c 	.word	0x2000517c

08023614 <__malloc_unlock>:
 8023614:	b510      	push	{r4, lr}
 8023616:	4802      	ldr	r0, [pc, #8]	; (8023620 <__malloc_unlock+0xc>)
 8023618:	f000 f8fb 	bl	8023812 <__retarget_lock_release_recursive>
 802361c:	bd10      	pop	{r4, pc}
 802361e:	46c0      	nop			; (mov r8, r8)
 8023620:	2000517c 	.word	0x2000517c

08023624 <sniprintf>:
 8023624:	b40c      	push	{r2, r3}
 8023626:	b530      	push	{r4, r5, lr}
 8023628:	4b17      	ldr	r3, [pc, #92]	; (8023688 <sniprintf+0x64>)
 802362a:	000c      	movs	r4, r1
 802362c:	681d      	ldr	r5, [r3, #0]
 802362e:	b09d      	sub	sp, #116	; 0x74
 8023630:	2900      	cmp	r1, #0
 8023632:	da08      	bge.n	8023646 <sniprintf+0x22>
 8023634:	238b      	movs	r3, #139	; 0x8b
 8023636:	2001      	movs	r0, #1
 8023638:	602b      	str	r3, [r5, #0]
 802363a:	4240      	negs	r0, r0
 802363c:	b01d      	add	sp, #116	; 0x74
 802363e:	bc30      	pop	{r4, r5}
 8023640:	bc08      	pop	{r3}
 8023642:	b002      	add	sp, #8
 8023644:	4718      	bx	r3
 8023646:	2382      	movs	r3, #130	; 0x82
 8023648:	466a      	mov	r2, sp
 802364a:	009b      	lsls	r3, r3, #2
 802364c:	8293      	strh	r3, [r2, #20]
 802364e:	2300      	movs	r3, #0
 8023650:	9002      	str	r0, [sp, #8]
 8023652:	9006      	str	r0, [sp, #24]
 8023654:	4299      	cmp	r1, r3
 8023656:	d000      	beq.n	802365a <sniprintf+0x36>
 8023658:	1e4b      	subs	r3, r1, #1
 802365a:	9304      	str	r3, [sp, #16]
 802365c:	9307      	str	r3, [sp, #28]
 802365e:	2301      	movs	r3, #1
 8023660:	466a      	mov	r2, sp
 8023662:	425b      	negs	r3, r3
 8023664:	82d3      	strh	r3, [r2, #22]
 8023666:	0028      	movs	r0, r5
 8023668:	ab21      	add	r3, sp, #132	; 0x84
 802366a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802366c:	a902      	add	r1, sp, #8
 802366e:	9301      	str	r3, [sp, #4]
 8023670:	f000 f996 	bl	80239a0 <_svfiprintf_r>
 8023674:	1c43      	adds	r3, r0, #1
 8023676:	da01      	bge.n	802367c <sniprintf+0x58>
 8023678:	238b      	movs	r3, #139	; 0x8b
 802367a:	602b      	str	r3, [r5, #0]
 802367c:	2c00      	cmp	r4, #0
 802367e:	d0dd      	beq.n	802363c <sniprintf+0x18>
 8023680:	2200      	movs	r2, #0
 8023682:	9b02      	ldr	r3, [sp, #8]
 8023684:	701a      	strb	r2, [r3, #0]
 8023686:	e7d9      	b.n	802363c <sniprintf+0x18>
 8023688:	20000250 	.word	0x20000250

0802368c <siprintf>:
 802368c:	b40e      	push	{r1, r2, r3}
 802368e:	b500      	push	{lr}
 8023690:	490b      	ldr	r1, [pc, #44]	; (80236c0 <siprintf+0x34>)
 8023692:	b09c      	sub	sp, #112	; 0x70
 8023694:	ab1d      	add	r3, sp, #116	; 0x74
 8023696:	9002      	str	r0, [sp, #8]
 8023698:	9006      	str	r0, [sp, #24]
 802369a:	9107      	str	r1, [sp, #28]
 802369c:	9104      	str	r1, [sp, #16]
 802369e:	4809      	ldr	r0, [pc, #36]	; (80236c4 <siprintf+0x38>)
 80236a0:	4909      	ldr	r1, [pc, #36]	; (80236c8 <siprintf+0x3c>)
 80236a2:	cb04      	ldmia	r3!, {r2}
 80236a4:	9105      	str	r1, [sp, #20]
 80236a6:	6800      	ldr	r0, [r0, #0]
 80236a8:	a902      	add	r1, sp, #8
 80236aa:	9301      	str	r3, [sp, #4]
 80236ac:	f000 f978 	bl	80239a0 <_svfiprintf_r>
 80236b0:	2200      	movs	r2, #0
 80236b2:	9b02      	ldr	r3, [sp, #8]
 80236b4:	701a      	strb	r2, [r3, #0]
 80236b6:	b01c      	add	sp, #112	; 0x70
 80236b8:	bc08      	pop	{r3}
 80236ba:	b003      	add	sp, #12
 80236bc:	4718      	bx	r3
 80236be:	46c0      	nop			; (mov r8, r8)
 80236c0:	7fffffff 	.word	0x7fffffff
 80236c4:	20000250 	.word	0x20000250
 80236c8:	ffff0208 	.word	0xffff0208

080236cc <memset>:
 80236cc:	0003      	movs	r3, r0
 80236ce:	1882      	adds	r2, r0, r2
 80236d0:	4293      	cmp	r3, r2
 80236d2:	d100      	bne.n	80236d6 <memset+0xa>
 80236d4:	4770      	bx	lr
 80236d6:	7019      	strb	r1, [r3, #0]
 80236d8:	3301      	adds	r3, #1
 80236da:	e7f9      	b.n	80236d0 <memset+0x4>

080236dc <_reclaim_reent>:
 80236dc:	4b2d      	ldr	r3, [pc, #180]	; (8023794 <_reclaim_reent+0xb8>)
 80236de:	b570      	push	{r4, r5, r6, lr}
 80236e0:	681b      	ldr	r3, [r3, #0]
 80236e2:	0004      	movs	r4, r0
 80236e4:	4283      	cmp	r3, r0
 80236e6:	d042      	beq.n	802376e <_reclaim_reent+0x92>
 80236e8:	69c3      	ldr	r3, [r0, #28]
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	d00a      	beq.n	8023704 <_reclaim_reent+0x28>
 80236ee:	2500      	movs	r5, #0
 80236f0:	68db      	ldr	r3, [r3, #12]
 80236f2:	42ab      	cmp	r3, r5
 80236f4:	d140      	bne.n	8023778 <_reclaim_reent+0x9c>
 80236f6:	69e3      	ldr	r3, [r4, #28]
 80236f8:	6819      	ldr	r1, [r3, #0]
 80236fa:	2900      	cmp	r1, #0
 80236fc:	d002      	beq.n	8023704 <_reclaim_reent+0x28>
 80236fe:	0020      	movs	r0, r4
 8023700:	f000 f8a2 	bl	8023848 <_free_r>
 8023704:	6961      	ldr	r1, [r4, #20]
 8023706:	2900      	cmp	r1, #0
 8023708:	d002      	beq.n	8023710 <_reclaim_reent+0x34>
 802370a:	0020      	movs	r0, r4
 802370c:	f000 f89c 	bl	8023848 <_free_r>
 8023710:	69e1      	ldr	r1, [r4, #28]
 8023712:	2900      	cmp	r1, #0
 8023714:	d002      	beq.n	802371c <_reclaim_reent+0x40>
 8023716:	0020      	movs	r0, r4
 8023718:	f000 f896 	bl	8023848 <_free_r>
 802371c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802371e:	2900      	cmp	r1, #0
 8023720:	d002      	beq.n	8023728 <_reclaim_reent+0x4c>
 8023722:	0020      	movs	r0, r4
 8023724:	f000 f890 	bl	8023848 <_free_r>
 8023728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802372a:	2900      	cmp	r1, #0
 802372c:	d002      	beq.n	8023734 <_reclaim_reent+0x58>
 802372e:	0020      	movs	r0, r4
 8023730:	f000 f88a 	bl	8023848 <_free_r>
 8023734:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023736:	2900      	cmp	r1, #0
 8023738:	d002      	beq.n	8023740 <_reclaim_reent+0x64>
 802373a:	0020      	movs	r0, r4
 802373c:	f000 f884 	bl	8023848 <_free_r>
 8023740:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8023742:	2900      	cmp	r1, #0
 8023744:	d002      	beq.n	802374c <_reclaim_reent+0x70>
 8023746:	0020      	movs	r0, r4
 8023748:	f000 f87e 	bl	8023848 <_free_r>
 802374c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802374e:	2900      	cmp	r1, #0
 8023750:	d002      	beq.n	8023758 <_reclaim_reent+0x7c>
 8023752:	0020      	movs	r0, r4
 8023754:	f000 f878 	bl	8023848 <_free_r>
 8023758:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802375a:	2900      	cmp	r1, #0
 802375c:	d002      	beq.n	8023764 <_reclaim_reent+0x88>
 802375e:	0020      	movs	r0, r4
 8023760:	f000 f872 	bl	8023848 <_free_r>
 8023764:	6a23      	ldr	r3, [r4, #32]
 8023766:	2b00      	cmp	r3, #0
 8023768:	d001      	beq.n	802376e <_reclaim_reent+0x92>
 802376a:	0020      	movs	r0, r4
 802376c:	4798      	blx	r3
 802376e:	bd70      	pop	{r4, r5, r6, pc}
 8023770:	5949      	ldr	r1, [r1, r5]
 8023772:	2900      	cmp	r1, #0
 8023774:	d108      	bne.n	8023788 <_reclaim_reent+0xac>
 8023776:	3504      	adds	r5, #4
 8023778:	69e3      	ldr	r3, [r4, #28]
 802377a:	68d9      	ldr	r1, [r3, #12]
 802377c:	2d80      	cmp	r5, #128	; 0x80
 802377e:	d1f7      	bne.n	8023770 <_reclaim_reent+0x94>
 8023780:	0020      	movs	r0, r4
 8023782:	f000 f861 	bl	8023848 <_free_r>
 8023786:	e7b6      	b.n	80236f6 <_reclaim_reent+0x1a>
 8023788:	680e      	ldr	r6, [r1, #0]
 802378a:	0020      	movs	r0, r4
 802378c:	f000 f85c 	bl	8023848 <_free_r>
 8023790:	0031      	movs	r1, r6
 8023792:	e7ee      	b.n	8023772 <_reclaim_reent+0x96>
 8023794:	20000250 	.word	0x20000250

08023798 <_sbrk_r>:
 8023798:	2300      	movs	r3, #0
 802379a:	b570      	push	{r4, r5, r6, lr}
 802379c:	4d06      	ldr	r5, [pc, #24]	; (80237b8 <_sbrk_r+0x20>)
 802379e:	0004      	movs	r4, r0
 80237a0:	0008      	movs	r0, r1
 80237a2:	602b      	str	r3, [r5, #0]
 80237a4:	f7e5 fd74 	bl	8009290 <_sbrk>
 80237a8:	1c43      	adds	r3, r0, #1
 80237aa:	d103      	bne.n	80237b4 <_sbrk_r+0x1c>
 80237ac:	682b      	ldr	r3, [r5, #0]
 80237ae:	2b00      	cmp	r3, #0
 80237b0:	d000      	beq.n	80237b4 <_sbrk_r+0x1c>
 80237b2:	6023      	str	r3, [r4, #0]
 80237b4:	bd70      	pop	{r4, r5, r6, pc}
 80237b6:	46c0      	nop			; (mov r8, r8)
 80237b8:	20005178 	.word	0x20005178

080237bc <__errno>:
 80237bc:	4b01      	ldr	r3, [pc, #4]	; (80237c4 <__errno+0x8>)
 80237be:	6818      	ldr	r0, [r3, #0]
 80237c0:	4770      	bx	lr
 80237c2:	46c0      	nop			; (mov r8, r8)
 80237c4:	20000250 	.word	0x20000250

080237c8 <__libc_init_array>:
 80237c8:	b570      	push	{r4, r5, r6, lr}
 80237ca:	2600      	movs	r6, #0
 80237cc:	4c0c      	ldr	r4, [pc, #48]	; (8023800 <__libc_init_array+0x38>)
 80237ce:	4d0d      	ldr	r5, [pc, #52]	; (8023804 <__libc_init_array+0x3c>)
 80237d0:	1b64      	subs	r4, r4, r5
 80237d2:	10a4      	asrs	r4, r4, #2
 80237d4:	42a6      	cmp	r6, r4
 80237d6:	d109      	bne.n	80237ec <__libc_init_array+0x24>
 80237d8:	2600      	movs	r6, #0
 80237da:	f000 fbb7 	bl	8023f4c <_init>
 80237de:	4c0a      	ldr	r4, [pc, #40]	; (8023808 <__libc_init_array+0x40>)
 80237e0:	4d0a      	ldr	r5, [pc, #40]	; (802380c <__libc_init_array+0x44>)
 80237e2:	1b64      	subs	r4, r4, r5
 80237e4:	10a4      	asrs	r4, r4, #2
 80237e6:	42a6      	cmp	r6, r4
 80237e8:	d105      	bne.n	80237f6 <__libc_init_array+0x2e>
 80237ea:	bd70      	pop	{r4, r5, r6, pc}
 80237ec:	00b3      	lsls	r3, r6, #2
 80237ee:	58eb      	ldr	r3, [r5, r3]
 80237f0:	4798      	blx	r3
 80237f2:	3601      	adds	r6, #1
 80237f4:	e7ee      	b.n	80237d4 <__libc_init_array+0xc>
 80237f6:	00b3      	lsls	r3, r6, #2
 80237f8:	58eb      	ldr	r3, [r5, r3]
 80237fa:	4798      	blx	r3
 80237fc:	3601      	adds	r6, #1
 80237fe:	e7f2      	b.n	80237e6 <__libc_init_array+0x1e>
 8023800:	080259c0 	.word	0x080259c0
 8023804:	080259c0 	.word	0x080259c0
 8023808:	080259c4 	.word	0x080259c4
 802380c:	080259c0 	.word	0x080259c0

08023810 <__retarget_lock_acquire_recursive>:
 8023810:	4770      	bx	lr

08023812 <__retarget_lock_release_recursive>:
 8023812:	4770      	bx	lr

08023814 <__aeabi_memcpy>:
 8023814:	b510      	push	{r4, lr}
 8023816:	f000 f80d 	bl	8023834 <memcpy>
 802381a:	bd10      	pop	{r4, pc}

0802381c <__aeabi_memset>:
 802381c:	000b      	movs	r3, r1
 802381e:	b510      	push	{r4, lr}
 8023820:	0011      	movs	r1, r2
 8023822:	001a      	movs	r2, r3
 8023824:	f7ff ff52 	bl	80236cc <memset>
 8023828:	bd10      	pop	{r4, pc}

0802382a <__aeabi_memclr>:
 802382a:	b510      	push	{r4, lr}
 802382c:	2200      	movs	r2, #0
 802382e:	f7ff fff5 	bl	802381c <__aeabi_memset>
 8023832:	bd10      	pop	{r4, pc}

08023834 <memcpy>:
 8023834:	2300      	movs	r3, #0
 8023836:	b510      	push	{r4, lr}
 8023838:	429a      	cmp	r2, r3
 802383a:	d100      	bne.n	802383e <memcpy+0xa>
 802383c:	bd10      	pop	{r4, pc}
 802383e:	5ccc      	ldrb	r4, [r1, r3]
 8023840:	54c4      	strb	r4, [r0, r3]
 8023842:	3301      	adds	r3, #1
 8023844:	e7f8      	b.n	8023838 <memcpy+0x4>
	...

08023848 <_free_r>:
 8023848:	b570      	push	{r4, r5, r6, lr}
 802384a:	0005      	movs	r5, r0
 802384c:	2900      	cmp	r1, #0
 802384e:	d010      	beq.n	8023872 <_free_r+0x2a>
 8023850:	1f0c      	subs	r4, r1, #4
 8023852:	6823      	ldr	r3, [r4, #0]
 8023854:	2b00      	cmp	r3, #0
 8023856:	da00      	bge.n	802385a <_free_r+0x12>
 8023858:	18e4      	adds	r4, r4, r3
 802385a:	0028      	movs	r0, r5
 802385c:	f7ff fed2 	bl	8023604 <__malloc_lock>
 8023860:	4a1d      	ldr	r2, [pc, #116]	; (80238d8 <_free_r+0x90>)
 8023862:	6813      	ldr	r3, [r2, #0]
 8023864:	2b00      	cmp	r3, #0
 8023866:	d105      	bne.n	8023874 <_free_r+0x2c>
 8023868:	6063      	str	r3, [r4, #4]
 802386a:	6014      	str	r4, [r2, #0]
 802386c:	0028      	movs	r0, r5
 802386e:	f7ff fed1 	bl	8023614 <__malloc_unlock>
 8023872:	bd70      	pop	{r4, r5, r6, pc}
 8023874:	42a3      	cmp	r3, r4
 8023876:	d908      	bls.n	802388a <_free_r+0x42>
 8023878:	6820      	ldr	r0, [r4, #0]
 802387a:	1821      	adds	r1, r4, r0
 802387c:	428b      	cmp	r3, r1
 802387e:	d1f3      	bne.n	8023868 <_free_r+0x20>
 8023880:	6819      	ldr	r1, [r3, #0]
 8023882:	685b      	ldr	r3, [r3, #4]
 8023884:	1809      	adds	r1, r1, r0
 8023886:	6021      	str	r1, [r4, #0]
 8023888:	e7ee      	b.n	8023868 <_free_r+0x20>
 802388a:	001a      	movs	r2, r3
 802388c:	685b      	ldr	r3, [r3, #4]
 802388e:	2b00      	cmp	r3, #0
 8023890:	d001      	beq.n	8023896 <_free_r+0x4e>
 8023892:	42a3      	cmp	r3, r4
 8023894:	d9f9      	bls.n	802388a <_free_r+0x42>
 8023896:	6811      	ldr	r1, [r2, #0]
 8023898:	1850      	adds	r0, r2, r1
 802389a:	42a0      	cmp	r0, r4
 802389c:	d10b      	bne.n	80238b6 <_free_r+0x6e>
 802389e:	6820      	ldr	r0, [r4, #0]
 80238a0:	1809      	adds	r1, r1, r0
 80238a2:	1850      	adds	r0, r2, r1
 80238a4:	6011      	str	r1, [r2, #0]
 80238a6:	4283      	cmp	r3, r0
 80238a8:	d1e0      	bne.n	802386c <_free_r+0x24>
 80238aa:	6818      	ldr	r0, [r3, #0]
 80238ac:	685b      	ldr	r3, [r3, #4]
 80238ae:	1841      	adds	r1, r0, r1
 80238b0:	6011      	str	r1, [r2, #0]
 80238b2:	6053      	str	r3, [r2, #4]
 80238b4:	e7da      	b.n	802386c <_free_r+0x24>
 80238b6:	42a0      	cmp	r0, r4
 80238b8:	d902      	bls.n	80238c0 <_free_r+0x78>
 80238ba:	230c      	movs	r3, #12
 80238bc:	602b      	str	r3, [r5, #0]
 80238be:	e7d5      	b.n	802386c <_free_r+0x24>
 80238c0:	6820      	ldr	r0, [r4, #0]
 80238c2:	1821      	adds	r1, r4, r0
 80238c4:	428b      	cmp	r3, r1
 80238c6:	d103      	bne.n	80238d0 <_free_r+0x88>
 80238c8:	6819      	ldr	r1, [r3, #0]
 80238ca:	685b      	ldr	r3, [r3, #4]
 80238cc:	1809      	adds	r1, r1, r0
 80238ce:	6021      	str	r1, [r4, #0]
 80238d0:	6063      	str	r3, [r4, #4]
 80238d2:	6054      	str	r4, [r2, #4]
 80238d4:	e7ca      	b.n	802386c <_free_r+0x24>
 80238d6:	46c0      	nop			; (mov r8, r8)
 80238d8:	20005038 	.word	0x20005038

080238dc <__ssputs_r>:
 80238dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238de:	b085      	sub	sp, #20
 80238e0:	9301      	str	r3, [sp, #4]
 80238e2:	9203      	str	r2, [sp, #12]
 80238e4:	688e      	ldr	r6, [r1, #8]
 80238e6:	9a01      	ldr	r2, [sp, #4]
 80238e8:	0007      	movs	r7, r0
 80238ea:	000c      	movs	r4, r1
 80238ec:	680b      	ldr	r3, [r1, #0]
 80238ee:	4296      	cmp	r6, r2
 80238f0:	d831      	bhi.n	8023956 <__ssputs_r+0x7a>
 80238f2:	898a      	ldrh	r2, [r1, #12]
 80238f4:	2190      	movs	r1, #144	; 0x90
 80238f6:	00c9      	lsls	r1, r1, #3
 80238f8:	420a      	tst	r2, r1
 80238fa:	d029      	beq.n	8023950 <__ssputs_r+0x74>
 80238fc:	2003      	movs	r0, #3
 80238fe:	6921      	ldr	r1, [r4, #16]
 8023900:	1a5b      	subs	r3, r3, r1
 8023902:	9302      	str	r3, [sp, #8]
 8023904:	6963      	ldr	r3, [r4, #20]
 8023906:	4343      	muls	r3, r0
 8023908:	0fdd      	lsrs	r5, r3, #31
 802390a:	18ed      	adds	r5, r5, r3
 802390c:	9b01      	ldr	r3, [sp, #4]
 802390e:	9802      	ldr	r0, [sp, #8]
 8023910:	3301      	adds	r3, #1
 8023912:	181b      	adds	r3, r3, r0
 8023914:	106d      	asrs	r5, r5, #1
 8023916:	42ab      	cmp	r3, r5
 8023918:	d900      	bls.n	802391c <__ssputs_r+0x40>
 802391a:	001d      	movs	r5, r3
 802391c:	0552      	lsls	r2, r2, #21
 802391e:	d529      	bpl.n	8023974 <__ssputs_r+0x98>
 8023920:	0029      	movs	r1, r5
 8023922:	0038      	movs	r0, r7
 8023924:	f7ff fdec 	bl	8023500 <_malloc_r>
 8023928:	1e06      	subs	r6, r0, #0
 802392a:	d02d      	beq.n	8023988 <__ssputs_r+0xac>
 802392c:	9a02      	ldr	r2, [sp, #8]
 802392e:	6921      	ldr	r1, [r4, #16]
 8023930:	f7ff ff80 	bl	8023834 <memcpy>
 8023934:	89a2      	ldrh	r2, [r4, #12]
 8023936:	4b19      	ldr	r3, [pc, #100]	; (802399c <__ssputs_r+0xc0>)
 8023938:	401a      	ands	r2, r3
 802393a:	2380      	movs	r3, #128	; 0x80
 802393c:	4313      	orrs	r3, r2
 802393e:	81a3      	strh	r3, [r4, #12]
 8023940:	9b02      	ldr	r3, [sp, #8]
 8023942:	6126      	str	r6, [r4, #16]
 8023944:	18f6      	adds	r6, r6, r3
 8023946:	6026      	str	r6, [r4, #0]
 8023948:	6165      	str	r5, [r4, #20]
 802394a:	9e01      	ldr	r6, [sp, #4]
 802394c:	1aed      	subs	r5, r5, r3
 802394e:	60a5      	str	r5, [r4, #8]
 8023950:	9b01      	ldr	r3, [sp, #4]
 8023952:	429e      	cmp	r6, r3
 8023954:	d900      	bls.n	8023958 <__ssputs_r+0x7c>
 8023956:	9e01      	ldr	r6, [sp, #4]
 8023958:	0032      	movs	r2, r6
 802395a:	9903      	ldr	r1, [sp, #12]
 802395c:	6820      	ldr	r0, [r4, #0]
 802395e:	f000 fa9f 	bl	8023ea0 <memmove>
 8023962:	2000      	movs	r0, #0
 8023964:	68a3      	ldr	r3, [r4, #8]
 8023966:	1b9b      	subs	r3, r3, r6
 8023968:	60a3      	str	r3, [r4, #8]
 802396a:	6823      	ldr	r3, [r4, #0]
 802396c:	199b      	adds	r3, r3, r6
 802396e:	6023      	str	r3, [r4, #0]
 8023970:	b005      	add	sp, #20
 8023972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023974:	002a      	movs	r2, r5
 8023976:	0038      	movs	r0, r7
 8023978:	f000 fab0 	bl	8023edc <_realloc_r>
 802397c:	1e06      	subs	r6, r0, #0
 802397e:	d1df      	bne.n	8023940 <__ssputs_r+0x64>
 8023980:	0038      	movs	r0, r7
 8023982:	6921      	ldr	r1, [r4, #16]
 8023984:	f7ff ff60 	bl	8023848 <_free_r>
 8023988:	230c      	movs	r3, #12
 802398a:	2001      	movs	r0, #1
 802398c:	603b      	str	r3, [r7, #0]
 802398e:	89a2      	ldrh	r2, [r4, #12]
 8023990:	3334      	adds	r3, #52	; 0x34
 8023992:	4313      	orrs	r3, r2
 8023994:	81a3      	strh	r3, [r4, #12]
 8023996:	4240      	negs	r0, r0
 8023998:	e7ea      	b.n	8023970 <__ssputs_r+0x94>
 802399a:	46c0      	nop			; (mov r8, r8)
 802399c:	fffffb7f 	.word	0xfffffb7f

080239a0 <_svfiprintf_r>:
 80239a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239a2:	b0a1      	sub	sp, #132	; 0x84
 80239a4:	9003      	str	r0, [sp, #12]
 80239a6:	001d      	movs	r5, r3
 80239a8:	898b      	ldrh	r3, [r1, #12]
 80239aa:	000f      	movs	r7, r1
 80239ac:	0016      	movs	r6, r2
 80239ae:	061b      	lsls	r3, r3, #24
 80239b0:	d511      	bpl.n	80239d6 <_svfiprintf_r+0x36>
 80239b2:	690b      	ldr	r3, [r1, #16]
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	d10e      	bne.n	80239d6 <_svfiprintf_r+0x36>
 80239b8:	2140      	movs	r1, #64	; 0x40
 80239ba:	f7ff fda1 	bl	8023500 <_malloc_r>
 80239be:	6038      	str	r0, [r7, #0]
 80239c0:	6138      	str	r0, [r7, #16]
 80239c2:	2800      	cmp	r0, #0
 80239c4:	d105      	bne.n	80239d2 <_svfiprintf_r+0x32>
 80239c6:	230c      	movs	r3, #12
 80239c8:	9a03      	ldr	r2, [sp, #12]
 80239ca:	3801      	subs	r0, #1
 80239cc:	6013      	str	r3, [r2, #0]
 80239ce:	b021      	add	sp, #132	; 0x84
 80239d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80239d2:	2340      	movs	r3, #64	; 0x40
 80239d4:	617b      	str	r3, [r7, #20]
 80239d6:	2300      	movs	r3, #0
 80239d8:	ac08      	add	r4, sp, #32
 80239da:	6163      	str	r3, [r4, #20]
 80239dc:	3320      	adds	r3, #32
 80239de:	7663      	strb	r3, [r4, #25]
 80239e0:	3310      	adds	r3, #16
 80239e2:	76a3      	strb	r3, [r4, #26]
 80239e4:	9507      	str	r5, [sp, #28]
 80239e6:	0035      	movs	r5, r6
 80239e8:	782b      	ldrb	r3, [r5, #0]
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d001      	beq.n	80239f2 <_svfiprintf_r+0x52>
 80239ee:	2b25      	cmp	r3, #37	; 0x25
 80239f0:	d148      	bne.n	8023a84 <_svfiprintf_r+0xe4>
 80239f2:	1bab      	subs	r3, r5, r6
 80239f4:	9305      	str	r3, [sp, #20]
 80239f6:	42b5      	cmp	r5, r6
 80239f8:	d00b      	beq.n	8023a12 <_svfiprintf_r+0x72>
 80239fa:	0032      	movs	r2, r6
 80239fc:	0039      	movs	r1, r7
 80239fe:	9803      	ldr	r0, [sp, #12]
 8023a00:	f7ff ff6c 	bl	80238dc <__ssputs_r>
 8023a04:	3001      	adds	r0, #1
 8023a06:	d100      	bne.n	8023a0a <_svfiprintf_r+0x6a>
 8023a08:	e0af      	b.n	8023b6a <_svfiprintf_r+0x1ca>
 8023a0a:	6963      	ldr	r3, [r4, #20]
 8023a0c:	9a05      	ldr	r2, [sp, #20]
 8023a0e:	189b      	adds	r3, r3, r2
 8023a10:	6163      	str	r3, [r4, #20]
 8023a12:	782b      	ldrb	r3, [r5, #0]
 8023a14:	2b00      	cmp	r3, #0
 8023a16:	d100      	bne.n	8023a1a <_svfiprintf_r+0x7a>
 8023a18:	e0a7      	b.n	8023b6a <_svfiprintf_r+0x1ca>
 8023a1a:	2201      	movs	r2, #1
 8023a1c:	2300      	movs	r3, #0
 8023a1e:	4252      	negs	r2, r2
 8023a20:	6062      	str	r2, [r4, #4]
 8023a22:	a904      	add	r1, sp, #16
 8023a24:	3254      	adds	r2, #84	; 0x54
 8023a26:	1852      	adds	r2, r2, r1
 8023a28:	1c6e      	adds	r6, r5, #1
 8023a2a:	6023      	str	r3, [r4, #0]
 8023a2c:	60e3      	str	r3, [r4, #12]
 8023a2e:	60a3      	str	r3, [r4, #8]
 8023a30:	7013      	strb	r3, [r2, #0]
 8023a32:	65a3      	str	r3, [r4, #88]	; 0x58
 8023a34:	4b55      	ldr	r3, [pc, #340]	; (8023b8c <_svfiprintf_r+0x1ec>)
 8023a36:	2205      	movs	r2, #5
 8023a38:	0018      	movs	r0, r3
 8023a3a:	7831      	ldrb	r1, [r6, #0]
 8023a3c:	9305      	str	r3, [sp, #20]
 8023a3e:	f000 fa42 	bl	8023ec6 <memchr>
 8023a42:	1c75      	adds	r5, r6, #1
 8023a44:	2800      	cmp	r0, #0
 8023a46:	d11f      	bne.n	8023a88 <_svfiprintf_r+0xe8>
 8023a48:	6822      	ldr	r2, [r4, #0]
 8023a4a:	06d3      	lsls	r3, r2, #27
 8023a4c:	d504      	bpl.n	8023a58 <_svfiprintf_r+0xb8>
 8023a4e:	2353      	movs	r3, #83	; 0x53
 8023a50:	a904      	add	r1, sp, #16
 8023a52:	185b      	adds	r3, r3, r1
 8023a54:	2120      	movs	r1, #32
 8023a56:	7019      	strb	r1, [r3, #0]
 8023a58:	0713      	lsls	r3, r2, #28
 8023a5a:	d504      	bpl.n	8023a66 <_svfiprintf_r+0xc6>
 8023a5c:	2353      	movs	r3, #83	; 0x53
 8023a5e:	a904      	add	r1, sp, #16
 8023a60:	185b      	adds	r3, r3, r1
 8023a62:	212b      	movs	r1, #43	; 0x2b
 8023a64:	7019      	strb	r1, [r3, #0]
 8023a66:	7833      	ldrb	r3, [r6, #0]
 8023a68:	2b2a      	cmp	r3, #42	; 0x2a
 8023a6a:	d016      	beq.n	8023a9a <_svfiprintf_r+0xfa>
 8023a6c:	0035      	movs	r5, r6
 8023a6e:	2100      	movs	r1, #0
 8023a70:	200a      	movs	r0, #10
 8023a72:	68e3      	ldr	r3, [r4, #12]
 8023a74:	782a      	ldrb	r2, [r5, #0]
 8023a76:	1c6e      	adds	r6, r5, #1
 8023a78:	3a30      	subs	r2, #48	; 0x30
 8023a7a:	2a09      	cmp	r2, #9
 8023a7c:	d94e      	bls.n	8023b1c <_svfiprintf_r+0x17c>
 8023a7e:	2900      	cmp	r1, #0
 8023a80:	d111      	bne.n	8023aa6 <_svfiprintf_r+0x106>
 8023a82:	e017      	b.n	8023ab4 <_svfiprintf_r+0x114>
 8023a84:	3501      	adds	r5, #1
 8023a86:	e7af      	b.n	80239e8 <_svfiprintf_r+0x48>
 8023a88:	9b05      	ldr	r3, [sp, #20]
 8023a8a:	6822      	ldr	r2, [r4, #0]
 8023a8c:	1ac0      	subs	r0, r0, r3
 8023a8e:	2301      	movs	r3, #1
 8023a90:	4083      	lsls	r3, r0
 8023a92:	4313      	orrs	r3, r2
 8023a94:	002e      	movs	r6, r5
 8023a96:	6023      	str	r3, [r4, #0]
 8023a98:	e7cc      	b.n	8023a34 <_svfiprintf_r+0x94>
 8023a9a:	9b07      	ldr	r3, [sp, #28]
 8023a9c:	1d19      	adds	r1, r3, #4
 8023a9e:	681b      	ldr	r3, [r3, #0]
 8023aa0:	9107      	str	r1, [sp, #28]
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	db01      	blt.n	8023aaa <_svfiprintf_r+0x10a>
 8023aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8023aa8:	e004      	b.n	8023ab4 <_svfiprintf_r+0x114>
 8023aaa:	425b      	negs	r3, r3
 8023aac:	60e3      	str	r3, [r4, #12]
 8023aae:	2302      	movs	r3, #2
 8023ab0:	4313      	orrs	r3, r2
 8023ab2:	6023      	str	r3, [r4, #0]
 8023ab4:	782b      	ldrb	r3, [r5, #0]
 8023ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8023ab8:	d10a      	bne.n	8023ad0 <_svfiprintf_r+0x130>
 8023aba:	786b      	ldrb	r3, [r5, #1]
 8023abc:	2b2a      	cmp	r3, #42	; 0x2a
 8023abe:	d135      	bne.n	8023b2c <_svfiprintf_r+0x18c>
 8023ac0:	9b07      	ldr	r3, [sp, #28]
 8023ac2:	3502      	adds	r5, #2
 8023ac4:	1d1a      	adds	r2, r3, #4
 8023ac6:	681b      	ldr	r3, [r3, #0]
 8023ac8:	9207      	str	r2, [sp, #28]
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	db2b      	blt.n	8023b26 <_svfiprintf_r+0x186>
 8023ace:	9309      	str	r3, [sp, #36]	; 0x24
 8023ad0:	4e2f      	ldr	r6, [pc, #188]	; (8023b90 <_svfiprintf_r+0x1f0>)
 8023ad2:	2203      	movs	r2, #3
 8023ad4:	0030      	movs	r0, r6
 8023ad6:	7829      	ldrb	r1, [r5, #0]
 8023ad8:	f000 f9f5 	bl	8023ec6 <memchr>
 8023adc:	2800      	cmp	r0, #0
 8023ade:	d006      	beq.n	8023aee <_svfiprintf_r+0x14e>
 8023ae0:	2340      	movs	r3, #64	; 0x40
 8023ae2:	1b80      	subs	r0, r0, r6
 8023ae4:	4083      	lsls	r3, r0
 8023ae6:	6822      	ldr	r2, [r4, #0]
 8023ae8:	3501      	adds	r5, #1
 8023aea:	4313      	orrs	r3, r2
 8023aec:	6023      	str	r3, [r4, #0]
 8023aee:	7829      	ldrb	r1, [r5, #0]
 8023af0:	2206      	movs	r2, #6
 8023af2:	4828      	ldr	r0, [pc, #160]	; (8023b94 <_svfiprintf_r+0x1f4>)
 8023af4:	1c6e      	adds	r6, r5, #1
 8023af6:	7621      	strb	r1, [r4, #24]
 8023af8:	f000 f9e5 	bl	8023ec6 <memchr>
 8023afc:	2800      	cmp	r0, #0
 8023afe:	d03c      	beq.n	8023b7a <_svfiprintf_r+0x1da>
 8023b00:	4b25      	ldr	r3, [pc, #148]	; (8023b98 <_svfiprintf_r+0x1f8>)
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d125      	bne.n	8023b52 <_svfiprintf_r+0x1b2>
 8023b06:	2207      	movs	r2, #7
 8023b08:	9b07      	ldr	r3, [sp, #28]
 8023b0a:	3307      	adds	r3, #7
 8023b0c:	4393      	bics	r3, r2
 8023b0e:	3308      	adds	r3, #8
 8023b10:	9307      	str	r3, [sp, #28]
 8023b12:	6963      	ldr	r3, [r4, #20]
 8023b14:	9a04      	ldr	r2, [sp, #16]
 8023b16:	189b      	adds	r3, r3, r2
 8023b18:	6163      	str	r3, [r4, #20]
 8023b1a:	e764      	b.n	80239e6 <_svfiprintf_r+0x46>
 8023b1c:	4343      	muls	r3, r0
 8023b1e:	0035      	movs	r5, r6
 8023b20:	2101      	movs	r1, #1
 8023b22:	189b      	adds	r3, r3, r2
 8023b24:	e7a6      	b.n	8023a74 <_svfiprintf_r+0xd4>
 8023b26:	2301      	movs	r3, #1
 8023b28:	425b      	negs	r3, r3
 8023b2a:	e7d0      	b.n	8023ace <_svfiprintf_r+0x12e>
 8023b2c:	2300      	movs	r3, #0
 8023b2e:	200a      	movs	r0, #10
 8023b30:	001a      	movs	r2, r3
 8023b32:	3501      	adds	r5, #1
 8023b34:	6063      	str	r3, [r4, #4]
 8023b36:	7829      	ldrb	r1, [r5, #0]
 8023b38:	1c6e      	adds	r6, r5, #1
 8023b3a:	3930      	subs	r1, #48	; 0x30
 8023b3c:	2909      	cmp	r1, #9
 8023b3e:	d903      	bls.n	8023b48 <_svfiprintf_r+0x1a8>
 8023b40:	2b00      	cmp	r3, #0
 8023b42:	d0c5      	beq.n	8023ad0 <_svfiprintf_r+0x130>
 8023b44:	9209      	str	r2, [sp, #36]	; 0x24
 8023b46:	e7c3      	b.n	8023ad0 <_svfiprintf_r+0x130>
 8023b48:	4342      	muls	r2, r0
 8023b4a:	0035      	movs	r5, r6
 8023b4c:	2301      	movs	r3, #1
 8023b4e:	1852      	adds	r2, r2, r1
 8023b50:	e7f1      	b.n	8023b36 <_svfiprintf_r+0x196>
 8023b52:	aa07      	add	r2, sp, #28
 8023b54:	9200      	str	r2, [sp, #0]
 8023b56:	0021      	movs	r1, r4
 8023b58:	003a      	movs	r2, r7
 8023b5a:	4b10      	ldr	r3, [pc, #64]	; (8023b9c <_svfiprintf_r+0x1fc>)
 8023b5c:	9803      	ldr	r0, [sp, #12]
 8023b5e:	e000      	b.n	8023b62 <_svfiprintf_r+0x1c2>
 8023b60:	bf00      	nop
 8023b62:	9004      	str	r0, [sp, #16]
 8023b64:	9b04      	ldr	r3, [sp, #16]
 8023b66:	3301      	adds	r3, #1
 8023b68:	d1d3      	bne.n	8023b12 <_svfiprintf_r+0x172>
 8023b6a:	89bb      	ldrh	r3, [r7, #12]
 8023b6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023b6e:	065b      	lsls	r3, r3, #25
 8023b70:	d400      	bmi.n	8023b74 <_svfiprintf_r+0x1d4>
 8023b72:	e72c      	b.n	80239ce <_svfiprintf_r+0x2e>
 8023b74:	2001      	movs	r0, #1
 8023b76:	4240      	negs	r0, r0
 8023b78:	e729      	b.n	80239ce <_svfiprintf_r+0x2e>
 8023b7a:	aa07      	add	r2, sp, #28
 8023b7c:	9200      	str	r2, [sp, #0]
 8023b7e:	0021      	movs	r1, r4
 8023b80:	003a      	movs	r2, r7
 8023b82:	4b06      	ldr	r3, [pc, #24]	; (8023b9c <_svfiprintf_r+0x1fc>)
 8023b84:	9803      	ldr	r0, [sp, #12]
 8023b86:	f000 f87b 	bl	8023c80 <_printf_i>
 8023b8a:	e7ea      	b.n	8023b62 <_svfiprintf_r+0x1c2>
 8023b8c:	08025983 	.word	0x08025983
 8023b90:	08025989 	.word	0x08025989
 8023b94:	0802598d 	.word	0x0802598d
 8023b98:	00000000 	.word	0x00000000
 8023b9c:	080238dd 	.word	0x080238dd

08023ba0 <_printf_common>:
 8023ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023ba2:	0016      	movs	r6, r2
 8023ba4:	9301      	str	r3, [sp, #4]
 8023ba6:	688a      	ldr	r2, [r1, #8]
 8023ba8:	690b      	ldr	r3, [r1, #16]
 8023baa:	000c      	movs	r4, r1
 8023bac:	9000      	str	r0, [sp, #0]
 8023bae:	4293      	cmp	r3, r2
 8023bb0:	da00      	bge.n	8023bb4 <_printf_common+0x14>
 8023bb2:	0013      	movs	r3, r2
 8023bb4:	0022      	movs	r2, r4
 8023bb6:	6033      	str	r3, [r6, #0]
 8023bb8:	3243      	adds	r2, #67	; 0x43
 8023bba:	7812      	ldrb	r2, [r2, #0]
 8023bbc:	2a00      	cmp	r2, #0
 8023bbe:	d001      	beq.n	8023bc4 <_printf_common+0x24>
 8023bc0:	3301      	adds	r3, #1
 8023bc2:	6033      	str	r3, [r6, #0]
 8023bc4:	6823      	ldr	r3, [r4, #0]
 8023bc6:	069b      	lsls	r3, r3, #26
 8023bc8:	d502      	bpl.n	8023bd0 <_printf_common+0x30>
 8023bca:	6833      	ldr	r3, [r6, #0]
 8023bcc:	3302      	adds	r3, #2
 8023bce:	6033      	str	r3, [r6, #0]
 8023bd0:	6822      	ldr	r2, [r4, #0]
 8023bd2:	2306      	movs	r3, #6
 8023bd4:	0015      	movs	r5, r2
 8023bd6:	401d      	ands	r5, r3
 8023bd8:	421a      	tst	r2, r3
 8023bda:	d027      	beq.n	8023c2c <_printf_common+0x8c>
 8023bdc:	0023      	movs	r3, r4
 8023bde:	3343      	adds	r3, #67	; 0x43
 8023be0:	781b      	ldrb	r3, [r3, #0]
 8023be2:	1e5a      	subs	r2, r3, #1
 8023be4:	4193      	sbcs	r3, r2
 8023be6:	6822      	ldr	r2, [r4, #0]
 8023be8:	0692      	lsls	r2, r2, #26
 8023bea:	d430      	bmi.n	8023c4e <_printf_common+0xae>
 8023bec:	0022      	movs	r2, r4
 8023bee:	9901      	ldr	r1, [sp, #4]
 8023bf0:	9800      	ldr	r0, [sp, #0]
 8023bf2:	9d08      	ldr	r5, [sp, #32]
 8023bf4:	3243      	adds	r2, #67	; 0x43
 8023bf6:	47a8      	blx	r5
 8023bf8:	3001      	adds	r0, #1
 8023bfa:	d025      	beq.n	8023c48 <_printf_common+0xa8>
 8023bfc:	2206      	movs	r2, #6
 8023bfe:	6823      	ldr	r3, [r4, #0]
 8023c00:	2500      	movs	r5, #0
 8023c02:	4013      	ands	r3, r2
 8023c04:	2b04      	cmp	r3, #4
 8023c06:	d105      	bne.n	8023c14 <_printf_common+0x74>
 8023c08:	6833      	ldr	r3, [r6, #0]
 8023c0a:	68e5      	ldr	r5, [r4, #12]
 8023c0c:	1aed      	subs	r5, r5, r3
 8023c0e:	43eb      	mvns	r3, r5
 8023c10:	17db      	asrs	r3, r3, #31
 8023c12:	401d      	ands	r5, r3
 8023c14:	68a3      	ldr	r3, [r4, #8]
 8023c16:	6922      	ldr	r2, [r4, #16]
 8023c18:	4293      	cmp	r3, r2
 8023c1a:	dd01      	ble.n	8023c20 <_printf_common+0x80>
 8023c1c:	1a9b      	subs	r3, r3, r2
 8023c1e:	18ed      	adds	r5, r5, r3
 8023c20:	2600      	movs	r6, #0
 8023c22:	42b5      	cmp	r5, r6
 8023c24:	d120      	bne.n	8023c68 <_printf_common+0xc8>
 8023c26:	2000      	movs	r0, #0
 8023c28:	e010      	b.n	8023c4c <_printf_common+0xac>
 8023c2a:	3501      	adds	r5, #1
 8023c2c:	68e3      	ldr	r3, [r4, #12]
 8023c2e:	6832      	ldr	r2, [r6, #0]
 8023c30:	1a9b      	subs	r3, r3, r2
 8023c32:	42ab      	cmp	r3, r5
 8023c34:	ddd2      	ble.n	8023bdc <_printf_common+0x3c>
 8023c36:	0022      	movs	r2, r4
 8023c38:	2301      	movs	r3, #1
 8023c3a:	9901      	ldr	r1, [sp, #4]
 8023c3c:	9800      	ldr	r0, [sp, #0]
 8023c3e:	9f08      	ldr	r7, [sp, #32]
 8023c40:	3219      	adds	r2, #25
 8023c42:	47b8      	blx	r7
 8023c44:	3001      	adds	r0, #1
 8023c46:	d1f0      	bne.n	8023c2a <_printf_common+0x8a>
 8023c48:	2001      	movs	r0, #1
 8023c4a:	4240      	negs	r0, r0
 8023c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023c4e:	2030      	movs	r0, #48	; 0x30
 8023c50:	18e1      	adds	r1, r4, r3
 8023c52:	3143      	adds	r1, #67	; 0x43
 8023c54:	7008      	strb	r0, [r1, #0]
 8023c56:	0021      	movs	r1, r4
 8023c58:	1c5a      	adds	r2, r3, #1
 8023c5a:	3145      	adds	r1, #69	; 0x45
 8023c5c:	7809      	ldrb	r1, [r1, #0]
 8023c5e:	18a2      	adds	r2, r4, r2
 8023c60:	3243      	adds	r2, #67	; 0x43
 8023c62:	3302      	adds	r3, #2
 8023c64:	7011      	strb	r1, [r2, #0]
 8023c66:	e7c1      	b.n	8023bec <_printf_common+0x4c>
 8023c68:	0022      	movs	r2, r4
 8023c6a:	2301      	movs	r3, #1
 8023c6c:	9901      	ldr	r1, [sp, #4]
 8023c6e:	9800      	ldr	r0, [sp, #0]
 8023c70:	9f08      	ldr	r7, [sp, #32]
 8023c72:	321a      	adds	r2, #26
 8023c74:	47b8      	blx	r7
 8023c76:	3001      	adds	r0, #1
 8023c78:	d0e6      	beq.n	8023c48 <_printf_common+0xa8>
 8023c7a:	3601      	adds	r6, #1
 8023c7c:	e7d1      	b.n	8023c22 <_printf_common+0x82>
	...

08023c80 <_printf_i>:
 8023c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c82:	b08b      	sub	sp, #44	; 0x2c
 8023c84:	9206      	str	r2, [sp, #24]
 8023c86:	000a      	movs	r2, r1
 8023c88:	3243      	adds	r2, #67	; 0x43
 8023c8a:	9307      	str	r3, [sp, #28]
 8023c8c:	9005      	str	r0, [sp, #20]
 8023c8e:	9204      	str	r2, [sp, #16]
 8023c90:	7e0a      	ldrb	r2, [r1, #24]
 8023c92:	000c      	movs	r4, r1
 8023c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023c96:	2a78      	cmp	r2, #120	; 0x78
 8023c98:	d809      	bhi.n	8023cae <_printf_i+0x2e>
 8023c9a:	2a62      	cmp	r2, #98	; 0x62
 8023c9c:	d80b      	bhi.n	8023cb6 <_printf_i+0x36>
 8023c9e:	2a00      	cmp	r2, #0
 8023ca0:	d100      	bne.n	8023ca4 <_printf_i+0x24>
 8023ca2:	e0be      	b.n	8023e22 <_printf_i+0x1a2>
 8023ca4:	497c      	ldr	r1, [pc, #496]	; (8023e98 <_printf_i+0x218>)
 8023ca6:	9103      	str	r1, [sp, #12]
 8023ca8:	2a58      	cmp	r2, #88	; 0x58
 8023caa:	d100      	bne.n	8023cae <_printf_i+0x2e>
 8023cac:	e093      	b.n	8023dd6 <_printf_i+0x156>
 8023cae:	0026      	movs	r6, r4
 8023cb0:	3642      	adds	r6, #66	; 0x42
 8023cb2:	7032      	strb	r2, [r6, #0]
 8023cb4:	e022      	b.n	8023cfc <_printf_i+0x7c>
 8023cb6:	0010      	movs	r0, r2
 8023cb8:	3863      	subs	r0, #99	; 0x63
 8023cba:	2815      	cmp	r0, #21
 8023cbc:	d8f7      	bhi.n	8023cae <_printf_i+0x2e>
 8023cbe:	f7e2 fa8d 	bl	80061dc <__gnu_thumb1_case_shi>
 8023cc2:	0016      	.short	0x0016
 8023cc4:	fff6001f 	.word	0xfff6001f
 8023cc8:	fff6fff6 	.word	0xfff6fff6
 8023ccc:	001ffff6 	.word	0x001ffff6
 8023cd0:	fff6fff6 	.word	0xfff6fff6
 8023cd4:	fff6fff6 	.word	0xfff6fff6
 8023cd8:	003600a3 	.word	0x003600a3
 8023cdc:	fff60083 	.word	0xfff60083
 8023ce0:	00b4fff6 	.word	0x00b4fff6
 8023ce4:	0036fff6 	.word	0x0036fff6
 8023ce8:	fff6fff6 	.word	0xfff6fff6
 8023cec:	0087      	.short	0x0087
 8023cee:	0026      	movs	r6, r4
 8023cf0:	681a      	ldr	r2, [r3, #0]
 8023cf2:	3642      	adds	r6, #66	; 0x42
 8023cf4:	1d11      	adds	r1, r2, #4
 8023cf6:	6019      	str	r1, [r3, #0]
 8023cf8:	6813      	ldr	r3, [r2, #0]
 8023cfa:	7033      	strb	r3, [r6, #0]
 8023cfc:	2301      	movs	r3, #1
 8023cfe:	e0a2      	b.n	8023e46 <_printf_i+0x1c6>
 8023d00:	6818      	ldr	r0, [r3, #0]
 8023d02:	6809      	ldr	r1, [r1, #0]
 8023d04:	1d02      	adds	r2, r0, #4
 8023d06:	060d      	lsls	r5, r1, #24
 8023d08:	d50b      	bpl.n	8023d22 <_printf_i+0xa2>
 8023d0a:	6805      	ldr	r5, [r0, #0]
 8023d0c:	601a      	str	r2, [r3, #0]
 8023d0e:	2d00      	cmp	r5, #0
 8023d10:	da03      	bge.n	8023d1a <_printf_i+0x9a>
 8023d12:	232d      	movs	r3, #45	; 0x2d
 8023d14:	9a04      	ldr	r2, [sp, #16]
 8023d16:	426d      	negs	r5, r5
 8023d18:	7013      	strb	r3, [r2, #0]
 8023d1a:	4b5f      	ldr	r3, [pc, #380]	; (8023e98 <_printf_i+0x218>)
 8023d1c:	270a      	movs	r7, #10
 8023d1e:	9303      	str	r3, [sp, #12]
 8023d20:	e01b      	b.n	8023d5a <_printf_i+0xda>
 8023d22:	6805      	ldr	r5, [r0, #0]
 8023d24:	601a      	str	r2, [r3, #0]
 8023d26:	0649      	lsls	r1, r1, #25
 8023d28:	d5f1      	bpl.n	8023d0e <_printf_i+0x8e>
 8023d2a:	b22d      	sxth	r5, r5
 8023d2c:	e7ef      	b.n	8023d0e <_printf_i+0x8e>
 8023d2e:	680d      	ldr	r5, [r1, #0]
 8023d30:	6819      	ldr	r1, [r3, #0]
 8023d32:	1d08      	adds	r0, r1, #4
 8023d34:	6018      	str	r0, [r3, #0]
 8023d36:	062e      	lsls	r6, r5, #24
 8023d38:	d501      	bpl.n	8023d3e <_printf_i+0xbe>
 8023d3a:	680d      	ldr	r5, [r1, #0]
 8023d3c:	e003      	b.n	8023d46 <_printf_i+0xc6>
 8023d3e:	066d      	lsls	r5, r5, #25
 8023d40:	d5fb      	bpl.n	8023d3a <_printf_i+0xba>
 8023d42:	680d      	ldr	r5, [r1, #0]
 8023d44:	b2ad      	uxth	r5, r5
 8023d46:	4b54      	ldr	r3, [pc, #336]	; (8023e98 <_printf_i+0x218>)
 8023d48:	2708      	movs	r7, #8
 8023d4a:	9303      	str	r3, [sp, #12]
 8023d4c:	2a6f      	cmp	r2, #111	; 0x6f
 8023d4e:	d000      	beq.n	8023d52 <_printf_i+0xd2>
 8023d50:	3702      	adds	r7, #2
 8023d52:	0023      	movs	r3, r4
 8023d54:	2200      	movs	r2, #0
 8023d56:	3343      	adds	r3, #67	; 0x43
 8023d58:	701a      	strb	r2, [r3, #0]
 8023d5a:	6863      	ldr	r3, [r4, #4]
 8023d5c:	60a3      	str	r3, [r4, #8]
 8023d5e:	2b00      	cmp	r3, #0
 8023d60:	db03      	blt.n	8023d6a <_printf_i+0xea>
 8023d62:	2104      	movs	r1, #4
 8023d64:	6822      	ldr	r2, [r4, #0]
 8023d66:	438a      	bics	r2, r1
 8023d68:	6022      	str	r2, [r4, #0]
 8023d6a:	2d00      	cmp	r5, #0
 8023d6c:	d102      	bne.n	8023d74 <_printf_i+0xf4>
 8023d6e:	9e04      	ldr	r6, [sp, #16]
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	d00c      	beq.n	8023d8e <_printf_i+0x10e>
 8023d74:	9e04      	ldr	r6, [sp, #16]
 8023d76:	0028      	movs	r0, r5
 8023d78:	0039      	movs	r1, r7
 8023d7a:	f7e2 fabf 	bl	80062fc <__aeabi_uidivmod>
 8023d7e:	9b03      	ldr	r3, [sp, #12]
 8023d80:	3e01      	subs	r6, #1
 8023d82:	5c5b      	ldrb	r3, [r3, r1]
 8023d84:	7033      	strb	r3, [r6, #0]
 8023d86:	002b      	movs	r3, r5
 8023d88:	0005      	movs	r5, r0
 8023d8a:	429f      	cmp	r7, r3
 8023d8c:	d9f3      	bls.n	8023d76 <_printf_i+0xf6>
 8023d8e:	2f08      	cmp	r7, #8
 8023d90:	d109      	bne.n	8023da6 <_printf_i+0x126>
 8023d92:	6823      	ldr	r3, [r4, #0]
 8023d94:	07db      	lsls	r3, r3, #31
 8023d96:	d506      	bpl.n	8023da6 <_printf_i+0x126>
 8023d98:	6862      	ldr	r2, [r4, #4]
 8023d9a:	6923      	ldr	r3, [r4, #16]
 8023d9c:	429a      	cmp	r2, r3
 8023d9e:	dc02      	bgt.n	8023da6 <_printf_i+0x126>
 8023da0:	2330      	movs	r3, #48	; 0x30
 8023da2:	3e01      	subs	r6, #1
 8023da4:	7033      	strb	r3, [r6, #0]
 8023da6:	9b04      	ldr	r3, [sp, #16]
 8023da8:	1b9b      	subs	r3, r3, r6
 8023daa:	6123      	str	r3, [r4, #16]
 8023dac:	9b07      	ldr	r3, [sp, #28]
 8023dae:	0021      	movs	r1, r4
 8023db0:	9300      	str	r3, [sp, #0]
 8023db2:	9805      	ldr	r0, [sp, #20]
 8023db4:	9b06      	ldr	r3, [sp, #24]
 8023db6:	aa09      	add	r2, sp, #36	; 0x24
 8023db8:	f7ff fef2 	bl	8023ba0 <_printf_common>
 8023dbc:	3001      	adds	r0, #1
 8023dbe:	d147      	bne.n	8023e50 <_printf_i+0x1d0>
 8023dc0:	2001      	movs	r0, #1
 8023dc2:	4240      	negs	r0, r0
 8023dc4:	b00b      	add	sp, #44	; 0x2c
 8023dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023dc8:	2220      	movs	r2, #32
 8023dca:	6809      	ldr	r1, [r1, #0]
 8023dcc:	430a      	orrs	r2, r1
 8023dce:	6022      	str	r2, [r4, #0]
 8023dd0:	2278      	movs	r2, #120	; 0x78
 8023dd2:	4932      	ldr	r1, [pc, #200]	; (8023e9c <_printf_i+0x21c>)
 8023dd4:	9103      	str	r1, [sp, #12]
 8023dd6:	0021      	movs	r1, r4
 8023dd8:	3145      	adds	r1, #69	; 0x45
 8023dda:	700a      	strb	r2, [r1, #0]
 8023ddc:	6819      	ldr	r1, [r3, #0]
 8023dde:	6822      	ldr	r2, [r4, #0]
 8023de0:	c920      	ldmia	r1!, {r5}
 8023de2:	0610      	lsls	r0, r2, #24
 8023de4:	d402      	bmi.n	8023dec <_printf_i+0x16c>
 8023de6:	0650      	lsls	r0, r2, #25
 8023de8:	d500      	bpl.n	8023dec <_printf_i+0x16c>
 8023dea:	b2ad      	uxth	r5, r5
 8023dec:	6019      	str	r1, [r3, #0]
 8023dee:	07d3      	lsls	r3, r2, #31
 8023df0:	d502      	bpl.n	8023df8 <_printf_i+0x178>
 8023df2:	2320      	movs	r3, #32
 8023df4:	4313      	orrs	r3, r2
 8023df6:	6023      	str	r3, [r4, #0]
 8023df8:	2710      	movs	r7, #16
 8023dfa:	2d00      	cmp	r5, #0
 8023dfc:	d1a9      	bne.n	8023d52 <_printf_i+0xd2>
 8023dfe:	2220      	movs	r2, #32
 8023e00:	6823      	ldr	r3, [r4, #0]
 8023e02:	4393      	bics	r3, r2
 8023e04:	6023      	str	r3, [r4, #0]
 8023e06:	e7a4      	b.n	8023d52 <_printf_i+0xd2>
 8023e08:	681a      	ldr	r2, [r3, #0]
 8023e0a:	680d      	ldr	r5, [r1, #0]
 8023e0c:	1d10      	adds	r0, r2, #4
 8023e0e:	6949      	ldr	r1, [r1, #20]
 8023e10:	6018      	str	r0, [r3, #0]
 8023e12:	6813      	ldr	r3, [r2, #0]
 8023e14:	062e      	lsls	r6, r5, #24
 8023e16:	d501      	bpl.n	8023e1c <_printf_i+0x19c>
 8023e18:	6019      	str	r1, [r3, #0]
 8023e1a:	e002      	b.n	8023e22 <_printf_i+0x1a2>
 8023e1c:	066d      	lsls	r5, r5, #25
 8023e1e:	d5fb      	bpl.n	8023e18 <_printf_i+0x198>
 8023e20:	8019      	strh	r1, [r3, #0]
 8023e22:	2300      	movs	r3, #0
 8023e24:	9e04      	ldr	r6, [sp, #16]
 8023e26:	6123      	str	r3, [r4, #16]
 8023e28:	e7c0      	b.n	8023dac <_printf_i+0x12c>
 8023e2a:	681a      	ldr	r2, [r3, #0]
 8023e2c:	1d11      	adds	r1, r2, #4
 8023e2e:	6019      	str	r1, [r3, #0]
 8023e30:	6816      	ldr	r6, [r2, #0]
 8023e32:	2100      	movs	r1, #0
 8023e34:	0030      	movs	r0, r6
 8023e36:	6862      	ldr	r2, [r4, #4]
 8023e38:	f000 f845 	bl	8023ec6 <memchr>
 8023e3c:	2800      	cmp	r0, #0
 8023e3e:	d001      	beq.n	8023e44 <_printf_i+0x1c4>
 8023e40:	1b80      	subs	r0, r0, r6
 8023e42:	6060      	str	r0, [r4, #4]
 8023e44:	6863      	ldr	r3, [r4, #4]
 8023e46:	6123      	str	r3, [r4, #16]
 8023e48:	2300      	movs	r3, #0
 8023e4a:	9a04      	ldr	r2, [sp, #16]
 8023e4c:	7013      	strb	r3, [r2, #0]
 8023e4e:	e7ad      	b.n	8023dac <_printf_i+0x12c>
 8023e50:	0032      	movs	r2, r6
 8023e52:	6923      	ldr	r3, [r4, #16]
 8023e54:	9906      	ldr	r1, [sp, #24]
 8023e56:	9805      	ldr	r0, [sp, #20]
 8023e58:	9d07      	ldr	r5, [sp, #28]
 8023e5a:	47a8      	blx	r5
 8023e5c:	3001      	adds	r0, #1
 8023e5e:	d0af      	beq.n	8023dc0 <_printf_i+0x140>
 8023e60:	6823      	ldr	r3, [r4, #0]
 8023e62:	079b      	lsls	r3, r3, #30
 8023e64:	d415      	bmi.n	8023e92 <_printf_i+0x212>
 8023e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e68:	68e0      	ldr	r0, [r4, #12]
 8023e6a:	4298      	cmp	r0, r3
 8023e6c:	daaa      	bge.n	8023dc4 <_printf_i+0x144>
 8023e6e:	0018      	movs	r0, r3
 8023e70:	e7a8      	b.n	8023dc4 <_printf_i+0x144>
 8023e72:	0022      	movs	r2, r4
 8023e74:	2301      	movs	r3, #1
 8023e76:	9906      	ldr	r1, [sp, #24]
 8023e78:	9805      	ldr	r0, [sp, #20]
 8023e7a:	9e07      	ldr	r6, [sp, #28]
 8023e7c:	3219      	adds	r2, #25
 8023e7e:	47b0      	blx	r6
 8023e80:	3001      	adds	r0, #1
 8023e82:	d09d      	beq.n	8023dc0 <_printf_i+0x140>
 8023e84:	3501      	adds	r5, #1
 8023e86:	68e3      	ldr	r3, [r4, #12]
 8023e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023e8a:	1a9b      	subs	r3, r3, r2
 8023e8c:	42ab      	cmp	r3, r5
 8023e8e:	dcf0      	bgt.n	8023e72 <_printf_i+0x1f2>
 8023e90:	e7e9      	b.n	8023e66 <_printf_i+0x1e6>
 8023e92:	2500      	movs	r5, #0
 8023e94:	e7f7      	b.n	8023e86 <_printf_i+0x206>
 8023e96:	46c0      	nop			; (mov r8, r8)
 8023e98:	08025994 	.word	0x08025994
 8023e9c:	080259a5 	.word	0x080259a5

08023ea0 <memmove>:
 8023ea0:	b510      	push	{r4, lr}
 8023ea2:	4288      	cmp	r0, r1
 8023ea4:	d902      	bls.n	8023eac <memmove+0xc>
 8023ea6:	188b      	adds	r3, r1, r2
 8023ea8:	4298      	cmp	r0, r3
 8023eaa:	d303      	bcc.n	8023eb4 <memmove+0x14>
 8023eac:	2300      	movs	r3, #0
 8023eae:	e007      	b.n	8023ec0 <memmove+0x20>
 8023eb0:	5c8b      	ldrb	r3, [r1, r2]
 8023eb2:	5483      	strb	r3, [r0, r2]
 8023eb4:	3a01      	subs	r2, #1
 8023eb6:	d2fb      	bcs.n	8023eb0 <memmove+0x10>
 8023eb8:	bd10      	pop	{r4, pc}
 8023eba:	5ccc      	ldrb	r4, [r1, r3]
 8023ebc:	54c4      	strb	r4, [r0, r3]
 8023ebe:	3301      	adds	r3, #1
 8023ec0:	429a      	cmp	r2, r3
 8023ec2:	d1fa      	bne.n	8023eba <memmove+0x1a>
 8023ec4:	e7f8      	b.n	8023eb8 <memmove+0x18>

08023ec6 <memchr>:
 8023ec6:	b2c9      	uxtb	r1, r1
 8023ec8:	1882      	adds	r2, r0, r2
 8023eca:	4290      	cmp	r0, r2
 8023ecc:	d101      	bne.n	8023ed2 <memchr+0xc>
 8023ece:	2000      	movs	r0, #0
 8023ed0:	4770      	bx	lr
 8023ed2:	7803      	ldrb	r3, [r0, #0]
 8023ed4:	428b      	cmp	r3, r1
 8023ed6:	d0fb      	beq.n	8023ed0 <memchr+0xa>
 8023ed8:	3001      	adds	r0, #1
 8023eda:	e7f6      	b.n	8023eca <memchr+0x4>

08023edc <_realloc_r>:
 8023edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023ede:	0007      	movs	r7, r0
 8023ee0:	000e      	movs	r6, r1
 8023ee2:	0014      	movs	r4, r2
 8023ee4:	2900      	cmp	r1, #0
 8023ee6:	d105      	bne.n	8023ef4 <_realloc_r+0x18>
 8023ee8:	0011      	movs	r1, r2
 8023eea:	f7ff fb09 	bl	8023500 <_malloc_r>
 8023eee:	0005      	movs	r5, r0
 8023ef0:	0028      	movs	r0, r5
 8023ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023ef4:	2a00      	cmp	r2, #0
 8023ef6:	d103      	bne.n	8023f00 <_realloc_r+0x24>
 8023ef8:	f7ff fca6 	bl	8023848 <_free_r>
 8023efc:	0025      	movs	r5, r4
 8023efe:	e7f7      	b.n	8023ef0 <_realloc_r+0x14>
 8023f00:	f000 f81b 	bl	8023f3a <_malloc_usable_size_r>
 8023f04:	9001      	str	r0, [sp, #4]
 8023f06:	4284      	cmp	r4, r0
 8023f08:	d803      	bhi.n	8023f12 <_realloc_r+0x36>
 8023f0a:	0035      	movs	r5, r6
 8023f0c:	0843      	lsrs	r3, r0, #1
 8023f0e:	42a3      	cmp	r3, r4
 8023f10:	d3ee      	bcc.n	8023ef0 <_realloc_r+0x14>
 8023f12:	0021      	movs	r1, r4
 8023f14:	0038      	movs	r0, r7
 8023f16:	f7ff faf3 	bl	8023500 <_malloc_r>
 8023f1a:	1e05      	subs	r5, r0, #0
 8023f1c:	d0e8      	beq.n	8023ef0 <_realloc_r+0x14>
 8023f1e:	9b01      	ldr	r3, [sp, #4]
 8023f20:	0022      	movs	r2, r4
 8023f22:	429c      	cmp	r4, r3
 8023f24:	d900      	bls.n	8023f28 <_realloc_r+0x4c>
 8023f26:	001a      	movs	r2, r3
 8023f28:	0031      	movs	r1, r6
 8023f2a:	0028      	movs	r0, r5
 8023f2c:	f7ff fc82 	bl	8023834 <memcpy>
 8023f30:	0031      	movs	r1, r6
 8023f32:	0038      	movs	r0, r7
 8023f34:	f7ff fc88 	bl	8023848 <_free_r>
 8023f38:	e7da      	b.n	8023ef0 <_realloc_r+0x14>

08023f3a <_malloc_usable_size_r>:
 8023f3a:	1f0b      	subs	r3, r1, #4
 8023f3c:	681b      	ldr	r3, [r3, #0]
 8023f3e:	1f18      	subs	r0, r3, #4
 8023f40:	2b00      	cmp	r3, #0
 8023f42:	da01      	bge.n	8023f48 <_malloc_usable_size_r+0xe>
 8023f44:	580b      	ldr	r3, [r1, r0]
 8023f46:	18c0      	adds	r0, r0, r3
 8023f48:	4770      	bx	lr
	...

08023f4c <_init>:
 8023f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f4e:	46c0      	nop			; (mov r8, r8)
 8023f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f52:	bc08      	pop	{r3}
 8023f54:	469e      	mov	lr, r3
 8023f56:	4770      	bx	lr

08023f58 <_fini>:
 8023f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f5a:	46c0      	nop			; (mov r8, r8)
 8023f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f5e:	bc08      	pop	{r3}
 8023f60:	469e      	mov	lr, r3
 8023f62:	4770      	bx	lr
 8023f64:	0000      	movs	r0, r0
	...

08023f68 <__FLASH_Program_Fast_veneer>:
 8023f68:	b401      	push	{r0}
 8023f6a:	4802      	ldr	r0, [pc, #8]	; (8023f74 <__FLASH_Program_Fast_veneer+0xc>)
 8023f6c:	4684      	mov	ip, r0
 8023f6e:	bc01      	pop	{r0}
 8023f70:	4760      	bx	ip
 8023f72:	bf00      	nop
 8023f74:	20000255 	.word	0x20000255

Disassembly of section .data:

20000000 <USBPD_Trace>:
20000000:	0800150f                                ....

20000004 <dac_value>:
20000004:	000001f4                                ....

20000008 <currentState>:
20000008:	00000001                                ....

2000000c <SNK_data>:
2000000c:	0000014a 000003e8 00000000 00000000     J...............
2000001c:	00000000 000001f4 00000000 00000000     ................
	...
20000038:	00000002 0000000a 00000000              ............

20000044 <dhandle>:
20000044:	2000000c                                ... 

20000048 <SYMBOLS>:
20000048:	796d307e 705f5b33 4f017b7f 00670e37     ~0my3[_p.{.O7.g.

20000058 <SystemCoreClock>:
20000058:	00f42400                                .$..

2000005c <uwTickPrio>:
2000005c:	00000004                                ....

20000060 <uwTickFreq>:
20000060:	00000001                                ....

20000064 <USBD_CDC_DeviceQualifierDesc>:
20000064:	0200060a 40000000 00000001              .......@....

20000070 <USBD_CDC>:
20000070:	0801598d 08015bad 08015ccd 00000000     .Y...[...\......
20000080:	08016061 08015ebd 08015fdb 00000000     a`...^..._......
	...
20000098:	0801617d 080160ed 0801620d 0801629d     }a...`...b...b..

200000a8 <USBD_CDC_CfgDesc>:
200000a8:	00430209 c0000102 00040932 02020100     ..C.....2.......
200000b8:	24050001 05011000 01000124 02022404     ...$....$....$..
200000c8:	00062405 82050701 10000803 00010409     .$..............
200000d8:	00000a02 01050700 00004002 02810507     .........@......
200000e8:	                                         @..

200000eb <CDCInEpAdd>:
200000eb:	                                         .

200000ec <CDCOutEpAdd>:
200000ec:	                                         .

200000ed <CDCCmdEpAdd>:
200000ed:	                                         ...

200000f0 <uxCriticalNesting>:
200000f0:	aaaaaaaa                                ....

200000f4 <DPM_Settings>:
200000f4:	00000001 00000002 00000000              ............

20000100 <DPM_ID_Settings>:
20000100:	f0000003 00020483                       ........

20000108 <DPM_USER_Settings>:
20000108:	0000000c 00000000 00000000 00000000     ................
	...

2000017c <USBPD_NbPDO>:
2000017c:	00000003                                ....

20000180 <PORT0_PDO_ListSNK>:
20000180:	00019096 0002d096 0603c096 00000000     ................
	...

2000019c <USBD_Interface_fops_FS>:
2000019c:	0801d841 0801d871 0801d87d 0801d8b5     A...q...}.......
200001ac:	0801d8e1                                ....

200001b0 <CDC_Desc>:
200001b0:	0801d905 0801d929 0801d991 0801d94d     ....).......M...
200001c0:	0801d9bd 0801d9e5 0801da29 00000000     ........).......

200001d0 <USBD_CDC_DeviceDesc>:
200001d0:	02000112 40000202 57400483 02010200     .......@..@W....
200001e0:	00000103                                ....

200001e4 <USBD_LangIDDesc>:
200001e4:	04090304                                ....

200001e8 <USBD_StringSerial>:
200001e8:	0000031a 00000000 00000000 00000000     ................
	...

20000204 <_impure_data>:
20000204:	00000000 20005040 200050a8 20005110     ....@P. .P. .Q. 
	...

20000250 <_impure_ptr>:
20000250:	20000204                                ... 

20000254 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000254:	b580      	push	{r7, lr}
20000256:	b088      	sub	sp, #32
20000258:	af00      	add	r7, sp, #0
2000025a:	6078      	str	r0, [r7, #4]
2000025c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000025e:	231f      	movs	r3, #31
20000260:	18fb      	adds	r3, r7, r3
20000262:	2200      	movs	r2, #0
20000264:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000266:	687b      	ldr	r3, [r7, #4]
20000268:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000026a:	683b      	ldr	r3, [r7, #0]
2000026c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000026e:	4b1a      	ldr	r3, [pc, #104]	; (200002d8 <FLASH_Program_Fast+0x84>)
20000270:	695a      	ldr	r2, [r3, #20]
20000272:	4b19      	ldr	r3, [pc, #100]	; (200002d8 <FLASH_Program_Fast+0x84>)
20000274:	2180      	movs	r1, #128	; 0x80
20000276:	02c9      	lsls	r1, r1, #11
20000278:	430a      	orrs	r2, r1
2000027a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000027c:	f3ef 8310 	mrs	r3, PRIMASK
20000280:	60fb      	str	r3, [r7, #12]
  return(result);
20000282:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000286:	b672      	cpsid	i
}
20000288:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000028a:	e00f      	b.n	200002ac <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000028c:	697a      	ldr	r2, [r7, #20]
2000028e:	69bb      	ldr	r3, [r7, #24]
20000290:	6812      	ldr	r2, [r2, #0]
20000292:	601a      	str	r2, [r3, #0]
    src += 4U;
20000294:	697b      	ldr	r3, [r7, #20]
20000296:	3304      	adds	r3, #4
20000298:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000029a:	69bb      	ldr	r3, [r7, #24]
2000029c:	3304      	adds	r3, #4
2000029e:	61bb      	str	r3, [r7, #24]
    index++;
200002a0:	211f      	movs	r1, #31
200002a2:	187b      	adds	r3, r7, r1
200002a4:	781a      	ldrb	r2, [r3, #0]
200002a6:	187b      	adds	r3, r7, r1
200002a8:	3201      	adds	r2, #1
200002aa:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200002ac:	231f      	movs	r3, #31
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	781b      	ldrb	r3, [r3, #0]
200002b2:	2b3f      	cmp	r3, #63	; 0x3f
200002b4:	d9ea      	bls.n	2000028c <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200002b6:	46c0      	nop			; (mov r8, r8)
200002b8:	4b07      	ldr	r3, [pc, #28]	; (200002d8 <FLASH_Program_Fast+0x84>)
200002ba:	691a      	ldr	r2, [r3, #16]
200002bc:	23c0      	movs	r3, #192	; 0xc0
200002be:	029b      	lsls	r3, r3, #10
200002c0:	4013      	ands	r3, r2
200002c2:	d1f9      	bne.n	200002b8 <FLASH_Program_Fast+0x64>
200002c4:	693b      	ldr	r3, [r7, #16]
200002c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002c8:	68bb      	ldr	r3, [r7, #8]
200002ca:	f383 8810 	msr	PRIMASK, r3
}
200002ce:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002d0:	46c0      	nop			; (mov r8, r8)
200002d2:	46bd      	mov	sp, r7
200002d4:	b008      	add	sp, #32
200002d6:	bd80      	pop	{r7, pc}
200002d8:	40022000 	.word	0x40022000
