
STM32G0_USBPD_Sink_1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022e88  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af4  08022f48  08022f48  00032f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024a3c  08024a3c  000402cc  2**0
                  CONTENTS
  4 .ARM          00000008  08024a3c  08024a3c  00034a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024a44  08024a44  000402cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024a44  08024a44  00034a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024a48  08024a48  00034a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  08024a4c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00004e74  200002cc  08024d18  000402cc  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20005140  08024d18  00045140  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY
 12 .comment      000041e7  00000000  00000000  000402fa  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  000444e1  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  00044820  2**2
                  CONTENTS, READONLY
 15 .debug_info   00041bfe  00000000  00000000  00044844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a5f8  00000000  00000000  00086442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000037d0  00000000  00000000  00090a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002ba9  00000000  00000000  00094210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f4fc  00000000  00000000  00096db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000444b5  00000000  00000000  000c62b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f61ff  00000000  00000000  0010a76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000dc28  00000000  00000000  0020096c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  0020e594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002cc 	.word	0x200002cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08022f20 	.word	0x08022f20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002d0 	.word	0x200002d0
 8000104:	08022f20 	.word	0x08022f20

08000108 <USBPD_CAD_Init>:
 8000108:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	0015      	movs	r5, r2
 800010e:	001e      	movs	r6, r3
 8000110:	2400      	movs	r4, #0
 8000112:	4668      	mov	r0, sp
 8000114:	7a00      	ldrb	r0, [r0, #8]
 8000116:	2803      	cmp	r0, #3
 8000118:	d301      	bcc.n	800011e <USBPD_CAD_Init+0x16>
 800011a:	2401      	movs	r4, #1
 800011c:	e01f      	b.n	800015e <USBPD_CAD_Init+0x56>
 800011e:	9100      	str	r1, [sp, #0]
 8000120:	2900      	cmp	r1, #0
 8000122:	d101      	bne.n	8000128 <USBPD_CAD_Init+0x20>
 8000124:	2402      	movs	r4, #2
 8000126:	e01a      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000128:	200c      	movs	r0, #12
 800012a:	f022 f9a7 	bl	802247c <malloc>
 800012e:	0007      	movs	r7, r0
 8000130:	d101      	bne.n	8000136 <USBPD_CAD_Init+0x2e>
 8000132:	2403      	movs	r4, #3
 8000134:	e013      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000136:	210c      	movs	r1, #12
 8000138:	f022 fb61 	bl	80227fe <__aeabi_memclr>
 800013c:	603e      	str	r6, [r7, #0]
 800013e:	723c      	strb	r4, [r7, #8]
 8000140:	9800      	ldr	r0, [sp, #0]
 8000142:	6078      	str	r0, [r7, #4]
 8000144:	484a      	ldr	r0, [pc, #296]	; (8000270 <.text_6>)
 8000146:	4669      	mov	r1, sp
 8000148:	7a09      	ldrb	r1, [r1, #8]
 800014a:	0089      	lsls	r1, r1, #2
 800014c:	5047      	str	r7, [r0, r1]
 800014e:	9800      	ldr	r0, [sp, #0]
 8000150:	6843      	ldr	r3, [r0, #4]
 8000152:	0032      	movs	r2, r6
 8000154:	0029      	movs	r1, r5
 8000156:	4668      	mov	r0, sp
 8000158:	7a00      	ldrb	r0, [r0, #8]
 800015a:	f011 fea5 	bl	8011ea8 <CAD_Init>
 800015e:	0020      	movs	r0, r4
 8000160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000162 <USBPD_CAD_PortEnable>:
 8000162:	2803      	cmp	r0, #3
 8000164:	d203      	bcs.n	800016e <USBPD_CAD_PortEnable+0xc>
 8000166:	4a42      	ldr	r2, [pc, #264]	; (8000270 <.text_6>)
 8000168:	0080      	lsls	r0, r0, #2
 800016a:	5810      	ldr	r0, [r2, r0]
 800016c:	7201      	strb	r1, [r0, #8]
 800016e:	4770      	bx	lr

08000170 <USBPD_CAD_Process>:
 8000170:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000172:	2400      	movs	r4, #0
 8000174:	4669      	mov	r1, sp
 8000176:	700c      	strb	r4, [r1, #0]
 8000178:	9401      	str	r4, [sp, #4]
 800017a:	2500      	movs	r5, #0
 800017c:	43ed      	mvns	r5, r5
 800017e:	4f3d      	ldr	r7, [pc, #244]	; (8000274 <.text_7>)
 8000180:	483b      	ldr	r0, [pc, #236]	; (8000270 <.text_6>)
 8000182:	00a1      	lsls	r1, r4, #2
 8000184:	1846      	adds	r6, r0, r1
 8000186:	6830      	ldr	r0, [r6, #0]
 8000188:	2800      	cmp	r0, #0
 800018a:	d06c      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800018c:	7a00      	ldrb	r0, [r0, #8]
 800018e:	2801      	cmp	r0, #1
 8000190:	d169      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 8000192:	aa01      	add	r2, sp, #4
 8000194:	4669      	mov	r1, sp
 8000196:	b2e0      	uxtb	r0, r4
 8000198:	f012 f82e 	bl	80121f8 <CAD_StateMachine>
 800019c:	42a8      	cmp	r0, r5
 800019e:	d800      	bhi.n	80001a2 <USBPD_CAD_Process+0x32>
 80001a0:	0005      	movs	r5, r0
 80001a2:	4668      	mov	r0, sp
 80001a4:	7800      	ldrb	r0, [r0, #0]
 80001a6:	2801      	cmp	r0, #1
 80001a8:	d004      	beq.n	80001b4 <USBPD_CAD_Process+0x44>
 80001aa:	2802      	cmp	r0, #2
 80001ac:	d012      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001ae:	2804      	cmp	r0, #4
 80001b0:	d010      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001b2:	e040      	b.n	8000236 <USBPD_CAD_Process+0xc6>
 80001b4:	6830      	ldr	r0, [r6, #0]
 80001b6:	6801      	ldr	r1, [r0, #0]
 80001b8:	680a      	ldr	r2, [r1, #0]
 80001ba:	4b2f      	ldr	r3, [pc, #188]	; (8000278 <.text_8>)
 80001bc:	4013      	ands	r3, r2
 80001be:	600b      	str	r3, [r1, #0]
 80001c0:	6801      	ldr	r1, [r0, #0]
 80001c2:	680a      	ldr	r2, [r1, #0]
 80001c4:	23c0      	movs	r3, #192	; 0xc0
 80001c6:	439a      	bics	r2, r3
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	6800      	ldr	r0, [r0, #0]
 80001cc:	6801      	ldr	r1, [r0, #0]
 80001ce:	4039      	ands	r1, r7
 80001d0:	6001      	str	r1, [r0, #0]
 80001d2:	e034      	b.n	800023e <USBPD_CAD_Process+0xce>
 80001d4:	6830      	ldr	r0, [r6, #0]
 80001d6:	9901      	ldr	r1, [sp, #4]
 80001d8:	2901      	cmp	r1, #1
 80001da:	6801      	ldr	r1, [r0, #0]
 80001dc:	680a      	ldr	r2, [r1, #0]
 80001de:	d103      	bne.n	80001e8 <USBPD_CAD_Process+0x78>
 80001e0:	403a      	ands	r2, r7
 80001e2:	2380      	movs	r3, #128	; 0x80
 80001e4:	01db      	lsls	r3, r3, #7
 80001e6:	e002      	b.n	80001ee <USBPD_CAD_Process+0x7e>
 80001e8:	403a      	ands	r2, r7
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	019b      	lsls	r3, r3, #6
 80001ee:	4313      	orrs	r3, r2
 80001f0:	600b      	str	r3, [r1, #0]
 80001f2:	6801      	ldr	r1, [r0, #0]
 80001f4:	680b      	ldr	r3, [r1, #0]
 80001f6:	22c0      	movs	r2, #192	; 0xc0
 80001f8:	4393      	bics	r3, r2
 80001fa:	469c      	mov	ip, r3
 80001fc:	9a01      	ldr	r2, [sp, #4]
 80001fe:	0193      	lsls	r3, r2, #6
 8000200:	22c0      	movs	r2, #192	; 0xc0
 8000202:	401a      	ands	r2, r3
 8000204:	4663      	mov	r3, ip
 8000206:	431a      	orrs	r2, r3
 8000208:	600a      	str	r2, [r1, #0]
 800020a:	6801      	ldr	r1, [r0, #0]
 800020c:	680a      	ldr	r2, [r1, #0]
 800020e:	2380      	movs	r3, #128	; 0x80
 8000210:	015b      	lsls	r3, r3, #5
 8000212:	4313      	orrs	r3, r2
 8000214:	600b      	str	r3, [r1, #0]
 8000216:	6800      	ldr	r0, [r0, #0]
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	074a      	lsls	r2, r1, #29
 800021c:	0fd2      	lsrs	r2, r2, #31
 800021e:	d103      	bne.n	8000228 <USBPD_CAD_Process+0xb8>
 8000220:	2208      	movs	r2, #8
 8000222:	4391      	bics	r1, r2
 8000224:	6001      	str	r1, [r0, #0]
 8000226:	e002      	b.n	800022e <USBPD_CAD_Process+0xbe>
 8000228:	2208      	movs	r2, #8
 800022a:	430a      	orrs	r2, r1
 800022c:	6002      	str	r2, [r0, #0]
 800022e:	2168      	movs	r1, #104	; 0x68
 8000230:	b2e0      	uxtb	r0, r4
 8000232:	f000 f925 	bl	8000480 <USBPD_PE_Notification>
 8000236:	4668      	mov	r0, sp
 8000238:	7800      	ldrb	r0, [r0, #0]
 800023a:	2800      	cmp	r0, #0
 800023c:	d013      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800023e:	9a01      	ldr	r2, [sp, #4]
 8000240:	4668      	mov	r0, sp
 8000242:	7801      	ldrb	r1, [r0, #0]
 8000244:	b2e0      	uxtb	r0, r4
 8000246:	6833      	ldr	r3, [r6, #0]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4798      	blx	r3
 800024e:	4668      	mov	r0, sp
 8000250:	7800      	ldrb	r0, [r0, #0]
 8000252:	2801      	cmp	r0, #1
 8000254:	d003      	beq.n	800025e <USBPD_CAD_Process+0xee>
 8000256:	4668      	mov	r0, sp
 8000258:	7800      	ldrb	r0, [r0, #0]
 800025a:	2803      	cmp	r0, #3
 800025c:	d103      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 800025e:	2169      	movs	r1, #105	; 0x69
 8000260:	b2e0      	uxtb	r0, r4
 8000262:	f000 f90d 	bl	8000480 <USBPD_PE_Notification>
 8000266:	1c64      	adds	r4, r4, #1
 8000268:	2c03      	cmp	r4, #3
 800026a:	d389      	bcc.n	8000180 <USBPD_CAD_Process+0x10>
 800026c:	0028      	movs	r0, r5
 800026e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000270 <.text_6>:
 8000270:	200002e8 	.word	0x200002e8

08000274 <.text_7>:
 8000274:	ffff9fff 	.word	0xffff9fff

08000278 <.text_8>:
 8000278:	ffffefff 	.word	0xffffefff

0800027c <USBPD_CAD_AssertRd>:
 800027c:	b510      	push	{r4, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	f013 fc86 	bl	8013b90 <USBPDM1_DeAssertRp>
 8000284:	0020      	movs	r0, r4
 8000286:	f013 fc8d 	bl	8013ba4 <USBPDM1_AssertRd>
 800028a:	bd10      	pop	{r4, pc}

0800028c <USBPD_CAD_AssertRp>:
 800028c:	b510      	push	{r4, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	f013 fd2e 	bl	8013cf0 <USBPDM1_DeAssertRd>
 8000294:	0020      	movs	r0, r4
 8000296:	f013 fbc3 	bl	8013a20 <USBPDM1_AssertRp>
 800029a:	bd10      	pop	{r4, pc}

0800029c <USBPD_CAD_EnterErrorRecovery>:
 800029c:	b580      	push	{r7, lr}
 800029e:	f011 fee5 	bl	801206c <CAD_Enter_ErrorRecovery>
 80002a2:	bd01      	pop	{r0, pc}

080002a4 <USBPD_CAD_SRC_SetRpResistor>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	2404      	movs	r4, #4
 80002a8:	f011 ff4a 	bl	8012140 <CAD_Set_ResistorRp>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d100      	bne.n	80002b2 <USBPD_CAD_SRC_SetRpResistor+0xe>
 80002b0:	2400      	movs	r4, #0
 80002b2:	0020      	movs	r0, r4
 80002b4:	bd10      	pop	{r4, pc}

080002b6 <USBPD_CAD_SetRpResistor>:
 80002b6:	b580      	push	{r7, lr}
 80002b8:	f7ff fff4 	bl	80002a4 <USBPD_CAD_SRC_SetRpResistor>
 80002bc:	bd02      	pop	{r1, pc}

080002be <USBPD_CAD_GetMemoryConsumption>:
 80002be:	2024      	movs	r0, #36	; 0x24
 80002c0:	4770      	bx	lr
	...

080002c4 <USBPD_PE_Init>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	000e      	movs	r6, r1
 80002c8:	0017      	movs	r7, r2
 80002ca:	001c      	movs	r4, r3
 80002cc:	6871      	ldr	r1, [r6, #4]
 80002ce:	070a      	lsls	r2, r1, #28
 80002d0:	0fd2      	lsrs	r2, r2, #31
 80002d2:	d002      	beq.n	80002da <USBPD_PE_Init+0x16>
 80002d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d002      	beq.n	80002e0 <USBPD_PE_Init+0x1c>
 80002da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80002dc:	2900      	cmp	r1, #0
 80002de:	d101      	bne.n	80002e4 <USBPD_PE_Init+0x20>
 80002e0:	241b      	movs	r4, #27
 80002e2:	e04a      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002e4:	4669      	mov	r1, sp
 80002e6:	7008      	strb	r0, [r1, #0]
 80002e8:	4668      	mov	r0, sp
 80002ea:	7800      	ldrb	r0, [r0, #0]
 80002ec:	2803      	cmp	r0, #3
 80002ee:	d301      	bcc.n	80002f4 <USBPD_PE_Init+0x30>
 80002f0:	2417      	movs	r4, #23
 80002f2:	e042      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002f4:	2096      	movs	r0, #150	; 0x96
 80002f6:	00c0      	lsls	r0, r0, #3
 80002f8:	f022 f8c0 	bl	802247c <malloc>
 80002fc:	0005      	movs	r5, r0
 80002fe:	d101      	bne.n	8000304 <USBPD_PE_Init+0x40>
 8000300:	2416      	movs	r4, #22
 8000302:	e03a      	b.n	800037a <USBPD_PE_Init+0xb6>
 8000304:	2196      	movs	r1, #150	; 0x96
 8000306:	00c9      	lsls	r1, r1, #3
 8000308:	f022 fa79 	bl	80227fe <__aeabi_memclr>
 800030c:	487a      	ldr	r0, [pc, #488]	; (80004f8 <.text_16>)
 800030e:	4669      	mov	r1, sp
 8000310:	7809      	ldrb	r1, [r1, #0]
 8000312:	0089      	lsls	r1, r1, #2
 8000314:	5045      	str	r5, [r0, r1]
 8000316:	602e      	str	r6, [r5, #0]
 8000318:	606f      	str	r7, [r5, #4]
 800031a:	4668      	mov	r0, sp
 800031c:	7800      	ldrb	r0, [r0, #0]
 800031e:	7428      	strb	r0, [r5, #16]
 8000320:	60ac      	str	r4, [r5, #8]
 8000322:	4876      	ldr	r0, [pc, #472]	; (80004fc <.text_17>)
 8000324:	182b      	adds	r3, r5, r0
 8000326:	4876      	ldr	r0, [pc, #472]	; (8000500 <.text_18>)
 8000328:	182a      	adds	r2, r5, r0
 800032a:	0031      	movs	r1, r6
 800032c:	4668      	mov	r0, sp
 800032e:	7800      	ldrb	r0, [r0, #0]
 8000330:	f005 f98c 	bl	800564c <USBPD_PRL_Init>
 8000334:	0004      	movs	r4, r0
 8000336:	d120      	bne.n	800037a <USBPD_PE_Init+0xb6>
 8000338:	6868      	ldr	r0, [r5, #4]
 800033a:	6801      	ldr	r1, [r0, #0]
 800033c:	2703      	movs	r7, #3
 800033e:	682a      	ldr	r2, [r5, #0]
 8000340:	6852      	ldr	r2, [r2, #4]
 8000342:	0753      	lsls	r3, r2, #29
 8000344:	0fdb      	lsrs	r3, r3, #31
 8000346:	d006      	beq.n	8000356 <USBPD_PE_Init+0x92>
 8000348:	2208      	movs	r2, #8
 800034a:	430a      	orrs	r2, r1
 800034c:	6002      	str	r2, [r0, #0]
 800034e:	6873      	ldr	r3, [r6, #4]
 8000350:	403b      	ands	r3, r7
 8000352:	2201      	movs	r2, #1
 8000354:	e005      	b.n	8000362 <USBPD_PE_Init+0x9e>
 8000356:	2208      	movs	r2, #8
 8000358:	4391      	bics	r1, r2
 800035a:	6001      	str	r1, [r0, #0]
 800035c:	6873      	ldr	r3, [r6, #4]
 800035e:	403b      	ands	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	4611      	mov	r1, r2
 8000364:	4668      	mov	r0, sp
 8000366:	7800      	ldrb	r0, [r0, #0]
 8000368:	f005 f9ab 	bl	80056c2 <USBPD_PRL_SetHeader>
 800036c:	6870      	ldr	r0, [r6, #4]
 800036e:	4007      	ands	r7, r0
 8000370:	0039      	movs	r1, r7
 8000372:	4668      	mov	r0, sp
 8000374:	7800      	ldrb	r0, [r0, #0]
 8000376:	f005 f9e2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 800037a:	0020      	movs	r0, r4
 800037c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800037e <USBPD_PE_TimerCounter>:
 800037e:	495e      	ldr	r1, [pc, #376]	; (80004f8 <.text_16>)
 8000380:	0080      	lsls	r0, r0, #2
 8000382:	5808      	ldr	r0, [r1, r0]
 8000384:	49b4      	ldr	r1, [pc, #720]	; (8000658 <.text_20>)
 8000386:	084a      	lsrs	r2, r1, #1
 8000388:	8bc3      	ldrh	r3, [r0, #30]
 800038a:	4213      	tst	r3, r2
 800038c:	d002      	beq.n	8000394 <USBPD_PE_TimerCounter+0x16>
 800038e:	8bc3      	ldrh	r3, [r0, #30]
 8000390:	185b      	adds	r3, r3, r1
 8000392:	83c3      	strh	r3, [r0, #30]
 8000394:	8c03      	ldrh	r3, [r0, #32]
 8000396:	4213      	tst	r3, r2
 8000398:	d002      	beq.n	80003a0 <USBPD_PE_TimerCounter+0x22>
 800039a:	8c03      	ldrh	r3, [r0, #32]
 800039c:	185b      	adds	r3, r3, r1
 800039e:	8403      	strh	r3, [r0, #32]
 80003a0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a2:	4213      	tst	r3, r2
 80003a4:	d002      	beq.n	80003ac <USBPD_PE_TimerCounter+0x2e>
 80003a6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a8:	185b      	adds	r3, r3, r1
 80003aa:	84c3      	strh	r3, [r0, #38]	; 0x26
 80003ac:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003ae:	4213      	tst	r3, r2
 80003b0:	d002      	beq.n	80003b8 <USBPD_PE_TimerCounter+0x3a>
 80003b2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003b4:	185b      	adds	r3, r3, r1
 80003b6:	8443      	strh	r3, [r0, #34]	; 0x22
 80003b8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80003ba:	4213      	tst	r3, r2
 80003bc:	d002      	beq.n	80003c4 <USBPD_PE_TimerCounter+0x46>
 80003be:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80003c0:	1851      	adds	r1, r2, r1
 80003c2:	8481      	strh	r1, [r0, #36]	; 0x24
 80003c4:	4770      	bx	lr

080003c6 <USBPD_PE_TimerCounteUpdate>:
 80003c6:	b570      	push	{r4, r5, r6, lr}
 80003c8:	000e      	movs	r6, r1
 80003ca:	494b      	ldr	r1, [pc, #300]	; (80004f8 <.text_16>)
 80003cc:	0080      	lsls	r0, r0, #2
 80003ce:	580c      	ldr	r4, [r1, r0]
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0209      	lsls	r1, r1, #8
 80003d4:	428e      	cmp	r6, r1
 80003d6:	da28      	bge.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 80003d8:	1e4d      	subs	r5, r1, #1
 80003da:	8be0      	ldrh	r0, [r4, #30]
 80003dc:	4228      	tst	r0, r5
 80003de:	d004      	beq.n	80003ea <USBPD_PE_TimerCounteUpdate+0x24>
 80003e0:	0031      	movs	r1, r6
 80003e2:	8be0      	ldrh	r0, [r4, #30]
 80003e4:	f000 ffcb 	bl	800137e <PE_UpdateTimer>
 80003e8:	83e0      	strh	r0, [r4, #30]
 80003ea:	8c20      	ldrh	r0, [r4, #32]
 80003ec:	4228      	tst	r0, r5
 80003ee:	d004      	beq.n	80003fa <USBPD_PE_TimerCounteUpdate+0x34>
 80003f0:	0031      	movs	r1, r6
 80003f2:	8c20      	ldrh	r0, [r4, #32]
 80003f4:	f000 ffc3 	bl	800137e <PE_UpdateTimer>
 80003f8:	8420      	strh	r0, [r4, #32]
 80003fa:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80003fc:	4228      	tst	r0, r5
 80003fe:	d004      	beq.n	800040a <USBPD_PE_TimerCounteUpdate+0x44>
 8000400:	0031      	movs	r1, r6
 8000402:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8000404:	f000 ffbb 	bl	800137e <PE_UpdateTimer>
 8000408:	84e0      	strh	r0, [r4, #38]	; 0x26
 800040a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800040c:	4228      	tst	r0, r5
 800040e:	d004      	beq.n	800041a <USBPD_PE_TimerCounteUpdate+0x54>
 8000410:	0031      	movs	r1, r6
 8000412:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8000414:	f000 ffb3 	bl	800137e <PE_UpdateTimer>
 8000418:	8460      	strh	r0, [r4, #34]	; 0x22
 800041a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800041c:	4228      	tst	r0, r5
 800041e:	d004      	beq.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 8000420:	0031      	movs	r1, r6
 8000422:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8000424:	f000 ffab 	bl	800137e <PE_UpdateTimer>
 8000428:	84a0      	strh	r0, [r4, #36]	; 0x24
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <USBPD_PE_IsCableConnected>:
 800042c:	b510      	push	{r4, lr}
 800042e:	4a32      	ldr	r2, [pc, #200]	; (80004f8 <.text_16>)
 8000430:	0080      	lsls	r0, r0, #2
 8000432:	5810      	ldr	r0, [r2, r0]
 8000434:	6842      	ldr	r2, [r0, #4]
 8000436:	6813      	ldr	r3, [r2, #0]
 8000438:	4cb2      	ldr	r4, [pc, #712]	; (8000704 <.text_22>)
 800043a:	401c      	ands	r4, r3
 800043c:	0309      	lsls	r1, r1, #12
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	015b      	lsls	r3, r3, #5
 8000442:	4019      	ands	r1, r3
 8000444:	4321      	orrs	r1, r4
 8000446:	6011      	str	r1, [r2, #0]
 8000448:	2148      	movs	r1, #72	; 0x48
 800044a:	7441      	strb	r1, [r0, #17]
 800044c:	bd10      	pop	{r4, pc}

0800044e <USBPD_PE_StateMachine_Reset>:
 800044e:	2148      	movs	r1, #72	; 0x48
 8000450:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <.text_16>)
 8000452:	0080      	lsls	r0, r0, #2
 8000454:	5810      	ldr	r0, [r2, r0]
 8000456:	7441      	strb	r1, [r0, #17]
 8000458:	4770      	bx	lr

0800045a <USBPD_PE_StateMachine_Stop>:
 800045a:	b580      	push	{r7, lr}
 800045c:	f005 fc34 	bl	8005cc8 <USBPD_PRL_Stop>
 8000460:	bd01      	pop	{r0, pc}

08000462 <USBPD_PE_StateMachine_DRP>:
 8000462:	b580      	push	{r7, lr}
 8000464:	4924      	ldr	r1, [pc, #144]	; (80004f8 <.text_16>)
 8000466:	0082      	lsls	r2, r0, #2
 8000468:	5889      	ldr	r1, [r1, r2]
 800046a:	6849      	ldr	r1, [r1, #4]
 800046c:	6809      	ldr	r1, [r1, #0]
 800046e:	074a      	lsls	r2, r1, #29
 8000470:	0fd2      	lsrs	r2, r2, #31
 8000472:	d002      	beq.n	800047a <USBPD_PE_StateMachine_DRP+0x18>
 8000474:	f002 fb8a 	bl	8002b8c <USBPD_PE_StateMachine_SRC>
 8000478:	bd02      	pop	{r1, pc}
 800047a:	f001 fcd5 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 800047e:	bd02      	pop	{r1, pc}

08000480 <USBPD_PE_Notification>:
 8000480:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000482:	0004      	movs	r4, r0
 8000484:	2803      	cmp	r0, #3
 8000486:	d211      	bcs.n	80004ac <USBPD_PE_Notification+0x2c>
 8000488:	000d      	movs	r5, r1
 800048a:	2000      	movs	r0, #0
 800048c:	9000      	str	r0, [sp, #0]
 800048e:	2300      	movs	r3, #0
 8000490:	002a      	movs	r2, r5
 8000492:	0021      	movs	r1, r4
 8000494:	2009      	movs	r0, #9
 8000496:	4eb2      	ldr	r6, [pc, #712]	; (8000760 <.text_24>)
 8000498:	6836      	ldr	r6, [r6, #0]
 800049a:	47b0      	blx	r6
 800049c:	0029      	movs	r1, r5
 800049e:	0020      	movs	r0, r4
 80004a0:	4ab0      	ldr	r2, [pc, #704]	; (8000764 <.text_25>)
 80004a2:	00a3      	lsls	r3, r4, #2
 80004a4:	58d2      	ldr	r2, [r2, r3]
 80004a6:	6892      	ldr	r2, [r2, #8]
 80004a8:	68d2      	ldr	r2, [r2, #12]
 80004aa:	4790      	blx	r2
 80004ac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080004ae <USBPD_PE_InitVDM_Callback>:
 80004ae:	4aad      	ldr	r2, [pc, #692]	; (8000764 <.text_25>)
 80004b0:	0080      	lsls	r0, r0, #2
 80004b2:	5810      	ldr	r0, [r2, r0]
 80004b4:	60c1      	str	r1, [r0, #12]
 80004b6:	4770      	bx	lr

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	49aa      	ldr	r1, [pc, #680]	; (8000764 <.text_25>)
 80004bc:	0082      	lsls	r2, r0, #2
 80004be:	5889      	ldr	r1, [r1, r2]
 80004c0:	220f      	movs	r2, #15
 80004c2:	2332      	movs	r3, #50	; 0x32
 80004c4:	54ca      	strb	r2, [r1, r3]
 80004c6:	6889      	ldr	r1, [r1, #8]
 80004c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004ca:	4788      	blx	r1
 80004cc:	2000      	movs	r0, #0
 80004ce:	bd02      	pop	{r1, pc}

080004d0 <USBPD_PE_Request_CableReset>:
 80004d0:	b580      	push	{r7, lr}
 80004d2:	4909      	ldr	r1, [pc, #36]	; (80004f8 <.text_16>)
 80004d4:	0082      	lsls	r2, r0, #2
 80004d6:	5889      	ldr	r1, [r1, r2]
 80004d8:	684a      	ldr	r2, [r1, #4]
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	4ba2      	ldr	r3, [pc, #648]	; (8000768 <.text_26>)
 80004de:	4013      	ands	r3, r2
 80004e0:	4aa2      	ldr	r2, [pc, #648]	; (800076c <.text_27>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d105      	bne.n	80004f2 <USBPD_PE_Request_CableReset+0x22>
 80004e6:	2299      	movs	r2, #153	; 0x99
 80004e8:	2332      	movs	r3, #50	; 0x32
 80004ea:	54ca      	strb	r2, [r1, r3]
 80004ec:	6889      	ldr	r1, [r1, #8]
 80004ee:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004f0:	4788      	blx	r1
 80004f2:	2010      	movs	r0, #16
 80004f4:	bd02      	pop	{r1, pc}
	...

080004f8 <.text_16>:
 80004f8:	200002f4 	.word	0x200002f4

080004fc <.text_17>:
 80004fc:	0000048e 	.word	0x0000048e

08000500 <.text_18>:
 8000500:	00000281 	.word	0x00000281

08000504 <USBPD_PE_Request_CtrlMessage>:
 8000504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	4896      	ldr	r0, [pc, #600]	; (8000764 <.text_25>)
 800050a:	a916      	add	r1, sp, #88	; 0x58
 800050c:	7809      	ldrb	r1, [r1, #0]
 800050e:	0089      	lsls	r1, r1, #2
 8000510:	5840      	ldr	r0, [r0, r1]
 8000512:	9001      	str	r0, [sp, #4]
 8000514:	2400      	movs	r4, #0
 8000516:	a802      	add	r0, sp, #8
 8000518:	4995      	ldr	r1, [pc, #596]	; (8000770 <.text_28>)
 800051a:	224c      	movs	r2, #76	; 0x4c
 800051c:	f022 f964 	bl	80227e8 <__aeabi_memcpy>
 8000520:	2303      	movs	r3, #3
 8000522:	9801      	ldr	r0, [sp, #4]
 8000524:	2132      	movs	r1, #50	; 0x32
 8000526:	5c40      	ldrb	r0, [r0, r1]
 8000528:	2800      	cmp	r0, #0
 800052a:	d105      	bne.n	8000538 <USBPD_PE_Request_CtrlMessage+0x34>
 800052c:	9801      	ldr	r0, [sp, #4]
 800052e:	6840      	ldr	r0, [r0, #4]
 8000530:	6800      	ldr	r0, [r0, #0]
 8000532:	04c1      	lsls	r1, r0, #19
 8000534:	0fc9      	lsrs	r1, r1, #31
 8000536:	d101      	bne.n	800053c <USBPD_PE_Request_CtrlMessage+0x38>
 8000538:	2403      	movs	r4, #3
 800053a:	e089      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	6809      	ldr	r1, [r1, #0]
 8000540:	684a      	ldr	r2, [r1, #4]
 8000542:	0712      	lsls	r2, r2, #28
 8000544:	0fd5      	lsrs	r5, r2, #31
 8000546:	466a      	mov	r2, sp
 8000548:	7055      	strb	r5, [r2, #1]
 800054a:	2201      	movs	r2, #1
 800054c:	0885      	lsrs	r5, r0, #2
 800054e:	4015      	ands	r5, r2
 8000550:	d103      	bne.n	800055a <USBPD_PE_Request_CtrlMessage+0x56>
 8000552:	2502      	movs	r5, #2
 8000554:	466f      	mov	r7, sp
 8000556:	703c      	strb	r4, [r7, #0]
 8000558:	e003      	b.n	8000562 <USBPD_PE_Request_CtrlMessage+0x5e>
 800055a:	2500      	movs	r5, #0
 800055c:	2604      	movs	r6, #4
 800055e:	466f      	mov	r7, sp
 8000560:	703e      	strb	r6, [r7, #0]
 8000562:	0546      	lsls	r6, r0, #21
 8000564:	0f76      	lsrs	r6, r6, #29
 8000566:	2e03      	cmp	r6, #3
 8000568:	d101      	bne.n	800056e <USBPD_PE_Request_CtrlMessage+0x6a>
 800056a:	2608      	movs	r6, #8
 800056c:	e000      	b.n	8000570 <USBPD_PE_Request_CtrlMessage+0x6c>
 800056e:	2600      	movs	r6, #0
 8000570:	4018      	ands	r0, r3
 8000572:	2802      	cmp	r0, #2
 8000574:	d101      	bne.n	800057a <USBPD_PE_Request_CtrlMessage+0x76>
 8000576:	2040      	movs	r0, #64	; 0x40
 8000578:	e000      	b.n	800057c <USBPD_PE_Request_CtrlMessage+0x78>
 800057a:	2000      	movs	r0, #0
 800057c:	787f      	ldrb	r7, [r7, #1]
 800057e:	433d      	orrs	r5, r7
 8000580:	466f      	mov	r7, sp
 8000582:	783f      	ldrb	r7, [r7, #0]
 8000584:	432f      	orrs	r7, r5
 8000586:	433e      	orrs	r6, r7
 8000588:	4330      	orrs	r0, r6
 800058a:	4003      	ands	r3, r0
 800058c:	d002      	beq.n	8000594 <USBPD_PE_Request_CtrlMessage+0x90>
 800058e:	0003      	movs	r3, r0
 8000590:	2010      	movs	r0, #16
 8000592:	4318      	orrs	r0, r3
 8000594:	2505      	movs	r5, #5
 8000596:	4228      	tst	r0, r5
 8000598:	d002      	beq.n	80005a0 <USBPD_PE_Request_CtrlMessage+0x9c>
 800059a:	0003      	movs	r3, r0
 800059c:	2020      	movs	r0, #32
 800059e:	4318      	orrs	r0, r3
 80005a0:	ab17      	add	r3, sp, #92	; 0x5c
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	005e      	lsls	r6, r3, #1
 80005a6:	18f3      	adds	r3, r6, r3
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	ab02      	add	r3, sp, #8
 80005ac:	9e00      	ldr	r6, [sp, #0]
 80005ae:	5d9e      	ldrb	r6, [r3, r6]
 80005b0:	4030      	ands	r0, r6
 80005b2:	42b0      	cmp	r0, r6
 80005b4:	d11f      	bne.n	80005f6 <USBPD_PE_Request_CtrlMessage+0xf2>
 80005b6:	9e01      	ldr	r6, [sp, #4]
 80005b8:	2733      	movs	r7, #51	; 0x33
 80005ba:	55f4      	strb	r4, [r6, r7]
 80005bc:	9801      	ldr	r0, [sp, #4]
 80005be:	4eb2      	ldr	r6, [pc, #712]	; (8000888 <.text_30>)
 80005c0:	1980      	adds	r0, r0, r6
 80005c2:	ae17      	add	r6, sp, #92	; 0x5c
 80005c4:	7836      	ldrb	r6, [r6, #0]
 80005c6:	2e05      	cmp	r6, #5
 80005c8:	d031      	beq.n	800062e <USBPD_PE_Request_CtrlMessage+0x12a>
 80005ca:	2e0b      	cmp	r6, #11
 80005cc:	d00e      	beq.n	80005ec <USBPD_PE_Request_CtrlMessage+0xe8>
 80005ce:	2e0d      	cmp	r6, #13
 80005d0:	d028      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005d2:	2e11      	cmp	r6, #17
 80005d4:	d011      	beq.n	80005fa <USBPD_PE_Request_CtrlMessage+0xf6>
 80005d6:	2e12      	cmp	r6, #18
 80005d8:	d013      	beq.n	8000602 <USBPD_PE_Request_CtrlMessage+0xfe>
 80005da:	2e14      	cmp	r6, #20
 80005dc:	d013      	beq.n	8000606 <USBPD_PE_Request_CtrlMessage+0x102>
 80005de:	2e15      	cmp	r6, #21
 80005e0:	d017      	beq.n	8000612 <USBPD_PE_Request_CtrlMessage+0x10e>
 80005e2:	2e16      	cmp	r6, #22
 80005e4:	d00b      	beq.n	80005fe <USBPD_PE_Request_CtrlMessage+0xfa>
 80005e6:	2e18      	cmp	r6, #24
 80005e8:	d01c      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005ea:	e021      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	6889      	ldr	r1, [r1, #8]
 80005f0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d11c      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005f6:	2402      	movs	r4, #2
 80005f8:	e02a      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 80005fa:	2111      	movs	r1, #17
 80005fc:	e010      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 80005fe:	2116      	movs	r1, #22
 8000600:	e00e      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000602:	2112      	movs	r1, #18
 8000604:	e00c      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000606:	8909      	ldrh	r1, [r1, #8]
 8000608:	0889      	lsrs	r1, r1, #2
 800060a:	4211      	tst	r1, r2
 800060c:	d110      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800060e:	2410      	movs	r4, #16
 8000610:	e01e      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000612:	8909      	ldrh	r1, [r1, #8]
 8000614:	09c9      	lsrs	r1, r1, #7
 8000616:	4211      	tst	r1, r2
 8000618:	d101      	bne.n	800061e <USBPD_PE_Request_CtrlMessage+0x11a>
 800061a:	2010      	movs	r0, #16
 800061c:	e019      	b.n	8000652 <USBPD_PE_Request_CtrlMessage+0x14e>
 800061e:	2115      	movs	r1, #21
 8000620:	7001      	strb	r1, [r0, #0]
 8000622:	e005      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000624:	a918      	add	r1, sp, #96	; 0x60
 8000626:	7809      	ldrb	r1, [r1, #0]
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	55d1      	strb	r1, [r2, r7]
 800062c:	e000      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800062e:	7005      	strb	r5, [r0, #0]
 8000630:	9900      	ldr	r1, [sp, #0]
 8000632:	1859      	adds	r1, r3, r1
 8000634:	7849      	ldrb	r1, [r1, #1]
 8000636:	7041      	strb	r1, [r0, #1]
 8000638:	9800      	ldr	r0, [sp, #0]
 800063a:	1818      	adds	r0, r3, r0
 800063c:	7880      	ldrb	r0, [r0, #2]
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	2232      	movs	r2, #50	; 0x32
 8000642:	5488      	strb	r0, [r1, r2]
 8000644:	a816      	add	r0, sp, #88	; 0x58
 8000646:	7800      	ldrb	r0, [r0, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	6889      	ldr	r1, [r1, #8]
 800064c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800064e:	4788      	blx	r1
 8000650:	0020      	movs	r0, r4
 8000652:	b019      	add	sp, #100	; 0x64
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000658 <.text_20>:
 8000658:	0000ffff 	.word	0x0000ffff

0800065c <USBPD_PE_Request_DataMessage>:
 800065c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	000b      	movs	r3, r1
 8000662:	0017      	movs	r7, r2
 8000664:	483f      	ldr	r0, [pc, #252]	; (8000764 <.text_25>)
 8000666:	4669      	mov	r1, sp
 8000668:	7a09      	ldrb	r1, [r1, #8]
 800066a:	0089      	lsls	r1, r1, #2
 800066c:	5841      	ldr	r1, [r0, r1]
 800066e:	2402      	movs	r4, #2
 8000670:	2032      	movs	r0, #50	; 0x32
 8000672:	5c08      	ldrb	r0, [r1, r0]
 8000674:	2800      	cmp	r0, #0
 8000676:	d105      	bne.n	8000684 <USBPD_PE_Request_DataMessage+0x28>
 8000678:	2001      	movs	r0, #1
 800067a:	684a      	ldr	r2, [r1, #4]
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	0b12      	lsrs	r2, r2, #12
 8000680:	4002      	ands	r2, r0
 8000682:	d101      	bne.n	8000688 <USBPD_PE_Request_DataMessage+0x2c>
 8000684:	2403      	movs	r4, #3
 8000686:	e021      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 8000688:	466a      	mov	r2, sp
 800068a:	7013      	strb	r3, [r2, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2533      	movs	r5, #51	; 0x33
 8000690:	554a      	strb	r2, [r1, r5]
 8000692:	000b      	movs	r3, r1
 8000694:	3332      	adds	r3, #50	; 0x32
 8000696:	4dc0      	ldr	r5, [pc, #768]	; (8000998 <.text_36>)
 8000698:	4ec0      	ldr	r6, [pc, #768]	; (800099c <.text_37>)
 800069a:	9701      	str	r7, [sp, #4]
 800069c:	466f      	mov	r7, sp
 800069e:	783f      	ldrb	r7, [r7, #0]
 80006a0:	2f01      	cmp	r7, #1
 80006a2:	d004      	beq.n	80006ae <USBPD_PE_Request_DataMessage+0x52>
 80006a4:	2f06      	cmp	r7, #6
 80006a6:	d013      	beq.n	80006d0 <USBPD_PE_Request_DataMessage+0x74>
 80006a8:	2f07      	cmp	r7, #7
 80006aa:	d01b      	beq.n	80006e4 <USBPD_PE_Request_DataMessage+0x88>
 80006ac:	e027      	b.n	80006fe <USBPD_PE_Request_DataMessage+0xa2>
 80006ae:	684d      	ldr	r5, [r1, #4]
 80006b0:	682d      	ldr	r5, [r5, #0]
 80006b2:	08ad      	lsrs	r5, r5, #2
 80006b4:	4005      	ands	r5, r0
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006b8:	4cc1      	ldr	r4, [pc, #772]	; (80009c0 <.text_39>)
 80006ba:	5508      	strb	r0, [r1, r4]
 80006bc:	2007      	movs	r0, #7
 80006be:	7018      	strb	r0, [r3, #0]
 80006c0:	2400      	movs	r4, #0
 80006c2:	4668      	mov	r0, sp
 80006c4:	7a00      	ldrb	r0, [r0, #8]
 80006c6:	6889      	ldr	r1, [r1, #8]
 80006c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80006ca:	4788      	blx	r1
 80006cc:	0020      	movs	r0, r4
 80006ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d0:	6848      	ldr	r0, [r1, #4]
 80006d2:	6800      	ldr	r0, [r0, #0]
 80006d4:	4006      	ands	r6, r0
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d1f8      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006da:	9801      	ldr	r0, [sp, #4]
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	6288      	str	r0, [r1, #40]	; 0x28
 80006e0:	202b      	movs	r0, #43	; 0x2b
 80006e2:	e7ec      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006e4:	6848      	ldr	r0, [r1, #4]
 80006e6:	6800      	ldr	r0, [r0, #0]
 80006e8:	4006      	ands	r6, r0
 80006ea:	42ae      	cmp	r6, r5
 80006ec:	d1ee      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006ee:	9801      	ldr	r0, [sp, #4]
 80006f0:	6800      	ldr	r0, [r0, #0]
 80006f2:	6288      	str	r0, [r1, #40]	; 0x28
 80006f4:	205d      	movs	r0, #93	; 0x5d
 80006f6:	4cb2      	ldr	r4, [pc, #712]	; (80009c0 <.text_39>)
 80006f8:	5508      	strb	r0, [r1, r4]
 80006fa:	2062      	movs	r0, #98	; 0x62
 80006fc:	e7df      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006fe:	2410      	movs	r4, #16
 8000700:	e7e4      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
	...

08000704 <.text_22>:
 8000704:	ffffefff 	.word	0xffffefff

08000708 <USBPD_PE_Send_Request>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	000b      	movs	r3, r1
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <.text_25>)
 800070e:	0084      	lsls	r4, r0, #2
 8000710:	590d      	ldr	r5, [r1, r4]
 8000712:	2102      	movs	r1, #2
 8000714:	2432      	movs	r4, #50	; 0x32
 8000716:	5d2c      	ldrb	r4, [r5, r4]
 8000718:	2c00      	cmp	r4, #0
 800071a:	d104      	bne.n	8000726 <USBPD_PE_Send_Request+0x1e>
 800071c:	686c      	ldr	r4, [r5, #4]
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	04e6      	lsls	r6, r4, #19
 8000722:	0ff6      	lsrs	r6, r6, #31
 8000724:	d101      	bne.n	800072a <USBPD_PE_Send_Request+0x22>
 8000726:	2103      	movs	r1, #3
 8000728:	e017      	b.n	800075a <USBPD_PE_Send_Request+0x52>
 800072a:	4ea6      	ldr	r6, [pc, #664]	; (80009c4 <.text_40>)
 800072c:	4026      	ands	r6, r4
 800072e:	24c0      	movs	r4, #192	; 0xc0
 8000730:	00a4      	lsls	r4, r4, #2
 8000732:	42a6      	cmp	r6, r4
 8000734:	d111      	bne.n	800075a <USBPD_PE_Send_Request+0x52>
 8000736:	2145      	movs	r1, #69	; 0x45
 8000738:	2432      	movs	r4, #50	; 0x32
 800073a:	5529      	strb	r1, [r5, r4]
 800073c:	61ab      	str	r3, [r5, #24]
 800073e:	6969      	ldr	r1, [r5, #20]
 8000740:	2318      	movs	r3, #24
 8000742:	4399      	bics	r1, r3
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	4013      	ands	r3, r2
 8000748:	430b      	orrs	r3, r1
 800074a:	616b      	str	r3, [r5, #20]
 800074c:	2400      	movs	r4, #0
 800074e:	2233      	movs	r2, #51	; 0x33
 8000750:	54ac      	strb	r4, [r5, r2]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000756:	4788      	blx	r1
 8000758:	2100      	movs	r1, #0
 800075a:	0008      	movs	r0, r1
 800075c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000760 <.text_24>:
 8000760:	20000000 	.word	0x20000000

08000764 <.text_25>:
 8000764:	200002f4 	.word	0x200002f4

08000768 <.text_26>:
 8000768:	00008708 	.word	0x00008708

0800076c <.text_27>:
 800076c:	00008308 	.word	0x00008308

08000770 <.text_28>:
 8000770:	08023fb4 	.word	0x08023fb4

08000774 <USBPD_PE_SendExtendedMessage>:
 8000774:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	001f      	movs	r7, r3
 800077a:	2400      	movs	r4, #0
 800077c:	2500      	movs	r5, #0
 800077e:	48b5      	ldr	r0, [pc, #724]	; (8000a54 <.text_43>)
 8000780:	4669      	mov	r1, sp
 8000782:	7b09      	ldrb	r1, [r1, #12]
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	5846      	ldr	r6, [r0, r1]
 8000788:	2003      	movs	r0, #3
 800078a:	2132      	movs	r1, #50	; 0x32
 800078c:	5c71      	ldrb	r1, [r6, r1]
 800078e:	2900      	cmp	r1, #0
 8000790:	d107      	bne.n	80007a2 <USBPD_PE_SendExtendedMessage+0x2e>
 8000792:	6871      	ldr	r1, [r6, #4]
 8000794:	6809      	ldr	r1, [r1, #0]
 8000796:	9100      	str	r1, [sp, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	0b1b      	lsrs	r3, r3, #12
 800079e:	400b      	ands	r3, r1
 80007a0:	d101      	bne.n	80007a6 <USBPD_PE_SendExtendedMessage+0x32>
 80007a2:	2503      	movs	r5, #3
 80007a4:	e06c      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007a6:	9b00      	ldr	r3, [sp, #0]
 80007a8:	055b      	lsls	r3, r3, #21
 80007aa:	0f5b      	lsrs	r3, r3, #29
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d10b      	bne.n	80007c8 <USBPD_PE_SendExtendedMessage+0x54>
 80007b0:	9b00      	ldr	r3, [sp, #0]
 80007b2:	4018      	ands	r0, r3
 80007b4:	2801      	cmp	r0, #1
 80007b6:	d801      	bhi.n	80007bc <USBPD_PE_SendExtendedMessage+0x48>
 80007b8:	2501      	movs	r5, #1
 80007ba:	e061      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007bc:	4668      	mov	r0, sp
 80007be:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80007c0:	21ff      	movs	r1, #255	; 0xff
 80007c2:	1d89      	adds	r1, r1, #6
 80007c4:	4288      	cmp	r0, r1
 80007c6:	d301      	bcc.n	80007cc <USBPD_PE_SendExtendedMessage+0x58>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e059      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007cc:	4668      	mov	r0, sp
 80007ce:	7002      	strb	r2, [r0, #0]
 80007d0:	6970      	ldr	r0, [r6, #20]
 80007d2:	2120      	movs	r1, #32
 80007d4:	4388      	bics	r0, r1
 80007d6:	6170      	str	r0, [r6, #20]
 80007d8:	2020      	movs	r0, #32
 80007da:	4669      	mov	r1, sp
 80007dc:	7809      	ldrb	r1, [r1, #0]
 80007de:	2903      	cmp	r1, #3
 80007e0:	d008      	beq.n	80007f4 <USBPD_PE_SendExtendedMessage+0x80>
 80007e2:	2904      	cmp	r1, #4
 80007e4:	d020      	beq.n	8000828 <USBPD_PE_SendExtendedMessage+0xb4>
 80007e6:	2906      	cmp	r1, #6
 80007e8:	d020      	beq.n	800082c <USBPD_PE_SendExtendedMessage+0xb8>
 80007ea:	2908      	cmp	r1, #8
 80007ec:	d020      	beq.n	8000830 <USBPD_PE_SendExtendedMessage+0xbc>
 80007ee:	290a      	cmp	r1, #10
 80007f0:	d023      	beq.n	800083a <USBPD_PE_SendExtendedMessage+0xc6>
 80007f2:	e024      	b.n	800083e <USBPD_PE_SendExtendedMessage+0xca>
 80007f4:	210c      	movs	r1, #12
 80007f6:	4aac      	ldr	r2, [pc, #688]	; (8000aa8 <.text_45>)
 80007f8:	18b2      	adds	r2, r6, r2
 80007fa:	7091      	strb	r1, [r2, #2]
 80007fc:	6971      	ldr	r1, [r6, #20]
 80007fe:	4308      	orrs	r0, r1
 8000800:	6170      	str	r0, [r6, #20]
 8000802:	4668      	mov	r0, sp
 8000804:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8000806:	2800      	cmp	r0, #0
 8000808:	d027      	beq.n	800085a <USBPD_PE_SendExtendedMessage+0xe6>
 800080a:	9401      	str	r4, [sp, #4]
 800080c:	4668      	mov	r0, sp
 800080e:	7b00      	ldrb	r0, [r0, #12]
 8000810:	f000 fa98 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8000814:	2801      	cmp	r0, #1
 8000816:	d101      	bne.n	800081c <USBPD_PE_SendExtendedMessage+0xa8>
 8000818:	2004      	movs	r0, #4
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	9702      	str	r7, [sp, #8]
 800081e:	9801      	ldr	r0, [sp, #4]
 8000820:	4669      	mov	r1, sp
 8000822:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8000824:	4fa1      	ldr	r7, [pc, #644]	; (8000aac <.text_46>)
 8000826:	e012      	b.n	800084e <USBPD_PE_SendExtendedMessage+0xda>
 8000828:	210d      	movs	r1, #13
 800082a:	e7e4      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 800082c:	210e      	movs	r1, #14
 800082e:	e7e2      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 8000830:	205b      	movs	r0, #91	; 0x5b
 8000832:	499d      	ldr	r1, [pc, #628]	; (8000aa8 <.text_45>)
 8000834:	1871      	adds	r1, r6, r1
 8000836:	7088      	strb	r0, [r1, #2]
 8000838:	e7e3      	b.n	8000802 <USBPD_PE_SendExtendedMessage+0x8e>
 800083a:	205c      	movs	r0, #92	; 0x5c
 800083c:	e7f9      	b.n	8000832 <USBPD_PE_SendExtendedMessage+0xbe>
 800083e:	2510      	movs	r5, #16
 8000840:	e01e      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 8000842:	9a02      	ldr	r2, [sp, #8]
 8000844:	5d12      	ldrb	r2, [r2, r4]
 8000846:	1823      	adds	r3, r4, r0
 8000848:	18f3      	adds	r3, r6, r3
 800084a:	55da      	strb	r2, [r3, r7]
 800084c:	1c64      	adds	r4, r4, #1
 800084e:	428c      	cmp	r4, r1
 8000850:	d3f7      	bcc.n	8000842 <USBPD_PE_SendExtendedMessage+0xce>
 8000852:	2092      	movs	r0, #146	; 0x92
 8000854:	00c0      	lsls	r0, r0, #3
 8000856:	5231      	strh	r1, [r6, r0]
 8000858:	e002      	b.n	8000860 <USBPD_PE_SendExtendedMessage+0xec>
 800085a:	2092      	movs	r0, #146	; 0x92
 800085c:	00c0      	lsls	r0, r0, #3
 800085e:	5234      	strh	r4, [r6, r0]
 8000860:	4668      	mov	r0, sp
 8000862:	7c00      	ldrb	r0, [r0, #16]
 8000864:	2133      	movs	r1, #51	; 0x33
 8000866:	5470      	strb	r0, [r6, r1]
 8000868:	4668      	mov	r0, sp
 800086a:	7800      	ldrb	r0, [r0, #0]
 800086c:	498e      	ldr	r1, [pc, #568]	; (8000aa8 <.text_45>)
 800086e:	5470      	strb	r0, [r6, r1]
 8000870:	2031      	movs	r0, #49	; 0x31
 8000872:	2132      	movs	r1, #50	; 0x32
 8000874:	5470      	strb	r0, [r6, r1]
 8000876:	4668      	mov	r0, sp
 8000878:	7b00      	ldrb	r0, [r0, #12]
 800087a:	68b1      	ldr	r1, [r6, #8]
 800087c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800087e:	4788      	blx	r1
 8000880:	0028      	movs	r0, r5
 8000882:	b005      	add	sp, #20
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000888 <.text_30>:
 8000888:	0000025e 	.word	0x0000025e

0800088c <PE_Send_RESET>:
 800088c:	b538      	push	{r3, r4, r5, lr}
 800088e:	0005      	movs	r5, r0
 8000890:	000c      	movs	r4, r1
 8000892:	2c05      	cmp	r4, #5
 8000894:	d101      	bne.n	800089a <PE_Send_RESET+0xe>
 8000896:	211f      	movs	r1, #31
 8000898:	e000      	b.n	800089c <PE_Send_RESET+0x10>
 800089a:	215e      	movs	r1, #94	; 0x5e
 800089c:	7c28      	ldrb	r0, [r5, #16]
 800089e:	f7ff fdef 	bl	8000480 <USBPD_PE_Notification>
 80008a2:	0021      	movs	r1, r4
 80008a4:	7c28      	ldrb	r0, [r5, #16]
 80008a6:	f005 f9ab 	bl	8005c00 <USBPD_PRL_ResetRequestProcess>
 80008aa:	f3ef 8010 	mrs	r0, PRIMASK
 80008ae:	b672      	cpsid	i
 80008b0:	2100      	movs	r1, #0
 80008b2:	223c      	movs	r2, #60	; 0x3c
 80008b4:	54a9      	strb	r1, [r5, r2]
 80008b6:	f380 8810 	msr	PRIMASK, r0
 80008ba:	bd31      	pop	{r0, r4, r5, pc}

080008bc <PE_Get_SpecRevision>:
 80008bc:	4965      	ldr	r1, [pc, #404]	; (8000a54 <.text_43>)
 80008be:	0080      	lsls	r0, r0, #2
 80008c0:	5808      	ldr	r0, [r1, r0]
 80008c2:	6840      	ldr	r0, [r0, #4]
 80008c4:	7800      	ldrb	r0, [r0, #0]
 80008c6:	0780      	lsls	r0, r0, #30
 80008c8:	0f80      	lsrs	r0, r0, #30
 80008ca:	4770      	bx	lr

080008cc <PE_ChangePowerRole>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	6842      	ldr	r2, [r0, #4]
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	2404      	movs	r4, #4
 80008d4:	43a3      	bics	r3, r4
 80008d6:	008c      	lsls	r4, r1, #2
 80008d8:	2504      	movs	r5, #4
 80008da:	402c      	ands	r4, r5
 80008dc:	431c      	orrs	r4, r3
 80008de:	6014      	str	r4, [r2, #0]
 80008e0:	7c00      	ldrb	r0, [r0, #16]
 80008e2:	f004 ff0a 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80008e6:	bd31      	pop	{r0, r4, r5, pc}

080008e8 <PE_Get_RxEvent>:
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	0001      	movs	r1, r0
 80008ec:	2014      	movs	r0, #20
 80008ee:	f3ef 8210 	mrs	r2, PRIMASK
 80008f2:	b672      	cpsid	i
 80008f4:	233c      	movs	r3, #60	; 0x3c
 80008f6:	5ccc      	ldrb	r4, [r1, r3]
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d029      	beq.n	8000950 <PE_Get_RxEvent+0x68>
 80008fc:	2393      	movs	r3, #147	; 0x93
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18cb      	adds	r3, r1, r3
 8000902:	5d1d      	ldrb	r5, [r3, r4]
 8000904:	066d      	lsls	r5, r5, #25
 8000906:	d401      	bmi.n	800090c <PE_Get_RxEvent+0x24>
 8000908:	2003      	movs	r0, #3
 800090a:	e021      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800090c:	2584      	movs	r5, #132	; 0x84
 800090e:	006d      	lsls	r5, r5, #1
 8000910:	436c      	muls	r4, r5
 8000912:	190c      	adds	r4, r1, r4
 8000914:	3ccb      	subs	r4, #203	; 0xcb
 8000916:	638c      	str	r4, [r1, #56]	; 0x38
 8000918:	7825      	ldrb	r5, [r4, #0]
 800091a:	7864      	ldrb	r4, [r4, #1]
 800091c:	0224      	lsls	r4, r4, #8
 800091e:	192c      	adds	r4, r5, r4
 8000920:	868c      	strh	r4, [r1, #52]	; 0x34
 8000922:	000c      	movs	r4, r1
 8000924:	3430      	adds	r4, #48	; 0x30
 8000926:	253c      	movs	r5, #60	; 0x3c
 8000928:	5d49      	ldrb	r1, [r1, r5]
 800092a:	5c59      	ldrb	r1, [r3, r1]
 800092c:	06c9      	lsls	r1, r1, #27
 800092e:	0ec9      	lsrs	r1, r1, #27
 8000930:	2901      	cmp	r1, #1
 8000932:	d004      	beq.n	800093e <PE_Get_RxEvent+0x56>
 8000934:	2902      	cmp	r1, #2
 8000936:	d005      	beq.n	8000944 <PE_Get_RxEvent+0x5c>
 8000938:	2904      	cmp	r1, #4
 800093a:	d006      	beq.n	800094a <PE_Get_RxEvent+0x62>
 800093c:	e008      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800093e:	2011      	movs	r0, #17
 8000940:	2100      	movs	r1, #0
 8000942:	e004      	b.n	800094e <PE_Get_RxEvent+0x66>
 8000944:	2012      	movs	r0, #18
 8000946:	2101      	movs	r1, #1
 8000948:	e001      	b.n	800094e <PE_Get_RxEvent+0x66>
 800094a:	2013      	movs	r0, #19
 800094c:	2102      	movs	r1, #2
 800094e:	7021      	strb	r1, [r4, #0]
 8000950:	f382 8810 	msr	PRIMASK, r2
 8000954:	bd30      	pop	{r4, r5, pc}

08000956 <PE_Clear_RxEvent>:
 8000956:	b510      	push	{r4, lr}
 8000958:	0001      	movs	r1, r0
 800095a:	f3ef 8010 	mrs	r0, PRIMASK
 800095e:	b672      	cpsid	i
 8000960:	223c      	movs	r2, #60	; 0x3c
 8000962:	5c8a      	ldrb	r2, [r1, r2]
 8000964:	2a00      	cmp	r2, #0
 8000966:	d014      	beq.n	8000992 <PE_Clear_RxEvent+0x3c>
 8000968:	1e53      	subs	r3, r2, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4acb      	ldr	r2, [pc, #812]	; (8000c9c <.text_56>)
 800096e:	188c      	adds	r4, r1, r2
 8000970:	2200      	movs	r2, #0
 8000972:	54e2      	strb	r2, [r4, r3]
 8000974:	1e5b      	subs	r3, r3, #1
 8000976:	419b      	sbcs	r3, r3
 8000978:	0fdb      	lsrs	r3, r3, #31
 800097a:	5ce4      	ldrb	r4, [r4, r3]
 800097c:	0664      	lsls	r4, r4, #25
 800097e:	d506      	bpl.n	800098e <PE_Clear_RxEvent+0x38>
 8000980:	1c5b      	adds	r3, r3, #1
 8000982:	223c      	movs	r2, #60	; 0x3c
 8000984:	548b      	strb	r3, [r1, r2]
 8000986:	f380 8810 	msr	PRIMASK, r0
 800098a:	7c08      	ldrb	r0, [r1, #16]
 800098c:	e168      	b.n	8000c60 <.text_54>
 800098e:	233c      	movs	r3, #60	; 0x3c
 8000990:	54ca      	strb	r2, [r1, r3]
 8000992:	f380 8810 	msr	PRIMASK, r0
 8000996:	bd10      	pop	{r4, pc}

08000998 <.text_36>:
 8000998:	00000302 	.word	0x00000302

0800099c <.text_37>:
 800099c:	00000703 	.word	0x00000703

080009a0 <PE_PRL_Control_RxEvent>:
 80009a0:	492c      	ldr	r1, [pc, #176]	; (8000a54 <.text_43>)
 80009a2:	0080      	lsls	r0, r0, #2
 80009a4:	580a      	ldr	r2, [r1, r0]
 80009a6:	2000      	movs	r0, #0
 80009a8:	f3ef 8110 	mrs	r1, PRIMASK
 80009ac:	b672      	cpsid	i
 80009ae:	233c      	movs	r3, #60	; 0x3c
 80009b0:	5cd2      	ldrb	r2, [r2, r3]
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d000      	beq.n	80009b8 <PE_PRL_Control_RxEvent+0x18>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f381 8810 	msr	PRIMASK, r1
 80009bc:	4770      	bx	lr
	...

080009c0 <.text_39>:
 80009c0:	0000025f 	.word	0x0000025f

080009c4 <.text_40>:
 80009c4:	00000704 	.word	0x00000704

080009c8 <PE_Convert_SOPRxEvent>:
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d003      	beq.n	80009d4 <PE_Convert_SOPRxEvent+0xc>
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d005      	beq.n	80009dc <PE_Convert_SOPRxEvent+0x14>
 80009d0:	d302      	bcc.n	80009d8 <PE_Convert_SOPRxEvent+0x10>
 80009d2:	e005      	b.n	80009e0 <PE_Convert_SOPRxEvent+0x18>
 80009d4:	2011      	movs	r0, #17
 80009d6:	4770      	bx	lr
 80009d8:	2012      	movs	r0, #18
 80009da:	4770      	bx	lr
 80009dc:	2013      	movs	r0, #19
 80009de:	4770      	bx	lr
 80009e0:	2014      	movs	r0, #20
 80009e2:	4770      	bx	lr

080009e4 <PE_Check_AMSConflict>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	0005      	movs	r5, r0
 80009e8:	2400      	movs	r4, #0
 80009ea:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80009ec:	49b7      	ldr	r1, [pc, #732]	; (8000ccc <.text_58>)
 80009ee:	4001      	ands	r1, r0
 80009f0:	290d      	cmp	r1, #13
 80009f2:	d101      	bne.n	80009f8 <PE_Check_AMSConflict+0x14>
 80009f4:	2010      	movs	r0, #16
 80009f6:	e01b      	b.n	8000a30 <PE_Check_AMSConflict+0x4c>
 80009f8:	2603      	movs	r6, #3
 80009fa:	200f      	movs	r0, #15
 80009fc:	7f29      	ldrb	r1, [r5, #28]
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d011      	beq.n	8000a26 <PE_Check_AMSConflict+0x42>
 8000a02:	1e49      	subs	r1, r1, #1
 8000a04:	2901      	cmp	r1, #1
 8000a06:	d912      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a08:	1e89      	subs	r1, r1, #2
 8000a0a:	d011      	beq.n	8000a30 <PE_Check_AMSConflict+0x4c>
 8000a0c:	1e49      	subs	r1, r1, #1
 8000a0e:	d01d      	beq.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a10:	1e49      	subs	r1, r1, #1
 8000a12:	2909      	cmp	r1, #9
 8000a14:	d90b      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a16:	390b      	subs	r1, #11
 8000a18:	2901      	cmp	r1, #1
 8000a1a:	d908      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a1c:	1e89      	subs	r1, r1, #2
 8000a1e:	d004      	beq.n	8000a2a <PE_Check_AMSConflict+0x46>
 8000a20:	394d      	subs	r1, #77	; 0x4d
 8000a22:	d004      	beq.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a24:	e006      	b.n	8000a34 <PE_Check_AMSConflict+0x50>
 8000a26:	746e      	strb	r6, [r5, #17]
 8000a28:	e011      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2a:	7468      	strb	r0, [r5, #17]
 8000a2c:	e00f      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2e:	2011      	movs	r0, #17
 8000a30:	7468      	strb	r0, [r5, #17]
 8000a32:	e00b      	b.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a34:	215c      	movs	r1, #92	; 0x5c
 8000a36:	7c28      	ldrb	r0, [r5, #16]
 8000a38:	f7ff fd22 	bl	8000480 <USBPD_PE_Notification>
 8000a3c:	746e      	strb	r6, [r5, #17]
 8000a3e:	6868      	ldr	r0, [r5, #4]
 8000a40:	6800      	ldr	r0, [r0, #0]
 8000a42:	49c4      	ldr	r1, [pc, #784]	; (8000d54 <.text_62>)
 8000a44:	4001      	ands	r1, r0
 8000a46:	0230      	lsls	r0, r6, #8
 8000a48:	4281      	cmp	r1, r0
 8000a4a:	d000      	beq.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a4c:	2415      	movs	r4, #21
 8000a4e:	0020      	movs	r0, r4
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a54 <.text_43>:
 8000a54:	200002f4 	.word	0x200002f4

08000a58 <PE_PRL_ResetReceived>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	0004      	movs	r4, r0
 8000a5c:	48be      	ldr	r0, [pc, #760]	; (8000d58 <.text_63>)
 8000a5e:	00a2      	lsls	r2, r4, #2
 8000a60:	5885      	ldr	r5, [r0, r2]
 8000a62:	2905      	cmp	r1, #5
 8000a64:	d115      	bne.n	8000a92 <PE_PRL_ResetReceived+0x3a>
 8000a66:	6868      	ldr	r0, [r5, #4]
 8000a68:	6801      	ldr	r1, [r0, #0]
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	4391      	bics	r1, r2
 8000a6e:	6001      	str	r1, [r0, #0]
 8000a70:	6968      	ldr	r0, [r5, #20]
 8000a72:	49ba      	ldr	r1, [pc, #744]	; (8000d5c <.text_64>)
 8000a74:	4001      	ands	r1, r0
 8000a76:	0150      	lsls	r0, r2, #5
 8000a78:	4308      	orrs	r0, r1
 8000a7a:	6168      	str	r0, [r5, #20]
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	2132      	movs	r1, #50	; 0x32
 8000a80:	5468      	strb	r0, [r5, r1]
 8000a82:	2000      	movs	r0, #0
 8000a84:	213c      	movs	r1, #60	; 0x3c
 8000a86:	5468      	strb	r0, [r5, r1]
 8000a88:	211e      	movs	r1, #30
 8000a8a:	7c28      	ldrb	r0, [r5, #16]
 8000a8c:	f7ff fcf8 	bl	8000480 <USBPD_PE_Notification>
 8000a90:	e004      	b.n	8000a9c <PE_PRL_ResetReceived+0x44>
 8000a92:	6968      	ldr	r0, [r5, #20]
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	02c9      	lsls	r1, r1, #11
 8000a98:	4301      	orrs	r1, r0
 8000a9a:	6169      	str	r1, [r5, #20]
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	68a9      	ldr	r1, [r5, #8]
 8000aa0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000aa2:	4788      	blx	r1
 8000aa4:	bd31      	pop	{r0, r4, r5, pc}
	...

08000aa8 <.text_45>:
 8000aa8:	0000025d 	.word	0x0000025d

08000aac <.text_46>:
 8000aac:	00000385 	.word	0x00000385

08000ab0 <PE_PRL_BistCompleted>:
 8000ab0:	4770      	bx	lr

08000ab2 <PE_Reset_HardReset>:
 8000ab2:	b538      	push	{r3, r4, r5, lr}
 8000ab4:	0004      	movs	r4, r0
 8000ab6:	2032      	movs	r0, #50	; 0x32
 8000ab8:	5c20      	ldrb	r0, [r4, r0]
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d003      	beq.n	8000ac6 <PE_Reset_HardReset+0x14>
 8000abe:	215b      	movs	r1, #91	; 0x5b
 8000ac0:	7c20      	ldrb	r0, [r4, #16]
 8000ac2:	f7ff fcdd 	bl	8000480 <USBPD_PE_Notification>
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f000 f82c 	bl	8000b24 <PE_Reset_ZI>
 8000acc:	2503      	movs	r5, #3
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	6843      	ldr	r3, [r0, #4]
 8000ad2:	402b      	ands	r3, r5
 8000ad4:	7c20      	ldrb	r0, [r4, #16]
 8000ad6:	6861      	ldr	r1, [r4, #4]
 8000ad8:	6809      	ldr	r1, [r1, #0]
 8000ada:	074a      	lsls	r2, r1, #29
 8000adc:	0fd2      	lsrs	r2, r2, #31
 8000ade:	d008      	beq.n	8000af2 <PE_Reset_HardReset+0x40>
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f004 fdee 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000ae6:	6860      	ldr	r0, [r4, #4]
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	2208      	movs	r2, #8
 8000aec:	430a      	orrs	r2, r1
 8000aee:	6002      	str	r2, [r0, #0]
 8000af0:	e007      	b.n	8000b02 <PE_Reset_HardReset+0x50>
 8000af2:	2100      	movs	r1, #0
 8000af4:	f004 fde5 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000af8:	6860      	ldr	r0, [r4, #4]
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4391      	bics	r1, r2
 8000b00:	6001      	str	r1, [r0, #0]
 8000b02:	6820      	ldr	r0, [r4, #0]
 8000b04:	6840      	ldr	r0, [r0, #4]
 8000b06:	4005      	ands	r5, r0
 8000b08:	6860      	ldr	r0, [r4, #4]
 8000b0a:	6801      	ldr	r1, [r0, #0]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4391      	bics	r1, r2
 8000b10:	430d      	orrs	r5, r1
 8000b12:	6005      	str	r5, [r0, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	7c20      	ldrb	r0, [r4, #16]
 8000b18:	f004 fe44 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8000b1c:	7c20      	ldrb	r0, [r4, #16]
 8000b1e:	f005 f8ad 	bl	8005c7c <USBPD_PRL_Reset>
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Reset_ZI>:
 8000b24:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000b26:	0004      	movs	r4, r0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	6801      	ldr	r1, [r0, #0]
 8000b30:	2210      	movs	r2, #16
 8000b32:	4391      	bics	r1, r2
 8000b34:	6001      	str	r1, [r0, #0]
 8000b36:	2100      	movs	r1, #0
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fc34 	bl	80013a6 <PE_SetPowerNegotiation>
 8000b3e:	2193      	movs	r1, #147	; 0x93
 8000b40:	0089      	lsls	r1, r1, #2
 8000b42:	0020      	movs	r0, r4
 8000b44:	3014      	adds	r0, #20
 8000b46:	f021 fe5a 	bl	80227fe <__aeabi_memclr>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	aa01      	add	r2, sp, #4
 8000b4e:	2102      	movs	r1, #2
 8000b50:	7c20      	ldrb	r0, [r4, #16]
 8000b52:	68a5      	ldr	r5, [r4, #8]
 8000b54:	69ad      	ldr	r5, [r5, #24]
 8000b56:	47a8      	blx	r5
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	0440      	lsls	r0, r0, #17
 8000b5c:	9000      	str	r0, [sp, #0]
 8000b5e:	2304      	movs	r3, #4
 8000b60:	466a      	mov	r2, sp
 8000b62:	2106      	movs	r1, #6
 8000b64:	7c20      	ldrb	r0, [r4, #16]
 8000b66:	68a5      	ldr	r5, [r4, #8]
 8000b68:	69ad      	ldr	r5, [r5, #24]
 8000b6a:	47a8      	blx	r5
 8000b6c:	2503      	movs	r5, #3
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	6841      	ldr	r1, [r0, #4]
 8000b72:	4029      	ands	r1, r5
 8000b74:	7c20      	ldrb	r0, [r4, #16]
 8000b76:	f004 fde2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	6840      	ldr	r0, [r0, #4]
 8000b7e:	4005      	ands	r5, r0
 8000b80:	6860      	ldr	r0, [r4, #4]
 8000b82:	6801      	ldr	r1, [r0, #0]
 8000b84:	4a76      	ldr	r2, [pc, #472]	; (8000d60 <.text_65>)
 8000b86:	400a      	ands	r2, r1
 8000b88:	06a9      	lsls	r1, r5, #26
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	6001      	str	r1, [r0, #0]
 8000b8e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b90 <PE_Reset_Counter>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	2103      	movs	r1, #3
 8000b94:	2298      	movs	r2, #152	; 0x98
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	1880      	adds	r0, r0, r2
 8000b9a:	f021 fe30 	bl	80227fe <__aeabi_memclr>
 8000b9e:	bd01      	pop	{r0, pc}

08000ba0 <PE_Reset_StateMachine>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	2032      	movs	r0, #50	; 0x32
 8000ba6:	5c20      	ldrb	r0, [r4, r0]
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d003      	beq.n	8000bb4 <PE_Reset_StateMachine+0x14>
 8000bac:	215b      	movs	r1, #91	; 0x5b
 8000bae:	7c20      	ldrb	r0, [r4, #16]
 8000bb0:	f7ff fc66 	bl	8000480 <USBPD_PE_Notification>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f7ff ffb5 	bl	8000b24 <PE_Reset_ZI>
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	f000 fbf2 	bl	80013a6 <PE_SetPowerNegotiation>
 8000bc2:	7c20      	ldrb	r0, [r4, #16]
 8000bc4:	f005 f85a 	bl	8005c7c <USBPD_PRL_Reset>
 8000bc8:	6860      	ldr	r0, [r4, #4]
 8000bca:	6801      	ldr	r1, [r0, #0]
 8000bcc:	2501      	movs	r5, #1
 8000bce:	08ca      	lsrs	r2, r1, #3
 8000bd0:	402a      	ands	r2, r5
 8000bd2:	078b      	lsls	r3, r1, #30
 8000bd4:	0f9b      	lsrs	r3, r3, #30
 8000bd6:	7c20      	ldrb	r0, [r4, #16]
 8000bd8:	0889      	lsrs	r1, r1, #2
 8000bda:	400d      	ands	r5, r1
 8000bdc:	d004      	beq.n	8000be8 <PE_Reset_StateMachine+0x48>
 8000bde:	2101      	movs	r1, #1
 8000be0:	f004 fd6f 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000be4:	2002      	movs	r0, #2
 8000be6:	e003      	b.n	8000bf0 <PE_Reset_StateMachine+0x50>
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 fd6a 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000bee:	203e      	movs	r0, #62	; 0x3e
 8000bf0:	7460      	strb	r0, [r4, #17]
 8000bf2:	bd31      	pop	{r0, r4, r5, pc}

08000bf4 <PE_ExtRevisionInteroperability>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	4957      	ldr	r1, [pc, #348]	; (8000d58 <.text_63>)
 8000bfa:	0083      	lsls	r3, r0, #2
 8000bfc:	58cb      	ldr	r3, [r1, r3]
 8000bfe:	685c      	ldr	r4, [r3, #4]
 8000c00:	6825      	ldr	r5, [r4, #0]
 8000c02:	2103      	movs	r1, #3
 8000c04:	2603      	movs	r6, #3
 8000c06:	402e      	ands	r6, r5
 8000c08:	42b2      	cmp	r2, r6
 8000c0a:	db00      	blt.n	8000c0e <PE_ExtRevisionInteroperability+0x1a>
 8000c0c:	0032      	movs	r2, r6
 8000c0e:	438d      	bics	r5, r1
 8000c10:	400a      	ands	r2, r1
 8000c12:	432a      	orrs	r2, r5
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	6814      	ldr	r4, [r2, #0]
 8000c1a:	2503      	movs	r5, #3
 8000c1c:	4025      	ands	r5, r4
 8000c1e:	2d01      	cmp	r5, #1
 8000c20:	d101      	bne.n	8000c26 <PE_ExtRevisionInteroperability+0x32>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e000      	b.n	8000c28 <PE_ExtRevisionInteroperability+0x34>
 8000c26:	2520      	movs	r5, #32
 8000c28:	2620      	movs	r6, #32
 8000c2a:	43b4      	bics	r4, r6
 8000c2c:	4325      	orrs	r5, r4
 8000c2e:	6015      	str	r5, [r2, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	4011      	ands	r1, r2
 8000c36:	f004 fd76 	bl	8005726 <USBPD_PRL_SetHeaderSpecification>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}

08000c3c <PE_PRL_FastRoleSwapReception>:
 8000c3c:	4946      	ldr	r1, [pc, #280]	; (8000d58 <.text_63>)
 8000c3e:	0082      	lsls	r2, r0, #2
 8000c40:	5889      	ldr	r1, [r1, r2]
 8000c42:	7f0a      	ldrb	r2, [r1, #28]
 8000c44:	2a09      	cmp	r2, #9
 8000c46:	d100      	bne.n	8000c4a <PE_PRL_FastRoleSwapReception+0xe>
 8000c48:	4770      	bx	lr
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	2410      	movs	r4, #16
 8000c52:	431c      	orrs	r4, r3
 8000c54:	6014      	str	r4, [r2, #0]
 8000c56:	694a      	ldr	r2, [r1, #20]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	614b      	str	r3, [r1, #20]

08000c60 <.text_54>:
 8000c60:	6889      	ldr	r1, [r1, #8]
 8000c62:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000c64:	4788      	blx	r1
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <PE_PRL_PostReceiveEvent>:
 8000c68:	b530      	push	{r4, r5, lr}
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	; (8000d58 <.text_63>)
 8000c6c:	0080      	lsls	r0, r0, #2
 8000c6e:	5813      	ldr	r3, [r2, r0]
 8000c70:	2400      	movs	r4, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	191a      	adds	r2, r3, r4
 8000c76:	4d09      	ldr	r5, [pc, #36]	; (8000c9c <.text_56>)
 8000c78:	1952      	adds	r2, r2, r5
 8000c7a:	7815      	ldrb	r5, [r2, #0]
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d004      	beq.n	8000c8a <PE_PRL_PostReceiveEvent+0x22>
 8000c80:	1c64      	adds	r4, r4, #1
 8000c82:	b2e4      	uxtb	r4, r4
 8000c84:	2c01      	cmp	r4, #1
 8000c86:	d9f5      	bls.n	8000c74 <PE_PRL_PostReceiveEvent+0xc>
 8000c88:	bd30      	pop	{r4, r5, pc}
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	7010      	strb	r0, [r2, #0]
 8000c8e:	2001      	movs	r0, #1
 8000c90:	7813      	ldrb	r3, [r2, #0]
 8000c92:	2401      	movs	r4, #1
 8000c94:	408c      	lsls	r4, r1
 8000c96:	431c      	orrs	r4, r3
 8000c98:	7014      	strb	r4, [r2, #0]
 8000c9a:	bd30      	pop	{r4, r5, pc}

08000c9c <.text_56>:
 8000c9c:	0000024d 	.word	0x0000024d

08000ca0 <PE_PRL_PostReceiveEventError>:
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	492d      	ldr	r1, [pc, #180]	; (8000d58 <.text_63>)
 8000ca4:	0080      	lsls	r0, r0, #2
 8000ca6:	5809      	ldr	r1, [r1, r0]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	b2d3      	uxtb	r3, r2
 8000cae:	18cb      	adds	r3, r1, r3
 8000cb0:	4c2c      	ldr	r4, [pc, #176]	; (8000d64 <.text_66>)
 8000cb2:	191b      	adds	r3, r3, r4
 8000cb4:	781c      	ldrb	r4, [r3, #0]
 8000cb6:	2560      	movs	r5, #96	; 0x60
 8000cb8:	4025      	ands	r5, r4
 8000cba:	2d20      	cmp	r5, #32
 8000cbc:	d004      	beq.n	8000cc8 <PE_PRL_PostReceiveEventError+0x28>
 8000cbe:	1c52      	adds	r2, r2, #1
 8000cc0:	b2d3      	uxtb	r3, r2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d3f2      	bcc.n	8000cac <PE_PRL_PostReceiveEventError+0xc>
 8000cc6:	bd30      	pop	{r4, r5, pc}
 8000cc8:	7018      	strb	r0, [r3, #0]
 8000cca:	bd30      	pop	{r4, r5, pc}

08000ccc <.text_58>:
 8000ccc:	0000f01f 	.word	0x0000f01f

08000cd0 <PE_PRL_PostReceiveEventCopy>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <.text_63>)
 8000cd4:	0080      	lsls	r0, r0, #2
 8000cd6:	5813      	ldr	r3, [r2, r0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	b2d0      	uxtb	r0, r2
 8000cdc:	181c      	adds	r4, r3, r0
 8000cde:	4d21      	ldr	r5, [pc, #132]	; (8000d64 <.text_66>)
 8000ce0:	5d64      	ldrb	r4, [r4, r5]
 8000ce2:	2560      	movs	r5, #96	; 0x60
 8000ce4:	4025      	ands	r5, r4
 8000ce6:	2d20      	cmp	r5, #32
 8000ce8:	d004      	beq.n	8000cf4 <PE_PRL_PostReceiveEventCopy+0x24>
 8000cea:	1c52      	adds	r2, r2, #1
 8000cec:	b2d0      	uxtb	r0, r2
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d3f3      	bcc.n	8000cda <PE_PRL_PostReceiveEventCopy+0xa>
 8000cf2:	bd31      	pop	{r0, r4, r5, pc}
 8000cf4:	2284      	movs	r2, #132	; 0x84
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	4350      	muls	r0, r2
 8000cfa:	1818      	adds	r0, r3, r0
 8000cfc:	303d      	adds	r0, #61	; 0x3d
 8000cfe:	f021 fd73 	bl	80227e8 <__aeabi_memcpy>
 8000d02:	bd31      	pop	{r0, r4, r5, pc}

08000d04 <PE_PRL_PostReceiveEventComplete>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4914      	ldr	r1, [pc, #80]	; (8000d58 <.text_63>)
 8000d08:	0082      	lsls	r2, r0, #2
 8000d0a:	5889      	ldr	r1, [r1, r2]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	18cb      	adds	r3, r1, r3
 8000d12:	4c14      	ldr	r4, [pc, #80]	; (8000d64 <.text_66>)
 8000d14:	191b      	adds	r3, r3, r4
 8000d16:	781c      	ldrb	r4, [r3, #0]
 8000d18:	2560      	movs	r5, #96	; 0x60
 8000d1a:	4025      	ands	r5, r4
 8000d1c:	2d20      	cmp	r5, #32
 8000d1e:	d003      	beq.n	8000d28 <PE_PRL_PostReceiveEventComplete+0x24>
 8000d20:	b2d3      	uxtb	r3, r2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d3f3      	bcc.n	8000d0e <PE_PRL_PostReceiveEventComplete+0xa>
 8000d26:	bd31      	pop	{r0, r4, r5, pc}
 8000d28:	781c      	ldrb	r4, [r3, #0]
 8000d2a:	2540      	movs	r5, #64	; 0x40
 8000d2c:	4325      	orrs	r5, r4
 8000d2e:	701d      	strb	r5, [r3, #0]
 8000d30:	233c      	movs	r3, #60	; 0x3c
 8000d32:	5ccb      	ldrb	r3, [r1, r3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <PE_PRL_PostReceiveEventComplete+0x38>
 8000d38:	233c      	movs	r3, #60	; 0x3c
 8000d3a:	54ca      	strb	r2, [r1, r3]
 8000d3c:	6889      	ldr	r1, [r1, #8]
 8000d3e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000d40:	4788      	blx	r1
 8000d42:	bd31      	pop	{r0, r4, r5, pc}

08000d44 <PE_Get_UnchunkedSupport>:
 8000d44:	4904      	ldr	r1, [pc, #16]	; (8000d58 <.text_63>)
 8000d46:	0080      	lsls	r0, r0, #2
 8000d48:	5808      	ldr	r0, [r1, r0]
 8000d4a:	6840      	ldr	r0, [r0, #4]
 8000d4c:	6800      	ldr	r0, [r0, #0]
 8000d4e:	0181      	lsls	r1, r0, #6
 8000d50:	0fc8      	lsrs	r0, r1, #31
 8000d52:	4770      	bx	lr

08000d54 <.text_62>:
 8000d54:	00000704 	.word	0x00000704

08000d58 <.text_63>:
 8000d58:	200002f4 	.word	0x200002f4

08000d5c <.text_64>:
 8000d5c:	fffff9ff 	.word	0xfffff9ff

08000d60 <.text_65>:
 8000d60:	f3ffffff 	.word	0xf3ffffff

08000d64 <.text_66>:
 8000d64:	0000024d 	.word	0x0000024d

08000d68 <PE_SubStateMachine_Generic>:
 8000d68:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000d6a:	b08d      	sub	sp, #52	; 0x34
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9004      	str	r0, [sp, #16]
 8000d72:	2500      	movs	r5, #0
 8000d74:	9503      	str	r5, [sp, #12]
 8000d76:	2601      	movs	r6, #1
 8000d78:	2714      	movs	r7, #20
 8000d7a:	7c61      	ldrb	r1, [r4, #17]
 8000d7c:	2901      	cmp	r1, #1
 8000d7e:	d100      	bne.n	8000d82 <PE_SubStateMachine_Generic+0x1a>
 8000d80:	e195      	b.n	80010ae <PE_SubStateMachine_Generic+0x346>
 8000d82:	2918      	cmp	r1, #24
 8000d84:	d03f      	beq.n	8000e06 <PE_SubStateMachine_Generic+0x9e>
 8000d86:	2919      	cmp	r1, #25
 8000d88:	d050      	beq.n	8000e2c <PE_SubStateMachine_Generic+0xc4>
 8000d8a:	291d      	cmp	r1, #29
 8000d8c:	d100      	bne.n	8000d90 <PE_SubStateMachine_Generic+0x28>
 8000d8e:	e092      	b.n	8000eb6 <PE_SubStateMachine_Generic+0x14e>
 8000d90:	2927      	cmp	r1, #39	; 0x27
 8000d92:	d100      	bne.n	8000d96 <PE_SubStateMachine_Generic+0x2e>
 8000d94:	e0b0      	b.n	8000ef8 <PE_SubStateMachine_Generic+0x190>
 8000d96:	2928      	cmp	r1, #40	; 0x28
 8000d98:	d100      	bne.n	8000d9c <PE_SubStateMachine_Generic+0x34>
 8000d9a:	e0b9      	b.n	8000f10 <PE_SubStateMachine_Generic+0x1a8>
 8000d9c:	2929      	cmp	r1, #41	; 0x29
 8000d9e:	d100      	bne.n	8000da2 <PE_SubStateMachine_Generic+0x3a>
 8000da0:	e0c0      	b.n	8000f24 <PE_SubStateMachine_Generic+0x1bc>
 8000da2:	292c      	cmp	r1, #44	; 0x2c
 8000da4:	d100      	bne.n	8000da8 <PE_SubStateMachine_Generic+0x40>
 8000da6:	e2bc      	b.n	8001322 <PE_SubStateMachine_Generic+0x5ba>
 8000da8:	2930      	cmp	r1, #48	; 0x30
 8000daa:	d100      	bne.n	8000dae <PE_SubStateMachine_Generic+0x46>
 8000dac:	e1de      	b.n	800116c <PE_SubStateMachine_Generic+0x404>
 8000dae:	293a      	cmp	r1, #58	; 0x3a
 8000db0:	d100      	bne.n	8000db4 <PE_SubStateMachine_Generic+0x4c>
 8000db2:	e28c      	b.n	80012ce <PE_SubStateMachine_Generic+0x566>
 8000db4:	293b      	cmp	r1, #59	; 0x3b
 8000db6:	d100      	bne.n	8000dba <PE_SubStateMachine_Generic+0x52>
 8000db8:	e270      	b.n	800129c <PE_SubStateMachine_Generic+0x534>
 8000dba:	293c      	cmp	r1, #60	; 0x3c
 8000dbc:	d100      	bne.n	8000dc0 <PE_SubStateMachine_Generic+0x58>
 8000dbe:	e247      	b.n	8001250 <PE_SubStateMachine_Generic+0x4e8>
 8000dc0:	294b      	cmp	r1, #75	; 0x4b
 8000dc2:	d100      	bne.n	8000dc6 <PE_SubStateMachine_Generic+0x5e>
 8000dc4:	e114      	b.n	8000ff0 <PE_SubStateMachine_Generic+0x288>
 8000dc6:	2963      	cmp	r1, #99	; 0x63
 8000dc8:	d100      	bne.n	8000dcc <PE_SubStateMachine_Generic+0x64>
 8000dca:	e178      	b.n	80010be <PE_SubStateMachine_Generic+0x356>
 8000dcc:	2964      	cmp	r1, #100	; 0x64
 8000dce:	d100      	bne.n	8000dd2 <PE_SubStateMachine_Generic+0x6a>
 8000dd0:	e1a0      	b.n	8001114 <PE_SubStateMachine_Generic+0x3ac>
 8000dd2:	2967      	cmp	r1, #103	; 0x67
 8000dd4:	d100      	bne.n	8000dd8 <PE_SubStateMachine_Generic+0x70>
 8000dd6:	e120      	b.n	800101a <PE_SubStateMachine_Generic+0x2b2>
 8000dd8:	2968      	cmp	r1, #104	; 0x68
 8000dda:	d100      	bne.n	8000dde <PE_SubStateMachine_Generic+0x76>
 8000ddc:	e138      	b.n	8001050 <PE_SubStateMachine_Generic+0x2e8>
 8000dde:	2974      	cmp	r1, #116	; 0x74
 8000de0:	d100      	bne.n	8000de4 <PE_SubStateMachine_Generic+0x7c>
 8000de2:	e1f3      	b.n	80011cc <PE_SubStateMachine_Generic+0x464>
 8000de4:	2993      	cmp	r1, #147	; 0x93
 8000de6:	d100      	bne.n	8000dea <PE_SubStateMachine_Generic+0x82>
 8000de8:	e0a6      	b.n	8000f38 <PE_SubStateMachine_Generic+0x1d0>
 8000dea:	2994      	cmp	r1, #148	; 0x94
 8000dec:	d100      	bne.n	8000df0 <PE_SubStateMachine_Generic+0x88>
 8000dee:	e0a7      	b.n	8000f40 <PE_SubStateMachine_Generic+0x1d8>
 8000df0:	2995      	cmp	r1, #149	; 0x95
 8000df2:	d100      	bne.n	8000df6 <PE_SubStateMachine_Generic+0x8e>
 8000df4:	e0bd      	b.n	8000f72 <PE_SubStateMachine_Generic+0x20a>
 8000df6:	2999      	cmp	r1, #153	; 0x99
 8000df8:	d000      	beq.n	8000dfc <PE_SubStateMachine_Generic+0x94>
 8000dfa:	e297      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8000dfc:	2106      	movs	r1, #6
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fd44 	bl	800088c <PE_Send_RESET>
 8000e04:	e220      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000e06:	6861      	ldr	r1, [r4, #4]
 8000e08:	6809      	ldr	r1, [r1, #0]
 8000e0a:	0889      	lsrs	r1, r1, #2
 8000e0c:	400e      	ands	r6, r1
 8000e0e:	d002      	beq.n	8000e16 <PE_SubStateMachine_Generic+0xae>
 8000e10:	6960      	ldr	r0, [r4, #20]
 8000e12:	0741      	lsls	r1, r0, #29
 8000e14:	0fc8      	lsrs	r0, r1, #31
 8000e16:	9000      	str	r0, [sp, #0]
 8000e18:	2319      	movs	r3, #25
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f000 fb76 	bl	8001510 <PE_Send_CtrlMessage>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d156      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000e28:	2007      	movs	r0, #7
 8000e2a:	e107      	b.n	800103c <PE_SubStateMachine_Generic+0x2d4>
 8000e2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e2e:	7800      	ldrb	r0, [r0, #0]
 8000e30:	2811      	cmp	r0, #17
 8000e32:	d13c      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e34:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e36:	0bc1      	lsrs	r1, r0, #15
 8000e38:	d11e      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e3a:	0441      	lsls	r1, r0, #17
 8000e3c:	0f49      	lsrs	r1, r1, #29
 8000e3e:	d01b      	beq.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e40:	06c0      	lsls	r0, r0, #27
 8000e42:	0ec0      	lsrs	r0, r0, #27
 8000e44:	2804      	cmp	r0, #4
 8000e46:	d117      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e48:	008b      	lsls	r3, r1, #2
 8000e4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e4c:	1c82      	adds	r2, r0, #2
 8000e4e:	2105      	movs	r1, #5
 8000e50:	7c20      	ldrb	r0, [r4, #16]
 8000e52:	68a6      	ldr	r6, [r4, #8]
 8000e54:	69b6      	ldr	r6, [r6, #24]
 8000e56:	47b0      	blx	r6
 8000e58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e5a:	7800      	ldrb	r0, [r0, #0]
 8000e5c:	2814      	cmp	r0, #20
 8000e5e:	d004      	beq.n	8000e6a <PE_SubStateMachine_Generic+0x102>
 8000e60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000e62:	700f      	strb	r7, [r1, #0]
 8000e64:	0020      	movs	r0, r4
 8000e66:	f7ff fd76 	bl	8000956 <PE_Clear_RxEvent>
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	7460      	strb	r0, [r4, #17]
 8000e6e:	9504      	str	r5, [sp, #16]
 8000e70:	2107      	movs	r1, #7
 8000e72:	7c20      	ldrb	r0, [r4, #16]
 8000e74:	f7ff fb04 	bl	8000480 <USBPD_PE_Notification>
 8000e78:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e7a:	21f0      	movs	r1, #240	; 0xf0
 8000e7c:	0209      	lsls	r1, r1, #8
 8000e7e:	4001      	ands	r1, r0
 8000e80:	d115      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e82:	06c0      	lsls	r0, r0, #27
 8000e84:	0ec0      	lsrs	r0, r0, #27
 8000e86:	2804      	cmp	r0, #4
 8000e88:	d001      	beq.n	8000e8e <PE_SubStateMachine_Generic+0x126>
 8000e8a:	2810      	cmp	r0, #16
 8000e8c:	d10f      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e8e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e90:	7800      	ldrb	r0, [r0, #0]
 8000e92:	2814      	cmp	r0, #20
 8000e94:	d004      	beq.n	8000ea0 <PE_SubStateMachine_Generic+0x138>
 8000e96:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e98:	7007      	strb	r7, [r0, #0]
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f7ff fd5b 	bl	8000956 <PE_Clear_RxEvent>
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	7460      	strb	r0, [r4, #17]
 8000ea4:	9504      	str	r5, [sp, #16]
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	7c20      	ldrb	r0, [r4, #16]
 8000eaa:	f7ff fae9 	bl	8000480 <USBPD_PE_Notification>
 8000eae:	8be0      	ldrh	r0, [r4, #30]
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0209      	lsls	r1, r1, #8
 8000eb4:	e099      	b.n	8000fea <PE_SubStateMachine_Generic+0x282>
 8000eb6:	9505      	str	r5, [sp, #20]
 8000eb8:	ab05      	add	r3, sp, #20
 8000eba:	aa06      	add	r2, sp, #24
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	7c20      	ldrb	r0, [r4, #16]
 8000ec0:	68a5      	ldr	r5, [r4, #8]
 8000ec2:	696d      	ldr	r5, [r5, #20]
 8000ec4:	47a8      	blx	r5
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	9805      	ldr	r0, [sp, #20]
 8000eca:	f000 fabf 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d002      	beq.n	8000ed8 <PE_SubStateMachine_Generic+0x170>
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	7460      	strb	r0, [r4, #17]
 8000ed6:	e22a      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000ed8:	9002      	str	r0, [sp, #8]
 8000eda:	2003      	movs	r0, #3
 8000edc:	9001      	str	r0, [sp, #4]
 8000ede:	9805      	ldr	r0, [sp, #20]
 8000ee0:	0880      	lsrs	r0, r0, #2
 8000ee2:	9000      	str	r0, [sp, #0]
 8000ee4:	ab06      	add	r3, sp, #24
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	0020      	movs	r0, r4
 8000eec:	f000 fb3b 	bl	8001566 <PE_Send_DataMessage>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	e165      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000ef8:	2012      	movs	r0, #18
 8000efa:	7720      	strb	r0, [r4, #28]
 8000efc:	2105      	movs	r1, #5
 8000efe:	7c20      	ldrb	r0, [r4, #16]
 8000f00:	f004 feab 	bl	8005c5a <USBDPD_PRL_BistCarrierEyeMode>
 8000f04:	2028      	movs	r0, #40	; 0x28
 8000f06:	7460      	strb	r0, [r4, #17]
 8000f08:	484f      	ldr	r0, [pc, #316]	; (8001048 <PE_SubStateMachine_Generic+0x2e0>)
 8000f0a:	83e0      	strh	r0, [r4, #30]
 8000f0c:	202d      	movs	r0, #45	; 0x2d
 8000f0e:	e099      	b.n	8001044 <PE_SubStateMachine_Generic+0x2dc>
 8000f10:	8be0      	ldrh	r0, [r4, #30]
 8000f12:	03f1      	lsls	r1, r6, #15
 8000f14:	4288      	cmp	r0, r1
 8000f16:	d10e      	bne.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f18:	2105      	movs	r1, #5
 8000f1a:	7c20      	ldrb	r0, [r4, #16]
 8000f1c:	f004 fea5 	bl	8005c6a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f20:	83e5      	strh	r5, [r4, #30]
 8000f22:	e191      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000f24:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f26:	7800      	ldrb	r0, [r0, #0]
 8000f28:	2814      	cmp	r0, #20
 8000f2a:	d004      	beq.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f2e:	7007      	strb	r7, [r0, #0]
 8000f30:	0020      	movs	r0, r4
 8000f32:	f7ff fd10 	bl	8000956 <PE_Clear_RxEvent>
 8000f36:	e1fa      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f38:	0020      	movs	r0, r4
 8000f3a:	f000 f9fb 	bl	8001334 <PE_SubStateMachine_ReceiveDRS>
 8000f3e:	e1f6      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f40:	6861      	ldr	r1, [r4, #4]
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	0889      	lsrs	r1, r1, #2
 8000f46:	400e      	ands	r6, r1
 8000f48:	d002      	beq.n	8000f50 <PE_SubStateMachine_Generic+0x1e8>
 8000f4a:	6960      	ldr	r0, [r4, #20]
 8000f4c:	0741      	lsls	r1, r0, #29
 8000f4e:	0fc8      	lsrs	r0, r1, #31
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	2395      	movs	r3, #149	; 0x95
 8000f54:	2209      	movs	r2, #9
 8000f56:	2100      	movs	r1, #0
 8000f58:	0020      	movs	r0, r4
 8000f5a:	f000 fad9 	bl	8001510 <PE_Send_CtrlMessage>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d1ed      	bne.n	8000f3e <PE_SubStateMachine_Generic+0x1d6>
 8000f62:	2010      	movs	r0, #16
 8000f64:	7720      	strb	r0, [r4, #28]
 8000f66:	4839      	ldr	r0, [pc, #228]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8000f68:	83e0      	strh	r0, [r4, #30]
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	9004      	str	r0, [sp, #16]
 8000f6e:	2122      	movs	r1, #34	; 0x22
 8000f70:	e128      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000f72:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f74:	7800      	ldrb	r0, [r0, #0]
 8000f76:	2814      	cmp	r0, #20
 8000f78:	d035      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f7a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000f7c:	21f0      	movs	r1, #240	; 0xf0
 8000f7e:	0209      	lsls	r1, r1, #8
 8000f80:	4001      	ands	r1, r0
 8000f82:	d130      	bne.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f84:	211f      	movs	r1, #31
 8000f86:	231f      	movs	r3, #31
 8000f88:	4003      	ands	r3, r0
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d006      	beq.n	8000f9c <PE_SubStateMachine_Generic+0x234>
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d008      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d006      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d015      	beq.n	8000fc6 <PE_SubStateMachine_Generic+0x25e>
 8000f9a:	e024      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f000 fa6d 	bl	800147c <PE_SwitchDataRole>
 8000fa2:	e008      	b.n	8000fb6 <PE_SubStateMachine_Generic+0x24e>
 8000fa4:	4001      	ands	r1, r0
 8000fa6:	290c      	cmp	r1, #12
 8000fa8:	d101      	bne.n	8000fae <PE_SubStateMachine_Generic+0x246>
 8000faa:	2126      	movs	r1, #38	; 0x26
 8000fac:	e000      	b.n	8000fb0 <PE_SubStateMachine_Generic+0x248>
 8000fae:	2127      	movs	r1, #39	; 0x27
 8000fb0:	7c20      	ldrb	r0, [r4, #16]
 8000fb2:	f7ff fa65 	bl	8000480 <USBPD_PE_Notification>
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	7460      	strb	r0, [r4, #17]
 8000fba:	9504      	str	r5, [sp, #16]
 8000fbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fbe:	7800      	ldrb	r0, [r0, #0]
 8000fc0:	2814      	cmp	r0, #20
 8000fc2:	d10b      	bne.n	8000fdc <PE_SubStateMachine_Generic+0x274>
 8000fc4:	e00f      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fc6:	2128      	movs	r1, #40	; 0x28
 8000fc8:	7c20      	ldrb	r0, [r4, #16]
 8000fca:	f7ff fa59 	bl	8000480 <USBPD_PE_Notification>
 8000fce:	2003      	movs	r0, #3
 8000fd0:	7460      	strb	r0, [r4, #17]
 8000fd2:	9504      	str	r5, [sp, #16]
 8000fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fd6:	7800      	ldrb	r0, [r0, #0]
 8000fd8:	2814      	cmp	r0, #20
 8000fda:	d004      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fde:	7007      	strb	r7, [r0, #0]
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff fcb8 	bl	8000956 <PE_Clear_RxEvent>
 8000fe6:	8be0      	ldrh	r0, [r4, #30]
 8000fe8:	03f1      	lsls	r1, r6, #15
 8000fea:	4288      	cmp	r0, r1
 8000fec:	d12b      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 8000fee:	e12b      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000ff0:	ab03      	add	r3, sp, #12
 8000ff2:	aa05      	add	r2, sp, #20
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	7c20      	ldrb	r0, [r4, #16]
 8000ff8:	68a5      	ldr	r5, [r4, #8]
 8000ffa:	696d      	ldr	r5, [r5, #20]
 8000ffc:	47a8      	blx	r5
 8000ffe:	9803      	ldr	r0, [sp, #12]
 8001000:	2800      	cmp	r0, #0
 8001002:	d100      	bne.n	8001006 <PE_SubStateMachine_Generic+0x29e>
 8001004:	e192      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001006:	2000      	movs	r0, #0
 8001008:	9002      	str	r0, [sp, #8]
 800100a:	2003      	movs	r0, #3
 800100c:	9001      	str	r0, [sp, #4]
 800100e:	9803      	ldr	r0, [sp, #12]
 8001010:	0880      	lsrs	r0, r0, #2
 8001012:	9000      	str	r0, [sp, #0]
 8001014:	ab05      	add	r3, sp, #20
 8001016:	220c      	movs	r2, #12
 8001018:	e154      	b.n	80012c4 <PE_SubStateMachine_Generic+0x55c>
 800101a:	6861      	ldr	r1, [r4, #4]
 800101c:	6809      	ldr	r1, [r1, #0]
 800101e:	0889      	lsrs	r1, r1, #2
 8001020:	4031      	ands	r1, r6
 8001022:	d000      	beq.n	8001026 <PE_SubStateMachine_Generic+0x2be>
 8001024:	2001      	movs	r0, #1
 8001026:	9000      	str	r0, [sp, #0]
 8001028:	2368      	movs	r3, #104	; 0x68
 800102a:	2218      	movs	r2, #24
 800102c:	2031      	movs	r0, #49	; 0x31
 800102e:	5c21      	ldrb	r1, [r4, r0]
 8001030:	0020      	movs	r0, r4
 8001032:	f000 fa6d 	bl	8001510 <PE_Send_CtrlMessage>
 8001036:	2800      	cmp	r0, #0
 8001038:	d105      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 800103a:	200f      	movs	r0, #15
 800103c:	7720      	strb	r0, [r4, #28]
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8001040:	83e0      	strh	r0, [r4, #30]
 8001042:	201b      	movs	r0, #27
 8001044:	9004      	str	r0, [sp, #16]
 8001046:	e172      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001048:	0000802d 	.word	0x0000802d
 800104c:	0000801b 	.word	0x0000801b
 8001050:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001052:	7800      	ldrb	r0, [r0, #0]
 8001054:	2814      	cmp	r0, #20
 8001056:	d023      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001058:	2030      	movs	r0, #48	; 0x30
 800105a:	5c20      	ldrb	r0, [r4, r0]
 800105c:	2131      	movs	r1, #49	; 0x31
 800105e:	5c61      	ldrb	r1, [r4, r1]
 8001060:	4288      	cmp	r0, r1
 8001062:	d11d      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001064:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001066:	0bc1      	lsrs	r1, r0, #15
 8001068:	d11a      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 800106a:	0b01      	lsrs	r1, r0, #12
 800106c:	0749      	lsls	r1, r1, #29
 800106e:	d017      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001070:	06c0      	lsls	r0, r0, #27
 8001072:	0ec0      	lsrs	r0, r0, #27
 8001074:	280c      	cmp	r0, #12
 8001076:	d113      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001078:	2304      	movs	r3, #4
 800107a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800107c:	1c82      	adds	r2, r0, #2
 800107e:	2114      	movs	r1, #20
 8001080:	7c20      	ldrb	r0, [r4, #16]
 8001082:	68a6      	ldr	r6, [r4, #8]
 8001084:	69b6      	ldr	r6, [r6, #24]
 8001086:	47b0      	blx	r6
 8001088:	2003      	movs	r0, #3
 800108a:	7460      	strb	r0, [r4, #17]
 800108c:	9504      	str	r5, [sp, #16]
 800108e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001090:	7800      	ldrb	r0, [r0, #0]
 8001092:	2814      	cmp	r0, #20
 8001094:	d004      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001096:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001098:	7007      	strb	r7, [r0, #0]
 800109a:	0020      	movs	r0, r4
 800109c:	f7ff fc5b 	bl	8000956 <PE_Clear_RxEvent>
 80010a0:	8be0      	ldrh	r0, [r4, #30]
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0209      	lsls	r1, r1, #8
 80010a6:	4288      	cmp	r0, r1
 80010a8:	d108      	bne.n	80010bc <PE_SubStateMachine_Generic+0x354>
 80010aa:	2011      	movs	r0, #17
 80010ac:	e0cd      	b.n	800124a <PE_SubStateMachine_Generic+0x4e2>
 80010ae:	9500      	str	r5, [sp, #0]
 80010b0:	2303      	movs	r3, #3
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	0020      	movs	r0, r4
 80010b8:	f000 fa2a 	bl	8001510 <PE_Send_CtrlMessage>
 80010bc:	e137      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80010be:	ab03      	add	r3, sp, #12
 80010c0:	48c9      	ldr	r0, [pc, #804]	; (80013e8 <.text_73>)
 80010c2:	1822      	adds	r2, r4, r0
 80010c4:	2108      	movs	r1, #8
 80010c6:	7c20      	ldrb	r0, [r4, #16]
 80010c8:	68a7      	ldr	r7, [r4, #8]
 80010ca:	697f      	ldr	r7, [r7, #20]
 80010cc:	47b8      	blx	r7
 80010ce:	2119      	movs	r1, #25
 80010d0:	9803      	ldr	r0, [sp, #12]
 80010d2:	f000 f9bb 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d129      	bne.n	800112e <PE_SubStateMachine_Generic+0x3c6>
 80010da:	48c4      	ldr	r0, [pc, #784]	; (80013ec <.text_74>)
 80010dc:	1826      	adds	r6, r4, r0
 80010de:	7035      	strb	r5, [r6, #0]
 80010e0:	7075      	strb	r5, [r6, #1]
 80010e2:	7c20      	ldrb	r0, [r4, #16]
 80010e4:	f7ff fe2e 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d103      	bne.n	80010f4 <PE_SubStateMachine_Generic+0x38c>
 80010ec:	7870      	ldrb	r0, [r6, #1]
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4301      	orrs	r1, r0
 80010f2:	7071      	strb	r1, [r6, #1]
 80010f4:	9502      	str	r5, [sp, #8]
 80010f6:	2003      	movs	r0, #3
 80010f8:	9001      	str	r0, [sp, #4]
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	b280      	uxth	r0, r0
 8001100:	9000      	str	r0, [sp, #0]
 8001102:	48bb      	ldr	r0, [pc, #748]	; (80013f0 <.text_75>)
 8001104:	1823      	adds	r3, r4, r0
 8001106:	2201      	movs	r2, #1
 8001108:	2100      	movs	r1, #0
 800110a:	0020      	movs	r0, r4
 800110c:	f000 fb5e 	bl	80017cc <PE_Send_ExtendedMessage>
 8001110:	2148      	movs	r1, #72	; 0x48
 8001112:	e057      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8001114:	ab03      	add	r3, sp, #12
 8001116:	48b4      	ldr	r0, [pc, #720]	; (80013e8 <.text_73>)
 8001118:	1822      	adds	r2, r4, r0
 800111a:	2113      	movs	r1, #19
 800111c:	7c20      	ldrb	r0, [r4, #16]
 800111e:	68a7      	ldr	r7, [r4, #8]
 8001120:	697f      	ldr	r7, [r7, #20]
 8001122:	47b8      	blx	r7
 8001124:	2118      	movs	r1, #24
 8001126:	9803      	ldr	r0, [sp, #12]
 8001128:	f000 f990 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800112c:	2800      	cmp	r0, #0
 800112e:	d000      	beq.n	8001132 <PE_SubStateMachine_Generic+0x3ca>
 8001130:	e0fc      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001132:	48ae      	ldr	r0, [pc, #696]	; (80013ec <.text_74>)
 8001134:	1826      	adds	r6, r4, r0
 8001136:	7035      	strb	r5, [r6, #0]
 8001138:	7075      	strb	r5, [r6, #1]
 800113a:	7c20      	ldrb	r0, [r4, #16]
 800113c:	f7ff fe02 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001140:	2800      	cmp	r0, #0
 8001142:	d103      	bne.n	800114c <PE_SubStateMachine_Generic+0x3e4>
 8001144:	7870      	ldrb	r0, [r6, #1]
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4301      	orrs	r1, r0
 800114a:	7071      	strb	r1, [r6, #1]
 800114c:	9502      	str	r5, [sp, #8]
 800114e:	2003      	movs	r0, #3
 8001150:	9001      	str	r0, [sp, #4]
 8001152:	9803      	ldr	r0, [sp, #12]
 8001154:	1d00      	adds	r0, r0, #4
 8001156:	b280      	uxth	r0, r0
 8001158:	9000      	str	r0, [sp, #0]
 800115a:	48a5      	ldr	r0, [pc, #660]	; (80013f0 <.text_75>)
 800115c:	1823      	adds	r3, r4, r0
 800115e:	220f      	movs	r2, #15
 8001160:	2100      	movs	r1, #0
 8001162:	0020      	movs	r0, r4
 8001164:	f000 fb32 	bl	80017cc <PE_Send_ExtendedMessage>
 8001168:	2161      	movs	r1, #97	; 0x61
 800116a:	e02b      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 800116c:	ab03      	add	r3, sp, #12
 800116e:	489e      	ldr	r0, [pc, #632]	; (80013e8 <.text_73>)
 8001170:	1822      	adds	r2, r4, r0
 8001172:	2109      	movs	r1, #9
 8001174:	7c20      	ldrb	r0, [r4, #16]
 8001176:	68a7      	ldr	r7, [r4, #8]
 8001178:	697f      	ldr	r7, [r7, #20]
 800117a:	47b8      	blx	r7
 800117c:	2107      	movs	r1, #7
 800117e:	9803      	ldr	r0, [sp, #12]
 8001180:	f000 f964 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001184:	2800      	cmp	r0, #0
 8001186:	d170      	bne.n	800126a <PE_SubStateMachine_Generic+0x502>
 8001188:	4998      	ldr	r1, [pc, #608]	; (80013ec <.text_74>)
 800118a:	5465      	strb	r5, [r4, r1]
 800118c:	1860      	adds	r0, r4, r1
 800118e:	7045      	strb	r5, [r0, #1]
 8001190:	7c20      	ldrb	r0, [r4, #16]
 8001192:	f7ff fdd7 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001196:	2800      	cmp	r0, #0
 8001198:	d105      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x43e>
 800119a:	4894      	ldr	r0, [pc, #592]	; (80013ec <.text_74>)
 800119c:	1820      	adds	r0, r4, r0
 800119e:	7841      	ldrb	r1, [r0, #1]
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	430a      	orrs	r2, r1
 80011a4:	7042      	strb	r2, [r0, #1]
 80011a6:	9502      	str	r5, [sp, #8]
 80011a8:	2003      	movs	r0, #3
 80011aa:	9001      	str	r0, [sp, #4]
 80011ac:	9803      	ldr	r0, [sp, #12]
 80011ae:	1d00      	adds	r0, r0, #4
 80011b0:	b280      	uxth	r0, r0
 80011b2:	9000      	str	r0, [sp, #0]
 80011b4:	488e      	ldr	r0, [pc, #568]	; (80013f0 <.text_75>)
 80011b6:	1823      	adds	r3, r4, r0
 80011b8:	2202      	movs	r2, #2
 80011ba:	2100      	movs	r1, #0
 80011bc:	0020      	movs	r0, r4
 80011be:	f000 fb05 	bl	80017cc <PE_Send_ExtendedMessage>
 80011c2:	214f      	movs	r1, #79	; 0x4f
 80011c4:	7c20      	ldrb	r0, [r4, #16]
 80011c6:	f7ff f95b 	bl	8000480 <USBPD_PE_Notification>
 80011ca:	e0b0      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80011cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80011ce:	7800      	ldrb	r0, [r0, #0]
 80011d0:	2814      	cmp	r0, #20
 80011d2:	d034      	beq.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 80011d4:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80011d6:	0bc1      	lsrs	r1, r0, #15
 80011d8:	d11a      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011da:	0b01      	lsrs	r1, r0, #12
 80011dc:	0749      	lsls	r1, r1, #29
 80011de:	d017      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e0:	06c0      	lsls	r0, r0, #27
 80011e2:	0ec0      	lsrs	r0, r0, #27
 80011e4:	2805      	cmp	r0, #5
 80011e6:	d113      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e8:	2304      	movs	r3, #4
 80011ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011ec:	1d02      	adds	r2, r0, #4
 80011ee:	210f      	movs	r1, #15
 80011f0:	7c20      	ldrb	r0, [r4, #16]
 80011f2:	68a6      	ldr	r6, [r4, #8]
 80011f4:	69b6      	ldr	r6, [r6, #24]
 80011f6:	47b0      	blx	r6
 80011f8:	2003      	movs	r0, #3
 80011fa:	7460      	strb	r0, [r4, #17]
 80011fc:	9504      	str	r5, [sp, #16]
 80011fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001200:	7800      	ldrb	r0, [r0, #0]
 8001202:	2814      	cmp	r0, #20
 8001204:	d004      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 8001206:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001208:	700f      	strb	r7, [r1, #0]
 800120a:	0020      	movs	r0, r4
 800120c:	f7ff fba3 	bl	8000956 <PE_Clear_RxEvent>
 8001210:	2034      	movs	r0, #52	; 0x34
 8001212:	5c20      	ldrb	r0, [r4, r0]
 8001214:	06c0      	lsls	r0, r0, #27
 8001216:	0ec0      	lsrs	r0, r0, #27
 8001218:	2810      	cmp	r0, #16
 800121a:	d110      	bne.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 800121c:	2159      	movs	r1, #89	; 0x59
 800121e:	7c20      	ldrb	r0, [r4, #16]
 8001220:	f7ff f92e 	bl	8000480 <USBPD_PE_Notification>
 8001224:	83e5      	strh	r5, [r4, #30]
 8001226:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001228:	7800      	ldrb	r0, [r0, #0]
 800122a:	2814      	cmp	r0, #20
 800122c:	d004      	beq.n	8001238 <PE_SubStateMachine_Generic+0x4d0>
 800122e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001230:	7007      	strb	r7, [r0, #0]
 8001232:	0020      	movs	r0, r4
 8001234:	f7ff fb8f 	bl	8000956 <PE_Clear_RxEvent>
 8001238:	2003      	movs	r0, #3
 800123a:	7460      	strb	r0, [r4, #17]
 800123c:	9504      	str	r5, [sp, #16]
 800123e:	8be0      	ldrh	r0, [r4, #30]
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0209      	lsls	r1, r1, #8
 8001244:	4288      	cmp	r0, r1
 8001246:	d172      	bne.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001248:	2003      	movs	r0, #3
 800124a:	7460      	strb	r0, [r4, #17]
 800124c:	9504      	str	r5, [sp, #16]
 800124e:	e06e      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001250:	ab03      	add	r3, sp, #12
 8001252:	4865      	ldr	r0, [pc, #404]	; (80013e8 <.text_73>)
 8001254:	1822      	adds	r2, r4, r0
 8001256:	210d      	movs	r1, #13
 8001258:	7c20      	ldrb	r0, [r4, #16]
 800125a:	68a7      	ldr	r7, [r4, #8]
 800125c:	697f      	ldr	r7, [r7, #20]
 800125e:	47b8      	blx	r7
 8001260:	2104      	movs	r1, #4
 8001262:	9803      	ldr	r0, [sp, #12]
 8001264:	f000 f8f2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001268:	2800      	cmp	r0, #0
 800126a:	d15f      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 800126c:	485f      	ldr	r0, [pc, #380]	; (80013ec <.text_74>)
 800126e:	1826      	adds	r6, r4, r0
 8001270:	7035      	strb	r5, [r6, #0]
 8001272:	7075      	strb	r5, [r6, #1]
 8001274:	7c20      	ldrb	r0, [r4, #16]
 8001276:	f7ff fd65 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800127a:	2800      	cmp	r0, #0
 800127c:	d103      	bne.n	8001286 <PE_SubStateMachine_Generic+0x51e>
 800127e:	7870      	ldrb	r0, [r6, #1]
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	4301      	orrs	r1, r0
 8001284:	7071      	strb	r1, [r6, #1]
 8001286:	9502      	str	r5, [sp, #8]
 8001288:	2003      	movs	r0, #3
 800128a:	9001      	str	r0, [sp, #4]
 800128c:	9803      	ldr	r0, [sp, #12]
 800128e:	1d00      	adds	r0, r0, #4
 8001290:	b280      	uxth	r0, r0
 8001292:	9000      	str	r0, [sp, #0]
 8001294:	4856      	ldr	r0, [pc, #344]	; (80013f0 <.text_75>)
 8001296:	1823      	adds	r3, r4, r0
 8001298:	2207      	movs	r2, #7
 800129a:	e03d      	b.n	8001318 <PE_SubStateMachine_Generic+0x5b0>
 800129c:	9505      	str	r5, [sp, #20]
 800129e:	ab03      	add	r3, sp, #12
 80012a0:	aa05      	add	r2, sp, #20
 80012a2:	210f      	movs	r1, #15
 80012a4:	7c20      	ldrb	r0, [r4, #16]
 80012a6:	68a5      	ldr	r5, [r4, #8]
 80012a8:	696d      	ldr	r5, [r5, #20]
 80012aa:	47a8      	blx	r5
 80012ac:	2104      	movs	r1, #4
 80012ae:	9803      	ldr	r0, [sp, #12]
 80012b0:	f000 f8cc 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d139      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012b8:	9002      	str	r0, [sp, #8]
 80012ba:	2003      	movs	r0, #3
 80012bc:	9001      	str	r0, [sp, #4]
 80012be:	9600      	str	r6, [sp, #0]
 80012c0:	ab05      	add	r3, sp, #20
 80012c2:	2205      	movs	r2, #5
 80012c4:	2100      	movs	r1, #0
 80012c6:	0020      	movs	r0, r4
 80012c8:	f000 f94d 	bl	8001566 <PE_Send_DataMessage>
 80012cc:	e02f      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80012ce:	ab03      	add	r3, sp, #12
 80012d0:	4845      	ldr	r0, [pc, #276]	; (80013e8 <.text_73>)
 80012d2:	1822      	adds	r2, r4, r0
 80012d4:	2111      	movs	r1, #17
 80012d6:	7c20      	ldrb	r0, [r4, #16]
 80012d8:	68a7      	ldr	r7, [r4, #8]
 80012da:	697f      	ldr	r7, [r7, #20]
 80012dc:	47b8      	blx	r7
 80012de:	2109      	movs	r1, #9
 80012e0:	9803      	ldr	r0, [sp, #12]
 80012e2:	f000 f8b3 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d120      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012ea:	4840      	ldr	r0, [pc, #256]	; (80013ec <.text_74>)
 80012ec:	1826      	adds	r6, r4, r0
 80012ee:	7035      	strb	r5, [r6, #0]
 80012f0:	7075      	strb	r5, [r6, #1]
 80012f2:	7c20      	ldrb	r0, [r4, #16]
 80012f4:	f7ff fd26 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d103      	bne.n	8001304 <PE_SubStateMachine_Generic+0x59c>
 80012fc:	7870      	ldrb	r0, [r6, #1]
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4301      	orrs	r1, r0
 8001302:	7071      	strb	r1, [r6, #1]
 8001304:	9502      	str	r5, [sp, #8]
 8001306:	2003      	movs	r0, #3
 8001308:	9001      	str	r0, [sp, #4]
 800130a:	9803      	ldr	r0, [sp, #12]
 800130c:	1d00      	adds	r0, r0, #4
 800130e:	b280      	uxth	r0, r0
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	4837      	ldr	r0, [pc, #220]	; (80013f0 <.text_75>)
 8001314:	1823      	adds	r3, r4, r0
 8001316:	2205      	movs	r2, #5
 8001318:	2100      	movs	r1, #0
 800131a:	0020      	movs	r0, r4
 800131c:	f000 fa56 	bl	80017cc <PE_Send_ExtendedMessage>
 8001320:	e005      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001322:	2150      	movs	r1, #80	; 0x50
 8001324:	7c20      	ldrb	r0, [r4, #16]
 8001326:	f7ff f8ab 	bl	8000480 <USBPD_PE_Notification>
 800132a:	e78d      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 800132c:	7466      	strb	r6, [r4, #17]
 800132e:	9804      	ldr	r0, [sp, #16]
 8001330:	b00f      	add	sp, #60	; 0x3c
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001334 <PE_SubStateMachine_ReceiveDRS>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	0004      	movs	r4, r0
 8001338:	252a      	movs	r5, #42	; 0x2a
 800133a:	7c20      	ldrb	r0, [r4, #16]
 800133c:	68a1      	ldr	r1, [r4, #8]
 800133e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001340:	4788      	blx	r1
 8001342:	280a      	cmp	r0, #10
 8001344:	d002      	beq.n	800134c <PE_SubStateMachine_ReceiveDRS+0x18>
 8001346:	280c      	cmp	r0, #12
 8001348:	d017      	beq.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 800134a:	e00d      	b.n	8001368 <PE_SubStateMachine_ReceiveDRS+0x34>
 800134c:	2000      	movs	r0, #0
 800134e:	9000      	str	r0, [sp, #0]
 8001350:	2303      	movs	r3, #3
 8001352:	2203      	movs	r2, #3
 8001354:	2100      	movs	r1, #0
 8001356:	0020      	movs	r0, r4
 8001358:	f000 f8da 	bl	8001510 <PE_Send_CtrlMessage>
 800135c:	2800      	cmp	r0, #0
 800135e:	d10d      	bne.n	800137c <PE_SubStateMachine_ReceiveDRS+0x48>
 8001360:	0020      	movs	r0, r4
 8001362:	f000 f88b 	bl	800147c <PE_SwitchDataRole>
 8001366:	bd31      	pop	{r0, r4, r5, pc}
 8001368:	6860      	ldr	r0, [r4, #4]
 800136a:	7800      	ldrb	r0, [r0, #0]
 800136c:	0780      	lsls	r0, r0, #30
 800136e:	0f80      	lsrs	r0, r0, #30
 8001370:	2802      	cmp	r0, #2
 8001372:	d102      	bne.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 8001374:	2001      	movs	r0, #1
 8001376:	7460      	strb	r0, [r4, #17]
 8001378:	bd31      	pop	{r0, r4, r5, pc}
 800137a:	7465      	strb	r5, [r4, #17]
 800137c:	bd31      	pop	{r0, r4, r5, pc}

0800137e <PE_UpdateTimer>:
 800137e:	b510      	push	{r4, lr}
 8001380:	0002      	movs	r2, r0
 8001382:	2080      	movs	r0, #128	; 0x80
 8001384:	0200      	lsls	r0, r0, #8
 8001386:	0454      	lsls	r4, r2, #17
 8001388:	0c64      	lsrs	r4, r4, #17
 800138a:	42a1      	cmp	r1, r4
 800138c:	da00      	bge.n	8001390 <PE_UpdateTimer+0x12>
 800138e:	1a50      	subs	r0, r2, r1
 8001390:	b280      	uxth	r0, r0
 8001392:	bd10      	pop	{r4, pc}

08001394 <PE_CallHardResetCallback>:
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <PE_CallHardResetCallback+0xa>
 800139c:	4770      	bx	lr
 800139e:	b580      	push	{r7, lr}
 80013a0:	7c00      	ldrb	r0, [r0, #16]
 80013a2:	4798      	blx	r3
 80013a4:	bd01      	pop	{r0, pc}

080013a6 <PE_SetPowerNegotiation>:
 80013a6:	b510      	push	{r4, lr}
 80013a8:	6842      	ldr	r2, [r0, #4]
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	055c      	lsls	r4, r3, #21
 80013ae:	0f64      	lsrs	r4, r4, #29
 80013b0:	42a1      	cmp	r1, r4
 80013b2:	d00b      	beq.n	80013cc <PE_SetPowerNegotiation+0x26>
 80013b4:	4c2e      	ldr	r4, [pc, #184]	; (8001470 <.text_79>)
 80013b6:	401c      	ands	r4, r3
 80013b8:	0209      	lsls	r1, r1, #8
 80013ba:	23e0      	movs	r3, #224	; 0xe0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	400b      	ands	r3, r1
 80013c0:	4323      	orrs	r3, r4
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	215a      	movs	r1, #90	; 0x5a
 80013c6:	7c00      	ldrb	r0, [r0, #16]
 80013c8:	f7ff f85a 	bl	8000480 <USBPD_PE_Notification>
 80013cc:	bd10      	pop	{r4, pc}

080013ce <USBPD_PE_ExecFastRoleSwapSignalling>:
 80013ce:	b580      	push	{r7, lr}
 80013d0:	4928      	ldr	r1, [pc, #160]	; (8001474 <.text_80>)
 80013d2:	0082      	lsls	r2, r0, #2
 80013d4:	5889      	ldr	r1, [r1, r2]
 80013d6:	694a      	ldr	r2, [r1, #20]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4313      	orrs	r3, r2
 80013de:	614b      	str	r3, [r1, #20]
 80013e0:	6889      	ldr	r1, [r1, #8]
 80013e2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80013e4:	4788      	blx	r1
 80013e6:	bd01      	pop	{r0, pc}

080013e8 <.text_73>:
 80013e8:	00000267 	.word	0x00000267

080013ec <.text_74>:
 80013ec:	00000265 	.word	0x00000265

080013f0 <.text_75>:
 80013f0:	00000263 	.word	0x00000263

080013f4 <PE_CalculateMinTiming>:
 80013f4:	0001      	movs	r1, r0
 80013f6:	2000      	movs	r0, #0
 80013f8:	43c0      	mvns	r0, r0
 80013fa:	0c42      	lsrs	r2, r0, #17
 80013fc:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 80013fe:	4213      	tst	r3, r2
 8001400:	d001      	beq.n	8001406 <PE_CalculateMinTiming+0x12>
 8001402:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8001404:	4010      	ands	r0, r2
 8001406:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8001408:	4213      	tst	r3, r2
 800140a:	d006      	beq.n	800141a <PE_CalculateMinTiming+0x26>
 800140c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800140e:	4013      	ands	r3, r2
 8001410:	4298      	cmp	r0, r3
 8001412:	d302      	bcc.n	800141a <PE_CalculateMinTiming+0x26>
 8001414:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8001416:	0010      	movs	r0, r2
 8001418:	4008      	ands	r0, r1
 800141a:	4770      	bx	lr

0800141c <PE_SetPowerNegociation>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	0005      	movs	r5, r0
 8001420:	000c      	movs	r4, r1
 8001422:	6868      	ldr	r0, [r5, #4]
 8001424:	6800      	ldr	r0, [r0, #0]
 8001426:	0540      	lsls	r0, r0, #21
 8001428:	0f40      	lsrs	r0, r0, #29
 800142a:	4284      	cmp	r4, r0
 800142c:	d003      	beq.n	8001436 <PE_SetPowerNegociation+0x1a>
 800142e:	215a      	movs	r1, #90	; 0x5a
 8001430:	7c28      	ldrb	r0, [r5, #16]
 8001432:	f7ff f825 	bl	8000480 <USBPD_PE_Notification>
 8001436:	6868      	ldr	r0, [r5, #4]
 8001438:	6801      	ldr	r1, [r0, #0]
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <.text_79>)
 800143c:	400a      	ands	r2, r1
 800143e:	0221      	lsls	r1, r4, #8
 8001440:	23e0      	movs	r3, #224	; 0xe0
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	400b      	ands	r3, r1
 8001446:	4313      	orrs	r3, r2
 8001448:	6003      	str	r3, [r0, #0]
 800144a:	bd31      	pop	{r0, r4, r5, pc}

0800144c <PE_CheckDataSizeFromGetDataInfo>:
 800144c:	b51c      	push	{r2, r3, r4, lr}
 800144e:	0002      	movs	r2, r0
 8001450:	2000      	movs	r0, #0
 8001452:	428a      	cmp	r2, r1
 8001454:	d20a      	bcs.n	800146c <PE_CheckDataSizeFromGetDataInfo+0x20>
 8001456:	2018      	movs	r0, #24
 8001458:	9000      	str	r0, [sp, #0]
 800145a:	bf00      	nop
 800145c:	a315      	add	r3, pc, #84	; (adr r3, 80014b4 <.text_83>)
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2006      	movs	r0, #6
 8001464:	4c04      	ldr	r4, [pc, #16]	; (8001478 <.text_81>)
 8001466:	6824      	ldr	r4, [r4, #0]
 8001468:	47a0      	blx	r4
 800146a:	2002      	movs	r0, #2
 800146c:	bd16      	pop	{r1, r2, r4, pc}
	...

08001470 <.text_79>:
 8001470:	fffff8ff 	.word	0xfffff8ff

08001474 <.text_80>:
 8001474:	200002f4 	.word	0x200002f4

08001478 <.text_81>:
 8001478:	20000000 	.word	0x20000000

0800147c <PE_SwitchDataRole>:
 800147c:	b510      	push	{r4, lr}
 800147e:	0004      	movs	r4, r0
 8001480:	6860      	ldr	r0, [r4, #4]
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	08d3      	lsrs	r3, r2, #3
 8001488:	400b      	ands	r3, r1
 800148a:	d107      	bne.n	800149c <PE_SwitchDataRole+0x20>
 800148c:	2308      	movs	r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	6003      	str	r3, [r0, #0]
 8001492:	7c20      	ldrb	r0, [r4, #16]
 8001494:	f004 f93b 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 8001498:	2125      	movs	r1, #37	; 0x25
 800149a:	e007      	b.n	80014ac <PE_SwitchDataRole+0x30>
 800149c:	2108      	movs	r1, #8
 800149e:	438a      	bics	r2, r1
 80014a0:	6002      	str	r2, [r0, #0]
 80014a2:	2100      	movs	r1, #0
 80014a4:	7c20      	ldrb	r0, [r4, #16]
 80014a6:	f004 f932 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 80014aa:	2124      	movs	r1, #36	; 0x24
 80014ac:	7c20      	ldrb	r0, [r4, #16]
 80014ae:	f7fe ffe7 	bl	8000480 <USBPD_PE_Notification>
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <.text_83>:
 80014b4:	61746144 	.word	0x61746144
 80014b8:	7a695320 	.word	0x7a695320
 80014bc:	73692065 	.word	0x73692065
 80014c0:	746f6e20 	.word	0x746f6e20
 80014c4:	726f6320 	.word	0x726f6320
 80014c8:	74636572 	.word	0x74636572
 80014cc:	00          	.byte	0x00
 80014cd:	00          	.byte	0x00
	...

080014d0 <USBPD_PE_SetTrace>:
 80014d0:	0001      	movs	r1, r0
 80014d2:	d100      	bne.n	80014d6 <USBPD_PE_SetTrace+0x6>
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <.text_5>)
 80014d6:	4906      	ldr	r1, [pc, #24]	; (80014f0 <.text_6>)
 80014d8:	6008      	str	r0, [r1, #0]
 80014da:	4770      	bx	lr

080014dc <USBPD_PE_CheckLIB>:
 80014dc:	0001      	movs	r1, r0
 80014de:	2000      	movs	r0, #0
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <.text_7>)
 80014e2:	4291      	cmp	r1, r2
 80014e4:	d100      	bne.n	80014e8 <USBPD_PE_CheckLIB+0xc>
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
	...

080014ec <.text_5>:
 80014ec:	0800150f 	.word	0x0800150f

080014f0 <.text_6>:
 80014f0:	20000000 	.word	0x20000000

080014f4 <.text_7>:
 80014f4:	30410000 	.word	0x30410000

080014f8 <USBPD_PE_GetMemoryConsumption>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	f004 f8df 	bl	80056bc <USBPD_PRL_GetMemoryConsumption>
 80014fe:	0004      	movs	r4, r0
 8001500:	f7fe fedd 	bl	80002be <USBPD_CAD_GetMemoryConsumption>
 8001504:	1820      	adds	r0, r4, r0
 8001506:	21e1      	movs	r1, #225	; 0xe1
 8001508:	0109      	lsls	r1, r1, #4
 800150a:	1840      	adds	r0, r0, r1
 800150c:	bd10      	pop	{r4, pc}

0800150e <PE_Trace_Empty>:
 800150e:	4770      	bx	lr

08001510 <PE_Send_CtrlMessage>:
 8001510:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001512:	2501      	movs	r5, #1
 8001514:	0004      	movs	r4, r0
 8001516:	000f      	movs	r7, r1
 8001518:	0016      	movs	r6, r2
 800151a:	6860      	ldr	r0, [r4, #4]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	0b00      	lsrs	r0, r0, #12
 8001520:	4028      	ands	r0, r5
 8001522:	d014      	beq.n	800154e <PE_Send_CtrlMessage+0x3e>
 8001524:	a808      	add	r0, sp, #32
 8001526:	7800      	ldrb	r0, [r0, #0]
 8001528:	9001      	str	r0, [sp, #4]
 800152a:	2002      	movs	r0, #2
 800152c:	9000      	str	r0, [sp, #0]
 800152e:	48a2      	ldr	r0, [pc, #648]	; (80017b8 <.text_5>)
 8001530:	1823      	adds	r3, r4, r0
 8001532:	0032      	movs	r2, r6
 8001534:	0039      	movs	r1, r7
 8001536:	7c20      	ldrb	r0, [r4, #16]
 8001538:	f004 f938 	bl	80057ac <USBPD_PRL_SendMessage>
 800153c:	2803      	cmp	r0, #3
 800153e:	d0ec      	beq.n	800151a <PE_Send_CtrlMessage+0xa>
 8001540:	0039      	movs	r1, r7
 8001542:	2810      	cmp	r0, #16
 8001544:	d00e      	beq.n	8001564 <PE_Send_CtrlMessage+0x54>
 8001546:	2e0d      	cmp	r6, #13
 8001548:	d104      	bne.n	8001554 <PE_Send_CtrlMessage+0x44>
 800154a:	2201      	movs	r2, #1
 800154c:	e003      	b.n	8001556 <PE_Send_CtrlMessage+0x46>
 800154e:	7460      	strb	r0, [r4, #17]
 8001550:	2010      	movs	r0, #16
 8001552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001554:	2200      	movs	r2, #0
 8001556:	466b      	mov	r3, sp
 8001558:	7a1b      	ldrb	r3, [r3, #8]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	0003      	movs	r3, r0
 800155e:	0020      	movs	r0, r4
 8001560:	f000 fc24 	bl	8001dac <PE_CheckSendMessageStatus>
 8001564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001566 <PE_Send_DataMessage>:
 8001566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	0004      	movs	r4, r0
 800156c:	2000      	movs	r0, #0
 800156e:	4e93      	ldr	r6, [pc, #588]	; (80017bc <.text_6>)
 8001570:	e00c      	b.n	800158c <PE_Send_DataMessage+0x26>
 8001572:	2100      	movs	r1, #0
 8001574:	0082      	lsls	r2, r0, #2
 8001576:	18a2      	adds	r2, r4, r2
 8001578:	1855      	adds	r5, r2, r1
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	00cf      	lsls	r7, r1, #3
 800157e:	40fa      	lsrs	r2, r7
 8001580:	55aa      	strb	r2, [r5, r6]
 8001582:	1c49      	adds	r1, r1, #1
 8001584:	2904      	cmp	r1, #4
 8001586:	d3f5      	bcc.n	8001574 <PE_Send_DataMessage+0xe>
 8001588:	1d1b      	adds	r3, r3, #4
 800158a:	1c40      	adds	r0, r0, #1
 800158c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800158e:	4288      	cmp	r0, r1
 8001590:	d3ef      	bcc.n	8001572 <PE_Send_DataMessage+0xc>
 8001592:	6860      	ldr	r0, [r4, #4]
 8001594:	6800      	ldr	r0, [r0, #0]
 8001596:	04c1      	lsls	r1, r0, #19
 8001598:	0fc9      	lsrs	r1, r1, #31
 800159a:	d01f      	beq.n	80015dc <PE_Send_DataMessage+0x76>
 800159c:	a80c      	add	r0, sp, #48	; 0x30
 800159e:	7800      	ldrb	r0, [r0, #0]
 80015a0:	9001      	str	r0, [sp, #4]
 80015a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80015a4:	0080      	lsls	r0, r0, #2
 80015a6:	1c80      	adds	r0, r0, #2
 80015a8:	b280      	uxth	r0, r0
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	1eb0      	subs	r0, r6, #2
 80015ae:	1823      	adds	r3, r4, r0
 80015b0:	4668      	mov	r0, sp
 80015b2:	7c02      	ldrb	r2, [r0, #16]
 80015b4:	7b01      	ldrb	r1, [r0, #12]
 80015b6:	7c20      	ldrb	r0, [r4, #16]
 80015b8:	f004 f8f8 	bl	80057ac <USBPD_PRL_SendMessage>
 80015bc:	2803      	cmp	r0, #3
 80015be:	d0e8      	beq.n	8001592 <PE_Send_DataMessage+0x2c>
 80015c0:	4669      	mov	r1, sp
 80015c2:	7b09      	ldrb	r1, [r1, #12]
 80015c4:	2810      	cmp	r0, #16
 80015c6:	d007      	beq.n	80015d8 <PE_Send_DataMessage+0x72>
 80015c8:	aa0b      	add	r2, sp, #44	; 0x2c
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	0003      	movs	r3, r0
 80015d0:	2200      	movs	r2, #0
 80015d2:	0020      	movs	r0, r4
 80015d4:	f000 fbea 	bl	8001dac <PE_CheckSendMessageStatus>
 80015d8:	b005      	add	sp, #20
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2010      	movs	r0, #16
 80015de:	e7fb      	b.n	80015d8 <PE_Send_DataMessage+0x72>

080015e0 <PE_Check_ExtendedMessage>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	0004      	movs	r4, r0
 80015e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015e6:	7881      	ldrb	r1, [r0, #2]
 80015e8:	78c0      	ldrb	r0, [r0, #3]
 80015ea:	0200      	lsls	r0, r0, #8
 80015ec:	1808      	adds	r0, r1, r0
 80015ee:	4974      	ldr	r1, [pc, #464]	; (80017c0 <.text_7>)
 80015f0:	1861      	adds	r1, r4, r1
 80015f2:	8008      	strh	r0, [r1, #0]
 80015f4:	2234      	movs	r2, #52	; 0x34
 80015f6:	5ca2      	ldrb	r2, [r4, r2]
 80015f8:	06d2      	lsls	r2, r2, #27
 80015fa:	0ed2      	lsrs	r2, r2, #27
 80015fc:	708a      	strb	r2, [r1, #2]
 80015fe:	2501      	movs	r5, #1
 8001600:	0403      	lsls	r3, r0, #16
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	2201      	movs	r2, #1
 8001606:	401a      	ands	r2, r3
 8001608:	0403      	lsls	r3, r0, #16
 800160a:	0edb      	lsrs	r3, r3, #27
 800160c:	071b      	lsls	r3, r3, #28
 800160e:	d003      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001610:	0013      	movs	r3, r2
 8001612:	d001      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001614:	2034      	movs	r0, #52	; 0x34
 8001616:	e09e      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001618:	05c6      	lsls	r6, r0, #23
 800161a:	0df6      	lsrs	r6, r6, #23
 800161c:	2300      	movs	r3, #0
 800161e:	0407      	lsls	r7, r0, #16
 8001620:	0fff      	lsrs	r7, r7, #31
 8001622:	d10d      	bne.n	8001640 <PE_Check_ExtendedMessage+0x60>
 8001624:	4867      	ldr	r0, [pc, #412]	; (80017c4 <.text_8>)
 8001626:	5226      	strh	r6, [r4, r0]
 8001628:	4866      	ldr	r0, [pc, #408]	; (80017c4 <.text_8>)
 800162a:	5a20      	ldrh	r0, [r4, r0]
 800162c:	4283      	cmp	r3, r0
 800162e:	d21b      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001630:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001632:	1d00      	adds	r0, r0, #4
 8001634:	5cc0      	ldrb	r0, [r0, r3]
 8001636:	4a64      	ldr	r2, [pc, #400]	; (80017c8 <.text_9>)
 8001638:	18a2      	adds	r2, r4, r2
 800163a:	54d0      	strb	r0, [r2, r3]
 800163c:	1c5b      	adds	r3, r3, #1
 800163e:	e7f3      	b.n	8001628 <PE_Check_ExtendedMessage+0x48>
 8001640:	27f8      	movs	r7, #248	; 0xf8
 8001642:	01ff      	lsls	r7, r7, #7
 8001644:	4007      	ands	r7, r0
 8001646:	d106      	bne.n	8001656 <PE_Check_ExtendedMessage+0x76>
 8001648:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800164a:	0440      	lsls	r0, r0, #17
 800164c:	0f40      	lsrs	r0, r0, #29
 800164e:	2807      	cmp	r0, #7
 8001650:	d30a      	bcc.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001652:	2e1a      	cmp	r6, #26
 8001654:	d908      	bls.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001656:	2a00      	cmp	r2, #0
 8001658:	d106      	bne.n	8001668 <PE_Check_ExtendedMessage+0x88>
 800165a:	485a      	ldr	r0, [pc, #360]	; (80017c4 <.text_8>)
 800165c:	5a20      	ldrh	r0, [r4, r0]
 800165e:	42b0      	cmp	r0, r6
 8001660:	d202      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001662:	83e3      	strh	r3, [r4, #30]
 8001664:	2037      	movs	r0, #55	; 0x37
 8001666:	e076      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001668:	7889      	ldrb	r1, [r1, #2]
 800166a:	2603      	movs	r6, #3
 800166c:	7f22      	ldrb	r2, [r4, #28]
 800166e:	2a00      	cmp	r2, #0
 8001670:	d039      	beq.n	80016e6 <PE_Check_ExtendedMessage+0x106>
 8001672:	2901      	cmp	r1, #1
 8001674:	d008      	beq.n	8001688 <PE_Check_ExtendedMessage+0xa8>
 8001676:	2902      	cmp	r1, #2
 8001678:	d01c      	beq.n	80016b4 <PE_Check_ExtendedMessage+0xd4>
 800167a:	2905      	cmp	r1, #5
 800167c:	d02a      	beq.n	80016d4 <PE_Check_ExtendedMessage+0xf4>
 800167e:	2907      	cmp	r1, #7
 8001680:	d023      	beq.n	80016ca <PE_Check_ExtendedMessage+0xea>
 8001682:	290f      	cmp	r1, #15
 8001684:	d00b      	beq.n	800169e <PE_Check_ExtendedMessage+0xbe>
 8001686:	e094      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001688:	2319      	movs	r3, #25
 800168a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800168c:	1d02      	adds	r2, r0, #4
 800168e:	2108      	movs	r1, #8
 8001690:	7c20      	ldrb	r0, [r4, #16]
 8001692:	68a7      	ldr	r7, [r4, #8]
 8001694:	69bf      	ldr	r7, [r7, #24]
 8001696:	47b8      	blx	r7
 8001698:	7466      	strb	r6, [r4, #17]
 800169a:	2147      	movs	r1, #71	; 0x47
 800169c:	e014      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 800169e:	2318      	movs	r3, #24
 80016a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016a2:	1d02      	adds	r2, r0, #4
 80016a4:	2113      	movs	r1, #19
 80016a6:	7c20      	ldrb	r0, [r4, #16]
 80016a8:	68a7      	ldr	r7, [r4, #8]
 80016aa:	69bf      	ldr	r7, [r7, #24]
 80016ac:	47b8      	blx	r7
 80016ae:	7466      	strb	r6, [r4, #17]
 80016b0:	2162      	movs	r1, #98	; 0x62
 80016b2:	e009      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 80016b4:	2307      	movs	r3, #7
 80016b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016b8:	1d02      	adds	r2, r0, #4
 80016ba:	2109      	movs	r1, #9
 80016bc:	7c20      	ldrb	r0, [r4, #16]
 80016be:	68a7      	ldr	r7, [r4, #8]
 80016c0:	69bf      	ldr	r7, [r7, #24]
 80016c2:	47b8      	blx	r7
 80016c4:	7466      	strb	r6, [r4, #17]
 80016c6:	214e      	movs	r1, #78	; 0x4e
 80016c8:	e2c7      	b.n	8001c5a <.text_21>
 80016ca:	231a      	movs	r3, #26
 80016cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016ce:	1d02      	adds	r2, r0, #4
 80016d0:	210d      	movs	r1, #13
 80016d2:	e003      	b.n	80016dc <PE_Check_ExtendedMessage+0xfc>
 80016d4:	2309      	movs	r3, #9
 80016d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016d8:	1d02      	adds	r2, r0, #4
 80016da:	2111      	movs	r1, #17
 80016dc:	7c20      	ldrb	r0, [r4, #16]
 80016de:	68a7      	ldr	r7, [r4, #8]
 80016e0:	69bf      	ldr	r7, [r7, #24]
 80016e2:	47b8      	blx	r7
 80016e4:	e063      	b.n	80017ae <PE_Check_ExtendedMessage+0x1ce>
 80016e6:	1ec8      	subs	r0, r1, #3
 80016e8:	2808      	cmp	r0, #8
 80016ea:	d862      	bhi.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <PE_Check_ExtendedMessage+0x114>)
 80016ee:	5c12      	ldrb	r2, [r2, r0]
 80016f0:	4497      	add	pc, r2
 80016f2:	bf00      	nop
 80016f4:	46be280a 	.word	0x46be280a
 80016f8:	669884be 	.word	0x669884be
 80016fc:	006e      	.short	0x006e
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	8900      	ldrh	r0, [r0, #8]
 8001702:	0b00      	lsrs	r0, r0, #12
 8001704:	4228      	tst	r0, r5
 8001706:	d054      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001708:	2301      	movs	r3, #1
 800170a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800170c:	1d02      	adds	r2, r0, #4
 800170e:	2110      	movs	r1, #16
 8001710:	7c20      	ldrb	r0, [r4, #16]
 8001712:	68a5      	ldr	r5, [r4, #8]
 8001714:	69ad      	ldr	r5, [r5, #24]
 8001716:	47a8      	blx	r5
 8001718:	203a      	movs	r0, #58	; 0x3a
 800171a:	e01c      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	8900      	ldrh	r0, [r0, #8]
 8001720:	0b00      	lsrs	r0, r0, #12
 8001722:	4228      	tst	r0, r5
 8001724:	d045      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001726:	2301      	movs	r3, #1
 8001728:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800172a:	1d02      	adds	r2, r0, #4
 800172c:	210e      	movs	r1, #14
 800172e:	7c20      	ldrb	r0, [r4, #16]
 8001730:	68a5      	ldr	r5, [r4, #8]
 8001732:	69ad      	ldr	r5, [r5, #24]
 8001734:	47a8      	blx	r5
 8001736:	203b      	movs	r0, #59	; 0x3b
 8001738:	e00d      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	8900      	ldrh	r0, [r0, #8]
 800173e:	0980      	lsrs	r0, r0, #6
 8001740:	4228      	tst	r0, r5
 8001742:	d036      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001744:	2302      	movs	r3, #2
 8001746:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001748:	1d02      	adds	r2, r0, #4
 800174a:	210c      	movs	r1, #12
 800174c:	7c20      	ldrb	r0, [r4, #16]
 800174e:	68a5      	ldr	r5, [r4, #8]
 8001750:	69ad      	ldr	r5, [r5, #24]
 8001752:	47a8      	blx	r5
 8001754:	203c      	movs	r0, #60	; 0x3c
 8001756:	7460      	strb	r0, [r4, #17]
 8001758:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	8900      	ldrh	r0, [r0, #8]
 800175e:	0a80      	lsrs	r0, r0, #10
 8001760:	e00d      	b.n	800177e <PE_Check_ExtendedMessage+0x19e>
 8001762:	68a0      	ldr	r0, [r4, #8]
 8001764:	6905      	ldr	r5, [r0, #16]
 8001766:	2d00      	cmp	r5, #0
 8001768:	d024      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800176a:	4816      	ldr	r0, [pc, #88]	; (80017c4 <.text_8>)
 800176c:	5a23      	ldrh	r3, [r4, r0]
 800176e:	4816      	ldr	r0, [pc, #88]	; (80017c8 <.text_9>)
 8001770:	1822      	adds	r2, r4, r0
 8001772:	7c20      	ldrb	r0, [r4, #16]
 8001774:	47a8      	blx	r5
 8001776:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	8900      	ldrh	r0, [r0, #8]
 800177c:	0a40      	lsrs	r0, r0, #9
 800177e:	4228      	tst	r0, r5
 8001780:	d017      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001782:	68a0      	ldr	r0, [r4, #8]
 8001784:	6900      	ldr	r0, [r0, #16]
 8001786:	2800      	cmp	r0, #0
 8001788:	d109      	bne.n	800179e <PE_Check_ExtendedMessage+0x1be>
 800178a:	e012      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	8900      	ldrh	r0, [r0, #8]
 8001790:	0a40      	lsrs	r0, r0, #9
 8001792:	4228      	tst	r0, r5
 8001794:	d00e      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 8001796:	68a0      	ldr	r0, [r4, #8]
 8001798:	6900      	ldr	r0, [r0, #16]
 800179a:	2800      	cmp	r0, #0
 800179c:	d00a      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <.text_8>)
 80017a0:	5a23      	ldrh	r3, [r4, r0]
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <.text_9>)
 80017a4:	1822      	adds	r2, r4, r0
 80017a6:	7c20      	ldrb	r0, [r4, #16]
 80017a8:	68a5      	ldr	r5, [r4, #8]
 80017aa:	692d      	ldr	r5, [r5, #16]
 80017ac:	47a8      	blx	r5
 80017ae:	7466      	strb	r6, [r4, #17]
 80017b0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80017b2:	7465      	strb	r5, [r4, #17]
 80017b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080017b8 <.text_5>:
 80017b8:	00000263 	.word	0x00000263

080017bc <.text_6>:
 80017bc:	00000265 	.word	0x00000265

080017c0 <.text_7>:
 80017c0:	0000025a 	.word	0x0000025a

080017c4 <.text_8>:
 80017c4:	0000048e 	.word	0x0000048e

080017c8 <.text_9>:
 80017c8:	00000281 	.word	0x00000281

080017cc <PE_Send_ExtendedMessage>:
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80017d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80017d4:	0004      	movs	r4, r0
 80017d6:	000d      	movs	r5, r1
 80017d8:	4668      	mov	r0, sp
 80017da:	7202      	strb	r2, [r0, #8]
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	6860      	ldr	r0, [r4, #4]
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	04c1      	lsls	r1, r0, #19
 80017e4:	0fc9      	lsrs	r1, r1, #31
 80017e6:	d019      	beq.n	800181c <PE_Send_ExtendedMessage+0x50>
 80017e8:	9601      	str	r6, [sp, #4]
 80017ea:	9700      	str	r7, [sp, #0]
 80017ec:	9b03      	ldr	r3, [sp, #12]
 80017ee:	4668      	mov	r0, sp
 80017f0:	7a00      	ldrb	r0, [r0, #8]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	4302      	orrs	r2, r0
 80017f6:	0029      	movs	r1, r5
 80017f8:	7c20      	ldrb	r0, [r4, #16]
 80017fa:	f003 ffd7 	bl	80057ac <USBPD_PRL_SendMessage>
 80017fe:	2803      	cmp	r0, #3
 8001800:	d0ed      	beq.n	80017de <PE_Send_ExtendedMessage+0x12>
 8001802:	0029      	movs	r1, r5
 8001804:	2810      	cmp	r0, #16
 8001806:	d007      	beq.n	8001818 <PE_Send_ExtendedMessage+0x4c>
 8001808:	aa0b      	add	r2, sp, #44	; 0x2c
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	0003      	movs	r3, r0
 8001810:	2200      	movs	r2, #0
 8001812:	0020      	movs	r0, r4
 8001814:	f000 faca 	bl	8001dac <PE_CheckSendMessageStatus>
 8001818:	b005      	add	sp, #20
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	2011      	movs	r0, #17
 800181e:	7460      	strb	r0, [r4, #17]
 8001820:	2010      	movs	r0, #16
 8001822:	e7f9      	b.n	8001818 <PE_Send_ExtendedMessage+0x4c>

08001824 <PE_SubStateMachine_ExtendedMessages>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	0004      	movs	r4, r0
 800182a:	2702      	movs	r7, #2
 800182c:	4889      	ldr	r0, [pc, #548]	; (8001a54 <.text_12>)
 800182e:	1820      	adds	r0, r4, r0
 8001830:	9000      	str	r0, [sp, #0]
 8001832:	2039      	movs	r0, #57	; 0x39
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	466a      	mov	r2, sp
 8001838:	7211      	strb	r1, [r2, #8]
 800183a:	4a87      	ldr	r2, [pc, #540]	; (8001a58 <.text_13>)
 800183c:	2500      	movs	r5, #0
 800183e:	2603      	movs	r6, #3
 8001840:	7c63      	ldrb	r3, [r4, #17]
 8001842:	2b31      	cmp	r3, #49	; 0x31
 8001844:	d010      	beq.n	8001868 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001846:	2b33      	cmp	r3, #51	; 0x33
 8001848:	d075      	beq.n	8001936 <PE_SubStateMachine_ExtendedMessages+0x112>
 800184a:	2b34      	cmp	r3, #52	; 0x34
 800184c:	d07c      	beq.n	8001948 <PE_SubStateMachine_ExtendedMessages+0x124>
 800184e:	2b35      	cmp	r3, #53	; 0x35
 8001850:	d100      	bne.n	8001854 <PE_SubStateMachine_ExtendedMessages+0x30>
 8001852:	e0a8      	b.n	80019a6 <PE_SubStateMachine_ExtendedMessages+0x182>
 8001854:	2b36      	cmp	r3, #54	; 0x36
 8001856:	d100      	bne.n	800185a <PE_SubStateMachine_ExtendedMessages+0x36>
 8001858:	e0be      	b.n	80019d8 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 800185a:	2b37      	cmp	r3, #55	; 0x37
 800185c:	d100      	bne.n	8001860 <PE_SubStateMachine_ExtendedMessages+0x3c>
 800185e:	e0be      	b.n	80019de <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001860:	2b38      	cmp	r3, #56	; 0x38
 8001862:	d100      	bne.n	8001866 <PE_SubStateMachine_ExtendedMessages+0x42>
 8001864:	e0ef      	b.n	8001a46 <PE_SubStateMachine_ExtendedMessages+0x222>
 8001866:	e0f2      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001868:	487c      	ldr	r0, [pc, #496]	; (8001a5c <.text_14>)
 800186a:	1820      	adds	r0, r4, r0
 800186c:	9004      	str	r0, [sp, #16]
 800186e:	4669      	mov	r1, sp
 8001870:	730d      	strb	r5, [r1, #12]
 8001872:	497b      	ldr	r1, [pc, #492]	; (8001a60 <.text_15>)
 8001874:	5265      	strh	r5, [r4, r1]
 8001876:	7c20      	ldrb	r0, [r4, #16]
 8001878:	f7ff fa64 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800187c:	2801      	cmp	r0, #1
 800187e:	d107      	bne.n	8001890 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001880:	4878      	ldr	r0, [pc, #480]	; (8001a64 <.text_16>)
 8001882:	1820      	adds	r0, r4, r0
 8001884:	7005      	strb	r5, [r0, #0]
 8001886:	7045      	strb	r5, [r0, #1]
 8001888:	4877      	ldr	r0, [pc, #476]	; (8001a68 <.text_17>)
 800188a:	1820      	adds	r0, r4, r0
 800188c:	9004      	str	r0, [sp, #16]
 800188e:	e028      	b.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001890:	4976      	ldr	r1, [pc, #472]	; (8001a6c <.text_18>)
 8001892:	1861      	adds	r1, r4, r1
 8001894:	72cd      	strb	r5, [r1, #11]
 8001896:	4975      	ldr	r1, [pc, #468]	; (8001a6c <.text_18>)
 8001898:	1861      	adds	r1, r4, r1
 800189a:	730d      	strb	r5, [r1, #12]
 800189c:	7c20      	ldrb	r0, [r4, #16]
 800189e:	f7ff fa51 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d106      	bne.n	80018b4 <PE_SubStateMachine_ExtendedMessages+0x90>
 80018a6:	4871      	ldr	r0, [pc, #452]	; (8001a6c <.text_18>)
 80018a8:	1820      	adds	r0, r4, r0
 80018aa:	7b01      	ldrb	r1, [r0, #12]
 80018ac:	466a      	mov	r2, sp
 80018ae:	7a12      	ldrb	r2, [r2, #8]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	7302      	strb	r2, [r0, #12]
 80018b4:	486a      	ldr	r0, [pc, #424]	; (8001a60 <.text_15>)
 80018b6:	1820      	adds	r0, r4, r0
 80018b8:	8841      	ldrh	r1, [r0, #2]
 80018ba:	291b      	cmp	r1, #27
 80018bc:	d30e      	bcc.n	80018dc <PE_SubStateMachine_ExtendedMessages+0xb8>
 80018be:	486a      	ldr	r0, [pc, #424]	; (8001a68 <.text_17>)
 80018c0:	1820      	adds	r0, r4, r0
 80018c2:	5d40      	ldrb	r0, [r0, r5]
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	5548      	strb	r0, [r1, r5]
 80018c8:	1c6d      	adds	r5, r5, #1
 80018ca:	2d1a      	cmp	r5, #26
 80018cc:	d209      	bcs.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 80018ce:	e7f6      	b.n	80018be <PE_SubStateMachine_ExtendedMessages+0x9a>
 80018d0:	4965      	ldr	r1, [pc, #404]	; (8001a68 <.text_17>)
 80018d2:	1861      	adds	r1, r4, r1
 80018d4:	5d49      	ldrb	r1, [r1, r5]
 80018d6:	9a00      	ldr	r2, [sp, #0]
 80018d8:	5551      	strb	r1, [r2, r5]
 80018da:	1c6d      	adds	r5, r5, #1
 80018dc:	8841      	ldrh	r1, [r0, #2]
 80018de:	428d      	cmp	r5, r1
 80018e0:	d3f6      	bcc.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0xac>
 80018e2:	2001      	movs	r0, #1
 80018e4:	6961      	ldr	r1, [r4, #20]
 80018e6:	0949      	lsrs	r1, r1, #5
 80018e8:	4001      	ands	r1, r0
 80018ea:	d00a      	beq.n	8001902 <PE_SubStateMachine_ExtendedMessages+0xde>
 80018ec:	6861      	ldr	r1, [r4, #4]
 80018ee:	6809      	ldr	r1, [r1, #0]
 80018f0:	0889      	lsrs	r1, r1, #2
 80018f2:	4001      	ands	r1, r0
 80018f4:	d002      	beq.n	80018fc <PE_SubStateMachine_ExtendedMessages+0xd8>
 80018f6:	4669      	mov	r1, sp
 80018f8:	7308      	strb	r0, [r1, #12]
 80018fa:	e001      	b.n	8001900 <PE_SubStateMachine_ExtendedMessages+0xdc>
 80018fc:	4669      	mov	r1, sp
 80018fe:	730f      	strb	r7, [r1, #12]
 8001900:	2633      	movs	r6, #51	; 0x33
 8001902:	4668      	mov	r0, sp
 8001904:	7b00      	ldrb	r0, [r0, #12]
 8001906:	9002      	str	r0, [sp, #8]
 8001908:	9601      	str	r6, [sp, #4]
 800190a:	4855      	ldr	r0, [pc, #340]	; (8001a60 <.text_15>)
 800190c:	1820      	adds	r0, r4, r0
 800190e:	8840      	ldrh	r0, [r0, #2]
 8001910:	1d00      	adds	r0, r0, #4
 8001912:	b280      	uxth	r0, r0
 8001914:	9000      	str	r0, [sp, #0]
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	4854      	ldr	r0, [pc, #336]	; (8001a6c <.text_18>)
 800191a:	1820      	adds	r0, r4, r0
 800191c:	78c2      	ldrb	r2, [r0, #3]
 800191e:	2033      	movs	r0, #51	; 0x33
 8001920:	5c21      	ldrb	r1, [r4, r0]
 8001922:	0020      	movs	r0, r4
 8001924:	f7ff ff52 	bl	80017cc <PE_Send_ExtendedMessage>
 8001928:	2800      	cmp	r0, #0
 800192a:	d103      	bne.n	8001934 <PE_SubStateMachine_ExtendedMessages+0x110>
 800192c:	484f      	ldr	r0, [pc, #316]	; (8001a6c <.text_18>)
 800192e:	1820      	adds	r0, r4, r0
 8001930:	7940      	ldrb	r0, [r0, #5]
 8001932:	7720      	strb	r0, [r4, #28]
 8001934:	e08b      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001936:	83e2      	strh	r2, [r4, #30]
 8001938:	271b      	movs	r7, #27
 800193a:	494c      	ldr	r1, [pc, #304]	; (8001a6c <.text_18>)
 800193c:	1861      	adds	r1, r4, r1
 800193e:	78c9      	ldrb	r1, [r1, #3]
 8001940:	2904      	cmp	r1, #4
 8001942:	d151      	bne.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001944:	2074      	movs	r0, #116	; 0x74
 8001946:	e04f      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001948:	4848      	ldr	r0, [pc, #288]	; (8001a6c <.text_18>)
 800194a:	5a20      	ldrh	r0, [r4, r0]
 800194c:	0440      	lsls	r0, r0, #17
 800194e:	0f02      	lsrs	r2, r0, #28
 8001950:	211a      	movs	r1, #26
 8001952:	4351      	muls	r1, r2
 8001954:	4842      	ldr	r0, [pc, #264]	; (8001a60 <.text_15>)
 8001956:	1820      	adds	r0, r4, r0
 8001958:	8843      	ldrh	r3, [r0, #2]
 800195a:	4299      	cmp	r1, r3
 800195c:	da01      	bge.n	8001962 <PE_SubStateMachine_ExtendedMessages+0x13e>
 800195e:	2a0a      	cmp	r2, #10
 8001960:	d301      	bcc.n	8001966 <PE_SubStateMachine_ExtendedMessages+0x142>
 8001962:	7466      	strb	r6, [r4, #17]
 8001964:	e01d      	b.n	80019a2 <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001966:	1a5a      	subs	r2, r3, r1
 8001968:	2a1a      	cmp	r2, #26
 800196a:	d202      	bcs.n	8001972 <PE_SubStateMachine_ExtendedMessages+0x14e>
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e000      	b.n	8001974 <PE_SubStateMachine_ExtendedMessages+0x150>
 8001972:	231a      	movs	r3, #26
 8001974:	2200      	movs	r2, #0
 8001976:	e006      	b.n	8001986 <PE_SubStateMachine_ExtendedMessages+0x162>
 8001978:	4e3b      	ldr	r6, [pc, #236]	; (8001a68 <.text_17>)
 800197a:	19a6      	adds	r6, r4, r6
 800197c:	188f      	adds	r7, r1, r2
 800197e:	5df6      	ldrb	r6, [r6, r7]
 8001980:	9f00      	ldr	r7, [sp, #0]
 8001982:	54be      	strb	r6, [r7, r2]
 8001984:	1c52      	adds	r2, r2, #1
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f6      	bcc.n	8001978 <PE_SubStateMachine_ExtendedMessages+0x154>
 800198a:	4934      	ldr	r1, [pc, #208]	; (8001a5c <.text_14>)
 800198c:	1863      	adds	r3, r4, r1
 800198e:	8842      	ldrh	r2, [r0, #2]
 8001990:	4836      	ldr	r0, [pc, #216]	; (8001a6c <.text_18>)
 8001992:	5a20      	ldrh	r0, [r4, r0]
 8001994:	0440      	lsls	r0, r0, #17
 8001996:	0f01      	lsrs	r1, r0, #28
 8001998:	7c20      	ldrb	r0, [r4, #16]
 800199a:	f004 fba8 	bl	80060ee <USBPD_PRL_PrepareExtendedTxChunkSending>
 800199e:	2035      	movs	r0, #53	; 0x35
 80019a0:	7460      	strb	r0, [r4, #17]
 80019a2:	2700      	movs	r7, #0
 80019a4:	e053      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019a6:	6960      	ldr	r0, [r4, #20]
 80019a8:	0681      	lsls	r1, r0, #26
 80019aa:	0fc9      	lsrs	r1, r1, #31
 80019ac:	d001      	beq.n	80019b2 <PE_SubStateMachine_ExtendedMessages+0x18e>
 80019ae:	2036      	movs	r0, #54	; 0x36
 80019b0:	e000      	b.n	80019b4 <PE_SubStateMachine_ExtendedMessages+0x190>
 80019b2:	2003      	movs	r0, #3
 80019b4:	492a      	ldr	r1, [pc, #168]	; (8001a60 <.text_15>)
 80019b6:	1866      	adds	r6, r4, r1
 80019b8:	9502      	str	r5, [sp, #8]
 80019ba:	9001      	str	r0, [sp, #4]
 80019bc:	8870      	ldrh	r0, [r6, #2]
 80019be:	9000      	str	r0, [sp, #0]
 80019c0:	4826      	ldr	r0, [pc, #152]	; (8001a5c <.text_14>)
 80019c2:	1823      	adds	r3, r4, r0
 80019c4:	3809      	subs	r0, #9
 80019c6:	1820      	adds	r0, r4, r0
 80019c8:	78c2      	ldrb	r2, [r0, #3]
 80019ca:	2030      	movs	r0, #48	; 0x30
 80019cc:	5c21      	ldrb	r1, [r4, r0]
 80019ce:	0020      	movs	r0, r4
 80019d0:	f7ff fefc 	bl	80017cc <PE_Send_ExtendedMessage>
 80019d4:	8035      	strh	r5, [r6, #0]
 80019d6:	e03a      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019d8:	83e2      	strh	r2, [r4, #30]
 80019da:	271b      	movs	r7, #27
 80019dc:	e004      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 80019de:	8be0      	ldrh	r0, [r4, #30]
 80019e0:	020b      	lsls	r3, r1, #8
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d102      	bne.n	80019ec <PE_SubStateMachine_ExtendedMessages+0x1c8>
 80019e6:	200f      	movs	r0, #15
 80019e8:	7460      	strb	r0, [r4, #17]
 80019ea:	e030      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019ec:	83e2      	strh	r2, [r4, #30]
 80019ee:	271b      	movs	r7, #27
 80019f0:	481a      	ldr	r0, [pc, #104]	; (8001a5c <.text_14>)
 80019f2:	1825      	adds	r5, r4, r0
 80019f4:	0029      	movs	r1, r5
 80019f6:	7c20      	ldrb	r0, [r4, #16]
 80019f8:	f004 fba1 	bl	800613e <USBPD_PRL_PrepareChunkRequest>
 80019fc:	6860      	ldr	r0, [r4, #4]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	04c1      	lsls	r1, r0, #19
 8001a02:	0fc9      	lsrs	r1, r1, #31
 8001a04:	d012      	beq.n	8001a2c <PE_SubStateMachine_ExtendedMessages+0x208>
 8001a06:	2000      	movs	r0, #0
 8001a08:	9001      	str	r0, [sp, #4]
 8001a0a:	2006      	movs	r0, #6
 8001a0c:	9000      	str	r0, [sp, #0]
 8001a0e:	002b      	movs	r3, r5
 8001a10:	4816      	ldr	r0, [pc, #88]	; (8001a6c <.text_18>)
 8001a12:	1820      	adds	r0, r4, r0
 8001a14:	7880      	ldrb	r0, [r0, #2]
 8001a16:	4669      	mov	r1, sp
 8001a18:	7a0a      	ldrb	r2, [r1, #8]
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	2030      	movs	r0, #48	; 0x30
 8001a1e:	5c21      	ldrb	r1, [r4, r0]
 8001a20:	7c20      	ldrb	r0, [r4, #16]
 8001a22:	f003 fec3 	bl	80057ac <USBPD_PRL_SendMessage>
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d0e8      	beq.n	80019fc <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001a2a:	e002      	b.n	8001a32 <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	7460      	strb	r0, [r4, #17]
 8001a30:	2010      	movs	r0, #16
 8001a32:	2139      	movs	r1, #57	; 0x39
 8001a34:	9100      	str	r1, [sp, #0]
 8001a36:	0003      	movs	r3, r0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2030      	movs	r0, #48	; 0x30
 8001a3c:	5c21      	ldrb	r1, [r4, r0]
 8001a3e:	0020      	movs	r0, r4
 8001a40:	f000 f9b4 	bl	8001dac <PE_CheckSendMessageStatus>
 8001a44:	e003      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a46:	7466      	strb	r6, [r4, #17]
 8001a48:	2700      	movs	r7, #0
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <.text_15>)
 8001a4c:	5225      	strh	r5, [r4, r0]
 8001a4e:	0038      	movs	r0, r7
 8001a50:	b005      	add	sp, #20
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a54 <.text_12>:
 8001a54:	00000267 	.word	0x00000267

08001a58 <.text_13>:
 8001a58:	0000801b 	.word	0x0000801b

08001a5c <.text_14>:
 8001a5c:	00000263 	.word	0x00000263

08001a60 <.text_15>:
 8001a60:	0000048e 	.word	0x0000048e

08001a64 <.text_16>:
 8001a64:	00000387 	.word	0x00000387

08001a68 <.text_17>:
 8001a68:	00000385 	.word	0x00000385

08001a6c <.text_18>:
 8001a6c:	0000025a 	.word	0x0000025a

08001a70 <PE_ManageRXEvent>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	2130      	movs	r1, #48	; 0x30
 8001a74:	5c41      	ldrb	r1, [r0, r1]
 8001a76:	2231      	movs	r2, #49	; 0x31
 8001a78:	5481      	strb	r1, [r0, r2]
 8001a7a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8001a7c:	0bca      	lsrs	r2, r1, #15
 8001a7e:	d002      	beq.n	8001a86 <PE_ManageRXEvent+0x16>
 8001a80:	f7ff fdae 	bl	80015e0 <PE_Check_ExtendedMessage>
 8001a84:	bd01      	pop	{r0, pc}
 8001a86:	22f0      	movs	r2, #240	; 0xf0
 8001a88:	0212      	lsls	r2, r2, #8
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	d102      	bne.n	8001a94 <PE_ManageRXEvent+0x24>
 8001a8e:	f000 f805 	bl	8001a9c <PE_Check_ControlMessage>
 8001a92:	bd01      	pop	{r0, pc}
 8001a94:	f000 f8e5 	bl	8001c62 <PE_Check_DataMessage>
 8001a98:	bd01      	pop	{r0, pc}
	...

08001a9c <PE_Check_ControlMessage>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	272a      	movs	r7, #42	; 0x2a
 8001aa2:	2603      	movs	r6, #3
 8001aa4:	2501      	movs	r5, #1
 8001aa6:	200b      	movs	r0, #11
 8001aa8:	2134      	movs	r1, #52	; 0x34
 8001aaa:	5c61      	ldrb	r1, [r4, r1]
 8001aac:	06c9      	lsls	r1, r1, #27
 8001aae:	0ec9      	lsrs	r1, r1, #27
 8001ab0:	1e49      	subs	r1, r1, #1
 8001ab2:	2917      	cmp	r1, #23
 8001ab4:	d900      	bls.n	8001ab8 <PE_Check_ControlMessage+0x1c>
 8001ab6:	e0c7      	b.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <PE_Check_ControlMessage+0x24>)
 8001aba:	5c52      	ldrb	r2, [r2, r1]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	4497      	add	pc, r2
 8001ac0:	c0c00bcb 	.word	0xc0c00bcb
 8001ac4:	5b22c020 	.word	0x5b22c020
 8001ac8:	c0413449 	.word	0xc0413449
 8001acc:	bec3c319 	.word	0xbec3c319
 8001ad0:	9fb7936f 	.word	0x9fb7936f
 8001ad4:	bac383b0 	.word	0xbac383b0
 8001ad8:	6860      	ldr	r0, [r4, #4]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	0880      	lsrs	r0, r0, #2
 8001ade:	4005      	ands	r5, r0
 8001ae0:	d000      	beq.n	8001ae4 <PE_Check_ControlMessage+0x48>
 8001ae2:	e0b9      	b.n	8001c58 <PE_Check_ControlMessage+0x1bc>
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	7720      	strb	r0, [r4, #28]
 8001ae8:	212b      	movs	r1, #43	; 0x2b
 8001aea:	7c20      	ldrb	r0, [r4, #16]
 8001aec:	f7fe fcc8 	bl	8000480 <USBPD_PE_Notification>
 8001af0:	2098      	movs	r0, #152	; 0x98
 8001af2:	e0a7      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001af4:	7726      	strb	r6, [r4, #28]
 8001af6:	2132      	movs	r1, #50	; 0x32
 8001af8:	7c20      	ldrb	r0, [r4, #16]
 8001afa:	f7fe fcc1 	bl	8000480 <USBPD_PE_Notification>
 8001afe:	2010      	movs	r0, #16
 8001b00:	e0a0      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b02:	2133      	movs	r1, #51	; 0x33
 8001b04:	e09c      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001b06:	2006      	movs	r0, #6
 8001b08:	7720      	strb	r0, [r4, #28]
 8001b0a:	6860      	ldr	r0, [r4, #4]
 8001b0c:	6800      	ldr	r0, [r0, #0]
 8001b0e:	0881      	lsrs	r1, r0, #2
 8001b10:	4029      	ands	r1, r5
 8001b12:	d104      	bne.n	8001b1e <PE_Check_ControlMessage+0x82>
 8001b14:	6821      	ldr	r1, [r4, #0]
 8001b16:	6849      	ldr	r1, [r1, #4]
 8001b18:	08c9      	lsrs	r1, r1, #3
 8001b1a:	4029      	ands	r1, r5
 8001b1c:	d039      	beq.n	8001b92 <PE_Check_ControlMessage+0xf6>
 8001b1e:	210c      	movs	r1, #12
 8001b20:	7c20      	ldrb	r0, [r4, #16]
 8001b22:	f7fe fcad 	bl	8000480 <USBPD_PE_Notification>
 8001b26:	204c      	movs	r0, #76	; 0x4c
 8001b28:	e08c      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	6840      	ldr	r0, [r0, #4]
 8001b2e:	08c0      	lsrs	r0, r0, #3
 8001b30:	4028      	ands	r0, r5
 8001b32:	d00a      	beq.n	8001b4a <PE_Check_ControlMessage+0xae>
 8001b34:	2008      	movs	r0, #8
 8001b36:	7720      	strb	r0, [r4, #28]
 8001b38:	213c      	movs	r1, #60	; 0x3c
 8001b3a:	7c20      	ldrb	r0, [r4, #16]
 8001b3c:	f7fe fca0 	bl	8000480 <USBPD_PE_Notification>
 8001b40:	2022      	movs	r0, #34	; 0x22
 8001b42:	e07f      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b44:	68a0      	ldr	r0, [r4, #8]
 8001b46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d07d      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b4c:	2011      	movs	r0, #17
 8001b4e:	7720      	strb	r0, [r4, #28]
 8001b50:	209d      	movs	r0, #157	; 0x9d
 8001b52:	e077      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b54:	2123      	movs	r1, #35	; 0x23
 8001b56:	7c20      	ldrb	r0, [r4, #16]
 8001b58:	f7fe fc92 	bl	8000480 <USBPD_PE_Notification>
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	05c0      	lsls	r0, r0, #23
 8001b60:	0f40      	lsrs	r0, r0, #29
 8001b62:	d001      	beq.n	8001b68 <PE_Check_ControlMessage+0xcc>
 8001b64:	200f      	movs	r0, #15
 8001b66:	e06d      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b68:	68a0      	ldr	r0, [r4, #8]
 8001b6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d06b      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b70:	2010      	movs	r0, #16
 8001b72:	7720      	strb	r0, [r4, #28]
 8001b74:	2093      	movs	r0, #147	; 0x93
 8001b76:	e065      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b78:	6860      	ldr	r0, [r4, #4]
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	0541      	lsls	r1, r0, #21
 8001b7e:	0f49      	lsrs	r1, r1, #29
 8001b80:	2903      	cmp	r1, #3
 8001b82:	d163      	bne.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b84:	0881      	lsrs	r1, r0, #2
 8001b86:	4029      	ands	r1, r5
 8001b88:	d004      	beq.n	8001b94 <PE_Check_ControlMessage+0xf8>
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	6849      	ldr	r1, [r1, #4]
 8001b8e:	08c9      	lsrs	r1, r1, #3
 8001b90:	4029      	ands	r1, r5
 8001b92:	d05b      	beq.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b94:	2007      	movs	r0, #7
 8001b96:	7720      	strb	r0, [r4, #28]
 8001b98:	201d      	movs	r0, #29
 8001b9a:	7460      	strb	r0, [r4, #17]
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	e04f      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	8901      	ldrh	r1, [r0, #8]
 8001ba4:	08c9      	lsrs	r1, r1, #3
 8001ba6:	4229      	tst	r1, r5
 8001ba8:	d053      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001baa:	6861      	ldr	r1, [r4, #4]
 8001bac:	6809      	ldr	r1, [r1, #0]
 8001bae:	0889      	lsrs	r1, r1, #2
 8001bb0:	4029      	ands	r1, r5
 8001bb2:	d103      	bne.n	8001bbc <PE_Check_ControlMessage+0x120>
 8001bb4:	6840      	ldr	r0, [r0, #4]
 8001bb6:	08c0      	lsrs	r0, r0, #3
 8001bb8:	4028      	ands	r0, r5
 8001bba:	d04a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	7720      	strb	r0, [r4, #28]
 8001bc0:	2063      	movs	r0, #99	; 0x63
 8001bc2:	7460      	strb	r0, [r4, #17]
 8001bc4:	2146      	movs	r1, #70	; 0x46
 8001bc6:	e03b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001bc8:	6860      	ldr	r0, [r4, #4]
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	0880      	lsrs	r0, r0, #2
 8001bce:	4028      	ands	r0, r5
 8001bd0:	d004      	beq.n	8001bdc <PE_Check_ControlMessage+0x140>
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	6840      	ldr	r0, [r0, #4]
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4028      	ands	r0, r5
 8001bda:	d03a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bdc:	205f      	movs	r0, #95	; 0x5f
 8001bde:	7720      	strb	r0, [r4, #28]
 8001be0:	2064      	movs	r0, #100	; 0x64
 8001be2:	7460      	strb	r0, [r4, #17]
 8001be4:	2160      	movs	r1, #96	; 0x60
 8001be6:	e02b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	8909      	ldrh	r1, [r1, #8]
 8001bec:	0949      	lsrs	r1, r1, #5
 8001bee:	4229      	tst	r1, r5
 8001bf0:	d02f      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bf2:	7720      	strb	r0, [r4, #28]
 8001bf4:	214d      	movs	r1, #77	; 0x4d
 8001bf6:	7c20      	ldrb	r0, [r4, #16]
 8001bf8:	f7fe fc42 	bl	8000480 <USBPD_PE_Notification>
 8001bfc:	2030      	movs	r0, #48	; 0x30
 8001bfe:	e021      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c00:	6821      	ldr	r1, [r4, #0]
 8001c02:	8909      	ldrh	r1, [r1, #8]
 8001c04:	0889      	lsrs	r1, r1, #2
 8001c06:	4229      	tst	r1, r5
 8001c08:	d023      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c0a:	7720      	strb	r0, [r4, #28]
 8001c0c:	2149      	movs	r1, #73	; 0x49
 8001c0e:	7c20      	ldrb	r0, [r4, #16]
 8001c10:	f7fe fc36 	bl	8000480 <USBPD_PE_Notification>
 8001c14:	6860      	ldr	r0, [r4, #4]
 8001c16:	6800      	ldr	r0, [r0, #0]
 8001c18:	0880      	lsrs	r0, r0, #2
 8001c1a:	4005      	ands	r5, r0
 8001c1c:	d011      	beq.n	8001c42 <PE_Check_ControlMessage+0x1a6>
 8001c1e:	202d      	movs	r0, #45	; 0x2d
 8001c20:	e010      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	8900      	ldrh	r0, [r0, #8]
 8001c26:	09c0      	lsrs	r0, r0, #7
 8001c28:	4228      	tst	r0, r5
 8001c2a:	d012      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c2c:	202f      	movs	r0, #47	; 0x2f
 8001c2e:	e009      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c30:	2009      	movs	r0, #9
 8001c32:	7720      	strb	r0, [r4, #28]
 8001c34:	e00d      	b.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c36:	200f      	movs	r0, #15
 8001c38:	7720      	strb	r0, [r4, #28]
 8001c3a:	204b      	movs	r0, #75	; 0x4b
 8001c3c:	e002      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c3e:	2159      	movs	r1, #89	; 0x59
 8001c40:	e00b      	b.n	8001c5a <.text_21>
 8001c42:	2011      	movs	r0, #17
 8001c44:	7460      	strb	r0, [r4, #17]
 8001c46:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c48:	6860      	ldr	r0, [r4, #4]
 8001c4a:	6800      	ldr	r0, [r0, #0]
 8001c4c:	4006      	ands	r6, r0
 8001c4e:	2e02      	cmp	r6, #2
 8001c50:	d101      	bne.n	8001c56 <PE_Check_ControlMessage+0x1ba>
 8001c52:	7465      	strb	r5, [r4, #17]
 8001c54:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c56:	7467      	strb	r7, [r4, #17]
 8001c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c5a <.text_21>:
 8001c5a:	7c20      	ldrb	r0, [r4, #16]
 8001c5c:	f7fe fc10 	bl	8000480 <USBPD_PE_Notification>
 8001c60:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c62 <PE_Check_DataMessage>:
 8001c62:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001c64:	0004      	movs	r4, r0
 8001c66:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001c68:	2501      	movs	r5, #1
 8001c6a:	2603      	movs	r6, #3
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	06c1      	lsls	r1, r0, #27
 8001c70:	0ec9      	lsrs	r1, r1, #27
 8001c72:	2901      	cmp	r1, #1
 8001c74:	d029      	beq.n	8001cca <PE_Check_DataMessage+0x68>
 8001c76:	2902      	cmp	r1, #2
 8001c78:	d00b      	beq.n	8001c92 <PE_Check_DataMessage+0x30>
 8001c7a:	2903      	cmp	r1, #3
 8001c7c:	d03d      	beq.n	8001cfa <PE_Check_DataMessage+0x98>
 8001c7e:	2906      	cmp	r1, #6
 8001c80:	d079      	beq.n	8001d76 <PE_Check_DataMessage+0x114>
 8001c82:	2907      	cmp	r1, #7
 8001c84:	d100      	bne.n	8001c88 <PE_Check_DataMessage+0x26>
 8001c86:	e085      	b.n	8001d94 <PE_Check_DataMessage+0x132>
 8001c88:	290a      	cmp	r1, #10
 8001c8a:	d078      	beq.n	8001d7e <PE_Check_DataMessage+0x11c>
 8001c8c:	290f      	cmp	r1, #15
 8001c8e:	d06e      	beq.n	8001d6e <PE_Check_DataMessage+0x10c>
 8001c90:	e089      	b.n	8001da6 <PE_Check_DataMessage+0x144>
 8001c92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c94:	7881      	ldrb	r1, [r0, #2]
 8001c96:	78c2      	ldrb	r2, [r0, #3]
 8001c98:	0212      	lsls	r2, r2, #8
 8001c9a:	1889      	adds	r1, r1, r2
 8001c9c:	7902      	ldrb	r2, [r0, #4]
 8001c9e:	0412      	lsls	r2, r2, #16
 8001ca0:	1889      	adds	r1, r1, r2
 8001ca2:	7940      	ldrb	r0, [r0, #5]
 8001ca4:	0600      	lsls	r0, r0, #24
 8001ca6:	1808      	adds	r0, r1, r0
 8001ca8:	9000      	str	r0, [sp, #0]
 8001caa:	6860      	ldr	r0, [r4, #4]
 8001cac:	6800      	ldr	r0, [r0, #0]
 8001cae:	0880      	lsrs	r0, r0, #2
 8001cb0:	4028      	ands	r0, r5
 8001cb2:	d07a      	beq.n	8001daa <PE_Check_DataMessage+0x148>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	466a      	mov	r2, sp
 8001cb8:	2106      	movs	r1, #6
 8001cba:	7c20      	ldrb	r0, [r4, #16]
 8001cbc:	68a6      	ldr	r6, [r4, #8]
 8001cbe:	69b6      	ldr	r6, [r6, #24]
 8001cc0:	47b0      	blx	r6
 8001cc2:	7725      	strb	r5, [r4, #28]
 8001cc4:	84a7      	strh	r7, [r4, #36]	; 0x24
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	e06e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cca:	6861      	ldr	r1, [r4, #4]
 8001ccc:	6809      	ldr	r1, [r1, #0]
 8001cce:	0889      	lsrs	r1, r1, #2
 8001cd0:	400d      	ands	r5, r1
 8001cd2:	d16a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001cd4:	0980      	lsrs	r0, r0, #6
 8001cd6:	4006      	ands	r6, r0
 8001cd8:	0031      	movs	r1, r6
 8001cda:	7c20      	ldrb	r0, [r4, #16]
 8001cdc:	f7fe ff8a 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8001ce0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001ce2:	0440      	lsls	r0, r0, #17
 8001ce4:	0f40      	lsrs	r0, r0, #29
 8001ce6:	0083      	lsls	r3, r0, #2
 8001ce8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cea:	1c82      	adds	r2, r0, #2
 8001cec:	2104      	movs	r1, #4
 8001cee:	7c20      	ldrb	r0, [r4, #16]
 8001cf0:	68a5      	ldr	r5, [r4, #8]
 8001cf2:	69ad      	ldr	r5, [r5, #24]
 8001cf4:	47a8      	blx	r5
 8001cf6:	2044      	movs	r0, #68	; 0x44
 8001cf8:	e056      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cfa:	9701      	str	r7, [sp, #4]
 8001cfc:	9700      	str	r7, [sp, #0]
 8001cfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d00:	7881      	ldrb	r1, [r0, #2]
 8001d02:	78c2      	ldrb	r2, [r0, #3]
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	1889      	adds	r1, r1, r2
 8001d08:	7902      	ldrb	r2, [r0, #4]
 8001d0a:	0412      	lsls	r2, r2, #16
 8001d0c:	1889      	adds	r1, r1, r2
 8001d0e:	7940      	ldrb	r0, [r0, #5]
 8001d10:	0600      	lsls	r0, r0, #24
 8001d12:	180d      	adds	r5, r1, r0
 8001d14:	466b      	mov	r3, sp
 8001d16:	aa01      	add	r2, sp, #4
 8001d18:	2103      	movs	r1, #3
 8001d1a:	7c20      	ldrb	r0, [r4, #16]
 8001d1c:	68a7      	ldr	r7, [r4, #8]
 8001d1e:	697f      	ldr	r7, [r7, #20]
 8001d20:	47b8      	blx	r7
 8001d22:	2104      	movs	r1, #4
 8001d24:	9800      	ldr	r0, [sp, #0]
 8001d26:	f7ff fb91 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d11d      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d2e:	6860      	ldr	r0, [r4, #4]
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	0540      	lsls	r0, r0, #21
 8001d34:	0f40      	lsrs	r0, r0, #29
 8001d36:	2803      	cmp	r0, #3
 8001d38:	d117      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d3a:	9801      	ldr	r0, [sp, #4]
 8001d3c:	4938      	ldr	r1, [pc, #224]	; (8001e20 <.text_24>)
 8001d3e:	4288      	cmp	r0, r1
 8001d40:	d113      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d42:	0f28      	lsrs	r0, r5, #28
 8001d44:	2805      	cmp	r0, #5
 8001d46:	d00e      	beq.n	8001d66 <PE_Check_DataMessage+0x104>
 8001d48:	2808      	cmp	r0, #8
 8001d4a:	d00a      	beq.n	8001d62 <PE_Check_DataMessage+0x100>
 8001d4c:	2809      	cmp	r0, #9
 8001d4e:	d003      	beq.n	8001d58 <PE_Check_DataMessage+0xf6>
 8001d50:	280a      	cmp	r0, #10
 8001d52:	d12a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001d54:	2166      	movs	r1, #102	; 0x66
 8001d56:	e000      	b.n	8001d5a <PE_Check_DataMessage+0xf8>
 8001d58:	2165      	movs	r1, #101	; 0x65
 8001d5a:	7c20      	ldrb	r0, [r4, #16]
 8001d5c:	f7fe fb90 	bl	8000480 <USBPD_PE_Notification>
 8001d60:	e003      	b.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d62:	2029      	movs	r0, #41	; 0x29
 8001d64:	e020      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d66:	2027      	movs	r0, #39	; 0x27
 8001d68:	e01e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d6a:	7466      	strb	r6, [r4, #17]
 8001d6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f003 fabe 	bl	80052f0 <PE_Check_DataMessageVDM>
 8001d74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	8900      	ldrh	r0, [r0, #8]
 8001d7a:	0900      	lsrs	r0, r0, #4
 8001d7c:	4228      	tst	r0, r5
 8001d7e:	d010      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d80:	2304      	movs	r3, #4
 8001d82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d84:	1c82      	adds	r2, r0, #2
 8001d86:	210b      	movs	r1, #11
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	68a5      	ldr	r5, [r4, #8]
 8001d8c:	69ad      	ldr	r5, [r5, #24]
 8001d8e:	47a8      	blx	r5
 8001d90:	202c      	movs	r0, #44	; 0x2c
 8001d92:	e009      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	8900      	ldrh	r0, [r0, #8]
 8001d98:	0a00      	lsrs	r0, r0, #8
 8001d9a:	4228      	tst	r0, r5
 8001d9c:	d001      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d9e:	203d      	movs	r0, #61	; 0x3d
 8001da0:	e002      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001da2:	7465      	strb	r5, [r4, #17]
 8001da4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001da6:	2011      	movs	r0, #17
 8001da8:	7460      	strb	r0, [r4, #17]
 8001daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001dac <PE_CheckSendMessageStatus>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	000c      	movs	r4, r1
 8001db0:	2110      	movs	r1, #16
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d006      	beq.n	8001dc4 <PE_CheckSendMessageStatus+0x18>
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d00e      	beq.n	8001dd8 <PE_CheckSendMessageStatus+0x2c>
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d011      	beq.n	8001de2 <PE_CheckSendMessageStatus+0x36>
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d008      	beq.n	8001dd4 <PE_CheckSendMessageStatus+0x28>
 8001dc2:	e02a      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dc4:	9902      	ldr	r1, [sp, #8]
 8001dc6:	7441      	strb	r1, [r0, #17]
 8001dc8:	6941      	ldr	r1, [r0, #20]
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <.text_25>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	6142      	str	r2, [r0, #20]
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	e022      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd4:	2109      	movs	r1, #9
 8001dd6:	e020      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd8:	6942      	ldr	r2, [r0, #20]
 8001dda:	024b      	lsls	r3, r1, #9
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	6143      	str	r3, [r0, #20]
 8001de0:	e01b      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d005      	beq.n	8001df2 <PE_CheckSendMessageStatus+0x46>
 8001de6:	2a01      	cmp	r2, #1
 8001de8:	d101      	bne.n	8001dee <PE_CheckSendMessageStatus+0x42>
 8001dea:	2299      	movs	r2, #153	; 0x99
 8001dec:	e014      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001dee:	2107      	movs	r1, #7
 8001df0:	e013      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001df2:	6844      	ldr	r4, [r0, #4]
 8001df4:	6824      	ldr	r4, [r4, #0]
 8001df6:	0a24      	lsrs	r4, r4, #8
 8001df8:	4023      	ands	r3, r4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <PE_CheckSendMessageStatus+0x5a>
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d109      	bne.n	8001e16 <PE_CheckSendMessageStatus+0x6a>
 8001e02:	220f      	movs	r2, #15
 8001e04:	e008      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d1fb      	bne.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e0a:	6882      	ldr	r2, [r0, #8]
 8001e0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d0f7      	beq.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e12:	2292      	movs	r2, #146	; 0x92
 8001e14:	e000      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e16:	2211      	movs	r2, #17
 8001e18:	7442      	strb	r2, [r0, #17]
 8001e1a:	0008      	movs	r0, r1
 8001e1c:	bd10      	pop	{r4, pc}
	...

08001e20 <.text_24>:
 8001e20:	00001388 	.word	0x00001388

08001e24 <.text_25>:
 8001e24:	ffffbfff 	.word	0xffffbfff

08001e28 <USBPD_PE_StateMachine_SNK>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	0004      	movs	r4, r0
 8001e2e:	4828      	ldr	r0, [pc, #160]	; (8001ed0 <USBPD_PE_StateMachine_SNK+0xa8>)
 8001e30:	00a1      	lsls	r1, r4, #2
 8001e32:	5845      	ldr	r5, [r0, r1]
 8001e34:	7c68      	ldrb	r0, [r5, #17]
 8001e36:	2848      	cmp	r0, #72	; 0x48
 8001e38:	d133      	bne.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	f7fe fe72 	bl	8000b24 <PE_Reset_ZI>
 8001e40:	0028      	movs	r0, r5
 8001e42:	f7fe fea5 	bl	8000b90 <PE_Reset_Counter>
 8001e46:	6828      	ldr	r0, [r5, #0]
 8001e48:	7900      	ldrb	r0, [r0, #4]
 8001e4a:	0783      	lsls	r3, r0, #30
 8001e4c:	0f9b      	lsrs	r3, r3, #30
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	7c28      	ldrb	r0, [r5, #16]
 8001e54:	f003 fc35 	bl	80056c2 <USBPD_PRL_SetHeader>
 8001e58:	6868      	ldr	r0, [r5, #4]
 8001e5a:	6801      	ldr	r1, [r0, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4391      	bics	r1, r2
 8001e60:	6001      	str	r1, [r0, #0]
 8001e62:	6868      	ldr	r0, [r5, #4]
 8001e64:	6801      	ldr	r1, [r0, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	4391      	bics	r1, r2
 8001e6a:	682a      	ldr	r2, [r5, #0]
 8001e6c:	7912      	ldrb	r2, [r2, #4]
 8001e6e:	0792      	lsls	r2, r2, #30
 8001e70:	0f92      	lsrs	r2, r2, #30
 8001e72:	430a      	orrs	r2, r1
 8001e74:	6002      	str	r2, [r0, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	7c28      	ldrb	r0, [r5, #16]
 8001e7a:	f003 fc93 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8001e7e:	7c28      	ldrb	r0, [r5, #16]
 8001e80:	f003 fefc 	bl	8005c7c <USBPD_PRL_Reset>
 8001e84:	203e      	movs	r0, #62	; 0x3e
 8001e86:	7468      	strb	r0, [r5, #17]
 8001e88:	7ca9      	ldrb	r1, [r5, #18]
 8001e8a:	293e      	cmp	r1, #62	; 0x3e
 8001e8c:	d009      	beq.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e8e:	74a8      	strb	r0, [r5, #18]
 8001e90:	2000      	movs	r0, #0
 8001e92:	9000      	str	r0, [sp, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	223e      	movs	r2, #62	; 0x3e
 8001e98:	7c29      	ldrb	r1, [r5, #16]
 8001e9a:	2004      	movs	r0, #4
 8001e9c:	4eb1      	ldr	r6, [pc, #708]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001e9e:	6836      	ldr	r6, [r6, #0]
 8001ea0:	47b0      	blx	r6
 8001ea2:	6968      	ldr	r0, [r5, #20]
 8001ea4:	0341      	lsls	r1, r0, #13
 8001ea6:	0fc9      	lsrs	r1, r1, #31
 8001ea8:	d006      	beq.n	8001eb8 <USBPD_PE_StateMachine_SNK+0x90>
 8001eaa:	49af      	ldr	r1, [pc, #700]	; (8002168 <__iar_annotation$$branch+0x8>)
 8001eac:	4001      	ands	r1, r0
 8001eae:	6169      	str	r1, [r5, #20]
 8001eb0:	2164      	movs	r1, #100	; 0x64
 8001eb2:	7c28      	ldrb	r0, [r5, #16]
 8001eb4:	f7fe fae4 	bl	8000480 <USBPD_PE_Notification>
 8001eb8:	0028      	movs	r0, r5
 8001eba:	f7fe fd15 	bl	80008e8 <PE_Get_RxEvent>
 8001ebe:	4669      	mov	r1, sp
 8001ec0:	7308      	strb	r0, [r1, #12]
 8001ec2:	4668      	mov	r0, sp
 8001ec4:	7b00      	ldrb	r0, [r0, #12]
 8001ec6:	2803      	cmp	r0, #3
 8001ec8:	d104      	bne.n	8001ed4 <USBPD_PE_StateMachine_SNK+0xac>
 8001eca:	2001      	movs	r0, #1
 8001ecc:	b00d      	add	sp, #52	; 0x34
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	200002f4 	.word	0x200002f4
 8001ed4:	4668      	mov	r0, sp
 8001ed6:	7344      	strb	r4, [r0, #13]
 8001ed8:	2402      	movs	r4, #2
 8001eda:	6868      	ldr	r0, [r5, #4]
 8001edc:	6800      	ldr	r0, [r0, #0]
 8001ede:	04c1      	lsls	r1, r0, #19
 8001ee0:	0fc9      	lsrs	r1, r1, #31
 8001ee2:	d100      	bne.n	8001ee6 <USBPD_PE_StateMachine_SNK+0xbe>
 8001ee4:	e148      	b.n	8002178 <__iar_annotation$$branch+0x18>
 8001ee6:	6968      	ldr	r0, [r5, #20]
 8001ee8:	0381      	lsls	r1, r0, #14
 8001eea:	0fc9      	lsrs	r1, r1, #31
 8001eec:	d014      	beq.n	8001f18 <USBPD_PE_StateMachine_SNK+0xf0>
 8001eee:	21a7      	movs	r1, #167	; 0xa7
 8001ef0:	7469      	strb	r1, [r5, #17]
 8001ef2:	4a9e      	ldr	r2, [pc, #632]	; (800216c <__iar_annotation$$branch+0xc>)
 8001ef4:	4002      	ands	r2, r0
 8001ef6:	616a      	str	r2, [r5, #20]
 8001ef8:	2000      	movs	r0, #0
 8001efa:	2232      	movs	r2, #50	; 0x32
 8001efc:	54a8      	strb	r0, [r5, r2]
 8001efe:	7ca8      	ldrb	r0, [r5, #18]
 8001f00:	28a7      	cmp	r0, #167	; 0xa7
 8001f02:	d02b      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f04:	74a9      	strb	r1, [r5, #18]
 8001f06:	2000      	movs	r0, #0
 8001f08:	9000      	str	r0, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	22a7      	movs	r2, #167	; 0xa7
 8001f0e:	7c29      	ldrb	r1, [r5, #16]
 8001f10:	2004      	movs	r0, #4
 8001f12:	4e94      	ldr	r6, [pc, #592]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f14:	6836      	ldr	r6, [r6, #0]
 8001f16:	47b0      	blx	r6
 8001f18:	2032      	movs	r0, #50	; 0x32
 8001f1a:	5c28      	ldrb	r0, [r5, r0]
 8001f1c:	280f      	cmp	r0, #15
 8001f1e:	d001      	beq.n	8001f24 <USBPD_PE_StateMachine_SNK+0xfc>
 8001f20:	2814      	cmp	r0, #20
 8001f22:	d11b      	bne.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f24:	4668      	mov	r0, sp
 8001f26:	7b00      	ldrb	r0, [r0, #12]
 8001f28:	2814      	cmp	r0, #20
 8001f2a:	d005      	beq.n	8001f38 <USBPD_PE_StateMachine_SNK+0x110>
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	4669      	mov	r1, sp
 8001f30:	7308      	strb	r0, [r1, #12]
 8001f32:	0028      	movs	r0, r5
 8001f34:	f7fe fd0f 	bl	8000956 <PE_Clear_RxEvent>
 8001f38:	2032      	movs	r0, #50	; 0x32
 8001f3a:	5c2a      	ldrb	r2, [r5, r0]
 8001f3c:	746a      	strb	r2, [r5, #17]
 8001f3e:	2000      	movs	r0, #0
 8001f40:	2132      	movs	r1, #50	; 0x32
 8001f42:	5468      	strb	r0, [r5, r1]
 8001f44:	7ca8      	ldrb	r0, [r5, #18]
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d008      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f4a:	74aa      	strb	r2, [r5, #18]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	9000      	str	r0, [sp, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	7c29      	ldrb	r1, [r5, #16]
 8001f54:	2004      	movs	r0, #4
 8001f56:	4e83      	ldr	r6, [pc, #524]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f58:	6836      	ldr	r6, [r6, #0]
 8001f5a:	47b0      	blx	r6
 8001f5c:	4668      	mov	r0, sp
 8001f5e:	7b00      	ldrb	r0, [r0, #12]
 8001f60:	2811      	cmp	r0, #17
 8001f62:	d11f      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f64:	6868      	ldr	r0, [r5, #4]
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	0701      	lsls	r1, r0, #28
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8001f6e:	0680      	lsls	r0, r0, #26
 8001f70:	0fc2      	lsrs	r2, r0, #31
 8001f72:	4291      	cmp	r1, r2
 8001f74:	d116      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f76:	2014      	movs	r0, #20
 8001f78:	4669      	mov	r1, sp
 8001f7a:	7308      	strb	r0, [r1, #12]
 8001f7c:	0028      	movs	r0, r5
 8001f7e:	f7fe fcea 	bl	8000956 <PE_Clear_RxEvent>
 8001f82:	2092      	movs	r0, #146	; 0x92
 8001f84:	7468      	strb	r0, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	2892      	cmp	r0, #146	; 0x92
 8001f8a:	d100      	bne.n	8001f8e <USBPD_PE_StateMachine_SNK+0x166>
 8001f8c:	e104      	b.n	8002198 <__iar_annotation$$branch+0x38>
 8001f8e:	2092      	movs	r0, #146	; 0x92
 8001f90:	74a8      	strb	r0, [r5, #18]
 8001f92:	2000      	movs	r0, #0
 8001f94:	9000      	str	r0, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	2292      	movs	r2, #146	; 0x92
 8001f9a:	7c29      	ldrb	r1, [r5, #16]
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	4e71      	ldr	r6, [pc, #452]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001fa0:	6836      	ldr	r6, [r6, #0]
 8001fa2:	47b0      	blx	r6
 8001fa4:	7c68      	ldrb	r0, [r5, #17]
 8001fa6:	4669      	mov	r1, sp
 8001fa8:	7008      	strb	r0, [r1, #0]
 8001faa:	4f71      	ldr	r7, [pc, #452]	; (8002170 <__iar_annotation$$branch+0x10>)
 8001fac:	20f0      	movs	r0, #240	; 0xf0
 8001fae:	0200      	lsls	r0, r0, #8
 8001fb0:	4e70      	ldr	r6, [pc, #448]	; (8002174 <__iar_annotation$$branch+0x14>)
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	466a      	mov	r2, sp
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	2a00      	cmp	r2, #0
 8001fba:	d100      	bne.n	8001fbe <USBPD_PE_StateMachine_SNK+0x196>
 8001fbc:	e0e0      	b.n	8002180 <__iar_annotation$$branch+0x20>
 8001fbe:	1e52      	subs	r2, r2, #1
 8001fc0:	d040      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001fc2:	1e92      	subs	r2, r2, #2
 8001fc4:	2a01      	cmp	r2, #1
 8001fc6:	d800      	bhi.n	8001fca <USBPD_PE_StateMachine_SNK+0x1a2>
 8001fc8:	e323      	b.n	8002612 <__iar_annotation$$branch+0x4b2>
 8001fca:	1e92      	subs	r2, r2, #2
 8001fcc:	d100      	bne.n	8001fd0 <USBPD_PE_StateMachine_SNK+0x1a8>
 8001fce:	e1fb      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 8001fd0:	3a0a      	subs	r2, #10
 8001fd2:	d100      	bne.n	8001fd6 <USBPD_PE_StateMachine_SNK+0x1ae>
 8001fd4:	e1fd      	b.n	80023d2 <__iar_annotation$$branch+0x272>
 8001fd6:	1e52      	subs	r2, r2, #1
 8001fd8:	d100      	bne.n	8001fdc <USBPD_PE_StateMachine_SNK+0x1b4>
 8001fda:	e299      	b.n	8002510 <__iar_annotation$$branch+0x3b0>
 8001fdc:	1e52      	subs	r2, r2, #1
 8001fde:	d100      	bne.n	8001fe2 <USBPD_PE_StateMachine_SNK+0x1ba>
 8001fe0:	e2a3      	b.n	800252a <__iar_annotation$$branch+0x3ca>
 8001fe2:	1ed2      	subs	r2, r2, #3
 8001fe4:	d100      	bne.n	8001fe8 <USBPD_PE_StateMachine_SNK+0x1c0>
 8001fe6:	e228      	b.n	800243a <__iar_annotation$$branch+0x2da>
 8001fe8:	1f12      	subs	r2, r2, #4
 8001fea:	2a01      	cmp	r2, #1
 8001fec:	d92a      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 8001fee:	1e92      	subs	r2, r2, #2
 8001ff0:	d100      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x1cc>
 8001ff2:	e2d2      	b.n	800259a <__iar_annotation$$branch+0x43a>
 8001ff4:	1ed2      	subs	r2, r2, #3
 8001ff6:	d025      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001ff8:	1e52      	subs	r2, r2, #1
 8001ffa:	d100      	bne.n	8001ffe <USBPD_PE_StateMachine_SNK+0x1d6>
 8001ffc:	e3c3      	b.n	8002786 <__iar_annotation$$branch+0x626>
 8001ffe:	1f12      	subs	r2, r2, #4
 8002000:	d100      	bne.n	8002004 <USBPD_PE_StateMachine_SNK+0x1dc>
 8002002:	e316      	b.n	8002632 <__iar_annotation$$branch+0x4d2>
 8002004:	1f52      	subs	r2, r2, #5
 8002006:	2a02      	cmp	r2, #2
 8002008:	d91c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800200a:	1ed2      	subs	r2, r2, #3
 800200c:	d100      	bne.n	8002010 <USBPD_PE_StateMachine_SNK+0x1e8>
 800200e:	e2f7      	b.n	8002600 <__iar_annotation$$branch+0x4a0>
 8002010:	1e52      	subs	r2, r2, #1
 8002012:	d101      	bne.n	8002018 <__iar_annotation$$branch+0x4>

08002014 <__iar_annotation$$branch>:
 8002014:	f000 fc39 	bl	800288a <__iar_annotation$$branch+0x72a>
 8002018:	1e52      	subs	r2, r2, #1
 800201a:	d013      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800201c:	1e92      	subs	r2, r2, #2
 800201e:	d101      	bne.n	8002024 <__iar_annotation$$branch+0x4>

08002020 <__iar_annotation$$branch>:
 8002020:	f000 fc80 	bl	8002924 <__iar_annotation$$branch+0x7c4>
 8002024:	1e52      	subs	r2, r2, #1
 8002026:	2a01      	cmp	r2, #1
 8002028:	d90c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800202a:	1e92      	subs	r2, r2, #2
 800202c:	d001      	beq.n	8002032 <__iar_annotation$$branch+0x12>
 800202e:	1e92      	subs	r2, r2, #2
 8002030:	2a05      	cmp	r2, #5
 8002032:	d801      	bhi.n	8002038 <__iar_annotation$$branch+0x4>

08002034 <__iar_annotation$$branch>:
 8002034:	f000 fcbc 	bl	80029b0 <__iar_annotation$$branch+0x850>
 8002038:	1f92      	subs	r2, r2, #6
 800203a:	d101      	bne.n	8002040 <__iar_annotation$$branch+0x4>

0800203c <__iar_annotation$$branch>:
 800203c:	f000 fc86 	bl	800294c <__iar_annotation$$branch+0x7ec>
 8002040:	1e52      	subs	r2, r2, #1
 8002042:	2a03      	cmp	r2, #3
 8002044:	d801      	bhi.n	800204a <__iar_annotation$$branch+0x4>

08002046 <__iar_annotation$$branch>:
 8002046:	f000 fcb7 	bl	80029b8 <__iar_annotation$$branch+0x858>
 800204a:	1f12      	subs	r2, r2, #4
 800204c:	d100      	bne.n	8002050 <__iar_annotation$$branch+0xa>
 800204e:	e0af      	b.n	80021b0 <__iar_annotation$$branch+0x50>
 8002050:	1e92      	subs	r2, r2, #2
 8002052:	d100      	bne.n	8002056 <__iar_annotation$$branch+0x10>
 8002054:	e221      	b.n	800249a <__iar_annotation$$branch+0x33a>
 8002056:	1ed2      	subs	r2, r2, #3
 8002058:	d100      	bne.n	800205c <__iar_annotation$$branch+0x16>
 800205a:	e0c1      	b.n	80021e0 <__iar_annotation$$branch+0x80>
 800205c:	1e52      	subs	r2, r2, #1
 800205e:	d100      	bne.n	8002062 <__iar_annotation$$branch+0x1c>
 8002060:	e100      	b.n	8002264 <__iar_annotation$$branch+0x104>
 8002062:	1e52      	subs	r2, r2, #1
 8002064:	d100      	bne.n	8002068 <__iar_annotation$$branch+0x22>
 8002066:	e10f      	b.n	8002288 <__iar_annotation$$branch+0x128>
 8002068:	1e52      	subs	r2, r2, #1
 800206a:	d100      	bne.n	800206e <__iar_annotation$$branch+0x28>
 800206c:	e128      	b.n	80022c0 <__iar_annotation$$branch+0x160>
 800206e:	1e52      	subs	r2, r2, #1
 8002070:	d100      	bne.n	8002074 <__iar_annotation$$branch+0x2e>
 8002072:	e178      	b.n	8002366 <__iar_annotation$$branch+0x206>
 8002074:	1e92      	subs	r2, r2, #2
 8002076:	d0a6      	beq.n	8001fc6 <USBPD_PE_StateMachine_SNK+0x19e>
 8002078:	1e92      	subs	r2, r2, #2
 800207a:	d0e3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800207c:	1e52      	subs	r2, r2, #1
 800207e:	d101      	bne.n	8002084 <__iar_annotation$$branch+0x4>

08002080 <__iar_annotation$$branch>:
 8002080:	f000 fbe5 	bl	800284e <__iar_annotation$$branch+0x6ee>
 8002084:	1f12      	subs	r2, r2, #4
 8002086:	d100      	bne.n	800208a <__iar_annotation$$branch+0xa>
 8002088:	e26a      	b.n	8002560 <__iar_annotation$$branch+0x400>
 800208a:	1ed2      	subs	r2, r2, #3
 800208c:	d100      	bne.n	8002090 <__iar_annotation$$branch+0x10>
 800208e:	e334      	b.n	80026fa <__iar_annotation$$branch+0x59a>
 8002090:	1f52      	subs	r2, r2, #5
 8002092:	d100      	bne.n	8002096 <__iar_annotation$$branch+0x16>
 8002094:	e388      	b.n	80027a8 <__iar_annotation$$branch+0x648>
 8002096:	1e52      	subs	r2, r2, #1
 8002098:	d100      	bne.n	800209c <__iar_annotation$$branch+0x1c>
 800209a:	e2ff      	b.n	800269c <__iar_annotation$$branch+0x53c>
 800209c:	3a09      	subs	r2, #9
 800209e:	2a02      	cmp	r2, #2
 80020a0:	d9d0      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020a2:	1ed2      	subs	r2, r2, #3
 80020a4:	d101      	bne.n	80020aa <__iar_annotation$$branch+0x4>

080020a6 <__iar_annotation$$branch>:
 80020a6:	f000 fc01 	bl	80028ac <__iar_annotation$$branch+0x74c>
 80020aa:	1e52      	subs	r2, r2, #1
 80020ac:	d101      	bne.n	80020b2 <__iar_annotation$$branch+0x4>

080020ae <__iar_annotation$$branch>:
 80020ae:	f000 fc0f 	bl	80028d0 <__iar_annotation$$branch+0x770>
 80020b2:	1e52      	subs	r2, r2, #1
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	d9c5      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020b8:	3a0d      	subs	r2, #13
 80020ba:	d0c3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020bc:	3a12      	subs	r2, #18
 80020be:	d101      	bne.n	80020c4 <__iar_annotation$$branch+0x4>

080020c0 <__iar_annotation$$branch>:
 80020c0:	f000 fc92 	bl	80029e8 <__iar_annotation$$branch+0x888>
 80020c4:	3a0c      	subs	r2, #12
 80020c6:	d067      	beq.n	8002198 <__iar_annotation$$branch+0x38>
 80020c8:	1e52      	subs	r2, r2, #1
 80020ca:	2a02      	cmp	r2, #2
 80020cc:	d9ba      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020ce:	1f52      	subs	r2, r2, #5
 80020d0:	d100      	bne.n	80020d4 <__iar_annotation$$branch+0x14>
 80020d2:	e271      	b.n	80025b8 <__iar_annotation$$branch+0x458>
 80020d4:	1e52      	subs	r2, r2, #1
 80020d6:	d0b5      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020d8:	1e52      	subs	r2, r2, #1
 80020da:	d100      	bne.n	80020de <__iar_annotation$$branch+0x1e>
 80020dc:	e174      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 80020de:	1e52      	subs	r2, r2, #1
 80020e0:	d100      	bne.n	80020e4 <__iar_annotation$$branch+0x24>
 80020e2:	e1be      	b.n	8002462 <__iar_annotation$$branch+0x302>
 80020e4:	1e52      	subs	r2, r2, #1
 80020e6:	2a08      	cmp	r2, #8
 80020e8:	d801      	bhi.n	80020ee <__iar_annotation$$branch+0x4>

080020ea <__iar_annotation$$branch>:
 80020ea:	f000 fc6a 	bl	80029c2 <__iar_annotation$$branch+0x862>
 80020ee:	3a0b      	subs	r2, #11
 80020f0:	d101      	bne.n	80020f6 <__iar_annotation$$branch+0x4>

080020f2 <__iar_annotation$$branch>:
 80020f2:	f000 fc7f 	bl	80029f4 <__iar_annotation$$branch+0x894>
 80020f6:	a903      	add	r1, sp, #12
 80020f8:	0028      	movs	r0, r5
 80020fa:	f002 f9e3 	bl	80044c4 <PE_StateMachine_VDM>
 80020fe:	0004      	movs	r4, r0
 8002100:	7c6a      	ldrb	r2, [r5, #17]
 8002102:	7ca8      	ldrb	r0, [r5, #18]
 8002104:	4290      	cmp	r0, r2
 8002106:	d008      	beq.n	800211a <__iar_annotation$$branch+0x28>
 8002108:	74aa      	strb	r2, [r5, #18]
 800210a:	2000      	movs	r0, #0
 800210c:	9000      	str	r0, [sp, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	7c29      	ldrb	r1, [r5, #16]
 8002112:	2004      	movs	r0, #4
 8002114:	4e13      	ldr	r6, [pc, #76]	; (8002164 <__iar_annotation$$branch+0x4>)
 8002116:	6836      	ldr	r6, [r6, #0]
 8002118:	47b0      	blx	r6
 800211a:	4e12      	ldr	r6, [pc, #72]	; (8002164 <__iar_annotation$$branch+0x4>)
 800211c:	4668      	mov	r0, sp
 800211e:	7b00      	ldrb	r0, [r0, #12]
 8002120:	2814      	cmp	r0, #20
 8002122:	d101      	bne.n	8002128 <__iar_annotation$$branch+0x4>

08002124 <__iar_annotation$$branch>:
 8002124:	f000 fc73 	bl	8002a0e <__iar_annotation$$branch+0x8ae>
 8002128:	0028      	movs	r0, r5
 800212a:	f7fe fc5b 	bl	80009e4 <PE_Check_AMSConflict>
 800212e:	2815      	cmp	r0, #21
 8002130:	d109      	bne.n	8002146 <__iar_annotation$$branch+0x22>
 8002132:	4668      	mov	r0, sp
 8002134:	7b00      	ldrb	r0, [r0, #12]
 8002136:	2814      	cmp	r0, #20
 8002138:	d005      	beq.n	8002146 <__iar_annotation$$branch+0x22>
 800213a:	2014      	movs	r0, #20
 800213c:	4669      	mov	r1, sp
 800213e:	7308      	strb	r0, [r1, #12]
 8002140:	0028      	movs	r0, r5
 8002142:	f7fe fc08 	bl	8000956 <PE_Clear_RxEvent>
 8002146:	7c6a      	ldrb	r2, [r5, #17]
 8002148:	7ca8      	ldrb	r0, [r5, #18]
 800214a:	4290      	cmp	r0, r2
 800214c:	d007      	beq.n	800215e <__iar_annotation$$branch+0x3a>
 800214e:	74aa      	strb	r2, [r5, #18]
 8002150:	2000      	movs	r0, #0
 8002152:	9000      	str	r0, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	7c29      	ldrb	r1, [r5, #16]
 8002158:	2004      	movs	r0, #4
 800215a:	6834      	ldr	r4, [r6, #0]
 800215c:	47a0      	blx	r4
 800215e:	2400      	movs	r4, #0

08002160 <__iar_annotation$$branch>:
 8002160:	f000 fc74 	bl	8002a4c <__iar_annotation$$branch+0x8ec>
 8002164:	20000000 	.word	0x20000000
 8002168:	fffbffff 	.word	0xfffbffff
 800216c:	fffdffff 	.word	0xfffdffff
 8002170:	000081f4 	.word	0x000081f4
 8002174:	0000801b 	.word	0x0000801b
 8002178:	2400      	movs	r4, #0
 800217a:	43e4      	mvns	r4, r4
 800217c:	0020      	movs	r0, r4
 800217e:	e6a5      	b.n	8001ecc <USBPD_PE_StateMachine_SNK+0xa4>
 8002180:	6868      	ldr	r0, [r5, #4]
 8002182:	6801      	ldr	r1, [r0, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4391      	bics	r1, r2
 8002188:	6001      	str	r1, [r0, #0]
 800218a:	215f      	movs	r1, #95	; 0x5f
 800218c:	7c28      	ldrb	r0, [r5, #16]
 800218e:	f7fe f977 	bl	8000480 <USBPD_PE_Notification>
 8002192:	2400      	movs	r4, #0
 8002194:	43e4      	mvns	r4, r4
 8002196:	e7b3      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002198:	6868      	ldr	r0, [r5, #4]
 800219a:	6801      	ldr	r1, [r0, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4391      	bics	r1, r2
 80021a0:	6001      	str	r1, [r0, #0]
 80021a2:	68a8      	ldr	r0, [r5, #8]
 80021a4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80021a6:	2900      	cmp	r1, #0
 80021a8:	d0f3      	beq.n	8002192 <__iar_annotation$$branch+0x32>
 80021aa:	7c28      	ldrb	r0, [r5, #16]
 80021ac:	4788      	blx	r1
 80021ae:	e7f0      	b.n	8002192 <__iar_annotation$$branch+0x32>
 80021b0:	6868      	ldr	r0, [r5, #4]
 80021b2:	6801      	ldr	r1, [r0, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	0b0b      	lsrs	r3, r1, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0a1      	beq.n	8002100 <__iar_annotation$$branch+0xe>
 80021bc:	078b      	lsls	r3, r1, #30
 80021be:	0f9b      	lsrs	r3, r3, #30
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <__iar_annotation$$branch+0x68>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <__iar_annotation$$branch+0x6a>
 80021c8:	2320      	movs	r3, #32
 80021ca:	2420      	movs	r4, #32
 80021cc:	43a1      	bics	r1, r4
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	772a      	strb	r2, [r5, #28]
 80021d4:	83ef      	strh	r7, [r5, #30]
 80021d6:	24fa      	movs	r4, #250	; 0xfa
 80021d8:	0064      	lsls	r4, r4, #1
 80021da:	2043      	movs	r0, #67	; 0x43
 80021dc:	7468      	strb	r0, [r5, #17]
 80021de:	e78f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80021e0:	4668      	mov	r0, sp
 80021e2:	7b00      	ldrb	r0, [r0, #12]
 80021e4:	2811      	cmp	r0, #17
 80021e6:	d135      	bne.n	8002254 <__iar_annotation$$branch+0xf4>
 80021e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80021ea:	0bc2      	lsrs	r2, r0, #15
 80021ec:	d12c      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021ee:	2607      	movs	r6, #7
 80021f0:	0b02      	lsrs	r2, r0, #12
 80021f2:	4232      	tst	r2, r6
 80021f4:	d028      	beq.n	8002248 <__iar_annotation$$branch+0xe8>
 80021f6:	06c2      	lsls	r2, r0, #27
 80021f8:	0ed2      	lsrs	r2, r2, #27
 80021fa:	2a01      	cmp	r2, #1
 80021fc:	d124      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021fe:	2200      	movs	r2, #0
 8002200:	4bc1      	ldr	r3, [pc, #772]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002202:	18eb      	adds	r3, r5, r3
 8002204:	709a      	strb	r2, [r3, #2]
 8002206:	696a      	ldr	r2, [r5, #20]
 8002208:	4311      	orrs	r1, r2
 800220a:	6169      	str	r1, [r5, #20]
 800220c:	0600      	lsls	r0, r0, #24
 800220e:	0f81      	lsrs	r1, r0, #30
 8002210:	4668      	mov	r0, sp
 8002212:	7b40      	ldrb	r0, [r0, #13]
 8002214:	f7fe fcee 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8002218:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800221a:	0b00      	lsrs	r0, r0, #12
 800221c:	4006      	ands	r6, r0
 800221e:	00b3      	lsls	r3, r6, #2
 8002220:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002222:	1c82      	adds	r2, r0, #2
 8002224:	2104      	movs	r1, #4
 8002226:	7c28      	ldrb	r0, [r5, #16]
 8002228:	68ae      	ldr	r6, [r5, #8]
 800222a:	69b6      	ldr	r6, [r6, #24]
 800222c:	47b0      	blx	r6
 800222e:	2001      	movs	r0, #1
 8002230:	7728      	strb	r0, [r5, #28]
 8002232:	6868      	ldr	r0, [r5, #4]
 8002234:	6801      	ldr	r1, [r0, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	4391      	bics	r1, r2
 800223a:	6001      	str	r1, [r0, #0]
 800223c:	2044      	movs	r0, #68	; 0x44
 800223e:	7468      	strb	r0, [r5, #17]
 8002240:	4668      	mov	r0, sp
 8002242:	7b00      	ldrb	r0, [r0, #12]
 8002244:	2814      	cmp	r0, #20
 8002246:	d005      	beq.n	8002254 <__iar_annotation$$branch+0xf4>
 8002248:	2014      	movs	r0, #20
 800224a:	4669      	mov	r1, sp
 800224c:	7308      	strb	r0, [r1, #12]
 800224e:	0028      	movs	r0, r5
 8002250:	f7fe fb81 	bl	8000956 <PE_Clear_RxEvent>
 8002254:	8be8      	ldrh	r0, [r5, #30]
 8002256:	03a1      	lsls	r1, r4, #14
 8002258:	4288      	cmp	r0, r1
 800225a:	d102      	bne.n	8002262 <__iar_annotation$$branch+0x102>
 800225c:	200f      	movs	r0, #15
 800225e:	7468      	strb	r0, [r5, #17]
 8002260:	2400      	movs	r4, #0
 8002262:	e74d      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002264:	466a      	mov	r2, sp
 8002266:	0029      	movs	r1, r5
 8002268:	3118      	adds	r1, #24
 800226a:	7c28      	ldrb	r0, [r5, #16]
 800226c:	68ab      	ldr	r3, [r5, #8]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4798      	blx	r3
 8002272:	6968      	ldr	r0, [r5, #20]
 8002274:	2118      	movs	r1, #24
 8002276:	4388      	bics	r0, r1
 8002278:	9900      	ldr	r1, [sp, #0]
 800227a:	00c9      	lsls	r1, r1, #3
 800227c:	2218      	movs	r2, #24
 800227e:	400a      	ands	r2, r1
 8002280:	4302      	orrs	r2, r0
 8002282:	616a      	str	r2, [r5, #20]
 8002284:	2045      	movs	r0, #69	; 0x45
 8002286:	e7ea      	b.n	800225e <__iar_annotation$$branch+0xfe>
 8002288:	6968      	ldr	r0, [r5, #20]
 800228a:	0401      	lsls	r1, r0, #16
 800228c:	0fc9      	lsrs	r1, r1, #31
 800228e:	d001      	beq.n	8002294 <__iar_annotation$$branch+0x134>
 8002290:	2002      	movs	r0, #2
 8002292:	e000      	b.n	8002296 <__iar_annotation$$branch+0x136>
 8002294:	2000      	movs	r0, #0
 8002296:	9002      	str	r0, [sp, #8]
 8002298:	2046      	movs	r0, #70	; 0x46
 800229a:	9001      	str	r0, [sp, #4]
 800229c:	2001      	movs	r0, #1
 800229e:	9000      	str	r0, [sp, #0]
 80022a0:	002b      	movs	r3, r5
 80022a2:	3318      	adds	r3, #24
 80022a4:	2202      	movs	r2, #2
 80022a6:	2100      	movs	r1, #0
 80022a8:	0028      	movs	r0, r5
 80022aa:	f7ff f95c 	bl	8001566 <PE_Send_DataMessage>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d105      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 80022b2:	6968      	ldr	r0, [r5, #20]
 80022b4:	4995      	ldr	r1, [pc, #596]	; (800250c <__iar_annotation$$branch+0x3ac>)
 80022b6:	4001      	ands	r1, r0
 80022b8:	6169      	str	r1, [r5, #20]
 80022ba:	83ee      	strh	r6, [r5, #30]
 80022bc:	241b      	movs	r4, #27
 80022be:	e71f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80022c0:	4669      	mov	r1, sp
 80022c2:	7b09      	ldrb	r1, [r1, #12]
 80022c4:	2911      	cmp	r1, #17
 80022c6:	d148      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022c8:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80022ca:	4201      	tst	r1, r0
 80022cc:	d145      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022ce:	20fa      	movs	r0, #250	; 0xfa
 80022d0:	0040      	lsls	r0, r0, #1
 80022d2:	261f      	movs	r6, #31
 80022d4:	221f      	movs	r2, #31
 80022d6:	400a      	ands	r2, r1
 80022d8:	1e92      	subs	r2, r2, #2
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d917      	bls.n	800230e <__iar_annotation$$branch+0x1ae>
 80022de:	1e92      	subs	r2, r2, #2
 80022e0:	d001      	beq.n	80022e6 <__iar_annotation$$branch+0x186>
 80022e2:	3a08      	subs	r2, #8
 80022e4:	d125      	bne.n	8002332 <__iar_annotation$$branch+0x1d2>
 80022e6:	686a      	ldr	r2, [r5, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	0f52      	lsrs	r2, r2, #29
 80022ee:	2a03      	cmp	r2, #3
 80022f0:	d004      	beq.n	80022fc <__iar_annotation$$branch+0x19c>
 80022f2:	2143      	movs	r1, #67	; 0x43
 80022f4:	7469      	strb	r1, [r5, #17]
 80022f6:	83ef      	strh	r7, [r5, #30]
 80022f8:	0004      	movs	r4, r0
 80022fa:	e014      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 80022fc:	4031      	ands	r1, r6
 80022fe:	290c      	cmp	r1, #12
 8002300:	d101      	bne.n	8002306 <__iar_annotation$$branch+0x1a6>
 8002302:	2049      	movs	r0, #73	; 0x49
 8002304:	e000      	b.n	8002308 <__iar_annotation$$branch+0x1a8>
 8002306:	2003      	movs	r0, #3
 8002308:	7468      	strb	r0, [r5, #17]
 800230a:	2400      	movs	r4, #0
 800230c:	e00b      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 800230e:	83ef      	strh	r7, [r5, #30]
 8002310:	0004      	movs	r4, r0
 8002312:	2104      	movs	r1, #4
 8002314:	0028      	movs	r0, r5
 8002316:	f7ff f846 	bl	80013a6 <PE_SetPowerNegotiation>
 800231a:	2047      	movs	r0, #71	; 0x47
 800231c:	7468      	strb	r0, [r5, #17]
 800231e:	4668      	mov	r0, sp
 8002320:	7b00      	ldrb	r0, [r0, #12]
 8002322:	2814      	cmp	r0, #20
 8002324:	d005      	beq.n	8002332 <__iar_annotation$$branch+0x1d2>
 8002326:	2014      	movs	r0, #20
 8002328:	4669      	mov	r1, sp
 800232a:	7308      	strb	r0, [r1, #12]
 800232c:	0028      	movs	r0, r5
 800232e:	f7fe fb12 	bl	8000956 <PE_Clear_RxEvent>
 8002332:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002334:	4006      	ands	r6, r0
 8002336:	2e02      	cmp	r6, #2
 8002338:	d009      	beq.n	800234e <__iar_annotation$$branch+0x1ee>
 800233a:	2e03      	cmp	r6, #3
 800233c:	d009      	beq.n	8002352 <__iar_annotation$$branch+0x1f2>
 800233e:	2e04      	cmp	r6, #4
 8002340:	d003      	beq.n	800234a <__iar_annotation$$branch+0x1ea>
 8002342:	2e0c      	cmp	r6, #12
 8002344:	d109      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002346:	2103      	movs	r1, #3
 8002348:	e004      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234a:	2102      	movs	r1, #2
 800234c:	e002      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234e:	2104      	movs	r1, #4
 8002350:	e000      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 8002352:	2101      	movs	r1, #1
 8002354:	7c28      	ldrb	r0, [r5, #16]
 8002356:	f7fe f893 	bl	8000480 <USBPD_PE_Notification>
 800235a:	8be8      	ldrh	r0, [r5, #30]
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0209      	lsls	r1, r1, #8
 8002360:	4288      	cmp	r0, r1
 8002362:	d1ac      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 8002364:	e77a      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002366:	4668      	mov	r0, sp
 8002368:	7b00      	ldrb	r0, [r0, #12]
 800236a:	2811      	cmp	r0, #17
 800236c:	d1f5      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 800236e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002370:	499f      	ldr	r1, [pc, #636]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002372:	4001      	ands	r1, r0
 8002374:	2906      	cmp	r1, #6
 8002376:	d1f0      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002378:	2014      	movs	r0, #20
 800237a:	4669      	mov	r1, sp
 800237c:	7308      	strb	r0, [r1, #12]
 800237e:	0028      	movs	r0, r5
 8002380:	f7fe fae9 	bl	8000956 <PE_Clear_RxEvent>
 8002384:	2103      	movs	r1, #3
 8002386:	0028      	movs	r0, r5
 8002388:	f7ff f80d 	bl	80013a6 <PE_SetPowerNegotiation>
 800238c:	2110      	movs	r1, #16
 800238e:	7c28      	ldrb	r0, [r5, #16]
 8002390:	f7fe f876 	bl	8000480 <USBPD_PE_Notification>
 8002394:	6868      	ldr	r0, [r5, #4]
 8002396:	6800      	ldr	r0, [r0, #0]
 8002398:	0401      	lsls	r1, r0, #16
 800239a:	0fc9      	lsrs	r1, r1, #31
 800239c:	d002      	beq.n	80023a4 <__iar_annotation$$branch+0x244>
 800239e:	6828      	ldr	r0, [r5, #0]
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	e000      	b.n	80023a6 <__iar_annotation$$branch+0x246>
 80023a4:	2101      	movs	r1, #1
 80023a6:	4668      	mov	r0, sp
 80023a8:	7b40      	ldrb	r0, [r0, #13]
 80023aa:	f003 f9fb 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80023ae:	2000      	movs	r0, #0
 80023b0:	84a8      	strh	r0, [r5, #36]	; 0x24
 80023b2:	2003      	movs	r0, #3
 80023b4:	6969      	ldr	r1, [r5, #20]
 80023b6:	08c9      	lsrs	r1, r1, #3
 80023b8:	4001      	ands	r1, r0
 80023ba:	2903      	cmp	r1, #3
 80023bc:	d101      	bne.n	80023c2 <__iar_annotation$$branch+0x262>
 80023be:	498d      	ldr	r1, [pc, #564]	; (80025f4 <__iar_annotation$$branch+0x494>)
 80023c0:	84a9      	strh	r1, [r5, #36]	; 0x24
 80023c2:	7468      	strb	r0, [r5, #17]
 80023c4:	2400      	movs	r4, #0
 80023c6:	e7c8      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 80023c8:	a903      	add	r1, sp, #12
 80023ca:	0028      	movs	r0, r5
 80023cc:	f001 fbac 	bl	8003b28 <PE_StateMachine_VDMCable>
 80023d0:	e695      	b.n	80020fe <__iar_annotation$$branch+0xc>
 80023d2:	2601      	movs	r6, #1
 80023d4:	6868      	ldr	r0, [r5, #4]
 80023d6:	6800      	ldr	r0, [r0, #0]
 80023d8:	0bc0      	lsrs	r0, r0, #15
 80023da:	4030      	ands	r0, r6
 80023dc:	d006      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023de:	68a8      	ldr	r0, [r5, #8]
 80023e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d002      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023e6:	2100      	movs	r1, #0
 80023e8:	7c28      	ldrb	r0, [r5, #16]
 80023ea:	4790      	blx	r2
 80023ec:	6868      	ldr	r0, [r5, #4]
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4391      	bics	r1, r2
 80023f4:	6001      	str	r1, [r0, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	0028      	movs	r0, r5
 80023fa:	f7fe ffd4 	bl	80013a6 <PE_SetPowerNegotiation>
 80023fe:	4842      	ldr	r0, [pc, #264]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002400:	1829      	adds	r1, r5, r0
 8002402:	7888      	ldrb	r0, [r1, #2]
 8002404:	2803      	cmp	r0, #3
 8002406:	d309      	bcc.n	800241c <__iar_annotation$$branch+0x2bc>
 8002408:	6968      	ldr	r0, [r5, #20]
 800240a:	0880      	lsrs	r0, r0, #2
 800240c:	4006      	ands	r6, r0
 800240e:	d003      	beq.n	8002418 <__iar_annotation$$branch+0x2b8>
 8002410:	68a8      	ldr	r0, [r5, #8]
 8002412:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002414:	2800      	cmp	r0, #0
 8002416:	d171      	bne.n	80024fc <__iar_annotation$$branch+0x39c>
 8002418:	2000      	movs	r0, #0
 800241a:	e6df      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 800241c:	1c40      	adds	r0, r0, #1
 800241e:	7088      	strb	r0, [r1, #2]
 8002420:	2105      	movs	r1, #5
 8002422:	0028      	movs	r0, r5
 8002424:	f7fe fa32 	bl	800088c <PE_Send_RESET>
 8002428:	4873      	ldr	r0, [pc, #460]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800242a:	83e8      	strh	r0, [r5, #30]
 800242c:	2201      	movs	r2, #1
 800242e:	2101      	movs	r1, #1
 8002430:	0028      	movs	r0, r5
 8002432:	f7fe ffaf 	bl	8001394 <PE_CallHardResetCallback>
 8002436:	209b      	movs	r0, #155	; 0x9b
 8002438:	e711      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800243a:	6868      	ldr	r0, [r5, #4]
 800243c:	6800      	ldr	r0, [r0, #0]
 800243e:	0401      	lsls	r1, r0, #16
 8002440:	0fc9      	lsrs	r1, r1, #31
 8002442:	d006      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 8002444:	68a8      	ldr	r0, [r5, #8]
 8002446:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002448:	2a00      	cmp	r2, #0
 800244a:	d002      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 800244c:	2100      	movs	r1, #0
 800244e:	7c28      	ldrb	r0, [r5, #16]
 8002450:	4790      	blx	r2
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	0028      	movs	r0, r5
 8002458:	f7fe ff9c 	bl	8001394 <PE_CallHardResetCallback>
 800245c:	4866      	ldr	r0, [pc, #408]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800245e:	83e8      	strh	r0, [r5, #30]
 8002460:	e7e9      	b.n	8002436 <__iar_annotation$$branch+0x2d6>
 8002462:	2100      	movs	r1, #0
 8002464:	4668      	mov	r0, sp
 8002466:	7b40      	ldrb	r0, [r0, #13]
 8002468:	68aa      	ldr	r2, [r5, #8]
 800246a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800246c:	4790      	blx	r2
 800246e:	2801      	cmp	r0, #1
 8002470:	d10d      	bne.n	800248e <__iar_annotation$$branch+0x32e>
 8002472:	4862      	ldr	r0, [pc, #392]	; (80025fc <__iar_annotation$$branch+0x49c>)
 8002474:	83e8      	strh	r0, [r5, #30]
 8002476:	2169      	movs	r1, #105	; 0x69
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe f800 	bl	8000480 <USBPD_PE_Notification>
 8002480:	2040      	movs	r0, #64	; 0x40
 8002482:	7468      	strb	r0, [r5, #17]
 8002484:	2400      	movs	r4, #0
 8002486:	2113      	movs	r1, #19
 8002488:	7c28      	ldrb	r0, [r5, #16]
 800248a:	f7fd fff9 	bl	8000480 <USBPD_PE_Notification>
 800248e:	8be8      	ldrh	r0, [r5, #30]
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0209      	lsls	r1, r1, #8
 8002494:	4288      	cmp	r0, r1
 8002496:	d135      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002498:	e01e      	b.n	80024d8 <__iar_annotation$$branch+0x378>
 800249a:	2101      	movs	r1, #1
 800249c:	4668      	mov	r0, sp
 800249e:	7b40      	ldrb	r0, [r0, #13]
 80024a0:	68aa      	ldr	r2, [r5, #8]
 80024a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024a4:	4790      	blx	r2
 80024a6:	2801      	cmp	r0, #1
 80024a8:	d111      	bne.n	80024ce <__iar_annotation$$branch+0x36e>
 80024aa:	0028      	movs	r0, r5
 80024ac:	f7fe fb01 	bl	8000ab2 <PE_Reset_HardReset>
 80024b0:	2205      	movs	r2, #5
 80024b2:	2100      	movs	r1, #0
 80024b4:	0028      	movs	r0, r5
 80024b6:	f7fe ff6d 	bl	8001394 <PE_CallHardResetCallback>
 80024ba:	2168      	movs	r1, #104	; 0x68
 80024bc:	4668      	mov	r0, sp
 80024be:	7b40      	ldrb	r0, [r0, #13]
 80024c0:	f7fd ffde 	bl	8000480 <USBPD_PE_Notification>
 80024c4:	83ef      	strh	r7, [r5, #30]
 80024c6:	24fa      	movs	r4, #250	; 0xfa
 80024c8:	0064      	lsls	r4, r4, #1
 80024ca:	2043      	movs	r0, #67	; 0x43
 80024cc:	7468      	strb	r0, [r5, #17]
 80024ce:	8be8      	ldrh	r0, [r5, #30]
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0209      	lsls	r1, r1, #8
 80024d4:	4288      	cmp	r0, r1
 80024d6:	d115      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 80024d8:	2206      	movs	r2, #6
 80024da:	2100      	movs	r1, #0
 80024dc:	0028      	movs	r0, r5
 80024de:	f7fe ff59 	bl	8001394 <PE_CallHardResetCallback>
 80024e2:	4809      	ldr	r0, [pc, #36]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 80024e4:	1828      	adds	r0, r5, r0
 80024e6:	7880      	ldrb	r0, [r0, #2]
 80024e8:	2803      	cmp	r0, #3
 80024ea:	d200      	bcs.n	80024ee <__iar_annotation$$branch+0x38e>
 80024ec:	e6b6      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80024ee:	6968      	ldr	r0, [r5, #20]
 80024f0:	0741      	lsls	r1, r0, #29
 80024f2:	0fc9      	lsrs	r1, r1, #31
 80024f4:	d004      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024f6:	68a8      	ldr	r0, [r5, #8]
 80024f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d000      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024fe:	e0fa      	b.n	80026f6 <__iar_annotation$$branch+0x596>
 8002500:	2400      	movs	r4, #0
 8002502:	746c      	strb	r4, [r5, #17]
 8002504:	e5fc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002506:	bf00      	nop
 8002508:	0000025e 	.word	0x0000025e
 800250c:	ffff7fff 	.word	0xffff7fff
 8002510:	2000      	movs	r0, #0
 8002512:	9000      	str	r0, [sp, #0]
 8002514:	2303      	movs	r3, #3
 8002516:	2203      	movs	r2, #3
 8002518:	2100      	movs	r1, #0
 800251a:	0028      	movs	r0, r5
 800251c:	f7fe fff8 	bl	8001510 <PE_Send_CtrlMessage>
 8002520:	2800      	cmp	r0, #0
 8002522:	d1ef      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002524:	2001      	movs	r0, #1
 8002526:	7728      	strb	r0, [r5, #28]
 8002528:	e654      	b.n	80021d4 <__iar_annotation$$branch+0x74>
 800252a:	6868      	ldr	r0, [r5, #4]
 800252c:	6800      	ldr	r0, [r0, #0]
 800252e:	0540      	lsls	r0, r0, #21
 8002530:	0f40      	lsrs	r0, r0, #29
 8002532:	2804      	cmp	r0, #4
 8002534:	d100      	bne.n	8002538 <__iar_annotation$$branch+0x3d8>
 8002536:	e691      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002538:	2000      	movs	r0, #0
 800253a:	9000      	str	r0, [sp, #0]
 800253c:	2350      	movs	r3, #80	; 0x50
 800253e:	220d      	movs	r2, #13
 8002540:	2031      	movs	r0, #49	; 0x31
 8002542:	5c29      	ldrb	r1, [r5, r0]
 8002544:	0028      	movs	r0, r5
 8002546:	f7fe ffe3 	bl	8001510 <PE_Send_CtrlMessage>
 800254a:	2800      	cmp	r0, #0
 800254c:	d107      	bne.n	800255e <__iar_annotation$$branch+0x3fe>
 800254e:	2003      	movs	r0, #3
 8002550:	7728      	strb	r0, [r5, #28]
 8002552:	83ee      	strh	r6, [r5, #30]
 8002554:	241b      	movs	r4, #27
 8002556:	2130      	movs	r1, #48	; 0x30
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	f7fd ff91 	bl	8000480 <USBPD_PE_Notification>
 800255e:	e5cf      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002560:	4668      	mov	r0, sp
 8002562:	7b00      	ldrb	r0, [r0, #12]
 8002564:	2814      	cmp	r0, #20
 8002566:	d017      	beq.n	8002598 <__iar_annotation$$branch+0x438>
 8002568:	2030      	movs	r0, #48	; 0x30
 800256a:	5c28      	ldrb	r0, [r5, r0]
 800256c:	2131      	movs	r1, #49	; 0x31
 800256e:	5c69      	ldrb	r1, [r5, r1]
 8002570:	4288      	cmp	r0, r1
 8002572:	d111      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 8002574:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002576:	491e      	ldr	r1, [pc, #120]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002578:	4001      	ands	r1, r0
 800257a:	2903      	cmp	r1, #3
 800257c:	d10c      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 800257e:	2001      	movs	r0, #1
 8002580:	7728      	strb	r0, [r5, #28]
 8002582:	83ef      	strh	r7, [r5, #30]
 8002584:	24fa      	movs	r4, #250	; 0xfa
 8002586:	0064      	lsls	r4, r4, #1
 8002588:	2043      	movs	r0, #67	; 0x43
 800258a:	7468      	strb	r0, [r5, #17]
 800258c:	2014      	movs	r0, #20
 800258e:	4669      	mov	r1, sp
 8002590:	7308      	strb	r0, [r1, #12]
 8002592:	0028      	movs	r0, r5
 8002594:	f7fe f9df 	bl	8000956 <PE_Clear_RxEvent>
 8002598:	e6df      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 800259a:	9400      	str	r4, [sp, #0]
 800259c:	2343      	movs	r3, #67	; 0x43
 800259e:	2207      	movs	r2, #7
 80025a0:	2100      	movs	r1, #0
 80025a2:	0028      	movs	r0, r5
 80025a4:	f7fe ffb4 	bl	8001510 <PE_Send_CtrlMessage>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d11f      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ac:	2006      	movs	r0, #6
 80025ae:	7728      	strb	r0, [r5, #28]
 80025b0:	83ee      	strh	r6, [r5, #30]
 80025b2:	241b      	movs	r4, #27
 80025b4:	210b      	movs	r1, #11
 80025b6:	e7cf      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80025b8:	4668      	mov	r0, sp
 80025ba:	7b00      	ldrb	r0, [r0, #12]
 80025bc:	2811      	cmp	r0, #17
 80025be:	d115      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025c0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80025c2:	490b      	ldr	r1, [pc, #44]	; (80025f0 <__iar_annotation$$branch+0x490>)
 80025c4:	4001      	ands	r1, r0
 80025c6:	2906      	cmp	r1, #6
 80025c8:	d110      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	7c28      	ldrb	r0, [r5, #16]
 80025ce:	f7fd ff57 	bl	8000480 <USBPD_PE_Notification>
 80025d2:	2003      	movs	r0, #3
 80025d4:	7468      	strb	r0, [r5, #17]
 80025d6:	2400      	movs	r4, #0
 80025d8:	4668      	mov	r0, sp
 80025da:	7b00      	ldrb	r0, [r0, #12]
 80025dc:	2814      	cmp	r0, #20
 80025de:	d005      	beq.n	80025ec <__iar_annotation$$branch+0x48c>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe f9b5 	bl	8000956 <PE_Clear_RxEvent>
 80025ec:	e588      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80025ee:	bf00      	nop
 80025f0:	0000f01f 	.word	0x0000f01f
 80025f4:	0000a328 	.word	0x0000a328
 80025f8:	000083e8 	.word	0x000083e8
 80025fc:	000088e3 	.word	0x000088e3
 8002600:	2000      	movs	r0, #0
 8002602:	9000      	str	r0, [sp, #0]
 8002604:	2303      	movs	r3, #3
 8002606:	2204      	movs	r2, #4
 8002608:	2100      	movs	r1, #0
 800260a:	0028      	movs	r0, r5
 800260c:	f7fe ff80 	bl	8001510 <PE_Send_CtrlMessage>
 8002610:	e576      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002612:	4668      	mov	r0, sp
 8002614:	7800      	ldrb	r0, [r0, #0]
 8002616:	2804      	cmp	r0, #4
 8002618:	d006      	beq.n	8002628 <__iar_annotation$$branch+0x4c8>
 800261a:	2000      	movs	r0, #0
 800261c:	7728      	strb	r0, [r5, #28]
 800261e:	7469      	strb	r1, [r5, #17]
 8002620:	2120      	movs	r1, #32
 8002622:	7c28      	ldrb	r0, [r5, #16]
 8002624:	f7fd ff2c 	bl	8000480 <USBPD_PE_Notification>
 8002628:	a903      	add	r1, sp, #12
 800262a:	0028      	movs	r0, r5
 800262c:	f000 fa1a 	bl	8002a64 <PE_StateMachine_SNK_ReadyWait>
 8002630:	e565      	b.n	80020fe <__iar_annotation$$branch+0xc>
 8002632:	68a8      	ldr	r0, [r5, #8]
 8002634:	6881      	ldr	r1, [r0, #8]
 8002636:	2900      	cmp	r1, #0
 8002638:	d02e      	beq.n	8002698 <__iar_annotation$$branch+0x538>
 800263a:	4668      	mov	r0, sp
 800263c:	7b40      	ldrb	r0, [r0, #13]
 800263e:	4788      	blx	r1
 8002640:	280a      	cmp	r0, #10
 8002642:	d002      	beq.n	800264a <__iar_annotation$$branch+0x4ea>
 8002644:	280d      	cmp	r0, #13
 8002646:	d022      	beq.n	800268e <__iar_annotation$$branch+0x52e>
 8002648:	e026      	b.n	8002698 <__iar_annotation$$branch+0x538>
 800264a:	2201      	movs	r2, #1
 800264c:	2100      	movs	r1, #0
 800264e:	7c28      	ldrb	r0, [r5, #16]
 8002650:	68ab      	ldr	r3, [r5, #8]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	4798      	blx	r3
 8002656:	2000      	movs	r0, #0
 8002658:	9000      	str	r0, [sp, #0]
 800265a:	2359      	movs	r3, #89	; 0x59
 800265c:	2203      	movs	r2, #3
 800265e:	2100      	movs	r1, #0
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ff55 	bl	8001510 <PE_Send_CtrlMessage>
 8002666:	2800      	cmp	r0, #0
 8002668:	d110      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 800266a:	2008      	movs	r0, #8
 800266c:	7728      	strb	r0, [r5, #28]
 800266e:	6868      	ldr	r0, [r5, #4]
 8002670:	6801      	ldr	r1, [r0, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	430a      	orrs	r2, r1
 8002676:	6002      	str	r2, [r0, #0]
 8002678:	2206      	movs	r2, #6
 800267a:	2100      	movs	r1, #0
 800267c:	7c28      	ldrb	r0, [r5, #16]
 800267e:	68ab      	ldr	r3, [r5, #8]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	4798      	blx	r3
 8002684:	48b0      	ldr	r0, [pc, #704]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 8002686:	83e8      	strh	r0, [r5, #30]
 8002688:	24e1      	movs	r4, #225	; 0xe1
 800268a:	00a4      	lsls	r4, r4, #2
 800268c:	e538      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800268e:	2000      	movs	r0, #0
 8002690:	9000      	str	r0, [sp, #0]
 8002692:	2303      	movs	r3, #3
 8002694:	220c      	movs	r2, #12
 8002696:	e7b7      	b.n	8002608 <__iar_annotation$$branch+0x4a8>
 8002698:	202a      	movs	r0, #42	; 0x2a
 800269a:	e5e0      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800269c:	4668      	mov	r0, sp
 800269e:	7b00      	ldrb	r0, [r0, #12]
 80026a0:	2811      	cmp	r0, #17
 80026a2:	d119      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026a4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80026a6:	49c1      	ldr	r1, [pc, #772]	; (80029ac <__iar_annotation$$branch+0x84c>)
 80026a8:	4001      	ands	r1, r0
 80026aa:	2906      	cmp	r1, #6
 80026ac:	d114      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026ae:	7f28      	ldrb	r0, [r5, #28]
 80026b0:	2809      	cmp	r0, #9
 80026b2:	d005      	beq.n	80026c0 <__iar_annotation$$branch+0x560>
 80026b4:	2209      	movs	r2, #9
 80026b6:	2100      	movs	r1, #0
 80026b8:	7c28      	ldrb	r0, [r5, #16]
 80026ba:	68ab      	ldr	r3, [r5, #8]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	4798      	blx	r3
 80026c0:	2053      	movs	r0, #83	; 0x53
 80026c2:	7468      	strb	r0, [r5, #17]
 80026c4:	4668      	mov	r0, sp
 80026c6:	7b00      	ldrb	r0, [r0, #12]
 80026c8:	2814      	cmp	r0, #20
 80026ca:	d005      	beq.n	80026d8 <__iar_annotation$$branch+0x578>
 80026cc:	2014      	movs	r0, #20
 80026ce:	4669      	mov	r1, sp
 80026d0:	7308      	strb	r0, [r1, #12]
 80026d2:	0028      	movs	r0, r5
 80026d4:	f7fe f93f 	bl	8000956 <PE_Clear_RxEvent>
 80026d8:	8be8      	ldrh	r0, [r5, #30]
 80026da:	03a1      	lsls	r1, r4, #14
 80026dc:	4288      	cmp	r0, r1
 80026de:	d1d5      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 80026e0:	220f      	movs	r2, #15
 80026e2:	2100      	movs	r1, #0
 80026e4:	7c28      	ldrb	r0, [r5, #16]
 80026e6:	68ab      	ldr	r3, [r5, #8]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	4798      	blx	r3
 80026ec:	68a8      	ldr	r0, [r5, #8]
 80026ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d100      	bne.n	80026f6 <__iar_annotation$$branch+0x596>
 80026f4:	e5b2      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80026f6:	2092      	movs	r0, #146	; 0x92
 80026f8:	e5b1      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80026fa:	0028      	movs	r0, r5
 80026fc:	f7fe fe53 	bl	80013a6 <PE_SetPowerNegotiation>
 8002700:	220a      	movs	r2, #10
 8002702:	2100      	movs	r1, #0
 8002704:	7c28      	ldrb	r0, [r5, #16]
 8002706:	68ab      	ldr	r3, [r5, #8]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	4798      	blx	r3
 800270c:	6868      	ldr	r0, [r5, #4]
 800270e:	7800      	ldrb	r0, [r0, #0]
 8002710:	0780      	lsls	r0, r0, #30
 8002712:	0f80      	lsrs	r0, r0, #30
 8002714:	2802      	cmp	r0, #2
 8002716:	d102      	bne.n	800271e <__iar_annotation$$branch+0x5be>
 8002718:	7c28      	ldrb	r0, [r5, #16]
 800271a:	f003 f820 	bl	800575e <USBPD_PRL_SRCSetSinkNG>
 800271e:	2101      	movs	r1, #1
 8002720:	0028      	movs	r0, r5
 8002722:	f7fe f8d3 	bl	80008cc <PE_ChangePowerRole>
 8002726:	7f28      	ldrb	r0, [r5, #28]
 8002728:	2809      	cmp	r0, #9
 800272a:	d005      	beq.n	8002738 <__iar_annotation$$branch+0x5d8>
 800272c:	220b      	movs	r2, #11
 800272e:	2101      	movs	r1, #1
 8002730:	7c28      	ldrb	r0, [r5, #16]
 8002732:	68ab      	ldr	r3, [r5, #8]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	4798      	blx	r3
 8002738:	2000      	movs	r0, #0
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	235b      	movs	r3, #91	; 0x5b
 800273e:	2206      	movs	r2, #6
 8002740:	2100      	movs	r1, #0
 8002742:	0028      	movs	r0, r5
 8002744:	f7fe fee4 	bl	8001510 <PE_Send_CtrlMessage>
 8002748:	2800      	cmp	r0, #0
 800274a:	d108      	bne.n	800275e <__iar_annotation$$branch+0x5fe>
 800274c:	220c      	movs	r2, #12
 800274e:	2100      	movs	r1, #0
 8002750:	7c28      	ldrb	r0, [r5, #16]
 8002752:	68ab      	ldr	r3, [r5, #8]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	4798      	blx	r3
 8002758:	48c1      	ldr	r0, [pc, #772]	; (8002a60 <.text_3>)
 800275a:	83e8      	strh	r0, [r5, #30]
 800275c:	2414      	movs	r4, #20
 800275e:	7c68      	ldrb	r0, [r5, #17]
 8002760:	285b      	cmp	r0, #91	; 0x5b
 8002762:	d00f      	beq.n	8002784 <__iar_annotation$$branch+0x624>
 8002764:	2100      	movs	r1, #0
 8002766:	0028      	movs	r0, r5
 8002768:	f7fe f8b0 	bl	80008cc <PE_ChangePowerRole>
 800276c:	2206      	movs	r2, #6
 800276e:	2101      	movs	r1, #1
 8002770:	7c28      	ldrb	r0, [r5, #16]
 8002772:	68ab      	ldr	r3, [r5, #8]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	4798      	blx	r3
 8002778:	2207      	movs	r2, #7
 800277a:	2100      	movs	r1, #0
 800277c:	7c28      	ldrb	r0, [r5, #16]
 800277e:	68ab      	ldr	r3, [r5, #8]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	4798      	blx	r3
 8002784:	e4bc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002786:	9400      	str	r4, [sp, #0]
 8002788:	2358      	movs	r3, #88	; 0x58
 800278a:	220a      	movs	r2, #10
 800278c:	2100      	movs	r1, #0
 800278e:	0028      	movs	r0, r5
 8002790:	f7fe febe 	bl	8001510 <PE_Send_CtrlMessage>
 8002794:	2800      	cmp	r0, #0
 8002796:	d105      	bne.n	80027a4 <__iar_annotation$$branch+0x644>
 8002798:	2008      	movs	r0, #8
 800279a:	7728      	strb	r0, [r5, #28]
 800279c:	83ee      	strh	r6, [r5, #30]
 800279e:	241b      	movs	r4, #27
 80027a0:	2202      	movs	r2, #2
 80027a2:	e7ea      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a4:	220f      	movs	r2, #15
 80027a6:	e7e8      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a8:	4669      	mov	r1, sp
 80027aa:	7b09      	ldrb	r1, [r1, #12]
 80027ac:	2911      	cmp	r1, #17
 80027ae:	d10c      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b0:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80027b2:	4201      	tst	r1, r0
 80027b4:	d109      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b6:	06c8      	lsls	r0, r1, #27
 80027b8:	0ec0      	lsrs	r0, r0, #27
 80027ba:	2803      	cmp	r0, #3
 80027bc:	d006      	beq.n	80027cc <__iar_annotation$$branch+0x66c>
 80027be:	2804      	cmp	r0, #4
 80027c0:	d02d      	beq.n	800281e <__iar_annotation$$branch+0x6be>
 80027c2:	280c      	cmp	r0, #12
 80027c4:	d029      	beq.n	800281a <__iar_annotation$$branch+0x6ba>
 80027c6:	2810      	cmp	r0, #16
 80027c8:	d032      	beq.n	8002830 <__iar_annotation$$branch+0x6d0>
 80027ca:	e0a5      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 80027cc:	6868      	ldr	r0, [r5, #4]
 80027ce:	6801      	ldr	r1, [r0, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	430a      	orrs	r2, r1
 80027d4:	6002      	str	r2, [r0, #0]
 80027d6:	485c      	ldr	r0, [pc, #368]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 80027d8:	83e8      	strh	r0, [r5, #30]
 80027da:	24e1      	movs	r4, #225	; 0xe1
 80027dc:	00a4      	lsls	r4, r4, #2
 80027de:	7f28      	ldrb	r0, [r5, #28]
 80027e0:	2809      	cmp	r0, #9
 80027e2:	d005      	beq.n	80027f0 <__iar_annotation$$branch+0x690>
 80027e4:	2206      	movs	r2, #6
 80027e6:	2100      	movs	r1, #0
 80027e8:	7c28      	ldrb	r0, [r5, #16]
 80027ea:	68ab      	ldr	r3, [r5, #8]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	4798      	blx	r3
 80027f0:	2104      	movs	r1, #4
 80027f2:	0028      	movs	r0, r5
 80027f4:	f7fe fdd7 	bl	80013a6 <PE_SetPowerNegotiation>
 80027f8:	213a      	movs	r1, #58	; 0x3a
 80027fa:	7c28      	ldrb	r0, [r5, #16]
 80027fc:	f7fd fe40 	bl	8000480 <USBPD_PE_Notification>
 8002800:	4668      	mov	r0, sp
 8002802:	7b00      	ldrb	r0, [r0, #12]
 8002804:	2814      	cmp	r0, #20
 8002806:	d005      	beq.n	8002814 <__iar_annotation$$branch+0x6b4>
 8002808:	2014      	movs	r0, #20
 800280a:	4669      	mov	r1, sp
 800280c:	7308      	strb	r0, [r1, #12]
 800280e:	0028      	movs	r0, r5
 8002810:	f7fe f8a1 	bl	8000956 <PE_Clear_RxEvent>
 8002814:	2059      	movs	r0, #89	; 0x59
 8002816:	7468      	strb	r0, [r5, #17]
 8002818:	e07e      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 800281a:	213b      	movs	r1, #59	; 0x3b
 800281c:	e000      	b.n	8002820 <__iar_annotation$$branch+0x6c0>
 800281e:	2116      	movs	r1, #22
 8002820:	7c28      	ldrb	r0, [r5, #16]
 8002822:	f7fd fe2d 	bl	8000480 <USBPD_PE_Notification>
 8002826:	4668      	mov	r0, sp
 8002828:	7b00      	ldrb	r0, [r0, #12]
 800282a:	2814      	cmp	r0, #20
 800282c:	d108      	bne.n	8002840 <__iar_annotation$$branch+0x6e0>
 800282e:	e070      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002830:	2117      	movs	r1, #23
 8002832:	7c28      	ldrb	r0, [r5, #16]
 8002834:	f7fd fe24 	bl	8000480 <USBPD_PE_Notification>
 8002838:	4668      	mov	r0, sp
 800283a:	7b00      	ldrb	r0, [r0, #12]
 800283c:	2814      	cmp	r0, #20
 800283e:	d068      	beq.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002840:	2014      	movs	r0, #20
 8002842:	4669      	mov	r1, sp
 8002844:	7308      	strb	r0, [r1, #12]
 8002846:	0028      	movs	r0, r5
 8002848:	f7fe f885 	bl	8000956 <PE_Clear_RxEvent>
 800284c:	e061      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 800284e:	2000      	movs	r0, #0
 8002850:	9004      	str	r0, [sp, #16]
 8002852:	ab04      	add	r3, sp, #16
 8002854:	aa05      	add	r2, sp, #20
 8002856:	2100      	movs	r1, #0
 8002858:	7c28      	ldrb	r0, [r5, #16]
 800285a:	68ae      	ldr	r6, [r5, #8]
 800285c:	6976      	ldr	r6, [r6, #20]
 800285e:	47b0      	blx	r6
 8002860:	2104      	movs	r1, #4
 8002862:	9804      	ldr	r0, [sp, #16]
 8002864:	f7fe fdf2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8002868:	2800      	cmp	r0, #0
 800286a:	d001      	beq.n	8002870 <__iar_annotation$$branch+0x710>
 800286c:	2003      	movs	r0, #3
 800286e:	e4b5      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 8002870:	9002      	str	r0, [sp, #8]
 8002872:	2003      	movs	r0, #3
 8002874:	9001      	str	r0, [sp, #4]
 8002876:	9804      	ldr	r0, [sp, #16]
 8002878:	0880      	lsrs	r0, r0, #2
 800287a:	9000      	str	r0, [sp, #0]
 800287c:	ab05      	add	r3, sp, #20
 800287e:	2201      	movs	r2, #1
 8002880:	2100      	movs	r1, #0
 8002882:	0028      	movs	r0, r5
 8002884:	f7fe fe6f 	bl	8001566 <PE_Send_DataMessage>
 8002888:	e43a      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800288a:	2000      	movs	r0, #0
 800288c:	9002      	str	r0, [sp, #8]
 800288e:	2003      	movs	r0, #3
 8002890:	9001      	str	r0, [sp, #4]
 8002892:	2001      	movs	r0, #1
 8002894:	9000      	str	r0, [sp, #0]
 8002896:	002b      	movs	r3, r5
 8002898:	332c      	adds	r3, #44	; 0x2c
 800289a:	2206      	movs	r2, #6
 800289c:	2100      	movs	r1, #0
 800289e:	0028      	movs	r0, r5
 80028a0:	f7fe fe61 	bl	8001566 <PE_Send_DataMessage>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1ef      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028a8:	215d      	movs	r1, #93	; 0x5d
 80028aa:	e655      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80028ac:	9400      	str	r4, [sp, #0]
 80028ae:	2366      	movs	r3, #102	; 0x66
 80028b0:	2214      	movs	r2, #20
 80028b2:	2100      	movs	r1, #0
 80028b4:	0028      	movs	r0, r5
 80028b6:	f7fe fe2b 	bl	8001510 <PE_Send_CtrlMessage>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d1e4      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028be:	83ee      	strh	r6, [r5, #30]
 80028c0:	241b      	movs	r4, #27
 80028c2:	214a      	movs	r1, #74	; 0x4a
 80028c4:	7c28      	ldrb	r0, [r5, #16]
 80028c6:	f7fd fddb 	bl	8000480 <USBPD_PE_Notification>
 80028ca:	200b      	movs	r0, #11
 80028cc:	7728      	strb	r0, [r5, #28]
 80028ce:	e7db      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80028d0:	4668      	mov	r0, sp
 80028d2:	7b00      	ldrb	r0, [r0, #12]
 80028d4:	2811      	cmp	r0, #17
 80028d6:	d11f      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028d8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80028da:	0bc1      	lsrs	r1, r0, #15
 80028dc:	d01c      	beq.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028de:	06c0      	lsls	r0, r0, #27
 80028e0:	0ec0      	lsrs	r0, r0, #27
 80028e2:	280c      	cmp	r0, #12
 80028e4:	d118      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028e6:	2304      	movs	r3, #4
 80028e8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80028ea:	1d02      	adds	r2, r0, #4
 80028ec:	210a      	movs	r1, #10
 80028ee:	7c28      	ldrb	r0, [r5, #16]
 80028f0:	68ac      	ldr	r4, [r5, #8]
 80028f2:	69a4      	ldr	r4, [r4, #24]
 80028f4:	47a0      	blx	r4
 80028f6:	4668      	mov	r0, sp
 80028f8:	7b00      	ldrb	r0, [r0, #12]
 80028fa:	2814      	cmp	r0, #20
 80028fc:	d005      	beq.n	800290a <__iar_annotation$$branch+0x7aa>
 80028fe:	2014      	movs	r0, #20
 8002900:	4669      	mov	r1, sp
 8002902:	7308      	strb	r0, [r1, #12]
 8002904:	0028      	movs	r0, r5
 8002906:	f7fe f826 	bl	8000956 <PE_Clear_RxEvent>
 800290a:	214b      	movs	r1, #75	; 0x4b
 800290c:	7c28      	ldrb	r0, [r5, #16]
 800290e:	f7fd fdb7 	bl	8000480 <USBPD_PE_Notification>
 8002912:	2003      	movs	r0, #3
 8002914:	7468      	strb	r0, [r5, #17]
 8002916:	2400      	movs	r4, #0
 8002918:	8be8      	ldrh	r0, [r5, #30]
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	0209      	lsls	r1, r1, #8
 800291e:	4288      	cmp	r0, r1
 8002920:	d1b2      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 8002922:	e041      	b.n	80029a8 <__iar_annotation$$branch+0x848>
 8002924:	4895      	ldr	r0, [pc, #596]	; (8002b7c <.text_5>)
 8002926:	182f      	adds	r7, r5, r0
 8002928:	9400      	str	r4, [sp, #0]
 800292a:	2339      	movs	r3, #57	; 0x39
 800292c:	783a      	ldrb	r2, [r7, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	0028      	movs	r0, r5
 8002932:	f7fe fded 	bl	8001510 <PE_Send_CtrlMessage>
 8002936:	2800      	cmp	r0, #0
 8002938:	d1a6      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 800293a:	7878      	ldrb	r0, [r7, #1]
 800293c:	7728      	strb	r0, [r5, #28]
 800293e:	2144      	movs	r1, #68	; 0x44
 8002940:	7c28      	ldrb	r0, [r5, #16]
 8002942:	f7fd fd9d 	bl	8000480 <USBPD_PE_Notification>
 8002946:	e4b8      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002948:	00008384 	.word	0x00008384
 800294c:	4668      	mov	r0, sp
 800294e:	7b00      	ldrb	r0, [r0, #12]
 8002950:	2814      	cmp	r0, #20
 8002952:	d024      	beq.n	800299e <__iar_annotation$$branch+0x83e>
 8002954:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002956:	0bc0      	lsrs	r0, r0, #15
 8002958:	d00e      	beq.n	8002978 <__iar_annotation$$branch+0x818>
 800295a:	0028      	movs	r0, r5
 800295c:	f7fe fe40 	bl	80015e0 <PE_Check_ExtendedMessage>
 8002960:	4668      	mov	r0, sp
 8002962:	7b00      	ldrb	r0, [r0, #12]
 8002964:	2814      	cmp	r0, #20
 8002966:	d005      	beq.n	8002974 <__iar_annotation$$branch+0x814>
 8002968:	2014      	movs	r0, #20
 800296a:	4669      	mov	r1, sp
 800296c:	7308      	strb	r0, [r1, #12]
 800296e:	0028      	movs	r0, r5
 8002970:	f7fd fff1 	bl	8000956 <PE_Clear_RxEvent>
 8002974:	2000      	movs	r0, #0
 8002976:	83e8      	strh	r0, [r5, #30]
 8002978:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800297a:	490c      	ldr	r1, [pc, #48]	; (80029ac <__iar_annotation$$branch+0x84c>)
 800297c:	4001      	ands	r1, r0
 800297e:	2910      	cmp	r1, #16
 8002980:	d10d      	bne.n	800299e <__iar_annotation$$branch+0x83e>
 8002982:	2003      	movs	r0, #3
 8002984:	7468      	strb	r0, [r5, #17]
 8002986:	2400      	movs	r4, #0
 8002988:	4668      	mov	r0, sp
 800298a:	7b00      	ldrb	r0, [r0, #12]
 800298c:	2814      	cmp	r0, #20
 800298e:	d005      	beq.n	800299c <__iar_annotation$$branch+0x83c>
 8002990:	2014      	movs	r0, #20
 8002992:	4669      	mov	r1, sp
 8002994:	7308      	strb	r0, [r1, #12]
 8002996:	0028      	movs	r0, r5
 8002998:	f7fd ffdd 	bl	8000956 <PE_Clear_RxEvent>
 800299c:	83ec      	strh	r4, [r5, #30]
 800299e:	8be8      	ldrh	r0, [r5, #30]
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	0209      	lsls	r1, r1, #8
 80029a4:	4288      	cmp	r0, r1
 80029a6:	d11c      	bne.n	80029e2 <__iar_annotation$$branch+0x882>
 80029a8:	2003      	movs	r0, #3
 80029aa:	e458      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80029ac:	0000f01f 	.word	0x0000f01f
 80029b0:	0028      	movs	r0, r5
 80029b2:	f7fe ff37 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80029b6:	e63b      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029b8:	a903      	add	r1, sp, #12
 80029ba:	0028      	movs	r0, r5
 80029bc:	f7fe f9d4 	bl	8000d68 <PE_SubStateMachine_Generic>
 80029c0:	e636      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029c2:	a903      	add	r1, sp, #12
 80029c4:	0028      	movs	r0, r5
 80029c6:	f001 f9ef 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80029ca:	0004      	movs	r4, r0
 80029cc:	6868      	ldr	r0, [r5, #4]
 80029ce:	6800      	ldr	r0, [r0, #0]
 80029d0:	0401      	lsls	r1, r0, #16
 80029d2:	0fc9      	lsrs	r1, r1, #31
 80029d4:	d006      	beq.n	80029e4 <__iar_annotation$$branch+0x884>
 80029d6:	6828      	ldr	r0, [r5, #0]
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	4668      	mov	r0, sp
 80029dc:	7b40      	ldrb	r0, [r0, #13]
 80029de:	f002 fee1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80029e2:	e751      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029e4:	2101      	movs	r1, #1
 80029e6:	e7f8      	b.n	80029da <__iar_annotation$$branch+0x87a>
 80029e8:	4668      	mov	r0, sp
 80029ea:	7b01      	ldrb	r1, [r0, #12]
 80029ec:	0028      	movs	r0, r5
 80029ee:	f002 fc3b 	bl	8005268 <PE_StateMachine_UVDM>
 80029f2:	e749      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029f4:	2000      	movs	r0, #0
 80029f6:	9000      	str	r0, [sp, #0]
 80029f8:	2358      	movs	r3, #88	; 0x58
 80029fa:	2213      	movs	r2, #19
 80029fc:	2100      	movs	r1, #0
 80029fe:	0028      	movs	r0, r5
 8002a00:	f7fe fd86 	bl	8001510 <PE_Send_CtrlMessage>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1f4      	bne.n	80029f2 <__iar_annotation$$branch+0x892>
 8002a08:	2009      	movs	r0, #9
 8002a0a:	7728      	strb	r0, [r5, #28]
 8002a0c:	e455      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002a0e:	6968      	ldr	r0, [r5, #20]
 8002a10:	2701      	movs	r7, #1
 8002a12:	0b41      	lsrs	r1, r0, #13
 8002a14:	4039      	ands	r1, r7
 8002a16:	d019      	beq.n	8002a4c <__iar_annotation$$branch+0x8ec>
 8002a18:	0b80      	lsrs	r0, r0, #14
 8002a1a:	4038      	ands	r0, r7
 8002a1c:	d007      	beq.n	8002a2e <__iar_annotation$$branch+0x8ce>
 8002a1e:	215b      	movs	r1, #91	; 0x5b
 8002a20:	7c28      	ldrb	r0, [r5, #16]
 8002a22:	f7fd fd2d 	bl	8000480 <USBPD_PE_Notification>
 8002a26:	6968      	ldr	r0, [r5, #20]
 8002a28:	4955      	ldr	r1, [pc, #340]	; (8002b80 <.text_6>)
 8002a2a:	4001      	ands	r1, r0
 8002a2c:	6169      	str	r1, [r5, #20]
 8002a2e:	2003      	movs	r0, #3
 8002a30:	7468      	strb	r0, [r5, #17]
 8002a32:	7ca9      	ldrb	r1, [r5, #18]
 8002a34:	2903      	cmp	r1, #3
 8002a36:	d008      	beq.n	8002a4a <__iar_annotation$$branch+0x8ea>
 8002a38:	74a8      	strb	r0, [r5, #18]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	9000      	str	r0, [sp, #0]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2203      	movs	r2, #3
 8002a42:	7c29      	ldrb	r1, [r5, #16]
 8002a44:	2004      	movs	r0, #4
 8002a46:	6834      	ldr	r4, [r6, #0]
 8002a48:	47a0      	blx	r4
 8002a4a:	2401      	movs	r4, #1
 8002a4c:	6968      	ldr	r0, [r5, #20]
 8002a4e:	494d      	ldr	r1, [pc, #308]	; (8002b84 <.text_7>)
 8002a50:	4001      	ands	r1, r0
 8002a52:	6169      	str	r1, [r5, #20]
 8002a54:	2c00      	cmp	r4, #0
 8002a56:	d101      	bne.n	8002a5c <__iar_annotation$$branch>

08002a58 <__iar_annotation$$branch>:
 8002a58:	f7ff fa3e 	bl	8001ed8 <USBPD_PE_StateMachine_SNK+0xb0>

08002a5c <__iar_annotation$$branch>:
 8002a5c:	f7ff fb8e 	bl	800217c <__iar_annotation$$branch+0x1c>

08002a60 <.text_3>:
 8002a60:	00008014 	.word	0x00008014

08002a64 <PE_StateMachine_SNK_ReadyWait>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	0004      	movs	r4, r0
 8002a68:	000e      	movs	r6, r1
 8002a6a:	2702      	movs	r7, #2
 8002a6c:	7830      	ldrb	r0, [r6, #0]
 8002a6e:	2814      	cmp	r0, #20
 8002a70:	d00b      	beq.n	8002a8a <PE_StateMachine_SNK_ReadyWait+0x26>
 8002a72:	0020      	movs	r0, r4
 8002a74:	f7fe fffc 	bl	8001a70 <PE_ManageRXEvent>
 8002a78:	7830      	ldrb	r0, [r6, #0]
 8002a7a:	2814      	cmp	r0, #20
 8002a7c:	d07b      	beq.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a7e:	2014      	movs	r0, #20
 8002a80:	7030      	strb	r0, [r6, #0]
 8002a82:	0020      	movs	r0, r4
 8002a84:	f7fd ff67 	bl	8000956 <PE_Clear_RxEvent>
 8002a88:	e075      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a8a:	6961      	ldr	r1, [r4, #20]
 8002a8c:	0cc8      	lsrs	r0, r1, #19
 8002a8e:	03be      	lsls	r6, r7, #14
 8002a90:	2700      	movs	r7, #0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d021      	beq.n	8002ada <PE_StateMachine_SNK_ReadyWait+0x76>
 8002a96:	8c21      	ldrh	r1, [r4, #32]
 8002a98:	42b1      	cmp	r1, r6
 8002a9a:	d111      	bne.n	8002ac0 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002a9c:	200f      	movs	r0, #15
 8002a9e:	7460      	strb	r0, [r4, #17]
 8002aa0:	9700      	str	r7, [sp, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2270      	movs	r2, #112	; 0x70
 8002aa6:	7c21      	ldrb	r1, [r4, #16]
 8002aa8:	2009      	movs	r0, #9
 8002aaa:	4d37      	ldr	r5, [pc, #220]	; (8002b88 <.text_8>)
 8002aac:	682d      	ldr	r5, [r5, #0]
 8002aae:	47a8      	blx	r5
 8002ab0:	2098      	movs	r0, #152	; 0x98
 8002ab2:	0080      	lsls	r0, r0, #2
 8002ab4:	5c20      	ldrb	r0, [r4, r0]
 8002ab6:	1c40      	adds	r0, r0, #1
 8002ab8:	2198      	movs	r1, #152	; 0x98
 8002aba:	0089      	lsls	r1, r1, #2
 8002abc:	5460      	strb	r0, [r4, r1]
 8002abe:	e05a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ac0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002ac2:	0509      	lsls	r1, r1, #20
 8002ac4:	0f49      	lsrs	r1, r1, #29
 8002ac6:	180a      	adds	r2, r1, r0
 8002ac8:	2333      	movs	r3, #51	; 0x33
 8002aca:	435a      	muls	r2, r3
 8002acc:	4316      	orrs	r6, r2
 8002ace:	8426      	strh	r6, [r4, #32]
 8002ad0:	180f      	adds	r7, r1, r0
 8002ad2:	2033      	movs	r0, #51	; 0x33
 8002ad4:	4347      	muls	r7, r0
 8002ad6:	b2bf      	uxth	r7, r7
 8002ad8:	e04d      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ada:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002adc:	42b0      	cmp	r0, r6
 8002ade:	d104      	bne.n	8002aea <PE_StateMachine_SNK_ReadyWait+0x86>
 8002ae0:	2045      	movs	r0, #69	; 0x45
 8002ae2:	7460      	strb	r0, [r4, #17]
 8002ae4:	430e      	orrs	r6, r1
 8002ae6:	6166      	str	r6, [r4, #20]
 8002ae8:	e045      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002aea:	7c20      	ldrb	r0, [r4, #16]
 8002aec:	f7fd ff58 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d128      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002af4:	2032      	movs	r0, #50	; 0x32
 8002af6:	5c20      	ldrb	r0, [r4, r0]
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d024      	beq.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002afc:	6860      	ldr	r0, [r4, #4]
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	2103      	movs	r1, #3
 8002b02:	2203      	movs	r2, #3
 8002b04:	4002      	ands	r2, r0
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d007      	beq.n	8002b1a <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002b0a:	4001      	ands	r1, r0
 8002b0c:	2902      	cmp	r1, #2
 8002b0e:	d11a      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b10:	7c20      	ldrb	r0, [r4, #16]
 8002b12:	f002 fe3b 	bl	800578c <USBPD_PRL_IsResistor_SinkTxOK>
 8002b16:	2801      	cmp	r0, #1
 8002b18:	d115      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b1a:	2033      	movs	r0, #51	; 0x33
 8002b1c:	5c20      	ldrb	r0, [r4, r0]
 8002b1e:	2131      	movs	r1, #49	; 0x31
 8002b20:	5460      	strb	r0, [r4, r1]
 8002b22:	2032      	movs	r0, #50	; 0x32
 8002b24:	5c20      	ldrb	r0, [r4, r0]
 8002b26:	7460      	strb	r0, [r4, #17]
 8002b28:	2845      	cmp	r0, #69	; 0x45
 8002b2a:	d102      	bne.n	8002b32 <PE_StateMachine_SNK_ReadyWait+0xce>
 8002b2c:	6960      	ldr	r0, [r4, #20]
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	6166      	str	r6, [r4, #20]
 8002b32:	2132      	movs	r1, #50	; 0x32
 8002b34:	5467      	strb	r7, [r4, r1]
 8002b36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b38:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002b3a:	6960      	ldr	r0, [r4, #20]
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	01c9      	lsls	r1, r1, #7
 8002b40:	4301      	orrs	r1, r0
 8002b42:	6161      	str	r1, [r4, #20]
 8002b44:	e017      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b46:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002b48:	42b0      	cmp	r0, r6
 8002b4a:	d109      	bne.n	8002b60 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002b4c:	8467      	strh	r7, [r4, #34]	; 0x22
 8002b4e:	2098      	movs	r0, #152	; 0x98
 8002b50:	0080      	lsls	r0, r0, #2
 8002b52:	1820      	adds	r0, r4, r0
 8002b54:	7881      	ldrb	r1, [r0, #2]
 8002b56:	1c49      	adds	r1, r1, #1
 8002b58:	7081      	strb	r1, [r0, #2]
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	7460      	strb	r0, [r4, #17]
 8002b5e:	e00a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7fe fc47 	bl	80013f4 <PE_CalculateMinTiming>
 8002b66:	2132      	movs	r1, #50	; 0x32
 8002b68:	5c61      	ldrb	r1, [r4, r1]
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d002      	beq.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d300      	bcc.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b72:	2002      	movs	r0, #2
 8002b74:	0007      	movs	r7, r0
 8002b76:	0038      	movs	r0, r7
 8002b78:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002b7c <.text_5>:
 8002b7c:	0000025e 	.word	0x0000025e

08002b80 <.text_6>:
 8002b80:	ffffbfff 	.word	0xffffbfff

08002b84 <.text_7>:
 8002b84:	ffffdfff 	.word	0xffffdfff

08002b88 <.text_8>:
 8002b88:	20000000 	.word	0x20000000

08002b8c <USBPD_PE_StateMachine_SRC>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	0005      	movs	r5, r0
 8002b92:	4829      	ldr	r0, [pc, #164]	; (8002c38 <USBPD_PE_StateMachine_SRC+0xac>)
 8002b94:	00a9      	lsls	r1, r5, #2
 8002b96:	5844      	ldr	r4, [r0, r1]
 8002b98:	7c60      	ldrb	r0, [r4, #17]
 8002b9a:	2848      	cmp	r0, #72	; 0x48
 8002b9c:	d134      	bne.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f7fd ffc0 	bl	8000b24 <PE_Reset_ZI>
 8002ba4:	0020      	movs	r0, r4
 8002ba6:	f7fd fff3 	bl	8000b90 <PE_Reset_Counter>
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	7900      	ldrb	r0, [r0, #4]
 8002bae:	0783      	lsls	r3, r0, #30
 8002bb0:	0f9b      	lsrs	r3, r3, #30
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	7c20      	ldrb	r0, [r4, #16]
 8002bb8:	f002 fd83 	bl	80056c2 <USBPD_PRL_SetHeader>
 8002bbc:	6860      	ldr	r0, [r4, #4]
 8002bbe:	6801      	ldr	r1, [r0, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	6002      	str	r2, [r0, #0]
 8002bc6:	6860      	ldr	r0, [r4, #4]
 8002bc8:	6801      	ldr	r1, [r0, #0]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4391      	bics	r1, r2
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	7912      	ldrb	r2, [r2, #4]
 8002bd2:	0792      	lsls	r2, r2, #30
 8002bd4:	0f92      	lsrs	r2, r2, #30
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	6002      	str	r2, [r0, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	7c20      	ldrb	r0, [r4, #16]
 8002bde:	f002 fde1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002be2:	7c20      	ldrb	r0, [r4, #16]
 8002be4:	f003 f84a 	bl	8005c7c <USBPD_PRL_Reset>
 8002be8:	2002      	movs	r0, #2
 8002bea:	7460      	strb	r0, [r4, #17]
 8002bec:	7ca0      	ldrb	r0, [r4, #18]
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d00a      	beq.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	74a0      	strb	r0, [r4, #18]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	7c21      	ldrb	r1, [r4, #16]
 8002c00:	2004      	movs	r0, #4
 8002c02:	4eca      	ldr	r6, [pc, #808]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002c04:	6836      	ldr	r6, [r6, #0]
 8002c06:	47b0      	blx	r6
 8002c08:	6960      	ldr	r0, [r4, #20]
 8002c0a:	0341      	lsls	r1, r0, #13
 8002c0c:	0fc9      	lsrs	r1, r1, #31
 8002c0e:	d006      	beq.n	8002c1e <USBPD_PE_StateMachine_SRC+0x92>
 8002c10:	49c7      	ldr	r1, [pc, #796]	; (8002f30 <__iar_annotation$$branch+0x70>)
 8002c12:	4001      	ands	r1, r0
 8002c14:	6161      	str	r1, [r4, #20]
 8002c16:	2164      	movs	r1, #100	; 0x64
 8002c18:	7c20      	ldrb	r0, [r4, #16]
 8002c1a:	f7fd fc31 	bl	8000480 <USBPD_PE_Notification>
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f7fd fe62 	bl	80008e8 <PE_Get_RxEvent>
 8002c24:	4669      	mov	r1, sp
 8002c26:	7308      	strb	r0, [r1, #12]
 8002c28:	4668      	mov	r0, sp
 8002c2a:	7b00      	ldrb	r0, [r0, #12]
 8002c2c:	2803      	cmp	r0, #3
 8002c2e:	d105      	bne.n	8002c3c <USBPD_PE_StateMachine_SRC+0xb0>
 8002c30:	2001      	movs	r0, #1
 8002c32:	b007      	add	sp, #28
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200002f4 	.word	0x200002f4
 8002c3c:	4668      	mov	r0, sp
 8002c3e:	7345      	strb	r5, [r0, #13]
 8002c40:	6860      	ldr	r0, [r4, #4]
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	04c1      	lsls	r1, r0, #19
 8002c46:	0fc9      	lsrs	r1, r1, #31
 8002c48:	d100      	bne.n	8002c4c <USBPD_PE_StateMachine_SRC+0xc0>
 8002c4a:	e13b      	b.n	8002ec4 <__iar_annotation$$branch+0x4>
 8002c4c:	6960      	ldr	r0, [r4, #20]
 8002c4e:	0381      	lsls	r1, r0, #14
 8002c50:	0fc9      	lsrs	r1, r1, #31
 8002c52:	d100      	bne.n	8002c56 <USBPD_PE_StateMachine_SRC+0xca>
 8002c54:	e144      	b.n	8002ee0 <__iar_annotation$$branch+0x20>
 8002c56:	4668      	mov	r0, sp
 8002c58:	7b40      	ldrb	r0, [r0, #13]
 8002c5a:	f002 fd9b 	bl	8005794 <USBPD_PRL_FastRoleSwapSignalling>
 8002c5e:	20a6      	movs	r0, #166	; 0xa6
 8002c60:	7460      	strb	r0, [r4, #17]
 8002c62:	2109      	movs	r1, #9
 8002c64:	7721      	strb	r1, [r4, #28]
 8002c66:	2100      	movs	r1, #0
 8002c68:	2232      	movs	r2, #50	; 0x32
 8002c6a:	54a1      	strb	r1, [r4, r2]
 8002c6c:	6961      	ldr	r1, [r4, #20]
 8002c6e:	4ab1      	ldr	r2, [pc, #708]	; (8002f34 <__iar_annotation$$branch+0x74>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	6162      	str	r2, [r4, #20]
 8002c74:	49b0      	ldr	r1, [pc, #704]	; (8002f38 <__iar_annotation$$branch+0x78>)
 8002c76:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002c78:	7ca1      	ldrb	r1, [r4, #18]
 8002c7a:	29a6      	cmp	r1, #166	; 0xa6
 8002c7c:	d000      	beq.n	8002c80 <USBPD_PE_StateMachine_SRC+0xf4>
 8002c7e:	e125      	b.n	8002ecc <__iar_annotation$$branch+0xc>
 8002c80:	2502      	movs	r5, #2
 8002c82:	4668      	mov	r0, sp
 8002c84:	7b00      	ldrb	r0, [r0, #12]
 8002c86:	2811      	cmp	r0, #17
 8002c88:	d11f      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c8a:	6860      	ldr	r0, [r4, #4]
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	0701      	lsls	r1, r0, #28
 8002c90:	0fc9      	lsrs	r1, r1, #31
 8002c92:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c94:	0680      	lsls	r0, r0, #26
 8002c96:	0fc2      	lsrs	r2, r0, #31
 8002c98:	4291      	cmp	r1, r2
 8002c9a:	d116      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c9c:	2014      	movs	r0, #20
 8002c9e:	4669      	mov	r1, sp
 8002ca0:	7308      	strb	r0, [r1, #12]
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	f7fd fe57 	bl	8000956 <PE_Clear_RxEvent>
 8002ca8:	2092      	movs	r0, #146	; 0x92
 8002caa:	7460      	strb	r0, [r4, #17]
 8002cac:	7ca0      	ldrb	r0, [r4, #18]
 8002cae:	2892      	cmp	r0, #146	; 0x92
 8002cb0:	d100      	bne.n	8002cb4 <USBPD_PE_StateMachine_SRC+0x128>
 8002cb2:	e155      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002cb4:	2092      	movs	r0, #146	; 0x92
 8002cb6:	74a0      	strb	r0, [r4, #18]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	9000      	str	r0, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2292      	movs	r2, #146	; 0x92
 8002cc0:	7c21      	ldrb	r1, [r4, #16]
 8002cc2:	2004      	movs	r0, #4
 8002cc4:	4e99      	ldr	r6, [pc, #612]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002cc6:	6836      	ldr	r6, [r6, #0]
 8002cc8:	47b0      	blx	r6
 8002cca:	7c60      	ldrb	r0, [r4, #17]
 8002ccc:	499b      	ldr	r1, [pc, #620]	; (8002f3c <__iar_annotation$$branch+0x7c>)
 8002cce:	1866      	adds	r6, r4, r1
 8002cd0:	4f9b      	ldr	r7, [pc, #620]	; (8002f40 <__iar_annotation$$branch+0x80>)
 8002cd2:	499c      	ldr	r1, [pc, #624]	; (8002f44 <__iar_annotation$$branch+0x84>)
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <USBPD_PE_StateMachine_SRC+0x14e>
 8002cd8:	e136      	b.n	8002f48 <__iar_annotation$$branch+0x88>
 8002cda:	1e42      	subs	r2, r0, #1
 8002cdc:	d067      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002cde:	1e52      	subs	r2, r2, #1
 8002ce0:	d100      	bne.n	8002ce4 <USBPD_PE_StateMachine_SRC+0x158>
 8002ce2:	e149      	b.n	8002f78 <__iar_annotation$$branch+0xb8>
 8002ce4:	1e52      	subs	r2, r2, #1
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	d801      	bhi.n	8002cee <__iar_annotation$$branch+0x4>

08002cea <__iar_annotation$$branch>:
 8002cea:	f000 fd90 	bl	800380e <__iar_annotation$$branch+0x94e>
 8002cee:	1e92      	subs	r2, r2, #2
 8002cf0:	d100      	bne.n	8002cf4 <__iar_annotation$$branch+0xa>
 8002cf2:	e189      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002cf4:	1e52      	subs	r2, r2, #1
 8002cf6:	d100      	bne.n	8002cfa <__iar_annotation$$branch+0x10>
 8002cf8:	e18b      	b.n	8003012 <__iar_annotation$$branch+0x152>
 8002cfa:	1e52      	subs	r2, r2, #1
 8002cfc:	d100      	bne.n	8002d00 <__iar_annotation$$branch+0x16>
 8002cfe:	e190      	b.n	8003022 <__iar_annotation$$branch+0x162>
 8002d00:	1e52      	subs	r2, r2, #1
 8002d02:	d100      	bne.n	8002d06 <__iar_annotation$$branch+0x1c>
 8002d04:	e1e1      	b.n	80030ca <__iar_annotation$$branch+0x20a>
 8002d06:	1e52      	subs	r2, r2, #1
 8002d08:	d100      	bne.n	8002d0c <__iar_annotation$$branch+0x22>
 8002d0a:	e223      	b.n	8003154 <__iar_annotation$$branch+0x294>
 8002d0c:	1ed2      	subs	r2, r2, #3
 8002d0e:	d100      	bne.n	8002d12 <__iar_annotation$$branch+0x28>
 8002d10:	e276      	b.n	8003200 <__iar_annotation$$branch+0x340>
 8002d12:	1e52      	subs	r2, r2, #1
 8002d14:	d100      	bne.n	8002d18 <__iar_annotation$$branch+0x2e>
 8002d16:	e286      	b.n	8003226 <__iar_annotation$$branch+0x366>
 8002d18:	1e52      	subs	r2, r2, #1
 8002d1a:	d100      	bne.n	8002d1e <__iar_annotation$$branch+0x34>
 8002d1c:	e11d      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002d1e:	1e52      	subs	r2, r2, #1
 8002d20:	d100      	bne.n	8002d24 <__iar_annotation$$branch+0x3a>
 8002d22:	e30d      	b.n	8003340 <__iar_annotation$$branch+0x480>
 8002d24:	1e52      	subs	r2, r2, #1
 8002d26:	d100      	bne.n	8002d2a <__iar_annotation$$branch+0x40>
 8002d28:	e2c6      	b.n	80032b8 <__iar_annotation$$branch+0x3f8>
 8002d2a:	1e52      	subs	r2, r2, #1
 8002d2c:	d100      	bne.n	8002d30 <__iar_annotation$$branch+0x46>
 8002d2e:	e2cc      	b.n	80032ca <__iar_annotation$$branch+0x40a>
 8002d30:	1e52      	subs	r2, r2, #1
 8002d32:	d100      	bne.n	8002d36 <__iar_annotation$$branch+0x4c>
 8002d34:	e2d8      	b.n	80032e8 <__iar_annotation$$branch+0x428>
 8002d36:	1e52      	subs	r2, r2, #1
 8002d38:	d100      	bne.n	8002d3c <__iar_annotation$$branch+0x52>
 8002d3a:	e389      	b.n	8003450 <__iar_annotation$$branch+0x590>
 8002d3c:	1e52      	subs	r2, r2, #1
 8002d3e:	d100      	bne.n	8002d42 <__iar_annotation$$branch+0x58>
 8002d40:	e32b      	b.n	800339a <__iar_annotation$$branch+0x4da>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	d100      	bne.n	8002d48 <__iar_annotation$$branch+0x5e>
 8002d46:	e332      	b.n	80033ae <__iar_annotation$$branch+0x4ee>
 8002d48:	1e52      	subs	r2, r2, #1
 8002d4a:	d100      	bne.n	8002d4e <__iar_annotation$$branch+0x64>
 8002d4c:	e1d5      	b.n	80030fa <__iar_annotation$$branch+0x23a>
 8002d4e:	1e52      	subs	r2, r2, #1
 8002d50:	d100      	bne.n	8002d54 <__iar_annotation$$branch+0x6a>
 8002d52:	e34c      	b.n	80033ee <__iar_annotation$$branch+0x52e>
 8002d54:	1e52      	subs	r2, r2, #1
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d929      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002d5a:	1e92      	subs	r2, r2, #2
 8002d5c:	d100      	bne.n	8002d60 <__iar_annotation$$branch+0x76>
 8002d5e:	e3a3      	b.n	80034a8 <__iar_annotation$$branch+0x5e8>
 8002d60:	1e52      	subs	r2, r2, #1
 8002d62:	d100      	bne.n	8002d66 <__iar_annotation$$branch+0x7c>
 8002d64:	e3b0      	b.n	80034c8 <__iar_annotation$$branch+0x608>
 8002d66:	1e92      	subs	r2, r2, #2
 8002d68:	d021      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002d6a:	1e52      	subs	r2, r2, #1
 8002d6c:	d101      	bne.n	8002d72 <__iar_annotation$$branch+0x4>

08002d6e <__iar_annotation$$branch>:
 8002d6e:	f000 fc88 	bl	8003682 <__iar_annotation$$branch+0x7c2>
 8002d72:	1e52      	subs	r2, r2, #1
 8002d74:	d101      	bne.n	8002d7a <__iar_annotation$$branch+0x4>

08002d76 <__iar_annotation$$branch>:
 8002d76:	f000 fc9a 	bl	80036ae <__iar_annotation$$branch+0x7ee>
 8002d7a:	1e52      	subs	r2, r2, #1
 8002d7c:	d101      	bne.n	8002d82 <__iar_annotation$$branch+0x4>

08002d7e <__iar_annotation$$branch>:
 8002d7e:	f000 fce6 	bl	800374e <__iar_annotation$$branch+0x88e>
 8002d82:	1e52      	subs	r2, r2, #1
 8002d84:	d101      	bne.n	8002d8a <__iar_annotation$$branch+0x4>

08002d86 <__iar_annotation$$branch>:
 8002d86:	f000 fd0f 	bl	80037a8 <__iar_annotation$$branch+0x8e8>
 8002d8a:	1e52      	subs	r2, r2, #1
 8002d8c:	d101      	bne.n	8002d92 <__iar_annotation$$branch+0x4>

08002d8e <__iar_annotation$$branch>:
 8002d8e:	f000 fbe5 	bl	800355c <__iar_annotation$$branch+0x69c>
 8002d92:	1e92      	subs	r2, r2, #2
 8002d94:	d101      	bne.n	8002d9a <__iar_annotation$$branch+0x4>

08002d96 <__iar_annotation$$branch>:
 8002d96:	f000 fc0a 	bl	80035ae <__iar_annotation$$branch+0x6ee>
 8002d9a:	1e52      	subs	r2, r2, #1
 8002d9c:	d101      	bne.n	8002da2 <__iar_annotation$$branch+0x4>

08002d9e <__iar_annotation$$branch>:
 8002d9e:	f000 fc2e 	bl	80035fe <__iar_annotation$$branch+0x73e>
 8002da2:	1e52      	subs	r2, r2, #1
 8002da4:	d101      	bne.n	8002daa <__iar_annotation$$branch+0x4>

08002da6 <__iar_annotation$$branch>:
 8002da6:	f000 fc49 	bl	800363c <__iar_annotation$$branch+0x77c>
 8002daa:	1e52      	subs	r2, r2, #1
 8002dac:	2a02      	cmp	r2, #2
 8002dae:	d801      	bhi.n	8002db4 <__iar_annotation$$branch+0x4>

08002db0 <__iar_annotation$$branch>:
 8002db0:	f000 fe1b 	bl	80039ea <__iar_annotation$$branch+0x106>
 8002db4:	1ed2      	subs	r2, r2, #3
 8002db6:	d101      	bne.n	8002dbc <__iar_annotation$$branch+0x4>

08002db8 <__iar_annotation$$branch>:
 8002db8:	f000 fbf4 	bl	80035a4 <__iar_annotation$$branch+0x6e4>
 8002dbc:	1e52      	subs	r2, r2, #1
 8002dbe:	d101      	bne.n	8002dc4 <__iar_annotation$$branch+0x4>

08002dc0 <__iar_annotation$$branch>:
 8002dc0:	f000 fd96 	bl	80038f0 <__iar_annotation$$branch+0xc>
 8002dc4:	1e52      	subs	r2, r2, #1
 8002dc6:	d0f2      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dc8:	1e52      	subs	r2, r2, #1
 8002dca:	d101      	bne.n	8002dd0 <__iar_annotation$$branch+0x4>

08002dcc <__iar_annotation$$branch>:
 8002dcc:	f000 fda1 	bl	8003912 <__iar_annotation$$branch+0x2e>
 8002dd0:	1e52      	subs	r2, r2, #1
 8002dd2:	d101      	bne.n	8002dd8 <__iar_annotation$$branch+0x4>

08002dd4 <__iar_annotation$$branch>:
 8002dd4:	f000 fdcf 	bl	8003976 <__iar_annotation$$branch+0x92>
 8002dd8:	1e52      	subs	r2, r2, #1
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	d9e7      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dde:	1e92      	subs	r2, r2, #2
 8002de0:	d001      	beq.n	8002de6 <__iar_annotation$$branch+0x12>
 8002de2:	1e92      	subs	r2, r2, #2
 8002de4:	2a05      	cmp	r2, #5
 8002de6:	d801      	bhi.n	8002dec <__iar_annotation$$branch+0x4>

08002de8 <__iar_annotation$$branch>:
 8002de8:	f000 fdfb 	bl	80039e2 <__iar_annotation$$branch+0xfe>
 8002dec:	1f92      	subs	r2, r2, #6
 8002dee:	d101      	bne.n	8002df4 <__iar_annotation$$branch+0x4>

08002df0 <__iar_annotation$$branch>:
 8002df0:	f000 fdd2 	bl	8003998 <__iar_annotation$$branch+0xb4>
 8002df4:	1e52      	subs	r2, r2, #1
 8002df6:	2a03      	cmp	r2, #3
 8002df8:	d9d9      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfa:	3a11      	subs	r2, #17
 8002dfc:	d0d7      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfe:	1e52      	subs	r2, r2, #1
 8002e00:	d100      	bne.n	8002e04 <__iar_annotation$$branch+0x14>
 8002e02:	e150      	b.n	80030a6 <__iar_annotation$$branch+0x1e6>
 8002e04:	3a0f      	subs	r2, #15
 8002e06:	d101      	bne.n	8002e0c <__iar_annotation$$branch+0x4>

08002e08 <__iar_annotation$$branch>:
 8002e08:	f000 fce9 	bl	80037de <__iar_annotation$$branch+0x91e>
 8002e0c:	1fd2      	subs	r2, r2, #7
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	d9cd      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e12:	1f52      	subs	r2, r2, #5
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d9ca      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e18:	3a0d      	subs	r2, #13
 8002e1a:	d0c8      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e1c:	3a12      	subs	r2, #18
 8002e1e:	d101      	bne.n	8002e24 <__iar_annotation$$branch+0x4>

08002e20 <__iar_annotation$$branch>:
 8002e20:	f000 fe18 	bl	8003a54 <__iar_annotation$$branch+0x62>
 8002e24:	3a0c      	subs	r2, #12
 8002e26:	d100      	bne.n	8002e2a <__iar_annotation$$branch+0xa>
 8002e28:	e09a      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002e2a:	1e52      	subs	r2, r2, #1
 8002e2c:	2a02      	cmp	r2, #2
 8002e2e:	d9be      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e30:	1ed2      	subs	r2, r2, #3
 8002e32:	d100      	bne.n	8002e36 <__iar_annotation$$branch+0x16>
 8002e34:	e213      	b.n	800325e <__iar_annotation$$branch+0x39e>
 8002e36:	1e52      	subs	r2, r2, #1
 8002e38:	d100      	bne.n	8002e3c <__iar_annotation$$branch+0x1c>
 8002e3a:	e229      	b.n	8003290 <__iar_annotation$$branch+0x3d0>
 8002e3c:	1e92      	subs	r2, r2, #2
 8002e3e:	d0b6      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e40:	1e52      	subs	r2, r2, #1
 8002e42:	d100      	bne.n	8002e46 <__iar_annotation$$branch+0x26>
 8002e44:	e0e0      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002e46:	1e92      	subs	r2, r2, #2
 8002e48:	2a08      	cmp	r2, #8
 8002e4a:	d801      	bhi.n	8002e50 <__iar_annotation$$branch+0x4>

08002e4c <__iar_annotation$$branch>:
 8002e4c:	f000 fdd3 	bl	80039f6 <__iar_annotation$$branch+0x4>
 8002e50:	3a0a      	subs	r2, #10
 8002e52:	d101      	bne.n	8002e58 <__iar_annotation$$branch+0x4>

08002e54 <__iar_annotation$$branch>:
 8002e54:	f000 fde2 	bl	8003a1c <__iar_annotation$$branch+0x2a>
 8002e58:	a903      	add	r1, sp, #12
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	f001 fb32 	bl	80044c4 <PE_StateMachine_VDM>
 8002e60:	0005      	movs	r5, r0
 8002e62:	7c62      	ldrb	r2, [r4, #17]
 8002e64:	4e31      	ldr	r6, [pc, #196]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002e66:	7ca0      	ldrb	r0, [r4, #18]
 8002e68:	4290      	cmp	r0, r2
 8002e6a:	d007      	beq.n	8002e7c <__iar_annotation$$branch+0x28>
 8002e6c:	74a2      	strb	r2, [r4, #18]
 8002e6e:	2000      	movs	r0, #0
 8002e70:	9000      	str	r0, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	7c21      	ldrb	r1, [r4, #16]
 8002e76:	2004      	movs	r0, #4
 8002e78:	6837      	ldr	r7, [r6, #0]
 8002e7a:	47b8      	blx	r7
 8002e7c:	4668      	mov	r0, sp
 8002e7e:	7b00      	ldrb	r0, [r0, #12]
 8002e80:	2814      	cmp	r0, #20
 8002e82:	d101      	bne.n	8002e88 <__iar_annotation$$branch+0x4>

08002e84 <__iar_annotation$$branch>:
 8002e84:	f000 fdec 	bl	8003a60 <__iar_annotation$$branch+0x6e>
 8002e88:	0020      	movs	r0, r4
 8002e8a:	f7fd fdab 	bl	80009e4 <PE_Check_AMSConflict>
 8002e8e:	2815      	cmp	r0, #21
 8002e90:	d109      	bne.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e92:	4668      	mov	r0, sp
 8002e94:	7b00      	ldrb	r0, [r0, #12]
 8002e96:	2814      	cmp	r0, #20
 8002e98:	d005      	beq.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e9a:	2014      	movs	r0, #20
 8002e9c:	4669      	mov	r1, sp
 8002e9e:	7308      	strb	r0, [r1, #12]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f7fd fd58 	bl	8000956 <PE_Clear_RxEvent>
 8002ea6:	7c62      	ldrb	r2, [r4, #17]
 8002ea8:	7ca0      	ldrb	r0, [r4, #18]
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d007      	beq.n	8002ebe <__iar_annotation$$branch+0x3a>
 8002eae:	74a2      	strb	r2, [r4, #18]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	9000      	str	r0, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	7c21      	ldrb	r1, [r4, #16]
 8002eb8:	2004      	movs	r0, #4
 8002eba:	6835      	ldr	r5, [r6, #0]
 8002ebc:	47a8      	blx	r5
 8002ebe:	2500      	movs	r5, #0

08002ec0 <__iar_annotation$$branch>:
 8002ec0:	f000 fded 	bl	8003a9e <__iar_annotation$$branch+0xac>
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	43ed      	mvns	r5, r5
 8002ec8:	0028      	movs	r0, r5
 8002eca:	e6b2      	b.n	8002c32 <USBPD_PE_StateMachine_SRC+0xa6>
 8002ecc:	74a0      	strb	r0, [r4, #18]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	9000      	str	r0, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	22a6      	movs	r2, #166	; 0xa6
 8002ed6:	7c21      	ldrb	r1, [r4, #16]
 8002ed8:	2004      	movs	r0, #4
 8002eda:	4d14      	ldr	r5, [pc, #80]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002edc:	682d      	ldr	r5, [r5, #0]
 8002ede:	47a8      	blx	r5
 8002ee0:	2502      	movs	r5, #2
 8002ee2:	2032      	movs	r0, #50	; 0x32
 8002ee4:	5c20      	ldrb	r0, [r4, r0]
 8002ee6:	280f      	cmp	r0, #15
 8002ee8:	d001      	beq.n	8002eee <__iar_annotation$$branch+0x2e>
 8002eea:	2814      	cmp	r0, #20
 8002eec:	d11c      	bne.n	8002f28 <__iar_annotation$$branch+0x68>
 8002eee:	4668      	mov	r0, sp
 8002ef0:	7b00      	ldrb	r0, [r0, #12]
 8002ef2:	2814      	cmp	r0, #20
 8002ef4:	d005      	beq.n	8002f02 <__iar_annotation$$branch+0x42>
 8002ef6:	2014      	movs	r0, #20
 8002ef8:	4669      	mov	r1, sp
 8002efa:	7308      	strb	r0, [r1, #12]
 8002efc:	0020      	movs	r0, r4
 8002efe:	f7fd fd2a 	bl	8000956 <PE_Clear_RxEvent>
 8002f02:	2032      	movs	r0, #50	; 0x32
 8002f04:	5c22      	ldrb	r2, [r4, r0]
 8002f06:	7462      	strb	r2, [r4, #17]
 8002f08:	2000      	movs	r0, #0
 8002f0a:	2332      	movs	r3, #50	; 0x32
 8002f0c:	54e0      	strb	r0, [r4, r3]
 8002f0e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002f10:	7ca0      	ldrb	r0, [r4, #18]
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d008      	beq.n	8002f28 <__iar_annotation$$branch+0x68>
 8002f16:	74a2      	strb	r2, [r4, #18]
 8002f18:	2000      	movs	r0, #0
 8002f1a:	9000      	str	r0, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	7c21      	ldrb	r1, [r4, #16]
 8002f20:	2004      	movs	r0, #4
 8002f22:	4e02      	ldr	r6, [pc, #8]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002f24:	6836      	ldr	r6, [r6, #0]
 8002f26:	47b0      	blx	r6
 8002f28:	e6ab      	b.n	8002c82 <USBPD_PE_StateMachine_SRC+0xf6>
 8002f2a:	bf00      	nop
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	fffbffff 	.word	0xfffbffff
 8002f34:	fffdffff 	.word	0xfffdffff
 8002f38:	00008011 	.word	0x00008011
 8002f3c:	0000025e 	.word	0x0000025e
 8002f40:	0000801b 	.word	0x0000801b
 8002f44:	0000f01f 	.word	0x0000f01f
 8002f48:	6860      	ldr	r0, [r4, #4]
 8002f4a:	6801      	ldr	r1, [r0, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4391      	bics	r1, r2
 8002f50:	6001      	str	r1, [r0, #0]
 8002f52:	215f      	movs	r1, #95	; 0x5f
 8002f54:	7c20      	ldrb	r0, [r4, #16]
 8002f56:	f7fd fa93 	bl	8000480 <USBPD_PE_Notification>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	43ed      	mvns	r5, r5
 8002f5e:	e780      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002f60:	6860      	ldr	r0, [r4, #4]
 8002f62:	6801      	ldr	r1, [r0, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	4391      	bics	r1, r2
 8002f68:	6001      	str	r1, [r0, #0]
 8002f6a:	68a0      	ldr	r0, [r4, #8]
 8002f6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d0f3      	beq.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f72:	7c20      	ldrb	r0, [r4, #16]
 8002f74:	4788      	blx	r1
 8002f76:	e7f0      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f78:	2701      	movs	r7, #1
 8002f7a:	6860      	ldr	r0, [r4, #4]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	0bc0      	lsrs	r0, r0, #15
 8002f80:	4038      	ands	r0, r7
 8002f82:	d002      	beq.n	8002f8a <__iar_annotation$$branch+0xca>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	6801      	ldr	r1, [r0, #0]
 8002f88:	e000      	b.n	8002f8c <__iar_annotation$$branch+0xcc>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4668      	mov	r0, sp
 8002f8e:	7b40      	ldrb	r0, [r0, #13]
 8002f90:	f002 fc08 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002f94:	6860      	ldr	r0, [r4, #4]
 8002f96:	6801      	ldr	r1, [r0, #0]
 8002f98:	0b0a      	lsrs	r2, r1, #12
 8002f9a:	403a      	ands	r2, r7
 8002f9c:	d02f      	beq.n	8002ffe <__iar_annotation$$branch+0x13e>
 8002f9e:	078a      	lsls	r2, r1, #30
 8002fa0:	0f92      	lsrs	r2, r2, #30
 8002fa2:	2a01      	cmp	r2, #1
 8002fa4:	d101      	bne.n	8002faa <__iar_annotation$$branch+0xea>
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	e000      	b.n	8002fac <__iar_annotation$$branch+0xec>
 8002faa:	2220      	movs	r2, #32
 8002fac:	2320      	movs	r3, #32
 8002fae:	4399      	bics	r1, r3
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	6002      	str	r2, [r0, #0]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	70f0      	strb	r0, [r6, #3]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f7fe f9f3 	bl	80013a6 <PE_SetPowerNegotiation>
 8002fc0:	6860      	ldr	r0, [r4, #4]
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	0901      	lsrs	r1, r0, #4
 8002fc6:	4039      	ands	r1, r7
 8002fc8:	d005      	beq.n	8002fd6 <__iar_annotation$$branch+0x116>
 8002fca:	48ae      	ldr	r0, [pc, #696]	; (8003284 <__iar_annotation$$branch+0x3c4>)
 8002fcc:	83e0      	strh	r0, [r4, #30]
 8002fce:	2514      	movs	r5, #20
 8002fd0:	2006      	movs	r0, #6
 8002fd2:	7460      	strb	r0, [r4, #17]
 8002fd4:	e745      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002fd6:	0bc0      	lsrs	r0, r0, #15
 8002fd8:	4007      	ands	r7, r0
 8002fda:	d00a      	beq.n	8002ff2 <__iar_annotation$$branch+0x132>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	7800      	ldrb	r0, [r0, #0]
 8002fe0:	0780      	lsls	r0, r0, #30
 8002fe2:	d400      	bmi.n	8002fe6 <__iar_annotation$$branch+0x126>
 8002fe4:	e087      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fe6:	7930      	ldrb	r0, [r6, #4]
 8002fe8:	2814      	cmp	r0, #20
 8002fea:	d300      	bcc.n	8002fee <__iar_annotation$$branch+0x12e>
 8002fec:	e083      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fee:	68e1      	ldr	r1, [r4, #12]
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d100      	bne.n	8002ff6 <__iar_annotation$$branch+0x136>
 8002ff4:	e07f      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002ff6:	1c40      	adds	r0, r0, #1
 8002ff8:	7130      	strb	r0, [r6, #4]
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	e7e9      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8002ffe:	2121      	movs	r1, #33	; 0x21
 8003000:	7c20      	ldrb	r0, [r4, #16]
 8003002:	f7fd fa3d 	bl	8000480 <USBPD_PE_Notification>
 8003006:	e04c      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003008:	a903      	add	r1, sp, #12
 800300a:	0020      	movs	r0, r4
 800300c:	f000 fd8c 	bl	8003b28 <PE_StateMachine_VDMCable>
 8003010:	e726      	b.n	8002e60 <__iar_annotation$$branch+0xc>
 8003012:	8be0      	ldrh	r0, [r4, #30]
 8003014:	03a9      	lsls	r1, r5, #14
 8003016:	4288      	cmp	r0, r1
 8003018:	d102      	bne.n	8003020 <__iar_annotation$$branch+0x160>
 800301a:	2007      	movs	r0, #7
 800301c:	7460      	strb	r0, [r4, #17]
 800301e:	2500      	movs	r5, #0
 8003020:	e71f      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003022:	6960      	ldr	r0, [r4, #20]
 8003024:	0740      	lsls	r0, r0, #29
 8003026:	0fc1      	lsrs	r1, r0, #31
 8003028:	0020      	movs	r0, r4
 800302a:	f000 fd45 	bl	8003ab8 <PE_Send_SRCCapabilities>
 800302e:	2805      	cmp	r0, #5
 8003030:	d002      	beq.n	8003038 <__iar_annotation$$branch+0x178>
 8003032:	2809      	cmp	r0, #9
 8003034:	d0f4      	beq.n	8003020 <__iar_annotation$$branch+0x160>
 8003036:	e011      	b.n	800305c <__iar_annotation$$branch+0x19c>
 8003038:	2001      	movs	r0, #1
 800303a:	7720      	strb	r0, [r4, #28]
 800303c:	6960      	ldr	r0, [r4, #20]
 800303e:	2104      	movs	r1, #4
 8003040:	4301      	orrs	r1, r0
 8003042:	6161      	str	r1, [r4, #20]
 8003044:	2000      	movs	r0, #0
 8003046:	70f0      	strb	r0, [r6, #3]
 8003048:	70b0      	strb	r0, [r6, #2]
 800304a:	83e7      	strh	r7, [r4, #30]
 800304c:	251b      	movs	r5, #27
 800304e:	2016      	movs	r0, #22
 8003050:	7460      	strb	r0, [r4, #17]
 8003052:	210f      	movs	r1, #15
 8003054:	7c20      	ldrb	r0, [r4, #16]
 8003056:	f7fd fa13 	bl	8000480 <USBPD_PE_Notification>
 800305a:	e702      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800305c:	6960      	ldr	r0, [r4, #20]
 800305e:	0741      	lsls	r1, r0, #29
 8003060:	0fc9      	lsrs	r1, r1, #31
 8003062:	d10f      	bne.n	8003084 <__iar_annotation$$branch+0x1c4>
 8003064:	78f0      	ldrb	r0, [r6, #3]
 8003066:	2833      	cmp	r0, #51	; 0x33
 8003068:	d217      	bcs.n	800309a <__iar_annotation$$branch+0x1da>
 800306a:	4887      	ldr	r0, [pc, #540]	; (8003288 <__iar_annotation$$branch+0x3c8>)
 800306c:	83e0      	strh	r0, [r4, #30]
 800306e:	2596      	movs	r5, #150	; 0x96
 8003070:	2008      	movs	r0, #8
 8003072:	7460      	strb	r0, [r4, #17]
 8003074:	4885      	ldr	r0, [pc, #532]	; (800328c <__iar_annotation$$branch+0x3cc>)
 8003076:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003078:	4201      	tst	r1, r0
 800307a:	d002      	beq.n	8003082 <__iar_annotation$$branch+0x1c2>
 800307c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800307e:	0005      	movs	r5, r0
 8003080:	400d      	ands	r5, r1
 8003082:	e6ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003084:	6860      	ldr	r0, [r4, #4]
 8003086:	7800      	ldrb	r0, [r0, #0]
 8003088:	0780      	lsls	r0, r0, #30
 800308a:	0f80      	lsrs	r0, r0, #30
 800308c:	2802      	cmp	r0, #2
 800308e:	d102      	bne.n	8003096 <__iar_annotation$$branch+0x1d6>
 8003090:	7c20      	ldrb	r0, [r4, #16]
 8003092:	f002 fb68 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003096:	2011      	movs	r0, #17
 8003098:	e7c0      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800309a:	2121      	movs	r1, #33	; 0x21
 800309c:	7c20      	ldrb	r0, [r4, #16]
 800309e:	f7fd f9ef 	bl	8000480 <USBPD_PE_Notification>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e795      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030a6:	2100      	movs	r1, #0
 80030a8:	0020      	movs	r0, r4
 80030aa:	f000 fd05 	bl	8003ab8 <PE_Send_SRCCapabilities>
 80030ae:	2805      	cmp	r0, #5
 80030b0:	d107      	bne.n	80030c2 <__iar_annotation$$branch+0x202>
 80030b2:	2104      	movs	r1, #4
 80030b4:	0020      	movs	r0, r4
 80030b6:	f7fe f976 	bl	80013a6 <PE_SetPowerNegotiation>
 80030ba:	2001      	movs	r0, #1
 80030bc:	7720      	strb	r0, [r4, #28]
 80030be:	83e7      	strh	r7, [r4, #30]
 80030c0:	e7c5      	b.n	800304e <__iar_annotation$$branch+0x18e>
 80030c2:	2000      	movs	r0, #0
 80030c4:	7720      	strb	r0, [r4, #28]
 80030c6:	2011      	movs	r0, #17
 80030c8:	e783      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030ca:	03a8      	lsls	r0, r5, #14
 80030cc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80030ce:	4281      	cmp	r1, r0
 80030d0:	d106      	bne.n	80030e0 <__iar_annotation$$branch+0x220>
 80030d2:	2100      	movs	r1, #0
 80030d4:	8461      	strh	r1, [r4, #34]	; 0x22
 80030d6:	7931      	ldrb	r1, [r6, #4]
 80030d8:	1c49      	adds	r1, r1, #1
 80030da:	7131      	strb	r1, [r6, #4]
 80030dc:	2105      	movs	r1, #5
 80030de:	7461      	strb	r1, [r4, #17]
 80030e0:	8be1      	ldrh	r1, [r4, #30]
 80030e2:	4281      	cmp	r1, r0
 80030e4:	d1cd      	bne.n	8003082 <__iar_annotation$$branch+0x1c2>
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	6840      	ldr	r0, [r0, #4]
 80030ea:	0601      	lsls	r1, r0, #24
 80030ec:	0fc9      	lsrs	r1, r1, #31
 80030ee:	d002      	beq.n	80030f6 <__iar_annotation$$branch+0x236>
 80030f0:	78f0      	ldrb	r0, [r6, #3]
 80030f2:	1c40      	adds	r0, r0, #1
 80030f4:	70f0      	strb	r0, [r6, #3]
 80030f6:	2007      	movs	r0, #7
 80030f8:	e76b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2811      	cmp	r0, #17
 8003100:	d109      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003102:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003104:	0bc1      	lsrs	r1, r0, #15
 8003106:	d106      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003108:	0b01      	lsrs	r1, r0, #12
 800310a:	0749      	lsls	r1, r1, #29
 800310c:	d100      	bne.n	8003110 <__iar_annotation$$branch+0x250>
 800310e:	e111      	b.n	8003334 <__iar_annotation$$branch+0x474>
 8003110:	06c0      	lsls	r0, r0, #27
 8003112:	0ec0      	lsrs	r0, r0, #27
 8003114:	2802      	cmp	r0, #2
 8003116:	d000      	beq.n	800311a <__iar_annotation$$branch+0x25a>
 8003118:	e10c      	b.n	8003334 <__iar_annotation$$branch+0x474>
 800311a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800311c:	7881      	ldrb	r1, [r0, #2]
 800311e:	78c2      	ldrb	r2, [r0, #3]
 8003120:	0212      	lsls	r2, r2, #8
 8003122:	1889      	adds	r1, r1, r2
 8003124:	7902      	ldrb	r2, [r0, #4]
 8003126:	0412      	lsls	r2, r2, #16
 8003128:	1889      	adds	r1, r1, r2
 800312a:	7940      	ldrb	r0, [r0, #5]
 800312c:	0600      	lsls	r0, r0, #24
 800312e:	1808      	adds	r0, r1, r0
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003134:	0600      	lsls	r0, r0, #24
 8003136:	0f81      	lsrs	r1, r0, #30
 8003138:	7c20      	ldrb	r0, [r4, #16]
 800313a:	f7fd fd5b 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 800313e:	2304      	movs	r3, #4
 8003140:	466a      	mov	r2, sp
 8003142:	2106      	movs	r1, #6
 8003144:	7c20      	ldrb	r0, [r4, #16]
 8003146:	68a5      	ldr	r5, [r4, #8]
 8003148:	69ad      	ldr	r5, [r5, #24]
 800314a:	47a8      	blx	r5
 800314c:	2009      	movs	r0, #9
 800314e:	7460      	strb	r0, [r4, #17]
 8003150:	2500      	movs	r5, #0
 8003152:	e0e5      	b.n	8003320 <__iar_annotation$$branch+0x460>
 8003154:	2702      	movs	r7, #2
 8003156:	2507      	movs	r5, #7
 8003158:	a901      	add	r1, sp, #4
 800315a:	7c20      	ldrb	r0, [r4, #16]
 800315c:	68a2      	ldr	r2, [r4, #8]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	4790      	blx	r2
 8003162:	280a      	cmp	r0, #10
 8003164:	d010      	beq.n	8003188 <__iar_annotation$$branch+0x2c8>
 8003166:	280b      	cmp	r0, #11
 8003168:	d035      	beq.n	80031d6 <__iar_annotation$$branch+0x316>
 800316a:	280d      	cmp	r0, #13
 800316c:	6860      	ldr	r0, [r4, #4]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	d136      	bne.n	80031e0 <__iar_annotation$$branch+0x320>
 8003172:	0a00      	lsrs	r0, r0, #8
 8003174:	4005      	ands	r5, r0
 8003176:	2d03      	cmp	r5, #3
 8003178:	d101      	bne.n	800317e <__iar_annotation$$branch+0x2be>
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <__iar_annotation$$branch+0x2c0>
 800317e:	230e      	movs	r3, #14
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	220c      	movs	r2, #12
 8003186:	e035      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 8003188:	48a9      	ldr	r0, [pc, #676]	; (8003430 <__iar_annotation$$branch+0x570>)
 800318a:	83e0      	strh	r0, [r4, #30]
 800318c:	271e      	movs	r7, #30
 800318e:	6860      	ldr	r0, [r4, #4]
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	0a00      	lsrs	r0, r0, #8
 8003194:	4005      	ands	r5, r0
 8003196:	2d01      	cmp	r5, #1
 8003198:	d00b      	beq.n	80031b2 <__iar_annotation$$branch+0x2f2>
 800319a:	9801      	ldr	r0, [sp, #4]
 800319c:	2803      	cmp	r0, #3
 800319e:	d108      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031a0:	6960      	ldr	r0, [r4, #20]
 80031a2:	06c0      	lsls	r0, r0, #27
 80031a4:	0f80      	lsrs	r0, r0, #30
 80031a6:	2803      	cmp	r0, #3
 80031a8:	d103      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031aa:	2080      	movs	r0, #128	; 0x80
 80031ac:	0200      	lsls	r0, r0, #8
 80031ae:	83e0      	strh	r0, [r4, #30]
 80031b0:	2700      	movs	r7, #0
 80031b2:	2000      	movs	r0, #0
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	230c      	movs	r3, #12
 80031b8:	2203      	movs	r2, #3
 80031ba:	2100      	movs	r1, #0
 80031bc:	0020      	movs	r0, r4
 80031be:	f7fe f9a7 	bl	8001510 <PE_Send_CtrlMessage>
 80031c2:	6960      	ldr	r0, [r4, #20]
 80031c4:	2118      	movs	r1, #24
 80031c6:	4388      	bics	r0, r1
 80031c8:	9901      	ldr	r1, [sp, #4]
 80031ca:	00c9      	lsls	r1, r1, #3
 80031cc:	2218      	movs	r2, #24
 80031ce:	400a      	ands	r2, r1
 80031d0:	4302      	orrs	r2, r0
 80031d2:	6162      	str	r2, [r4, #20]
 80031d4:	e012      	b.n	80031fc <__iar_annotation$$branch+0x33c>
 80031d6:	2000      	movs	r0, #0
 80031d8:	9000      	str	r0, [sp, #0]
 80031da:	230c      	movs	r3, #12
 80031dc:	2202      	movs	r2, #2
 80031de:	e009      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 80031e0:	0a00      	lsrs	r0, r0, #8
 80031e2:	4005      	ands	r5, r0
 80031e4:	2d03      	cmp	r5, #3
 80031e6:	d101      	bne.n	80031ec <__iar_annotation$$branch+0x32c>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e000      	b.n	80031ee <__iar_annotation$$branch+0x32e>
 80031ec:	230e      	movs	r3, #14
 80031ee:	2000      	movs	r0, #0
 80031f0:	9000      	str	r0, [sp, #0]
 80031f2:	2204      	movs	r2, #4
 80031f4:	2100      	movs	r1, #0
 80031f6:	0020      	movs	r0, r4
 80031f8:	f7fe f98a 	bl	8001510 <PE_Send_CtrlMessage>
 80031fc:	003d      	movs	r5, r7
 80031fe:	e630      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003200:	8be0      	ldrh	r0, [r4, #30]
 8003202:	03a9      	lsls	r1, r5, #14
 8003204:	4288      	cmp	r0, r1
 8003206:	d1fa      	bne.n	80031fe <__iar_annotation$$branch+0x33e>
 8003208:	2104      	movs	r1, #4
 800320a:	0020      	movs	r0, r4
 800320c:	f7fe f8cb 	bl	80013a6 <PE_SetPowerNegotiation>
 8003210:	68a0      	ldr	r0, [r4, #8]
 8003212:	6801      	ldr	r1, [r0, #0]
 8003214:	2900      	cmp	r1, #0
 8003216:	d0f2      	beq.n	80031fe <__iar_annotation$$branch+0x33e>
 8003218:	7c20      	ldrb	r0, [r4, #16]
 800321a:	4788      	blx	r1
 800321c:	2800      	cmp	r0, #0
 800321e:	d000      	beq.n	8003222 <__iar_annotation$$branch+0x362>
 8003220:	e2db      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003222:	200d      	movs	r0, #13
 8003224:	e6d5      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8003226:	2000      	movs	r0, #0
 8003228:	9000      	str	r0, [sp, #0]
 800322a:	2303      	movs	r3, #3
 800322c:	2206      	movs	r2, #6
 800322e:	2100      	movs	r1, #0
 8003230:	0020      	movs	r0, r4
 8003232:	f7fe f96d 	bl	8001510 <PE_Send_CtrlMessage>
 8003236:	2800      	cmp	r0, #0
 8003238:	d110      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 800323a:	2103      	movs	r1, #3
 800323c:	0020      	movs	r0, r4
 800323e:	f7fe f8b2 	bl	80013a6 <PE_SetPowerNegotiation>
 8003242:	2110      	movs	r1, #16
 8003244:	7c20      	ldrb	r0, [r4, #16]
 8003246:	f7fd f91b 	bl	8000480 <USBPD_PE_Notification>
 800324a:	2000      	movs	r0, #0
 800324c:	84a0      	strh	r0, [r4, #36]	; 0x24
 800324e:	6960      	ldr	r0, [r4, #20]
 8003250:	06c0      	lsls	r0, r0, #27
 8003252:	0f80      	lsrs	r0, r0, #30
 8003254:	2803      	cmp	r0, #3
 8003256:	d101      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003258:	4876      	ldr	r0, [pc, #472]	; (8003434 <__iar_annotation$$branch+0x574>)
 800325a:	84a0      	strh	r0, [r4, #36]	; 0x24
 800325c:	e601      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800325e:	2001      	movs	r0, #1
 8003260:	9000      	str	r0, [sp, #0]
 8003262:	2397      	movs	r3, #151	; 0x97
 8003264:	2202      	movs	r2, #2
 8003266:	2100      	movs	r1, #0
 8003268:	0020      	movs	r0, r4
 800326a:	f7fe f951 	bl	8001510 <PE_Send_CtrlMessage>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1f4      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003272:	7725      	strb	r5, [r4, #28]
 8003274:	2129      	movs	r1, #41	; 0x29
 8003276:	7c20      	ldrb	r0, [r4, #16]
 8003278:	f7fd f902 	bl	8000480 <USBPD_PE_Notification>
 800327c:	486e      	ldr	r0, [pc, #440]	; (8003438 <__iar_annotation$$branch+0x578>)
 800327e:	83e0      	strh	r0, [r4, #30]
 8003280:	4d6e      	ldr	r5, [pc, #440]	; (800343c <__iar_annotation$$branch+0x57c>)
 8003282:	e5ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003284:	00008014 	.word	0x00008014
 8003288:	00008096 	.word	0x00008096
 800328c:	00007fff 	.word	0x00007fff
 8003290:	8be0      	ldrh	r0, [r4, #30]
 8003292:	03a9      	lsls	r1, r5, #14
 8003294:	4288      	cmp	r0, r1
 8003296:	d1f4      	bne.n	8003282 <__iar_annotation$$branch+0x3c2>
 8003298:	212a      	movs	r1, #42	; 0x2a
 800329a:	7c20      	ldrb	r0, [r4, #16]
 800329c:	f7fd f8f0 	bl	8000480 <USBPD_PE_Notification>
 80032a0:	2000      	movs	r0, #0
 80032a2:	9000      	str	r0, [sp, #0]
 80032a4:	2303      	movs	r3, #3
 80032a6:	2206      	movs	r2, #6
 80032a8:	2100      	movs	r1, #0
 80032aa:	0020      	movs	r0, r4
 80032ac:	f7fe f930 	bl	8001510 <PE_Send_CtrlMessage>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d109      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032b4:	212e      	movs	r1, #46	; 0x2e
 80032b6:	e6cd      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032b8:	2000      	movs	r0, #0
 80032ba:	9000      	str	r0, [sp, #0]
 80032bc:	2307      	movs	r3, #7
 80032be:	2203      	movs	r2, #3
 80032c0:	2100      	movs	r1, #0
 80032c2:	0020      	movs	r0, r4
 80032c4:	f7fe f924 	bl	8001510 <PE_Send_CtrlMessage>
 80032c8:	e5cb      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80032ca:	2000      	movs	r0, #0
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	2312      	movs	r3, #18
 80032d0:	220d      	movs	r2, #13
 80032d2:	2031      	movs	r0, #49	; 0x31
 80032d4:	5c21      	ldrb	r1, [r4, r0]
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7fe f91a 	bl	8001510 <PE_Send_CtrlMessage>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d1f3      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032e0:	83e7      	strh	r7, [r4, #30]
 80032e2:	251b      	movs	r5, #27
 80032e4:	2130      	movs	r1, #48	; 0x30
 80032e6:	e6b5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032e8:	4668      	mov	r0, sp
 80032ea:	7b00      	ldrb	r0, [r0, #12]
 80032ec:	2814      	cmp	r0, #20
 80032ee:	d021      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 80032f0:	2030      	movs	r0, #48	; 0x30
 80032f2:	5c20      	ldrb	r0, [r4, r0]
 80032f4:	2231      	movs	r2, #49	; 0x31
 80032f6:	5ca2      	ldrb	r2, [r4, r2]
 80032f8:	4290      	cmp	r0, r2
 80032fa:	d11b      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 80032fc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80032fe:	4001      	ands	r1, r0
 8003300:	2903      	cmp	r1, #3
 8003302:	d117      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 8003304:	2131      	movs	r1, #49	; 0x31
 8003306:	7c20      	ldrb	r0, [r4, #16]
 8003308:	f7fd f8ba 	bl	8000480 <USBPD_PE_Notification>
 800330c:	2030      	movs	r0, #48	; 0x30
 800330e:	5c20      	ldrb	r0, [r4, r0]
 8003310:	2800      	cmp	r0, #0
 8003312:	d102      	bne.n	800331a <__iar_annotation$$branch+0x45a>
 8003314:	2007      	movs	r0, #7
 8003316:	7460      	strb	r0, [r4, #17]
 8003318:	e002      	b.n	8003320 <__iar_annotation$$branch+0x460>
 800331a:	2003      	movs	r0, #3
 800331c:	7460      	strb	r0, [r4, #17]
 800331e:	2500      	movs	r5, #0
 8003320:	4668      	mov	r0, sp
 8003322:	7b00      	ldrb	r0, [r0, #12]
 8003324:	2814      	cmp	r0, #20
 8003326:	d005      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 8003328:	2014      	movs	r0, #20
 800332a:	4669      	mov	r1, sp
 800332c:	7308      	strb	r0, [r1, #12]
 800332e:	0020      	movs	r0, r4
 8003330:	f7fd fb11 	bl	8000956 <PE_Clear_RxEvent>
 8003334:	8be0      	ldrh	r0, [r4, #30]
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	0209      	lsls	r1, r1, #8
 800333a:	4288      	cmp	r0, r1
 800333c:	d1c4      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 800333e:	e24c      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003340:	6860      	ldr	r0, [r4, #4]
 8003342:	7800      	ldrb	r0, [r0, #0]
 8003344:	0780      	lsls	r0, r0, #30
 8003346:	0f80      	lsrs	r0, r0, #30
 8003348:	2802      	cmp	r0, #2
 800334a:	d102      	bne.n	8003352 <__iar_annotation$$branch+0x492>
 800334c:	7c20      	ldrb	r0, [r4, #16]
 800334e:	f002 fa0a 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003352:	2105      	movs	r1, #5
 8003354:	0020      	movs	r0, r4
 8003356:	f7fd fa99 	bl	800088c <PE_Send_RESET>
 800335a:	6860      	ldr	r0, [r4, #4]
 800335c:	6801      	ldr	r1, [r0, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	4391      	bics	r1, r2
 8003362:	6001      	str	r1, [r0, #0]
 8003364:	78b0      	ldrb	r0, [r6, #2]
 8003366:	1c40      	adds	r0, r0, #1
 8003368:	70b0      	strb	r0, [r6, #2]
 800336a:	6961      	ldr	r1, [r4, #20]
 800336c:	4834      	ldr	r0, [pc, #208]	; (8003440 <__iar_annotation$$branch+0x580>)
 800336e:	4008      	ands	r0, r1
 8003370:	6160      	str	r0, [r4, #20]
 8003372:	2100      	movs	r1, #0
 8003374:	2232      	movs	r2, #50	; 0x32
 8003376:	54a1      	strb	r1, [r4, r2]
 8003378:	4932      	ldr	r1, [pc, #200]	; (8003444 <__iar_annotation$$branch+0x584>)
 800337a:	4001      	ands	r1, r0
 800337c:	6161      	str	r1, [r4, #20]
 800337e:	2202      	movs	r2, #2
 8003380:	2101      	movs	r1, #1
 8003382:	0020      	movs	r0, r4
 8003384:	f7fe f806 	bl	8001394 <PE_CallHardResetCallback>
 8003388:	2169      	movs	r1, #105	; 0x69
 800338a:	4668      	mov	r0, sp
 800338c:	7b40      	ldrb	r0, [r0, #13]
 800338e:	f7fd f877 	bl	8000480 <USBPD_PE_Notification>
 8003392:	83e7      	strh	r7, [r4, #30]
 8003394:	251b      	movs	r5, #27
 8003396:	2015      	movs	r0, #21
 8003398:	e61b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 800339a:	6860      	ldr	r0, [r4, #4]
 800339c:	7800      	ldrb	r0, [r0, #0]
 800339e:	0780      	lsls	r0, r0, #30
 80033a0:	0f80      	lsrs	r0, r0, #30
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d1f0      	bne.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033a6:	7c20      	ldrb	r0, [r4, #16]
 80033a8:	f002 f9dd 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 80033ac:	e7ec      	b.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033ae:	8be0      	ldrh	r0, [r4, #30]
 80033b0:	03a9      	lsls	r1, r5, #14
 80033b2:	4288      	cmp	r0, r1
 80033b4:	d11a      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 80033b6:	6960      	ldr	r0, [r4, #20]
 80033b8:	78b1      	ldrb	r1, [r6, #2]
 80033ba:	2903      	cmp	r1, #3
 80033bc:	d303      	bcc.n	80033c6 <__iar_annotation$$branch+0x506>
 80033be:	0741      	lsls	r1, r0, #29
 80033c0:	0fc9      	lsrs	r1, r1, #31
 80033c2:	d130      	bne.n	8003426 <__iar_annotation$$branch+0x566>
 80033c4:	e66d      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 80033c6:	4920      	ldr	r1, [pc, #128]	; (8003448 <__iar_annotation$$branch+0x588>)
 80033c8:	83e1      	strh	r1, [r4, #30]
 80033ca:	2117      	movs	r1, #23
 80033cc:	7461      	strb	r1, [r4, #17]
 80033ce:	2500      	movs	r5, #0
 80033d0:	0540      	lsls	r0, r0, #21
 80033d2:	0f80      	lsrs	r0, r0, #30
 80033d4:	1e42      	subs	r2, r0, #1
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	0fd2      	lsrs	r2, r2, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	0020      	movs	r0, r4
 80033de:	f7fd ffd9 	bl	8001394 <PE_CallHardResetCallback>
 80033e2:	2203      	movs	r2, #3
 80033e4:	2101      	movs	r1, #1
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7fd ffd4 	bl	8001394 <PE_CallHardResetCallback>
 80033ec:	e539      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80033ee:	2100      	movs	r1, #0
 80033f0:	4668      	mov	r0, sp
 80033f2:	7b40      	ldrb	r0, [r0, #13]
 80033f4:	68a2      	ldr	r2, [r4, #8]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033f8:	4790      	blx	r2
 80033fa:	2801      	cmp	r0, #1
 80033fc:	d105      	bne.n	800340a <__iar_annotation$$branch+0x54a>
 80033fe:	4813      	ldr	r0, [pc, #76]	; (800344c <__iar_annotation$$branch+0x58c>)
 8003400:	83e0      	strh	r0, [r4, #30]
 8003402:	25c8      	movs	r5, #200	; 0xc8
 8003404:	00ad      	lsls	r5, r5, #2
 8003406:	2013      	movs	r0, #19
 8003408:	7460      	strb	r0, [r4, #17]
 800340a:	8be0      	ldrh	r0, [r4, #30]
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	0209      	lsls	r1, r1, #8
 8003410:	4288      	cmp	r0, r1
 8003412:	d1eb      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 8003414:	2206      	movs	r2, #6
 8003416:	2101      	movs	r1, #1
 8003418:	0020      	movs	r0, r4
 800341a:	f7fd ffbb 	bl	8001394 <PE_CallHardResetCallback>
 800341e:	6960      	ldr	r0, [r4, #20]
 8003420:	0741      	lsls	r1, r0, #29
 8003422:	0fc9      	lsrs	r1, r1, #31
 8003424:	d003      	beq.n	800342e <__iar_annotation$$branch+0x56e>
 8003426:	68a0      	ldr	r0, [r4, #8]
 8003428:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800342a:	2800      	cmp	r0, #0
 800342c:	d137      	bne.n	800349e <__iar_annotation$$branch+0x5de>
 800342e:	e638      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003430:	0000801e 	.word	0x0000801e
 8003434:	0000b6b0 	.word	0x0000b6b0
 8003438:	00008226 	.word	0x00008226
 800343c:	00000226 	.word	0x00000226
 8003440:	fffff9ff 	.word	0xfffff9ff
 8003444:	fffffe3f 	.word	0xfffffe3f
 8003448:	0000828a 	.word	0x0000828a
 800344c:	00008320 	.word	0x00008320
 8003450:	8be0      	ldrh	r0, [r4, #30]
 8003452:	03a9      	lsls	r1, r5, #14
 8003454:	4288      	cmp	r0, r1
 8003456:	d126      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 8003458:	2204      	movs	r2, #4
 800345a:	2101      	movs	r1, #1
 800345c:	0020      	movs	r0, r4
 800345e:	f7fd ff99 	bl	8001394 <PE_CallHardResetCallback>
 8003462:	2101      	movs	r1, #1
 8003464:	4668      	mov	r0, sp
 8003466:	7b40      	ldrb	r0, [r0, #13]
 8003468:	68a2      	ldr	r2, [r4, #8]
 800346a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800346c:	4790      	blx	r2
 800346e:	2801      	cmp	r0, #1
 8003470:	d10d      	bne.n	800348e <__iar_annotation$$branch+0x5ce>
 8003472:	0020      	movs	r0, r4
 8003474:	f7fd fb1d 	bl	8000ab2 <PE_Reset_HardReset>
 8003478:	2168      	movs	r1, #104	; 0x68
 800347a:	4668      	mov	r0, sp
 800347c:	7b40      	ldrb	r0, [r0, #13]
 800347e:	f7fc ffff 	bl	8000480 <USBPD_PE_Notification>
 8003482:	2205      	movs	r2, #5
 8003484:	2101      	movs	r1, #1
 8003486:	0020      	movs	r0, r4
 8003488:	f7fd ff84 	bl	8001394 <PE_CallHardResetCallback>
 800348c:	e633      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 800348e:	2206      	movs	r2, #6
 8003490:	2101      	movs	r1, #1
 8003492:	0020      	movs	r0, r4
 8003494:	f7fd ff7e 	bl	8001394 <PE_CallHardResetCallback>
 8003498:	68a0      	ldr	r0, [r4, #8]
 800349a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800349c:	2800      	cmp	r0, #0
 800349e:	d000      	beq.n	80034a2 <__iar_annotation$$branch+0x5e2>
 80034a0:	e2d6      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80034a2:	2500      	movs	r5, #0
 80034a4:	7465      	strb	r5, [r4, #17]
 80034a6:	e4dc      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80034a8:	2001      	movs	r0, #1
 80034aa:	9000      	str	r0, [sp, #0]
 80034ac:	231b      	movs	r3, #27
 80034ae:	2207      	movs	r2, #7
 80034b0:	2100      	movs	r1, #0
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7fe f82c 	bl	8001510 <PE_Send_CtrlMessage>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f4      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 80034bc:	2006      	movs	r0, #6
 80034be:	7720      	strb	r0, [r4, #28]
 80034c0:	83e7      	strh	r7, [r4, #30]
 80034c2:	251b      	movs	r5, #27
 80034c4:	210b      	movs	r1, #11
 80034c6:	e5c5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80034c8:	4668      	mov	r0, sp
 80034ca:	7b00      	ldrb	r0, [r0, #12]
 80034cc:	2811      	cmp	r0, #17
 80034ce:	d13e      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 80034d0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80034d2:	0bc1      	lsrs	r1, r0, #15
 80034d4:	d11f      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034d6:	0441      	lsls	r1, r0, #17
 80034d8:	0f49      	lsrs	r1, r1, #29
 80034da:	d01c      	beq.n	8003516 <__iar_annotation$$branch+0x656>
 80034dc:	06c0      	lsls	r0, r0, #27
 80034de:	0ec0      	lsrs	r0, r0, #27
 80034e0:	2801      	cmp	r0, #1
 80034e2:	d118      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034e4:	008b      	lsls	r3, r1, #2
 80034e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80034e8:	1c82      	adds	r2, r0, #2
 80034ea:	2104      	movs	r1, #4
 80034ec:	7c20      	ldrb	r0, [r4, #16]
 80034ee:	68a5      	ldr	r5, [r4, #8]
 80034f0:	69ad      	ldr	r5, [r5, #24]
 80034f2:	47a8      	blx	r5
 80034f4:	2003      	movs	r0, #3
 80034f6:	7460      	strb	r0, [r4, #17]
 80034f8:	2500      	movs	r5, #0
 80034fa:	4668      	mov	r0, sp
 80034fc:	7b00      	ldrb	r0, [r0, #12]
 80034fe:	2814      	cmp	r0, #20
 8003500:	d005      	beq.n	800350e <__iar_annotation$$branch+0x64e>
 8003502:	2014      	movs	r0, #20
 8003504:	4669      	mov	r1, sp
 8003506:	7308      	strb	r0, [r1, #12]
 8003508:	0020      	movs	r0, r4
 800350a:	f7fd fa24 	bl	8000956 <PE_Clear_RxEvent>
 800350e:	210d      	movs	r1, #13
 8003510:	7c20      	ldrb	r0, [r4, #16]
 8003512:	f7fc ffb5 	bl	8000480 <USBPD_PE_Notification>
 8003516:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003518:	21f0      	movs	r1, #240	; 0xf0
 800351a:	0209      	lsls	r1, r1, #8
 800351c:	4001      	ands	r1, r0
 800351e:	d116      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 8003520:	06c0      	lsls	r0, r0, #27
 8003522:	0ec0      	lsrs	r0, r0, #27
 8003524:	2804      	cmp	r0, #4
 8003526:	d001      	beq.n	800352c <__iar_annotation$$branch+0x66c>
 8003528:	2810      	cmp	r0, #16
 800352a:	d110      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 800352c:	2003      	movs	r0, #3
 800352e:	7460      	strb	r0, [r4, #17]
 8003530:	2500      	movs	r5, #0
 8003532:	4668      	mov	r0, sp
 8003534:	7b00      	ldrb	r0, [r0, #12]
 8003536:	2814      	cmp	r0, #20
 8003538:	d005      	beq.n	8003546 <__iar_annotation$$branch+0x686>
 800353a:	2014      	movs	r0, #20
 800353c:	4669      	mov	r1, sp
 800353e:	7308      	strb	r0, [r1, #12]
 8003540:	0020      	movs	r0, r4
 8003542:	f7fd fa08 	bl	8000956 <PE_Clear_RxEvent>
 8003546:	210e      	movs	r1, #14
 8003548:	7c20      	ldrb	r0, [r4, #16]
 800354a:	f7fc ff99 	bl	8000480 <USBPD_PE_Notification>
 800354e:	8be0      	ldrh	r0, [r4, #30]
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0209      	lsls	r1, r1, #8
 8003554:	4288      	cmp	r0, r1
 8003556:	d11f      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003558:	2003      	movs	r0, #3
 800355a:	e55f      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800355c:	68a0      	ldr	r0, [r4, #8]
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	2900      	cmp	r1, #0
 8003562:	d01f      	beq.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003564:	7c20      	ldrb	r0, [r4, #16]
 8003566:	4788      	blx	r1
 8003568:	280a      	cmp	r0, #10
 800356a:	d002      	beq.n	8003572 <__iar_annotation$$branch+0x6b2>
 800356c:	280d      	cmp	r0, #13
 800356e:	d014      	beq.n	800359a <__iar_annotation$$branch+0x6da>
 8003570:	e018      	b.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003572:	1cf8      	adds	r0, r7, #3
 8003574:	83e0      	strh	r0, [r4, #30]
 8003576:	251e      	movs	r5, #30
 8003578:	2000      	movs	r0, #0
 800357a:	9000      	str	r0, [sp, #0]
 800357c:	2324      	movs	r3, #36	; 0x24
 800357e:	2203      	movs	r2, #3
 8003580:	2100      	movs	r1, #0
 8003582:	0020      	movs	r0, r4
 8003584:	f7fd ffc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003588:	2800      	cmp	r0, #0
 800358a:	d105      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 800358c:	2201      	movs	r2, #1
 800358e:	2101      	movs	r1, #1
 8003590:	7c20      	ldrb	r0, [r4, #16]
 8003592:	68a3      	ldr	r3, [r4, #8]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	4798      	blx	r3
 8003598:	e463      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800359a:	2000      	movs	r0, #0
 800359c:	9000      	str	r0, [sp, #0]
 800359e:	2303      	movs	r3, #3
 80035a0:	220c      	movs	r2, #12
 80035a2:	e68d      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035a4:	2000      	movs	r0, #0
 80035a6:	9000      	str	r0, [sp, #0]
 80035a8:	2303      	movs	r3, #3
 80035aa:	2204      	movs	r2, #4
 80035ac:	e688      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035ae:	8be0      	ldrh	r0, [r4, #30]
 80035b0:	03a9      	lsls	r1, r5, #14
 80035b2:	4288      	cmp	r0, r1
 80035b4:	d1f0      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035b6:	2104      	movs	r1, #4
 80035b8:	0020      	movs	r0, r4
 80035ba:	f7fd fef4 	bl	80013a6 <PE_SetPowerNegotiation>
 80035be:	6860      	ldr	r0, [r4, #4]
 80035c0:	6801      	ldr	r1, [r0, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	430a      	orrs	r2, r1
 80035c6:	6002      	str	r2, [r0, #0]
 80035c8:	2206      	movs	r2, #6
 80035ca:	2101      	movs	r1, #1
 80035cc:	7c20      	ldrb	r0, [r4, #16]
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	4798      	blx	r3
 80035d4:	2207      	movs	r2, #7
 80035d6:	2101      	movs	r1, #1
 80035d8:	7c20      	ldrb	r0, [r4, #16]
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	4798      	blx	r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	7c20      	ldrb	r0, [r4, #16]
 80035e4:	f002 f889 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80035e8:	2000      	movs	r0, #0
 80035ea:	9000      	str	r0, [sp, #0]
 80035ec:	2325      	movs	r3, #37	; 0x25
 80035ee:	2206      	movs	r2, #6
 80035f0:	2100      	movs	r1, #0
 80035f2:	0020      	movs	r0, r4
 80035f4:	f7fd ff8c 	bl	8001510 <PE_Send_CtrlMessage>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d1cd      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035fc:	e0c9      	b.n	8003792 <__iar_annotation$$branch+0x8d2>
 80035fe:	4668      	mov	r0, sp
 8003600:	7b00      	ldrb	r0, [r0, #12]
 8003602:	2811      	cmp	r0, #17
 8003604:	d10b      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 8003606:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003608:	4001      	ands	r1, r0
 800360a:	2906      	cmp	r1, #6
 800360c:	d107      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 800360e:	2014      	movs	r0, #20
 8003610:	4669      	mov	r1, sp
 8003612:	7308      	strb	r0, [r1, #12]
 8003614:	0020      	movs	r0, r4
 8003616:	f7fd f99e 	bl	8000956 <PE_Clear_RxEvent>
 800361a:	2026      	movs	r0, #38	; 0x26
 800361c:	7460      	strb	r0, [r4, #17]
 800361e:	8be0      	ldrh	r0, [r4, #30]
 8003620:	03a9      	lsls	r1, r5, #14
 8003622:	4288      	cmp	r0, r1
 8003624:	d1b8      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800362a:	2800      	cmp	r0, #0
 800362c:	d000      	beq.n	8003630 <__iar_annotation$$branch+0x770>
 800362e:	e20f      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 8003630:	220a      	movs	r2, #10
 8003632:	2101      	movs	r1, #1
 8003634:	7c20      	ldrb	r0, [r4, #16]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	4798      	blx	r3
 800363a:	e0ce      	b.n	80037da <__iar_annotation$$branch+0x91a>
 800363c:	2100      	movs	r1, #0
 800363e:	0020      	movs	r0, r4
 8003640:	f7fd f944 	bl	80008cc <PE_ChangePowerRole>
 8003644:	220d      	movs	r2, #13
 8003646:	2100      	movs	r1, #0
 8003648:	7c20      	ldrb	r0, [r4, #16]
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	4798      	blx	r3
 8003650:	2114      	movs	r1, #20
 8003652:	7c20      	ldrb	r0, [r4, #16]
 8003654:	f7fc ff14 	bl	8000480 <USBPD_PE_Notification>
 8003658:	220e      	movs	r2, #14
 800365a:	2100      	movs	r1, #0
 800365c:	7c20      	ldrb	r0, [r4, #16]
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	4798      	blx	r3
 8003664:	6860      	ldr	r0, [r4, #4]
 8003666:	7800      	ldrb	r0, [r0, #0]
 8003668:	0780      	lsls	r0, r0, #30
 800366a:	0f80      	lsrs	r0, r0, #30
 800366c:	2801      	cmp	r0, #1
 800366e:	d104      	bne.n	800367a <__iar_annotation$$branch+0x7ba>
 8003670:	2101      	movs	r1, #1
 8003672:	4668      	mov	r0, sp
 8003674:	7b40      	ldrb	r0, [r0, #13]
 8003676:	f002 f895 	bl	80057a4 <USBPD_PRL_SOPCapability>
 800367a:	0020      	movs	r0, r4
 800367c:	f7fd fa90 	bl	8000ba0 <PE_Reset_StateMachine>
 8003680:	e4cd      	b.n	800301e <__iar_annotation$$branch+0x15e>
 8003682:	2001      	movs	r0, #1
 8003684:	9000      	str	r0, [sp, #0]
 8003686:	231f      	movs	r3, #31
 8003688:	220a      	movs	r2, #10
 800368a:	2100      	movs	r1, #0
 800368c:	0020      	movs	r0, r4
 800368e:	f7fd ff3f 	bl	8001510 <PE_Send_CtrlMessage>
 8003692:	2800      	cmp	r0, #0
 8003694:	d1c6      	bne.n	8003624 <__iar_annotation$$branch+0x764>
 8003696:	2008      	movs	r0, #8
 8003698:	7720      	strb	r0, [r4, #28]
 800369a:	83e7      	strh	r7, [r4, #30]
 800369c:	251b      	movs	r5, #27
 800369e:	2202      	movs	r2, #2
 80036a0:	2101      	movs	r1, #1
 80036a2:	7c20      	ldrb	r0, [r4, #16]
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	4798      	blx	r3
 80036aa:	2139      	movs	r1, #57	; 0x39
 80036ac:	e4d2      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80036ae:	4668      	mov	r0, sp
 80036b0:	7b00      	ldrb	r0, [r0, #12]
 80036b2:	2811      	cmp	r0, #17
 80036b4:	d145      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036b6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80036b8:	391f      	subs	r1, #31
 80036ba:	4001      	ands	r1, r0
 80036bc:	d141      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036be:	06c0      	lsls	r0, r0, #27
 80036c0:	0ec0      	lsrs	r0, r0, #27
 80036c2:	2803      	cmp	r0, #3
 80036c4:	d006      	beq.n	80036d4 <__iar_annotation$$branch+0x814>
 80036c6:	2804      	cmp	r0, #4
 80036c8:	d012      	beq.n	80036f0 <__iar_annotation$$branch+0x830>
 80036ca:	280c      	cmp	r0, #12
 80036cc:	d008      	beq.n	80036e0 <__iar_annotation$$branch+0x820>
 80036ce:	2810      	cmp	r0, #16
 80036d0:	d020      	beq.n	8003714 <__iar_annotation$$branch+0x854>
 80036d2:	e036      	b.n	8003742 <__iar_annotation$$branch+0x882>
 80036d4:	213a      	movs	r1, #58	; 0x3a
 80036d6:	7c20      	ldrb	r0, [r4, #16]
 80036d8:	f7fc fed2 	bl	8000480 <USBPD_PE_Notification>
 80036dc:	2020      	movs	r0, #32
 80036de:	e012      	b.n	8003706 <__iar_annotation$$branch+0x846>
 80036e0:	2205      	movs	r2, #5
 80036e2:	2101      	movs	r1, #1
 80036e4:	7c20      	ldrb	r0, [r4, #16]
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	4798      	blx	r3
 80036ec:	213b      	movs	r1, #59	; 0x3b
 80036ee:	e006      	b.n	80036fe <__iar_annotation$$branch+0x83e>
 80036f0:	2204      	movs	r2, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	7c20      	ldrb	r0, [r4, #16]
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	4798      	blx	r3
 80036fc:	2116      	movs	r1, #22
 80036fe:	7c20      	ldrb	r0, [r4, #16]
 8003700:	f7fc febe 	bl	8000480 <USBPD_PE_Notification>
 8003704:	2003      	movs	r0, #3
 8003706:	7460      	strb	r0, [r4, #17]
 8003708:	2500      	movs	r5, #0
 800370a:	4668      	mov	r0, sp
 800370c:	7b00      	ldrb	r0, [r0, #12]
 800370e:	2814      	cmp	r0, #20
 8003710:	d111      	bne.n	8003736 <__iar_annotation$$branch+0x876>
 8003712:	e016      	b.n	8003742 <__iar_annotation$$branch+0x882>
 8003714:	2204      	movs	r2, #4
 8003716:	2101      	movs	r1, #1
 8003718:	7c20      	ldrb	r0, [r4, #16]
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	4798      	blx	r3
 8003720:	2117      	movs	r1, #23
 8003722:	7c20      	ldrb	r0, [r4, #16]
 8003724:	f7fc feac 	bl	8000480 <USBPD_PE_Notification>
 8003728:	2003      	movs	r0, #3
 800372a:	7460      	strb	r0, [r4, #17]
 800372c:	2500      	movs	r5, #0
 800372e:	4668      	mov	r0, sp
 8003730:	7b00      	ldrb	r0, [r0, #12]
 8003732:	2814      	cmp	r0, #20
 8003734:	d005      	beq.n	8003742 <__iar_annotation$$branch+0x882>
 8003736:	2014      	movs	r0, #20
 8003738:	4669      	mov	r1, sp
 800373a:	7308      	strb	r0, [r1, #12]
 800373c:	0020      	movs	r0, r4
 800373e:	f7fd f90a 	bl	8000956 <PE_Clear_RxEvent>
 8003742:	8be0      	ldrh	r0, [r4, #30]
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0209      	lsls	r1, r1, #8
 8003748:	4288      	cmp	r0, r1
 800374a:	d12c      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 800374c:	e704      	b.n	8003558 <__iar_annotation$$branch+0x698>
 800374e:	6860      	ldr	r0, [r4, #4]
 8003750:	6801      	ldr	r1, [r0, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	430a      	orrs	r2, r1
 8003756:	6002      	str	r2, [r0, #0]
 8003758:	7f20      	ldrb	r0, [r4, #28]
 800375a:	2809      	cmp	r0, #9
 800375c:	d005      	beq.n	800376a <__iar_annotation$$branch+0x8aa>
 800375e:	2206      	movs	r2, #6
 8003760:	2101      	movs	r1, #1
 8003762:	7c20      	ldrb	r0, [r4, #16]
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	4798      	blx	r3
 800376a:	2207      	movs	r2, #7
 800376c:	2101      	movs	r1, #1
 800376e:	7c20      	ldrb	r0, [r4, #16]
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	4798      	blx	r3
 8003776:	2100      	movs	r1, #0
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f001 ffbe 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 800377e:	2000      	movs	r0, #0
 8003780:	9000      	str	r0, [sp, #0]
 8003782:	2321      	movs	r3, #33	; 0x21
 8003784:	2206      	movs	r2, #6
 8003786:	2100      	movs	r1, #0
 8003788:	0020      	movs	r0, r4
 800378a:	f7fd fec1 	bl	8001510 <PE_Send_CtrlMessage>
 800378e:	2800      	cmp	r0, #0
 8003790:	d109      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 8003792:	2208      	movs	r2, #8
 8003794:	2101      	movs	r1, #1
 8003796:	7c20      	ldrb	r0, [r4, #16]
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	4798      	blx	r3
 800379e:	48c5      	ldr	r0, [pc, #788]	; (8003ab4 <.text_3>)
 80037a0:	83e0      	strh	r0, [r4, #30]
 80037a2:	25eb      	movs	r5, #235	; 0xeb
 80037a4:	006d      	lsls	r5, r5, #1
 80037a6:	e6f7      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80037a8:	4668      	mov	r0, sp
 80037aa:	7b00      	ldrb	r0, [r0, #12]
 80037ac:	2811      	cmp	r0, #17
 80037ae:	d10b      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80037b2:	4001      	ands	r1, r0
 80037b4:	2906      	cmp	r1, #6
 80037b6:	d107      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b8:	2026      	movs	r0, #38	; 0x26
 80037ba:	7460      	strb	r0, [r4, #17]
 80037bc:	2014      	movs	r0, #20
 80037be:	4669      	mov	r1, sp
 80037c0:	7308      	strb	r0, [r1, #12]
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fd f8c7 	bl	8000956 <PE_Clear_RxEvent>
 80037c8:	8be0      	ldrh	r0, [r4, #30]
 80037ca:	03a9      	lsls	r1, r5, #14
 80037cc:	4288      	cmp	r0, r1
 80037ce:	d1ea      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037d0:	68a0      	ldr	r0, [r4, #8]
 80037d2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d000      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80037d8:	e13a      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80037da:	200f      	movs	r0, #15
 80037dc:	e6bd      	b.n	800355a <__iar_annotation$$branch+0x69a>
 80037de:	8be0      	ldrh	r0, [r4, #30]
 80037e0:	03a9      	lsls	r1, r5, #14
 80037e2:	4288      	cmp	r0, r1
 80037e4:	d1df      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037e6:	220e      	movs	r2, #14
 80037e8:	2101      	movs	r1, #1
 80037ea:	7c20      	ldrb	r0, [r4, #16]
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	4798      	blx	r3
 80037f2:	6860      	ldr	r0, [r4, #4]
 80037f4:	7800      	ldrb	r0, [r0, #0]
 80037f6:	0780      	lsls	r0, r0, #30
 80037f8:	0f80      	lsrs	r0, r0, #30
 80037fa:	2802      	cmp	r0, #2
 80037fc:	d102      	bne.n	8003804 <__iar_annotation$$branch+0x944>
 80037fe:	7c20      	ldrb	r0, [r4, #16]
 8003800:	f001 ffb1 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003804:	0020      	movs	r0, r4
 8003806:	f7fd f9cb 	bl	8000ba0 <PE_Reset_StateMachine>
 800380a:	2115      	movs	r1, #21
 800380c:	e74e      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 800380e:	2803      	cmp	r0, #3
 8003810:	d110      	bne.n	8003834 <__iar_annotation$$branch+0x974>
 8003812:	2000      	movs	r0, #0
 8003814:	7720      	strb	r0, [r4, #28]
 8003816:	6860      	ldr	r0, [r4, #4]
 8003818:	7800      	ldrb	r0, [r0, #0]
 800381a:	0780      	lsls	r0, r0, #30
 800381c:	0f80      	lsrs	r0, r0, #30
 800381e:	2802      	cmp	r0, #2
 8003820:	d102      	bne.n	8003828 <__iar_annotation$$branch+0x968>
 8003822:	7c20      	ldrb	r0, [r4, #16]
 8003824:	f001 ff9f 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003828:	2004      	movs	r0, #4
 800382a:	7460      	strb	r0, [r4, #17]
 800382c:	2167      	movs	r1, #103	; 0x67
 800382e:	7c20      	ldrb	r0, [r4, #16]
 8003830:	f7fc fe26 	bl	8000480 <USBPD_PE_Notification>
 8003834:	4668      	mov	r0, sp
 8003836:	7b00      	ldrb	r0, [r0, #12]
 8003838:	2814      	cmp	r0, #20
 800383a:	d00d      	beq.n	8003858 <__iar_annotation$$branch+0x998>
 800383c:	0020      	movs	r0, r4
 800383e:	f7fe f917 	bl	8001a70 <PE_ManageRXEvent>
 8003842:	4668      	mov	r0, sp
 8003844:	7b00      	ldrb	r0, [r0, #12]
 8003846:	2814      	cmp	r0, #20
 8003848:	d005      	beq.n	8003856 <__iar_annotation$$branch+0x996>
 800384a:	2014      	movs	r0, #20
 800384c:	4669      	mov	r1, sp
 800384e:	7308      	strb	r0, [r1, #12]
 8003850:	0020      	movs	r0, r4
 8003852:	f7fd f880 	bl	8000956 <PE_Clear_RxEvent>
 8003856:	e69f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003858:	6960      	ldr	r0, [r4, #20]
 800385a:	0cc0      	lsrs	r0, r0, #19
 800385c:	03ad      	lsls	r5, r5, #14
 800385e:	2800      	cmp	r0, #0
 8003860:	d01e      	beq.n	80038a0 <__iar_annotation$$branch+0x9e0>
 8003862:	8c21      	ldrh	r1, [r4, #32]
 8003864:	42a9      	cmp	r1, r5
 8003866:	d10e      	bne.n	8003886 <__iar_annotation$$branch+0x9c6>
 8003868:	200f      	movs	r0, #15
 800386a:	7460      	strb	r0, [r4, #17]
 800386c:	2000      	movs	r0, #0
 800386e:	9000      	str	r0, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	2270      	movs	r2, #112	; 0x70
 8003874:	7c21      	ldrb	r1, [r4, #16]
 8003876:	2009      	movs	r0, #9
 8003878:	4da5      	ldr	r5, [pc, #660]	; (8003b10 <.text_5>)
 800387a:	682d      	ldr	r5, [r5, #0]
 800387c:	47a8      	blx	r5
 800387e:	78b0      	ldrb	r0, [r6, #2]
 8003880:	1c40      	adds	r0, r0, #1
 8003882:	70b0      	strb	r0, [r6, #2]
 8003884:	e6fc      	b.n	8003680 <__iar_annotation$$branch+0x7c0>
 8003886:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003888:	0509      	lsls	r1, r1, #20
 800388a:	0f49      	lsrs	r1, r1, #29
 800388c:	180a      	adds	r2, r1, r0
 800388e:	2333      	movs	r3, #51	; 0x33
 8003890:	435a      	muls	r2, r3
 8003892:	4315      	orrs	r5, r2
 8003894:	8425      	strh	r5, [r4, #32]
 8003896:	180d      	adds	r5, r1, r0
 8003898:	2033      	movs	r0, #51	; 0x33
 800389a:	4345      	muls	r5, r0
 800389c:	b2ad      	uxth	r5, r5
 800389e:	e67b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038a0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80038a2:	42a8      	cmp	r0, r5
 80038a4:	d099      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80038a6:	7c20      	ldrb	r0, [r4, #16]
 80038a8:	f7fd f87a 	bl	80009a0 <PE_PRL_Control_RxEvent>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d113      	bne.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b0:	2032      	movs	r0, #50	; 0x32
 80038b2:	5c20      	ldrb	r0, [r4, r0]
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d00f      	beq.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b8:	2133      	movs	r1, #51	; 0x33
 80038ba:	5c61      	ldrb	r1, [r4, r1]
 80038bc:	2231      	movs	r2, #49	; 0x31
 80038be:	54a1      	strb	r1, [r4, r2]
 80038c0:	7460      	strb	r0, [r4, #17]
 80038c2:	2500      	movs	r5, #0
 80038c4:	2132      	movs	r1, #50	; 0x32
 80038c6:	5465      	strb	r5, [r4, r1]
 80038c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038ca:	62e0      	str	r0, [r4, #44]	; 0x2c
 80038cc:	6960      	ldr	r0, [r4, #20]
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	01c9      	lsls	r1, r1, #7
 80038d2:	4301      	orrs	r1, r0
 80038d4:	6161      	str	r1, [r4, #20]
 80038d6:	e65f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038d8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80038da:	42a8      	cmp	r0, r5
 80038dc:	d104      	bne.n	80038e8 <__iar_annotation$$branch+0x4>
 80038de:	2500      	movs	r5, #0
 80038e0:	8465      	strh	r5, [r4, #34]	; 0x22
 80038e2:	7930      	ldrb	r0, [r6, #4]

080038e4 <__iar_annotation$$branch>:
 80038e4:	f7ff fb87 	bl	8002ff6 <__iar_annotation$$branch+0x136>
 80038e8:	0020      	movs	r0, r4
 80038ea:	f7fd fd83 	bl	80013f4 <PE_CalculateMinTiming>
 80038ee:	e080      	b.n	80039f2 <__iar_annotation$$branch>
 80038f0:	2000      	movs	r0, #0
 80038f2:	9002      	str	r0, [sp, #8]
 80038f4:	2003      	movs	r0, #3
 80038f6:	9001      	str	r0, [sp, #4]
 80038f8:	2001      	movs	r0, #1
 80038fa:	9000      	str	r0, [sp, #0]
 80038fc:	0023      	movs	r3, r4
 80038fe:	332c      	adds	r3, #44	; 0x2c
 8003900:	2206      	movs	r2, #6
 8003902:	2100      	movs	r1, #0
 8003904:	0020      	movs	r0, r4
 8003906:	f7fd fe2e 	bl	8001566 <PE_Send_DataMessage>
 800390a:	2800      	cmp	r0, #0
 800390c:	d1e3      	bne.n	80038d6 <__iar_annotation$$branch+0xa16>
 800390e:	215d      	movs	r1, #93	; 0x5d
 8003910:	e6cc      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003912:	2000      	movs	r0, #0
 8003914:	9004      	str	r0, [sp, #16]
 8003916:	ab04      	add	r3, sp, #16
 8003918:	aa05      	add	r2, sp, #20
 800391a:	210a      	movs	r1, #10
 800391c:	4668      	mov	r0, sp
 800391e:	7b40      	ldrb	r0, [r0, #13]
 8003920:	68a7      	ldr	r7, [r4, #8]
 8003922:	697f      	ldr	r7, [r7, #20]
 8003924:	47b8      	blx	r7
 8003926:	2104      	movs	r1, #4
 8003928:	9804      	ldr	r0, [sp, #16]
 800392a:	f7fd fd8f 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800392e:	2800      	cmp	r0, #0
 8003930:	d11f      	bne.n	8003972 <__iar_annotation$$branch+0x8e>
 8003932:	71f0      	strb	r0, [r6, #7]
 8003934:	7230      	strb	r0, [r6, #8]
 8003936:	7c20      	ldrb	r0, [r4, #16]
 8003938:	f7fd fa04 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800393c:	2800      	cmp	r0, #0
 800393e:	d103      	bne.n	8003948 <__iar_annotation$$branch+0x64>
 8003940:	7a30      	ldrb	r0, [r6, #8]
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	4301      	orrs	r1, r0
 8003946:	7231      	strb	r1, [r6, #8]
 8003948:	9a04      	ldr	r2, [sp, #16]
 800394a:	a905      	add	r1, sp, #20
 800394c:	4871      	ldr	r0, [pc, #452]	; (8003b14 <.text_6>)
 800394e:	1820      	adds	r0, r4, r0
 8003950:	f01e ff4a 	bl	80227e8 <__aeabi_memcpy>
 8003954:	2000      	movs	r0, #0
 8003956:	9002      	str	r0, [sp, #8]
 8003958:	2003      	movs	r0, #3
 800395a:	9001      	str	r0, [sp, #4]
 800395c:	2008      	movs	r0, #8
 800395e:	9000      	str	r0, [sp, #0]
 8003960:	486d      	ldr	r0, [pc, #436]	; (8003b18 <.text_7>)
 8003962:	1823      	adds	r3, r4, r0
 8003964:	220c      	movs	r2, #12
 8003966:	2100      	movs	r1, #0
 8003968:	0020      	movs	r0, r4
 800396a:	f7fd ff2f 	bl	80017cc <PE_Send_ExtendedMessage>
 800396e:	214c      	movs	r1, #76	; 0x4c
 8003970:	e69c      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003972:	2001      	movs	r0, #1
 8003974:	e510      	b.n	8003398 <__iar_annotation$$branch+0x4d8>
 8003976:	2001      	movs	r0, #1
 8003978:	9000      	str	r0, [sp, #0]
 800397a:	2339      	movs	r3, #57	; 0x39
 800397c:	7832      	ldrb	r2, [r6, #0]
 800397e:	2033      	movs	r0, #51	; 0x33
 8003980:	5c21      	ldrb	r1, [r4, r0]
 8003982:	0020      	movs	r0, r4
 8003984:	f7fd fdc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003988:	2800      	cmp	r0, #0
 800398a:	d144      	bne.n	8003a16 <__iar_annotation$$branch+0x24>
 800398c:	7870      	ldrb	r0, [r6, #1]
 800398e:	7720      	strb	r0, [r4, #28]
 8003990:	83e7      	strh	r7, [r4, #30]
 8003992:	251b      	movs	r5, #27
 8003994:	2144      	movs	r1, #68	; 0x44
 8003996:	e689      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003998:	8be0      	ldrh	r0, [r4, #30]
 800399a:	03a9      	lsls	r1, r5, #14
 800399c:	4288      	cmp	r0, r1
 800399e:	d104      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a0:	4668      	mov	r0, sp
 80039a2:	7b00      	ldrb	r0, [r0, #12]
 80039a4:	2814      	cmp	r0, #20
 80039a6:	d100      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a8:	e5d6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039aa:	4668      	mov	r0, sp
 80039ac:	7b00      	ldrb	r0, [r0, #12]
 80039ae:	2814      	cmp	r0, #20
 80039b0:	d031      	beq.n	8003a16 <__iar_annotation$$branch+0x24>
 80039b2:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80039b4:	0bc1      	lsrs	r1, r0, #15
 80039b6:	d003      	beq.n	80039c0 <__iar_annotation$$branch+0xdc>
 80039b8:	0020      	movs	r0, r4
 80039ba:	f7fd fe11 	bl	80015e0 <PE_Check_ExtendedMessage>
 80039be:	e740      	b.n	8003842 <__iar_annotation$$branch+0x982>
 80039c0:	06c0      	lsls	r0, r0, #27
 80039c2:	0ec0      	lsrs	r0, r0, #27
 80039c4:	2810      	cmp	r0, #16
 80039c6:	d000      	beq.n	80039ca <__iar_annotation$$branch+0xe6>
 80039c8:	e5c6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039ca:	2014      	movs	r0, #20
 80039cc:	4669      	mov	r1, sp
 80039ce:	7308      	strb	r0, [r1, #12]
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc ffc0 	bl	8000956 <PE_Clear_RxEvent>
 80039d6:	2500      	movs	r5, #0
 80039d8:	83e5      	strh	r5, [r4, #30]
 80039da:	2003      	movs	r0, #3
 80039dc:	7460      	strb	r0, [r4, #17]
 80039de:	2159      	movs	r1, #89	; 0x59
 80039e0:	e664      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 80039e2:	0020      	movs	r0, r4
 80039e4:	f7fd ff1e 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80039e8:	e003      	b.n	80039f2 <__iar_annotation$$branch>
 80039ea:	a903      	add	r1, sp, #12
 80039ec:	0020      	movs	r0, r4
 80039ee:	f7fd f9bb 	bl	8000d68 <PE_SubStateMachine_Generic>

080039f2 <__iar_annotation$$branch>:
 80039f2:	f7ff fa35 	bl	8002e60 <__iar_annotation$$branch+0xc>
 80039f6:	a903      	add	r1, sp, #12
 80039f8:	0020      	movs	r0, r4
 80039fa:	f000 f9d5 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80039fe:	0005      	movs	r5, r0
 8003a00:	6860      	ldr	r0, [r4, #4]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	0401      	lsls	r1, r0, #16
 8003a06:	0fc9      	lsrs	r1, r1, #31
 8003a08:	d006      	beq.n	8003a18 <__iar_annotation$$branch+0x26>
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	6801      	ldr	r1, [r0, #0]
 8003a0e:	4668      	mov	r0, sp
 8003a10:	7b40      	ldrb	r0, [r0, #13]
 8003a12:	f001 fec7 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8003a16:	e5bf      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a18:	2101      	movs	r1, #1
 8003a1a:	e7f8      	b.n	8003a0e <__iar_annotation$$branch+0x1c>
 8003a1c:	4668      	mov	r0, sp
 8003a1e:	7b00      	ldrb	r0, [r0, #12]
 8003a20:	2811      	cmp	r0, #17
 8003a22:	d111      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a24:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003a26:	4001      	ands	r1, r0
 8003a28:	2913      	cmp	r1, #19
 8003a2a:	d10d      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a2c:	2014      	movs	r0, #20
 8003a2e:	4669      	mov	r1, sp
 8003a30:	7308      	strb	r0, [r1, #12]
 8003a32:	0020      	movs	r0, r4
 8003a34:	f7fc ff8f 	bl	8000956 <PE_Clear_RxEvent>
 8003a38:	2000      	movs	r0, #0
 8003a3a:	9000      	str	r0, [sp, #0]
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	2203      	movs	r2, #3
 8003a40:	2100      	movs	r1, #0
 8003a42:	0020      	movs	r0, r4
 8003a44:	f7fd fd64 	bl	8001510 <PE_Send_CtrlMessage>
 8003a48:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003a4a:	03a9      	lsls	r1, r5, #14
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	d106      	bne.n	8003a5e <__iar_annotation$$branch+0x6c>
 8003a50:	2092      	movs	r0, #146	; 0x92
 8003a52:	e582      	b.n	800355a <__iar_annotation$$branch+0x69a>
 8003a54:	4668      	mov	r0, sp
 8003a56:	7b01      	ldrb	r1, [r0, #12]
 8003a58:	0020      	movs	r0, r4
 8003a5a:	f001 fc05 	bl	8005268 <PE_StateMachine_UVDM>
 8003a5e:	e59b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a60:	6960      	ldr	r0, [r4, #20]
 8003a62:	2701      	movs	r7, #1
 8003a64:	0b41      	lsrs	r1, r0, #13
 8003a66:	4039      	ands	r1, r7
 8003a68:	d019      	beq.n	8003a9e <__iar_annotation$$branch+0xac>
 8003a6a:	0b80      	lsrs	r0, r0, #14
 8003a6c:	4038      	ands	r0, r7
 8003a6e:	d007      	beq.n	8003a80 <__iar_annotation$$branch+0x8e>
 8003a70:	215b      	movs	r1, #91	; 0x5b
 8003a72:	7c20      	ldrb	r0, [r4, #16]
 8003a74:	f7fc fd04 	bl	8000480 <USBPD_PE_Notification>
 8003a78:	6960      	ldr	r0, [r4, #20]
 8003a7a:	4928      	ldr	r1, [pc, #160]	; (8003b1c <.text_8>)
 8003a7c:	4001      	ands	r1, r0
 8003a7e:	6161      	str	r1, [r4, #20]
 8003a80:	2003      	movs	r0, #3
 8003a82:	7460      	strb	r0, [r4, #17]
 8003a84:	7ca1      	ldrb	r1, [r4, #18]
 8003a86:	2903      	cmp	r1, #3
 8003a88:	d008      	beq.n	8003a9c <__iar_annotation$$branch+0xaa>
 8003a8a:	74a0      	strb	r0, [r4, #18]
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	2203      	movs	r2, #3
 8003a94:	7c21      	ldrb	r1, [r4, #16]
 8003a96:	2004      	movs	r0, #4
 8003a98:	6835      	ldr	r5, [r6, #0]
 8003a9a:	47a8      	blx	r5
 8003a9c:	2501      	movs	r5, #1
 8003a9e:	6960      	ldr	r0, [r4, #20]
 8003aa0:	491f      	ldr	r1, [pc, #124]	; (8003b20 <.text_9>)
 8003aa2:	4001      	ands	r1, r0
 8003aa4:	6161      	str	r1, [r4, #20]
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	d101      	bne.n	8003aae <__iar_annotation$$branch>

08003aaa <__iar_annotation$$branch>:
 8003aaa:	f7ff f8c9 	bl	8002c40 <USBPD_PE_StateMachine_SRC+0xb4>

08003aae <__iar_annotation$$branch>:
 8003aae:	f7ff fa0b 	bl	8002ec8 <__iar_annotation$$branch+0x8>
	...

08003ab4 <.text_3>:
 8003ab4:	000081d6 	.word	0x000081d6

08003ab8 <PE_Send_SRCCapabilities>:
 8003ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003aba:	0004      	movs	r4, r0
 8003abc:	000d      	movs	r5, r1
 8003abe:	2000      	movs	r0, #0
 8003ac0:	9002      	str	r0, [sp, #8]
 8003ac2:	ab02      	add	r3, sp, #8
 8003ac4:	4817      	ldr	r0, [pc, #92]	; (8003b24 <.text_10>)
 8003ac6:	1822      	adds	r2, r4, r0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	7c20      	ldrb	r0, [r4, #16]
 8003acc:	68a6      	ldr	r6, [r4, #8]
 8003ace:	6976      	ldr	r6, [r6, #20]
 8003ad0:	47b0      	blx	r6
 8003ad2:	9802      	ldr	r0, [sp, #8]
 8003ad4:	1c80      	adds	r0, r0, #2
 8003ad6:	9002      	str	r0, [sp, #8]
 8003ad8:	2104      	movs	r1, #4
 8003ada:	9802      	ldr	r0, [sp, #8]
 8003adc:	f7fd fcb6 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d113      	bne.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003ae4:	6860      	ldr	r0, [r4, #4]
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	04c1      	lsls	r1, r0, #19
 8003aea:	0fc9      	lsrs	r1, r1, #31
 8003aec:	d00e      	beq.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003aee:	9501      	str	r5, [sp, #4]
 8003af0:	9802      	ldr	r0, [sp, #8]
 8003af2:	b280      	uxth	r0, r0
 8003af4:	9000      	str	r0, [sp, #0]
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <.text_7>)
 8003af8:	1823      	adds	r3, r4, r0
 8003afa:	2201      	movs	r2, #1
 8003afc:	2100      	movs	r1, #0
 8003afe:	7c20      	ldrb	r0, [r4, #16]
 8003b00:	f001 fe54 	bl	80057ac <USBPD_PRL_SendMessage>
 8003b04:	2803      	cmp	r0, #3
 8003b06:	d0e7      	beq.n	8003ad8 <PE_Send_SRCCapabilities+0x20>
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	e7fb      	b.n	8003b08 <PE_Send_SRCCapabilities+0x50>

08003b10 <.text_5>:
 8003b10:	20000000 	.word	0x20000000

08003b14 <.text_6>:
 8003b14:	00000267 	.word	0x00000267

08003b18 <.text_7>:
 8003b18:	00000263 	.word	0x00000263

08003b1c <.text_8>:
 8003b1c:	ffffbfff 	.word	0xffffbfff

08003b20 <.text_9>:
 8003b20:	ffffdfff 	.word	0xffffdfff

08003b24 <.text_10>:
 8003b24:	00000265 	.word	0x00000265

08003b28 <PE_StateMachine_VDMCable>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	2502      	movs	r5, #2
 8003b30:	2607      	movs	r6, #7
 8003b32:	7c60      	ldrb	r0, [r4, #17]
 8003b34:	2805      	cmp	r0, #5
 8003b36:	d002      	beq.n	8003b3e <PE_StateMachine_VDMCable+0x16>
 8003b38:	289a      	cmp	r0, #154	; 0x9a
 8003b3a:	d072      	beq.n	8003c22 <PE_StateMachine_VDMCable+0xfa>
 8003b3c:	e127      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003b3e:	6860      	ldr	r0, [r4, #4]
 8003b40:	7800      	ldrb	r0, [r0, #0]
 8003b42:	0781      	lsls	r1, r0, #30
 8003b44:	0f89      	lsrs	r1, r1, #30
 8003b46:	0020      	movs	r0, r4
 8003b48:	f000 fa5e 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003b4c:	2094      	movs	r0, #148	; 0x94
 8003b4e:	0080      	lsls	r0, r0, #2
 8003b50:	5821      	ldr	r1, [r4, r0]
 8003b52:	201f      	movs	r0, #31
 8003b54:	4381      	bics	r1, r0
 8003b56:	488f      	ldr	r0, [pc, #572]	; (8003d94 <.text_3>)
 8003b58:	4308      	orrs	r0, r1
 8003b5a:	2194      	movs	r1, #148	; 0x94
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	5060      	str	r0, [r4, r1]
 8003b60:	6861      	ldr	r1, [r4, #4]
 8003b62:	9100      	str	r1, [sp, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	9a00      	ldr	r2, [sp, #0]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	0953      	lsrs	r3, r2, #5
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	4a8a      	ldr	r2, [pc, #552]	; (8003d98 <.text_4>)
 8003b70:	4002      	ands	r2, r0
 8003b72:	0358      	lsls	r0, r3, #13
 8003b74:	4310      	orrs	r0, r2
 8003b76:	22ff      	movs	r2, #255	; 0xff
 8003b78:	0612      	lsls	r2, r2, #24
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	2094      	movs	r0, #148	; 0x94
 8003b7e:	0080      	lsls	r0, r0, #2
 8003b80:	5022      	str	r2, [r4, r0]
 8003b82:	9800      	ldr	r0, [sp, #0]
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	0880      	lsrs	r0, r0, #2
 8003b88:	4001      	ands	r1, r0
 8003b8a:	d003      	beq.n	8003b94 <PE_StateMachine_VDMCable+0x6c>
 8003b8c:	6960      	ldr	r0, [r4, #20]
 8003b8e:	0741      	lsls	r1, r0, #29
 8003b90:	0fc8      	lsrs	r0, r1, #31
 8003b92:	e000      	b.n	8003b96 <PE_StateMachine_VDMCable+0x6e>
 8003b94:	2002      	movs	r0, #2
 8003b96:	2194      	movs	r1, #148	; 0x94
 8003b98:	0089      	lsls	r1, r1, #2
 8003b9a:	1867      	adds	r7, r4, r1
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	209a      	movs	r0, #154	; 0x9a
 8003ba0:	9001      	str	r0, [sp, #4]
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	9000      	str	r0, [sp, #0]
 8003ba6:	003b      	movs	r3, r7
 8003ba8:	220f      	movs	r2, #15
 8003baa:	2101      	movs	r1, #1
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7fd fcda 	bl	8001566 <PE_Send_DataMessage>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d109      	bne.n	8003bca <PE_StateMachine_VDMCable+0xa2>
 8003bb6:	6960      	ldr	r0, [r4, #20]
 8003bb8:	03e9      	lsls	r1, r5, #15
 8003bba:	4301      	orrs	r1, r0
 8003bbc:	6161      	str	r1, [r4, #20]
 8003bbe:	2051      	movs	r0, #81	; 0x51
 8003bc0:	7720      	strb	r0, [r4, #28]
 8003bc2:	4876      	ldr	r0, [pc, #472]	; (8003d9c <.text_5>)
 8003bc4:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bc6:	251e      	movs	r5, #30
 8003bc8:	e0e1      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003bca:	2809      	cmp	r0, #9
 8003bcc:	d0fc      	beq.n	8003bc8 <PE_StateMachine_VDMCable+0xa0>
 8003bce:	7cb8      	ldrb	r0, [r7, #18]
 8003bd0:	2815      	cmp	r0, #21
 8003bd2:	d202      	bcs.n	8003bda <PE_StateMachine_VDMCable+0xb2>
 8003bd4:	4872      	ldr	r0, [pc, #456]	; (8003da0 <.text_6>)
 8003bd6:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bd8:	e00a      	b.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003bda:	68e0      	ldr	r0, [r4, #12]
 8003bdc:	6940      	ldr	r0, [r0, #20]
 8003bde:	9000      	str	r0, [sp, #0]
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d005      	beq.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2205      	movs	r2, #5
 8003be8:	2101      	movs	r1, #1
 8003bea:	7c20      	ldrb	r0, [r4, #16]
 8003bec:	9f00      	ldr	r7, [sp, #0]
 8003bee:	47b8      	blx	r7
 8003bf0:	6860      	ldr	r0, [r4, #4]
 8003bf2:	6800      	ldr	r0, [r0, #0]
 8003bf4:	0a00      	lsrs	r0, r0, #8
 8003bf6:	4030      	ands	r0, r6
 8003bf8:	2803      	cmp	r0, #3
 8003bfa:	d100      	bne.n	8003bfe <PE_StateMachine_VDMCable+0xd6>
 8003bfc:	e0a4      	b.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003bfe:	4869      	ldr	r0, [pc, #420]	; (8003da4 <.text_7>)
 8003c00:	8be1      	ldrh	r1, [r4, #30]
 8003c02:	4201      	tst	r1, r0
 8003c04:	d00b      	beq.n	8003c1e <PE_StateMachine_VDMCable+0xf6>
 8003c06:	2108      	movs	r1, #8
 8003c08:	7461      	strb	r1, [r4, #17]
 8003c0a:	8be1      	ldrh	r1, [r4, #30]
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	292d      	cmp	r1, #45	; 0x2d
 8003c10:	d203      	bcs.n	8003c1a <PE_StateMachine_VDMCable+0xf2>
 8003c12:	8be1      	ldrh	r1, [r4, #30]
 8003c14:	0005      	movs	r5, r0
 8003c16:	400d      	ands	r5, r1
 8003c18:	e0b9      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1a:	252d      	movs	r5, #45	; 0x2d
 8003c1c:	e0b7      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1e:	7466      	strb	r6, [r4, #17]
 8003c20:	e0b5      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c22:	9101      	str	r1, [sp, #4]
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7fc fecf 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8003c2a:	4669      	mov	r1, sp
 8003c2c:	7008      	strb	r0, [r1, #0]
 8003c2e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003c30:	2700      	movs	r7, #0
 8003c32:	221f      	movs	r2, #31
 8003c34:	9801      	ldr	r0, [sp, #4]
 8003c36:	7800      	ldrb	r0, [r0, #0]
 8003c38:	466b      	mov	r3, sp
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4298      	cmp	r0, r3
 8003c3e:	d14f      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c40:	0bc8      	lsrs	r0, r1, #15
 8003c42:	d14d      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c44:	0b08      	lsrs	r0, r1, #12
 8003c46:	4230      	tst	r0, r6
 8003c48:	d04a      	beq.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	4008      	ands	r0, r1
 8003c4e:	280f      	cmp	r0, #15
 8003c50:	d146      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c54:	7880      	ldrb	r0, [r0, #2]
 8003c56:	9000      	str	r0, [sp, #0]
 8003c58:	4002      	ands	r2, r0
 8003c5a:	2a01      	cmp	r2, #1
 8003c5c:	d13b      	bne.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c5e:	0980      	lsrs	r0, r0, #6
 8003c60:	d039      	beq.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c62:	0608      	lsls	r0, r1, #24
 8003c64:	0f81      	lsrs	r1, r0, #30
 8003c66:	0020      	movs	r0, r4
 8003c68:	f000 f9ce 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003c6c:	68e0      	ldr	r0, [r4, #12]
 8003c6e:	6940      	ldr	r0, [r0, #20]
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d023      	beq.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c74:	9800      	ldr	r0, [sp, #0]
 8003c76:	0985      	lsrs	r5, r0, #6
 8003c78:	07a8      	lsls	r0, r5, #30
 8003c7a:	0f80      	lsrs	r0, r0, #30
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d11d      	bne.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c80:	aa03      	add	r2, sp, #12
 8003c82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c84:	1d81      	adds	r1, r0, #6
 8003c86:	7c20      	ldrb	r0, [r4, #16]
 8003c88:	f001 fb9a 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d111      	bne.n	8003cb4 <PE_StateMachine_VDMCable+0x18c>
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	07aa      	lsls	r2, r5, #30
 8003c94:	0f92      	lsrs	r2, r2, #30
 8003c96:	2101      	movs	r1, #1
 8003c98:	7c20      	ldrb	r0, [r4, #16]
 8003c9a:	68e5      	ldr	r5, [r4, #12]
 8003c9c:	696d      	ldr	r5, [r5, #20]
 8003c9e:	47a8      	blx	r5
 8003ca0:	2152      	movs	r1, #82	; 0x52
 8003ca2:	7c20      	ldrb	r0, [r4, #16]
 8003ca4:	f7fc fbec 	bl	8000480 <USBPD_PE_Notification>
 8003ca8:	2014      	movs	r0, #20
 8003caa:	2194      	movs	r1, #148	; 0x94
 8003cac:	0089      	lsls	r1, r1, #2
 8003cae:	1861      	adds	r1, r4, r1
 8003cb0:	7488      	strb	r0, [r1, #18]
 8003cb2:	e003      	b.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003cb4:	211b      	movs	r1, #27
 8003cb6:	7c20      	ldrb	r0, [r4, #16]
 8003cb8:	f7fc fbe2 	bl	8000480 <USBPD_PE_Notification>
 8003cbc:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cbe:	6860      	ldr	r0, [r4, #4]
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	0a00      	lsrs	r0, r0, #8
 8003cc4:	4030      	ands	r0, r6
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	d102      	bne.n	8003cd0 <PE_StateMachine_VDMCable+0x1a8>
 8003cca:	7460      	strb	r0, [r4, #17]
 8003ccc:	2500      	movs	r5, #0
 8003cce:	e002      	b.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003cd0:	7466      	strb	r6, [r4, #17]
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	7727      	strb	r7, [r4, #28]
 8003cd6:	9801      	ldr	r0, [sp, #4]
 8003cd8:	7800      	ldrb	r0, [r0, #0]
 8003cda:	2814      	cmp	r0, #20
 8003cdc:	d119      	bne.n	8003d12 <PE_StateMachine_VDMCable+0x1ea>
 8003cde:	e056      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	2a10      	cmp	r2, #16
 8003ce6:	d11b      	bne.n	8003d20 <PE_StateMachine_VDMCable+0x1f8>
 8003ce8:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cea:	6861      	ldr	r1, [r4, #4]
 8003cec:	6809      	ldr	r1, [r1, #0]
 8003cee:	0a09      	lsrs	r1, r1, #8
 8003cf0:	4031      	ands	r1, r6
 8003cf2:	2903      	cmp	r1, #3
 8003cf4:	d102      	bne.n	8003cfc <PE_StateMachine_VDMCable+0x1d4>
 8003cf6:	7460      	strb	r0, [r4, #17]
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	e002      	b.n	8003d02 <PE_StateMachine_VDMCable+0x1da>
 8003cfc:	7466      	strb	r6, [r4, #17]
 8003cfe:	2500      	movs	r5, #0
 8003d00:	7727      	strb	r7, [r4, #28]
 8003d02:	2159      	movs	r1, #89	; 0x59
 8003d04:	7c20      	ldrb	r0, [r4, #16]
 8003d06:	f7fc fbbb 	bl	8000480 <USBPD_PE_Notification>
 8003d0a:	9801      	ldr	r0, [sp, #4]
 8003d0c:	7800      	ldrb	r0, [r0, #0]
 8003d0e:	2814      	cmp	r0, #20
 8003d10:	d03d      	beq.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d12:	2014      	movs	r0, #20
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	7008      	strb	r0, [r1, #0]
 8003d18:	0020      	movs	r0, r4
 8003d1a:	f7fc fe1c 	bl	8000956 <PE_Clear_RxEvent>
 8003d1e:	e036      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d20:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003d22:	03aa      	lsls	r2, r5, #14
 8003d24:	4291      	cmp	r1, r2
 8003d26:	d132      	bne.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d28:	8467      	strh	r7, [r4, #34]	; 0x22
 8003d2a:	6861      	ldr	r1, [r4, #4]
 8003d2c:	680a      	ldr	r2, [r1, #0]
 8003d2e:	0a13      	lsrs	r3, r2, #8
 8003d30:	4033      	ands	r3, r6
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d10c      	bne.n	8003d50 <PE_StateMachine_VDMCable+0x228>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	6945      	ldr	r5, [r0, #20]
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	d004      	beq.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2204      	movs	r2, #4
 8003d42:	2101      	movs	r1, #1
 8003d44:	7c20      	ldrb	r0, [r4, #16]
 8003d46:	47a8      	blx	r5
 8003d48:	2003      	movs	r0, #3
 8003d4a:	7460      	strb	r0, [r4, #17]
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	e01e      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d50:	0e93      	lsrs	r3, r2, #26
 8003d52:	4018      	ands	r0, r3
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d10e      	bne.n	8003d76 <PE_StateMachine_VDMCable+0x24e>
 8003d58:	48b7      	ldr	r0, [pc, #732]	; (8004038 <.text_10>)
 8003d5a:	4010      	ands	r0, r2
 8003d5c:	066a      	lsls	r2, r5, #25
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	600a      	str	r2, [r1, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	7c20      	ldrb	r0, [r4, #16]
 8003d66:	f001 fcea 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8003d6a:	480d      	ldr	r0, [pc, #52]	; (8003da0 <.text_6>)
 8003d6c:	8460      	strh	r0, [r4, #34]	; 0x22
 8003d6e:	252d      	movs	r5, #45	; 0x2d
 8003d70:	2008      	movs	r0, #8
 8003d72:	7460      	strb	r0, [r4, #17]
 8003d74:	e00a      	b.n	8003d8c <PE_StateMachine_VDMCable+0x264>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	6945      	ldr	r5, [r0, #20]
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d004      	beq.n	8003d88 <PE_StateMachine_VDMCable+0x260>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2204      	movs	r2, #4
 8003d82:	2101      	movs	r1, #1
 8003d84:	7c20      	ldrb	r0, [r4, #16]
 8003d86:	47a8      	blx	r5
 8003d88:	7466      	strb	r6, [r4, #17]
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	7727      	strb	r7, [r4, #28]
 8003d8e:	0028      	movs	r0, r5
 8003d90:	b00d      	add	sp, #52	; 0x34
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d94 <.text_3>:
 8003d94:	00008001 	.word	0x00008001

08003d98 <.text_4>:
 8003d98:	0000983f 	.word	0x0000983f

08003d9c <.text_5>:
 8003d9c:	0000801e 	.word	0x0000801e

08003da0 <.text_6>:
 8003da0:	0000802d 	.word	0x0000802d

08003da4 <.text_7>:
 8003da4:	00007fff 	.word	0x00007fff

08003da8 <PE_SubStateMachine_VconnSwap>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	0004      	movs	r4, r0
 8003dac:	2502      	movs	r5, #2
 8003dae:	2703      	movs	r7, #3
 8003db0:	4ea2      	ldr	r6, [pc, #648]	; (800403c <.text_11>)
 8003db2:	2014      	movs	r0, #20
 8003db4:	7c62      	ldrb	r2, [r4, #17]
 8003db6:	2a9d      	cmp	r2, #157	; 0x9d
 8003db8:	d010      	beq.n	8003ddc <PE_SubStateMachine_VconnSwap+0x34>
 8003dba:	d30e      	bcc.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dbc:	2a9f      	cmp	r2, #159	; 0x9f
 8003dbe:	d057      	beq.n	8003e70 <PE_SubStateMachine_VconnSwap+0xc8>
 8003dc0:	d33d      	bcc.n	8003e3e <PE_SubStateMachine_VconnSwap+0x96>
 8003dc2:	2aa1      	cmp	r2, #161	; 0xa1
 8003dc4:	d100      	bne.n	8003dc8 <PE_SubStateMachine_VconnSwap+0x20>
 8003dc6:	e085      	b.n	8003ed4 <PE_SubStateMachine_VconnSwap+0x12c>
 8003dc8:	d377      	bcc.n	8003eba <PE_SubStateMachine_VconnSwap+0x112>
 8003dca:	2aa3      	cmp	r2, #163	; 0xa3
 8003dcc:	d100      	bne.n	8003dd0 <PE_SubStateMachine_VconnSwap+0x28>
 8003dce:	e0a3      	b.n	8003f18 <PE_SubStateMachine_VconnSwap+0x170>
 8003dd0:	d200      	bcs.n	8003dd4 <PE_SubStateMachine_VconnSwap+0x2c>
 8003dd2:	e08e      	b.n	8003ef2 <PE_SubStateMachine_VconnSwap+0x14a>
 8003dd4:	2aa4      	cmp	r2, #164	; 0xa4
 8003dd6:	d100      	bne.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dd8:	e106      	b.n	8003fe8 <PE_SubStateMachine_VconnSwap+0x240>
 8003dda:	e113      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ddc:	6860      	ldr	r0, [r4, #4]
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	21b8      	movs	r1, #184	; 0xb8
 8003de2:	0149      	lsls	r1, r1, #5
 8003de4:	4001      	ands	r1, r0
 8003de6:	2098      	movs	r0, #152	; 0x98
 8003de8:	0140      	lsls	r0, r0, #5
 8003dea:	4281      	cmp	r1, r0
 8003dec:	d121      	bne.n	8003e32 <PE_SubStateMachine_VconnSwap+0x8a>
 8003dee:	7c20      	ldrb	r0, [r4, #16]
 8003df0:	68a1      	ldr	r1, [r4, #8]
 8003df2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003df4:	4788      	blx	r1
 8003df6:	280a      	cmp	r0, #10
 8003df8:	d002      	beq.n	8003e00 <PE_SubStateMachine_VconnSwap+0x58>
 8003dfa:	280d      	cmp	r0, #13
 8003dfc:	d007      	beq.n	8003e0e <PE_SubStateMachine_VconnSwap+0x66>
 8003dfe:	e00f      	b.n	8003e20 <PE_SubStateMachine_VconnSwap+0x78>
 8003e00:	209e      	movs	r0, #158	; 0x9e
 8003e02:	7460      	strb	r0, [r4, #17]
 8003e04:	6960      	ldr	r0, [r4, #20]
 8003e06:	02e9      	lsls	r1, r5, #11
 8003e08:	4301      	orrs	r1, r0
 8003e0a:	6161      	str	r1, [r4, #20]
 8003e0c:	e0fa      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	9000      	str	r0, [sp, #0]
 8003e12:	2303      	movs	r3, #3
 8003e14:	220c      	movs	r2, #12
 8003e16:	2100      	movs	r1, #0
 8003e18:	0020      	movs	r0, r4
 8003e1a:	f7fd fb79 	bl	8001510 <PE_Send_CtrlMessage>
 8003e1e:	e0f1      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e20:	2000      	movs	r0, #0
 8003e22:	9000      	str	r0, [sp, #0]
 8003e24:	2303      	movs	r3, #3
 8003e26:	2204      	movs	r2, #4
 8003e28:	2100      	movs	r1, #0
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	f7fd fb70 	bl	8001510 <PE_Send_CtrlMessage>
 8003e30:	e002      	b.n	8003e38 <PE_SubStateMachine_VconnSwap+0x90>
 8003e32:	6960      	ldr	r0, [r4, #20]
 8003e34:	4006      	ands	r6, r0
 8003e36:	6166      	str	r6, [r4, #20]
 8003e38:	7467      	strb	r7, [r4, #17]
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	e0e2      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	9000      	str	r0, [sp, #0]
 8003e42:	239e      	movs	r3, #158	; 0x9e
 8003e44:	2203      	movs	r2, #3
 8003e46:	2100      	movs	r1, #0
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f7fd fb61 	bl	8001510 <PE_Send_CtrlMessage>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d1f4      	bne.n	8003e3c <PE_SubStateMachine_VconnSwap+0x94>
 8003e52:	6860      	ldr	r0, [r4, #4]
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	0401      	lsls	r1, r0, #16
 8003e58:	0fc9      	lsrs	r1, r1, #31
 8003e5a:	d005      	beq.n	8003e68 <PE_SubStateMachine_VconnSwap+0xc0>
 8003e5c:	209f      	movs	r0, #159	; 0x9f
 8003e5e:	7460      	strb	r0, [r4, #17]
 8003e60:	4877      	ldr	r0, [pc, #476]	; (8004040 <.text_12>)
 8003e62:	83e0      	strh	r0, [r4, #30]
 8003e64:	2596      	movs	r5, #150	; 0x96
 8003e66:	e001      	b.n	8003e6c <PE_SubStateMachine_VconnSwap+0xc4>
 8003e68:	20a0      	movs	r0, #160	; 0xa0
 8003e6a:	7460      	strb	r0, [r4, #17]
 8003e6c:	213f      	movs	r1, #63	; 0x3f
 8003e6e:	e0b7      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003e70:	8be2      	ldrh	r2, [r4, #30]
 8003e72:	03ab      	lsls	r3, r5, #14
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d100      	bne.n	8003e7a <PE_SubStateMachine_VconnSwap+0xd2>
 8003e78:	e0ac      	b.n	8003fd4 <PE_SubStateMachine_VconnSwap+0x22c>
 8003e7a:	780a      	ldrb	r2, [r1, #0]
 8003e7c:	2a11      	cmp	r2, #17
 8003e7e:	d11b      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e80:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003e82:	4b70      	ldr	r3, [pc, #448]	; (8004044 <.text_13>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d116      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e8a:	7008      	strb	r0, [r1, #0]
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fc fd62 	bl	8000956 <PE_Clear_RxEvent>
 8003e92:	68a0      	ldr	r0, [r4, #8]
 8003e94:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d002      	beq.n	8003ea0 <PE_SubStateMachine_VconnSwap+0xf8>
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	7c20      	ldrb	r0, [r4, #16]
 8003e9e:	4790      	blx	r2
 8003ea0:	6960      	ldr	r0, [r4, #20]
 8003ea2:	4006      	ands	r6, r0
 8003ea4:	6166      	str	r6, [r4, #20]
 8003ea6:	7467      	strb	r7, [r4, #17]
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	2142      	movs	r1, #66	; 0x42
 8003eac:	7c20      	ldrb	r0, [r4, #16]
 8003eae:	f7fc fae7 	bl	8000480 <USBPD_PE_Notification>
 8003eb2:	8465      	strh	r5, [r4, #34]	; 0x22
 8003eb4:	4964      	ldr	r1, [pc, #400]	; (8004048 <.text_14>)
 8003eb6:	5465      	strb	r5, [r4, r1]
 8003eb8:	e0a4      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003eba:	68a0      	ldr	r0, [r4, #8]
 8003ebc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d002      	beq.n	8003ec8 <PE_SubStateMachine_VconnSwap+0x120>
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	7c20      	ldrb	r0, [r4, #16]
 8003ec6:	4790      	blx	r2
 8003ec8:	20a1      	movs	r0, #161	; 0xa1
 8003eca:	7460      	strb	r0, [r4, #17]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	495e      	ldr	r1, [pc, #376]	; (8004048 <.text_14>)
 8003ed0:	5460      	strb	r0, [r4, r1]
 8003ed2:	e097      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	9000      	str	r0, [sp, #0]
 8003ed8:	2303      	movs	r3, #3
 8003eda:	2206      	movs	r2, #6
 8003edc:	2100      	movs	r1, #0
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f7fd fb16 	bl	8001510 <PE_Send_CtrlMessage>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1f4      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003ee8:	6960      	ldr	r0, [r4, #20]
 8003eea:	4006      	ands	r6, r0
 8003eec:	6166      	str	r6, [r4, #20]
 8003eee:	2142      	movs	r1, #66	; 0x42
 8003ef0:	e076      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	9000      	str	r0, [sp, #0]
 8003ef6:	23a3      	movs	r3, #163	; 0xa3
 8003ef8:	220b      	movs	r2, #11
 8003efa:	2100      	movs	r1, #0
 8003efc:	0020      	movs	r0, r4
 8003efe:	f7fd fb07 	bl	8001510 <PE_Send_CtrlMessage>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1e5      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003f06:	6960      	ldr	r0, [r4, #20]
 8003f08:	02e9      	lsls	r1, r5, #11
 8003f0a:	4301      	orrs	r1, r0
 8003f0c:	6161      	str	r1, [r4, #20]
 8003f0e:	484f      	ldr	r0, [pc, #316]	; (800404c <.text_15>)
 8003f10:	83e0      	strh	r0, [r4, #30]
 8003f12:	251b      	movs	r5, #27
 8003f14:	213e      	movs	r1, #62	; 0x3e
 8003f16:	e063      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003f18:	780a      	ldrb	r2, [r1, #0]
 8003f1a:	2a11      	cmp	r2, #17
 8003f1c:	d155      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f1e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003f20:	23f0      	movs	r3, #240	; 0xf0
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d150      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f28:	06d2      	lsls	r2, r2, #27
 8003f2a:	0ed2      	lsrs	r2, r2, #27
 8003f2c:	2a03      	cmp	r2, #3
 8003f2e:	d006      	beq.n	8003f3e <PE_SubStateMachine_VconnSwap+0x196>
 8003f30:	2a04      	cmp	r2, #4
 8003f32:	d024      	beq.n	8003f7e <PE_SubStateMachine_VconnSwap+0x1d6>
 8003f34:	2a0c      	cmp	r2, #12
 8003f36:	d014      	beq.n	8003f62 <PE_SubStateMachine_VconnSwap+0x1ba>
 8003f38:	2a10      	cmp	r2, #16
 8003f3a:	d02e      	beq.n	8003f9a <PE_SubStateMachine_VconnSwap+0x1f2>
 8003f3c:	e045      	b.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	0413      	lsls	r3, r2, #16
 8003f44:	0fdb      	lsrs	r3, r3, #31
 8003f46:	d001      	beq.n	8003f4c <PE_SubStateMachine_VconnSwap+0x1a4>
 8003f48:	229f      	movs	r2, #159	; 0x9f
 8003f4a:	e000      	b.n	8003f4e <PE_SubStateMachine_VconnSwap+0x1a6>
 8003f4c:	22a0      	movs	r2, #160	; 0xa0
 8003f4e:	7462      	strb	r2, [r4, #17]
 8003f50:	780a      	ldrb	r2, [r1, #0]
 8003f52:	2a14      	cmp	r2, #20
 8003f54:	d003      	beq.n	8003f5e <PE_SubStateMachine_VconnSwap+0x1b6>
 8003f56:	7008      	strb	r0, [r1, #0]
 8003f58:	0020      	movs	r0, r4
 8003f5a:	f7fc fcfc 	bl	8000956 <PE_Clear_RxEvent>
 8003f5e:	213f      	movs	r1, #63	; 0x3f
 8003f60:	e030      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f62:	6962      	ldr	r2, [r4, #20]
 8003f64:	4032      	ands	r2, r6
 8003f66:	6162      	str	r2, [r4, #20]
 8003f68:	7467      	strb	r7, [r4, #17]
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	780a      	ldrb	r2, [r1, #0]
 8003f6e:	2a14      	cmp	r2, #20
 8003f70:	d003      	beq.n	8003f7a <PE_SubStateMachine_VconnSwap+0x1d2>
 8003f72:	7008      	strb	r0, [r1, #0]
 8003f74:	0020      	movs	r0, r4
 8003f76:	f7fc fcee 	bl	8000956 <PE_Clear_RxEvent>
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	e022      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f7e:	6962      	ldr	r2, [r4, #20]
 8003f80:	4032      	ands	r2, r6
 8003f82:	6162      	str	r2, [r4, #20]
 8003f84:	7467      	strb	r7, [r4, #17]
 8003f86:	2500      	movs	r5, #0
 8003f88:	780a      	ldrb	r2, [r1, #0]
 8003f8a:	2a14      	cmp	r2, #20
 8003f8c:	d003      	beq.n	8003f96 <PE_SubStateMachine_VconnSwap+0x1ee>
 8003f8e:	7008      	strb	r0, [r1, #0]
 8003f90:	0020      	movs	r0, r4
 8003f92:	f7fc fce0 	bl	8000956 <PE_Clear_RxEvent>
 8003f96:	2141      	movs	r1, #65	; 0x41
 8003f98:	e014      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	0413      	lsls	r3, r2, #16
 8003fa0:	0fdb      	lsrs	r3, r3, #31
 8003fa2:	d102      	bne.n	8003faa <PE_SubStateMachine_VconnSwap+0x202>
 8003fa4:	22a4      	movs	r2, #164	; 0xa4
 8003fa6:	7462      	strb	r2, [r4, #17]
 8003fa8:	e004      	b.n	8003fb4 <PE_SubStateMachine_VconnSwap+0x20c>
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	4032      	ands	r2, r6
 8003fae:	6162      	str	r2, [r4, #20]
 8003fb0:	7467      	strb	r7, [r4, #17]
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	780a      	ldrb	r2, [r1, #0]
 8003fb6:	2a14      	cmp	r2, #20
 8003fb8:	d003      	beq.n	8003fc2 <PE_SubStateMachine_VconnSwap+0x21a>
 8003fba:	7008      	strb	r0, [r1, #0]
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f7fc fcca 	bl	8000956 <PE_Clear_RxEvent>
 8003fc2:	2143      	movs	r1, #67	; 0x43
 8003fc4:	7c20      	ldrb	r0, [r4, #16]
 8003fc6:	f7fc fa5b 	bl	8000480 <USBPD_PE_Notification>
 8003fca:	8be0      	ldrh	r0, [r4, #30]
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	0209      	lsls	r1, r1, #8
 8003fd0:	4288      	cmp	r0, r1
 8003fd2:	d117      	bne.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fd4:	6960      	ldr	r0, [r4, #20]
 8003fd6:	4006      	ands	r6, r0
 8003fd8:	6166      	str	r6, [r4, #20]
 8003fda:	7467      	strb	r7, [r4, #17]
 8003fdc:	2500      	movs	r5, #0
 8003fde:	211c      	movs	r1, #28
 8003fe0:	7c20      	ldrb	r0, [r4, #16]
 8003fe2:	f7fc fa4d 	bl	8000480 <USBPD_PE_Notification>
 8003fe6:	e00d      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fe8:	68a0      	ldr	r0, [r4, #8]
 8003fea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	d002      	beq.n	8003ff6 <PE_SubStateMachine_VconnSwap+0x24e>
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	7c20      	ldrb	r0, [r4, #16]
 8003ff4:	4790      	blx	r2
 8003ff6:	6960      	ldr	r0, [r4, #20]
 8003ff8:	4006      	ands	r6, r0
 8003ffa:	6166      	str	r6, [r4, #20]
 8003ffc:	7467      	strb	r7, [r4, #17]
 8003ffe:	2500      	movs	r5, #0
 8004000:	4813      	ldr	r0, [pc, #76]	; (8004050 <.text_16>)
 8004002:	8460      	strh	r0, [r4, #34]	; 0x22
 8004004:	0028      	movs	r0, r5
 8004006:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004008 <PE_ExtRevisionInteroperability_Cable>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	000a      	movs	r2, r1
 800400c:	6843      	ldr	r3, [r0, #4]
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	2103      	movs	r1, #3
 8004012:	2503      	movs	r5, #3
 8004014:	4025      	ands	r5, r4
 8004016:	42aa      	cmp	r2, r5
 8004018:	d300      	bcc.n	800401c <PE_ExtRevisionInteroperability_Cable+0x14>
 800401a:	002a      	movs	r2, r5
 800401c:	4d06      	ldr	r5, [pc, #24]	; (8004038 <.text_10>)
 800401e:	4025      	ands	r5, r4
 8004020:	0694      	lsls	r4, r2, #26
 8004022:	068a      	lsls	r2, r1, #26
 8004024:	4022      	ands	r2, r4
 8004026:	432a      	orrs	r2, r5
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	0e92      	lsrs	r2, r2, #26
 800402c:	4011      	ands	r1, r2
 800402e:	7c00      	ldrb	r0, [r0, #16]
 8004030:	f001 fb85 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8004034:	bd31      	pop	{r0, r4, r5, pc}
	...

08004038 <.text_10>:
 8004038:	f3ffffff 	.word	0xf3ffffff

0800403c <.text_11>:
 800403c:	ffffefff 	.word	0xffffefff

08004040 <.text_12>:
 8004040:	00008096 	.word	0x00008096

08004044 <.text_13>:
 8004044:	0000f01f 	.word	0x0000f01f

08004048 <.text_14>:
 8004048:	00000262 	.word	0x00000262

0800404c <.text_15>:
 800404c:	0000801b 	.word	0x0000801b

08004050 <.text_16>:
 8004050:	0000802d 	.word	0x0000802d

08004054 <USBPD_PE_SVDM_RequestIdentity>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	000a      	movs	r2, r1
 8004058:	49aa      	ldr	r1, [pc, #680]	; (8004304 <.text_8>)
 800405a:	0083      	lsls	r3, r0, #2
 800405c:	58cb      	ldr	r3, [r1, r3]
 800405e:	2110      	movs	r1, #16
 8004060:	2401      	movs	r4, #1
 8004062:	681d      	ldr	r5, [r3, #0]
 8004064:	686d      	ldr	r5, [r5, #4]
 8004066:	0a6d      	lsrs	r5, r5, #9
 8004068:	4025      	ands	r5, r4
 800406a:	d004      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 800406c:	68dd      	ldr	r5, [r3, #12]
 800406e:	2d00      	cmp	r5, #0
 8004070:	d001      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 8004072:	2a02      	cmp	r2, #2
 8004074:	d101      	bne.n	800407a <USBPD_PE_SVDM_RequestIdentity+0x26>
 8004076:	2102      	movs	r1, #2
 8004078:	e02d      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 800407a:	2532      	movs	r5, #50	; 0x32
 800407c:	5d5d      	ldrb	r5, [r3, r5]
 800407e:	2d00      	cmp	r5, #0
 8004080:	d104      	bne.n	800408c <USBPD_PE_SVDM_RequestIdentity+0x38>
 8004082:	685d      	ldr	r5, [r3, #4]
 8004084:	682d      	ldr	r5, [r5, #0]
 8004086:	0b2d      	lsrs	r5, r5, #12
 8004088:	402c      	ands	r4, r5
 800408a:	d101      	bne.n	8004090 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 800408c:	2103      	movs	r1, #3
 800408e:	e022      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004090:	2433      	movs	r4, #51	; 0x33
 8004092:	551a      	strb	r2, [r3, r4]
 8004094:	2507      	movs	r5, #7
 8004096:	2a00      	cmp	r2, #0
 8004098:	d002      	beq.n	80040a0 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 800409a:	2a01      	cmp	r2, #1
 800409c:	d008      	beq.n	80040b0 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 800409e:	e01a      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	4015      	ands	r5, r2
 80040a8:	2d03      	cmp	r5, #3
 80040aa:	d114      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040ac:	217d      	movs	r1, #125	; 0x7d
 80040ae:	e00c      	b.n	80040ca <USBPD_PE_SVDM_RequestIdentity+0x76>
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4eab      	ldr	r6, [pc, #684]	; (8004364 <.text_10>)
 80040b6:	4016      	ands	r6, r2
 80040b8:	2782      	movs	r7, #130	; 0x82
 80040ba:	007f      	lsls	r7, r7, #1
 80040bc:	42be      	cmp	r6, r7
 80040be:	d003      	beq.n	80040c8 <USBPD_PE_SVDM_RequestIdentity+0x74>
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	4015      	ands	r5, r2
 80040c4:	2d03      	cmp	r5, #3
 80040c6:	d106      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040c8:	2105      	movs	r1, #5
 80040ca:	2232      	movs	r2, #50	; 0x32
 80040cc:	5499      	strb	r1, [r3, r2]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80040d2:	4788      	blx	r1
 80040d4:	2100      	movs	r1, #0
 80040d6:	0008      	movs	r0, r1
 80040d8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080040da <USBPD_PE_SVDM_RequestSVID>:
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	000a      	movs	r2, r1
 80040de:	4989      	ldr	r1, [pc, #548]	; (8004304 <.text_8>)
 80040e0:	0083      	lsls	r3, r0, #2
 80040e2:	58cb      	ldr	r3, [r1, r3]
 80040e4:	2110      	movs	r1, #16
 80040e6:	68dc      	ldr	r4, [r3, #12]
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	d001      	beq.n	80040f0 <USBPD_PE_SVDM_RequestSVID+0x16>
 80040ec:	2a02      	cmp	r2, #2
 80040ee:	d101      	bne.n	80040f4 <USBPD_PE_SVDM_RequestSVID+0x1a>
 80040f0:	2102      	movs	r1, #2
 80040f2:	e020      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80040f4:	2432      	movs	r4, #50	; 0x32
 80040f6:	5d1c      	ldrb	r4, [r3, r4]
 80040f8:	2c00      	cmp	r4, #0
 80040fa:	d105      	bne.n	8004108 <USBPD_PE_SVDM_RequestSVID+0x2e>
 80040fc:	685c      	ldr	r4, [r3, #4]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	2401      	movs	r4, #1
 8004102:	0b2e      	lsrs	r6, r5, #12
 8004104:	4026      	ands	r6, r4
 8004106:	d101      	bne.n	800410c <USBPD_PE_SVDM_RequestSVID+0x32>
 8004108:	2103      	movs	r1, #3
 800410a:	e014      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800410c:	056d      	lsls	r5, r5, #21
 800410e:	0f6d      	lsrs	r5, r5, #29
 8004110:	2d03      	cmp	r5, #3
 8004112:	d110      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004114:	2533      	movs	r5, #51	; 0x33
 8004116:	555a      	strb	r2, [r3, r5]
 8004118:	257f      	movs	r5, #127	; 0x7f
 800411a:	2632      	movs	r6, #50	; 0x32
 800411c:	559d      	strb	r5, [r3, r6]
 800411e:	2a00      	cmp	r2, #0
 8004120:	d005      	beq.n	800412e <USBPD_PE_SVDM_RequestSVID+0x54>
 8004122:	2a01      	cmp	r2, #1
 8004124:	d107      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	0c12      	lsrs	r2, r2, #16
 800412a:	4014      	ands	r4, r2
 800412c:	d003      	beq.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800412e:	6899      	ldr	r1, [r3, #8]
 8004130:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004132:	4788      	blx	r1
 8004134:	2100      	movs	r1, #0
 8004136:	0008      	movs	r0, r1
 8004138:	bd70      	pop	{r4, r5, r6, pc}

0800413a <USBPD_PE_SVDM_RequestMode>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	000b      	movs	r3, r1
 800413e:	4971      	ldr	r1, [pc, #452]	; (8004304 <.text_8>)
 8004140:	0084      	lsls	r4, r0, #2
 8004142:	590c      	ldr	r4, [r1, r4]
 8004144:	2110      	movs	r1, #16
 8004146:	68e5      	ldr	r5, [r4, #12]
 8004148:	2d00      	cmp	r5, #0
 800414a:	d001      	beq.n	8004150 <USBPD_PE_SVDM_RequestMode+0x16>
 800414c:	2b02      	cmp	r3, #2
 800414e:	d101      	bne.n	8004154 <USBPD_PE_SVDM_RequestMode+0x1a>
 8004150:	2102      	movs	r1, #2
 8004152:	e023      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004154:	2532      	movs	r5, #50	; 0x32
 8004156:	5d65      	ldrb	r5, [r4, r5]
 8004158:	2d00      	cmp	r5, #0
 800415a:	d105      	bne.n	8004168 <USBPD_PE_SVDM_RequestMode+0x2e>
 800415c:	6865      	ldr	r5, [r4, #4]
 800415e:	682e      	ldr	r6, [r5, #0]
 8004160:	2501      	movs	r5, #1
 8004162:	0b37      	lsrs	r7, r6, #12
 8004164:	402f      	ands	r7, r5
 8004166:	d101      	bne.n	800416c <USBPD_PE_SVDM_RequestMode+0x32>
 8004168:	2103      	movs	r1, #3
 800416a:	e017      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800416c:	0576      	lsls	r6, r6, #21
 800416e:	0f76      	lsrs	r6, r6, #29
 8004170:	2e03      	cmp	r6, #3
 8004172:	d113      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004174:	2633      	movs	r6, #51	; 0x33
 8004176:	55a3      	strb	r3, [r4, r6]
 8004178:	2681      	movs	r6, #129	; 0x81
 800417a:	2732      	movs	r7, #50	; 0x32
 800417c:	55e6      	strb	r6, [r4, r7]
 800417e:	2696      	movs	r6, #150	; 0x96
 8004180:	00b6      	lsls	r6, r6, #2
 8004182:	53a2      	strh	r2, [r4, r6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USBPD_PE_SVDM_RequestMode+0x5a>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800418c:	6962      	ldr	r2, [r4, #20]
 800418e:	0c12      	lsrs	r2, r2, #16
 8004190:	4015      	ands	r5, r2
 8004192:	d003      	beq.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004198:	4788      	blx	r1
 800419a:	2100      	movs	r1, #0
 800419c:	0008      	movs	r0, r1
 800419e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080041a0 <USBPD_PE_SVDM_RequestModeEnter>:
 80041a0:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80041a2:	4858      	ldr	r0, [pc, #352]	; (8004304 <.text_8>)
 80041a4:	466c      	mov	r4, sp
 80041a6:	7824      	ldrb	r4, [r4, #0]
 80041a8:	00a4      	lsls	r4, r4, #2
 80041aa:	5904      	ldr	r4, [r0, r4]
 80041ac:	2010      	movs	r0, #16
 80041ae:	68e5      	ldr	r5, [r4, #12]
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	d101      	bne.n	80041b8 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 80041b4:	2002      	movs	r0, #2
 80041b6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041b8:	2532      	movs	r5, #50	; 0x32
 80041ba:	5d65      	ldrb	r5, [r4, r5]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d105      	bne.n	80041cc <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 80041c0:	6865      	ldr	r5, [r4, #4]
 80041c2:	682e      	ldr	r6, [r5, #0]
 80041c4:	2501      	movs	r5, #1
 80041c6:	0b37      	lsrs	r7, r6, #12
 80041c8:	402f      	ands	r7, r5
 80041ca:	d101      	bne.n	80041d0 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 80041cc:	2003      	movs	r0, #3
 80041ce:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041d0:	27e1      	movs	r7, #225	; 0xe1
 80041d2:	00ff      	lsls	r7, r7, #3
 80041d4:	4037      	ands	r7, r6
 80041d6:	26c2      	movs	r6, #194	; 0xc2
 80041d8:	00b6      	lsls	r6, r6, #2
 80041da:	42b7      	cmp	r7, r6
 80041dc:	d11e      	bne.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80041de:	2633      	movs	r6, #51	; 0x33
 80041e0:	55a1      	strb	r1, [r4, r6]
 80041e2:	2682      	movs	r6, #130	; 0x82
 80041e4:	2732      	movs	r7, #50	; 0x32
 80041e6:	55e6      	strb	r6, [r4, r7]
 80041e8:	2696      	movs	r6, #150	; 0x96
 80041ea:	00b6      	lsls	r6, r6, #2
 80041ec:	53a2      	strh	r2, [r4, r6]
 80041ee:	6966      	ldr	r6, [r4, #20]
 80041f0:	4aaf      	ldr	r2, [pc, #700]	; (80044b0 <.text_13>)
 80041f2:	4032      	ands	r2, r6
 80041f4:	019e      	lsls	r6, r3, #6
 80041f6:	23e0      	movs	r3, #224	; 0xe0
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4033      	ands	r3, r6
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6163      	str	r3, [r4, #20]
 8004200:	2900      	cmp	r1, #0
 8004202:	d005      	beq.n	8004210 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 8004204:	2902      	cmp	r1, #2
 8004206:	d000      	beq.n	800420a <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004208:	d208      	bcs.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 800420a:	0c19      	lsrs	r1, r3, #16
 800420c:	400d      	ands	r5, r1
 800420e:	d005      	beq.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004210:	4668      	mov	r0, sp
 8004212:	7800      	ldrb	r0, [r0, #0]
 8004214:	68a1      	ldr	r1, [r4, #8]
 8004216:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004218:	4788      	blx	r1
 800421a:	2000      	movs	r0, #0
 800421c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800421e <USBPD_PE_SVDM_RequestModeExit>:
 800421e:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004220:	4838      	ldr	r0, [pc, #224]	; (8004304 <.text_8>)
 8004222:	466c      	mov	r4, sp
 8004224:	7824      	ldrb	r4, [r4, #0]
 8004226:	00a4      	lsls	r4, r4, #2
 8004228:	5904      	ldr	r4, [r0, r4]
 800422a:	2010      	movs	r0, #16
 800422c:	68e5      	ldr	r5, [r4, #12]
 800422e:	2d00      	cmp	r5, #0
 8004230:	d101      	bne.n	8004236 <USBPD_PE_SVDM_RequestModeExit+0x18>
 8004232:	2002      	movs	r0, #2
 8004234:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004236:	2532      	movs	r5, #50	; 0x32
 8004238:	5d65      	ldrb	r5, [r4, r5]
 800423a:	2d00      	cmp	r5, #0
 800423c:	d105      	bne.n	800424a <USBPD_PE_SVDM_RequestModeExit+0x2c>
 800423e:	6865      	ldr	r5, [r4, #4]
 8004240:	682e      	ldr	r6, [r5, #0]
 8004242:	2501      	movs	r5, #1
 8004244:	0b37      	lsrs	r7, r6, #12
 8004246:	402f      	ands	r7, r5
 8004248:	d101      	bne.n	800424e <USBPD_PE_SVDM_RequestModeExit+0x30>
 800424a:	2003      	movs	r0, #3
 800424c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800424e:	27e1      	movs	r7, #225	; 0xe1
 8004250:	00ff      	lsls	r7, r7, #3
 8004252:	4037      	ands	r7, r6
 8004254:	26c2      	movs	r6, #194	; 0xc2
 8004256:	00b6      	lsls	r6, r6, #2
 8004258:	42b7      	cmp	r7, r6
 800425a:	d11e      	bne.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800425c:	2633      	movs	r6, #51	; 0x33
 800425e:	55a1      	strb	r1, [r4, r6]
 8004260:	2683      	movs	r6, #131	; 0x83
 8004262:	2732      	movs	r7, #50	; 0x32
 8004264:	55e6      	strb	r6, [r4, r7]
 8004266:	2696      	movs	r6, #150	; 0x96
 8004268:	00b6      	lsls	r6, r6, #2
 800426a:	53a2      	strh	r2, [r4, r6]
 800426c:	6966      	ldr	r6, [r4, #20]
 800426e:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <.text_13>)
 8004270:	4032      	ands	r2, r6
 8004272:	019e      	lsls	r6, r3, #6
 8004274:	23e0      	movs	r3, #224	; 0xe0
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4033      	ands	r3, r6
 800427a:	4313      	orrs	r3, r2
 800427c:	6163      	str	r3, [r4, #20]
 800427e:	2900      	cmp	r1, #0
 8004280:	d005      	beq.n	800428e <USBPD_PE_SVDM_RequestModeExit+0x70>
 8004282:	2902      	cmp	r1, #2
 8004284:	d000      	beq.n	8004288 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 8004286:	d208      	bcs.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004288:	0c19      	lsrs	r1, r3, #16
 800428a:	400d      	ands	r5, r1
 800428c:	d005      	beq.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800428e:	4668      	mov	r0, sp
 8004290:	7800      	ldrb	r0, [r0, #0]
 8004292:	68a1      	ldr	r1, [r4, #8]
 8004294:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004296:	4788      	blx	r1
 8004298:	2000      	movs	r0, #0
 800429a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800429c <USBPD_PE_SVDM_RequestSpecific>:
 800429c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800429e:	4819      	ldr	r0, [pc, #100]	; (8004304 <.text_8>)
 80042a0:	466c      	mov	r4, sp
 80042a2:	7824      	ldrb	r4, [r4, #0]
 80042a4:	00a4      	lsls	r4, r4, #2
 80042a6:	5904      	ldr	r4, [r0, r4]
 80042a8:	2010      	movs	r0, #16
 80042aa:	68e5      	ldr	r5, [r4, #12]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d101      	bne.n	80042b4 <USBPD_PE_SVDM_RequestSpecific+0x18>
 80042b0:	2002      	movs	r0, #2
 80042b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042b4:	2532      	movs	r5, #50	; 0x32
 80042b6:	5d65      	ldrb	r5, [r4, r5]
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d105      	bne.n	80042c8 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 80042bc:	6865      	ldr	r5, [r4, #4]
 80042be:	682d      	ldr	r5, [r5, #0]
 80042c0:	2601      	movs	r6, #1
 80042c2:	0b2f      	lsrs	r7, r5, #12
 80042c4:	4037      	ands	r7, r6
 80042c6:	d101      	bne.n	80042cc <USBPD_PE_SVDM_RequestSpecific+0x30>
 80042c8:	2003      	movs	r0, #3
 80042ca:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042cc:	6967      	ldr	r7, [r4, #20]
 80042ce:	0c3f      	lsrs	r7, r7, #16
 80042d0:	403e      	ands	r6, r7
 80042d2:	d101      	bne.n	80042d8 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 80042d4:	000e      	movs	r6, r1
 80042d6:	d113      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042d8:	056d      	lsls	r5, r5, #21
 80042da:	0f6d      	lsrs	r5, r5, #29
 80042dc:	2d03      	cmp	r5, #3
 80042de:	d10f      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042e0:	2033      	movs	r0, #51	; 0x33
 80042e2:	5421      	strb	r1, [r4, r0]
 80042e4:	2085      	movs	r0, #133	; 0x85
 80042e6:	2132      	movs	r1, #50	; 0x32
 80042e8:	5460      	strb	r0, [r4, r1]
 80042ea:	2095      	movs	r0, #149	; 0x95
 80042ec:	0080      	lsls	r0, r0, #2
 80042ee:	1820      	adds	r0, r4, r0
 80042f0:	6002      	str	r2, [r0, #0]
 80042f2:	8083      	strh	r3, [r0, #4]
 80042f4:	4668      	mov	r0, sp
 80042f6:	7800      	ldrb	r0, [r0, #0]
 80042f8:	68a1      	ldr	r1, [r4, #8]
 80042fa:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80042fc:	4788      	blx	r1
 80042fe:	2000      	movs	r0, #0
 8004300:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08004304 <.text_8>:
 8004304:	200002f4 	.word	0x200002f4

08004308 <USBPD_PE_SVDM_RequestAttention>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	000b      	movs	r3, r1
 800430c:	4969      	ldr	r1, [pc, #420]	; (80044b4 <.text_14>)
 800430e:	0084      	lsls	r4, r0, #2
 8004310:	590d      	ldr	r5, [r1, r4]
 8004312:	2110      	movs	r1, #16
 8004314:	68ec      	ldr	r4, [r5, #12]
 8004316:	2c00      	cmp	r4, #0
 8004318:	d001      	beq.n	800431e <USBPD_PE_SVDM_RequestAttention+0x16>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <USBPD_PE_SVDM_RequestAttention+0x1a>
 800431e:	2102      	movs	r1, #2
 8004320:	e01e      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004322:	2332      	movs	r3, #50	; 0x32
 8004324:	5ceb      	ldrb	r3, [r5, r3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <USBPD_PE_SVDM_RequestAttention+0x2c>
 800432a:	686b      	ldr	r3, [r5, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	04dc      	lsls	r4, r3, #19
 8004330:	0fe4      	lsrs	r4, r4, #31
 8004332:	d101      	bne.n	8004338 <USBPD_PE_SVDM_RequestAttention+0x30>
 8004334:	2103      	movs	r1, #3
 8004336:	e013      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004338:	055b      	lsls	r3, r3, #21
 800433a:	0f5b      	lsrs	r3, r3, #29
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10f      	bne.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004340:	2400      	movs	r4, #0
 8004342:	2333      	movs	r3, #51	; 0x33
 8004344:	54ec      	strb	r4, [r5, r3]
 8004346:	2184      	movs	r1, #132	; 0x84
 8004348:	2332      	movs	r3, #50	; 0x32
 800434a:	54e9      	strb	r1, [r5, r3]
 800434c:	2195      	movs	r1, #149	; 0x95
 800434e:	0089      	lsls	r1, r1, #2
 8004350:	1869      	adds	r1, r5, r1
 8004352:	2306      	movs	r3, #6
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	808a      	strh	r2, [r1, #4]
 8004358:	68a9      	ldr	r1, [r5, #8]
 800435a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800435c:	4788      	blx	r1
 800435e:	2100      	movs	r1, #0
 8004360:	0008      	movs	r0, r1
 8004362:	bd32      	pop	{r1, r4, r5, pc}

08004364 <.text_10>:
 8004364:	00000704 	.word	0x00000704

08004368 <USBPD_PE_UVDM_RequestMessage>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	000a      	movs	r2, r1
 800436c:	4951      	ldr	r1, [pc, #324]	; (80044b4 <.text_14>)
 800436e:	0083      	lsls	r3, r0, #2
 8004370:	58cb      	ldr	r3, [r1, r3]
 8004372:	2110      	movs	r1, #16
 8004374:	68dc      	ldr	r4, [r3, #12]
 8004376:	2c00      	cmp	r4, #0
 8004378:	d101      	bne.n	800437e <USBPD_PE_UVDM_RequestMessage+0x16>
 800437a:	2102      	movs	r1, #2
 800437c:	e01d      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 800437e:	2432      	movs	r4, #50	; 0x32
 8004380:	5d1c      	ldrb	r4, [r3, r4]
 8004382:	2c00      	cmp	r4, #0
 8004384:	d105      	bne.n	8004392 <USBPD_PE_UVDM_RequestMessage+0x2a>
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	6824      	ldr	r4, [r4, #0]
 800438a:	2501      	movs	r5, #1
 800438c:	0b26      	lsrs	r6, r4, #12
 800438e:	402e      	ands	r6, r5
 8004390:	d101      	bne.n	8004396 <USBPD_PE_UVDM_RequestMessage+0x2e>
 8004392:	2103      	movs	r1, #3
 8004394:	e011      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 8004396:	0be6      	lsrs	r6, r4, #15
 8004398:	4035      	ands	r5, r6
 800439a:	d101      	bne.n	80043a0 <USBPD_PE_UVDM_RequestMessage+0x38>
 800439c:	0015      	movs	r5, r2
 800439e:	d10c      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a0:	0564      	lsls	r4, r4, #21
 80043a2:	0f64      	lsrs	r4, r4, #29
 80043a4:	2c03      	cmp	r4, #3
 80043a6:	d108      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a8:	2133      	movs	r1, #51	; 0x33
 80043aa:	545a      	strb	r2, [r3, r1]
 80043ac:	2186      	movs	r1, #134	; 0x86
 80043ae:	2232      	movs	r2, #50	; 0x32
 80043b0:	5499      	strb	r1, [r3, r2]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80043b6:	4788      	blx	r1
 80043b8:	2100      	movs	r1, #0
 80043ba:	0008      	movs	r0, r1
 80043bc:	bd70      	pop	{r4, r5, r6, pc}

080043be <PE_Receive_SVDM>:
 80043be:	493e      	ldr	r1, [pc, #248]	; (80044b8 <.text_15>)
 80043c0:	1842      	adds	r2, r0, r1
 80043c2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	0f49      	lsrs	r1, r1, #29
 80043c8:	1e49      	subs	r1, r1, #1
 80043ca:	7611      	strb	r1, [r2, #24]
 80043cc:	2131      	movs	r1, #49	; 0x31
 80043ce:	5c41      	ldrb	r1, [r0, r1]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d000      	beq.n	80043d6 <PE_Receive_SVDM+0x18>
 80043d4:	4770      	bx	lr
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	2300      	movs	r3, #0
 80043da:	e010      	b.n	80043fe <PE_Receive_SVDM+0x40>
 80043dc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80043de:	009c      	lsls	r4, r3, #2
 80043e0:	1909      	adds	r1, r1, r4
 80043e2:	798c      	ldrb	r4, [r1, #6]
 80043e4:	79cd      	ldrb	r5, [r1, #7]
 80043e6:	022d      	lsls	r5, r5, #8
 80043e8:	1964      	adds	r4, r4, r5
 80043ea:	7a0d      	ldrb	r5, [r1, #8]
 80043ec:	042d      	lsls	r5, r5, #16
 80043ee:	1964      	adds	r4, r4, r5
 80043f0:	7a49      	ldrb	r1, [r1, #9]
 80043f2:	0609      	lsls	r1, r1, #24
 80043f4:	1861      	adds	r1, r4, r1
 80043f6:	009c      	lsls	r4, r3, #2
 80043f8:	5111      	str	r1, [r2, r4]
 80043fa:	1c5b      	adds	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	7e11      	ldrb	r1, [r2, #24]
 8004400:	428b      	cmp	r3, r1
 8004402:	dbeb      	blt.n	80043dc <PE_Receive_SVDM+0x1e>
 8004404:	0004      	movs	r4, r0
 8004406:	2503      	movs	r5, #3
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <.text_16>)
 800440a:	482d      	ldr	r0, [pc, #180]	; (80044c0 <.text_17>)
 800440c:	2694      	movs	r6, #148	; 0x94
 800440e:	00b6      	lsls	r6, r6, #2
 8004410:	5da6      	ldrb	r6, [r4, r6]
 8004412:	06f6      	lsls	r6, r6, #27
 8004414:	0ef6      	lsrs	r6, r6, #27
 8004416:	1e76      	subs	r6, r6, #1
 8004418:	d00d      	beq.n	8004436 <PE_Receive_SVDM+0x78>
 800441a:	1e76      	subs	r6, r6, #1
 800441c:	d022      	beq.n	8004464 <PE_Receive_SVDM+0xa6>
 800441e:	1e76      	subs	r6, r6, #1
 8004420:	d025      	beq.n	800446e <PE_Receive_SVDM+0xb0>
 8004422:	1e76      	subs	r6, r6, #1
 8004424:	d028      	beq.n	8004478 <PE_Receive_SVDM+0xba>
 8004426:	1e76      	subs	r6, r6, #1
 8004428:	d02b      	beq.n	8004482 <PE_Receive_SVDM+0xc4>
 800442a:	1e76      	subs	r6, r6, #1
 800442c:	d02e      	beq.n	800448c <PE_Receive_SVDM+0xce>
 800442e:	3e0a      	subs	r6, #10
 8004430:	2e0f      	cmp	r6, #15
 8004432:	d937      	bls.n	80044a4 <PE_Receive_SVDM+0xe6>
 8004434:	bd70      	pop	{r4, r5, r6, pc}
 8004436:	2150      	movs	r1, #80	; 0x50
 8004438:	7721      	strb	r1, [r4, #28]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	680a      	ldr	r2, [r1, #0]
 800443e:	0693      	lsls	r3, r2, #26
 8004440:	0fdb      	lsrs	r3, r3, #31
 8004442:	2694      	movs	r6, #148	; 0x94
 8004444:	00b6      	lsls	r6, r6, #2
 8004446:	59a6      	ldr	r6, [r4, r6]
 8004448:	0b76      	lsrs	r6, r6, #13
 800444a:	4035      	ands	r5, r6
 800444c:	429d      	cmp	r5, r3
 800444e:	da00      	bge.n	8004452 <PE_Receive_SVDM+0x94>
 8004450:	002b      	movs	r3, r5
 8004452:	2520      	movs	r5, #32
 8004454:	43aa      	bics	r2, r5
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	402b      	ands	r3, r5
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
 800445e:	83e0      	strh	r0, [r4, #30]
 8004460:	2075      	movs	r0, #117	; 0x75
 8004462:	e023      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004464:	2152      	movs	r1, #82	; 0x52
 8004466:	7721      	strb	r1, [r4, #28]
 8004468:	83e0      	strh	r0, [r4, #30]
 800446a:	2076      	movs	r0, #118	; 0x76
 800446c:	e01e      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800446e:	2153      	movs	r1, #83	; 0x53
 8004470:	7721      	strb	r1, [r4, #28]
 8004472:	83e0      	strh	r0, [r4, #30]
 8004474:	2078      	movs	r0, #120	; 0x78
 8004476:	e019      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004478:	2054      	movs	r0, #84	; 0x54
 800447a:	7720      	strb	r0, [r4, #28]
 800447c:	83e3      	strh	r3, [r4, #30]
 800447e:	2079      	movs	r0, #121	; 0x79
 8004480:	e014      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004482:	2055      	movs	r0, #85	; 0x55
 8004484:	7720      	strb	r0, [r4, #28]
 8004486:	83e3      	strh	r3, [r4, #30]
 8004488:	207a      	movs	r0, #122	; 0x7a
 800448a:	e00f      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <PE_Receive_SVDM+0xe2>
 8004494:	2900      	cmp	r1, #0
 8004496:	d000      	beq.n	800449a <PE_Receive_SVDM+0xdc>
 8004498:	2101      	movs	r1, #1
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	7c20      	ldrb	r0, [r4, #16]
 800449e:	4798      	blx	r3
 80044a0:	7465      	strb	r5, [r4, #17]
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	215a      	movs	r1, #90	; 0x5a
 80044a6:	7721      	strb	r1, [r4, #28]
 80044a8:	83e0      	strh	r0, [r4, #30]
 80044aa:	207b      	movs	r0, #123	; 0x7b
 80044ac:	7460      	strb	r0, [r4, #17]
 80044ae:	bd70      	pop	{r4, r5, r6, pc}

080044b0 <.text_13>:
 80044b0:	fffffe3f 	.word	0xfffffe3f

080044b4 <.text_14>:
 80044b4:	200002f4 	.word	0x200002f4

080044b8 <.text_15>:
 80044b8:	00000494 	.word	0x00000494

080044bc <.text_16>:
 80044bc:	00008019 	.word	0x00008019

080044c0 <.text_17>:
 80044c0:	0000800f 	.word	0x0000800f

080044c4 <PE_StateMachine_VDM>:
 80044c4:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 80044c6:	b09c      	sub	sp, #112	; 0x70
 80044c8:	0005      	movs	r5, r0
 80044ca:	2002      	movs	r0, #2
 80044cc:	9004      	str	r0, [sp, #16]
 80044ce:	7c6a      	ldrb	r2, [r5, #17]
 80044d0:	0010      	movs	r0, r2
 80044d2:	3875      	subs	r0, #117	; 0x75
 80044d4:	2807      	cmp	r0, #7
 80044d6:	d206      	bcs.n	80044e6 <__iar_annotation$$branch+0x4>
 80044d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80044da:	7800      	ldrb	r0, [r0, #0]
 80044dc:	2814      	cmp	r0, #20
 80044de:	d002      	beq.n	80044e6 <__iar_annotation$$branch+0x4>
 80044e0:	2002      	movs	r0, #2

080044e2 <__iar_annotation$$branch>:
 80044e2:	f000 febc 	bl	800525e <__iar_annotation$$branch+0xce4>
 80044e6:	2094      	movs	r0, #148	; 0x94
 80044e8:	0080      	lsls	r0, r0, #2
 80044ea:	182c      	adds	r4, r5, r0
 80044ec:	210b      	movs	r1, #11
 80044ee:	271e      	movs	r7, #30
 80044f0:	201f      	movs	r0, #31
 80044f2:	43c0      	mvns	r0, r0
 80044f4:	26c0      	movs	r6, #192	; 0xc0
 80044f6:	43f6      	mvns	r6, r6
 80044f8:	2a75      	cmp	r2, #117	; 0x75
 80044fa:	d041      	beq.n	8004580 <__iar_annotation$$branch+0x6>
 80044fc:	2a76      	cmp	r2, #118	; 0x76
 80044fe:	d100      	bne.n	8004502 <__iar_annotation$$branch+0x20>
 8004500:	e0bb      	b.n	800467a <__iar_annotation$$branch+0x100>
 8004502:	2a77      	cmp	r2, #119	; 0x77
 8004504:	d100      	bne.n	8004508 <__iar_annotation$$branch+0x26>
 8004506:	e144      	b.n	8004792 <__iar_annotation$$branch+0x218>
 8004508:	2a78      	cmp	r2, #120	; 0x78
 800450a:	d100      	bne.n	800450e <__iar_annotation$$branch+0x2c>
 800450c:	e1b4      	b.n	8004878 <__iar_annotation$$branch+0x2fe>
 800450e:	2a79      	cmp	r2, #121	; 0x79
 8004510:	d100      	bne.n	8004514 <__iar_annotation$$branch+0x32>
 8004512:	e216      	b.n	8004942 <__iar_annotation$$branch+0x3c8>
 8004514:	2a7a      	cmp	r2, #122	; 0x7a
 8004516:	d100      	bne.n	800451a <__iar_annotation$$branch+0x38>
 8004518:	e24b      	b.n	80049b2 <__iar_annotation$$branch+0x438>
 800451a:	2a7b      	cmp	r2, #123	; 0x7b
 800451c:	d100      	bne.n	8004520 <__iar_annotation$$branch+0x3e>
 800451e:	e292      	b.n	8004a46 <__iar_annotation$$branch+0x4cc>
 8004520:	2a7d      	cmp	r2, #125	; 0x7d
 8004522:	d100      	bne.n	8004526 <__iar_annotation$$branch+0x44>
 8004524:	e2e0      	b.n	8004ae8 <__iar_annotation$$branch+0x56e>
 8004526:	2a7f      	cmp	r2, #127	; 0x7f
 8004528:	d100      	bne.n	800452c <__iar_annotation$$branch+0x4a>
 800452a:	e352      	b.n	8004bd2 <__iar_annotation$$branch+0x658>
 800452c:	2a81      	cmp	r2, #129	; 0x81
 800452e:	d100      	bne.n	8004532 <__iar_annotation$$branch+0x50>
 8004530:	e3c2      	b.n	8004cb8 <__iar_annotation$$branch+0x73e>
 8004532:	2a82      	cmp	r2, #130	; 0x82
 8004534:	d101      	bne.n	800453a <__iar_annotation$$branch+0x4>

08004536 <__iar_annotation$$branch>:
 8004536:	f000 fc3b 	bl	8004db0 <__iar_annotation$$branch+0x836>
 800453a:	2a83      	cmp	r2, #131	; 0x83
 800453c:	d101      	bne.n	8004542 <__iar_annotation$$branch+0x4>

0800453e <__iar_annotation$$branch>:
 800453e:	f000 fcc9 	bl	8004ed4 <__iar_annotation$$branch+0x95a>
 8004542:	2a84      	cmp	r2, #132	; 0x84
 8004544:	d101      	bne.n	800454a <__iar_annotation$$branch+0x4>

08004546 <__iar_annotation$$branch>:
 8004546:	f000 fe38 	bl	80051ba <__iar_annotation$$branch+0xc40>
 800454a:	2a85      	cmp	r2, #133	; 0x85
 800454c:	d101      	bne.n	8004552 <__iar_annotation$$branch+0x4>

0800454e <__iar_annotation$$branch>:
 800454e:	f000 fd5d 	bl	800500c <__iar_annotation$$branch+0xa92>
 8004552:	2a87      	cmp	r2, #135	; 0x87
 8004554:	d100      	bne.n	8004558 <__iar_annotation$$branch+0xa>
 8004556:	e2fc      	b.n	8004b52 <__iar_annotation$$branch+0x5d8>
 8004558:	2a89      	cmp	r2, #137	; 0x89
 800455a:	d100      	bne.n	800455e <__iar_annotation$$branch+0x10>
 800455c:	e375      	b.n	8004c4a <__iar_annotation$$branch+0x6d0>
 800455e:	2a8b      	cmp	r2, #139	; 0x8b
 8004560:	d101      	bne.n	8004566 <__iar_annotation$$branch+0x4>

08004562 <__iar_annotation$$branch>:
 8004562:	f000 fbe4 	bl	8004d2e <__iar_annotation$$branch+0x7b4>
 8004566:	2a8c      	cmp	r2, #140	; 0x8c
 8004568:	d101      	bne.n	800456e <__iar_annotation$$branch+0x4>

0800456a <__iar_annotation$$branch>:
 800456a:	f000 fc63 	bl	8004e34 <__iar_annotation$$branch+0x8ba>
 800456e:	2a8d      	cmp	r2, #141	; 0x8d
 8004570:	d101      	bne.n	8004576 <__iar_annotation$$branch+0x4>

08004572 <__iar_annotation$$branch>:
 8004572:	f000 fcf7 	bl	8004f64 <__iar_annotation$$branch+0x9ea>
 8004576:	2a8f      	cmp	r2, #143	; 0x8f
 8004578:	d101      	bne.n	800457e <__iar_annotation$$branch+0x4>

0800457a <__iar_annotation$$branch>:
 800457a:	f000 fda5 	bl	80050c8 <__iar_annotation$$branch+0xb4e>
 800457e:	e2b2      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004580:	2201      	movs	r2, #1
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	03d3      	lsls	r3, r2, #15
 8004586:	8bea      	ldrh	r2, [r5, #30]
 8004588:	429a      	cmp	r2, r3
 800458a:	d100      	bne.n	800458e <__iar_annotation$$branch+0x14>
 800458c:	e262      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800458e:	2701      	movs	r7, #1
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	4010      	ands	r0, r2
 8004594:	4338      	orrs	r0, r7
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	4303      	orrs	r3, r0
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	6868      	ldr	r0, [r5, #4]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	0942      	lsrs	r2, r0, #5
 80045a2:	403a      	ands	r2, r7
 80045a4:	48c9      	ldr	r0, [pc, #804]	; (80048cc <__iar_annotation$$branch+0x352>)
 80045a6:	4018      	ands	r0, r3
 80045a8:	0352      	lsls	r2, r2, #13
 80045aa:	4302      	orrs	r2, r0
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	6868      	ldr	r0, [r5, #4]
 80045b0:	6800      	ldr	r0, [r0, #0]
 80045b2:	4001      	ands	r1, r0
 80045b4:	2909      	cmp	r1, #9
 80045b6:	d051      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045b8:	68e8      	ldr	r0, [r5, #12]
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d04e      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045be:	6803      	ldr	r3, [r0, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04b      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045c4:	0c10      	lsrs	r0, r2, #16
 80045c6:	21ff      	movs	r1, #255	; 0xff
 80045c8:	0209      	lsls	r1, r1, #8
 80045ca:	4288      	cmp	r0, r1
 80045cc:	d146      	bne.n	800465c <__iar_annotation$$branch+0xe2>
 80045ce:	a90b      	add	r1, sp, #44	; 0x2c
 80045d0:	7c28      	ldrb	r0, [r5, #16]
 80045d2:	4798      	blx	r3
 80045d4:	2803      	cmp	r0, #3
 80045d6:	d002      	beq.n	80045de <__iar_annotation$$branch+0x64>
 80045d8:	280f      	cmp	r0, #15
 80045da:	d005      	beq.n	80045e8 <__iar_annotation$$branch+0x6e>
 80045dc:	e03e      	b.n	800465c <__iar_annotation$$branch+0xe2>
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	21c0      	movs	r1, #192	; 0xc0
 80045e2:	4301      	orrs	r1, r0
 80045e4:	6021      	str	r1, [r4, #0]
 80045e6:	e03e      	b.n	8004666 <__iar_annotation$$branch+0xec>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	4006      	ands	r6, r0
 80045ec:	2040      	movs	r0, #64	; 0x40
 80045ee:	4330      	orrs	r0, r6
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80045f4:	9015      	str	r0, [sp, #84]	; 0x54
 80045f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80045f8:	9016      	str	r0, [sp, #88]	; 0x58
 80045fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045fc:	9017      	str	r0, [sp, #92]	; 0x5c
 80045fe:	2004      	movs	r0, #4
 8004600:	9003      	str	r0, [sp, #12]
 8004602:	a80b      	add	r0, sp, #44	; 0x2c
 8004604:	2120      	movs	r1, #32
 8004606:	5c40      	ldrb	r0, [r0, r1]
 8004608:	0841      	lsrs	r1, r0, #1
 800460a:	4239      	tst	r1, r7
 800460c:	d003      	beq.n	8004616 <__iar_annotation$$branch+0x9c>
 800460e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004610:	9118      	str	r1, [sp, #96]	; 0x60
 8004612:	2105      	movs	r1, #5
 8004614:	9103      	str	r1, [sp, #12]
 8004616:	08c2      	lsrs	r2, r0, #3
 8004618:	2101      	movs	r1, #1
 800461a:	4011      	ands	r1, r2
 800461c:	d008      	beq.n	8004630 <__iar_annotation$$branch+0xb6>
 800461e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8004620:	aa14      	add	r2, sp, #80	; 0x50
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	50d6      	str	r6, [r2, r3]
 8004628:	9a03      	ldr	r2, [sp, #12]
 800462a:	1c52      	adds	r2, r2, #1
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	9203      	str	r2, [sp, #12]
 8004630:	0900      	lsrs	r0, r0, #4
 8004632:	4238      	tst	r0, r7
 8004634:	d017      	beq.n	8004666 <__iar_annotation$$branch+0xec>
 8004636:	2900      	cmp	r1, #0
 8004638:	d007      	beq.n	800464a <__iar_annotation$$branch+0xd0>
 800463a:	2000      	movs	r0, #0
 800463c:	a914      	add	r1, sp, #80	; 0x50
 800463e:	9a03      	ldr	r2, [sp, #12]
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	5088      	str	r0, [r1, r2]
 8004644:	9803      	ldr	r0, [sp, #12]
 8004646:	1c40      	adds	r0, r0, #1
 8004648:	9003      	str	r0, [sp, #12]
 800464a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800464c:	a914      	add	r1, sp, #80	; 0x50
 800464e:	9a03      	ldr	r2, [sp, #12]
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	5088      	str	r0, [r1, r2]
 8004654:	9803      	ldr	r0, [sp, #12]
 8004656:	1c40      	adds	r0, r0, #1
 8004658:	9003      	str	r0, [sp, #12]
 800465a:	e004      	b.n	8004666 <__iar_annotation$$branch+0xec>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	4006      	ands	r6, r0
 8004660:	2080      	movs	r0, #128	; 0x80
 8004662:	4330      	orrs	r0, r6
 8004664:	6020      	str	r0, [r4, #0]
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	9014      	str	r0, [sp, #80]	; 0x50
 800466a:	2000      	movs	r0, #0
 800466c:	9002      	str	r0, [sp, #8]
 800466e:	2003      	movs	r0, #3
 8004670:	9001      	str	r0, [sp, #4]
 8004672:	9803      	ldr	r0, [sp, #12]
 8004674:	9000      	str	r0, [sp, #0]
 8004676:	ab14      	add	r3, sp, #80	; 0x50
 8004678:	e22f      	b.n	8004ada <__iar_annotation$$branch+0x560>
 800467a:	2201      	movs	r2, #1
 800467c:	466b      	mov	r3, sp
 800467e:	731a      	strb	r2, [r3, #12]
 8004680:	03d2      	lsls	r2, r2, #15
 8004682:	8beb      	ldrh	r3, [r5, #30]
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <__iar_annotation$$branch+0x110>
 8004688:	e1e4      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	4018      	ands	r0, r3
 800468e:	2302      	movs	r3, #2
 8004690:	4303      	orrs	r3, r0
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	431a      	orrs	r2, r3
 8004696:	6022      	str	r2, [r4, #0]
 8004698:	6868      	ldr	r0, [r5, #4]
 800469a:	6803      	ldr	r3, [r0, #0]
 800469c:	0698      	lsls	r0, r3, #26
 800469e:	0fc0      	lsrs	r0, r0, #31
 80046a0:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <__iar_annotation$$branch+0x352>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0340      	lsls	r0, r0, #13
 80046a6:	4318      	orrs	r0, r3
 80046a8:	6020      	str	r0, [r4, #0]
 80046aa:	686a      	ldr	r2, [r5, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4011      	ands	r1, r2
 80046b0:	2909      	cmp	r1, #9
 80046b2:	d05f      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046b4:	68e9      	ldr	r1, [r5, #12]
 80046b6:	684b      	ldr	r3, [r1, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046bc:	0c00      	lsrs	r0, r0, #16
 80046be:	21ff      	movs	r1, #255	; 0xff
 80046c0:	0209      	lsls	r1, r1, #8
 80046c2:	4288      	cmp	r0, r1
 80046c4:	d156      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046c6:	4882      	ldr	r0, [pc, #520]	; (80048d0 <__iar_annotation$$branch+0x356>)
 80046c8:	182a      	adds	r2, r5, r0
 80046ca:	a905      	add	r1, sp, #20
 80046cc:	7c28      	ldrb	r0, [r5, #16]
 80046ce:	4798      	blx	r3
 80046d0:	2803      	cmp	r0, #3
 80046d2:	d04b      	beq.n	800476c <__iar_annotation$$branch+0x1f2>
 80046d4:	280f      	cmp	r0, #15
 80046d6:	d14d      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4006      	ands	r6, r0
 80046dc:	2040      	movs	r0, #64	; 0x40
 80046de:	4330      	orrs	r0, r6
 80046e0:	6020      	str	r0, [r4, #0]
 80046e2:	211c      	movs	r1, #28
 80046e4:	a806      	add	r0, sp, #24
 80046e6:	f01e f88a 	bl	80227fe <__aeabi_memclr>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2200      	movs	r2, #0
 80046ee:	a806      	add	r0, sp, #24
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	e014      	b.n	800471e <__iar_annotation$$branch+0x1a4>
 80046f4:	005f      	lsls	r7, r3, #1
 80046f6:	5bf6      	ldrh	r6, [r6, r7]
 80046f8:	0436      	lsls	r6, r6, #16
 80046fa:	430e      	orrs	r6, r1
 80046fc:	6006      	str	r6, [r0, #0]
 80046fe:	e00d      	b.n	800471c <__iar_annotation$$branch+0x1a2>
 8004700:	1c52      	adds	r2, r2, #1
 8004702:	9800      	ldr	r0, [sp, #0]
 8004704:	1d00      	adds	r0, r0, #4
 8004706:	0859      	lsrs	r1, r3, #1
 8004708:	0089      	lsls	r1, r1, #2
 800470a:	1840      	adds	r0, r0, r1
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	6801      	ldr	r1, [r0, #0]
 8004710:	9e05      	ldr	r6, [sp, #20]
 8004712:	d5ef      	bpl.n	80046f4 <__iar_annotation$$branch+0x17a>
 8004714:	005f      	lsls	r7, r3, #1
 8004716:	5bf6      	ldrh	r6, [r6, r7]
 8004718:	4331      	orrs	r1, r6
 800471a:	6001      	str	r1, [r0, #0]
 800471c:	1c5b      	adds	r3, r3, #1
 800471e:	486d      	ldr	r0, [pc, #436]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004720:	1828      	adds	r0, r5, r0
 8004722:	7840      	ldrb	r0, [r0, #1]
 8004724:	4283      	cmp	r3, r0
 8004726:	d201      	bcs.n	800472c <__iar_annotation$$branch+0x1b2>
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d3e9      	bcc.n	8004700 <__iar_annotation$$branch+0x186>
 800472c:	1a80      	subs	r0, r0, r2
 800472e:	4969      	ldr	r1, [pc, #420]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004730:	1869      	adds	r1, r5, r1
 8004732:	7048      	strb	r0, [r1, #1]
 8004734:	b2d0      	uxtb	r0, r2
 8004736:	280c      	cmp	r0, #12
 8004738:	d111      	bne.n	800475e <__iar_annotation$$branch+0x1e4>
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	9006      	str	r0, [sp, #24]
 800473e:	2000      	movs	r0, #0
 8004740:	9002      	str	r0, [sp, #8]
 8004742:	2077      	movs	r0, #119	; 0x77
 8004744:	9001      	str	r0, [sp, #4]
 8004746:	2007      	movs	r0, #7
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	ab06      	add	r3, sp, #24
 800474c:	220f      	movs	r2, #15
 800474e:	2031      	movs	r0, #49	; 0x31
 8004750:	5c29      	ldrb	r1, [r5, r0]
 8004752:	0028      	movs	r0, r5
 8004754:	f7fc ff07 	bl	8001566 <PE_Send_DataMessage>
 8004758:	485f      	ldr	r0, [pc, #380]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 800475a:	83e8      	strh	r0, [r5, #30]
 800475c:	e1c3      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800475e:	0612      	lsls	r2, r2, #24
 8004760:	0e50      	lsrs	r0, r2, #25
 8004762:	1c80      	adds	r0, r0, #2
 8004764:	4669      	mov	r1, sp
 8004766:	7308      	strb	r0, [r1, #12]
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	e008      	b.n	800477e <__iar_annotation$$branch+0x204>
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	20c0      	movs	r0, #192	; 0xc0
 8004770:	4308      	orrs	r0, r1
 8004772:	e003      	b.n	800477c <__iar_annotation$$branch+0x202>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4006      	ands	r6, r0
 8004778:	2080      	movs	r0, #128	; 0x80
 800477a:	4330      	orrs	r0, r6
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	9006      	str	r0, [sp, #24]
 8004780:	2000      	movs	r0, #0
 8004782:	9002      	str	r0, [sp, #8]
 8004784:	2003      	movs	r0, #3
 8004786:	9001      	str	r0, [sp, #4]
 8004788:	4668      	mov	r0, sp
 800478a:	7b00      	ldrb	r0, [r0, #12]
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	ab06      	add	r3, sp, #24
 8004790:	e1a3      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004792:	2180      	movs	r1, #128	; 0x80
 8004794:	0209      	lsls	r1, r1, #8
 8004796:	8bea      	ldrh	r2, [r5, #30]
 8004798:	428a      	cmp	r2, r1
 800479a:	d100      	bne.n	800479e <__iar_annotation$$branch+0x224>
 800479c:	e15a      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	4010      	ands	r0, r2
 80047a2:	2202      	movs	r2, #2
 80047a4:	4302      	orrs	r2, r0
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	b292      	uxth	r2, r2
 80047aa:	20ff      	movs	r0, #255	; 0xff
 80047ac:	0600      	lsls	r0, r0, #24
 80047ae:	4310      	orrs	r0, r2
 80047b0:	6020      	str	r0, [r4, #0]
 80047b2:	4301      	orrs	r1, r0
 80047b4:	6021      	str	r1, [r4, #0]
 80047b6:	2701      	movs	r7, #1
 80047b8:	6868      	ldr	r0, [r5, #4]
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	0940      	lsrs	r0, r0, #5
 80047be:	4038      	ands	r0, r7
 80047c0:	4a42      	ldr	r2, [pc, #264]	; (80048cc <__iar_annotation$$branch+0x352>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	0340      	lsls	r0, r0, #13
 80047c6:	4310      	orrs	r0, r2
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	4006      	ands	r6, r0
 80047cc:	2040      	movs	r0, #64	; 0x40
 80047ce:	4330      	orrs	r0, r6
 80047d0:	6020      	str	r0, [r4, #0]
 80047d2:	aa03      	add	r2, sp, #12
 80047d4:	a905      	add	r1, sp, #20
 80047d6:	7c28      	ldrb	r0, [r5, #16]
 80047d8:	68eb      	ldr	r3, [r5, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4798      	blx	r3
 80047de:	211c      	movs	r1, #28
 80047e0:	a806      	add	r0, sp, #24
 80047e2:	f01e f80c 	bl	80227fe <__aeabi_memclr>
 80047e6:	2100      	movs	r1, #0
 80047e8:	2200      	movs	r2, #0
 80047ea:	a806      	add	r0, sp, #24
 80047ec:	002c      	movs	r4, r5
 80047ee:	e016      	b.n	800481e <__iar_annotation$$branch+0x2a4>
 80047f0:	004d      	lsls	r5, r1, #1
 80047f2:	5b75      	ldrh	r5, [r6, r5]
 80047f4:	042d      	lsls	r5, r5, #16
 80047f6:	4666      	mov	r6, ip
 80047f8:	4335      	orrs	r5, r6
 80047fa:	601d      	str	r5, [r3, #0]
 80047fc:	e00e      	b.n	800481c <__iar_annotation$$branch+0x2a2>
 80047fe:	1c52      	adds	r2, r2, #1
 8004800:	1d03      	adds	r3, r0, #4
 8004802:	084d      	lsrs	r5, r1, #1
 8004804:	00ad      	lsls	r5, r5, #2
 8004806:	195b      	adds	r3, r3, r5
 8004808:	4239      	tst	r1, r7
 800480a:	681e      	ldr	r6, [r3, #0]
 800480c:	46b4      	mov	ip, r6
 800480e:	9e05      	ldr	r6, [sp, #20]
 8004810:	d0ee      	beq.n	80047f0 <__iar_annotation$$branch+0x276>
 8004812:	004d      	lsls	r5, r1, #1
 8004814:	5b75      	ldrh	r5, [r6, r5]
 8004816:	4666      	mov	r6, ip
 8004818:	432e      	orrs	r6, r5
 800481a:	601e      	str	r6, [r3, #0]
 800481c:	1c49      	adds	r1, r1, #1
 800481e:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004820:	18e3      	adds	r3, r4, r3
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	4299      	cmp	r1, r3
 8004826:	d201      	bcs.n	800482c <__iar_annotation$$branch+0x2b2>
 8004828:	290c      	cmp	r1, #12
 800482a:	d3e8      	bcc.n	80047fe <__iar_annotation$$branch+0x284>
 800482c:	1a98      	subs	r0, r3, r2
 800482e:	4929      	ldr	r1, [pc, #164]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004830:	1861      	adds	r1, r4, r1
 8004832:	7048      	strb	r0, [r1, #1]
 8004834:	b2d0      	uxtb	r0, r2
 8004836:	280c      	cmp	r0, #12
 8004838:	d10f      	bne.n	800485a <__iar_annotation$$branch+0x2e0>
 800483a:	2000      	movs	r0, #0
 800483c:	9002      	str	r0, [sp, #8]
 800483e:	2077      	movs	r0, #119	; 0x77
 8004840:	9001      	str	r0, [sp, #4]
 8004842:	2007      	movs	r0, #7
 8004844:	9000      	str	r0, [sp, #0]
 8004846:	ab06      	add	r3, sp, #24
 8004848:	220f      	movs	r2, #15
 800484a:	2031      	movs	r0, #49	; 0x31
 800484c:	5c21      	ldrb	r1, [r4, r0]
 800484e:	0020      	movs	r0, r4
 8004850:	f7fc fe89 	bl	8001566 <PE_Send_DataMessage>
 8004854:	4820      	ldr	r0, [pc, #128]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 8004856:	83e0      	strh	r0, [r4, #30]
 8004858:	e145      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800485a:	2000      	movs	r0, #0
 800485c:	9002      	str	r0, [sp, #8]
 800485e:	2003      	movs	r0, #3
 8004860:	9001      	str	r0, [sp, #4]
 8004862:	0610      	lsls	r0, r2, #24
 8004864:	0e40      	lsrs	r0, r0, #25
 8004866:	1c80      	adds	r0, r0, #2
 8004868:	b2c0      	uxtb	r0, r0
 800486a:	9000      	str	r0, [sp, #0]
 800486c:	ab06      	add	r3, sp, #24
 800486e:	220f      	movs	r2, #15
 8004870:	2031      	movs	r0, #49	; 0x31
 8004872:	5c21      	ldrb	r1, [r4, r0]
 8004874:	0020      	movs	r0, r4
 8004876:	e134      	b.n	8004ae2 <__iar_annotation$$branch+0x568>
 8004878:	2201      	movs	r2, #1
 800487a:	9206      	str	r2, [sp, #24]
 800487c:	03d2      	lsls	r2, r2, #15
 800487e:	8beb      	ldrh	r3, [r5, #30]
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <__iar_annotation$$branch+0x30c>
 8004884:	e3c1      	b.n	800500a <__iar_annotation$$branch+0xa90>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4018      	ands	r0, r3
 800488a:	2303      	movs	r3, #3
 800488c:	4303      	orrs	r3, r0
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	6868      	ldr	r0, [r5, #4]
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	0698      	lsls	r0, r3, #26
 800489a:	0fc0      	lsrs	r0, r0, #31
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <__iar_annotation$$branch+0x352>)
 800489e:	4013      	ands	r3, r2
 80048a0:	0340      	lsls	r0, r0, #13
 80048a2:	4318      	orrs	r0, r3
 80048a4:	6020      	str	r0, [r4, #0]
 80048a6:	686a      	ldr	r2, [r5, #4]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4011      	ands	r1, r2
 80048ac:	2909      	cmp	r1, #9
 80048ae:	d037      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b0:	68e9      	ldr	r1, [r5, #12]
 80048b2:	688f      	ldr	r7, [r1, #8]
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	d033      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b8:	ab03      	add	r3, sp, #12
 80048ba:	aa05      	add	r2, sp, #20
 80048bc:	0c01      	lsrs	r1, r0, #16
 80048be:	7c28      	ldrb	r0, [r5, #16]
 80048c0:	47b8      	blx	r7
 80048c2:	2803      	cmp	r0, #3
 80048c4:	d00a      	beq.n	80048dc <__iar_annotation$$branch+0x362>
 80048c6:	280f      	cmp	r0, #15
 80048c8:	d00d      	beq.n	80048e6 <__iar_annotation$$branch+0x36c>
 80048ca:	e029      	b.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048cc:	ffff9fff 	.word	0xffff9fff
 80048d0:	000004ad 	.word	0x000004ad
 80048d4:	000004ac 	.word	0x000004ac
 80048d8:	0000800f 	.word	0x0000800f
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	21c0      	movs	r1, #192	; 0xc0
 80048e0:	4301      	orrs	r1, r0
 80048e2:	6021      	str	r1, [r4, #0]
 80048e4:	e023      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 80048e6:	4668      	mov	r0, sp
 80048e8:	7b00      	ldrb	r0, [r0, #12]
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d018      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048ee:	4668      	mov	r0, sp
 80048f0:	7b02      	ldrb	r2, [r0, #12]
 80048f2:	2a07      	cmp	r2, #7
 80048f4:	d214      	bcs.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	4006      	ands	r6, r0
 80048fa:	2040      	movs	r0, #64	; 0x40
 80048fc:	4330      	orrs	r0, r6
 80048fe:	6020      	str	r0, [r4, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	9806      	ldr	r0, [sp, #24]
 8004904:	4293      	cmp	r3, r2
 8004906:	d211      	bcs.n	800492c <__iar_annotation$$branch+0x3b2>
 8004908:	9905      	ldr	r1, [sp, #20]
 800490a:	6809      	ldr	r1, [r1, #0]
 800490c:	ae07      	add	r6, sp, #28
 800490e:	1d36      	adds	r6, r6, #4
 8004910:	009f      	lsls	r7, r3, #2
 8004912:	51f1      	str	r1, [r6, r7]
 8004914:	9905      	ldr	r1, [sp, #20]
 8004916:	1d09      	adds	r1, r1, #4
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	1c40      	adds	r0, r0, #1
 800491c:	1c5b      	adds	r3, r3, #1
 800491e:	e7f1      	b.n	8004904 <__iar_annotation$$branch+0x38a>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4006      	ands	r6, r0
 8004924:	2080      	movs	r0, #128	; 0x80
 8004926:	4330      	orrs	r0, r6
 8004928:	6020      	str	r0, [r4, #0]
 800492a:	e000      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 800492c:	9006      	str	r0, [sp, #24]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	9007      	str	r0, [sp, #28]
 8004932:	2000      	movs	r0, #0
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	2003      	movs	r0, #3
 8004938:	9001      	str	r0, [sp, #4]
 800493a:	9806      	ldr	r0, [sp, #24]
 800493c:	9000      	str	r0, [sp, #0]
 800493e:	ab07      	add	r3, sp, #28
 8004940:	e0cb      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	0209      	lsls	r1, r1, #8
 8004946:	8bea      	ldrh	r2, [r5, #30]
 8004948:	428a      	cmp	r2, r1
 800494a:	d100      	bne.n	800494e <__iar_annotation$$branch+0x3d4>
 800494c:	e35d      	b.n	800500a <__iar_annotation$$branch+0xa90>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	4010      	ands	r0, r2
 8004952:	2204      	movs	r2, #4
 8004954:	4302      	orrs	r2, r0
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	4311      	orrs	r1, r2
 800495a:	6021      	str	r1, [r4, #0]
 800495c:	2001      	movs	r0, #1
 800495e:	686a      	ldr	r2, [r5, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	0952      	lsrs	r2, r2, #5
 8004964:	4002      	ands	r2, r0
 8004966:	4ba6      	ldr	r3, [pc, #664]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004968:	400b      	ands	r3, r1
 800496a:	0351      	lsls	r1, r2, #13
 800496c:	4319      	orrs	r1, r3
 800496e:	6021      	str	r1, [r4, #0]
 8004970:	686a      	ldr	r2, [r5, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	08d2      	lsrs	r2, r2, #3
 8004976:	4010      	ands	r0, r2
 8004978:	d152      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 800497a:	68e8      	ldr	r0, [r5, #12]
 800497c:	68c3      	ldr	r3, [r0, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04e      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004982:	2707      	movs	r7, #7
 8004984:	0a0a      	lsrs	r2, r1, #8
 8004986:	403a      	ands	r2, r7
 8004988:	0c09      	lsrs	r1, r1, #16
 800498a:	7c28      	ldrb	r0, [r5, #16]
 800498c:	4798      	blx	r3
 800498e:	2803      	cmp	r0, #3
 8004990:	d041      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 8004992:	280f      	cmp	r0, #15
 8004994:	d144      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	4006      	ands	r6, r0
 800499a:	2040      	movs	r0, #64	; 0x40
 800499c:	4330      	orrs	r0, r6
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	0a00      	lsrs	r0, r0, #8
 80049a2:	4007      	ands	r7, r0
 80049a4:	6968      	ldr	r0, [r5, #20]
 80049a6:	4940      	ldr	r1, [pc, #256]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 80049a8:	4001      	ands	r1, r0
 80049aa:	01b8      	lsls	r0, r7, #6
 80049ac:	4308      	orrs	r0, r1
 80049ae:	6168      	str	r0, [r5, #20]
 80049b0:	e03b      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	0209      	lsls	r1, r1, #8
 80049b6:	8bea      	ldrh	r2, [r5, #30]
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d04b      	beq.n	8004a54 <__iar_annotation$$branch+0x4da>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	4010      	ands	r0, r2
 80049c0:	2205      	movs	r2, #5
 80049c2:	4302      	orrs	r2, r0
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	6021      	str	r1, [r4, #0]
 80049ca:	2001      	movs	r0, #1
 80049cc:	686a      	ldr	r2, [r5, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	0952      	lsrs	r2, r2, #5
 80049d2:	4002      	ands	r2, r0
 80049d4:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <__iar_annotation$$branch+0x686>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	0351      	lsls	r1, r2, #13
 80049da:	4319      	orrs	r1, r3
 80049dc:	6021      	str	r1, [r4, #0]
 80049de:	686a      	ldr	r2, [r5, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	08d2      	lsrs	r2, r2, #3
 80049e4:	4010      	ands	r0, r2
 80049e6:	d11b      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049e8:	68e8      	ldr	r0, [r5, #12]
 80049ea:	6903      	ldr	r3, [r0, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049f0:	0548      	lsls	r0, r1, #21
 80049f2:	0f42      	lsrs	r2, r0, #29
 80049f4:	0c09      	lsrs	r1, r1, #16
 80049f6:	7c28      	ldrb	r0, [r5, #16]
 80049f8:	4798      	blx	r3
 80049fa:	2803      	cmp	r0, #3
 80049fc:	d00b      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 80049fe:	280f      	cmp	r0, #15
 8004a00:	d10e      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	4006      	ands	r6, r0
 8004a06:	2040      	movs	r0, #64	; 0x40
 8004a08:	4330      	orrs	r0, r6
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	6968      	ldr	r0, [r5, #20]
 8004a0e:	4926      	ldr	r1, [pc, #152]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 8004a10:	4001      	ands	r1, r0
 8004a12:	6169      	str	r1, [r5, #20]
 8004a14:	e009      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	21c0      	movs	r1, #192	; 0xc0
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	e004      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	4006      	ands	r6, r0
 8004a24:	2080      	movs	r0, #128	; 0x80
 8004a26:	4330      	orrs	r0, r6
 8004a28:	6020      	str	r0, [r4, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	9002      	str	r0, [sp, #8]
 8004a2e:	2003      	movs	r0, #3
 8004a30:	9001      	str	r0, [sp, #4]
 8004a32:	2001      	movs	r0, #1
 8004a34:	9000      	str	r0, [sp, #0]
 8004a36:	0023      	movs	r3, r4
 8004a38:	220f      	movs	r2, #15
 8004a3a:	2031      	movs	r0, #49	; 0x31
 8004a3c:	5c29      	ldrb	r1, [r5, r0]
 8004a3e:	0028      	movs	r0, r5
 8004a40:	f7fc fd91 	bl	8001566 <PE_Send_DataMessage>
 8004a44:	e04f      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004a46:	2001      	movs	r0, #1
 8004a48:	4669      	mov	r1, sp
 8004a4a:	7308      	strb	r0, [r1, #12]
 8004a4c:	8be8      	ldrh	r0, [r5, #30]
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	0209      	lsls	r1, r1, #8
 8004a52:	4288      	cmp	r0, r1
 8004a54:	d100      	bne.n	8004a58 <__iar_annotation$$branch+0x4de>
 8004a56:	e3ab      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8004a58:	68e8      	ldr	r0, [r5, #12]
 8004a5a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d02a      	beq.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a60:	4868      	ldr	r0, [pc, #416]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a62:	182b      	adds	r3, r5, r0
 8004a64:	3018      	adds	r0, #24
 8004a66:	182a      	adds	r2, r5, r0
 8004a68:	7820      	ldrb	r0, [r4, #0]
 8004a6a:	06c1      	lsls	r1, r0, #27
 8004a6c:	0ec9      	lsrs	r1, r1, #27
 8004a6e:	7c28      	ldrb	r0, [r5, #16]
 8004a70:	47b8      	blx	r7
 8004a72:	2803      	cmp	r0, #3
 8004a74:	d01a      	beq.n	8004aac <__iar_annotation$$branch+0x532>
 8004a76:	280f      	cmp	r0, #15
 8004a78:	d11d      	bne.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	4006      	ands	r6, r0
 8004a7e:	2040      	movs	r0, #64	; 0x40
 8004a80:	4330      	orrs	r0, r6
 8004a82:	6020      	str	r0, [r4, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	4668      	mov	r0, sp
 8004a88:	7b00      	ldrb	r0, [r0, #12]
 8004a8a:	495f      	ldr	r1, [pc, #380]	; (8004c08 <__iar_annotation$$branch+0x68e>)
 8004a8c:	5c69      	ldrb	r1, [r5, r1]
 8004a8e:	428a      	cmp	r2, r1
 8004a90:	d217      	bcs.n	8004ac2 <__iar_annotation$$branch+0x548>
 8004a92:	0091      	lsls	r1, r2, #2
 8004a94:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a96:	18eb      	adds	r3, r5, r3
 8004a98:	585b      	ldr	r3, [r3, r1]
 8004a9a:	ae05      	add	r6, sp, #20
 8004a9c:	1d36      	adds	r6, r6, #4
 8004a9e:	5073      	str	r3, [r6, r1]
 8004aa0:	1c40      	adds	r0, r0, #1
 8004aa2:	1c52      	adds	r2, r2, #1
 8004aa4:	e7f1      	b.n	8004a8a <__iar_annotation$$branch+0x510>
 8004aa6:	bf00      	nop
 8004aa8:	fffffe3f 	.word	0xfffffe3f
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	21c0      	movs	r1, #192	; 0xc0
 8004ab0:	4301      	orrs	r1, r0
 8004ab2:	6021      	str	r1, [r4, #0]
 8004ab4:	e007      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	4006      	ands	r6, r0
 8004aba:	2080      	movs	r0, #128	; 0x80
 8004abc:	4330      	orrs	r0, r6
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	e001      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ac2:	4669      	mov	r1, sp
 8004ac4:	7308      	strb	r0, [r1, #12]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	9005      	str	r0, [sp, #20]
 8004aca:	2000      	movs	r0, #0
 8004acc:	9002      	str	r0, [sp, #8]
 8004ace:	2003      	movs	r0, #3
 8004ad0:	9001      	str	r0, [sp, #4]
 8004ad2:	4668      	mov	r0, sp
 8004ad4:	7b00      	ldrb	r0, [r0, #12]
 8004ad6:	9000      	str	r0, [sp, #0]
 8004ad8:	ab05      	add	r3, sp, #20
 8004ada:	220f      	movs	r2, #15
 8004adc:	2031      	movs	r0, #49	; 0x31
 8004ade:	5c29      	ldrb	r1, [r5, r0]
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	f7fc fd40 	bl	8001566 <PE_Send_DataMessage>
 8004ae6:	e3b9      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004ae8:	2101      	movs	r1, #1
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	4010      	ands	r0, r2
 8004aee:	4308      	orrs	r0, r1
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	03ca      	lsls	r2, r1, #15
 8004af4:	4302      	orrs	r2, r0
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	6868      	ldr	r0, [r5, #4]
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	0943      	lsrs	r3, r0, #5
 8004afe:	400b      	ands	r3, r1
 8004b00:	483f      	ldr	r0, [pc, #252]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004b02:	4010      	ands	r0, r2
 8004b04:	035a      	lsls	r2, r3, #13
 8004b06:	4302      	orrs	r2, r0
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	48bf      	ldr	r0, [pc, #764]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004b0c:	4010      	ands	r0, r2
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	4006      	ands	r6, r0
 8004b12:	6026      	str	r6, [r4, #0]
 8004b14:	b2b0      	uxth	r0, r6
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	0612      	lsls	r2, r2, #24
 8004b1a:	4302      	orrs	r2, r0
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	6868      	ldr	r0, [r5, #4]
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	0880      	lsrs	r0, r0, #2
 8004b24:	4001      	ands	r1, r0
 8004b26:	d003      	beq.n	8004b30 <__iar_annotation$$branch+0x5b6>
 8004b28:	6968      	ldr	r0, [r5, #20]
 8004b2a:	0741      	lsls	r1, r0, #29
 8004b2c:	0fc8      	lsrs	r0, r1, #31
 8004b2e:	e000      	b.n	8004b32 <__iar_annotation$$branch+0x5b8>
 8004b30:	2002      	movs	r0, #2
 8004b32:	9002      	str	r0, [sp, #8]
 8004b34:	2087      	movs	r0, #135	; 0x87
 8004b36:	9001      	str	r0, [sp, #4]
 8004b38:	2001      	movs	r0, #1
 8004b3a:	9000      	str	r0, [sp, #0]
 8004b3c:	0023      	movs	r3, r4
 8004b3e:	220f      	movs	r2, #15
 8004b40:	2031      	movs	r0, #49	; 0x31
 8004b42:	5c29      	ldrb	r1, [r5, r0]
 8004b44:	0028      	movs	r0, r5
 8004b46:	f7fc fd0e 	bl	8001566 <PE_Send_DataMessage>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d1cb      	bne.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004b4e:	2050      	movs	r0, #80	; 0x50
 8004b50:	e0e8      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004b52:	2031      	movs	r0, #49	; 0x31
 8004b54:	5c28      	ldrb	r0, [r5, r0]
 8004b56:	f7fb ff37 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004b5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b5c:	7809      	ldrb	r1, [r1, #0]
 8004b5e:	4281      	cmp	r1, r0
 8004b60:	d000      	beq.n	8004b64 <__iar_annotation$$branch+0x5ea>
 8004b62:	e245      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b64:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004b66:	0bc2      	lsrs	r2, r0, #15
 8004b68:	d176      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b6a:	0b02      	lsrs	r2, r0, #12
 8004b6c:	0752      	lsls	r2, r2, #29
 8004b6e:	d012      	beq.n	8004b96 <__iar_annotation$$branch+0x61c>
 8004b70:	06c0      	lsls	r0, r0, #27
 8004b72:	0ec0      	lsrs	r0, r0, #27
 8004b74:	280f      	cmp	r0, #15
 8004b76:	d16f      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b78:	2914      	cmp	r1, #20
 8004b7a:	d005      	beq.n	8004b88 <__iar_annotation$$branch+0x60e>
 8004b7c:	2014      	movs	r0, #20
 8004b7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b80:	7008      	strb	r0, [r1, #0]
 8004b82:	0028      	movs	r0, r5
 8004b84:	f7fb fee7 	bl	8000956 <PE_Clear_RxEvent>
 8004b88:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004b8a:	7881      	ldrb	r1, [r0, #2]
 8004b8c:	06ca      	lsls	r2, r1, #27
 8004b8e:	0ed2      	lsrs	r2, r2, #27
 8004b90:	2a01      	cmp	r2, #1
 8004b92:	d161      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b94:	098c      	lsrs	r4, r1, #6
 8004b96:	d100      	bne.n	8004b9a <__iar_annotation$$branch+0x620>
 8004b98:	e22a      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b9a:	68e9      	ldr	r1, [r5, #12]
 8004b9c:	6949      	ldr	r1, [r1, #20]
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d100      	bne.n	8004ba4 <__iar_annotation$$branch+0x62a>
 8004ba2:	e2e3      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ba4:	2103      	movs	r1, #3
 8004ba6:	4021      	ands	r1, r4
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d000      	beq.n	8004bae <__iar_annotation$$branch+0x634>
 8004bac:	e2de      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8004bb0:	1d81      	adds	r1, r0, #6
 8004bb2:	7c28      	ldrb	r0, [r5, #16]
 8004bb4:	f000 fc04 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d108      	bne.n	8004bce <__iar_annotation$$branch+0x654>
 8004bbc:	ab0b      	add	r3, sp, #44	; 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	7c28      	ldrb	r0, [r5, #16]
 8004bc4:	68ec      	ldr	r4, [r5, #12]
 8004bc6:	6964      	ldr	r4, [r4, #20]
 8004bc8:	47a0      	blx	r4
 8004bca:	2151      	movs	r1, #81	; 0x51
 8004bcc:	e0ec      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bce:	211b      	movs	r1, #27
 8004bd0:	e0ea      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	400e      	ands	r6, r1
 8004bd6:	6026      	str	r6, [r4, #0]
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4030      	ands	r0, r6
 8004bdc:	4308      	orrs	r0, r1
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	b280      	uxth	r0, r0
 8004be2:	22ff      	movs	r2, #255	; 0xff
 8004be4:	0612      	lsls	r2, r2, #24
 8004be6:	4302      	orrs	r2, r0
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	0388      	lsls	r0, r1, #14
 8004bec:	4310      	orrs	r0, r2
 8004bee:	6020      	str	r0, [r4, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	686b      	ldr	r3, [r5, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	095e      	lsrs	r6, r3, #5
 8004bf8:	4016      	ands	r6, r2
 8004bfa:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004bfc:	e006      	b.n	8004c0c <__iar_annotation$$branch+0x692>
 8004bfe:	bf00      	nop
 8004c00:	ffff9fff 	.word	0xffff9fff
 8004c04:	00000494 	.word	0x00000494
 8004c08:	000004ac 	.word	0x000004ac
 8004c0c:	4003      	ands	r3, r0
 8004c0e:	0370      	lsls	r0, r6, #13
 8004c10:	4318      	orrs	r0, r3
 8004c12:	6020      	str	r0, [r4, #0]
 8004c14:	4b7c      	ldr	r3, [pc, #496]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004c16:	4003      	ands	r3, r0
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	6868      	ldr	r0, [r5, #4]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	0880      	lsrs	r0, r0, #2
 8004c20:	4002      	ands	r2, r0
 8004c22:	d002      	beq.n	8004c2a <__iar_annotation$$branch+0x6b0>
 8004c24:	6968      	ldr	r0, [r5, #20]
 8004c26:	0740      	lsls	r0, r0, #29
 8004c28:	0fc1      	lsrs	r1, r0, #31
 8004c2a:	9102      	str	r1, [sp, #8]
 8004c2c:	2089      	movs	r0, #137	; 0x89
 8004c2e:	9001      	str	r0, [sp, #4]
 8004c30:	2001      	movs	r0, #1
 8004c32:	9000      	str	r0, [sp, #0]
 8004c34:	0023      	movs	r3, r4
 8004c36:	220f      	movs	r2, #15
 8004c38:	2031      	movs	r0, #49	; 0x31
 8004c3a:	5c29      	ldrb	r1, [r5, r0]
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	f7fc fc92 	bl	8001566 <PE_Send_DataMessage>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d172      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004c46:	2052      	movs	r0, #82	; 0x52
 8004c48:	e06c      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004c4a:	2031      	movs	r0, #49	; 0x31
 8004c4c:	5c28      	ldrb	r0, [r5, r0]
 8004c4e:	f7fb febb 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004c52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c54:	7809      	ldrb	r1, [r1, #0]
 8004c56:	4281      	cmp	r1, r0
 8004c58:	d000      	beq.n	8004c5c <__iar_annotation$$branch+0x6e2>
 8004c5a:	e1c9      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004c5c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004c5e:	0bc2      	lsrs	r2, r0, #15
 8004c60:	d1fa      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c62:	0b02      	lsrs	r2, r0, #12
 8004c64:	0752      	lsls	r2, r2, #29
 8004c66:	d06f      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c68:	06c0      	lsls	r0, r0, #27
 8004c6a:	0ec0      	lsrs	r0, r0, #27
 8004c6c:	280f      	cmp	r0, #15
 8004c6e:	d1f3      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c70:	2914      	cmp	r1, #20
 8004c72:	d005      	beq.n	8004c80 <__iar_annotation$$branch+0x706>
 8004c74:	2014      	movs	r0, #20
 8004c76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c78:	7008      	strb	r0, [r1, #0]
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7fb fe6b 	bl	8000956 <PE_Clear_RxEvent>
 8004c80:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004c82:	7881      	ldrb	r1, [r0, #2]
 8004c84:	06ca      	lsls	r2, r1, #27
 8004c86:	0ed2      	lsrs	r2, r2, #27
 8004c88:	2a02      	cmp	r2, #2
 8004c8a:	d1e5      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c8c:	060c      	lsls	r4, r1, #24
 8004c8e:	d05b      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c90:	68e9      	ldr	r1, [r5, #12]
 8004c92:	6989      	ldr	r1, [r1, #24]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d100      	bne.n	8004c9a <__iar_annotation$$branch+0x720>
 8004c98:	e268      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c9c:	1d81      	adds	r1, r0, #6
 8004c9e:	7c28      	ldrb	r0, [r5, #16]
 8004ca0:	f000 fc55 	bl	800554e <PE_SVDM_CheckSVIDs>
 8004ca4:	ab0b      	add	r3, sp, #44	; 0x2c
 8004ca6:	0fa2      	lsrs	r2, r4, #30
 8004ca8:	2031      	movs	r0, #49	; 0x31
 8004caa:	5c29      	ldrb	r1, [r5, r0]
 8004cac:	7c28      	ldrb	r0, [r5, #16]
 8004cae:	68ec      	ldr	r4, [r5, #12]
 8004cb0:	69a4      	ldr	r4, [r4, #24]
 8004cb2:	47a0      	blx	r4
 8004cb4:	2153      	movs	r1, #83	; 0x53
 8004cb6:	e077      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	400e      	ands	r6, r1
 8004cbc:	6026      	str	r6, [r4, #0]
 8004cbe:	4030      	ands	r0, r6
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	4301      	orrs	r1, r0
 8004cc4:	6021      	str	r1, [r4, #0]
 8004cc6:	8920      	ldrh	r0, [r4, #8]
 8004cc8:	b28a      	uxth	r2, r1
 8004cca:	0401      	lsls	r1, r0, #16
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	2080      	movs	r0, #128	; 0x80
 8004cd2:	0200      	lsls	r0, r0, #8
 8004cd4:	4308      	orrs	r0, r1
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	686a      	ldr	r2, [r5, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	0952      	lsrs	r2, r2, #5
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	4b9e      	ldr	r3, [pc, #632]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ce4:	4003      	ands	r3, r0
 8004ce6:	0350      	lsls	r0, r2, #13
 8004ce8:	4318      	orrs	r0, r3
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	4a46      	ldr	r2, [pc, #280]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004cee:	4002      	ands	r2, r0
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	6868      	ldr	r0, [r5, #4]
 8004cf4:	6800      	ldr	r0, [r0, #0]
 8004cf6:	0880      	lsrs	r0, r0, #2
 8004cf8:	4001      	ands	r1, r0
 8004cfa:	d003      	beq.n	8004d04 <__iar_annotation$$branch+0x78a>
 8004cfc:	6968      	ldr	r0, [r5, #20]
 8004cfe:	0741      	lsls	r1, r0, #29
 8004d00:	0fc8      	lsrs	r0, r1, #31
 8004d02:	e000      	b.n	8004d06 <__iar_annotation$$branch+0x78c>
 8004d04:	2002      	movs	r0, #2
 8004d06:	9002      	str	r0, [sp, #8]
 8004d08:	208b      	movs	r0, #139	; 0x8b
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	9000      	str	r0, [sp, #0]
 8004d10:	0023      	movs	r3, r4
 8004d12:	220f      	movs	r2, #15
 8004d14:	2031      	movs	r0, #49	; 0x31
 8004d16:	5c29      	ldrb	r1, [r5, r0]
 8004d18:	0028      	movs	r0, r5
 8004d1a:	f7fc fc24 	bl	8001566 <PE_Send_DataMessage>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d104      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004d22:	2053      	movs	r0, #83	; 0x53
 8004d24:	7728      	strb	r0, [r5, #28]
 8004d26:	488e      	ldr	r0, [pc, #568]	; (8004f60 <__iar_annotation$$branch+0x9e6>)
 8004d28:	83e8      	strh	r0, [r5, #30]
 8004d2a:	9704      	str	r7, [sp, #16]
 8004d2c:	e296      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004d2e:	2031      	movs	r0, #49	; 0x31
 8004d30:	5c28      	ldrb	r0, [r5, r0]
 8004d32:	f7fb fe49 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004d36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d38:	7809      	ldrb	r1, [r1, #0]
 8004d3a:	4281      	cmp	r1, r0
 8004d3c:	d18c      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d3e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004d40:	0bc2      	lsrs	r2, r0, #15
 8004d42:	d189      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d44:	0b02      	lsrs	r2, r0, #12
 8004d46:	0752      	lsls	r2, r2, #29
 8004d48:	d100      	bne.n	8004d4c <__iar_annotation$$branch+0x7d2>
 8004d4a:	e151      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d4c:	06c0      	lsls	r0, r0, #27
 8004d4e:	0ec0      	lsrs	r0, r0, #27
 8004d50:	280f      	cmp	r0, #15
 8004d52:	d000      	beq.n	8004d56 <__iar_annotation$$branch+0x7dc>
 8004d54:	e14c      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d56:	2914      	cmp	r1, #20
 8004d58:	d005      	beq.n	8004d66 <__iar_annotation$$branch+0x7ec>
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d5e:	7008      	strb	r0, [r1, #0]
 8004d60:	0028      	movs	r0, r5
 8004d62:	f7fb fdf8 	bl	8000956 <PE_Clear_RxEvent>
 8004d66:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004d68:	7881      	ldrb	r1, [r0, #2]
 8004d6a:	06ca      	lsls	r2, r1, #27
 8004d6c:	0ed2      	lsrs	r2, r2, #27
 8004d6e:	2a03      	cmp	r2, #3
 8004d70:	d1ef      	bne.n	8004d52 <__iar_annotation$$branch+0x7d8>
 8004d72:	098e      	lsrs	r6, r1, #6
 8004d74:	d0e8      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004d76:	68e9      	ldr	r1, [r5, #12]
 8004d78:	69c9      	ldr	r1, [r1, #28]
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d017      	beq.n	8004dae <__iar_annotation$$branch+0x834>
 8004d7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d80:	1d82      	adds	r2, r0, #6
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	0c01      	lsrs	r1, r0, #16
 8004d86:	7c28      	ldrb	r0, [r5, #16]
 8004d88:	f000 fc22 	bl	80055d0 <PE_SVDM_CheckModes>
 8004d8c:	2403      	movs	r4, #3
 8004d8e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d90:	2203      	movs	r2, #3
 8004d92:	4032      	ands	r2, r6
 8004d94:	2031      	movs	r0, #49	; 0x31
 8004d96:	5c29      	ldrb	r1, [r5, r0]
 8004d98:	7c28      	ldrb	r0, [r5, #16]
 8004d9a:	68ef      	ldr	r7, [r5, #12]
 8004d9c:	69ff      	ldr	r7, [r7, #28]
 8004d9e:	47b8      	blx	r7
 8004da0:	4034      	ands	r4, r6
 8004da2:	2c01      	cmp	r4, #1
 8004da4:	d103      	bne.n	8004dae <__iar_annotation$$branch+0x834>
 8004da6:	2154      	movs	r1, #84	; 0x54
 8004da8:	7c28      	ldrb	r0, [r5, #16]
 8004daa:	f7fb fb69 	bl	8000480 <USBPD_PE_Notification>
 8004dae:	e1dd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	400e      	ands	r6, r1
 8004db4:	6026      	str	r6, [r4, #0]
 8004db6:	4030      	ands	r0, r6
 8004db8:	2104      	movs	r1, #4
 8004dba:	4301      	orrs	r1, r0
 8004dbc:	6021      	str	r1, [r4, #0]
 8004dbe:	8920      	ldrh	r0, [r4, #8]
 8004dc0:	b289      	uxth	r1, r1
 8004dc2:	0400      	lsls	r0, r0, #16
 8004dc4:	4308      	orrs	r0, r1
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0209      	lsls	r1, r1, #8
 8004dcc:	4301      	orrs	r1, r0
 8004dce:	6021      	str	r1, [r4, #0]
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	686a      	ldr	r2, [r5, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	0952      	lsrs	r2, r2, #5
 8004dd8:	4002      	ands	r2, r0
 8004dda:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ddc:	400b      	ands	r3, r1
 8004dde:	0351      	lsls	r1, r2, #13
 8004de0:	4319      	orrs	r1, r3
 8004de2:	6021      	str	r1, [r4, #0]
 8004de4:	696a      	ldr	r2, [r5, #20]
 8004de6:	05d2      	lsls	r2, r2, #23
 8004de8:	0f52      	lsrs	r2, r2, #29
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	0211      	lsls	r1, r2, #8
 8004df0:	4319      	orrs	r1, r3
 8004df2:	6021      	str	r1, [r4, #0]
 8004df4:	6869      	ldr	r1, [r5, #4]
 8004df6:	6809      	ldr	r1, [r1, #0]
 8004df8:	0889      	lsrs	r1, r1, #2
 8004dfa:	4008      	ands	r0, r1
 8004dfc:	d006      	beq.n	8004e0c <__iar_annotation$$branch+0x892>
 8004dfe:	6968      	ldr	r0, [r5, #20]
 8004e00:	0741      	lsls	r1, r0, #29
 8004e02:	0fc8      	lsrs	r0, r1, #31
 8004e04:	e003      	b.n	8004e0e <__iar_annotation$$branch+0x894>
 8004e06:	bf00      	nop
 8004e08:	fffff8ff 	.word	0xfffff8ff
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	9002      	str	r0, [sp, #8]
 8004e10:	208c      	movs	r0, #140	; 0x8c
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2001      	movs	r0, #1
 8004e16:	9000      	str	r0, [sp, #0]
 8004e18:	0023      	movs	r3, r4
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	2031      	movs	r0, #49	; 0x31
 8004e1e:	5c29      	ldrb	r1, [r5, r0]
 8004e20:	0028      	movs	r0, r5
 8004e22:	f7fc fba0 	bl	8001566 <PE_Send_DataMessage>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d000      	beq.n	8004e2c <__iar_annotation$$branch+0x8b2>
 8004e2a:	e217      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004e2c:	2054      	movs	r0, #84	; 0x54
 8004e2e:	7728      	strb	r0, [r5, #28]
 8004e30:	2134      	movs	r1, #52	; 0x34
 8004e32:	e08c      	b.n	8004f4e <__iar_annotation$$branch+0x9d4>
 8004e34:	2634      	movs	r6, #52	; 0x34
 8004e36:	2031      	movs	r0, #49	; 0x31
 8004e38:	5c28      	ldrb	r0, [r5, r0]
 8004e3a:	f7fb fdc5 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004e3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e40:	7809      	ldrb	r1, [r1, #0]
 8004e42:	4281      	cmp	r1, r0
 8004e44:	d144      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e46:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004e48:	0bc2      	lsrs	r2, r0, #15
 8004e4a:	d141      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e4c:	2707      	movs	r7, #7
 8004e4e:	0b02      	lsrs	r2, r0, #12
 8004e50:	423a      	tst	r2, r7
 8004e52:	d03d      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e54:	06c0      	lsls	r0, r0, #27
 8004e56:	0ec0      	lsrs	r0, r0, #27
 8004e58:	280f      	cmp	r0, #15
 8004e5a:	d139      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e5c:	2914      	cmp	r1, #20
 8004e5e:	d005      	beq.n	8004e6c <__iar_annotation$$branch+0x8f2>
 8004e60:	2014      	movs	r0, #20
 8004e62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e64:	7008      	strb	r0, [r1, #0]
 8004e66:	0028      	movs	r0, r5
 8004e68:	f7fb fd75 	bl	8000956 <PE_Clear_RxEvent>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	7728      	strb	r0, [r5, #28]
 8004e70:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004e72:	7880      	ldrb	r0, [r0, #2]
 8004e74:	06c1      	lsls	r1, r0, #27
 8004e76:	0ec9      	lsrs	r1, r1, #27
 8004e78:	2904      	cmp	r1, #4
 8004e7a:	d129      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e7c:	0980      	lsrs	r0, r0, #6
 8004e7e:	d027      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e80:	9001      	str	r0, [sp, #4]
 8004e82:	488f      	ldr	r0, [pc, #572]	; (80050c0 <__iar_annotation$$branch+0xb46>)
 8004e84:	9901      	ldr	r1, [sp, #4]
 8004e86:	2901      	cmp	r1, #1
 8004e88:	d004      	beq.n	8004e94 <__iar_annotation$$branch+0x91a>
 8004e8a:	d30e      	bcc.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e8c:	2903      	cmp	r1, #3
 8004e8e:	d008      	beq.n	8004ea2 <__iar_annotation$$branch+0x928>
 8004e90:	d302      	bcc.n	8004e98 <__iar_annotation$$branch+0x91e>
 8004e92:	e00a      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e94:	2635      	movs	r6, #53	; 0x35
 8004e96:	e008      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e98:	6969      	ldr	r1, [r5, #20]
 8004e9a:	4008      	ands	r0, r1
 8004e9c:	6168      	str	r0, [r5, #20]
 8004e9e:	2636      	movs	r6, #54	; 0x36
 8004ea0:	e003      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004ea2:	6969      	ldr	r1, [r5, #20]
 8004ea4:	4008      	ands	r0, r1
 8004ea6:	6168      	str	r0, [r5, #20]
 8004ea8:	2637      	movs	r6, #55	; 0x37
 8004eaa:	0031      	movs	r1, r6
 8004eac:	7c28      	ldrb	r0, [r5, #16]
 8004eae:	f7fb fae7 	bl	8000480 <USBPD_PE_Notification>
 8004eb2:	68e8      	ldr	r0, [r5, #12]
 8004eb4:	6a06      	ldr	r6, [r0, #32]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	d009      	beq.n	8004ece <__iar_annotation$$branch+0x954>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	0a01      	lsrs	r1, r0, #8
 8004ebe:	400f      	ands	r7, r1
 8004ec0:	9700      	str	r7, [sp, #0]
 8004ec2:	0c03      	lsrs	r3, r0, #16
 8004ec4:	9a01      	ldr	r2, [sp, #4]
 8004ec6:	2031      	movs	r0, #49	; 0x31
 8004ec8:	5c29      	ldrb	r1, [r5, r0]
 8004eca:	7c28      	ldrb	r0, [r5, #16]
 8004ecc:	47b0      	blx	r6
 8004ece:	e14d      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ed0:	5da8      	ldrb	r0, [r5, r6]
 8004ed2:	e08f      	b.n	8004ff4 <__iar_annotation$$branch+0xa7a>
 8004ed4:	6821      	ldr	r1, [r4, #0]
 8004ed6:	400e      	ands	r6, r1
 8004ed8:	6026      	str	r6, [r4, #0]
 8004eda:	4030      	ands	r0, r6
 8004edc:	2105      	movs	r1, #5
 8004ede:	4301      	orrs	r1, r0
 8004ee0:	6021      	str	r1, [r4, #0]
 8004ee2:	8920      	ldrh	r0, [r4, #8]
 8004ee4:	b289      	uxth	r1, r1
 8004ee6:	0400      	lsls	r0, r0, #16
 8004ee8:	4308      	orrs	r0, r1
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	0209      	lsls	r1, r1, #8
 8004ef0:	4301      	orrs	r1, r0
 8004ef2:	6021      	str	r1, [r4, #0]
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	686a      	ldr	r2, [r5, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	0952      	lsrs	r2, r2, #5
 8004efc:	4002      	ands	r2, r0
 8004efe:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004f00:	400b      	ands	r3, r1
 8004f02:	0351      	lsls	r1, r2, #13
 8004f04:	4319      	orrs	r1, r3
 8004f06:	6021      	str	r1, [r4, #0]
 8004f08:	696a      	ldr	r2, [r5, #20]
 8004f0a:	05d2      	lsls	r2, r2, #23
 8004f0c:	0f52      	lsrs	r2, r2, #29
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	0211      	lsls	r1, r2, #8
 8004f14:	4319      	orrs	r1, r3
 8004f16:	6021      	str	r1, [r4, #0]
 8004f18:	6869      	ldr	r1, [r5, #4]
 8004f1a:	6809      	ldr	r1, [r1, #0]
 8004f1c:	0889      	lsrs	r1, r1, #2
 8004f1e:	4008      	ands	r0, r1
 8004f20:	d003      	beq.n	8004f2a <__iar_annotation$$branch+0x9b0>
 8004f22:	6968      	ldr	r0, [r5, #20]
 8004f24:	0741      	lsls	r1, r0, #29
 8004f26:	0fc8      	lsrs	r0, r1, #31
 8004f28:	e000      	b.n	8004f2c <__iar_annotation$$branch+0x9b2>
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	208d      	movs	r0, #141	; 0x8d
 8004f30:	9001      	str	r0, [sp, #4]
 8004f32:	2001      	movs	r0, #1
 8004f34:	9000      	str	r0, [sp, #0]
 8004f36:	0023      	movs	r3, r4
 8004f38:	220f      	movs	r2, #15
 8004f3a:	2031      	movs	r0, #49	; 0x31
 8004f3c:	5c29      	ldrb	r1, [r5, r0]
 8004f3e:	0028      	movs	r0, r5
 8004f40:	f7fc fb11 	bl	8001566 <PE_Send_DataMessage>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d15e      	bne.n	8005006 <__iar_annotation$$branch+0xa8c>
 8004f48:	2055      	movs	r0, #85	; 0x55
 8004f4a:	7728      	strb	r0, [r5, #28]
 8004f4c:	2155      	movs	r1, #85	; 0x55
 8004f4e:	7c28      	ldrb	r0, [r5, #16]
 8004f50:	f7fb fa96 	bl	8000480 <USBPD_PE_Notification>
 8004f54:	48c3      	ldr	r0, [pc, #780]	; (8005264 <.text_19>)
 8004f56:	83e8      	strh	r0, [r5, #30]
 8004f58:	2032      	movs	r0, #50	; 0x32
 8004f5a:	e12c      	b.n	80051b6 <__iar_annotation$$branch+0xc3c>
 8004f5c:	ffff9fff 	.word	0xffff9fff
 8004f60:	0000801e 	.word	0x0000801e
 8004f64:	2031      	movs	r0, #49	; 0x31
 8004f66:	5c28      	ldrb	r0, [r5, r0]
 8004f68:	f7fb fd2e 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004f6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f6e:	7809      	ldrb	r1, [r1, #0]
 8004f70:	4281      	cmp	r1, r0
 8004f72:	d13d      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f74:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004f76:	0bc2      	lsrs	r2, r0, #15
 8004f78:	d13a      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f7a:	2607      	movs	r6, #7
 8004f7c:	0b02      	lsrs	r2, r0, #12
 8004f7e:	4232      	tst	r2, r6
 8004f80:	d036      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f82:	06c0      	lsls	r0, r0, #27
 8004f84:	0ec0      	lsrs	r0, r0, #27
 8004f86:	280f      	cmp	r0, #15
 8004f88:	d132      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f8a:	2914      	cmp	r1, #20
 8004f8c:	d005      	beq.n	8004f9a <__iar_annotation$$branch+0xa20>
 8004f8e:	2014      	movs	r0, #20
 8004f90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f92:	7008      	strb	r0, [r1, #0]
 8004f94:	0028      	movs	r0, r5
 8004f96:	f7fb fcde 	bl	8000956 <PE_Clear_RxEvent>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	7728      	strb	r0, [r5, #28]
 8004f9e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004fa0:	7880      	ldrb	r0, [r0, #2]
 8004fa2:	06c1      	lsls	r1, r0, #27
 8004fa4:	0ec9      	lsrs	r1, r1, #27
 8004fa6:	2905      	cmp	r1, #5
 8004fa8:	d122      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004faa:	0980      	lsrs	r0, r0, #6
 8004fac:	d020      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2801      	cmp	r0, #1
 8004fb2:	d004      	beq.n	8004fbe <__iar_annotation$$branch+0xa44>
 8004fb4:	d309      	bcc.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fb6:	2803      	cmp	r0, #3
 8004fb8:	d005      	beq.n	8004fc6 <__iar_annotation$$branch+0xa4c>
 8004fba:	d302      	bcc.n	8004fc2 <__iar_annotation$$branch+0xa48>
 8004fbc:	e005      	b.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fbe:	2156      	movs	r1, #86	; 0x56
 8004fc0:	e004      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc2:	2157      	movs	r1, #87	; 0x57
 8004fc4:	e002      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc6:	2158      	movs	r1, #88	; 0x58
 8004fc8:	e000      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fca:	2155      	movs	r1, #85	; 0x55
 8004fcc:	7c28      	ldrb	r0, [r5, #16]
 8004fce:	f7fb fa57 	bl	8000480 <USBPD_PE_Notification>
 8004fd2:	68e8      	ldr	r0, [r5, #12]
 8004fd4:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d009      	beq.n	8004fee <__iar_annotation$$branch+0xa74>
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	0a01      	lsrs	r1, r0, #8
 8004fde:	400e      	ands	r6, r1
 8004fe0:	9600      	str	r6, [sp, #0]
 8004fe2:	0c03      	lsrs	r3, r0, #16
 8004fe4:	9a01      	ldr	r2, [sp, #4]
 8004fe6:	2031      	movs	r0, #49	; 0x31
 8004fe8:	5c29      	ldrb	r1, [r5, r0]
 8004fea:	7c28      	ldrb	r0, [r5, #16]
 8004fec:	47b8      	blx	r7
 8004fee:	e0bd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ff0:	2034      	movs	r0, #52	; 0x34
 8004ff2:	5c28      	ldrb	r0, [r5, r0]
 8004ff4:	06c0      	lsls	r0, r0, #27
 8004ff6:	0ec0      	lsrs	r0, r0, #27
 8004ff8:	2810      	cmp	r0, #16
 8004ffa:	d100      	bne.n	8004ffe <__iar_annotation$$branch+0xa84>
 8004ffc:	e0bf      	b.n	800517e <__iar_annotation$$branch+0xc04>
 8004ffe:	8be8      	ldrh	r0, [r5, #30]
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	0209      	lsls	r1, r1, #8
 8005004:	4288      	cmp	r0, r1
 8005006:	d000      	beq.n	800500a <__iar_annotation$$branch+0xa90>
 8005008:	e128      	b.n	800525c <__iar_annotation$$branch+0xce2>
 800500a:	e0d1      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 800500c:	2100      	movs	r1, #0
 800500e:	466a      	mov	r2, sp
 8005010:	7311      	strb	r1, [r2, #12]
 8005012:	6821      	ldr	r1, [r4, #0]
 8005014:	400e      	ands	r6, r1
 8005016:	6026      	str	r6, [r4, #0]
 8005018:	6861      	ldr	r1, [r4, #4]
 800501a:	4030      	ands	r0, r6
 800501c:	06c9      	lsls	r1, r1, #27
 800501e:	0ec9      	lsrs	r1, r1, #27
 8005020:	4301      	orrs	r1, r0
 8005022:	6021      	str	r1, [r4, #0]
 8005024:	8920      	ldrh	r0, [r4, #8]
 8005026:	b28a      	uxth	r2, r1
 8005028:	0401      	lsls	r1, r0, #16
 800502a:	4311      	orrs	r1, r2
 800502c:	6021      	str	r1, [r4, #0]
 800502e:	2080      	movs	r0, #128	; 0x80
 8005030:	0200      	lsls	r0, r0, #8
 8005032:	4308      	orrs	r0, r1
 8005034:	6020      	str	r0, [r4, #0]
 8005036:	2601      	movs	r6, #1
 8005038:	6869      	ldr	r1, [r5, #4]
 800503a:	6809      	ldr	r1, [r1, #0]
 800503c:	0949      	lsrs	r1, r1, #5
 800503e:	4031      	ands	r1, r6
 8005040:	4aaa      	ldr	r2, [pc, #680]	; (80052ec <.text_21>)
 8005042:	4002      	ands	r2, r0
 8005044:	0348      	lsls	r0, r1, #13
 8005046:	4310      	orrs	r0, r2
 8005048:	6020      	str	r0, [r4, #0]
 800504a:	491e      	ldr	r1, [pc, #120]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 800504c:	4001      	ands	r1, r0
 800504e:	0230      	lsls	r0, r6, #8
 8005050:	4308      	orrs	r0, r1
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	9005      	str	r0, [sp, #20]
 8005056:	68e8      	ldr	r0, [r5, #12]
 8005058:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2800      	cmp	r0, #0
 800505e:	d00b      	beq.n	8005078 <__iar_annotation$$branch+0xafe>
 8005060:	a805      	add	r0, sp, #20
 8005062:	1d00      	adds	r0, r0, #4
 8005064:	9000      	str	r0, [sp, #0]
 8005066:	ab03      	add	r3, sp, #12
 8005068:	7820      	ldrb	r0, [r4, #0]
 800506a:	06c2      	lsls	r2, r0, #27
 800506c:	0ed2      	lsrs	r2, r2, #27
 800506e:	2031      	movs	r0, #49	; 0x31
 8005070:	5c29      	ldrb	r1, [r5, r0]
 8005072:	7c28      	ldrb	r0, [r5, #16]
 8005074:	9c01      	ldr	r4, [sp, #4]
 8005076:	47a0      	blx	r4
 8005078:	4668      	mov	r0, sp
 800507a:	7b00      	ldrb	r0, [r0, #12]
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	4669      	mov	r1, sp
 8005080:	7308      	strb	r0, [r1, #12]
 8005082:	6868      	ldr	r0, [r5, #4]
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	0880      	lsrs	r0, r0, #2
 8005088:	4006      	ands	r6, r0
 800508a:	d003      	beq.n	8005094 <__iar_annotation$$branch+0xb1a>
 800508c:	6968      	ldr	r0, [r5, #20]
 800508e:	0741      	lsls	r1, r0, #29
 8005090:	0fc8      	lsrs	r0, r1, #31
 8005092:	e000      	b.n	8005096 <__iar_annotation$$branch+0xb1c>
 8005094:	2002      	movs	r0, #2
 8005096:	9002      	str	r0, [sp, #8]
 8005098:	208f      	movs	r0, #143	; 0x8f
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	4668      	mov	r0, sp
 800509e:	7b00      	ldrb	r0, [r0, #12]
 80050a0:	9000      	str	r0, [sp, #0]
 80050a2:	ab05      	add	r3, sp, #20
 80050a4:	220f      	movs	r2, #15
 80050a6:	2031      	movs	r0, #49	; 0x31
 80050a8:	5c29      	ldrb	r1, [r5, r0]
 80050aa:	0028      	movs	r0, r5
 80050ac:	f7fc fa5b 	bl	8001566 <PE_Send_DataMessage>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d104      	bne.n	80050be <__iar_annotation$$branch+0xb44>
 80050b4:	205a      	movs	r0, #90	; 0x5a
 80050b6:	7728      	strb	r0, [r5, #28]
 80050b8:	48bf      	ldr	r0, [pc, #764]	; (80053b8 <.text_23>)
 80050ba:	83e8      	strh	r0, [r5, #30]
 80050bc:	9704      	str	r7, [sp, #16]
 80050be:	e0ca      	b.n	8005256 <__iar_annotation$$branch+0xcdc>
 80050c0:	fffffe3f 	.word	0xfffffe3f
 80050c4:	fffff8ff 	.word	0xfffff8ff
 80050c8:	2607      	movs	r6, #7
 80050ca:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050cc:	0b00      	lsrs	r0, r0, #12
 80050ce:	2107      	movs	r1, #7
 80050d0:	4001      	ands	r1, r0
 80050d2:	1e48      	subs	r0, r1, #1
 80050d4:	4669      	mov	r1, sp
 80050d6:	7108      	strb	r0, [r1, #4]
 80050d8:	2031      	movs	r0, #49	; 0x31
 80050da:	5c28      	ldrb	r0, [r5, r0]
 80050dc:	f7fb fc74 	bl	80009c8 <PE_Convert_SOPRxEvent>
 80050e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050e2:	7809      	ldrb	r1, [r1, #0]
 80050e4:	4281      	cmp	r1, r0
 80050e6:	d144      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050ea:	0bc2      	lsrs	r2, r0, #15
 80050ec:	d141      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050ee:	0b02      	lsrs	r2, r0, #12
 80050f0:	4232      	tst	r2, r6
 80050f2:	d03e      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050f4:	06c0      	lsls	r0, r0, #27
 80050f6:	0ec0      	lsrs	r0, r0, #27
 80050f8:	280f      	cmp	r0, #15
 80050fa:	d13a      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050fc:	2914      	cmp	r1, #20
 80050fe:	d005      	beq.n	800510c <__iar_annotation$$branch+0xb92>
 8005100:	2014      	movs	r0, #20
 8005102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005104:	7008      	strb	r0, [r1, #0]
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb fc25 	bl	8000956 <PE_Clear_RxEvent>
 800510c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800510e:	7880      	ldrb	r0, [r0, #2]
 8005110:	06c1      	lsls	r1, r0, #27
 8005112:	0ec9      	lsrs	r1, r1, #27
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	4291      	cmp	r1, r2
 8005118:	d12b      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511a:	0981      	lsrs	r1, r0, #6
 800511c:	d029      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511e:	68e9      	ldr	r1, [r5, #12]
 8005120:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005122:	2900      	cmp	r1, #0
 8005124:	d022      	beq.n	800516c <__iar_annotation$$branch+0xbf2>
 8005126:	2600      	movs	r6, #0
 8005128:	e011      	b.n	800514e <__iar_annotation$$branch+0xbd4>
 800512a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800512c:	00b2      	lsls	r2, r6, #2
 800512e:	188b      	adds	r3, r1, r2
 8005130:	799c      	ldrb	r4, [r3, #6]
 8005132:	79df      	ldrb	r7, [r3, #7]
 8005134:	023f      	lsls	r7, r7, #8
 8005136:	19e4      	adds	r4, r4, r7
 8005138:	3108      	adds	r1, #8
 800513a:	5c89      	ldrb	r1, [r1, r2]
 800513c:	0409      	lsls	r1, r1, #16
 800513e:	1861      	adds	r1, r4, r1
 8005140:	7a5a      	ldrb	r2, [r3, #9]
 8005142:	0612      	lsls	r2, r2, #24
 8005144:	1889      	adds	r1, r1, r2
 8005146:	aa05      	add	r2, sp, #20
 8005148:	00b3      	lsls	r3, r6, #2
 800514a:	50d1      	str	r1, [r2, r3]
 800514c:	1c76      	adds	r6, r6, #1
 800514e:	4669      	mov	r1, sp
 8005150:	7909      	ldrb	r1, [r1, #4]
 8005152:	428e      	cmp	r6, r1
 8005154:	d3e9      	bcc.n	800512a <__iar_annotation$$branch+0xbb0>
 8005156:	a905      	add	r1, sp, #20
 8005158:	9100      	str	r1, [sp, #0]
 800515a:	ab01      	add	r3, sp, #4
 800515c:	06c2      	lsls	r2, r0, #27
 800515e:	0ed2      	lsrs	r2, r2, #27
 8005160:	2031      	movs	r0, #49	; 0x31
 8005162:	5c29      	ldrb	r1, [r5, r0]
 8005164:	7c28      	ldrb	r0, [r5, #16]
 8005166:	68ec      	ldr	r4, [r5, #12]
 8005168:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800516a:	47a0      	blx	r4
 800516c:	2000      	movs	r0, #0
 800516e:	83e8      	strh	r0, [r5, #30]
 8005170:	e01e      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8005172:	2034      	movs	r0, #52	; 0x34
 8005174:	5c28      	ldrb	r0, [r5, r0]
 8005176:	06c0      	lsls	r0, r0, #27
 8005178:	0ec0      	lsrs	r0, r0, #27
 800517a:	2810      	cmp	r0, #16
 800517c:	d113      	bne.n	80051a6 <__iar_annotation$$branch+0xc2c>
 800517e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005180:	7800      	ldrb	r0, [r0, #0]
 8005182:	2814      	cmp	r0, #20
 8005184:	d005      	beq.n	8005192 <__iar_annotation$$branch+0xc18>
 8005186:	2014      	movs	r0, #20
 8005188:	991c      	ldr	r1, [sp, #112]	; 0x70
 800518a:	7008      	strb	r0, [r1, #0]
 800518c:	0028      	movs	r0, r5
 800518e:	f7fb fbe2 	bl	8000956 <PE_Clear_RxEvent>
 8005192:	2000      	movs	r0, #0
 8005194:	83e8      	strh	r0, [r5, #30]
 8005196:	2103      	movs	r1, #3
 8005198:	7469      	strb	r1, [r5, #17]
 800519a:	9004      	str	r0, [sp, #16]
 800519c:	2159      	movs	r1, #89	; 0x59
 800519e:	7c28      	ldrb	r0, [r5, #16]
 80051a0:	f7fb f96e 	bl	8000480 <USBPD_PE_Notification>
 80051a4:	e05a      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051a6:	8be8      	ldrh	r0, [r5, #30]
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	0209      	lsls	r1, r1, #8
 80051ac:	4288      	cmp	r0, r1
 80051ae:	d155      	bne.n	800525c <__iar_annotation$$branch+0xce2>
 80051b0:	2003      	movs	r0, #3
 80051b2:	7468      	strb	r0, [r5, #17]
 80051b4:	2000      	movs	r0, #0
 80051b6:	9004      	str	r0, [sp, #16]
 80051b8:	e050      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051ba:	2100      	movs	r1, #0
 80051bc:	466a      	mov	r2, sp
 80051be:	7311      	strb	r1, [r2, #12]
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	400e      	ands	r6, r1
 80051c4:	6026      	str	r6, [r4, #0]
 80051c6:	6861      	ldr	r1, [r4, #4]
 80051c8:	4030      	ands	r0, r6
 80051ca:	06c9      	lsls	r1, r1, #27
 80051cc:	0ec9      	lsrs	r1, r1, #27
 80051ce:	4301      	orrs	r1, r0
 80051d0:	6021      	str	r1, [r4, #0]
 80051d2:	8920      	ldrh	r0, [r4, #8]
 80051d4:	b28a      	uxth	r2, r1
 80051d6:	0401      	lsls	r1, r0, #16
 80051d8:	4311      	orrs	r1, r2
 80051da:	6021      	str	r1, [r4, #0]
 80051dc:	2080      	movs	r0, #128	; 0x80
 80051de:	0200      	lsls	r0, r0, #8
 80051e0:	4308      	orrs	r0, r1
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	2601      	movs	r6, #1
 80051e6:	6869      	ldr	r1, [r5, #4]
 80051e8:	6809      	ldr	r1, [r1, #0]
 80051ea:	0949      	lsrs	r1, r1, #5
 80051ec:	4031      	ands	r1, r6
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <.text_21>)
 80051f0:	4002      	ands	r2, r0
 80051f2:	0348      	lsls	r0, r1, #13
 80051f4:	4310      	orrs	r0, r2
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	4970      	ldr	r1, [pc, #448]	; (80053bc <.text_24>)
 80051fa:	4001      	ands	r1, r0
 80051fc:	0230      	lsls	r0, r6, #8
 80051fe:	4308      	orrs	r0, r1
 8005200:	6020      	str	r0, [r4, #0]
 8005202:	9005      	str	r0, [sp, #20]
 8005204:	68e8      	ldr	r0, [r5, #12]
 8005206:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <__iar_annotation$$branch+0xc9c>
 800520c:	a805      	add	r0, sp, #20
 800520e:	1d02      	adds	r2, r0, #4
 8005210:	a903      	add	r1, sp, #12
 8005212:	7c28      	ldrb	r0, [r5, #16]
 8005214:	4798      	blx	r3
 8005216:	4668      	mov	r0, sp
 8005218:	7b00      	ldrb	r0, [r0, #12]
 800521a:	1c40      	adds	r0, r0, #1
 800521c:	4669      	mov	r1, sp
 800521e:	7308      	strb	r0, [r1, #12]
 8005220:	6868      	ldr	r0, [r5, #4]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	0880      	lsrs	r0, r0, #2
 8005226:	4006      	ands	r6, r0
 8005228:	d003      	beq.n	8005232 <__iar_annotation$$branch+0xcb8>
 800522a:	6968      	ldr	r0, [r5, #20]
 800522c:	0741      	lsls	r1, r0, #29
 800522e:	0fc8      	lsrs	r0, r1, #31
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xcba>
 8005232:	2002      	movs	r0, #2
 8005234:	9002      	str	r0, [sp, #8]
 8005236:	2003      	movs	r0, #3
 8005238:	9001      	str	r0, [sp, #4]
 800523a:	4668      	mov	r0, sp
 800523c:	7b00      	ldrb	r0, [r0, #12]
 800523e:	9000      	str	r0, [sp, #0]
 8005240:	ab05      	add	r3, sp, #20
 8005242:	220f      	movs	r2, #15
 8005244:	2031      	movs	r0, #49	; 0x31
 8005246:	5c29      	ldrb	r1, [r5, r0]
 8005248:	0028      	movs	r0, r5
 800524a:	f7fc f98c 	bl	8001566 <PE_Send_DataMessage>
 800524e:	2800      	cmp	r0, #0
 8005250:	d101      	bne.n	8005256 <__iar_annotation$$branch+0xcdc>
 8005252:	205a      	movs	r0, #90	; 0x5a
 8005254:	7728      	strb	r0, [r5, #28]
 8005256:	2000      	movs	r0, #0
 8005258:	2132      	movs	r1, #50	; 0x32
 800525a:	5468      	strb	r0, [r5, r1]
 800525c:	9804      	ldr	r0, [sp, #16]
 800525e:	b01d      	add	sp, #116	; 0x74
 8005260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005264 <.text_19>:
 8005264:	00008032 	.word	0x00008032

08005268 <PE_StateMachine_UVDM>:
 8005268:	2914      	cmp	r1, #20
 800526a:	d000      	beq.n	800526e <PE_StateMachine_UVDM+0x6>
 800526c:	4770      	bx	lr
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	b08c      	sub	sp, #48	; 0x30
 8005272:	0004      	movs	r4, r0
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	2800      	cmp	r0, #0
 8005278:	d035      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 800527a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800527c:	2800      	cmp	r0, #0
 800527e:	d032      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 8005280:	2500      	movs	r5, #0
 8005282:	4669      	mov	r1, sp
 8005284:	730d      	strb	r5, [r1, #12]
 8005286:	a805      	add	r0, sp, #20
 8005288:	1d03      	adds	r3, r0, #4
 800528a:	aa03      	add	r2, sp, #12
 800528c:	a904      	add	r1, sp, #16
 800528e:	7c20      	ldrb	r0, [r4, #16]
 8005290:	68e6      	ldr	r6, [r4, #12]
 8005292:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 8005294:	47b0      	blx	r6
 8005296:	9804      	ldr	r0, [sp, #16]
 8005298:	49cc      	ldr	r1, [pc, #816]	; (80055cc <.text_27>)
 800529a:	4001      	ands	r1, r0
 800529c:	9104      	str	r1, [sp, #16]
 800529e:	4668      	mov	r0, sp
 80052a0:	7b00      	ldrb	r0, [r0, #12]
 80052a2:	1c40      	adds	r0, r0, #1
 80052a4:	4669      	mov	r1, sp
 80052a6:	7308      	strb	r0, [r1, #12]
 80052a8:	9804      	ldr	r0, [sp, #16]
 80052aa:	9005      	str	r0, [sp, #20]
 80052ac:	6860      	ldr	r0, [r4, #4]
 80052ae:	6800      	ldr	r0, [r0, #0]
 80052b0:	0741      	lsls	r1, r0, #29
 80052b2:	0fc9      	lsrs	r1, r1, #31
 80052b4:	d003      	beq.n	80052be <PE_StateMachine_UVDM+0x56>
 80052b6:	6960      	ldr	r0, [r4, #20]
 80052b8:	0741      	lsls	r1, r0, #29
 80052ba:	0fc8      	lsrs	r0, r1, #31
 80052bc:	e000      	b.n	80052c0 <PE_StateMachine_UVDM+0x58>
 80052be:	2002      	movs	r0, #2
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	2003      	movs	r0, #3
 80052c4:	9001      	str	r0, [sp, #4]
 80052c6:	4668      	mov	r0, sp
 80052c8:	7b00      	ldrb	r0, [r0, #12]
 80052ca:	9000      	str	r0, [sp, #0]
 80052cc:	ab05      	add	r3, sp, #20
 80052ce:	220f      	movs	r2, #15
 80052d0:	2031      	movs	r0, #49	; 0x31
 80052d2:	5c21      	ldrb	r1, [r4, r0]
 80052d4:	0020      	movs	r0, r4
 80052d6:	f7fc f946 	bl	8001566 <PE_Send_DataMessage>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d101      	bne.n	80052e2 <PE_StateMachine_UVDM+0x7a>
 80052de:	2059      	movs	r0, #89	; 0x59
 80052e0:	7720      	strb	r0, [r4, #28]
 80052e2:	2032      	movs	r0, #50	; 0x32
 80052e4:	5425      	strb	r5, [r4, r0]
 80052e6:	b00c      	add	sp, #48	; 0x30
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052ec <.text_21>:
 80052ec:	ffff9fff 	.word	0xffff9fff

080052f0 <PE_Check_DataMessageVDM>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	2403      	movs	r4, #3
 80052f4:	2501      	movs	r5, #1
 80052f6:	6801      	ldr	r1, [r0, #0]
 80052f8:	6849      	ldr	r1, [r1, #4]
 80052fa:	0949      	lsrs	r1, r1, #5
 80052fc:	4029      	ands	r1, r5
 80052fe:	d01f      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005300:	68c1      	ldr	r1, [r0, #12]
 8005302:	2900      	cmp	r1, #0
 8005304:	d01c      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005306:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005308:	788a      	ldrb	r2, [r1, #2]
 800530a:	78cb      	ldrb	r3, [r1, #3]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	18d2      	adds	r2, r2, r3
 8005310:	790b      	ldrb	r3, [r1, #4]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	18d2      	adds	r2, r2, r3
 8005316:	7949      	ldrb	r1, [r1, #5]
 8005318:	0609      	lsls	r1, r1, #24
 800531a:	1851      	adds	r1, r2, r1
 800531c:	9100      	str	r1, [sp, #0]
 800531e:	0bca      	lsrs	r2, r1, #15
 8005320:	402a      	ands	r2, r5
 8005322:	d014      	beq.n	800534e <PE_Check_DataMessageVDM+0x5e>
 8005324:	2394      	movs	r3, #148	; 0x94
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	50c1      	str	r1, [r0, r3]
 800532a:	0989      	lsrs	r1, r1, #6
 800532c:	4021      	ands	r1, r4
 800532e:	d107      	bne.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005330:	6801      	ldr	r1, [r0, #0]
 8005332:	6849      	ldr	r1, [r1, #4]
 8005334:	0a09      	lsrs	r1, r1, #8
 8005336:	4029      	ands	r1, r5
 8005338:	d002      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 800533a:	f7ff f840 	bl	80043be <PE_Receive_SVDM>
 800533e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005340:	6841      	ldr	r1, [r0, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	400c      	ands	r4, r1
 8005346:	2c02      	cmp	r4, #2
 8005348:	d134      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 800534a:	7445      	strb	r5, [r0, #17]
 800534c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800534e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8005350:	0449      	lsls	r1, r1, #17
 8005352:	0f49      	lsrs	r1, r1, #29
 8005354:	1e49      	subs	r1, r1, #1
 8005356:	4ab1      	ldr	r2, [pc, #708]	; (800561c <.text_29>)
 8005358:	5481      	strb	r1, [r0, r2]
 800535a:	0006      	movs	r6, r0
 800535c:	2000      	movs	r0, #0
 800535e:	e00f      	b.n	8005380 <PE_Check_DataMessageVDM+0x90>
 8005360:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8005362:	0082      	lsls	r2, r0, #2
 8005364:	1889      	adds	r1, r1, r2
 8005366:	798a      	ldrb	r2, [r1, #6]
 8005368:	79cf      	ldrb	r7, [r1, #7]
 800536a:	023f      	lsls	r7, r7, #8
 800536c:	19d2      	adds	r2, r2, r7
 800536e:	7a0f      	ldrb	r7, [r1, #8]
 8005370:	043f      	lsls	r7, r7, #16
 8005372:	19d2      	adds	r2, r2, r7
 8005374:	7a49      	ldrb	r1, [r1, #9]
 8005376:	0609      	lsls	r1, r1, #24
 8005378:	1851      	adds	r1, r2, r1
 800537a:	0082      	lsls	r2, r0, #2
 800537c:	5099      	str	r1, [r3, r2]
 800537e:	1c40      	adds	r0, r0, #1
 8005380:	49a7      	ldr	r1, [pc, #668]	; (8005620 <.text_30>)
 8005382:	1873      	adds	r3, r6, r1
 8005384:	3118      	adds	r1, #24
 8005386:	1872      	adds	r2, r6, r1
 8005388:	7811      	ldrb	r1, [r2, #0]
 800538a:	4288      	cmp	r0, r1
 800538c:	d3e8      	bcc.n	8005360 <PE_Check_DataMessageVDM+0x70>
 800538e:	9900      	ldr	r1, [sp, #0]
 8005390:	68f0      	ldr	r0, [r6, #12]
 8005392:	2800      	cmp	r0, #0
 8005394:	d008      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 8005396:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005398:	2f00      	cmp	r7, #0
 800539a:	d005      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 800539c:	7c30      	ldrb	r0, [r6, #16]
 800539e:	47b8      	blx	r7
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d101      	bne.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 80053a4:	7474      	strb	r4, [r6, #17]
 80053a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80053a8:	6870      	ldr	r0, [r6, #4]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	4004      	ands	r4, r0
 80053ae:	2c02      	cmp	r4, #2
 80053b0:	d100      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 80053b2:	7475      	strb	r5, [r6, #17]
 80053b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080053b8 <.text_23>:
 80053b8:	0000801e 	.word	0x0000801e

080053bc <.text_24>:
 80053bc:	fffff8ff 	.word	0xfffff8ff

080053c0 <PE_SVDM_CheckIdentity>:
 80053c0:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 80053c2:	0003      	movs	r3, r0
 80053c4:	2000      	movs	r0, #0
 80053c6:	4c97      	ldr	r4, [pc, #604]	; (8005624 <.text_31>)
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	58e3      	ldr	r3, [r4, r3]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80053d0:	045b      	lsls	r3, r3, #17
 80053d2:	0f5b      	lsrs	r3, r3, #29
 80053d4:	1e5c      	subs	r4, r3, #1
 80053d6:	b2e3      	uxtb	r3, r4
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d200      	bcs.n	80053de <PE_SVDM_CheckIdentity+0x1e>
 80053dc:	e0b5      	b.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 80053de:	000b      	movs	r3, r1
 80053e0:	7819      	ldrb	r1, [r3, #0]
 80053e2:	785d      	ldrb	r5, [r3, #1]
 80053e4:	022d      	lsls	r5, r5, #8
 80053e6:	1949      	adds	r1, r1, r5
 80053e8:	789d      	ldrb	r5, [r3, #2]
 80053ea:	042d      	lsls	r5, r5, #16
 80053ec:	1949      	adds	r1, r1, r5
 80053ee:	78dd      	ldrb	r5, [r3, #3]
 80053f0:	062d      	lsls	r5, r5, #24
 80053f2:	194d      	adds	r5, r1, r5
 80053f4:	6015      	str	r5, [r2, #0]
 80053f6:	7919      	ldrb	r1, [r3, #4]
 80053f8:	795e      	ldrb	r6, [r3, #5]
 80053fa:	0236      	lsls	r6, r6, #8
 80053fc:	1989      	adds	r1, r1, r6
 80053fe:	799e      	ldrb	r6, [r3, #6]
 8005400:	0436      	lsls	r6, r6, #16
 8005402:	1989      	adds	r1, r1, r6
 8005404:	79de      	ldrb	r6, [r3, #7]
 8005406:	0636      	lsls	r6, r6, #24
 8005408:	1989      	adds	r1, r1, r6
 800540a:	6051      	str	r1, [r2, #4]
 800540c:	2108      	movs	r1, #8
 800540e:	7a1e      	ldrb	r6, [r3, #8]
 8005410:	7a5f      	ldrb	r7, [r3, #9]
 8005412:	023f      	lsls	r7, r7, #8
 8005414:	19f6      	adds	r6, r6, r7
 8005416:	7a9f      	ldrb	r7, [r3, #10]
 8005418:	043f      	lsls	r7, r7, #16
 800541a:	19f6      	adds	r6, r6, r7
 800541c:	7adf      	ldrb	r7, [r3, #11]
 800541e:	063f      	lsls	r7, r7, #24
 8005420:	19f6      	adds	r6, r6, r7
 8005422:	6096      	str	r6, [r2, #8]
 8005424:	1ee4      	subs	r4, r4, #3
 8005426:	2620      	movs	r6, #32
 8005428:	5d97      	ldrb	r7, [r2, r6]
 800542a:	26e0      	movs	r6, #224	; 0xe0
 800542c:	403e      	ands	r6, r7
 800542e:	466f      	mov	r7, sp
 8005430:	703e      	strb	r6, [r7, #0]
 8005432:	466e      	mov	r6, sp
 8005434:	7836      	ldrb	r6, [r6, #0]
 8005436:	2720      	movs	r7, #32
 8005438:	55d6      	strb	r6, [r2, r7]
 800543a:	0626      	lsls	r6, r4, #24
 800543c:	d022      	beq.n	8005484 <PE_SVDM_CheckIdentity+0xc4>
 800543e:	1e66      	subs	r6, r4, #1
 8005440:	466f      	mov	r7, sp
 8005442:	707e      	strb	r6, [r7, #1]
 8005444:	00ae      	lsls	r6, r5, #2
 8005446:	0f76      	lsrs	r6, r6, #29
 8005448:	2e05      	cmp	r6, #5
 800544a:	d827      	bhi.n	800549c <PE_SVDM_CheckIdentity+0xdc>
 800544c:	a701      	add	r7, pc, #4	; (adr r7, 8005454 <PE_SVDM_CheckIdentity+0x94>)
 800544e:	5dbf      	ldrb	r7, [r7, r6]
 8005450:	44bf      	add	pc, r7
 8005452:	bf00      	nop
 8005454:	5a060632 	.word	0x5a060632
 8005458:	a680      	.short	0xa680
 800545a:	210c      	movs	r1, #12
 800545c:	466c      	mov	r4, sp
 800545e:	7824      	ldrb	r4, [r4, #0]
 8005460:	2608      	movs	r6, #8
 8005462:	4326      	orrs	r6, r4
 8005464:	2420      	movs	r4, #32
 8005466:	5516      	strb	r6, [r2, r4]
 8005468:	7b1c      	ldrb	r4, [r3, #12]
 800546a:	7b5e      	ldrb	r6, [r3, #13]
 800546c:	0236      	lsls	r6, r6, #8
 800546e:	19a4      	adds	r4, r4, r6
 8005470:	7b9e      	ldrb	r6, [r3, #14]
 8005472:	0436      	lsls	r6, r6, #16
 8005474:	19a4      	adds	r4, r4, r6
 8005476:	7bde      	ldrb	r6, [r3, #15]
 8005478:	0636      	lsls	r6, r6, #24
 800547a:	19a4      	adds	r4, r4, r6
 800547c:	6194      	str	r4, [r2, #24]
 800547e:	466c      	mov	r4, sp
 8005480:	7864      	ldrb	r4, [r4, #1]
 8005482:	0026      	movs	r6, r4
 8005484:	d062      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005486:	9e01      	ldr	r6, [sp, #4]
 8005488:	8eb6      	ldrh	r6, [r6, #52]	; 0x34
 800548a:	0636      	lsls	r6, r6, #24
 800548c:	0fb6      	lsrs	r6, r6, #30
 800548e:	2e02      	cmp	r6, #2
 8005490:	d35c      	bcc.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005492:	01ad      	lsls	r5, r5, #6
 8005494:	0f6d      	lsrs	r5, r5, #29
 8005496:	d059      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005498:	1e6d      	subs	r5, r5, #1
 800549a:	2d02      	cmp	r5, #2
 800549c:	d855      	bhi.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 800549e:	2520      	movs	r5, #32
 80054a0:	5d55      	ldrb	r5, [r2, r5]
 80054a2:	08ef      	lsrs	r7, r5, #3
 80054a4:	07ff      	lsls	r7, r7, #31
 80054a6:	d53b      	bpl.n	8005520 <PE_SVDM_CheckIdentity+0x160>
 80054a8:	3108      	adds	r1, #8
 80054aa:	1e64      	subs	r4, r4, #1
 80054ac:	e039      	b.n	8005522 <PE_SVDM_CheckIdentity+0x162>
 80054ae:	210c      	movs	r1, #12
 80054b0:	466c      	mov	r4, sp
 80054b2:	7824      	ldrb	r4, [r4, #0]
 80054b4:	2601      	movs	r6, #1
 80054b6:	4326      	orrs	r6, r4
 80054b8:	2420      	movs	r4, #32
 80054ba:	5516      	strb	r6, [r2, r4]
 80054bc:	7b1c      	ldrb	r4, [r3, #12]
 80054be:	7b5e      	ldrb	r6, [r3, #13]
 80054c0:	0236      	lsls	r6, r6, #8
 80054c2:	19a4      	adds	r4, r4, r6
 80054c4:	7b9e      	ldrb	r6, [r3, #14]
 80054c6:	0436      	lsls	r6, r6, #16
 80054c8:	19a4      	adds	r4, r4, r6
 80054ca:	7bde      	ldrb	r6, [r3, #15]
 80054cc:	0636      	lsls	r6, r6, #24
 80054ce:	19a4      	adds	r4, r4, r6
 80054d0:	60d4      	str	r4, [r2, #12]
 80054d2:	e7d4      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054d4:	210c      	movs	r1, #12
 80054d6:	466c      	mov	r4, sp
 80054d8:	7824      	ldrb	r4, [r4, #0]
 80054da:	2604      	movs	r6, #4
 80054dc:	4326      	orrs	r6, r4
 80054de:	2420      	movs	r4, #32
 80054e0:	5516      	strb	r6, [r2, r4]
 80054e2:	7b1c      	ldrb	r4, [r3, #12]
 80054e4:	7b5e      	ldrb	r6, [r3, #13]
 80054e6:	0236      	lsls	r6, r6, #8
 80054e8:	19a4      	adds	r4, r4, r6
 80054ea:	7b9e      	ldrb	r6, [r3, #14]
 80054ec:	0436      	lsls	r6, r6, #16
 80054ee:	19a4      	adds	r4, r4, r6
 80054f0:	7bde      	ldrb	r6, [r3, #15]
 80054f2:	0636      	lsls	r6, r6, #24
 80054f4:	19a4      	adds	r4, r4, r6
 80054f6:	6154      	str	r4, [r2, #20]
 80054f8:	e7c1      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054fa:	210c      	movs	r1, #12
 80054fc:	466c      	mov	r4, sp
 80054fe:	7824      	ldrb	r4, [r4, #0]
 8005500:	2602      	movs	r6, #2
 8005502:	4326      	orrs	r6, r4
 8005504:	2420      	movs	r4, #32
 8005506:	5516      	strb	r6, [r2, r4]
 8005508:	7b1c      	ldrb	r4, [r3, #12]
 800550a:	7b5e      	ldrb	r6, [r3, #13]
 800550c:	0236      	lsls	r6, r6, #8
 800550e:	19a4      	adds	r4, r4, r6
 8005510:	7b9e      	ldrb	r6, [r3, #14]
 8005512:	0436      	lsls	r6, r6, #16
 8005514:	19a4      	adds	r4, r4, r6
 8005516:	7bde      	ldrb	r6, [r3, #15]
 8005518:	0636      	lsls	r6, r6, #24
 800551a:	19a4      	adds	r4, r4, r6
 800551c:	6114      	str	r4, [r2, #16]
 800551e:	e7ae      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 8005520:	1d09      	adds	r1, r1, #4
 8005522:	b2e4      	uxtb	r4, r4
 8005524:	2c01      	cmp	r4, #1
 8005526:	d110      	bne.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 8005528:	2410      	movs	r4, #16
 800552a:	432c      	orrs	r4, r5
 800552c:	2520      	movs	r5, #32
 800552e:	5554      	strb	r4, [r2, r5]
 8005530:	1859      	adds	r1, r3, r1
 8005532:	780b      	ldrb	r3, [r1, #0]
 8005534:	784c      	ldrb	r4, [r1, #1]
 8005536:	0224      	lsls	r4, r4, #8
 8005538:	191b      	adds	r3, r3, r4
 800553a:	788c      	ldrb	r4, [r1, #2]
 800553c:	0424      	lsls	r4, r4, #16
 800553e:	191b      	adds	r3, r3, r4
 8005540:	78c9      	ldrb	r1, [r1, #3]
 8005542:	0609      	lsls	r1, r1, #24
 8005544:	1859      	adds	r1, r3, r1
 8005546:	61d1      	str	r1, [r2, #28]
 8005548:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 800554a:	2002      	movs	r0, #2
 800554c:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

0800554e <PE_SVDM_CheckSVIDs>:
 800554e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005550:	4b34      	ldr	r3, [pc, #208]	; (8005624 <.text_31>)
 8005552:	0080      	lsls	r0, r0, #2
 8005554:	5818      	ldr	r0, [r3, r0]
 8005556:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8005558:	0440      	lsls	r0, r0, #17
 800555a:	0f40      	lsrs	r0, r0, #29
 800555c:	1e46      	subs	r6, r0, #1
 800555e:	b2f6      	uxtb	r6, r6
 8005560:	2000      	movs	r0, #0
 8005562:	2500      	movs	r5, #0
 8005564:	7610      	strb	r0, [r2, #24]
 8005566:	7650      	strb	r0, [r2, #25]
 8005568:	000b      	movs	r3, r1
 800556a:	0014      	movs	r4, r2
 800556c:	0031      	movs	r1, r6
 800556e:	5c1a      	ldrb	r2, [r3, r0]
 8005570:	1c5e      	adds	r6, r3, #1
 8005572:	5c36      	ldrb	r6, [r6, r0]
 8005574:	0236      	lsls	r6, r6, #8
 8005576:	1992      	adds	r2, r2, r6
 8005578:	7e26      	ldrb	r6, [r4, #24]
 800557a:	0076      	lsls	r6, r6, #1
 800557c:	53a2      	strh	r2, [r4, r6]
 800557e:	7e26      	ldrb	r6, [r4, #24]
 8005580:	2201      	movs	r2, #1
 8005582:	0077      	lsls	r7, r6, #1
 8005584:	5be7      	ldrh	r7, [r4, r7]
 8005586:	2f00      	cmp	r7, #0
 8005588:	d002      	beq.n	8005590 <PE_SVDM_CheckSVIDs+0x42>
 800558a:	1c76      	adds	r6, r6, #1
 800558c:	7626      	strb	r6, [r4, #24]
 800558e:	e001      	b.n	8005594 <PE_SVDM_CheckSVIDs+0x46>
 8005590:	2501      	movs	r5, #1
 8005592:	7662      	strb	r2, [r4, #25]
 8005594:	1c80      	adds	r0, r0, #2
 8005596:	b2c0      	uxtb	r0, r0
 8005598:	5c1e      	ldrb	r6, [r3, r0]
 800559a:	1c5f      	adds	r7, r3, #1
 800559c:	5c3f      	ldrb	r7, [r7, r0]
 800559e:	023f      	lsls	r7, r7, #8
 80055a0:	19f6      	adds	r6, r6, r7
 80055a2:	7e27      	ldrb	r7, [r4, #24]
 80055a4:	007f      	lsls	r7, r7, #1
 80055a6:	53e6      	strh	r6, [r4, r7]
 80055a8:	7e26      	ldrb	r6, [r4, #24]
 80055aa:	0077      	lsls	r7, r6, #1
 80055ac:	5be7      	ldrh	r7, [r4, r7]
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	d002      	beq.n	80055b8 <PE_SVDM_CheckSVIDs+0x6a>
 80055b2:	1c76      	adds	r6, r6, #1
 80055b4:	7626      	strb	r6, [r4, #24]
 80055b6:	e001      	b.n	80055bc <PE_SVDM_CheckSVIDs+0x6e>
 80055b8:	2501      	movs	r5, #1
 80055ba:	7662      	strb	r2, [r4, #25]
 80055bc:	1c80      	adds	r0, r0, #2
 80055be:	b2c0      	uxtb	r0, r0
 80055c0:	008a      	lsls	r2, r1, #2
 80055c2:	4290      	cmp	r0, r2
 80055c4:	d201      	bcs.n	80055ca <PE_SVDM_CheckSVIDs+0x7c>
 80055c6:	002a      	movs	r2, r5
 80055c8:	d0d1      	beq.n	800556e <PE_SVDM_CheckSVIDs+0x20>
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055cc <.text_27>:
 80055cc:	ffff7fff 	.word	0xffff7fff

080055d0 <PE_SVDM_CheckModes>:
 80055d0:	b530      	push	{r4, r5, lr}
 80055d2:	4c14      	ldr	r4, [pc, #80]	; (8005624 <.text_31>)
 80055d4:	0080      	lsls	r0, r0, #2
 80055d6:	5820      	ldr	r0, [r4, r0]
 80055d8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80055da:	0440      	lsls	r0, r0, #17
 80055dc:	0f40      	lsrs	r0, r0, #29
 80055de:	1e40      	subs	r0, r0, #1
 80055e0:	b2c0      	uxtb	r0, r0
 80055e2:	2400      	movs	r4, #0
 80055e4:	8399      	strh	r1, [r3, #28]
 80055e6:	601c      	str	r4, [r3, #0]
 80055e8:	5d11      	ldrb	r1, [r2, r4]
 80055ea:	1915      	adds	r5, r2, r4
 80055ec:	786d      	ldrb	r5, [r5, #1]
 80055ee:	022d      	lsls	r5, r5, #8
 80055f0:	1949      	adds	r1, r1, r5
 80055f2:	1915      	adds	r5, r2, r4
 80055f4:	78ad      	ldrb	r5, [r5, #2]
 80055f6:	042d      	lsls	r5, r5, #16
 80055f8:	1949      	adds	r1, r1, r5
 80055fa:	1915      	adds	r5, r2, r4
 80055fc:	78ed      	ldrb	r5, [r5, #3]
 80055fe:	062d      	lsls	r5, r5, #24
 8005600:	1949      	adds	r1, r1, r5
 8005602:	681d      	ldr	r5, [r3, #0]
 8005604:	00ad      	lsls	r5, r5, #2
 8005606:	195d      	adds	r5, r3, r5
 8005608:	6069      	str	r1, [r5, #4]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	1c49      	adds	r1, r1, #1
 800560e:	6019      	str	r1, [r3, #0]
 8005610:	1d24      	adds	r4, r4, #4
 8005612:	b2e4      	uxtb	r4, r4
 8005614:	0081      	lsls	r1, r0, #2
 8005616:	428c      	cmp	r4, r1
 8005618:	d3e6      	bcc.n	80055e8 <PE_SVDM_CheckModes+0x18>
 800561a:	bd30      	pop	{r4, r5, pc}

0800561c <.text_29>:
 800561c:	000004ac 	.word	0x000004ac

08005620 <.text_30>:
 8005620:	00000494 	.word	0x00000494

08005624 <.text_31>:
 8005624:	200002f4 	.word	0x200002f4

08005628 <USBPD_PRL_TimerCounter>:
 8005628:	4954      	ldr	r1, [pc, #336]	; (800577c <.text_15>)
 800562a:	0080      	lsls	r0, r0, #2
 800562c:	1808      	adds	r0, r1, r0
 800562e:	6801      	ldr	r1, [r0, #0]
 8005630:	790a      	ldrb	r2, [r1, #4]
 8005632:	2a00      	cmp	r2, #0
 8005634:	d002      	beq.n	800563c <USBPD_PRL_TimerCounter+0x14>
 8005636:	790a      	ldrb	r2, [r1, #4]
 8005638:	1e52      	subs	r2, r2, #1
 800563a:	710a      	strb	r2, [r1, #4]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	7841      	ldrb	r1, [r0, #1]
 8005640:	2900      	cmp	r1, #0
 8005642:	d001      	beq.n	8005648 <USBPD_PRL_TimerCounter+0x20>
 8005644:	1e49      	subs	r1, r1, #1
 8005646:	7041      	strb	r1, [r0, #1]
 8005648:	4770      	bx	lr
	...

0800564c <USBPD_PRL_Init>:
 800564c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800564e:	b081      	sub	sp, #4
 8005650:	0014      	movs	r4, r2
 8005652:	001d      	movs	r5, r3
 8005654:	2616      	movs	r6, #22
 8005656:	209c      	movs	r0, #156	; 0x9c
 8005658:	0040      	lsls	r0, r0, #1
 800565a:	f01c ff0f 	bl	802247c <malloc>
 800565e:	0007      	movs	r7, r0
 8005660:	d01e      	beq.n	80056a0 <USBPD_PRL_Init+0x54>
 8005662:	9e02      	ldr	r6, [sp, #8]
 8005664:	219c      	movs	r1, #156	; 0x9c
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	f01d f8c9 	bl	80227fe <__aeabi_memclr>
 800566c:	220f      	movs	r2, #15
 800566e:	2103      	movs	r1, #3
 8005670:	1db8      	adds	r0, r7, #6
 8005672:	f01d f8bd 	bl	80227f0 <__aeabi_memset>
 8005676:	4841      	ldr	r0, [pc, #260]	; (800577c <.text_15>)
 8005678:	4669      	mov	r1, sp
 800567a:	7909      	ldrb	r1, [r1, #4]
 800567c:	0089      	lsls	r1, r1, #2
 800567e:	5047      	str	r7, [r0, r1]
 8005680:	62bc      	str	r4, [r7, #40]	; 0x28
 8005682:	62fd      	str	r5, [r7, #44]	; 0x2c
 8005684:	2001      	movs	r0, #1
 8005686:	9000      	str	r0, [sp, #0]
 8005688:	6870      	ldr	r0, [r6, #4]
 800568a:	0743      	lsls	r3, r0, #29
 800568c:	0fdb      	lsrs	r3, r3, #31
 800568e:	003a      	movs	r2, r7
 8005690:	3230      	adds	r2, #48	; 0x30
 8005692:	bf00      	nop
 8005694:	a103      	add	r1, pc, #12	; (adr r1, 80056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 8005696:	4668      	mov	r0, sp
 8005698:	7900      	ldrb	r0, [r0, #4]
 800569a:	f00d fc47 	bl	8012f2c <USBPD_PHY_Init>
 800569e:	0006      	movs	r6, r0
 80056a0:	0030      	movs	r0, r6
 80056a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 80056a4:	5cdd 0800 6035 0800 608f 0800 60a9 0800     .\..5`...`...`..
 80056b4:	60b1 0800 579d 0800                         .`...W..

080056bc <USBPD_PRL_GetMemoryConsumption>:
 80056bc:	20ea      	movs	r0, #234	; 0xea
 80056be:	0080      	lsls	r0, r0, #2
 80056c0:	4770      	bx	lr

080056c2 <USBPD_PRL_SetHeader>:
 80056c2:	b530      	push	{r4, r5, lr}
 80056c4:	4c2d      	ldr	r4, [pc, #180]	; (800577c <.text_15>)
 80056c6:	0080      	lsls	r0, r0, #2
 80056c8:	5820      	ldr	r0, [r4, r0]
 80056ca:	8a44      	ldrh	r4, [r0, #18]
 80056cc:	4d2c      	ldr	r5, [pc, #176]	; (8005780 <.text_16>)
 80056ce:	4025      	ands	r5, r4
 80056d0:	0209      	lsls	r1, r1, #8
 80056d2:	2480      	movs	r4, #128	; 0x80
 80056d4:	0064      	lsls	r4, r4, #1
 80056d6:	4021      	ands	r1, r4
 80056d8:	4329      	orrs	r1, r5
 80056da:	8241      	strh	r1, [r0, #18]
 80056dc:	4c29      	ldr	r4, [pc, #164]	; (8005784 <.text_17>)
 80056de:	400c      	ands	r4, r1
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	2220      	movs	r2, #32
 80056e4:	4011      	ands	r1, r2
 80056e6:	4321      	orrs	r1, r4
 80056e8:	8241      	strh	r1, [r0, #18]
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <.text_18>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	0199      	lsls	r1, r3, #6
 80056f0:	23c0      	movs	r3, #192	; 0xc0
 80056f2:	400b      	ands	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	8243      	strh	r3, [r0, #18]
 80056f8:	bd30      	pop	{r4, r5, pc}

080056fa <USBPD_PRL_SetHeaderPowerRole>:
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <.text_15>)
 80056fc:	0080      	lsls	r0, r0, #2
 80056fe:	5810      	ldr	r0, [r2, r0]
 8005700:	8a42      	ldrh	r2, [r0, #18]
 8005702:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <.text_16>)
 8005704:	4013      	ands	r3, r2
 8005706:	0209      	lsls	r1, r1, #8
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	0052      	lsls	r2, r2, #1
 800570c:	e007      	b.n	800571e <.text_10>

0800570e <USBPD_PRL_SetHeaderDataRole>:
 800570e:	4a1b      	ldr	r2, [pc, #108]	; (800577c <.text_15>)
 8005710:	0080      	lsls	r0, r0, #2
 8005712:	5810      	ldr	r0, [r2, r0]
 8005714:	8a42      	ldrh	r2, [r0, #18]
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <.text_17>)
 8005718:	4013      	ands	r3, r2
 800571a:	0149      	lsls	r1, r1, #5
 800571c:	2220      	movs	r2, #32

0800571e <.text_10>:
 800571e:	4011      	ands	r1, r2
 8005720:	4319      	orrs	r1, r3
 8005722:	8241      	strh	r1, [r0, #18]
 8005724:	4770      	bx	lr

08005726 <USBPD_PRL_SetHeaderSpecification>:
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <.text_15>)
 8005728:	0080      	lsls	r0, r0, #2
 800572a:	5810      	ldr	r0, [r2, r0]
 800572c:	8a42      	ldrh	r2, [r0, #18]
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <.text_18>)
 8005730:	4013      	ands	r3, r2
 8005732:	0189      	lsls	r1, r1, #6
 8005734:	22c0      	movs	r2, #192	; 0xc0
 8005736:	400a      	ands	r2, r1
 8005738:	431a      	orrs	r2, r3
 800573a:	8242      	strh	r2, [r0, #18]
 800573c:	4770      	bx	lr

0800573e <USBPD_PRL_CBL_SetHeaderSpecification>:
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <.text_15>)
 8005740:	0080      	lsls	r0, r0, #2
 8005742:	5810      	ldr	r0, [r2, r0]
 8005744:	018a      	lsls	r2, r1, #6
 8005746:	21c0      	movs	r1, #192	; 0xc0
 8005748:	4011      	ands	r1, r2
 800574a:	4a0f      	ldr	r2, [pc, #60]	; (8005788 <.text_18>)
 800574c:	8a83      	ldrh	r3, [r0, #20]
 800574e:	4013      	ands	r3, r2
 8005750:	430b      	orrs	r3, r1
 8005752:	8283      	strh	r3, [r0, #20]
 8005754:	8ac3      	ldrh	r3, [r0, #22]
 8005756:	401a      	ands	r2, r3
 8005758:	4311      	orrs	r1, r2
 800575a:	82c1      	strh	r1, [r0, #22]
 800575c:	4770      	bx	lr

0800575e <USBPD_PRL_SRCSetSinkNG>:
 800575e:	b580      	push	{r7, lr}
 8005760:	f00d fcd9 	bl	8013116 <USBPD_PHY_SetResistor_SinkTxNG>
 8005764:	bd01      	pop	{r0, pc}

08005766 <USBPD_PRL_SRCReleaseSinkNG>:
 8005766:	b510      	push	{r4, lr}
 8005768:	0004      	movs	r4, r0
 800576a:	f00d fce3 	bl	8013134 <USBPD_PHY_SetResistor_SinkTxOK>
 800576e:	2000      	movs	r0, #0
 8005770:	4902      	ldr	r1, [pc, #8]	; (800577c <.text_15>)
 8005772:	00a2      	lsls	r2, r4, #2
 8005774:	5889      	ldr	r1, [r1, r2]
 8005776:	7148      	strb	r0, [r1, #5]
 8005778:	bd10      	pop	{r4, pc}
	...

0800577c <.text_15>:
 800577c:	20000300 	.word	0x20000300

08005780 <.text_16>:
 8005780:	0000feff 	.word	0x0000feff

08005784 <.text_17>:
 8005784:	0000ffdf 	.word	0x0000ffdf

08005788 <.text_18>:
 8005788:	0000ff3f 	.word	0x0000ff3f

0800578c <USBPD_PRL_IsResistor_SinkTxOK>:
 800578c:	b580      	push	{r7, lr}
 800578e:	f00d fcf7 	bl	8013180 <USBPD_PHY_IsResistor_SinkTxOk>
 8005792:	bd02      	pop	{r1, pc}

08005794 <USBPD_PRL_FastRoleSwapSignalling>:
 8005794:	b580      	push	{r7, lr}
 8005796:	f00d fd03 	bl	80131a0 <USBPD_PHY_FastRoleSwapSignalling>
 800579a:	bd01      	pop	{r0, pc}

0800579c <PRL_FastRoleSwapReception>:
 800579c:	b580      	push	{r7, lr}
 800579e:	f7fb fa4d 	bl	8000c3c <PE_PRL_FastRoleSwapReception>
 80057a2:	bd01      	pop	{r0, pc}

080057a4 <USBPD_PRL_SOPCapability>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	f00d fcd5 	bl	8013154 <USBPD_PHY_SOPSupported>
 80057aa:	bd01      	pop	{r0, pc}

080057ac <USBPD_PRL_SendMessage>:
 80057ac:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	2503      	movs	r5, #3
 80057b2:	4668      	mov	r0, sp
 80057b4:	7f00      	ldrb	r0, [r0, #28]
 80057b6:	9005      	str	r0, [sp, #20]
 80057b8:	48ca      	ldr	r0, [pc, #808]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	0092      	lsls	r2, r2, #2
 80057be:	1880      	adds	r0, r0, r2
 80057c0:	9000      	str	r0, [sp, #0]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	0004      	movs	r4, r0
 80057c6:	7962      	ldrb	r2, [r4, #5]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d004      	beq.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057cc:	7a62      	ldrb	r2, [r4, #9]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d101      	bne.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057d2:	220f      	movs	r2, #15
 80057d4:	7142      	strb	r2, [r0, #5]
 80057d6:	466a      	mov	r2, sp
 80057d8:	7111      	strb	r1, [r2, #4]
 80057da:	4669      	mov	r1, sp
 80057dc:	7909      	ldrb	r1, [r1, #4]
 80057de:	9104      	str	r1, [sp, #16]
 80057e0:	1861      	adds	r1, r4, r1
 80057e2:	9a05      	ldr	r2, [sp, #20]
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	1c52      	adds	r2, r2, #1
 80057e8:	466e      	mov	r6, sp
 80057ea:	7172      	strb	r2, [r6, #5]
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	0052      	lsls	r2, r2, #1
 80057f0:	9203      	str	r2, [sp, #12]
 80057f2:	2600      	movs	r6, #0
 80057f4:	9302      	str	r3, [sp, #8]
 80057f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057f8:	7963      	ldrb	r3, [r4, #5]
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d900      	bls.n	8005800 <USBPD_PRL_SendMessage+0x54>
 80057fe:	e1f6      	b.n	8005bee <USBPD_PRL_SendMessage+0x442>
 8005800:	a701      	add	r7, pc, #4	; (adr r7, 8005808 <USBPD_PRL_SendMessage+0x5c>)
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	5aff      	ldrh	r7, [r7, r3]
 8005806:	44bf      	add	pc, r7
 8005808:	00480020 	.word	0x00480020
 800580c:	03e4005e 	.word	0x03e4005e
 8005810:	00a8006a 	.word	0x00a8006a
 8005814:	015a0086 	.word	0x015a0086
 8005818:	03e403e4 	.word	0x03e403e4
 800581c:	030802de 	.word	0x030802de
 8005820:	03560334 	.word	0x03560334
 8005824:	03de03e4 	.word	0x03de03e4
 8005828:	03a6      	.short	0x03a6
 800582a:	f3ef 8710 	mrs	r7, PRIMASK
 800582e:	b672      	cpsid	i
 8005830:	4668      	mov	r0, sp
 8005832:	7f00      	ldrb	r0, [r0, #28]
 8005834:	f7fb f8b4 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8005838:	2800      	cmp	r0, #0
 800583a:	d105      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 800583c:	7aa0      	ldrb	r0, [r4, #10]
 800583e:	2800      	cmp	r0, #0
 8005840:	d102      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 8005842:	20ff      	movs	r0, #255	; 0xff
 8005844:	7260      	strb	r0, [r4, #9]
 8005846:	e000      	b.n	800584a <USBPD_PRL_SendMessage+0x9e>
 8005848:	7266      	strb	r6, [r4, #9]
 800584a:	f387 8810 	msr	PRIMASK, r7
 800584e:	2006      	movs	r0, #6
 8005850:	e1a0      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005852:	4668      	mov	r0, sp
 8005854:	7f00      	ldrb	r0, [r0, #28]
 8005856:	f00d fc5e 	bl	8013116 <USBPD_PHY_SetResistor_SinkTxNG>
 800585a:	2002      	movs	r0, #2
 800585c:	9900      	ldr	r1, [sp, #0]
 800585e:	6809      	ldr	r1, [r1, #0]
 8005860:	7148      	strb	r0, [r1, #5]
 8005862:	2013      	movs	r0, #19
 8005864:	7060      	strb	r0, [r4, #1]
 8005866:	e1c4      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005868:	2a01      	cmp	r2, #1
 800586a:	d10f      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 800586c:	7861      	ldrb	r1, [r4, #1]
 800586e:	2900      	cmp	r1, #0
 8005870:	d10a      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005872:	e01c      	b.n	80058ae <USBPD_PRL_SendMessage+0x102>
 8005874:	2a02      	cmp	r2, #2
 8005876:	d109      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 8005878:	4668      	mov	r0, sp
 800587a:	7f00      	ldrb	r0, [r0, #28]
 800587c:	f00d fc80 	bl	8013180 <USBPD_PHY_IsResistor_SinkTxOk>
 8005880:	2801      	cmp	r0, #1
 8005882:	d101      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005884:	2005      	movs	r0, #5
 8005886:	e185      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005888:	2509      	movs	r5, #9
 800588a:	e1b2      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 800588c:	2106      	movs	r1, #6
 800588e:	e154      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1861      	adds	r1, r4, r1
 8005894:	8a49      	ldrh	r1, [r1, #18]
 8005896:	0609      	lsls	r1, r1, #24
 8005898:	0f89      	lsrs	r1, r1, #30
 800589a:	2902      	cmp	r1, #2
 800589c:	d107      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 800589e:	2a01      	cmp	r2, #1
 80058a0:	d101      	bne.n	80058a6 <USBPD_PRL_SendMessage+0xfa>
 80058a2:	7142      	strb	r2, [r0, #5]
 80058a4:	e1a5      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 80058a6:	2a02      	cmp	r2, #2
 80058a8:	d101      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 80058aa:	2104      	movs	r1, #4
 80058ac:	e145      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058ae:	2105      	movs	r1, #5
 80058b0:	e143      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058b2:	9803      	ldr	r0, [sp, #12]
 80058b4:	1820      	adds	r0, r4, r0
 80058b6:	8a43      	ldrh	r3, [r0, #18]
 80058b8:	4acf      	ldr	r2, [pc, #828]	; (8005bf8 <.text_24>)
 80058ba:	401a      	ands	r2, r3
 80058bc:	ab08      	add	r3, sp, #32
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	06db      	lsls	r3, r3, #27
 80058c2:	0edb      	lsrs	r3, r3, #27
 80058c4:	4313      	orrs	r3, r2
 80058c6:	8243      	strh	r3, [r0, #18]
 80058c8:	045a      	lsls	r2, r3, #17
 80058ca:	0c52      	lsrs	r2, r2, #17
 80058cc:	ab08      	add	r3, sp, #32
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	03db      	lsls	r3, r3, #15
 80058d4:	4313      	orrs	r3, r2
 80058d6:	8243      	strh	r3, [r0, #18]
 80058d8:	70a6      	strb	r6, [r4, #2]
 80058da:	8a43      	ldrh	r3, [r0, #18]
 80058dc:	0bda      	lsrs	r2, r3, #15
 80058de:	d023      	beq.n	8005928 <USBPD_PRL_SendMessage+0x17c>
 80058e0:	9a02      	ldr	r2, [sp, #8]
 80058e2:	7892      	ldrb	r2, [r2, #2]
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	18d2      	adds	r2, r2, r3
 80058ec:	83a2      	strh	r2, [r4, #28]
 80058ee:	8ba2      	ldrh	r2, [r4, #28]
 80058f0:	0a93      	lsrs	r3, r2, #10
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d40f      	bmi.n	8005916 <USBPD_PRL_SendMessage+0x16a>
 80058f6:	0ad2      	lsrs	r2, r2, #11
 80058f8:	0712      	lsls	r2, r2, #28
 80058fa:	d122      	bne.n	8005942 <USBPD_PRL_SendMessage+0x196>
 80058fc:	466a      	mov	r2, sp
 80058fe:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005900:	1f12      	subs	r2, r2, #4
 8005902:	8462      	strh	r2, [r4, #34]	; 0x22
 8005904:	05d2      	lsls	r2, r2, #23
 8005906:	0dd2      	lsrs	r2, r2, #23
 8005908:	8ba3      	ldrh	r3, [r4, #28]
 800590a:	27fe      	movs	r7, #254	; 0xfe
 800590c:	023f      	lsls	r7, r7, #8
 800590e:	401f      	ands	r7, r3
 8005910:	433a      	orrs	r2, r7
 8005912:	83a2      	strh	r2, [r4, #28]
 8005914:	e015      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005916:	8466      	strh	r6, [r4, #34]	; 0x22
 8005918:	8a42      	ldrh	r2, [r0, #18]
 800591a:	4bb8      	ldr	r3, [pc, #736]	; (8005bfc <.text_25>)
 800591c:	4013      	ands	r3, r2
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	0152      	lsls	r2, r2, #5
 8005922:	431a      	orrs	r2, r3
 8005924:	8242      	strh	r2, [r0, #18]
 8005926:	e00c      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005928:	4ab4      	ldr	r2, [pc, #720]	; (8005bfc <.text_25>)
 800592a:	401a      	ands	r2, r3
 800592c:	466b      	mov	r3, sp
 800592e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005930:	1e9b      	subs	r3, r3, #2
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	27e0      	movs	r7, #224	; 0xe0
 8005938:	01ff      	lsls	r7, r7, #7
 800593a:	401f      	ands	r7, r3
 800593c:	4317      	orrs	r7, r2
 800593e:	8247      	strh	r7, [r0, #18]
 8005940:	8466      	strh	r6, [r4, #34]	; 0x22
 8005942:	aa08      	add	r2, sp, #32
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	2a0d      	cmp	r2, #13
 8005948:	d10a      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 800594a:	8a40      	ldrh	r0, [r0, #18]
 800594c:	22f0      	movs	r2, #240	; 0xf0
 800594e:	0212      	lsls	r2, r2, #8
 8005950:	4002      	ands	r2, r0
 8005952:	d105      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 8005954:	72ce      	strb	r6, [r1, #11]
 8005956:	220f      	movs	r2, #15
 8005958:	2103      	movs	r1, #3
 800595a:	1da0      	adds	r0, r4, #6
 800595c:	f01c ff48 	bl	80227f0 <__aeabi_memset>
 8005960:	2007      	movs	r0, #7
 8005962:	e117      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005964:	4669      	mov	r1, sp
 8005966:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 8005968:	9903      	ldr	r1, [sp, #12]
 800596a:	1841      	adds	r1, r0, r1
 800596c:	4a5d      	ldr	r2, [pc, #372]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800596e:	466b      	mov	r3, sp
 8005970:	7f1b      	ldrb	r3, [r3, #28]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	58d2      	ldr	r2, [r2, r3]
 8005976:	466b      	mov	r3, sp
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	8a52      	ldrh	r2, [r2, #18]
 8005980:	0bd3      	lsrs	r3, r2, #15
 8005982:	d074      	beq.n	8005a6e <USBPD_PRL_SendMessage+0x2c2>
 8005984:	8b83      	ldrh	r3, [r0, #28]
 8005986:	0a9b      	lsrs	r3, r3, #10
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d465      	bmi.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 800598c:	4b55      	ldr	r3, [pc, #340]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800598e:	466f      	mov	r7, sp
 8005990:	7f3f      	ldrb	r7, [r7, #28]
 8005992:	00bf      	lsls	r7, r7, #2
 8005994:	59db      	ldr	r3, [r3, r7]
 8005996:	8b9b      	ldrh	r3, [r3, #28]
 8005998:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 800599a:	2f1b      	cmp	r7, #27
 800599c:	d30a      	bcc.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 800599e:	0bdf      	lsrs	r7, r3, #15
 80059a0:	d008      	beq.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 80059a2:	23e0      	movs	r3, #224	; 0xe0
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4313      	orrs	r3, r2
 80059a8:	824b      	strh	r3, [r1, #18]
 80059aa:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 80059ac:	391a      	subs	r1, #26
 80059ae:	8441      	strh	r1, [r0, #34]	; 0x22
 80059b0:	241e      	movs	r4, #30
 80059b2:	e051      	b.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 80059b4:	0ada      	lsrs	r2, r3, #11
 80059b6:	0712      	lsls	r2, r2, #28
 80059b8:	d107      	bne.n	80059ca <USBPD_PRL_SendMessage+0x21e>
 80059ba:	22fe      	movs	r2, #254	; 0xfe
 80059bc:	0212      	lsls	r2, r2, #8
 80059be:	401a      	ands	r2, r3
 80059c0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	0ddb      	lsrs	r3, r3, #23
 80059c6:	4313      	orrs	r3, r2
 80059c8:	8383      	strh	r3, [r0, #28]
 80059ca:	8a4b      	ldrh	r3, [r1, #18]
 80059cc:	4a8b      	ldr	r2, [pc, #556]	; (8005bfc <.text_25>)
 80059ce:	401a      	ands	r2, r3
 80059d0:	824a      	strh	r2, [r1, #18]
 80059d2:	8b83      	ldrh	r3, [r0, #28]
 80059d4:	0bdb      	lsrs	r3, r3, #15
 80059d6:	d03c      	beq.n	8005a52 <USBPD_PRL_SendMessage+0x2a6>
 80059d8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059da:	1c9b      	adds	r3, r3, #2
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	24e0      	movs	r4, #224	; 0xe0
 80059e2:	01e4      	lsls	r4, r4, #7
 80059e4:	401c      	ands	r4, r3
 80059e6:	4314      	orrs	r4, r2
 80059e8:	824c      	strh	r4, [r1, #18]
 80059ea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80059ec:	1c80      	adds	r0, r0, #2
 80059ee:	0781      	lsls	r1, r0, #30
 80059f0:	0f89      	lsrs	r1, r1, #30
 80059f2:	d025      	beq.n	8005a40 <USBPD_PRL_SendMessage+0x294>
 80059f4:	2200      	movs	r2, #0
 80059f6:	483b      	ldr	r0, [pc, #236]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80059f8:	9b05      	ldr	r3, [sp, #20]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18c0      	adds	r0, r0, r3
 80059fe:	9000      	str	r0, [sp, #0]
 8005a00:	9802      	ldr	r0, [sp, #8]
 8005a02:	9102      	str	r1, [sp, #8]
 8005a04:	e004      	b.n	8005a10 <USBPD_PRL_SendMessage+0x264>
 8005a06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005a08:	1859      	adds	r1, r3, r1
 8005a0a:	1841      	adds	r1, r0, r1
 8005a0c:	710e      	strb	r6, [r1, #4]
 8005a0e:	1c52      	adds	r2, r2, #1
 8005a10:	9900      	ldr	r1, [sp, #0]
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	b2d1      	uxtb	r1, r2
 8005a16:	2404      	movs	r4, #4
 8005a18:	9f02      	ldr	r7, [sp, #8]
 8005a1a:	1be4      	subs	r4, r4, r7
 8005a1c:	42a1      	cmp	r1, r4
 8005a1e:	d3f2      	bcc.n	8005a06 <USBPD_PRL_SendMessage+0x25a>
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	0018      	movs	r0, r3
 8005a24:	3012      	adds	r0, #18
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	1840      	adds	r0, r0, r1
 8005a2a:	8801      	ldrh	r1, [r0, #0]
 8005a2c:	4a73      	ldr	r2, [pc, #460]	; (8005bfc <.text_25>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	0b09      	lsrs	r1, r1, #12
 8005a32:	1c49      	adds	r1, r1, #1
 8005a34:	0309      	lsls	r1, r1, #12
 8005a36:	23e0      	movs	r3, #224	; 0xe0
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	8003      	strh	r3, [r0, #0]
 8005a40:	9800      	ldr	r0, [sp, #0]
 8005a42:	6800      	ldr	r0, [r0, #0]
 8005a44:	3012      	adds	r0, #18
 8005a46:	9903      	ldr	r1, [sp, #12]
 8005a48:	5a40      	ldrh	r0, [r0, r1]
 8005a4a:	0440      	lsls	r0, r0, #17
 8005a4c:	0f40      	lsrs	r0, r0, #29
 8005a4e:	0084      	lsls	r4, r0, #2
 8005a50:	1ca4      	adds	r4, r4, #2
 8005a52:	9800      	ldr	r0, [sp, #0]
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	8446      	strh	r6, [r0, #34]	; 0x22
 8005a58:	9800      	ldr	r0, [sp, #0]
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	8b80      	ldrh	r0, [r0, #28]
 8005a5e:	9902      	ldr	r1, [sp, #8]
 8005a60:	7088      	strb	r0, [r1, #2]
 8005a62:	9800      	ldr	r0, [sp, #0]
 8005a64:	6800      	ldr	r0, [r0, #0]
 8005a66:	8b80      	ldrh	r0, [r0, #28]
 8005a68:	0a00      	lsrs	r0, r0, #8
 8005a6a:	9902      	ldr	r1, [sp, #8]
 8005a6c:	70c8      	strb	r0, [r1, #3]
 8005a6e:	9800      	ldr	r0, [sp, #0]
 8005a70:	6802      	ldr	r2, [r0, #0]
 8005a72:	0010      	movs	r0, r2
 8005a74:	3012      	adds	r0, #18
 8005a76:	9903      	ldr	r1, [sp, #12]
 8005a78:	1840      	adds	r0, r0, r1
 8005a7a:	8803      	ldrh	r3, [r0, #0]
 8005a7c:	498c      	ldr	r1, [pc, #560]	; (8005cb0 <.text_30>)
 8005a7e:	4019      	ands	r1, r3
 8005a80:	320b      	adds	r2, #11
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	5cd2      	ldrb	r2, [r2, r3]
 8005a86:	0253      	lsls	r3, r2, #9
 8005a88:	22e0      	movs	r2, #224	; 0xe0
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	8002      	strh	r2, [r0, #0]
 8005a92:	9802      	ldr	r0, [sp, #8]
 8005a94:	7002      	strb	r2, [r0, #0]
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	3012      	adds	r0, #18
 8005a9c:	9903      	ldr	r1, [sp, #12]
 8005a9e:	5a40      	ldrh	r0, [r0, r1]
 8005aa0:	0a00      	lsrs	r0, r0, #8
 8005aa2:	9902      	ldr	r1, [sp, #8]
 8005aa4:	7048      	strb	r0, [r1, #1]
 8005aa6:	9800      	ldr	r0, [sp, #0]
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	81c4      	strh	r4, [r0, #14]
 8005aac:	210a      	movs	r1, #10
 8005aae:	7141      	strb	r1, [r0, #5]
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	7401      	strb	r1, [r0, #16]
 8005ab4:	b2a0      	uxth	r0, r4
 8005ab6:	9000      	str	r0, [sp, #0]
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	4668      	mov	r0, sp
 8005abc:	7902      	ldrb	r2, [r0, #4]
 8005abe:	7f01      	ldrb	r1, [r0, #28]
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	4e7c      	ldr	r6, [pc, #496]	; (8005cb4 <.text_31>)
 8005ac4:	6836      	ldr	r6, [r6, #0]
 8005ac6:	47b0      	blx	r6
 8005ac8:	497b      	ldr	r1, [pc, #492]	; (8005cb8 <.text_32>)
 8005aca:	4668      	mov	r0, sp
 8005acc:	7940      	ldrb	r0, [r0, #5]
 8005ace:	f00e fee3 	bl	8014898 <USBPD_TIM_Start>
 8005ad2:	b2a3      	uxth	r3, r4
 8005ad4:	9a02      	ldr	r2, [sp, #8]
 8005ad6:	4668      	mov	r0, sp
 8005ad8:	7901      	ldrb	r1, [r0, #4]
 8005ada:	7f00      	ldrb	r0, [r0, #28]
 8005adc:	f00d fad5 	bl	801308a <USBPD_PHY_SendMessage>
 8005ae0:	e087      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005ae2:	bf00      	nop
 8005ae4:	20000300 	.word	0x20000300
 8005ae8:	f3ef 8410 	mrs	r4, PRIMASK
 8005aec:	b672      	cpsid	i
 8005aee:	9800      	ldr	r0, [sp, #0]
 8005af0:	6800      	ldr	r0, [r0, #0]
 8005af2:	7940      	ldrb	r0, [r0, #5]
 8005af4:	280a      	cmp	r0, #10
 8005af6:	d109      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005af8:	4668      	mov	r0, sp
 8005afa:	7940      	ldrb	r0, [r0, #5]
 8005afc:	f00e ff3a 	bl	8014974 <USBPD_TIM_IsExpired>
 8005b00:	2801      	cmp	r0, #1
 8005b02:	d103      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005b04:	200d      	movs	r0, #13
 8005b06:	9900      	ldr	r1, [sp, #0]
 8005b08:	6809      	ldr	r1, [r1, #0]
 8005b0a:	7148      	strb	r0, [r1, #5]
 8005b0c:	f384 8810 	msr	PRIMASK, r4
 8005b10:	e06f      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b12:	7aca      	ldrb	r2, [r1, #11]
 8005b14:	8b67      	ldrh	r7, [r4, #26]
 8005b16:	053f      	lsls	r7, r7, #20
 8005b18:	0f7f      	lsrs	r7, r7, #29
 8005b1a:	42ba      	cmp	r2, r7
 8005b1c:	d10c      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b1e:	7ea3      	ldrb	r3, [r4, #26]
 8005b20:	06db      	lsls	r3, r3, #27
 8005b22:	0edb      	lsrs	r3, r3, #27
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b28:	1c52      	adds	r2, r2, #1
 8005b2a:	0750      	lsls	r0, r2, #29
 8005b2c:	0f40      	lsrs	r0, r0, #29
 8005b2e:	72c8      	strb	r0, [r1, #11]
 8005b30:	9800      	ldr	r0, [sp, #0]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	7146      	strb	r6, [r0, #5]
 8005b36:	e011      	b.n	8005b5c <USBPD_PRL_SendMessage+0x3b0>
 8005b38:	210d      	movs	r1, #13
 8005b3a:	7141      	strb	r1, [r0, #5]
 8005b3c:	e059      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b3e:	7ac8      	ldrb	r0, [r1, #11]
 8005b40:	1c40      	adds	r0, r0, #1
 8005b42:	0740      	lsls	r0, r0, #29
 8005b44:	0f40      	lsrs	r0, r0, #29
 8005b46:	72c8      	strb	r0, [r1, #11]
 8005b48:	9800      	ldr	r0, [sp, #0]
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	7146      	strb	r6, [r0, #5]
 8005b4e:	8ba1      	ldrh	r1, [r4, #28]
 8005b50:	485a      	ldr	r0, [pc, #360]	; (8005cbc <.text_33>)
 8005b52:	4008      	ands	r0, r1
 8005b54:	83a0      	strh	r0, [r4, #28]
 8005b56:	495a      	ldr	r1, [pc, #360]	; (8005cc0 <.text_34>)
 8005b58:	4001      	ands	r1, r0
 8005b5a:	83a1      	strh	r1, [r4, #28]
 8005b5c:	2505      	movs	r5, #5
 8005b5e:	e048      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b60:	78a0      	ldrb	r0, [r4, #2]
 8005b62:	1c40      	adds	r0, r0, #1
 8005b64:	70a0      	strb	r0, [r4, #2]
 8005b66:	9a03      	ldr	r2, [sp, #12]
 8005b68:	18a2      	adds	r2, r4, r2
 8005b6a:	8a52      	ldrh	r2, [r2, #18]
 8005b6c:	0613      	lsls	r3, r2, #24
 8005b6e:	0f9b      	lsrs	r3, r3, #30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <USBPD_PRL_SendMessage+0x3cc>
 8005b74:	2303      	movs	r3, #3
 8005b76:	e000      	b.n	8005b7a <USBPD_PRL_SendMessage+0x3ce>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	0bd2      	lsrs	r2, r2, #15
 8005b7c:	d006      	beq.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b7e:	8ba2      	ldrh	r2, [r4, #28]
 8005b80:	0bd4      	lsrs	r4, r2, #15
 8005b82:	d103      	bne.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b84:	05d2      	lsls	r2, r2, #23
 8005b86:	0dd2      	lsrs	r2, r2, #23
 8005b88:	2a1b      	cmp	r2, #27
 8005b8a:	d207      	bcs.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b8c:	b2c0      	uxtb	r0, r0
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d304      	bcc.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b92:	2010      	movs	r0, #16
 8005b94:	9900      	ldr	r1, [sp, #0]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	7148      	strb	r0, [r1, #5]
 8005b9a:	e02a      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b9c:	9800      	ldr	r0, [sp, #0]
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	7146      	strb	r6, [r0, #5]
 8005ba2:	2507      	movs	r5, #7
 8005ba4:	7ac8      	ldrb	r0, [r1, #11]
 8005ba6:	1c40      	adds	r0, r0, #1
 8005ba8:	2207      	movs	r2, #7
 8005baa:	4002      	ands	r2, r0
 8005bac:	72ca      	strb	r2, [r1, #11]
 8005bae:	e020      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	7141      	strb	r1, [r0, #5]
 8005bb4:	2002      	movs	r0, #2
 8005bb6:	7420      	strb	r0, [r4, #16]
 8005bb8:	493f      	ldr	r1, [pc, #252]	; (8005cb8 <.text_32>)
 8005bba:	4668      	mov	r0, sp
 8005bbc:	7940      	ldrb	r0, [r0, #5]
 8005bbe:	f00e fe6b 	bl	8014898 <USBPD_TIM_Start>
 8005bc2:	89e3      	ldrh	r3, [r4, #14]
 8005bc4:	9a02      	ldr	r2, [sp, #8]
 8005bc6:	4668      	mov	r0, sp
 8005bc8:	7901      	ldrb	r1, [r0, #4]
 8005bca:	7f00      	ldrb	r0, [r0, #28]
 8005bcc:	f00d fa5d 	bl	801308a <USBPD_PHY_SendMessage>
 8005bd0:	4668      	mov	r0, sp
 8005bd2:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8005bd4:	9000      	str	r0, [sp, #0]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	4668      	mov	r0, sp
 8005bda:	7902      	ldrb	r2, [r0, #4]
 8005bdc:	7f01      	ldrb	r1, [r0, #28]
 8005bde:	2002      	movs	r0, #2
 8005be0:	4c34      	ldr	r4, [pc, #208]	; (8005cb4 <.text_31>)
 8005be2:	6824      	ldr	r4, [r4, #0]
 8005be4:	47a0      	blx	r4
 8005be6:	e004      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005be8:	7146      	strb	r6, [r0, #5]
 8005bea:	2506      	movs	r5, #6
 8005bec:	e001      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bee:	7146      	strb	r6, [r0, #5]
 8005bf0:	2510      	movs	r5, #16
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	b009      	add	sp, #36	; 0x24
 8005bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bf8 <.text_24>:
 8005bf8:	0000ffe0 	.word	0x0000ffe0

08005bfc <.text_25>:
 8005bfc:	00008fff 	.word	0x00008fff

08005c00 <USBPD_PRL_ResetRequestProcess>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	0005      	movs	r5, r0
 8005c04:	000e      	movs	r6, r1
 8005c06:	482f      	ldr	r0, [pc, #188]	; (8005cc4 <.text_35>)
 8005c08:	00a9      	lsls	r1, r5, #2
 8005c0a:	1840      	adds	r0, r0, r1
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	6804      	ldr	r4, [r0, #0]
 8005c10:	2700      	movs	r7, #0
 8005c12:	70e7      	strb	r7, [r4, #3]
 8005c14:	72e7      	strb	r7, [r4, #11]
 8005c16:	7327      	strb	r7, [r4, #12]
 8005c18:	7367      	strb	r7, [r4, #13]
 8005c1a:	220f      	movs	r2, #15
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	1da0      	adds	r0, r4, #6
 8005c20:	f01c fde6 	bl	80227f0 <__aeabi_memset>
 8005c24:	9800      	ldr	r0, [sp, #0]
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	7147      	strb	r7, [r0, #5]
 8005c2a:	9700      	str	r7, [sp, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	0032      	movs	r2, r6
 8005c30:	0029      	movs	r1, r5
 8005c32:	2002      	movs	r0, #2
 8005c34:	4f1f      	ldr	r7, [pc, #124]	; (8005cb4 <.text_31>)
 8005c36:	683f      	ldr	r7, [r7, #0]
 8005c38:	47b8      	blx	r7
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	f000 f849 	bl	8005cd2 <PRL_DisableRX>
 8005c40:	0031      	movs	r1, r6
 8005c42:	0028      	movs	r0, r5
 8005c44:	f00d fa0b 	bl	801305e <USBPD_PHY_ResetRequest>
 8005c48:	2005      	movs	r0, #5
 8005c4a:	7120      	strb	r0, [r4, #4]
 8005c4c:	78e0      	ldrb	r0, [r4, #3]
 8005c4e:	2801      	cmp	r0, #1
 8005c50:	d002      	beq.n	8005c58 <USBPD_PRL_ResetRequestProcess+0x58>
 8005c52:	7920      	ldrb	r0, [r4, #4]
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1f9      	bne.n	8005c4c <USBPD_PRL_ResetRequestProcess+0x4c>
 8005c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005c5a <USBDPD_PRL_BistCarrierEyeMode>:
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	2905      	cmp	r1, #5
 8005c5e:	d102      	bne.n	8005c66 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005c60:	f00d fa32 	bl	80130c8 <USBPD_PHY_Send_BIST_Pattern>
 8005c64:	bd02      	pop	{r1, pc}
 8005c66:	2010      	movs	r0, #16
 8005c68:	bd02      	pop	{r1, pc}

08005c6a <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	2905      	cmp	r1, #5
 8005c6e:	d103      	bne.n	8005c78 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005c70:	2107      	movs	r1, #7
 8005c72:	f00d fa39 	bl	80130e8 <USBPD_PHY_ExitTransmit>
 8005c76:	bd02      	pop	{r1, pc}
 8005c78:	2010      	movs	r0, #16
 8005c7a:	bd02      	pop	{r1, pc}

08005c7c <USBPD_PRL_Reset>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	0004      	movs	r4, r0
 8005c80:	4810      	ldr	r0, [pc, #64]	; (8005cc4 <.text_35>)
 8005c82:	00a1      	lsls	r1, r4, #2
 8005c84:	5845      	ldr	r5, [r0, r1]
 8005c86:	2600      	movs	r6, #0
 8005c88:	716e      	strb	r6, [r5, #5]
 8005c8a:	702e      	strb	r6, [r5, #0]
 8005c8c:	712e      	strb	r6, [r5, #4]
 8005c8e:	72ee      	strb	r6, [r5, #11]
 8005c90:	732e      	strb	r6, [r5, #12]
 8005c92:	736e      	strb	r6, [r5, #13]
 8005c94:	220f      	movs	r2, #15
 8005c96:	2103      	movs	r1, #3
 8005c98:	1da8      	adds	r0, r5, #6
 8005c9a:	f01c fda9 	bl	80227f0 <__aeabi_memset>
 8005c9e:	2025      	movs	r0, #37	; 0x25
 8005ca0:	542e      	strb	r6, [r5, r0]
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f00d f9d1 	bl	801304a <USBPD_PHY_Reset>
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f00d fa88 	bl	80131be <USBPD_PHY_EnableRX>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}

08005cb0 <.text_30>:
 8005cb0:	0000f1ff 	.word	0x0000f1ff

08005cb4 <.text_31>:
 8005cb4:	20000000 	.word	0x20000000

08005cb8 <.text_32>:
 8005cb8:	00002710 	.word	0x00002710

08005cbc <.text_33>:
 8005cbc:	000087ff 	.word	0x000087ff

08005cc0 <.text_34>:
 8005cc0:	0000fbff 	.word	0x0000fbff

08005cc4 <.text_35>:
 8005cc4:	20000300 	.word	0x20000300

08005cc8 <USBPD_PRL_Stop>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	f00d fa87 	bl	80131dc <USBPD_PHY_DisableRX>
 8005cce:	bd01      	pop	{r0, pc}

08005cd0 <USBPD_PRL_DeInit>:
 8005cd0:	4770      	bx	lr

08005cd2 <PRL_DisableRX>:
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	f00d fa82 	bl	80131dc <USBPD_PHY_DisableRX>
 8005cd8:	bd01      	pop	{r0, pc}
	...

08005cdc <PRL_Received>:
 8005cdc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	a809      	add	r0, sp, #36	; 0x24
 8005ce2:	7805      	ldrb	r5, [r0, #0]
 8005ce4:	48d0      	ldr	r0, [pc, #832]	; (8006028 <PRL_Received+0x34c>)
 8005ce6:	00a9      	lsls	r1, r5, #2
 8005ce8:	1846      	adds	r6, r0, r1
 8005cea:	6834      	ldr	r4, [r6, #0]
 8005cec:	4628      	mov	r0, r5
 8005cee:	f00d f9a1 	bl	8013034 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005cf2:	a909      	add	r1, sp, #36	; 0x24
 8005cf4:	7809      	ldrb	r1, [r1, #0]
 8005cf6:	0049      	lsls	r1, r1, #1
 8005cf8:	466a      	mov	r2, sp
 8005cfa:	7011      	strb	r1, [r2, #0]
 8005cfc:	0001      	movs	r1, r0
 8005cfe:	4668      	mov	r0, sp
 8005d00:	7800      	ldrb	r0, [r0, #0]
 8005d02:	f00e fdc9 	bl	8014898 <USBPD_TIM_Start>
 8005d06:	2030      	movs	r0, #48	; 0x30
 8005d08:	5c20      	ldrb	r0, [r4, r0]
 8005d0a:	2131      	movs	r1, #49	; 0x31
 8005d0c:	5c61      	ldrb	r1, [r4, r1]
 8005d0e:	0209      	lsls	r1, r1, #8
 8005d10:	1840      	adds	r0, r0, r1
 8005d12:	4669      	mov	r1, sp
 8005d14:	8088      	strh	r0, [r1, #4]
 8005d16:	4668      	mov	r0, sp
 8005d18:	8880      	ldrh	r0, [r0, #4]
 8005d1a:	0440      	lsls	r0, r0, #17
 8005d1c:	0f40      	lsrs	r0, r0, #29
 8005d1e:	0080      	lsls	r0, r0, #2
 8005d20:	9005      	str	r0, [sp, #20]
 8005d22:	1c80      	adds	r0, r0, #2
 8005d24:	9007      	str	r0, [sp, #28]
 8005d26:	48c1      	ldr	r0, [pc, #772]	; (800602c <.text_40>)
 8005d28:	8889      	ldrh	r1, [r1, #4]
 8005d2a:	4001      	ands	r1, r0
 8005d2c:	2901      	cmp	r1, #1
 8005d2e:	d116      	bne.n	8005d5e <PRL_Received+0x82>
 8005d30:	0068      	lsls	r0, r5, #1
 8005d32:	1c40      	adds	r0, r0, #1
 8005d34:	b2c0      	uxtb	r0, r0
 8005d36:	f00e fe1d 	bl	8014974 <USBPD_TIM_IsExpired>
 8005d3a:	2801      	cmp	r0, #1
 8005d3c:	d04c      	beq.n	8005dd8 <PRL_Received+0xfc>
 8005d3e:	200b      	movs	r0, #11
 8005d40:	6831      	ldr	r1, [r6, #0]
 8005d42:	7148      	strb	r0, [r1, #5]
 8005d44:	4668      	mov	r0, sp
 8005d46:	8880      	ldrh	r0, [r0, #4]
 8005d48:	8360      	strh	r0, [r4, #26]
 8005d4a:	9807      	ldr	r0, [sp, #28]
 8005d4c:	9000      	str	r0, [sp, #0]
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3330      	adds	r3, #48	; 0x30
 8005d52:	a80a      	add	r0, sp, #40	; 0x28
 8005d54:	7802      	ldrb	r2, [r0, #0]
 8005d56:	a809      	add	r0, sp, #36	; 0x24
 8005d58:	7801      	ldrb	r1, [r0, #0]
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e15f      	b.n	800601e <PRL_Received+0x342>
 8005d5e:	49b4      	ldr	r1, [pc, #720]	; (8006030 <.text_41>)
 8005d60:	880f      	ldrh	r7, [r1, #0]
 8005d62:	2601      	movs	r6, #1
 8005d64:	72a6      	strb	r6, [r4, #10]
 8005d66:	a90a      	add	r1, sp, #40	; 0x28
 8005d68:	7809      	ldrb	r1, [r1, #0]
 8005d6a:	1861      	adds	r1, r4, r1
 8005d6c:	9104      	str	r1, [sp, #16]
 8005d6e:	2500      	movs	r5, #0
 8005d70:	4669      	mov	r1, sp
 8005d72:	8889      	ldrh	r1, [r1, #4]
 8005d74:	4008      	ands	r0, r1
 8005d76:	280d      	cmp	r0, #13
 8005d78:	d106      	bne.n	8005d88 <PRL_Received+0xac>
 8005d7a:	9904      	ldr	r1, [sp, #16]
 8005d7c:	72cd      	strb	r5, [r1, #11]
 8005d7e:	220f      	movs	r2, #15
 8005d80:	2103      	movs	r1, #3
 8005d82:	1da0      	adds	r0, r4, #6
 8005d84:	f01c fd34 	bl	80227f0 <__aeabi_memset>
 8005d88:	a80a      	add	r0, sp, #40	; 0x28
 8005d8a:	7800      	ldrb	r0, [r0, #0]
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d10d      	bne.n	8005dac <PRL_Received+0xd0>
 8005d90:	8a61      	ldrh	r1, [r4, #18]
 8005d92:	094a      	lsrs	r2, r1, #5
 8005d94:	2001      	movs	r0, #1
 8005d96:	4010      	ands	r0, r2
 8005d98:	0a0a      	lsrs	r2, r1, #8
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4011      	ands	r1, r2
 8005d9e:	4abf      	ldr	r2, [pc, #764]	; (800609c <.text_44>)
 8005da0:	403a      	ands	r2, r7
 8005da2:	0143      	lsls	r3, r0, #5
 8005da4:	4313      	orrs	r3, r2
 8005da6:	0208      	lsls	r0, r1, #8
 8005da8:	4318      	orrs	r0, r3
 8005daa:	e001      	b.n	8005db0 <PRL_Received+0xd4>
 8005dac:	48bc      	ldr	r0, [pc, #752]	; (80060a0 <.text_45>)
 8005dae:	4038      	ands	r0, r7
 8005db0:	49bc      	ldr	r1, [pc, #752]	; (80060a4 <.text_46>)
 8005db2:	4001      	ands	r1, r0
 8005db4:	4668      	mov	r0, sp
 8005db6:	8880      	ldrh	r0, [r0, #4]
 8005db8:	22e0      	movs	r2, #224	; 0xe0
 8005dba:	0112      	lsls	r2, r2, #4
 8005dbc:	4002      	ands	r2, r0
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	2040      	movs	r0, #64	; 0x40
 8005dc2:	4310      	orrs	r0, r2
 8005dc4:	7620      	strb	r0, [r4, #24]
 8005dc6:	0a00      	lsrs	r0, r0, #8
 8005dc8:	7660      	strb	r0, [r4, #25]
 8005dca:	a80a      	add	r0, sp, #40	; 0x28
 8005dcc:	7801      	ldrb	r1, [r0, #0]
 8005dce:	a809      	add	r0, sp, #36	; 0x24
 8005dd0:	7800      	ldrb	r0, [r0, #0]
 8005dd2:	f7fa ff49 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d100      	bne.n	8005ddc <PRL_Received+0x100>
 8005dda:	e123      	b.n	8006024 <PRL_Received+0x348>
 8005ddc:	7426      	strb	r6, [r4, #16]
 8005dde:	4668      	mov	r0, sp
 8005de0:	7800      	ldrb	r0, [r0, #0]
 8005de2:	f00e fdc7 	bl	8014974 <USBPD_TIM_IsExpired>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f9      	beq.n	8005dde <PRL_Received+0x102>
 8005dea:	2302      	movs	r3, #2
 8005dec:	0022      	movs	r2, r4
 8005dee:	3218      	adds	r2, #24
 8005df0:	a80a      	add	r0, sp, #40	; 0x28
 8005df2:	7801      	ldrb	r1, [r0, #0]
 8005df4:	a809      	add	r0, sp, #36	; 0x24
 8005df6:	7800      	ldrb	r0, [r0, #0]
 8005df8:	f00d f947 	bl	801308a <USBPD_PHY_SendMessage>
 8005dfc:	9006      	str	r0, [sp, #24]
 8005dfe:	a80a      	add	r0, sp, #40	; 0x28
 8005e00:	7800      	ldrb	r0, [r0, #0]
 8005e02:	7260      	strb	r0, [r4, #9]
 8005e04:	0021      	movs	r1, r4
 8005e06:	3130      	adds	r1, #48	; 0x30
 8005e08:	a809      	add	r0, sp, #36	; 0x24
 8005e0a:	7800      	ldrb	r0, [r0, #0]
 8005e0c:	f7fa ff60 	bl	8000cd0 <PE_PRL_PostReceiveEventCopy>
 8005e10:	2033      	movs	r0, #51	; 0x33
 8005e12:	5c20      	ldrb	r0, [r4, r0]
 8005e14:	2132      	movs	r1, #50	; 0x32
 8005e16:	5c61      	ldrb	r1, [r4, r1]
 8005e18:	0203      	lsls	r3, r0, #8
 8005e1a:	18ca      	adds	r2, r1, r3
 8005e1c:	466b      	mov	r3, sp
 8005e1e:	80da      	strh	r2, [r3, #6]
 8005e20:	466a      	mov	r2, sp
 8005e22:	8892      	ldrh	r2, [r2, #4]
 8005e24:	0452      	lsls	r2, r2, #17
 8005e26:	0f52      	lsrs	r2, r2, #29
 8005e28:	81da      	strh	r2, [r3, #14]
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	88d2      	ldrh	r2, [r2, #6]
 8005e2e:	05d2      	lsls	r2, r2, #23
 8005e30:	0dd2      	lsrs	r2, r2, #23
 8005e32:	811a      	strh	r2, [r3, #8]
 8005e34:	466a      	mov	r2, sp
 8005e36:	88d2      	ldrh	r2, [r2, #6]
 8005e38:	0bd2      	lsrs	r2, r2, #15
 8005e3a:	819a      	strh	r2, [r3, #12]
 8005e3c:	466a      	mov	r2, sp
 8005e3e:	8892      	ldrh	r2, [r2, #4]
 8005e40:	0bd2      	lsrs	r2, r2, #15
 8005e42:	815a      	strh	r2, [r3, #10]
 8005e44:	d007      	beq.n	8005e56 <PRL_Received+0x17a>
 8005e46:	466a      	mov	r2, sp
 8005e48:	8992      	ldrh	r2, [r2, #12]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d103      	bne.n	8005e56 <PRL_Received+0x17a>
 8005e4e:	4668      	mov	r0, sp
 8005e50:	8900      	ldrh	r0, [r0, #8]
 8005e52:	1d00      	adds	r0, r0, #4
 8005e54:	e01b      	b.n	8005e8e <PRL_Received+0x1b2>
 8005e56:	7822      	ldrb	r2, [r4, #0]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d117      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e5c:	466a      	mov	r2, sp
 8005e5e:	89d2      	ldrh	r2, [r2, #14]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d013      	beq.n	8005e8c <PRL_Received+0x1b0>
 8005e64:	466a      	mov	r2, sp
 8005e66:	8892      	ldrh	r2, [r2, #4]
 8005e68:	06d2      	lsls	r2, r2, #27
 8005e6a:	0ed2      	lsrs	r2, r2, #27
 8005e6c:	2a03      	cmp	r2, #3
 8005e6e:	d10d      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e70:	0200      	lsls	r0, r0, #8
 8005e72:	1808      	adds	r0, r1, r0
 8005e74:	2134      	movs	r1, #52	; 0x34
 8005e76:	5c61      	ldrb	r1, [r4, r1]
 8005e78:	0409      	lsls	r1, r1, #16
 8005e7a:	1840      	adds	r0, r0, r1
 8005e7c:	2135      	movs	r1, #53	; 0x35
 8005e7e:	5c61      	ldrb	r1, [r4, r1]
 8005e80:	0609      	lsls	r1, r1, #24
 8005e82:	1840      	adds	r0, r0, r1
 8005e84:	0f00      	lsrs	r0, r0, #28
 8005e86:	2808      	cmp	r0, #8
 8005e88:	d100      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e8a:	7026      	strb	r6, [r4, #0]
 8005e8c:	9807      	ldr	r0, [sp, #28]
 8005e8e:	9000      	str	r0, [sp, #0]
 8005e90:	0023      	movs	r3, r4
 8005e92:	3330      	adds	r3, #48	; 0x30
 8005e94:	a80a      	add	r0, sp, #40	; 0x28
 8005e96:	7802      	ldrb	r2, [r0, #0]
 8005e98:	a809      	add	r0, sp, #36	; 0x24
 8005e9a:	7801      	ldrb	r1, [r0, #0]
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	4fc1      	ldr	r7, [pc, #772]	; (80061a4 <.text_51>)
 8005ea0:	683f      	ldr	r7, [r7, #0]
 8005ea2:	47b8      	blx	r7
 8005ea4:	9806      	ldr	r0, [sp, #24]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d10b      	bne.n	8005ec2 <PRL_Received+0x1e6>
 8005eaa:	2002      	movs	r0, #2
 8005eac:	9000      	str	r0, [sp, #0]
 8005eae:	0023      	movs	r3, r4
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	a80a      	add	r0, sp, #40	; 0x28
 8005eb4:	7802      	ldrb	r2, [r0, #0]
 8005eb6:	a809      	add	r0, sp, #36	; 0x24
 8005eb8:	7801      	ldrb	r1, [r0, #0]
 8005eba:	2002      	movs	r0, #2
 8005ebc:	4fb9      	ldr	r7, [pc, #740]	; (80061a4 <.text_51>)
 8005ebe:	683f      	ldr	r7, [r7, #0]
 8005ec0:	47b8      	blx	r7
 8005ec2:	4668      	mov	r0, sp
 8005ec4:	8880      	ldrh	r0, [r0, #4]
 8005ec6:	0a40      	lsrs	r0, r0, #9
 8005ec8:	2107      	movs	r1, #7
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	7992      	ldrb	r2, [r2, #6]
 8005ece:	2307      	movs	r3, #7
 8005ed0:	4003      	ands	r3, r0
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d103      	bne.n	8005ede <PRL_Received+0x202>
 8005ed6:	9a06      	ldr	r2, [sp, #24]
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	d100      	bne.n	8005ede <PRL_Received+0x202>
 8005edc:	e08f      	b.n	8005ffe <PRL_Received+0x322>
 8005ede:	4001      	ands	r1, r0
 8005ee0:	9804      	ldr	r0, [sp, #16]
 8005ee2:	7181      	strb	r1, [r0, #6]
 8005ee4:	4668      	mov	r0, sp
 8005ee6:	8880      	ldrh	r0, [r0, #4]
 8005ee8:	8420      	strh	r0, [r4, #32]
 8005eea:	4668      	mov	r0, sp
 8005eec:	8940      	ldrh	r0, [r0, #10]
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d043      	beq.n	8005f7a <PRL_Received+0x29e>
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	8980      	ldrh	r0, [r0, #12]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d03f      	beq.n	8005f7a <PRL_Received+0x29e>
 8005efa:	4668      	mov	r0, sp
 8005efc:	88c0      	ldrh	r0, [r0, #6]
 8005efe:	83e0      	strh	r0, [r4, #30]
 8005f00:	4668      	mov	r0, sp
 8005f02:	88c0      	ldrh	r0, [r0, #6]
 8005f04:	0440      	lsls	r0, r0, #17
 8005f06:	0f01      	lsrs	r1, r0, #28
 8005f08:	201a      	movs	r0, #26
 8005f0a:	4348      	muls	r0, r1
 8005f0c:	9905      	ldr	r1, [sp, #20]
 8005f0e:	1e89      	subs	r1, r1, #2
 8005f10:	466a      	mov	r2, sp
 8005f12:	88d2      	ldrh	r2, [r2, #6]
 8005f14:	23f8      	movs	r3, #248	; 0xf8
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d12f      	bne.n	8005f7c <PRL_Received+0x2a0>
 8005f1c:	466a      	mov	r2, sp
 8005f1e:	88d2      	ldrh	r2, [r2, #6]
 8005f20:	05d2      	lsls	r2, r2, #23
 8005f22:	0dd2      	lsrs	r2, r2, #23
 8005f24:	466b      	mov	r3, sp
 8005f26:	89db      	ldrh	r3, [r3, #14]
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d30a      	bcc.n	8005f42 <PRL_Received+0x266>
 8005f2c:	2a1a      	cmp	r2, #26
 8005f2e:	d811      	bhi.n	8005f54 <PRL_Received+0x278>
 8005f30:	e007      	b.n	8005f42 <PRL_Received+0x266>
 8005f32:	0023      	movs	r3, r4
 8005f34:	3334      	adds	r3, #52	; 0x34
 8005f36:	5d5b      	ldrb	r3, [r3, r5]
 8005f38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f3a:	182f      	adds	r7, r5, r0
 8005f3c:	55f3      	strb	r3, [r6, r7]
 8005f3e:	1c6d      	adds	r5, r5, #1
 8005f40:	b2ad      	uxth	r5, r5
 8005f42:	428d      	cmp	r5, r1
 8005f44:	d3f5      	bcc.n	8005f32 <PRL_Received+0x256>
 8005f46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005f48:	4291      	cmp	r1, r2
 8005f4a:	d301      	bcc.n	8005f50 <PRL_Received+0x274>
 8005f4c:	4669      	mov	r1, sp
 8005f4e:	8909      	ldrh	r1, [r1, #8]
 8005f50:	8001      	strh	r1, [r0, #0]
 8005f52:	e00c      	b.n	8005f6e <PRL_Received+0x292>
 8005f54:	2025      	movs	r0, #37	; 0x25
 8005f56:	5426      	strb	r6, [r4, r0]
 8005f58:	0020      	movs	r0, r4
 8005f5a:	3034      	adds	r0, #52	; 0x34
 8005f5c:	5d40      	ldrb	r0, [r0, r5]
 8005f5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005f60:	5548      	strb	r0, [r1, r5]
 8005f62:	1c6d      	adds	r5, r5, #1
 8005f64:	2d1a      	cmp	r5, #26
 8005f66:	d3f7      	bcc.n	8005f58 <PRL_Received+0x27c>
 8005f68:	201a      	movs	r0, #26
 8005f6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f6c:	8008      	strh	r0, [r1, #0]
 8005f6e:	a80a      	add	r0, sp, #40	; 0x28
 8005f70:	7801      	ldrb	r1, [r0, #0]
 8005f72:	a809      	add	r0, sp, #36	; 0x24
 8005f74:	7800      	ldrb	r0, [r0, #0]
 8005f76:	f7fa fe77 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005f7a:	e053      	b.n	8006024 <PRL_Received+0x348>
 8005f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	1e9b      	subs	r3, r3, #2
 8005f86:	27ff      	movs	r7, #255	; 0xff
 8005f88:	1dbf      	adds	r7, r7, #6
 8005f8a:	321a      	adds	r2, #26
 8005f8c:	42ba      	cmp	r2, r7
 8005f8e:	d21b      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f90:	466a      	mov	r2, sp
 8005f92:	8912      	ldrh	r2, [r2, #8]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d217      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f98:	2225      	movs	r2, #37	; 0x25
 8005f9a:	54a6      	strb	r6, [r4, r2]
 8005f9c:	e007      	b.n	8005fae <PRL_Received+0x2d2>
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	3234      	adds	r2, #52	; 0x34
 8005fa2:	5d52      	ldrb	r2, [r2, r5]
 8005fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fa6:	182e      	adds	r6, r5, r0
 8005fa8:	559a      	strb	r2, [r3, r6]
 8005faa:	1c6d      	adds	r5, r5, #1
 8005fac:	b2ad      	uxth	r5, r5
 8005fae:	428d      	cmp	r5, r1
 8005fb0:	d3f5      	bcc.n	8005f9e <PRL_Received+0x2c2>
 8005fb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005fb4:	8801      	ldrh	r1, [r0, #0]
 8005fb6:	466a      	mov	r2, sp
 8005fb8:	8892      	ldrh	r2, [r2, #4]
 8005fba:	0a92      	lsrs	r2, r2, #10
 8005fbc:	231c      	movs	r3, #28
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	1e9a      	subs	r2, r3, #2
 8005fc2:	1889      	adds	r1, r1, r2
 8005fc4:	8001      	strh	r1, [r0, #0]
 8005fc6:	e02d      	b.n	8006024 <PRL_Received+0x348>
 8005fc8:	42bb      	cmp	r3, r7
 8005fca:	d215      	bcs.n	8005ff8 <PRL_Received+0x31c>
 8005fcc:	466a      	mov	r2, sp
 8005fce:	8912      	ldrh	r2, [r2, #8]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d311      	bcc.n	8005ff8 <PRL_Received+0x31c>
 8005fd4:	2225      	movs	r2, #37	; 0x25
 8005fd6:	54a6      	strb	r6, [r4, r2]
 8005fd8:	e007      	b.n	8005fea <PRL_Received+0x30e>
 8005fda:	0022      	movs	r2, r4
 8005fdc:	3234      	adds	r2, #52	; 0x34
 8005fde:	5d52      	ldrb	r2, [r2, r5]
 8005fe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fe2:	182e      	adds	r6, r5, r0
 8005fe4:	559a      	strb	r2, [r3, r6]
 8005fe6:	1c6d      	adds	r5, r5, #1
 8005fe8:	b2ad      	uxth	r5, r5
 8005fea:	428d      	cmp	r5, r1
 8005fec:	d3f5      	bcc.n	8005fda <PRL_Received+0x2fe>
 8005fee:	4668      	mov	r0, sp
 8005ff0:	8900      	ldrh	r0, [r0, #8]
 8005ff2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ff4:	8008      	strh	r0, [r1, #0]
 8005ff6:	e015      	b.n	8006024 <PRL_Received+0x348>
 8005ff8:	2025      	movs	r0, #37	; 0x25
 8005ffa:	5425      	strb	r5, [r4, r0]
 8005ffc:	e012      	b.n	8006024 <PRL_Received+0x348>
 8005ffe:	20ff      	movs	r0, #255	; 0xff
 8006000:	7260      	strb	r0, [r4, #9]
 8006002:	7425      	strb	r5, [r4, #16]
 8006004:	a809      	add	r0, sp, #36	; 0x24
 8006006:	7800      	ldrb	r0, [r0, #0]
 8006008:	f7fa fe4a 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 800600c:	72a5      	strb	r5, [r4, #10]
 800600e:	2017      	movs	r0, #23
 8006010:	9000      	str	r0, [sp, #0]
 8006012:	bf00      	nop
 8006014:	a367      	add	r3, pc, #412	; (adr r3, 80061b4 <.text_55>)
 8006016:	2200      	movs	r2, #0
 8006018:	a809      	add	r0, sp, #36	; 0x24
 800601a:	7801      	ldrb	r1, [r0, #0]
 800601c:	2006      	movs	r0, #6
 800601e:	4c61      	ldr	r4, [pc, #388]	; (80061a4 <.text_51>)
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	47a0      	blx	r4
 8006024:	b00b      	add	sp, #44	; 0x2c
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006028:	20000300 	.word	0x20000300

0800602c <.text_40>:
 800602c:	0000f01f 	.word	0x0000f01f

08006030 <.text_41>:
 8006030:	08024000 	.word	0x08024000

08006034 <PRL_ResetIndicate>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0004      	movs	r4, r0
 8006038:	000d      	movs	r5, r1
 800603a:	2d05      	cmp	r5, #5
 800603c:	d119      	bne.n	8006072 <PRL_ResetIndicate+0x3e>
 800603e:	485a      	ldr	r0, [pc, #360]	; (80061a8 <.text_52>)
 8006040:	00a1      	lsls	r1, r4, #2
 8006042:	1840      	adds	r0, r0, r1
 8006044:	9000      	str	r0, [sp, #0]
 8006046:	6807      	ldr	r7, [r0, #0]
 8006048:	2600      	movs	r6, #0
 800604a:	2000      	movs	r0, #0
 800604c:	b2c2      	uxtb	r2, r0
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	72d6      	strb	r6, [r2, #11]
 8006052:	1c40      	adds	r0, r0, #1
 8006054:	b2c1      	uxtb	r1, r0
 8006056:	2903      	cmp	r1, #3
 8006058:	d3f8      	bcc.n	800604c <PRL_ResetIndicate+0x18>
 800605a:	220f      	movs	r2, #15
 800605c:	2103      	movs	r1, #3
 800605e:	1db8      	adds	r0, r7, #6
 8006060:	f01c fbc6 	bl	80227f0 <__aeabi_memset>
 8006064:	9900      	ldr	r1, [sp, #0]
 8006066:	6809      	ldr	r1, [r1, #0]
 8006068:	714e      	strb	r6, [r1, #5]
 800606a:	703e      	strb	r6, [r7, #0]
 800606c:	0020      	movs	r0, r4
 800606e:	f7ff fe30 	bl	8005cd2 <PRL_DisableRX>
 8006072:	2000      	movs	r0, #0
 8006074:	9000      	str	r0, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	002a      	movs	r2, r5
 800607a:	0021      	movs	r1, r4
 800607c:	2001      	movs	r0, #1
 800607e:	4e49      	ldr	r6, [pc, #292]	; (80061a4 <.text_51>)
 8006080:	6836      	ldr	r6, [r6, #0]
 8006082:	47b0      	blx	r6
 8006084:	0029      	movs	r1, r5
 8006086:	0020      	movs	r0, r4
 8006088:	f7fa fce6 	bl	8000a58 <PE_PRL_ResetReceived>
 800608c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800608e <PRL_ResetCompleted>:
 800608e:	2101      	movs	r1, #1
 8006090:	4a45      	ldr	r2, [pc, #276]	; (80061a8 <.text_52>)
 8006092:	0080      	lsls	r0, r0, #2
 8006094:	5810      	ldr	r0, [r2, r0]
 8006096:	70c1      	strb	r1, [r0, #3]
 8006098:	4770      	bx	lr
	...

0800609c <.text_44>:
 800609c:	0000fedf 	.word	0x0000fedf

080060a0 <.text_45>:
 80060a0:	0000feff 	.word	0x0000feff

080060a4 <.text_46>:
 80060a4:	0000f13f 	.word	0x0000f13f

080060a8 <PRL_BistCompleted>:
 80060a8:	b580      	push	{r7, lr}
 80060aa:	f7fa fd01 	bl	8000ab0 <PE_PRL_BistCompleted>
 80060ae:	bd01      	pop	{r0, pc}

080060b0 <PRL_TxCompleted>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	0004      	movs	r4, r0
 80060b4:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <.text_52>)
 80060b6:	00a3      	lsls	r3, r4, #2
 80060b8:	58d6      	ldr	r6, [r2, r3]
 80060ba:	2500      	movs	r5, #0
 80060bc:	7c32      	ldrb	r2, [r6, #16]
 80060be:	2a01      	cmp	r2, #1
 80060c0:	d002      	beq.n	80060c8 <PRL_TxCompleted+0x18>
 80060c2:	2a02      	cmp	r2, #2
 80060c4:	d009      	beq.n	80060da <PRL_TxCompleted+0x2a>
 80060c6:	e010      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d102      	bne.n	80060d2 <PRL_TxCompleted+0x22>
 80060cc:	f7fa fe1a 	bl	8000d04 <PE_PRL_PostReceiveEventComplete>
 80060d0:	e001      	b.n	80060d6 <PRL_TxCompleted+0x26>
 80060d2:	f7fa fde5 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 80060d6:	72b5      	strb	r5, [r6, #10]
 80060d8:	e007      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060da:	f00c ff9d 	bl	8013018 <USBPD_PHY_GetRetryTimerValue>
 80060de:	0001      	movs	r1, r0
 80060e0:	0060      	lsls	r0, r4, #1
 80060e2:	1c40      	adds	r0, r0, #1
 80060e4:	b2c0      	uxtb	r0, r0
 80060e6:	f00e fbd7 	bl	8014898 <USBPD_TIM_Start>
 80060ea:	7435      	strb	r5, [r6, #16]
 80060ec:	bd70      	pop	{r4, r5, r6, pc}

080060ee <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4c2d      	ldr	r4, [pc, #180]	; (80061a8 <.text_52>)
 80060f2:	0080      	lsls	r0, r0, #2
 80060f4:	5820      	ldr	r0, [r4, r0]
 80060f6:	2480      	movs	r4, #128	; 0x80
 80060f8:	0224      	lsls	r4, r4, #8
 80060fa:	8b85      	ldrh	r5, [r0, #28]
 80060fc:	4e2b      	ldr	r6, [pc, #172]	; (80061ac <.text_53>)
 80060fe:	402e      	ands	r6, r5
 8006100:	02c9      	lsls	r1, r1, #11
 8006102:	4331      	orrs	r1, r6
 8006104:	25fe      	movs	r5, #254	; 0xfe
 8006106:	022d      	lsls	r5, r5, #8
 8006108:	400d      	ands	r5, r1
 800610a:	05d1      	lsls	r1, r2, #23
 800610c:	0dc9      	lsrs	r1, r1, #23
 800610e:	4329      	orrs	r1, r5
 8006110:	4321      	orrs	r1, r4
 8006112:	8381      	strh	r1, [r0, #28]
 8006114:	8a41      	ldrh	r1, [r0, #18]
 8006116:	430c      	orrs	r4, r1
 8006118:	8244      	strh	r4, [r0, #18]
 800611a:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <.text_54>)
 800611c:	4022      	ands	r2, r4
 800611e:	2120      	movs	r1, #32
 8006120:	5c41      	ldrb	r1, [r0, r1]
 8006122:	06c9      	lsls	r1, r1, #27
 8006124:	0ec9      	lsrs	r1, r1, #27
 8006126:	4311      	orrs	r1, r2
 8006128:	8241      	strh	r1, [r0, #18]
 800612a:	7019      	strb	r1, [r3, #0]
 800612c:	8a41      	ldrh	r1, [r0, #18]
 800612e:	0a09      	lsrs	r1, r1, #8
 8006130:	7059      	strb	r1, [r3, #1]
 8006132:	8b81      	ldrh	r1, [r0, #28]
 8006134:	7099      	strb	r1, [r3, #2]
 8006136:	8b80      	ldrh	r0, [r0, #28]
 8006138:	0a00      	lsrs	r0, r0, #8
 800613a:	70d8      	strb	r0, [r3, #3]
 800613c:	bd70      	pop	{r4, r5, r6, pc}

0800613e <USBPD_PRL_PrepareChunkRequest>:
 800613e:	b510      	push	{r4, lr}
 8006140:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <.text_52>)
 8006142:	0080      	lsls	r0, r0, #2
 8006144:	5810      	ldr	r0, [r2, r0]
 8006146:	8b83      	ldrh	r3, [r0, #28]
 8006148:	2284      	movs	r2, #132	; 0x84
 800614a:	0212      	lsls	r2, r2, #8
 800614c:	431a      	orrs	r2, r3
 800614e:	8382      	strh	r2, [r0, #28]
 8006150:	2386      	movs	r3, #134	; 0x86
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	4013      	ands	r3, r2
 8006156:	8bc2      	ldrh	r2, [r0, #30]
 8006158:	0ad2      	lsrs	r2, r2, #11
 800615a:	1c52      	adds	r2, r2, #1
 800615c:	02d2      	lsls	r2, r2, #11
 800615e:	24f0      	movs	r4, #240	; 0xf0
 8006160:	01e4      	lsls	r4, r4, #7
 8006162:	4014      	ands	r4, r2
 8006164:	431c      	orrs	r4, r3
 8006166:	8384      	strh	r4, [r0, #28]
 8006168:	8a43      	ldrh	r3, [r0, #18]
 800616a:	2280      	movs	r2, #128	; 0x80
 800616c:	0212      	lsls	r2, r2, #8
 800616e:	431a      	orrs	r2, r3
 8006170:	0003      	movs	r3, r0
 8006172:	3312      	adds	r3, #18
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	4c0e      	ldr	r4, [pc, #56]	; (80061b0 <.text_54>)
 8006178:	4014      	ands	r4, r2
 800617a:	2220      	movs	r2, #32
 800617c:	5c82      	ldrb	r2, [r0, r2]
 800617e:	06d2      	lsls	r2, r2, #27
 8006180:	0ed2      	lsrs	r2, r2, #27
 8006182:	4322      	orrs	r2, r4
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	7142      	strb	r2, [r0, #5]
 800618a:	8a43      	ldrh	r3, [r0, #18]
 800618c:	700b      	strb	r3, [r1, #0]
 800618e:	8a43      	ldrh	r3, [r0, #18]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	704b      	strb	r3, [r1, #1]
 8006194:	8b83      	ldrh	r3, [r0, #28]
 8006196:	708b      	strb	r3, [r1, #2]
 8006198:	8b80      	ldrh	r0, [r0, #28]
 800619a:	0a00      	lsrs	r0, r0, #8
 800619c:	70c8      	strb	r0, [r1, #3]
 800619e:	710a      	strb	r2, [r1, #4]
 80061a0:	714a      	strb	r2, [r1, #5]
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <.text_51>:
 80061a4:	20000000 	.word	0x20000000

080061a8 <.text_52>:
 80061a8:	20000300 	.word	0x20000300

080061ac <.text_53>:
 80061ac:	000083ff 	.word	0x000083ff

080061b0 <.text_54>:
 80061b0:	0000ffe0 	.word	0x0000ffe0

080061b4 <.text_55>:
 80061b4:	5f4c5250 	.word	0x5f4c5250
 80061b8:	4e455645 	.word	0x4e455645
 80061bc:	58525f54 	.word	0x58525f54
 80061c0:	5349445f 	.word	0x5349445f
 80061c4:	44524143 	.word	0x44524143
 80061c8:	00004445 	.word	0x00004445

080061cc <strlen>:
 80061cc:	2300      	movs	r3, #0
 80061ce:	5cc2      	ldrb	r2, [r0, r3]
 80061d0:	3301      	adds	r3, #1
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1fb      	bne.n	80061ce <strlen+0x2>
 80061d6:	1e58      	subs	r0, r3, #1
 80061d8:	4770      	bx	lr
	...

080061dc <__gnu_thumb1_case_shi>:
 80061dc:	b403      	push	{r0, r1}
 80061de:	4671      	mov	r1, lr
 80061e0:	0849      	lsrs	r1, r1, #1
 80061e2:	0040      	lsls	r0, r0, #1
 80061e4:	0049      	lsls	r1, r1, #1
 80061e6:	5e09      	ldrsh	r1, [r1, r0]
 80061e8:	0049      	lsls	r1, r1, #1
 80061ea:	448e      	add	lr, r1
 80061ec:	bc03      	pop	{r0, r1}
 80061ee:	4770      	bx	lr

080061f0 <__udivsi3>:
 80061f0:	2200      	movs	r2, #0
 80061f2:	0843      	lsrs	r3, r0, #1
 80061f4:	428b      	cmp	r3, r1
 80061f6:	d374      	bcc.n	80062e2 <__udivsi3+0xf2>
 80061f8:	0903      	lsrs	r3, r0, #4
 80061fa:	428b      	cmp	r3, r1
 80061fc:	d35f      	bcc.n	80062be <__udivsi3+0xce>
 80061fe:	0a03      	lsrs	r3, r0, #8
 8006200:	428b      	cmp	r3, r1
 8006202:	d344      	bcc.n	800628e <__udivsi3+0x9e>
 8006204:	0b03      	lsrs	r3, r0, #12
 8006206:	428b      	cmp	r3, r1
 8006208:	d328      	bcc.n	800625c <__udivsi3+0x6c>
 800620a:	0c03      	lsrs	r3, r0, #16
 800620c:	428b      	cmp	r3, r1
 800620e:	d30d      	bcc.n	800622c <__udivsi3+0x3c>
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	0209      	lsls	r1, r1, #8
 8006214:	ba12      	rev	r2, r2
 8006216:	0c03      	lsrs	r3, r0, #16
 8006218:	428b      	cmp	r3, r1
 800621a:	d302      	bcc.n	8006222 <__udivsi3+0x32>
 800621c:	1212      	asrs	r2, r2, #8
 800621e:	0209      	lsls	r1, r1, #8
 8006220:	d065      	beq.n	80062ee <__udivsi3+0xfe>
 8006222:	0b03      	lsrs	r3, r0, #12
 8006224:	428b      	cmp	r3, r1
 8006226:	d319      	bcc.n	800625c <__udivsi3+0x6c>
 8006228:	e000      	b.n	800622c <__udivsi3+0x3c>
 800622a:	0a09      	lsrs	r1, r1, #8
 800622c:	0bc3      	lsrs	r3, r0, #15
 800622e:	428b      	cmp	r3, r1
 8006230:	d301      	bcc.n	8006236 <__udivsi3+0x46>
 8006232:	03cb      	lsls	r3, r1, #15
 8006234:	1ac0      	subs	r0, r0, r3
 8006236:	4152      	adcs	r2, r2
 8006238:	0b83      	lsrs	r3, r0, #14
 800623a:	428b      	cmp	r3, r1
 800623c:	d301      	bcc.n	8006242 <__udivsi3+0x52>
 800623e:	038b      	lsls	r3, r1, #14
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	4152      	adcs	r2, r2
 8006244:	0b43      	lsrs	r3, r0, #13
 8006246:	428b      	cmp	r3, r1
 8006248:	d301      	bcc.n	800624e <__udivsi3+0x5e>
 800624a:	034b      	lsls	r3, r1, #13
 800624c:	1ac0      	subs	r0, r0, r3
 800624e:	4152      	adcs	r2, r2
 8006250:	0b03      	lsrs	r3, r0, #12
 8006252:	428b      	cmp	r3, r1
 8006254:	d301      	bcc.n	800625a <__udivsi3+0x6a>
 8006256:	030b      	lsls	r3, r1, #12
 8006258:	1ac0      	subs	r0, r0, r3
 800625a:	4152      	adcs	r2, r2
 800625c:	0ac3      	lsrs	r3, r0, #11
 800625e:	428b      	cmp	r3, r1
 8006260:	d301      	bcc.n	8006266 <__udivsi3+0x76>
 8006262:	02cb      	lsls	r3, r1, #11
 8006264:	1ac0      	subs	r0, r0, r3
 8006266:	4152      	adcs	r2, r2
 8006268:	0a83      	lsrs	r3, r0, #10
 800626a:	428b      	cmp	r3, r1
 800626c:	d301      	bcc.n	8006272 <__udivsi3+0x82>
 800626e:	028b      	lsls	r3, r1, #10
 8006270:	1ac0      	subs	r0, r0, r3
 8006272:	4152      	adcs	r2, r2
 8006274:	0a43      	lsrs	r3, r0, #9
 8006276:	428b      	cmp	r3, r1
 8006278:	d301      	bcc.n	800627e <__udivsi3+0x8e>
 800627a:	024b      	lsls	r3, r1, #9
 800627c:	1ac0      	subs	r0, r0, r3
 800627e:	4152      	adcs	r2, r2
 8006280:	0a03      	lsrs	r3, r0, #8
 8006282:	428b      	cmp	r3, r1
 8006284:	d301      	bcc.n	800628a <__udivsi3+0x9a>
 8006286:	020b      	lsls	r3, r1, #8
 8006288:	1ac0      	subs	r0, r0, r3
 800628a:	4152      	adcs	r2, r2
 800628c:	d2cd      	bcs.n	800622a <__udivsi3+0x3a>
 800628e:	09c3      	lsrs	r3, r0, #7
 8006290:	428b      	cmp	r3, r1
 8006292:	d301      	bcc.n	8006298 <__udivsi3+0xa8>
 8006294:	01cb      	lsls	r3, r1, #7
 8006296:	1ac0      	subs	r0, r0, r3
 8006298:	4152      	adcs	r2, r2
 800629a:	0983      	lsrs	r3, r0, #6
 800629c:	428b      	cmp	r3, r1
 800629e:	d301      	bcc.n	80062a4 <__udivsi3+0xb4>
 80062a0:	018b      	lsls	r3, r1, #6
 80062a2:	1ac0      	subs	r0, r0, r3
 80062a4:	4152      	adcs	r2, r2
 80062a6:	0943      	lsrs	r3, r0, #5
 80062a8:	428b      	cmp	r3, r1
 80062aa:	d301      	bcc.n	80062b0 <__udivsi3+0xc0>
 80062ac:	014b      	lsls	r3, r1, #5
 80062ae:	1ac0      	subs	r0, r0, r3
 80062b0:	4152      	adcs	r2, r2
 80062b2:	0903      	lsrs	r3, r0, #4
 80062b4:	428b      	cmp	r3, r1
 80062b6:	d301      	bcc.n	80062bc <__udivsi3+0xcc>
 80062b8:	010b      	lsls	r3, r1, #4
 80062ba:	1ac0      	subs	r0, r0, r3
 80062bc:	4152      	adcs	r2, r2
 80062be:	08c3      	lsrs	r3, r0, #3
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d301      	bcc.n	80062c8 <__udivsi3+0xd8>
 80062c4:	00cb      	lsls	r3, r1, #3
 80062c6:	1ac0      	subs	r0, r0, r3
 80062c8:	4152      	adcs	r2, r2
 80062ca:	0883      	lsrs	r3, r0, #2
 80062cc:	428b      	cmp	r3, r1
 80062ce:	d301      	bcc.n	80062d4 <__udivsi3+0xe4>
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	4152      	adcs	r2, r2
 80062d6:	0843      	lsrs	r3, r0, #1
 80062d8:	428b      	cmp	r3, r1
 80062da:	d301      	bcc.n	80062e0 <__udivsi3+0xf0>
 80062dc:	004b      	lsls	r3, r1, #1
 80062de:	1ac0      	subs	r0, r0, r3
 80062e0:	4152      	adcs	r2, r2
 80062e2:	1a41      	subs	r1, r0, r1
 80062e4:	d200      	bcs.n	80062e8 <__udivsi3+0xf8>
 80062e6:	4601      	mov	r1, r0
 80062e8:	4152      	adcs	r2, r2
 80062ea:	4610      	mov	r0, r2
 80062ec:	4770      	bx	lr
 80062ee:	e7ff      	b.n	80062f0 <__udivsi3+0x100>
 80062f0:	b501      	push	{r0, lr}
 80062f2:	2000      	movs	r0, #0
 80062f4:	f000 f8f0 	bl	80064d8 <__aeabi_idiv0>
 80062f8:	bd02      	pop	{r1, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)

080062fc <__aeabi_uidivmod>:
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d0f7      	beq.n	80062f0 <__udivsi3+0x100>
 8006300:	e776      	b.n	80061f0 <__udivsi3>
 8006302:	4770      	bx	lr

08006304 <__divsi3>:
 8006304:	4603      	mov	r3, r0
 8006306:	430b      	orrs	r3, r1
 8006308:	d47f      	bmi.n	800640a <__divsi3+0x106>
 800630a:	2200      	movs	r2, #0
 800630c:	0843      	lsrs	r3, r0, #1
 800630e:	428b      	cmp	r3, r1
 8006310:	d374      	bcc.n	80063fc <__divsi3+0xf8>
 8006312:	0903      	lsrs	r3, r0, #4
 8006314:	428b      	cmp	r3, r1
 8006316:	d35f      	bcc.n	80063d8 <__divsi3+0xd4>
 8006318:	0a03      	lsrs	r3, r0, #8
 800631a:	428b      	cmp	r3, r1
 800631c:	d344      	bcc.n	80063a8 <__divsi3+0xa4>
 800631e:	0b03      	lsrs	r3, r0, #12
 8006320:	428b      	cmp	r3, r1
 8006322:	d328      	bcc.n	8006376 <__divsi3+0x72>
 8006324:	0c03      	lsrs	r3, r0, #16
 8006326:	428b      	cmp	r3, r1
 8006328:	d30d      	bcc.n	8006346 <__divsi3+0x42>
 800632a:	22ff      	movs	r2, #255	; 0xff
 800632c:	0209      	lsls	r1, r1, #8
 800632e:	ba12      	rev	r2, r2
 8006330:	0c03      	lsrs	r3, r0, #16
 8006332:	428b      	cmp	r3, r1
 8006334:	d302      	bcc.n	800633c <__divsi3+0x38>
 8006336:	1212      	asrs	r2, r2, #8
 8006338:	0209      	lsls	r1, r1, #8
 800633a:	d065      	beq.n	8006408 <__divsi3+0x104>
 800633c:	0b03      	lsrs	r3, r0, #12
 800633e:	428b      	cmp	r3, r1
 8006340:	d319      	bcc.n	8006376 <__divsi3+0x72>
 8006342:	e000      	b.n	8006346 <__divsi3+0x42>
 8006344:	0a09      	lsrs	r1, r1, #8
 8006346:	0bc3      	lsrs	r3, r0, #15
 8006348:	428b      	cmp	r3, r1
 800634a:	d301      	bcc.n	8006350 <__divsi3+0x4c>
 800634c:	03cb      	lsls	r3, r1, #15
 800634e:	1ac0      	subs	r0, r0, r3
 8006350:	4152      	adcs	r2, r2
 8006352:	0b83      	lsrs	r3, r0, #14
 8006354:	428b      	cmp	r3, r1
 8006356:	d301      	bcc.n	800635c <__divsi3+0x58>
 8006358:	038b      	lsls	r3, r1, #14
 800635a:	1ac0      	subs	r0, r0, r3
 800635c:	4152      	adcs	r2, r2
 800635e:	0b43      	lsrs	r3, r0, #13
 8006360:	428b      	cmp	r3, r1
 8006362:	d301      	bcc.n	8006368 <__divsi3+0x64>
 8006364:	034b      	lsls	r3, r1, #13
 8006366:	1ac0      	subs	r0, r0, r3
 8006368:	4152      	adcs	r2, r2
 800636a:	0b03      	lsrs	r3, r0, #12
 800636c:	428b      	cmp	r3, r1
 800636e:	d301      	bcc.n	8006374 <__divsi3+0x70>
 8006370:	030b      	lsls	r3, r1, #12
 8006372:	1ac0      	subs	r0, r0, r3
 8006374:	4152      	adcs	r2, r2
 8006376:	0ac3      	lsrs	r3, r0, #11
 8006378:	428b      	cmp	r3, r1
 800637a:	d301      	bcc.n	8006380 <__divsi3+0x7c>
 800637c:	02cb      	lsls	r3, r1, #11
 800637e:	1ac0      	subs	r0, r0, r3
 8006380:	4152      	adcs	r2, r2
 8006382:	0a83      	lsrs	r3, r0, #10
 8006384:	428b      	cmp	r3, r1
 8006386:	d301      	bcc.n	800638c <__divsi3+0x88>
 8006388:	028b      	lsls	r3, r1, #10
 800638a:	1ac0      	subs	r0, r0, r3
 800638c:	4152      	adcs	r2, r2
 800638e:	0a43      	lsrs	r3, r0, #9
 8006390:	428b      	cmp	r3, r1
 8006392:	d301      	bcc.n	8006398 <__divsi3+0x94>
 8006394:	024b      	lsls	r3, r1, #9
 8006396:	1ac0      	subs	r0, r0, r3
 8006398:	4152      	adcs	r2, r2
 800639a:	0a03      	lsrs	r3, r0, #8
 800639c:	428b      	cmp	r3, r1
 800639e:	d301      	bcc.n	80063a4 <__divsi3+0xa0>
 80063a0:	020b      	lsls	r3, r1, #8
 80063a2:	1ac0      	subs	r0, r0, r3
 80063a4:	4152      	adcs	r2, r2
 80063a6:	d2cd      	bcs.n	8006344 <__divsi3+0x40>
 80063a8:	09c3      	lsrs	r3, r0, #7
 80063aa:	428b      	cmp	r3, r1
 80063ac:	d301      	bcc.n	80063b2 <__divsi3+0xae>
 80063ae:	01cb      	lsls	r3, r1, #7
 80063b0:	1ac0      	subs	r0, r0, r3
 80063b2:	4152      	adcs	r2, r2
 80063b4:	0983      	lsrs	r3, r0, #6
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d301      	bcc.n	80063be <__divsi3+0xba>
 80063ba:	018b      	lsls	r3, r1, #6
 80063bc:	1ac0      	subs	r0, r0, r3
 80063be:	4152      	adcs	r2, r2
 80063c0:	0943      	lsrs	r3, r0, #5
 80063c2:	428b      	cmp	r3, r1
 80063c4:	d301      	bcc.n	80063ca <__divsi3+0xc6>
 80063c6:	014b      	lsls	r3, r1, #5
 80063c8:	1ac0      	subs	r0, r0, r3
 80063ca:	4152      	adcs	r2, r2
 80063cc:	0903      	lsrs	r3, r0, #4
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d301      	bcc.n	80063d6 <__divsi3+0xd2>
 80063d2:	010b      	lsls	r3, r1, #4
 80063d4:	1ac0      	subs	r0, r0, r3
 80063d6:	4152      	adcs	r2, r2
 80063d8:	08c3      	lsrs	r3, r0, #3
 80063da:	428b      	cmp	r3, r1
 80063dc:	d301      	bcc.n	80063e2 <__divsi3+0xde>
 80063de:	00cb      	lsls	r3, r1, #3
 80063e0:	1ac0      	subs	r0, r0, r3
 80063e2:	4152      	adcs	r2, r2
 80063e4:	0883      	lsrs	r3, r0, #2
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d301      	bcc.n	80063ee <__divsi3+0xea>
 80063ea:	008b      	lsls	r3, r1, #2
 80063ec:	1ac0      	subs	r0, r0, r3
 80063ee:	4152      	adcs	r2, r2
 80063f0:	0843      	lsrs	r3, r0, #1
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d301      	bcc.n	80063fa <__divsi3+0xf6>
 80063f6:	004b      	lsls	r3, r1, #1
 80063f8:	1ac0      	subs	r0, r0, r3
 80063fa:	4152      	adcs	r2, r2
 80063fc:	1a41      	subs	r1, r0, r1
 80063fe:	d200      	bcs.n	8006402 <__divsi3+0xfe>
 8006400:	4601      	mov	r1, r0
 8006402:	4152      	adcs	r2, r2
 8006404:	4610      	mov	r0, r2
 8006406:	4770      	bx	lr
 8006408:	e05d      	b.n	80064c6 <__divsi3+0x1c2>
 800640a:	0fca      	lsrs	r2, r1, #31
 800640c:	d000      	beq.n	8006410 <__divsi3+0x10c>
 800640e:	4249      	negs	r1, r1
 8006410:	1003      	asrs	r3, r0, #32
 8006412:	d300      	bcc.n	8006416 <__divsi3+0x112>
 8006414:	4240      	negs	r0, r0
 8006416:	4053      	eors	r3, r2
 8006418:	2200      	movs	r2, #0
 800641a:	469c      	mov	ip, r3
 800641c:	0903      	lsrs	r3, r0, #4
 800641e:	428b      	cmp	r3, r1
 8006420:	d32d      	bcc.n	800647e <__divsi3+0x17a>
 8006422:	0a03      	lsrs	r3, r0, #8
 8006424:	428b      	cmp	r3, r1
 8006426:	d312      	bcc.n	800644e <__divsi3+0x14a>
 8006428:	22fc      	movs	r2, #252	; 0xfc
 800642a:	0189      	lsls	r1, r1, #6
 800642c:	ba12      	rev	r2, r2
 800642e:	0a03      	lsrs	r3, r0, #8
 8006430:	428b      	cmp	r3, r1
 8006432:	d30c      	bcc.n	800644e <__divsi3+0x14a>
 8006434:	0189      	lsls	r1, r1, #6
 8006436:	1192      	asrs	r2, r2, #6
 8006438:	428b      	cmp	r3, r1
 800643a:	d308      	bcc.n	800644e <__divsi3+0x14a>
 800643c:	0189      	lsls	r1, r1, #6
 800643e:	1192      	asrs	r2, r2, #6
 8006440:	428b      	cmp	r3, r1
 8006442:	d304      	bcc.n	800644e <__divsi3+0x14a>
 8006444:	0189      	lsls	r1, r1, #6
 8006446:	d03a      	beq.n	80064be <__divsi3+0x1ba>
 8006448:	1192      	asrs	r2, r2, #6
 800644a:	e000      	b.n	800644e <__divsi3+0x14a>
 800644c:	0989      	lsrs	r1, r1, #6
 800644e:	09c3      	lsrs	r3, r0, #7
 8006450:	428b      	cmp	r3, r1
 8006452:	d301      	bcc.n	8006458 <__divsi3+0x154>
 8006454:	01cb      	lsls	r3, r1, #7
 8006456:	1ac0      	subs	r0, r0, r3
 8006458:	4152      	adcs	r2, r2
 800645a:	0983      	lsrs	r3, r0, #6
 800645c:	428b      	cmp	r3, r1
 800645e:	d301      	bcc.n	8006464 <__divsi3+0x160>
 8006460:	018b      	lsls	r3, r1, #6
 8006462:	1ac0      	subs	r0, r0, r3
 8006464:	4152      	adcs	r2, r2
 8006466:	0943      	lsrs	r3, r0, #5
 8006468:	428b      	cmp	r3, r1
 800646a:	d301      	bcc.n	8006470 <__divsi3+0x16c>
 800646c:	014b      	lsls	r3, r1, #5
 800646e:	1ac0      	subs	r0, r0, r3
 8006470:	4152      	adcs	r2, r2
 8006472:	0903      	lsrs	r3, r0, #4
 8006474:	428b      	cmp	r3, r1
 8006476:	d301      	bcc.n	800647c <__divsi3+0x178>
 8006478:	010b      	lsls	r3, r1, #4
 800647a:	1ac0      	subs	r0, r0, r3
 800647c:	4152      	adcs	r2, r2
 800647e:	08c3      	lsrs	r3, r0, #3
 8006480:	428b      	cmp	r3, r1
 8006482:	d301      	bcc.n	8006488 <__divsi3+0x184>
 8006484:	00cb      	lsls	r3, r1, #3
 8006486:	1ac0      	subs	r0, r0, r3
 8006488:	4152      	adcs	r2, r2
 800648a:	0883      	lsrs	r3, r0, #2
 800648c:	428b      	cmp	r3, r1
 800648e:	d301      	bcc.n	8006494 <__divsi3+0x190>
 8006490:	008b      	lsls	r3, r1, #2
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	4152      	adcs	r2, r2
 8006496:	d2d9      	bcs.n	800644c <__divsi3+0x148>
 8006498:	0843      	lsrs	r3, r0, #1
 800649a:	428b      	cmp	r3, r1
 800649c:	d301      	bcc.n	80064a2 <__divsi3+0x19e>
 800649e:	004b      	lsls	r3, r1, #1
 80064a0:	1ac0      	subs	r0, r0, r3
 80064a2:	4152      	adcs	r2, r2
 80064a4:	1a41      	subs	r1, r0, r1
 80064a6:	d200      	bcs.n	80064aa <__divsi3+0x1a6>
 80064a8:	4601      	mov	r1, r0
 80064aa:	4663      	mov	r3, ip
 80064ac:	4152      	adcs	r2, r2
 80064ae:	105b      	asrs	r3, r3, #1
 80064b0:	4610      	mov	r0, r2
 80064b2:	d301      	bcc.n	80064b8 <__divsi3+0x1b4>
 80064b4:	4240      	negs	r0, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d500      	bpl.n	80064bc <__divsi3+0x1b8>
 80064ba:	4249      	negs	r1, r1
 80064bc:	4770      	bx	lr
 80064be:	4663      	mov	r3, ip
 80064c0:	105b      	asrs	r3, r3, #1
 80064c2:	d300      	bcc.n	80064c6 <__divsi3+0x1c2>
 80064c4:	4240      	negs	r0, r0
 80064c6:	b501      	push	{r0, lr}
 80064c8:	2000      	movs	r0, #0
 80064ca:	f000 f805 	bl	80064d8 <__aeabi_idiv0>
 80064ce:	bd02      	pop	{r1, pc}

080064d0 <__aeabi_idivmod>:
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d0f8      	beq.n	80064c6 <__divsi3+0x1c2>
 80064d4:	e716      	b.n	8006304 <__divsi3>
 80064d6:	4770      	bx	lr

080064d8 <__aeabi_idiv0>:
 80064d8:	4770      	bx	lr
 80064da:	46c0      	nop			; (mov r8, r8)

080064dc <__aeabi_uldivmod>:
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d111      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d10f      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d100      	bne.n	80064ea <__aeabi_uldivmod+0xe>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d002      	beq.n	80064f2 <__aeabi_uldivmod+0x16>
 80064ec:	2100      	movs	r1, #0
 80064ee:	43c9      	mvns	r1, r1
 80064f0:	0008      	movs	r0, r1
 80064f2:	b407      	push	{r0, r1, r2}
 80064f4:	4802      	ldr	r0, [pc, #8]	; (8006500 <__aeabi_uldivmod+0x24>)
 80064f6:	a102      	add	r1, pc, #8	; (adr r1, 8006500 <__aeabi_uldivmod+0x24>)
 80064f8:	1840      	adds	r0, r0, r1
 80064fa:	9002      	str	r0, [sp, #8]
 80064fc:	bd03      	pop	{r0, r1, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	ffffffd9 	.word	0xffffffd9
 8006504:	b403      	push	{r0, r1}
 8006506:	4668      	mov	r0, sp
 8006508:	b501      	push	{r0, lr}
 800650a:	9802      	ldr	r0, [sp, #8]
 800650c:	f000 f806 	bl	800651c <__udivmoddi4>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	469e      	mov	lr, r3
 8006514:	b002      	add	sp, #8
 8006516:	bc0c      	pop	{r2, r3}
 8006518:	4770      	bx	lr
 800651a:	46c0      	nop			; (mov r8, r8)

0800651c <__udivmoddi4>:
 800651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651e:	4657      	mov	r7, sl
 8006520:	464e      	mov	r6, r9
 8006522:	4645      	mov	r5, r8
 8006524:	46de      	mov	lr, fp
 8006526:	b5e0      	push	{r5, r6, r7, lr}
 8006528:	0004      	movs	r4, r0
 800652a:	000d      	movs	r5, r1
 800652c:	4692      	mov	sl, r2
 800652e:	4699      	mov	r9, r3
 8006530:	b083      	sub	sp, #12
 8006532:	428b      	cmp	r3, r1
 8006534:	d830      	bhi.n	8006598 <__udivmoddi4+0x7c>
 8006536:	d02d      	beq.n	8006594 <__udivmoddi4+0x78>
 8006538:	4649      	mov	r1, r9
 800653a:	4650      	mov	r0, sl
 800653c:	f000 f8d8 	bl	80066f0 <__clzdi2>
 8006540:	0029      	movs	r1, r5
 8006542:	0006      	movs	r6, r0
 8006544:	0020      	movs	r0, r4
 8006546:	f000 f8d3 	bl	80066f0 <__clzdi2>
 800654a:	1a33      	subs	r3, r6, r0
 800654c:	4698      	mov	r8, r3
 800654e:	3b20      	subs	r3, #32
 8006550:	d434      	bmi.n	80065bc <__udivmoddi4+0xa0>
 8006552:	469b      	mov	fp, r3
 8006554:	4653      	mov	r3, sl
 8006556:	465a      	mov	r2, fp
 8006558:	4093      	lsls	r3, r2
 800655a:	4642      	mov	r2, r8
 800655c:	001f      	movs	r7, r3
 800655e:	4653      	mov	r3, sl
 8006560:	4093      	lsls	r3, r2
 8006562:	001e      	movs	r6, r3
 8006564:	42af      	cmp	r7, r5
 8006566:	d83b      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006568:	42af      	cmp	r7, r5
 800656a:	d100      	bne.n	800656e <__udivmoddi4+0x52>
 800656c:	e079      	b.n	8006662 <__udivmoddi4+0x146>
 800656e:	465b      	mov	r3, fp
 8006570:	1ba4      	subs	r4, r4, r6
 8006572:	41bd      	sbcs	r5, r7
 8006574:	2b00      	cmp	r3, #0
 8006576:	da00      	bge.n	800657a <__udivmoddi4+0x5e>
 8006578:	e076      	b.n	8006668 <__udivmoddi4+0x14c>
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	9200      	str	r2, [sp, #0]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	2301      	movs	r3, #1
 8006584:	465a      	mov	r2, fp
 8006586:	4093      	lsls	r3, r2
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	2301      	movs	r3, #1
 800658c:	4642      	mov	r2, r8
 800658e:	4093      	lsls	r3, r2
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	e029      	b.n	80065e8 <__udivmoddi4+0xcc>
 8006594:	4282      	cmp	r2, r0
 8006596:	d9cf      	bls.n	8006538 <__udivmoddi4+0x1c>
 8006598:	2200      	movs	r2, #0
 800659a:	2300      	movs	r3, #0
 800659c:	9200      	str	r2, [sp, #0]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <__udivmoddi4+0x8e>
 80065a6:	601c      	str	r4, [r3, #0]
 80065a8:	605d      	str	r5, [r3, #4]
 80065aa:	9800      	ldr	r0, [sp, #0]
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	b003      	add	sp, #12
 80065b0:	bcf0      	pop	{r4, r5, r6, r7}
 80065b2:	46bb      	mov	fp, r7
 80065b4:	46b2      	mov	sl, r6
 80065b6:	46a9      	mov	r9, r5
 80065b8:	46a0      	mov	r8, r4
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065bc:	4642      	mov	r2, r8
 80065be:	469b      	mov	fp, r3
 80065c0:	2320      	movs	r3, #32
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	4652      	mov	r2, sl
 80065c6:	40da      	lsrs	r2, r3
 80065c8:	4641      	mov	r1, r8
 80065ca:	0013      	movs	r3, r2
 80065cc:	464a      	mov	r2, r9
 80065ce:	408a      	lsls	r2, r1
 80065d0:	0017      	movs	r7, r2
 80065d2:	4642      	mov	r2, r8
 80065d4:	431f      	orrs	r7, r3
 80065d6:	4653      	mov	r3, sl
 80065d8:	4093      	lsls	r3, r2
 80065da:	001e      	movs	r6, r3
 80065dc:	42af      	cmp	r7, r5
 80065de:	d9c3      	bls.n	8006568 <__udivmoddi4+0x4c>
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	9200      	str	r2, [sp, #0]
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	4643      	mov	r3, r8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0d8      	beq.n	80065a0 <__udivmoddi4+0x84>
 80065ee:	07fb      	lsls	r3, r7, #31
 80065f0:	0872      	lsrs	r2, r6, #1
 80065f2:	431a      	orrs	r2, r3
 80065f4:	4646      	mov	r6, r8
 80065f6:	087b      	lsrs	r3, r7, #1
 80065f8:	e00e      	b.n	8006618 <__udivmoddi4+0xfc>
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	d101      	bne.n	8006602 <__udivmoddi4+0xe6>
 80065fe:	42a2      	cmp	r2, r4
 8006600:	d80c      	bhi.n	800661c <__udivmoddi4+0x100>
 8006602:	1aa4      	subs	r4, r4, r2
 8006604:	419d      	sbcs	r5, r3
 8006606:	2001      	movs	r0, #1
 8006608:	1924      	adds	r4, r4, r4
 800660a:	416d      	adcs	r5, r5
 800660c:	2100      	movs	r1, #0
 800660e:	3e01      	subs	r6, #1
 8006610:	1824      	adds	r4, r4, r0
 8006612:	414d      	adcs	r5, r1
 8006614:	2e00      	cmp	r6, #0
 8006616:	d006      	beq.n	8006626 <__udivmoddi4+0x10a>
 8006618:	42ab      	cmp	r3, r5
 800661a:	d9ee      	bls.n	80065fa <__udivmoddi4+0xde>
 800661c:	3e01      	subs	r6, #1
 800661e:	1924      	adds	r4, r4, r4
 8006620:	416d      	adcs	r5, r5
 8006622:	2e00      	cmp	r6, #0
 8006624:	d1f8      	bne.n	8006618 <__udivmoddi4+0xfc>
 8006626:	9800      	ldr	r0, [sp, #0]
 8006628:	9901      	ldr	r1, [sp, #4]
 800662a:	465b      	mov	r3, fp
 800662c:	1900      	adds	r0, r0, r4
 800662e:	4169      	adcs	r1, r5
 8006630:	2b00      	cmp	r3, #0
 8006632:	db24      	blt.n	800667e <__udivmoddi4+0x162>
 8006634:	002b      	movs	r3, r5
 8006636:	465a      	mov	r2, fp
 8006638:	4644      	mov	r4, r8
 800663a:	40d3      	lsrs	r3, r2
 800663c:	002a      	movs	r2, r5
 800663e:	40e2      	lsrs	r2, r4
 8006640:	001c      	movs	r4, r3
 8006642:	465b      	mov	r3, fp
 8006644:	0015      	movs	r5, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	db2a      	blt.n	80066a0 <__udivmoddi4+0x184>
 800664a:	0026      	movs	r6, r4
 800664c:	409e      	lsls	r6, r3
 800664e:	0033      	movs	r3, r6
 8006650:	0026      	movs	r6, r4
 8006652:	4647      	mov	r7, r8
 8006654:	40be      	lsls	r6, r7
 8006656:	0032      	movs	r2, r6
 8006658:	1a80      	subs	r0, r0, r2
 800665a:	4199      	sbcs	r1, r3
 800665c:	9000      	str	r0, [sp, #0]
 800665e:	9101      	str	r1, [sp, #4]
 8006660:	e79e      	b.n	80065a0 <__udivmoddi4+0x84>
 8006662:	42a3      	cmp	r3, r4
 8006664:	d8bc      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006666:	e782      	b.n	800656e <__udivmoddi4+0x52>
 8006668:	4642      	mov	r2, r8
 800666a:	2320      	movs	r3, #32
 800666c:	2100      	movs	r1, #0
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	2200      	movs	r2, #0
 8006672:	9100      	str	r1, [sp, #0]
 8006674:	9201      	str	r2, [sp, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	40da      	lsrs	r2, r3
 800667a:	9201      	str	r2, [sp, #4]
 800667c:	e785      	b.n	800658a <__udivmoddi4+0x6e>
 800667e:	4642      	mov	r2, r8
 8006680:	2320      	movs	r3, #32
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	002a      	movs	r2, r5
 8006686:	4646      	mov	r6, r8
 8006688:	409a      	lsls	r2, r3
 800668a:	0023      	movs	r3, r4
 800668c:	40f3      	lsrs	r3, r6
 800668e:	4644      	mov	r4, r8
 8006690:	4313      	orrs	r3, r2
 8006692:	002a      	movs	r2, r5
 8006694:	40e2      	lsrs	r2, r4
 8006696:	001c      	movs	r4, r3
 8006698:	465b      	mov	r3, fp
 800669a:	0015      	movs	r5, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	dad4      	bge.n	800664a <__udivmoddi4+0x12e>
 80066a0:	4642      	mov	r2, r8
 80066a2:	002f      	movs	r7, r5
 80066a4:	2320      	movs	r3, #32
 80066a6:	0026      	movs	r6, r4
 80066a8:	4097      	lsls	r7, r2
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	40de      	lsrs	r6, r3
 80066ae:	003b      	movs	r3, r7
 80066b0:	4333      	orrs	r3, r6
 80066b2:	e7cd      	b.n	8006650 <__udivmoddi4+0x134>

080066b4 <__clzsi2>:
 80066b4:	211c      	movs	r1, #28
 80066b6:	2301      	movs	r3, #1
 80066b8:	041b      	lsls	r3, r3, #16
 80066ba:	4298      	cmp	r0, r3
 80066bc:	d301      	bcc.n	80066c2 <__clzsi2+0xe>
 80066be:	0c00      	lsrs	r0, r0, #16
 80066c0:	3910      	subs	r1, #16
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	4298      	cmp	r0, r3
 80066c6:	d301      	bcc.n	80066cc <__clzsi2+0x18>
 80066c8:	0a00      	lsrs	r0, r0, #8
 80066ca:	3908      	subs	r1, #8
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	4298      	cmp	r0, r3
 80066d0:	d301      	bcc.n	80066d6 <__clzsi2+0x22>
 80066d2:	0900      	lsrs	r0, r0, #4
 80066d4:	3904      	subs	r1, #4
 80066d6:	a202      	add	r2, pc, #8	; (adr r2, 80066e0 <__clzsi2+0x2c>)
 80066d8:	5c10      	ldrb	r0, [r2, r0]
 80066da:	1840      	adds	r0, r0, r1
 80066dc:	4770      	bx	lr
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	02020304 	.word	0x02020304
 80066e4:	01010101 	.word	0x01010101
	...

080066f0 <__clzdi2>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	2900      	cmp	r1, #0
 80066f4:	d103      	bne.n	80066fe <__clzdi2+0xe>
 80066f6:	f7ff ffdd 	bl	80066b4 <__clzsi2>
 80066fa:	3020      	adds	r0, #32
 80066fc:	e002      	b.n	8006704 <__clzdi2+0x14>
 80066fe:	0008      	movs	r0, r1
 8006700:	f7ff ffd8 	bl	80066b4 <__clzsi2>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	46c0      	nop			; (mov r8, r8)

08006708 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2201      	movs	r2, #1
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}

08006724 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006734:	46c0      	nop			; (mov r8, r8)
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}

0800673c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	4252      	negs	r2, r2
 800674a:	611a      	str	r2, [r3, #16]
}
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b002      	add	sp, #8
 8006752:	bd80      	pop	{r7, pc}

08006754 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60da      	str	r2, [r3, #12]
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <app_init>:


/*
 * Initialization function
 */
void app_init(void){
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0

	g = 5;
 8006774:	4b2a      	ldr	r3, [pc, #168]	; (8006820 <app_init+0xb0>)
 8006776:	2205      	movs	r2, #5
 8006778:	601a      	str	r2, [r3, #0]

	//TIM7 initialization
	LL_TIM_EnableIT_UPDATE(TIM7); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
 800677a:	4b2a      	ldr	r3, [pc, #168]	; (8006824 <app_init+0xb4>)
 800677c:	0018      	movs	r0, r3
 800677e:	f7ff ffe9 	bl	8006754 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
 8006782:	4b28      	ldr	r3, [pc, #160]	; (8006824 <app_init+0xb4>)
 8006784:	0018      	movs	r0, r3
 8006786:	f7ff ffd9 	bl	800673c <LL_TIM_ClearFlag_UPDATE>

	//TIM3 initialization of encoder
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800678a:	4b27      	ldr	r3, [pc, #156]	; (8006828 <app_init+0xb8>)
 800678c:	213c      	movs	r1, #60	; 0x3c
 800678e:	0018      	movs	r0, r3
 8006790:	f008 f8e6 	bl	800e960 <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 30000); //write non 0 value to avoid shift from 0 -> max value
 8006794:	4b24      	ldr	r3, [pc, #144]	; (8006828 <app_init+0xb8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a24      	ldr	r2, [pc, #144]	; (800682c <app_init+0xbc>)
 800679a:	625a      	str	r2, [r3, #36]	; 0x24
	encoderVal = __HAL_TIM_GET_COUNTER(&htim3)/4;
 800679c:	4b22      	ldr	r3, [pc, #136]	; (8006828 <app_init+0xb8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	089b      	lsrs	r3, r3, #2
 80067a4:	001a      	movs	r2, r3
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <app_init+0xc0>)
 80067a8:	601a      	str	r2, [r3, #0]
	encoderValPrev = encoderVal;
 80067aa:	4b21      	ldr	r3, [pc, #132]	; (8006830 <app_init+0xc0>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b21      	ldr	r3, [pc, #132]	; (8006834 <app_init+0xc4>)
 80067b0:	601a      	str	r2, [r3, #0]

	//Calibrate and start ADC sensing with DMA
	HAL_ADCEx_Calibration_Start(&hadc1);
 80067b2:	4b21      	ldr	r3, [pc, #132]	; (8006838 <app_init+0xc8>)
 80067b4:	0018      	movs	r0, r3
 80067b6:	f003 fc73 	bl	800a0a0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&aADCxConvertedValues, ADC_NUM_OF_SAMPLES);
 80067ba:	4920      	ldr	r1, [pc, #128]	; (800683c <app_init+0xcc>)
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <app_init+0xc8>)
 80067be:	2203      	movs	r2, #3
 80067c0:	0018      	movs	r0, r3
 80067c2:	f002 ffe5 	bl	8009790 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80067c6:	4b1e      	ldr	r3, [pc, #120]	; (8006840 <app_init+0xd0>)
 80067c8:	2100      	movs	r1, #0
 80067ca:	0018      	movs	r0, r3
 80067cc:	f003 fe4a 	bl	800a464 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80067d0:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <app_init+0xd4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	481a      	ldr	r0, [pc, #104]	; (8006840 <app_init+0xd0>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	2100      	movs	r1, #0
 80067da:	f003 fef5 	bl	800a5c8 <HAL_DAC_SetValue>

	//Init 7 segment display
	max7219_Init( 7 );
 80067de:	2007      	movs	r0, #7
 80067e0:	f000 fdae 	bl	8007340 <max7219_Init>
	max7219_Decode_On();
 80067e4:	f000 fe38 	bl	8007458 <max7219_Decode_On>

	//Print decimal points and initial values
	max7219_PrintItos(SEGMENT_2, 4, current, 4);
 80067e8:	4b17      	ldr	r3, [pc, #92]	; (8006848 <app_init+0xd8>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	2304      	movs	r3, #4
 80067ee:	2104      	movs	r1, #4
 80067f0:	2002      	movs	r0, #2
 80067f2:	f000 fedd 	bl	80075b0 <max7219_PrintItos>
	max7219_PrintItos(SEGMENT_1, 3, voltage, 3);
 80067f6:	4b15      	ldr	r3, [pc, #84]	; (800684c <app_init+0xdc>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	2303      	movs	r3, #3
 80067fc:	2103      	movs	r1, #3
 80067fe:	2001      	movs	r0, #1
 8006800:	f000 fed6 	bl	80075b0 <max7219_PrintItos>

	//Wait for hardware initialization and then turn DB to HIGH (according to TCPP01-M12 datasheet 6.5)
	HAL_Delay(2000);
 8006804:	23fa      	movs	r3, #250	; 0xfa
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	0018      	movs	r0, r3
 800680a:	f002 fc87 	bl	800911c <HAL_Delay>
	HAL_GPIO_WritePin(DB_OUT_GPIO_Port, DB_OUT_Pin, GPIO_PIN_SET);
 800680e:	4b10      	ldr	r3, [pc, #64]	; (8006850 <app_init+0xe0>)
 8006810:	2201      	movs	r2, #1
 8006812:	2101      	movs	r1, #1
 8006814:	0018      	movs	r0, r3
 8006816:	f004 fe1a 	bl	800b44e <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);


}
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	20000348 	.word	0x20000348
 8006824:	40001400 	.word	0x40001400
 8006828:	2000048c 	.word	0x2000048c
 800682c:	00007530 	.word	0x00007530
 8006830:	2000030c 	.word	0x2000030c
 8006834:	20000310 	.word	0x20000310
 8006838:	20000350 	.word	0x20000350
 800683c:	20000340 	.word	0x20000340
 8006840:	20000414 	.word	0x20000414
 8006844:	20000024 	.word	0x20000024
 8006848:	2000001c 	.word	0x2000001c
 800684c:	2000000c 	.word	0x2000000c
 8006850:	50000400 	.word	0x50000400

08006854 <app_loop>:
*/

/*
 * Loop function
 */
void app_loop(void){
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af02      	add	r7, sp, #8
			max7219_BlinkDigit(SEGMENT_2, &currentOCP, encoderPress, 500, 4); //pass voltage address to BlinkDigit function
		}
		break;
	}*/

	if (ocp_reset_needed == 1) {
 800685a:	4b57      	ldr	r3, [pc, #348]	; (80069b8 <app_loop+0x164>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d113      	bne.n	800688a <app_loop+0x36>
		HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_RESET);
 8006862:	2380      	movs	r3, #128	; 0x80
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4855      	ldr	r0, [pc, #340]	; (80069bc <app_loop+0x168>)
 8006868:	2200      	movs	r2, #0
 800686a:	0019      	movs	r1, r3
 800686c:	f004 fdef 	bl	800b44e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006870:	2001      	movs	r0, #1
 8006872:	f002 fc53 	bl	800911c <HAL_Delay>
		HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
 8006876:	2380      	movs	r3, #128	; 0x80
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4850      	ldr	r0, [pc, #320]	; (80069bc <app_loop+0x168>)
 800687c:	2201      	movs	r2, #1
 800687e:	0019      	movs	r1, r3
 8006880:	f004 fde5 	bl	800b44e <HAL_GPIO_WritePin>
		ocp_reset_needed = 0;
 8006884:	4b4c      	ldr	r3, [pc, #304]	; (80069b8 <app_loop+0x164>)
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
	}


	switch(outputState)
 800688a:	4b4d      	ldr	r3, [pc, #308]	; (80069c0 <app_loop+0x16c>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <app_loop+0x46>
 8006894:	2b01      	cmp	r3, #1
 8006896:	d031      	beq.n	80068fc <app_loop+0xa8>
			break;
		}

	//CDC_Transmit_FS(data, strlen(data));

}
 8006898:	e08a      	b.n	80069b0 <app_loop+0x15c>
				switch(currentState)
 800689a:	4b4a      	ldr	r3, [pc, #296]	; (80069c4 <app_loop+0x170>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d01e      	beq.n	80068e2 <app_loop+0x8e>
 80068a4:	dd00      	ble.n	80068a8 <app_loop+0x54>
 80068a6:	e082      	b.n	80069ae <app_loop+0x15a>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00e      	beq.n	80068ca <app_loop+0x76>
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d000      	beq.n	80068b2 <app_loop+0x5e>
 80068b0:	e07d      	b.n	80069ae <app_loop+0x15a>
						max7219_BlinkDigit(SEGMENT_1, &voltage, encoderPress, 500, 3); //pass voltage address to BlinkDigit function
 80068b2:	4b45      	ldr	r3, [pc, #276]	; (80069c8 <app_loop+0x174>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	23fa      	movs	r3, #250	; 0xfa
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4943      	ldr	r1, [pc, #268]	; (80069cc <app_loop+0x178>)
 80068be:	2003      	movs	r0, #3
 80068c0:	9000      	str	r0, [sp, #0]
 80068c2:	2001      	movs	r0, #1
 80068c4:	f000 ff42 	bl	800774c <max7219_BlinkDigit>
					 break;
 80068c8:	e017      	b.n	80068fa <app_loop+0xa6>
						max7219_BlinkDigit(SEGMENT_2, &current, encoderPress, 500, 4); //pass voltage address to BlinkDigit function
 80068ca:	4b3f      	ldr	r3, [pc, #252]	; (80069c8 <app_loop+0x174>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	23fa      	movs	r3, #250	; 0xfa
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	493e      	ldr	r1, [pc, #248]	; (80069d0 <app_loop+0x17c>)
 80068d6:	2004      	movs	r0, #4
 80068d8:	9000      	str	r0, [sp, #0]
 80068da:	2002      	movs	r0, #2
 80068dc:	f000 ff36 	bl	800774c <max7219_BlinkDigit>
					break;
 80068e0:	e00b      	b.n	80068fa <app_loop+0xa6>
						max7219_BlinkDigit(SEGMENT_2, &currentOCP, encoderPress, 500, 4); //pass voltage address to BlinkDigit function
 80068e2:	4b39      	ldr	r3, [pc, #228]	; (80069c8 <app_loop+0x174>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	23fa      	movs	r3, #250	; 0xfa
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	4939      	ldr	r1, [pc, #228]	; (80069d4 <app_loop+0x180>)
 80068ee:	2004      	movs	r0, #4
 80068f0:	9000      	str	r0, [sp, #0]
 80068f2:	2002      	movs	r0, #2
 80068f4:	f000 ff2a 	bl	800774c <max7219_BlinkDigit>
					break;
 80068f8:	46c0      	nop			; (mov r8, r8)
			break;
 80068fa:	e058      	b.n	80069ae <app_loop+0x15a>
				uint32_t vol = BSP_PWR_VBUSGetVoltage(0)/10; //divide by 10 t oget centivolts since only 4 digit display..
 80068fc:	2000      	movs	r0, #0
 80068fe:	f014 fe53 	bl	801b5a8 <BSP_PWR_VBUSGetVoltage>
 8006902:	0003      	movs	r3, r0
 8006904:	210a      	movs	r1, #10
 8006906:	0018      	movs	r0, r3
 8006908:	f7ff fcfc 	bl	8006304 <__divsi3>
 800690c:	0003      	movs	r3, r0
 800690e:	607b      	str	r3, [r7, #4]
				uint32_t cur = BSP_PWR_VBUSGetCurrent(0);
 8006910:	2000      	movs	r0, #0
 8006912:	f014 fe67 	bl	801b5e4 <BSP_PWR_VBUSGetCurrent>
 8006916:	0003      	movs	r3, r0
 8006918:	603b      	str	r3, [r7, #0]
				integer_part = (int)vol;
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	4b2e      	ldr	r3, [pc, #184]	; (80069d8 <app_loop+0x184>)
 800691e:	601a      	str	r2, [r3, #0]
				num_digits = 0;
 8006920:	4b2e      	ldr	r3, [pc, #184]	; (80069dc <app_loop+0x188>)
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
				while (integer_part) {
 8006926:	e00e      	b.n	8006946 <app_loop+0xf2>
					integer_part = integer_part/10;
 8006928:	4b2b      	ldr	r3, [pc, #172]	; (80069d8 <app_loop+0x184>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	210a      	movs	r1, #10
 800692e:	0018      	movs	r0, r3
 8006930:	f7ff fce8 	bl	8006304 <__divsi3>
 8006934:	0003      	movs	r3, r0
 8006936:	001a      	movs	r2, r3
 8006938:	4b27      	ldr	r3, [pc, #156]	; (80069d8 <app_loop+0x184>)
 800693a:	601a      	str	r2, [r3, #0]
					num_digits++;
 800693c:	4b27      	ldr	r3, [pc, #156]	; (80069dc <app_loop+0x188>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	4b26      	ldr	r3, [pc, #152]	; (80069dc <app_loop+0x188>)
 8006944:	601a      	str	r2, [r3, #0]
				while (integer_part) {
 8006946:	4b24      	ldr	r3, [pc, #144]	; (80069d8 <app_loop+0x184>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1ec      	bne.n	8006928 <app_loop+0xd4>
				max7219_PrintItos(SEGMENT_1, num_digits, vol, 3);
 800694e:	4b23      	ldr	r3, [pc, #140]	; (80069dc <app_loop+0x188>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	b2d9      	uxtb	r1, r3
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	2303      	movs	r3, #3
 8006958:	2001      	movs	r0, #1
 800695a:	f000 fe29 	bl	80075b0 <max7219_PrintItos>
				integer_part = (int)cur;
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	4b1d      	ldr	r3, [pc, #116]	; (80069d8 <app_loop+0x184>)
 8006962:	601a      	str	r2, [r3, #0]
				num_digits = 0;
 8006964:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <app_loop+0x188>)
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
				while (integer_part) {
 800696a:	e00e      	b.n	800698a <app_loop+0x136>
					integer_part = integer_part/10;
 800696c:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <app_loop+0x184>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	210a      	movs	r1, #10
 8006972:	0018      	movs	r0, r3
 8006974:	f7ff fcc6 	bl	8006304 <__divsi3>
 8006978:	0003      	movs	r3, r0
 800697a:	001a      	movs	r2, r3
 800697c:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <app_loop+0x184>)
 800697e:	601a      	str	r2, [r3, #0]
					num_digits++;
 8006980:	4b16      	ldr	r3, [pc, #88]	; (80069dc <app_loop+0x188>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	4b15      	ldr	r3, [pc, #84]	; (80069dc <app_loop+0x188>)
 8006988:	601a      	str	r2, [r3, #0]
				while (integer_part) {
 800698a:	4b13      	ldr	r3, [pc, #76]	; (80069d8 <app_loop+0x184>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1ec      	bne.n	800696c <app_loop+0x118>
				max7219_PrintItos(SEGMENT_2, num_digits, cur, 4);
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <app_loop+0x188>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	b2d9      	uxtb	r1, r3
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	2304      	movs	r3, #4
 800699c:	2002      	movs	r0, #2
 800699e:	f000 fe07 	bl	80075b0 <max7219_PrintItos>
				HAL_Delay(500);
 80069a2:	23fa      	movs	r3, #250	; 0xfa
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	0018      	movs	r0, r3
 80069a8:	f002 fbb8 	bl	800911c <HAL_Delay>
			break;
 80069ac:	e000      	b.n	80069b0 <app_loop+0x15c>
			break;
 80069ae:	46c0      	nop			; (mov r8, r8)
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b002      	add	sp, #8
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000328 	.word	0x20000328
 80069bc:	50000400 	.word	0x50000400
 80069c0:	2000034c 	.word	0x2000034c
 80069c4:	20000034 	.word	0x20000034
 80069c8:	20000004 	.word	0x20000004
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	2000001c 	.word	0x2000001c
 80069d4:	20000020 	.word	0x20000020
 80069d8:	2000031c 	.word	0x2000031c
 80069dc:	20000320 	.word	0x20000320

080069e0 <encoder_turn_isr>:


/**
 * TIM2 encoder turning interrupt service routine
 */
void encoder_turn_isr(void) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b090      	sub	sp, #64	; 0x40
 80069e4:	af02      	add	r7, sp, #8
	//Get the TIM2 value from CNT register
	encoderVal = (TIM3 -> CNT) >> 2;
 80069e6:	4bc9      	ldr	r3, [pc, #804]	; (8006d0c <encoder_turn_isr+0x32c>)
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	089b      	lsrs	r3, r3, #2
 80069ec:	001a      	movs	r2, r3
 80069ee:	4bc8      	ldr	r3, [pc, #800]	; (8006d10 <encoder_turn_isr+0x330>)
 80069f0:	601a      	str	r2, [r3, #0]

	if (encoderVal != encoderValPrev){
 80069f2:	4bc7      	ldr	r3, [pc, #796]	; (8006d10 <encoder_turn_isr+0x330>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4bc7      	ldr	r3, [pc, #796]	; (8006d14 <encoder_turn_isr+0x334>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d100      	bne.n	8006a00 <encoder_turn_isr+0x20>
 80069fe:	e180      	b.n	8006d02 <encoder_turn_isr+0x322>

		switch(currentState)
 8006a00:	4bc5      	ldr	r3, [pc, #788]	; (8006d18 <encoder_turn_isr+0x338>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d100      	bne.n	8006a0c <encoder_turn_isr+0x2c>
 8006a0a:	e0ed      	b.n	8006be8 <encoder_turn_isr+0x208>
 8006a0c:	dd00      	ble.n	8006a10 <encoder_turn_isr+0x30>
 8006a0e:	e178      	b.n	8006d02 <encoder_turn_isr+0x322>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d100      	bne.n	8006a16 <encoder_turn_isr+0x36>
 8006a14:	e082      	b.n	8006b1c <encoder_turn_isr+0x13c>
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d000      	beq.n	8006a1c <encoder_turn_isr+0x3c>
 8006a1a:	e172      	b.n	8006d02 <encoder_turn_isr+0x322>
		{
		case ADJUSTMENT_VOLTAGE:
		{
			//Get direction of encoder turning
			if (encoderVal < encoderValPrev) {
 8006a1c:	4bbc      	ldr	r3, [pc, #752]	; (8006d10 <encoder_turn_isr+0x330>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	4bbc      	ldr	r3, [pc, #752]	; (8006d14 <encoder_turn_isr+0x334>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	da07      	bge.n	8006a38 <encoder_turn_isr+0x58>
				voltageTemp += val;
 8006a28:	4bbc      	ldr	r3, [pc, #752]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	4bbc      	ldr	r3, [pc, #752]	; (8006d20 <encoder_turn_isr+0x340>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	18d2      	adds	r2, r2, r3
 8006a32:	4bba      	ldr	r3, [pc, #744]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e006      	b.n	8006a46 <encoder_turn_isr+0x66>
			} else {
				voltageTemp -= val;
 8006a38:	4bb8      	ldr	r3, [pc, #736]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	4bb8      	ldr	r3, [pc, #736]	; (8006d20 <encoder_turn_isr+0x340>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	1ad2      	subs	r2, r2, r3
 8006a42:	4bb6      	ldr	r3, [pc, #728]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a44:	601a      	str	r2, [r3, #0]
			}

			//If required temp value is within limits, assign it to voltage
			if (voltageMin <= voltageTemp && voltageTemp <= voltageMax) {
 8006a46:	4bb7      	ldr	r3, [pc, #732]	; (8006d24 <encoder_turn_isr+0x344>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4bb4      	ldr	r3, [pc, #720]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	dc0a      	bgt.n	8006a68 <encoder_turn_isr+0x88>
 8006a52:	4bb2      	ldr	r3, [pc, #712]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4bb4      	ldr	r3, [pc, #720]	; (8006d28 <encoder_turn_isr+0x348>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	dc04      	bgt.n	8006a68 <encoder_turn_isr+0x88>
				voltage = voltageTemp;
 8006a5e:	4baf      	ldr	r3, [pc, #700]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4bb2      	ldr	r3, [pc, #712]	; (8006d2c <encoder_turn_isr+0x34c>)
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e014      	b.n	8006a92 <encoder_turn_isr+0xb2>
			} else if (voltageTemp > voltageMax) {
 8006a68:	4bac      	ldr	r3, [pc, #688]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	4bae      	ldr	r3, [pc, #696]	; (8006d28 <encoder_turn_isr+0x348>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	dd04      	ble.n	8006a7e <encoder_turn_isr+0x9e>
				voltage = voltageMax;
 8006a74:	4bac      	ldr	r3, [pc, #688]	; (8006d28 <encoder_turn_isr+0x348>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4bac      	ldr	r3, [pc, #688]	; (8006d2c <encoder_turn_isr+0x34c>)
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	e009      	b.n	8006a92 <encoder_turn_isr+0xb2>
			} else if (voltageTemp < voltageMin) {
 8006a7e:	4ba7      	ldr	r3, [pc, #668]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4ba8      	ldr	r3, [pc, #672]	; (8006d24 <encoder_turn_isr+0x344>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	da03      	bge.n	8006a92 <encoder_turn_isr+0xb2>
				voltage = voltageMin;
 8006a8a:	4ba6      	ldr	r3, [pc, #664]	; (8006d24 <encoder_turn_isr+0x344>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4ba7      	ldr	r3, [pc, #668]	; (8006d2c <encoder_turn_isr+0x34c>)
 8006a90:	601a      	str	r2, [r3, #0]
			} else {
				//voltageTemp = voltage;
			}
			voltageTemp = voltage;
 8006a92:	4ba6      	ldr	r3, [pc, #664]	; (8006d2c <encoder_turn_isr+0x34c>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4ba1      	ldr	r3, [pc, #644]	; (8006d1c <encoder_turn_isr+0x33c>)
 8006a98:	601a      	str	r2, [r3, #0]

			// Get number of int numbers in voltage var
			integer_part = (int)voltage;
 8006a9a:	4ba4      	ldr	r3, [pc, #656]	; (8006d2c <encoder_turn_isr+0x34c>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4ba4      	ldr	r3, [pc, #656]	; (8006d30 <encoder_turn_isr+0x350>)
 8006aa0:	601a      	str	r2, [r3, #0]
			num_digits = 0;
 8006aa2:	4ba4      	ldr	r3, [pc, #656]	; (8006d34 <encoder_turn_isr+0x354>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]

			while (integer_part) {
 8006aa8:	e00e      	b.n	8006ac8 <encoder_turn_isr+0xe8>
				integer_part = integer_part/10;
 8006aaa:	4ba1      	ldr	r3, [pc, #644]	; (8006d30 <encoder_turn_isr+0x350>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	210a      	movs	r1, #10
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f7ff fc27 	bl	8006304 <__divsi3>
 8006ab6:	0003      	movs	r3, r0
 8006ab8:	001a      	movs	r2, r3
 8006aba:	4b9d      	ldr	r3, [pc, #628]	; (8006d30 <encoder_turn_isr+0x350>)
 8006abc:	601a      	str	r2, [r3, #0]
				num_digits++;
 8006abe:	4b9d      	ldr	r3, [pc, #628]	; (8006d34 <encoder_turn_isr+0x354>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	4b9b      	ldr	r3, [pc, #620]	; (8006d34 <encoder_turn_isr+0x354>)
 8006ac6:	601a      	str	r2, [r3, #0]
			while (integer_part) {
 8006ac8:	4b99      	ldr	r3, [pc, #612]	; (8006d30 <encoder_turn_isr+0x350>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1ec      	bne.n	8006aaa <encoder_turn_isr+0xca>
			}

			//Print the voltage to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
			max7219_PrintItos(SEGMENT_1, num_digits, voltage, 3);
 8006ad0:	4b98      	ldr	r3, [pc, #608]	; (8006d34 <encoder_turn_isr+0x354>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	b2d9      	uxtb	r1, r3
 8006ad6:	4b95      	ldr	r3, [pc, #596]	; (8006d2c <encoder_turn_isr+0x34c>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	2303      	movs	r3, #3
 8006adc:	2001      	movs	r0, #1
 8006ade:	f000 fd67 	bl	80075b0 <max7219_PrintItos>

			//Print to debug
			char _str[40];
			sprintf(_str,"VBUS selected: %d mV", voltage*10);
 8006ae2:	4b92      	ldr	r3, [pc, #584]	; (8006d2c <encoder_turn_isr+0x34c>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	0013      	movs	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	189b      	adds	r3, r3, r2
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	001a      	movs	r2, r3
 8006af0:	4991      	ldr	r1, [pc, #580]	; (8006d38 <encoder_turn_isr+0x358>)
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	0018      	movs	r0, r3
 8006af6:	f01b fdb3 	bl	8022660 <siprintf>
			USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006afa:	1d3b      	adds	r3, r7, #4
 8006afc:	0018      	movs	r0, r3
 8006afe:	f7ff fb65 	bl	80061cc <strlen>
 8006b02:	0002      	movs	r2, r0
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	9200      	str	r2, [sp, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	2006      	movs	r0, #6
 8006b0e:	f00a ffa5 	bl	8011a5c <USBPD_TRACE_Add>

			//Save TIM2 CNT value to ValPrev
			encoderValPrev = encoderVal;
 8006b12:	4b7f      	ldr	r3, [pc, #508]	; (8006d10 <encoder_turn_isr+0x330>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <encoder_turn_isr+0x334>)
 8006b18:	601a      	str	r2, [r3, #0]
		}
		break;
 8006b1a:	e0f2      	b.n	8006d02 <encoder_turn_isr+0x322>

		case ADJUSTMENT_CURRENT:
		{
			//Get direction of encoder turning
			if (encoderVal < encoderValPrev) {
 8006b1c:	4b7c      	ldr	r3, [pc, #496]	; (8006d10 <encoder_turn_isr+0x330>)
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	4b7c      	ldr	r3, [pc, #496]	; (8006d14 <encoder_turn_isr+0x334>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	da07      	bge.n	8006b38 <encoder_turn_isr+0x158>
				currentTemp += val;
 8006b28:	4b84      	ldr	r3, [pc, #528]	; (8006d3c <encoder_turn_isr+0x35c>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	4b7c      	ldr	r3, [pc, #496]	; (8006d20 <encoder_turn_isr+0x340>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	18d2      	adds	r2, r2, r3
 8006b32:	4b82      	ldr	r3, [pc, #520]	; (8006d3c <encoder_turn_isr+0x35c>)
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e006      	b.n	8006b46 <encoder_turn_isr+0x166>
			} else {
				currentTemp -= val;
 8006b38:	4b80      	ldr	r3, [pc, #512]	; (8006d3c <encoder_turn_isr+0x35c>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	4b78      	ldr	r3, [pc, #480]	; (8006d20 <encoder_turn_isr+0x340>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	1ad2      	subs	r2, r2, r3
 8006b42:	4b7e      	ldr	r3, [pc, #504]	; (8006d3c <encoder_turn_isr+0x35c>)
 8006b44:	601a      	str	r2, [r3, #0]
			}

			//If required temp value is within limits, assign it to voltage
			if (currentMin <= currentTemp && currentTemp <= currentMax) {
 8006b46:	4b7e      	ldr	r3, [pc, #504]	; (8006d40 <encoder_turn_isr+0x360>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b7c      	ldr	r3, [pc, #496]	; (8006d3c <encoder_turn_isr+0x35c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	dc0a      	bgt.n	8006b68 <encoder_turn_isr+0x188>
 8006b52:	4b7a      	ldr	r3, [pc, #488]	; (8006d3c <encoder_turn_isr+0x35c>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b7b      	ldr	r3, [pc, #492]	; (8006d44 <encoder_turn_isr+0x364>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	dc04      	bgt.n	8006b68 <encoder_turn_isr+0x188>
				current = currentTemp;
 8006b5e:	4b77      	ldr	r3, [pc, #476]	; (8006d3c <encoder_turn_isr+0x35c>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	4b79      	ldr	r3, [pc, #484]	; (8006d48 <encoder_turn_isr+0x368>)
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e003      	b.n	8006b70 <encoder_turn_isr+0x190>
			} else {
				currentTemp = current;
 8006b68:	4b77      	ldr	r3, [pc, #476]	; (8006d48 <encoder_turn_isr+0x368>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	4b73      	ldr	r3, [pc, #460]	; (8006d3c <encoder_turn_isr+0x35c>)
 8006b6e:	601a      	str	r2, [r3, #0]
			}

			// Get number of int numbers in voltage var
			integer_part = (int)current;
 8006b70:	4b75      	ldr	r3, [pc, #468]	; (8006d48 <encoder_turn_isr+0x368>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	4b6e      	ldr	r3, [pc, #440]	; (8006d30 <encoder_turn_isr+0x350>)
 8006b76:	601a      	str	r2, [r3, #0]
			num_digits = 0;
 8006b78:	4b6e      	ldr	r3, [pc, #440]	; (8006d34 <encoder_turn_isr+0x354>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]

			while (integer_part) {
 8006b7e:	e00e      	b.n	8006b9e <encoder_turn_isr+0x1be>
				integer_part = integer_part/10;
 8006b80:	4b6b      	ldr	r3, [pc, #428]	; (8006d30 <encoder_turn_isr+0x350>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	210a      	movs	r1, #10
 8006b86:	0018      	movs	r0, r3
 8006b88:	f7ff fbbc 	bl	8006304 <__divsi3>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	001a      	movs	r2, r3
 8006b90:	4b67      	ldr	r3, [pc, #412]	; (8006d30 <encoder_turn_isr+0x350>)
 8006b92:	601a      	str	r2, [r3, #0]
				num_digits++;
 8006b94:	4b67      	ldr	r3, [pc, #412]	; (8006d34 <encoder_turn_isr+0x354>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	4b66      	ldr	r3, [pc, #408]	; (8006d34 <encoder_turn_isr+0x354>)
 8006b9c:	601a      	str	r2, [r3, #0]
			while (integer_part) {
 8006b9e:	4b64      	ldr	r3, [pc, #400]	; (8006d30 <encoder_turn_isr+0x350>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1ec      	bne.n	8006b80 <encoder_turn_isr+0x1a0>
			}

			//Print the voltage to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
			max7219_PrintItos(SEGMENT_2, num_digits, current, 4);
 8006ba6:	4b63      	ldr	r3, [pc, #396]	; (8006d34 <encoder_turn_isr+0x354>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	b2d9      	uxtb	r1, r3
 8006bac:	4b66      	ldr	r3, [pc, #408]	; (8006d48 <encoder_turn_isr+0x368>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	2002      	movs	r0, #2
 8006bb4:	f000 fcfc 	bl	80075b0 <max7219_PrintItos>

			//Print to debug
			char _str[40];
			sprintf(_str,"IBUS selected: %d mA", current);
 8006bb8:	4b63      	ldr	r3, [pc, #396]	; (8006d48 <encoder_turn_isr+0x368>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4963      	ldr	r1, [pc, #396]	; (8006d4c <encoder_turn_isr+0x36c>)
 8006bbe:	1d3b      	adds	r3, r7, #4
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f01b fd4d 	bl	8022660 <siprintf>
			USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006bc6:	1d3b      	adds	r3, r7, #4
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f7ff faff 	bl	80061cc <strlen>
 8006bce:	0002      	movs	r2, r0
 8006bd0:	1d3b      	adds	r3, r7, #4
 8006bd2:	9200      	str	r2, [sp, #0]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	2006      	movs	r0, #6
 8006bda:	f00a ff3f 	bl	8011a5c <USBPD_TRACE_Add>

			//Save TIM2 CNT value to ValPrev
			encoderValPrev = encoderVal;
 8006bde:	4b4c      	ldr	r3, [pc, #304]	; (8006d10 <encoder_turn_isr+0x330>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b4c      	ldr	r3, [pc, #304]	; (8006d14 <encoder_turn_isr+0x334>)
 8006be4:	601a      	str	r2, [r3, #0]

		}
		break;
 8006be6:	e08c      	b.n	8006d02 <encoder_turn_isr+0x322>

		case ADJUSTMENT_CURRENT_OCP:
				{
					//Get direction of encoder turning
					if (encoderVal < encoderValPrev) {
 8006be8:	4b49      	ldr	r3, [pc, #292]	; (8006d10 <encoder_turn_isr+0x330>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b49      	ldr	r3, [pc, #292]	; (8006d14 <encoder_turn_isr+0x334>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	da07      	bge.n	8006c04 <encoder_turn_isr+0x224>
						currentOCPTemp += val;
 8006bf4:	4b56      	ldr	r3, [pc, #344]	; (8006d50 <encoder_turn_isr+0x370>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b49      	ldr	r3, [pc, #292]	; (8006d20 <encoder_turn_isr+0x340>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	18d2      	adds	r2, r2, r3
 8006bfe:	4b54      	ldr	r3, [pc, #336]	; (8006d50 <encoder_turn_isr+0x370>)
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	e006      	b.n	8006c12 <encoder_turn_isr+0x232>
					} else {
						currentOCPTemp -= val;
 8006c04:	4b52      	ldr	r3, [pc, #328]	; (8006d50 <encoder_turn_isr+0x370>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	4b45      	ldr	r3, [pc, #276]	; (8006d20 <encoder_turn_isr+0x340>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	1ad2      	subs	r2, r2, r3
 8006c0e:	4b50      	ldr	r3, [pc, #320]	; (8006d50 <encoder_turn_isr+0x370>)
 8006c10:	601a      	str	r2, [r3, #0]
					}

					//If required temp value is within limits, assign it to voltage
					if (currentMin <= currentOCPTemp && currentOCPTemp <= currentMax) {
 8006c12:	4b4b      	ldr	r3, [pc, #300]	; (8006d40 <encoder_turn_isr+0x360>)
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4b4e      	ldr	r3, [pc, #312]	; (8006d50 <encoder_turn_isr+0x370>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	dc0a      	bgt.n	8006c34 <encoder_turn_isr+0x254>
 8006c1e:	4b4c      	ldr	r3, [pc, #304]	; (8006d50 <encoder_turn_isr+0x370>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4b48      	ldr	r3, [pc, #288]	; (8006d44 <encoder_turn_isr+0x364>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	dc04      	bgt.n	8006c34 <encoder_turn_isr+0x254>
						currentOCP = currentOCPTemp;
 8006c2a:	4b49      	ldr	r3, [pc, #292]	; (8006d50 <encoder_turn_isr+0x370>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	4b49      	ldr	r3, [pc, #292]	; (8006d54 <encoder_turn_isr+0x374>)
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	e003      	b.n	8006c3c <encoder_turn_isr+0x25c>
					} else {
						currentOCPTemp = currentOCP;
 8006c34:	4b47      	ldr	r3, [pc, #284]	; (8006d54 <encoder_turn_isr+0x374>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	4b45      	ldr	r3, [pc, #276]	; (8006d50 <encoder_turn_isr+0x370>)
 8006c3a:	601a      	str	r2, [r3, #0]
					}

					// Get number of int numbers in voltage var
					integer_part = (int)currentOCP;
 8006c3c:	4b45      	ldr	r3, [pc, #276]	; (8006d54 <encoder_turn_isr+0x374>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	4b3b      	ldr	r3, [pc, #236]	; (8006d30 <encoder_turn_isr+0x350>)
 8006c42:	601a      	str	r2, [r3, #0]
					num_digits = 0;
 8006c44:	4b3b      	ldr	r3, [pc, #236]	; (8006d34 <encoder_turn_isr+0x354>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]

					while (integer_part) {
 8006c4a:	e00e      	b.n	8006c6a <encoder_turn_isr+0x28a>
						integer_part = integer_part/10;
 8006c4c:	4b38      	ldr	r3, [pc, #224]	; (8006d30 <encoder_turn_isr+0x350>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	210a      	movs	r1, #10
 8006c52:	0018      	movs	r0, r3
 8006c54:	f7ff fb56 	bl	8006304 <__divsi3>
 8006c58:	0003      	movs	r3, r0
 8006c5a:	001a      	movs	r2, r3
 8006c5c:	4b34      	ldr	r3, [pc, #208]	; (8006d30 <encoder_turn_isr+0x350>)
 8006c5e:	601a      	str	r2, [r3, #0]
						num_digits++;
 8006c60:	4b34      	ldr	r3, [pc, #208]	; (8006d34 <encoder_turn_isr+0x354>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	4b33      	ldr	r3, [pc, #204]	; (8006d34 <encoder_turn_isr+0x354>)
 8006c68:	601a      	str	r2, [r3, #0]
					while (integer_part) {
 8006c6a:	4b31      	ldr	r3, [pc, #196]	; (8006d30 <encoder_turn_isr+0x350>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1ec      	bne.n	8006c4c <encoder_turn_isr+0x26c>
					}

					//Based on user selected currentOCP calculate the required DAC out...
					V_TRIP = (currentOCP * R_OCP_MOHMS * G_OCP)/1000; // mV (mA * mOhms * Gain)
 8006c72:	4b38      	ldr	r3, [pc, #224]	; (8006d54 <encoder_turn_isr+0x374>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	001a      	movs	r2, r3
 8006c78:	0013      	movs	r3, r2
 8006c7a:	015b      	lsls	r3, r3, #5
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	189b      	adds	r3, r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	001a      	movs	r2, r3
 8006c86:	23fa      	movs	r3, #250	; 0xfa
 8006c88:	0099      	lsls	r1, r3, #2
 8006c8a:	0010      	movs	r0, r2
 8006c8c:	f7ff fab0 	bl	80061f0 <__udivsi3>
 8006c90:	0003      	movs	r3, r0
 8006c92:	001a      	movs	r2, r3
 8006c94:	4b30      	ldr	r3, [pc, #192]	; (8006d58 <encoder_turn_isr+0x378>)
 8006c96:	601a      	str	r2, [r3, #0]
					//Convert DAC_OUT voltage to 12B resolution
					dac_value = (V_TRIP *4095) / VDDA_APPLI;//__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B);
 8006c98:	4b2f      	ldr	r3, [pc, #188]	; (8006d58 <encoder_turn_isr+0x378>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	0013      	movs	r3, r2
 8006c9e:	031b      	lsls	r3, r3, #12
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	492e      	ldr	r1, [pc, #184]	; (8006d5c <encoder_turn_isr+0x37c>)
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f7ff fb2d 	bl	8006304 <__divsi3>
 8006caa:	0003      	movs	r3, r0
 8006cac:	001a      	movs	r2, r3
 8006cae:	4b2c      	ldr	r3, [pc, #176]	; (8006d60 <encoder_turn_isr+0x380>)
 8006cb0:	601a      	str	r2, [r3, #0]

					//Write output with DAC..
					HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8006cb2:	4b2b      	ldr	r3, [pc, #172]	; (8006d60 <encoder_turn_isr+0x380>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	482b      	ldr	r0, [pc, #172]	; (8006d64 <encoder_turn_isr+0x384>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2100      	movs	r1, #0
 8006cbc:	f003 fc84 	bl	800a5c8 <HAL_DAC_SetValue>

					//Print the voltage to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
					max7219_PrintItos(SEGMENT_2, num_digits, currentOCP, 4);
 8006cc0:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <encoder_turn_isr+0x354>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	b2d9      	uxtb	r1, r3
 8006cc6:	4b23      	ldr	r3, [pc, #140]	; (8006d54 <encoder_turn_isr+0x374>)
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	2304      	movs	r3, #4
 8006ccc:	2002      	movs	r0, #2
 8006cce:	f000 fc6f 	bl	80075b0 <max7219_PrintItos>

					//Print to debug
					char _str[50];
					sprintf(_str,"OCP_I selected: %d mA", currentOCP);
 8006cd2:	4b20      	ldr	r3, [pc, #128]	; (8006d54 <encoder_turn_isr+0x374>)
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	4924      	ldr	r1, [pc, #144]	; (8006d68 <encoder_turn_isr+0x388>)
 8006cd8:	1d3b      	adds	r3, r7, #4
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f01b fcc0 	bl	8022660 <siprintf>
					USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006ce0:	1d3b      	adds	r3, r7, #4
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f7ff fa72 	bl	80061cc <strlen>
 8006ce8:	0002      	movs	r2, r0
 8006cea:	1d3b      	adds	r3, r7, #4
 8006cec:	9200      	str	r2, [sp, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	2006      	movs	r0, #6
 8006cf4:	f00a feb2 	bl	8011a5c <USBPD_TRACE_Add>

					//Save TIM2 CNT value to ValPrev
					encoderValPrev = encoderVal;
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <encoder_turn_isr+0x330>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <encoder_turn_isr+0x334>)
 8006cfe:	601a      	str	r2, [r3, #0]

				}
				break;
 8006d00:	46c0      	nop			; (mov r8, r8)

		}
	}
}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	b00e      	add	sp, #56	; 0x38
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	40000400 	.word	0x40000400
 8006d10:	2000030c 	.word	0x2000030c
 8006d14:	20000310 	.word	0x20000310
 8006d18:	20000034 	.word	0x20000034
 8006d1c:	20000010 	.word	0x20000010
 8006d20:	20000008 	.word	0x20000008
 8006d24:	20000014 	.word	0x20000014
 8006d28:	20000018 	.word	0x20000018
 8006d2c:	2000000c 	.word	0x2000000c
 8006d30:	2000031c 	.word	0x2000031c
 8006d34:	20000320 	.word	0x20000320
 8006d38:	08022f64 	.word	0x08022f64
 8006d3c:	20000028 	.word	0x20000028
 8006d40:	20000318 	.word	0x20000318
 8006d44:	20000030 	.word	0x20000030
 8006d48:	2000001c 	.word	0x2000001c
 8006d4c:	08022f7c 	.word	0x08022f7c
 8006d50:	2000002c 	.word	0x2000002c
 8006d54:	20000020 	.word	0x20000020
 8006d58:	20000314 	.word	0x20000314
 8006d5c:	00000ce4 	.word	0x00000ce4
 8006d60:	20000024 	.word	0x20000024
 8006d64:	20000414 	.word	0x20000414
 8006d68:	08022f94 	.word	0x08022f94

08006d6c <button_isr>:


/**
 * Button interrupt service routine
 */
void button_isr(void){
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b096      	sub	sp, #88	; 0x58
 8006d70:	af02      	add	r7, sp, #8
	/*
	const char response[] = "POWER is ON\r\n";
	        LPUART_Transmit(LPUART2, (const uint8_t*)response, sizeof(response) - 1);*/

	//Mask unwanted button interrupts caused by debouncing on exti line 3 (PD8)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM8);
 8006d72:	4a4f      	ldr	r2, [pc, #316]	; (8006eb0 <button_isr+0x144>)
 8006d74:	2380      	movs	r3, #128	; 0x80
 8006d76:	58d3      	ldr	r3, [r2, r3]
 8006d78:	494d      	ldr	r1, [pc, #308]	; (8006eb0 <button_isr+0x144>)
 8006d7a:	4a4e      	ldr	r2, [pc, #312]	; (8006eb4 <button_isr+0x148>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2280      	movs	r2, #128	; 0x80
 8006d80:	508b      	str	r3, [r1, r2]

	//Set debouncing time in ms
	TIM7->ARR = 200;
 8006d82:	4b4d      	ldr	r3, [pc, #308]	; (8006eb8 <button_isr+0x14c>)
 8006d84:	22c8      	movs	r2, #200	; 0xc8
 8006d86:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006d88:	4b4b      	ldr	r3, [pc, #300]	; (8006eb8 <button_isr+0x14c>)
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f7ff fcc9 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8006d92:	4b49      	ldr	r3, [pc, #292]	; (8006eb8 <button_isr+0x14c>)
 8006d94:	0018      	movs	r0, r3
 8006d96:	f7ff fcb7 	bl	8006708 <LL_TIM_EnableCounter>

	//Decrement encoderPress value if higher than 4
	if (encoderPress > 1){
 8006d9a:	4b48      	ldr	r3, [pc, #288]	; (8006ebc <button_isr+0x150>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	dd05      	ble.n	8006dae <button_isr+0x42>
		encoderPress--;
 8006da2:	4b46      	ldr	r3, [pc, #280]	; (8006ebc <button_isr+0x150>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	1e5a      	subs	r2, r3, #1
 8006da8:	4b44      	ldr	r3, [pc, #272]	; (8006ebc <button_isr+0x150>)
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	e002      	b.n	8006db4 <button_isr+0x48>
	}
	else {
		encoderPress = 4;
 8006dae:	4b43      	ldr	r3, [pc, #268]	; (8006ebc <button_isr+0x150>)
 8006db0:	2204      	movs	r2, #4
 8006db2:	601a      	str	r2, [r3, #0]
	}

	//Choose addition value based on encoderPress val and current ADJUSTMENT_STATE (voltage/current)
	switch (currentState){
 8006db4:	4b42      	ldr	r3, [pc, #264]	; (8006ec0 <button_isr+0x154>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d023      	beq.n	8006e06 <button_isr+0x9a>
 8006dbe:	dc44      	bgt.n	8006e4a <button_isr+0xde>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d020      	beq.n	8006e06 <button_isr+0x9a>
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d140      	bne.n	8006e4a <button_isr+0xde>
		case ADJUSTMENT_VOLTAGE:
			switch (encoderPress) {
 8006dc8:	4b3c      	ldr	r3, [pc, #240]	; (8006ebc <button_isr+0x150>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d014      	beq.n	8006dfa <button_isr+0x8e>
 8006dd0:	dc38      	bgt.n	8006e44 <button_isr+0xd8>
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d00d      	beq.n	8006df2 <button_isr+0x86>
 8006dd6:	dc35      	bgt.n	8006e44 <button_isr+0xd8>
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d002      	beq.n	8006de2 <button_isr+0x76>
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d004      	beq.n	8006dea <button_isr+0x7e>
			case 1: val = 2; break;
			case 2: val = 10; break;
			case 3: val = 100; break;
			case 4: val = 1000; break;
			}
		 break;
 8006de0:	e030      	b.n	8006e44 <button_isr+0xd8>
			case 1: val = 2; break;
 8006de2:	4b38      	ldr	r3, [pc, #224]	; (8006ec4 <button_isr+0x158>)
 8006de4:	2202      	movs	r2, #2
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	e00c      	b.n	8006e04 <button_isr+0x98>
			case 2: val = 10; break;
 8006dea:	4b36      	ldr	r3, [pc, #216]	; (8006ec4 <button_isr+0x158>)
 8006dec:	220a      	movs	r2, #10
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	e008      	b.n	8006e04 <button_isr+0x98>
			case 3: val = 100; break;
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <button_isr+0x158>)
 8006df4:	2264      	movs	r2, #100	; 0x64
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	e004      	b.n	8006e04 <button_isr+0x98>
			case 4: val = 1000; break;
 8006dfa:	4b32      	ldr	r3, [pc, #200]	; (8006ec4 <button_isr+0x158>)
 8006dfc:	22fa      	movs	r2, #250	; 0xfa
 8006dfe:	0092      	lsls	r2, r2, #2
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	46c0      	nop			; (mov r8, r8)
		 break;
 8006e04:	e01e      	b.n	8006e44 <button_isr+0xd8>
		case ADJUSTMENT_CURRENT_OCP:
		case ADJUSTMENT_CURRENT:
			switch (encoderPress) {
 8006e06:	4b2d      	ldr	r3, [pc, #180]	; (8006ebc <button_isr+0x150>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d014      	beq.n	8006e38 <button_isr+0xcc>
 8006e0e:	dc1b      	bgt.n	8006e48 <button_isr+0xdc>
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d00d      	beq.n	8006e30 <button_isr+0xc4>
 8006e14:	dc18      	bgt.n	8006e48 <button_isr+0xdc>
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d002      	beq.n	8006e20 <button_isr+0xb4>
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d004      	beq.n	8006e28 <button_isr+0xbc>
			case 1: val = 5; break;
			case 2: val = 10; break;
			case 3: val = 100; break;
			case 4: val = 1000; break;
			}
		 break;
 8006e1e:	e013      	b.n	8006e48 <button_isr+0xdc>
			case 1: val = 5; break;
 8006e20:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <button_isr+0x158>)
 8006e22:	2205      	movs	r2, #5
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e00c      	b.n	8006e42 <button_isr+0xd6>
			case 2: val = 10; break;
 8006e28:	4b26      	ldr	r3, [pc, #152]	; (8006ec4 <button_isr+0x158>)
 8006e2a:	220a      	movs	r2, #10
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e008      	b.n	8006e42 <button_isr+0xd6>
			case 3: val = 100; break;
 8006e30:	4b24      	ldr	r3, [pc, #144]	; (8006ec4 <button_isr+0x158>)
 8006e32:	2264      	movs	r2, #100	; 0x64
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e004      	b.n	8006e42 <button_isr+0xd6>
			case 4: val = 1000; break;
 8006e38:	4b22      	ldr	r3, [pc, #136]	; (8006ec4 <button_isr+0x158>)
 8006e3a:	22fa      	movs	r2, #250	; 0xfa
 8006e3c:	0092      	lsls	r2, r2, #2
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	46c0      	nop			; (mov r8, r8)
		 break;
 8006e42:	e001      	b.n	8006e48 <button_isr+0xdc>
		 break;
 8006e44:	46c0      	nop			; (mov r8, r8)
 8006e46:	e000      	b.n	8006e4a <button_isr+0xde>
		 break;
 8006e48:	46c0      	nop			; (mov r8, r8)
	}

	char _str[60];
	uint32_t voltageADC = BSP_PWR_VBUSGetVoltage(0);
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f014 fbac 	bl	801b5a8 <BSP_PWR_VBUSGetVoltage>
 8006e50:	0003      	movs	r3, r0
 8006e52:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t currentADC= BSP_PWR_VBUSGetCurrent(0);
 8006e54:	2000      	movs	r0, #0
 8006e56:	f014 fbc5 	bl	801b5e4 <BSP_PWR_VBUSGetCurrent>
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t currentOCP_ADC= BSP_PWR_VBUSGetCurrentOCP(0);
 8006e5e:	2000      	movs	r0, #0
 8006e60:	f014 fce4 	bl	801b82c <BSP_PWR_VBUSGetCurrentOCP>
 8006e64:	0003      	movs	r3, r0
 8006e66:	647b      	str	r3, [r7, #68]	; 0x44

	// Use snprintf to limit the number of characters written
	int len = snprintf(_str, sizeof(_str), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltageADC, currentADC, currentOCP_ADC);
 8006e68:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e6a:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <button_isr+0x15c>)
 8006e6c:	1d38      	adds	r0, r7, #4
 8006e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	000b      	movs	r3, r1
 8006e78:	213c      	movs	r1, #60	; 0x3c
 8006e7a:	f01b fbbd 	bl	80225f8 <sniprintf>
 8006e7e:	0003      	movs	r3, r0
 8006e80:	643b      	str	r3, [r7, #64]	; 0x40

	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006e82:	1d3b      	adds	r3, r7, #4
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7ff f9a1 	bl	80061cc <strlen>
 8006e8a:	0002      	movs	r2, r0
 8006e8c:	1d3b      	adds	r3, r7, #4
 8006e8e:	9200      	str	r2, [sp, #0]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2100      	movs	r1, #0
 8006e94:	2006      	movs	r0, #6
 8006e96:	f00a fde1 	bl	8011a5c <USBPD_TRACE_Add>

	//Erase btn (PC3) interrupt flag
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8006e9a:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <button_isr+0x144>)
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	60da      	str	r2, [r3, #12]
 8006ea0:	4b03      	ldr	r3, [pc, #12]	; (8006eb0 <button_isr+0x144>)
 8006ea2:	2208      	movs	r2, #8
 8006ea4:	611a      	str	r2, [r3, #16]

}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b014      	add	sp, #80	; 0x50
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	40021800 	.word	0x40021800
 8006eb4:	fffffeff 	.word	0xfffffeff
 8006eb8:	40001400 	.word	0x40001400
 8006ebc:	20000004 	.word	0x20000004
 8006ec0:	20000034 	.word	0x20000034
 8006ec4:	20000008 	.word	0x20000008
 8006ec8:	08022fac 	.word	0x08022fac

08006ecc <button_timer_isr>:

/*
 * Timer interrupt routine
 */
void button_timer_isr(void){
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
	//Unmask exti line 1, 2 and 3
	EXTI->IMR1 |= EXTI_IMR1_IM8; //unmask interrupt mask register on exti line 3 (PD8)
 8006ed0:	4a0f      	ldr	r2, [pc, #60]	; (8006f10 <button_timer_isr+0x44>)
 8006ed2:	2380      	movs	r3, #128	; 0x80
 8006ed4:	58d3      	ldr	r3, [r2, r3]
 8006ed6:	490e      	ldr	r1, [pc, #56]	; (8006f10 <button_timer_isr+0x44>)
 8006ed8:	2280      	movs	r2, #128	; 0x80
 8006eda:	0052      	lsls	r2, r2, #1
 8006edc:	4313      	orrs	r3, r2
 8006ede:	2280      	movs	r2, #128	; 0x80
 8006ee0:	508b      	str	r3, [r1, r2]
	EXTI->IMR1 |= EXTI_IMR1_IM2; //unmask interrupt mask register on exti line 2 (PB2)
 8006ee2:	4a0b      	ldr	r2, [pc, #44]	; (8006f10 <button_timer_isr+0x44>)
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	58d3      	ldr	r3, [r2, r3]
 8006ee8:	4909      	ldr	r1, [pc, #36]	; (8006f10 <button_timer_isr+0x44>)
 8006eea:	2204      	movs	r2, #4
 8006eec:	4313      	orrs	r3, r2
 8006eee:	2280      	movs	r2, #128	; 0x80
 8006ef0:	508b      	str	r3, [r1, r2]
	EXTI->IMR1 |= EXTI_IMR1_IM1; //unmask interrupt mask register on exti line 1 (PB1)
 8006ef2:	4a07      	ldr	r2, [pc, #28]	; (8006f10 <button_timer_isr+0x44>)
 8006ef4:	2380      	movs	r3, #128	; 0x80
 8006ef6:	58d3      	ldr	r3, [r2, r3]
 8006ef8:	4905      	ldr	r1, [pc, #20]	; (8006f10 <button_timer_isr+0x44>)
 8006efa:	2202      	movs	r2, #2
 8006efc:	4313      	orrs	r3, r2
 8006efe:	2280      	movs	r2, #128	; 0x80
 8006f00:	508b      	str	r3, [r1, r2]

	//Clear update flag on TIM7
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
 8006f02:	4b04      	ldr	r3, [pc, #16]	; (8006f14 <button_timer_isr+0x48>)
 8006f04:	0018      	movs	r0, r3
 8006f06:	f7ff fc19 	bl	800673c <LL_TIM_ClearFlag_UPDATE>
}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40021800 	.word	0x40021800
 8006f14:	40001400 	.word	0x40001400

08006f18 <request_button_isr>:

/*
 * Request button interrupt routine, request APDO with user voltage and current
 */
void request_button_isr(void){
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b095      	sub	sp, #84	; 0x54
 8006f1c:	af02      	add	r7, sp, #8
	//Read SRC capability
	//USBPD_StatusTypeDef status = USBPD_ERROR;
	//status = USBPD_DPM_RequestGetSourceCapability(0);

	//Mask unwanted button interrupts caused by debouncing on exti line 1 (PB1)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM1);
 8006f1e:	4a2f      	ldr	r2, [pc, #188]	; (8006fdc <request_button_isr+0xc4>)
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	58d3      	ldr	r3, [r2, r3]
 8006f24:	492d      	ldr	r1, [pc, #180]	; (8006fdc <request_button_isr+0xc4>)
 8006f26:	2202      	movs	r2, #2
 8006f28:	4393      	bics	r3, r2
 8006f2a:	2280      	movs	r2, #128	; 0x80
 8006f2c:	508b      	str	r3, [r1, r2]

	//HAL_GPIO_WritePin(OCP_ALERT_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_RESET);

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006f2e:	4b2c      	ldr	r3, [pc, #176]	; (8006fe0 <request_button_isr+0xc8>)
 8006f30:	2100      	movs	r1, #0
 8006f32:	0018      	movs	r0, r3
 8006f34:	f7ff fbf6 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8006f38:	4b29      	ldr	r3, [pc, #164]	; (8006fe0 <request_button_isr+0xc8>)
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7ff fbe4 	bl	8006708 <LL_TIM_EnableCounter>

	g += 1;
 8006f40:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <request_button_isr+0xcc>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	4b27      	ldr	r3, [pc, #156]	; (8006fe4 <request_button_isr+0xcc>)
 8006f48:	601a      	str	r2, [r3, #0]
	} USBPD_DPM_SNKPowerRequestDetailsTypeDef;
	#endif */

	//sourcecapa_limits();

	indexSRCAPDO = USER_SERV_FindSRCIndex(0, &powerRequestDetails, voltage*10, current, PDO_SEL_METHOD_MAX_CUR);
 8006f4a:	4b27      	ldr	r3, [pc, #156]	; (8006fe8 <request_button_isr+0xd0>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	1c1a      	adds	r2, r3, #0
 8006f52:	0092      	lsls	r2, r2, #2
 8006f54:	18d3      	adds	r3, r2, r3
 8006f56:	18db      	adds	r3, r3, r3
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	4b24      	ldr	r3, [pc, #144]	; (8006fec <request_button_isr+0xd4>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4923      	ldr	r1, [pc, #140]	; (8006ff0 <request_button_isr+0xd8>)
 8006f62:	2004      	movs	r0, #4
 8006f64:	9000      	str	r0, [sp, #0]
 8006f66:	2000      	movs	r0, #0
 8006f68:	f015 fb08 	bl	801c57c <USER_SERV_FindSRCIndex>
 8006f6c:	0003      	movs	r3, r0
 8006f6e:	001a      	movs	r2, r3
 8006f70:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <request_button_isr+0xdc>)
 8006f72:	601a      	str	r2, [r3, #0]
	//Print to debug
	char _str[70];
	sprintf(_str,"APDO request: indexSRCPDO= %lu, VBUS= %lu mV, Ibus= %d mA", indexSRCAPDO, 10*voltage, current);
 8006f74:	4b1f      	ldr	r3, [pc, #124]	; (8006ff4 <request_button_isr+0xdc>)
 8006f76:	681c      	ldr	r4, [r3, #0]
 8006f78:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <request_button_isr+0xd0>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	0013      	movs	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	189b      	adds	r3, r3, r2
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	001a      	movs	r2, r3
 8006f86:	4b19      	ldr	r3, [pc, #100]	; (8006fec <request_button_isr+0xd4>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	491b      	ldr	r1, [pc, #108]	; (8006ff8 <request_button_isr+0xe0>)
 8006f8c:	0038      	movs	r0, r7
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	0013      	movs	r3, r2
 8006f92:	0022      	movs	r2, r4
 8006f94:	f01b fb64 	bl	8022660 <siprintf>
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006f98:	003b      	movs	r3, r7
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f7ff f916 	bl	80061cc <strlen>
 8006fa0:	0002      	movs	r2, r0
 8006fa2:	003b      	movs	r3, r7
 8006fa4:	9200      	str	r2, [sp, #0]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2100      	movs	r1, #0
 8006faa:	2006      	movs	r0, #6
 8006fac:	f00a fd56 	bl	8011a5c <USBPD_TRACE_Add>
	USBPD_DPM_RequestSRCPDO(0, indexSRCAPDO, voltage*10, current);
 8006fb0:	4b10      	ldr	r3, [pc, #64]	; (8006ff4 <request_button_isr+0xdc>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	b2d9      	uxtb	r1, r3
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <request_button_isr+0xd0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	1c1a      	adds	r2, r3, #0
 8006fbe:	0092      	lsls	r2, r2, #2
 8006fc0:	18d3      	adds	r3, r2, r3
 8006fc2:	18db      	adds	r3, r3, r3
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	4b09      	ldr	r3, [pc, #36]	; (8006fec <request_button_isr+0xd4>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2000      	movs	r0, #0
 8006fce:	f014 fa81 	bl	801b4d4 <USBPD_DPM_RequestSRCPDO>
	//HAL_Delay(2);
	//HAL_GPIO_WritePin(OCP_ALERT_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b013      	add	sp, #76	; 0x4c
 8006fd8:	bd90      	pop	{r4, r7, pc}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	40021800 	.word	0x40021800
 8006fe0:	40001400 	.word	0x40001400
 8006fe4:	20000348 	.word	0x20000348
 8006fe8:	2000000c 	.word	0x2000000c
 8006fec:	2000001c 	.word	0x2000001c
 8006ff0:	2000032c 	.word	0x2000032c
 8006ff4:	20000324 	.word	0x20000324
 8006ff8:	08022fd4 	.word	0x08022fd4

08006ffc <cur_vol_button_isr>:

/*
 * Change between current and voltage ADJUSTMENT_STATE
 */
void cur_vol_button_isr(void){
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b096      	sub	sp, #88	; 0x58
 8007000:	af02      	add	r7, sp, #8
	//Mask unwanted button interrupts caused by debouncing on exti line 2 (PB2)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM2);
 8007002:	4a4e      	ldr	r2, [pc, #312]	; (800713c <cur_vol_button_isr+0x140>)
 8007004:	2380      	movs	r3, #128	; 0x80
 8007006:	58d3      	ldr	r3, [r2, r3]
 8007008:	494c      	ldr	r1, [pc, #304]	; (800713c <cur_vol_button_isr+0x140>)
 800700a:	2204      	movs	r2, #4
 800700c:	4393      	bics	r3, r2
 800700e:	2280      	movs	r2, #128	; 0x80
 8007010:	508b      	str	r3, [r1, r2]

	//Set debouncing time in ms
	TIM7->ARR = 200;
 8007012:	4b4b      	ldr	r3, [pc, #300]	; (8007140 <cur_vol_button_isr+0x144>)
 8007014:	22c8      	movs	r2, #200	; 0xc8
 8007016:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8007018:	4b49      	ldr	r3, [pc, #292]	; (8007140 <cur_vol_button_isr+0x144>)
 800701a:	2100      	movs	r1, #0
 800701c:	0018      	movs	r0, r3
 800701e:	f7ff fb81 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8007022:	4b47      	ldr	r3, [pc, #284]	; (8007140 <cur_vol_button_isr+0x144>)
 8007024:	0018      	movs	r0, r3
 8007026:	f7ff fb6f 	bl	8006708 <LL_TIM_EnableCounter>

	// Toggle the state
	if (currentState == ADJUSTMENT_CURRENT_OCP)
 800702a:	4b46      	ldr	r3, [pc, #280]	; (8007144 <cur_vol_button_isr+0x148>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d103      	bne.n	800703c <cur_vol_button_isr+0x40>
	{
		currentState = ADJUSTMENT_VOLTAGE;
 8007034:	4b43      	ldr	r3, [pc, #268]	; (8007144 <cur_vol_button_isr+0x148>)
 8007036:	2201      	movs	r2, #1
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	e053      	b.n	80070e4 <cur_vol_button_isr+0xe8>
	}
	else if (currentState == ADJUSTMENT_VOLTAGE)
 800703c:	4b41      	ldr	r3, [pc, #260]	; (8007144 <cur_vol_button_isr+0x148>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b01      	cmp	r3, #1
 8007044:	d127      	bne.n	8007096 <cur_vol_button_isr+0x9a>
	{
		currentState = ADJUSTMENT_CURRENT;
 8007046:	4b3f      	ldr	r3, [pc, #252]	; (8007144 <cur_vol_button_isr+0x148>)
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
		//Display output current
		integer_part = (int)current;
 800704c:	4b3e      	ldr	r3, [pc, #248]	; (8007148 <cur_vol_button_isr+0x14c>)
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	4b3e      	ldr	r3, [pc, #248]	; (800714c <cur_vol_button_isr+0x150>)
 8007052:	601a      	str	r2, [r3, #0]
		num_digits = 0;
 8007054:	4b3e      	ldr	r3, [pc, #248]	; (8007150 <cur_vol_button_isr+0x154>)
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]

		while (integer_part) {
 800705a:	e00e      	b.n	800707a <cur_vol_button_isr+0x7e>
			integer_part = integer_part/10;
 800705c:	4b3b      	ldr	r3, [pc, #236]	; (800714c <cur_vol_button_isr+0x150>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	210a      	movs	r1, #10
 8007062:	0018      	movs	r0, r3
 8007064:	f7ff f94e 	bl	8006304 <__divsi3>
 8007068:	0003      	movs	r3, r0
 800706a:	001a      	movs	r2, r3
 800706c:	4b37      	ldr	r3, [pc, #220]	; (800714c <cur_vol_button_isr+0x150>)
 800706e:	601a      	str	r2, [r3, #0]
			num_digits++;
 8007070:	4b37      	ldr	r3, [pc, #220]	; (8007150 <cur_vol_button_isr+0x154>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	4b36      	ldr	r3, [pc, #216]	; (8007150 <cur_vol_button_isr+0x154>)
 8007078:	601a      	str	r2, [r3, #0]
		while (integer_part) {
 800707a:	4b34      	ldr	r3, [pc, #208]	; (800714c <cur_vol_button_isr+0x150>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1ec      	bne.n	800705c <cur_vol_button_isr+0x60>
		}
		max7219_PrintItos(SEGMENT_2, num_digits, current, 4);
 8007082:	4b33      	ldr	r3, [pc, #204]	; (8007150 <cur_vol_button_isr+0x154>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	b2d9      	uxtb	r1, r3
 8007088:	4b2f      	ldr	r3, [pc, #188]	; (8007148 <cur_vol_button_isr+0x14c>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	2304      	movs	r3, #4
 800708e:	2002      	movs	r0, #2
 8007090:	f000 fa8e 	bl	80075b0 <max7219_PrintItos>
 8007094:	e026      	b.n	80070e4 <cur_vol_button_isr+0xe8>
	}
	else
	{
		currentState = ADJUSTMENT_CURRENT_OCP;
 8007096:	4b2b      	ldr	r3, [pc, #172]	; (8007144 <cur_vol_button_isr+0x148>)
 8007098:	2202      	movs	r2, #2
 800709a:	701a      	strb	r2, [r3, #0]
		//Display output current
		integer_part = (int)currentOCP;
 800709c:	4b2d      	ldr	r3, [pc, #180]	; (8007154 <cur_vol_button_isr+0x158>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4b2a      	ldr	r3, [pc, #168]	; (800714c <cur_vol_button_isr+0x150>)
 80070a2:	601a      	str	r2, [r3, #0]
		num_digits = 0;
 80070a4:	4b2a      	ldr	r3, [pc, #168]	; (8007150 <cur_vol_button_isr+0x154>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]

		while (integer_part) {
 80070aa:	e00e      	b.n	80070ca <cur_vol_button_isr+0xce>
			integer_part = integer_part/10;
 80070ac:	4b27      	ldr	r3, [pc, #156]	; (800714c <cur_vol_button_isr+0x150>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	210a      	movs	r1, #10
 80070b2:	0018      	movs	r0, r3
 80070b4:	f7ff f926 	bl	8006304 <__divsi3>
 80070b8:	0003      	movs	r3, r0
 80070ba:	001a      	movs	r2, r3
 80070bc:	4b23      	ldr	r3, [pc, #140]	; (800714c <cur_vol_button_isr+0x150>)
 80070be:	601a      	str	r2, [r3, #0]
			num_digits++;
 80070c0:	4b23      	ldr	r3, [pc, #140]	; (8007150 <cur_vol_button_isr+0x154>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	4b22      	ldr	r3, [pc, #136]	; (8007150 <cur_vol_button_isr+0x154>)
 80070c8:	601a      	str	r2, [r3, #0]
		while (integer_part) {
 80070ca:	4b20      	ldr	r3, [pc, #128]	; (800714c <cur_vol_button_isr+0x150>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1ec      	bne.n	80070ac <cur_vol_button_isr+0xb0>
		}
		max7219_PrintItos(SEGMENT_2, num_digits, currentOCP, 4);
 80070d2:	4b1f      	ldr	r3, [pc, #124]	; (8007150 <cur_vol_button_isr+0x154>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	b2d9      	uxtb	r1, r3
 80070d8:	4b1e      	ldr	r3, [pc, #120]	; (8007154 <cur_vol_button_isr+0x158>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	2304      	movs	r3, #4
 80070de:	2002      	movs	r0, #2
 80070e0:	f000 fa66 	bl	80075b0 <max7219_PrintItos>
	}

	//Get Voltage level into TRACE
	char _str[60];
	uint32_t voltageADC = BSP_PWR_VBUSGetVoltage(0);
 80070e4:	2000      	movs	r0, #0
 80070e6:	f014 fa5f 	bl	801b5a8 <BSP_PWR_VBUSGetVoltage>
 80070ea:	0003      	movs	r3, r0
 80070ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t currentADC= BSP_PWR_VBUSGetCurrent(0);
 80070ee:	2000      	movs	r0, #0
 80070f0:	f014 fa78 	bl	801b5e4 <BSP_PWR_VBUSGetCurrent>
 80070f4:	0003      	movs	r3, r0
 80070f6:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t currentOCP_ADC= BSP_PWR_VBUSGetCurrentOCP(0);
 80070f8:	2000      	movs	r0, #0
 80070fa:	f014 fb97 	bl	801b82c <BSP_PWR_VBUSGetCurrentOCP>
 80070fe:	0003      	movs	r3, r0
 8007100:	647b      	str	r3, [r7, #68]	; 0x44

	// Use snprintf to limit the number of characters written
	int len = snprintf(_str, sizeof(_str), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltageADC, currentADC, currentOCP_ADC);
 8007102:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007104:	4a14      	ldr	r2, [pc, #80]	; (8007158 <cur_vol_button_isr+0x15c>)
 8007106:	1d38      	adds	r0, r7, #4
 8007108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	000b      	movs	r3, r1
 8007112:	213c      	movs	r1, #60	; 0x3c
 8007114:	f01b fa70 	bl	80225f8 <sniprintf>
 8007118:	0003      	movs	r3, r0
 800711a:	643b      	str	r3, [r7, #64]	; 0x40

	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	0018      	movs	r0, r3
 8007120:	f7ff f854 	bl	80061cc <strlen>
 8007124:	0002      	movs	r2, r0
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	9200      	str	r2, [sp, #0]
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	2006      	movs	r0, #6
 8007130:	f00a fc94 	bl	8011a5c <USBPD_TRACE_Add>
}
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46bd      	mov	sp, r7
 8007138:	b014      	add	sp, #80	; 0x50
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40021800 	.word	0x40021800
 8007140:	40001400 	.word	0x40001400
 8007144:	20000034 	.word	0x20000034
 8007148:	2000001c 	.word	0x2000001c
 800714c:	2000031c 	.word	0x2000031c
 8007150:	20000320 	.word	0x20000320
 8007154:	20000020 	.word	0x20000020
 8007158:	08022fac 	.word	0x08022fac

0800715c <lock_button_isr>:

void lock_button_isr(void){
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
	//Mask unwanted button interrupts caused by debouncing on exti line 2 (PB2)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM2);
 8007160:	4a36      	ldr	r2, [pc, #216]	; (800723c <lock_button_isr+0xe0>)
 8007162:	2380      	movs	r3, #128	; 0x80
 8007164:	58d3      	ldr	r3, [r2, r3]
 8007166:	4935      	ldr	r1, [pc, #212]	; (800723c <lock_button_isr+0xe0>)
 8007168:	2204      	movs	r2, #4
 800716a:	4393      	bics	r3, r2
 800716c:	2280      	movs	r2, #128	; 0x80
 800716e:	508b      	str	r3, [r1, r2]

	//Set debouncing time in ms
	TIM7->ARR = 200;
 8007170:	4b33      	ldr	r3, [pc, #204]	; (8007240 <lock_button_isr+0xe4>)
 8007172:	22c8      	movs	r2, #200	; 0xc8
 8007174:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8007176:	4b32      	ldr	r3, [pc, #200]	; (8007240 <lock_button_isr+0xe4>)
 8007178:	2100      	movs	r1, #0
 800717a:	0018      	movs	r0, r3
 800717c:	f7ff fad2 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8007180:	4b2f      	ldr	r3, [pc, #188]	; (8007240 <lock_button_isr+0xe4>)
 8007182:	0018      	movs	r0, r3
 8007184:	f7ff fac0 	bl	8006708 <LL_TIM_EnableCounter>


	if (outputState == OUTPUT_OFF_STATE)
 8007188:	4b2e      	ldr	r3, [pc, #184]	; (8007244 <lock_button_isr+0xe8>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d103      	bne.n	800719a <lock_button_isr+0x3e>
			{
				outputState = OUTPUT_ON_STATE;
 8007192:	4b2c      	ldr	r3, [pc, #176]	; (8007244 <lock_button_isr+0xe8>)
 8007194:	2201      	movs	r2, #1
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	e04a      	b.n	8007230 <lock_button_isr+0xd4>
			}
			else {
				outputState = OUTPUT_OFF_STATE;
 800719a:	4b2a      	ldr	r3, [pc, #168]	; (8007244 <lock_button_isr+0xe8>)
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]
				//Display voltage
				integer_part = (int)voltage;
 80071a0:	4b29      	ldr	r3, [pc, #164]	; (8007248 <lock_button_isr+0xec>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	4b29      	ldr	r3, [pc, #164]	; (800724c <lock_button_isr+0xf0>)
 80071a6:	601a      	str	r2, [r3, #0]
				num_digits = 0;
 80071a8:	4b29      	ldr	r3, [pc, #164]	; (8007250 <lock_button_isr+0xf4>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]

				while (integer_part) {
 80071ae:	e00e      	b.n	80071ce <lock_button_isr+0x72>
					integer_part = integer_part/10;
 80071b0:	4b26      	ldr	r3, [pc, #152]	; (800724c <lock_button_isr+0xf0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	210a      	movs	r1, #10
 80071b6:	0018      	movs	r0, r3
 80071b8:	f7ff f8a4 	bl	8006304 <__divsi3>
 80071bc:	0003      	movs	r3, r0
 80071be:	001a      	movs	r2, r3
 80071c0:	4b22      	ldr	r3, [pc, #136]	; (800724c <lock_button_isr+0xf0>)
 80071c2:	601a      	str	r2, [r3, #0]
					num_digits++;
 80071c4:	4b22      	ldr	r3, [pc, #136]	; (8007250 <lock_button_isr+0xf4>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	4b21      	ldr	r3, [pc, #132]	; (8007250 <lock_button_isr+0xf4>)
 80071cc:	601a      	str	r2, [r3, #0]
				while (integer_part) {
 80071ce:	4b1f      	ldr	r3, [pc, #124]	; (800724c <lock_button_isr+0xf0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1ec      	bne.n	80071b0 <lock_button_isr+0x54>
				}
				max7219_PrintItos(SEGMENT_1, num_digits, voltage, 3);
 80071d6:	4b1e      	ldr	r3, [pc, #120]	; (8007250 <lock_button_isr+0xf4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	b2d9      	uxtb	r1, r3
 80071dc:	4b1a      	ldr	r3, [pc, #104]	; (8007248 <lock_button_isr+0xec>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	2303      	movs	r3, #3
 80071e2:	2001      	movs	r0, #1
 80071e4:	f000 f9e4 	bl	80075b0 <max7219_PrintItos>
				//Display current
				integer_part = (int)current;
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <lock_button_isr+0xf8>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	4b17      	ldr	r3, [pc, #92]	; (800724c <lock_button_isr+0xf0>)
 80071ee:	601a      	str	r2, [r3, #0]
				num_digits = 0;
 80071f0:	4b17      	ldr	r3, [pc, #92]	; (8007250 <lock_button_isr+0xf4>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]

				while (integer_part) {
 80071f6:	e00e      	b.n	8007216 <lock_button_isr+0xba>
					integer_part = integer_part/10;
 80071f8:	4b14      	ldr	r3, [pc, #80]	; (800724c <lock_button_isr+0xf0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	210a      	movs	r1, #10
 80071fe:	0018      	movs	r0, r3
 8007200:	f7ff f880 	bl	8006304 <__divsi3>
 8007204:	0003      	movs	r3, r0
 8007206:	001a      	movs	r2, r3
 8007208:	4b10      	ldr	r3, [pc, #64]	; (800724c <lock_button_isr+0xf0>)
 800720a:	601a      	str	r2, [r3, #0]
					num_digits++;
 800720c:	4b10      	ldr	r3, [pc, #64]	; (8007250 <lock_button_isr+0xf4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	4b0f      	ldr	r3, [pc, #60]	; (8007250 <lock_button_isr+0xf4>)
 8007214:	601a      	str	r2, [r3, #0]
				while (integer_part) {
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <lock_button_isr+0xf0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1ec      	bne.n	80071f8 <lock_button_isr+0x9c>
				}
				max7219_PrintItos(SEGMENT_2, num_digits, current, 4);
 800721e:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <lock_button_isr+0xf4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	b2d9      	uxtb	r1, r3
 8007224:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <lock_button_isr+0xf8>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	2304      	movs	r3, #4
 800722a:	2002      	movs	r0, #2
 800722c:	f000 f9c0 	bl	80075b0 <max7219_PrintItos>
			}

	ocp_reset_needed = 1;
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <lock_button_isr+0xfc>)
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]
}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40021800 	.word	0x40021800
 8007240:	40001400 	.word	0x40001400
 8007244:	2000034c 	.word	0x2000034c
 8007248:	2000000c 	.word	0x2000000c
 800724c:	2000031c 	.word	0x2000031c
 8007250:	20000320 	.word	0x20000320
 8007254:	2000001c 	.word	0x2000001c
 8007258:	20000328 	.word	0x20000328

0800725c <ocp_alert_isr>:

void ocp_alert_isr(void) {
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
	//Disable relay
	//Change output state
	outputState = OUTPUT_OFF_STATE;
 8007260:	4b2d      	ldr	r3, [pc, #180]	; (8007318 <ocp_alert_isr+0xbc>)
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
	//Disable output
	HAL_GPIO_ReadPin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin) == GPIO_PIN_RESET;
 8007266:	2380      	movs	r3, #128	; 0x80
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4a2c      	ldr	r2, [pc, #176]	; (800731c <ocp_alert_isr+0xc0>)
 800726c:	0019      	movs	r1, r3
 800726e:	0010      	movs	r0, r2
 8007270:	f004 f8d0 	bl	800b414 <HAL_GPIO_ReadPin>


	// Get number of int numbers in voltage var
	integer_part = (int)voltage;
 8007274:	4b2a      	ldr	r3, [pc, #168]	; (8007320 <ocp_alert_isr+0xc4>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4b2a      	ldr	r3, [pc, #168]	; (8007324 <ocp_alert_isr+0xc8>)
 800727a:	601a      	str	r2, [r3, #0]
	num_digits = 0;
 800727c:	4b2a      	ldr	r3, [pc, #168]	; (8007328 <ocp_alert_isr+0xcc>)
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]

	while (integer_part) {
 8007282:	e00e      	b.n	80072a2 <ocp_alert_isr+0x46>
		integer_part = integer_part/10;
 8007284:	4b27      	ldr	r3, [pc, #156]	; (8007324 <ocp_alert_isr+0xc8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	210a      	movs	r1, #10
 800728a:	0018      	movs	r0, r3
 800728c:	f7ff f83a 	bl	8006304 <__divsi3>
 8007290:	0003      	movs	r3, r0
 8007292:	001a      	movs	r2, r3
 8007294:	4b23      	ldr	r3, [pc, #140]	; (8007324 <ocp_alert_isr+0xc8>)
 8007296:	601a      	str	r2, [r3, #0]
		num_digits++;
 8007298:	4b23      	ldr	r3, [pc, #140]	; (8007328 <ocp_alert_isr+0xcc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	4b22      	ldr	r3, [pc, #136]	; (8007328 <ocp_alert_isr+0xcc>)
 80072a0:	601a      	str	r2, [r3, #0]
	while (integer_part) {
 80072a2:	4b20      	ldr	r3, [pc, #128]	; (8007324 <ocp_alert_isr+0xc8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1ec      	bne.n	8007284 <ocp_alert_isr+0x28>
	}

	//Print the voltage to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
	max7219_PrintItos(SEGMENT_1, num_digits, voltage, 3);
 80072aa:	4b1f      	ldr	r3, [pc, #124]	; (8007328 <ocp_alert_isr+0xcc>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	b2d9      	uxtb	r1, r3
 80072b0:	4b1b      	ldr	r3, [pc, #108]	; (8007320 <ocp_alert_isr+0xc4>)
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	2303      	movs	r3, #3
 80072b6:	2001      	movs	r0, #1
 80072b8:	f000 f97a 	bl	80075b0 <max7219_PrintItos>

	//Display output current
	integer_part = (int)current;
 80072bc:	4b1b      	ldr	r3, [pc, #108]	; (800732c <ocp_alert_isr+0xd0>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	4b18      	ldr	r3, [pc, #96]	; (8007324 <ocp_alert_isr+0xc8>)
 80072c2:	601a      	str	r2, [r3, #0]
	num_digits = 0;
 80072c4:	4b18      	ldr	r3, [pc, #96]	; (8007328 <ocp_alert_isr+0xcc>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]

	while (integer_part) {
 80072ca:	e00e      	b.n	80072ea <ocp_alert_isr+0x8e>
		integer_part = integer_part/10;
 80072cc:	4b15      	ldr	r3, [pc, #84]	; (8007324 <ocp_alert_isr+0xc8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	210a      	movs	r1, #10
 80072d2:	0018      	movs	r0, r3
 80072d4:	f7ff f816 	bl	8006304 <__divsi3>
 80072d8:	0003      	movs	r3, r0
 80072da:	001a      	movs	r2, r3
 80072dc:	4b11      	ldr	r3, [pc, #68]	; (8007324 <ocp_alert_isr+0xc8>)
 80072de:	601a      	str	r2, [r3, #0]
		num_digits++;
 80072e0:	4b11      	ldr	r3, [pc, #68]	; (8007328 <ocp_alert_isr+0xcc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <ocp_alert_isr+0xcc>)
 80072e8:	601a      	str	r2, [r3, #0]
	while (integer_part) {
 80072ea:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <ocp_alert_isr+0xc8>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1ec      	bne.n	80072cc <ocp_alert_isr+0x70>
	}
	max7219_PrintItos(SEGMENT_2, num_digits, current, 4);
 80072f2:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <ocp_alert_isr+0xcc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	b2d9      	uxtb	r1, r3
 80072f8:	4b0c      	ldr	r3, [pc, #48]	; (800732c <ocp_alert_isr+0xd0>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	2304      	movs	r3, #4
 80072fe:	2002      	movs	r0, #2
 8007300:	f000 f956 	bl	80075b0 <max7219_PrintItos>


	//Clear IT flag
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <ocp_alert_isr+0xd4>)
 8007306:	2240      	movs	r2, #64	; 0x40
 8007308:	60da      	str	r2, [r3, #12]
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <ocp_alert_isr+0xd4>)
 800730c:	2240      	movs	r2, #64	; 0x40
 800730e:	611a      	str	r2, [r3, #16]
}
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	2000034c 	.word	0x2000034c
 800731c:	50000800 	.word	0x50000800
 8007320:	2000000c 	.word	0x2000000c
 8007324:	2000031c 	.word	0x2000031c
 8007328:	20000320 	.word	0x20000320
 800732c:	2000001c 	.word	0x2000001c
 8007330:	40021800 	.word	0x40021800

08007334 <DEMO_Init>:
/**
  * @brief  Demo initialisation
  * @retval DEMO_ErrorCode status
  */
DEMO_ErrorCode DEMO_Init(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0

  /*Print initial values*/
  //max7219_PrintItos(SEGMENT_1, 4, 3300, 3);
  //max7219_PrintItos(SEGMENT_2, 4, 0, 4);

 return DEMO_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	0018      	movs	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <max7219_Init>:
static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);
static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment);

void max7219_Init(uint8_t intensivity)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	0002      	movs	r2, r0
 8007348:	1dfb      	adds	r3, r7, #7
 800734a:	701a      	strb	r2, [r3, #0]
	max7219_Turn_On();
 800734c:	f000 f87a 	bl	8007444 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8007350:	2107      	movs	r1, #7
 8007352:	200b      	movs	r0, #11
 8007354:	f000 f848 	bl	80073e8 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 8007358:	1dfb      	adds	r3, r7, #7
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	0018      	movs	r0, r3
 800735e:	f000 f806 	bl	800736e <max7219_SetIntensivity>
	max7219_Clean();
 8007362:	f000 f819 	bl	8007398 <max7219_Clean>
}
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	46bd      	mov	sp, r7
 800736a:	b002      	add	sp, #8
 800736c:	bd80      	pop	{r7, pc}

0800736e <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	0002      	movs	r2, r0
 8007376:	1dfb      	adds	r3, r7, #7
 8007378:	701a      	strb	r2, [r3, #0]
	if (intensivity > 0x0F)
 800737a:	1dfb      	adds	r3, r7, #7
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b0f      	cmp	r3, #15
 8007380:	d806      	bhi.n	8007390 <max7219_SetIntensivity+0x22>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 8007382:	1dfb      	adds	r3, r7, #7
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	0019      	movs	r1, r3
 8007388:	200a      	movs	r0, #10
 800738a:	f000 f82d 	bl	80073e8 <max7219_SendData>
 800738e:	e000      	b.n	8007392 <max7219_SetIntensivity+0x24>
		return;
 8007390:	46c0      	nop			; (mov r8, r8)
}
 8007392:	46bd      	mov	sp, r7
 8007394:	b002      	add	sp, #8
 8007396:	bd80      	pop	{r7, pc}

08007398 <max7219_Clean>:

void max7219_Clean()
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 800739e:	1dfb      	adds	r3, r7, #7
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]

	if(decodeMode == 0xFF)
 80073a4:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <max7219_Clean+0x4c>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2bff      	cmp	r3, #255	; 0xff
 80073aa:	d102      	bne.n	80073b2 <max7219_Clean+0x1a>
	{
		clear = BLANK;
 80073ac:	1dfb      	adds	r3, r7, #7
 80073ae:	220f      	movs	r2, #15
 80073b0:	701a      	strb	r2, [r3, #0]
	}

	for (int i = 0; i < 8; ++i)
 80073b2:	2300      	movs	r3, #0
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	e00c      	b.n	80073d2 <max7219_Clean+0x3a>
	{
		max7219_SendData(i + 1, clear);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	3301      	adds	r3, #1
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	1dfb      	adds	r3, r7, #7
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	0019      	movs	r1, r3
 80073c6:	0010      	movs	r0, r2
 80073c8:	f000 f80e 	bl	80073e8 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	3301      	adds	r3, #1
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b07      	cmp	r3, #7
 80073d6:	ddef      	ble.n	80073b8 <max7219_Clean+0x20>
	}
}
 80073d8:	46c0      	nop			; (mov r8, r8)
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	46bd      	mov	sp, r7
 80073de:	b002      	add	sp, #8
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	2000034d 	.word	0x2000034d

080073e8 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	0002      	movs	r2, r0
 80073f0:	1dfb      	adds	r3, r7, #7
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	1dbb      	adds	r3, r7, #6
 80073f6:	1c0a      	adds	r2, r1, #0
 80073f8:	701a      	strb	r2, [r3, #0]
	CS_SET();
 80073fa:	2380      	movs	r3, #128	; 0x80
 80073fc:	015b      	lsls	r3, r3, #5
 80073fe:	480f      	ldr	r0, [pc, #60]	; (800743c <max7219_SendData+0x54>)
 8007400:	2200      	movs	r2, #0
 8007402:	0019      	movs	r1, r3
 8007404:	f004 f823 	bl	800b44e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_PORT, &addr, 1, HAL_MAX_DELAY);
 8007408:	2301      	movs	r3, #1
 800740a:	425b      	negs	r3, r3
 800740c:	1df9      	adds	r1, r7, #7
 800740e:	480c      	ldr	r0, [pc, #48]	; (8007440 <max7219_SendData+0x58>)
 8007410:	2201      	movs	r2, #1
 8007412:	f006 fe65 	bl	800e0e0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI_PORT, &data, 1, HAL_MAX_DELAY);
 8007416:	2301      	movs	r3, #1
 8007418:	425b      	negs	r3, r3
 800741a:	1db9      	adds	r1, r7, #6
 800741c:	4808      	ldr	r0, [pc, #32]	; (8007440 <max7219_SendData+0x58>)
 800741e:	2201      	movs	r2, #1
 8007420:	f006 fe5e 	bl	800e0e0 <HAL_SPI_Transmit>
	CS_RESET();
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	015b      	lsls	r3, r3, #5
 8007428:	4804      	ldr	r0, [pc, #16]	; (800743c <max7219_SendData+0x54>)
 800742a:	2201      	movs	r2, #1
 800742c:	0019      	movs	r1, r3
 800742e:	f004 f80e 	bl	800b44e <HAL_GPIO_WritePin>
}
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	46bd      	mov	sp, r7
 8007436:	b002      	add	sp, #8
 8007438:	bd80      	pop	{r7, pc}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	50000400 	.word	0x50000400
 8007440:	20000428 	.word	0x20000428

08007444 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8007448:	2101      	movs	r1, #1
 800744a:	200c      	movs	r0, #12
 800744c:	f7ff ffcc 	bl	80073e8 <max7219_SendData>
}
 8007450:	46c0      	nop			; (mov r8, r8)
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <max7219_Decode_On>:
{
	max7219_SendData(REG_SHUTDOWN, 0x00);
}

void max7219_Decode_On(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <max7219_Decode_On+0x1c>)
 800745e:	22ff      	movs	r2, #255	; 0xff
 8007460:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8007462:	4b04      	ldr	r3, [pc, #16]	; (8007474 <max7219_Decode_On+0x1c>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	0019      	movs	r1, r3
 8007468:	2009      	movs	r0, #9
 800746a:	f7ff ffbd 	bl	80073e8 <max7219_SendData>
}
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	2000034d 	.word	0x2000034d

08007478 <mapPosition>:
  * @param  newPosition: Starting position of printing
  * @retval MAX7219_Digits: return new mapped Position
  */

static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	0002      	movs	r2, r0
 8007480:	1dfb      	adds	r3, r7, #7
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	1dbb      	adds	r3, r7, #6
 8007486:	1c0a      	adds	r2, r1, #0
 8007488:	701a      	strb	r2, [r3, #0]
	if (segment == 1)
 800748a:	1dbb      	adds	r3, r7, #6
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d102      	bne.n	8007498 <mapPosition+0x20>
	{
		return newPosition;
 8007492:	1dfb      	adds	r3, r7, #7
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	e009      	b.n	80074ac <mapPosition+0x34>
	}
	else if (segment == 2)
 8007498:	1dbb      	adds	r3, r7, #6
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d104      	bne.n	80074aa <mapPosition+0x32>
	{
		return newPosition +4;
 80074a0:	1dfb      	adds	r3, r7, #7
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	3304      	adds	r3, #4
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	e000      	b.n	80074ac <mapPosition+0x34>
	}
	return 0; // In case of invalid position
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b002      	add	sp, #8
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <max7219_PrintDigit>:
  * @param  point: Specify if decimal point should be displayed or not
  * @retval None
  */

void max7219_PrintDigit(MAX7219_Segments segment, MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 80074b4:	b5b0      	push	{r4, r5, r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	0005      	movs	r5, r0
 80074bc:	000c      	movs	r4, r1
 80074be:	0010      	movs	r0, r2
 80074c0:	0019      	movs	r1, r3
 80074c2:	1dfb      	adds	r3, r7, #7
 80074c4:	1c2a      	adds	r2, r5, #0
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	1dbb      	adds	r3, r7, #6
 80074ca:	1c22      	adds	r2, r4, #0
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	1d7b      	adds	r3, r7, #5
 80074d0:	1c02      	adds	r2, r0, #0
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	1d3b      	adds	r3, r7, #4
 80074d6:	1c0a      	adds	r2, r1, #0
 80074d8:	701a      	strb	r2, [r3, #0]
	MAX7219_Digits mappedPosition = mapPosition(position, segment);
 80074da:	250f      	movs	r5, #15
 80074dc:	197c      	adds	r4, r7, r5
 80074de:	1dfb      	adds	r3, r7, #7
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	1dbb      	adds	r3, r7, #6
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	0011      	movs	r1, r2
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7ff ffc5 	bl	8007478 <mapPosition>
 80074ee:	0003      	movs	r3, r0
 80074f0:	7023      	strb	r3, [r4, #0]
	if(mappedPosition > NUMBER_OF_DIGITS)
 80074f2:	002c      	movs	r4, r5
 80074f4:	193b      	adds	r3, r7, r4
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d852      	bhi.n	80075a2 <max7219_PrintDigit+0xee>
	{
		return;
	}

	if(point)
 80074fc:	1d3b      	adds	r3, r7, #4
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d027      	beq.n	8007554 <max7219_PrintDigit+0xa0>
	{
		if(decodeMode == 0x00)
 8007504:	4b29      	ldr	r3, [pc, #164]	; (80075ac <max7219_PrintDigit+0xf8>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d111      	bne.n	8007530 <max7219_PrintDigit+0x7c>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) | (1 << 7));
 800750c:	1d7b      	adds	r3, r7, #5
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	0018      	movs	r0, r3
 8007512:	f000 f9a9 	bl	8007868 <getSymbol>
 8007516:	0003      	movs	r3, r0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2280      	movs	r2, #128	; 0x80
 800751c:	4252      	negs	r2, r2
 800751e:	4313      	orrs	r3, r2
 8007520:	b2da      	uxtb	r2, r3
 8007522:	193b      	adds	r3, r7, r4
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	0011      	movs	r1, r2
 8007528:	0018      	movs	r0, r3
 800752a:	f7ff ff5d 	bl	80073e8 <max7219_SendData>
 800752e:	e039      	b.n	80075a4 <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 8007530:	4b1e      	ldr	r3, [pc, #120]	; (80075ac <max7219_PrintDigit+0xf8>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2bff      	cmp	r3, #255	; 0xff
 8007536:	d135      	bne.n	80075a4 <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric | (1 << 7));
 8007538:	1d7b      	adds	r3, r7, #5
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2280      	movs	r2, #128	; 0x80
 800753e:	4252      	negs	r2, r2
 8007540:	4313      	orrs	r3, r2
 8007542:	b2da      	uxtb	r2, r3
 8007544:	230f      	movs	r3, #15
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	0011      	movs	r1, r2
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff ff4b 	bl	80073e8 <max7219_SendData>
 8007552:	e027      	b.n	80075a4 <max7219_PrintDigit+0xf0>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8007554:	4b15      	ldr	r3, [pc, #84]	; (80075ac <max7219_PrintDigit+0xf8>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d111      	bne.n	8007580 <max7219_PrintDigit+0xcc>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) & (~(1 << 7)));
 800755c:	1d7b      	adds	r3, r7, #5
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	0018      	movs	r0, r3
 8007562:	f000 f981 	bl	8007868 <getSymbol>
 8007566:	0003      	movs	r3, r0
 8007568:	b2db      	uxtb	r3, r3
 800756a:	227f      	movs	r2, #127	; 0x7f
 800756c:	4013      	ands	r3, r2
 800756e:	b2da      	uxtb	r2, r3
 8007570:	230f      	movs	r3, #15
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	0011      	movs	r1, r2
 8007578:	0018      	movs	r0, r3
 800757a:	f7ff ff35 	bl	80073e8 <max7219_SendData>
 800757e:	e011      	b.n	80075a4 <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <max7219_PrintDigit+0xf8>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2bff      	cmp	r3, #255	; 0xff
 8007586:	d10d      	bne.n	80075a4 <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric & (~(1 << 7)));
 8007588:	1d7b      	adds	r3, r7, #5
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	227f      	movs	r2, #127	; 0x7f
 800758e:	4013      	ands	r3, r2
 8007590:	b2da      	uxtb	r2, r3
 8007592:	230f      	movs	r3, #15
 8007594:	18fb      	adds	r3, r7, r3
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	0011      	movs	r1, r2
 800759a:	0018      	movs	r0, r3
 800759c:	f7ff ff24 	bl	80073e8 <max7219_SendData>
 80075a0:	e000      	b.n	80075a4 <max7219_PrintDigit+0xf0>
		return;
 80075a2:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b004      	add	sp, #16
 80075a8:	bdb0      	pop	{r4, r5, r7, pc}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	2000034d 	.word	0x2000034d

080075b0 <max7219_PrintItos>:
  * @param  decimal_position: Place of decimal point
  * @retval MAX7219_Digits: current cursor position
  */

MAX7219_Digits max7219_PrintItos(MAX7219_Segments segment, MAX7219_Digits position, int value, uint8_t decimal_position)
{
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	0004      	movs	r4, r0
 80075b8:	0008      	movs	r0, r1
 80075ba:	603a      	str	r2, [r7, #0]
 80075bc:	0019      	movs	r1, r3
 80075be:	1dfb      	adds	r3, r7, #7
 80075c0:	1c22      	adds	r2, r4, #0
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	1dbb      	adds	r3, r7, #6
 80075c6:	1c02      	adds	r2, r0, #0
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	1d7b      	adds	r3, r7, #5
 80075cc:	1c0a      	adds	r2, r1, #0
 80075ce:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 80075d0:	21ff      	movs	r1, #255	; 0xff
 80075d2:	2009      	movs	r0, #9
 80075d4:	f7ff ff08 	bl	80073e8 <max7219_SendData>

	int32_t i;
    int8_t num_digits = 0;
 80075d8:	2313      	movs	r3, #19
 80075da:	18fb      	adds	r3, r7, r3
 80075dc:	2200      	movs	r2, #0
 80075de:	701a      	strb	r2, [r3, #0]

	if (value < 0)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	da11      	bge.n	800760a <max7219_PrintItos+0x5a>
	{
		if(position > 0)
 80075e6:	1dbb      	adds	r3, r7, #6
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <max7219_PrintItos+0x54>
		{
			max7219_SendData(position, MINUS);
 80075ee:	1dbb      	adds	r3, r7, #6
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	210a      	movs	r1, #10
 80075f4:	0018      	movs	r0, r3
 80075f6:	f7ff fef7 	bl	80073e8 <max7219_SendData>
			position--;
 80075fa:	1dbb      	adds	r3, r7, #6
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	1dbb      	adds	r3, r7, #6
 8007600:	3a01      	subs	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]
		}
		value = -value;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	425b      	negs	r3, r3
 8007608:	603b      	str	r3, [r7, #0]
	}

	i = 1;
 800760a:	2301      	movs	r3, #1
 800760c:	617b      	str	r3, [r7, #20]

	//Get number of non-zero digits
	while ((value / i) > 9)
 800760e:	e00e      	b.n	800762e <max7219_PrintItos+0x7e>
	{
		i *= 10;
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	0013      	movs	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	189b      	adds	r3, r3, r2
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	617b      	str	r3, [r7, #20]
		num_digits++;
 800761c:	2113      	movs	r1, #19
 800761e:	187b      	adds	r3, r7, r1
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b25b      	sxtb	r3, r3
 8007624:	b2db      	uxtb	r3, r3
 8007626:	3301      	adds	r3, #1
 8007628:	b2da      	uxtb	r2, r3
 800762a:	187b      	adds	r3, r7, r1
 800762c:	701a      	strb	r2, [r3, #0]
	while ((value / i) > 9)
 800762e:	6979      	ldr	r1, [r7, #20]
 8007630:	6838      	ldr	r0, [r7, #0]
 8007632:	f7fe fe67 	bl	8006304 <__divsi3>
 8007636:	0003      	movs	r3, r0
 8007638:	2b09      	cmp	r3, #9
 800763a:	dce9      	bgt.n	8007610 <max7219_PrintItos+0x60>
	}
	num_digits++;
 800763c:	2113      	movs	r1, #19
 800763e:	187b      	adds	r3, r7, r1
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	b25b      	sxtb	r3, r3
 8007644:	b2db      	uxtb	r3, r3
 8007646:	3301      	adds	r3, #1
 8007648:	b2da      	uxtb	r2, r3
 800764a:	187b      	adds	r3, r7, r1
 800764c:	701a      	strb	r2, [r3, #0]

	i /= 10;
*/

	//Print leading zeros and check for decimal point
	for (int j= 4; j > num_digits; j--) {
 800764e:	2304      	movs	r3, #4
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	e018      	b.n	8007686 <max7219_PrintItos+0xd6>
		if(j == decimal_position) {
 8007654:	1d7b      	adds	r3, r7, #5
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	429a      	cmp	r2, r3
 800765c:	d108      	bne.n	8007670 <max7219_PrintItos+0xc0>
			max7219_PrintDigit(segment, j, 0, true);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	b2d9      	uxtb	r1, r3
 8007662:	1dfb      	adds	r3, r7, #7
 8007664:	7818      	ldrb	r0, [r3, #0]
 8007666:	2301      	movs	r3, #1
 8007668:	2200      	movs	r2, #0
 800766a:	f7ff ff23 	bl	80074b4 <max7219_PrintDigit>
 800766e:	e007      	b.n	8007680 <max7219_PrintItos+0xd0>
		}
		else {
			max7219_PrintDigit(segment, j, 0, false);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	b2d9      	uxtb	r1, r3
 8007674:	1dfb      	adds	r3, r7, #7
 8007676:	7818      	ldrb	r0, [r3, #0]
 8007678:	2300      	movs	r3, #0
 800767a:	2200      	movs	r2, #0
 800767c:	f7ff ff1a 	bl	80074b4 <max7219_PrintDigit>
	for (int j= 4; j > num_digits; j--) {
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3b01      	subs	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	2313      	movs	r3, #19
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b25b      	sxtb	r3, r3
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	429a      	cmp	r2, r3
 8007692:	dcdf      	bgt.n	8007654 <max7219_PrintItos+0xa4>
		}
	}


	//Print each number and decimal point
	while (i > 0)
 8007694:	e048      	b.n	8007728 <max7219_PrintItos+0x178>
	{
		if(position > 0)
 8007696:	1dbb      	adds	r3, r7, #6
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d03d      	beq.n	800771a <max7219_PrintItos+0x16a>
		{	//If current number position is decimal point, print also decimal point
			if(position == decimal_position) {
 800769e:	1dba      	adds	r2, r7, #6
 80076a0:	1d7b      	adds	r3, r7, #5
 80076a2:	7812      	ldrb	r2, [r2, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d119      	bne.n	80076de <max7219_PrintItos+0x12e>
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, true);
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	0013      	movs	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	189b      	adds	r3, r3, r2
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	001a      	movs	r2, r3
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	0011      	movs	r1, r2
 80076ba:	0018      	movs	r0, r3
 80076bc:	f7fe ff08 	bl	80064d0 <__aeabi_idivmod>
 80076c0:	000b      	movs	r3, r1
 80076c2:	6979      	ldr	r1, [r7, #20]
 80076c4:	0018      	movs	r0, r3
 80076c6:	f7fe fe1d 	bl	8006304 <__divsi3>
 80076ca:	0003      	movs	r3, r0
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	1dbb      	adds	r3, r7, #6
 80076d0:	7819      	ldrb	r1, [r3, #0]
 80076d2:	1dfb      	adds	r3, r7, #7
 80076d4:	7818      	ldrb	r0, [r3, #0]
 80076d6:	2301      	movs	r3, #1
 80076d8:	f7ff feec 	bl	80074b4 <max7219_PrintDigit>
 80076dc:	e018      	b.n	8007710 <max7219_PrintItos+0x160>
			}
			else {
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, false);
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	0013      	movs	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	189b      	adds	r3, r3, r2
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	001a      	movs	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	0011      	movs	r1, r2
 80076ee:	0018      	movs	r0, r3
 80076f0:	f7fe feee 	bl	80064d0 <__aeabi_idivmod>
 80076f4:	000b      	movs	r3, r1
 80076f6:	6979      	ldr	r1, [r7, #20]
 80076f8:	0018      	movs	r0, r3
 80076fa:	f7fe fe03 	bl	8006304 <__divsi3>
 80076fe:	0003      	movs	r3, r0
 8007700:	b2da      	uxtb	r2, r3
 8007702:	1dbb      	adds	r3, r7, #6
 8007704:	7819      	ldrb	r1, [r3, #0]
 8007706:	1dfb      	adds	r3, r7, #7
 8007708:	7818      	ldrb	r0, [r3, #0]
 800770a:	2300      	movs	r3, #0
 800770c:	f7ff fed2 	bl	80074b4 <max7219_PrintDigit>
			}
			position--;
 8007710:	1dbb      	adds	r3, r7, #6
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	1dbb      	adds	r3, r7, #6
 8007716:	3a01      	subs	r2, #1
 8007718:	701a      	strb	r2, [r3, #0]
		}

		i /= 10;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	210a      	movs	r1, #10
 800771e:	0018      	movs	r0, r3
 8007720:	f7fe fdf0 	bl	8006304 <__divsi3>
 8007724:	0003      	movs	r3, r0
 8007726:	617b      	str	r3, [r7, #20]
	while (i > 0)
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	dcb3      	bgt.n	8007696 <max7219_PrintItos+0xe6>

	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <max7219_PrintItos+0x198>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	0019      	movs	r1, r3
 8007734:	2009      	movs	r0, #9
 8007736:	f7ff fe57 	bl	80073e8 <max7219_SendData>

	return position;
 800773a:	1dbb      	adds	r3, r7, #6
 800773c:	781b      	ldrb	r3, [r3, #0]
}
 800773e:	0018      	movs	r0, r3
 8007740:	46bd      	mov	sp, r7
 8007742:	b007      	add	sp, #28
 8007744:	bd90      	pop	{r4, r7, pc}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	2000034d 	.word	0x2000034d

0800774c <max7219_BlinkDigit>:
  * @param  ms: Blink delay in milliseconds
  * @param  decimal_position: place of decimal point
  * @retval None
  */

void max7219_BlinkDigit(MAX7219_Segments segment, int *valuePtr, uint8_t n, uint32_t ms, uint8_t decimal_position) {
 800774c:	b5b0      	push	{r4, r5, r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	0011      	movs	r1, r2
 8007756:	607b      	str	r3, [r7, #4]
 8007758:	240f      	movs	r4, #15
 800775a:	193b      	adds	r3, r7, r4
 800775c:	1c02      	adds	r2, r0, #0
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	200e      	movs	r0, #14
 8007762:	183b      	adds	r3, r7, r0
 8007764:	1c0a      	adds	r2, r1, #0
 8007766:	701a      	strb	r2, [r3, #0]
	uint32_t blinkDelay = ms; // Delay in milliseconds (adjust as needed)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	61fb      	str	r3, [r7, #28]
	uint16_t blinkDigit = n; // Digit to blink (0-3)
 800776c:	211a      	movs	r1, #26
 800776e:	187b      	adds	r3, r7, r1
 8007770:	183a      	adds	r2, r7, r0
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	801a      	strh	r2, [r3, #0]
	uint8_t digit;

	//Print the BLANK and also decimal point
	if (blinkDigit == decimal_position) {
 8007776:	2330      	movs	r3, #48	; 0x30
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	187a      	adds	r2, r7, r1
 8007780:	8812      	ldrh	r2, [r2, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d109      	bne.n	800779a <max7219_BlinkDigit+0x4e>
		max7219_PrintDigit(segment, blinkDigit, BLANK, true);
 8007786:	187b      	adds	r3, r7, r1
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b2d9      	uxtb	r1, r3
 800778c:	193b      	adds	r3, r7, r4
 800778e:	7818      	ldrb	r0, [r3, #0]
 8007790:	2301      	movs	r3, #1
 8007792:	220f      	movs	r2, #15
 8007794:	f7ff fe8e 	bl	80074b4 <max7219_PrintDigit>
 8007798:	e00a      	b.n	80077b0 <max7219_BlinkDigit+0x64>
	}
	//Print the BLANK without decimal point
	else {
		max7219_PrintDigit(segment, blinkDigit, BLANK, false);
 800779a:	231a      	movs	r3, #26
 800779c:	18fb      	adds	r3, r7, r3
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b2d9      	uxtb	r1, r3
 80077a2:	230f      	movs	r3, #15
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	7818      	ldrb	r0, [r3, #0]
 80077a8:	2300      	movs	r3, #0
 80077aa:	220f      	movs	r2, #15
 80077ac:	f7ff fe82 	bl	80074b4 <max7219_PrintDigit>
	}

	//Delay
	uint32_t blinkTimer = HAL_GetTick() + blinkDelay;
 80077b0:	f001 fcaa 	bl	8009108 <HAL_GetTick>
 80077b4:	0002      	movs	r2, r0
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	189b      	adds	r3, r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
	while (HAL_GetTick() < blinkTimer);
 80077bc:	46c0      	nop			; (mov r8, r8)
 80077be:	f001 fca3 	bl	8009108 <HAL_GetTick>
 80077c2:	0002      	movs	r2, r0
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d8f9      	bhi.n	80077be <max7219_BlinkDigit+0x72>

	// Get the specific digit value at n position
    digit = (*valuePtr / lcdPow10(blinkDigit-1)) % 10;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	001c      	movs	r4, r3
 80077d0:	251a      	movs	r5, #26
 80077d2:	197b      	adds	r3, r7, r5
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	0018      	movs	r0, r3
 80077de:	f000 f855 	bl	800788c <lcdPow10>
 80077e2:	0003      	movs	r3, r0
 80077e4:	0019      	movs	r1, r3
 80077e6:	0020      	movs	r0, r4
 80077e8:	f7fe fd02 	bl	80061f0 <__udivsi3>
 80077ec:	0003      	movs	r3, r0
 80077ee:	210a      	movs	r1, #10
 80077f0:	0018      	movs	r0, r3
 80077f2:	f7fe fd83 	bl	80062fc <__aeabi_uidivmod>
 80077f6:	000b      	movs	r3, r1
 80077f8:	001a      	movs	r2, r3
 80077fa:	2013      	movs	r0, #19
 80077fc:	183b      	adds	r3, r7, r0
 80077fe:	701a      	strb	r2, [r3, #0]

	//Print back the original digit and also decimal point
	if (blinkDigit == decimal_position) {
 8007800:	2330      	movs	r3, #48	; 0x30
 8007802:	18fb      	adds	r3, r7, r3
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	197a      	adds	r2, r7, r5
 800780a:	8812      	ldrh	r2, [r2, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d10b      	bne.n	8007828 <max7219_BlinkDigit+0xdc>
		max7219_PrintDigit(segment, blinkDigit, digit, true);
 8007810:	197b      	adds	r3, r7, r5
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b2d9      	uxtb	r1, r3
 8007816:	183b      	adds	r3, r7, r0
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	230f      	movs	r3, #15
 800781c:	18fb      	adds	r3, r7, r3
 800781e:	7818      	ldrb	r0, [r3, #0]
 8007820:	2301      	movs	r3, #1
 8007822:	f7ff fe47 	bl	80074b4 <max7219_PrintDigit>
 8007826:	e00c      	b.n	8007842 <max7219_BlinkDigit+0xf6>
	}
	//Print back the original digit without a decimal point
	else {
		max7219_PrintDigit(segment, blinkDigit, digit, false);
 8007828:	231a      	movs	r3, #26
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b2d9      	uxtb	r1, r3
 8007830:	2313      	movs	r3, #19
 8007832:	18fb      	adds	r3, r7, r3
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	230f      	movs	r3, #15
 8007838:	18fb      	adds	r3, r7, r3
 800783a:	7818      	ldrb	r0, [r3, #0]
 800783c:	2300      	movs	r3, #0
 800783e:	f7ff fe39 	bl	80074b4 <max7219_PrintDigit>
	}

	//Delay
	blinkTimer = HAL_GetTick() + blinkDelay;
 8007842:	f001 fc61 	bl	8009108 <HAL_GetTick>
 8007846:	0002      	movs	r2, r0
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	189b      	adds	r3, r3, r2
 800784c:	617b      	str	r3, [r7, #20]
	while (HAL_GetTick() < blinkTimer);
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	f001 fc5a 	bl	8009108 <HAL_GetTick>
 8007854:	0002      	movs	r2, r0
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	4293      	cmp	r3, r2
 800785a:	d8f9      	bhi.n	8007850 <max7219_BlinkDigit+0x104>
}
 800785c:	46c0      	nop			; (mov r8, r8)
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	46bd      	mov	sp, r7
 8007862:	b008      	add	sp, #32
 8007864:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007868 <getSymbol>:

static uint16_t getSymbol(uint8_t number)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	0002      	movs	r2, r0
 8007870:	1dfb      	adds	r3, r7, #7
 8007872:	701a      	strb	r2, [r3, #0]
	return SYMBOLS[number];
 8007874:	1dfb      	adds	r3, r7, #7
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	4a03      	ldr	r2, [pc, #12]	; (8007888 <getSymbol+0x20>)
 800787a:	5cd3      	ldrb	r3, [r2, r3]
 800787c:	b29b      	uxth	r3, r3
}
 800787e:	0018      	movs	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	b002      	add	sp, #8
 8007884:	bd80      	pop	{r7, pc}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	20000038 	.word	0x20000038

0800788c <lcdPow10>:

static uint32_t lcdPow10(uint8_t n)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	0002      	movs	r2, r0
 8007894:	1dfb      	adds	r3, r7, #7
 8007896:	701a      	strb	r2, [r3, #0]
	uint32_t retval = 1u;
 8007898:	2301      	movs	r3, #1
 800789a:	60fb      	str	r3, [r7, #12]

	while (n > 0u)
 800789c:	e00a      	b.n	80078b4 <lcdPow10+0x28>
	{
		retval *= 10u;
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	0013      	movs	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	189b      	adds	r3, r3, r2
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	60fb      	str	r3, [r7, #12]
		n--;
 80078aa:	1dfb      	adds	r3, r7, #7
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	1dfb      	adds	r3, r7, #7
 80078b0:	3a01      	subs	r2, #1
 80078b2:	701a      	strb	r2, [r3, #0]
	while (n > 0u)
 80078b4:	1dfb      	adds	r3, r7, #7
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1f0      	bne.n	800789e <lcdPow10+0x12>
	}

	return retval;
 80078bc:	68fb      	ldr	r3, [r7, #12]
}
 80078be:	0018      	movs	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b004      	add	sp, #16
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	0002      	movs	r2, r0
 80078d0:	1dfb      	adds	r3, r7, #7
 80078d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80078d4:	1dfb      	adds	r3, r7, #7
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b7f      	cmp	r3, #127	; 0x7f
 80078da:	d809      	bhi.n	80078f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078dc:	1dfb      	adds	r3, r7, #7
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	001a      	movs	r2, r3
 80078e2:	231f      	movs	r3, #31
 80078e4:	401a      	ands	r2, r3
 80078e6:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <__NVIC_EnableIRQ+0x30>)
 80078e8:	2101      	movs	r1, #1
 80078ea:	4091      	lsls	r1, r2
 80078ec:	000a      	movs	r2, r1
 80078ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80078f0:	46c0      	nop			; (mov r8, r8)
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b002      	add	sp, #8
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	e000e100 	.word	0xe000e100

080078fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078fc:	b590      	push	{r4, r7, lr}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	0002      	movs	r2, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	1dfb      	adds	r3, r7, #7
 8007908:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800790a:	1dfb      	adds	r3, r7, #7
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b7f      	cmp	r3, #127	; 0x7f
 8007910:	d828      	bhi.n	8007964 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007912:	4a2f      	ldr	r2, [pc, #188]	; (80079d0 <__NVIC_SetPriority+0xd4>)
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	b25b      	sxtb	r3, r3
 800791a:	089b      	lsrs	r3, r3, #2
 800791c:	33c0      	adds	r3, #192	; 0xc0
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	589b      	ldr	r3, [r3, r2]
 8007922:	1dfa      	adds	r2, r7, #7
 8007924:	7812      	ldrb	r2, [r2, #0]
 8007926:	0011      	movs	r1, r2
 8007928:	2203      	movs	r2, #3
 800792a:	400a      	ands	r2, r1
 800792c:	00d2      	lsls	r2, r2, #3
 800792e:	21ff      	movs	r1, #255	; 0xff
 8007930:	4091      	lsls	r1, r2
 8007932:	000a      	movs	r2, r1
 8007934:	43d2      	mvns	r2, r2
 8007936:	401a      	ands	r2, r3
 8007938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	019b      	lsls	r3, r3, #6
 800793e:	22ff      	movs	r2, #255	; 0xff
 8007940:	401a      	ands	r2, r3
 8007942:	1dfb      	adds	r3, r7, #7
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	0018      	movs	r0, r3
 8007948:	2303      	movs	r3, #3
 800794a:	4003      	ands	r3, r0
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007950:	481f      	ldr	r0, [pc, #124]	; (80079d0 <__NVIC_SetPriority+0xd4>)
 8007952:	1dfb      	adds	r3, r7, #7
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	b25b      	sxtb	r3, r3
 8007958:	089b      	lsrs	r3, r3, #2
 800795a:	430a      	orrs	r2, r1
 800795c:	33c0      	adds	r3, #192	; 0xc0
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007962:	e031      	b.n	80079c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007964:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <__NVIC_SetPriority+0xd8>)
 8007966:	1dfb      	adds	r3, r7, #7
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	0019      	movs	r1, r3
 800796c:	230f      	movs	r3, #15
 800796e:	400b      	ands	r3, r1
 8007970:	3b08      	subs	r3, #8
 8007972:	089b      	lsrs	r3, r3, #2
 8007974:	3306      	adds	r3, #6
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	18d3      	adds	r3, r2, r3
 800797a:	3304      	adds	r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	1dfa      	adds	r2, r7, #7
 8007980:	7812      	ldrb	r2, [r2, #0]
 8007982:	0011      	movs	r1, r2
 8007984:	2203      	movs	r2, #3
 8007986:	400a      	ands	r2, r1
 8007988:	00d2      	lsls	r2, r2, #3
 800798a:	21ff      	movs	r1, #255	; 0xff
 800798c:	4091      	lsls	r1, r2
 800798e:	000a      	movs	r2, r1
 8007990:	43d2      	mvns	r2, r2
 8007992:	401a      	ands	r2, r3
 8007994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	019b      	lsls	r3, r3, #6
 800799a:	22ff      	movs	r2, #255	; 0xff
 800799c:	401a      	ands	r2, r3
 800799e:	1dfb      	adds	r3, r7, #7
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	0018      	movs	r0, r3
 80079a4:	2303      	movs	r3, #3
 80079a6:	4003      	ands	r3, r0
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80079ac:	4809      	ldr	r0, [pc, #36]	; (80079d4 <__NVIC_SetPriority+0xd8>)
 80079ae:	1dfb      	adds	r3, r7, #7
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	001c      	movs	r4, r3
 80079b4:	230f      	movs	r3, #15
 80079b6:	4023      	ands	r3, r4
 80079b8:	3b08      	subs	r3, #8
 80079ba:	089b      	lsrs	r3, r3, #2
 80079bc:	430a      	orrs	r2, r1
 80079be:	3306      	adds	r3, #6
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	18c3      	adds	r3, r0, r3
 80079c4:	3304      	adds	r3, #4
 80079c6:	601a      	str	r2, [r3, #0]
}
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	46bd      	mov	sp, r7
 80079cc:	b003      	add	sp, #12
 80079ce:	bd90      	pop	{r4, r7, pc}
 80079d0:	e000e100 	.word	0xe000e100
 80079d4:	e000ed00 	.word	0xe000ed00

080079d8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80079e8:	4a0c      	ldr	r2, [pc, #48]	; (8007a1c <LL_DMA_SetDataTransferDirection+0x44>)
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	18d3      	adds	r3, r2, r3
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	001a      	movs	r2, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	18d3      	adds	r3, r2, r3
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a09      	ldr	r2, [pc, #36]	; (8007a20 <LL_DMA_SetDataTransferDirection+0x48>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	0019      	movs	r1, r3
 80079fe:	4a07      	ldr	r2, [pc, #28]	; (8007a1c <LL_DMA_SetDataTransferDirection+0x44>)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	18d3      	adds	r3, r2, r3
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	001a      	movs	r2, r3
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	18d3      	adds	r3, r2, r3
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b006      	add	sp, #24
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	08024004 	.word	0x08024004
 8007a20:	ffffbfef 	.word	0xffffbfef

08007a24 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8007a34:	4a0c      	ldr	r2, [pc, #48]	; (8007a68 <LL_DMA_SetMode+0x44>)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	18d3      	adds	r3, r2, r3
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	001a      	movs	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	18d3      	adds	r3, r2, r3
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2220      	movs	r2, #32
 8007a46:	4393      	bics	r3, r2
 8007a48:	0019      	movs	r1, r3
 8007a4a:	4a07      	ldr	r2, [pc, #28]	; (8007a68 <LL_DMA_SetMode+0x44>)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	18d3      	adds	r3, r2, r3
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	001a      	movs	r2, r3
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	18d3      	adds	r3, r2, r3
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	601a      	str	r2, [r3, #0]
             Mode);
}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	46bd      	mov	sp, r7
 8007a62:	b006      	add	sp, #24
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	08024004 	.word	0x08024004

08007a6c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8007a7c:	4a0c      	ldr	r2, [pc, #48]	; (8007ab0 <LL_DMA_SetPeriphIncMode+0x44>)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	18d3      	adds	r3, r2, r3
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	001a      	movs	r2, r3
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	18d3      	adds	r3, r2, r3
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2240      	movs	r2, #64	; 0x40
 8007a8e:	4393      	bics	r3, r2
 8007a90:	0019      	movs	r1, r3
 8007a92:	4a07      	ldr	r2, [pc, #28]	; (8007ab0 <LL_DMA_SetPeriphIncMode+0x44>)
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	18d3      	adds	r3, r2, r3
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	001a      	movs	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	18d3      	adds	r3, r2, r3
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8007aa6:	46c0      	nop			; (mov r8, r8)
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	b006      	add	sp, #24
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	08024004 	.word	0x08024004

08007ab4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8007ac4:	4a0c      	ldr	r2, [pc, #48]	; (8007af8 <LL_DMA_SetMemoryIncMode+0x44>)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	18d3      	adds	r3, r2, r3
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	001a      	movs	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	18d3      	adds	r3, r2, r3
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2280      	movs	r2, #128	; 0x80
 8007ad6:	4393      	bics	r3, r2
 8007ad8:	0019      	movs	r1, r3
 8007ada:	4a07      	ldr	r2, [pc, #28]	; (8007af8 <LL_DMA_SetMemoryIncMode+0x44>)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	18d3      	adds	r3, r2, r3
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	001a      	movs	r2, r3
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	18d3      	adds	r3, r2, r3
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	46bd      	mov	sp, r7
 8007af2:	b006      	add	sp, #24
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	08024004 	.word	0x08024004

08007afc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8007b0c:	4a0c      	ldr	r2, [pc, #48]	; (8007b40 <LL_DMA_SetPeriphSize+0x44>)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	18d3      	adds	r3, r2, r3
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	001a      	movs	r2, r3
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	18d3      	adds	r3, r2, r3
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a09      	ldr	r2, [pc, #36]	; (8007b44 <LL_DMA_SetPeriphSize+0x48>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	0019      	movs	r1, r3
 8007b22:	4a07      	ldr	r2, [pc, #28]	; (8007b40 <LL_DMA_SetPeriphSize+0x44>)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	18d3      	adds	r3, r2, r3
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	001a      	movs	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	18d3      	adds	r3, r2, r3
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	b006      	add	sp, #24
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	08024004 	.word	0x08024004
 8007b44:	fffffcff 	.word	0xfffffcff

08007b48 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8007b58:	4a0c      	ldr	r2, [pc, #48]	; (8007b8c <LL_DMA_SetMemorySize+0x44>)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	18d3      	adds	r3, r2, r3
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	001a      	movs	r2, r3
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	18d3      	adds	r3, r2, r3
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <LL_DMA_SetMemorySize+0x48>)
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	0019      	movs	r1, r3
 8007b6e:	4a07      	ldr	r2, [pc, #28]	; (8007b8c <LL_DMA_SetMemorySize+0x44>)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	18d3      	adds	r3, r2, r3
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	001a      	movs	r2, r3
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	18d3      	adds	r3, r2, r3
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b006      	add	sp, #24
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	08024004 	.word	0x08024004
 8007b90:	fffff3ff 	.word	0xfffff3ff

08007b94 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8007ba4:	4a0c      	ldr	r2, [pc, #48]	; (8007bd8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	18d3      	adds	r3, r2, r3
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	001a      	movs	r2, r3
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	18d3      	adds	r3, r2, r3
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	0019      	movs	r1, r3
 8007bba:	4a07      	ldr	r2, [pc, #28]	; (8007bd8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	18d3      	adds	r3, r2, r3
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	001a      	movs	r2, r3
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	18d3      	adds	r3, r2, r3
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	601a      	str	r2, [r3, #0]
             Priority);
}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	b006      	add	sp, #24
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	08024004 	.word	0x08024004
 8007bdc:	ffffcfff 	.word	0xffffcfff

08007be0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	0a9b      	lsrs	r3, r3, #10
 8007bf0:	4a0f      	ldr	r2, [pc, #60]	; (8007c30 <LL_DMA_SetPeriphRequest+0x50>)
 8007bf2:	405a      	eors	r2, r3
 8007bf4:	0013      	movs	r3, r2
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	1a9b      	subs	r3, r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	18d3      	adds	r3, r2, r3
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4a0b      	ldr	r2, [pc, #44]	; (8007c34 <LL_DMA_SetPeriphRequest+0x54>)
 8007c06:	4694      	mov	ip, r2
 8007c08:	4463      	add	r3, ip
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	227f      	movs	r2, #127	; 0x7f
 8007c0e:	4393      	bics	r3, r2
 8007c10:	0019      	movs	r1, r3
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	18d3      	adds	r3, r2, r3
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4a06      	ldr	r2, [pc, #24]	; (8007c34 <LL_DMA_SetPeriphRequest+0x54>)
 8007c1c:	4694      	mov	ip, r2
 8007c1e:	4463      	add	r3, ip
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	601a      	str	r2, [r3, #0]
}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	b006      	add	sp, #24
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	00100080 	.word	0x00100080
 8007c34:	40020800 	.word	0x40020800

08007c38 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2201      	movs	r2, #1
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	601a      	str	r2, [r3, #0]
}
 8007c4c:	46c0      	nop			; (mov r8, r8)
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	b002      	add	sp, #8
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a03      	ldr	r2, [pc, #12]	; (8007c70 <LL_LPUART_DisableFIFO+0x1c>)
 8007c62:	401a      	ands	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]
}
 8007c68:	46c0      	nop			; (mov r8, r8)
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	b002      	add	sp, #8
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	dfffffff 	.word	0xdfffffff

08007c74 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c84:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f383 8810 	msr	PRIMASK, r3
}
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	08da      	lsrs	r2, r3, #3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	075b      	lsls	r3, r3, #29
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	609a      	str	r2, [r3, #8]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f383 8810 	msr	PRIMASK, r3
}
 8007cb0:	46c0      	nop			; (mov r8, r8)
}
 8007cb2:	46c0      	nop			; (mov r8, r8)
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	b006      	add	sp, #24
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cca:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f383 8810 	msr	PRIMASK, r3
}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <LL_LPUART_SetRXFIFOThreshold+0x48>)
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	065b      	lsls	r3, r3, #25
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	609a      	str	r2, [r3, #8]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f383 8810 	msr	PRIMASK, r3
}
 8007cf8:	46c0      	nop			; (mov r8, r8)
}
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	b006      	add	sp, #24
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	f1ffffff 	.word	0xf1ffffff

08007d08 <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	2380      	movs	r3, #128	; 0x80
 8007d16:	039b      	lsls	r3, r3, #14
 8007d18:	401a      	ands	r2, r3
 8007d1a:	2380      	movs	r3, #128	; 0x80
 8007d1c:	039b      	lsls	r3, r3, #14
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d101      	bne.n	8007d26 <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	0018      	movs	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	b002      	add	sp, #8
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	69da      	ldr	r2, [r3, #28]
 8007d3c:	2380      	movs	r3, #128	; 0x80
 8007d3e:	03db      	lsls	r3, r3, #15
 8007d40:	401a      	ands	r2, r3
 8007d42:	2380      	movs	r3, #128	; 0x80
 8007d44:	03db      	lsls	r3, r3, #15
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d101      	bne.n	8007d4e <LL_LPUART_IsActiveFlag_REACK+0x1e>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <LL_LPUART_IsActiveFlag_REACK+0x20>
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	0018      	movs	r0, r3
 8007d52:	46bd      	mov	sp, r7
 8007d54:	b002      	add	sp, #8
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d60:	f3ef 8310 	mrs	r3, PRIMASK
 8007d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d66:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f383 8810 	msr	PRIMASK, r3
}
 8007d74:	46c0      	nop			; (mov r8, r8)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f383 8810 	msr	PRIMASK, r3
}
 8007d8c:	46c0      	nop			; (mov r8, r8)
}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	46bd      	mov	sp, r7
 8007d92:	b006      	add	sp, #24
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <LL_TIM_SetOnePulseMode>:
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2208      	movs	r2, #8
 8007da6:	4393      	bics	r3, r2
 8007da8:	001a      	movs	r2, r3
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	431a      	orrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	46bd      	mov	sp, r7
 8007db6:	b002      	add	sp, #8
 8007db8:	bd80      	pop	{r7, pc}

08007dba <LL_TIM_EnableARRPreload>:
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2280      	movs	r2, #128	; 0x80
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	b002      	add	sp, #8
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <LL_TIM_SetTriggerOutput>:
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2270      	movs	r2, #112	; 0x70
 8007de6:	4393      	bics	r3, r2
 8007de8:	001a      	movs	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	605a      	str	r2, [r3, #4]
}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	46bd      	mov	sp, r7
 8007df6:	b002      	add	sp, #8
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <LL_TIM_DisableMasterSlaveMode>:
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	4393      	bics	r3, r2
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	46c0      	nop			; (mov r8, r8)
 8007e12:	46bd      	mov	sp, r7
 8007e14:	b002      	add	sp, #8
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <LL_APB1_GRP1_EnableClock+0x28>)
 8007e22:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007e24:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <LL_APB1_GRP1_EnableClock+0x28>)
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <LL_APB1_GRP1_EnableClock+0x28>)
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	4013      	ands	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e36:	68fb      	ldr	r3, [r7, #12]
}
 8007e38:	46c0      	nop			; (mov r8, r8)
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b004      	add	sp, #16
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	40021000 	.word	0x40021000

08007e44 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8007e4c:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <LL_IOP_GRP1_EnableClock+0x28>)
 8007e4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007e50:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <LL_IOP_GRP1_EnableClock+0x28>)
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8007e58:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <LL_IOP_GRP1_EnableClock+0x28>)
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	46c0      	nop			; (mov r8, r8)
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b004      	add	sp, #16
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	40021000 	.word	0x40021000

08007e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e74:	f001 f916 	bl	80090a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e78:	f000 f83a 	bl	8007ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e7c:	f000 fbf4 	bl	8008668 <MX_GPIO_Init>
  MX_DMA_Init();
 8007e80:	f000 fbc6 	bl	8008610 <MX_DMA_Init>
  MX_UCPD1_Init();
 8007e84:	f000 fb1e 	bl	80084c4 <MX_UCPD1_Init>
  MX_ADC1_Init();
 8007e88:	f000 f894 	bl	8007fb4 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8007e8c:	f000 f956 	bl	800813c <MX_LPUART1_UART_Init>
  MX_TIM7_Init();
 8007e90:	f000 fada 	bl	8008448 <MX_TIM7_Init>
  MX_SPI2_Init();
 8007e94:	f000 fa36 	bl	8008304 <MX_SPI2_Init>
  MX_TIM3_Init();
 8007e98:	f000 fa72 	bl	8008380 <MX_TIM3_Init>
  MX_USB_Device_Init();
 8007e9c:	f014 fc86 	bl	801c7ac <MX_USB_Device_Init>
  MX_DAC1_Init();
 8007ea0:	f000 f916 	bl	80080d0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8007ea4:	f7fe fc64 	bl	8006770 <app_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8007ea8:	f00e ffde 	bl	8016e68 <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8007eac:	f011 fdb2 	bl	8019a14 <MX_USBPD_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <main+0x6c>)
 8007eb2:	001a      	movs	r2, r3
 8007eb4:	2102      	movs	r1, #2
 8007eb6:	2010      	movs	r0, #16
 8007eb8:	f00f f920 	bl	80170fc <osMessageQueueNew>
 8007ebc:	0002      	movs	r2, r0
 8007ebe:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <main+0x70>)
 8007ec0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007ec2:	4a08      	ldr	r2, [pc, #32]	; (8007ee4 <main+0x74>)
 8007ec4:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <main+0x78>)
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f00f f815 	bl	8016ef8 <osThreadNew>
 8007ece:	0002      	movs	r2, r0
 8007ed0:	4b06      	ldr	r3, [pc, #24]	; (8007eec <main+0x7c>)
 8007ed2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8007ed4:	f00e ffea 	bl	8016eac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007ed8:	e7fe      	b.n	8007ed8 <main+0x68>
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	08024030 	.word	0x08024030
 8007ee0:	200004dc 	.word	0x200004dc
 8007ee4:	0802400c 	.word	0x0802400c
 8007ee8:	080089a5 	.word	0x080089a5
 8007eec:	200004d8 	.word	0x200004d8

08007ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ef0:	b590      	push	{r4, r7, lr}
 8007ef2:	b095      	sub	sp, #84	; 0x54
 8007ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ef6:	2414      	movs	r4, #20
 8007ef8:	193b      	adds	r3, r7, r4
 8007efa:	0018      	movs	r0, r3
 8007efc:	233c      	movs	r3, #60	; 0x3c
 8007efe:	001a      	movs	r2, r3
 8007f00:	2100      	movs	r1, #0
 8007f02:	f01a fbcd 	bl	80226a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f06:	1d3b      	adds	r3, r7, #4
 8007f08:	0018      	movs	r0, r3
 8007f0a:	2310      	movs	r3, #16
 8007f0c:	001a      	movs	r2, r3
 8007f0e:	2100      	movs	r1, #0
 8007f10:	f01a fbc6 	bl	80226a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f14:	2380      	movs	r3, #128	; 0x80
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f005 f86d 	bl	800cff8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007f1e:	193b      	adds	r3, r7, r4
 8007f20:	2222      	movs	r2, #34	; 0x22
 8007f22:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f24:	193b      	adds	r3, r7, r4
 8007f26:	2280      	movs	r2, #128	; 0x80
 8007f28:	0052      	lsls	r2, r2, #1
 8007f2a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007f2c:	193b      	adds	r3, r7, r4
 8007f2e:	2280      	movs	r2, #128	; 0x80
 8007f30:	03d2      	lsls	r2, r2, #15
 8007f32:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8007f34:	0021      	movs	r1, r4
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	2200      	movs	r2, #0
 8007f3a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007f3c:	187b      	adds	r3, r7, r1
 8007f3e:	2240      	movs	r2, #64	; 0x40
 8007f40:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f42:	187b      	adds	r3, r7, r1
 8007f44:	2202      	movs	r2, #2
 8007f46:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007f48:	187b      	adds	r3, r7, r1
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8007f4e:	187b      	adds	r3, r7, r1
 8007f50:	2200      	movs	r2, #0
 8007f52:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8007f54:	187b      	adds	r3, r7, r1
 8007f56:	2208      	movs	r2, #8
 8007f58:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007f5a:	187b      	adds	r3, r7, r1
 8007f5c:	2280      	movs	r2, #128	; 0x80
 8007f5e:	0292      	lsls	r2, r2, #10
 8007f60:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007f62:	187b      	adds	r3, r7, r1
 8007f64:	2280      	movs	r2, #128	; 0x80
 8007f66:	0492      	lsls	r2, r2, #18
 8007f68:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007f6a:	187b      	adds	r3, r7, r1
 8007f6c:	2280      	movs	r2, #128	; 0x80
 8007f6e:	0592      	lsls	r2, r2, #22
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f72:	187b      	adds	r3, r7, r1
 8007f74:	0018      	movs	r0, r3
 8007f76:	f005 f88b 	bl	800d090 <HAL_RCC_OscConfig>
 8007f7a:	1e03      	subs	r3, r0, #0
 8007f7c:	d001      	beq.n	8007f82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8007f7e:	f000 fd31 	bl	80089e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f82:	1d3b      	adds	r3, r7, #4
 8007f84:	2207      	movs	r2, #7
 8007f86:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f88:	1d3b      	adds	r3, r7, #4
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f8e:	1d3b      	adds	r3, r7, #4
 8007f90:	2200      	movs	r2, #0
 8007f92:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007f94:	1d3b      	adds	r3, r7, #4
 8007f96:	2200      	movs	r2, #0
 8007f98:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	2102      	movs	r1, #2
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f005 fbd6 	bl	800d750 <HAL_RCC_ClockConfig>
 8007fa4:	1e03      	subs	r3, r0, #0
 8007fa6:	d001      	beq.n	8007fac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8007fa8:	f000 fd1c 	bl	80089e4 <Error_Handler>
  }
}
 8007fac:	46c0      	nop			; (mov r8, r8)
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b015      	add	sp, #84	; 0x54
 8007fb2:	bd90      	pop	{r4, r7, pc}

08007fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007fba:	1d3b      	adds	r3, r7, #4
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	001a      	movs	r2, r3
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	f01a fb6c 	bl	80226a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007fc8:	4b3c      	ldr	r3, [pc, #240]	; (80080bc <MX_ADC1_Init+0x108>)
 8007fca:	4a3d      	ldr	r2, [pc, #244]	; (80080c0 <MX_ADC1_Init+0x10c>)
 8007fcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007fce:	4b3b      	ldr	r3, [pc, #236]	; (80080bc <MX_ADC1_Init+0x108>)
 8007fd0:	2280      	movs	r2, #128	; 0x80
 8007fd2:	0612      	lsls	r2, r2, #24
 8007fd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007fd6:	4b39      	ldr	r3, [pc, #228]	; (80080bc <MX_ADC1_Init+0x108>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007fdc:	4b37      	ldr	r3, [pc, #220]	; (80080bc <MX_ADC1_Init+0x108>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007fe2:	4b36      	ldr	r3, [pc, #216]	; (80080bc <MX_ADC1_Init+0x108>)
 8007fe4:	2280      	movs	r2, #128	; 0x80
 8007fe6:	0392      	lsls	r2, r2, #14
 8007fe8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007fea:	4b34      	ldr	r3, [pc, #208]	; (80080bc <MX_ADC1_Init+0x108>)
 8007fec:	2204      	movs	r2, #4
 8007fee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007ff0:	4b32      	ldr	r3, [pc, #200]	; (80080bc <MX_ADC1_Init+0x108>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8007ff6:	4b31      	ldr	r3, [pc, #196]	; (80080bc <MX_ADC1_Init+0x108>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007ffc:	4b2f      	ldr	r3, [pc, #188]	; (80080bc <MX_ADC1_Init+0x108>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8008002:	4b2e      	ldr	r3, [pc, #184]	; (80080bc <MX_ADC1_Init+0x108>)
 8008004:	2203      	movs	r2, #3
 8008006:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008008:	4b2c      	ldr	r3, [pc, #176]	; (80080bc <MX_ADC1_Init+0x108>)
 800800a:	2200      	movs	r2, #0
 800800c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800800e:	4b2b      	ldr	r3, [pc, #172]	; (80080bc <MX_ADC1_Init+0x108>)
 8008010:	2200      	movs	r2, #0
 8008012:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008014:	4b29      	ldr	r3, [pc, #164]	; (80080bc <MX_ADC1_Init+0x108>)
 8008016:	222c      	movs	r2, #44	; 0x2c
 8008018:	2101      	movs	r1, #1
 800801a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800801c:	4b27      	ldr	r3, [pc, #156]	; (80080bc <MX_ADC1_Init+0x108>)
 800801e:	2280      	movs	r2, #128	; 0x80
 8008020:	0152      	lsls	r2, r2, #5
 8008022:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8008024:	4b25      	ldr	r3, [pc, #148]	; (80080bc <MX_ADC1_Init+0x108>)
 8008026:	2207      	movs	r2, #7
 8008028:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800802a:	4b24      	ldr	r3, [pc, #144]	; (80080bc <MX_ADC1_Init+0x108>)
 800802c:	2207      	movs	r2, #7
 800802e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8008030:	4b22      	ldr	r3, [pc, #136]	; (80080bc <MX_ADC1_Init+0x108>)
 8008032:	223c      	movs	r2, #60	; 0x3c
 8008034:	2100      	movs	r1, #0
 8008036:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8008038:	4b20      	ldr	r3, [pc, #128]	; (80080bc <MX_ADC1_Init+0x108>)
 800803a:	2200      	movs	r2, #0
 800803c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800803e:	4b1f      	ldr	r3, [pc, #124]	; (80080bc <MX_ADC1_Init+0x108>)
 8008040:	0018      	movs	r0, r3
 8008042:	f001 f9fd 	bl	8009440 <HAL_ADC_Init>
 8008046:	1e03      	subs	r3, r0, #0
 8008048:	d001      	beq.n	800804e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800804a:	f000 fccb 	bl	80089e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800804e:	1d3b      	adds	r3, r7, #4
 8008050:	4a1c      	ldr	r2, [pc, #112]	; (80080c4 <MX_ADC1_Init+0x110>)
 8008052:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008054:	1d3b      	adds	r3, r7, #4
 8008056:	2200      	movs	r2, #0
 8008058:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	2200      	movs	r2, #0
 800805e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008060:	1d3a      	adds	r2, r7, #4
 8008062:	4b16      	ldr	r3, [pc, #88]	; (80080bc <MX_ADC1_Init+0x108>)
 8008064:	0011      	movs	r1, r2
 8008066:	0018      	movs	r0, r3
 8008068:	f001 fc38 	bl	80098dc <HAL_ADC_ConfigChannel>
 800806c:	1e03      	subs	r3, r0, #0
 800806e:	d001      	beq.n	8008074 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8008070:	f000 fcb8 	bl	80089e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8008074:	1d3b      	adds	r3, r7, #4
 8008076:	4a14      	ldr	r2, [pc, #80]	; (80080c8 <MX_ADC1_Init+0x114>)
 8008078:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800807a:	1d3b      	adds	r3, r7, #4
 800807c:	2204      	movs	r2, #4
 800807e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008080:	1d3a      	adds	r2, r7, #4
 8008082:	4b0e      	ldr	r3, [pc, #56]	; (80080bc <MX_ADC1_Init+0x108>)
 8008084:	0011      	movs	r1, r2
 8008086:	0018      	movs	r0, r3
 8008088:	f001 fc28 	bl	80098dc <HAL_ADC_ConfigChannel>
 800808c:	1e03      	subs	r3, r0, #0
 800808e:	d001      	beq.n	8008094 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8008090:	f000 fca8 	bl	80089e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8008094:	1d3b      	adds	r3, r7, #4
 8008096:	4a0d      	ldr	r2, [pc, #52]	; (80080cc <MX_ADC1_Init+0x118>)
 8008098:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800809a:	1d3b      	adds	r3, r7, #4
 800809c:	2208      	movs	r2, #8
 800809e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080a0:	1d3a      	adds	r2, r7, #4
 80080a2:	4b06      	ldr	r3, [pc, #24]	; (80080bc <MX_ADC1_Init+0x108>)
 80080a4:	0011      	movs	r1, r2
 80080a6:	0018      	movs	r0, r3
 80080a8:	f001 fc18 	bl	80098dc <HAL_ADC_ConfigChannel>
 80080ac:	1e03      	subs	r3, r0, #0
 80080ae:	d001      	beq.n	80080b4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80080b0:	f000 fc98 	bl	80089e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80080b4:	46c0      	nop			; (mov r8, r8)
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b004      	add	sp, #16
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20000350 	.word	0x20000350
 80080c0:	40012400 	.word	0x40012400
 80080c4:	14000020 	.word	0x14000020
 80080c8:	18000040 	.word	0x18000040
 80080cc:	1c000080 	.word	0x1c000080

080080d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08a      	sub	sp, #40	; 0x28
 80080d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80080d6:	1d3b      	adds	r3, r7, #4
 80080d8:	0018      	movs	r0, r3
 80080da:	2324      	movs	r3, #36	; 0x24
 80080dc:	001a      	movs	r2, r3
 80080de:	2100      	movs	r1, #0
 80080e0:	f01a fade 	bl	80226a0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80080e4:	4b13      	ldr	r3, [pc, #76]	; (8008134 <MX_DAC1_Init+0x64>)
 80080e6:	4a14      	ldr	r2, [pc, #80]	; (8008138 <MX_DAC1_Init+0x68>)
 80080e8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80080ea:	4b12      	ldr	r3, [pc, #72]	; (8008134 <MX_DAC1_Init+0x64>)
 80080ec:	0018      	movs	r0, r3
 80080ee:	f002 f996 	bl	800a41e <HAL_DAC_Init>
 80080f2:	1e03      	subs	r3, r0, #0
 80080f4:	d001      	beq.n	80080fa <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 80080f6:	f000 fc75 	bl	80089e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80080fa:	1d3b      	adds	r3, r7, #4
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8008100:	1d3b      	adds	r3, r7, #4
 8008102:	2200      	movs	r2, #0
 8008104:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008106:	1d3b      	adds	r3, r7, #4
 8008108:	2200      	movs	r2, #0
 800810a:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800810c:	1d3b      	adds	r3, r7, #4
 800810e:	2200      	movs	r2, #0
 8008110:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8008112:	1d3b      	adds	r3, r7, #4
 8008114:	2200      	movs	r2, #0
 8008116:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008118:	1d39      	adds	r1, r7, #4
 800811a:	4b06      	ldr	r3, [pc, #24]	; (8008134 <MX_DAC1_Init+0x64>)
 800811c:	2200      	movs	r2, #0
 800811e:	0018      	movs	r0, r3
 8008120:	f002 fa82 	bl	800a628 <HAL_DAC_ConfigChannel>
 8008124:	1e03      	subs	r3, r0, #0
 8008126:	d001      	beq.n	800812c <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8008128:	f000 fc5c 	bl	80089e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800812c:	46c0      	nop			; (mov r8, r8)
 800812e:	46bd      	mov	sp, r7
 8008130:	b00a      	add	sp, #40	; 0x28
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000414 	.word	0x20000414
 8008138:	40007400 	.word	0x40007400

0800813c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800813c:	b590      	push	{r4, r7, lr}
 800813e:	b0a1      	sub	sp, #132	; 0x84
 8008140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8008142:	2364      	movs	r3, #100	; 0x64
 8008144:	18fb      	adds	r3, r7, r3
 8008146:	0018      	movs	r0, r3
 8008148:	231c      	movs	r3, #28
 800814a:	001a      	movs	r2, r3
 800814c:	2100      	movs	r1, #0
 800814e:	f01a faa7 	bl	80226a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008152:	234c      	movs	r3, #76	; 0x4c
 8008154:	18fb      	adds	r3, r7, r3
 8008156:	0018      	movs	r0, r3
 8008158:	2318      	movs	r3, #24
 800815a:	001a      	movs	r2, r3
 800815c:	2100      	movs	r1, #0
 800815e:	f01a fa9f 	bl	80226a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008162:	003b      	movs	r3, r7
 8008164:	0018      	movs	r0, r3
 8008166:	234c      	movs	r3, #76	; 0x4c
 8008168:	001a      	movs	r2, r3
 800816a:	2100      	movs	r1, #0
 800816c:	f01a fa98 	bl	80226a0 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008170:	003b      	movs	r3, r7
 8008172:	2210      	movs	r2, #16
 8008174:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008176:	003b      	movs	r3, r7
 8008178:	2200      	movs	r2, #0
 800817a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800817c:	003b      	movs	r3, r7
 800817e:	0018      	movs	r0, r3
 8008180:	f005 fcba 	bl	800daf8 <HAL_RCCEx_PeriphCLKConfig>
 8008184:	1e03      	subs	r3, r0, #0
 8008186:	d001      	beq.n	800818c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8008188:	f000 fc2c 	bl	80089e4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPUART1);
 800818c:	2380      	movs	r3, #128	; 0x80
 800818e:	035b      	lsls	r3, r3, #13
 8008190:	0018      	movs	r0, r3
 8008192:	f7ff fe41 	bl	8007e18 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8008196:	2001      	movs	r0, #1
 8008198:	f7ff fe54 	bl	8007e44 <LL_IOP_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800819c:	244c      	movs	r4, #76	; 0x4c
 800819e:	193b      	adds	r3, r7, r4
 80081a0:	2204      	movs	r2, #4
 80081a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80081a4:	193b      	adds	r3, r7, r4
 80081a6:	2202      	movs	r2, #2
 80081a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80081aa:	193b      	adds	r3, r7, r4
 80081ac:	2200      	movs	r2, #0
 80081ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80081b0:	193b      	adds	r3, r7, r4
 80081b2:	2200      	movs	r2, #0
 80081b4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80081b6:	193b      	adds	r3, r7, r4
 80081b8:	2200      	movs	r2, #0
 80081ba:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80081bc:	193b      	adds	r3, r7, r4
 80081be:	2206      	movs	r2, #6
 80081c0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c2:	193a      	adds	r2, r7, r4
 80081c4:	23a0      	movs	r3, #160	; 0xa0
 80081c6:	05db      	lsls	r3, r3, #23
 80081c8:	0011      	movs	r1, r2
 80081ca:	0018      	movs	r0, r3
 80081cc:	f007 f8c4 	bl	800f358 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80081d0:	0021      	movs	r1, r4
 80081d2:	187b      	adds	r3, r7, r1
 80081d4:	2208      	movs	r2, #8
 80081d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80081d8:	187b      	adds	r3, r7, r1
 80081da:	2202      	movs	r2, #2
 80081dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80081de:	187b      	adds	r3, r7, r1
 80081e0:	2200      	movs	r2, #0
 80081e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80081e4:	187b      	adds	r3, r7, r1
 80081e6:	2200      	movs	r2, #0
 80081e8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80081ea:	187b      	adds	r3, r7, r1
 80081ec:	2200      	movs	r2, #0
 80081ee:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	2206      	movs	r2, #6
 80081f4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081f6:	187a      	adds	r2, r7, r1
 80081f8:	23a0      	movs	r3, #160	; 0xa0
 80081fa:	05db      	lsls	r3, r3, #23
 80081fc:	0011      	movs	r1, r2
 80081fe:	0018      	movs	r0, r3
 8008200:	f007 f8aa 	bl	800f358 <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_LPUART1_TX);
 8008204:	4b3d      	ldr	r3, [pc, #244]	; (80082fc <MX_LPUART1_UART_Init+0x1c0>)
 8008206:	220f      	movs	r2, #15
 8008208:	2102      	movs	r1, #2
 800820a:	0018      	movs	r0, r3
 800820c:	f7ff fce8 	bl	8007be0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8008210:	4b3a      	ldr	r3, [pc, #232]	; (80082fc <MX_LPUART1_UART_Init+0x1c0>)
 8008212:	2210      	movs	r2, #16
 8008214:	2102      	movs	r1, #2
 8008216:	0018      	movs	r0, r3
 8008218:	f7ff fbde 	bl	80079d8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800821c:	4b37      	ldr	r3, [pc, #220]	; (80082fc <MX_LPUART1_UART_Init+0x1c0>)
 800821e:	2200      	movs	r2, #0
 8008220:	2102      	movs	r1, #2
 8008222:	0018      	movs	r0, r3
 8008224:	f7ff fcb6 	bl	8007b94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8008228:	4b34      	ldr	r3, [pc, #208]	; (80082fc <MX_LPUART1_UART_Init+0x1c0>)
 800822a:	2200      	movs	r2, #0
 800822c:	2102      	movs	r1, #2
 800822e:	0018      	movs	r0, r3
 8008230:	f7ff fbf8 	bl	8007a24 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8008234:	4b31      	ldr	r3, [pc, #196]	; (80082fc <MX_LPUART1_UART_Init+0x1c0>)
 8008236:	2200      	movs	r2, #0
 8008238:	2102      	movs	r1, #2
 800823a:	0018      	movs	r0, r3
 800823c:	f7ff fc16 	bl	8007a6c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8008240:	4b2e      	ldr	r3, [pc, #184]	; (80082fc <MX_LPUART1_UART_Init+0x1c0>)
 8008242:	2280      	movs	r2, #128	; 0x80
 8008244:	2102      	movs	r1, #2
 8008246:	0018      	movs	r0, r3
 8008248:	f7ff fc34 	bl	8007ab4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 800824c:	4b2b      	ldr	r3, [pc, #172]	; (80082fc <MX_LPUART1_UART_Init+0x1c0>)
 800824e:	2200      	movs	r2, #0
 8008250:	2102      	movs	r1, #2
 8008252:	0018      	movs	r0, r3
 8008254:	f7ff fc52 	bl	8007afc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8008258:	4b28      	ldr	r3, [pc, #160]	; (80082fc <MX_LPUART1_UART_Init+0x1c0>)
 800825a:	2200      	movs	r2, #0
 800825c:	2102      	movs	r1, #2
 800825e:	0018      	movs	r0, r3
 8008260:	f7ff fc72 	bl	8007b48 <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 3);
 8008264:	2103      	movs	r1, #3
 8008266:	201d      	movs	r0, #29
 8008268:	f7ff fb48 	bl	80078fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 800826c:	201d      	movs	r0, #29
 800826e:	f7ff fb2b 	bl	80078c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 8008272:	2164      	movs	r1, #100	; 0x64
 8008274:	187b      	adds	r3, r7, r1
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
  LPUART_InitStruct.BaudRate = 921600;
 800827a:	187b      	adds	r3, r7, r1
 800827c:	22e1      	movs	r2, #225	; 0xe1
 800827e:	0312      	lsls	r2, r2, #12
 8008280:	605a      	str	r2, [r3, #4]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_7B;
 8008282:	187b      	adds	r3, r7, r1
 8008284:	2280      	movs	r2, #128	; 0x80
 8008286:	0552      	lsls	r2, r2, #21
 8008288:	609a      	str	r2, [r3, #8]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 800828a:	187b      	adds	r3, r7, r1
 800828c:	2200      	movs	r2, #0
 800828e:	60da      	str	r2, [r3, #12]
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8008290:	187b      	adds	r3, r7, r1
 8008292:	2200      	movs	r2, #0
 8008294:	611a      	str	r2, [r3, #16]
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8008296:	187b      	adds	r3, r7, r1
 8008298:	220c      	movs	r2, #12
 800829a:	615a      	str	r2, [r3, #20]
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 800829c:	187b      	adds	r3, r7, r1
 800829e:	2200      	movs	r2, #0
 80082a0:	619a      	str	r2, [r3, #24]
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80082a2:	187b      	adds	r3, r7, r1
 80082a4:	4a16      	ldr	r2, [pc, #88]	; (8008300 <MX_LPUART1_UART_Init+0x1c4>)
 80082a6:	0019      	movs	r1, r3
 80082a8:	0010      	movs	r0, r2
 80082aa:	f007 f93d 	bl	800f528 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80082ae:	4b14      	ldr	r3, [pc, #80]	; (8008300 <MX_LPUART1_UART_Init+0x1c4>)
 80082b0:	2100      	movs	r1, #0
 80082b2:	0018      	movs	r0, r3
 80082b4:	f7ff fcde 	bl	8007c74 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80082b8:	4b11      	ldr	r3, [pc, #68]	; (8008300 <MX_LPUART1_UART_Init+0x1c4>)
 80082ba:	2100      	movs	r1, #0
 80082bc:	0018      	movs	r0, r3
 80082be:	f7ff fcfd 	bl	8007cbc <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <MX_LPUART1_UART_Init+0x1c4>)
 80082c4:	0018      	movs	r0, r3
 80082c6:	f7ff fcc5 	bl	8007c54 <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 80082ca:	4b0d      	ldr	r3, [pc, #52]	; (8008300 <MX_LPUART1_UART_Init+0x1c4>)
 80082cc:	0018      	movs	r0, r3
 80082ce:	f7ff fcb3 	bl	8007c38 <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 80082d2:	46c0      	nop			; (mov r8, r8)
 80082d4:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <MX_LPUART1_UART_Init+0x1c4>)
 80082d6:	0018      	movs	r0, r3
 80082d8:	f7ff fd16 	bl	8007d08 <LL_LPUART_IsActiveFlag_TEACK>
 80082dc:	1e03      	subs	r3, r0, #0
 80082de:	d0f9      	beq.n	80082d4 <MX_LPUART1_UART_Init+0x198>
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <MX_LPUART1_UART_Init+0x1c4>)
 80082e2:	0018      	movs	r0, r3
 80082e4:	f7ff fd24 	bl	8007d30 <LL_LPUART_IsActiveFlag_REACK>
 80082e8:	1e03      	subs	r3, r0, #0
 80082ea:	d0f3      	beq.n	80082d4 <MX_LPUART1_UART_Init+0x198>
  {
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  LL_LPUART_EnableIT_RXNE_RXFNE(LPUART1);
 80082ec:	4b04      	ldr	r3, [pc, #16]	; (8008300 <MX_LPUART1_UART_Init+0x1c4>)
 80082ee:	0018      	movs	r0, r3
 80082f0:	f7ff fd32 	bl	8007d58 <LL_LPUART_EnableIT_RXNE_RXFNE>
  /* USER CODE END LPUART1_Init 2 */

}
 80082f4:	46c0      	nop			; (mov r8, r8)
 80082f6:	46bd      	mov	sp, r7
 80082f8:	b021      	add	sp, #132	; 0x84
 80082fa:	bd90      	pop	{r4, r7, pc}
 80082fc:	40020000 	.word	0x40020000
 8008300:	40008000 	.word	0x40008000

08008304 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008308:	4b1b      	ldr	r3, [pc, #108]	; (8008378 <MX_SPI2_Init+0x74>)
 800830a:	4a1c      	ldr	r2, [pc, #112]	; (800837c <MX_SPI2_Init+0x78>)
 800830c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800830e:	4b1a      	ldr	r3, [pc, #104]	; (8008378 <MX_SPI2_Init+0x74>)
 8008310:	2282      	movs	r2, #130	; 0x82
 8008312:	0052      	lsls	r2, r2, #1
 8008314:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008316:	4b18      	ldr	r3, [pc, #96]	; (8008378 <MX_SPI2_Init+0x74>)
 8008318:	2200      	movs	r2, #0
 800831a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800831c:	4b16      	ldr	r3, [pc, #88]	; (8008378 <MX_SPI2_Init+0x74>)
 800831e:	22e0      	movs	r2, #224	; 0xe0
 8008320:	00d2      	lsls	r2, r2, #3
 8008322:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008324:	4b14      	ldr	r3, [pc, #80]	; (8008378 <MX_SPI2_Init+0x74>)
 8008326:	2200      	movs	r2, #0
 8008328:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800832a:	4b13      	ldr	r3, [pc, #76]	; (8008378 <MX_SPI2_Init+0x74>)
 800832c:	2200      	movs	r2, #0
 800832e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008330:	4b11      	ldr	r3, [pc, #68]	; (8008378 <MX_SPI2_Init+0x74>)
 8008332:	2280      	movs	r2, #128	; 0x80
 8008334:	0092      	lsls	r2, r2, #2
 8008336:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <MX_SPI2_Init+0x74>)
 800833a:	2220      	movs	r2, #32
 800833c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800833e:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <MX_SPI2_Init+0x74>)
 8008340:	2200      	movs	r2, #0
 8008342:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008344:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <MX_SPI2_Init+0x74>)
 8008346:	2200      	movs	r2, #0
 8008348:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800834a:	4b0b      	ldr	r3, [pc, #44]	; (8008378 <MX_SPI2_Init+0x74>)
 800834c:	2200      	movs	r2, #0
 800834e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8008350:	4b09      	ldr	r3, [pc, #36]	; (8008378 <MX_SPI2_Init+0x74>)
 8008352:	2207      	movs	r2, #7
 8008354:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008356:	4b08      	ldr	r3, [pc, #32]	; (8008378 <MX_SPI2_Init+0x74>)
 8008358:	2200      	movs	r2, #0
 800835a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <MX_SPI2_Init+0x74>)
 800835e:	2208      	movs	r2, #8
 8008360:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008362:	4b05      	ldr	r3, [pc, #20]	; (8008378 <MX_SPI2_Init+0x74>)
 8008364:	0018      	movs	r0, r3
 8008366:	f005 fe03 	bl	800df70 <HAL_SPI_Init>
 800836a:	1e03      	subs	r3, r0, #0
 800836c:	d001      	beq.n	8008372 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800836e:	f000 fb39 	bl	80089e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008372:	46c0      	nop			; (mov r8, r8)
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20000428 	.word	0x20000428
 800837c:	40003800 	.word	0x40003800

08008380 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008380:	b590      	push	{r4, r7, lr}
 8008382:	b08d      	sub	sp, #52	; 0x34
 8008384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008386:	240c      	movs	r4, #12
 8008388:	193b      	adds	r3, r7, r4
 800838a:	0018      	movs	r0, r3
 800838c:	2324      	movs	r3, #36	; 0x24
 800838e:	001a      	movs	r2, r3
 8008390:	2100      	movs	r1, #0
 8008392:	f01a f985 	bl	80226a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008396:	003b      	movs	r3, r7
 8008398:	0018      	movs	r0, r3
 800839a:	230c      	movs	r3, #12
 800839c:	001a      	movs	r2, r3
 800839e:	2100      	movs	r1, #0
 80083a0:	f01a f97e 	bl	80226a0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80083a4:	4b25      	ldr	r3, [pc, #148]	; (800843c <MX_TIM3_Init+0xbc>)
 80083a6:	4a26      	ldr	r2, [pc, #152]	; (8008440 <MX_TIM3_Init+0xc0>)
 80083a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80083aa:	4b24      	ldr	r3, [pc, #144]	; (800843c <MX_TIM3_Init+0xbc>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083b0:	4b22      	ldr	r3, [pc, #136]	; (800843c <MX_TIM3_Init+0xbc>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80083b6:	4b21      	ldr	r3, [pc, #132]	; (800843c <MX_TIM3_Init+0xbc>)
 80083b8:	4a22      	ldr	r2, [pc, #136]	; (8008444 <MX_TIM3_Init+0xc4>)
 80083ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083bc:	4b1f      	ldr	r3, [pc, #124]	; (800843c <MX_TIM3_Init+0xbc>)
 80083be:	2200      	movs	r2, #0
 80083c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80083c2:	4b1e      	ldr	r3, [pc, #120]	; (800843c <MX_TIM3_Init+0xbc>)
 80083c4:	2280      	movs	r2, #128	; 0x80
 80083c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80083c8:	0021      	movs	r1, r4
 80083ca:	187b      	adds	r3, r7, r1
 80083cc:	2203      	movs	r2, #3
 80083ce:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80083d0:	187b      	adds	r3, r7, r1
 80083d2:	2200      	movs	r2, #0
 80083d4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80083d6:	187b      	adds	r3, r7, r1
 80083d8:	2201      	movs	r2, #1
 80083da:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80083dc:	187b      	adds	r3, r7, r1
 80083de:	2200      	movs	r2, #0
 80083e0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 12;
 80083e2:	187b      	adds	r3, r7, r1
 80083e4:	220c      	movs	r2, #12
 80083e6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80083e8:	187b      	adds	r3, r7, r1
 80083ea:	2200      	movs	r2, #0
 80083ec:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80083ee:	187b      	adds	r3, r7, r1
 80083f0:	2201      	movs	r2, #1
 80083f2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80083f4:	187b      	adds	r3, r7, r1
 80083f6:	2200      	movs	r2, #0
 80083f8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 12;
 80083fa:	187b      	adds	r3, r7, r1
 80083fc:	220c      	movs	r2, #12
 80083fe:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8008400:	187a      	adds	r2, r7, r1
 8008402:	4b0e      	ldr	r3, [pc, #56]	; (800843c <MX_TIM3_Init+0xbc>)
 8008404:	0011      	movs	r1, r2
 8008406:	0018      	movs	r0, r3
 8008408:	f006 fa02 	bl	800e810 <HAL_TIM_Encoder_Init>
 800840c:	1e03      	subs	r3, r0, #0
 800840e:	d001      	beq.n	8008414 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8008410:	f000 fae8 	bl	80089e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008414:	003b      	movs	r3, r7
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800841a:	003b      	movs	r3, r7
 800841c:	2200      	movs	r2, #0
 800841e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008420:	003a      	movs	r2, r7
 8008422:	4b06      	ldr	r3, [pc, #24]	; (800843c <MX_TIM3_Init+0xbc>)
 8008424:	0011      	movs	r1, r2
 8008426:	0018      	movs	r0, r3
 8008428:	f006 fd42 	bl	800eeb0 <HAL_TIMEx_MasterConfigSynchronization>
 800842c:	1e03      	subs	r3, r0, #0
 800842e:	d001      	beq.n	8008434 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008430:	f000 fad8 	bl	80089e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008434:	46c0      	nop			; (mov r8, r8)
 8008436:	46bd      	mov	sp, r7
 8008438:	b00d      	add	sp, #52	; 0x34
 800843a:	bd90      	pop	{r4, r7, pc}
 800843c:	2000048c 	.word	0x2000048c
 8008440:	40000400 	.word	0x40000400
 8008444:	0000ffff 	.word	0x0000ffff

08008448 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800844e:	1d3b      	adds	r3, r7, #4
 8008450:	0018      	movs	r0, r3
 8008452:	2314      	movs	r3, #20
 8008454:	001a      	movs	r2, r3
 8008456:	2100      	movs	r1, #0
 8008458:	f01a f922 	bl	80226a0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800845c:	2020      	movs	r0, #32
 800845e:	f7ff fcdb 	bl	8007e18 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_LPTIM2_IRQn, 3);
 8008462:	2103      	movs	r1, #3
 8008464:	2012      	movs	r0, #18
 8008466:	f7ff fa49 	bl	80078fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 800846a:	2012      	movs	r0, #18
 800846c:	f7ff fa2c 	bl	80078c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 63999;
 8008470:	1d3b      	adds	r3, r7, #4
 8008472:	4a12      	ldr	r2, [pc, #72]	; (80084bc <MX_TIM7_Init+0x74>)
 8008474:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8008476:	1d3b      	adds	r3, r7, #4
 8008478:	2200      	movs	r2, #0
 800847a:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 200;
 800847c:	1d3b      	adds	r3, r7, #4
 800847e:	22c8      	movs	r2, #200	; 0xc8
 8008480:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8008482:	1d3b      	adds	r3, r7, #4
 8008484:	4a0e      	ldr	r2, [pc, #56]	; (80084c0 <MX_TIM7_Init+0x78>)
 8008486:	0019      	movs	r1, r3
 8008488:	0010      	movs	r0, r2
 800848a:	f007 fa9f 	bl	800f9cc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <MX_TIM7_Init+0x78>)
 8008490:	0018      	movs	r0, r3
 8008492:	f7ff fc92 	bl	8007dba <LL_TIM_EnableARRPreload>
  LL_TIM_SetOnePulseMode(TIM7, LL_TIM_ONEPULSEMODE_SINGLE);
 8008496:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <MX_TIM7_Init+0x78>)
 8008498:	2108      	movs	r1, #8
 800849a:	0018      	movs	r0, r3
 800849c:	f7ff fc7b 	bl	8007d96 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 80084a0:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <MX_TIM7_Init+0x78>)
 80084a2:	2100      	movs	r1, #0
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7ff fc96 	bl	8007dd6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <MX_TIM7_Init+0x78>)
 80084ac:	0018      	movs	r0, r3
 80084ae:	f7ff fca4 	bl	8007dfa <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80084b2:	46c0      	nop			; (mov r8, r8)
 80084b4:	46bd      	mov	sp, r7
 80084b6:	b006      	add	sp, #24
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	fffff9ff 	.word	0xfffff9ff
 80084c0:	40001400 	.word	0x40001400

080084c4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ca:	003b      	movs	r3, r7
 80084cc:	0018      	movs	r0, r3
 80084ce:	2318      	movs	r3, #24
 80084d0:	001a      	movs	r2, r3
 80084d2:	2100      	movs	r1, #0
 80084d4:	f01a f8e4 	bl	80226a0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 80084d8:	2380      	movs	r3, #128	; 0x80
 80084da:	049b      	lsls	r3, r3, #18
 80084dc:	0018      	movs	r0, r3
 80084de:	f7ff fc9b 	bl	8007e18 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80084e2:	2002      	movs	r0, #2
 80084e4:	f7ff fcae 	bl	8007e44 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80084e8:	2001      	movs	r0, #1
 80084ea:	f7ff fcab 	bl	8007e44 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80084ee:	003b      	movs	r3, r7
 80084f0:	2280      	movs	r2, #128	; 0x80
 80084f2:	0212      	lsls	r2, r2, #8
 80084f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80084f6:	003b      	movs	r3, r7
 80084f8:	2203      	movs	r2, #3
 80084fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80084fc:	003b      	movs	r3, r7
 80084fe:	2200      	movs	r2, #0
 8008500:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008502:	003b      	movs	r3, r7
 8008504:	4a40      	ldr	r2, [pc, #256]	; (8008608 <MX_UCPD1_Init+0x144>)
 8008506:	0019      	movs	r1, r3
 8008508:	0010      	movs	r0, r2
 800850a:	f006 ff25 	bl	800f358 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800850e:	003b      	movs	r3, r7
 8008510:	2280      	movs	r2, #128	; 0x80
 8008512:	0052      	lsls	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008516:	003b      	movs	r3, r7
 8008518:	2203      	movs	r2, #3
 800851a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800851c:	003b      	movs	r3, r7
 800851e:	2200      	movs	r2, #0
 8008520:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008522:	003a      	movs	r2, r7
 8008524:	23a0      	movs	r3, #160	; 0xa0
 8008526:	05db      	lsls	r3, r3, #23
 8008528:	0011      	movs	r1, r2
 800852a:	0018      	movs	r0, r3
 800852c:	f006 ff14 	bl	800f358 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8008530:	4b36      	ldr	r3, [pc, #216]	; (800860c <MX_UCPD1_Init+0x148>)
 8008532:	223a      	movs	r2, #58	; 0x3a
 8008534:	2100      	movs	r1, #0
 8008536:	0018      	movs	r0, r3
 8008538:	f7ff fb52 	bl	8007be0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800853c:	4b33      	ldr	r3, [pc, #204]	; (800860c <MX_UCPD1_Init+0x148>)
 800853e:	2200      	movs	r2, #0
 8008540:	2100      	movs	r1, #0
 8008542:	0018      	movs	r0, r3
 8008544:	f7ff fa48 	bl	80079d8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8008548:	4b30      	ldr	r3, [pc, #192]	; (800860c <MX_UCPD1_Init+0x148>)
 800854a:	2200      	movs	r2, #0
 800854c:	2100      	movs	r1, #0
 800854e:	0018      	movs	r0, r3
 8008550:	f7ff fb20 	bl	8007b94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8008554:	4b2d      	ldr	r3, [pc, #180]	; (800860c <MX_UCPD1_Init+0x148>)
 8008556:	2200      	movs	r2, #0
 8008558:	2100      	movs	r1, #0
 800855a:	0018      	movs	r0, r3
 800855c:	f7ff fa62 	bl	8007a24 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8008560:	4b2a      	ldr	r3, [pc, #168]	; (800860c <MX_UCPD1_Init+0x148>)
 8008562:	2200      	movs	r2, #0
 8008564:	2100      	movs	r1, #0
 8008566:	0018      	movs	r0, r3
 8008568:	f7ff fa80 	bl	8007a6c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800856c:	4b27      	ldr	r3, [pc, #156]	; (800860c <MX_UCPD1_Init+0x148>)
 800856e:	2280      	movs	r2, #128	; 0x80
 8008570:	2100      	movs	r1, #0
 8008572:	0018      	movs	r0, r3
 8008574:	f7ff fa9e 	bl	8007ab4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8008578:	4b24      	ldr	r3, [pc, #144]	; (800860c <MX_UCPD1_Init+0x148>)
 800857a:	2200      	movs	r2, #0
 800857c:	2100      	movs	r1, #0
 800857e:	0018      	movs	r0, r3
 8008580:	f7ff fabc 	bl	8007afc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8008584:	4b21      	ldr	r3, [pc, #132]	; (800860c <MX_UCPD1_Init+0x148>)
 8008586:	2200      	movs	r2, #0
 8008588:	2100      	movs	r1, #0
 800858a:	0018      	movs	r0, r3
 800858c:	f7ff fadc 	bl	8007b48 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8008590:	4b1e      	ldr	r3, [pc, #120]	; (800860c <MX_UCPD1_Init+0x148>)
 8008592:	223b      	movs	r2, #59	; 0x3b
 8008594:	2101      	movs	r1, #1
 8008596:	0018      	movs	r0, r3
 8008598:	f7ff fb22 	bl	8007be0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800859c:	4b1b      	ldr	r3, [pc, #108]	; (800860c <MX_UCPD1_Init+0x148>)
 800859e:	2210      	movs	r2, #16
 80085a0:	2101      	movs	r1, #1
 80085a2:	0018      	movs	r0, r3
 80085a4:	f7ff fa18 	bl	80079d8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 80085a8:	4b18      	ldr	r3, [pc, #96]	; (800860c <MX_UCPD1_Init+0x148>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	2101      	movs	r1, #1
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7ff faf0 	bl	8007b94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80085b4:	4b15      	ldr	r3, [pc, #84]	; (800860c <MX_UCPD1_Init+0x148>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	2101      	movs	r1, #1
 80085ba:	0018      	movs	r0, r3
 80085bc:	f7ff fa32 	bl	8007a24 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80085c0:	4b12      	ldr	r3, [pc, #72]	; (800860c <MX_UCPD1_Init+0x148>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	2101      	movs	r1, #1
 80085c6:	0018      	movs	r0, r3
 80085c8:	f7ff fa50 	bl	8007a6c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80085cc:	4b0f      	ldr	r3, [pc, #60]	; (800860c <MX_UCPD1_Init+0x148>)
 80085ce:	2280      	movs	r2, #128	; 0x80
 80085d0:	2101      	movs	r1, #1
 80085d2:	0018      	movs	r0, r3
 80085d4:	f7ff fa6e 	bl	8007ab4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80085d8:	4b0c      	ldr	r3, [pc, #48]	; (800860c <MX_UCPD1_Init+0x148>)
 80085da:	2200      	movs	r2, #0
 80085dc:	2101      	movs	r1, #1
 80085de:	0018      	movs	r0, r3
 80085e0:	f7ff fa8c 	bl	8007afc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80085e4:	4b09      	ldr	r3, [pc, #36]	; (800860c <MX_UCPD1_Init+0x148>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	2101      	movs	r1, #1
 80085ea:	0018      	movs	r0, r3
 80085ec:	f7ff faac 	bl	8007b48 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 3);
 80085f0:	2103      	movs	r1, #3
 80085f2:	2008      	movs	r0, #8
 80085f4:	f7ff f982 	bl	80078fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80085f8:	2008      	movs	r0, #8
 80085fa:	f7ff f965 	bl	80078c8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	46bd      	mov	sp, r7
 8008602:	b006      	add	sp, #24
 8008604:	bd80      	pop	{r7, pc}
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	50000400 	.word	0x50000400
 800860c:	40020000 	.word	0x40020000

08008610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <MX_DMA_Init+0x54>)
 8008618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800861a:	4b12      	ldr	r3, [pc, #72]	; (8008664 <MX_DMA_Init+0x54>)
 800861c:	2101      	movs	r1, #1
 800861e:	430a      	orrs	r2, r1
 8008620:	639a      	str	r2, [r3, #56]	; 0x38
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <MX_DMA_Init+0x54>)
 8008624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008626:	2201      	movs	r2, #1
 8008628:	4013      	ands	r3, r2
 800862a:	607b      	str	r3, [r7, #4]
 800862c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 3);
 800862e:	2103      	movs	r1, #3
 8008630:	2009      	movs	r0, #9
 8008632:	f7ff f963 	bl	80078fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008636:	2009      	movs	r0, #9
 8008638:	f7ff f946 	bl	80078c8 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3);
 800863c:	2103      	movs	r1, #3
 800863e:	200a      	movs	r0, #10
 8008640:	f7ff f95c 	bl	80078fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8008644:	200a      	movs	r0, #10
 8008646:	f7ff f93f 	bl	80078c8 <__NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 3, 0);
 800864a:	2200      	movs	r2, #0
 800864c:	2103      	movs	r1, #3
 800864e:	200b      	movs	r0, #11
 8008650:	f001 febc 	bl	800a3cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8008654:	200b      	movs	r0, #11
 8008656:	f001 fece 	bl	800a3f6 <HAL_NVIC_EnableIRQ>

}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	46bd      	mov	sp, r7
 800865e:	b002      	add	sp, #8
 8008660:	bd80      	pop	{r7, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	40021000 	.word	0x40021000

08008668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008668:	b590      	push	{r4, r7, lr}
 800866a:	b08b      	sub	sp, #44	; 0x2c
 800866c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800866e:	2414      	movs	r4, #20
 8008670:	193b      	adds	r3, r7, r4
 8008672:	0018      	movs	r0, r3
 8008674:	2314      	movs	r3, #20
 8008676:	001a      	movs	r2, r3
 8008678:	2100      	movs	r1, #0
 800867a:	f01a f811 	bl	80226a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800867e:	4b81      	ldr	r3, [pc, #516]	; (8008884 <MX_GPIO_Init+0x21c>)
 8008680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008682:	4b80      	ldr	r3, [pc, #512]	; (8008884 <MX_GPIO_Init+0x21c>)
 8008684:	2101      	movs	r1, #1
 8008686:	430a      	orrs	r2, r1
 8008688:	635a      	str	r2, [r3, #52]	; 0x34
 800868a:	4b7e      	ldr	r3, [pc, #504]	; (8008884 <MX_GPIO_Init+0x21c>)
 800868c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868e:	2201      	movs	r2, #1
 8008690:	4013      	ands	r3, r2
 8008692:	613b      	str	r3, [r7, #16]
 8008694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008696:	4b7b      	ldr	r3, [pc, #492]	; (8008884 <MX_GPIO_Init+0x21c>)
 8008698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800869a:	4b7a      	ldr	r3, [pc, #488]	; (8008884 <MX_GPIO_Init+0x21c>)
 800869c:	2104      	movs	r1, #4
 800869e:	430a      	orrs	r2, r1
 80086a0:	635a      	str	r2, [r3, #52]	; 0x34
 80086a2:	4b78      	ldr	r3, [pc, #480]	; (8008884 <MX_GPIO_Init+0x21c>)
 80086a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a6:	2204      	movs	r2, #4
 80086a8:	4013      	ands	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80086ae:	4b75      	ldr	r3, [pc, #468]	; (8008884 <MX_GPIO_Init+0x21c>)
 80086b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086b2:	4b74      	ldr	r3, [pc, #464]	; (8008884 <MX_GPIO_Init+0x21c>)
 80086b4:	2102      	movs	r1, #2
 80086b6:	430a      	orrs	r2, r1
 80086b8:	635a      	str	r2, [r3, #52]	; 0x34
 80086ba:	4b72      	ldr	r3, [pc, #456]	; (8008884 <MX_GPIO_Init+0x21c>)
 80086bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086be:	2202      	movs	r2, #2
 80086c0:	4013      	ands	r3, r2
 80086c2:	60bb      	str	r3, [r7, #8]
 80086c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80086c6:	4b6f      	ldr	r3, [pc, #444]	; (8008884 <MX_GPIO_Init+0x21c>)
 80086c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ca:	4b6e      	ldr	r3, [pc, #440]	; (8008884 <MX_GPIO_Init+0x21c>)
 80086cc:	2108      	movs	r1, #8
 80086ce:	430a      	orrs	r2, r1
 80086d0:	635a      	str	r2, [r3, #52]	; 0x34
 80086d2:	4b6c      	ldr	r3, [pc, #432]	; (8008884 <MX_GPIO_Init+0x21c>)
 80086d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d6:	2208      	movs	r2, #8
 80086d8:	4013      	ands	r3, r2
 80086da:	607b      	str	r3, [r7, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_LOCK_Pin|RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 80086de:	2384      	movs	r3, #132	; 0x84
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	4869      	ldr	r0, [pc, #420]	; (8008888 <MX_GPIO_Init+0x220>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	0019      	movs	r1, r3
 80086e8:	f002 feb1 	bl	800b44e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB_OUT_Pin|CS_MAX7219_Pin|LED_USER_Pin, GPIO_PIN_RESET);
 80086ec:	4967      	ldr	r1, [pc, #412]	; (800888c <MX_GPIO_Init+0x224>)
 80086ee:	4b68      	ldr	r3, [pc, #416]	; (8008890 <MX_GPIO_Init+0x228>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	0018      	movs	r0, r3
 80086f4:	f002 feab 	bl	800b44e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
 80086f8:	2380      	movs	r3, #128	; 0x80
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	4864      	ldr	r0, [pc, #400]	; (8008890 <MX_GPIO_Init+0x228>)
 80086fe:	2201      	movs	r2, #1
 8008700:	0019      	movs	r1, r3
 8008702:	f002 fea4 	bl	800b44e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HighZ_Pin FLT_IN_TCPP_Pin */
  GPIO_InitStruct.Pin = HighZ_Pin|FLT_IN_TCPP_Pin;
 8008706:	193b      	adds	r3, r7, r4
 8008708:	2203      	movs	r2, #3
 800870a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800870c:	193b      	adds	r3, r7, r4
 800870e:	2200      	movs	r2, #0
 8008710:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008712:	193b      	adds	r3, r7, r4
 8008714:	2200      	movs	r2, #0
 8008716:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008718:	193a      	adds	r2, r7, r4
 800871a:	23a0      	movs	r3, #160	; 0xa0
 800871c:	05db      	lsls	r3, r3, #23
 800871e:	0011      	movs	r1, r2
 8008720:	0018      	movs	r0, r3
 8008722:	f002 fd0b 	bl	800b13c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_DEBUG_BTN_Pin */
  GPIO_InitStruct.Pin = SW2_DEBUG_BTN_Pin;
 8008726:	0021      	movs	r1, r4
 8008728:	187b      	adds	r3, r7, r1
 800872a:	2210      	movs	r2, #16
 800872c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800872e:	187b      	adds	r3, r7, r1
 8008730:	2284      	movs	r2, #132	; 0x84
 8008732:	0392      	lsls	r2, r2, #14
 8008734:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008736:	000c      	movs	r4, r1
 8008738:	193b      	adds	r3, r7, r4
 800873a:	2200      	movs	r2, #0
 800873c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW2_DEBUG_BTN_GPIO_Port, &GPIO_InitStruct);
 800873e:	193b      	adds	r3, r7, r4
 8008740:	4a51      	ldr	r2, [pc, #324]	; (8008888 <MX_GPIO_Init+0x220>)
 8008742:	0019      	movs	r1, r3
 8008744:	0010      	movs	r0, r2
 8008746:	f002 fcf9 	bl	800b13c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_LOCK_Pin */
  GPIO_InitStruct.Pin = LED_LOCK_Pin;
 800874a:	193b      	adds	r3, r7, r4
 800874c:	2220      	movs	r2, #32
 800874e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008750:	193b      	adds	r3, r7, r4
 8008752:	2201      	movs	r2, #1
 8008754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008756:	193b      	adds	r3, r7, r4
 8008758:	2201      	movs	r2, #1
 800875a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800875c:	193b      	adds	r3, r7, r4
 800875e:	2200      	movs	r2, #0
 8008760:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_LOCK_GPIO_Port, &GPIO_InitStruct);
 8008762:	193b      	adds	r3, r7, r4
 8008764:	4a48      	ldr	r2, [pc, #288]	; (8008888 <MX_GPIO_Init+0x220>)
 8008766:	0019      	movs	r1, r3
 8008768:	0010      	movs	r0, r2
 800876a:	f002 fce7 	bl	800b13c <HAL_GPIO_Init>

  /*Configure GPIO pins : DB_OUT_Pin LED_USER_Pin */
  GPIO_InitStruct.Pin = DB_OUT_Pin|LED_USER_Pin;
 800876e:	193b      	adds	r3, r7, r4
 8008770:	2221      	movs	r2, #33	; 0x21
 8008772:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008774:	193b      	adds	r3, r7, r4
 8008776:	2201      	movs	r2, #1
 8008778:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800877a:	193b      	adds	r3, r7, r4
 800877c:	2201      	movs	r2, #1
 800877e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008780:	193b      	adds	r3, r7, r4
 8008782:	2200      	movs	r2, #0
 8008784:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008786:	193b      	adds	r3, r7, r4
 8008788:	4a41      	ldr	r2, [pc, #260]	; (8008890 <MX_GPIO_Init+0x228>)
 800878a:	0019      	movs	r1, r3
 800878c:	0010      	movs	r0, r2
 800878e:	f002 fcd5 	bl	800b13c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_OFF_ON_Pin SW1_TOGGLE_I_V_Pin OCP_ALERT_Pin OCP_ALERT2_Pin */
  GPIO_InitStruct.Pin = SW3_OFF_ON_Pin|SW1_TOGGLE_I_V_Pin|OCP_ALERT_Pin|OCP_ALERT2_Pin;
 8008792:	0021      	movs	r1, r4
 8008794:	187b      	adds	r3, r7, r1
 8008796:	22c6      	movs	r2, #198	; 0xc6
 8008798:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800879a:	187b      	adds	r3, r7, r1
 800879c:	2284      	movs	r2, #132	; 0x84
 800879e:	0392      	lsls	r2, r2, #14
 80087a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a2:	187b      	adds	r3, r7, r1
 80087a4:	2200      	movs	r2, #0
 80087a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087a8:	000c      	movs	r4, r1
 80087aa:	187b      	adds	r3, r7, r1
 80087ac:	4a38      	ldr	r2, [pc, #224]	; (8008890 <MX_GPIO_Init+0x228>)
 80087ae:	0019      	movs	r1, r3
 80087b0:	0010      	movs	r0, r2
 80087b2:	f002 fcc3 	bl	800b13c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_MAX7219_Pin OCP_RESET_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin|OCP_RESET_Pin;
 80087b6:	0021      	movs	r1, r4
 80087b8:	187b      	adds	r3, r7, r1
 80087ba:	2288      	movs	r2, #136	; 0x88
 80087bc:	0152      	lsls	r2, r2, #5
 80087be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087c0:	000c      	movs	r4, r1
 80087c2:	193b      	adds	r3, r7, r4
 80087c4:	2201      	movs	r2, #1
 80087c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c8:	193b      	adds	r3, r7, r4
 80087ca:	2200      	movs	r2, #0
 80087cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087ce:	193b      	adds	r3, r7, r4
 80087d0:	2200      	movs	r2, #0
 80087d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087d4:	193b      	adds	r3, r7, r4
 80087d6:	4a2e      	ldr	r2, [pc, #184]	; (8008890 <MX_GPIO_Init+0x228>)
 80087d8:	0019      	movs	r1, r3
 80087da:	0010      	movs	r0, r2
 80087dc:	f002 fcae 	bl	800b13c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_TOGGLE_UNITS_Pin */
  GPIO_InitStruct.Pin = ENC_TOGGLE_UNITS_Pin;
 80087e0:	0021      	movs	r1, r4
 80087e2:	187b      	adds	r3, r7, r1
 80087e4:	2280      	movs	r2, #128	; 0x80
 80087e6:	0052      	lsls	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80087ea:	187b      	adds	r3, r7, r1
 80087ec:	2284      	movs	r2, #132	; 0x84
 80087ee:	0392      	lsls	r2, r2, #14
 80087f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f2:	000c      	movs	r4, r1
 80087f4:	193b      	adds	r3, r7, r4
 80087f6:	2200      	movs	r2, #0
 80087f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_TOGGLE_UNITS_GPIO_Port, &GPIO_InitStruct);
 80087fa:	193b      	adds	r3, r7, r4
 80087fc:	4a25      	ldr	r2, [pc, #148]	; (8008894 <MX_GPIO_Init+0x22c>)
 80087fe:	0019      	movs	r1, r3
 8008800:	0010      	movs	r0, r2
 8008802:	f002 fc9b 	bl	800b13c <HAL_GPIO_Init>

  /*Configure GPIO pin : CC2_G4_Pin */
  GPIO_InitStruct.Pin = CC2_G4_Pin;
 8008806:	193b      	adds	r3, r7, r4
 8008808:	2210      	movs	r2, #16
 800880a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800880c:	193b      	adds	r3, r7, r4
 800880e:	2200      	movs	r2, #0
 8008810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008812:	193b      	adds	r3, r7, r4
 8008814:	2200      	movs	r2, #0
 8008816:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CC2_G4_GPIO_Port, &GPIO_InitStruct);
 8008818:	193b      	adds	r3, r7, r4
 800881a:	4a1d      	ldr	r2, [pc, #116]	; (8008890 <MX_GPIO_Init+0x228>)
 800881c:	0019      	movs	r1, r3
 800881e:	0010      	movs	r0, r2
 8008820:	f002 fc8c 	bl	800b13c <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_ON_OFF_Pin */
  GPIO_InitStruct.Pin = RELAY_ON_OFF_Pin;
 8008824:	0021      	movs	r1, r4
 8008826:	187b      	adds	r3, r7, r1
 8008828:	2280      	movs	r2, #128	; 0x80
 800882a:	00d2      	lsls	r2, r2, #3
 800882c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800882e:	187b      	adds	r3, r7, r1
 8008830:	2201      	movs	r2, #1
 8008832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008834:	187b      	adds	r3, r7, r1
 8008836:	2200      	movs	r2, #0
 8008838:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800883a:	187b      	adds	r3, r7, r1
 800883c:	2200      	movs	r2, #0
 800883e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RELAY_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8008840:	187b      	adds	r3, r7, r1
 8008842:	4a11      	ldr	r2, [pc, #68]	; (8008888 <MX_GPIO_Init+0x220>)
 8008844:	0019      	movs	r1, r3
 8008846:	0010      	movs	r0, r2
 8008848:	f002 fc78 	bl	800b13c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 800884c:	2200      	movs	r2, #0
 800884e:	2103      	movs	r1, #3
 8008850:	2005      	movs	r0, #5
 8008852:	f001 fdbb 	bl	800a3cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8008856:	2005      	movs	r0, #5
 8008858:	f001 fdcd 	bl	800a3f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 800885c:	2200      	movs	r2, #0
 800885e:	2103      	movs	r1, #3
 8008860:	2006      	movs	r0, #6
 8008862:	f001 fdb3 	bl	800a3cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8008866:	2006      	movs	r0, #6
 8008868:	f001 fdc5 	bl	800a3f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 800886c:	2200      	movs	r2, #0
 800886e:	2103      	movs	r1, #3
 8008870:	2007      	movs	r0, #7
 8008872:	f001 fdab 	bl	800a3cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8008876:	2007      	movs	r0, #7
 8008878:	f001 fdbd 	bl	800a3f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800887c:	46c0      	nop			; (mov r8, r8)
 800887e:	46bd      	mov	sp, r7
 8008880:	b00b      	add	sp, #44	; 0x2c
 8008882:	bd90      	pop	{r4, r7, pc}
 8008884:	40021000 	.word	0x40021000
 8008888:	50000800 	.word	0x50000800
 800888c:	00001021 	.word	0x00001021
 8008890:	50000400 	.word	0x50000400
 8008894:	50000c00 	.word	0x50000c00

08008898 <HAL_GPIO_EXTI_Falling_Callback>:
* @brief EXTI line detection callbacks
* @param GPIO_Pin Specifies the pins connected EXTI line
* @retval None
*/
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889a:	b0a9      	sub	sp, #164	; 0xa4
 800889c:	af02      	add	r7, sp, #8
 800889e:	0002      	movs	r2, r0
 80088a0:	1dbb      	adds	r3, r7, #6
 80088a2:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == SW2_DEBUG_BTN_Pin) /* Will display in trace the VBUS value when user button
 80088a4:	1dbb      	adds	r3, r7, #6
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	2b10      	cmp	r3, #16
 80088aa:	d16f      	bne.n	800898c <HAL_GPIO_EXTI_Falling_Callback+0xf4>

		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
		*/

		char _str[60];
		if (HAL_GPIO_ReadPin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin) == GPIO_PIN_SET)
 80088ac:	2380      	movs	r3, #128	; 0x80
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	4a38      	ldr	r2, [pc, #224]	; (8008994 <HAL_GPIO_EXTI_Falling_Callback+0xfc>)
 80088b2:	0019      	movs	r1, r3
 80088b4:	0010      	movs	r0, r2
 80088b6:	f002 fdad 	bl	800b414 <HAL_GPIO_ReadPin>
 80088ba:	0003      	movs	r3, r0
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d112      	bne.n	80088e6 <HAL_GPIO_EXTI_Falling_Callback+0x4e>
		{
			HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 80088c0:	2380      	movs	r3, #128	; 0x80
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	4833      	ldr	r0, [pc, #204]	; (8008994 <HAL_GPIO_EXTI_Falling_Callback+0xfc>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	0019      	movs	r1, r3
 80088ca:	f002 fdc0 	bl	800b44e <HAL_GPIO_WritePin>
			// Use snprintf to limit the number of characters written
			int len = snprintf(_str, sizeof(_str), "--------Output Disabled--------");
 80088ce:	4a32      	ldr	r2, [pc, #200]	; (8008998 <HAL_GPIO_EXTI_Falling_Callback+0x100>)
 80088d0:	2308      	movs	r3, #8
 80088d2:	18fb      	adds	r3, r7, r3
 80088d4:	213c      	movs	r1, #60	; 0x3c
 80088d6:	0018      	movs	r0, r3
 80088d8:	f019 fe8e 	bl	80225f8 <sniprintf>
 80088dc:	0003      	movs	r3, r0
 80088de:	2290      	movs	r2, #144	; 0x90
 80088e0:	18ba      	adds	r2, r7, r2
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	e011      	b.n	800890a <HAL_GPIO_EXTI_Falling_Callback+0x72>
		}
		else
		{
			HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_SET);
 80088e6:	2380      	movs	r3, #128	; 0x80
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	482a      	ldr	r0, [pc, #168]	; (8008994 <HAL_GPIO_EXTI_Falling_Callback+0xfc>)
 80088ec:	2201      	movs	r2, #1
 80088ee:	0019      	movs	r1, r3
 80088f0:	f002 fdad 	bl	800b44e <HAL_GPIO_WritePin>
			// Use snprintf to limit the number of characters written
			int len = snprintf(_str, sizeof(_str), "--------Output Enabled--------");
 80088f4:	4a29      	ldr	r2, [pc, #164]	; (800899c <HAL_GPIO_EXTI_Falling_Callback+0x104>)
 80088f6:	2308      	movs	r3, #8
 80088f8:	18fb      	adds	r3, r7, r3
 80088fa:	213c      	movs	r1, #60	; 0x3c
 80088fc:	0018      	movs	r0, r3
 80088fe:	f019 fe7b 	bl	80225f8 <sniprintf>
 8008902:	0003      	movs	r3, r0
 8008904:	2294      	movs	r2, #148	; 0x94
 8008906:	18ba      	adds	r2, r7, r2
 8008908:	6013      	str	r3, [r2, #0]
		}

		//HAL_GPIO_TogglePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin);
		//Get Voltage level into TRACE
		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 800890a:	2408      	movs	r4, #8
 800890c:	193b      	adds	r3, r7, r4
 800890e:	0018      	movs	r0, r3
 8008910:	f7fd fc5c 	bl	80061cc <strlen>
 8008914:	0002      	movs	r2, r0
 8008916:	193b      	adds	r3, r7, r4
 8008918:	9200      	str	r2, [sp, #0]
 800891a:	2200      	movs	r2, #0
 800891c:	2100      	movs	r1, #0
 800891e:	2006      	movs	r0, #6
 8008920:	f009 f89c 	bl	8011a5c <USBPD_TRACE_Add>

		char _str2[60];
		uint32_t voltage = BSP_PWR_VBUSGetVoltage(0);
 8008924:	2000      	movs	r0, #0
 8008926:	f012 fe3f 	bl	801b5a8 <BSP_PWR_VBUSGetVoltage>
 800892a:	0003      	movs	r3, r0
 800892c:	248c      	movs	r4, #140	; 0x8c
 800892e:	193a      	adds	r2, r7, r4
 8008930:	6013      	str	r3, [r2, #0]
		uint32_t current= BSP_PWR_VBUSGetCurrent(0);
 8008932:	2000      	movs	r0, #0
 8008934:	f012 fe56 	bl	801b5e4 <BSP_PWR_VBUSGetCurrent>
 8008938:	0003      	movs	r3, r0
 800893a:	2588      	movs	r5, #136	; 0x88
 800893c:	197a      	adds	r2, r7, r5
 800893e:	6013      	str	r3, [r2, #0]
		uint32_t currentOCP= BSP_PWR_VBUSGetCurrentOCP(0);
 8008940:	2000      	movs	r0, #0
 8008942:	f012 ff73 	bl	801b82c <BSP_PWR_VBUSGetCurrentOCP>
 8008946:	0003      	movs	r3, r0
 8008948:	2684      	movs	r6, #132	; 0x84
 800894a:	19ba      	adds	r2, r7, r6
 800894c:	6013      	str	r3, [r2, #0]

		// Use snprintf to limit the number of characters written
		int len = snprintf(_str2, sizeof(_str2), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltage, current, currentOCP);
 800894e:	193b      	adds	r3, r7, r4
 8008950:	6819      	ldr	r1, [r3, #0]
 8008952:	4a13      	ldr	r2, [pc, #76]	; (80089a0 <HAL_GPIO_EXTI_Falling_Callback+0x108>)
 8008954:	2444      	movs	r4, #68	; 0x44
 8008956:	1938      	adds	r0, r7, r4
 8008958:	19bb      	adds	r3, r7, r6
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	197b      	adds	r3, r7, r5
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	000b      	movs	r3, r1
 8008966:	213c      	movs	r1, #60	; 0x3c
 8008968:	f019 fe46 	bl	80225f8 <sniprintf>
 800896c:	0003      	movs	r3, r0
 800896e:	2280      	movs	r2, #128	; 0x80
 8008970:	18ba      	adds	r2, r7, r2
 8008972:	6013      	str	r3, [r2, #0]

		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str2, strlen(_str2));
 8008974:	193b      	adds	r3, r7, r4
 8008976:	0018      	movs	r0, r3
 8008978:	f7fd fc28 	bl	80061cc <strlen>
 800897c:	0002      	movs	r2, r0
 800897e:	193b      	adds	r3, r7, r4
 8008980:	9200      	str	r2, [sp, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	2100      	movs	r1, #0
 8008986:	2006      	movs	r0, #6
 8008988:	f009 f868 	bl	8011a5c <USBPD_TRACE_Add>
				}
			}**/

	}

}
 800898c:	46c0      	nop			; (mov r8, r8)
 800898e:	46bd      	mov	sp, r7
 8008990:	b027      	add	sp, #156	; 0x9c
 8008992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008994:	50000800 	.word	0x50000800
 8008998:	08023104 	.word	0x08023104
 800899c:	08023124 	.word	0x08023124
 80089a0:	08023144 	.word	0x08023144

080089a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80089ac:	2001      	movs	r0, #1
 80089ae:	f00e fb89 	bl	80170c4 <osDelay>
    app_loop();
 80089b2:	f7fd ff4f 	bl	8006854 <app_loop>
    osDelay(1);
 80089b6:	e7f9      	b.n	80089ac <StartDefaultTask+0x8>

080089b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a06      	ldr	r2, [pc, #24]	; (80089e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d101      	bne.n	80089ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80089ca:	f000 fb8b 	bl	80090e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  USBPD_DPM_TimerCounter(); //related to PD device manager
 80089ce:	f011 f9b1 	bl	8019d34 <USBPD_DPM_TimerCounter>
  GUI_TimerCounter(); //updating a graphical user interface (GUI) based on timer events.
 80089d2:	f015 fecd 	bl	801e770 <GUI_TimerCounter>
  /* USER CODE END Callback 1 */
}
 80089d6:	46c0      	nop			; (mov r8, r8)
 80089d8:	46bd      	mov	sp, r7
 80089da:	b002      	add	sp, #8
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	46c0      	nop			; (mov r8, r8)
 80089e0:	40001000 	.word	0x40001000

080089e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80089e8:	b672      	cpsid	i
}
 80089ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80089ec:	e7fe      	b.n	80089ec <Error_Handler+0x8>
	...

080089f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089f6:	4b15      	ldr	r3, [pc, #84]	; (8008a4c <HAL_MspInit+0x5c>)
 80089f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089fa:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <HAL_MspInit+0x5c>)
 80089fc:	2101      	movs	r1, #1
 80089fe:	430a      	orrs	r2, r1
 8008a00:	641a      	str	r2, [r3, #64]	; 0x40
 8008a02:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <HAL_MspInit+0x5c>)
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	2201      	movs	r2, #1
 8008a08:	4013      	ands	r3, r2
 8008a0a:	607b      	str	r3, [r7, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a0e:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <HAL_MspInit+0x5c>)
 8008a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a12:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <HAL_MspInit+0x5c>)
 8008a14:	2180      	movs	r1, #128	; 0x80
 8008a16:	0549      	lsls	r1, r1, #21
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <HAL_MspInit+0x5c>)
 8008a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a20:	2380      	movs	r3, #128	; 0x80
 8008a22:	055b      	lsls	r3, r3, #21
 8008a24:	4013      	ands	r3, r2
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	425b      	negs	r3, r3
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2103      	movs	r1, #3
 8008a32:	0018      	movs	r0, r3
 8008a34:	f001 fcca 	bl	800a3cc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8008a38:	23c0      	movs	r3, #192	; 0xc0
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f000 fb91 	bl	8009164 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a42:	46c0      	nop			; (mov r8, r8)
 8008a44:	46bd      	mov	sp, r7
 8008a46:	b002      	add	sp, #8
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	46c0      	nop			; (mov r8, r8)
 8008a4c:	40021000 	.word	0x40021000

08008a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b08b      	sub	sp, #44	; 0x2c
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a58:	2414      	movs	r4, #20
 8008a5a:	193b      	adds	r3, r7, r4
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	2314      	movs	r3, #20
 8008a60:	001a      	movs	r2, r3
 8008a62:	2100      	movs	r1, #0
 8008a64:	f019 fe1c 	bl	80226a0 <memset>
  if(hadc->Instance==ADC1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a2d      	ldr	r2, [pc, #180]	; (8008b24 <HAL_ADC_MspInit+0xd4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d154      	bne.n	8008b1c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008a72:	4b2d      	ldr	r3, [pc, #180]	; (8008b28 <HAL_ADC_MspInit+0xd8>)
 8008a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a76:	4b2c      	ldr	r3, [pc, #176]	; (8008b28 <HAL_ADC_MspInit+0xd8>)
 8008a78:	2180      	movs	r1, #128	; 0x80
 8008a7a:	0349      	lsls	r1, r1, #13
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	641a      	str	r2, [r3, #64]	; 0x40
 8008a80:	4b29      	ldr	r3, [pc, #164]	; (8008b28 <HAL_ADC_MspInit+0xd8>)
 8008a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a84:	2380      	movs	r3, #128	; 0x80
 8008a86:	035b      	lsls	r3, r3, #13
 8008a88:	4013      	ands	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]
 8008a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a8e:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <HAL_ADC_MspInit+0xd8>)
 8008a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a92:	4b25      	ldr	r3, [pc, #148]	; (8008b28 <HAL_ADC_MspInit+0xd8>)
 8008a94:	2101      	movs	r1, #1
 8008a96:	430a      	orrs	r2, r1
 8008a98:	635a      	str	r2, [r3, #52]	; 0x34
 8008a9a:	4b23      	ldr	r3, [pc, #140]	; (8008b28 <HAL_ADC_MspInit+0xd8>)
 8008a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VSENSE_Pin|OCP_ADC_I_Pin|ISENSE_Pin;
 8008aa6:	193b      	adds	r3, r7, r4
 8008aa8:	22e0      	movs	r2, #224	; 0xe0
 8008aaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008aac:	193b      	adds	r3, r7, r4
 8008aae:	2203      	movs	r2, #3
 8008ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab2:	193b      	adds	r3, r7, r4
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ab8:	193a      	adds	r2, r7, r4
 8008aba:	23a0      	movs	r3, #160	; 0xa0
 8008abc:	05db      	lsls	r3, r3, #23
 8008abe:	0011      	movs	r1, r2
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f002 fb3b 	bl	800b13c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8008ac6:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008ac8:	4a19      	ldr	r2, [pc, #100]	; (8008b30 <HAL_ADC_MspInit+0xe0>)
 8008aca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008acc:	4b17      	ldr	r3, [pc, #92]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008ace:	2205      	movs	r2, #5
 8008ad0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ad2:	4b16      	ldr	r3, [pc, #88]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ad8:	4b14      	ldr	r3, [pc, #80]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008ade:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008ae0:	2280      	movs	r2, #128	; 0x80
 8008ae2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008ae4:	4b11      	ldr	r3, [pc, #68]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008ae6:	2280      	movs	r2, #128	; 0x80
 8008ae8:	0052      	lsls	r2, r2, #1
 8008aea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008aee:	2280      	movs	r2, #128	; 0x80
 8008af0:	00d2      	lsls	r2, r2, #3
 8008af2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008af4:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008af6:	2220      	movs	r2, #32
 8008af8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008afa:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008b02:	0018      	movs	r0, r3
 8008b04:	f001 fec8 	bl	800a898 <HAL_DMA_Init>
 8008b08:	1e03      	subs	r3, r0, #0
 8008b0a:	d001      	beq.n	8008b10 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8008b0c:	f7ff ff6a 	bl	80089e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a06      	ldr	r2, [pc, #24]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008b14:	651a      	str	r2, [r3, #80]	; 0x50
 8008b16:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <HAL_ADC_MspInit+0xdc>)
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008b1c:	46c0      	nop			; (mov r8, r8)
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	b00b      	add	sp, #44	; 0x2c
 8008b22:	bd90      	pop	{r4, r7, pc}
 8008b24:	40012400 	.word	0x40012400
 8008b28:	40021000 	.word	0x40021000
 8008b2c:	200003b4 	.word	0x200003b4
 8008b30:	40020044 	.word	0x40020044

08008b34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b08b      	sub	sp, #44	; 0x2c
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b3c:	2414      	movs	r4, #20
 8008b3e:	193b      	adds	r3, r7, r4
 8008b40:	0018      	movs	r0, r3
 8008b42:	2314      	movs	r3, #20
 8008b44:	001a      	movs	r2, r3
 8008b46:	2100      	movs	r1, #0
 8008b48:	f019 fdaa 	bl	80226a0 <memset>
  if(hdac->Instance==DAC1)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a1c      	ldr	r2, [pc, #112]	; (8008bc4 <HAL_DAC_MspInit+0x90>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d131      	bne.n	8008bba <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8008b56:	4b1c      	ldr	r3, [pc, #112]	; (8008bc8 <HAL_DAC_MspInit+0x94>)
 8008b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b5a:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <HAL_DAC_MspInit+0x94>)
 8008b5c:	2180      	movs	r1, #128	; 0x80
 8008b5e:	0589      	lsls	r1, r1, #22
 8008b60:	430a      	orrs	r2, r1
 8008b62:	63da      	str	r2, [r3, #60]	; 0x3c
 8008b64:	4b18      	ldr	r3, [pc, #96]	; (8008bc8 <HAL_DAC_MspInit+0x94>)
 8008b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b68:	2380      	movs	r3, #128	; 0x80
 8008b6a:	059b      	lsls	r3, r3, #22
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]
 8008b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b72:	4b15      	ldr	r3, [pc, #84]	; (8008bc8 <HAL_DAC_MspInit+0x94>)
 8008b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <HAL_DAC_MspInit+0x94>)
 8008b78:	2101      	movs	r1, #1
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8008b7e:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <HAL_DAC_MspInit+0x94>)
 8008b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b82:	2201      	movs	r2, #1
 8008b84:	4013      	ands	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = OCP_DAC_LIMIT_Pin;
 8008b8a:	193b      	adds	r3, r7, r4
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b90:	193b      	adds	r3, r7, r4
 8008b92:	2203      	movs	r2, #3
 8008b94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b96:	193b      	adds	r3, r7, r4
 8008b98:	2200      	movs	r2, #0
 8008b9a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(OCP_DAC_LIMIT_GPIO_Port, &GPIO_InitStruct);
 8008b9c:	193a      	adds	r2, r7, r4
 8008b9e:	23a0      	movs	r3, #160	; 0xa0
 8008ba0:	05db      	lsls	r3, r3, #23
 8008ba2:	0011      	movs	r1, r2
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f002 fac9 	bl	800b13c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 3, 0);
 8008baa:	2200      	movs	r2, #0
 8008bac:	2103      	movs	r1, #3
 8008bae:	2011      	movs	r0, #17
 8008bb0:	f001 fc0c 	bl	800a3cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8008bb4:	2011      	movs	r0, #17
 8008bb6:	f001 fc1e 	bl	800a3f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8008bba:	46c0      	nop			; (mov r8, r8)
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b00b      	add	sp, #44	; 0x2c
 8008bc0:	bd90      	pop	{r4, r7, pc}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	40007400 	.word	0x40007400
 8008bc8:	40021000 	.word	0x40021000

08008bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008bcc:	b590      	push	{r4, r7, lr}
 8008bce:	b08b      	sub	sp, #44	; 0x2c
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bd4:	2414      	movs	r4, #20
 8008bd6:	193b      	adds	r3, r7, r4
 8008bd8:	0018      	movs	r0, r3
 8008bda:	2314      	movs	r3, #20
 8008bdc:	001a      	movs	r2, r3
 8008bde:	2100      	movs	r1, #0
 8008be0:	f019 fd5e 	bl	80226a0 <memset>
  if(hspi->Instance==SPI2)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a1b      	ldr	r2, [pc, #108]	; (8008c58 <HAL_SPI_MspInit+0x8c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d130      	bne.n	8008c50 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008bee:	4b1b      	ldr	r3, [pc, #108]	; (8008c5c <HAL_SPI_MspInit+0x90>)
 8008bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bf2:	4b1a      	ldr	r3, [pc, #104]	; (8008c5c <HAL_SPI_MspInit+0x90>)
 8008bf4:	2180      	movs	r1, #128	; 0x80
 8008bf6:	01c9      	lsls	r1, r1, #7
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8008bfc:	4b17      	ldr	r3, [pc, #92]	; (8008c5c <HAL_SPI_MspInit+0x90>)
 8008bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c00:	2380      	movs	r3, #128	; 0x80
 8008c02:	01db      	lsls	r3, r3, #7
 8008c04:	4013      	ands	r3, r2
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c0a:	4b14      	ldr	r3, [pc, #80]	; (8008c5c <HAL_SPI_MspInit+0x90>)
 8008c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c0e:	4b13      	ldr	r3, [pc, #76]	; (8008c5c <HAL_SPI_MspInit+0x90>)
 8008c10:	2102      	movs	r1, #2
 8008c12:	430a      	orrs	r2, r1
 8008c14:	635a      	str	r2, [r3, #52]	; 0x34
 8008c16:	4b11      	ldr	r3, [pc, #68]	; (8008c5c <HAL_SPI_MspInit+0x90>)
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB11     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008c22:	193b      	adds	r3, r7, r4
 8008c24:	22a0      	movs	r2, #160	; 0xa0
 8008c26:	0192      	lsls	r2, r2, #6
 8008c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c2a:	0021      	movs	r1, r4
 8008c2c:	187b      	adds	r3, r7, r1
 8008c2e:	2202      	movs	r2, #2
 8008c30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c32:	187b      	adds	r3, r7, r1
 8008c34:	2200      	movs	r2, #0
 8008c36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c38:	187b      	adds	r3, r7, r1
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8008c3e:	187b      	adds	r3, r7, r1
 8008c40:	2200      	movs	r2, #0
 8008c42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	4a06      	ldr	r2, [pc, #24]	; (8008c60 <HAL_SPI_MspInit+0x94>)
 8008c48:	0019      	movs	r1, r3
 8008c4a:	0010      	movs	r0, r2
 8008c4c:	f002 fa76 	bl	800b13c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008c50:	46c0      	nop			; (mov r8, r8)
 8008c52:	46bd      	mov	sp, r7
 8008c54:	b00b      	add	sp, #44	; 0x2c
 8008c56:	bd90      	pop	{r4, r7, pc}
 8008c58:	40003800 	.word	0x40003800
 8008c5c:	40021000 	.word	0x40021000
 8008c60:	50000400 	.word	0x50000400

08008c64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008c64:	b590      	push	{r4, r7, lr}
 8008c66:	b08b      	sub	sp, #44	; 0x2c
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c6c:	2414      	movs	r4, #20
 8008c6e:	193b      	adds	r3, r7, r4
 8008c70:	0018      	movs	r0, r3
 8008c72:	2314      	movs	r3, #20
 8008c74:	001a      	movs	r2, r3
 8008c76:	2100      	movs	r1, #0
 8008c78:	f019 fd12 	bl	80226a0 <memset>
  if(htim_encoder->Instance==TIM3)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1e      	ldr	r2, [pc, #120]	; (8008cfc <HAL_TIM_Encoder_MspInit+0x98>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d135      	bne.n	8008cf2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008c86:	4b1e      	ldr	r3, [pc, #120]	; (8008d00 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c8a:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008c8c:	2102      	movs	r1, #2
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	63da      	str	r2, [r3, #60]	; 0x3c
 8008c92:	4b1b      	ldr	r3, [pc, #108]	; (8008d00 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c96:	2202      	movs	r2, #2
 8008c98:	4013      	ands	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c9e:	4b18      	ldr	r3, [pc, #96]	; (8008d00 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ca2:	4b17      	ldr	r3, [pc, #92]	; (8008d00 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008ca4:	2104      	movs	r1, #4
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8008caa:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cae:	2204      	movs	r2, #4
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM3_CH1_Pin|ENC_TIM3_CH2_Pin;
 8008cb6:	0021      	movs	r1, r4
 8008cb8:	187b      	adds	r3, r7, r1
 8008cba:	22c0      	movs	r2, #192	; 0xc0
 8008cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cbe:	187b      	adds	r3, r7, r1
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc4:	187b      	adds	r3, r7, r1
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cca:	187b      	adds	r3, r7, r1
 8008ccc:	2200      	movs	r2, #0
 8008cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8008cd0:	187b      	adds	r3, r7, r1
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008cd6:	187b      	adds	r3, r7, r1
 8008cd8:	4a0a      	ldr	r2, [pc, #40]	; (8008d04 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008cda:	0019      	movs	r1, r3
 8008cdc:	0010      	movs	r0, r2
 8008cde:	f002 fa2d 	bl	800b13c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 3, 0);
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2103      	movs	r1, #3
 8008ce6:	2010      	movs	r0, #16
 8008ce8:	f001 fb70 	bl	800a3cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8008cec:	2010      	movs	r0, #16
 8008cee:	f001 fb82 	bl	800a3f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008cf2:	46c0      	nop			; (mov r8, r8)
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	b00b      	add	sp, #44	; 0x2c
 8008cf8:	bd90      	pop	{r4, r7, pc}
 8008cfa:	46c0      	nop			; (mov r8, r8)
 8008cfc:	40000400 	.word	0x40000400
 8008d00:	40021000 	.word	0x40021000
 8008d04:	50000800 	.word	0x50000800

08008d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d08:	b5b0      	push	{r4, r5, r7, lr}
 8008d0a:	b08c      	sub	sp, #48	; 0x30
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8008d10:	232b      	movs	r3, #43	; 0x2b
 8008d12:	18fb      	adds	r3, r7, r3
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008d18:	4b37      	ldr	r3, [pc, #220]	; (8008df8 <HAL_InitTick+0xf0>)
 8008d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d1c:	4b36      	ldr	r3, [pc, #216]	; (8008df8 <HAL_InitTick+0xf0>)
 8008d1e:	2110      	movs	r1, #16
 8008d20:	430a      	orrs	r2, r1
 8008d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d24:	4b34      	ldr	r3, [pc, #208]	; (8008df8 <HAL_InitTick+0xf0>)
 8008d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d28:	2210      	movs	r2, #16
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	60bb      	str	r3, [r7, #8]
 8008d2e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008d30:	230c      	movs	r3, #12
 8008d32:	18fa      	adds	r2, r7, r3
 8008d34:	2410      	movs	r4, #16
 8008d36:	193b      	adds	r3, r7, r4
 8008d38:	0011      	movs	r1, r2
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	f004 feb2 	bl	800daa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008d40:	193b      	adds	r3, r7, r4
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d104      	bne.n	8008d56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008d4c:	f004 fe94 	bl	800da78 <HAL_RCC_GetPCLK1Freq>
 8008d50:	0003      	movs	r3, r0
 8008d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d54:	e004      	b.n	8008d60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008d56:	f004 fe8f 	bl	800da78 <HAL_RCC_GetPCLK1Freq>
 8008d5a:	0003      	movs	r3, r0
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	4926      	ldr	r1, [pc, #152]	; (8008dfc <HAL_InitTick+0xf4>)
 8008d64:	0018      	movs	r0, r3
 8008d66:	f7fd fa43 	bl	80061f0 <__udivsi3>
 8008d6a:	0003      	movs	r3, r0
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008d70:	4b23      	ldr	r3, [pc, #140]	; (8008e00 <HAL_InitTick+0xf8>)
 8008d72:	4a24      	ldr	r2, [pc, #144]	; (8008e04 <HAL_InitTick+0xfc>)
 8008d74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008d76:	4b22      	ldr	r3, [pc, #136]	; (8008e00 <HAL_InitTick+0xf8>)
 8008d78:	4a23      	ldr	r2, [pc, #140]	; (8008e08 <HAL_InitTick+0x100>)
 8008d7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008d7c:	4b20      	ldr	r3, [pc, #128]	; (8008e00 <HAL_InitTick+0xf8>)
 8008d7e:	6a3a      	ldr	r2, [r7, #32]
 8008d80:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8008d82:	4b1f      	ldr	r3, [pc, #124]	; (8008e00 <HAL_InitTick+0xf8>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d88:	4b1d      	ldr	r3, [pc, #116]	; (8008e00 <HAL_InitTick+0xf8>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d8e:	4b1c      	ldr	r3, [pc, #112]	; (8008e00 <HAL_InitTick+0xf8>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008d94:	252b      	movs	r5, #43	; 0x2b
 8008d96:	197c      	adds	r4, r7, r5
 8008d98:	4b19      	ldr	r3, [pc, #100]	; (8008e00 <HAL_InitTick+0xf8>)
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	f005 fc76 	bl	800e68c <HAL_TIM_Base_Init>
 8008da0:	0003      	movs	r3, r0
 8008da2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8008da4:	197b      	adds	r3, r7, r5
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d11e      	bne.n	8008dea <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008dac:	197c      	adds	r4, r7, r5
 8008dae:	4b14      	ldr	r3, [pc, #80]	; (8008e00 <HAL_InitTick+0xf8>)
 8008db0:	0018      	movs	r0, r3
 8008db2:	f005 fccb 	bl	800e74c <HAL_TIM_Base_Start_IT>
 8008db6:	0003      	movs	r3, r0
 8008db8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8008dba:	197b      	adds	r3, r7, r5
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d113      	bne.n	8008dea <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8008dc2:	2011      	movs	r0, #17
 8008dc4:	f001 fb17 	bl	800a3f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d809      	bhi.n	8008de2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	0019      	movs	r1, r3
 8008dd4:	2011      	movs	r0, #17
 8008dd6:	f001 faf9 	bl	800a3cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008dda:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <HAL_InitTick+0x104>)
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	e003      	b.n	8008dea <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8008de2:	232b      	movs	r3, #43	; 0x2b
 8008de4:	18fb      	adds	r3, r7, r3
 8008de6:	2201      	movs	r2, #1
 8008de8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8008dea:	232b      	movs	r3, #43	; 0x2b
 8008dec:	18fb      	adds	r3, r7, r3
 8008dee:	781b      	ldrb	r3, [r3, #0]
}
 8008df0:	0018      	movs	r0, r3
 8008df2:	46bd      	mov	sp, r7
 8008df4:	b00c      	add	sp, #48	; 0x30
 8008df6:	bdb0      	pop	{r4, r5, r7, pc}
 8008df8:	40021000 	.word	0x40021000
 8008dfc:	000f4240 	.word	0x000f4240
 8008e00:	200004e0 	.word	0x200004e0
 8008e04:	40001000 	.word	0x40001000
 8008e08:	000003e7 	.word	0x000003e7
 8008e0c:	2000004c 	.word	0x2000004c

08008e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008e14:	e7fe      	b.n	8008e14 <NMI_Handler+0x4>

08008e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e1a:	e7fe      	b.n	8008e1a <HardFault_Handler+0x4>

08008e1c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(SW3_OFF_ON_Pin) != RESET){
 8008e20:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <EXTI0_1_IRQHandler+0x34>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	2202      	movs	r2, #2
 8008e26:	4013      	ands	r3, r2
 8008e28:	d104      	bne.n	8008e34 <EXTI0_1_IRQHandler+0x18>
 8008e2a:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <EXTI0_1_IRQHandler+0x34>)
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	4013      	ands	r3, r2
 8008e32:	d001      	beq.n	8008e38 <EXTI0_1_IRQHandler+0x1c>
 8008e34:	2301      	movs	r3, #1
 8008e36:	e000      	b.n	8008e3a <EXTI0_1_IRQHandler+0x1e>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <EXTI0_1_IRQHandler+0x26>
	  request_button_isr();
 8008e3e:	f7fe f86b 	bl	8006f18 <request_button_isr>
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_OFF_ON_Pin);
 8008e42:	2002      	movs	r0, #2
 8008e44:	f002 fb20 	bl	800b488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8008e48:	46c0      	nop			; (mov r8, r8)
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	46c0      	nop			; (mov r8, r8)
 8008e50:	40021800 	.word	0x40021800

08008e54 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  if (__HAL_GPIO_EXTI_GET_IT(SW1_TOGGLE_I_V_Pin) != RESET){
 8008e58:	4b0b      	ldr	r3, [pc, #44]	; (8008e88 <EXTI2_3_IRQHandler+0x34>)
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	2204      	movs	r2, #4
 8008e5e:	4013      	ands	r3, r2
 8008e60:	d104      	bne.n	8008e6c <EXTI2_3_IRQHandler+0x18>
 8008e62:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <EXTI2_3_IRQHandler+0x34>)
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2204      	movs	r2, #4
 8008e68:	4013      	ands	r3, r2
 8008e6a:	d001      	beq.n	8008e70 <EXTI2_3_IRQHandler+0x1c>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e000      	b.n	8008e72 <EXTI2_3_IRQHandler+0x1e>
 8008e70:	2300      	movs	r3, #0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <EXTI2_3_IRQHandler+0x26>
  	  cur_vol_button_isr();
 8008e76:	f7fe f8c1 	bl	8006ffc <cur_vol_button_isr>
    }
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_TOGGLE_I_V_Pin);
 8008e7a:	2004      	movs	r0, #4
 8008e7c:	f002 fb04 	bl	800b488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8008e80:	46c0      	nop			; (mov r8, r8)
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	40021800 	.word	0x40021800

08008e8c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(ENC_TOGGLE_UNITS_Pin) != RESET){
 8008e90:	4b26      	ldr	r3, [pc, #152]	; (8008f2c <EXTI4_15_IRQHandler+0xa0>)
 8008e92:	68da      	ldr	r2, [r3, #12]
 8008e94:	2380      	movs	r3, #128	; 0x80
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	4013      	ands	r3, r2
 8008e9a:	d105      	bne.n	8008ea8 <EXTI4_15_IRQHandler+0x1c>
 8008e9c:	4b23      	ldr	r3, [pc, #140]	; (8008f2c <EXTI4_15_IRQHandler+0xa0>)
 8008e9e:	691a      	ldr	r2, [r3, #16]
 8008ea0:	2380      	movs	r3, #128	; 0x80
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	d001      	beq.n	8008eac <EXTI4_15_IRQHandler+0x20>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e000      	b.n	8008eae <EXTI4_15_IRQHandler+0x22>
 8008eac:	2300      	movs	r3, #0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <EXTI4_15_IRQHandler+0x2a>
	  button_isr();
 8008eb2:	f7fd ff5b 	bl	8006d6c <button_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(SW2_DEBUG_BTN_Pin) != RESET){
 8008eb6:	4b1d      	ldr	r3, [pc, #116]	; (8008f2c <EXTI4_15_IRQHandler+0xa0>)
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	2210      	movs	r2, #16
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	d104      	bne.n	8008eca <EXTI4_15_IRQHandler+0x3e>
 8008ec0:	4b1a      	ldr	r3, [pc, #104]	; (8008f2c <EXTI4_15_IRQHandler+0xa0>)
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	2210      	movs	r2, #16
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	d001      	beq.n	8008ece <EXTI4_15_IRQHandler+0x42>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <EXTI4_15_IRQHandler+0x44>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <EXTI4_15_IRQHandler+0x4c>
	  lock_button_isr();
 8008ed4:	f7fe f942 	bl	800715c <lock_button_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(OCP_ALERT_Pin) != RESET){
 8008ed8:	4b14      	ldr	r3, [pc, #80]	; (8008f2c <EXTI4_15_IRQHandler+0xa0>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	2240      	movs	r2, #64	; 0x40
 8008ede:	4013      	ands	r3, r2
 8008ee0:	d104      	bne.n	8008eec <EXTI4_15_IRQHandler+0x60>
 8008ee2:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <EXTI4_15_IRQHandler+0xa0>)
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2240      	movs	r2, #64	; 0x40
 8008ee8:	4013      	ands	r3, r2
 8008eea:	d001      	beq.n	8008ef0 <EXTI4_15_IRQHandler+0x64>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e000      	b.n	8008ef2 <EXTI4_15_IRQHandler+0x66>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <EXTI4_15_IRQHandler+0x6e>
	  ocp_alert_isr();
 8008ef6:	f7fe f9b1 	bl	800725c <ocp_alert_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(OCP_ALERT2_Pin) != RESET){
 8008efa:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <EXTI4_15_IRQHandler+0xa0>)
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	2280      	movs	r2, #128	; 0x80
 8008f00:	4013      	ands	r3, r2
 8008f02:	d101      	bne.n	8008f08 <EXTI4_15_IRQHandler+0x7c>
 8008f04:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <EXTI4_15_IRQHandler+0xa0>)
 8008f06:	691b      	ldr	r3, [r3, #16]
	  //ocp_alert_isr();
  }
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_DEBUG_BTN_Pin);
 8008f08:	2010      	movs	r0, #16
 8008f0a:	f002 fabd 	bl	800b488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OCP_ALERT_Pin);
 8008f0e:	2040      	movs	r0, #64	; 0x40
 8008f10:	f002 faba 	bl	800b488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OCP_ALERT2_Pin);
 8008f14:	2080      	movs	r0, #128	; 0x80
 8008f16:	f002 fab7 	bl	800b488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_TOGGLE_UNITS_Pin);
 8008f1a:	2380      	movs	r3, #128	; 0x80
 8008f1c:	005b      	lsls	r3, r3, #1
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f002 fab2 	bl	800b488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8008f24:	46c0      	nop			; (mov r8, r8)
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	40021800 	.word	0x40021800

08008f30 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <USB_UCPD1_2_IRQHandler+0x18>)
 8008f36:	0018      	movs	r0, r3
 8008f38:	f002 fc60 	bl	800b7fc <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 8008f3c:	f009 fdd2 	bl	8012ae4 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8008f40:	46c0      	nop			; (mov r8, r8)
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	46c0      	nop			; (mov r8, r8)
 8008f48:	20004430 	.word	0x20004430

08008f4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008f50:	46c0      	nop			; (mov r8, r8)
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  TRACER_EMB_IRQHandlerDMA();
 8008f5a:	f018 fab3 	bl	80214c4 <TRACER_EMB_IRQHandlerDMA>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008f68:	4b03      	ldr	r3, [pc, #12]	; (8008f78 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x14>)
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	f001 fdc6 	bl	800aafc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8008f70:	46c0      	nop			; (mov r8, r8)
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	200003b4 	.word	0x200003b4

08008f7c <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */
  encoder_turn_isr();
 8008f80:	f7fd fd2e 	bl	80069e0 <encoder_turn_isr>
  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008f84:	4b03      	ldr	r3, [pc, #12]	; (8008f94 <TIM3_TIM4_IRQHandler+0x18>)
 8008f86:	0018      	movs	r0, r3
 8008f88:	f005 fdae 	bl	800eae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 8008f8c:	46c0      	nop			; (mov r8, r8)
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	2000048c 	.word	0x2000048c

08008f98 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008f9c:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <TIM6_DAC_LPTIM1_IRQHandler+0x1c>)
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f005 fda2 	bl	800eae8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8008fa4:	4b04      	ldr	r3, [pc, #16]	; (8008fb8 <TIM6_DAC_LPTIM1_IRQHandler+0x20>)
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	f001 fab2 	bl	800a510 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8008fac:	46c0      	nop			; (mov r8, r8)
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	200004e0 	.word	0x200004e0
 8008fb8:	20000414 	.word	0x20000414

08008fbc <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
  button_timer_isr();
 8008fc0:	f7fd ff84 	bl	8006ecc <button_timer_isr>
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */

  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8008fc4:	46c0      	nop			; (mov r8, r8)
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  TRACER_EMB_IRQHandlerUSART();
 8008fce:	f018 fa80 	bl	80214d2 <TRACER_EMB_IRQHandlerUSART>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8008fd2:	46c0      	nop			; (mov r8, r8)
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008fe0:	4a14      	ldr	r2, [pc, #80]	; (8009034 <_sbrk+0x5c>)
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <_sbrk+0x60>)
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008fec:	4b13      	ldr	r3, [pc, #76]	; (800903c <_sbrk+0x64>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d102      	bne.n	8008ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <_sbrk+0x64>)
 8008ff6:	4a12      	ldr	r2, [pc, #72]	; (8009040 <_sbrk+0x68>)
 8008ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008ffa:	4b10      	ldr	r3, [pc, #64]	; (800903c <_sbrk+0x64>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	18d3      	adds	r3, r2, r3
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	429a      	cmp	r2, r3
 8009006:	d207      	bcs.n	8009018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009008:	f019 fbc2 	bl	8022790 <__errno>
 800900c:	0003      	movs	r3, r0
 800900e:	220c      	movs	r2, #12
 8009010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009012:	2301      	movs	r3, #1
 8009014:	425b      	negs	r3, r3
 8009016:	e009      	b.n	800902c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009018:	4b08      	ldr	r3, [pc, #32]	; (800903c <_sbrk+0x64>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800901e:	4b07      	ldr	r3, [pc, #28]	; (800903c <_sbrk+0x64>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	18d2      	adds	r2, r2, r3
 8009026:	4b05      	ldr	r3, [pc, #20]	; (800903c <_sbrk+0x64>)
 8009028:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800902a:	68fb      	ldr	r3, [r7, #12]
}
 800902c:	0018      	movs	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	b006      	add	sp, #24
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20024000 	.word	0x20024000
 8009038:	00000400 	.word	0x00000400
 800903c:	2000052c 	.word	0x2000052c
 8009040:	20005140 	.word	0x20005140

08009044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009048:	46c0      	nop			; (mov r8, r8)
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009050:	480d      	ldr	r0, [pc, #52]	; (8009088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009052:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009054:	f7ff fff6 	bl	8009044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009058:	480c      	ldr	r0, [pc, #48]	; (800908c <LoopForever+0x6>)
  ldr r1, =_edata
 800905a:	490d      	ldr	r1, [pc, #52]	; (8009090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800905c:	4a0d      	ldr	r2, [pc, #52]	; (8009094 <LoopForever+0xe>)
  movs r3, #0
 800905e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009060:	e002      	b.n	8009068 <LoopCopyDataInit>

08009062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009066:	3304      	adds	r3, #4

08009068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800906a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800906c:	d3f9      	bcc.n	8009062 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800906e:	4a0a      	ldr	r2, [pc, #40]	; (8009098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009070:	4c0a      	ldr	r4, [pc, #40]	; (800909c <LoopForever+0x16>)
  movs r3, #0
 8009072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009074:	e001      	b.n	800907a <LoopFillZerobss>

08009076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009078:	3204      	adds	r2, #4

0800907a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800907a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800907c:	d3fb      	bcc.n	8009076 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800907e:	f019 fb8d 	bl	802279c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8009082:	f7fe fef5 	bl	8007e70 <main>

08009086 <LoopForever>:

LoopForever:
  b LoopForever
 8009086:	e7fe      	b.n	8009086 <LoopForever>
  ldr   r0, =_estack
 8009088:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800908c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009090:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8009094:	08024a4c 	.word	0x08024a4c
  ldr r2, =_sbss
 8009098:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 800909c:	20005140 	.word	0x20005140

080090a0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80090a0:	e7fe      	b.n	80090a0 <ADC1_COMP_IRQHandler>
	...

080090a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80090aa:	1dfb      	adds	r3, r7, #7
 80090ac:	2200      	movs	r2, #0
 80090ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80090b0:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <HAL_Init+0x3c>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <HAL_Init+0x3c>)
 80090b6:	2180      	movs	r1, #128	; 0x80
 80090b8:	0049      	lsls	r1, r1, #1
 80090ba:	430a      	orrs	r2, r1
 80090bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80090be:	2003      	movs	r0, #3
 80090c0:	f7ff fe22 	bl	8008d08 <HAL_InitTick>
 80090c4:	1e03      	subs	r3, r0, #0
 80090c6:	d003      	beq.n	80090d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80090c8:	1dfb      	adds	r3, r7, #7
 80090ca:	2201      	movs	r2, #1
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e001      	b.n	80090d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80090d0:	f7ff fc8e 	bl	80089f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80090d4:	1dfb      	adds	r3, r7, #7
 80090d6:	781b      	ldrb	r3, [r3, #0]
}
 80090d8:	0018      	movs	r0, r3
 80090da:	46bd      	mov	sp, r7
 80090dc:	b002      	add	sp, #8
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	40022000 	.word	0x40022000

080090e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <HAL_IncTick+0x1c>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	001a      	movs	r2, r3
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <HAL_IncTick+0x20>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	18d2      	adds	r2, r2, r3
 80090f4:	4b03      	ldr	r3, [pc, #12]	; (8009104 <HAL_IncTick+0x20>)
 80090f6:	601a      	str	r2, [r3, #0]
}
 80090f8:	46c0      	nop			; (mov r8, r8)
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	20000050 	.word	0x20000050
 8009104:	20000530 	.word	0x20000530

08009108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  return uwTick;
 800910c:	4b02      	ldr	r3, [pc, #8]	; (8009118 <HAL_GetTick+0x10>)
 800910e:	681b      	ldr	r3, [r3, #0]
}
 8009110:	0018      	movs	r0, r3
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	46c0      	nop			; (mov r8, r8)
 8009118:	20000530 	.word	0x20000530

0800911c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009124:	f7ff fff0 	bl	8009108 <HAL_GetTick>
 8009128:	0003      	movs	r3, r0
 800912a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	3301      	adds	r3, #1
 8009134:	d005      	beq.n	8009142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009136:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <HAL_Delay+0x44>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	001a      	movs	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	189b      	adds	r3, r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	f7ff ffe0 	bl	8009108 <HAL_GetTick>
 8009148:	0002      	movs	r2, r0
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	429a      	cmp	r2, r3
 8009152:	d8f7      	bhi.n	8009144 <HAL_Delay+0x28>
  {
  }
}
 8009154:	46c0      	nop			; (mov r8, r8)
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	46bd      	mov	sp, r7
 800915a:	b004      	add	sp, #16
 800915c:	bd80      	pop	{r7, pc}
 800915e:	46c0      	nop			; (mov r8, r8)
 8009160:	20000050 	.word	0x20000050

08009164 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800916c:	4b06      	ldr	r3, [pc, #24]	; (8009188 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a06      	ldr	r2, [pc, #24]	; (800918c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8009172:	4013      	ands	r3, r2
 8009174:	0019      	movs	r1, r3
 8009176:	4b04      	ldr	r3, [pc, #16]	; (8009188 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	430a      	orrs	r2, r1
 800917c:	601a      	str	r2, [r3, #0]
}
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	46bd      	mov	sp, r7
 8009182:	b002      	add	sp, #8
 8009184:	bd80      	pop	{r7, pc}
 8009186:	46c0      	nop			; (mov r8, r8)
 8009188:	40010000 	.word	0x40010000
 800918c:	fffff9ff 	.word	0xfffff9ff

08009190 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a05      	ldr	r2, [pc, #20]	; (80091b4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80091a0:	401a      	ands	r2, r3
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	601a      	str	r2, [r3, #0]
}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	46bd      	mov	sp, r7
 80091ae:	b002      	add	sp, #8
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	fe3fffff 	.word	0xfe3fffff

080091b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	23e0      	movs	r3, #224	; 0xe0
 80091c6:	045b      	lsls	r3, r3, #17
 80091c8:	4013      	ands	r3, r2
}
 80091ca:	0018      	movs	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	b002      	add	sp, #8
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	2104      	movs	r1, #4
 80091e6:	400a      	ands	r2, r1
 80091e8:	2107      	movs	r1, #7
 80091ea:	4091      	lsls	r1, r2
 80091ec:	000a      	movs	r2, r1
 80091ee:	43d2      	mvns	r2, r2
 80091f0:	401a      	ands	r2, r3
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2104      	movs	r1, #4
 80091f6:	400b      	ands	r3, r1
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	4099      	lsls	r1, r3
 80091fc:	000b      	movs	r3, r1
 80091fe:	431a      	orrs	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8009204:	46c0      	nop			; (mov r8, r8)
 8009206:	46bd      	mov	sp, r7
 8009208:	b004      	add	sp, #16
 800920a:	bd80      	pop	{r7, pc}

0800920c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	2104      	movs	r1, #4
 800921e:	400a      	ands	r2, r1
 8009220:	2107      	movs	r1, #7
 8009222:	4091      	lsls	r1, r2
 8009224:	000a      	movs	r2, r1
 8009226:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2104      	movs	r1, #4
 800922c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800922e:	40da      	lsrs	r2, r3
 8009230:	0013      	movs	r3, r2
}
 8009232:	0018      	movs	r0, r3
 8009234:	46bd      	mov	sp, r7
 8009236:	b002      	add	sp, #8
 8009238:	bd80      	pop	{r7, pc}

0800923a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	23c0      	movs	r3, #192	; 0xc0
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	4013      	ands	r3, r2
 800924c:	d101      	bne.n	8009252 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009252:	2300      	movs	r3, #0
}
 8009254:	0018      	movs	r0, r3
 8009256:	46bd      	mov	sp, r7
 8009258:	b002      	add	sp, #8
 800925a:	bd80      	pop	{r7, pc}

0800925c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	211f      	movs	r1, #31
 8009270:	400a      	ands	r2, r1
 8009272:	210f      	movs	r1, #15
 8009274:	4091      	lsls	r1, r2
 8009276:	000a      	movs	r2, r1
 8009278:	43d2      	mvns	r2, r2
 800927a:	401a      	ands	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	0e9b      	lsrs	r3, r3, #26
 8009280:	210f      	movs	r1, #15
 8009282:	4019      	ands	r1, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	201f      	movs	r0, #31
 8009288:	4003      	ands	r3, r0
 800928a:	4099      	lsls	r1, r3
 800928c:	000b      	movs	r3, r1
 800928e:	431a      	orrs	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009294:	46c0      	nop			; (mov r8, r8)
 8009296:	46bd      	mov	sp, r7
 8009298:	b004      	add	sp, #16
 800929a:	bd80      	pop	{r7, pc}

0800929c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	035b      	lsls	r3, r3, #13
 80092ae:	0b5b      	lsrs	r3, r3, #13
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b002      	add	sp, #8
 80092bc:	bd80      	pop	{r7, pc}

080092be <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b082      	sub	sp, #8
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	0352      	lsls	r2, r2, #13
 80092d0:	0b52      	lsrs	r2, r2, #13
 80092d2:	43d2      	mvns	r2, r2
 80092d4:	401a      	ands	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	46bd      	mov	sp, r7
 80092de:	b002      	add	sp, #8
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	0212      	lsls	r2, r2, #8
 80092f8:	43d2      	mvns	r2, r2
 80092fa:	401a      	ands	r2, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	6879      	ldr	r1, [r7, #4]
 8009302:	400b      	ands	r3, r1
 8009304:	4904      	ldr	r1, [pc, #16]	; (8009318 <LL_ADC_SetChannelSamplingTime+0x34>)
 8009306:	400b      	ands	r3, r1
 8009308:	431a      	orrs	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800930e:	46c0      	nop			; (mov r8, r8)
 8009310:	46bd      	mov	sp, r7
 8009312:	b004      	add	sp, #16
 8009314:	bd80      	pop	{r7, pc}
 8009316:	46c0      	nop			; (mov r8, r8)
 8009318:	07ffff00 	.word	0x07ffff00

0800931c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	4a05      	ldr	r2, [pc, #20]	; (8009340 <LL_ADC_EnableInternalRegulator+0x24>)
 800932a:	4013      	ands	r3, r2
 800932c:	2280      	movs	r2, #128	; 0x80
 800932e:	0552      	lsls	r2, r2, #21
 8009330:	431a      	orrs	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	46bd      	mov	sp, r7
 800933a:	b002      	add	sp, #8
 800933c:	bd80      	pop	{r7, pc}
 800933e:	46c0      	nop			; (mov r8, r8)
 8009340:	6fffffe8 	.word	0x6fffffe8

08009344 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	2380      	movs	r3, #128	; 0x80
 8009352:	055b      	lsls	r3, r3, #21
 8009354:	401a      	ands	r2, r3
 8009356:	2380      	movs	r3, #128	; 0x80
 8009358:	055b      	lsls	r3, r3, #21
 800935a:	429a      	cmp	r2, r3
 800935c:	d101      	bne.n	8009362 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800935e:	2301      	movs	r3, #1
 8009360:	e000      	b.n	8009364 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8009362:	2300      	movs	r3, #0
}
 8009364:	0018      	movs	r0, r3
 8009366:	46bd      	mov	sp, r7
 8009368:	b002      	add	sp, #8
 800936a:	bd80      	pop	{r7, pc}

0800936c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	4a04      	ldr	r2, [pc, #16]	; (800938c <LL_ADC_Enable+0x20>)
 800937a:	4013      	ands	r3, r2
 800937c:	2201      	movs	r2, #1
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009384:	46c0      	nop			; (mov r8, r8)
 8009386:	46bd      	mov	sp, r7
 8009388:	b002      	add	sp, #8
 800938a:	bd80      	pop	{r7, pc}
 800938c:	7fffffe8 	.word	0x7fffffe8

08009390 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	4a04      	ldr	r2, [pc, #16]	; (80093b0 <LL_ADC_Disable+0x20>)
 800939e:	4013      	ands	r3, r2
 80093a0:	2202      	movs	r2, #2
 80093a2:	431a      	orrs	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80093a8:	46c0      	nop			; (mov r8, r8)
 80093aa:	46bd      	mov	sp, r7
 80093ac:	b002      	add	sp, #8
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	7fffffe8 	.word	0x7fffffe8

080093b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	2201      	movs	r2, #1
 80093c2:	4013      	ands	r3, r2
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <LL_ADC_IsEnabled+0x18>
 80093c8:	2301      	movs	r3, #1
 80093ca:	e000      	b.n	80093ce <LL_ADC_IsEnabled+0x1a>
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	0018      	movs	r0, r3
 80093d0:	46bd      	mov	sp, r7
 80093d2:	b002      	add	sp, #8
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b082      	sub	sp, #8
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2202      	movs	r2, #2
 80093e4:	4013      	ands	r3, r2
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d101      	bne.n	80093ee <LL_ADC_IsDisableOngoing+0x18>
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <LL_ADC_IsDisableOngoing+0x1a>
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	0018      	movs	r0, r3
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b002      	add	sp, #8
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	4a04      	ldr	r2, [pc, #16]	; (8009418 <LL_ADC_REG_StartConversion+0x20>)
 8009406:	4013      	ands	r3, r2
 8009408:	2204      	movs	r2, #4
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009410:	46c0      	nop			; (mov r8, r8)
 8009412:	46bd      	mov	sp, r7
 8009414:	b002      	add	sp, #8
 8009416:	bd80      	pop	{r7, pc}
 8009418:	7fffffe8 	.word	0x7fffffe8

0800941c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2204      	movs	r2, #4
 800942a:	4013      	ands	r3, r2
 800942c:	2b04      	cmp	r3, #4
 800942e:	d101      	bne.n	8009434 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009434:	2300      	movs	r3, #0
}
 8009436:	0018      	movs	r0, r3
 8009438:	46bd      	mov	sp, r7
 800943a:	b002      	add	sp, #8
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009448:	231f      	movs	r3, #31
 800944a:	18fb      	adds	r3, r7, r3
 800944c:	2200      	movs	r2, #0
 800944e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8009450:	2300      	movs	r3, #0
 8009452:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e17f      	b.n	8009766 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10a      	bne.n	8009484 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	0018      	movs	r0, r3
 8009472:	f7ff faed 	bl	8008a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2254      	movs	r2, #84	; 0x54
 8009480:	2100      	movs	r1, #0
 8009482:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	0018      	movs	r0, r3
 800948a:	f7ff ff5b 	bl	8009344 <LL_ADC_IsInternalRegulatorEnabled>
 800948e:	1e03      	subs	r3, r0, #0
 8009490:	d115      	bne.n	80094be <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	0018      	movs	r0, r3
 8009498:	f7ff ff40 	bl	800931c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800949c:	4bb4      	ldr	r3, [pc, #720]	; (8009770 <HAL_ADC_Init+0x330>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	49b4      	ldr	r1, [pc, #720]	; (8009774 <HAL_ADC_Init+0x334>)
 80094a2:	0018      	movs	r0, r3
 80094a4:	f7fc fea4 	bl	80061f0 <__udivsi3>
 80094a8:	0003      	movs	r3, r0
 80094aa:	3301      	adds	r3, #1
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80094b0:	e002      	b.n	80094b8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f9      	bne.n	80094b2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	0018      	movs	r0, r3
 80094c4:	f7ff ff3e 	bl	8009344 <LL_ADC_IsInternalRegulatorEnabled>
 80094c8:	1e03      	subs	r3, r0, #0
 80094ca:	d10f      	bne.n	80094ec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d0:	2210      	movs	r2, #16
 80094d2:	431a      	orrs	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094dc:	2201      	movs	r2, #1
 80094de:	431a      	orrs	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80094e4:	231f      	movs	r3, #31
 80094e6:	18fb      	adds	r3, r7, r3
 80094e8:	2201      	movs	r2, #1
 80094ea:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	0018      	movs	r0, r3
 80094f2:	f7ff ff93 	bl	800941c <LL_ADC_REG_IsConversionOngoing>
 80094f6:	0003      	movs	r3, r0
 80094f8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fe:	2210      	movs	r2, #16
 8009500:	4013      	ands	r3, r2
 8009502:	d000      	beq.n	8009506 <HAL_ADC_Init+0xc6>
 8009504:	e122      	b.n	800974c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d000      	beq.n	800950e <HAL_ADC_Init+0xce>
 800950c:	e11e      	b.n	800974c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009512:	4a99      	ldr	r2, [pc, #612]	; (8009778 <HAL_ADC_Init+0x338>)
 8009514:	4013      	ands	r3, r2
 8009516:	2202      	movs	r2, #2
 8009518:	431a      	orrs	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	0018      	movs	r0, r3
 8009524:	f7ff ff46 	bl	80093b4 <LL_ADC_IsEnabled>
 8009528:	1e03      	subs	r3, r0, #0
 800952a:	d000      	beq.n	800952e <HAL_ADC_Init+0xee>
 800952c:	e0ad      	b.n	800968a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7e1b      	ldrb	r3, [r3, #24]
 8009536:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8009538:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	7e5b      	ldrb	r3, [r3, #25]
 800953e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8009540:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	7e9b      	ldrb	r3, [r3, #26]
 8009546:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8009548:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <HAL_ADC_Init+0x118>
 8009552:	2380      	movs	r3, #128	; 0x80
 8009554:	015b      	lsls	r3, r3, #5
 8009556:	e000      	b.n	800955a <HAL_ADC_Init+0x11a>
 8009558:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800955a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8009560:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	2b00      	cmp	r3, #0
 8009568:	da04      	bge.n	8009574 <HAL_ADC_Init+0x134>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	085b      	lsrs	r3, r3, #1
 8009572:	e001      	b.n	8009578 <HAL_ADC_Init+0x138>
 8009574:	2380      	movs	r3, #128	; 0x80
 8009576:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8009578:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	212c      	movs	r1, #44	; 0x2c
 800957e:	5c5b      	ldrb	r3, [r3, r1]
 8009580:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8009582:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	4313      	orrs	r3, r2
 8009588:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2220      	movs	r2, #32
 800958e:	5c9b      	ldrb	r3, [r3, r2]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d115      	bne.n	80095c0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7e9b      	ldrb	r3, [r3, #26]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d105      	bne.n	80095a8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	2280      	movs	r2, #128	; 0x80
 80095a0:	0252      	lsls	r2, r2, #9
 80095a2:	4313      	orrs	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	e00b      	b.n	80095c0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ac:	2220      	movs	r2, #32
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b8:	2201      	movs	r2, #1
 80095ba:	431a      	orrs	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00a      	beq.n	80095de <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095cc:	23e0      	movs	r3, #224	; 0xe0
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80095d6:	4313      	orrs	r3, r2
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	4313      	orrs	r3, r2
 80095dc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	4a65      	ldr	r2, [pc, #404]	; (800977c <HAL_ADC_Init+0x33c>)
 80095e6:	4013      	ands	r3, r2
 80095e8:	0019      	movs	r1, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	430a      	orrs	r2, r1
 80095f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	0f9b      	lsrs	r3, r3, #30
 80095fa:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009600:	4313      	orrs	r3, r2
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	4313      	orrs	r3, r2
 8009606:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	223c      	movs	r2, #60	; 0x3c
 800960c:	5c9b      	ldrb	r3, [r3, r2]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d111      	bne.n	8009636 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	0f9b      	lsrs	r3, r3, #30
 8009618:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800961e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8009624:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800962a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	4313      	orrs	r3, r2
 8009630:	2201      	movs	r2, #1
 8009632:	4313      	orrs	r3, r2
 8009634:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	4a50      	ldr	r2, [pc, #320]	; (8009780 <HAL_ADC_Init+0x340>)
 800963e:	4013      	ands	r3, r2
 8009640:	0019      	movs	r1, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	430a      	orrs	r2, r1
 800964a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	23c0      	movs	r3, #192	; 0xc0
 8009652:	061b      	lsls	r3, r3, #24
 8009654:	429a      	cmp	r2, r3
 8009656:	d018      	beq.n	800968a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800965c:	2380      	movs	r3, #128	; 0x80
 800965e:	05db      	lsls	r3, r3, #23
 8009660:	429a      	cmp	r2, r3
 8009662:	d012      	beq.n	800968a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009668:	2380      	movs	r3, #128	; 0x80
 800966a:	061b      	lsls	r3, r3, #24
 800966c:	429a      	cmp	r2, r3
 800966e:	d00c      	beq.n	800968a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8009670:	4b44      	ldr	r3, [pc, #272]	; (8009784 <HAL_ADC_Init+0x344>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a44      	ldr	r2, [pc, #272]	; (8009788 <HAL_ADC_Init+0x348>)
 8009676:	4013      	ands	r3, r2
 8009678:	0019      	movs	r1, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	23f0      	movs	r3, #240	; 0xf0
 8009680:	039b      	lsls	r3, r3, #14
 8009682:	401a      	ands	r2, r3
 8009684:	4b3f      	ldr	r3, [pc, #252]	; (8009784 <HAL_ADC_Init+0x344>)
 8009686:	430a      	orrs	r2, r1
 8009688:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009692:	001a      	movs	r2, r3
 8009694:	2100      	movs	r1, #0
 8009696:	f7ff fd9c 	bl	80091d2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a2:	493a      	ldr	r1, [pc, #232]	; (800978c <HAL_ADC_Init+0x34c>)
 80096a4:	001a      	movs	r2, r3
 80096a6:	f7ff fd94 	bl	80091d2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d109      	bne.n	80096c6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2110      	movs	r1, #16
 80096be:	4249      	negs	r1, r1
 80096c0:	430a      	orrs	r2, r1
 80096c2:	629a      	str	r2, [r3, #40]	; 0x28
 80096c4:	e018      	b.n	80096f8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	691a      	ldr	r2, [r3, #16]
 80096ca:	2380      	movs	r3, #128	; 0x80
 80096cc:	039b      	lsls	r3, r3, #14
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d112      	bne.n	80096f8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	3b01      	subs	r3, #1
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	221c      	movs	r2, #28
 80096e2:	4013      	ands	r3, r2
 80096e4:	2210      	movs	r2, #16
 80096e6:	4252      	negs	r2, r2
 80096e8:	409a      	lsls	r2, r3
 80096ea:	0011      	movs	r1, r2
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	430a      	orrs	r2, r1
 80096f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2100      	movs	r1, #0
 80096fe:	0018      	movs	r0, r3
 8009700:	f7ff fd84 	bl	800920c <LL_ADC_GetSamplingTimeCommonChannels>
 8009704:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800970a:	429a      	cmp	r2, r3
 800970c:	d10b      	bne.n	8009726 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009718:	2203      	movs	r2, #3
 800971a:	4393      	bics	r3, r2
 800971c:	2201      	movs	r2, #1
 800971e:	431a      	orrs	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009724:	e01c      	b.n	8009760 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800972a:	2212      	movs	r2, #18
 800972c:	4393      	bics	r3, r2
 800972e:	2210      	movs	r2, #16
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800973a:	2201      	movs	r2, #1
 800973c:	431a      	orrs	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8009742:	231f      	movs	r3, #31
 8009744:	18fb      	adds	r3, r7, r3
 8009746:	2201      	movs	r2, #1
 8009748:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800974a:	e009      	b.n	8009760 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009750:	2210      	movs	r2, #16
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009758:	231f      	movs	r3, #31
 800975a:	18fb      	adds	r3, r7, r3
 800975c:	2201      	movs	r2, #1
 800975e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009760:	231f      	movs	r3, #31
 8009762:	18fb      	adds	r3, r7, r3
 8009764:	781b      	ldrb	r3, [r3, #0]
}
 8009766:	0018      	movs	r0, r3
 8009768:	46bd      	mov	sp, r7
 800976a:	b008      	add	sp, #32
 800976c:	bd80      	pop	{r7, pc}
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	20000048 	.word	0x20000048
 8009774:	00030d40 	.word	0x00030d40
 8009778:	fffffefd 	.word	0xfffffefd
 800977c:	ffde0201 	.word	0xffde0201
 8009780:	1ffffc02 	.word	0x1ffffc02
 8009784:	40012708 	.word	0x40012708
 8009788:	ffc3ffff 	.word	0xffc3ffff
 800978c:	07ffff04 	.word	0x07ffff04

08009790 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009790:	b5b0      	push	{r4, r5, r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	0018      	movs	r0, r3
 80097a2:	f7ff fe3b 	bl	800941c <LL_ADC_REG_IsConversionOngoing>
 80097a6:	1e03      	subs	r3, r0, #0
 80097a8:	d16c      	bne.n	8009884 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2254      	movs	r2, #84	; 0x54
 80097ae:	5c9b      	ldrb	r3, [r3, r2]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d101      	bne.n	80097b8 <HAL_ADC_Start_DMA+0x28>
 80097b4:	2302      	movs	r3, #2
 80097b6:	e06c      	b.n	8009892 <HAL_ADC_Start_DMA+0x102>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2254      	movs	r2, #84	; 0x54
 80097bc:	2101      	movs	r1, #1
 80097be:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	2201      	movs	r2, #1
 80097c8:	4013      	ands	r3, r2
 80097ca:	d113      	bne.n	80097f4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	0018      	movs	r0, r3
 80097d2:	f7ff fdef 	bl	80093b4 <LL_ADC_IsEnabled>
 80097d6:	1e03      	subs	r3, r0, #0
 80097d8:	d004      	beq.n	80097e4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	0018      	movs	r0, r3
 80097e0:	f7ff fdd6 	bl	8009390 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2101      	movs	r1, #1
 80097f0:	430a      	orrs	r2, r1
 80097f2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80097f4:	2517      	movs	r5, #23
 80097f6:	197c      	adds	r4, r7, r5
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	0018      	movs	r0, r3
 80097fc:	f000 fa46 	bl	8009c8c <ADC_Enable>
 8009800:	0003      	movs	r3, r0
 8009802:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009804:	002c      	movs	r4, r5
 8009806:	193b      	adds	r3, r7, r4
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d13e      	bne.n	800988c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009812:	4a22      	ldr	r2, [pc, #136]	; (800989c <HAL_ADC_Start_DMA+0x10c>)
 8009814:	4013      	ands	r3, r2
 8009816:	2280      	movs	r2, #128	; 0x80
 8009818:	0052      	lsls	r2, r2, #1
 800981a:	431a      	orrs	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982a:	4a1d      	ldr	r2, [pc, #116]	; (80098a0 <HAL_ADC_Start_DMA+0x110>)
 800982c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009832:	4a1c      	ldr	r2, [pc, #112]	; (80098a4 <HAL_ADC_Start_DMA+0x114>)
 8009834:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800983a:	4a1b      	ldr	r2, [pc, #108]	; (80098a8 <HAL_ADC_Start_DMA+0x118>)
 800983c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	221c      	movs	r2, #28
 8009844:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2254      	movs	r2, #84	; 0x54
 800984a:	2100      	movs	r1, #0
 800984c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2110      	movs	r1, #16
 800985a:	430a      	orrs	r2, r1
 800985c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3340      	adds	r3, #64	; 0x40
 8009868:	0019      	movs	r1, r3
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	193c      	adds	r4, r7, r4
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f001 f8be 	bl	800a9f0 <HAL_DMA_Start_IT>
 8009874:	0003      	movs	r3, r0
 8009876:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	0018      	movs	r0, r3
 800987e:	f7ff fdbb 	bl	80093f8 <LL_ADC_REG_StartConversion>
 8009882:	e003      	b.n	800988c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009884:	2317      	movs	r3, #23
 8009886:	18fb      	adds	r3, r7, r3
 8009888:	2202      	movs	r2, #2
 800988a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800988c:	2317      	movs	r3, #23
 800988e:	18fb      	adds	r3, r7, r3
 8009890:	781b      	ldrb	r3, [r3, #0]
}
 8009892:	0018      	movs	r0, r3
 8009894:	46bd      	mov	sp, r7
 8009896:	b006      	add	sp, #24
 8009898:	bdb0      	pop	{r4, r5, r7, pc}
 800989a:	46c0      	nop			; (mov r8, r8)
 800989c:	fffff0fe 	.word	0xfffff0fe
 80098a0:	08009e55 	.word	0x08009e55
 80098a4:	08009f1d 	.word	0x08009f1d
 80098a8:	08009f3b 	.word	0x08009f3b

080098ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80098b4:	46c0      	nop			; (mov r8, r8)
 80098b6:	46bd      	mov	sp, r7
 80098b8:	b002      	add	sp, #8
 80098ba:	bd80      	pop	{r7, pc}

080098bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80098c4:	46c0      	nop			; (mov r8, r8)
 80098c6:	46bd      	mov	sp, r7
 80098c8:	b002      	add	sp, #8
 80098ca:	bd80      	pop	{r7, pc}

080098cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80098d4:	46c0      	nop			; (mov r8, r8)
 80098d6:	46bd      	mov	sp, r7
 80098d8:	b002      	add	sp, #8
 80098da:	bd80      	pop	{r7, pc}

080098dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80098e6:	2317      	movs	r3, #23
 80098e8:	18fb      	adds	r3, r7, r3
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2254      	movs	r2, #84	; 0x54
 80098f6:	5c9b      	ldrb	r3, [r3, r2]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d101      	bne.n	8009900 <HAL_ADC_ConfigChannel+0x24>
 80098fc:	2302      	movs	r3, #2
 80098fe:	e1c0      	b.n	8009c82 <HAL_ADC_ConfigChannel+0x3a6>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2254      	movs	r2, #84	; 0x54
 8009904:	2101      	movs	r1, #1
 8009906:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	0018      	movs	r0, r3
 800990e:	f7ff fd85 	bl	800941c <LL_ADC_REG_IsConversionOngoing>
 8009912:	1e03      	subs	r3, r0, #0
 8009914:	d000      	beq.n	8009918 <HAL_ADC_ConfigChannel+0x3c>
 8009916:	e1a3      	b.n	8009c60 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d100      	bne.n	8009922 <HAL_ADC_ConfigChannel+0x46>
 8009920:	e143      	b.n	8009baa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	691a      	ldr	r2, [r3, #16]
 8009926:	2380      	movs	r3, #128	; 0x80
 8009928:	061b      	lsls	r3, r3, #24
 800992a:	429a      	cmp	r2, r3
 800992c:	d004      	beq.n	8009938 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009932:	4ac1      	ldr	r2, [pc, #772]	; (8009c38 <HAL_ADC_ConfigChannel+0x35c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d108      	bne.n	800994a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	0019      	movs	r1, r3
 8009942:	0010      	movs	r0, r2
 8009944:	f7ff fcaa 	bl	800929c <LL_ADC_REG_SetSequencerChAdd>
 8009948:	e0c9      	b.n	8009ade <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	211f      	movs	r1, #31
 8009954:	400b      	ands	r3, r1
 8009956:	210f      	movs	r1, #15
 8009958:	4099      	lsls	r1, r3
 800995a:	000b      	movs	r3, r1
 800995c:	43db      	mvns	r3, r3
 800995e:	4013      	ands	r3, r2
 8009960:	0019      	movs	r1, r3
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	035b      	lsls	r3, r3, #13
 8009968:	0b5b      	lsrs	r3, r3, #13
 800996a:	d105      	bne.n	8009978 <HAL_ADC_ConfigChannel+0x9c>
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	0e9b      	lsrs	r3, r3, #26
 8009972:	221f      	movs	r2, #31
 8009974:	4013      	ands	r3, r2
 8009976:	e098      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2201      	movs	r2, #1
 800997e:	4013      	ands	r3, r2
 8009980:	d000      	beq.n	8009984 <HAL_ADC_ConfigChannel+0xa8>
 8009982:	e091      	b.n	8009aa8 <HAL_ADC_ConfigChannel+0x1cc>
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2202      	movs	r2, #2
 800998a:	4013      	ands	r3, r2
 800998c:	d000      	beq.n	8009990 <HAL_ADC_ConfigChannel+0xb4>
 800998e:	e089      	b.n	8009aa4 <HAL_ADC_ConfigChannel+0x1c8>
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2204      	movs	r2, #4
 8009996:	4013      	ands	r3, r2
 8009998:	d000      	beq.n	800999c <HAL_ADC_ConfigChannel+0xc0>
 800999a:	e081      	b.n	8009aa0 <HAL_ADC_ConfigChannel+0x1c4>
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2208      	movs	r2, #8
 80099a2:	4013      	ands	r3, r2
 80099a4:	d000      	beq.n	80099a8 <HAL_ADC_ConfigChannel+0xcc>
 80099a6:	e079      	b.n	8009a9c <HAL_ADC_ConfigChannel+0x1c0>
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2210      	movs	r2, #16
 80099ae:	4013      	ands	r3, r2
 80099b0:	d000      	beq.n	80099b4 <HAL_ADC_ConfigChannel+0xd8>
 80099b2:	e071      	b.n	8009a98 <HAL_ADC_ConfigChannel+0x1bc>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2220      	movs	r2, #32
 80099ba:	4013      	ands	r3, r2
 80099bc:	d000      	beq.n	80099c0 <HAL_ADC_ConfigChannel+0xe4>
 80099be:	e069      	b.n	8009a94 <HAL_ADC_ConfigChannel+0x1b8>
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2240      	movs	r2, #64	; 0x40
 80099c6:	4013      	ands	r3, r2
 80099c8:	d000      	beq.n	80099cc <HAL_ADC_ConfigChannel+0xf0>
 80099ca:	e061      	b.n	8009a90 <HAL_ADC_ConfigChannel+0x1b4>
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2280      	movs	r2, #128	; 0x80
 80099d2:	4013      	ands	r3, r2
 80099d4:	d000      	beq.n	80099d8 <HAL_ADC_ConfigChannel+0xfc>
 80099d6:	e059      	b.n	8009a8c <HAL_ADC_ConfigChannel+0x1b0>
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	2380      	movs	r3, #128	; 0x80
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	4013      	ands	r3, r2
 80099e2:	d151      	bne.n	8009a88 <HAL_ADC_ConfigChannel+0x1ac>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4013      	ands	r3, r2
 80099ee:	d149      	bne.n	8009a84 <HAL_ADC_ConfigChannel+0x1a8>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	2380      	movs	r3, #128	; 0x80
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	4013      	ands	r3, r2
 80099fa:	d141      	bne.n	8009a80 <HAL_ADC_ConfigChannel+0x1a4>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	2380      	movs	r3, #128	; 0x80
 8009a02:	011b      	lsls	r3, r3, #4
 8009a04:	4013      	ands	r3, r2
 8009a06:	d139      	bne.n	8009a7c <HAL_ADC_ConfigChannel+0x1a0>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	2380      	movs	r3, #128	; 0x80
 8009a0e:	015b      	lsls	r3, r3, #5
 8009a10:	4013      	ands	r3, r2
 8009a12:	d131      	bne.n	8009a78 <HAL_ADC_ConfigChannel+0x19c>
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	2380      	movs	r3, #128	; 0x80
 8009a1a:	019b      	lsls	r3, r3, #6
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	d129      	bne.n	8009a74 <HAL_ADC_ConfigChannel+0x198>
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	2380      	movs	r3, #128	; 0x80
 8009a26:	01db      	lsls	r3, r3, #7
 8009a28:	4013      	ands	r3, r2
 8009a2a:	d121      	bne.n	8009a70 <HAL_ADC_ConfigChannel+0x194>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	021b      	lsls	r3, r3, #8
 8009a34:	4013      	ands	r3, r2
 8009a36:	d119      	bne.n	8009a6c <HAL_ADC_ConfigChannel+0x190>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	2380      	movs	r3, #128	; 0x80
 8009a3e:	025b      	lsls	r3, r3, #9
 8009a40:	4013      	ands	r3, r2
 8009a42:	d111      	bne.n	8009a68 <HAL_ADC_ConfigChannel+0x18c>
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	2380      	movs	r3, #128	; 0x80
 8009a4a:	029b      	lsls	r3, r3, #10
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	d109      	bne.n	8009a64 <HAL_ADC_ConfigChannel+0x188>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	2380      	movs	r3, #128	; 0x80
 8009a56:	02db      	lsls	r3, r3, #11
 8009a58:	4013      	ands	r3, r2
 8009a5a:	d001      	beq.n	8009a60 <HAL_ADC_ConfigChannel+0x184>
 8009a5c:	2312      	movs	r3, #18
 8009a5e:	e024      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a60:	2300      	movs	r3, #0
 8009a62:	e022      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a64:	2311      	movs	r3, #17
 8009a66:	e020      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a68:	2310      	movs	r3, #16
 8009a6a:	e01e      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a6c:	230f      	movs	r3, #15
 8009a6e:	e01c      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a70:	230e      	movs	r3, #14
 8009a72:	e01a      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a74:	230d      	movs	r3, #13
 8009a76:	e018      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a78:	230c      	movs	r3, #12
 8009a7a:	e016      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a7c:	230b      	movs	r3, #11
 8009a7e:	e014      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a80:	230a      	movs	r3, #10
 8009a82:	e012      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a84:	2309      	movs	r3, #9
 8009a86:	e010      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a88:	2308      	movs	r3, #8
 8009a8a:	e00e      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a8c:	2307      	movs	r3, #7
 8009a8e:	e00c      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a90:	2306      	movs	r3, #6
 8009a92:	e00a      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a94:	2305      	movs	r3, #5
 8009a96:	e008      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	e006      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e004      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e002      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <HAL_ADC_ConfigChannel+0x1ce>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	6852      	ldr	r2, [r2, #4]
 8009aae:	201f      	movs	r0, #31
 8009ab0:	4002      	ands	r2, r0
 8009ab2:	4093      	lsls	r3, r2
 8009ab4:	000a      	movs	r2, r1
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	089b      	lsrs	r3, r3, #2
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d808      	bhi.n	8009ade <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6818      	ldr	r0, [r3, #0]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	6859      	ldr	r1, [r3, #4]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	001a      	movs	r2, r3
 8009ada:	f7ff fbbf 	bl	800925c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	001a      	movs	r2, r3
 8009aec:	f7ff fbfa 	bl	80092e4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	db00      	blt.n	8009afa <HAL_ADC_ConfigChannel+0x21e>
 8009af8:	e0bc      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009afa:	4b50      	ldr	r3, [pc, #320]	; (8009c3c <HAL_ADC_ConfigChannel+0x360>)
 8009afc:	0018      	movs	r0, r3
 8009afe:	f7ff fb5b 	bl	80091b8 <LL_ADC_GetCommonPathInternalCh>
 8009b02:	0003      	movs	r3, r0
 8009b04:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a4d      	ldr	r2, [pc, #308]	; (8009c40 <HAL_ADC_ConfigChannel+0x364>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d122      	bne.n	8009b56 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	2380      	movs	r3, #128	; 0x80
 8009b14:	041b      	lsls	r3, r3, #16
 8009b16:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009b18:	d11d      	bne.n	8009b56 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2280      	movs	r2, #128	; 0x80
 8009b1e:	0412      	lsls	r2, r2, #16
 8009b20:	4313      	orrs	r3, r2
 8009b22:	4a46      	ldr	r2, [pc, #280]	; (8009c3c <HAL_ADC_ConfigChannel+0x360>)
 8009b24:	0019      	movs	r1, r3
 8009b26:	0010      	movs	r0, r2
 8009b28:	f7ff fb32 	bl	8009190 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009b2c:	4b45      	ldr	r3, [pc, #276]	; (8009c44 <HAL_ADC_ConfigChannel+0x368>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4945      	ldr	r1, [pc, #276]	; (8009c48 <HAL_ADC_ConfigChannel+0x36c>)
 8009b32:	0018      	movs	r0, r3
 8009b34:	f7fc fb5c 	bl	80061f0 <__udivsi3>
 8009b38:	0003      	movs	r3, r0
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	0013      	movs	r3, r2
 8009b3e:	005b      	lsls	r3, r3, #1
 8009b40:	189b      	adds	r3, r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009b46:	e002      	b.n	8009b4e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1f9      	bne.n	8009b48 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009b54:	e08e      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a3c      	ldr	r2, [pc, #240]	; (8009c4c <HAL_ADC_ConfigChannel+0x370>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d10e      	bne.n	8009b7e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	2380      	movs	r3, #128	; 0x80
 8009b64:	045b      	lsls	r3, r3, #17
 8009b66:	4013      	ands	r3, r2
 8009b68:	d109      	bne.n	8009b7e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2280      	movs	r2, #128	; 0x80
 8009b6e:	0452      	lsls	r2, r2, #17
 8009b70:	4313      	orrs	r3, r2
 8009b72:	4a32      	ldr	r2, [pc, #200]	; (8009c3c <HAL_ADC_ConfigChannel+0x360>)
 8009b74:	0019      	movs	r1, r3
 8009b76:	0010      	movs	r0, r2
 8009b78:	f7ff fb0a 	bl	8009190 <LL_ADC_SetCommonPathInternalCh>
 8009b7c:	e07a      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a33      	ldr	r2, [pc, #204]	; (8009c50 <HAL_ADC_ConfigChannel+0x374>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d000      	beq.n	8009b8a <HAL_ADC_ConfigChannel+0x2ae>
 8009b88:	e074      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	2380      	movs	r3, #128	; 0x80
 8009b8e:	03db      	lsls	r3, r3, #15
 8009b90:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8009b92:	d000      	beq.n	8009b96 <HAL_ADC_ConfigChannel+0x2ba>
 8009b94:	e06e      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2280      	movs	r2, #128	; 0x80
 8009b9a:	03d2      	lsls	r2, r2, #15
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	4a27      	ldr	r2, [pc, #156]	; (8009c3c <HAL_ADC_ConfigChannel+0x360>)
 8009ba0:	0019      	movs	r1, r3
 8009ba2:	0010      	movs	r0, r2
 8009ba4:	f7ff faf4 	bl	8009190 <LL_ADC_SetCommonPathInternalCh>
 8009ba8:	e064      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	691a      	ldr	r2, [r3, #16]
 8009bae:	2380      	movs	r3, #128	; 0x80
 8009bb0:	061b      	lsls	r3, r3, #24
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d004      	beq.n	8009bc0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009bba:	4a1f      	ldr	r2, [pc, #124]	; (8009c38 <HAL_ADC_ConfigChannel+0x35c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d107      	bne.n	8009bd0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	0019      	movs	r1, r3
 8009bca:	0010      	movs	r0, r2
 8009bcc:	f7ff fb77 	bl	80092be <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da4d      	bge.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009bd8:	4b18      	ldr	r3, [pc, #96]	; (8009c3c <HAL_ADC_ConfigChannel+0x360>)
 8009bda:	0018      	movs	r0, r3
 8009bdc:	f7ff faec 	bl	80091b8 <LL_ADC_GetCommonPathInternalCh>
 8009be0:	0003      	movs	r3, r0
 8009be2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a15      	ldr	r2, [pc, #84]	; (8009c40 <HAL_ADC_ConfigChannel+0x364>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d108      	bne.n	8009c00 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	4a18      	ldr	r2, [pc, #96]	; (8009c54 <HAL_ADC_ConfigChannel+0x378>)
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	4a11      	ldr	r2, [pc, #68]	; (8009c3c <HAL_ADC_ConfigChannel+0x360>)
 8009bf6:	0019      	movs	r1, r3
 8009bf8:	0010      	movs	r0, r2
 8009bfa:	f7ff fac9 	bl	8009190 <LL_ADC_SetCommonPathInternalCh>
 8009bfe:	e039      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a11      	ldr	r2, [pc, #68]	; (8009c4c <HAL_ADC_ConfigChannel+0x370>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d108      	bne.n	8009c1c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	4a12      	ldr	r2, [pc, #72]	; (8009c58 <HAL_ADC_ConfigChannel+0x37c>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <HAL_ADC_ConfigChannel+0x360>)
 8009c12:	0019      	movs	r1, r3
 8009c14:	0010      	movs	r0, r2
 8009c16:	f7ff fabb 	bl	8009190 <LL_ADC_SetCommonPathInternalCh>
 8009c1a:	e02b      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a0b      	ldr	r2, [pc, #44]	; (8009c50 <HAL_ADC_ConfigChannel+0x374>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d126      	bne.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	4a0c      	ldr	r2, [pc, #48]	; (8009c5c <HAL_ADC_ConfigChannel+0x380>)
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	4a03      	ldr	r2, [pc, #12]	; (8009c3c <HAL_ADC_ConfigChannel+0x360>)
 8009c2e:	0019      	movs	r1, r3
 8009c30:	0010      	movs	r0, r2
 8009c32:	f7ff faad 	bl	8009190 <LL_ADC_SetCommonPathInternalCh>
 8009c36:	e01d      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x398>
 8009c38:	80000004 	.word	0x80000004
 8009c3c:	40012708 	.word	0x40012708
 8009c40:	b0001000 	.word	0xb0001000
 8009c44:	20000048 	.word	0x20000048
 8009c48:	00030d40 	.word	0x00030d40
 8009c4c:	b8004000 	.word	0xb8004000
 8009c50:	b4002000 	.word	0xb4002000
 8009c54:	ff7fffff 	.word	0xff7fffff
 8009c58:	feffffff 	.word	0xfeffffff
 8009c5c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c64:	2220      	movs	r2, #32
 8009c66:	431a      	orrs	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009c6c:	2317      	movs	r3, #23
 8009c6e:	18fb      	adds	r3, r7, r3
 8009c70:	2201      	movs	r2, #1
 8009c72:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2254      	movs	r2, #84	; 0x54
 8009c78:	2100      	movs	r1, #0
 8009c7a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8009c7c:	2317      	movs	r3, #23
 8009c7e:	18fb      	adds	r3, r7, r3
 8009c80:	781b      	ldrb	r3, [r3, #0]
}
 8009c82:	0018      	movs	r0, r3
 8009c84:	46bd      	mov	sp, r7
 8009c86:	b006      	add	sp, #24
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	46c0      	nop			; (mov r8, r8)

08009c8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f7ff fb89 	bl	80093b4 <LL_ADC_IsEnabled>
 8009ca2:	1e03      	subs	r3, r0, #0
 8009ca4:	d000      	beq.n	8009ca8 <ADC_Enable+0x1c>
 8009ca6:	e069      	b.n	8009d7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	4a36      	ldr	r2, [pc, #216]	; (8009d88 <ADC_Enable+0xfc>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	d00d      	beq.n	8009cd0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb8:	2210      	movs	r2, #16
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e056      	b.n	8009d7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	0018      	movs	r0, r3
 8009cd6:	f7ff fb49 	bl	800936c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8009cda:	4b2c      	ldr	r3, [pc, #176]	; (8009d8c <ADC_Enable+0x100>)
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f7ff fa6b 	bl	80091b8 <LL_ADC_GetCommonPathInternalCh>
 8009ce2:	0002      	movs	r2, r0
 8009ce4:	2380      	movs	r3, #128	; 0x80
 8009ce6:	041b      	lsls	r3, r3, #16
 8009ce8:	4013      	ands	r3, r2
 8009cea:	d00f      	beq.n	8009d0c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009cec:	4b28      	ldr	r3, [pc, #160]	; (8009d90 <ADC_Enable+0x104>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4928      	ldr	r1, [pc, #160]	; (8009d94 <ADC_Enable+0x108>)
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f7fc fa7c 	bl	80061f0 <__udivsi3>
 8009cf8:	0003      	movs	r3, r0
 8009cfa:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8009cfc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009cfe:	e002      	b.n	8009d06 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1f9      	bne.n	8009d00 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7e5b      	ldrb	r3, [r3, #25]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d033      	beq.n	8009d7c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8009d14:	f7ff f9f8 	bl	8009108 <HAL_GetTick>
 8009d18:	0003      	movs	r3, r0
 8009d1a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009d1c:	e027      	b.n	8009d6e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	0018      	movs	r0, r3
 8009d24:	f7ff fb46 	bl	80093b4 <LL_ADC_IsEnabled>
 8009d28:	1e03      	subs	r3, r0, #0
 8009d2a:	d104      	bne.n	8009d36 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	0018      	movs	r0, r3
 8009d32:	f7ff fb1b 	bl	800936c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009d36:	f7ff f9e7 	bl	8009108 <HAL_GetTick>
 8009d3a:	0002      	movs	r2, r0
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d914      	bls.n	8009d6e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d00d      	beq.n	8009d6e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d56:	2210      	movs	r2, #16
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d62:	2201      	movs	r2, #1
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e007      	b.n	8009d7e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2201      	movs	r2, #1
 8009d76:	4013      	ands	r3, r2
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d1d0      	bne.n	8009d1e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	0018      	movs	r0, r3
 8009d80:	46bd      	mov	sp, r7
 8009d82:	b004      	add	sp, #16
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	46c0      	nop			; (mov r8, r8)
 8009d88:	80000017 	.word	0x80000017
 8009d8c:	40012708 	.word	0x40012708
 8009d90:	20000048 	.word	0x20000048
 8009d94:	00030d40 	.word	0x00030d40

08009d98 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	0018      	movs	r0, r3
 8009da6:	f7ff fb16 	bl	80093d6 <LL_ADC_IsDisableOngoing>
 8009daa:	0003      	movs	r3, r0
 8009dac:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	0018      	movs	r0, r3
 8009db4:	f7ff fafe 	bl	80093b4 <LL_ADC_IsEnabled>
 8009db8:	1e03      	subs	r3, r0, #0
 8009dba:	d046      	beq.n	8009e4a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d143      	bne.n	8009e4a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	2205      	movs	r2, #5
 8009dca:	4013      	ands	r3, r2
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d10d      	bne.n	8009dec <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	f7ff fadb 	bl	8009390 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2203      	movs	r2, #3
 8009de0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009de2:	f7ff f991 	bl	8009108 <HAL_GetTick>
 8009de6:	0003      	movs	r3, r0
 8009de8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009dea:	e028      	b.n	8009e3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df0:	2210      	movs	r2, #16
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e021      	b.n	8009e4c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009e08:	f7ff f97e 	bl	8009108 <HAL_GetTick>
 8009e0c:	0002      	movs	r2, r0
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d913      	bls.n	8009e3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	4013      	ands	r3, r2
 8009e20:	d00d      	beq.n	8009e3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e26:	2210      	movs	r2, #16
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e32:	2201      	movs	r2, #1
 8009e34:	431a      	orrs	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e006      	b.n	8009e4c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2201      	movs	r2, #1
 8009e46:	4013      	ands	r3, r2
 8009e48:	d1de      	bne.n	8009e08 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	0018      	movs	r0, r3
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	b004      	add	sp, #16
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e66:	2250      	movs	r2, #80	; 0x50
 8009e68:	4013      	ands	r3, r2
 8009e6a:	d141      	bne.n	8009ef0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e70:	2280      	movs	r2, #128	; 0x80
 8009e72:	0092      	lsls	r2, r2, #2
 8009e74:	431a      	orrs	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f7ff f9db 	bl	800923a <LL_ADC_REG_IsTriggerSourceSWStart>
 8009e84:	1e03      	subs	r3, r0, #0
 8009e86:	d02e      	beq.n	8009ee6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	7e9b      	ldrb	r3, [r3, #26]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d12a      	bne.n	8009ee6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2208      	movs	r2, #8
 8009e98:	4013      	ands	r3, r2
 8009e9a:	2b08      	cmp	r3, #8
 8009e9c:	d123      	bne.n	8009ee6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	f7ff faba 	bl	800941c <LL_ADC_REG_IsConversionOngoing>
 8009ea8:	1e03      	subs	r3, r0, #0
 8009eaa:	d110      	bne.n	8009ece <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	210c      	movs	r1, #12
 8009eb8:	438a      	bics	r2, r1
 8009eba:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ec0:	4a15      	ldr	r2, [pc, #84]	; (8009f18 <ADC_DMAConvCplt+0xc4>)
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	659a      	str	r2, [r3, #88]	; 0x58
 8009ecc:	e00b      	b.n	8009ee6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ede:	2201      	movs	r2, #1
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	0018      	movs	r0, r3
 8009eea:	f7ff fcdf 	bl	80098ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009eee:	e00f      	b.n	8009f10 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef4:	2210      	movs	r2, #16
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	0018      	movs	r0, r3
 8009efe:	f7ff fce5 	bl	80098cc <HAL_ADC_ErrorCallback>
}
 8009f02:	e005      	b.n	8009f10 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	0010      	movs	r0, r2
 8009f0e:	4798      	blx	r3
}
 8009f10:	46c0      	nop			; (mov r8, r8)
 8009f12:	46bd      	mov	sp, r7
 8009f14:	b004      	add	sp, #16
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	fffffefe 	.word	0xfffffefe

08009f1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f28:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7ff fcc5 	bl	80098bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009f32:	46c0      	nop			; (mov r8, r8)
 8009f34:	46bd      	mov	sp, r7
 8009f36:	b004      	add	sp, #16
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f46:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f4c:	2240      	movs	r2, #64	; 0x40
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f58:	2204      	movs	r2, #4
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	0018      	movs	r0, r3
 8009f64:	f7ff fcb2 	bl	80098cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009f68:	46c0      	nop			; (mov r8, r8)
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	b004      	add	sp, #16
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <LL_ADC_GetCommonClock>:
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	23f0      	movs	r3, #240	; 0xf0
 8009f7e:	039b      	lsls	r3, r3, #14
 8009f80:	4013      	ands	r3, r2
}
 8009f82:	0018      	movs	r0, r3
 8009f84:	46bd      	mov	sp, r7
 8009f86:	b002      	add	sp, #8
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <LL_ADC_GetClock>:
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	0f9b      	lsrs	r3, r3, #30
 8009f98:	079b      	lsls	r3, r3, #30
}
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	b002      	add	sp, #8
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <LL_ADC_SetCalibrationFactor>:
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	22b4      	movs	r2, #180	; 0xb4
 8009fb0:	589b      	ldr	r3, [r3, r2]
 8009fb2:	227f      	movs	r2, #127	; 0x7f
 8009fb4:	4393      	bics	r3, r2
 8009fb6:	001a      	movs	r2, r3
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	21b4      	movs	r1, #180	; 0xb4
 8009fc0:	505a      	str	r2, [r3, r1]
}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	b002      	add	sp, #8
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <LL_ADC_GetCalibrationFactor>:
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	22b4      	movs	r2, #180	; 0xb4
 8009fd6:	589b      	ldr	r3, [r3, r2]
 8009fd8:	227f      	movs	r2, #127	; 0x7f
 8009fda:	4013      	ands	r3, r2
}
 8009fdc:	0018      	movs	r0, r3
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	b002      	add	sp, #8
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <LL_ADC_Enable>:
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	4a04      	ldr	r2, [pc, #16]	; (800a004 <LL_ADC_Enable+0x20>)
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	609a      	str	r2, [r3, #8]
}
 8009ffc:	46c0      	nop			; (mov r8, r8)
 8009ffe:	46bd      	mov	sp, r7
 800a000:	b002      	add	sp, #8
 800a002:	bd80      	pop	{r7, pc}
 800a004:	7fffffe8 	.word	0x7fffffe8

0800a008 <LL_ADC_Disable>:
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	4a04      	ldr	r2, [pc, #16]	; (800a028 <LL_ADC_Disable+0x20>)
 800a016:	4013      	ands	r3, r2
 800a018:	2202      	movs	r2, #2
 800a01a:	431a      	orrs	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	609a      	str	r2, [r3, #8]
}
 800a020:	46c0      	nop			; (mov r8, r8)
 800a022:	46bd      	mov	sp, r7
 800a024:	b002      	add	sp, #8
 800a026:	bd80      	pop	{r7, pc}
 800a028:	7fffffe8 	.word	0x7fffffe8

0800a02c <LL_ADC_IsEnabled>:
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	2201      	movs	r2, #1
 800a03a:	4013      	ands	r3, r2
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d101      	bne.n	800a044 <LL_ADC_IsEnabled+0x18>
 800a040:	2301      	movs	r3, #1
 800a042:	e000      	b.n	800a046 <LL_ADC_IsEnabled+0x1a>
 800a044:	2300      	movs	r3, #0
}
 800a046:	0018      	movs	r0, r3
 800a048:	46bd      	mov	sp, r7
 800a04a:	b002      	add	sp, #8
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <LL_ADC_StartCalibration>:
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	4a05      	ldr	r2, [pc, #20]	; (800a074 <LL_ADC_StartCalibration+0x24>)
 800a05e:	4013      	ands	r3, r2
 800a060:	2280      	movs	r2, #128	; 0x80
 800a062:	0612      	lsls	r2, r2, #24
 800a064:	431a      	orrs	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	609a      	str	r2, [r3, #8]
}
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	46bd      	mov	sp, r7
 800a06e:	b002      	add	sp, #8
 800a070:	bd80      	pop	{r7, pc}
 800a072:	46c0      	nop			; (mov r8, r8)
 800a074:	7fffffe8 	.word	0x7fffffe8

0800a078 <LL_ADC_IsCalibrationOnGoing>:
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	0fdb      	lsrs	r3, r3, #31
 800a086:	07da      	lsls	r2, r3, #31
 800a088:	2380      	movs	r3, #128	; 0x80
 800a08a:	061b      	lsls	r3, r3, #24
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d101      	bne.n	800a094 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800a090:	2301      	movs	r3, #1
 800a092:	e000      	b.n	800a096 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800a094:	2300      	movs	r3, #0
}
 800a096:	0018      	movs	r0, r3
 800a098:	46bd      	mov	sp, r7
 800a09a:	b002      	add	sp, #8
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800a0a0:	b590      	push	{r4, r7, lr}
 800a0a2:	b08b      	sub	sp, #44	; 0x2c
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2254      	movs	r2, #84	; 0x54
 800a0b4:	5c9b      	ldrb	r3, [r3, r2]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d101      	bne.n	800a0be <HAL_ADCEx_Calibration_Start+0x1e>
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	e0dd      	b.n	800a27a <HAL_ADCEx_Calibration_Start+0x1da>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2254      	movs	r2, #84	; 0x54
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a0c6:	231f      	movs	r3, #31
 800a0c8:	18fc      	adds	r4, r7, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f7ff fe63 	bl	8009d98 <ADC_Disable>
 800a0d2:	0003      	movs	r3, r0
 800a0d4:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	0018      	movs	r0, r3
 800a0dc:	f7ff ffa6 	bl	800a02c <LL_ADC_IsEnabled>
 800a0e0:	1e03      	subs	r3, r0, #0
 800a0e2:	d000      	beq.n	800a0e6 <HAL_ADCEx_Calibration_Start+0x46>
 800a0e4:	e0bc      	b.n	800a260 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ea:	4a66      	ldr	r2, [pc, #408]	; (800a284 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	4a62      	ldr	r2, [pc, #392]	; (800a288 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800a0fe:	4013      	ands	r3, r2
 800a100:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	495f      	ldr	r1, [pc, #380]	; (800a28c <HAL_ADCEx_Calibration_Start+0x1ec>)
 800a10e:	400a      	ands	r2, r1
 800a110:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800a112:	2300      	movs	r3, #0
 800a114:	627b      	str	r3, [r7, #36]	; 0x24
 800a116:	e02d      	b.n	800a174 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	0018      	movs	r0, r3
 800a11e:	f7ff ff97 	bl	800a050 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a122:	e014      	b.n	800a14e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3301      	adds	r3, #1
 800a128:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	4a58      	ldr	r2, [pc, #352]	; (800a290 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d90d      	bls.n	800a14e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a136:	2212      	movs	r2, #18
 800a138:	4393      	bics	r3, r2
 800a13a:	2210      	movs	r2, #16
 800a13c:	431a      	orrs	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2254      	movs	r2, #84	; 0x54
 800a146:	2100      	movs	r1, #0
 800a148:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e095      	b.n	800a27a <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	0018      	movs	r0, r3
 800a154:	f7ff ff90 	bl	800a078 <LL_ADC_IsCalibrationOnGoing>
 800a158:	1e03      	subs	r3, r0, #0
 800a15a:	d1e3      	bne.n	800a124 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	0018      	movs	r0, r3
 800a162:	f7ff ff32 	bl	8009fca <LL_ADC_GetCalibrationFactor>
 800a166:	0002      	movs	r2, r0
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	189b      	adds	r3, r3, r2
 800a16c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	3301      	adds	r3, #1
 800a172:	627b      	str	r3, [r7, #36]	; 0x24
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	2b07      	cmp	r3, #7
 800a178:	d9ce      	bls.n	800a118 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800a17a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a17c:	6a38      	ldr	r0, [r7, #32]
 800a17e:	f7fc f837 	bl	80061f0 <__udivsi3>
 800a182:	0003      	movs	r3, r0
 800a184:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	0018      	movs	r0, r3
 800a18c:	f7ff ff2a 	bl	8009fe4 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	0018      	movs	r0, r3
 800a196:	f7ff fef8 	bl	8009f8a <LL_ADC_GetClock>
 800a19a:	1e03      	subs	r3, r0, #0
 800a19c:	d11b      	bne.n	800a1d6 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a19e:	4b3d      	ldr	r3, [pc, #244]	; (800a294 <HAL_ADCEx_Calibration_Start+0x1f4>)
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f7ff fee5 	bl	8009f70 <LL_ADC_GetCommonClock>
 800a1a6:	0003      	movs	r3, r0
 800a1a8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	23e0      	movs	r3, #224	; 0xe0
 800a1ae:	035b      	lsls	r3, r3, #13
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d310      	bcc.n	800a1d6 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	0c9b      	lsrs	r3, r3, #18
 800a1b8:	3b03      	subs	r3, #3
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	409a      	lsls	r2, r3
 800a1be:	0013      	movs	r3, r2
 800a1c0:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	085b      	lsrs	r3, r3, #1
 800a1c6:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800a1c8:	e002      	b.n	800a1d0 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1f9      	bne.n	800a1ca <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6a3a      	ldr	r2, [r7, #32]
 800a1dc:	0011      	movs	r1, r2
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f7ff fedf 	bl	8009fa2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f7ff ff0d 	bl	800a008 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a1ee:	f7fe ff8b 	bl	8009108 <HAL_GetTick>
 800a1f2:	0003      	movs	r3, r0
 800a1f4:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a1f6:	e01b      	b.n	800a230 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a1f8:	f7fe ff86 	bl	8009108 <HAL_GetTick>
 800a1fc:	0002      	movs	r2, r0
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d914      	bls.n	800a230 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	0018      	movs	r0, r3
 800a20c:	f7ff ff0e 	bl	800a02c <LL_ADC_IsEnabled>
 800a210:	1e03      	subs	r3, r0, #0
 800a212:	d00d      	beq.n	800a230 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a218:	2210      	movs	r2, #16
 800a21a:	431a      	orrs	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a224:	2201      	movs	r2, #1
 800a226:	431a      	orrs	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e024      	b.n	800a27a <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	0018      	movs	r0, r3
 800a236:	f7ff fef9 	bl	800a02c <LL_ADC_IsEnabled>
 800a23a:	1e03      	subs	r3, r0, #0
 800a23c:	d1dc      	bne.n	800a1f8 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68d9      	ldr	r1, [r3, #12]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a252:	2203      	movs	r2, #3
 800a254:	4393      	bics	r3, r2
 800a256:	2201      	movs	r2, #1
 800a258:	431a      	orrs	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	659a      	str	r2, [r3, #88]	; 0x58
 800a25e:	e005      	b.n	800a26c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a264:	2210      	movs	r2, #16
 800a266:	431a      	orrs	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2254      	movs	r2, #84	; 0x54
 800a270:	2100      	movs	r1, #0
 800a272:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800a274:	231f      	movs	r3, #31
 800a276:	18fb      	adds	r3, r7, r3
 800a278:	781b      	ldrb	r3, [r3, #0]
}
 800a27a:	0018      	movs	r0, r3
 800a27c:	46bd      	mov	sp, r7
 800a27e:	b00b      	add	sp, #44	; 0x2c
 800a280:	bd90      	pop	{r4, r7, pc}
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	fffffefd 	.word	0xfffffefd
 800a288:	00008003 	.word	0x00008003
 800a28c:	ffff7ffc 	.word	0xffff7ffc
 800a290:	0002f1ff 	.word	0x0002f1ff
 800a294:	40012708 	.word	0x40012708

0800a298 <__NVIC_EnableIRQ>:
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	0002      	movs	r2, r0
 800a2a0:	1dfb      	adds	r3, r7, #7
 800a2a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a2a4:	1dfb      	adds	r3, r7, #7
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b7f      	cmp	r3, #127	; 0x7f
 800a2aa:	d809      	bhi.n	800a2c0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a2ac:	1dfb      	adds	r3, r7, #7
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	001a      	movs	r2, r3
 800a2b2:	231f      	movs	r3, #31
 800a2b4:	401a      	ands	r2, r3
 800a2b6:	4b04      	ldr	r3, [pc, #16]	; (800a2c8 <__NVIC_EnableIRQ+0x30>)
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	4091      	lsls	r1, r2
 800a2bc:	000a      	movs	r2, r1
 800a2be:	601a      	str	r2, [r3, #0]
}
 800a2c0:	46c0      	nop			; (mov r8, r8)
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	b002      	add	sp, #8
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	e000e100 	.word	0xe000e100

0800a2cc <__NVIC_SetPriority>:
{
 800a2cc:	b590      	push	{r4, r7, lr}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	0002      	movs	r2, r0
 800a2d4:	6039      	str	r1, [r7, #0]
 800a2d6:	1dfb      	adds	r3, r7, #7
 800a2d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a2da:	1dfb      	adds	r3, r7, #7
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b7f      	cmp	r3, #127	; 0x7f
 800a2e0:	d828      	bhi.n	800a334 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a2e2:	4a2f      	ldr	r2, [pc, #188]	; (800a3a0 <__NVIC_SetPriority+0xd4>)
 800a2e4:	1dfb      	adds	r3, r7, #7
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	b25b      	sxtb	r3, r3
 800a2ea:	089b      	lsrs	r3, r3, #2
 800a2ec:	33c0      	adds	r3, #192	; 0xc0
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	589b      	ldr	r3, [r3, r2]
 800a2f2:	1dfa      	adds	r2, r7, #7
 800a2f4:	7812      	ldrb	r2, [r2, #0]
 800a2f6:	0011      	movs	r1, r2
 800a2f8:	2203      	movs	r2, #3
 800a2fa:	400a      	ands	r2, r1
 800a2fc:	00d2      	lsls	r2, r2, #3
 800a2fe:	21ff      	movs	r1, #255	; 0xff
 800a300:	4091      	lsls	r1, r2
 800a302:	000a      	movs	r2, r1
 800a304:	43d2      	mvns	r2, r2
 800a306:	401a      	ands	r2, r3
 800a308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	019b      	lsls	r3, r3, #6
 800a30e:	22ff      	movs	r2, #255	; 0xff
 800a310:	401a      	ands	r2, r3
 800a312:	1dfb      	adds	r3, r7, #7
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	0018      	movs	r0, r3
 800a318:	2303      	movs	r3, #3
 800a31a:	4003      	ands	r3, r0
 800a31c:	00db      	lsls	r3, r3, #3
 800a31e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a320:	481f      	ldr	r0, [pc, #124]	; (800a3a0 <__NVIC_SetPriority+0xd4>)
 800a322:	1dfb      	adds	r3, r7, #7
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	b25b      	sxtb	r3, r3
 800a328:	089b      	lsrs	r3, r3, #2
 800a32a:	430a      	orrs	r2, r1
 800a32c:	33c0      	adds	r3, #192	; 0xc0
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	501a      	str	r2, [r3, r0]
}
 800a332:	e031      	b.n	800a398 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a334:	4a1b      	ldr	r2, [pc, #108]	; (800a3a4 <__NVIC_SetPriority+0xd8>)
 800a336:	1dfb      	adds	r3, r7, #7
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	0019      	movs	r1, r3
 800a33c:	230f      	movs	r3, #15
 800a33e:	400b      	ands	r3, r1
 800a340:	3b08      	subs	r3, #8
 800a342:	089b      	lsrs	r3, r3, #2
 800a344:	3306      	adds	r3, #6
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	18d3      	adds	r3, r2, r3
 800a34a:	3304      	adds	r3, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	1dfa      	adds	r2, r7, #7
 800a350:	7812      	ldrb	r2, [r2, #0]
 800a352:	0011      	movs	r1, r2
 800a354:	2203      	movs	r2, #3
 800a356:	400a      	ands	r2, r1
 800a358:	00d2      	lsls	r2, r2, #3
 800a35a:	21ff      	movs	r1, #255	; 0xff
 800a35c:	4091      	lsls	r1, r2
 800a35e:	000a      	movs	r2, r1
 800a360:	43d2      	mvns	r2, r2
 800a362:	401a      	ands	r2, r3
 800a364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	019b      	lsls	r3, r3, #6
 800a36a:	22ff      	movs	r2, #255	; 0xff
 800a36c:	401a      	ands	r2, r3
 800a36e:	1dfb      	adds	r3, r7, #7
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	0018      	movs	r0, r3
 800a374:	2303      	movs	r3, #3
 800a376:	4003      	ands	r3, r0
 800a378:	00db      	lsls	r3, r3, #3
 800a37a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a37c:	4809      	ldr	r0, [pc, #36]	; (800a3a4 <__NVIC_SetPriority+0xd8>)
 800a37e:	1dfb      	adds	r3, r7, #7
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	001c      	movs	r4, r3
 800a384:	230f      	movs	r3, #15
 800a386:	4023      	ands	r3, r4
 800a388:	3b08      	subs	r3, #8
 800a38a:	089b      	lsrs	r3, r3, #2
 800a38c:	430a      	orrs	r2, r1
 800a38e:	3306      	adds	r3, #6
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	18c3      	adds	r3, r0, r3
 800a394:	3304      	adds	r3, #4
 800a396:	601a      	str	r2, [r3, #0]
}
 800a398:	46c0      	nop			; (mov r8, r8)
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b003      	add	sp, #12
 800a39e:	bd90      	pop	{r4, r7, pc}
 800a3a0:	e000e100 	.word	0xe000e100
 800a3a4:	e000ed00 	.word	0xe000ed00

0800a3a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a3ac:	f3bf 8f4f 	dsb	sy
}
 800a3b0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a3b2:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <__NVIC_SystemReset+0x1c>)
 800a3b4:	4a04      	ldr	r2, [pc, #16]	; (800a3c8 <__NVIC_SystemReset+0x20>)
 800a3b6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a3b8:	f3bf 8f4f 	dsb	sy
}
 800a3bc:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a3be:	46c0      	nop			; (mov r8, r8)
 800a3c0:	e7fd      	b.n	800a3be <__NVIC_SystemReset+0x16>
 800a3c2:	46c0      	nop			; (mov r8, r8)
 800a3c4:	e000ed00 	.word	0xe000ed00
 800a3c8:	05fa0004 	.word	0x05fa0004

0800a3cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60b9      	str	r1, [r7, #8]
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	210f      	movs	r1, #15
 800a3d8:	187b      	adds	r3, r7, r1
 800a3da:	1c02      	adds	r2, r0, #0
 800a3dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	187b      	adds	r3, r7, r1
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	b25b      	sxtb	r3, r3
 800a3e6:	0011      	movs	r1, r2
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f7ff ff6f 	bl	800a2cc <__NVIC_SetPriority>
}
 800a3ee:	46c0      	nop			; (mov r8, r8)
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	b004      	add	sp, #16
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	0002      	movs	r2, r0
 800a3fe:	1dfb      	adds	r3, r7, #7
 800a400:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a402:	1dfb      	adds	r3, r7, #7
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	b25b      	sxtb	r3, r3
 800a408:	0018      	movs	r0, r3
 800a40a:	f7ff ff45 	bl	800a298 <__NVIC_EnableIRQ>
}
 800a40e:	46c0      	nop			; (mov r8, r8)
 800a410:	46bd      	mov	sp, r7
 800a412:	b002      	add	sp, #8
 800a414:	bd80      	pop	{r7, pc}

0800a416 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a41a:	f7ff ffc5 	bl	800a3a8 <__NVIC_SystemReset>

0800a41e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e015      	b.n	800a45c <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	791b      	ldrb	r3, [r3, #4]
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	0018      	movs	r0, r3
 800a444:	f7fe fb76 	bl	8008b34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	0018      	movs	r0, r3
 800a45e:	46bd      	mov	sp, r7
 800a460:	b002      	add	sp, #8
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e047      	b.n	800a508 <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	795b      	ldrb	r3, [r3, #5]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d101      	bne.n	800a484 <HAL_DAC_Start+0x20>
 800a480:	2302      	movs	r3, #2
 800a482:	e041      	b.n	800a508 <HAL_DAC_Start+0xa4>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2202      	movs	r2, #2
 800a48e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6819      	ldr	r1, [r3, #0]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2210      	movs	r2, #16
 800a49a:	4013      	ands	r3, r2
 800a49c:	2201      	movs	r2, #1
 800a49e:	409a      	lsls	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10f      	bne.n	800a4ce <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	223e      	movs	r2, #62	; 0x3e
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d11e      	bne.n	800a4fa <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	605a      	str	r2, [r3, #4]
 800a4cc:	e015      	b.n	800a4fa <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	23f8      	movs	r3, #248	; 0xf8
 800a4d6:	039b      	lsls	r3, r3, #14
 800a4d8:	401a      	ands	r2, r3
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2110      	movs	r1, #16
 800a4de:	400b      	ands	r3, r1
 800a4e0:	2102      	movs	r1, #2
 800a4e2:	4099      	lsls	r1, r3
 800a4e4:	000b      	movs	r3, r1
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d107      	bne.n	800a4fa <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2102      	movs	r1, #2
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	0018      	movs	r0, r3
 800a50a:	46bd      	mov	sp, r7
 800a50c:	b002      	add	sp, #8
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a526:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	2380      	movs	r3, #128	; 0x80
 800a52c:	019b      	lsls	r3, r3, #6
 800a52e:	4013      	ands	r3, r2
 800a530:	d01e      	beq.n	800a570 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	2380      	movs	r3, #128	; 0x80
 800a536:	019b      	lsls	r3, r3, #6
 800a538:	4013      	ands	r3, r2
 800a53a:	d019      	beq.n	800a570 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2204      	movs	r2, #4
 800a540:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	2201      	movs	r2, #1
 800a548:	431a      	orrs	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2280      	movs	r2, #128	; 0x80
 800a554:	0192      	lsls	r2, r2, #6
 800a556:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4917      	ldr	r1, [pc, #92]	; (800a5c0 <HAL_DAC_IRQHandler+0xb0>)
 800a564:	400a      	ands	r2, r1
 800a566:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	0018      	movs	r0, r3
 800a56c:	f000 f853 	bl	800a616 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	2380      	movs	r3, #128	; 0x80
 800a574:	059b      	lsls	r3, r3, #22
 800a576:	4013      	ands	r3, r2
 800a578:	d01e      	beq.n	800a5b8 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	2380      	movs	r3, #128	; 0x80
 800a57e:	059b      	lsls	r3, r3, #22
 800a580:	4013      	ands	r3, r2
 800a582:	d019      	beq.n	800a5b8 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2204      	movs	r2, #4
 800a588:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	2202      	movs	r2, #2
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2280      	movs	r2, #128	; 0x80
 800a59c:	0592      	lsls	r2, r2, #22
 800a59e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4906      	ldr	r1, [pc, #24]	; (800a5c4 <HAL_DAC_IRQHandler+0xb4>)
 800a5ac:	400a      	ands	r2, r1
 800a5ae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	f000 f968 	bl	800a888 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800a5b8:	46c0      	nop			; (mov r8, r8)
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	b004      	add	sp, #16
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	ffffefff 	.word	0xffffefff
 800a5c4:	efffffff 	.word	0xefffffff

0800a5c8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e014      	b.n	800a60e <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d105      	bne.n	800a5fc <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	18d3      	adds	r3, r2, r3
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	617b      	str	r3, [r7, #20]
 800a5fa:	e004      	b.n	800a606 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	18d3      	adds	r3, r2, r3
 800a602:	3314      	adds	r3, #20
 800a604:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	0018      	movs	r0, r3
 800a610:	46bd      	mov	sp, r7
 800a612:	b006      	add	sp, #24
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800a61e:	46c0      	nop			; (mov r8, r8)
 800a620:	46bd      	mov	sp, r7
 800a622:	b002      	add	sp, #8
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b088      	sub	sp, #32
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a634:	231f      	movs	r3, #31
 800a636:	18fb      	adds	r3, r7, r3
 800a638:	2200      	movs	r2, #0
 800a63a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d002      	beq.n	800a648 <HAL_DAC_ConfigChannel+0x20>
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e115      	b.n	800a878 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	795b      	ldrb	r3, [r3, #5]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d101      	bne.n	800a658 <HAL_DAC_ConfigChannel+0x30>
 800a654:	2302      	movs	r3, #2
 800a656:	e10f      	b.n	800a878 <HAL_DAC_ConfigChannel+0x250>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2201      	movs	r2, #1
 800a65c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2202      	movs	r2, #2
 800a662:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d000      	beq.n	800a66e <HAL_DAC_ConfigChannel+0x46>
 800a66c:	e07a      	b.n	800a764 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800a66e:	f7fe fd4b 	bl	8009108 <HAL_GetTick>
 800a672:	0003      	movs	r3, r0
 800a674:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d13d      	bne.n	800a6f8 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a67c:	e018      	b.n	800a6b0 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a67e:	f7fe fd43 	bl	8009108 <HAL_GetTick>
 800a682:	0002      	movs	r2, r0
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d911      	bls.n	800a6b0 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a692:	2380      	movs	r3, #128	; 0x80
 800a694:	021b      	lsls	r3, r3, #8
 800a696:	4013      	ands	r3, r2
 800a698:	d00a      	beq.n	800a6b0 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2208      	movs	r2, #8
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2203      	movs	r2, #3
 800a6aa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e0e3      	b.n	800a878 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6b6:	2380      	movs	r3, #128	; 0x80
 800a6b8:	021b      	lsls	r3, r3, #8
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	d1df      	bne.n	800a67e <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	6992      	ldr	r2, [r2, #24]
 800a6c6:	641a      	str	r2, [r3, #64]	; 0x40
 800a6c8:	e020      	b.n	800a70c <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a6ca:	f7fe fd1d 	bl	8009108 <HAL_GetTick>
 800a6ce:	0002      	movs	r2, r0
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d90f      	bls.n	800a6f8 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	da0a      	bge.n	800a6f8 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2208      	movs	r2, #8
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e0bf      	b.n	800a878 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	dbe3      	blt.n	800a6ca <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	6992      	ldr	r2, [r2, #24]
 800a70a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	2110      	movs	r1, #16
 800a716:	400a      	ands	r2, r1
 800a718:	4959      	ldr	r1, [pc, #356]	; (800a880 <HAL_DAC_ConfigChannel+0x258>)
 800a71a:	4091      	lsls	r1, r2
 800a71c:	000a      	movs	r2, r1
 800a71e:	43d2      	mvns	r2, r2
 800a720:	401a      	ands	r2, r3
 800a722:	0011      	movs	r1, r2
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	69da      	ldr	r2, [r3, #28]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2010      	movs	r0, #16
 800a72c:	4003      	ands	r3, r0
 800a72e:	409a      	lsls	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	2110      	movs	r1, #16
 800a742:	400a      	ands	r2, r1
 800a744:	21ff      	movs	r1, #255	; 0xff
 800a746:	4091      	lsls	r1, r2
 800a748:	000a      	movs	r2, r1
 800a74a:	43d2      	mvns	r2, r2
 800a74c:	401a      	ands	r2, r3
 800a74e:	0011      	movs	r1, r2
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	6a1a      	ldr	r2, [r3, #32]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2010      	movs	r0, #16
 800a758:	4003      	ands	r3, r0
 800a75a:	409a      	lsls	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	430a      	orrs	r2, r1
 800a762:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d11d      	bne.n	800a7a8 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a772:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2210      	movs	r2, #16
 800a778:	4013      	ands	r3, r2
 800a77a:	221f      	movs	r2, #31
 800a77c:	409a      	lsls	r2, r3
 800a77e:	0013      	movs	r3, r2
 800a780:	43da      	mvns	r2, r3
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	4013      	ands	r3, r2
 800a786:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2210      	movs	r2, #16
 800a792:	4013      	ands	r3, r2
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	409a      	lsls	r2, r3
 800a798:	0013      	movs	r3, r2
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ae:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2210      	movs	r2, #16
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	2207      	movs	r2, #7
 800a7b8:	409a      	lsls	r2, r3
 800a7ba:	0013      	movs	r3, r2
 800a7bc:	43da      	mvns	r2, r3
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	431a      	orrs	r2, r3
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2210      	movs	r2, #16
 800a7da:	4013      	ands	r3, r2
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	409a      	lsls	r2, r3
 800a7e0:	0013      	movs	r3, r2
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2110      	movs	r1, #16
 800a7fa:	400b      	ands	r3, r1
 800a7fc:	2180      	movs	r1, #128	; 0x80
 800a7fe:	01c9      	lsls	r1, r1, #7
 800a800:	4099      	lsls	r1, r3
 800a802:	000b      	movs	r3, r1
 800a804:	43d9      	mvns	r1, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	400a      	ands	r2, r1
 800a80c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2210      	movs	r2, #16
 800a81a:	4013      	ands	r3, r2
 800a81c:	4a19      	ldr	r2, [pc, #100]	; (800a884 <HAL_DAC_ConfigChannel+0x25c>)
 800a81e:	409a      	lsls	r2, r3
 800a820:	0013      	movs	r3, r2
 800a822:	43da      	mvns	r2, r3
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	4013      	ands	r3, r2
 800a828:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2210      	movs	r2, #16
 800a834:	4013      	ands	r3, r2
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	409a      	lsls	r2, r3
 800a83a:	0013      	movs	r3, r2
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	4313      	orrs	r3, r2
 800a840:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2110      	movs	r1, #16
 800a854:	400b      	ands	r3, r1
 800a856:	21c0      	movs	r1, #192	; 0xc0
 800a858:	4099      	lsls	r1, r3
 800a85a:	000b      	movs	r3, r1
 800a85c:	43d9      	mvns	r1, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	400a      	ands	r2, r1
 800a864:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2201      	movs	r2, #1
 800a86a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800a872:	231f      	movs	r3, #31
 800a874:	18fb      	adds	r3, r7, r3
 800a876:	781b      	ldrb	r3, [r3, #0]
}
 800a878:	0018      	movs	r0, r3
 800a87a:	46bd      	mov	sp, r7
 800a87c:	b008      	add	sp, #32
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	000003ff 	.word	0x000003ff
 800a884:	00000ffe 	.word	0x00000ffe

0800a888 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800a890:	46c0      	nop			; (mov r8, r8)
 800a892:	46bd      	mov	sp, r7
 800a894:	b002      	add	sp, #8
 800a896:	bd80      	pop	{r7, pc}

0800a898 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e091      	b.n	800a9ce <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	001a      	movs	r2, r3
 800a8b0:	4b49      	ldr	r3, [pc, #292]	; (800a9d8 <HAL_DMA_Init+0x140>)
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d810      	bhi.n	800a8d8 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a48      	ldr	r2, [pc, #288]	; (800a9dc <HAL_DMA_Init+0x144>)
 800a8bc:	4694      	mov	ip, r2
 800a8be:	4463      	add	r3, ip
 800a8c0:	2114      	movs	r1, #20
 800a8c2:	0018      	movs	r0, r3
 800a8c4:	f7fb fc94 	bl	80061f0 <__udivsi3>
 800a8c8:	0003      	movs	r3, r0
 800a8ca:	009a      	lsls	r2, r3, #2
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a43      	ldr	r2, [pc, #268]	; (800a9e0 <HAL_DMA_Init+0x148>)
 800a8d4:	641a      	str	r2, [r3, #64]	; 0x40
 800a8d6:	e00f      	b.n	800a8f8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a41      	ldr	r2, [pc, #260]	; (800a9e4 <HAL_DMA_Init+0x14c>)
 800a8de:	4694      	mov	ip, r2
 800a8e0:	4463      	add	r3, ip
 800a8e2:	2114      	movs	r1, #20
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	f7fb fc83 	bl	80061f0 <__udivsi3>
 800a8ea:	0003      	movs	r3, r0
 800a8ec:	009a      	lsls	r2, r3, #2
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a3c      	ldr	r2, [pc, #240]	; (800a9e8 <HAL_DMA_Init+0x150>)
 800a8f6:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2225      	movs	r2, #37	; 0x25
 800a8fc:	2102      	movs	r1, #2
 800a8fe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4938      	ldr	r1, [pc, #224]	; (800a9ec <HAL_DMA_Init+0x154>)
 800a90c:	400a      	ands	r2, r1
 800a90e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6819      	ldr	r1, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	689a      	ldr	r2, [r3, #8]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	431a      	orrs	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	431a      	orrs	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	431a      	orrs	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	431a      	orrs	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	431a      	orrs	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	0018      	movs	r0, r3
 800a94a:	f000 f9d7 	bl	800acfc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689a      	ldr	r2, [r3, #8]
 800a952:	2380      	movs	r3, #128	; 0x80
 800a954:	01db      	lsls	r3, r3, #7
 800a956:	429a      	cmp	r2, r3
 800a958:	d102      	bne.n	800a960 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a968:	217f      	movs	r1, #127	; 0x7f
 800a96a:	400a      	ands	r2, r1
 800a96c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a976:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d011      	beq.n	800a9a4 <HAL_DMA_Init+0x10c>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	2b04      	cmp	r3, #4
 800a986:	d80d      	bhi.n	800a9a4 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	0018      	movs	r0, r3
 800a98c:	f000 fa00 	bl	800ad90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a994:	2200      	movs	r2, #0
 800a996:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a9a0:	605a      	str	r2, [r3, #4]
 800a9a2:	e008      	b.n	800a9b6 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2225      	movs	r2, #37	; 0x25
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2224      	movs	r2, #36	; 0x24
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b002      	add	sp, #8
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	46c0      	nop			; (mov r8, r8)
 800a9d8:	40020407 	.word	0x40020407
 800a9dc:	bffdfff8 	.word	0xbffdfff8
 800a9e0:	40020000 	.word	0x40020000
 800a9e4:	bffdfbf8 	.word	0xbffdfbf8
 800a9e8:	40020400 	.word	0x40020400
 800a9ec:	ffff800f 	.word	0xffff800f

0800a9f0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
 800a9fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9fe:	2317      	movs	r3, #23
 800aa00:	18fb      	adds	r3, r7, r3
 800aa02:	2200      	movs	r2, #0
 800aa04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2224      	movs	r2, #36	; 0x24
 800aa0a:	5c9b      	ldrb	r3, [r3, r2]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d101      	bne.n	800aa14 <HAL_DMA_Start_IT+0x24>
 800aa10:	2302      	movs	r3, #2
 800aa12:	e06f      	b.n	800aaf4 <HAL_DMA_Start_IT+0x104>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2224      	movs	r2, #36	; 0x24
 800aa18:	2101      	movs	r1, #1
 800aa1a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2225      	movs	r2, #37	; 0x25
 800aa20:	5c9b      	ldrb	r3, [r3, r2]
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d157      	bne.n	800aad8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2225      	movs	r2, #37	; 0x25
 800aa2c:	2102      	movs	r1, #2
 800aa2e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2101      	movs	r1, #1
 800aa42:	438a      	bics	r2, r1
 800aa44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 f919 	bl	800ac84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d008      	beq.n	800aa6c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	210e      	movs	r1, #14
 800aa66:	430a      	orrs	r2, r1
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	e00f      	b.n	800aa8c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2104      	movs	r1, #4
 800aa78:	438a      	bics	r2, r1
 800aa7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	210a      	movs	r1, #10
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	2380      	movs	r3, #128	; 0x80
 800aa94:	025b      	lsls	r3, r3, #9
 800aa96:	4013      	ands	r3, r2
 800aa98:	d008      	beq.n	800aaac <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaa4:	2180      	movs	r1, #128	; 0x80
 800aaa6:	0049      	lsls	r1, r1, #1
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d008      	beq.n	800aac6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aabe:	2180      	movs	r1, #128	; 0x80
 800aac0:	0049      	lsls	r1, r1, #1
 800aac2:	430a      	orrs	r2, r1
 800aac4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2101      	movs	r1, #1
 800aad2:	430a      	orrs	r2, r1
 800aad4:	601a      	str	r2, [r3, #0]
 800aad6:	e00a      	b.n	800aaee <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2280      	movs	r2, #128	; 0x80
 800aadc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2224      	movs	r2, #36	; 0x24
 800aae2:	2100      	movs	r1, #0
 800aae4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800aae6:	2317      	movs	r3, #23
 800aae8:	18fb      	adds	r3, r7, r3
 800aaea:	2201      	movs	r2, #1
 800aaec:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800aaee:	2317      	movs	r3, #23
 800aaf0:	18fb      	adds	r3, r7, r3
 800aaf2:	781b      	ldrb	r3, [r3, #0]
}
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	b006      	add	sp, #24
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab18:	221c      	movs	r2, #28
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	409a      	lsls	r2, r3
 800ab20:	0013      	movs	r3, r2
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	4013      	ands	r3, r2
 800ab26:	d026      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x7a>
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2204      	movs	r2, #4
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	d022      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2220      	movs	r2, #32
 800ab38:	4013      	ands	r3, r2
 800ab3a:	d107      	bne.n	800ab4c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2104      	movs	r1, #4
 800ab48:	438a      	bics	r2, r1
 800ab4a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab50:	221c      	movs	r2, #28
 800ab52:	401a      	ands	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab58:	2104      	movs	r1, #4
 800ab5a:	4091      	lsls	r1, r2
 800ab5c:	000a      	movs	r2, r1
 800ab5e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d100      	bne.n	800ab6a <HAL_DMA_IRQHandler+0x6e>
 800ab68:	e080      	b.n	800ac6c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	0010      	movs	r0, r2
 800ab72:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800ab74:	e07a      	b.n	800ac6c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7a:	221c      	movs	r2, #28
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	2202      	movs	r2, #2
 800ab80:	409a      	lsls	r2, r3
 800ab82:	0013      	movs	r3, r2
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4013      	ands	r3, r2
 800ab88:	d03c      	beq.n	800ac04 <HAL_DMA_IRQHandler+0x108>
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	4013      	ands	r3, r2
 800ab90:	d038      	beq.n	800ac04 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2220      	movs	r2, #32
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	d10b      	bne.n	800abb6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	210a      	movs	r1, #10
 800abaa:	438a      	bics	r2, r1
 800abac:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2225      	movs	r2, #37	; 0x25
 800abb2:	2101      	movs	r1, #1
 800abb4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	001a      	movs	r2, r3
 800abbc:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <HAL_DMA_IRQHandler+0x17c>)
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d909      	bls.n	800abd6 <HAL_DMA_IRQHandler+0xda>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc6:	221c      	movs	r2, #28
 800abc8:	401a      	ands	r2, r3
 800abca:	4b2c      	ldr	r3, [pc, #176]	; (800ac7c <HAL_DMA_IRQHandler+0x180>)
 800abcc:	2102      	movs	r1, #2
 800abce:	4091      	lsls	r1, r2
 800abd0:	000a      	movs	r2, r1
 800abd2:	605a      	str	r2, [r3, #4]
 800abd4:	e008      	b.n	800abe8 <HAL_DMA_IRQHandler+0xec>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abda:	221c      	movs	r2, #28
 800abdc:	401a      	ands	r2, r3
 800abde:	4b28      	ldr	r3, [pc, #160]	; (800ac80 <HAL_DMA_IRQHandler+0x184>)
 800abe0:	2102      	movs	r1, #2
 800abe2:	4091      	lsls	r1, r2
 800abe4:	000a      	movs	r2, r1
 800abe6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2224      	movs	r2, #36	; 0x24
 800abec:	2100      	movs	r1, #0
 800abee:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d039      	beq.n	800ac6c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	0010      	movs	r0, r2
 800ac00:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800ac02:	e033      	b.n	800ac6c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac08:	221c      	movs	r2, #28
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	2208      	movs	r2, #8
 800ac0e:	409a      	lsls	r2, r3
 800ac10:	0013      	movs	r3, r2
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	4013      	ands	r3, r2
 800ac16:	d02a      	beq.n	800ac6e <HAL_DMA_IRQHandler+0x172>
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2208      	movs	r2, #8
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	d026      	beq.n	800ac6e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	210e      	movs	r1, #14
 800ac2c:	438a      	bics	r2, r1
 800ac2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac34:	221c      	movs	r2, #28
 800ac36:	401a      	ands	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	4091      	lsls	r1, r2
 800ac40:	000a      	movs	r2, r1
 800ac42:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2225      	movs	r2, #37	; 0x25
 800ac4e:	2101      	movs	r1, #1
 800ac50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2224      	movs	r2, #36	; 0x24
 800ac56:	2100      	movs	r1, #0
 800ac58:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d005      	beq.n	800ac6e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	0010      	movs	r0, r2
 800ac6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ac6c:	46c0      	nop			; (mov r8, r8)
 800ac6e:	46c0      	nop			; (mov r8, r8)
}
 800ac70:	46bd      	mov	sp, r7
 800ac72:	b004      	add	sp, #16
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	46c0      	nop			; (mov r8, r8)
 800ac78:	40020080 	.word	0x40020080
 800ac7c:	40020400 	.word	0x40020400
 800ac80:	40020000 	.word	0x40020000

0800ac84 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ac9a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d004      	beq.n	800acae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800acac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb2:	221c      	movs	r2, #28
 800acb4:	401a      	ands	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acba:	2101      	movs	r1, #1
 800acbc:	4091      	lsls	r1, r2
 800acbe:	000a      	movs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	683a      	ldr	r2, [r7, #0]
 800acc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	2b10      	cmp	r3, #16
 800acd0:	d108      	bne.n	800ace4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ace2:	e007      	b.n	800acf4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	60da      	str	r2, [r3, #12]
}
 800acf4:	46c0      	nop			; (mov r8, r8)
 800acf6:	46bd      	mov	sp, r7
 800acf8:	b004      	add	sp, #16
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	001a      	movs	r2, r3
 800ad0a:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d814      	bhi.n	800ad3a <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad14:	089b      	lsrs	r3, r3, #2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4a1a      	ldr	r2, [pc, #104]	; (800ad84 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800ad1a:	189a      	adds	r2, r3, r2
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	001a      	movs	r2, r3
 800ad26:	23ff      	movs	r3, #255	; 0xff
 800ad28:	4013      	ands	r3, r2
 800ad2a:	3b08      	subs	r3, #8
 800ad2c:	2114      	movs	r1, #20
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f7fb fa5e 	bl	80061f0 <__udivsi3>
 800ad34:	0003      	movs	r3, r0
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	e014      	b.n	800ad64 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad3e:	089b      	lsrs	r3, r3, #2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4a11      	ldr	r2, [pc, #68]	; (800ad88 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800ad44:	189a      	adds	r2, r3, r2
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	001a      	movs	r2, r3
 800ad50:	23ff      	movs	r3, #255	; 0xff
 800ad52:	4013      	ands	r3, r2
 800ad54:	3b08      	subs	r3, #8
 800ad56:	2114      	movs	r1, #20
 800ad58:	0018      	movs	r0, r3
 800ad5a:	f7fb fa49 	bl	80061f0 <__udivsi3>
 800ad5e:	0003      	movs	r3, r0
 800ad60:	3307      	adds	r3, #7
 800ad62:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a09      	ldr	r2, [pc, #36]	; (800ad8c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800ad68:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	221f      	movs	r2, #31
 800ad6e:	4013      	ands	r3, r2
 800ad70:	2201      	movs	r2, #1
 800ad72:	409a      	lsls	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ad78:	46c0      	nop			; (mov r8, r8)
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	b004      	add	sp, #16
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	40020407 	.word	0x40020407
 800ad84:	40020800 	.word	0x40020800
 800ad88:	4002081c 	.word	0x4002081c
 800ad8c:	40020880 	.word	0x40020880

0800ad90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	227f      	movs	r2, #127	; 0x7f
 800ad9e:	4013      	ands	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4a0a      	ldr	r2, [pc, #40]	; (800add0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ada6:	4694      	mov	ip, r2
 800ada8:	4463      	add	r3, ip
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	001a      	movs	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a07      	ldr	r2, [pc, #28]	; (800add4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800adb6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	3b01      	subs	r3, #1
 800adbc:	2203      	movs	r2, #3
 800adbe:	4013      	ands	r3, r2
 800adc0:	2201      	movs	r2, #1
 800adc2:	409a      	lsls	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800adc8:	46c0      	nop			; (mov r8, r8)
 800adca:	46bd      	mov	sp, r7
 800adcc:	b004      	add	sp, #16
 800adce:	bd80      	pop	{r7, pc}
 800add0:	1000823f 	.word	0x1000823f
 800add4:	40020940 	.word	0x40020940

0800add8 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800add8:	b5b0      	push	{r4, r5, r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	603a      	str	r2, [r7, #0]
 800ade4:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ade6:	4b21      	ldr	r3, [pc, #132]	; (800ae6c <HAL_FLASH_Program+0x94>)
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d101      	bne.n	800adf2 <HAL_FLASH_Program+0x1a>
 800adee:	2302      	movs	r3, #2
 800adf0:	e038      	b.n	800ae64 <HAL_FLASH_Program+0x8c>
 800adf2:	4b1e      	ldr	r3, [pc, #120]	; (800ae6c <HAL_FLASH_Program+0x94>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800adf8:	4b1c      	ldr	r3, [pc, #112]	; (800ae6c <HAL_FLASH_Program+0x94>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800adfe:	2517      	movs	r5, #23
 800ae00:	197c      	adds	r4, r7, r5
 800ae02:	23fa      	movs	r3, #250	; 0xfa
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	0018      	movs	r0, r3
 800ae08:	f000 f87a 	bl	800af00 <FLASH_WaitForLastOperation>
 800ae0c:	0003      	movs	r3, r0
 800ae0e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800ae10:	197b      	adds	r3, r7, r5
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11f      	bne.n	800ae58 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d106      	bne.n	800ae2c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68b9      	ldr	r1, [r7, #8]
 800ae24:	0008      	movs	r0, r1
 800ae26:	f000 f8b9 	bl	800af9c <FLASH_Program_DoubleWord>
 800ae2a:	e005      	b.n	800ae38 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	0011      	movs	r1, r2
 800ae32:	0018      	movs	r0, r3
 800ae34:	f018 f880 	bl	8022f38 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ae38:	2317      	movs	r3, #23
 800ae3a:	18fc      	adds	r4, r7, r3
 800ae3c:	23fa      	movs	r3, #250	; 0xfa
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	0018      	movs	r0, r3
 800ae42:	f000 f85d 	bl	800af00 <FLASH_WaitForLastOperation>
 800ae46:	0003      	movs	r3, r0
 800ae48:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800ae4a:	4b09      	ldr	r3, [pc, #36]	; (800ae70 <HAL_FLASH_Program+0x98>)
 800ae4c:	695a      	ldr	r2, [r3, #20]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	43d9      	mvns	r1, r3
 800ae52:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <HAL_FLASH_Program+0x98>)
 800ae54:	400a      	ands	r2, r1
 800ae56:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <HAL_FLASH_Program+0x94>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800ae5e:	2317      	movs	r3, #23
 800ae60:	18fb      	adds	r3, r7, r3
 800ae62:	781b      	ldrb	r3, [r3, #0]
}
 800ae64:	0018      	movs	r0, r3
 800ae66:	46bd      	mov	sp, r7
 800ae68:	b006      	add	sp, #24
 800ae6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ae6c:	20000534 	.word	0x20000534
 800ae70:	40022000 	.word	0x40022000

0800ae74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ae7a:	1dfb      	adds	r3, r7, #7
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ae80:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <HAL_FLASH_Unlock+0x3c>)
 800ae82:	695b      	ldr	r3, [r3, #20]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da0c      	bge.n	800aea2 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ae88:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <HAL_FLASH_Unlock+0x3c>)
 800ae8a:	4a0a      	ldr	r2, [pc, #40]	; (800aeb4 <HAL_FLASH_Unlock+0x40>)
 800ae8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ae8e:	4b08      	ldr	r3, [pc, #32]	; (800aeb0 <HAL_FLASH_Unlock+0x3c>)
 800ae90:	4a09      	ldr	r2, [pc, #36]	; (800aeb8 <HAL_FLASH_Unlock+0x44>)
 800ae92:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ae94:	4b06      	ldr	r3, [pc, #24]	; (800aeb0 <HAL_FLASH_Unlock+0x3c>)
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	da02      	bge.n	800aea2 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800ae9c:	1dfb      	adds	r3, r7, #7
 800ae9e:	2201      	movs	r2, #1
 800aea0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800aea2:	1dfb      	adds	r3, r7, #7
 800aea4:	781b      	ldrb	r3, [r3, #0]
}
 800aea6:	0018      	movs	r0, r3
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	b002      	add	sp, #8
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	46c0      	nop			; (mov r8, r8)
 800aeb0:	40022000 	.word	0x40022000
 800aeb4:	45670123 	.word	0x45670123
 800aeb8:	cdef89ab 	.word	0xcdef89ab

0800aebc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800aec2:	1dfb      	adds	r3, r7, #7
 800aec4:	2201      	movs	r2, #1
 800aec6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800aec8:	23fa      	movs	r3, #250	; 0xfa
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	0018      	movs	r0, r3
 800aece:	f000 f817 	bl	800af00 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800aed2:	4b0a      	ldr	r3, [pc, #40]	; (800aefc <HAL_FLASH_Lock+0x40>)
 800aed4:	695a      	ldr	r2, [r3, #20]
 800aed6:	4b09      	ldr	r3, [pc, #36]	; (800aefc <HAL_FLASH_Lock+0x40>)
 800aed8:	2180      	movs	r1, #128	; 0x80
 800aeda:	0609      	lsls	r1, r1, #24
 800aedc:	430a      	orrs	r2, r1
 800aede:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800aee0:	4b06      	ldr	r3, [pc, #24]	; (800aefc <HAL_FLASH_Lock+0x40>)
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	da02      	bge.n	800aeee <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 800aee8:	1dfb      	adds	r3, r7, #7
 800aeea:	2200      	movs	r2, #0
 800aeec:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800aeee:	1dfb      	adds	r3, r7, #7
 800aef0:	781b      	ldrb	r3, [r3, #0]
}
 800aef2:	0018      	movs	r0, r3
 800aef4:	46bd      	mov	sp, r7
 800aef6:	b002      	add	sp, #8
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	46c0      	nop			; (mov r8, r8)
 800aefc:	40022000 	.word	0x40022000

0800af00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800af08:	f7fe f8fe 	bl	8009108 <HAL_GetTick>
 800af0c:	0003      	movs	r3, r0
 800af0e:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 800af10:	23c0      	movs	r3, #192	; 0xc0
 800af12:	029b      	lsls	r3, r3, #10
 800af14:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800af16:	e00c      	b.n	800af32 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3301      	adds	r3, #1
 800af1c:	d009      	beq.n	800af32 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800af1e:	f7fe f8f3 	bl	8009108 <HAL_GetTick>
 800af22:	0002      	movs	r2, r0
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d801      	bhi.n	800af32 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800af2e:	2303      	movs	r3, #3
 800af30:	e028      	b.n	800af84 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800af32:	4b16      	ldr	r3, [pc, #88]	; (800af8c <FLASH_WaitForLastOperation+0x8c>)
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	4013      	ands	r3, r2
 800af3a:	d1ed      	bne.n	800af18 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800af3c:	4b13      	ldr	r3, [pc, #76]	; (800af8c <FLASH_WaitForLastOperation+0x8c>)
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	4a13      	ldr	r2, [pc, #76]	; (800af90 <FLASH_WaitForLastOperation+0x90>)
 800af42:	4013      	ands	r3, r2
 800af44:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800af46:	4b11      	ldr	r3, [pc, #68]	; (800af8c <FLASH_WaitForLastOperation+0x8c>)
 800af48:	4a12      	ldr	r2, [pc, #72]	; (800af94 <FLASH_WaitForLastOperation+0x94>)
 800af4a:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d011      	beq.n	800af76 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800af52:	4b11      	ldr	r3, [pc, #68]	; (800af98 <FLASH_WaitForLastOperation+0x98>)
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	e013      	b.n	800af84 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3301      	adds	r3, #1
 800af60:	d009      	beq.n	800af76 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800af62:	f7fe f8d1 	bl	8009108 <HAL_GetTick>
 800af66:	0002      	movs	r2, r0
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d801      	bhi.n	800af76 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	e006      	b.n	800af84 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800af76:	4b05      	ldr	r3, [pc, #20]	; (800af8c <FLASH_WaitForLastOperation+0x8c>)
 800af78:	691a      	ldr	r2, [r3, #16]
 800af7a:	2380      	movs	r3, #128	; 0x80
 800af7c:	02db      	lsls	r3, r3, #11
 800af7e:	4013      	ands	r3, r2
 800af80:	d1ec      	bne.n	800af5c <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	0018      	movs	r0, r3
 800af86:	46bd      	mov	sp, r7
 800af88:	b004      	add	sp, #16
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	40022000 	.word	0x40022000
 800af90:	0000c3fa 	.word	0x0000c3fa
 800af94:	0008c3fb 	.word	0x0008c3fb
 800af98:	20000534 	.word	0x20000534

0800af9c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800af9c:	b5b0      	push	{r4, r5, r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	603a      	str	r2, [r7, #0]
 800afa6:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800afa8:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <FLASH_Program_DoubleWord+0x3c>)
 800afaa:	695a      	ldr	r2, [r3, #20]
 800afac:	4b0a      	ldr	r3, [pc, #40]	; (800afd8 <FLASH_Program_DoubleWord+0x3c>)
 800afae:	2101      	movs	r1, #1
 800afb0:	430a      	orrs	r2, r1
 800afb2:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800afba:	f3bf 8f6f 	isb	sy
}
 800afbe:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	001c      	movs	r4, r3
 800afc4:	2300      	movs	r3, #0
 800afc6:	001d      	movs	r5, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3304      	adds	r3, #4
 800afcc:	0022      	movs	r2, r4
 800afce:	601a      	str	r2, [r3, #0]
}
 800afd0:	46c0      	nop			; (mov r8, r8)
 800afd2:	46bd      	mov	sp, r7
 800afd4:	b004      	add	sp, #16
 800afd6:	bdb0      	pop	{r4, r5, r7, pc}
 800afd8:	40022000 	.word	0x40022000

0800afdc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800afdc:	b5b0      	push	{r4, r5, r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800afe6:	4b33      	ldr	r3, [pc, #204]	; (800b0b4 <HAL_FLASHEx_Erase+0xd8>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d101      	bne.n	800aff2 <HAL_FLASHEx_Erase+0x16>
 800afee:	2302      	movs	r3, #2
 800aff0:	e05c      	b.n	800b0ac <HAL_FLASHEx_Erase+0xd0>
 800aff2:	4b30      	ldr	r3, [pc, #192]	; (800b0b4 <HAL_FLASHEx_Erase+0xd8>)
 800aff4:	2201      	movs	r2, #1
 800aff6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aff8:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <HAL_FLASHEx_Erase+0xd8>)
 800affa:	2200      	movs	r2, #0
 800affc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800affe:	250f      	movs	r5, #15
 800b000:	197c      	adds	r4, r7, r5
 800b002:	23fa      	movs	r3, #250	; 0xfa
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	0018      	movs	r0, r3
 800b008:	f7ff ff7a 	bl	800af00 <FLASH_WaitForLastOperation>
 800b00c:	0003      	movs	r3, r0
 800b00e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800b010:	002c      	movs	r4, r5
 800b012:	193b      	adds	r3, r7, r4
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d142      	bne.n	800b0a0 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b04      	cmp	r3, #4
 800b020:	d10d      	bne.n	800b03e <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	0018      	movs	r0, r3
 800b028:	f000 f848 	bl	800b0bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b02c:	193c      	adds	r4, r7, r4
 800b02e:	23fa      	movs	r3, #250	; 0xfa
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	0018      	movs	r0, r3
 800b034:	f7ff ff64 	bl	800af00 <FLASH_WaitForLastOperation>
 800b038:	0003      	movs	r3, r0
 800b03a:	7023      	strb	r3, [r4, #0]
 800b03c:	e030      	b.n	800b0a0 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2201      	movs	r2, #1
 800b042:	4252      	negs	r2, r2
 800b044:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	60bb      	str	r3, [r7, #8]
 800b04c:	e01a      	b.n	800b084 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	0011      	movs	r1, r2
 800b056:	0018      	movs	r0, r3
 800b058:	f000 f844 	bl	800b0e4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b05c:	250f      	movs	r5, #15
 800b05e:	197c      	adds	r4, r7, r5
 800b060:	23fa      	movs	r3, #250	; 0xfa
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	0018      	movs	r0, r3
 800b066:	f7ff ff4b 	bl	800af00 <FLASH_WaitForLastOperation>
 800b06a:	0003      	movs	r3, r0
 800b06c:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800b06e:	197b      	adds	r3, r7, r5
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d003      	beq.n	800b07e <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	601a      	str	r2, [r3, #0]
          break;
 800b07c:	e00a      	b.n	800b094 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	3301      	adds	r3, #1
 800b082:	60bb      	str	r3, [r7, #8]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	18d3      	adds	r3, r2, r3
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	429a      	cmp	r2, r3
 800b092:	d3dc      	bcc.n	800b04e <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b094:	4b08      	ldr	r3, [pc, #32]	; (800b0b8 <HAL_FLASHEx_Erase+0xdc>)
 800b096:	695a      	ldr	r2, [r3, #20]
 800b098:	4b07      	ldr	r3, [pc, #28]	; (800b0b8 <HAL_FLASHEx_Erase+0xdc>)
 800b09a:	2102      	movs	r1, #2
 800b09c:	438a      	bics	r2, r1
 800b09e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b0a0:	4b04      	ldr	r3, [pc, #16]	; (800b0b4 <HAL_FLASHEx_Erase+0xd8>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800b0a6:	230f      	movs	r3, #15
 800b0a8:	18fb      	adds	r3, r7, r3
 800b0aa:	781b      	ldrb	r3, [r3, #0]
}
 800b0ac:	0018      	movs	r0, r3
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	b004      	add	sp, #16
 800b0b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b0b4:	20000534 	.word	0x20000534
 800b0b8:	40022000 	.word	0x40022000

0800b0bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800b0c4:	4b06      	ldr	r3, [pc, #24]	; (800b0e0 <FLASH_MassErase+0x24>)
 800b0c6:	695a      	ldr	r2, [r3, #20]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	4b04      	ldr	r3, [pc, #16]	; (800b0e0 <FLASH_MassErase+0x24>)
 800b0ce:	2180      	movs	r1, #128	; 0x80
 800b0d0:	0249      	lsls	r1, r1, #9
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	615a      	str	r2, [r3, #20]
}
 800b0d6:	46c0      	nop			; (mov r8, r8)
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	b002      	add	sp, #8
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	46c0      	nop			; (mov r8, r8)
 800b0e0:	40022000 	.word	0x40022000

0800b0e4 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800b0ee:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <FLASH_PageErase+0x48>)
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	4a0f      	ldr	r2, [pc, #60]	; (800b130 <FLASH_PageErase+0x4c>)
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	d005      	beq.n	800b10a <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2280      	movs	r2, #128	; 0x80
 800b102:	0192      	lsls	r2, r2, #6
 800b104:	4313      	orrs	r3, r2
 800b106:	60fb      	str	r3, [r7, #12]
 800b108:	e003      	b.n	800b112 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	4a09      	ldr	r2, [pc, #36]	; (800b134 <FLASH_PageErase+0x50>)
 800b10e:	4013      	ands	r3, r2
 800b110:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	00da      	lsls	r2, r3, #3
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	431a      	orrs	r2, r3
 800b11a:	4b04      	ldr	r3, [pc, #16]	; (800b12c <FLASH_PageErase+0x48>)
 800b11c:	4906      	ldr	r1, [pc, #24]	; (800b138 <FLASH_PageErase+0x54>)
 800b11e:	430a      	orrs	r2, r1
 800b120:	615a      	str	r2, [r3, #20]
}
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	46bd      	mov	sp, r7
 800b126:	b004      	add	sp, #16
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	46c0      	nop			; (mov r8, r8)
 800b12c:	40022000 	.word	0x40022000
 800b130:	ffffe007 	.word	0xffffe007
 800b134:	ffffdfff 	.word	0xffffdfff
 800b138:	00010002 	.word	0x00010002

0800b13c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b146:	2300      	movs	r3, #0
 800b148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b14a:	e14d      	b.n	800b3e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2101      	movs	r1, #1
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	4091      	lsls	r1, r2
 800b156:	000a      	movs	r2, r1
 800b158:	4013      	ands	r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d100      	bne.n	800b164 <HAL_GPIO_Init+0x28>
 800b162:	e13e      	b.n	800b3e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	2203      	movs	r2, #3
 800b16a:	4013      	ands	r3, r2
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d005      	beq.n	800b17c <HAL_GPIO_Init+0x40>
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	2203      	movs	r2, #3
 800b176:	4013      	ands	r3, r2
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d130      	bne.n	800b1de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	005b      	lsls	r3, r3, #1
 800b186:	2203      	movs	r2, #3
 800b188:	409a      	lsls	r2, r3
 800b18a:	0013      	movs	r3, r2
 800b18c:	43da      	mvns	r2, r3
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	4013      	ands	r3, r2
 800b192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	68da      	ldr	r2, [r3, #12]
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	409a      	lsls	r2, r3
 800b19e:	0013      	movs	r3, r2
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	693a      	ldr	r2, [r7, #16]
 800b1aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	409a      	lsls	r2, r3
 800b1b8:	0013      	movs	r3, r2
 800b1ba:	43da      	mvns	r2, r3
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	4013      	ands	r3, r2
 800b1c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	091b      	lsrs	r3, r3, #4
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	401a      	ands	r2, r3
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	409a      	lsls	r2, r3
 800b1d0:	0013      	movs	r3, r2
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d017      	beq.n	800b21a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	2203      	movs	r2, #3
 800b1f6:	409a      	lsls	r2, r3
 800b1f8:	0013      	movs	r3, r2
 800b1fa:	43da      	mvns	r2, r3
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	4013      	ands	r3, r2
 800b200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	689a      	ldr	r2, [r3, #8]
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	409a      	lsls	r2, r3
 800b20c:	0013      	movs	r3, r2
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	4313      	orrs	r3, r2
 800b212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	2203      	movs	r2, #3
 800b220:	4013      	ands	r3, r2
 800b222:	2b02      	cmp	r3, #2
 800b224:	d123      	bne.n	800b26e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	08da      	lsrs	r2, r3, #3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3208      	adds	r2, #8
 800b22e:	0092      	lsls	r2, r2, #2
 800b230:	58d3      	ldr	r3, [r2, r3]
 800b232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2207      	movs	r2, #7
 800b238:	4013      	ands	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	220f      	movs	r2, #15
 800b23e:	409a      	lsls	r2, r3
 800b240:	0013      	movs	r3, r2
 800b242:	43da      	mvns	r2, r3
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	4013      	ands	r3, r2
 800b248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	691a      	ldr	r2, [r3, #16]
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2107      	movs	r1, #7
 800b252:	400b      	ands	r3, r1
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	409a      	lsls	r2, r3
 800b258:	0013      	movs	r3, r2
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	08da      	lsrs	r2, r3, #3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3208      	adds	r2, #8
 800b268:	0092      	lsls	r2, r2, #2
 800b26a:	6939      	ldr	r1, [r7, #16]
 800b26c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	2203      	movs	r2, #3
 800b27a:	409a      	lsls	r2, r3
 800b27c:	0013      	movs	r3, r2
 800b27e:	43da      	mvns	r2, r3
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	4013      	ands	r3, r2
 800b284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	2203      	movs	r2, #3
 800b28c:	401a      	ands	r2, r3
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	409a      	lsls	r2, r3
 800b294:	0013      	movs	r3, r2
 800b296:	693a      	ldr	r2, [r7, #16]
 800b298:	4313      	orrs	r3, r2
 800b29a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	23c0      	movs	r3, #192	; 0xc0
 800b2a8:	029b      	lsls	r3, r3, #10
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	d100      	bne.n	800b2b0 <HAL_GPIO_Init+0x174>
 800b2ae:	e098      	b.n	800b3e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800b2b0:	4a53      	ldr	r2, [pc, #332]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	089b      	lsrs	r3, r3, #2
 800b2b6:	3318      	adds	r3, #24
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	589b      	ldr	r3, [r3, r2]
 800b2bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2203      	movs	r2, #3
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	00db      	lsls	r3, r3, #3
 800b2c6:	220f      	movs	r2, #15
 800b2c8:	409a      	lsls	r2, r3
 800b2ca:	0013      	movs	r3, r2
 800b2cc:	43da      	mvns	r2, r3
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	23a0      	movs	r3, #160	; 0xa0
 800b2d8:	05db      	lsls	r3, r3, #23
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d019      	beq.n	800b312 <HAL_GPIO_Init+0x1d6>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a48      	ldr	r2, [pc, #288]	; (800b404 <HAL_GPIO_Init+0x2c8>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d013      	beq.n	800b30e <HAL_GPIO_Init+0x1d2>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a47      	ldr	r2, [pc, #284]	; (800b408 <HAL_GPIO_Init+0x2cc>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00d      	beq.n	800b30a <HAL_GPIO_Init+0x1ce>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a46      	ldr	r2, [pc, #280]	; (800b40c <HAL_GPIO_Init+0x2d0>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d007      	beq.n	800b306 <HAL_GPIO_Init+0x1ca>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a45      	ldr	r2, [pc, #276]	; (800b410 <HAL_GPIO_Init+0x2d4>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d101      	bne.n	800b302 <HAL_GPIO_Init+0x1c6>
 800b2fe:	2304      	movs	r3, #4
 800b300:	e008      	b.n	800b314 <HAL_GPIO_Init+0x1d8>
 800b302:	2305      	movs	r3, #5
 800b304:	e006      	b.n	800b314 <HAL_GPIO_Init+0x1d8>
 800b306:	2303      	movs	r3, #3
 800b308:	e004      	b.n	800b314 <HAL_GPIO_Init+0x1d8>
 800b30a:	2302      	movs	r3, #2
 800b30c:	e002      	b.n	800b314 <HAL_GPIO_Init+0x1d8>
 800b30e:	2301      	movs	r3, #1
 800b310:	e000      	b.n	800b314 <HAL_GPIO_Init+0x1d8>
 800b312:	2300      	movs	r3, #0
 800b314:	697a      	ldr	r2, [r7, #20]
 800b316:	2103      	movs	r1, #3
 800b318:	400a      	ands	r2, r1
 800b31a:	00d2      	lsls	r2, r2, #3
 800b31c:	4093      	lsls	r3, r2
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	4313      	orrs	r3, r2
 800b322:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800b324:	4936      	ldr	r1, [pc, #216]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	089b      	lsrs	r3, r3, #2
 800b32a:	3318      	adds	r3, #24
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b332:	4b33      	ldr	r3, [pc, #204]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	43da      	mvns	r2, r3
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	4013      	ands	r3, r2
 800b340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	2380      	movs	r3, #128	; 0x80
 800b348:	035b      	lsls	r3, r3, #13
 800b34a:	4013      	ands	r3, r2
 800b34c:	d003      	beq.n	800b356 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	4313      	orrs	r3, r2
 800b354:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b356:	4b2a      	ldr	r3, [pc, #168]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800b35c:	4b28      	ldr	r3, [pc, #160]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	43da      	mvns	r2, r3
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	4013      	ands	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	2380      	movs	r3, #128	; 0x80
 800b372:	039b      	lsls	r3, r3, #14
 800b374:	4013      	ands	r3, r2
 800b376:	d003      	beq.n	800b380 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b380:	4b1f      	ldr	r3, [pc, #124]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b386:	4a1e      	ldr	r2, [pc, #120]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b388:	2384      	movs	r3, #132	; 0x84
 800b38a:	58d3      	ldr	r3, [r2, r3]
 800b38c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	43da      	mvns	r2, r3
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	4013      	ands	r3, r2
 800b396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	2380      	movs	r3, #128	; 0x80
 800b39e:	029b      	lsls	r3, r3, #10
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	d003      	beq.n	800b3ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800b3a4:	693a      	ldr	r2, [r7, #16]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b3ac:	4914      	ldr	r1, [pc, #80]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b3ae:	2284      	movs	r2, #132	; 0x84
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800b3b4:	4a12      	ldr	r2, [pc, #72]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b3b6:	2380      	movs	r3, #128	; 0x80
 800b3b8:	58d3      	ldr	r3, [r2, r3]
 800b3ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	43da      	mvns	r2, r3
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	2380      	movs	r3, #128	; 0x80
 800b3cc:	025b      	lsls	r3, r3, #9
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	d003      	beq.n	800b3da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b3da:	4909      	ldr	r1, [pc, #36]	; (800b400 <HAL_GPIO_Init+0x2c4>)
 800b3dc:	2280      	movs	r2, #128	; 0x80
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	40da      	lsrs	r2, r3
 800b3f0:	1e13      	subs	r3, r2, #0
 800b3f2:	d000      	beq.n	800b3f6 <HAL_GPIO_Init+0x2ba>
 800b3f4:	e6aa      	b.n	800b14c <HAL_GPIO_Init+0x10>
  }
}
 800b3f6:	46c0      	nop			; (mov r8, r8)
 800b3f8:	46c0      	nop			; (mov r8, r8)
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	b006      	add	sp, #24
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	40021800 	.word	0x40021800
 800b404:	50000400 	.word	0x50000400
 800b408:	50000800 	.word	0x50000800
 800b40c:	50000c00 	.word	0x50000c00
 800b410:	50001000 	.word	0x50001000

0800b414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	000a      	movs	r2, r1
 800b41e:	1cbb      	adds	r3, r7, #2
 800b420:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	1cba      	adds	r2, r7, #2
 800b428:	8812      	ldrh	r2, [r2, #0]
 800b42a:	4013      	ands	r3, r2
 800b42c:	d004      	beq.n	800b438 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b42e:	230f      	movs	r3, #15
 800b430:	18fb      	adds	r3, r7, r3
 800b432:	2201      	movs	r2, #1
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	e003      	b.n	800b440 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b438:	230f      	movs	r3, #15
 800b43a:	18fb      	adds	r3, r7, r3
 800b43c:	2200      	movs	r2, #0
 800b43e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b440:	230f      	movs	r3, #15
 800b442:	18fb      	adds	r3, r7, r3
 800b444:	781b      	ldrb	r3, [r3, #0]
}
 800b446:	0018      	movs	r0, r3
 800b448:	46bd      	mov	sp, r7
 800b44a:	b004      	add	sp, #16
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	0008      	movs	r0, r1
 800b458:	0011      	movs	r1, r2
 800b45a:	1cbb      	adds	r3, r7, #2
 800b45c:	1c02      	adds	r2, r0, #0
 800b45e:	801a      	strh	r2, [r3, #0]
 800b460:	1c7b      	adds	r3, r7, #1
 800b462:	1c0a      	adds	r2, r1, #0
 800b464:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b466:	1c7b      	adds	r3, r7, #1
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d004      	beq.n	800b478 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b46e:	1cbb      	adds	r3, r7, #2
 800b470:	881a      	ldrh	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b476:	e003      	b.n	800b480 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b478:	1cbb      	adds	r3, r7, #2
 800b47a:	881a      	ldrh	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b480:	46c0      	nop			; (mov r8, r8)
 800b482:	46bd      	mov	sp, r7
 800b484:	b002      	add	sp, #8
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	0002      	movs	r2, r0
 800b490:	1dbb      	adds	r3, r7, #6
 800b492:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800b494:	4b10      	ldr	r3, [pc, #64]	; (800b4d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	1dba      	adds	r2, r7, #6
 800b49a:	8812      	ldrh	r2, [r2, #0]
 800b49c:	4013      	ands	r3, r2
 800b49e:	d008      	beq.n	800b4b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800b4a0:	4b0d      	ldr	r3, [pc, #52]	; (800b4d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800b4a2:	1dba      	adds	r2, r7, #6
 800b4a4:	8812      	ldrh	r2, [r2, #0]
 800b4a6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800b4a8:	1dbb      	adds	r3, r7, #6
 800b4aa:	881b      	ldrh	r3, [r3, #0]
 800b4ac:	0018      	movs	r0, r3
 800b4ae:	f000 f815 	bl	800b4dc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800b4b2:	4b09      	ldr	r3, [pc, #36]	; (800b4d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	1dba      	adds	r2, r7, #6
 800b4b8:	8812      	ldrh	r2, [r2, #0]
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	d008      	beq.n	800b4d0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800b4be:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800b4c0:	1dba      	adds	r2, r7, #6
 800b4c2:	8812      	ldrh	r2, [r2, #0]
 800b4c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800b4c6:	1dbb      	adds	r3, r7, #6
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	0018      	movs	r0, r3
 800b4cc:	f7fd f9e4 	bl	8008898 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800b4d0:	46c0      	nop			; (mov r8, r8)
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	b002      	add	sp, #8
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	40021800 	.word	0x40021800

0800b4dc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	0002      	movs	r2, r0
 800b4e4:	1dbb      	adds	r3, r7, #6
 800b4e6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800b4e8:	46c0      	nop			; (mov r8, r8)
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	b002      	add	sp, #8
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	000a      	movs	r2, r1
 800b4fa:	1cbb      	adds	r3, r7, #2
 800b4fc:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800b4fe:	230a      	movs	r3, #10
 800b500:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800b502:	e002      	b.n	800b50a <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	3b01      	subs	r3, #1
 800b508:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1f9      	bne.n	800b504 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800b510:	1cbb      	adds	r3, r7, #2
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	00db      	lsls	r3, r3, #3
 800b516:	4a06      	ldr	r2, [pc, #24]	; (800b530 <PCD_GET_EP_RX_CNT+0x40>)
 800b518:	4694      	mov	ip, r2
 800b51a:	4463      	add	r3, ip
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	0c1b      	lsrs	r3, r3, #16
 800b520:	b29b      	uxth	r3, r3
 800b522:	059b      	lsls	r3, r3, #22
 800b524:	0d9b      	lsrs	r3, r3, #22
 800b526:	b29b      	uxth	r3, r3
}
 800b528:	0018      	movs	r0, r3
 800b52a:	46bd      	mov	sp, r7
 800b52c:	b004      	add	sp, #16
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	40009800 	.word	0x40009800

0800b534 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	000a      	movs	r2, r1
 800b53e:	1cbb      	adds	r3, r7, #2
 800b540:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800b542:	230a      	movs	r3, #10
 800b544:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800b546:	e002      	b.n	800b54e <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1f9      	bne.n	800b548 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800b554:	1cbb      	adds	r3, r7, #2
 800b556:	881b      	ldrh	r3, [r3, #0]
 800b558:	00db      	lsls	r3, r3, #3
 800b55a:	4a06      	ldr	r2, [pc, #24]	; (800b574 <PCD_GET_EP_DBUF0_CNT+0x40>)
 800b55c:	4694      	mov	ip, r2
 800b55e:	4463      	add	r3, ip
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	0c1b      	lsrs	r3, r3, #16
 800b564:	b29b      	uxth	r3, r3
 800b566:	059b      	lsls	r3, r3, #22
 800b568:	0d9b      	lsrs	r3, r3, #22
 800b56a:	b29b      	uxth	r3, r3
}
 800b56c:	0018      	movs	r0, r3
 800b56e:	46bd      	mov	sp, r7
 800b570:	b004      	add	sp, #16
 800b572:	bd80      	pop	{r7, pc}
 800b574:	40009800 	.word	0x40009800

0800b578 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	000a      	movs	r2, r1
 800b582:	1cbb      	adds	r3, r7, #2
 800b584:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800b586:	230a      	movs	r3, #10
 800b588:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800b58a:	e002      	b.n	800b592 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	3b01      	subs	r3, #1
 800b590:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1f9      	bne.n	800b58c <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800b598:	1cbb      	adds	r3, r7, #2
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	00db      	lsls	r3, r3, #3
 800b59e:	4a06      	ldr	r2, [pc, #24]	; (800b5b8 <PCD_GET_EP_DBUF1_CNT+0x40>)
 800b5a0:	4694      	mov	ip, r2
 800b5a2:	4463      	add	r3, ip
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	0c1b      	lsrs	r3, r3, #16
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	059b      	lsls	r3, r3, #22
 800b5ac:	0d9b      	lsrs	r3, r3, #22
 800b5ae:	b29b      	uxth	r3, r3
}
 800b5b0:	0018      	movs	r0, r3
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	b004      	add	sp, #16
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	40009800 	.word	0x40009800

0800b5bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b5bc:	b590      	push	{r4, r7, lr}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e0ea      	b.n	800b7a4 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a76      	ldr	r2, [pc, #472]	; (800b7ac <HAL_PCD_Init+0x1f0>)
 800b5d2:	5c9b      	ldrb	r3, [r3, r2]
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d108      	bne.n	800b5ec <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	23a5      	movs	r3, #165	; 0xa5
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	0018      	movs	r0, r3
 800b5e8:	f011 faa4 	bl	801cb34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a6f      	ldr	r2, [pc, #444]	; (800b7ac <HAL_PCD_Init+0x1f0>)
 800b5f0:	2103      	movs	r1, #3
 800b5f2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	f004 fafb 	bl	800fbf4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5fe:	230f      	movs	r3, #15
 800b600:	18fb      	adds	r3, r7, r3
 800b602:	2200      	movs	r2, #0
 800b604:	701a      	strb	r2, [r3, #0]
 800b606:	e049      	b.n	800b69c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b608:	200f      	movs	r0, #15
 800b60a:	183b      	adds	r3, r7, r0
 800b60c:	781a      	ldrb	r2, [r3, #0]
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	0013      	movs	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	189b      	adds	r3, r3, r2
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	18cb      	adds	r3, r1, r3
 800b61a:	3315      	adds	r3, #21
 800b61c:	2201      	movs	r2, #1
 800b61e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b620:	183b      	adds	r3, r7, r0
 800b622:	781a      	ldrb	r2, [r3, #0]
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	0013      	movs	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	189b      	adds	r3, r3, r2
 800b62c:	00db      	lsls	r3, r3, #3
 800b62e:	18cb      	adds	r3, r1, r3
 800b630:	3314      	adds	r3, #20
 800b632:	183a      	adds	r2, r7, r0
 800b634:	7812      	ldrb	r2, [r2, #0]
 800b636:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b638:	183b      	adds	r3, r7, r0
 800b63a:	781a      	ldrb	r2, [r3, #0]
 800b63c:	6879      	ldr	r1, [r7, #4]
 800b63e:	0013      	movs	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	189b      	adds	r3, r3, r2
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	18cb      	adds	r3, r1, r3
 800b648:	3317      	adds	r3, #23
 800b64a:	2200      	movs	r2, #0
 800b64c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b64e:	183b      	adds	r3, r7, r0
 800b650:	781a      	ldrb	r2, [r3, #0]
 800b652:	6879      	ldr	r1, [r7, #4]
 800b654:	0013      	movs	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	189b      	adds	r3, r3, r2
 800b65a:	00db      	lsls	r3, r3, #3
 800b65c:	18cb      	adds	r3, r1, r3
 800b65e:	3324      	adds	r3, #36	; 0x24
 800b660:	2200      	movs	r2, #0
 800b662:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b664:	183b      	adds	r3, r7, r0
 800b666:	781a      	ldrb	r2, [r3, #0]
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	0013      	movs	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	189b      	adds	r3, r3, r2
 800b670:	00db      	lsls	r3, r3, #3
 800b672:	18cb      	adds	r3, r1, r3
 800b674:	3328      	adds	r3, #40	; 0x28
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b67a:	183b      	adds	r3, r7, r0
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	0013      	movs	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	189b      	adds	r3, r3, r2
 800b688:	00db      	lsls	r3, r3, #3
 800b68a:	18cb      	adds	r3, r1, r3
 800b68c:	3304      	adds	r3, #4
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b692:	183b      	adds	r3, r7, r0
 800b694:	781a      	ldrb	r2, [r3, #0]
 800b696:	183b      	adds	r3, r7, r0
 800b698:	3201      	adds	r2, #1
 800b69a:	701a      	strb	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	791b      	ldrb	r3, [r3, #4]
 800b6a0:	210f      	movs	r1, #15
 800b6a2:	187a      	adds	r2, r7, r1
 800b6a4:	7812      	ldrb	r2, [r2, #0]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d3ae      	bcc.n	800b608 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6aa:	187b      	adds	r3, r7, r1
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	e056      	b.n	800b760 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b6b2:	240f      	movs	r4, #15
 800b6b4:	193b      	adds	r3, r7, r4
 800b6b6:	781a      	ldrb	r2, [r3, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	2356      	movs	r3, #86	; 0x56
 800b6bc:	33ff      	adds	r3, #255	; 0xff
 800b6be:	0019      	movs	r1, r3
 800b6c0:	0013      	movs	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	189b      	adds	r3, r3, r2
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	18c3      	adds	r3, r0, r3
 800b6ca:	185b      	adds	r3, r3, r1
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b6d0:	193b      	adds	r3, r7, r4
 800b6d2:	781a      	ldrb	r2, [r3, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	23aa      	movs	r3, #170	; 0xaa
 800b6d8:	0059      	lsls	r1, r3, #1
 800b6da:	0013      	movs	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	189b      	adds	r3, r3, r2
 800b6e0:	00db      	lsls	r3, r3, #3
 800b6e2:	18c3      	adds	r3, r0, r3
 800b6e4:	185b      	adds	r3, r3, r1
 800b6e6:	193a      	adds	r2, r7, r4
 800b6e8:	7812      	ldrb	r2, [r2, #0]
 800b6ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b6ec:	193b      	adds	r3, r7, r4
 800b6ee:	781a      	ldrb	r2, [r3, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	2358      	movs	r3, #88	; 0x58
 800b6f4:	33ff      	adds	r3, #255	; 0xff
 800b6f6:	0019      	movs	r1, r3
 800b6f8:	0013      	movs	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	189b      	adds	r3, r3, r2
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	18c3      	adds	r3, r0, r3
 800b702:	185b      	adds	r3, r3, r1
 800b704:	2200      	movs	r2, #0
 800b706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b708:	193b      	adds	r3, r7, r4
 800b70a:	781a      	ldrb	r2, [r3, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	23b2      	movs	r3, #178	; 0xb2
 800b710:	0059      	lsls	r1, r3, #1
 800b712:	0013      	movs	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	189b      	adds	r3, r3, r2
 800b718:	00db      	lsls	r3, r3, #3
 800b71a:	18c3      	adds	r3, r0, r3
 800b71c:	185b      	adds	r3, r3, r1
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b722:	193b      	adds	r3, r7, r4
 800b724:	781a      	ldrb	r2, [r3, #0]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	23b4      	movs	r3, #180	; 0xb4
 800b72a:	0059      	lsls	r1, r3, #1
 800b72c:	0013      	movs	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	189b      	adds	r3, r3, r2
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	18c3      	adds	r3, r0, r3
 800b736:	185b      	adds	r3, r3, r1
 800b738:	2200      	movs	r2, #0
 800b73a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b73c:	193b      	adds	r3, r7, r4
 800b73e:	781a      	ldrb	r2, [r3, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	23b6      	movs	r3, #182	; 0xb6
 800b744:	0059      	lsls	r1, r3, #1
 800b746:	0013      	movs	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	189b      	adds	r3, r3, r2
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	18c3      	adds	r3, r0, r3
 800b750:	185b      	adds	r3, r3, r1
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b756:	193b      	adds	r3, r7, r4
 800b758:	781a      	ldrb	r2, [r3, #0]
 800b75a:	193b      	adds	r3, r7, r4
 800b75c:	3201      	adds	r2, #1
 800b75e:	701a      	strb	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	791b      	ldrb	r3, [r3, #4]
 800b764:	220f      	movs	r2, #15
 800b766:	18ba      	adds	r2, r7, r2
 800b768:	7812      	ldrb	r2, [r2, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d3a1      	bcc.n	800b6b2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	466a      	mov	r2, sp
 800b776:	7c19      	ldrb	r1, [r3, #16]
 800b778:	7011      	strb	r1, [r2, #0]
 800b77a:	6859      	ldr	r1, [r3, #4]
 800b77c:	689a      	ldr	r2, [r3, #8]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	f004 fa71 	bl	800fc66 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a07      	ldr	r2, [pc, #28]	; (800b7ac <HAL_PCD_Init+0x1f0>)
 800b78e:	2101      	movs	r1, #1
 800b790:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7b1b      	ldrb	r3, [r3, #12]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d103      	bne.n	800b7a2 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	0018      	movs	r0, r3
 800b79e:	f001 fbfb 	bl	800cf98 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	0018      	movs	r0, r3
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	b005      	add	sp, #20
 800b7aa:	bd90      	pop	{r4, r7, pc}
 800b7ac:	00000295 	.word	0x00000295

0800b7b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	23a5      	movs	r3, #165	; 0xa5
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	5cd3      	ldrb	r3, [r2, r3]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d101      	bne.n	800b7c8 <HAL_PCD_Start+0x18>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e014      	b.n	800b7f2 <HAL_PCD_Start+0x42>
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	23a5      	movs	r3, #165	; 0xa5
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	2101      	movs	r1, #1
 800b7d0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	0018      	movs	r0, r3
 800b7d8:	f004 f9f8 	bl	800fbcc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f006 f802 	bl	80117ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	23a5      	movs	r3, #165	; 0xa5
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	0018      	movs	r0, r3
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	b002      	add	sp, #8
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	0018      	movs	r0, r3
 800b80a:	f005 fffe 	bl	801180a <USB_ReadInterrupts>
 800b80e:	0003      	movs	r3, r0
 800b810:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800b812:	4a7c      	ldr	r2, [pc, #496]	; (800ba04 <HAL_PCD_IRQHandler+0x208>)
 800b814:	23a0      	movs	r3, #160	; 0xa0
 800b816:	58d3      	ldr	r3, [r2, r3]
 800b818:	2204      	movs	r2, #4
 800b81a:	4013      	ands	r3, r2
 800b81c:	d100      	bne.n	800b820 <HAL_PCD_IRQHandler+0x24>
 800b81e:	e0ed      	b.n	800b9fc <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	2380      	movs	r3, #128	; 0x80
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	4013      	ands	r3, r2
 800b828:	d004      	beq.n	800b834 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	0018      	movs	r0, r3
 800b82e:	f000 fb35 	bl	800be9c <PCD_EP_ISR_Handler>

    return;
 800b832:	e0e4      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	2380      	movs	r3, #128	; 0x80
 800b838:	00db      	lsls	r3, r3, #3
 800b83a:	4013      	ands	r3, r2
 800b83c:	d011      	beq.n	800b862 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	496f      	ldr	r1, [pc, #444]	; (800ba08 <HAL_PCD_IRQHandler+0x20c>)
 800b84a:	400a      	ands	r2, r1
 800b84c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	0018      	movs	r0, r3
 800b852:	f011 fa32 	bl	801ccba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2100      	movs	r1, #0
 800b85a:	0018      	movs	r0, r3
 800b85c:	f000 f8e4 	bl	800ba28 <HAL_PCD_SetAddress>

    return;
 800b860:	e0cd      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	2380      	movs	r3, #128	; 0x80
 800b866:	01db      	lsls	r3, r3, #7
 800b868:	4013      	ands	r3, r2
 800b86a:	d008      	beq.n	800b87e <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4965      	ldr	r1, [pc, #404]	; (800ba0c <HAL_PCD_IRQHandler+0x210>)
 800b878:	400a      	ands	r2, r1
 800b87a:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800b87c:	e0bf      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	2380      	movs	r3, #128	; 0x80
 800b882:	019b      	lsls	r3, r3, #6
 800b884:	4013      	ands	r3, r2
 800b886:	d008      	beq.n	800b89a <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	495f      	ldr	r1, [pc, #380]	; (800ba10 <HAL_PCD_IRQHandler+0x214>)
 800b894:	400a      	ands	r2, r1
 800b896:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800b898:	e0b1      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	2380      	movs	r3, #128	; 0x80
 800b89e:	015b      	lsls	r3, r3, #5
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	d02c      	beq.n	800b8fe <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2104      	movs	r1, #4
 800b8b0:	438a      	bics	r2, r1
 800b8b2:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2108      	movs	r1, #8
 800b8c0:	438a      	bics	r2, r1
 800b8c2:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	23b3      	movs	r3, #179	; 0xb3
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	5cd3      	ldrb	r3, [r2, r3]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d109      	bne.n	800b8e4 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	23b3      	movs	r3, #179	; 0xb3
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2100      	movs	r1, #0
 800b8de:	0018      	movs	r0, r3
 800b8e0:	f011 fc6a 	bl	801d1b8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	0018      	movs	r0, r3
 800b8e8:	f011 fa28 	bl	801cd3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4947      	ldr	r1, [pc, #284]	; (800ba14 <HAL_PCD_IRQHandler+0x218>)
 800b8f8:	400a      	ands	r2, r1
 800b8fa:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800b8fc:	e07f      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	2380      	movs	r3, #128	; 0x80
 800b902:	011b      	lsls	r3, r3, #4
 800b904:	4013      	ands	r3, r2
 800b906:	d01c      	beq.n	800b942 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2108      	movs	r1, #8
 800b914:	430a      	orrs	r2, r1
 800b916:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	493d      	ldr	r1, [pc, #244]	; (800ba18 <HAL_PCD_IRQHandler+0x21c>)
 800b924:	400a      	ands	r2, r1
 800b926:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2104      	movs	r1, #4
 800b934:	430a      	orrs	r2, r1
 800b936:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	0018      	movs	r0, r3
 800b93c:	f011 f9e2 	bl	801cd04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b940:	e05d      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2280      	movs	r2, #128	; 0x80
 800b946:	4013      	ands	r3, r2
 800b948:	d038      	beq.n	800b9bc <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4931      	ldr	r1, [pc, #196]	; (800ba1c <HAL_PCD_IRQHandler+0x220>)
 800b956:	400a      	ands	r2, r1
 800b958:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	23b3      	movs	r3, #179	; 0xb3
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	5cd3      	ldrb	r3, [r2, r3]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d125      	bne.n	800b9b2 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2104      	movs	r1, #4
 800b972:	430a      	orrs	r2, r1
 800b974:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2108      	movs	r1, #8
 800b982:	430a      	orrs	r2, r1
 800b984:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	23b3      	movs	r3, #179	; 0xb3
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	2101      	movs	r1, #1
 800b98e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b996:	089b      	lsrs	r3, r3, #2
 800b998:	223c      	movs	r2, #60	; 0x3c
 800b99a:	4013      	ands	r3, r2
 800b99c:	0019      	movs	r1, r3
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	23b4      	movs	r3, #180	; 0xb4
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	f011 fc04 	bl	801d1b8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b9b0:	e025      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	0018      	movs	r0, r3
 800b9b6:	f011 f9a5 	bl	801cd04 <HAL_PCD_SuspendCallback>
    return;
 800b9ba:	e020      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	2380      	movs	r3, #128	; 0x80
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	d00c      	beq.n	800b9e0 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4913      	ldr	r1, [pc, #76]	; (800ba20 <HAL_PCD_IRQHandler+0x224>)
 800b9d2:	400a      	ands	r2, r1
 800b9d4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	0018      	movs	r0, r3
 800b9da:	f011 f95f 	bl	801cc9c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b9de:	e00e      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	2380      	movs	r3, #128	; 0x80
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	d009      	beq.n	800b9fe <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	490b      	ldr	r1, [pc, #44]	; (800ba24 <HAL_PCD_IRQHandler+0x228>)
 800b9f6:	400a      	ands	r2, r1
 800b9f8:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800b9fa:	e000      	b.n	800b9fe <HAL_PCD_IRQHandler+0x202>
    return;
 800b9fc:	46c0      	nop			; (mov r8, r8)
  }
}
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	b004      	add	sp, #16
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	40010000 	.word	0x40010000
 800ba08:	0000fbff 	.word	0x0000fbff
 800ba0c:	0000bfff 	.word	0x0000bfff
 800ba10:	0000dfff 	.word	0x0000dfff
 800ba14:	0000efff 	.word	0x0000efff
 800ba18:	0000f7ff 	.word	0x0000f7ff
 800ba1c:	0000ff7f 	.word	0x0000ff7f
 800ba20:	0000fdff 	.word	0x0000fdff
 800ba24:	0000feff 	.word	0x0000feff

0800ba28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	000a      	movs	r2, r1
 800ba32:	1cfb      	adds	r3, r7, #3
 800ba34:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	23a5      	movs	r3, #165	; 0xa5
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	5cd3      	ldrb	r3, [r2, r3]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d101      	bne.n	800ba46 <HAL_PCD_SetAddress+0x1e>
 800ba42:	2302      	movs	r3, #2
 800ba44:	e016      	b.n	800ba74 <HAL_PCD_SetAddress+0x4c>
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	23a5      	movs	r3, #165	; 0xa5
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	1cfa      	adds	r2, r7, #3
 800ba54:	7812      	ldrb	r2, [r2, #0]
 800ba56:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	1cfb      	adds	r3, r7, #3
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	0019      	movs	r1, r3
 800ba62:	0010      	movs	r0, r2
 800ba64:	f005 feae 	bl	80117c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	23a5      	movs	r3, #165	; 0xa5
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	2100      	movs	r1, #0
 800ba70:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	0018      	movs	r0, r3
 800ba76:	46bd      	mov	sp, r7
 800ba78:	b002      	add	sp, #8
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ba7c:	b590      	push	{r4, r7, lr}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	000c      	movs	r4, r1
 800ba86:	0010      	movs	r0, r2
 800ba88:	0019      	movs	r1, r3
 800ba8a:	1cfb      	adds	r3, r7, #3
 800ba8c:	1c22      	adds	r2, r4, #0
 800ba8e:	701a      	strb	r2, [r3, #0]
 800ba90:	003b      	movs	r3, r7
 800ba92:	1c02      	adds	r2, r0, #0
 800ba94:	801a      	strh	r2, [r3, #0]
 800ba96:	1cbb      	adds	r3, r7, #2
 800ba98:	1c0a      	adds	r2, r1, #0
 800ba9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ba9c:	230b      	movs	r3, #11
 800ba9e:	18fb      	adds	r3, r7, r3
 800baa0:	2200      	movs	r2, #0
 800baa2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800baa4:	1cfb      	adds	r3, r7, #3
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	b25b      	sxtb	r3, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	da10      	bge.n	800bad0 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800baae:	1cfb      	adds	r3, r7, #3
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	2207      	movs	r2, #7
 800bab4:	401a      	ands	r2, r3
 800bab6:	0013      	movs	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	189b      	adds	r3, r3, r2
 800babc:	00db      	lsls	r3, r3, #3
 800babe:	3310      	adds	r3, #16
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	18d3      	adds	r3, r2, r3
 800bac4:	3304      	adds	r3, #4
 800bac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2201      	movs	r2, #1
 800bacc:	705a      	strb	r2, [r3, #1]
 800bace:	e010      	b.n	800baf2 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bad0:	1cfb      	adds	r3, r7, #3
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	2207      	movs	r2, #7
 800bad6:	401a      	ands	r2, r3
 800bad8:	0013      	movs	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	189b      	adds	r3, r3, r2
 800bade:	00db      	lsls	r3, r3, #3
 800bae0:	3351      	adds	r3, #81	; 0x51
 800bae2:	33ff      	adds	r3, #255	; 0xff
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	18d3      	adds	r3, r2, r3
 800bae8:	3304      	adds	r3, #4
 800baea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800baf2:	1cfb      	adds	r3, r7, #3
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	2207      	movs	r2, #7
 800baf8:	4013      	ands	r3, r2
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800bb00:	003b      	movs	r3, r7
 800bb02:	881a      	ldrh	r2, [r3, #0]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	1cba      	adds	r2, r7, #2
 800bb0c:	7812      	ldrb	r2, [r2, #0]
 800bb0e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bb10:	1cbb      	adds	r3, r7, #2
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d102      	bne.n	800bb1e <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	23a5      	movs	r3, #165	; 0xa5
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	5cd3      	ldrb	r3, [r2, r3]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d101      	bne.n	800bb2e <HAL_PCD_EP_Open+0xb2>
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	e013      	b.n	800bb56 <HAL_PCD_EP_Open+0xda>
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	23a5      	movs	r3, #165	; 0xa5
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	2101      	movs	r1, #1
 800bb36:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	0011      	movs	r1, r2
 800bb40:	0018      	movs	r0, r3
 800bb42:	f004 f8bb 	bl	800fcbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	23a5      	movs	r3, #165	; 0xa5
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	54d1      	strb	r1, [r2, r3]

  return ret;
 800bb50:	230b      	movs	r3, #11
 800bb52:	18fb      	adds	r3, r7, r3
 800bb54:	781b      	ldrb	r3, [r3, #0]
}
 800bb56:	0018      	movs	r0, r3
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	b005      	add	sp, #20
 800bb5c:	bd90      	pop	{r4, r7, pc}

0800bb5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	000a      	movs	r2, r1
 800bb68:	1cfb      	adds	r3, r7, #3
 800bb6a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bb6c:	1cfb      	adds	r3, r7, #3
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	b25b      	sxtb	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	da10      	bge.n	800bb98 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb76:	1cfb      	adds	r3, r7, #3
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2207      	movs	r2, #7
 800bb7c:	401a      	ands	r2, r3
 800bb7e:	0013      	movs	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	189b      	adds	r3, r3, r2
 800bb84:	00db      	lsls	r3, r3, #3
 800bb86:	3310      	adds	r3, #16
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	18d3      	adds	r3, r2, r3
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2201      	movs	r2, #1
 800bb94:	705a      	strb	r2, [r3, #1]
 800bb96:	e010      	b.n	800bbba <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb98:	1cfb      	adds	r3, r7, #3
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2207      	movs	r2, #7
 800bb9e:	401a      	ands	r2, r3
 800bba0:	0013      	movs	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	189b      	adds	r3, r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	3351      	adds	r3, #81	; 0x51
 800bbaa:	33ff      	adds	r3, #255	; 0xff
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	18d3      	adds	r3, r2, r3
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800bbba:	1cfb      	adds	r3, r7, #3
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	2207      	movs	r2, #7
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	23a5      	movs	r3, #165	; 0xa5
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	5cd3      	ldrb	r3, [r2, r3]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d101      	bne.n	800bbd8 <HAL_PCD_EP_Close+0x7a>
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	e011      	b.n	800bbfc <HAL_PCD_EP_Close+0x9e>
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	23a5      	movs	r3, #165	; 0xa5
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	2101      	movs	r1, #1
 800bbe0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	0011      	movs	r1, r2
 800bbea:	0018      	movs	r0, r3
 800bbec:	f004 fb9a 	bl	8010324 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	23a5      	movs	r3, #165	; 0xa5
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	0018      	movs	r0, r3
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	b004      	add	sp, #16
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	607a      	str	r2, [r7, #4]
 800bc0e:	603b      	str	r3, [r7, #0]
 800bc10:	200b      	movs	r0, #11
 800bc12:	183b      	adds	r3, r7, r0
 800bc14:	1c0a      	adds	r2, r1, #0
 800bc16:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bc18:	0001      	movs	r1, r0
 800bc1a:	187b      	adds	r3, r7, r1
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	2207      	movs	r2, #7
 800bc20:	401a      	ands	r2, r3
 800bc22:	0013      	movs	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	189b      	adds	r3, r3, r2
 800bc28:	00db      	lsls	r3, r3, #3
 800bc2a:	3351      	adds	r3, #81	; 0x51
 800bc2c:	33ff      	adds	r3, #255	; 0xff
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	18d3      	adds	r3, r2, r3
 800bc32:	3304      	adds	r3, #4
 800bc34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2200      	movs	r2, #0
 800bc46:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bc4e:	187b      	adds	r3, r7, r1
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	2207      	movs	r2, #7
 800bc54:	4013      	ands	r3, r2
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	0011      	movs	r1, r2
 800bc64:	0018      	movs	r0, r3
 800bc66:	f004 fcc3 	bl	80105f0 <USB_EPStartXfer>

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	0018      	movs	r0, r3
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	b006      	add	sp, #24
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	000a      	movs	r2, r1
 800bc7e:	1cfb      	adds	r3, r7, #3
 800bc80:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bc82:	1cfb      	adds	r3, r7, #3
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2207      	movs	r2, #7
 800bc88:	401a      	ands	r2, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	23b8      	movs	r3, #184	; 0xb8
 800bc8e:	0059      	lsls	r1, r3, #1
 800bc90:	0013      	movs	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	189b      	adds	r3, r3, r2
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	18c3      	adds	r3, r0, r3
 800bc9a:	185b      	adds	r3, r3, r1
 800bc9c:	681b      	ldr	r3, [r3, #0]
}
 800bc9e:	0018      	movs	r0, r3
 800bca0:	46bd      	mov	sp, r7
 800bca2:	b002      	add	sp, #8
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b086      	sub	sp, #24
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	603b      	str	r3, [r7, #0]
 800bcb2:	200b      	movs	r0, #11
 800bcb4:	183b      	adds	r3, r7, r0
 800bcb6:	1c0a      	adds	r2, r1, #0
 800bcb8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bcba:	183b      	adds	r3, r7, r0
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2207      	movs	r2, #7
 800bcc0:	401a      	ands	r2, r3
 800bcc2:	0013      	movs	r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	189b      	adds	r3, r3, r2
 800bcc8:	00db      	lsls	r3, r3, #3
 800bcca:	3310      	adds	r3, #16
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	18d3      	adds	r3, r2, r3
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	2224      	movs	r2, #36	; 0x24
 800bce4:	2101      	movs	r1, #1
 800bce6:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	683a      	ldr	r2, [r7, #0]
 800bcec:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bcfa:	183b      	adds	r3, r7, r0
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2207      	movs	r2, #7
 800bd00:	4013      	ands	r3, r2
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	0011      	movs	r1, r2
 800bd10:	0018      	movs	r0, r3
 800bd12:	f004 fc6d 	bl	80105f0 <USB_EPStartXfer>

  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	0018      	movs	r0, r3
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	b006      	add	sp, #24
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	000a      	movs	r2, r1
 800bd2a:	1cfb      	adds	r3, r7, #3
 800bd2c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bd2e:	1cfb      	adds	r3, r7, #3
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	2207      	movs	r2, #7
 800bd34:	4013      	ands	r3, r2
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	7912      	ldrb	r2, [r2, #4]
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d901      	bls.n	800bd42 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e048      	b.n	800bdd4 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bd42:	1cfb      	adds	r3, r7, #3
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	b25b      	sxtb	r3, r3
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	da10      	bge.n	800bd6e <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd4c:	1cfb      	adds	r3, r7, #3
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2207      	movs	r2, #7
 800bd52:	401a      	ands	r2, r3
 800bd54:	0013      	movs	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	189b      	adds	r3, r3, r2
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	3310      	adds	r3, #16
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	18d3      	adds	r3, r2, r3
 800bd62:	3304      	adds	r3, #4
 800bd64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	705a      	strb	r2, [r3, #1]
 800bd6c:	e00e      	b.n	800bd8c <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bd6e:	1cfb      	adds	r3, r7, #3
 800bd70:	781a      	ldrb	r2, [r3, #0]
 800bd72:	0013      	movs	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	189b      	adds	r3, r3, r2
 800bd78:	00db      	lsls	r3, r3, #3
 800bd7a:	3351      	adds	r3, #81	; 0x51
 800bd7c:	33ff      	adds	r3, #255	; 0xff
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	18d3      	adds	r3, r2, r3
 800bd82:	3304      	adds	r3, #4
 800bd84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bd92:	1cfb      	adds	r3, r7, #3
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2207      	movs	r2, #7
 800bd98:	4013      	ands	r3, r2
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	23a5      	movs	r3, #165	; 0xa5
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	5cd3      	ldrb	r3, [r2, r3]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d101      	bne.n	800bdb0 <HAL_PCD_EP_SetStall+0x90>
 800bdac:	2302      	movs	r3, #2
 800bdae:	e011      	b.n	800bdd4 <HAL_PCD_EP_SetStall+0xb4>
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	23a5      	movs	r3, #165	; 0xa5
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	0011      	movs	r1, r2
 800bdc2:	0018      	movs	r0, r3
 800bdc4:	f005 fc2a 	bl	801161c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	23a5      	movs	r3, #165	; 0xa5
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	2100      	movs	r1, #0
 800bdd0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	b004      	add	sp, #16
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	000a      	movs	r2, r1
 800bde6:	1cfb      	adds	r3, r7, #3
 800bde8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bdea:	1cfb      	adds	r3, r7, #3
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	220f      	movs	r2, #15
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	7912      	ldrb	r2, [r2, #4]
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d901      	bls.n	800bdfe <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e04a      	b.n	800be94 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bdfe:	1cfb      	adds	r3, r7, #3
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	b25b      	sxtb	r3, r3
 800be04:	2b00      	cmp	r3, #0
 800be06:	da10      	bge.n	800be2a <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be08:	1cfb      	adds	r3, r7, #3
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	2207      	movs	r2, #7
 800be0e:	401a      	ands	r2, r3
 800be10:	0013      	movs	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	189b      	adds	r3, r3, r2
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	3310      	adds	r3, #16
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	18d3      	adds	r3, r2, r3
 800be1e:	3304      	adds	r3, #4
 800be20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2201      	movs	r2, #1
 800be26:	705a      	strb	r2, [r3, #1]
 800be28:	e010      	b.n	800be4c <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be2a:	1cfb      	adds	r3, r7, #3
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	2207      	movs	r2, #7
 800be30:	401a      	ands	r2, r3
 800be32:	0013      	movs	r3, r2
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	189b      	adds	r3, r3, r2
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	3351      	adds	r3, #81	; 0x51
 800be3c:	33ff      	adds	r3, #255	; 0xff
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	18d3      	adds	r3, r2, r3
 800be42:	3304      	adds	r3, #4
 800be44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2200      	movs	r2, #0
 800be4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800be52:	1cfb      	adds	r3, r7, #3
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2207      	movs	r2, #7
 800be58:	4013      	ands	r3, r2
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	23a5      	movs	r3, #165	; 0xa5
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	5cd3      	ldrb	r3, [r2, r3]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d101      	bne.n	800be70 <HAL_PCD_EP_ClrStall+0x94>
 800be6c:	2302      	movs	r3, #2
 800be6e:	e011      	b.n	800be94 <HAL_PCD_EP_ClrStall+0xb8>
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	23a5      	movs	r3, #165	; 0xa5
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	2101      	movs	r1, #1
 800be78:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	0011      	movs	r1, r2
 800be82:	0018      	movs	r0, r3
 800be84:	f005 fc0c 	bl	80116a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	23a5      	movs	r3, #165	; 0xa5
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	2100      	movs	r1, #0
 800be90:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	0018      	movs	r0, r3
 800be96:	46bd      	mov	sp, r7
 800be98:	b004      	add	sp, #16
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800be9c:	b5b0      	push	{r4, r5, r7, lr}
 800be9e:	b08e      	sub	sp, #56	; 0x38
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bea4:	e362      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beac:	2022      	movs	r0, #34	; 0x22
 800beae:	183b      	adds	r3, r7, r0
 800beb0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800beb2:	183b      	adds	r3, r7, r0
 800beb4:	881b      	ldrh	r3, [r3, #0]
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	2421      	movs	r4, #33	; 0x21
 800beba:	193b      	adds	r3, r7, r4
 800bebc:	210f      	movs	r1, #15
 800bebe:	400a      	ands	r2, r1
 800bec0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800bec2:	193b      	adds	r3, r7, r4
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d000      	beq.n	800becc <PCD_EP_ISR_Handler+0x30>
 800beca:	e12d      	b.n	800c128 <PCD_EP_ISR_Handler+0x28c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800becc:	183b      	adds	r3, r7, r0
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	2210      	movs	r2, #16
 800bed2:	4013      	ands	r3, r2
 800bed4:	d140      	bne.n	800bf58 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4ac6      	ldr	r2, [pc, #792]	; (800c1f8 <PCD_EP_ISR_Handler+0x35c>)
 800bede:	4013      	ands	r3, r2
 800bee0:	60bb      	str	r3, [r7, #8]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	2180      	movs	r1, #128	; 0x80
 800beea:	0209      	lsls	r1, r1, #8
 800beec:	430a      	orrs	r2, r1
 800beee:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3314      	adds	r3, #20
 800bef4:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	4abf      	ldr	r2, [pc, #764]	; (800c1fc <PCD_EP_ISR_Handler+0x360>)
 800befe:	4694      	mov	ip, r2
 800bf00:	4463      	add	r3, ip
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	0c1b      	lsrs	r3, r3, #16
 800bf06:	059b      	lsls	r3, r3, #22
 800bf08:	0d9a      	lsrs	r2, r3, #22
 800bf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800bf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf10:	695a      	ldr	r2, [r3, #20]
 800bf12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	18d2      	adds	r2, r2, r3
 800bf18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2100      	movs	r1, #0
 800bf20:	0018      	movs	r0, r3
 800bf22:	f010 fe9d 	bl	801cc60 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	7c5b      	ldrb	r3, [r3, #17]
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d100      	bne.n	800bf32 <PCD_EP_ISR_Handler+0x96>
 800bf30:	e31c      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
 800bf32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d000      	beq.n	800bf3c <PCD_EP_ISR_Handler+0xa0>
 800bf3a:	e317      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	7c5b      	ldrb	r3, [r3, #17]
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	2280      	movs	r2, #128	; 0x80
 800bf44:	4252      	negs	r2, r2
 800bf46:	4313      	orrs	r3, r2
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	745a      	strb	r2, [r3, #17]
 800bf56:	e309      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3355      	adds	r3, #85	; 0x55
 800bf5c:	33ff      	adds	r3, #255	; 0xff
 800bf5e:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	2132      	movs	r1, #50	; 0x32
 800bf68:	187b      	adds	r3, r7, r1
 800bf6a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800bf6c:	187b      	adds	r3, r7, r1
 800bf6e:	881a      	ldrh	r2, [r3, #0]
 800bf70:	2380      	movs	r3, #128	; 0x80
 800bf72:	011b      	lsls	r3, r3, #4
 800bf74:	4013      	ands	r3, r2
 800bf76:	d02a      	beq.n	800bfce <PCD_EP_ISR_Handler+0x132>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	0019      	movs	r1, r3
 800bf84:	0010      	movs	r0, r2
 800bf86:	f7ff fab3 	bl	800b4f0 <PCD_GET_EP_RX_CNT>
 800bf8a:	0003      	movs	r3, r0
 800bf8c:	001a      	movs	r2, r3
 800bf8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf90:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6818      	ldr	r0, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	22a7      	movs	r2, #167	; 0xa7
 800bf9a:	0092      	lsls	r2, r2, #2
 800bf9c:	1899      	adds	r1, r3, r2
 800bf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800bfa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	f005 fcb2 	bl	8011910 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a93      	ldr	r2, [pc, #588]	; (800c200 <PCD_EP_ISR_Handler+0x364>)
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	60fb      	str	r3, [r7, #12]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	2180      	movs	r1, #128	; 0x80
 800bfc0:	430a      	orrs	r2, r1
 800bfc2:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	f010 fe14 	bl	801cbf4 <HAL_PCD_SetupStageCallback>
 800bfcc:	e2ce      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800bfce:	2332      	movs	r3, #50	; 0x32
 800bfd0:	18fb      	adds	r3, r7, r3
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	5e9b      	ldrsh	r3, [r3, r2]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	db00      	blt.n	800bfdc <PCD_EP_ISR_Handler+0x140>
 800bfda:	e2c7      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a87      	ldr	r2, [pc, #540]	; (800c200 <PCD_EP_ISR_Handler+0x364>)
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfee:	2180      	movs	r1, #128	; 0x80
 800bff0:	430a      	orrs	r2, r1
 800bff2:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	0019      	movs	r1, r3
 800c000:	0010      	movs	r0, r2
 800c002:	f7ff fa75 	bl	800b4f0 <PCD_GET_EP_RX_CNT>
 800c006:	0003      	movs	r3, r0
 800c008:	001a      	movs	r2, r3
 800c00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800c00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d01a      	beq.n	800c04c <PCD_EP_ISR_Handler+0x1b0>
 800c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d016      	beq.n	800c04c <PCD_EP_ISR_Handler+0x1b0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c024:	6959      	ldr	r1, [r3, #20]
 800c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c028:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800c02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c02c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c02e:	b29b      	uxth	r3, r3
 800c030:	f005 fc6e 	bl	8011910 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800c034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c036:	695a      	ldr	r2, [r3, #20]
 800c038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03a:	69db      	ldr	r3, [r3, #28]
 800c03c:	18d2      	adds	r2, r2, r3
 800c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c040:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2100      	movs	r1, #0
 800c046:	0018      	movs	r0, r3
 800c048:	f010 fde9 	bl	801cc1e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	2132      	movs	r1, #50	; 0x32
 800c054:	187b      	adds	r3, r7, r1
 800c056:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800c058:	187b      	adds	r3, r7, r1
 800c05a:	881a      	ldrh	r2, [r3, #0]
 800c05c:	2380      	movs	r3, #128	; 0x80
 800c05e:	011b      	lsls	r3, r3, #4
 800c060:	4013      	ands	r3, r2
 800c062:	d000      	beq.n	800c066 <PCD_EP_ISR_Handler+0x1ca>
 800c064:	e282      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
 800c066:	187b      	adds	r3, r7, r1
 800c068:	881a      	ldrh	r2, [r3, #0]
 800c06a:	23c0      	movs	r3, #192	; 0xc0
 800c06c:	019b      	lsls	r3, r3, #6
 800c06e:	401a      	ands	r2, r3
 800c070:	23c0      	movs	r3, #192	; 0xc0
 800c072:	019b      	lsls	r3, r3, #6
 800c074:	429a      	cmp	r2, r3
 800c076:	d100      	bne.n	800c07a <PCD_EP_ISR_Handler+0x1de>
 800c078:	e278      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c07a:	4b60      	ldr	r3, [pc, #384]	; (800c1fc <PCD_EP_ISR_Handler+0x360>)
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	4b5f      	ldr	r3, [pc, #380]	; (800c1fc <PCD_EP_ISR_Handler+0x360>)
 800c080:	0192      	lsls	r2, r2, #6
 800c082:	0992      	lsrs	r2, r2, #6
 800c084:	605a      	str	r2, [r3, #4]
 800c086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	2b3e      	cmp	r3, #62	; 0x3e
 800c08c:	d916      	bls.n	800c0bc <PCD_EP_ISR_Handler+0x220>
 800c08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	095b      	lsrs	r3, r3, #5
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	221f      	movs	r2, #31
 800c09c:	4013      	ands	r3, r2
 800c09e:	d102      	bne.n	800c0a6 <PCD_EP_ISR_Handler+0x20a>
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	617b      	str	r3, [r7, #20]
 800c0a6:	4b55      	ldr	r3, [pc, #340]	; (800c1fc <PCD_EP_ISR_Handler+0x360>)
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	069b      	lsls	r3, r3, #26
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	4b52      	ldr	r3, [pc, #328]	; (800c1fc <PCD_EP_ISR_Handler+0x360>)
 800c0b2:	2180      	movs	r1, #128	; 0x80
 800c0b4:	0609      	lsls	r1, r1, #24
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	605a      	str	r2, [r3, #4]
 800c0ba:	e01e      	b.n	800c0fa <PCD_EP_ISR_Handler+0x25e>
 800c0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d107      	bne.n	800c0d4 <PCD_EP_ISR_Handler+0x238>
 800c0c4:	4b4d      	ldr	r3, [pc, #308]	; (800c1fc <PCD_EP_ISR_Handler+0x360>)
 800c0c6:	685a      	ldr	r2, [r3, #4]
 800c0c8:	4b4c      	ldr	r3, [pc, #304]	; (800c1fc <PCD_EP_ISR_Handler+0x360>)
 800c0ca:	2180      	movs	r1, #128	; 0x80
 800c0cc:	0609      	lsls	r1, r1, #24
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	605a      	str	r2, [r3, #4]
 800c0d2:	e012      	b.n	800c0fa <PCD_EP_ISR_Handler+0x25e>
 800c0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	085b      	lsrs	r3, r3, #1
 800c0da:	617b      	str	r3, [r7, #20]
 800c0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	d002      	beq.n	800c0ec <PCD_EP_ISR_Handler+0x250>
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	617b      	str	r3, [r7, #20]
 800c0ec:	4b43      	ldr	r3, [pc, #268]	; (800c1fc <PCD_EP_ISR_Handler+0x360>)
 800c0ee:	6859      	ldr	r1, [r3, #4]
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	069a      	lsls	r2, r3, #26
 800c0f4:	4b41      	ldr	r3, [pc, #260]	; (800c1fc <PCD_EP_ISR_Handler+0x360>)
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a40      	ldr	r2, [pc, #256]	; (800c204 <PCD_EP_ISR_Handler+0x368>)
 800c102:	4013      	ands	r3, r2
 800c104:	613b      	str	r3, [r7, #16]
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	2280      	movs	r2, #128	; 0x80
 800c10a:	0152      	lsls	r2, r2, #5
 800c10c:	4053      	eors	r3, r2
 800c10e:	613b      	str	r3, [r7, #16]
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	2280      	movs	r2, #128	; 0x80
 800c114:	0192      	lsls	r2, r2, #6
 800c116:	4053      	eors	r3, r2
 800c118:	613b      	str	r3, [r7, #16]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	4939      	ldr	r1, [pc, #228]	; (800c208 <PCD_EP_ISR_Handler+0x36c>)
 800c122:	430a      	orrs	r2, r1
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	e221      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	001a      	movs	r2, r3
 800c12e:	2121      	movs	r1, #33	; 0x21
 800c130:	187b      	adds	r3, r7, r1
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	18d3      	adds	r3, r2, r3
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	2032      	movs	r0, #50	; 0x32
 800c13c:	183b      	adds	r3, r7, r0
 800c13e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800c140:	183b      	adds	r3, r7, r0
 800c142:	2200      	movs	r2, #0
 800c144:	5e9b      	ldrsh	r3, [r3, r2]
 800c146:	2b00      	cmp	r3, #0
 800c148:	db00      	blt.n	800c14c <PCD_EP_ISR_Handler+0x2b0>
 800c14a:	e0e2      	b.n	800c312 <PCD_EP_ISR_Handler+0x476>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	001a      	movs	r2, r3
 800c152:	187b      	adds	r3, r7, r1
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	18d3      	adds	r3, r2, r3
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a28      	ldr	r2, [pc, #160]	; (800c200 <PCD_EP_ISR_Handler+0x364>)
 800c15e:	4013      	ands	r3, r2
 800c160:	61fb      	str	r3, [r7, #28]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	001a      	movs	r2, r3
 800c168:	0008      	movs	r0, r1
 800c16a:	187b      	adds	r3, r7, r1
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	18d3      	adds	r3, r2, r3
 800c172:	69fa      	ldr	r2, [r7, #28]
 800c174:	2180      	movs	r1, #128	; 0x80
 800c176:	430a      	orrs	r2, r1
 800c178:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800c17a:	183b      	adds	r3, r7, r0
 800c17c:	781a      	ldrb	r2, [r3, #0]
 800c17e:	0013      	movs	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	189b      	adds	r3, r3, r2
 800c184:	00db      	lsls	r3, r3, #3
 800c186:	3351      	adds	r3, #81	; 0x51
 800c188:	33ff      	adds	r3, #255	; 0xff
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	18d3      	adds	r3, r2, r3
 800c18e:	3304      	adds	r3, #4
 800c190:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800c192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c194:	7b1b      	ldrb	r3, [r3, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d11d      	bne.n	800c1d6 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	2524      	movs	r5, #36	; 0x24
 800c1a6:	197c      	adds	r4, r7, r5
 800c1a8:	0019      	movs	r1, r3
 800c1aa:	0010      	movs	r0, r2
 800c1ac:	f7ff f9a0 	bl	800b4f0 <PCD_GET_EP_RX_CNT>
 800c1b0:	0003      	movs	r3, r0
 800c1b2:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800c1b4:	002c      	movs	r4, r5
 800c1b6:	193b      	adds	r3, r7, r4
 800c1b8:	881b      	ldrh	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d100      	bne.n	800c1c0 <PCD_EP_ISR_Handler+0x324>
 800c1be:	e080      	b.n	800c2c2 <PCD_EP_ISR_Handler+0x426>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c6:	6959      	ldr	r1, [r3, #20]
 800c1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ca:	88da      	ldrh	r2, [r3, #6]
 800c1cc:	193b      	adds	r3, r7, r4
 800c1ce:	881b      	ldrh	r3, [r3, #0]
 800c1d0:	f005 fb9e 	bl	8011910 <USB_ReadPMA>
 800c1d4:	e075      	b.n	800c2c2 <PCD_EP_ISR_Handler+0x426>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800c1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d8:	78db      	ldrb	r3, [r3, #3]
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d116      	bne.n	800c20c <PCD_EP_ISR_Handler+0x370>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800c1de:	2324      	movs	r3, #36	; 0x24
 800c1e0:	18fc      	adds	r4, r7, r3
 800c1e2:	2332      	movs	r3, #50	; 0x32
 800c1e4:	18fb      	adds	r3, r7, r3
 800c1e6:	881a      	ldrh	r2, [r3, #0]
 800c1e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	0018      	movs	r0, r3
 800c1ee:	f000 f9cb 	bl	800c588 <HAL_PCD_EP_DB_Receive>
 800c1f2:	0003      	movs	r3, r0
 800c1f4:	8023      	strh	r3, [r4, #0]
 800c1f6:	e064      	b.n	800c2c2 <PCD_EP_ISR_Handler+0x426>
 800c1f8:	07ff8f0f 	.word	0x07ff8f0f
 800c1fc:	40009800 	.word	0x40009800
 800c200:	07ff0f8f 	.word	0x07ff0f8f
 800c204:	07ffbf8f 	.word	0x07ffbf8f
 800c208:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	001a      	movs	r2, r3
 800c212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	18d3      	adds	r3, r2, r3
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4acb      	ldr	r2, [pc, #812]	; (800c54c <PCD_EP_ISR_Handler+0x6b0>)
 800c21e:	4013      	ands	r3, r2
 800c220:	61bb      	str	r3, [r7, #24]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	001a      	movs	r2, r3
 800c228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	18d3      	adds	r3, r2, r3
 800c230:	69ba      	ldr	r2, [r7, #24]
 800c232:	49c7      	ldr	r1, [pc, #796]	; (800c550 <PCD_EP_ISR_Handler+0x6b4>)
 800c234:	430a      	orrs	r2, r1
 800c236:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	001a      	movs	r2, r3
 800c23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	18d3      	adds	r3, r2, r3
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	2380      	movs	r3, #128	; 0x80
 800c24a:	01db      	lsls	r3, r3, #7
 800c24c:	4013      	ands	r3, r2
 800c24e:	d01c      	beq.n	800c28a <PCD_EP_ISR_Handler+0x3ee>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	2524      	movs	r5, #36	; 0x24
 800c25c:	197c      	adds	r4, r7, r5
 800c25e:	0019      	movs	r1, r3
 800c260:	0010      	movs	r0, r2
 800c262:	f7ff f967 	bl	800b534 <PCD_GET_EP_DBUF0_CNT>
 800c266:	0003      	movs	r3, r0
 800c268:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800c26a:	002c      	movs	r4, r5
 800c26c:	193b      	adds	r3, r7, r4
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d026      	beq.n	800c2c2 <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6818      	ldr	r0, [r3, #0]
 800c278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27a:	6959      	ldr	r1, [r3, #20]
 800c27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27e:	891a      	ldrh	r2, [r3, #8]
 800c280:	193b      	adds	r3, r7, r4
 800c282:	881b      	ldrh	r3, [r3, #0]
 800c284:	f005 fb44 	bl	8011910 <USB_ReadPMA>
 800c288:	e01b      	b.n	800c2c2 <PCD_EP_ISR_Handler+0x426>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	b29b      	uxth	r3, r3
 800c294:	2524      	movs	r5, #36	; 0x24
 800c296:	197c      	adds	r4, r7, r5
 800c298:	0019      	movs	r1, r3
 800c29a:	0010      	movs	r0, r2
 800c29c:	f7ff f96c 	bl	800b578 <PCD_GET_EP_DBUF1_CNT>
 800c2a0:	0003      	movs	r3, r0
 800c2a2:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800c2a4:	002c      	movs	r4, r5
 800c2a6:	193b      	adds	r3, r7, r4
 800c2a8:	881b      	ldrh	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d009      	beq.n	800c2c2 <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b4:	6959      	ldr	r1, [r3, #20]
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b8:	895a      	ldrh	r2, [r3, #10]
 800c2ba:	193b      	adds	r3, r7, r4
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	f005 fb27 	bl	8011910 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800c2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c4:	69da      	ldr	r2, [r3, #28]
 800c2c6:	2124      	movs	r1, #36	; 0x24
 800c2c8:	187b      	adds	r3, r7, r1
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	18d2      	adds	r2, r2, r3
 800c2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800c2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d4:	695a      	ldr	r2, [r3, #20]
 800c2d6:	187b      	adds	r3, r7, r1
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	18d2      	adds	r2, r2, r3
 800c2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2de:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800c2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e2:	699b      	ldr	r3, [r3, #24]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d005      	beq.n	800c2f4 <PCD_EP_ISR_Handler+0x458>
 800c2e8:	187b      	adds	r3, r7, r1
 800c2ea:	881a      	ldrh	r2, [r3, #0]
 800c2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d207      	bcs.n	800c304 <PCD_EP_ISR_Handler+0x468>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800c2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f6:	781a      	ldrb	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	0011      	movs	r1, r2
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	f010 fc8e 	bl	801cc1e <HAL_PCD_DataOutStageCallback>
 800c302:	e006      	b.n	800c312 <PCD_EP_ISR_Handler+0x476>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c30a:	0011      	movs	r1, r2
 800c30c:	0018      	movs	r0, r3
 800c30e:	f004 f96f 	bl	80105f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800c312:	2032      	movs	r0, #50	; 0x32
 800c314:	183b      	adds	r3, r7, r0
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	2280      	movs	r2, #128	; 0x80
 800c31a:	4013      	ands	r3, r2
 800c31c:	d100      	bne.n	800c320 <PCD_EP_ISR_Handler+0x484>
 800c31e:	e125      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
      {
        ep = &hpcd->IN_ep[epindex];
 800c320:	2121      	movs	r1, #33	; 0x21
 800c322:	187b      	adds	r3, r7, r1
 800c324:	781a      	ldrb	r2, [r3, #0]
 800c326:	0013      	movs	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	189b      	adds	r3, r3, r2
 800c32c:	00db      	lsls	r3, r3, #3
 800c32e:	3310      	adds	r3, #16
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	18d3      	adds	r3, r2, r3
 800c334:	3304      	adds	r3, #4
 800c336:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	001a      	movs	r2, r3
 800c33e:	187b      	adds	r3, r7, r1
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	18d3      	adds	r3, r2, r3
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a82      	ldr	r2, [pc, #520]	; (800c554 <PCD_EP_ISR_Handler+0x6b8>)
 800c34a:	4013      	ands	r3, r2
 800c34c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	001a      	movs	r2, r3
 800c354:	187b      	adds	r3, r7, r1
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	18d3      	adds	r3, r2, r3
 800c35c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c35e:	2180      	movs	r1, #128	; 0x80
 800c360:	0209      	lsls	r1, r1, #8
 800c362:	430a      	orrs	r2, r1
 800c364:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800c366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c368:	78db      	ldrb	r3, [r3, #3]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d000      	beq.n	800c370 <PCD_EP_ISR_Handler+0x4d4>
 800c36e:	e0a3      	b.n	800c4b8 <PCD_EP_ISR_Handler+0x61c>
        {
          ep->xfer_len = 0U;
 800c370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c372:	2200      	movs	r2, #0
 800c374:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800c376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c378:	7b1b      	ldrb	r3, [r3, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d100      	bne.n	800c380 <PCD_EP_ISR_Handler+0x4e4>
 800c37e:	e093      	b.n	800c4a8 <PCD_EP_ISR_Handler+0x60c>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c380:	183b      	adds	r3, r7, r0
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	2240      	movs	r2, #64	; 0x40
 800c386:	4013      	ands	r3, r2
 800c388:	d047      	beq.n	800c41a <PCD_EP_ISR_Handler+0x57e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38c:	785b      	ldrb	r3, [r3, #1]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d121      	bne.n	800c3d6 <PCD_EP_ISR_Handler+0x53a>
 800c392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	4a6f      	ldr	r2, [pc, #444]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c39a:	4694      	mov	ip, r2
 800c39c:	4463      	add	r3, ip
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	496c      	ldr	r1, [pc, #432]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c3a8:	468c      	mov	ip, r1
 800c3aa:	4463      	add	r3, ip
 800c3ac:	0192      	lsls	r2, r2, #6
 800c3ae:	0992      	lsrs	r2, r2, #6
 800c3b0:	601a      	str	r2, [r3, #0]
 800c3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	4a67      	ldr	r2, [pc, #412]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c3ba:	4694      	mov	ip, r2
 800c3bc:	4463      	add	r3, ip
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	00db      	lsls	r3, r3, #3
 800c3c6:	4964      	ldr	r1, [pc, #400]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c3c8:	468c      	mov	ip, r1
 800c3ca:	4463      	add	r3, ip
 800c3cc:	2180      	movs	r1, #128	; 0x80
 800c3ce:	0609      	lsls	r1, r1, #24
 800c3d0:	430a      	orrs	r2, r1
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	e068      	b.n	800c4a8 <PCD_EP_ISR_Handler+0x60c>
 800c3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d8:	785b      	ldrb	r3, [r3, #1]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d164      	bne.n	800c4a8 <PCD_EP_ISR_Handler+0x60c>
 800c3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	4a5c      	ldr	r2, [pc, #368]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c3e6:	4694      	mov	ip, r2
 800c3e8:	4463      	add	r3, ip
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	4959      	ldr	r1, [pc, #356]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c3f4:	468c      	mov	ip, r1
 800c3f6:	4463      	add	r3, ip
 800c3f8:	0412      	lsls	r2, r2, #16
 800c3fa:	0c12      	lsrs	r2, r2, #16
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	4a54      	ldr	r2, [pc, #336]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c406:	189a      	adds	r2, r3, r2
 800c408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	00db      	lsls	r3, r3, #3
 800c40e:	4952      	ldr	r1, [pc, #328]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c410:	468c      	mov	ip, r1
 800c412:	4463      	add	r3, ip
 800c414:	6812      	ldr	r2, [r2, #0]
 800c416:	601a      	str	r2, [r3, #0]
 800c418:	e046      	b.n	800c4a8 <PCD_EP_ISR_Handler+0x60c>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41c:	785b      	ldrb	r3, [r3, #1]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d121      	bne.n	800c466 <PCD_EP_ISR_Handler+0x5ca>
 800c422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	4a4b      	ldr	r2, [pc, #300]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c42a:	4694      	mov	ip, r2
 800c42c:	4463      	add	r3, ip
 800c42e:	685a      	ldr	r2, [r3, #4]
 800c430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	4948      	ldr	r1, [pc, #288]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c438:	468c      	mov	ip, r1
 800c43a:	4463      	add	r3, ip
 800c43c:	0192      	lsls	r2, r2, #6
 800c43e:	0992      	lsrs	r2, r2, #6
 800c440:	605a      	str	r2, [r3, #4]
 800c442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	4a43      	ldr	r2, [pc, #268]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c44a:	4694      	mov	ip, r2
 800c44c:	4463      	add	r3, ip
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	4940      	ldr	r1, [pc, #256]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c458:	468c      	mov	ip, r1
 800c45a:	4463      	add	r3, ip
 800c45c:	2180      	movs	r1, #128	; 0x80
 800c45e:	0609      	lsls	r1, r1, #24
 800c460:	430a      	orrs	r2, r1
 800c462:	605a      	str	r2, [r3, #4]
 800c464:	e020      	b.n	800c4a8 <PCD_EP_ISR_Handler+0x60c>
 800c466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c468:	785b      	ldrb	r3, [r3, #1]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d11c      	bne.n	800c4a8 <PCD_EP_ISR_Handler+0x60c>
 800c46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	4a38      	ldr	r2, [pc, #224]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c476:	4694      	mov	ip, r2
 800c478:	4463      	add	r3, ip
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	00db      	lsls	r3, r3, #3
 800c482:	4935      	ldr	r1, [pc, #212]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c484:	468c      	mov	ip, r1
 800c486:	4463      	add	r3, ip
 800c488:	0412      	lsls	r2, r2, #16
 800c48a:	0c12      	lsrs	r2, r2, #16
 800c48c:	605a      	str	r2, [r3, #4]
 800c48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	4a30      	ldr	r2, [pc, #192]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c496:	189a      	adds	r2, r3, r2
 800c498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	00db      	lsls	r3, r3, #3
 800c49e:	492e      	ldr	r1, [pc, #184]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c4a0:	468c      	mov	ip, r1
 800c4a2:	4463      	add	r3, ip
 800c4a4:	6852      	ldr	r2, [r2, #4]
 800c4a6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4aa:	781a      	ldrb	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	0011      	movs	r1, r2
 800c4b0:	0018      	movs	r0, r3
 800c4b2:	f010 fbd5 	bl	801cc60 <HAL_PCD_DataInStageCallback>
 800c4b6:	e059      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800c4b8:	2332      	movs	r3, #50	; 0x32
 800c4ba:	18fb      	adds	r3, r7, r3
 800c4bc:	881a      	ldrh	r2, [r3, #0]
 800c4be:	2380      	movs	r3, #128	; 0x80
 800c4c0:	005b      	lsls	r3, r3, #1
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	d14a      	bne.n	800c55c <PCD_EP_ISR_Handler+0x6c0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	4a22      	ldr	r2, [pc, #136]	; (800c558 <PCD_EP_ISR_Handler+0x6bc>)
 800c4ce:	4694      	mov	ip, r2
 800c4d0:	4463      	add	r3, ip
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	0c1b      	lsrs	r3, r3, #16
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	2126      	movs	r1, #38	; 0x26
 800c4da:	187b      	adds	r3, r7, r1
 800c4dc:	0592      	lsls	r2, r2, #22
 800c4de:	0d92      	lsrs	r2, r2, #22
 800c4e0:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	699a      	ldr	r2, [r3, #24]
 800c4e6:	187b      	adds	r3, r7, r1
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d907      	bls.n	800c4fe <PCD_EP_ISR_Handler+0x662>
            {
              ep->xfer_len -= TxPctSize;
 800c4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f0:	699a      	ldr	r2, [r3, #24]
 800c4f2:	187b      	adds	r3, r7, r1
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	1ad2      	subs	r2, r2, r3
 800c4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fa:	619a      	str	r2, [r3, #24]
 800c4fc:	e002      	b.n	800c504 <PCD_EP_ISR_Handler+0x668>
            }
            else
            {
              ep->xfer_len = 0U;
 800c4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c500:	2200      	movs	r2, #0
 800c502:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800c504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d107      	bne.n	800c51c <PCD_EP_ISR_Handler+0x680>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50e:	781a      	ldrb	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	0011      	movs	r1, r2
 800c514:	0018      	movs	r0, r3
 800c516:	f010 fba3 	bl	801cc60 <HAL_PCD_DataInStageCallback>
 800c51a:	e027      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800c51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c51e:	695a      	ldr	r2, [r3, #20]
 800c520:	2126      	movs	r1, #38	; 0x26
 800c522:	187b      	adds	r3, r7, r1
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	18d2      	adds	r2, r2, r3
 800c528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c52a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800c52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c52e:	69da      	ldr	r2, [r3, #28]
 800c530:	187b      	adds	r3, r7, r1
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	18d2      	adds	r2, r2, r3
 800c536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c538:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c540:	0011      	movs	r1, r2
 800c542:	0018      	movs	r0, r3
 800c544:	f004 f854 	bl	80105f0 <USB_EPStartXfer>
 800c548:	e010      	b.n	800c56c <PCD_EP_ISR_Handler+0x6d0>
 800c54a:	46c0      	nop			; (mov r8, r8)
 800c54c:	07ff8f8f 	.word	0x07ff8f8f
 800c550:	000080c0 	.word	0x000080c0
 800c554:	07ff8f0f 	.word	0x07ff8f0f
 800c558:	40009800 	.word	0x40009800
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800c55c:	2332      	movs	r3, #50	; 0x32
 800c55e:	18fb      	adds	r3, r7, r3
 800c560:	881a      	ldrh	r2, [r3, #0]
 800c562:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	0018      	movs	r0, r3
 800c568:	f000 f8fa 	bl	800c760 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c572:	2380      	movs	r3, #128	; 0x80
 800c574:	021b      	lsls	r3, r3, #8
 800c576:	4013      	ands	r3, r2
 800c578:	d000      	beq.n	800c57c <PCD_EP_ISR_Handler+0x6e0>
 800c57a:	e494      	b.n	800bea6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	0018      	movs	r0, r3
 800c580:	46bd      	mov	sp, r7
 800c582:	b00e      	add	sp, #56	; 0x38
 800c584:	bdb0      	pop	{r4, r5, r7, pc}
 800c586:	46c0      	nop			; (mov r8, r8)

0800c588 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c588:	b5b0      	push	{r4, r5, r7, lr}
 800c58a:	b08a      	sub	sp, #40	; 0x28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	1dbb      	adds	r3, r7, #6
 800c594:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c596:	1dbb      	adds	r3, r7, #6
 800c598:	881a      	ldrh	r2, [r3, #0]
 800c59a:	2380      	movs	r3, #128	; 0x80
 800c59c:	01db      	lsls	r3, r3, #7
 800c59e:	4013      	ands	r3, r2
 800c5a0:	d068      	beq.n	800c674 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	251e      	movs	r5, #30
 800c5ae:	197c      	adds	r4, r7, r5
 800c5b0:	0019      	movs	r1, r3
 800c5b2:	0010      	movs	r0, r2
 800c5b4:	f7fe ffbe 	bl	800b534 <PCD_GET_EP_DBUF0_CNT>
 800c5b8:	0003      	movs	r3, r0
 800c5ba:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	699a      	ldr	r2, [r3, #24]
 800c5c0:	197b      	adds	r3, r7, r5
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d307      	bcc.n	800c5d8 <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	699a      	ldr	r2, [r3, #24]
 800c5cc:	197b      	adds	r3, r7, r5
 800c5ce:	881b      	ldrh	r3, [r3, #0]
 800c5d0:	1ad2      	subs	r2, r2, r3
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	619a      	str	r2, [r3, #24]
 800c5d6:	e002      	b.n	800c5de <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d11a      	bne.n	800c61c <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	001a      	movs	r2, r3
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	18d3      	adds	r3, r2, r3
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a56      	ldr	r2, [pc, #344]	; (800c750 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	61bb      	str	r3, [r7, #24]
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	2280      	movs	r2, #128	; 0x80
 800c600:	0192      	lsls	r2, r2, #6
 800c602:	4053      	eors	r3, r2
 800c604:	61bb      	str	r3, [r7, #24]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	001a      	movs	r2, r3
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	18d3      	adds	r3, r2, r3
 800c614:	69ba      	ldr	r2, [r7, #24]
 800c616:	494f      	ldr	r1, [pc, #316]	; (800c754 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800c618:	430a      	orrs	r2, r1
 800c61a:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c61c:	1dbb      	adds	r3, r7, #6
 800c61e:	881b      	ldrh	r3, [r3, #0]
 800c620:	2240      	movs	r2, #64	; 0x40
 800c622:	4013      	ands	r3, r2
 800c624:	d015      	beq.n	800c652 <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	001a      	movs	r2, r3
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	18d3      	adds	r3, r2, r3
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a48      	ldr	r2, [pc, #288]	; (800c758 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800c638:	4013      	ands	r3, r2
 800c63a:	617b      	str	r3, [r7, #20]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	001a      	movs	r2, r3
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	18d3      	adds	r3, r2, r3
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4943      	ldr	r1, [pc, #268]	; (800c75c <HAL_PCD_EP_DB_Receive+0x1d4>)
 800c64e:	430a      	orrs	r2, r1
 800c650:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800c652:	241e      	movs	r4, #30
 800c654:	193b      	adds	r3, r7, r4
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d100      	bne.n	800c65e <HAL_PCD_EP_DB_Receive+0xd6>
 800c65c:	e071      	b.n	800c742 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6818      	ldr	r0, [r3, #0]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	6959      	ldr	r1, [r3, #20]
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	891a      	ldrh	r2, [r3, #8]
 800c66a:	193b      	adds	r3, r7, r4
 800c66c:	881b      	ldrh	r3, [r3, #0]
 800c66e:	f005 f94f 	bl	8011910 <USB_ReadPMA>
 800c672:	e066      	b.n	800c742 <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	251e      	movs	r5, #30
 800c680:	197c      	adds	r4, r7, r5
 800c682:	0019      	movs	r1, r3
 800c684:	0010      	movs	r0, r2
 800c686:	f7fe ff77 	bl	800b578 <PCD_GET_EP_DBUF1_CNT>
 800c68a:	0003      	movs	r3, r0
 800c68c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	699a      	ldr	r2, [r3, #24]
 800c692:	197b      	adds	r3, r7, r5
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	429a      	cmp	r2, r3
 800c698:	d307      	bcc.n	800c6aa <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	699a      	ldr	r2, [r3, #24]
 800c69e:	197b      	adds	r3, r7, r5
 800c6a0:	881b      	ldrh	r3, [r3, #0]
 800c6a2:	1ad2      	subs	r2, r2, r3
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	619a      	str	r2, [r3, #24]
 800c6a8:	e002      	b.n	800c6b0 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d11a      	bne.n	800c6ee <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	001a      	movs	r2, r3
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	18d3      	adds	r3, r2, r3
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a21      	ldr	r2, [pc, #132]	; (800c750 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d0:	2280      	movs	r2, #128	; 0x80
 800c6d2:	0192      	lsls	r2, r2, #6
 800c6d4:	4053      	eors	r3, r2
 800c6d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	001a      	movs	r2, r3
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	18d3      	adds	r3, r2, r3
 800c6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6e8:	491a      	ldr	r1, [pc, #104]	; (800c754 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800c6ea:	430a      	orrs	r2, r1
 800c6ec:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c6ee:	1dbb      	adds	r3, r7, #6
 800c6f0:	881b      	ldrh	r3, [r3, #0]
 800c6f2:	2240      	movs	r2, #64	; 0x40
 800c6f4:	4013      	ands	r3, r2
 800c6f6:	d115      	bne.n	800c724 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	001a      	movs	r2, r3
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	18d3      	adds	r3, r2, r3
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a13      	ldr	r2, [pc, #76]	; (800c758 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800c70a:	4013      	ands	r3, r2
 800c70c:	623b      	str	r3, [r7, #32]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	001a      	movs	r2, r3
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	18d3      	adds	r3, r2, r3
 800c71c:	6a3a      	ldr	r2, [r7, #32]
 800c71e:	490f      	ldr	r1, [pc, #60]	; (800c75c <HAL_PCD_EP_DB_Receive+0x1d4>)
 800c720:	430a      	orrs	r2, r1
 800c722:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800c724:	241e      	movs	r4, #30
 800c726:	193b      	adds	r3, r7, r4
 800c728:	881b      	ldrh	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d009      	beq.n	800c742 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	6959      	ldr	r1, [r3, #20]
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	895a      	ldrh	r2, [r3, #10]
 800c73a:	193b      	adds	r3, r7, r4
 800c73c:	881b      	ldrh	r3, [r3, #0]
 800c73e:	f005 f8e7 	bl	8011910 <USB_ReadPMA>
    }
  }

  return count;
 800c742:	231e      	movs	r3, #30
 800c744:	18fb      	adds	r3, r7, r3
 800c746:	881b      	ldrh	r3, [r3, #0]
}
 800c748:	0018      	movs	r0, r3
 800c74a:	46bd      	mov	sp, r7
 800c74c:	b00a      	add	sp, #40	; 0x28
 800c74e:	bdb0      	pop	{r4, r5, r7, pc}
 800c750:	07ffbf8f 	.word	0x07ffbf8f
 800c754:	00008080 	.word	0x00008080
 800c758:	07ff8f8f 	.word	0x07ff8f8f
 800c75c:	000080c0 	.word	0x000080c0

0800c760 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c760:	b5b0      	push	{r4, r5, r7, lr}
 800c762:	b08e      	sub	sp, #56	; 0x38
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	1dbb      	adds	r3, r7, #6
 800c76c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c76e:	1dbb      	adds	r3, r7, #6
 800c770:	881b      	ldrh	r3, [r3, #0]
 800c772:	2240      	movs	r2, #64	; 0x40
 800c774:	4013      	ands	r3, r2
 800c776:	d100      	bne.n	800c77a <HAL_PCD_EP_DB_Transmit+0x1a>
 800c778:	e1c4      	b.n	800cb04 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	b29b      	uxth	r3, r3
 800c784:	251e      	movs	r5, #30
 800c786:	197c      	adds	r4, r7, r5
 800c788:	0019      	movs	r1, r3
 800c78a:	0010      	movs	r0, r2
 800c78c:	f7fe fed2 	bl	800b534 <PCD_GET_EP_DBUF0_CNT>
 800c790:	0003      	movs	r3, r0
 800c792:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	699a      	ldr	r2, [r3, #24]
 800c798:	197b      	adds	r3, r7, r5
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d907      	bls.n	800c7b0 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	699a      	ldr	r2, [r3, #24]
 800c7a4:	197b      	adds	r3, r7, r5
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	1ad2      	subs	r2, r2, r3
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	619a      	str	r2, [r3, #24]
 800c7ae:	e002      	b.n	800c7b6 <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d000      	beq.n	800c7c0 <HAL_PCD_EP_DB_Transmit+0x60>
 800c7be:	e0b2      	b.n	800c926 <HAL_PCD_EP_DB_Transmit+0x1c6>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	785b      	ldrb	r3, [r3, #1]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d121      	bne.n	800c80c <HAL_PCD_EP_DB_Transmit+0xac>
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	4adb      	ldr	r2, [pc, #876]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c7d0:	4694      	mov	ip, r2
 800c7d2:	4463      	add	r3, ip
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	00db      	lsls	r3, r3, #3
 800c7dc:	49d7      	ldr	r1, [pc, #860]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c7de:	468c      	mov	ip, r1
 800c7e0:	4463      	add	r3, ip
 800c7e2:	0192      	lsls	r2, r2, #6
 800c7e4:	0992      	lsrs	r2, r2, #6
 800c7e6:	601a      	str	r2, [r3, #0]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	4ad3      	ldr	r2, [pc, #844]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c7f0:	4694      	mov	ip, r2
 800c7f2:	4463      	add	r3, ip
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	49cf      	ldr	r1, [pc, #828]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c7fe:	468c      	mov	ip, r1
 800c800:	4463      	add	r3, ip
 800c802:	2180      	movs	r1, #128	; 0x80
 800c804:	0609      	lsls	r1, r1, #24
 800c806:	430a      	orrs	r2, r1
 800c808:	601a      	str	r2, [r3, #0]
 800c80a:	e020      	b.n	800c84e <HAL_PCD_EP_DB_Transmit+0xee>
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	785b      	ldrb	r3, [r3, #1]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d11c      	bne.n	800c84e <HAL_PCD_EP_DB_Transmit+0xee>
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	4ac8      	ldr	r2, [pc, #800]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c81c:	4694      	mov	ip, r2
 800c81e:	4463      	add	r3, ip
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	49c4      	ldr	r1, [pc, #784]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c82a:	468c      	mov	ip, r1
 800c82c:	4463      	add	r3, ip
 800c82e:	0412      	lsls	r2, r2, #16
 800c830:	0c12      	lsrs	r2, r2, #16
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	00db      	lsls	r3, r3, #3
 800c83a:	4ac0      	ldr	r2, [pc, #768]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c83c:	189a      	adds	r2, r3, r2
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	49bd      	ldr	r1, [pc, #756]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c846:	468c      	mov	ip, r1
 800c848:	4463      	add	r3, ip
 800c84a:	6812      	ldr	r2, [r2, #0]
 800c84c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	785b      	ldrb	r3, [r3, #1]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d121      	bne.n	800c89a <HAL_PCD_EP_DB_Transmit+0x13a>
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	4ab7      	ldr	r2, [pc, #732]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c85e:	4694      	mov	ip, r2
 800c860:	4463      	add	r3, ip
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	00db      	lsls	r3, r3, #3
 800c86a:	49b4      	ldr	r1, [pc, #720]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c86c:	468c      	mov	ip, r1
 800c86e:	4463      	add	r3, ip
 800c870:	0192      	lsls	r2, r2, #6
 800c872:	0992      	lsrs	r2, r2, #6
 800c874:	605a      	str	r2, [r3, #4]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	4aaf      	ldr	r2, [pc, #700]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c87e:	4694      	mov	ip, r2
 800c880:	4463      	add	r3, ip
 800c882:	685a      	ldr	r2, [r3, #4]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	49ac      	ldr	r1, [pc, #688]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c88c:	468c      	mov	ip, r1
 800c88e:	4463      	add	r3, ip
 800c890:	2180      	movs	r1, #128	; 0x80
 800c892:	0609      	lsls	r1, r1, #24
 800c894:	430a      	orrs	r2, r1
 800c896:	605a      	str	r2, [r3, #4]
 800c898:	e020      	b.n	800c8dc <HAL_PCD_EP_DB_Transmit+0x17c>
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	785b      	ldrb	r3, [r3, #1]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d11c      	bne.n	800c8dc <HAL_PCD_EP_DB_Transmit+0x17c>
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	00db      	lsls	r3, r3, #3
 800c8a8:	4aa4      	ldr	r2, [pc, #656]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c8aa:	4694      	mov	ip, r2
 800c8ac:	4463      	add	r3, ip
 800c8ae:	685a      	ldr	r2, [r3, #4]
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	00db      	lsls	r3, r3, #3
 800c8b6:	49a1      	ldr	r1, [pc, #644]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c8b8:	468c      	mov	ip, r1
 800c8ba:	4463      	add	r3, ip
 800c8bc:	0412      	lsls	r2, r2, #16
 800c8be:	0c12      	lsrs	r2, r2, #16
 800c8c0:	605a      	str	r2, [r3, #4]
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	4a9c      	ldr	r2, [pc, #624]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c8ca:	189a      	adds	r2, r3, r2
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	00db      	lsls	r3, r3, #3
 800c8d2:	499a      	ldr	r1, [pc, #616]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c8d4:	468c      	mov	ip, r1
 800c8d6:	4463      	add	r3, ip
 800c8d8:	6852      	ldr	r2, [r2, #4]
 800c8da:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	781a      	ldrb	r2, [r3, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	0011      	movs	r1, r2
 800c8e4:	0018      	movs	r0, r3
 800c8e6:	f010 f9bb 	bl	801cc60 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c8ea:	1dbb      	adds	r3, r7, #6
 800c8ec:	881a      	ldrh	r2, [r3, #0]
 800c8ee:	2380      	movs	r3, #128	; 0x80
 800c8f0:	01db      	lsls	r3, r3, #7
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	d100      	bne.n	800c8f8 <HAL_PCD_EP_DB_Transmit+0x198>
 800c8f6:	e2d6      	b.n	800cea6 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	001a      	movs	r2, r3
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	18d3      	adds	r3, r2, r3
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a8d      	ldr	r2, [pc, #564]	; (800cb40 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800c90a:	4013      	ands	r3, r2
 800c90c:	637b      	str	r3, [r7, #52]	; 0x34
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	001a      	movs	r2, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	18d3      	adds	r3, r2, r3
 800c91c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c91e:	4989      	ldr	r1, [pc, #548]	; (800cb44 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 800c920:	430a      	orrs	r2, r1
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	e2bf      	b.n	800cea6 <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c926:	1dbb      	adds	r3, r7, #6
 800c928:	881a      	ldrh	r2, [r3, #0]
 800c92a:	2380      	movs	r3, #128	; 0x80
 800c92c:	01db      	lsls	r3, r3, #7
 800c92e:	4013      	ands	r3, r2
 800c930:	d015      	beq.n	800c95e <HAL_PCD_EP_DB_Transmit+0x1fe>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	001a      	movs	r2, r3
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	18d3      	adds	r3, r2, r3
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a7f      	ldr	r2, [pc, #508]	; (800cb40 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800c944:	4013      	ands	r3, r2
 800c946:	62bb      	str	r3, [r7, #40]	; 0x28
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	001a      	movs	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	18d3      	adds	r3, r2, r3
 800c956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c958:	497a      	ldr	r1, [pc, #488]	; (800cb44 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 800c95a:	430a      	orrs	r2, r1
 800c95c:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	2224      	movs	r2, #36	; 0x24
 800c962:	5c9b      	ldrb	r3, [r3, r2]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d000      	beq.n	800c96a <HAL_PCD_EP_DB_Transmit+0x20a>
 800c968:	e29d      	b.n	800cea6 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	695a      	ldr	r2, [r3, #20]
 800c96e:	211e      	movs	r1, #30
 800c970:	187b      	adds	r3, r7, r1
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	18d2      	adds	r2, r2, r3
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	69da      	ldr	r2, [r3, #28]
 800c97e:	187b      	adds	r3, r7, r1
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	18d2      	adds	r2, r2, r3
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	6a1a      	ldr	r2, [r3, #32]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	429a      	cmp	r2, r3
 800c992:	d309      	bcc.n	800c9a8 <HAL_PCD_EP_DB_Transmit+0x248>
        {
          len = ep->maxpacket;
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	6a1a      	ldr	r2, [r3, #32]
 800c99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a0:	1ad2      	subs	r2, r2, r3
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	621a      	str	r2, [r3, #32]
 800c9a6:	e016      	b.n	800c9d6 <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else if (ep->xfer_len_db == 0U)
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d108      	bne.n	800c9c2 <HAL_PCD_EP_DB_Transmit+0x262>
        {
          len = TxPctSize;
 800c9b0:	231e      	movs	r3, #30
 800c9b2:	18fb      	adds	r3, r7, r3
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	2224      	movs	r2, #36	; 0x24
 800c9bc:	2100      	movs	r1, #0
 800c9be:	5499      	strb	r1, [r3, r2]
 800c9c0:	e009      	b.n	800c9d6 <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2224      	movs	r2, #36	; 0x24
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	785b      	ldrb	r3, [r3, #1]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d162      	bne.n	800caa4 <HAL_PCD_EP_DB_Transmit+0x344>
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	00db      	lsls	r3, r3, #3
 800c9e4:	4a55      	ldr	r2, [pc, #340]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c9e6:	4694      	mov	ip, r2
 800c9e8:	4463      	add	r3, ip
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	4952      	ldr	r1, [pc, #328]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800c9f4:	468c      	mov	ip, r1
 800c9f6:	4463      	add	r3, ip
 800c9f8:	0192      	lsls	r2, r2, #6
 800c9fa:	0992      	lsrs	r2, r2, #6
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca00:	2b3e      	cmp	r3, #62	; 0x3e
 800ca02:	d91e      	bls.n	800ca42 <HAL_PCD_EP_DB_Transmit+0x2e2>
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	095b      	lsrs	r3, r3, #5
 800ca08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	221f      	movs	r2, #31
 800ca0e:	4013      	ands	r3, r2
 800ca10:	d102      	bne.n	800ca18 <HAL_PCD_EP_DB_Transmit+0x2b8>
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	3b01      	subs	r3, #1
 800ca16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	4a47      	ldr	r2, [pc, #284]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800ca20:	4694      	mov	ip, r2
 800ca22:	4463      	add	r3, ip
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca28:	069b      	lsls	r3, r3, #26
 800ca2a:	431a      	orrs	r2, r3
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	00db      	lsls	r3, r3, #3
 800ca32:	4942      	ldr	r1, [pc, #264]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800ca34:	468c      	mov	ip, r1
 800ca36:	4463      	add	r3, ip
 800ca38:	2180      	movs	r1, #128	; 0x80
 800ca3a:	0609      	lsls	r1, r1, #24
 800ca3c:	430a      	orrs	r2, r1
 800ca3e:	601a      	str	r2, [r3, #0]
 800ca40:	e055      	b.n	800caee <HAL_PCD_EP_DB_Transmit+0x38e>
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d111      	bne.n	800ca6c <HAL_PCD_EP_DB_Transmit+0x30c>
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	00db      	lsls	r3, r3, #3
 800ca4e:	4a3b      	ldr	r2, [pc, #236]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800ca50:	4694      	mov	ip, r2
 800ca52:	4463      	add	r3, ip
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	00db      	lsls	r3, r3, #3
 800ca5c:	4937      	ldr	r1, [pc, #220]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800ca5e:	468c      	mov	ip, r1
 800ca60:	4463      	add	r3, ip
 800ca62:	2180      	movs	r1, #128	; 0x80
 800ca64:	0609      	lsls	r1, r1, #24
 800ca66:	430a      	orrs	r2, r1
 800ca68:	601a      	str	r2, [r3, #0]
 800ca6a:	e040      	b.n	800caee <HAL_PCD_EP_DB_Transmit+0x38e>
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	085b      	lsrs	r3, r3, #1
 800ca70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca74:	2201      	movs	r2, #1
 800ca76:	4013      	ands	r3, r2
 800ca78:	d002      	beq.n	800ca80 <HAL_PCD_EP_DB_Transmit+0x320>
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	00db      	lsls	r3, r3, #3
 800ca86:	4a2d      	ldr	r2, [pc, #180]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800ca88:	4694      	mov	ip, r2
 800ca8a:	4463      	add	r3, ip
 800ca8c:	6819      	ldr	r1, [r3, #0]
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca90:	069a      	lsls	r2, r3, #26
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	4828      	ldr	r0, [pc, #160]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800ca9a:	4684      	mov	ip, r0
 800ca9c:	4463      	add	r3, ip
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	e024      	b.n	800caee <HAL_PCD_EP_DB_Transmit+0x38e>
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	785b      	ldrb	r3, [r3, #1]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d120      	bne.n	800caee <HAL_PCD_EP_DB_Transmit+0x38e>
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	4a22      	ldr	r2, [pc, #136]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800cab4:	4694      	mov	ip, r2
 800cab6:	4463      	add	r3, ip
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	491e      	ldr	r1, [pc, #120]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800cac2:	468c      	mov	ip, r1
 800cac4:	4463      	add	r3, ip
 800cac6:	0412      	lsls	r2, r2, #16
 800cac8:	0c12      	lsrs	r2, r2, #16
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	4a1a      	ldr	r2, [pc, #104]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800cad4:	4694      	mov	ip, r2
 800cad6:	4463      	add	r3, ip
 800cad8:	6819      	ldr	r1, [r3, #0]
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	041a      	lsls	r2, r3, #16
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	00db      	lsls	r3, r3, #3
 800cae4:	4815      	ldr	r0, [pc, #84]	; (800cb3c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800cae6:	4684      	mov	ip, r0
 800cae8:	4463      	add	r3, ip
 800caea:	430a      	orrs	r2, r1
 800caec:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6818      	ldr	r0, [r3, #0]
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	6959      	ldr	r1, [r3, #20]
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	891a      	ldrh	r2, [r3, #8]
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	f004 fe91 	bl	8011824 <USB_WritePMA>
 800cb02:	e1d0      	b.n	800cea6 <HAL_PCD_EP_DB_Transmit+0x746>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	251e      	movs	r5, #30
 800cb10:	197c      	adds	r4, r7, r5
 800cb12:	0019      	movs	r1, r3
 800cb14:	0010      	movs	r0, r2
 800cb16:	f7fe fd2f 	bl	800b578 <PCD_GET_EP_DBUF1_CNT>
 800cb1a:	0003      	movs	r3, r0
 800cb1c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	699a      	ldr	r2, [r3, #24]
 800cb22:	197b      	adds	r3, r7, r5
 800cb24:	881b      	ldrh	r3, [r3, #0]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d30e      	bcc.n	800cb48 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	699a      	ldr	r2, [r3, #24]
 800cb2e:	197b      	adds	r3, r7, r5
 800cb30:	881b      	ldrh	r3, [r3, #0]
 800cb32:	1ad2      	subs	r2, r2, r3
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	619a      	str	r2, [r3, #24]
 800cb38:	e009      	b.n	800cb4e <HAL_PCD_EP_DB_Transmit+0x3ee>
 800cb3a:	46c0      	nop			; (mov r8, r8)
 800cb3c:	40009800 	.word	0x40009800
 800cb40:	07ff8f8f 	.word	0x07ff8f8f
 800cb44:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d000      	beq.n	800cb58 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800cb56:	e0b2      	b.n	800ccbe <HAL_PCD_EP_DB_Transmit+0x55e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	785b      	ldrb	r3, [r3, #1]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d121      	bne.n	800cba4 <HAL_PCD_EP_DB_Transmit+0x444>
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	00db      	lsls	r3, r3, #3
 800cb66:	4ab5      	ldr	r2, [pc, #724]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cb68:	4694      	mov	ip, r2
 800cb6a:	4463      	add	r3, ip
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	49b1      	ldr	r1, [pc, #708]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cb76:	468c      	mov	ip, r1
 800cb78:	4463      	add	r3, ip
 800cb7a:	0192      	lsls	r2, r2, #6
 800cb7c:	0992      	lsrs	r2, r2, #6
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	00db      	lsls	r3, r3, #3
 800cb86:	4aad      	ldr	r2, [pc, #692]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cb88:	4694      	mov	ip, r2
 800cb8a:	4463      	add	r3, ip
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	49a9      	ldr	r1, [pc, #676]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cb96:	468c      	mov	ip, r1
 800cb98:	4463      	add	r3, ip
 800cb9a:	2180      	movs	r1, #128	; 0x80
 800cb9c:	0609      	lsls	r1, r1, #24
 800cb9e:	430a      	orrs	r2, r1
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	e020      	b.n	800cbe6 <HAL_PCD_EP_DB_Transmit+0x486>
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	785b      	ldrb	r3, [r3, #1]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d11c      	bne.n	800cbe6 <HAL_PCD_EP_DB_Transmit+0x486>
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	4aa2      	ldr	r2, [pc, #648]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cbb4:	4694      	mov	ip, r2
 800cbb6:	4463      	add	r3, ip
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	499e      	ldr	r1, [pc, #632]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cbc2:	468c      	mov	ip, r1
 800cbc4:	4463      	add	r3, ip
 800cbc6:	0412      	lsls	r2, r2, #16
 800cbc8:	0c12      	lsrs	r2, r2, #16
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	00db      	lsls	r3, r3, #3
 800cbd2:	4a9a      	ldr	r2, [pc, #616]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cbd4:	189a      	adds	r2, r3, r2
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	4997      	ldr	r1, [pc, #604]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cbde:	468c      	mov	ip, r1
 800cbe0:	4463      	add	r3, ip
 800cbe2:	6812      	ldr	r2, [r2, #0]
 800cbe4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	785b      	ldrb	r3, [r3, #1]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d121      	bne.n	800cc32 <HAL_PCD_EP_DB_Transmit+0x4d2>
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	4a91      	ldr	r2, [pc, #580]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cbf6:	4694      	mov	ip, r2
 800cbf8:	4463      	add	r3, ip
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	00db      	lsls	r3, r3, #3
 800cc02:	498e      	ldr	r1, [pc, #568]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cc04:	468c      	mov	ip, r1
 800cc06:	4463      	add	r3, ip
 800cc08:	0192      	lsls	r2, r2, #6
 800cc0a:	0992      	lsrs	r2, r2, #6
 800cc0c:	605a      	str	r2, [r3, #4]
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	4a89      	ldr	r2, [pc, #548]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cc16:	4694      	mov	ip, r2
 800cc18:	4463      	add	r3, ip
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	4986      	ldr	r1, [pc, #536]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cc24:	468c      	mov	ip, r1
 800cc26:	4463      	add	r3, ip
 800cc28:	2180      	movs	r1, #128	; 0x80
 800cc2a:	0609      	lsls	r1, r1, #24
 800cc2c:	430a      	orrs	r2, r1
 800cc2e:	605a      	str	r2, [r3, #4]
 800cc30:	e020      	b.n	800cc74 <HAL_PCD_EP_DB_Transmit+0x514>
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	785b      	ldrb	r3, [r3, #1]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d11c      	bne.n	800cc74 <HAL_PCD_EP_DB_Transmit+0x514>
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	4a7e      	ldr	r2, [pc, #504]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cc42:	4694      	mov	ip, r2
 800cc44:	4463      	add	r3, ip
 800cc46:	685a      	ldr	r2, [r3, #4]
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	497b      	ldr	r1, [pc, #492]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cc50:	468c      	mov	ip, r1
 800cc52:	4463      	add	r3, ip
 800cc54:	0412      	lsls	r2, r2, #16
 800cc56:	0c12      	lsrs	r2, r2, #16
 800cc58:	605a      	str	r2, [r3, #4]
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	4a76      	ldr	r2, [pc, #472]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cc62:	189a      	adds	r2, r3, r2
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	4974      	ldr	r1, [pc, #464]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cc6c:	468c      	mov	ip, r1
 800cc6e:	4463      	add	r3, ip
 800cc70:	6852      	ldr	r2, [r2, #4]
 800cc72:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	781a      	ldrb	r2, [r3, #0]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	0011      	movs	r1, r2
 800cc7c:	0018      	movs	r0, r3
 800cc7e:	f00f ffef 	bl	801cc60 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800cc82:	1dbb      	adds	r3, r7, #6
 800cc84:	881a      	ldrh	r2, [r3, #0]
 800cc86:	2380      	movs	r3, #128	; 0x80
 800cc88:	01db      	lsls	r3, r3, #7
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	d000      	beq.n	800cc90 <HAL_PCD_EP_DB_Transmit+0x530>
 800cc8e:	e10a      	b.n	800cea6 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	001a      	movs	r2, r3
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	18d3      	adds	r3, r2, r3
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a67      	ldr	r2, [pc, #412]	; (800ce40 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800cca2:	4013      	ands	r3, r2
 800cca4:	623b      	str	r3, [r7, #32]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	001a      	movs	r2, r3
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	18d3      	adds	r3, r2, r3
 800ccb4:	6a3a      	ldr	r2, [r7, #32]
 800ccb6:	4963      	ldr	r1, [pc, #396]	; (800ce44 <HAL_PCD_EP_DB_Transmit+0x6e4>)
 800ccb8:	430a      	orrs	r2, r1
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	e0f3      	b.n	800cea6 <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ccbe:	1dbb      	adds	r3, r7, #6
 800ccc0:	881a      	ldrh	r2, [r3, #0]
 800ccc2:	2380      	movs	r3, #128	; 0x80
 800ccc4:	01db      	lsls	r3, r3, #7
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	d115      	bne.n	800ccf6 <HAL_PCD_EP_DB_Transmit+0x596>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	001a      	movs	r2, r3
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	18d3      	adds	r3, r2, r3
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a59      	ldr	r2, [pc, #356]	; (800ce40 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800ccdc:	4013      	ands	r3, r2
 800ccde:	617b      	str	r3, [r7, #20]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	001a      	movs	r2, r3
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	18d3      	adds	r3, r2, r3
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	4954      	ldr	r1, [pc, #336]	; (800ce44 <HAL_PCD_EP_DB_Transmit+0x6e4>)
 800ccf2:	430a      	orrs	r2, r1
 800ccf4:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2224      	movs	r2, #36	; 0x24
 800ccfa:	5c9b      	ldrb	r3, [r3, r2]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d000      	beq.n	800cd02 <HAL_PCD_EP_DB_Transmit+0x5a2>
 800cd00:	e0d1      	b.n	800cea6 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	695a      	ldr	r2, [r3, #20]
 800cd06:	211e      	movs	r1, #30
 800cd08:	187b      	adds	r3, r7, r1
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	18d2      	adds	r2, r2, r3
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	69da      	ldr	r2, [r3, #28]
 800cd16:	187b      	adds	r3, r7, r1
 800cd18:	881b      	ldrh	r3, [r3, #0]
 800cd1a:	18d2      	adds	r2, r2, r3
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	6a1a      	ldr	r2, [r3, #32]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d309      	bcc.n	800cd40 <HAL_PCD_EP_DB_Transmit+0x5e0>
        {
          len = ep->maxpacket;
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	691b      	ldr	r3, [r3, #16]
 800cd30:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	6a1a      	ldr	r2, [r3, #32]
 800cd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd38:	1ad2      	subs	r2, r2, r3
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	621a      	str	r2, [r3, #32]
 800cd3e:	e016      	b.n	800cd6e <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else if (ep->xfer_len_db == 0U)
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	6a1b      	ldr	r3, [r3, #32]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d108      	bne.n	800cd5a <HAL_PCD_EP_DB_Transmit+0x5fa>
        {
          len = TxPctSize;
 800cd48:	231e      	movs	r3, #30
 800cd4a:	18fb      	adds	r3, r7, r3
 800cd4c:	881b      	ldrh	r3, [r3, #0]
 800cd4e:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	2224      	movs	r2, #36	; 0x24
 800cd54:	2100      	movs	r1, #0
 800cd56:	5499      	strb	r1, [r3, r2]
 800cd58:	e009      	b.n	800cd6e <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else
        {
          len = ep->xfer_len_db;
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	6a1b      	ldr	r3, [r3, #32]
 800cd5e:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2200      	movs	r2, #0
 800cd64:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2224      	movs	r2, #36	; 0x24
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	785b      	ldrb	r3, [r3, #1]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d168      	bne.n	800ce48 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	00db      	lsls	r3, r3, #3
 800cd7c:	4a2f      	ldr	r2, [pc, #188]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cd7e:	4694      	mov	ip, r2
 800cd80:	4463      	add	r3, ip
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	492c      	ldr	r1, [pc, #176]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cd8c:	468c      	mov	ip, r1
 800cd8e:	4463      	add	r3, ip
 800cd90:	0192      	lsls	r2, r2, #6
 800cd92:	0992      	lsrs	r2, r2, #6
 800cd94:	605a      	str	r2, [r3, #4]
 800cd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd98:	2b3e      	cmp	r3, #62	; 0x3e
 800cd9a:	d91e      	bls.n	800cdda <HAL_PCD_EP_DB_Transmit+0x67a>
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	095b      	lsrs	r3, r3, #5
 800cda0:	61bb      	str	r3, [r7, #24]
 800cda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda4:	221f      	movs	r2, #31
 800cda6:	4013      	ands	r3, r2
 800cda8:	d102      	bne.n	800cdb0 <HAL_PCD_EP_DB_Transmit+0x650>
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	61bb      	str	r3, [r7, #24]
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	00db      	lsls	r3, r3, #3
 800cdb6:	4a21      	ldr	r2, [pc, #132]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cdb8:	4694      	mov	ip, r2
 800cdba:	4463      	add	r3, ip
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	069b      	lsls	r3, r3, #26
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	491c      	ldr	r1, [pc, #112]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cdcc:	468c      	mov	ip, r1
 800cdce:	4463      	add	r3, ip
 800cdd0:	2180      	movs	r1, #128	; 0x80
 800cdd2:	0609      	lsls	r1, r1, #24
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	605a      	str	r2, [r3, #4]
 800cdd8:	e05b      	b.n	800ce92 <HAL_PCD_EP_DB_Transmit+0x732>
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d111      	bne.n	800ce04 <HAL_PCD_EP_DB_Transmit+0x6a4>
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	4a15      	ldr	r2, [pc, #84]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cde8:	4694      	mov	ip, r2
 800cdea:	4463      	add	r3, ip
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	4911      	ldr	r1, [pc, #68]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800cdf6:	468c      	mov	ip, r1
 800cdf8:	4463      	add	r3, ip
 800cdfa:	2180      	movs	r1, #128	; 0x80
 800cdfc:	0609      	lsls	r1, r1, #24
 800cdfe:	430a      	orrs	r2, r1
 800ce00:	605a      	str	r2, [r3, #4]
 800ce02:	e046      	b.n	800ce92 <HAL_PCD_EP_DB_Transmit+0x732>
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	085b      	lsrs	r3, r3, #1
 800ce08:	61bb      	str	r3, [r7, #24]
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	4013      	ands	r3, r2
 800ce10:	d002      	beq.n	800ce18 <HAL_PCD_EP_DB_Transmit+0x6b8>
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	3301      	adds	r3, #1
 800ce16:	61bb      	str	r3, [r7, #24]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	00db      	lsls	r3, r3, #3
 800ce1e:	4a07      	ldr	r2, [pc, #28]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800ce20:	4694      	mov	ip, r2
 800ce22:	4463      	add	r3, ip
 800ce24:	6859      	ldr	r1, [r3, #4]
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	069a      	lsls	r2, r3, #26
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	4802      	ldr	r0, [pc, #8]	; (800ce3c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800ce32:	4684      	mov	ip, r0
 800ce34:	4463      	add	r3, ip
 800ce36:	430a      	orrs	r2, r1
 800ce38:	605a      	str	r2, [r3, #4]
 800ce3a:	e02a      	b.n	800ce92 <HAL_PCD_EP_DB_Transmit+0x732>
 800ce3c:	40009800 	.word	0x40009800
 800ce40:	07ff8f8f 	.word	0x07ff8f8f
 800ce44:	0000c080 	.word	0x0000c080
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	785b      	ldrb	r3, [r3, #1]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d120      	bne.n	800ce92 <HAL_PCD_EP_DB_Transmit+0x732>
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	00db      	lsls	r3, r3, #3
 800ce56:	4a25      	ldr	r2, [pc, #148]	; (800ceec <HAL_PCD_EP_DB_Transmit+0x78c>)
 800ce58:	4694      	mov	ip, r2
 800ce5a:	4463      	add	r3, ip
 800ce5c:	685a      	ldr	r2, [r3, #4]
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	4921      	ldr	r1, [pc, #132]	; (800ceec <HAL_PCD_EP_DB_Transmit+0x78c>)
 800ce66:	468c      	mov	ip, r1
 800ce68:	4463      	add	r3, ip
 800ce6a:	0412      	lsls	r2, r2, #16
 800ce6c:	0c12      	lsrs	r2, r2, #16
 800ce6e:	605a      	str	r2, [r3, #4]
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	4a1d      	ldr	r2, [pc, #116]	; (800ceec <HAL_PCD_EP_DB_Transmit+0x78c>)
 800ce78:	4694      	mov	ip, r2
 800ce7a:	4463      	add	r3, ip
 800ce7c:	6859      	ldr	r1, [r3, #4]
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce80:	041a      	lsls	r2, r3, #16
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	4818      	ldr	r0, [pc, #96]	; (800ceec <HAL_PCD_EP_DB_Transmit+0x78c>)
 800ce8a:	4684      	mov	ip, r0
 800ce8c:	4463      	add	r3, ip
 800ce8e:	430a      	orrs	r2, r1
 800ce90:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6818      	ldr	r0, [r3, #0]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	6959      	ldr	r1, [r3, #20]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	895a      	ldrh	r2, [r3, #10]
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	f004 fcbf 	bl	8011824 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	001a      	movs	r2, r3
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	18d3      	adds	r3, r2, r3
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a0e      	ldr	r2, [pc, #56]	; (800cef0 <HAL_PCD_EP_DB_Transmit+0x790>)
 800ceb8:	4013      	ands	r3, r2
 800ceba:	633b      	str	r3, [r7, #48]	; 0x30
 800cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebe:	2210      	movs	r2, #16
 800cec0:	4053      	eors	r3, r2
 800cec2:	633b      	str	r3, [r7, #48]	; 0x30
 800cec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec6:	2220      	movs	r2, #32
 800cec8:	4053      	eors	r3, r2
 800ceca:	633b      	str	r3, [r7, #48]	; 0x30
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	001a      	movs	r2, r3
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	18d3      	adds	r3, r2, r3
 800ceda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cedc:	4905      	ldr	r1, [pc, #20]	; (800cef4 <HAL_PCD_EP_DB_Transmit+0x794>)
 800cede:	430a      	orrs	r2, r1
 800cee0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	0018      	movs	r0, r3
 800cee6:	46bd      	mov	sp, r7
 800cee8:	b00e      	add	sp, #56	; 0x38
 800ceea:	bdb0      	pop	{r4, r5, r7, pc}
 800ceec:	40009800 	.word	0x40009800
 800cef0:	07ff8fbf 	.word	0x07ff8fbf
 800cef4:	00008080 	.word	0x00008080

0800cef8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800cef8:	b590      	push	{r4, r7, lr}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	0008      	movs	r0, r1
 800cf02:	0011      	movs	r1, r2
 800cf04:	607b      	str	r3, [r7, #4]
 800cf06:	240a      	movs	r4, #10
 800cf08:	193b      	adds	r3, r7, r4
 800cf0a:	1c02      	adds	r2, r0, #0
 800cf0c:	801a      	strh	r2, [r3, #0]
 800cf0e:	2308      	movs	r3, #8
 800cf10:	18fb      	adds	r3, r7, r3
 800cf12:	1c0a      	adds	r2, r1, #0
 800cf14:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800cf16:	0021      	movs	r1, r4
 800cf18:	187b      	adds	r3, r7, r1
 800cf1a:	881b      	ldrh	r3, [r3, #0]
 800cf1c:	2280      	movs	r2, #128	; 0x80
 800cf1e:	4013      	ands	r3, r2
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00d      	beq.n	800cf42 <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf26:	187b      	adds	r3, r7, r1
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	2207      	movs	r2, #7
 800cf2c:	401a      	ands	r2, r3
 800cf2e:	0013      	movs	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	189b      	adds	r3, r3, r2
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	3310      	adds	r3, #16
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	18d3      	adds	r3, r2, r3
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	617b      	str	r3, [r7, #20]
 800cf40:	e00c      	b.n	800cf5c <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cf42:	230a      	movs	r3, #10
 800cf44:	18fb      	adds	r3, r7, r3
 800cf46:	881a      	ldrh	r2, [r3, #0]
 800cf48:	0013      	movs	r3, r2
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	189b      	adds	r3, r3, r2
 800cf4e:	00db      	lsls	r3, r3, #3
 800cf50:	3351      	adds	r3, #81	; 0x51
 800cf52:	33ff      	adds	r3, #255	; 0xff
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	18d3      	adds	r3, r2, r3
 800cf58:	3304      	adds	r3, #4
 800cf5a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800cf5c:	2308      	movs	r3, #8
 800cf5e:	18fb      	adds	r3, r7, r3
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d107      	bne.n	800cf76 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	80da      	strh	r2, [r3, #6]
 800cf74:	e00b      	b.n	800cf8e <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	0c1b      	lsrs	r3, r3, #16
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cf8e:	2300      	movs	r3, #0
}
 800cf90:	0018      	movs	r0, r3
 800cf92:	46bd      	mov	sp, r7
 800cf94:	b007      	add	sp, #28
 800cf96:	bd90      	pop	{r4, r7, pc}

0800cf98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	23b5      	movs	r3, #181	; 0xb5
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	2101      	movs	r1, #1
 800cfae:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	23b3      	movs	r3, #179	; 0xb3
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	431a      	orrs	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfca:	2202      	movs	r2, #2
 800cfcc:	431a      	orrs	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	0018      	movs	r0, r3
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	b004      	add	sp, #16
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800cfe0:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <HAL_PWREx_EnableVddUSB+0x18>)
 800cfe2:	685a      	ldr	r2, [r3, #4]
 800cfe4:	4b03      	ldr	r3, [pc, #12]	; (800cff4 <HAL_PWREx_EnableVddUSB+0x18>)
 800cfe6:	2180      	movs	r1, #128	; 0x80
 800cfe8:	00c9      	lsls	r1, r1, #3
 800cfea:	430a      	orrs	r2, r1
 800cfec:	605a      	str	r2, [r3, #4]
}
 800cfee:	46c0      	nop			; (mov r8, r8)
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	40007000 	.word	0x40007000

0800cff8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800d000:	4b19      	ldr	r3, [pc, #100]	; (800d068 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a19      	ldr	r2, [pc, #100]	; (800d06c <HAL_PWREx_ControlVoltageScaling+0x74>)
 800d006:	4013      	ands	r3, r2
 800d008:	0019      	movs	r1, r3
 800d00a:	4b17      	ldr	r3, [pc, #92]	; (800d068 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	430a      	orrs	r2, r1
 800d010:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	2380      	movs	r3, #128	; 0x80
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	429a      	cmp	r2, r3
 800d01a:	d11f      	bne.n	800d05c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800d01c:	4b14      	ldr	r3, [pc, #80]	; (800d070 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	0013      	movs	r3, r2
 800d022:	005b      	lsls	r3, r3, #1
 800d024:	189b      	adds	r3, r3, r2
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	4912      	ldr	r1, [pc, #72]	; (800d074 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800d02a:	0018      	movs	r0, r3
 800d02c:	f7f9 f8e0 	bl	80061f0 <__udivsi3>
 800d030:	0003      	movs	r3, r0
 800d032:	3301      	adds	r3, #1
 800d034:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d036:	e008      	b.n	800d04a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3b01      	subs	r3, #1
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	e001      	b.n	800d04a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800d046:	2303      	movs	r3, #3
 800d048:	e009      	b.n	800d05e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d04a:	4b07      	ldr	r3, [pc, #28]	; (800d068 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800d04c:	695a      	ldr	r2, [r3, #20]
 800d04e:	2380      	movs	r3, #128	; 0x80
 800d050:	00db      	lsls	r3, r3, #3
 800d052:	401a      	ands	r2, r3
 800d054:	2380      	movs	r3, #128	; 0x80
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	429a      	cmp	r2, r3
 800d05a:	d0ed      	beq.n	800d038 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	0018      	movs	r0, r3
 800d060:	46bd      	mov	sp, r7
 800d062:	b004      	add	sp, #16
 800d064:	bd80      	pop	{r7, pc}
 800d066:	46c0      	nop			; (mov r8, r8)
 800d068:	40007000 	.word	0x40007000
 800d06c:	fffff9ff 	.word	0xfffff9ff
 800d070:	20000048 	.word	0x20000048
 800d074:	000f4240 	.word	0x000f4240

0800d078 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800d07c:	4b03      	ldr	r3, [pc, #12]	; (800d08c <LL_RCC_GetAPB1Prescaler+0x14>)
 800d07e:	689a      	ldr	r2, [r3, #8]
 800d080:	23e0      	movs	r3, #224	; 0xe0
 800d082:	01db      	lsls	r3, r3, #7
 800d084:	4013      	ands	r3, r2
}
 800d086:	0018      	movs	r0, r3
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	40021000 	.word	0x40021000

0800d090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b088      	sub	sp, #32
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d102      	bne.n	800d0a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	f000 fb50 	bl	800d744 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	4013      	ands	r3, r2
 800d0ac:	d100      	bne.n	800d0b0 <HAL_RCC_OscConfig+0x20>
 800d0ae:	e07c      	b.n	800d1aa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d0b0:	4bc3      	ldr	r3, [pc, #780]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	2238      	movs	r2, #56	; 0x38
 800d0b6:	4013      	ands	r3, r2
 800d0b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d0ba:	4bc1      	ldr	r3, [pc, #772]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	2203      	movs	r2, #3
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	2b10      	cmp	r3, #16
 800d0c8:	d102      	bne.n	800d0d0 <HAL_RCC_OscConfig+0x40>
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d002      	beq.n	800d0d6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	2b08      	cmp	r3, #8
 800d0d4:	d10b      	bne.n	800d0ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0d6:	4bba      	ldr	r3, [pc, #744]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	2380      	movs	r3, #128	; 0x80
 800d0dc:	029b      	lsls	r3, r3, #10
 800d0de:	4013      	ands	r3, r2
 800d0e0:	d062      	beq.n	800d1a8 <HAL_RCC_OscConfig+0x118>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d15e      	bne.n	800d1a8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e32a      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	685a      	ldr	r2, [r3, #4]
 800d0f2:	2380      	movs	r3, #128	; 0x80
 800d0f4:	025b      	lsls	r3, r3, #9
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d107      	bne.n	800d10a <HAL_RCC_OscConfig+0x7a>
 800d0fa:	4bb1      	ldr	r3, [pc, #708]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	4bb0      	ldr	r3, [pc, #704]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d100:	2180      	movs	r1, #128	; 0x80
 800d102:	0249      	lsls	r1, r1, #9
 800d104:	430a      	orrs	r2, r1
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	e020      	b.n	800d14c <HAL_RCC_OscConfig+0xbc>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	23a0      	movs	r3, #160	; 0xa0
 800d110:	02db      	lsls	r3, r3, #11
 800d112:	429a      	cmp	r2, r3
 800d114:	d10e      	bne.n	800d134 <HAL_RCC_OscConfig+0xa4>
 800d116:	4baa      	ldr	r3, [pc, #680]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	4ba9      	ldr	r3, [pc, #676]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d11c:	2180      	movs	r1, #128	; 0x80
 800d11e:	02c9      	lsls	r1, r1, #11
 800d120:	430a      	orrs	r2, r1
 800d122:	601a      	str	r2, [r3, #0]
 800d124:	4ba6      	ldr	r3, [pc, #664]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	4ba5      	ldr	r3, [pc, #660]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d12a:	2180      	movs	r1, #128	; 0x80
 800d12c:	0249      	lsls	r1, r1, #9
 800d12e:	430a      	orrs	r2, r1
 800d130:	601a      	str	r2, [r3, #0]
 800d132:	e00b      	b.n	800d14c <HAL_RCC_OscConfig+0xbc>
 800d134:	4ba2      	ldr	r3, [pc, #648]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	4ba1      	ldr	r3, [pc, #644]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d13a:	49a2      	ldr	r1, [pc, #648]	; (800d3c4 <HAL_RCC_OscConfig+0x334>)
 800d13c:	400a      	ands	r2, r1
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	4b9f      	ldr	r3, [pc, #636]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	4b9e      	ldr	r3, [pc, #632]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d146:	49a0      	ldr	r1, [pc, #640]	; (800d3c8 <HAL_RCC_OscConfig+0x338>)
 800d148:	400a      	ands	r2, r1
 800d14a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d014      	beq.n	800d17e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d154:	f7fb ffd8 	bl	8009108 <HAL_GetTick>
 800d158:	0003      	movs	r3, r0
 800d15a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d15c:	e008      	b.n	800d170 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d15e:	f7fb ffd3 	bl	8009108 <HAL_GetTick>
 800d162:	0002      	movs	r2, r0
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	2b64      	cmp	r3, #100	; 0x64
 800d16a:	d901      	bls.n	800d170 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800d16c:	2303      	movs	r3, #3
 800d16e:	e2e9      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d170:	4b93      	ldr	r3, [pc, #588]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	2380      	movs	r3, #128	; 0x80
 800d176:	029b      	lsls	r3, r3, #10
 800d178:	4013      	ands	r3, r2
 800d17a:	d0f0      	beq.n	800d15e <HAL_RCC_OscConfig+0xce>
 800d17c:	e015      	b.n	800d1aa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d17e:	f7fb ffc3 	bl	8009108 <HAL_GetTick>
 800d182:	0003      	movs	r3, r0
 800d184:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d186:	e008      	b.n	800d19a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d188:	f7fb ffbe 	bl	8009108 <HAL_GetTick>
 800d18c:	0002      	movs	r2, r0
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	2b64      	cmp	r3, #100	; 0x64
 800d194:	d901      	bls.n	800d19a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800d196:	2303      	movs	r3, #3
 800d198:	e2d4      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d19a:	4b89      	ldr	r3, [pc, #548]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	2380      	movs	r3, #128	; 0x80
 800d1a0:	029b      	lsls	r3, r3, #10
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	d1f0      	bne.n	800d188 <HAL_RCC_OscConfig+0xf8>
 800d1a6:	e000      	b.n	800d1aa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2202      	movs	r2, #2
 800d1b0:	4013      	ands	r3, r2
 800d1b2:	d100      	bne.n	800d1b6 <HAL_RCC_OscConfig+0x126>
 800d1b4:	e099      	b.n	800d2ea <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1b6:	4b82      	ldr	r3, [pc, #520]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	2238      	movs	r2, #56	; 0x38
 800d1bc:	4013      	ands	r3, r2
 800d1be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d1c0:	4b7f      	ldr	r3, [pc, #508]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	2203      	movs	r2, #3
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	2b10      	cmp	r3, #16
 800d1ce:	d102      	bne.n	800d1d6 <HAL_RCC_OscConfig+0x146>
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d002      	beq.n	800d1dc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d135      	bne.n	800d248 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d1dc:	4b78      	ldr	r3, [pc, #480]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	2380      	movs	r3, #128	; 0x80
 800d1e2:	00db      	lsls	r3, r3, #3
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	d005      	beq.n	800d1f4 <HAL_RCC_OscConfig+0x164>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d101      	bne.n	800d1f4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e2a7      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1f4:	4b72      	ldr	r3, [pc, #456]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	4a74      	ldr	r2, [pc, #464]	; (800d3cc <HAL_RCC_OscConfig+0x33c>)
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	0019      	movs	r1, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	021a      	lsls	r2, r3, #8
 800d204:	4b6e      	ldr	r3, [pc, #440]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d206:	430a      	orrs	r2, r1
 800d208:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d112      	bne.n	800d236 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800d210:	4b6b      	ldr	r3, [pc, #428]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a6e      	ldr	r2, [pc, #440]	; (800d3d0 <HAL_RCC_OscConfig+0x340>)
 800d216:	4013      	ands	r3, r2
 800d218:	0019      	movs	r1, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	691a      	ldr	r2, [r3, #16]
 800d21e:	4b68      	ldr	r3, [pc, #416]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d220:	430a      	orrs	r2, r1
 800d222:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800d224:	4b66      	ldr	r3, [pc, #408]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	0adb      	lsrs	r3, r3, #11
 800d22a:	2207      	movs	r2, #7
 800d22c:	4013      	ands	r3, r2
 800d22e:	4a69      	ldr	r2, [pc, #420]	; (800d3d4 <HAL_RCC_OscConfig+0x344>)
 800d230:	40da      	lsrs	r2, r3
 800d232:	4b69      	ldr	r3, [pc, #420]	; (800d3d8 <HAL_RCC_OscConfig+0x348>)
 800d234:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d236:	4b69      	ldr	r3, [pc, #420]	; (800d3dc <HAL_RCC_OscConfig+0x34c>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	0018      	movs	r0, r3
 800d23c:	f7fb fd64 	bl	8008d08 <HAL_InitTick>
 800d240:	1e03      	subs	r3, r0, #0
 800d242:	d051      	beq.n	800d2e8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e27d      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d030      	beq.n	800d2b2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800d250:	4b5b      	ldr	r3, [pc, #364]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a5e      	ldr	r2, [pc, #376]	; (800d3d0 <HAL_RCC_OscConfig+0x340>)
 800d256:	4013      	ands	r3, r2
 800d258:	0019      	movs	r1, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	691a      	ldr	r2, [r3, #16]
 800d25e:	4b58      	ldr	r3, [pc, #352]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d260:	430a      	orrs	r2, r1
 800d262:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800d264:	4b56      	ldr	r3, [pc, #344]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	4b55      	ldr	r3, [pc, #340]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d26a:	2180      	movs	r1, #128	; 0x80
 800d26c:	0049      	lsls	r1, r1, #1
 800d26e:	430a      	orrs	r2, r1
 800d270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d272:	f7fb ff49 	bl	8009108 <HAL_GetTick>
 800d276:	0003      	movs	r3, r0
 800d278:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d27a:	e008      	b.n	800d28e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d27c:	f7fb ff44 	bl	8009108 <HAL_GetTick>
 800d280:	0002      	movs	r2, r0
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	2b02      	cmp	r3, #2
 800d288:	d901      	bls.n	800d28e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800d28a:	2303      	movs	r3, #3
 800d28c:	e25a      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d28e:	4b4c      	ldr	r3, [pc, #304]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	2380      	movs	r3, #128	; 0x80
 800d294:	00db      	lsls	r3, r3, #3
 800d296:	4013      	ands	r3, r2
 800d298:	d0f0      	beq.n	800d27c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d29a:	4b49      	ldr	r3, [pc, #292]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	4a4b      	ldr	r2, [pc, #300]	; (800d3cc <HAL_RCC_OscConfig+0x33c>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	0019      	movs	r1, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	021a      	lsls	r2, r3, #8
 800d2aa:	4b45      	ldr	r3, [pc, #276]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d2ac:	430a      	orrs	r2, r1
 800d2ae:	605a      	str	r2, [r3, #4]
 800d2b0:	e01b      	b.n	800d2ea <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800d2b2:	4b43      	ldr	r3, [pc, #268]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	4b42      	ldr	r3, [pc, #264]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d2b8:	4949      	ldr	r1, [pc, #292]	; (800d3e0 <HAL_RCC_OscConfig+0x350>)
 800d2ba:	400a      	ands	r2, r1
 800d2bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2be:	f7fb ff23 	bl	8009108 <HAL_GetTick>
 800d2c2:	0003      	movs	r3, r0
 800d2c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d2c6:	e008      	b.n	800d2da <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d2c8:	f7fb ff1e 	bl	8009108 <HAL_GetTick>
 800d2cc:	0002      	movs	r2, r0
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	2b02      	cmp	r3, #2
 800d2d4:	d901      	bls.n	800d2da <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	e234      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d2da:	4b39      	ldr	r3, [pc, #228]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	2380      	movs	r3, #128	; 0x80
 800d2e0:	00db      	lsls	r3, r3, #3
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	d1f0      	bne.n	800d2c8 <HAL_RCC_OscConfig+0x238>
 800d2e6:	e000      	b.n	800d2ea <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d2e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2208      	movs	r2, #8
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	d047      	beq.n	800d384 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800d2f4:	4b32      	ldr	r3, [pc, #200]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	2238      	movs	r2, #56	; 0x38
 800d2fa:	4013      	ands	r3, r2
 800d2fc:	2b18      	cmp	r3, #24
 800d2fe:	d10a      	bne.n	800d316 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800d300:	4b2f      	ldr	r3, [pc, #188]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d304:	2202      	movs	r2, #2
 800d306:	4013      	ands	r3, r2
 800d308:	d03c      	beq.n	800d384 <HAL_RCC_OscConfig+0x2f4>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	699b      	ldr	r3, [r3, #24]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d138      	bne.n	800d384 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	e216      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	699b      	ldr	r3, [r3, #24]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d019      	beq.n	800d352 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800d31e:	4b28      	ldr	r3, [pc, #160]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d320:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d322:	4b27      	ldr	r3, [pc, #156]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d324:	2101      	movs	r1, #1
 800d326:	430a      	orrs	r2, r1
 800d328:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d32a:	f7fb feed 	bl	8009108 <HAL_GetTick>
 800d32e:	0003      	movs	r3, r0
 800d330:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d332:	e008      	b.n	800d346 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d334:	f7fb fee8 	bl	8009108 <HAL_GetTick>
 800d338:	0002      	movs	r2, r0
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d901      	bls.n	800d346 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800d342:	2303      	movs	r3, #3
 800d344:	e1fe      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d346:	4b1e      	ldr	r3, [pc, #120]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d34a:	2202      	movs	r2, #2
 800d34c:	4013      	ands	r3, r2
 800d34e:	d0f1      	beq.n	800d334 <HAL_RCC_OscConfig+0x2a4>
 800d350:	e018      	b.n	800d384 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800d352:	4b1b      	ldr	r3, [pc, #108]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d354:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d356:	4b1a      	ldr	r3, [pc, #104]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d358:	2101      	movs	r1, #1
 800d35a:	438a      	bics	r2, r1
 800d35c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d35e:	f7fb fed3 	bl	8009108 <HAL_GetTick>
 800d362:	0003      	movs	r3, r0
 800d364:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d366:	e008      	b.n	800d37a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d368:	f7fb fece 	bl	8009108 <HAL_GetTick>
 800d36c:	0002      	movs	r2, r0
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	2b02      	cmp	r3, #2
 800d374:	d901      	bls.n	800d37a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800d376:	2303      	movs	r3, #3
 800d378:	e1e4      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d37a:	4b11      	ldr	r3, [pc, #68]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d37e:	2202      	movs	r2, #2
 800d380:	4013      	ands	r3, r2
 800d382:	d1f1      	bne.n	800d368 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2204      	movs	r2, #4
 800d38a:	4013      	ands	r3, r2
 800d38c:	d100      	bne.n	800d390 <HAL_RCC_OscConfig+0x300>
 800d38e:	e0c7      	b.n	800d520 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d390:	231f      	movs	r3, #31
 800d392:	18fb      	adds	r3, r7, r3
 800d394:	2200      	movs	r2, #0
 800d396:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800d398:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	2238      	movs	r2, #56	; 0x38
 800d39e:	4013      	ands	r3, r2
 800d3a0:	2b20      	cmp	r3, #32
 800d3a2:	d11f      	bne.n	800d3e4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800d3a4:	4b06      	ldr	r3, [pc, #24]	; (800d3c0 <HAL_RCC_OscConfig+0x330>)
 800d3a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	d100      	bne.n	800d3b0 <HAL_RCC_OscConfig+0x320>
 800d3ae:	e0b7      	b.n	800d520 <HAL_RCC_OscConfig+0x490>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d000      	beq.n	800d3ba <HAL_RCC_OscConfig+0x32a>
 800d3b8:	e0b2      	b.n	800d520 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e1c2      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
 800d3be:	46c0      	nop			; (mov r8, r8)
 800d3c0:	40021000 	.word	0x40021000
 800d3c4:	fffeffff 	.word	0xfffeffff
 800d3c8:	fffbffff 	.word	0xfffbffff
 800d3cc:	ffff80ff 	.word	0xffff80ff
 800d3d0:	ffffc7ff 	.word	0xffffc7ff
 800d3d4:	00f42400 	.word	0x00f42400
 800d3d8:	20000048 	.word	0x20000048
 800d3dc:	2000004c 	.word	0x2000004c
 800d3e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d3e4:	4bb5      	ldr	r3, [pc, #724]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d3e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3e8:	2380      	movs	r3, #128	; 0x80
 800d3ea:	055b      	lsls	r3, r3, #21
 800d3ec:	4013      	ands	r3, r2
 800d3ee:	d101      	bne.n	800d3f4 <HAL_RCC_OscConfig+0x364>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e000      	b.n	800d3f6 <HAL_RCC_OscConfig+0x366>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d011      	beq.n	800d41e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800d3fa:	4bb0      	ldr	r3, [pc, #704]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d3fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3fe:	4baf      	ldr	r3, [pc, #700]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d400:	2180      	movs	r1, #128	; 0x80
 800d402:	0549      	lsls	r1, r1, #21
 800d404:	430a      	orrs	r2, r1
 800d406:	63da      	str	r2, [r3, #60]	; 0x3c
 800d408:	4bac      	ldr	r3, [pc, #688]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d40a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d40c:	2380      	movs	r3, #128	; 0x80
 800d40e:	055b      	lsls	r3, r3, #21
 800d410:	4013      	ands	r3, r2
 800d412:	60fb      	str	r3, [r7, #12]
 800d414:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800d416:	231f      	movs	r3, #31
 800d418:	18fb      	adds	r3, r7, r3
 800d41a:	2201      	movs	r2, #1
 800d41c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d41e:	4ba8      	ldr	r3, [pc, #672]	; (800d6c0 <HAL_RCC_OscConfig+0x630>)
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	2380      	movs	r3, #128	; 0x80
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	4013      	ands	r3, r2
 800d428:	d11a      	bne.n	800d460 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d42a:	4ba5      	ldr	r3, [pc, #660]	; (800d6c0 <HAL_RCC_OscConfig+0x630>)
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	4ba4      	ldr	r3, [pc, #656]	; (800d6c0 <HAL_RCC_OscConfig+0x630>)
 800d430:	2180      	movs	r1, #128	; 0x80
 800d432:	0049      	lsls	r1, r1, #1
 800d434:	430a      	orrs	r2, r1
 800d436:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800d438:	f7fb fe66 	bl	8009108 <HAL_GetTick>
 800d43c:	0003      	movs	r3, r0
 800d43e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d440:	e008      	b.n	800d454 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d442:	f7fb fe61 	bl	8009108 <HAL_GetTick>
 800d446:	0002      	movs	r2, r0
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	1ad3      	subs	r3, r2, r3
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	d901      	bls.n	800d454 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800d450:	2303      	movs	r3, #3
 800d452:	e177      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d454:	4b9a      	ldr	r3, [pc, #616]	; (800d6c0 <HAL_RCC_OscConfig+0x630>)
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	2380      	movs	r3, #128	; 0x80
 800d45a:	005b      	lsls	r3, r3, #1
 800d45c:	4013      	ands	r3, r2
 800d45e:	d0f0      	beq.n	800d442 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d106      	bne.n	800d476 <HAL_RCC_OscConfig+0x3e6>
 800d468:	4b94      	ldr	r3, [pc, #592]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d46a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d46c:	4b93      	ldr	r3, [pc, #588]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d46e:	2101      	movs	r1, #1
 800d470:	430a      	orrs	r2, r1
 800d472:	65da      	str	r2, [r3, #92]	; 0x5c
 800d474:	e01c      	b.n	800d4b0 <HAL_RCC_OscConfig+0x420>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	d10c      	bne.n	800d498 <HAL_RCC_OscConfig+0x408>
 800d47e:	4b8f      	ldr	r3, [pc, #572]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d480:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d482:	4b8e      	ldr	r3, [pc, #568]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d484:	2104      	movs	r1, #4
 800d486:	430a      	orrs	r2, r1
 800d488:	65da      	str	r2, [r3, #92]	; 0x5c
 800d48a:	4b8c      	ldr	r3, [pc, #560]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d48c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d48e:	4b8b      	ldr	r3, [pc, #556]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d490:	2101      	movs	r1, #1
 800d492:	430a      	orrs	r2, r1
 800d494:	65da      	str	r2, [r3, #92]	; 0x5c
 800d496:	e00b      	b.n	800d4b0 <HAL_RCC_OscConfig+0x420>
 800d498:	4b88      	ldr	r3, [pc, #544]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d49a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d49c:	4b87      	ldr	r3, [pc, #540]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d49e:	2101      	movs	r1, #1
 800d4a0:	438a      	bics	r2, r1
 800d4a2:	65da      	str	r2, [r3, #92]	; 0x5c
 800d4a4:	4b85      	ldr	r3, [pc, #532]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d4a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4a8:	4b84      	ldr	r3, [pc, #528]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d4aa:	2104      	movs	r1, #4
 800d4ac:	438a      	bics	r2, r1
 800d4ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d014      	beq.n	800d4e2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4b8:	f7fb fe26 	bl	8009108 <HAL_GetTick>
 800d4bc:	0003      	movs	r3, r0
 800d4be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d4c0:	e009      	b.n	800d4d6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4c2:	f7fb fe21 	bl	8009108 <HAL_GetTick>
 800d4c6:	0002      	movs	r2, r0
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	4a7d      	ldr	r2, [pc, #500]	; (800d6c4 <HAL_RCC_OscConfig+0x634>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d901      	bls.n	800d4d6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	e136      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d4d6:	4b79      	ldr	r3, [pc, #484]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d4d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4da:	2202      	movs	r2, #2
 800d4dc:	4013      	ands	r3, r2
 800d4de:	d0f0      	beq.n	800d4c2 <HAL_RCC_OscConfig+0x432>
 800d4e0:	e013      	b.n	800d50a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4e2:	f7fb fe11 	bl	8009108 <HAL_GetTick>
 800d4e6:	0003      	movs	r3, r0
 800d4e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d4ea:	e009      	b.n	800d500 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4ec:	f7fb fe0c 	bl	8009108 <HAL_GetTick>
 800d4f0:	0002      	movs	r2, r0
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	4a73      	ldr	r2, [pc, #460]	; (800d6c4 <HAL_RCC_OscConfig+0x634>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d901      	bls.n	800d500 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	e121      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d500:	4b6e      	ldr	r3, [pc, #440]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d504:	2202      	movs	r2, #2
 800d506:	4013      	ands	r3, r2
 800d508:	d1f0      	bne.n	800d4ec <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d50a:	231f      	movs	r3, #31
 800d50c:	18fb      	adds	r3, r7, r3
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d105      	bne.n	800d520 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d514:	4b69      	ldr	r3, [pc, #420]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d518:	4b68      	ldr	r3, [pc, #416]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d51a:	496b      	ldr	r1, [pc, #428]	; (800d6c8 <HAL_RCC_OscConfig+0x638>)
 800d51c:	400a      	ands	r2, r1
 800d51e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2220      	movs	r2, #32
 800d526:	4013      	ands	r3, r2
 800d528:	d039      	beq.n	800d59e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	69db      	ldr	r3, [r3, #28]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d01b      	beq.n	800d56a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d532:	4b62      	ldr	r3, [pc, #392]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	4b61      	ldr	r3, [pc, #388]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d538:	2180      	movs	r1, #128	; 0x80
 800d53a:	03c9      	lsls	r1, r1, #15
 800d53c:	430a      	orrs	r2, r1
 800d53e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d540:	f7fb fde2 	bl	8009108 <HAL_GetTick>
 800d544:	0003      	movs	r3, r0
 800d546:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d548:	e008      	b.n	800d55c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d54a:	f7fb fddd 	bl	8009108 <HAL_GetTick>
 800d54e:	0002      	movs	r2, r0
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	2b02      	cmp	r3, #2
 800d556:	d901      	bls.n	800d55c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800d558:	2303      	movs	r3, #3
 800d55a:	e0f3      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800d55c:	4b57      	ldr	r3, [pc, #348]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	2380      	movs	r3, #128	; 0x80
 800d562:	041b      	lsls	r3, r3, #16
 800d564:	4013      	ands	r3, r2
 800d566:	d0f0      	beq.n	800d54a <HAL_RCC_OscConfig+0x4ba>
 800d568:	e019      	b.n	800d59e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d56a:	4b54      	ldr	r3, [pc, #336]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	4b53      	ldr	r3, [pc, #332]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d570:	4956      	ldr	r1, [pc, #344]	; (800d6cc <HAL_RCC_OscConfig+0x63c>)
 800d572:	400a      	ands	r2, r1
 800d574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d576:	f7fb fdc7 	bl	8009108 <HAL_GetTick>
 800d57a:	0003      	movs	r3, r0
 800d57c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d57e:	e008      	b.n	800d592 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d580:	f7fb fdc2 	bl	8009108 <HAL_GetTick>
 800d584:	0002      	movs	r2, r0
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	1ad3      	subs	r3, r2, r3
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d901      	bls.n	800d592 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e0d8      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800d592:	4b4a      	ldr	r3, [pc, #296]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	2380      	movs	r3, #128	; 0x80
 800d598:	041b      	lsls	r3, r3, #16
 800d59a:	4013      	ands	r3, r2
 800d59c:	d1f0      	bne.n	800d580 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d100      	bne.n	800d5a8 <HAL_RCC_OscConfig+0x518>
 800d5a6:	e0cc      	b.n	800d742 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d5a8:	4b44      	ldr	r3, [pc, #272]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	2238      	movs	r2, #56	; 0x38
 800d5ae:	4013      	ands	r3, r2
 800d5b0:	2b10      	cmp	r3, #16
 800d5b2:	d100      	bne.n	800d5b6 <HAL_RCC_OscConfig+0x526>
 800d5b4:	e07b      	b.n	800d6ae <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a1b      	ldr	r3, [r3, #32]
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d156      	bne.n	800d66c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5be:	4b3f      	ldr	r3, [pc, #252]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	4b3e      	ldr	r3, [pc, #248]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d5c4:	4942      	ldr	r1, [pc, #264]	; (800d6d0 <HAL_RCC_OscConfig+0x640>)
 800d5c6:	400a      	ands	r2, r1
 800d5c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5ca:	f7fb fd9d 	bl	8009108 <HAL_GetTick>
 800d5ce:	0003      	movs	r3, r0
 800d5d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d5d2:	e008      	b.n	800d5e6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5d4:	f7fb fd98 	bl	8009108 <HAL_GetTick>
 800d5d8:	0002      	movs	r2, r0
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d901      	bls.n	800d5e6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	e0ae      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d5e6:	4b35      	ldr	r3, [pc, #212]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	2380      	movs	r3, #128	; 0x80
 800d5ec:	049b      	lsls	r3, r3, #18
 800d5ee:	4013      	ands	r3, r2
 800d5f0:	d1f0      	bne.n	800d5d4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d5f2:	4b32      	ldr	r3, [pc, #200]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	4a37      	ldr	r2, [pc, #220]	; (800d6d4 <HAL_RCC_OscConfig+0x644>)
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	0019      	movs	r1, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d604:	431a      	orrs	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60a:	021b      	lsls	r3, r3, #8
 800d60c:	431a      	orrs	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d612:	431a      	orrs	r2, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d618:	431a      	orrs	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61e:	431a      	orrs	r2, r3
 800d620:	4b26      	ldr	r3, [pc, #152]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d622:	430a      	orrs	r2, r1
 800d624:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d626:	4b25      	ldr	r3, [pc, #148]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	4b24      	ldr	r3, [pc, #144]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d62c:	2180      	movs	r1, #128	; 0x80
 800d62e:	0449      	lsls	r1, r1, #17
 800d630:	430a      	orrs	r2, r1
 800d632:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800d634:	4b21      	ldr	r3, [pc, #132]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d636:	68da      	ldr	r2, [r3, #12]
 800d638:	4b20      	ldr	r3, [pc, #128]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d63a:	2180      	movs	r1, #128	; 0x80
 800d63c:	0549      	lsls	r1, r1, #21
 800d63e:	430a      	orrs	r2, r1
 800d640:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d642:	f7fb fd61 	bl	8009108 <HAL_GetTick>
 800d646:	0003      	movs	r3, r0
 800d648:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d64a:	e008      	b.n	800d65e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d64c:	f7fb fd5c 	bl	8009108 <HAL_GetTick>
 800d650:	0002      	movs	r2, r0
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	1ad3      	subs	r3, r2, r3
 800d656:	2b02      	cmp	r3, #2
 800d658:	d901      	bls.n	800d65e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800d65a:	2303      	movs	r3, #3
 800d65c:	e072      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d65e:	4b17      	ldr	r3, [pc, #92]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	2380      	movs	r3, #128	; 0x80
 800d664:	049b      	lsls	r3, r3, #18
 800d666:	4013      	ands	r3, r2
 800d668:	d0f0      	beq.n	800d64c <HAL_RCC_OscConfig+0x5bc>
 800d66a:	e06a      	b.n	800d742 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d66c:	4b13      	ldr	r3, [pc, #76]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	4b12      	ldr	r3, [pc, #72]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d672:	4917      	ldr	r1, [pc, #92]	; (800d6d0 <HAL_RCC_OscConfig+0x640>)
 800d674:	400a      	ands	r2, r1
 800d676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d678:	f7fb fd46 	bl	8009108 <HAL_GetTick>
 800d67c:	0003      	movs	r3, r0
 800d67e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d680:	e008      	b.n	800d694 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d682:	f7fb fd41 	bl	8009108 <HAL_GetTick>
 800d686:	0002      	movs	r2, r0
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d901      	bls.n	800d694 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800d690:	2303      	movs	r3, #3
 800d692:	e057      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d694:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	2380      	movs	r3, #128	; 0x80
 800d69a:	049b      	lsls	r3, r3, #18
 800d69c:	4013      	ands	r3, r2
 800d69e:	d1f0      	bne.n	800d682 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800d6a0:	4b06      	ldr	r3, [pc, #24]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d6a2:	68da      	ldr	r2, [r3, #12]
 800d6a4:	4b05      	ldr	r3, [pc, #20]	; (800d6bc <HAL_RCC_OscConfig+0x62c>)
 800d6a6:	490c      	ldr	r1, [pc, #48]	; (800d6d8 <HAL_RCC_OscConfig+0x648>)
 800d6a8:	400a      	ands	r2, r1
 800d6aa:	60da      	str	r2, [r3, #12]
 800d6ac:	e049      	b.n	800d742 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a1b      	ldr	r3, [r3, #32]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d112      	bne.n	800d6dc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e044      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
 800d6ba:	46c0      	nop			; (mov r8, r8)
 800d6bc:	40021000 	.word	0x40021000
 800d6c0:	40007000 	.word	0x40007000
 800d6c4:	00001388 	.word	0x00001388
 800d6c8:	efffffff 	.word	0xefffffff
 800d6cc:	ffbfffff 	.word	0xffbfffff
 800d6d0:	feffffff 	.word	0xfeffffff
 800d6d4:	11c1808c 	.word	0x11c1808c
 800d6d8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800d6dc:	4b1b      	ldr	r3, [pc, #108]	; (800d74c <HAL_RCC_OscConfig+0x6bc>)
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	2203      	movs	r2, #3
 800d6e6:	401a      	ands	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d126      	bne.n	800d73e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	2270      	movs	r2, #112	; 0x70
 800d6f4:	401a      	ands	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d11f      	bne.n	800d73e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	23fe      	movs	r3, #254	; 0xfe
 800d702:	01db      	lsls	r3, r3, #7
 800d704:	401a      	ands	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d116      	bne.n	800d73e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d710:	697a      	ldr	r2, [r7, #20]
 800d712:	23f8      	movs	r3, #248	; 0xf8
 800d714:	039b      	lsls	r3, r3, #14
 800d716:	401a      	ands	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d10e      	bne.n	800d73e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d720:	697a      	ldr	r2, [r7, #20]
 800d722:	23e0      	movs	r3, #224	; 0xe0
 800d724:	051b      	lsls	r3, r3, #20
 800d726:	401a      	ands	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d106      	bne.n	800d73e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	0f5b      	lsrs	r3, r3, #29
 800d734:	075a      	lsls	r2, r3, #29
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d001      	beq.n	800d742 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	e000      	b.n	800d744 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	0018      	movs	r0, r3
 800d746:	46bd      	mov	sp, r7
 800d748:	b008      	add	sp, #32
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	40021000 	.word	0x40021000

0800d750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d101      	bne.n	800d764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	e0e9      	b.n	800d938 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d764:	4b76      	ldr	r3, [pc, #472]	; (800d940 <HAL_RCC_ClockConfig+0x1f0>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2207      	movs	r2, #7
 800d76a:	4013      	ands	r3, r2
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d91e      	bls.n	800d7b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d772:	4b73      	ldr	r3, [pc, #460]	; (800d940 <HAL_RCC_ClockConfig+0x1f0>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2207      	movs	r2, #7
 800d778:	4393      	bics	r3, r2
 800d77a:	0019      	movs	r1, r3
 800d77c:	4b70      	ldr	r3, [pc, #448]	; (800d940 <HAL_RCC_ClockConfig+0x1f0>)
 800d77e:	683a      	ldr	r2, [r7, #0]
 800d780:	430a      	orrs	r2, r1
 800d782:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d784:	f7fb fcc0 	bl	8009108 <HAL_GetTick>
 800d788:	0003      	movs	r3, r0
 800d78a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d78c:	e009      	b.n	800d7a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d78e:	f7fb fcbb 	bl	8009108 <HAL_GetTick>
 800d792:	0002      	movs	r2, r0
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	4a6a      	ldr	r2, [pc, #424]	; (800d944 <HAL_RCC_ClockConfig+0x1f4>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d901      	bls.n	800d7a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800d79e:	2303      	movs	r3, #3
 800d7a0:	e0ca      	b.n	800d938 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d7a2:	4b67      	ldr	r3, [pc, #412]	; (800d940 <HAL_RCC_ClockConfig+0x1f0>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2207      	movs	r2, #7
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d1ee      	bne.n	800d78e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2202      	movs	r2, #2
 800d7b6:	4013      	ands	r3, r2
 800d7b8:	d015      	beq.n	800d7e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2204      	movs	r2, #4
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	d006      	beq.n	800d7d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800d7c4:	4b60      	ldr	r3, [pc, #384]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d7c6:	689a      	ldr	r2, [r3, #8]
 800d7c8:	4b5f      	ldr	r3, [pc, #380]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d7ca:	21e0      	movs	r1, #224	; 0xe0
 800d7cc:	01c9      	lsls	r1, r1, #7
 800d7ce:	430a      	orrs	r2, r1
 800d7d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d7d2:	4b5d      	ldr	r3, [pc, #372]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d7d4:	689b      	ldr	r3, [r3, #8]
 800d7d6:	4a5d      	ldr	r2, [pc, #372]	; (800d94c <HAL_RCC_ClockConfig+0x1fc>)
 800d7d8:	4013      	ands	r3, r2
 800d7da:	0019      	movs	r1, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	689a      	ldr	r2, [r3, #8]
 800d7e0:	4b59      	ldr	r3, [pc, #356]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d7e2:	430a      	orrs	r2, r1
 800d7e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	d057      	beq.n	800d8a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d107      	bne.n	800d808 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d7f8:	4b53      	ldr	r3, [pc, #332]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	2380      	movs	r3, #128	; 0x80
 800d7fe:	029b      	lsls	r3, r3, #10
 800d800:	4013      	ands	r3, r2
 800d802:	d12b      	bne.n	800d85c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	e097      	b.n	800d938 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d107      	bne.n	800d820 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d810:	4b4d      	ldr	r3, [pc, #308]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d812:	681a      	ldr	r2, [r3, #0]
 800d814:	2380      	movs	r3, #128	; 0x80
 800d816:	049b      	lsls	r3, r3, #18
 800d818:	4013      	ands	r3, r2
 800d81a:	d11f      	bne.n	800d85c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	e08b      	b.n	800d938 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d107      	bne.n	800d838 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d828:	4b47      	ldr	r3, [pc, #284]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	2380      	movs	r3, #128	; 0x80
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	4013      	ands	r3, r2
 800d832:	d113      	bne.n	800d85c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	e07f      	b.n	800d938 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	2b03      	cmp	r3, #3
 800d83e:	d106      	bne.n	800d84e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d840:	4b41      	ldr	r3, [pc, #260]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d844:	2202      	movs	r2, #2
 800d846:	4013      	ands	r3, r2
 800d848:	d108      	bne.n	800d85c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e074      	b.n	800d938 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d84e:	4b3e      	ldr	r3, [pc, #248]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d852:	2202      	movs	r2, #2
 800d854:	4013      	ands	r3, r2
 800d856:	d101      	bne.n	800d85c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	e06d      	b.n	800d938 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d85c:	4b3a      	ldr	r3, [pc, #232]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	2207      	movs	r2, #7
 800d862:	4393      	bics	r3, r2
 800d864:	0019      	movs	r1, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	4b37      	ldr	r3, [pc, #220]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d86c:	430a      	orrs	r2, r1
 800d86e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d870:	f7fb fc4a 	bl	8009108 <HAL_GetTick>
 800d874:	0003      	movs	r3, r0
 800d876:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d878:	e009      	b.n	800d88e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d87a:	f7fb fc45 	bl	8009108 <HAL_GetTick>
 800d87e:	0002      	movs	r2, r0
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	4a2f      	ldr	r2, [pc, #188]	; (800d944 <HAL_RCC_ClockConfig+0x1f4>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d901      	bls.n	800d88e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800d88a:	2303      	movs	r3, #3
 800d88c:	e054      	b.n	800d938 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d88e:	4b2e      	ldr	r3, [pc, #184]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	2238      	movs	r2, #56	; 0x38
 800d894:	401a      	ands	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d1ec      	bne.n	800d87a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d8a0:	4b27      	ldr	r3, [pc, #156]	; (800d940 <HAL_RCC_ClockConfig+0x1f0>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2207      	movs	r2, #7
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d21e      	bcs.n	800d8ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8ae:	4b24      	ldr	r3, [pc, #144]	; (800d940 <HAL_RCC_ClockConfig+0x1f0>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2207      	movs	r2, #7
 800d8b4:	4393      	bics	r3, r2
 800d8b6:	0019      	movs	r1, r3
 800d8b8:	4b21      	ldr	r3, [pc, #132]	; (800d940 <HAL_RCC_ClockConfig+0x1f0>)
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	430a      	orrs	r2, r1
 800d8be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d8c0:	f7fb fc22 	bl	8009108 <HAL_GetTick>
 800d8c4:	0003      	movs	r3, r0
 800d8c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d8c8:	e009      	b.n	800d8de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d8ca:	f7fb fc1d 	bl	8009108 <HAL_GetTick>
 800d8ce:	0002      	movs	r2, r0
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	4a1b      	ldr	r2, [pc, #108]	; (800d944 <HAL_RCC_ClockConfig+0x1f4>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d901      	bls.n	800d8de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800d8da:	2303      	movs	r3, #3
 800d8dc:	e02c      	b.n	800d938 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d8de:	4b18      	ldr	r3, [pc, #96]	; (800d940 <HAL_RCC_ClockConfig+0x1f0>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2207      	movs	r2, #7
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d1ee      	bne.n	800d8ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2204      	movs	r2, #4
 800d8f2:	4013      	ands	r3, r2
 800d8f4:	d009      	beq.n	800d90a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800d8f6:	4b14      	ldr	r3, [pc, #80]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	4a15      	ldr	r2, [pc, #84]	; (800d950 <HAL_RCC_ClockConfig+0x200>)
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	0019      	movs	r1, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	68da      	ldr	r2, [r3, #12]
 800d904:	4b10      	ldr	r3, [pc, #64]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d906:	430a      	orrs	r2, r1
 800d908:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800d90a:	f000 f829 	bl	800d960 <HAL_RCC_GetSysClockFreq>
 800d90e:	0001      	movs	r1, r0
 800d910:	4b0d      	ldr	r3, [pc, #52]	; (800d948 <HAL_RCC_ClockConfig+0x1f8>)
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	0a1b      	lsrs	r3, r3, #8
 800d916:	220f      	movs	r2, #15
 800d918:	401a      	ands	r2, r3
 800d91a:	4b0e      	ldr	r3, [pc, #56]	; (800d954 <HAL_RCC_ClockConfig+0x204>)
 800d91c:	0092      	lsls	r2, r2, #2
 800d91e:	58d3      	ldr	r3, [r2, r3]
 800d920:	221f      	movs	r2, #31
 800d922:	4013      	ands	r3, r2
 800d924:	000a      	movs	r2, r1
 800d926:	40da      	lsrs	r2, r3
 800d928:	4b0b      	ldr	r3, [pc, #44]	; (800d958 <HAL_RCC_ClockConfig+0x208>)
 800d92a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d92c:	4b0b      	ldr	r3, [pc, #44]	; (800d95c <HAL_RCC_ClockConfig+0x20c>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	0018      	movs	r0, r3
 800d932:	f7fb f9e9 	bl	8008d08 <HAL_InitTick>
 800d936:	0003      	movs	r3, r0
}
 800d938:	0018      	movs	r0, r3
 800d93a:	46bd      	mov	sp, r7
 800d93c:	b004      	add	sp, #16
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	40022000 	.word	0x40022000
 800d944:	00001388 	.word	0x00001388
 800d948:	40021000 	.word	0x40021000
 800d94c:	fffff0ff 	.word	0xfffff0ff
 800d950:	ffff8fff 	.word	0xffff8fff
 800d954:	08024048 	.word	0x08024048
 800d958:	20000048 	.word	0x20000048
 800d95c:	2000004c 	.word	0x2000004c

0800d960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b086      	sub	sp, #24
 800d964:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d966:	4b3c      	ldr	r3, [pc, #240]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	2238      	movs	r2, #56	; 0x38
 800d96c:	4013      	ands	r3, r2
 800d96e:	d10f      	bne.n	800d990 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800d970:	4b39      	ldr	r3, [pc, #228]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	0adb      	lsrs	r3, r3, #11
 800d976:	2207      	movs	r2, #7
 800d978:	4013      	ands	r3, r2
 800d97a:	2201      	movs	r2, #1
 800d97c:	409a      	lsls	r2, r3
 800d97e:	0013      	movs	r3, r2
 800d980:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800d982:	6839      	ldr	r1, [r7, #0]
 800d984:	4835      	ldr	r0, [pc, #212]	; (800da5c <HAL_RCC_GetSysClockFreq+0xfc>)
 800d986:	f7f8 fc33 	bl	80061f0 <__udivsi3>
 800d98a:	0003      	movs	r3, r0
 800d98c:	613b      	str	r3, [r7, #16]
 800d98e:	e05d      	b.n	800da4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d990:	4b31      	ldr	r3, [pc, #196]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	2238      	movs	r2, #56	; 0x38
 800d996:	4013      	ands	r3, r2
 800d998:	2b08      	cmp	r3, #8
 800d99a:	d102      	bne.n	800d9a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d99c:	4b30      	ldr	r3, [pc, #192]	; (800da60 <HAL_RCC_GetSysClockFreq+0x100>)
 800d99e:	613b      	str	r3, [r7, #16]
 800d9a0:	e054      	b.n	800da4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d9a2:	4b2d      	ldr	r3, [pc, #180]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	2238      	movs	r2, #56	; 0x38
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	2b10      	cmp	r3, #16
 800d9ac:	d138      	bne.n	800da20 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800d9ae:	4b2a      	ldr	r3, [pc, #168]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	2203      	movs	r2, #3
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d9b8:	4b27      	ldr	r3, [pc, #156]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	091b      	lsrs	r3, r3, #4
 800d9be:	2207      	movs	r2, #7
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b03      	cmp	r3, #3
 800d9ca:	d10d      	bne.n	800d9e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d9cc:	68b9      	ldr	r1, [r7, #8]
 800d9ce:	4824      	ldr	r0, [pc, #144]	; (800da60 <HAL_RCC_GetSysClockFreq+0x100>)
 800d9d0:	f7f8 fc0e 	bl	80061f0 <__udivsi3>
 800d9d4:	0003      	movs	r3, r0
 800d9d6:	0019      	movs	r1, r3
 800d9d8:	4b1f      	ldr	r3, [pc, #124]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	0a1b      	lsrs	r3, r3, #8
 800d9de:	227f      	movs	r2, #127	; 0x7f
 800d9e0:	4013      	ands	r3, r2
 800d9e2:	434b      	muls	r3, r1
 800d9e4:	617b      	str	r3, [r7, #20]
        break;
 800d9e6:	e00d      	b.n	800da04 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800d9e8:	68b9      	ldr	r1, [r7, #8]
 800d9ea:	481c      	ldr	r0, [pc, #112]	; (800da5c <HAL_RCC_GetSysClockFreq+0xfc>)
 800d9ec:	f7f8 fc00 	bl	80061f0 <__udivsi3>
 800d9f0:	0003      	movs	r3, r0
 800d9f2:	0019      	movs	r1, r3
 800d9f4:	4b18      	ldr	r3, [pc, #96]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	0a1b      	lsrs	r3, r3, #8
 800d9fa:	227f      	movs	r2, #127	; 0x7f
 800d9fc:	4013      	ands	r3, r2
 800d9fe:	434b      	muls	r3, r1
 800da00:	617b      	str	r3, [r7, #20]
        break;
 800da02:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800da04:	4b14      	ldr	r3, [pc, #80]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	0f5b      	lsrs	r3, r3, #29
 800da0a:	2207      	movs	r2, #7
 800da0c:	4013      	ands	r3, r2
 800da0e:	3301      	adds	r3, #1
 800da10:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800da12:	6879      	ldr	r1, [r7, #4]
 800da14:	6978      	ldr	r0, [r7, #20]
 800da16:	f7f8 fbeb 	bl	80061f0 <__udivsi3>
 800da1a:	0003      	movs	r3, r0
 800da1c:	613b      	str	r3, [r7, #16]
 800da1e:	e015      	b.n	800da4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800da20:	4b0d      	ldr	r3, [pc, #52]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	2238      	movs	r2, #56	; 0x38
 800da26:	4013      	ands	r3, r2
 800da28:	2b20      	cmp	r3, #32
 800da2a:	d103      	bne.n	800da34 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800da2c:	2380      	movs	r3, #128	; 0x80
 800da2e:	021b      	lsls	r3, r3, #8
 800da30:	613b      	str	r3, [r7, #16]
 800da32:	e00b      	b.n	800da4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800da34:	4b08      	ldr	r3, [pc, #32]	; (800da58 <HAL_RCC_GetSysClockFreq+0xf8>)
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	2238      	movs	r2, #56	; 0x38
 800da3a:	4013      	ands	r3, r2
 800da3c:	2b18      	cmp	r3, #24
 800da3e:	d103      	bne.n	800da48 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800da40:	23fa      	movs	r3, #250	; 0xfa
 800da42:	01db      	lsls	r3, r3, #7
 800da44:	613b      	str	r3, [r7, #16]
 800da46:	e001      	b.n	800da4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800da48:	2300      	movs	r3, #0
 800da4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800da4c:	693b      	ldr	r3, [r7, #16]
}
 800da4e:	0018      	movs	r0, r3
 800da50:	46bd      	mov	sp, r7
 800da52:	b006      	add	sp, #24
 800da54:	bd80      	pop	{r7, pc}
 800da56:	46c0      	nop			; (mov r8, r8)
 800da58:	40021000 	.word	0x40021000
 800da5c:	00f42400 	.word	0x00f42400
 800da60:	007a1200 	.word	0x007a1200

0800da64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800da68:	4b02      	ldr	r3, [pc, #8]	; (800da74 <HAL_RCC_GetHCLKFreq+0x10>)
 800da6a:	681b      	ldr	r3, [r3, #0]
}
 800da6c:	0018      	movs	r0, r3
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	46c0      	nop			; (mov r8, r8)
 800da74:	20000048 	.word	0x20000048

0800da78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800da78:	b5b0      	push	{r4, r5, r7, lr}
 800da7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800da7c:	f7ff fff2 	bl	800da64 <HAL_RCC_GetHCLKFreq>
 800da80:	0004      	movs	r4, r0
 800da82:	f7ff faf9 	bl	800d078 <LL_RCC_GetAPB1Prescaler>
 800da86:	0003      	movs	r3, r0
 800da88:	0b1a      	lsrs	r2, r3, #12
 800da8a:	4b05      	ldr	r3, [pc, #20]	; (800daa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800da8c:	0092      	lsls	r2, r2, #2
 800da8e:	58d3      	ldr	r3, [r2, r3]
 800da90:	221f      	movs	r2, #31
 800da92:	4013      	ands	r3, r2
 800da94:	40dc      	lsrs	r4, r3
 800da96:	0023      	movs	r3, r4
}
 800da98:	0018      	movs	r0, r3
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bdb0      	pop	{r4, r5, r7, pc}
 800da9e:	46c0      	nop			; (mov r8, r8)
 800daa0:	08024088 	.word	0x08024088

0800daa4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2207      	movs	r2, #7
 800dab2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dab4:	4b0e      	ldr	r3, [pc, #56]	; (800daf0 <HAL_RCC_GetClockConfig+0x4c>)
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	2207      	movs	r2, #7
 800daba:	401a      	ands	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dac0:	4b0b      	ldr	r3, [pc, #44]	; (800daf0 <HAL_RCC_GetClockConfig+0x4c>)
 800dac2:	689a      	ldr	r2, [r3, #8]
 800dac4:	23f0      	movs	r3, #240	; 0xf0
 800dac6:	011b      	lsls	r3, r3, #4
 800dac8:	401a      	ands	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800dace:	4b08      	ldr	r3, [pc, #32]	; (800daf0 <HAL_RCC_GetClockConfig+0x4c>)
 800dad0:	689a      	ldr	r2, [r3, #8]
 800dad2:	23e0      	movs	r3, #224	; 0xe0
 800dad4:	01db      	lsls	r3, r3, #7
 800dad6:	401a      	ands	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dadc:	4b05      	ldr	r3, [pc, #20]	; (800daf4 <HAL_RCC_GetClockConfig+0x50>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2207      	movs	r2, #7
 800dae2:	401a      	ands	r2, r3
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	601a      	str	r2, [r3, #0]
}
 800dae8:	46c0      	nop			; (mov r8, r8)
 800daea:	46bd      	mov	sp, r7
 800daec:	b002      	add	sp, #8
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	40021000 	.word	0x40021000
 800daf4:	40022000 	.word	0x40022000

0800daf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800db00:	2313      	movs	r3, #19
 800db02:	18fb      	adds	r3, r7, r3
 800db04:	2200      	movs	r2, #0
 800db06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800db08:	2312      	movs	r3, #18
 800db0a:	18fb      	adds	r3, r7, r3
 800db0c:	2200      	movs	r2, #0
 800db0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	2380      	movs	r3, #128	; 0x80
 800db16:	029b      	lsls	r3, r3, #10
 800db18:	4013      	ands	r3, r2
 800db1a:	d100      	bne.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800db1c:	e0ad      	b.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800db1e:	2011      	movs	r0, #17
 800db20:	183b      	adds	r3, r7, r0
 800db22:	2200      	movs	r2, #0
 800db24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db26:	4b47      	ldr	r3, [pc, #284]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800db28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db2a:	2380      	movs	r3, #128	; 0x80
 800db2c:	055b      	lsls	r3, r3, #21
 800db2e:	4013      	ands	r3, r2
 800db30:	d110      	bne.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800db32:	4b44      	ldr	r3, [pc, #272]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800db34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db36:	4b43      	ldr	r3, [pc, #268]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800db38:	2180      	movs	r1, #128	; 0x80
 800db3a:	0549      	lsls	r1, r1, #21
 800db3c:	430a      	orrs	r2, r1
 800db3e:	63da      	str	r2, [r3, #60]	; 0x3c
 800db40:	4b40      	ldr	r3, [pc, #256]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800db42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db44:	2380      	movs	r3, #128	; 0x80
 800db46:	055b      	lsls	r3, r3, #21
 800db48:	4013      	ands	r3, r2
 800db4a:	60bb      	str	r3, [r7, #8]
 800db4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800db4e:	183b      	adds	r3, r7, r0
 800db50:	2201      	movs	r2, #1
 800db52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800db54:	4b3c      	ldr	r3, [pc, #240]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	4b3b      	ldr	r3, [pc, #236]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800db5a:	2180      	movs	r1, #128	; 0x80
 800db5c:	0049      	lsls	r1, r1, #1
 800db5e:	430a      	orrs	r2, r1
 800db60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800db62:	f7fb fad1 	bl	8009108 <HAL_GetTick>
 800db66:	0003      	movs	r3, r0
 800db68:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800db6a:	e00b      	b.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db6c:	f7fb facc 	bl	8009108 <HAL_GetTick>
 800db70:	0002      	movs	r2, r0
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	2b02      	cmp	r3, #2
 800db78:	d904      	bls.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800db7a:	2313      	movs	r3, #19
 800db7c:	18fb      	adds	r3, r7, r3
 800db7e:	2203      	movs	r2, #3
 800db80:	701a      	strb	r2, [r3, #0]
        break;
 800db82:	e005      	b.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800db84:	4b30      	ldr	r3, [pc, #192]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	2380      	movs	r3, #128	; 0x80
 800db8a:	005b      	lsls	r3, r3, #1
 800db8c:	4013      	ands	r3, r2
 800db8e:	d0ed      	beq.n	800db6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800db90:	2313      	movs	r3, #19
 800db92:	18fb      	adds	r3, r7, r3
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d15e      	bne.n	800dc58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800db9a:	4b2a      	ldr	r3, [pc, #168]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800db9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db9e:	23c0      	movs	r3, #192	; 0xc0
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4013      	ands	r3, r2
 800dba4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d019      	beq.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb0:	697a      	ldr	r2, [r7, #20]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d014      	beq.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800dbb6:	4b23      	ldr	r3, [pc, #140]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800dbb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbba:	4a24      	ldr	r2, [pc, #144]	; (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dbc0:	4b20      	ldr	r3, [pc, #128]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800dbc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dbc4:	4b1f      	ldr	r3, [pc, #124]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800dbc6:	2180      	movs	r1, #128	; 0x80
 800dbc8:	0249      	lsls	r1, r1, #9
 800dbca:	430a      	orrs	r2, r1
 800dbcc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dbce:	4b1d      	ldr	r3, [pc, #116]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800dbd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dbd2:	4b1c      	ldr	r3, [pc, #112]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800dbd4:	491e      	ldr	r1, [pc, #120]	; (800dc50 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800dbd6:	400a      	ands	r2, r1
 800dbd8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dbda:	4b1a      	ldr	r3, [pc, #104]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800dbdc:	697a      	ldr	r2, [r7, #20]
 800dbde:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	4013      	ands	r3, r2
 800dbe6:	d016      	beq.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbe8:	f7fb fa8e 	bl	8009108 <HAL_GetTick>
 800dbec:	0003      	movs	r3, r0
 800dbee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dbf0:	e00c      	b.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dbf2:	f7fb fa89 	bl	8009108 <HAL_GetTick>
 800dbf6:	0002      	movs	r2, r0
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	4a15      	ldr	r2, [pc, #84]	; (800dc54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d904      	bls.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800dc02:	2313      	movs	r3, #19
 800dc04:	18fb      	adds	r3, r7, r3
 800dc06:	2203      	movs	r2, #3
 800dc08:	701a      	strb	r2, [r3, #0]
            break;
 800dc0a:	e004      	b.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc0c:	4b0d      	ldr	r3, [pc, #52]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800dc0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc10:	2202      	movs	r2, #2
 800dc12:	4013      	ands	r3, r2
 800dc14:	d0ed      	beq.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800dc16:	2313      	movs	r3, #19
 800dc18:	18fb      	adds	r3, r7, r3
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d10a      	bne.n	800dc36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dc20:	4b08      	ldr	r3, [pc, #32]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800dc22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc24:	4a09      	ldr	r2, [pc, #36]	; (800dc4c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800dc26:	4013      	ands	r3, r2
 800dc28:	0019      	movs	r1, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc2e:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800dc30:	430a      	orrs	r2, r1
 800dc32:	65da      	str	r2, [r3, #92]	; 0x5c
 800dc34:	e016      	b.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dc36:	2312      	movs	r3, #18
 800dc38:	18fb      	adds	r3, r7, r3
 800dc3a:	2213      	movs	r2, #19
 800dc3c:	18ba      	adds	r2, r7, r2
 800dc3e:	7812      	ldrb	r2, [r2, #0]
 800dc40:	701a      	strb	r2, [r3, #0]
 800dc42:	e00f      	b.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800dc44:	40021000 	.word	0x40021000
 800dc48:	40007000 	.word	0x40007000
 800dc4c:	fffffcff 	.word	0xfffffcff
 800dc50:	fffeffff 	.word	0xfffeffff
 800dc54:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc58:	2312      	movs	r3, #18
 800dc5a:	18fb      	adds	r3, r7, r3
 800dc5c:	2213      	movs	r2, #19
 800dc5e:	18ba      	adds	r2, r7, r2
 800dc60:	7812      	ldrb	r2, [r2, #0]
 800dc62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dc64:	2311      	movs	r3, #17
 800dc66:	18fb      	adds	r3, r7, r3
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d105      	bne.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc6e:	4bb6      	ldr	r3, [pc, #728]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dc70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc72:	4bb5      	ldr	r3, [pc, #724]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dc74:	49b5      	ldr	r1, [pc, #724]	; (800df4c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800dc76:	400a      	ands	r2, r1
 800dc78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	4013      	ands	r3, r2
 800dc82:	d009      	beq.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dc84:	4bb0      	ldr	r3, [pc, #704]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dc86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc88:	2203      	movs	r2, #3
 800dc8a:	4393      	bics	r3, r2
 800dc8c:	0019      	movs	r1, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	685a      	ldr	r2, [r3, #4]
 800dc92:	4bad      	ldr	r3, [pc, #692]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dc94:	430a      	orrs	r2, r1
 800dc96:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	4013      	ands	r3, r2
 800dca0:	d009      	beq.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dca2:	4ba9      	ldr	r3, [pc, #676]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dca6:	220c      	movs	r2, #12
 800dca8:	4393      	bics	r3, r2
 800dcaa:	0019      	movs	r1, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	689a      	ldr	r2, [r3, #8]
 800dcb0:	4ba5      	ldr	r3, [pc, #660]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dcb2:	430a      	orrs	r2, r1
 800dcb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2204      	movs	r2, #4
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	d009      	beq.n	800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dcc0:	4ba1      	ldr	r3, [pc, #644]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dcc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcc4:	2230      	movs	r2, #48	; 0x30
 800dcc6:	4393      	bics	r3, r2
 800dcc8:	0019      	movs	r1, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	4b9e      	ldr	r3, [pc, #632]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dcd0:	430a      	orrs	r2, r1
 800dcd2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2210      	movs	r2, #16
 800dcda:	4013      	ands	r3, r2
 800dcdc:	d009      	beq.n	800dcf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dcde:	4b9a      	ldr	r3, [pc, #616]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dce2:	4a9b      	ldr	r2, [pc, #620]	; (800df50 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800dce4:	4013      	ands	r3, r2
 800dce6:	0019      	movs	r1, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	691a      	ldr	r2, [r3, #16]
 800dcec:	4b96      	ldr	r3, [pc, #600]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dcee:	430a      	orrs	r2, r1
 800dcf0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	2380      	movs	r3, #128	; 0x80
 800dcf8:	015b      	lsls	r3, r3, #5
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	d009      	beq.n	800dd12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800dcfe:	4b92      	ldr	r3, [pc, #584]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd02:	4a94      	ldr	r2, [pc, #592]	; (800df54 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800dd04:	4013      	ands	r3, r2
 800dd06:	0019      	movs	r1, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	695a      	ldr	r2, [r3, #20]
 800dd0c:	4b8e      	ldr	r3, [pc, #568]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd0e:	430a      	orrs	r2, r1
 800dd10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	2380      	movs	r3, #128	; 0x80
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4013      	ands	r3, r2
 800dd1c:	d009      	beq.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dd1e:	4b8a      	ldr	r3, [pc, #552]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd22:	4a8d      	ldr	r2, [pc, #564]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800dd24:	4013      	ands	r3, r2
 800dd26:	0019      	movs	r1, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd2c:	4b86      	ldr	r3, [pc, #536]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd2e:	430a      	orrs	r2, r1
 800dd30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	2380      	movs	r3, #128	; 0x80
 800dd38:	00db      	lsls	r3, r3, #3
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	d009      	beq.n	800dd52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dd3e:	4b82      	ldr	r3, [pc, #520]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd42:	4a86      	ldr	r2, [pc, #536]	; (800df5c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800dd44:	4013      	ands	r3, r2
 800dd46:	0019      	movs	r1, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd4c:	4b7e      	ldr	r3, [pc, #504]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd4e:	430a      	orrs	r2, r1
 800dd50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2220      	movs	r2, #32
 800dd58:	4013      	ands	r3, r2
 800dd5a:	d009      	beq.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dd5c:	4b7a      	ldr	r3, [pc, #488]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd60:	4a7f      	ldr	r2, [pc, #508]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800dd62:	4013      	ands	r3, r2
 800dd64:	0019      	movs	r1, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	699a      	ldr	r2, [r3, #24]
 800dd6a:	4b77      	ldr	r3, [pc, #476]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd6c:	430a      	orrs	r2, r1
 800dd6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2240      	movs	r2, #64	; 0x40
 800dd76:	4013      	ands	r3, r2
 800dd78:	d009      	beq.n	800dd8e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dd7a:	4b73      	ldr	r3, [pc, #460]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd7e:	4a79      	ldr	r2, [pc, #484]	; (800df64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800dd80:	4013      	ands	r3, r2
 800dd82:	0019      	movs	r1, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	69da      	ldr	r2, [r3, #28]
 800dd88:	4b6f      	ldr	r3, [pc, #444]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd8a:	430a      	orrs	r2, r1
 800dd8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	2380      	movs	r3, #128	; 0x80
 800dd94:	01db      	lsls	r3, r3, #7
 800dd96:	4013      	ands	r3, r2
 800dd98:	d015      	beq.n	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800dd9a:	4b6b      	ldr	r3, [pc, #428]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dd9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	0899      	lsrs	r1, r3, #2
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dda6:	4b68      	ldr	r3, [pc, #416]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dda8:	430a      	orrs	r2, r1
 800ddaa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddb0:	2380      	movs	r3, #128	; 0x80
 800ddb2:	05db      	lsls	r3, r3, #23
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d106      	bne.n	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ddb8:	4b63      	ldr	r3, [pc, #396]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ddba:	68da      	ldr	r2, [r3, #12]
 800ddbc:	4b62      	ldr	r3, [pc, #392]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ddbe:	2180      	movs	r1, #128	; 0x80
 800ddc0:	0249      	lsls	r1, r1, #9
 800ddc2:	430a      	orrs	r2, r1
 800ddc4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	2380      	movs	r3, #128	; 0x80
 800ddcc:	031b      	lsls	r3, r3, #12
 800ddce:	4013      	ands	r3, r2
 800ddd0:	d009      	beq.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ddd2:	4b5d      	ldr	r3, [pc, #372]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ddd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddd6:	2240      	movs	r2, #64	; 0x40
 800ddd8:	4393      	bics	r3, r2
 800ddda:	0019      	movs	r1, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dde0:	4b59      	ldr	r3, [pc, #356]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dde2:	430a      	orrs	r2, r1
 800dde4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	2380      	movs	r3, #128	; 0x80
 800ddec:	039b      	lsls	r3, r3, #14
 800ddee:	4013      	ands	r3, r2
 800ddf0:	d016      	beq.n	800de20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800ddf2:	4b55      	ldr	r3, [pc, #340]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ddf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddf6:	4a5c      	ldr	r2, [pc, #368]	; (800df68 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	0019      	movs	r1, r3
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de00:	4b51      	ldr	r3, [pc, #324]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de02:	430a      	orrs	r2, r1
 800de04:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de0a:	2380      	movs	r3, #128	; 0x80
 800de0c:	03db      	lsls	r3, r3, #15
 800de0e:	429a      	cmp	r2, r3
 800de10:	d106      	bne.n	800de20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800de12:	4b4d      	ldr	r3, [pc, #308]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de14:	68da      	ldr	r2, [r3, #12]
 800de16:	4b4c      	ldr	r3, [pc, #304]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de18:	2180      	movs	r1, #128	; 0x80
 800de1a:	0449      	lsls	r1, r1, #17
 800de1c:	430a      	orrs	r2, r1
 800de1e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	2380      	movs	r3, #128	; 0x80
 800de26:	03db      	lsls	r3, r3, #15
 800de28:	4013      	ands	r3, r2
 800de2a:	d016      	beq.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800de2c:	4b46      	ldr	r3, [pc, #280]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de30:	4a4e      	ldr	r2, [pc, #312]	; (800df6c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800de32:	4013      	ands	r3, r2
 800de34:	0019      	movs	r1, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de3a:	4b43      	ldr	r3, [pc, #268]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de3c:	430a      	orrs	r2, r1
 800de3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de44:	2380      	movs	r3, #128	; 0x80
 800de46:	045b      	lsls	r3, r3, #17
 800de48:	429a      	cmp	r2, r3
 800de4a:	d106      	bne.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800de4c:	4b3e      	ldr	r3, [pc, #248]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de4e:	68da      	ldr	r2, [r3, #12]
 800de50:	4b3d      	ldr	r3, [pc, #244]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de52:	2180      	movs	r1, #128	; 0x80
 800de54:	0449      	lsls	r1, r1, #17
 800de56:	430a      	orrs	r2, r1
 800de58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	2380      	movs	r3, #128	; 0x80
 800de60:	011b      	lsls	r3, r3, #4
 800de62:	4013      	ands	r3, r2
 800de64:	d014      	beq.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800de66:	4b38      	ldr	r3, [pc, #224]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de6a:	2203      	movs	r2, #3
 800de6c:	4393      	bics	r3, r2
 800de6e:	0019      	movs	r1, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6a1a      	ldr	r2, [r3, #32]
 800de74:	4b34      	ldr	r3, [pc, #208]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de76:	430a      	orrs	r2, r1
 800de78:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a1b      	ldr	r3, [r3, #32]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d106      	bne.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800de82:	4b31      	ldr	r3, [pc, #196]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de84:	68da      	ldr	r2, [r3, #12]
 800de86:	4b30      	ldr	r3, [pc, #192]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de88:	2180      	movs	r1, #128	; 0x80
 800de8a:	0249      	lsls	r1, r1, #9
 800de8c:	430a      	orrs	r2, r1
 800de8e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	2380      	movs	r3, #128	; 0x80
 800de96:	019b      	lsls	r3, r3, #6
 800de98:	4013      	ands	r3, r2
 800de9a:	d014      	beq.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800de9c:	4b2a      	ldr	r3, [pc, #168]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800de9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dea0:	220c      	movs	r2, #12
 800dea2:	4393      	bics	r3, r2
 800dea4:	0019      	movs	r1, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800deaa:	4b27      	ldr	r3, [pc, #156]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800deac:	430a      	orrs	r2, r1
 800deae:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb4:	2b04      	cmp	r3, #4
 800deb6:	d106      	bne.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800deb8:	4b23      	ldr	r3, [pc, #140]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800deba:	68da      	ldr	r2, [r3, #12]
 800debc:	4b22      	ldr	r3, [pc, #136]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800debe:	2180      	movs	r1, #128	; 0x80
 800dec0:	0249      	lsls	r1, r1, #9
 800dec2:	430a      	orrs	r2, r1
 800dec4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	2380      	movs	r3, #128	; 0x80
 800decc:	045b      	lsls	r3, r3, #17
 800dece:	4013      	ands	r3, r2
 800ded0:	d016      	beq.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ded2:	4b1d      	ldr	r3, [pc, #116]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ded4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ded6:	4a22      	ldr	r2, [pc, #136]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ded8:	4013      	ands	r3, r2
 800deda:	0019      	movs	r1, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dee0:	4b19      	ldr	r3, [pc, #100]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800dee2:	430a      	orrs	r2, r1
 800dee4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800deea:	2380      	movs	r3, #128	; 0x80
 800deec:	019b      	lsls	r3, r3, #6
 800deee:	429a      	cmp	r2, r3
 800def0:	d106      	bne.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800def2:	4b15      	ldr	r3, [pc, #84]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800def4:	68da      	ldr	r2, [r3, #12]
 800def6:	4b14      	ldr	r3, [pc, #80]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800def8:	2180      	movs	r1, #128	; 0x80
 800defa:	0449      	lsls	r1, r1, #17
 800defc:	430a      	orrs	r2, r1
 800defe:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	2380      	movs	r3, #128	; 0x80
 800df06:	049b      	lsls	r3, r3, #18
 800df08:	4013      	ands	r3, r2
 800df0a:	d016      	beq.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800df0c:	4b0e      	ldr	r3, [pc, #56]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800df0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df10:	4a10      	ldr	r2, [pc, #64]	; (800df54 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800df12:	4013      	ands	r3, r2
 800df14:	0019      	movs	r1, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df1a:	4b0b      	ldr	r3, [pc, #44]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800df1c:	430a      	orrs	r2, r1
 800df1e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df24:	2380      	movs	r3, #128	; 0x80
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	429a      	cmp	r2, r3
 800df2a:	d106      	bne.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800df2c:	4b06      	ldr	r3, [pc, #24]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800df2e:	68da      	ldr	r2, [r3, #12]
 800df30:	4b05      	ldr	r3, [pc, #20]	; (800df48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800df32:	2180      	movs	r1, #128	; 0x80
 800df34:	0449      	lsls	r1, r1, #17
 800df36:	430a      	orrs	r2, r1
 800df38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800df3a:	2312      	movs	r3, #18
 800df3c:	18fb      	adds	r3, r7, r3
 800df3e:	781b      	ldrb	r3, [r3, #0]
}
 800df40:	0018      	movs	r0, r3
 800df42:	46bd      	mov	sp, r7
 800df44:	b006      	add	sp, #24
 800df46:	bd80      	pop	{r7, pc}
 800df48:	40021000 	.word	0x40021000
 800df4c:	efffffff 	.word	0xefffffff
 800df50:	fffff3ff 	.word	0xfffff3ff
 800df54:	fffffcff 	.word	0xfffffcff
 800df58:	fff3ffff 	.word	0xfff3ffff
 800df5c:	ffcfffff 	.word	0xffcfffff
 800df60:	ffffcfff 	.word	0xffffcfff
 800df64:	ffff3fff 	.word	0xffff3fff
 800df68:	ffbfffff 	.word	0xffbfffff
 800df6c:	feffffff 	.word	0xfeffffff

0800df70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	e0a8      	b.n	800e0d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df86:	2b00      	cmp	r3, #0
 800df88:	d109      	bne.n	800df9e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	685a      	ldr	r2, [r3, #4]
 800df8e:	2382      	movs	r3, #130	; 0x82
 800df90:	005b      	lsls	r3, r3, #1
 800df92:	429a      	cmp	r2, r3
 800df94:	d009      	beq.n	800dfaa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	61da      	str	r2, [r3, #28]
 800df9c:	e005      	b.n	800dfaa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	225d      	movs	r2, #93	; 0x5d
 800dfb4:	5c9b      	ldrb	r3, [r3, r2]
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d107      	bne.n	800dfcc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	225c      	movs	r2, #92	; 0x5c
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	0018      	movs	r0, r3
 800dfc8:	f7fa fe00 	bl	8008bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	225d      	movs	r2, #93	; 0x5d
 800dfd0:	2102      	movs	r1, #2
 800dfd2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2140      	movs	r1, #64	; 0x40
 800dfe0:	438a      	bics	r2, r1
 800dfe2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	68da      	ldr	r2, [r3, #12]
 800dfe8:	23e0      	movs	r3, #224	; 0xe0
 800dfea:	00db      	lsls	r3, r3, #3
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d902      	bls.n	800dff6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dff0:	2300      	movs	r3, #0
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	e002      	b.n	800dffc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dff6:	2380      	movs	r3, #128	; 0x80
 800dff8:	015b      	lsls	r3, r3, #5
 800dffa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	68da      	ldr	r2, [r3, #12]
 800e000:	23f0      	movs	r3, #240	; 0xf0
 800e002:	011b      	lsls	r3, r3, #4
 800e004:	429a      	cmp	r2, r3
 800e006:	d008      	beq.n	800e01a <HAL_SPI_Init+0xaa>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	68da      	ldr	r2, [r3, #12]
 800e00c:	23e0      	movs	r3, #224	; 0xe0
 800e00e:	00db      	lsls	r3, r3, #3
 800e010:	429a      	cmp	r2, r3
 800e012:	d002      	beq.n	800e01a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	685a      	ldr	r2, [r3, #4]
 800e01e:	2382      	movs	r3, #130	; 0x82
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	401a      	ands	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6899      	ldr	r1, [r3, #8]
 800e028:	2384      	movs	r3, #132	; 0x84
 800e02a:	021b      	lsls	r3, r3, #8
 800e02c:	400b      	ands	r3, r1
 800e02e:	431a      	orrs	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	691b      	ldr	r3, [r3, #16]
 800e034:	2102      	movs	r1, #2
 800e036:	400b      	ands	r3, r1
 800e038:	431a      	orrs	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	695b      	ldr	r3, [r3, #20]
 800e03e:	2101      	movs	r1, #1
 800e040:	400b      	ands	r3, r1
 800e042:	431a      	orrs	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6999      	ldr	r1, [r3, #24]
 800e048:	2380      	movs	r3, #128	; 0x80
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	400b      	ands	r3, r1
 800e04e:	431a      	orrs	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	69db      	ldr	r3, [r3, #28]
 800e054:	2138      	movs	r1, #56	; 0x38
 800e056:	400b      	ands	r3, r1
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a1b      	ldr	r3, [r3, #32]
 800e05e:	2180      	movs	r1, #128	; 0x80
 800e060:	400b      	ands	r3, r1
 800e062:	431a      	orrs	r2, r3
 800e064:	0011      	movs	r1, r2
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e06a:	2380      	movs	r3, #128	; 0x80
 800e06c:	019b      	lsls	r3, r3, #6
 800e06e:	401a      	ands	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	430a      	orrs	r2, r1
 800e076:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	0c1b      	lsrs	r3, r3, #16
 800e07e:	2204      	movs	r2, #4
 800e080:	401a      	ands	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e086:	2110      	movs	r1, #16
 800e088:	400b      	ands	r3, r1
 800e08a:	431a      	orrs	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e090:	2108      	movs	r1, #8
 800e092:	400b      	ands	r3, r1
 800e094:	431a      	orrs	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	68d9      	ldr	r1, [r3, #12]
 800e09a:	23f0      	movs	r3, #240	; 0xf0
 800e09c:	011b      	lsls	r3, r3, #4
 800e09e:	400b      	ands	r3, r1
 800e0a0:	431a      	orrs	r2, r3
 800e0a2:	0011      	movs	r1, r2
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	2380      	movs	r3, #128	; 0x80
 800e0a8:	015b      	lsls	r3, r3, #5
 800e0aa:	401a      	ands	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	430a      	orrs	r2, r1
 800e0b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69da      	ldr	r2, [r3, #28]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4907      	ldr	r1, [pc, #28]	; (800e0dc <HAL_SPI_Init+0x16c>)
 800e0c0:	400a      	ands	r2, r1
 800e0c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	225d      	movs	r2, #93	; 0x5d
 800e0ce:	2101      	movs	r1, #1
 800e0d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e0d2:	2300      	movs	r3, #0
}
 800e0d4:	0018      	movs	r0, r3
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	b004      	add	sp, #16
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	fffff7ff 	.word	0xfffff7ff

0800e0e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b088      	sub	sp, #32
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	603b      	str	r3, [r7, #0]
 800e0ec:	1dbb      	adds	r3, r7, #6
 800e0ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0f0:	231f      	movs	r3, #31
 800e0f2:	18fb      	adds	r3, r7, r3
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	225c      	movs	r2, #92	; 0x5c
 800e0fc:	5c9b      	ldrb	r3, [r3, r2]
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d101      	bne.n	800e106 <HAL_SPI_Transmit+0x26>
 800e102:	2302      	movs	r3, #2
 800e104:	e147      	b.n	800e396 <HAL_SPI_Transmit+0x2b6>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	225c      	movs	r2, #92	; 0x5c
 800e10a:	2101      	movs	r1, #1
 800e10c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e10e:	f7fa fffb 	bl	8009108 <HAL_GetTick>
 800e112:	0003      	movs	r3, r0
 800e114:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e116:	2316      	movs	r3, #22
 800e118:	18fb      	adds	r3, r7, r3
 800e11a:	1dba      	adds	r2, r7, #6
 800e11c:	8812      	ldrh	r2, [r2, #0]
 800e11e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	225d      	movs	r2, #93	; 0x5d
 800e124:	5c9b      	ldrb	r3, [r3, r2]
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d004      	beq.n	800e136 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800e12c:	231f      	movs	r3, #31
 800e12e:	18fb      	adds	r3, r7, r3
 800e130:	2202      	movs	r2, #2
 800e132:	701a      	strb	r2, [r3, #0]
    goto error;
 800e134:	e128      	b.n	800e388 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d003      	beq.n	800e144 <HAL_SPI_Transmit+0x64>
 800e13c:	1dbb      	adds	r3, r7, #6
 800e13e:	881b      	ldrh	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d104      	bne.n	800e14e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800e144:	231f      	movs	r3, #31
 800e146:	18fb      	adds	r3, r7, r3
 800e148:	2201      	movs	r2, #1
 800e14a:	701a      	strb	r2, [r3, #0]
    goto error;
 800e14c:	e11c      	b.n	800e388 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	225d      	movs	r2, #93	; 0x5d
 800e152:	2103      	movs	r1, #3
 800e154:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	68ba      	ldr	r2, [r7, #8]
 800e160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	1dba      	adds	r2, r7, #6
 800e166:	8812      	ldrh	r2, [r2, #0]
 800e168:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	1dba      	adds	r2, r7, #6
 800e16e:	8812      	ldrh	r2, [r2, #0]
 800e170:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2244      	movs	r2, #68	; 0x44
 800e17c:	2100      	movs	r1, #0
 800e17e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2246      	movs	r2, #70	; 0x46
 800e184:	2100      	movs	r1, #0
 800e186:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2200      	movs	r2, #0
 800e18c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2200      	movs	r2, #0
 800e192:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	689a      	ldr	r2, [r3, #8]
 800e198:	2380      	movs	r3, #128	; 0x80
 800e19a:	021b      	lsls	r3, r3, #8
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d110      	bne.n	800e1c2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2140      	movs	r1, #64	; 0x40
 800e1ac:	438a      	bics	r2, r1
 800e1ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2180      	movs	r1, #128	; 0x80
 800e1bc:	01c9      	lsls	r1, r1, #7
 800e1be:	430a      	orrs	r2, r1
 800e1c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2240      	movs	r2, #64	; 0x40
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	2b40      	cmp	r3, #64	; 0x40
 800e1ce:	d007      	beq.n	800e1e0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2140      	movs	r1, #64	; 0x40
 800e1dc:	430a      	orrs	r2, r1
 800e1de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	68da      	ldr	r2, [r3, #12]
 800e1e4:	23e0      	movs	r3, #224	; 0xe0
 800e1e6:	00db      	lsls	r3, r3, #3
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d952      	bls.n	800e292 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d004      	beq.n	800e1fe <HAL_SPI_Transmit+0x11e>
 800e1f4:	2316      	movs	r3, #22
 800e1f6:	18fb      	adds	r3, r7, r3
 800e1f8:	881b      	ldrh	r3, [r3, #0]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d143      	bne.n	800e286 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e202:	881a      	ldrh	r2, [r3, #0]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e20e:	1c9a      	adds	r2, r3, #2
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e218:	b29b      	uxth	r3, r3
 800e21a:	3b01      	subs	r3, #1
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e222:	e030      	b.n	800e286 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	2202      	movs	r2, #2
 800e22c:	4013      	ands	r3, r2
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d112      	bne.n	800e258 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e236:	881a      	ldrh	r2, [r3, #0]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e242:	1c9a      	adds	r2, r3, #2
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	3b01      	subs	r3, #1
 800e250:	b29a      	uxth	r2, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e256:	e016      	b.n	800e286 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e258:	f7fa ff56 	bl	8009108 <HAL_GetTick>
 800e25c:	0002      	movs	r2, r0
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	429a      	cmp	r2, r3
 800e266:	d802      	bhi.n	800e26e <HAL_SPI_Transmit+0x18e>
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	3301      	adds	r3, #1
 800e26c:	d102      	bne.n	800e274 <HAL_SPI_Transmit+0x194>
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d108      	bne.n	800e286 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800e274:	231f      	movs	r3, #31
 800e276:	18fb      	adds	r3, r7, r3
 800e278:	2203      	movs	r2, #3
 800e27a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	225d      	movs	r2, #93	; 0x5d
 800e280:	2101      	movs	r1, #1
 800e282:	5499      	strb	r1, [r3, r2]
          goto error;
 800e284:	e080      	b.n	800e388 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d1c9      	bne.n	800e224 <HAL_SPI_Transmit+0x144>
 800e290:	e053      	b.n	800e33a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d004      	beq.n	800e2a4 <HAL_SPI_Transmit+0x1c4>
 800e29a:	2316      	movs	r3, #22
 800e29c:	18fb      	adds	r3, r7, r3
 800e29e:	881b      	ldrh	r3, [r3, #0]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d145      	bne.n	800e330 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	330c      	adds	r3, #12
 800e2ae:	7812      	ldrb	r2, [r2, #0]
 800e2b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b6:	1c5a      	adds	r2, r3, #1
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800e2ca:	e031      	b.n	800e330 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	2202      	movs	r2, #2
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	2b02      	cmp	r3, #2
 800e2d8:	d113      	bne.n	800e302 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	330c      	adds	r3, #12
 800e2e4:	7812      	ldrb	r2, [r2, #0]
 800e2e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ec:	1c5a      	adds	r2, r3, #1
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e300:	e016      	b.n	800e330 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e302:	f7fa ff01 	bl	8009108 <HAL_GetTick>
 800e306:	0002      	movs	r2, r0
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	683a      	ldr	r2, [r7, #0]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d802      	bhi.n	800e318 <HAL_SPI_Transmit+0x238>
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	3301      	adds	r3, #1
 800e316:	d102      	bne.n	800e31e <HAL_SPI_Transmit+0x23e>
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d108      	bne.n	800e330 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800e31e:	231f      	movs	r3, #31
 800e320:	18fb      	adds	r3, r7, r3
 800e322:	2203      	movs	r2, #3
 800e324:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	225d      	movs	r2, #93	; 0x5d
 800e32a:	2101      	movs	r1, #1
 800e32c:	5499      	strb	r1, [r3, r2]
          goto error;
 800e32e:	e02b      	b.n	800e388 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e334:	b29b      	uxth	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1c8      	bne.n	800e2cc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e33a:	69ba      	ldr	r2, [r7, #24]
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	0018      	movs	r0, r3
 800e342:	f000 f95d 	bl	800e600 <SPI_EndRxTxTransaction>
 800e346:	1e03      	subs	r3, r0, #0
 800e348:	d002      	beq.n	800e350 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2220      	movs	r2, #32
 800e34e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	689b      	ldr	r3, [r3, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d10a      	bne.n	800e36e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e358:	2300      	movs	r3, #0
 800e35a:	613b      	str	r3, [r7, #16]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	613b      	str	r3, [r7, #16]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	613b      	str	r3, [r7, #16]
 800e36c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e372:	2b00      	cmp	r3, #0
 800e374:	d004      	beq.n	800e380 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800e376:	231f      	movs	r3, #31
 800e378:	18fb      	adds	r3, r7, r3
 800e37a:	2201      	movs	r2, #1
 800e37c:	701a      	strb	r2, [r3, #0]
 800e37e:	e003      	b.n	800e388 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	225d      	movs	r2, #93	; 0x5d
 800e384:	2101      	movs	r1, #1
 800e386:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	225c      	movs	r2, #92	; 0x5c
 800e38c:	2100      	movs	r1, #0
 800e38e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800e390:	231f      	movs	r3, #31
 800e392:	18fb      	adds	r3, r7, r3
 800e394:	781b      	ldrb	r3, [r3, #0]
}
 800e396:	0018      	movs	r0, r3
 800e398:	46bd      	mov	sp, r7
 800e39a:	b008      	add	sp, #32
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b088      	sub	sp, #32
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	603b      	str	r3, [r7, #0]
 800e3ac:	1dfb      	adds	r3, r7, #7
 800e3ae:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e3b0:	f7fa feaa 	bl	8009108 <HAL_GetTick>
 800e3b4:	0002      	movs	r2, r0
 800e3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b8:	1a9b      	subs	r3, r3, r2
 800e3ba:	683a      	ldr	r2, [r7, #0]
 800e3bc:	18d3      	adds	r3, r2, r3
 800e3be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e3c0:	f7fa fea2 	bl	8009108 <HAL_GetTick>
 800e3c4:	0003      	movs	r3, r0
 800e3c6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e3c8:	4b3a      	ldr	r3, [pc, #232]	; (800e4b4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	015b      	lsls	r3, r3, #5
 800e3ce:	0d1b      	lsrs	r3, r3, #20
 800e3d0:	69fa      	ldr	r2, [r7, #28]
 800e3d2:	4353      	muls	r3, r2
 800e3d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e3d6:	e058      	b.n	800e48a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	d055      	beq.n	800e48a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e3de:	f7fa fe93 	bl	8009108 <HAL_GetTick>
 800e3e2:	0002      	movs	r2, r0
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	69fa      	ldr	r2, [r7, #28]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d902      	bls.n	800e3f4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d142      	bne.n	800e47a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	685a      	ldr	r2, [r3, #4]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	21e0      	movs	r1, #224	; 0xe0
 800e400:	438a      	bics	r2, r1
 800e402:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	685a      	ldr	r2, [r3, #4]
 800e408:	2382      	movs	r3, #130	; 0x82
 800e40a:	005b      	lsls	r3, r3, #1
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d113      	bne.n	800e438 <SPI_WaitFlagStateUntilTimeout+0x98>
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	689a      	ldr	r2, [r3, #8]
 800e414:	2380      	movs	r3, #128	; 0x80
 800e416:	021b      	lsls	r3, r3, #8
 800e418:	429a      	cmp	r2, r3
 800e41a:	d005      	beq.n	800e428 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	689a      	ldr	r2, [r3, #8]
 800e420:	2380      	movs	r3, #128	; 0x80
 800e422:	00db      	lsls	r3, r3, #3
 800e424:	429a      	cmp	r2, r3
 800e426:	d107      	bne.n	800e438 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2140      	movs	r1, #64	; 0x40
 800e434:	438a      	bics	r2, r1
 800e436:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e43c:	2380      	movs	r3, #128	; 0x80
 800e43e:	019b      	lsls	r3, r3, #6
 800e440:	429a      	cmp	r2, r3
 800e442:	d110      	bne.n	800e466 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	491a      	ldr	r1, [pc, #104]	; (800e4b8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800e450:	400a      	ands	r2, r1
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2180      	movs	r1, #128	; 0x80
 800e460:	0189      	lsls	r1, r1, #6
 800e462:	430a      	orrs	r2, r1
 800e464:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	225d      	movs	r2, #93	; 0x5d
 800e46a:	2101      	movs	r1, #1
 800e46c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	225c      	movs	r2, #92	; 0x5c
 800e472:	2100      	movs	r1, #0
 800e474:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e476:	2303      	movs	r3, #3
 800e478:	e017      	b.n	800e4aa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800e480:	2300      	movs	r3, #0
 800e482:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	3b01      	subs	r3, #1
 800e488:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	4013      	ands	r3, r2
 800e494:	68ba      	ldr	r2, [r7, #8]
 800e496:	1ad3      	subs	r3, r2, r3
 800e498:	425a      	negs	r2, r3
 800e49a:	4153      	adcs	r3, r2
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	001a      	movs	r2, r3
 800e4a0:	1dfb      	adds	r3, r7, #7
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d197      	bne.n	800e3d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	0018      	movs	r0, r3
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	b008      	add	sp, #32
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	46c0      	nop			; (mov r8, r8)
 800e4b4:	20000048 	.word	0x20000048
 800e4b8:	ffffdfff 	.word	0xffffdfff

0800e4bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08a      	sub	sp, #40	; 0x28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
 800e4c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e4ca:	2317      	movs	r3, #23
 800e4cc:	18fb      	adds	r3, r7, r3
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e4d2:	f7fa fe19 	bl	8009108 <HAL_GetTick>
 800e4d6:	0002      	movs	r2, r0
 800e4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4da:	1a9b      	subs	r3, r3, r2
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	18d3      	adds	r3, r2, r3
 800e4e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e4e2:	f7fa fe11 	bl	8009108 <HAL_GetTick>
 800e4e6:	0003      	movs	r3, r0
 800e4e8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	330c      	adds	r3, #12
 800e4f0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e4f2:	4b41      	ldr	r3, [pc, #260]	; (800e5f8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	0013      	movs	r3, r2
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	189b      	adds	r3, r3, r2
 800e4fc:	00da      	lsls	r2, r3, #3
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	0d1b      	lsrs	r3, r3, #20
 800e502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e504:	4353      	muls	r3, r2
 800e506:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e508:	e068      	b.n	800e5dc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	23c0      	movs	r3, #192	; 0xc0
 800e50e:	00db      	lsls	r3, r3, #3
 800e510:	429a      	cmp	r2, r3
 800e512:	d10a      	bne.n	800e52a <SPI_WaitFifoStateUntilTimeout+0x6e>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d107      	bne.n	800e52a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	2117      	movs	r1, #23
 800e522:	187b      	adds	r3, r7, r1
 800e524:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e526:	187b      	adds	r3, r7, r1
 800e528:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	3301      	adds	r3, #1
 800e52e:	d055      	beq.n	800e5dc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e530:	f7fa fdea 	bl	8009108 <HAL_GetTick>
 800e534:	0002      	movs	r2, r0
 800e536:	6a3b      	ldr	r3, [r7, #32]
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d902      	bls.n	800e546 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	2b00      	cmp	r3, #0
 800e544:	d142      	bne.n	800e5cc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	21e0      	movs	r1, #224	; 0xe0
 800e552:	438a      	bics	r2, r1
 800e554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	685a      	ldr	r2, [r3, #4]
 800e55a:	2382      	movs	r3, #130	; 0x82
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	429a      	cmp	r2, r3
 800e560:	d113      	bne.n	800e58a <SPI_WaitFifoStateUntilTimeout+0xce>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	689a      	ldr	r2, [r3, #8]
 800e566:	2380      	movs	r3, #128	; 0x80
 800e568:	021b      	lsls	r3, r3, #8
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d005      	beq.n	800e57a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	2380      	movs	r3, #128	; 0x80
 800e574:	00db      	lsls	r3, r3, #3
 800e576:	429a      	cmp	r2, r3
 800e578:	d107      	bne.n	800e58a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2140      	movs	r1, #64	; 0x40
 800e586:	438a      	bics	r2, r1
 800e588:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e58e:	2380      	movs	r3, #128	; 0x80
 800e590:	019b      	lsls	r3, r3, #6
 800e592:	429a      	cmp	r2, r3
 800e594:	d110      	bne.n	800e5b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4916      	ldr	r1, [pc, #88]	; (800e5fc <SPI_WaitFifoStateUntilTimeout+0x140>)
 800e5a2:	400a      	ands	r2, r1
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2180      	movs	r1, #128	; 0x80
 800e5b2:	0189      	lsls	r1, r1, #6
 800e5b4:	430a      	orrs	r2, r1
 800e5b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	225d      	movs	r2, #93	; 0x5d
 800e5bc:	2101      	movs	r1, #1
 800e5be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	225c      	movs	r2, #92	; 0x5c
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e5c8:	2303      	movs	r3, #3
 800e5ca:	e010      	b.n	800e5ee <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d101      	bne.n	800e5d6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	68ba      	ldr	r2, [r7, #8]
 800e5e4:	4013      	ands	r3, r2
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d18e      	bne.n	800e50a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	0018      	movs	r0, r3
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	b00a      	add	sp, #40	; 0x28
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	46c0      	nop			; (mov r8, r8)
 800e5f8:	20000048 	.word	0x20000048
 800e5fc:	ffffdfff 	.word	0xffffdfff

0800e600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af02      	add	r7, sp, #8
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e60c:	68ba      	ldr	r2, [r7, #8]
 800e60e:	23c0      	movs	r3, #192	; 0xc0
 800e610:	0159      	lsls	r1, r3, #5
 800e612:	68f8      	ldr	r0, [r7, #12]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	0013      	movs	r3, r2
 800e61a:	2200      	movs	r2, #0
 800e61c:	f7ff ff4e 	bl	800e4bc <SPI_WaitFifoStateUntilTimeout>
 800e620:	1e03      	subs	r3, r0, #0
 800e622:	d007      	beq.n	800e634 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e628:	2220      	movs	r2, #32
 800e62a:	431a      	orrs	r2, r3
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e630:	2303      	movs	r3, #3
 800e632:	e027      	b.n	800e684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e634:	68ba      	ldr	r2, [r7, #8]
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	0013      	movs	r3, r2
 800e63e:	2200      	movs	r2, #0
 800e640:	2180      	movs	r1, #128	; 0x80
 800e642:	f7ff fead 	bl	800e3a0 <SPI_WaitFlagStateUntilTimeout>
 800e646:	1e03      	subs	r3, r0, #0
 800e648:	d007      	beq.n	800e65a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e64e:	2220      	movs	r2, #32
 800e650:	431a      	orrs	r2, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e656:	2303      	movs	r3, #3
 800e658:	e014      	b.n	800e684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	23c0      	movs	r3, #192	; 0xc0
 800e65e:	00d9      	lsls	r1, r3, #3
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	9300      	str	r3, [sp, #0]
 800e666:	0013      	movs	r3, r2
 800e668:	2200      	movs	r2, #0
 800e66a:	f7ff ff27 	bl	800e4bc <SPI_WaitFifoStateUntilTimeout>
 800e66e:	1e03      	subs	r3, r0, #0
 800e670:	d007      	beq.n	800e682 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e676:	2220      	movs	r2, #32
 800e678:	431a      	orrs	r2, r3
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e67e:	2303      	movs	r3, #3
 800e680:	e000      	b.n	800e684 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	0018      	movs	r0, r3
 800e686:	46bd      	mov	sp, r7
 800e688:	b004      	add	sp, #16
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d101      	bne.n	800e69e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e69a:	2301      	movs	r3, #1
 800e69c:	e04a      	b.n	800e734 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	223d      	movs	r2, #61	; 0x3d
 800e6a2:	5c9b      	ldrb	r3, [r3, r2]
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d107      	bne.n	800e6ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	223c      	movs	r2, #60	; 0x3c
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	0018      	movs	r0, r3
 800e6b6:	f000 f841 	bl	800e73c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	223d      	movs	r2, #61	; 0x3d
 800e6be:	2102      	movs	r1, #2
 800e6c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3304      	adds	r3, #4
 800e6ca:	0019      	movs	r1, r3
 800e6cc:	0010      	movs	r0, r2
 800e6ce:	f000 fb33 	bl	800ed38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2248      	movs	r2, #72	; 0x48
 800e6d6:	2101      	movs	r1, #1
 800e6d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	223e      	movs	r2, #62	; 0x3e
 800e6de:	2101      	movs	r1, #1
 800e6e0:	5499      	strb	r1, [r3, r2]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	223f      	movs	r2, #63	; 0x3f
 800e6e6:	2101      	movs	r1, #1
 800e6e8:	5499      	strb	r1, [r3, r2]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2240      	movs	r2, #64	; 0x40
 800e6ee:	2101      	movs	r1, #1
 800e6f0:	5499      	strb	r1, [r3, r2]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2241      	movs	r2, #65	; 0x41
 800e6f6:	2101      	movs	r1, #1
 800e6f8:	5499      	strb	r1, [r3, r2]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2242      	movs	r2, #66	; 0x42
 800e6fe:	2101      	movs	r1, #1
 800e700:	5499      	strb	r1, [r3, r2]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2243      	movs	r2, #67	; 0x43
 800e706:	2101      	movs	r1, #1
 800e708:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2244      	movs	r2, #68	; 0x44
 800e70e:	2101      	movs	r1, #1
 800e710:	5499      	strb	r1, [r3, r2]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2245      	movs	r2, #69	; 0x45
 800e716:	2101      	movs	r1, #1
 800e718:	5499      	strb	r1, [r3, r2]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2246      	movs	r2, #70	; 0x46
 800e71e:	2101      	movs	r1, #1
 800e720:	5499      	strb	r1, [r3, r2]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2247      	movs	r2, #71	; 0x47
 800e726:	2101      	movs	r1, #1
 800e728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	223d      	movs	r2, #61	; 0x3d
 800e72e:	2101      	movs	r1, #1
 800e730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e732:	2300      	movs	r3, #0
}
 800e734:	0018      	movs	r0, r3
 800e736:	46bd      	mov	sp, r7
 800e738:	b002      	add	sp, #8
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e744:	46c0      	nop			; (mov r8, r8)
 800e746:	46bd      	mov	sp, r7
 800e748:	b002      	add	sp, #8
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	223d      	movs	r2, #61	; 0x3d
 800e758:	5c9b      	ldrb	r3, [r3, r2]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d001      	beq.n	800e764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e760:	2301      	movs	r3, #1
 800e762:	e047      	b.n	800e7f4 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	223d      	movs	r2, #61	; 0x3d
 800e768:	2102      	movs	r1, #2
 800e76a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	68da      	ldr	r2, [r3, #12]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2101      	movs	r1, #1
 800e778:	430a      	orrs	r2, r1
 800e77a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a1e      	ldr	r2, [pc, #120]	; (800e7fc <HAL_TIM_Base_Start_IT+0xb0>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d014      	beq.n	800e7b0 <HAL_TIM_Base_Start_IT+0x64>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	2380      	movs	r3, #128	; 0x80
 800e78c:	05db      	lsls	r3, r3, #23
 800e78e:	429a      	cmp	r2, r3
 800e790:	d00e      	beq.n	800e7b0 <HAL_TIM_Base_Start_IT+0x64>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a1a      	ldr	r2, [pc, #104]	; (800e800 <HAL_TIM_Base_Start_IT+0xb4>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d009      	beq.n	800e7b0 <HAL_TIM_Base_Start_IT+0x64>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a18      	ldr	r2, [pc, #96]	; (800e804 <HAL_TIM_Base_Start_IT+0xb8>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d004      	beq.n	800e7b0 <HAL_TIM_Base_Start_IT+0x64>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a17      	ldr	r2, [pc, #92]	; (800e808 <HAL_TIM_Base_Start_IT+0xbc>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d116      	bne.n	800e7de <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	4a15      	ldr	r2, [pc, #84]	; (800e80c <HAL_TIM_Base_Start_IT+0xc0>)
 800e7b8:	4013      	ands	r3, r2
 800e7ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2b06      	cmp	r3, #6
 800e7c0:	d016      	beq.n	800e7f0 <HAL_TIM_Base_Start_IT+0xa4>
 800e7c2:	68fa      	ldr	r2, [r7, #12]
 800e7c4:	2380      	movs	r3, #128	; 0x80
 800e7c6:	025b      	lsls	r3, r3, #9
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d011      	beq.n	800e7f0 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2101      	movs	r1, #1
 800e7d8:	430a      	orrs	r2, r1
 800e7da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7dc:	e008      	b.n	800e7f0 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2101      	movs	r1, #1
 800e7ea:	430a      	orrs	r2, r1
 800e7ec:	601a      	str	r2, [r3, #0]
 800e7ee:	e000      	b.n	800e7f2 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7f0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800e7f2:	2300      	movs	r3, #0
}
 800e7f4:	0018      	movs	r0, r3
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	b004      	add	sp, #16
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	40012c00 	.word	0x40012c00
 800e800:	40000400 	.word	0x40000400
 800e804:	40000800 	.word	0x40000800
 800e808:	40014000 	.word	0x40014000
 800e80c:	00010007 	.word	0x00010007

0800e810 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b086      	sub	sp, #24
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e820:	2301      	movs	r3, #1
 800e822:	e090      	b.n	800e946 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	223d      	movs	r2, #61	; 0x3d
 800e828:	5c9b      	ldrb	r3, [r3, r2]
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d107      	bne.n	800e840 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	223c      	movs	r2, #60	; 0x3c
 800e834:	2100      	movs	r1, #0
 800e836:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	0018      	movs	r0, r3
 800e83c:	f7fa fa12 	bl	8008c64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	223d      	movs	r2, #61	; 0x3d
 800e844:	2102      	movs	r1, #2
 800e846:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	689a      	ldr	r2, [r3, #8]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	493f      	ldr	r1, [pc, #252]	; (800e950 <HAL_TIM_Encoder_Init+0x140>)
 800e854:	400a      	ands	r2, r1
 800e856:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	3304      	adds	r3, #4
 800e860:	0019      	movs	r1, r3
 800e862:	0010      	movs	r0, r2
 800e864:	f000 fa68 	bl	800ed38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	699b      	ldr	r3, [r3, #24]
 800e876:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	6a1b      	ldr	r3, [r3, #32]
 800e87e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	697a      	ldr	r2, [r7, #20]
 800e886:	4313      	orrs	r3, r2
 800e888:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	4a31      	ldr	r2, [pc, #196]	; (800e954 <HAL_TIM_Encoder_Init+0x144>)
 800e88e:	4013      	ands	r3, r2
 800e890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	689a      	ldr	r2, [r3, #8]
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	021b      	lsls	r3, r3, #8
 800e89c:	4313      	orrs	r3, r2
 800e89e:	693a      	ldr	r2, [r7, #16]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	4a2c      	ldr	r2, [pc, #176]	; (800e958 <HAL_TIM_Encoder_Init+0x148>)
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	4a2b      	ldr	r2, [pc, #172]	; (800e95c <HAL_TIM_Encoder_Init+0x14c>)
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	68da      	ldr	r2, [r3, #12]
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	69db      	ldr	r3, [r3, #28]
 800e8bc:	021b      	lsls	r3, r3, #8
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	693a      	ldr	r2, [r7, #16]
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	011a      	lsls	r2, r3, #4
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	6a1b      	ldr	r3, [r3, #32]
 800e8d0:	031b      	lsls	r3, r3, #12
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	693a      	ldr	r2, [r7, #16]
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2222      	movs	r2, #34	; 0x22
 800e8de:	4393      	bics	r3, r2
 800e8e0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2288      	movs	r2, #136	; 0x88
 800e8e6:	4393      	bics	r3, r2
 800e8e8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	685a      	ldr	r2, [r3, #4]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	695b      	ldr	r3, [r3, #20]
 800e8f2:	011b      	lsls	r3, r3, #4
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	697a      	ldr	r2, [r7, #20]
 800e902:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2248      	movs	r2, #72	; 0x48
 800e918:	2101      	movs	r1, #1
 800e91a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	223e      	movs	r2, #62	; 0x3e
 800e920:	2101      	movs	r1, #1
 800e922:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	223f      	movs	r2, #63	; 0x3f
 800e928:	2101      	movs	r1, #1
 800e92a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2244      	movs	r2, #68	; 0x44
 800e930:	2101      	movs	r1, #1
 800e932:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2245      	movs	r2, #69	; 0x45
 800e938:	2101      	movs	r1, #1
 800e93a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	223d      	movs	r2, #61	; 0x3d
 800e940:	2101      	movs	r1, #1
 800e942:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	0018      	movs	r0, r3
 800e948:	46bd      	mov	sp, r7
 800e94a:	b006      	add	sp, #24
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	46c0      	nop			; (mov r8, r8)
 800e950:	fffebff8 	.word	0xfffebff8
 800e954:	fffffcfc 	.word	0xfffffcfc
 800e958:	fffff3f3 	.word	0xfffff3f3
 800e95c:	ffff0f0f 	.word	0xffff0f0f

0800e960 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e960:	b590      	push	{r4, r7, lr}
 800e962:	b085      	sub	sp, #20
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e96a:	200f      	movs	r0, #15
 800e96c:	183b      	adds	r3, r7, r0
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	213e      	movs	r1, #62	; 0x3e
 800e972:	5c52      	ldrb	r2, [r2, r1]
 800e974:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e976:	230e      	movs	r3, #14
 800e978:	18fb      	adds	r3, r7, r3
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	213f      	movs	r1, #63	; 0x3f
 800e97e:	5c52      	ldrb	r2, [r2, r1]
 800e980:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e982:	240d      	movs	r4, #13
 800e984:	193b      	adds	r3, r7, r4
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	2144      	movs	r1, #68	; 0x44
 800e98a:	5c52      	ldrb	r2, [r2, r1]
 800e98c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e98e:	230c      	movs	r3, #12
 800e990:	18fb      	adds	r3, r7, r3
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	2145      	movs	r1, #69	; 0x45
 800e996:	5c52      	ldrb	r2, [r2, r1]
 800e998:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d112      	bne.n	800e9c6 <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e9a0:	183b      	adds	r3, r7, r0
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d103      	bne.n	800e9b0 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e9a8:	193b      	adds	r3, r7, r4
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d001      	beq.n	800e9b4 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	e095      	b.n	800eae0 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	223e      	movs	r2, #62	; 0x3e
 800e9b8:	2102      	movs	r1, #2
 800e9ba:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2244      	movs	r2, #68	; 0x44
 800e9c0:	2102      	movs	r1, #2
 800e9c2:	5499      	strb	r1, [r3, r2]
 800e9c4:	e03d      	b.n	800ea42 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	2b04      	cmp	r3, #4
 800e9ca:	d114      	bne.n	800e9f6 <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e9cc:	230e      	movs	r3, #14
 800e9ce:	18fb      	adds	r3, r7, r3
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d104      	bne.n	800e9e0 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e9d6:	230c      	movs	r3, #12
 800e9d8:	18fb      	adds	r3, r7, r3
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d001      	beq.n	800e9e4 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e07d      	b.n	800eae0 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	223f      	movs	r2, #63	; 0x3f
 800e9e8:	2102      	movs	r1, #2
 800e9ea:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2245      	movs	r2, #69	; 0x45
 800e9f0:	2102      	movs	r1, #2
 800e9f2:	5499      	strb	r1, [r3, r2]
 800e9f4:	e025      	b.n	800ea42 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e9f6:	230f      	movs	r3, #15
 800e9f8:	18fb      	adds	r3, r7, r3
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d10e      	bne.n	800ea1e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ea00:	230e      	movs	r3, #14
 800ea02:	18fb      	adds	r3, r7, r3
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d109      	bne.n	800ea1e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ea0a:	230d      	movs	r3, #13
 800ea0c:	18fb      	adds	r3, r7, r3
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d104      	bne.n	800ea1e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ea14:	230c      	movs	r3, #12
 800ea16:	18fb      	adds	r3, r7, r3
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d001      	beq.n	800ea22 <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	e05e      	b.n	800eae0 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	223e      	movs	r2, #62	; 0x3e
 800ea26:	2102      	movs	r1, #2
 800ea28:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	223f      	movs	r2, #63	; 0x3f
 800ea2e:	2102      	movs	r1, #2
 800ea30:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2244      	movs	r2, #68	; 0x44
 800ea36:	2102      	movs	r1, #2
 800ea38:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2245      	movs	r2, #69	; 0x45
 800ea3e:	2102      	movs	r1, #2
 800ea40:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d003      	beq.n	800ea50 <HAL_TIM_Encoder_Start_IT+0xf0>
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	2b04      	cmp	r3, #4
 800ea4c:	d010      	beq.n	800ea70 <HAL_TIM_Encoder_Start_IT+0x110>
 800ea4e:	e01f      	b.n	800ea90 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2201      	movs	r2, #1
 800ea56:	2100      	movs	r1, #0
 800ea58:	0018      	movs	r0, r3
 800ea5a:	f000 fa05 	bl	800ee68 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68da      	ldr	r2, [r3, #12]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2102      	movs	r1, #2
 800ea6a:	430a      	orrs	r2, r1
 800ea6c:	60da      	str	r2, [r3, #12]
      break;
 800ea6e:	e02e      	b.n	800eace <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2201      	movs	r2, #1
 800ea76:	2104      	movs	r1, #4
 800ea78:	0018      	movs	r0, r3
 800ea7a:	f000 f9f5 	bl	800ee68 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68da      	ldr	r2, [r3, #12]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2104      	movs	r1, #4
 800ea8a:	430a      	orrs	r2, r1
 800ea8c:	60da      	str	r2, [r3, #12]
      break;
 800ea8e:	e01e      	b.n	800eace <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2201      	movs	r2, #1
 800ea96:	2100      	movs	r1, #0
 800ea98:	0018      	movs	r0, r3
 800ea9a:	f000 f9e5 	bl	800ee68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	2104      	movs	r1, #4
 800eaa6:	0018      	movs	r0, r3
 800eaa8:	f000 f9de 	bl	800ee68 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	68da      	ldr	r2, [r3, #12]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2102      	movs	r1, #2
 800eab8:	430a      	orrs	r2, r1
 800eaba:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	68da      	ldr	r2, [r3, #12]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2104      	movs	r1, #4
 800eac8:	430a      	orrs	r2, r1
 800eaca:	60da      	str	r2, [r3, #12]
      break;
 800eacc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2101      	movs	r1, #1
 800eada:	430a      	orrs	r2, r1
 800eadc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eade:	2300      	movs	r3, #0
}
 800eae0:	0018      	movs	r0, r3
 800eae2:	46bd      	mov	sp, r7
 800eae4:	b005      	add	sp, #20
 800eae6:	bd90      	pop	{r4, r7, pc}

0800eae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	2202      	movs	r2, #2
 800eb04:	4013      	ands	r3, r2
 800eb06:	d021      	beq.n	800eb4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	d01d      	beq.n	800eb4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2203      	movs	r2, #3
 800eb16:	4252      	negs	r2, r2
 800eb18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	699b      	ldr	r3, [r3, #24]
 800eb26:	2203      	movs	r2, #3
 800eb28:	4013      	ands	r3, r2
 800eb2a:	d004      	beq.n	800eb36 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	0018      	movs	r0, r3
 800eb30:	f000 f8ea 	bl	800ed08 <HAL_TIM_IC_CaptureCallback>
 800eb34:	e007      	b.n	800eb46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	0018      	movs	r0, r3
 800eb3a:	f000 f8dd 	bl	800ecf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	0018      	movs	r0, r3
 800eb42:	f000 f8e9 	bl	800ed18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	2204      	movs	r2, #4
 800eb50:	4013      	ands	r3, r2
 800eb52:	d022      	beq.n	800eb9a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2204      	movs	r2, #4
 800eb58:	4013      	ands	r3, r2
 800eb5a:	d01e      	beq.n	800eb9a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2205      	movs	r2, #5
 800eb62:	4252      	negs	r2, r2
 800eb64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2202      	movs	r2, #2
 800eb6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	699a      	ldr	r2, [r3, #24]
 800eb72:	23c0      	movs	r3, #192	; 0xc0
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	4013      	ands	r3, r2
 800eb78:	d004      	beq.n	800eb84 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	0018      	movs	r0, r3
 800eb7e:	f000 f8c3 	bl	800ed08 <HAL_TIM_IC_CaptureCallback>
 800eb82:	e007      	b.n	800eb94 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	0018      	movs	r0, r3
 800eb88:	f000 f8b6 	bl	800ecf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	0018      	movs	r0, r3
 800eb90:	f000 f8c2 	bl	800ed18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	2208      	movs	r2, #8
 800eb9e:	4013      	ands	r3, r2
 800eba0:	d021      	beq.n	800ebe6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2208      	movs	r2, #8
 800eba6:	4013      	ands	r3, r2
 800eba8:	d01d      	beq.n	800ebe6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2209      	movs	r2, #9
 800ebb0:	4252      	negs	r2, r2
 800ebb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2204      	movs	r2, #4
 800ebb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	69db      	ldr	r3, [r3, #28]
 800ebc0:	2203      	movs	r2, #3
 800ebc2:	4013      	ands	r3, r2
 800ebc4:	d004      	beq.n	800ebd0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	0018      	movs	r0, r3
 800ebca:	f000 f89d 	bl	800ed08 <HAL_TIM_IC_CaptureCallback>
 800ebce:	e007      	b.n	800ebe0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	0018      	movs	r0, r3
 800ebd4:	f000 f890 	bl	800ecf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	0018      	movs	r0, r3
 800ebdc:	f000 f89c 	bl	800ed18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	2210      	movs	r2, #16
 800ebea:	4013      	ands	r3, r2
 800ebec:	d022      	beq.n	800ec34 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2210      	movs	r2, #16
 800ebf2:	4013      	ands	r3, r2
 800ebf4:	d01e      	beq.n	800ec34 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2211      	movs	r2, #17
 800ebfc:	4252      	negs	r2, r2
 800ebfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2208      	movs	r2, #8
 800ec04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	69da      	ldr	r2, [r3, #28]
 800ec0c:	23c0      	movs	r3, #192	; 0xc0
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	4013      	ands	r3, r2
 800ec12:	d004      	beq.n	800ec1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	0018      	movs	r0, r3
 800ec18:	f000 f876 	bl	800ed08 <HAL_TIM_IC_CaptureCallback>
 800ec1c:	e007      	b.n	800ec2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	0018      	movs	r0, r3
 800ec22:	f000 f869 	bl	800ecf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	0018      	movs	r0, r3
 800ec2a:	f000 f875 	bl	800ed18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	2201      	movs	r2, #1
 800ec38:	4013      	ands	r3, r2
 800ec3a:	d00c      	beq.n	800ec56 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	4013      	ands	r3, r2
 800ec42:	d008      	beq.n	800ec56 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2202      	movs	r2, #2
 800ec4a:	4252      	negs	r2, r2
 800ec4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	0018      	movs	r0, r3
 800ec52:	f7f9 feb1 	bl	80089b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2280      	movs	r2, #128	; 0x80
 800ec5a:	4013      	ands	r3, r2
 800ec5c:	d104      	bne.n	800ec68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ec5e:	68ba      	ldr	r2, [r7, #8]
 800ec60:	2380      	movs	r3, #128	; 0x80
 800ec62:	019b      	lsls	r3, r3, #6
 800ec64:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ec66:	d00b      	beq.n	800ec80 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2280      	movs	r2, #128	; 0x80
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	d007      	beq.n	800ec80 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a1e      	ldr	r2, [pc, #120]	; (800ecf0 <HAL_TIM_IRQHandler+0x208>)
 800ec76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	0018      	movs	r0, r3
 800ec7c:	f000 f996 	bl	800efac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ec80:	68ba      	ldr	r2, [r7, #8]
 800ec82:	2380      	movs	r3, #128	; 0x80
 800ec84:	005b      	lsls	r3, r3, #1
 800ec86:	4013      	ands	r3, r2
 800ec88:	d00b      	beq.n	800eca2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2280      	movs	r2, #128	; 0x80
 800ec8e:	4013      	ands	r3, r2
 800ec90:	d007      	beq.n	800eca2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a17      	ldr	r2, [pc, #92]	; (800ecf4 <HAL_TIM_IRQHandler+0x20c>)
 800ec98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	0018      	movs	r0, r3
 800ec9e:	f000 f98d 	bl	800efbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	2240      	movs	r2, #64	; 0x40
 800eca6:	4013      	ands	r3, r2
 800eca8:	d00c      	beq.n	800ecc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2240      	movs	r2, #64	; 0x40
 800ecae:	4013      	ands	r3, r2
 800ecb0:	d008      	beq.n	800ecc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2241      	movs	r2, #65	; 0x41
 800ecb8:	4252      	negs	r2, r2
 800ecba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	0018      	movs	r0, r3
 800ecc0:	f000 f832 	bl	800ed28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	2220      	movs	r2, #32
 800ecc8:	4013      	ands	r3, r2
 800ecca:	d00c      	beq.n	800ece6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2220      	movs	r2, #32
 800ecd0:	4013      	ands	r3, r2
 800ecd2:	d008      	beq.n	800ece6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2221      	movs	r2, #33	; 0x21
 800ecda:	4252      	negs	r2, r2
 800ecdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	0018      	movs	r0, r3
 800ece2:	f000 f95b 	bl	800ef9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ece6:	46c0      	nop			; (mov r8, r8)
 800ece8:	46bd      	mov	sp, r7
 800ecea:	b004      	add	sp, #16
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	46c0      	nop			; (mov r8, r8)
 800ecf0:	ffffdf7f 	.word	0xffffdf7f
 800ecf4:	fffffeff 	.word	0xfffffeff

0800ecf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ed00:	46c0      	nop			; (mov r8, r8)
 800ed02:	46bd      	mov	sp, r7
 800ed04:	b002      	add	sp, #8
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ed10:	46c0      	nop			; (mov r8, r8)
 800ed12:	46bd      	mov	sp, r7
 800ed14:	b002      	add	sp, #8
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ed20:	46c0      	nop			; (mov r8, r8)
 800ed22:	46bd      	mov	sp, r7
 800ed24:	b002      	add	sp, #8
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ed30:	46c0      	nop			; (mov r8, r8)
 800ed32:	46bd      	mov	sp, r7
 800ed34:	b002      	add	sp, #8
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4a3f      	ldr	r2, [pc, #252]	; (800ee48 <TIM_Base_SetConfig+0x110>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d00c      	beq.n	800ed6a <TIM_Base_SetConfig+0x32>
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	2380      	movs	r3, #128	; 0x80
 800ed54:	05db      	lsls	r3, r3, #23
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d007      	beq.n	800ed6a <TIM_Base_SetConfig+0x32>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4a3b      	ldr	r2, [pc, #236]	; (800ee4c <TIM_Base_SetConfig+0x114>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d003      	beq.n	800ed6a <TIM_Base_SetConfig+0x32>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4a3a      	ldr	r2, [pc, #232]	; (800ee50 <TIM_Base_SetConfig+0x118>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d108      	bne.n	800ed7c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2270      	movs	r2, #112	; 0x70
 800ed6e:	4393      	bics	r3, r2
 800ed70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a32      	ldr	r2, [pc, #200]	; (800ee48 <TIM_Base_SetConfig+0x110>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d01c      	beq.n	800edbe <TIM_Base_SetConfig+0x86>
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	2380      	movs	r3, #128	; 0x80
 800ed88:	05db      	lsls	r3, r3, #23
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d017      	beq.n	800edbe <TIM_Base_SetConfig+0x86>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4a2e      	ldr	r2, [pc, #184]	; (800ee4c <TIM_Base_SetConfig+0x114>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d013      	beq.n	800edbe <TIM_Base_SetConfig+0x86>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	4a2d      	ldr	r2, [pc, #180]	; (800ee50 <TIM_Base_SetConfig+0x118>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d00f      	beq.n	800edbe <TIM_Base_SetConfig+0x86>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	4a2c      	ldr	r2, [pc, #176]	; (800ee54 <TIM_Base_SetConfig+0x11c>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d00b      	beq.n	800edbe <TIM_Base_SetConfig+0x86>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	4a2b      	ldr	r2, [pc, #172]	; (800ee58 <TIM_Base_SetConfig+0x120>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d007      	beq.n	800edbe <TIM_Base_SetConfig+0x86>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	4a2a      	ldr	r2, [pc, #168]	; (800ee5c <TIM_Base_SetConfig+0x124>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d003      	beq.n	800edbe <TIM_Base_SetConfig+0x86>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4a29      	ldr	r2, [pc, #164]	; (800ee60 <TIM_Base_SetConfig+0x128>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d108      	bne.n	800edd0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	4a28      	ldr	r2, [pc, #160]	; (800ee64 <TIM_Base_SetConfig+0x12c>)
 800edc2:	4013      	ands	r3, r2
 800edc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	4313      	orrs	r3, r2
 800edce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2280      	movs	r2, #128	; 0x80
 800edd4:	4393      	bics	r3, r2
 800edd6:	001a      	movs	r2, r3
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	695b      	ldr	r3, [r3, #20]
 800eddc:	4313      	orrs	r3, r2
 800edde:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	689a      	ldr	r2, [r3, #8]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4a13      	ldr	r2, [pc, #76]	; (800ee48 <TIM_Base_SetConfig+0x110>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d00b      	beq.n	800ee16 <TIM_Base_SetConfig+0xde>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4a15      	ldr	r2, [pc, #84]	; (800ee58 <TIM_Base_SetConfig+0x120>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d007      	beq.n	800ee16 <TIM_Base_SetConfig+0xde>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4a14      	ldr	r2, [pc, #80]	; (800ee5c <TIM_Base_SetConfig+0x124>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d003      	beq.n	800ee16 <TIM_Base_SetConfig+0xde>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4a13      	ldr	r2, [pc, #76]	; (800ee60 <TIM_Base_SetConfig+0x128>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d103      	bne.n	800ee1e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	691a      	ldr	r2, [r3, #16]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2201      	movs	r2, #1
 800ee22:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	691b      	ldr	r3, [r3, #16]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	4013      	ands	r3, r2
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d106      	bne.n	800ee3e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	691b      	ldr	r3, [r3, #16]
 800ee34:	2201      	movs	r2, #1
 800ee36:	4393      	bics	r3, r2
 800ee38:	001a      	movs	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	611a      	str	r2, [r3, #16]
  }
}
 800ee3e:	46c0      	nop			; (mov r8, r8)
 800ee40:	46bd      	mov	sp, r7
 800ee42:	b004      	add	sp, #16
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	46c0      	nop			; (mov r8, r8)
 800ee48:	40012c00 	.word	0x40012c00
 800ee4c:	40000400 	.word	0x40000400
 800ee50:	40000800 	.word	0x40000800
 800ee54:	40002000 	.word	0x40002000
 800ee58:	40014000 	.word	0x40014000
 800ee5c:	40014400 	.word	0x40014400
 800ee60:	40014800 	.word	0x40014800
 800ee64:	fffffcff 	.word	0xfffffcff

0800ee68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b086      	sub	sp, #24
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	221f      	movs	r2, #31
 800ee78:	4013      	ands	r3, r2
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	409a      	lsls	r2, r3
 800ee7e:	0013      	movs	r3, r2
 800ee80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6a1b      	ldr	r3, [r3, #32]
 800ee86:	697a      	ldr	r2, [r7, #20]
 800ee88:	43d2      	mvns	r2, r2
 800ee8a:	401a      	ands	r2, r3
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6a1a      	ldr	r2, [r3, #32]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	211f      	movs	r1, #31
 800ee98:	400b      	ands	r3, r1
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	4099      	lsls	r1, r3
 800ee9e:	000b      	movs	r3, r1
 800eea0:	431a      	orrs	r2, r3
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	621a      	str	r2, [r3, #32]
}
 800eea6:	46c0      	nop			; (mov r8, r8)
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	b006      	add	sp, #24
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	223c      	movs	r2, #60	; 0x3c
 800eebe:	5c9b      	ldrb	r3, [r3, r2]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d101      	bne.n	800eec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eec4:	2302      	movs	r3, #2
 800eec6:	e05a      	b.n	800ef7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	223c      	movs	r2, #60	; 0x3c
 800eecc:	2101      	movs	r1, #1
 800eece:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	223d      	movs	r2, #61	; 0x3d
 800eed4:	2102      	movs	r1, #2
 800eed6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a26      	ldr	r2, [pc, #152]	; (800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d108      	bne.n	800ef04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	4a25      	ldr	r2, [pc, #148]	; (800ef8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800eef6:	4013      	ands	r3, r2
 800eef8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	4313      	orrs	r3, r2
 800ef02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2270      	movs	r2, #112	; 0x70
 800ef08:	4393      	bics	r3, r2
 800ef0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	4313      	orrs	r3, r2
 800ef14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a19      	ldr	r2, [pc, #100]	; (800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d014      	beq.n	800ef52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	2380      	movs	r3, #128	; 0x80
 800ef2e:	05db      	lsls	r3, r3, #23
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d00e      	beq.n	800ef52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a15      	ldr	r2, [pc, #84]	; (800ef90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d009      	beq.n	800ef52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4a14      	ldr	r2, [pc, #80]	; (800ef94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d004      	beq.n	800ef52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a12      	ldr	r2, [pc, #72]	; (800ef98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d10c      	bne.n	800ef6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	2280      	movs	r2, #128	; 0x80
 800ef56:	4393      	bics	r3, r2
 800ef58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	689b      	ldr	r3, [r3, #8]
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	4313      	orrs	r3, r2
 800ef62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	223d      	movs	r2, #61	; 0x3d
 800ef70:	2101      	movs	r1, #1
 800ef72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	223c      	movs	r2, #60	; 0x3c
 800ef78:	2100      	movs	r1, #0
 800ef7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	0018      	movs	r0, r3
 800ef80:	46bd      	mov	sp, r7
 800ef82:	b004      	add	sp, #16
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	46c0      	nop			; (mov r8, r8)
 800ef88:	40012c00 	.word	0x40012c00
 800ef8c:	ff0fffff 	.word	0xff0fffff
 800ef90:	40000400 	.word	0x40000400
 800ef94:	40000800 	.word	0x40000800
 800ef98:	40014000 	.word	0x40014000

0800ef9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800efa4:	46c0      	nop			; (mov r8, r8)
 800efa6:	46bd      	mov	sp, r7
 800efa8:	b002      	add	sp, #8
 800efaa:	bd80      	pop	{r7, pc}

0800efac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800efb4:	46c0      	nop			; (mov r8, r8)
 800efb6:	46bd      	mov	sp, r7
 800efb8:	b002      	add	sp, #8
 800efba:	bd80      	pop	{r7, pc}

0800efbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800efc4:	46c0      	nop			; (mov r8, r8)
 800efc6:	46bd      	mov	sp, r7
 800efc8:	b002      	add	sp, #8
 800efca:	bd80      	pop	{r7, pc}

0800efcc <LL_DMA_ConfigTransfer>:
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b086      	sub	sp, #24
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	60b9      	str	r1, [r7, #8]
 800efd6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800efdc:	4a0c      	ldr	r2, [pc, #48]	; (800f010 <LL_DMA_ConfigTransfer+0x44>)
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	18d3      	adds	r3, r2, r3
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	001a      	movs	r2, r3
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	18d3      	adds	r3, r2, r3
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4a09      	ldr	r2, [pc, #36]	; (800f014 <LL_DMA_ConfigTransfer+0x48>)
 800efee:	4013      	ands	r3, r2
 800eff0:	0019      	movs	r1, r3
 800eff2:	4a07      	ldr	r2, [pc, #28]	; (800f010 <LL_DMA_ConfigTransfer+0x44>)
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	18d3      	adds	r3, r2, r3
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	001a      	movs	r2, r3
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	18d3      	adds	r3, r2, r3
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	430a      	orrs	r2, r1
 800f004:	601a      	str	r2, [r3, #0]
}
 800f006:	46c0      	nop			; (mov r8, r8)
 800f008:	46bd      	mov	sp, r7
 800f00a:	b006      	add	sp, #24
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	46c0      	nop			; (mov r8, r8)
 800f010:	080240a8 	.word	0x080240a8
 800f014:	ffff800f 	.word	0xffff800f

0800f018 <LL_DMA_SetDataLength>:
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b086      	sub	sp, #24
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800f028:	4a0b      	ldr	r2, [pc, #44]	; (800f058 <LL_DMA_SetDataLength+0x40>)
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	18d3      	adds	r3, r2, r3
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	001a      	movs	r2, r3
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	18d3      	adds	r3, r2, r3
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	0c1b      	lsrs	r3, r3, #16
 800f03a:	0419      	lsls	r1, r3, #16
 800f03c:	4a06      	ldr	r2, [pc, #24]	; (800f058 <LL_DMA_SetDataLength+0x40>)
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	18d3      	adds	r3, r2, r3
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	001a      	movs	r2, r3
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	18d3      	adds	r3, r2, r3
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	430a      	orrs	r2, r1
 800f04e:	605a      	str	r2, [r3, #4]
}
 800f050:	46c0      	nop			; (mov r8, r8)
 800f052:	46bd      	mov	sp, r7
 800f054:	b006      	add	sp, #24
 800f056:	bd80      	pop	{r7, pc}
 800f058:	080240a8 	.word	0x080240a8

0800f05c <LL_DMA_SetMemoryAddress>:
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800f06c:	4a06      	ldr	r2, [pc, #24]	; (800f088 <LL_DMA_SetMemoryAddress+0x2c>)
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	18d3      	adds	r3, r2, r3
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	001a      	movs	r2, r3
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	18d3      	adds	r3, r2, r3
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	60da      	str	r2, [r3, #12]
}
 800f07e:	46c0      	nop			; (mov r8, r8)
 800f080:	46bd      	mov	sp, r7
 800f082:	b006      	add	sp, #24
 800f084:	bd80      	pop	{r7, pc}
 800f086:	46c0      	nop			; (mov r8, r8)
 800f088:	080240a8 	.word	0x080240a8

0800f08c <LL_DMA_SetPeriphAddress>:
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b086      	sub	sp, #24
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800f09c:	4a06      	ldr	r2, [pc, #24]	; (800f0b8 <LL_DMA_SetPeriphAddress+0x2c>)
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	18d3      	adds	r3, r2, r3
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	001a      	movs	r2, r3
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	18d3      	adds	r3, r2, r3
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	609a      	str	r2, [r3, #8]
}
 800f0ae:	46c0      	nop			; (mov r8, r8)
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	b006      	add	sp, #24
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	46c0      	nop			; (mov r8, r8)
 800f0b8:	080240a8 	.word	0x080240a8

0800f0bc <LL_DMA_SetPeriphRequest>:
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b086      	sub	sp, #24
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	0a9b      	lsrs	r3, r3, #10
 800f0cc:	4a0f      	ldr	r2, [pc, #60]	; (800f10c <LL_DMA_SetPeriphRequest+0x50>)
 800f0ce:	405a      	eors	r2, r3
 800f0d0:	0013      	movs	r3, r2
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	1a9b      	subs	r3, r3, r2
 800f0d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800f0d8:	68ba      	ldr	r2, [r7, #8]
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	18d3      	adds	r3, r2, r3
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	4a0b      	ldr	r2, [pc, #44]	; (800f110 <LL_DMA_SetPeriphRequest+0x54>)
 800f0e2:	4694      	mov	ip, r2
 800f0e4:	4463      	add	r3, ip
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	227f      	movs	r2, #127	; 0x7f
 800f0ea:	4393      	bics	r3, r2
 800f0ec:	0019      	movs	r1, r3
 800f0ee:	68ba      	ldr	r2, [r7, #8]
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	18d3      	adds	r3, r2, r3
 800f0f4:	009b      	lsls	r3, r3, #2
 800f0f6:	4a06      	ldr	r2, [pc, #24]	; (800f110 <LL_DMA_SetPeriphRequest+0x54>)
 800f0f8:	4694      	mov	ip, r2
 800f0fa:	4463      	add	r3, ip
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	430a      	orrs	r2, r1
 800f100:	601a      	str	r2, [r3, #0]
}
 800f102:	46c0      	nop			; (mov r8, r8)
 800f104:	46bd      	mov	sp, r7
 800f106:	b006      	add	sp, #24
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	46c0      	nop			; (mov r8, r8)
 800f10c:	00100080 	.word	0x00100080
 800f110:	40020800 	.word	0x40020800

0800f114 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f128:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800f12e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f134:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f13a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f140:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f146:	431a      	orrs	r2, r3
 800f148:	68b9      	ldr	r1, [r7, #8]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	0018      	movs	r0, r3
 800f14e:	f7ff ff3d 	bl	800efcc <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	685a      	ldr	r2, [r3, #4]
 800f156:	68b9      	ldr	r1, [r7, #8]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	0018      	movs	r0, r3
 800f15c:	f7ff ff7e 	bl	800f05c <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	68b9      	ldr	r1, [r7, #8]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	0018      	movs	r0, r3
 800f16a:	f7ff ff8f 	bl	800f08c <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a1a      	ldr	r2, [r3, #32]
 800f172:	68b9      	ldr	r1, [r7, #8]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	0018      	movs	r0, r3
 800f178:	f7ff ff4e 	bl	800f018 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f180:	68b9      	ldr	r1, [r7, #8]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	0018      	movs	r0, r3
 800f186:	f7ff ff99 	bl	800f0bc <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 800f18a:	2300      	movs	r3, #0
}
 800f18c:	0018      	movs	r0, r3
 800f18e:	46bd      	mov	sp, r7
 800f190:	b004      	add	sp, #16
 800f192:	bd80      	pop	{r7, pc}

0800f194 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f1de:	46c0      	nop			; (mov r8, r8)
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	b002      	add	sp, #8
 800f1e4:	bd80      	pop	{r7, pc}

0800f1e6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800f1e6:	b580      	push	{r7, lr}
 800f1e8:	b084      	sub	sp, #16
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	60f8      	str	r0, [r7, #12]
 800f1ee:	60b9      	str	r1, [r7, #8]
 800f1f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6819      	ldr	r1, [r3, #0]
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	435b      	muls	r3, r3
 800f1fa:	001a      	movs	r2, r3
 800f1fc:	0013      	movs	r3, r2
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	189b      	adds	r3, r3, r2
 800f202:	43db      	mvns	r3, r3
 800f204:	400b      	ands	r3, r1
 800f206:	001a      	movs	r2, r3
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	435b      	muls	r3, r3
 800f20c:	6879      	ldr	r1, [r7, #4]
 800f20e:	434b      	muls	r3, r1
 800f210:	431a      	orrs	r2, r3
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	601a      	str	r2, [r3, #0]
}
 800f216:	46c0      	nop			; (mov r8, r8)
 800f218:	46bd      	mov	sp, r7
 800f21a:	b004      	add	sp, #16
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b084      	sub	sp, #16
 800f222:	af00      	add	r7, sp, #0
 800f224:	60f8      	str	r0, [r7, #12]
 800f226:	60b9      	str	r1, [r7, #8]
 800f228:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	43d2      	mvns	r2, r2
 800f232:	401a      	ands	r2, r3
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	434b      	muls	r3, r1
 800f23a:	431a      	orrs	r2, r3
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	605a      	str	r2, [r3, #4]
}
 800f240:	46c0      	nop			; (mov r8, r8)
 800f242:	46bd      	mov	sp, r7
 800f244:	b004      	add	sp, #16
 800f246:	bd80      	pop	{r7, pc}

0800f248 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6899      	ldr	r1, [r3, #8]
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	435b      	muls	r3, r3
 800f25c:	001a      	movs	r2, r3
 800f25e:	0013      	movs	r3, r2
 800f260:	005b      	lsls	r3, r3, #1
 800f262:	189b      	adds	r3, r3, r2
 800f264:	43db      	mvns	r3, r3
 800f266:	400b      	ands	r3, r1
 800f268:	001a      	movs	r2, r3
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	435b      	muls	r3, r3
 800f26e:	6879      	ldr	r1, [r7, #4]
 800f270:	434b      	muls	r3, r1
 800f272:	431a      	orrs	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	609a      	str	r2, [r3, #8]
}
 800f278:	46c0      	nop			; (mov r8, r8)
 800f27a:	46bd      	mov	sp, r7
 800f27c:	b004      	add	sp, #16
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	68d9      	ldr	r1, [r3, #12]
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	435b      	muls	r3, r3
 800f294:	001a      	movs	r2, r3
 800f296:	0013      	movs	r3, r2
 800f298:	005b      	lsls	r3, r3, #1
 800f29a:	189b      	adds	r3, r3, r2
 800f29c:	43db      	mvns	r3, r3
 800f29e:	400b      	ands	r3, r1
 800f2a0:	001a      	movs	r2, r3
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	435b      	muls	r3, r3
 800f2a6:	6879      	ldr	r1, [r7, #4]
 800f2a8:	434b      	muls	r3, r1
 800f2aa:	431a      	orrs	r2, r3
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	60da      	str	r2, [r3, #12]
}
 800f2b0:	46c0      	nop			; (mov r8, r8)
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	b004      	add	sp, #16
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	6a19      	ldr	r1, [r3, #32]
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	435b      	muls	r3, r3
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	4353      	muls	r3, r2
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	435a      	muls	r2, r3
 800f2d4:	0013      	movs	r3, r2
 800f2d6:	011b      	lsls	r3, r3, #4
 800f2d8:	1a9b      	subs	r3, r3, r2
 800f2da:	43db      	mvns	r3, r3
 800f2dc:	400b      	ands	r3, r1
 800f2de:	001a      	movs	r2, r3
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	435b      	muls	r3, r3
 800f2e4:	68b9      	ldr	r1, [r7, #8]
 800f2e6:	434b      	muls	r3, r1
 800f2e8:	68b9      	ldr	r1, [r7, #8]
 800f2ea:	434b      	muls	r3, r1
 800f2ec:	6879      	ldr	r1, [r7, #4]
 800f2ee:	434b      	muls	r3, r1
 800f2f0:	431a      	orrs	r2, r3
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800f2f6:	46c0      	nop			; (mov r8, r8)
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	b004      	add	sp, #16
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b084      	sub	sp, #16
 800f302:	af00      	add	r7, sp, #0
 800f304:	60f8      	str	r0, [r7, #12]
 800f306:	60b9      	str	r1, [r7, #8]
 800f308:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	0a1b      	lsrs	r3, r3, #8
 800f312:	68ba      	ldr	r2, [r7, #8]
 800f314:	0a12      	lsrs	r2, r2, #8
 800f316:	4353      	muls	r3, r2
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	0a12      	lsrs	r2, r2, #8
 800f31c:	4353      	muls	r3, r2
 800f31e:	68ba      	ldr	r2, [r7, #8]
 800f320:	0a12      	lsrs	r2, r2, #8
 800f322:	435a      	muls	r2, r3
 800f324:	0013      	movs	r3, r2
 800f326:	011b      	lsls	r3, r3, #4
 800f328:	1a9b      	subs	r3, r3, r2
 800f32a:	43db      	mvns	r3, r3
 800f32c:	400b      	ands	r3, r1
 800f32e:	001a      	movs	r2, r3
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	0a1b      	lsrs	r3, r3, #8
 800f334:	68b9      	ldr	r1, [r7, #8]
 800f336:	0a09      	lsrs	r1, r1, #8
 800f338:	434b      	muls	r3, r1
 800f33a:	68b9      	ldr	r1, [r7, #8]
 800f33c:	0a09      	lsrs	r1, r1, #8
 800f33e:	434b      	muls	r3, r1
 800f340:	68b9      	ldr	r1, [r7, #8]
 800f342:	0a09      	lsrs	r1, r1, #8
 800f344:	434b      	muls	r3, r1
 800f346:	6879      	ldr	r1, [r7, #4]
 800f348:	434b      	muls	r3, r1
 800f34a:	431a      	orrs	r2, r3
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800f350:	46c0      	nop			; (mov r8, r8)
 800f352:	46bd      	mov	sp, r7
 800f354:	b004      	add	sp, #16
 800f356:	bd80      	pop	{r7, pc}

0800f358 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800f366:	e047      	b.n	800f3f8 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2101      	movs	r1, #1
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	4091      	lsls	r1, r2
 800f372:	000a      	movs	r2, r1
 800f374:	4013      	ands	r3, r2
 800f376:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d039      	beq.n	800f3f2 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	2b01      	cmp	r3, #1
 800f384:	d003      	beq.n	800f38e <LL_GPIO_Init+0x36>
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	2b02      	cmp	r3, #2
 800f38c:	d10d      	bne.n	800f3aa <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	689a      	ldr	r2, [r3, #8]
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	0018      	movs	r0, r3
 800f398:	f7ff ff56 	bl	800f248 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	68da      	ldr	r2, [r3, #12]
 800f3a0:	68b9      	ldr	r1, [r7, #8]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	0018      	movs	r0, r3
 800f3a6:	f7ff ff3a 	bl	800f21e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	691a      	ldr	r2, [r3, #16]
 800f3ae:	68b9      	ldr	r1, [r7, #8]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	0018      	movs	r0, r3
 800f3b4:	f7ff ff64 	bl	800f280 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	2b02      	cmp	r3, #2
 800f3be:	d111      	bne.n	800f3e4 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2bff      	cmp	r3, #255	; 0xff
 800f3c4:	d807      	bhi.n	800f3d6 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	695a      	ldr	r2, [r3, #20]
 800f3ca:	68b9      	ldr	r1, [r7, #8]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	0018      	movs	r0, r3
 800f3d0:	f7ff ff72 	bl	800f2b8 <LL_GPIO_SetAFPin_0_7>
 800f3d4:	e006      	b.n	800f3e4 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	695a      	ldr	r2, [r3, #20]
 800f3da:	68b9      	ldr	r1, [r7, #8]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	0018      	movs	r0, r3
 800f3e0:	f7ff ff8d 	bl	800f2fe <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	685a      	ldr	r2, [r3, #4]
 800f3e8:	68b9      	ldr	r1, [r7, #8]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	0018      	movs	r0, r3
 800f3ee:	f7ff fefa 	bl	800f1e6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	40da      	lsrs	r2, r3
 800f400:	1e13      	subs	r3, r2, #0
 800f402:	d1b1      	bne.n	800f368 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800f404:	2300      	movs	r3, #0
}
 800f406:	0018      	movs	r0, r3
 800f408:	46bd      	mov	sp, r7
 800f40a:	b004      	add	sp, #16
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <LL_LPUART_IsEnabled>:
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b082      	sub	sp, #8
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2201      	movs	r2, #1
 800f41c:	4013      	ands	r3, r2
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d101      	bne.n	800f426 <LL_LPUART_IsEnabled+0x18>
 800f422:	2301      	movs	r3, #1
 800f424:	e000      	b.n	800f428 <LL_LPUART_IsEnabled+0x1a>
 800f426:	2300      	movs	r3, #0
}
 800f428:	0018      	movs	r0, r3
 800f42a:	46bd      	mov	sp, r7
 800f42c:	b002      	add	sp, #8
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <LL_LPUART_SetPrescaler>:
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f43e:	220f      	movs	r2, #15
 800f440:	4393      	bics	r3, r2
 800f442:	683a      	ldr	r2, [r7, #0]
 800f444:	b292      	uxth	r2, r2
 800f446:	431a      	orrs	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f44c:	46c0      	nop			; (mov r8, r8)
 800f44e:	46bd      	mov	sp, r7
 800f450:	b002      	add	sp, #8
 800f452:	bd80      	pop	{r7, pc}

0800f454 <LL_LPUART_SetStopBitsLength>:
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	4a05      	ldr	r2, [pc, #20]	; (800f478 <LL_LPUART_SetStopBitsLength+0x24>)
 800f464:	401a      	ands	r2, r3
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	431a      	orrs	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	605a      	str	r2, [r3, #4]
}
 800f46e:	46c0      	nop			; (mov r8, r8)
 800f470:	46bd      	mov	sp, r7
 800f472:	b002      	add	sp, #8
 800f474:	bd80      	pop	{r7, pc}
 800f476:	46c0      	nop			; (mov r8, r8)
 800f478:	ffffcfff 	.word	0xffffcfff

0800f47c <LL_LPUART_SetHWFlowCtrl>:
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	4a05      	ldr	r2, [pc, #20]	; (800f4a0 <LL_LPUART_SetHWFlowCtrl+0x24>)
 800f48c:	401a      	ands	r2, r3
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	431a      	orrs	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	609a      	str	r2, [r3, #8]
}
 800f496:	46c0      	nop			; (mov r8, r8)
 800f498:	46bd      	mov	sp, r7
 800f49a:	b002      	add	sp, #8
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	46c0      	nop			; (mov r8, r8)
 800f4a0:	fffffcff 	.word	0xfffffcff

0800f4a4 <LL_LPUART_SetBaudRate>:
{
 800f4a4:	b5b0      	push	{r4, r5, r7, lr}
 800f4a6:	b08c      	sub	sp, #48	; 0x30
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f4ac:	62b9      	str	r1, [r7, #40]	; 0x28
 800f4ae:	627a      	str	r2, [r7, #36]	; 0x24
 800f4b0:	623b      	str	r3, [r7, #32]
  if (BaudRate != 0U)
 800f4b2:	6a3b      	ldr	r3, [r7, #32]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d030      	beq.n	800f51a <LL_LPUART_SetBaudRate+0x76>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800f4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ba:	61bb      	str	r3, [r7, #24]
 800f4bc:	2300      	movs	r3, #0
 800f4be:	61fb      	str	r3, [r7, #28]
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	001a      	movs	r2, r3
 800f4c6:	4b17      	ldr	r3, [pc, #92]	; (800f524 <LL_LPUART_SetBaudRate+0x80>)
 800f4c8:	0052      	lsls	r2, r2, #1
 800f4ca:	5ad3      	ldrh	r3, [r2, r3]
 800f4cc:	613b      	str	r3, [r7, #16]
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	617b      	str	r3, [r7, #20]
 800f4d2:	693a      	ldr	r2, [r7, #16]
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	69b8      	ldr	r0, [r7, #24]
 800f4d8:	69f9      	ldr	r1, [r7, #28]
 800f4da:	f7f6 ffff 	bl	80064dc <__aeabi_uldivmod>
 800f4de:	0002      	movs	r2, r0
 800f4e0:	000b      	movs	r3, r1
 800f4e2:	0e11      	lsrs	r1, r2, #24
 800f4e4:	021d      	lsls	r5, r3, #8
 800f4e6:	430d      	orrs	r5, r1
 800f4e8:	0214      	lsls	r4, r2, #8
 800f4ea:	6a3b      	ldr	r3, [r7, #32]
 800f4ec:	085b      	lsrs	r3, r3, #1
 800f4ee:	60bb      	str	r3, [r7, #8]
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	60fb      	str	r3, [r7, #12]
 800f4f4:	68b8      	ldr	r0, [r7, #8]
 800f4f6:	68f9      	ldr	r1, [r7, #12]
 800f4f8:	1900      	adds	r0, r0, r4
 800f4fa:	4169      	adcs	r1, r5
 800f4fc:	6a3b      	ldr	r3, [r7, #32]
 800f4fe:	603b      	str	r3, [r7, #0]
 800f500:	2300      	movs	r3, #0
 800f502:	607b      	str	r3, [r7, #4]
 800f504:	683a      	ldr	r2, [r7, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f7f6 ffe8 	bl	80064dc <__aeabi_uldivmod>
 800f50c:	0002      	movs	r2, r0
 800f50e:	000b      	movs	r3, r1
 800f510:	0013      	movs	r3, r2
 800f512:	031b      	lsls	r3, r3, #12
 800f514:	0b1a      	lsrs	r2, r3, #12
 800f516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f518:	60da      	str	r2, [r3, #12]
}
 800f51a:	46c0      	nop			; (mov r8, r8)
 800f51c:	46bd      	mov	sp, r7
 800f51e:	b00c      	add	sp, #48	; 0x30
 800f520:	bdb0      	pop	{r4, r5, r7, pc}
 800f522:	46c0      	nop			; (mov r8, r8)
 800f524:	080240b0 	.word	0x080240b0

0800f528 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800f532:	230f      	movs	r3, #15
 800f534:	18fb      	adds	r3, r7, r3
 800f536:	2201      	movs	r2, #1
 800f538:	701a      	strb	r2, [r3, #0]
#if defined(LPUART2)
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800f53a:	2300      	movs	r3, #0
 800f53c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	0018      	movs	r0, r3
 800f542:	f7ff ff64 	bl	800f40e <LL_LPUART_IsEnabled>
 800f546:	1e03      	subs	r3, r0, #0
 800f548:	d14d      	bne.n	800f5e6 <LL_LPUART_Init+0xbe>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4a29      	ldr	r2, [pc, #164]	; (800f5f4 <LL_LPUART_Init+0xcc>)
 800f550:	401a      	ands	r2, r3
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	6899      	ldr	r1, [r3, #8]
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	691b      	ldr	r3, [r3, #16]
 800f55a:	4319      	orrs	r1, r3
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	695b      	ldr	r3, [r3, #20]
 800f560:	430b      	orrs	r3, r1
 800f562:	431a      	orrs	r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	68da      	ldr	r2, [r3, #12]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	0011      	movs	r1, r2
 800f570:	0018      	movs	r0, r3
 800f572:	f7ff ff6f 	bl	800f454 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	699a      	ldr	r2, [r3, #24]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	0011      	movs	r1, r2
 800f57e:	0018      	movs	r0, r3
 800f580:	f7ff ff7c 	bl	800f47c <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
#if defined(LPUART2)
    if (LPUARTx == LPUART1)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4a1c      	ldr	r2, [pc, #112]	; (800f5f8 <LL_LPUART_Init+0xd0>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d107      	bne.n	800f59c <LL_LPUART_Init+0x74>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 800f58c:	23c0      	movs	r3, #192	; 0xc0
 800f58e:	011b      	lsls	r3, r3, #4
 800f590:	0018      	movs	r0, r3
 800f592:	f000 f8bf 	bl	800f714 <LL_RCC_GetLPUARTClockFreq>
 800f596:	0003      	movs	r3, r0
 800f598:	60bb      	str	r3, [r7, #8]
 800f59a:	e00a      	b.n	800f5b2 <LL_LPUART_Init+0x8a>
    }
    else if (LPUARTx == LPUART2)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4a17      	ldr	r2, [pc, #92]	; (800f5fc <LL_LPUART_Init+0xd4>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d106      	bne.n	800f5b2 <LL_LPUART_Init+0x8a>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART2_CLKSOURCE);
 800f5a4:	23c0      	movs	r3, #192	; 0xc0
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	0018      	movs	r0, r3
 800f5aa:	f000 f8b3 	bl	800f714 <LL_RCC_GetLPUARTClockFreq>
 800f5ae:	0003      	movs	r3, r0
 800f5b0:	60bb      	str	r3, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d00f      	beq.n	800f5d8 <LL_LPUART_Init+0xb0>
        && (LPUART_InitStruct->BaudRate != 0U))
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00b      	beq.n	800f5d8 <LL_LPUART_Init+0xb0>
    {
      status = SUCCESS;
 800f5c0:	230f      	movs	r3, #15
 800f5c2:	18fb      	adds	r3, r7, r3
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	701a      	strb	r2, [r3, #0]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 800f5d0:	68b9      	ldr	r1, [r7, #8]
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7ff ff66 	bl	800f4a4 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	0011      	movs	r1, r2
 800f5e0:	0018      	movs	r0, r3
 800f5e2:	f7ff ff25 	bl	800f430 <LL_LPUART_SetPrescaler>
  }

  return (status);
 800f5e6:	230f      	movs	r3, #15
 800f5e8:	18fb      	adds	r3, r7, r3
 800f5ea:	781b      	ldrb	r3, [r3, #0]
}
 800f5ec:	0018      	movs	r0, r3
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	b004      	add	sp, #16
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	efffe9f3 	.word	0xefffe9f3
 800f5f8:	40008000 	.word	0x40008000
 800f5fc:	40008400 	.word	0x40008400

0800f600 <LL_RCC_HSI_IsReady>:
{
 800f600:	b580      	push	{r7, lr}
 800f602:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f604:	4b07      	ldr	r3, [pc, #28]	; (800f624 <LL_RCC_HSI_IsReady+0x24>)
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	2380      	movs	r3, #128	; 0x80
 800f60a:	00db      	lsls	r3, r3, #3
 800f60c:	401a      	ands	r2, r3
 800f60e:	2380      	movs	r3, #128	; 0x80
 800f610:	00db      	lsls	r3, r3, #3
 800f612:	429a      	cmp	r2, r3
 800f614:	d101      	bne.n	800f61a <LL_RCC_HSI_IsReady+0x1a>
 800f616:	2301      	movs	r3, #1
 800f618:	e000      	b.n	800f61c <LL_RCC_HSI_IsReady+0x1c>
 800f61a:	2300      	movs	r3, #0
}
 800f61c:	0018      	movs	r0, r3
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	46c0      	nop			; (mov r8, r8)
 800f624:	40021000 	.word	0x40021000

0800f628 <LL_RCC_LSE_IsReady>:
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f62c:	4b05      	ldr	r3, [pc, #20]	; (800f644 <LL_RCC_LSE_IsReady+0x1c>)
 800f62e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f630:	2202      	movs	r2, #2
 800f632:	4013      	ands	r3, r2
 800f634:	2b02      	cmp	r3, #2
 800f636:	d101      	bne.n	800f63c <LL_RCC_LSE_IsReady+0x14>
 800f638:	2301      	movs	r3, #1
 800f63a:	e000      	b.n	800f63e <LL_RCC_LSE_IsReady+0x16>
 800f63c:	2300      	movs	r3, #0
}
 800f63e:	0018      	movs	r0, r3
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	40021000 	.word	0x40021000

0800f648 <LL_RCC_GetSysClkSource>:
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f64c:	4b03      	ldr	r3, [pc, #12]	; (800f65c <LL_RCC_GetSysClkSource+0x14>)
 800f64e:	689b      	ldr	r3, [r3, #8]
 800f650:	2238      	movs	r2, #56	; 0x38
 800f652:	4013      	ands	r3, r2
}
 800f654:	0018      	movs	r0, r3
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	46c0      	nop			; (mov r8, r8)
 800f65c:	40021000 	.word	0x40021000

0800f660 <LL_RCC_GetAHBPrescaler>:
{
 800f660:	b580      	push	{r7, lr}
 800f662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f664:	4b03      	ldr	r3, [pc, #12]	; (800f674 <LL_RCC_GetAHBPrescaler+0x14>)
 800f666:	689a      	ldr	r2, [r3, #8]
 800f668:	23f0      	movs	r3, #240	; 0xf0
 800f66a:	011b      	lsls	r3, r3, #4
 800f66c:	4013      	ands	r3, r2
}
 800f66e:	0018      	movs	r0, r3
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	40021000 	.word	0x40021000

0800f678 <LL_RCC_GetAPB1Prescaler>:
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800f67c:	4b03      	ldr	r3, [pc, #12]	; (800f68c <LL_RCC_GetAPB1Prescaler+0x14>)
 800f67e:	689a      	ldr	r2, [r3, #8]
 800f680:	23e0      	movs	r3, #224	; 0xe0
 800f682:	01db      	lsls	r3, r3, #7
 800f684:	4013      	ands	r3, r2
}
 800f686:	0018      	movs	r0, r3
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	40021000 	.word	0x40021000

0800f690 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx) | (LPUARTx << 16U));
 800f698:	4b05      	ldr	r3, [pc, #20]	; (800f6b0 <LL_RCC_GetLPUARTClockSource+0x20>)
 800f69a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	401a      	ands	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	041b      	lsls	r3, r3, #16
 800f6a4:	4313      	orrs	r3, r2
}
 800f6a6:	0018      	movs	r0, r3
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	b002      	add	sp, #8
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	46c0      	nop			; (mov r8, r8)
 800f6b0:	40021000 	.word	0x40021000

0800f6b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800f6b8:	4b03      	ldr	r3, [pc, #12]	; (800f6c8 <LL_RCC_PLL_GetN+0x14>)
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	0a1b      	lsrs	r3, r3, #8
 800f6be:	227f      	movs	r2, #127	; 0x7f
 800f6c0:	4013      	ands	r3, r2
}
 800f6c2:	0018      	movs	r0, r3
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	40021000 	.word	0x40021000

0800f6cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800f6d0:	4b03      	ldr	r3, [pc, #12]	; (800f6e0 <LL_RCC_PLL_GetR+0x14>)
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	0f5b      	lsrs	r3, r3, #29
 800f6d6:	075b      	lsls	r3, r3, #29
}
 800f6d8:	0018      	movs	r0, r3
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	46c0      	nop			; (mov r8, r8)
 800f6e0:	40021000 	.word	0x40021000

0800f6e4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800f6e8:	4b03      	ldr	r3, [pc, #12]	; (800f6f8 <LL_RCC_PLL_GetMainSource+0x14>)
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	2203      	movs	r2, #3
 800f6ee:	4013      	ands	r3, r2
}
 800f6f0:	0018      	movs	r0, r3
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	46c0      	nop			; (mov r8, r8)
 800f6f8:	40021000 	.word	0x40021000

0800f6fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800f700:	4b03      	ldr	r3, [pc, #12]	; (800f710 <LL_RCC_PLL_GetDivider+0x14>)
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	2270      	movs	r2, #112	; 0x70
 800f706:	4013      	ands	r3, r2
}
 800f708:	0018      	movs	r0, r3
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	46c0      	nop			; (mov r8, r8)
 800f710:	40021000 	.word	0x40021000

0800f714 <LL_RCC_GetLPUARTClockFreq>:
  * @retval LPUART clock frequency (in Hz)
  *         @arg @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  * (*) feature not available on all devices
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800f71c:	2300      	movs	r3, #0
 800f71e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  if (LPUARTxSource == LL_RCC_LPUART1_CLKSOURCE)
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	23c0      	movs	r3, #192	; 0xc0
 800f724:	011b      	lsls	r3, r3, #4
 800f726:	429a      	cmp	r2, r3
 800f728:	d134      	bne.n	800f794 <LL_RCC_GetLPUARTClockFreq+0x80>
  {
    /* LPUART1CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	0018      	movs	r0, r3
 800f72e:	f7ff ffaf 	bl	800f690 <LL_RCC_GetLPUARTClockSource>
 800f732:	0003      	movs	r3, r0
 800f734:	4a3a      	ldr	r2, [pc, #232]	; (800f820 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d016      	beq.n	800f768 <LL_RCC_GetLPUARTClockFreq+0x54>
 800f73a:	4a39      	ldr	r2, [pc, #228]	; (800f820 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d81c      	bhi.n	800f77a <LL_RCC_GetLPUARTClockFreq+0x66>
 800f740:	4a38      	ldr	r2, [pc, #224]	; (800f824 <LL_RCC_GetLPUARTClockFreq+0x110>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d003      	beq.n	800f74e <LL_RCC_GetLPUARTClockFreq+0x3a>
 800f746:	4a38      	ldr	r2, [pc, #224]	; (800f828 <LL_RCC_GetLPUARTClockFreq+0x114>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d005      	beq.n	800f758 <LL_RCC_GetLPUARTClockFreq+0x44>
 800f74c:	e015      	b.n	800f77a <LL_RCC_GetLPUARTClockFreq+0x66>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 800f74e:	f000 f875 	bl	800f83c <RCC_GetSystemClockFreq>
 800f752:	0003      	movs	r3, r0
 800f754:	60fb      	str	r3, [r7, #12]
        break;
 800f756:	e05e      	b.n	800f816 <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800f758:	f7ff ff52 	bl	800f600 <LL_RCC_HSI_IsReady>
 800f75c:	0003      	movs	r3, r0
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d152      	bne.n	800f808 <LL_RCC_GetLPUARTClockFreq+0xf4>
        {
          lpuart_frequency = HSI_VALUE;
 800f762:	4b32      	ldr	r3, [pc, #200]	; (800f82c <LL_RCC_GetLPUARTClockFreq+0x118>)
 800f764:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f766:	e04f      	b.n	800f808 <LL_RCC_GetLPUARTClockFreq+0xf4>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800f768:	f7ff ff5e 	bl	800f628 <LL_RCC_LSE_IsReady>
 800f76c:	0003      	movs	r3, r0
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d14c      	bne.n	800f80c <LL_RCC_GetLPUARTClockFreq+0xf8>
        {
          lpuart_frequency = LSE_VALUE;
 800f772:	2380      	movs	r3, #128	; 0x80
 800f774:	021b      	lsls	r3, r3, #8
 800f776:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f778:	e048      	b.n	800f80c <LL_RCC_GetLPUARTClockFreq+0xf8>

      case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800f77a:	f000 f85f 	bl	800f83c <RCC_GetSystemClockFreq>
 800f77e:	0003      	movs	r3, r0
 800f780:	0018      	movs	r0, r3
 800f782:	f000 f889 	bl	800f898 <RCC_GetHCLKClockFreq>
 800f786:	0003      	movs	r3, r0
 800f788:	0018      	movs	r0, r3
 800f78a:	f000 f89d 	bl	800f8c8 <RCC_GetPCLK1ClockFreq>
 800f78e:	0003      	movs	r3, r0
 800f790:	60fb      	str	r3, [r7, #12]
        break;
 800f792:	e040      	b.n	800f816 <LL_RCC_GetLPUARTClockFreq+0x102>
    }
  }
#if defined(LPUART2)
  else if (LPUARTxSource == LL_RCC_LPUART2_CLKSOURCE)
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	23c0      	movs	r3, #192	; 0xc0
 800f798:	009b      	lsls	r3, r3, #2
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d13b      	bne.n	800f816 <LL_RCC_GetLPUARTClockFreq+0x102>
  {
    /* LPUART2CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	0018      	movs	r0, r3
 800f7a2:	f7ff ff75 	bl	800f690 <LL_RCC_GetLPUARTClockSource>
 800f7a6:	0003      	movs	r3, r0
 800f7a8:	4a21      	ldr	r2, [pc, #132]	; (800f830 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d016      	beq.n	800f7dc <LL_RCC_GetLPUARTClockFreq+0xc8>
 800f7ae:	4a20      	ldr	r2, [pc, #128]	; (800f830 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d81c      	bhi.n	800f7ee <LL_RCC_GetLPUARTClockFreq+0xda>
 800f7b4:	4a1f      	ldr	r2, [pc, #124]	; (800f834 <LL_RCC_GetLPUARTClockFreq+0x120>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d003      	beq.n	800f7c2 <LL_RCC_GetLPUARTClockFreq+0xae>
 800f7ba:	4a1f      	ldr	r2, [pc, #124]	; (800f838 <LL_RCC_GetLPUARTClockFreq+0x124>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d005      	beq.n	800f7cc <LL_RCC_GetLPUARTClockFreq+0xb8>
 800f7c0:	e015      	b.n	800f7ee <LL_RCC_GetLPUARTClockFreq+0xda>
    {
      case LL_RCC_LPUART2_CLKSOURCE_SYSCLK: /* LPUART2 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 800f7c2:	f000 f83b 	bl	800f83c <RCC_GetSystemClockFreq>
 800f7c6:	0003      	movs	r3, r0
 800f7c8:	60fb      	str	r3, [r7, #12]
        break;
 800f7ca:	e024      	b.n	800f816 <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART2_CLKSOURCE_HSI:    /* LPUART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800f7cc:	f7ff ff18 	bl	800f600 <LL_RCC_HSI_IsReady>
 800f7d0:	0003      	movs	r3, r0
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d11c      	bne.n	800f810 <LL_RCC_GetLPUARTClockFreq+0xfc>
        {
          lpuart_frequency = HSI_VALUE;
 800f7d6:	4b15      	ldr	r3, [pc, #84]	; (800f82c <LL_RCC_GetLPUARTClockFreq+0x118>)
 800f7d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f7da:	e019      	b.n	800f810 <LL_RCC_GetLPUARTClockFreq+0xfc>

      case LL_RCC_LPUART2_CLKSOURCE_LSE:    /* LPUART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800f7dc:	f7ff ff24 	bl	800f628 <LL_RCC_LSE_IsReady>
 800f7e0:	0003      	movs	r3, r0
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	d116      	bne.n	800f814 <LL_RCC_GetLPUARTClockFreq+0x100>
        {
          lpuart_frequency = LSE_VALUE;
 800f7e6:	2380      	movs	r3, #128	; 0x80
 800f7e8:	021b      	lsls	r3, r3, #8
 800f7ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f7ec:	e012      	b.n	800f814 <LL_RCC_GetLPUARTClockFreq+0x100>

      case LL_RCC_LPUART2_CLKSOURCE_PCLK1:  /* LPUART2 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800f7ee:	f000 f825 	bl	800f83c <RCC_GetSystemClockFreq>
 800f7f2:	0003      	movs	r3, r0
 800f7f4:	0018      	movs	r0, r3
 800f7f6:	f000 f84f 	bl	800f898 <RCC_GetHCLKClockFreq>
 800f7fa:	0003      	movs	r3, r0
 800f7fc:	0018      	movs	r0, r3
 800f7fe:	f000 f863 	bl	800f8c8 <RCC_GetPCLK1ClockFreq>
 800f802:	0003      	movs	r3, r0
 800f804:	60fb      	str	r3, [r7, #12]
        break;
 800f806:	e006      	b.n	800f816 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800f808:	46c0      	nop			; (mov r8, r8)
 800f80a:	e004      	b.n	800f816 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800f80c:	46c0      	nop			; (mov r8, r8)
 800f80e:	e002      	b.n	800f816 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800f810:	46c0      	nop			; (mov r8, r8)
 800f812:	e000      	b.n	800f816 <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 800f814:	46c0      	nop			; (mov r8, r8)
  else
  {
    /*nothing to do*/
  }

  return lpuart_frequency;
 800f816:	68fb      	ldr	r3, [r7, #12]
}
 800f818:	0018      	movs	r0, r3
 800f81a:	46bd      	mov	sp, r7
 800f81c:	b004      	add	sp, #16
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	0c000c00 	.word	0x0c000c00
 800f824:	0c000400 	.word	0x0c000400
 800f828:	0c000800 	.word	0x0c000800
 800f82c:	00f42400 	.word	0x00f42400
 800f830:	03000300 	.word	0x03000300
 800f834:	03000100 	.word	0x03000100
 800f838:	03000200 	.word	0x03000200

0800f83c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800f842:	f7ff ff01 	bl	800f648 <LL_RCC_GetSysClkSource>
 800f846:	0003      	movs	r3, r0
 800f848:	2b08      	cmp	r3, #8
 800f84a:	d002      	beq.n	800f852 <RCC_GetSystemClockFreq+0x16>
 800f84c:	2b10      	cmp	r3, #16
 800f84e:	d003      	beq.n	800f858 <RCC_GetSystemClockFreq+0x1c>
 800f850:	e007      	b.n	800f862 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800f852:	4b0e      	ldr	r3, [pc, #56]	; (800f88c <RCC_GetSystemClockFreq+0x50>)
 800f854:	607b      	str	r3, [r7, #4]
      break;
 800f856:	e014      	b.n	800f882 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800f858:	f000 f84c 	bl	800f8f4 <RCC_PLL_GetFreqDomain_SYS>
 800f85c:	0003      	movs	r3, r0
 800f85e:	607b      	str	r3, [r7, #4]
      break;
 800f860:	e00f      	b.n	800f882 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800f862:	4b0b      	ldr	r3, [pc, #44]	; (800f890 <RCC_GetSystemClockFreq+0x54>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	0adb      	lsrs	r3, r3, #11
 800f868:	2207      	movs	r2, #7
 800f86a:	4013      	ands	r3, r2
 800f86c:	2201      	movs	r2, #1
 800f86e:	409a      	lsls	r2, r3
 800f870:	0013      	movs	r3, r2
 800f872:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800f874:	6839      	ldr	r1, [r7, #0]
 800f876:	4807      	ldr	r0, [pc, #28]	; (800f894 <RCC_GetSystemClockFreq+0x58>)
 800f878:	f7f6 fcba 	bl	80061f0 <__udivsi3>
 800f87c:	0003      	movs	r3, r0
 800f87e:	607b      	str	r3, [r7, #4]
      break;
 800f880:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800f882:	687b      	ldr	r3, [r7, #4]
}
 800f884:	0018      	movs	r0, r3
 800f886:	46bd      	mov	sp, r7
 800f888:	b002      	add	sp, #8
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	007a1200 	.word	0x007a1200
 800f890:	40021000 	.word	0x40021000
 800f894:	00f42400 	.word	0x00f42400

0800f898 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800f8a0:	f7ff fede 	bl	800f660 <LL_RCC_GetAHBPrescaler>
 800f8a4:	0003      	movs	r3, r0
 800f8a6:	0a1b      	lsrs	r3, r3, #8
 800f8a8:	220f      	movs	r2, #15
 800f8aa:	401a      	ands	r2, r3
 800f8ac:	4b05      	ldr	r3, [pc, #20]	; (800f8c4 <RCC_GetHCLKClockFreq+0x2c>)
 800f8ae:	0092      	lsls	r2, r2, #2
 800f8b0:	58d3      	ldr	r3, [r2, r3]
 800f8b2:	221f      	movs	r2, #31
 800f8b4:	4013      	ands	r3, r2
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	40da      	lsrs	r2, r3
 800f8ba:	0013      	movs	r3, r2
}
 800f8bc:	0018      	movs	r0, r3
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	b002      	add	sp, #8
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	08024048 	.word	0x08024048

0800f8c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800f8d0:	f7ff fed2 	bl	800f678 <LL_RCC_GetAPB1Prescaler>
 800f8d4:	0003      	movs	r3, r0
 800f8d6:	0b1a      	lsrs	r2, r3, #12
 800f8d8:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <RCC_GetPCLK1ClockFreq+0x28>)
 800f8da:	0092      	lsls	r2, r2, #2
 800f8dc:	58d3      	ldr	r3, [r2, r3]
 800f8de:	221f      	movs	r2, #31
 800f8e0:	4013      	ands	r3, r2
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	40da      	lsrs	r2, r3
 800f8e6:	0013      	movs	r3, r2
}
 800f8e8:	0018      	movs	r0, r3
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	b002      	add	sp, #8
 800f8ee:	bd80      	pop	{r7, pc}
 800f8f0:	08024088 	.word	0x08024088

0800f8f4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800f8f4:	b590      	push	{r4, r7, lr}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800f8fa:	f7ff fef3 	bl	800f6e4 <LL_RCC_PLL_GetMainSource>
 800f8fe:	0003      	movs	r3, r0
 800f900:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b02      	cmp	r3, #2
 800f906:	d003      	beq.n	800f910 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	2b03      	cmp	r3, #3
 800f90c:	d003      	beq.n	800f916 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800f90e:	e005      	b.n	800f91c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800f910:	4b13      	ldr	r3, [pc, #76]	; (800f960 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800f912:	607b      	str	r3, [r7, #4]
      break;
 800f914:	e005      	b.n	800f922 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800f916:	4b13      	ldr	r3, [pc, #76]	; (800f964 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800f918:	607b      	str	r3, [r7, #4]
      break;
 800f91a:	e002      	b.n	800f922 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800f91c:	4b10      	ldr	r3, [pc, #64]	; (800f960 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800f91e:	607b      	str	r3, [r7, #4]
      break;
 800f920:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800f922:	f7ff fec7 	bl	800f6b4 <LL_RCC_PLL_GetN>
 800f926:	0002      	movs	r2, r0
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4353      	muls	r3, r2
 800f92c:	001c      	movs	r4, r3
 800f92e:	f7ff fee5 	bl	800f6fc <LL_RCC_PLL_GetDivider>
 800f932:	0003      	movs	r3, r0
 800f934:	091b      	lsrs	r3, r3, #4
 800f936:	3301      	adds	r3, #1
 800f938:	0019      	movs	r1, r3
 800f93a:	0020      	movs	r0, r4
 800f93c:	f7f6 fc58 	bl	80061f0 <__udivsi3>
 800f940:	0003      	movs	r3, r0
 800f942:	001c      	movs	r4, r3
 800f944:	f7ff fec2 	bl	800f6cc <LL_RCC_PLL_GetR>
 800f948:	0003      	movs	r3, r0
 800f94a:	0f5b      	lsrs	r3, r3, #29
 800f94c:	3301      	adds	r3, #1
 800f94e:	0019      	movs	r1, r3
 800f950:	0020      	movs	r0, r4
 800f952:	f7f6 fc4d 	bl	80061f0 <__udivsi3>
 800f956:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800f958:	0018      	movs	r0, r3
 800f95a:	46bd      	mov	sp, r7
 800f95c:	b003      	add	sp, #12
 800f95e:	bd90      	pop	{r4, r7, pc}
 800f960:	00f42400 	.word	0x00f42400
 800f964:	007a1200 	.word	0x007a1200

0800f968 <LL_TIM_SetPrescaler>:
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	683a      	ldr	r2, [r7, #0]
 800f976:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f978:	46c0      	nop			; (mov r8, r8)
 800f97a:	46bd      	mov	sp, r7
 800f97c:	b002      	add	sp, #8
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <LL_TIM_SetAutoReload>:
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	683a      	ldr	r2, [r7, #0]
 800f98e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f990:	46c0      	nop			; (mov r8, r8)
 800f992:	46bd      	mov	sp, r7
 800f994:	b002      	add	sp, #8
 800f996:	bd80      	pop	{r7, pc}

0800f998 <LL_TIM_SetRepetitionCounter>:
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f9a8:	46c0      	nop			; (mov r8, r8)
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	b002      	add	sp, #8
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	695b      	ldr	r3, [r3, #20]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	431a      	orrs	r2, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	615a      	str	r2, [r3, #20]
}
 800f9c4:	46c0      	nop			; (mov r8, r8)
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	b002      	add	sp, #8
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a39      	ldr	r2, [pc, #228]	; (800fac4 <LL_TIM_Init+0xf8>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d00c      	beq.n	800f9fe <LL_TIM_Init+0x32>
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	2380      	movs	r3, #128	; 0x80
 800f9e8:	05db      	lsls	r3, r3, #23
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d007      	beq.n	800f9fe <LL_TIM_Init+0x32>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4a35      	ldr	r2, [pc, #212]	; (800fac8 <LL_TIM_Init+0xfc>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d003      	beq.n	800f9fe <LL_TIM_Init+0x32>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	4a34      	ldr	r2, [pc, #208]	; (800facc <LL_TIM_Init+0x100>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d107      	bne.n	800fa0e <LL_TIM_Init+0x42>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2270      	movs	r2, #112	; 0x70
 800fa02:	4393      	bics	r3, r2
 800fa04:	001a      	movs	r2, r3
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4a2c      	ldr	r2, [pc, #176]	; (800fac4 <LL_TIM_Init+0xf8>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d01c      	beq.n	800fa50 <LL_TIM_Init+0x84>
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	2380      	movs	r3, #128	; 0x80
 800fa1a:	05db      	lsls	r3, r3, #23
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d017      	beq.n	800fa50 <LL_TIM_Init+0x84>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	4a29      	ldr	r2, [pc, #164]	; (800fac8 <LL_TIM_Init+0xfc>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d013      	beq.n	800fa50 <LL_TIM_Init+0x84>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4a28      	ldr	r2, [pc, #160]	; (800facc <LL_TIM_Init+0x100>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d00f      	beq.n	800fa50 <LL_TIM_Init+0x84>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	4a27      	ldr	r2, [pc, #156]	; (800fad0 <LL_TIM_Init+0x104>)
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d00b      	beq.n	800fa50 <LL_TIM_Init+0x84>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4a26      	ldr	r2, [pc, #152]	; (800fad4 <LL_TIM_Init+0x108>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d007      	beq.n	800fa50 <LL_TIM_Init+0x84>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4a25      	ldr	r2, [pc, #148]	; (800fad8 <LL_TIM_Init+0x10c>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d003      	beq.n	800fa50 <LL_TIM_Init+0x84>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4a24      	ldr	r2, [pc, #144]	; (800fadc <LL_TIM_Init+0x110>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d106      	bne.n	800fa5e <LL_TIM_Init+0x92>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	4a23      	ldr	r2, [pc, #140]	; (800fae0 <LL_TIM_Init+0x114>)
 800fa54:	401a      	ands	r2, r3
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	689a      	ldr	r2, [r3, #8]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	0011      	movs	r1, r2
 800fa6c:	0018      	movs	r0, r3
 800fa6e:	f7ff ff87 	bl	800f980 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	881b      	ldrh	r3, [r3, #0]
 800fa76:	001a      	movs	r2, r3
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	0011      	movs	r1, r2
 800fa7c:	0018      	movs	r0, r3
 800fa7e:	f7ff ff73 	bl	800f968 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4a0f      	ldr	r2, [pc, #60]	; (800fac4 <LL_TIM_Init+0xf8>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d00b      	beq.n	800faa2 <LL_TIM_Init+0xd6>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4a11      	ldr	r2, [pc, #68]	; (800fad4 <LL_TIM_Init+0x108>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d007      	beq.n	800faa2 <LL_TIM_Init+0xd6>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4a10      	ldr	r2, [pc, #64]	; (800fad8 <LL_TIM_Init+0x10c>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d003      	beq.n	800faa2 <LL_TIM_Init+0xd6>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4a0f      	ldr	r2, [pc, #60]	; (800fadc <LL_TIM_Init+0x110>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d106      	bne.n	800fab0 <LL_TIM_Init+0xe4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	691a      	ldr	r2, [r3, #16]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	0011      	movs	r1, r2
 800faaa:	0018      	movs	r0, r3
 800faac:	f7ff ff74 	bl	800f998 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	0018      	movs	r0, r3
 800fab4:	f7ff ff7c 	bl	800f9b0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800fab8:	2300      	movs	r3, #0
}
 800faba:	0018      	movs	r0, r3
 800fabc:	46bd      	mov	sp, r7
 800fabe:	b004      	add	sp, #16
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	46c0      	nop			; (mov r8, r8)
 800fac4:	40012c00 	.word	0x40012c00
 800fac8:	40000400 	.word	0x40000400
 800facc:	40000800 	.word	0x40000800
 800fad0:	40002000 	.word	0x40002000
 800fad4:	40014000 	.word	0x40014000
 800fad8:	40014400 	.word	0x40014400
 800fadc:	40014800 	.word	0x40014800
 800fae0:	fffffcff 	.word	0xfffffcff

0800fae4 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	005b      	lsls	r3, r3, #1
 800faf2:	085a      	lsrs	r2, r3, #1
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	601a      	str	r2, [r3, #0]
}
 800faf8:	46c0      	nop			; (mov r8, r8)
 800fafa:	46bd      	mov	sp, r7
 800fafc:	b002      	add	sp, #8
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <LL_APB1_GRP1_EnableClock>:
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800fb08:	4b07      	ldr	r3, [pc, #28]	; (800fb28 <LL_APB1_GRP1_EnableClock+0x28>)
 800fb0a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fb0c:	4b06      	ldr	r3, [pc, #24]	; (800fb28 <LL_APB1_GRP1_EnableClock+0x28>)
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	430a      	orrs	r2, r1
 800fb12:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800fb14:	4b04      	ldr	r3, [pc, #16]	; (800fb28 <LL_APB1_GRP1_EnableClock+0x28>)
 800fb16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	4013      	ands	r3, r2
 800fb1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
}
 800fb20:	46c0      	nop			; (mov r8, r8)
 800fb22:	46bd      	mov	sp, r7
 800fb24:	b004      	add	sp, #16
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	40021000 	.word	0x40021000

0800fb2c <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4a16      	ldr	r2, [pc, #88]	; (800fb94 <LL_UCPD_Init+0x68>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d104      	bne.n	800fb48 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800fb3e:	2380      	movs	r3, #128	; 0x80
 800fb40:	049b      	lsls	r3, r3, #18
 800fb42:	0018      	movs	r0, r3
 800fb44:	f7ff ffdc 	bl	800fb00 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a13      	ldr	r2, [pc, #76]	; (800fb98 <LL_UCPD_Init+0x6c>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d104      	bne.n	800fb5a <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800fb50:	2380      	movs	r3, #128	; 0x80
 800fb52:	04db      	lsls	r3, r3, #19
 800fb54:	0018      	movs	r0, r3
 800fb56:	f7ff ffd3 	bl	800fb00 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	0018      	movs	r0, r3
 800fb5e:	f7ff ffc1 	bl	800fae4 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4a0d      	ldr	r2, [pc, #52]	; (800fb9c <LL_UCPD_Init+0x70>)
 800fb68:	401a      	ands	r2, r3
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	6819      	ldr	r1, [r3, #0]
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	02db      	lsls	r3, r3, #11
 800fb74:	4319      	orrs	r1, r3
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	689b      	ldr	r3, [r3, #8]
 800fb7a:	019b      	lsls	r3, r3, #6
 800fb7c:	4319      	orrs	r1, r3
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	430b      	orrs	r3, r1
 800fb84:	431a      	orrs	r2, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800fb8a:	2300      	movs	r3, #0
}
 800fb8c:	0018      	movs	r0, r3
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	b002      	add	sp, #8
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	4000a000 	.word	0x4000a000
 800fb98:	4000a400 	.word	0x4000a400
 800fb9c:	fff10000 	.word	0xfff10000

0800fba0 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2280      	movs	r2, #128	; 0x80
 800fbac:	0292      	lsls	r2, r2, #10
 800fbae:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2207      	movs	r2, #7
 800fbb4:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2210      	movs	r2, #16
 800fbba:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	220d      	movs	r2, #13
 800fbc0:	60da      	str	r2, [r3, #12]
}
 800fbc2:	46c0      	nop			; (mov r8, r8)
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	b002      	add	sp, #8
 800fbc8:	bd80      	pop	{r7, pc}
	...

0800fbcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fbda:	4b05      	ldr	r3, [pc, #20]	; (800fbf0 <USB_EnableGlobalInt+0x24>)
 800fbdc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	0018      	movs	r0, r3
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	b004      	add	sp, #16
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	46c0      	nop			; (mov r8, r8)
 800fbf0:	0000bf80 	.word	0x0000bf80

0800fbf4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fbfc:	4b06      	ldr	r3, [pc, #24]	; (800fc18 <USB_DisableGlobalInt+0x24>)
 800fbfe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	43d2      	mvns	r2, r2
 800fc08:	401a      	ands	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	0018      	movs	r0, r3
 800fc12:	46bd      	mov	sp, r7
 800fc14:	b004      	add	sp, #16
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	0000bf80 	.word	0x0000bf80

0800fc1c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	000a      	movs	r2, r1
 800fc26:	1cfb      	adds	r3, r7, #3
 800fc28:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800fc2a:	1cfb      	adds	r3, r7, #3
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d106      	bne.n	800fc40 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	085a      	lsrs	r2, r3, #1
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	641a      	str	r2, [r3, #64]	; 0x40
 800fc3e:	e00d      	b.n	800fc5c <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 800fc40:	1cfb      	adds	r3, r7, #3
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d107      	bne.n	800fc58 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc4c:	2280      	movs	r2, #128	; 0x80
 800fc4e:	0612      	lsls	r2, r2, #24
 800fc50:	431a      	orrs	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	641a      	str	r2, [r3, #64]	; 0x40
 800fc56:	e001      	b.n	800fc5c <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	e000      	b.n	800fc5e <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 800fc5c:	2300      	movs	r3, #0
}
 800fc5e:	0018      	movs	r0, r3
 800fc60:	46bd      	mov	sp, r7
 800fc62:	b002      	add	sp, #8
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800fc66:	b084      	sub	sp, #16
 800fc68:	b5b0      	push	{r4, r5, r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	2004      	movs	r0, #4
 800fc72:	2420      	movs	r4, #32
 800fc74:	1900      	adds	r0, r0, r4
 800fc76:	19c0      	adds	r0, r0, r7
 800fc78:	6001      	str	r1, [r0, #0]
 800fc7a:	6042      	str	r2, [r0, #4]
 800fc7c:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2201      	movs	r2, #1
 800fc82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc88:	2201      	movs	r2, #1
 800fc8a:	4393      	bics	r3, r2
 800fc8c:	001a      	movs	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800fc92:	250f      	movs	r5, #15
 800fc94:	197c      	adds	r4, r7, r5
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2100      	movs	r1, #0
 800fc9a:	0018      	movs	r0, r3
 800fc9c:	f7ff ffbe 	bl	800fc1c <USB_SetCurrentMode>
 800fca0:	0003      	movs	r3, r0
 800fca2:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2200      	movs	r2, #0
 800fca8:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800fcaa:	197b      	adds	r3, r7, r5
 800fcac:	781b      	ldrb	r3, [r3, #0]
}
 800fcae:	0018      	movs	r0, r3
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	b004      	add	sp, #16
 800fcb4:	bcb0      	pop	{r4, r5, r7}
 800fcb6:	bc08      	pop	{r3}
 800fcb8:	b004      	add	sp, #16
 800fcba:	4718      	bx	r3

0800fcbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b09e      	sub	sp, #120	; 0x78
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fcc6:	2377      	movs	r3, #119	; 0x77
 800fcc8:	18fb      	adds	r3, r7, r3
 800fcca:	2200      	movs	r2, #0
 800fccc:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	18d3      	adds	r3, r2, r3
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	4adc      	ldr	r2, [pc, #880]	; (801004c <USB_ActivateEndpoint+0x390>)
 800fcdc:	4013      	ands	r3, r2
 800fcde:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	78db      	ldrb	r3, [r3, #3]
 800fce4:	2b03      	cmp	r3, #3
 800fce6:	d00e      	beq.n	800fd06 <USB_ActivateEndpoint+0x4a>
 800fce8:	dc19      	bgt.n	800fd1e <USB_ActivateEndpoint+0x62>
 800fcea:	2b02      	cmp	r3, #2
 800fcec:	d01c      	beq.n	800fd28 <USB_ActivateEndpoint+0x6c>
 800fcee:	dc16      	bgt.n	800fd1e <USB_ActivateEndpoint+0x62>
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d002      	beq.n	800fcfa <USB_ActivateEndpoint+0x3e>
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d00c      	beq.n	800fd12 <USB_ActivateEndpoint+0x56>
 800fcf8:	e011      	b.n	800fd1e <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800fcfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fcfc:	2280      	movs	r2, #128	; 0x80
 800fcfe:	0092      	lsls	r2, r2, #2
 800fd00:	4313      	orrs	r3, r2
 800fd02:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 800fd04:	e011      	b.n	800fd2a <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800fd06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd08:	22c0      	movs	r2, #192	; 0xc0
 800fd0a:	00d2      	lsls	r2, r2, #3
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 800fd10:	e00b      	b.n	800fd2a <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800fd12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd14:	2280      	movs	r2, #128	; 0x80
 800fd16:	00d2      	lsls	r2, r2, #3
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 800fd1c:	e005      	b.n	800fd2a <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800fd1e:	2377      	movs	r3, #119	; 0x77
 800fd20:	18fb      	adds	r3, r7, r3
 800fd22:	2201      	movs	r2, #1
 800fd24:	701a      	strb	r2, [r3, #0]
      break;
 800fd26:	e000      	b.n	800fd2a <USB_ActivateEndpoint+0x6e>
      break;
 800fd28:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	18d3      	adds	r3, r2, r3
 800fd34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fd36:	49c6      	ldr	r1, [pc, #792]	; (8010050 <USB_ActivateEndpoint+0x394>)
 800fd38:	430a      	orrs	r2, r1
 800fd3a:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	009b      	lsls	r3, r3, #2
 800fd44:	18d3      	adds	r3, r2, r3
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4ac2      	ldr	r2, [pc, #776]	; (8010054 <USB_ActivateEndpoint+0x398>)
 800fd4a:	4013      	ands	r3, r2
 800fd4c:	683a      	ldr	r2, [r7, #0]
 800fd4e:	7812      	ldrb	r2, [r2, #0]
 800fd50:	4313      	orrs	r3, r2
 800fd52:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	18d3      	adds	r3, r2, r3
 800fd5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd60:	49bb      	ldr	r1, [pc, #748]	; (8010050 <USB_ActivateEndpoint+0x394>)
 800fd62:	430a      	orrs	r2, r1
 800fd64:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	7b1b      	ldrb	r3, [r3, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d000      	beq.n	800fd70 <USB_ActivateEndpoint+0xb4>
 800fd6e:	e155      	b.n	801001c <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	785b      	ldrb	r3, [r3, #1]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d06e      	beq.n	800fe56 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	00db      	lsls	r3, r3, #3
 800fd7e:	4ab6      	ldr	r2, [pc, #728]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fd80:	4694      	mov	ip, r2
 800fd82:	4463      	add	r3, ip
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	00db      	lsls	r3, r3, #3
 800fd8c:	49b2      	ldr	r1, [pc, #712]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fd8e:	468c      	mov	ip, r1
 800fd90:	4463      	add	r3, ip
 800fd92:	0c12      	lsrs	r2, r2, #16
 800fd94:	0412      	lsls	r2, r2, #16
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	00db      	lsls	r3, r3, #3
 800fd9e:	4aae      	ldr	r2, [pc, #696]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fda0:	4694      	mov	ip, r2
 800fda2:	4463      	add	r3, ip
 800fda4:	6819      	ldr	r1, [r3, #0]
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	88db      	ldrh	r3, [r3, #6]
 800fdaa:	089b      	lsrs	r3, r3, #2
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	009a      	lsls	r2, r3, #2
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	00db      	lsls	r3, r3, #3
 800fdb6:	48a8      	ldr	r0, [pc, #672]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fdb8:	4684      	mov	ip, r0
 800fdba:	4463      	add	r3, ip
 800fdbc:	430a      	orrs	r2, r1
 800fdbe:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	18d3      	adds	r3, r2, r3
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	61bb      	str	r3, [r7, #24]
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	2240      	movs	r2, #64	; 0x40
 800fdd2:	4013      	ands	r3, r2
 800fdd4:	d011      	beq.n	800fdfa <USB_ActivateEndpoint+0x13e>
 800fdd6:	687a      	ldr	r2, [r7, #4]
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	009b      	lsls	r3, r3, #2
 800fdde:	18d3      	adds	r3, r2, r3
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a9c      	ldr	r2, [pc, #624]	; (8010054 <USB_ActivateEndpoint+0x398>)
 800fde4:	4013      	ands	r3, r2
 800fde6:	617b      	str	r3, [r7, #20]
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	18d3      	adds	r3, r2, r3
 800fdf2:	697a      	ldr	r2, [r7, #20]
 800fdf4:	4999      	ldr	r1, [pc, #612]	; (801005c <USB_ActivateEndpoint+0x3a0>)
 800fdf6:	430a      	orrs	r2, r1
 800fdf8:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	78db      	ldrb	r3, [r3, #3]
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d016      	beq.n	800fe30 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	18d3      	adds	r3, r2, r3
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a94      	ldr	r2, [pc, #592]	; (8010060 <USB_ActivateEndpoint+0x3a4>)
 800fe10:	4013      	ands	r3, r2
 800fe12:	60fb      	str	r3, [r7, #12]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2220      	movs	r2, #32
 800fe18:	4053      	eors	r3, r2
 800fe1a:	60fb      	str	r3, [r7, #12]
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	18d3      	adds	r3, r2, r3
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	4989      	ldr	r1, [pc, #548]	; (8010050 <USB_ActivateEndpoint+0x394>)
 800fe2a:	430a      	orrs	r2, r1
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	e261      	b.n	80102f4 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	18d3      	adds	r3, r2, r3
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a88      	ldr	r2, [pc, #544]	; (8010060 <USB_ActivateEndpoint+0x3a4>)
 800fe3e:	4013      	ands	r3, r2
 800fe40:	613b      	str	r3, [r7, #16]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	18d3      	adds	r3, r2, r3
 800fe4c:	693a      	ldr	r2, [r7, #16]
 800fe4e:	4980      	ldr	r1, [pc, #512]	; (8010050 <USB_ActivateEndpoint+0x394>)
 800fe50:	430a      	orrs	r2, r1
 800fe52:	601a      	str	r2, [r3, #0]
 800fe54:	e24e      	b.n	80102f4 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	00db      	lsls	r3, r3, #3
 800fe5c:	4a7e      	ldr	r2, [pc, #504]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fe5e:	4694      	mov	ip, r2
 800fe60:	4463      	add	r3, ip
 800fe62:	685a      	ldr	r2, [r3, #4]
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	00db      	lsls	r3, r3, #3
 800fe6a:	497b      	ldr	r1, [pc, #492]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fe6c:	468c      	mov	ip, r1
 800fe6e:	4463      	add	r3, ip
 800fe70:	0c12      	lsrs	r2, r2, #16
 800fe72:	0412      	lsls	r2, r2, #16
 800fe74:	605a      	str	r2, [r3, #4]
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	00db      	lsls	r3, r3, #3
 800fe7c:	4a76      	ldr	r2, [pc, #472]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fe7e:	4694      	mov	ip, r2
 800fe80:	4463      	add	r3, ip
 800fe82:	6859      	ldr	r1, [r3, #4]
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	88db      	ldrh	r3, [r3, #6]
 800fe88:	089b      	lsrs	r3, r3, #2
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	009a      	lsls	r2, r3, #2
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	00db      	lsls	r3, r3, #3
 800fe94:	4870      	ldr	r0, [pc, #448]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fe96:	4684      	mov	ip, r0
 800fe98:	4463      	add	r3, ip
 800fe9a:	430a      	orrs	r2, r1
 800fe9c:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	00db      	lsls	r3, r3, #3
 800fea4:	4a6c      	ldr	r2, [pc, #432]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fea6:	4694      	mov	ip, r2
 800fea8:	4463      	add	r3, ip
 800feaa:	685a      	ldr	r2, [r3, #4]
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	00db      	lsls	r3, r3, #3
 800feb2:	4969      	ldr	r1, [pc, #420]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800feb4:	468c      	mov	ip, r1
 800feb6:	4463      	add	r3, ip
 800feb8:	0192      	lsls	r2, r2, #6
 800feba:	0992      	lsrs	r2, r2, #6
 800febc:	605a      	str	r2, [r3, #4]
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	691b      	ldr	r3, [r3, #16]
 800fec2:	2b3e      	cmp	r3, #62	; 0x3e
 800fec4:	d920      	bls.n	800ff08 <USB_ActivateEndpoint+0x24c>
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	095b      	lsrs	r3, r3, #5
 800fecc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	691b      	ldr	r3, [r3, #16]
 800fed2:	221f      	movs	r2, #31
 800fed4:	4013      	ands	r3, r2
 800fed6:	d102      	bne.n	800fede <USB_ActivateEndpoint+0x222>
 800fed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feda:	3b01      	subs	r3, #1
 800fedc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	00db      	lsls	r3, r3, #3
 800fee4:	4a5c      	ldr	r2, [pc, #368]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fee6:	4694      	mov	ip, r2
 800fee8:	4463      	add	r3, ip
 800feea:	685a      	ldr	r2, [r3, #4]
 800feec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feee:	069b      	lsls	r3, r3, #26
 800fef0:	431a      	orrs	r2, r3
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	00db      	lsls	r3, r3, #3
 800fef8:	4957      	ldr	r1, [pc, #348]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800fefa:	468c      	mov	ip, r1
 800fefc:	4463      	add	r3, ip
 800fefe:	2180      	movs	r1, #128	; 0x80
 800ff00:	0609      	lsls	r1, r1, #24
 800ff02:	430a      	orrs	r2, r1
 800ff04:	605a      	str	r2, [r3, #4]
 800ff06:	e032      	b.n	800ff6e <USB_ActivateEndpoint+0x2b2>
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	691b      	ldr	r3, [r3, #16]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d111      	bne.n	800ff34 <USB_ActivateEndpoint+0x278>
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	00db      	lsls	r3, r3, #3
 800ff16:	4a50      	ldr	r2, [pc, #320]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800ff18:	4694      	mov	ip, r2
 800ff1a:	4463      	add	r3, ip
 800ff1c:	685a      	ldr	r2, [r3, #4]
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	00db      	lsls	r3, r3, #3
 800ff24:	494c      	ldr	r1, [pc, #304]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800ff26:	468c      	mov	ip, r1
 800ff28:	4463      	add	r3, ip
 800ff2a:	2180      	movs	r1, #128	; 0x80
 800ff2c:	0609      	lsls	r1, r1, #24
 800ff2e:	430a      	orrs	r2, r1
 800ff30:	605a      	str	r2, [r3, #4]
 800ff32:	e01c      	b.n	800ff6e <USB_ActivateEndpoint+0x2b2>
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	691b      	ldr	r3, [r3, #16]
 800ff38:	085b      	lsrs	r3, r3, #1
 800ff3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	691b      	ldr	r3, [r3, #16]
 800ff40:	2201      	movs	r2, #1
 800ff42:	4013      	ands	r3, r2
 800ff44:	d002      	beq.n	800ff4c <USB_ActivateEndpoint+0x290>
 800ff46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff48:	3301      	adds	r3, #1
 800ff4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	00db      	lsls	r3, r3, #3
 800ff52:	4a41      	ldr	r2, [pc, #260]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800ff54:	4694      	mov	ip, r2
 800ff56:	4463      	add	r3, ip
 800ff58:	6859      	ldr	r1, [r3, #4]
 800ff5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff5c:	069a      	lsls	r2, r3, #26
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	483c      	ldr	r0, [pc, #240]	; (8010058 <USB_ActivateEndpoint+0x39c>)
 800ff66:	4684      	mov	ip, r0
 800ff68:	4463      	add	r3, ip
 800ff6a:	430a      	orrs	r2, r1
 800ff6c:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	009b      	lsls	r3, r3, #2
 800ff76:	18d3      	adds	r3, r2, r3
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff7e:	2380      	movs	r3, #128	; 0x80
 800ff80:	01db      	lsls	r3, r3, #7
 800ff82:	4013      	ands	r3, r2
 800ff84:	d011      	beq.n	800ffaa <USB_ActivateEndpoint+0x2ee>
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	18d3      	adds	r3, r2, r3
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a30      	ldr	r2, [pc, #192]	; (8010054 <USB_ActivateEndpoint+0x398>)
 800ff94:	4013      	ands	r3, r2
 800ff96:	627b      	str	r3, [r7, #36]	; 0x24
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	18d3      	adds	r3, r2, r3
 800ffa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffa4:	492f      	ldr	r1, [pc, #188]	; (8010064 <USB_ActivateEndpoint+0x3a8>)
 800ffa6:	430a      	orrs	r2, r1
 800ffa8:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d11c      	bne.n	800ffec <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	18d3      	adds	r3, r2, r3
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4a2a      	ldr	r2, [pc, #168]	; (8010068 <USB_ActivateEndpoint+0x3ac>)
 800ffc0:	4013      	ands	r3, r2
 800ffc2:	61fb      	str	r3, [r7, #28]
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	2280      	movs	r2, #128	; 0x80
 800ffc8:	0152      	lsls	r2, r2, #5
 800ffca:	4053      	eors	r3, r2
 800ffcc:	61fb      	str	r3, [r7, #28]
 800ffce:	69fb      	ldr	r3, [r7, #28]
 800ffd0:	2280      	movs	r2, #128	; 0x80
 800ffd2:	0192      	lsls	r2, r2, #6
 800ffd4:	4053      	eors	r3, r2
 800ffd6:	61fb      	str	r3, [r7, #28]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	18d3      	adds	r3, r2, r3
 800ffe2:	69fa      	ldr	r2, [r7, #28]
 800ffe4:	491a      	ldr	r1, [pc, #104]	; (8010050 <USB_ActivateEndpoint+0x394>)
 800ffe6:	430a      	orrs	r2, r1
 800ffe8:	601a      	str	r2, [r3, #0]
 800ffea:	e183      	b.n	80102f4 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	009b      	lsls	r3, r3, #2
 800fff4:	18d3      	adds	r3, r2, r3
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a1b      	ldr	r2, [pc, #108]	; (8010068 <USB_ActivateEndpoint+0x3ac>)
 800fffa:	4013      	ands	r3, r2
 800fffc:	623b      	str	r3, [r7, #32]
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	2280      	movs	r2, #128	; 0x80
 8010002:	0192      	lsls	r2, r2, #6
 8010004:	4053      	eors	r3, r2
 8010006:	623b      	str	r3, [r7, #32]
 8010008:	687a      	ldr	r2, [r7, #4]
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	18d3      	adds	r3, r2, r3
 8010012:	6a3a      	ldr	r2, [r7, #32]
 8010014:	490e      	ldr	r1, [pc, #56]	; (8010050 <USB_ActivateEndpoint+0x394>)
 8010016:	430a      	orrs	r2, r1
 8010018:	601a      	str	r2, [r3, #0]
 801001a:	e16b      	b.n	80102f4 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	78db      	ldrb	r3, [r3, #3]
 8010020:	2b02      	cmp	r3, #2
 8010022:	d125      	bne.n	8010070 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	18d3      	adds	r3, r2, r3
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4a08      	ldr	r2, [pc, #32]	; (8010054 <USB_ActivateEndpoint+0x398>)
 8010032:	4013      	ands	r3, r2
 8010034:	663b      	str	r3, [r7, #96]	; 0x60
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	18d3      	adds	r3, r2, r3
 8010040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010042:	490a      	ldr	r1, [pc, #40]	; (801006c <USB_ActivateEndpoint+0x3b0>)
 8010044:	430a      	orrs	r2, r1
 8010046:	601a      	str	r2, [r3, #0]
 8010048:	e024      	b.n	8010094 <USB_ActivateEndpoint+0x3d8>
 801004a:	46c0      	nop			; (mov r8, r8)
 801004c:	07ff898f 	.word	0x07ff898f
 8010050:	00008080 	.word	0x00008080
 8010054:	07ff8f8f 	.word	0x07ff8f8f
 8010058:	40009800 	.word	0x40009800
 801005c:	000080c0 	.word	0x000080c0
 8010060:	07ff8fbf 	.word	0x07ff8fbf
 8010064:	0000c080 	.word	0x0000c080
 8010068:	07ffbf8f 	.word	0x07ffbf8f
 801006c:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	009b      	lsls	r3, r3, #2
 8010078:	18d3      	adds	r3, r2, r3
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4aa1      	ldr	r2, [pc, #644]	; (8010304 <USB_ActivateEndpoint+0x648>)
 801007e:	4013      	ands	r3, r2
 8010080:	667b      	str	r3, [r7, #100]	; 0x64
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	009b      	lsls	r3, r3, #2
 801008a:	18d3      	adds	r3, r2, r3
 801008c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801008e:	499e      	ldr	r1, [pc, #632]	; (8010308 <USB_ActivateEndpoint+0x64c>)
 8010090:	430a      	orrs	r2, r1
 8010092:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	00db      	lsls	r3, r3, #3
 801009a:	4a9c      	ldr	r2, [pc, #624]	; (801030c <USB_ActivateEndpoint+0x650>)
 801009c:	4694      	mov	ip, r2
 801009e:	4463      	add	r3, ip
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	00db      	lsls	r3, r3, #3
 80100a8:	4998      	ldr	r1, [pc, #608]	; (801030c <USB_ActivateEndpoint+0x650>)
 80100aa:	468c      	mov	ip, r1
 80100ac:	4463      	add	r3, ip
 80100ae:	0c12      	lsrs	r2, r2, #16
 80100b0:	0412      	lsls	r2, r2, #16
 80100b2:	601a      	str	r2, [r3, #0]
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	00db      	lsls	r3, r3, #3
 80100ba:	4a94      	ldr	r2, [pc, #592]	; (801030c <USB_ActivateEndpoint+0x650>)
 80100bc:	4694      	mov	ip, r2
 80100be:	4463      	add	r3, ip
 80100c0:	6819      	ldr	r1, [r3, #0]
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	891b      	ldrh	r3, [r3, #8]
 80100c6:	089b      	lsrs	r3, r3, #2
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	009a      	lsls	r2, r3, #2
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	00db      	lsls	r3, r3, #3
 80100d2:	488e      	ldr	r0, [pc, #568]	; (801030c <USB_ActivateEndpoint+0x650>)
 80100d4:	4684      	mov	ip, r0
 80100d6:	4463      	add	r3, ip
 80100d8:	430a      	orrs	r2, r1
 80100da:	601a      	str	r2, [r3, #0]
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	00db      	lsls	r3, r3, #3
 80100e2:	4a8a      	ldr	r2, [pc, #552]	; (801030c <USB_ActivateEndpoint+0x650>)
 80100e4:	4694      	mov	ip, r2
 80100e6:	4463      	add	r3, ip
 80100e8:	685a      	ldr	r2, [r3, #4]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	00db      	lsls	r3, r3, #3
 80100f0:	4986      	ldr	r1, [pc, #536]	; (801030c <USB_ActivateEndpoint+0x650>)
 80100f2:	468c      	mov	ip, r1
 80100f4:	4463      	add	r3, ip
 80100f6:	0c12      	lsrs	r2, r2, #16
 80100f8:	0412      	lsls	r2, r2, #16
 80100fa:	605a      	str	r2, [r3, #4]
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	00db      	lsls	r3, r3, #3
 8010102:	4a82      	ldr	r2, [pc, #520]	; (801030c <USB_ActivateEndpoint+0x650>)
 8010104:	4694      	mov	ip, r2
 8010106:	4463      	add	r3, ip
 8010108:	6859      	ldr	r1, [r3, #4]
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	895b      	ldrh	r3, [r3, #10]
 801010e:	089b      	lsrs	r3, r3, #2
 8010110:	b29b      	uxth	r3, r3
 8010112:	009a      	lsls	r2, r3, #2
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	00db      	lsls	r3, r3, #3
 801011a:	487c      	ldr	r0, [pc, #496]	; (801030c <USB_ActivateEndpoint+0x650>)
 801011c:	4684      	mov	ip, r0
 801011e:	4463      	add	r3, ip
 8010120:	430a      	orrs	r2, r1
 8010122:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	785b      	ldrb	r3, [r3, #1]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d169      	bne.n	8010200 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	18d3      	adds	r3, r2, r3
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	643b      	str	r3, [r7, #64]	; 0x40
 801013a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801013c:	2380      	movs	r3, #128	; 0x80
 801013e:	01db      	lsls	r3, r3, #7
 8010140:	4013      	ands	r3, r2
 8010142:	d011      	beq.n	8010168 <USB_ActivateEndpoint+0x4ac>
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	18d3      	adds	r3, r2, r3
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4a6f      	ldr	r2, [pc, #444]	; (8010310 <USB_ActivateEndpoint+0x654>)
 8010152:	4013      	ands	r3, r2
 8010154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	18d3      	adds	r3, r2, r3
 8010160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010162:	496c      	ldr	r1, [pc, #432]	; (8010314 <USB_ActivateEndpoint+0x658>)
 8010164:	430a      	orrs	r2, r1
 8010166:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	18d3      	adds	r3, r2, r3
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	63bb      	str	r3, [r7, #56]	; 0x38
 8010176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010178:	2240      	movs	r2, #64	; 0x40
 801017a:	4013      	ands	r3, r2
 801017c:	d011      	beq.n	80101a2 <USB_ActivateEndpoint+0x4e6>
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	18d3      	adds	r3, r2, r3
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a61      	ldr	r2, [pc, #388]	; (8010310 <USB_ActivateEndpoint+0x654>)
 801018c:	4013      	ands	r3, r2
 801018e:	637b      	str	r3, [r7, #52]	; 0x34
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	009b      	lsls	r3, r3, #2
 8010198:	18d3      	adds	r3, r2, r3
 801019a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801019c:	495e      	ldr	r1, [pc, #376]	; (8010318 <USB_ActivateEndpoint+0x65c>)
 801019e:	430a      	orrs	r2, r1
 80101a0:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	18d3      	adds	r3, r2, r3
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4a5b      	ldr	r2, [pc, #364]	; (801031c <USB_ActivateEndpoint+0x660>)
 80101b0:	4013      	ands	r3, r2
 80101b2:	633b      	str	r3, [r7, #48]	; 0x30
 80101b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b6:	2280      	movs	r2, #128	; 0x80
 80101b8:	0152      	lsls	r2, r2, #5
 80101ba:	4053      	eors	r3, r2
 80101bc:	633b      	str	r3, [r7, #48]	; 0x30
 80101be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c0:	2280      	movs	r2, #128	; 0x80
 80101c2:	0192      	lsls	r2, r2, #6
 80101c4:	4053      	eors	r3, r2
 80101c6:	633b      	str	r3, [r7, #48]	; 0x30
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	18d3      	adds	r3, r2, r3
 80101d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101d4:	494c      	ldr	r1, [pc, #304]	; (8010308 <USB_ActivateEndpoint+0x64c>)
 80101d6:	430a      	orrs	r2, r1
 80101d8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	18d3      	adds	r3, r2, r3
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	4a4e      	ldr	r2, [pc, #312]	; (8010320 <USB_ActivateEndpoint+0x664>)
 80101e8:	4013      	ands	r3, r2
 80101ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	18d3      	adds	r3, r2, r3
 80101f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101f8:	4943      	ldr	r1, [pc, #268]	; (8010308 <USB_ActivateEndpoint+0x64c>)
 80101fa:	430a      	orrs	r2, r1
 80101fc:	601a      	str	r2, [r3, #0]
 80101fe:	e079      	b.n	80102f4 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	18d3      	adds	r3, r2, r3
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801020e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010210:	2380      	movs	r3, #128	; 0x80
 8010212:	01db      	lsls	r3, r3, #7
 8010214:	4013      	ands	r3, r2
 8010216:	d011      	beq.n	801023c <USB_ActivateEndpoint+0x580>
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	18d3      	adds	r3, r2, r3
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4a3a      	ldr	r2, [pc, #232]	; (8010310 <USB_ActivateEndpoint+0x654>)
 8010226:	4013      	ands	r3, r2
 8010228:	65bb      	str	r3, [r7, #88]	; 0x58
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	009b      	lsls	r3, r3, #2
 8010232:	18d3      	adds	r3, r2, r3
 8010234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010236:	4937      	ldr	r1, [pc, #220]	; (8010314 <USB_ActivateEndpoint+0x658>)
 8010238:	430a      	orrs	r2, r1
 801023a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	18d3      	adds	r3, r2, r3
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	657b      	str	r3, [r7, #84]	; 0x54
 801024a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801024c:	2240      	movs	r2, #64	; 0x40
 801024e:	4013      	ands	r3, r2
 8010250:	d011      	beq.n	8010276 <USB_ActivateEndpoint+0x5ba>
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	18d3      	adds	r3, r2, r3
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4a2c      	ldr	r2, [pc, #176]	; (8010310 <USB_ActivateEndpoint+0x654>)
 8010260:	4013      	ands	r3, r2
 8010262:	653b      	str	r3, [r7, #80]	; 0x50
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	18d3      	adds	r3, r2, r3
 801026e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010270:	4929      	ldr	r1, [pc, #164]	; (8010318 <USB_ActivateEndpoint+0x65c>)
 8010272:	430a      	orrs	r2, r1
 8010274:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	78db      	ldrb	r3, [r3, #3]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d016      	beq.n	80102ac <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	18d3      	adds	r3, r2, r3
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a25      	ldr	r2, [pc, #148]	; (8010320 <USB_ActivateEndpoint+0x664>)
 801028c:	4013      	ands	r3, r2
 801028e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010292:	2220      	movs	r2, #32
 8010294:	4053      	eors	r3, r2
 8010296:	64bb      	str	r3, [r7, #72]	; 0x48
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	18d3      	adds	r3, r2, r3
 80102a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102a4:	4918      	ldr	r1, [pc, #96]	; (8010308 <USB_ActivateEndpoint+0x64c>)
 80102a6:	430a      	orrs	r2, r1
 80102a8:	601a      	str	r2, [r3, #0]
 80102aa:	e011      	b.n	80102d0 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	18d3      	adds	r3, r2, r3
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4a19      	ldr	r2, [pc, #100]	; (8010320 <USB_ActivateEndpoint+0x664>)
 80102ba:	4013      	ands	r3, r2
 80102bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	18d3      	adds	r3, r2, r3
 80102c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80102ca:	490f      	ldr	r1, [pc, #60]	; (8010308 <USB_ActivateEndpoint+0x64c>)
 80102cc:	430a      	orrs	r2, r1
 80102ce:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	18d3      	adds	r3, r2, r3
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a0f      	ldr	r2, [pc, #60]	; (801031c <USB_ActivateEndpoint+0x660>)
 80102de:	4013      	ands	r3, r2
 80102e0:	647b      	str	r3, [r7, #68]	; 0x44
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	009b      	lsls	r3, r3, #2
 80102ea:	18d3      	adds	r3, r2, r3
 80102ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102ee:	4906      	ldr	r1, [pc, #24]	; (8010308 <USB_ActivateEndpoint+0x64c>)
 80102f0:	430a      	orrs	r2, r1
 80102f2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80102f4:	2377      	movs	r3, #119	; 0x77
 80102f6:	18fb      	adds	r3, r7, r3
 80102f8:	781b      	ldrb	r3, [r3, #0]
}
 80102fa:	0018      	movs	r0, r3
 80102fc:	46bd      	mov	sp, r7
 80102fe:	b01e      	add	sp, #120	; 0x78
 8010300:	bd80      	pop	{r7, pc}
 8010302:	46c0      	nop			; (mov r8, r8)
 8010304:	07ff8e8f 	.word	0x07ff8e8f
 8010308:	00008080 	.word	0x00008080
 801030c:	40009800 	.word	0x40009800
 8010310:	07ff8f8f 	.word	0x07ff8f8f
 8010314:	0000c080 	.word	0x0000c080
 8010318:	000080c0 	.word	0x000080c0
 801031c:	07ffbf8f 	.word	0x07ffbf8f
 8010320:	07ff8fbf 	.word	0x07ff8fbf

08010324 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b096      	sub	sp, #88	; 0x58
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	7b1b      	ldrb	r3, [r3, #12]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d164      	bne.n	8010400 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	785b      	ldrb	r3, [r3, #1]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d02f      	beq.n	801039e <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	009b      	lsls	r3, r3, #2
 8010346:	18d3      	adds	r3, r2, r3
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	613b      	str	r3, [r7, #16]
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	2240      	movs	r2, #64	; 0x40
 8010350:	4013      	ands	r3, r2
 8010352:	d011      	beq.n	8010378 <USB_DeactivateEndpoint+0x54>
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	18d3      	adds	r3, r2, r3
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	4a9d      	ldr	r2, [pc, #628]	; (80105d8 <USB_DeactivateEndpoint+0x2b4>)
 8010362:	4013      	ands	r3, r2
 8010364:	60fb      	str	r3, [r7, #12]
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	18d3      	adds	r3, r2, r3
 8010370:	68fa      	ldr	r2, [r7, #12]
 8010372:	499a      	ldr	r1, [pc, #616]	; (80105dc <USB_DeactivateEndpoint+0x2b8>)
 8010374:	430a      	orrs	r2, r1
 8010376:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	009b      	lsls	r3, r3, #2
 8010380:	18d3      	adds	r3, r2, r3
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4a96      	ldr	r2, [pc, #600]	; (80105e0 <USB_DeactivateEndpoint+0x2bc>)
 8010386:	4013      	ands	r3, r2
 8010388:	60bb      	str	r3, [r7, #8]
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	18d3      	adds	r3, r2, r3
 8010394:	68ba      	ldr	r2, [r7, #8]
 8010396:	4993      	ldr	r1, [pc, #588]	; (80105e4 <USB_DeactivateEndpoint+0x2c0>)
 8010398:	430a      	orrs	r2, r1
 801039a:	601a      	str	r2, [r3, #0]
 801039c:	e117      	b.n	80105ce <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	18d3      	adds	r3, r2, r3
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	61fb      	str	r3, [r7, #28]
 80103ac:	69fa      	ldr	r2, [r7, #28]
 80103ae:	2380      	movs	r3, #128	; 0x80
 80103b0:	01db      	lsls	r3, r3, #7
 80103b2:	4013      	ands	r3, r2
 80103b4:	d011      	beq.n	80103da <USB_DeactivateEndpoint+0xb6>
 80103b6:	687a      	ldr	r2, [r7, #4]
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	18d3      	adds	r3, r2, r3
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	4a85      	ldr	r2, [pc, #532]	; (80105d8 <USB_DeactivateEndpoint+0x2b4>)
 80103c4:	4013      	ands	r3, r2
 80103c6:	61bb      	str	r3, [r7, #24]
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	18d3      	adds	r3, r2, r3
 80103d2:	69ba      	ldr	r2, [r7, #24]
 80103d4:	4984      	ldr	r1, [pc, #528]	; (80105e8 <USB_DeactivateEndpoint+0x2c4>)
 80103d6:	430a      	orrs	r2, r1
 80103d8:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80103da:	687a      	ldr	r2, [r7, #4]
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	18d3      	adds	r3, r2, r3
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4a81      	ldr	r2, [pc, #516]	; (80105ec <USB_DeactivateEndpoint+0x2c8>)
 80103e8:	4013      	ands	r3, r2
 80103ea:	617b      	str	r3, [r7, #20]
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	18d3      	adds	r3, r2, r3
 80103f6:	697a      	ldr	r2, [r7, #20]
 80103f8:	497a      	ldr	r1, [pc, #488]	; (80105e4 <USB_DeactivateEndpoint+0x2c0>)
 80103fa:	430a      	orrs	r2, r1
 80103fc:	601a      	str	r2, [r3, #0]
 80103fe:	e0e6      	b.n	80105ce <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	785b      	ldrb	r3, [r3, #1]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d171      	bne.n	80104ec <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	18d3      	adds	r3, r2, r3
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	63bb      	str	r3, [r7, #56]	; 0x38
 8010416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010418:	2380      	movs	r3, #128	; 0x80
 801041a:	01db      	lsls	r3, r3, #7
 801041c:	4013      	ands	r3, r2
 801041e:	d011      	beq.n	8010444 <USB_DeactivateEndpoint+0x120>
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	009b      	lsls	r3, r3, #2
 8010428:	18d3      	adds	r3, r2, r3
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4a6a      	ldr	r2, [pc, #424]	; (80105d8 <USB_DeactivateEndpoint+0x2b4>)
 801042e:	4013      	ands	r3, r2
 8010430:	637b      	str	r3, [r7, #52]	; 0x34
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	18d3      	adds	r3, r2, r3
 801043c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801043e:	496a      	ldr	r1, [pc, #424]	; (80105e8 <USB_DeactivateEndpoint+0x2c4>)
 8010440:	430a      	orrs	r2, r1
 8010442:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	18d3      	adds	r3, r2, r3
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	633b      	str	r3, [r7, #48]	; 0x30
 8010452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010454:	2240      	movs	r2, #64	; 0x40
 8010456:	4013      	ands	r3, r2
 8010458:	d011      	beq.n	801047e <USB_DeactivateEndpoint+0x15a>
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	18d3      	adds	r3, r2, r3
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4a5c      	ldr	r2, [pc, #368]	; (80105d8 <USB_DeactivateEndpoint+0x2b4>)
 8010468:	4013      	ands	r3, r2
 801046a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	009b      	lsls	r3, r3, #2
 8010474:	18d3      	adds	r3, r2, r3
 8010476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010478:	4958      	ldr	r1, [pc, #352]	; (80105dc <USB_DeactivateEndpoint+0x2b8>)
 801047a:	430a      	orrs	r2, r1
 801047c:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	18d3      	adds	r3, r2, r3
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4a53      	ldr	r2, [pc, #332]	; (80105d8 <USB_DeactivateEndpoint+0x2b4>)
 801048c:	4013      	ands	r3, r2
 801048e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	18d3      	adds	r3, r2, r3
 801049a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801049c:	494f      	ldr	r1, [pc, #316]	; (80105dc <USB_DeactivateEndpoint+0x2b8>)
 801049e:	430a      	orrs	r2, r1
 80104a0:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	009b      	lsls	r3, r3, #2
 80104aa:	18d3      	adds	r3, r2, r3
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4a4f      	ldr	r2, [pc, #316]	; (80105ec <USB_DeactivateEndpoint+0x2c8>)
 80104b0:	4013      	ands	r3, r2
 80104b2:	627b      	str	r3, [r7, #36]	; 0x24
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	18d3      	adds	r3, r2, r3
 80104be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104c0:	4948      	ldr	r1, [pc, #288]	; (80105e4 <USB_DeactivateEndpoint+0x2c0>)
 80104c2:	430a      	orrs	r2, r1
 80104c4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80104c6:	687a      	ldr	r2, [r7, #4]
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	18d3      	adds	r3, r2, r3
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	4a43      	ldr	r2, [pc, #268]	; (80105e0 <USB_DeactivateEndpoint+0x2bc>)
 80104d4:	4013      	ands	r3, r2
 80104d6:	623b      	str	r3, [r7, #32]
 80104d8:	687a      	ldr	r2, [r7, #4]
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	009b      	lsls	r3, r3, #2
 80104e0:	18d3      	adds	r3, r2, r3
 80104e2:	6a3a      	ldr	r2, [r7, #32]
 80104e4:	493f      	ldr	r1, [pc, #252]	; (80105e4 <USB_DeactivateEndpoint+0x2c0>)
 80104e6:	430a      	orrs	r2, r1
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	e070      	b.n	80105ce <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	18d3      	adds	r3, r2, r3
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	657b      	str	r3, [r7, #84]	; 0x54
 80104fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104fc:	2380      	movs	r3, #128	; 0x80
 80104fe:	01db      	lsls	r3, r3, #7
 8010500:	4013      	ands	r3, r2
 8010502:	d011      	beq.n	8010528 <USB_DeactivateEndpoint+0x204>
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	18d3      	adds	r3, r2, r3
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4a31      	ldr	r2, [pc, #196]	; (80105d8 <USB_DeactivateEndpoint+0x2b4>)
 8010512:	4013      	ands	r3, r2
 8010514:	653b      	str	r3, [r7, #80]	; 0x50
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	18d3      	adds	r3, r2, r3
 8010520:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010522:	4931      	ldr	r1, [pc, #196]	; (80105e8 <USB_DeactivateEndpoint+0x2c4>)
 8010524:	430a      	orrs	r2, r1
 8010526:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	009b      	lsls	r3, r3, #2
 8010530:	18d3      	adds	r3, r2, r3
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010538:	2240      	movs	r2, #64	; 0x40
 801053a:	4013      	ands	r3, r2
 801053c:	d011      	beq.n	8010562 <USB_DeactivateEndpoint+0x23e>
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	009b      	lsls	r3, r3, #2
 8010546:	18d3      	adds	r3, r2, r3
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4a23      	ldr	r2, [pc, #140]	; (80105d8 <USB_DeactivateEndpoint+0x2b4>)
 801054c:	4013      	ands	r3, r2
 801054e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	18d3      	adds	r3, r2, r3
 801055a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801055c:	491f      	ldr	r1, [pc, #124]	; (80105dc <USB_DeactivateEndpoint+0x2b8>)
 801055e:	430a      	orrs	r2, r1
 8010560:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	18d3      	adds	r3, r2, r3
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4a1a      	ldr	r2, [pc, #104]	; (80105d8 <USB_DeactivateEndpoint+0x2b4>)
 8010570:	4013      	ands	r3, r2
 8010572:	647b      	str	r3, [r7, #68]	; 0x44
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	18d3      	adds	r3, r2, r3
 801057e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010580:	4919      	ldr	r1, [pc, #100]	; (80105e8 <USB_DeactivateEndpoint+0x2c4>)
 8010582:	430a      	orrs	r2, r1
 8010584:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	009b      	lsls	r3, r3, #2
 801058e:	18d3      	adds	r3, r2, r3
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	4a13      	ldr	r2, [pc, #76]	; (80105e0 <USB_DeactivateEndpoint+0x2bc>)
 8010594:	4013      	ands	r3, r2
 8010596:	643b      	str	r3, [r7, #64]	; 0x40
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	18d3      	adds	r3, r2, r3
 80105a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105a4:	490f      	ldr	r1, [pc, #60]	; (80105e4 <USB_DeactivateEndpoint+0x2c0>)
 80105a6:	430a      	orrs	r2, r1
 80105a8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	18d3      	adds	r3, r2, r3
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	4a0d      	ldr	r2, [pc, #52]	; (80105ec <USB_DeactivateEndpoint+0x2c8>)
 80105b8:	4013      	ands	r3, r2
 80105ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	18d3      	adds	r3, r2, r3
 80105c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105c8:	4906      	ldr	r1, [pc, #24]	; (80105e4 <USB_DeactivateEndpoint+0x2c0>)
 80105ca:	430a      	orrs	r2, r1
 80105cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80105ce:	2300      	movs	r3, #0
}
 80105d0:	0018      	movs	r0, r3
 80105d2:	46bd      	mov	sp, r7
 80105d4:	b016      	add	sp, #88	; 0x58
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	07ff8f8f 	.word	0x07ff8f8f
 80105dc:	000080c0 	.word	0x000080c0
 80105e0:	07ff8fbf 	.word	0x07ff8fbf
 80105e4:	00008080 	.word	0x00008080
 80105e8:	0000c080 	.word	0x0000c080
 80105ec:	07ffbf8f 	.word	0x07ffbf8f

080105f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80105f0:	b590      	push	{r4, r7, lr}
 80105f2:	b097      	sub	sp, #92	; 0x5c
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	785b      	ldrb	r3, [r3, #1]
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d001      	beq.n	8010606 <USB_EPStartXfer+0x16>
 8010602:	f000 fcbf 	bl	8010f84 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	699a      	ldr	r2, [r3, #24]
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	691b      	ldr	r3, [r3, #16]
 801060e:	429a      	cmp	r2, r3
 8010610:	d903      	bls.n	801061a <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	691b      	ldr	r3, [r3, #16]
 8010616:	657b      	str	r3, [r7, #84]	; 0x54
 8010618:	e002      	b.n	8010620 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	699b      	ldr	r3, [r3, #24]
 801061e:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	7b1b      	ldrb	r3, [r3, #12]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d12b      	bne.n	8010680 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	6959      	ldr	r1, [r3, #20]
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	88da      	ldrh	r2, [r3, #6]
 8010630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010632:	b29b      	uxth	r3, r3
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f001 f8f5 	bl	8011824 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	00db      	lsls	r3, r3, #3
 8010640:	4ace      	ldr	r2, [pc, #824]	; (801097c <USB_EPStartXfer+0x38c>)
 8010642:	4694      	mov	ip, r2
 8010644:	4463      	add	r3, ip
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	00db      	lsls	r3, r3, #3
 801064e:	49cb      	ldr	r1, [pc, #812]	; (801097c <USB_EPStartXfer+0x38c>)
 8010650:	468c      	mov	ip, r1
 8010652:	4463      	add	r3, ip
 8010654:	0412      	lsls	r2, r2, #16
 8010656:	0c12      	lsrs	r2, r2, #16
 8010658:	601a      	str	r2, [r3, #0]
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	00db      	lsls	r3, r3, #3
 8010660:	4ac6      	ldr	r2, [pc, #792]	; (801097c <USB_EPStartXfer+0x38c>)
 8010662:	4694      	mov	ip, r2
 8010664:	4463      	add	r3, ip
 8010666:	6819      	ldr	r1, [r3, #0]
 8010668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801066a:	041a      	lsls	r2, r3, #16
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	00db      	lsls	r3, r3, #3
 8010672:	48c2      	ldr	r0, [pc, #776]	; (801097c <USB_EPStartXfer+0x38c>)
 8010674:	4684      	mov	ip, r0
 8010676:	4463      	add	r3, ip
 8010678:	430a      	orrs	r2, r1
 801067a:	601a      	str	r2, [r3, #0]
 801067c:	f000 fc67 	bl	8010f4e <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	78db      	ldrb	r3, [r3, #3]
 8010684:	2b02      	cmp	r3, #2
 8010686:	d000      	beq.n	801068a <USB_EPStartXfer+0x9a>
 8010688:	e31a      	b.n	8010cc0 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	6a1a      	ldr	r2, [r3, #32]
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	691b      	ldr	r3, [r3, #16]
 8010692:	429a      	cmp	r2, r3
 8010694:	d800      	bhi.n	8010698 <USB_EPStartXfer+0xa8>
 8010696:	e2c7      	b.n	8010c28 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	009b      	lsls	r3, r3, #2
 80106a0:	18d3      	adds	r3, r2, r3
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4ab6      	ldr	r2, [pc, #728]	; (8010980 <USB_EPStartXfer+0x390>)
 80106a6:	4013      	ands	r3, r2
 80106a8:	613b      	str	r3, [r7, #16]
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	009b      	lsls	r3, r3, #2
 80106b2:	18d3      	adds	r3, r2, r3
 80106b4:	693a      	ldr	r2, [r7, #16]
 80106b6:	49b3      	ldr	r1, [pc, #716]	; (8010984 <USB_EPStartXfer+0x394>)
 80106b8:	430a      	orrs	r2, r1
 80106ba:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	6a1a      	ldr	r2, [r3, #32]
 80106c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106c2:	1ad2      	subs	r2, r2, r3
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80106c8:	687a      	ldr	r2, [r7, #4]
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	009b      	lsls	r3, r3, #2
 80106d0:	18d3      	adds	r3, r2, r3
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2240      	movs	r2, #64	; 0x40
 80106d6:	4013      	ands	r3, r2
 80106d8:	d100      	bne.n	80106dc <USB_EPStartXfer+0xec>
 80106da:	e155      	b.n	8010988 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	785b      	ldrb	r3, [r3, #1]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d162      	bne.n	80107aa <USB_EPStartXfer+0x1ba>
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	00db      	lsls	r3, r3, #3
 80106ea:	4aa4      	ldr	r2, [pc, #656]	; (801097c <USB_EPStartXfer+0x38c>)
 80106ec:	4694      	mov	ip, r2
 80106ee:	4463      	add	r3, ip
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	00db      	lsls	r3, r3, #3
 80106f8:	49a0      	ldr	r1, [pc, #640]	; (801097c <USB_EPStartXfer+0x38c>)
 80106fa:	468c      	mov	ip, r1
 80106fc:	4463      	add	r3, ip
 80106fe:	0192      	lsls	r2, r2, #6
 8010700:	0992      	lsrs	r2, r2, #6
 8010702:	605a      	str	r2, [r3, #4]
 8010704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010706:	2b3e      	cmp	r3, #62	; 0x3e
 8010708:	d91e      	bls.n	8010748 <USB_EPStartXfer+0x158>
 801070a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801070c:	095b      	lsrs	r3, r3, #5
 801070e:	653b      	str	r3, [r7, #80]	; 0x50
 8010710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010712:	221f      	movs	r2, #31
 8010714:	4013      	ands	r3, r2
 8010716:	d102      	bne.n	801071e <USB_EPStartXfer+0x12e>
 8010718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801071a:	3b01      	subs	r3, #1
 801071c:	653b      	str	r3, [r7, #80]	; 0x50
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	00db      	lsls	r3, r3, #3
 8010724:	4a95      	ldr	r2, [pc, #596]	; (801097c <USB_EPStartXfer+0x38c>)
 8010726:	4694      	mov	ip, r2
 8010728:	4463      	add	r3, ip
 801072a:	685a      	ldr	r2, [r3, #4]
 801072c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801072e:	069b      	lsls	r3, r3, #26
 8010730:	431a      	orrs	r2, r3
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	00db      	lsls	r3, r3, #3
 8010738:	4990      	ldr	r1, [pc, #576]	; (801097c <USB_EPStartXfer+0x38c>)
 801073a:	468c      	mov	ip, r1
 801073c:	4463      	add	r3, ip
 801073e:	2180      	movs	r1, #128	; 0x80
 8010740:	0609      	lsls	r1, r1, #24
 8010742:	430a      	orrs	r2, r1
 8010744:	605a      	str	r2, [r3, #4]
 8010746:	e055      	b.n	80107f4 <USB_EPStartXfer+0x204>
 8010748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801074a:	2b00      	cmp	r3, #0
 801074c:	d111      	bne.n	8010772 <USB_EPStartXfer+0x182>
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	00db      	lsls	r3, r3, #3
 8010754:	4a89      	ldr	r2, [pc, #548]	; (801097c <USB_EPStartXfer+0x38c>)
 8010756:	4694      	mov	ip, r2
 8010758:	4463      	add	r3, ip
 801075a:	685a      	ldr	r2, [r3, #4]
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	00db      	lsls	r3, r3, #3
 8010762:	4986      	ldr	r1, [pc, #536]	; (801097c <USB_EPStartXfer+0x38c>)
 8010764:	468c      	mov	ip, r1
 8010766:	4463      	add	r3, ip
 8010768:	2180      	movs	r1, #128	; 0x80
 801076a:	0609      	lsls	r1, r1, #24
 801076c:	430a      	orrs	r2, r1
 801076e:	605a      	str	r2, [r3, #4]
 8010770:	e040      	b.n	80107f4 <USB_EPStartXfer+0x204>
 8010772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010774:	085b      	lsrs	r3, r3, #1
 8010776:	653b      	str	r3, [r7, #80]	; 0x50
 8010778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801077a:	2201      	movs	r2, #1
 801077c:	4013      	ands	r3, r2
 801077e:	d002      	beq.n	8010786 <USB_EPStartXfer+0x196>
 8010780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010782:	3301      	adds	r3, #1
 8010784:	653b      	str	r3, [r7, #80]	; 0x50
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	00db      	lsls	r3, r3, #3
 801078c:	4a7b      	ldr	r2, [pc, #492]	; (801097c <USB_EPStartXfer+0x38c>)
 801078e:	4694      	mov	ip, r2
 8010790:	4463      	add	r3, ip
 8010792:	6859      	ldr	r1, [r3, #4]
 8010794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010796:	069a      	lsls	r2, r3, #26
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	00db      	lsls	r3, r3, #3
 801079e:	4877      	ldr	r0, [pc, #476]	; (801097c <USB_EPStartXfer+0x38c>)
 80107a0:	4684      	mov	ip, r0
 80107a2:	4463      	add	r3, ip
 80107a4:	430a      	orrs	r2, r1
 80107a6:	605a      	str	r2, [r3, #4]
 80107a8:	e024      	b.n	80107f4 <USB_EPStartXfer+0x204>
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	785b      	ldrb	r3, [r3, #1]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d120      	bne.n	80107f4 <USB_EPStartXfer+0x204>
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	4a70      	ldr	r2, [pc, #448]	; (801097c <USB_EPStartXfer+0x38c>)
 80107ba:	4694      	mov	ip, r2
 80107bc:	4463      	add	r3, ip
 80107be:	685a      	ldr	r2, [r3, #4]
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	00db      	lsls	r3, r3, #3
 80107c6:	496d      	ldr	r1, [pc, #436]	; (801097c <USB_EPStartXfer+0x38c>)
 80107c8:	468c      	mov	ip, r1
 80107ca:	4463      	add	r3, ip
 80107cc:	0412      	lsls	r2, r2, #16
 80107ce:	0c12      	lsrs	r2, r2, #16
 80107d0:	605a      	str	r2, [r3, #4]
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	00db      	lsls	r3, r3, #3
 80107d8:	4a68      	ldr	r2, [pc, #416]	; (801097c <USB_EPStartXfer+0x38c>)
 80107da:	4694      	mov	ip, r2
 80107dc:	4463      	add	r3, ip
 80107de:	6859      	ldr	r1, [r3, #4]
 80107e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107e2:	041a      	lsls	r2, r3, #16
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	00db      	lsls	r3, r3, #3
 80107ea:	4864      	ldr	r0, [pc, #400]	; (801097c <USB_EPStartXfer+0x38c>)
 80107ec:	4684      	mov	ip, r0
 80107ee:	4463      	add	r3, ip
 80107f0:	430a      	orrs	r2, r1
 80107f2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80107f4:	201a      	movs	r0, #26
 80107f6:	183b      	adds	r3, r7, r0
 80107f8:	683a      	ldr	r2, [r7, #0]
 80107fa:	8952      	ldrh	r2, [r2, #10]
 80107fc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	6959      	ldr	r1, [r3, #20]
 8010802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010804:	b29c      	uxth	r4, r3
 8010806:	183b      	adds	r3, r7, r0
 8010808:	881a      	ldrh	r2, [r3, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	0023      	movs	r3, r4
 801080e:	f001 f809 	bl	8011824 <USB_WritePMA>
            ep->xfer_buff += len;
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	695a      	ldr	r2, [r3, #20]
 8010816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010818:	18d2      	adds	r2, r2, r3
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	6a1a      	ldr	r2, [r3, #32]
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	691b      	ldr	r3, [r3, #16]
 8010826:	429a      	cmp	r2, r3
 8010828:	d906      	bls.n	8010838 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	6a1a      	ldr	r2, [r3, #32]
 801082e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010830:	1ad2      	subs	r2, r2, r3
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	621a      	str	r2, [r3, #32]
 8010836:	e005      	b.n	8010844 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	6a1b      	ldr	r3, [r3, #32]
 801083c:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	2200      	movs	r2, #0
 8010842:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	785b      	ldrb	r3, [r3, #1]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d162      	bne.n	8010912 <USB_EPStartXfer+0x322>
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	00db      	lsls	r3, r3, #3
 8010852:	4a4a      	ldr	r2, [pc, #296]	; (801097c <USB_EPStartXfer+0x38c>)
 8010854:	4694      	mov	ip, r2
 8010856:	4463      	add	r3, ip
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	00db      	lsls	r3, r3, #3
 8010860:	4946      	ldr	r1, [pc, #280]	; (801097c <USB_EPStartXfer+0x38c>)
 8010862:	468c      	mov	ip, r1
 8010864:	4463      	add	r3, ip
 8010866:	0192      	lsls	r2, r2, #6
 8010868:	0992      	lsrs	r2, r2, #6
 801086a:	601a      	str	r2, [r3, #0]
 801086c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801086e:	2b3e      	cmp	r3, #62	; 0x3e
 8010870:	d91e      	bls.n	80108b0 <USB_EPStartXfer+0x2c0>
 8010872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010874:	095b      	lsrs	r3, r3, #5
 8010876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801087a:	221f      	movs	r2, #31
 801087c:	4013      	ands	r3, r2
 801087e:	d102      	bne.n	8010886 <USB_EPStartXfer+0x296>
 8010880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010882:	3b01      	subs	r3, #1
 8010884:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	00db      	lsls	r3, r3, #3
 801088c:	4a3b      	ldr	r2, [pc, #236]	; (801097c <USB_EPStartXfer+0x38c>)
 801088e:	4694      	mov	ip, r2
 8010890:	4463      	add	r3, ip
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010896:	069b      	lsls	r3, r3, #26
 8010898:	431a      	orrs	r2, r3
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	00db      	lsls	r3, r3, #3
 80108a0:	4936      	ldr	r1, [pc, #216]	; (801097c <USB_EPStartXfer+0x38c>)
 80108a2:	468c      	mov	ip, r1
 80108a4:	4463      	add	r3, ip
 80108a6:	2180      	movs	r1, #128	; 0x80
 80108a8:	0609      	lsls	r1, r1, #24
 80108aa:	430a      	orrs	r2, r1
 80108ac:	601a      	str	r2, [r3, #0]
 80108ae:	e055      	b.n	801095c <USB_EPStartXfer+0x36c>
 80108b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d111      	bne.n	80108da <USB_EPStartXfer+0x2ea>
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	00db      	lsls	r3, r3, #3
 80108bc:	4a2f      	ldr	r2, [pc, #188]	; (801097c <USB_EPStartXfer+0x38c>)
 80108be:	4694      	mov	ip, r2
 80108c0:	4463      	add	r3, ip
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	00db      	lsls	r3, r3, #3
 80108ca:	492c      	ldr	r1, [pc, #176]	; (801097c <USB_EPStartXfer+0x38c>)
 80108cc:	468c      	mov	ip, r1
 80108ce:	4463      	add	r3, ip
 80108d0:	2180      	movs	r1, #128	; 0x80
 80108d2:	0609      	lsls	r1, r1, #24
 80108d4:	430a      	orrs	r2, r1
 80108d6:	601a      	str	r2, [r3, #0]
 80108d8:	e040      	b.n	801095c <USB_EPStartXfer+0x36c>
 80108da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108dc:	085b      	lsrs	r3, r3, #1
 80108de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108e2:	2201      	movs	r2, #1
 80108e4:	4013      	ands	r3, r2
 80108e6:	d002      	beq.n	80108ee <USB_EPStartXfer+0x2fe>
 80108e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ea:	3301      	adds	r3, #1
 80108ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	00db      	lsls	r3, r3, #3
 80108f4:	4a21      	ldr	r2, [pc, #132]	; (801097c <USB_EPStartXfer+0x38c>)
 80108f6:	4694      	mov	ip, r2
 80108f8:	4463      	add	r3, ip
 80108fa:	6819      	ldr	r1, [r3, #0]
 80108fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108fe:	069a      	lsls	r2, r3, #26
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	00db      	lsls	r3, r3, #3
 8010906:	481d      	ldr	r0, [pc, #116]	; (801097c <USB_EPStartXfer+0x38c>)
 8010908:	4684      	mov	ip, r0
 801090a:	4463      	add	r3, ip
 801090c:	430a      	orrs	r2, r1
 801090e:	601a      	str	r2, [r3, #0]
 8010910:	e024      	b.n	801095c <USB_EPStartXfer+0x36c>
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	785b      	ldrb	r3, [r3, #1]
 8010916:	2b01      	cmp	r3, #1
 8010918:	d120      	bne.n	801095c <USB_EPStartXfer+0x36c>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	00db      	lsls	r3, r3, #3
 8010920:	4a16      	ldr	r2, [pc, #88]	; (801097c <USB_EPStartXfer+0x38c>)
 8010922:	4694      	mov	ip, r2
 8010924:	4463      	add	r3, ip
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	00db      	lsls	r3, r3, #3
 801092e:	4913      	ldr	r1, [pc, #76]	; (801097c <USB_EPStartXfer+0x38c>)
 8010930:	468c      	mov	ip, r1
 8010932:	4463      	add	r3, ip
 8010934:	0412      	lsls	r2, r2, #16
 8010936:	0c12      	lsrs	r2, r2, #16
 8010938:	601a      	str	r2, [r3, #0]
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	00db      	lsls	r3, r3, #3
 8010940:	4a0e      	ldr	r2, [pc, #56]	; (801097c <USB_EPStartXfer+0x38c>)
 8010942:	4694      	mov	ip, r2
 8010944:	4463      	add	r3, ip
 8010946:	6819      	ldr	r1, [r3, #0]
 8010948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801094a:	041a      	lsls	r2, r3, #16
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	00db      	lsls	r3, r3, #3
 8010952:	480a      	ldr	r0, [pc, #40]	; (801097c <USB_EPStartXfer+0x38c>)
 8010954:	4684      	mov	ip, r0
 8010956:	4463      	add	r3, ip
 8010958:	430a      	orrs	r2, r1
 801095a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801095c:	201a      	movs	r0, #26
 801095e:	183b      	adds	r3, r7, r0
 8010960:	683a      	ldr	r2, [r7, #0]
 8010962:	8912      	ldrh	r2, [r2, #8]
 8010964:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	6959      	ldr	r1, [r3, #20]
 801096a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801096c:	b29c      	uxth	r4, r3
 801096e:	183b      	adds	r3, r7, r0
 8010970:	881a      	ldrh	r2, [r3, #0]
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	0023      	movs	r3, r4
 8010976:	f000 ff55 	bl	8011824 <USB_WritePMA>
 801097a:	e2e8      	b.n	8010f4e <USB_EPStartXfer+0x95e>
 801097c:	40009800 	.word	0x40009800
 8010980:	07ff8f8f 	.word	0x07ff8f8f
 8010984:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	785b      	ldrb	r3, [r3, #1]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d162      	bne.n	8010a56 <USB_EPStartXfer+0x466>
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	00db      	lsls	r3, r3, #3
 8010996:	4ac7      	ldr	r2, [pc, #796]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010998:	4694      	mov	ip, r2
 801099a:	4463      	add	r3, ip
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	00db      	lsls	r3, r3, #3
 80109a4:	49c3      	ldr	r1, [pc, #780]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 80109a6:	468c      	mov	ip, r1
 80109a8:	4463      	add	r3, ip
 80109aa:	0192      	lsls	r2, r2, #6
 80109ac:	0992      	lsrs	r2, r2, #6
 80109ae:	601a      	str	r2, [r3, #0]
 80109b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109b2:	2b3e      	cmp	r3, #62	; 0x3e
 80109b4:	d91e      	bls.n	80109f4 <USB_EPStartXfer+0x404>
 80109b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109b8:	095b      	lsrs	r3, r3, #5
 80109ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80109bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109be:	221f      	movs	r2, #31
 80109c0:	4013      	ands	r3, r2
 80109c2:	d102      	bne.n	80109ca <USB_EPStartXfer+0x3da>
 80109c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109c6:	3b01      	subs	r3, #1
 80109c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	4ab8      	ldr	r2, [pc, #736]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 80109d2:	4694      	mov	ip, r2
 80109d4:	4463      	add	r3, ip
 80109d6:	681a      	ldr	r2, [r3, #0]
 80109d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109da:	069b      	lsls	r3, r3, #26
 80109dc:	431a      	orrs	r2, r3
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	00db      	lsls	r3, r3, #3
 80109e4:	49b3      	ldr	r1, [pc, #716]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 80109e6:	468c      	mov	ip, r1
 80109e8:	4463      	add	r3, ip
 80109ea:	2180      	movs	r1, #128	; 0x80
 80109ec:	0609      	lsls	r1, r1, #24
 80109ee:	430a      	orrs	r2, r1
 80109f0:	601a      	str	r2, [r3, #0]
 80109f2:	e055      	b.n	8010aa0 <USB_EPStartXfer+0x4b0>
 80109f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d111      	bne.n	8010a1e <USB_EPStartXfer+0x42e>
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	00db      	lsls	r3, r3, #3
 8010a00:	4aac      	ldr	r2, [pc, #688]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010a02:	4694      	mov	ip, r2
 8010a04:	4463      	add	r3, ip
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	00db      	lsls	r3, r3, #3
 8010a0e:	49a9      	ldr	r1, [pc, #676]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010a10:	468c      	mov	ip, r1
 8010a12:	4463      	add	r3, ip
 8010a14:	2180      	movs	r1, #128	; 0x80
 8010a16:	0609      	lsls	r1, r1, #24
 8010a18:	430a      	orrs	r2, r1
 8010a1a:	601a      	str	r2, [r3, #0]
 8010a1c:	e040      	b.n	8010aa0 <USB_EPStartXfer+0x4b0>
 8010a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a20:	085b      	lsrs	r3, r3, #1
 8010a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a26:	2201      	movs	r2, #1
 8010a28:	4013      	ands	r3, r2
 8010a2a:	d002      	beq.n	8010a32 <USB_EPStartXfer+0x442>
 8010a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a2e:	3301      	adds	r3, #1
 8010a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	00db      	lsls	r3, r3, #3
 8010a38:	4a9e      	ldr	r2, [pc, #632]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010a3a:	4694      	mov	ip, r2
 8010a3c:	4463      	add	r3, ip
 8010a3e:	6819      	ldr	r1, [r3, #0]
 8010a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a42:	069a      	lsls	r2, r3, #26
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	00db      	lsls	r3, r3, #3
 8010a4a:	489a      	ldr	r0, [pc, #616]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010a4c:	4684      	mov	ip, r0
 8010a4e:	4463      	add	r3, ip
 8010a50:	430a      	orrs	r2, r1
 8010a52:	601a      	str	r2, [r3, #0]
 8010a54:	e024      	b.n	8010aa0 <USB_EPStartXfer+0x4b0>
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	785b      	ldrb	r3, [r3, #1]
 8010a5a:	2b01      	cmp	r3, #1
 8010a5c:	d120      	bne.n	8010aa0 <USB_EPStartXfer+0x4b0>
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	00db      	lsls	r3, r3, #3
 8010a64:	4a93      	ldr	r2, [pc, #588]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010a66:	4694      	mov	ip, r2
 8010a68:	4463      	add	r3, ip
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	00db      	lsls	r3, r3, #3
 8010a72:	4990      	ldr	r1, [pc, #576]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010a74:	468c      	mov	ip, r1
 8010a76:	4463      	add	r3, ip
 8010a78:	0412      	lsls	r2, r2, #16
 8010a7a:	0c12      	lsrs	r2, r2, #16
 8010a7c:	601a      	str	r2, [r3, #0]
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	00db      	lsls	r3, r3, #3
 8010a84:	4a8b      	ldr	r2, [pc, #556]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010a86:	4694      	mov	ip, r2
 8010a88:	4463      	add	r3, ip
 8010a8a:	6819      	ldr	r1, [r3, #0]
 8010a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a8e:	041a      	lsls	r2, r3, #16
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	00db      	lsls	r3, r3, #3
 8010a96:	4887      	ldr	r0, [pc, #540]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010a98:	4684      	mov	ip, r0
 8010a9a:	4463      	add	r3, ip
 8010a9c:	430a      	orrs	r2, r1
 8010a9e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010aa0:	201a      	movs	r0, #26
 8010aa2:	183b      	adds	r3, r7, r0
 8010aa4:	683a      	ldr	r2, [r7, #0]
 8010aa6:	8912      	ldrh	r2, [r2, #8]
 8010aa8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	6959      	ldr	r1, [r3, #20]
 8010aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ab0:	b29c      	uxth	r4, r3
 8010ab2:	183b      	adds	r3, r7, r0
 8010ab4:	881a      	ldrh	r2, [r3, #0]
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	0023      	movs	r3, r4
 8010aba:	f000 feb3 	bl	8011824 <USB_WritePMA>
            ep->xfer_buff += len;
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	695a      	ldr	r2, [r3, #20]
 8010ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ac4:	18d2      	adds	r2, r2, r3
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	6a1a      	ldr	r2, [r3, #32]
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d906      	bls.n	8010ae4 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	6a1a      	ldr	r2, [r3, #32]
 8010ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010adc:	1ad2      	subs	r2, r2, r3
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	621a      	str	r2, [r3, #32]
 8010ae2:	e005      	b.n	8010af0 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	6a1b      	ldr	r3, [r3, #32]
 8010ae8:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	2200      	movs	r2, #0
 8010aee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	785b      	ldrb	r3, [r3, #1]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d162      	bne.n	8010bbe <USB_EPStartXfer+0x5ce>
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	00db      	lsls	r3, r3, #3
 8010afe:	4a6d      	ldr	r2, [pc, #436]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010b00:	4694      	mov	ip, r2
 8010b02:	4463      	add	r3, ip
 8010b04:	685a      	ldr	r2, [r3, #4]
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	4969      	ldr	r1, [pc, #420]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010b0e:	468c      	mov	ip, r1
 8010b10:	4463      	add	r3, ip
 8010b12:	0192      	lsls	r2, r2, #6
 8010b14:	0992      	lsrs	r2, r2, #6
 8010b16:	605a      	str	r2, [r3, #4]
 8010b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8010b1c:	d91e      	bls.n	8010b5c <USB_EPStartXfer+0x56c>
 8010b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b20:	095b      	lsrs	r3, r3, #5
 8010b22:	647b      	str	r3, [r7, #68]	; 0x44
 8010b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b26:	221f      	movs	r2, #31
 8010b28:	4013      	ands	r3, r2
 8010b2a:	d102      	bne.n	8010b32 <USB_EPStartXfer+0x542>
 8010b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b2e:	3b01      	subs	r3, #1
 8010b30:	647b      	str	r3, [r7, #68]	; 0x44
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	00db      	lsls	r3, r3, #3
 8010b38:	4a5e      	ldr	r2, [pc, #376]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010b3a:	4694      	mov	ip, r2
 8010b3c:	4463      	add	r3, ip
 8010b3e:	685a      	ldr	r2, [r3, #4]
 8010b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b42:	069b      	lsls	r3, r3, #26
 8010b44:	431a      	orrs	r2, r3
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	00db      	lsls	r3, r3, #3
 8010b4c:	4959      	ldr	r1, [pc, #356]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010b4e:	468c      	mov	ip, r1
 8010b50:	4463      	add	r3, ip
 8010b52:	2180      	movs	r1, #128	; 0x80
 8010b54:	0609      	lsls	r1, r1, #24
 8010b56:	430a      	orrs	r2, r1
 8010b58:	605a      	str	r2, [r3, #4]
 8010b5a:	e055      	b.n	8010c08 <USB_EPStartXfer+0x618>
 8010b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d111      	bne.n	8010b86 <USB_EPStartXfer+0x596>
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	00db      	lsls	r3, r3, #3
 8010b68:	4a52      	ldr	r2, [pc, #328]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010b6a:	4694      	mov	ip, r2
 8010b6c:	4463      	add	r3, ip
 8010b6e:	685a      	ldr	r2, [r3, #4]
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	00db      	lsls	r3, r3, #3
 8010b76:	494f      	ldr	r1, [pc, #316]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010b78:	468c      	mov	ip, r1
 8010b7a:	4463      	add	r3, ip
 8010b7c:	2180      	movs	r1, #128	; 0x80
 8010b7e:	0609      	lsls	r1, r1, #24
 8010b80:	430a      	orrs	r2, r1
 8010b82:	605a      	str	r2, [r3, #4]
 8010b84:	e040      	b.n	8010c08 <USB_EPStartXfer+0x618>
 8010b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b88:	085b      	lsrs	r3, r3, #1
 8010b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8010b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b8e:	2201      	movs	r2, #1
 8010b90:	4013      	ands	r3, r2
 8010b92:	d002      	beq.n	8010b9a <USB_EPStartXfer+0x5aa>
 8010b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b96:	3301      	adds	r3, #1
 8010b98:	647b      	str	r3, [r7, #68]	; 0x44
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	00db      	lsls	r3, r3, #3
 8010ba0:	4a44      	ldr	r2, [pc, #272]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010ba2:	4694      	mov	ip, r2
 8010ba4:	4463      	add	r3, ip
 8010ba6:	6859      	ldr	r1, [r3, #4]
 8010ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010baa:	069a      	lsls	r2, r3, #26
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	00db      	lsls	r3, r3, #3
 8010bb2:	4840      	ldr	r0, [pc, #256]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010bb4:	4684      	mov	ip, r0
 8010bb6:	4463      	add	r3, ip
 8010bb8:	430a      	orrs	r2, r1
 8010bba:	605a      	str	r2, [r3, #4]
 8010bbc:	e024      	b.n	8010c08 <USB_EPStartXfer+0x618>
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	785b      	ldrb	r3, [r3, #1]
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d120      	bne.n	8010c08 <USB_EPStartXfer+0x618>
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	4a39      	ldr	r2, [pc, #228]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010bce:	4694      	mov	ip, r2
 8010bd0:	4463      	add	r3, ip
 8010bd2:	685a      	ldr	r2, [r3, #4]
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	00db      	lsls	r3, r3, #3
 8010bda:	4936      	ldr	r1, [pc, #216]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010bdc:	468c      	mov	ip, r1
 8010bde:	4463      	add	r3, ip
 8010be0:	0412      	lsls	r2, r2, #16
 8010be2:	0c12      	lsrs	r2, r2, #16
 8010be4:	605a      	str	r2, [r3, #4]
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	00db      	lsls	r3, r3, #3
 8010bec:	4a31      	ldr	r2, [pc, #196]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010bee:	4694      	mov	ip, r2
 8010bf0:	4463      	add	r3, ip
 8010bf2:	6859      	ldr	r1, [r3, #4]
 8010bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bf6:	041a      	lsls	r2, r3, #16
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	00db      	lsls	r3, r3, #3
 8010bfe:	482d      	ldr	r0, [pc, #180]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010c00:	4684      	mov	ip, r0
 8010c02:	4463      	add	r3, ip
 8010c04:	430a      	orrs	r2, r1
 8010c06:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8010c08:	201a      	movs	r0, #26
 8010c0a:	183b      	adds	r3, r7, r0
 8010c0c:	683a      	ldr	r2, [r7, #0]
 8010c0e:	8952      	ldrh	r2, [r2, #10]
 8010c10:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	6959      	ldr	r1, [r3, #20]
 8010c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c18:	b29c      	uxth	r4, r3
 8010c1a:	183b      	adds	r3, r7, r0
 8010c1c:	881a      	ldrh	r2, [r3, #0]
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	0023      	movs	r3, r4
 8010c22:	f000 fdff 	bl	8011824 <USB_WritePMA>
 8010c26:	e192      	b.n	8010f4e <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	6a1b      	ldr	r3, [r3, #32]
 8010c2c:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	18d3      	adds	r3, r2, r3
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	4a1f      	ldr	r2, [pc, #124]	; (8010cb8 <USB_EPStartXfer+0x6c8>)
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	617b      	str	r3, [r7, #20]
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	009b      	lsls	r3, r3, #2
 8010c48:	18d3      	adds	r3, r2, r3
 8010c4a:	697a      	ldr	r2, [r7, #20]
 8010c4c:	491b      	ldr	r1, [pc, #108]	; (8010cbc <USB_EPStartXfer+0x6cc>)
 8010c4e:	430a      	orrs	r2, r1
 8010c50:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	00db      	lsls	r3, r3, #3
 8010c58:	4a16      	ldr	r2, [pc, #88]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010c5a:	4694      	mov	ip, r2
 8010c5c:	4463      	add	r3, ip
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	00db      	lsls	r3, r3, #3
 8010c66:	4913      	ldr	r1, [pc, #76]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010c68:	468c      	mov	ip, r1
 8010c6a:	4463      	add	r3, ip
 8010c6c:	0412      	lsls	r2, r2, #16
 8010c6e:	0c12      	lsrs	r2, r2, #16
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	00db      	lsls	r3, r3, #3
 8010c78:	4a0e      	ldr	r2, [pc, #56]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010c7a:	4694      	mov	ip, r2
 8010c7c:	4463      	add	r3, ip
 8010c7e:	6819      	ldr	r1, [r3, #0]
 8010c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c82:	041a      	lsls	r2, r3, #16
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	00db      	lsls	r3, r3, #3
 8010c8a:	480a      	ldr	r0, [pc, #40]	; (8010cb4 <USB_EPStartXfer+0x6c4>)
 8010c8c:	4684      	mov	ip, r0
 8010c8e:	4463      	add	r3, ip
 8010c90:	430a      	orrs	r2, r1
 8010c92:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010c94:	201a      	movs	r0, #26
 8010c96:	183b      	adds	r3, r7, r0
 8010c98:	683a      	ldr	r2, [r7, #0]
 8010c9a:	8912      	ldrh	r2, [r2, #8]
 8010c9c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	6959      	ldr	r1, [r3, #20]
 8010ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ca4:	b29c      	uxth	r4, r3
 8010ca6:	183b      	adds	r3, r7, r0
 8010ca8:	881a      	ldrh	r2, [r3, #0]
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	0023      	movs	r3, r4
 8010cae:	f000 fdb9 	bl	8011824 <USB_WritePMA>
 8010cb2:	e14c      	b.n	8010f4e <USB_EPStartXfer+0x95e>
 8010cb4:	40009800 	.word	0x40009800
 8010cb8:	07ff8e8f 	.word	0x07ff8e8f
 8010cbc:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	6a1a      	ldr	r2, [r3, #32]
 8010cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cc6:	1ad2      	subs	r2, r2, r3
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	18d3      	adds	r3, r2, r3
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2240      	movs	r2, #64	; 0x40
 8010cda:	4013      	ands	r3, r2
 8010cdc:	d100      	bne.n	8010ce0 <USB_EPStartXfer+0x6f0>
 8010cde:	e09b      	b.n	8010e18 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	785b      	ldrb	r3, [r3, #1]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d162      	bne.n	8010dae <USB_EPStartXfer+0x7be>
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	00db      	lsls	r3, r3, #3
 8010cee:	4ad6      	ldr	r2, [pc, #856]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010cf0:	4694      	mov	ip, r2
 8010cf2:	4463      	add	r3, ip
 8010cf4:	685a      	ldr	r2, [r3, #4]
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	00db      	lsls	r3, r3, #3
 8010cfc:	49d2      	ldr	r1, [pc, #840]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010cfe:	468c      	mov	ip, r1
 8010d00:	4463      	add	r3, ip
 8010d02:	0192      	lsls	r2, r2, #6
 8010d04:	0992      	lsrs	r2, r2, #6
 8010d06:	605a      	str	r2, [r3, #4]
 8010d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8010d0c:	d91e      	bls.n	8010d4c <USB_EPStartXfer+0x75c>
 8010d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d10:	095b      	lsrs	r3, r3, #5
 8010d12:	643b      	str	r3, [r7, #64]	; 0x40
 8010d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d16:	221f      	movs	r2, #31
 8010d18:	4013      	ands	r3, r2
 8010d1a:	d102      	bne.n	8010d22 <USB_EPStartXfer+0x732>
 8010d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d1e:	3b01      	subs	r3, #1
 8010d20:	643b      	str	r3, [r7, #64]	; 0x40
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	00db      	lsls	r3, r3, #3
 8010d28:	4ac7      	ldr	r2, [pc, #796]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010d2a:	4694      	mov	ip, r2
 8010d2c:	4463      	add	r3, ip
 8010d2e:	685a      	ldr	r2, [r3, #4]
 8010d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d32:	069b      	lsls	r3, r3, #26
 8010d34:	431a      	orrs	r2, r3
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	00db      	lsls	r3, r3, #3
 8010d3c:	49c2      	ldr	r1, [pc, #776]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010d3e:	468c      	mov	ip, r1
 8010d40:	4463      	add	r3, ip
 8010d42:	2180      	movs	r1, #128	; 0x80
 8010d44:	0609      	lsls	r1, r1, #24
 8010d46:	430a      	orrs	r2, r1
 8010d48:	605a      	str	r2, [r3, #4]
 8010d4a:	e055      	b.n	8010df8 <USB_EPStartXfer+0x808>
 8010d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d111      	bne.n	8010d76 <USB_EPStartXfer+0x786>
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	00db      	lsls	r3, r3, #3
 8010d58:	4abb      	ldr	r2, [pc, #748]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010d5a:	4694      	mov	ip, r2
 8010d5c:	4463      	add	r3, ip
 8010d5e:	685a      	ldr	r2, [r3, #4]
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	00db      	lsls	r3, r3, #3
 8010d66:	49b8      	ldr	r1, [pc, #736]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010d68:	468c      	mov	ip, r1
 8010d6a:	4463      	add	r3, ip
 8010d6c:	2180      	movs	r1, #128	; 0x80
 8010d6e:	0609      	lsls	r1, r1, #24
 8010d70:	430a      	orrs	r2, r1
 8010d72:	605a      	str	r2, [r3, #4]
 8010d74:	e040      	b.n	8010df8 <USB_EPStartXfer+0x808>
 8010d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d78:	085b      	lsrs	r3, r3, #1
 8010d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8010d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d7e:	2201      	movs	r2, #1
 8010d80:	4013      	ands	r3, r2
 8010d82:	d002      	beq.n	8010d8a <USB_EPStartXfer+0x79a>
 8010d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d86:	3301      	adds	r3, #1
 8010d88:	643b      	str	r3, [r7, #64]	; 0x40
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	00db      	lsls	r3, r3, #3
 8010d90:	4aad      	ldr	r2, [pc, #692]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010d92:	4694      	mov	ip, r2
 8010d94:	4463      	add	r3, ip
 8010d96:	6859      	ldr	r1, [r3, #4]
 8010d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d9a:	069a      	lsls	r2, r3, #26
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	00db      	lsls	r3, r3, #3
 8010da2:	48a9      	ldr	r0, [pc, #676]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010da4:	4684      	mov	ip, r0
 8010da6:	4463      	add	r3, ip
 8010da8:	430a      	orrs	r2, r1
 8010daa:	605a      	str	r2, [r3, #4]
 8010dac:	e024      	b.n	8010df8 <USB_EPStartXfer+0x808>
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	785b      	ldrb	r3, [r3, #1]
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d120      	bne.n	8010df8 <USB_EPStartXfer+0x808>
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	00db      	lsls	r3, r3, #3
 8010dbc:	4aa2      	ldr	r2, [pc, #648]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010dbe:	4694      	mov	ip, r2
 8010dc0:	4463      	add	r3, ip
 8010dc2:	685a      	ldr	r2, [r3, #4]
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	00db      	lsls	r3, r3, #3
 8010dca:	499f      	ldr	r1, [pc, #636]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010dcc:	468c      	mov	ip, r1
 8010dce:	4463      	add	r3, ip
 8010dd0:	0412      	lsls	r2, r2, #16
 8010dd2:	0c12      	lsrs	r2, r2, #16
 8010dd4:	605a      	str	r2, [r3, #4]
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	00db      	lsls	r3, r3, #3
 8010ddc:	4a9a      	ldr	r2, [pc, #616]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010dde:	4694      	mov	ip, r2
 8010de0:	4463      	add	r3, ip
 8010de2:	6859      	ldr	r1, [r3, #4]
 8010de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010de6:	041a      	lsls	r2, r3, #16
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	00db      	lsls	r3, r3, #3
 8010dee:	4896      	ldr	r0, [pc, #600]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010df0:	4684      	mov	ip, r0
 8010df2:	4463      	add	r3, ip
 8010df4:	430a      	orrs	r2, r1
 8010df6:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8010df8:	201a      	movs	r0, #26
 8010dfa:	183b      	adds	r3, r7, r0
 8010dfc:	683a      	ldr	r2, [r7, #0]
 8010dfe:	8952      	ldrh	r2, [r2, #10]
 8010e00:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	6959      	ldr	r1, [r3, #20]
 8010e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e08:	b29c      	uxth	r4, r3
 8010e0a:	183b      	adds	r3, r7, r0
 8010e0c:	881a      	ldrh	r2, [r3, #0]
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	0023      	movs	r3, r4
 8010e12:	f000 fd07 	bl	8011824 <USB_WritePMA>
 8010e16:	e09a      	b.n	8010f4e <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	785b      	ldrb	r3, [r3, #1]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d162      	bne.n	8010ee6 <USB_EPStartXfer+0x8f6>
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	00db      	lsls	r3, r3, #3
 8010e26:	4a88      	ldr	r2, [pc, #544]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010e28:	4694      	mov	ip, r2
 8010e2a:	4463      	add	r3, ip
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	00db      	lsls	r3, r3, #3
 8010e34:	4984      	ldr	r1, [pc, #528]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010e36:	468c      	mov	ip, r1
 8010e38:	4463      	add	r3, ip
 8010e3a:	0192      	lsls	r2, r2, #6
 8010e3c:	0992      	lsrs	r2, r2, #6
 8010e3e:	601a      	str	r2, [r3, #0]
 8010e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e42:	2b3e      	cmp	r3, #62	; 0x3e
 8010e44:	d91e      	bls.n	8010e84 <USB_EPStartXfer+0x894>
 8010e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e48:	095b      	lsrs	r3, r3, #5
 8010e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e4e:	221f      	movs	r2, #31
 8010e50:	4013      	ands	r3, r2
 8010e52:	d102      	bne.n	8010e5a <USB_EPStartXfer+0x86a>
 8010e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e56:	3b01      	subs	r3, #1
 8010e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	00db      	lsls	r3, r3, #3
 8010e60:	4a79      	ldr	r2, [pc, #484]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010e62:	4694      	mov	ip, r2
 8010e64:	4463      	add	r3, ip
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e6a:	069b      	lsls	r3, r3, #26
 8010e6c:	431a      	orrs	r2, r3
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	00db      	lsls	r3, r3, #3
 8010e74:	4974      	ldr	r1, [pc, #464]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010e76:	468c      	mov	ip, r1
 8010e78:	4463      	add	r3, ip
 8010e7a:	2180      	movs	r1, #128	; 0x80
 8010e7c:	0609      	lsls	r1, r1, #24
 8010e7e:	430a      	orrs	r2, r1
 8010e80:	601a      	str	r2, [r3, #0]
 8010e82:	e055      	b.n	8010f30 <USB_EPStartXfer+0x940>
 8010e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d111      	bne.n	8010eae <USB_EPStartXfer+0x8be>
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	00db      	lsls	r3, r3, #3
 8010e90:	4a6d      	ldr	r2, [pc, #436]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010e92:	4694      	mov	ip, r2
 8010e94:	4463      	add	r3, ip
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	00db      	lsls	r3, r3, #3
 8010e9e:	496a      	ldr	r1, [pc, #424]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010ea0:	468c      	mov	ip, r1
 8010ea2:	4463      	add	r3, ip
 8010ea4:	2180      	movs	r1, #128	; 0x80
 8010ea6:	0609      	lsls	r1, r1, #24
 8010ea8:	430a      	orrs	r2, r1
 8010eaa:	601a      	str	r2, [r3, #0]
 8010eac:	e040      	b.n	8010f30 <USB_EPStartXfer+0x940>
 8010eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eb0:	085b      	lsrs	r3, r3, #1
 8010eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	4013      	ands	r3, r2
 8010eba:	d002      	beq.n	8010ec2 <USB_EPStartXfer+0x8d2>
 8010ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	00db      	lsls	r3, r3, #3
 8010ec8:	4a5f      	ldr	r2, [pc, #380]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010eca:	4694      	mov	ip, r2
 8010ecc:	4463      	add	r3, ip
 8010ece:	6819      	ldr	r1, [r3, #0]
 8010ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ed2:	069a      	lsls	r2, r3, #26
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	00db      	lsls	r3, r3, #3
 8010eda:	485b      	ldr	r0, [pc, #364]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010edc:	4684      	mov	ip, r0
 8010ede:	4463      	add	r3, ip
 8010ee0:	430a      	orrs	r2, r1
 8010ee2:	601a      	str	r2, [r3, #0]
 8010ee4:	e024      	b.n	8010f30 <USB_EPStartXfer+0x940>
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	785b      	ldrb	r3, [r3, #1]
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d120      	bne.n	8010f30 <USB_EPStartXfer+0x940>
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	00db      	lsls	r3, r3, #3
 8010ef4:	4a54      	ldr	r2, [pc, #336]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010ef6:	4694      	mov	ip, r2
 8010ef8:	4463      	add	r3, ip
 8010efa:	681a      	ldr	r2, [r3, #0]
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	00db      	lsls	r3, r3, #3
 8010f02:	4951      	ldr	r1, [pc, #324]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010f04:	468c      	mov	ip, r1
 8010f06:	4463      	add	r3, ip
 8010f08:	0412      	lsls	r2, r2, #16
 8010f0a:	0c12      	lsrs	r2, r2, #16
 8010f0c:	601a      	str	r2, [r3, #0]
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	00db      	lsls	r3, r3, #3
 8010f14:	4a4c      	ldr	r2, [pc, #304]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010f16:	4694      	mov	ip, r2
 8010f18:	4463      	add	r3, ip
 8010f1a:	6819      	ldr	r1, [r3, #0]
 8010f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f1e:	041a      	lsls	r2, r3, #16
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	00db      	lsls	r3, r3, #3
 8010f26:	4848      	ldr	r0, [pc, #288]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010f28:	4684      	mov	ip, r0
 8010f2a:	4463      	add	r3, ip
 8010f2c:	430a      	orrs	r2, r1
 8010f2e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010f30:	201a      	movs	r0, #26
 8010f32:	183b      	adds	r3, r7, r0
 8010f34:	683a      	ldr	r2, [r7, #0]
 8010f36:	8912      	ldrh	r2, [r2, #8]
 8010f38:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	6959      	ldr	r1, [r3, #20]
 8010f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f40:	b29c      	uxth	r4, r3
 8010f42:	183b      	adds	r3, r7, r0
 8010f44:	881a      	ldrh	r2, [r3, #0]
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	0023      	movs	r3, r4
 8010f4a:	f000 fc6b 	bl	8011824 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	18d3      	adds	r3, r2, r3
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	4a3c      	ldr	r2, [pc, #240]	; (801104c <USB_EPStartXfer+0xa5c>)
 8010f5c:	4013      	ands	r3, r2
 8010f5e:	60fb      	str	r3, [r7, #12]
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2210      	movs	r2, #16
 8010f64:	4053      	eors	r3, r2
 8010f66:	60fb      	str	r3, [r7, #12]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2220      	movs	r2, #32
 8010f6c:	4053      	eors	r3, r2
 8010f6e:	60fb      	str	r3, [r7, #12]
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	18d3      	adds	r3, r2, r3
 8010f7a:	68fa      	ldr	r2, [r7, #12]
 8010f7c:	4934      	ldr	r1, [pc, #208]	; (8011050 <USB_EPStartXfer+0xa60>)
 8010f7e:	430a      	orrs	r2, r1
 8010f80:	601a      	str	r2, [r3, #0]
 8010f82:	e340      	b.n	8011606 <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	7b1b      	ldrb	r3, [r3, #12]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d000      	beq.n	8010f8e <USB_EPStartXfer+0x99e>
 8010f8c:	e07e      	b.n	801108c <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	699a      	ldr	r2, [r3, #24]
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	691b      	ldr	r3, [r3, #16]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d909      	bls.n	8010fae <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	691b      	ldr	r3, [r3, #16]
 8010f9e:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	699a      	ldr	r2, [r3, #24]
 8010fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fa6:	1ad2      	subs	r2, r2, r3
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	619a      	str	r2, [r3, #24]
 8010fac:	e005      	b.n	8010fba <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	00db      	lsls	r3, r3, #3
 8010fc0:	4a21      	ldr	r2, [pc, #132]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010fc2:	4694      	mov	ip, r2
 8010fc4:	4463      	add	r3, ip
 8010fc6:	685a      	ldr	r2, [r3, #4]
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	00db      	lsls	r3, r3, #3
 8010fce:	491e      	ldr	r1, [pc, #120]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010fd0:	468c      	mov	ip, r1
 8010fd2:	4463      	add	r3, ip
 8010fd4:	0192      	lsls	r2, r2, #6
 8010fd6:	0992      	lsrs	r2, r2, #6
 8010fd8:	605a      	str	r2, [r3, #4]
 8010fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8010fde:	d91e      	bls.n	801101e <USB_EPStartXfer+0xa2e>
 8010fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fe2:	095b      	lsrs	r3, r3, #5
 8010fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fe8:	221f      	movs	r2, #31
 8010fea:	4013      	ands	r3, r2
 8010fec:	d102      	bne.n	8010ff4 <USB_EPStartXfer+0xa04>
 8010fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff0:	3b01      	subs	r3, #1
 8010ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	00db      	lsls	r3, r3, #3
 8010ffa:	4a13      	ldr	r2, [pc, #76]	; (8011048 <USB_EPStartXfer+0xa58>)
 8010ffc:	4694      	mov	ip, r2
 8010ffe:	4463      	add	r3, ip
 8011000:	685a      	ldr	r2, [r3, #4]
 8011002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011004:	069b      	lsls	r3, r3, #26
 8011006:	431a      	orrs	r2, r3
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	00db      	lsls	r3, r3, #3
 801100e:	490e      	ldr	r1, [pc, #56]	; (8011048 <USB_EPStartXfer+0xa58>)
 8011010:	468c      	mov	ip, r1
 8011012:	4463      	add	r3, ip
 8011014:	2180      	movs	r1, #128	; 0x80
 8011016:	0609      	lsls	r1, r1, #24
 8011018:	430a      	orrs	r2, r1
 801101a:	605a      	str	r2, [r3, #4]
 801101c:	e2d7      	b.n	80115ce <USB_EPStartXfer+0xfde>
 801101e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011020:	2b00      	cmp	r3, #0
 8011022:	d117      	bne.n	8011054 <USB_EPStartXfer+0xa64>
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	00db      	lsls	r3, r3, #3
 801102a:	4a07      	ldr	r2, [pc, #28]	; (8011048 <USB_EPStartXfer+0xa58>)
 801102c:	4694      	mov	ip, r2
 801102e:	4463      	add	r3, ip
 8011030:	685a      	ldr	r2, [r3, #4]
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	00db      	lsls	r3, r3, #3
 8011038:	4903      	ldr	r1, [pc, #12]	; (8011048 <USB_EPStartXfer+0xa58>)
 801103a:	468c      	mov	ip, r1
 801103c:	4463      	add	r3, ip
 801103e:	2180      	movs	r1, #128	; 0x80
 8011040:	0609      	lsls	r1, r1, #24
 8011042:	430a      	orrs	r2, r1
 8011044:	605a      	str	r2, [r3, #4]
 8011046:	e2c2      	b.n	80115ce <USB_EPStartXfer+0xfde>
 8011048:	40009800 	.word	0x40009800
 801104c:	07ff8fbf 	.word	0x07ff8fbf
 8011050:	00008080 	.word	0x00008080
 8011054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011056:	085b      	lsrs	r3, r3, #1
 8011058:	63bb      	str	r3, [r7, #56]	; 0x38
 801105a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801105c:	2201      	movs	r2, #1
 801105e:	4013      	ands	r3, r2
 8011060:	d002      	beq.n	8011068 <USB_EPStartXfer+0xa78>
 8011062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011064:	3301      	adds	r3, #1
 8011066:	63bb      	str	r3, [r7, #56]	; 0x38
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	00db      	lsls	r3, r3, #3
 801106e:	4ac4      	ldr	r2, [pc, #784]	; (8011380 <USB_EPStartXfer+0xd90>)
 8011070:	4694      	mov	ip, r2
 8011072:	4463      	add	r3, ip
 8011074:	6859      	ldr	r1, [r3, #4]
 8011076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011078:	069a      	lsls	r2, r3, #26
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	00db      	lsls	r3, r3, #3
 8011080:	48bf      	ldr	r0, [pc, #764]	; (8011380 <USB_EPStartXfer+0xd90>)
 8011082:	4684      	mov	ip, r0
 8011084:	4463      	add	r3, ip
 8011086:	430a      	orrs	r2, r1
 8011088:	605a      	str	r2, [r3, #4]
 801108a:	e2a0      	b.n	80115ce <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	78db      	ldrb	r3, [r3, #3]
 8011090:	2b02      	cmp	r3, #2
 8011092:	d000      	beq.n	8011096 <USB_EPStartXfer+0xaa6>
 8011094:	e15f      	b.n	8011356 <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	785b      	ldrb	r3, [r3, #1]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d168      	bne.n	8011170 <USB_EPStartXfer+0xb80>
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	00db      	lsls	r3, r3, #3
 80110a4:	4ab6      	ldr	r2, [pc, #728]	; (8011380 <USB_EPStartXfer+0xd90>)
 80110a6:	4694      	mov	ip, r2
 80110a8:	4463      	add	r3, ip
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	00db      	lsls	r3, r3, #3
 80110b2:	49b3      	ldr	r1, [pc, #716]	; (8011380 <USB_EPStartXfer+0xd90>)
 80110b4:	468c      	mov	ip, r1
 80110b6:	4463      	add	r3, ip
 80110b8:	0192      	lsls	r2, r2, #6
 80110ba:	0992      	lsrs	r2, r2, #6
 80110bc:	601a      	str	r2, [r3, #0]
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	691b      	ldr	r3, [r3, #16]
 80110c2:	2b3e      	cmp	r3, #62	; 0x3e
 80110c4:	d920      	bls.n	8011108 <USB_EPStartXfer+0xb18>
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	691b      	ldr	r3, [r3, #16]
 80110ca:	095b      	lsrs	r3, r3, #5
 80110cc:	637b      	str	r3, [r7, #52]	; 0x34
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	691b      	ldr	r3, [r3, #16]
 80110d2:	221f      	movs	r2, #31
 80110d4:	4013      	ands	r3, r2
 80110d6:	d102      	bne.n	80110de <USB_EPStartXfer+0xaee>
 80110d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110da:	3b01      	subs	r3, #1
 80110dc:	637b      	str	r3, [r7, #52]	; 0x34
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	00db      	lsls	r3, r3, #3
 80110e4:	4aa6      	ldr	r2, [pc, #664]	; (8011380 <USB_EPStartXfer+0xd90>)
 80110e6:	4694      	mov	ip, r2
 80110e8:	4463      	add	r3, ip
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ee:	069b      	lsls	r3, r3, #26
 80110f0:	431a      	orrs	r2, r3
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	00db      	lsls	r3, r3, #3
 80110f8:	49a1      	ldr	r1, [pc, #644]	; (8011380 <USB_EPStartXfer+0xd90>)
 80110fa:	468c      	mov	ip, r1
 80110fc:	4463      	add	r3, ip
 80110fe:	2180      	movs	r1, #128	; 0x80
 8011100:	0609      	lsls	r1, r1, #24
 8011102:	430a      	orrs	r2, r1
 8011104:	601a      	str	r2, [r3, #0]
 8011106:	e059      	b.n	80111bc <USB_EPStartXfer+0xbcc>
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	691b      	ldr	r3, [r3, #16]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d111      	bne.n	8011134 <USB_EPStartXfer+0xb44>
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	00db      	lsls	r3, r3, #3
 8011116:	4a9a      	ldr	r2, [pc, #616]	; (8011380 <USB_EPStartXfer+0xd90>)
 8011118:	4694      	mov	ip, r2
 801111a:	4463      	add	r3, ip
 801111c:	681a      	ldr	r2, [r3, #0]
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	00db      	lsls	r3, r3, #3
 8011124:	4996      	ldr	r1, [pc, #600]	; (8011380 <USB_EPStartXfer+0xd90>)
 8011126:	468c      	mov	ip, r1
 8011128:	4463      	add	r3, ip
 801112a:	2180      	movs	r1, #128	; 0x80
 801112c:	0609      	lsls	r1, r1, #24
 801112e:	430a      	orrs	r2, r1
 8011130:	601a      	str	r2, [r3, #0]
 8011132:	e043      	b.n	80111bc <USB_EPStartXfer+0xbcc>
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	691b      	ldr	r3, [r3, #16]
 8011138:	085b      	lsrs	r3, r3, #1
 801113a:	637b      	str	r3, [r7, #52]	; 0x34
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	691b      	ldr	r3, [r3, #16]
 8011140:	2201      	movs	r2, #1
 8011142:	4013      	ands	r3, r2
 8011144:	d002      	beq.n	801114c <USB_EPStartXfer+0xb5c>
 8011146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011148:	3301      	adds	r3, #1
 801114a:	637b      	str	r3, [r7, #52]	; 0x34
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	00db      	lsls	r3, r3, #3
 8011152:	4a8b      	ldr	r2, [pc, #556]	; (8011380 <USB_EPStartXfer+0xd90>)
 8011154:	4694      	mov	ip, r2
 8011156:	4463      	add	r3, ip
 8011158:	6819      	ldr	r1, [r3, #0]
 801115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115c:	069a      	lsls	r2, r3, #26
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	00db      	lsls	r3, r3, #3
 8011164:	4886      	ldr	r0, [pc, #536]	; (8011380 <USB_EPStartXfer+0xd90>)
 8011166:	4684      	mov	ip, r0
 8011168:	4463      	add	r3, ip
 801116a:	430a      	orrs	r2, r1
 801116c:	601a      	str	r2, [r3, #0]
 801116e:	e025      	b.n	80111bc <USB_EPStartXfer+0xbcc>
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	785b      	ldrb	r3, [r3, #1]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d121      	bne.n	80111bc <USB_EPStartXfer+0xbcc>
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	00db      	lsls	r3, r3, #3
 801117e:	4a80      	ldr	r2, [pc, #512]	; (8011380 <USB_EPStartXfer+0xd90>)
 8011180:	4694      	mov	ip, r2
 8011182:	4463      	add	r3, ip
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	00db      	lsls	r3, r3, #3
 801118c:	497c      	ldr	r1, [pc, #496]	; (8011380 <USB_EPStartXfer+0xd90>)
 801118e:	468c      	mov	ip, r1
 8011190:	4463      	add	r3, ip
 8011192:	0412      	lsls	r2, r2, #16
 8011194:	0c12      	lsrs	r2, r2, #16
 8011196:	601a      	str	r2, [r3, #0]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	00db      	lsls	r3, r3, #3
 801119e:	4a78      	ldr	r2, [pc, #480]	; (8011380 <USB_EPStartXfer+0xd90>)
 80111a0:	4694      	mov	ip, r2
 80111a2:	4463      	add	r3, ip
 80111a4:	6819      	ldr	r1, [r3, #0]
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	691b      	ldr	r3, [r3, #16]
 80111aa:	041a      	lsls	r2, r3, #16
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	00db      	lsls	r3, r3, #3
 80111b2:	4873      	ldr	r0, [pc, #460]	; (8011380 <USB_EPStartXfer+0xd90>)
 80111b4:	4684      	mov	ip, r0
 80111b6:	4463      	add	r3, ip
 80111b8:	430a      	orrs	r2, r1
 80111ba:	601a      	str	r2, [r3, #0]
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	785b      	ldrb	r3, [r3, #1]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d168      	bne.n	8011296 <USB_EPStartXfer+0xca6>
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	00db      	lsls	r3, r3, #3
 80111ca:	4a6d      	ldr	r2, [pc, #436]	; (8011380 <USB_EPStartXfer+0xd90>)
 80111cc:	4694      	mov	ip, r2
 80111ce:	4463      	add	r3, ip
 80111d0:	685a      	ldr	r2, [r3, #4]
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	4969      	ldr	r1, [pc, #420]	; (8011380 <USB_EPStartXfer+0xd90>)
 80111da:	468c      	mov	ip, r1
 80111dc:	4463      	add	r3, ip
 80111de:	0192      	lsls	r2, r2, #6
 80111e0:	0992      	lsrs	r2, r2, #6
 80111e2:	605a      	str	r2, [r3, #4]
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	691b      	ldr	r3, [r3, #16]
 80111e8:	2b3e      	cmp	r3, #62	; 0x3e
 80111ea:	d920      	bls.n	801122e <USB_EPStartXfer+0xc3e>
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	691b      	ldr	r3, [r3, #16]
 80111f0:	095b      	lsrs	r3, r3, #5
 80111f2:	633b      	str	r3, [r7, #48]	; 0x30
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	691b      	ldr	r3, [r3, #16]
 80111f8:	221f      	movs	r2, #31
 80111fa:	4013      	ands	r3, r2
 80111fc:	d102      	bne.n	8011204 <USB_EPStartXfer+0xc14>
 80111fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011200:	3b01      	subs	r3, #1
 8011202:	633b      	str	r3, [r7, #48]	; 0x30
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	00db      	lsls	r3, r3, #3
 801120a:	4a5d      	ldr	r2, [pc, #372]	; (8011380 <USB_EPStartXfer+0xd90>)
 801120c:	4694      	mov	ip, r2
 801120e:	4463      	add	r3, ip
 8011210:	685a      	ldr	r2, [r3, #4]
 8011212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011214:	069b      	lsls	r3, r3, #26
 8011216:	431a      	orrs	r2, r3
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	00db      	lsls	r3, r3, #3
 801121e:	4958      	ldr	r1, [pc, #352]	; (8011380 <USB_EPStartXfer+0xd90>)
 8011220:	468c      	mov	ip, r1
 8011222:	4463      	add	r3, ip
 8011224:	2180      	movs	r1, #128	; 0x80
 8011226:	0609      	lsls	r1, r1, #24
 8011228:	430a      	orrs	r2, r1
 801122a:	605a      	str	r2, [r3, #4]
 801122c:	e059      	b.n	80112e2 <USB_EPStartXfer+0xcf2>
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	691b      	ldr	r3, [r3, #16]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d111      	bne.n	801125a <USB_EPStartXfer+0xc6a>
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	00db      	lsls	r3, r3, #3
 801123c:	4a50      	ldr	r2, [pc, #320]	; (8011380 <USB_EPStartXfer+0xd90>)
 801123e:	4694      	mov	ip, r2
 8011240:	4463      	add	r3, ip
 8011242:	685a      	ldr	r2, [r3, #4]
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	00db      	lsls	r3, r3, #3
 801124a:	494d      	ldr	r1, [pc, #308]	; (8011380 <USB_EPStartXfer+0xd90>)
 801124c:	468c      	mov	ip, r1
 801124e:	4463      	add	r3, ip
 8011250:	2180      	movs	r1, #128	; 0x80
 8011252:	0609      	lsls	r1, r1, #24
 8011254:	430a      	orrs	r2, r1
 8011256:	605a      	str	r2, [r3, #4]
 8011258:	e043      	b.n	80112e2 <USB_EPStartXfer+0xcf2>
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	691b      	ldr	r3, [r3, #16]
 801125e:	085b      	lsrs	r3, r3, #1
 8011260:	633b      	str	r3, [r7, #48]	; 0x30
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	691b      	ldr	r3, [r3, #16]
 8011266:	2201      	movs	r2, #1
 8011268:	4013      	ands	r3, r2
 801126a:	d002      	beq.n	8011272 <USB_EPStartXfer+0xc82>
 801126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126e:	3301      	adds	r3, #1
 8011270:	633b      	str	r3, [r7, #48]	; 0x30
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	4a41      	ldr	r2, [pc, #260]	; (8011380 <USB_EPStartXfer+0xd90>)
 801127a:	4694      	mov	ip, r2
 801127c:	4463      	add	r3, ip
 801127e:	6859      	ldr	r1, [r3, #4]
 8011280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011282:	069a      	lsls	r2, r3, #26
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	00db      	lsls	r3, r3, #3
 801128a:	483d      	ldr	r0, [pc, #244]	; (8011380 <USB_EPStartXfer+0xd90>)
 801128c:	4684      	mov	ip, r0
 801128e:	4463      	add	r3, ip
 8011290:	430a      	orrs	r2, r1
 8011292:	605a      	str	r2, [r3, #4]
 8011294:	e025      	b.n	80112e2 <USB_EPStartXfer+0xcf2>
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	785b      	ldrb	r3, [r3, #1]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d121      	bne.n	80112e2 <USB_EPStartXfer+0xcf2>
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	781b      	ldrb	r3, [r3, #0]
 80112a2:	00db      	lsls	r3, r3, #3
 80112a4:	4a36      	ldr	r2, [pc, #216]	; (8011380 <USB_EPStartXfer+0xd90>)
 80112a6:	4694      	mov	ip, r2
 80112a8:	4463      	add	r3, ip
 80112aa:	685a      	ldr	r2, [r3, #4]
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	00db      	lsls	r3, r3, #3
 80112b2:	4933      	ldr	r1, [pc, #204]	; (8011380 <USB_EPStartXfer+0xd90>)
 80112b4:	468c      	mov	ip, r1
 80112b6:	4463      	add	r3, ip
 80112b8:	0412      	lsls	r2, r2, #16
 80112ba:	0c12      	lsrs	r2, r2, #16
 80112bc:	605a      	str	r2, [r3, #4]
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	00db      	lsls	r3, r3, #3
 80112c4:	4a2e      	ldr	r2, [pc, #184]	; (8011380 <USB_EPStartXfer+0xd90>)
 80112c6:	4694      	mov	ip, r2
 80112c8:	4463      	add	r3, ip
 80112ca:	6859      	ldr	r1, [r3, #4]
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	041a      	lsls	r2, r3, #16
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	4829      	ldr	r0, [pc, #164]	; (8011380 <USB_EPStartXfer+0xd90>)
 80112da:	4684      	mov	ip, r0
 80112dc:	4463      	add	r3, ip
 80112de:	430a      	orrs	r2, r1
 80112e0:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	69db      	ldr	r3, [r3, #28]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d100      	bne.n	80112ec <USB_EPStartXfer+0xcfc>
 80112ea:	e170      	b.n	80115ce <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	18d3      	adds	r3, r2, r3
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	2126      	movs	r1, #38	; 0x26
 80112fa:	187b      	adds	r3, r7, r1
 80112fc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80112fe:	187b      	adds	r3, r7, r1
 8011300:	881a      	ldrh	r2, [r3, #0]
 8011302:	2380      	movs	r3, #128	; 0x80
 8011304:	01db      	lsls	r3, r3, #7
 8011306:	4013      	ands	r3, r2
 8011308:	d004      	beq.n	8011314 <USB_EPStartXfer+0xd24>
 801130a:	187b      	adds	r3, r7, r1
 801130c:	881b      	ldrh	r3, [r3, #0]
 801130e:	2240      	movs	r2, #64	; 0x40
 8011310:	4013      	ands	r3, r2
 8011312:	d10d      	bne.n	8011330 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011314:	2126      	movs	r1, #38	; 0x26
 8011316:	187b      	adds	r3, r7, r1
 8011318:	881a      	ldrh	r2, [r3, #0]
 801131a:	2380      	movs	r3, #128	; 0x80
 801131c:	01db      	lsls	r3, r3, #7
 801131e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011320:	d000      	beq.n	8011324 <USB_EPStartXfer+0xd34>
 8011322:	e154      	b.n	80115ce <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011324:	187b      	adds	r3, r7, r1
 8011326:	881b      	ldrh	r3, [r3, #0]
 8011328:	2240      	movs	r2, #64	; 0x40
 801132a:	4013      	ands	r3, r2
 801132c:	d000      	beq.n	8011330 <USB_EPStartXfer+0xd40>
 801132e:	e14e      	b.n	80115ce <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	18d3      	adds	r3, r2, r3
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a11      	ldr	r2, [pc, #68]	; (8011384 <USB_EPStartXfer+0xd94>)
 801133e:	4013      	ands	r3, r2
 8011340:	623b      	str	r3, [r7, #32]
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	18d3      	adds	r3, r2, r3
 801134c:	6a3a      	ldr	r2, [r7, #32]
 801134e:	490e      	ldr	r1, [pc, #56]	; (8011388 <USB_EPStartXfer+0xd98>)
 8011350:	430a      	orrs	r2, r1
 8011352:	601a      	str	r2, [r3, #0]
 8011354:	e13b      	b.n	80115ce <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	78db      	ldrb	r3, [r3, #3]
 801135a:	2b01      	cmp	r3, #1
 801135c:	d000      	beq.n	8011360 <USB_EPStartXfer+0xd70>
 801135e:	e134      	b.n	80115ca <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	699a      	ldr	r2, [r3, #24]
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	691b      	ldr	r3, [r3, #16]
 8011368:	429a      	cmp	r2, r3
 801136a:	d90f      	bls.n	801138c <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	691b      	ldr	r3, [r3, #16]
 8011370:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	699a      	ldr	r2, [r3, #24]
 8011376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011378:	1ad2      	subs	r2, r2, r3
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	619a      	str	r2, [r3, #24]
 801137e:	e00b      	b.n	8011398 <USB_EPStartXfer+0xda8>
 8011380:	40009800 	.word	0x40009800
 8011384:	07ff8f8f 	.word	0x07ff8f8f
 8011388:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	699b      	ldr	r3, [r3, #24]
 8011390:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	2200      	movs	r2, #0
 8011396:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	785b      	ldrb	r3, [r3, #1]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d162      	bne.n	8011466 <USB_EPStartXfer+0xe76>
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	00db      	lsls	r3, r3, #3
 80113a6:	4a9a      	ldr	r2, [pc, #616]	; (8011610 <USB_EPStartXfer+0x1020>)
 80113a8:	4694      	mov	ip, r2
 80113aa:	4463      	add	r3, ip
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	00db      	lsls	r3, r3, #3
 80113b4:	4996      	ldr	r1, [pc, #600]	; (8011610 <USB_EPStartXfer+0x1020>)
 80113b6:	468c      	mov	ip, r1
 80113b8:	4463      	add	r3, ip
 80113ba:	0192      	lsls	r2, r2, #6
 80113bc:	0992      	lsrs	r2, r2, #6
 80113be:	601a      	str	r2, [r3, #0]
 80113c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113c2:	2b3e      	cmp	r3, #62	; 0x3e
 80113c4:	d91e      	bls.n	8011404 <USB_EPStartXfer+0xe14>
 80113c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113c8:	095b      	lsrs	r3, r3, #5
 80113ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113ce:	221f      	movs	r2, #31
 80113d0:	4013      	ands	r3, r2
 80113d2:	d102      	bne.n	80113da <USB_EPStartXfer+0xdea>
 80113d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d6:	3b01      	subs	r3, #1
 80113d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	00db      	lsls	r3, r3, #3
 80113e0:	4a8b      	ldr	r2, [pc, #556]	; (8011610 <USB_EPStartXfer+0x1020>)
 80113e2:	4694      	mov	ip, r2
 80113e4:	4463      	add	r3, ip
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ea:	069b      	lsls	r3, r3, #26
 80113ec:	431a      	orrs	r2, r3
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	00db      	lsls	r3, r3, #3
 80113f4:	4986      	ldr	r1, [pc, #536]	; (8011610 <USB_EPStartXfer+0x1020>)
 80113f6:	468c      	mov	ip, r1
 80113f8:	4463      	add	r3, ip
 80113fa:	2180      	movs	r1, #128	; 0x80
 80113fc:	0609      	lsls	r1, r1, #24
 80113fe:	430a      	orrs	r2, r1
 8011400:	601a      	str	r2, [r3, #0]
 8011402:	e055      	b.n	80114b0 <USB_EPStartXfer+0xec0>
 8011404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011406:	2b00      	cmp	r3, #0
 8011408:	d111      	bne.n	801142e <USB_EPStartXfer+0xe3e>
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	00db      	lsls	r3, r3, #3
 8011410:	4a7f      	ldr	r2, [pc, #508]	; (8011610 <USB_EPStartXfer+0x1020>)
 8011412:	4694      	mov	ip, r2
 8011414:	4463      	add	r3, ip
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	00db      	lsls	r3, r3, #3
 801141e:	497c      	ldr	r1, [pc, #496]	; (8011610 <USB_EPStartXfer+0x1020>)
 8011420:	468c      	mov	ip, r1
 8011422:	4463      	add	r3, ip
 8011424:	2180      	movs	r1, #128	; 0x80
 8011426:	0609      	lsls	r1, r1, #24
 8011428:	430a      	orrs	r2, r1
 801142a:	601a      	str	r2, [r3, #0]
 801142c:	e040      	b.n	80114b0 <USB_EPStartXfer+0xec0>
 801142e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011430:	085b      	lsrs	r3, r3, #1
 8011432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011436:	2201      	movs	r2, #1
 8011438:	4013      	ands	r3, r2
 801143a:	d002      	beq.n	8011442 <USB_EPStartXfer+0xe52>
 801143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143e:	3301      	adds	r3, #1
 8011440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	00db      	lsls	r3, r3, #3
 8011448:	4a71      	ldr	r2, [pc, #452]	; (8011610 <USB_EPStartXfer+0x1020>)
 801144a:	4694      	mov	ip, r2
 801144c:	4463      	add	r3, ip
 801144e:	6819      	ldr	r1, [r3, #0]
 8011450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011452:	069a      	lsls	r2, r3, #26
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	486d      	ldr	r0, [pc, #436]	; (8011610 <USB_EPStartXfer+0x1020>)
 801145c:	4684      	mov	ip, r0
 801145e:	4463      	add	r3, ip
 8011460:	430a      	orrs	r2, r1
 8011462:	601a      	str	r2, [r3, #0]
 8011464:	e024      	b.n	80114b0 <USB_EPStartXfer+0xec0>
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	785b      	ldrb	r3, [r3, #1]
 801146a:	2b01      	cmp	r3, #1
 801146c:	d120      	bne.n	80114b0 <USB_EPStartXfer+0xec0>
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	00db      	lsls	r3, r3, #3
 8011474:	4a66      	ldr	r2, [pc, #408]	; (8011610 <USB_EPStartXfer+0x1020>)
 8011476:	4694      	mov	ip, r2
 8011478:	4463      	add	r3, ip
 801147a:	681a      	ldr	r2, [r3, #0]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	00db      	lsls	r3, r3, #3
 8011482:	4963      	ldr	r1, [pc, #396]	; (8011610 <USB_EPStartXfer+0x1020>)
 8011484:	468c      	mov	ip, r1
 8011486:	4463      	add	r3, ip
 8011488:	0412      	lsls	r2, r2, #16
 801148a:	0c12      	lsrs	r2, r2, #16
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	00db      	lsls	r3, r3, #3
 8011494:	4a5e      	ldr	r2, [pc, #376]	; (8011610 <USB_EPStartXfer+0x1020>)
 8011496:	4694      	mov	ip, r2
 8011498:	4463      	add	r3, ip
 801149a:	6819      	ldr	r1, [r3, #0]
 801149c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801149e:	041a      	lsls	r2, r3, #16
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	00db      	lsls	r3, r3, #3
 80114a6:	485a      	ldr	r0, [pc, #360]	; (8011610 <USB_EPStartXfer+0x1020>)
 80114a8:	4684      	mov	ip, r0
 80114aa:	4463      	add	r3, ip
 80114ac:	430a      	orrs	r2, r1
 80114ae:	601a      	str	r2, [r3, #0]
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	785b      	ldrb	r3, [r3, #1]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d162      	bne.n	801157e <USB_EPStartXfer+0xf8e>
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	00db      	lsls	r3, r3, #3
 80114be:	4a54      	ldr	r2, [pc, #336]	; (8011610 <USB_EPStartXfer+0x1020>)
 80114c0:	4694      	mov	ip, r2
 80114c2:	4463      	add	r3, ip
 80114c4:	685a      	ldr	r2, [r3, #4]
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	00db      	lsls	r3, r3, #3
 80114cc:	4950      	ldr	r1, [pc, #320]	; (8011610 <USB_EPStartXfer+0x1020>)
 80114ce:	468c      	mov	ip, r1
 80114d0:	4463      	add	r3, ip
 80114d2:	0192      	lsls	r2, r2, #6
 80114d4:	0992      	lsrs	r2, r2, #6
 80114d6:	605a      	str	r2, [r3, #4]
 80114d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114da:	2b3e      	cmp	r3, #62	; 0x3e
 80114dc:	d91e      	bls.n	801151c <USB_EPStartXfer+0xf2c>
 80114de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114e0:	095b      	lsrs	r3, r3, #5
 80114e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80114e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114e6:	221f      	movs	r2, #31
 80114e8:	4013      	ands	r3, r2
 80114ea:	d102      	bne.n	80114f2 <USB_EPStartXfer+0xf02>
 80114ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ee:	3b01      	subs	r3, #1
 80114f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	00db      	lsls	r3, r3, #3
 80114f8:	4a45      	ldr	r2, [pc, #276]	; (8011610 <USB_EPStartXfer+0x1020>)
 80114fa:	4694      	mov	ip, r2
 80114fc:	4463      	add	r3, ip
 80114fe:	685a      	ldr	r2, [r3, #4]
 8011500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011502:	069b      	lsls	r3, r3, #26
 8011504:	431a      	orrs	r2, r3
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	00db      	lsls	r3, r3, #3
 801150c:	4940      	ldr	r1, [pc, #256]	; (8011610 <USB_EPStartXfer+0x1020>)
 801150e:	468c      	mov	ip, r1
 8011510:	4463      	add	r3, ip
 8011512:	2180      	movs	r1, #128	; 0x80
 8011514:	0609      	lsls	r1, r1, #24
 8011516:	430a      	orrs	r2, r1
 8011518:	605a      	str	r2, [r3, #4]
 801151a:	e058      	b.n	80115ce <USB_EPStartXfer+0xfde>
 801151c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801151e:	2b00      	cmp	r3, #0
 8011520:	d111      	bne.n	8011546 <USB_EPStartXfer+0xf56>
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	00db      	lsls	r3, r3, #3
 8011528:	4a39      	ldr	r2, [pc, #228]	; (8011610 <USB_EPStartXfer+0x1020>)
 801152a:	4694      	mov	ip, r2
 801152c:	4463      	add	r3, ip
 801152e:	685a      	ldr	r2, [r3, #4]
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	00db      	lsls	r3, r3, #3
 8011536:	4936      	ldr	r1, [pc, #216]	; (8011610 <USB_EPStartXfer+0x1020>)
 8011538:	468c      	mov	ip, r1
 801153a:	4463      	add	r3, ip
 801153c:	2180      	movs	r1, #128	; 0x80
 801153e:	0609      	lsls	r1, r1, #24
 8011540:	430a      	orrs	r2, r1
 8011542:	605a      	str	r2, [r3, #4]
 8011544:	e043      	b.n	80115ce <USB_EPStartXfer+0xfde>
 8011546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011548:	085b      	lsrs	r3, r3, #1
 801154a:	62bb      	str	r3, [r7, #40]	; 0x28
 801154c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801154e:	2201      	movs	r2, #1
 8011550:	4013      	ands	r3, r2
 8011552:	d002      	beq.n	801155a <USB_EPStartXfer+0xf6a>
 8011554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011556:	3301      	adds	r3, #1
 8011558:	62bb      	str	r3, [r7, #40]	; 0x28
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	4a2b      	ldr	r2, [pc, #172]	; (8011610 <USB_EPStartXfer+0x1020>)
 8011562:	4694      	mov	ip, r2
 8011564:	4463      	add	r3, ip
 8011566:	6859      	ldr	r1, [r3, #4]
 8011568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156a:	069a      	lsls	r2, r3, #26
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	00db      	lsls	r3, r3, #3
 8011572:	4827      	ldr	r0, [pc, #156]	; (8011610 <USB_EPStartXfer+0x1020>)
 8011574:	4684      	mov	ip, r0
 8011576:	4463      	add	r3, ip
 8011578:	430a      	orrs	r2, r1
 801157a:	605a      	str	r2, [r3, #4]
 801157c:	e027      	b.n	80115ce <USB_EPStartXfer+0xfde>
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	785b      	ldrb	r3, [r3, #1]
 8011582:	2b01      	cmp	r3, #1
 8011584:	d123      	bne.n	80115ce <USB_EPStartXfer+0xfde>
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	00db      	lsls	r3, r3, #3
 801158c:	4a20      	ldr	r2, [pc, #128]	; (8011610 <USB_EPStartXfer+0x1020>)
 801158e:	4694      	mov	ip, r2
 8011590:	4463      	add	r3, ip
 8011592:	685a      	ldr	r2, [r3, #4]
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	00db      	lsls	r3, r3, #3
 801159a:	491d      	ldr	r1, [pc, #116]	; (8011610 <USB_EPStartXfer+0x1020>)
 801159c:	468c      	mov	ip, r1
 801159e:	4463      	add	r3, ip
 80115a0:	0412      	lsls	r2, r2, #16
 80115a2:	0c12      	lsrs	r2, r2, #16
 80115a4:	605a      	str	r2, [r3, #4]
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	00db      	lsls	r3, r3, #3
 80115ac:	4a18      	ldr	r2, [pc, #96]	; (8011610 <USB_EPStartXfer+0x1020>)
 80115ae:	4694      	mov	ip, r2
 80115b0:	4463      	add	r3, ip
 80115b2:	6859      	ldr	r1, [r3, #4]
 80115b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115b6:	041a      	lsls	r2, r3, #16
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	00db      	lsls	r3, r3, #3
 80115be:	4814      	ldr	r0, [pc, #80]	; (8011610 <USB_EPStartXfer+0x1020>)
 80115c0:	4684      	mov	ip, r0
 80115c2:	4463      	add	r3, ip
 80115c4:	430a      	orrs	r2, r1
 80115c6:	605a      	str	r2, [r3, #4]
 80115c8:	e001      	b.n	80115ce <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 80115ca:	2301      	movs	r3, #1
 80115cc:	e01c      	b.n	8011608 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	18d3      	adds	r3, r2, r3
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	4a0e      	ldr	r2, [pc, #56]	; (8011614 <USB_EPStartXfer+0x1024>)
 80115dc:	4013      	ands	r3, r2
 80115de:	61fb      	str	r3, [r7, #28]
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	2280      	movs	r2, #128	; 0x80
 80115e4:	0152      	lsls	r2, r2, #5
 80115e6:	4053      	eors	r3, r2
 80115e8:	61fb      	str	r3, [r7, #28]
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	2280      	movs	r2, #128	; 0x80
 80115ee:	0192      	lsls	r2, r2, #6
 80115f0:	4053      	eors	r3, r2
 80115f2:	61fb      	str	r3, [r7, #28]
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	18d3      	adds	r3, r2, r3
 80115fe:	69fa      	ldr	r2, [r7, #28]
 8011600:	4905      	ldr	r1, [pc, #20]	; (8011618 <USB_EPStartXfer+0x1028>)
 8011602:	430a      	orrs	r2, r1
 8011604:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8011606:	2300      	movs	r3, #0
}
 8011608:	0018      	movs	r0, r3
 801160a:	46bd      	mov	sp, r7
 801160c:	b017      	add	sp, #92	; 0x5c
 801160e:	bd90      	pop	{r4, r7, pc}
 8011610:	40009800 	.word	0x40009800
 8011614:	07ffbf8f 	.word	0x07ffbf8f
 8011618:	00008080 	.word	0x00008080

0801161c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b084      	sub	sp, #16
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	785b      	ldrb	r3, [r3, #1]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d016      	beq.n	801165c <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801162e:	687a      	ldr	r2, [r7, #4]
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	18d3      	adds	r3, r2, r3
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4a16      	ldr	r2, [pc, #88]	; (8011694 <USB_EPSetStall+0x78>)
 801163c:	4013      	ands	r3, r2
 801163e:	60bb      	str	r3, [r7, #8]
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2210      	movs	r2, #16
 8011644:	4053      	eors	r3, r2
 8011646:	60bb      	str	r3, [r7, #8]
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	009b      	lsls	r3, r3, #2
 8011650:	18d3      	adds	r3, r2, r3
 8011652:	68ba      	ldr	r2, [r7, #8]
 8011654:	4910      	ldr	r1, [pc, #64]	; (8011698 <USB_EPSetStall+0x7c>)
 8011656:	430a      	orrs	r2, r1
 8011658:	601a      	str	r2, [r3, #0]
 801165a:	e016      	b.n	801168a <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	18d3      	adds	r3, r2, r3
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4a0c      	ldr	r2, [pc, #48]	; (801169c <USB_EPSetStall+0x80>)
 801166a:	4013      	ands	r3, r2
 801166c:	60fb      	str	r3, [r7, #12]
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2280      	movs	r2, #128	; 0x80
 8011672:	0152      	lsls	r2, r2, #5
 8011674:	4053      	eors	r3, r2
 8011676:	60fb      	str	r3, [r7, #12]
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	009b      	lsls	r3, r3, #2
 8011680:	18d3      	adds	r3, r2, r3
 8011682:	68fa      	ldr	r2, [r7, #12]
 8011684:	4904      	ldr	r1, [pc, #16]	; (8011698 <USB_EPSetStall+0x7c>)
 8011686:	430a      	orrs	r2, r1
 8011688:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801168a:	2300      	movs	r3, #0
}
 801168c:	0018      	movs	r0, r3
 801168e:	46bd      	mov	sp, r7
 8011690:	b004      	add	sp, #16
 8011692:	bd80      	pop	{r7, pc}
 8011694:	07ff8fbf 	.word	0x07ff8fbf
 8011698:	00008080 	.word	0x00008080
 801169c:	07ffbf8f 	.word	0x07ffbf8f

080116a0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b088      	sub	sp, #32
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
 80116a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	7b1b      	ldrb	r3, [r3, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d000      	beq.n	80116b4 <USB_EPClearStall+0x14>
 80116b2:	e075      	b.n	80117a0 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	785b      	ldrb	r3, [r3, #1]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d037      	beq.n	801172c <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	18d3      	adds	r3, r2, r3
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	613b      	str	r3, [r7, #16]
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	2240      	movs	r2, #64	; 0x40
 80116ce:	4013      	ands	r3, r2
 80116d0:	d011      	beq.n	80116f6 <USB_EPClearStall+0x56>
 80116d2:	687a      	ldr	r2, [r7, #4]
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	18d3      	adds	r3, r2, r3
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	4a33      	ldr	r2, [pc, #204]	; (80117ac <USB_EPClearStall+0x10c>)
 80116e0:	4013      	ands	r3, r2
 80116e2:	60fb      	str	r3, [r7, #12]
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	009b      	lsls	r3, r3, #2
 80116ec:	18d3      	adds	r3, r2, r3
 80116ee:	68fa      	ldr	r2, [r7, #12]
 80116f0:	492f      	ldr	r1, [pc, #188]	; (80117b0 <USB_EPClearStall+0x110>)
 80116f2:	430a      	orrs	r2, r1
 80116f4:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	78db      	ldrb	r3, [r3, #3]
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d050      	beq.n	80117a0 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	009b      	lsls	r3, r3, #2
 8011706:	18d3      	adds	r3, r2, r3
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	4a2a      	ldr	r2, [pc, #168]	; (80117b4 <USB_EPClearStall+0x114>)
 801170c:	4013      	ands	r3, r2
 801170e:	60bb      	str	r3, [r7, #8]
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	2220      	movs	r2, #32
 8011714:	4053      	eors	r3, r2
 8011716:	60bb      	str	r3, [r7, #8]
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	18d3      	adds	r3, r2, r3
 8011722:	68ba      	ldr	r2, [r7, #8]
 8011724:	4924      	ldr	r1, [pc, #144]	; (80117b8 <USB_EPClearStall+0x118>)
 8011726:	430a      	orrs	r2, r1
 8011728:	601a      	str	r2, [r3, #0]
 801172a:	e039      	b.n	80117a0 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	009b      	lsls	r3, r3, #2
 8011734:	18d3      	adds	r3, r2, r3
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	61fb      	str	r3, [r7, #28]
 801173a:	69fa      	ldr	r2, [r7, #28]
 801173c:	2380      	movs	r3, #128	; 0x80
 801173e:	01db      	lsls	r3, r3, #7
 8011740:	4013      	ands	r3, r2
 8011742:	d011      	beq.n	8011768 <USB_EPClearStall+0xc8>
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	18d3      	adds	r3, r2, r3
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4a16      	ldr	r2, [pc, #88]	; (80117ac <USB_EPClearStall+0x10c>)
 8011752:	4013      	ands	r3, r2
 8011754:	61bb      	str	r3, [r7, #24]
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	18d3      	adds	r3, r2, r3
 8011760:	69ba      	ldr	r2, [r7, #24]
 8011762:	4916      	ldr	r1, [pc, #88]	; (80117bc <USB_EPClearStall+0x11c>)
 8011764:	430a      	orrs	r2, r1
 8011766:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011768:	687a      	ldr	r2, [r7, #4]
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	18d3      	adds	r3, r2, r3
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	4a12      	ldr	r2, [pc, #72]	; (80117c0 <USB_EPClearStall+0x120>)
 8011776:	4013      	ands	r3, r2
 8011778:	617b      	str	r3, [r7, #20]
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	2280      	movs	r2, #128	; 0x80
 801177e:	0152      	lsls	r2, r2, #5
 8011780:	4053      	eors	r3, r2
 8011782:	617b      	str	r3, [r7, #20]
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	2280      	movs	r2, #128	; 0x80
 8011788:	0192      	lsls	r2, r2, #6
 801178a:	4053      	eors	r3, r2
 801178c:	617b      	str	r3, [r7, #20]
 801178e:	687a      	ldr	r2, [r7, #4]
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	18d3      	adds	r3, r2, r3
 8011798:	697a      	ldr	r2, [r7, #20]
 801179a:	4907      	ldr	r1, [pc, #28]	; (80117b8 <USB_EPClearStall+0x118>)
 801179c:	430a      	orrs	r2, r1
 801179e:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80117a0:	2300      	movs	r3, #0
}
 80117a2:	0018      	movs	r0, r3
 80117a4:	46bd      	mov	sp, r7
 80117a6:	b008      	add	sp, #32
 80117a8:	bd80      	pop	{r7, pc}
 80117aa:	46c0      	nop			; (mov r8, r8)
 80117ac:	07ff8f8f 	.word	0x07ff8f8f
 80117b0:	000080c0 	.word	0x000080c0
 80117b4:	07ff8fbf 	.word	0x07ff8fbf
 80117b8:	00008080 	.word	0x00008080
 80117bc:	0000c080 	.word	0x0000c080
 80117c0:	07ffbf8f 	.word	0x07ffbf8f

080117c4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	000a      	movs	r2, r1
 80117ce:	1cfb      	adds	r3, r7, #3
 80117d0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80117d2:	1cfb      	adds	r3, r7, #3
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d102      	bne.n	80117e0 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2280      	movs	r2, #128	; 0x80
 80117de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80117e0:	2300      	movs	r3, #0
}
 80117e2:	0018      	movs	r0, r3
 80117e4:	46bd      	mov	sp, r7
 80117e6:	b002      	add	sp, #8
 80117e8:	bd80      	pop	{r7, pc}

080117ea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 80117ea:	b580      	push	{r7, lr}
 80117ec:	b082      	sub	sp, #8
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117f6:	2280      	movs	r2, #128	; 0x80
 80117f8:	0212      	lsls	r2, r2, #8
 80117fa:	431a      	orrs	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011800:	2300      	movs	r3, #0
}
 8011802:	0018      	movs	r0, r3
 8011804:	46bd      	mov	sp, r7
 8011806:	b002      	add	sp, #8
 8011808:	bd80      	pop	{r7, pc}

0801180a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b084      	sub	sp, #16
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011816:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011818:	68fb      	ldr	r3, [r7, #12]
}
 801181a:	0018      	movs	r0, r3
 801181c:	46bd      	mov	sp, r7
 801181e:	b004      	add	sp, #16
 8011820:	bd80      	pop	{r7, pc}
	...

08011824 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b08a      	sub	sp, #40	; 0x28
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	0019      	movs	r1, r3
 8011830:	1dbb      	adds	r3, r7, #6
 8011832:	801a      	strh	r2, [r3, #0]
 8011834:	1d3b      	adds	r3, r7, #4
 8011836:	1c0a      	adds	r2, r1, #0
 8011838:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 801183a:	1d3b      	adds	r3, r7, #4
 801183c:	881b      	ldrh	r3, [r3, #0]
 801183e:	3303      	adds	r3, #3
 8011840:	089b      	lsrs	r3, r3, #2
 8011842:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8011844:	2016      	movs	r0, #22
 8011846:	183b      	adds	r3, r7, r0
 8011848:	1d3a      	adds	r2, r7, #4
 801184a:	8812      	ldrh	r2, [r2, #0]
 801184c:	2103      	movs	r1, #3
 801184e:	400a      	ands	r2, r1
 8011850:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8011856:	183b      	adds	r3, r7, r0
 8011858:	881b      	ldrh	r3, [r3, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d002      	beq.n	8011864 <USB_WritePMA+0x40>
  {
    NbWords--;
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	3b01      	subs	r3, #1
 8011862:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8011864:	1dbb      	adds	r3, r7, #6
 8011866:	881b      	ldrh	r3, [r3, #0]
 8011868:	4a28      	ldr	r2, [pc, #160]	; (801190c <USB_WritePMA+0xe8>)
 801186a:	4694      	mov	ip, r2
 801186c:	4463      	add	r3, ip
 801186e:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	623b      	str	r3, [r7, #32]
 8011874:	e01f      	b.n	80118b6 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	781a      	ldrb	r2, [r3, #0]
 801187a:	7859      	ldrb	r1, [r3, #1]
 801187c:	0209      	lsls	r1, r1, #8
 801187e:	430a      	orrs	r2, r1
 8011880:	7899      	ldrb	r1, [r3, #2]
 8011882:	0409      	lsls	r1, r1, #16
 8011884:	430a      	orrs	r2, r1
 8011886:	78db      	ldrb	r3, [r3, #3]
 8011888:	061b      	lsls	r3, r3, #24
 801188a:	4313      	orrs	r3, r2
 801188c:	001a      	movs	r2, r3
 801188e:	69fb      	ldr	r3, [r7, #28]
 8011890:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	3304      	adds	r3, #4
 8011896:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	3301      	adds	r3, #1
 801189c:	613b      	str	r3, [r7, #16]
    pBuf++;
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	3301      	adds	r3, #1
 80118a2:	613b      	str	r3, [r7, #16]
    pBuf++;
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	3301      	adds	r3, #1
 80118a8:	613b      	str	r3, [r7, #16]
    pBuf++;
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	3301      	adds	r3, #1
 80118ae:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 80118b0:	6a3b      	ldr	r3, [r7, #32]
 80118b2:	3b01      	subs	r3, #1
 80118b4:	623b      	str	r3, [r7, #32]
 80118b6:	6a3b      	ldr	r3, [r7, #32]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d1dc      	bne.n	8011876 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 80118bc:	2316      	movs	r3, #22
 80118be:	18fb      	adds	r3, r7, r3
 80118c0:	881b      	ldrh	r3, [r3, #0]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d01e      	beq.n	8011904 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 80118c6:	2300      	movs	r3, #0
 80118c8:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	001a      	movs	r2, r3
 80118d0:	6a3b      	ldr	r3, [r7, #32]
 80118d2:	00db      	lsls	r3, r3, #3
 80118d4:	409a      	lsls	r2, r3
 80118d6:	0013      	movs	r3, r2
 80118d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118da:	4313      	orrs	r3, r2
 80118dc:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 80118de:	6a3b      	ldr	r3, [r7, #32]
 80118e0:	3301      	adds	r3, #1
 80118e2:	623b      	str	r3, [r7, #32]
      pBuf++;
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	3301      	adds	r3, #1
 80118e8:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 80118ea:	2116      	movs	r1, #22
 80118ec:	187b      	adds	r3, r7, r1
 80118ee:	881a      	ldrh	r2, [r3, #0]
 80118f0:	187b      	adds	r3, r7, r1
 80118f2:	3a01      	subs	r2, #1
 80118f4:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 80118f6:	187b      	adds	r3, r7, r1
 80118f8:	881b      	ldrh	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d1e5      	bne.n	80118ca <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011902:	601a      	str	r2, [r3, #0]
  }
}
 8011904:	46c0      	nop			; (mov r8, r8)
 8011906:	46bd      	mov	sp, r7
 8011908:	b00a      	add	sp, #40	; 0x28
 801190a:	bd80      	pop	{r7, pc}
 801190c:	40009800 	.word	0x40009800

08011910 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011910:	b590      	push	{r4, r7, lr}
 8011912:	b08b      	sub	sp, #44	; 0x2c
 8011914:	af00      	add	r7, sp, #0
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	0019      	movs	r1, r3
 801191c:	1dbb      	adds	r3, r7, #6
 801191e:	801a      	strh	r2, [r3, #0]
 8011920:	1d3b      	adds	r3, r7, #4
 8011922:	1c0a      	adds	r2, r1, #0
 8011924:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8011926:	1d3b      	adds	r3, r7, #4
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	3303      	adds	r3, #3
 801192c:	089b      	lsrs	r3, r3, #2
 801192e:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8011930:	201a      	movs	r0, #26
 8011932:	183b      	adds	r3, r7, r0
 8011934:	1d3a      	adds	r2, r7, #4
 8011936:	8812      	ldrh	r2, [r2, #0]
 8011938:	2103      	movs	r1, #3
 801193a:	400a      	ands	r2, r1
 801193c:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8011942:	1dbb      	adds	r3, r7, #6
 8011944:	881b      	ldrh	r3, [r3, #0]
 8011946:	4a39      	ldr	r2, [pc, #228]	; (8011a2c <USB_ReadPMA+0x11c>)
 8011948:	4694      	mov	ip, r2
 801194a:	4463      	add	r3, ip
 801194c:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 801194e:	183b      	adds	r3, r7, r0
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d002      	beq.n	801195c <USB_ReadPMA+0x4c>
  {
    NbWords--;
 8011956:	69fb      	ldr	r3, [r7, #28]
 8011958:	3b01      	subs	r3, #1
 801195a:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	627b      	str	r3, [r7, #36]	; 0x24
 8011960:	e03c      	b.n	80119dc <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8011962:	6a3b      	ldr	r3, [r7, #32]
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	21ff      	movs	r1, #255	; 0xff
 801196a:	4011      	ands	r1, r2
 801196c:	000c      	movs	r4, r1
 801196e:	7819      	ldrb	r1, [r3, #0]
 8011970:	2000      	movs	r0, #0
 8011972:	4001      	ands	r1, r0
 8011974:	1c08      	adds	r0, r1, #0
 8011976:	1c21      	adds	r1, r4, #0
 8011978:	4301      	orrs	r1, r0
 801197a:	7019      	strb	r1, [r3, #0]
 801197c:	0a11      	lsrs	r1, r2, #8
 801197e:	20ff      	movs	r0, #255	; 0xff
 8011980:	4001      	ands	r1, r0
 8011982:	000c      	movs	r4, r1
 8011984:	7859      	ldrb	r1, [r3, #1]
 8011986:	2000      	movs	r0, #0
 8011988:	4001      	ands	r1, r0
 801198a:	1c08      	adds	r0, r1, #0
 801198c:	1c21      	adds	r1, r4, #0
 801198e:	4301      	orrs	r1, r0
 8011990:	7059      	strb	r1, [r3, #1]
 8011992:	0c11      	lsrs	r1, r2, #16
 8011994:	20ff      	movs	r0, #255	; 0xff
 8011996:	4001      	ands	r1, r0
 8011998:	000c      	movs	r4, r1
 801199a:	7899      	ldrb	r1, [r3, #2]
 801199c:	2000      	movs	r0, #0
 801199e:	4001      	ands	r1, r0
 80119a0:	1c08      	adds	r0, r1, #0
 80119a2:	1c21      	adds	r1, r4, #0
 80119a4:	4301      	orrs	r1, r0
 80119a6:	7099      	strb	r1, [r3, #2]
 80119a8:	0e10      	lsrs	r0, r2, #24
 80119aa:	78da      	ldrb	r2, [r3, #3]
 80119ac:	2100      	movs	r1, #0
 80119ae:	400a      	ands	r2, r1
 80119b0:	1c11      	adds	r1, r2, #0
 80119b2:	1c02      	adds	r2, r0, #0
 80119b4:	430a      	orrs	r2, r1
 80119b6:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 80119b8:	6a3b      	ldr	r3, [r7, #32]
 80119ba:	3304      	adds	r3, #4
 80119bc:	623b      	str	r3, [r7, #32]
    pBuf++;
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	3301      	adds	r3, #1
 80119c2:	617b      	str	r3, [r7, #20]
    pBuf++;
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	3301      	adds	r3, #1
 80119c8:	617b      	str	r3, [r7, #20]
    pBuf++;
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	3301      	adds	r3, #1
 80119ce:	617b      	str	r3, [r7, #20]
    pBuf++;
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	3301      	adds	r3, #1
 80119d4:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 80119d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d8:	3b01      	subs	r3, #1
 80119da:	627b      	str	r3, [r7, #36]	; 0x24
 80119dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d1bf      	bne.n	8011962 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 80119e2:	231a      	movs	r3, #26
 80119e4:	18fb      	adds	r3, r7, r3
 80119e6:	881b      	ldrh	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d01b      	beq.n	8011a24 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 80119ec:	6a3b      	ldr	r3, [r7, #32]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 80119f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	00db      	lsls	r3, r3, #3
 80119f8:	693a      	ldr	r2, [r7, #16]
 80119fa:	40da      	lsrs	r2, r3
 80119fc:	0013      	movs	r3, r2
 80119fe:	b2da      	uxtb	r2, r3
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	701a      	strb	r2, [r3, #0]
      count++;
 8011a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a06:	3301      	adds	r3, #1
 8011a08:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8011a10:	211a      	movs	r1, #26
 8011a12:	187b      	adds	r3, r7, r1
 8011a14:	881a      	ldrh	r2, [r3, #0]
 8011a16:	187b      	adds	r3, r7, r1
 8011a18:	3a01      	subs	r2, #1
 8011a1a:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8011a1c:	187b      	adds	r3, r7, r1
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d1e6      	bne.n	80119f2 <USB_ReadPMA+0xe2>
  }
}
 8011a24:	46c0      	nop			; (mov r8, r8)
 8011a26:	46bd      	mov	sp, r7
 8011a28:	b00b      	add	sp, #44	; 0x2c
 8011a2a:	bd90      	pop	{r4, r7, pc}
 8011a2c:	40009800 	.word	0x40009800

08011a30 <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	af00      	add	r7, sp, #0
    'T', 'R', 'A', 'C', 'E', ' ', 'O', 'V', 'E', 'R', '_', 'F', 'L', 'O', 'W', /* Data */
    TLV_EOF, TLV_EOF, TLV_EOF, TLV_EOF                                         /* Buffer end */
  };

  /* initialize tracer module */
  TRACER_EMB_Init();
 8011a34:	f00f fcee 	bl	8021414 <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 8011a38:	4b06      	ldr	r3, [pc, #24]	; (8011a54 <USBPD_TRACE_Init+0x24>)
 8011a3a:	2103      	movs	r1, #3
 8011a3c:	0018      	movs	r0, r3
 8011a3e:	f7ef fd47 	bl	80014d0 <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, (uint8_t)sizeof(OverFlow_String));
 8011a42:	4b05      	ldr	r3, [pc, #20]	; (8011a58 <USBPD_TRACE_Init+0x28>)
 8011a44:	2123      	movs	r1, #35	; 0x23
 8011a46:	0018      	movs	r0, r3
 8011a48:	f00f fd70 	bl	802152c <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif /* _TRACE */
}
 8011a4c:	46c0      	nop			; (mov r8, r8)
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	46c0      	nop			; (mov r8, r8)
 8011a54:	08011a5d 	.word	0x08011a5d
 8011a58:	080240c8 	.word	0x080240c8

08011a5c <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 8011a5c:	b5b0      	push	{r4, r5, r7, lr}
 8011a5e:	b086      	sub	sp, #24
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	0004      	movs	r4, r0
 8011a64:	0008      	movs	r0, r1
 8011a66:	0011      	movs	r1, r2
 8011a68:	603b      	str	r3, [r7, #0]
 8011a6a:	1dfb      	adds	r3, r7, #7
 8011a6c:	1c22      	adds	r2, r4, #0
 8011a6e:	701a      	strb	r2, [r3, #0]
 8011a70:	1dbb      	adds	r3, r7, #6
 8011a72:	1c02      	adds	r2, r0, #0
 8011a74:	701a      	strb	r2, [r3, #0]
 8011a76:	1d7b      	adds	r3, r7, #5
 8011a78:	1c0a      	adds	r2, r1, #0
 8011a7a:	701a      	strb	r2, [r3, #0]
  uint32_t _time;
  int32_t _allocation;
  uint16_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 8011a7c:	f7f7 fb44 	bl	8009108 <HAL_GetTick>
 8011a80:	0003      	movs	r3, r0
 8011a82:	613b      	str	r3, [r7, #16]

  TRACER_EMB_Lock();
 8011a84:	f00f fdb6 	bl	80215f4 <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _allocation = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE +
 8011a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a8a:	3314      	adds	r3, #20
 8011a8c:	0018      	movs	r0, r3
 8011a8e:	f00f fe4b 	bl	8021728 <TRACER_EMB_AllocateBufer>
 8011a92:	0003      	movs	r3, r0
 8011a94:	60fb      	str	r3, [r7, #12]
                                         TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);

  /* Check allocation */
  if (_allocation  != -1)
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	3301      	adds	r3, #1
 8011a9a:	d100      	bne.n	8011a9e <USBPD_TRACE_Add+0x42>
 8011a9c:	e11d      	b.n	8011cda <USBPD_TRACE_Add+0x27e>
  {
    uint16_t _writepos = (uint16_t)_allocation;
 8011a9e:	2314      	movs	r3, #20
 8011aa0:	18fb      	adds	r3, r7, r3
 8011aa2:	68fa      	ldr	r2, [r7, #12]
 8011aa4:	801a      	strh	r2, [r3, #0]

    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 8011aa6:	2316      	movs	r3, #22
 8011aa8:	18fb      	adds	r3, r7, r3
 8011aaa:	2200      	movs	r2, #0
 8011aac:	801a      	strh	r2, [r3, #0]
 8011aae:	e011      	b.n	8011ad4 <USBPD_TRACE_Add+0x78>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 8011ab0:	2414      	movs	r4, #20
 8011ab2:	193b      	adds	r3, r7, r4
 8011ab4:	881b      	ldrh	r3, [r3, #0]
 8011ab6:	21fd      	movs	r1, #253	; 0xfd
 8011ab8:	0018      	movs	r0, r3
 8011aba:	f00f fd11 	bl	80214e0 <TRACER_EMB_WriteData>
 8011abe:	193b      	adds	r3, r7, r4
 8011ac0:	193a      	adds	r2, r7, r4
 8011ac2:	8812      	ldrh	r2, [r2, #0]
 8011ac4:	3201      	adds	r2, #1
 8011ac6:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 8011ac8:	2116      	movs	r1, #22
 8011aca:	187b      	adds	r3, r7, r1
 8011acc:	881a      	ldrh	r2, [r3, #0]
 8011ace:	187b      	adds	r3, r7, r1
 8011ad0:	3201      	adds	r2, #1
 8011ad2:	801a      	strh	r2, [r3, #0]
 8011ad4:	2516      	movs	r5, #22
 8011ad6:	197b      	adds	r3, r7, r5
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	2b03      	cmp	r3, #3
 8011adc:	d9e8      	bls.n	8011ab0 <USBPD_TRACE_Add+0x54>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 8011ade:	1dbb      	adds	r3, r7, #6
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	015b      	lsls	r3, r3, #5
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	2212      	movs	r2, #18
 8011aec:	4313      	orrs	r3, r2
 8011aee:	b2da      	uxtb	r2, r3
 8011af0:	2414      	movs	r4, #20
 8011af2:	193b      	adds	r3, r7, r4
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	0011      	movs	r1, r2
 8011af8:	0018      	movs	r0, r3
 8011afa:	f00f fcf1 	bl	80214e0 <TRACER_EMB_WriteData>
 8011afe:	0021      	movs	r1, r4
 8011b00:	187b      	adds	r3, r7, r1
 8011b02:	187a      	adds	r2, r7, r1
 8011b04:	8812      	ldrh	r2, [r2, #0]
 8011b06:	3201      	adds	r2, #1
 8011b08:	801a      	strh	r2, [r3, #0]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 8011b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0c:	3309      	adds	r3, #9
 8011b0e:	0a1b      	lsrs	r3, r3, #8
 8011b10:	b2da      	uxtb	r2, r3
 8011b12:	000c      	movs	r4, r1
 8011b14:	187b      	adds	r3, r7, r1
 8011b16:	881b      	ldrh	r3, [r3, #0]
 8011b18:	0011      	movs	r1, r2
 8011b1a:	0018      	movs	r0, r3
 8011b1c:	f00f fce0 	bl	80214e0 <TRACER_EMB_WriteData>
 8011b20:	0021      	movs	r1, r4
 8011b22:	187b      	adds	r3, r7, r1
 8011b24:	187a      	adds	r2, r7, r1
 8011b26:	8812      	ldrh	r2, [r2, #0]
 8011b28:	3201      	adds	r2, #1
 8011b2a:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size + TRACE_SIZE_HEADER_TRACE));
 8011b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	3309      	adds	r3, #9
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	000c      	movs	r4, r1
 8011b36:	187b      	adds	r3, r7, r1
 8011b38:	881b      	ldrh	r3, [r3, #0]
 8011b3a:	0011      	movs	r1, r2
 8011b3c:	0018      	movs	r0, r3
 8011b3e:	f00f fccf 	bl	80214e0 <TRACER_EMB_WriteData>
 8011b42:	0021      	movs	r1, r4
 8011b44:	187b      	adds	r3, r7, r1
 8011b46:	187a      	adds	r2, r7, r1
 8011b48:	8812      	ldrh	r2, [r2, #0]
 8011b4a:	3201      	adds	r2, #1
 8011b4c:	801a      	strh	r2, [r3, #0]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 8011b4e:	1dfb      	adds	r3, r7, #7
 8011b50:	781a      	ldrb	r2, [r3, #0]
 8011b52:	000c      	movs	r4, r1
 8011b54:	187b      	adds	r3, r7, r1
 8011b56:	881b      	ldrh	r3, [r3, #0]
 8011b58:	0011      	movs	r1, r2
 8011b5a:	0018      	movs	r0, r3
 8011b5c:	f00f fcc0 	bl	80214e0 <TRACER_EMB_WriteData>
 8011b60:	0021      	movs	r1, r4
 8011b62:	187b      	adds	r3, r7, r1
 8011b64:	187a      	adds	r2, r7, r1
 8011b66:	8812      	ldrh	r2, [r2, #0]
 8011b68:	3201      	adds	r2, #1
 8011b6a:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	b2da      	uxtb	r2, r3
 8011b70:	000c      	movs	r4, r1
 8011b72:	187b      	adds	r3, r7, r1
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	0011      	movs	r1, r2
 8011b78:	0018      	movs	r0, r3
 8011b7a:	f00f fcb1 	bl	80214e0 <TRACER_EMB_WriteData>
 8011b7e:	0021      	movs	r1, r4
 8011b80:	187b      	adds	r3, r7, r1
 8011b82:	187a      	adds	r2, r7, r1
 8011b84:	8812      	ldrh	r2, [r2, #0]
 8011b86:	3201      	adds	r2, #1
 8011b88:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	0a1b      	lsrs	r3, r3, #8
 8011b8e:	b2da      	uxtb	r2, r3
 8011b90:	000c      	movs	r4, r1
 8011b92:	187b      	adds	r3, r7, r1
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	0011      	movs	r1, r2
 8011b98:	0018      	movs	r0, r3
 8011b9a:	f00f fca1 	bl	80214e0 <TRACER_EMB_WriteData>
 8011b9e:	0021      	movs	r1, r4
 8011ba0:	187b      	adds	r3, r7, r1
 8011ba2:	187a      	adds	r2, r7, r1
 8011ba4:	8812      	ldrh	r2, [r2, #0]
 8011ba6:	3201      	adds	r2, #1
 8011ba8:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	0c1b      	lsrs	r3, r3, #16
 8011bae:	b2da      	uxtb	r2, r3
 8011bb0:	000c      	movs	r4, r1
 8011bb2:	187b      	adds	r3, r7, r1
 8011bb4:	881b      	ldrh	r3, [r3, #0]
 8011bb6:	0011      	movs	r1, r2
 8011bb8:	0018      	movs	r0, r3
 8011bba:	f00f fc91 	bl	80214e0 <TRACER_EMB_WriteData>
 8011bbe:	0021      	movs	r1, r4
 8011bc0:	187b      	adds	r3, r7, r1
 8011bc2:	187a      	adds	r2, r7, r1
 8011bc4:	8812      	ldrh	r2, [r2, #0]
 8011bc6:	3201      	adds	r2, #1
 8011bc8:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	0e1b      	lsrs	r3, r3, #24
 8011bce:	b2da      	uxtb	r2, r3
 8011bd0:	000c      	movs	r4, r1
 8011bd2:	187b      	adds	r3, r7, r1
 8011bd4:	881b      	ldrh	r3, [r3, #0]
 8011bd6:	0011      	movs	r1, r2
 8011bd8:	0018      	movs	r0, r3
 8011bda:	f00f fc81 	bl	80214e0 <TRACER_EMB_WriteData>
 8011bde:	0021      	movs	r1, r4
 8011be0:	187b      	adds	r3, r7, r1
 8011be2:	187a      	adds	r2, r7, r1
 8011be4:	8812      	ldrh	r2, [r2, #0]
 8011be6:	3201      	adds	r2, #1
 8011be8:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 8011bea:	1dbb      	adds	r3, r7, #6
 8011bec:	781a      	ldrb	r2, [r3, #0]
 8011bee:	000c      	movs	r4, r1
 8011bf0:	187b      	adds	r3, r7, r1
 8011bf2:	881b      	ldrh	r3, [r3, #0]
 8011bf4:	0011      	movs	r1, r2
 8011bf6:	0018      	movs	r0, r3
 8011bf8:	f00f fc72 	bl	80214e0 <TRACER_EMB_WriteData>
 8011bfc:	0021      	movs	r1, r4
 8011bfe:	187b      	adds	r3, r7, r1
 8011c00:	187a      	adds	r2, r7, r1
 8011c02:	8812      	ldrh	r2, [r2, #0]
 8011c04:	3201      	adds	r2, #1
 8011c06:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 8011c08:	1d7b      	adds	r3, r7, #5
 8011c0a:	781a      	ldrb	r2, [r3, #0]
 8011c0c:	000c      	movs	r4, r1
 8011c0e:	187b      	adds	r3, r7, r1
 8011c10:	881b      	ldrh	r3, [r3, #0]
 8011c12:	0011      	movs	r1, r2
 8011c14:	0018      	movs	r0, r3
 8011c16:	f00f fc63 	bl	80214e0 <TRACER_EMB_WriteData>
 8011c1a:	0021      	movs	r1, r4
 8011c1c:	187b      	adds	r3, r7, r1
 8011c1e:	187a      	adds	r2, r7, r1
 8011c20:	8812      	ldrh	r2, [r2, #0]
 8011c22:	3201      	adds	r2, #1
 8011c24:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 8011c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c28:	0a1b      	lsrs	r3, r3, #8
 8011c2a:	b2da      	uxtb	r2, r3
 8011c2c:	000c      	movs	r4, r1
 8011c2e:	187b      	adds	r3, r7, r1
 8011c30:	881b      	ldrh	r3, [r3, #0]
 8011c32:	0011      	movs	r1, r2
 8011c34:	0018      	movs	r0, r3
 8011c36:	f00f fc53 	bl	80214e0 <TRACER_EMB_WriteData>
 8011c3a:	0021      	movs	r1, r4
 8011c3c:	187b      	adds	r3, r7, r1
 8011c3e:	187a      	adds	r2, r7, r1
 8011c40:	8812      	ldrh	r2, [r2, #0]
 8011c42:	3201      	adds	r2, #1
 8011c44:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 8011c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	000c      	movs	r4, r1
 8011c4c:	187b      	adds	r3, r7, r1
 8011c4e:	881b      	ldrh	r3, [r3, #0]
 8011c50:	0011      	movs	r1, r2
 8011c52:	0018      	movs	r0, r3
 8011c54:	f00f fc44 	bl	80214e0 <TRACER_EMB_WriteData>
 8011c58:	193b      	adds	r3, r7, r4
 8011c5a:	193a      	adds	r2, r7, r4
 8011c5c:	8812      	ldrh	r2, [r2, #0]
 8011c5e:	3201      	adds	r2, #1
 8011c60:	801a      	strh	r2, [r3, #0]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 8011c62:	197b      	adds	r3, r7, r5
 8011c64:	2200      	movs	r2, #0
 8011c66:	801a      	strh	r2, [r3, #0]
 8011c68:	e016      	b.n	8011c98 <USBPD_TRACE_Add+0x23c>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 8011c6a:	2416      	movs	r4, #22
 8011c6c:	193b      	adds	r3, r7, r4
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	683a      	ldr	r2, [r7, #0]
 8011c72:	18d3      	adds	r3, r2, r3
 8011c74:	781a      	ldrb	r2, [r3, #0]
 8011c76:	2514      	movs	r5, #20
 8011c78:	197b      	adds	r3, r7, r5
 8011c7a:	881b      	ldrh	r3, [r3, #0]
 8011c7c:	0011      	movs	r1, r2
 8011c7e:	0018      	movs	r0, r3
 8011c80:	f00f fc2e 	bl	80214e0 <TRACER_EMB_WriteData>
 8011c84:	197b      	adds	r3, r7, r5
 8011c86:	197a      	adds	r2, r7, r5
 8011c88:	8812      	ldrh	r2, [r2, #0]
 8011c8a:	3201      	adds	r2, #1
 8011c8c:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < Size; index++)
 8011c8e:	193b      	adds	r3, r7, r4
 8011c90:	881a      	ldrh	r2, [r3, #0]
 8011c92:	193b      	adds	r3, r7, r4
 8011c94:	3201      	adds	r2, #1
 8011c96:	801a      	strh	r2, [r3, #0]
 8011c98:	2116      	movs	r1, #22
 8011c9a:	187b      	adds	r3, r7, r1
 8011c9c:	881b      	ldrh	r3, [r3, #0]
 8011c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d8e2      	bhi.n	8011c6a <USBPD_TRACE_Add+0x20e>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 8011ca4:	187b      	adds	r3, r7, r1
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	801a      	strh	r2, [r3, #0]
 8011caa:	e011      	b.n	8011cd0 <USBPD_TRACE_Add+0x274>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 8011cac:	2414      	movs	r4, #20
 8011cae:	193b      	adds	r3, r7, r4
 8011cb0:	881b      	ldrh	r3, [r3, #0]
 8011cb2:	21a5      	movs	r1, #165	; 0xa5
 8011cb4:	0018      	movs	r0, r3
 8011cb6:	f00f fc13 	bl	80214e0 <TRACER_EMB_WriteData>
 8011cba:	193b      	adds	r3, r7, r4
 8011cbc:	193a      	adds	r2, r7, r4
 8011cbe:	8812      	ldrh	r2, [r2, #0]
 8011cc0:	3201      	adds	r2, #1
 8011cc2:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 8011cc4:	2116      	movs	r1, #22
 8011cc6:	187b      	adds	r3, r7, r1
 8011cc8:	881a      	ldrh	r2, [r3, #0]
 8011cca:	187b      	adds	r3, r7, r1
 8011ccc:	3201      	adds	r2, #1
 8011cce:	801a      	strh	r2, [r3, #0]
 8011cd0:	2316      	movs	r3, #22
 8011cd2:	18fb      	adds	r3, r7, r3
 8011cd4:	881b      	ldrh	r3, [r3, #0]
 8011cd6:	2b03      	cmp	r3, #3
 8011cd8:	d9e8      	bls.n	8011cac <USBPD_TRACE_Add+0x250>
    }
  }

  TRACER_EMB_UnLock();
 8011cda:	f00f fca9 	bl	8021630 <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 8011cde:	f00f fcc5 	bl	802166c <TRACER_EMB_SendData>
#else
  return;
#endif /* _TRACE */
}
 8011ce2:	46c0      	nop			; (mov r8, r8)
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	b006      	add	sp, #24
 8011ce8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011cec <__NVIC_EnableIRQ>:
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	0002      	movs	r2, r0
 8011cf4:	1dfb      	adds	r3, r7, #7
 8011cf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8011cf8:	1dfb      	adds	r3, r7, #7
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8011cfe:	d809      	bhi.n	8011d14 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011d00:	1dfb      	adds	r3, r7, #7
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	001a      	movs	r2, r3
 8011d06:	231f      	movs	r3, #31
 8011d08:	401a      	ands	r2, r3
 8011d0a:	4b04      	ldr	r3, [pc, #16]	; (8011d1c <__NVIC_EnableIRQ+0x30>)
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	4091      	lsls	r1, r2
 8011d10:	000a      	movs	r2, r1
 8011d12:	601a      	str	r2, [r3, #0]
}
 8011d14:	46c0      	nop			; (mov r8, r8)
 8011d16:	46bd      	mov	sp, r7
 8011d18:	b002      	add	sp, #8
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	e000e100 	.word	0xe000e100

08011d20 <__NVIC_SetPriority>:
{
 8011d20:	b590      	push	{r4, r7, lr}
 8011d22:	b083      	sub	sp, #12
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	0002      	movs	r2, r0
 8011d28:	6039      	str	r1, [r7, #0]
 8011d2a:	1dfb      	adds	r3, r7, #7
 8011d2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8011d2e:	1dfb      	adds	r3, r7, #7
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	2b7f      	cmp	r3, #127	; 0x7f
 8011d34:	d828      	bhi.n	8011d88 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011d36:	4a2f      	ldr	r2, [pc, #188]	; (8011df4 <__NVIC_SetPriority+0xd4>)
 8011d38:	1dfb      	adds	r3, r7, #7
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	b25b      	sxtb	r3, r3
 8011d3e:	089b      	lsrs	r3, r3, #2
 8011d40:	33c0      	adds	r3, #192	; 0xc0
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	589b      	ldr	r3, [r3, r2]
 8011d46:	1dfa      	adds	r2, r7, #7
 8011d48:	7812      	ldrb	r2, [r2, #0]
 8011d4a:	0011      	movs	r1, r2
 8011d4c:	2203      	movs	r2, #3
 8011d4e:	400a      	ands	r2, r1
 8011d50:	00d2      	lsls	r2, r2, #3
 8011d52:	21ff      	movs	r1, #255	; 0xff
 8011d54:	4091      	lsls	r1, r2
 8011d56:	000a      	movs	r2, r1
 8011d58:	43d2      	mvns	r2, r2
 8011d5a:	401a      	ands	r2, r3
 8011d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	019b      	lsls	r3, r3, #6
 8011d62:	22ff      	movs	r2, #255	; 0xff
 8011d64:	401a      	ands	r2, r3
 8011d66:	1dfb      	adds	r3, r7, #7
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	0018      	movs	r0, r3
 8011d6c:	2303      	movs	r3, #3
 8011d6e:	4003      	ands	r3, r0
 8011d70:	00db      	lsls	r3, r3, #3
 8011d72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011d74:	481f      	ldr	r0, [pc, #124]	; (8011df4 <__NVIC_SetPriority+0xd4>)
 8011d76:	1dfb      	adds	r3, r7, #7
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	b25b      	sxtb	r3, r3
 8011d7c:	089b      	lsrs	r3, r3, #2
 8011d7e:	430a      	orrs	r2, r1
 8011d80:	33c0      	adds	r3, #192	; 0xc0
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	501a      	str	r2, [r3, r0]
}
 8011d86:	e031      	b.n	8011dec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011d88:	4a1b      	ldr	r2, [pc, #108]	; (8011df8 <__NVIC_SetPriority+0xd8>)
 8011d8a:	1dfb      	adds	r3, r7, #7
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	0019      	movs	r1, r3
 8011d90:	230f      	movs	r3, #15
 8011d92:	400b      	ands	r3, r1
 8011d94:	3b08      	subs	r3, #8
 8011d96:	089b      	lsrs	r3, r3, #2
 8011d98:	3306      	adds	r3, #6
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	18d3      	adds	r3, r2, r3
 8011d9e:	3304      	adds	r3, #4
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	1dfa      	adds	r2, r7, #7
 8011da4:	7812      	ldrb	r2, [r2, #0]
 8011da6:	0011      	movs	r1, r2
 8011da8:	2203      	movs	r2, #3
 8011daa:	400a      	ands	r2, r1
 8011dac:	00d2      	lsls	r2, r2, #3
 8011dae:	21ff      	movs	r1, #255	; 0xff
 8011db0:	4091      	lsls	r1, r2
 8011db2:	000a      	movs	r2, r1
 8011db4:	43d2      	mvns	r2, r2
 8011db6:	401a      	ands	r2, r3
 8011db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	019b      	lsls	r3, r3, #6
 8011dbe:	22ff      	movs	r2, #255	; 0xff
 8011dc0:	401a      	ands	r2, r3
 8011dc2:	1dfb      	adds	r3, r7, #7
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	0018      	movs	r0, r3
 8011dc8:	2303      	movs	r3, #3
 8011dca:	4003      	ands	r3, r0
 8011dcc:	00db      	lsls	r3, r3, #3
 8011dce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011dd0:	4809      	ldr	r0, [pc, #36]	; (8011df8 <__NVIC_SetPriority+0xd8>)
 8011dd2:	1dfb      	adds	r3, r7, #7
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	001c      	movs	r4, r3
 8011dd8:	230f      	movs	r3, #15
 8011dda:	4023      	ands	r3, r4
 8011ddc:	3b08      	subs	r3, #8
 8011dde:	089b      	lsrs	r3, r3, #2
 8011de0:	430a      	orrs	r2, r1
 8011de2:	3306      	adds	r3, #6
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	18c3      	adds	r3, r0, r3
 8011de8:	3304      	adds	r3, #4
 8011dea:	601a      	str	r2, [r3, #0]
}
 8011dec:	46c0      	nop			; (mov r8, r8)
 8011dee:	46bd      	mov	sp, r7
 8011df0:	b003      	add	sp, #12
 8011df2:	bd90      	pop	{r4, r7, pc}
 8011df4:	e000e100 	.word	0xe000e100
 8011df8:	e000ed00 	.word	0xe000ed00

08011dfc <LL_UCPD_Enable>:
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	2280      	movs	r2, #128	; 0x80
 8011e0a:	0612      	lsls	r2, r2, #24
 8011e0c:	431a      	orrs	r2, r3
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	601a      	str	r2, [r3, #0]
}
 8011e12:	46c0      	nop			; (mov r8, r8)
 8011e14:	46bd      	mov	sp, r7
 8011e16:	b002      	add	sp, #8
 8011e18:	bd80      	pop	{r7, pc}
	...

08011e1c <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4a05      	ldr	r2, [pc, #20]	; (8011e40 <LL_UCPD_SetRxOrderSet+0x24>)
 8011e2c:	401a      	ands	r2, r3
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	431a      	orrs	r2, r3
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	601a      	str	r2, [r3, #0]
}
 8011e36:	46c0      	nop			; (mov r8, r8)
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	b002      	add	sp, #8
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	46c0      	nop			; (mov r8, r8)
 8011e40:	e00fffff 	.word	0xe00fffff

08011e44 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	68db      	ldr	r3, [r3, #12]
 8011e52:	4a05      	ldr	r2, [pc, #20]	; (8011e68 <LL_UCPD_SetccEnable+0x24>)
 8011e54:	401a      	ands	r2, r3
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	431a      	orrs	r2, r3
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	60da      	str	r2, [r3, #12]
}
 8011e5e:	46c0      	nop			; (mov r8, r8)
 8011e60:	46bd      	mov	sp, r7
 8011e62:	b002      	add	sp, #8
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	46c0      	nop			; (mov r8, r8)
 8011e68:	fffff3ff 	.word	0xfffff3ff

08011e6c <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	691b      	ldr	r3, [r3, #16]
 8011e78:	2280      	movs	r2, #128	; 0x80
 8011e7a:	0212      	lsls	r2, r2, #8
 8011e7c:	431a      	orrs	r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	611a      	str	r2, [r3, #16]
}
 8011e82:	46c0      	nop			; (mov r8, r8)
 8011e84:	46bd      	mov	sp, r7
 8011e86:	b002      	add	sp, #8
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b082      	sub	sp, #8
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	691b      	ldr	r3, [r3, #16]
 8011e96:	2280      	movs	r2, #128	; 0x80
 8011e98:	01d2      	lsls	r2, r2, #7
 8011e9a:	431a      	orrs	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	611a      	str	r2, [r3, #16]
}
 8011ea0:	46c0      	nop			; (mov r8, r8)
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	b002      	add	sp, #8
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 8011ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eaa:	b08b      	sub	sp, #44	; 0x2c
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60b9      	str	r1, [r7, #8]
 8011eb0:	607a      	str	r2, [r7, #4]
 8011eb2:	603b      	str	r3, [r7, #0]
 8011eb4:	240f      	movs	r4, #15
 8011eb6:	193b      	adds	r3, r7, r4
 8011eb8:	1c02      	adds	r2, r0, #0
 8011eba:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8011ebc:	193b      	adds	r3, r7, r4
 8011ebe:	781a      	ldrb	r2, [r3, #0]
 8011ec0:	0013      	movs	r3, r2
 8011ec2:	005b      	lsls	r3, r3, #1
 8011ec4:	189b      	adds	r3, r3, r2
 8011ec6:	009b      	lsls	r3, r3, #2
 8011ec8:	4a65      	ldr	r2, [pc, #404]	; (8012060 <CAD_Init+0x1b8>)
 8011eca:	189b      	adds	r3, r3, r2
 8011ecc:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8011ece:	193b      	adds	r3, r7, r4
 8011ed0:	781a      	ldrb	r2, [r3, #0]
 8011ed2:	4964      	ldr	r1, [pc, #400]	; (8012064 <CAD_Init+0x1bc>)
 8011ed4:	0013      	movs	r3, r2
 8011ed6:	011b      	lsls	r3, r3, #4
 8011ed8:	1a9b      	subs	r3, r3, r2
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	18cb      	adds	r3, r1, r3
 8011ede:	3310      	adds	r3, #16
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8011ee4:	193b      	adds	r3, r7, r4
 8011ee6:	781a      	ldrb	r2, [r3, #0]
 8011ee8:	495e      	ldr	r1, [pc, #376]	; (8012064 <CAD_Init+0x1bc>)
 8011eea:	0013      	movs	r3, r2
 8011eec:	011b      	lsls	r3, r3, #4
 8011eee:	1a9b      	subs	r3, r3, r2
 8011ef0:	009b      	lsls	r3, r3, #2
 8011ef2:	18cb      	adds	r3, r1, r3
 8011ef4:	330c      	adds	r3, #12
 8011ef6:	68ba      	ldr	r2, [r7, #8]
 8011ef8:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8011efa:	193b      	adds	r3, r7, r4
 8011efc:	781a      	ldrb	r2, [r3, #0]
 8011efe:	4959      	ldr	r1, [pc, #356]	; (8012064 <CAD_Init+0x1bc>)
 8011f00:	0013      	movs	r3, r2
 8011f02:	011b      	lsls	r3, r3, #4
 8011f04:	1a9b      	subs	r3, r3, r2
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	18cb      	adds	r3, r1, r3
 8011f0a:	330c      	adds	r3, #12
 8011f0c:	6819      	ldr	r1, [r3, #0]
 8011f0e:	193b      	adds	r3, r7, r4
 8011f10:	781a      	ldrb	r2, [r3, #0]
 8011f12:	4854      	ldr	r0, [pc, #336]	; (8012064 <CAD_Init+0x1bc>)
 8011f14:	0013      	movs	r3, r2
 8011f16:	011b      	lsls	r3, r3, #4
 8011f18:	1a9b      	subs	r3, r3, r2
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	18c3      	adds	r3, r0, r3
 8011f1e:	3310      	adds	r3, #16
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	794a      	ldrb	r2, [r1, #5]
 8011f24:	0612      	lsls	r2, r2, #24
 8011f26:	0f92      	lsrs	r2, r2, #30
 8011f28:	b2d2      	uxtb	r2, r2
 8011f2a:	2103      	movs	r1, #3
 8011f2c:	400a      	ands	r2, r1
 8011f2e:	0010      	movs	r0, r2
 8011f30:	789a      	ldrb	r2, [r3, #2]
 8011f32:	2103      	movs	r1, #3
 8011f34:	438a      	bics	r2, r1
 8011f36:	1c11      	adds	r1, r2, #0
 8011f38:	1c02      	adds	r2, r0, #0
 8011f3a:	430a      	orrs	r2, r1
 8011f3c:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8011f3e:	193b      	adds	r3, r7, r4
 8011f40:	781a      	ldrb	r2, [r3, #0]
 8011f42:	4948      	ldr	r1, [pc, #288]	; (8012064 <CAD_Init+0x1bc>)
 8011f44:	0013      	movs	r3, r2
 8011f46:	011b      	lsls	r3, r3, #4
 8011f48:	1a9b      	subs	r3, r3, r2
 8011f4a:	009b      	lsls	r3, r3, #2
 8011f4c:	18cb      	adds	r3, r1, r3
 8011f4e:	3310      	adds	r3, #16
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	789a      	ldrb	r2, [r3, #2]
 8011f54:	210c      	movs	r1, #12
 8011f56:	438a      	bics	r2, r1
 8011f58:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	220c      	movs	r2, #12
 8011f5e:	2100      	movs	r1, #0
 8011f60:	0018      	movs	r0, r3
 8011f62:	f010 fb9d 	bl	80226a0 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8011f66:	193b      	adds	r3, r7, r4
 8011f68:	781a      	ldrb	r2, [r3, #0]
 8011f6a:	493e      	ldr	r1, [pc, #248]	; (8012064 <CAD_Init+0x1bc>)
 8011f6c:	0013      	movs	r3, r2
 8011f6e:	011b      	lsls	r3, r3, #4
 8011f70:	1a9b      	subs	r3, r3, r2
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	18cb      	adds	r3, r1, r3
 8011f76:	332c      	adds	r3, #44	; 0x2c
 8011f78:	683a      	ldr	r2, [r7, #0]
 8011f7a:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 8011f7c:	0025      	movs	r5, r4
 8011f7e:	193b      	adds	r3, r7, r4
 8011f80:	781c      	ldrb	r4, [r3, #0]
 8011f82:	197b      	adds	r3, r7, r5
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	0018      	movs	r0, r3
 8011f88:	f000 fc42 	bl	8012810 <USBPD_HW_GetUSPDInstance>
 8011f8c:	0001      	movs	r1, r0
 8011f8e:	4a35      	ldr	r2, [pc, #212]	; (8012064 <CAD_Init+0x1bc>)
 8011f90:	0023      	movs	r3, r4
 8011f92:	011b      	lsls	r3, r3, #4
 8011f94:	1b1b      	subs	r3, r3, r4
 8011f96:	009b      	lsls	r3, r3, #2
 8011f98:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 8011f9a:	2614      	movs	r6, #20
 8011f9c:	19bb      	adds	r3, r7, r6
 8011f9e:	0018      	movs	r0, r3
 8011fa0:	f7fd fdfe 	bl	800fba0 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8011fa4:	002c      	movs	r4, r5
 8011fa6:	193b      	adds	r3, r7, r4
 8011fa8:	781a      	ldrb	r2, [r3, #0]
 8011faa:	492e      	ldr	r1, [pc, #184]	; (8012064 <CAD_Init+0x1bc>)
 8011fac:	0013      	movs	r3, r2
 8011fae:	011b      	lsls	r3, r3, #4
 8011fb0:	1a9b      	subs	r3, r3, r2
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	585b      	ldr	r3, [r3, r1]
 8011fb6:	19ba      	adds	r2, r7, r6
 8011fb8:	0011      	movs	r1, r2
 8011fba:	0018      	movs	r0, r3
 8011fbc:	f7fd fdb6 	bl	800fb2c <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 8011fc0:	193b      	adds	r3, r7, r4
 8011fc2:	781a      	ldrb	r2, [r3, #0]
 8011fc4:	4927      	ldr	r1, [pc, #156]	; (8012064 <CAD_Init+0x1bc>)
 8011fc6:	0013      	movs	r3, r2
 8011fc8:	011b      	lsls	r3, r3, #4
 8011fca:	1a9b      	subs	r3, r3, r2
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	585b      	ldr	r3, [r3, r1]
 8011fd0:	22f8      	movs	r2, #248	; 0xf8
 8011fd2:	0452      	lsls	r2, r2, #17
 8011fd4:	0011      	movs	r1, r2
 8011fd6:	0018      	movs	r0, r3
 8011fd8:	f7ff ff20 	bl	8011e1c <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011fdc:	193b      	adds	r3, r7, r4
 8011fde:	781a      	ldrb	r2, [r3, #0]
 8011fe0:	4920      	ldr	r1, [pc, #128]	; (8012064 <CAD_Init+0x1bc>)
 8011fe2:	0013      	movs	r3, r2
 8011fe4:	011b      	lsls	r3, r3, #4
 8011fe6:	1a9b      	subs	r3, r3, r2
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	585b      	ldr	r3, [r3, r1]
 8011fec:	22c0      	movs	r2, #192	; 0xc0
 8011fee:	0112      	lsls	r2, r2, #4
 8011ff0:	0011      	movs	r1, r2
 8011ff2:	0018      	movs	r0, r3
 8011ff4:	f7ff ff26 	bl	8011e44 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8011ff8:	193b      	adds	r3, r7, r4
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	0018      	movs	r0, r3
 8011ffe:	f009 fb0f 	bl	801b620 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8012002:	193b      	adds	r3, r7, r4
 8012004:	781a      	ldrb	r2, [r3, #0]
 8012006:	4917      	ldr	r1, [pc, #92]	; (8012064 <CAD_Init+0x1bc>)
 8012008:	0013      	movs	r3, r2
 801200a:	011b      	lsls	r3, r3, #4
 801200c:	1a9b      	subs	r3, r3, r2
 801200e:	009b      	lsls	r3, r3, #2
 8012010:	585b      	ldr	r3, [r3, r1]
 8012012:	0018      	movs	r0, r3
 8012014:	f7ff fef2 	bl	8011dfc <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8012018:	193b      	adds	r3, r7, r4
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	0018      	movs	r0, r3
 801201e:	f001 fdc1 	bl	8013ba4 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8012022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012024:	4a10      	ldr	r2, [pc, #64]	; (8012068 <CAD_Init+0x1c0>)
 8012026:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8012028:	193b      	adds	r3, r7, r4
 801202a:	781a      	ldrb	r2, [r3, #0]
 801202c:	490d      	ldr	r1, [pc, #52]	; (8012064 <CAD_Init+0x1bc>)
 801202e:	0013      	movs	r3, r2
 8012030:	011b      	lsls	r3, r3, #4
 8012032:	1a9b      	subs	r3, r3, r2
 8012034:	009b      	lsls	r3, r3, #2
 8012036:	18cb      	adds	r3, r1, r3
 8012038:	330c      	adds	r3, #12
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	795b      	ldrb	r3, [r3, #5]
 801203e:	06db      	lsls	r3, r3, #27
 8012040:	0fdb      	lsrs	r3, r3, #31
 8012042:	b2da      	uxtb	r2, r3
 8012044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012046:	01d0      	lsls	r0, r2, #7
 8012048:	785a      	ldrb	r2, [r3, #1]
 801204a:	217f      	movs	r1, #127	; 0x7f
 801204c:	400a      	ands	r2, r1
 801204e:	1c11      	adds	r1, r2, #0
 8012050:	1c02      	adds	r2, r0, #0
 8012052:	430a      	orrs	r2, r1
 8012054:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 8012056:	46c0      	nop			; (mov r8, r8)
 8012058:	46bd      	mov	sp, r7
 801205a:	b00b      	add	sp, #44	; 0x2c
 801205c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801205e:	46c0      	nop			; (mov r8, r8)
 8012060:	20000550 	.word	0x20000550
 8012064:	20000568 	.word	0x20000568
 8012068:	08012169 	.word	0x08012169

0801206c <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	0002      	movs	r2, r0
 8012074:	1dfb      	adds	r3, r7, #7
 8012076:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 8012078:	1dfb      	adds	r3, r7, #7
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	0018      	movs	r0, r3
 801207e:	f001 fe41 	bl	8013d04 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 8012082:	1dfb      	adds	r3, r7, #7
 8012084:	7819      	ldrb	r1, [r3, #0]
 8012086:	4a0c      	ldr	r2, [pc, #48]	; (80120b8 <CAD_Enter_ErrorRecovery+0x4c>)
 8012088:	000b      	movs	r3, r1
 801208a:	005b      	lsls	r3, r3, #1
 801208c:	185b      	adds	r3, r3, r1
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	5c99      	ldrb	r1, [r3, r2]
 8012092:	2080      	movs	r0, #128	; 0x80
 8012094:	4240      	negs	r0, r0
 8012096:	4301      	orrs	r1, r0
 8012098:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 801209a:	1dfb      	adds	r3, r7, #7
 801209c:	781a      	ldrb	r2, [r3, #0]
 801209e:	4907      	ldr	r1, [pc, #28]	; (80120bc <CAD_Enter_ErrorRecovery+0x50>)
 80120a0:	0013      	movs	r3, r2
 80120a2:	011b      	lsls	r3, r3, #4
 80120a4:	1a9b      	subs	r3, r3, r2
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	18cb      	adds	r3, r1, r3
 80120aa:	332c      	adds	r3, #44	; 0x2c
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	4798      	blx	r3
}
 80120b0:	46c0      	nop			; (mov r8, r8)
 80120b2:	46bd      	mov	sp, r7
 80120b4:	b002      	add	sp, #8
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	20000550 	.word	0x20000550
 80120bc:	20000568 	.word	0x20000568

080120c0 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	0002      	movs	r2, r0
 80120c8:	6039      	str	r1, [r7, #0]
 80120ca:	1dfb      	adds	r3, r7, #7
 80120cc:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 80120ce:	1dfb      	adds	r3, r7, #7
 80120d0:	781a      	ldrb	r2, [r3, #0]
 80120d2:	4919      	ldr	r1, [pc, #100]	; (8012138 <CAD_SRC_Set_ResistorRp+0x78>)
 80120d4:	0013      	movs	r3, r2
 80120d6:	011b      	lsls	r3, r3, #4
 80120d8:	1a9b      	subs	r3, r3, r2
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	18cb      	adds	r3, r1, r3
 80120de:	3310      	adds	r3, #16
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	1c11      	adds	r1, r2, #0
 80120e6:	2203      	movs	r2, #3
 80120e8:	400a      	ands	r2, r1
 80120ea:	b2d2      	uxtb	r2, r2
 80120ec:	2103      	movs	r1, #3
 80120ee:	400a      	ands	r2, r1
 80120f0:	0010      	movs	r0, r2
 80120f2:	789a      	ldrb	r2, [r3, #2]
 80120f4:	2103      	movs	r1, #3
 80120f6:	438a      	bics	r2, r1
 80120f8:	1c11      	adds	r1, r2, #0
 80120fa:	1c02      	adds	r2, r0, #0
 80120fc:	430a      	orrs	r2, r1
 80120fe:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 8012100:	1dfb      	adds	r3, r7, #7
 8012102:	781a      	ldrb	r2, [r3, #0]
 8012104:	490d      	ldr	r1, [pc, #52]	; (801213c <CAD_SRC_Set_ResistorRp+0x7c>)
 8012106:	0013      	movs	r3, r2
 8012108:	005b      	lsls	r3, r3, #1
 801210a:	189b      	adds	r3, r3, r2
 801210c:	009b      	lsls	r3, r3, #2
 801210e:	18cb      	adds	r3, r1, r3
 8012110:	785a      	ldrb	r2, [r3, #1]
 8012112:	2101      	movs	r1, #1
 8012114:	430a      	orrs	r2, r1
 8012116:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8012118:	1dfb      	adds	r3, r7, #7
 801211a:	781a      	ldrb	r2, [r3, #0]
 801211c:	4906      	ldr	r1, [pc, #24]	; (8012138 <CAD_SRC_Set_ResistorRp+0x78>)
 801211e:	0013      	movs	r3, r2
 8012120:	011b      	lsls	r3, r3, #4
 8012122:	1a9b      	subs	r3, r3, r2
 8012124:	009b      	lsls	r3, r3, #2
 8012126:	18cb      	adds	r3, r1, r3
 8012128:	332c      	adds	r3, #44	; 0x2c
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	4798      	blx	r3
  return 0;
 801212e:	2300      	movs	r3, #0
}
 8012130:	0018      	movs	r0, r3
 8012132:	46bd      	mov	sp, r7
 8012134:	b002      	add	sp, #8
 8012136:	bd80      	pop	{r7, pc}
 8012138:	20000568 	.word	0x20000568
 801213c:	20000550 	.word	0x20000550

08012140 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	0002      	movs	r2, r0
 8012148:	6039      	str	r1, [r7, #0]
 801214a:	1dfb      	adds	r3, r7, #7
 801214c:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 801214e:	683a      	ldr	r2, [r7, #0]
 8012150:	1dfb      	adds	r3, r7, #7
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	0011      	movs	r1, r2
 8012156:	0018      	movs	r0, r3
 8012158:	f7ff ffb2 	bl	80120c0 <CAD_SRC_Set_ResistorRp>
 801215c:	0003      	movs	r3, r0
}
 801215e:	0018      	movs	r0, r3
 8012160:	46bd      	mov	sp, r7
 8012162:	b002      	add	sp, #8
 8012164:	bd80      	pop	{r7, pc}
	...

08012168 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b086      	sub	sp, #24
 801216c:	af00      	add	r7, sp, #0
 801216e:	60b9      	str	r1, [r7, #8]
 8012170:	607a      	str	r2, [r7, #4]
 8012172:	210f      	movs	r1, #15
 8012174:	187b      	adds	r3, r7, r1
 8012176:	1c02      	adds	r2, r0, #0
 8012178:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801217a:	187b      	adds	r3, r7, r1
 801217c:	781a      	ldrb	r2, [r3, #0]
 801217e:	0013      	movs	r3, r2
 8012180:	005b      	lsls	r3, r3, #1
 8012182:	189b      	adds	r3, r3, r2
 8012184:	009b      	lsls	r3, r3, #2
 8012186:	4a1b      	ldr	r2, [pc, #108]	; (80121f4 <CAD_StateMachine_SNK+0x8c>)
 8012188:	189b      	adds	r3, r3, r2
 801218a:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801218c:	2302      	movs	r3, #2
 801218e:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	785b      	ldrb	r3, [r3, #1]
 8012194:	069b      	lsls	r3, r3, #26
 8012196:	0edb      	lsrs	r3, r3, #27
 8012198:	b2db      	uxtb	r3, r3
 801219a:	2b03      	cmp	r3, #3
 801219c:	d019      	beq.n	80121d2 <CAD_StateMachine_SNK+0x6a>
 801219e:	dc23      	bgt.n	80121e8 <CAD_StateMachine_SNK+0x80>
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d002      	beq.n	80121aa <CAD_StateMachine_SNK+0x42>
 80121a4:	2b02      	cmp	r3, #2
 80121a6:	d009      	beq.n	80121bc <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 80121a8:	e01e      	b.n	80121e8 <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 80121aa:	230f      	movs	r3, #15
 80121ac:	18fb      	adds	r3, r7, r3
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	0018      	movs	r0, r3
 80121b2:	f000 f9c5 	bl	8012540 <ManageStateDetached_SNK>
 80121b6:	0003      	movs	r3, r0
 80121b8:	617b      	str	r3, [r7, #20]
      break;
 80121ba:	e016      	b.n	80121ea <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	68b9      	ldr	r1, [r7, #8]
 80121c0:	230f      	movs	r3, #15
 80121c2:	18fb      	adds	r3, r7, r3
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	0018      	movs	r0, r3
 80121c8:	f000 fa0c 	bl	80125e4 <ManageStateAttachedWait_SNK>
 80121cc:	0003      	movs	r3, r0
 80121ce:	617b      	str	r3, [r7, #20]
      break;
 80121d0:	e00b      	b.n	80121ea <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	68b9      	ldr	r1, [r7, #8]
 80121d6:	230f      	movs	r3, #15
 80121d8:	18fb      	adds	r3, r7, r3
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	0018      	movs	r0, r3
 80121de:	f000 fa8f 	bl	8012700 <ManageStateAttached_SNK>
 80121e2:	0003      	movs	r3, r0
 80121e4:	617b      	str	r3, [r7, #20]
      break;
 80121e6:	e000      	b.n	80121ea <CAD_StateMachine_SNK+0x82>
      break;
 80121e8:	46c0      	nop			; (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 80121ea:	697b      	ldr	r3, [r7, #20]
}
 80121ec:	0018      	movs	r0, r3
 80121ee:	46bd      	mov	sp, r7
 80121f0:	b006      	add	sp, #24
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	20000550 	.word	0x20000550

080121f8 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80121f8:	b590      	push	{r4, r7, lr}
 80121fa:	b089      	sub	sp, #36	; 0x24
 80121fc:	af02      	add	r7, sp, #8
 80121fe:	60b9      	str	r1, [r7, #8]
 8012200:	607a      	str	r2, [r7, #4]
 8012202:	210f      	movs	r1, #15
 8012204:	187b      	adds	r3, r7, r1
 8012206:	1c02      	adds	r2, r0, #0
 8012208:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801220a:	187b      	adds	r3, r7, r1
 801220c:	781a      	ldrb	r2, [r3, #0]
 801220e:	0013      	movs	r3, r2
 8012210:	005b      	lsls	r3, r3, #1
 8012212:	189b      	adds	r3, r3, r2
 8012214:	009b      	lsls	r3, r3, #2
 8012216:	4a7a      	ldr	r2, [pc, #488]	; (8012400 <CAD_StateMachine+0x208>)
 8012218:	189b      	adds	r3, r3, r2
 801221a:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801221c:	2302      	movs	r3, #2
 801221e:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	2200      	movs	r2, #0
 8012224:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8012226:	187b      	adds	r3, r7, r1
 8012228:	781a      	ldrb	r2, [r3, #0]
 801222a:	4976      	ldr	r1, [pc, #472]	; (8012404 <CAD_StateMachine+0x20c>)
 801222c:	0013      	movs	r3, r2
 801222e:	011b      	lsls	r3, r3, #4
 8012230:	1a9b      	subs	r3, r3, r2
 8012232:	009b      	lsls	r3, r3, #2
 8012234:	18cb      	adds	r3, r1, r3
 8012236:	3310      	adds	r3, #16
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	2210      	movs	r2, #16
 801223e:	4013      	ands	r3, r2
 8012240:	b2db      	uxtb	r3, r3
 8012242:	2b00      	cmp	r3, #0
 8012244:	d001      	beq.n	801224a <CAD_StateMachine+0x52>
  {
    return _timing;
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	e0d6      	b.n	80123f8 <CAD_StateMachine+0x200>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	227f      	movs	r2, #127	; 0x7f
 8012250:	4393      	bics	r3, r2
 8012252:	b2db      	uxtb	r3, r3
 8012254:	2b00      	cmp	r3, #0
 8012256:	d01b      	beq.n	8012290 <CAD_StateMachine+0x98>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	781a      	ldrb	r2, [r3, #0]
 801225c:	217f      	movs	r1, #127	; 0x7f
 801225e:	400a      	ands	r2, r1
 8012260:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	785a      	ldrb	r2, [r3, #1]
 8012266:	213e      	movs	r1, #62	; 0x3e
 8012268:	438a      	bics	r2, r1
 801226a:	1c11      	adds	r1, r2, #0
 801226c:	2218      	movs	r2, #24
 801226e:	430a      	orrs	r2, r1
 8012270:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	785b      	ldrb	r3, [r3, #1]
 8012276:	069b      	lsls	r3, r3, #26
 8012278:	0edb      	lsrs	r3, r3, #27
 801227a:	b2db      	uxtb	r3, r3
 801227c:	001a      	movs	r2, r3
 801227e:	230f      	movs	r3, #15
 8012280:	18fb      	adds	r3, r7, r3
 8012282:	7819      	ldrb	r1, [r3, #0]
 8012284:	2300      	movs	r3, #0
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	2300      	movs	r3, #0
 801228a:	2005      	movs	r0, #5
 801228c:	f7ff fbe6 	bl	8011a5c <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	785b      	ldrb	r3, [r3, #1]
 8012294:	069b      	lsls	r3, r3, #26
 8012296:	0edb      	lsrs	r3, r3, #27
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b0d      	cmp	r3, #13
 801229c:	d05c      	beq.n	8012358 <CAD_StateMachine+0x160>
 801229e:	dc72      	bgt.n	8012386 <CAD_StateMachine+0x18e>
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d002      	beq.n	80122aa <CAD_StateMachine+0xb2>
 80122a4:	2b0c      	cmp	r3, #12
 80122a6:	d02b      	beq.n	8012300 <CAD_StateMachine+0x108>
 80122a8:	e06d      	b.n	8012386 <CAD_StateMachine+0x18e>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 80122aa:	240f      	movs	r4, #15
 80122ac:	193b      	adds	r3, r7, r4
 80122ae:	781a      	ldrb	r2, [r3, #0]
 80122b0:	4954      	ldr	r1, [pc, #336]	; (8012404 <CAD_StateMachine+0x20c>)
 80122b2:	0013      	movs	r3, r2
 80122b4:	011b      	lsls	r3, r3, #4
 80122b6:	1a9b      	subs	r3, r3, r2
 80122b8:	009b      	lsls	r3, r3, #2
 80122ba:	585b      	ldr	r3, [r3, r1]
 80122bc:	0018      	movs	r0, r3
 80122be:	f7ff fdd5 	bl	8011e6c <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 80122c2:	193b      	adds	r3, r7, r4
 80122c4:	781a      	ldrb	r2, [r3, #0]
 80122c6:	494f      	ldr	r1, [pc, #316]	; (8012404 <CAD_StateMachine+0x20c>)
 80122c8:	0013      	movs	r3, r2
 80122ca:	011b      	lsls	r3, r3, #4
 80122cc:	1a9b      	subs	r3, r3, r2
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	585b      	ldr	r3, [r3, r1]
 80122d2:	0018      	movs	r0, r3
 80122d4:	f7ff fdd9 	bl	8011e8a <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 80122d8:	193b      	adds	r3, r7, r4
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d106      	bne.n	80122ee <CAD_StateMachine+0xf6>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 80122e0:	2102      	movs	r1, #2
 80122e2:	2008      	movs	r0, #8
 80122e4:	f7ff fd1c 	bl	8011d20 <__NVIC_SetPriority>
 80122e8:	2008      	movs	r0, #8
 80122ea:	f7ff fcff 	bl	8011cec <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	785a      	ldrb	r2, [r3, #1]
 80122f2:	213e      	movs	r1, #62	; 0x3e
 80122f4:	438a      	bics	r2, r1
 80122f6:	1c11      	adds	r1, r2, #0
 80122f8:	2202      	movs	r2, #2
 80122fa:	430a      	orrs	r2, r1
 80122fc:	705a      	strb	r2, [r3, #1]
      break;
 80122fe:	e04f      	b.n	80123a0 <CAD_StateMachine+0x1a8>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8012300:	240f      	movs	r4, #15
 8012302:	193b      	adds	r3, r7, r4
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	0018      	movs	r0, r3
 8012308:	f001 fcfc 	bl	8013d04 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 801230c:	193b      	adds	r3, r7, r4
 801230e:	781a      	ldrb	r2, [r3, #0]
 8012310:	493c      	ldr	r1, [pc, #240]	; (8012404 <CAD_StateMachine+0x20c>)
 8012312:	0013      	movs	r3, r2
 8012314:	011b      	lsls	r3, r3, #4
 8012316:	1a9b      	subs	r3, r3, r2
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	18cb      	adds	r3, r1, r3
 801231c:	3334      	adds	r3, #52	; 0x34
 801231e:	2200      	movs	r2, #0
 8012320:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2200      	movs	r2, #0
 8012326:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	781a      	ldrb	r2, [r3, #0]
 801232c:	2103      	movs	r1, #3
 801232e:	438a      	bics	r2, r1
 8012330:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	2201      	movs	r2, #1
 8012336:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8012338:	f7f6 fee6 	bl	8009108 <HAL_GetTick>
 801233c:	0002      	movs	r2, r0
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8012342:	231a      	movs	r3, #26
 8012344:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	785a      	ldrb	r2, [r3, #1]
 801234a:	213e      	movs	r1, #62	; 0x3e
 801234c:	438a      	bics	r2, r1
 801234e:	1c11      	adds	r1, r2, #0
 8012350:	221a      	movs	r2, #26
 8012352:	430a      	orrs	r2, r1
 8012354:	705a      	strb	r2, [r3, #1]
      break;
 8012356:	e023      	b.n	80123a0 <CAD_StateMachine+0x1a8>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8012358:	f7f6 fed6 	bl	8009108 <HAL_GetTick>
 801235c:	0002      	movs	r2, r0
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	685b      	ldr	r3, [r3, #4]
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	2b1a      	cmp	r3, #26
 8012366:	d91a      	bls.n	801239e <CAD_StateMachine+0x1a6>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 8012368:	230f      	movs	r3, #15
 801236a:	18fb      	adds	r3, r7, r3
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	0018      	movs	r0, r3
 8012370:	f001 fc18 	bl	8013ba4 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	785a      	ldrb	r2, [r3, #1]
 8012378:	213e      	movs	r1, #62	; 0x3e
 801237a:	438a      	bics	r2, r1
 801237c:	1c11      	adds	r1, r2, #0
 801237e:	2202      	movs	r2, #2
 8012380:	430a      	orrs	r2, r1
 8012382:	705a      	strb	r2, [r3, #1]
      }
      break;
 8012384:	e00b      	b.n	801239e <CAD_StateMachine+0x1a6>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	689b      	ldr	r3, [r3, #8]
 801238a:	687c      	ldr	r4, [r7, #4]
 801238c:	68b9      	ldr	r1, [r7, #8]
 801238e:	220f      	movs	r2, #15
 8012390:	18ba      	adds	r2, r7, r2
 8012392:	7810      	ldrb	r0, [r2, #0]
 8012394:	0022      	movs	r2, r4
 8012396:	4798      	blx	r3
 8012398:	0003      	movs	r3, r0
 801239a:	617b      	str	r3, [r7, #20]
      break;
 801239c:	e000      	b.n	80123a0 <CAD_StateMachine+0x1a8>
      break;
 801239e:	46c0      	nop			; (mov r8, r8)
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	785b      	ldrb	r3, [r3, #1]
 80123a4:	069b      	lsls	r3, r3, #26
 80123a6:	0edb      	lsrs	r3, r3, #27
 80123a8:	b2da      	uxtb	r2, r3
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	789b      	ldrb	r3, [r3, #2]
 80123ae:	069b      	lsls	r3, r3, #26
 80123b0:	0edb      	lsrs	r3, r3, #27
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d01e      	beq.n	80123f6 <CAD_StateMachine+0x1fe>
  {
    _handle->pstate = _handle->cstate;
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	785b      	ldrb	r3, [r3, #1]
 80123bc:	069b      	lsls	r3, r3, #26
 80123be:	0edb      	lsrs	r3, r3, #27
 80123c0:	b2da      	uxtb	r2, r3
 80123c2:	693b      	ldr	r3, [r7, #16]
 80123c4:	211f      	movs	r1, #31
 80123c6:	400a      	ands	r2, r1
 80123c8:	1890      	adds	r0, r2, r2
 80123ca:	789a      	ldrb	r2, [r3, #2]
 80123cc:	213e      	movs	r1, #62	; 0x3e
 80123ce:	438a      	bics	r2, r1
 80123d0:	1c11      	adds	r1, r2, #0
 80123d2:	1c02      	adds	r2, r0, #0
 80123d4:	430a      	orrs	r2, r1
 80123d6:	709a      	strb	r2, [r3, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	785b      	ldrb	r3, [r3, #1]
 80123dc:	069b      	lsls	r3, r3, #26
 80123de:	0edb      	lsrs	r3, r3, #27
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	001a      	movs	r2, r3
 80123e4:	230f      	movs	r3, #15
 80123e6:	18fb      	adds	r3, r7, r3
 80123e8:	7819      	ldrb	r1, [r3, #0]
 80123ea:	2300      	movs	r3, #0
 80123ec:	9300      	str	r3, [sp, #0]
 80123ee:	2300      	movs	r3, #0
 80123f0:	2005      	movs	r0, #5
 80123f2:	f7ff fb33 	bl	8011a5c <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 80123f6:	697b      	ldr	r3, [r7, #20]
}
 80123f8:	0018      	movs	r0, r3
 80123fa:	46bd      	mov	sp, r7
 80123fc:	b007      	add	sp, #28
 80123fe:	bd90      	pop	{r4, r7, pc}
 8012400:	20000550 	.word	0x20000550
 8012404:	20000568 	.word	0x20000568

08012408 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b086      	sub	sp, #24
 801240c:	af00      	add	r7, sp, #0
 801240e:	0002      	movs	r2, r0
 8012410:	1dfb      	adds	r3, r7, #7
 8012412:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8012414:	1dfb      	adds	r3, r7, #7
 8012416:	781a      	ldrb	r2, [r3, #0]
 8012418:	0013      	movs	r3, r2
 801241a:	005b      	lsls	r3, r3, #1
 801241c:	189b      	adds	r3, r3, r2
 801241e:	009b      	lsls	r3, r3, #2
 8012420:	4a45      	ldr	r2, [pc, #276]	; (8012538 <CAD_Check_HW_SNK+0x130>)
 8012422:	189b      	adds	r3, r3, r2
 8012424:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8012426:	1dfb      	adds	r3, r7, #7
 8012428:	781a      	ldrb	r2, [r3, #0]
 801242a:	4944      	ldr	r1, [pc, #272]	; (801253c <CAD_Check_HW_SNK+0x134>)
 801242c:	0013      	movs	r3, r2
 801242e:	011b      	lsls	r3, r3, #4
 8012430:	1a9b      	subs	r3, r3, r2
 8012432:	009b      	lsls	r3, r3, #2
 8012434:	585b      	ldr	r3, [r3, r1]
 8012436:	695a      	ldr	r2, [r3, #20]
 8012438:	23c0      	movs	r3, #192	; 0xc0
 801243a:	029b      	lsls	r3, r3, #10
 801243c:	4013      	ands	r3, r2
 801243e:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8012440:	1dfb      	adds	r3, r7, #7
 8012442:	781a      	ldrb	r2, [r3, #0]
 8012444:	493d      	ldr	r1, [pc, #244]	; (801253c <CAD_Check_HW_SNK+0x134>)
 8012446:	0013      	movs	r3, r2
 8012448:	011b      	lsls	r3, r3, #4
 801244a:	1a9b      	subs	r3, r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	585b      	ldr	r3, [r3, r1]
 8012450:	695a      	ldr	r2, [r3, #20]
 8012452:	23c0      	movs	r3, #192	; 0xc0
 8012454:	031b      	lsls	r3, r3, #12
 8012456:	4013      	ands	r3, r2
 8012458:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	781a      	ldrb	r2, [r3, #0]
 801245e:	2103      	movs	r1, #3
 8012460:	438a      	bics	r2, r1
 8012462:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	781a      	ldrb	r2, [r3, #0]
 8012468:	211c      	movs	r1, #28
 801246a:	438a      	bics	r2, r1
 801246c:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d02c      	beq.n	80124ce <CAD_Check_HW_SNK+0xc6>
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d129      	bne.n	80124ce <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	781a      	ldrb	r2, [r3, #0]
 801247e:	211c      	movs	r1, #28
 8012480:	438a      	bics	r2, r1
 8012482:	1c11      	adds	r1, r2, #0
 8012484:	2204      	movs	r2, #4
 8012486:	430a      	orrs	r2, r1
 8012488:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	781a      	ldrb	r2, [r3, #0]
 801248e:	2103      	movs	r1, #3
 8012490:	438a      	bics	r2, r1
 8012492:	1c11      	adds	r1, r2, #0
 8012494:	2201      	movs	r2, #1
 8012496:	430a      	orrs	r2, r1
 8012498:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	0c18      	lsrs	r0, r3, #16
 801249e:	1dfb      	adds	r3, r7, #7
 80124a0:	781a      	ldrb	r2, [r3, #0]
 80124a2:	4926      	ldr	r1, [pc, #152]	; (801253c <CAD_Check_HW_SNK+0x134>)
 80124a4:	0013      	movs	r3, r2
 80124a6:	011b      	lsls	r3, r3, #4
 80124a8:	1a9b      	subs	r3, r3, r2
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	18cb      	adds	r3, r1, r3
 80124ae:	3310      	adds	r3, #16
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	1c01      	adds	r1, r0, #0
 80124b4:	2203      	movs	r2, #3
 80124b6:	400a      	ands	r2, r1
 80124b8:	b2d2      	uxtb	r2, r2
 80124ba:	2103      	movs	r1, #3
 80124bc:	400a      	ands	r2, r1
 80124be:	0090      	lsls	r0, r2, #2
 80124c0:	789a      	ldrb	r2, [r3, #2]
 80124c2:	210c      	movs	r1, #12
 80124c4:	438a      	bics	r2, r1
 80124c6:	1c11      	adds	r1, r2, #0
 80124c8:	1c02      	adds	r2, r0, #0
 80124ca:	430a      	orrs	r2, r1
 80124cc:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d12c      	bne.n	801252e <CAD_Check_HW_SNK+0x126>
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d029      	beq.n	801252e <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	781a      	ldrb	r2, [r3, #0]
 80124de:	211c      	movs	r1, #28
 80124e0:	438a      	bics	r2, r1
 80124e2:	1c11      	adds	r1, r2, #0
 80124e4:	2204      	movs	r2, #4
 80124e6:	430a      	orrs	r2, r1
 80124e8:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	781a      	ldrb	r2, [r3, #0]
 80124ee:	2103      	movs	r1, #3
 80124f0:	438a      	bics	r2, r1
 80124f2:	1c11      	adds	r1, r2, #0
 80124f4:	2202      	movs	r2, #2
 80124f6:	430a      	orrs	r2, r1
 80124f8:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	0c98      	lsrs	r0, r3, #18
 80124fe:	1dfb      	adds	r3, r7, #7
 8012500:	781a      	ldrb	r2, [r3, #0]
 8012502:	490e      	ldr	r1, [pc, #56]	; (801253c <CAD_Check_HW_SNK+0x134>)
 8012504:	0013      	movs	r3, r2
 8012506:	011b      	lsls	r3, r3, #4
 8012508:	1a9b      	subs	r3, r3, r2
 801250a:	009b      	lsls	r3, r3, #2
 801250c:	18cb      	adds	r3, r1, r3
 801250e:	3310      	adds	r3, #16
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	1c01      	adds	r1, r0, #0
 8012514:	2203      	movs	r2, #3
 8012516:	400a      	ands	r2, r1
 8012518:	b2d2      	uxtb	r2, r2
 801251a:	2103      	movs	r1, #3
 801251c:	400a      	ands	r2, r1
 801251e:	0090      	lsls	r0, r2, #2
 8012520:	789a      	ldrb	r2, [r3, #2]
 8012522:	210c      	movs	r1, #12
 8012524:	438a      	bics	r2, r1
 8012526:	1c11      	adds	r1, r2, #0
 8012528:	1c02      	adds	r2, r0, #0
 801252a:	430a      	orrs	r2, r1
 801252c:	709a      	strb	r2, [r3, #2]
  }
}
 801252e:	46c0      	nop			; (mov r8, r8)
 8012530:	46bd      	mov	sp, r7
 8012532:	b006      	add	sp, #24
 8012534:	bd80      	pop	{r7, pc}
 8012536:	46c0      	nop			; (mov r8, r8)
 8012538:	20000550 	.word	0x20000550
 801253c:	20000568 	.word	0x20000568

08012540 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b084      	sub	sp, #16
 8012544:	af00      	add	r7, sp, #0
 8012546:	0002      	movs	r2, r0
 8012548:	1dfb      	adds	r3, r7, #7
 801254a:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801254c:	1dfb      	adds	r3, r7, #7
 801254e:	781a      	ldrb	r2, [r3, #0]
 8012550:	0013      	movs	r3, r2
 8012552:	005b      	lsls	r3, r3, #1
 8012554:	189b      	adds	r3, r3, r2
 8012556:	009b      	lsls	r3, r3, #2
 8012558:	4a21      	ldr	r2, [pc, #132]	; (80125e0 <ManageStateDetached_SNK+0xa0>)
 801255a:	189b      	adds	r3, r3, r2
 801255c:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801255e:	2302      	movs	r3, #2
 8012560:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8012562:	1dfb      	adds	r3, r7, #7
 8012564:	781b      	ldrb	r3, [r3, #0]
 8012566:	0018      	movs	r0, r3
 8012568:	f7ff ff4e 	bl	8012408 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	221c      	movs	r2, #28
 8012572:	4013      	ands	r3, r2
 8012574:	b2db      	uxtb	r3, r3
 8012576:	2b00      	cmp	r3, #0
 8012578:	d103      	bne.n	8012582 <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 801257a:	2301      	movs	r3, #1
 801257c:	425b      	negs	r3, r3
 801257e:	60fb      	str	r3, [r7, #12]
 8012580:	e029      	b.n	80125d6 <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8012582:	f7f6 fdc1 	bl	8009108 <HAL_GetTick>
 8012586:	0002      	movs	r2, r0
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	785a      	ldrb	r2, [r3, #1]
 8012590:	213e      	movs	r1, #62	; 0x3e
 8012592:	438a      	bics	r2, r1
 8012594:	1c11      	adds	r1, r2, #0
 8012596:	2204      	movs	r2, #4
 8012598:	430a      	orrs	r2, r1
 801259a:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 801259c:	2001      	movs	r0, #1
 801259e:	f7f6 fdbd 	bl	800911c <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 80125a2:	1dfb      	adds	r3, r7, #7
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	0018      	movs	r0, r3
 80125a8:	f7ff ff2e 	bl	8012408 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	221c      	movs	r2, #28
 80125b2:	4013      	ands	r3, r2
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d108      	bne.n	80125cc <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	785a      	ldrb	r2, [r3, #1]
 80125be:	213e      	movs	r1, #62	; 0x3e
 80125c0:	438a      	bics	r2, r1
 80125c2:	1c11      	adds	r1, r2, #0
 80125c4:	2202      	movs	r2, #2
 80125c6:	430a      	orrs	r2, r1
 80125c8:	705a      	strb	r2, [r3, #1]
 80125ca:	e004      	b.n	80125d6 <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 80125cc:	1dfb      	adds	r3, r7, #7
 80125ce:	781b      	ldrb	r3, [r3, #0]
 80125d0:	0018      	movs	r0, r3
 80125d2:	f009 f837 	bl	801b644 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 80125d6:	68fb      	ldr	r3, [r7, #12]
}
 80125d8:	0018      	movs	r0, r3
 80125da:	46bd      	mov	sp, r7
 80125dc:	b004      	add	sp, #16
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	20000550 	.word	0x20000550

080125e4 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80125e4:	b590      	push	{r4, r7, lr}
 80125e6:	b089      	sub	sp, #36	; 0x24
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	60b9      	str	r1, [r7, #8]
 80125ec:	607a      	str	r2, [r7, #4]
 80125ee:	240f      	movs	r4, #15
 80125f0:	193b      	adds	r3, r7, r4
 80125f2:	1c02      	adds	r2, r0, #0
 80125f4:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80125f6:	193b      	adds	r3, r7, r4
 80125f8:	781a      	ldrb	r2, [r3, #0]
 80125fa:	0013      	movs	r3, r2
 80125fc:	005b      	lsls	r3, r3, #1
 80125fe:	189b      	adds	r3, r3, r2
 8012600:	009b      	lsls	r3, r3, #2
 8012602:	4a3e      	ldr	r2, [pc, #248]	; (80126fc <ManageStateAttachedWait_SNK+0x118>)
 8012604:	189b      	adds	r3, r3, r2
 8012606:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8012608:	2302      	movs	r3, #2
 801260a:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 801260c:	f7f6 fd7c 	bl	8009108 <HAL_GetTick>
 8012610:	0002      	movs	r2, r0
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	1ad3      	subs	r3, r2, r3
 8012618:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 801261a:	193b      	adds	r3, r7, r4
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	0018      	movs	r0, r3
 8012620:	f7ff fef2 	bl	8012408 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8012624:	69bb      	ldr	r3, [r7, #24]
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	221c      	movs	r2, #28
 801262a:	4013      	ands	r3, r2
 801262c:	b2db      	uxtb	r3, r3
 801262e:	2b04      	cmp	r3, #4
 8012630:	d130      	bne.n	8012694 <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	2b78      	cmp	r3, #120	; 0x78
 8012636:	d927      	bls.n	8012688 <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8012638:	193b      	adds	r3, r7, r4
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	2101      	movs	r1, #1
 801263e:	0018      	movs	r0, r3
 8012640:	f007 fd26 	bl	801a090 <USBPD_PWR_IF_GetVBUSStatus>
 8012644:	0003      	movs	r3, r0
 8012646:	2b01      	cmp	r3, #1
 8012648:	d11e      	bne.n	8012688 <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 801264a:	69bb      	ldr	r3, [r7, #24]
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	079b      	lsls	r3, r3, #30
 8012650:	0f9b      	lsrs	r3, r3, #30
 8012652:	b2db      	uxtb	r3, r3
 8012654:	001a      	movs	r2, r3
 8012656:	193b      	adds	r3, r7, r4
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	0011      	movs	r1, r2
 801265c:	0018      	movs	r0, r3
 801265e:	f001 fbf3 	bl	8013e48 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8012662:	69bb      	ldr	r3, [r7, #24]
 8012664:	785a      	ldrb	r2, [r3, #1]
 8012666:	213e      	movs	r1, #62	; 0x3e
 8012668:	438a      	bics	r2, r1
 801266a:	1c11      	adds	r1, r2, #0
 801266c:	2206      	movs	r2, #6
 801266e:	430a      	orrs	r2, r1
 8012670:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	2202      	movs	r2, #2
 8012676:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	079b      	lsls	r3, r3, #30
 801267e:	0f9b      	lsrs	r3, r3, #30
 8012680:	b2db      	uxtb	r3, r3
 8012682:	001a      	movs	r2, r3
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	781a      	ldrb	r2, [r3, #0]
 801268c:	2120      	movs	r1, #32
 801268e:	438a      	bics	r2, r1
 8012690:	701a      	strb	r2, [r3, #0]
 8012692:	e02e      	b.n	80126f2 <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	2220      	movs	r2, #32
 801269a:	4013      	ands	r3, r2
 801269c:	b2db      	uxtb	r3, r3
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d10c      	bne.n	80126bc <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 80126a2:	f7f6 fd31 	bl	8009108 <HAL_GetTick>
 80126a6:	0002      	movs	r2, r0
 80126a8:	69bb      	ldr	r3, [r7, #24]
 80126aa:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	781a      	ldrb	r2, [r3, #0]
 80126b0:	2120      	movs	r1, #32
 80126b2:	430a      	orrs	r2, r1
 80126b4:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 80126b6:	230c      	movs	r3, #12
 80126b8:	61fb      	str	r3, [r7, #28]
 80126ba:	e01a      	b.n	80126f2 <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 80126bc:	f7f6 fd24 	bl	8009108 <HAL_GetTick>
 80126c0:	0002      	movs	r2, r0
 80126c2:	69bb      	ldr	r3, [r7, #24]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	1ad3      	subs	r3, r2, r3
 80126c8:	2b0c      	cmp	r3, #12
 80126ca:	d912      	bls.n	80126f2 <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	781a      	ldrb	r2, [r3, #0]
 80126d0:	2120      	movs	r1, #32
 80126d2:	438a      	bics	r2, r1
 80126d4:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 80126d6:	69bb      	ldr	r3, [r7, #24]
 80126d8:	785a      	ldrb	r2, [r3, #1]
 80126da:	213e      	movs	r1, #62	; 0x3e
 80126dc:	438a      	bics	r2, r1
 80126de:	1c11      	adds	r1, r2, #0
 80126e0:	2202      	movs	r2, #2
 80126e2:	430a      	orrs	r2, r1
 80126e4:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80126e6:	230f      	movs	r3, #15
 80126e8:	18fb      	adds	r3, r7, r3
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	0018      	movs	r0, r3
 80126ee:	f008 ffc7 	bl	801b680 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 80126f2:	69fb      	ldr	r3, [r7, #28]
}
 80126f4:	0018      	movs	r0, r3
 80126f6:	46bd      	mov	sp, r7
 80126f8:	b009      	add	sp, #36	; 0x24
 80126fa:	bd90      	pop	{r4, r7, pc}
 80126fc:	20000550 	.word	0x20000550

08012700 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8012700:	b590      	push	{r4, r7, lr}
 8012702:	b089      	sub	sp, #36	; 0x24
 8012704:	af00      	add	r7, sp, #0
 8012706:	60b9      	str	r1, [r7, #8]
 8012708:	607a      	str	r2, [r7, #4]
 801270a:	210f      	movs	r1, #15
 801270c:	187b      	adds	r3, r7, r1
 801270e:	1c02      	adds	r2, r0, #0
 8012710:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8012712:	0008      	movs	r0, r1
 8012714:	183b      	adds	r3, r7, r0
 8012716:	781a      	ldrb	r2, [r3, #0]
 8012718:	0013      	movs	r3, r2
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	189b      	adds	r3, r3, r2
 801271e:	009b      	lsls	r3, r3, #2
 8012720:	4a2e      	ldr	r2, [pc, #184]	; (80127dc <ManageStateAttached_SNK+0xdc>)
 8012722:	189b      	adds	r3, r3, r2
 8012724:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8012726:	2302      	movs	r3, #2
 8012728:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 801272a:	2300      	movs	r3, #0
 801272c:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 801272e:	183b      	adds	r3, r7, r0
 8012730:	781a      	ldrb	r2, [r3, #0]
 8012732:	492b      	ldr	r1, [pc, #172]	; (80127e0 <ManageStateAttached_SNK+0xe0>)
 8012734:	0013      	movs	r3, r2
 8012736:	011b      	lsls	r3, r3, #4
 8012738:	1a9b      	subs	r3, r3, r2
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	18cb      	adds	r3, r1, r3
 801273e:	3334      	adds	r3, #52	; 0x34
 8012740:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8012742:	2b01      	cmp	r3, #1
 8012744:	d10c      	bne.n	8012760 <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8012746:	183b      	adds	r3, r7, r0
 8012748:	781a      	ldrb	r2, [r3, #0]
 801274a:	4925      	ldr	r1, [pc, #148]	; (80127e0 <ManageStateAttached_SNK+0xe0>)
 801274c:	0013      	movs	r3, r2
 801274e:	011b      	lsls	r3, r3, #4
 8012750:	1a9b      	subs	r3, r3, r2
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	585b      	ldr	r3, [r3, r1]
 8012756:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8012758:	23c0      	movs	r3, #192	; 0xc0
 801275a:	029b      	lsls	r3, r3, #10
 801275c:	4013      	ands	r3, r2
 801275e:	e00c      	b.n	801277a <ManageStateAttached_SNK+0x7a>
 8012760:	230f      	movs	r3, #15
 8012762:	18fb      	adds	r3, r7, r3
 8012764:	781a      	ldrb	r2, [r3, #0]
 8012766:	491e      	ldr	r1, [pc, #120]	; (80127e0 <ManageStateAttached_SNK+0xe0>)
 8012768:	0013      	movs	r3, r2
 801276a:	011b      	lsls	r3, r3, #4
 801276c:	1a9b      	subs	r3, r3, r2
 801276e:	009b      	lsls	r3, r3, #2
 8012770:	585b      	ldr	r3, [r3, r1]
 8012772:	695a      	ldr	r2, [r3, #20]
 8012774:	23c0      	movs	r3, #192	; 0xc0
 8012776:	031b      	lsls	r3, r3, #12
 8012778:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 801277a:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 801277c:	240f      	movs	r4, #15
 801277e:	193b      	adds	r3, r7, r4
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	2102      	movs	r1, #2
 8012784:	0018      	movs	r0, r3
 8012786:	f007 fc83 	bl	801a090 <USBPD_PWR_IF_GetVBUSStatus>
 801278a:	0003      	movs	r3, r0
 801278c:	2b01      	cmp	r3, #1
 801278e:	d11e      	bne.n	80127ce <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8012790:	697a      	ldr	r2, [r7, #20]
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	429a      	cmp	r2, r3
 8012796:	d11a      	bne.n	80127ce <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8012798:	193b      	adds	r3, r7, r4
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	0018      	movs	r0, r3
 801279e:	f001 fcb5 	bl	801410c <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	781a      	ldrb	r2, [r3, #0]
 80127a6:	211c      	movs	r1, #28
 80127a8:	438a      	bics	r2, r1
 80127aa:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	785a      	ldrb	r2, [r3, #1]
 80127b0:	213e      	movs	r1, #62	; 0x3e
 80127b2:	438a      	bics	r2, r1
 80127b4:	1c11      	adds	r1, r2, #0
 80127b6:	2202      	movs	r2, #2
 80127b8:	430a      	orrs	r2, r1
 80127ba:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	2201      	movs	r2, #1
 80127c0:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2200      	movs	r2, #0
 80127c6:	601a      	str	r2, [r3, #0]
    _timing = 0;
 80127c8:	2300      	movs	r3, #0
 80127ca:	61fb      	str	r3, [r7, #28]
 80127cc:	e001      	b.n	80127d2 <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 80127ce:	230a      	movs	r3, #10
 80127d0:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 80127d2:	69fb      	ldr	r3, [r7, #28]
}
 80127d4:	0018      	movs	r0, r3
 80127d6:	46bd      	mov	sp, r7
 80127d8:	b009      	add	sp, #36	; 0x24
 80127da:	bd90      	pop	{r4, r7, pc}
 80127dc:	20000550 	.word	0x20000550
 80127e0:	20000568 	.word	0x20000568

080127e4 <LL_AHB1_GRP1_EnableClock>:
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80127ec:	4b07      	ldr	r3, [pc, #28]	; (801280c <LL_AHB1_GRP1_EnableClock+0x28>)
 80127ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80127f0:	4b06      	ldr	r3, [pc, #24]	; (801280c <LL_AHB1_GRP1_EnableClock+0x28>)
 80127f2:	687a      	ldr	r2, [r7, #4]
 80127f4:	430a      	orrs	r2, r1
 80127f6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80127f8:	4b04      	ldr	r3, [pc, #16]	; (801280c <LL_AHB1_GRP1_EnableClock+0x28>)
 80127fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127fc:	687a      	ldr	r2, [r7, #4]
 80127fe:	4013      	ands	r3, r2
 8012800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012802:	68fb      	ldr	r3, [r7, #12]
}
 8012804:	46c0      	nop			; (mov r8, r8)
 8012806:	46bd      	mov	sp, r7
 8012808:	b004      	add	sp, #16
 801280a:	bd80      	pop	{r7, pc}
 801280c:	40021000 	.word	0x40021000

08012810 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	0002      	movs	r2, r0
 8012818:	1dfb      	adds	r3, r7, #7
 801281a:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 801281c:	4b02      	ldr	r3, [pc, #8]	; (8012828 <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 801281e:	0018      	movs	r0, r3
 8012820:	46bd      	mov	sp, r7
 8012822:	b002      	add	sp, #8
 8012824:	bd80      	pop	{r7, pc}
 8012826:	46c0      	nop			; (mov r8, r8)
 8012828:	4000a000 	.word	0x4000a000

0801282c <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 801282c:	b590      	push	{r4, r7, lr}
 801282e:	b08f      	sub	sp, #60	; 0x3c
 8012830:	af00      	add	r7, sp, #0
 8012832:	0002      	movs	r2, r0
 8012834:	1dfb      	adds	r3, r7, #7
 8012836:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8012838:	240c      	movs	r4, #12
 801283a:	193b      	adds	r3, r7, r4
 801283c:	0018      	movs	r0, r3
 801283e:	f7fc fca9 	bl	800f194 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8012842:	193b      	adds	r3, r7, r4
 8012844:	2200      	movs	r2, #0
 8012846:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8012848:	193b      	adds	r3, r7, r4
 801284a:	2200      	movs	r2, #0
 801284c:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 801284e:	193b      	adds	r3, r7, r4
 8012850:	2200      	movs	r2, #0
 8012852:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8012854:	193b      	adds	r3, r7, r4
 8012856:	2280      	movs	r2, #128	; 0x80
 8012858:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 801285a:	193b      	adds	r3, r7, r4
 801285c:	2200      	movs	r2, #0
 801285e:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8012860:	193b      	adds	r3, r7, r4
 8012862:	2200      	movs	r2, #0
 8012864:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8012866:	193b      	adds	r3, r7, r4
 8012868:	2200      	movs	r2, #0
 801286a:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 801286c:	193b      	adds	r3, r7, r4
 801286e:	2200      	movs	r2, #0
 8012870:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8012872:	193b      	adds	r3, r7, r4
 8012874:	2200      	movs	r2, #0
 8012876:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8012878:	193b      	adds	r3, r7, r4
 801287a:	2280      	movs	r2, #128	; 0x80
 801287c:	0192      	lsls	r2, r2, #6
 801287e:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 8012880:	1dfb      	adds	r3, r7, #7
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d10c      	bne.n	80128a2 <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 8012888:	2001      	movs	r0, #1
 801288a:	f7ff ffab 	bl	80127e4 <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 801288e:	193b      	adds	r3, r7, r4
 8012890:	223a      	movs	r2, #58	; 0x3a
 8012892:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8012894:	193b      	adds	r3, r7, r4
 8012896:	4806      	ldr	r0, [pc, #24]	; (80128b0 <USBPD_HW_Init_DMARxInstance+0x84>)
 8012898:	001a      	movs	r2, r3
 801289a:	2100      	movs	r1, #0
 801289c:	f7fc fc3a 	bl	800f114 <LL_DMA_Init>
      break;
 80128a0:	e000      	b.n	80128a4 <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 80128a2:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 80128a4:	4b03      	ldr	r3, [pc, #12]	; (80128b4 <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 80128a6:	0018      	movs	r0, r3
 80128a8:	46bd      	mov	sp, r7
 80128aa:	b00f      	add	sp, #60	; 0x3c
 80128ac:	bd90      	pop	{r4, r7, pc}
 80128ae:	46c0      	nop			; (mov r8, r8)
 80128b0:	40020000 	.word	0x40020000
 80128b4:	40020008 	.word	0x40020008

080128b8 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
 80128be:	0002      	movs	r2, r0
 80128c0:	1dfb      	adds	r3, r7, #7
 80128c2:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 80128c4:	46c0      	nop			; (mov r8, r8)
 80128c6:	46bd      	mov	sp, r7
 80128c8:	b002      	add	sp, #8
 80128ca:	bd80      	pop	{r7, pc}

080128cc <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 80128cc:	b590      	push	{r4, r7, lr}
 80128ce:	b08f      	sub	sp, #60	; 0x3c
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	0002      	movs	r2, r0
 80128d4:	1dfb      	adds	r3, r7, #7
 80128d6:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 80128d8:	240c      	movs	r4, #12
 80128da:	193b      	adds	r3, r7, r4
 80128dc:	0018      	movs	r0, r3
 80128de:	f7fc fc59 	bl	800f194 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80128e2:	193b      	adds	r3, r7, r4
 80128e4:	2210      	movs	r2, #16
 80128e6:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80128e8:	193b      	adds	r3, r7, r4
 80128ea:	2200      	movs	r2, #0
 80128ec:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80128ee:	193b      	adds	r3, r7, r4
 80128f0:	2200      	movs	r2, #0
 80128f2:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80128f4:	193b      	adds	r3, r7, r4
 80128f6:	2280      	movs	r2, #128	; 0x80
 80128f8:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80128fa:	193b      	adds	r3, r7, r4
 80128fc:	2200      	movs	r2, #0
 80128fe:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8012900:	193b      	adds	r3, r7, r4
 8012902:	2200      	movs	r2, #0
 8012904:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8012906:	193b      	adds	r3, r7, r4
 8012908:	2200      	movs	r2, #0
 801290a:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 801290c:	193b      	adds	r3, r7, r4
 801290e:	2200      	movs	r2, #0
 8012910:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8012912:	193b      	adds	r3, r7, r4
 8012914:	2200      	movs	r2, #0
 8012916:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 8012918:	1dfb      	adds	r3, r7, #7
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d110      	bne.n	8012942 <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8012920:	2001      	movs	r0, #1
 8012922:	f7ff ff5f 	bl	80127e4 <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8012926:	193b      	adds	r3, r7, r4
 8012928:	223b      	movs	r2, #59	; 0x3b
 801292a:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 801292c:	193b      	adds	r3, r7, r4
 801292e:	2280      	movs	r2, #128	; 0x80
 8012930:	0152      	lsls	r2, r2, #5
 8012932:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8012934:	193b      	adds	r3, r7, r4
 8012936:	4806      	ldr	r0, [pc, #24]	; (8012950 <USBPD_HW_Init_DMATxInstance+0x84>)
 8012938:	001a      	movs	r2, r3
 801293a:	2101      	movs	r1, #1
 801293c:	f7fc fbea 	bl	800f114 <LL_DMA_Init>
      break;
 8012940:	e000      	b.n	8012944 <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8012942:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8012944:	4b03      	ldr	r3, [pc, #12]	; (8012954 <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 8012946:	0018      	movs	r0, r3
 8012948:	46bd      	mov	sp, r7
 801294a:	b00f      	add	sp, #60	; 0x3c
 801294c:	bd90      	pop	{r4, r7, pc}
 801294e:	46c0      	nop			; (mov r8, r8)
 8012950:	40020000 	.word	0x40020000
 8012954:	4002001c 	.word	0x4002001c

08012958 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	0002      	movs	r2, r0
 8012960:	1dfb      	adds	r3, r7, #7
 8012962:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8012964:	46c0      	nop			; (mov r8, r8)
 8012966:	46bd      	mov	sp, r7
 8012968:	b002      	add	sp, #8
 801296a:	bd80      	pop	{r7, pc}

0801296c <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	0002      	movs	r2, r0
 8012974:	1dfb      	adds	r3, r7, #7
 8012976:	701a      	strb	r2, [r3, #0]
 8012978:	1dbb      	adds	r3, r7, #6
 801297a:	1c0a      	adds	r2, r1, #0
 801297c:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 801297e:	46c0      	nop			; (mov r8, r8)
  }
}
 8012980:	46c0      	nop			; (mov r8, r8)
 8012982:	46bd      	mov	sp, r7
 8012984:	b002      	add	sp, #8
 8012986:	bd80      	pop	{r7, pc}

08012988 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	699b      	ldr	r3, [r3, #24]
 8012994:	2280      	movs	r2, #128	; 0x80
 8012996:	0212      	lsls	r2, r2, #8
 8012998:	431a      	orrs	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	619a      	str	r2, [r3, #24]
}
 801299e:	46c0      	nop			; (mov r8, r8)
 80129a0:	46bd      	mov	sp, r7
 80129a2:	b002      	add	sp, #8
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 80129a6:	b580      	push	{r7, lr}
 80129a8:	b082      	sub	sp, #8
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	699b      	ldr	r3, [r3, #24]
 80129b2:	2280      	movs	r2, #128	; 0x80
 80129b4:	01d2      	lsls	r2, r2, #7
 80129b6:	431a      	orrs	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	619a      	str	r2, [r3, #24]
}
 80129bc:	46c0      	nop			; (mov r8, r8)
 80129be:	46bd      	mov	sp, r7
 80129c0:	b002      	add	sp, #8
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	699b      	ldr	r3, [r3, #24]
 80129d0:	2280      	movs	r2, #128	; 0x80
 80129d2:	0152      	lsls	r2, r2, #5
 80129d4:	431a      	orrs	r2, r3
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	619a      	str	r2, [r3, #24]
}
 80129da:	46c0      	nop			; (mov r8, r8)
 80129dc:	46bd      	mov	sp, r7
 80129de:	b002      	add	sp, #8
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b082      	sub	sp, #8
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	699b      	ldr	r3, [r3, #24]
 80129ee:	2280      	movs	r2, #128	; 0x80
 80129f0:	0112      	lsls	r2, r2, #4
 80129f2:	431a      	orrs	r2, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	619a      	str	r2, [r3, #24]
}
 80129f8:	46c0      	nop			; (mov r8, r8)
 80129fa:	46bd      	mov	sp, r7
 80129fc:	b002      	add	sp, #8
 80129fe:	bd80      	pop	{r7, pc}

08012a00 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	699b      	ldr	r3, [r3, #24]
 8012a0c:	2280      	movs	r2, #128	; 0x80
 8012a0e:	00d2      	lsls	r2, r2, #3
 8012a10:	431a      	orrs	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	619a      	str	r2, [r3, #24]
}
 8012a16:	46c0      	nop			; (mov r8, r8)
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	b002      	add	sp, #8
 8012a1c:	bd80      	pop	{r7, pc}

08012a1e <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8012a1e:	b580      	push	{r7, lr}
 8012a20:	b082      	sub	sp, #8
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	699b      	ldr	r3, [r3, #24]
 8012a2a:	2280      	movs	r2, #128	; 0x80
 8012a2c:	0092      	lsls	r2, r2, #2
 8012a2e:	431a      	orrs	r2, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	619a      	str	r2, [r3, #24]
}
 8012a34:	46c0      	nop			; (mov r8, r8)
 8012a36:	46bd      	mov	sp, r7
 8012a38:	b002      	add	sp, #8
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	699b      	ldr	r3, [r3, #24]
 8012a48:	2240      	movs	r2, #64	; 0x40
 8012a4a:	431a      	orrs	r2, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	619a      	str	r2, [r3, #24]
}
 8012a50:	46c0      	nop			; (mov r8, r8)
 8012a52:	46bd      	mov	sp, r7
 8012a54:	b002      	add	sp, #8
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	699b      	ldr	r3, [r3, #24]
 8012a64:	2220      	movs	r2, #32
 8012a66:	431a      	orrs	r2, r3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	619a      	str	r2, [r3, #24]
}
 8012a6c:	46c0      	nop			; (mov r8, r8)
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	b002      	add	sp, #8
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	699b      	ldr	r3, [r3, #24]
 8012a80:	2210      	movs	r2, #16
 8012a82:	431a      	orrs	r2, r3
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	619a      	str	r2, [r3, #24]
}
 8012a88:	46c0      	nop			; (mov r8, r8)
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	b002      	add	sp, #8
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	699b      	ldr	r3, [r3, #24]
 8012a9c:	2208      	movs	r2, #8
 8012a9e:	431a      	orrs	r2, r3
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	619a      	str	r2, [r3, #24]
}
 8012aa4:	46c0      	nop			; (mov r8, r8)
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	b002      	add	sp, #8
 8012aaa:	bd80      	pop	{r7, pc}

08012aac <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b082      	sub	sp, #8
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	699b      	ldr	r3, [r3, #24]
 8012ab8:	2204      	movs	r2, #4
 8012aba:	431a      	orrs	r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	619a      	str	r2, [r3, #24]
}
 8012ac0:	46c0      	nop			; (mov r8, r8)
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	b002      	add	sp, #8
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	699b      	ldr	r3, [r3, #24]
 8012ad4:	2202      	movs	r2, #2
 8012ad6:	431a      	orrs	r2, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	619a      	str	r2, [r3, #24]
}
 8012adc:	46c0      	nop			; (mov r8, r8)
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	b002      	add	sp, #8
 8012ae2:	bd80      	pop	{r7, pc}

08012ae4 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8012ae8:	2000      	movs	r0, #0
 8012aea:	f000 f803 	bl	8012af4 <PORTx_IRQHandler>
}
 8012aee:	46c0      	nop			; (mov r8, r8)
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	0002      	movs	r2, r0
 8012afc:	1dfb      	adds	r3, r7, #7
 8012afe:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8012b00:	1dfb      	adds	r3, r7, #7
 8012b02:	781a      	ldrb	r2, [r3, #0]
 8012b04:	49a6      	ldr	r1, [pc, #664]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012b06:	0013      	movs	r3, r2
 8012b08:	011b      	lsls	r3, r3, #4
 8012b0a:	1a9b      	subs	r3, r3, r2
 8012b0c:	009b      	lsls	r3, r3, #2
 8012b0e:	585b      	ldr	r3, [r3, r1]
 8012b10:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	695b      	ldr	r3, [r3, #20]
 8012b16:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	691b      	ldr	r3, [r3, #16]
 8012b1c:	68ba      	ldr	r2, [r7, #8]
 8012b1e:	4013      	ands	r3, r2
 8012b20:	d100      	bne.n	8012b24 <PORTx_IRQHandler+0x30>
 8012b22:	e1fc      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	2202      	movs	r2, #2
 8012b28:	4013      	ands	r3, r2
 8012b2a:	d03c      	beq.n	8012ba6 <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	0018      	movs	r0, r3
 8012b30:	f7ff ffca 	bl	8012ac8 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8012b34:	1dfb      	adds	r3, r7, #7
 8012b36:	781a      	ldrb	r2, [r3, #0]
 8012b38:	4999      	ldr	r1, [pc, #612]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012b3a:	0013      	movs	r3, r2
 8012b3c:	011b      	lsls	r3, r3, #4
 8012b3e:	1a9b      	subs	r3, r3, r2
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	18cb      	adds	r3, r1, r3
 8012b44:	3304      	adds	r3, #4
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	6819      	ldr	r1, [r3, #0]
 8012b4a:	1dfb      	adds	r3, r7, #7
 8012b4c:	781a      	ldrb	r2, [r3, #0]
 8012b4e:	4894      	ldr	r0, [pc, #592]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012b50:	0013      	movs	r3, r2
 8012b52:	011b      	lsls	r3, r3, #4
 8012b54:	1a9b      	subs	r3, r3, r2
 8012b56:	009b      	lsls	r3, r3, #2
 8012b58:	18c3      	adds	r3, r0, r3
 8012b5a:	3304      	adds	r3, #4
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2201      	movs	r2, #1
 8012b60:	4391      	bics	r1, r2
 8012b62:	000a      	movs	r2, r1
 8012b64:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8012b66:	46c0      	nop			; (mov r8, r8)
 8012b68:	1dfb      	adds	r3, r7, #7
 8012b6a:	781a      	ldrb	r2, [r3, #0]
 8012b6c:	498c      	ldr	r1, [pc, #560]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012b6e:	0013      	movs	r3, r2
 8012b70:	011b      	lsls	r3, r3, #4
 8012b72:	1a9b      	subs	r3, r3, r2
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	18cb      	adds	r3, r1, r3
 8012b78:	3304      	adds	r3, #4
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2201      	movs	r2, #1
 8012b80:	4013      	ands	r3, r2
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d0f0      	beq.n	8012b68 <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8012b86:	1dfb      	adds	r3, r7, #7
 8012b88:	781a      	ldrb	r2, [r3, #0]
 8012b8a:	4985      	ldr	r1, [pc, #532]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012b8c:	0013      	movs	r3, r2
 8012b8e:	011b      	lsls	r3, r3, #4
 8012b90:	1a9b      	subs	r3, r3, r2
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	18cb      	adds	r3, r1, r3
 8012b96:	3314      	adds	r3, #20
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	1dfa      	adds	r2, r7, #7
 8012b9c:	7812      	ldrb	r2, [r2, #0]
 8012b9e:	2101      	movs	r1, #1
 8012ba0:	0010      	movs	r0, r2
 8012ba2:	4798      	blx	r3
      return;
 8012ba4:	e1bb      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	2204      	movs	r2, #4
 8012baa:	4013      	ands	r3, r2
 8012bac:	d03c      	beq.n	8012c28 <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	0018      	movs	r0, r3
 8012bb2:	f7ff ff7b 	bl	8012aac <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8012bb6:	1dfb      	adds	r3, r7, #7
 8012bb8:	781a      	ldrb	r2, [r3, #0]
 8012bba:	4979      	ldr	r1, [pc, #484]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012bbc:	0013      	movs	r3, r2
 8012bbe:	011b      	lsls	r3, r3, #4
 8012bc0:	1a9b      	subs	r3, r3, r2
 8012bc2:	009b      	lsls	r3, r3, #2
 8012bc4:	18cb      	adds	r3, r1, r3
 8012bc6:	3304      	adds	r3, #4
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	6819      	ldr	r1, [r3, #0]
 8012bcc:	1dfb      	adds	r3, r7, #7
 8012bce:	781a      	ldrb	r2, [r3, #0]
 8012bd0:	4873      	ldr	r0, [pc, #460]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012bd2:	0013      	movs	r3, r2
 8012bd4:	011b      	lsls	r3, r3, #4
 8012bd6:	1a9b      	subs	r3, r3, r2
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	18c3      	adds	r3, r0, r3
 8012bdc:	3304      	adds	r3, #4
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2201      	movs	r2, #1
 8012be2:	4391      	bics	r1, r2
 8012be4:	000a      	movs	r2, r1
 8012be6:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8012be8:	46c0      	nop			; (mov r8, r8)
 8012bea:	1dfb      	adds	r3, r7, #7
 8012bec:	781a      	ldrb	r2, [r3, #0]
 8012bee:	496c      	ldr	r1, [pc, #432]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012bf0:	0013      	movs	r3, r2
 8012bf2:	011b      	lsls	r3, r3, #4
 8012bf4:	1a9b      	subs	r3, r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	18cb      	adds	r3, r1, r3
 8012bfa:	3304      	adds	r3, #4
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2201      	movs	r2, #1
 8012c02:	4013      	ands	r3, r2
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d0f0      	beq.n	8012bea <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8012c08:	1dfb      	adds	r3, r7, #7
 8012c0a:	781a      	ldrb	r2, [r3, #0]
 8012c0c:	4964      	ldr	r1, [pc, #400]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012c0e:	0013      	movs	r3, r2
 8012c10:	011b      	lsls	r3, r3, #4
 8012c12:	1a9b      	subs	r3, r3, r2
 8012c14:	009b      	lsls	r3, r3, #2
 8012c16:	18cb      	adds	r3, r1, r3
 8012c18:	3314      	adds	r3, #20
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	1dfa      	adds	r2, r7, #7
 8012c1e:	7812      	ldrb	r2, [r2, #0]
 8012c20:	2100      	movs	r1, #0
 8012c22:	0010      	movs	r0, r2
 8012c24:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8012c26:	e17a      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	2208      	movs	r2, #8
 8012c2c:	4013      	ands	r3, r2
 8012c2e:	d03c      	beq.n	8012caa <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	0018      	movs	r0, r3
 8012c34:	f7ff ff2c 	bl	8012a90 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8012c38:	1dfb      	adds	r3, r7, #7
 8012c3a:	781a      	ldrb	r2, [r3, #0]
 8012c3c:	4958      	ldr	r1, [pc, #352]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012c3e:	0013      	movs	r3, r2
 8012c40:	011b      	lsls	r3, r3, #4
 8012c42:	1a9b      	subs	r3, r3, r2
 8012c44:	009b      	lsls	r3, r3, #2
 8012c46:	18cb      	adds	r3, r1, r3
 8012c48:	3304      	adds	r3, #4
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	6819      	ldr	r1, [r3, #0]
 8012c4e:	1dfb      	adds	r3, r7, #7
 8012c50:	781a      	ldrb	r2, [r3, #0]
 8012c52:	4853      	ldr	r0, [pc, #332]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012c54:	0013      	movs	r3, r2
 8012c56:	011b      	lsls	r3, r3, #4
 8012c58:	1a9b      	subs	r3, r3, r2
 8012c5a:	009b      	lsls	r3, r3, #2
 8012c5c:	18c3      	adds	r3, r0, r3
 8012c5e:	3304      	adds	r3, #4
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	2201      	movs	r2, #1
 8012c64:	4391      	bics	r1, r2
 8012c66:	000a      	movs	r2, r1
 8012c68:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8012c6a:	46c0      	nop			; (mov r8, r8)
 8012c6c:	1dfb      	adds	r3, r7, #7
 8012c6e:	781a      	ldrb	r2, [r3, #0]
 8012c70:	494b      	ldr	r1, [pc, #300]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012c72:	0013      	movs	r3, r2
 8012c74:	011b      	lsls	r3, r3, #4
 8012c76:	1a9b      	subs	r3, r3, r2
 8012c78:	009b      	lsls	r3, r3, #2
 8012c7a:	18cb      	adds	r3, r1, r3
 8012c7c:	3304      	adds	r3, #4
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2201      	movs	r2, #1
 8012c84:	4013      	ands	r3, r2
 8012c86:	2b01      	cmp	r3, #1
 8012c88:	d0f0      	beq.n	8012c6c <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8012c8a:	1dfb      	adds	r3, r7, #7
 8012c8c:	781a      	ldrb	r2, [r3, #0]
 8012c8e:	4944      	ldr	r1, [pc, #272]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012c90:	0013      	movs	r3, r2
 8012c92:	011b      	lsls	r3, r3, #4
 8012c94:	1a9b      	subs	r3, r3, r2
 8012c96:	009b      	lsls	r3, r3, #2
 8012c98:	18cb      	adds	r3, r1, r3
 8012c9a:	3314      	adds	r3, #20
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	1dfa      	adds	r2, r7, #7
 8012ca0:	7812      	ldrb	r2, [r2, #0]
 8012ca2:	2102      	movs	r1, #2
 8012ca4:	0010      	movs	r0, r2
 8012ca6:	4798      	blx	r3
      return;
 8012ca8:	e139      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	2210      	movs	r2, #16
 8012cae:	4013      	ands	r3, r2
 8012cb0:	d004      	beq.n	8012cbc <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	0018      	movs	r0, r3
 8012cb6:	f7ff fedd 	bl	8012a74 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8012cba:	e130      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	2220      	movs	r2, #32
 8012cc0:	4013      	ands	r3, r2
 8012cc2:	d013      	beq.n	8012cec <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	0018      	movs	r0, r3
 8012cc8:	f7ff fec6 	bl	8012a58 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8012ccc:	1dfb      	adds	r3, r7, #7
 8012cce:	781a      	ldrb	r2, [r3, #0]
 8012cd0:	4933      	ldr	r1, [pc, #204]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012cd2:	0013      	movs	r3, r2
 8012cd4:	011b      	lsls	r3, r3, #4
 8012cd6:	1a9b      	subs	r3, r3, r2
 8012cd8:	009b      	lsls	r3, r3, #2
 8012cda:	18cb      	adds	r3, r1, r3
 8012cdc:	3324      	adds	r3, #36	; 0x24
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	1dfa      	adds	r2, r7, #7
 8012ce2:	7812      	ldrb	r2, [r2, #0]
 8012ce4:	2105      	movs	r1, #5
 8012ce6:	0010      	movs	r0, r2
 8012ce8:	4798      	blx	r3
      return;
 8012cea:	e118      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	2240      	movs	r2, #64	; 0x40
 8012cf0:	4013      	ands	r3, r2
 8012cf2:	d004      	beq.n	8012cfe <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	0018      	movs	r0, r3
 8012cf8:	f7ff fea0 	bl	8012a3c <LL_UCPD_ClearFlag_TxUND>
      return;
 8012cfc:	e10f      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8012cfe:	68ba      	ldr	r2, [r7, #8]
 8012d00:	2380      	movs	r3, #128	; 0x80
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	4013      	ands	r3, r2
 8012d06:	d023      	beq.n	8012d50 <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d0c:	2b05      	cmp	r3, #5
 8012d0e:	d10e      	bne.n	8012d2e <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8012d10:	1dfb      	adds	r3, r7, #7
 8012d12:	781a      	ldrb	r2, [r3, #0]
 8012d14:	4922      	ldr	r1, [pc, #136]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012d16:	0013      	movs	r3, r2
 8012d18:	011b      	lsls	r3, r3, #4
 8012d1a:	1a9b      	subs	r3, r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	18cb      	adds	r3, r1, r3
 8012d20:	331c      	adds	r3, #28
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	1dfa      	adds	r2, r7, #7
 8012d26:	7812      	ldrb	r2, [r2, #0]
 8012d28:	2106      	movs	r1, #6
 8012d2a:	0010      	movs	r0, r2
 8012d2c:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	0018      	movs	r0, r3
 8012d32:	f7ff fe74 	bl	8012a1e <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8012d36:	1dfb      	adds	r3, r7, #7
 8012d38:	781a      	ldrb	r2, [r3, #0]
 8012d3a:	4919      	ldr	r1, [pc, #100]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012d3c:	2038      	movs	r0, #56	; 0x38
 8012d3e:	0013      	movs	r3, r2
 8012d40:	011b      	lsls	r3, r3, #4
 8012d42:	1a9b      	subs	r3, r3, r2
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	18cb      	adds	r3, r1, r3
 8012d48:	181b      	adds	r3, r3, r0
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	701a      	strb	r2, [r3, #0]
      return;
 8012d4e:	e0e6      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8012d50:	68ba      	ldr	r2, [r7, #8]
 8012d52:	2380      	movs	r3, #128	; 0x80
 8012d54:	00db      	lsls	r3, r3, #3
 8012d56:	4013      	ands	r3, r2
 8012d58:	d013      	beq.n	8012d82 <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8012d5a:	1dfb      	adds	r3, r7, #7
 8012d5c:	781a      	ldrb	r2, [r3, #0]
 8012d5e:	4910      	ldr	r1, [pc, #64]	; (8012da0 <PORTx_IRQHandler+0x2ac>)
 8012d60:	0013      	movs	r3, r2
 8012d62:	011b      	lsls	r3, r3, #4
 8012d64:	1a9b      	subs	r3, r3, r2
 8012d66:	009b      	lsls	r3, r3, #2
 8012d68:	18cb      	adds	r3, r1, r3
 8012d6a:	331c      	adds	r3, #28
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	1dfa      	adds	r2, r7, #7
 8012d70:	7812      	ldrb	r2, [r2, #0]
 8012d72:	2105      	movs	r1, #5
 8012d74:	0010      	movs	r0, r2
 8012d76:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	0018      	movs	r0, r3
 8012d7c:	f7ff fe40 	bl	8012a00 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8012d80:	e0cd      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8012d82:	68ba      	ldr	r2, [r7, #8]
 8012d84:	2380      	movs	r3, #128	; 0x80
 8012d86:	011b      	lsls	r3, r3, #4
 8012d88:	4013      	ands	r3, r2
 8012d8a:	d00d      	beq.n	8012da8 <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 8012d8c:	1dfb      	adds	r3, r7, #7
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	4a04      	ldr	r2, [pc, #16]	; (8012da4 <PORTx_IRQHandler+0x2b0>)
 8012d92:	2101      	movs	r1, #1
 8012d94:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	0018      	movs	r0, r3
 8012d9a:	f7ff fe22 	bl	80129e2 <LL_UCPD_ClearFlag_RxOvr>
      return;
 8012d9e:	e0be      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
 8012da0:	20000568 	.word	0x20000568
 8012da4:	2000055c 	.word	0x2000055c
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8012da8:	68ba      	ldr	r2, [r7, #8]
 8012daa:	2380      	movs	r3, #128	; 0x80
 8012dac:	015b      	lsls	r3, r3, #5
 8012dae:	4013      	ands	r3, r2
 8012db0:	d100      	bne.n	8012db4 <PORTx_IRQHandler+0x2c0>
 8012db2:	e096      	b.n	8012ee2 <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8012db4:	1dfb      	adds	r3, r7, #7
 8012db6:	781a      	ldrb	r2, [r3, #0]
 8012db8:	495a      	ldr	r1, [pc, #360]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012dba:	2038      	movs	r0, #56	; 0x38
 8012dbc:	0013      	movs	r3, r2
 8012dbe:	011b      	lsls	r3, r3, #4
 8012dc0:	1a9b      	subs	r3, r3, r2
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	18cb      	adds	r3, r1, r3
 8012dc6:	181b      	adds	r3, r3, r0
 8012dc8:	2200      	movs	r2, #0
 8012dca:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	0018      	movs	r0, r3
 8012dd0:	f7ff fdf8 	bl	80129c4 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8012dd4:	1dfb      	adds	r3, r7, #7
 8012dd6:	781a      	ldrb	r2, [r3, #0]
 8012dd8:	4952      	ldr	r1, [pc, #328]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012dda:	0013      	movs	r3, r2
 8012ddc:	011b      	lsls	r3, r3, #4
 8012dde:	1a9b      	subs	r3, r3, r2
 8012de0:	009b      	lsls	r3, r3, #2
 8012de2:	18cb      	adds	r3, r1, r3
 8012de4:	3308      	adds	r3, #8
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	6819      	ldr	r1, [r3, #0]
 8012dea:	1dfb      	adds	r3, r7, #7
 8012dec:	781a      	ldrb	r2, [r3, #0]
 8012dee:	484d      	ldr	r0, [pc, #308]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012df0:	0013      	movs	r3, r2
 8012df2:	011b      	lsls	r3, r3, #4
 8012df4:	1a9b      	subs	r3, r3, r2
 8012df6:	009b      	lsls	r3, r3, #2
 8012df8:	18c3      	adds	r3, r0, r3
 8012dfa:	3308      	adds	r3, #8
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	4391      	bics	r1, r2
 8012e02:	000a      	movs	r2, r1
 8012e04:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8012e06:	46c0      	nop			; (mov r8, r8)
 8012e08:	1dfb      	adds	r3, r7, #7
 8012e0a:	781a      	ldrb	r2, [r3, #0]
 8012e0c:	4945      	ldr	r1, [pc, #276]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012e0e:	0013      	movs	r3, r2
 8012e10:	011b      	lsls	r3, r3, #4
 8012e12:	1a9b      	subs	r3, r3, r2
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	18cb      	adds	r3, r1, r3
 8012e18:	3308      	adds	r3, #8
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	2201      	movs	r2, #1
 8012e20:	4013      	ands	r3, r2
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d0f0      	beq.n	8012e08 <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8012e26:	1dfb      	adds	r3, r7, #7
 8012e28:	781a      	ldrb	r2, [r3, #0]
 8012e2a:	493e      	ldr	r1, [pc, #248]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012e2c:	0013      	movs	r3, r2
 8012e2e:	011b      	lsls	r3, r3, #4
 8012e30:	1a9b      	subs	r3, r3, r2
 8012e32:	009b      	lsls	r3, r3, #2
 8012e34:	18cb      	adds	r3, r1, r3
 8012e36:	3330      	adds	r3, #48	; 0x30
 8012e38:	6818      	ldr	r0, [r3, #0]
 8012e3a:	1dfb      	adds	r3, r7, #7
 8012e3c:	781a      	ldrb	r2, [r3, #0]
 8012e3e:	4939      	ldr	r1, [pc, #228]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012e40:	0013      	movs	r3, r2
 8012e42:	011b      	lsls	r3, r3, #4
 8012e44:	1a9b      	subs	r3, r3, r2
 8012e46:	009b      	lsls	r3, r3, #2
 8012e48:	18cb      	adds	r3, r1, r3
 8012e4a:	3308      	adds	r3, #8
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	0002      	movs	r2, r0
 8012e50:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8012e52:	1dfb      	adds	r3, r7, #7
 8012e54:	781a      	ldrb	r2, [r3, #0]
 8012e56:	4933      	ldr	r1, [pc, #204]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012e58:	0013      	movs	r3, r2
 8012e5a:	011b      	lsls	r3, r3, #4
 8012e5c:	1a9b      	subs	r3, r3, r2
 8012e5e:	009b      	lsls	r3, r3, #2
 8012e60:	18cb      	adds	r3, r1, r3
 8012e62:	3308      	adds	r3, #8
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	2284      	movs	r2, #132	; 0x84
 8012e68:	0052      	lsls	r2, r2, #1
 8012e6a:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8012e6c:	1dfb      	adds	r3, r7, #7
 8012e6e:	781a      	ldrb	r2, [r3, #0]
 8012e70:	492c      	ldr	r1, [pc, #176]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012e72:	0013      	movs	r3, r2
 8012e74:	011b      	lsls	r3, r3, #4
 8012e76:	1a9b      	subs	r3, r3, r2
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	18cb      	adds	r3, r1, r3
 8012e7c:	3308      	adds	r3, #8
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	6819      	ldr	r1, [r3, #0]
 8012e82:	1dfb      	adds	r3, r7, #7
 8012e84:	781a      	ldrb	r2, [r3, #0]
 8012e86:	4827      	ldr	r0, [pc, #156]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012e88:	0013      	movs	r3, r2
 8012e8a:	011b      	lsls	r3, r3, #4
 8012e8c:	1a9b      	subs	r3, r3, r2
 8012e8e:	009b      	lsls	r3, r3, #2
 8012e90:	18c3      	adds	r3, r0, r3
 8012e92:	3308      	adds	r3, #8
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	2201      	movs	r2, #1
 8012e98:	430a      	orrs	r2, r1
 8012e9a:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 8012e9c:	68ba      	ldr	r2, [r7, #8]
 8012e9e:	2380      	movs	r3, #128	; 0x80
 8012ea0:	019b      	lsls	r3, r3, #6
 8012ea2:	4013      	ands	r3, r2
 8012ea4:	d117      	bne.n	8012ed6 <PORTx_IRQHandler+0x3e2>
 8012ea6:	1dfb      	adds	r3, r7, #7
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	4a1f      	ldr	r2, [pc, #124]	; (8012f28 <PORTx_IRQHandler+0x434>)
 8012eac:	5cd3      	ldrb	r3, [r2, r3]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d111      	bne.n	8012ed6 <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8012eb2:	1dfb      	adds	r3, r7, #7
 8012eb4:	781a      	ldrb	r2, [r3, #0]
 8012eb6:	491b      	ldr	r1, [pc, #108]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012eb8:	0013      	movs	r3, r2
 8012eba:	011b      	lsls	r3, r3, #4
 8012ebc:	1a9b      	subs	r3, r3, r2
 8012ebe:	009b      	lsls	r3, r3, #2
 8012ec0:	18cb      	adds	r3, r1, r3
 8012ec2:	3320      	adds	r3, #32
 8012ec4:	681a      	ldr	r2, [r3, #0]
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eca:	2107      	movs	r1, #7
 8012ecc:	4019      	ands	r1, r3
 8012ece:	1dfb      	adds	r3, r7, #7
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	0018      	movs	r0, r3
 8012ed4:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 8012ed6:	1dfb      	adds	r3, r7, #7
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	4a13      	ldr	r2, [pc, #76]	; (8012f28 <PORTx_IRQHandler+0x434>)
 8012edc:	2100      	movs	r1, #0
 8012ede:	54d1      	strb	r1, [r2, r3]
      return;
 8012ee0:	e01d      	b.n	8012f1e <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8012ee2:	68ba      	ldr	r2, [r7, #8]
 8012ee4:	2380      	movs	r3, #128	; 0x80
 8012ee6:	01db      	lsls	r3, r3, #7
 8012ee8:	4013      	ands	r3, r2
 8012eea:	d104      	bne.n	8012ef6 <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8012eec:	68ba      	ldr	r2, [r7, #8]
 8012eee:	2380      	movs	r3, #128	; 0x80
 8012ef0:	021b      	lsls	r3, r3, #8
 8012ef2:	4013      	ands	r3, r2
 8012ef4:	d013      	beq.n	8012f1e <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	0018      	movs	r0, r3
 8012efa:	f7ff fd54 	bl	80129a6 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	0018      	movs	r0, r3
 8012f02:	f7ff fd41 	bl	8012988 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8012f06:	1dfb      	adds	r3, r7, #7
 8012f08:	781a      	ldrb	r2, [r3, #0]
 8012f0a:	4906      	ldr	r1, [pc, #24]	; (8012f24 <PORTx_IRQHandler+0x430>)
 8012f0c:	0013      	movs	r3, r2
 8012f0e:	011b      	lsls	r3, r3, #4
 8012f10:	1a9b      	subs	r3, r3, r2
 8012f12:	009b      	lsls	r3, r3, #2
 8012f14:	18cb      	adds	r3, r1, r3
 8012f16:	332c      	adds	r3, #44	; 0x2c
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 8012f1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	b004      	add	sp, #16
 8012f22:	bd80      	pop	{r7, pc}
 8012f24:	20000568 	.word	0x20000568
 8012f28:	2000055c 	.word	0x2000055c

08012f2c <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 8012f2c:	b590      	push	{r4, r7, lr}
 8012f2e:	b085      	sub	sp, #20
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	60b9      	str	r1, [r7, #8]
 8012f34:	607a      	str	r2, [r7, #4]
 8012f36:	603b      	str	r3, [r7, #0]
 8012f38:	240f      	movs	r4, #15
 8012f3a:	193b      	adds	r3, r7, r4
 8012f3c:	1c02      	adds	r2, r0, #0
 8012f3e:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 8012f40:	193b      	adds	r3, r7, r4
 8012f42:	781a      	ldrb	r2, [r3, #0]
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	6919      	ldr	r1, [r3, #16]
 8012f48:	4830      	ldr	r0, [pc, #192]	; (801300c <USBPD_PHY_Init+0xe0>)
 8012f4a:	0013      	movs	r3, r2
 8012f4c:	011b      	lsls	r3, r3, #4
 8012f4e:	1a9b      	subs	r3, r3, r2
 8012f50:	009b      	lsls	r3, r3, #2
 8012f52:	18c3      	adds	r3, r0, r3
 8012f54:	3314      	adds	r3, #20
 8012f56:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 8012f58:	193b      	adds	r3, r7, r4
 8012f5a:	781a      	ldrb	r2, [r3, #0]
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	68d9      	ldr	r1, [r3, #12]
 8012f60:	482a      	ldr	r0, [pc, #168]	; (801300c <USBPD_PHY_Init+0xe0>)
 8012f62:	0013      	movs	r3, r2
 8012f64:	011b      	lsls	r3, r3, #4
 8012f66:	1a9b      	subs	r3, r3, r2
 8012f68:	009b      	lsls	r3, r3, #2
 8012f6a:	18c3      	adds	r3, r0, r3
 8012f6c:	3318      	adds	r3, #24
 8012f6e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8012f70:	193b      	adds	r3, r7, r4
 8012f72:	781a      	ldrb	r2, [r3, #0]
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	6859      	ldr	r1, [r3, #4]
 8012f78:	4824      	ldr	r0, [pc, #144]	; (801300c <USBPD_PHY_Init+0xe0>)
 8012f7a:	0013      	movs	r3, r2
 8012f7c:	011b      	lsls	r3, r3, #4
 8012f7e:	1a9b      	subs	r3, r3, r2
 8012f80:	009b      	lsls	r3, r3, #2
 8012f82:	18c3      	adds	r3, r0, r3
 8012f84:	331c      	adds	r3, #28
 8012f86:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8012f88:	193b      	adds	r3, r7, r4
 8012f8a:	781a      	ldrb	r2, [r3, #0]
 8012f8c:	491f      	ldr	r1, [pc, #124]	; (801300c <USBPD_PHY_Init+0xe0>)
 8012f8e:	0013      	movs	r3, r2
 8012f90:	011b      	lsls	r3, r3, #4
 8012f92:	1a9b      	subs	r3, r3, r2
 8012f94:	009b      	lsls	r3, r3, #2
 8012f96:	18cb      	adds	r3, r1, r3
 8012f98:	3320      	adds	r3, #32
 8012f9a:	4a1d      	ldr	r2, [pc, #116]	; (8013010 <USBPD_PHY_Init+0xe4>)
 8012f9c:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8012f9e:	193b      	adds	r3, r7, r4
 8012fa0:	781a      	ldrb	r2, [r3, #0]
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	6899      	ldr	r1, [r3, #8]
 8012fa6:	4819      	ldr	r0, [pc, #100]	; (801300c <USBPD_PHY_Init+0xe0>)
 8012fa8:	0013      	movs	r3, r2
 8012faa:	011b      	lsls	r3, r3, #4
 8012fac:	1a9b      	subs	r3, r3, r2
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	18c3      	adds	r3, r0, r3
 8012fb2:	3324      	adds	r3, #36	; 0x24
 8012fb4:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8012fb6:	193b      	adds	r3, r7, r4
 8012fb8:	781a      	ldrb	r2, [r3, #0]
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	6959      	ldr	r1, [r3, #20]
 8012fbe:	4813      	ldr	r0, [pc, #76]	; (801300c <USBPD_PHY_Init+0xe0>)
 8012fc0:	0013      	movs	r3, r2
 8012fc2:	011b      	lsls	r3, r3, #4
 8012fc4:	1a9b      	subs	r3, r3, r2
 8012fc6:	009b      	lsls	r3, r3, #2
 8012fc8:	18c3      	adds	r3, r0, r3
 8012fca:	3328      	adds	r3, #40	; 0x28
 8012fcc:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8012fce:	193b      	adds	r3, r7, r4
 8012fd0:	781a      	ldrb	r2, [r3, #0]
 8012fd2:	490e      	ldr	r1, [pc, #56]	; (801300c <USBPD_PHY_Init+0xe0>)
 8012fd4:	0013      	movs	r3, r2
 8012fd6:	011b      	lsls	r3, r3, #4
 8012fd8:	1a9b      	subs	r3, r3, r2
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	18cb      	adds	r3, r1, r3
 8012fde:	3330      	adds	r3, #48	; 0x30
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8012fe4:	193b      	adds	r3, r7, r4
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	4a0a      	ldr	r2, [pc, #40]	; (8013014 <USBPD_PHY_Init+0xe8>)
 8012fea:	00db      	lsls	r3, r3, #3
 8012fec:	18d3      	adds	r3, r2, r3
 8012fee:	3304      	adds	r3, #4
 8012ff0:	6a3a      	ldr	r2, [r7, #32]
 8012ff2:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 8012ff4:	193b      	adds	r3, r7, r4
 8012ff6:	781a      	ldrb	r2, [r3, #0]
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	6819      	ldr	r1, [r3, #0]
 8012ffc:	4b05      	ldr	r3, [pc, #20]	; (8013014 <USBPD_PHY_Init+0xe8>)
 8012ffe:	00d2      	lsls	r2, r2, #3
 8013000:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 8013002:	2300      	movs	r3, #0
}
 8013004:	0018      	movs	r0, r3
 8013006:	46bd      	mov	sp, r7
 8013008:	b005      	add	sp, #20
 801300a:	bd90      	pop	{r4, r7, pc}
 801300c:	20000568 	.word	0x20000568
 8013010:	080131fd 	.word	0x080131fd
 8013014:	20000560 	.word	0x20000560

08013018 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	0002      	movs	r2, r0
 8013020:	1dfb      	adds	r3, r7, #7
 8013022:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 8013024:	4b02      	ldr	r3, [pc, #8]	; (8013030 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 8013026:	0018      	movs	r0, r3
 8013028:	46bd      	mov	sp, r7
 801302a:	b002      	add	sp, #8
 801302c:	bd80      	pop	{r7, pc}
 801302e:	46c0      	nop			; (mov r8, r8)
 8013030:	00000389 	.word	0x00000389

08013034 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
 801303a:	0002      	movs	r2, r0
 801303c:	1dfb      	adds	r3, r7, #7
 801303e:	701a      	strb	r2, [r3, #0]
  return 30u;
 8013040:	231e      	movs	r3, #30
}
 8013042:	0018      	movs	r0, r3
 8013044:	46bd      	mov	sp, r7
 8013046:	b002      	add	sp, #8
 8013048:	bd80      	pop	{r7, pc}

0801304a <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 801304a:	b580      	push	{r7, lr}
 801304c:	b082      	sub	sp, #8
 801304e:	af00      	add	r7, sp, #0
 8013050:	0002      	movs	r2, r0
 8013052:	1dfb      	adds	r3, r7, #7
 8013054:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 8013056:	46c0      	nop			; (mov r8, r8)
 8013058:	46bd      	mov	sp, r7
 801305a:	b002      	add	sp, #8
 801305c:	bd80      	pop	{r7, pc}

0801305e <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 801305e:	b580      	push	{r7, lr}
 8013060:	b082      	sub	sp, #8
 8013062:	af00      	add	r7, sp, #0
 8013064:	0002      	movs	r2, r0
 8013066:	1dfb      	adds	r3, r7, #7
 8013068:	701a      	strb	r2, [r3, #0]
 801306a:	1dbb      	adds	r3, r7, #6
 801306c:	1c0a      	adds	r2, r1, #0
 801306e:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 8013070:	1dbb      	adds	r3, r7, #6
 8013072:	7819      	ldrb	r1, [r3, #0]
 8013074:	1dfb      	adds	r3, r7, #7
 8013076:	7818      	ldrb	r0, [r3, #0]
 8013078:	2300      	movs	r3, #0
 801307a:	2200      	movs	r2, #0
 801307c:	f000 f805 	bl	801308a <USBPD_PHY_SendMessage>
 8013080:	0003      	movs	r3, r0
}
 8013082:	0018      	movs	r0, r3
 8013084:	46bd      	mov	sp, r7
 8013086:	b002      	add	sp, #8
 8013088:	bd80      	pop	{r7, pc}

0801308a <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 801308a:	b590      	push	{r4, r7, lr}
 801308c:	b083      	sub	sp, #12
 801308e:	af00      	add	r7, sp, #0
 8013090:	0004      	movs	r4, r0
 8013092:	0008      	movs	r0, r1
 8013094:	603a      	str	r2, [r7, #0]
 8013096:	0019      	movs	r1, r3
 8013098:	1dfb      	adds	r3, r7, #7
 801309a:	1c22      	adds	r2, r4, #0
 801309c:	701a      	strb	r2, [r3, #0]
 801309e:	1dbb      	adds	r3, r7, #6
 80130a0:	1c02      	adds	r2, r0, #0
 80130a2:	701a      	strb	r2, [r3, #0]
 80130a4:	1d3b      	adds	r3, r7, #4
 80130a6:	1c0a      	adds	r2, r1, #0
 80130a8:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 80130aa:	1d3b      	adds	r3, r7, #4
 80130ac:	881c      	ldrh	r4, [r3, #0]
 80130ae:	683a      	ldr	r2, [r7, #0]
 80130b0:	1dbb      	adds	r3, r7, #6
 80130b2:	7819      	ldrb	r1, [r3, #0]
 80130b4:	1dfb      	adds	r3, r7, #7
 80130b6:	7818      	ldrb	r0, [r3, #0]
 80130b8:	0023      	movs	r3, r4
 80130ba:	f000 fb2f 	bl	801371c <USBPD_HW_IF_SendBuffer>
 80130be:	0003      	movs	r3, r0
}
 80130c0:	0018      	movs	r0, r3
 80130c2:	46bd      	mov	sp, r7
 80130c4:	b003      	add	sp, #12
 80130c6:	bd90      	pop	{r4, r7, pc}

080130c8 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	0002      	movs	r2, r0
 80130d0:	1dfb      	adds	r3, r7, #7
 80130d2:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 80130d4:	1dfb      	adds	r3, r7, #7
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	0018      	movs	r0, r3
 80130da:	f000 fc7d 	bl	80139d8 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 80130de:	2300      	movs	r3, #0
}
 80130e0:	0018      	movs	r0, r3
 80130e2:	46bd      	mov	sp, r7
 80130e4:	b002      	add	sp, #8
 80130e6:	bd80      	pop	{r7, pc}

080130e8 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b082      	sub	sp, #8
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	0002      	movs	r2, r0
 80130f0:	1dfb      	adds	r3, r7, #7
 80130f2:	701a      	strb	r2, [r3, #0]
 80130f4:	1dbb      	adds	r3, r7, #6
 80130f6:	1c0a      	adds	r2, r1, #0
 80130f8:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 80130fa:	1dbb      	adds	r3, r7, #6
 80130fc:	781b      	ldrb	r3, [r3, #0]
 80130fe:	2b07      	cmp	r3, #7
 8013100:	d104      	bne.n	801310c <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 8013102:	1dfb      	adds	r3, r7, #7
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	0018      	movs	r0, r3
 8013108:	f000 fad0 	bl	80136ac <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 801310c:	2300      	movs	r3, #0
}
 801310e:	0018      	movs	r0, r3
 8013110:	46bd      	mov	sp, r7
 8013112:	b002      	add	sp, #8
 8013114:	bd80      	pop	{r7, pc}

08013116 <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8013116:	b580      	push	{r7, lr}
 8013118:	b082      	sub	sp, #8
 801311a:	af00      	add	r7, sp, #0
 801311c:	0002      	movs	r2, r0
 801311e:	1dfb      	adds	r3, r7, #7
 8013120:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 8013122:	1dfb      	adds	r3, r7, #7
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	0018      	movs	r0, r3
 8013128:	f001 f87e 	bl	8014228 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 801312c:	46c0      	nop			; (mov r8, r8)
 801312e:	46bd      	mov	sp, r7
 8013130:	b002      	add	sp, #8
 8013132:	bd80      	pop	{r7, pc}

08013134 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	af00      	add	r7, sp, #0
 801313a:	0002      	movs	r2, r0
 801313c:	1dfb      	adds	r3, r7, #7
 801313e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 8013140:	1dfb      	adds	r3, r7, #7
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	0018      	movs	r0, r3
 8013146:	f001 f889 	bl	801425c <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 801314a:	46c0      	nop			; (mov r8, r8)
 801314c:	46bd      	mov	sp, r7
 801314e:	b002      	add	sp, #8
 8013150:	bd80      	pop	{r7, pc}
	...

08013154 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	0002      	movs	r2, r0
 801315c:	6039      	str	r1, [r7, #0]
 801315e:	1dfb      	adds	r3, r7, #7
 8013160:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 8013162:	1dfb      	adds	r3, r7, #7
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	4a05      	ldr	r2, [pc, #20]	; (801317c <USBPD_PHY_SOPSupported+0x28>)
 8013168:	00db      	lsls	r3, r3, #3
 801316a:	18d3      	adds	r3, r2, r3
 801316c:	3304      	adds	r3, #4
 801316e:	683a      	ldr	r2, [r7, #0]
 8013170:	601a      	str	r2, [r3, #0]
}
 8013172:	46c0      	nop			; (mov r8, r8)
 8013174:	46bd      	mov	sp, r7
 8013176:	b002      	add	sp, #8
 8013178:	bd80      	pop	{r7, pc}
 801317a:	46c0      	nop			; (mov r8, r8)
 801317c:	20000560 	.word	0x20000560

08013180 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b082      	sub	sp, #8
 8013184:	af00      	add	r7, sp, #0
 8013186:	0002      	movs	r2, r0
 8013188:	1dfb      	adds	r3, r7, #7
 801318a:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 801318c:	1dfb      	adds	r3, r7, #7
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	0018      	movs	r0, r3
 8013192:	f001 f87d 	bl	8014290 <USBPD_HW_IF_IsResistor_SinkTxOk>
 8013196:	0003      	movs	r3, r0
}
 8013198:	0018      	movs	r0, r3
 801319a:	46bd      	mov	sp, r7
 801319c:	b002      	add	sp, #8
 801319e:	bd80      	pop	{r7, pc}

080131a0 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	0002      	movs	r2, r0
 80131a8:	1dfb      	adds	r3, r7, #7
 80131aa:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 80131ac:	1dfb      	adds	r3, r7, #7
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	0018      	movs	r0, r3
 80131b2:	f001 f8b1 	bl	8014318 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 80131b6:	46c0      	nop			; (mov r8, r8)
 80131b8:	46bd      	mov	sp, r7
 80131ba:	b002      	add	sp, #8
 80131bc:	bd80      	pop	{r7, pc}

080131be <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 80131be:	b580      	push	{r7, lr}
 80131c0:	b082      	sub	sp, #8
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	0002      	movs	r2, r0
 80131c6:	1dfb      	adds	r3, r7, #7
 80131c8:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 80131ca:	1dfb      	adds	r3, r7, #7
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	0018      	movs	r0, r3
 80131d0:	f000 fe0a 	bl	8013de8 <USBPD_HW_IF_EnableRX>
}
 80131d4:	46c0      	nop			; (mov r8, r8)
 80131d6:	46bd      	mov	sp, r7
 80131d8:	b002      	add	sp, #8
 80131da:	bd80      	pop	{r7, pc}

080131dc <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	0002      	movs	r2, r0
 80131e4:	1dfb      	adds	r3, r7, #7
 80131e6:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 80131e8:	1dfb      	adds	r3, r7, #7
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	0018      	movs	r0, r3
 80131ee:	f000 fe13 	bl	8013e18 <USBPD_HW_IF_DisableRX>
}
 80131f2:	46c0      	nop			; (mov r8, r8)
 80131f4:	46bd      	mov	sp, r7
 80131f6:	b002      	add	sp, #8
 80131f8:	bd80      	pop	{r7, pc}
	...

080131fc <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 80131fc:	b590      	push	{r4, r7, lr}
 80131fe:	b085      	sub	sp, #20
 8013200:	af00      	add	r7, sp, #0
 8013202:	0002      	movs	r2, r0
 8013204:	6039      	str	r1, [r7, #0]
 8013206:	1dfb      	adds	r3, r7, #7
 8013208:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 801320a:	2008      	movs	r0, #8
 801320c:	183b      	adds	r3, r7, r0
 801320e:	4a2e      	ldr	r2, [pc, #184]	; (80132c8 <PHY_Rx_Completed+0xcc>)
 8013210:	6811      	ldr	r1, [r2, #0]
 8013212:	6019      	str	r1, [r3, #0]
 8013214:	8892      	ldrh	r2, [r2, #4]
 8013216:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8013218:	240f      	movs	r4, #15
 801321a:	193b      	adds	r3, r7, r4
 801321c:	1839      	adds	r1, r7, r0
 801321e:	683a      	ldr	r2, [r7, #0]
 8013220:	188a      	adds	r2, r1, r2
 8013222:	7812      	ldrb	r2, [r2, #0]
 8013224:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8013226:	193b      	adds	r3, r7, r4
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	2b04      	cmp	r3, #4
 801322c:	dc02      	bgt.n	8013234 <PHY_Rx_Completed+0x38>
 801322e:	2b00      	cmp	r3, #0
 8013230:	da1d      	bge.n	801326e <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 8013232:	e040      	b.n	80132b6 <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 8013234:	2b06      	cmp	r3, #6
 8013236:	d13e      	bne.n	80132b6 <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8013238:	1dfb      	adds	r3, r7, #7
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	4a23      	ldr	r2, [pc, #140]	; (80132cc <PHY_Rx_Completed+0xd0>)
 801323e:	00db      	lsls	r3, r3, #3
 8013240:	18d3      	adds	r3, r2, r3
 8013242:	3304      	adds	r3, #4
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	221e      	movs	r2, #30
 8013248:	4013      	ands	r3, r2
 801324a:	2b1e      	cmp	r3, #30
 801324c:	d135      	bne.n	80132ba <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 801324e:	1dfb      	adds	r3, r7, #7
 8013250:	781a      	ldrb	r2, [r3, #0]
 8013252:	491f      	ldr	r1, [pc, #124]	; (80132d0 <PHY_Rx_Completed+0xd4>)
 8013254:	0013      	movs	r3, r2
 8013256:	011b      	lsls	r3, r3, #4
 8013258:	1a9b      	subs	r3, r3, r2
 801325a:	009b      	lsls	r3, r3, #2
 801325c:	18cb      	adds	r3, r1, r3
 801325e:	331c      	adds	r3, #28
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	1dfa      	adds	r2, r7, #7
 8013264:	7812      	ldrb	r2, [r2, #0]
 8013266:	2106      	movs	r1, #6
 8013268:	0010      	movs	r0, r2
 801326a:	4798      	blx	r3
      break;
 801326c:	e025      	b.n	80132ba <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 801326e:	240f      	movs	r4, #15
 8013270:	193b      	adds	r3, r7, r4
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	2201      	movs	r2, #1
 8013276:	409a      	lsls	r2, r3
 8013278:	0013      	movs	r3, r2
 801327a:	b2db      	uxtb	r3, r3
 801327c:	0018      	movs	r0, r3
 801327e:	1dfb      	adds	r3, r7, #7
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	4a12      	ldr	r2, [pc, #72]	; (80132cc <PHY_Rx_Completed+0xd0>)
 8013284:	00db      	lsls	r3, r3, #3
 8013286:	18d3      	adds	r3, r2, r3
 8013288:	3304      	adds	r3, #4
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	193a      	adds	r2, r7, r4
 801328e:	7812      	ldrb	r2, [r2, #0]
 8013290:	2101      	movs	r1, #1
 8013292:	4091      	lsls	r1, r2
 8013294:	000a      	movs	r2, r1
 8013296:	b2d2      	uxtb	r2, r2
 8013298:	4013      	ands	r3, r2
 801329a:	4298      	cmp	r0, r3
 801329c:	d10f      	bne.n	80132be <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 801329e:	1dfb      	adds	r3, r7, #7
 80132a0:	781a      	ldrb	r2, [r3, #0]
 80132a2:	4b0a      	ldr	r3, [pc, #40]	; (80132cc <PHY_Rx_Completed+0xd0>)
 80132a4:	00d2      	lsls	r2, r2, #3
 80132a6:	58d3      	ldr	r3, [r2, r3]
 80132a8:	193a      	adds	r2, r7, r4
 80132aa:	7811      	ldrb	r1, [r2, #0]
 80132ac:	1dfa      	adds	r2, r7, #7
 80132ae:	7812      	ldrb	r2, [r2, #0]
 80132b0:	0010      	movs	r0, r2
 80132b2:	4798      	blx	r3
      break;
 80132b4:	e003      	b.n	80132be <PHY_Rx_Completed+0xc2>
      break;
 80132b6:	46c0      	nop			; (mov r8, r8)
 80132b8:	e002      	b.n	80132c0 <PHY_Rx_Completed+0xc4>
      break;
 80132ba:	46c0      	nop			; (mov r8, r8)
 80132bc:	e000      	b.n	80132c0 <PHY_Rx_Completed+0xc4>
      break;
 80132be:	46c0      	nop			; (mov r8, r8)
  }
}
 80132c0:	46c0      	nop			; (mov r8, r8)
 80132c2:	46bd      	mov	sp, r7
 80132c4:	b005      	add	sp, #20
 80132c6:	bd90      	pop	{r4, r7, pc}
 80132c8:	0802316c 	.word	0x0802316c
 80132cc:	20000560 	.word	0x20000560
 80132d0:	20000568 	.word	0x20000568

080132d4 <LL_AHB1_GRP1_EnableClock>:
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80132dc:	4b07      	ldr	r3, [pc, #28]	; (80132fc <LL_AHB1_GRP1_EnableClock+0x28>)
 80132de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80132e0:	4b06      	ldr	r3, [pc, #24]	; (80132fc <LL_AHB1_GRP1_EnableClock+0x28>)
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	430a      	orrs	r2, r1
 80132e6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80132e8:	4b04      	ldr	r3, [pc, #16]	; (80132fc <LL_AHB1_GRP1_EnableClock+0x28>)
 80132ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	4013      	ands	r3, r2
 80132f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80132f2:	68fb      	ldr	r3, [r7, #12]
}
 80132f4:	46c0      	nop			; (mov r8, r8)
 80132f6:	46bd      	mov	sp, r7
 80132f8:	b004      	add	sp, #16
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	40021000 	.word	0x40021000

08013300 <LL_APB1_GRP1_EnableClock>:
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8013308:	4b07      	ldr	r3, [pc, #28]	; (8013328 <LL_APB1_GRP1_EnableClock+0x28>)
 801330a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801330c:	4b06      	ldr	r3, [pc, #24]	; (8013328 <LL_APB1_GRP1_EnableClock+0x28>)
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	430a      	orrs	r2, r1
 8013312:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8013314:	4b04      	ldr	r3, [pc, #16]	; (8013328 <LL_APB1_GRP1_EnableClock+0x28>)
 8013316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	4013      	ands	r3, r2
 801331c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801331e:	68fb      	ldr	r3, [r7, #12]
}
 8013320:	46c0      	nop			; (mov r8, r8)
 8013322:	46bd      	mov	sp, r7
 8013324:	b004      	add	sp, #16
 8013326:	bd80      	pop	{r7, pc}
 8013328:	40021000 	.word	0x40021000

0801332c <LL_APB2_GRP1_EnableClock>:
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8013334:	4b07      	ldr	r3, [pc, #28]	; (8013354 <LL_APB2_GRP1_EnableClock+0x28>)
 8013336:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8013338:	4b06      	ldr	r3, [pc, #24]	; (8013354 <LL_APB2_GRP1_EnableClock+0x28>)
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	430a      	orrs	r2, r1
 801333e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8013340:	4b04      	ldr	r3, [pc, #16]	; (8013354 <LL_APB2_GRP1_EnableClock+0x28>)
 8013342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	4013      	ands	r3, r2
 8013348:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801334a:	68fb      	ldr	r3, [r7, #12]
}
 801334c:	46c0      	nop			; (mov r8, r8)
 801334e:	46bd      	mov	sp, r7
 8013350:	b004      	add	sp, #16
 8013352:	bd80      	pop	{r7, pc}
 8013354:	40021000 	.word	0x40021000

08013358 <LL_UCPD_Enable>:
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2280      	movs	r2, #128	; 0x80
 8013366:	0612      	lsls	r2, r2, #24
 8013368:	431a      	orrs	r2, r3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	601a      	str	r2, [r3, #0]
}
 801336e:	46c0      	nop			; (mov r8, r8)
 8013370:	46bd      	mov	sp, r7
 8013372:	b002      	add	sp, #8
 8013374:	bd80      	pop	{r7, pc}

08013376 <LL_UCPD_Disable>:
{
 8013376:	b580      	push	{r7, lr}
 8013378:	b082      	sub	sp, #8
 801337a:	af00      	add	r7, sp, #0
 801337c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	005b      	lsls	r3, r3, #1
 8013384:	085a      	lsrs	r2, r3, #1
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	601a      	str	r2, [r3, #0]
}
 801338a:	46c0      	nop			; (mov r8, r8)
 801338c:	46bd      	mov	sp, r7
 801338e:	b002      	add	sp, #8
 8013390:	bd80      	pop	{r7, pc}
	...

08013394 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b082      	sub	sp, #8
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	4a03      	ldr	r2, [pc, #12]	; (80133b0 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 80133a2:	401a      	ands	r2, r3
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	60da      	str	r2, [r3, #12]
}
 80133a8:	46c0      	nop			; (mov r8, r8)
 80133aa:	46bd      	mov	sp, r7
 80133ac:	b002      	add	sp, #8
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	ffdfffff 	.word	0xffdfffff

080133b4 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	2280      	movs	r2, #128	; 0x80
 80133c2:	0392      	lsls	r2, r2, #14
 80133c4:	431a      	orrs	r2, r3
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	60da      	str	r2, [r3, #12]
}
 80133ca:	46c0      	nop			; (mov r8, r8)
 80133cc:	46bd      	mov	sp, r7
 80133ce:	b002      	add	sp, #8
 80133d0:	bd80      	pop	{r7, pc}
	...

080133d4 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b082      	sub	sp, #8
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	4a03      	ldr	r2, [pc, #12]	; (80133f0 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 80133e2:	401a      	ands	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	60da      	str	r2, [r3, #12]
}
 80133e8:	46c0      	nop			; (mov r8, r8)
 80133ea:	46bd      	mov	sp, r7
 80133ec:	b002      	add	sp, #8
 80133ee:	bd80      	pop	{r7, pc}
 80133f0:	ffefffff 	.word	0xffefffff

080133f4 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	2280      	movs	r2, #128	; 0x80
 8013402:	0352      	lsls	r2, r2, #13
 8013404:	431a      	orrs	r2, r3
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	60da      	str	r2, [r3, #12]
}
 801340a:	46c0      	nop			; (mov r8, r8)
 801340c:	46bd      	mov	sp, r7
 801340e:	b002      	add	sp, #8
 8013410:	bd80      	pop	{r7, pc}

08013412 <LL_UCPD_SignalFRSTX>:
{
 8013412:	b580      	push	{r7, lr}
 8013414:	b082      	sub	sp, #8
 8013416:	af00      	add	r7, sp, #0
 8013418:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	68db      	ldr	r3, [r3, #12]
 801341e:	2280      	movs	r2, #128	; 0x80
 8013420:	0292      	lsls	r2, r2, #10
 8013422:	431a      	orrs	r2, r3
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	60da      	str	r2, [r3, #12]
}
 8013428:	46c0      	nop			; (mov r8, r8)
 801342a:	46bd      	mov	sp, r7
 801342c:	b002      	add	sp, #8
 801342e:	bd80      	pop	{r7, pc}

08013430 <LL_UCPD_FRSDetectionEnable>:
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	2280      	movs	r2, #128	; 0x80
 801343e:	0252      	lsls	r2, r2, #9
 8013440:	431a      	orrs	r2, r3
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	60da      	str	r2, [r3, #12]
}
 8013446:	46c0      	nop			; (mov r8, r8)
 8013448:	46bd      	mov	sp, r7
 801344a:	b002      	add	sp, #8
 801344c:	bd80      	pop	{r7, pc}
	...

08013450 <LL_UCPD_FRSDetectionDisable>:
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	4a03      	ldr	r2, [pc, #12]	; (801346c <LL_UCPD_FRSDetectionDisable+0x1c>)
 801345e:	401a      	ands	r2, r3
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	60da      	str	r2, [r3, #12]
}
 8013464:	46c0      	nop			; (mov r8, r8)
 8013466:	46bd      	mov	sp, r7
 8013468:	b002      	add	sp, #8
 801346a:	bd80      	pop	{r7, pc}
 801346c:	fffeffff 	.word	0xfffeffff

08013470 <LL_UCPD_SetccEnable>:
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
 8013478:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	68db      	ldr	r3, [r3, #12]
 801347e:	4a05      	ldr	r2, [pc, #20]	; (8013494 <LL_UCPD_SetccEnable+0x24>)
 8013480:	401a      	ands	r2, r3
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	431a      	orrs	r2, r3
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	60da      	str	r2, [r3, #12]
}
 801348a:	46c0      	nop			; (mov r8, r8)
 801348c:	46bd      	mov	sp, r7
 801348e:	b002      	add	sp, #8
 8013490:	bd80      	pop	{r7, pc}
 8013492:	46c0      	nop			; (mov r8, r8)
 8013494:	fffff3ff 	.word	0xfffff3ff

08013498 <LL_UCPD_SetSNKRole>:
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	2280      	movs	r2, #128	; 0x80
 80134a6:	0092      	lsls	r2, r2, #2
 80134a8:	431a      	orrs	r2, r3
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	60da      	str	r2, [r3, #12]
}
 80134ae:	46c0      	nop			; (mov r8, r8)
 80134b0:	46bd      	mov	sp, r7
 80134b2:	b002      	add	sp, #8
 80134b4:	bd80      	pop	{r7, pc}
	...

080134b8 <LL_UCPD_SetSRCRole>:
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b082      	sub	sp, #8
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	68db      	ldr	r3, [r3, #12]
 80134c4:	4a03      	ldr	r2, [pc, #12]	; (80134d4 <LL_UCPD_SetSRCRole+0x1c>)
 80134c6:	401a      	ands	r2, r3
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	60da      	str	r2, [r3, #12]
}
 80134cc:	46c0      	nop			; (mov r8, r8)
 80134ce:	46bd      	mov	sp, r7
 80134d0:	b002      	add	sp, #8
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	fffffdff 	.word	0xfffffdff

080134d8 <LL_UCPD_SetRpResistor>:
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	68db      	ldr	r3, [r3, #12]
 80134e6:	4a05      	ldr	r2, [pc, #20]	; (80134fc <LL_UCPD_SetRpResistor+0x24>)
 80134e8:	401a      	ands	r2, r3
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	431a      	orrs	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	60da      	str	r2, [r3, #12]
}
 80134f2:	46c0      	nop			; (mov r8, r8)
 80134f4:	46bd      	mov	sp, r7
 80134f6:	b002      	add	sp, #8
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	46c0      	nop			; (mov r8, r8)
 80134fc:	fffffe7f 	.word	0xfffffe7f

08013500 <LL_UCPD_SetCCPin>:
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b082      	sub	sp, #8
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
 8013508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	2240      	movs	r2, #64	; 0x40
 8013510:	4393      	bics	r3, r2
 8013512:	001a      	movs	r2, r3
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	431a      	orrs	r2, r3
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	60da      	str	r2, [r3, #12]
}
 801351c:	46c0      	nop			; (mov r8, r8)
 801351e:	46bd      	mov	sp, r7
 8013520:	b002      	add	sp, #8
 8013522:	bd80      	pop	{r7, pc}

08013524 <LL_UCPD_RxEnable>:
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	68db      	ldr	r3, [r3, #12]
 8013530:	2220      	movs	r2, #32
 8013532:	431a      	orrs	r2, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	60da      	str	r2, [r3, #12]
}
 8013538:	46c0      	nop			; (mov r8, r8)
 801353a:	46bd      	mov	sp, r7
 801353c:	b002      	add	sp, #8
 801353e:	bd80      	pop	{r7, pc}

08013540 <LL_UCPD_RxDisable>:
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b082      	sub	sp, #8
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	68db      	ldr	r3, [r3, #12]
 801354c:	2220      	movs	r2, #32
 801354e:	4393      	bics	r3, r2
 8013550:	001a      	movs	r2, r3
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	60da      	str	r2, [r3, #12]
}
 8013556:	46c0      	nop			; (mov r8, r8)
 8013558:	46bd      	mov	sp, r7
 801355a:	b002      	add	sp, #8
 801355c:	bd80      	pop	{r7, pc}

0801355e <LL_UCPD_SetRxMode>:
{
 801355e:	b580      	push	{r7, lr}
 8013560:	b082      	sub	sp, #8
 8013562:	af00      	add	r7, sp, #0
 8013564:	6078      	str	r0, [r7, #4]
 8013566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	68db      	ldr	r3, [r3, #12]
 801356c:	2210      	movs	r2, #16
 801356e:	4393      	bics	r3, r2
 8013570:	001a      	movs	r2, r3
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	431a      	orrs	r2, r3
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	60da      	str	r2, [r3, #12]
}
 801357a:	46c0      	nop			; (mov r8, r8)
 801357c:	46bd      	mov	sp, r7
 801357e:	b002      	add	sp, #8
 8013580:	bd80      	pop	{r7, pc}

08013582 <LL_UCPD_SendHardReset>:
{
 8013582:	b580      	push	{r7, lr}
 8013584:	b082      	sub	sp, #8
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	68db      	ldr	r3, [r3, #12]
 801358e:	2208      	movs	r2, #8
 8013590:	431a      	orrs	r2, r3
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	60da      	str	r2, [r3, #12]
}
 8013596:	46c0      	nop			; (mov r8, r8)
 8013598:	46bd      	mov	sp, r7
 801359a:	b002      	add	sp, #8
 801359c:	bd80      	pop	{r7, pc}

0801359e <LL_UCPD_SendMessage>:
{
 801359e:	b580      	push	{r7, lr}
 80135a0:	b082      	sub	sp, #8
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	68db      	ldr	r3, [r3, #12]
 80135aa:	2204      	movs	r2, #4
 80135ac:	431a      	orrs	r2, r3
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	60da      	str	r2, [r3, #12]
}
 80135b2:	46c0      	nop			; (mov r8, r8)
 80135b4:	46bd      	mov	sp, r7
 80135b6:	b002      	add	sp, #8
 80135b8:	bd80      	pop	{r7, pc}

080135ba <LL_UCPD_SetTxMode>:
{
 80135ba:	b580      	push	{r7, lr}
 80135bc:	b082      	sub	sp, #8
 80135be:	af00      	add	r7, sp, #0
 80135c0:	6078      	str	r0, [r7, #4]
 80135c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	2203      	movs	r2, #3
 80135ca:	4393      	bics	r3, r2
 80135cc:	001a      	movs	r2, r3
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	431a      	orrs	r2, r3
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	60da      	str	r2, [r3, #12]
}
 80135d6:	46c0      	nop			; (mov r8, r8)
 80135d8:	46bd      	mov	sp, r7
 80135da:	b002      	add	sp, #8
 80135dc:	bd80      	pop	{r7, pc}

080135de <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80135de:	b580      	push	{r7, lr}
 80135e0:	b082      	sub	sp, #8
 80135e2:	af00      	add	r7, sp, #0
 80135e4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	2280      	movs	r2, #128	; 0x80
 80135ec:	05d2      	lsls	r2, r2, #23
 80135ee:	431a      	orrs	r2, r3
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	601a      	str	r2, [r3, #0]
}
 80135f4:	46c0      	nop			; (mov r8, r8)
 80135f6:	46bd      	mov	sp, r7
 80135f8:	b002      	add	sp, #8
 80135fa:	bd80      	pop	{r7, pc}

080135fc <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	4a03      	ldr	r2, [pc, #12]	; (8013618 <LL_UCPD_RxDMADisable+0x1c>)
 801360a:	401a      	ands	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	601a      	str	r2, [r3, #0]
}
 8013610:	46c0      	nop			; (mov r8, r8)
 8013612:	46bd      	mov	sp, r7
 8013614:	b002      	add	sp, #8
 8013616:	bd80      	pop	{r7, pc}
 8013618:	bfffffff 	.word	0xbfffffff

0801361c <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	2280      	movs	r2, #128	; 0x80
 801362a:	0592      	lsls	r2, r2, #22
 801362c:	431a      	orrs	r2, r3
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	601a      	str	r2, [r3, #0]
}
 8013632:	46c0      	nop			; (mov r8, r8)
 8013634:	46bd      	mov	sp, r7
 8013636:	b002      	add	sp, #8
 8013638:	bd80      	pop	{r7, pc}
	...

0801363c <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4a03      	ldr	r2, [pc, #12]	; (8013658 <LL_UCPD_TxDMADisable+0x1c>)
 801364a:	401a      	ands	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	601a      	str	r2, [r3, #0]
}
 8013650:	46c0      	nop			; (mov r8, r8)
 8013652:	46bd      	mov	sp, r7
 8013654:	b002      	add	sp, #8
 8013656:	bd80      	pop	{r7, pc}
 8013658:	dfffffff 	.word	0xdfffffff

0801365c <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	683a      	ldr	r2, [r7, #0]
 801366a:	61da      	str	r2, [r3, #28]
}
 801366c:	46c0      	nop			; (mov r8, r8)
 801366e:	46bd      	mov	sp, r7
 8013670:	b002      	add	sp, #8
 8013672:	bd80      	pop	{r7, pc}

08013674 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	683a      	ldr	r2, [r7, #0]
 8013682:	621a      	str	r2, [r3, #32]
}
 8013684:	46c0      	nop			; (mov r8, r8)
 8013686:	46bd      	mov	sp, r7
 8013688:	b002      	add	sp, #8
 801368a:	bd80      	pop	{r7, pc}

0801368c <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8013690:	2380      	movs	r3, #128	; 0x80
 8013692:	055b      	lsls	r3, r3, #21
 8013694:	0018      	movs	r0, r3
 8013696:	f7ff fe33 	bl	8013300 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 801369a:	2380      	movs	r3, #128	; 0x80
 801369c:	015b      	lsls	r3, r3, #5
 801369e:	0018      	movs	r0, r3
 80136a0:	f7ff fe18 	bl	80132d4 <LL_AHB1_GRP1_EnableClock>
}
 80136a4:	46c0      	nop			; (mov r8, r8)
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
	...

080136ac <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b084      	sub	sp, #16
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	0002      	movs	r2, r0
 80136b4:	1dfb      	adds	r3, r7, #7
 80136b6:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 80136b8:	1dfb      	adds	r3, r7, #7
 80136ba:	781a      	ldrb	r2, [r3, #0]
 80136bc:	4916      	ldr	r1, [pc, #88]	; (8013718 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80136be:	0013      	movs	r3, r2
 80136c0:	011b      	lsls	r3, r3, #4
 80136c2:	1a9b      	subs	r3, r3, r2
 80136c4:	009b      	lsls	r3, r3, #2
 80136c6:	585b      	ldr	r3, [r3, r1]
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	2207      	movs	r2, #7
 80136cc:	4393      	bics	r3, r2
 80136ce:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 80136d0:	1dfb      	adds	r3, r7, #7
 80136d2:	781a      	ldrb	r2, [r3, #0]
 80136d4:	4910      	ldr	r1, [pc, #64]	; (8013718 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80136d6:	0013      	movs	r3, r2
 80136d8:	011b      	lsls	r3, r3, #4
 80136da:	1a9b      	subs	r3, r3, r2
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	585b      	ldr	r3, [r3, r1]
 80136e0:	0018      	movs	r0, r3
 80136e2:	f7ff fe48 	bl	8013376 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 80136e6:	1dfb      	adds	r3, r7, #7
 80136e8:	781a      	ldrb	r2, [r3, #0]
 80136ea:	490b      	ldr	r1, [pc, #44]	; (8013718 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80136ec:	0013      	movs	r3, r2
 80136ee:	011b      	lsls	r3, r3, #4
 80136f0:	1a9b      	subs	r3, r3, r2
 80136f2:	009b      	lsls	r3, r3, #2
 80136f4:	585b      	ldr	r3, [r3, r1]
 80136f6:	0018      	movs	r0, r3
 80136f8:	f7ff fe2e 	bl	8013358 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 80136fc:	1dfb      	adds	r3, r7, #7
 80136fe:	781a      	ldrb	r2, [r3, #0]
 8013700:	4905      	ldr	r1, [pc, #20]	; (8013718 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8013702:	0013      	movs	r3, r2
 8013704:	011b      	lsls	r3, r3, #4
 8013706:	1a9b      	subs	r3, r3, r2
 8013708:	009b      	lsls	r3, r3, #2
 801370a:	585b      	ldr	r3, [r3, r1]
 801370c:	68fa      	ldr	r2, [r7, #12]
 801370e:	60da      	str	r2, [r3, #12]
}
 8013710:	46c0      	nop			; (mov r8, r8)
 8013712:	46bd      	mov	sp, r7
 8013714:	b004      	add	sp, #16
 8013716:	bd80      	pop	{r7, pc}
 8013718:	20000568 	.word	0x20000568

0801371c <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 801371c:	b590      	push	{r4, r7, lr}
 801371e:	b08b      	sub	sp, #44	; 0x2c
 8013720:	af00      	add	r7, sp, #0
 8013722:	60ba      	str	r2, [r7, #8]
 8013724:	607b      	str	r3, [r7, #4]
 8013726:	240f      	movs	r4, #15
 8013728:	193b      	adds	r3, r7, r4
 801372a:	1c02      	adds	r2, r0, #0
 801372c:	701a      	strb	r2, [r3, #0]
 801372e:	200e      	movs	r0, #14
 8013730:	183b      	adds	r3, r7, r0
 8013732:	1c0a      	adds	r2, r1, #0
 8013734:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8013736:	2327      	movs	r3, #39	; 0x27
 8013738:	18fb      	adds	r3, r7, r3
 801373a:	2200      	movs	r2, #0
 801373c:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 801373e:	183b      	adds	r3, r7, r0
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	2b05      	cmp	r3, #5
 8013744:	d10b      	bne.n	801375e <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8013746:	193b      	adds	r3, r7, r4
 8013748:	781a      	ldrb	r2, [r3, #0]
 801374a:	499e      	ldr	r1, [pc, #632]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801374c:	0013      	movs	r3, r2
 801374e:	011b      	lsls	r3, r3, #4
 8013750:	1a9b      	subs	r3, r3, r2
 8013752:	009b      	lsls	r3, r3, #2
 8013754:	585b      	ldr	r3, [r3, r1]
 8013756:	0018      	movs	r0, r3
 8013758:	f7ff ff13 	bl	8013582 <LL_UCPD_SendHardReset>
 801375c:	e12a      	b.n	80139b4 <USBPD_HW_IF_SendBuffer+0x298>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801375e:	f3ef 8310 	mrs	r3, PRIMASK
 8013762:	61fb      	str	r3, [r7, #28]
  return(result);
 8013764:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8013766:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013768:	b672      	cpsid	i
}
 801376a:	46c0      	nop			; (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 801376c:	240f      	movs	r4, #15
 801376e:	193b      	adds	r3, r7, r4
 8013770:	781a      	ldrb	r2, [r3, #0]
 8013772:	4994      	ldr	r1, [pc, #592]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8013774:	2038      	movs	r0, #56	; 0x38
 8013776:	0013      	movs	r3, r2
 8013778:	011b      	lsls	r3, r3, #4
 801377a:	1a9b      	subs	r3, r3, r2
 801377c:	009b      	lsls	r3, r3, #2
 801377e:	18cb      	adds	r3, r1, r3
 8013780:	181b      	adds	r3, r3, r0
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	b2db      	uxtb	r3, r3
 8013786:	2b01      	cmp	r3, #1
 8013788:	d00e      	beq.n	80137a8 <USBPD_HW_IF_SendBuffer+0x8c>
 801378a:	193b      	adds	r3, r7, r4
 801378c:	781a      	ldrb	r2, [r3, #0]
 801378e:	498d      	ldr	r1, [pc, #564]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8013790:	0013      	movs	r3, r2
 8013792:	011b      	lsls	r3, r3, #4
 8013794:	1a9b      	subs	r3, r3, r2
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	18cb      	adds	r3, r1, r3
 801379a:	3304      	adds	r3, #4
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2201      	movs	r2, #1
 80137a2:	4013      	ands	r3, r2
 80137a4:	2b01      	cmp	r3, #1
 80137a6:	d10a      	bne.n	80137be <USBPD_HW_IF_SendBuffer+0xa2>
 80137a8:	6a3b      	ldr	r3, [r7, #32]
 80137aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137ac:	69bb      	ldr	r3, [r7, #24]
 80137ae:	f383 8810 	msr	PRIMASK, r3
}
 80137b2:	46c0      	nop			; (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 80137b4:	2327      	movs	r3, #39	; 0x27
 80137b6:	18fb      	adds	r3, r7, r3
 80137b8:	2202      	movs	r2, #2
 80137ba:	701a      	strb	r2, [r3, #0]
 80137bc:	e0fa      	b.n	80139b4 <USBPD_HW_IF_SendBuffer+0x298>
 80137be:	6a3b      	ldr	r3, [r7, #32]
 80137c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	f383 8810 	msr	PRIMASK, r3
}
 80137c8:	46c0      	nop			; (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 80137ca:	230e      	movs	r3, #14
 80137cc:	18fb      	adds	r3, r7, r3
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	2b07      	cmp	r3, #7
 80137d2:	d871      	bhi.n	80138b8 <USBPD_HW_IF_SendBuffer+0x19c>
 80137d4:	009a      	lsls	r2, r3, #2
 80137d6:	4b7c      	ldr	r3, [pc, #496]	; (80139c8 <USBPD_HW_IF_SendBuffer+0x2ac>)
 80137d8:	18d3      	adds	r3, r2, r3
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 80137de:	240f      	movs	r4, #15
 80137e0:	193b      	adds	r3, r7, r4
 80137e2:	781a      	ldrb	r2, [r3, #0]
 80137e4:	4977      	ldr	r1, [pc, #476]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80137e6:	0013      	movs	r3, r2
 80137e8:	011b      	lsls	r3, r3, #4
 80137ea:	1a9b      	subs	r3, r3, r2
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	585b      	ldr	r3, [r3, r1]
 80137f0:	4a76      	ldr	r2, [pc, #472]	; (80139cc <USBPD_HW_IF_SendBuffer+0x2b0>)
 80137f2:	0011      	movs	r1, r2
 80137f4:	0018      	movs	r0, r3
 80137f6:	f7ff ff31 	bl	801365c <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80137fa:	193b      	adds	r3, r7, r4
 80137fc:	781a      	ldrb	r2, [r3, #0]
 80137fe:	4971      	ldr	r1, [pc, #452]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8013800:	0013      	movs	r3, r2
 8013802:	011b      	lsls	r3, r3, #4
 8013804:	1a9b      	subs	r3, r3, r2
 8013806:	009b      	lsls	r3, r3, #2
 8013808:	585b      	ldr	r3, [r3, r1]
 801380a:	2100      	movs	r1, #0
 801380c:	0018      	movs	r0, r3
 801380e:	f7ff fed4 	bl	80135ba <LL_UCPD_SetTxMode>
          break;
 8013812:	e056      	b.n	80138c2 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8013814:	240f      	movs	r4, #15
 8013816:	193b      	adds	r3, r7, r4
 8013818:	781a      	ldrb	r2, [r3, #0]
 801381a:	496a      	ldr	r1, [pc, #424]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801381c:	0013      	movs	r3, r2
 801381e:	011b      	lsls	r3, r3, #4
 8013820:	1a9b      	subs	r3, r3, r2
 8013822:	009b      	lsls	r3, r3, #2
 8013824:	585b      	ldr	r3, [r3, r1]
 8013826:	4a6a      	ldr	r2, [pc, #424]	; (80139d0 <USBPD_HW_IF_SendBuffer+0x2b4>)
 8013828:	0011      	movs	r1, r2
 801382a:	0018      	movs	r0, r3
 801382c:	f7ff ff16 	bl	801365c <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8013830:	193b      	adds	r3, r7, r4
 8013832:	781a      	ldrb	r2, [r3, #0]
 8013834:	4963      	ldr	r1, [pc, #396]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8013836:	0013      	movs	r3, r2
 8013838:	011b      	lsls	r3, r3, #4
 801383a:	1a9b      	subs	r3, r3, r2
 801383c:	009b      	lsls	r3, r3, #2
 801383e:	585b      	ldr	r3, [r3, r1]
 8013840:	2100      	movs	r1, #0
 8013842:	0018      	movs	r0, r3
 8013844:	f7ff feb9 	bl	80135ba <LL_UCPD_SetTxMode>
          break;
 8013848:	e03b      	b.n	80138c2 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 801384a:	240f      	movs	r4, #15
 801384c:	193b      	adds	r3, r7, r4
 801384e:	781a      	ldrb	r2, [r3, #0]
 8013850:	495c      	ldr	r1, [pc, #368]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8013852:	0013      	movs	r3, r2
 8013854:	011b      	lsls	r3, r3, #4
 8013856:	1a9b      	subs	r3, r3, r2
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	585b      	ldr	r3, [r3, r1]
 801385c:	4a5d      	ldr	r2, [pc, #372]	; (80139d4 <USBPD_HW_IF_SendBuffer+0x2b8>)
 801385e:	0011      	movs	r1, r2
 8013860:	0018      	movs	r0, r3
 8013862:	f7ff fefb 	bl	801365c <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8013866:	193b      	adds	r3, r7, r4
 8013868:	781a      	ldrb	r2, [r3, #0]
 801386a:	4956      	ldr	r1, [pc, #344]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801386c:	0013      	movs	r3, r2
 801386e:	011b      	lsls	r3, r3, #4
 8013870:	1a9b      	subs	r3, r3, r2
 8013872:	009b      	lsls	r3, r3, #2
 8013874:	585b      	ldr	r3, [r3, r1]
 8013876:	2100      	movs	r1, #0
 8013878:	0018      	movs	r0, r3
 801387a:	f7ff fe9e 	bl	80135ba <LL_UCPD_SetTxMode>
          break;
 801387e:	e020      	b.n	80138c2 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8013880:	230f      	movs	r3, #15
 8013882:	18fb      	adds	r3, r7, r3
 8013884:	781a      	ldrb	r2, [r3, #0]
 8013886:	494f      	ldr	r1, [pc, #316]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8013888:	0013      	movs	r3, r2
 801388a:	011b      	lsls	r3, r3, #4
 801388c:	1a9b      	subs	r3, r3, r2
 801388e:	009b      	lsls	r3, r3, #2
 8013890:	585b      	ldr	r3, [r3, r1]
 8013892:	2101      	movs	r1, #1
 8013894:	0018      	movs	r0, r3
 8013896:	f7ff fe90 	bl	80135ba <LL_UCPD_SetTxMode>
          break;
 801389a:	e012      	b.n	80138c2 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 801389c:	230f      	movs	r3, #15
 801389e:	18fb      	adds	r3, r7, r3
 80138a0:	781a      	ldrb	r2, [r3, #0]
 80138a2:	4948      	ldr	r1, [pc, #288]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80138a4:	0013      	movs	r3, r2
 80138a6:	011b      	lsls	r3, r3, #4
 80138a8:	1a9b      	subs	r3, r3, r2
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	585b      	ldr	r3, [r3, r1]
 80138ae:	2102      	movs	r1, #2
 80138b0:	0018      	movs	r0, r3
 80138b2:	f7ff fe82 	bl	80135ba <LL_UCPD_SetTxMode>
          break;
 80138b6:	e004      	b.n	80138c2 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 80138b8:	2327      	movs	r3, #39	; 0x27
 80138ba:	18fb      	adds	r3, r7, r3
 80138bc:	2202      	movs	r2, #2
 80138be:	701a      	strb	r2, [r3, #0]
          break;
 80138c0:	46c0      	nop			; (mov r8, r8)
      }

      if (USBPD_OK == _status)
 80138c2:	2327      	movs	r3, #39	; 0x27
 80138c4:	18fb      	adds	r3, r7, r3
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d173      	bne.n	80139b4 <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80138cc:	200f      	movs	r0, #15
 80138ce:	183b      	adds	r3, r7, r0
 80138d0:	781a      	ldrb	r2, [r3, #0]
 80138d2:	493c      	ldr	r1, [pc, #240]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80138d4:	0013      	movs	r3, r2
 80138d6:	011b      	lsls	r3, r3, #4
 80138d8:	1a9b      	subs	r3, r3, r2
 80138da:	009b      	lsls	r3, r3, #2
 80138dc:	18cb      	adds	r3, r1, r3
 80138de:	3304      	adds	r3, #4
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	6819      	ldr	r1, [r3, #0]
 80138e4:	183b      	adds	r3, r7, r0
 80138e6:	781a      	ldrb	r2, [r3, #0]
 80138e8:	4836      	ldr	r0, [pc, #216]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80138ea:	0013      	movs	r3, r2
 80138ec:	011b      	lsls	r3, r3, #4
 80138ee:	1a9b      	subs	r3, r3, r2
 80138f0:	009b      	lsls	r3, r3, #2
 80138f2:	18c3      	adds	r3, r0, r3
 80138f4:	3304      	adds	r3, #4
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2201      	movs	r2, #1
 80138fa:	4391      	bics	r1, r2
 80138fc:	000a      	movs	r2, r1
 80138fe:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8013900:	46c0      	nop			; (mov r8, r8)
 8013902:	200f      	movs	r0, #15
 8013904:	183b      	adds	r3, r7, r0
 8013906:	781a      	ldrb	r2, [r3, #0]
 8013908:	492e      	ldr	r1, [pc, #184]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801390a:	0013      	movs	r3, r2
 801390c:	011b      	lsls	r3, r3, #4
 801390e:	1a9b      	subs	r3, r3, r2
 8013910:	009b      	lsls	r3, r3, #2
 8013912:	18cb      	adds	r3, r1, r3
 8013914:	3304      	adds	r3, #4
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2201      	movs	r2, #1
 801391c:	4013      	ands	r3, r2
 801391e:	2b01      	cmp	r3, #1
 8013920:	d0ef      	beq.n	8013902 <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8013922:	0004      	movs	r4, r0
 8013924:	193b      	adds	r3, r7, r4
 8013926:	781a      	ldrb	r2, [r3, #0]
 8013928:	4926      	ldr	r1, [pc, #152]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801392a:	0013      	movs	r3, r2
 801392c:	011b      	lsls	r3, r3, #4
 801392e:	1a9b      	subs	r3, r3, r2
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	18cb      	adds	r3, r1, r3
 8013934:	3304      	adds	r3, #4
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	68ba      	ldr	r2, [r7, #8]
 801393a:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 801393c:	193b      	adds	r3, r7, r4
 801393e:	781a      	ldrb	r2, [r3, #0]
 8013940:	4920      	ldr	r1, [pc, #128]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8013942:	0013      	movs	r3, r2
 8013944:	011b      	lsls	r3, r3, #4
 8013946:	1a9b      	subs	r3, r3, r2
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	18cb      	adds	r3, r1, r3
 801394c:	3304      	adds	r3, #4
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	687a      	ldr	r2, [r7, #4]
 8013952:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8013954:	193b      	adds	r3, r7, r4
 8013956:	781a      	ldrb	r2, [r3, #0]
 8013958:	491a      	ldr	r1, [pc, #104]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801395a:	0013      	movs	r3, r2
 801395c:	011b      	lsls	r3, r3, #4
 801395e:	1a9b      	subs	r3, r3, r2
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	18cb      	adds	r3, r1, r3
 8013964:	3304      	adds	r3, #4
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	6819      	ldr	r1, [r3, #0]
 801396a:	193b      	adds	r3, r7, r4
 801396c:	781a      	ldrb	r2, [r3, #0]
 801396e:	4815      	ldr	r0, [pc, #84]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8013970:	0013      	movs	r3, r2
 8013972:	011b      	lsls	r3, r3, #4
 8013974:	1a9b      	subs	r3, r3, r2
 8013976:	009b      	lsls	r3, r3, #2
 8013978:	18c3      	adds	r3, r0, r3
 801397a:	3304      	adds	r3, #4
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	2201      	movs	r2, #1
 8013980:	430a      	orrs	r2, r1
 8013982:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8013984:	193b      	adds	r3, r7, r4
 8013986:	781a      	ldrb	r2, [r3, #0]
 8013988:	490e      	ldr	r1, [pc, #56]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801398a:	0013      	movs	r3, r2
 801398c:	011b      	lsls	r3, r3, #4
 801398e:	1a9b      	subs	r3, r3, r2
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	585b      	ldr	r3, [r3, r1]
 8013994:	687a      	ldr	r2, [r7, #4]
 8013996:	0011      	movs	r1, r2
 8013998:	0018      	movs	r0, r3
 801399a:	f7ff fe6b 	bl	8013674 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 801399e:	193b      	adds	r3, r7, r4
 80139a0:	781a      	ldrb	r2, [r3, #0]
 80139a2:	4908      	ldr	r1, [pc, #32]	; (80139c4 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80139a4:	0013      	movs	r3, r2
 80139a6:	011b      	lsls	r3, r3, #4
 80139a8:	1a9b      	subs	r3, r3, r2
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	585b      	ldr	r3, [r3, r1]
 80139ae:	0018      	movs	r0, r3
 80139b0:	f7ff fdf5 	bl	801359e <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 80139b4:	2327      	movs	r3, #39	; 0x27
 80139b6:	18fb      	adds	r3, r7, r3
 80139b8:	781b      	ldrb	r3, [r3, #0]
}
 80139ba:	0018      	movs	r0, r3
 80139bc:	46bd      	mov	sp, r7
 80139be:	b00b      	add	sp, #44	; 0x2c
 80139c0:	bd90      	pop	{r4, r7, pc}
 80139c2:	46c0      	nop			; (mov r8, r8)
 80139c4:	20000568 	.word	0x20000568
 80139c8:	080240ec 	.word	0x080240ec
 80139cc:	0008e318 	.word	0x0008e318
 80139d0:	00031b18 	.word	0x00031b18
 80139d4:	000360d8 	.word	0x000360d8

080139d8 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b082      	sub	sp, #8
 80139dc:	af00      	add	r7, sp, #0
 80139de:	0002      	movs	r2, r0
 80139e0:	1dfb      	adds	r3, r7, #7
 80139e2:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 80139e4:	1dfb      	adds	r3, r7, #7
 80139e6:	781a      	ldrb	r2, [r3, #0]
 80139e8:	490c      	ldr	r1, [pc, #48]	; (8013a1c <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 80139ea:	0013      	movs	r3, r2
 80139ec:	011b      	lsls	r3, r3, #4
 80139ee:	1a9b      	subs	r3, r3, r2
 80139f0:	009b      	lsls	r3, r3, #2
 80139f2:	585b      	ldr	r3, [r3, r1]
 80139f4:	2102      	movs	r1, #2
 80139f6:	0018      	movs	r0, r3
 80139f8:	f7ff fddf 	bl	80135ba <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80139fc:	1dfb      	adds	r3, r7, #7
 80139fe:	781a      	ldrb	r2, [r3, #0]
 8013a00:	4906      	ldr	r1, [pc, #24]	; (8013a1c <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 8013a02:	0013      	movs	r3, r2
 8013a04:	011b      	lsls	r3, r3, #4
 8013a06:	1a9b      	subs	r3, r3, r2
 8013a08:	009b      	lsls	r3, r3, #2
 8013a0a:	585b      	ldr	r3, [r3, r1]
 8013a0c:	0018      	movs	r0, r3
 8013a0e:	f7ff fdc6 	bl	801359e <LL_UCPD_SendMessage>
}
 8013a12:	46c0      	nop			; (mov r8, r8)
 8013a14:	46bd      	mov	sp, r7
 8013a16:	b002      	add	sp, #8
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	46c0      	nop			; (mov r8, r8)
 8013a1c:	20000568 	.word	0x20000568

08013a20 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b082      	sub	sp, #8
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	0002      	movs	r2, r0
 8013a28:	1dfb      	adds	r3, r7, #7
 8013a2a:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8013a2c:	2001      	movs	r0, #1
 8013a2e:	f7ff fc7d 	bl	801332c <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 8013a32:	1dfb      	adds	r3, r7, #7
 8013a34:	781a      	ldrb	r2, [r3, #0]
 8013a36:	4953      	ldr	r1, [pc, #332]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013a38:	0013      	movs	r3, r2
 8013a3a:	011b      	lsls	r3, r3, #4
 8013a3c:	1a9b      	subs	r3, r3, r2
 8013a3e:	009b      	lsls	r3, r3, #2
 8013a40:	18cb      	adds	r3, r1, r3
 8013a42:	3310      	adds	r3, #16
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	789b      	ldrb	r3, [r3, #2]
 8013a48:	079b      	lsls	r3, r3, #30
 8013a4a:	0f9b      	lsrs	r3, r3, #30
 8013a4c:	b2db      	uxtb	r3, r3
 8013a4e:	2b02      	cmp	r3, #2
 8013a50:	d021      	beq.n	8013a96 <USBPDM1_AssertRp+0x76>
 8013a52:	dc2f      	bgt.n	8013ab4 <USBPDM1_AssertRp+0x94>
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d002      	beq.n	8013a5e <USBPDM1_AssertRp+0x3e>
 8013a58:	2b01      	cmp	r3, #1
 8013a5a:	d00d      	beq.n	8013a78 <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8013a5c:	e02a      	b.n	8013ab4 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8013a5e:	1dfb      	adds	r3, r7, #7
 8013a60:	781a      	ldrb	r2, [r3, #0]
 8013a62:	4948      	ldr	r1, [pc, #288]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013a64:	0013      	movs	r3, r2
 8013a66:	011b      	lsls	r3, r3, #4
 8013a68:	1a9b      	subs	r3, r3, r2
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	585b      	ldr	r3, [r3, r1]
 8013a6e:	2180      	movs	r1, #128	; 0x80
 8013a70:	0018      	movs	r0, r3
 8013a72:	f7ff fd31 	bl	80134d8 <LL_UCPD_SetRpResistor>
      break;
 8013a76:	e01e      	b.n	8013ab6 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8013a78:	1dfb      	adds	r3, r7, #7
 8013a7a:	781a      	ldrb	r2, [r3, #0]
 8013a7c:	4941      	ldr	r1, [pc, #260]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013a7e:	0013      	movs	r3, r2
 8013a80:	011b      	lsls	r3, r3, #4
 8013a82:	1a9b      	subs	r3, r3, r2
 8013a84:	009b      	lsls	r3, r3, #2
 8013a86:	585b      	ldr	r3, [r3, r1]
 8013a88:	2280      	movs	r2, #128	; 0x80
 8013a8a:	0052      	lsls	r2, r2, #1
 8013a8c:	0011      	movs	r1, r2
 8013a8e:	0018      	movs	r0, r3
 8013a90:	f7ff fd22 	bl	80134d8 <LL_UCPD_SetRpResistor>
      break;
 8013a94:	e00f      	b.n	8013ab6 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8013a96:	1dfb      	adds	r3, r7, #7
 8013a98:	781a      	ldrb	r2, [r3, #0]
 8013a9a:	493a      	ldr	r1, [pc, #232]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013a9c:	0013      	movs	r3, r2
 8013a9e:	011b      	lsls	r3, r3, #4
 8013aa0:	1a9b      	subs	r3, r3, r2
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	585b      	ldr	r3, [r3, r1]
 8013aa6:	22c0      	movs	r2, #192	; 0xc0
 8013aa8:	0052      	lsls	r2, r2, #1
 8013aaa:	0011      	movs	r1, r2
 8013aac:	0018      	movs	r0, r3
 8013aae:	f7ff fd13 	bl	80134d8 <LL_UCPD_SetRpResistor>
      break;
 8013ab2:	e000      	b.n	8013ab6 <USBPDM1_AssertRp+0x96>
      break;
 8013ab4:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8013ab6:	1dfb      	adds	r3, r7, #7
 8013ab8:	781a      	ldrb	r2, [r3, #0]
 8013aba:	4932      	ldr	r1, [pc, #200]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013abc:	0013      	movs	r3, r2
 8013abe:	011b      	lsls	r3, r3, #4
 8013ac0:	1a9b      	subs	r3, r3, r2
 8013ac2:	009b      	lsls	r3, r3, #2
 8013ac4:	585b      	ldr	r3, [r3, r1]
 8013ac6:	2100      	movs	r1, #0
 8013ac8:	0018      	movs	r0, r3
 8013aca:	f7ff fcd1 	bl	8013470 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8013ace:	1dfb      	adds	r3, r7, #7
 8013ad0:	781a      	ldrb	r2, [r3, #0]
 8013ad2:	492c      	ldr	r1, [pc, #176]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013ad4:	0013      	movs	r3, r2
 8013ad6:	011b      	lsls	r3, r3, #4
 8013ad8:	1a9b      	subs	r3, r3, r2
 8013ada:	009b      	lsls	r3, r3, #2
 8013adc:	585b      	ldr	r3, [r3, r1]
 8013ade:	0018      	movs	r0, r3
 8013ae0:	f7ff fcea 	bl	80134b8 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8013ae4:	1dfb      	adds	r3, r7, #7
 8013ae6:	781a      	ldrb	r2, [r3, #0]
 8013ae8:	4926      	ldr	r1, [pc, #152]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013aea:	0013      	movs	r3, r2
 8013aec:	011b      	lsls	r3, r3, #4
 8013aee:	1a9b      	subs	r3, r3, r2
 8013af0:	009b      	lsls	r3, r3, #2
 8013af2:	18cb      	adds	r3, r1, r3
 8013af4:	3334      	adds	r3, #52	; 0x34
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d10e      	bne.n	8013b1a <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8013afc:	1dfb      	adds	r3, r7, #7
 8013afe:	781a      	ldrb	r2, [r3, #0]
 8013b00:	4920      	ldr	r1, [pc, #128]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013b02:	0013      	movs	r3, r2
 8013b04:	011b      	lsls	r3, r3, #4
 8013b06:	1a9b      	subs	r3, r3, r2
 8013b08:	009b      	lsls	r3, r3, #2
 8013b0a:	585b      	ldr	r3, [r3, r1]
 8013b0c:	22c0      	movs	r2, #192	; 0xc0
 8013b0e:	0112      	lsls	r2, r2, #4
 8013b10:	0011      	movs	r1, r2
 8013b12:	0018      	movs	r0, r3
 8013b14:	f7ff fcac 	bl	8013470 <LL_UCPD_SetccEnable>
 8013b18:	e01b      	b.n	8013b52 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8013b1a:	1dfb      	adds	r3, r7, #7
 8013b1c:	781a      	ldrb	r2, [r3, #0]
 8013b1e:	4919      	ldr	r1, [pc, #100]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013b20:	0013      	movs	r3, r2
 8013b22:	011b      	lsls	r3, r3, #4
 8013b24:	1a9b      	subs	r3, r3, r2
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8013b2a:	1dfb      	adds	r3, r7, #7
 8013b2c:	781a      	ldrb	r2, [r3, #0]
 8013b2e:	4915      	ldr	r1, [pc, #84]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013b30:	0013      	movs	r3, r2
 8013b32:	011b      	lsls	r3, r3, #4
 8013b34:	1a9b      	subs	r3, r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	18cb      	adds	r3, r1, r3
 8013b3a:	3334      	adds	r3, #52	; 0x34
 8013b3c:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d102      	bne.n	8013b48 <USBPDM1_AssertRp+0x128>
 8013b42:	2380      	movs	r3, #128	; 0x80
 8013b44:	00db      	lsls	r3, r3, #3
 8013b46:	e001      	b.n	8013b4c <USBPDM1_AssertRp+0x12c>
 8013b48:	2380      	movs	r3, #128	; 0x80
 8013b4a:	011b      	lsls	r3, r3, #4
 8013b4c:	0019      	movs	r1, r3
 8013b4e:	f7ff fc8f 	bl	8013470 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8013b52:	4b0d      	ldr	r3, [pc, #52]	; (8013b88 <USBPDM1_AssertRp+0x168>)
 8013b54:	6819      	ldr	r1, [r3, #0]
 8013b56:	1dfb      	adds	r3, r7, #7
 8013b58:	781a      	ldrb	r2, [r3, #0]
 8013b5a:	480a      	ldr	r0, [pc, #40]	; (8013b84 <USBPDM1_AssertRp+0x164>)
 8013b5c:	0013      	movs	r3, r2
 8013b5e:	011b      	lsls	r3, r3, #4
 8013b60:	1a9b      	subs	r3, r3, r2
 8013b62:	009b      	lsls	r3, r3, #2
 8013b64:	581b      	ldr	r3, [r3, r0]
 8013b66:	4a09      	ldr	r2, [pc, #36]	; (8013b8c <USBPDM1_AssertRp+0x16c>)
 8013b68:	4293      	cmp	r3, r2
 8013b6a:	d102      	bne.n	8013b72 <USBPDM1_AssertRp+0x152>
 8013b6c:	2380      	movs	r3, #128	; 0x80
 8013b6e:	009b      	lsls	r3, r3, #2
 8013b70:	e001      	b.n	8013b76 <USBPDM1_AssertRp+0x156>
 8013b72:	2380      	movs	r3, #128	; 0x80
 8013b74:	00db      	lsls	r3, r3, #3
 8013b76:	4a04      	ldr	r2, [pc, #16]	; (8013b88 <USBPDM1_AssertRp+0x168>)
 8013b78:	430b      	orrs	r3, r1
 8013b7a:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8013b7c:	46c0      	nop			; (mov r8, r8)
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	b002      	add	sp, #8
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	20000568 	.word	0x20000568
 8013b88:	40010000 	.word	0x40010000
 8013b8c:	4000a000 	.word	0x4000a000

08013b90 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	0002      	movs	r2, r0
 8013b98:	1dfb      	adds	r3, r7, #7
 8013b9a:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8013b9c:	46c0      	nop			; (mov r8, r8)
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	b002      	add	sp, #8
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	0002      	movs	r2, r0
 8013bac:	1dfb      	adds	r3, r7, #7
 8013bae:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8013bb0:	1dfb      	adds	r3, r7, #7
 8013bb2:	781a      	ldrb	r2, [r3, #0]
 8013bb4:	494b      	ldr	r1, [pc, #300]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013bb6:	0013      	movs	r3, r2
 8013bb8:	011b      	lsls	r3, r3, #4
 8013bba:	1a9b      	subs	r3, r3, r2
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	585b      	ldr	r3, [r3, r1]
 8013bc0:	0018      	movs	r0, r3
 8013bc2:	f7ff fbf7 	bl	80133b4 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8013bc6:	1dfb      	adds	r3, r7, #7
 8013bc8:	781a      	ldrb	r2, [r3, #0]
 8013bca:	4946      	ldr	r1, [pc, #280]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013bcc:	0013      	movs	r3, r2
 8013bce:	011b      	lsls	r3, r3, #4
 8013bd0:	1a9b      	subs	r3, r3, r2
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	585b      	ldr	r3, [r3, r1]
 8013bd6:	0018      	movs	r0, r3
 8013bd8:	f7ff fc0c 	bl	80133f4 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8013bdc:	2001      	movs	r0, #1
 8013bde:	f7ff fba5 	bl	801332c <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8013be2:	1dfb      	adds	r3, r7, #7
 8013be4:	781a      	ldrb	r2, [r3, #0]
 8013be6:	493f      	ldr	r1, [pc, #252]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013be8:	0013      	movs	r3, r2
 8013bea:	011b      	lsls	r3, r3, #4
 8013bec:	1a9b      	subs	r3, r3, r2
 8013bee:	009b      	lsls	r3, r3, #2
 8013bf0:	585b      	ldr	r3, [r3, r1]
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	0018      	movs	r0, r3
 8013bf6:	f7ff fc3b 	bl	8013470 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8013bfa:	1dfb      	adds	r3, r7, #7
 8013bfc:	781a      	ldrb	r2, [r3, #0]
 8013bfe:	4939      	ldr	r1, [pc, #228]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013c00:	0013      	movs	r3, r2
 8013c02:	011b      	lsls	r3, r3, #4
 8013c04:	1a9b      	subs	r3, r3, r2
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	585b      	ldr	r3, [r3, r1]
 8013c0a:	0018      	movs	r0, r3
 8013c0c:	f7ff fc44 	bl	8013498 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8013c10:	1dfb      	adds	r3, r7, #7
 8013c12:	781a      	ldrb	r2, [r3, #0]
 8013c14:	4933      	ldr	r1, [pc, #204]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013c16:	0013      	movs	r3, r2
 8013c18:	011b      	lsls	r3, r3, #4
 8013c1a:	1a9b      	subs	r3, r3, r2
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	18cb      	adds	r3, r1, r3
 8013c20:	3334      	adds	r3, #52	; 0x34
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d10e      	bne.n	8013c46 <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8013c28:	1dfb      	adds	r3, r7, #7
 8013c2a:	781a      	ldrb	r2, [r3, #0]
 8013c2c:	492d      	ldr	r1, [pc, #180]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013c2e:	0013      	movs	r3, r2
 8013c30:	011b      	lsls	r3, r3, #4
 8013c32:	1a9b      	subs	r3, r3, r2
 8013c34:	009b      	lsls	r3, r3, #2
 8013c36:	585b      	ldr	r3, [r3, r1]
 8013c38:	22c0      	movs	r2, #192	; 0xc0
 8013c3a:	0112      	lsls	r2, r2, #4
 8013c3c:	0011      	movs	r1, r2
 8013c3e:	0018      	movs	r0, r3
 8013c40:	f7ff fc16 	bl	8013470 <LL_UCPD_SetccEnable>
 8013c44:	e01b      	b.n	8013c7e <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8013c46:	1dfb      	adds	r3, r7, #7
 8013c48:	781a      	ldrb	r2, [r3, #0]
 8013c4a:	4926      	ldr	r1, [pc, #152]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013c4c:	0013      	movs	r3, r2
 8013c4e:	011b      	lsls	r3, r3, #4
 8013c50:	1a9b      	subs	r3, r3, r2
 8013c52:	009b      	lsls	r3, r3, #2
 8013c54:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8013c56:	1dfb      	adds	r3, r7, #7
 8013c58:	781a      	ldrb	r2, [r3, #0]
 8013c5a:	4922      	ldr	r1, [pc, #136]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013c5c:	0013      	movs	r3, r2
 8013c5e:	011b      	lsls	r3, r3, #4
 8013c60:	1a9b      	subs	r3, r3, r2
 8013c62:	009b      	lsls	r3, r3, #2
 8013c64:	18cb      	adds	r3, r1, r3
 8013c66:	3334      	adds	r3, #52	; 0x34
 8013c68:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8013c6a:	2b01      	cmp	r3, #1
 8013c6c:	d102      	bne.n	8013c74 <USBPDM1_AssertRd+0xd0>
 8013c6e:	2380      	movs	r3, #128	; 0x80
 8013c70:	00db      	lsls	r3, r3, #3
 8013c72:	e001      	b.n	8013c78 <USBPDM1_AssertRd+0xd4>
 8013c74:	2380      	movs	r3, #128	; 0x80
 8013c76:	011b      	lsls	r3, r3, #4
 8013c78:	0019      	movs	r1, r3
 8013c7a:	f7ff fbf9 	bl	8013470 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8013c7e:	4b1a      	ldr	r3, [pc, #104]	; (8013ce8 <USBPDM1_AssertRd+0x144>)
 8013c80:	6819      	ldr	r1, [r3, #0]
 8013c82:	1dfb      	adds	r3, r7, #7
 8013c84:	781a      	ldrb	r2, [r3, #0]
 8013c86:	4817      	ldr	r0, [pc, #92]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013c88:	0013      	movs	r3, r2
 8013c8a:	011b      	lsls	r3, r3, #4
 8013c8c:	1a9b      	subs	r3, r3, r2
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	581b      	ldr	r3, [r3, r0]
 8013c92:	4a16      	ldr	r2, [pc, #88]	; (8013cec <USBPDM1_AssertRd+0x148>)
 8013c94:	4293      	cmp	r3, r2
 8013c96:	d102      	bne.n	8013c9e <USBPDM1_AssertRd+0xfa>
 8013c98:	2380      	movs	r3, #128	; 0x80
 8013c9a:	009b      	lsls	r3, r3, #2
 8013c9c:	e001      	b.n	8013ca2 <USBPDM1_AssertRd+0xfe>
 8013c9e:	2380      	movs	r3, #128	; 0x80
 8013ca0:	00db      	lsls	r3, r3, #3
 8013ca2:	4a11      	ldr	r2, [pc, #68]	; (8013ce8 <USBPDM1_AssertRd+0x144>)
 8013ca4:	430b      	orrs	r3, r1
 8013ca6:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8013ca8:	2001      	movs	r0, #1
 8013caa:	f7f5 fa37 	bl	800911c <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8013cae:	1dfb      	adds	r3, r7, #7
 8013cb0:	781a      	ldrb	r2, [r3, #0]
 8013cb2:	490c      	ldr	r1, [pc, #48]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013cb4:	0013      	movs	r3, r2
 8013cb6:	011b      	lsls	r3, r3, #4
 8013cb8:	1a9b      	subs	r3, r3, r2
 8013cba:	009b      	lsls	r3, r3, #2
 8013cbc:	585b      	ldr	r3, [r3, r1]
 8013cbe:	0018      	movs	r0, r3
 8013cc0:	f7ff fb68 	bl	8013394 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8013cc4:	1dfb      	adds	r3, r7, #7
 8013cc6:	781a      	ldrb	r2, [r3, #0]
 8013cc8:	4906      	ldr	r1, [pc, #24]	; (8013ce4 <USBPDM1_AssertRd+0x140>)
 8013cca:	0013      	movs	r3, r2
 8013ccc:	011b      	lsls	r3, r3, #4
 8013cce:	1a9b      	subs	r3, r3, r2
 8013cd0:	009b      	lsls	r3, r3, #2
 8013cd2:	585b      	ldr	r3, [r3, r1]
 8013cd4:	0018      	movs	r0, r3
 8013cd6:	f7ff fb7d 	bl	80133d4 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8013cda:	46c0      	nop			; (mov r8, r8)
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	b002      	add	sp, #8
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	46c0      	nop			; (mov r8, r8)
 8013ce4:	20000568 	.word	0x20000568
 8013ce8:	40010000 	.word	0x40010000
 8013cec:	4000a000 	.word	0x4000a000

08013cf0 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	0002      	movs	r2, r0
 8013cf8:	1dfb      	adds	r3, r7, #7
 8013cfa:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8013cfc:	46c0      	nop			; (mov r8, r8)
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	b002      	add	sp, #8
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b082      	sub	sp, #8
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	0002      	movs	r2, r0
 8013d0c:	1dfb      	adds	r3, r7, #7
 8013d0e:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8013d10:	2001      	movs	r0, #1
 8013d12:	f7ff fb0b 	bl	801332c <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8013d16:	1dfb      	adds	r3, r7, #7
 8013d18:	781a      	ldrb	r2, [r3, #0]
 8013d1a:	4930      	ldr	r1, [pc, #192]	; (8013ddc <USBPDM1_EnterErrorRecovery+0xd8>)
 8013d1c:	0013      	movs	r3, r2
 8013d1e:	011b      	lsls	r3, r3, #4
 8013d20:	1a9b      	subs	r3, r3, r2
 8013d22:	009b      	lsls	r3, r3, #2
 8013d24:	585b      	ldr	r3, [r3, r1]
 8013d26:	0018      	movs	r0, r3
 8013d28:	f7ff fbc6 	bl	80134b8 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8013d2c:	1dfb      	adds	r3, r7, #7
 8013d2e:	781a      	ldrb	r2, [r3, #0]
 8013d30:	492a      	ldr	r1, [pc, #168]	; (8013ddc <USBPDM1_EnterErrorRecovery+0xd8>)
 8013d32:	0013      	movs	r3, r2
 8013d34:	011b      	lsls	r3, r3, #4
 8013d36:	1a9b      	subs	r3, r3, r2
 8013d38:	009b      	lsls	r3, r3, #2
 8013d3a:	585b      	ldr	r3, [r3, r1]
 8013d3c:	2100      	movs	r1, #0
 8013d3e:	0018      	movs	r0, r3
 8013d40:	f7ff fbca 	bl	80134d8 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8013d44:	1dfb      	adds	r3, r7, #7
 8013d46:	781a      	ldrb	r2, [r3, #0]
 8013d48:	4924      	ldr	r1, [pc, #144]	; (8013ddc <USBPDM1_EnterErrorRecovery+0xd8>)
 8013d4a:	0013      	movs	r3, r2
 8013d4c:	011b      	lsls	r3, r3, #4
 8013d4e:	1a9b      	subs	r3, r3, r2
 8013d50:	009b      	lsls	r3, r3, #2
 8013d52:	585b      	ldr	r3, [r3, r1]
 8013d54:	2100      	movs	r1, #0
 8013d56:	0018      	movs	r0, r3
 8013d58:	f7ff fb8a 	bl	8013470 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8013d5c:	4b20      	ldr	r3, [pc, #128]	; (8013de0 <USBPDM1_EnterErrorRecovery+0xdc>)
 8013d5e:	6819      	ldr	r1, [r3, #0]
 8013d60:	1dfb      	adds	r3, r7, #7
 8013d62:	781a      	ldrb	r2, [r3, #0]
 8013d64:	481d      	ldr	r0, [pc, #116]	; (8013ddc <USBPDM1_EnterErrorRecovery+0xd8>)
 8013d66:	0013      	movs	r3, r2
 8013d68:	011b      	lsls	r3, r3, #4
 8013d6a:	1a9b      	subs	r3, r3, r2
 8013d6c:	009b      	lsls	r3, r3, #2
 8013d6e:	581b      	ldr	r3, [r3, r0]
 8013d70:	4a1c      	ldr	r2, [pc, #112]	; (8013de4 <USBPDM1_EnterErrorRecovery+0xe0>)
 8013d72:	4293      	cmp	r3, r2
 8013d74:	d102      	bne.n	8013d7c <USBPDM1_EnterErrorRecovery+0x78>
 8013d76:	2380      	movs	r3, #128	; 0x80
 8013d78:	009b      	lsls	r3, r3, #2
 8013d7a:	e001      	b.n	8013d80 <USBPDM1_EnterErrorRecovery+0x7c>
 8013d7c:	2380      	movs	r3, #128	; 0x80
 8013d7e:	00db      	lsls	r3, r3, #3
 8013d80:	4a17      	ldr	r2, [pc, #92]	; (8013de0 <USBPDM1_EnterErrorRecovery+0xdc>)
 8013d82:	430b      	orrs	r3, r1
 8013d84:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8013d86:	1dfb      	adds	r3, r7, #7
 8013d88:	781a      	ldrb	r2, [r3, #0]
 8013d8a:	4914      	ldr	r1, [pc, #80]	; (8013ddc <USBPDM1_EnterErrorRecovery+0xd8>)
 8013d8c:	0013      	movs	r3, r2
 8013d8e:	011b      	lsls	r3, r3, #4
 8013d90:	1a9b      	subs	r3, r3, r2
 8013d92:	009b      	lsls	r3, r3, #2
 8013d94:	585b      	ldr	r3, [r3, r1]
 8013d96:	0018      	movs	r0, r3
 8013d98:	f7ff fbd2 	bl	8013540 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8013d9c:	1dfb      	adds	r3, r7, #7
 8013d9e:	781a      	ldrb	r2, [r3, #0]
 8013da0:	490e      	ldr	r1, [pc, #56]	; (8013ddc <USBPDM1_EnterErrorRecovery+0xd8>)
 8013da2:	0013      	movs	r3, r2
 8013da4:	011b      	lsls	r3, r3, #4
 8013da6:	1a9b      	subs	r3, r3, r2
 8013da8:	009b      	lsls	r3, r3, #2
 8013daa:	18cb      	adds	r3, r1, r3
 8013dac:	330c      	adds	r3, #12
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	7a1b      	ldrb	r3, [r3, #8]
 8013db2:	2202      	movs	r2, #2
 8013db4:	4013      	ands	r3, r2
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00a      	beq.n	8013dd2 <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8013dbc:	1dfb      	adds	r3, r7, #7
 8013dbe:	781a      	ldrb	r2, [r3, #0]
 8013dc0:	4906      	ldr	r1, [pc, #24]	; (8013ddc <USBPDM1_EnterErrorRecovery+0xd8>)
 8013dc2:	0013      	movs	r3, r2
 8013dc4:	011b      	lsls	r3, r3, #4
 8013dc6:	1a9b      	subs	r3, r3, r2
 8013dc8:	009b      	lsls	r3, r3, #2
 8013dca:	585b      	ldr	r3, [r3, r1]
 8013dcc:	0018      	movs	r0, r3
 8013dce:	f7ff fb3f 	bl	8013450 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 8013dd2:	46c0      	nop			; (mov r8, r8)
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	b002      	add	sp, #8
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	46c0      	nop			; (mov r8, r8)
 8013ddc:	20000568 	.word	0x20000568
 8013de0:	40010000 	.word	0x40010000
 8013de4:	4000a000 	.word	0x4000a000

08013de8 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	0002      	movs	r2, r0
 8013df0:	1dfb      	adds	r3, r7, #7
 8013df2:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8013df4:	1dfb      	adds	r3, r7, #7
 8013df6:	781a      	ldrb	r2, [r3, #0]
 8013df8:	4906      	ldr	r1, [pc, #24]	; (8013e14 <USBPD_HW_IF_EnableRX+0x2c>)
 8013dfa:	0013      	movs	r3, r2
 8013dfc:	011b      	lsls	r3, r3, #4
 8013dfe:	1a9b      	subs	r3, r3, r2
 8013e00:	009b      	lsls	r3, r3, #2
 8013e02:	585b      	ldr	r3, [r3, r1]
 8013e04:	0018      	movs	r0, r3
 8013e06:	f7ff fb8d 	bl	8013524 <LL_UCPD_RxEnable>
}
 8013e0a:	46c0      	nop			; (mov r8, r8)
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	b002      	add	sp, #8
 8013e10:	bd80      	pop	{r7, pc}
 8013e12:	46c0      	nop			; (mov r8, r8)
 8013e14:	20000568 	.word	0x20000568

08013e18 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b082      	sub	sp, #8
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	0002      	movs	r2, r0
 8013e20:	1dfb      	adds	r3, r7, #7
 8013e22:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8013e24:	1dfb      	adds	r3, r7, #7
 8013e26:	781a      	ldrb	r2, [r3, #0]
 8013e28:	4906      	ldr	r1, [pc, #24]	; (8013e44 <USBPD_HW_IF_DisableRX+0x2c>)
 8013e2a:	0013      	movs	r3, r2
 8013e2c:	011b      	lsls	r3, r3, #4
 8013e2e:	1a9b      	subs	r3, r3, r2
 8013e30:	009b      	lsls	r3, r3, #2
 8013e32:	585b      	ldr	r3, [r3, r1]
 8013e34:	0018      	movs	r0, r3
 8013e36:	f7ff fb83 	bl	8013540 <LL_UCPD_RxDisable>
}
 8013e3a:	46c0      	nop			; (mov r8, r8)
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	b002      	add	sp, #8
 8013e40:	bd80      	pop	{r7, pc}
 8013e42:	46c0      	nop			; (mov r8, r8)
 8013e44:	20000568 	.word	0x20000568

08013e48 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8013e48:	b590      	push	{r4, r7, lr}
 8013e4a:	b085      	sub	sp, #20
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	0002      	movs	r2, r0
 8013e50:	6039      	str	r1, [r7, #0]
 8013e52:	1dfb      	adds	r3, r7, #7
 8013e54:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8013e56:	f000 fc65 	bl	8014724 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8013e5a:	1dfb      	adds	r3, r7, #7
 8013e5c:	781c      	ldrb	r4, [r3, #0]
 8013e5e:	1dfb      	adds	r3, r7, #7
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	0018      	movs	r0, r3
 8013e64:	f7fe fd32 	bl	80128cc <USBPD_HW_Init_DMATxInstance>
 8013e68:	0001      	movs	r1, r0
 8013e6a:	4aa6      	ldr	r2, [pc, #664]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013e6c:	0023      	movs	r3, r4
 8013e6e:	011b      	lsls	r3, r3, #4
 8013e70:	1b1b      	subs	r3, r3, r4
 8013e72:	009b      	lsls	r3, r3, #2
 8013e74:	18d3      	adds	r3, r2, r3
 8013e76:	3304      	adds	r3, #4
 8013e78:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8013e7a:	1dfb      	adds	r3, r7, #7
 8013e7c:	781c      	ldrb	r4, [r3, #0]
 8013e7e:	1dfb      	adds	r3, r7, #7
 8013e80:	781b      	ldrb	r3, [r3, #0]
 8013e82:	0018      	movs	r0, r3
 8013e84:	f7fe fcd2 	bl	801282c <USBPD_HW_Init_DMARxInstance>
 8013e88:	0001      	movs	r1, r0
 8013e8a:	4a9e      	ldr	r2, [pc, #632]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013e8c:	0023      	movs	r3, r4
 8013e8e:	011b      	lsls	r3, r3, #4
 8013e90:	1b1b      	subs	r3, r3, r4
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	18d3      	adds	r3, r2, r3
 8013e96:	3308      	adds	r3, #8
 8013e98:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8013e9a:	1dfb      	adds	r3, r7, #7
 8013e9c:	781a      	ldrb	r2, [r3, #0]
 8013e9e:	4999      	ldr	r1, [pc, #612]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013ea0:	0013      	movs	r3, r2
 8013ea2:	011b      	lsls	r3, r3, #4
 8013ea4:	1a9b      	subs	r3, r3, r2
 8013ea6:	009b      	lsls	r3, r3, #2
 8013ea8:	585b      	ldr	r3, [r3, r1]
 8013eaa:	3330      	adds	r3, #48	; 0x30
 8013eac:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8013eae:	1dfb      	adds	r3, r7, #7
 8013eb0:	781a      	ldrb	r2, [r3, #0]
 8013eb2:	4994      	ldr	r1, [pc, #592]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013eb4:	0013      	movs	r3, r2
 8013eb6:	011b      	lsls	r3, r3, #4
 8013eb8:	1a9b      	subs	r3, r3, r2
 8013eba:	009b      	lsls	r3, r3, #2
 8013ebc:	18cb      	adds	r3, r1, r3
 8013ebe:	3308      	adds	r3, #8
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	68fa      	ldr	r2, [r7, #12]
 8013ec4:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8013ec6:	1dfb      	adds	r3, r7, #7
 8013ec8:	781a      	ldrb	r2, [r3, #0]
 8013eca:	498e      	ldr	r1, [pc, #568]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013ecc:	0013      	movs	r3, r2
 8013ece:	011b      	lsls	r3, r3, #4
 8013ed0:	1a9b      	subs	r3, r3, r2
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	18cb      	adds	r3, r1, r3
 8013ed6:	3330      	adds	r3, #48	; 0x30
 8013ed8:	6818      	ldr	r0, [r3, #0]
 8013eda:	1dfb      	adds	r3, r7, #7
 8013edc:	781a      	ldrb	r2, [r3, #0]
 8013ede:	4989      	ldr	r1, [pc, #548]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013ee0:	0013      	movs	r3, r2
 8013ee2:	011b      	lsls	r3, r3, #4
 8013ee4:	1a9b      	subs	r3, r3, r2
 8013ee6:	009b      	lsls	r3, r3, #2
 8013ee8:	18cb      	adds	r3, r1, r3
 8013eea:	3308      	adds	r3, #8
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	0002      	movs	r2, r0
 8013ef0:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 8013ef2:	1dfb      	adds	r3, r7, #7
 8013ef4:	781a      	ldrb	r2, [r3, #0]
 8013ef6:	4983      	ldr	r1, [pc, #524]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013ef8:	0013      	movs	r3, r2
 8013efa:	011b      	lsls	r3, r3, #4
 8013efc:	1a9b      	subs	r3, r3, r2
 8013efe:	009b      	lsls	r3, r3, #2
 8013f00:	18cb      	adds	r3, r1, r3
 8013f02:	3308      	adds	r3, #8
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	2284      	movs	r2, #132	; 0x84
 8013f08:	0052      	lsls	r2, r2, #1
 8013f0a:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8013f0c:	1dfb      	adds	r3, r7, #7
 8013f0e:	781a      	ldrb	r2, [r3, #0]
 8013f10:	497c      	ldr	r1, [pc, #496]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013f12:	0013      	movs	r3, r2
 8013f14:	011b      	lsls	r3, r3, #4
 8013f16:	1a9b      	subs	r3, r3, r2
 8013f18:	009b      	lsls	r3, r3, #2
 8013f1a:	18cb      	adds	r3, r1, r3
 8013f1c:	3308      	adds	r3, #8
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	6819      	ldr	r1, [r3, #0]
 8013f22:	1dfb      	adds	r3, r7, #7
 8013f24:	781a      	ldrb	r2, [r3, #0]
 8013f26:	4877      	ldr	r0, [pc, #476]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013f28:	0013      	movs	r3, r2
 8013f2a:	011b      	lsls	r3, r3, #4
 8013f2c:	1a9b      	subs	r3, r3, r2
 8013f2e:	009b      	lsls	r3, r3, #2
 8013f30:	18c3      	adds	r3, r0, r3
 8013f32:	3308      	adds	r3, #8
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2201      	movs	r2, #1
 8013f38:	430a      	orrs	r2, r1
 8013f3a:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8013f3c:	1dfb      	adds	r3, r7, #7
 8013f3e:	781a      	ldrb	r2, [r3, #0]
 8013f40:	4970      	ldr	r1, [pc, #448]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013f42:	0013      	movs	r3, r2
 8013f44:	011b      	lsls	r3, r3, #4
 8013f46:	1a9b      	subs	r3, r3, r2
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	585b      	ldr	r3, [r3, r1]
 8013f4c:	3324      	adds	r3, #36	; 0x24
 8013f4e:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8013f50:	1dfb      	adds	r3, r7, #7
 8013f52:	781a      	ldrb	r2, [r3, #0]
 8013f54:	496b      	ldr	r1, [pc, #428]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013f56:	0013      	movs	r3, r2
 8013f58:	011b      	lsls	r3, r3, #4
 8013f5a:	1a9b      	subs	r3, r3, r2
 8013f5c:	009b      	lsls	r3, r3, #2
 8013f5e:	18cb      	adds	r3, r1, r3
 8013f60:	3304      	adds	r3, #4
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	68fa      	ldr	r2, [r7, #12]
 8013f66:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8013f68:	1dfb      	adds	r3, r7, #7
 8013f6a:	781a      	ldrb	r2, [r3, #0]
 8013f6c:	4965      	ldr	r1, [pc, #404]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013f6e:	0013      	movs	r3, r2
 8013f70:	011b      	lsls	r3, r3, #4
 8013f72:	1a9b      	subs	r3, r3, r2
 8013f74:	009b      	lsls	r3, r3, #2
 8013f76:	585b      	ldr	r3, [r3, r1]
 8013f78:	6919      	ldr	r1, [r3, #16]
 8013f7a:	1dfb      	adds	r3, r7, #7
 8013f7c:	781a      	ldrb	r2, [r3, #0]
 8013f7e:	4861      	ldr	r0, [pc, #388]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013f80:	0013      	movs	r3, r2
 8013f82:	011b      	lsls	r3, r3, #4
 8013f84:	1a9b      	subs	r3, r3, r2
 8013f86:	009b      	lsls	r3, r3, #2
 8013f88:	581b      	ldr	r3, [r3, r0]
 8013f8a:	4a5f      	ldr	r2, [pc, #380]	; (8014108 <HW_SignalAttachement+0x2c0>)
 8013f8c:	430a      	orrs	r2, r1
 8013f8e:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8013f90:	1dfb      	adds	r3, r7, #7
 8013f92:	781a      	ldrb	r2, [r3, #0]
 8013f94:	495b      	ldr	r1, [pc, #364]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013f96:	0013      	movs	r3, r2
 8013f98:	011b      	lsls	r3, r3, #4
 8013f9a:	1a9b      	subs	r3, r3, r2
 8013f9c:	009b      	lsls	r3, r3, #2
 8013f9e:	18cb      	adds	r3, r1, r3
 8013fa0:	3334      	adds	r3, #52	; 0x34
 8013fa2:	683a      	ldr	r2, [r7, #0]
 8013fa4:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8013fa6:	1dfb      	adds	r3, r7, #7
 8013fa8:	781a      	ldrb	r2, [r3, #0]
 8013faa:	4956      	ldr	r1, [pc, #344]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013fac:	0013      	movs	r3, r2
 8013fae:	011b      	lsls	r3, r3, #4
 8013fb0:	1a9b      	subs	r3, r3, r2
 8013fb2:	009b      	lsls	r3, r3, #2
 8013fb4:	5858      	ldr	r0, [r3, r1]
 8013fb6:	1dfb      	adds	r3, r7, #7
 8013fb8:	781a      	ldrb	r2, [r3, #0]
 8013fba:	4952      	ldr	r1, [pc, #328]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013fbc:	0013      	movs	r3, r2
 8013fbe:	011b      	lsls	r3, r3, #4
 8013fc0:	1a9b      	subs	r3, r3, r2
 8013fc2:	009b      	lsls	r3, r3, #2
 8013fc4:	18cb      	adds	r3, r1, r3
 8013fc6:	3334      	adds	r3, #52	; 0x34
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	2b01      	cmp	r3, #1
 8013fcc:	d101      	bne.n	8013fd2 <HW_SignalAttachement+0x18a>
 8013fce:	2300      	movs	r3, #0
 8013fd0:	e000      	b.n	8013fd4 <HW_SignalAttachement+0x18c>
 8013fd2:	2340      	movs	r3, #64	; 0x40
 8013fd4:	0019      	movs	r1, r3
 8013fd6:	f7ff fa93 	bl	8013500 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8013fda:	1dfb      	adds	r3, r7, #7
 8013fdc:	781a      	ldrb	r2, [r3, #0]
 8013fde:	4949      	ldr	r1, [pc, #292]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8013fe0:	0013      	movs	r3, r2
 8013fe2:	011b      	lsls	r3, r3, #4
 8013fe4:	1a9b      	subs	r3, r3, r2
 8013fe6:	009b      	lsls	r3, r3, #2
 8013fe8:	18cb      	adds	r3, r1, r3
 8013fea:	330c      	adds	r3, #12
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	7a1b      	ldrb	r3, [r3, #8]
 8013ff0:	2202      	movs	r2, #2
 8013ff2:	4013      	ands	r3, r2
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d034      	beq.n	8014064 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8013ffa:	1dfb      	adds	r3, r7, #7
 8013ffc:	781a      	ldrb	r2, [r3, #0]
 8013ffe:	4941      	ldr	r1, [pc, #260]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8014000:	0013      	movs	r3, r2
 8014002:	011b      	lsls	r3, r3, #4
 8014004:	1a9b      	subs	r3, r3, r2
 8014006:	009b      	lsls	r3, r3, #2
 8014008:	18cb      	adds	r3, r1, r3
 801400a:	3334      	adds	r3, #52	; 0x34
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	2b01      	cmp	r3, #1
 8014010:	d101      	bne.n	8014016 <HW_SignalAttachement+0x1ce>
 8014012:	2301      	movs	r3, #1
 8014014:	e000      	b.n	8014018 <HW_SignalAttachement+0x1d0>
 8014016:	2302      	movs	r3, #2
 8014018:	1dfa      	adds	r2, r7, #7
 801401a:	7812      	ldrb	r2, [r2, #0]
 801401c:	0019      	movs	r1, r3
 801401e:	0010      	movs	r0, r2
 8014020:	f7fe fca4 	bl	801296c <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8014024:	1dfb      	adds	r3, r7, #7
 8014026:	781a      	ldrb	r2, [r3, #0]
 8014028:	4936      	ldr	r1, [pc, #216]	; (8014104 <HW_SignalAttachement+0x2bc>)
 801402a:	0013      	movs	r3, r2
 801402c:	011b      	lsls	r3, r3, #4
 801402e:	1a9b      	subs	r3, r3, r2
 8014030:	009b      	lsls	r3, r3, #2
 8014032:	585b      	ldr	r3, [r3, r1]
 8014034:	0018      	movs	r0, r3
 8014036:	f7ff f9fb 	bl	8013430 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 801403a:	1dfb      	adds	r3, r7, #7
 801403c:	781a      	ldrb	r2, [r3, #0]
 801403e:	4931      	ldr	r1, [pc, #196]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8014040:	0013      	movs	r3, r2
 8014042:	011b      	lsls	r3, r3, #4
 8014044:	1a9b      	subs	r3, r3, r2
 8014046:	009b      	lsls	r3, r3, #2
 8014048:	585b      	ldr	r3, [r3, r1]
 801404a:	6919      	ldr	r1, [r3, #16]
 801404c:	1dfb      	adds	r3, r7, #7
 801404e:	781a      	ldrb	r2, [r3, #0]
 8014050:	482c      	ldr	r0, [pc, #176]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8014052:	0013      	movs	r3, r2
 8014054:	011b      	lsls	r3, r3, #4
 8014056:	1a9b      	subs	r3, r3, r2
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	581b      	ldr	r3, [r3, r0]
 801405c:	2280      	movs	r2, #128	; 0x80
 801405e:	0352      	lsls	r2, r2, #13
 8014060:	430a      	orrs	r2, r1
 8014062:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8014064:	1dfb      	adds	r3, r7, #7
 8014066:	781a      	ldrb	r2, [r3, #0]
 8014068:	4926      	ldr	r1, [pc, #152]	; (8014104 <HW_SignalAttachement+0x2bc>)
 801406a:	0013      	movs	r3, r2
 801406c:	011b      	lsls	r3, r3, #4
 801406e:	1a9b      	subs	r3, r3, r2
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	18cb      	adds	r3, r1, r3
 8014074:	3334      	adds	r3, #52	; 0x34
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	2b01      	cmp	r3, #1
 801407a:	d10e      	bne.n	801409a <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 801407c:	1dfb      	adds	r3, r7, #7
 801407e:	781a      	ldrb	r2, [r3, #0]
 8014080:	4920      	ldr	r1, [pc, #128]	; (8014104 <HW_SignalAttachement+0x2bc>)
 8014082:	0013      	movs	r3, r2
 8014084:	011b      	lsls	r3, r3, #4
 8014086:	1a9b      	subs	r3, r3, r2
 8014088:	009b      	lsls	r3, r3, #2
 801408a:	585b      	ldr	r3, [r3, r1]
 801408c:	2280      	movs	r2, #128	; 0x80
 801408e:	00d2      	lsls	r2, r2, #3
 8014090:	0011      	movs	r1, r2
 8014092:	0018      	movs	r0, r3
 8014094:	f7ff f9ec 	bl	8013470 <LL_UCPD_SetccEnable>
 8014098:	e00d      	b.n	80140b6 <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 801409a:	1dfb      	adds	r3, r7, #7
 801409c:	781a      	ldrb	r2, [r3, #0]
 801409e:	4919      	ldr	r1, [pc, #100]	; (8014104 <HW_SignalAttachement+0x2bc>)
 80140a0:	0013      	movs	r3, r2
 80140a2:	011b      	lsls	r3, r3, #4
 80140a4:	1a9b      	subs	r3, r3, r2
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	585b      	ldr	r3, [r3, r1]
 80140aa:	2280      	movs	r2, #128	; 0x80
 80140ac:	0112      	lsls	r2, r2, #4
 80140ae:	0011      	movs	r1, r2
 80140b0:	0018      	movs	r0, r3
 80140b2:	f7ff f9dd 	bl	8013470 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 80140b6:	1dfb      	adds	r3, r7, #7
 80140b8:	781a      	ldrb	r2, [r3, #0]
 80140ba:	4912      	ldr	r1, [pc, #72]	; (8014104 <HW_SignalAttachement+0x2bc>)
 80140bc:	0013      	movs	r3, r2
 80140be:	011b      	lsls	r3, r3, #4
 80140c0:	1a9b      	subs	r3, r3, r2
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	585b      	ldr	r3, [r3, r1]
 80140c6:	2100      	movs	r1, #0
 80140c8:	0018      	movs	r0, r3
 80140ca:	f7ff fa48 	bl	801355e <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 80140ce:	1dfb      	adds	r3, r7, #7
 80140d0:	781a      	ldrb	r2, [r3, #0]
 80140d2:	490c      	ldr	r1, [pc, #48]	; (8014104 <HW_SignalAttachement+0x2bc>)
 80140d4:	0013      	movs	r3, r2
 80140d6:	011b      	lsls	r3, r3, #4
 80140d8:	1a9b      	subs	r3, r3, r2
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	585b      	ldr	r3, [r3, r1]
 80140de:	0018      	movs	r0, r3
 80140e0:	f7ff fa7d 	bl	80135de <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 80140e4:	1dfb      	adds	r3, r7, #7
 80140e6:	781a      	ldrb	r2, [r3, #0]
 80140e8:	4906      	ldr	r1, [pc, #24]	; (8014104 <HW_SignalAttachement+0x2bc>)
 80140ea:	0013      	movs	r3, r2
 80140ec:	011b      	lsls	r3, r3, #4
 80140ee:	1a9b      	subs	r3, r3, r2
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	585b      	ldr	r3, [r3, r1]
 80140f4:	0018      	movs	r0, r3
 80140f6:	f7ff fa91 	bl	801361c <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80140fa:	46c0      	nop			; (mov r8, r8)
 80140fc:	46bd      	mov	sp, r7
 80140fe:	b005      	add	sp, #20
 8014100:	bd90      	pop	{r4, r7, pc}
 8014102:	46c0      	nop			; (mov r8, r8)
 8014104:	20000568 	.word	0x20000568
 8014108:	00001e7e 	.word	0x00001e7e

0801410c <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	0002      	movs	r2, r0
 8014114:	1dfb      	adds	r3, r7, #7
 8014116:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8014118:	1dfb      	adds	r3, r7, #7
 801411a:	781a      	ldrb	r2, [r3, #0]
 801411c:	4941      	ldr	r1, [pc, #260]	; (8014224 <HW_SignalDetachment+0x118>)
 801411e:	0013      	movs	r3, r2
 8014120:	011b      	lsls	r3, r3, #4
 8014122:	1a9b      	subs	r3, r3, r2
 8014124:	009b      	lsls	r3, r3, #2
 8014126:	585b      	ldr	r3, [r3, r1]
 8014128:	0018      	movs	r0, r3
 801412a:	f7ff fa67 	bl	80135fc <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 801412e:	1dfb      	adds	r3, r7, #7
 8014130:	781a      	ldrb	r2, [r3, #0]
 8014132:	493c      	ldr	r1, [pc, #240]	; (8014224 <HW_SignalDetachment+0x118>)
 8014134:	0013      	movs	r3, r2
 8014136:	011b      	lsls	r3, r3, #4
 8014138:	1a9b      	subs	r3, r3, r2
 801413a:	009b      	lsls	r3, r3, #2
 801413c:	585b      	ldr	r3, [r3, r1]
 801413e:	0018      	movs	r0, r3
 8014140:	f7ff fa7c 	bl	801363c <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8014144:	1dfb      	adds	r3, r7, #7
 8014146:	781a      	ldrb	r2, [r3, #0]
 8014148:	4936      	ldr	r1, [pc, #216]	; (8014224 <HW_SignalDetachment+0x118>)
 801414a:	0013      	movs	r3, r2
 801414c:	011b      	lsls	r3, r3, #4
 801414e:	1a9b      	subs	r3, r3, r2
 8014150:	009b      	lsls	r3, r3, #2
 8014152:	585b      	ldr	r3, [r3, r1]
 8014154:	0018      	movs	r0, r3
 8014156:	f7ff f9f3 	bl	8013540 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 801415a:	1dfb      	adds	r3, r7, #7
 801415c:	781a      	ldrb	r2, [r3, #0]
 801415e:	4931      	ldr	r1, [pc, #196]	; (8014224 <HW_SignalDetachment+0x118>)
 8014160:	0013      	movs	r3, r2
 8014162:	011b      	lsls	r3, r3, #4
 8014164:	1a9b      	subs	r3, r3, r2
 8014166:	009b      	lsls	r3, r3, #2
 8014168:	585b      	ldr	r3, [r3, r1]
 801416a:	22c0      	movs	r2, #192	; 0xc0
 801416c:	0212      	lsls	r2, r2, #8
 801416e:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8014170:	1dfb      	adds	r3, r7, #7
 8014172:	781b      	ldrb	r3, [r3, #0]
 8014174:	0018      	movs	r0, r3
 8014176:	f7fe fbef 	bl	8012958 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 801417a:	1dfb      	adds	r3, r7, #7
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	0018      	movs	r0, r3
 8014180:	f7fe fb9a 	bl	80128b8 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8014184:	1dfb      	adds	r3, r7, #7
 8014186:	781a      	ldrb	r2, [r3, #0]
 8014188:	4926      	ldr	r1, [pc, #152]	; (8014224 <HW_SignalDetachment+0x118>)
 801418a:	0013      	movs	r3, r2
 801418c:	011b      	lsls	r3, r3, #4
 801418e:	1a9b      	subs	r3, r3, r2
 8014190:	009b      	lsls	r3, r3, #2
 8014192:	585b      	ldr	r3, [r3, r1]
 8014194:	22c0      	movs	r2, #192	; 0xc0
 8014196:	0112      	lsls	r2, r2, #4
 8014198:	0011      	movs	r1, r2
 801419a:	0018      	movs	r0, r3
 801419c:	f7ff f968 	bl	8013470 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 80141a0:	1dfb      	adds	r3, r7, #7
 80141a2:	781a      	ldrb	r2, [r3, #0]
 80141a4:	491f      	ldr	r1, [pc, #124]	; (8014224 <HW_SignalDetachment+0x118>)
 80141a6:	0013      	movs	r3, r2
 80141a8:	011b      	lsls	r3, r3, #4
 80141aa:	1a9b      	subs	r3, r3, r2
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	18cb      	adds	r3, r1, r3
 80141b0:	3310      	adds	r3, #16
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	781b      	ldrb	r3, [r3, #0]
 80141b6:	2204      	movs	r2, #4
 80141b8:	4013      	ands	r3, r2
 80141ba:	b2db      	uxtb	r3, r3
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d104      	bne.n	80141ca <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80141c0:	1dfb      	adds	r3, r7, #7
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	0018      	movs	r0, r3
 80141c6:	f007 fa5b 	bl	801b680 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80141ca:	1dfb      	adds	r3, r7, #7
 80141cc:	781a      	ldrb	r2, [r3, #0]
 80141ce:	4915      	ldr	r1, [pc, #84]	; (8014224 <HW_SignalDetachment+0x118>)
 80141d0:	0013      	movs	r3, r2
 80141d2:	011b      	lsls	r3, r3, #4
 80141d4:	1a9b      	subs	r3, r3, r2
 80141d6:	009b      	lsls	r3, r3, #2
 80141d8:	18cb      	adds	r3, r1, r3
 80141da:	330c      	adds	r3, #12
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	7a1b      	ldrb	r3, [r3, #8]
 80141e0:	2202      	movs	r2, #2
 80141e2:	4013      	ands	r3, r2
 80141e4:	b2db      	uxtb	r3, r3
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d00a      	beq.n	8014200 <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 80141ea:	1dfb      	adds	r3, r7, #7
 80141ec:	781a      	ldrb	r2, [r3, #0]
 80141ee:	490d      	ldr	r1, [pc, #52]	; (8014224 <HW_SignalDetachment+0x118>)
 80141f0:	0013      	movs	r3, r2
 80141f2:	011b      	lsls	r3, r3, #4
 80141f4:	1a9b      	subs	r3, r3, r2
 80141f6:	009b      	lsls	r3, r3, #2
 80141f8:	585b      	ldr	r3, [r3, r1]
 80141fa:	0018      	movs	r0, r3
 80141fc:	f7ff f928 	bl	8013450 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 8014200:	1dfb      	adds	r3, r7, #7
 8014202:	781a      	ldrb	r2, [r3, #0]
 8014204:	4907      	ldr	r1, [pc, #28]	; (8014224 <HW_SignalDetachment+0x118>)
 8014206:	0013      	movs	r3, r2
 8014208:	011b      	lsls	r3, r3, #4
 801420a:	1a9b      	subs	r3, r3, r2
 801420c:	009b      	lsls	r3, r3, #2
 801420e:	18cb      	adds	r3, r1, r3
 8014210:	3334      	adds	r3, #52	; 0x34
 8014212:	2200      	movs	r2, #0
 8014214:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 8014216:	f000 fb25 	bl	8014864 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 801421a:	46c0      	nop			; (mov r8, r8)
 801421c:	46bd      	mov	sp, r7
 801421e:	b002      	add	sp, #8
 8014220:	bd80      	pop	{r7, pc}
 8014222:	46c0      	nop			; (mov r8, r8)
 8014224:	20000568 	.word	0x20000568

08014228 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	0002      	movs	r2, r0
 8014230:	1dfb      	adds	r3, r7, #7
 8014232:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8014234:	1dfb      	adds	r3, r7, #7
 8014236:	781a      	ldrb	r2, [r3, #0]
 8014238:	4907      	ldr	r1, [pc, #28]	; (8014258 <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 801423a:	0013      	movs	r3, r2
 801423c:	011b      	lsls	r3, r3, #4
 801423e:	1a9b      	subs	r3, r3, r2
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	585b      	ldr	r3, [r3, r1]
 8014244:	2280      	movs	r2, #128	; 0x80
 8014246:	0052      	lsls	r2, r2, #1
 8014248:	0011      	movs	r1, r2
 801424a:	0018      	movs	r0, r3
 801424c:	f7ff f944 	bl	80134d8 <LL_UCPD_SetRpResistor>
}
 8014250:	46c0      	nop			; (mov r8, r8)
 8014252:	46bd      	mov	sp, r7
 8014254:	b002      	add	sp, #8
 8014256:	bd80      	pop	{r7, pc}
 8014258:	20000568 	.word	0x20000568

0801425c <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b082      	sub	sp, #8
 8014260:	af00      	add	r7, sp, #0
 8014262:	0002      	movs	r2, r0
 8014264:	1dfb      	adds	r3, r7, #7
 8014266:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8014268:	1dfb      	adds	r3, r7, #7
 801426a:	781a      	ldrb	r2, [r3, #0]
 801426c:	4907      	ldr	r1, [pc, #28]	; (801428c <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 801426e:	0013      	movs	r3, r2
 8014270:	011b      	lsls	r3, r3, #4
 8014272:	1a9b      	subs	r3, r3, r2
 8014274:	009b      	lsls	r3, r3, #2
 8014276:	585b      	ldr	r3, [r3, r1]
 8014278:	22c0      	movs	r2, #192	; 0xc0
 801427a:	0052      	lsls	r2, r2, #1
 801427c:	0011      	movs	r1, r2
 801427e:	0018      	movs	r0, r3
 8014280:	f7ff f92a 	bl	80134d8 <LL_UCPD_SetRpResistor>
}
 8014284:	46c0      	nop			; (mov r8, r8)
 8014286:	46bd      	mov	sp, r7
 8014288:	b002      	add	sp, #8
 801428a:	bd80      	pop	{r7, pc}
 801428c:	20000568 	.word	0x20000568

08014290 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	0002      	movs	r2, r0
 8014298:	1dfb      	adds	r3, r7, #7
 801429a:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 801429c:	1dfb      	adds	r3, r7, #7
 801429e:	781a      	ldrb	r2, [r3, #0]
 80142a0:	491c      	ldr	r1, [pc, #112]	; (8014314 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 80142a2:	0013      	movs	r3, r2
 80142a4:	011b      	lsls	r3, r3, #4
 80142a6:	1a9b      	subs	r3, r3, r2
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	18cb      	adds	r3, r1, r3
 80142ac:	3334      	adds	r3, #52	; 0x34
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	d002      	beq.n	80142ba <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 80142b4:	2b02      	cmp	r3, #2
 80142b6:	d012      	beq.n	80142de <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 80142b8:	e026      	b.n	8014308 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 80142ba:	1dfb      	adds	r3, r7, #7
 80142bc:	781a      	ldrb	r2, [r3, #0]
 80142be:	4915      	ldr	r1, [pc, #84]	; (8014314 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 80142c0:	0013      	movs	r3, r2
 80142c2:	011b      	lsls	r3, r3, #4
 80142c4:	1a9b      	subs	r3, r3, r2
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	585b      	ldr	r3, [r3, r1]
 80142ca:	695a      	ldr	r2, [r3, #20]
 80142cc:	23c0      	movs	r3, #192	; 0xc0
 80142ce:	029b      	lsls	r3, r3, #10
 80142d0:	401a      	ands	r2, r3
 80142d2:	23c0      	movs	r3, #192	; 0xc0
 80142d4:	029b      	lsls	r3, r3, #10
 80142d6:	429a      	cmp	r2, r3
 80142d8:	d113      	bne.n	8014302 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 80142da:	2301      	movs	r3, #1
 80142dc:	e015      	b.n	801430a <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 80142de:	1dfb      	adds	r3, r7, #7
 80142e0:	781a      	ldrb	r2, [r3, #0]
 80142e2:	490c      	ldr	r1, [pc, #48]	; (8014314 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 80142e4:	0013      	movs	r3, r2
 80142e6:	011b      	lsls	r3, r3, #4
 80142e8:	1a9b      	subs	r3, r3, r2
 80142ea:	009b      	lsls	r3, r3, #2
 80142ec:	585b      	ldr	r3, [r3, r1]
 80142ee:	695a      	ldr	r2, [r3, #20]
 80142f0:	23c0      	movs	r3, #192	; 0xc0
 80142f2:	031b      	lsls	r3, r3, #12
 80142f4:	401a      	ands	r2, r3
 80142f6:	23c0      	movs	r3, #192	; 0xc0
 80142f8:	031b      	lsls	r3, r3, #12
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d103      	bne.n	8014306 <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 80142fe:	2301      	movs	r3, #1
 8014300:	e003      	b.n	801430a <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 8014302:	46c0      	nop			; (mov r8, r8)
 8014304:	e000      	b.n	8014308 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 8014306:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 8014308:	2300      	movs	r3, #0
}
 801430a:	0018      	movs	r0, r3
 801430c:	46bd      	mov	sp, r7
 801430e:	b002      	add	sp, #8
 8014310:	bd80      	pop	{r7, pc}
 8014312:	46c0      	nop			; (mov r8, r8)
 8014314:	20000568 	.word	0x20000568

08014318 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
 801431e:	0002      	movs	r2, r0
 8014320:	1dfb      	adds	r3, r7, #7
 8014322:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 8014324:	1dfb      	adds	r3, r7, #7
 8014326:	781a      	ldrb	r2, [r3, #0]
 8014328:	4906      	ldr	r1, [pc, #24]	; (8014344 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 801432a:	0013      	movs	r3, r2
 801432c:	011b      	lsls	r3, r3, #4
 801432e:	1a9b      	subs	r3, r3, r2
 8014330:	009b      	lsls	r3, r3, #2
 8014332:	585b      	ldr	r3, [r3, r1]
 8014334:	0018      	movs	r0, r3
 8014336:	f7ff f86c 	bl	8013412 <LL_UCPD_SignalFRSTX>
}
 801433a:	46c0      	nop			; (mov r8, r8)
 801433c:	46bd      	mov	sp, r7
 801433e:	b002      	add	sp, #8
 8014340:	bd80      	pop	{r7, pc}
 8014342:	46c0      	nop			; (mov r8, r8)
 8014344:	20000568 	.word	0x20000568

08014348 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	0002      	movs	r2, r0
 8014350:	1dfb      	adds	r3, r7, #7
 8014352:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8014354:	1dfb      	adds	r3, r7, #7
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	220c      	movs	r2, #12
 801435a:	18ba      	adds	r2, r7, r2
 801435c:	0011      	movs	r1, r2
 801435e:	0018      	movs	r0, r3
 8014360:	f007 f9ac 	bl	801b6bc <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	b29b      	uxth	r3, r3
}
 8014368:	0018      	movs	r0, r3
 801436a:	46bd      	mov	sp, r7
 801436c:	b004      	add	sp, #16
 801436e:	bd80      	pop	{r7, pc}

08014370 <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b084      	sub	sp, #16
 8014374:	af00      	add	r7, sp, #0
 8014376:	0002      	movs	r2, r0
 8014378:	1dfb      	adds	r3, r7, #7
 801437a:	701a      	strb	r2, [r3, #0]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 801437c:	1dfb      	adds	r3, r7, #7
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	220c      	movs	r2, #12
 8014382:	18ba      	adds	r2, r7, r2
 8014384:	0011      	movs	r1, r2
 8014386:	0018      	movs	r0, r3
 8014388:	f007 f9d4 	bl	801b734 <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	b21b      	sxth	r3, r3
}
 8014390:	0018      	movs	r0, r3
 8014392:	46bd      	mov	sp, r7
 8014394:	b004      	add	sp, #16
 8014396:	bd80      	pop	{r7, pc}

08014398 <LL_APB2_GRP1_EnableClock>:
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80143a0:	4b07      	ldr	r3, [pc, #28]	; (80143c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80143a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80143a4:	4b06      	ldr	r3, [pc, #24]	; (80143c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80143a6:	687a      	ldr	r2, [r7, #4]
 80143a8:	430a      	orrs	r2, r1
 80143aa:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80143ac:	4b04      	ldr	r3, [pc, #16]	; (80143c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80143ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	4013      	ands	r3, r2
 80143b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80143b6:	68fb      	ldr	r3, [r7, #12]
}
 80143b8:	46c0      	nop			; (mov r8, r8)
 80143ba:	46bd      	mov	sp, r7
 80143bc:	b004      	add	sp, #16
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	40021000 	.word	0x40021000

080143c4 <LL_APB2_GRP1_DisableClock>:
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 80143cc:	4b05      	ldr	r3, [pc, #20]	; (80143e4 <LL_APB2_GRP1_DisableClock+0x20>)
 80143ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	43d9      	mvns	r1, r3
 80143d4:	4b03      	ldr	r3, [pc, #12]	; (80143e4 <LL_APB2_GRP1_DisableClock+0x20>)
 80143d6:	400a      	ands	r2, r1
 80143d8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80143da:	46c0      	nop			; (mov r8, r8)
 80143dc:	46bd      	mov	sp, r7
 80143de:	b002      	add	sp, #8
 80143e0:	bd80      	pop	{r7, pc}
 80143e2:	46c0      	nop			; (mov r8, r8)
 80143e4:	40021000 	.word	0x40021000

080143e8 <LL_TIM_EnableCounter>:
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2201      	movs	r2, #1
 80143f6:	431a      	orrs	r2, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	601a      	str	r2, [r3, #0]
}
 80143fc:	46c0      	nop			; (mov r8, r8)
 80143fe:	46bd      	mov	sp, r7
 8014400:	b002      	add	sp, #8
 8014402:	bd80      	pop	{r7, pc}

08014404 <LL_TIM_SetCounterMode>:
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
 801440c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2270      	movs	r2, #112	; 0x70
 8014414:	4393      	bics	r3, r2
 8014416:	001a      	movs	r2, r3
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	431a      	orrs	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	601a      	str	r2, [r3, #0]
}
 8014420:	46c0      	nop			; (mov r8, r8)
 8014422:	46bd      	mov	sp, r7
 8014424:	b002      	add	sp, #8
 8014426:	bd80      	pop	{r7, pc}

08014428 <LL_TIM_SetPrescaler>:
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	683a      	ldr	r2, [r7, #0]
 8014436:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014438:	46c0      	nop			; (mov r8, r8)
 801443a:	46bd      	mov	sp, r7
 801443c:	b002      	add	sp, #8
 801443e:	bd80      	pop	{r7, pc}

08014440 <LL_TIM_GetPrescaler>:
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801444c:	0018      	movs	r0, r3
 801444e:	46bd      	mov	sp, r7
 8014450:	b002      	add	sp, #8
 8014452:	bd80      	pop	{r7, pc}

08014454 <LL_TIM_SetAutoReload>:
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	683a      	ldr	r2, [r7, #0]
 8014462:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8014464:	46c0      	nop			; (mov r8, r8)
 8014466:	46bd      	mov	sp, r7
 8014468:	b002      	add	sp, #8
 801446a:	bd80      	pop	{r7, pc}

0801446c <LL_TIM_OC_SetMode>:
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b086      	sub	sp, #24
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	60b9      	str	r1, [r7, #8]
 8014476:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	2b01      	cmp	r3, #1
 801447c:	d02c      	beq.n	80144d8 <LL_TIM_OC_SetMode+0x6c>
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	2b04      	cmp	r3, #4
 8014482:	d027      	beq.n	80144d4 <LL_TIM_OC_SetMode+0x68>
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	2b10      	cmp	r3, #16
 8014488:	d022      	beq.n	80144d0 <LL_TIM_OC_SetMode+0x64>
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2b40      	cmp	r3, #64	; 0x40
 801448e:	d01d      	beq.n	80144cc <LL_TIM_OC_SetMode+0x60>
 8014490:	68ba      	ldr	r2, [r7, #8]
 8014492:	2380      	movs	r3, #128	; 0x80
 8014494:	005b      	lsls	r3, r3, #1
 8014496:	429a      	cmp	r2, r3
 8014498:	d016      	beq.n	80144c8 <LL_TIM_OC_SetMode+0x5c>
 801449a:	68ba      	ldr	r2, [r7, #8]
 801449c:	2380      	movs	r3, #128	; 0x80
 801449e:	00db      	lsls	r3, r3, #3
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d00f      	beq.n	80144c4 <LL_TIM_OC_SetMode+0x58>
 80144a4:	68ba      	ldr	r2, [r7, #8]
 80144a6:	2380      	movs	r3, #128	; 0x80
 80144a8:	015b      	lsls	r3, r3, #5
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d008      	beq.n	80144c0 <LL_TIM_OC_SetMode+0x54>
 80144ae:	68ba      	ldr	r2, [r7, #8]
 80144b0:	2380      	movs	r3, #128	; 0x80
 80144b2:	025b      	lsls	r3, r3, #9
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d101      	bne.n	80144bc <LL_TIM_OC_SetMode+0x50>
 80144b8:	2307      	movs	r3, #7
 80144ba:	e00e      	b.n	80144da <LL_TIM_OC_SetMode+0x6e>
 80144bc:	2308      	movs	r3, #8
 80144be:	e00c      	b.n	80144da <LL_TIM_OC_SetMode+0x6e>
 80144c0:	2306      	movs	r3, #6
 80144c2:	e00a      	b.n	80144da <LL_TIM_OC_SetMode+0x6e>
 80144c4:	2305      	movs	r3, #5
 80144c6:	e008      	b.n	80144da <LL_TIM_OC_SetMode+0x6e>
 80144c8:	2304      	movs	r3, #4
 80144ca:	e006      	b.n	80144da <LL_TIM_OC_SetMode+0x6e>
 80144cc:	2303      	movs	r3, #3
 80144ce:	e004      	b.n	80144da <LL_TIM_OC_SetMode+0x6e>
 80144d0:	2302      	movs	r3, #2
 80144d2:	e002      	b.n	80144da <LL_TIM_OC_SetMode+0x6e>
 80144d4:	2301      	movs	r3, #1
 80144d6:	e000      	b.n	80144da <LL_TIM_OC_SetMode+0x6e>
 80144d8:	2300      	movs	r3, #0
 80144da:	2017      	movs	r0, #23
 80144dc:	183a      	adds	r2, r7, r0
 80144de:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	3318      	adds	r3, #24
 80144e4:	0019      	movs	r1, r3
 80144e6:	183b      	adds	r3, r7, r0
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	4a0e      	ldr	r2, [pc, #56]	; (8014524 <LL_TIM_OC_SetMode+0xb8>)
 80144ec:	5cd3      	ldrb	r3, [r2, r3]
 80144ee:	18cb      	adds	r3, r1, r3
 80144f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	183a      	adds	r2, r7, r0
 80144f8:	7812      	ldrb	r2, [r2, #0]
 80144fa:	490b      	ldr	r1, [pc, #44]	; (8014528 <LL_TIM_OC_SetMode+0xbc>)
 80144fc:	5c8a      	ldrb	r2, [r1, r2]
 80144fe:	0011      	movs	r1, r2
 8014500:	4a0a      	ldr	r2, [pc, #40]	; (801452c <LL_TIM_OC_SetMode+0xc0>)
 8014502:	408a      	lsls	r2, r1
 8014504:	43d2      	mvns	r2, r2
 8014506:	401a      	ands	r2, r3
 8014508:	183b      	adds	r3, r7, r0
 801450a:	781b      	ldrb	r3, [r3, #0]
 801450c:	4906      	ldr	r1, [pc, #24]	; (8014528 <LL_TIM_OC_SetMode+0xbc>)
 801450e:	5ccb      	ldrb	r3, [r1, r3]
 8014510:	0019      	movs	r1, r3
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	408b      	lsls	r3, r1
 8014516:	431a      	orrs	r2, r3
 8014518:	693b      	ldr	r3, [r7, #16]
 801451a:	601a      	str	r2, [r3, #0]
}
 801451c:	46c0      	nop			; (mov r8, r8)
 801451e:	46bd      	mov	sp, r7
 8014520:	b006      	add	sp, #24
 8014522:	bd80      	pop	{r7, pc}
 8014524:	0802410c 	.word	0x0802410c
 8014528:	08024118 	.word	0x08024118
 801452c:	00010073 	.word	0x00010073

08014530 <LL_TIM_OC_SetPolarity>:
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	2b01      	cmp	r3, #1
 8014540:	d02c      	beq.n	801459c <LL_TIM_OC_SetPolarity+0x6c>
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	2b04      	cmp	r3, #4
 8014546:	d027      	beq.n	8014598 <LL_TIM_OC_SetPolarity+0x68>
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	2b10      	cmp	r3, #16
 801454c:	d022      	beq.n	8014594 <LL_TIM_OC_SetPolarity+0x64>
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	2b40      	cmp	r3, #64	; 0x40
 8014552:	d01d      	beq.n	8014590 <LL_TIM_OC_SetPolarity+0x60>
 8014554:	68ba      	ldr	r2, [r7, #8]
 8014556:	2380      	movs	r3, #128	; 0x80
 8014558:	005b      	lsls	r3, r3, #1
 801455a:	429a      	cmp	r2, r3
 801455c:	d016      	beq.n	801458c <LL_TIM_OC_SetPolarity+0x5c>
 801455e:	68ba      	ldr	r2, [r7, #8]
 8014560:	2380      	movs	r3, #128	; 0x80
 8014562:	00db      	lsls	r3, r3, #3
 8014564:	429a      	cmp	r2, r3
 8014566:	d00f      	beq.n	8014588 <LL_TIM_OC_SetPolarity+0x58>
 8014568:	68ba      	ldr	r2, [r7, #8]
 801456a:	2380      	movs	r3, #128	; 0x80
 801456c:	015b      	lsls	r3, r3, #5
 801456e:	429a      	cmp	r2, r3
 8014570:	d008      	beq.n	8014584 <LL_TIM_OC_SetPolarity+0x54>
 8014572:	68ba      	ldr	r2, [r7, #8]
 8014574:	2380      	movs	r3, #128	; 0x80
 8014576:	025b      	lsls	r3, r3, #9
 8014578:	429a      	cmp	r2, r3
 801457a:	d101      	bne.n	8014580 <LL_TIM_OC_SetPolarity+0x50>
 801457c:	2307      	movs	r3, #7
 801457e:	e00e      	b.n	801459e <LL_TIM_OC_SetPolarity+0x6e>
 8014580:	2308      	movs	r3, #8
 8014582:	e00c      	b.n	801459e <LL_TIM_OC_SetPolarity+0x6e>
 8014584:	2306      	movs	r3, #6
 8014586:	e00a      	b.n	801459e <LL_TIM_OC_SetPolarity+0x6e>
 8014588:	2305      	movs	r3, #5
 801458a:	e008      	b.n	801459e <LL_TIM_OC_SetPolarity+0x6e>
 801458c:	2304      	movs	r3, #4
 801458e:	e006      	b.n	801459e <LL_TIM_OC_SetPolarity+0x6e>
 8014590:	2303      	movs	r3, #3
 8014592:	e004      	b.n	801459e <LL_TIM_OC_SetPolarity+0x6e>
 8014594:	2302      	movs	r3, #2
 8014596:	e002      	b.n	801459e <LL_TIM_OC_SetPolarity+0x6e>
 8014598:	2301      	movs	r3, #1
 801459a:	e000      	b.n	801459e <LL_TIM_OC_SetPolarity+0x6e>
 801459c:	2300      	movs	r3, #0
 801459e:	2017      	movs	r0, #23
 80145a0:	183a      	adds	r2, r7, r0
 80145a2:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	6a1b      	ldr	r3, [r3, #32]
 80145a8:	183a      	adds	r2, r7, r0
 80145aa:	7812      	ldrb	r2, [r2, #0]
 80145ac:	490a      	ldr	r1, [pc, #40]	; (80145d8 <LL_TIM_OC_SetPolarity+0xa8>)
 80145ae:	5c8a      	ldrb	r2, [r1, r2]
 80145b0:	0011      	movs	r1, r2
 80145b2:	2202      	movs	r2, #2
 80145b4:	408a      	lsls	r2, r1
 80145b6:	43d2      	mvns	r2, r2
 80145b8:	401a      	ands	r2, r3
 80145ba:	183b      	adds	r3, r7, r0
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	4906      	ldr	r1, [pc, #24]	; (80145d8 <LL_TIM_OC_SetPolarity+0xa8>)
 80145c0:	5ccb      	ldrb	r3, [r1, r3]
 80145c2:	0019      	movs	r1, r3
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	408b      	lsls	r3, r1
 80145c8:	431a      	orrs	r2, r3
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	621a      	str	r2, [r3, #32]
}
 80145ce:	46c0      	nop			; (mov r8, r8)
 80145d0:	46bd      	mov	sp, r7
 80145d2:	b006      	add	sp, #24
 80145d4:	bd80      	pop	{r7, pc}
 80145d6:	46c0      	nop			; (mov r8, r8)
 80145d8:	08024124 	.word	0x08024124

080145dc <LL_TIM_OC_SetCompareCH1>:
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	683a      	ldr	r2, [r7, #0]
 80145ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80145ec:	46c0      	nop			; (mov r8, r8)
 80145ee:	46bd      	mov	sp, r7
 80145f0:	b002      	add	sp, #8
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <LL_TIM_OC_SetCompareCH2>:
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b082      	sub	sp, #8
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	683a      	ldr	r2, [r7, #0]
 8014602:	639a      	str	r2, [r3, #56]	; 0x38
}
 8014604:	46c0      	nop			; (mov r8, r8)
 8014606:	46bd      	mov	sp, r7
 8014608:	b002      	add	sp, #8
 801460a:	bd80      	pop	{r7, pc}

0801460c <LL_TIM_OC_SetCompareCH3>:
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	683a      	ldr	r2, [r7, #0]
 801461a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801461c:	46c0      	nop			; (mov r8, r8)
 801461e:	46bd      	mov	sp, r7
 8014620:	b002      	add	sp, #8
 8014622:	bd80      	pop	{r7, pc}

08014624 <LL_TIM_OC_SetCompareCH4>:
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	683a      	ldr	r2, [r7, #0]
 8014632:	641a      	str	r2, [r3, #64]	; 0x40
}
 8014634:	46c0      	nop			; (mov r8, r8)
 8014636:	46bd      	mov	sp, r7
 8014638:	b002      	add	sp, #8
 801463a:	bd80      	pop	{r7, pc}

0801463c <LL_TIM_ClearFlag_CC1>:
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b082      	sub	sp, #8
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2203      	movs	r2, #3
 8014648:	4252      	negs	r2, r2
 801464a:	611a      	str	r2, [r3, #16]
}
 801464c:	46c0      	nop			; (mov r8, r8)
 801464e:	46bd      	mov	sp, r7
 8014650:	b002      	add	sp, #8
 8014652:	bd80      	pop	{r7, pc}

08014654 <LL_TIM_IsActiveFlag_CC1>:
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	691b      	ldr	r3, [r3, #16]
 8014660:	2202      	movs	r2, #2
 8014662:	4013      	ands	r3, r2
 8014664:	2b02      	cmp	r3, #2
 8014666:	d101      	bne.n	801466c <LL_TIM_IsActiveFlag_CC1+0x18>
 8014668:	2301      	movs	r3, #1
 801466a:	e000      	b.n	801466e <LL_TIM_IsActiveFlag_CC1+0x1a>
 801466c:	2300      	movs	r3, #0
}
 801466e:	0018      	movs	r0, r3
 8014670:	46bd      	mov	sp, r7
 8014672:	b002      	add	sp, #8
 8014674:	bd80      	pop	{r7, pc}

08014676 <LL_TIM_ClearFlag_CC2>:
{
 8014676:	b580      	push	{r7, lr}
 8014678:	b082      	sub	sp, #8
 801467a:	af00      	add	r7, sp, #0
 801467c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2205      	movs	r2, #5
 8014682:	4252      	negs	r2, r2
 8014684:	611a      	str	r2, [r3, #16]
}
 8014686:	46c0      	nop			; (mov r8, r8)
 8014688:	46bd      	mov	sp, r7
 801468a:	b002      	add	sp, #8
 801468c:	bd80      	pop	{r7, pc}

0801468e <LL_TIM_IsActiveFlag_CC2>:
{
 801468e:	b580      	push	{r7, lr}
 8014690:	b082      	sub	sp, #8
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	691b      	ldr	r3, [r3, #16]
 801469a:	2204      	movs	r2, #4
 801469c:	4013      	ands	r3, r2
 801469e:	2b04      	cmp	r3, #4
 80146a0:	d101      	bne.n	80146a6 <LL_TIM_IsActiveFlag_CC2+0x18>
 80146a2:	2301      	movs	r3, #1
 80146a4:	e000      	b.n	80146a8 <LL_TIM_IsActiveFlag_CC2+0x1a>
 80146a6:	2300      	movs	r3, #0
}
 80146a8:	0018      	movs	r0, r3
 80146aa:	46bd      	mov	sp, r7
 80146ac:	b002      	add	sp, #8
 80146ae:	bd80      	pop	{r7, pc}

080146b0 <LL_TIM_ClearFlag_CC3>:
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2209      	movs	r2, #9
 80146bc:	4252      	negs	r2, r2
 80146be:	611a      	str	r2, [r3, #16]
}
 80146c0:	46c0      	nop			; (mov r8, r8)
 80146c2:	46bd      	mov	sp, r7
 80146c4:	b002      	add	sp, #8
 80146c6:	bd80      	pop	{r7, pc}

080146c8 <LL_TIM_IsActiveFlag_CC3>:
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	691b      	ldr	r3, [r3, #16]
 80146d4:	2208      	movs	r2, #8
 80146d6:	4013      	ands	r3, r2
 80146d8:	2b08      	cmp	r3, #8
 80146da:	d101      	bne.n	80146e0 <LL_TIM_IsActiveFlag_CC3+0x18>
 80146dc:	2301      	movs	r3, #1
 80146de:	e000      	b.n	80146e2 <LL_TIM_IsActiveFlag_CC3+0x1a>
 80146e0:	2300      	movs	r3, #0
}
 80146e2:	0018      	movs	r0, r3
 80146e4:	46bd      	mov	sp, r7
 80146e6:	b002      	add	sp, #8
 80146e8:	bd80      	pop	{r7, pc}

080146ea <LL_TIM_ClearFlag_CC4>:
{
 80146ea:	b580      	push	{r7, lr}
 80146ec:	b082      	sub	sp, #8
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	2211      	movs	r2, #17
 80146f6:	4252      	negs	r2, r2
 80146f8:	611a      	str	r2, [r3, #16]
}
 80146fa:	46c0      	nop			; (mov r8, r8)
 80146fc:	46bd      	mov	sp, r7
 80146fe:	b002      	add	sp, #8
 8014700:	bd80      	pop	{r7, pc}

08014702 <LL_TIM_IsActiveFlag_CC4>:
{
 8014702:	b580      	push	{r7, lr}
 8014704:	b082      	sub	sp, #8
 8014706:	af00      	add	r7, sp, #0
 8014708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	691b      	ldr	r3, [r3, #16]
 801470e:	2210      	movs	r2, #16
 8014710:	4013      	ands	r3, r2
 8014712:	2b10      	cmp	r3, #16
 8014714:	d101      	bne.n	801471a <LL_TIM_IsActiveFlag_CC4+0x18>
 8014716:	2301      	movs	r3, #1
 8014718:	e000      	b.n	801471c <LL_TIM_IsActiveFlag_CC4+0x1a>
 801471a:	2300      	movs	r3, #0
}
 801471c:	0018      	movs	r0, r3
 801471e:	46bd      	mov	sp, r7
 8014720:	b002      	add	sp, #8
 8014722:	bd80      	pop	{r7, pc}

08014724 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8014724:	b5b0      	push	{r4, r5, r7, lr}
 8014726:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8014728:	4b48      	ldr	r3, [pc, #288]	; (801484c <USBPD_TIM_Init+0x128>)
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	b25b      	sxtb	r3, r3
 801472e:	2b00      	cmp	r3, #0
 8014730:	d000      	beq.n	8014734 <USBPD_TIM_Init+0x10>
 8014732:	e07e      	b.n	8014832 <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 8014734:	2380      	movs	r3, #128	; 0x80
 8014736:	011b      	lsls	r3, r3, #4
 8014738:	0018      	movs	r0, r3
 801473a:	f7ff fe2d 	bl	8014398 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 801473e:	4b44      	ldr	r3, [pc, #272]	; (8014850 <USBPD_TIM_Init+0x12c>)
 8014740:	2100      	movs	r1, #0
 8014742:	0018      	movs	r0, r3
 8014744:	f7ff fe5e 	bl	8014404 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8014748:	4b42      	ldr	r3, [pc, #264]	; (8014854 <USBPD_TIM_Init+0x130>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	4a42      	ldr	r2, [pc, #264]	; (8014858 <USBPD_TIM_Init+0x134>)
 801474e:	4293      	cmp	r3, r2
 8014750:	d90b      	bls.n	801476a <USBPD_TIM_Init+0x46>
 8014752:	4b40      	ldr	r3, [pc, #256]	; (8014854 <USBPD_TIM_Init+0x130>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	4a41      	ldr	r2, [pc, #260]	; (801485c <USBPD_TIM_Init+0x138>)
 8014758:	4694      	mov	ip, r2
 801475a:	4463      	add	r3, ip
 801475c:	4940      	ldr	r1, [pc, #256]	; (8014860 <USBPD_TIM_Init+0x13c>)
 801475e:	0018      	movs	r0, r3
 8014760:	f7f1 fd46 	bl	80061f0 <__udivsi3>
 8014764:	0003      	movs	r3, r0
 8014766:	3b01      	subs	r3, #1
 8014768:	e000      	b.n	801476c <USBPD_TIM_Init+0x48>
 801476a:	2300      	movs	r3, #0
 801476c:	4a38      	ldr	r2, [pc, #224]	; (8014850 <USBPD_TIM_Init+0x12c>)
 801476e:	0019      	movs	r1, r3
 8014770:	0010      	movs	r0, r2
 8014772:	f7ff fe59 	bl	8014428 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8014776:	4b37      	ldr	r3, [pc, #220]	; (8014854 <USBPD_TIM_Init+0x130>)
 8014778:	681c      	ldr	r4, [r3, #0]
 801477a:	4b35      	ldr	r3, [pc, #212]	; (8014850 <USBPD_TIM_Init+0x12c>)
 801477c:	0018      	movs	r0, r3
 801477e:	f7ff fe5f 	bl	8014440 <LL_TIM_GetPrescaler>
 8014782:	0003      	movs	r3, r0
 8014784:	3301      	adds	r3, #1
 8014786:	0019      	movs	r1, r3
 8014788:	0020      	movs	r0, r4
 801478a:	f7f1 fd31 	bl	80061f0 <__udivsi3>
 801478e:	0003      	movs	r3, r0
 8014790:	2b63      	cmp	r3, #99	; 0x63
 8014792:	d910      	bls.n	80147b6 <USBPD_TIM_Init+0x92>
 8014794:	4b2f      	ldr	r3, [pc, #188]	; (8014854 <USBPD_TIM_Init+0x130>)
 8014796:	681c      	ldr	r4, [r3, #0]
 8014798:	4b2d      	ldr	r3, [pc, #180]	; (8014850 <USBPD_TIM_Init+0x12c>)
 801479a:	0018      	movs	r0, r3
 801479c:	f7ff fe50 	bl	8014440 <LL_TIM_GetPrescaler>
 80147a0:	0003      	movs	r3, r0
 80147a2:	3301      	adds	r3, #1
 80147a4:	2264      	movs	r2, #100	; 0x64
 80147a6:	4353      	muls	r3, r2
 80147a8:	0019      	movs	r1, r3
 80147aa:	0020      	movs	r0, r4
 80147ac:	f7f1 fd20 	bl	80061f0 <__udivsi3>
 80147b0:	0003      	movs	r3, r0
 80147b2:	3b01      	subs	r3, #1
 80147b4:	e000      	b.n	80147b8 <USBPD_TIM_Init+0x94>
 80147b6:	2300      	movs	r3, #0
 80147b8:	4a25      	ldr	r2, [pc, #148]	; (8014850 <USBPD_TIM_Init+0x12c>)
 80147ba:	0019      	movs	r1, r3
 80147bc:	0010      	movs	r0, r2
 80147be:	f7ff fe49 	bl	8014454 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 80147c2:	4b23      	ldr	r3, [pc, #140]	; (8014850 <USBPD_TIM_Init+0x12c>)
 80147c4:	2230      	movs	r2, #48	; 0x30
 80147c6:	2101      	movs	r1, #1
 80147c8:	0018      	movs	r0, r3
 80147ca:	f7ff fe4f 	bl	801446c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 80147ce:	4b20      	ldr	r3, [pc, #128]	; (8014850 <USBPD_TIM_Init+0x12c>)
 80147d0:	2230      	movs	r2, #48	; 0x30
 80147d2:	2110      	movs	r1, #16
 80147d4:	0018      	movs	r0, r3
 80147d6:	f7ff fe49 	bl	801446c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 80147da:	2380      	movs	r3, #128	; 0x80
 80147dc:	005b      	lsls	r3, r3, #1
 80147de:	481c      	ldr	r0, [pc, #112]	; (8014850 <USBPD_TIM_Init+0x12c>)
 80147e0:	2230      	movs	r2, #48	; 0x30
 80147e2:	0019      	movs	r1, r3
 80147e4:	f7ff fe42 	bl	801446c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 80147e8:	2380      	movs	r3, #128	; 0x80
 80147ea:	015b      	lsls	r3, r3, #5
 80147ec:	4818      	ldr	r0, [pc, #96]	; (8014850 <USBPD_TIM_Init+0x12c>)
 80147ee:	2230      	movs	r2, #48	; 0x30
 80147f0:	0019      	movs	r1, r3
 80147f2:	f7ff fe3b 	bl	801446c <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80147f6:	4b16      	ldr	r3, [pc, #88]	; (8014850 <USBPD_TIM_Init+0x12c>)
 80147f8:	2200      	movs	r2, #0
 80147fa:	2101      	movs	r1, #1
 80147fc:	0018      	movs	r0, r3
 80147fe:	f7ff fe97 	bl	8014530 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8014802:	4b13      	ldr	r3, [pc, #76]	; (8014850 <USBPD_TIM_Init+0x12c>)
 8014804:	2200      	movs	r2, #0
 8014806:	2110      	movs	r1, #16
 8014808:	0018      	movs	r0, r3
 801480a:	f7ff fe91 	bl	8014530 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 801480e:	2380      	movs	r3, #128	; 0x80
 8014810:	005b      	lsls	r3, r3, #1
 8014812:	480f      	ldr	r0, [pc, #60]	; (8014850 <USBPD_TIM_Init+0x12c>)
 8014814:	2200      	movs	r2, #0
 8014816:	0019      	movs	r1, r3
 8014818:	f7ff fe8a 	bl	8014530 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 801481c:	2380      	movs	r3, #128	; 0x80
 801481e:	015b      	lsls	r3, r3, #5
 8014820:	480b      	ldr	r0, [pc, #44]	; (8014850 <USBPD_TIM_Init+0x12c>)
 8014822:	2200      	movs	r2, #0
 8014824:	0019      	movs	r1, r3
 8014826:	f7ff fe83 	bl	8014530 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 801482a:	4b09      	ldr	r3, [pc, #36]	; (8014850 <USBPD_TIM_Init+0x12c>)
 801482c:	0018      	movs	r0, r3
 801482e:	f7ff fddb 	bl	80143e8 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8014832:	4b06      	ldr	r3, [pc, #24]	; (801484c <USBPD_TIM_Init+0x128>)
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	b25b      	sxtb	r3, r3
 8014838:	b2db      	uxtb	r3, r3
 801483a:	3301      	adds	r3, #1
 801483c:	b2db      	uxtb	r3, r3
 801483e:	b25a      	sxtb	r2, r3
 8014840:	4b02      	ldr	r3, [pc, #8]	; (801484c <USBPD_TIM_Init+0x128>)
 8014842:	701a      	strb	r2, [r3, #0]
}
 8014844:	46c0      	nop			; (mov r8, r8)
 8014846:	46bd      	mov	sp, r7
 8014848:	bdb0      	pop	{r4, r5, r7, pc}
 801484a:	46c0      	nop			; (mov r8, r8)
 801484c:	200005a4 	.word	0x200005a4
 8014850:	40012c00 	.word	0x40012c00
 8014854:	20000048 	.word	0x20000048
 8014858:	000f423f 	.word	0x000f423f
 801485c:	0007a120 	.word	0x0007a120
 8014860:	000f4240 	.word	0x000f4240

08014864 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8014868:	4b0a      	ldr	r3, [pc, #40]	; (8014894 <USBPD_TIM_DeInit+0x30>)
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	b25b      	sxtb	r3, r3
 801486e:	b2db      	uxtb	r3, r3
 8014870:	3b01      	subs	r3, #1
 8014872:	b2db      	uxtb	r3, r3
 8014874:	b25a      	sxtb	r2, r3
 8014876:	4b07      	ldr	r3, [pc, #28]	; (8014894 <USBPD_TIM_DeInit+0x30>)
 8014878:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 801487a:	4b06      	ldr	r3, [pc, #24]	; (8014894 <USBPD_TIM_DeInit+0x30>)
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	b25b      	sxtb	r3, r3
 8014880:	2b00      	cmp	r3, #0
 8014882:	d104      	bne.n	801488e <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 8014884:	2380      	movs	r3, #128	; 0x80
 8014886:	011b      	lsls	r3, r3, #4
 8014888:	0018      	movs	r0, r3
 801488a:	f7ff fd9b 	bl	80143c4 <LL_APB2_GRP1_DisableClock>
  }
}
 801488e:	46c0      	nop			; (mov r8, r8)
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	200005a4 	.word	0x200005a4

08014898 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	0002      	movs	r2, r0
 80148a0:	6039      	str	r1, [r7, #0]
 80148a2:	1dfb      	adds	r3, r7, #7
 80148a4:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 80148a6:	1dfb      	adds	r3, r7, #7
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	2b03      	cmp	r3, #3
 80148ac:	d044      	beq.n	8014938 <USBPD_TIM_Start+0xa0>
 80148ae:	dc57      	bgt.n	8014960 <USBPD_TIM_Start+0xc8>
 80148b0:	2b02      	cmp	r3, #2
 80148b2:	d02d      	beq.n	8014910 <USBPD_TIM_Start+0x78>
 80148b4:	dc54      	bgt.n	8014960 <USBPD_TIM_Start+0xc8>
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d002      	beq.n	80148c0 <USBPD_TIM_Start+0x28>
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d014      	beq.n	80148e8 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 80148be:	e04f      	b.n	8014960 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 80148c0:	4b2a      	ldr	r3, [pc, #168]	; (801496c <USBPD_TIM_Start+0xd4>)
 80148c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	18d3      	adds	r3, r2, r3
 80148c8:	4929      	ldr	r1, [pc, #164]	; (8014970 <USBPD_TIM_Start+0xd8>)
 80148ca:	0018      	movs	r0, r3
 80148cc:	f7f1 fd16 	bl	80062fc <__aeabi_uidivmod>
 80148d0:	000b      	movs	r3, r1
 80148d2:	001a      	movs	r2, r3
 80148d4:	4b25      	ldr	r3, [pc, #148]	; (801496c <USBPD_TIM_Start+0xd4>)
 80148d6:	0011      	movs	r1, r2
 80148d8:	0018      	movs	r0, r3
 80148da:	f7ff fe7f 	bl	80145dc <LL_TIM_OC_SetCompareCH1>
 80148de:	4b23      	ldr	r3, [pc, #140]	; (801496c <USBPD_TIM_Start+0xd4>)
 80148e0:	0018      	movs	r0, r3
 80148e2:	f7ff feab 	bl	801463c <LL_TIM_ClearFlag_CC1>
      break;
 80148e6:	e03c      	b.n	8014962 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 80148e8:	4b20      	ldr	r3, [pc, #128]	; (801496c <USBPD_TIM_Start+0xd4>)
 80148ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	18d3      	adds	r3, r2, r3
 80148f0:	491f      	ldr	r1, [pc, #124]	; (8014970 <USBPD_TIM_Start+0xd8>)
 80148f2:	0018      	movs	r0, r3
 80148f4:	f7f1 fd02 	bl	80062fc <__aeabi_uidivmod>
 80148f8:	000b      	movs	r3, r1
 80148fa:	001a      	movs	r2, r3
 80148fc:	4b1b      	ldr	r3, [pc, #108]	; (801496c <USBPD_TIM_Start+0xd4>)
 80148fe:	0011      	movs	r1, r2
 8014900:	0018      	movs	r0, r3
 8014902:	f7ff fe77 	bl	80145f4 <LL_TIM_OC_SetCompareCH2>
 8014906:	4b19      	ldr	r3, [pc, #100]	; (801496c <USBPD_TIM_Start+0xd4>)
 8014908:	0018      	movs	r0, r3
 801490a:	f7ff feb4 	bl	8014676 <LL_TIM_ClearFlag_CC2>
      break;
 801490e:	e028      	b.n	8014962 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 8014910:	4b16      	ldr	r3, [pc, #88]	; (801496c <USBPD_TIM_Start+0xd4>)
 8014912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	18d3      	adds	r3, r2, r3
 8014918:	4915      	ldr	r1, [pc, #84]	; (8014970 <USBPD_TIM_Start+0xd8>)
 801491a:	0018      	movs	r0, r3
 801491c:	f7f1 fcee 	bl	80062fc <__aeabi_uidivmod>
 8014920:	000b      	movs	r3, r1
 8014922:	001a      	movs	r2, r3
 8014924:	4b11      	ldr	r3, [pc, #68]	; (801496c <USBPD_TIM_Start+0xd4>)
 8014926:	0011      	movs	r1, r2
 8014928:	0018      	movs	r0, r3
 801492a:	f7ff fe6f 	bl	801460c <LL_TIM_OC_SetCompareCH3>
 801492e:	4b0f      	ldr	r3, [pc, #60]	; (801496c <USBPD_TIM_Start+0xd4>)
 8014930:	0018      	movs	r0, r3
 8014932:	f7ff febd 	bl	80146b0 <LL_TIM_ClearFlag_CC3>
      break;
 8014936:	e014      	b.n	8014962 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 8014938:	4b0c      	ldr	r3, [pc, #48]	; (801496c <USBPD_TIM_Start+0xd4>)
 801493a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	18d3      	adds	r3, r2, r3
 8014940:	490b      	ldr	r1, [pc, #44]	; (8014970 <USBPD_TIM_Start+0xd8>)
 8014942:	0018      	movs	r0, r3
 8014944:	f7f1 fcda 	bl	80062fc <__aeabi_uidivmod>
 8014948:	000b      	movs	r3, r1
 801494a:	001a      	movs	r2, r3
 801494c:	4b07      	ldr	r3, [pc, #28]	; (801496c <USBPD_TIM_Start+0xd4>)
 801494e:	0011      	movs	r1, r2
 8014950:	0018      	movs	r0, r3
 8014952:	f7ff fe67 	bl	8014624 <LL_TIM_OC_SetCompareCH4>
 8014956:	4b05      	ldr	r3, [pc, #20]	; (801496c <USBPD_TIM_Start+0xd4>)
 8014958:	0018      	movs	r0, r3
 801495a:	f7ff fec6 	bl	80146ea <LL_TIM_ClearFlag_CC4>
      break;
 801495e:	e000      	b.n	8014962 <USBPD_TIM_Start+0xca>
      break;
 8014960:	46c0      	nop			; (mov r8, r8)
  }
}
 8014962:	46c0      	nop			; (mov r8, r8)
 8014964:	46bd      	mov	sp, r7
 8014966:	b002      	add	sp, #8
 8014968:	bd80      	pop	{r7, pc}
 801496a:	46c0      	nop			; (mov r8, r8)
 801496c:	40012c00 	.word	0x40012c00
 8014970:	00002710 	.word	0x00002710

08014974 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b084      	sub	sp, #16
 8014978:	af00      	add	r7, sp, #0
 801497a:	0002      	movs	r2, r0
 801497c:	1dfb      	adds	r3, r7, #7
 801497e:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 8014980:	2301      	movs	r3, #1
 8014982:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8014984:	1dfb      	adds	r3, r7, #7
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	2b03      	cmp	r3, #3
 801498a:	d01d      	beq.n	80149c8 <USBPD_TIM_IsExpired+0x54>
 801498c:	dc23      	bgt.n	80149d6 <USBPD_TIM_IsExpired+0x62>
 801498e:	2b02      	cmp	r3, #2
 8014990:	d013      	beq.n	80149ba <USBPD_TIM_IsExpired+0x46>
 8014992:	dc20      	bgt.n	80149d6 <USBPD_TIM_IsExpired+0x62>
 8014994:	2b00      	cmp	r3, #0
 8014996:	d002      	beq.n	801499e <USBPD_TIM_IsExpired+0x2a>
 8014998:	2b01      	cmp	r3, #1
 801499a:	d007      	beq.n	80149ac <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 801499c:	e01b      	b.n	80149d6 <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 801499e:	4b11      	ldr	r3, [pc, #68]	; (80149e4 <USBPD_TIM_IsExpired+0x70>)
 80149a0:	0018      	movs	r0, r3
 80149a2:	f7ff fe57 	bl	8014654 <LL_TIM_IsActiveFlag_CC1>
 80149a6:	0003      	movs	r3, r0
 80149a8:	60fb      	str	r3, [r7, #12]
      break;
 80149aa:	e015      	b.n	80149d8 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 80149ac:	4b0d      	ldr	r3, [pc, #52]	; (80149e4 <USBPD_TIM_IsExpired+0x70>)
 80149ae:	0018      	movs	r0, r3
 80149b0:	f7ff fe6d 	bl	801468e <LL_TIM_IsActiveFlag_CC2>
 80149b4:	0003      	movs	r3, r0
 80149b6:	60fb      	str	r3, [r7, #12]
      break;
 80149b8:	e00e      	b.n	80149d8 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 80149ba:	4b0a      	ldr	r3, [pc, #40]	; (80149e4 <USBPD_TIM_IsExpired+0x70>)
 80149bc:	0018      	movs	r0, r3
 80149be:	f7ff fe83 	bl	80146c8 <LL_TIM_IsActiveFlag_CC3>
 80149c2:	0003      	movs	r3, r0
 80149c4:	60fb      	str	r3, [r7, #12]
      break;
 80149c6:	e007      	b.n	80149d8 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 80149c8:	4b06      	ldr	r3, [pc, #24]	; (80149e4 <USBPD_TIM_IsExpired+0x70>)
 80149ca:	0018      	movs	r0, r3
 80149cc:	f7ff fe99 	bl	8014702 <LL_TIM_IsActiveFlag_CC4>
 80149d0:	0003      	movs	r3, r0
 80149d2:	60fb      	str	r3, [r7, #12]
      break;
 80149d4:	e000      	b.n	80149d8 <USBPD_TIM_IsExpired+0x64>
      break;
 80149d6:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 80149d8:	68fb      	ldr	r3, [r7, #12]
}
 80149da:	0018      	movs	r0, r3
 80149dc:	46bd      	mov	sp, r7
 80149de:	b004      	add	sp, #16
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	46c0      	nop			; (mov r8, r8)
 80149e4:	40012c00 	.word	0x40012c00

080149e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b084      	sub	sp, #16
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
 80149f0:	000a      	movs	r2, r1
 80149f2:	1cfb      	adds	r3, r7, #3
 80149f4:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80149f6:	2387      	movs	r3, #135	; 0x87
 80149f8:	009b      	lsls	r3, r3, #2
 80149fa:	0018      	movs	r0, r3
 80149fc:	f008 fc16 	bl	801d22c <USBD_static_malloc>
 8014a00:	0003      	movs	r3, r0
 8014a02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d10a      	bne.n	8014a20 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014a0a:	687a      	ldr	r2, [r7, #4]
 8014a0c:	23b5      	movs	r3, #181	; 0xb5
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	58d2      	ldr	r2, [r2, r3]
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	32b0      	adds	r2, #176	; 0xb0
 8014a16:	0092      	lsls	r2, r2, #2
 8014a18:	2100      	movs	r1, #0
 8014a1a:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 8014a1c:	2302      	movs	r3, #2
 8014a1e:	e0e9      	b.n	8014bf4 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014a20:	2387      	movs	r3, #135	; 0x87
 8014a22:	009a      	lsls	r2, r3, #2
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	2100      	movs	r1, #0
 8014a28:	0018      	movs	r0, r3
 8014a2a:	f00d fe39 	bl	80226a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014a2e:	687a      	ldr	r2, [r7, #4]
 8014a30:	23b5      	movs	r3, #181	; 0xb5
 8014a32:	009b      	lsls	r3, r3, #2
 8014a34:	58d2      	ldr	r2, [r2, r3]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	32b0      	adds	r2, #176	; 0xb0
 8014a3a:	0092      	lsls	r2, r2, #2
 8014a3c:	68f9      	ldr	r1, [r7, #12]
 8014a3e:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	23b5      	movs	r3, #181	; 0xb5
 8014a44:	009b      	lsls	r3, r3, #2
 8014a46:	58d2      	ldr	r2, [r2, r3]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	32b0      	adds	r2, #176	; 0xb0
 8014a4c:	0092      	lsls	r2, r2, #2
 8014a4e:	58d1      	ldr	r1, [r2, r3]
 8014a50:	687a      	ldr	r2, [r7, #4]
 8014a52:	23af      	movs	r3, #175	; 0xaf
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	7c1b      	ldrb	r3, [r3, #16]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d13c      	bne.n	8014ada <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014a60:	4b66      	ldr	r3, [pc, #408]	; (8014bfc <USBD_CDC_Init+0x214>)
 8014a62:	7819      	ldrb	r1, [r3, #0]
 8014a64:	2380      	movs	r3, #128	; 0x80
 8014a66:	009b      	lsls	r3, r3, #2
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	2202      	movs	r2, #2
 8014a6c:	f008 fa1b 	bl	801cea6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014a70:	4b62      	ldr	r3, [pc, #392]	; (8014bfc <USBD_CDC_Init+0x214>)
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	001a      	movs	r2, r3
 8014a76:	230f      	movs	r3, #15
 8014a78:	401a      	ands	r2, r3
 8014a7a:	6879      	ldr	r1, [r7, #4]
 8014a7c:	0013      	movs	r3, r2
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	189b      	adds	r3, r3, r2
 8014a82:	009b      	lsls	r3, r3, #2
 8014a84:	18cb      	adds	r3, r1, r3
 8014a86:	3324      	adds	r3, #36	; 0x24
 8014a88:	2201      	movs	r2, #1
 8014a8a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014a8c:	4b5c      	ldr	r3, [pc, #368]	; (8014c00 <USBD_CDC_Init+0x218>)
 8014a8e:	7819      	ldrb	r1, [r3, #0]
 8014a90:	2380      	movs	r3, #128	; 0x80
 8014a92:	009b      	lsls	r3, r3, #2
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	2202      	movs	r2, #2
 8014a98:	f008 fa05 	bl	801cea6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014a9c:	4b58      	ldr	r3, [pc, #352]	; (8014c00 <USBD_CDC_Init+0x218>)
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	001a      	movs	r2, r3
 8014aa2:	230f      	movs	r3, #15
 8014aa4:	401a      	ands	r2, r3
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	23b2      	movs	r3, #178	; 0xb2
 8014aaa:	0059      	lsls	r1, r3, #1
 8014aac:	0013      	movs	r3, r2
 8014aae:	009b      	lsls	r3, r3, #2
 8014ab0:	189b      	adds	r3, r3, r2
 8014ab2:	009b      	lsls	r3, r3, #2
 8014ab4:	18c3      	adds	r3, r0, r3
 8014ab6:	185b      	adds	r3, r3, r1
 8014ab8:	2201      	movs	r2, #1
 8014aba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014abc:	4b51      	ldr	r3, [pc, #324]	; (8014c04 <USBD_CDC_Init+0x21c>)
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	001a      	movs	r2, r3
 8014ac2:	230f      	movs	r3, #15
 8014ac4:	401a      	ands	r2, r3
 8014ac6:	6879      	ldr	r1, [r7, #4]
 8014ac8:	0013      	movs	r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	189b      	adds	r3, r3, r2
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	18cb      	adds	r3, r1, r3
 8014ad2:	3326      	adds	r3, #38	; 0x26
 8014ad4:	2210      	movs	r2, #16
 8014ad6:	801a      	strh	r2, [r3, #0]
 8014ad8:	e039      	b.n	8014b4e <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014ada:	4b48      	ldr	r3, [pc, #288]	; (8014bfc <USBD_CDC_Init+0x214>)
 8014adc:	7819      	ldrb	r1, [r3, #0]
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	2340      	movs	r3, #64	; 0x40
 8014ae2:	2202      	movs	r2, #2
 8014ae4:	f008 f9df 	bl	801cea6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014ae8:	4b44      	ldr	r3, [pc, #272]	; (8014bfc <USBD_CDC_Init+0x214>)
 8014aea:	781b      	ldrb	r3, [r3, #0]
 8014aec:	001a      	movs	r2, r3
 8014aee:	230f      	movs	r3, #15
 8014af0:	401a      	ands	r2, r3
 8014af2:	6879      	ldr	r1, [r7, #4]
 8014af4:	0013      	movs	r3, r2
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	189b      	adds	r3, r3, r2
 8014afa:	009b      	lsls	r3, r3, #2
 8014afc:	18cb      	adds	r3, r1, r3
 8014afe:	3324      	adds	r3, #36	; 0x24
 8014b00:	2201      	movs	r2, #1
 8014b02:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014b04:	4b3e      	ldr	r3, [pc, #248]	; (8014c00 <USBD_CDC_Init+0x218>)
 8014b06:	7819      	ldrb	r1, [r3, #0]
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	2340      	movs	r3, #64	; 0x40
 8014b0c:	2202      	movs	r2, #2
 8014b0e:	f008 f9ca 	bl	801cea6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014b12:	4b3b      	ldr	r3, [pc, #236]	; (8014c00 <USBD_CDC_Init+0x218>)
 8014b14:	781b      	ldrb	r3, [r3, #0]
 8014b16:	001a      	movs	r2, r3
 8014b18:	230f      	movs	r3, #15
 8014b1a:	401a      	ands	r2, r3
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	23b2      	movs	r3, #178	; 0xb2
 8014b20:	0059      	lsls	r1, r3, #1
 8014b22:	0013      	movs	r3, r2
 8014b24:	009b      	lsls	r3, r3, #2
 8014b26:	189b      	adds	r3, r3, r2
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	18c3      	adds	r3, r0, r3
 8014b2c:	185b      	adds	r3, r3, r1
 8014b2e:	2201      	movs	r2, #1
 8014b30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014b32:	4b34      	ldr	r3, [pc, #208]	; (8014c04 <USBD_CDC_Init+0x21c>)
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	001a      	movs	r2, r3
 8014b38:	230f      	movs	r3, #15
 8014b3a:	401a      	ands	r2, r3
 8014b3c:	6879      	ldr	r1, [r7, #4]
 8014b3e:	0013      	movs	r3, r2
 8014b40:	009b      	lsls	r3, r3, #2
 8014b42:	189b      	adds	r3, r3, r2
 8014b44:	009b      	lsls	r3, r3, #2
 8014b46:	18cb      	adds	r3, r1, r3
 8014b48:	3326      	adds	r3, #38	; 0x26
 8014b4a:	2210      	movs	r2, #16
 8014b4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014b4e:	4b2d      	ldr	r3, [pc, #180]	; (8014c04 <USBD_CDC_Init+0x21c>)
 8014b50:	7819      	ldrb	r1, [r3, #0]
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	2308      	movs	r3, #8
 8014b56:	2203      	movs	r2, #3
 8014b58:	f008 f9a5 	bl	801cea6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014b5c:	4b29      	ldr	r3, [pc, #164]	; (8014c04 <USBD_CDC_Init+0x21c>)
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	001a      	movs	r2, r3
 8014b62:	230f      	movs	r3, #15
 8014b64:	401a      	ands	r2, r3
 8014b66:	6879      	ldr	r1, [r7, #4]
 8014b68:	0013      	movs	r3, r2
 8014b6a:	009b      	lsls	r3, r3, #2
 8014b6c:	189b      	adds	r3, r3, r2
 8014b6e:	009b      	lsls	r3, r3, #2
 8014b70:	18cb      	adds	r3, r1, r3
 8014b72:	3324      	adds	r3, #36	; 0x24
 8014b74:	2201      	movs	r2, #1
 8014b76:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014b78:	68fa      	ldr	r2, [r7, #12]
 8014b7a:	2381      	movs	r3, #129	; 0x81
 8014b7c:	009b      	lsls	r3, r3, #2
 8014b7e:	2100      	movs	r1, #0
 8014b80:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	23b5      	movs	r3, #181	; 0xb5
 8014b86:	009b      	lsls	r3, r3, #2
 8014b88:	58d3      	ldr	r3, [r2, r3]
 8014b8a:	687a      	ldr	r2, [r7, #4]
 8014b8c:	33b0      	adds	r3, #176	; 0xb0
 8014b8e:	009b      	lsls	r3, r3, #2
 8014b90:	18d3      	adds	r3, r2, r3
 8014b92:	3304      	adds	r3, #4
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014b9a:	68fa      	ldr	r2, [r7, #12]
 8014b9c:	2385      	movs	r3, #133	; 0x85
 8014b9e:	009b      	lsls	r3, r3, #2
 8014ba0:	2100      	movs	r1, #0
 8014ba2:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8014ba4:	68fa      	ldr	r2, [r7, #12]
 8014ba6:	2386      	movs	r3, #134	; 0x86
 8014ba8:	009b      	lsls	r3, r3, #2
 8014baa:	2100      	movs	r1, #0
 8014bac:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	2381      	movs	r3, #129	; 0x81
 8014bb2:	009b      	lsls	r3, r3, #2
 8014bb4:	58d3      	ldr	r3, [r2, r3]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d101      	bne.n	8014bbe <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 8014bba:	2302      	movs	r3, #2
 8014bbc:	e01a      	b.n	8014bf4 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	7c1b      	ldrb	r3, [r3, #16]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d10b      	bne.n	8014bde <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014bc6:	4b0e      	ldr	r3, [pc, #56]	; (8014c00 <USBD_CDC_Init+0x218>)
 8014bc8:	7819      	ldrb	r1, [r3, #0]
 8014bca:	68fa      	ldr	r2, [r7, #12]
 8014bcc:	2381      	movs	r3, #129	; 0x81
 8014bce:	009b      	lsls	r3, r3, #2
 8014bd0:	58d2      	ldr	r2, [r2, r3]
 8014bd2:	2380      	movs	r3, #128	; 0x80
 8014bd4:	009b      	lsls	r3, r3, #2
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f008 faa8 	bl	801d12c <USBD_LL_PrepareReceive>
 8014bdc:	e009      	b.n	8014bf2 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014bde:	4b08      	ldr	r3, [pc, #32]	; (8014c00 <USBD_CDC_Init+0x218>)
 8014be0:	7819      	ldrb	r1, [r3, #0]
 8014be2:	68fa      	ldr	r2, [r7, #12]
 8014be4:	2381      	movs	r3, #129	; 0x81
 8014be6:	009b      	lsls	r3, r3, #2
 8014be8:	58d2      	ldr	r2, [r2, r3]
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	2340      	movs	r3, #64	; 0x40
 8014bee:	f008 fa9d 	bl	801d12c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014bf2:	2300      	movs	r3, #0
}
 8014bf4:	0018      	movs	r0, r3
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	b004      	add	sp, #16
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	200000db 	.word	0x200000db
 8014c00:	200000dc 	.word	0x200000dc
 8014c04:	200000dd 	.word	0x200000dd

08014c08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b082      	sub	sp, #8
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	000a      	movs	r2, r1
 8014c12:	1cfb      	adds	r3, r7, #3
 8014c14:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014c16:	4b41      	ldr	r3, [pc, #260]	; (8014d1c <USBD_CDC_DeInit+0x114>)
 8014c18:	781a      	ldrb	r2, [r3, #0]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	0011      	movs	r1, r2
 8014c1e:	0018      	movs	r0, r3
 8014c20:	f008 f978 	bl	801cf14 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014c24:	4b3d      	ldr	r3, [pc, #244]	; (8014d1c <USBD_CDC_DeInit+0x114>)
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	001a      	movs	r2, r3
 8014c2a:	230f      	movs	r3, #15
 8014c2c:	401a      	ands	r2, r3
 8014c2e:	6879      	ldr	r1, [r7, #4]
 8014c30:	0013      	movs	r3, r2
 8014c32:	009b      	lsls	r3, r3, #2
 8014c34:	189b      	adds	r3, r3, r2
 8014c36:	009b      	lsls	r3, r3, #2
 8014c38:	18cb      	adds	r3, r1, r3
 8014c3a:	3324      	adds	r3, #36	; 0x24
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014c40:	4b37      	ldr	r3, [pc, #220]	; (8014d20 <USBD_CDC_DeInit+0x118>)
 8014c42:	781a      	ldrb	r2, [r3, #0]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	0011      	movs	r1, r2
 8014c48:	0018      	movs	r0, r3
 8014c4a:	f008 f963 	bl	801cf14 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014c4e:	4b34      	ldr	r3, [pc, #208]	; (8014d20 <USBD_CDC_DeInit+0x118>)
 8014c50:	781b      	ldrb	r3, [r3, #0]
 8014c52:	001a      	movs	r2, r3
 8014c54:	230f      	movs	r3, #15
 8014c56:	401a      	ands	r2, r3
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	23b2      	movs	r3, #178	; 0xb2
 8014c5c:	0059      	lsls	r1, r3, #1
 8014c5e:	0013      	movs	r3, r2
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	189b      	adds	r3, r3, r2
 8014c64:	009b      	lsls	r3, r3, #2
 8014c66:	18c3      	adds	r3, r0, r3
 8014c68:	185b      	adds	r3, r3, r1
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014c6e:	4b2d      	ldr	r3, [pc, #180]	; (8014d24 <USBD_CDC_DeInit+0x11c>)
 8014c70:	781a      	ldrb	r2, [r3, #0]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	0011      	movs	r1, r2
 8014c76:	0018      	movs	r0, r3
 8014c78:	f008 f94c 	bl	801cf14 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014c7c:	4b29      	ldr	r3, [pc, #164]	; (8014d24 <USBD_CDC_DeInit+0x11c>)
 8014c7e:	781b      	ldrb	r3, [r3, #0]
 8014c80:	001a      	movs	r2, r3
 8014c82:	230f      	movs	r3, #15
 8014c84:	401a      	ands	r2, r3
 8014c86:	6879      	ldr	r1, [r7, #4]
 8014c88:	0013      	movs	r3, r2
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	189b      	adds	r3, r3, r2
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	18cb      	adds	r3, r1, r3
 8014c92:	3324      	adds	r3, #36	; 0x24
 8014c94:	2200      	movs	r2, #0
 8014c96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014c98:	4b22      	ldr	r3, [pc, #136]	; (8014d24 <USBD_CDC_DeInit+0x11c>)
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	001a      	movs	r2, r3
 8014c9e:	230f      	movs	r3, #15
 8014ca0:	401a      	ands	r2, r3
 8014ca2:	6879      	ldr	r1, [r7, #4]
 8014ca4:	0013      	movs	r3, r2
 8014ca6:	009b      	lsls	r3, r3, #2
 8014ca8:	189b      	adds	r3, r3, r2
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	18cb      	adds	r3, r1, r3
 8014cae:	3326      	adds	r3, #38	; 0x26
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	23b5      	movs	r3, #181	; 0xb5
 8014cb8:	009b      	lsls	r3, r3, #2
 8014cba:	58d2      	ldr	r2, [r2, r3]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	32b0      	adds	r2, #176	; 0xb0
 8014cc0:	0092      	lsls	r2, r2, #2
 8014cc2:	58d3      	ldr	r3, [r2, r3]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d024      	beq.n	8014d12 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014cc8:	687a      	ldr	r2, [r7, #4]
 8014cca:	23b5      	movs	r3, #181	; 0xb5
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	58d3      	ldr	r3, [r2, r3]
 8014cd0:	687a      	ldr	r2, [r7, #4]
 8014cd2:	33b0      	adds	r3, #176	; 0xb0
 8014cd4:	009b      	lsls	r3, r3, #2
 8014cd6:	18d3      	adds	r3, r2, r3
 8014cd8:	3304      	adds	r3, #4
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	23b5      	movs	r3, #181	; 0xb5
 8014ce4:	009b      	lsls	r3, r3, #2
 8014ce6:	58d2      	ldr	r2, [r2, r3]
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	32b0      	adds	r2, #176	; 0xb0
 8014cec:	0092      	lsls	r2, r2, #2
 8014cee:	58d3      	ldr	r3, [r2, r3]
 8014cf0:	0018      	movs	r0, r3
 8014cf2:	f008 faa7 	bl	801d244 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014cf6:	687a      	ldr	r2, [r7, #4]
 8014cf8:	23b5      	movs	r3, #181	; 0xb5
 8014cfa:	009b      	lsls	r3, r3, #2
 8014cfc:	58d2      	ldr	r2, [r2, r3]
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	32b0      	adds	r2, #176	; 0xb0
 8014d02:	0092      	lsls	r2, r2, #2
 8014d04:	2100      	movs	r1, #0
 8014d06:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8014d08:	687a      	ldr	r2, [r7, #4]
 8014d0a:	23af      	movs	r3, #175	; 0xaf
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	2100      	movs	r1, #0
 8014d10:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8014d12:	2300      	movs	r3, #0
}
 8014d14:	0018      	movs	r0, r3
 8014d16:	46bd      	mov	sp, r7
 8014d18:	b002      	add	sp, #8
 8014d1a:	bd80      	pop	{r7, pc}
 8014d1c:	200000db 	.word	0x200000db
 8014d20:	200000dc 	.word	0x200000dc
 8014d24:	200000dd 	.word	0x200000dd

08014d28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b086      	sub	sp, #24
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	23b5      	movs	r3, #181	; 0xb5
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	58d2      	ldr	r2, [r2, r3]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	32b0      	adds	r2, #176	; 0xb0
 8014d3e:	0092      	lsls	r2, r2, #2
 8014d40:	58d3      	ldr	r3, [r2, r3]
 8014d42:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014d44:	230d      	movs	r3, #13
 8014d46:	18fb      	adds	r3, r7, r3
 8014d48:	2200      	movs	r2, #0
 8014d4a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8014d4c:	230a      	movs	r3, #10
 8014d4e:	18fb      	adds	r3, r7, r3
 8014d50:	2200      	movs	r2, #0
 8014d52:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d54:	2317      	movs	r3, #23
 8014d56:	18fb      	adds	r3, r7, r3
 8014d58:	2200      	movs	r2, #0
 8014d5a:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8014d5c:	693b      	ldr	r3, [r7, #16]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d101      	bne.n	8014d66 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 8014d62:	2303      	movs	r3, #3
 8014d64:	e0d1      	b.n	8014f0a <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	001a      	movs	r2, r3
 8014d6c:	2360      	movs	r3, #96	; 0x60
 8014d6e:	4013      	ands	r3, r2
 8014d70:	d05b      	beq.n	8014e2a <USBD_CDC_Setup+0x102>
 8014d72:	2b20      	cmp	r3, #32
 8014d74:	d000      	beq.n	8014d78 <USBD_CDC_Setup+0x50>
 8014d76:	e0ba      	b.n	8014eee <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	88db      	ldrh	r3, [r3, #6]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d043      	beq.n	8014e08 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	b25b      	sxtb	r3, r3
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	da22      	bge.n	8014dd0 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	23b5      	movs	r3, #181	; 0xb5
 8014d8e:	009b      	lsls	r3, r3, #2
 8014d90:	58d3      	ldr	r3, [r2, r3]
 8014d92:	687a      	ldr	r2, [r7, #4]
 8014d94:	33b0      	adds	r3, #176	; 0xb0
 8014d96:	009b      	lsls	r3, r3, #2
 8014d98:	18d3      	adds	r3, r2, r3
 8014d9a:	3304      	adds	r3, #4
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	689b      	ldr	r3, [r3, #8]
 8014da0:	683a      	ldr	r2, [r7, #0]
 8014da2:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014da4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014da6:	683a      	ldr	r2, [r7, #0]
 8014da8:	88d2      	ldrh	r2, [r2, #6]
 8014daa:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	88db      	ldrh	r3, [r3, #6]
 8014db0:	220e      	movs	r2, #14
 8014db2:	18ba      	adds	r2, r7, r2
 8014db4:	b299      	uxth	r1, r3
 8014db6:	2907      	cmp	r1, #7
 8014db8:	d900      	bls.n	8014dbc <USBD_CDC_Setup+0x94>
 8014dba:	2307      	movs	r3, #7
 8014dbc:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014dbe:	6939      	ldr	r1, [r7, #16]
 8014dc0:	230e      	movs	r3, #14
 8014dc2:	18fb      	adds	r3, r7, r3
 8014dc4:	881a      	ldrh	r2, [r3, #0]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	0018      	movs	r0, r3
 8014dca:	f001 ff3d 	bl	8016c48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014dce:	e099      	b.n	8014f04 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	7859      	ldrb	r1, [r3, #1]
 8014dd4:	693a      	ldr	r2, [r7, #16]
 8014dd6:	2380      	movs	r3, #128	; 0x80
 8014dd8:	009b      	lsls	r3, r3, #2
 8014dda:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	88db      	ldrh	r3, [r3, #6]
 8014de0:	2b3f      	cmp	r3, #63	; 0x3f
 8014de2:	d803      	bhi.n	8014dec <USBD_CDC_Setup+0xc4>
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	88db      	ldrh	r3, [r3, #6]
 8014de8:	b2da      	uxtb	r2, r3
 8014dea:	e000      	b.n	8014dee <USBD_CDC_Setup+0xc6>
 8014dec:	2240      	movs	r2, #64	; 0x40
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	4948      	ldr	r1, [pc, #288]	; (8014f14 <USBD_CDC_Setup+0x1ec>)
 8014df2:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014df4:	6939      	ldr	r1, [r7, #16]
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	4a46      	ldr	r2, [pc, #280]	; (8014f14 <USBD_CDC_Setup+0x1ec>)
 8014dfa:	5c9b      	ldrb	r3, [r3, r2]
 8014dfc:	001a      	movs	r2, r3
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	0018      	movs	r0, r3
 8014e02:	f001 ff4e 	bl	8016ca2 <USBD_CtlPrepareRx>
      break;
 8014e06:	e07d      	b.n	8014f04 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	23b5      	movs	r3, #181	; 0xb5
 8014e0c:	009b      	lsls	r3, r3, #2
 8014e0e:	58d3      	ldr	r3, [r2, r3]
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	33b0      	adds	r3, #176	; 0xb0
 8014e14:	009b      	lsls	r3, r3, #2
 8014e16:	18d3      	adds	r3, r2, r3
 8014e18:	3304      	adds	r3, #4
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	689b      	ldr	r3, [r3, #8]
 8014e1e:	683a      	ldr	r2, [r7, #0]
 8014e20:	7850      	ldrb	r0, [r2, #1]
 8014e22:	6839      	ldr	r1, [r7, #0]
 8014e24:	2200      	movs	r2, #0
 8014e26:	4798      	blx	r3
      break;
 8014e28:	e06c      	b.n	8014f04 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	785b      	ldrb	r3, [r3, #1]
 8014e2e:	2b0b      	cmp	r3, #11
 8014e30:	d03c      	beq.n	8014eac <USBD_CDC_Setup+0x184>
 8014e32:	dc4d      	bgt.n	8014ed0 <USBD_CDC_Setup+0x1a8>
 8014e34:	2b0a      	cmp	r3, #10
 8014e36:	d01f      	beq.n	8014e78 <USBD_CDC_Setup+0x150>
 8014e38:	dc4a      	bgt.n	8014ed0 <USBD_CDC_Setup+0x1a8>
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d002      	beq.n	8014e44 <USBD_CDC_Setup+0x11c>
 8014e3e:	2b01      	cmp	r3, #1
 8014e40:	d051      	beq.n	8014ee6 <USBD_CDC_Setup+0x1be>
 8014e42:	e045      	b.n	8014ed0 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e44:	687a      	ldr	r2, [r7, #4]
 8014e46:	23a7      	movs	r3, #167	; 0xa7
 8014e48:	009b      	lsls	r3, r3, #2
 8014e4a:	5cd3      	ldrb	r3, [r2, r3]
 8014e4c:	b2db      	uxtb	r3, r3
 8014e4e:	2b03      	cmp	r3, #3
 8014e50:	d107      	bne.n	8014e62 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014e52:	230a      	movs	r3, #10
 8014e54:	18f9      	adds	r1, r7, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2202      	movs	r2, #2
 8014e5a:	0018      	movs	r0, r3
 8014e5c:	f001 fef4 	bl	8016c48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014e60:	e044      	b.n	8014eec <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8014e62:	683a      	ldr	r2, [r7, #0]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	0011      	movs	r1, r2
 8014e68:	0018      	movs	r0, r3
 8014e6a:	f001 fe65 	bl	8016b38 <USBD_CtlError>
            ret = USBD_FAIL;
 8014e6e:	2317      	movs	r3, #23
 8014e70:	18fb      	adds	r3, r7, r3
 8014e72:	2203      	movs	r2, #3
 8014e74:	701a      	strb	r2, [r3, #0]
          break;
 8014e76:	e039      	b.n	8014eec <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	23a7      	movs	r3, #167	; 0xa7
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	5cd3      	ldrb	r3, [r2, r3]
 8014e80:	b2db      	uxtb	r3, r3
 8014e82:	2b03      	cmp	r3, #3
 8014e84:	d107      	bne.n	8014e96 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014e86:	230d      	movs	r3, #13
 8014e88:	18f9      	adds	r1, r7, r3
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	0018      	movs	r0, r3
 8014e90:	f001 feda 	bl	8016c48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014e94:	e02a      	b.n	8014eec <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8014e96:	683a      	ldr	r2, [r7, #0]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	0011      	movs	r1, r2
 8014e9c:	0018      	movs	r0, r3
 8014e9e:	f001 fe4b 	bl	8016b38 <USBD_CtlError>
            ret = USBD_FAIL;
 8014ea2:	2317      	movs	r3, #23
 8014ea4:	18fb      	adds	r3, r7, r3
 8014ea6:	2203      	movs	r2, #3
 8014ea8:	701a      	strb	r2, [r3, #0]
          break;
 8014eaa:	e01f      	b.n	8014eec <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	23a7      	movs	r3, #167	; 0xa7
 8014eb0:	009b      	lsls	r3, r3, #2
 8014eb2:	5cd3      	ldrb	r3, [r2, r3]
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	2b03      	cmp	r3, #3
 8014eb8:	d017      	beq.n	8014eea <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 8014eba:	683a      	ldr	r2, [r7, #0]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	0011      	movs	r1, r2
 8014ec0:	0018      	movs	r0, r3
 8014ec2:	f001 fe39 	bl	8016b38 <USBD_CtlError>
            ret = USBD_FAIL;
 8014ec6:	2317      	movs	r3, #23
 8014ec8:	18fb      	adds	r3, r7, r3
 8014eca:	2203      	movs	r2, #3
 8014ecc:	701a      	strb	r2, [r3, #0]
          }
          break;
 8014ece:	e00c      	b.n	8014eea <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014ed0:	683a      	ldr	r2, [r7, #0]
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	0011      	movs	r1, r2
 8014ed6:	0018      	movs	r0, r3
 8014ed8:	f001 fe2e 	bl	8016b38 <USBD_CtlError>
          ret = USBD_FAIL;
 8014edc:	2317      	movs	r3, #23
 8014ede:	18fb      	adds	r3, r7, r3
 8014ee0:	2203      	movs	r2, #3
 8014ee2:	701a      	strb	r2, [r3, #0]
          break;
 8014ee4:	e002      	b.n	8014eec <USBD_CDC_Setup+0x1c4>
          break;
 8014ee6:	46c0      	nop			; (mov r8, r8)
 8014ee8:	e00c      	b.n	8014f04 <USBD_CDC_Setup+0x1dc>
          break;
 8014eea:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8014eec:	e00a      	b.n	8014f04 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 8014eee:	683a      	ldr	r2, [r7, #0]
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	0011      	movs	r1, r2
 8014ef4:	0018      	movs	r0, r3
 8014ef6:	f001 fe1f 	bl	8016b38 <USBD_CtlError>
      ret = USBD_FAIL;
 8014efa:	2317      	movs	r3, #23
 8014efc:	18fb      	adds	r3, r7, r3
 8014efe:	2203      	movs	r2, #3
 8014f00:	701a      	strb	r2, [r3, #0]
      break;
 8014f02:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8014f04:	2317      	movs	r3, #23
 8014f06:	18fb      	adds	r3, r7, r3
 8014f08:	781b      	ldrb	r3, [r3, #0]
}
 8014f0a:	0018      	movs	r0, r3
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	b006      	add	sp, #24
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	46c0      	nop			; (mov r8, r8)
 8014f14:	00000201 	.word	0x00000201

08014f18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014f18:	b590      	push	{r4, r7, lr}
 8014f1a:	b085      	sub	sp, #20
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	000a      	movs	r2, r1
 8014f22:	1cfb      	adds	r3, r7, #3
 8014f24:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	23b2      	movs	r3, #178	; 0xb2
 8014f2a:	009b      	lsls	r3, r3, #2
 8014f2c:	58d3      	ldr	r3, [r2, r3]
 8014f2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f30:	687a      	ldr	r2, [r7, #4]
 8014f32:	23b5      	movs	r3, #181	; 0xb5
 8014f34:	009b      	lsls	r3, r3, #2
 8014f36:	58d2      	ldr	r2, [r2, r3]
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	32b0      	adds	r2, #176	; 0xb0
 8014f3c:	0092      	lsls	r2, r2, #2
 8014f3e:	58d3      	ldr	r3, [r2, r3]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d101      	bne.n	8014f48 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014f44:	2303      	movs	r3, #3
 8014f46:	e072      	b.n	801502e <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	23b5      	movs	r3, #181	; 0xb5
 8014f4c:	009b      	lsls	r3, r3, #2
 8014f4e:	58d2      	ldr	r2, [r2, r3]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	32b0      	adds	r2, #176	; 0xb0
 8014f54:	0092      	lsls	r2, r2, #2
 8014f56:	58d3      	ldr	r3, [r2, r3]
 8014f58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014f5a:	1cfb      	adds	r3, r7, #3
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	220f      	movs	r2, #15
 8014f60:	401a      	ands	r2, r3
 8014f62:	6879      	ldr	r1, [r7, #4]
 8014f64:	0013      	movs	r3, r2
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	189b      	adds	r3, r3, r2
 8014f6a:	009b      	lsls	r3, r3, #2
 8014f6c:	18cb      	adds	r3, r1, r3
 8014f6e:	3318      	adds	r3, #24
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d031      	beq.n	8014fda <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014f76:	1cfb      	adds	r3, r7, #3
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	220f      	movs	r2, #15
 8014f7c:	401a      	ands	r2, r3
 8014f7e:	6879      	ldr	r1, [r7, #4]
 8014f80:	0013      	movs	r3, r2
 8014f82:	009b      	lsls	r3, r3, #2
 8014f84:	189b      	adds	r3, r3, r2
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	18cb      	adds	r3, r1, r3
 8014f8a:	3318      	adds	r3, #24
 8014f8c:	6818      	ldr	r0, [r3, #0]
 8014f8e:	1cfb      	adds	r3, r7, #3
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	220f      	movs	r2, #15
 8014f94:	401a      	ands	r2, r3
 8014f96:	68f9      	ldr	r1, [r7, #12]
 8014f98:	0013      	movs	r3, r2
 8014f9a:	009b      	lsls	r3, r3, #2
 8014f9c:	189b      	adds	r3, r3, r2
 8014f9e:	00db      	lsls	r3, r3, #3
 8014fa0:	18cb      	adds	r3, r1, r3
 8014fa2:	3324      	adds	r3, #36	; 0x24
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	0019      	movs	r1, r3
 8014fa8:	f7f1 f9a8 	bl	80062fc <__aeabi_uidivmod>
 8014fac:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014fae:	d114      	bne.n	8014fda <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014fb0:	1cfb      	adds	r3, r7, #3
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	220f      	movs	r2, #15
 8014fb6:	401a      	ands	r2, r3
 8014fb8:	6879      	ldr	r1, [r7, #4]
 8014fba:	0013      	movs	r3, r2
 8014fbc:	009b      	lsls	r3, r3, #2
 8014fbe:	189b      	adds	r3, r3, r2
 8014fc0:	009b      	lsls	r3, r3, #2
 8014fc2:	18cb      	adds	r3, r1, r3
 8014fc4:	3318      	adds	r3, #24
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014fca:	1cfb      	adds	r3, r7, #3
 8014fcc:	7819      	ldrb	r1, [r3, #0]
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	f008 f87a 	bl	801d0cc <USBD_LL_Transmit>
 8014fd8:	e028      	b.n	801502c <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 8014fda:	68ba      	ldr	r2, [r7, #8]
 8014fdc:	2385      	movs	r3, #133	; 0x85
 8014fde:	009b      	lsls	r3, r3, #2
 8014fe0:	2100      	movs	r1, #0
 8014fe2:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014fe4:	687a      	ldr	r2, [r7, #4]
 8014fe6:	23b5      	movs	r3, #181	; 0xb5
 8014fe8:	009b      	lsls	r3, r3, #2
 8014fea:	58d3      	ldr	r3, [r2, r3]
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	33b0      	adds	r3, #176	; 0xb0
 8014ff0:	009b      	lsls	r3, r3, #2
 8014ff2:	18d3      	adds	r3, r2, r3
 8014ff4:	3304      	adds	r3, #4
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	691b      	ldr	r3, [r3, #16]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d016      	beq.n	801502c <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	23b5      	movs	r3, #181	; 0xb5
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	58d3      	ldr	r3, [r2, r3]
 8015006:	687a      	ldr	r2, [r7, #4]
 8015008:	33b0      	adds	r3, #176	; 0xb0
 801500a:	009b      	lsls	r3, r3, #2
 801500c:	18d3      	adds	r3, r2, r3
 801500e:	3304      	adds	r3, #4
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	691c      	ldr	r4, [r3, #16]
 8015014:	68ba      	ldr	r2, [r7, #8]
 8015016:	2382      	movs	r3, #130	; 0x82
 8015018:	009b      	lsls	r3, r3, #2
 801501a:	58d0      	ldr	r0, [r2, r3]
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	2284      	movs	r2, #132	; 0x84
 8015020:	0092      	lsls	r2, r2, #2
 8015022:	1899      	adds	r1, r3, r2
 8015024:	1cfb      	adds	r3, r7, #3
 8015026:	781b      	ldrb	r3, [r3, #0]
 8015028:	001a      	movs	r2, r3
 801502a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 801502c:	2300      	movs	r3, #0
}
 801502e:	0018      	movs	r0, r3
 8015030:	46bd      	mov	sp, r7
 8015032:	b005      	add	sp, #20
 8015034:	bd90      	pop	{r4, r7, pc}

08015036 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015036:	b580      	push	{r7, lr}
 8015038:	b084      	sub	sp, #16
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]
 801503e:	000a      	movs	r2, r1
 8015040:	1cfb      	adds	r3, r7, #3
 8015042:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	23b5      	movs	r3, #181	; 0xb5
 8015048:	009b      	lsls	r3, r3, #2
 801504a:	58d2      	ldr	r2, [r2, r3]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	32b0      	adds	r2, #176	; 0xb0
 8015050:	0092      	lsls	r2, r2, #2
 8015052:	58d3      	ldr	r3, [r2, r3]
 8015054:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015056:	687a      	ldr	r2, [r7, #4]
 8015058:	23b5      	movs	r3, #181	; 0xb5
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	58d2      	ldr	r2, [r2, r3]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	32b0      	adds	r2, #176	; 0xb0
 8015062:	0092      	lsls	r2, r2, #2
 8015064:	58d3      	ldr	r3, [r2, r3]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d101      	bne.n	801506e <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 801506a:	2303      	movs	r3, #3
 801506c:	e022      	b.n	80150b4 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801506e:	1cfb      	adds	r3, r7, #3
 8015070:	781a      	ldrb	r2, [r3, #0]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	0011      	movs	r1, r2
 8015076:	0018      	movs	r0, r3
 8015078:	f008 f888 	bl	801d18c <USBD_LL_GetRxDataSize>
 801507c:	0001      	movs	r1, r0
 801507e:	68fa      	ldr	r2, [r7, #12]
 8015080:	2383      	movs	r3, #131	; 0x83
 8015082:	009b      	lsls	r3, r3, #2
 8015084:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	23b5      	movs	r3, #181	; 0xb5
 801508a:	009b      	lsls	r3, r3, #2
 801508c:	58d3      	ldr	r3, [r2, r3]
 801508e:	687a      	ldr	r2, [r7, #4]
 8015090:	33b0      	adds	r3, #176	; 0xb0
 8015092:	009b      	lsls	r3, r3, #2
 8015094:	18d3      	adds	r3, r2, r3
 8015096:	3304      	adds	r3, #4
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	68da      	ldr	r2, [r3, #12]
 801509c:	68f9      	ldr	r1, [r7, #12]
 801509e:	2381      	movs	r3, #129	; 0x81
 80150a0:	009b      	lsls	r3, r3, #2
 80150a2:	58c8      	ldr	r0, [r1, r3]
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2183      	movs	r1, #131	; 0x83
 80150a8:	0089      	lsls	r1, r1, #2
 80150aa:	468c      	mov	ip, r1
 80150ac:	4463      	add	r3, ip
 80150ae:	0019      	movs	r1, r3
 80150b0:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 80150b2:	2300      	movs	r3, #0
}
 80150b4:	0018      	movs	r0, r3
 80150b6:	46bd      	mov	sp, r7
 80150b8:	b004      	add	sp, #16
 80150ba:	bd80      	pop	{r7, pc}

080150bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80150bc:	b590      	push	{r4, r7, lr}
 80150be:	b085      	sub	sp, #20
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	23b5      	movs	r3, #181	; 0xb5
 80150c8:	009b      	lsls	r3, r3, #2
 80150ca:	58d2      	ldr	r2, [r2, r3]
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	32b0      	adds	r2, #176	; 0xb0
 80150d0:	0092      	lsls	r2, r2, #2
 80150d2:	58d3      	ldr	r3, [r2, r3]
 80150d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d101      	bne.n	80150e0 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80150dc:	2303      	movs	r3, #3
 80150de:	e02c      	b.n	801513a <USBD_CDC_EP0_RxReady+0x7e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80150e0:	687a      	ldr	r2, [r7, #4]
 80150e2:	23b5      	movs	r3, #181	; 0xb5
 80150e4:	009b      	lsls	r3, r3, #2
 80150e6:	58d3      	ldr	r3, [r2, r3]
 80150e8:	687a      	ldr	r2, [r7, #4]
 80150ea:	33b0      	adds	r3, #176	; 0xb0
 80150ec:	009b      	lsls	r3, r3, #2
 80150ee:	18d3      	adds	r3, r2, r3
 80150f0:	3304      	adds	r3, #4
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d01f      	beq.n	8015138 <USBD_CDC_EP0_RxReady+0x7c>
 80150f8:	68fa      	ldr	r2, [r7, #12]
 80150fa:	2380      	movs	r3, #128	; 0x80
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	5cd3      	ldrb	r3, [r2, r3]
 8015100:	2bff      	cmp	r3, #255	; 0xff
 8015102:	d019      	beq.n	8015138 <USBD_CDC_EP0_RxReady+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015104:	687a      	ldr	r2, [r7, #4]
 8015106:	23b5      	movs	r3, #181	; 0xb5
 8015108:	009b      	lsls	r3, r3, #2
 801510a:	58d3      	ldr	r3, [r2, r3]
 801510c:	687a      	ldr	r2, [r7, #4]
 801510e:	33b0      	adds	r3, #176	; 0xb0
 8015110:	009b      	lsls	r3, r3, #2
 8015112:	18d3      	adds	r3, r2, r3
 8015114:	3304      	adds	r3, #4
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	689b      	ldr	r3, [r3, #8]
 801511a:	68f9      	ldr	r1, [r7, #12]
 801511c:	2280      	movs	r2, #128	; 0x80
 801511e:	0092      	lsls	r2, r2, #2
 8015120:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 8015122:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015124:	68fa      	ldr	r2, [r7, #12]
 8015126:	4c07      	ldr	r4, [pc, #28]	; (8015144 <USBD_CDC_EP0_RxReady+0x88>)
 8015128:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801512a:	b292      	uxth	r2, r2
 801512c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801512e:	68fa      	ldr	r2, [r7, #12]
 8015130:	2380      	movs	r3, #128	; 0x80
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	21ff      	movs	r1, #255	; 0xff
 8015136:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8015138:	2300      	movs	r3, #0
}
 801513a:	0018      	movs	r0, r3
 801513c:	46bd      	mov	sp, r7
 801513e:	b005      	add	sp, #20
 8015140:	bd90      	pop	{r4, r7, pc}
 8015142:	46c0      	nop			; (mov r8, r8)
 8015144:	00000201 	.word	0x00000201

08015148 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b086      	sub	sp, #24
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015150:	4b20      	ldr	r3, [pc, #128]	; (80151d4 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8015152:	2182      	movs	r1, #130	; 0x82
 8015154:	0018      	movs	r0, r3
 8015156:	f000 fd4e 	bl	8015bf6 <USBD_GetEpDesc>
 801515a:	0003      	movs	r3, r0
 801515c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801515e:	4b1d      	ldr	r3, [pc, #116]	; (80151d4 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8015160:	2101      	movs	r1, #1
 8015162:	0018      	movs	r0, r3
 8015164:	f000 fd47 	bl	8015bf6 <USBD_GetEpDesc>
 8015168:	0003      	movs	r3, r0
 801516a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801516c:	4b19      	ldr	r3, [pc, #100]	; (80151d4 <USBD_CDC_GetFSCfgDesc+0x8c>)
 801516e:	2181      	movs	r1, #129	; 0x81
 8015170:	0018      	movs	r0, r3
 8015172:	f000 fd40 	bl	8015bf6 <USBD_GetEpDesc>
 8015176:	0003      	movs	r3, r0
 8015178:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d002      	beq.n	8015186 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	2210      	movs	r2, #16
 8015184:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d00b      	beq.n	80151a4 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	791a      	ldrb	r2, [r3, #4]
 8015190:	2100      	movs	r1, #0
 8015192:	400a      	ands	r2, r1
 8015194:	1c11      	adds	r1, r2, #0
 8015196:	2240      	movs	r2, #64	; 0x40
 8015198:	430a      	orrs	r2, r1
 801519a:	711a      	strb	r2, [r3, #4]
 801519c:	795a      	ldrb	r2, [r3, #5]
 801519e:	2100      	movs	r1, #0
 80151a0:	400a      	ands	r2, r1
 80151a2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d00b      	beq.n	80151c2 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	791a      	ldrb	r2, [r3, #4]
 80151ae:	2100      	movs	r1, #0
 80151b0:	400a      	ands	r2, r1
 80151b2:	1c11      	adds	r1, r2, #0
 80151b4:	2240      	movs	r2, #64	; 0x40
 80151b6:	430a      	orrs	r2, r1
 80151b8:	711a      	strb	r2, [r3, #4]
 80151ba:	795a      	ldrb	r2, [r3, #5]
 80151bc:	2100      	movs	r1, #0
 80151be:	400a      	ands	r2, r1
 80151c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	2243      	movs	r2, #67	; 0x43
 80151c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80151c8:	4b02      	ldr	r3, [pc, #8]	; (80151d4 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 80151ca:	0018      	movs	r0, r3
 80151cc:	46bd      	mov	sp, r7
 80151ce:	b006      	add	sp, #24
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	46c0      	nop			; (mov r8, r8)
 80151d4:	20000098 	.word	0x20000098

080151d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b086      	sub	sp, #24
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80151e0:	4b20      	ldr	r3, [pc, #128]	; (8015264 <USBD_CDC_GetHSCfgDesc+0x8c>)
 80151e2:	2182      	movs	r1, #130	; 0x82
 80151e4:	0018      	movs	r0, r3
 80151e6:	f000 fd06 	bl	8015bf6 <USBD_GetEpDesc>
 80151ea:	0003      	movs	r3, r0
 80151ec:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80151ee:	4b1d      	ldr	r3, [pc, #116]	; (8015264 <USBD_CDC_GetHSCfgDesc+0x8c>)
 80151f0:	2101      	movs	r1, #1
 80151f2:	0018      	movs	r0, r3
 80151f4:	f000 fcff 	bl	8015bf6 <USBD_GetEpDesc>
 80151f8:	0003      	movs	r3, r0
 80151fa:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80151fc:	4b19      	ldr	r3, [pc, #100]	; (8015264 <USBD_CDC_GetHSCfgDesc+0x8c>)
 80151fe:	2181      	movs	r1, #129	; 0x81
 8015200:	0018      	movs	r0, r3
 8015202:	f000 fcf8 	bl	8015bf6 <USBD_GetEpDesc>
 8015206:	0003      	movs	r3, r0
 8015208:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d002      	beq.n	8015216 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	2210      	movs	r2, #16
 8015214:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d00b      	beq.n	8015234 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	791a      	ldrb	r2, [r3, #4]
 8015220:	2100      	movs	r1, #0
 8015222:	400a      	ands	r2, r1
 8015224:	711a      	strb	r2, [r3, #4]
 8015226:	795a      	ldrb	r2, [r3, #5]
 8015228:	2100      	movs	r1, #0
 801522a:	400a      	ands	r2, r1
 801522c:	1c11      	adds	r1, r2, #0
 801522e:	2202      	movs	r2, #2
 8015230:	430a      	orrs	r2, r1
 8015232:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d00b      	beq.n	8015252 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	791a      	ldrb	r2, [r3, #4]
 801523e:	2100      	movs	r1, #0
 8015240:	400a      	ands	r2, r1
 8015242:	711a      	strb	r2, [r3, #4]
 8015244:	795a      	ldrb	r2, [r3, #5]
 8015246:	2100      	movs	r1, #0
 8015248:	400a      	ands	r2, r1
 801524a:	1c11      	adds	r1, r2, #0
 801524c:	2202      	movs	r2, #2
 801524e:	430a      	orrs	r2, r1
 8015250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2243      	movs	r2, #67	; 0x43
 8015256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015258:	4b02      	ldr	r3, [pc, #8]	; (8015264 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 801525a:	0018      	movs	r0, r3
 801525c:	46bd      	mov	sp, r7
 801525e:	b006      	add	sp, #24
 8015260:	bd80      	pop	{r7, pc}
 8015262:	46c0      	nop			; (mov r8, r8)
 8015264:	20000098 	.word	0x20000098

08015268 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b086      	sub	sp, #24
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015270:	4b20      	ldr	r3, [pc, #128]	; (80152f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8015272:	2182      	movs	r1, #130	; 0x82
 8015274:	0018      	movs	r0, r3
 8015276:	f000 fcbe 	bl	8015bf6 <USBD_GetEpDesc>
 801527a:	0003      	movs	r3, r0
 801527c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801527e:	4b1d      	ldr	r3, [pc, #116]	; (80152f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8015280:	2101      	movs	r1, #1
 8015282:	0018      	movs	r0, r3
 8015284:	f000 fcb7 	bl	8015bf6 <USBD_GetEpDesc>
 8015288:	0003      	movs	r3, r0
 801528a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801528c:	4b19      	ldr	r3, [pc, #100]	; (80152f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 801528e:	2181      	movs	r1, #129	; 0x81
 8015290:	0018      	movs	r0, r3
 8015292:	f000 fcb0 	bl	8015bf6 <USBD_GetEpDesc>
 8015296:	0003      	movs	r3, r0
 8015298:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d002      	beq.n	80152a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	2210      	movs	r2, #16
 80152a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80152a6:	693b      	ldr	r3, [r7, #16]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d00b      	beq.n	80152c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	791a      	ldrb	r2, [r3, #4]
 80152b0:	2100      	movs	r1, #0
 80152b2:	400a      	ands	r2, r1
 80152b4:	1c11      	adds	r1, r2, #0
 80152b6:	2240      	movs	r2, #64	; 0x40
 80152b8:	430a      	orrs	r2, r1
 80152ba:	711a      	strb	r2, [r3, #4]
 80152bc:	795a      	ldrb	r2, [r3, #5]
 80152be:	2100      	movs	r1, #0
 80152c0:	400a      	ands	r2, r1
 80152c2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d00b      	beq.n	80152e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	791a      	ldrb	r2, [r3, #4]
 80152ce:	2100      	movs	r1, #0
 80152d0:	400a      	ands	r2, r1
 80152d2:	1c11      	adds	r1, r2, #0
 80152d4:	2240      	movs	r2, #64	; 0x40
 80152d6:	430a      	orrs	r2, r1
 80152d8:	711a      	strb	r2, [r3, #4]
 80152da:	795a      	ldrb	r2, [r3, #5]
 80152dc:	2100      	movs	r1, #0
 80152de:	400a      	ands	r2, r1
 80152e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	2243      	movs	r2, #67	; 0x43
 80152e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80152e8:	4b02      	ldr	r3, [pc, #8]	; (80152f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 80152ea:	0018      	movs	r0, r3
 80152ec:	46bd      	mov	sp, r7
 80152ee:	b006      	add	sp, #24
 80152f0:	bd80      	pop	{r7, pc}
 80152f2:	46c0      	nop			; (mov r8, r8)
 80152f4:	20000098 	.word	0x20000098

080152f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	220a      	movs	r2, #10
 8015304:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015306:	4b02      	ldr	r3, [pc, #8]	; (8015310 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8015308:	0018      	movs	r0, r3
 801530a:	46bd      	mov	sp, r7
 801530c:	b002      	add	sp, #8
 801530e:	bd80      	pop	{r7, pc}
 8015310:	20000054 	.word	0x20000054

08015314 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d101      	bne.n	8015328 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015324:	2303      	movs	r3, #3
 8015326:	e00b      	b.n	8015340 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015328:	687a      	ldr	r2, [r7, #4]
 801532a:	23b5      	movs	r3, #181	; 0xb5
 801532c:	009b      	lsls	r3, r3, #2
 801532e:	58d3      	ldr	r3, [r2, r3]
 8015330:	687a      	ldr	r2, [r7, #4]
 8015332:	33b0      	adds	r3, #176	; 0xb0
 8015334:	009b      	lsls	r3, r3, #2
 8015336:	18d3      	adds	r3, r2, r3
 8015338:	3304      	adds	r3, #4
 801533a:	683a      	ldr	r2, [r7, #0]
 801533c:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 801533e:	2300      	movs	r3, #0
}
 8015340:	0018      	movs	r0, r3
 8015342:	46bd      	mov	sp, r7
 8015344:	b002      	add	sp, #8
 8015346:	bd80      	pop	{r7, pc}

08015348 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b086      	sub	sp, #24
 801534c:	af00      	add	r7, sp, #0
 801534e:	60f8      	str	r0, [r7, #12]
 8015350:	60b9      	str	r1, [r7, #8]
 8015352:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015354:	68fa      	ldr	r2, [r7, #12]
 8015356:	23b5      	movs	r3, #181	; 0xb5
 8015358:	009b      	lsls	r3, r3, #2
 801535a:	58d2      	ldr	r2, [r2, r3]
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	32b0      	adds	r2, #176	; 0xb0
 8015360:	0092      	lsls	r2, r2, #2
 8015362:	58d3      	ldr	r3, [r2, r3]
 8015364:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015366:	697b      	ldr	r3, [r7, #20]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d101      	bne.n	8015370 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801536c:	2303      	movs	r3, #3
 801536e:	e00a      	b.n	8015386 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 8015370:	697a      	ldr	r2, [r7, #20]
 8015372:	2382      	movs	r3, #130	; 0x82
 8015374:	009b      	lsls	r3, r3, #2
 8015376:	68b9      	ldr	r1, [r7, #8]
 8015378:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801537a:	697a      	ldr	r2, [r7, #20]
 801537c:	2384      	movs	r3, #132	; 0x84
 801537e:	009b      	lsls	r3, r3, #2
 8015380:	6879      	ldr	r1, [r7, #4]
 8015382:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8015384:	2300      	movs	r3, #0
}
 8015386:	0018      	movs	r0, r3
 8015388:	46bd      	mov	sp, r7
 801538a:	b006      	add	sp, #24
 801538c:	bd80      	pop	{r7, pc}

0801538e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801538e:	b580      	push	{r7, lr}
 8015390:	b084      	sub	sp, #16
 8015392:	af00      	add	r7, sp, #0
 8015394:	6078      	str	r0, [r7, #4]
 8015396:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015398:	687a      	ldr	r2, [r7, #4]
 801539a:	23b5      	movs	r3, #181	; 0xb5
 801539c:	009b      	lsls	r3, r3, #2
 801539e:	58d2      	ldr	r2, [r2, r3]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	32b0      	adds	r2, #176	; 0xb0
 80153a4:	0092      	lsls	r2, r2, #2
 80153a6:	58d3      	ldr	r3, [r2, r3]
 80153a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d101      	bne.n	80153b4 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80153b0:	2303      	movs	r3, #3
 80153b2:	e005      	b.n	80153c0 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	2381      	movs	r3, #129	; 0x81
 80153b8:	009b      	lsls	r3, r3, #2
 80153ba:	6839      	ldr	r1, [r7, #0]
 80153bc:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80153be:	2300      	movs	r3, #0
}
 80153c0:	0018      	movs	r0, r3
 80153c2:	46bd      	mov	sp, r7
 80153c4:	b004      	add	sp, #16
 80153c6:	bd80      	pop	{r7, pc}

080153c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b084      	sub	sp, #16
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80153d0:	687a      	ldr	r2, [r7, #4]
 80153d2:	23b5      	movs	r3, #181	; 0xb5
 80153d4:	009b      	lsls	r3, r3, #2
 80153d6:	58d2      	ldr	r2, [r2, r3]
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	32b0      	adds	r2, #176	; 0xb0
 80153dc:	0092      	lsls	r2, r2, #2
 80153de:	58d3      	ldr	r3, [r2, r3]
 80153e0:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	23b5      	movs	r3, #181	; 0xb5
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	58d2      	ldr	r2, [r2, r3]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	32b0      	adds	r2, #176	; 0xb0
 80153ee:	0092      	lsls	r2, r2, #2
 80153f0:	58d3      	ldr	r3, [r2, r3]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d101      	bne.n	80153fa <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80153f6:	2303      	movs	r3, #3
 80153f8:	e01a      	b.n	8015430 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	7c1b      	ldrb	r3, [r3, #16]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d10b      	bne.n	801541a <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015402:	4b0d      	ldr	r3, [pc, #52]	; (8015438 <USBD_CDC_ReceivePacket+0x70>)
 8015404:	7819      	ldrb	r1, [r3, #0]
 8015406:	68fa      	ldr	r2, [r7, #12]
 8015408:	2381      	movs	r3, #129	; 0x81
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	58d2      	ldr	r2, [r2, r3]
 801540e:	2380      	movs	r3, #128	; 0x80
 8015410:	009b      	lsls	r3, r3, #2
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	f007 fe8a 	bl	801d12c <USBD_LL_PrepareReceive>
 8015418:	e009      	b.n	801542e <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801541a:	4b07      	ldr	r3, [pc, #28]	; (8015438 <USBD_CDC_ReceivePacket+0x70>)
 801541c:	7819      	ldrb	r1, [r3, #0]
 801541e:	68fa      	ldr	r2, [r7, #12]
 8015420:	2381      	movs	r3, #129	; 0x81
 8015422:	009b      	lsls	r3, r3, #2
 8015424:	58d2      	ldr	r2, [r2, r3]
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	2340      	movs	r3, #64	; 0x40
 801542a:	f007 fe7f 	bl	801d12c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801542e:	2300      	movs	r3, #0
}
 8015430:	0018      	movs	r0, r3
 8015432:	46bd      	mov	sp, r7
 8015434:	b004      	add	sp, #16
 8015436:	bd80      	pop	{r7, pc}
 8015438:	200000dc 	.word	0x200000dc

0801543c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801543c:	b5b0      	push	{r4, r5, r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	1dfb      	adds	r3, r7, #7
 8015448:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d101      	bne.n	8015454 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015450:	2303      	movs	r3, #3
 8015452:	e029      	b.n	80154a8 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015454:	68fa      	ldr	r2, [r7, #12]
 8015456:	23ae      	movs	r3, #174	; 0xae
 8015458:	009b      	lsls	r3, r3, #2
 801545a:	2100      	movs	r1, #0
 801545c:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	23b1      	movs	r3, #177	; 0xb1
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	2100      	movs	r1, #0
 8015466:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015468:	68fa      	ldr	r2, [r7, #12]
 801546a:	23b4      	movs	r3, #180	; 0xb4
 801546c:	009b      	lsls	r3, r3, #2
 801546e:	2100      	movs	r1, #0
 8015470:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d004      	beq.n	8015482 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8015478:	68fa      	ldr	r2, [r7, #12]
 801547a:	23ad      	movs	r3, #173	; 0xad
 801547c:	009b      	lsls	r3, r3, #2
 801547e:	68b9      	ldr	r1, [r7, #8]
 8015480:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015482:	68fa      	ldr	r2, [r7, #12]
 8015484:	23a7      	movs	r3, #167	; 0xa7
 8015486:	009b      	lsls	r3, r3, #2
 8015488:	2101      	movs	r1, #1
 801548a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	1dfa      	adds	r2, r7, #7
 8015490:	7812      	ldrb	r2, [r2, #0]
 8015492:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015494:	2517      	movs	r5, #23
 8015496:	197c      	adds	r4, r7, r5
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	0018      	movs	r0, r3
 801549c:	f007 fc6c 	bl	801cd78 <USBD_LL_Init>
 80154a0:	0003      	movs	r3, r0
 80154a2:	7023      	strb	r3, [r4, #0]

  return ret;
 80154a4:	197b      	adds	r3, r7, r5
 80154a6:	781b      	ldrb	r3, [r3, #0]
}
 80154a8:	0018      	movs	r0, r3
 80154aa:	46bd      	mov	sp, r7
 80154ac:	b006      	add	sp, #24
 80154ae:	bdb0      	pop	{r4, r5, r7, pc}

080154b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b084      	sub	sp, #16
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80154ba:	230e      	movs	r3, #14
 80154bc:	18fb      	adds	r3, r7, r3
 80154be:	2200      	movs	r2, #0
 80154c0:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d101      	bne.n	80154cc <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80154c8:	2303      	movs	r3, #3
 80154ca:	e02b      	b.n	8015524 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80154cc:	687a      	ldr	r2, [r7, #4]
 80154ce:	23ae      	movs	r3, #174	; 0xae
 80154d0:	009b      	lsls	r3, r3, #2
 80154d2:	6839      	ldr	r1, [r7, #0]
 80154d4:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80154d6:	687a      	ldr	r2, [r7, #4]
 80154d8:	23b5      	movs	r3, #181	; 0xb5
 80154da:	009b      	lsls	r3, r3, #2
 80154dc:	58d2      	ldr	r2, [r2, r3]
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	32ae      	adds	r2, #174	; 0xae
 80154e2:	0092      	lsls	r2, r2, #2
 80154e4:	58d3      	ldr	r3, [r2, r3]
 80154e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d011      	beq.n	8015510 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80154ec:	687a      	ldr	r2, [r7, #4]
 80154ee:	23b5      	movs	r3, #181	; 0xb5
 80154f0:	009b      	lsls	r3, r3, #2
 80154f2:	58d2      	ldr	r2, [r2, r3]
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	32ae      	adds	r2, #174	; 0xae
 80154f8:	0092      	lsls	r2, r2, #2
 80154fa:	58d3      	ldr	r3, [r2, r3]
 80154fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154fe:	220e      	movs	r2, #14
 8015500:	18ba      	adds	r2, r7, r2
 8015502:	0010      	movs	r0, r2
 8015504:	4798      	blx	r3
 8015506:	0001      	movs	r1, r0
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	23b4      	movs	r3, #180	; 0xb4
 801550c:	009b      	lsls	r3, r3, #2
 801550e:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015510:	687a      	ldr	r2, [r7, #4]
 8015512:	23b6      	movs	r3, #182	; 0xb6
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	58d3      	ldr	r3, [r2, r3]
 8015518:	1c59      	adds	r1, r3, #1
 801551a:	687a      	ldr	r2, [r7, #4]
 801551c:	23b6      	movs	r3, #182	; 0xb6
 801551e:	009b      	lsls	r3, r3, #2
 8015520:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8015522:	2300      	movs	r3, #0
}
 8015524:	0018      	movs	r0, r3
 8015526:	46bd      	mov	sp, r7
 8015528:	b004      	add	sp, #16
 801552a:	bd80      	pop	{r7, pc}

0801552c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	0018      	movs	r0, r3
 8015538:	f007 fc90 	bl	801ce5c <USBD_LL_Start>
 801553c:	0003      	movs	r3, r0
}
 801553e:	0018      	movs	r0, r3
 8015540:	46bd      	mov	sp, r7
 8015542:	b002      	add	sp, #8
 8015544:	bd80      	pop	{r7, pc}

08015546 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015546:	b580      	push	{r7, lr}
 8015548:	b082      	sub	sp, #8
 801554a:	af00      	add	r7, sp, #0
 801554c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801554e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015550:	0018      	movs	r0, r3
 8015552:	46bd      	mov	sp, r7
 8015554:	b002      	add	sp, #8
 8015556:	bd80      	pop	{r7, pc}

08015558 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015558:	b590      	push	{r4, r7, lr}
 801555a:	b085      	sub	sp, #20
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	000a      	movs	r2, r1
 8015562:	1cfb      	adds	r3, r7, #3
 8015564:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015566:	210f      	movs	r1, #15
 8015568:	187b      	adds	r3, r7, r1
 801556a:	2200      	movs	r2, #0
 801556c:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801556e:	687a      	ldr	r2, [r7, #4]
 8015570:	23ae      	movs	r3, #174	; 0xae
 8015572:	009b      	lsls	r3, r3, #2
 8015574:	58d3      	ldr	r3, [r2, r3]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d00c      	beq.n	8015594 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801557a:	687a      	ldr	r2, [r7, #4]
 801557c:	23ae      	movs	r3, #174	; 0xae
 801557e:	009b      	lsls	r3, r3, #2
 8015580:	58d3      	ldr	r3, [r2, r3]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	187c      	adds	r4, r7, r1
 8015586:	1cfa      	adds	r2, r7, #3
 8015588:	7811      	ldrb	r1, [r2, #0]
 801558a:	687a      	ldr	r2, [r7, #4]
 801558c:	0010      	movs	r0, r2
 801558e:	4798      	blx	r3
 8015590:	0003      	movs	r3, r0
 8015592:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015594:	230f      	movs	r3, #15
 8015596:	18fb      	adds	r3, r7, r3
 8015598:	781b      	ldrb	r3, [r3, #0]
}
 801559a:	0018      	movs	r0, r3
 801559c:	46bd      	mov	sp, r7
 801559e:	b005      	add	sp, #20
 80155a0:	bd90      	pop	{r4, r7, pc}

080155a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80155a2:	b590      	push	{r4, r7, lr}
 80155a4:	b085      	sub	sp, #20
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	6078      	str	r0, [r7, #4]
 80155aa:	000a      	movs	r2, r1
 80155ac:	1cfb      	adds	r3, r7, #3
 80155ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80155b0:	240f      	movs	r4, #15
 80155b2:	193b      	adds	r3, r7, r4
 80155b4:	2200      	movs	r2, #0
 80155b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80155b8:	687a      	ldr	r2, [r7, #4]
 80155ba:	23ae      	movs	r3, #174	; 0xae
 80155bc:	009b      	lsls	r3, r3, #2
 80155be:	58d3      	ldr	r3, [r2, r3]
 80155c0:	685b      	ldr	r3, [r3, #4]
 80155c2:	1cfa      	adds	r2, r7, #3
 80155c4:	7811      	ldrb	r1, [r2, #0]
 80155c6:	687a      	ldr	r2, [r7, #4]
 80155c8:	0010      	movs	r0, r2
 80155ca:	4798      	blx	r3
 80155cc:	1e03      	subs	r3, r0, #0
 80155ce:	d002      	beq.n	80155d6 <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 80155d0:	193b      	adds	r3, r7, r4
 80155d2:	2203      	movs	r2, #3
 80155d4:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80155d6:	230f      	movs	r3, #15
 80155d8:	18fb      	adds	r3, r7, r3
 80155da:	781b      	ldrb	r3, [r3, #0]
}
 80155dc:	0018      	movs	r0, r3
 80155de:	46bd      	mov	sp, r7
 80155e0:	b005      	add	sp, #20
 80155e2:	bd90      	pop	{r4, r7, pc}

080155e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80155e4:	b590      	push	{r4, r7, lr}
 80155e6:	b085      	sub	sp, #20
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	4a30      	ldr	r2, [pc, #192]	; (80156b4 <USBD_LL_SetupStage+0xd0>)
 80155f2:	4694      	mov	ip, r2
 80155f4:	4463      	add	r3, ip
 80155f6:	683a      	ldr	r2, [r7, #0]
 80155f8:	0011      	movs	r1, r2
 80155fa:	0018      	movs	r0, r3
 80155fc:	f001 fa5f 	bl	8016abe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015600:	687a      	ldr	r2, [r7, #4]
 8015602:	23a5      	movs	r3, #165	; 0xa5
 8015604:	009b      	lsls	r3, r3, #2
 8015606:	2101      	movs	r1, #1
 8015608:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801560a:	687a      	ldr	r2, [r7, #4]
 801560c:	23ac      	movs	r3, #172	; 0xac
 801560e:	009b      	lsls	r3, r3, #2
 8015610:	5ad3      	ldrh	r3, [r2, r3]
 8015612:	0019      	movs	r1, r3
 8015614:	687a      	ldr	r2, [r7, #4]
 8015616:	23a6      	movs	r3, #166	; 0xa6
 8015618:	009b      	lsls	r3, r3, #2
 801561a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	4a25      	ldr	r2, [pc, #148]	; (80156b4 <USBD_LL_SetupStage+0xd0>)
 8015620:	5c9b      	ldrb	r3, [r3, r2]
 8015622:	001a      	movs	r2, r3
 8015624:	231f      	movs	r3, #31
 8015626:	4013      	ands	r3, r2
 8015628:	2b02      	cmp	r3, #2
 801562a:	d01f      	beq.n	801566c <USBD_LL_SetupStage+0x88>
 801562c:	d82b      	bhi.n	8015686 <USBD_LL_SetupStage+0xa2>
 801562e:	2b00      	cmp	r3, #0
 8015630:	d002      	beq.n	8015638 <USBD_LL_SetupStage+0x54>
 8015632:	2b01      	cmp	r3, #1
 8015634:	d00d      	beq.n	8015652 <USBD_LL_SetupStage+0x6e>
 8015636:	e026      	b.n	8015686 <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	4a1e      	ldr	r2, [pc, #120]	; (80156b4 <USBD_LL_SetupStage+0xd0>)
 801563c:	189a      	adds	r2, r3, r2
 801563e:	230f      	movs	r3, #15
 8015640:	18fc      	adds	r4, r7, r3
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	0011      	movs	r1, r2
 8015646:	0018      	movs	r0, r3
 8015648:	f000 fb5e 	bl	8015d08 <USBD_StdDevReq>
 801564c:	0003      	movs	r3, r0
 801564e:	7023      	strb	r3, [r4, #0]
      break;
 8015650:	e029      	b.n	80156a6 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	4a17      	ldr	r2, [pc, #92]	; (80156b4 <USBD_LL_SetupStage+0xd0>)
 8015656:	189a      	adds	r2, r3, r2
 8015658:	230f      	movs	r3, #15
 801565a:	18fc      	adds	r4, r7, r3
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	0011      	movs	r1, r2
 8015660:	0018      	movs	r0, r3
 8015662:	f000 fbcf 	bl	8015e04 <USBD_StdItfReq>
 8015666:	0003      	movs	r3, r0
 8015668:	7023      	strb	r3, [r4, #0]
      break;
 801566a:	e01c      	b.n	80156a6 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	4a11      	ldr	r2, [pc, #68]	; (80156b4 <USBD_LL_SetupStage+0xd0>)
 8015670:	189a      	adds	r2, r3, r2
 8015672:	230f      	movs	r3, #15
 8015674:	18fc      	adds	r4, r7, r3
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	0011      	movs	r1, r2
 801567a:	0018      	movs	r0, r3
 801567c:	f000 fc4f 	bl	8015f1e <USBD_StdEPReq>
 8015680:	0003      	movs	r3, r0
 8015682:	7023      	strb	r3, [r4, #0]
      break;
 8015684:	e00f      	b.n	80156a6 <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	4a0a      	ldr	r2, [pc, #40]	; (80156b4 <USBD_LL_SetupStage+0xd0>)
 801568a:	5c9b      	ldrb	r3, [r3, r2]
 801568c:	227f      	movs	r2, #127	; 0x7f
 801568e:	4393      	bics	r3, r2
 8015690:	b2da      	uxtb	r2, r3
 8015692:	230f      	movs	r3, #15
 8015694:	18fc      	adds	r4, r7, r3
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	0011      	movs	r1, r2
 801569a:	0018      	movs	r0, r3
 801569c:	f007 fc65 	bl	801cf6a <USBD_LL_StallEP>
 80156a0:	0003      	movs	r3, r0
 80156a2:	7023      	strb	r3, [r4, #0]
      break;
 80156a4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80156a6:	230f      	movs	r3, #15
 80156a8:	18fb      	adds	r3, r7, r3
 80156aa:	781b      	ldrb	r3, [r3, #0]
}
 80156ac:	0018      	movs	r0, r3
 80156ae:	46bd      	mov	sp, r7
 80156b0:	b005      	add	sp, #20
 80156b2:	bd90      	pop	{r4, r7, pc}
 80156b4:	000002aa 	.word	0x000002aa

080156b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80156b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156ba:	b087      	sub	sp, #28
 80156bc:	af00      	add	r7, sp, #0
 80156be:	60f8      	str	r0, [r7, #12]
 80156c0:	607a      	str	r2, [r7, #4]
 80156c2:	200b      	movs	r0, #11
 80156c4:	183b      	adds	r3, r7, r0
 80156c6:	1c0a      	adds	r2, r1, #0
 80156c8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80156ca:	2317      	movs	r3, #23
 80156cc:	18fb      	adds	r3, r7, r3
 80156ce:	2200      	movs	r2, #0
 80156d0:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 80156d2:	183b      	adds	r3, r7, r0
 80156d4:	781b      	ldrb	r3, [r3, #0]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d000      	beq.n	80156dc <USBD_LL_DataOutStage+0x24>
 80156da:	e084      	b.n	80157e6 <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	3355      	adds	r3, #85	; 0x55
 80156e0:	33ff      	adds	r3, #255	; 0xff
 80156e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80156e4:	68fa      	ldr	r2, [r7, #12]
 80156e6:	23a5      	movs	r3, #165	; 0xa5
 80156e8:	009b      	lsls	r3, r3, #2
 80156ea:	58d3      	ldr	r3, [r2, r3]
 80156ec:	2b03      	cmp	r3, #3
 80156ee:	d000      	beq.n	80156f2 <USBD_LL_DataOutStage+0x3a>
 80156f0:	e0c0      	b.n	8015874 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	689a      	ldr	r2, [r3, #8]
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	68db      	ldr	r3, [r3, #12]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d914      	bls.n	8015728 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 80156fe:	693b      	ldr	r3, [r7, #16]
 8015700:	689a      	ldr	r2, [r3, #8]
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	68db      	ldr	r3, [r3, #12]
 8015706:	1ad2      	subs	r2, r2, r3
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	68d9      	ldr	r1, [r3, #12]
 8015710:	693b      	ldr	r3, [r7, #16]
 8015712:	689a      	ldr	r2, [r3, #8]
 8015714:	000b      	movs	r3, r1
 8015716:	4293      	cmp	r3, r2
 8015718:	d900      	bls.n	801571c <USBD_LL_DataOutStage+0x64>
 801571a:	0013      	movs	r3, r2
 801571c:	6879      	ldr	r1, [r7, #4]
 801571e:	68f8      	ldr	r0, [r7, #12]
 8015720:	001a      	movs	r2, r3
 8015722:	f001 fade 	bl	8016ce2 <USBD_CtlContinueRx>
 8015726:	e0a5      	b.n	8015874 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	4a55      	ldr	r2, [pc, #340]	; (8015880 <USBD_LL_DataOutStage+0x1c8>)
 801572c:	5c9b      	ldrb	r3, [r3, r2]
 801572e:	001a      	movs	r2, r3
 8015730:	231f      	movs	r3, #31
 8015732:	4013      	ands	r3, r2
 8015734:	2b02      	cmp	r3, #2
 8015736:	d018      	beq.n	801576a <USBD_LL_DataOutStage+0xb2>
 8015738:	d825      	bhi.n	8015786 <USBD_LL_DataOutStage+0xce>
 801573a:	2b00      	cmp	r3, #0
 801573c:	d002      	beq.n	8015744 <USBD_LL_DataOutStage+0x8c>
 801573e:	2b01      	cmp	r3, #1
 8015740:	d005      	beq.n	801574e <USBD_LL_DataOutStage+0x96>
 8015742:	e020      	b.n	8015786 <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015744:	2316      	movs	r3, #22
 8015746:	18fb      	adds	r3, r7, r3
 8015748:	2200      	movs	r2, #0
 801574a:	701a      	strb	r2, [r3, #0]
            break;
 801574c:	e020      	b.n	8015790 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	4a4c      	ldr	r2, [pc, #304]	; (8015884 <USBD_LL_DataOutStage+0x1cc>)
 8015752:	5a9b      	ldrh	r3, [r3, r2]
 8015754:	b2da      	uxtb	r2, r3
 8015756:	2316      	movs	r3, #22
 8015758:	18fc      	adds	r4, r7, r3
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	0011      	movs	r1, r2
 801575e:	0018      	movs	r0, r3
 8015760:	f000 fa31 	bl	8015bc6 <USBD_CoreFindIF>
 8015764:	0003      	movs	r3, r0
 8015766:	7023      	strb	r3, [r4, #0]
            break;
 8015768:	e012      	b.n	8015790 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	4a45      	ldr	r2, [pc, #276]	; (8015884 <USBD_LL_DataOutStage+0x1cc>)
 801576e:	5a9b      	ldrh	r3, [r3, r2]
 8015770:	b2da      	uxtb	r2, r3
 8015772:	2316      	movs	r3, #22
 8015774:	18fc      	adds	r4, r7, r3
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	0011      	movs	r1, r2
 801577a:	0018      	movs	r0, r3
 801577c:	f000 fa2f 	bl	8015bde <USBD_CoreFindEP>
 8015780:	0003      	movs	r3, r0
 8015782:	7023      	strb	r3, [r4, #0]
            break;
 8015784:	e004      	b.n	8015790 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015786:	2316      	movs	r3, #22
 8015788:	18fb      	adds	r3, r7, r3
 801578a:	2200      	movs	r2, #0
 801578c:	701a      	strb	r2, [r3, #0]
            break;
 801578e:	46c0      	nop			; (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015790:	2116      	movs	r1, #22
 8015792:	187b      	adds	r3, r7, r1
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d120      	bne.n	80157dc <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801579a:	68fa      	ldr	r2, [r7, #12]
 801579c:	23a7      	movs	r3, #167	; 0xa7
 801579e:	009b      	lsls	r3, r3, #2
 80157a0:	5cd3      	ldrb	r3, [r2, r3]
 80157a2:	b2db      	uxtb	r3, r3
 80157a4:	2b03      	cmp	r3, #3
 80157a6:	d119      	bne.n	80157dc <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80157a8:	187b      	adds	r3, r7, r1
 80157aa:	781a      	ldrb	r2, [r3, #0]
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	32ae      	adds	r2, #174	; 0xae
 80157b0:	0092      	lsls	r2, r2, #2
 80157b2:	58d3      	ldr	r3, [r2, r3]
 80157b4:	691b      	ldr	r3, [r3, #16]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d010      	beq.n	80157dc <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 80157ba:	0008      	movs	r0, r1
 80157bc:	187b      	adds	r3, r7, r1
 80157be:	7819      	ldrb	r1, [r3, #0]
 80157c0:	68fa      	ldr	r2, [r7, #12]
 80157c2:	23b5      	movs	r3, #181	; 0xb5
 80157c4:	009b      	lsls	r3, r3, #2
 80157c6:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80157c8:	183b      	adds	r3, r7, r0
 80157ca:	781a      	ldrb	r2, [r3, #0]
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	32ae      	adds	r2, #174	; 0xae
 80157d0:	0092      	lsls	r2, r2, #2
 80157d2:	58d3      	ldr	r3, [r2, r3]
 80157d4:	691b      	ldr	r3, [r3, #16]
 80157d6:	68fa      	ldr	r2, [r7, #12]
 80157d8:	0010      	movs	r0, r2
 80157da:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	0018      	movs	r0, r3
 80157e0:	f001 fa90 	bl	8016d04 <USBD_CtlSendStatus>
 80157e4:	e046      	b.n	8015874 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80157e6:	260b      	movs	r6, #11
 80157e8:	19bb      	adds	r3, r7, r6
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	227f      	movs	r2, #127	; 0x7f
 80157ee:	4013      	ands	r3, r2
 80157f0:	b2da      	uxtb	r2, r3
 80157f2:	2516      	movs	r5, #22
 80157f4:	197c      	adds	r4, r7, r5
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	0011      	movs	r1, r2
 80157fa:	0018      	movs	r0, r3
 80157fc:	f000 f9ef 	bl	8015bde <USBD_CoreFindEP>
 8015800:	0003      	movs	r3, r0
 8015802:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015804:	0029      	movs	r1, r5
 8015806:	187b      	adds	r3, r7, r1
 8015808:	781b      	ldrb	r3, [r3, #0]
 801580a:	2bff      	cmp	r3, #255	; 0xff
 801580c:	d032      	beq.n	8015874 <USBD_LL_DataOutStage+0x1bc>
 801580e:	187b      	adds	r3, r7, r1
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d12e      	bne.n	8015874 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015816:	68fa      	ldr	r2, [r7, #12]
 8015818:	23a7      	movs	r3, #167	; 0xa7
 801581a:	009b      	lsls	r3, r3, #2
 801581c:	5cd3      	ldrb	r3, [r2, r3]
 801581e:	b2db      	uxtb	r3, r3
 8015820:	2b03      	cmp	r3, #3
 8015822:	d11f      	bne.n	8015864 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015824:	187b      	adds	r3, r7, r1
 8015826:	781a      	ldrb	r2, [r3, #0]
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	32ae      	adds	r2, #174	; 0xae
 801582c:	0092      	lsls	r2, r2, #2
 801582e:	58d3      	ldr	r3, [r2, r3]
 8015830:	699b      	ldr	r3, [r3, #24]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d016      	beq.n	8015864 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 8015836:	0008      	movs	r0, r1
 8015838:	187b      	adds	r3, r7, r1
 801583a:	7819      	ldrb	r1, [r3, #0]
 801583c:	68fa      	ldr	r2, [r7, #12]
 801583e:	23b5      	movs	r3, #181	; 0xb5
 8015840:	009b      	lsls	r3, r3, #2
 8015842:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015844:	183b      	adds	r3, r7, r0
 8015846:	781a      	ldrb	r2, [r3, #0]
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	32ae      	adds	r2, #174	; 0xae
 801584c:	0092      	lsls	r2, r2, #2
 801584e:	58d3      	ldr	r3, [r2, r3]
 8015850:	699b      	ldr	r3, [r3, #24]
 8015852:	2217      	movs	r2, #23
 8015854:	18bc      	adds	r4, r7, r2
 8015856:	19ba      	adds	r2, r7, r6
 8015858:	7811      	ldrb	r1, [r2, #0]
 801585a:	68fa      	ldr	r2, [r7, #12]
 801585c:	0010      	movs	r0, r2
 801585e:	4798      	blx	r3
 8015860:	0003      	movs	r3, r0
 8015862:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 8015864:	2217      	movs	r2, #23
 8015866:	18bb      	adds	r3, r7, r2
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d002      	beq.n	8015874 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 801586e:	18bb      	adds	r3, r7, r2
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	e000      	b.n	8015876 <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 8015874:	2300      	movs	r3, #0
}
 8015876:	0018      	movs	r0, r3
 8015878:	46bd      	mov	sp, r7
 801587a:	b007      	add	sp, #28
 801587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801587e:	46c0      	nop			; (mov r8, r8)
 8015880:	000002aa 	.word	0x000002aa
 8015884:	000002ae 	.word	0x000002ae

08015888 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801588a:	b087      	sub	sp, #28
 801588c:	af00      	add	r7, sp, #0
 801588e:	60f8      	str	r0, [r7, #12]
 8015890:	607a      	str	r2, [r7, #4]
 8015892:	200b      	movs	r0, #11
 8015894:	183b      	adds	r3, r7, r0
 8015896:	1c0a      	adds	r2, r1, #0
 8015898:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801589a:	183b      	adds	r3, r7, r0
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d000      	beq.n	80158a4 <USBD_LL_DataInStage+0x1c>
 80158a2:	e07d      	b.n	80159a0 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	3314      	adds	r3, #20
 80158a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80158aa:	68fa      	ldr	r2, [r7, #12]
 80158ac:	23a5      	movs	r3, #165	; 0xa5
 80158ae:	009b      	lsls	r3, r3, #2
 80158b0:	58d3      	ldr	r3, [r2, r3]
 80158b2:	2b02      	cmp	r3, #2
 80158b4:	d164      	bne.n	8015980 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	689a      	ldr	r2, [r3, #8]
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d914      	bls.n	80158ec <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	689a      	ldr	r2, [r3, #8]
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	1ad2      	subs	r2, r2, r3
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80158d0:	693b      	ldr	r3, [r7, #16]
 80158d2:	689a      	ldr	r2, [r3, #8]
 80158d4:	6879      	ldr	r1, [r7, #4]
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	0018      	movs	r0, r3
 80158da:	f001 f9d1 	bl	8016c80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	2300      	movs	r3, #0
 80158e2:	2200      	movs	r2, #0
 80158e4:	2100      	movs	r1, #0
 80158e6:	f007 fc21 	bl	801d12c <USBD_LL_PrepareReceive>
 80158ea:	e049      	b.n	8015980 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	68da      	ldr	r2, [r3, #12]
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	689b      	ldr	r3, [r3, #8]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d11f      	bne.n	8015938 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	685a      	ldr	r2, [r3, #4]
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015900:	429a      	cmp	r2, r3
 8015902:	d319      	bcc.n	8015938 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	685a      	ldr	r2, [r3, #4]
 8015908:	68f9      	ldr	r1, [r7, #12]
 801590a:	23a6      	movs	r3, #166	; 0xa6
 801590c:	009b      	lsls	r3, r3, #2
 801590e:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8015910:	429a      	cmp	r2, r3
 8015912:	d211      	bcs.n	8015938 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	2200      	movs	r2, #0
 8015918:	2100      	movs	r1, #0
 801591a:	0018      	movs	r0, r3
 801591c:	f001 f9b0 	bl	8016c80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015920:	68fa      	ldr	r2, [r7, #12]
 8015922:	23a6      	movs	r3, #166	; 0xa6
 8015924:	009b      	lsls	r3, r3, #2
 8015926:	2100      	movs	r1, #0
 8015928:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801592a:	68f8      	ldr	r0, [r7, #12]
 801592c:	2300      	movs	r3, #0
 801592e:	2200      	movs	r2, #0
 8015930:	2100      	movs	r1, #0
 8015932:	f007 fbfb 	bl	801d12c <USBD_LL_PrepareReceive>
 8015936:	e023      	b.n	8015980 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015938:	68fa      	ldr	r2, [r7, #12]
 801593a:	23a7      	movs	r3, #167	; 0xa7
 801593c:	009b      	lsls	r3, r3, #2
 801593e:	5cd3      	ldrb	r3, [r2, r3]
 8015940:	b2db      	uxtb	r3, r3
 8015942:	2b03      	cmp	r3, #3
 8015944:	d113      	bne.n	801596e <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015946:	68fa      	ldr	r2, [r7, #12]
 8015948:	23ae      	movs	r3, #174	; 0xae
 801594a:	009b      	lsls	r3, r3, #2
 801594c:	58d3      	ldr	r3, [r2, r3]
 801594e:	68db      	ldr	r3, [r3, #12]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d00c      	beq.n	801596e <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 8015954:	68fa      	ldr	r2, [r7, #12]
 8015956:	23b5      	movs	r3, #181	; 0xb5
 8015958:	009b      	lsls	r3, r3, #2
 801595a:	2100      	movs	r1, #0
 801595c:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 801595e:	68fa      	ldr	r2, [r7, #12]
 8015960:	23ae      	movs	r3, #174	; 0xae
 8015962:	009b      	lsls	r3, r3, #2
 8015964:	58d3      	ldr	r3, [r2, r3]
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	68fa      	ldr	r2, [r7, #12]
 801596a:	0010      	movs	r0, r2
 801596c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2180      	movs	r1, #128	; 0x80
 8015972:	0018      	movs	r0, r3
 8015974:	f007 faf9 	bl	801cf6a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	0018      	movs	r0, r3
 801597c:	f001 f9d6 	bl	8016d2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015980:	68fa      	ldr	r2, [r7, #12]
 8015982:	23a8      	movs	r3, #168	; 0xa8
 8015984:	009b      	lsls	r3, r3, #2
 8015986:	5cd3      	ldrb	r3, [r2, r3]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d050      	beq.n	8015a2e <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	0018      	movs	r0, r3
 8015990:	f7ff fdd9 	bl	8015546 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015994:	68fa      	ldr	r2, [r7, #12]
 8015996:	23a8      	movs	r3, #168	; 0xa8
 8015998:	009b      	lsls	r3, r3, #2
 801599a:	2100      	movs	r1, #0
 801599c:	54d1      	strb	r1, [r2, r3]
 801599e:	e046      	b.n	8015a2e <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80159a0:	260b      	movs	r6, #11
 80159a2:	19bb      	adds	r3, r7, r6
 80159a4:	781b      	ldrb	r3, [r3, #0]
 80159a6:	2280      	movs	r2, #128	; 0x80
 80159a8:	4252      	negs	r2, r2
 80159aa:	4313      	orrs	r3, r2
 80159ac:	b2da      	uxtb	r2, r3
 80159ae:	2517      	movs	r5, #23
 80159b0:	197c      	adds	r4, r7, r5
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	0011      	movs	r1, r2
 80159b6:	0018      	movs	r0, r3
 80159b8:	f000 f911 	bl	8015bde <USBD_CoreFindEP>
 80159bc:	0003      	movs	r3, r0
 80159be:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80159c0:	0029      	movs	r1, r5
 80159c2:	187b      	adds	r3, r7, r1
 80159c4:	781b      	ldrb	r3, [r3, #0]
 80159c6:	2bff      	cmp	r3, #255	; 0xff
 80159c8:	d031      	beq.n	8015a2e <USBD_LL_DataInStage+0x1a6>
 80159ca:	187b      	adds	r3, r7, r1
 80159cc:	781b      	ldrb	r3, [r3, #0]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d12d      	bne.n	8015a2e <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159d2:	68fa      	ldr	r2, [r7, #12]
 80159d4:	23a7      	movs	r3, #167	; 0xa7
 80159d6:	009b      	lsls	r3, r3, #2
 80159d8:	5cd3      	ldrb	r3, [r2, r3]
 80159da:	b2db      	uxtb	r3, r3
 80159dc:	2b03      	cmp	r3, #3
 80159de:	d126      	bne.n	8015a2e <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80159e0:	187b      	adds	r3, r7, r1
 80159e2:	781a      	ldrb	r2, [r3, #0]
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	32ae      	adds	r2, #174	; 0xae
 80159e8:	0092      	lsls	r2, r2, #2
 80159ea:	58d3      	ldr	r3, [r2, r3]
 80159ec:	695b      	ldr	r3, [r3, #20]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d01d      	beq.n	8015a2e <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 80159f2:	0008      	movs	r0, r1
 80159f4:	187b      	adds	r3, r7, r1
 80159f6:	7819      	ldrb	r1, [r3, #0]
 80159f8:	68fa      	ldr	r2, [r7, #12]
 80159fa:	23b5      	movs	r3, #181	; 0xb5
 80159fc:	009b      	lsls	r3, r3, #2
 80159fe:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015a00:	183b      	adds	r3, r7, r0
 8015a02:	781a      	ldrb	r2, [r3, #0]
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	32ae      	adds	r2, #174	; 0xae
 8015a08:	0092      	lsls	r2, r2, #2
 8015a0a:	58d3      	ldr	r3, [r2, r3]
 8015a0c:	695b      	ldr	r3, [r3, #20]
 8015a0e:	2516      	movs	r5, #22
 8015a10:	197c      	adds	r4, r7, r5
 8015a12:	19ba      	adds	r2, r7, r6
 8015a14:	7811      	ldrb	r1, [r2, #0]
 8015a16:	68fa      	ldr	r2, [r7, #12]
 8015a18:	0010      	movs	r0, r2
 8015a1a:	4798      	blx	r3
 8015a1c:	0003      	movs	r3, r0
 8015a1e:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 8015a20:	197b      	adds	r3, r7, r5
 8015a22:	781b      	ldrb	r3, [r3, #0]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d002      	beq.n	8015a2e <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 8015a28:	197b      	adds	r3, r7, r5
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	e000      	b.n	8015a30 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 8015a2e:	2300      	movs	r3, #0
}
 8015a30:	0018      	movs	r0, r3
 8015a32:	46bd      	mov	sp, r7
 8015a34:	b007      	add	sp, #28
 8015a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a38 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015a38:	b590      	push	{r4, r7, lr}
 8015a3a:	b085      	sub	sp, #20
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a40:	240f      	movs	r4, #15
 8015a42:	193b      	adds	r3, r7, r4
 8015a44:	2200      	movs	r2, #0
 8015a46:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a48:	687a      	ldr	r2, [r7, #4]
 8015a4a:	23a7      	movs	r3, #167	; 0xa7
 8015a4c:	009b      	lsls	r3, r3, #2
 8015a4e:	2101      	movs	r1, #1
 8015a50:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8015a52:	687a      	ldr	r2, [r7, #4]
 8015a54:	23a5      	movs	r3, #165	; 0xa5
 8015a56:	009b      	lsls	r3, r3, #2
 8015a58:	2100      	movs	r1, #0
 8015a5a:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	23a9      	movs	r3, #169	; 0xa9
 8015a66:	009b      	lsls	r3, r3, #2
 8015a68:	2100      	movs	r1, #0
 8015a6a:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 8015a6c:	687a      	ldr	r2, [r7, #4]
 8015a6e:	23a8      	movs	r3, #168	; 0xa8
 8015a70:	009b      	lsls	r3, r3, #2
 8015a72:	2100      	movs	r1, #0
 8015a74:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015a76:	687a      	ldr	r2, [r7, #4]
 8015a78:	23ae      	movs	r3, #174	; 0xae
 8015a7a:	009b      	lsls	r3, r3, #2
 8015a7c:	58d3      	ldr	r3, [r2, r3]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d016      	beq.n	8015ab0 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015a82:	687a      	ldr	r2, [r7, #4]
 8015a84:	23ae      	movs	r3, #174	; 0xae
 8015a86:	009b      	lsls	r3, r3, #2
 8015a88:	58d3      	ldr	r3, [r2, r3]
 8015a8a:	685b      	ldr	r3, [r3, #4]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d00f      	beq.n	8015ab0 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	23ae      	movs	r3, #174	; 0xae
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	58d3      	ldr	r3, [r2, r3]
 8015a98:	685a      	ldr	r2, [r3, #4]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	685b      	ldr	r3, [r3, #4]
 8015a9e:	b2d9      	uxtb	r1, r3
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	0018      	movs	r0, r3
 8015aa4:	4790      	blx	r2
 8015aa6:	1e03      	subs	r3, r0, #0
 8015aa8:	d002      	beq.n	8015ab0 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 8015aaa:	193b      	adds	r3, r7, r4
 8015aac:	2203      	movs	r2, #3
 8015aae:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	2340      	movs	r3, #64	; 0x40
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	2100      	movs	r1, #0
 8015ab8:	f007 f9f5 	bl	801cea6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015abc:	687a      	ldr	r2, [r7, #4]
 8015abe:	23b2      	movs	r3, #178	; 0xb2
 8015ac0:	005b      	lsls	r3, r3, #1
 8015ac2:	2101      	movs	r1, #1
 8015ac4:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ac6:	687a      	ldr	r2, [r7, #4]
 8015ac8:	23b0      	movs	r3, #176	; 0xb0
 8015aca:	005b      	lsls	r3, r3, #1
 8015acc:	2140      	movs	r1, #64	; 0x40
 8015ace:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	2340      	movs	r3, #64	; 0x40
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	2180      	movs	r1, #128	; 0x80
 8015ad8:	f007 f9e5 	bl	801cea6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	2201      	movs	r2, #1
 8015ae0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2240      	movs	r2, #64	; 0x40
 8015ae6:	621a      	str	r2, [r3, #32]

  return ret;
 8015ae8:	230f      	movs	r3, #15
 8015aea:	18fb      	adds	r3, r7, r3
 8015aec:	781b      	ldrb	r3, [r3, #0]
}
 8015aee:	0018      	movs	r0, r3
 8015af0:	46bd      	mov	sp, r7
 8015af2:	b005      	add	sp, #20
 8015af4:	bd90      	pop	{r4, r7, pc}

08015af6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015af6:	b580      	push	{r7, lr}
 8015af8:	b082      	sub	sp, #8
 8015afa:	af00      	add	r7, sp, #0
 8015afc:	6078      	str	r0, [r7, #4]
 8015afe:	000a      	movs	r2, r1
 8015b00:	1cfb      	adds	r3, r7, #3
 8015b02:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	1cfa      	adds	r2, r7, #3
 8015b08:	7812      	ldrb	r2, [r2, #0]
 8015b0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015b0c:	2300      	movs	r3, #0
}
 8015b0e:	0018      	movs	r0, r3
 8015b10:	46bd      	mov	sp, r7
 8015b12:	b002      	add	sp, #8
 8015b14:	bd80      	pop	{r7, pc}
	...

08015b18 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b082      	sub	sp, #8
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015b20:	687a      	ldr	r2, [r7, #4]
 8015b22:	23a7      	movs	r3, #167	; 0xa7
 8015b24:	009b      	lsls	r3, r3, #2
 8015b26:	5cd3      	ldrb	r3, [r2, r3]
 8015b28:	b2d9      	uxtb	r1, r3
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	4a05      	ldr	r2, [pc, #20]	; (8015b44 <USBD_LL_Suspend+0x2c>)
 8015b2e:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015b30:	687a      	ldr	r2, [r7, #4]
 8015b32:	23a7      	movs	r3, #167	; 0xa7
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	2104      	movs	r1, #4
 8015b38:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8015b3a:	2300      	movs	r3, #0
}
 8015b3c:	0018      	movs	r0, r3
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	b002      	add	sp, #8
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	0000029d 	.word	0x0000029d

08015b48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015b50:	687a      	ldr	r2, [r7, #4]
 8015b52:	23a7      	movs	r3, #167	; 0xa7
 8015b54:	009b      	lsls	r3, r3, #2
 8015b56:	5cd3      	ldrb	r3, [r2, r3]
 8015b58:	b2db      	uxtb	r3, r3
 8015b5a:	2b04      	cmp	r3, #4
 8015b5c:	d107      	bne.n	8015b6e <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	4a05      	ldr	r2, [pc, #20]	; (8015b78 <USBD_LL_Resume+0x30>)
 8015b62:	5c9b      	ldrb	r3, [r3, r2]
 8015b64:	b2d9      	uxtb	r1, r3
 8015b66:	687a      	ldr	r2, [r7, #4]
 8015b68:	23a7      	movs	r3, #167	; 0xa7
 8015b6a:	009b      	lsls	r3, r3, #2
 8015b6c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8015b6e:	2300      	movs	r3, #0
}
 8015b70:	0018      	movs	r0, r3
 8015b72:	46bd      	mov	sp, r7
 8015b74:	b002      	add	sp, #8
 8015b76:	bd80      	pop	{r7, pc}
 8015b78:	0000029d 	.word	0x0000029d

08015b7c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b84:	687a      	ldr	r2, [r7, #4]
 8015b86:	23a7      	movs	r3, #167	; 0xa7
 8015b88:	009b      	lsls	r3, r3, #2
 8015b8a:	5cd3      	ldrb	r3, [r2, r3]
 8015b8c:	b2db      	uxtb	r3, r3
 8015b8e:	2b03      	cmp	r3, #3
 8015b90:	d114      	bne.n	8015bbc <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015b92:	687a      	ldr	r2, [r7, #4]
 8015b94:	23ae      	movs	r3, #174	; 0xae
 8015b96:	009b      	lsls	r3, r3, #2
 8015b98:	58d3      	ldr	r3, [r2, r3]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d00e      	beq.n	8015bbc <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015b9e:	687a      	ldr	r2, [r7, #4]
 8015ba0:	23ae      	movs	r3, #174	; 0xae
 8015ba2:	009b      	lsls	r3, r3, #2
 8015ba4:	58d3      	ldr	r3, [r2, r3]
 8015ba6:	69db      	ldr	r3, [r3, #28]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d007      	beq.n	8015bbc <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015bac:	687a      	ldr	r2, [r7, #4]
 8015bae:	23ae      	movs	r3, #174	; 0xae
 8015bb0:	009b      	lsls	r3, r3, #2
 8015bb2:	58d3      	ldr	r3, [r2, r3]
 8015bb4:	69db      	ldr	r3, [r3, #28]
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	0010      	movs	r0, r2
 8015bba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015bbc:	2300      	movs	r3, #0
}
 8015bbe:	0018      	movs	r0, r3
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	b002      	add	sp, #8
 8015bc4:	bd80      	pop	{r7, pc}

08015bc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015bc6:	b580      	push	{r7, lr}
 8015bc8:	b082      	sub	sp, #8
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	6078      	str	r0, [r7, #4]
 8015bce:	000a      	movs	r2, r1
 8015bd0:	1cfb      	adds	r3, r7, #3
 8015bd2:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015bd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015bd6:	0018      	movs	r0, r3
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	b002      	add	sp, #8
 8015bdc:	bd80      	pop	{r7, pc}

08015bde <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015bde:	b580      	push	{r7, lr}
 8015be0:	b082      	sub	sp, #8
 8015be2:	af00      	add	r7, sp, #0
 8015be4:	6078      	str	r0, [r7, #4]
 8015be6:	000a      	movs	r2, r1
 8015be8:	1cfb      	adds	r3, r7, #3
 8015bea:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015bec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015bee:	0018      	movs	r0, r3
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	b002      	add	sp, #8
 8015bf4:	bd80      	pop	{r7, pc}

08015bf6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015bf6:	b580      	push	{r7, lr}
 8015bf8:	b086      	sub	sp, #24
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
 8015bfe:	000a      	movs	r2, r1
 8015c00:	1cfb      	adds	r3, r7, #3
 8015c02:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	789a      	ldrb	r2, [r3, #2]
 8015c14:	78db      	ldrb	r3, [r3, #3]
 8015c16:	021b      	lsls	r3, r3, #8
 8015c18:	4313      	orrs	r3, r2
 8015c1a:	b29a      	uxth	r2, r3
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d92a      	bls.n	8015c7c <USBD_GetEpDesc+0x86>
  {
    ptr = desc->bLength;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	b29a      	uxth	r2, r3
 8015c2c:	230a      	movs	r3, #10
 8015c2e:	18fb      	adds	r3, r7, r3
 8015c30:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 8015c32:	e016      	b.n	8015c62 <USBD_GetEpDesc+0x6c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015c34:	230a      	movs	r3, #10
 8015c36:	18fa      	adds	r2, r7, r3
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	0011      	movs	r1, r2
 8015c3c:	0018      	movs	r0, r3
 8015c3e:	f000 f822 	bl	8015c86 <USBD_GetNextDesc>
 8015c42:	0003      	movs	r3, r0
 8015c44:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	785b      	ldrb	r3, [r3, #1]
 8015c4a:	2b05      	cmp	r3, #5
 8015c4c:	d109      	bne.n	8015c62 <USBD_GetEpDesc+0x6c>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	789b      	ldrb	r3, [r3, #2]
 8015c56:	1cfa      	adds	r2, r7, #3
 8015c58:	7812      	ldrb	r2, [r2, #0]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d00d      	beq.n	8015c7a <USBD_GetEpDesc+0x84>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	789a      	ldrb	r2, [r3, #2]
 8015c66:	78db      	ldrb	r3, [r3, #3]
 8015c68:	021b      	lsls	r3, r3, #8
 8015c6a:	4313      	orrs	r3, r2
 8015c6c:	b29a      	uxth	r2, r3
 8015c6e:	230a      	movs	r3, #10
 8015c70:	18fb      	adds	r3, r7, r3
 8015c72:	881b      	ldrh	r3, [r3, #0]
 8015c74:	429a      	cmp	r2, r3
 8015c76:	d8dd      	bhi.n	8015c34 <USBD_GetEpDesc+0x3e>
 8015c78:	e000      	b.n	8015c7c <USBD_GetEpDesc+0x86>
          break;
 8015c7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015c7c:	693b      	ldr	r3, [r7, #16]
}
 8015c7e:	0018      	movs	r0, r3
 8015c80:	46bd      	mov	sp, r7
 8015c82:	b006      	add	sp, #24
 8015c84:	bd80      	pop	{r7, pc}

08015c86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015c86:	b580      	push	{r7, lr}
 8015c88:	b084      	sub	sp, #16
 8015c8a:	af00      	add	r7, sp, #0
 8015c8c:	6078      	str	r0, [r7, #4]
 8015c8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	881a      	ldrh	r2, [r3, #0]
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	781b      	ldrb	r3, [r3, #0]
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	18d3      	adds	r3, r2, r3
 8015ca0:	b29a      	uxth	r2, r3
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	001a      	movs	r2, r3
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	189b      	adds	r3, r3, r2
 8015cb0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015cb2:	68fb      	ldr	r3, [r7, #12]
}
 8015cb4:	0018      	movs	r0, r3
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	b004      	add	sp, #16
 8015cba:	bd80      	pop	{r7, pc}

08015cbc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b086      	sub	sp, #24
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	781a      	ldrb	r2, [r3, #0]
 8015ccc:	2112      	movs	r1, #18
 8015cce:	187b      	adds	r3, r7, r1
 8015cd0:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015cd8:	697b      	ldr	r3, [r7, #20]
 8015cda:	781a      	ldrb	r2, [r3, #0]
 8015cdc:	2010      	movs	r0, #16
 8015cde:	183b      	adds	r3, r7, r0
 8015ce0:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015ce2:	183b      	adds	r3, r7, r0
 8015ce4:	881b      	ldrh	r3, [r3, #0]
 8015ce6:	021b      	lsls	r3, r3, #8
 8015ce8:	b21a      	sxth	r2, r3
 8015cea:	187b      	adds	r3, r7, r1
 8015cec:	2100      	movs	r1, #0
 8015cee:	5e5b      	ldrsh	r3, [r3, r1]
 8015cf0:	4313      	orrs	r3, r2
 8015cf2:	b21a      	sxth	r2, r3
 8015cf4:	210e      	movs	r1, #14
 8015cf6:	187b      	adds	r3, r7, r1
 8015cf8:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 8015cfa:	187b      	adds	r3, r7, r1
 8015cfc:	881b      	ldrh	r3, [r3, #0]
}
 8015cfe:	0018      	movs	r0, r3
 8015d00:	46bd      	mov	sp, r7
 8015d02:	b006      	add	sp, #24
 8015d04:	bd80      	pop	{r7, pc}
	...

08015d08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d08:	b590      	push	{r4, r7, lr}
 8015d0a:	b085      	sub	sp, #20
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
 8015d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d12:	230f      	movs	r3, #15
 8015d14:	18fb      	adds	r3, r7, r3
 8015d16:	2200      	movs	r2, #0
 8015d18:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	001a      	movs	r2, r3
 8015d20:	2360      	movs	r3, #96	; 0x60
 8015d22:	4013      	ands	r3, r2
 8015d24:	2b40      	cmp	r3, #64	; 0x40
 8015d26:	d004      	beq.n	8015d32 <USBD_StdDevReq+0x2a>
 8015d28:	d85b      	bhi.n	8015de2 <USBD_StdDevReq+0xda>
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d013      	beq.n	8015d56 <USBD_StdDevReq+0x4e>
 8015d2e:	2b20      	cmp	r3, #32
 8015d30:	d157      	bne.n	8015de2 <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015d32:	687a      	ldr	r2, [r7, #4]
 8015d34:	23b5      	movs	r3, #181	; 0xb5
 8015d36:	009b      	lsls	r3, r3, #2
 8015d38:	58d2      	ldr	r2, [r2, r3]
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	32ae      	adds	r2, #174	; 0xae
 8015d3e:	0092      	lsls	r2, r2, #2
 8015d40:	58d3      	ldr	r3, [r2, r3]
 8015d42:	689b      	ldr	r3, [r3, #8]
 8015d44:	220f      	movs	r2, #15
 8015d46:	18bc      	adds	r4, r7, r2
 8015d48:	6839      	ldr	r1, [r7, #0]
 8015d4a:	687a      	ldr	r2, [r7, #4]
 8015d4c:	0010      	movs	r0, r2
 8015d4e:	4798      	blx	r3
 8015d50:	0003      	movs	r3, r0
 8015d52:	7023      	strb	r3, [r4, #0]
      break;
 8015d54:	e04c      	b.n	8015df0 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	785b      	ldrb	r3, [r3, #1]
 8015d5a:	2b09      	cmp	r3, #9
 8015d5c:	d839      	bhi.n	8015dd2 <USBD_StdDevReq+0xca>
 8015d5e:	009a      	lsls	r2, r3, #2
 8015d60:	4b27      	ldr	r3, [pc, #156]	; (8015e00 <USBD_StdDevReq+0xf8>)
 8015d62:	18d3      	adds	r3, r2, r3
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015d68:	683a      	ldr	r2, [r7, #0]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	0011      	movs	r1, r2
 8015d6e:	0018      	movs	r0, r3
 8015d70:	f000 fada 	bl	8016328 <USBD_GetDescriptor>
          break;
 8015d74:	e034      	b.n	8015de0 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015d76:	683a      	ldr	r2, [r7, #0]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	0011      	movs	r1, r2
 8015d7c:	0018      	movs	r0, r3
 8015d7e:	f000 fcad 	bl	80166dc <USBD_SetAddress>
          break;
 8015d82:	e02d      	b.n	8015de0 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015d84:	230f      	movs	r3, #15
 8015d86:	18fc      	adds	r4, r7, r3
 8015d88:	683a      	ldr	r2, [r7, #0]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	0011      	movs	r1, r2
 8015d8e:	0018      	movs	r0, r3
 8015d90:	f000 fcfa 	bl	8016788 <USBD_SetConfig>
 8015d94:	0003      	movs	r3, r0
 8015d96:	7023      	strb	r3, [r4, #0]
          break;
 8015d98:	e022      	b.n	8015de0 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015d9a:	683a      	ldr	r2, [r7, #0]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	0011      	movs	r1, r2
 8015da0:	0018      	movs	r0, r3
 8015da2:	f000 fdbf 	bl	8016924 <USBD_GetConfig>
          break;
 8015da6:	e01b      	b.n	8015de0 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015da8:	683a      	ldr	r2, [r7, #0]
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	0011      	movs	r1, r2
 8015dae:	0018      	movs	r0, r3
 8015db0:	f000 fdf4 	bl	801699c <USBD_GetStatus>
          break;
 8015db4:	e014      	b.n	8015de0 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015db6:	683a      	ldr	r2, [r7, #0]
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	0011      	movs	r1, r2
 8015dbc:	0018      	movs	r0, r3
 8015dbe:	f000 fe28 	bl	8016a12 <USBD_SetFeature>
          break;
 8015dc2:	e00d      	b.n	8015de0 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015dc4:	683a      	ldr	r2, [r7, #0]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	0011      	movs	r1, r2
 8015dca:	0018      	movs	r0, r3
 8015dcc:	f000 fe50 	bl	8016a70 <USBD_ClrFeature>
          break;
 8015dd0:	e006      	b.n	8015de0 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 8015dd2:	683a      	ldr	r2, [r7, #0]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	0011      	movs	r1, r2
 8015dd8:	0018      	movs	r0, r3
 8015dda:	f000 fead 	bl	8016b38 <USBD_CtlError>
          break;
 8015dde:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8015de0:	e006      	b.n	8015df0 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 8015de2:	683a      	ldr	r2, [r7, #0]
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	0011      	movs	r1, r2
 8015de8:	0018      	movs	r0, r3
 8015dea:	f000 fea5 	bl	8016b38 <USBD_CtlError>
      break;
 8015dee:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8015df0:	230f      	movs	r3, #15
 8015df2:	18fb      	adds	r3, r7, r3
 8015df4:	781b      	ldrb	r3, [r3, #0]
}
 8015df6:	0018      	movs	r0, r3
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	b005      	add	sp, #20
 8015dfc:	bd90      	pop	{r4, r7, pc}
 8015dfe:	46c0      	nop			; (mov r8, r8)
 8015e00:	08024130 	.word	0x08024130

08015e04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e04:	b5b0      	push	{r4, r5, r7, lr}
 8015e06:	b084      	sub	sp, #16
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
 8015e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e0e:	230f      	movs	r3, #15
 8015e10:	18fb      	adds	r3, r7, r3
 8015e12:	2200      	movs	r2, #0
 8015e14:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	781b      	ldrb	r3, [r3, #0]
 8015e1a:	001a      	movs	r2, r3
 8015e1c:	2360      	movs	r3, #96	; 0x60
 8015e1e:	4013      	ands	r3, r2
 8015e20:	2b40      	cmp	r3, #64	; 0x40
 8015e22:	d005      	beq.n	8015e30 <USBD_StdItfReq+0x2c>
 8015e24:	d900      	bls.n	8015e28 <USBD_StdItfReq+0x24>
 8015e26:	e06c      	b.n	8015f02 <USBD_StdItfReq+0xfe>
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d001      	beq.n	8015e30 <USBD_StdItfReq+0x2c>
 8015e2c:	2b20      	cmp	r3, #32
 8015e2e:	d168      	bne.n	8015f02 <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	23a7      	movs	r3, #167	; 0xa7
 8015e34:	009b      	lsls	r3, r3, #2
 8015e36:	5cd3      	ldrb	r3, [r2, r3]
 8015e38:	b2db      	uxtb	r3, r3
 8015e3a:	3b01      	subs	r3, #1
 8015e3c:	2b02      	cmp	r3, #2
 8015e3e:	d857      	bhi.n	8015ef0 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	889b      	ldrh	r3, [r3, #4]
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	2b01      	cmp	r3, #1
 8015e48:	d84b      	bhi.n	8015ee2 <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	889b      	ldrh	r3, [r3, #4]
 8015e4e:	b2da      	uxtb	r2, r3
 8015e50:	250e      	movs	r5, #14
 8015e52:	197c      	adds	r4, r7, r5
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	0011      	movs	r1, r2
 8015e58:	0018      	movs	r0, r3
 8015e5a:	f7ff feb4 	bl	8015bc6 <USBD_CoreFindIF>
 8015e5e:	0003      	movs	r3, r0
 8015e60:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015e62:	0029      	movs	r1, r5
 8015e64:	187b      	adds	r3, r7, r1
 8015e66:	781b      	ldrb	r3, [r3, #0]
 8015e68:	2bff      	cmp	r3, #255	; 0xff
 8015e6a:	d028      	beq.n	8015ebe <USBD_StdItfReq+0xba>
 8015e6c:	187b      	adds	r3, r7, r1
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d124      	bne.n	8015ebe <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015e74:	187b      	adds	r3, r7, r1
 8015e76:	781a      	ldrb	r2, [r3, #0]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	32ae      	adds	r2, #174	; 0xae
 8015e7c:	0092      	lsls	r2, r2, #2
 8015e7e:	58d3      	ldr	r3, [r2, r3]
 8015e80:	689b      	ldr	r3, [r3, #8]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d016      	beq.n	8015eb4 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 8015e86:	0008      	movs	r0, r1
 8015e88:	187b      	adds	r3, r7, r1
 8015e8a:	7819      	ldrb	r1, [r3, #0]
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	23b5      	movs	r3, #181	; 0xb5
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015e94:	183b      	adds	r3, r7, r0
 8015e96:	781a      	ldrb	r2, [r3, #0]
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	32ae      	adds	r2, #174	; 0xae
 8015e9c:	0092      	lsls	r2, r2, #2
 8015e9e:	58d3      	ldr	r3, [r2, r3]
 8015ea0:	689b      	ldr	r3, [r3, #8]
 8015ea2:	220f      	movs	r2, #15
 8015ea4:	18bc      	adds	r4, r7, r2
 8015ea6:	6839      	ldr	r1, [r7, #0]
 8015ea8:	687a      	ldr	r2, [r7, #4]
 8015eaa:	0010      	movs	r0, r2
 8015eac:	4798      	blx	r3
 8015eae:	0003      	movs	r3, r0
 8015eb0:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8015eb2:	e008      	b.n	8015ec6 <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015eb4:	230f      	movs	r3, #15
 8015eb6:	18fb      	adds	r3, r7, r3
 8015eb8:	2203      	movs	r2, #3
 8015eba:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8015ebc:	e003      	b.n	8015ec6 <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015ebe:	230f      	movs	r3, #15
 8015ec0:	18fb      	adds	r3, r7, r3
 8015ec2:	2203      	movs	r2, #3
 8015ec4:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	88db      	ldrh	r3, [r3, #6]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d117      	bne.n	8015efe <USBD_StdItfReq+0xfa>
 8015ece:	230f      	movs	r3, #15
 8015ed0:	18fb      	adds	r3, r7, r3
 8015ed2:	781b      	ldrb	r3, [r3, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d112      	bne.n	8015efe <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	0018      	movs	r0, r3
 8015edc:	f000 ff12 	bl	8016d04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015ee0:	e00d      	b.n	8015efe <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 8015ee2:	683a      	ldr	r2, [r7, #0]
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	0011      	movs	r1, r2
 8015ee8:	0018      	movs	r0, r3
 8015eea:	f000 fe25 	bl	8016b38 <USBD_CtlError>
          break;
 8015eee:	e006      	b.n	8015efe <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 8015ef0:	683a      	ldr	r2, [r7, #0]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	0011      	movs	r1, r2
 8015ef6:	0018      	movs	r0, r3
 8015ef8:	f000 fe1e 	bl	8016b38 <USBD_CtlError>
          break;
 8015efc:	e000      	b.n	8015f00 <USBD_StdItfReq+0xfc>
          break;
 8015efe:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8015f00:	e006      	b.n	8015f10 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 8015f02:	683a      	ldr	r2, [r7, #0]
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	0011      	movs	r1, r2
 8015f08:	0018      	movs	r0, r3
 8015f0a:	f000 fe15 	bl	8016b38 <USBD_CtlError>
      break;
 8015f0e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8015f10:	230f      	movs	r3, #15
 8015f12:	18fb      	adds	r3, r7, r3
 8015f14:	781b      	ldrb	r3, [r3, #0]
}
 8015f16:	0018      	movs	r0, r3
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	b004      	add	sp, #16
 8015f1c:	bdb0      	pop	{r4, r5, r7, pc}

08015f1e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f1e:	b5b0      	push	{r4, r5, r7, lr}
 8015f20:	b084      	sub	sp, #16
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
 8015f26:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015f28:	230f      	movs	r3, #15
 8015f2a:	18fb      	adds	r3, r7, r3
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	889a      	ldrh	r2, [r3, #4]
 8015f34:	230e      	movs	r3, #14
 8015f36:	18fb      	adds	r3, r7, r3
 8015f38:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	001a      	movs	r2, r3
 8015f40:	2360      	movs	r3, #96	; 0x60
 8015f42:	4013      	ands	r3, r2
 8015f44:	2b40      	cmp	r3, #64	; 0x40
 8015f46:	d006      	beq.n	8015f56 <USBD_StdEPReq+0x38>
 8015f48:	d900      	bls.n	8015f4c <USBD_StdEPReq+0x2e>
 8015f4a:	e1de      	b.n	801630a <USBD_StdEPReq+0x3ec>
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d039      	beq.n	8015fc4 <USBD_StdEPReq+0xa6>
 8015f50:	2b20      	cmp	r3, #32
 8015f52:	d000      	beq.n	8015f56 <USBD_StdEPReq+0x38>
 8015f54:	e1d9      	b.n	801630a <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015f56:	250d      	movs	r5, #13
 8015f58:	197c      	adds	r4, r7, r5
 8015f5a:	230e      	movs	r3, #14
 8015f5c:	18fb      	adds	r3, r7, r3
 8015f5e:	781a      	ldrb	r2, [r3, #0]
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	0011      	movs	r1, r2
 8015f64:	0018      	movs	r0, r3
 8015f66:	f7ff fe3a 	bl	8015bde <USBD_CoreFindEP>
 8015f6a:	0003      	movs	r3, r0
 8015f6c:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015f6e:	197b      	adds	r3, r7, r5
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	2bff      	cmp	r3, #255	; 0xff
 8015f74:	d100      	bne.n	8015f78 <USBD_StdEPReq+0x5a>
 8015f76:	e1cf      	b.n	8016318 <USBD_StdEPReq+0x3fa>
 8015f78:	197b      	adds	r3, r7, r5
 8015f7a:	781b      	ldrb	r3, [r3, #0]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d000      	beq.n	8015f82 <USBD_StdEPReq+0x64>
 8015f80:	e1ca      	b.n	8016318 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 8015f82:	197b      	adds	r3, r7, r5
 8015f84:	7819      	ldrb	r1, [r3, #0]
 8015f86:	687a      	ldr	r2, [r7, #4]
 8015f88:	23b5      	movs	r3, #181	; 0xb5
 8015f8a:	009b      	lsls	r3, r3, #2
 8015f8c:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015f8e:	0029      	movs	r1, r5
 8015f90:	187b      	adds	r3, r7, r1
 8015f92:	781a      	ldrb	r2, [r3, #0]
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	32ae      	adds	r2, #174	; 0xae
 8015f98:	0092      	lsls	r2, r2, #2
 8015f9a:	58d3      	ldr	r3, [r2, r3]
 8015f9c:	689b      	ldr	r3, [r3, #8]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d100      	bne.n	8015fa4 <USBD_StdEPReq+0x86>
 8015fa2:	e1b9      	b.n	8016318 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015fa4:	187b      	adds	r3, r7, r1
 8015fa6:	781a      	ldrb	r2, [r3, #0]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	32ae      	adds	r2, #174	; 0xae
 8015fac:	0092      	lsls	r2, r2, #2
 8015fae:	58d3      	ldr	r3, [r2, r3]
 8015fb0:	689b      	ldr	r3, [r3, #8]
 8015fb2:	220f      	movs	r2, #15
 8015fb4:	18bc      	adds	r4, r7, r2
 8015fb6:	6839      	ldr	r1, [r7, #0]
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	0010      	movs	r0, r2
 8015fbc:	4798      	blx	r3
 8015fbe:	0003      	movs	r3, r0
 8015fc0:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 8015fc2:	e1a9      	b.n	8016318 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	785b      	ldrb	r3, [r3, #1]
 8015fc8:	2b03      	cmp	r3, #3
 8015fca:	d007      	beq.n	8015fdc <USBD_StdEPReq+0xbe>
 8015fcc:	dd00      	ble.n	8015fd0 <USBD_StdEPReq+0xb2>
 8015fce:	e194      	b.n	80162fa <USBD_StdEPReq+0x3dc>
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d100      	bne.n	8015fd6 <USBD_StdEPReq+0xb8>
 8015fd4:	e0c9      	b.n	801616a <USBD_StdEPReq+0x24c>
 8015fd6:	2b01      	cmp	r3, #1
 8015fd8:	d04d      	beq.n	8016076 <USBD_StdEPReq+0x158>
 8015fda:	e18e      	b.n	80162fa <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015fdc:	687a      	ldr	r2, [r7, #4]
 8015fde:	23a7      	movs	r3, #167	; 0xa7
 8015fe0:	009b      	lsls	r3, r3, #2
 8015fe2:	5cd3      	ldrb	r3, [r2, r3]
 8015fe4:	b2db      	uxtb	r3, r3
 8015fe6:	2b02      	cmp	r3, #2
 8015fe8:	d002      	beq.n	8015ff0 <USBD_StdEPReq+0xd2>
 8015fea:	2b03      	cmp	r3, #3
 8015fec:	d01e      	beq.n	801602c <USBD_StdEPReq+0x10e>
 8015fee:	e03a      	b.n	8016066 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ff0:	220e      	movs	r2, #14
 8015ff2:	18bb      	adds	r3, r7, r2
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d011      	beq.n	801601e <USBD_StdEPReq+0x100>
 8015ffa:	18bb      	adds	r3, r7, r2
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	2b80      	cmp	r3, #128	; 0x80
 8016000:	d00d      	beq.n	801601e <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016002:	18bb      	adds	r3, r7, r2
 8016004:	781a      	ldrb	r2, [r3, #0]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	0011      	movs	r1, r2
 801600a:	0018      	movs	r0, r3
 801600c:	f006 ffad 	bl	801cf6a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2180      	movs	r1, #128	; 0x80
 8016014:	0018      	movs	r0, r3
 8016016:	f006 ffa8 	bl	801cf6a <USBD_LL_StallEP>
 801601a:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801601c:	e02a      	b.n	8016074 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 801601e:	683a      	ldr	r2, [r7, #0]
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	0011      	movs	r1, r2
 8016024:	0018      	movs	r0, r3
 8016026:	f000 fd87 	bl	8016b38 <USBD_CtlError>
              break;
 801602a:	e023      	b.n	8016074 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	885b      	ldrh	r3, [r3, #2]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d113      	bne.n	801605c <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016034:	220e      	movs	r2, #14
 8016036:	18bb      	adds	r3, r7, r2
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d00e      	beq.n	801605c <USBD_StdEPReq+0x13e>
 801603e:	18bb      	adds	r3, r7, r2
 8016040:	781b      	ldrb	r3, [r3, #0]
 8016042:	2b80      	cmp	r3, #128	; 0x80
 8016044:	d00a      	beq.n	801605c <USBD_StdEPReq+0x13e>
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	88db      	ldrh	r3, [r3, #6]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d106      	bne.n	801605c <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801604e:	18bb      	adds	r3, r7, r2
 8016050:	781a      	ldrb	r2, [r3, #0]
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	0011      	movs	r1, r2
 8016056:	0018      	movs	r0, r3
 8016058:	f006 ff87 	bl	801cf6a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	0018      	movs	r0, r3
 8016060:	f000 fe50 	bl	8016d04 <USBD_CtlSendStatus>

              break;
 8016064:	e006      	b.n	8016074 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8016066:	683a      	ldr	r2, [r7, #0]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	0011      	movs	r1, r2
 801606c:	0018      	movs	r0, r3
 801606e:	f000 fd63 	bl	8016b38 <USBD_CtlError>
              break;
 8016072:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8016074:	e148      	b.n	8016308 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016076:	687a      	ldr	r2, [r7, #4]
 8016078:	23a7      	movs	r3, #167	; 0xa7
 801607a:	009b      	lsls	r3, r3, #2
 801607c:	5cd3      	ldrb	r3, [r2, r3]
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2b02      	cmp	r3, #2
 8016082:	d002      	beq.n	801608a <USBD_StdEPReq+0x16c>
 8016084:	2b03      	cmp	r3, #3
 8016086:	d01e      	beq.n	80160c6 <USBD_StdEPReq+0x1a8>
 8016088:	e066      	b.n	8016158 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801608a:	220e      	movs	r2, #14
 801608c:	18bb      	adds	r3, r7, r2
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d011      	beq.n	80160b8 <USBD_StdEPReq+0x19a>
 8016094:	18bb      	adds	r3, r7, r2
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	2b80      	cmp	r3, #128	; 0x80
 801609a:	d00d      	beq.n	80160b8 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801609c:	18bb      	adds	r3, r7, r2
 801609e:	781a      	ldrb	r2, [r3, #0]
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	0011      	movs	r1, r2
 80160a4:	0018      	movs	r0, r3
 80160a6:	f006 ff60 	bl	801cf6a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2180      	movs	r1, #128	; 0x80
 80160ae:	0018      	movs	r0, r3
 80160b0:	f006 ff5b 	bl	801cf6a <USBD_LL_StallEP>
 80160b4:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80160b6:	e057      	b.n	8016168 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 80160b8:	683a      	ldr	r2, [r7, #0]
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	0011      	movs	r1, r2
 80160be:	0018      	movs	r0, r3
 80160c0:	f000 fd3a 	bl	8016b38 <USBD_CtlError>
              break;
 80160c4:	e050      	b.n	8016168 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	885b      	ldrh	r3, [r3, #2]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d14b      	bne.n	8016166 <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80160ce:	210e      	movs	r1, #14
 80160d0:	187b      	adds	r3, r7, r1
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	227f      	movs	r2, #127	; 0x7f
 80160d6:	4013      	ands	r3, r2
 80160d8:	d006      	beq.n	80160e8 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80160da:	187b      	adds	r3, r7, r1
 80160dc:	781a      	ldrb	r2, [r3, #0]
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	0011      	movs	r1, r2
 80160e2:	0018      	movs	r0, r3
 80160e4:	f006 ff6c 	bl	801cfc0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	0018      	movs	r0, r3
 80160ec:	f000 fe0a 	bl	8016d04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80160f0:	250d      	movs	r5, #13
 80160f2:	197c      	adds	r4, r7, r5
 80160f4:	230e      	movs	r3, #14
 80160f6:	18fb      	adds	r3, r7, r3
 80160f8:	781a      	ldrb	r2, [r3, #0]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	0011      	movs	r1, r2
 80160fe:	0018      	movs	r0, r3
 8016100:	f7ff fd6d 	bl	8015bde <USBD_CoreFindEP>
 8016104:	0003      	movs	r3, r0
 8016106:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016108:	197b      	adds	r3, r7, r5
 801610a:	781b      	ldrb	r3, [r3, #0]
 801610c:	2bff      	cmp	r3, #255	; 0xff
 801610e:	d02a      	beq.n	8016166 <USBD_StdEPReq+0x248>
 8016110:	197b      	adds	r3, r7, r5
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d126      	bne.n	8016166 <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 8016118:	197b      	adds	r3, r7, r5
 801611a:	7819      	ldrb	r1, [r3, #0]
 801611c:	687a      	ldr	r2, [r7, #4]
 801611e:	23b5      	movs	r3, #181	; 0xb5
 8016120:	009b      	lsls	r3, r3, #2
 8016122:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016124:	0029      	movs	r1, r5
 8016126:	187b      	adds	r3, r7, r1
 8016128:	781a      	ldrb	r2, [r3, #0]
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	32ae      	adds	r2, #174	; 0xae
 801612e:	0092      	lsls	r2, r2, #2
 8016130:	58d3      	ldr	r3, [r2, r3]
 8016132:	689b      	ldr	r3, [r3, #8]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d016      	beq.n	8016166 <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016138:	187b      	adds	r3, r7, r1
 801613a:	781a      	ldrb	r2, [r3, #0]
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	32ae      	adds	r2, #174	; 0xae
 8016140:	0092      	lsls	r2, r2, #2
 8016142:	58d3      	ldr	r3, [r2, r3]
 8016144:	689b      	ldr	r3, [r3, #8]
 8016146:	220f      	movs	r2, #15
 8016148:	18bc      	adds	r4, r7, r2
 801614a:	6839      	ldr	r1, [r7, #0]
 801614c:	687a      	ldr	r2, [r7, #4]
 801614e:	0010      	movs	r0, r2
 8016150:	4798      	blx	r3
 8016152:	0003      	movs	r3, r0
 8016154:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 8016156:	e006      	b.n	8016166 <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 8016158:	683a      	ldr	r2, [r7, #0]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	0011      	movs	r1, r2
 801615e:	0018      	movs	r0, r3
 8016160:	f000 fcea 	bl	8016b38 <USBD_CtlError>
              break;
 8016164:	e000      	b.n	8016168 <USBD_StdEPReq+0x24a>
              break;
 8016166:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8016168:	e0ce      	b.n	8016308 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	23a7      	movs	r3, #167	; 0xa7
 801616e:	009b      	lsls	r3, r3, #2
 8016170:	5cd3      	ldrb	r3, [r2, r3]
 8016172:	b2db      	uxtb	r3, r3
 8016174:	2b02      	cmp	r3, #2
 8016176:	d002      	beq.n	801617e <USBD_StdEPReq+0x260>
 8016178:	2b03      	cmp	r3, #3
 801617a:	d03c      	beq.n	80161f6 <USBD_StdEPReq+0x2d8>
 801617c:	e0b5      	b.n	80162ea <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801617e:	220e      	movs	r2, #14
 8016180:	18bb      	adds	r3, r7, r2
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d00a      	beq.n	801619e <USBD_StdEPReq+0x280>
 8016188:	18bb      	adds	r3, r7, r2
 801618a:	781b      	ldrb	r3, [r3, #0]
 801618c:	2b80      	cmp	r3, #128	; 0x80
 801618e:	d006      	beq.n	801619e <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 8016190:	683a      	ldr	r2, [r7, #0]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	0011      	movs	r1, r2
 8016196:	0018      	movs	r0, r3
 8016198:	f000 fcce 	bl	8016b38 <USBD_CtlError>
                break;
 801619c:	e0ac      	b.n	80162f8 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801619e:	220e      	movs	r2, #14
 80161a0:	18bb      	adds	r3, r7, r2
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	b25b      	sxtb	r3, r3
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	da0c      	bge.n	80161c4 <USBD_StdEPReq+0x2a6>
 80161aa:	18bb      	adds	r3, r7, r2
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	227f      	movs	r2, #127	; 0x7f
 80161b0:	401a      	ands	r2, r3
 80161b2:	0013      	movs	r3, r2
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	189b      	adds	r3, r3, r2
 80161b8:	009b      	lsls	r3, r3, #2
 80161ba:	3310      	adds	r3, #16
 80161bc:	687a      	ldr	r2, [r7, #4]
 80161be:	18d3      	adds	r3, r2, r3
 80161c0:	3304      	adds	r3, #4
 80161c2:	e00d      	b.n	80161e0 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80161c4:	230e      	movs	r3, #14
 80161c6:	18fb      	adds	r3, r7, r3
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	227f      	movs	r2, #127	; 0x7f
 80161cc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161ce:	0013      	movs	r3, r2
 80161d0:	009b      	lsls	r3, r3, #2
 80161d2:	189b      	adds	r3, r3, r2
 80161d4:	009b      	lsls	r3, r3, #2
 80161d6:	3351      	adds	r3, #81	; 0x51
 80161d8:	33ff      	adds	r3, #255	; 0xff
 80161da:	687a      	ldr	r2, [r7, #4]
 80161dc:	18d3      	adds	r3, r2, r3
 80161de:	3304      	adds	r3, #4
 80161e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80161e2:	68bb      	ldr	r3, [r7, #8]
 80161e4:	2200      	movs	r2, #0
 80161e6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80161e8:	68b9      	ldr	r1, [r7, #8]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	2202      	movs	r2, #2
 80161ee:	0018      	movs	r0, r3
 80161f0:	f000 fd2a 	bl	8016c48 <USBD_CtlSendData>
              break;
 80161f4:	e080      	b.n	80162f8 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80161f6:	220e      	movs	r2, #14
 80161f8:	18bb      	adds	r3, r7, r2
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	b25b      	sxtb	r3, r3
 80161fe:	2b00      	cmp	r3, #0
 8016200:	da14      	bge.n	801622c <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016202:	18bb      	adds	r3, r7, r2
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	220f      	movs	r2, #15
 8016208:	401a      	ands	r2, r3
 801620a:	6879      	ldr	r1, [r7, #4]
 801620c:	0013      	movs	r3, r2
 801620e:	009b      	lsls	r3, r3, #2
 8016210:	189b      	adds	r3, r3, r2
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	18cb      	adds	r3, r1, r3
 8016216:	3324      	adds	r3, #36	; 0x24
 8016218:	881b      	ldrh	r3, [r3, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d11e      	bne.n	801625c <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 801621e:	683a      	ldr	r2, [r7, #0]
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	0011      	movs	r1, r2
 8016224:	0018      	movs	r0, r3
 8016226:	f000 fc87 	bl	8016b38 <USBD_CtlError>
                  break;
 801622a:	e065      	b.n	80162f8 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801622c:	230e      	movs	r3, #14
 801622e:	18fb      	adds	r3, r7, r3
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	220f      	movs	r2, #15
 8016234:	401a      	ands	r2, r3
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	23b2      	movs	r3, #178	; 0xb2
 801623a:	0059      	lsls	r1, r3, #1
 801623c:	0013      	movs	r3, r2
 801623e:	009b      	lsls	r3, r3, #2
 8016240:	189b      	adds	r3, r3, r2
 8016242:	009b      	lsls	r3, r3, #2
 8016244:	18c3      	adds	r3, r0, r3
 8016246:	185b      	adds	r3, r3, r1
 8016248:	881b      	ldrh	r3, [r3, #0]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d106      	bne.n	801625c <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 801624e:	683a      	ldr	r2, [r7, #0]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	0011      	movs	r1, r2
 8016254:	0018      	movs	r0, r3
 8016256:	f000 fc6f 	bl	8016b38 <USBD_CtlError>
                  break;
 801625a:	e04d      	b.n	80162f8 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801625c:	220e      	movs	r2, #14
 801625e:	18bb      	adds	r3, r7, r2
 8016260:	781b      	ldrb	r3, [r3, #0]
 8016262:	b25b      	sxtb	r3, r3
 8016264:	2b00      	cmp	r3, #0
 8016266:	da0c      	bge.n	8016282 <USBD_StdEPReq+0x364>
 8016268:	18bb      	adds	r3, r7, r2
 801626a:	781b      	ldrb	r3, [r3, #0]
 801626c:	227f      	movs	r2, #127	; 0x7f
 801626e:	401a      	ands	r2, r3
 8016270:	0013      	movs	r3, r2
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	189b      	adds	r3, r3, r2
 8016276:	009b      	lsls	r3, r3, #2
 8016278:	3310      	adds	r3, #16
 801627a:	687a      	ldr	r2, [r7, #4]
 801627c:	18d3      	adds	r3, r2, r3
 801627e:	3304      	adds	r3, #4
 8016280:	e00d      	b.n	801629e <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016282:	230e      	movs	r3, #14
 8016284:	18fb      	adds	r3, r7, r3
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	227f      	movs	r2, #127	; 0x7f
 801628a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801628c:	0013      	movs	r3, r2
 801628e:	009b      	lsls	r3, r3, #2
 8016290:	189b      	adds	r3, r3, r2
 8016292:	009b      	lsls	r3, r3, #2
 8016294:	3351      	adds	r3, #81	; 0x51
 8016296:	33ff      	adds	r3, #255	; 0xff
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	18d3      	adds	r3, r2, r3
 801629c:	3304      	adds	r3, #4
 801629e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80162a0:	220e      	movs	r2, #14
 80162a2:	18bb      	adds	r3, r7, r2
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d003      	beq.n	80162b2 <USBD_StdEPReq+0x394>
 80162aa:	18bb      	adds	r3, r7, r2
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	2b80      	cmp	r3, #128	; 0x80
 80162b0:	d103      	bne.n	80162ba <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 80162b2:	68bb      	ldr	r3, [r7, #8]
 80162b4:	2200      	movs	r2, #0
 80162b6:	601a      	str	r2, [r3, #0]
 80162b8:	e010      	b.n	80162dc <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80162ba:	230e      	movs	r3, #14
 80162bc:	18fb      	adds	r3, r7, r3
 80162be:	781a      	ldrb	r2, [r3, #0]
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	0011      	movs	r1, r2
 80162c4:	0018      	movs	r0, r3
 80162c6:	f006 fea6 	bl	801d016 <USBD_LL_IsStallEP>
 80162ca:	1e03      	subs	r3, r0, #0
 80162cc:	d003      	beq.n	80162d6 <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	2201      	movs	r2, #1
 80162d2:	601a      	str	r2, [r3, #0]
 80162d4:	e002      	b.n	80162dc <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	2200      	movs	r2, #0
 80162da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80162dc:	68b9      	ldr	r1, [r7, #8]
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	2202      	movs	r2, #2
 80162e2:	0018      	movs	r0, r3
 80162e4:	f000 fcb0 	bl	8016c48 <USBD_CtlSendData>
              break;
 80162e8:	e006      	b.n	80162f8 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 80162ea:	683a      	ldr	r2, [r7, #0]
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	0011      	movs	r1, r2
 80162f0:	0018      	movs	r0, r3
 80162f2:	f000 fc21 	bl	8016b38 <USBD_CtlError>
              break;
 80162f6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80162f8:	e006      	b.n	8016308 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 80162fa:	683a      	ldr	r2, [r7, #0]
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	0011      	movs	r1, r2
 8016300:	0018      	movs	r0, r3
 8016302:	f000 fc19 	bl	8016b38 <USBD_CtlError>
          break;
 8016306:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8016308:	e007      	b.n	801631a <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 801630a:	683a      	ldr	r2, [r7, #0]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	0011      	movs	r1, r2
 8016310:	0018      	movs	r0, r3
 8016312:	f000 fc11 	bl	8016b38 <USBD_CtlError>
      break;
 8016316:	e000      	b.n	801631a <USBD_StdEPReq+0x3fc>
      break;
 8016318:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801631a:	230f      	movs	r3, #15
 801631c:	18fb      	adds	r3, r7, r3
 801631e:	781b      	ldrb	r3, [r3, #0]
}
 8016320:	0018      	movs	r0, r3
 8016322:	46bd      	mov	sp, r7
 8016324:	b004      	add	sp, #16
 8016326:	bdb0      	pop	{r4, r5, r7, pc}

08016328 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b084      	sub	sp, #16
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
 8016330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016332:	2308      	movs	r3, #8
 8016334:	18fb      	adds	r3, r7, r3
 8016336:	2200      	movs	r2, #0
 8016338:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801633a:	2300      	movs	r3, #0
 801633c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801633e:	230b      	movs	r3, #11
 8016340:	18fb      	adds	r3, r7, r3
 8016342:	2200      	movs	r2, #0
 8016344:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	885b      	ldrh	r3, [r3, #2]
 801634a:	0a1b      	lsrs	r3, r3, #8
 801634c:	b29b      	uxth	r3, r3
 801634e:	2b0f      	cmp	r3, #15
 8016350:	d900      	bls.n	8016354 <USBD_GetDescriptor+0x2c>
 8016352:	e17b      	b.n	801664c <USBD_GetDescriptor+0x324>
 8016354:	009a      	lsls	r2, r3, #2
 8016356:	4bdd      	ldr	r3, [pc, #884]	; (80166cc <USBD_GetDescriptor+0x3a4>)
 8016358:	18d3      	adds	r3, r2, r3
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801635e:	687a      	ldr	r2, [r7, #4]
 8016360:	23ad      	movs	r3, #173	; 0xad
 8016362:	009b      	lsls	r3, r3, #2
 8016364:	58d3      	ldr	r3, [r2, r3]
 8016366:	69db      	ldr	r3, [r3, #28]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d00d      	beq.n	8016388 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801636c:	687a      	ldr	r2, [r7, #4]
 801636e:	23ad      	movs	r3, #173	; 0xad
 8016370:	009b      	lsls	r3, r3, #2
 8016372:	58d3      	ldr	r3, [r2, r3]
 8016374:	69db      	ldr	r3, [r3, #28]
 8016376:	687a      	ldr	r2, [r7, #4]
 8016378:	7c12      	ldrb	r2, [r2, #16]
 801637a:	2108      	movs	r1, #8
 801637c:	1879      	adds	r1, r7, r1
 801637e:	0010      	movs	r0, r2
 8016380:	4798      	blx	r3
 8016382:	0003      	movs	r3, r0
 8016384:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016386:	e16e      	b.n	8016666 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8016388:	683a      	ldr	r2, [r7, #0]
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	0011      	movs	r1, r2
 801638e:	0018      	movs	r0, r3
 8016390:	f000 fbd2 	bl	8016b38 <USBD_CtlError>
        err++;
 8016394:	210b      	movs	r1, #11
 8016396:	187b      	adds	r3, r7, r1
 8016398:	781a      	ldrb	r2, [r3, #0]
 801639a:	187b      	adds	r3, r7, r1
 801639c:	3201      	adds	r2, #1
 801639e:	701a      	strb	r2, [r3, #0]
      break;
 80163a0:	e161      	b.n	8016666 <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80163a2:	687a      	ldr	r2, [r7, #4]
 80163a4:	23ad      	movs	r3, #173	; 0xad
 80163a6:	009b      	lsls	r3, r3, #2
 80163a8:	58d3      	ldr	r3, [r2, r3]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	687a      	ldr	r2, [r7, #4]
 80163ae:	7c12      	ldrb	r2, [r2, #16]
 80163b0:	2108      	movs	r1, #8
 80163b2:	1879      	adds	r1, r7, r1
 80163b4:	0010      	movs	r0, r2
 80163b6:	4798      	blx	r3
 80163b8:	0003      	movs	r3, r0
 80163ba:	60fb      	str	r3, [r7, #12]
      break;
 80163bc:	e153      	b.n	8016666 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	7c1b      	ldrb	r3, [r3, #16]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d10f      	bne.n	80163e6 <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80163c6:	687a      	ldr	r2, [r7, #4]
 80163c8:	23ae      	movs	r3, #174	; 0xae
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	58d3      	ldr	r3, [r2, r3]
 80163ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163d0:	2208      	movs	r2, #8
 80163d2:	18ba      	adds	r2, r7, r2
 80163d4:	0010      	movs	r0, r2
 80163d6:	4798      	blx	r3
 80163d8:	0003      	movs	r3, r0
 80163da:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	3301      	adds	r3, #1
 80163e0:	2202      	movs	r2, #2
 80163e2:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80163e4:	e13f      	b.n	8016666 <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80163e6:	687a      	ldr	r2, [r7, #4]
 80163e8:	23ae      	movs	r3, #174	; 0xae
 80163ea:	009b      	lsls	r3, r3, #2
 80163ec:	58d3      	ldr	r3, [r2, r3]
 80163ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163f0:	2208      	movs	r2, #8
 80163f2:	18ba      	adds	r2, r7, r2
 80163f4:	0010      	movs	r0, r2
 80163f6:	4798      	blx	r3
 80163f8:	0003      	movs	r3, r0
 80163fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	3301      	adds	r3, #1
 8016400:	2202      	movs	r2, #2
 8016402:	701a      	strb	r2, [r3, #0]
      break;
 8016404:	e12f      	b.n	8016666 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	885b      	ldrh	r3, [r3, #2]
 801640a:	b2db      	uxtb	r3, r3
 801640c:	2b05      	cmp	r3, #5
 801640e:	d900      	bls.n	8016412 <USBD_GetDescriptor+0xea>
 8016410:	e0d0      	b.n	80165b4 <USBD_GetDescriptor+0x28c>
 8016412:	009a      	lsls	r2, r3, #2
 8016414:	4bae      	ldr	r3, [pc, #696]	; (80166d0 <USBD_GetDescriptor+0x3a8>)
 8016416:	18d3      	adds	r3, r2, r3
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	23ad      	movs	r3, #173	; 0xad
 8016420:	009b      	lsls	r3, r3, #2
 8016422:	58d3      	ldr	r3, [r2, r3]
 8016424:	685b      	ldr	r3, [r3, #4]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d00d      	beq.n	8016446 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801642a:	687a      	ldr	r2, [r7, #4]
 801642c:	23ad      	movs	r3, #173	; 0xad
 801642e:	009b      	lsls	r3, r3, #2
 8016430:	58d3      	ldr	r3, [r2, r3]
 8016432:	685b      	ldr	r3, [r3, #4]
 8016434:	687a      	ldr	r2, [r7, #4]
 8016436:	7c12      	ldrb	r2, [r2, #16]
 8016438:	2108      	movs	r1, #8
 801643a:	1879      	adds	r1, r7, r1
 801643c:	0010      	movs	r0, r2
 801643e:	4798      	blx	r3
 8016440:	0003      	movs	r3, r0
 8016442:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016444:	e0c3      	b.n	80165ce <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8016446:	683a      	ldr	r2, [r7, #0]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	0011      	movs	r1, r2
 801644c:	0018      	movs	r0, r3
 801644e:	f000 fb73 	bl	8016b38 <USBD_CtlError>
            err++;
 8016452:	210b      	movs	r1, #11
 8016454:	187b      	adds	r3, r7, r1
 8016456:	781a      	ldrb	r2, [r3, #0]
 8016458:	187b      	adds	r3, r7, r1
 801645a:	3201      	adds	r2, #1
 801645c:	701a      	strb	r2, [r3, #0]
          break;
 801645e:	e0b6      	b.n	80165ce <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016460:	687a      	ldr	r2, [r7, #4]
 8016462:	23ad      	movs	r3, #173	; 0xad
 8016464:	009b      	lsls	r3, r3, #2
 8016466:	58d3      	ldr	r3, [r2, r3]
 8016468:	689b      	ldr	r3, [r3, #8]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d00d      	beq.n	801648a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801646e:	687a      	ldr	r2, [r7, #4]
 8016470:	23ad      	movs	r3, #173	; 0xad
 8016472:	009b      	lsls	r3, r3, #2
 8016474:	58d3      	ldr	r3, [r2, r3]
 8016476:	689b      	ldr	r3, [r3, #8]
 8016478:	687a      	ldr	r2, [r7, #4]
 801647a:	7c12      	ldrb	r2, [r2, #16]
 801647c:	2108      	movs	r1, #8
 801647e:	1879      	adds	r1, r7, r1
 8016480:	0010      	movs	r0, r2
 8016482:	4798      	blx	r3
 8016484:	0003      	movs	r3, r0
 8016486:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016488:	e0a1      	b.n	80165ce <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801648a:	683a      	ldr	r2, [r7, #0]
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	0011      	movs	r1, r2
 8016490:	0018      	movs	r0, r3
 8016492:	f000 fb51 	bl	8016b38 <USBD_CtlError>
            err++;
 8016496:	210b      	movs	r1, #11
 8016498:	187b      	adds	r3, r7, r1
 801649a:	781a      	ldrb	r2, [r3, #0]
 801649c:	187b      	adds	r3, r7, r1
 801649e:	3201      	adds	r2, #1
 80164a0:	701a      	strb	r2, [r3, #0]
          break;
 80164a2:	e094      	b.n	80165ce <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80164a4:	687a      	ldr	r2, [r7, #4]
 80164a6:	23ad      	movs	r3, #173	; 0xad
 80164a8:	009b      	lsls	r3, r3, #2
 80164aa:	58d3      	ldr	r3, [r2, r3]
 80164ac:	68db      	ldr	r3, [r3, #12]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d00d      	beq.n	80164ce <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80164b2:	687a      	ldr	r2, [r7, #4]
 80164b4:	23ad      	movs	r3, #173	; 0xad
 80164b6:	009b      	lsls	r3, r3, #2
 80164b8:	58d3      	ldr	r3, [r2, r3]
 80164ba:	68db      	ldr	r3, [r3, #12]
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	7c12      	ldrb	r2, [r2, #16]
 80164c0:	2108      	movs	r1, #8
 80164c2:	1879      	adds	r1, r7, r1
 80164c4:	0010      	movs	r0, r2
 80164c6:	4798      	blx	r3
 80164c8:	0003      	movs	r3, r0
 80164ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164cc:	e07f      	b.n	80165ce <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80164ce:	683a      	ldr	r2, [r7, #0]
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	0011      	movs	r1, r2
 80164d4:	0018      	movs	r0, r3
 80164d6:	f000 fb2f 	bl	8016b38 <USBD_CtlError>
            err++;
 80164da:	210b      	movs	r1, #11
 80164dc:	187b      	adds	r3, r7, r1
 80164de:	781a      	ldrb	r2, [r3, #0]
 80164e0:	187b      	adds	r3, r7, r1
 80164e2:	3201      	adds	r2, #1
 80164e4:	701a      	strb	r2, [r3, #0]
          break;
 80164e6:	e072      	b.n	80165ce <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80164e8:	687a      	ldr	r2, [r7, #4]
 80164ea:	23ad      	movs	r3, #173	; 0xad
 80164ec:	009b      	lsls	r3, r3, #2
 80164ee:	58d3      	ldr	r3, [r2, r3]
 80164f0:	691b      	ldr	r3, [r3, #16]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d00d      	beq.n	8016512 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80164f6:	687a      	ldr	r2, [r7, #4]
 80164f8:	23ad      	movs	r3, #173	; 0xad
 80164fa:	009b      	lsls	r3, r3, #2
 80164fc:	58d3      	ldr	r3, [r2, r3]
 80164fe:	691b      	ldr	r3, [r3, #16]
 8016500:	687a      	ldr	r2, [r7, #4]
 8016502:	7c12      	ldrb	r2, [r2, #16]
 8016504:	2108      	movs	r1, #8
 8016506:	1879      	adds	r1, r7, r1
 8016508:	0010      	movs	r0, r2
 801650a:	4798      	blx	r3
 801650c:	0003      	movs	r3, r0
 801650e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016510:	e05d      	b.n	80165ce <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8016512:	683a      	ldr	r2, [r7, #0]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	0011      	movs	r1, r2
 8016518:	0018      	movs	r0, r3
 801651a:	f000 fb0d 	bl	8016b38 <USBD_CtlError>
            err++;
 801651e:	210b      	movs	r1, #11
 8016520:	187b      	adds	r3, r7, r1
 8016522:	781a      	ldrb	r2, [r3, #0]
 8016524:	187b      	adds	r3, r7, r1
 8016526:	3201      	adds	r2, #1
 8016528:	701a      	strb	r2, [r3, #0]
          break;
 801652a:	e050      	b.n	80165ce <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801652c:	687a      	ldr	r2, [r7, #4]
 801652e:	23ad      	movs	r3, #173	; 0xad
 8016530:	009b      	lsls	r3, r3, #2
 8016532:	58d3      	ldr	r3, [r2, r3]
 8016534:	695b      	ldr	r3, [r3, #20]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d00d      	beq.n	8016556 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801653a:	687a      	ldr	r2, [r7, #4]
 801653c:	23ad      	movs	r3, #173	; 0xad
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	58d3      	ldr	r3, [r2, r3]
 8016542:	695b      	ldr	r3, [r3, #20]
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	7c12      	ldrb	r2, [r2, #16]
 8016548:	2108      	movs	r1, #8
 801654a:	1879      	adds	r1, r7, r1
 801654c:	0010      	movs	r0, r2
 801654e:	4798      	blx	r3
 8016550:	0003      	movs	r3, r0
 8016552:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016554:	e03b      	b.n	80165ce <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8016556:	683a      	ldr	r2, [r7, #0]
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	0011      	movs	r1, r2
 801655c:	0018      	movs	r0, r3
 801655e:	f000 faeb 	bl	8016b38 <USBD_CtlError>
            err++;
 8016562:	210b      	movs	r1, #11
 8016564:	187b      	adds	r3, r7, r1
 8016566:	781a      	ldrb	r2, [r3, #0]
 8016568:	187b      	adds	r3, r7, r1
 801656a:	3201      	adds	r2, #1
 801656c:	701a      	strb	r2, [r3, #0]
          break;
 801656e:	e02e      	b.n	80165ce <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016570:	687a      	ldr	r2, [r7, #4]
 8016572:	23ad      	movs	r3, #173	; 0xad
 8016574:	009b      	lsls	r3, r3, #2
 8016576:	58d3      	ldr	r3, [r2, r3]
 8016578:	699b      	ldr	r3, [r3, #24]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d00d      	beq.n	801659a <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801657e:	687a      	ldr	r2, [r7, #4]
 8016580:	23ad      	movs	r3, #173	; 0xad
 8016582:	009b      	lsls	r3, r3, #2
 8016584:	58d3      	ldr	r3, [r2, r3]
 8016586:	699b      	ldr	r3, [r3, #24]
 8016588:	687a      	ldr	r2, [r7, #4]
 801658a:	7c12      	ldrb	r2, [r2, #16]
 801658c:	2108      	movs	r1, #8
 801658e:	1879      	adds	r1, r7, r1
 8016590:	0010      	movs	r0, r2
 8016592:	4798      	blx	r3
 8016594:	0003      	movs	r3, r0
 8016596:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016598:	e019      	b.n	80165ce <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801659a:	683a      	ldr	r2, [r7, #0]
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	0011      	movs	r1, r2
 80165a0:	0018      	movs	r0, r3
 80165a2:	f000 fac9 	bl	8016b38 <USBD_CtlError>
            err++;
 80165a6:	210b      	movs	r1, #11
 80165a8:	187b      	adds	r3, r7, r1
 80165aa:	781a      	ldrb	r2, [r3, #0]
 80165ac:	187b      	adds	r3, r7, r1
 80165ae:	3201      	adds	r2, #1
 80165b0:	701a      	strb	r2, [r3, #0]
          break;
 80165b2:	e00c      	b.n	80165ce <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80165b4:	683a      	ldr	r2, [r7, #0]
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	0011      	movs	r1, r2
 80165ba:	0018      	movs	r0, r3
 80165bc:	f000 fabc 	bl	8016b38 <USBD_CtlError>
          err++;
 80165c0:	210b      	movs	r1, #11
 80165c2:	187b      	adds	r3, r7, r1
 80165c4:	781a      	ldrb	r2, [r3, #0]
 80165c6:	187b      	adds	r3, r7, r1
 80165c8:	3201      	adds	r2, #1
 80165ca:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80165cc:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80165ce:	e04a      	b.n	8016666 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	7c1b      	ldrb	r3, [r3, #16]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d10b      	bne.n	80165f0 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80165d8:	687a      	ldr	r2, [r7, #4]
 80165da:	23ae      	movs	r3, #174	; 0xae
 80165dc:	009b      	lsls	r3, r3, #2
 80165de:	58d3      	ldr	r3, [r2, r3]
 80165e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165e2:	2208      	movs	r2, #8
 80165e4:	18ba      	adds	r2, r7, r2
 80165e6:	0010      	movs	r0, r2
 80165e8:	4798      	blx	r3
 80165ea:	0003      	movs	r3, r0
 80165ec:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165ee:	e03a      	b.n	8016666 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 80165f0:	683a      	ldr	r2, [r7, #0]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	0011      	movs	r1, r2
 80165f6:	0018      	movs	r0, r3
 80165f8:	f000 fa9e 	bl	8016b38 <USBD_CtlError>
        err++;
 80165fc:	210b      	movs	r1, #11
 80165fe:	187b      	adds	r3, r7, r1
 8016600:	781a      	ldrb	r2, [r3, #0]
 8016602:	187b      	adds	r3, r7, r1
 8016604:	3201      	adds	r2, #1
 8016606:	701a      	strb	r2, [r3, #0]
      break;
 8016608:	e02d      	b.n	8016666 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	7c1b      	ldrb	r3, [r3, #16]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d10f      	bne.n	8016632 <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016612:	687a      	ldr	r2, [r7, #4]
 8016614:	23ae      	movs	r3, #174	; 0xae
 8016616:	009b      	lsls	r3, r3, #2
 8016618:	58d3      	ldr	r3, [r2, r3]
 801661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801661c:	2208      	movs	r2, #8
 801661e:	18ba      	adds	r2, r7, r2
 8016620:	0010      	movs	r0, r2
 8016622:	4798      	blx	r3
 8016624:	0003      	movs	r3, r0
 8016626:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	3301      	adds	r3, #1
 801662c:	2207      	movs	r2, #7
 801662e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016630:	e019      	b.n	8016666 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8016632:	683a      	ldr	r2, [r7, #0]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	0011      	movs	r1, r2
 8016638:	0018      	movs	r0, r3
 801663a:	f000 fa7d 	bl	8016b38 <USBD_CtlError>
        err++;
 801663e:	210b      	movs	r1, #11
 8016640:	187b      	adds	r3, r7, r1
 8016642:	781a      	ldrb	r2, [r3, #0]
 8016644:	187b      	adds	r3, r7, r1
 8016646:	3201      	adds	r2, #1
 8016648:	701a      	strb	r2, [r3, #0]
      break;
 801664a:	e00c      	b.n	8016666 <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 801664c:	683a      	ldr	r2, [r7, #0]
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	0011      	movs	r1, r2
 8016652:	0018      	movs	r0, r3
 8016654:	f000 fa70 	bl	8016b38 <USBD_CtlError>
      err++;
 8016658:	210b      	movs	r1, #11
 801665a:	187b      	adds	r3, r7, r1
 801665c:	781a      	ldrb	r2, [r3, #0]
 801665e:	187b      	adds	r3, r7, r1
 8016660:	3201      	adds	r2, #1
 8016662:	701a      	strb	r2, [r3, #0]
      break;
 8016664:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8016666:	230b      	movs	r3, #11
 8016668:	18fb      	adds	r3, r7, r3
 801666a:	781b      	ldrb	r3, [r3, #0]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d131      	bne.n	80166d4 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	88db      	ldrh	r3, [r3, #6]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d023      	beq.n	80166c0 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 8016678:	2108      	movs	r1, #8
 801667a:	187b      	adds	r3, r7, r1
 801667c:	881b      	ldrh	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d017      	beq.n	80166b2 <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	88da      	ldrh	r2, [r3, #6]
 8016686:	187b      	adds	r3, r7, r1
 8016688:	881b      	ldrh	r3, [r3, #0]
 801668a:	1c18      	adds	r0, r3, #0
 801668c:	1c11      	adds	r1, r2, #0
 801668e:	b28a      	uxth	r2, r1
 8016690:	b283      	uxth	r3, r0
 8016692:	429a      	cmp	r2, r3
 8016694:	d900      	bls.n	8016698 <USBD_GetDescriptor+0x370>
 8016696:	1c01      	adds	r1, r0, #0
 8016698:	b28a      	uxth	r2, r1
 801669a:	2108      	movs	r1, #8
 801669c:	187b      	adds	r3, r7, r1
 801669e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80166a0:	187b      	adds	r3, r7, r1
 80166a2:	881b      	ldrh	r3, [r3, #0]
 80166a4:	001a      	movs	r2, r3
 80166a6:	68f9      	ldr	r1, [r7, #12]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	0018      	movs	r0, r3
 80166ac:	f000 facc 	bl	8016c48 <USBD_CtlSendData>
 80166b0:	e011      	b.n	80166d6 <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80166b2:	683a      	ldr	r2, [r7, #0]
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	0011      	movs	r1, r2
 80166b8:	0018      	movs	r0, r3
 80166ba:	f000 fa3d 	bl	8016b38 <USBD_CtlError>
 80166be:	e00a      	b.n	80166d6 <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	0018      	movs	r0, r3
 80166c4:	f000 fb1e 	bl	8016d04 <USBD_CtlSendStatus>
 80166c8:	e005      	b.n	80166d6 <USBD_GetDescriptor+0x3ae>
 80166ca:	46c0      	nop			; (mov r8, r8)
 80166cc:	08024158 	.word	0x08024158
 80166d0:	08024198 	.word	0x08024198
    return;
 80166d4:	46c0      	nop			; (mov r8, r8)
  }
}
 80166d6:	46bd      	mov	sp, r7
 80166d8:	b004      	add	sp, #16
 80166da:	bd80      	pop	{r7, pc}

080166dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166dc:	b590      	push	{r4, r7, lr}
 80166de:	b085      	sub	sp, #20
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	889b      	ldrh	r3, [r3, #4]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d13e      	bne.n	801676c <USBD_SetAddress+0x90>
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	88db      	ldrh	r3, [r3, #6]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d13a      	bne.n	801676c <USBD_SetAddress+0x90>
 80166f6:	683b      	ldr	r3, [r7, #0]
 80166f8:	885b      	ldrh	r3, [r3, #2]
 80166fa:	2b7f      	cmp	r3, #127	; 0x7f
 80166fc:	d836      	bhi.n	801676c <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	885b      	ldrh	r3, [r3, #2]
 8016702:	b2da      	uxtb	r2, r3
 8016704:	230f      	movs	r3, #15
 8016706:	18fb      	adds	r3, r7, r3
 8016708:	217f      	movs	r1, #127	; 0x7f
 801670a:	400a      	ands	r2, r1
 801670c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	23a7      	movs	r3, #167	; 0xa7
 8016712:	009b      	lsls	r3, r3, #2
 8016714:	5cd3      	ldrb	r3, [r2, r3]
 8016716:	b2db      	uxtb	r3, r3
 8016718:	2b03      	cmp	r3, #3
 801671a:	d106      	bne.n	801672a <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 801671c:	683a      	ldr	r2, [r7, #0]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	0011      	movs	r1, r2
 8016722:	0018      	movs	r0, r3
 8016724:	f000 fa08 	bl	8016b38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016728:	e027      	b.n	801677a <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	240f      	movs	r4, #15
 801672e:	193a      	adds	r2, r7, r4
 8016730:	4914      	ldr	r1, [pc, #80]	; (8016784 <USBD_SetAddress+0xa8>)
 8016732:	7812      	ldrb	r2, [r2, #0]
 8016734:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016736:	193b      	adds	r3, r7, r4
 8016738:	781a      	ldrb	r2, [r3, #0]
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	0011      	movs	r1, r2
 801673e:	0018      	movs	r0, r3
 8016740:	f006 fc99 	bl	801d076 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	0018      	movs	r0, r3
 8016748:	f000 fadc 	bl	8016d04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801674c:	193b      	adds	r3, r7, r4
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d005      	beq.n	8016760 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016754:	687a      	ldr	r2, [r7, #4]
 8016756:	23a7      	movs	r3, #167	; 0xa7
 8016758:	009b      	lsls	r3, r3, #2
 801675a:	2102      	movs	r1, #2
 801675c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801675e:	e00c      	b.n	801677a <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	23a7      	movs	r3, #167	; 0xa7
 8016764:	009b      	lsls	r3, r3, #2
 8016766:	2101      	movs	r1, #1
 8016768:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801676a:	e006      	b.n	801677a <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801676c:	683a      	ldr	r2, [r7, #0]
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	0011      	movs	r1, r2
 8016772:	0018      	movs	r0, r3
 8016774:	f000 f9e0 	bl	8016b38 <USBD_CtlError>
  }
}
 8016778:	46c0      	nop			; (mov r8, r8)
 801677a:	46c0      	nop			; (mov r8, r8)
 801677c:	46bd      	mov	sp, r7
 801677e:	b005      	add	sp, #20
 8016780:	bd90      	pop	{r4, r7, pc}
 8016782:	46c0      	nop			; (mov r8, r8)
 8016784:	0000029e 	.word	0x0000029e

08016788 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016788:	b5b0      	push	{r4, r5, r7, lr}
 801678a:	b084      	sub	sp, #16
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016792:	230f      	movs	r3, #15
 8016794:	18fb      	adds	r3, r7, r3
 8016796:	2200      	movs	r2, #0
 8016798:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	885b      	ldrh	r3, [r3, #2]
 801679e:	b2da      	uxtb	r2, r3
 80167a0:	4b5f      	ldr	r3, [pc, #380]	; (8016920 <USBD_SetConfig+0x198>)
 80167a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80167a4:	4b5e      	ldr	r3, [pc, #376]	; (8016920 <USBD_SetConfig+0x198>)
 80167a6:	781b      	ldrb	r3, [r3, #0]
 80167a8:	2b01      	cmp	r3, #1
 80167aa:	d907      	bls.n	80167bc <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 80167ac:	683a      	ldr	r2, [r7, #0]
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	0011      	movs	r1, r2
 80167b2:	0018      	movs	r0, r3
 80167b4:	f000 f9c0 	bl	8016b38 <USBD_CtlError>
    return USBD_FAIL;
 80167b8:	2303      	movs	r3, #3
 80167ba:	e0ac      	b.n	8016916 <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 80167bc:	687a      	ldr	r2, [r7, #4]
 80167be:	23a7      	movs	r3, #167	; 0xa7
 80167c0:	009b      	lsls	r3, r3, #2
 80167c2:	5cd3      	ldrb	r3, [r2, r3]
 80167c4:	b2db      	uxtb	r3, r3
 80167c6:	2b02      	cmp	r3, #2
 80167c8:	d002      	beq.n	80167d0 <USBD_SetConfig+0x48>
 80167ca:	2b03      	cmp	r3, #3
 80167cc:	d033      	beq.n	8016836 <USBD_SetConfig+0xae>
 80167ce:	e08d      	b.n	80168ec <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80167d0:	4b53      	ldr	r3, [pc, #332]	; (8016920 <USBD_SetConfig+0x198>)
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d029      	beq.n	801682c <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 80167d8:	4b51      	ldr	r3, [pc, #324]	; (8016920 <USBD_SetConfig+0x198>)
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	001a      	movs	r2, r3
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80167e2:	4b4f      	ldr	r3, [pc, #316]	; (8016920 <USBD_SetConfig+0x198>)
 80167e4:	781a      	ldrb	r2, [r3, #0]
 80167e6:	250f      	movs	r5, #15
 80167e8:	197c      	adds	r4, r7, r5
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	0011      	movs	r1, r2
 80167ee:	0018      	movs	r0, r3
 80167f0:	f7fe feb2 	bl	8015558 <USBD_SetClassConfig>
 80167f4:	0003      	movs	r3, r0
 80167f6:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 80167f8:	197b      	adds	r3, r7, r5
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00b      	beq.n	8016818 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 8016800:	683a      	ldr	r2, [r7, #0]
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	0011      	movs	r1, r2
 8016806:	0018      	movs	r0, r3
 8016808:	f000 f996 	bl	8016b38 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801680c:	687a      	ldr	r2, [r7, #4]
 801680e:	23a7      	movs	r3, #167	; 0xa7
 8016810:	009b      	lsls	r3, r3, #2
 8016812:	2102      	movs	r1, #2
 8016814:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016816:	e07b      	b.n	8016910 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	0018      	movs	r0, r3
 801681c:	f000 fa72 	bl	8016d04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016820:	687a      	ldr	r2, [r7, #4]
 8016822:	23a7      	movs	r3, #167	; 0xa7
 8016824:	009b      	lsls	r3, r3, #2
 8016826:	2103      	movs	r1, #3
 8016828:	54d1      	strb	r1, [r2, r3]
      break;
 801682a:	e071      	b.n	8016910 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	0018      	movs	r0, r3
 8016830:	f000 fa68 	bl	8016d04 <USBD_CtlSendStatus>
      break;
 8016834:	e06c      	b.n	8016910 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016836:	4b3a      	ldr	r3, [pc, #232]	; (8016920 <USBD_SetConfig+0x198>)
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d115      	bne.n	801686a <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801683e:	687a      	ldr	r2, [r7, #4]
 8016840:	23a7      	movs	r3, #167	; 0xa7
 8016842:	009b      	lsls	r3, r3, #2
 8016844:	2102      	movs	r1, #2
 8016846:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8016848:	4b35      	ldr	r3, [pc, #212]	; (8016920 <USBD_SetConfig+0x198>)
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	001a      	movs	r2, r3
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016852:	4b33      	ldr	r3, [pc, #204]	; (8016920 <USBD_SetConfig+0x198>)
 8016854:	781a      	ldrb	r2, [r3, #0]
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	0011      	movs	r1, r2
 801685a:	0018      	movs	r0, r3
 801685c:	f7fe fea1 	bl	80155a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	0018      	movs	r0, r3
 8016864:	f000 fa4e 	bl	8016d04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016868:	e052      	b.n	8016910 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 801686a:	4b2d      	ldr	r3, [pc, #180]	; (8016920 <USBD_SetConfig+0x198>)
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	001a      	movs	r2, r3
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	685b      	ldr	r3, [r3, #4]
 8016874:	429a      	cmp	r2, r3
 8016876:	d034      	beq.n	80168e2 <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	685b      	ldr	r3, [r3, #4]
 801687c:	b2da      	uxtb	r2, r3
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	0011      	movs	r1, r2
 8016882:	0018      	movs	r0, r3
 8016884:	f7fe fe8d 	bl	80155a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016888:	4b25      	ldr	r3, [pc, #148]	; (8016920 <USBD_SetConfig+0x198>)
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	001a      	movs	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016892:	4b23      	ldr	r3, [pc, #140]	; (8016920 <USBD_SetConfig+0x198>)
 8016894:	781a      	ldrb	r2, [r3, #0]
 8016896:	250f      	movs	r5, #15
 8016898:	197c      	adds	r4, r7, r5
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	0011      	movs	r1, r2
 801689e:	0018      	movs	r0, r3
 80168a0:	f7fe fe5a 	bl	8015558 <USBD_SetClassConfig>
 80168a4:	0003      	movs	r3, r0
 80168a6:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 80168a8:	197b      	adds	r3, r7, r5
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d013      	beq.n	80168d8 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 80168b0:	683a      	ldr	r2, [r7, #0]
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	0011      	movs	r1, r2
 80168b6:	0018      	movs	r0, r3
 80168b8:	f000 f93e 	bl	8016b38 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	b2da      	uxtb	r2, r3
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	0011      	movs	r1, r2
 80168c6:	0018      	movs	r0, r3
 80168c8:	f7fe fe6b 	bl	80155a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80168cc:	687a      	ldr	r2, [r7, #4]
 80168ce:	23a7      	movs	r3, #167	; 0xa7
 80168d0:	009b      	lsls	r3, r3, #2
 80168d2:	2102      	movs	r1, #2
 80168d4:	54d1      	strb	r1, [r2, r3]
      break;
 80168d6:	e01b      	b.n	8016910 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	0018      	movs	r0, r3
 80168dc:	f000 fa12 	bl	8016d04 <USBD_CtlSendStatus>
      break;
 80168e0:	e016      	b.n	8016910 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	0018      	movs	r0, r3
 80168e6:	f000 fa0d 	bl	8016d04 <USBD_CtlSendStatus>
      break;
 80168ea:	e011      	b.n	8016910 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 80168ec:	683a      	ldr	r2, [r7, #0]
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	0011      	movs	r1, r2
 80168f2:	0018      	movs	r0, r3
 80168f4:	f000 f920 	bl	8016b38 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80168f8:	4b09      	ldr	r3, [pc, #36]	; (8016920 <USBD_SetConfig+0x198>)
 80168fa:	781a      	ldrb	r2, [r3, #0]
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	0011      	movs	r1, r2
 8016900:	0018      	movs	r0, r3
 8016902:	f7fe fe4e 	bl	80155a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016906:	230f      	movs	r3, #15
 8016908:	18fb      	adds	r3, r7, r3
 801690a:	2203      	movs	r2, #3
 801690c:	701a      	strb	r2, [r3, #0]
      break;
 801690e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8016910:	230f      	movs	r3, #15
 8016912:	18fb      	adds	r3, r7, r3
 8016914:	781b      	ldrb	r3, [r3, #0]
}
 8016916:	0018      	movs	r0, r3
 8016918:	46bd      	mov	sp, r7
 801691a:	b004      	add	sp, #16
 801691c:	bdb0      	pop	{r4, r5, r7, pc}
 801691e:	46c0      	nop			; (mov r8, r8)
 8016920:	200005a5 	.word	0x200005a5

08016924 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
 801692c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	88db      	ldrh	r3, [r3, #6]
 8016932:	2b01      	cmp	r3, #1
 8016934:	d006      	beq.n	8016944 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8016936:	683a      	ldr	r2, [r7, #0]
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	0011      	movs	r1, r2
 801693c:	0018      	movs	r0, r3
 801693e:	f000 f8fb 	bl	8016b38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016942:	e027      	b.n	8016994 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	23a7      	movs	r3, #167	; 0xa7
 8016948:	009b      	lsls	r3, r3, #2
 801694a:	5cd3      	ldrb	r3, [r2, r3]
 801694c:	b2db      	uxtb	r3, r3
 801694e:	2b02      	cmp	r3, #2
 8016950:	dc02      	bgt.n	8016958 <USBD_GetConfig+0x34>
 8016952:	2b00      	cmp	r3, #0
 8016954:	dc03      	bgt.n	801695e <USBD_GetConfig+0x3a>
 8016956:	e016      	b.n	8016986 <USBD_GetConfig+0x62>
 8016958:	2b03      	cmp	r3, #3
 801695a:	d00c      	beq.n	8016976 <USBD_GetConfig+0x52>
 801695c:	e013      	b.n	8016986 <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	2200      	movs	r2, #0
 8016962:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	3308      	adds	r3, #8
 8016968:	0019      	movs	r1, r3
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2201      	movs	r2, #1
 801696e:	0018      	movs	r0, r3
 8016970:	f000 f96a 	bl	8016c48 <USBD_CtlSendData>
        break;
 8016974:	e00e      	b.n	8016994 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	1d19      	adds	r1, r3, #4
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	2201      	movs	r2, #1
 801697e:	0018      	movs	r0, r3
 8016980:	f000 f962 	bl	8016c48 <USBD_CtlSendData>
        break;
 8016984:	e006      	b.n	8016994 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 8016986:	683a      	ldr	r2, [r7, #0]
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	0011      	movs	r1, r2
 801698c:	0018      	movs	r0, r3
 801698e:	f000 f8d3 	bl	8016b38 <USBD_CtlError>
        break;
 8016992:	46c0      	nop			; (mov r8, r8)
}
 8016994:	46c0      	nop			; (mov r8, r8)
 8016996:	46bd      	mov	sp, r7
 8016998:	b002      	add	sp, #8
 801699a:	bd80      	pop	{r7, pc}

0801699c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
 80169a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80169a6:	687a      	ldr	r2, [r7, #4]
 80169a8:	23a7      	movs	r3, #167	; 0xa7
 80169aa:	009b      	lsls	r3, r3, #2
 80169ac:	5cd3      	ldrb	r3, [r2, r3]
 80169ae:	b2db      	uxtb	r3, r3
 80169b0:	3b01      	subs	r3, #1
 80169b2:	2b02      	cmp	r3, #2
 80169b4:	d822      	bhi.n	80169fc <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	88db      	ldrh	r3, [r3, #6]
 80169ba:	2b02      	cmp	r3, #2
 80169bc:	d006      	beq.n	80169cc <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 80169be:	683a      	ldr	r2, [r7, #0]
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	0011      	movs	r1, r2
 80169c4:	0018      	movs	r0, r3
 80169c6:	f000 f8b7 	bl	8016b38 <USBD_CtlError>
        break;
 80169ca:	e01e      	b.n	8016a0a <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2201      	movs	r2, #1
 80169d0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80169d2:	687a      	ldr	r2, [r7, #4]
 80169d4:	23a9      	movs	r3, #169	; 0xa9
 80169d6:	009b      	lsls	r3, r3, #2
 80169d8:	58d3      	ldr	r3, [r2, r3]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d005      	beq.n	80169ea <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	68db      	ldr	r3, [r3, #12]
 80169e2:	2202      	movs	r2, #2
 80169e4:	431a      	orrs	r2, r3
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	330c      	adds	r3, #12
 80169ee:	0019      	movs	r1, r3
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	2202      	movs	r2, #2
 80169f4:	0018      	movs	r0, r3
 80169f6:	f000 f927 	bl	8016c48 <USBD_CtlSendData>
      break;
 80169fa:	e006      	b.n	8016a0a <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 80169fc:	683a      	ldr	r2, [r7, #0]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	0011      	movs	r1, r2
 8016a02:	0018      	movs	r0, r3
 8016a04:	f000 f898 	bl	8016b38 <USBD_CtlError>
      break;
 8016a08:	46c0      	nop			; (mov r8, r8)
  }
}
 8016a0a:	46c0      	nop			; (mov r8, r8)
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	b002      	add	sp, #8
 8016a10:	bd80      	pop	{r7, pc}

08016a12 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a12:	b580      	push	{r7, lr}
 8016a14:	b082      	sub	sp, #8
 8016a16:	af00      	add	r7, sp, #0
 8016a18:	6078      	str	r0, [r7, #4]
 8016a1a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	885b      	ldrh	r3, [r3, #2]
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d109      	bne.n	8016a38 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 8016a24:	687a      	ldr	r2, [r7, #4]
 8016a26:	23a9      	movs	r3, #169	; 0xa9
 8016a28:	009b      	lsls	r3, r3, #2
 8016a2a:	2101      	movs	r1, #1
 8016a2c:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	0018      	movs	r0, r3
 8016a32:	f000 f967 	bl	8016d04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016a36:	e017      	b.n	8016a68 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	885b      	ldrh	r3, [r3, #2]
 8016a3c:	2b02      	cmp	r3, #2
 8016a3e:	d10d      	bne.n	8016a5c <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	889b      	ldrh	r3, [r3, #4]
 8016a44:	0a1b      	lsrs	r3, r3, #8
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	b2d9      	uxtb	r1, r3
 8016a4a:	687a      	ldr	r2, [r7, #4]
 8016a4c:	23a8      	movs	r3, #168	; 0xa8
 8016a4e:	009b      	lsls	r3, r3, #2
 8016a50:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	0018      	movs	r0, r3
 8016a56:	f000 f955 	bl	8016d04 <USBD_CtlSendStatus>
}
 8016a5a:	e005      	b.n	8016a68 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 8016a5c:	683a      	ldr	r2, [r7, #0]
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	0011      	movs	r1, r2
 8016a62:	0018      	movs	r0, r3
 8016a64:	f000 f868 	bl	8016b38 <USBD_CtlError>
}
 8016a68:	46c0      	nop			; (mov r8, r8)
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	b002      	add	sp, #8
 8016a6e:	bd80      	pop	{r7, pc}

08016a70 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
 8016a78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016a7a:	687a      	ldr	r2, [r7, #4]
 8016a7c:	23a7      	movs	r3, #167	; 0xa7
 8016a7e:	009b      	lsls	r3, r3, #2
 8016a80:	5cd3      	ldrb	r3, [r2, r3]
 8016a82:	b2db      	uxtb	r3, r3
 8016a84:	3b01      	subs	r3, #1
 8016a86:	2b02      	cmp	r3, #2
 8016a88:	d80d      	bhi.n	8016aa6 <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016a8a:	683b      	ldr	r3, [r7, #0]
 8016a8c:	885b      	ldrh	r3, [r3, #2]
 8016a8e:	2b01      	cmp	r3, #1
 8016a90:	d110      	bne.n	8016ab4 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 8016a92:	687a      	ldr	r2, [r7, #4]
 8016a94:	23a9      	movs	r3, #169	; 0xa9
 8016a96:	009b      	lsls	r3, r3, #2
 8016a98:	2100      	movs	r1, #0
 8016a9a:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	0018      	movs	r0, r3
 8016aa0:	f000 f930 	bl	8016d04 <USBD_CtlSendStatus>
      }
      break;
 8016aa4:	e006      	b.n	8016ab4 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 8016aa6:	683a      	ldr	r2, [r7, #0]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	0011      	movs	r1, r2
 8016aac:	0018      	movs	r0, r3
 8016aae:	f000 f843 	bl	8016b38 <USBD_CtlError>
      break;
 8016ab2:	e000      	b.n	8016ab6 <USBD_ClrFeature+0x46>
      break;
 8016ab4:	46c0      	nop			; (mov r8, r8)
  }
}
 8016ab6:	46c0      	nop			; (mov r8, r8)
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	b002      	add	sp, #8
 8016abc:	bd80      	pop	{r7, pc}

08016abe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016abe:	b580      	push	{r7, lr}
 8016ac0:	b084      	sub	sp, #16
 8016ac2:	af00      	add	r7, sp, #0
 8016ac4:	6078      	str	r0, [r7, #4]
 8016ac6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	781a      	ldrb	r2, [r3, #0]
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	781a      	ldrb	r2, [r3, #0]
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	3301      	adds	r3, #1
 8016ae6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	0018      	movs	r0, r3
 8016aec:	f7ff f8e6 	bl	8015cbc <SWAPBYTE>
 8016af0:	0003      	movs	r3, r0
 8016af2:	001a      	movs	r2, r3
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	3301      	adds	r3, #1
 8016afc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	3301      	adds	r3, #1
 8016b02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	0018      	movs	r0, r3
 8016b08:	f7ff f8d8 	bl	8015cbc <SWAPBYTE>
 8016b0c:	0003      	movs	r3, r0
 8016b0e:	001a      	movs	r2, r3
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	3301      	adds	r3, #1
 8016b18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	0018      	movs	r0, r3
 8016b24:	f7ff f8ca 	bl	8015cbc <SWAPBYTE>
 8016b28:	0003      	movs	r3, r0
 8016b2a:	001a      	movs	r2, r3
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	80da      	strh	r2, [r3, #6]
}
 8016b30:	46c0      	nop			; (mov r8, r8)
 8016b32:	46bd      	mov	sp, r7
 8016b34:	b004      	add	sp, #16
 8016b36:	bd80      	pop	{r7, pc}

08016b38 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b082      	sub	sp, #8
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
 8016b40:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	2180      	movs	r1, #128	; 0x80
 8016b46:	0018      	movs	r0, r3
 8016b48:	f006 fa0f 	bl	801cf6a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	2100      	movs	r1, #0
 8016b50:	0018      	movs	r0, r3
 8016b52:	f006 fa0a 	bl	801cf6a <USBD_LL_StallEP>
}
 8016b56:	46c0      	nop			; (mov r8, r8)
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	b002      	add	sp, #8
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016b5e:	b590      	push	{r4, r7, lr}
 8016b60:	b087      	sub	sp, #28
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	60f8      	str	r0, [r7, #12]
 8016b66:	60b9      	str	r1, [r7, #8]
 8016b68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016b6a:	2417      	movs	r4, #23
 8016b6c:	193b      	adds	r3, r7, r4
 8016b6e:	2200      	movs	r2, #0
 8016b70:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d044      	beq.n	8016c02 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016b7c:	693b      	ldr	r3, [r7, #16]
 8016b7e:	0018      	movs	r0, r3
 8016b80:	f000 f843 	bl	8016c0a <USBD_GetLen>
 8016b84:	0003      	movs	r3, r0
 8016b86:	3301      	adds	r3, #1
 8016b88:	b29b      	uxth	r3, r3
 8016b8a:	18db      	adds	r3, r3, r3
 8016b8c:	b29a      	uxth	r2, r3
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016b92:	193b      	adds	r3, r7, r4
 8016b94:	781b      	ldrb	r3, [r3, #0]
 8016b96:	68ba      	ldr	r2, [r7, #8]
 8016b98:	18d3      	adds	r3, r2, r3
 8016b9a:	687a      	ldr	r2, [r7, #4]
 8016b9c:	7812      	ldrb	r2, [r2, #0]
 8016b9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8016ba0:	193b      	adds	r3, r7, r4
 8016ba2:	781a      	ldrb	r2, [r3, #0]
 8016ba4:	193b      	adds	r3, r7, r4
 8016ba6:	3201      	adds	r2, #1
 8016ba8:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016baa:	193b      	adds	r3, r7, r4
 8016bac:	781b      	ldrb	r3, [r3, #0]
 8016bae:	68ba      	ldr	r2, [r7, #8]
 8016bb0:	18d3      	adds	r3, r2, r3
 8016bb2:	2203      	movs	r2, #3
 8016bb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8016bb6:	193b      	adds	r3, r7, r4
 8016bb8:	781a      	ldrb	r2, [r3, #0]
 8016bba:	193b      	adds	r3, r7, r4
 8016bbc:	3201      	adds	r2, #1
 8016bbe:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8016bc0:	e01a      	b.n	8016bf8 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8016bc2:	2117      	movs	r1, #23
 8016bc4:	187b      	adds	r3, r7, r1
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	68ba      	ldr	r2, [r7, #8]
 8016bca:	18d3      	adds	r3, r2, r3
 8016bcc:	693a      	ldr	r2, [r7, #16]
 8016bce:	7812      	ldrb	r2, [r2, #0]
 8016bd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016bd2:	693b      	ldr	r3, [r7, #16]
 8016bd4:	3301      	adds	r3, #1
 8016bd6:	613b      	str	r3, [r7, #16]
    idx++;
 8016bd8:	187b      	adds	r3, r7, r1
 8016bda:	781a      	ldrb	r2, [r3, #0]
 8016bdc:	187b      	adds	r3, r7, r1
 8016bde:	3201      	adds	r2, #1
 8016be0:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8016be2:	187b      	adds	r3, r7, r1
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	18d3      	adds	r3, r2, r3
 8016bea:	2200      	movs	r2, #0
 8016bec:	701a      	strb	r2, [r3, #0]
    idx++;
 8016bee:	187b      	adds	r3, r7, r1
 8016bf0:	781a      	ldrb	r2, [r3, #0]
 8016bf2:	187b      	adds	r3, r7, r1
 8016bf4:	3201      	adds	r2, #1
 8016bf6:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d1e0      	bne.n	8016bc2 <USBD_GetString+0x64>
 8016c00:	e000      	b.n	8016c04 <USBD_GetString+0xa6>
    return;
 8016c02:	46c0      	nop			; (mov r8, r8)
  }
}
 8016c04:	46bd      	mov	sp, r7
 8016c06:	b007      	add	sp, #28
 8016c08:	bd90      	pop	{r4, r7, pc}

08016c0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016c0a:	b580      	push	{r7, lr}
 8016c0c:	b084      	sub	sp, #16
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016c12:	230f      	movs	r3, #15
 8016c14:	18fb      	adds	r3, r7, r3
 8016c16:	2200      	movs	r2, #0
 8016c18:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016c1e:	e008      	b.n	8016c32 <USBD_GetLen+0x28>
  {
    len++;
 8016c20:	210f      	movs	r1, #15
 8016c22:	187b      	adds	r3, r7, r1
 8016c24:	781a      	ldrb	r2, [r3, #0]
 8016c26:	187b      	adds	r3, r7, r1
 8016c28:	3201      	adds	r2, #1
 8016c2a:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	3301      	adds	r3, #1
 8016c30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	781b      	ldrb	r3, [r3, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d1f2      	bne.n	8016c20 <USBD_GetLen+0x16>
  }

  return len;
 8016c3a:	230f      	movs	r3, #15
 8016c3c:	18fb      	adds	r3, r7, r3
 8016c3e:	781b      	ldrb	r3, [r3, #0]
}
 8016c40:	0018      	movs	r0, r3
 8016c42:	46bd      	mov	sp, r7
 8016c44:	b004      	add	sp, #16
 8016c46:	bd80      	pop	{r7, pc}

08016c48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b084      	sub	sp, #16
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	60f8      	str	r0, [r7, #12]
 8016c50:	60b9      	str	r1, [r7, #8]
 8016c52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016c54:	68fa      	ldr	r2, [r7, #12]
 8016c56:	23a5      	movs	r3, #165	; 0xa5
 8016c58:	009b      	lsls	r3, r3, #2
 8016c5a:	2102      	movs	r1, #2
 8016c5c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	687a      	ldr	r2, [r7, #4]
 8016c62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	687a      	ldr	r2, [r7, #4]
 8016c68:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	68ba      	ldr	r2, [r7, #8]
 8016c6e:	68f8      	ldr	r0, [r7, #12]
 8016c70:	2100      	movs	r1, #0
 8016c72:	f006 fa2b 	bl	801d0cc <USBD_LL_Transmit>

  return USBD_OK;
 8016c76:	2300      	movs	r3, #0
}
 8016c78:	0018      	movs	r0, r3
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	b004      	add	sp, #16
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b084      	sub	sp, #16
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	60f8      	str	r0, [r7, #12]
 8016c88:	60b9      	str	r1, [r7, #8]
 8016c8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	68ba      	ldr	r2, [r7, #8]
 8016c90:	68f8      	ldr	r0, [r7, #12]
 8016c92:	2100      	movs	r1, #0
 8016c94:	f006 fa1a 	bl	801d0cc <USBD_LL_Transmit>

  return USBD_OK;
 8016c98:	2300      	movs	r3, #0
}
 8016c9a:	0018      	movs	r0, r3
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	b004      	add	sp, #16
 8016ca0:	bd80      	pop	{r7, pc}

08016ca2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016ca2:	b580      	push	{r7, lr}
 8016ca4:	b084      	sub	sp, #16
 8016ca6:	af00      	add	r7, sp, #0
 8016ca8:	60f8      	str	r0, [r7, #12]
 8016caa:	60b9      	str	r1, [r7, #8]
 8016cac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016cae:	68fa      	ldr	r2, [r7, #12]
 8016cb0:	23a5      	movs	r3, #165	; 0xa5
 8016cb2:	009b      	lsls	r3, r3, #2
 8016cb4:	2103      	movs	r1, #3
 8016cb6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8016cb8:	68fa      	ldr	r2, [r7, #12]
 8016cba:	23ac      	movs	r3, #172	; 0xac
 8016cbc:	005b      	lsls	r3, r3, #1
 8016cbe:	6879      	ldr	r1, [r7, #4]
 8016cc0:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016cc2:	68fa      	ldr	r2, [r7, #12]
 8016cc4:	23ae      	movs	r3, #174	; 0xae
 8016cc6:	005b      	lsls	r3, r3, #1
 8016cc8:	6879      	ldr	r1, [r7, #4]
 8016cca:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	68ba      	ldr	r2, [r7, #8]
 8016cd0:	68f8      	ldr	r0, [r7, #12]
 8016cd2:	2100      	movs	r1, #0
 8016cd4:	f006 fa2a 	bl	801d12c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016cd8:	2300      	movs	r3, #0
}
 8016cda:	0018      	movs	r0, r3
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	b004      	add	sp, #16
 8016ce0:	bd80      	pop	{r7, pc}

08016ce2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016ce2:	b580      	push	{r7, lr}
 8016ce4:	b084      	sub	sp, #16
 8016ce6:	af00      	add	r7, sp, #0
 8016ce8:	60f8      	str	r0, [r7, #12]
 8016cea:	60b9      	str	r1, [r7, #8]
 8016cec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	68ba      	ldr	r2, [r7, #8]
 8016cf2:	68f8      	ldr	r0, [r7, #12]
 8016cf4:	2100      	movs	r1, #0
 8016cf6:	f006 fa19 	bl	801d12c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016cfa:	2300      	movs	r3, #0
}
 8016cfc:	0018      	movs	r0, r3
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	b004      	add	sp, #16
 8016d02:	bd80      	pop	{r7, pc}

08016d04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016d0c:	687a      	ldr	r2, [r7, #4]
 8016d0e:	23a5      	movs	r3, #165	; 0xa5
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	2104      	movs	r1, #4
 8016d14:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	2300      	movs	r3, #0
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	2100      	movs	r1, #0
 8016d1e:	f006 f9d5 	bl	801d0cc <USBD_LL_Transmit>

  return USBD_OK;
 8016d22:	2300      	movs	r3, #0
}
 8016d24:	0018      	movs	r0, r3
 8016d26:	46bd      	mov	sp, r7
 8016d28:	b002      	add	sp, #8
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	23a5      	movs	r3, #165	; 0xa5
 8016d38:	009b      	lsls	r3, r3, #2
 8016d3a:	2105      	movs	r1, #5
 8016d3c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	2300      	movs	r3, #0
 8016d42:	2200      	movs	r2, #0
 8016d44:	2100      	movs	r1, #0
 8016d46:	f006 f9f1 	bl	801d12c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016d4a:	2300      	movs	r3, #0
}
 8016d4c:	0018      	movs	r0, r3
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	b002      	add	sp, #8
 8016d52:	bd80      	pop	{r7, pc}

08016d54 <__NVIC_SetPriority>:
{
 8016d54:	b590      	push	{r4, r7, lr}
 8016d56:	b083      	sub	sp, #12
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	0002      	movs	r2, r0
 8016d5c:	6039      	str	r1, [r7, #0]
 8016d5e:	1dfb      	adds	r3, r7, #7
 8016d60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8016d62:	1dfb      	adds	r3, r7, #7
 8016d64:	781b      	ldrb	r3, [r3, #0]
 8016d66:	2b7f      	cmp	r3, #127	; 0x7f
 8016d68:	d828      	bhi.n	8016dbc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016d6a:	4a2f      	ldr	r2, [pc, #188]	; (8016e28 <__NVIC_SetPriority+0xd4>)
 8016d6c:	1dfb      	adds	r3, r7, #7
 8016d6e:	781b      	ldrb	r3, [r3, #0]
 8016d70:	b25b      	sxtb	r3, r3
 8016d72:	089b      	lsrs	r3, r3, #2
 8016d74:	33c0      	adds	r3, #192	; 0xc0
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	589b      	ldr	r3, [r3, r2]
 8016d7a:	1dfa      	adds	r2, r7, #7
 8016d7c:	7812      	ldrb	r2, [r2, #0]
 8016d7e:	0011      	movs	r1, r2
 8016d80:	2203      	movs	r2, #3
 8016d82:	400a      	ands	r2, r1
 8016d84:	00d2      	lsls	r2, r2, #3
 8016d86:	21ff      	movs	r1, #255	; 0xff
 8016d88:	4091      	lsls	r1, r2
 8016d8a:	000a      	movs	r2, r1
 8016d8c:	43d2      	mvns	r2, r2
 8016d8e:	401a      	ands	r2, r3
 8016d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	019b      	lsls	r3, r3, #6
 8016d96:	22ff      	movs	r2, #255	; 0xff
 8016d98:	401a      	ands	r2, r3
 8016d9a:	1dfb      	adds	r3, r7, #7
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	0018      	movs	r0, r3
 8016da0:	2303      	movs	r3, #3
 8016da2:	4003      	ands	r3, r0
 8016da4:	00db      	lsls	r3, r3, #3
 8016da6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016da8:	481f      	ldr	r0, [pc, #124]	; (8016e28 <__NVIC_SetPriority+0xd4>)
 8016daa:	1dfb      	adds	r3, r7, #7
 8016dac:	781b      	ldrb	r3, [r3, #0]
 8016dae:	b25b      	sxtb	r3, r3
 8016db0:	089b      	lsrs	r3, r3, #2
 8016db2:	430a      	orrs	r2, r1
 8016db4:	33c0      	adds	r3, #192	; 0xc0
 8016db6:	009b      	lsls	r3, r3, #2
 8016db8:	501a      	str	r2, [r3, r0]
}
 8016dba:	e031      	b.n	8016e20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016dbc:	4a1b      	ldr	r2, [pc, #108]	; (8016e2c <__NVIC_SetPriority+0xd8>)
 8016dbe:	1dfb      	adds	r3, r7, #7
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	0019      	movs	r1, r3
 8016dc4:	230f      	movs	r3, #15
 8016dc6:	400b      	ands	r3, r1
 8016dc8:	3b08      	subs	r3, #8
 8016dca:	089b      	lsrs	r3, r3, #2
 8016dcc:	3306      	adds	r3, #6
 8016dce:	009b      	lsls	r3, r3, #2
 8016dd0:	18d3      	adds	r3, r2, r3
 8016dd2:	3304      	adds	r3, #4
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	1dfa      	adds	r2, r7, #7
 8016dd8:	7812      	ldrb	r2, [r2, #0]
 8016dda:	0011      	movs	r1, r2
 8016ddc:	2203      	movs	r2, #3
 8016dde:	400a      	ands	r2, r1
 8016de0:	00d2      	lsls	r2, r2, #3
 8016de2:	21ff      	movs	r1, #255	; 0xff
 8016de4:	4091      	lsls	r1, r2
 8016de6:	000a      	movs	r2, r1
 8016de8:	43d2      	mvns	r2, r2
 8016dea:	401a      	ands	r2, r3
 8016dec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	019b      	lsls	r3, r3, #6
 8016df2:	22ff      	movs	r2, #255	; 0xff
 8016df4:	401a      	ands	r2, r3
 8016df6:	1dfb      	adds	r3, r7, #7
 8016df8:	781b      	ldrb	r3, [r3, #0]
 8016dfa:	0018      	movs	r0, r3
 8016dfc:	2303      	movs	r3, #3
 8016dfe:	4003      	ands	r3, r0
 8016e00:	00db      	lsls	r3, r3, #3
 8016e02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016e04:	4809      	ldr	r0, [pc, #36]	; (8016e2c <__NVIC_SetPriority+0xd8>)
 8016e06:	1dfb      	adds	r3, r7, #7
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	001c      	movs	r4, r3
 8016e0c:	230f      	movs	r3, #15
 8016e0e:	4023      	ands	r3, r4
 8016e10:	3b08      	subs	r3, #8
 8016e12:	089b      	lsrs	r3, r3, #2
 8016e14:	430a      	orrs	r2, r1
 8016e16:	3306      	adds	r3, #6
 8016e18:	009b      	lsls	r3, r3, #2
 8016e1a:	18c3      	adds	r3, r0, r3
 8016e1c:	3304      	adds	r3, #4
 8016e1e:	601a      	str	r2, [r3, #0]
}
 8016e20:	46c0      	nop			; (mov r8, r8)
 8016e22:	46bd      	mov	sp, r7
 8016e24:	b003      	add	sp, #12
 8016e26:	bd90      	pop	{r4, r7, pc}
 8016e28:	e000e100 	.word	0xe000e100
 8016e2c:	e000ed00 	.word	0xe000ed00

08016e30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016e30:	b580      	push	{r7, lr}
 8016e32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016e34:	4b05      	ldr	r3, [pc, #20]	; (8016e4c <SysTick_Handler+0x1c>)
 8016e36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016e38:	f001 ff2a 	bl	8018c90 <xTaskGetSchedulerState>
 8016e3c:	0003      	movs	r3, r0
 8016e3e:	2b01      	cmp	r3, #1
 8016e40:	d001      	beq.n	8016e46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016e42:	f002 fbf9 	bl	8019638 <xPortSysTickHandler>
  }
}
 8016e46:	46c0      	nop			; (mov r8, r8)
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bd80      	pop	{r7, pc}
 8016e4c:	e000e010 	.word	0xe000e010

08016e50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016e50:	b580      	push	{r7, lr}
 8016e52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016e54:	2305      	movs	r3, #5
 8016e56:	425b      	negs	r3, r3
 8016e58:	2100      	movs	r1, #0
 8016e5a:	0018      	movs	r0, r3
 8016e5c:	f7ff ff7a 	bl	8016d54 <__NVIC_SetPriority>
#endif
}
 8016e60:	46c0      	nop			; (mov r8, r8)
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bd80      	pop	{r7, pc}
	...

08016e68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e6e:	f3ef 8305 	mrs	r3, IPSR
 8016e72:	603b      	str	r3, [r7, #0]
  return(result);
 8016e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d003      	beq.n	8016e82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016e7a:	2306      	movs	r3, #6
 8016e7c:	425b      	negs	r3, r3
 8016e7e:	607b      	str	r3, [r7, #4]
 8016e80:	e00c      	b.n	8016e9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016e82:	4b09      	ldr	r3, [pc, #36]	; (8016ea8 <osKernelInitialize+0x40>)
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d105      	bne.n	8016e96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016e8a:	4b07      	ldr	r3, [pc, #28]	; (8016ea8 <osKernelInitialize+0x40>)
 8016e8c:	2201      	movs	r2, #1
 8016e8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016e90:	2300      	movs	r3, #0
 8016e92:	607b      	str	r3, [r7, #4]
 8016e94:	e002      	b.n	8016e9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016e96:	2301      	movs	r3, #1
 8016e98:	425b      	negs	r3, r3
 8016e9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016e9c:	687b      	ldr	r3, [r7, #4]
}
 8016e9e:	0018      	movs	r0, r3
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	b002      	add	sp, #8
 8016ea4:	bd80      	pop	{r7, pc}
 8016ea6:	46c0      	nop			; (mov r8, r8)
 8016ea8:	200005a8 	.word	0x200005a8

08016eac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b082      	sub	sp, #8
 8016eb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016eb2:	f3ef 8305 	mrs	r3, IPSR
 8016eb6:	603b      	str	r3, [r7, #0]
  return(result);
 8016eb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d003      	beq.n	8016ec6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016ebe:	2306      	movs	r3, #6
 8016ec0:	425b      	negs	r3, r3
 8016ec2:	607b      	str	r3, [r7, #4]
 8016ec4:	e010      	b.n	8016ee8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016ec6:	4b0b      	ldr	r3, [pc, #44]	; (8016ef4 <osKernelStart+0x48>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	2b01      	cmp	r3, #1
 8016ecc:	d109      	bne.n	8016ee2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016ece:	f7ff ffbf 	bl	8016e50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016ed2:	4b08      	ldr	r3, [pc, #32]	; (8016ef4 <osKernelStart+0x48>)
 8016ed4:	2202      	movs	r2, #2
 8016ed6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016ed8:	f001 fae2 	bl	80184a0 <vTaskStartScheduler>
      stat = osOK;
 8016edc:	2300      	movs	r3, #0
 8016ede:	607b      	str	r3, [r7, #4]
 8016ee0:	e002      	b.n	8016ee8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	425b      	negs	r3, r3
 8016ee6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016ee8:	687b      	ldr	r3, [r7, #4]
}
 8016eea:	0018      	movs	r0, r3
 8016eec:	46bd      	mov	sp, r7
 8016eee:	b002      	add	sp, #8
 8016ef0:	bd80      	pop	{r7, pc}
 8016ef2:	46c0      	nop			; (mov r8, r8)
 8016ef4:	200005a8 	.word	0x200005a8

08016ef8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016ef8:	b5b0      	push	{r4, r5, r7, lr}
 8016efa:	b08e      	sub	sp, #56	; 0x38
 8016efc:	af04      	add	r7, sp, #16
 8016efe:	60f8      	str	r0, [r7, #12]
 8016f00:	60b9      	str	r1, [r7, #8]
 8016f02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016f04:	2300      	movs	r3, #0
 8016f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f08:	f3ef 8305 	mrs	r3, IPSR
 8016f0c:	617b      	str	r3, [r7, #20]
  return(result);
 8016f0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d000      	beq.n	8016f16 <osThreadNew+0x1e>
 8016f14:	e081      	b.n	801701a <osThreadNew+0x122>
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d100      	bne.n	8016f1e <osThreadNew+0x26>
 8016f1c:	e07d      	b.n	801701a <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8016f1e:	2380      	movs	r3, #128	; 0x80
 8016f20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016f22:	2318      	movs	r3, #24
 8016f24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016f26:	2300      	movs	r3, #0
 8016f28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	425b      	negs	r3, r3
 8016f2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d044      	beq.n	8016fc0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d002      	beq.n	8016f44 <osThreadNew+0x4c>
        name = attr->name;
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	699b      	ldr	r3, [r3, #24]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d002      	beq.n	8016f52 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	699b      	ldr	r3, [r3, #24]
 8016f50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016f52:	69fb      	ldr	r3, [r7, #28]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d007      	beq.n	8016f68 <osThreadNew+0x70>
 8016f58:	69fb      	ldr	r3, [r7, #28]
 8016f5a:	2b38      	cmp	r3, #56	; 0x38
 8016f5c:	d804      	bhi.n	8016f68 <osThreadNew+0x70>
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	685b      	ldr	r3, [r3, #4]
 8016f62:	2201      	movs	r2, #1
 8016f64:	4013      	ands	r3, r2
 8016f66:	d001      	beq.n	8016f6c <osThreadNew+0x74>
        return (NULL);
 8016f68:	2300      	movs	r3, #0
 8016f6a:	e057      	b.n	801701c <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	695b      	ldr	r3, [r3, #20]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d003      	beq.n	8016f7c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	695b      	ldr	r3, [r3, #20]
 8016f78:	089b      	lsrs	r3, r3, #2
 8016f7a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	689b      	ldr	r3, [r3, #8]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d00e      	beq.n	8016fa2 <osThreadNew+0xaa>
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	68db      	ldr	r3, [r3, #12]
 8016f88:	2ba7      	cmp	r3, #167	; 0xa7
 8016f8a:	d90a      	bls.n	8016fa2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d006      	beq.n	8016fa2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	695b      	ldr	r3, [r3, #20]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d002      	beq.n	8016fa2 <osThreadNew+0xaa>
        mem = 1;
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	61bb      	str	r3, [r7, #24]
 8016fa0:	e010      	b.n	8016fc4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	689b      	ldr	r3, [r3, #8]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d10c      	bne.n	8016fc4 <osThreadNew+0xcc>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	68db      	ldr	r3, [r3, #12]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d108      	bne.n	8016fc4 <osThreadNew+0xcc>
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	691b      	ldr	r3, [r3, #16]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d104      	bne.n	8016fc4 <osThreadNew+0xcc>
          mem = 0;
 8016fba:	2300      	movs	r3, #0
 8016fbc:	61bb      	str	r3, [r7, #24]
 8016fbe:	e001      	b.n	8016fc4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016fc4:	69bb      	ldr	r3, [r7, #24]
 8016fc6:	2b01      	cmp	r3, #1
 8016fc8:	d112      	bne.n	8016ff0 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016fd2:	68bd      	ldr	r5, [r7, #8]
 8016fd4:	6a3c      	ldr	r4, [r7, #32]
 8016fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016fd8:	68f8      	ldr	r0, [r7, #12]
 8016fda:	9302      	str	r3, [sp, #8]
 8016fdc:	9201      	str	r2, [sp, #4]
 8016fde:	69fb      	ldr	r3, [r7, #28]
 8016fe0:	9300      	str	r3, [sp, #0]
 8016fe2:	002b      	movs	r3, r5
 8016fe4:	0022      	movs	r2, r4
 8016fe6:	f000 ff54 	bl	8017e92 <xTaskCreateStatic>
 8016fea:	0003      	movs	r3, r0
 8016fec:	613b      	str	r3, [r7, #16]
 8016fee:	e014      	b.n	801701a <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8016ff0:	69bb      	ldr	r3, [r7, #24]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d111      	bne.n	801701a <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016ff6:	6a3b      	ldr	r3, [r7, #32]
 8016ff8:	b29a      	uxth	r2, r3
 8016ffa:	68bc      	ldr	r4, [r7, #8]
 8016ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ffe:	68f8      	ldr	r0, [r7, #12]
 8017000:	2310      	movs	r3, #16
 8017002:	18fb      	adds	r3, r7, r3
 8017004:	9301      	str	r3, [sp, #4]
 8017006:	69fb      	ldr	r3, [r7, #28]
 8017008:	9300      	str	r3, [sp, #0]
 801700a:	0023      	movs	r3, r4
 801700c:	f000 ff85 	bl	8017f1a <xTaskCreate>
 8017010:	0003      	movs	r3, r0
 8017012:	2b01      	cmp	r3, #1
 8017014:	d001      	beq.n	801701a <osThreadNew+0x122>
            hTask = NULL;
 8017016:	2300      	movs	r3, #0
 8017018:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801701a:	693b      	ldr	r3, [r7, #16]
}
 801701c:	0018      	movs	r0, r3
 801701e:	46bd      	mov	sp, r7
 8017020:	b00a      	add	sp, #40	; 0x28
 8017022:	bdb0      	pop	{r4, r5, r7, pc}

08017024 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8017024:	b580      	push	{r7, lr}
 8017026:	b082      	sub	sp, #8
 8017028:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 801702a:	f001 fe23 	bl	8018c74 <xTaskGetCurrentTaskHandle>
 801702e:	0003      	movs	r3, r0
 8017030:	607b      	str	r3, [r7, #4]

  return (id);
 8017032:	687b      	ldr	r3, [r7, #4]
}
 8017034:	0018      	movs	r0, r3
 8017036:	46bd      	mov	sp, r7
 8017038:	b002      	add	sp, #8
 801703a:	bd80      	pop	{r7, pc}

0801703c <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 801703c:	b580      	push	{r7, lr}
 801703e:	b086      	sub	sp, #24
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017048:	f3ef 8305 	mrs	r3, IPSR
 801704c:	60fb      	str	r3, [r7, #12]
  return(result);
 801704e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017050:	2b00      	cmp	r3, #0
 8017052:	d003      	beq.n	801705c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8017054:	2306      	movs	r3, #6
 8017056:	425b      	negs	r3, r3
 8017058:	617b      	str	r3, [r7, #20]
 801705a:	e00c      	b.n	8017076 <osThreadSuspend+0x3a>
  }
  else if (hTask == NULL) {
 801705c:	693b      	ldr	r3, [r7, #16]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d103      	bne.n	801706a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8017062:	2304      	movs	r3, #4
 8017064:	425b      	negs	r3, r3
 8017066:	617b      	str	r3, [r7, #20]
 8017068:	e005      	b.n	8017076 <osThreadSuspend+0x3a>
  }
  else {
    stat = osOK;
 801706a:	2300      	movs	r3, #0
 801706c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801706e:	693b      	ldr	r3, [r7, #16]
 8017070:	0018      	movs	r0, r3
 8017072:	f001 f93b 	bl	80182ec <vTaskSuspend>
  }

  return (stat);
 8017076:	697b      	ldr	r3, [r7, #20]
}
 8017078:	0018      	movs	r0, r3
 801707a:	46bd      	mov	sp, r7
 801707c:	b006      	add	sp, #24
 801707e:	bd80      	pop	{r7, pc}

08017080 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8017080:	b580      	push	{r7, lr}
 8017082:	b086      	sub	sp, #24
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801708c:	f3ef 8305 	mrs	r3, IPSR
 8017090:	60fb      	str	r3, [r7, #12]
  return(result);
 8017092:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017094:	2b00      	cmp	r3, #0
 8017096:	d003      	beq.n	80170a0 <osThreadResume+0x20>
    stat = osErrorISR;
 8017098:	2306      	movs	r3, #6
 801709a:	425b      	negs	r3, r3
 801709c:	617b      	str	r3, [r7, #20]
 801709e:	e00c      	b.n	80170ba <osThreadResume+0x3a>
  }
  else if (hTask == NULL) {
 80170a0:	693b      	ldr	r3, [r7, #16]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d103      	bne.n	80170ae <osThreadResume+0x2e>
    stat = osErrorParameter;
 80170a6:	2304      	movs	r3, #4
 80170a8:	425b      	negs	r3, r3
 80170aa:	617b      	str	r3, [r7, #20]
 80170ac:	e005      	b.n	80170ba <osThreadResume+0x3a>
  }
  else {
    stat = osOK;
 80170ae:	2300      	movs	r3, #0
 80170b0:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80170b2:	693b      	ldr	r3, [r7, #16]
 80170b4:	0018      	movs	r0, r3
 80170b6:	f001 f9a5 	bl	8018404 <vTaskResume>
  }

  return (stat);
 80170ba:	697b      	ldr	r3, [r7, #20]
}
 80170bc:	0018      	movs	r0, r3
 80170be:	46bd      	mov	sp, r7
 80170c0:	b006      	add	sp, #24
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b084      	sub	sp, #16
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170cc:	f3ef 8305 	mrs	r3, IPSR
 80170d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80170d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d003      	beq.n	80170e0 <osDelay+0x1c>
    stat = osErrorISR;
 80170d8:	2306      	movs	r3, #6
 80170da:	425b      	negs	r3, r3
 80170dc:	60fb      	str	r3, [r7, #12]
 80170de:	e008      	b.n	80170f2 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 80170e0:	2300      	movs	r3, #0
 80170e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d003      	beq.n	80170f2 <osDelay+0x2e>
      vTaskDelay(ticks);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	0018      	movs	r0, r3
 80170ee:	f001 f869 	bl	80181c4 <vTaskDelay>
    }
  }

  return (stat);
 80170f2:	68fb      	ldr	r3, [r7, #12]
}
 80170f4:	0018      	movs	r0, r3
 80170f6:	46bd      	mov	sp, r7
 80170f8:	b004      	add	sp, #16
 80170fa:	bd80      	pop	{r7, pc}

080170fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80170fc:	b590      	push	{r4, r7, lr}
 80170fe:	b08b      	sub	sp, #44	; 0x2c
 8017100:	af02      	add	r7, sp, #8
 8017102:	60f8      	str	r0, [r7, #12]
 8017104:	60b9      	str	r1, [r7, #8]
 8017106:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8017108:	2300      	movs	r3, #0
 801710a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801710c:	f3ef 8305 	mrs	r3, IPSR
 8017110:	613b      	str	r3, [r7, #16]
  return(result);
 8017112:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8017114:	2b00      	cmp	r3, #0
 8017116:	d000      	beq.n	801711a <osMessageQueueNew+0x1e>
 8017118:	e064      	b.n	80171e4 <osMessageQueueNew+0xe8>
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d100      	bne.n	8017122 <osMessageQueueNew+0x26>
 8017120:	e060      	b.n	80171e4 <osMessageQueueNew+0xe8>
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d05d      	beq.n	80171e4 <osMessageQueueNew+0xe8>
    mem = -1;
 8017128:	2301      	movs	r3, #1
 801712a:	425b      	negs	r3, r3
 801712c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d028      	beq.n	8017186 <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	689b      	ldr	r3, [r3, #8]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d011      	beq.n	8017160 <osMessageQueueNew+0x64>
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	68db      	ldr	r3, [r3, #12]
 8017140:	2b4f      	cmp	r3, #79	; 0x4f
 8017142:	d90d      	bls.n	8017160 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017148:	2b00      	cmp	r3, #0
 801714a:	d009      	beq.n	8017160 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	695a      	ldr	r2, [r3, #20]
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	68b9      	ldr	r1, [r7, #8]
 8017154:	434b      	muls	r3, r1
 8017156:	429a      	cmp	r2, r3
 8017158:	d302      	bcc.n	8017160 <osMessageQueueNew+0x64>
        mem = 1;
 801715a:	2301      	movs	r3, #1
 801715c:	61bb      	str	r3, [r7, #24]
 801715e:	e014      	b.n	801718a <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	689b      	ldr	r3, [r3, #8]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d110      	bne.n	801718a <osMessageQueueNew+0x8e>
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	68db      	ldr	r3, [r3, #12]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d10c      	bne.n	801718a <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017174:	2b00      	cmp	r3, #0
 8017176:	d108      	bne.n	801718a <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	695b      	ldr	r3, [r3, #20]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d104      	bne.n	801718a <osMessageQueueNew+0x8e>
          mem = 0;
 8017180:	2300      	movs	r3, #0
 8017182:	61bb      	str	r3, [r7, #24]
 8017184:	e001      	b.n	801718a <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 8017186:	2300      	movs	r3, #0
 8017188:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801718a:	69bb      	ldr	r3, [r7, #24]
 801718c:	2b01      	cmp	r3, #1
 801718e:	d10c      	bne.n	80171aa <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	691a      	ldr	r2, [r3, #16]
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	689b      	ldr	r3, [r3, #8]
 8017198:	68b9      	ldr	r1, [r7, #8]
 801719a:	68f8      	ldr	r0, [r7, #12]
 801719c:	2400      	movs	r4, #0
 801719e:	9400      	str	r4, [sp, #0]
 80171a0:	f000 fa09 	bl	80175b6 <xQueueGenericCreateStatic>
 80171a4:	0003      	movs	r3, r0
 80171a6:	61fb      	str	r3, [r7, #28]
 80171a8:	e00a      	b.n	80171c0 <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 80171aa:	69bb      	ldr	r3, [r7, #24]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d107      	bne.n	80171c0 <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80171b0:	68b9      	ldr	r1, [r7, #8]
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	2200      	movs	r2, #0
 80171b6:	0018      	movs	r0, r3
 80171b8:	f000 fa49 	bl	801764e <xQueueGenericCreate>
 80171bc:	0003      	movs	r3, r0
 80171be:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80171c0:	69fb      	ldr	r3, [r7, #28]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d00e      	beq.n	80171e4 <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d003      	beq.n	80171d4 <osMessageQueueNew+0xd8>
        name = attr->name;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	617b      	str	r3, [r7, #20]
 80171d2:	e001      	b.n	80171d8 <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 80171d4:	2300      	movs	r3, #0
 80171d6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80171d8:	697a      	ldr	r2, [r7, #20]
 80171da:	69fb      	ldr	r3, [r7, #28]
 80171dc:	0011      	movs	r1, r2
 80171de:	0018      	movs	r0, r3
 80171e0:	f000 fdfc 	bl	8017ddc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80171e4:	69fb      	ldr	r3, [r7, #28]
}
 80171e6:	0018      	movs	r0, r3
 80171e8:	46bd      	mov	sp, r7
 80171ea:	b009      	add	sp, #36	; 0x24
 80171ec:	bd90      	pop	{r4, r7, pc}
	...

080171f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b088      	sub	sp, #32
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	60f8      	str	r0, [r7, #12]
 80171f8:	60b9      	str	r1, [r7, #8]
 80171fa:	603b      	str	r3, [r7, #0]
 80171fc:	1dfb      	adds	r3, r7, #7
 80171fe:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017204:	2300      	movs	r3, #0
 8017206:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017208:	f3ef 8305 	mrs	r3, IPSR
 801720c:	617b      	str	r3, [r7, #20]
  return(result);
 801720e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8017210:	2b00      	cmp	r3, #0
 8017212:	d024      	beq.n	801725e <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017214:	69bb      	ldr	r3, [r7, #24]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d005      	beq.n	8017226 <osMessageQueuePut+0x36>
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d002      	beq.n	8017226 <osMessageQueuePut+0x36>
 8017220:	683b      	ldr	r3, [r7, #0]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d003      	beq.n	801722e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8017226:	2304      	movs	r3, #4
 8017228:	425b      	negs	r3, r3
 801722a:	61fb      	str	r3, [r7, #28]
 801722c:	e034      	b.n	8017298 <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 801722e:	2300      	movs	r3, #0
 8017230:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8017232:	2310      	movs	r3, #16
 8017234:	18fa      	adds	r2, r7, r3
 8017236:	68b9      	ldr	r1, [r7, #8]
 8017238:	69b8      	ldr	r0, [r7, #24]
 801723a:	2300      	movs	r3, #0
 801723c:	f000 fb24 	bl	8017888 <xQueueGenericSendFromISR>
 8017240:	0003      	movs	r3, r0
 8017242:	2b01      	cmp	r3, #1
 8017244:	d003      	beq.n	801724e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8017246:	2303      	movs	r3, #3
 8017248:	425b      	negs	r3, r3
 801724a:	61fb      	str	r3, [r7, #28]
 801724c:	e024      	b.n	8017298 <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d021      	beq.n	8017298 <osMessageQueuePut+0xa8>
 8017254:	4b13      	ldr	r3, [pc, #76]	; (80172a4 <osMessageQueuePut+0xb4>)
 8017256:	2280      	movs	r2, #128	; 0x80
 8017258:	0552      	lsls	r2, r2, #21
 801725a:	601a      	str	r2, [r3, #0]
 801725c:	e01c      	b.n	8017298 <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801725e:	69bb      	ldr	r3, [r7, #24]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d002      	beq.n	801726a <osMessageQueuePut+0x7a>
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d103      	bne.n	8017272 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 801726a:	2304      	movs	r3, #4
 801726c:	425b      	negs	r3, r3
 801726e:	61fb      	str	r3, [r7, #28]
 8017270:	e012      	b.n	8017298 <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017272:	683a      	ldr	r2, [r7, #0]
 8017274:	68b9      	ldr	r1, [r7, #8]
 8017276:	69b8      	ldr	r0, [r7, #24]
 8017278:	2300      	movs	r3, #0
 801727a:	f000 fa41 	bl	8017700 <xQueueGenericSend>
 801727e:	0003      	movs	r3, r0
 8017280:	2b01      	cmp	r3, #1
 8017282:	d009      	beq.n	8017298 <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d003      	beq.n	8017292 <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 801728a:	2302      	movs	r3, #2
 801728c:	425b      	negs	r3, r3
 801728e:	61fb      	str	r3, [r7, #28]
 8017290:	e002      	b.n	8017298 <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 8017292:	2303      	movs	r3, #3
 8017294:	425b      	negs	r3, r3
 8017296:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8017298:	69fb      	ldr	r3, [r7, #28]
}
 801729a:	0018      	movs	r0, r3
 801729c:	46bd      	mov	sp, r7
 801729e:	b008      	add	sp, #32
 80172a0:	bd80      	pop	{r7, pc}
 80172a2:	46c0      	nop			; (mov r8, r8)
 80172a4:	e000ed04 	.word	0xe000ed04

080172a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b088      	sub	sp, #32
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	60f8      	str	r0, [r7, #12]
 80172b0:	60b9      	str	r1, [r7, #8]
 80172b2:	607a      	str	r2, [r7, #4]
 80172b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80172ba:	2300      	movs	r3, #0
 80172bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172be:	f3ef 8305 	mrs	r3, IPSR
 80172c2:	617b      	str	r3, [r7, #20]
  return(result);
 80172c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d024      	beq.n	8017314 <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80172ca:	69bb      	ldr	r3, [r7, #24]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d005      	beq.n	80172dc <osMessageQueueGet+0x34>
 80172d0:	68bb      	ldr	r3, [r7, #8]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d002      	beq.n	80172dc <osMessageQueueGet+0x34>
 80172d6:	683b      	ldr	r3, [r7, #0]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d003      	beq.n	80172e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80172dc:	2304      	movs	r3, #4
 80172de:	425b      	negs	r3, r3
 80172e0:	61fb      	str	r3, [r7, #28]
 80172e2:	e034      	b.n	801734e <osMessageQueueGet+0xa6>
    }
    else {
      yield = pdFALSE;
 80172e4:	2300      	movs	r3, #0
 80172e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80172e8:	2310      	movs	r3, #16
 80172ea:	18fa      	adds	r2, r7, r3
 80172ec:	68b9      	ldr	r1, [r7, #8]
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	0018      	movs	r0, r3
 80172f2:	f000 fbf2 	bl	8017ada <xQueueReceiveFromISR>
 80172f6:	0003      	movs	r3, r0
 80172f8:	2b01      	cmp	r3, #1
 80172fa:	d003      	beq.n	8017304 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80172fc:	2303      	movs	r3, #3
 80172fe:	425b      	negs	r3, r3
 8017300:	61fb      	str	r3, [r7, #28]
 8017302:	e024      	b.n	801734e <osMessageQueueGet+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 8017304:	693b      	ldr	r3, [r7, #16]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d021      	beq.n	801734e <osMessageQueueGet+0xa6>
 801730a:	4b13      	ldr	r3, [pc, #76]	; (8017358 <osMessageQueueGet+0xb0>)
 801730c:	2280      	movs	r2, #128	; 0x80
 801730e:	0552      	lsls	r2, r2, #21
 8017310:	601a      	str	r2, [r3, #0]
 8017312:	e01c      	b.n	801734e <osMessageQueueGet+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017314:	69bb      	ldr	r3, [r7, #24]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d002      	beq.n	8017320 <osMessageQueueGet+0x78>
 801731a:	68bb      	ldr	r3, [r7, #8]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d103      	bne.n	8017328 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8017320:	2304      	movs	r3, #4
 8017322:	425b      	negs	r3, r3
 8017324:	61fb      	str	r3, [r7, #28]
 8017326:	e012      	b.n	801734e <osMessageQueueGet+0xa6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017328:	683a      	ldr	r2, [r7, #0]
 801732a:	68b9      	ldr	r1, [r7, #8]
 801732c:	69bb      	ldr	r3, [r7, #24]
 801732e:	0018      	movs	r0, r3
 8017330:	f000 fb1e 	bl	8017970 <xQueueReceive>
 8017334:	0003      	movs	r3, r0
 8017336:	2b01      	cmp	r3, #1
 8017338:	d009      	beq.n	801734e <osMessageQueueGet+0xa6>
        if (timeout != 0U) {
 801733a:	683b      	ldr	r3, [r7, #0]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d003      	beq.n	8017348 <osMessageQueueGet+0xa0>
          stat = osErrorTimeout;
 8017340:	2302      	movs	r3, #2
 8017342:	425b      	negs	r3, r3
 8017344:	61fb      	str	r3, [r7, #28]
 8017346:	e002      	b.n	801734e <osMessageQueueGet+0xa6>
        } else {
          stat = osErrorResource;
 8017348:	2303      	movs	r3, #3
 801734a:	425b      	negs	r3, r3
 801734c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801734e:	69fb      	ldr	r3, [r7, #28]
}
 8017350:	0018      	movs	r0, r3
 8017352:	46bd      	mov	sp, r7
 8017354:	b008      	add	sp, #32
 8017356:	bd80      	pop	{r7, pc}
 8017358:	e000ed04 	.word	0xe000ed04

0801735c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801735c:	b580      	push	{r7, lr}
 801735e:	b084      	sub	sp, #16
 8017360:	af00      	add	r7, sp, #0
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	4a06      	ldr	r2, [pc, #24]	; (8017384 <vApplicationGetIdleTaskMemory+0x28>)
 801736c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801736e:	68bb      	ldr	r3, [r7, #8]
 8017370:	4a05      	ldr	r2, [pc, #20]	; (8017388 <vApplicationGetIdleTaskMemory+0x2c>)
 8017372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2280      	movs	r2, #128	; 0x80
 8017378:	601a      	str	r2, [r3, #0]
}
 801737a:	46c0      	nop			; (mov r8, r8)
 801737c:	46bd      	mov	sp, r7
 801737e:	b004      	add	sp, #16
 8017380:	bd80      	pop	{r7, pc}
 8017382:	46c0      	nop			; (mov r8, r8)
 8017384:	200005ac 	.word	0x200005ac
 8017388:	20000654 	.word	0x20000654

0801738c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801738c:	b580      	push	{r7, lr}
 801738e:	b084      	sub	sp, #16
 8017390:	af00      	add	r7, sp, #0
 8017392:	60f8      	str	r0, [r7, #12]
 8017394:	60b9      	str	r1, [r7, #8]
 8017396:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	4a06      	ldr	r2, [pc, #24]	; (80173b4 <vApplicationGetTimerTaskMemory+0x28>)
 801739c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	4a05      	ldr	r2, [pc, #20]	; (80173b8 <vApplicationGetTimerTaskMemory+0x2c>)
 80173a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2280      	movs	r2, #128	; 0x80
 80173a8:	0052      	lsls	r2, r2, #1
 80173aa:	601a      	str	r2, [r3, #0]
}
 80173ac:	46c0      	nop			; (mov r8, r8)
 80173ae:	46bd      	mov	sp, r7
 80173b0:	b004      	add	sp, #16
 80173b2:	bd80      	pop	{r7, pc}
 80173b4:	20000854 	.word	0x20000854
 80173b8:	200008fc 	.word	0x200008fc

080173bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b082      	sub	sp, #8
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	3308      	adds	r3, #8
 80173c8:	001a      	movs	r2, r3
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2201      	movs	r2, #1
 80173d2:	4252      	negs	r2, r2
 80173d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	3308      	adds	r3, #8
 80173da:	001a      	movs	r2, r3
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	3308      	adds	r3, #8
 80173e4:	001a      	movs	r2, r3
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	2200      	movs	r2, #0
 80173ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80173f0:	46c0      	nop			; (mov r8, r8)
 80173f2:	46bd      	mov	sp, r7
 80173f4:	b002      	add	sp, #8
 80173f6:	bd80      	pop	{r7, pc}

080173f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b082      	sub	sp, #8
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2200      	movs	r2, #0
 8017404:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017406:	46c0      	nop			; (mov r8, r8)
 8017408:	46bd      	mov	sp, r7
 801740a:	b002      	add	sp, #8
 801740c:	bd80      	pop	{r7, pc}

0801740e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801740e:	b580      	push	{r7, lr}
 8017410:	b084      	sub	sp, #16
 8017412:	af00      	add	r7, sp, #0
 8017414:	6078      	str	r0, [r7, #4]
 8017416:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	685b      	ldr	r3, [r3, #4]
 801741c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801741e:	683b      	ldr	r3, [r7, #0]
 8017420:	68fa      	ldr	r2, [r7, #12]
 8017422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	689a      	ldr	r2, [r3, #8]
 8017428:	683b      	ldr	r3, [r7, #0]
 801742a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	689b      	ldr	r3, [r3, #8]
 8017430:	683a      	ldr	r2, [r7, #0]
 8017432:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	683a      	ldr	r2, [r7, #0]
 8017438:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	687a      	ldr	r2, [r7, #4]
 801743e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	1c5a      	adds	r2, r3, #1
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	601a      	str	r2, [r3, #0]
}
 801744a:	46c0      	nop			; (mov r8, r8)
 801744c:	46bd      	mov	sp, r7
 801744e:	b004      	add	sp, #16
 8017450:	bd80      	pop	{r7, pc}

08017452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017452:	b580      	push	{r7, lr}
 8017454:	b084      	sub	sp, #16
 8017456:	af00      	add	r7, sp, #0
 8017458:	6078      	str	r0, [r7, #4]
 801745a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017462:	68bb      	ldr	r3, [r7, #8]
 8017464:	3301      	adds	r3, #1
 8017466:	d103      	bne.n	8017470 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	691b      	ldr	r3, [r3, #16]
 801746c:	60fb      	str	r3, [r7, #12]
 801746e:	e00c      	b.n	801748a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	3308      	adds	r3, #8
 8017474:	60fb      	str	r3, [r7, #12]
 8017476:	e002      	b.n	801747e <vListInsert+0x2c>
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	685b      	ldr	r3, [r3, #4]
 801747c:	60fb      	str	r3, [r7, #12]
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	685b      	ldr	r3, [r3, #4]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	68ba      	ldr	r2, [r7, #8]
 8017486:	429a      	cmp	r2, r3
 8017488:	d2f6      	bcs.n	8017478 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	685a      	ldr	r2, [r3, #4]
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	685b      	ldr	r3, [r3, #4]
 8017496:	683a      	ldr	r2, [r7, #0]
 8017498:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	68fa      	ldr	r2, [r7, #12]
 801749e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	683a      	ldr	r2, [r7, #0]
 80174a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	687a      	ldr	r2, [r7, #4]
 80174aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	1c5a      	adds	r2, r3, #1
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	601a      	str	r2, [r3, #0]
}
 80174b6:	46c0      	nop			; (mov r8, r8)
 80174b8:	46bd      	mov	sp, r7
 80174ba:	b004      	add	sp, #16
 80174bc:	bd80      	pop	{r7, pc}

080174be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80174be:	b580      	push	{r7, lr}
 80174c0:	b084      	sub	sp, #16
 80174c2:	af00      	add	r7, sp, #0
 80174c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	691b      	ldr	r3, [r3, #16]
 80174ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	685b      	ldr	r3, [r3, #4]
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	6892      	ldr	r2, [r2, #8]
 80174d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	689b      	ldr	r3, [r3, #8]
 80174da:	687a      	ldr	r2, [r7, #4]
 80174dc:	6852      	ldr	r2, [r2, #4]
 80174de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	685b      	ldr	r3, [r3, #4]
 80174e4:	687a      	ldr	r2, [r7, #4]
 80174e6:	429a      	cmp	r2, r3
 80174e8:	d103      	bne.n	80174f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	689a      	ldr	r2, [r3, #8]
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2200      	movs	r2, #0
 80174f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	1e5a      	subs	r2, r3, #1
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	681b      	ldr	r3, [r3, #0]
}
 8017506:	0018      	movs	r0, r3
 8017508:	46bd      	mov	sp, r7
 801750a:	b004      	add	sp, #16
 801750c:	bd80      	pop	{r7, pc}

0801750e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801750e:	b580      	push	{r7, lr}
 8017510:	b084      	sub	sp, #16
 8017512:	af00      	add	r7, sp, #0
 8017514:	6078      	str	r0, [r7, #4]
 8017516:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d101      	bne.n	8017526 <xQueueGenericReset+0x18>
 8017522:	b672      	cpsid	i
 8017524:	e7fe      	b.n	8017524 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8017526:	f002 f82b 	bl	8019580 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	681a      	ldr	r2, [r3, #0]
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017536:	434b      	muls	r3, r1
 8017538:	18d2      	adds	r2, r2, r3
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	2200      	movs	r2, #0
 8017542:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	681a      	ldr	r2, [r3, #0]
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	681a      	ldr	r2, [r3, #0]
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017554:	1e59      	subs	r1, r3, #1
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801755a:	434b      	muls	r3, r1
 801755c:	18d2      	adds	r2, r2, r3
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	2244      	movs	r2, #68	; 0x44
 8017566:	21ff      	movs	r1, #255	; 0xff
 8017568:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	2245      	movs	r2, #69	; 0x45
 801756e:	21ff      	movs	r1, #255	; 0xff
 8017570:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d10d      	bne.n	8017594 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	691b      	ldr	r3, [r3, #16]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d013      	beq.n	80175a8 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	3310      	adds	r3, #16
 8017584:	0018      	movs	r0, r3
 8017586:	f001 f9dd 	bl	8018944 <xTaskRemoveFromEventList>
 801758a:	1e03      	subs	r3, r0, #0
 801758c:	d00c      	beq.n	80175a8 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801758e:	f001 ffe7 	bl	8019560 <vPortYield>
 8017592:	e009      	b.n	80175a8 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	3310      	adds	r3, #16
 8017598:	0018      	movs	r0, r3
 801759a:	f7ff ff0f 	bl	80173bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	3324      	adds	r3, #36	; 0x24
 80175a2:	0018      	movs	r0, r3
 80175a4:	f7ff ff0a 	bl	80173bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80175a8:	f001 fffc 	bl	80195a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80175ac:	2301      	movs	r3, #1
}
 80175ae:	0018      	movs	r0, r3
 80175b0:	46bd      	mov	sp, r7
 80175b2:	b004      	add	sp, #16
 80175b4:	bd80      	pop	{r7, pc}

080175b6 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80175b6:	b590      	push	{r4, r7, lr}
 80175b8:	b089      	sub	sp, #36	; 0x24
 80175ba:	af02      	add	r7, sp, #8
 80175bc:	60f8      	str	r0, [r7, #12]
 80175be:	60b9      	str	r1, [r7, #8]
 80175c0:	607a      	str	r2, [r7, #4]
 80175c2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d101      	bne.n	80175ce <xQueueGenericCreateStatic+0x18>
 80175ca:	b672      	cpsid	i
 80175cc:	e7fe      	b.n	80175cc <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d101      	bne.n	80175d8 <xQueueGenericCreateStatic+0x22>
 80175d4:	b672      	cpsid	i
 80175d6:	e7fe      	b.n	80175d6 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d002      	beq.n	80175e4 <xQueueGenericCreateStatic+0x2e>
 80175de:	68bb      	ldr	r3, [r7, #8]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d001      	beq.n	80175e8 <xQueueGenericCreateStatic+0x32>
 80175e4:	2301      	movs	r3, #1
 80175e6:	e000      	b.n	80175ea <xQueueGenericCreateStatic+0x34>
 80175e8:	2300      	movs	r3, #0
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d101      	bne.n	80175f2 <xQueueGenericCreateStatic+0x3c>
 80175ee:	b672      	cpsid	i
 80175f0:	e7fe      	b.n	80175f0 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d102      	bne.n	80175fe <xQueueGenericCreateStatic+0x48>
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d101      	bne.n	8017602 <xQueueGenericCreateStatic+0x4c>
 80175fe:	2301      	movs	r3, #1
 8017600:	e000      	b.n	8017604 <xQueueGenericCreateStatic+0x4e>
 8017602:	2300      	movs	r3, #0
 8017604:	2b00      	cmp	r3, #0
 8017606:	d101      	bne.n	801760c <xQueueGenericCreateStatic+0x56>
 8017608:	b672      	cpsid	i
 801760a:	e7fe      	b.n	801760a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801760c:	2350      	movs	r3, #80	; 0x50
 801760e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017610:	693b      	ldr	r3, [r7, #16]
 8017612:	2b50      	cmp	r3, #80	; 0x50
 8017614:	d001      	beq.n	801761a <xQueueGenericCreateStatic+0x64>
 8017616:	b672      	cpsid	i
 8017618:	e7fe      	b.n	8017618 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801761a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8017620:	697b      	ldr	r3, [r7, #20]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d00e      	beq.n	8017644 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017626:	697b      	ldr	r3, [r7, #20]
 8017628:	2246      	movs	r2, #70	; 0x46
 801762a:	2101      	movs	r1, #1
 801762c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801762e:	2328      	movs	r3, #40	; 0x28
 8017630:	18fb      	adds	r3, r7, r3
 8017632:	781c      	ldrb	r4, [r3, #0]
 8017634:	687a      	ldr	r2, [r7, #4]
 8017636:	68b9      	ldr	r1, [r7, #8]
 8017638:	68f8      	ldr	r0, [r7, #12]
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	9300      	str	r3, [sp, #0]
 801763e:	0023      	movs	r3, r4
 8017640:	f000 f837 	bl	80176b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017644:	697b      	ldr	r3, [r7, #20]
	}
 8017646:	0018      	movs	r0, r3
 8017648:	46bd      	mov	sp, r7
 801764a:	b007      	add	sp, #28
 801764c:	bd90      	pop	{r4, r7, pc}

0801764e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801764e:	b590      	push	{r4, r7, lr}
 8017650:	b08b      	sub	sp, #44	; 0x2c
 8017652:	af02      	add	r7, sp, #8
 8017654:	60f8      	str	r0, [r7, #12]
 8017656:	60b9      	str	r1, [r7, #8]
 8017658:	1dfb      	adds	r3, r7, #7
 801765a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d101      	bne.n	8017666 <xQueueGenericCreate+0x18>
 8017662:	b672      	cpsid	i
 8017664:	e7fe      	b.n	8017664 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	68ba      	ldr	r2, [r7, #8]
 801766a:	4353      	muls	r3, r2
 801766c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801766e:	69fb      	ldr	r3, [r7, #28]
 8017670:	3350      	adds	r3, #80	; 0x50
 8017672:	0018      	movs	r0, r3
 8017674:	f002 f81c 	bl	80196b0 <pvPortMalloc>
 8017678:	0003      	movs	r3, r0
 801767a:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 801767c:	69bb      	ldr	r3, [r7, #24]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d012      	beq.n	80176a8 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017682:	69bb      	ldr	r3, [r7, #24]
 8017684:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	3350      	adds	r3, #80	; 0x50
 801768a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801768c:	69bb      	ldr	r3, [r7, #24]
 801768e:	2246      	movs	r2, #70	; 0x46
 8017690:	2100      	movs	r1, #0
 8017692:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017694:	1dfb      	adds	r3, r7, #7
 8017696:	781c      	ldrb	r4, [r3, #0]
 8017698:	697a      	ldr	r2, [r7, #20]
 801769a:	68b9      	ldr	r1, [r7, #8]
 801769c:	68f8      	ldr	r0, [r7, #12]
 801769e:	69bb      	ldr	r3, [r7, #24]
 80176a0:	9300      	str	r3, [sp, #0]
 80176a2:	0023      	movs	r3, r4
 80176a4:	f000 f805 	bl	80176b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80176a8:	69bb      	ldr	r3, [r7, #24]
	}
 80176aa:	0018      	movs	r0, r3
 80176ac:	46bd      	mov	sp, r7
 80176ae:	b009      	add	sp, #36	; 0x24
 80176b0:	bd90      	pop	{r4, r7, pc}

080176b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80176b2:	b580      	push	{r7, lr}
 80176b4:	b084      	sub	sp, #16
 80176b6:	af00      	add	r7, sp, #0
 80176b8:	60f8      	str	r0, [r7, #12]
 80176ba:	60b9      	str	r1, [r7, #8]
 80176bc:	607a      	str	r2, [r7, #4]
 80176be:	001a      	movs	r2, r3
 80176c0:	1cfb      	adds	r3, r7, #3
 80176c2:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d103      	bne.n	80176d2 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80176ca:	69bb      	ldr	r3, [r7, #24]
 80176cc:	69ba      	ldr	r2, [r7, #24]
 80176ce:	601a      	str	r2, [r3, #0]
 80176d0:	e002      	b.n	80176d8 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80176d2:	69bb      	ldr	r3, [r7, #24]
 80176d4:	687a      	ldr	r2, [r7, #4]
 80176d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80176d8:	69bb      	ldr	r3, [r7, #24]
 80176da:	68fa      	ldr	r2, [r7, #12]
 80176dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80176de:	69bb      	ldr	r3, [r7, #24]
 80176e0:	68ba      	ldr	r2, [r7, #8]
 80176e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80176e4:	69bb      	ldr	r3, [r7, #24]
 80176e6:	2101      	movs	r1, #1
 80176e8:	0018      	movs	r0, r3
 80176ea:	f7ff ff10 	bl	801750e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80176ee:	69bb      	ldr	r3, [r7, #24]
 80176f0:	1cfa      	adds	r2, r7, #3
 80176f2:	214c      	movs	r1, #76	; 0x4c
 80176f4:	7812      	ldrb	r2, [r2, #0]
 80176f6:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80176f8:	46c0      	nop			; (mov r8, r8)
 80176fa:	46bd      	mov	sp, r7
 80176fc:	b004      	add	sp, #16
 80176fe:	bd80      	pop	{r7, pc}

08017700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b08a      	sub	sp, #40	; 0x28
 8017704:	af00      	add	r7, sp, #0
 8017706:	60f8      	str	r0, [r7, #12]
 8017708:	60b9      	str	r1, [r7, #8]
 801770a:	607a      	str	r2, [r7, #4]
 801770c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801770e:	2300      	movs	r3, #0
 8017710:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8017716:	6a3b      	ldr	r3, [r7, #32]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d101      	bne.n	8017720 <xQueueGenericSend+0x20>
 801771c:	b672      	cpsid	i
 801771e:	e7fe      	b.n	801771e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d103      	bne.n	801772e <xQueueGenericSend+0x2e>
 8017726:	6a3b      	ldr	r3, [r7, #32]
 8017728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801772a:	2b00      	cmp	r3, #0
 801772c:	d101      	bne.n	8017732 <xQueueGenericSend+0x32>
 801772e:	2301      	movs	r3, #1
 8017730:	e000      	b.n	8017734 <xQueueGenericSend+0x34>
 8017732:	2300      	movs	r3, #0
 8017734:	2b00      	cmp	r3, #0
 8017736:	d101      	bne.n	801773c <xQueueGenericSend+0x3c>
 8017738:	b672      	cpsid	i
 801773a:	e7fe      	b.n	801773a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	2b02      	cmp	r3, #2
 8017740:	d103      	bne.n	801774a <xQueueGenericSend+0x4a>
 8017742:	6a3b      	ldr	r3, [r7, #32]
 8017744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017746:	2b01      	cmp	r3, #1
 8017748:	d101      	bne.n	801774e <xQueueGenericSend+0x4e>
 801774a:	2301      	movs	r3, #1
 801774c:	e000      	b.n	8017750 <xQueueGenericSend+0x50>
 801774e:	2300      	movs	r3, #0
 8017750:	2b00      	cmp	r3, #0
 8017752:	d101      	bne.n	8017758 <xQueueGenericSend+0x58>
 8017754:	b672      	cpsid	i
 8017756:	e7fe      	b.n	8017756 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017758:	f001 fa9a 	bl	8018c90 <xTaskGetSchedulerState>
 801775c:	1e03      	subs	r3, r0, #0
 801775e:	d102      	bne.n	8017766 <xQueueGenericSend+0x66>
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d101      	bne.n	801776a <xQueueGenericSend+0x6a>
 8017766:	2301      	movs	r3, #1
 8017768:	e000      	b.n	801776c <xQueueGenericSend+0x6c>
 801776a:	2300      	movs	r3, #0
 801776c:	2b00      	cmp	r3, #0
 801776e:	d101      	bne.n	8017774 <xQueueGenericSend+0x74>
 8017770:	b672      	cpsid	i
 8017772:	e7fe      	b.n	8017772 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017774:	f001 ff04 	bl	8019580 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017778:	6a3b      	ldr	r3, [r7, #32]
 801777a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801777c:	6a3b      	ldr	r3, [r7, #32]
 801777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017780:	429a      	cmp	r2, r3
 8017782:	d302      	bcc.n	801778a <xQueueGenericSend+0x8a>
 8017784:	683b      	ldr	r3, [r7, #0]
 8017786:	2b02      	cmp	r3, #2
 8017788:	d11e      	bne.n	80177c8 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801778a:	683a      	ldr	r2, [r7, #0]
 801778c:	68b9      	ldr	r1, [r7, #8]
 801778e:	6a3b      	ldr	r3, [r7, #32]
 8017790:	0018      	movs	r0, r3
 8017792:	f000 fa05 	bl	8017ba0 <prvCopyDataToQueue>
 8017796:	0003      	movs	r3, r0
 8017798:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801779a:	6a3b      	ldr	r3, [r7, #32]
 801779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d009      	beq.n	80177b6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80177a2:	6a3b      	ldr	r3, [r7, #32]
 80177a4:	3324      	adds	r3, #36	; 0x24
 80177a6:	0018      	movs	r0, r3
 80177a8:	f001 f8cc 	bl	8018944 <xTaskRemoveFromEventList>
 80177ac:	1e03      	subs	r3, r0, #0
 80177ae:	d007      	beq.n	80177c0 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80177b0:	f001 fed6 	bl	8019560 <vPortYield>
 80177b4:	e004      	b.n	80177c0 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80177b6:	69fb      	ldr	r3, [r7, #28]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d001      	beq.n	80177c0 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80177bc:	f001 fed0 	bl	8019560 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80177c0:	f001 fef0 	bl	80195a4 <vPortExitCritical>
				return pdPASS;
 80177c4:	2301      	movs	r3, #1
 80177c6:	e05b      	b.n	8017880 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d103      	bne.n	80177d6 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80177ce:	f001 fee9 	bl	80195a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80177d2:	2300      	movs	r3, #0
 80177d4:	e054      	b.n	8017880 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80177d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d106      	bne.n	80177ea <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80177dc:	2314      	movs	r3, #20
 80177de:	18fb      	adds	r3, r7, r3
 80177e0:	0018      	movs	r0, r3
 80177e2:	f001 f90b 	bl	80189fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80177e6:	2301      	movs	r3, #1
 80177e8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80177ea:	f001 fedb 	bl	80195a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80177ee:	f000 feb5 	bl	801855c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80177f2:	f001 fec5 	bl	8019580 <vPortEnterCritical>
 80177f6:	6a3b      	ldr	r3, [r7, #32]
 80177f8:	2244      	movs	r2, #68	; 0x44
 80177fa:	5c9b      	ldrb	r3, [r3, r2]
 80177fc:	b25b      	sxtb	r3, r3
 80177fe:	3301      	adds	r3, #1
 8017800:	d103      	bne.n	801780a <xQueueGenericSend+0x10a>
 8017802:	6a3b      	ldr	r3, [r7, #32]
 8017804:	2244      	movs	r2, #68	; 0x44
 8017806:	2100      	movs	r1, #0
 8017808:	5499      	strb	r1, [r3, r2]
 801780a:	6a3b      	ldr	r3, [r7, #32]
 801780c:	2245      	movs	r2, #69	; 0x45
 801780e:	5c9b      	ldrb	r3, [r3, r2]
 8017810:	b25b      	sxtb	r3, r3
 8017812:	3301      	adds	r3, #1
 8017814:	d103      	bne.n	801781e <xQueueGenericSend+0x11e>
 8017816:	6a3b      	ldr	r3, [r7, #32]
 8017818:	2245      	movs	r2, #69	; 0x45
 801781a:	2100      	movs	r1, #0
 801781c:	5499      	strb	r1, [r3, r2]
 801781e:	f001 fec1 	bl	80195a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017822:	1d3a      	adds	r2, r7, #4
 8017824:	2314      	movs	r3, #20
 8017826:	18fb      	adds	r3, r7, r3
 8017828:	0011      	movs	r1, r2
 801782a:	0018      	movs	r0, r3
 801782c:	f001 f8fa 	bl	8018a24 <xTaskCheckForTimeOut>
 8017830:	1e03      	subs	r3, r0, #0
 8017832:	d11e      	bne.n	8017872 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017834:	6a3b      	ldr	r3, [r7, #32]
 8017836:	0018      	movs	r0, r3
 8017838:	f000 fab7 	bl	8017daa <prvIsQueueFull>
 801783c:	1e03      	subs	r3, r0, #0
 801783e:	d011      	beq.n	8017864 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017840:	6a3b      	ldr	r3, [r7, #32]
 8017842:	3310      	adds	r3, #16
 8017844:	687a      	ldr	r2, [r7, #4]
 8017846:	0011      	movs	r1, r2
 8017848:	0018      	movs	r0, r3
 801784a:	f001 f837 	bl	80188bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801784e:	6a3b      	ldr	r3, [r7, #32]
 8017850:	0018      	movs	r0, r3
 8017852:	f000 fa36 	bl	8017cc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017856:	f000 fe8d 	bl	8018574 <xTaskResumeAll>
 801785a:	1e03      	subs	r3, r0, #0
 801785c:	d18a      	bne.n	8017774 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 801785e:	f001 fe7f 	bl	8019560 <vPortYield>
 8017862:	e787      	b.n	8017774 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017864:	6a3b      	ldr	r3, [r7, #32]
 8017866:	0018      	movs	r0, r3
 8017868:	f000 fa2b 	bl	8017cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801786c:	f000 fe82 	bl	8018574 <xTaskResumeAll>
 8017870:	e780      	b.n	8017774 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017872:	6a3b      	ldr	r3, [r7, #32]
 8017874:	0018      	movs	r0, r3
 8017876:	f000 fa24 	bl	8017cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801787a:	f000 fe7b 	bl	8018574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801787e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017880:	0018      	movs	r0, r3
 8017882:	46bd      	mov	sp, r7
 8017884:	b00a      	add	sp, #40	; 0x28
 8017886:	bd80      	pop	{r7, pc}

08017888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017888:	b590      	push	{r4, r7, lr}
 801788a:	b08b      	sub	sp, #44	; 0x2c
 801788c:	af00      	add	r7, sp, #0
 801788e:	60f8      	str	r0, [r7, #12]
 8017890:	60b9      	str	r1, [r7, #8]
 8017892:	607a      	str	r2, [r7, #4]
 8017894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801789a:	6a3b      	ldr	r3, [r7, #32]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d101      	bne.n	80178a4 <xQueueGenericSendFromISR+0x1c>
 80178a0:	b672      	cpsid	i
 80178a2:	e7fe      	b.n	80178a2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d103      	bne.n	80178b2 <xQueueGenericSendFromISR+0x2a>
 80178aa:	6a3b      	ldr	r3, [r7, #32]
 80178ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d101      	bne.n	80178b6 <xQueueGenericSendFromISR+0x2e>
 80178b2:	2301      	movs	r3, #1
 80178b4:	e000      	b.n	80178b8 <xQueueGenericSendFromISR+0x30>
 80178b6:	2300      	movs	r3, #0
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d101      	bne.n	80178c0 <xQueueGenericSendFromISR+0x38>
 80178bc:	b672      	cpsid	i
 80178be:	e7fe      	b.n	80178be <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80178c0:	683b      	ldr	r3, [r7, #0]
 80178c2:	2b02      	cmp	r3, #2
 80178c4:	d103      	bne.n	80178ce <xQueueGenericSendFromISR+0x46>
 80178c6:	6a3b      	ldr	r3, [r7, #32]
 80178c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178ca:	2b01      	cmp	r3, #1
 80178cc:	d101      	bne.n	80178d2 <xQueueGenericSendFromISR+0x4a>
 80178ce:	2301      	movs	r3, #1
 80178d0:	e000      	b.n	80178d4 <xQueueGenericSendFromISR+0x4c>
 80178d2:	2300      	movs	r3, #0
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d101      	bne.n	80178dc <xQueueGenericSendFromISR+0x54>
 80178d8:	b672      	cpsid	i
 80178da:	e7fe      	b.n	80178da <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80178dc:	f001 fe7a 	bl	80195d4 <ulSetInterruptMaskFromISR>
 80178e0:	0003      	movs	r3, r0
 80178e2:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80178e4:	6a3b      	ldr	r3, [r7, #32]
 80178e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80178e8:	6a3b      	ldr	r3, [r7, #32]
 80178ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178ec:	429a      	cmp	r2, r3
 80178ee:	d302      	bcc.n	80178f6 <xQueueGenericSendFromISR+0x6e>
 80178f0:	683b      	ldr	r3, [r7, #0]
 80178f2:	2b02      	cmp	r3, #2
 80178f4:	d131      	bne.n	801795a <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80178f6:	241b      	movs	r4, #27
 80178f8:	193b      	adds	r3, r7, r4
 80178fa:	6a3a      	ldr	r2, [r7, #32]
 80178fc:	2145      	movs	r1, #69	; 0x45
 80178fe:	5c52      	ldrb	r2, [r2, r1]
 8017900:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017902:	6a3b      	ldr	r3, [r7, #32]
 8017904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017906:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017908:	683a      	ldr	r2, [r7, #0]
 801790a:	68b9      	ldr	r1, [r7, #8]
 801790c:	6a3b      	ldr	r3, [r7, #32]
 801790e:	0018      	movs	r0, r3
 8017910:	f000 f946 	bl	8017ba0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017914:	193b      	adds	r3, r7, r4
 8017916:	781b      	ldrb	r3, [r3, #0]
 8017918:	b25b      	sxtb	r3, r3
 801791a:	3301      	adds	r3, #1
 801791c:	d111      	bne.n	8017942 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801791e:	6a3b      	ldr	r3, [r7, #32]
 8017920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017922:	2b00      	cmp	r3, #0
 8017924:	d016      	beq.n	8017954 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017926:	6a3b      	ldr	r3, [r7, #32]
 8017928:	3324      	adds	r3, #36	; 0x24
 801792a:	0018      	movs	r0, r3
 801792c:	f001 f80a 	bl	8018944 <xTaskRemoveFromEventList>
 8017930:	1e03      	subs	r3, r0, #0
 8017932:	d00f      	beq.n	8017954 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d00c      	beq.n	8017954 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	2201      	movs	r2, #1
 801793e:	601a      	str	r2, [r3, #0]
 8017940:	e008      	b.n	8017954 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017942:	231b      	movs	r3, #27
 8017944:	18fb      	adds	r3, r7, r3
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	3301      	adds	r3, #1
 801794a:	b2db      	uxtb	r3, r3
 801794c:	b259      	sxtb	r1, r3
 801794e:	6a3b      	ldr	r3, [r7, #32]
 8017950:	2245      	movs	r2, #69	; 0x45
 8017952:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8017954:	2301      	movs	r3, #1
 8017956:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8017958:	e001      	b.n	801795e <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801795a:	2300      	movs	r3, #0
 801795c:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801795e:	69fb      	ldr	r3, [r7, #28]
 8017960:	0018      	movs	r0, r3
 8017962:	f001 fe3d 	bl	80195e0 <vClearInterruptMaskFromISR>

	return xReturn;
 8017966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017968:	0018      	movs	r0, r3
 801796a:	46bd      	mov	sp, r7
 801796c:	b00b      	add	sp, #44	; 0x2c
 801796e:	bd90      	pop	{r4, r7, pc}

08017970 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b08a      	sub	sp, #40	; 0x28
 8017974:	af00      	add	r7, sp, #0
 8017976:	60f8      	str	r0, [r7, #12]
 8017978:	60b9      	str	r1, [r7, #8]
 801797a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801797c:	2300      	movs	r3, #0
 801797e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017984:	6a3b      	ldr	r3, [r7, #32]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d101      	bne.n	801798e <xQueueReceive+0x1e>
 801798a:	b672      	cpsid	i
 801798c:	e7fe      	b.n	801798c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d103      	bne.n	801799c <xQueueReceive+0x2c>
 8017994:	6a3b      	ldr	r3, [r7, #32]
 8017996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017998:	2b00      	cmp	r3, #0
 801799a:	d101      	bne.n	80179a0 <xQueueReceive+0x30>
 801799c:	2301      	movs	r3, #1
 801799e:	e000      	b.n	80179a2 <xQueueReceive+0x32>
 80179a0:	2300      	movs	r3, #0
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d101      	bne.n	80179aa <xQueueReceive+0x3a>
 80179a6:	b672      	cpsid	i
 80179a8:	e7fe      	b.n	80179a8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80179aa:	f001 f971 	bl	8018c90 <xTaskGetSchedulerState>
 80179ae:	1e03      	subs	r3, r0, #0
 80179b0:	d102      	bne.n	80179b8 <xQueueReceive+0x48>
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d101      	bne.n	80179bc <xQueueReceive+0x4c>
 80179b8:	2301      	movs	r3, #1
 80179ba:	e000      	b.n	80179be <xQueueReceive+0x4e>
 80179bc:	2300      	movs	r3, #0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d101      	bne.n	80179c6 <xQueueReceive+0x56>
 80179c2:	b672      	cpsid	i
 80179c4:	e7fe      	b.n	80179c4 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80179c6:	f001 fddb 	bl	8019580 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80179ca:	6a3b      	ldr	r3, [r7, #32]
 80179cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179ce:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80179d0:	69fb      	ldr	r3, [r7, #28]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d01a      	beq.n	8017a0c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80179d6:	68ba      	ldr	r2, [r7, #8]
 80179d8:	6a3b      	ldr	r3, [r7, #32]
 80179da:	0011      	movs	r1, r2
 80179dc:	0018      	movs	r0, r3
 80179de:	f000 f94a 	bl	8017c76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80179e2:	69fb      	ldr	r3, [r7, #28]
 80179e4:	1e5a      	subs	r2, r3, #1
 80179e6:	6a3b      	ldr	r3, [r7, #32]
 80179e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80179ea:	6a3b      	ldr	r3, [r7, #32]
 80179ec:	691b      	ldr	r3, [r3, #16]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d008      	beq.n	8017a04 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80179f2:	6a3b      	ldr	r3, [r7, #32]
 80179f4:	3310      	adds	r3, #16
 80179f6:	0018      	movs	r0, r3
 80179f8:	f000 ffa4 	bl	8018944 <xTaskRemoveFromEventList>
 80179fc:	1e03      	subs	r3, r0, #0
 80179fe:	d001      	beq.n	8017a04 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017a00:	f001 fdae 	bl	8019560 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017a04:	f001 fdce 	bl	80195a4 <vPortExitCritical>
				return pdPASS;
 8017a08:	2301      	movs	r3, #1
 8017a0a:	e062      	b.n	8017ad2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d103      	bne.n	8017a1a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017a12:	f001 fdc7 	bl	80195a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017a16:	2300      	movs	r3, #0
 8017a18:	e05b      	b.n	8017ad2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d106      	bne.n	8017a2e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017a20:	2314      	movs	r3, #20
 8017a22:	18fb      	adds	r3, r7, r3
 8017a24:	0018      	movs	r0, r3
 8017a26:	f000 ffe9 	bl	80189fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017a2a:	2301      	movs	r3, #1
 8017a2c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017a2e:	f001 fdb9 	bl	80195a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017a32:	f000 fd93 	bl	801855c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017a36:	f001 fda3 	bl	8019580 <vPortEnterCritical>
 8017a3a:	6a3b      	ldr	r3, [r7, #32]
 8017a3c:	2244      	movs	r2, #68	; 0x44
 8017a3e:	5c9b      	ldrb	r3, [r3, r2]
 8017a40:	b25b      	sxtb	r3, r3
 8017a42:	3301      	adds	r3, #1
 8017a44:	d103      	bne.n	8017a4e <xQueueReceive+0xde>
 8017a46:	6a3b      	ldr	r3, [r7, #32]
 8017a48:	2244      	movs	r2, #68	; 0x44
 8017a4a:	2100      	movs	r1, #0
 8017a4c:	5499      	strb	r1, [r3, r2]
 8017a4e:	6a3b      	ldr	r3, [r7, #32]
 8017a50:	2245      	movs	r2, #69	; 0x45
 8017a52:	5c9b      	ldrb	r3, [r3, r2]
 8017a54:	b25b      	sxtb	r3, r3
 8017a56:	3301      	adds	r3, #1
 8017a58:	d103      	bne.n	8017a62 <xQueueReceive+0xf2>
 8017a5a:	6a3b      	ldr	r3, [r7, #32]
 8017a5c:	2245      	movs	r2, #69	; 0x45
 8017a5e:	2100      	movs	r1, #0
 8017a60:	5499      	strb	r1, [r3, r2]
 8017a62:	f001 fd9f 	bl	80195a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017a66:	1d3a      	adds	r2, r7, #4
 8017a68:	2314      	movs	r3, #20
 8017a6a:	18fb      	adds	r3, r7, r3
 8017a6c:	0011      	movs	r1, r2
 8017a6e:	0018      	movs	r0, r3
 8017a70:	f000 ffd8 	bl	8018a24 <xTaskCheckForTimeOut>
 8017a74:	1e03      	subs	r3, r0, #0
 8017a76:	d11e      	bne.n	8017ab6 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a78:	6a3b      	ldr	r3, [r7, #32]
 8017a7a:	0018      	movs	r0, r3
 8017a7c:	f000 f97f 	bl	8017d7e <prvIsQueueEmpty>
 8017a80:	1e03      	subs	r3, r0, #0
 8017a82:	d011      	beq.n	8017aa8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017a84:	6a3b      	ldr	r3, [r7, #32]
 8017a86:	3324      	adds	r3, #36	; 0x24
 8017a88:	687a      	ldr	r2, [r7, #4]
 8017a8a:	0011      	movs	r1, r2
 8017a8c:	0018      	movs	r0, r3
 8017a8e:	f000 ff15 	bl	80188bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017a92:	6a3b      	ldr	r3, [r7, #32]
 8017a94:	0018      	movs	r0, r3
 8017a96:	f000 f914 	bl	8017cc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017a9a:	f000 fd6b 	bl	8018574 <xTaskResumeAll>
 8017a9e:	1e03      	subs	r3, r0, #0
 8017aa0:	d191      	bne.n	80179c6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8017aa2:	f001 fd5d 	bl	8019560 <vPortYield>
 8017aa6:	e78e      	b.n	80179c6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017aa8:	6a3b      	ldr	r3, [r7, #32]
 8017aaa:	0018      	movs	r0, r3
 8017aac:	f000 f909 	bl	8017cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017ab0:	f000 fd60 	bl	8018574 <xTaskResumeAll>
 8017ab4:	e787      	b.n	80179c6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017ab6:	6a3b      	ldr	r3, [r7, #32]
 8017ab8:	0018      	movs	r0, r3
 8017aba:	f000 f902 	bl	8017cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017abe:	f000 fd59 	bl	8018574 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017ac2:	6a3b      	ldr	r3, [r7, #32]
 8017ac4:	0018      	movs	r0, r3
 8017ac6:	f000 f95a 	bl	8017d7e <prvIsQueueEmpty>
 8017aca:	1e03      	subs	r3, r0, #0
 8017acc:	d100      	bne.n	8017ad0 <xQueueReceive+0x160>
 8017ace:	e77a      	b.n	80179c6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017ad0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017ad2:	0018      	movs	r0, r3
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	b00a      	add	sp, #40	; 0x28
 8017ad8:	bd80      	pop	{r7, pc}

08017ada <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017ada:	b590      	push	{r4, r7, lr}
 8017adc:	b08b      	sub	sp, #44	; 0x2c
 8017ade:	af00      	add	r7, sp, #0
 8017ae0:	60f8      	str	r0, [r7, #12]
 8017ae2:	60b9      	str	r1, [r7, #8]
 8017ae4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8017aea:	6a3b      	ldr	r3, [r7, #32]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d101      	bne.n	8017af4 <xQueueReceiveFromISR+0x1a>
 8017af0:	b672      	cpsid	i
 8017af2:	e7fe      	b.n	8017af2 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d103      	bne.n	8017b02 <xQueueReceiveFromISR+0x28>
 8017afa:	6a3b      	ldr	r3, [r7, #32]
 8017afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d101      	bne.n	8017b06 <xQueueReceiveFromISR+0x2c>
 8017b02:	2301      	movs	r3, #1
 8017b04:	e000      	b.n	8017b08 <xQueueReceiveFromISR+0x2e>
 8017b06:	2300      	movs	r3, #0
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d101      	bne.n	8017b10 <xQueueReceiveFromISR+0x36>
 8017b0c:	b672      	cpsid	i
 8017b0e:	e7fe      	b.n	8017b0e <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017b10:	f001 fd60 	bl	80195d4 <ulSetInterruptMaskFromISR>
 8017b14:	0003      	movs	r3, r0
 8017b16:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b18:	6a3b      	ldr	r3, [r7, #32]
 8017b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b1c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b1e:	69bb      	ldr	r3, [r7, #24]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d032      	beq.n	8017b8a <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017b24:	2417      	movs	r4, #23
 8017b26:	193b      	adds	r3, r7, r4
 8017b28:	6a3a      	ldr	r2, [r7, #32]
 8017b2a:	2144      	movs	r1, #68	; 0x44
 8017b2c:	5c52      	ldrb	r2, [r2, r1]
 8017b2e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017b30:	68ba      	ldr	r2, [r7, #8]
 8017b32:	6a3b      	ldr	r3, [r7, #32]
 8017b34:	0011      	movs	r1, r2
 8017b36:	0018      	movs	r0, r3
 8017b38:	f000 f89d 	bl	8017c76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017b3c:	69bb      	ldr	r3, [r7, #24]
 8017b3e:	1e5a      	subs	r2, r3, #1
 8017b40:	6a3b      	ldr	r3, [r7, #32]
 8017b42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017b44:	193b      	adds	r3, r7, r4
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	b25b      	sxtb	r3, r3
 8017b4a:	3301      	adds	r3, #1
 8017b4c:	d111      	bne.n	8017b72 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017b4e:	6a3b      	ldr	r3, [r7, #32]
 8017b50:	691b      	ldr	r3, [r3, #16]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d016      	beq.n	8017b84 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017b56:	6a3b      	ldr	r3, [r7, #32]
 8017b58:	3310      	adds	r3, #16
 8017b5a:	0018      	movs	r0, r3
 8017b5c:	f000 fef2 	bl	8018944 <xTaskRemoveFromEventList>
 8017b60:	1e03      	subs	r3, r0, #0
 8017b62:	d00f      	beq.n	8017b84 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d00c      	beq.n	8017b84 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	2201      	movs	r2, #1
 8017b6e:	601a      	str	r2, [r3, #0]
 8017b70:	e008      	b.n	8017b84 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017b72:	2317      	movs	r3, #23
 8017b74:	18fb      	adds	r3, r7, r3
 8017b76:	781b      	ldrb	r3, [r3, #0]
 8017b78:	3301      	adds	r3, #1
 8017b7a:	b2db      	uxtb	r3, r3
 8017b7c:	b259      	sxtb	r1, r3
 8017b7e:	6a3b      	ldr	r3, [r7, #32]
 8017b80:	2244      	movs	r2, #68	; 0x44
 8017b82:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8017b84:	2301      	movs	r3, #1
 8017b86:	627b      	str	r3, [r7, #36]	; 0x24
 8017b88:	e001      	b.n	8017b8e <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8017b8e:	69fb      	ldr	r3, [r7, #28]
 8017b90:	0018      	movs	r0, r3
 8017b92:	f001 fd25 	bl	80195e0 <vClearInterruptMaskFromISR>

	return xReturn;
 8017b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017b98:	0018      	movs	r0, r3
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	b00b      	add	sp, #44	; 0x2c
 8017b9e:	bd90      	pop	{r4, r7, pc}

08017ba0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b086      	sub	sp, #24
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	60f8      	str	r0, [r7, #12]
 8017ba8:	60b9      	str	r1, [r7, #8]
 8017baa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017bac:	2300      	movs	r3, #0
 8017bae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d10e      	bne.n	8017bdc <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d14e      	bne.n	8017c64 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	689b      	ldr	r3, [r3, #8]
 8017bca:	0018      	movs	r0, r3
 8017bcc:	f001 f87c 	bl	8018cc8 <xTaskPriorityDisinherit>
 8017bd0:	0003      	movs	r3, r0
 8017bd2:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	609a      	str	r2, [r3, #8]
 8017bda:	e043      	b.n	8017c64 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d119      	bne.n	8017c16 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	6858      	ldr	r0, [r3, #4]
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017bea:	68bb      	ldr	r3, [r7, #8]
 8017bec:	0019      	movs	r1, r3
 8017bee:	f00a fe0b 	bl	8022808 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	685a      	ldr	r2, [r3, #4]
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bfa:	18d2      	adds	r2, r2, r3
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	685a      	ldr	r2, [r3, #4]
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	689b      	ldr	r3, [r3, #8]
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d32b      	bcc.n	8017c64 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	681a      	ldr	r2, [r3, #0]
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	605a      	str	r2, [r3, #4]
 8017c14:	e026      	b.n	8017c64 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	68d8      	ldr	r0, [r3, #12]
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	0019      	movs	r1, r3
 8017c22:	f00a fdf1 	bl	8022808 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	68da      	ldr	r2, [r3, #12]
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c2e:	425b      	negs	r3, r3
 8017c30:	18d2      	adds	r2, r2, r3
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	68da      	ldr	r2, [r3, #12]
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	d207      	bcs.n	8017c52 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	689a      	ldr	r2, [r3, #8]
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c4a:	425b      	negs	r3, r3
 8017c4c:	18d2      	adds	r2, r2, r3
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	2b02      	cmp	r3, #2
 8017c56:	d105      	bne.n	8017c64 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017c58:	693b      	ldr	r3, [r7, #16]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d002      	beq.n	8017c64 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017c5e:	693b      	ldr	r3, [r7, #16]
 8017c60:	3b01      	subs	r3, #1
 8017c62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017c64:	693b      	ldr	r3, [r7, #16]
 8017c66:	1c5a      	adds	r2, r3, #1
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017c6c:	697b      	ldr	r3, [r7, #20]
}
 8017c6e:	0018      	movs	r0, r3
 8017c70:	46bd      	mov	sp, r7
 8017c72:	b006      	add	sp, #24
 8017c74:	bd80      	pop	{r7, pc}

08017c76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017c76:	b580      	push	{r7, lr}
 8017c78:	b082      	sub	sp, #8
 8017c7a:	af00      	add	r7, sp, #0
 8017c7c:	6078      	str	r0, [r7, #4]
 8017c7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d018      	beq.n	8017cba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	68da      	ldr	r2, [r3, #12]
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c90:	18d2      	adds	r2, r2, r3
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	68da      	ldr	r2, [r3, #12]
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	689b      	ldr	r3, [r3, #8]
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	d303      	bcc.n	8017caa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	681a      	ldr	r2, [r3, #0]
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	68d9      	ldr	r1, [r3, #12]
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	0018      	movs	r0, r3
 8017cb6:	f00a fda7 	bl	8022808 <memcpy>
	}
}
 8017cba:	46c0      	nop			; (mov r8, r8)
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	b002      	add	sp, #8
 8017cc0:	bd80      	pop	{r7, pc}

08017cc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017cc2:	b580      	push	{r7, lr}
 8017cc4:	b084      	sub	sp, #16
 8017cc6:	af00      	add	r7, sp, #0
 8017cc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017cca:	f001 fc59 	bl	8019580 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017cce:	230f      	movs	r3, #15
 8017cd0:	18fb      	adds	r3, r7, r3
 8017cd2:	687a      	ldr	r2, [r7, #4]
 8017cd4:	2145      	movs	r1, #69	; 0x45
 8017cd6:	5c52      	ldrb	r2, [r2, r1]
 8017cd8:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017cda:	e013      	b.n	8017d04 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d016      	beq.n	8017d12 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	3324      	adds	r3, #36	; 0x24
 8017ce8:	0018      	movs	r0, r3
 8017cea:	f000 fe2b 	bl	8018944 <xTaskRemoveFromEventList>
 8017cee:	1e03      	subs	r3, r0, #0
 8017cf0:	d001      	beq.n	8017cf6 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017cf2:	f000 fee7 	bl	8018ac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017cf6:	210f      	movs	r1, #15
 8017cf8:	187b      	adds	r3, r7, r1
 8017cfa:	781b      	ldrb	r3, [r3, #0]
 8017cfc:	3b01      	subs	r3, #1
 8017cfe:	b2da      	uxtb	r2, r3
 8017d00:	187b      	adds	r3, r7, r1
 8017d02:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017d04:	230f      	movs	r3, #15
 8017d06:	18fb      	adds	r3, r7, r3
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	b25b      	sxtb	r3, r3
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	dce5      	bgt.n	8017cdc <prvUnlockQueue+0x1a>
 8017d10:	e000      	b.n	8017d14 <prvUnlockQueue+0x52>
					break;
 8017d12:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	2245      	movs	r2, #69	; 0x45
 8017d18:	21ff      	movs	r1, #255	; 0xff
 8017d1a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8017d1c:	f001 fc42 	bl	80195a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017d20:	f001 fc2e 	bl	8019580 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017d24:	230e      	movs	r3, #14
 8017d26:	18fb      	adds	r3, r7, r3
 8017d28:	687a      	ldr	r2, [r7, #4]
 8017d2a:	2144      	movs	r1, #68	; 0x44
 8017d2c:	5c52      	ldrb	r2, [r2, r1]
 8017d2e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017d30:	e013      	b.n	8017d5a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	691b      	ldr	r3, [r3, #16]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d016      	beq.n	8017d68 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	3310      	adds	r3, #16
 8017d3e:	0018      	movs	r0, r3
 8017d40:	f000 fe00 	bl	8018944 <xTaskRemoveFromEventList>
 8017d44:	1e03      	subs	r3, r0, #0
 8017d46:	d001      	beq.n	8017d4c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8017d48:	f000 febc 	bl	8018ac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017d4c:	210e      	movs	r1, #14
 8017d4e:	187b      	adds	r3, r7, r1
 8017d50:	781b      	ldrb	r3, [r3, #0]
 8017d52:	3b01      	subs	r3, #1
 8017d54:	b2da      	uxtb	r2, r3
 8017d56:	187b      	adds	r3, r7, r1
 8017d58:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017d5a:	230e      	movs	r3, #14
 8017d5c:	18fb      	adds	r3, r7, r3
 8017d5e:	781b      	ldrb	r3, [r3, #0]
 8017d60:	b25b      	sxtb	r3, r3
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	dce5      	bgt.n	8017d32 <prvUnlockQueue+0x70>
 8017d66:	e000      	b.n	8017d6a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8017d68:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2244      	movs	r2, #68	; 0x44
 8017d6e:	21ff      	movs	r1, #255	; 0xff
 8017d70:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8017d72:	f001 fc17 	bl	80195a4 <vPortExitCritical>
}
 8017d76:	46c0      	nop			; (mov r8, r8)
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	b004      	add	sp, #16
 8017d7c:	bd80      	pop	{r7, pc}

08017d7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017d7e:	b580      	push	{r7, lr}
 8017d80:	b084      	sub	sp, #16
 8017d82:	af00      	add	r7, sp, #0
 8017d84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017d86:	f001 fbfb 	bl	8019580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d102      	bne.n	8017d98 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017d92:	2301      	movs	r3, #1
 8017d94:	60fb      	str	r3, [r7, #12]
 8017d96:	e001      	b.n	8017d9c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017d98:	2300      	movs	r3, #0
 8017d9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017d9c:	f001 fc02 	bl	80195a4 <vPortExitCritical>

	return xReturn;
 8017da0:	68fb      	ldr	r3, [r7, #12]
}
 8017da2:	0018      	movs	r0, r3
 8017da4:	46bd      	mov	sp, r7
 8017da6:	b004      	add	sp, #16
 8017da8:	bd80      	pop	{r7, pc}

08017daa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017daa:	b580      	push	{r7, lr}
 8017dac:	b084      	sub	sp, #16
 8017dae:	af00      	add	r7, sp, #0
 8017db0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017db2:	f001 fbe5 	bl	8019580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d102      	bne.n	8017dc8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	60fb      	str	r3, [r7, #12]
 8017dc6:	e001      	b.n	8017dcc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017dc8:	2300      	movs	r3, #0
 8017dca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017dcc:	f001 fbea 	bl	80195a4 <vPortExitCritical>

	return xReturn;
 8017dd0:	68fb      	ldr	r3, [r7, #12]
}
 8017dd2:	0018      	movs	r0, r3
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	b004      	add	sp, #16
 8017dd8:	bd80      	pop	{r7, pc}
	...

08017ddc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b084      	sub	sp, #16
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
 8017de4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017de6:	2300      	movs	r3, #0
 8017de8:	60fb      	str	r3, [r7, #12]
 8017dea:	e015      	b.n	8017e18 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017dec:	4b0e      	ldr	r3, [pc, #56]	; (8017e28 <vQueueAddToRegistry+0x4c>)
 8017dee:	68fa      	ldr	r2, [r7, #12]
 8017df0:	00d2      	lsls	r2, r2, #3
 8017df2:	58d3      	ldr	r3, [r2, r3]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d10c      	bne.n	8017e12 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017df8:	4b0b      	ldr	r3, [pc, #44]	; (8017e28 <vQueueAddToRegistry+0x4c>)
 8017dfa:	68fa      	ldr	r2, [r7, #12]
 8017dfc:	00d2      	lsls	r2, r2, #3
 8017dfe:	6839      	ldr	r1, [r7, #0]
 8017e00:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017e02:	4a09      	ldr	r2, [pc, #36]	; (8017e28 <vQueueAddToRegistry+0x4c>)
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	00db      	lsls	r3, r3, #3
 8017e08:	18d3      	adds	r3, r2, r3
 8017e0a:	3304      	adds	r3, #4
 8017e0c:	687a      	ldr	r2, [r7, #4]
 8017e0e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017e10:	e006      	b.n	8017e20 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	3301      	adds	r3, #1
 8017e16:	60fb      	str	r3, [r7, #12]
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	2b07      	cmp	r3, #7
 8017e1c:	d9e6      	bls.n	8017dec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017e1e:	46c0      	nop			; (mov r8, r8)
 8017e20:	46c0      	nop			; (mov r8, r8)
 8017e22:	46bd      	mov	sp, r7
 8017e24:	b004      	add	sp, #16
 8017e26:	bd80      	pop	{r7, pc}
 8017e28:	20000cfc 	.word	0x20000cfc

08017e2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b086      	sub	sp, #24
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	60f8      	str	r0, [r7, #12]
 8017e34:	60b9      	str	r1, [r7, #8]
 8017e36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017e3c:	f001 fba0 	bl	8019580 <vPortEnterCritical>
 8017e40:	697b      	ldr	r3, [r7, #20]
 8017e42:	2244      	movs	r2, #68	; 0x44
 8017e44:	5c9b      	ldrb	r3, [r3, r2]
 8017e46:	b25b      	sxtb	r3, r3
 8017e48:	3301      	adds	r3, #1
 8017e4a:	d103      	bne.n	8017e54 <vQueueWaitForMessageRestricted+0x28>
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	2244      	movs	r2, #68	; 0x44
 8017e50:	2100      	movs	r1, #0
 8017e52:	5499      	strb	r1, [r3, r2]
 8017e54:	697b      	ldr	r3, [r7, #20]
 8017e56:	2245      	movs	r2, #69	; 0x45
 8017e58:	5c9b      	ldrb	r3, [r3, r2]
 8017e5a:	b25b      	sxtb	r3, r3
 8017e5c:	3301      	adds	r3, #1
 8017e5e:	d103      	bne.n	8017e68 <vQueueWaitForMessageRestricted+0x3c>
 8017e60:	697b      	ldr	r3, [r7, #20]
 8017e62:	2245      	movs	r2, #69	; 0x45
 8017e64:	2100      	movs	r1, #0
 8017e66:	5499      	strb	r1, [r3, r2]
 8017e68:	f001 fb9c 	bl	80195a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017e6c:	697b      	ldr	r3, [r7, #20]
 8017e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d106      	bne.n	8017e82 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	3324      	adds	r3, #36	; 0x24
 8017e78:	687a      	ldr	r2, [r7, #4]
 8017e7a:	68b9      	ldr	r1, [r7, #8]
 8017e7c:	0018      	movs	r0, r3
 8017e7e:	f000 fd3b 	bl	80188f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017e82:	697b      	ldr	r3, [r7, #20]
 8017e84:	0018      	movs	r0, r3
 8017e86:	f7ff ff1c 	bl	8017cc2 <prvUnlockQueue>
	}
 8017e8a:	46c0      	nop			; (mov r8, r8)
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	b006      	add	sp, #24
 8017e90:	bd80      	pop	{r7, pc}

08017e92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017e92:	b590      	push	{r4, r7, lr}
 8017e94:	b08d      	sub	sp, #52	; 0x34
 8017e96:	af04      	add	r7, sp, #16
 8017e98:	60f8      	str	r0, [r7, #12]
 8017e9a:	60b9      	str	r1, [r7, #8]
 8017e9c:	607a      	str	r2, [r7, #4]
 8017e9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d101      	bne.n	8017eaa <xTaskCreateStatic+0x18>
 8017ea6:	b672      	cpsid	i
 8017ea8:	e7fe      	b.n	8017ea8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8017eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d101      	bne.n	8017eb4 <xTaskCreateStatic+0x22>
 8017eb0:	b672      	cpsid	i
 8017eb2:	e7fe      	b.n	8017eb2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017eb4:	23a8      	movs	r3, #168	; 0xa8
 8017eb6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017eb8:	697b      	ldr	r3, [r7, #20]
 8017eba:	2ba8      	cmp	r3, #168	; 0xa8
 8017ebc:	d001      	beq.n	8017ec2 <xTaskCreateStatic+0x30>
 8017ebe:	b672      	cpsid	i
 8017ec0:	e7fe      	b.n	8017ec0 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017ec2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d020      	beq.n	8017f0c <xTaskCreateStatic+0x7a>
 8017eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d01d      	beq.n	8017f0c <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ed2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017ed4:	69fb      	ldr	r3, [r7, #28]
 8017ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ed8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017eda:	69fb      	ldr	r3, [r7, #28]
 8017edc:	22a5      	movs	r2, #165	; 0xa5
 8017ede:	2102      	movs	r1, #2
 8017ee0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017ee2:	683c      	ldr	r4, [r7, #0]
 8017ee4:	687a      	ldr	r2, [r7, #4]
 8017ee6:	68b9      	ldr	r1, [r7, #8]
 8017ee8:	68f8      	ldr	r0, [r7, #12]
 8017eea:	2300      	movs	r3, #0
 8017eec:	9303      	str	r3, [sp, #12]
 8017eee:	69fb      	ldr	r3, [r7, #28]
 8017ef0:	9302      	str	r3, [sp, #8]
 8017ef2:	2318      	movs	r3, #24
 8017ef4:	18fb      	adds	r3, r7, r3
 8017ef6:	9301      	str	r3, [sp, #4]
 8017ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efa:	9300      	str	r3, [sp, #0]
 8017efc:	0023      	movs	r3, r4
 8017efe:	f000 f859 	bl	8017fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f02:	69fb      	ldr	r3, [r7, #28]
 8017f04:	0018      	movs	r0, r3
 8017f06:	f000 f8f5 	bl	80180f4 <prvAddNewTaskToReadyList>
 8017f0a:	e001      	b.n	8017f10 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017f10:	69bb      	ldr	r3, [r7, #24]
	}
 8017f12:	0018      	movs	r0, r3
 8017f14:	46bd      	mov	sp, r7
 8017f16:	b009      	add	sp, #36	; 0x24
 8017f18:	bd90      	pop	{r4, r7, pc}

08017f1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017f1a:	b590      	push	{r4, r7, lr}
 8017f1c:	b08d      	sub	sp, #52	; 0x34
 8017f1e:	af04      	add	r7, sp, #16
 8017f20:	60f8      	str	r0, [r7, #12]
 8017f22:	60b9      	str	r1, [r7, #8]
 8017f24:	603b      	str	r3, [r7, #0]
 8017f26:	1dbb      	adds	r3, r7, #6
 8017f28:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017f2a:	1dbb      	adds	r3, r7, #6
 8017f2c:	881b      	ldrh	r3, [r3, #0]
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	0018      	movs	r0, r3
 8017f32:	f001 fbbd 	bl	80196b0 <pvPortMalloc>
 8017f36:	0003      	movs	r3, r0
 8017f38:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8017f3a:	697b      	ldr	r3, [r7, #20]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d010      	beq.n	8017f62 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017f40:	20a8      	movs	r0, #168	; 0xa8
 8017f42:	f001 fbb5 	bl	80196b0 <pvPortMalloc>
 8017f46:	0003      	movs	r3, r0
 8017f48:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8017f4a:	69fb      	ldr	r3, [r7, #28]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d003      	beq.n	8017f58 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017f50:	69fb      	ldr	r3, [r7, #28]
 8017f52:	697a      	ldr	r2, [r7, #20]
 8017f54:	631a      	str	r2, [r3, #48]	; 0x30
 8017f56:	e006      	b.n	8017f66 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017f58:	697b      	ldr	r3, [r7, #20]
 8017f5a:	0018      	movs	r0, r3
 8017f5c:	f001 fc54 	bl	8019808 <vPortFree>
 8017f60:	e001      	b.n	8017f66 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017f62:	2300      	movs	r3, #0
 8017f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017f66:	69fb      	ldr	r3, [r7, #28]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d01a      	beq.n	8017fa2 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017f6c:	69fb      	ldr	r3, [r7, #28]
 8017f6e:	22a5      	movs	r2, #165	; 0xa5
 8017f70:	2100      	movs	r1, #0
 8017f72:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017f74:	1dbb      	adds	r3, r7, #6
 8017f76:	881a      	ldrh	r2, [r3, #0]
 8017f78:	683c      	ldr	r4, [r7, #0]
 8017f7a:	68b9      	ldr	r1, [r7, #8]
 8017f7c:	68f8      	ldr	r0, [r7, #12]
 8017f7e:	2300      	movs	r3, #0
 8017f80:	9303      	str	r3, [sp, #12]
 8017f82:	69fb      	ldr	r3, [r7, #28]
 8017f84:	9302      	str	r3, [sp, #8]
 8017f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f88:	9301      	str	r3, [sp, #4]
 8017f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8c:	9300      	str	r3, [sp, #0]
 8017f8e:	0023      	movs	r3, r4
 8017f90:	f000 f810 	bl	8017fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	0018      	movs	r0, r3
 8017f98:	f000 f8ac 	bl	80180f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017f9c:	2301      	movs	r3, #1
 8017f9e:	61bb      	str	r3, [r7, #24]
 8017fa0:	e002      	b.n	8017fa8 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	425b      	negs	r3, r3
 8017fa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017fa8:	69bb      	ldr	r3, [r7, #24]
	}
 8017faa:	0018      	movs	r0, r3
 8017fac:	46bd      	mov	sp, r7
 8017fae:	b009      	add	sp, #36	; 0x24
 8017fb0:	bd90      	pop	{r4, r7, pc}
	...

08017fb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b086      	sub	sp, #24
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	60f8      	str	r0, [r7, #12]
 8017fbc:	60b9      	str	r1, [r7, #8]
 8017fbe:	607a      	str	r2, [r7, #4]
 8017fc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	009b      	lsls	r3, r3, #2
 8017fca:	001a      	movs	r2, r3
 8017fcc:	21a5      	movs	r1, #165	; 0xa5
 8017fce:	f00a fb67 	bl	80226a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	4942      	ldr	r1, [pc, #264]	; (80180e4 <prvInitialiseNewTask+0x130>)
 8017fda:	468c      	mov	ip, r1
 8017fdc:	4463      	add	r3, ip
 8017fde:	009b      	lsls	r3, r3, #2
 8017fe0:	18d3      	adds	r3, r2, r3
 8017fe2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017fe4:	693b      	ldr	r3, [r7, #16]
 8017fe6:	2207      	movs	r2, #7
 8017fe8:	4393      	bics	r3, r2
 8017fea:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017fec:	693b      	ldr	r3, [r7, #16]
 8017fee:	2207      	movs	r2, #7
 8017ff0:	4013      	ands	r3, r2
 8017ff2:	d001      	beq.n	8017ff8 <prvInitialiseNewTask+0x44>
 8017ff4:	b672      	cpsid	i
 8017ff6:	e7fe      	b.n	8017ff6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d020      	beq.n	8018040 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ffe:	2300      	movs	r3, #0
 8018000:	617b      	str	r3, [r7, #20]
 8018002:	e013      	b.n	801802c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018004:	68ba      	ldr	r2, [r7, #8]
 8018006:	697b      	ldr	r3, [r7, #20]
 8018008:	18d3      	adds	r3, r2, r3
 801800a:	7818      	ldrb	r0, [r3, #0]
 801800c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801800e:	2134      	movs	r1, #52	; 0x34
 8018010:	697b      	ldr	r3, [r7, #20]
 8018012:	18d3      	adds	r3, r2, r3
 8018014:	185b      	adds	r3, r3, r1
 8018016:	1c02      	adds	r2, r0, #0
 8018018:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801801a:	68ba      	ldr	r2, [r7, #8]
 801801c:	697b      	ldr	r3, [r7, #20]
 801801e:	18d3      	adds	r3, r2, r3
 8018020:	781b      	ldrb	r3, [r3, #0]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d006      	beq.n	8018034 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018026:	697b      	ldr	r3, [r7, #20]
 8018028:	3301      	adds	r3, #1
 801802a:	617b      	str	r3, [r7, #20]
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	2b0f      	cmp	r3, #15
 8018030:	d9e8      	bls.n	8018004 <prvInitialiseNewTask+0x50>
 8018032:	e000      	b.n	8018036 <prvInitialiseNewTask+0x82>
			{
				break;
 8018034:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018038:	2243      	movs	r2, #67	; 0x43
 801803a:	2100      	movs	r1, #0
 801803c:	5499      	strb	r1, [r3, r2]
 801803e:	e003      	b.n	8018048 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018042:	2234      	movs	r2, #52	; 0x34
 8018044:	2100      	movs	r1, #0
 8018046:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018048:	6a3b      	ldr	r3, [r7, #32]
 801804a:	2b37      	cmp	r3, #55	; 0x37
 801804c:	d901      	bls.n	8018052 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801804e:	2337      	movs	r3, #55	; 0x37
 8018050:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018054:	6a3a      	ldr	r2, [r7, #32]
 8018056:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801805a:	6a3a      	ldr	r2, [r7, #32]
 801805c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018060:	2200      	movs	r2, #0
 8018062:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018066:	3304      	adds	r3, #4
 8018068:	0018      	movs	r0, r3
 801806a:	f7ff f9c5 	bl	80173f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018070:	3318      	adds	r3, #24
 8018072:	0018      	movs	r0, r3
 8018074:	f7ff f9c0 	bl	80173f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801807a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801807c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801807e:	6a3b      	ldr	r3, [r7, #32]
 8018080:	2238      	movs	r2, #56	; 0x38
 8018082:	1ad2      	subs	r2, r2, r3
 8018084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018086:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801808a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801808c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018090:	22a0      	movs	r2, #160	; 0xa0
 8018092:	2100      	movs	r1, #0
 8018094:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018098:	22a4      	movs	r2, #164	; 0xa4
 801809a:	2100      	movs	r1, #0
 801809c:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a0:	3354      	adds	r3, #84	; 0x54
 80180a2:	224c      	movs	r2, #76	; 0x4c
 80180a4:	2100      	movs	r1, #0
 80180a6:	0018      	movs	r0, r3
 80180a8:	f00a fafa 	bl	80226a0 <memset>
 80180ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ae:	4a0e      	ldr	r2, [pc, #56]	; (80180e8 <prvInitialiseNewTask+0x134>)
 80180b0:	659a      	str	r2, [r3, #88]	; 0x58
 80180b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b4:	4a0d      	ldr	r2, [pc, #52]	; (80180ec <prvInitialiseNewTask+0x138>)
 80180b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80180b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ba:	4a0d      	ldr	r2, [pc, #52]	; (80180f0 <prvInitialiseNewTask+0x13c>)
 80180bc:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80180be:	683a      	ldr	r2, [r7, #0]
 80180c0:	68f9      	ldr	r1, [r7, #12]
 80180c2:	693b      	ldr	r3, [r7, #16]
 80180c4:	0018      	movs	r0, r3
 80180c6:	f001 f9c1 	bl	801944c <pxPortInitialiseStack>
 80180ca:	0002      	movs	r2, r0
 80180cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80180d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d002      	beq.n	80180dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80180d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80180da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180dc:	46c0      	nop			; (mov r8, r8)
 80180de:	46bd      	mov	sp, r7
 80180e0:	b006      	add	sp, #24
 80180e2:	bd80      	pop	{r7, pc}
 80180e4:	3fffffff 	.word	0x3fffffff
 80180e8:	20005000 	.word	0x20005000
 80180ec:	20005068 	.word	0x20005068
 80180f0:	200050d0 	.word	0x200050d0

080180f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80180fc:	f001 fa40 	bl	8019580 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018100:	4b2a      	ldr	r3, [pc, #168]	; (80181ac <prvAddNewTaskToReadyList+0xb8>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	1c5a      	adds	r2, r3, #1
 8018106:	4b29      	ldr	r3, [pc, #164]	; (80181ac <prvAddNewTaskToReadyList+0xb8>)
 8018108:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801810a:	4b29      	ldr	r3, [pc, #164]	; (80181b0 <prvAddNewTaskToReadyList+0xbc>)
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d109      	bne.n	8018126 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018112:	4b27      	ldr	r3, [pc, #156]	; (80181b0 <prvAddNewTaskToReadyList+0xbc>)
 8018114:	687a      	ldr	r2, [r7, #4]
 8018116:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018118:	4b24      	ldr	r3, [pc, #144]	; (80181ac <prvAddNewTaskToReadyList+0xb8>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	2b01      	cmp	r3, #1
 801811e:	d110      	bne.n	8018142 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018120:	f000 fcea 	bl	8018af8 <prvInitialiseTaskLists>
 8018124:	e00d      	b.n	8018142 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018126:	4b23      	ldr	r3, [pc, #140]	; (80181b4 <prvAddNewTaskToReadyList+0xc0>)
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d109      	bne.n	8018142 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801812e:	4b20      	ldr	r3, [pc, #128]	; (80181b0 <prvAddNewTaskToReadyList+0xbc>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018138:	429a      	cmp	r2, r3
 801813a:	d802      	bhi.n	8018142 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801813c:	4b1c      	ldr	r3, [pc, #112]	; (80181b0 <prvAddNewTaskToReadyList+0xbc>)
 801813e:	687a      	ldr	r2, [r7, #4]
 8018140:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018142:	4b1d      	ldr	r3, [pc, #116]	; (80181b8 <prvAddNewTaskToReadyList+0xc4>)
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	1c5a      	adds	r2, r3, #1
 8018148:	4b1b      	ldr	r3, [pc, #108]	; (80181b8 <prvAddNewTaskToReadyList+0xc4>)
 801814a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801814c:	4b1a      	ldr	r3, [pc, #104]	; (80181b8 <prvAddNewTaskToReadyList+0xc4>)
 801814e:	681a      	ldr	r2, [r3, #0]
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018158:	4b18      	ldr	r3, [pc, #96]	; (80181bc <prvAddNewTaskToReadyList+0xc8>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	429a      	cmp	r2, r3
 801815e:	d903      	bls.n	8018168 <prvAddNewTaskToReadyList+0x74>
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018164:	4b15      	ldr	r3, [pc, #84]	; (80181bc <prvAddNewTaskToReadyList+0xc8>)
 8018166:	601a      	str	r2, [r3, #0]
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801816c:	0013      	movs	r3, r2
 801816e:	009b      	lsls	r3, r3, #2
 8018170:	189b      	adds	r3, r3, r2
 8018172:	009b      	lsls	r3, r3, #2
 8018174:	4a12      	ldr	r2, [pc, #72]	; (80181c0 <prvAddNewTaskToReadyList+0xcc>)
 8018176:	189a      	adds	r2, r3, r2
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	3304      	adds	r3, #4
 801817c:	0019      	movs	r1, r3
 801817e:	0010      	movs	r0, r2
 8018180:	f7ff f945 	bl	801740e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018184:	f001 fa0e 	bl	80195a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018188:	4b0a      	ldr	r3, [pc, #40]	; (80181b4 <prvAddNewTaskToReadyList+0xc0>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d008      	beq.n	80181a2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018190:	4b07      	ldr	r3, [pc, #28]	; (80181b0 <prvAddNewTaskToReadyList+0xbc>)
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801819a:	429a      	cmp	r2, r3
 801819c:	d201      	bcs.n	80181a2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801819e:	f001 f9df 	bl	8019560 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80181a2:	46c0      	nop			; (mov r8, r8)
 80181a4:	46bd      	mov	sp, r7
 80181a6:	b002      	add	sp, #8
 80181a8:	bd80      	pop	{r7, pc}
 80181aa:	46c0      	nop			; (mov r8, r8)
 80181ac:	20001210 	.word	0x20001210
 80181b0:	20000d3c 	.word	0x20000d3c
 80181b4:	2000121c 	.word	0x2000121c
 80181b8:	2000122c 	.word	0x2000122c
 80181bc:	20001218 	.word	0x20001218
 80181c0:	20000d40 	.word	0x20000d40

080181c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b084      	sub	sp, #16
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80181cc:	2300      	movs	r3, #0
 80181ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d010      	beq.n	80181f8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80181d6:	4b0d      	ldr	r3, [pc, #52]	; (801820c <vTaskDelay+0x48>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d001      	beq.n	80181e2 <vTaskDelay+0x1e>
 80181de:	b672      	cpsid	i
 80181e0:	e7fe      	b.n	80181e0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80181e2:	f000 f9bb 	bl	801855c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	2100      	movs	r1, #0
 80181ea:	0018      	movs	r0, r3
 80181ec:	f000 fdc8 	bl	8018d80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80181f0:	f000 f9c0 	bl	8018574 <xTaskResumeAll>
 80181f4:	0003      	movs	r3, r0
 80181f6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d101      	bne.n	8018202 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80181fe:	f001 f9af 	bl	8019560 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018202:	46c0      	nop			; (mov r8, r8)
 8018204:	46bd      	mov	sp, r7
 8018206:	b004      	add	sp, #16
 8018208:	bd80      	pop	{r7, pc}
 801820a:	46c0      	nop			; (mov r8, r8)
 801820c:	20001238 	.word	0x20001238

08018210 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8018210:	b580      	push	{r7, lr}
 8018212:	b088      	sub	sp, #32
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801821c:	69bb      	ldr	r3, [r7, #24]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d101      	bne.n	8018226 <eTaskGetState+0x16>
 8018222:	b672      	cpsid	i
 8018224:	e7fe      	b.n	8018224 <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 8018226:	4b2c      	ldr	r3, [pc, #176]	; (80182d8 <eTaskGetState+0xc8>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	69ba      	ldr	r2, [r7, #24]
 801822c:	429a      	cmp	r2, r3
 801822e:	d104      	bne.n	801823a <eTaskGetState+0x2a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8018230:	231f      	movs	r3, #31
 8018232:	18fb      	adds	r3, r7, r3
 8018234:	2200      	movs	r2, #0
 8018236:	701a      	strb	r2, [r3, #0]
 8018238:	e046      	b.n	80182c8 <eTaskGetState+0xb8>
		}
		else
		{
			taskENTER_CRITICAL();
 801823a:	f001 f9a1 	bl	8019580 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801823e:	69bb      	ldr	r3, [r7, #24]
 8018240:	695b      	ldr	r3, [r3, #20]
 8018242:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8018244:	4b25      	ldr	r3, [pc, #148]	; (80182dc <eTaskGetState+0xcc>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801824a:	4b25      	ldr	r3, [pc, #148]	; (80182e0 <eTaskGetState+0xd0>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8018250:	f001 f9a8 	bl	80195a4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8018254:	697a      	ldr	r2, [r7, #20]
 8018256:	693b      	ldr	r3, [r7, #16]
 8018258:	429a      	cmp	r2, r3
 801825a:	d003      	beq.n	8018264 <eTaskGetState+0x54>
 801825c:	697a      	ldr	r2, [r7, #20]
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	429a      	cmp	r2, r3
 8018262:	d104      	bne.n	801826e <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8018264:	231f      	movs	r3, #31
 8018266:	18fb      	adds	r3, r7, r3
 8018268:	2202      	movs	r2, #2
 801826a:	701a      	strb	r2, [r3, #0]
 801826c:	e02c      	b.n	80182c8 <eTaskGetState+0xb8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801826e:	697a      	ldr	r2, [r7, #20]
 8018270:	4b1c      	ldr	r3, [pc, #112]	; (80182e4 <eTaskGetState+0xd4>)
 8018272:	429a      	cmp	r2, r3
 8018274:	d118      	bne.n	80182a8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8018276:	69bb      	ldr	r3, [r7, #24]
 8018278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801827a:	2b00      	cmp	r3, #0
 801827c:	d10f      	bne.n	801829e <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801827e:	69bb      	ldr	r3, [r7, #24]
 8018280:	22a4      	movs	r2, #164	; 0xa4
 8018282:	5c9b      	ldrb	r3, [r3, r2]
 8018284:	b2db      	uxtb	r3, r3
 8018286:	2b01      	cmp	r3, #1
 8018288:	d104      	bne.n	8018294 <eTaskGetState+0x84>
							{
								eReturn = eBlocked;
 801828a:	231f      	movs	r3, #31
 801828c:	18fb      	adds	r3, r7, r3
 801828e:	2202      	movs	r2, #2
 8018290:	701a      	strb	r2, [r3, #0]
 8018292:	e019      	b.n	80182c8 <eTaskGetState+0xb8>
							}
							else
							{
								eReturn = eSuspended;
 8018294:	231f      	movs	r3, #31
 8018296:	18fb      	adds	r3, r7, r3
 8018298:	2203      	movs	r2, #3
 801829a:	701a      	strb	r2, [r3, #0]
 801829c:	e014      	b.n	80182c8 <eTaskGetState+0xb8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801829e:	231f      	movs	r3, #31
 80182a0:	18fb      	adds	r3, r7, r3
 80182a2:	2202      	movs	r2, #2
 80182a4:	701a      	strb	r2, [r3, #0]
 80182a6:	e00f      	b.n	80182c8 <eTaskGetState+0xb8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80182a8:	697a      	ldr	r2, [r7, #20]
 80182aa:	4b0f      	ldr	r3, [pc, #60]	; (80182e8 <eTaskGetState+0xd8>)
 80182ac:	429a      	cmp	r2, r3
 80182ae:	d002      	beq.n	80182b6 <eTaskGetState+0xa6>
 80182b0:	697b      	ldr	r3, [r7, #20]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d104      	bne.n	80182c0 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80182b6:	231f      	movs	r3, #31
 80182b8:	18fb      	adds	r3, r7, r3
 80182ba:	2204      	movs	r2, #4
 80182bc:	701a      	strb	r2, [r3, #0]
 80182be:	e003      	b.n	80182c8 <eTaskGetState+0xb8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80182c0:	231f      	movs	r3, #31
 80182c2:	18fb      	adds	r3, r7, r3
 80182c4:	2201      	movs	r2, #1
 80182c6:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 80182c8:	231f      	movs	r3, #31
 80182ca:	18fb      	adds	r3, r7, r3
 80182cc:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80182ce:	0018      	movs	r0, r3
 80182d0:	46bd      	mov	sp, r7
 80182d2:	b008      	add	sp, #32
 80182d4:	bd80      	pop	{r7, pc}
 80182d6:	46c0      	nop			; (mov r8, r8)
 80182d8:	20000d3c 	.word	0x20000d3c
 80182dc:	200011c8 	.word	0x200011c8
 80182e0:	200011cc 	.word	0x200011cc
 80182e4:	200011fc 	.word	0x200011fc
 80182e8:	200011e4 	.word	0x200011e4

080182ec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b084      	sub	sp, #16
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80182f4:	f001 f944 	bl	8019580 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d102      	bne.n	8018304 <vTaskSuspend+0x18>
 80182fe:	4b29      	ldr	r3, [pc, #164]	; (80183a4 <vTaskSuspend+0xb8>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	e000      	b.n	8018306 <vTaskSuspend+0x1a>
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	3304      	adds	r3, #4
 801830c:	0018      	movs	r0, r3
 801830e:	f7ff f8d6 	bl	80174be <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018316:	2b00      	cmp	r3, #0
 8018318:	d004      	beq.n	8018324 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	3318      	adds	r3, #24
 801831e:	0018      	movs	r0, r3
 8018320:	f7ff f8cd 	bl	80174be <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	1d1a      	adds	r2, r3, #4
 8018328:	4b1f      	ldr	r3, [pc, #124]	; (80183a8 <vTaskSuspend+0xbc>)
 801832a:	0011      	movs	r1, r2
 801832c:	0018      	movs	r0, r3
 801832e:	f7ff f86e 	bl	801740e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	22a4      	movs	r2, #164	; 0xa4
 8018336:	5c9b      	ldrb	r3, [r3, r2]
 8018338:	b2db      	uxtb	r3, r3
 801833a:	2b01      	cmp	r3, #1
 801833c:	d103      	bne.n	8018346 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	22a4      	movs	r2, #164	; 0xa4
 8018342:	2100      	movs	r1, #0
 8018344:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018346:	f001 f92d 	bl	80195a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801834a:	4b18      	ldr	r3, [pc, #96]	; (80183ac <vTaskSuspend+0xc0>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d005      	beq.n	801835e <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8018352:	f001 f915 	bl	8019580 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018356:	f000 fc6f 	bl	8018c38 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801835a:	f001 f923 	bl	80195a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801835e:	4b11      	ldr	r3, [pc, #68]	; (80183a4 <vTaskSuspend+0xb8>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	68fa      	ldr	r2, [r7, #12]
 8018364:	429a      	cmp	r2, r3
 8018366:	d118      	bne.n	801839a <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8018368:	4b10      	ldr	r3, [pc, #64]	; (80183ac <vTaskSuspend+0xc0>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d008      	beq.n	8018382 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018370:	4b0f      	ldr	r3, [pc, #60]	; (80183b0 <vTaskSuspend+0xc4>)
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d001      	beq.n	801837c <vTaskSuspend+0x90>
 8018378:	b672      	cpsid	i
 801837a:	e7fe      	b.n	801837a <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 801837c:	f001 f8f0 	bl	8019560 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018380:	e00b      	b.n	801839a <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018382:	4b09      	ldr	r3, [pc, #36]	; (80183a8 <vTaskSuspend+0xbc>)
 8018384:	681a      	ldr	r2, [r3, #0]
 8018386:	4b0b      	ldr	r3, [pc, #44]	; (80183b4 <vTaskSuspend+0xc8>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	429a      	cmp	r2, r3
 801838c:	d103      	bne.n	8018396 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 801838e:	4b05      	ldr	r3, [pc, #20]	; (80183a4 <vTaskSuspend+0xb8>)
 8018390:	2200      	movs	r2, #0
 8018392:	601a      	str	r2, [r3, #0]
	}
 8018394:	e001      	b.n	801839a <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8018396:	f000 fa37 	bl	8018808 <vTaskSwitchContext>
	}
 801839a:	46c0      	nop			; (mov r8, r8)
 801839c:	46bd      	mov	sp, r7
 801839e:	b004      	add	sp, #16
 80183a0:	bd80      	pop	{r7, pc}
 80183a2:	46c0      	nop			; (mov r8, r8)
 80183a4:	20000d3c 	.word	0x20000d3c
 80183a8:	200011fc 	.word	0x200011fc
 80183ac:	2000121c 	.word	0x2000121c
 80183b0:	20001238 	.word	0x20001238
 80183b4:	20001210 	.word	0x20001210

080183b8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b084      	sub	sp, #16
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80183c0:	2300      	movs	r3, #0
 80183c2:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d101      	bne.n	80183d2 <prvTaskIsTaskSuspended+0x1a>
 80183ce:	b672      	cpsid	i
 80183d0:	e7fe      	b.n	80183d0 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80183d2:	68bb      	ldr	r3, [r7, #8]
 80183d4:	695a      	ldr	r2, [r3, #20]
 80183d6:	4b09      	ldr	r3, [pc, #36]	; (80183fc <prvTaskIsTaskSuspended+0x44>)
 80183d8:	429a      	cmp	r2, r3
 80183da:	d10a      	bne.n	80183f2 <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80183e0:	4b07      	ldr	r3, [pc, #28]	; (8018400 <prvTaskIsTaskSuspended+0x48>)
 80183e2:	429a      	cmp	r2, r3
 80183e4:	d005      	beq.n	80183f2 <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80183e6:	68bb      	ldr	r3, [r7, #8]
 80183e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d101      	bne.n	80183f2 <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 80183ee:	2301      	movs	r3, #1
 80183f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80183f2:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80183f4:	0018      	movs	r0, r3
 80183f6:	46bd      	mov	sp, r7
 80183f8:	b004      	add	sp, #16
 80183fa:	bd80      	pop	{r7, pc}
 80183fc:	200011fc 	.word	0x200011fc
 8018400:	200011d0 	.word	0x200011d0

08018404 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018404:	b580      	push	{r7, lr}
 8018406:	b084      	sub	sp, #16
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d101      	bne.n	801841a <vTaskResume+0x16>
 8018416:	b672      	cpsid	i
 8018418:	e7fe      	b.n	8018418 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801841a:	4b1e      	ldr	r3, [pc, #120]	; (8018494 <vTaskResume+0x90>)
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	68fa      	ldr	r2, [r7, #12]
 8018420:	429a      	cmp	r2, r3
 8018422:	d032      	beq.n	801848a <vTaskResume+0x86>
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d02f      	beq.n	801848a <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 801842a:	f001 f8a9 	bl	8019580 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	0018      	movs	r0, r3
 8018432:	f7ff ffc1 	bl	80183b8 <prvTaskIsTaskSuspended>
 8018436:	1e03      	subs	r3, r0, #0
 8018438:	d025      	beq.n	8018486 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	3304      	adds	r3, #4
 801843e:	0018      	movs	r0, r3
 8018440:	f7ff f83d 	bl	80174be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018448:	4b13      	ldr	r3, [pc, #76]	; (8018498 <vTaskResume+0x94>)
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	429a      	cmp	r2, r3
 801844e:	d903      	bls.n	8018458 <vTaskResume+0x54>
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018454:	4b10      	ldr	r3, [pc, #64]	; (8018498 <vTaskResume+0x94>)
 8018456:	601a      	str	r2, [r3, #0]
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801845c:	0013      	movs	r3, r2
 801845e:	009b      	lsls	r3, r3, #2
 8018460:	189b      	adds	r3, r3, r2
 8018462:	009b      	lsls	r3, r3, #2
 8018464:	4a0d      	ldr	r2, [pc, #52]	; (801849c <vTaskResume+0x98>)
 8018466:	189a      	adds	r2, r3, r2
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	3304      	adds	r3, #4
 801846c:	0019      	movs	r1, r3
 801846e:	0010      	movs	r0, r2
 8018470:	f7fe ffcd 	bl	801740e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018478:	4b06      	ldr	r3, [pc, #24]	; (8018494 <vTaskResume+0x90>)
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801847e:	429a      	cmp	r2, r3
 8018480:	d301      	bcc.n	8018486 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018482:	f001 f86d 	bl	8019560 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018486:	f001 f88d 	bl	80195a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801848a:	46c0      	nop			; (mov r8, r8)
 801848c:	46bd      	mov	sp, r7
 801848e:	b004      	add	sp, #16
 8018490:	bd80      	pop	{r7, pc}
 8018492:	46c0      	nop			; (mov r8, r8)
 8018494:	20000d3c 	.word	0x20000d3c
 8018498:	20001218 	.word	0x20001218
 801849c:	20000d40 	.word	0x20000d40

080184a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80184a0:	b590      	push	{r4, r7, lr}
 80184a2:	b089      	sub	sp, #36	; 0x24
 80184a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80184a6:	2300      	movs	r3, #0
 80184a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80184aa:	2300      	movs	r3, #0
 80184ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80184ae:	003a      	movs	r2, r7
 80184b0:	1d39      	adds	r1, r7, #4
 80184b2:	2308      	movs	r3, #8
 80184b4:	18fb      	adds	r3, r7, r3
 80184b6:	0018      	movs	r0, r3
 80184b8:	f7fe ff50 	bl	801735c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80184bc:	683c      	ldr	r4, [r7, #0]
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	68ba      	ldr	r2, [r7, #8]
 80184c2:	491e      	ldr	r1, [pc, #120]	; (801853c <vTaskStartScheduler+0x9c>)
 80184c4:	481e      	ldr	r0, [pc, #120]	; (8018540 <vTaskStartScheduler+0xa0>)
 80184c6:	9202      	str	r2, [sp, #8]
 80184c8:	9301      	str	r3, [sp, #4]
 80184ca:	2300      	movs	r3, #0
 80184cc:	9300      	str	r3, [sp, #0]
 80184ce:	2300      	movs	r3, #0
 80184d0:	0022      	movs	r2, r4
 80184d2:	f7ff fcde 	bl	8017e92 <xTaskCreateStatic>
 80184d6:	0002      	movs	r2, r0
 80184d8:	4b1a      	ldr	r3, [pc, #104]	; (8018544 <vTaskStartScheduler+0xa4>)
 80184da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80184dc:	4b19      	ldr	r3, [pc, #100]	; (8018544 <vTaskStartScheduler+0xa4>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d002      	beq.n	80184ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80184e4:	2301      	movs	r3, #1
 80184e6:	60fb      	str	r3, [r7, #12]
 80184e8:	e001      	b.n	80184ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80184ea:	2300      	movs	r3, #0
 80184ec:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	2b01      	cmp	r3, #1
 80184f2:	d103      	bne.n	80184fc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80184f4:	f000 fc98 	bl	8018e28 <xTimerCreateTimerTask>
 80184f8:	0003      	movs	r3, r0
 80184fa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	2b01      	cmp	r3, #1
 8018500:	d113      	bne.n	801852a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8018502:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018504:	4b10      	ldr	r3, [pc, #64]	; (8018548 <vTaskStartScheduler+0xa8>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	3354      	adds	r3, #84	; 0x54
 801850a:	001a      	movs	r2, r3
 801850c:	4b0f      	ldr	r3, [pc, #60]	; (801854c <vTaskStartScheduler+0xac>)
 801850e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018510:	4b0f      	ldr	r3, [pc, #60]	; (8018550 <vTaskStartScheduler+0xb0>)
 8018512:	2201      	movs	r2, #1
 8018514:	4252      	negs	r2, r2
 8018516:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018518:	4b0e      	ldr	r3, [pc, #56]	; (8018554 <vTaskStartScheduler+0xb4>)
 801851a:	2201      	movs	r2, #1
 801851c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801851e:	4b0e      	ldr	r3, [pc, #56]	; (8018558 <vTaskStartScheduler+0xb8>)
 8018520:	2200      	movs	r2, #0
 8018522:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018524:	f000 fff8 	bl	8019518 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018528:	e004      	b.n	8018534 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	3301      	adds	r3, #1
 801852e:	d101      	bne.n	8018534 <vTaskStartScheduler+0x94>
 8018530:	b672      	cpsid	i
 8018532:	e7fe      	b.n	8018532 <vTaskStartScheduler+0x92>
}
 8018534:	46c0      	nop			; (mov r8, r8)
 8018536:	46bd      	mov	sp, r7
 8018538:	b005      	add	sp, #20
 801853a:	bd90      	pop	{r4, r7, pc}
 801853c:	08023174 	.word	0x08023174
 8018540:	08018ad9 	.word	0x08018ad9
 8018544:	20001234 	.word	0x20001234
 8018548:	20000d3c 	.word	0x20000d3c
 801854c:	20000240 	.word	0x20000240
 8018550:	20001230 	.word	0x20001230
 8018554:	2000121c 	.word	0x2000121c
 8018558:	20001214 	.word	0x20001214

0801855c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801855c:	b580      	push	{r7, lr}
 801855e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018560:	4b03      	ldr	r3, [pc, #12]	; (8018570 <vTaskSuspendAll+0x14>)
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	1c5a      	adds	r2, r3, #1
 8018566:	4b02      	ldr	r3, [pc, #8]	; (8018570 <vTaskSuspendAll+0x14>)
 8018568:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801856a:	46c0      	nop			; (mov r8, r8)
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}
 8018570:	20001238 	.word	0x20001238

08018574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b084      	sub	sp, #16
 8018578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801857a:	2300      	movs	r3, #0
 801857c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801857e:	2300      	movs	r3, #0
 8018580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018582:	4b3a      	ldr	r3, [pc, #232]	; (801866c <xTaskResumeAll+0xf8>)
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d101      	bne.n	801858e <xTaskResumeAll+0x1a>
 801858a:	b672      	cpsid	i
 801858c:	e7fe      	b.n	801858c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801858e:	f000 fff7 	bl	8019580 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018592:	4b36      	ldr	r3, [pc, #216]	; (801866c <xTaskResumeAll+0xf8>)
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	1e5a      	subs	r2, r3, #1
 8018598:	4b34      	ldr	r3, [pc, #208]	; (801866c <xTaskResumeAll+0xf8>)
 801859a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801859c:	4b33      	ldr	r3, [pc, #204]	; (801866c <xTaskResumeAll+0xf8>)
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d15b      	bne.n	801865c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80185a4:	4b32      	ldr	r3, [pc, #200]	; (8018670 <xTaskResumeAll+0xfc>)
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d057      	beq.n	801865c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80185ac:	e02f      	b.n	801860e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185ae:	4b31      	ldr	r3, [pc, #196]	; (8018674 <xTaskResumeAll+0x100>)
 80185b0:	68db      	ldr	r3, [r3, #12]
 80185b2:	68db      	ldr	r3, [r3, #12]
 80185b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	3318      	adds	r3, #24
 80185ba:	0018      	movs	r0, r3
 80185bc:	f7fe ff7f 	bl	80174be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	3304      	adds	r3, #4
 80185c4:	0018      	movs	r0, r3
 80185c6:	f7fe ff7a 	bl	80174be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185ce:	4b2a      	ldr	r3, [pc, #168]	; (8018678 <xTaskResumeAll+0x104>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d903      	bls.n	80185de <xTaskResumeAll+0x6a>
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185da:	4b27      	ldr	r3, [pc, #156]	; (8018678 <xTaskResumeAll+0x104>)
 80185dc:	601a      	str	r2, [r3, #0]
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185e2:	0013      	movs	r3, r2
 80185e4:	009b      	lsls	r3, r3, #2
 80185e6:	189b      	adds	r3, r3, r2
 80185e8:	009b      	lsls	r3, r3, #2
 80185ea:	4a24      	ldr	r2, [pc, #144]	; (801867c <xTaskResumeAll+0x108>)
 80185ec:	189a      	adds	r2, r3, r2
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	3304      	adds	r3, #4
 80185f2:	0019      	movs	r1, r3
 80185f4:	0010      	movs	r0, r2
 80185f6:	f7fe ff0a 	bl	801740e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185fe:	4b20      	ldr	r3, [pc, #128]	; (8018680 <xTaskResumeAll+0x10c>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018604:	429a      	cmp	r2, r3
 8018606:	d302      	bcc.n	801860e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8018608:	4b1e      	ldr	r3, [pc, #120]	; (8018684 <xTaskResumeAll+0x110>)
 801860a:	2201      	movs	r2, #1
 801860c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801860e:	4b19      	ldr	r3, [pc, #100]	; (8018674 <xTaskResumeAll+0x100>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d1cb      	bne.n	80185ae <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d001      	beq.n	8018620 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801861c:	f000 fb0c 	bl	8018c38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018620:	4b19      	ldr	r3, [pc, #100]	; (8018688 <xTaskResumeAll+0x114>)
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d00f      	beq.n	801864c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801862c:	f000 f83c 	bl	80186a8 <xTaskIncrementTick>
 8018630:	1e03      	subs	r3, r0, #0
 8018632:	d002      	beq.n	801863a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8018634:	4b13      	ldr	r3, [pc, #76]	; (8018684 <xTaskResumeAll+0x110>)
 8018636:	2201      	movs	r2, #1
 8018638:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	3b01      	subs	r3, #1
 801863e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d1f2      	bne.n	801862c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8018646:	4b10      	ldr	r3, [pc, #64]	; (8018688 <xTaskResumeAll+0x114>)
 8018648:	2200      	movs	r2, #0
 801864a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801864c:	4b0d      	ldr	r3, [pc, #52]	; (8018684 <xTaskResumeAll+0x110>)
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d003      	beq.n	801865c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018654:	2301      	movs	r3, #1
 8018656:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018658:	f000 ff82 	bl	8019560 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801865c:	f000 ffa2 	bl	80195a4 <vPortExitCritical>

	return xAlreadyYielded;
 8018660:	68bb      	ldr	r3, [r7, #8]
}
 8018662:	0018      	movs	r0, r3
 8018664:	46bd      	mov	sp, r7
 8018666:	b004      	add	sp, #16
 8018668:	bd80      	pop	{r7, pc}
 801866a:	46c0      	nop			; (mov r8, r8)
 801866c:	20001238 	.word	0x20001238
 8018670:	20001210 	.word	0x20001210
 8018674:	200011d0 	.word	0x200011d0
 8018678:	20001218 	.word	0x20001218
 801867c:	20000d40 	.word	0x20000d40
 8018680:	20000d3c 	.word	0x20000d3c
 8018684:	20001224 	.word	0x20001224
 8018688:	20001220 	.word	0x20001220

0801868c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b082      	sub	sp, #8
 8018690:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018692:	4b04      	ldr	r3, [pc, #16]	; (80186a4 <xTaskGetTickCount+0x18>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018698:	687b      	ldr	r3, [r7, #4]
}
 801869a:	0018      	movs	r0, r3
 801869c:	46bd      	mov	sp, r7
 801869e:	b002      	add	sp, #8
 80186a0:	bd80      	pop	{r7, pc}
 80186a2:	46c0      	nop			; (mov r8, r8)
 80186a4:	20001214 	.word	0x20001214

080186a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b086      	sub	sp, #24
 80186ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80186ae:	2300      	movs	r3, #0
 80186b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80186b2:	4b4a      	ldr	r3, [pc, #296]	; (80187dc <xTaskIncrementTick+0x134>)
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d000      	beq.n	80186bc <xTaskIncrementTick+0x14>
 80186ba:	e084      	b.n	80187c6 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80186bc:	4b48      	ldr	r3, [pc, #288]	; (80187e0 <xTaskIncrementTick+0x138>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	3301      	adds	r3, #1
 80186c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80186c4:	4b46      	ldr	r3, [pc, #280]	; (80187e0 <xTaskIncrementTick+0x138>)
 80186c6:	693a      	ldr	r2, [r7, #16]
 80186c8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80186ca:	693b      	ldr	r3, [r7, #16]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d117      	bne.n	8018700 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80186d0:	4b44      	ldr	r3, [pc, #272]	; (80187e4 <xTaskIncrementTick+0x13c>)
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d001      	beq.n	80186de <xTaskIncrementTick+0x36>
 80186da:	b672      	cpsid	i
 80186dc:	e7fe      	b.n	80186dc <xTaskIncrementTick+0x34>
 80186de:	4b41      	ldr	r3, [pc, #260]	; (80187e4 <xTaskIncrementTick+0x13c>)
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	60fb      	str	r3, [r7, #12]
 80186e4:	4b40      	ldr	r3, [pc, #256]	; (80187e8 <xTaskIncrementTick+0x140>)
 80186e6:	681a      	ldr	r2, [r3, #0]
 80186e8:	4b3e      	ldr	r3, [pc, #248]	; (80187e4 <xTaskIncrementTick+0x13c>)
 80186ea:	601a      	str	r2, [r3, #0]
 80186ec:	4b3e      	ldr	r3, [pc, #248]	; (80187e8 <xTaskIncrementTick+0x140>)
 80186ee:	68fa      	ldr	r2, [r7, #12]
 80186f0:	601a      	str	r2, [r3, #0]
 80186f2:	4b3e      	ldr	r3, [pc, #248]	; (80187ec <xTaskIncrementTick+0x144>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	1c5a      	adds	r2, r3, #1
 80186f8:	4b3c      	ldr	r3, [pc, #240]	; (80187ec <xTaskIncrementTick+0x144>)
 80186fa:	601a      	str	r2, [r3, #0]
 80186fc:	f000 fa9c 	bl	8018c38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018700:	4b3b      	ldr	r3, [pc, #236]	; (80187f0 <xTaskIncrementTick+0x148>)
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	693a      	ldr	r2, [r7, #16]
 8018706:	429a      	cmp	r2, r3
 8018708:	d349      	bcc.n	801879e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801870a:	4b36      	ldr	r3, [pc, #216]	; (80187e4 <xTaskIncrementTick+0x13c>)
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d104      	bne.n	801871e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018714:	4b36      	ldr	r3, [pc, #216]	; (80187f0 <xTaskIncrementTick+0x148>)
 8018716:	2201      	movs	r2, #1
 8018718:	4252      	negs	r2, r2
 801871a:	601a      	str	r2, [r3, #0]
					break;
 801871c:	e03f      	b.n	801879e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801871e:	4b31      	ldr	r3, [pc, #196]	; (80187e4 <xTaskIncrementTick+0x13c>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	68db      	ldr	r3, [r3, #12]
 8018724:	68db      	ldr	r3, [r3, #12]
 8018726:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018728:	68bb      	ldr	r3, [r7, #8]
 801872a:	685b      	ldr	r3, [r3, #4]
 801872c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801872e:	693a      	ldr	r2, [r7, #16]
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	429a      	cmp	r2, r3
 8018734:	d203      	bcs.n	801873e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018736:	4b2e      	ldr	r3, [pc, #184]	; (80187f0 <xTaskIncrementTick+0x148>)
 8018738:	687a      	ldr	r2, [r7, #4]
 801873a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801873c:	e02f      	b.n	801879e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801873e:	68bb      	ldr	r3, [r7, #8]
 8018740:	3304      	adds	r3, #4
 8018742:	0018      	movs	r0, r3
 8018744:	f7fe febb 	bl	80174be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801874c:	2b00      	cmp	r3, #0
 801874e:	d004      	beq.n	801875a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018750:	68bb      	ldr	r3, [r7, #8]
 8018752:	3318      	adds	r3, #24
 8018754:	0018      	movs	r0, r3
 8018756:	f7fe feb2 	bl	80174be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801875a:	68bb      	ldr	r3, [r7, #8]
 801875c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801875e:	4b25      	ldr	r3, [pc, #148]	; (80187f4 <xTaskIncrementTick+0x14c>)
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	429a      	cmp	r2, r3
 8018764:	d903      	bls.n	801876e <xTaskIncrementTick+0xc6>
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801876a:	4b22      	ldr	r3, [pc, #136]	; (80187f4 <xTaskIncrementTick+0x14c>)
 801876c:	601a      	str	r2, [r3, #0]
 801876e:	68bb      	ldr	r3, [r7, #8]
 8018770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018772:	0013      	movs	r3, r2
 8018774:	009b      	lsls	r3, r3, #2
 8018776:	189b      	adds	r3, r3, r2
 8018778:	009b      	lsls	r3, r3, #2
 801877a:	4a1f      	ldr	r2, [pc, #124]	; (80187f8 <xTaskIncrementTick+0x150>)
 801877c:	189a      	adds	r2, r3, r2
 801877e:	68bb      	ldr	r3, [r7, #8]
 8018780:	3304      	adds	r3, #4
 8018782:	0019      	movs	r1, r3
 8018784:	0010      	movs	r0, r2
 8018786:	f7fe fe42 	bl	801740e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801878a:	68bb      	ldr	r3, [r7, #8]
 801878c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801878e:	4b1b      	ldr	r3, [pc, #108]	; (80187fc <xTaskIncrementTick+0x154>)
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018794:	429a      	cmp	r2, r3
 8018796:	d3b8      	bcc.n	801870a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8018798:	2301      	movs	r3, #1
 801879a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801879c:	e7b5      	b.n	801870a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801879e:	4b17      	ldr	r3, [pc, #92]	; (80187fc <xTaskIncrementTick+0x154>)
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187a4:	4914      	ldr	r1, [pc, #80]	; (80187f8 <xTaskIncrementTick+0x150>)
 80187a6:	0013      	movs	r3, r2
 80187a8:	009b      	lsls	r3, r3, #2
 80187aa:	189b      	adds	r3, r3, r2
 80187ac:	009b      	lsls	r3, r3, #2
 80187ae:	585b      	ldr	r3, [r3, r1]
 80187b0:	2b01      	cmp	r3, #1
 80187b2:	d901      	bls.n	80187b8 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80187b4:	2301      	movs	r3, #1
 80187b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80187b8:	4b11      	ldr	r3, [pc, #68]	; (8018800 <xTaskIncrementTick+0x158>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d007      	beq.n	80187d0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80187c0:	2301      	movs	r3, #1
 80187c2:	617b      	str	r3, [r7, #20]
 80187c4:	e004      	b.n	80187d0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80187c6:	4b0f      	ldr	r3, [pc, #60]	; (8018804 <xTaskIncrementTick+0x15c>)
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	1c5a      	adds	r2, r3, #1
 80187cc:	4b0d      	ldr	r3, [pc, #52]	; (8018804 <xTaskIncrementTick+0x15c>)
 80187ce:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80187d0:	697b      	ldr	r3, [r7, #20]
}
 80187d2:	0018      	movs	r0, r3
 80187d4:	46bd      	mov	sp, r7
 80187d6:	b006      	add	sp, #24
 80187d8:	bd80      	pop	{r7, pc}
 80187da:	46c0      	nop			; (mov r8, r8)
 80187dc:	20001238 	.word	0x20001238
 80187e0:	20001214 	.word	0x20001214
 80187e4:	200011c8 	.word	0x200011c8
 80187e8:	200011cc 	.word	0x200011cc
 80187ec:	20001228 	.word	0x20001228
 80187f0:	20001230 	.word	0x20001230
 80187f4:	20001218 	.word	0x20001218
 80187f8:	20000d40 	.word	0x20000d40
 80187fc:	20000d3c 	.word	0x20000d3c
 8018800:	20001224 	.word	0x20001224
 8018804:	20001220 	.word	0x20001220

08018808 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b082      	sub	sp, #8
 801880c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801880e:	4b25      	ldr	r3, [pc, #148]	; (80188a4 <vTaskSwitchContext+0x9c>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d003      	beq.n	801881e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018816:	4b24      	ldr	r3, [pc, #144]	; (80188a8 <vTaskSwitchContext+0xa0>)
 8018818:	2201      	movs	r2, #1
 801881a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801881c:	e03d      	b.n	801889a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 801881e:	4b22      	ldr	r3, [pc, #136]	; (80188a8 <vTaskSwitchContext+0xa0>)
 8018820:	2200      	movs	r2, #0
 8018822:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018824:	4b21      	ldr	r3, [pc, #132]	; (80188ac <vTaskSwitchContext+0xa4>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	607b      	str	r3, [r7, #4]
 801882a:	e007      	b.n	801883c <vTaskSwitchContext+0x34>
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d101      	bne.n	8018836 <vTaskSwitchContext+0x2e>
 8018832:	b672      	cpsid	i
 8018834:	e7fe      	b.n	8018834 <vTaskSwitchContext+0x2c>
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	3b01      	subs	r3, #1
 801883a:	607b      	str	r3, [r7, #4]
 801883c:	491c      	ldr	r1, [pc, #112]	; (80188b0 <vTaskSwitchContext+0xa8>)
 801883e:	687a      	ldr	r2, [r7, #4]
 8018840:	0013      	movs	r3, r2
 8018842:	009b      	lsls	r3, r3, #2
 8018844:	189b      	adds	r3, r3, r2
 8018846:	009b      	lsls	r3, r3, #2
 8018848:	585b      	ldr	r3, [r3, r1]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d0ee      	beq.n	801882c <vTaskSwitchContext+0x24>
 801884e:	687a      	ldr	r2, [r7, #4]
 8018850:	0013      	movs	r3, r2
 8018852:	009b      	lsls	r3, r3, #2
 8018854:	189b      	adds	r3, r3, r2
 8018856:	009b      	lsls	r3, r3, #2
 8018858:	4a15      	ldr	r2, [pc, #84]	; (80188b0 <vTaskSwitchContext+0xa8>)
 801885a:	189b      	adds	r3, r3, r2
 801885c:	603b      	str	r3, [r7, #0]
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	685a      	ldr	r2, [r3, #4]
 8018864:	683b      	ldr	r3, [r7, #0]
 8018866:	605a      	str	r2, [r3, #4]
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	685a      	ldr	r2, [r3, #4]
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	3308      	adds	r3, #8
 8018870:	429a      	cmp	r2, r3
 8018872:	d104      	bne.n	801887e <vTaskSwitchContext+0x76>
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	685b      	ldr	r3, [r3, #4]
 8018878:	685a      	ldr	r2, [r3, #4]
 801887a:	683b      	ldr	r3, [r7, #0]
 801887c:	605a      	str	r2, [r3, #4]
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	68da      	ldr	r2, [r3, #12]
 8018884:	4b0b      	ldr	r3, [pc, #44]	; (80188b4 <vTaskSwitchContext+0xac>)
 8018886:	601a      	str	r2, [r3, #0]
 8018888:	4b08      	ldr	r3, [pc, #32]	; (80188ac <vTaskSwitchContext+0xa4>)
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801888e:	4b09      	ldr	r3, [pc, #36]	; (80188b4 <vTaskSwitchContext+0xac>)
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	3354      	adds	r3, #84	; 0x54
 8018894:	001a      	movs	r2, r3
 8018896:	4b08      	ldr	r3, [pc, #32]	; (80188b8 <vTaskSwitchContext+0xb0>)
 8018898:	601a      	str	r2, [r3, #0]
}
 801889a:	46c0      	nop			; (mov r8, r8)
 801889c:	46bd      	mov	sp, r7
 801889e:	b002      	add	sp, #8
 80188a0:	bd80      	pop	{r7, pc}
 80188a2:	46c0      	nop			; (mov r8, r8)
 80188a4:	20001238 	.word	0x20001238
 80188a8:	20001224 	.word	0x20001224
 80188ac:	20001218 	.word	0x20001218
 80188b0:	20000d40 	.word	0x20000d40
 80188b4:	20000d3c 	.word	0x20000d3c
 80188b8:	20000240 	.word	0x20000240

080188bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b082      	sub	sp, #8
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
 80188c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d101      	bne.n	80188d0 <vTaskPlaceOnEventList+0x14>
 80188cc:	b672      	cpsid	i
 80188ce:	e7fe      	b.n	80188ce <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80188d0:	4b08      	ldr	r3, [pc, #32]	; (80188f4 <vTaskPlaceOnEventList+0x38>)
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	3318      	adds	r3, #24
 80188d6:	001a      	movs	r2, r3
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	0011      	movs	r1, r2
 80188dc:	0018      	movs	r0, r3
 80188de:	f7fe fdb8 	bl	8017452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	2101      	movs	r1, #1
 80188e6:	0018      	movs	r0, r3
 80188e8:	f000 fa4a 	bl	8018d80 <prvAddCurrentTaskToDelayedList>
}
 80188ec:	46c0      	nop			; (mov r8, r8)
 80188ee:	46bd      	mov	sp, r7
 80188f0:	b002      	add	sp, #8
 80188f2:	bd80      	pop	{r7, pc}
 80188f4:	20000d3c 	.word	0x20000d3c

080188f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b084      	sub	sp, #16
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	60f8      	str	r0, [r7, #12]
 8018900:	60b9      	str	r1, [r7, #8]
 8018902:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d101      	bne.n	801890e <vTaskPlaceOnEventListRestricted+0x16>
 801890a:	b672      	cpsid	i
 801890c:	e7fe      	b.n	801890c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801890e:	4b0c      	ldr	r3, [pc, #48]	; (8018940 <vTaskPlaceOnEventListRestricted+0x48>)
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	3318      	adds	r3, #24
 8018914:	001a      	movs	r2, r3
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	0011      	movs	r1, r2
 801891a:	0018      	movs	r0, r3
 801891c:	f7fe fd77 	bl	801740e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d002      	beq.n	801892c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8018926:	2301      	movs	r3, #1
 8018928:	425b      	negs	r3, r3
 801892a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801892c:	687a      	ldr	r2, [r7, #4]
 801892e:	68bb      	ldr	r3, [r7, #8]
 8018930:	0011      	movs	r1, r2
 8018932:	0018      	movs	r0, r3
 8018934:	f000 fa24 	bl	8018d80 <prvAddCurrentTaskToDelayedList>
	}
 8018938:	46c0      	nop			; (mov r8, r8)
 801893a:	46bd      	mov	sp, r7
 801893c:	b004      	add	sp, #16
 801893e:	bd80      	pop	{r7, pc}
 8018940:	20000d3c 	.word	0x20000d3c

08018944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b084      	sub	sp, #16
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	68db      	ldr	r3, [r3, #12]
 8018950:	68db      	ldr	r3, [r3, #12]
 8018952:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8018954:	68bb      	ldr	r3, [r7, #8]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d101      	bne.n	801895e <xTaskRemoveFromEventList+0x1a>
 801895a:	b672      	cpsid	i
 801895c:	e7fe      	b.n	801895c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	3318      	adds	r3, #24
 8018962:	0018      	movs	r0, r3
 8018964:	f7fe fdab 	bl	80174be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018968:	4b1e      	ldr	r3, [pc, #120]	; (80189e4 <xTaskRemoveFromEventList+0xa0>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d11d      	bne.n	80189ac <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018970:	68bb      	ldr	r3, [r7, #8]
 8018972:	3304      	adds	r3, #4
 8018974:	0018      	movs	r0, r3
 8018976:	f7fe fda2 	bl	80174be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801897a:	68bb      	ldr	r3, [r7, #8]
 801897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801897e:	4b1a      	ldr	r3, [pc, #104]	; (80189e8 <xTaskRemoveFromEventList+0xa4>)
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	429a      	cmp	r2, r3
 8018984:	d903      	bls.n	801898e <xTaskRemoveFromEventList+0x4a>
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801898a:	4b17      	ldr	r3, [pc, #92]	; (80189e8 <xTaskRemoveFromEventList+0xa4>)
 801898c:	601a      	str	r2, [r3, #0]
 801898e:	68bb      	ldr	r3, [r7, #8]
 8018990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018992:	0013      	movs	r3, r2
 8018994:	009b      	lsls	r3, r3, #2
 8018996:	189b      	adds	r3, r3, r2
 8018998:	009b      	lsls	r3, r3, #2
 801899a:	4a14      	ldr	r2, [pc, #80]	; (80189ec <xTaskRemoveFromEventList+0xa8>)
 801899c:	189a      	adds	r2, r3, r2
 801899e:	68bb      	ldr	r3, [r7, #8]
 80189a0:	3304      	adds	r3, #4
 80189a2:	0019      	movs	r1, r3
 80189a4:	0010      	movs	r0, r2
 80189a6:	f7fe fd32 	bl	801740e <vListInsertEnd>
 80189aa:	e007      	b.n	80189bc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	3318      	adds	r3, #24
 80189b0:	001a      	movs	r2, r3
 80189b2:	4b0f      	ldr	r3, [pc, #60]	; (80189f0 <xTaskRemoveFromEventList+0xac>)
 80189b4:	0011      	movs	r1, r2
 80189b6:	0018      	movs	r0, r3
 80189b8:	f7fe fd29 	bl	801740e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189c0:	4b0c      	ldr	r3, [pc, #48]	; (80189f4 <xTaskRemoveFromEventList+0xb0>)
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189c6:	429a      	cmp	r2, r3
 80189c8:	d905      	bls.n	80189d6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80189ca:	2301      	movs	r3, #1
 80189cc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80189ce:	4b0a      	ldr	r3, [pc, #40]	; (80189f8 <xTaskRemoveFromEventList+0xb4>)
 80189d0:	2201      	movs	r2, #1
 80189d2:	601a      	str	r2, [r3, #0]
 80189d4:	e001      	b.n	80189da <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80189d6:	2300      	movs	r3, #0
 80189d8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80189da:	68fb      	ldr	r3, [r7, #12]
}
 80189dc:	0018      	movs	r0, r3
 80189de:	46bd      	mov	sp, r7
 80189e0:	b004      	add	sp, #16
 80189e2:	bd80      	pop	{r7, pc}
 80189e4:	20001238 	.word	0x20001238
 80189e8:	20001218 	.word	0x20001218
 80189ec:	20000d40 	.word	0x20000d40
 80189f0:	200011d0 	.word	0x200011d0
 80189f4:	20000d3c 	.word	0x20000d3c
 80189f8:	20001224 	.word	0x20001224

080189fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018a04:	4b05      	ldr	r3, [pc, #20]	; (8018a1c <vTaskInternalSetTimeOutState+0x20>)
 8018a06:	681a      	ldr	r2, [r3, #0]
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018a0c:	4b04      	ldr	r3, [pc, #16]	; (8018a20 <vTaskInternalSetTimeOutState+0x24>)
 8018a0e:	681a      	ldr	r2, [r3, #0]
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	605a      	str	r2, [r3, #4]
}
 8018a14:	46c0      	nop			; (mov r8, r8)
 8018a16:	46bd      	mov	sp, r7
 8018a18:	b002      	add	sp, #8
 8018a1a:	bd80      	pop	{r7, pc}
 8018a1c:	20001228 	.word	0x20001228
 8018a20:	20001214 	.word	0x20001214

08018a24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b086      	sub	sp, #24
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
 8018a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d101      	bne.n	8018a38 <xTaskCheckForTimeOut+0x14>
 8018a34:	b672      	cpsid	i
 8018a36:	e7fe      	b.n	8018a36 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8018a38:	683b      	ldr	r3, [r7, #0]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d101      	bne.n	8018a42 <xTaskCheckForTimeOut+0x1e>
 8018a3e:	b672      	cpsid	i
 8018a40:	e7fe      	b.n	8018a40 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8018a42:	f000 fd9d 	bl	8019580 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018a46:	4b1d      	ldr	r3, [pc, #116]	; (8018abc <xTaskCheckForTimeOut+0x98>)
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	685b      	ldr	r3, [r3, #4]
 8018a50:	693a      	ldr	r2, [r7, #16]
 8018a52:	1ad3      	subs	r3, r2, r3
 8018a54:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018a56:	683b      	ldr	r3, [r7, #0]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	d102      	bne.n	8018a64 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018a5e:	2300      	movs	r3, #0
 8018a60:	617b      	str	r3, [r7, #20]
 8018a62:	e024      	b.n	8018aae <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	681a      	ldr	r2, [r3, #0]
 8018a68:	4b15      	ldr	r3, [pc, #84]	; (8018ac0 <xTaskCheckForTimeOut+0x9c>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	d007      	beq.n	8018a80 <xTaskCheckForTimeOut+0x5c>
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	685b      	ldr	r3, [r3, #4]
 8018a74:	693a      	ldr	r2, [r7, #16]
 8018a76:	429a      	cmp	r2, r3
 8018a78:	d302      	bcc.n	8018a80 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018a7a:	2301      	movs	r3, #1
 8018a7c:	617b      	str	r3, [r7, #20]
 8018a7e:	e016      	b.n	8018aae <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	68fa      	ldr	r2, [r7, #12]
 8018a86:	429a      	cmp	r2, r3
 8018a88:	d20c      	bcs.n	8018aa4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018a8a:	683b      	ldr	r3, [r7, #0]
 8018a8c:	681a      	ldr	r2, [r3, #0]
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	1ad2      	subs	r2, r2, r3
 8018a92:	683b      	ldr	r3, [r7, #0]
 8018a94:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	0018      	movs	r0, r3
 8018a9a:	f7ff ffaf 	bl	80189fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	617b      	str	r3, [r7, #20]
 8018aa2:	e004      	b.n	8018aae <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8018aa4:	683b      	ldr	r3, [r7, #0]
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018aaa:	2301      	movs	r3, #1
 8018aac:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8018aae:	f000 fd79 	bl	80195a4 <vPortExitCritical>

	return xReturn;
 8018ab2:	697b      	ldr	r3, [r7, #20]
}
 8018ab4:	0018      	movs	r0, r3
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	b006      	add	sp, #24
 8018aba:	bd80      	pop	{r7, pc}
 8018abc:	20001214 	.word	0x20001214
 8018ac0:	20001228 	.word	0x20001228

08018ac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018ac8:	4b02      	ldr	r3, [pc, #8]	; (8018ad4 <vTaskMissedYield+0x10>)
 8018aca:	2201      	movs	r2, #1
 8018acc:	601a      	str	r2, [r3, #0]
}
 8018ace:	46c0      	nop			; (mov r8, r8)
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd80      	pop	{r7, pc}
 8018ad4:	20001224 	.word	0x20001224

08018ad8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b082      	sub	sp, #8
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018ae0:	f000 f84e 	bl	8018b80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018ae4:	4b03      	ldr	r3, [pc, #12]	; (8018af4 <prvIdleTask+0x1c>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	2b01      	cmp	r3, #1
 8018aea:	d9f9      	bls.n	8018ae0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018aec:	f000 fd38 	bl	8019560 <vPortYield>
		prvCheckTasksWaitingTermination();
 8018af0:	e7f6      	b.n	8018ae0 <prvIdleTask+0x8>
 8018af2:	46c0      	nop			; (mov r8, r8)
 8018af4:	20000d40 	.word	0x20000d40

08018af8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b082      	sub	sp, #8
 8018afc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018afe:	2300      	movs	r3, #0
 8018b00:	607b      	str	r3, [r7, #4]
 8018b02:	e00c      	b.n	8018b1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018b04:	687a      	ldr	r2, [r7, #4]
 8018b06:	0013      	movs	r3, r2
 8018b08:	009b      	lsls	r3, r3, #2
 8018b0a:	189b      	adds	r3, r3, r2
 8018b0c:	009b      	lsls	r3, r3, #2
 8018b0e:	4a14      	ldr	r2, [pc, #80]	; (8018b60 <prvInitialiseTaskLists+0x68>)
 8018b10:	189b      	adds	r3, r3, r2
 8018b12:	0018      	movs	r0, r3
 8018b14:	f7fe fc52 	bl	80173bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	3301      	adds	r3, #1
 8018b1c:	607b      	str	r3, [r7, #4]
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	2b37      	cmp	r3, #55	; 0x37
 8018b22:	d9ef      	bls.n	8018b04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018b24:	4b0f      	ldr	r3, [pc, #60]	; (8018b64 <prvInitialiseTaskLists+0x6c>)
 8018b26:	0018      	movs	r0, r3
 8018b28:	f7fe fc48 	bl	80173bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018b2c:	4b0e      	ldr	r3, [pc, #56]	; (8018b68 <prvInitialiseTaskLists+0x70>)
 8018b2e:	0018      	movs	r0, r3
 8018b30:	f7fe fc44 	bl	80173bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018b34:	4b0d      	ldr	r3, [pc, #52]	; (8018b6c <prvInitialiseTaskLists+0x74>)
 8018b36:	0018      	movs	r0, r3
 8018b38:	f7fe fc40 	bl	80173bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018b3c:	4b0c      	ldr	r3, [pc, #48]	; (8018b70 <prvInitialiseTaskLists+0x78>)
 8018b3e:	0018      	movs	r0, r3
 8018b40:	f7fe fc3c 	bl	80173bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018b44:	4b0b      	ldr	r3, [pc, #44]	; (8018b74 <prvInitialiseTaskLists+0x7c>)
 8018b46:	0018      	movs	r0, r3
 8018b48:	f7fe fc38 	bl	80173bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018b4c:	4b0a      	ldr	r3, [pc, #40]	; (8018b78 <prvInitialiseTaskLists+0x80>)
 8018b4e:	4a05      	ldr	r2, [pc, #20]	; (8018b64 <prvInitialiseTaskLists+0x6c>)
 8018b50:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018b52:	4b0a      	ldr	r3, [pc, #40]	; (8018b7c <prvInitialiseTaskLists+0x84>)
 8018b54:	4a04      	ldr	r2, [pc, #16]	; (8018b68 <prvInitialiseTaskLists+0x70>)
 8018b56:	601a      	str	r2, [r3, #0]
}
 8018b58:	46c0      	nop			; (mov r8, r8)
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	b002      	add	sp, #8
 8018b5e:	bd80      	pop	{r7, pc}
 8018b60:	20000d40 	.word	0x20000d40
 8018b64:	200011a0 	.word	0x200011a0
 8018b68:	200011b4 	.word	0x200011b4
 8018b6c:	200011d0 	.word	0x200011d0
 8018b70:	200011e4 	.word	0x200011e4
 8018b74:	200011fc 	.word	0x200011fc
 8018b78:	200011c8 	.word	0x200011c8
 8018b7c:	200011cc 	.word	0x200011cc

08018b80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b082      	sub	sp, #8
 8018b84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018b86:	e01a      	b.n	8018bbe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8018b88:	f000 fcfa 	bl	8019580 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b8c:	4b10      	ldr	r3, [pc, #64]	; (8018bd0 <prvCheckTasksWaitingTermination+0x50>)
 8018b8e:	68db      	ldr	r3, [r3, #12]
 8018b90:	68db      	ldr	r3, [r3, #12]
 8018b92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	3304      	adds	r3, #4
 8018b98:	0018      	movs	r0, r3
 8018b9a:	f7fe fc90 	bl	80174be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018b9e:	4b0d      	ldr	r3, [pc, #52]	; (8018bd4 <prvCheckTasksWaitingTermination+0x54>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	1e5a      	subs	r2, r3, #1
 8018ba4:	4b0b      	ldr	r3, [pc, #44]	; (8018bd4 <prvCheckTasksWaitingTermination+0x54>)
 8018ba6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018ba8:	4b0b      	ldr	r3, [pc, #44]	; (8018bd8 <prvCheckTasksWaitingTermination+0x58>)
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	1e5a      	subs	r2, r3, #1
 8018bae:	4b0a      	ldr	r3, [pc, #40]	; (8018bd8 <prvCheckTasksWaitingTermination+0x58>)
 8018bb0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8018bb2:	f000 fcf7 	bl	80195a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	0018      	movs	r0, r3
 8018bba:	f000 f80f 	bl	8018bdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018bbe:	4b06      	ldr	r3, [pc, #24]	; (8018bd8 <prvCheckTasksWaitingTermination+0x58>)
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d1e0      	bne.n	8018b88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018bc6:	46c0      	nop			; (mov r8, r8)
 8018bc8:	46c0      	nop			; (mov r8, r8)
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	b002      	add	sp, #8
 8018bce:	bd80      	pop	{r7, pc}
 8018bd0:	200011e4 	.word	0x200011e4
 8018bd4:	20001210 	.word	0x20001210
 8018bd8:	200011f8 	.word	0x200011f8

08018bdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b082      	sub	sp, #8
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	3354      	adds	r3, #84	; 0x54
 8018be8:	0018      	movs	r0, r3
 8018bea:	f009 fd61 	bl	80226b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	22a5      	movs	r2, #165	; 0xa5
 8018bf2:	5c9b      	ldrb	r3, [r3, r2]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d109      	bne.n	8018c0c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bfc:	0018      	movs	r0, r3
 8018bfe:	f000 fe03 	bl	8019808 <vPortFree>
				vPortFree( pxTCB );
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	0018      	movs	r0, r3
 8018c06:	f000 fdff 	bl	8019808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018c0a:	e010      	b.n	8018c2e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	22a5      	movs	r2, #165	; 0xa5
 8018c10:	5c9b      	ldrb	r3, [r3, r2]
 8018c12:	2b01      	cmp	r3, #1
 8018c14:	d104      	bne.n	8018c20 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	0018      	movs	r0, r3
 8018c1a:	f000 fdf5 	bl	8019808 <vPortFree>
	}
 8018c1e:	e006      	b.n	8018c2e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	22a5      	movs	r2, #165	; 0xa5
 8018c24:	5c9b      	ldrb	r3, [r3, r2]
 8018c26:	2b02      	cmp	r3, #2
 8018c28:	d001      	beq.n	8018c2e <prvDeleteTCB+0x52>
 8018c2a:	b672      	cpsid	i
 8018c2c:	e7fe      	b.n	8018c2c <prvDeleteTCB+0x50>
	}
 8018c2e:	46c0      	nop			; (mov r8, r8)
 8018c30:	46bd      	mov	sp, r7
 8018c32:	b002      	add	sp, #8
 8018c34:	bd80      	pop	{r7, pc}
	...

08018c38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b082      	sub	sp, #8
 8018c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018c3e:	4b0b      	ldr	r3, [pc, #44]	; (8018c6c <prvResetNextTaskUnblockTime+0x34>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d104      	bne.n	8018c52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018c48:	4b09      	ldr	r3, [pc, #36]	; (8018c70 <prvResetNextTaskUnblockTime+0x38>)
 8018c4a:	2201      	movs	r2, #1
 8018c4c:	4252      	negs	r2, r2
 8018c4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018c50:	e008      	b.n	8018c64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c52:	4b06      	ldr	r3, [pc, #24]	; (8018c6c <prvResetNextTaskUnblockTime+0x34>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	68db      	ldr	r3, [r3, #12]
 8018c58:	68db      	ldr	r3, [r3, #12]
 8018c5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	685a      	ldr	r2, [r3, #4]
 8018c60:	4b03      	ldr	r3, [pc, #12]	; (8018c70 <prvResetNextTaskUnblockTime+0x38>)
 8018c62:	601a      	str	r2, [r3, #0]
}
 8018c64:	46c0      	nop			; (mov r8, r8)
 8018c66:	46bd      	mov	sp, r7
 8018c68:	b002      	add	sp, #8
 8018c6a:	bd80      	pop	{r7, pc}
 8018c6c:	200011c8 	.word	0x200011c8
 8018c70:	20001230 	.word	0x20001230

08018c74 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b082      	sub	sp, #8
 8018c78:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018c7a:	4b04      	ldr	r3, [pc, #16]	; (8018c8c <xTaskGetCurrentTaskHandle+0x18>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018c80:	687b      	ldr	r3, [r7, #4]
	}
 8018c82:	0018      	movs	r0, r3
 8018c84:	46bd      	mov	sp, r7
 8018c86:	b002      	add	sp, #8
 8018c88:	bd80      	pop	{r7, pc}
 8018c8a:	46c0      	nop			; (mov r8, r8)
 8018c8c:	20000d3c 	.word	0x20000d3c

08018c90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b082      	sub	sp, #8
 8018c94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018c96:	4b0a      	ldr	r3, [pc, #40]	; (8018cc0 <xTaskGetSchedulerState+0x30>)
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d102      	bne.n	8018ca4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018c9e:	2301      	movs	r3, #1
 8018ca0:	607b      	str	r3, [r7, #4]
 8018ca2:	e008      	b.n	8018cb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018ca4:	4b07      	ldr	r3, [pc, #28]	; (8018cc4 <xTaskGetSchedulerState+0x34>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d102      	bne.n	8018cb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018cac:	2302      	movs	r3, #2
 8018cae:	607b      	str	r3, [r7, #4]
 8018cb0:	e001      	b.n	8018cb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018cb6:	687b      	ldr	r3, [r7, #4]
	}
 8018cb8:	0018      	movs	r0, r3
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	b002      	add	sp, #8
 8018cbe:	bd80      	pop	{r7, pc}
 8018cc0:	2000121c 	.word	0x2000121c
 8018cc4:	20001238 	.word	0x20001238

08018cc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b084      	sub	sp, #16
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d044      	beq.n	8018d68 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018cde:	4b25      	ldr	r3, [pc, #148]	; (8018d74 <xTaskPriorityDisinherit+0xac>)
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	68ba      	ldr	r2, [r7, #8]
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	d001      	beq.n	8018cec <xTaskPriorityDisinherit+0x24>
 8018ce8:	b672      	cpsid	i
 8018cea:	e7fe      	b.n	8018cea <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d101      	bne.n	8018cf8 <xTaskPriorityDisinherit+0x30>
 8018cf4:	b672      	cpsid	i
 8018cf6:	e7fe      	b.n	8018cf6 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8018cf8:	68bb      	ldr	r3, [r7, #8]
 8018cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cfc:	1e5a      	subs	r2, r3, #1
 8018cfe:	68bb      	ldr	r3, [r7, #8]
 8018d00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018d02:	68bb      	ldr	r3, [r7, #8]
 8018d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d06:	68bb      	ldr	r3, [r7, #8]
 8018d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018d0a:	429a      	cmp	r2, r3
 8018d0c:	d02c      	beq.n	8018d68 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018d0e:	68bb      	ldr	r3, [r7, #8]
 8018d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d128      	bne.n	8018d68 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d16:	68bb      	ldr	r3, [r7, #8]
 8018d18:	3304      	adds	r3, #4
 8018d1a:	0018      	movs	r0, r3
 8018d1c:	f7fe fbcf 	bl	80174be <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d2c:	2238      	movs	r2, #56	; 0x38
 8018d2e:	1ad2      	subs	r2, r2, r3
 8018d30:	68bb      	ldr	r3, [r7, #8]
 8018d32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018d34:	68bb      	ldr	r3, [r7, #8]
 8018d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d38:	4b0f      	ldr	r3, [pc, #60]	; (8018d78 <xTaskPriorityDisinherit+0xb0>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d903      	bls.n	8018d48 <xTaskPriorityDisinherit+0x80>
 8018d40:	68bb      	ldr	r3, [r7, #8]
 8018d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d44:	4b0c      	ldr	r3, [pc, #48]	; (8018d78 <xTaskPriorityDisinherit+0xb0>)
 8018d46:	601a      	str	r2, [r3, #0]
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d4c:	0013      	movs	r3, r2
 8018d4e:	009b      	lsls	r3, r3, #2
 8018d50:	189b      	adds	r3, r3, r2
 8018d52:	009b      	lsls	r3, r3, #2
 8018d54:	4a09      	ldr	r2, [pc, #36]	; (8018d7c <xTaskPriorityDisinherit+0xb4>)
 8018d56:	189a      	adds	r2, r3, r2
 8018d58:	68bb      	ldr	r3, [r7, #8]
 8018d5a:	3304      	adds	r3, #4
 8018d5c:	0019      	movs	r1, r3
 8018d5e:	0010      	movs	r0, r2
 8018d60:	f7fe fb55 	bl	801740e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018d64:	2301      	movs	r3, #1
 8018d66:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018d68:	68fb      	ldr	r3, [r7, #12]
	}
 8018d6a:	0018      	movs	r0, r3
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	b004      	add	sp, #16
 8018d70:	bd80      	pop	{r7, pc}
 8018d72:	46c0      	nop			; (mov r8, r8)
 8018d74:	20000d3c 	.word	0x20000d3c
 8018d78:	20001218 	.word	0x20001218
 8018d7c:	20000d40 	.word	0x20000d40

08018d80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b084      	sub	sp, #16
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018d8a:	4b21      	ldr	r3, [pc, #132]	; (8018e10 <prvAddCurrentTaskToDelayedList+0x90>)
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d90:	4b20      	ldr	r3, [pc, #128]	; (8018e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	3304      	adds	r3, #4
 8018d96:	0018      	movs	r0, r3
 8018d98:	f7fe fb91 	bl	80174be <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	3301      	adds	r3, #1
 8018da0:	d10b      	bne.n	8018dba <prvAddCurrentTaskToDelayedList+0x3a>
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d008      	beq.n	8018dba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018da8:	4b1a      	ldr	r3, [pc, #104]	; (8018e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	1d1a      	adds	r2, r3, #4
 8018dae:	4b1a      	ldr	r3, [pc, #104]	; (8018e18 <prvAddCurrentTaskToDelayedList+0x98>)
 8018db0:	0011      	movs	r1, r2
 8018db2:	0018      	movs	r0, r3
 8018db4:	f7fe fb2b 	bl	801740e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018db8:	e026      	b.n	8018e08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018dba:	68fa      	ldr	r2, [r7, #12]
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	18d3      	adds	r3, r2, r3
 8018dc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018dc2:	4b14      	ldr	r3, [pc, #80]	; (8018e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	68ba      	ldr	r2, [r7, #8]
 8018dc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018dca:	68ba      	ldr	r2, [r7, #8]
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d209      	bcs.n	8018de6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018dd2:	4b12      	ldr	r3, [pc, #72]	; (8018e1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8018dd4:	681a      	ldr	r2, [r3, #0]
 8018dd6:	4b0f      	ldr	r3, [pc, #60]	; (8018e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	3304      	adds	r3, #4
 8018ddc:	0019      	movs	r1, r3
 8018dde:	0010      	movs	r0, r2
 8018de0:	f7fe fb37 	bl	8017452 <vListInsert>
}
 8018de4:	e010      	b.n	8018e08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018de6:	4b0e      	ldr	r3, [pc, #56]	; (8018e20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018de8:	681a      	ldr	r2, [r3, #0]
 8018dea:	4b0a      	ldr	r3, [pc, #40]	; (8018e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	3304      	adds	r3, #4
 8018df0:	0019      	movs	r1, r3
 8018df2:	0010      	movs	r0, r2
 8018df4:	f7fe fb2d 	bl	8017452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018df8:	4b0a      	ldr	r3, [pc, #40]	; (8018e24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	68ba      	ldr	r2, [r7, #8]
 8018dfe:	429a      	cmp	r2, r3
 8018e00:	d202      	bcs.n	8018e08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018e02:	4b08      	ldr	r3, [pc, #32]	; (8018e24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018e04:	68ba      	ldr	r2, [r7, #8]
 8018e06:	601a      	str	r2, [r3, #0]
}
 8018e08:	46c0      	nop			; (mov r8, r8)
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	b004      	add	sp, #16
 8018e0e:	bd80      	pop	{r7, pc}
 8018e10:	20001214 	.word	0x20001214
 8018e14:	20000d3c 	.word	0x20000d3c
 8018e18:	200011fc 	.word	0x200011fc
 8018e1c:	200011cc 	.word	0x200011cc
 8018e20:	200011c8 	.word	0x200011c8
 8018e24:	20001230 	.word	0x20001230

08018e28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018e28:	b590      	push	{r4, r7, lr}
 8018e2a:	b089      	sub	sp, #36	; 0x24
 8018e2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018e2e:	2300      	movs	r3, #0
 8018e30:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018e32:	f000 fac9 	bl	80193c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018e36:	4b17      	ldr	r3, [pc, #92]	; (8018e94 <xTimerCreateTimerTask+0x6c>)
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d020      	beq.n	8018e80 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018e3e:	2300      	movs	r3, #0
 8018e40:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018e42:	2300      	movs	r3, #0
 8018e44:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018e46:	003a      	movs	r2, r7
 8018e48:	1d39      	adds	r1, r7, #4
 8018e4a:	2308      	movs	r3, #8
 8018e4c:	18fb      	adds	r3, r7, r3
 8018e4e:	0018      	movs	r0, r3
 8018e50:	f7fe fa9c 	bl	801738c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018e54:	683c      	ldr	r4, [r7, #0]
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	68ba      	ldr	r2, [r7, #8]
 8018e5a:	490f      	ldr	r1, [pc, #60]	; (8018e98 <xTimerCreateTimerTask+0x70>)
 8018e5c:	480f      	ldr	r0, [pc, #60]	; (8018e9c <xTimerCreateTimerTask+0x74>)
 8018e5e:	9202      	str	r2, [sp, #8]
 8018e60:	9301      	str	r3, [sp, #4]
 8018e62:	2302      	movs	r3, #2
 8018e64:	9300      	str	r3, [sp, #0]
 8018e66:	2300      	movs	r3, #0
 8018e68:	0022      	movs	r2, r4
 8018e6a:	f7ff f812 	bl	8017e92 <xTaskCreateStatic>
 8018e6e:	0002      	movs	r2, r0
 8018e70:	4b0b      	ldr	r3, [pc, #44]	; (8018ea0 <xTimerCreateTimerTask+0x78>)
 8018e72:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018e74:	4b0a      	ldr	r3, [pc, #40]	; (8018ea0 <xTimerCreateTimerTask+0x78>)
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d001      	beq.n	8018e80 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d101      	bne.n	8018e8a <xTimerCreateTimerTask+0x62>
 8018e86:	b672      	cpsid	i
 8018e88:	e7fe      	b.n	8018e88 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
}
 8018e8c:	0018      	movs	r0, r3
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	b005      	add	sp, #20
 8018e92:	bd90      	pop	{r4, r7, pc}
 8018e94:	2000126c 	.word	0x2000126c
 8018e98:	0802317c 	.word	0x0802317c
 8018e9c:	08018fc1 	.word	0x08018fc1
 8018ea0:	20001270 	.word	0x20001270

08018ea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018ea4:	b590      	push	{r4, r7, lr}
 8018ea6:	b08b      	sub	sp, #44	; 0x2c
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	60f8      	str	r0, [r7, #12]
 8018eac:	60b9      	str	r1, [r7, #8]
 8018eae:	607a      	str	r2, [r7, #4]
 8018eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d101      	bne.n	8018ec0 <xTimerGenericCommand+0x1c>
 8018ebc:	b672      	cpsid	i
 8018ebe:	e7fe      	b.n	8018ebe <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018ec0:	4b1c      	ldr	r3, [pc, #112]	; (8018f34 <xTimerGenericCommand+0x90>)
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d030      	beq.n	8018f2a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018ec8:	2414      	movs	r4, #20
 8018eca:	193b      	adds	r3, r7, r4
 8018ecc:	68ba      	ldr	r2, [r7, #8]
 8018ece:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018ed0:	193b      	adds	r3, r7, r4
 8018ed2:	687a      	ldr	r2, [r7, #4]
 8018ed4:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018ed6:	193b      	adds	r3, r7, r4
 8018ed8:	68fa      	ldr	r2, [r7, #12]
 8018eda:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018edc:	68bb      	ldr	r3, [r7, #8]
 8018ede:	2b05      	cmp	r3, #5
 8018ee0:	dc19      	bgt.n	8018f16 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018ee2:	f7ff fed5 	bl	8018c90 <xTaskGetSchedulerState>
 8018ee6:	0003      	movs	r3, r0
 8018ee8:	2b02      	cmp	r3, #2
 8018eea:	d109      	bne.n	8018f00 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018eec:	4b11      	ldr	r3, [pc, #68]	; (8018f34 <xTimerGenericCommand+0x90>)
 8018eee:	6818      	ldr	r0, [r3, #0]
 8018ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ef2:	1939      	adds	r1, r7, r4
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	f7fe fc03 	bl	8017700 <xQueueGenericSend>
 8018efa:	0003      	movs	r3, r0
 8018efc:	627b      	str	r3, [r7, #36]	; 0x24
 8018efe:	e014      	b.n	8018f2a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018f00:	4b0c      	ldr	r3, [pc, #48]	; (8018f34 <xTimerGenericCommand+0x90>)
 8018f02:	6818      	ldr	r0, [r3, #0]
 8018f04:	2314      	movs	r3, #20
 8018f06:	18f9      	adds	r1, r7, r3
 8018f08:	2300      	movs	r3, #0
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	f7fe fbf8 	bl	8017700 <xQueueGenericSend>
 8018f10:	0003      	movs	r3, r0
 8018f12:	627b      	str	r3, [r7, #36]	; 0x24
 8018f14:	e009      	b.n	8018f2a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018f16:	4b07      	ldr	r3, [pc, #28]	; (8018f34 <xTimerGenericCommand+0x90>)
 8018f18:	6818      	ldr	r0, [r3, #0]
 8018f1a:	683a      	ldr	r2, [r7, #0]
 8018f1c:	2314      	movs	r3, #20
 8018f1e:	18f9      	adds	r1, r7, r3
 8018f20:	2300      	movs	r3, #0
 8018f22:	f7fe fcb1 	bl	8017888 <xQueueGenericSendFromISR>
 8018f26:	0003      	movs	r3, r0
 8018f28:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018f2c:	0018      	movs	r0, r3
 8018f2e:	46bd      	mov	sp, r7
 8018f30:	b00b      	add	sp, #44	; 0x2c
 8018f32:	bd90      	pop	{r4, r7, pc}
 8018f34:	2000126c 	.word	0x2000126c

08018f38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b086      	sub	sp, #24
 8018f3c:	af02      	add	r7, sp, #8
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f42:	4b1e      	ldr	r3, [pc, #120]	; (8018fbc <prvProcessExpiredTimer+0x84>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	68db      	ldr	r3, [r3, #12]
 8018f48:	68db      	ldr	r3, [r3, #12]
 8018f4a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	3304      	adds	r3, #4
 8018f50:	0018      	movs	r0, r3
 8018f52:	f7fe fab4 	bl	80174be <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	2228      	movs	r2, #40	; 0x28
 8018f5a:	5c9b      	ldrb	r3, [r3, r2]
 8018f5c:	001a      	movs	r2, r3
 8018f5e:	2304      	movs	r3, #4
 8018f60:	4013      	ands	r3, r2
 8018f62:	d019      	beq.n	8018f98 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	699a      	ldr	r2, [r3, #24]
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	18d1      	adds	r1, r2, r3
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	683a      	ldr	r2, [r7, #0]
 8018f70:	68f8      	ldr	r0, [r7, #12]
 8018f72:	f000 f8c3 	bl	80190fc <prvInsertTimerInActiveList>
 8018f76:	1e03      	subs	r3, r0, #0
 8018f78:	d017      	beq.n	8018faa <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018f7a:	687a      	ldr	r2, [r7, #4]
 8018f7c:	68f8      	ldr	r0, [r7, #12]
 8018f7e:	2300      	movs	r3, #0
 8018f80:	9300      	str	r3, [sp, #0]
 8018f82:	2300      	movs	r3, #0
 8018f84:	2100      	movs	r1, #0
 8018f86:	f7ff ff8d 	bl	8018ea4 <xTimerGenericCommand>
 8018f8a:	0003      	movs	r3, r0
 8018f8c:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8018f8e:	68bb      	ldr	r3, [r7, #8]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d10a      	bne.n	8018faa <prvProcessExpiredTimer+0x72>
 8018f94:	b672      	cpsid	i
 8018f96:	e7fe      	b.n	8018f96 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	2228      	movs	r2, #40	; 0x28
 8018f9c:	5c9b      	ldrb	r3, [r3, r2]
 8018f9e:	2201      	movs	r2, #1
 8018fa0:	4393      	bics	r3, r2
 8018fa2:	b2d9      	uxtb	r1, r3
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	2228      	movs	r2, #40	; 0x28
 8018fa8:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	6a1b      	ldr	r3, [r3, #32]
 8018fae:	68fa      	ldr	r2, [r7, #12]
 8018fb0:	0010      	movs	r0, r2
 8018fb2:	4798      	blx	r3
}
 8018fb4:	46c0      	nop			; (mov r8, r8)
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	b004      	add	sp, #16
 8018fba:	bd80      	pop	{r7, pc}
 8018fbc:	20001264 	.word	0x20001264

08018fc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b084      	sub	sp, #16
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018fc8:	2308      	movs	r3, #8
 8018fca:	18fb      	adds	r3, r7, r3
 8018fcc:	0018      	movs	r0, r3
 8018fce:	f000 f853 	bl	8019078 <prvGetNextExpireTime>
 8018fd2:	0003      	movs	r3, r0
 8018fd4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018fd6:	68ba      	ldr	r2, [r7, #8]
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	0011      	movs	r1, r2
 8018fdc:	0018      	movs	r0, r3
 8018fde:	f000 f803 	bl	8018fe8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018fe2:	f000 f8cd 	bl	8019180 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018fe6:	e7ef      	b.n	8018fc8 <prvTimerTask+0x8>

08018fe8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b084      	sub	sp, #16
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
 8018ff0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018ff2:	f7ff fab3 	bl	801855c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018ff6:	2308      	movs	r3, #8
 8018ff8:	18fb      	adds	r3, r7, r3
 8018ffa:	0018      	movs	r0, r3
 8018ffc:	f000 f85e 	bl	80190bc <prvSampleTimeNow>
 8019000:	0003      	movs	r3, r0
 8019002:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019004:	68bb      	ldr	r3, [r7, #8]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d12b      	bne.n	8019062 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801900a:	683b      	ldr	r3, [r7, #0]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d10c      	bne.n	801902a <prvProcessTimerOrBlockTask+0x42>
 8019010:	687a      	ldr	r2, [r7, #4]
 8019012:	68fb      	ldr	r3, [r7, #12]
 8019014:	429a      	cmp	r2, r3
 8019016:	d808      	bhi.n	801902a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8019018:	f7ff faac 	bl	8018574 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801901c:	68fa      	ldr	r2, [r7, #12]
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	0011      	movs	r1, r2
 8019022:	0018      	movs	r0, r3
 8019024:	f7ff ff88 	bl	8018f38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019028:	e01d      	b.n	8019066 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 801902a:	683b      	ldr	r3, [r7, #0]
 801902c:	2b00      	cmp	r3, #0
 801902e:	d008      	beq.n	8019042 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019030:	4b0f      	ldr	r3, [pc, #60]	; (8019070 <prvProcessTimerOrBlockTask+0x88>)
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d101      	bne.n	801903e <prvProcessTimerOrBlockTask+0x56>
 801903a:	2301      	movs	r3, #1
 801903c:	e000      	b.n	8019040 <prvProcessTimerOrBlockTask+0x58>
 801903e:	2300      	movs	r3, #0
 8019040:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019042:	4b0c      	ldr	r3, [pc, #48]	; (8019074 <prvProcessTimerOrBlockTask+0x8c>)
 8019044:	6818      	ldr	r0, [r3, #0]
 8019046:	687a      	ldr	r2, [r7, #4]
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	1ad3      	subs	r3, r2, r3
 801904c:	683a      	ldr	r2, [r7, #0]
 801904e:	0019      	movs	r1, r3
 8019050:	f7fe feec 	bl	8017e2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019054:	f7ff fa8e 	bl	8018574 <xTaskResumeAll>
 8019058:	1e03      	subs	r3, r0, #0
 801905a:	d104      	bne.n	8019066 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 801905c:	f000 fa80 	bl	8019560 <vPortYield>
}
 8019060:	e001      	b.n	8019066 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8019062:	f7ff fa87 	bl	8018574 <xTaskResumeAll>
}
 8019066:	46c0      	nop			; (mov r8, r8)
 8019068:	46bd      	mov	sp, r7
 801906a:	b004      	add	sp, #16
 801906c:	bd80      	pop	{r7, pc}
 801906e:	46c0      	nop			; (mov r8, r8)
 8019070:	20001268 	.word	0x20001268
 8019074:	2000126c 	.word	0x2000126c

08019078 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b084      	sub	sp, #16
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019080:	4b0d      	ldr	r3, [pc, #52]	; (80190b8 <prvGetNextExpireTime+0x40>)
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d101      	bne.n	801908e <prvGetNextExpireTime+0x16>
 801908a:	2201      	movs	r2, #1
 801908c:	e000      	b.n	8019090 <prvGetNextExpireTime+0x18>
 801908e:	2200      	movs	r2, #0
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d105      	bne.n	80190a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801909c:	4b06      	ldr	r3, [pc, #24]	; (80190b8 <prvGetNextExpireTime+0x40>)
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	68db      	ldr	r3, [r3, #12]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	60fb      	str	r3, [r7, #12]
 80190a6:	e001      	b.n	80190ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80190a8:	2300      	movs	r3, #0
 80190aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80190ac:	68fb      	ldr	r3, [r7, #12]
}
 80190ae:	0018      	movs	r0, r3
 80190b0:	46bd      	mov	sp, r7
 80190b2:	b004      	add	sp, #16
 80190b4:	bd80      	pop	{r7, pc}
 80190b6:	46c0      	nop			; (mov r8, r8)
 80190b8:	20001264 	.word	0x20001264

080190bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b084      	sub	sp, #16
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80190c4:	f7ff fae2 	bl	801868c <xTaskGetTickCount>
 80190c8:	0003      	movs	r3, r0
 80190ca:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80190cc:	4b0a      	ldr	r3, [pc, #40]	; (80190f8 <prvSampleTimeNow+0x3c>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	68fa      	ldr	r2, [r7, #12]
 80190d2:	429a      	cmp	r2, r3
 80190d4:	d205      	bcs.n	80190e2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80190d6:	f000 f919 	bl	801930c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	2201      	movs	r2, #1
 80190de:	601a      	str	r2, [r3, #0]
 80190e0:	e002      	b.n	80190e8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2200      	movs	r2, #0
 80190e6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80190e8:	4b03      	ldr	r3, [pc, #12]	; (80190f8 <prvSampleTimeNow+0x3c>)
 80190ea:	68fa      	ldr	r2, [r7, #12]
 80190ec:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80190ee:	68fb      	ldr	r3, [r7, #12]
}
 80190f0:	0018      	movs	r0, r3
 80190f2:	46bd      	mov	sp, r7
 80190f4:	b004      	add	sp, #16
 80190f6:	bd80      	pop	{r7, pc}
 80190f8:	20001274 	.word	0x20001274

080190fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b086      	sub	sp, #24
 8019100:	af00      	add	r7, sp, #0
 8019102:	60f8      	str	r0, [r7, #12]
 8019104:	60b9      	str	r1, [r7, #8]
 8019106:	607a      	str	r2, [r7, #4]
 8019108:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801910a:	2300      	movs	r3, #0
 801910c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	68ba      	ldr	r2, [r7, #8]
 8019112:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	68fa      	ldr	r2, [r7, #12]
 8019118:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801911a:	68ba      	ldr	r2, [r7, #8]
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	429a      	cmp	r2, r3
 8019120:	d812      	bhi.n	8019148 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019122:	687a      	ldr	r2, [r7, #4]
 8019124:	683b      	ldr	r3, [r7, #0]
 8019126:	1ad2      	subs	r2, r2, r3
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	699b      	ldr	r3, [r3, #24]
 801912c:	429a      	cmp	r2, r3
 801912e:	d302      	bcc.n	8019136 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019130:	2301      	movs	r3, #1
 8019132:	617b      	str	r3, [r7, #20]
 8019134:	e01b      	b.n	801916e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019136:	4b10      	ldr	r3, [pc, #64]	; (8019178 <prvInsertTimerInActiveList+0x7c>)
 8019138:	681a      	ldr	r2, [r3, #0]
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	3304      	adds	r3, #4
 801913e:	0019      	movs	r1, r3
 8019140:	0010      	movs	r0, r2
 8019142:	f7fe f986 	bl	8017452 <vListInsert>
 8019146:	e012      	b.n	801916e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019148:	687a      	ldr	r2, [r7, #4]
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	429a      	cmp	r2, r3
 801914e:	d206      	bcs.n	801915e <prvInsertTimerInActiveList+0x62>
 8019150:	68ba      	ldr	r2, [r7, #8]
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	429a      	cmp	r2, r3
 8019156:	d302      	bcc.n	801915e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019158:	2301      	movs	r3, #1
 801915a:	617b      	str	r3, [r7, #20]
 801915c:	e007      	b.n	801916e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801915e:	4b07      	ldr	r3, [pc, #28]	; (801917c <prvInsertTimerInActiveList+0x80>)
 8019160:	681a      	ldr	r2, [r3, #0]
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	3304      	adds	r3, #4
 8019166:	0019      	movs	r1, r3
 8019168:	0010      	movs	r0, r2
 801916a:	f7fe f972 	bl	8017452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801916e:	697b      	ldr	r3, [r7, #20]
}
 8019170:	0018      	movs	r0, r3
 8019172:	46bd      	mov	sp, r7
 8019174:	b006      	add	sp, #24
 8019176:	bd80      	pop	{r7, pc}
 8019178:	20001268 	.word	0x20001268
 801917c:	20001264 	.word	0x20001264

08019180 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019180:	b590      	push	{r4, r7, lr}
 8019182:	b08d      	sub	sp, #52	; 0x34
 8019184:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019186:	e0ac      	b.n	80192e2 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019188:	2208      	movs	r2, #8
 801918a:	18bb      	adds	r3, r7, r2
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	2b00      	cmp	r3, #0
 8019190:	da0f      	bge.n	80191b2 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019192:	18bb      	adds	r3, r7, r2
 8019194:	3304      	adds	r3, #4
 8019196:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801919a:	2b00      	cmp	r3, #0
 801919c:	d101      	bne.n	80191a2 <prvProcessReceivedCommands+0x22>
 801919e:	b672      	cpsid	i
 80191a0:	e7fe      	b.n	80191a0 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80191a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191a4:	681a      	ldr	r2, [r3, #0]
 80191a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191a8:	6858      	ldr	r0, [r3, #4]
 80191aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ac:	689b      	ldr	r3, [r3, #8]
 80191ae:	0019      	movs	r1, r3
 80191b0:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80191b2:	2208      	movs	r2, #8
 80191b4:	18bb      	adds	r3, r7, r2
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	da00      	bge.n	80191be <prvProcessReceivedCommands+0x3e>
 80191bc:	e091      	b.n	80192e2 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80191be:	18bb      	adds	r3, r7, r2
 80191c0:	689b      	ldr	r3, [r3, #8]
 80191c2:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80191c4:	6a3b      	ldr	r3, [r7, #32]
 80191c6:	695b      	ldr	r3, [r3, #20]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d004      	beq.n	80191d6 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80191cc:	6a3b      	ldr	r3, [r7, #32]
 80191ce:	3304      	adds	r3, #4
 80191d0:	0018      	movs	r0, r3
 80191d2:	f7fe f974 	bl	80174be <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80191d6:	1d3b      	adds	r3, r7, #4
 80191d8:	0018      	movs	r0, r3
 80191da:	f7ff ff6f 	bl	80190bc <prvSampleTimeNow>
 80191de:	0003      	movs	r3, r0
 80191e0:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80191e2:	2308      	movs	r3, #8
 80191e4:	18fb      	adds	r3, r7, r3
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	2b09      	cmp	r3, #9
 80191ea:	d900      	bls.n	80191ee <prvProcessReceivedCommands+0x6e>
 80191ec:	e078      	b.n	80192e0 <prvProcessReceivedCommands+0x160>
 80191ee:	009a      	lsls	r2, r3, #2
 80191f0:	4b44      	ldr	r3, [pc, #272]	; (8019304 <prvProcessReceivedCommands+0x184>)
 80191f2:	18d3      	adds	r3, r2, r3
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80191f8:	6a3b      	ldr	r3, [r7, #32]
 80191fa:	2228      	movs	r2, #40	; 0x28
 80191fc:	5c9b      	ldrb	r3, [r3, r2]
 80191fe:	2201      	movs	r2, #1
 8019200:	4313      	orrs	r3, r2
 8019202:	b2d9      	uxtb	r1, r3
 8019204:	6a3b      	ldr	r3, [r7, #32]
 8019206:	2228      	movs	r2, #40	; 0x28
 8019208:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801920a:	2408      	movs	r4, #8
 801920c:	193b      	adds	r3, r7, r4
 801920e:	685a      	ldr	r2, [r3, #4]
 8019210:	6a3b      	ldr	r3, [r7, #32]
 8019212:	699b      	ldr	r3, [r3, #24]
 8019214:	18d1      	adds	r1, r2, r3
 8019216:	193b      	adds	r3, r7, r4
 8019218:	685b      	ldr	r3, [r3, #4]
 801921a:	69fa      	ldr	r2, [r7, #28]
 801921c:	6a38      	ldr	r0, [r7, #32]
 801921e:	f7ff ff6d 	bl	80190fc <prvInsertTimerInActiveList>
 8019222:	1e03      	subs	r3, r0, #0
 8019224:	d05d      	beq.n	80192e2 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019226:	6a3b      	ldr	r3, [r7, #32]
 8019228:	6a1b      	ldr	r3, [r3, #32]
 801922a:	6a3a      	ldr	r2, [r7, #32]
 801922c:	0010      	movs	r0, r2
 801922e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019230:	6a3b      	ldr	r3, [r7, #32]
 8019232:	2228      	movs	r2, #40	; 0x28
 8019234:	5c9b      	ldrb	r3, [r3, r2]
 8019236:	001a      	movs	r2, r3
 8019238:	2304      	movs	r3, #4
 801923a:	4013      	ands	r3, r2
 801923c:	d051      	beq.n	80192e2 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801923e:	193b      	adds	r3, r7, r4
 8019240:	685a      	ldr	r2, [r3, #4]
 8019242:	6a3b      	ldr	r3, [r7, #32]
 8019244:	699b      	ldr	r3, [r3, #24]
 8019246:	18d2      	adds	r2, r2, r3
 8019248:	6a38      	ldr	r0, [r7, #32]
 801924a:	2300      	movs	r3, #0
 801924c:	9300      	str	r3, [sp, #0]
 801924e:	2300      	movs	r3, #0
 8019250:	2100      	movs	r1, #0
 8019252:	f7ff fe27 	bl	8018ea4 <xTimerGenericCommand>
 8019256:	0003      	movs	r3, r0
 8019258:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 801925a:	69bb      	ldr	r3, [r7, #24]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d140      	bne.n	80192e2 <prvProcessReceivedCommands+0x162>
 8019260:	b672      	cpsid	i
 8019262:	e7fe      	b.n	8019262 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019264:	6a3b      	ldr	r3, [r7, #32]
 8019266:	2228      	movs	r2, #40	; 0x28
 8019268:	5c9b      	ldrb	r3, [r3, r2]
 801926a:	2201      	movs	r2, #1
 801926c:	4393      	bics	r3, r2
 801926e:	b2d9      	uxtb	r1, r3
 8019270:	6a3b      	ldr	r3, [r7, #32]
 8019272:	2228      	movs	r2, #40	; 0x28
 8019274:	5499      	strb	r1, [r3, r2]
					break;
 8019276:	e034      	b.n	80192e2 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019278:	6a3b      	ldr	r3, [r7, #32]
 801927a:	2228      	movs	r2, #40	; 0x28
 801927c:	5c9b      	ldrb	r3, [r3, r2]
 801927e:	2201      	movs	r2, #1
 8019280:	4313      	orrs	r3, r2
 8019282:	b2d9      	uxtb	r1, r3
 8019284:	6a3b      	ldr	r3, [r7, #32]
 8019286:	2228      	movs	r2, #40	; 0x28
 8019288:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801928a:	2308      	movs	r3, #8
 801928c:	18fb      	adds	r3, r7, r3
 801928e:	685a      	ldr	r2, [r3, #4]
 8019290:	6a3b      	ldr	r3, [r7, #32]
 8019292:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019294:	6a3b      	ldr	r3, [r7, #32]
 8019296:	699b      	ldr	r3, [r3, #24]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d101      	bne.n	80192a0 <prvProcessReceivedCommands+0x120>
 801929c:	b672      	cpsid	i
 801929e:	e7fe      	b.n	801929e <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80192a0:	6a3b      	ldr	r3, [r7, #32]
 80192a2:	699a      	ldr	r2, [r3, #24]
 80192a4:	69fb      	ldr	r3, [r7, #28]
 80192a6:	18d1      	adds	r1, r2, r3
 80192a8:	69fb      	ldr	r3, [r7, #28]
 80192aa:	69fa      	ldr	r2, [r7, #28]
 80192ac:	6a38      	ldr	r0, [r7, #32]
 80192ae:	f7ff ff25 	bl	80190fc <prvInsertTimerInActiveList>
					break;
 80192b2:	e016      	b.n	80192e2 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80192b4:	6a3b      	ldr	r3, [r7, #32]
 80192b6:	2228      	movs	r2, #40	; 0x28
 80192b8:	5c9b      	ldrb	r3, [r3, r2]
 80192ba:	001a      	movs	r2, r3
 80192bc:	2302      	movs	r3, #2
 80192be:	4013      	ands	r3, r2
 80192c0:	d104      	bne.n	80192cc <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80192c2:	6a3b      	ldr	r3, [r7, #32]
 80192c4:	0018      	movs	r0, r3
 80192c6:	f000 fa9f 	bl	8019808 <vPortFree>
 80192ca:	e00a      	b.n	80192e2 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80192cc:	6a3b      	ldr	r3, [r7, #32]
 80192ce:	2228      	movs	r2, #40	; 0x28
 80192d0:	5c9b      	ldrb	r3, [r3, r2]
 80192d2:	2201      	movs	r2, #1
 80192d4:	4393      	bics	r3, r2
 80192d6:	b2d9      	uxtb	r1, r3
 80192d8:	6a3b      	ldr	r3, [r7, #32]
 80192da:	2228      	movs	r2, #40	; 0x28
 80192dc:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80192de:	e000      	b.n	80192e2 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 80192e0:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80192e2:	4b09      	ldr	r3, [pc, #36]	; (8019308 <prvProcessReceivedCommands+0x188>)
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	2208      	movs	r2, #8
 80192e8:	18b9      	adds	r1, r7, r2
 80192ea:	2200      	movs	r2, #0
 80192ec:	0018      	movs	r0, r3
 80192ee:	f7fe fb3f 	bl	8017970 <xQueueReceive>
 80192f2:	1e03      	subs	r3, r0, #0
 80192f4:	d000      	beq.n	80192f8 <prvProcessReceivedCommands+0x178>
 80192f6:	e747      	b.n	8019188 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80192f8:	46c0      	nop			; (mov r8, r8)
 80192fa:	46c0      	nop			; (mov r8, r8)
 80192fc:	46bd      	mov	sp, r7
 80192fe:	b00b      	add	sp, #44	; 0x2c
 8019300:	bd90      	pop	{r4, r7, pc}
 8019302:	46c0      	nop			; (mov r8, r8)
 8019304:	080241b0 	.word	0x080241b0
 8019308:	2000126c 	.word	0x2000126c

0801930c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b088      	sub	sp, #32
 8019310:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019312:	e041      	b.n	8019398 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019314:	4b2a      	ldr	r3, [pc, #168]	; (80193c0 <prvSwitchTimerLists+0xb4>)
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	68db      	ldr	r3, [r3, #12]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801931e:	4b28      	ldr	r3, [pc, #160]	; (80193c0 <prvSwitchTimerLists+0xb4>)
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	68db      	ldr	r3, [r3, #12]
 8019324:	68db      	ldr	r3, [r3, #12]
 8019326:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	3304      	adds	r3, #4
 801932c:	0018      	movs	r0, r3
 801932e:	f7fe f8c6 	bl	80174be <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	6a1b      	ldr	r3, [r3, #32]
 8019336:	68fa      	ldr	r2, [r7, #12]
 8019338:	0010      	movs	r0, r2
 801933a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	2228      	movs	r2, #40	; 0x28
 8019340:	5c9b      	ldrb	r3, [r3, r2]
 8019342:	001a      	movs	r2, r3
 8019344:	2304      	movs	r3, #4
 8019346:	4013      	ands	r3, r2
 8019348:	d026      	beq.n	8019398 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	699b      	ldr	r3, [r3, #24]
 801934e:	693a      	ldr	r2, [r7, #16]
 8019350:	18d3      	adds	r3, r2, r3
 8019352:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019354:	68ba      	ldr	r2, [r7, #8]
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	429a      	cmp	r2, r3
 801935a:	d90e      	bls.n	801937a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	68ba      	ldr	r2, [r7, #8]
 8019360:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	68fa      	ldr	r2, [r7, #12]
 8019366:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019368:	4b15      	ldr	r3, [pc, #84]	; (80193c0 <prvSwitchTimerLists+0xb4>)
 801936a:	681a      	ldr	r2, [r3, #0]
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	3304      	adds	r3, #4
 8019370:	0019      	movs	r1, r3
 8019372:	0010      	movs	r0, r2
 8019374:	f7fe f86d 	bl	8017452 <vListInsert>
 8019378:	e00e      	b.n	8019398 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801937a:	693a      	ldr	r2, [r7, #16]
 801937c:	68f8      	ldr	r0, [r7, #12]
 801937e:	2300      	movs	r3, #0
 8019380:	9300      	str	r3, [sp, #0]
 8019382:	2300      	movs	r3, #0
 8019384:	2100      	movs	r1, #0
 8019386:	f7ff fd8d 	bl	8018ea4 <xTimerGenericCommand>
 801938a:	0003      	movs	r3, r0
 801938c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	2b00      	cmp	r3, #0
 8019392:	d101      	bne.n	8019398 <prvSwitchTimerLists+0x8c>
 8019394:	b672      	cpsid	i
 8019396:	e7fe      	b.n	8019396 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019398:	4b09      	ldr	r3, [pc, #36]	; (80193c0 <prvSwitchTimerLists+0xb4>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d1b8      	bne.n	8019314 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80193a2:	4b07      	ldr	r3, [pc, #28]	; (80193c0 <prvSwitchTimerLists+0xb4>)
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80193a8:	4b06      	ldr	r3, [pc, #24]	; (80193c4 <prvSwitchTimerLists+0xb8>)
 80193aa:	681a      	ldr	r2, [r3, #0]
 80193ac:	4b04      	ldr	r3, [pc, #16]	; (80193c0 <prvSwitchTimerLists+0xb4>)
 80193ae:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80193b0:	4b04      	ldr	r3, [pc, #16]	; (80193c4 <prvSwitchTimerLists+0xb8>)
 80193b2:	697a      	ldr	r2, [r7, #20]
 80193b4:	601a      	str	r2, [r3, #0]
}
 80193b6:	46c0      	nop			; (mov r8, r8)
 80193b8:	46bd      	mov	sp, r7
 80193ba:	b006      	add	sp, #24
 80193bc:	bd80      	pop	{r7, pc}
 80193be:	46c0      	nop			; (mov r8, r8)
 80193c0:	20001264 	.word	0x20001264
 80193c4:	20001268 	.word	0x20001268

080193c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b082      	sub	sp, #8
 80193cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80193ce:	f000 f8d7 	bl	8019580 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80193d2:	4b16      	ldr	r3, [pc, #88]	; (801942c <prvCheckForValidListAndQueue+0x64>)
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d123      	bne.n	8019422 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80193da:	4b15      	ldr	r3, [pc, #84]	; (8019430 <prvCheckForValidListAndQueue+0x68>)
 80193dc:	0018      	movs	r0, r3
 80193de:	f7fd ffed 	bl	80173bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80193e2:	4b14      	ldr	r3, [pc, #80]	; (8019434 <prvCheckForValidListAndQueue+0x6c>)
 80193e4:	0018      	movs	r0, r3
 80193e6:	f7fd ffe9 	bl	80173bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80193ea:	4b13      	ldr	r3, [pc, #76]	; (8019438 <prvCheckForValidListAndQueue+0x70>)
 80193ec:	4a10      	ldr	r2, [pc, #64]	; (8019430 <prvCheckForValidListAndQueue+0x68>)
 80193ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80193f0:	4b12      	ldr	r3, [pc, #72]	; (801943c <prvCheckForValidListAndQueue+0x74>)
 80193f2:	4a10      	ldr	r2, [pc, #64]	; (8019434 <prvCheckForValidListAndQueue+0x6c>)
 80193f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80193f6:	4b12      	ldr	r3, [pc, #72]	; (8019440 <prvCheckForValidListAndQueue+0x78>)
 80193f8:	4a12      	ldr	r2, [pc, #72]	; (8019444 <prvCheckForValidListAndQueue+0x7c>)
 80193fa:	2100      	movs	r1, #0
 80193fc:	9100      	str	r1, [sp, #0]
 80193fe:	2110      	movs	r1, #16
 8019400:	200a      	movs	r0, #10
 8019402:	f7fe f8d8 	bl	80175b6 <xQueueGenericCreateStatic>
 8019406:	0002      	movs	r2, r0
 8019408:	4b08      	ldr	r3, [pc, #32]	; (801942c <prvCheckForValidListAndQueue+0x64>)
 801940a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801940c:	4b07      	ldr	r3, [pc, #28]	; (801942c <prvCheckForValidListAndQueue+0x64>)
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d006      	beq.n	8019422 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019414:	4b05      	ldr	r3, [pc, #20]	; (801942c <prvCheckForValidListAndQueue+0x64>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	4a0b      	ldr	r2, [pc, #44]	; (8019448 <prvCheckForValidListAndQueue+0x80>)
 801941a:	0011      	movs	r1, r2
 801941c:	0018      	movs	r0, r3
 801941e:	f7fe fcdd 	bl	8017ddc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019422:	f000 f8bf 	bl	80195a4 <vPortExitCritical>
}
 8019426:	46c0      	nop			; (mov r8, r8)
 8019428:	46bd      	mov	sp, r7
 801942a:	bd80      	pop	{r7, pc}
 801942c:	2000126c 	.word	0x2000126c
 8019430:	2000123c 	.word	0x2000123c
 8019434:	20001250 	.word	0x20001250
 8019438:	20001264 	.word	0x20001264
 801943c:	20001268 	.word	0x20001268
 8019440:	20001318 	.word	0x20001318
 8019444:	20001278 	.word	0x20001278
 8019448:	08023184 	.word	0x08023184

0801944c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b084      	sub	sp, #16
 8019450:	af00      	add	r7, sp, #0
 8019452:	60f8      	str	r0, [r7, #12]
 8019454:	60b9      	str	r1, [r7, #8]
 8019456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	3b04      	subs	r3, #4
 801945c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	2280      	movs	r2, #128	; 0x80
 8019462:	0452      	lsls	r2, r2, #17
 8019464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	3b04      	subs	r3, #4
 801946a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801946c:	68ba      	ldr	r2, [r7, #8]
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	3b04      	subs	r3, #4
 8019476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019478:	4a08      	ldr	r2, [pc, #32]	; (801949c <pxPortInitialiseStack+0x50>)
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	3b14      	subs	r3, #20
 8019482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019484:	687a      	ldr	r2, [r7, #4]
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	3b20      	subs	r3, #32
 801948e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019490:	68fb      	ldr	r3, [r7, #12]
}
 8019492:	0018      	movs	r0, r3
 8019494:	46bd      	mov	sp, r7
 8019496:	b004      	add	sp, #16
 8019498:	bd80      	pop	{r7, pc}
 801949a:	46c0      	nop			; (mov r8, r8)
 801949c:	080194a1 	.word	0x080194a1

080194a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80194a0:	b580      	push	{r7, lr}
 80194a2:	b082      	sub	sp, #8
 80194a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80194a6:	2300      	movs	r3, #0
 80194a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80194aa:	4b08      	ldr	r3, [pc, #32]	; (80194cc <prvTaskExitError+0x2c>)
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	3301      	adds	r3, #1
 80194b0:	d001      	beq.n	80194b6 <prvTaskExitError+0x16>
 80194b2:	b672      	cpsid	i
 80194b4:	e7fe      	b.n	80194b4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80194b6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80194b8:	46c0      	nop			; (mov r8, r8)
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d0fc      	beq.n	80194ba <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80194c0:	46c0      	nop			; (mov r8, r8)
 80194c2:	46c0      	nop			; (mov r8, r8)
 80194c4:	46bd      	mov	sp, r7
 80194c6:	b002      	add	sp, #8
 80194c8:	bd80      	pop	{r7, pc}
 80194ca:	46c0      	nop			; (mov r8, r8)
 80194cc:	200000e0 	.word	0x200000e0

080194d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80194d4:	46c0      	nop			; (mov r8, r8)
 80194d6:	46bd      	mov	sp, r7
 80194d8:	bd80      	pop	{r7, pc}
 80194da:	0000      	movs	r0, r0
 80194dc:	0000      	movs	r0, r0
	...

080194e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80194e0:	4a0b      	ldr	r2, [pc, #44]	; (8019510 <pxCurrentTCBConst2>)
 80194e2:	6813      	ldr	r3, [r2, #0]
 80194e4:	6818      	ldr	r0, [r3, #0]
 80194e6:	3020      	adds	r0, #32
 80194e8:	f380 8809 	msr	PSP, r0
 80194ec:	2002      	movs	r0, #2
 80194ee:	f380 8814 	msr	CONTROL, r0
 80194f2:	f3bf 8f6f 	isb	sy
 80194f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80194f8:	46ae      	mov	lr, r5
 80194fa:	bc08      	pop	{r3}
 80194fc:	bc04      	pop	{r2}
 80194fe:	b662      	cpsie	i
 8019500:	4718      	bx	r3
 8019502:	46c0      	nop			; (mov r8, r8)
 8019504:	46c0      	nop			; (mov r8, r8)
 8019506:	46c0      	nop			; (mov r8, r8)
 8019508:	46c0      	nop			; (mov r8, r8)
 801950a:	46c0      	nop			; (mov r8, r8)
 801950c:	46c0      	nop			; (mov r8, r8)
 801950e:	46c0      	nop			; (mov r8, r8)

08019510 <pxCurrentTCBConst2>:
 8019510:	20000d3c 	.word	0x20000d3c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8019514:	46c0      	nop			; (mov r8, r8)
 8019516:	46c0      	nop			; (mov r8, r8)

08019518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019518:	b580      	push	{r7, lr}
 801951a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801951c:	4b0e      	ldr	r3, [pc, #56]	; (8019558 <xPortStartScheduler+0x40>)
 801951e:	681a      	ldr	r2, [r3, #0]
 8019520:	4b0d      	ldr	r3, [pc, #52]	; (8019558 <xPortStartScheduler+0x40>)
 8019522:	21ff      	movs	r1, #255	; 0xff
 8019524:	0409      	lsls	r1, r1, #16
 8019526:	430a      	orrs	r2, r1
 8019528:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801952a:	4b0b      	ldr	r3, [pc, #44]	; (8019558 <xPortStartScheduler+0x40>)
 801952c:	681a      	ldr	r2, [r3, #0]
 801952e:	4b0a      	ldr	r3, [pc, #40]	; (8019558 <xPortStartScheduler+0x40>)
 8019530:	21ff      	movs	r1, #255	; 0xff
 8019532:	0609      	lsls	r1, r1, #24
 8019534:	430a      	orrs	r2, r1
 8019536:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019538:	f000 f898 	bl	801966c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801953c:	4b07      	ldr	r3, [pc, #28]	; (801955c <xPortStartScheduler+0x44>)
 801953e:	2200      	movs	r2, #0
 8019540:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8019542:	f7ff ffcd 	bl	80194e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019546:	f7ff f95f 	bl	8018808 <vTaskSwitchContext>
	prvTaskExitError();
 801954a:	f7ff ffa9 	bl	80194a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801954e:	2300      	movs	r3, #0
}
 8019550:	0018      	movs	r0, r3
 8019552:	46bd      	mov	sp, r7
 8019554:	bd80      	pop	{r7, pc}
 8019556:	46c0      	nop			; (mov r8, r8)
 8019558:	e000ed20 	.word	0xe000ed20
 801955c:	200000e0 	.word	0x200000e0

08019560 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8019560:	b580      	push	{r7, lr}
 8019562:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019564:	4b05      	ldr	r3, [pc, #20]	; (801957c <vPortYield+0x1c>)
 8019566:	2280      	movs	r2, #128	; 0x80
 8019568:	0552      	lsls	r2, r2, #21
 801956a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801956c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8019570:	f3bf 8f6f 	isb	sy
}
 8019574:	46c0      	nop			; (mov r8, r8)
 8019576:	46bd      	mov	sp, r7
 8019578:	bd80      	pop	{r7, pc}
 801957a:	46c0      	nop			; (mov r8, r8)
 801957c:	e000ed04 	.word	0xe000ed04

08019580 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019580:	b580      	push	{r7, lr}
 8019582:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8019584:	b672      	cpsid	i
	uxCriticalNesting++;
 8019586:	4b06      	ldr	r3, [pc, #24]	; (80195a0 <vPortEnterCritical+0x20>)
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	1c5a      	adds	r2, r3, #1
 801958c:	4b04      	ldr	r3, [pc, #16]	; (80195a0 <vPortEnterCritical+0x20>)
 801958e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8019590:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8019594:	f3bf 8f6f 	isb	sy
}
 8019598:	46c0      	nop			; (mov r8, r8)
 801959a:	46bd      	mov	sp, r7
 801959c:	bd80      	pop	{r7, pc}
 801959e:	46c0      	nop			; (mov r8, r8)
 80195a0:	200000e0 	.word	0x200000e0

080195a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80195a8:	4b09      	ldr	r3, [pc, #36]	; (80195d0 <vPortExitCritical+0x2c>)
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d101      	bne.n	80195b4 <vPortExitCritical+0x10>
 80195b0:	b672      	cpsid	i
 80195b2:	e7fe      	b.n	80195b2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80195b4:	4b06      	ldr	r3, [pc, #24]	; (80195d0 <vPortExitCritical+0x2c>)
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	1e5a      	subs	r2, r3, #1
 80195ba:	4b05      	ldr	r3, [pc, #20]	; (80195d0 <vPortExitCritical+0x2c>)
 80195bc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80195be:	4b04      	ldr	r3, [pc, #16]	; (80195d0 <vPortExitCritical+0x2c>)
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d100      	bne.n	80195c8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80195c6:	b662      	cpsie	i
	}
}
 80195c8:	46c0      	nop			; (mov r8, r8)
 80195ca:	46bd      	mov	sp, r7
 80195cc:	bd80      	pop	{r7, pc}
 80195ce:	46c0      	nop			; (mov r8, r8)
 80195d0:	200000e0 	.word	0x200000e0

080195d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80195d4:	f3ef 8010 	mrs	r0, PRIMASK
 80195d8:	b672      	cpsid	i
 80195da:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80195dc:	46c0      	nop			; (mov r8, r8)
 80195de:	0018      	movs	r0, r3

080195e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80195e0:	f380 8810 	msr	PRIMASK, r0
 80195e4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80195e6:	46c0      	nop			; (mov r8, r8)
	...

080195f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80195f0:	f3ef 8009 	mrs	r0, PSP
 80195f4:	4b0e      	ldr	r3, [pc, #56]	; (8019630 <pxCurrentTCBConst>)
 80195f6:	681a      	ldr	r2, [r3, #0]
 80195f8:	3820      	subs	r0, #32
 80195fa:	6010      	str	r0, [r2, #0]
 80195fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80195fe:	4644      	mov	r4, r8
 8019600:	464d      	mov	r5, r9
 8019602:	4656      	mov	r6, sl
 8019604:	465f      	mov	r7, fp
 8019606:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8019608:	b508      	push	{r3, lr}
 801960a:	b672      	cpsid	i
 801960c:	f7ff f8fc 	bl	8018808 <vTaskSwitchContext>
 8019610:	b662      	cpsie	i
 8019612:	bc0c      	pop	{r2, r3}
 8019614:	6811      	ldr	r1, [r2, #0]
 8019616:	6808      	ldr	r0, [r1, #0]
 8019618:	3010      	adds	r0, #16
 801961a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801961c:	46a0      	mov	r8, r4
 801961e:	46a9      	mov	r9, r5
 8019620:	46b2      	mov	sl, r6
 8019622:	46bb      	mov	fp, r7
 8019624:	f380 8809 	msr	PSP, r0
 8019628:	3820      	subs	r0, #32
 801962a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801962c:	4718      	bx	r3
 801962e:	46c0      	nop			; (mov r8, r8)

08019630 <pxCurrentTCBConst>:
 8019630:	20000d3c 	.word	0x20000d3c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8019634:	46c0      	nop			; (mov r8, r8)
 8019636:	46c0      	nop			; (mov r8, r8)

08019638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b082      	sub	sp, #8
 801963c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801963e:	f7ff ffc9 	bl	80195d4 <ulSetInterruptMaskFromISR>
 8019642:	0003      	movs	r3, r0
 8019644:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019646:	f7ff f82f 	bl	80186a8 <xTaskIncrementTick>
 801964a:	1e03      	subs	r3, r0, #0
 801964c:	d003      	beq.n	8019656 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801964e:	4b06      	ldr	r3, [pc, #24]	; (8019668 <xPortSysTickHandler+0x30>)
 8019650:	2280      	movs	r2, #128	; 0x80
 8019652:	0552      	lsls	r2, r2, #21
 8019654:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	0018      	movs	r0, r3
 801965a:	f7ff ffc1 	bl	80195e0 <vClearInterruptMaskFromISR>
}
 801965e:	46c0      	nop			; (mov r8, r8)
 8019660:	46bd      	mov	sp, r7
 8019662:	b002      	add	sp, #8
 8019664:	bd80      	pop	{r7, pc}
 8019666:	46c0      	nop			; (mov r8, r8)
 8019668:	e000ed04 	.word	0xe000ed04

0801966c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801966c:	b580      	push	{r7, lr}
 801966e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019670:	4b0b      	ldr	r3, [pc, #44]	; (80196a0 <vPortSetupTimerInterrupt+0x34>)
 8019672:	2200      	movs	r2, #0
 8019674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019676:	4b0b      	ldr	r3, [pc, #44]	; (80196a4 <vPortSetupTimerInterrupt+0x38>)
 8019678:	2200      	movs	r2, #0
 801967a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801967c:	4b0a      	ldr	r3, [pc, #40]	; (80196a8 <vPortSetupTimerInterrupt+0x3c>)
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	22fa      	movs	r2, #250	; 0xfa
 8019682:	0091      	lsls	r1, r2, #2
 8019684:	0018      	movs	r0, r3
 8019686:	f7ec fdb3 	bl	80061f0 <__udivsi3>
 801968a:	0003      	movs	r3, r0
 801968c:	001a      	movs	r2, r3
 801968e:	4b07      	ldr	r3, [pc, #28]	; (80196ac <vPortSetupTimerInterrupt+0x40>)
 8019690:	3a01      	subs	r2, #1
 8019692:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8019694:	4b02      	ldr	r3, [pc, #8]	; (80196a0 <vPortSetupTimerInterrupt+0x34>)
 8019696:	2207      	movs	r2, #7
 8019698:	601a      	str	r2, [r3, #0]
}
 801969a:	46c0      	nop			; (mov r8, r8)
 801969c:	46bd      	mov	sp, r7
 801969e:	bd80      	pop	{r7, pc}
 80196a0:	e000e010 	.word	0xe000e010
 80196a4:	e000e018 	.word	0xe000e018
 80196a8:	20000048 	.word	0x20000048
 80196ac:	e000e014 	.word	0xe000e014

080196b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b086      	sub	sp, #24
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80196b8:	2300      	movs	r3, #0
 80196ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80196bc:	f7fe ff4e 	bl	801855c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80196c0:	4b4b      	ldr	r3, [pc, #300]	; (80197f0 <pvPortMalloc+0x140>)
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d101      	bne.n	80196cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80196c8:	f000 f8ec 	bl	80198a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80196cc:	4b49      	ldr	r3, [pc, #292]	; (80197f4 <pvPortMalloc+0x144>)
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	687a      	ldr	r2, [r7, #4]
 80196d2:	4013      	ands	r3, r2
 80196d4:	d000      	beq.n	80196d8 <pvPortMalloc+0x28>
 80196d6:	e07e      	b.n	80197d6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d012      	beq.n	8019704 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80196de:	2208      	movs	r2, #8
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	189b      	adds	r3, r3, r2
 80196e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2207      	movs	r2, #7
 80196ea:	4013      	ands	r3, r2
 80196ec:	d00a      	beq.n	8019704 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	2207      	movs	r2, #7
 80196f2:	4393      	bics	r3, r2
 80196f4:	3308      	adds	r3, #8
 80196f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2207      	movs	r2, #7
 80196fc:	4013      	ands	r3, r2
 80196fe:	d001      	beq.n	8019704 <pvPortMalloc+0x54>
 8019700:	b672      	cpsid	i
 8019702:	e7fe      	b.n	8019702 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d065      	beq.n	80197d6 <pvPortMalloc+0x126>
 801970a:	4b3b      	ldr	r3, [pc, #236]	; (80197f8 <pvPortMalloc+0x148>)
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	687a      	ldr	r2, [r7, #4]
 8019710:	429a      	cmp	r2, r3
 8019712:	d860      	bhi.n	80197d6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019714:	4b39      	ldr	r3, [pc, #228]	; (80197fc <pvPortMalloc+0x14c>)
 8019716:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8019718:	4b38      	ldr	r3, [pc, #224]	; (80197fc <pvPortMalloc+0x14c>)
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801971e:	e004      	b.n	801972a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8019720:	697b      	ldr	r3, [r7, #20]
 8019722:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019724:	697b      	ldr	r3, [r7, #20]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801972a:	697b      	ldr	r3, [r7, #20]
 801972c:	685b      	ldr	r3, [r3, #4]
 801972e:	687a      	ldr	r2, [r7, #4]
 8019730:	429a      	cmp	r2, r3
 8019732:	d903      	bls.n	801973c <pvPortMalloc+0x8c>
 8019734:	697b      	ldr	r3, [r7, #20]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	2b00      	cmp	r3, #0
 801973a:	d1f1      	bne.n	8019720 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801973c:	4b2c      	ldr	r3, [pc, #176]	; (80197f0 <pvPortMalloc+0x140>)
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	697a      	ldr	r2, [r7, #20]
 8019742:	429a      	cmp	r2, r3
 8019744:	d047      	beq.n	80197d6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019746:	693b      	ldr	r3, [r7, #16]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	2208      	movs	r2, #8
 801974c:	189b      	adds	r3, r3, r2
 801974e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019750:	697b      	ldr	r3, [r7, #20]
 8019752:	681a      	ldr	r2, [r3, #0]
 8019754:	693b      	ldr	r3, [r7, #16]
 8019756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019758:	697b      	ldr	r3, [r7, #20]
 801975a:	685a      	ldr	r2, [r3, #4]
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	1ad2      	subs	r2, r2, r3
 8019760:	2308      	movs	r3, #8
 8019762:	005b      	lsls	r3, r3, #1
 8019764:	429a      	cmp	r2, r3
 8019766:	d916      	bls.n	8019796 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019768:	697a      	ldr	r2, [r7, #20]
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	18d3      	adds	r3, r2, r3
 801976e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019770:	68bb      	ldr	r3, [r7, #8]
 8019772:	2207      	movs	r2, #7
 8019774:	4013      	ands	r3, r2
 8019776:	d001      	beq.n	801977c <pvPortMalloc+0xcc>
 8019778:	b672      	cpsid	i
 801977a:	e7fe      	b.n	801977a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801977c:	697b      	ldr	r3, [r7, #20]
 801977e:	685a      	ldr	r2, [r3, #4]
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	1ad2      	subs	r2, r2, r3
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019788:	697b      	ldr	r3, [r7, #20]
 801978a:	687a      	ldr	r2, [r7, #4]
 801978c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801978e:	68bb      	ldr	r3, [r7, #8]
 8019790:	0018      	movs	r0, r3
 8019792:	f000 f8e7 	bl	8019964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019796:	4b18      	ldr	r3, [pc, #96]	; (80197f8 <pvPortMalloc+0x148>)
 8019798:	681a      	ldr	r2, [r3, #0]
 801979a:	697b      	ldr	r3, [r7, #20]
 801979c:	685b      	ldr	r3, [r3, #4]
 801979e:	1ad2      	subs	r2, r2, r3
 80197a0:	4b15      	ldr	r3, [pc, #84]	; (80197f8 <pvPortMalloc+0x148>)
 80197a2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80197a4:	4b14      	ldr	r3, [pc, #80]	; (80197f8 <pvPortMalloc+0x148>)
 80197a6:	681a      	ldr	r2, [r3, #0]
 80197a8:	4b15      	ldr	r3, [pc, #84]	; (8019800 <pvPortMalloc+0x150>)
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	429a      	cmp	r2, r3
 80197ae:	d203      	bcs.n	80197b8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80197b0:	4b11      	ldr	r3, [pc, #68]	; (80197f8 <pvPortMalloc+0x148>)
 80197b2:	681a      	ldr	r2, [r3, #0]
 80197b4:	4b12      	ldr	r3, [pc, #72]	; (8019800 <pvPortMalloc+0x150>)
 80197b6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80197b8:	697b      	ldr	r3, [r7, #20]
 80197ba:	685a      	ldr	r2, [r3, #4]
 80197bc:	4b0d      	ldr	r3, [pc, #52]	; (80197f4 <pvPortMalloc+0x144>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	431a      	orrs	r2, r3
 80197c2:	697b      	ldr	r3, [r7, #20]
 80197c4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80197c6:	697b      	ldr	r3, [r7, #20]
 80197c8:	2200      	movs	r2, #0
 80197ca:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80197cc:	4b0d      	ldr	r3, [pc, #52]	; (8019804 <pvPortMalloc+0x154>)
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	1c5a      	adds	r2, r3, #1
 80197d2:	4b0c      	ldr	r3, [pc, #48]	; (8019804 <pvPortMalloc+0x154>)
 80197d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80197d6:	f7fe fecd 	bl	8018574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	2207      	movs	r2, #7
 80197de:	4013      	ands	r3, r2
 80197e0:	d001      	beq.n	80197e6 <pvPortMalloc+0x136>
 80197e2:	b672      	cpsid	i
 80197e4:	e7fe      	b.n	80197e4 <pvPortMalloc+0x134>
	return pvReturn;
 80197e6:	68fb      	ldr	r3, [r7, #12]
}
 80197e8:	0018      	movs	r0, r3
 80197ea:	46bd      	mov	sp, r7
 80197ec:	b006      	add	sp, #24
 80197ee:	bd80      	pop	{r7, pc}
 80197f0:	20002ec8 	.word	0x20002ec8
 80197f4:	20002edc 	.word	0x20002edc
 80197f8:	20002ecc 	.word	0x20002ecc
 80197fc:	20002ec0 	.word	0x20002ec0
 8019800:	20002ed0 	.word	0x20002ed0
 8019804:	20002ed4 	.word	0x20002ed4

08019808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b084      	sub	sp, #16
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d03a      	beq.n	8019890 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801981a:	2308      	movs	r3, #8
 801981c:	425b      	negs	r3, r3
 801981e:	68fa      	ldr	r2, [r7, #12]
 8019820:	18d3      	adds	r3, r2, r3
 8019822:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019828:	68bb      	ldr	r3, [r7, #8]
 801982a:	685a      	ldr	r2, [r3, #4]
 801982c:	4b1a      	ldr	r3, [pc, #104]	; (8019898 <vPortFree+0x90>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	4013      	ands	r3, r2
 8019832:	d101      	bne.n	8019838 <vPortFree+0x30>
 8019834:	b672      	cpsid	i
 8019836:	e7fe      	b.n	8019836 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019838:	68bb      	ldr	r3, [r7, #8]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d001      	beq.n	8019844 <vPortFree+0x3c>
 8019840:	b672      	cpsid	i
 8019842:	e7fe      	b.n	8019842 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019844:	68bb      	ldr	r3, [r7, #8]
 8019846:	685a      	ldr	r2, [r3, #4]
 8019848:	4b13      	ldr	r3, [pc, #76]	; (8019898 <vPortFree+0x90>)
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	4013      	ands	r3, r2
 801984e:	d01f      	beq.n	8019890 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019850:	68bb      	ldr	r3, [r7, #8]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d11b      	bne.n	8019890 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019858:	68bb      	ldr	r3, [r7, #8]
 801985a:	685a      	ldr	r2, [r3, #4]
 801985c:	4b0e      	ldr	r3, [pc, #56]	; (8019898 <vPortFree+0x90>)
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	43db      	mvns	r3, r3
 8019862:	401a      	ands	r2, r3
 8019864:	68bb      	ldr	r3, [r7, #8]
 8019866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019868:	f7fe fe78 	bl	801855c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801986c:	68bb      	ldr	r3, [r7, #8]
 801986e:	685a      	ldr	r2, [r3, #4]
 8019870:	4b0a      	ldr	r3, [pc, #40]	; (801989c <vPortFree+0x94>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	18d2      	adds	r2, r2, r3
 8019876:	4b09      	ldr	r3, [pc, #36]	; (801989c <vPortFree+0x94>)
 8019878:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801987a:	68bb      	ldr	r3, [r7, #8]
 801987c:	0018      	movs	r0, r3
 801987e:	f000 f871 	bl	8019964 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019882:	4b07      	ldr	r3, [pc, #28]	; (80198a0 <vPortFree+0x98>)
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	1c5a      	adds	r2, r3, #1
 8019888:	4b05      	ldr	r3, [pc, #20]	; (80198a0 <vPortFree+0x98>)
 801988a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 801988c:	f7fe fe72 	bl	8018574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019890:	46c0      	nop			; (mov r8, r8)
 8019892:	46bd      	mov	sp, r7
 8019894:	b004      	add	sp, #16
 8019896:	bd80      	pop	{r7, pc}
 8019898:	20002edc 	.word	0x20002edc
 801989c:	20002ecc 	.word	0x20002ecc
 80198a0:	20002ed8 	.word	0x20002ed8

080198a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b084      	sub	sp, #16
 80198a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80198aa:	4b27      	ldr	r3, [pc, #156]	; (8019948 <prvHeapInit+0xa4>)
 80198ac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80198ae:	4b27      	ldr	r3, [pc, #156]	; (801994c <prvHeapInit+0xa8>)
 80198b0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	2207      	movs	r2, #7
 80198b6:	4013      	ands	r3, r2
 80198b8:	d00c      	beq.n	80198d4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	3307      	adds	r3, #7
 80198be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	2207      	movs	r2, #7
 80198c4:	4393      	bics	r3, r2
 80198c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80198c8:	68ba      	ldr	r2, [r7, #8]
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	1ad2      	subs	r2, r2, r3
 80198ce:	4b1f      	ldr	r3, [pc, #124]	; (801994c <prvHeapInit+0xa8>)
 80198d0:	18d3      	adds	r3, r2, r3
 80198d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80198d8:	4b1d      	ldr	r3, [pc, #116]	; (8019950 <prvHeapInit+0xac>)
 80198da:	687a      	ldr	r2, [r7, #4]
 80198dc:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80198de:	4b1c      	ldr	r3, [pc, #112]	; (8019950 <prvHeapInit+0xac>)
 80198e0:	2200      	movs	r2, #0
 80198e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	68ba      	ldr	r2, [r7, #8]
 80198e8:	18d3      	adds	r3, r2, r3
 80198ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80198ec:	2208      	movs	r2, #8
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	1a9b      	subs	r3, r3, r2
 80198f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	2207      	movs	r2, #7
 80198f8:	4393      	bics	r3, r2
 80198fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80198fc:	68fa      	ldr	r2, [r7, #12]
 80198fe:	4b15      	ldr	r3, [pc, #84]	; (8019954 <prvHeapInit+0xb0>)
 8019900:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8019902:	4b14      	ldr	r3, [pc, #80]	; (8019954 <prvHeapInit+0xb0>)
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	2200      	movs	r2, #0
 8019908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801990a:	4b12      	ldr	r3, [pc, #72]	; (8019954 <prvHeapInit+0xb0>)
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	2200      	movs	r2, #0
 8019910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019916:	683b      	ldr	r3, [r7, #0]
 8019918:	68fa      	ldr	r2, [r7, #12]
 801991a:	1ad2      	subs	r2, r2, r3
 801991c:	683b      	ldr	r3, [r7, #0]
 801991e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019920:	4b0c      	ldr	r3, [pc, #48]	; (8019954 <prvHeapInit+0xb0>)
 8019922:	681a      	ldr	r2, [r3, #0]
 8019924:	683b      	ldr	r3, [r7, #0]
 8019926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019928:	683b      	ldr	r3, [r7, #0]
 801992a:	685a      	ldr	r2, [r3, #4]
 801992c:	4b0a      	ldr	r3, [pc, #40]	; (8019958 <prvHeapInit+0xb4>)
 801992e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019930:	683b      	ldr	r3, [r7, #0]
 8019932:	685a      	ldr	r2, [r3, #4]
 8019934:	4b09      	ldr	r3, [pc, #36]	; (801995c <prvHeapInit+0xb8>)
 8019936:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019938:	4b09      	ldr	r3, [pc, #36]	; (8019960 <prvHeapInit+0xbc>)
 801993a:	2280      	movs	r2, #128	; 0x80
 801993c:	0612      	lsls	r2, r2, #24
 801993e:	601a      	str	r2, [r3, #0]
}
 8019940:	46c0      	nop			; (mov r8, r8)
 8019942:	46bd      	mov	sp, r7
 8019944:	b004      	add	sp, #16
 8019946:	bd80      	pop	{r7, pc}
 8019948:	00001b58 	.word	0x00001b58
 801994c:	20001368 	.word	0x20001368
 8019950:	20002ec0 	.word	0x20002ec0
 8019954:	20002ec8 	.word	0x20002ec8
 8019958:	20002ed0 	.word	0x20002ed0
 801995c:	20002ecc 	.word	0x20002ecc
 8019960:	20002edc 	.word	0x20002edc

08019964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019964:	b580      	push	{r7, lr}
 8019966:	b084      	sub	sp, #16
 8019968:	af00      	add	r7, sp, #0
 801996a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801996c:	4b27      	ldr	r3, [pc, #156]	; (8019a0c <prvInsertBlockIntoFreeList+0xa8>)
 801996e:	60fb      	str	r3, [r7, #12]
 8019970:	e002      	b.n	8019978 <prvInsertBlockIntoFreeList+0x14>
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	60fb      	str	r3, [r7, #12]
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	687a      	ldr	r2, [r7, #4]
 801997e:	429a      	cmp	r2, r3
 8019980:	d8f7      	bhi.n	8019972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	685b      	ldr	r3, [r3, #4]
 801998a:	68ba      	ldr	r2, [r7, #8]
 801998c:	18d3      	adds	r3, r2, r3
 801998e:	687a      	ldr	r2, [r7, #4]
 8019990:	429a      	cmp	r2, r3
 8019992:	d108      	bne.n	80199a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	685a      	ldr	r2, [r3, #4]
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	685b      	ldr	r3, [r3, #4]
 801999c:	18d2      	adds	r2, r2, r3
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	685b      	ldr	r3, [r3, #4]
 80199ae:	68ba      	ldr	r2, [r7, #8]
 80199b0:	18d2      	adds	r2, r2, r3
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	429a      	cmp	r2, r3
 80199b8:	d118      	bne.n	80199ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	681a      	ldr	r2, [r3, #0]
 80199be:	4b14      	ldr	r3, [pc, #80]	; (8019a10 <prvInsertBlockIntoFreeList+0xac>)
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	429a      	cmp	r2, r3
 80199c4:	d00d      	beq.n	80199e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	685a      	ldr	r2, [r3, #4]
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	685b      	ldr	r3, [r3, #4]
 80199d0:	18d2      	adds	r2, r2, r3
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	681a      	ldr	r2, [r3, #0]
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	601a      	str	r2, [r3, #0]
 80199e0:	e008      	b.n	80199f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80199e2:	4b0b      	ldr	r3, [pc, #44]	; (8019a10 <prvInsertBlockIntoFreeList+0xac>)
 80199e4:	681a      	ldr	r2, [r3, #0]
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	601a      	str	r2, [r3, #0]
 80199ea:	e003      	b.n	80199f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	681a      	ldr	r2, [r3, #0]
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80199f4:	68fa      	ldr	r2, [r7, #12]
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	429a      	cmp	r2, r3
 80199fa:	d002      	beq.n	8019a02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	687a      	ldr	r2, [r7, #4]
 8019a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019a02:	46c0      	nop			; (mov r8, r8)
 8019a04:	46bd      	mov	sp, r7
 8019a06:	b004      	add	sp, #16
 8019a08:	bd80      	pop	{r7, pc}
 8019a0a:	46c0      	nop			; (mov r8, r8)
 8019a0c:	20002ec0 	.word	0x20002ec0
 8019a10:	20002ec8 	.word	0x20002ec8

08019a14 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 8019a14:	b580      	push	{r7, lr}
 8019a16:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8019a18:	f7f9 fe38 	bl	801368c <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8019a1c:	f000 f830 	bl	8019a80 <USBPD_DPM_InitCore>
 8019a20:	1e03      	subs	r3, r0, #0
 8019a22:	d000      	beq.n	8019a26 <MX_USBPD_Init+0x12>
  {
    while(1);
 8019a24:	e7fe      	b.n	8019a24 <MX_USBPD_Init+0x10>
  }

  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 8019a26:	4b0a      	ldr	r3, [pc, #40]	; (8019a50 <MX_USBPD_Init+0x3c>)
 8019a28:	4a0a      	ldr	r2, [pc, #40]	; (8019a54 <MX_USBPD_Init+0x40>)
 8019a2a:	490b      	ldr	r1, [pc, #44]	; (8019a58 <MX_USBPD_Init+0x44>)
 8019a2c:	480b      	ldr	r0, [pc, #44]	; (8019a5c <MX_USBPD_Init+0x48>)
 8019a2e:	f004 fcad 	bl	801e38c <GUI_Init>

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8019a32:	f000 fb7d 	bl	801a130 <USBPD_DPM_UserInit>
 8019a36:	1e03      	subs	r3, r0, #0
 8019a38:	d000      	beq.n	8019a3c <MX_USBPD_Init+0x28>
  {
    while(1);
 8019a3a:	e7fe      	b.n	8019a3a <MX_USBPD_Init+0x26>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 8019a3c:	f000 f8f8 	bl	8019c30 <USBPD_DPM_InitOS>
 8019a40:	1e03      	subs	r3, r0, #0
 8019a42:	d000      	beq.n	8019a46 <MX_USBPD_Init+0x32>
  {
    while(1);
 8019a44:	e7fe      	b.n	8019a44 <MX_USBPD_Init+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 8019a46:	b662      	cpsie	i
}
 8019a48:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 8019a4a:	46c0      	nop			; (mov r8, r8)
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}
 8019a50:	08014371 	.word	0x08014371
 8019a54:	08014349 	.word	0x08014349
 8019a58:	08019a71 	.word	0x08019a71
 8019a5c:	08019a61 	.word	0x08019a61

08019a60 <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
__weak const uint8_t* BSP_GetBoardName(void)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_NAME;
 8019a64:	4b01      	ldr	r3, [pc, #4]	; (8019a6c <BSP_GetBoardName+0xc>)
}
 8019a66:	0018      	movs	r0, r3
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	bd80      	pop	{r7, pc}
 8019a6c:	0802318c 	.word	0x0802318c

08019a70 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
__weak const uint8_t* BSP_GetBoardID(void)
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_ID;
 8019a74:	4b01      	ldr	r3, [pc, #4]	; (8019a7c <BSP_GetBoardID+0xc>)
}
 8019a76:	0018      	movs	r0, r3
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd80      	pop	{r7, pc}
 8019a7c:	08023198 	.word	0x08023198

08019a80 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8019a80:	b5b0      	push	{r4, r5, r7, lr}
 8019a82:	b082      	sub	sp, #8
 8019a84:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8019a86:	1dfb      	adds	r3, r7, #7
 8019a88:	2200      	movs	r2, #0
 8019a8a:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 8019a8c:	4b63      	ldr	r3, [pc, #396]	; (8019c1c <USBPD_DPM_InitCore+0x19c>)
 8019a8e:	0018      	movs	r0, r3
 8019a90:	f7e7 fd24 	bl	80014dc <USBPD_PE_CheckLIB>
 8019a94:	0003      	movs	r3, r0
 8019a96:	2b01      	cmp	r3, #1
 8019a98:	d003      	beq.n	8019aa2 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 8019a9a:	1dfb      	adds	r3, r7, #7
 8019a9c:	2202      	movs	r2, #2
 8019a9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8019aa0:	e0b6      	b.n	8019c10 <USBPD_DPM_InitCore+0x190>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8019aa2:	f7e7 fd29 	bl	80014f8 <USBPD_PE_GetMemoryConsumption>
 8019aa6:	0003      	movs	r3, r0
 8019aa8:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 8019aaa:	f7f7 ffc1 	bl	8011a30 <USBPD_TRACE_Init>

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8019aae:	1dbb      	adds	r3, r7, #6
 8019ab0:	2200      	movs	r2, #0
 8019ab2:	701a      	strb	r2, [r3, #0]
 8019ab4:	e0a6      	b.n	8019c04 <USBPD_DPM_InitCore+0x184>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8019ab6:	1dbb      	adds	r3, r7, #6
 8019ab8:	781b      	ldrb	r3, [r3, #0]
 8019aba:	4a59      	ldr	r2, [pc, #356]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019abc:	009b      	lsls	r3, r3, #2
 8019abe:	18d3      	adds	r3, r2, r3
 8019ac0:	785a      	ldrb	r2, [r3, #1]
 8019ac2:	2108      	movs	r1, #8
 8019ac4:	438a      	bics	r2, r1
 8019ac6:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8019ac8:	1dbb      	adds	r3, r7, #6
 8019aca:	781a      	ldrb	r2, [r3, #0]
 8019acc:	1dbb      	adds	r3, r7, #6
 8019ace:	7818      	ldrb	r0, [r3, #0]
 8019ad0:	4954      	ldr	r1, [pc, #336]	; (8019c24 <USBPD_DPM_InitCore+0x1a4>)
 8019ad2:	0013      	movs	r3, r2
 8019ad4:	005b      	lsls	r3, r3, #1
 8019ad6:	189b      	adds	r3, r3, r2
 8019ad8:	009b      	lsls	r3, r3, #2
 8019ada:	18cb      	adds	r3, r1, r3
 8019adc:	791b      	ldrb	r3, [r3, #4]
 8019ade:	079b      	lsls	r3, r3, #30
 8019ae0:	0f9b      	lsrs	r3, r3, #30
 8019ae2:	b2d9      	uxtb	r1, r3
 8019ae4:	4b4e      	ldr	r3, [pc, #312]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019ae6:	0082      	lsls	r2, r0, #2
 8019ae8:	2003      	movs	r0, #3
 8019aea:	4001      	ands	r1, r0
 8019aec:	000c      	movs	r4, r1
 8019aee:	5cd1      	ldrb	r1, [r2, r3]
 8019af0:	2003      	movs	r0, #3
 8019af2:	4381      	bics	r1, r0
 8019af4:	1c08      	adds	r0, r1, #0
 8019af6:	1c21      	adds	r1, r4, #0
 8019af8:	4301      	orrs	r1, r0
 8019afa:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8019afc:	1dbb      	adds	r3, r7, #6
 8019afe:	781a      	ldrb	r2, [r3, #0]
 8019b00:	1dbb      	adds	r3, r7, #6
 8019b02:	7818      	ldrb	r0, [r3, #0]
 8019b04:	4947      	ldr	r1, [pc, #284]	; (8019c24 <USBPD_DPM_InitCore+0x1a4>)
 8019b06:	0013      	movs	r3, r2
 8019b08:	005b      	lsls	r3, r3, #1
 8019b0a:	189b      	adds	r3, r3, r2
 8019b0c:	009b      	lsls	r3, r3, #2
 8019b0e:	18cb      	adds	r3, r1, r3
 8019b10:	791b      	ldrb	r3, [r3, #4]
 8019b12:	075b      	lsls	r3, r3, #29
 8019b14:	0fdb      	lsrs	r3, r3, #31
 8019b16:	b2d9      	uxtb	r1, r3
 8019b18:	4b41      	ldr	r3, [pc, #260]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019b1a:	0082      	lsls	r2, r0, #2
 8019b1c:	2001      	movs	r0, #1
 8019b1e:	4001      	ands	r1, r0
 8019b20:	008c      	lsls	r4, r1, #2
 8019b22:	5cd1      	ldrb	r1, [r2, r3]
 8019b24:	2004      	movs	r0, #4
 8019b26:	4381      	bics	r1, r0
 8019b28:	1c08      	adds	r0, r1, #0
 8019b2a:	1c21      	adds	r1, r4, #0
 8019b2c:	4301      	orrs	r1, r0
 8019b2e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8019b30:	1dbb      	adds	r3, r7, #6
 8019b32:	781a      	ldrb	r2, [r3, #0]
 8019b34:	4b3a      	ldr	r3, [pc, #232]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019b36:	0092      	lsls	r2, r2, #2
 8019b38:	5cd1      	ldrb	r1, [r2, r3]
 8019b3a:	2010      	movs	r0, #16
 8019b3c:	4381      	bics	r1, r0
 8019b3e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8019b40:	1dbb      	adds	r3, r7, #6
 8019b42:	781a      	ldrb	r2, [r3, #0]
 8019b44:	4b36      	ldr	r3, [pc, #216]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019b46:	0092      	lsls	r2, r2, #2
 8019b48:	5cd1      	ldrb	r1, [r2, r3]
 8019b4a:	203f      	movs	r0, #63	; 0x3f
 8019b4c:	4001      	ands	r1, r0
 8019b4e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8019b50:	1dbb      	adds	r3, r7, #6
 8019b52:	781b      	ldrb	r3, [r3, #0]
 8019b54:	4a32      	ldr	r2, [pc, #200]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019b56:	009b      	lsls	r3, r3, #2
 8019b58:	18d3      	adds	r3, r2, r3
 8019b5a:	785a      	ldrb	r2, [r3, #1]
 8019b5c:	2160      	movs	r1, #96	; 0x60
 8019b5e:	438a      	bics	r2, r1
 8019b60:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8019b62:	1dbb      	adds	r3, r7, #6
 8019b64:	781b      	ldrb	r3, [r3, #0]
 8019b66:	4a2e      	ldr	r2, [pc, #184]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019b68:	009b      	lsls	r3, r3, #2
 8019b6a:	18d3      	adds	r3, r2, r3
 8019b6c:	785a      	ldrb	r2, [r3, #1]
 8019b6e:	217f      	movs	r1, #127	; 0x7f
 8019b70:	400a      	ands	r2, r1
 8019b72:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 8019b74:	1dbb      	adds	r3, r7, #6
 8019b76:	781a      	ldrb	r2, [r3, #0]
 8019b78:	0013      	movs	r3, r2
 8019b7a:	005b      	lsls	r3, r3, #1
 8019b7c:	189b      	adds	r3, r3, r2
 8019b7e:	009b      	lsls	r3, r3, #2
 8019b80:	4a28      	ldr	r2, [pc, #160]	; (8019c24 <USBPD_DPM_InitCore+0x1a4>)
 8019b82:	189c      	adds	r4, r3, r2
 8019b84:	1dbb      	adds	r3, r7, #6
 8019b86:	781b      	ldrb	r3, [r3, #0]
 8019b88:	009a      	lsls	r2, r3, #2
 8019b8a:	4b25      	ldr	r3, [pc, #148]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019b8c:	18d2      	adds	r2, r2, r3
 8019b8e:	4926      	ldr	r1, [pc, #152]	; (8019c28 <USBPD_DPM_InitCore+0x1a8>)
 8019b90:	1dbb      	adds	r3, r7, #6
 8019b92:	7818      	ldrb	r0, [r3, #0]
 8019b94:	0013      	movs	r3, r2
 8019b96:	0022      	movs	r2, r4
 8019b98:	f7e6 fab6 	bl	8000108 <USBPD_CAD_Init>
 8019b9c:	1e03      	subs	r3, r0, #0
 8019b9e:	d003      	beq.n	8019ba8 <USBPD_DPM_InitCore+0x128>
 8019ba0:	1dfb      	adds	r3, r7, #7
 8019ba2:	2202      	movs	r2, #2
 8019ba4:	701a      	strb	r2, [r3, #0]
 8019ba6:	e033      	b.n	8019c10 <USBPD_DPM_InitCore+0x190>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8019ba8:	1dbb      	adds	r3, r7, #6
 8019baa:	781a      	ldrb	r2, [r3, #0]
 8019bac:	0013      	movs	r3, r2
 8019bae:	005b      	lsls	r3, r3, #1
 8019bb0:	189b      	adds	r3, r3, r2
 8019bb2:	009b      	lsls	r3, r3, #2
 8019bb4:	4a1b      	ldr	r2, [pc, #108]	; (8019c24 <USBPD_DPM_InitCore+0x1a4>)
 8019bb6:	1899      	adds	r1, r3, r2
 8019bb8:	1dbb      	adds	r3, r7, #6
 8019bba:	781b      	ldrb	r3, [r3, #0]
 8019bbc:	009a      	lsls	r2, r3, #2
 8019bbe:	4b18      	ldr	r3, [pc, #96]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019bc0:	18d2      	adds	r2, r2, r3
 8019bc2:	1dfc      	adds	r4, r7, #7
 8019bc4:	4d19      	ldr	r5, [pc, #100]	; (8019c2c <USBPD_DPM_InitCore+0x1ac>)
 8019bc6:	1dbb      	adds	r3, r7, #6
 8019bc8:	7818      	ldrb	r0, [r3, #0]
 8019bca:	002b      	movs	r3, r5
 8019bcc:	f7e6 fb7a 	bl	80002c4 <USBPD_PE_Init>
 8019bd0:	0003      	movs	r3, r0
 8019bd2:	7023      	strb	r3, [r4, #0]
 8019bd4:	1dfb      	adds	r3, r7, #7
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d119      	bne.n	8019c10 <USBPD_DPM_InitCore+0x190>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8019bdc:	1dbb      	adds	r3, r7, #6
 8019bde:	781b      	ldrb	r3, [r3, #0]
 8019be0:	4a0f      	ldr	r2, [pc, #60]	; (8019c20 <USBPD_DPM_InitCore+0x1a0>)
 8019be2:	009b      	lsls	r3, r3, #2
 8019be4:	18d3      	adds	r3, r2, r3
 8019be6:	785a      	ldrb	r2, [r3, #1]
 8019be8:	2108      	movs	r1, #8
 8019bea:	430a      	orrs	r2, r1
 8019bec:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8019bee:	1dbb      	adds	r3, r7, #6
 8019bf0:	781b      	ldrb	r3, [r3, #0]
 8019bf2:	2101      	movs	r1, #1
 8019bf4:	0018      	movs	r0, r3
 8019bf6:	f7e6 fab4 	bl	8000162 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8019bfa:	1dbb      	adds	r3, r7, #6
 8019bfc:	1dba      	adds	r2, r7, #6
 8019bfe:	7812      	ldrb	r2, [r2, #0]
 8019c00:	3201      	adds	r2, #1
 8019c02:	701a      	strb	r2, [r3, #0]
 8019c04:	1dbb      	adds	r3, r7, #6
 8019c06:	781b      	ldrb	r3, [r3, #0]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d100      	bne.n	8019c0e <USBPD_DPM_InitCore+0x18e>
 8019c0c:	e753      	b.n	8019ab6 <USBPD_DPM_InitCore+0x36>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 8019c0e:	46c0      	nop			; (mov r8, r8)
  return _retr;
 8019c10:	1dfb      	adds	r3, r7, #7
 8019c12:	781b      	ldrb	r3, [r3, #0]
}
 8019c14:	0018      	movs	r0, r3
 8019c16:	46bd      	mov	sp, r7
 8019c18:	b002      	add	sp, #8
 8019c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8019c1c:	30410000 	.word	0x30410000
 8019c20:	20002ef0 	.word	0x20002ef0
 8019c24:	200000e4 	.word	0x200000e4
 8019c28:	080241d8 	.word	0x080241d8
 8019c2c:	080241e0 	.word	0x080241e0

08019c30 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8019c30:	b590      	push	{r4, r7, lr}
 8019c32:	b08d      	sub	sp, #52	; 0x34
 8019c34:	af00      	add	r7, sp, #0
  OS_INIT();
 8019c36:	242f      	movs	r4, #47	; 0x2f
 8019c38:	193b      	adds	r3, r7, r4
 8019c3a:	2200      	movs	r2, #0
 8019c3c:	701a      	strb	r2, [r3, #0]
  {
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 8019c3e:	2200      	movs	r2, #0
 8019c40:	2102      	movs	r1, #2
 8019c42:	2001      	movs	r0, #1
 8019c44:	f7fd fa5a 	bl	80170fc <osMessageQueueNew>
 8019c48:	0002      	movs	r2, r0
 8019c4a:	4b32      	ldr	r3, [pc, #200]	; (8019d14 <USBPD_DPM_InitOS+0xe4>)
 8019c4c:	601a      	str	r2, [r3, #0]
    OS_DEFINE_TASK(CAD, USBPD_CAD_Task, OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, NULL);
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 8019c4e:	1d3b      	adds	r3, r7, #4
 8019c50:	0018      	movs	r0, r3
 8019c52:	2324      	movs	r3, #36	; 0x24
 8019c54:	001a      	movs	r2, r3
 8019c56:	2100      	movs	r1, #0
 8019c58:	f008 fd22 	bl	80226a0 <memset>
 8019c5c:	1d3b      	adds	r3, r7, #4
 8019c5e:	4a2e      	ldr	r2, [pc, #184]	; (8019d18 <USBPD_DPM_InitOS+0xe8>)
 8019c60:	601a      	str	r2, [r3, #0]
 8019c62:	1d3b      	adds	r3, r7, #4
 8019c64:	2296      	movs	r2, #150	; 0x96
 8019c66:	00d2      	lsls	r2, r2, #3
 8019c68:	615a      	str	r2, [r3, #20]
 8019c6a:	1d3b      	adds	r3, r7, #4
 8019c6c:	2230      	movs	r2, #48	; 0x30
 8019c6e:	619a      	str	r2, [r3, #24]
 8019c70:	1d3a      	adds	r2, r7, #4
 8019c72:	4b2a      	ldr	r3, [pc, #168]	; (8019d1c <USBPD_DPM_InitOS+0xec>)
 8019c74:	2100      	movs	r1, #0
 8019c76:	0018      	movs	r0, r3
 8019c78:	f7fd f93e 	bl	8016ef8 <osThreadNew>
 8019c7c:	0002      	movs	r2, r0
 8019c7e:	4b28      	ldr	r3, [pc, #160]	; (8019d20 <USBPD_DPM_InitOS+0xf0>)
 8019c80:	601a      	str	r2, [r3, #0]
 8019c82:	4b27      	ldr	r3, [pc, #156]	; (8019d20 <USBPD_DPM_InitOS+0xf0>)
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d103      	bne.n	8019c92 <USBPD_DPM_InitOS+0x62>
 8019c8a:	193b      	adds	r3, r7, r4
 8019c8c:	2202      	movs	r2, #2
 8019c8e:	701a      	strb	r2, [r3, #0]
 8019c90:	e039      	b.n	8019d06 <USBPD_DPM_InitOS+0xd6>
  }

  /* Create the queue corresponding to PE task */
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 8019c92:	2300      	movs	r3, #0
 8019c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8019c96:	e032      	b.n	8019cfe <USBPD_DPM_InitOS+0xce>
  {
    OS_CREATE_QUEUE(PEQueueId[index], "QPE", 1, OS_ELEMENT_SIZE);
 8019c98:	2200      	movs	r2, #0
 8019c9a:	2102      	movs	r1, #2
 8019c9c:	2001      	movs	r0, #1
 8019c9e:	f7fd fa2d 	bl	80170fc <osMessageQueueNew>
 8019ca2:	0001      	movs	r1, r0
 8019ca4:	4b1f      	ldr	r3, [pc, #124]	; (8019d24 <USBPD_DPM_InitOS+0xf4>)
 8019ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ca8:	0092      	lsls	r2, r2, #2
 8019caa:	50d1      	str	r1, [r2, r3]

    if (index == USBPD_PORT_0)
 8019cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d122      	bne.n	8019cf8 <USBPD_DPM_InitOS+0xc8>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_0, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_0);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_0], PE_0, USBPD_PE_Task,
 8019cb2:	1d3b      	adds	r3, r7, #4
 8019cb4:	0018      	movs	r0, r3
 8019cb6:	2324      	movs	r3, #36	; 0x24
 8019cb8:	001a      	movs	r2, r3
 8019cba:	2100      	movs	r1, #0
 8019cbc:	f008 fcf0 	bl	80226a0 <memset>
 8019cc0:	1d3b      	adds	r3, r7, #4
 8019cc2:	4a19      	ldr	r2, [pc, #100]	; (8019d28 <USBPD_DPM_InitOS+0xf8>)
 8019cc4:	601a      	str	r2, [r3, #0]
 8019cc6:	1d3b      	adds	r3, r7, #4
 8019cc8:	22af      	movs	r2, #175	; 0xaf
 8019cca:	00d2      	lsls	r2, r2, #3
 8019ccc:	615a      	str	r2, [r3, #20]
 8019cce:	1d3b      	adds	r3, r7, #4
 8019cd0:	2220      	movs	r2, #32
 8019cd2:	619a      	str	r2, [r3, #24]
 8019cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019cd6:	1d3a      	adds	r2, r7, #4
 8019cd8:	4b14      	ldr	r3, [pc, #80]	; (8019d2c <USBPD_DPM_InitOS+0xfc>)
 8019cda:	0018      	movs	r0, r3
 8019cdc:	f7fd f90c 	bl	8016ef8 <osThreadNew>
 8019ce0:	0002      	movs	r2, r0
 8019ce2:	4b13      	ldr	r3, [pc, #76]	; (8019d30 <USBPD_DPM_InitOS+0x100>)
 8019ce4:	601a      	str	r2, [r3, #0]
 8019ce6:	4b12      	ldr	r3, [pc, #72]	; (8019d30 <USBPD_DPM_InitOS+0x100>)
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d104      	bne.n	8019cf8 <USBPD_DPM_InitOS+0xc8>
 8019cee:	232f      	movs	r3, #47	; 0x2f
 8019cf0:	18fb      	adds	r3, r7, r3
 8019cf2:	2202      	movs	r2, #2
 8019cf4:	701a      	strb	r2, [r3, #0]
 8019cf6:	e006      	b.n	8019d06 <USBPD_DPM_InitOS+0xd6>
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 8019cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cfa:	3301      	adds	r3, #1
 8019cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8019cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d0c9      	beq.n	8019c98 <USBPD_DPM_InitOS+0x68>
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_1], PE_1, USBPD_PE_Task,
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#endif /* USBPD_PORT_COUNT > 1*/
  }
error:
 8019d04:	46c0      	nop			; (mov r8, r8)

  return _retr;
 8019d06:	232f      	movs	r3, #47	; 0x2f
 8019d08:	18fb      	adds	r3, r7, r3
 8019d0a:	781b      	ldrb	r3, [r3, #0]
}
 8019d0c:	0018      	movs	r0, r3
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	b00d      	add	sp, #52	; 0x34
 8019d12:	bd90      	pop	{r4, r7, pc}
 8019d14:	20002ee4 	.word	0x20002ee4
 8019d18:	080231a0 	.word	0x080231a0
 8019d1c:	08019e29 	.word	0x08019e29
 8019d20:	20002ee8 	.word	0x20002ee8
 8019d24:	20002eec 	.word	0x20002eec
 8019d28:	080231a4 	.word	0x080231a4
 8019d2c:	08019dc5 	.word	0x08019dc5
 8019d30:	20002ee0 	.word	0x20002ee0

08019d34 <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 8019d38:	4b09      	ldr	r3, [pc, #36]	; (8019d60 <USBPD_DPM_TimerCounter+0x2c>)
 8019d3a:	785b      	ldrb	r3, [r3, #1]
 8019d3c:	2208      	movs	r2, #8
 8019d3e:	4013      	ands	r3, r2
 8019d40:	b2db      	uxtb	r3, r3
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d008      	beq.n	8019d58 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 8019d46:	2000      	movs	r0, #0
 8019d48:	f000 fa6e 	bl	801a228 <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 8019d4c:	2000      	movs	r0, #0
 8019d4e:	f7e6 fb16 	bl	800037e <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 8019d52:	2000      	movs	r0, #0
 8019d54:	f7eb fc68 	bl	8005628 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 8019d58:	46c0      	nop			; (mov r8, r8)
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	bd80      	pop	{r7, pc}
 8019d5e:	46c0      	nop			; (mov r8, r8)
 8019d60:	20002ef0 	.word	0x20002ef0

08019d64 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b084      	sub	sp, #16
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	0002      	movs	r2, r0
 8019d6c:	1dfb      	adds	r3, r7, #7
 8019d6e:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 8019d70:	4b08      	ldr	r3, [pc, #32]	; (8019d94 <USBPD_PE_TaskWakeUp+0x30>)
 8019d72:	60fb      	str	r3, [r7, #12]
 8019d74:	1dfb      	adds	r3, r7, #7
 8019d76:	781a      	ldrb	r2, [r3, #0]
 8019d78:	4b07      	ldr	r3, [pc, #28]	; (8019d98 <USBPD_PE_TaskWakeUp+0x34>)
 8019d7a:	0092      	lsls	r2, r2, #2
 8019d7c:	58d0      	ldr	r0, [r2, r3]
 8019d7e:	230c      	movs	r3, #12
 8019d80:	18f9      	adds	r1, r7, r3
 8019d82:	2300      	movs	r3, #0
 8019d84:	2200      	movs	r2, #0
 8019d86:	f7fd fa33 	bl	80171f0 <osMessageQueuePut>
}
 8019d8a:	46c0      	nop			; (mov r8, r8)
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	b004      	add	sp, #16
 8019d90:	bd80      	pop	{r7, pc}
 8019d92:	46c0      	nop			; (mov r8, r8)
 8019d94:	0000ffff 	.word	0x0000ffff
 8019d98:	20002eec 	.word	0x20002eec

08019d9c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b082      	sub	sp, #8
 8019da0:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 8019da2:	4b06      	ldr	r3, [pc, #24]	; (8019dbc <USBPD_DPM_CADTaskWakeUp+0x20>)
 8019da4:	607b      	str	r3, [r7, #4]
 8019da6:	4b06      	ldr	r3, [pc, #24]	; (8019dc0 <USBPD_DPM_CADTaskWakeUp+0x24>)
 8019da8:	6818      	ldr	r0, [r3, #0]
 8019daa:	1d39      	adds	r1, r7, #4
 8019dac:	2300      	movs	r3, #0
 8019dae:	2200      	movs	r2, #0
 8019db0:	f7fd fa1e 	bl	80171f0 <osMessageQueuePut>
}
 8019db4:	46c0      	nop			; (mov r8, r8)
 8019db6:	46bd      	mov	sp, r7
 8019db8:	b002      	add	sp, #8
 8019dba:	bd80      	pop	{r7, pc}
 8019dbc:	0000ffff 	.word	0x0000ffff
 8019dc0:	20002ee4 	.word	0x20002ee4

08019dc4 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_PE_Task)
{
 8019dc4:	b590      	push	{r4, r7, lr}
 8019dc6:	b087      	sub	sp, #28
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
  uint8_t _port = (uint32_t)argument;
 8019dcc:	687a      	ldr	r2, [r7, #4]
 8019dce:	2317      	movs	r3, #23
 8019dd0:	18fb      	adds	r3, r7, r3
 8019dd2:	701a      	strb	r2, [r3, #0]
  UTIL_LPM_SetOffMode(0 == _port ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

  for (;;)
  {
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 8019dd4:	2317      	movs	r3, #23
 8019dd6:	18fb      	adds	r3, r7, r3
 8019dd8:	781b      	ldrb	r3, [r3, #0]
 8019dda:	4a11      	ldr	r2, [pc, #68]	; (8019e20 <USBPD_PE_Task+0x5c>)
 8019ddc:	009b      	lsls	r3, r3, #2
 8019dde:	18d3      	adds	r3, r2, r3
 8019de0:	785b      	ldrb	r3, [r3, #1]
 8019de2:	06db      	lsls	r3, r3, #27
 8019de4:	0fdb      	lsrs	r3, r3, #31
 8019de6:	b2db      	uxtb	r3, r3
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d105      	bne.n	8019df8 <USBPD_PE_Task+0x34>
    {
      /* if the port is no more connected, suspend the PE thread */
      OS_TASK_SUSPEND(OS_TASK_GETID());
 8019dec:	f7fd f91a 	bl	8017024 <osThreadGetId>
 8019df0:	0003      	movs	r3, r0
 8019df2:	0018      	movs	r0, r3
 8019df4:	f7fd f922 	bl	801703c <osThreadSuspend>
    }

    _timing = USBPD_PE_StateMachine_SNK(_port);
 8019df8:	2417      	movs	r4, #23
 8019dfa:	193b      	adds	r3, r7, r4
 8019dfc:	781b      	ldrb	r3, [r3, #0]
 8019dfe:	0018      	movs	r0, r3
 8019e00:	f7e8 f812 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 8019e04:	0003      	movs	r3, r0
 8019e06:	613b      	str	r3, [r7, #16]
 /* _DRP || ( _SRC && _SNK) */

    OS_GETMESSAGE_QUEUE(PEQueueId[_port], _timing);
 8019e08:	193b      	adds	r3, r7, r4
 8019e0a:	781a      	ldrb	r2, [r3, #0]
 8019e0c:	4b05      	ldr	r3, [pc, #20]	; (8019e24 <USBPD_PE_Task+0x60>)
 8019e0e:	0092      	lsls	r2, r2, #2
 8019e10:	58d0      	ldr	r0, [r2, r3]
 8019e12:	693b      	ldr	r3, [r7, #16]
 8019e14:	220c      	movs	r2, #12
 8019e16:	18b9      	adds	r1, r7, r2
 8019e18:	2200      	movs	r2, #0
 8019e1a:	f7fd fa45 	bl	80172a8 <osMessageQueueGet>
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 8019e1e:	e7d9      	b.n	8019dd4 <USBPD_PE_Task+0x10>
 8019e20:	20002ef0 	.word	0x20002ef0
 8019e24:	20002eec 	.word	0x20002eec

08019e28 <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b084      	sub	sp, #16
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 8019e30:	f7e6 f99e 	bl	8000170 <USBPD_CAD_Process>
 8019e34:	0003      	movs	r3, r0
 8019e36:	60fb      	str	r3, [r7, #12]
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 8019e38:	4b04      	ldr	r3, [pc, #16]	; (8019e4c <USBPD_CAD_Task+0x24>)
 8019e3a:	6818      	ldr	r0, [r3, #0]
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	2208      	movs	r2, #8
 8019e40:	18b9      	adds	r1, r7, r2
 8019e42:	2200      	movs	r2, #0
 8019e44:	f7fd fa30 	bl	80172a8 <osMessageQueueGet>
    _timing = USBPD_CAD_Process();
 8019e48:	e7f2      	b.n	8019e30 <USBPD_CAD_Task+0x8>
 8019e4a:	46c0      	nop			; (mov r8, r8)
 8019e4c:	20002ee4 	.word	0x20002ee4

08019e50 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b086      	sub	sp, #24
 8019e54:	af02      	add	r7, sp, #8
 8019e56:	603a      	str	r2, [r7, #0]
 8019e58:	1dfb      	adds	r3, r7, #7
 8019e5a:	1c02      	adds	r2, r0, #0
 8019e5c:	701a      	strb	r2, [r3, #0]
 8019e5e:	1dbb      	adds	r3, r7, #6
 8019e60:	1c0a      	adds	r2, r1, #0
 8019e62:	701a      	strb	r2, [r3, #0]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 8019e64:	1dbb      	adds	r3, r7, #6
 8019e66:	781a      	ldrb	r2, [r3, #0]
 8019e68:	1dfb      	adds	r3, r7, #7
 8019e6a:	7819      	ldrb	r1, [r3, #0]
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	9300      	str	r3, [sp, #0]
 8019e70:	2300      	movs	r3, #0
 8019e72:	2003      	movs	r0, #3
 8019e74:	f7f7 fdf2 	bl	8011a5c <USBPD_TRACE_Add>
 /* _TRACE */
  (void)(Cc);
  switch (State)
 8019e78:	1dbb      	adds	r3, r7, #6
 8019e7a:	781b      	ldrb	r3, [r3, #0]
 8019e7c:	2b04      	cmp	r3, #4
 8019e7e:	d009      	beq.n	8019e94 <USBPD_DPM_CADCallback+0x44>
 8019e80:	dd00      	ble.n	8019e84 <USBPD_DPM_CADCallback+0x34>
 8019e82:	e06f      	b.n	8019f64 <USBPD_DPM_CADCallback+0x114>
 8019e84:	2b03      	cmp	r3, #3
 8019e86:	d01d      	beq.n	8019ec4 <USBPD_DPM_CADCallback+0x74>
 8019e88:	dc6c      	bgt.n	8019f64 <USBPD_DPM_CADCallback+0x114>
 8019e8a:	2b01      	cmp	r3, #1
 8019e8c:	d01a      	beq.n	8019ec4 <USBPD_DPM_CADCallback+0x74>
 8019e8e:	2b02      	cmp	r3, #2
 8019e90:	d00c      	beq.n	8019eac <USBPD_DPM_CADCallback+0x5c>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 8019e92:	e067      	b.n	8019f64 <USBPD_DPM_CADCallback+0x114>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 8019e94:	1dfb      	adds	r3, r7, #7
 8019e96:	781b      	ldrb	r3, [r3, #0]
 8019e98:	2104      	movs	r1, #4
 8019e9a:	0018      	movs	r0, r3
 8019e9c:	f000 f96a 	bl	801a174 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8019ea0:	1dfb      	adds	r3, r7, #7
 8019ea2:	781b      	ldrb	r3, [r3, #0]
 8019ea4:	0018      	movs	r0, r3
 8019ea6:	f000 f867 	bl	8019f78 <DPM_StartPETask>
      break;
 8019eaa:	e05c      	b.n	8019f66 <USBPD_DPM_CADCallback+0x116>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 8019eac:	1dfb      	adds	r3, r7, #7
 8019eae:	781b      	ldrb	r3, [r3, #0]
 8019eb0:	2102      	movs	r1, #2
 8019eb2:	0018      	movs	r0, r3
 8019eb4:	f000 f95e 	bl	801a174 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8019eb8:	1dfb      	adds	r3, r7, #7
 8019eba:	781b      	ldrb	r3, [r3, #0]
 8019ebc:	0018      	movs	r0, r3
 8019ebe:	f000 f85b 	bl	8019f78 <DPM_StartPETask>
      break;
 8019ec2:	e050      	b.n	8019f66 <USBPD_DPM_CADCallback+0x116>
      uint8_t _timeout = 0;
 8019ec4:	230f      	movs	r3, #15
 8019ec6:	18fb      	adds	r3, r7, r3
 8019ec8:	2200      	movs	r2, #0
 8019eca:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 8019ecc:	1dfb      	adds	r3, r7, #7
 8019ece:	781b      	ldrb	r3, [r3, #0]
 8019ed0:	0018      	movs	r0, r3
 8019ed2:	f7ff ff47 	bl	8019d64 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8019ed6:	e015      	b.n	8019f04 <USBPD_DPM_CADCallback+0xb4>
        (void)OS_DELAY(1);
 8019ed8:	2001      	movs	r0, #1
 8019eda:	f7fd f8f3 	bl	80170c4 <osDelay>
        _timeout++;
 8019ede:	210f      	movs	r1, #15
 8019ee0:	187b      	adds	r3, r7, r1
 8019ee2:	781a      	ldrb	r2, [r3, #0]
 8019ee4:	187b      	adds	r3, r7, r1
 8019ee6:	3201      	adds	r2, #1
 8019ee8:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 8019eea:	187b      	adds	r3, r7, r1
 8019eec:	781b      	ldrb	r3, [r3, #0]
 8019eee:	2b1e      	cmp	r3, #30
 8019ef0:	d908      	bls.n	8019f04 <USBPD_DPM_CADCallback+0xb4>
          (void)OS_TASK_SUSPEND(DPM_PEThreadId_Table[PortNum]);
 8019ef2:	1dfb      	adds	r3, r7, #7
 8019ef4:	781a      	ldrb	r2, [r3, #0]
 8019ef6:	4b1e      	ldr	r3, [pc, #120]	; (8019f70 <USBPD_DPM_CADCallback+0x120>)
 8019ef8:	0092      	lsls	r2, r2, #2
 8019efa:	58d3      	ldr	r3, [r2, r3]
 8019efc:	0018      	movs	r0, r3
 8019efe:	f7fd f89d 	bl	801703c <osThreadSuspend>
          break;
 8019f02:	e00a      	b.n	8019f1a <USBPD_DPM_CADCallback+0xca>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8019f04:	1dfb      	adds	r3, r7, #7
 8019f06:	781a      	ldrb	r2, [r3, #0]
 8019f08:	4b19      	ldr	r3, [pc, #100]	; (8019f70 <USBPD_DPM_CADCallback+0x120>)
 8019f0a:	0092      	lsls	r2, r2, #2
 8019f0c:	58d3      	ldr	r3, [r2, r3]
 8019f0e:	0018      	movs	r0, r3
 8019f10:	f7fe f97e 	bl	8018210 <eTaskGetState>
 8019f14:	0003      	movs	r3, r0
 8019f16:	2b03      	cmp	r3, #3
 8019f18:	d1de      	bne.n	8019ed8 <USBPD_DPM_CADCallback+0x88>
      USBPD_PE_StateMachine_Stop(PortNum);
 8019f1a:	1dfb      	adds	r3, r7, #7
 8019f1c:	781b      	ldrb	r3, [r3, #0]
 8019f1e:	0018      	movs	r0, r3
 8019f20:	f7e6 fa9b 	bl	800045a <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8019f24:	1dfb      	adds	r3, r7, #7
 8019f26:	781a      	ldrb	r2, [r3, #0]
 8019f28:	4b12      	ldr	r3, [pc, #72]	; (8019f74 <USBPD_DPM_CADCallback+0x124>)
 8019f2a:	0092      	lsls	r2, r2, #2
 8019f2c:	5cd1      	ldrb	r1, [r2, r3]
 8019f2e:	2010      	movs	r0, #16
 8019f30:	4381      	bics	r1, r0
 8019f32:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8019f34:	1dfb      	adds	r3, r7, #7
 8019f36:	781b      	ldrb	r3, [r3, #0]
 8019f38:	4a0e      	ldr	r2, [pc, #56]	; (8019f74 <USBPD_DPM_CADCallback+0x124>)
 8019f3a:	009b      	lsls	r3, r3, #2
 8019f3c:	18d3      	adds	r3, r2, r3
 8019f3e:	785a      	ldrb	r2, [r3, #1]
 8019f40:	2107      	movs	r1, #7
 8019f42:	438a      	bics	r2, r1
 8019f44:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8019f46:	1dbb      	adds	r3, r7, #6
 8019f48:	781a      	ldrb	r2, [r3, #0]
 8019f4a:	1dfb      	adds	r3, r7, #7
 8019f4c:	781b      	ldrb	r3, [r3, #0]
 8019f4e:	0011      	movs	r1, r2
 8019f50:	0018      	movs	r0, r3
 8019f52:	f000 f90f 	bl	801a174 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 8019f56:	1dfb      	adds	r3, r7, #7
 8019f58:	781b      	ldrb	r3, [r3, #0]
 8019f5a:	2169      	movs	r1, #105	; 0x69
 8019f5c:	0018      	movs	r0, r3
 8019f5e:	f000 f96d 	bl	801a23c <USBPD_DPM_Notification>
      break;
 8019f62:	e000      	b.n	8019f66 <USBPD_DPM_CADCallback+0x116>
      break;
 8019f64:	46c0      	nop			; (mov r8, r8)
  }
}
 8019f66:	46c0      	nop			; (mov r8, r8)
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	b004      	add	sp, #16
 8019f6c:	bd80      	pop	{r7, pc}
 8019f6e:	46c0      	nop			; (mov r8, r8)
 8019f70:	20002ee0 	.word	0x20002ee0
 8019f74:	20002ef0 	.word	0x20002ef0

08019f78 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b082      	sub	sp, #8
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	0002      	movs	r2, r0
 8019f80:	1dfb      	adds	r3, r7, #7
 8019f82:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 8019f84:	1dfb      	adds	r3, r7, #7
 8019f86:	781b      	ldrb	r3, [r3, #0]
 8019f88:	0018      	movs	r0, r3
 8019f8a:	f7e6 fa60 	bl	800044e <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 8019f8e:	1dfb      	adds	r3, r7, #7
 8019f90:	781b      	ldrb	r3, [r3, #0]
 8019f92:	2b01      	cmp	r3, #1
 8019f94:	d808      	bhi.n	8019fa8 <DPM_StartPETask+0x30>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 8019f96:	1dfb      	adds	r3, r7, #7
 8019f98:	781a      	ldrb	r2, [r3, #0]
 8019f9a:	4b0a      	ldr	r3, [pc, #40]	; (8019fc4 <DPM_StartPETask+0x4c>)
 8019f9c:	0092      	lsls	r2, r2, #2
 8019f9e:	58d3      	ldr	r3, [r2, r3]
 8019fa0:	0018      	movs	r0, r3
 8019fa2:	f7fd f86d 	bl	8017080 <osThreadResume>
      break;
 8019fa6:	e002      	b.n	8019fae <DPM_StartPETask+0x36>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 8019fa8:	f000 f80e 	bl	8019fc8 <USBPD_DPM_ErrorHandler>
      break;
 8019fac:	46c0      	nop			; (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 8019fae:	1dfb      	adds	r3, r7, #7
 8019fb0:	781b      	ldrb	r3, [r3, #0]
 8019fb2:	2168      	movs	r1, #104	; 0x68
 8019fb4:	0018      	movs	r0, r3
 8019fb6:	f000 f941 	bl	801a23c <USBPD_DPM_Notification>
}
 8019fba:	46c0      	nop			; (mov r8, r8)
 8019fbc:	46bd      	mov	sp, r7
 8019fbe:	b002      	add	sp, #8
 8019fc0:	bd80      	pop	{r7, pc}
 8019fc2:	46c0      	nop			; (mov r8, r8)
 8019fc4:	20002ee0 	.word	0x20002ee0

08019fc8 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 8019fc8:	b580      	push	{r7, lr}
 8019fca:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 8019fcc:	e7fe      	b.n	8019fcc <USBPD_DPM_ErrorHandler+0x4>
	...

08019fd0 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b084      	sub	sp, #16
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	0002      	movs	r2, r0
 8019fd8:	1dfb      	adds	r3, r7, #7
 8019fda:	701a      	strb	r2, [r3, #0]
 8019fdc:	1dbb      	adds	r3, r7, #6
 8019fde:	1c0a      	adds	r2, r1, #0
 8019fe0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8019fe2:	230f      	movs	r3, #15
 8019fe4:	18fb      	adds	r3, r7, r3
 8019fe6:	2202      	movs	r2, #2
 8019fe8:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8019fea:	1dfb      	adds	r3, r7, #7
 8019fec:	781b      	ldrb	r3, [r3, #0]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d001      	beq.n	8019ff6 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 8019ff2:	2302      	movs	r3, #2
 8019ff4:	e024      	b.n	801a040 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8019ff6:	1dfb      	adds	r3, r7, #7
 8019ff8:	781b      	ldrb	r3, [r3, #0]
 8019ffa:	2208      	movs	r2, #8
 8019ffc:	18ba      	adds	r2, r7, r2
 8019ffe:	0011      	movs	r1, r2
 801a000:	0018      	movs	r0, r3
 801a002:	f001 fb5b 	bl	801b6bc <BSP_USBPD_PWR_VBUSGetVoltage>

  if (USBPD_VSAFE_0V == Vsafe)
 801a006:	1dbb      	adds	r3, r7, #6
 801a008:	781b      	ldrb	r3, [r3, #0]
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d10a      	bne.n	801a024 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	4a0d      	ldr	r2, [pc, #52]	; (801a048 <USBPD_PWR_IF_SupplyReady+0x78>)
 801a012:	4293      	cmp	r3, r2
 801a014:	d801      	bhi.n	801a01a <USBPD_PWR_IF_SupplyReady+0x4a>
 801a016:	2200      	movs	r2, #0
 801a018:	e000      	b.n	801a01c <USBPD_PWR_IF_SupplyReady+0x4c>
 801a01a:	2202      	movs	r2, #2
 801a01c:	230f      	movs	r3, #15
 801a01e:	18fb      	adds	r3, r7, r3
 801a020:	701a      	strb	r2, [r3, #0]
 801a022:	e00a      	b.n	801a03a <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801a024:	68ba      	ldr	r2, [r7, #8]
 801a026:	23af      	movs	r3, #175	; 0xaf
 801a028:	011b      	lsls	r3, r3, #4
 801a02a:	429a      	cmp	r2, r3
 801a02c:	d901      	bls.n	801a032 <USBPD_PWR_IF_SupplyReady+0x62>
 801a02e:	2200      	movs	r2, #0
 801a030:	e000      	b.n	801a034 <USBPD_PWR_IF_SupplyReady+0x64>
 801a032:	2202      	movs	r2, #2
 801a034:	230f      	movs	r3, #15
 801a036:	18fb      	adds	r3, r7, r3
 801a038:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801a03a:	230f      	movs	r3, #15
 801a03c:	18fb      	adds	r3, r7, r3
 801a03e:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 801a040:	0018      	movs	r0, r3
 801a042:	46bd      	mov	sp, r7
 801a044:	b004      	add	sp, #16
 801a046:	bd80      	pop	{r7, pc}
 801a048:	000002ed 	.word	0x000002ed

0801a04c <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b084      	sub	sp, #16
 801a050:	af00      	add	r7, sp, #0
 801a052:	60ba      	str	r2, [r7, #8]
 801a054:	607b      	str	r3, [r7, #4]
 801a056:	230f      	movs	r3, #15
 801a058:	18fb      	adds	r3, r7, r3
 801a05a:	1c02      	adds	r2, r0, #0
 801a05c:	701a      	strb	r2, [r3, #0]
 801a05e:	230e      	movs	r3, #14
 801a060:	18fb      	adds	r3, r7, r3
 801a062:	1c0a      	adds	r2, r1, #0
 801a064:	701a      	strb	r2, [r3, #0]
    {
      *Size = USBPD_NbPDO[0];
 801a066:	4b08      	ldr	r3, [pc, #32]	; (801a088 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 801a068:	781b      	ldrb	r3, [r3, #0]
 801a06a:	001a      	movs	r2, r3
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * USBPD_NbPDO[0]);
 801a070:	4b05      	ldr	r3, [pc, #20]	; (801a088 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 801a072:	781b      	ldrb	r3, [r3, #0]
 801a074:	009a      	lsls	r2, r3, #2
 801a076:	4905      	ldr	r1, [pc, #20]	; (801a08c <USBPD_PWR_IF_GetPortPDOs+0x40>)
 801a078:	68bb      	ldr	r3, [r7, #8]
 801a07a:	0018      	movs	r0, r3
 801a07c:	f008 fbc4 	bl	8022808 <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 801a080:	46c0      	nop			; (mov r8, r8)
 801a082:	46bd      	mov	sp, r7
 801a084:	b004      	add	sp, #16
 801a086:	bd80      	pop	{r7, pc}
 801a088:	2000016c 	.word	0x2000016c
 801a08c:	20000170 	.word	0x20000170

0801a090 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801a090:	b580      	push	{r7, lr}
 801a092:	b084      	sub	sp, #16
 801a094:	af00      	add	r7, sp, #0
 801a096:	0002      	movs	r2, r0
 801a098:	1dfb      	adds	r3, r7, #7
 801a09a:	701a      	strb	r2, [r3, #0]
 801a09c:	1dbb      	adds	r3, r7, #6
 801a09e:	1c0a      	adds	r2, r1, #0
 801a0a0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801a0a2:	230f      	movs	r3, #15
 801a0a4:	18fb      	adds	r3, r7, r3
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801a0aa:	1dfb      	adds	r3, r7, #7
 801a0ac:	781b      	ldrb	r3, [r3, #0]
 801a0ae:	0018      	movs	r0, r3
 801a0b0:	f7fa f94a 	bl	8014348 <HW_IF_PWR_GetVoltage>
 801a0b4:	0003      	movs	r3, r0
 801a0b6:	60bb      	str	r3, [r7, #8]

  _vbus = 5000;
 801a0b8:	4b1b      	ldr	r3, [pc, #108]	; (801a128 <USBPD_PWR_IF_GetVBUSStatus+0x98>)
 801a0ba:	60bb      	str	r3, [r7, #8]
  switch(PowerTypeStatus)
 801a0bc:	1dbb      	adds	r3, r7, #6
 801a0be:	781b      	ldrb	r3, [r3, #0]
 801a0c0:	2b02      	cmp	r3, #2
 801a0c2:	d018      	beq.n	801a0f6 <USBPD_PWR_IF_GetVBUSStatus+0x66>
 801a0c4:	dc21      	bgt.n	801a10a <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d002      	beq.n	801a0d0 <USBPD_PWR_IF_GetVBUSStatus+0x40>
 801a0ca:	2b01      	cmp	r3, #1
 801a0cc:	d009      	beq.n	801a0e2 <USBPD_PWR_IF_GetVBUSStatus+0x52>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801a0ce:	e01c      	b.n	801a10a <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801a0d0:	68bb      	ldr	r3, [r7, #8]
 801a0d2:	4a16      	ldr	r2, [pc, #88]	; (801a12c <USBPD_PWR_IF_GetVBUSStatus+0x9c>)
 801a0d4:	4293      	cmp	r3, r2
 801a0d6:	d81a      	bhi.n	801a10e <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 801a0d8:	230f      	movs	r3, #15
 801a0da:	18fb      	adds	r3, r7, r3
 801a0dc:	2201      	movs	r2, #1
 801a0de:	701a      	strb	r2, [r3, #0]
    break;
 801a0e0:	e015      	b.n	801a10e <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801a0e2:	68ba      	ldr	r2, [r7, #8]
 801a0e4:	23af      	movs	r3, #175	; 0xaf
 801a0e6:	011b      	lsls	r3, r3, #4
 801a0e8:	429a      	cmp	r2, r3
 801a0ea:	d312      	bcc.n	801a112 <USBPD_PWR_IF_GetVBUSStatus+0x82>
 801a0ec:	230f      	movs	r3, #15
 801a0ee:	18fb      	adds	r3, r7, r3
 801a0f0:	2201      	movs	r2, #1
 801a0f2:	701a      	strb	r2, [r3, #0]
    break;
 801a0f4:	e00d      	b.n	801a112 <USBPD_PWR_IF_GetVBUSStatus+0x82>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801a0f6:	68ba      	ldr	r2, [r7, #8]
 801a0f8:	23af      	movs	r3, #175	; 0xaf
 801a0fa:	011b      	lsls	r3, r3, #4
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	d20a      	bcs.n	801a116 <USBPD_PWR_IF_GetVBUSStatus+0x86>
 801a100:	230f      	movs	r3, #15
 801a102:	18fb      	adds	r3, r7, r3
 801a104:	2201      	movs	r2, #1
 801a106:	701a      	strb	r2, [r3, #0]
    break;
 801a108:	e005      	b.n	801a116 <USBPD_PWR_IF_GetVBUSStatus+0x86>
    break;
 801a10a:	46c0      	nop			; (mov r8, r8)
 801a10c:	e004      	b.n	801a118 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801a10e:	46c0      	nop			; (mov r8, r8)
 801a110:	e002      	b.n	801a118 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801a112:	46c0      	nop			; (mov r8, r8)
 801a114:	e000      	b.n	801a118 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801a116:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 801a118:	230f      	movs	r3, #15
 801a11a:	18fb      	adds	r3, r7, r3
 801a11c:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801a11e:	0018      	movs	r0, r3
 801a120:	46bd      	mov	sp, r7
 801a122:	b004      	add	sp, #16
 801a124:	bd80      	pop	{r7, pc}
 801a126:	46c0      	nop			; (mov r8, r8)
 801a128:	00001388 	.word	0x00001388
 801a12c:	000002ed 	.word	0x000002ed

0801a130 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 801a130:	b580      	push	{r7, lr}
 801a132:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  /* Demo initialisation */
  DEMO_Init();
 801a134:	f7ed f8fe 	bl	8007334 <DEMO_Init>
  {
	return USBPD_ERROR;
  }*/


  return USBPD_OK;
 801a138:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801a13a:	0018      	movs	r0, r3
 801a13c:	46bd      	mov	sp, r7
 801a13e:	bd80      	pop	{r7, pc}

0801a140 <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 801a140:	b580      	push	{r7, lr}
 801a142:	b084      	sub	sp, #16
 801a144:	af00      	add	r7, sp, #0
 801a146:	60f8      	str	r0, [r7, #12]
 801a148:	60b9      	str	r1, [r7, #8]
 801a14a:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 801a14c:	4b06      	ldr	r3, [pc, #24]	; (801a168 <USBPD_DPM_SetNotification_GUI+0x28>)
 801a14e:	68ba      	ldr	r2, [r7, #8]
 801a150:	601a      	str	r2, [r3, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 801a152:	4b06      	ldr	r3, [pc, #24]	; (801a16c <USBPD_DPM_SetNotification_GUI+0x2c>)
 801a154:	68fa      	ldr	r2, [r7, #12]
 801a156:	601a      	str	r2, [r3, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 801a158:	4b05      	ldr	r3, [pc, #20]	; (801a170 <USBPD_DPM_SetNotification_GUI+0x30>)
 801a15a:	687a      	ldr	r2, [r7, #4]
 801a15c:	601a      	str	r2, [r3, #0]
}
 801a15e:	46c0      	nop			; (mov r8, r8)
 801a160:	46bd      	mov	sp, r7
 801a162:	b004      	add	sp, #16
 801a164:	bd80      	pop	{r7, pc}
 801a166:	46c0      	nop			; (mov r8, r8)
 801a168:	20002ef4 	.word	0x20002ef4
 801a16c:	20002ef8 	.word	0x20002ef8
 801a170:	20002efc 	.word	0x20002efc

0801a174 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801a174:	b590      	push	{r4, r7, lr}
 801a176:	b093      	sub	sp, #76	; 0x4c
 801a178:	af02      	add	r7, sp, #8
 801a17a:	0002      	movs	r2, r0
 801a17c:	1dfb      	adds	r3, r7, #7
 801a17e:	701a      	strb	r2, [r3, #0]
 801a180:	1dbb      	adds	r3, r7, #6
 801a182:	1c0a      	adds	r2, r1, #0
 801a184:	701a      	strb	r2, [r3, #0]
  switch(State)
 801a186:	1dbb      	adds	r3, r7, #6
 801a188:	781b      	ldrb	r3, [r3, #0]
 801a18a:	2b02      	cmp	r3, #2
 801a18c:	d001      	beq.n	801a192 <USBPD_DPM_UserCableDetection+0x1e>
 801a18e:	2b04      	cmp	r3, #4
 801a190:	d10b      	bne.n	801a1aa <USBPD_DPM_UserCableDetection+0x36>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801a192:	4b22      	ldr	r3, [pc, #136]	; (801a21c <USBPD_DPM_UserCableDetection+0xa8>)
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d013      	beq.n	801a1c2 <USBPD_DPM_UserCableDetection+0x4e>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 801a19a:	4b20      	ldr	r3, [pc, #128]	; (801a21c <USBPD_DPM_UserCableDetection+0xa8>)
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	1dfa      	adds	r2, r7, #7
 801a1a0:	7810      	ldrb	r0, [r2, #0]
 801a1a2:	2200      	movs	r2, #0
 801a1a4:	2120      	movs	r1, #32
 801a1a6:	4798      	blx	r3
    }
    break;
 801a1a8:	e00b      	b.n	801a1c2 <USBPD_DPM_UserCableDetection+0x4e>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801a1aa:	4b1c      	ldr	r3, [pc, #112]	; (801a21c <USBPD_DPM_UserCableDetection+0xa8>)
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d008      	beq.n	801a1c4 <USBPD_DPM_UserCableDetection+0x50>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 801a1b2:	4b1a      	ldr	r3, [pc, #104]	; (801a21c <USBPD_DPM_UserCableDetection+0xa8>)
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	1dfa      	adds	r2, r7, #7
 801a1b8:	7810      	ldrb	r0, [r2, #0]
 801a1ba:	4919      	ldr	r1, [pc, #100]	; (801a220 <USBPD_DPM_UserCableDetection+0xac>)
 801a1bc:	2200      	movs	r2, #0
 801a1be:	4798      	blx	r3
 801a1c0:	e000      	b.n	801a1c4 <USBPD_DPM_UserCableDetection+0x50>
    break;
 801a1c2:	46c0      	nop			; (mov r8, r8)
    }
  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 801a1c4:	4a17      	ldr	r2, [pc, #92]	; (801a224 <USBPD_DPM_UserCableDetection+0xb0>)
 801a1c6:	240c      	movs	r4, #12
 801a1c8:	193b      	adds	r3, r7, r4
 801a1ca:	2132      	movs	r1, #50	; 0x32
 801a1cc:	0018      	movs	r0, r3
 801a1ce:	f008 fa13 	bl	80225f8 <sniprintf>
 801a1d2:	0002      	movs	r2, r0
 801a1d4:	213f      	movs	r1, #63	; 0x3f
 801a1d6:	187b      	adds	r3, r7, r1
 801a1d8:	701a      	strb	r2, [r3, #0]
 801a1da:	187b      	adds	r3, r7, r1
 801a1dc:	781b      	ldrb	r3, [r3, #0]
 801a1de:	2b31      	cmp	r3, #49	; 0x31
 801a1e0:	d80d      	bhi.n	801a1fe <USBPD_DPM_UserCableDetection+0x8a>
 801a1e2:	193b      	adds	r3, r7, r4
 801a1e4:	0018      	movs	r0, r3
 801a1e6:	f7eb fff1 	bl	80061cc <strlen>
 801a1ea:	193a      	adds	r2, r7, r4
 801a1ec:	1dfb      	adds	r3, r7, #7
 801a1ee:	7819      	ldrb	r1, [r3, #0]
 801a1f0:	9000      	str	r0, [sp, #0]
 801a1f2:	0013      	movs	r3, r2
 801a1f4:	2200      	movs	r2, #0
 801a1f6:	2006      	movs	r0, #6
 801a1f8:	f7f7 fc30 	bl	8011a5c <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801a1fc:	e00a      	b.n	801a214 <USBPD_DPM_UserCableDetection+0xa0>
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 801a1fe:	230c      	movs	r3, #12
 801a200:	18fa      	adds	r2, r7, r3
 801a202:	1dfb      	adds	r3, r7, #7
 801a204:	7819      	ldrb	r1, [r3, #0]
 801a206:	2332      	movs	r3, #50	; 0x32
 801a208:	9300      	str	r3, [sp, #0]
 801a20a:	0013      	movs	r3, r2
 801a20c:	2200      	movs	r2, #0
 801a20e:	2006      	movs	r0, #6
 801a210:	f7f7 fc24 	bl	8011a5c <USBPD_TRACE_Add>
}
 801a214:	46c0      	nop			; (mov r8, r8)
 801a216:	46bd      	mov	sp, r7
 801a218:	b011      	add	sp, #68	; 0x44
 801a21a:	bd90      	pop	{r4, r7, pc}
 801a21c:	20002ef8 	.word	0x20002ef8
 801a220:	00008020 	.word	0x00008020
 801a224:	080231ac 	.word	0x080231ac

0801a228 <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 801a228:	b580      	push	{r7, lr}
 801a22a:	b082      	sub	sp, #8
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	0002      	movs	r2, r0
 801a230:	1dfb      	adds	r3, r7, #7
 801a232:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 801a234:	46c0      	nop			; (mov r8, r8)
 801a236:	46bd      	mov	sp, r7
 801a238:	b002      	add	sp, #8
 801a23a:	bd80      	pop	{r7, pc}

0801a23c <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801a23c:	b590      	push	{r4, r7, lr}
 801a23e:	b093      	sub	sp, #76	; 0x4c
 801a240:	af02      	add	r7, sp, #8
 801a242:	0002      	movs	r2, r0
 801a244:	1dfb      	adds	r3, r7, #7
 801a246:	701a      	strb	r2, [r3, #0]
 801a248:	1dbb      	adds	r3, r7, #6
 801a24a:	1c0a      	adds	r2, r1, #0
 801a24c:	701a      	strb	r2, [r3, #0]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 801a24e:	4b2a      	ldr	r3, [pc, #168]	; (801a2f8 <USBPD_DPM_Notification+0xbc>)
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	2b00      	cmp	r3, #0
 801a254:	d008      	beq.n	801a268 <USBPD_DPM_Notification+0x2c>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 801a256:	4b28      	ldr	r3, [pc, #160]	; (801a2f8 <USBPD_DPM_Notification+0xbc>)
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	1dba      	adds	r2, r7, #6
 801a25c:	7812      	ldrb	r2, [r2, #0]
 801a25e:	b291      	uxth	r1, r2
 801a260:	1dfa      	adds	r2, r7, #7
 801a262:	7812      	ldrb	r2, [r2, #0]
 801a264:	0010      	movs	r0, r2
 801a266:	4798      	blx	r3
  }
/* USER CODE BEGIN USBPD_DPM_Notification */
  /* Manage event notified by the stack? */
  switch(EventVal)
 801a268:	1dbb      	adds	r3, r7, #6
 801a26a:	781b      	ldrb	r3, [r3, #0]
 801a26c:	2b10      	cmp	r3, #16
 801a26e:	d114      	bne.n	801a29a <USBPD_DPM_Notification+0x5e>
  {
    case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
    	char _str[50];
    	sprintf(_str,"POWER_EXPLICIT_CONTRACT notification as DPM notif");
 801a270:	4a22      	ldr	r2, [pc, #136]	; (801a2fc <USBPD_DPM_Notification+0xc0>)
 801a272:	240c      	movs	r4, #12
 801a274:	193b      	adds	r3, r7, r4
 801a276:	0011      	movs	r1, r2
 801a278:	0018      	movs	r0, r3
 801a27a:	f008 f9f1 	bl	8022660 <siprintf>
    	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t*)_str, strlen(_str));
 801a27e:	193b      	adds	r3, r7, r4
 801a280:	0018      	movs	r0, r3
 801a282:	f7eb ffa3 	bl	80061cc <strlen>
 801a286:	193a      	adds	r2, r7, r4
 801a288:	1dfb      	adds	r3, r7, #7
 801a28a:	7819      	ldrb	r1, [r3, #0]
 801a28c:	9000      	str	r0, [sp, #0]
 801a28e:	0013      	movs	r3, r2
 801a290:	2200      	movs	r2, #0
 801a292:	2006      	movs	r0, #6
 801a294:	f7f7 fbe2 	bl	8011a5c <USBPD_TRACE_Add>
      break;
 801a298:	e029      	b.n	801a2ee <USBPD_DPM_Notification+0xb2>
//    case USBPD_NOTIFY_DATAROLESWAP_DFP :
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801a29a:	1dbb      	adds	r3, r7, #6
 801a29c:	781b      	ldrb	r3, [r3, #0]
 801a29e:	4a18      	ldr	r2, [pc, #96]	; (801a300 <USBPD_DPM_Notification+0xc4>)
 801a2a0:	240c      	movs	r4, #12
 801a2a2:	1938      	adds	r0, r7, r4
 801a2a4:	2132      	movs	r1, #50	; 0x32
 801a2a6:	f008 f9a7 	bl	80225f8 <sniprintf>
 801a2aa:	0002      	movs	r2, r0
 801a2ac:	213f      	movs	r1, #63	; 0x3f
 801a2ae:	187b      	adds	r3, r7, r1
 801a2b0:	701a      	strb	r2, [r3, #0]
 801a2b2:	187b      	adds	r3, r7, r1
 801a2b4:	781b      	ldrb	r3, [r3, #0]
 801a2b6:	2b31      	cmp	r3, #49	; 0x31
 801a2b8:	d80d      	bhi.n	801a2d6 <USBPD_DPM_Notification+0x9a>
 801a2ba:	193b      	adds	r3, r7, r4
 801a2bc:	0018      	movs	r0, r3
 801a2be:	f7eb ff85 	bl	80061cc <strlen>
 801a2c2:	193a      	adds	r2, r7, r4
 801a2c4:	1dfb      	adds	r3, r7, #7
 801a2c6:	7819      	ldrb	r1, [r3, #0]
 801a2c8:	9000      	str	r0, [sp, #0]
 801a2ca:	0013      	movs	r3, r2
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	2006      	movs	r0, #6
 801a2d0:	f7f7 fbc4 	bl	8011a5c <USBPD_TRACE_Add>
      break;
 801a2d4:	e00a      	b.n	801a2ec <USBPD_DPM_Notification+0xb0>
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801a2d6:	230c      	movs	r3, #12
 801a2d8:	18fa      	adds	r2, r7, r3
 801a2da:	1dfb      	adds	r3, r7, #7
 801a2dc:	7819      	ldrb	r1, [r3, #0]
 801a2de:	2332      	movs	r3, #50	; 0x32
 801a2e0:	9300      	str	r3, [sp, #0]
 801a2e2:	0013      	movs	r3, r2
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	2006      	movs	r0, #6
 801a2e8:	f7f7 fbb8 	bl	8011a5c <USBPD_TRACE_Add>
      break;
 801a2ec:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801a2ee:	46c0      	nop			; (mov r8, r8)
 801a2f0:	46bd      	mov	sp, r7
 801a2f2:	b011      	add	sp, #68	; 0x44
 801a2f4:	bd90      	pop	{r4, r7, pc}
 801a2f6:	46c0      	nop			; (mov r8, r8)
 801a2f8:	20002ef4 	.word	0x20002ef4
 801a2fc:	080231d8 	.word	0x080231d8
 801a300:	0802320c 	.word	0x0802320c

0801a304 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801a304:	b590      	push	{r4, r7, lr}
 801a306:	b093      	sub	sp, #76	; 0x4c
 801a308:	af02      	add	r7, sp, #8
 801a30a:	6039      	str	r1, [r7, #0]
 801a30c:	0011      	movs	r1, r2
 801a30e:	1dfb      	adds	r3, r7, #7
 801a310:	1c02      	adds	r2, r0, #0
 801a312:	701a      	strb	r2, [r3, #0]
 801a314:	1dbb      	adds	r3, r7, #6
 801a316:	1c0a      	adds	r2, r1, #0
 801a318:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 801a31a:	4a16      	ldr	r2, [pc, #88]	; (801a374 <USBPD_DPM_HardReset+0x70>)
 801a31c:	240c      	movs	r4, #12
 801a31e:	193b      	adds	r3, r7, r4
 801a320:	2132      	movs	r1, #50	; 0x32
 801a322:	0018      	movs	r0, r3
 801a324:	f008 f968 	bl	80225f8 <sniprintf>
 801a328:	0002      	movs	r2, r0
 801a32a:	213f      	movs	r1, #63	; 0x3f
 801a32c:	187b      	adds	r3, r7, r1
 801a32e:	701a      	strb	r2, [r3, #0]
 801a330:	187b      	adds	r3, r7, r1
 801a332:	781b      	ldrb	r3, [r3, #0]
 801a334:	2b31      	cmp	r3, #49	; 0x31
 801a336:	d80d      	bhi.n	801a354 <USBPD_DPM_HardReset+0x50>
 801a338:	193b      	adds	r3, r7, r4
 801a33a:	0018      	movs	r0, r3
 801a33c:	f7eb ff46 	bl	80061cc <strlen>
 801a340:	193a      	adds	r2, r7, r4
 801a342:	1dfb      	adds	r3, r7, #7
 801a344:	7819      	ldrb	r1, [r3, #0]
 801a346:	9000      	str	r0, [sp, #0]
 801a348:	0013      	movs	r3, r2
 801a34a:	2200      	movs	r2, #0
 801a34c:	2006      	movs	r0, #6
 801a34e:	f7f7 fb85 	bl	8011a5c <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_HardReset */
}
 801a352:	e00a      	b.n	801a36a <USBPD_DPM_HardReset+0x66>
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 801a354:	230c      	movs	r3, #12
 801a356:	18fa      	adds	r2, r7, r3
 801a358:	1dfb      	adds	r3, r7, #7
 801a35a:	7819      	ldrb	r1, [r3, #0]
 801a35c:	2332      	movs	r3, #50	; 0x32
 801a35e:	9300      	str	r3, [sp, #0]
 801a360:	0013      	movs	r3, r2
 801a362:	2200      	movs	r2, #0
 801a364:	2006      	movs	r0, #6
 801a366:	f7f7 fb79 	bl	8011a5c <USBPD_TRACE_Add>
}
 801a36a:	46c0      	nop			; (mov r8, r8)
 801a36c:	46bd      	mov	sp, r7
 801a36e:	b011      	add	sp, #68	; 0x44
 801a370:	bd90      	pop	{r4, r7, pc}
 801a372:	46c0      	nop			; (mov r8, r8)
 801a374:	08023230 	.word	0x08023230

0801a378 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801a378:	b590      	push	{r4, r7, lr}
 801a37a:	b097      	sub	sp, #92	; 0x5c
 801a37c:	af02      	add	r7, sp, #8
 801a37e:	60ba      	str	r2, [r7, #8]
 801a380:	607b      	str	r3, [r7, #4]
 801a382:	230f      	movs	r3, #15
 801a384:	18fb      	adds	r3, r7, r3
 801a386:	1c02      	adds	r2, r0, #0
 801a388:	701a      	strb	r2, [r3, #0]
 801a38a:	200e      	movs	r0, #14
 801a38c:	183b      	adds	r3, r7, r0
 801a38e:	1c0a      	adds	r2, r1, #0
 801a390:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801a392:	183b      	adds	r3, r7, r0
 801a394:	781b      	ldrb	r3, [r3, #0]
 801a396:	2b01      	cmp	r3, #1
 801a398:	d002      	beq.n	801a3a0 <USBPD_DPM_GetDataInfo+0x28>
 801a39a:	2b0a      	cmp	r3, #10
 801a39c:	d011      	beq.n	801a3c2 <USBPD_DPM_GetDataInfo+0x4a>
 801a39e:	e01e      	b.n	801a3de <USBPD_DPM_GetDataInfo+0x66>
  {

  case USBPD_CORE_DATATYPE_SNK_PDO: /*!< Handling of port Sink PDO, requested by get sink capa*/
  USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 801a3a0:	687c      	ldr	r4, [r7, #4]
 801a3a2:	68ba      	ldr	r2, [r7, #8]
 801a3a4:	230e      	movs	r3, #14
 801a3a6:	18fb      	adds	r3, r7, r3
 801a3a8:	7819      	ldrb	r1, [r3, #0]
 801a3aa:	230f      	movs	r3, #15
 801a3ac:	18fb      	adds	r3, r7, r3
 801a3ae:	7818      	ldrb	r0, [r3, #0]
 801a3b0:	0023      	movs	r3, r4
 801a3b2:	f7ff fe4b 	bl	801a04c <USBPD_PWR_IF_GetPortPDOs>
  *Size *= 4;
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	009a      	lsls	r2, r3, #2
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	601a      	str	r2, [r3, #0]
  break;
 801a3c0:	e03a      	b.n	801a438 <USBPD_DPM_GetDataInfo+0xc0>

  case USBPD_CORE_PPS_STATUS :
	  {
		/* Get current drawn by sink */
		USBPD_PPSSDB_TypeDef pps_status = {0};
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	64bb      	str	r3, [r7, #72]	; 0x48
		/*
		pps_status.fields.OutputVoltageIn20mVunits  = 0xFFFF;
		pps_status.fields.OutputCurrentIn50mAunits  = 0xFF;
		pps_status.fields.RealTimeFlags             = USBPD_PPS_REALTIMEFLAGS_PTF_NOT_SUPPORTED | USBPD_PPS_REALTIMEFLAGS_OMF_DISABLED;*/

		*Size = 4;
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	2204      	movs	r2, #4
 801a3ca:	601a      	str	r2, [r3, #0]
		(void)memcpy((uint8_t*)Ptr, (uint8_t *)&pps_status.d32, *Size);
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681a      	ldr	r2, [r3, #0]
 801a3d0:	2348      	movs	r3, #72	; 0x48
 801a3d2:	18f9      	adds	r1, r7, r3
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	0018      	movs	r0, r3
 801a3d8:	f008 fa16 	bl	8022808 <memcpy>
	  }
	  break;
 801a3dc:	e02c      	b.n	801a438 <USBPD_DPM_GetDataInfo+0xc0>
//  case USBPD_CORE_BATTERY_STATUS:             /*!< Retrieve of Battery status message content          */
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 801a3de:	230e      	movs	r3, #14
 801a3e0:	18fb      	adds	r3, r7, r3
 801a3e2:	781b      	ldrb	r3, [r3, #0]
 801a3e4:	4a16      	ldr	r2, [pc, #88]	; (801a440 <USBPD_DPM_GetDataInfo+0xc8>)
 801a3e6:	2414      	movs	r4, #20
 801a3e8:	1938      	adds	r0, r7, r4
 801a3ea:	2132      	movs	r1, #50	; 0x32
 801a3ec:	f008 f904 	bl	80225f8 <sniprintf>
 801a3f0:	0002      	movs	r2, r0
 801a3f2:	214f      	movs	r1, #79	; 0x4f
 801a3f4:	187b      	adds	r3, r7, r1
 801a3f6:	701a      	strb	r2, [r3, #0]
 801a3f8:	187b      	adds	r3, r7, r1
 801a3fa:	781b      	ldrb	r3, [r3, #0]
 801a3fc:	2b31      	cmp	r3, #49	; 0x31
 801a3fe:	d80e      	bhi.n	801a41e <USBPD_DPM_GetDataInfo+0xa6>
 801a400:	193b      	adds	r3, r7, r4
 801a402:	0018      	movs	r0, r3
 801a404:	f7eb fee2 	bl	80061cc <strlen>
 801a408:	193a      	adds	r2, r7, r4
 801a40a:	230f      	movs	r3, #15
 801a40c:	18fb      	adds	r3, r7, r3
 801a40e:	7819      	ldrb	r1, [r3, #0]
 801a410:	9000      	str	r0, [sp, #0]
 801a412:	0013      	movs	r3, r2
 801a414:	2200      	movs	r2, #0
 801a416:	2006      	movs	r0, #6
 801a418:	f7f7 fb20 	bl	8011a5c <USBPD_TRACE_Add>
    break;
 801a41c:	e00b      	b.n	801a436 <USBPD_DPM_GetDataInfo+0xbe>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 801a41e:	2314      	movs	r3, #20
 801a420:	18fa      	adds	r2, r7, r3
 801a422:	230f      	movs	r3, #15
 801a424:	18fb      	adds	r3, r7, r3
 801a426:	7819      	ldrb	r1, [r3, #0]
 801a428:	2332      	movs	r3, #50	; 0x32
 801a42a:	9300      	str	r3, [sp, #0]
 801a42c:	0013      	movs	r3, r2
 801a42e:	2200      	movs	r2, #0
 801a430:	2006      	movs	r0, #6
 801a432:	f7f7 fb13 	bl	8011a5c <USBPD_TRACE_Add>
    break;
 801a436:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801a438:	46c0      	nop			; (mov r8, r8)
 801a43a:	46bd      	mov	sp, r7
 801a43c:	b015      	add	sp, #84	; 0x54
 801a43e:	bd90      	pop	{r4, r7, pc}
 801a440:	08023254 	.word	0x08023254

0801a444 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801a444:	b5b0      	push	{r4, r5, r7, lr}
 801a446:	b094      	sub	sp, #80	; 0x50
 801a448:	af02      	add	r7, sp, #8
 801a44a:	60ba      	str	r2, [r7, #8]
 801a44c:	607b      	str	r3, [r7, #4]
 801a44e:	230f      	movs	r3, #15
 801a450:	18fb      	adds	r3, r7, r3
 801a452:	1c02      	adds	r2, r0, #0
 801a454:	701a      	strb	r2, [r3, #0]
 801a456:	200e      	movs	r0, #14
 801a458:	183b      	adds	r3, r7, r0
 801a45a:	1c0a      	adds	r2, r1, #0
 801a45c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801a45e:	183b      	adds	r3, r7, r0
 801a460:	781b      	ldrb	r3, [r3, #0]
 801a462:	2b04      	cmp	r3, #4
 801a464:	d002      	beq.n	801a46c <USBPD_DPM_SetDataInfo+0x28>
 801a466:	2b0a      	cmp	r3, #10
 801a468:	d009      	beq.n	801a47e <USBPD_DPM_SetDataInfo+0x3a>
 801a46a:	e01b      	b.n	801a4a4 <USBPD_DPM_SetDataInfo+0x60>
  {
  /* Case Received Source PDO values Data information :*/
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO:         /*!< Storage of Received Source PDO values        */
       USBPD_USER_SERV_StoreSRCPDO(PortNum, Ptr, Size);
 801a46c:	687a      	ldr	r2, [r7, #4]
 801a46e:	68b9      	ldr	r1, [r7, #8]
 801a470:	230f      	movs	r3, #15
 801a472:	18fb      	adds	r3, r7, r3
 801a474:	781b      	ldrb	r3, [r3, #0]
 801a476:	0018      	movs	r0, r3
 801a478:	f001 f9ea 	bl	801b850 <USBPD_USER_SERV_StoreSRCPDO>
       break;
 801a47c:	e03f      	b.n	801a4fe <USBPD_DPM_SetDataInfo+0xba>

    case USBPD_CORE_PPS_STATUS :
	  {
		uint8_t*  ext_capa;
		ext_capa = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvPPSStatus;
 801a47e:	230f      	movs	r3, #15
 801a480:	18fb      	adds	r3, r7, r3
 801a482:	781a      	ldrb	r2, [r3, #0]
 801a484:	0013      	movs	r3, r2
 801a486:	009b      	lsls	r3, r3, #2
 801a488:	189b      	adds	r3, r3, r2
 801a48a:	011b      	lsls	r3, r3, #4
 801a48c:	3320      	adds	r3, #32
 801a48e:	001a      	movs	r2, r3
 801a490:	4b25      	ldr	r3, [pc, #148]	; (801a528 <USBPD_DPM_SetDataInfo+0xe4>)
 801a492:	18d3      	adds	r3, r2, r3
 801a494:	647b      	str	r3, [r7, #68]	; 0x44
		memcpy(ext_capa, Ptr, Size);
 801a496:	687a      	ldr	r2, [r7, #4]
 801a498:	68b9      	ldr	r1, [r7, #8]
 801a49a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a49c:	0018      	movs	r0, r3
 801a49e:	f008 f9b3 	bl	8022808 <memcpy>
	  }
	  break;
 801a4a2:	e02c      	b.n	801a4fe <USBPD_DPM_SetDataInfo+0xba>
//  case USBPD_CORE_GET_BATTERY_CAPABILITY:     /*!< Storing of received Get Battery capability message content*/
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801a4a4:	230e      	movs	r3, #14
 801a4a6:	18fb      	adds	r3, r7, r3
 801a4a8:	781b      	ldrb	r3, [r3, #0]
 801a4aa:	4a20      	ldr	r2, [pc, #128]	; (801a52c <USBPD_DPM_SetDataInfo+0xe8>)
 801a4ac:	2410      	movs	r4, #16
 801a4ae:	1938      	adds	r0, r7, r4
 801a4b0:	2132      	movs	r1, #50	; 0x32
 801a4b2:	f008 f8a1 	bl	80225f8 <sniprintf>
 801a4b6:	0002      	movs	r2, r0
 801a4b8:	2143      	movs	r1, #67	; 0x43
 801a4ba:	187b      	adds	r3, r7, r1
 801a4bc:	701a      	strb	r2, [r3, #0]
 801a4be:	187b      	adds	r3, r7, r1
 801a4c0:	781b      	ldrb	r3, [r3, #0]
 801a4c2:	2b31      	cmp	r3, #49	; 0x31
 801a4c4:	d80e      	bhi.n	801a4e4 <USBPD_DPM_SetDataInfo+0xa0>
 801a4c6:	193b      	adds	r3, r7, r4
 801a4c8:	0018      	movs	r0, r3
 801a4ca:	f7eb fe7f 	bl	80061cc <strlen>
 801a4ce:	193a      	adds	r2, r7, r4
 801a4d0:	230f      	movs	r3, #15
 801a4d2:	18fb      	adds	r3, r7, r3
 801a4d4:	7819      	ldrb	r1, [r3, #0]
 801a4d6:	9000      	str	r0, [sp, #0]
 801a4d8:	0013      	movs	r3, r2
 801a4da:	2200      	movs	r2, #0
 801a4dc:	2006      	movs	r0, #6
 801a4de:	f7f7 fabd 	bl	8011a5c <USBPD_TRACE_Add>
    break;
 801a4e2:	e00b      	b.n	801a4fc <USBPD_DPM_SetDataInfo+0xb8>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801a4e4:	2310      	movs	r3, #16
 801a4e6:	18fa      	adds	r2, r7, r3
 801a4e8:	230f      	movs	r3, #15
 801a4ea:	18fb      	adds	r3, r7, r3
 801a4ec:	7819      	ldrb	r1, [r3, #0]
 801a4ee:	2332      	movs	r3, #50	; 0x32
 801a4f0:	9300      	str	r3, [sp, #0]
 801a4f2:	0013      	movs	r3, r2
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	2006      	movs	r0, #6
 801a4f8:	f7f7 fab0 	bl	8011a5c <USBPD_TRACE_Add>
    break;
 801a4fc:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 801a4fe:	4b0c      	ldr	r3, [pc, #48]	; (801a530 <USBPD_DPM_SetDataInfo+0xec>)
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d00b      	beq.n	801a51e <USBPD_DPM_SetDataInfo+0xda>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 801a506:	4b0a      	ldr	r3, [pc, #40]	; (801a530 <USBPD_DPM_SetDataInfo+0xec>)
 801a508:	681c      	ldr	r4, [r3, #0]
 801a50a:	687d      	ldr	r5, [r7, #4]
 801a50c:	68ba      	ldr	r2, [r7, #8]
 801a50e:	230e      	movs	r3, #14
 801a510:	18fb      	adds	r3, r7, r3
 801a512:	7819      	ldrb	r1, [r3, #0]
 801a514:	230f      	movs	r3, #15
 801a516:	18fb      	adds	r3, r7, r3
 801a518:	7818      	ldrb	r0, [r3, #0]
 801a51a:	002b      	movs	r3, r5
 801a51c:	47a0      	blx	r4
  }
}
 801a51e:	46c0      	nop			; (mov r8, r8)
 801a520:	46bd      	mov	sp, r7
 801a522:	b012      	add	sp, #72	; 0x48
 801a524:	bdb0      	pop	{r4, r5, r7, pc}
 801a526:	46c0      	nop			; (mov r8, r8)
 801a528:	20002f04 	.word	0x20002f04
 801a52c:	0802327c 	.word	0x0802327c
 801a530:	20002efc 	.word	0x20002efc

0801a534 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801a534:	b590      	push	{r4, r7, lr}
 801a536:	b085      	sub	sp, #20
 801a538:	af00      	add	r7, sp, #0
 801a53a:	60b9      	str	r1, [r7, #8]
 801a53c:	607a      	str	r2, [r7, #4]
 801a53e:	240f      	movs	r4, #15
 801a540:	193b      	adds	r3, r7, r4
 801a542:	1c02      	adds	r2, r0, #0
 801a544:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */

	/* Variable PDO*/
	USBPD_USER_SERV_EvaluateCapa(PortNum, PtrRequestData, PtrPowerObjectType);
 801a546:	687a      	ldr	r2, [r7, #4]
 801a548:	68b9      	ldr	r1, [r7, #8]
 801a54a:	193b      	adds	r3, r7, r4
 801a54c:	781b      	ldrb	r3, [r3, #0]
 801a54e:	0018      	movs	r0, r3
 801a550:	f001 f9be 	bl	801b8d0 <USBPD_USER_SERV_EvaluateCapa>
	*PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
	*PtrRequestData = rdo.d32;*/


/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801a554:	46c0      	nop			; (mov r8, r8)
 801a556:	46bd      	mov	sp, r7
 801a558:	b005      	add	sp, #20
 801a55a:	bd90      	pop	{r4, r7, pc}

0801a55c <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801a55c:	b590      	push	{r4, r7, lr}
 801a55e:	b083      	sub	sp, #12
 801a560:	af00      	add	r7, sp, #0
 801a562:	0004      	movs	r4, r0
 801a564:	0008      	movs	r0, r1
 801a566:	603a      	str	r2, [r7, #0]
 801a568:	0019      	movs	r1, r3
 801a56a:	1dfb      	adds	r3, r7, #7
 801a56c:	1c22      	adds	r2, r4, #0
 801a56e:	701a      	strb	r2, [r3, #0]
 801a570:	1dbb      	adds	r3, r7, #6
 801a572:	1c02      	adds	r2, r0, #0
 801a574:	701a      	strb	r2, [r3, #0]
 801a576:	1d3b      	adds	r3, r7, #4
 801a578:	1c0a      	adds	r2, r1, #0
 801a57a:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801a57c:	46c0      	nop			; (mov r8, r8)
 801a57e:	46bd      	mov	sp, r7
 801a580:	b003      	add	sp, #12
 801a582:	bd90      	pop	{r4, r7, pc}

0801a584 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801a584:	b580      	push	{r7, lr}
 801a586:	b082      	sub	sp, #8
 801a588:	af00      	add	r7, sp, #0
 801a58a:	0002      	movs	r2, r0
 801a58c:	1dfb      	adds	r3, r7, #7
 801a58e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801a590:	1dfb      	adds	r3, r7, #7
 801a592:	781b      	ldrb	r3, [r3, #0]
 801a594:	0018      	movs	r0, r3
 801a596:	f7e5 fe81 	bl	800029c <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801a59a:	46c0      	nop			; (mov r8, r8)
 801a59c:	46bd      	mov	sp, r7
 801a59e:	b002      	add	sp, #8
 801a5a0:	bd80      	pop	{r7, pc}
	...

0801a5a4 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b084      	sub	sp, #16
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	0002      	movs	r2, r0
 801a5ac:	1dfb      	adds	r3, r7, #7
 801a5ae:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801a5b0:	230f      	movs	r3, #15
 801a5b2:	18fb      	adds	r3, r7, r3
 801a5b4:	220c      	movs	r2, #12
 801a5b6:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801a5b8:	1dfb      	adds	r3, r7, #7
 801a5ba:	781a      	ldrb	r2, [r3, #0]
 801a5bc:	4b2c      	ldr	r3, [pc, #176]	; (801a670 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801a5be:	2174      	movs	r1, #116	; 0x74
 801a5c0:	434a      	muls	r2, r1
 801a5c2:	5cd3      	ldrb	r3, [r2, r3]
 801a5c4:	07db      	lsls	r3, r3, #31
 801a5c6:	0fdb      	lsrs	r3, r3, #31
 801a5c8:	b2db      	uxtb	r3, r3
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d015      	beq.n	801a5fa <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801a5ce:	1dfb      	adds	r3, r7, #7
 801a5d0:	781a      	ldrb	r2, [r3, #0]
 801a5d2:	4b27      	ldr	r3, [pc, #156]	; (801a670 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801a5d4:	2174      	movs	r1, #116	; 0x74
 801a5d6:	434a      	muls	r2, r1
 801a5d8:	5cd3      	ldrb	r3, [r2, r3]
 801a5da:	075b      	lsls	r3, r3, #29
 801a5dc:	0fdb      	lsrs	r3, r3, #31
 801a5de:	b2db      	uxtb	r3, r3
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d10f      	bne.n	801a604 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801a5e4:	1dfb      	adds	r3, r7, #7
 801a5e6:	781a      	ldrb	r2, [r3, #0]
 801a5e8:	4b21      	ldr	r3, [pc, #132]	; (801a670 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801a5ea:	2174      	movs	r1, #116	; 0x74
 801a5ec:	434a      	muls	r2, r1
 801a5ee:	5cd3      	ldrb	r3, [r2, r3]
 801a5f0:	071b      	lsls	r3, r3, #28
 801a5f2:	0fdb      	lsrs	r3, r3, #31
 801a5f4:	b2db      	uxtb	r3, r3
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d104      	bne.n	801a604 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 801a5fa:	230f      	movs	r3, #15
 801a5fc:	18fb      	adds	r3, r7, r3
 801a5fe:	2201      	movs	r2, #1
 801a600:	701a      	strb	r2, [r3, #0]
 801a602:	e02d      	b.n	801a660 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801a604:	1dfb      	adds	r3, r7, #7
 801a606:	781a      	ldrb	r2, [r3, #0]
 801a608:	4b19      	ldr	r3, [pc, #100]	; (801a670 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801a60a:	2174      	movs	r1, #116	; 0x74
 801a60c:	434a      	muls	r2, r1
 801a60e:	5cd3      	ldrb	r3, [r2, r3]
 801a610:	075b      	lsls	r3, r3, #29
 801a612:	0fdb      	lsrs	r3, r3, #31
 801a614:	b2db      	uxtb	r3, r3
 801a616:	2b01      	cmp	r3, #1
 801a618:	d109      	bne.n	801a62e <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 801a61a:	1dfb      	adds	r3, r7, #7
 801a61c:	781a      	ldrb	r2, [r3, #0]
 801a61e:	4b15      	ldr	r3, [pc, #84]	; (801a674 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801a620:	0092      	lsls	r2, r2, #2
 801a622:	5cd3      	ldrb	r3, [r2, r3]
 801a624:	071b      	lsls	r3, r3, #28
 801a626:	0fdb      	lsrs	r3, r3, #31
 801a628:	b2db      	uxtb	r3, r3
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d014      	beq.n	801a658 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801a62e:	1dfb      	adds	r3, r7, #7
 801a630:	781a      	ldrb	r2, [r3, #0]
 801a632:	4b0f      	ldr	r3, [pc, #60]	; (801a670 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801a634:	2174      	movs	r1, #116	; 0x74
 801a636:	434a      	muls	r2, r1
 801a638:	5cd3      	ldrb	r3, [r2, r3]
 801a63a:	071b      	lsls	r3, r3, #28
 801a63c:	0fdb      	lsrs	r3, r3, #31
 801a63e:	b2db      	uxtb	r3, r3
 801a640:	2b01      	cmp	r3, #1
 801a642:	d10d      	bne.n	801a660 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 801a644:	1dfb      	adds	r3, r7, #7
 801a646:	781a      	ldrb	r2, [r3, #0]
 801a648:	4b0a      	ldr	r3, [pc, #40]	; (801a674 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801a64a:	0092      	lsls	r2, r2, #2
 801a64c:	5cd3      	ldrb	r3, [r2, r3]
 801a64e:	071b      	lsls	r3, r3, #28
 801a650:	0fdb      	lsrs	r3, r3, #31
 801a652:	b2db      	uxtb	r3, r3
 801a654:	2b01      	cmp	r3, #1
 801a656:	d103      	bne.n	801a660 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 801a658:	230f      	movs	r3, #15
 801a65a:	18fb      	adds	r3, r7, r3
 801a65c:	220a      	movs	r2, #10
 801a65e:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 801a660:	230f      	movs	r3, #15
 801a662:	18fb      	adds	r3, r7, r3
 801a664:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801a666:	0018      	movs	r0, r3
 801a668:	46bd      	mov	sp, r7
 801a66a:	b004      	add	sp, #16
 801a66c:	bd80      	pop	{r7, pc}
 801a66e:	46c0      	nop			; (mov r8, r8)
 801a670:	200000f8 	.word	0x200000f8
 801a674:	20002ef0 	.word	0x20002ef0

0801a678 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b082      	sub	sp, #8
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	0002      	movs	r2, r0
 801a680:	1dfb      	adds	r3, r7, #7
 801a682:	701a      	strb	r2, [r3, #0]
 801a684:	1dbb      	adds	r3, r7, #6
 801a686:	1c0a      	adds	r2, r1, #0
 801a688:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801a68a:	1dbb      	adds	r3, r7, #6
 801a68c:	781a      	ldrb	r2, [r3, #0]
 801a68e:	1dfb      	adds	r3, r7, #7
 801a690:	781b      	ldrb	r3, [r3, #0]
 801a692:	0011      	movs	r1, r2
 801a694:	0018      	movs	r0, r3
 801a696:	f7ff fc9b 	bl	8019fd0 <USBPD_PWR_IF_SupplyReady>
 801a69a:	0003      	movs	r3, r0
 801a69c:	425a      	negs	r2, r3
 801a69e:	4153      	adcs	r3, r2
 801a6a0:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801a6a2:	0018      	movs	r0, r3
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	b002      	add	sp, #8
 801a6a8:	bd80      	pop	{r7, pc}
	...

0801a6ac <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 801a6ac:	b5b0      	push	{r4, r5, r7, lr}
 801a6ae:	b092      	sub	sp, #72	; 0x48
 801a6b0:	af02      	add	r7, sp, #8
 801a6b2:	0002      	movs	r2, r0
 801a6b4:	1dfb      	adds	r3, r7, #7
 801a6b6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 801a6b8:	253f      	movs	r5, #63	; 0x3f
 801a6ba:	197c      	adds	r4, r7, r5
 801a6bc:	1dfb      	adds	r3, r7, #7
 801a6be:	781b      	ldrb	r3, [r3, #0]
 801a6c0:	0018      	movs	r0, r3
 801a6c2:	f7e5 fef9 	bl	80004b8 <USBPD_PE_Request_HardReset>
 801a6c6:	0003      	movs	r3, r0
 801a6c8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 801a6ca:	197b      	adds	r3, r7, r5
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d027      	beq.n	801a722 <USBPD_DPM_RequestHardReset+0x76>
 801a6d2:	4a17      	ldr	r2, [pc, #92]	; (801a730 <USBPD_DPM_RequestHardReset+0x84>)
 801a6d4:	240c      	movs	r4, #12
 801a6d6:	193b      	adds	r3, r7, r4
 801a6d8:	2132      	movs	r1, #50	; 0x32
 801a6da:	0018      	movs	r0, r3
 801a6dc:	f007 ff8c 	bl	80225f8 <sniprintf>
 801a6e0:	0002      	movs	r2, r0
 801a6e2:	213e      	movs	r1, #62	; 0x3e
 801a6e4:	187b      	adds	r3, r7, r1
 801a6e6:	701a      	strb	r2, [r3, #0]
 801a6e8:	187b      	adds	r3, r7, r1
 801a6ea:	781b      	ldrb	r3, [r3, #0]
 801a6ec:	2b31      	cmp	r3, #49	; 0x31
 801a6ee:	d80d      	bhi.n	801a70c <USBPD_DPM_RequestHardReset+0x60>
 801a6f0:	193b      	adds	r3, r7, r4
 801a6f2:	0018      	movs	r0, r3
 801a6f4:	f7eb fd6a 	bl	80061cc <strlen>
 801a6f8:	193a      	adds	r2, r7, r4
 801a6fa:	1dfb      	adds	r3, r7, #7
 801a6fc:	7819      	ldrb	r1, [r3, #0]
 801a6fe:	9000      	str	r0, [sp, #0]
 801a700:	0013      	movs	r3, r2
 801a702:	2200      	movs	r2, #0
 801a704:	2006      	movs	r0, #6
 801a706:	f7f7 f9a9 	bl	8011a5c <USBPD_TRACE_Add>
 801a70a:	e00a      	b.n	801a722 <USBPD_DPM_RequestHardReset+0x76>
 801a70c:	230c      	movs	r3, #12
 801a70e:	18fa      	adds	r2, r7, r3
 801a710:	1dfb      	adds	r3, r7, #7
 801a712:	7819      	ldrb	r1, [r3, #0]
 801a714:	2332      	movs	r3, #50	; 0x32
 801a716:	9300      	str	r3, [sp, #0]
 801a718:	0013      	movs	r3, r2
 801a71a:	2200      	movs	r2, #0
 801a71c:	2006      	movs	r0, #6
 801a71e:	f7f7 f99d 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801a722:	233f      	movs	r3, #63	; 0x3f
 801a724:	18fb      	adds	r3, r7, r3
 801a726:	781b      	ldrb	r3, [r3, #0]
}
 801a728:	0018      	movs	r0, r3
 801a72a:	46bd      	mov	sp, r7
 801a72c:	b010      	add	sp, #64	; 0x40
 801a72e:	bdb0      	pop	{r4, r5, r7, pc}
 801a730:	080232a4 	.word	0x080232a4

0801a734 <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 801a734:	b5b0      	push	{r4, r5, r7, lr}
 801a736:	b092      	sub	sp, #72	; 0x48
 801a738:	af02      	add	r7, sp, #8
 801a73a:	0002      	movs	r2, r0
 801a73c:	1dfb      	adds	r3, r7, #7
 801a73e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 801a740:	253f      	movs	r5, #63	; 0x3f
 801a742:	197c      	adds	r4, r7, r5
 801a744:	1dfb      	adds	r3, r7, #7
 801a746:	781b      	ldrb	r3, [r3, #0]
 801a748:	0018      	movs	r0, r3
 801a74a:	f7e5 fec1 	bl	80004d0 <USBPD_PE_Request_CableReset>
 801a74e:	0003      	movs	r3, r0
 801a750:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 801a752:	197b      	adds	r3, r7, r5
 801a754:	781b      	ldrb	r3, [r3, #0]
 801a756:	2b00      	cmp	r3, #0
 801a758:	d027      	beq.n	801a7aa <USBPD_DPM_RequestCableReset+0x76>
 801a75a:	4a17      	ldr	r2, [pc, #92]	; (801a7b8 <USBPD_DPM_RequestCableReset+0x84>)
 801a75c:	240c      	movs	r4, #12
 801a75e:	193b      	adds	r3, r7, r4
 801a760:	2132      	movs	r1, #50	; 0x32
 801a762:	0018      	movs	r0, r3
 801a764:	f007 ff48 	bl	80225f8 <sniprintf>
 801a768:	0002      	movs	r2, r0
 801a76a:	213e      	movs	r1, #62	; 0x3e
 801a76c:	187b      	adds	r3, r7, r1
 801a76e:	701a      	strb	r2, [r3, #0]
 801a770:	187b      	adds	r3, r7, r1
 801a772:	781b      	ldrb	r3, [r3, #0]
 801a774:	2b31      	cmp	r3, #49	; 0x31
 801a776:	d80d      	bhi.n	801a794 <USBPD_DPM_RequestCableReset+0x60>
 801a778:	193b      	adds	r3, r7, r4
 801a77a:	0018      	movs	r0, r3
 801a77c:	f7eb fd26 	bl	80061cc <strlen>
 801a780:	193a      	adds	r2, r7, r4
 801a782:	1dfb      	adds	r3, r7, #7
 801a784:	7819      	ldrb	r1, [r3, #0]
 801a786:	9000      	str	r0, [sp, #0]
 801a788:	0013      	movs	r3, r2
 801a78a:	2200      	movs	r2, #0
 801a78c:	2006      	movs	r0, #6
 801a78e:	f7f7 f965 	bl	8011a5c <USBPD_TRACE_Add>
 801a792:	e00a      	b.n	801a7aa <USBPD_DPM_RequestCableReset+0x76>
 801a794:	230c      	movs	r3, #12
 801a796:	18fa      	adds	r2, r7, r3
 801a798:	1dfb      	adds	r3, r7, #7
 801a79a:	7819      	ldrb	r1, [r3, #0]
 801a79c:	2332      	movs	r3, #50	; 0x32
 801a79e:	9300      	str	r3, [sp, #0]
 801a7a0:	0013      	movs	r3, r2
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	2006      	movs	r0, #6
 801a7a6:	f7f7 f959 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801a7aa:	233f      	movs	r3, #63	; 0x3f
 801a7ac:	18fb      	adds	r3, r7, r3
 801a7ae:	781b      	ldrb	r3, [r3, #0]
}
 801a7b0:	0018      	movs	r0, r3
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	b010      	add	sp, #64	; 0x40
 801a7b6:	bdb0      	pop	{r4, r5, r7, pc}
 801a7b8:	080232cc 	.word	0x080232cc

0801a7bc <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 801a7bc:	b5b0      	push	{r4, r5, r7, lr}
 801a7be:	b092      	sub	sp, #72	; 0x48
 801a7c0:	af02      	add	r7, sp, #8
 801a7c2:	0002      	movs	r2, r0
 801a7c4:	1dfb      	adds	r3, r7, #7
 801a7c6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 801a7c8:	253f      	movs	r5, #63	; 0x3f
 801a7ca:	197c      	adds	r4, r7, r5
 801a7cc:	1dfb      	adds	r3, r7, #7
 801a7ce:	781b      	ldrb	r3, [r3, #0]
 801a7d0:	2200      	movs	r2, #0
 801a7d2:	2102      	movs	r1, #2
 801a7d4:	0018      	movs	r0, r3
 801a7d6:	f7e5 fe95 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801a7da:	0003      	movs	r3, r0
 801a7dc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 801a7de:	197b      	adds	r3, r7, r5
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d027      	beq.n	801a836 <USBPD_DPM_RequestGotoMin+0x7a>
 801a7e6:	4a17      	ldr	r2, [pc, #92]	; (801a844 <USBPD_DPM_RequestGotoMin+0x88>)
 801a7e8:	240c      	movs	r4, #12
 801a7ea:	193b      	adds	r3, r7, r4
 801a7ec:	2132      	movs	r1, #50	; 0x32
 801a7ee:	0018      	movs	r0, r3
 801a7f0:	f007 ff02 	bl	80225f8 <sniprintf>
 801a7f4:	0002      	movs	r2, r0
 801a7f6:	213e      	movs	r1, #62	; 0x3e
 801a7f8:	187b      	adds	r3, r7, r1
 801a7fa:	701a      	strb	r2, [r3, #0]
 801a7fc:	187b      	adds	r3, r7, r1
 801a7fe:	781b      	ldrb	r3, [r3, #0]
 801a800:	2b31      	cmp	r3, #49	; 0x31
 801a802:	d80d      	bhi.n	801a820 <USBPD_DPM_RequestGotoMin+0x64>
 801a804:	193b      	adds	r3, r7, r4
 801a806:	0018      	movs	r0, r3
 801a808:	f7eb fce0 	bl	80061cc <strlen>
 801a80c:	193a      	adds	r2, r7, r4
 801a80e:	1dfb      	adds	r3, r7, #7
 801a810:	7819      	ldrb	r1, [r3, #0]
 801a812:	9000      	str	r0, [sp, #0]
 801a814:	0013      	movs	r3, r2
 801a816:	2200      	movs	r2, #0
 801a818:	2006      	movs	r0, #6
 801a81a:	f7f7 f91f 	bl	8011a5c <USBPD_TRACE_Add>
 801a81e:	e00a      	b.n	801a836 <USBPD_DPM_RequestGotoMin+0x7a>
 801a820:	230c      	movs	r3, #12
 801a822:	18fa      	adds	r2, r7, r3
 801a824:	1dfb      	adds	r3, r7, #7
 801a826:	7819      	ldrb	r1, [r3, #0]
 801a828:	2332      	movs	r3, #50	; 0x32
 801a82a:	9300      	str	r3, [sp, #0]
 801a82c:	0013      	movs	r3, r2
 801a82e:	2200      	movs	r2, #0
 801a830:	2006      	movs	r0, #6
 801a832:	f7f7 f913 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801a836:	233f      	movs	r3, #63	; 0x3f
 801a838:	18fb      	adds	r3, r7, r3
 801a83a:	781b      	ldrb	r3, [r3, #0]
}
 801a83c:	0018      	movs	r0, r3
 801a83e:	46bd      	mov	sp, r7
 801a840:	b010      	add	sp, #64	; 0x40
 801a842:	bdb0      	pop	{r4, r5, r7, pc}
 801a844:	080232f4 	.word	0x080232f4

0801a848 <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 801a848:	b5b0      	push	{r4, r5, r7, lr}
 801a84a:	b092      	sub	sp, #72	; 0x48
 801a84c:	af02      	add	r7, sp, #8
 801a84e:	0002      	movs	r2, r0
 801a850:	1dfb      	adds	r3, r7, #7
 801a852:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 801a854:	253f      	movs	r5, #63	; 0x3f
 801a856:	197c      	adds	r4, r7, r5
 801a858:	1dfb      	adds	r3, r7, #7
 801a85a:	781b      	ldrb	r3, [r3, #0]
 801a85c:	2200      	movs	r2, #0
 801a85e:	2105      	movs	r1, #5
 801a860:	0018      	movs	r0, r3
 801a862:	f7e5 fe4f 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801a866:	0003      	movs	r3, r0
 801a868:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 801a86a:	197b      	adds	r3, r7, r5
 801a86c:	781b      	ldrb	r3, [r3, #0]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d027      	beq.n	801a8c2 <USBPD_DPM_RequestPing+0x7a>
 801a872:	4a17      	ldr	r2, [pc, #92]	; (801a8d0 <USBPD_DPM_RequestPing+0x88>)
 801a874:	240c      	movs	r4, #12
 801a876:	193b      	adds	r3, r7, r4
 801a878:	2132      	movs	r1, #50	; 0x32
 801a87a:	0018      	movs	r0, r3
 801a87c:	f007 febc 	bl	80225f8 <sniprintf>
 801a880:	0002      	movs	r2, r0
 801a882:	213e      	movs	r1, #62	; 0x3e
 801a884:	187b      	adds	r3, r7, r1
 801a886:	701a      	strb	r2, [r3, #0]
 801a888:	187b      	adds	r3, r7, r1
 801a88a:	781b      	ldrb	r3, [r3, #0]
 801a88c:	2b31      	cmp	r3, #49	; 0x31
 801a88e:	d80d      	bhi.n	801a8ac <USBPD_DPM_RequestPing+0x64>
 801a890:	193b      	adds	r3, r7, r4
 801a892:	0018      	movs	r0, r3
 801a894:	f7eb fc9a 	bl	80061cc <strlen>
 801a898:	193a      	adds	r2, r7, r4
 801a89a:	1dfb      	adds	r3, r7, #7
 801a89c:	7819      	ldrb	r1, [r3, #0]
 801a89e:	9000      	str	r0, [sp, #0]
 801a8a0:	0013      	movs	r3, r2
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	2006      	movs	r0, #6
 801a8a6:	f7f7 f8d9 	bl	8011a5c <USBPD_TRACE_Add>
 801a8aa:	e00a      	b.n	801a8c2 <USBPD_DPM_RequestPing+0x7a>
 801a8ac:	230c      	movs	r3, #12
 801a8ae:	18fa      	adds	r2, r7, r3
 801a8b0:	1dfb      	adds	r3, r7, #7
 801a8b2:	7819      	ldrb	r1, [r3, #0]
 801a8b4:	2332      	movs	r3, #50	; 0x32
 801a8b6:	9300      	str	r3, [sp, #0]
 801a8b8:	0013      	movs	r3, r2
 801a8ba:	2200      	movs	r2, #0
 801a8bc:	2006      	movs	r0, #6
 801a8be:	f7f7 f8cd 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801a8c2:	233f      	movs	r3, #63	; 0x3f
 801a8c4:	18fb      	adds	r3, r7, r3
 801a8c6:	781b      	ldrb	r3, [r3, #0]
}
 801a8c8:	0018      	movs	r0, r3
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	b010      	add	sp, #64	; 0x40
 801a8ce:	bdb0      	pop	{r4, r5, r7, pc}
 801a8d0:	08023318 	.word	0x08023318

0801a8d4 <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 801a8d4:	b5b0      	push	{r4, r5, r7, lr}
 801a8d6:	b09e      	sub	sp, #120	; 0x78
 801a8d8:	af02      	add	r7, sp, #8
 801a8da:	0004      	movs	r4, r0
 801a8dc:	0008      	movs	r0, r1
 801a8de:	0011      	movs	r1, r2
 801a8e0:	1dfb      	adds	r3, r7, #7
 801a8e2:	1c22      	adds	r2, r4, #0
 801a8e4:	701a      	strb	r2, [r3, #0]
 801a8e6:	1dbb      	adds	r3, r7, #6
 801a8e8:	1c02      	adds	r2, r0, #0
 801a8ea:	701a      	strb	r2, [r3, #0]
 801a8ec:	1d3b      	adds	r3, r7, #4
 801a8ee:	1c0a      	adds	r2, r1, #0
 801a8f0:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801a8f2:	256f      	movs	r5, #111	; 0x6f
 801a8f4:	197b      	adds	r3, r7, r5
 801a8f6:	2202      	movs	r2, #2
 801a8f8:	701a      	strb	r2, [r3, #0]
  //source: https://community.st.com/t5/stm32-mcus-other-solutions/message-rejected-for-this-port-configuration-on-the-stm32-x-cube/td-p/86358
    uint32_t voltage, allowablepower;
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_PDO_TypeDef  pdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801a8fa:	1dfb      	adds	r3, r7, #7
 801a8fc:	781b      	ldrb	r3, [r3, #0]
 801a8fe:	2274      	movs	r2, #116	; 0x74
 801a900:	435a      	muls	r2, r3
 801a902:	4b52      	ldr	r3, [pc, #328]	; (801aa4c <USBPD_DPM_RequestMessageRequest+0x178>)
 801a904:	18d3      	adds	r3, r2, r3
 801a906:	66bb      	str	r3, [r7, #104]	; 0x68
	USBPD_DPM_SNKPowerRequestDetailsTypeDef request_details;
	rdo.d32 = 0;
 801a908:	2300      	movs	r3, #0
 801a90a:	65bb      	str	r3, [r7, #88]	; 0x58

	/* selected SRC PDO */
	pdo.d32 = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[(IndexSrcPDO - 1)];
 801a90c:	1dfb      	adds	r3, r7, #7
 801a90e:	781a      	ldrb	r2, [r3, #0]
 801a910:	1dbb      	adds	r3, r7, #6
 801a912:	781b      	ldrb	r3, [r3, #0]
 801a914:	1e58      	subs	r0, r3, #1
 801a916:	494e      	ldr	r1, [pc, #312]	; (801aa50 <USBPD_DPM_RequestMessageRequest+0x17c>)
 801a918:	0013      	movs	r3, r2
 801a91a:	009b      	lsls	r3, r3, #2
 801a91c:	189b      	adds	r3, r3, r2
 801a91e:	009b      	lsls	r3, r3, #2
 801a920:	181b      	adds	r3, r3, r0
 801a922:	009b      	lsls	r3, r3, #2
 801a924:	585b      	ldr	r3, [r3, r1]
 801a926:	657b      	str	r3, [r7, #84]	; 0x54
	voltage = RequestedVoltage;
 801a928:	1d3b      	adds	r3, r7, #4
 801a92a:	881b      	ldrh	r3, [r3, #0]
 801a92c:	663b      	str	r3, [r7, #96]	; 0x60
	allowablepower = (puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits * RequestedVoltage) / 1000U;
 801a92e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a930:	685b      	ldr	r3, [r3, #4]
 801a932:	1d3a      	adds	r2, r7, #4
 801a934:	8812      	ldrh	r2, [r2, #0]
 801a936:	4353      	muls	r3, r2
 801a938:	22fa      	movs	r2, #250	; 0xfa
 801a93a:	0091      	lsls	r1, r2, #2
 801a93c:	0018      	movs	r0, r3
 801a93e:	f7eb fc57 	bl	80061f0 <__udivsi3>
 801a942:	0003      	movs	r3, r0
 801a944:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 801a946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a948:	235c      	movs	r3, #92	; 0x5c
 801a94a:	18fc      	adds	r4, r7, r3
 801a94c:	2360      	movs	r3, #96	; 0x60
 801a94e:	18fa      	adds	r2, r7, r3
 801a950:	1dfb      	adds	r3, r7, #7
 801a952:	7818      	ldrb	r0, [r3, #0]
 801a954:	0023      	movs	r3, r4
 801a956:	f001 f8a3 	bl	801baa0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 801a95a:	0003      	movs	r3, r0
 801a95c:	2b01      	cmp	r3, #1
 801a95e:	d141      	bne.n	801a9e4 <USBPD_DPM_RequestMessageRequest+0x110>
	{
	  /* Check that voltage has been correctly selected */
	  if (RequestedVoltage == voltage)
 801a960:	1d3b      	adds	r3, r7, #4
 801a962:	881a      	ldrh	r2, [r3, #0]
 801a964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a966:	429a      	cmp	r2, r3
 801a968:	d13c      	bne.n	801a9e4 <USBPD_DPM_RequestMessageRequest+0x110>
	  {
		request_details.RequestedVoltageInmVunits    = RequestedVoltage;
 801a96a:	1d3b      	adds	r3, r7, #4
 801a96c:	881a      	ldrh	r2, [r3, #0]
 801a96e:	243c      	movs	r4, #60	; 0x3c
 801a970:	193b      	adds	r3, r7, r4
 801a972:	601a      	str	r2, [r3, #0]
		request_details.OperatingCurrentInmAunits    = (1000U * allowablepower)/RequestedVoltage;
 801a974:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a976:	0013      	movs	r3, r2
 801a978:	015b      	lsls	r3, r3, #5
 801a97a:	1a9b      	subs	r3, r3, r2
 801a97c:	009b      	lsls	r3, r3, #2
 801a97e:	189b      	adds	r3, r3, r2
 801a980:	00db      	lsls	r3, r3, #3
 801a982:	001a      	movs	r2, r3
 801a984:	1d3b      	adds	r3, r7, #4
 801a986:	881b      	ldrh	r3, [r3, #0]
 801a988:	0019      	movs	r1, r3
 801a98a:	0010      	movs	r0, r2
 801a98c:	f7eb fc30 	bl	80061f0 <__udivsi3>
 801a990:	0003      	movs	r3, r0
 801a992:	001a      	movs	r2, r3
 801a994:	0020      	movs	r0, r4
 801a996:	183b      	adds	r3, r7, r0
 801a998:	609a      	str	r2, [r3, #8]
		request_details.MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801a99a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a99c:	685a      	ldr	r2, [r3, #4]
 801a99e:	183b      	adds	r3, r7, r0
 801a9a0:	605a      	str	r2, [r3, #4]
		request_details.MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 801a9a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a9a4:	699a      	ldr	r2, [r3, #24]
 801a9a6:	183b      	adds	r3, r7, r0
 801a9a8:	60da      	str	r2, [r3, #12]
		request_details.OperatingPowerInmWunits      = puser->DPM_SNKRequestedPower.OperatingPowerInmWunits;
 801a9aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a9ac:	695a      	ldr	r2, [r3, #20]
 801a9ae:	183b      	adds	r3, r7, r0
 801a9b0:	611a      	str	r2, [r3, #16]

		USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, (IndexSrcPDO - 1), &request_details, &rdo, &pdo_object);
 801a9b2:	1dbb      	adds	r3, r7, #6
 801a9b4:	781b      	ldrb	r3, [r3, #0]
 801a9b6:	3b01      	subs	r3, #1
 801a9b8:	b2d9      	uxtb	r1, r3
 801a9ba:	2358      	movs	r3, #88	; 0x58
 801a9bc:	18fc      	adds	r4, r7, r3
 801a9be:	183a      	adds	r2, r7, r0
 801a9c0:	1dfb      	adds	r3, r7, #7
 801a9c2:	7818      	ldrb	r0, [r3, #0]
 801a9c4:	2350      	movs	r3, #80	; 0x50
 801a9c6:	18fb      	adds	r3, r7, r3
 801a9c8:	9300      	str	r3, [sp, #0]
 801a9ca:	0023      	movs	r3, r4
 801a9cc:	f001 fafc 	bl	801bfc8 <USER_SERV_SNK_BuildRDOfromSelectedPDO>

		_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 801a9d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801a9d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a9d4:	197c      	adds	r4, r7, r5
 801a9d6:	1dfb      	adds	r3, r7, #7
 801a9d8:	781b      	ldrb	r3, [r3, #0]
 801a9da:	0018      	movs	r0, r3
 801a9dc:	f7e5 fe94 	bl	8000708 <USBPD_PE_Send_Request>
 801a9e0:	0003      	movs	r3, r0
 801a9e2:	7023      	strb	r3, [r4, #0]
	  }
	}

/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 801a9e4:	236f      	movs	r3, #111	; 0x6f
 801a9e6:	18fb      	adds	r3, r7, r3
 801a9e8:	781b      	ldrb	r3, [r3, #0]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d027      	beq.n	801aa3e <USBPD_DPM_RequestMessageRequest+0x16a>
 801a9ee:	4a19      	ldr	r2, [pc, #100]	; (801aa54 <USBPD_DPM_RequestMessageRequest+0x180>)
 801a9f0:	2408      	movs	r4, #8
 801a9f2:	193b      	adds	r3, r7, r4
 801a9f4:	2132      	movs	r1, #50	; 0x32
 801a9f6:	0018      	movs	r0, r3
 801a9f8:	f007 fdfe 	bl	80225f8 <sniprintf>
 801a9fc:	0002      	movs	r2, r0
 801a9fe:	2167      	movs	r1, #103	; 0x67
 801aa00:	187b      	adds	r3, r7, r1
 801aa02:	701a      	strb	r2, [r3, #0]
 801aa04:	187b      	adds	r3, r7, r1
 801aa06:	781b      	ldrb	r3, [r3, #0]
 801aa08:	2b31      	cmp	r3, #49	; 0x31
 801aa0a:	d80d      	bhi.n	801aa28 <USBPD_DPM_RequestMessageRequest+0x154>
 801aa0c:	193b      	adds	r3, r7, r4
 801aa0e:	0018      	movs	r0, r3
 801aa10:	f7eb fbdc 	bl	80061cc <strlen>
 801aa14:	193a      	adds	r2, r7, r4
 801aa16:	1dfb      	adds	r3, r7, #7
 801aa18:	7819      	ldrb	r1, [r3, #0]
 801aa1a:	9000      	str	r0, [sp, #0]
 801aa1c:	0013      	movs	r3, r2
 801aa1e:	2200      	movs	r2, #0
 801aa20:	2006      	movs	r0, #6
 801aa22:	f7f7 f81b 	bl	8011a5c <USBPD_TRACE_Add>
 801aa26:	e00a      	b.n	801aa3e <USBPD_DPM_RequestMessageRequest+0x16a>
 801aa28:	2308      	movs	r3, #8
 801aa2a:	18fa      	adds	r2, r7, r3
 801aa2c:	1dfb      	adds	r3, r7, #7
 801aa2e:	7819      	ldrb	r1, [r3, #0]
 801aa30:	2332      	movs	r3, #50	; 0x32
 801aa32:	9300      	str	r3, [sp, #0]
 801aa34:	0013      	movs	r3, r2
 801aa36:	2200      	movs	r2, #0
 801aa38:	2006      	movs	r0, #6
 801aa3a:	f7f7 f80f 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801aa3e:	236f      	movs	r3, #111	; 0x6f
 801aa40:	18fb      	adds	r3, r7, r3
 801aa42:	781b      	ldrb	r3, [r3, #0]
}
 801aa44:	0018      	movs	r0, r3
 801aa46:	46bd      	mov	sp, r7
 801aa48:	b01c      	add	sp, #112	; 0x70
 801aa4a:	bdb0      	pop	{r4, r5, r7, pc}
 801aa4c:	200000f8 	.word	0x200000f8
 801aa50:	20002f04 	.word	0x20002f04
 801aa54:	08023338 	.word	0x08023338

0801aa58 <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 801aa58:	b5b0      	push	{r4, r5, r7, lr}
 801aa5a:	b092      	sub	sp, #72	; 0x48
 801aa5c:	af02      	add	r7, sp, #8
 801aa5e:	0002      	movs	r2, r0
 801aa60:	1dfb      	adds	r3, r7, #7
 801aa62:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 801aa64:	253f      	movs	r5, #63	; 0x3f
 801aa66:	197c      	adds	r4, r7, r5
 801aa68:	1dfb      	adds	r3, r7, #7
 801aa6a:	781b      	ldrb	r3, [r3, #0]
 801aa6c:	2200      	movs	r2, #0
 801aa6e:	2107      	movs	r1, #7
 801aa70:	0018      	movs	r0, r3
 801aa72:	f7e5 fd47 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801aa76:	0003      	movs	r3, r0
 801aa78:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 801aa7a:	197b      	adds	r3, r7, r5
 801aa7c:	781b      	ldrb	r3, [r3, #0]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d027      	beq.n	801aad2 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 801aa82:	4a17      	ldr	r2, [pc, #92]	; (801aae0 <USBPD_DPM_RequestGetSourceCapability+0x88>)
 801aa84:	240c      	movs	r4, #12
 801aa86:	193b      	adds	r3, r7, r4
 801aa88:	2132      	movs	r1, #50	; 0x32
 801aa8a:	0018      	movs	r0, r3
 801aa8c:	f007 fdb4 	bl	80225f8 <sniprintf>
 801aa90:	0002      	movs	r2, r0
 801aa92:	213e      	movs	r1, #62	; 0x3e
 801aa94:	187b      	adds	r3, r7, r1
 801aa96:	701a      	strb	r2, [r3, #0]
 801aa98:	187b      	adds	r3, r7, r1
 801aa9a:	781b      	ldrb	r3, [r3, #0]
 801aa9c:	2b31      	cmp	r3, #49	; 0x31
 801aa9e:	d80d      	bhi.n	801aabc <USBPD_DPM_RequestGetSourceCapability+0x64>
 801aaa0:	193b      	adds	r3, r7, r4
 801aaa2:	0018      	movs	r0, r3
 801aaa4:	f7eb fb92 	bl	80061cc <strlen>
 801aaa8:	193a      	adds	r2, r7, r4
 801aaaa:	1dfb      	adds	r3, r7, #7
 801aaac:	7819      	ldrb	r1, [r3, #0]
 801aaae:	9000      	str	r0, [sp, #0]
 801aab0:	0013      	movs	r3, r2
 801aab2:	2200      	movs	r2, #0
 801aab4:	2006      	movs	r0, #6
 801aab6:	f7f6 ffd1 	bl	8011a5c <USBPD_TRACE_Add>
 801aaba:	e00a      	b.n	801aad2 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 801aabc:	230c      	movs	r3, #12
 801aabe:	18fa      	adds	r2, r7, r3
 801aac0:	1dfb      	adds	r3, r7, #7
 801aac2:	7819      	ldrb	r1, [r3, #0]
 801aac4:	2332      	movs	r3, #50	; 0x32
 801aac6:	9300      	str	r3, [sp, #0]
 801aac8:	0013      	movs	r3, r2
 801aaca:	2200      	movs	r2, #0
 801aacc:	2006      	movs	r0, #6
 801aace:	f7f6 ffc5 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801aad2:	233f      	movs	r3, #63	; 0x3f
 801aad4:	18fb      	adds	r3, r7, r3
 801aad6:	781b      	ldrb	r3, [r3, #0]
}
 801aad8:	0018      	movs	r0, r3
 801aada:	46bd      	mov	sp, r7
 801aadc:	b010      	add	sp, #64	; 0x40
 801aade:	bdb0      	pop	{r4, r5, r7, pc}
 801aae0:	0802335c 	.word	0x0802335c

0801aae4 <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 801aae4:	b5b0      	push	{r4, r5, r7, lr}
 801aae6:	b092      	sub	sp, #72	; 0x48
 801aae8:	af02      	add	r7, sp, #8
 801aaea:	0002      	movs	r2, r0
 801aaec:	1dfb      	adds	r3, r7, #7
 801aaee:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 801aaf0:	253f      	movs	r5, #63	; 0x3f
 801aaf2:	197c      	adds	r4, r7, r5
 801aaf4:	1dfb      	adds	r3, r7, #7
 801aaf6:	781b      	ldrb	r3, [r3, #0]
 801aaf8:	2200      	movs	r2, #0
 801aafa:	2108      	movs	r1, #8
 801aafc:	0018      	movs	r0, r3
 801aafe:	f7e5 fd01 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ab02:	0003      	movs	r3, r0
 801ab04:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 801ab06:	197b      	adds	r3, r7, r5
 801ab08:	781b      	ldrb	r3, [r3, #0]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d027      	beq.n	801ab5e <USBPD_DPM_RequestGetSinkCapability+0x7a>
 801ab0e:	4a17      	ldr	r2, [pc, #92]	; (801ab6c <USBPD_DPM_RequestGetSinkCapability+0x88>)
 801ab10:	240c      	movs	r4, #12
 801ab12:	193b      	adds	r3, r7, r4
 801ab14:	2132      	movs	r1, #50	; 0x32
 801ab16:	0018      	movs	r0, r3
 801ab18:	f007 fd6e 	bl	80225f8 <sniprintf>
 801ab1c:	0002      	movs	r2, r0
 801ab1e:	213e      	movs	r1, #62	; 0x3e
 801ab20:	187b      	adds	r3, r7, r1
 801ab22:	701a      	strb	r2, [r3, #0]
 801ab24:	187b      	adds	r3, r7, r1
 801ab26:	781b      	ldrb	r3, [r3, #0]
 801ab28:	2b31      	cmp	r3, #49	; 0x31
 801ab2a:	d80d      	bhi.n	801ab48 <USBPD_DPM_RequestGetSinkCapability+0x64>
 801ab2c:	193b      	adds	r3, r7, r4
 801ab2e:	0018      	movs	r0, r3
 801ab30:	f7eb fb4c 	bl	80061cc <strlen>
 801ab34:	193a      	adds	r2, r7, r4
 801ab36:	1dfb      	adds	r3, r7, #7
 801ab38:	7819      	ldrb	r1, [r3, #0]
 801ab3a:	9000      	str	r0, [sp, #0]
 801ab3c:	0013      	movs	r3, r2
 801ab3e:	2200      	movs	r2, #0
 801ab40:	2006      	movs	r0, #6
 801ab42:	f7f6 ff8b 	bl	8011a5c <USBPD_TRACE_Add>
 801ab46:	e00a      	b.n	801ab5e <USBPD_DPM_RequestGetSinkCapability+0x7a>
 801ab48:	230c      	movs	r3, #12
 801ab4a:	18fa      	adds	r2, r7, r3
 801ab4c:	1dfb      	adds	r3, r7, #7
 801ab4e:	7819      	ldrb	r1, [r3, #0]
 801ab50:	2332      	movs	r3, #50	; 0x32
 801ab52:	9300      	str	r3, [sp, #0]
 801ab54:	0013      	movs	r3, r2
 801ab56:	2200      	movs	r2, #0
 801ab58:	2006      	movs	r0, #6
 801ab5a:	f7f6 ff7f 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801ab5e:	233f      	movs	r3, #63	; 0x3f
 801ab60:	18fb      	adds	r3, r7, r3
 801ab62:	781b      	ldrb	r3, [r3, #0]
}
 801ab64:	0018      	movs	r0, r3
 801ab66:	46bd      	mov	sp, r7
 801ab68:	b010      	add	sp, #64	; 0x40
 801ab6a:	bdb0      	pop	{r4, r5, r7, pc}
 801ab6c:	08023384 	.word	0x08023384

0801ab70 <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 801ab70:	b5b0      	push	{r4, r5, r7, lr}
 801ab72:	b092      	sub	sp, #72	; 0x48
 801ab74:	af02      	add	r7, sp, #8
 801ab76:	0002      	movs	r2, r0
 801ab78:	1dfb      	adds	r3, r7, #7
 801ab7a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 801ab7c:	253f      	movs	r5, #63	; 0x3f
 801ab7e:	197c      	adds	r4, r7, r5
 801ab80:	1dfb      	adds	r3, r7, #7
 801ab82:	781b      	ldrb	r3, [r3, #0]
 801ab84:	2200      	movs	r2, #0
 801ab86:	2109      	movs	r1, #9
 801ab88:	0018      	movs	r0, r3
 801ab8a:	f7e5 fcbb 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ab8e:	0003      	movs	r3, r0
 801ab90:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 801ab92:	197b      	adds	r3, r7, r5
 801ab94:	781b      	ldrb	r3, [r3, #0]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d027      	beq.n	801abea <USBPD_DPM_RequestDataRoleSwap+0x7a>
 801ab9a:	4a17      	ldr	r2, [pc, #92]	; (801abf8 <USBPD_DPM_RequestDataRoleSwap+0x88>)
 801ab9c:	240c      	movs	r4, #12
 801ab9e:	193b      	adds	r3, r7, r4
 801aba0:	2132      	movs	r1, #50	; 0x32
 801aba2:	0018      	movs	r0, r3
 801aba4:	f007 fd28 	bl	80225f8 <sniprintf>
 801aba8:	0002      	movs	r2, r0
 801abaa:	213e      	movs	r1, #62	; 0x3e
 801abac:	187b      	adds	r3, r7, r1
 801abae:	701a      	strb	r2, [r3, #0]
 801abb0:	187b      	adds	r3, r7, r1
 801abb2:	781b      	ldrb	r3, [r3, #0]
 801abb4:	2b31      	cmp	r3, #49	; 0x31
 801abb6:	d80d      	bhi.n	801abd4 <USBPD_DPM_RequestDataRoleSwap+0x64>
 801abb8:	193b      	adds	r3, r7, r4
 801abba:	0018      	movs	r0, r3
 801abbc:	f7eb fb06 	bl	80061cc <strlen>
 801abc0:	193a      	adds	r2, r7, r4
 801abc2:	1dfb      	adds	r3, r7, #7
 801abc4:	7819      	ldrb	r1, [r3, #0]
 801abc6:	9000      	str	r0, [sp, #0]
 801abc8:	0013      	movs	r3, r2
 801abca:	2200      	movs	r2, #0
 801abcc:	2006      	movs	r0, #6
 801abce:	f7f6 ff45 	bl	8011a5c <USBPD_TRACE_Add>
 801abd2:	e00a      	b.n	801abea <USBPD_DPM_RequestDataRoleSwap+0x7a>
 801abd4:	230c      	movs	r3, #12
 801abd6:	18fa      	adds	r2, r7, r3
 801abd8:	1dfb      	adds	r3, r7, #7
 801abda:	7819      	ldrb	r1, [r3, #0]
 801abdc:	2332      	movs	r3, #50	; 0x32
 801abde:	9300      	str	r3, [sp, #0]
 801abe0:	0013      	movs	r3, r2
 801abe2:	2200      	movs	r2, #0
 801abe4:	2006      	movs	r0, #6
 801abe6:	f7f6 ff39 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801abea:	233f      	movs	r3, #63	; 0x3f
 801abec:	18fb      	adds	r3, r7, r3
 801abee:	781b      	ldrb	r3, [r3, #0]
}
 801abf0:	0018      	movs	r0, r3
 801abf2:	46bd      	mov	sp, r7
 801abf4:	b010      	add	sp, #64	; 0x40
 801abf6:	bdb0      	pop	{r4, r5, r7, pc}
 801abf8:	080233ac 	.word	0x080233ac

0801abfc <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 801abfc:	b590      	push	{r4, r7, lr}
 801abfe:	b093      	sub	sp, #76	; 0x4c
 801ac00:	af02      	add	r7, sp, #8
 801ac02:	0002      	movs	r2, r0
 801ac04:	1dfb      	adds	r3, r7, #7
 801ac06:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "PRS not accepted by the stack");
 801ac08:	4a16      	ldr	r2, [pc, #88]	; (801ac64 <USBPD_DPM_RequestPowerRoleSwap+0x68>)
 801ac0a:	240c      	movs	r4, #12
 801ac0c:	193b      	adds	r3, r7, r4
 801ac0e:	2132      	movs	r1, #50	; 0x32
 801ac10:	0018      	movs	r0, r3
 801ac12:	f007 fcf1 	bl	80225f8 <sniprintf>
 801ac16:	0002      	movs	r2, r0
 801ac18:	213f      	movs	r1, #63	; 0x3f
 801ac1a:	187b      	adds	r3, r7, r1
 801ac1c:	701a      	strb	r2, [r3, #0]
 801ac1e:	187b      	adds	r3, r7, r1
 801ac20:	781b      	ldrb	r3, [r3, #0]
 801ac22:	2b31      	cmp	r3, #49	; 0x31
 801ac24:	d80d      	bhi.n	801ac42 <USBPD_DPM_RequestPowerRoleSwap+0x46>
 801ac26:	193b      	adds	r3, r7, r4
 801ac28:	0018      	movs	r0, r3
 801ac2a:	f7eb facf 	bl	80061cc <strlen>
 801ac2e:	193a      	adds	r2, r7, r4
 801ac30:	1dfb      	adds	r3, r7, #7
 801ac32:	7819      	ldrb	r1, [r3, #0]
 801ac34:	9000      	str	r0, [sp, #0]
 801ac36:	0013      	movs	r3, r2
 801ac38:	2200      	movs	r2, #0
 801ac3a:	2006      	movs	r0, #6
 801ac3c:	f7f6 ff0e 	bl	8011a5c <USBPD_TRACE_Add>
 801ac40:	e00a      	b.n	801ac58 <USBPD_DPM_RequestPowerRoleSwap+0x5c>
 801ac42:	230c      	movs	r3, #12
 801ac44:	18fa      	adds	r2, r7, r3
 801ac46:	1dfb      	adds	r3, r7, #7
 801ac48:	7819      	ldrb	r1, [r3, #0]
 801ac4a:	2332      	movs	r3, #50	; 0x32
 801ac4c:	9300      	str	r3, [sp, #0]
 801ac4e:	0013      	movs	r3, r2
 801ac50:	2200      	movs	r2, #0
 801ac52:	2006      	movs	r0, #6
 801ac54:	f7f6 ff02 	bl	8011a5c <USBPD_TRACE_Add>
  return USBPD_ERROR;
 801ac58:	2302      	movs	r3, #2
}
 801ac5a:	0018      	movs	r0, r3
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	b011      	add	sp, #68	; 0x44
 801ac60:	bd90      	pop	{r4, r7, pc}
 801ac62:	46c0      	nop			; (mov r8, r8)
 801ac64:	080233cc 	.word	0x080233cc

0801ac68 <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 801ac68:	b5b0      	push	{r4, r5, r7, lr}
 801ac6a:	b092      	sub	sp, #72	; 0x48
 801ac6c:	af02      	add	r7, sp, #8
 801ac6e:	0002      	movs	r2, r0
 801ac70:	1dfb      	adds	r3, r7, #7
 801ac72:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 801ac74:	253f      	movs	r5, #63	; 0x3f
 801ac76:	197c      	adds	r4, r7, r5
 801ac78:	1dfb      	adds	r3, r7, #7
 801ac7a:	781b      	ldrb	r3, [r3, #0]
 801ac7c:	2200      	movs	r2, #0
 801ac7e:	210b      	movs	r1, #11
 801ac80:	0018      	movs	r0, r3
 801ac82:	f7e5 fc3f 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ac86:	0003      	movs	r3, r0
 801ac88:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 801ac8a:	197b      	adds	r3, r7, r5
 801ac8c:	781b      	ldrb	r3, [r3, #0]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d027      	beq.n	801ace2 <USBPD_DPM_RequestVconnSwap+0x7a>
 801ac92:	4a17      	ldr	r2, [pc, #92]	; (801acf0 <USBPD_DPM_RequestVconnSwap+0x88>)
 801ac94:	240c      	movs	r4, #12
 801ac96:	193b      	adds	r3, r7, r4
 801ac98:	2132      	movs	r1, #50	; 0x32
 801ac9a:	0018      	movs	r0, r3
 801ac9c:	f007 fcac 	bl	80225f8 <sniprintf>
 801aca0:	0002      	movs	r2, r0
 801aca2:	213e      	movs	r1, #62	; 0x3e
 801aca4:	187b      	adds	r3, r7, r1
 801aca6:	701a      	strb	r2, [r3, #0]
 801aca8:	187b      	adds	r3, r7, r1
 801acaa:	781b      	ldrb	r3, [r3, #0]
 801acac:	2b31      	cmp	r3, #49	; 0x31
 801acae:	d80d      	bhi.n	801accc <USBPD_DPM_RequestVconnSwap+0x64>
 801acb0:	193b      	adds	r3, r7, r4
 801acb2:	0018      	movs	r0, r3
 801acb4:	f7eb fa8a 	bl	80061cc <strlen>
 801acb8:	193a      	adds	r2, r7, r4
 801acba:	1dfb      	adds	r3, r7, #7
 801acbc:	7819      	ldrb	r1, [r3, #0]
 801acbe:	9000      	str	r0, [sp, #0]
 801acc0:	0013      	movs	r3, r2
 801acc2:	2200      	movs	r2, #0
 801acc4:	2006      	movs	r0, #6
 801acc6:	f7f6 fec9 	bl	8011a5c <USBPD_TRACE_Add>
 801acca:	e00a      	b.n	801ace2 <USBPD_DPM_RequestVconnSwap+0x7a>
 801accc:	230c      	movs	r3, #12
 801acce:	18fa      	adds	r2, r7, r3
 801acd0:	1dfb      	adds	r3, r7, #7
 801acd2:	7819      	ldrb	r1, [r3, #0]
 801acd4:	2332      	movs	r3, #50	; 0x32
 801acd6:	9300      	str	r3, [sp, #0]
 801acd8:	0013      	movs	r3, r2
 801acda:	2200      	movs	r2, #0
 801acdc:	2006      	movs	r0, #6
 801acde:	f7f6 febd 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801ace2:	233f      	movs	r3, #63	; 0x3f
 801ace4:	18fb      	adds	r3, r7, r3
 801ace6:	781b      	ldrb	r3, [r3, #0]
}
 801ace8:	0018      	movs	r0, r3
 801acea:	46bd      	mov	sp, r7
 801acec:	b010      	add	sp, #64	; 0x40
 801acee:	bdb0      	pop	{r4, r5, r7, pc}
 801acf0:	080233ec 	.word	0x080233ec

0801acf4 <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 801acf4:	b5b0      	push	{r4, r5, r7, lr}
 801acf6:	b092      	sub	sp, #72	; 0x48
 801acf8:	af02      	add	r7, sp, #8
 801acfa:	0002      	movs	r2, r0
 801acfc:	1dfb      	adds	r3, r7, #7
 801acfe:	701a      	strb	r2, [r3, #0]
 801ad00:	1dbb      	adds	r3, r7, #6
 801ad02:	1c0a      	adds	r2, r1, #0
 801ad04:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 801ad06:	253f      	movs	r5, #63	; 0x3f
 801ad08:	197c      	adds	r4, r7, r5
 801ad0a:	1dbb      	adds	r3, r7, #6
 801ad0c:	781a      	ldrb	r2, [r3, #0]
 801ad0e:	1dfb      	adds	r3, r7, #7
 801ad10:	781b      	ldrb	r3, [r3, #0]
 801ad12:	210d      	movs	r1, #13
 801ad14:	0018      	movs	r0, r3
 801ad16:	f7e5 fbf5 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ad1a:	0003      	movs	r3, r0
 801ad1c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 801ad1e:	197b      	adds	r3, r7, r5
 801ad20:	781b      	ldrb	r3, [r3, #0]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d027      	beq.n	801ad76 <USBPD_DPM_RequestSoftReset+0x82>
 801ad26:	4a17      	ldr	r2, [pc, #92]	; (801ad84 <USBPD_DPM_RequestSoftReset+0x90>)
 801ad28:	240c      	movs	r4, #12
 801ad2a:	193b      	adds	r3, r7, r4
 801ad2c:	2132      	movs	r1, #50	; 0x32
 801ad2e:	0018      	movs	r0, r3
 801ad30:	f007 fc62 	bl	80225f8 <sniprintf>
 801ad34:	0002      	movs	r2, r0
 801ad36:	213e      	movs	r1, #62	; 0x3e
 801ad38:	187b      	adds	r3, r7, r1
 801ad3a:	701a      	strb	r2, [r3, #0]
 801ad3c:	187b      	adds	r3, r7, r1
 801ad3e:	781b      	ldrb	r3, [r3, #0]
 801ad40:	2b31      	cmp	r3, #49	; 0x31
 801ad42:	d80d      	bhi.n	801ad60 <USBPD_DPM_RequestSoftReset+0x6c>
 801ad44:	193b      	adds	r3, r7, r4
 801ad46:	0018      	movs	r0, r3
 801ad48:	f7eb fa40 	bl	80061cc <strlen>
 801ad4c:	193a      	adds	r2, r7, r4
 801ad4e:	1dfb      	adds	r3, r7, #7
 801ad50:	7819      	ldrb	r1, [r3, #0]
 801ad52:	9000      	str	r0, [sp, #0]
 801ad54:	0013      	movs	r3, r2
 801ad56:	2200      	movs	r2, #0
 801ad58:	2006      	movs	r0, #6
 801ad5a:	f7f6 fe7f 	bl	8011a5c <USBPD_TRACE_Add>
 801ad5e:	e00a      	b.n	801ad76 <USBPD_DPM_RequestSoftReset+0x82>
 801ad60:	230c      	movs	r3, #12
 801ad62:	18fa      	adds	r2, r7, r3
 801ad64:	1dfb      	adds	r3, r7, #7
 801ad66:	7819      	ldrb	r1, [r3, #0]
 801ad68:	2332      	movs	r3, #50	; 0x32
 801ad6a:	9300      	str	r3, [sp, #0]
 801ad6c:	0013      	movs	r3, r2
 801ad6e:	2200      	movs	r2, #0
 801ad70:	2006      	movs	r0, #6
 801ad72:	f7f6 fe73 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801ad76:	233f      	movs	r3, #63	; 0x3f
 801ad78:	18fb      	adds	r3, r7, r3
 801ad7a:	781b      	ldrb	r3, [r3, #0]
}
 801ad7c:	0018      	movs	r0, r3
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	b010      	add	sp, #64	; 0x40
 801ad82:	bdb0      	pop	{r4, r5, r7, pc}
 801ad84:	0802340c 	.word	0x0802340c

0801ad88 <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 801ad88:	b5b0      	push	{r4, r5, r7, lr}
 801ad8a:	b092      	sub	sp, #72	; 0x48
 801ad8c:	af02      	add	r7, sp, #8
 801ad8e:	0002      	movs	r2, r0
 801ad90:	1dfb      	adds	r3, r7, #7
 801ad92:	701a      	strb	r2, [r3, #0]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 801ad94:	253f      	movs	r5, #63	; 0x3f
 801ad96:	197c      	adds	r4, r7, r5
 801ad98:	1dfb      	adds	r3, r7, #7
 801ad9a:	781b      	ldrb	r3, [r3, #0]
 801ad9c:	2200      	movs	r2, #0
 801ad9e:	2101      	movs	r1, #1
 801ada0:	0018      	movs	r0, r3
 801ada2:	f7e5 fc5b 	bl	800065c <USBPD_PE_Request_DataMessage>
 801ada6:	0003      	movs	r3, r0
 801ada8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 801adaa:	197b      	adds	r3, r7, r5
 801adac:	781b      	ldrb	r3, [r3, #0]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d027      	beq.n	801ae02 <USBPD_DPM_RequestSourceCapability+0x7a>
 801adb2:	4a17      	ldr	r2, [pc, #92]	; (801ae10 <USBPD_DPM_RequestSourceCapability+0x88>)
 801adb4:	240c      	movs	r4, #12
 801adb6:	193b      	adds	r3, r7, r4
 801adb8:	2132      	movs	r1, #50	; 0x32
 801adba:	0018      	movs	r0, r3
 801adbc:	f007 fc1c 	bl	80225f8 <sniprintf>
 801adc0:	0002      	movs	r2, r0
 801adc2:	213e      	movs	r1, #62	; 0x3e
 801adc4:	187b      	adds	r3, r7, r1
 801adc6:	701a      	strb	r2, [r3, #0]
 801adc8:	187b      	adds	r3, r7, r1
 801adca:	781b      	ldrb	r3, [r3, #0]
 801adcc:	2b31      	cmp	r3, #49	; 0x31
 801adce:	d80d      	bhi.n	801adec <USBPD_DPM_RequestSourceCapability+0x64>
 801add0:	193b      	adds	r3, r7, r4
 801add2:	0018      	movs	r0, r3
 801add4:	f7eb f9fa 	bl	80061cc <strlen>
 801add8:	193a      	adds	r2, r7, r4
 801adda:	1dfb      	adds	r3, r7, #7
 801addc:	7819      	ldrb	r1, [r3, #0]
 801adde:	9000      	str	r0, [sp, #0]
 801ade0:	0013      	movs	r3, r2
 801ade2:	2200      	movs	r2, #0
 801ade4:	2006      	movs	r0, #6
 801ade6:	f7f6 fe39 	bl	8011a5c <USBPD_TRACE_Add>
 801adea:	e00a      	b.n	801ae02 <USBPD_DPM_RequestSourceCapability+0x7a>
 801adec:	230c      	movs	r3, #12
 801adee:	18fa      	adds	r2, r7, r3
 801adf0:	1dfb      	adds	r3, r7, #7
 801adf2:	7819      	ldrb	r1, [r3, #0]
 801adf4:	2332      	movs	r3, #50	; 0x32
 801adf6:	9300      	str	r3, [sp, #0]
 801adf8:	0013      	movs	r3, r2
 801adfa:	2200      	movs	r2, #0
 801adfc:	2006      	movs	r0, #6
 801adfe:	f7f6 fe2d 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801ae02:	233f      	movs	r3, #63	; 0x3f
 801ae04:	18fb      	adds	r3, r7, r3
 801ae06:	781b      	ldrb	r3, [r3, #0]
}
 801ae08:	0018      	movs	r0, r3
 801ae0a:	46bd      	mov	sp, r7
 801ae0c:	b010      	add	sp, #64	; 0x40
 801ae0e:	bdb0      	pop	{r4, r5, r7, pc}
 801ae10:	08023434 	.word	0x08023434

0801ae14 <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 801ae14:	b5b0      	push	{r4, r5, r7, lr}
 801ae16:	b092      	sub	sp, #72	; 0x48
 801ae18:	af02      	add	r7, sp, #8
 801ae1a:	0002      	movs	r2, r0
 801ae1c:	6039      	str	r1, [r7, #0]
 801ae1e:	1dfb      	adds	r3, r7, #7
 801ae20:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 801ae22:	253f      	movs	r5, #63	; 0x3f
 801ae24:	197c      	adds	r4, r7, r5
 801ae26:	003a      	movs	r2, r7
 801ae28:	1dfb      	adds	r3, r7, #7
 801ae2a:	781b      	ldrb	r3, [r3, #0]
 801ae2c:	2106      	movs	r1, #6
 801ae2e:	0018      	movs	r0, r3
 801ae30:	f7e5 fc14 	bl	800065c <USBPD_PE_Request_DataMessage>
 801ae34:	0003      	movs	r3, r0
 801ae36:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 801ae38:	197b      	adds	r3, r7, r5
 801ae3a:	781b      	ldrb	r3, [r3, #0]
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d027      	beq.n	801ae90 <USBPD_DPM_RequestAlert+0x7c>
 801ae40:	4a17      	ldr	r2, [pc, #92]	; (801aea0 <USBPD_DPM_RequestAlert+0x8c>)
 801ae42:	240c      	movs	r4, #12
 801ae44:	193b      	adds	r3, r7, r4
 801ae46:	2132      	movs	r1, #50	; 0x32
 801ae48:	0018      	movs	r0, r3
 801ae4a:	f007 fbd5 	bl	80225f8 <sniprintf>
 801ae4e:	0002      	movs	r2, r0
 801ae50:	213e      	movs	r1, #62	; 0x3e
 801ae52:	187b      	adds	r3, r7, r1
 801ae54:	701a      	strb	r2, [r3, #0]
 801ae56:	187b      	adds	r3, r7, r1
 801ae58:	781b      	ldrb	r3, [r3, #0]
 801ae5a:	2b31      	cmp	r3, #49	; 0x31
 801ae5c:	d80d      	bhi.n	801ae7a <USBPD_DPM_RequestAlert+0x66>
 801ae5e:	193b      	adds	r3, r7, r4
 801ae60:	0018      	movs	r0, r3
 801ae62:	f7eb f9b3 	bl	80061cc <strlen>
 801ae66:	193a      	adds	r2, r7, r4
 801ae68:	1dfb      	adds	r3, r7, #7
 801ae6a:	7819      	ldrb	r1, [r3, #0]
 801ae6c:	9000      	str	r0, [sp, #0]
 801ae6e:	0013      	movs	r3, r2
 801ae70:	2200      	movs	r2, #0
 801ae72:	2006      	movs	r0, #6
 801ae74:	f7f6 fdf2 	bl	8011a5c <USBPD_TRACE_Add>
 801ae78:	e00a      	b.n	801ae90 <USBPD_DPM_RequestAlert+0x7c>
 801ae7a:	230c      	movs	r3, #12
 801ae7c:	18fa      	adds	r2, r7, r3
 801ae7e:	1dfb      	adds	r3, r7, #7
 801ae80:	7819      	ldrb	r1, [r3, #0]
 801ae82:	2332      	movs	r3, #50	; 0x32
 801ae84:	9300      	str	r3, [sp, #0]
 801ae86:	0013      	movs	r3, r2
 801ae88:	2200      	movs	r2, #0
 801ae8a:	2006      	movs	r0, #6
 801ae8c:	f7f6 fde6 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801ae90:	233f      	movs	r3, #63	; 0x3f
 801ae92:	18fb      	adds	r3, r7, r3
 801ae94:	781b      	ldrb	r3, [r3, #0]
}
 801ae96:	0018      	movs	r0, r3
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	b010      	add	sp, #64	; 0x40
 801ae9c:	bdb0      	pop	{r4, r5, r7, pc}
 801ae9e:	46c0      	nop			; (mov r8, r8)
 801aea0:	080235c4 	.word	0x080235c4

0801aea4 <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 801aea4:	b5b0      	push	{r4, r5, r7, lr}
 801aea6:	b092      	sub	sp, #72	; 0x48
 801aea8:	af02      	add	r7, sp, #8
 801aeaa:	0002      	movs	r2, r0
 801aeac:	1dfb      	adds	r3, r7, #7
 801aeae:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 801aeb0:	253f      	movs	r5, #63	; 0x3f
 801aeb2:	197c      	adds	r4, r7, r5
 801aeb4:	1dfb      	adds	r3, r7, #7
 801aeb6:	781b      	ldrb	r3, [r3, #0]
 801aeb8:	2200      	movs	r2, #0
 801aeba:	2111      	movs	r1, #17
 801aebc:	0018      	movs	r0, r3
 801aebe:	f7e5 fb21 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801aec2:	0003      	movs	r3, r0
 801aec4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 801aec6:	197b      	adds	r3, r7, r5
 801aec8:	781b      	ldrb	r3, [r3, #0]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d027      	beq.n	801af1e <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 801aece:	4a17      	ldr	r2, [pc, #92]	; (801af2c <USBPD_DPM_RequestGetSourceCapabilityExt+0x88>)
 801aed0:	240c      	movs	r4, #12
 801aed2:	193b      	adds	r3, r7, r4
 801aed4:	2132      	movs	r1, #50	; 0x32
 801aed6:	0018      	movs	r0, r3
 801aed8:	f007 fb8e 	bl	80225f8 <sniprintf>
 801aedc:	0002      	movs	r2, r0
 801aede:	213e      	movs	r1, #62	; 0x3e
 801aee0:	187b      	adds	r3, r7, r1
 801aee2:	701a      	strb	r2, [r3, #0]
 801aee4:	187b      	adds	r3, r7, r1
 801aee6:	781b      	ldrb	r3, [r3, #0]
 801aee8:	2b31      	cmp	r3, #49	; 0x31
 801aeea:	d80d      	bhi.n	801af08 <USBPD_DPM_RequestGetSourceCapabilityExt+0x64>
 801aeec:	193b      	adds	r3, r7, r4
 801aeee:	0018      	movs	r0, r3
 801aef0:	f7eb f96c 	bl	80061cc <strlen>
 801aef4:	193a      	adds	r2, r7, r4
 801aef6:	1dfb      	adds	r3, r7, #7
 801aef8:	7819      	ldrb	r1, [r3, #0]
 801aefa:	9000      	str	r0, [sp, #0]
 801aefc:	0013      	movs	r3, r2
 801aefe:	2200      	movs	r2, #0
 801af00:	2006      	movs	r0, #6
 801af02:	f7f6 fdab 	bl	8011a5c <USBPD_TRACE_Add>
 801af06:	e00a      	b.n	801af1e <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 801af08:	230c      	movs	r3, #12
 801af0a:	18fa      	adds	r2, r7, r3
 801af0c:	1dfb      	adds	r3, r7, #7
 801af0e:	7819      	ldrb	r1, [r3, #0]
 801af10:	2332      	movs	r3, #50	; 0x32
 801af12:	9300      	str	r3, [sp, #0]
 801af14:	0013      	movs	r3, r2
 801af16:	2200      	movs	r2, #0
 801af18:	2006      	movs	r0, #6
 801af1a:	f7f6 fd9f 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801af1e:	233f      	movs	r3, #63	; 0x3f
 801af20:	18fb      	adds	r3, r7, r3
 801af22:	781b      	ldrb	r3, [r3, #0]
}
 801af24:	0018      	movs	r0, r3
 801af26:	46bd      	mov	sp, r7
 801af28:	b010      	add	sp, #64	; 0x40
 801af2a:	bdb0      	pop	{r4, r5, r7, pc}
 801af2c:	080235e4 	.word	0x080235e4

0801af30 <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 801af30:	b5b0      	push	{r4, r5, r7, lr}
 801af32:	b092      	sub	sp, #72	; 0x48
 801af34:	af02      	add	r7, sp, #8
 801af36:	0002      	movs	r2, r0
 801af38:	1dfb      	adds	r3, r7, #7
 801af3a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAPEXT, USBPD_SOPTYPE_SOP);
 801af3c:	253f      	movs	r5, #63	; 0x3f
 801af3e:	197c      	adds	r4, r7, r5
 801af40:	1dfb      	adds	r3, r7, #7
 801af42:	781b      	ldrb	r3, [r3, #0]
 801af44:	2200      	movs	r2, #0
 801af46:	2116      	movs	r1, #22
 801af48:	0018      	movs	r0, r3
 801af4a:	f7e5 fadb 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801af4e:	0003      	movs	r3, r0
 801af50:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA_EXT not accepted by the stack");
 801af52:	197b      	adds	r3, r7, r5
 801af54:	781b      	ldrb	r3, [r3, #0]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d027      	beq.n	801afaa <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 801af5a:	4a17      	ldr	r2, [pc, #92]	; (801afb8 <USBPD_DPM_RequestGetSinkCapabilityExt+0x88>)
 801af5c:	240c      	movs	r4, #12
 801af5e:	193b      	adds	r3, r7, r4
 801af60:	2132      	movs	r1, #50	; 0x32
 801af62:	0018      	movs	r0, r3
 801af64:	f007 fb48 	bl	80225f8 <sniprintf>
 801af68:	0002      	movs	r2, r0
 801af6a:	213e      	movs	r1, #62	; 0x3e
 801af6c:	187b      	adds	r3, r7, r1
 801af6e:	701a      	strb	r2, [r3, #0]
 801af70:	187b      	adds	r3, r7, r1
 801af72:	781b      	ldrb	r3, [r3, #0]
 801af74:	2b31      	cmp	r3, #49	; 0x31
 801af76:	d80d      	bhi.n	801af94 <USBPD_DPM_RequestGetSinkCapabilityExt+0x64>
 801af78:	193b      	adds	r3, r7, r4
 801af7a:	0018      	movs	r0, r3
 801af7c:	f7eb f926 	bl	80061cc <strlen>
 801af80:	193a      	adds	r2, r7, r4
 801af82:	1dfb      	adds	r3, r7, #7
 801af84:	7819      	ldrb	r1, [r3, #0]
 801af86:	9000      	str	r0, [sp, #0]
 801af88:	0013      	movs	r3, r2
 801af8a:	2200      	movs	r2, #0
 801af8c:	2006      	movs	r0, #6
 801af8e:	f7f6 fd65 	bl	8011a5c <USBPD_TRACE_Add>
 801af92:	e00a      	b.n	801afaa <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 801af94:	230c      	movs	r3, #12
 801af96:	18fa      	adds	r2, r7, r3
 801af98:	1dfb      	adds	r3, r7, #7
 801af9a:	7819      	ldrb	r1, [r3, #0]
 801af9c:	2332      	movs	r3, #50	; 0x32
 801af9e:	9300      	str	r3, [sp, #0]
 801afa0:	0013      	movs	r3, r2
 801afa2:	2200      	movs	r2, #0
 801afa4:	2006      	movs	r0, #6
 801afa6:	f7f6 fd59 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801afaa:	233f      	movs	r3, #63	; 0x3f
 801afac:	18fb      	adds	r3, r7, r3
 801afae:	781b      	ldrb	r3, [r3, #0]
}
 801afb0:	0018      	movs	r0, r3
 801afb2:	46bd      	mov	sp, r7
 801afb4:	b010      	add	sp, #64	; 0x40
 801afb6:	bdb0      	pop	{r4, r5, r7, pc}
 801afb8:	08023610 	.word	0x08023610

0801afbc <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 801afbc:	b590      	push	{r4, r7, lr}
 801afbe:	b093      	sub	sp, #76	; 0x4c
 801afc0:	af02      	add	r7, sp, #8
 801afc2:	603a      	str	r2, [r7, #0]
 801afc4:	1dfb      	adds	r3, r7, #7
 801afc6:	1c02      	adds	r2, r0, #0
 801afc8:	701a      	strb	r2, [r3, #0]
 801afca:	1dbb      	adds	r3, r7, #6
 801afcc:	1c0a      	adds	r2, r1, #0
 801afce:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801afd0:	213f      	movs	r1, #63	; 0x3f
 801afd2:	187b      	adds	r3, r7, r1
 801afd4:	2202      	movs	r2, #2
 801afd6:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_SOP == SOPType)
 801afd8:	1dbb      	adds	r3, r7, #6
 801afda:	781b      	ldrb	r3, [r3, #0]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d10d      	bne.n	801affc <USBPD_DPM_RequestGetManufacturerInfo+0x40>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 801afe0:	187c      	adds	r4, r7, r1
 801afe2:	683a      	ldr	r2, [r7, #0]
 801afe4:	1dbb      	adds	r3, r7, #6
 801afe6:	7819      	ldrb	r1, [r3, #0]
 801afe8:	1dfb      	adds	r3, r7, #7
 801afea:	7818      	ldrb	r0, [r3, #0]
 801afec:	2302      	movs	r3, #2
 801afee:	9300      	str	r3, [sp, #0]
 801aff0:	0013      	movs	r3, r2
 801aff2:	2206      	movs	r2, #6
 801aff4:	f7e5 fbbe 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801aff8:	0003      	movs	r3, r0
 801affa:	7023      	strb	r3, [r4, #0]
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 801affc:	233f      	movs	r3, #63	; 0x3f
 801affe:	18fb      	adds	r3, r7, r3
 801b000:	781b      	ldrb	r3, [r3, #0]
 801b002:	2b00      	cmp	r3, #0
 801b004:	d027      	beq.n	801b056 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 801b006:	4a17      	ldr	r2, [pc, #92]	; (801b064 <USBPD_DPM_RequestGetManufacturerInfo+0xa8>)
 801b008:	240c      	movs	r4, #12
 801b00a:	193b      	adds	r3, r7, r4
 801b00c:	2132      	movs	r1, #50	; 0x32
 801b00e:	0018      	movs	r0, r3
 801b010:	f007 faf2 	bl	80225f8 <sniprintf>
 801b014:	0002      	movs	r2, r0
 801b016:	213e      	movs	r1, #62	; 0x3e
 801b018:	187b      	adds	r3, r7, r1
 801b01a:	701a      	strb	r2, [r3, #0]
 801b01c:	187b      	adds	r3, r7, r1
 801b01e:	781b      	ldrb	r3, [r3, #0]
 801b020:	2b31      	cmp	r3, #49	; 0x31
 801b022:	d80d      	bhi.n	801b040 <USBPD_DPM_RequestGetManufacturerInfo+0x84>
 801b024:	193b      	adds	r3, r7, r4
 801b026:	0018      	movs	r0, r3
 801b028:	f7eb f8d0 	bl	80061cc <strlen>
 801b02c:	193a      	adds	r2, r7, r4
 801b02e:	1dfb      	adds	r3, r7, #7
 801b030:	7819      	ldrb	r1, [r3, #0]
 801b032:	9000      	str	r0, [sp, #0]
 801b034:	0013      	movs	r3, r2
 801b036:	2200      	movs	r2, #0
 801b038:	2006      	movs	r0, #6
 801b03a:	f7f6 fd0f 	bl	8011a5c <USBPD_TRACE_Add>
 801b03e:	e00a      	b.n	801b056 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 801b040:	230c      	movs	r3, #12
 801b042:	18fa      	adds	r2, r7, r3
 801b044:	1dfb      	adds	r3, r7, #7
 801b046:	7819      	ldrb	r1, [r3, #0]
 801b048:	2332      	movs	r3, #50	; 0x32
 801b04a:	9300      	str	r3, [sp, #0]
 801b04c:	0013      	movs	r3, r2
 801b04e:	2200      	movs	r2, #0
 801b050:	2006      	movs	r0, #6
 801b052:	f7f6 fd03 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801b056:	233f      	movs	r3, #63	; 0x3f
 801b058:	18fb      	adds	r3, r7, r3
 801b05a:	781b      	ldrb	r3, [r3, #0]
}
 801b05c:	0018      	movs	r0, r3
 801b05e:	46bd      	mov	sp, r7
 801b060:	b011      	add	sp, #68	; 0x44
 801b062:	bd90      	pop	{r4, r7, pc}
 801b064:	0802363c 	.word	0x0802363c

0801b068 <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 801b068:	b5b0      	push	{r4, r5, r7, lr}
 801b06a:	b092      	sub	sp, #72	; 0x48
 801b06c:	af02      	add	r7, sp, #8
 801b06e:	0002      	movs	r2, r0
 801b070:	1dfb      	adds	r3, r7, #7
 801b072:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 801b074:	253f      	movs	r5, #63	; 0x3f
 801b076:	197c      	adds	r4, r7, r5
 801b078:	1dfb      	adds	r3, r7, #7
 801b07a:	781b      	ldrb	r3, [r3, #0]
 801b07c:	2200      	movs	r2, #0
 801b07e:	2114      	movs	r1, #20
 801b080:	0018      	movs	r0, r3
 801b082:	f7e5 fa3f 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801b086:	0003      	movs	r3, r0
 801b088:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 801b08a:	197b      	adds	r3, r7, r5
 801b08c:	781b      	ldrb	r3, [r3, #0]
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d027      	beq.n	801b0e2 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 801b092:	4a17      	ldr	r2, [pc, #92]	; (801b0f0 <USBPD_DPM_RequestGetPPS_Status+0x88>)
 801b094:	240c      	movs	r4, #12
 801b096:	193b      	adds	r3, r7, r4
 801b098:	2132      	movs	r1, #50	; 0x32
 801b09a:	0018      	movs	r0, r3
 801b09c:	f007 faac 	bl	80225f8 <sniprintf>
 801b0a0:	0002      	movs	r2, r0
 801b0a2:	213e      	movs	r1, #62	; 0x3e
 801b0a4:	187b      	adds	r3, r7, r1
 801b0a6:	701a      	strb	r2, [r3, #0]
 801b0a8:	187b      	adds	r3, r7, r1
 801b0aa:	781b      	ldrb	r3, [r3, #0]
 801b0ac:	2b31      	cmp	r3, #49	; 0x31
 801b0ae:	d80d      	bhi.n	801b0cc <USBPD_DPM_RequestGetPPS_Status+0x64>
 801b0b0:	193b      	adds	r3, r7, r4
 801b0b2:	0018      	movs	r0, r3
 801b0b4:	f7eb f88a 	bl	80061cc <strlen>
 801b0b8:	193a      	adds	r2, r7, r4
 801b0ba:	1dfb      	adds	r3, r7, #7
 801b0bc:	7819      	ldrb	r1, [r3, #0]
 801b0be:	9000      	str	r0, [sp, #0]
 801b0c0:	0013      	movs	r3, r2
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	2006      	movs	r0, #6
 801b0c6:	f7f6 fcc9 	bl	8011a5c <USBPD_TRACE_Add>
 801b0ca:	e00a      	b.n	801b0e2 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 801b0cc:	230c      	movs	r3, #12
 801b0ce:	18fa      	adds	r2, r7, r3
 801b0d0:	1dfb      	adds	r3, r7, #7
 801b0d2:	7819      	ldrb	r1, [r3, #0]
 801b0d4:	2332      	movs	r3, #50	; 0x32
 801b0d6:	9300      	str	r3, [sp, #0]
 801b0d8:	0013      	movs	r3, r2
 801b0da:	2200      	movs	r2, #0
 801b0dc:	2006      	movs	r0, #6
 801b0de:	f7f6 fcbd 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801b0e2:	233f      	movs	r3, #63	; 0x3f
 801b0e4:	18fb      	adds	r3, r7, r3
 801b0e6:	781b      	ldrb	r3, [r3, #0]
}
 801b0e8:	0018      	movs	r0, r3
 801b0ea:	46bd      	mov	sp, r7
 801b0ec:	b010      	add	sp, #64	; 0x40
 801b0ee:	bdb0      	pop	{r4, r5, r7, pc}
 801b0f0:	08023664 	.word	0x08023664

0801b0f4 <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 801b0f4:	b5b0      	push	{r4, r5, r7, lr}
 801b0f6:	b092      	sub	sp, #72	; 0x48
 801b0f8:	af02      	add	r7, sp, #8
 801b0fa:	0002      	movs	r2, r0
 801b0fc:	1dfb      	adds	r3, r7, #7
 801b0fe:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 801b100:	253f      	movs	r5, #63	; 0x3f
 801b102:	197c      	adds	r4, r7, r5
 801b104:	1dfb      	adds	r3, r7, #7
 801b106:	781b      	ldrb	r3, [r3, #0]
 801b108:	2200      	movs	r2, #0
 801b10a:	2112      	movs	r1, #18
 801b10c:	0018      	movs	r0, r3
 801b10e:	f7e5 f9f9 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801b112:	0003      	movs	r3, r0
 801b114:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 801b116:	197b      	adds	r3, r7, r5
 801b118:	781b      	ldrb	r3, [r3, #0]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d027      	beq.n	801b16e <USBPD_DPM_RequestGetStatus+0x7a>
 801b11e:	4a17      	ldr	r2, [pc, #92]	; (801b17c <USBPD_DPM_RequestGetStatus+0x88>)
 801b120:	240c      	movs	r4, #12
 801b122:	193b      	adds	r3, r7, r4
 801b124:	2132      	movs	r1, #50	; 0x32
 801b126:	0018      	movs	r0, r3
 801b128:	f007 fa66 	bl	80225f8 <sniprintf>
 801b12c:	0002      	movs	r2, r0
 801b12e:	213e      	movs	r1, #62	; 0x3e
 801b130:	187b      	adds	r3, r7, r1
 801b132:	701a      	strb	r2, [r3, #0]
 801b134:	187b      	adds	r3, r7, r1
 801b136:	781b      	ldrb	r3, [r3, #0]
 801b138:	2b31      	cmp	r3, #49	; 0x31
 801b13a:	d80d      	bhi.n	801b158 <USBPD_DPM_RequestGetStatus+0x64>
 801b13c:	193b      	adds	r3, r7, r4
 801b13e:	0018      	movs	r0, r3
 801b140:	f7eb f844 	bl	80061cc <strlen>
 801b144:	193a      	adds	r2, r7, r4
 801b146:	1dfb      	adds	r3, r7, #7
 801b148:	7819      	ldrb	r1, [r3, #0]
 801b14a:	9000      	str	r0, [sp, #0]
 801b14c:	0013      	movs	r3, r2
 801b14e:	2200      	movs	r2, #0
 801b150:	2006      	movs	r0, #6
 801b152:	f7f6 fc83 	bl	8011a5c <USBPD_TRACE_Add>
 801b156:	e00a      	b.n	801b16e <USBPD_DPM_RequestGetStatus+0x7a>
 801b158:	230c      	movs	r3, #12
 801b15a:	18fa      	adds	r2, r7, r3
 801b15c:	1dfb      	adds	r3, r7, #7
 801b15e:	7819      	ldrb	r1, [r3, #0]
 801b160:	2332      	movs	r3, #50	; 0x32
 801b162:	9300      	str	r3, [sp, #0]
 801b164:	0013      	movs	r3, r2
 801b166:	2200      	movs	r2, #0
 801b168:	2006      	movs	r0, #6
 801b16a:	f7f6 fc77 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801b16e:	233f      	movs	r3, #63	; 0x3f
 801b170:	18fb      	adds	r3, r7, r3
 801b172:	781b      	ldrb	r3, [r3, #0]
}
 801b174:	0018      	movs	r0, r3
 801b176:	46bd      	mov	sp, r7
 801b178:	b010      	add	sp, #64	; 0x40
 801b17a:	bdb0      	pop	{r4, r5, r7, pc}
 801b17c:	08023690 	.word	0x08023690

0801b180 <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 801b180:	b5b0      	push	{r4, r5, r7, lr}
 801b182:	b092      	sub	sp, #72	; 0x48
 801b184:	af02      	add	r7, sp, #8
 801b186:	0002      	movs	r2, r0
 801b188:	1dfb      	adds	r3, r7, #7
 801b18a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 801b18c:	253f      	movs	r5, #63	; 0x3f
 801b18e:	197c      	adds	r4, r7, r5
 801b190:	1dfb      	adds	r3, r7, #7
 801b192:	781b      	ldrb	r3, [r3, #0]
 801b194:	2200      	movs	r2, #0
 801b196:	2113      	movs	r1, #19
 801b198:	0018      	movs	r0, r3
 801b19a:	f7e5 f9b3 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801b19e:	0003      	movs	r3, r0
 801b1a0:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 801b1a2:	197b      	adds	r3, r7, r5
 801b1a4:	781b      	ldrb	r3, [r3, #0]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d027      	beq.n	801b1fa <USBPD_DPM_RequestFastRoleSwap+0x7a>
 801b1aa:	4a17      	ldr	r2, [pc, #92]	; (801b208 <USBPD_DPM_RequestFastRoleSwap+0x88>)
 801b1ac:	240c      	movs	r4, #12
 801b1ae:	193b      	adds	r3, r7, r4
 801b1b0:	2132      	movs	r1, #50	; 0x32
 801b1b2:	0018      	movs	r0, r3
 801b1b4:	f007 fa20 	bl	80225f8 <sniprintf>
 801b1b8:	0002      	movs	r2, r0
 801b1ba:	213e      	movs	r1, #62	; 0x3e
 801b1bc:	187b      	adds	r3, r7, r1
 801b1be:	701a      	strb	r2, [r3, #0]
 801b1c0:	187b      	adds	r3, r7, r1
 801b1c2:	781b      	ldrb	r3, [r3, #0]
 801b1c4:	2b31      	cmp	r3, #49	; 0x31
 801b1c6:	d80d      	bhi.n	801b1e4 <USBPD_DPM_RequestFastRoleSwap+0x64>
 801b1c8:	193b      	adds	r3, r7, r4
 801b1ca:	0018      	movs	r0, r3
 801b1cc:	f7ea fffe 	bl	80061cc <strlen>
 801b1d0:	193a      	adds	r2, r7, r4
 801b1d2:	1dfb      	adds	r3, r7, #7
 801b1d4:	7819      	ldrb	r1, [r3, #0]
 801b1d6:	9000      	str	r0, [sp, #0]
 801b1d8:	0013      	movs	r3, r2
 801b1da:	2200      	movs	r2, #0
 801b1dc:	2006      	movs	r0, #6
 801b1de:	f7f6 fc3d 	bl	8011a5c <USBPD_TRACE_Add>
 801b1e2:	e00a      	b.n	801b1fa <USBPD_DPM_RequestFastRoleSwap+0x7a>
 801b1e4:	230c      	movs	r3, #12
 801b1e6:	18fa      	adds	r2, r7, r3
 801b1e8:	1dfb      	adds	r3, r7, #7
 801b1ea:	7819      	ldrb	r1, [r3, #0]
 801b1ec:	2332      	movs	r3, #50	; 0x32
 801b1ee:	9300      	str	r3, [sp, #0]
 801b1f0:	0013      	movs	r3, r2
 801b1f2:	2200      	movs	r2, #0
 801b1f4:	2006      	movs	r0, #6
 801b1f6:	f7f6 fc31 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801b1fa:	233f      	movs	r3, #63	; 0x3f
 801b1fc:	18fb      	adds	r3, r7, r3
 801b1fe:	781b      	ldrb	r3, [r3, #0]
}
 801b200:	0018      	movs	r0, r3
 801b202:	46bd      	mov	sp, r7
 801b204:	b010      	add	sp, #64	; 0x40
 801b206:	bdb0      	pop	{r4, r5, r7, pc}
 801b208:	080236b8 	.word	0x080236b8

0801b20c <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 801b20c:	b5b0      	push	{r4, r5, r7, lr}
 801b20e:	b092      	sub	sp, #72	; 0x48
 801b210:	af02      	add	r7, sp, #8
 801b212:	0002      	movs	r2, r0
 801b214:	1dfb      	adds	r3, r7, #7
 801b216:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 801b218:	253f      	movs	r5, #63	; 0x3f
 801b21a:	197c      	adds	r4, r7, r5
 801b21c:	1dfb      	adds	r3, r7, #7
 801b21e:	781b      	ldrb	r3, [r3, #0]
 801b220:	2200      	movs	r2, #0
 801b222:	2115      	movs	r1, #21
 801b224:	0018      	movs	r0, r3
 801b226:	f7e5 f96d 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801b22a:	0003      	movs	r3, r0
 801b22c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 801b22e:	197b      	adds	r3, r7, r5
 801b230:	781b      	ldrb	r3, [r3, #0]
 801b232:	2b00      	cmp	r3, #0
 801b234:	d027      	beq.n	801b286 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 801b236:	4a17      	ldr	r2, [pc, #92]	; (801b294 <USBPD_DPM_RequestGetCountryCodes+0x88>)
 801b238:	240c      	movs	r4, #12
 801b23a:	193b      	adds	r3, r7, r4
 801b23c:	2132      	movs	r1, #50	; 0x32
 801b23e:	0018      	movs	r0, r3
 801b240:	f007 f9da 	bl	80225f8 <sniprintf>
 801b244:	0002      	movs	r2, r0
 801b246:	213e      	movs	r1, #62	; 0x3e
 801b248:	187b      	adds	r3, r7, r1
 801b24a:	701a      	strb	r2, [r3, #0]
 801b24c:	187b      	adds	r3, r7, r1
 801b24e:	781b      	ldrb	r3, [r3, #0]
 801b250:	2b31      	cmp	r3, #49	; 0x31
 801b252:	d80d      	bhi.n	801b270 <USBPD_DPM_RequestGetCountryCodes+0x64>
 801b254:	193b      	adds	r3, r7, r4
 801b256:	0018      	movs	r0, r3
 801b258:	f7ea ffb8 	bl	80061cc <strlen>
 801b25c:	193a      	adds	r2, r7, r4
 801b25e:	1dfb      	adds	r3, r7, #7
 801b260:	7819      	ldrb	r1, [r3, #0]
 801b262:	9000      	str	r0, [sp, #0]
 801b264:	0013      	movs	r3, r2
 801b266:	2200      	movs	r2, #0
 801b268:	2006      	movs	r0, #6
 801b26a:	f7f6 fbf7 	bl	8011a5c <USBPD_TRACE_Add>
 801b26e:	e00a      	b.n	801b286 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 801b270:	230c      	movs	r3, #12
 801b272:	18fa      	adds	r2, r7, r3
 801b274:	1dfb      	adds	r3, r7, #7
 801b276:	7819      	ldrb	r1, [r3, #0]
 801b278:	2332      	movs	r3, #50	; 0x32
 801b27a:	9300      	str	r3, [sp, #0]
 801b27c:	0013      	movs	r3, r2
 801b27e:	2200      	movs	r2, #0
 801b280:	2006      	movs	r0, #6
 801b282:	f7f6 fbeb 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801b286:	233f      	movs	r3, #63	; 0x3f
 801b288:	18fb      	adds	r3, r7, r3
 801b28a:	781b      	ldrb	r3, [r3, #0]
}
 801b28c:	0018      	movs	r0, r3
 801b28e:	46bd      	mov	sp, r7
 801b290:	b010      	add	sp, #64	; 0x40
 801b292:	bdb0      	pop	{r4, r5, r7, pc}
 801b294:	080236d8 	.word	0x080236d8

0801b298 <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 801b298:	b5b0      	push	{r4, r5, r7, lr}
 801b29a:	b092      	sub	sp, #72	; 0x48
 801b29c:	af02      	add	r7, sp, #8
 801b29e:	0002      	movs	r2, r0
 801b2a0:	1dfb      	adds	r3, r7, #7
 801b2a2:	701a      	strb	r2, [r3, #0]
 801b2a4:	1d3b      	adds	r3, r7, #4
 801b2a6:	1c0a      	adds	r2, r1, #0
 801b2a8:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 801b2aa:	253f      	movs	r5, #63	; 0x3f
 801b2ac:	197c      	adds	r4, r7, r5
 801b2ae:	1d3a      	adds	r2, r7, #4
 801b2b0:	1dfb      	adds	r3, r7, #7
 801b2b2:	781b      	ldrb	r3, [r3, #0]
 801b2b4:	2107      	movs	r1, #7
 801b2b6:	0018      	movs	r0, r3
 801b2b8:	f7e5 f9d0 	bl	800065c <USBPD_PE_Request_DataMessage>
 801b2bc:	0003      	movs	r3, r0
 801b2be:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 801b2c0:	197b      	adds	r3, r7, r5
 801b2c2:	781b      	ldrb	r3, [r3, #0]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d027      	beq.n	801b318 <USBPD_DPM_RequestGetCountryInfo+0x80>
 801b2c8:	4a17      	ldr	r2, [pc, #92]	; (801b328 <USBPD_DPM_RequestGetCountryInfo+0x90>)
 801b2ca:	240c      	movs	r4, #12
 801b2cc:	193b      	adds	r3, r7, r4
 801b2ce:	2132      	movs	r1, #50	; 0x32
 801b2d0:	0018      	movs	r0, r3
 801b2d2:	f007 f991 	bl	80225f8 <sniprintf>
 801b2d6:	0002      	movs	r2, r0
 801b2d8:	213e      	movs	r1, #62	; 0x3e
 801b2da:	187b      	adds	r3, r7, r1
 801b2dc:	701a      	strb	r2, [r3, #0]
 801b2de:	187b      	adds	r3, r7, r1
 801b2e0:	781b      	ldrb	r3, [r3, #0]
 801b2e2:	2b31      	cmp	r3, #49	; 0x31
 801b2e4:	d80d      	bhi.n	801b302 <USBPD_DPM_RequestGetCountryInfo+0x6a>
 801b2e6:	193b      	adds	r3, r7, r4
 801b2e8:	0018      	movs	r0, r3
 801b2ea:	f7ea ff6f 	bl	80061cc <strlen>
 801b2ee:	193a      	adds	r2, r7, r4
 801b2f0:	1dfb      	adds	r3, r7, #7
 801b2f2:	7819      	ldrb	r1, [r3, #0]
 801b2f4:	9000      	str	r0, [sp, #0]
 801b2f6:	0013      	movs	r3, r2
 801b2f8:	2200      	movs	r2, #0
 801b2fa:	2006      	movs	r0, #6
 801b2fc:	f7f6 fbae 	bl	8011a5c <USBPD_TRACE_Add>
 801b300:	e00a      	b.n	801b318 <USBPD_DPM_RequestGetCountryInfo+0x80>
 801b302:	230c      	movs	r3, #12
 801b304:	18fa      	adds	r2, r7, r3
 801b306:	1dfb      	adds	r3, r7, #7
 801b308:	7819      	ldrb	r1, [r3, #0]
 801b30a:	2332      	movs	r3, #50	; 0x32
 801b30c:	9300      	str	r3, [sp, #0]
 801b30e:	0013      	movs	r3, r2
 801b310:	2200      	movs	r2, #0
 801b312:	2006      	movs	r0, #6
 801b314:	f7f6 fba2 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801b318:	233f      	movs	r3, #63	; 0x3f
 801b31a:	18fb      	adds	r3, r7, r3
 801b31c:	781b      	ldrb	r3, [r3, #0]
}
 801b31e:	0018      	movs	r0, r3
 801b320:	46bd      	mov	sp, r7
 801b322:	b010      	add	sp, #64	; 0x40
 801b324:	bdb0      	pop	{r4, r5, r7, pc}
 801b326:	46c0      	nop			; (mov r8, r8)
 801b328:	08023704 	.word	0x08023704

0801b32c <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 801b32c:	b5b0      	push	{r4, r5, r7, lr}
 801b32e:	b092      	sub	sp, #72	; 0x48
 801b330:	af02      	add	r7, sp, #8
 801b332:	0002      	movs	r2, r0
 801b334:	6039      	str	r1, [r7, #0]
 801b336:	1dfb      	adds	r3, r7, #7
 801b338:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 801b33a:	253f      	movs	r5, #63	; 0x3f
 801b33c:	197c      	adds	r4, r7, r5
 801b33e:	683a      	ldr	r2, [r7, #0]
 801b340:	1dfb      	adds	r3, r7, #7
 801b342:	7818      	ldrb	r0, [r3, #0]
 801b344:	2301      	movs	r3, #1
 801b346:	9300      	str	r3, [sp, #0]
 801b348:	0013      	movs	r3, r2
 801b34a:	2203      	movs	r2, #3
 801b34c:	2100      	movs	r1, #0
 801b34e:	f7e5 fa11 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801b352:	0003      	movs	r3, r0
 801b354:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 801b356:	197b      	adds	r3, r7, r5
 801b358:	781b      	ldrb	r3, [r3, #0]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d027      	beq.n	801b3ae <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801b35e:	4a17      	ldr	r2, [pc, #92]	; (801b3bc <USBPD_DPM_RequestGetBatteryCapability+0x90>)
 801b360:	240c      	movs	r4, #12
 801b362:	193b      	adds	r3, r7, r4
 801b364:	2132      	movs	r1, #50	; 0x32
 801b366:	0018      	movs	r0, r3
 801b368:	f007 f946 	bl	80225f8 <sniprintf>
 801b36c:	0002      	movs	r2, r0
 801b36e:	213e      	movs	r1, #62	; 0x3e
 801b370:	187b      	adds	r3, r7, r1
 801b372:	701a      	strb	r2, [r3, #0]
 801b374:	187b      	adds	r3, r7, r1
 801b376:	781b      	ldrb	r3, [r3, #0]
 801b378:	2b31      	cmp	r3, #49	; 0x31
 801b37a:	d80d      	bhi.n	801b398 <USBPD_DPM_RequestGetBatteryCapability+0x6c>
 801b37c:	193b      	adds	r3, r7, r4
 801b37e:	0018      	movs	r0, r3
 801b380:	f7ea ff24 	bl	80061cc <strlen>
 801b384:	193a      	adds	r2, r7, r4
 801b386:	1dfb      	adds	r3, r7, #7
 801b388:	7819      	ldrb	r1, [r3, #0]
 801b38a:	9000      	str	r0, [sp, #0]
 801b38c:	0013      	movs	r3, r2
 801b38e:	2200      	movs	r2, #0
 801b390:	2006      	movs	r0, #6
 801b392:	f7f6 fb63 	bl	8011a5c <USBPD_TRACE_Add>
 801b396:	e00a      	b.n	801b3ae <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801b398:	230c      	movs	r3, #12
 801b39a:	18fa      	adds	r2, r7, r3
 801b39c:	1dfb      	adds	r3, r7, #7
 801b39e:	7819      	ldrb	r1, [r3, #0]
 801b3a0:	2332      	movs	r3, #50	; 0x32
 801b3a2:	9300      	str	r3, [sp, #0]
 801b3a4:	0013      	movs	r3, r2
 801b3a6:	2200      	movs	r2, #0
 801b3a8:	2006      	movs	r0, #6
 801b3aa:	f7f6 fb57 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801b3ae:	233f      	movs	r3, #63	; 0x3f
 801b3b0:	18fb      	adds	r3, r7, r3
 801b3b2:	781b      	ldrb	r3, [r3, #0]
}
 801b3b4:	0018      	movs	r0, r3
 801b3b6:	46bd      	mov	sp, r7
 801b3b8:	b010      	add	sp, #64	; 0x40
 801b3ba:	bdb0      	pop	{r4, r5, r7, pc}
 801b3bc:	08023730 	.word	0x08023730

0801b3c0 <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 801b3c0:	b5b0      	push	{r4, r5, r7, lr}
 801b3c2:	b092      	sub	sp, #72	; 0x48
 801b3c4:	af02      	add	r7, sp, #8
 801b3c6:	0002      	movs	r2, r0
 801b3c8:	6039      	str	r1, [r7, #0]
 801b3ca:	1dfb      	adds	r3, r7, #7
 801b3cc:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 801b3ce:	253f      	movs	r5, #63	; 0x3f
 801b3d0:	197c      	adds	r4, r7, r5
 801b3d2:	683a      	ldr	r2, [r7, #0]
 801b3d4:	1dfb      	adds	r3, r7, #7
 801b3d6:	7818      	ldrb	r0, [r3, #0]
 801b3d8:	2301      	movs	r3, #1
 801b3da:	9300      	str	r3, [sp, #0]
 801b3dc:	0013      	movs	r3, r2
 801b3de:	2204      	movs	r2, #4
 801b3e0:	2100      	movs	r1, #0
 801b3e2:	f7e5 f9c7 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801b3e6:	0003      	movs	r3, r0
 801b3e8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 801b3ea:	197b      	adds	r3, r7, r5
 801b3ec:	781b      	ldrb	r3, [r3, #0]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d027      	beq.n	801b442 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801b3f2:	4a17      	ldr	r2, [pc, #92]	; (801b450 <USBPD_DPM_RequestGetBatteryStatus+0x90>)
 801b3f4:	240c      	movs	r4, #12
 801b3f6:	193b      	adds	r3, r7, r4
 801b3f8:	2132      	movs	r1, #50	; 0x32
 801b3fa:	0018      	movs	r0, r3
 801b3fc:	f007 f8fc 	bl	80225f8 <sniprintf>
 801b400:	0002      	movs	r2, r0
 801b402:	213e      	movs	r1, #62	; 0x3e
 801b404:	187b      	adds	r3, r7, r1
 801b406:	701a      	strb	r2, [r3, #0]
 801b408:	187b      	adds	r3, r7, r1
 801b40a:	781b      	ldrb	r3, [r3, #0]
 801b40c:	2b31      	cmp	r3, #49	; 0x31
 801b40e:	d80d      	bhi.n	801b42c <USBPD_DPM_RequestGetBatteryStatus+0x6c>
 801b410:	193b      	adds	r3, r7, r4
 801b412:	0018      	movs	r0, r3
 801b414:	f7ea feda 	bl	80061cc <strlen>
 801b418:	193a      	adds	r2, r7, r4
 801b41a:	1dfb      	adds	r3, r7, #7
 801b41c:	7819      	ldrb	r1, [r3, #0]
 801b41e:	9000      	str	r0, [sp, #0]
 801b420:	0013      	movs	r3, r2
 801b422:	2200      	movs	r2, #0
 801b424:	2006      	movs	r0, #6
 801b426:	f7f6 fb19 	bl	8011a5c <USBPD_TRACE_Add>
 801b42a:	e00a      	b.n	801b442 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801b42c:	230c      	movs	r3, #12
 801b42e:	18fa      	adds	r2, r7, r3
 801b430:	1dfb      	adds	r3, r7, #7
 801b432:	7819      	ldrb	r1, [r3, #0]
 801b434:	2332      	movs	r3, #50	; 0x32
 801b436:	9300      	str	r3, [sp, #0]
 801b438:	0013      	movs	r3, r2
 801b43a:	2200      	movs	r2, #0
 801b43c:	2006      	movs	r0, #6
 801b43e:	f7f6 fb0d 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801b442:	233f      	movs	r3, #63	; 0x3f
 801b444:	18fb      	adds	r3, r7, r3
 801b446:	781b      	ldrb	r3, [r3, #0]
}
 801b448:	0018      	movs	r0, r3
 801b44a:	46bd      	mov	sp, r7
 801b44c:	b010      	add	sp, #64	; 0x40
 801b44e:	bdb0      	pop	{r4, r5, r7, pc}
 801b450:	0802375c 	.word	0x0802375c

0801b454 <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 801b454:	b590      	push	{r4, r7, lr}
 801b456:	b093      	sub	sp, #76	; 0x4c
 801b458:	af02      	add	r7, sp, #8
 801b45a:	0002      	movs	r2, r0
 801b45c:	1dfb      	adds	r3, r7, #7
 801b45e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801b460:	213f      	movs	r1, #63	; 0x3f
 801b462:	187b      	adds	r3, r7, r1
 801b464:	2202      	movs	r2, #2
 801b466:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 801b468:	187b      	adds	r3, r7, r1
 801b46a:	781b      	ldrb	r3, [r3, #0]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d027      	beq.n	801b4c0 <USBPD_DPM_RequestSecurityRequest+0x6c>
 801b470:	4a17      	ldr	r2, [pc, #92]	; (801b4d0 <USBPD_DPM_RequestSecurityRequest+0x7c>)
 801b472:	240c      	movs	r4, #12
 801b474:	193b      	adds	r3, r7, r4
 801b476:	2132      	movs	r1, #50	; 0x32
 801b478:	0018      	movs	r0, r3
 801b47a:	f007 f8bd 	bl	80225f8 <sniprintf>
 801b47e:	0002      	movs	r2, r0
 801b480:	213e      	movs	r1, #62	; 0x3e
 801b482:	187b      	adds	r3, r7, r1
 801b484:	701a      	strb	r2, [r3, #0]
 801b486:	187b      	adds	r3, r7, r1
 801b488:	781b      	ldrb	r3, [r3, #0]
 801b48a:	2b31      	cmp	r3, #49	; 0x31
 801b48c:	d80d      	bhi.n	801b4aa <USBPD_DPM_RequestSecurityRequest+0x56>
 801b48e:	193b      	adds	r3, r7, r4
 801b490:	0018      	movs	r0, r3
 801b492:	f7ea fe9b 	bl	80061cc <strlen>
 801b496:	193a      	adds	r2, r7, r4
 801b498:	1dfb      	adds	r3, r7, #7
 801b49a:	7819      	ldrb	r1, [r3, #0]
 801b49c:	9000      	str	r0, [sp, #0]
 801b49e:	0013      	movs	r3, r2
 801b4a0:	2200      	movs	r2, #0
 801b4a2:	2006      	movs	r0, #6
 801b4a4:	f7f6 fada 	bl	8011a5c <USBPD_TRACE_Add>
 801b4a8:	e00a      	b.n	801b4c0 <USBPD_DPM_RequestSecurityRequest+0x6c>
 801b4aa:	230c      	movs	r3, #12
 801b4ac:	18fa      	adds	r2, r7, r3
 801b4ae:	1dfb      	adds	r3, r7, #7
 801b4b0:	7819      	ldrb	r1, [r3, #0]
 801b4b2:	2332      	movs	r3, #50	; 0x32
 801b4b4:	9300      	str	r3, [sp, #0]
 801b4b6:	0013      	movs	r3, r2
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	2006      	movs	r0, #6
 801b4bc:	f7f6 face 	bl	8011a5c <USBPD_TRACE_Add>
  return _status;
 801b4c0:	233f      	movs	r3, #63	; 0x3f
 801b4c2:	18fb      	adds	r3, r7, r3
 801b4c4:	781b      	ldrb	r3, [r3, #0]
}
 801b4c6:	0018      	movs	r0, r3
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	b011      	add	sp, #68	; 0x44
 801b4cc:	bd90      	pop	{r4, r7, pc}
 801b4ce:	46c0      	nop			; (mov r8, r8)
 801b4d0:	0802378c 	.word	0x0802378c

0801b4d4 <USBPD_DPM_RequestSRCPDO>:
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @param  RequestedCurrent Requested current (in MA and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSRCPDO(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage, uint16_t RequestedCurrent)
{
 801b4d4:	b5b0      	push	{r4, r5, r7, lr}
 801b4d6:	b094      	sub	sp, #80	; 0x50
 801b4d8:	af02      	add	r7, sp, #8
 801b4da:	0005      	movs	r5, r0
 801b4dc:	000c      	movs	r4, r1
 801b4de:	0010      	movs	r0, r2
 801b4e0:	0019      	movs	r1, r3
 801b4e2:	1dfb      	adds	r3, r7, #7
 801b4e4:	1c2a      	adds	r2, r5, #0
 801b4e6:	701a      	strb	r2, [r3, #0]
 801b4e8:	1dbb      	adds	r3, r7, #6
 801b4ea:	1c22      	adds	r2, r4, #0
 801b4ec:	701a      	strb	r2, [r3, #0]
 801b4ee:	1d3b      	adds	r3, r7, #4
 801b4f0:	1c02      	adds	r2, r0, #0
 801b4f2:	801a      	strh	r2, [r3, #0]
 801b4f4:	1cbb      	adds	r3, r7, #2
 801b4f6:	1c0a      	adds	r2, r1, #0
 801b4f8:	801a      	strh	r2, [r3, #0]
	USBPD_StatusTypeDef _status = USBPD_ERROR;
 801b4fa:	2547      	movs	r5, #71	; 0x47
 801b4fc:	197b      	adds	r3, r7, r5
 801b4fe:	2202      	movs	r2, #2
 801b500:	701a      	strb	r2, [r3, #0]
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;

	/* Initialize RDO object*/
	rdo.d32 = 0;
 801b502:	2300      	movs	r3, #0
 801b504:	643b      	str	r3, [r7, #64]	; 0x40

	USER_SERV_SNK_BuildRequestedRDO(PortNum,IndexSrcPDO, RequestedVoltage, RequestedCurrent, &rdo, &pdo_object);
 801b506:	1dbb      	adds	r3, r7, #6
 801b508:	781b      	ldrb	r3, [r3, #0]
 801b50a:	b299      	uxth	r1, r3
 801b50c:	1cbb      	adds	r3, r7, #2
 801b50e:	881c      	ldrh	r4, [r3, #0]
 801b510:	1d3b      	adds	r3, r7, #4
 801b512:	881a      	ldrh	r2, [r3, #0]
 801b514:	1dfb      	adds	r3, r7, #7
 801b516:	7818      	ldrb	r0, [r3, #0]
 801b518:	233c      	movs	r3, #60	; 0x3c
 801b51a:	18fb      	adds	r3, r7, r3
 801b51c:	9301      	str	r3, [sp, #4]
 801b51e:	2340      	movs	r3, #64	; 0x40
 801b520:	18fb      	adds	r3, r7, r3
 801b522:	9300      	str	r3, [sp, #0]
 801b524:	0023      	movs	r3, r4
 801b526:	f000 ff3d 	bl	801c3a4 <USER_SERV_SNK_BuildRequestedRDO>

	/*Send requested rdo to Policy Engine */
	_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 801b52a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b52c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b52e:	197c      	adds	r4, r7, r5
 801b530:	1dfb      	adds	r3, r7, #7
 801b532:	781b      	ldrb	r3, [r3, #0]
 801b534:	0018      	movs	r0, r3
 801b536:	f7e5 f8e7 	bl	8000708 <USBPD_PE_Send_Request>
 801b53a:	0003      	movs	r3, r0
 801b53c:	7023      	strb	r3, [r4, #0]

    /* USER CODE END USBPD_DPM_RequestMessageRequest */
	DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 801b53e:	197b      	adds	r3, r7, r5
 801b540:	781b      	ldrb	r3, [r3, #0]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d027      	beq.n	801b596 <USBPD_DPM_RequestSRCPDO+0xc2>
 801b546:	4a17      	ldr	r2, [pc, #92]	; (801b5a4 <USBPD_DPM_RequestSRCPDO+0xd0>)
 801b548:	2408      	movs	r4, #8
 801b54a:	193b      	adds	r3, r7, r4
 801b54c:	2132      	movs	r1, #50	; 0x32
 801b54e:	0018      	movs	r0, r3
 801b550:	f007 f852 	bl	80225f8 <sniprintf>
 801b554:	0002      	movs	r2, r0
 801b556:	2146      	movs	r1, #70	; 0x46
 801b558:	187b      	adds	r3, r7, r1
 801b55a:	701a      	strb	r2, [r3, #0]
 801b55c:	187b      	adds	r3, r7, r1
 801b55e:	781b      	ldrb	r3, [r3, #0]
 801b560:	2b31      	cmp	r3, #49	; 0x31
 801b562:	d80d      	bhi.n	801b580 <USBPD_DPM_RequestSRCPDO+0xac>
 801b564:	193b      	adds	r3, r7, r4
 801b566:	0018      	movs	r0, r3
 801b568:	f7ea fe30 	bl	80061cc <strlen>
 801b56c:	193a      	adds	r2, r7, r4
 801b56e:	1dfb      	adds	r3, r7, #7
 801b570:	7819      	ldrb	r1, [r3, #0]
 801b572:	9000      	str	r0, [sp, #0]
 801b574:	0013      	movs	r3, r2
 801b576:	2200      	movs	r2, #0
 801b578:	2006      	movs	r0, #6
 801b57a:	f7f6 fa6f 	bl	8011a5c <USBPD_TRACE_Add>
 801b57e:	e00a      	b.n	801b596 <USBPD_DPM_RequestSRCPDO+0xc2>
 801b580:	2308      	movs	r3, #8
 801b582:	18fa      	adds	r2, r7, r3
 801b584:	1dfb      	adds	r3, r7, #7
 801b586:	7819      	ldrb	r1, [r3, #0]
 801b588:	2332      	movs	r3, #50	; 0x32
 801b58a:	9300      	str	r3, [sp, #0]
 801b58c:	0013      	movs	r3, r2
 801b58e:	2200      	movs	r2, #0
 801b590:	2006      	movs	r0, #6
 801b592:	f7f6 fa63 	bl	8011a5c <USBPD_TRACE_Add>
	return _status;
 801b596:	2347      	movs	r3, #71	; 0x47
 801b598:	18fb      	adds	r3, r7, r3
 801b59a:	781b      	ldrb	r3, [r3, #0]
}
 801b59c:	0018      	movs	r0, r3
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	b012      	add	sp, #72	; 0x48
 801b5a2:	bdb0      	pop	{r4, r5, r7, pc}
 801b5a4:	08023338 	.word	0x08023338

0801b5a8 <BSP_PWR_VBUSGetVoltage>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Voltage measured voltage level (in mV)
  */
__weak uint32_t BSP_PWR_VBUSGetVoltage(uint32_t PortId)
{
 801b5a8:	b580      	push	{r7, lr}
 801b5aa:	b086      	sub	sp, #24
 801b5ac:	af02      	add	r7, sp, #8
 801b5ae:	6078      	str	r0, [r7, #4]
  PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetVoltage");
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	b2d9      	uxtb	r1, r3
 801b5b4:	4b0a      	ldr	r3, [pc, #40]	; (801b5e0 <BSP_PWR_VBUSGetVoltage+0x38>)
 801b5b6:	2227      	movs	r2, #39	; 0x27
 801b5b8:	9200      	str	r2, [sp, #0]
 801b5ba:	2200      	movs	r2, #0
 801b5bc:	2006      	movs	r0, #6
 801b5be:	f7f6 fa4d 	bl	8011a5c <USBPD_TRACE_Add>
/* USER CODE BEGIN BSP_PWR_VBUSGetVoltage */
  uint32_t voltage = 0;
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetVoltage(PortId, &voltage);
 801b5c6:	230c      	movs	r3, #12
 801b5c8:	18fa      	adds	r2, r7, r3
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	0011      	movs	r1, r2
 801b5ce:	0018      	movs	r0, r3
 801b5d0:	f000 f874 	bl	801b6bc <BSP_USBPD_PWR_VBUSGetVoltage>
  return voltage;
 801b5d4:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetVoltage */
}
 801b5d6:	0018      	movs	r0, r3
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	b004      	add	sp, #16
 801b5dc:	bd80      	pop	{r7, pc}
 801b5de:	46c0      	nop			; (mov r8, r8)
 801b5e0:	0802392c 	.word	0x0802392c

0801b5e4 <BSP_PWR_VBUSGetCurrent>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Current measured current level (in mA)
  */
__weak int32_t BSP_PWR_VBUSGetCurrent(uint32_t PortId)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b086      	sub	sp, #24
 801b5e8:	af02      	add	r7, sp, #8
 801b5ea:	6078      	str	r0, [r7, #4]
  PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetCurrent");
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	b2d9      	uxtb	r1, r3
 801b5f0:	4b0a      	ldr	r3, [pc, #40]	; (801b61c <BSP_PWR_VBUSGetCurrent+0x38>)
 801b5f2:	2227      	movs	r2, #39	; 0x27
 801b5f4:	9200      	str	r2, [sp, #0]
 801b5f6:	2200      	movs	r2, #0
 801b5f8:	2006      	movs	r0, #6
 801b5fa:	f7f6 fa2f 	bl	8011a5c <USBPD_TRACE_Add>
/* USER CODE BEGIN BSP_PWR_VBUSGetCurrent */
  int32_t current = 0;
 801b5fe:	2300      	movs	r3, #0
 801b600:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetCurrent(PortId, &current);
 801b602:	230c      	movs	r3, #12
 801b604:	18fa      	adds	r2, r7, r3
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	0011      	movs	r1, r2
 801b60a:	0018      	movs	r0, r3
 801b60c:	f000 f892 	bl	801b734 <BSP_USBPD_PWR_VBUSGetCurrent>

  return current;
 801b610:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetCurrent */
}
 801b612:	0018      	movs	r0, r3
 801b614:	46bd      	mov	sp, r7
 801b616:	b004      	add	sp, #16
 801b618:	bd80      	pop	{r7, pc}
 801b61a:	46c0      	nop			; (mov r8, r8)
 801b61c:	08023954 	.word	0x08023954

0801b620 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801b620:	b580      	push	{r7, lr}
 801b622:	b084      	sub	sp, #16
 801b624:	af00      	add	r7, sp, #0
 801b626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801b628:	2300      	movs	r3, #0
 801b62a:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	2b01      	cmp	r3, #1
 801b630:	d902      	bls.n	801b638 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801b632:	2302      	movs	r3, #2
 801b634:	425b      	negs	r3, r3
 801b636:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801b638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801b63a:	0018      	movs	r0, r3
 801b63c:	46bd      	mov	sp, r7
 801b63e:	b004      	add	sp, #16
 801b640:	bd80      	pop	{r7, pc}
	...

0801b644 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801b644:	b580      	push	{r7, lr}
 801b646:	b086      	sub	sp, #24
 801b648:	af02      	add	r7, sp, #8
 801b64a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801b64c:	2300      	movs	r3, #0
 801b64e:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	2b01      	cmp	r3, #1
 801b654:	d903      	bls.n	801b65e <BSP_USBPD_PWR_VBUSInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801b656:	2302      	movs	r3, #2
 801b658:	425b      	negs	r3, r3
 801b65a:	60fb      	str	r3, [r7, #12]
 801b65c:	e008      	b.n	801b670 <BSP_USBPD_PWR_VBUSInit+0x2c>
  {
    /* !!!
      BSP_PWR_VBUSInit is obsolete. You may need to move your user code
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	b2d9      	uxtb	r1, r3
 801b662:	4b06      	ldr	r3, [pc, #24]	; (801b67c <BSP_USBPD_PWR_VBUSInit+0x38>)
 801b664:	2225      	movs	r2, #37	; 0x25
 801b666:	9200      	str	r2, [sp, #0]
 801b668:	2200      	movs	r2, #0
 801b66a:	2006      	movs	r0, #6
 801b66c:	f7f6 f9f6 	bl	8011a5c <USBPD_TRACE_Add>
  }

  return ret;
 801b670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801b672:	0018      	movs	r0, r3
 801b674:	46bd      	mov	sp, r7
 801b676:	b004      	add	sp, #16
 801b678:	bd80      	pop	{r7, pc}
 801b67a:	46c0      	nop			; (mov r8, r8)
 801b67c:	08023b68 	.word	0x08023b68

0801b680 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801b680:	b580      	push	{r7, lr}
 801b682:	b086      	sub	sp, #24
 801b684:	af02      	add	r7, sp, #8
 801b686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801b688:	230b      	movs	r3, #11
 801b68a:	425b      	negs	r3, r3
 801b68c:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	2b01      	cmp	r3, #1
 801b692:	d902      	bls.n	801b69a <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801b694:	2302      	movs	r3, #2
 801b696:	425b      	negs	r3, r3
 801b698:	60fb      	str	r3, [r7, #12]
  }
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	b2d9      	uxtb	r1, r3
 801b69e:	4b06      	ldr	r3, [pc, #24]	; (801b6b8 <BSP_USBPD_PWR_VBUSDeInit+0x38>)
 801b6a0:	2227      	movs	r2, #39	; 0x27
 801b6a2:	9200      	str	r2, [sp, #0]
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	2006      	movs	r0, #6
 801b6a8:	f7f6 f9d8 	bl	8011a5c <USBPD_TRACE_Add>
  return ret;
 801b6ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801b6ae:	0018      	movs	r0, r3
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	b004      	add	sp, #16
 801b6b4:	bd80      	pop	{r7, pc}
 801b6b6:	46c0      	nop			; (mov r8, r8)
 801b6b8:	08023b90 	.word	0x08023b90

0801b6bc <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	b086      	sub	sp, #24
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	6078      	str	r0, [r7, #4]
 801b6c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid */
  int32_t ret = BSP_ERROR_NONE;
 801b6c6:	2300      	movs	r3, #0
 801b6c8:	617b      	str	r3, [r7, #20]
  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	2b01      	cmp	r3, #1
 801b6ce:	d802      	bhi.n	801b6d6 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801b6d0:	683b      	ldr	r3, [r7, #0]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d106      	bne.n	801b6e4 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  {
	  ret = BSP_ERROR_WRONG_PARAM;
 801b6d6:	2302      	movs	r3, #2
 801b6d8:	425b      	negs	r3, r3
 801b6da:	617b      	str	r3, [r7, #20]
	  *pVoltage = 0;
 801b6dc:	683b      	ldr	r3, [r7, #0]
 801b6de:	2200      	movs	r2, #0
 801b6e0:	601a      	str	r2, [r3, #0]
 801b6e2:	e017      	b.n	801b714 <BSP_USBPD_PWR_VBUSGetVoltage+0x58>
  {
	  uint32_t vadc;
	  uint32_t vsense;

	  //Calculate vadc(mV) on ADC pin based on ADC resolution and reference voltage VDDA
	  vadc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801b6e4:	4b0e      	ldr	r3, [pc, #56]	; (801b720 <BSP_USBPD_PWR_VBUSGetVoltage+0x64>)
 801b6e6:	881b      	ldrh	r3, [r3, #0]
 801b6e8:	b29b      	uxth	r3, r3
 801b6ea:	001a      	movs	r2, r3
 801b6ec:	4b0d      	ldr	r3, [pc, #52]	; (801b724 <BSP_USBPD_PWR_VBUSGetVoltage+0x68>)
 801b6ee:	4353      	muls	r3, r2
 801b6f0:	490d      	ldr	r1, [pc, #52]	; (801b728 <BSP_USBPD_PWR_VBUSGetVoltage+0x6c>)
 801b6f2:	0018      	movs	r0, r3
 801b6f4:	f7ea fd7c 	bl	80061f0 <__udivsi3>
 801b6f8:	0003      	movs	r3, r0
 801b6fa:	613b      	str	r3, [r7, #16]
			  LL_ADC_RESOLUTION_12B); /* mV */


	  /* Calculate VBUS on PD_sense line*/
	  /* Value is multiplied by 5.97 (Divider R_B/R_A (40.2K/200K) for VSENSE) */
	  vsense = vadc * (R_A + R_B)/R_B;
 801b6fc:	693b      	ldr	r3, [r7, #16]
 801b6fe:	4a0b      	ldr	r2, [pc, #44]	; (801b72c <BSP_USBPD_PWR_VBUSGetVoltage+0x70>)
 801b700:	4353      	muls	r3, r2
 801b702:	490b      	ldr	r1, [pc, #44]	; (801b730 <BSP_USBPD_PWR_VBUSGetVoltage+0x74>)
 801b704:	0018      	movs	r0, r3
 801b706:	f7ea fd73 	bl	80061f0 <__udivsi3>
 801b70a:	0003      	movs	r3, r0
 801b70c:	60fb      	str	r3, [r7, #12]
	  *pVoltage = vsense;
 801b70e:	683b      	ldr	r3, [r7, #0]
 801b710:	68fa      	ldr	r2, [r7, #12]
 801b712:	601a      	str	r2, [r3, #0]
  }
  return ret;
 801b714:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801b716:	0018      	movs	r0, r3
 801b718:	46bd      	mov	sp, r7
 801b71a:	b006      	add	sp, #24
 801b71c:	bd80      	pop	{r7, pc}
 801b71e:	46c0      	nop			; (mov r8, r8)
 801b720:	20000340 	.word	0x20000340
 801b724:	00000ce4 	.word	0x00000ce4
 801b728:	00000fff 	.word	0x00000fff
 801b72c:	0003aa48 	.word	0x0003aa48
 801b730:	00009d08 	.word	0x00009d08

0801b734 <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t Instance, int32_t *pCurrent)
{
 801b734:	b580      	push	{r7, lr}
 801b736:	b086      	sub	sp, #24
 801b738:	af00      	add	r7, sp, #0
 801b73a:	6078      	str	r0, [r7, #4]
 801b73c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	2b01      	cmp	r3, #1
 801b742:	d802      	bhi.n	801b74a <BSP_USBPD_PWR_VBUSGetCurrent+0x16>
 801b744:	683b      	ldr	r3, [r7, #0]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d106      	bne.n	801b758 <BSP_USBPD_PWR_VBUSGetCurrent+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801b74a:	2302      	movs	r3, #2
 801b74c:	425b      	negs	r3, r3
 801b74e:	617b      	str	r3, [r7, #20]
    *pCurrent = 0;
 801b750:	683b      	ldr	r3, [r7, #0]
 801b752:	2200      	movs	r2, #0
 801b754:	601a      	str	r2, [r3, #0]
 801b756:	e020      	b.n	801b79a <BSP_USBPD_PWR_VBUSGetCurrent+0x66>
  {
	 uint32_t vout_adc;
	 uint32_t isense;

	 //Calculate vout_adc(mV) on ADC pin based on ADC resolution and reference voltage VDDA and raw ADC value
	 vout_adc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801b758:	4b12      	ldr	r3, [pc, #72]	; (801b7a4 <BSP_USBPD_PWR_VBUSGetCurrent+0x70>)
 801b75a:	889b      	ldrh	r3, [r3, #4]
 801b75c:	b29b      	uxth	r3, r3
 801b75e:	001a      	movs	r2, r3
 801b760:	4b11      	ldr	r3, [pc, #68]	; (801b7a8 <BSP_USBPD_PWR_VBUSGetCurrent+0x74>)
 801b762:	4353      	muls	r3, r2
 801b764:	4911      	ldr	r1, [pc, #68]	; (801b7ac <BSP_USBPD_PWR_VBUSGetCurrent+0x78>)
 801b766:	0018      	movs	r0, r3
 801b768:	f7ea fd42 	bl	80061f0 <__udivsi3>
 801b76c:	0003      	movs	r3, r0
 801b76e:	613b      	str	r3, [r7, #16]
	  			  aADCxConvertedValues[RANK_2], \
	  			  LL_ADC_RESOLUTION_12B); /* mV */

	 //Calculate isense on PD_sense based on R_SENSE and G of amplifier
	 isense = vout_adc * 1000 / (G_SENSE*R_SENSE_MOHMS); /* mA */
 801b770:	693a      	ldr	r2, [r7, #16]
 801b772:	0013      	movs	r3, r2
 801b774:	015b      	lsls	r3, r3, #5
 801b776:	1a9b      	subs	r3, r3, r2
 801b778:	009b      	lsls	r3, r3, #2
 801b77a:	189b      	adds	r3, r3, r2
 801b77c:	00db      	lsls	r3, r3, #3
 801b77e:	001a      	movs	r2, r3
 801b780:	2396      	movs	r3, #150	; 0x96
 801b782:	0099      	lsls	r1, r3, #2
 801b784:	0010      	movs	r0, r2
 801b786:	f7ea fd33 	bl	80061f0 <__udivsi3>
 801b78a:	0003      	movs	r3, r0
 801b78c:	60fb      	str	r3, [r7, #12]
	*pCurrent = isense;
 801b78e:	68fa      	ldr	r2, [r7, #12]
 801b790:	683b      	ldr	r3, [r7, #0]
 801b792:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801b794:	230b      	movs	r3, #11
 801b796:	425b      	negs	r3, r3
 801b798:	617b      	str	r3, [r7, #20]
  /* !!!
      BSP_PWR_VBUSGetCurrent is obsolete. You may need to move your user code
      inside this function
   !!! */
  //PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetCurrent");
  return ret;
 801b79a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 801b79c:	0018      	movs	r0, r3
 801b79e:	46bd      	mov	sp, r7
 801b7a0:	b006      	add	sp, #24
 801b7a2:	bd80      	pop	{r7, pc}
 801b7a4:	20000340 	.word	0x20000340
 801b7a8:	00000ce4 	.word	0x00000ce4
 801b7ac:	00000fff 	.word	0x00000fff

0801b7b0 <BSP_USBPD_PWR_VBUSGetCurrentOCP>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrentOCP(uint32_t Instance, int32_t *pCurrentOCP)
{
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b086      	sub	sp, #24
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	6078      	str	r0, [r7, #4]
 801b7b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrentOCP))
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	2b01      	cmp	r3, #1
 801b7be:	d802      	bhi.n	801b7c6 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x16>
 801b7c0:	683b      	ldr	r3, [r7, #0]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d106      	bne.n	801b7d4 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801b7c6:	2302      	movs	r3, #2
 801b7c8:	425b      	negs	r3, r3
 801b7ca:	617b      	str	r3, [r7, #20]
    *pCurrentOCP = 0;
 801b7cc:	683b      	ldr	r3, [r7, #0]
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	601a      	str	r2, [r3, #0]
 801b7d2:	e020      	b.n	801b816 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x66>
  {
	 uint32_t vout_adc;
	 uint32_t isense;

	 //Calculate vout_adc(mV) on ADC pin based on ADC resolution and reference voltage VDDA and raw ADC value
	 vout_adc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801b7d4:	4b12      	ldr	r3, [pc, #72]	; (801b820 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x70>)
 801b7d6:	885b      	ldrh	r3, [r3, #2]
 801b7d8:	b29b      	uxth	r3, r3
 801b7da:	001a      	movs	r2, r3
 801b7dc:	4b11      	ldr	r3, [pc, #68]	; (801b824 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x74>)
 801b7de:	4353      	muls	r3, r2
 801b7e0:	4911      	ldr	r1, [pc, #68]	; (801b828 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x78>)
 801b7e2:	0018      	movs	r0, r3
 801b7e4:	f7ea fd04 	bl	80061f0 <__udivsi3>
 801b7e8:	0003      	movs	r3, r0
 801b7ea:	613b      	str	r3, [r7, #16]
	  			  aADCxConvertedValues[RANK_1], \
	  			  LL_ADC_RESOLUTION_12B); /* mV */

	 //Calculate OCP current on PD_OCP line based on R_OCP and G of amplifier INA301
	 isense = vout_adc * 1000 / (G_OCP*R_OCP_MOHMS); /* mA */
 801b7ec:	693a      	ldr	r2, [r7, #16]
 801b7ee:	0013      	movs	r3, r2
 801b7f0:	015b      	lsls	r3, r3, #5
 801b7f2:	1a9b      	subs	r3, r3, r2
 801b7f4:	009b      	lsls	r3, r3, #2
 801b7f6:	189b      	adds	r3, r3, r2
 801b7f8:	00db      	lsls	r3, r3, #3
 801b7fa:	001a      	movs	r2, r3
 801b7fc:	23fa      	movs	r3, #250	; 0xfa
 801b7fe:	0059      	lsls	r1, r3, #1
 801b800:	0010      	movs	r0, r2
 801b802:	f7ea fcf5 	bl	80061f0 <__udivsi3>
 801b806:	0003      	movs	r3, r0
 801b808:	60fb      	str	r3, [r7, #12]
	*pCurrentOCP = isense;
 801b80a:	68fa      	ldr	r2, [r7, #12]
 801b80c:	683b      	ldr	r3, [r7, #0]
 801b80e:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801b810:	230b      	movs	r3, #11
 801b812:	425b      	negs	r3, r3
 801b814:	617b      	str	r3, [r7, #20]
  }

  return ret;
 801b816:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 801b818:	0018      	movs	r0, r3
 801b81a:	46bd      	mov	sp, r7
 801b81c:	b006      	add	sp, #24
 801b81e:	bd80      	pop	{r7, pc}
 801b820:	20000340 	.word	0x20000340
 801b824:	00000ce4 	.word	0x00000ce4
 801b828:	00000fff 	.word	0x00000fff

0801b82c <BSP_PWR_VBUSGetCurrentOCP>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Current measured current level (in mA)
  */
__weak int32_t BSP_PWR_VBUSGetCurrentOCP(uint32_t PortId)
{
 801b82c:	b580      	push	{r7, lr}
 801b82e:	b084      	sub	sp, #16
 801b830:	af00      	add	r7, sp, #0
 801b832:	6078      	str	r0, [r7, #4]
  //PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetCurrentOCP");
/* USER CODE BEGIN BSP_PWR_VBUSGetCurrent */
  int32_t currentOCP = 0;
 801b834:	2300      	movs	r3, #0
 801b836:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetCurrentOCP(PortId, &currentOCP);
 801b838:	230c      	movs	r3, #12
 801b83a:	18fa      	adds	r2, r7, r3
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	0011      	movs	r1, r2
 801b840:	0018      	movs	r0, r3
 801b842:	f7ff ffb5 	bl	801b7b0 <BSP_USBPD_PWR_VBUSGetCurrentOCP>

  return currentOCP;
 801b846:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetCurrent */
}
 801b848:	0018      	movs	r0, r3
 801b84a:	46bd      	mov	sp, r7
 801b84c:	b004      	add	sp, #16
 801b84e:	bd80      	pop	{r7, pc}

0801b850 <USBPD_USER_SERV_StoreSRCPDO>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_USER_SERV_StoreSRCPDO(uint8_t PortNum, uint8_t *Ptr, uint32_t Size)
{
 801b850:	b580      	push	{r7, lr}
 801b852:	b086      	sub	sp, #24
 801b854:	af00      	add	r7, sp, #0
 801b856:	60b9      	str	r1, [r7, #8]
 801b858:	607a      	str	r2, [r7, #4]
 801b85a:	210f      	movs	r1, #15
 801b85c:	187b      	adds	r3, r7, r1
 801b85e:	1c02      	adds	r2, r0, #0
 801b860:	701a      	strb	r2, [r3, #0]
  /*!< Storage of Received Source PDO values */
  if (Size <= (USBPD_MAX_NB_PDO * 4U))
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	2b1c      	cmp	r3, #28
 801b866:	d82c      	bhi.n	801b8c2 <USBPD_USER_SERV_StoreSRCPDO+0x72>
  {
    uint8_t *rdo;
    DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO = (Size / 4U);
 801b868:	187b      	adds	r3, r7, r1
 801b86a:	781a      	ldrb	r2, [r3, #0]
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	0899      	lsrs	r1, r3, #2
 801b870:	4816      	ldr	r0, [pc, #88]	; (801b8cc <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 801b872:	0013      	movs	r3, r2
 801b874:	009b      	lsls	r3, r3, #2
 801b876:	189b      	adds	r3, r3, r2
 801b878:	011b      	lsls	r3, r3, #4
 801b87a:	18c3      	adds	r3, r0, r3
 801b87c:	331c      	adds	r3, #28
 801b87e:	6019      	str	r1, [r3, #0]
    /* Copy PDO data in DPM Handle field */
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801b880:	2300      	movs	r3, #0
 801b882:	617b      	str	r3, [r7, #20]
 801b884:	e018      	b.n	801b8b8 <USBPD_USER_SERV_StoreSRCPDO+0x68>
    {
      rdo = (uint8_t *)&DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[index];
 801b886:	230f      	movs	r3, #15
 801b888:	18fb      	adds	r3, r7, r3
 801b88a:	781a      	ldrb	r2, [r3, #0]
 801b88c:	0013      	movs	r3, r2
 801b88e:	009b      	lsls	r3, r3, #2
 801b890:	189b      	adds	r3, r3, r2
 801b892:	009b      	lsls	r3, r3, #2
 801b894:	697a      	ldr	r2, [r7, #20]
 801b896:	189b      	adds	r3, r3, r2
 801b898:	009a      	lsls	r2, r3, #2
 801b89a:	4b0c      	ldr	r3, [pc, #48]	; (801b8cc <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 801b89c:	18d3      	adds	r3, r2, r3
 801b89e:	613b      	str	r3, [r7, #16]
      (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 801b8a0:	697b      	ldr	r3, [r7, #20]
 801b8a2:	009b      	lsls	r3, r3, #2
 801b8a4:	68ba      	ldr	r2, [r7, #8]
 801b8a6:	18d1      	adds	r1, r2, r3
 801b8a8:	693b      	ldr	r3, [r7, #16]
 801b8aa:	2204      	movs	r2, #4
 801b8ac:	0018      	movs	r0, r3
 801b8ae:	f006 ffab 	bl	8022808 <memcpy>
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801b8b2:	697b      	ldr	r3, [r7, #20]
 801b8b4:	3301      	adds	r3, #1
 801b8b6:	617b      	str	r3, [r7, #20]
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	089b      	lsrs	r3, r3, #2
 801b8bc:	697a      	ldr	r2, [r7, #20]
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	d3e1      	bcc.n	801b886 <USBPD_USER_SERV_StoreSRCPDO+0x36>
      (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
      */
    }

  }
}
 801b8c2:	46c0      	nop			; (mov r8, r8)
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	b006      	add	sp, #24
 801b8c8:	bd80      	pop	{r7, pc}
 801b8ca:	46c0      	nop			; (mov r8, r8)
 801b8cc:	20002f04 	.word	0x20002f04

0801b8d0 <USBPD_USER_SERV_EvaluateCapa>:
  * @retval None
  */
void USBPD_USER_SERV_EvaluateCapa(uint8_t PortNum,
                                  uint32_t *PtrRequestData,
                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801b8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8d2:	b0ab      	sub	sp, #172	; 0xac
 801b8d4:	af02      	add	r7, sp, #8
 801b8d6:	60b9      	str	r1, [r7, #8]
 801b8d8:	607a      	str	r2, [r7, #4]
 801b8da:	240f      	movs	r4, #15
 801b8dc:	193b      	adds	r3, r7, r4
 801b8de:	1c02      	adds	r2, r0, #0
 801b8e0:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef  fixed_pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801b8e2:	193b      	adds	r3, r7, r4
 801b8e4:	781a      	ldrb	r2, [r3, #0]
 801b8e6:	0013      	movs	r3, r2
 801b8e8:	009b      	lsls	r3, r3, #2
 801b8ea:	189b      	adds	r3, r3, r2
 801b8ec:	011b      	lsls	r3, r3, #4
 801b8ee:	4a66      	ldr	r2, [pc, #408]	; (801ba88 <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 801b8f0:	189b      	adds	r3, r3, r2
 801b8f2:	269c      	movs	r6, #156	; 0x9c
 801b8f4:	19ba      	adds	r2, r7, r6
 801b8f6:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801b8f8:	193b      	adds	r3, r7, r4
 801b8fa:	781b      	ldrb	r3, [r3, #0]
 801b8fc:	2274      	movs	r2, #116	; 0x74
 801b8fe:	435a      	muls	r2, r3
 801b900:	4b62      	ldr	r3, [pc, #392]	; (801ba8c <USBPD_USER_SERV_EvaluateCapa+0x1bc>)
 801b902:	18d3      	adds	r3, r2, r3
 801b904:	2298      	movs	r2, #152	; 0x98
 801b906:	18b9      	adds	r1, r7, r2
 801b908:	600b      	str	r3, [r1, #0]
  uint32_t pdoindex;
  uint32_t size;
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  snkpowerrequestdetails.RequestedVoltageInmVunits = 0;
 801b90a:	2178      	movs	r1, #120	; 0x78
 801b90c:	187b      	adds	r3, r7, r1
 801b90e:	2200      	movs	r2, #0
 801b910:	601a      	str	r2, [r3, #0]
  snkpowerrequestdetails.OperatingCurrentInmAunits = 0;
 801b912:	187b      	adds	r3, r7, r1
 801b914:	2200      	movs	r2, #0
 801b916:	609a      	str	r2, [r3, #8]

  /* Find the Pdo index for the requested voltage, depending on the wanted method */
  pdoindex = USER_SERV_FindVoltageIndex(PortNum, &snkpowerrequestdetails, USER_SERV_PDO_Sel_Method);
 801b918:	193b      	adds	r3, r7, r4
 801b91a:	7818      	ldrb	r0, [r3, #0]
 801b91c:	4b5c      	ldr	r3, [pc, #368]	; (801ba90 <USBPD_USER_SERV_EvaluateCapa+0x1c0>)
 801b91e:	781a      	ldrb	r2, [r3, #0]
 801b920:	187b      	adds	r3, r7, r1
 801b922:	0019      	movs	r1, r3
 801b924:	f000 fa56 	bl	801bdd4 <USER_SERV_FindVoltageIndex>
 801b928:	0003      	movs	r3, r0
 801b92a:	2194      	movs	r1, #148	; 0x94
 801b92c:	1878      	adds	r0, r7, r1
 801b92e:	6003      	str	r3, [r0, #0]

  /* Initialize RDO */
  rdo.d32 = 0;
 801b930:	2300      	movs	r3, #0
 801b932:	258c      	movs	r5, #140	; 0x8c
 801b934:	1978      	adds	r0, r7, r5
 801b936:	6003      	str	r3, [r0, #0]

  /* If no valid SNK PDO or if no SRC PDO match found
      (index>=nb of valid received SRC PDOs or function returned DPM_NO_SRC_PDO_FOUND */
  if (pdoindex >= pdhandle->DPM_NumberOfRcvSRCPDO)
 801b938:	19b8      	adds	r0, r7, r6
 801b93a:	6803      	ldr	r3, [r0, #0]
 801b93c:	69db      	ldr	r3, [r3, #28]
 801b93e:	1879      	adds	r1, r7, r1
 801b940:	680a      	ldr	r2, [r1, #0]
 801b942:	429a      	cmp	r2, r3
 801b944:	d200      	bcs.n	801b948 <USBPD_USER_SERV_EvaluateCapa+0x78>
 801b946:	e085      	b.n	801ba54 <USBPD_USER_SERV_EvaluateCapa+0x184>
  {
#if defined(_TRACE)
    uint8_t msg[] = "USBPD_USER_SERV_EvaluateCapa: could not find desired voltage";
 801b948:	2114      	movs	r1, #20
 801b94a:	187a      	adds	r2, r7, r1
 801b94c:	4b51      	ldr	r3, [pc, #324]	; (801ba94 <USBPD_USER_SERV_EvaluateCapa+0x1c4>)
 801b94e:	0010      	movs	r0, r2
 801b950:	0019      	movs	r1, r3
 801b952:	233d      	movs	r3, #61	; 0x3d
 801b954:	001a      	movs	r2, r3
 801b956:	f006 ff57 	bl	8022808 <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 801b95a:	2114      	movs	r1, #20
 801b95c:	187a      	adds	r2, r7, r1
 801b95e:	193b      	adds	r3, r7, r4
 801b960:	7819      	ldrb	r1, [r3, #0]
 801b962:	233d      	movs	r3, #61	; 0x3d
 801b964:	9300      	str	r3, [sp, #0]
 801b966:	0013      	movs	r3, r2
 801b968:	2200      	movs	r2, #0
 801b96a:	2006      	movs	r0, #6
 801b96c:	f7f6 f876 	bl	8011a5c <USBPD_TRACE_Add>
#endif /* _TRACE */
    fixed_pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 801b970:	19b9      	adds	r1, r7, r6
 801b972:	680b      	ldr	r3, [r1, #0]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	2090      	movs	r0, #144	; 0x90
 801b978:	1839      	adds	r1, r7, r0
 801b97a:	600b      	str	r3, [r1, #0]
    /* Read SNK PDO list for retrieving useful data to fill in RDO */
    USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 801b97c:	2174      	movs	r1, #116	; 0x74
 801b97e:	1879      	adds	r1, r7, r1
 801b980:	2358      	movs	r3, #88	; 0x58
 801b982:	18fa      	adds	r2, r7, r3
 801b984:	193b      	adds	r3, r7, r4
 801b986:	7818      	ldrb	r0, [r3, #0]
 801b988:	000b      	movs	r3, r1
 801b98a:	2101      	movs	r1, #1
 801b98c:	f7fe fb5e 	bl	801a04c <USBPD_PWR_IF_GetPortPDOs>
    /* Store value of 1st SNK PDO (Fixed) in local variable */
    snk_fixed_pdo.d32 = snkpdolist[0];
 801b990:	2158      	movs	r1, #88	; 0x58
 801b992:	187b      	adds	r3, r7, r1
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	657b      	str	r3, [r7, #84]	; 0x54
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 801b998:	238f      	movs	r3, #143	; 0x8f
 801b99a:	18fb      	adds	r3, r7, r3
 801b99c:	781a      	ldrb	r2, [r3, #0]
 801b99e:	2170      	movs	r1, #112	; 0x70
 801b9a0:	438a      	bics	r2, r1
 801b9a2:	1c11      	adds	r1, r2, #0
 801b9a4:	2210      	movs	r2, #16
 801b9a6:	430a      	orrs	r2, r1
 801b9a8:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801b9aa:	2090      	movs	r0, #144	; 0x90
 801b9ac:	183b      	adds	r3, r7, r0
 801b9ae:	881b      	ldrh	r3, [r3, #0]
 801b9b0:	059b      	lsls	r3, r3, #22
 801b9b2:	0d9b      	lsrs	r3, r3, #22
 801b9b4:	b29b      	uxth	r3, r3
 801b9b6:	059b      	lsls	r3, r3, #22
 801b9b8:	0d9b      	lsrs	r3, r3, #22
 801b9ba:	029b      	lsls	r3, r3, #10
 801b9bc:	1979      	adds	r1, r7, r5
 801b9be:	680a      	ldr	r2, [r1, #0]
 801b9c0:	4935      	ldr	r1, [pc, #212]	; (801ba98 <USBPD_USER_SERV_EvaluateCapa+0x1c8>)
 801b9c2:	400a      	ands	r2, r1
 801b9c4:	4313      	orrs	r3, r2
 801b9c6:	1979      	adds	r1, r7, r5
 801b9c8:	600b      	str	r3, [r1, #0]
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801b9ca:	183b      	adds	r3, r7, r0
 801b9cc:	881b      	ldrh	r3, [r3, #0]
 801b9ce:	059b      	lsls	r3, r3, #22
 801b9d0:	0d9b      	lsrs	r3, r3, #22
 801b9d2:	b29a      	uxth	r2, r3
 801b9d4:	197b      	adds	r3, r7, r5
 801b9d6:	0592      	lsls	r2, r2, #22
 801b9d8:	0d90      	lsrs	r0, r2, #22
 801b9da:	881a      	ldrh	r2, [r3, #0]
 801b9dc:	0a92      	lsrs	r2, r2, #10
 801b9de:	0292      	lsls	r2, r2, #10
 801b9e0:	1c11      	adds	r1, r2, #0
 801b9e2:	1c02      	adds	r2, r0, #0
 801b9e4:	430a      	orrs	r2, r1
 801b9e6:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch = 1U;
 801b9e8:	208f      	movs	r0, #143	; 0x8f
 801b9ea:	183b      	adds	r3, r7, r0
 801b9ec:	781a      	ldrb	r2, [r3, #0]
 801b9ee:	2104      	movs	r1, #4
 801b9f0:	430a      	orrs	r2, r1
 801b9f2:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801b9f4:	2157      	movs	r1, #87	; 0x57
 801b9f6:	187b      	adds	r3, r7, r1
 801b9f8:	781b      	ldrb	r3, [r3, #0]
 801b9fa:	075b      	lsls	r3, r3, #29
 801b9fc:	0fdb      	lsrs	r3, r3, #31
 801b9fe:	b2da      	uxtb	r2, r3
 801ba00:	183b      	adds	r3, r7, r0
 801ba02:	2101      	movs	r1, #1
 801ba04:	400a      	ands	r2, r1
 801ba06:	1890      	adds	r0, r2, r2
 801ba08:	781a      	ldrb	r2, [r3, #0]
 801ba0a:	2102      	movs	r1, #2
 801ba0c:	438a      	bics	r2, r1
 801ba0e:	1c11      	adds	r1, r2, #0
 801ba10:	1c02      	adds	r2, r0, #0
 801ba12:	430a      	orrs	r2, r1
 801ba14:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801ba16:	193b      	adds	r3, r7, r4
 801ba18:	781a      	ldrb	r2, [r3, #0]
 801ba1a:	2398      	movs	r3, #152	; 0x98
 801ba1c:	18fb      	adds	r3, r7, r3
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	6859      	ldr	r1, [r3, #4]
 801ba22:	4819      	ldr	r0, [pc, #100]	; (801ba88 <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 801ba24:	0013      	movs	r3, r2
 801ba26:	009b      	lsls	r3, r3, #2
 801ba28:	189b      	adds	r3, r3, r2
 801ba2a:	011b      	lsls	r3, r3, #4
 801ba2c:	18c3      	adds	r3, r0, r3
 801ba2e:	334c      	adds	r3, #76	; 0x4c
 801ba30:	6019      	str	r1, [r3, #0]

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 801ba32:	197b      	adds	r3, r7, r5
 801ba34:	681a      	ldr	r2, [r3, #0]
 801ba36:	19bb      	adds	r3, r7, r6
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	63da      	str	r2, [r3, #60]	; 0x3c
    *PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	2200      	movs	r2, #0
 801ba40:	601a      	str	r2, [r3, #0]
    *PtrRequestData = rdo.d32;
 801ba42:	197b      	adds	r3, r7, r5
 801ba44:	681a      	ldr	r2, [r3, #0]
 801ba46:	68bb      	ldr	r3, [r7, #8]
 801ba48:	601a      	str	r2, [r3, #0]
    pdhandle->DPM_RequestedVoltage = 5000U;
 801ba4a:	19bb      	adds	r3, r7, r6
 801ba4c:	681b      	ldr	r3, [r3, #0]
 801ba4e:	4a13      	ldr	r2, [pc, #76]	; (801ba9c <USBPD_USER_SERV_EvaluateCapa+0x1cc>)
 801ba50:	649a      	str	r2, [r3, #72]	; 0x48
 801ba52:	e015      	b.n	801ba80 <USBPD_USER_SERV_EvaluateCapa+0x1b0>
    return;
  }

  USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, pdoindex, &snkpowerrequestdetails, &rdo, PtrPowerObjectType);
 801ba54:	2394      	movs	r3, #148	; 0x94
 801ba56:	18fb      	adds	r3, r7, r3
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	b2d9      	uxtb	r1, r3
 801ba5c:	238c      	movs	r3, #140	; 0x8c
 801ba5e:	18fc      	adds	r4, r7, r3
 801ba60:	2378      	movs	r3, #120	; 0x78
 801ba62:	18fa      	adds	r2, r7, r3
 801ba64:	230f      	movs	r3, #15
 801ba66:	18fb      	adds	r3, r7, r3
 801ba68:	7818      	ldrb	r0, [r3, #0]
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	9300      	str	r3, [sp, #0]
 801ba6e:	0023      	movs	r3, r4
 801ba70:	f000 faaa 	bl	801bfc8 <USER_SERV_SNK_BuildRDOfromSelectedPDO>

  *PtrRequestData = pdhandle->DPM_RequestDOMsg;
 801ba74:	239c      	movs	r3, #156	; 0x9c
 801ba76:	18fb      	adds	r3, r7, r3
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801ba7c:	68bb      	ldr	r3, [r7, #8]
 801ba7e:	601a      	str	r2, [r3, #0]
}
 801ba80:	46bd      	mov	sp, r7
 801ba82:	b029      	add	sp, #164	; 0xa4
 801ba84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba86:	46c0      	nop			; (mov r8, r8)
 801ba88:	20002f04 	.word	0x20002f04
 801ba8c:	200000f8 	.word	0x200000f8
 801ba90:	20002f00 	.word	0x20002f00
 801ba94:	08023e98 	.word	0x08023e98
 801ba98:	fff003ff 	.word	0xfff003ff
 801ba9c:	00001388 	.word	0x00001388

0801baa0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>:
  */
uint32_t USER_SERV_SNK_EvaluateMatchWithSRCPDO(uint8_t PortNum,
                                                      uint32_t SrcPDO,
                                                      uint32_t *PtrRequestedVoltage,
                                                      uint32_t *PtrRequestedPower)
{
 801baa0:	b590      	push	{r4, r7, lr}
 801baa2:	b09b      	sub	sp, #108	; 0x6c
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	60b9      	str	r1, [r7, #8]
 801baa8:	607a      	str	r2, [r7, #4]
 801baaa:	603b      	str	r3, [r7, #0]
 801baac:	240f      	movs	r4, #15
 801baae:	193b      	adds	r3, r7, r4
 801bab0:	1c02      	adds	r2, r0, #0
 801bab2:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef srcpdo;
  USBPD_PDO_TypeDef snkpdo;
  uint32_t match = USBPD_FALSE;
 801bab4:	2300      	movs	r3, #0
 801bab6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t currentrequestedpower;
  uint32_t maxrequestedvoltage;
  uint32_t currentrequestedvoltage;

  /* Retrieve SNK PDO list from PWR_IF storage : PDO values + nb of u32 written by PWR_IF (nb of PDOs) */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)snkpdo_array, &nbsnkpdo);
 801bab8:	2330      	movs	r3, #48	; 0x30
 801baba:	18f9      	adds	r1, r7, r3
 801babc:	2314      	movs	r3, #20
 801babe:	18fa      	adds	r2, r7, r3
 801bac0:	193b      	adds	r3, r7, r4
 801bac2:	7818      	ldrb	r0, [r3, #0]
 801bac4:	000b      	movs	r3, r1
 801bac6:	2101      	movs	r1, #1
 801bac8:	f7fe fac0 	bl	801a04c <USBPD_PWR_IF_GetPortPDOs>

  if (0 == nbsnkpdo)
 801bacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d101      	bne.n	801bad6 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x36>
  {
    return (USBPD_FALSE);
 801bad2:	2300      	movs	r3, #0
 801bad4:	e179      	b.n	801bdca <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  /* Set default output values */
  maxrequestedpower    = 0;
 801bad6:	2300      	movs	r3, #0
 801bad8:	663b      	str	r3, [r7, #96]	; 0x60
  maxrequestedvoltage  = 0;
 801bada:	2300      	movs	r3, #0
 801badc:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Check SRC PDO value according to its type */
  srcpdo.d32 = SrcPDO;
 801bade:	68bb      	ldr	r3, [r7, #8]
 801bae0:	63bb      	str	r3, [r7, #56]	; 0x38
  switch (srcpdo.GenericPDO.PowerObject)
 801bae2:	233b      	movs	r3, #59	; 0x3b
 801bae4:	18fb      	adds	r3, r7, r3
 801bae6:	781b      	ldrb	r3, [r3, #0]
 801bae8:	061b      	lsls	r3, r3, #24
 801baea:	0f9b      	lsrs	r3, r3, #30
 801baec:	b2db      	uxtb	r3, r3
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d003      	beq.n	801bafa <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x5a>
 801baf2:	2b03      	cmp	r3, #3
 801baf4:	d100      	bne.n	801baf8 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x58>
 801baf6:	e06c      	b.n	801bbd2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x132>
 801baf8:	e159      	b.n	801bdae <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30e>
  {
    /* SRC Fixed Supply PDO */
    case USBPD_CORE_PDO_TYPE_FIXED:
    {
      srcvoltage50mv = srcpdo.SRCFixedPDO.VoltageIn50mVunits;
 801bafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bafc:	031b      	lsls	r3, r3, #12
 801bafe:	0d9b      	lsrs	r3, r3, #22
 801bb00:	b29a      	uxth	r2, r3
 801bb02:	2342      	movs	r3, #66	; 0x42
 801bb04:	18fb      	adds	r3, r7, r3
 801bb06:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent10ma = srcpdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801bb08:	2338      	movs	r3, #56	; 0x38
 801bb0a:	18fb      	adds	r3, r7, r3
 801bb0c:	881b      	ldrh	r3, [r3, #0]
 801bb0e:	059b      	lsls	r3, r3, #22
 801bb10:	0d9b      	lsrs	r3, r3, #22
 801bb12:	b29a      	uxth	r2, r3
 801bb14:	2340      	movs	r3, #64	; 0x40
 801bb16:	18fb      	adds	r3, r7, r3
 801bb18:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801bb1a:	2352      	movs	r3, #82	; 0x52
 801bb1c:	18fb      	adds	r3, r7, r3
 801bb1e:	2200      	movs	r2, #0
 801bb20:	801a      	strh	r2, [r3, #0]
 801bb22:	e04f      	b.n	801bbc4 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x124>
      {
        currentrequestedpower = 0;
 801bb24:	2300      	movs	r3, #0
 801bb26:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 801bb28:	2300      	movs	r3, #0
 801bb2a:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 801bb2c:	2352      	movs	r3, #82	; 0x52
 801bb2e:	18fb      	adds	r3, r7, r3
 801bb30:	881a      	ldrh	r2, [r3, #0]
 801bb32:	2314      	movs	r3, #20
 801bb34:	18fb      	adds	r3, r7, r3
 801bb36:	0092      	lsls	r2, r2, #2
 801bb38:	58d3      	ldr	r3, [r2, r3]
 801bb3a:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 801bb3c:	2337      	movs	r3, #55	; 0x37
 801bb3e:	18fb      	adds	r3, r7, r3
 801bb40:	781b      	ldrb	r3, [r3, #0]
 801bb42:	061b      	lsls	r3, r3, #24
 801bb44:	0f9b      	lsrs	r3, r3, #30
 801bb46:	b2db      	uxtb	r3, r3
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d128      	bne.n	801bb9e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0xfe>
        {
          /* SNK Fixed Supply PDO */
          case USBPD_CORE_PDO_TYPE_FIXED:
          {
            snkvoltage50mv = snkpdo.SNKFixedPDO.VoltageIn50mVunits;
 801bb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb4e:	031b      	lsls	r3, r3, #12
 801bb50:	0d9b      	lsrs	r3, r3, #22
 801bb52:	b29a      	uxth	r2, r3
 801bb54:	213e      	movs	r1, #62	; 0x3e
 801bb56:	187b      	adds	r3, r7, r1
 801bb58:	801a      	strh	r2, [r3, #0]
            snkopcurrent10ma = snkpdo.SNKFixedPDO.OperationalCurrentIn10mAunits;
 801bb5a:	2334      	movs	r3, #52	; 0x34
 801bb5c:	18fb      	adds	r3, r7, r3
 801bb5e:	881b      	ldrh	r3, [r3, #0]
 801bb60:	059b      	lsls	r3, r3, #22
 801bb62:	0d9b      	lsrs	r3, r3, #22
 801bb64:	b29a      	uxth	r2, r3
 801bb66:	203c      	movs	r0, #60	; 0x3c
 801bb68:	183b      	adds	r3, r7, r0
 801bb6a:	801a      	strh	r2, [r3, #0]

               Requested Voltage: SNK Voltage
               Requested Op Current: SNK Op Current
               Requested Max Current: SNK Op Current
            */
            if ((snkvoltage50mv == srcvoltage50mv) && (snkopcurrent10ma <= srcmaxcurrent10ma))
 801bb6c:	187a      	adds	r2, r7, r1
 801bb6e:	2342      	movs	r3, #66	; 0x42
 801bb70:	18fb      	adds	r3, r7, r3
 801bb72:	8812      	ldrh	r2, [r2, #0]
 801bb74:	881b      	ldrh	r3, [r3, #0]
 801bb76:	429a      	cmp	r2, r3
 801bb78:	d113      	bne.n	801bba2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
 801bb7a:	183a      	adds	r2, r7, r0
 801bb7c:	2340      	movs	r3, #64	; 0x40
 801bb7e:	18fb      	adds	r3, r7, r3
 801bb80:	8812      	ldrh	r2, [r2, #0]
 801bb82:	881b      	ldrh	r3, [r3, #0]
 801bb84:	429a      	cmp	r2, r3
 801bb86:	d80c      	bhi.n	801bba2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
            {
              currentrequestedpower = (snkvoltage50mv * snkopcurrent10ma) / 2U; /* To get value in mW */
 801bb88:	187b      	adds	r3, r7, r1
 801bb8a:	881b      	ldrh	r3, [r3, #0]
 801bb8c:	183a      	adds	r2, r7, r0
 801bb8e:	8812      	ldrh	r2, [r2, #0]
 801bb90:	4353      	muls	r3, r2
 801bb92:	085b      	lsrs	r3, r3, #1
 801bb94:	65fb      	str	r3, [r7, #92]	; 0x5c
              currentrequestedvoltage = snkvoltage50mv;
 801bb96:	187b      	adds	r3, r7, r1
 801bb98:	881b      	ldrh	r3, [r3, #0]
 801bb9a:	657b      	str	r3, [r7, #84]	; 0x54
            }
            break;
 801bb9c:	e001      	b.n	801bba2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
          }
          /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;
 801bb9e:	46c0      	nop			; (mov r8, r8)
 801bba0:	e000      	b.n	801bba4 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x104>
            break;
 801bba2:	46c0      	nop			; (mov r8, r8)

          default:
            break;
        }

        if (currentrequestedpower > maxrequestedpower)
 801bba4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bba8:	429a      	cmp	r2, r3
 801bbaa:	d905      	bls.n	801bbb8 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x118>
        {
          match = USBPD_TRUE;
 801bbac:	2301      	movs	r3, #1
 801bbae:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 801bbb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bbb2:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 801bbb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bbb6:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801bbb8:	2152      	movs	r1, #82	; 0x52
 801bbba:	187b      	adds	r3, r7, r1
 801bbbc:	881a      	ldrh	r2, [r3, #0]
 801bbbe:	187b      	adds	r3, r7, r1
 801bbc0:	3201      	adds	r2, #1
 801bbc2:	801a      	strh	r2, [r3, #0]
 801bbc4:	2352      	movs	r3, #82	; 0x52
 801bbc6:	18fb      	adds	r3, r7, r3
 801bbc8:	881a      	ldrh	r2, [r3, #0]
 801bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbcc:	429a      	cmp	r2, r3
 801bbce:	d3a9      	bcc.n	801bb24 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x84>
        }
      }
    }
    break;
 801bbd0:	e0ef      	b.n	801bdb2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>
    case USBPD_CORE_PDO_TYPE_APDO:
    {
      uint16_t srcmaxvoltage100mv;
      uint16_t srcminvoltage100mv;
      uint16_t srcmaxcurrent50ma;
      srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801bbd2:	233a      	movs	r3, #58	; 0x3a
 801bbd4:	18fb      	adds	r3, r7, r3
 801bbd6:	881b      	ldrh	r3, [r3, #0]
 801bbd8:	05db      	lsls	r3, r3, #23
 801bbda:	0e1b      	lsrs	r3, r3, #24
 801bbdc:	b2da      	uxtb	r2, r3
 801bbde:	234e      	movs	r3, #78	; 0x4e
 801bbe0:	18fb      	adds	r3, r7, r3
 801bbe2:	801a      	strh	r2, [r3, #0]
      srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801bbe4:	2138      	movs	r1, #56	; 0x38
 801bbe6:	187b      	adds	r3, r7, r1
 801bbe8:	785a      	ldrb	r2, [r3, #1]
 801bbea:	234c      	movs	r3, #76	; 0x4c
 801bbec:	18fb      	adds	r3, r7, r3
 801bbee:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801bbf0:	187b      	adds	r3, r7, r1
 801bbf2:	781b      	ldrb	r3, [r3, #0]
 801bbf4:	065b      	lsls	r3, r3, #25
 801bbf6:	0e5b      	lsrs	r3, r3, #25
 801bbf8:	b2da      	uxtb	r2, r3
 801bbfa:	234a      	movs	r3, #74	; 0x4a
 801bbfc:	18fb      	adds	r3, r7, r3
 801bbfe:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801bc00:	2350      	movs	r3, #80	; 0x50
 801bc02:	18fb      	adds	r3, r7, r3
 801bc04:	2200      	movs	r2, #0
 801bc06:	801a      	strh	r2, [r3, #0]
 801bc08:	e0c9      	b.n	801bd9e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2fe>
      {
        currentrequestedpower = 0;
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 801bc0e:	2300      	movs	r3, #0
 801bc10:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 801bc12:	2350      	movs	r3, #80	; 0x50
 801bc14:	18fb      	adds	r3, r7, r3
 801bc16:	881a      	ldrh	r2, [r3, #0]
 801bc18:	2314      	movs	r3, #20
 801bc1a:	18fb      	adds	r3, r7, r3
 801bc1c:	0092      	lsls	r2, r2, #2
 801bc1e:	58d3      	ldr	r3, [r2, r3]
 801bc20:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 801bc22:	2337      	movs	r3, #55	; 0x37
 801bc24:	18fb      	adds	r3, r7, r3
 801bc26:	781b      	ldrb	r3, [r3, #0]
 801bc28:	061b      	lsls	r3, r3, #24
 801bc2a:	0f9b      	lsrs	r3, r3, #30
 801bc2c:	b2db      	uxtb	r3, r3
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d100      	bne.n	801bc34 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x194>
 801bc32:	e09f      	b.n	801bd74 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d4>
 801bc34:	2b03      	cmp	r3, #3
 801bc36:	d000      	beq.n	801bc3a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x19a>
 801bc38:	e09e      	b.n	801bd78 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d8>
          {
            uint16_t snkmaxvoltage100mv;
            uint16_t snkminvoltage100mv;
            uint16_t snkmaxcurrent50ma;

            snkminvoltage100mv = snkpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801bc3a:	2134      	movs	r1, #52	; 0x34
 801bc3c:	187b      	adds	r3, r7, r1
 801bc3e:	785a      	ldrb	r2, [r3, #1]
 801bc40:	2048      	movs	r0, #72	; 0x48
 801bc42:	183b      	adds	r3, r7, r0
 801bc44:	801a      	strh	r2, [r3, #0]
            snkmaxvoltage100mv = snkpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801bc46:	2336      	movs	r3, #54	; 0x36
 801bc48:	18fb      	adds	r3, r7, r3
 801bc4a:	881b      	ldrh	r3, [r3, #0]
 801bc4c:	05db      	lsls	r3, r3, #23
 801bc4e:	0e1b      	lsrs	r3, r3, #24
 801bc50:	b2da      	uxtb	r2, r3
 801bc52:	2446      	movs	r4, #70	; 0x46
 801bc54:	193b      	adds	r3, r7, r4
 801bc56:	801a      	strh	r2, [r3, #0]
            snkmaxcurrent50ma = snkpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801bc58:	187b      	adds	r3, r7, r1
 801bc5a:	781b      	ldrb	r3, [r3, #0]
 801bc5c:	065b      	lsls	r3, r3, #25
 801bc5e:	0e5b      	lsrs	r3, r3, #25
 801bc60:	b2da      	uxtb	r2, r3
 801bc62:	2344      	movs	r3, #68	; 0x44
 801bc64:	18fb      	adds	r3, r7, r3
 801bc66:	801a      	strh	r2, [r3, #0]

            /* Match if SNK APDO voltage overlaps with the SRC APDO voltage range */
            if (((srcminvoltage100mv <= snkmaxvoltage100mv) && (srcminvoltage100mv >= snkminvoltage100mv)) ||
 801bc68:	214c      	movs	r1, #76	; 0x4c
 801bc6a:	187a      	adds	r2, r7, r1
 801bc6c:	193b      	adds	r3, r7, r4
 801bc6e:	8812      	ldrh	r2, [r2, #0]
 801bc70:	881b      	ldrh	r3, [r3, #0]
 801bc72:	429a      	cmp	r2, r3
 801bc74:	d805      	bhi.n	801bc82 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1e2>
 801bc76:	187a      	adds	r2, r7, r1
 801bc78:	183b      	adds	r3, r7, r0
 801bc7a:	8812      	ldrh	r2, [r2, #0]
 801bc7c:	881b      	ldrh	r3, [r3, #0]
 801bc7e:	429a      	cmp	r2, r3
 801bc80:	d210      	bcs.n	801bca4 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 801bc82:	2148      	movs	r1, #72	; 0x48
 801bc84:	187a      	adds	r2, r7, r1
 801bc86:	234e      	movs	r3, #78	; 0x4e
 801bc88:	18fb      	adds	r3, r7, r3
 801bc8a:	8812      	ldrh	r2, [r2, #0]
 801bc8c:	881b      	ldrh	r3, [r3, #0]
 801bc8e:	429a      	cmp	r2, r3
 801bc90:	d900      	bls.n	801bc94 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1f4>
 801bc92:	e073      	b.n	801bd7c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				((snkminvoltage100mv <= srcmaxvoltage100mv) && (snkminvoltage100mv >= srcminvoltage100mv)))
 801bc94:	187a      	adds	r2, r7, r1
 801bc96:	234c      	movs	r3, #76	; 0x4c
 801bc98:	18fb      	adds	r3, r7, r3
 801bc9a:	8812      	ldrh	r2, [r2, #0]
 801bc9c:	881b      	ldrh	r3, [r3, #0]
 801bc9e:	429a      	cmp	r2, r3
 801bca0:	d200      	bcs.n	801bca4 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 801bca2:	e06b      	b.n	801bd7c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			{
			  if (snkmaxcurrent50ma <= srcmaxcurrent50ma)
 801bca4:	2044      	movs	r0, #68	; 0x44
 801bca6:	183a      	adds	r2, r7, r0
 801bca8:	234a      	movs	r3, #74	; 0x4a
 801bcaa:	18fb      	adds	r3, r7, r3
 801bcac:	8812      	ldrh	r2, [r2, #0]
 801bcae:	881b      	ldrh	r3, [r3, #0]
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	d863      	bhi.n	801bd7c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			  {
				if (0U != *PtrRequestedPower)
 801bcb4:	683b      	ldr	r3, [r7, #0]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d02c      	beq.n	801bd16 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x276>
				{
				  /* A specific voltage was requested, verify it */
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 801bcbc:	2348      	movs	r3, #72	; 0x48
 801bcbe:	18fb      	adds	r3, r7, r3
 801bcc0:	881b      	ldrh	r3, [r3, #0]
 801bcc2:	2264      	movs	r2, #100	; 0x64
 801bcc4:	4353      	muls	r3, r2
 801bcc6:	b29b      	uxth	r3, r3
 801bcc8:	001a      	movs	r2, r3
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	429a      	cmp	r2, r3
 801bcd0:	d854      	bhi.n	801bd7c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
					 ((*PtrRequestedVoltage) <= PWR_DECODE_100MV(snkmaxvoltage100mv)))
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	2246      	movs	r2, #70	; 0x46
 801bcd8:	18ba      	adds	r2, r7, r2
 801bcda:	8812      	ldrh	r2, [r2, #0]
 801bcdc:	2164      	movs	r1, #100	; 0x64
 801bcde:	434a      	muls	r2, r1
 801bce0:	b292      	uxth	r2, r2
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 801bce2:	4293      	cmp	r3, r2
 801bce4:	d84a      	bhi.n	801bd7c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  {
					currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	183a      	adds	r2, r7, r0
 801bcec:	8812      	ldrh	r2, [r2, #0]
 801bcee:	2132      	movs	r1, #50	; 0x32
 801bcf0:	434a      	muls	r2, r1
 801bcf2:	b292      	uxth	r2, r2
 801bcf4:	4353      	muls	r3, r2
 801bcf6:	22fa      	movs	r2, #250	; 0xfa
 801bcf8:	0091      	lsls	r1, r2, #2
 801bcfa:	0018      	movs	r0, r3
 801bcfc:	f7ea fa78 	bl	80061f0 <__udivsi3>
 801bd00:	0003      	movs	r3, r0
 801bd02:	65fb      	str	r3, [r7, #92]	; 0x5c
											/ 1000U; /* mW */
					currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	2132      	movs	r1, #50	; 0x32
 801bd0a:	0018      	movs	r0, r3
 801bd0c:	f7ea fa70 	bl	80061f0 <__udivsi3>
 801bd10:	0003      	movs	r3, r0
 801bd12:	657b      	str	r3, [r7, #84]	; 0x54
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
				}
			  }
			}
          }
          break;
 801bd14:	e032      	b.n	801bd7c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  *PtrRequestedVoltage = MIN(PWR_DECODE_100MV(srcmaxvoltage100mv),
 801bd16:	2346      	movs	r3, #70	; 0x46
 801bd18:	18fb      	adds	r3, r7, r3
 801bd1a:	881b      	ldrh	r3, [r3, #0]
 801bd1c:	2264      	movs	r2, #100	; 0x64
 801bd1e:	4353      	muls	r3, r2
 801bd20:	b299      	uxth	r1, r3
 801bd22:	234e      	movs	r3, #78	; 0x4e
 801bd24:	18fb      	adds	r3, r7, r3
 801bd26:	881b      	ldrh	r3, [r3, #0]
 801bd28:	2264      	movs	r2, #100	; 0x64
 801bd2a:	4353      	muls	r3, r2
 801bd2c:	b29b      	uxth	r3, r3
 801bd2e:	1c18      	adds	r0, r3, #0
 801bd30:	b28a      	uxth	r2, r1
 801bd32:	b283      	uxth	r3, r0
 801bd34:	429a      	cmp	r2, r3
 801bd36:	d900      	bls.n	801bd3a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x29a>
 801bd38:	1c01      	adds	r1, r0, #0
 801bd3a:	b28b      	uxth	r3, r1
 801bd3c:	001a      	movs	r2, r3
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	601a      	str	r2, [r3, #0]
				  currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	2244      	movs	r2, #68	; 0x44
 801bd48:	18ba      	adds	r2, r7, r2
 801bd4a:	8812      	ldrh	r2, [r2, #0]
 801bd4c:	2132      	movs	r1, #50	; 0x32
 801bd4e:	434a      	muls	r2, r1
 801bd50:	b292      	uxth	r2, r2
 801bd52:	4353      	muls	r3, r2
 801bd54:	22fa      	movs	r2, #250	; 0xfa
 801bd56:	0091      	lsls	r1, r2, #2
 801bd58:	0018      	movs	r0, r3
 801bd5a:	f7ea fa49 	bl	80061f0 <__udivsi3>
 801bd5e:	0003      	movs	r3, r0
 801bd60:	65fb      	str	r3, [r7, #92]	; 0x5c
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	2132      	movs	r1, #50	; 0x32
 801bd68:	0018      	movs	r0, r3
 801bd6a:	f7ea fa41 	bl	80061f0 <__udivsi3>
 801bd6e:	0003      	movs	r3, r0
 801bd70:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 801bd72:	e003      	b.n	801bd7c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
            break;
 801bd74:	46c0      	nop			; (mov r8, r8)
 801bd76:	e002      	b.n	801bd7e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>

          default:
            break;
 801bd78:	46c0      	nop			; (mov r8, r8)
 801bd7a:	e000      	b.n	801bd7e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>
          break;
 801bd7c:	46c0      	nop			; (mov r8, r8)
        }

        if (currentrequestedpower > maxrequestedpower)
 801bd7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bd80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bd82:	429a      	cmp	r2, r3
 801bd84:	d905      	bls.n	801bd92 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2f2>
        {
          match = USBPD_TRUE;
 801bd86:	2301      	movs	r3, #1
 801bd88:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 801bd8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd8c:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 801bd8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd90:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801bd92:	2150      	movs	r1, #80	; 0x50
 801bd94:	187b      	adds	r3, r7, r1
 801bd96:	881a      	ldrh	r2, [r3, #0]
 801bd98:	187b      	adds	r3, r7, r1
 801bd9a:	3201      	adds	r2, #1
 801bd9c:	801a      	strh	r2, [r3, #0]
 801bd9e:	2350      	movs	r3, #80	; 0x50
 801bda0:	18fb      	adds	r3, r7, r3
 801bda2:	881a      	ldrh	r2, [r3, #0]
 801bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bda6:	429a      	cmp	r2, r3
 801bda8:	d200      	bcs.n	801bdac <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30c>
 801bdaa:	e72e      	b.n	801bc0a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x16a>
        }
      }
    }
    break;
 801bdac:	e001      	b.n	801bdb2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>

    default:
      return (USBPD_FALSE);
 801bdae:	2300      	movs	r3, #0
 801bdb0:	e00b      	b.n	801bdca <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  if (maxrequestedpower > 0)
 801bdb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d007      	beq.n	801bdc8 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x328>
  {
    *PtrRequestedPower   = maxrequestedpower;
 801bdb8:	683b      	ldr	r3, [r7, #0]
 801bdba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bdbc:	601a      	str	r2, [r3, #0]
    *PtrRequestedVoltage = maxrequestedvoltage * 50U; /* value in mV */
 801bdbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bdc0:	2232      	movs	r2, #50	; 0x32
 801bdc2:	435a      	muls	r2, r3
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	601a      	str	r2, [r3, #0]
  }
  return (match);
 801bdc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 801bdca:	0018      	movs	r0, r3
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	b01b      	add	sp, #108	; 0x6c
 801bdd0:	bd90      	pop	{r4, r7, pc}
	...

0801bdd4 <USER_SERV_FindVoltageIndex>:
  * @retval Index of PDO within source capabilities message (DPM_NO_SRC_PDO_FOUND indicating not found)
  */
uint32_t USER_SERV_FindVoltageIndex(uint32_t PortNum,
                                           USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                           uint8_t Method)
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b090      	sub	sp, #64	; 0x40
 801bdd8:	af00      	add	r7, sp, #0
 801bdda:	60f8      	str	r0, [r7, #12]
 801bddc:	60b9      	str	r1, [r7, #8]
 801bdde:	1dfb      	adds	r3, r7, #7
 801bde0:	701a      	strb	r2, [r3, #0]
  uint32_t nbpdo;
  uint32_t allowablepower;
  uint32_t selpower;
  uint32_t allowablecurrent;
  uint32_t selcurrent;
  uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 801bde2:	23ff      	movs	r3, #255	; 0xff
 801bde4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temp_index;
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801bde6:	68fb      	ldr	r3, [r7, #12]
 801bde8:	2274      	movs	r2, #116	; 0x74
 801bdea:	435a      	muls	r2, r3
 801bdec:	4b73      	ldr	r3, [pc, #460]	; (801bfbc <USER_SERV_FindVoltageIndex+0x1e8>)
 801bdee:	18d3      	adds	r3, r2, r3
 801bdf0:	62bb      	str	r3, [r7, #40]	; 0x28

  allowablepower = 0;
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	613b      	str	r3, [r7, #16]
  selpower       = 0;
 801bdf6:	2300      	movs	r3, #0
 801bdf8:	63bb      	str	r3, [r7, #56]	; 0x38
  reqvoltage     = 0;
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  voltage        = 0;
 801bdfe:	2300      	movs	r3, #0
 801be00:	617b      	str	r3, [r7, #20]
  selcurrent     = 0;
 801be02:	2300      	movs	r3, #0
 801be04:	637b      	str	r3, [r7, #52]	; 0x34

  /* Search PDO index among Source PDO of Port */
  nbpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 801be06:	496e      	ldr	r1, [pc, #440]	; (801bfc0 <USER_SERV_FindVoltageIndex+0x1ec>)
 801be08:	68fa      	ldr	r2, [r7, #12]
 801be0a:	0013      	movs	r3, r2
 801be0c:	009b      	lsls	r3, r3, #2
 801be0e:	189b      	adds	r3, r3, r2
 801be10:	011b      	lsls	r3, r3, #4
 801be12:	18cb      	adds	r3, r1, r3
 801be14:	331c      	adds	r3, #28
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	627b      	str	r3, [r7, #36]	; 0x24
  ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 801be1a:	68fa      	ldr	r2, [r7, #12]
 801be1c:	0013      	movs	r3, r2
 801be1e:	009b      	lsls	r3, r3, #2
 801be20:	189b      	adds	r3, r3, r2
 801be22:	011b      	lsls	r3, r3, #4
 801be24:	4a66      	ldr	r2, [pc, #408]	; (801bfc0 <USER_SERV_FindVoltageIndex+0x1ec>)
 801be26:	189b      	adds	r3, r3, r2
 801be28:	623b      	str	r3, [r7, #32]

  /* search the best PDO in the list of source PDOs */
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 801be2a:	2300      	movs	r3, #0
 801be2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801be2e:	e09a      	b.n	801bf66 <USER_SERV_FindVoltageIndex+0x192>
  {
    pdo.d32 = ptpdoarray[temp_index];
 801be30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be32:	009b      	lsls	r3, r3, #2
 801be34:	6a3a      	ldr	r2, [r7, #32]
 801be36:	18d3      	adds	r3, r2, r3
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	61bb      	str	r3, [r7, #24]

    /* Check if the received source PDO is matching any of the SNK PDO */
    allowablepower = 0;
 801be3c:	2300      	movs	r3, #0
 801be3e:	613b      	str	r3, [r7, #16]
    if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	b2d8      	uxtb	r0, r3
 801be44:	69b9      	ldr	r1, [r7, #24]
 801be46:	2310      	movs	r3, #16
 801be48:	18fb      	adds	r3, r7, r3
 801be4a:	2214      	movs	r2, #20
 801be4c:	18ba      	adds	r2, r7, r2
 801be4e:	f7ff fe27 	bl	801baa0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 801be52:	0003      	movs	r3, r0
 801be54:	2b01      	cmp	r3, #1
 801be56:	d000      	beq.n	801be5a <USER_SERV_FindVoltageIndex+0x86>
 801be58:	e082      	b.n	801bf60 <USER_SERV_FindVoltageIndex+0x18c>
    {
      allowablecurrent = (allowablepower / voltage) * 1000U;
 801be5a:	693b      	ldr	r3, [r7, #16]
 801be5c:	697a      	ldr	r2, [r7, #20]
 801be5e:	0011      	movs	r1, r2
 801be60:	0018      	movs	r0, r3
 801be62:	f7ea f9c5 	bl	80061f0 <__udivsi3>
 801be66:	0003      	movs	r3, r0
 801be68:	001a      	movs	r2, r3
 801be6a:	0013      	movs	r3, r2
 801be6c:	015b      	lsls	r3, r3, #5
 801be6e:	1a9b      	subs	r3, r3, r2
 801be70:	009b      	lsls	r3, r3, #2
 801be72:	189b      	adds	r3, r3, r2
 801be74:	00db      	lsls	r3, r3, #3
 801be76:	61fb      	str	r3, [r7, #28]

      /* Choose the best PDO depending on the user preferences */
      switch (Method)
 801be78:	1dfb      	adds	r3, r7, #7
 801be7a:	781b      	ldrb	r3, [r3, #0]
 801be7c:	2b05      	cmp	r3, #5
 801be7e:	d85b      	bhi.n	801bf38 <USER_SERV_FindVoltageIndex+0x164>
 801be80:	009a      	lsls	r2, r3, #2
 801be82:	4b50      	ldr	r3, [pc, #320]	; (801bfc4 <USER_SERV_FindVoltageIndex+0x1f0>)
 801be84:	18d3      	adds	r3, r2, r3
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	469f      	mov	pc, r3
      {
        case PDO_SEL_METHOD_MAX_PWR:
          if (allowablepower > selpower)
 801be8a:	693b      	ldr	r3, [r7, #16]
 801be8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be8e:	429a      	cmp	r2, r3
 801be90:	d25b      	bcs.n	801bf4a <USER_SERV_FindVoltageIndex+0x176>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801be92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be94:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801be96:	693b      	ldr	r3, [r7, #16]
 801be98:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801be9a:	697b      	ldr	r3, [r7, #20]
 801be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801be9e:	69fb      	ldr	r3, [r7, #28]
 801bea0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801bea2:	e052      	b.n	801bf4a <USER_SERV_FindVoltageIndex+0x176>

        case PDO_SEL_METHOD_MIN_PWR:
          if ((allowablepower < selpower) || (selpower == 0))
 801bea4:	693b      	ldr	r3, [r7, #16]
 801bea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bea8:	429a      	cmp	r2, r3
 801beaa:	d802      	bhi.n	801beb2 <USER_SERV_FindVoltageIndex+0xde>
 801beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d14d      	bne.n	801bf4e <USER_SERV_FindVoltageIndex+0x17a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beb4:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801beb6:	693b      	ldr	r3, [r7, #16]
 801beb8:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801beba:	697b      	ldr	r3, [r7, #20]
 801bebc:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801bebe:	69fb      	ldr	r3, [r7, #28]
 801bec0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801bec2:	e044      	b.n	801bf4e <USER_SERV_FindVoltageIndex+0x17a>

        case PDO_SEL_METHOD_MAX_VOLT:
          if (voltage > reqvoltage)
 801bec4:	697b      	ldr	r3, [r7, #20]
 801bec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bec8:	429a      	cmp	r2, r3
 801beca:	d242      	bcs.n	801bf52 <USER_SERV_FindVoltageIndex+0x17e>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bece:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801bed0:	693b      	ldr	r3, [r7, #16]
 801bed2:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801bed4:	697b      	ldr	r3, [r7, #20]
 801bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801bed8:	69fb      	ldr	r3, [r7, #28]
 801beda:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801bedc:	e039      	b.n	801bf52 <USER_SERV_FindVoltageIndex+0x17e>

        case PDO_SEL_METHOD_MIN_VOLT:
          if ((voltage < reqvoltage) || (reqvoltage == 0))
 801bede:	697b      	ldr	r3, [r7, #20]
 801bee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bee2:	429a      	cmp	r2, r3
 801bee4:	d802      	bhi.n	801beec <USER_SERV_FindVoltageIndex+0x118>
 801bee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d134      	bne.n	801bf56 <USER_SERV_FindVoltageIndex+0x182>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beee:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801bef0:	693b      	ldr	r3, [r7, #16]
 801bef2:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801bef4:	697b      	ldr	r3, [r7, #20]
 801bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801bef8:	69fb      	ldr	r3, [r7, #28]
 801befa:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801befc:	e02b      	b.n	801bf56 <USER_SERV_FindVoltageIndex+0x182>

        case PDO_SEL_METHOD_MAX_CUR:
          if (allowablecurrent > selcurrent)
 801befe:	69fa      	ldr	r2, [r7, #28]
 801bf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf02:	429a      	cmp	r2, r3
 801bf04:	d929      	bls.n	801bf5a <USER_SERV_FindVoltageIndex+0x186>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801bf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf08:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801bf0a:	693b      	ldr	r3, [r7, #16]
 801bf0c:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801bf0e:	697b      	ldr	r3, [r7, #20]
 801bf10:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801bf12:	69fb      	ldr	r3, [r7, #28]
 801bf14:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801bf16:	e020      	b.n	801bf5a <USER_SERV_FindVoltageIndex+0x186>

        case PDO_SEL_METHOD_MIN_CUR:
          if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 801bf18:	69fa      	ldr	r2, [r7, #28]
 801bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf1c:	429a      	cmp	r2, r3
 801bf1e:	d302      	bcc.n	801bf26 <USER_SERV_FindVoltageIndex+0x152>
 801bf20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d11b      	bne.n	801bf5e <USER_SERV_FindVoltageIndex+0x18a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf28:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801bf2a:	693b      	ldr	r3, [r7, #16]
 801bf2c:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801bf2e:	697b      	ldr	r3, [r7, #20]
 801bf30:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801bf32:	69fb      	ldr	r3, [r7, #28]
 801bf34:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801bf36:	e012      	b.n	801bf5e <USER_SERV_FindVoltageIndex+0x18a>

        default:
          /* Default behavior: last PDO is selected */
          curr_index = temp_index;
 801bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf3a:	633b      	str	r3, [r7, #48]	; 0x30
          selpower   = allowablepower;
 801bf3c:	693b      	ldr	r3, [r7, #16]
 801bf3e:	63bb      	str	r3, [r7, #56]	; 0x38
          reqvoltage = voltage;
 801bf40:	697b      	ldr	r3, [r7, #20]
 801bf42:	63fb      	str	r3, [r7, #60]	; 0x3c
          selcurrent = allowablecurrent;
 801bf44:	69fb      	ldr	r3, [r7, #28]
 801bf46:	637b      	str	r3, [r7, #52]	; 0x34
 801bf48:	e00a      	b.n	801bf60 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801bf4a:	46c0      	nop			; (mov r8, r8)
 801bf4c:	e008      	b.n	801bf60 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801bf4e:	46c0      	nop			; (mov r8, r8)
 801bf50:	e006      	b.n	801bf60 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801bf52:	46c0      	nop			; (mov r8, r8)
 801bf54:	e004      	b.n	801bf60 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801bf56:	46c0      	nop			; (mov r8, r8)
 801bf58:	e002      	b.n	801bf60 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801bf5a:	46c0      	nop			; (mov r8, r8)
 801bf5c:	e000      	b.n	801bf60 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801bf5e:	46c0      	nop			; (mov r8, r8)
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 801bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf62:	3301      	adds	r3, #1
 801bf64:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf6a:	429a      	cmp	r2, r3
 801bf6c:	d200      	bcs.n	801bf70 <USER_SERV_FindVoltageIndex+0x19c>
 801bf6e:	e75f      	b.n	801be30 <USER_SERV_FindVoltageIndex+0x5c>
      }
    }
  }

  /* If a suitable PDO was found */
  if (curr_index != DPM_NO_SRC_PDO_FOUND)
 801bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf72:	2bff      	cmp	r3, #255	; 0xff
 801bf74:	d01c      	beq.n	801bfb0 <USER_SERV_FindVoltageIndex+0x1dc>
  {
    /* Fill the request power details */
    PtrRequestPowerDetails->MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf78:	685a      	ldr	r2, [r3, #4]
 801bf7a:	68bb      	ldr	r3, [r7, #8]
 801bf7c:	605a      	str	r2, [r3, #4]
    PtrRequestPowerDetails->OperatingCurrentInmAunits    = (1000U * selpower) / reqvoltage;
 801bf7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf80:	0013      	movs	r3, r2
 801bf82:	015b      	lsls	r3, r3, #5
 801bf84:	1a9b      	subs	r3, r3, r2
 801bf86:	009b      	lsls	r3, r3, #2
 801bf88:	189b      	adds	r3, r3, r2
 801bf8a:	00db      	lsls	r3, r3, #3
 801bf8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801bf8e:	0018      	movs	r0, r3
 801bf90:	f7ea f92e 	bl	80061f0 <__udivsi3>
 801bf94:	0003      	movs	r3, r0
 801bf96:	001a      	movs	r2, r3
 801bf98:	68bb      	ldr	r3, [r7, #8]
 801bf9a:	609a      	str	r2, [r3, #8]
    PtrRequestPowerDetails->MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 801bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf9e:	699a      	ldr	r2, [r3, #24]
 801bfa0:	68bb      	ldr	r3, [r7, #8]
 801bfa2:	60da      	str	r2, [r3, #12]
    PtrRequestPowerDetails->OperatingPowerInmWunits      = selpower;
 801bfa4:	68bb      	ldr	r3, [r7, #8]
 801bfa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bfa8:	611a      	str	r2, [r3, #16]
    PtrRequestPowerDetails->RequestedVoltageInmVunits    = reqvoltage;
 801bfaa:	68bb      	ldr	r3, [r7, #8]
 801bfac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bfae:	601a      	str	r2, [r3, #0]
  }

  return curr_index;
 801bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801bfb2:	0018      	movs	r0, r3
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	b010      	add	sp, #64	; 0x40
 801bfb8:	bd80      	pop	{r7, pc}
 801bfba:	46c0      	nop			; (mov r8, r8)
 801bfbc:	200000f8 	.word	0x200000f8
 801bfc0:	20002f04 	.word	0x20002f04
 801bfc4:	08024220 	.word	0x08024220

0801bfc8 <USER_SERV_SNK_BuildRDOfromSelectedPDO>:
void USER_SERV_SNK_BuildRDOfromSelectedPDO(uint8_t PortNum,
                                                  uint8_t IndexSrcPDO,
                                                  USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 801bfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfca:	b0a7      	sub	sp, #156	; 0x9c
 801bfcc:	af02      	add	r7, sp, #8
 801bfce:	60ba      	str	r2, [r7, #8]
 801bfd0:	607b      	str	r3, [r7, #4]
 801bfd2:	240f      	movs	r4, #15
 801bfd4:	193b      	adds	r3, r7, r4
 801bfd6:	1c02      	adds	r2, r0, #0
 801bfd8:	701a      	strb	r2, [r3, #0]
 801bfda:	230e      	movs	r3, #14
 801bfdc:	18fb      	adds	r3, r7, r3
 801bfde:	1c0a      	adds	r2, r1, #0
 801bfe0:	701a      	strb	r2, [r3, #0]
  uint32_t mv = 0;
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	228c      	movs	r2, #140	; 0x8c
 801bfe6:	18ba      	adds	r2, r7, r2
 801bfe8:	6013      	str	r3, [r2, #0]
  uint32_t ma = 0;
 801bfea:	2300      	movs	r3, #0
 801bfec:	2288      	movs	r2, #136	; 0x88
 801bfee:	18ba      	adds	r2, r7, r2
 801bff0:	6013      	str	r3, [r2, #0]
  uint32_t size;
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801bff2:	193b      	adds	r3, r7, r4
 801bff4:	781a      	ldrb	r2, [r3, #0]
 801bff6:	0013      	movs	r3, r2
 801bff8:	009b      	lsls	r3, r3, #2
 801bffa:	189b      	adds	r3, r3, r2
 801bffc:	011b      	lsls	r3, r3, #4
 801bffe:	4ae2      	ldr	r2, [pc, #904]	; (801c388 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 801c000:	189b      	adds	r3, r3, r2
 801c002:	2584      	movs	r5, #132	; 0x84
 801c004:	197a      	adds	r2, r7, r5
 801c006:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801c008:	193b      	adds	r3, r7, r4
 801c00a:	781b      	ldrb	r3, [r3, #0]
 801c00c:	2274      	movs	r2, #116	; 0x74
 801c00e:	435a      	muls	r2, r3
 801c010:	4bde      	ldr	r3, [pc, #888]	; (801c38c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c4>)
 801c012:	18d3      	adds	r3, r2, r3
 801c014:	2280      	movs	r2, #128	; 0x80
 801c016:	18ba      	adds	r2, r7, r2
 801c018:	6013      	str	r3, [r2, #0]
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  /* Initialize RDO */
  rdo.d32 = 0;
 801c01a:	2300      	movs	r3, #0
 801c01c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Read SNK PDO list for retrieving useful data to fill in RDO */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 801c01e:	237c      	movs	r3, #124	; 0x7c
 801c020:	18f9      	adds	r1, r7, r3
 801c022:	2658      	movs	r6, #88	; 0x58
 801c024:	19ba      	adds	r2, r7, r6
 801c026:	193b      	adds	r3, r7, r4
 801c028:	7818      	ldrb	r0, [r3, #0]
 801c02a:	000b      	movs	r3, r1
 801c02c:	2101      	movs	r1, #1
 801c02e:	f7fe f80d 	bl	801a04c <USBPD_PWR_IF_GetPortPDOs>

  /* Store value of 1st SNK PDO (Fixed) in local variable */
  snk_fixed_pdo.d32 = snkpdolist[0];
 801c032:	19bb      	adds	r3, r7, r6
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	657b      	str	r3, [r7, #84]	; 0x54

  /* Set common fields in RDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 801c038:	197b      	adds	r3, r7, r5
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	67bb      	str	r3, [r7, #120]	; 0x78
  rdo.GenericRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801c040:	2357      	movs	r3, #87	; 0x57
 801c042:	18fb      	adds	r3, r7, r3
 801c044:	781b      	ldrb	r3, [r3, #0]
 801c046:	075b      	lsls	r3, r3, #29
 801c048:	0fdb      	lsrs	r3, r3, #31
 801c04a:	b2da      	uxtb	r2, r3
 801c04c:	2377      	movs	r3, #119	; 0x77
 801c04e:	18fb      	adds	r3, r7, r3
 801c050:	2101      	movs	r1, #1
 801c052:	400a      	ands	r2, r1
 801c054:	1890      	adds	r0, r2, r2
 801c056:	781a      	ldrb	r2, [r3, #0]
 801c058:	2102      	movs	r1, #2
 801c05a:	438a      	bics	r2, r1
 801c05c:	1c11      	adds	r1, r2, #0
 801c05e:	1c02      	adds	r2, r0, #0
 801c060:	430a      	orrs	r2, r1
 801c062:	701a      	strb	r2, [r3, #0]
  if (USBPD_SPECIFICATION_REV2 < DPM_Params[PortNum].PE_SpecRevision)
 801c064:	193b      	adds	r3, r7, r4
 801c066:	781a      	ldrb	r2, [r3, #0]
 801c068:	4bc9      	ldr	r3, [pc, #804]	; (801c390 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 801c06a:	0092      	lsls	r2, r2, #2
 801c06c:	5cd3      	ldrb	r3, [r2, r3]
 801c06e:	079b      	lsls	r3, r3, #30
 801c070:	0f9b      	lsrs	r3, r3, #30
 801c072:	b2db      	uxtb	r3, r3
 801c074:	2b01      	cmp	r3, #1
 801c076:	d931      	bls.n	801c0dc <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x114>
  {
#if defined(USBPDCORE_UNCHUNCKED_MODE)
    rdo.FixedVariableRDO.UnchunkedExtendedMessage = DPM_Settings[PortNum].PE_PD3_Support.d.PE_UnchunkSupport;
 801c078:	193b      	adds	r3, r7, r4
 801c07a:	781a      	ldrb	r2, [r3, #0]
 801c07c:	49c5      	ldr	r1, [pc, #788]	; (801c394 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3cc>)
 801c07e:	2008      	movs	r0, #8
 801c080:	0013      	movs	r3, r2
 801c082:	005b      	lsls	r3, r3, #1
 801c084:	189b      	adds	r3, r3, r2
 801c086:	009b      	lsls	r3, r3, #2
 801c088:	18cb      	adds	r3, r1, r3
 801c08a:	181b      	adds	r3, r3, r0
 801c08c:	781b      	ldrb	r3, [r3, #0]
 801c08e:	07db      	lsls	r3, r3, #31
 801c090:	0fdb      	lsrs	r3, r3, #31
 801c092:	b2da      	uxtb	r2, r3
 801c094:	2376      	movs	r3, #118	; 0x76
 801c096:	18fb      	adds	r3, r7, r3
 801c098:	01d0      	lsls	r0, r2, #7
 801c09a:	781a      	ldrb	r2, [r3, #0]
 801c09c:	217f      	movs	r1, #127	; 0x7f
 801c09e:	400a      	ands	r2, r1
 801c0a0:	1c11      	adds	r1, r2, #0
 801c0a2:	1c02      	adds	r2, r0, #0
 801c0a4:	430a      	orrs	r2, r1
 801c0a6:	701a      	strb	r2, [r3, #0]
    DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_FALSE;
 801c0a8:	193b      	adds	r3, r7, r4
 801c0aa:	781b      	ldrb	r3, [r3, #0]
 801c0ac:	4ab8      	ldr	r2, [pc, #736]	; (801c390 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 801c0ae:	009b      	lsls	r3, r3, #2
 801c0b0:	18d3      	adds	r3, r2, r3
 801c0b2:	78da      	ldrb	r2, [r3, #3]
 801c0b4:	2102      	movs	r1, #2
 801c0b6:	438a      	bics	r2, r1
 801c0b8:	70da      	strb	r2, [r3, #3]
    /* Set unchuncked bit if supported by port partner;*/
    if (USBPD_TRUE == pdo.SRCFixedPDO.UnchunkedExtendedMessage)
 801c0ba:	237b      	movs	r3, #123	; 0x7b
 801c0bc:	18fb      	adds	r3, r7, r3
 801c0be:	781b      	ldrb	r3, [r3, #0]
 801c0c0:	2201      	movs	r2, #1
 801c0c2:	4013      	ands	r3, r2
 801c0c4:	b2db      	uxtb	r3, r3
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d008      	beq.n	801c0dc <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x114>
    {
      DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_TRUE;
 801c0ca:	193b      	adds	r3, r7, r4
 801c0cc:	781b      	ldrb	r3, [r3, #0]
 801c0ce:	4ab0      	ldr	r2, [pc, #704]	; (801c390 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 801c0d0:	009b      	lsls	r3, r3, #2
 801c0d2:	18d3      	adds	r3, r2, r3
 801c0d4:	78da      	ldrb	r2, [r3, #3]
 801c0d6:	2102      	movs	r1, #2
 801c0d8:	430a      	orrs	r2, r1
 801c0da:	70da      	strb	r2, [r3, #3]
    }
#endif /* USBPDCORE_UNCHUNCKED_MODE */
  }

  /* If no valid SNK PDO or if no SRC PDO match found (index>=nb of valid received SRC PDOs */
  if ((size < 1) || (IndexSrcPDO >= pdhandle->DPM_NumberOfRcvSRCPDO))
 801c0dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d008      	beq.n	801c0f4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x12c>
 801c0e2:	230e      	movs	r3, #14
 801c0e4:	18fb      	adds	r3, r7, r3
 801c0e6:	781a      	ldrb	r2, [r3, #0]
 801c0e8:	2384      	movs	r3, #132	; 0x84
 801c0ea:	18fb      	adds	r3, r7, r3
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	69db      	ldr	r3, [r3, #28]
 801c0f0:	429a      	cmp	r2, r3
 801c0f2:	d364      	bcc.n	801c1be <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x1f6>
  {
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */
#ifdef _TRACE
    uint8_t msg[] = "USER_SERV_SNK_BuildRDOfromSelectedPDO: Pb in SRC PDO selection";
 801c0f4:	2414      	movs	r4, #20
 801c0f6:	193a      	adds	r2, r7, r4
 801c0f8:	4ba7      	ldr	r3, [pc, #668]	; (801c398 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d0>)
 801c0fa:	0010      	movs	r0, r2
 801c0fc:	0019      	movs	r1, r3
 801c0fe:	233f      	movs	r3, #63	; 0x3f
 801c100:	001a      	movs	r2, r3
 801c102:	f006 fb81 	bl	8022808 <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 801c106:	193a      	adds	r2, r7, r4
 801c108:	250f      	movs	r5, #15
 801c10a:	197b      	adds	r3, r7, r5
 801c10c:	7819      	ldrb	r1, [r3, #0]
 801c10e:	233f      	movs	r3, #63	; 0x3f
 801c110:	9300      	str	r3, [sp, #0]
 801c112:	0013      	movs	r3, r2
 801c114:	2200      	movs	r2, #0
 801c116:	2006      	movs	r0, #6
 801c118:	f7f5 fca0 	bl	8011a5c <USBPD_TRACE_Add>
#endif /* _TRACE */
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 801c11c:	2477      	movs	r4, #119	; 0x77
 801c11e:	193b      	adds	r3, r7, r4
 801c120:	781a      	ldrb	r2, [r3, #0]
 801c122:	2170      	movs	r1, #112	; 0x70
 801c124:	438a      	bics	r2, r1
 801c126:	1c11      	adds	r1, r2, #0
 801c128:	2210      	movs	r2, #16
 801c12a:	430a      	orrs	r2, r1
 801c12c:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801c12e:	2078      	movs	r0, #120	; 0x78
 801c130:	183b      	adds	r3, r7, r0
 801c132:	881b      	ldrh	r3, [r3, #0]
 801c134:	059b      	lsls	r3, r3, #22
 801c136:	0d9b      	lsrs	r3, r3, #22
 801c138:	b29b      	uxth	r3, r3
 801c13a:	059b      	lsls	r3, r3, #22
 801c13c:	0d9b      	lsrs	r3, r3, #22
 801c13e:	029b      	lsls	r3, r3, #10
 801c140:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c142:	4996      	ldr	r1, [pc, #600]	; (801c39c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d4>)
 801c144:	400a      	ands	r2, r1
 801c146:	4313      	orrs	r3, r2
 801c148:	677b      	str	r3, [r7, #116]	; 0x74
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801c14a:	183b      	adds	r3, r7, r0
 801c14c:	881b      	ldrh	r3, [r3, #0]
 801c14e:	059b      	lsls	r3, r3, #22
 801c150:	0d9b      	lsrs	r3, r3, #22
 801c152:	b29a      	uxth	r2, r3
 801c154:	2374      	movs	r3, #116	; 0x74
 801c156:	18fb      	adds	r3, r7, r3
 801c158:	0592      	lsls	r2, r2, #22
 801c15a:	0d90      	lsrs	r0, r2, #22
 801c15c:	881a      	ldrh	r2, [r3, #0]
 801c15e:	0a92      	lsrs	r2, r2, #10
 801c160:	0292      	lsls	r2, r2, #10
 801c162:	1c11      	adds	r1, r2, #0
 801c164:	1c02      	adds	r2, r0, #0
 801c166:	430a      	orrs	r2, r1
 801c168:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch           = 1U;
 801c16a:	193b      	adds	r3, r7, r4
 801c16c:	781a      	ldrb	r2, [r3, #0]
 801c16e:	2104      	movs	r1, #4
 801c170:	430a      	orrs	r2, r1
 801c172:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801c174:	2357      	movs	r3, #87	; 0x57
 801c176:	18fb      	adds	r3, r7, r3
 801c178:	781b      	ldrb	r3, [r3, #0]
 801c17a:	075b      	lsls	r3, r3, #29
 801c17c:	0fdb      	lsrs	r3, r3, #31
 801c17e:	b2da      	uxtb	r2, r3
 801c180:	193b      	adds	r3, r7, r4
 801c182:	2101      	movs	r1, #1
 801c184:	400a      	ands	r2, r1
 801c186:	1890      	adds	r0, r2, r2
 801c188:	781a      	ldrb	r2, [r3, #0]
 801c18a:	2102      	movs	r1, #2
 801c18c:	438a      	bics	r2, r1
 801c18e:	1c11      	adds	r1, r2, #0
 801c190:	1c02      	adds	r2, r0, #0
 801c192:	430a      	orrs	r2, r1
 801c194:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent           = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801c196:	197b      	adds	r3, r7, r5
 801c198:	781a      	ldrb	r2, [r3, #0]
 801c19a:	2380      	movs	r3, #128	; 0x80
 801c19c:	18fb      	adds	r3, r7, r3
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	6859      	ldr	r1, [r3, #4]
 801c1a2:	4879      	ldr	r0, [pc, #484]	; (801c388 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 801c1a4:	0013      	movs	r3, r2
 801c1a6:	009b      	lsls	r3, r3, #2
 801c1a8:	189b      	adds	r3, r3, r2
 801c1aa:	011b      	lsls	r3, r3, #4
 801c1ac:	18c3      	adds	r3, r0, r3
 801c1ae:	334c      	adds	r3, #76	; 0x4c
 801c1b0:	6019      	str	r1, [r3, #0]
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 801c1b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c1b4:	2384      	movs	r3, #132	; 0x84
 801c1b6:	18fb      	adds	r3, r7, r3
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	63da      	str	r2, [r3, #60]	; 0x3c
 801c1bc:	e0e0      	b.n	801c380 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3b8>
    return;
  }

  /* Set the Object position */
  rdo.GenericRDO.ObjectPosition               = IndexSrcPDO + 1U;
 801c1be:	240e      	movs	r4, #14
 801c1c0:	193b      	adds	r3, r7, r4
 801c1c2:	781b      	ldrb	r3, [r3, #0]
 801c1c4:	3301      	adds	r3, #1
 801c1c6:	b2db      	uxtb	r3, r3
 801c1c8:	1c1a      	adds	r2, r3, #0
 801c1ca:	2307      	movs	r3, #7
 801c1cc:	4013      	ands	r3, r2
 801c1ce:	b2da      	uxtb	r2, r3
 801c1d0:	2577      	movs	r5, #119	; 0x77
 801c1d2:	197b      	adds	r3, r7, r5
 801c1d4:	2107      	movs	r1, #7
 801c1d6:	400a      	ands	r2, r1
 801c1d8:	0110      	lsls	r0, r2, #4
 801c1da:	781a      	ldrb	r2, [r3, #0]
 801c1dc:	2170      	movs	r1, #112	; 0x70
 801c1de:	438a      	bics	r2, r1
 801c1e0:	1c11      	adds	r1, r2, #0
 801c1e2:	1c02      	adds	r2, r0, #0
 801c1e4:	430a      	orrs	r2, r1
 801c1e6:	701a      	strb	r2, [r3, #0]
  rdo.GenericRDO.NoUSBSuspend                 = 0;
 801c1e8:	197b      	adds	r3, r7, r5
 801c1ea:	781a      	ldrb	r2, [r3, #0]
 801c1ec:	2101      	movs	r1, #1
 801c1ee:	438a      	bics	r2, r1
 801c1f0:	701a      	strb	r2, [r3, #0]

  /* Extract power information from Power Data Object */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO];
 801c1f2:	193b      	adds	r3, r7, r4
 801c1f4:	781a      	ldrb	r2, [r3, #0]
 801c1f6:	2384      	movs	r3, #132	; 0x84
 801c1f8:	18fb      	adds	r3, r7, r3
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	0092      	lsls	r2, r2, #2
 801c1fe:	58d3      	ldr	r3, [r2, r3]
 801c200:	67bb      	str	r3, [r7, #120]	; 0x78

  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 801c202:	217b      	movs	r1, #123	; 0x7b
 801c204:	187b      	adds	r3, r7, r1
 801c206:	781b      	ldrb	r3, [r3, #0]
 801c208:	061b      	lsls	r3, r3, #24
 801c20a:	0f9b      	lsrs	r3, r3, #30
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	001a      	movs	r2, r3
 801c210:	2398      	movs	r3, #152	; 0x98
 801c212:	2010      	movs	r0, #16
 801c214:	181b      	adds	r3, r3, r0
 801c216:	19db      	adds	r3, r3, r7
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	601a      	str	r2, [r3, #0]

  /* Retrieve request details from SRC PDO selection */
  mv = PtrRequestPowerDetails->RequestedVoltageInmVunits;
 801c21c:	68bb      	ldr	r3, [r7, #8]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	228c      	movs	r2, #140	; 0x8c
 801c222:	18ba      	adds	r2, r7, r2
 801c224:	6013      	str	r3, [r2, #0]
  ma = PtrRequestPowerDetails->OperatingCurrentInmAunits;
 801c226:	68bb      	ldr	r3, [r7, #8]
 801c228:	689b      	ldr	r3, [r3, #8]
 801c22a:	2288      	movs	r2, #136	; 0x88
 801c22c:	18ba      	adds	r2, r7, r2
 801c22e:	6013      	str	r3, [r2, #0]

  switch (pdo.GenericPDO.PowerObject)
 801c230:	187b      	adds	r3, r7, r1
 801c232:	781b      	ldrb	r3, [r3, #0]
 801c234:	061b      	lsls	r3, r3, #24
 801c236:	0f9b      	lsrs	r3, r3, #30
 801c238:	b2db      	uxtb	r3, r3
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d002      	beq.n	801c244 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x27c>
 801c23e:	2b03      	cmp	r3, #3
 801c240:	d036      	beq.n	801c2b0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x2e8>
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
    }
    break;

    default:
      break;
 801c242:	e083      	b.n	801c34c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x384>
      DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 801c244:	230f      	movs	r3, #15
 801c246:	18fb      	adds	r3, r7, r3
 801c248:	781a      	ldrb	r2, [r3, #0]
 801c24a:	494f      	ldr	r1, [pc, #316]	; (801c388 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 801c24c:	0013      	movs	r3, r2
 801c24e:	009b      	lsls	r3, r3, #2
 801c250:	189b      	adds	r3, r3, r2
 801c252:	011b      	lsls	r3, r3, #4
 801c254:	18cb      	adds	r3, r1, r3
 801c256:	334c      	adds	r3, #76	; 0x4c
 801c258:	2488      	movs	r4, #136	; 0x88
 801c25a:	193a      	adds	r2, r7, r4
 801c25c:	6812      	ldr	r2, [r2, #0]
 801c25e:	601a      	str	r2, [r3, #0]
      rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 801c260:	193b      	adds	r3, r7, r4
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	210a      	movs	r1, #10
 801c266:	0018      	movs	r0, r3
 801c268:	f7e9 ffc2 	bl	80061f0 <__udivsi3>
 801c26c:	0003      	movs	r3, r0
 801c26e:	059b      	lsls	r3, r3, #22
 801c270:	0d9b      	lsrs	r3, r3, #22
 801c272:	b29b      	uxth	r3, r3
 801c274:	059b      	lsls	r3, r3, #22
 801c276:	0d9b      	lsrs	r3, r3, #22
 801c278:	029b      	lsls	r3, r3, #10
 801c27a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c27c:	4947      	ldr	r1, [pc, #284]	; (801c39c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d4>)
 801c27e:	400a      	ands	r2, r1
 801c280:	4313      	orrs	r3, r2
 801c282:	677b      	str	r3, [r7, #116]	; 0x74
      rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = ma / 10U;
 801c284:	193b      	adds	r3, r7, r4
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	210a      	movs	r1, #10
 801c28a:	0018      	movs	r0, r3
 801c28c:	f7e9 ffb0 	bl	80061f0 <__udivsi3>
 801c290:	0003      	movs	r3, r0
 801c292:	059b      	lsls	r3, r3, #22
 801c294:	0d9b      	lsrs	r3, r3, #22
 801c296:	b29a      	uxth	r2, r3
 801c298:	2374      	movs	r3, #116	; 0x74
 801c29a:	18fb      	adds	r3, r7, r3
 801c29c:	0592      	lsls	r2, r2, #22
 801c29e:	0d90      	lsrs	r0, r2, #22
 801c2a0:	881a      	ldrh	r2, [r3, #0]
 801c2a2:	0a92      	lsrs	r2, r2, #10
 801c2a4:	0292      	lsls	r2, r2, #10
 801c2a6:	1c11      	adds	r1, r2, #0
 801c2a8:	1c02      	adds	r2, r0, #0
 801c2aa:	430a      	orrs	r2, r1
 801c2ac:	801a      	strh	r2, [r3, #0]
    break;
 801c2ae:	e04d      	b.n	801c34c <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x384>
      DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 801c2b0:	230f      	movs	r3, #15
 801c2b2:	18fb      	adds	r3, r7, r3
 801c2b4:	781a      	ldrb	r2, [r3, #0]
 801c2b6:	4934      	ldr	r1, [pc, #208]	; (801c388 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 801c2b8:	0013      	movs	r3, r2
 801c2ba:	009b      	lsls	r3, r3, #2
 801c2bc:	189b      	adds	r3, r3, r2
 801c2be:	011b      	lsls	r3, r3, #4
 801c2c0:	18cb      	adds	r3, r1, r3
 801c2c2:	334c      	adds	r3, #76	; 0x4c
 801c2c4:	2488      	movs	r4, #136	; 0x88
 801c2c6:	193a      	adds	r2, r7, r4
 801c2c8:	6812      	ldr	r2, [r2, #0]
 801c2ca:	601a      	str	r2, [r3, #0]
      rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO + 1U;
 801c2cc:	230e      	movs	r3, #14
 801c2ce:	18fb      	adds	r3, r7, r3
 801c2d0:	781b      	ldrb	r3, [r3, #0]
 801c2d2:	3301      	adds	r3, #1
 801c2d4:	b2db      	uxtb	r3, r3
 801c2d6:	1c1a      	adds	r2, r3, #0
 801c2d8:	2307      	movs	r3, #7
 801c2da:	4013      	ands	r3, r2
 801c2dc:	b2da      	uxtb	r2, r3
 801c2de:	2377      	movs	r3, #119	; 0x77
 801c2e0:	18fb      	adds	r3, r7, r3
 801c2e2:	2107      	movs	r1, #7
 801c2e4:	400a      	ands	r2, r1
 801c2e6:	0110      	lsls	r0, r2, #4
 801c2e8:	781a      	ldrb	r2, [r3, #0]
 801c2ea:	2170      	movs	r1, #112	; 0x70
 801c2ec:	438a      	bics	r2, r1
 801c2ee:	1c11      	adds	r1, r2, #0
 801c2f0:	1c02      	adds	r2, r0, #0
 801c2f2:	430a      	orrs	r2, r1
 801c2f4:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 801c2f6:	193b      	adds	r3, r7, r4
 801c2f8:	681b      	ldr	r3, [r3, #0]
 801c2fa:	2132      	movs	r1, #50	; 0x32
 801c2fc:	0018      	movs	r0, r3
 801c2fe:	f7e9 ff77 	bl	80061f0 <__udivsi3>
 801c302:	0003      	movs	r3, r0
 801c304:	1c1a      	adds	r2, r3, #0
 801c306:	237f      	movs	r3, #127	; 0x7f
 801c308:	4013      	ands	r3, r2
 801c30a:	b2da      	uxtb	r2, r3
 801c30c:	2374      	movs	r3, #116	; 0x74
 801c30e:	18fb      	adds	r3, r7, r3
 801c310:	217f      	movs	r1, #127	; 0x7f
 801c312:	400a      	ands	r2, r1
 801c314:	0010      	movs	r0, r2
 801c316:	781a      	ldrb	r2, [r3, #0]
 801c318:	217f      	movs	r1, #127	; 0x7f
 801c31a:	438a      	bics	r2, r1
 801c31c:	1c11      	adds	r1, r2, #0
 801c31e:	1c02      	adds	r2, r0, #0
 801c320:	430a      	orrs	r2, r1
 801c322:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 801c324:	238c      	movs	r3, #140	; 0x8c
 801c326:	18fb      	adds	r3, r7, r3
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	2114      	movs	r1, #20
 801c32c:	0018      	movs	r0, r3
 801c32e:	f7e9 ff5f 	bl	80061f0 <__udivsi3>
 801c332:	0003      	movs	r3, r0
 801c334:	055b      	lsls	r3, r3, #21
 801c336:	0d5b      	lsrs	r3, r3, #21
 801c338:	b29b      	uxth	r3, r3
 801c33a:	055b      	lsls	r3, r3, #21
 801c33c:	0d5b      	lsrs	r3, r3, #21
 801c33e:	025b      	lsls	r3, r3, #9
 801c340:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c342:	4917      	ldr	r1, [pc, #92]	; (801c3a0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d8>)
 801c344:	400a      	ands	r2, r1
 801c346:	4313      	orrs	r3, r2
 801c348:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 801c34a:	46c0      	nop			; (mov r8, r8)
  }

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 801c34c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c34e:	2184      	movs	r1, #132	; 0x84
 801c350:	187b      	adds	r3, r7, r1
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	63da      	str	r2, [r3, #60]	; 0x3c
  pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 801c356:	2377      	movs	r3, #119	; 0x77
 801c358:	18fb      	adds	r3, r7, r3
 801c35a:	781b      	ldrb	r3, [r3, #0]
 801c35c:	065b      	lsls	r3, r3, #25
 801c35e:	0f5b      	lsrs	r3, r3, #29
 801c360:	b2db      	uxtb	r3, r3
 801c362:	001a      	movs	r2, r3
 801c364:	187b      	adds	r3, r7, r1
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	641a      	str	r2, [r3, #64]	; 0x40

  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 801c36a:	187b      	adds	r3, r7, r1
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	601a      	str	r2, [r3, #0]
  /* Get the requested voltage */
  pdhandle->DPM_RequestedVoltage = mv;
 801c374:	187b      	adds	r3, r7, r1
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	228c      	movs	r2, #140	; 0x8c
 801c37a:	18ba      	adds	r2, r7, r2
 801c37c:	6812      	ldr	r2, [r2, #0]
 801c37e:	649a      	str	r2, [r3, #72]	; 0x48
}
 801c380:	46bd      	mov	sp, r7
 801c382:	b025      	add	sp, #148	; 0x94
 801c384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c386:	46c0      	nop			; (mov r8, r8)
 801c388:	20002f04 	.word	0x20002f04
 801c38c:	200000f8 	.word	0x200000f8
 801c390:	20002ef0 	.word	0x20002ef0
 801c394:	200000e4 	.word	0x200000e4
 801c398:	08023ed8 	.word	0x08023ed8
 801c39c:	fff003ff 	.word	0xfff003ff
 801c3a0:	fff001ff 	.word	0xfff001ff

0801c3a4 <USER_SERV_SNK_BuildRequestedRDO>:
void USER_SERV_SNK_BuildRequestedRDO(uint8_t PortNum,
                                                  uint16_t IndexSrcPDO,
												  uint16_t Voltage_mV, uint16_t Current_mA,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 801c3a4:	b5b0      	push	{r4, r5, r7, lr}
 801c3a6:	b088      	sub	sp, #32
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	0005      	movs	r5, r0
 801c3ac:	000c      	movs	r4, r1
 801c3ae:	0010      	movs	r0, r2
 801c3b0:	0019      	movs	r1, r3
 801c3b2:	1dfb      	adds	r3, r7, #7
 801c3b4:	1c2a      	adds	r2, r5, #0
 801c3b6:	701a      	strb	r2, [r3, #0]
 801c3b8:	1d3b      	adds	r3, r7, #4
 801c3ba:	1c22      	adds	r2, r4, #0
 801c3bc:	801a      	strh	r2, [r3, #0]
 801c3be:	1cbb      	adds	r3, r7, #2
 801c3c0:	1c02      	adds	r2, r0, #0
 801c3c2:	801a      	strh	r2, [r3, #0]
 801c3c4:	003b      	movs	r3, r7
 801c3c6:	1c0a      	adds	r2, r1, #0
 801c3c8:	801a      	strh	r2, [r3, #0]
  uint32_t mv = Voltage_mV;
 801c3ca:	1cbb      	adds	r3, r7, #2
 801c3cc:	881b      	ldrh	r3, [r3, #0]
 801c3ce:	61fb      	str	r3, [r7, #28]
  uint32_t ma = Current_mA;
 801c3d0:	003b      	movs	r3, r7
 801c3d2:	881b      	ldrh	r3, [r3, #0]
 801c3d4:	61bb      	str	r3, [r7, #24]
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801c3d6:	1dfb      	adds	r3, r7, #7
 801c3d8:	781a      	ldrb	r2, [r3, #0]
 801c3da:	0013      	movs	r3, r2
 801c3dc:	009b      	lsls	r3, r3, #2
 801c3de:	189b      	adds	r3, r3, r2
 801c3e0:	011b      	lsls	r3, r3, #4
 801c3e2:	4a63      	ldr	r2, [pc, #396]	; (801c570 <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 801c3e4:	189b      	adds	r3, r3, r2
 801c3e6:	617b      	str	r3, [r7, #20]

  /* Initialize RDO */
  rdo.d32 = 0;
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	60fb      	str	r3, [r7, #12]
  rdo.GenericRDO.USBCommunicationsCapable = 0; //snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801c3ec:	200f      	movs	r0, #15
 801c3ee:	183b      	adds	r3, r7, r0
 801c3f0:	781a      	ldrb	r2, [r3, #0]
 801c3f2:	2102      	movs	r1, #2
 801c3f4:	438a      	bics	r2, r1
 801c3f6:	701a      	strb	r2, [r3, #0]
                                               //Shall only be set for Sources capable of communication over the USB data lines
  rdo.GenericRDO.NoUSBSuspend             = 1; //Sinks May indicate to the Source that they would prefer to have the USB Suspend Supported flag cleared by setting
 801c3f8:	183b      	adds	r3, r7, r0
 801c3fa:	781a      	ldrb	r2, [r3, #0]
 801c3fc:	2101      	movs	r1, #1
 801c3fe:	430a      	orrs	r2, r1
 801c400:	701a      	strb	r2, [r3, #0]
                                               //the No USB Suspend flag in a Request Message
  rdo.GenericRDO.ObjectPosition = IndexSrcPDO;
 801c402:	1d3b      	adds	r3, r7, #4
 801c404:	881b      	ldrh	r3, [r3, #0]
 801c406:	1c1a      	adds	r2, r3, #0
 801c408:	2307      	movs	r3, #7
 801c40a:	4013      	ands	r3, r2
 801c40c:	b2da      	uxtb	r2, r3
 801c40e:	183b      	adds	r3, r7, r0
 801c410:	2107      	movs	r1, #7
 801c412:	400a      	ands	r2, r1
 801c414:	0110      	lsls	r0, r2, #4
 801c416:	781a      	ldrb	r2, [r3, #0]
 801c418:	2170      	movs	r1, #112	; 0x70
 801c41a:	438a      	bics	r2, r1
 801c41c:	1c11      	adds	r1, r2, #0
 801c41e:	1c02      	adds	r2, r0, #0
 801c420:	430a      	orrs	r2, r1
 801c422:	701a      	strb	r2, [r3, #0]

  /* Initialize PDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO-1];
 801c424:	1d3b      	adds	r3, r7, #4
 801c426:	881b      	ldrh	r3, [r3, #0]
 801c428:	1e5a      	subs	r2, r3, #1
 801c42a:	697b      	ldr	r3, [r7, #20]
 801c42c:	0092      	lsls	r2, r2, #2
 801c42e:	58d3      	ldr	r3, [r2, r3]
 801c430:	613b      	str	r3, [r7, #16]
  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 801c432:	2113      	movs	r1, #19
 801c434:	187b      	adds	r3, r7, r1
 801c436:	781b      	ldrb	r3, [r3, #0]
 801c438:	061b      	lsls	r3, r3, #24
 801c43a:	0f9b      	lsrs	r3, r3, #30
 801c43c:	b2db      	uxtb	r3, r3
 801c43e:	001a      	movs	r2, r3
 801c440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c442:	601a      	str	r2, [r3, #0]

  /* Build RDO*/
  switch (pdo.GenericPDO.PowerObject)
 801c444:	187b      	adds	r3, r7, r1
 801c446:	781b      	ldrb	r3, [r3, #0]
 801c448:	061b      	lsls	r3, r3, #24
 801c44a:	0f9b      	lsrs	r3, r3, #30
 801c44c:	b2db      	uxtb	r3, r3
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d002      	beq.n	801c458 <USER_SERV_SNK_BuildRequestedRDO+0xb4>
 801c452:	2b03      	cmp	r3, #3
 801c454:	d02e      	beq.n	801c4b4 <USER_SERV_SNK_BuildRequestedRDO+0x110>
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
      }
      break;

      default:
        break;
 801c456:	e072      	b.n	801c53e <USER_SERV_SNK_BuildRequestedRDO+0x19a>
        DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 801c458:	1dfb      	adds	r3, r7, #7
 801c45a:	781a      	ldrb	r2, [r3, #0]
 801c45c:	4944      	ldr	r1, [pc, #272]	; (801c570 <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 801c45e:	0013      	movs	r3, r2
 801c460:	009b      	lsls	r3, r3, #2
 801c462:	189b      	adds	r3, r3, r2
 801c464:	011b      	lsls	r3, r3, #4
 801c466:	18cb      	adds	r3, r1, r3
 801c468:	334c      	adds	r3, #76	; 0x4c
 801c46a:	69ba      	ldr	r2, [r7, #24]
 801c46c:	601a      	str	r2, [r3, #0]
        rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 801c46e:	69bb      	ldr	r3, [r7, #24]
 801c470:	210a      	movs	r1, #10
 801c472:	0018      	movs	r0, r3
 801c474:	f7e9 febc 	bl	80061f0 <__udivsi3>
 801c478:	0003      	movs	r3, r0
 801c47a:	059b      	lsls	r3, r3, #22
 801c47c:	0d9b      	lsrs	r3, r3, #22
 801c47e:	b29b      	uxth	r3, r3
 801c480:	059b      	lsls	r3, r3, #22
 801c482:	0d9b      	lsrs	r3, r3, #22
 801c484:	029b      	lsls	r3, r3, #10
 801c486:	68fa      	ldr	r2, [r7, #12]
 801c488:	493a      	ldr	r1, [pc, #232]	; (801c574 <USER_SERV_SNK_BuildRequestedRDO+0x1d0>)
 801c48a:	400a      	ands	r2, r1
 801c48c:	4313      	orrs	r3, r2
 801c48e:	60fb      	str	r3, [r7, #12]
        rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits; //ma / 10U;
 801c490:	2310      	movs	r3, #16
 801c492:	18fb      	adds	r3, r7, r3
 801c494:	881b      	ldrh	r3, [r3, #0]
 801c496:	059b      	lsls	r3, r3, #22
 801c498:	0d9b      	lsrs	r3, r3, #22
 801c49a:	b29a      	uxth	r2, r3
 801c49c:	230c      	movs	r3, #12
 801c49e:	18fb      	adds	r3, r7, r3
 801c4a0:	0592      	lsls	r2, r2, #22
 801c4a2:	0d90      	lsrs	r0, r2, #22
 801c4a4:	881a      	ldrh	r2, [r3, #0]
 801c4a6:	0a92      	lsrs	r2, r2, #10
 801c4a8:	0292      	lsls	r2, r2, #10
 801c4aa:	1c11      	adds	r1, r2, #0
 801c4ac:	1c02      	adds	r2, r0, #0
 801c4ae:	430a      	orrs	r2, r1
 801c4b0:	801a      	strh	r2, [r3, #0]
      break;
 801c4b2:	e044      	b.n	801c53e <USER_SERV_SNK_BuildRequestedRDO+0x19a>
        DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 801c4b4:	1dfb      	adds	r3, r7, #7
 801c4b6:	781a      	ldrb	r2, [r3, #0]
 801c4b8:	492d      	ldr	r1, [pc, #180]	; (801c570 <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 801c4ba:	0013      	movs	r3, r2
 801c4bc:	009b      	lsls	r3, r3, #2
 801c4be:	189b      	adds	r3, r3, r2
 801c4c0:	011b      	lsls	r3, r3, #4
 801c4c2:	18cb      	adds	r3, r1, r3
 801c4c4:	334c      	adds	r3, #76	; 0x4c
 801c4c6:	69ba      	ldr	r2, [r7, #24]
 801c4c8:	601a      	str	r2, [r3, #0]
        rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO;
 801c4ca:	1d3b      	adds	r3, r7, #4
 801c4cc:	881b      	ldrh	r3, [r3, #0]
 801c4ce:	1c1a      	adds	r2, r3, #0
 801c4d0:	2307      	movs	r3, #7
 801c4d2:	4013      	ands	r3, r2
 801c4d4:	b2da      	uxtb	r2, r3
 801c4d6:	230f      	movs	r3, #15
 801c4d8:	18fb      	adds	r3, r7, r3
 801c4da:	2107      	movs	r1, #7
 801c4dc:	400a      	ands	r2, r1
 801c4de:	0110      	lsls	r0, r2, #4
 801c4e0:	781a      	ldrb	r2, [r3, #0]
 801c4e2:	2170      	movs	r1, #112	; 0x70
 801c4e4:	438a      	bics	r2, r1
 801c4e6:	1c11      	adds	r1, r2, #0
 801c4e8:	1c02      	adds	r2, r0, #0
 801c4ea:	430a      	orrs	r2, r1
 801c4ec:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 801c4ee:	69bb      	ldr	r3, [r7, #24]
 801c4f0:	2132      	movs	r1, #50	; 0x32
 801c4f2:	0018      	movs	r0, r3
 801c4f4:	f7e9 fe7c 	bl	80061f0 <__udivsi3>
 801c4f8:	0003      	movs	r3, r0
 801c4fa:	1c1a      	adds	r2, r3, #0
 801c4fc:	237f      	movs	r3, #127	; 0x7f
 801c4fe:	4013      	ands	r3, r2
 801c500:	b2da      	uxtb	r2, r3
 801c502:	230c      	movs	r3, #12
 801c504:	18fb      	adds	r3, r7, r3
 801c506:	217f      	movs	r1, #127	; 0x7f
 801c508:	400a      	ands	r2, r1
 801c50a:	0010      	movs	r0, r2
 801c50c:	781a      	ldrb	r2, [r3, #0]
 801c50e:	217f      	movs	r1, #127	; 0x7f
 801c510:	438a      	bics	r2, r1
 801c512:	1c11      	adds	r1, r2, #0
 801c514:	1c02      	adds	r2, r0, #0
 801c516:	430a      	orrs	r2, r1
 801c518:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 801c51a:	69fb      	ldr	r3, [r7, #28]
 801c51c:	2114      	movs	r1, #20
 801c51e:	0018      	movs	r0, r3
 801c520:	f7e9 fe66 	bl	80061f0 <__udivsi3>
 801c524:	0003      	movs	r3, r0
 801c526:	055b      	lsls	r3, r3, #21
 801c528:	0d5b      	lsrs	r3, r3, #21
 801c52a:	b29b      	uxth	r3, r3
 801c52c:	055b      	lsls	r3, r3, #21
 801c52e:	0d5b      	lsrs	r3, r3, #21
 801c530:	025b      	lsls	r3, r3, #9
 801c532:	68fa      	ldr	r2, [r7, #12]
 801c534:	4910      	ldr	r1, [pc, #64]	; (801c578 <USER_SERV_SNK_BuildRequestedRDO+0x1d4>)
 801c536:	400a      	ands	r2, r1
 801c538:	4313      	orrs	r3, r2
 801c53a:	60fb      	str	r3, [r7, #12]
      break;
 801c53c:	46c0      	nop			; (mov r8, r8)
    }

  /*Assign request values to pdhandle*/
  pdhandle->DPM_RDOPositionPrevious = pdhandle->DPM_RDOPosition;
 801c53e:	697b      	ldr	r3, [r7, #20]
 801c540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c542:	697b      	ldr	r3, [r7, #20]
 801c544:	645a      	str	r2, [r3, #68]	; 0x44
  pdhandle->DPM_RDOPosition = IndexSrcPDO; //pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 801c546:	1d3b      	adds	r3, r7, #4
 801c548:	881a      	ldrh	r2, [r3, #0]
 801c54a:	697b      	ldr	r3, [r7, #20]
 801c54c:	641a      	str	r2, [r3, #64]	; 0x40
  pdhandle->DPM_RequestedVoltage = mv;
 801c54e:	697b      	ldr	r3, [r7, #20]
 801c550:	69fa      	ldr	r2, [r7, #28]
 801c552:	649a      	str	r2, [r3, #72]	; 0x48
  pdhandle->DPM_RequestedCurrent = ma;
 801c554:	697b      	ldr	r3, [r7, #20]
 801c556:	69ba      	ldr	r2, [r7, #24]
 801c558:	64da      	str	r2, [r3, #76]	; 0x4c

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 801c55a:	68fa      	ldr	r2, [r7, #12]
 801c55c:	697b      	ldr	r3, [r7, #20]
 801c55e:	63da      	str	r2, [r3, #60]	; 0x3c
  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 801c560:	697b      	ldr	r3, [r7, #20]
 801c562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c566:	601a      	str	r2, [r3, #0]

}
 801c568:	46c0      	nop			; (mov r8, r8)
 801c56a:	46bd      	mov	sp, r7
 801c56c:	b008      	add	sp, #32
 801c56e:	bdb0      	pop	{r4, r5, r7, pc}
 801c570:	20002f04 	.word	0x20002f04
 801c574:	fff003ff 	.word	0xfff003ff
 801c578:	fff001ff 	.word	0xfff001ff

0801c57c <USER_SERV_FindSRCIndex>:
											USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
											uint16_t Voltage_mV,
											uint16_t Current_mA,
											uint8_t Method)

{
 801c57c:	b590      	push	{r4, r7, lr}
 801c57e:	b099      	sub	sp, #100	; 0x64
 801c580:	af00      	add	r7, sp, #0
 801c582:	60f8      	str	r0, [r7, #12]
 801c584:	60b9      	str	r1, [r7, #8]
 801c586:	0019      	movs	r1, r3
 801c588:	1dbb      	adds	r3, r7, #6
 801c58a:	801a      	strh	r2, [r3, #0]
 801c58c:	1d3b      	adds	r3, r7, #4
 801c58e:	1c0a      	adds	r2, r1, #0
 801c590:	801a      	strh	r2, [r3, #0]
	USBPD_PDO_TypeDef srcpdo;
	uint32_t *ptpdoarray;
	uint32_t reqvoltage = Voltage_mV;
 801c592:	1dbb      	adds	r3, r7, #6
 801c594:	881b      	ldrh	r3, [r3, #0]
 801c596:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t reqcurrent = Current_mA;
 801c598:	1d3b      	adds	r3, r7, #4
 801c59a:	881b      	ldrh	r3, [r3, #0]
 801c59c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t nbsrcpdo;
	uint32_t allowablepower;
	uint32_t selpower;
	uint32_t allowablecurrent;
	uint32_t selcurrent = 0;
 801c59e:	2300      	movs	r3, #0
 801c5a0:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 801c5a2:	23ff      	movs	r3, #255	; 0xff
 801c5a4:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t temp_index;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	2274      	movs	r2, #116	; 0x74
 801c5aa:	435a      	muls	r2, r3
 801c5ac:	4b7d      	ldr	r3, [pc, #500]	; (801c7a4 <USER_SERV_FindSRCIndex+0x228>)
 801c5ae:	18d3      	adds	r3, r2, r3
 801c5b0:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t RDOposition;
	uint32_t nbsrcAPDO = 0;
 801c5b2:	2300      	movs	r3, #0
 801c5b4:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t nbsrcFixedPDO = 0;
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	64fb      	str	r3, [r7, #76]	; 0x4c


	//Get current PDO position
	USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801c5ba:	68fa      	ldr	r2, [r7, #12]
 801c5bc:	0013      	movs	r3, r2
 801c5be:	009b      	lsls	r3, r3, #2
 801c5c0:	189b      	adds	r3, r3, r2
 801c5c2:	011b      	lsls	r3, r3, #4
 801c5c4:	4a78      	ldr	r2, [pc, #480]	; (801c7a8 <USER_SERV_FindSRCIndex+0x22c>)
 801c5c6:	189b      	adds	r3, r3, r2
 801c5c8:	637b      	str	r3, [r7, #52]	; 0x34
	RDOposition = pdhandle->DPM_RDOPosition;
 801c5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5ce:	633b      	str	r3, [r7, #48]	; 0x30

	//Get number of source PDOs
	nbsrcpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 801c5d0:	4975      	ldr	r1, [pc, #468]	; (801c7a8 <USER_SERV_FindSRCIndex+0x22c>)
 801c5d2:	68fa      	ldr	r2, [r7, #12]
 801c5d4:	0013      	movs	r3, r2
 801c5d6:	009b      	lsls	r3, r3, #2
 801c5d8:	189b      	adds	r3, r3, r2
 801c5da:	011b      	lsls	r3, r3, #4
 801c5dc:	18cb      	adds	r3, r1, r3
 801c5de:	331c      	adds	r3, #28
 801c5e0:	681b      	ldr	r3, [r3, #0]
 801c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	//Get array list of SRC PDOs
	ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 801c5e4:	68fa      	ldr	r2, [r7, #12]
 801c5e6:	0013      	movs	r3, r2
 801c5e8:	009b      	lsls	r3, r3, #2
 801c5ea:	189b      	adds	r3, r3, r2
 801c5ec:	011b      	lsls	r3, r3, #4
 801c5ee:	4a6e      	ldr	r2, [pc, #440]	; (801c7a8 <USER_SERV_FindSRCIndex+0x22c>)
 801c5f0:	189b      	adds	r3, r3, r2
 801c5f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Get number of APDOs and FixedPDOs */
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	657b      	str	r3, [r7, #84]	; 0x54
 801c5f8:	e019      	b.n	801c62e <USER_SERV_FindSRCIndex+0xb2>
	{
		srcpdo.d32 = ptpdoarray[temp_index];
 801c5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c5fc:	009b      	lsls	r3, r3, #2
 801c5fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c600:	18d3      	adds	r3, r2, r3
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	613b      	str	r3, [r7, #16]

		switch (srcpdo.GenericPDO.PowerObject)
 801c606:	2313      	movs	r3, #19
 801c608:	18fb      	adds	r3, r7, r3
 801c60a:	781b      	ldrb	r3, [r3, #0]
 801c60c:	061b      	lsls	r3, r3, #24
 801c60e:	0f9b      	lsrs	r3, r3, #30
 801c610:	b2db      	uxtb	r3, r3
 801c612:	2b00      	cmp	r3, #0
 801c614:	d002      	beq.n	801c61c <USER_SERV_FindSRCIndex+0xa0>
 801c616:	2b03      	cmp	r3, #3
 801c618:	d003      	beq.n	801c622 <USER_SERV_FindSRCIndex+0xa6>
 801c61a:	e005      	b.n	801c628 <USER_SERV_FindSRCIndex+0xac>
		{
			/* SRC Fixed Supply PDO */
			case USBPD_CORE_PDO_TYPE_FIXED:
			{
				nbsrcFixedPDO++;
 801c61c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c61e:	3301      	adds	r3, #1
 801c620:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			/* Augmented Power Data Object (APDO) */
			case USBPD_CORE_PDO_TYPE_APDO:
			{
				//nbsrcAPDO++;
				nbsrcAPDO++;
 801c622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c624:	3301      	adds	r3, #1
 801c626:	653b      	str	r3, [r7, #80]	; 0x50
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801c628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c62a:	3301      	adds	r3, #1
 801c62c:	657b      	str	r3, [r7, #84]	; 0x54
 801c62e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c632:	429a      	cmp	r2, r3
 801c634:	d3e1      	bcc.n	801c5fa <USER_SERV_FindSRCIndex+0x7e>
		}
	}


	// Search for matching APDO or find next FixedPDO
	if (nbsrcAPDO > 0)
 801c636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d100      	bne.n	801c63e <USER_SERV_FindSRCIndex+0xc2>
 801c63c:	e07c      	b.n	801c738 <USER_SERV_FindSRCIndex+0x1bc>
	{

		/* Check SRC PDO value according to its type */
		for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801c63e:	2300      	movs	r3, #0
 801c640:	657b      	str	r3, [r7, #84]	; 0x54
 801c642:	e074      	b.n	801c72e <USER_SERV_FindSRCIndex+0x1b2>
		{
			srcpdo.d32 = ptpdoarray[temp_index];
 801c644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c646:	009b      	lsls	r3, r3, #2
 801c648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c64a:	18d3      	adds	r3, r2, r3
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	613b      	str	r3, [r7, #16]

			switch (srcpdo.GenericPDO.PowerObject)
 801c650:	2313      	movs	r3, #19
 801c652:	18fb      	adds	r3, r7, r3
 801c654:	781b      	ldrb	r3, [r3, #0]
 801c656:	061b      	lsls	r3, r3, #24
 801c658:	0f9b      	lsrs	r3, r3, #30
 801c65a:	b2db      	uxtb	r3, r3
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d001      	beq.n	801c664 <USER_SERV_FindSRCIndex+0xe8>
 801c660:	2b03      	cmp	r3, #3
 801c662:	d161      	bne.n	801c728 <USER_SERV_FindSRCIndex+0x1ac>
			{
				uint16_t srcmaxvoltage100mv;
				uint16_t srcminvoltage100mv;
				uint16_t srcmaxcurrent50ma;
				//Extract voltage and current limits of given SRC APDO
				srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801c664:	2312      	movs	r3, #18
 801c666:	18fb      	adds	r3, r7, r3
 801c668:	881b      	ldrh	r3, [r3, #0]
 801c66a:	05db      	lsls	r3, r3, #23
 801c66c:	0e1b      	lsrs	r3, r3, #24
 801c66e:	b2da      	uxtb	r2, r3
 801c670:	201e      	movs	r0, #30
 801c672:	183b      	adds	r3, r7, r0
 801c674:	801a      	strh	r2, [r3, #0]
				srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801c676:	2110      	movs	r1, #16
 801c678:	187b      	adds	r3, r7, r1
 801c67a:	785a      	ldrb	r2, [r3, #1]
 801c67c:	241c      	movs	r4, #28
 801c67e:	193b      	adds	r3, r7, r4
 801c680:	801a      	strh	r2, [r3, #0]
				srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801c682:	187b      	adds	r3, r7, r1
 801c684:	781b      	ldrb	r3, [r3, #0]
 801c686:	065b      	lsls	r3, r3, #25
 801c688:	0e5b      	lsrs	r3, r3, #25
 801c68a:	b2da      	uxtb	r2, r3
 801c68c:	211a      	movs	r1, #26
 801c68e:	187b      	adds	r3, r7, r1
 801c690:	801a      	strh	r2, [r3, #0]

				/*Check if reqvoltage falls within SRC_APDO voltage range*/
				if ( (PWR_DECODE_100MV(srcminvoltage100mv) <= reqvoltage) && (reqvoltage <= PWR_DECODE_100MV(srcmaxvoltage100mv)) )
 801c692:	193b      	adds	r3, r7, r4
 801c694:	881b      	ldrh	r3, [r3, #0]
 801c696:	2264      	movs	r2, #100	; 0x64
 801c698:	4353      	muls	r3, r2
 801c69a:	b29b      	uxth	r3, r3
 801c69c:	001a      	movs	r2, r3
 801c69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c6a0:	4293      	cmp	r3, r2
 801c6a2:	d341      	bcc.n	801c728 <USER_SERV_FindSRCIndex+0x1ac>
 801c6a4:	183b      	adds	r3, r7, r0
 801c6a6:	881b      	ldrh	r3, [r3, #0]
 801c6a8:	2264      	movs	r2, #100	; 0x64
 801c6aa:	4353      	muls	r3, r2
 801c6ac:	b29b      	uxth	r3, r3
 801c6ae:	001a      	movs	r2, r3
 801c6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c6b2:	4293      	cmp	r3, r2
 801c6b4:	d838      	bhi.n	801c728 <USER_SERV_FindSRCIndex+0x1ac>
				{
					/*Check that reqcurrent is smaller or equal to srcmaxcurrent*/
					if ( (reqcurrent <= PWR_DECODE_50MA(srcmaxcurrent50ma)) && (reqcurrent != 0) )
 801c6b6:	187b      	adds	r3, r7, r1
 801c6b8:	881b      	ldrh	r3, [r3, #0]
 801c6ba:	2232      	movs	r2, #50	; 0x32
 801c6bc:	4353      	muls	r3, r2
 801c6be:	b29b      	uxth	r3, r3
 801c6c0:	001a      	movs	r2, r3
 801c6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c6c4:	4293      	cmp	r3, r2
 801c6c6:	d82f      	bhi.n	801c728 <USER_SERV_FindSRCIndex+0x1ac>
 801c6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d02c      	beq.n	801c728 <USER_SERV_FindSRCIndex+0x1ac>
					{
						/*Convert srcmaxcurrent into mV*/
						allowablecurrent = PWR_DECODE_50MA(srcmaxcurrent50ma);
 801c6ce:	187b      	adds	r3, r7, r1
 801c6d0:	881b      	ldrh	r3, [r3, #0]
 801c6d2:	2232      	movs	r2, #50	; 0x32
 801c6d4:	4353      	muls	r3, r2
 801c6d6:	b29b      	uxth	r3, r3
 801c6d8:	617b      	str	r3, [r7, #20]

						/*Find the best APDO index based on the method */
						switch(Method)
 801c6da:	2368      	movs	r3, #104	; 0x68
 801c6dc:	2208      	movs	r2, #8
 801c6de:	189b      	adds	r3, r3, r2
 801c6e0:	19db      	adds	r3, r3, r7
 801c6e2:	781b      	ldrb	r3, [r3, #0]
 801c6e4:	2b04      	cmp	r3, #4
 801c6e6:	d002      	beq.n	801c6ee <USER_SERV_FindSRCIndex+0x172>
 801c6e8:	2b05      	cmp	r3, #5
 801c6ea:	d009      	beq.n	801c700 <USER_SERV_FindSRCIndex+0x184>
 801c6ec:	e014      	b.n	801c718 <USER_SERV_FindSRCIndex+0x19c>
						{
						case PDO_SEL_METHOD_MAX_CUR:
							if (allowablecurrent > selcurrent)
 801c6ee:	697a      	ldr	r2, [r7, #20]
 801c6f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c6f2:	429a      	cmp	r2, r3
 801c6f4:	d915      	bls.n	801c722 <USER_SERV_FindSRCIndex+0x1a6>
							{
								/* Consider the current PDO the best one until now */
								curr_index = temp_index;
 801c6f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c6f8:	65bb      	str	r3, [r7, #88]	; 0x58
								selcurrent = allowablecurrent;
 801c6fa:	697b      	ldr	r3, [r7, #20]
 801c6fc:	65fb      	str	r3, [r7, #92]	; 0x5c
							}
							break;
 801c6fe:	e010      	b.n	801c722 <USER_SERV_FindSRCIndex+0x1a6>

						case PDO_SEL_METHOD_MIN_CUR:
							if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 801c700:	697a      	ldr	r2, [r7, #20]
 801c702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c704:	429a      	cmp	r2, r3
 801c706:	d302      	bcc.n	801c70e <USER_SERV_FindSRCIndex+0x192>
 801c708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d10b      	bne.n	801c726 <USER_SERV_FindSRCIndex+0x1aa>
							{
								/* Consider the current PDO the best one until now */
								curr_index = temp_index;
 801c70e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c710:	65bb      	str	r3, [r7, #88]	; 0x58
								selcurrent = allowablecurrent;
 801c712:	697b      	ldr	r3, [r7, #20]
 801c714:	65fb      	str	r3, [r7, #92]	; 0x5c
							}
							break;
 801c716:	e006      	b.n	801c726 <USER_SERV_FindSRCIndex+0x1aa>

						default:
							/* Default behavior: last PDO is selected */
							curr_index = temp_index;
 801c718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c71a:	65bb      	str	r3, [r7, #88]	; 0x58
							selcurrent = allowablecurrent;
 801c71c:	697b      	ldr	r3, [r7, #20]
 801c71e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c720:	e002      	b.n	801c728 <USER_SERV_FindSRCIndex+0x1ac>
							break;
 801c722:	46c0      	nop			; (mov r8, r8)
 801c724:	e000      	b.n	801c728 <USER_SERV_FindSRCIndex+0x1ac>
							break;
 801c726:	46c0      	nop			; (mov r8, r8)
		for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801c728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c72a:	3301      	adds	r3, #1
 801c72c:	657b      	str	r3, [r7, #84]	; 0x54
 801c72e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c732:	429a      	cmp	r2, r3
 801c734:	d386      	bcc.n	801c644 <USER_SERV_FindSRCIndex+0xc8>
 801c736:	e02e      	b.n	801c796 <USER_SERV_FindSRCIndex+0x21a>
		}
	}

	else
	{
		uint32_t start_index = RDOposition;
 801c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c73a:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t found_fixed_pdo = 0;
 801c73c:	2300      	movs	r3, #0
 801c73e:	64bb      	str	r3, [r7, #72]	; 0x48

		// Start searching for the next Fixed PDO
		for (uint32_t i = 0; i < nbsrcpdo; i++)
 801c740:	2300      	movs	r3, #0
 801c742:	647b      	str	r3, [r7, #68]	; 0x44
 801c744:	e01e      	b.n	801c784 <USER_SERV_FindSRCIndex+0x208>
		{
			// Increment and wrap around if necessary
			uint32_t check_index = (start_index + i) % nbsrcpdo;
 801c746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c74a:	18d3      	adds	r3, r2, r3
 801c74c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c74e:	0018      	movs	r0, r3
 801c750:	f7e9 fdd4 	bl	80062fc <__aeabi_uidivmod>
 801c754:	000b      	movs	r3, r1
 801c756:	623b      	str	r3, [r7, #32]

			// Load the PDO
			srcpdo.d32 = ptpdoarray[check_index];
 801c758:	6a3b      	ldr	r3, [r7, #32]
 801c75a:	009b      	lsls	r3, r3, #2
 801c75c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c75e:	18d3      	adds	r3, r2, r3
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	613b      	str	r3, [r7, #16]

			// Check if it's a Fixed PDO
			if (srcpdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_FIXED)
 801c764:	2313      	movs	r3, #19
 801c766:	18fb      	adds	r3, r7, r3
 801c768:	781b      	ldrb	r3, [r3, #0]
 801c76a:	223f      	movs	r2, #63	; 0x3f
 801c76c:	4393      	bics	r3, r2
 801c76e:	b2db      	uxtb	r3, r3
 801c770:	2b00      	cmp	r3, #0
 801c772:	d104      	bne.n	801c77e <USER_SERV_FindSRCIndex+0x202>
			{
				curr_index = check_index;
 801c774:	6a3b      	ldr	r3, [r7, #32]
 801c776:	65bb      	str	r3, [r7, #88]	; 0x58
				found_fixed_pdo = 1;
 801c778:	2301      	movs	r3, #1
 801c77a:	64bb      	str	r3, [r7, #72]	; 0x48
				break;
 801c77c:	e006      	b.n	801c78c <USER_SERV_FindSRCIndex+0x210>
		for (uint32_t i = 0; i < nbsrcpdo; i++)
 801c77e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c780:	3301      	adds	r3, #1
 801c782:	647b      	str	r3, [r7, #68]	; 0x44
 801c784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c788:	429a      	cmp	r2, r3
 801c78a:	d3dc      	bcc.n	801c746 <USER_SERV_FindSRCIndex+0x1ca>
			}
		}

		// Default to the first Fixed PDO if none found (failsafe)
		if (!found_fixed_pdo)
 801c78c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d101      	bne.n	801c796 <USER_SERV_FindSRCIndex+0x21a>
		{
			curr_index = 0;
 801c792:	2300      	movs	r3, #0
 801c794:	65bb      	str	r3, [r7, #88]	; 0x58
		}
	}

	return curr_index+1;
 801c796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c798:	3301      	adds	r3, #1
}
 801c79a:	0018      	movs	r0, r3
 801c79c:	46bd      	mov	sp, r7
 801c79e:	b019      	add	sp, #100	; 0x64
 801c7a0:	bd90      	pop	{r4, r7, pc}
 801c7a2:	46c0      	nop			; (mov r8, r8)
 801c7a4:	200000f8 	.word	0x200000f8
 801c7a8:	20002f04 	.word	0x20002f04

0801c7ac <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801c7b0:	4914      	ldr	r1, [pc, #80]	; (801c804 <MX_USB_Device_Init+0x58>)
 801c7b2:	4b15      	ldr	r3, [pc, #84]	; (801c808 <MX_USB_Device_Init+0x5c>)
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	0018      	movs	r0, r3
 801c7b8:	f7f8 fe40 	bl	801543c <USBD_Init>
 801c7bc:	1e03      	subs	r3, r0, #0
 801c7be:	d001      	beq.n	801c7c4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801c7c0:	f7ec f910 	bl	80089e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801c7c4:	4a11      	ldr	r2, [pc, #68]	; (801c80c <MX_USB_Device_Init+0x60>)
 801c7c6:	4b10      	ldr	r3, [pc, #64]	; (801c808 <MX_USB_Device_Init+0x5c>)
 801c7c8:	0011      	movs	r1, r2
 801c7ca:	0018      	movs	r0, r3
 801c7cc:	f7f8 fe70 	bl	80154b0 <USBD_RegisterClass>
 801c7d0:	1e03      	subs	r3, r0, #0
 801c7d2:	d001      	beq.n	801c7d8 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 801c7d4:	f7ec f906 	bl	80089e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801c7d8:	4a0d      	ldr	r2, [pc, #52]	; (801c810 <MX_USB_Device_Init+0x64>)
 801c7da:	4b0b      	ldr	r3, [pc, #44]	; (801c808 <MX_USB_Device_Init+0x5c>)
 801c7dc:	0011      	movs	r1, r2
 801c7de:	0018      	movs	r0, r3
 801c7e0:	f7f8 fd98 	bl	8015314 <USBD_CDC_RegisterInterface>
 801c7e4:	1e03      	subs	r3, r0, #0
 801c7e6:	d001      	beq.n	801c7ec <MX_USB_Device_Init+0x40>
    Error_Handler();
 801c7e8:	f7ec f8fc 	bl	80089e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801c7ec:	4b06      	ldr	r3, [pc, #24]	; (801c808 <MX_USB_Device_Init+0x5c>)
 801c7ee:	0018      	movs	r0, r3
 801c7f0:	f7f8 fe9c 	bl	801552c <USBD_Start>
 801c7f4:	1e03      	subs	r3, r0, #0
 801c7f6:	d001      	beq.n	801c7fc <MX_USB_Device_Init+0x50>
    Error_Handler();
 801c7f8:	f7ec f8f4 	bl	80089e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801c7fc:	46c0      	nop			; (mov r8, r8)
 801c7fe:	46bd      	mov	sp, r7
 801c800:	bd80      	pop	{r7, pc}
 801c802:	46c0      	nop			; (mov r8, r8)
 801c804:	200001a0 	.word	0x200001a0
 801c808:	20002f54 	.word	0x20002f54
 801c80c:	20000060 	.word	0x20000060
 801c810:	2000018c 	.word	0x2000018c

0801c814 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c814:	b580      	push	{r7, lr}
 801c816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c818:	4907      	ldr	r1, [pc, #28]	; (801c838 <CDC_Init_FS+0x24>)
 801c81a:	4b08      	ldr	r3, [pc, #32]	; (801c83c <CDC_Init_FS+0x28>)
 801c81c:	2200      	movs	r2, #0
 801c81e:	0018      	movs	r0, r3
 801c820:	f7f8 fd92 	bl	8015348 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c824:	4a06      	ldr	r2, [pc, #24]	; (801c840 <CDC_Init_FS+0x2c>)
 801c826:	4b05      	ldr	r3, [pc, #20]	; (801c83c <CDC_Init_FS+0x28>)
 801c828:	0011      	movs	r1, r2
 801c82a:	0018      	movs	r0, r3
 801c82c:	f7f8 fdaf 	bl	801538e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c830:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c832:	0018      	movs	r0, r3
 801c834:	46bd      	mov	sp, r7
 801c836:	bd80      	pop	{r7, pc}
 801c838:	20003a30 	.word	0x20003a30
 801c83c:	20002f54 	.word	0x20002f54
 801c840:	20003230 	.word	0x20003230

0801c844 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c844:	b580      	push	{r7, lr}
 801c846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c848:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c84a:	0018      	movs	r0, r3
 801c84c:	46bd      	mov	sp, r7
 801c84e:	bd80      	pop	{r7, pc}

0801c850 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b082      	sub	sp, #8
 801c854:	af00      	add	r7, sp, #0
 801c856:	6039      	str	r1, [r7, #0]
 801c858:	0011      	movs	r1, r2
 801c85a:	1dfb      	adds	r3, r7, #7
 801c85c:	1c02      	adds	r2, r0, #0
 801c85e:	701a      	strb	r2, [r3, #0]
 801c860:	1d3b      	adds	r3, r7, #4
 801c862:	1c0a      	adds	r2, r1, #0
 801c864:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c866:	1dfb      	adds	r3, r7, #7
 801c868:	781b      	ldrb	r3, [r3, #0]
 801c86a:	2b23      	cmp	r3, #35	; 0x23
 801c86c:	d804      	bhi.n	801c878 <CDC_Control_FS+0x28>
 801c86e:	009a      	lsls	r2, r3, #2
 801c870:	4b04      	ldr	r3, [pc, #16]	; (801c884 <CDC_Control_FS+0x34>)
 801c872:	18d3      	adds	r3, r2, r3
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c878:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 801c87a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c87c:	0018      	movs	r0, r3
 801c87e:	46bd      	mov	sp, r7
 801c880:	b002      	add	sp, #8
 801c882:	bd80      	pop	{r7, pc}
 801c884:	08024238 	.word	0x08024238

0801c888 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c888:	b580      	push	{r7, lr}
 801c88a:	b082      	sub	sp, #8
 801c88c:	af00      	add	r7, sp, #0
 801c88e:	6078      	str	r0, [r7, #4]
 801c890:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c892:	687a      	ldr	r2, [r7, #4]
 801c894:	4b06      	ldr	r3, [pc, #24]	; (801c8b0 <CDC_Receive_FS+0x28>)
 801c896:	0011      	movs	r1, r2
 801c898:	0018      	movs	r0, r3
 801c89a:	f7f8 fd78 	bl	801538e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c89e:	4b04      	ldr	r3, [pc, #16]	; (801c8b0 <CDC_Receive_FS+0x28>)
 801c8a0:	0018      	movs	r0, r3
 801c8a2:	f7f8 fd91 	bl	80153c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801c8a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c8a8:	0018      	movs	r0, r3
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	b002      	add	sp, #8
 801c8ae:	bd80      	pop	{r7, pc}
 801c8b0:	20002f54 	.word	0x20002f54

0801c8b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c8b4:	b580      	push	{r7, lr}
 801c8b6:	b086      	sub	sp, #24
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	60f8      	str	r0, [r7, #12]
 801c8bc:	60b9      	str	r1, [r7, #8]
 801c8be:	1dfb      	adds	r3, r7, #7
 801c8c0:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801c8c2:	2117      	movs	r1, #23
 801c8c4:	187b      	adds	r3, r7, r1
 801c8c6:	2200      	movs	r2, #0
 801c8c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801c8ca:	187b      	adds	r3, r7, r1
 801c8cc:	781b      	ldrb	r3, [r3, #0]
 801c8ce:	b25b      	sxtb	r3, r3
}
 801c8d0:	0018      	movs	r0, r3
 801c8d2:	46bd      	mov	sp, r7
 801c8d4:	b006      	add	sp, #24
 801c8d6:	bd80      	pop	{r7, pc}

0801c8d8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b082      	sub	sp, #8
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	0002      	movs	r2, r0
 801c8e0:	6039      	str	r1, [r7, #0]
 801c8e2:	1dfb      	adds	r3, r7, #7
 801c8e4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801c8e6:	683b      	ldr	r3, [r7, #0]
 801c8e8:	2212      	movs	r2, #18
 801c8ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801c8ec:	4b02      	ldr	r3, [pc, #8]	; (801c8f8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801c8ee:	0018      	movs	r0, r3
 801c8f0:	46bd      	mov	sp, r7
 801c8f2:	b002      	add	sp, #8
 801c8f4:	bd80      	pop	{r7, pc}
 801c8f6:	46c0      	nop			; (mov r8, r8)
 801c8f8:	200001c0 	.word	0x200001c0

0801c8fc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b082      	sub	sp, #8
 801c900:	af00      	add	r7, sp, #0
 801c902:	0002      	movs	r2, r0
 801c904:	6039      	str	r1, [r7, #0]
 801c906:	1dfb      	adds	r3, r7, #7
 801c908:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c90a:	683b      	ldr	r3, [r7, #0]
 801c90c:	2204      	movs	r2, #4
 801c90e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c910:	4b02      	ldr	r3, [pc, #8]	; (801c91c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801c912:	0018      	movs	r0, r3
 801c914:	46bd      	mov	sp, r7
 801c916:	b002      	add	sp, #8
 801c918:	bd80      	pop	{r7, pc}
 801c91a:	46c0      	nop			; (mov r8, r8)
 801c91c:	200001d4 	.word	0x200001d4

0801c920 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c920:	b580      	push	{r7, lr}
 801c922:	b082      	sub	sp, #8
 801c924:	af00      	add	r7, sp, #0
 801c926:	0002      	movs	r2, r0
 801c928:	6039      	str	r1, [r7, #0]
 801c92a:	1dfb      	adds	r3, r7, #7
 801c92c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c92e:	1dfb      	adds	r3, r7, #7
 801c930:	781b      	ldrb	r3, [r3, #0]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d106      	bne.n	801c944 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801c936:	683a      	ldr	r2, [r7, #0]
 801c938:	4908      	ldr	r1, [pc, #32]	; (801c95c <USBD_CDC_ProductStrDescriptor+0x3c>)
 801c93a:	4b09      	ldr	r3, [pc, #36]	; (801c960 <USBD_CDC_ProductStrDescriptor+0x40>)
 801c93c:	0018      	movs	r0, r3
 801c93e:	f7fa f90e 	bl	8016b5e <USBD_GetString>
 801c942:	e005      	b.n	801c950 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801c944:	683a      	ldr	r2, [r7, #0]
 801c946:	4905      	ldr	r1, [pc, #20]	; (801c95c <USBD_CDC_ProductStrDescriptor+0x3c>)
 801c948:	4b05      	ldr	r3, [pc, #20]	; (801c960 <USBD_CDC_ProductStrDescriptor+0x40>)
 801c94a:	0018      	movs	r0, r3
 801c94c:	f7fa f907 	bl	8016b5e <USBD_GetString>
  }
  return USBD_StrDesc;
 801c950:	4b02      	ldr	r3, [pc, #8]	; (801c95c <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 801c952:	0018      	movs	r0, r3
 801c954:	46bd      	mov	sp, r7
 801c956:	b002      	add	sp, #8
 801c958:	bd80      	pop	{r7, pc}
 801c95a:	46c0      	nop			; (mov r8, r8)
 801c95c:	20004230 	.word	0x20004230
 801c960:	08023f18 	.word	0x08023f18

0801c964 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c964:	b580      	push	{r7, lr}
 801c966:	b082      	sub	sp, #8
 801c968:	af00      	add	r7, sp, #0
 801c96a:	0002      	movs	r2, r0
 801c96c:	6039      	str	r1, [r7, #0]
 801c96e:	1dfb      	adds	r3, r7, #7
 801c970:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c972:	683a      	ldr	r2, [r7, #0]
 801c974:	4904      	ldr	r1, [pc, #16]	; (801c988 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801c976:	4b05      	ldr	r3, [pc, #20]	; (801c98c <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 801c978:	0018      	movs	r0, r3
 801c97a:	f7fa f8f0 	bl	8016b5e <USBD_GetString>
  return USBD_StrDesc;
 801c97e:	4b02      	ldr	r3, [pc, #8]	; (801c988 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 801c980:	0018      	movs	r0, r3
 801c982:	46bd      	mov	sp, r7
 801c984:	b002      	add	sp, #8
 801c986:	bd80      	pop	{r7, pc}
 801c988:	20004230 	.word	0x20004230
 801c98c:	08023f30 	.word	0x08023f30

0801c990 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c990:	b580      	push	{r7, lr}
 801c992:	b082      	sub	sp, #8
 801c994:	af00      	add	r7, sp, #0
 801c996:	0002      	movs	r2, r0
 801c998:	6039      	str	r1, [r7, #0]
 801c99a:	1dfb      	adds	r3, r7, #7
 801c99c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c99e:	683b      	ldr	r3, [r7, #0]
 801c9a0:	221a      	movs	r2, #26
 801c9a2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c9a4:	f000 f84c 	bl	801ca40 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801c9a8:	4b02      	ldr	r3, [pc, #8]	; (801c9b4 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 801c9aa:	0018      	movs	r0, r3
 801c9ac:	46bd      	mov	sp, r7
 801c9ae:	b002      	add	sp, #8
 801c9b0:	bd80      	pop	{r7, pc}
 801c9b2:	46c0      	nop			; (mov r8, r8)
 801c9b4:	200001d8 	.word	0x200001d8

0801c9b8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b082      	sub	sp, #8
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	0002      	movs	r2, r0
 801c9c0:	6039      	str	r1, [r7, #0]
 801c9c2:	1dfb      	adds	r3, r7, #7
 801c9c4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801c9c6:	1dfb      	adds	r3, r7, #7
 801c9c8:	781b      	ldrb	r3, [r3, #0]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d106      	bne.n	801c9dc <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801c9ce:	683a      	ldr	r2, [r7, #0]
 801c9d0:	4908      	ldr	r1, [pc, #32]	; (801c9f4 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 801c9d2:	4b09      	ldr	r3, [pc, #36]	; (801c9f8 <USBD_CDC_ConfigStrDescriptor+0x40>)
 801c9d4:	0018      	movs	r0, r3
 801c9d6:	f7fa f8c2 	bl	8016b5e <USBD_GetString>
 801c9da:	e005      	b.n	801c9e8 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801c9dc:	683a      	ldr	r2, [r7, #0]
 801c9de:	4905      	ldr	r1, [pc, #20]	; (801c9f4 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 801c9e0:	4b05      	ldr	r3, [pc, #20]	; (801c9f8 <USBD_CDC_ConfigStrDescriptor+0x40>)
 801c9e2:	0018      	movs	r0, r3
 801c9e4:	f7fa f8bb 	bl	8016b5e <USBD_GetString>
  }
  return USBD_StrDesc;
 801c9e8:	4b02      	ldr	r3, [pc, #8]	; (801c9f4 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 801c9ea:	0018      	movs	r0, r3
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	b002      	add	sp, #8
 801c9f0:	bd80      	pop	{r7, pc}
 801c9f2:	46c0      	nop			; (mov r8, r8)
 801c9f4:	20004230 	.word	0x20004230
 801c9f8:	08023f44 	.word	0x08023f44

0801c9fc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b082      	sub	sp, #8
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	0002      	movs	r2, r0
 801ca04:	6039      	str	r1, [r7, #0]
 801ca06:	1dfb      	adds	r3, r7, #7
 801ca08:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801ca0a:	1dfb      	adds	r3, r7, #7
 801ca0c:	781b      	ldrb	r3, [r3, #0]
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d106      	bne.n	801ca20 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801ca12:	683a      	ldr	r2, [r7, #0]
 801ca14:	4908      	ldr	r1, [pc, #32]	; (801ca38 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 801ca16:	4b09      	ldr	r3, [pc, #36]	; (801ca3c <USBD_CDC_InterfaceStrDescriptor+0x40>)
 801ca18:	0018      	movs	r0, r3
 801ca1a:	f7fa f8a0 	bl	8016b5e <USBD_GetString>
 801ca1e:	e005      	b.n	801ca2c <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801ca20:	683a      	ldr	r2, [r7, #0]
 801ca22:	4905      	ldr	r1, [pc, #20]	; (801ca38 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 801ca24:	4b05      	ldr	r3, [pc, #20]	; (801ca3c <USBD_CDC_InterfaceStrDescriptor+0x40>)
 801ca26:	0018      	movs	r0, r3
 801ca28:	f7fa f899 	bl	8016b5e <USBD_GetString>
  }
  return USBD_StrDesc;
 801ca2c:	4b02      	ldr	r3, [pc, #8]	; (801ca38 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 801ca2e:	0018      	movs	r0, r3
 801ca30:	46bd      	mov	sp, r7
 801ca32:	b002      	add	sp, #8
 801ca34:	bd80      	pop	{r7, pc}
 801ca36:	46c0      	nop			; (mov r8, r8)
 801ca38:	20004230 	.word	0x20004230
 801ca3c:	08023f50 	.word	0x08023f50

0801ca40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ca40:	b580      	push	{r7, lr}
 801ca42:	b084      	sub	sp, #16
 801ca44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ca46:	4b10      	ldr	r3, [pc, #64]	; (801ca88 <Get_SerialNum+0x48>)
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ca4c:	4b0f      	ldr	r3, [pc, #60]	; (801ca8c <Get_SerialNum+0x4c>)
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ca52:	4b0f      	ldr	r3, [pc, #60]	; (801ca90 <Get_SerialNum+0x50>)
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801ca58:	68fa      	ldr	r2, [r7, #12]
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	18d3      	adds	r3, r2, r3
 801ca5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d00b      	beq.n	801ca7e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ca66:	490b      	ldr	r1, [pc, #44]	; (801ca94 <Get_SerialNum+0x54>)
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	2208      	movs	r2, #8
 801ca6c:	0018      	movs	r0, r3
 801ca6e:	f000 f815 	bl	801ca9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ca72:	4909      	ldr	r1, [pc, #36]	; (801ca98 <Get_SerialNum+0x58>)
 801ca74:	68bb      	ldr	r3, [r7, #8]
 801ca76:	2204      	movs	r2, #4
 801ca78:	0018      	movs	r0, r3
 801ca7a:	f000 f80f 	bl	801ca9c <IntToUnicode>
  }
}
 801ca7e:	46c0      	nop			; (mov r8, r8)
 801ca80:	46bd      	mov	sp, r7
 801ca82:	b004      	add	sp, #16
 801ca84:	bd80      	pop	{r7, pc}
 801ca86:	46c0      	nop			; (mov r8, r8)
 801ca88:	1fff7590 	.word	0x1fff7590
 801ca8c:	1fff7594 	.word	0x1fff7594
 801ca90:	1fff7598 	.word	0x1fff7598
 801ca94:	200001da 	.word	0x200001da
 801ca98:	200001ea 	.word	0x200001ea

0801ca9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	b086      	sub	sp, #24
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	60f8      	str	r0, [r7, #12]
 801caa4:	60b9      	str	r1, [r7, #8]
 801caa6:	1dfb      	adds	r3, r7, #7
 801caa8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801caaa:	2117      	movs	r1, #23
 801caac:	187b      	adds	r3, r7, r1
 801caae:	2200      	movs	r2, #0
 801cab0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801cab2:	187b      	adds	r3, r7, r1
 801cab4:	2200      	movs	r2, #0
 801cab6:	701a      	strb	r2, [r3, #0]
 801cab8:	e02f      	b.n	801cb1a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	0f1b      	lsrs	r3, r3, #28
 801cabe:	2b09      	cmp	r3, #9
 801cac0:	d80d      	bhi.n	801cade <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	0f1b      	lsrs	r3, r3, #28
 801cac6:	b2da      	uxtb	r2, r3
 801cac8:	2317      	movs	r3, #23
 801caca:	18fb      	adds	r3, r7, r3
 801cacc:	781b      	ldrb	r3, [r3, #0]
 801cace:	005b      	lsls	r3, r3, #1
 801cad0:	0019      	movs	r1, r3
 801cad2:	68bb      	ldr	r3, [r7, #8]
 801cad4:	185b      	adds	r3, r3, r1
 801cad6:	3230      	adds	r2, #48	; 0x30
 801cad8:	b2d2      	uxtb	r2, r2
 801cada:	701a      	strb	r2, [r3, #0]
 801cadc:	e00c      	b.n	801caf8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	0f1b      	lsrs	r3, r3, #28
 801cae2:	b2da      	uxtb	r2, r3
 801cae4:	2317      	movs	r3, #23
 801cae6:	18fb      	adds	r3, r7, r3
 801cae8:	781b      	ldrb	r3, [r3, #0]
 801caea:	005b      	lsls	r3, r3, #1
 801caec:	0019      	movs	r1, r3
 801caee:	68bb      	ldr	r3, [r7, #8]
 801caf0:	185b      	adds	r3, r3, r1
 801caf2:	3237      	adds	r2, #55	; 0x37
 801caf4:	b2d2      	uxtb	r2, r2
 801caf6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	011b      	lsls	r3, r3, #4
 801cafc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cafe:	2117      	movs	r1, #23
 801cb00:	187b      	adds	r3, r7, r1
 801cb02:	781b      	ldrb	r3, [r3, #0]
 801cb04:	005b      	lsls	r3, r3, #1
 801cb06:	3301      	adds	r3, #1
 801cb08:	68ba      	ldr	r2, [r7, #8]
 801cb0a:	18d3      	adds	r3, r2, r3
 801cb0c:	2200      	movs	r2, #0
 801cb0e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801cb10:	187b      	adds	r3, r7, r1
 801cb12:	781a      	ldrb	r2, [r3, #0]
 801cb14:	187b      	adds	r3, r7, r1
 801cb16:	3201      	adds	r2, #1
 801cb18:	701a      	strb	r2, [r3, #0]
 801cb1a:	2317      	movs	r3, #23
 801cb1c:	18fa      	adds	r2, r7, r3
 801cb1e:	1dfb      	adds	r3, r7, #7
 801cb20:	7812      	ldrb	r2, [r2, #0]
 801cb22:	781b      	ldrb	r3, [r3, #0]
 801cb24:	429a      	cmp	r2, r3
 801cb26:	d3c8      	bcc.n	801caba <IntToUnicode+0x1e>
  }
}
 801cb28:	46c0      	nop			; (mov r8, r8)
 801cb2a:	46c0      	nop			; (mov r8, r8)
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	b006      	add	sp, #24
 801cb30:	bd80      	pop	{r7, pc}
	...

0801cb34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801cb34:	b590      	push	{r4, r7, lr}
 801cb36:	b099      	sub	sp, #100	; 0x64
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801cb3c:	2414      	movs	r4, #20
 801cb3e:	193b      	adds	r3, r7, r4
 801cb40:	0018      	movs	r0, r3
 801cb42:	234c      	movs	r3, #76	; 0x4c
 801cb44:	001a      	movs	r2, r3
 801cb46:	2100      	movs	r1, #0
 801cb48:	f005 fdaa 	bl	80226a0 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	4a25      	ldr	r2, [pc, #148]	; (801cbe8 <HAL_PCD_MspInit+0xb4>)
 801cb52:	4293      	cmp	r3, r2
 801cb54:	d143      	bne.n	801cbde <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801cb56:	193b      	adds	r3, r7, r4
 801cb58:	2280      	movs	r2, #128	; 0x80
 801cb5a:	0452      	lsls	r2, r2, #17
 801cb5c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801cb5e:	193b      	adds	r3, r7, r4
 801cb60:	2200      	movs	r2, #0
 801cb62:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801cb64:	193b      	adds	r3, r7, r4
 801cb66:	0018      	movs	r0, r3
 801cb68:	f7f0 ffc6 	bl	800daf8 <HAL_RCCEx_PeriphCLKConfig>
 801cb6c:	1e03      	subs	r3, r0, #0
 801cb6e:	d001      	beq.n	801cb74 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 801cb70:	f7eb ff38 	bl	80089e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801cb74:	4b1d      	ldr	r3, [pc, #116]	; (801cbec <HAL_PCD_MspInit+0xb8>)
 801cb76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cb78:	4b1c      	ldr	r3, [pc, #112]	; (801cbec <HAL_PCD_MspInit+0xb8>)
 801cb7a:	2180      	movs	r1, #128	; 0x80
 801cb7c:	0189      	lsls	r1, r1, #6
 801cb7e:	430a      	orrs	r2, r1
 801cb80:	63da      	str	r2, [r3, #60]	; 0x3c
 801cb82:	4b1a      	ldr	r3, [pc, #104]	; (801cbec <HAL_PCD_MspInit+0xb8>)
 801cb84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cb86:	2380      	movs	r3, #128	; 0x80
 801cb88:	019b      	lsls	r3, r3, #6
 801cb8a:	4013      	ands	r3, r2
 801cb8c:	613b      	str	r3, [r7, #16]
 801cb8e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801cb90:	4b16      	ldr	r3, [pc, #88]	; (801cbec <HAL_PCD_MspInit+0xb8>)
 801cb92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cb94:	2380      	movs	r3, #128	; 0x80
 801cb96:	055b      	lsls	r3, r3, #21
 801cb98:	4013      	ands	r3, r2
 801cb9a:	d116      	bne.n	801cbca <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801cb9c:	4b13      	ldr	r3, [pc, #76]	; (801cbec <HAL_PCD_MspInit+0xb8>)
 801cb9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cba0:	4b12      	ldr	r3, [pc, #72]	; (801cbec <HAL_PCD_MspInit+0xb8>)
 801cba2:	2180      	movs	r1, #128	; 0x80
 801cba4:	0549      	lsls	r1, r1, #21
 801cba6:	430a      	orrs	r2, r1
 801cba8:	63da      	str	r2, [r3, #60]	; 0x3c
 801cbaa:	4b10      	ldr	r3, [pc, #64]	; (801cbec <HAL_PCD_MspInit+0xb8>)
 801cbac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cbae:	2380      	movs	r3, #128	; 0x80
 801cbb0:	055b      	lsls	r3, r3, #21
 801cbb2:	4013      	ands	r3, r2
 801cbb4:	60fb      	str	r3, [r7, #12]
 801cbb6:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 801cbb8:	f7f0 fa10 	bl	800cfdc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801cbbc:	4b0b      	ldr	r3, [pc, #44]	; (801cbec <HAL_PCD_MspInit+0xb8>)
 801cbbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cbc0:	4b0a      	ldr	r3, [pc, #40]	; (801cbec <HAL_PCD_MspInit+0xb8>)
 801cbc2:	490b      	ldr	r1, [pc, #44]	; (801cbf0 <HAL_PCD_MspInit+0xbc>)
 801cbc4:	400a      	ands	r2, r1
 801cbc6:	63da      	str	r2, [r3, #60]	; 0x3c
 801cbc8:	e001      	b.n	801cbce <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801cbca:	f7f0 fa07 	bl	800cfdc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 3, 0);
 801cbce:	2200      	movs	r2, #0
 801cbd0:	2103      	movs	r1, #3
 801cbd2:	2008      	movs	r0, #8
 801cbd4:	f7ed fbfa 	bl	800a3cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 801cbd8:	2008      	movs	r0, #8
 801cbda:	f7ed fc0c 	bl	800a3f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 801cbde:	46c0      	nop			; (mov r8, r8)
 801cbe0:	46bd      	mov	sp, r7
 801cbe2:	b019      	add	sp, #100	; 0x64
 801cbe4:	bd90      	pop	{r4, r7, pc}
 801cbe6:	46c0      	nop			; (mov r8, r8)
 801cbe8:	40005c00 	.word	0x40005c00
 801cbec:	40021000 	.word	0x40021000
 801cbf0:	efffffff 	.word	0xefffffff

0801cbf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b082      	sub	sp, #8
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801cbfc:	687a      	ldr	r2, [r7, #4]
 801cbfe:	23b7      	movs	r3, #183	; 0xb7
 801cc00:	009b      	lsls	r3, r3, #2
 801cc02:	58d2      	ldr	r2, [r2, r3]
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	21a7      	movs	r1, #167	; 0xa7
 801cc08:	0089      	lsls	r1, r1, #2
 801cc0a:	468c      	mov	ip, r1
 801cc0c:	4463      	add	r3, ip
 801cc0e:	0019      	movs	r1, r3
 801cc10:	0010      	movs	r0, r2
 801cc12:	f7f8 fce7 	bl	80155e4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801cc16:	46c0      	nop			; (mov r8, r8)
 801cc18:	46bd      	mov	sp, r7
 801cc1a:	b002      	add	sp, #8
 801cc1c:	bd80      	pop	{r7, pc}

0801cc1e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc1e:	b590      	push	{r4, r7, lr}
 801cc20:	b083      	sub	sp, #12
 801cc22:	af00      	add	r7, sp, #0
 801cc24:	6078      	str	r0, [r7, #4]
 801cc26:	000a      	movs	r2, r1
 801cc28:	1cfb      	adds	r3, r7, #3
 801cc2a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cc2c:	687a      	ldr	r2, [r7, #4]
 801cc2e:	23b7      	movs	r3, #183	; 0xb7
 801cc30:	009b      	lsls	r3, r3, #2
 801cc32:	58d4      	ldr	r4, [r2, r3]
 801cc34:	1cfb      	adds	r3, r7, #3
 801cc36:	781a      	ldrb	r2, [r3, #0]
 801cc38:	6878      	ldr	r0, [r7, #4]
 801cc3a:	23b4      	movs	r3, #180	; 0xb4
 801cc3c:	0059      	lsls	r1, r3, #1
 801cc3e:	0013      	movs	r3, r2
 801cc40:	009b      	lsls	r3, r3, #2
 801cc42:	189b      	adds	r3, r3, r2
 801cc44:	00db      	lsls	r3, r3, #3
 801cc46:	18c3      	adds	r3, r0, r3
 801cc48:	185b      	adds	r3, r3, r1
 801cc4a:	681a      	ldr	r2, [r3, #0]
 801cc4c:	1cfb      	adds	r3, r7, #3
 801cc4e:	781b      	ldrb	r3, [r3, #0]
 801cc50:	0019      	movs	r1, r3
 801cc52:	0020      	movs	r0, r4
 801cc54:	f7f8 fd30 	bl	80156b8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801cc58:	46c0      	nop			; (mov r8, r8)
 801cc5a:	46bd      	mov	sp, r7
 801cc5c:	b003      	add	sp, #12
 801cc5e:	bd90      	pop	{r4, r7, pc}

0801cc60 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b082      	sub	sp, #8
 801cc64:	af00      	add	r7, sp, #0
 801cc66:	6078      	str	r0, [r7, #4]
 801cc68:	000a      	movs	r2, r1
 801cc6a:	1cfb      	adds	r3, r7, #3
 801cc6c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801cc6e:	687a      	ldr	r2, [r7, #4]
 801cc70:	23b7      	movs	r3, #183	; 0xb7
 801cc72:	009b      	lsls	r3, r3, #2
 801cc74:	58d0      	ldr	r0, [r2, r3]
 801cc76:	1cfb      	adds	r3, r7, #3
 801cc78:	781a      	ldrb	r2, [r3, #0]
 801cc7a:	6879      	ldr	r1, [r7, #4]
 801cc7c:	0013      	movs	r3, r2
 801cc7e:	009b      	lsls	r3, r3, #2
 801cc80:	189b      	adds	r3, r3, r2
 801cc82:	00db      	lsls	r3, r3, #3
 801cc84:	18cb      	adds	r3, r1, r3
 801cc86:	3328      	adds	r3, #40	; 0x28
 801cc88:	681a      	ldr	r2, [r3, #0]
 801cc8a:	1cfb      	adds	r3, r7, #3
 801cc8c:	781b      	ldrb	r3, [r3, #0]
 801cc8e:	0019      	movs	r1, r3
 801cc90:	f7f8 fdfa 	bl	8015888 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801cc94:	46c0      	nop			; (mov r8, r8)
 801cc96:	46bd      	mov	sp, r7
 801cc98:	b002      	add	sp, #8
 801cc9a:	bd80      	pop	{r7, pc}

0801cc9c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b082      	sub	sp, #8
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cca4:	687a      	ldr	r2, [r7, #4]
 801cca6:	23b7      	movs	r3, #183	; 0xb7
 801cca8:	009b      	lsls	r3, r3, #2
 801ccaa:	58d3      	ldr	r3, [r2, r3]
 801ccac:	0018      	movs	r0, r3
 801ccae:	f7f8 ff65 	bl	8015b7c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801ccb2:	46c0      	nop			; (mov r8, r8)
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	b002      	add	sp, #8
 801ccb8:	bd80      	pop	{r7, pc}

0801ccba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ccba:	b580      	push	{r7, lr}
 801ccbc:	b084      	sub	sp, #16
 801ccbe:	af00      	add	r7, sp, #0
 801ccc0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801ccc2:	230f      	movs	r3, #15
 801ccc4:	18fb      	adds	r3, r7, r3
 801ccc6:	2201      	movs	r2, #1
 801ccc8:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	79db      	ldrb	r3, [r3, #7]
 801ccce:	2b02      	cmp	r3, #2
 801ccd0:	d001      	beq.n	801ccd6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801ccd2:	f7eb fe87 	bl	80089e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801ccd6:	687a      	ldr	r2, [r7, #4]
 801ccd8:	23b7      	movs	r3, #183	; 0xb7
 801ccda:	009b      	lsls	r3, r3, #2
 801ccdc:	58d2      	ldr	r2, [r2, r3]
 801ccde:	230f      	movs	r3, #15
 801cce0:	18fb      	adds	r3, r7, r3
 801cce2:	781b      	ldrb	r3, [r3, #0]
 801cce4:	0019      	movs	r1, r3
 801cce6:	0010      	movs	r0, r2
 801cce8:	f7f8 ff05 	bl	8015af6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ccec:	687a      	ldr	r2, [r7, #4]
 801ccee:	23b7      	movs	r3, #183	; 0xb7
 801ccf0:	009b      	lsls	r3, r3, #2
 801ccf2:	58d3      	ldr	r3, [r2, r3]
 801ccf4:	0018      	movs	r0, r3
 801ccf6:	f7f8 fe9f 	bl	8015a38 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801ccfa:	46c0      	nop			; (mov r8, r8)
 801ccfc:	46bd      	mov	sp, r7
 801ccfe:	b004      	add	sp, #16
 801cd00:	bd80      	pop	{r7, pc}
	...

0801cd04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cd04:	b580      	push	{r7, lr}
 801cd06:	b082      	sub	sp, #8
 801cd08:	af00      	add	r7, sp, #0
 801cd0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801cd0c:	687a      	ldr	r2, [r7, #4]
 801cd0e:	23b7      	movs	r3, #183	; 0xb7
 801cd10:	009b      	lsls	r3, r3, #2
 801cd12:	58d3      	ldr	r3, [r2, r3]
 801cd14:	0018      	movs	r0, r3
 801cd16:	f7f8 feff 	bl	8015b18 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	7adb      	ldrb	r3, [r3, #11]
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d005      	beq.n	801cd2e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cd22:	4b05      	ldr	r3, [pc, #20]	; (801cd38 <HAL_PCD_SuspendCallback+0x34>)
 801cd24:	691a      	ldr	r2, [r3, #16]
 801cd26:	4b04      	ldr	r3, [pc, #16]	; (801cd38 <HAL_PCD_SuspendCallback+0x34>)
 801cd28:	2106      	movs	r1, #6
 801cd2a:	430a      	orrs	r2, r1
 801cd2c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801cd2e:	46c0      	nop			; (mov r8, r8)
 801cd30:	46bd      	mov	sp, r7
 801cd32:	b002      	add	sp, #8
 801cd34:	bd80      	pop	{r7, pc}
 801cd36:	46c0      	nop			; (mov r8, r8)
 801cd38:	e000ed00 	.word	0xe000ed00

0801cd3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cd3c:	b580      	push	{r7, lr}
 801cd3e:	b082      	sub	sp, #8
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	7adb      	ldrb	r3, [r3, #11]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d007      	beq.n	801cd5c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cd4c:	4b09      	ldr	r3, [pc, #36]	; (801cd74 <HAL_PCD_ResumeCallback+0x38>)
 801cd4e:	691a      	ldr	r2, [r3, #16]
 801cd50:	4b08      	ldr	r3, [pc, #32]	; (801cd74 <HAL_PCD_ResumeCallback+0x38>)
 801cd52:	2106      	movs	r1, #6
 801cd54:	438a      	bics	r2, r1
 801cd56:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801cd58:	f000 fa7c 	bl	801d254 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801cd5c:	687a      	ldr	r2, [r7, #4]
 801cd5e:	23b7      	movs	r3, #183	; 0xb7
 801cd60:	009b      	lsls	r3, r3, #2
 801cd62:	58d3      	ldr	r3, [r2, r3]
 801cd64:	0018      	movs	r0, r3
 801cd66:	f7f8 feef 	bl	8015b48 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801cd6a:	46c0      	nop			; (mov r8, r8)
 801cd6c:	46bd      	mov	sp, r7
 801cd6e:	b002      	add	sp, #8
 801cd70:	bd80      	pop	{r7, pc}
 801cd72:	46c0      	nop			; (mov r8, r8)
 801cd74:	e000ed00 	.word	0xe000ed00

0801cd78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b082      	sub	sp, #8
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 801cd80:	4a34      	ldr	r2, [pc, #208]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cd82:	23b7      	movs	r3, #183	; 0xb7
 801cd84:	009b      	lsls	r3, r3, #2
 801cd86:	6879      	ldr	r1, [r7, #4]
 801cd88:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 801cd8a:	687a      	ldr	r2, [r7, #4]
 801cd8c:	23b2      	movs	r3, #178	; 0xb2
 801cd8e:	009b      	lsls	r3, r3, #2
 801cd90:	4930      	ldr	r1, [pc, #192]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cd92:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 801cd94:	4b2f      	ldr	r3, [pc, #188]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cd96:	4a30      	ldr	r2, [pc, #192]	; (801ce58 <USBD_LL_Init+0xe0>)
 801cd98:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 801cd9a:	4b2e      	ldr	r3, [pc, #184]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cd9c:	2208      	movs	r2, #8
 801cd9e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 801cda0:	4b2c      	ldr	r3, [pc, #176]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cda2:	2208      	movs	r2, #8
 801cda4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 801cda6:	4b2b      	ldr	r3, [pc, #172]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cda8:	2202      	movs	r2, #2
 801cdaa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801cdac:	4b29      	ldr	r3, [pc, #164]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cdae:	2202      	movs	r2, #2
 801cdb0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 801cdb2:	4b28      	ldr	r3, [pc, #160]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cdb4:	2200      	movs	r2, #0
 801cdb6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 801cdb8:	4b26      	ldr	r3, [pc, #152]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cdba:	2200      	movs	r2, #0
 801cdbc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 801cdbe:	4b25      	ldr	r3, [pc, #148]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cdc0:	2200      	movs	r2, #0
 801cdc2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 801cdc4:	4b23      	ldr	r3, [pc, #140]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cdc6:	2200      	movs	r2, #0
 801cdc8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 801cdca:	4b22      	ldr	r3, [pc, #136]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cdcc:	2200      	movs	r2, #0
 801cdce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 801cdd0:	4b20      	ldr	r3, [pc, #128]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cdd2:	2200      	movs	r2, #0
 801cdd4:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 801cdd6:	4b1f      	ldr	r3, [pc, #124]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cdd8:	2200      	movs	r2, #0
 801cdda:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 801cddc:	4b1d      	ldr	r3, [pc, #116]	; (801ce54 <USBD_LL_Init+0xdc>)
 801cdde:	0018      	movs	r0, r3
 801cde0:	f7ee fbec 	bl	800b5bc <HAL_PCD_Init>
 801cde4:	1e03      	subs	r3, r0, #0
 801cde6:	d001      	beq.n	801cdec <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 801cde8:	f7eb fdfc 	bl	80089e4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801cdec:	687a      	ldr	r2, [r7, #4]
 801cdee:	23b2      	movs	r3, #178	; 0xb2
 801cdf0:	009b      	lsls	r3, r3, #2
 801cdf2:	58d0      	ldr	r0, [r2, r3]
 801cdf4:	2318      	movs	r3, #24
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	2100      	movs	r1, #0
 801cdfa:	f7f0 f87d 	bl	800cef8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801cdfe:	687a      	ldr	r2, [r7, #4]
 801ce00:	23b2      	movs	r3, #178	; 0xb2
 801ce02:	009b      	lsls	r3, r3, #2
 801ce04:	58d0      	ldr	r0, [r2, r3]
 801ce06:	2358      	movs	r3, #88	; 0x58
 801ce08:	2200      	movs	r2, #0
 801ce0a:	2180      	movs	r1, #128	; 0x80
 801ce0c:	f7f0 f874 	bl	800cef8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801ce10:	687a      	ldr	r2, [r7, #4]
 801ce12:	23b2      	movs	r3, #178	; 0xb2
 801ce14:	009b      	lsls	r3, r3, #2
 801ce16:	58d0      	ldr	r0, [r2, r3]
 801ce18:	23c0      	movs	r3, #192	; 0xc0
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	2181      	movs	r1, #129	; 0x81
 801ce1e:	f7f0 f86b 	bl	800cef8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801ce22:	687a      	ldr	r2, [r7, #4]
 801ce24:	23b2      	movs	r3, #178	; 0xb2
 801ce26:	009b      	lsls	r3, r3, #2
 801ce28:	58d0      	ldr	r0, [r2, r3]
 801ce2a:	2388      	movs	r3, #136	; 0x88
 801ce2c:	005b      	lsls	r3, r3, #1
 801ce2e:	2200      	movs	r2, #0
 801ce30:	2101      	movs	r1, #1
 801ce32:	f7f0 f861 	bl	800cef8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801ce36:	687a      	ldr	r2, [r7, #4]
 801ce38:	23b2      	movs	r3, #178	; 0xb2
 801ce3a:	009b      	lsls	r3, r3, #2
 801ce3c:	58d0      	ldr	r0, [r2, r3]
 801ce3e:	2380      	movs	r3, #128	; 0x80
 801ce40:	005b      	lsls	r3, r3, #1
 801ce42:	2200      	movs	r2, #0
 801ce44:	2182      	movs	r1, #130	; 0x82
 801ce46:	f7f0 f857 	bl	800cef8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 801ce4a:	2300      	movs	r3, #0
}
 801ce4c:	0018      	movs	r0, r3
 801ce4e:	46bd      	mov	sp, r7
 801ce50:	b002      	add	sp, #8
 801ce52:	bd80      	pop	{r7, pc}
 801ce54:	20004430 	.word	0x20004430
 801ce58:	40005c00 	.word	0x40005c00

0801ce5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ce5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce5e:	b085      	sub	sp, #20
 801ce60:	af00      	add	r7, sp, #0
 801ce62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ce64:	210f      	movs	r1, #15
 801ce66:	187b      	adds	r3, r7, r1
 801ce68:	2200      	movs	r2, #0
 801ce6a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ce6c:	260e      	movs	r6, #14
 801ce6e:	19bb      	adds	r3, r7, r6
 801ce70:	2200      	movs	r2, #0
 801ce72:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ce74:	687a      	ldr	r2, [r7, #4]
 801ce76:	23b2      	movs	r3, #178	; 0xb2
 801ce78:	009b      	lsls	r3, r3, #2
 801ce7a:	58d3      	ldr	r3, [r2, r3]
 801ce7c:	000d      	movs	r5, r1
 801ce7e:	187c      	adds	r4, r7, r1
 801ce80:	0018      	movs	r0, r3
 801ce82:	f7ee fc95 	bl	800b7b0 <HAL_PCD_Start>
 801ce86:	0003      	movs	r3, r0
 801ce88:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ce8a:	19bc      	adds	r4, r7, r6
 801ce8c:	197b      	adds	r3, r7, r5
 801ce8e:	781b      	ldrb	r3, [r3, #0]
 801ce90:	0018      	movs	r0, r3
 801ce92:	f000 f9e6 	bl	801d262 <USBD_Get_USB_Status>
 801ce96:	0003      	movs	r3, r0
 801ce98:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ce9a:	19bb      	adds	r3, r7, r6
 801ce9c:	781b      	ldrb	r3, [r3, #0]
}
 801ce9e:	0018      	movs	r0, r3
 801cea0:	46bd      	mov	sp, r7
 801cea2:	b005      	add	sp, #20
 801cea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cea6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801cea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cea8:	b085      	sub	sp, #20
 801ceaa:	af00      	add	r7, sp, #0
 801ceac:	6078      	str	r0, [r7, #4]
 801ceae:	000c      	movs	r4, r1
 801ceb0:	0010      	movs	r0, r2
 801ceb2:	0019      	movs	r1, r3
 801ceb4:	1cfb      	adds	r3, r7, #3
 801ceb6:	1c22      	adds	r2, r4, #0
 801ceb8:	701a      	strb	r2, [r3, #0]
 801ceba:	1cbb      	adds	r3, r7, #2
 801cebc:	1c02      	adds	r2, r0, #0
 801cebe:	701a      	strb	r2, [r3, #0]
 801cec0:	003b      	movs	r3, r7
 801cec2:	1c0a      	adds	r2, r1, #0
 801cec4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cec6:	260f      	movs	r6, #15
 801cec8:	19bb      	adds	r3, r7, r6
 801ceca:	2200      	movs	r2, #0
 801cecc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cece:	250e      	movs	r5, #14
 801ced0:	197b      	adds	r3, r7, r5
 801ced2:	2200      	movs	r2, #0
 801ced4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ced6:	687a      	ldr	r2, [r7, #4]
 801ced8:	23b2      	movs	r3, #178	; 0xb2
 801ceda:	009b      	lsls	r3, r3, #2
 801cedc:	58d0      	ldr	r0, [r2, r3]
 801cede:	19bc      	adds	r4, r7, r6
 801cee0:	1cbb      	adds	r3, r7, #2
 801cee2:	781d      	ldrb	r5, [r3, #0]
 801cee4:	003b      	movs	r3, r7
 801cee6:	881a      	ldrh	r2, [r3, #0]
 801cee8:	1cfb      	adds	r3, r7, #3
 801ceea:	7819      	ldrb	r1, [r3, #0]
 801ceec:	002b      	movs	r3, r5
 801ceee:	f7ee fdc5 	bl	800ba7c <HAL_PCD_EP_Open>
 801cef2:	0003      	movs	r3, r0
 801cef4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cef6:	250e      	movs	r5, #14
 801cef8:	197c      	adds	r4, r7, r5
 801cefa:	19bb      	adds	r3, r7, r6
 801cefc:	781b      	ldrb	r3, [r3, #0]
 801cefe:	0018      	movs	r0, r3
 801cf00:	f000 f9af 	bl	801d262 <USBD_Get_USB_Status>
 801cf04:	0003      	movs	r3, r0
 801cf06:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cf08:	197b      	adds	r3, r7, r5
 801cf0a:	781b      	ldrb	r3, [r3, #0]
}
 801cf0c:	0018      	movs	r0, r3
 801cf0e:	46bd      	mov	sp, r7
 801cf10:	b005      	add	sp, #20
 801cf12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cf14 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cf14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf16:	b085      	sub	sp, #20
 801cf18:	af00      	add	r7, sp, #0
 801cf1a:	6078      	str	r0, [r7, #4]
 801cf1c:	000a      	movs	r2, r1
 801cf1e:	1cfb      	adds	r3, r7, #3
 801cf20:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cf22:	210f      	movs	r1, #15
 801cf24:	187b      	adds	r3, r7, r1
 801cf26:	2200      	movs	r2, #0
 801cf28:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cf2a:	260e      	movs	r6, #14
 801cf2c:	19bb      	adds	r3, r7, r6
 801cf2e:	2200      	movs	r2, #0
 801cf30:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cf32:	687a      	ldr	r2, [r7, #4]
 801cf34:	23b2      	movs	r3, #178	; 0xb2
 801cf36:	009b      	lsls	r3, r3, #2
 801cf38:	58d2      	ldr	r2, [r2, r3]
 801cf3a:	000d      	movs	r5, r1
 801cf3c:	187c      	adds	r4, r7, r1
 801cf3e:	1cfb      	adds	r3, r7, #3
 801cf40:	781b      	ldrb	r3, [r3, #0]
 801cf42:	0019      	movs	r1, r3
 801cf44:	0010      	movs	r0, r2
 801cf46:	f7ee fe0a 	bl	800bb5e <HAL_PCD_EP_Close>
 801cf4a:	0003      	movs	r3, r0
 801cf4c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cf4e:	19bc      	adds	r4, r7, r6
 801cf50:	197b      	adds	r3, r7, r5
 801cf52:	781b      	ldrb	r3, [r3, #0]
 801cf54:	0018      	movs	r0, r3
 801cf56:	f000 f984 	bl	801d262 <USBD_Get_USB_Status>
 801cf5a:	0003      	movs	r3, r0
 801cf5c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cf5e:	19bb      	adds	r3, r7, r6
 801cf60:	781b      	ldrb	r3, [r3, #0]
}
 801cf62:	0018      	movs	r0, r3
 801cf64:	46bd      	mov	sp, r7
 801cf66:	b005      	add	sp, #20
 801cf68:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cf6a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cf6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf6c:	b085      	sub	sp, #20
 801cf6e:	af00      	add	r7, sp, #0
 801cf70:	6078      	str	r0, [r7, #4]
 801cf72:	000a      	movs	r2, r1
 801cf74:	1cfb      	adds	r3, r7, #3
 801cf76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cf78:	210f      	movs	r1, #15
 801cf7a:	187b      	adds	r3, r7, r1
 801cf7c:	2200      	movs	r2, #0
 801cf7e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cf80:	260e      	movs	r6, #14
 801cf82:	19bb      	adds	r3, r7, r6
 801cf84:	2200      	movs	r2, #0
 801cf86:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cf88:	687a      	ldr	r2, [r7, #4]
 801cf8a:	23b2      	movs	r3, #178	; 0xb2
 801cf8c:	009b      	lsls	r3, r3, #2
 801cf8e:	58d2      	ldr	r2, [r2, r3]
 801cf90:	000d      	movs	r5, r1
 801cf92:	187c      	adds	r4, r7, r1
 801cf94:	1cfb      	adds	r3, r7, #3
 801cf96:	781b      	ldrb	r3, [r3, #0]
 801cf98:	0019      	movs	r1, r3
 801cf9a:	0010      	movs	r0, r2
 801cf9c:	f7ee fec0 	bl	800bd20 <HAL_PCD_EP_SetStall>
 801cfa0:	0003      	movs	r3, r0
 801cfa2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cfa4:	19bc      	adds	r4, r7, r6
 801cfa6:	197b      	adds	r3, r7, r5
 801cfa8:	781b      	ldrb	r3, [r3, #0]
 801cfaa:	0018      	movs	r0, r3
 801cfac:	f000 f959 	bl	801d262 <USBD_Get_USB_Status>
 801cfb0:	0003      	movs	r3, r0
 801cfb2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cfb4:	19bb      	adds	r3, r7, r6
 801cfb6:	781b      	ldrb	r3, [r3, #0]
}
 801cfb8:	0018      	movs	r0, r3
 801cfba:	46bd      	mov	sp, r7
 801cfbc:	b005      	add	sp, #20
 801cfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cfc0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfc2:	b085      	sub	sp, #20
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
 801cfc8:	000a      	movs	r2, r1
 801cfca:	1cfb      	adds	r3, r7, #3
 801cfcc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cfce:	210f      	movs	r1, #15
 801cfd0:	187b      	adds	r3, r7, r1
 801cfd2:	2200      	movs	r2, #0
 801cfd4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cfd6:	260e      	movs	r6, #14
 801cfd8:	19bb      	adds	r3, r7, r6
 801cfda:	2200      	movs	r2, #0
 801cfdc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cfde:	687a      	ldr	r2, [r7, #4]
 801cfe0:	23b2      	movs	r3, #178	; 0xb2
 801cfe2:	009b      	lsls	r3, r3, #2
 801cfe4:	58d2      	ldr	r2, [r2, r3]
 801cfe6:	000d      	movs	r5, r1
 801cfe8:	187c      	adds	r4, r7, r1
 801cfea:	1cfb      	adds	r3, r7, #3
 801cfec:	781b      	ldrb	r3, [r3, #0]
 801cfee:	0019      	movs	r1, r3
 801cff0:	0010      	movs	r0, r2
 801cff2:	f7ee fef3 	bl	800bddc <HAL_PCD_EP_ClrStall>
 801cff6:	0003      	movs	r3, r0
 801cff8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cffa:	19bc      	adds	r4, r7, r6
 801cffc:	197b      	adds	r3, r7, r5
 801cffe:	781b      	ldrb	r3, [r3, #0]
 801d000:	0018      	movs	r0, r3
 801d002:	f000 f92e 	bl	801d262 <USBD_Get_USB_Status>
 801d006:	0003      	movs	r3, r0
 801d008:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d00a:	19bb      	adds	r3, r7, r6
 801d00c:	781b      	ldrb	r3, [r3, #0]
}
 801d00e:	0018      	movs	r0, r3
 801d010:	46bd      	mov	sp, r7
 801d012:	b005      	add	sp, #20
 801d014:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d016 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d016:	b580      	push	{r7, lr}
 801d018:	b084      	sub	sp, #16
 801d01a:	af00      	add	r7, sp, #0
 801d01c:	6078      	str	r0, [r7, #4]
 801d01e:	000a      	movs	r2, r1
 801d020:	1cfb      	adds	r3, r7, #3
 801d022:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d024:	687a      	ldr	r2, [r7, #4]
 801d026:	23b2      	movs	r3, #178	; 0xb2
 801d028:	009b      	lsls	r3, r3, #2
 801d02a:	58d3      	ldr	r3, [r2, r3]
 801d02c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d02e:	1cfb      	adds	r3, r7, #3
 801d030:	781b      	ldrb	r3, [r3, #0]
 801d032:	b25b      	sxtb	r3, r3
 801d034:	2b00      	cmp	r3, #0
 801d036:	da0c      	bge.n	801d052 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d038:	1cfb      	adds	r3, r7, #3
 801d03a:	781b      	ldrb	r3, [r3, #0]
 801d03c:	227f      	movs	r2, #127	; 0x7f
 801d03e:	401a      	ands	r2, r3
 801d040:	68f9      	ldr	r1, [r7, #12]
 801d042:	0013      	movs	r3, r2
 801d044:	009b      	lsls	r3, r3, #2
 801d046:	189b      	adds	r3, r3, r2
 801d048:	00db      	lsls	r3, r3, #3
 801d04a:	18cb      	adds	r3, r1, r3
 801d04c:	3316      	adds	r3, #22
 801d04e:	781b      	ldrb	r3, [r3, #0]
 801d050:	e00d      	b.n	801d06e <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d052:	1cfb      	adds	r3, r7, #3
 801d054:	781b      	ldrb	r3, [r3, #0]
 801d056:	227f      	movs	r2, #127	; 0x7f
 801d058:	401a      	ands	r2, r3
 801d05a:	68f8      	ldr	r0, [r7, #12]
 801d05c:	23ab      	movs	r3, #171	; 0xab
 801d05e:	0059      	lsls	r1, r3, #1
 801d060:	0013      	movs	r3, r2
 801d062:	009b      	lsls	r3, r3, #2
 801d064:	189b      	adds	r3, r3, r2
 801d066:	00db      	lsls	r3, r3, #3
 801d068:	18c3      	adds	r3, r0, r3
 801d06a:	185b      	adds	r3, r3, r1
 801d06c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d06e:	0018      	movs	r0, r3
 801d070:	46bd      	mov	sp, r7
 801d072:	b004      	add	sp, #16
 801d074:	bd80      	pop	{r7, pc}

0801d076 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d076:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d078:	b085      	sub	sp, #20
 801d07a:	af00      	add	r7, sp, #0
 801d07c:	6078      	str	r0, [r7, #4]
 801d07e:	000a      	movs	r2, r1
 801d080:	1cfb      	adds	r3, r7, #3
 801d082:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d084:	210f      	movs	r1, #15
 801d086:	187b      	adds	r3, r7, r1
 801d088:	2200      	movs	r2, #0
 801d08a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d08c:	260e      	movs	r6, #14
 801d08e:	19bb      	adds	r3, r7, r6
 801d090:	2200      	movs	r2, #0
 801d092:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d094:	687a      	ldr	r2, [r7, #4]
 801d096:	23b2      	movs	r3, #178	; 0xb2
 801d098:	009b      	lsls	r3, r3, #2
 801d09a:	58d2      	ldr	r2, [r2, r3]
 801d09c:	000d      	movs	r5, r1
 801d09e:	187c      	adds	r4, r7, r1
 801d0a0:	1cfb      	adds	r3, r7, #3
 801d0a2:	781b      	ldrb	r3, [r3, #0]
 801d0a4:	0019      	movs	r1, r3
 801d0a6:	0010      	movs	r0, r2
 801d0a8:	f7ee fcbe 	bl	800ba28 <HAL_PCD_SetAddress>
 801d0ac:	0003      	movs	r3, r0
 801d0ae:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d0b0:	19bc      	adds	r4, r7, r6
 801d0b2:	197b      	adds	r3, r7, r5
 801d0b4:	781b      	ldrb	r3, [r3, #0]
 801d0b6:	0018      	movs	r0, r3
 801d0b8:	f000 f8d3 	bl	801d262 <USBD_Get_USB_Status>
 801d0bc:	0003      	movs	r3, r0
 801d0be:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d0c0:	19bb      	adds	r3, r7, r6
 801d0c2:	781b      	ldrb	r3, [r3, #0]
}
 801d0c4:	0018      	movs	r0, r3
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	b005      	add	sp, #20
 801d0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d0cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0ce:	b087      	sub	sp, #28
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	60f8      	str	r0, [r7, #12]
 801d0d4:	607a      	str	r2, [r7, #4]
 801d0d6:	603b      	str	r3, [r7, #0]
 801d0d8:	230b      	movs	r3, #11
 801d0da:	18fb      	adds	r3, r7, r3
 801d0dc:	1c0a      	adds	r2, r1, #0
 801d0de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d0e0:	2617      	movs	r6, #23
 801d0e2:	19bb      	adds	r3, r7, r6
 801d0e4:	2200      	movs	r2, #0
 801d0e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d0e8:	2516      	movs	r5, #22
 801d0ea:	197b      	adds	r3, r7, r5
 801d0ec:	2200      	movs	r2, #0
 801d0ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d0f0:	68fa      	ldr	r2, [r7, #12]
 801d0f2:	23b2      	movs	r3, #178	; 0xb2
 801d0f4:	009b      	lsls	r3, r3, #2
 801d0f6:	58d0      	ldr	r0, [r2, r3]
 801d0f8:	19bc      	adds	r4, r7, r6
 801d0fa:	683d      	ldr	r5, [r7, #0]
 801d0fc:	687a      	ldr	r2, [r7, #4]
 801d0fe:	230b      	movs	r3, #11
 801d100:	18fb      	adds	r3, r7, r3
 801d102:	7819      	ldrb	r1, [r3, #0]
 801d104:	002b      	movs	r3, r5
 801d106:	f7ee fdce 	bl	800bca6 <HAL_PCD_EP_Transmit>
 801d10a:	0003      	movs	r3, r0
 801d10c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d10e:	2516      	movs	r5, #22
 801d110:	197c      	adds	r4, r7, r5
 801d112:	19bb      	adds	r3, r7, r6
 801d114:	781b      	ldrb	r3, [r3, #0]
 801d116:	0018      	movs	r0, r3
 801d118:	f000 f8a3 	bl	801d262 <USBD_Get_USB_Status>
 801d11c:	0003      	movs	r3, r0
 801d11e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d120:	197b      	adds	r3, r7, r5
 801d122:	781b      	ldrb	r3, [r3, #0]
}
 801d124:	0018      	movs	r0, r3
 801d126:	46bd      	mov	sp, r7
 801d128:	b007      	add	sp, #28
 801d12a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d12c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d12e:	b087      	sub	sp, #28
 801d130:	af00      	add	r7, sp, #0
 801d132:	60f8      	str	r0, [r7, #12]
 801d134:	607a      	str	r2, [r7, #4]
 801d136:	603b      	str	r3, [r7, #0]
 801d138:	230b      	movs	r3, #11
 801d13a:	18fb      	adds	r3, r7, r3
 801d13c:	1c0a      	adds	r2, r1, #0
 801d13e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d140:	2617      	movs	r6, #23
 801d142:	19bb      	adds	r3, r7, r6
 801d144:	2200      	movs	r2, #0
 801d146:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d148:	2516      	movs	r5, #22
 801d14a:	197b      	adds	r3, r7, r5
 801d14c:	2200      	movs	r2, #0
 801d14e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d150:	68fa      	ldr	r2, [r7, #12]
 801d152:	23b2      	movs	r3, #178	; 0xb2
 801d154:	009b      	lsls	r3, r3, #2
 801d156:	58d0      	ldr	r0, [r2, r3]
 801d158:	19bc      	adds	r4, r7, r6
 801d15a:	683d      	ldr	r5, [r7, #0]
 801d15c:	687a      	ldr	r2, [r7, #4]
 801d15e:	230b      	movs	r3, #11
 801d160:	18fb      	adds	r3, r7, r3
 801d162:	7819      	ldrb	r1, [r3, #0]
 801d164:	002b      	movs	r3, r5
 801d166:	f7ee fd4d 	bl	800bc04 <HAL_PCD_EP_Receive>
 801d16a:	0003      	movs	r3, r0
 801d16c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d16e:	2516      	movs	r5, #22
 801d170:	197c      	adds	r4, r7, r5
 801d172:	19bb      	adds	r3, r7, r6
 801d174:	781b      	ldrb	r3, [r3, #0]
 801d176:	0018      	movs	r0, r3
 801d178:	f000 f873 	bl	801d262 <USBD_Get_USB_Status>
 801d17c:	0003      	movs	r3, r0
 801d17e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d180:	197b      	adds	r3, r7, r5
 801d182:	781b      	ldrb	r3, [r3, #0]
}
 801d184:	0018      	movs	r0, r3
 801d186:	46bd      	mov	sp, r7
 801d188:	b007      	add	sp, #28
 801d18a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d18c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d18c:	b580      	push	{r7, lr}
 801d18e:	b082      	sub	sp, #8
 801d190:	af00      	add	r7, sp, #0
 801d192:	6078      	str	r0, [r7, #4]
 801d194:	000a      	movs	r2, r1
 801d196:	1cfb      	adds	r3, r7, #3
 801d198:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d19a:	687a      	ldr	r2, [r7, #4]
 801d19c:	23b2      	movs	r3, #178	; 0xb2
 801d19e:	009b      	lsls	r3, r3, #2
 801d1a0:	58d2      	ldr	r2, [r2, r3]
 801d1a2:	1cfb      	adds	r3, r7, #3
 801d1a4:	781b      	ldrb	r3, [r3, #0]
 801d1a6:	0019      	movs	r1, r3
 801d1a8:	0010      	movs	r0, r2
 801d1aa:	f7ee fd63 	bl	800bc74 <HAL_PCD_EP_GetRxCount>
 801d1ae:	0003      	movs	r3, r0
}
 801d1b0:	0018      	movs	r0, r3
 801d1b2:	46bd      	mov	sp, r7
 801d1b4:	b002      	add	sp, #8
 801d1b6:	bd80      	pop	{r7, pc}

0801d1b8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1b8:	b580      	push	{r7, lr}
 801d1ba:	b082      	sub	sp, #8
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
 801d1c0:	000a      	movs	r2, r1
 801d1c2:	1cfb      	adds	r3, r7, #3
 801d1c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801d1c6:	1cfb      	adds	r3, r7, #3
 801d1c8:	781b      	ldrb	r3, [r3, #0]
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d002      	beq.n	801d1d4 <HAL_PCDEx_LPM_Callback+0x1c>
 801d1ce:	2b01      	cmp	r3, #1
 801d1d0:	d014      	beq.n	801d1fc <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801d1d2:	e025      	b.n	801d220 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	7adb      	ldrb	r3, [r3, #11]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d007      	beq.n	801d1ec <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 801d1dc:	f000 f83a 	bl	801d254 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d1e0:	4b11      	ldr	r3, [pc, #68]	; (801d228 <HAL_PCDEx_LPM_Callback+0x70>)
 801d1e2:	691a      	ldr	r2, [r3, #16]
 801d1e4:	4b10      	ldr	r3, [pc, #64]	; (801d228 <HAL_PCDEx_LPM_Callback+0x70>)
 801d1e6:	2106      	movs	r1, #6
 801d1e8:	438a      	bics	r2, r1
 801d1ea:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 801d1ec:	687a      	ldr	r2, [r7, #4]
 801d1ee:	23b7      	movs	r3, #183	; 0xb7
 801d1f0:	009b      	lsls	r3, r3, #2
 801d1f2:	58d3      	ldr	r3, [r2, r3]
 801d1f4:	0018      	movs	r0, r3
 801d1f6:	f7f8 fca7 	bl	8015b48 <USBD_LL_Resume>
    break;
 801d1fa:	e011      	b.n	801d220 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 801d1fc:	687a      	ldr	r2, [r7, #4]
 801d1fe:	23b7      	movs	r3, #183	; 0xb7
 801d200:	009b      	lsls	r3, r3, #2
 801d202:	58d3      	ldr	r3, [r2, r3]
 801d204:	0018      	movs	r0, r3
 801d206:	f7f8 fc87 	bl	8015b18 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	7adb      	ldrb	r3, [r3, #11]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d005      	beq.n	801d21e <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d212:	4b05      	ldr	r3, [pc, #20]	; (801d228 <HAL_PCDEx_LPM_Callback+0x70>)
 801d214:	691a      	ldr	r2, [r3, #16]
 801d216:	4b04      	ldr	r3, [pc, #16]	; (801d228 <HAL_PCDEx_LPM_Callback+0x70>)
 801d218:	2106      	movs	r1, #6
 801d21a:	430a      	orrs	r2, r1
 801d21c:	611a      	str	r2, [r3, #16]
    break;
 801d21e:	46c0      	nop			; (mov r8, r8)
}
 801d220:	46c0      	nop			; (mov r8, r8)
 801d222:	46bd      	mov	sp, r7
 801d224:	b002      	add	sp, #8
 801d226:	bd80      	pop	{r7, pc}
 801d228:	e000ed00 	.word	0xe000ed00

0801d22c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d22c:	b580      	push	{r7, lr}
 801d22e:	b082      	sub	sp, #8
 801d230:	af00      	add	r7, sp, #0
 801d232:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d234:	4b02      	ldr	r3, [pc, #8]	; (801d240 <USBD_static_malloc+0x14>)
}
 801d236:	0018      	movs	r0, r3
 801d238:	46bd      	mov	sp, r7
 801d23a:	b002      	add	sp, #8
 801d23c:	bd80      	pop	{r7, pc}
 801d23e:	46c0      	nop			; (mov r8, r8)
 801d240:	20004710 	.word	0x20004710

0801d244 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d244:	b580      	push	{r7, lr}
 801d246:	b082      	sub	sp, #8
 801d248:	af00      	add	r7, sp, #0
 801d24a:	6078      	str	r0, [r7, #4]

}
 801d24c:	46c0      	nop			; (mov r8, r8)
 801d24e:	46bd      	mov	sp, r7
 801d250:	b002      	add	sp, #8
 801d252:	bd80      	pop	{r7, pc}

0801d254 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d254:	b580      	push	{r7, lr}
 801d256:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d258:	f7ea fe4a 	bl	8007ef0 <SystemClock_Config>
}
 801d25c:	46c0      	nop			; (mov r8, r8)
 801d25e:	46bd      	mov	sp, r7
 801d260:	bd80      	pop	{r7, pc}

0801d262 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d262:	b580      	push	{r7, lr}
 801d264:	b084      	sub	sp, #16
 801d266:	af00      	add	r7, sp, #0
 801d268:	0002      	movs	r2, r0
 801d26a:	1dfb      	adds	r3, r7, #7
 801d26c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d26e:	230f      	movs	r3, #15
 801d270:	18fb      	adds	r3, r7, r3
 801d272:	2200      	movs	r2, #0
 801d274:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d276:	1dfb      	adds	r3, r7, #7
 801d278:	781b      	ldrb	r3, [r3, #0]
 801d27a:	2b03      	cmp	r3, #3
 801d27c:	d017      	beq.n	801d2ae <USBD_Get_USB_Status+0x4c>
 801d27e:	dc1b      	bgt.n	801d2b8 <USBD_Get_USB_Status+0x56>
 801d280:	2b02      	cmp	r3, #2
 801d282:	d00f      	beq.n	801d2a4 <USBD_Get_USB_Status+0x42>
 801d284:	dc18      	bgt.n	801d2b8 <USBD_Get_USB_Status+0x56>
 801d286:	2b00      	cmp	r3, #0
 801d288:	d002      	beq.n	801d290 <USBD_Get_USB_Status+0x2e>
 801d28a:	2b01      	cmp	r3, #1
 801d28c:	d005      	beq.n	801d29a <USBD_Get_USB_Status+0x38>
 801d28e:	e013      	b.n	801d2b8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d290:	230f      	movs	r3, #15
 801d292:	18fb      	adds	r3, r7, r3
 801d294:	2200      	movs	r2, #0
 801d296:	701a      	strb	r2, [r3, #0]
    break;
 801d298:	e013      	b.n	801d2c2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d29a:	230f      	movs	r3, #15
 801d29c:	18fb      	adds	r3, r7, r3
 801d29e:	2203      	movs	r2, #3
 801d2a0:	701a      	strb	r2, [r3, #0]
    break;
 801d2a2:	e00e      	b.n	801d2c2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d2a4:	230f      	movs	r3, #15
 801d2a6:	18fb      	adds	r3, r7, r3
 801d2a8:	2201      	movs	r2, #1
 801d2aa:	701a      	strb	r2, [r3, #0]
    break;
 801d2ac:	e009      	b.n	801d2c2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d2ae:	230f      	movs	r3, #15
 801d2b0:	18fb      	adds	r3, r7, r3
 801d2b2:	2203      	movs	r2, #3
 801d2b4:	701a      	strb	r2, [r3, #0]
    break;
 801d2b6:	e004      	b.n	801d2c2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d2b8:	230f      	movs	r3, #15
 801d2ba:	18fb      	adds	r3, r7, r3
 801d2bc:	2203      	movs	r2, #3
 801d2be:	701a      	strb	r2, [r3, #0]
    break;
 801d2c0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 801d2c2:	230f      	movs	r3, #15
 801d2c4:	18fb      	adds	r3, r7, r3
 801d2c6:	781b      	ldrb	r3, [r3, #0]
}
 801d2c8:	0018      	movs	r0, r3
 801d2ca:	46bd      	mov	sp, r7
 801d2cc:	b004      	add	sp, #16
 801d2ce:	bd80      	pop	{r7, pc}

0801d2d0 <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b086      	sub	sp, #24
 801d2d4:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 801d2d6:	230f      	movs	r3, #15
 801d2d8:	18fb      	adds	r3, r7, r3
 801d2da:	2203      	movs	r2, #3
 801d2dc:	701a      	strb	r2, [r3, #0]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 801d2de:	4bc0      	ldr	r3, [pc, #768]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d2e0:	681a      	ldr	r2, [r3, #0]
 801d2e2:	23c0      	movs	r3, #192	; 0xc0
 801d2e4:	049b      	lsls	r3, r3, #18
 801d2e6:	4013      	ands	r3, r2
 801d2e8:	d00e      	beq.n	801d308 <BSP_GUI_LoadDataFromFlash+0x38>
 801d2ea:	4bbd      	ldr	r3, [pc, #756]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d2ec:	681a      	ldr	r2, [r3, #0]
 801d2ee:	23c0      	movs	r3, #192	; 0xc0
 801d2f0:	049b      	lsls	r3, r3, #18
 801d2f2:	401a      	ands	r2, r3
 801d2f4:	2380      	movs	r3, #128	; 0x80
 801d2f6:	045b      	lsls	r3, r3, #17
 801d2f8:	429a      	cmp	r2, r3
 801d2fa:	d110      	bne.n	801d31e <BSP_GUI_LoadDataFromFlash+0x4e>
 801d2fc:	4bb9      	ldr	r3, [pc, #740]	; (801d5e4 <BSP_GUI_LoadDataFromFlash+0x314>)
 801d2fe:	681a      	ldr	r2, [r3, #0]
 801d300:	2380      	movs	r3, #128	; 0x80
 801d302:	039b      	lsls	r3, r3, #14
 801d304:	4013      	ands	r3, r2
 801d306:	d10a      	bne.n	801d31e <BSP_GUI_LoadDataFromFlash+0x4e>
 801d308:	4bb7      	ldr	r3, [pc, #732]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	029b      	lsls	r3, r3, #10
 801d30e:	4ab7      	ldr	r2, [pc, #732]	; (801d5ec <BSP_GUI_LoadDataFromFlash+0x31c>)
 801d310:	4013      	ands	r3, r2
 801d312:	0adb      	lsrs	r3, r3, #11
 801d314:	031b      	lsls	r3, r3, #12
 801d316:	4ab6      	ldr	r2, [pc, #728]	; (801d5f0 <BSP_GUI_LoadDataFromFlash+0x320>)
 801d318:	4694      	mov	ip, r2
 801d31a:	4463      	add	r3, ip
 801d31c:	e00a      	b.n	801d334 <BSP_GUI_LoadDataFromFlash+0x64>
 801d31e:	4bb2      	ldr	r3, [pc, #712]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	029b      	lsls	r3, r3, #10
 801d324:	085b      	lsrs	r3, r3, #1
 801d326:	4ab3      	ldr	r2, [pc, #716]	; (801d5f4 <BSP_GUI_LoadDataFromFlash+0x324>)
 801d328:	4013      	ands	r3, r2
 801d32a:	0adb      	lsrs	r3, r3, #11
 801d32c:	031b      	lsls	r3, r3, #12
 801d32e:	4ab0      	ldr	r2, [pc, #704]	; (801d5f0 <BSP_GUI_LoadDataFromFlash+0x320>)
 801d330:	4694      	mov	ip, r2
 801d332:	4463      	add	r3, ip
 801d334:	60bb      	str	r3, [r7, #8]
#else
  uint32_t _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
#endif /* GUI_FLASH_MAGIC_NUMBER */

  /* Check that we did not reach the end of page */
  if (GUI_FLASH_ADDR_RESERVED > ADDR_FLASH_PAGE_END)
 801d336:	4baa      	ldr	r3, [pc, #680]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d338:	681a      	ldr	r2, [r3, #0]
 801d33a:	23c0      	movs	r3, #192	; 0xc0
 801d33c:	049b      	lsls	r3, r3, #18
 801d33e:	4013      	ands	r3, r2
 801d340:	d00e      	beq.n	801d360 <BSP_GUI_LoadDataFromFlash+0x90>
 801d342:	4ba7      	ldr	r3, [pc, #668]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d344:	681a      	ldr	r2, [r3, #0]
 801d346:	23c0      	movs	r3, #192	; 0xc0
 801d348:	049b      	lsls	r3, r3, #18
 801d34a:	401a      	ands	r2, r3
 801d34c:	2380      	movs	r3, #128	; 0x80
 801d34e:	045b      	lsls	r3, r3, #17
 801d350:	429a      	cmp	r2, r3
 801d352:	d10f      	bne.n	801d374 <BSP_GUI_LoadDataFromFlash+0xa4>
 801d354:	4ba3      	ldr	r3, [pc, #652]	; (801d5e4 <BSP_GUI_LoadDataFromFlash+0x314>)
 801d356:	681a      	ldr	r2, [r3, #0]
 801d358:	2380      	movs	r3, #128	; 0x80
 801d35a:	039b      	lsls	r3, r3, #14
 801d35c:	4013      	ands	r3, r2
 801d35e:	d109      	bne.n	801d374 <BSP_GUI_LoadDataFromFlash+0xa4>
 801d360:	4ba1      	ldr	r3, [pc, #644]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	029b      	lsls	r3, r3, #10
 801d366:	4aa1      	ldr	r2, [pc, #644]	; (801d5ec <BSP_GUI_LoadDataFromFlash+0x31c>)
 801d368:	4013      	ands	r3, r2
 801d36a:	0adb      	lsrs	r3, r3, #11
 801d36c:	031b      	lsls	r3, r3, #12
 801d36e:	4aa2      	ldr	r2, [pc, #648]	; (801d5f8 <BSP_GUI_LoadDataFromFlash+0x328>)
 801d370:	189a      	adds	r2, r3, r2
 801d372:	e009      	b.n	801d388 <BSP_GUI_LoadDataFromFlash+0xb8>
 801d374:	4b9c      	ldr	r3, [pc, #624]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	029b      	lsls	r3, r3, #10
 801d37a:	085b      	lsrs	r3, r3, #1
 801d37c:	4a9d      	ldr	r2, [pc, #628]	; (801d5f4 <BSP_GUI_LoadDataFromFlash+0x324>)
 801d37e:	4013      	ands	r3, r2
 801d380:	0adb      	lsrs	r3, r3, #11
 801d382:	031b      	lsls	r3, r3, #12
 801d384:	4a9c      	ldr	r2, [pc, #624]	; (801d5f8 <BSP_GUI_LoadDataFromFlash+0x328>)
 801d386:	189a      	adds	r2, r3, r2
 801d388:	4b95      	ldr	r3, [pc, #596]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d38a:	6819      	ldr	r1, [r3, #0]
 801d38c:	23c0      	movs	r3, #192	; 0xc0
 801d38e:	049b      	lsls	r3, r3, #18
 801d390:	400b      	ands	r3, r1
 801d392:	d00e      	beq.n	801d3b2 <BSP_GUI_LoadDataFromFlash+0xe2>
 801d394:	4b92      	ldr	r3, [pc, #584]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d396:	6819      	ldr	r1, [r3, #0]
 801d398:	23c0      	movs	r3, #192	; 0xc0
 801d39a:	049b      	lsls	r3, r3, #18
 801d39c:	4019      	ands	r1, r3
 801d39e:	2380      	movs	r3, #128	; 0x80
 801d3a0:	045b      	lsls	r3, r3, #17
 801d3a2:	4299      	cmp	r1, r3
 801d3a4:	d112      	bne.n	801d3cc <BSP_GUI_LoadDataFromFlash+0xfc>
 801d3a6:	4b8f      	ldr	r3, [pc, #572]	; (801d5e4 <BSP_GUI_LoadDataFromFlash+0x314>)
 801d3a8:	6819      	ldr	r1, [r3, #0]
 801d3aa:	2380      	movs	r3, #128	; 0x80
 801d3ac:	039b      	lsls	r3, r3, #14
 801d3ae:	400b      	ands	r3, r1
 801d3b0:	d10c      	bne.n	801d3cc <BSP_GUI_LoadDataFromFlash+0xfc>
 801d3b2:	4b8d      	ldr	r3, [pc, #564]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	029b      	lsls	r3, r3, #10
 801d3b8:	498c      	ldr	r1, [pc, #560]	; (801d5ec <BSP_GUI_LoadDataFromFlash+0x31c>)
 801d3ba:	400b      	ands	r3, r1
 801d3bc:	0adb      	lsrs	r3, r3, #11
 801d3be:	2180      	movs	r1, #128	; 0x80
 801d3c0:	0209      	lsls	r1, r1, #8
 801d3c2:	468c      	mov	ip, r1
 801d3c4:	4463      	add	r3, ip
 801d3c6:	031b      	lsls	r3, r3, #12
 801d3c8:	3b01      	subs	r3, #1
 801d3ca:	e00c      	b.n	801d3e6 <BSP_GUI_LoadDataFromFlash+0x116>
 801d3cc:	4b86      	ldr	r3, [pc, #536]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	029b      	lsls	r3, r3, #10
 801d3d2:	085b      	lsrs	r3, r3, #1
 801d3d4:	4987      	ldr	r1, [pc, #540]	; (801d5f4 <BSP_GUI_LoadDataFromFlash+0x324>)
 801d3d6:	400b      	ands	r3, r1
 801d3d8:	0adb      	lsrs	r3, r3, #11
 801d3da:	2180      	movs	r1, #128	; 0x80
 801d3dc:	0209      	lsls	r1, r1, #8
 801d3de:	468c      	mov	ip, r1
 801d3e0:	4463      	add	r3, ip
 801d3e2:	031b      	lsls	r3, r3, #12
 801d3e4:	3b01      	subs	r3, #1
 801d3e6:	429a      	cmp	r2, r3
 801d3e8:	d900      	bls.n	801d3ec <BSP_GUI_LoadDataFromFlash+0x11c>
 801d3ea:	e17a      	b.n	801d6e2 <BSP_GUI_LoadDataFromFlash+0x412>
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  if ((0xFFFFFFFFu != *((uint32_t *)_addr)) && (MagicNumber != *((uint64_t *)_addr)))
 801d3ec:	68bb      	ldr	r3, [r7, #8]
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	3301      	adds	r3, #1
 801d3f2:	d011      	beq.n	801d418 <BSP_GUI_LoadDataFromFlash+0x148>
 801d3f4:	68bb      	ldr	r3, [r7, #8]
 801d3f6:	681a      	ldr	r2, [r3, #0]
 801d3f8:	685b      	ldr	r3, [r3, #4]
 801d3fa:	4880      	ldr	r0, [pc, #512]	; (801d5fc <BSP_GUI_LoadDataFromFlash+0x32c>)
 801d3fc:	4980      	ldr	r1, [pc, #512]	; (801d600 <BSP_GUI_LoadDataFromFlash+0x330>)
 801d3fe:	4282      	cmp	r2, r0
 801d400:	d101      	bne.n	801d406 <BSP_GUI_LoadDataFromFlash+0x136>
 801d402:	428b      	cmp	r3, r1
 801d404:	d008      	beq.n	801d418 <BSP_GUI_LoadDataFromFlash+0x148>
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
  {
#if defined(_TRACE)
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t *)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 801d406:	4b7f      	ldr	r3, [pc, #508]	; (801d604 <BSP_GUI_LoadDataFromFlash+0x334>)
 801d408:	2218      	movs	r2, #24
 801d40a:	9200      	str	r2, [sp, #0]
 801d40c:	2200      	movs	r2, #0
 801d40e:	2100      	movs	r1, #0
 801d410:	2006      	movs	r0, #6
 801d412:	f7f4 fb23 	bl	8011a5c <USBPD_TRACE_Add>
#endif /* _TRACE */
    goto _exit;
 801d416:	e167      	b.n	801d6e8 <BSP_GUI_LoadDataFromFlash+0x418>
  }
  if (0xFFFFFFFFu == *((uint32_t *)_addr))
 801d418:	68bb      	ldr	r3, [r7, #8]
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	3301      	adds	r3, #1
 801d41e:	d100      	bne.n	801d422 <BSP_GUI_LoadDataFromFlash+0x152>
 801d420:	e161      	b.n	801d6e6 <BSP_GUI_LoadDataFromFlash+0x416>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 801d422:	4b6f      	ldr	r3, [pc, #444]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d424:	681a      	ldr	r2, [r3, #0]
 801d426:	23c0      	movs	r3, #192	; 0xc0
 801d428:	049b      	lsls	r3, r3, #18
 801d42a:	4013      	ands	r3, r2
 801d42c:	d00e      	beq.n	801d44c <BSP_GUI_LoadDataFromFlash+0x17c>
 801d42e:	4b6c      	ldr	r3, [pc, #432]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d430:	681a      	ldr	r2, [r3, #0]
 801d432:	23c0      	movs	r3, #192	; 0xc0
 801d434:	049b      	lsls	r3, r3, #18
 801d436:	401a      	ands	r2, r3
 801d438:	2380      	movs	r3, #128	; 0x80
 801d43a:	045b      	lsls	r3, r3, #17
 801d43c:	429a      	cmp	r2, r3
 801d43e:	d110      	bne.n	801d462 <BSP_GUI_LoadDataFromFlash+0x192>
 801d440:	4b68      	ldr	r3, [pc, #416]	; (801d5e4 <BSP_GUI_LoadDataFromFlash+0x314>)
 801d442:	681a      	ldr	r2, [r3, #0]
 801d444:	2380      	movs	r3, #128	; 0x80
 801d446:	039b      	lsls	r3, r3, #14
 801d448:	4013      	ands	r3, r2
 801d44a:	d10a      	bne.n	801d462 <BSP_GUI_LoadDataFromFlash+0x192>
 801d44c:	4b66      	ldr	r3, [pc, #408]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	029b      	lsls	r3, r3, #10
 801d452:	4a66      	ldr	r2, [pc, #408]	; (801d5ec <BSP_GUI_LoadDataFromFlash+0x31c>)
 801d454:	4013      	ands	r3, r2
 801d456:	0adb      	lsrs	r3, r3, #11
 801d458:	031b      	lsls	r3, r3, #12
 801d45a:	4a6b      	ldr	r2, [pc, #428]	; (801d608 <BSP_GUI_LoadDataFromFlash+0x338>)
 801d45c:	4694      	mov	ip, r2
 801d45e:	4463      	add	r3, ip
 801d460:	e00a      	b.n	801d478 <BSP_GUI_LoadDataFromFlash+0x1a8>
 801d462:	4b61      	ldr	r3, [pc, #388]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	029b      	lsls	r3, r3, #10
 801d468:	085b      	lsrs	r3, r3, #1
 801d46a:	4a62      	ldr	r2, [pc, #392]	; (801d5f4 <BSP_GUI_LoadDataFromFlash+0x324>)
 801d46c:	4013      	ands	r3, r2
 801d46e:	0adb      	lsrs	r3, r3, #11
 801d470:	031b      	lsls	r3, r3, #12
 801d472:	4a65      	ldr	r2, [pc, #404]	; (801d608 <BSP_GUI_LoadDataFromFlash+0x338>)
 801d474:	4694      	mov	ip, r2
 801d476:	4463      	add	r3, ip
 801d478:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t *_ptr = (uint32_t *)USBPD_NbPDO;
 801d47a:	4b64      	ldr	r3, [pc, #400]	; (801d60c <BSP_GUI_LoadDataFromFlash+0x33c>)
 801d47c:	607b      	str	r3, [r7, #4]
    USBPD_WRITE32(_ptr, *((uint32_t *)_addr));
 801d47e:	230e      	movs	r3, #14
 801d480:	18fb      	adds	r3, r7, r3
 801d482:	2200      	movs	r2, #0
 801d484:	701a      	strb	r2, [r3, #0]
 801d486:	e012      	b.n	801d4ae <BSP_GUI_LoadDataFromFlash+0x1de>
 801d488:	68bb      	ldr	r3, [r7, #8]
 801d48a:	681a      	ldr	r2, [r3, #0]
 801d48c:	200e      	movs	r0, #14
 801d48e:	183b      	adds	r3, r7, r0
 801d490:	781b      	ldrb	r3, [r3, #0]
 801d492:	00db      	lsls	r3, r3, #3
 801d494:	40da      	lsrs	r2, r3
 801d496:	0011      	movs	r1, r2
 801d498:	183b      	adds	r3, r7, r0
 801d49a:	781b      	ldrb	r3, [r3, #0]
 801d49c:	687a      	ldr	r2, [r7, #4]
 801d49e:	18d3      	adds	r3, r2, r3
 801d4a0:	b2ca      	uxtb	r2, r1
 801d4a2:	701a      	strb	r2, [r3, #0]
 801d4a4:	183b      	adds	r3, r7, r0
 801d4a6:	781a      	ldrb	r2, [r3, #0]
 801d4a8:	183b      	adds	r3, r7, r0
 801d4aa:	3201      	adds	r2, #1
 801d4ac:	701a      	strb	r2, [r3, #0]
 801d4ae:	230e      	movs	r3, #14
 801d4b0:	18fb      	adds	r3, r7, r3
 801d4b2:	781b      	ldrb	r3, [r3, #0]
 801d4b4:	2b03      	cmp	r3, #3
 801d4b6:	d9e7      	bls.n	801d488 <BSP_GUI_LoadDataFromFlash+0x1b8>
    _status = GUI_OK;
 801d4b8:	230f      	movs	r3, #15
 801d4ba:	18fb      	adds	r3, r7, r3
 801d4bc:	2200      	movs	r2, #0
 801d4be:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
  /* Load PORT0_PDO_ListSNK */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 801d4c0:	4b47      	ldr	r3, [pc, #284]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d4c2:	681a      	ldr	r2, [r3, #0]
 801d4c4:	23c0      	movs	r3, #192	; 0xc0
 801d4c6:	049b      	lsls	r3, r3, #18
 801d4c8:	4013      	ands	r3, r2
 801d4ca:	d00e      	beq.n	801d4ea <BSP_GUI_LoadDataFromFlash+0x21a>
 801d4cc:	4b44      	ldr	r3, [pc, #272]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d4ce:	681a      	ldr	r2, [r3, #0]
 801d4d0:	23c0      	movs	r3, #192	; 0xc0
 801d4d2:	049b      	lsls	r3, r3, #18
 801d4d4:	401a      	ands	r2, r3
 801d4d6:	2380      	movs	r3, #128	; 0x80
 801d4d8:	045b      	lsls	r3, r3, #17
 801d4da:	429a      	cmp	r2, r3
 801d4dc:	d110      	bne.n	801d500 <BSP_GUI_LoadDataFromFlash+0x230>
 801d4de:	4b41      	ldr	r3, [pc, #260]	; (801d5e4 <BSP_GUI_LoadDataFromFlash+0x314>)
 801d4e0:	681a      	ldr	r2, [r3, #0]
 801d4e2:	2380      	movs	r3, #128	; 0x80
 801d4e4:	039b      	lsls	r3, r3, #14
 801d4e6:	4013      	ands	r3, r2
 801d4e8:	d10a      	bne.n	801d500 <BSP_GUI_LoadDataFromFlash+0x230>
 801d4ea:	4b3f      	ldr	r3, [pc, #252]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d4ec:	681b      	ldr	r3, [r3, #0]
 801d4ee:	029b      	lsls	r3, r3, #10
 801d4f0:	4a3e      	ldr	r2, [pc, #248]	; (801d5ec <BSP_GUI_LoadDataFromFlash+0x31c>)
 801d4f2:	4013      	ands	r3, r2
 801d4f4:	0adb      	lsrs	r3, r3, #11
 801d4f6:	031b      	lsls	r3, r3, #12
 801d4f8:	4a45      	ldr	r2, [pc, #276]	; (801d610 <BSP_GUI_LoadDataFromFlash+0x340>)
 801d4fa:	4694      	mov	ip, r2
 801d4fc:	4463      	add	r3, ip
 801d4fe:	e00a      	b.n	801d516 <BSP_GUI_LoadDataFromFlash+0x246>
 801d500:	4b39      	ldr	r3, [pc, #228]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	029b      	lsls	r3, r3, #10
 801d506:	085b      	lsrs	r3, r3, #1
 801d508:	4a3a      	ldr	r2, [pc, #232]	; (801d5f4 <BSP_GUI_LoadDataFromFlash+0x324>)
 801d50a:	4013      	ands	r3, r2
 801d50c:	0adb      	lsrs	r3, r3, #11
 801d50e:	031b      	lsls	r3, r3, #12
 801d510:	4a3f      	ldr	r2, [pc, #252]	; (801d610 <BSP_GUI_LoadDataFromFlash+0x340>)
 801d512:	4694      	mov	ip, r2
 801d514:	4463      	add	r3, ip
 801d516:	4a3f      	ldr	r2, [pc, #252]	; (801d614 <BSP_GUI_LoadDataFromFlash+0x344>)
 801d518:	0011      	movs	r1, r2
 801d51a:	0018      	movs	r0, r3
 801d51c:	f000 fc52 	bl	801ddc4 <LoadPDOFromFlash>
 801d520:	0003      	movs	r3, r0
 801d522:	0019      	movs	r1, r3
 801d524:	220f      	movs	r2, #15
 801d526:	18bb      	adds	r3, r7, r2
 801d528:	18ba      	adds	r2, r7, r2
 801d52a:	7812      	ldrb	r2, [r2, #0]
 801d52c:	430a      	orrs	r2, r1
 801d52e:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t *)DPM_Settings,
 801d530:	4b2b      	ldr	r3, [pc, #172]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d532:	681a      	ldr	r2, [r3, #0]
 801d534:	23c0      	movs	r3, #192	; 0xc0
 801d536:	049b      	lsls	r3, r3, #18
 801d538:	4013      	ands	r3, r2
 801d53a:	d00e      	beq.n	801d55a <BSP_GUI_LoadDataFromFlash+0x28a>
 801d53c:	4b28      	ldr	r3, [pc, #160]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d53e:	681a      	ldr	r2, [r3, #0]
 801d540:	23c0      	movs	r3, #192	; 0xc0
 801d542:	049b      	lsls	r3, r3, #18
 801d544:	401a      	ands	r2, r3
 801d546:	2380      	movs	r3, #128	; 0x80
 801d548:	045b      	lsls	r3, r3, #17
 801d54a:	429a      	cmp	r2, r3
 801d54c:	d110      	bne.n	801d570 <BSP_GUI_LoadDataFromFlash+0x2a0>
 801d54e:	4b25      	ldr	r3, [pc, #148]	; (801d5e4 <BSP_GUI_LoadDataFromFlash+0x314>)
 801d550:	681a      	ldr	r2, [r3, #0]
 801d552:	2380      	movs	r3, #128	; 0x80
 801d554:	039b      	lsls	r3, r3, #14
 801d556:	4013      	ands	r3, r2
 801d558:	d10a      	bne.n	801d570 <BSP_GUI_LoadDataFromFlash+0x2a0>
 801d55a:	4b23      	ldr	r3, [pc, #140]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	029b      	lsls	r3, r3, #10
 801d560:	4a22      	ldr	r2, [pc, #136]	; (801d5ec <BSP_GUI_LoadDataFromFlash+0x31c>)
 801d562:	4013      	ands	r3, r2
 801d564:	0adb      	lsrs	r3, r3, #11
 801d566:	031b      	lsls	r3, r3, #12
 801d568:	4a2b      	ldr	r2, [pc, #172]	; (801d618 <BSP_GUI_LoadDataFromFlash+0x348>)
 801d56a:	4694      	mov	ip, r2
 801d56c:	4463      	add	r3, ip
 801d56e:	e00a      	b.n	801d586 <BSP_GUI_LoadDataFromFlash+0x2b6>
 801d570:	4b1d      	ldr	r3, [pc, #116]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	029b      	lsls	r3, r3, #10
 801d576:	085b      	lsrs	r3, r3, #1
 801d578:	4a1e      	ldr	r2, [pc, #120]	; (801d5f4 <BSP_GUI_LoadDataFromFlash+0x324>)
 801d57a:	4013      	ands	r3, r2
 801d57c:	0adb      	lsrs	r3, r3, #11
 801d57e:	031b      	lsls	r3, r3, #12
 801d580:	4a25      	ldr	r2, [pc, #148]	; (801d618 <BSP_GUI_LoadDataFromFlash+0x348>)
 801d582:	4694      	mov	ip, r2
 801d584:	4463      	add	r3, ip
 801d586:	4925      	ldr	r1, [pc, #148]	; (801d61c <BSP_GUI_LoadDataFromFlash+0x34c>)
 801d588:	220c      	movs	r2, #12
 801d58a:	0018      	movs	r0, r3
 801d58c:	f000 fc42 	bl	801de14 <LoadSettingsFromFlash>
 801d590:	0003      	movs	r3, r0
 801d592:	0019      	movs	r1, r3
 801d594:	220f      	movs	r2, #15
 801d596:	18bb      	adds	r3, r7, r2
 801d598:	18ba      	adds	r2, r7, r2
 801d59a:	7812      	ldrb	r2, [r2, #0]
 801d59c:	430a      	orrs	r2, r1
 801d59e:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Load DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t *)DPM_ID_Settings,
 801d5a0:	4b0f      	ldr	r3, [pc, #60]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d5a2:	681a      	ldr	r2, [r3, #0]
 801d5a4:	23c0      	movs	r3, #192	; 0xc0
 801d5a6:	049b      	lsls	r3, r3, #18
 801d5a8:	4013      	ands	r3, r2
 801d5aa:	d00e      	beq.n	801d5ca <BSP_GUI_LoadDataFromFlash+0x2fa>
 801d5ac:	4b0c      	ldr	r3, [pc, #48]	; (801d5e0 <BSP_GUI_LoadDataFromFlash+0x310>)
 801d5ae:	681a      	ldr	r2, [r3, #0]
 801d5b0:	23c0      	movs	r3, #192	; 0xc0
 801d5b2:	049b      	lsls	r3, r3, #18
 801d5b4:	401a      	ands	r2, r3
 801d5b6:	2380      	movs	r3, #128	; 0x80
 801d5b8:	045b      	lsls	r3, r3, #17
 801d5ba:	429a      	cmp	r2, r3
 801d5bc:	d132      	bne.n	801d624 <BSP_GUI_LoadDataFromFlash+0x354>
 801d5be:	4b09      	ldr	r3, [pc, #36]	; (801d5e4 <BSP_GUI_LoadDataFromFlash+0x314>)
 801d5c0:	681a      	ldr	r2, [r3, #0]
 801d5c2:	2380      	movs	r3, #128	; 0x80
 801d5c4:	039b      	lsls	r3, r3, #14
 801d5c6:	4013      	ands	r3, r2
 801d5c8:	d12c      	bne.n	801d624 <BSP_GUI_LoadDataFromFlash+0x354>
 801d5ca:	4b07      	ldr	r3, [pc, #28]	; (801d5e8 <BSP_GUI_LoadDataFromFlash+0x318>)
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	029b      	lsls	r3, r3, #10
 801d5d0:	4a06      	ldr	r2, [pc, #24]	; (801d5ec <BSP_GUI_LoadDataFromFlash+0x31c>)
 801d5d2:	4013      	ands	r3, r2
 801d5d4:	0adb      	lsrs	r3, r3, #11
 801d5d6:	031b      	lsls	r3, r3, #12
 801d5d8:	4a11      	ldr	r2, [pc, #68]	; (801d620 <BSP_GUI_LoadDataFromFlash+0x350>)
 801d5da:	4694      	mov	ip, r2
 801d5dc:	4463      	add	r3, ip
 801d5de:	e02c      	b.n	801d63a <BSP_GUI_LoadDataFromFlash+0x36a>
 801d5e0:	1fff7500 	.word	0x1fff7500
 801d5e4:	40022020 	.word	0x40022020
 801d5e8:	1fff75e0 	.word	0x1fff75e0
 801d5ec:	000ffc00 	.word	0x000ffc00
 801d5f0:	07fff800 	.word	0x07fff800
 801d5f4:	0007fe00 	.word	0x0007fe00
 801d5f8:	07fff924 	.word	0x07fff924
 801d5fc:	deadf00d 	.word	0xdeadf00d
 801d600:	deadbabe 	.word	0xdeadbabe
 801d604:	08023f60 	.word	0x08023f60
 801d608:	07fff808 	.word	0x07fff808
 801d60c:	2000016c 	.word	0x2000016c
 801d610:	07fff830 	.word	0x07fff830
 801d614:	20000170 	.word	0x20000170
 801d618:	07fff890 	.word	0x07fff890
 801d61c:	200000e4 	.word	0x200000e4
 801d620:	07fff91c 	.word	0x07fff91c
 801d624:	4b34      	ldr	r3, [pc, #208]	; (801d6f8 <BSP_GUI_LoadDataFromFlash+0x428>)
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	029b      	lsls	r3, r3, #10
 801d62a:	085b      	lsrs	r3, r3, #1
 801d62c:	4a33      	ldr	r2, [pc, #204]	; (801d6fc <BSP_GUI_LoadDataFromFlash+0x42c>)
 801d62e:	4013      	ands	r3, r2
 801d630:	0adb      	lsrs	r3, r3, #11
 801d632:	031b      	lsls	r3, r3, #12
 801d634:	4a32      	ldr	r2, [pc, #200]	; (801d700 <BSP_GUI_LoadDataFromFlash+0x430>)
 801d636:	4694      	mov	ip, r2
 801d638:	4463      	add	r3, ip
 801d63a:	4932      	ldr	r1, [pc, #200]	; (801d704 <BSP_GUI_LoadDataFromFlash+0x434>)
 801d63c:	2208      	movs	r2, #8
 801d63e:	0018      	movs	r0, r3
 801d640:	f000 fbe8 	bl	801de14 <LoadSettingsFromFlash>
 801d644:	0003      	movs	r3, r0
 801d646:	0019      	movs	r1, r3
 801d648:	220f      	movs	r2, #15
 801d64a:	18bb      	adds	r3, r7, r2
 801d64c:	18ba      	adds	r2, r7, r2
 801d64e:	7812      	ldrb	r2, [r2, #0]
 801d650:	430a      	orrs	r2, r1
 801d652:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_IdSettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t *)DPM_USER_Settings,
 801d654:	4b2c      	ldr	r3, [pc, #176]	; (801d708 <BSP_GUI_LoadDataFromFlash+0x438>)
 801d656:	681a      	ldr	r2, [r3, #0]
 801d658:	23c0      	movs	r3, #192	; 0xc0
 801d65a:	049b      	lsls	r3, r3, #18
 801d65c:	4013      	ands	r3, r2
 801d65e:	d00e      	beq.n	801d67e <BSP_GUI_LoadDataFromFlash+0x3ae>
 801d660:	4b29      	ldr	r3, [pc, #164]	; (801d708 <BSP_GUI_LoadDataFromFlash+0x438>)
 801d662:	681a      	ldr	r2, [r3, #0]
 801d664:	23c0      	movs	r3, #192	; 0xc0
 801d666:	049b      	lsls	r3, r3, #18
 801d668:	401a      	ands	r2, r3
 801d66a:	2380      	movs	r3, #128	; 0x80
 801d66c:	045b      	lsls	r3, r3, #17
 801d66e:	429a      	cmp	r2, r3
 801d670:	d110      	bne.n	801d694 <BSP_GUI_LoadDataFromFlash+0x3c4>
 801d672:	4b26      	ldr	r3, [pc, #152]	; (801d70c <BSP_GUI_LoadDataFromFlash+0x43c>)
 801d674:	681a      	ldr	r2, [r3, #0]
 801d676:	2380      	movs	r3, #128	; 0x80
 801d678:	039b      	lsls	r3, r3, #14
 801d67a:	4013      	ands	r3, r2
 801d67c:	d10a      	bne.n	801d694 <BSP_GUI_LoadDataFromFlash+0x3c4>
 801d67e:	4b1e      	ldr	r3, [pc, #120]	; (801d6f8 <BSP_GUI_LoadDataFromFlash+0x428>)
 801d680:	681b      	ldr	r3, [r3, #0]
 801d682:	029b      	lsls	r3, r3, #10
 801d684:	4a22      	ldr	r2, [pc, #136]	; (801d710 <BSP_GUI_LoadDataFromFlash+0x440>)
 801d686:	4013      	ands	r3, r2
 801d688:	0adb      	lsrs	r3, r3, #11
 801d68a:	031b      	lsls	r3, r3, #12
 801d68c:	4a21      	ldr	r2, [pc, #132]	; (801d714 <BSP_GUI_LoadDataFromFlash+0x444>)
 801d68e:	4694      	mov	ip, r2
 801d690:	4463      	add	r3, ip
 801d692:	e00a      	b.n	801d6aa <BSP_GUI_LoadDataFromFlash+0x3da>
 801d694:	4b18      	ldr	r3, [pc, #96]	; (801d6f8 <BSP_GUI_LoadDataFromFlash+0x428>)
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	029b      	lsls	r3, r3, #10
 801d69a:	085b      	lsrs	r3, r3, #1
 801d69c:	4a17      	ldr	r2, [pc, #92]	; (801d6fc <BSP_GUI_LoadDataFromFlash+0x42c>)
 801d69e:	4013      	ands	r3, r2
 801d6a0:	0adb      	lsrs	r3, r3, #11
 801d6a2:	031b      	lsls	r3, r3, #12
 801d6a4:	4a1b      	ldr	r2, [pc, #108]	; (801d714 <BSP_GUI_LoadDataFromFlash+0x444>)
 801d6a6:	4694      	mov	ip, r2
 801d6a8:	4463      	add	r3, ip
 801d6aa:	491b      	ldr	r1, [pc, #108]	; (801d718 <BSP_GUI_LoadDataFromFlash+0x448>)
 801d6ac:	2274      	movs	r2, #116	; 0x74
 801d6ae:	0018      	movs	r0, r3
 801d6b0:	f000 fbb0 	bl	801de14 <LoadSettingsFromFlash>
 801d6b4:	0003      	movs	r3, r0
 801d6b6:	0019      	movs	r1, r3
 801d6b8:	220f      	movs	r2, #15
 801d6ba:	18bb      	adds	r3, r7, r2
 801d6bc:	18ba      	adds	r2, r7, r2
 801d6be:	7812      	ldrb	r2, [r2, #0]
 801d6c0:	430a      	orrs	r2, r1
 801d6c2:	701a      	strb	r2, [r3, #0]
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_1].VID;
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_1].PID;
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _SRC_CAPA_EXT && (_SRC || _DRP) */
#if defined(_SNK)||defined(_DRP)
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.XID = DPM_ID_Settings[USBPD_PORT_0].XID;
 801d6c4:	4b0f      	ldr	r3, [pc, #60]	; (801d704 <BSP_GUI_LoadDataFromFlash+0x434>)
 801d6c6:	681a      	ldr	r2, [r3, #0]
 801d6c8:	4b13      	ldr	r3, [pc, #76]	; (801d718 <BSP_GUI_LoadDataFromFlash+0x448>)
 801d6ca:	655a      	str	r2, [r3, #84]	; 0x54
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_0].VID;
 801d6cc:	4b0d      	ldr	r3, [pc, #52]	; (801d704 <BSP_GUI_LoadDataFromFlash+0x434>)
 801d6ce:	8899      	ldrh	r1, [r3, #4]
 801d6d0:	4b11      	ldr	r3, [pc, #68]	; (801d718 <BSP_GUI_LoadDataFromFlash+0x448>)
 801d6d2:	2250      	movs	r2, #80	; 0x50
 801d6d4:	5299      	strh	r1, [r3, r2]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_0].PID;
 801d6d6:	4b0b      	ldr	r3, [pc, #44]	; (801d704 <BSP_GUI_LoadDataFromFlash+0x434>)
 801d6d8:	88d9      	ldrh	r1, [r3, #6]
 801d6da:	4b0f      	ldr	r3, [pc, #60]	; (801d718 <BSP_GUI_LoadDataFromFlash+0x448>)
 801d6dc:	2252      	movs	r2, #82	; 0x52
 801d6de:	5299      	strh	r1, [r3, r2]
 801d6e0:	e002      	b.n	801d6e8 <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 801d6e2:	46c0      	nop			; (mov r8, r8)
 801d6e4:	e000      	b.n	801d6e8 <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 801d6e6:	46c0      	nop			; (mov r8, r8)
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 801d6e8:	230f      	movs	r3, #15
 801d6ea:	18fb      	adds	r3, r7, r3
 801d6ec:	781b      	ldrb	r3, [r3, #0]
}
 801d6ee:	0018      	movs	r0, r3
 801d6f0:	46bd      	mov	sp, r7
 801d6f2:	b004      	add	sp, #16
 801d6f4:	bd80      	pop	{r7, pc}
 801d6f6:	46c0      	nop			; (mov r8, r8)
 801d6f8:	1fff75e0 	.word	0x1fff75e0
 801d6fc:	0007fe00 	.word	0x0007fe00
 801d700:	07fff91c 	.word	0x07fff91c
 801d704:	200000f0 	.word	0x200000f0
 801d708:	1fff7500 	.word	0x1fff7500
 801d70c:	40022020 	.word	0x40022020
 801d710:	000ffc00 	.word	0x000ffc00
 801d714:	07fff89c 	.word	0x07fff89c
 801d718:	200000f8 	.word	0x200000f8

0801d71c <BSP_GUI_SaveDataInFlash>:

  return status;
}

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 801d71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d71e:	b099      	sub	sp, #100	; 0x64
 801d720:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_OK;
 801d722:	2327      	movs	r3, #39	; 0x27
 801d724:	2638      	movs	r6, #56	; 0x38
 801d726:	199b      	adds	r3, r3, r6
 801d728:	19da      	adds	r2, r3, r7
 801d72a:	2300      	movs	r3, #0
 801d72c:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801d72e:	b672      	cpsid	i
}
 801d730:	46c0      	nop			; (mov r8, r8)

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  (void)HAL_FLASH_Unlock();
 801d732:	f7ed fb9f 	bl	800ae74 <HAL_FLASH_Unlock>
  erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
  erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
  erase_init.Sector        = FLASH_SECTOR_ID;
  erase_init.NbSectors     = 1;
#else
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 801d736:	2308      	movs	r3, #8
 801d738:	199b      	adds	r3, r3, r6
 801d73a:	19da      	adds	r2, r3, r7
 801d73c:	2302      	movs	r3, #2
 801d73e:	6013      	str	r3, [r2, #0]

#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress  = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 801d740:	4bbf      	ldr	r3, [pc, #764]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801d742:	681a      	ldr	r2, [r3, #0]
 801d744:	23c0      	movs	r3, #192	; 0xc0
 801d746:	049b      	lsls	r3, r3, #18
 801d748:	4013      	ands	r3, r2
 801d74a:	d00e      	beq.n	801d76a <BSP_GUI_SaveDataInFlash+0x4e>
 801d74c:	4bbc      	ldr	r3, [pc, #752]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801d74e:	681a      	ldr	r2, [r3, #0]
 801d750:	23c0      	movs	r3, #192	; 0xc0
 801d752:	049b      	lsls	r3, r3, #18
 801d754:	401a      	ands	r2, r3
 801d756:	2380      	movs	r3, #128	; 0x80
 801d758:	045b      	lsls	r3, r3, #17
 801d75a:	429a      	cmp	r2, r3
 801d75c:	d10e      	bne.n	801d77c <BSP_GUI_SaveDataInFlash+0x60>
 801d75e:	4bb9      	ldr	r3, [pc, #740]	; (801da44 <BSP_GUI_SaveDataInFlash+0x328>)
 801d760:	681a      	ldr	r2, [r3, #0]
 801d762:	2380      	movs	r3, #128	; 0x80
 801d764:	039b      	lsls	r3, r3, #14
 801d766:	4013      	ands	r3, r2
 801d768:	d108      	bne.n	801d77c <BSP_GUI_SaveDataInFlash+0x60>
 801d76a:	4bb7      	ldr	r3, [pc, #732]	; (801da48 <BSP_GUI_SaveDataInFlash+0x32c>)
 801d76c:	681b      	ldr	r3, [r3, #0]
 801d76e:	029a      	lsls	r2, r3, #10
 801d770:	4bb6      	ldr	r3, [pc, #728]	; (801da4c <BSP_GUI_SaveDataInFlash+0x330>)
 801d772:	4013      	ands	r3, r2
 801d774:	0adb      	lsrs	r3, r3, #11
 801d776:	005b      	lsls	r3, r3, #1
 801d778:	1e5a      	subs	r2, r3, #1
 801d77a:	e008      	b.n	801d78e <BSP_GUI_SaveDataInFlash+0x72>
 801d77c:	4bb2      	ldr	r3, [pc, #712]	; (801da48 <BSP_GUI_SaveDataInFlash+0x32c>)
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	029b      	lsls	r3, r3, #10
 801d782:	085a      	lsrs	r2, r3, #1
 801d784:	4bb2      	ldr	r3, [pc, #712]	; (801da50 <BSP_GUI_SaveDataInFlash+0x334>)
 801d786:	4013      	ands	r3, r2
 801d788:	0adb      	lsrs	r3, r3, #11
 801d78a:	005b      	lsls	r3, r3, #1
 801d78c:	1e5a      	subs	r2, r3, #1
 801d78e:	2108      	movs	r1, #8
 801d790:	2038      	movs	r0, #56	; 0x38
 801d792:	180b      	adds	r3, r1, r0
 801d794:	19db      	adds	r3, r3, r7
 801d796:	609a      	str	r2, [r3, #8]
#endif /* STM32F072xB || STM32F051x8 */
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_2)
  erase_init.Banks      = FLASH_BANK_2;
 801d798:	180b      	adds	r3, r1, r0
 801d79a:	19da      	adds	r2, r3, r7
 801d79c:	2380      	movs	r3, #128	; 0x80
 801d79e:	021b      	lsls	r3, r3, #8
 801d7a0:	6053      	str	r3, [r2, #4]
#elif defined(FLASH_BANK_1)
  erase_init.Banks      = FLASH_BANK_1;
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 801d7a2:	180b      	adds	r3, r1, r0
 801d7a4:	19da      	adds	r2, r3, r7
 801d7a6:	2301      	movs	r3, #1
 801d7a8:	60d3      	str	r3, [r2, #12]

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if (FLASH->SR != 0x00)
 801d7aa:	4baa      	ldr	r3, [pc, #680]	; (801da54 <BSP_GUI_SaveDataInFlash+0x338>)
 801d7ac:	691b      	ldr	r3, [r3, #16]
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d003      	beq.n	801d7ba <BSP_GUI_SaveDataInFlash+0x9e>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 801d7b2:	4aa8      	ldr	r2, [pc, #672]	; (801da54 <BSP_GUI_SaveDataInFlash+0x338>)
 801d7b4:	2380      	movs	r3, #128	; 0x80
 801d7b6:	021b      	lsls	r3, r3, #8
 801d7b8:	6113      	str	r3, [r2, #16]
  }
#endif /* FLASH_SR_OPTVERR */
#endif /* FLASH_CR_SER */

  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &page_error))
 801d7ba:	233c      	movs	r3, #60	; 0x3c
 801d7bc:	18fa      	adds	r2, r7, r3
 801d7be:	2308      	movs	r3, #8
 801d7c0:	2638      	movs	r6, #56	; 0x38
 801d7c2:	199b      	adds	r3, r3, r6
 801d7c4:	19db      	adds	r3, r3, r7
 801d7c6:	0011      	movs	r1, r2
 801d7c8:	0018      	movs	r0, r3
 801d7ca:	f7ed fc07 	bl	800afdc <HAL_FLASHEx_Erase>
 801d7ce:	1e03      	subs	r3, r0, #0
 801d7d0:	d004      	beq.n	801d7dc <BSP_GUI_SaveDataInFlash+0xc0>
  {
    status = GUI_ERASE_ERROR;
 801d7d2:	2327      	movs	r3, #39	; 0x27
 801d7d4:	199b      	adds	r3, r3, r6
 801d7d6:	19da      	adds	r2, r3, r7
 801d7d8:	2301      	movs	r3, #1
 801d7da:	7013      	strb	r3, [r2, #0]
  }

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFFU == page_error) && (GUI_OK == status))
 801d7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7de:	3301      	adds	r3, #1
 801d7e0:	d000      	beq.n	801d7e4 <BSP_GUI_SaveDataInFlash+0xc8>
 801d7e2:	e1d9      	b.n	801db98 <BSP_GUI_SaveDataInFlash+0x47c>
 801d7e4:	2327      	movs	r3, #39	; 0x27
 801d7e6:	2238      	movs	r2, #56	; 0x38
 801d7e8:	189b      	adds	r3, r3, r2
 801d7ea:	19db      	adds	r3, r3, r7
 801d7ec:	781b      	ldrb	r3, [r3, #0]
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d000      	beq.n	801d7f4 <BSP_GUI_SaveDataInFlash+0xd8>
 801d7f2:	e1d1      	b.n	801db98 <BSP_GUI_SaveDataInFlash+0x47c>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber))
 801d7f4:	4b92      	ldr	r3, [pc, #584]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801d7f6:	681a      	ldr	r2, [r3, #0]
 801d7f8:	23c0      	movs	r3, #192	; 0xc0
 801d7fa:	049b      	lsls	r3, r3, #18
 801d7fc:	4013      	ands	r3, r2
 801d7fe:	d00e      	beq.n	801d81e <BSP_GUI_SaveDataInFlash+0x102>
 801d800:	4b8f      	ldr	r3, [pc, #572]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801d802:	681a      	ldr	r2, [r3, #0]
 801d804:	23c0      	movs	r3, #192	; 0xc0
 801d806:	049b      	lsls	r3, r3, #18
 801d808:	401a      	ands	r2, r3
 801d80a:	2380      	movs	r3, #128	; 0x80
 801d80c:	045b      	lsls	r3, r3, #17
 801d80e:	429a      	cmp	r2, r3
 801d810:	d10f      	bne.n	801d832 <BSP_GUI_SaveDataInFlash+0x116>
 801d812:	4b8c      	ldr	r3, [pc, #560]	; (801da44 <BSP_GUI_SaveDataInFlash+0x328>)
 801d814:	681a      	ldr	r2, [r3, #0]
 801d816:	2380      	movs	r3, #128	; 0x80
 801d818:	039b      	lsls	r3, r3, #14
 801d81a:	4013      	ands	r3, r2
 801d81c:	d109      	bne.n	801d832 <BSP_GUI_SaveDataInFlash+0x116>
 801d81e:	4b8a      	ldr	r3, [pc, #552]	; (801da48 <BSP_GUI_SaveDataInFlash+0x32c>)
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	029a      	lsls	r2, r3, #10
 801d824:	4b89      	ldr	r3, [pc, #548]	; (801da4c <BSP_GUI_SaveDataInFlash+0x330>)
 801d826:	4013      	ands	r3, r2
 801d828:	0adb      	lsrs	r3, r3, #11
 801d82a:	031b      	lsls	r3, r3, #12
 801d82c:	4a8a      	ldr	r2, [pc, #552]	; (801da58 <BSP_GUI_SaveDataInFlash+0x33c>)
 801d82e:	1899      	adds	r1, r3, r2
 801d830:	e009      	b.n	801d846 <BSP_GUI_SaveDataInFlash+0x12a>
 801d832:	4b85      	ldr	r3, [pc, #532]	; (801da48 <BSP_GUI_SaveDataInFlash+0x32c>)
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	029b      	lsls	r3, r3, #10
 801d838:	085a      	lsrs	r2, r3, #1
 801d83a:	4b85      	ldr	r3, [pc, #532]	; (801da50 <BSP_GUI_SaveDataInFlash+0x334>)
 801d83c:	4013      	ands	r3, r2
 801d83e:	0adb      	lsrs	r3, r3, #11
 801d840:	031b      	lsls	r3, r3, #12
 801d842:	4a85      	ldr	r2, [pc, #532]	; (801da58 <BSP_GUI_SaveDataInFlash+0x33c>)
 801d844:	1899      	adds	r1, r3, r2
 801d846:	4a85      	ldr	r2, [pc, #532]	; (801da5c <BSP_GUI_SaveDataInFlash+0x340>)
 801d848:	4b85      	ldr	r3, [pc, #532]	; (801da60 <BSP_GUI_SaveDataInFlash+0x344>)
 801d84a:	2001      	movs	r0, #1
 801d84c:	f7ed fac4 	bl	800add8 <HAL_FLASH_Program>
 801d850:	1e03      	subs	r3, r0, #0
 801d852:	d005      	beq.n	801d860 <BSP_GUI_SaveDataInFlash+0x144>
    {
      status = GUI_WRITE_ERROR;
 801d854:	2327      	movs	r3, #39	; 0x27
 801d856:	2238      	movs	r2, #56	; 0x38
 801d858:	189b      	adds	r3, r3, r2
 801d85a:	19da      	adds	r2, r3, r7
 801d85c:	2302      	movs	r3, #2
 801d85e:	7013      	strb	r3, [r2, #0]
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 801d860:	2327      	movs	r3, #39	; 0x27
 801d862:	2238      	movs	r2, #56	; 0x38
 801d864:	189b      	adds	r3, r3, r2
 801d866:	19db      	adds	r3, r3, r7
 801d868:	781b      	ldrb	r3, [r3, #0]
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d000      	beq.n	801d870 <BSP_GUI_SaveDataInFlash+0x154>
 801d86e:	e082      	b.n	801d976 <BSP_GUI_SaveDataInFlash+0x25a>
    {
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 801d870:	2200      	movs	r2, #0
 801d872:	2300      	movs	r3, #0
 801d874:	653a      	str	r2, [r7, #80]	; 0x50
 801d876:	657b      	str	r3, [r7, #84]	; 0x54
      value |= USBPD_NbPDO[0];
 801d878:	4b7a      	ldr	r3, [pc, #488]	; (801da64 <BSP_GUI_SaveDataInFlash+0x348>)
 801d87a:	781b      	ldrb	r3, [r3, #0]
 801d87c:	633b      	str	r3, [r7, #48]	; 0x30
 801d87e:	2300      	movs	r3, #0
 801d880:	637b      	str	r3, [r7, #52]	; 0x34
 801d882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d888:	0008      	movs	r0, r1
 801d88a:	4318      	orrs	r0, r3
 801d88c:	0004      	movs	r4, r0
 801d88e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d890:	431a      	orrs	r2, r3
 801d892:	0015      	movs	r5, r2
 801d894:	653c      	str	r4, [r7, #80]	; 0x50
 801d896:	657d      	str	r5, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[1] << 8);
 801d898:	4b72      	ldr	r3, [pc, #456]	; (801da64 <BSP_GUI_SaveDataInFlash+0x348>)
 801d89a:	785b      	ldrb	r3, [r3, #1]
 801d89c:	021b      	lsls	r3, r3, #8
 801d89e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d8a0:	17db      	asrs	r3, r3, #31
 801d8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d8a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d8a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d8aa:	0008      	movs	r0, r1
 801d8ac:	4318      	orrs	r0, r3
 801d8ae:	6138      	str	r0, [r7, #16]
 801d8b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8b2:	431a      	orrs	r2, r3
 801d8b4:	617a      	str	r2, [r7, #20]
 801d8b6:	693b      	ldr	r3, [r7, #16]
 801d8b8:	697c      	ldr	r4, [r7, #20]
 801d8ba:	653b      	str	r3, [r7, #80]	; 0x50
 801d8bc:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[2] << 16);
 801d8be:	4b69      	ldr	r3, [pc, #420]	; (801da64 <BSP_GUI_SaveDataInFlash+0x348>)
 801d8c0:	789b      	ldrb	r3, [r3, #2]
 801d8c2:	041b      	lsls	r3, r3, #16
 801d8c4:	623b      	str	r3, [r7, #32]
 801d8c6:	17db      	asrs	r3, r3, #31
 801d8c8:	627b      	str	r3, [r7, #36]	; 0x24
 801d8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d8cc:	6a39      	ldr	r1, [r7, #32]
 801d8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d8d0:	0008      	movs	r0, r1
 801d8d2:	4318      	orrs	r0, r3
 801d8d4:	60b8      	str	r0, [r7, #8]
 801d8d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8d8:	431a      	orrs	r2, r3
 801d8da:	60fa      	str	r2, [r7, #12]
 801d8dc:	68bb      	ldr	r3, [r7, #8]
 801d8de:	68fc      	ldr	r4, [r7, #12]
 801d8e0:	653b      	str	r3, [r7, #80]	; 0x50
 801d8e2:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[3] << 24);
 801d8e4:	4b5f      	ldr	r3, [pc, #380]	; (801da64 <BSP_GUI_SaveDataInFlash+0x348>)
 801d8e6:	78db      	ldrb	r3, [r3, #3]
 801d8e8:	061b      	lsls	r3, r3, #24
 801d8ea:	61bb      	str	r3, [r7, #24]
 801d8ec:	17db      	asrs	r3, r3, #31
 801d8ee:	61fb      	str	r3, [r7, #28]
 801d8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d8f2:	69b9      	ldr	r1, [r7, #24]
 801d8f4:	69fa      	ldr	r2, [r7, #28]
 801d8f6:	0008      	movs	r0, r1
 801d8f8:	4318      	orrs	r0, r3
 801d8fa:	6038      	str	r0, [r7, #0]
 801d8fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8fe:	431a      	orrs	r2, r3
 801d900:	607a      	str	r2, [r7, #4]
 801d902:	683b      	ldr	r3, [r7, #0]
 801d904:	687c      	ldr	r4, [r7, #4]
 801d906:	653b      	str	r3, [r7, #80]	; 0x50
 801d908:	657c      	str	r4, [r7, #84]	; 0x54
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value))
 801d90a:	4b4d      	ldr	r3, [pc, #308]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801d90c:	681a      	ldr	r2, [r3, #0]
 801d90e:	23c0      	movs	r3, #192	; 0xc0
 801d910:	049b      	lsls	r3, r3, #18
 801d912:	4013      	ands	r3, r2
 801d914:	d00e      	beq.n	801d934 <BSP_GUI_SaveDataInFlash+0x218>
 801d916:	4b4a      	ldr	r3, [pc, #296]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801d918:	681a      	ldr	r2, [r3, #0]
 801d91a:	23c0      	movs	r3, #192	; 0xc0
 801d91c:	049b      	lsls	r3, r3, #18
 801d91e:	401a      	ands	r2, r3
 801d920:	2380      	movs	r3, #128	; 0x80
 801d922:	045b      	lsls	r3, r3, #17
 801d924:	429a      	cmp	r2, r3
 801d926:	d10f      	bne.n	801d948 <BSP_GUI_SaveDataInFlash+0x22c>
 801d928:	4b46      	ldr	r3, [pc, #280]	; (801da44 <BSP_GUI_SaveDataInFlash+0x328>)
 801d92a:	681a      	ldr	r2, [r3, #0]
 801d92c:	2380      	movs	r3, #128	; 0x80
 801d92e:	039b      	lsls	r3, r3, #14
 801d930:	4013      	ands	r3, r2
 801d932:	d109      	bne.n	801d948 <BSP_GUI_SaveDataInFlash+0x22c>
 801d934:	4b44      	ldr	r3, [pc, #272]	; (801da48 <BSP_GUI_SaveDataInFlash+0x32c>)
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	029b      	lsls	r3, r3, #10
 801d93a:	4a44      	ldr	r2, [pc, #272]	; (801da4c <BSP_GUI_SaveDataInFlash+0x330>)
 801d93c:	4013      	ands	r3, r2
 801d93e:	0adb      	lsrs	r3, r3, #11
 801d940:	031b      	lsls	r3, r3, #12
 801d942:	4a49      	ldr	r2, [pc, #292]	; (801da68 <BSP_GUI_SaveDataInFlash+0x34c>)
 801d944:	1899      	adds	r1, r3, r2
 801d946:	e009      	b.n	801d95c <BSP_GUI_SaveDataInFlash+0x240>
 801d948:	4b3f      	ldr	r3, [pc, #252]	; (801da48 <BSP_GUI_SaveDataInFlash+0x32c>)
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	029b      	lsls	r3, r3, #10
 801d94e:	085b      	lsrs	r3, r3, #1
 801d950:	4a3f      	ldr	r2, [pc, #252]	; (801da50 <BSP_GUI_SaveDataInFlash+0x334>)
 801d952:	4013      	ands	r3, r2
 801d954:	0adb      	lsrs	r3, r3, #11
 801d956:	031b      	lsls	r3, r3, #12
 801d958:	4a43      	ldr	r2, [pc, #268]	; (801da68 <BSP_GUI_SaveDataInFlash+0x34c>)
 801d95a:	1899      	adds	r1, r3, r2
 801d95c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d95e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d960:	2001      	movs	r0, #1
 801d962:	f7ed fa39 	bl	800add8 <HAL_FLASH_Program>
 801d966:	1e03      	subs	r3, r0, #0
 801d968:	d005      	beq.n	801d976 <BSP_GUI_SaveDataInFlash+0x25a>
      {
        status = GUI_WRITE_ERROR;
 801d96a:	2327      	movs	r3, #39	; 0x27
 801d96c:	2238      	movs	r2, #56	; 0x38
 801d96e:	189b      	adds	r3, r3, r2
 801d970:	19db      	adds	r3, r3, r7
 801d972:	2202      	movs	r2, #2
 801d974:	701a      	strb	r2, [r3, #0]
    }
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
    /* Save PORT0_PDO_ListSNK */
    if (GUI_OK == status)
 801d976:	2327      	movs	r3, #39	; 0x27
 801d978:	2238      	movs	r2, #56	; 0x38
 801d97a:	189b      	adds	r3, r3, r2
 801d97c:	19db      	adds	r3, r3, r7
 801d97e:	781b      	ldrb	r3, [r3, #0]
 801d980:	2b00      	cmp	r3, #0
 801d982:	d135      	bne.n	801d9f0 <BSP_GUI_SaveDataInFlash+0x2d4>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 801d984:	4b2e      	ldr	r3, [pc, #184]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801d986:	681a      	ldr	r2, [r3, #0]
 801d988:	23c0      	movs	r3, #192	; 0xc0
 801d98a:	049b      	lsls	r3, r3, #18
 801d98c:	4013      	ands	r3, r2
 801d98e:	d00e      	beq.n	801d9ae <BSP_GUI_SaveDataInFlash+0x292>
 801d990:	4b2b      	ldr	r3, [pc, #172]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801d992:	681a      	ldr	r2, [r3, #0]
 801d994:	23c0      	movs	r3, #192	; 0xc0
 801d996:	049b      	lsls	r3, r3, #18
 801d998:	401a      	ands	r2, r3
 801d99a:	2380      	movs	r3, #128	; 0x80
 801d99c:	045b      	lsls	r3, r3, #17
 801d99e:	429a      	cmp	r2, r3
 801d9a0:	d110      	bne.n	801d9c4 <BSP_GUI_SaveDataInFlash+0x2a8>
 801d9a2:	4b28      	ldr	r3, [pc, #160]	; (801da44 <BSP_GUI_SaveDataInFlash+0x328>)
 801d9a4:	681a      	ldr	r2, [r3, #0]
 801d9a6:	2380      	movs	r3, #128	; 0x80
 801d9a8:	039b      	lsls	r3, r3, #14
 801d9aa:	4013      	ands	r3, r2
 801d9ac:	d10a      	bne.n	801d9c4 <BSP_GUI_SaveDataInFlash+0x2a8>
 801d9ae:	4b26      	ldr	r3, [pc, #152]	; (801da48 <BSP_GUI_SaveDataInFlash+0x32c>)
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	029b      	lsls	r3, r3, #10
 801d9b4:	4a25      	ldr	r2, [pc, #148]	; (801da4c <BSP_GUI_SaveDataInFlash+0x330>)
 801d9b6:	4013      	ands	r3, r2
 801d9b8:	0adb      	lsrs	r3, r3, #11
 801d9ba:	031b      	lsls	r3, r3, #12
 801d9bc:	4a2b      	ldr	r2, [pc, #172]	; (801da6c <BSP_GUI_SaveDataInFlash+0x350>)
 801d9be:	4694      	mov	ip, r2
 801d9c0:	4463      	add	r3, ip
 801d9c2:	e00a      	b.n	801d9da <BSP_GUI_SaveDataInFlash+0x2be>
 801d9c4:	4b20      	ldr	r3, [pc, #128]	; (801da48 <BSP_GUI_SaveDataInFlash+0x32c>)
 801d9c6:	681b      	ldr	r3, [r3, #0]
 801d9c8:	029b      	lsls	r3, r3, #10
 801d9ca:	085b      	lsrs	r3, r3, #1
 801d9cc:	4a20      	ldr	r2, [pc, #128]	; (801da50 <BSP_GUI_SaveDataInFlash+0x334>)
 801d9ce:	4013      	ands	r3, r2
 801d9d0:	0adb      	lsrs	r3, r3, #11
 801d9d2:	031b      	lsls	r3, r3, #12
 801d9d4:	4a25      	ldr	r2, [pc, #148]	; (801da6c <BSP_GUI_SaveDataInFlash+0x350>)
 801d9d6:	4694      	mov	ip, r2
 801d9d8:	4463      	add	r3, ip
 801d9da:	2227      	movs	r2, #39	; 0x27
 801d9dc:	2138      	movs	r1, #56	; 0x38
 801d9de:	1852      	adds	r2, r2, r1
 801d9e0:	19d4      	adds	r4, r2, r7
 801d9e2:	4a23      	ldr	r2, [pc, #140]	; (801da70 <BSP_GUI_SaveDataInFlash+0x354>)
 801d9e4:	0011      	movs	r1, r2
 801d9e6:	0018      	movs	r0, r3
 801d9e8:	f000 f8fa 	bl	801dbe0 <SavePDOInFlash>
 801d9ec:	0003      	movs	r3, r0
 801d9ee:	7023      	strb	r3, [r4, #0]
    }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 801d9f0:	2327      	movs	r3, #39	; 0x27
 801d9f2:	2238      	movs	r2, #56	; 0x38
 801d9f4:	189b      	adds	r3, r3, r2
 801d9f6:	19db      	adds	r3, r3, r7
 801d9f8:	781b      	ldrb	r3, [r3, #0]
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d152      	bne.n	801daa4 <BSP_GUI_SaveDataInFlash+0x388>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS,
 801d9fe:	4b10      	ldr	r3, [pc, #64]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801da00:	681a      	ldr	r2, [r3, #0]
 801da02:	23c0      	movs	r3, #192	; 0xc0
 801da04:	049b      	lsls	r3, r3, #18
 801da06:	4013      	ands	r3, r2
 801da08:	d00e      	beq.n	801da28 <BSP_GUI_SaveDataInFlash+0x30c>
 801da0a:	4b0d      	ldr	r3, [pc, #52]	; (801da40 <BSP_GUI_SaveDataInFlash+0x324>)
 801da0c:	681a      	ldr	r2, [r3, #0]
 801da0e:	23c0      	movs	r3, #192	; 0xc0
 801da10:	049b      	lsls	r3, r3, #18
 801da12:	401a      	ands	r2, r3
 801da14:	2380      	movs	r3, #128	; 0x80
 801da16:	045b      	lsls	r3, r3, #17
 801da18:	429a      	cmp	r2, r3
 801da1a:	d12d      	bne.n	801da78 <BSP_GUI_SaveDataInFlash+0x35c>
 801da1c:	4b09      	ldr	r3, [pc, #36]	; (801da44 <BSP_GUI_SaveDataInFlash+0x328>)
 801da1e:	681a      	ldr	r2, [r3, #0]
 801da20:	2380      	movs	r3, #128	; 0x80
 801da22:	039b      	lsls	r3, r3, #14
 801da24:	4013      	ands	r3, r2
 801da26:	d127      	bne.n	801da78 <BSP_GUI_SaveDataInFlash+0x35c>
 801da28:	4b07      	ldr	r3, [pc, #28]	; (801da48 <BSP_GUI_SaveDataInFlash+0x32c>)
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	029b      	lsls	r3, r3, #10
 801da2e:	4a07      	ldr	r2, [pc, #28]	; (801da4c <BSP_GUI_SaveDataInFlash+0x330>)
 801da30:	4013      	ands	r3, r2
 801da32:	0adb      	lsrs	r3, r3, #11
 801da34:	031b      	lsls	r3, r3, #12
 801da36:	4a0f      	ldr	r2, [pc, #60]	; (801da74 <BSP_GUI_SaveDataInFlash+0x358>)
 801da38:	4694      	mov	ip, r2
 801da3a:	4463      	add	r3, ip
 801da3c:	e027      	b.n	801da8e <BSP_GUI_SaveDataInFlash+0x372>
 801da3e:	46c0      	nop			; (mov r8, r8)
 801da40:	1fff7500 	.word	0x1fff7500
 801da44:	40022020 	.word	0x40022020
 801da48:	1fff75e0 	.word	0x1fff75e0
 801da4c:	000ffc00 	.word	0x000ffc00
 801da50:	0007fe00 	.word	0x0007fe00
 801da54:	40022000 	.word	0x40022000
 801da58:	07fff800 	.word	0x07fff800
 801da5c:	deadf00d 	.word	0xdeadf00d
 801da60:	deadbabe 	.word	0xdeadbabe
 801da64:	2000016c 	.word	0x2000016c
 801da68:	07fff808 	.word	0x07fff808
 801da6c:	07fff830 	.word	0x07fff830
 801da70:	20000170 	.word	0x20000170
 801da74:	07fff890 	.word	0x07fff890
 801da78:	4b4e      	ldr	r3, [pc, #312]	; (801dbb4 <BSP_GUI_SaveDataInFlash+0x498>)
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	029b      	lsls	r3, r3, #10
 801da7e:	085b      	lsrs	r3, r3, #1
 801da80:	4a4d      	ldr	r2, [pc, #308]	; (801dbb8 <BSP_GUI_SaveDataInFlash+0x49c>)
 801da82:	4013      	ands	r3, r2
 801da84:	0adb      	lsrs	r3, r3, #11
 801da86:	031b      	lsls	r3, r3, #12
 801da88:	4a4c      	ldr	r2, [pc, #304]	; (801dbbc <BSP_GUI_SaveDataInFlash+0x4a0>)
 801da8a:	4694      	mov	ip, r2
 801da8c:	4463      	add	r3, ip
 801da8e:	2227      	movs	r2, #39	; 0x27
 801da90:	2138      	movs	r1, #56	; 0x38
 801da92:	1852      	adds	r2, r2, r1
 801da94:	19d4      	adds	r4, r2, r7
 801da96:	494a      	ldr	r1, [pc, #296]	; (801dbc0 <BSP_GUI_SaveDataInFlash+0x4a4>)
 801da98:	220c      	movs	r2, #12
 801da9a:	0018      	movs	r0, r3
 801da9c:	f000 f913 	bl	801dcc6 <SaveSettingsInFlash>
 801daa0:	0003      	movs	r3, r0
 801daa2:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 801daa4:	2327      	movs	r3, #39	; 0x27
 801daa6:	2238      	movs	r2, #56	; 0x38
 801daa8:	189b      	adds	r3, r3, r2
 801daaa:	19db      	adds	r3, r3, r7
 801daac:	781b      	ldrb	r3, [r3, #0]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d135      	bne.n	801db1e <BSP_GUI_SaveDataInFlash+0x402>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS,
 801dab2:	4b44      	ldr	r3, [pc, #272]	; (801dbc4 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801dab4:	681a      	ldr	r2, [r3, #0]
 801dab6:	23c0      	movs	r3, #192	; 0xc0
 801dab8:	049b      	lsls	r3, r3, #18
 801daba:	4013      	ands	r3, r2
 801dabc:	d00e      	beq.n	801dadc <BSP_GUI_SaveDataInFlash+0x3c0>
 801dabe:	4b41      	ldr	r3, [pc, #260]	; (801dbc4 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801dac0:	681a      	ldr	r2, [r3, #0]
 801dac2:	23c0      	movs	r3, #192	; 0xc0
 801dac4:	049b      	lsls	r3, r3, #18
 801dac6:	401a      	ands	r2, r3
 801dac8:	2380      	movs	r3, #128	; 0x80
 801daca:	045b      	lsls	r3, r3, #17
 801dacc:	429a      	cmp	r2, r3
 801dace:	d110      	bne.n	801daf2 <BSP_GUI_SaveDataInFlash+0x3d6>
 801dad0:	4b3d      	ldr	r3, [pc, #244]	; (801dbc8 <BSP_GUI_SaveDataInFlash+0x4ac>)
 801dad2:	681a      	ldr	r2, [r3, #0]
 801dad4:	2380      	movs	r3, #128	; 0x80
 801dad6:	039b      	lsls	r3, r3, #14
 801dad8:	4013      	ands	r3, r2
 801dada:	d10a      	bne.n	801daf2 <BSP_GUI_SaveDataInFlash+0x3d6>
 801dadc:	4b35      	ldr	r3, [pc, #212]	; (801dbb4 <BSP_GUI_SaveDataInFlash+0x498>)
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	029b      	lsls	r3, r3, #10
 801dae2:	4a3a      	ldr	r2, [pc, #232]	; (801dbcc <BSP_GUI_SaveDataInFlash+0x4b0>)
 801dae4:	4013      	ands	r3, r2
 801dae6:	0adb      	lsrs	r3, r3, #11
 801dae8:	031b      	lsls	r3, r3, #12
 801daea:	4a39      	ldr	r2, [pc, #228]	; (801dbd0 <BSP_GUI_SaveDataInFlash+0x4b4>)
 801daec:	4694      	mov	ip, r2
 801daee:	4463      	add	r3, ip
 801daf0:	e00a      	b.n	801db08 <BSP_GUI_SaveDataInFlash+0x3ec>
 801daf2:	4b30      	ldr	r3, [pc, #192]	; (801dbb4 <BSP_GUI_SaveDataInFlash+0x498>)
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	029b      	lsls	r3, r3, #10
 801daf8:	085b      	lsrs	r3, r3, #1
 801dafa:	4a2f      	ldr	r2, [pc, #188]	; (801dbb8 <BSP_GUI_SaveDataInFlash+0x49c>)
 801dafc:	4013      	ands	r3, r2
 801dafe:	0adb      	lsrs	r3, r3, #11
 801db00:	031b      	lsls	r3, r3, #12
 801db02:	4a33      	ldr	r2, [pc, #204]	; (801dbd0 <BSP_GUI_SaveDataInFlash+0x4b4>)
 801db04:	4694      	mov	ip, r2
 801db06:	4463      	add	r3, ip
 801db08:	2227      	movs	r2, #39	; 0x27
 801db0a:	2138      	movs	r1, #56	; 0x38
 801db0c:	1852      	adds	r2, r2, r1
 801db0e:	19d4      	adds	r4, r2, r7
 801db10:	4930      	ldr	r1, [pc, #192]	; (801dbd4 <BSP_GUI_SaveDataInFlash+0x4b8>)
 801db12:	2208      	movs	r2, #8
 801db14:	0018      	movs	r0, r3
 801db16:	f000 f8d6 	bl	801dcc6 <SaveSettingsInFlash>
 801db1a:	0003      	movs	r3, r0
 801db1c:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_IdSettingsTypeDef));
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 801db1e:	2327      	movs	r3, #39	; 0x27
 801db20:	2238      	movs	r2, #56	; 0x38
 801db22:	189b      	adds	r3, r3, r2
 801db24:	19db      	adds	r3, r3, r7
 801db26:	781b      	ldrb	r3, [r3, #0]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d135      	bne.n	801db98 <BSP_GUI_SaveDataInFlash+0x47c>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS,
 801db2c:	4b25      	ldr	r3, [pc, #148]	; (801dbc4 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801db2e:	681a      	ldr	r2, [r3, #0]
 801db30:	23c0      	movs	r3, #192	; 0xc0
 801db32:	049b      	lsls	r3, r3, #18
 801db34:	4013      	ands	r3, r2
 801db36:	d00e      	beq.n	801db56 <BSP_GUI_SaveDataInFlash+0x43a>
 801db38:	4b22      	ldr	r3, [pc, #136]	; (801dbc4 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801db3a:	681a      	ldr	r2, [r3, #0]
 801db3c:	23c0      	movs	r3, #192	; 0xc0
 801db3e:	049b      	lsls	r3, r3, #18
 801db40:	401a      	ands	r2, r3
 801db42:	2380      	movs	r3, #128	; 0x80
 801db44:	045b      	lsls	r3, r3, #17
 801db46:	429a      	cmp	r2, r3
 801db48:	d110      	bne.n	801db6c <BSP_GUI_SaveDataInFlash+0x450>
 801db4a:	4b1f      	ldr	r3, [pc, #124]	; (801dbc8 <BSP_GUI_SaveDataInFlash+0x4ac>)
 801db4c:	681a      	ldr	r2, [r3, #0]
 801db4e:	2380      	movs	r3, #128	; 0x80
 801db50:	039b      	lsls	r3, r3, #14
 801db52:	4013      	ands	r3, r2
 801db54:	d10a      	bne.n	801db6c <BSP_GUI_SaveDataInFlash+0x450>
 801db56:	4b17      	ldr	r3, [pc, #92]	; (801dbb4 <BSP_GUI_SaveDataInFlash+0x498>)
 801db58:	681b      	ldr	r3, [r3, #0]
 801db5a:	029b      	lsls	r3, r3, #10
 801db5c:	4a1b      	ldr	r2, [pc, #108]	; (801dbcc <BSP_GUI_SaveDataInFlash+0x4b0>)
 801db5e:	4013      	ands	r3, r2
 801db60:	0adb      	lsrs	r3, r3, #11
 801db62:	031b      	lsls	r3, r3, #12
 801db64:	4a1c      	ldr	r2, [pc, #112]	; (801dbd8 <BSP_GUI_SaveDataInFlash+0x4bc>)
 801db66:	4694      	mov	ip, r2
 801db68:	4463      	add	r3, ip
 801db6a:	e00a      	b.n	801db82 <BSP_GUI_SaveDataInFlash+0x466>
 801db6c:	4b11      	ldr	r3, [pc, #68]	; (801dbb4 <BSP_GUI_SaveDataInFlash+0x498>)
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	029b      	lsls	r3, r3, #10
 801db72:	085b      	lsrs	r3, r3, #1
 801db74:	4a10      	ldr	r2, [pc, #64]	; (801dbb8 <BSP_GUI_SaveDataInFlash+0x49c>)
 801db76:	4013      	ands	r3, r2
 801db78:	0adb      	lsrs	r3, r3, #11
 801db7a:	031b      	lsls	r3, r3, #12
 801db7c:	4a16      	ldr	r2, [pc, #88]	; (801dbd8 <BSP_GUI_SaveDataInFlash+0x4bc>)
 801db7e:	4694      	mov	ip, r2
 801db80:	4463      	add	r3, ip
 801db82:	2227      	movs	r2, #39	; 0x27
 801db84:	2138      	movs	r1, #56	; 0x38
 801db86:	1852      	adds	r2, r2, r1
 801db88:	19d4      	adds	r4, r2, r7
 801db8a:	4914      	ldr	r1, [pc, #80]	; (801dbdc <BSP_GUI_SaveDataInFlash+0x4c0>)
 801db8c:	2274      	movs	r2, #116	; 0x74
 801db8e:	0018      	movs	r0, r3
 801db90:	f000 f899 	bl	801dcc6 <SaveSettingsInFlash>
 801db94:	0003      	movs	r3, r0
 801db96:	7023      	strb	r3, [r4, #0]
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  (void) HAL_FLASH_Lock();
 801db98:	f7ed f990 	bl	800aebc <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 801db9c:	b662      	cpsie	i
}
 801db9e:	46c0      	nop			; (mov r8, r8)

  /* Enable interrupts */
  __enable_irq();

  return status;
 801dba0:	2327      	movs	r3, #39	; 0x27
 801dba2:	2238      	movs	r2, #56	; 0x38
 801dba4:	189b      	adds	r3, r3, r2
 801dba6:	19db      	adds	r3, r3, r7
 801dba8:	781b      	ldrb	r3, [r3, #0]
}
 801dbaa:	0018      	movs	r0, r3
 801dbac:	46bd      	mov	sp, r7
 801dbae:	b019      	add	sp, #100	; 0x64
 801dbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dbb2:	46c0      	nop			; (mov r8, r8)
 801dbb4:	1fff75e0 	.word	0x1fff75e0
 801dbb8:	0007fe00 	.word	0x0007fe00
 801dbbc:	07fff890 	.word	0x07fff890
 801dbc0:	200000e4 	.word	0x200000e4
 801dbc4:	1fff7500 	.word	0x1fff7500
 801dbc8:	40022020 	.word	0x40022020
 801dbcc:	000ffc00 	.word	0x000ffc00
 801dbd0:	07fff91c 	.word	0x07fff91c
 801dbd4:	200000f0 	.word	0x200000f0
 801dbd8:	07fff89c 	.word	0x07fff89c
 801dbdc:	200000f8 	.word	0x200000f8

0801dbe0 <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 801dbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbe2:	b08f      	sub	sp, #60	; 0x3c
 801dbe4:	af00      	add	r7, sp, #0
 801dbe6:	6178      	str	r0, [r7, #20]
 801dbe8:	6139      	str	r1, [r7, #16]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 801dbea:	231f      	movs	r3, #31
 801dbec:	2210      	movs	r2, #16
 801dbee:	189b      	adds	r3, r3, r2
 801dbf0:	19db      	adds	r3, r3, r7
 801dbf2:	2200      	movs	r2, #0
 801dbf4:	701a      	strb	r2, [r3, #0]

  index_flash = 0U;
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 801dbfa:	2300      	movs	r3, #0
 801dbfc:	637b      	str	r3, [r7, #52]	; 0x34
 801dbfe:	e04f      	b.n	801dca0 <SavePDOInFlash+0xc0>
  {
    value[0] = pListOfPDO[index];
 801dc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc02:	009b      	lsls	r3, r3, #2
 801dc04:	693a      	ldr	r2, [r7, #16]
 801dc06:	18d3      	adds	r3, r2, r3
 801dc08:	681a      	ldr	r2, [r3, #0]
 801dc0a:	2108      	movs	r1, #8
 801dc0c:	2010      	movs	r0, #16
 801dc0e:	180b      	adds	r3, r1, r0
 801dc10:	19db      	adds	r3, r3, r7
 801dc12:	601a      	str	r2, [r3, #0]
    index++;
 801dc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc16:	3301      	adds	r3, #1
 801dc18:	637b      	str	r3, [r7, #52]	; 0x34
    if (index < USBPD_MAX_NB_PDO)
 801dc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc1c:	2b06      	cmp	r3, #6
 801dc1e:	d808      	bhi.n	801dc32 <SavePDOInFlash+0x52>
    {
      value[1] = pListOfPDO[index];
 801dc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc22:	009b      	lsls	r3, r3, #2
 801dc24:	693a      	ldr	r2, [r7, #16]
 801dc26:	18d3      	adds	r3, r2, r3
 801dc28:	681a      	ldr	r2, [r3, #0]
 801dc2a:	180b      	adds	r3, r1, r0
 801dc2c:	19db      	adds	r3, r3, r7
 801dc2e:	605a      	str	r2, [r3, #4]
 801dc30:	e006      	b.n	801dc40 <SavePDOInFlash+0x60>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 801dc32:	2308      	movs	r3, #8
 801dc34:	2210      	movs	r2, #16
 801dc36:	189b      	adds	r3, r3, r2
 801dc38:	19db      	adds	r3, r3, r7
 801dc3a:	2201      	movs	r2, #1
 801dc3c:	4252      	negs	r2, r2
 801dc3e:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 801dc40:	2208      	movs	r2, #8
 801dc42:	2610      	movs	r6, #16
 801dc44:	1993      	adds	r3, r2, r6
 801dc46:	19db      	adds	r3, r3, r7
 801dc48:	681b      	ldr	r3, [r3, #0]
 801dc4a:	60bb      	str	r3, [r7, #8]
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	60fb      	str	r3, [r7, #12]
 801dc50:	1993      	adds	r3, r2, r6
 801dc52:	19db      	adds	r3, r3, r7
 801dc54:	685b      	ldr	r3, [r3, #4]
 801dc56:	603b      	str	r3, [r7, #0]
 801dc58:	2300      	movs	r3, #0
 801dc5a:	607b      	str	r3, [r7, #4]
 801dc5c:	683b      	ldr	r3, [r7, #0]
 801dc5e:	001d      	movs	r5, r3
 801dc60:	2300      	movs	r3, #0
 801dc62:	001c      	movs	r4, r3
 801dc64:	68b9      	ldr	r1, [r7, #8]
 801dc66:	68fa      	ldr	r2, [r7, #12]
 801dc68:	000b      	movs	r3, r1
 801dc6a:	4323      	orrs	r3, r4
 801dc6c:	623b      	str	r3, [r7, #32]
 801dc6e:	0013      	movs	r3, r2
 801dc70:	432b      	orrs	r3, r5
 801dc72:	627b      	str	r3, [r7, #36]	; 0x24

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 801dc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc76:	00da      	lsls	r2, r3, #3
 801dc78:	697b      	ldr	r3, [r7, #20]
 801dc7a:	18d1      	adds	r1, r2, r3
 801dc7c:	6a3a      	ldr	r2, [r7, #32]
 801dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc80:	2001      	movs	r0, #1
 801dc82:	f7ed f8a9 	bl	800add8 <HAL_FLASH_Program>
 801dc86:	1e03      	subs	r3, r0, #0
 801dc88:	d004      	beq.n	801dc94 <SavePDOInFlash+0xb4>
    {
      status = GUI_WRITE_ERROR;
 801dc8a:	231f      	movs	r3, #31
 801dc8c:	199b      	adds	r3, r3, r6
 801dc8e:	19db      	adds	r3, r3, r7
 801dc90:	2202      	movs	r2, #2
 801dc92:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1;
 801dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc96:	3301      	adds	r3, #1
 801dc98:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 801dc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc9c:	3301      	adds	r3, #1
 801dc9e:	637b      	str	r3, [r7, #52]	; 0x34
 801dca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dca2:	2b06      	cmp	r3, #6
 801dca4:	d806      	bhi.n	801dcb4 <SavePDOInFlash+0xd4>
 801dca6:	231f      	movs	r3, #31
 801dca8:	2210      	movs	r2, #16
 801dcaa:	189b      	adds	r3, r3, r2
 801dcac:	19db      	adds	r3, r3, r7
 801dcae:	781b      	ldrb	r3, [r3, #0]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d0a5      	beq.n	801dc00 <SavePDOInFlash+0x20>
  }
  return status;
 801dcb4:	231f      	movs	r3, #31
 801dcb6:	2210      	movs	r2, #16
 801dcb8:	189b      	adds	r3, r3, r2
 801dcba:	19db      	adds	r3, r3, r7
 801dcbc:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 801dcbe:	0018      	movs	r0, r3
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	b00f      	add	sp, #60	; 0x3c
 801dcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dcc6 <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 801dcc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcc8:	b091      	sub	sp, #68	; 0x44
 801dcca:	af00      	add	r7, sp, #0
 801dccc:	61f8      	str	r0, [r7, #28]
 801dcce:	61b9      	str	r1, [r7, #24]
 801dcd0:	617a      	str	r2, [r7, #20]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  uint32_t nb_u32   = ((Size) / 4U);
 801dcd2:	697b      	ldr	r3, [r7, #20]
 801dcd4:	089b      	lsrs	r3, r3, #2
 801dcd6:	633b      	str	r3, [r7, #48]	; 0x30
  GUI_StatusTypeDef status = GUI_OK;
 801dcd8:	2327      	movs	r3, #39	; 0x27
 801dcda:	2210      	movs	r2, #16
 801dcdc:	189b      	adds	r3, r3, r2
 801dcde:	19db      	adds	r3, r3, r7
 801dce0:	2200      	movs	r2, #0
 801dce2:	701a      	strb	r2, [r3, #0]

  /* Ensure nb of bytes to be writeent is 4-multiple */
  if (((Size) % 4U) != 0U)
 801dce4:	697b      	ldr	r3, [r7, #20]
 801dce6:	2203      	movs	r2, #3
 801dce8:	4013      	ands	r3, r2
 801dcea:	d001      	beq.n	801dcf0 <SaveSettingsInFlash+0x2a>
  {
    return (GUI_ERROR);
 801dcec:	2303      	movs	r3, #3
 801dcee:	e065      	b.n	801ddbc <SaveSettingsInFlash+0xf6>
  }

  /* Save Settings in the FLASH */
  index_flash = 0U;
 801dcf0:	2300      	movs	r3, #0
 801dcf2:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 801dcf4:	2300      	movs	r3, #0
 801dcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dcf8:	e050      	b.n	801dd9c <SaveSettingsInFlash+0xd6>
  {
    value[0] = pSettings[index];
 801dcfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcfc:	009b      	lsls	r3, r3, #2
 801dcfe:	69ba      	ldr	r2, [r7, #24]
 801dd00:	18d3      	adds	r3, r2, r3
 801dd02:	681a      	ldr	r2, [r3, #0]
 801dd04:	2110      	movs	r1, #16
 801dd06:	2010      	movs	r0, #16
 801dd08:	180b      	adds	r3, r1, r0
 801dd0a:	19db      	adds	r3, r3, r7
 801dd0c:	601a      	str	r2, [r3, #0]
    index++;
 801dd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd10:	3301      	adds	r3, #1
 801dd12:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (index < nb_u32)
 801dd14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd18:	429a      	cmp	r2, r3
 801dd1a:	d208      	bcs.n	801dd2e <SaveSettingsInFlash+0x68>
    {
      value[1] = pSettings[index];
 801dd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd1e:	009b      	lsls	r3, r3, #2
 801dd20:	69ba      	ldr	r2, [r7, #24]
 801dd22:	18d3      	adds	r3, r2, r3
 801dd24:	681a      	ldr	r2, [r3, #0]
 801dd26:	180b      	adds	r3, r1, r0
 801dd28:	19db      	adds	r3, r3, r7
 801dd2a:	605a      	str	r2, [r3, #4]
 801dd2c:	e006      	b.n	801dd3c <SaveSettingsInFlash+0x76>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 801dd2e:	2310      	movs	r3, #16
 801dd30:	2210      	movs	r2, #16
 801dd32:	189b      	adds	r3, r3, r2
 801dd34:	19db      	adds	r3, r3, r7
 801dd36:	2201      	movs	r2, #1
 801dd38:	4252      	negs	r2, r2
 801dd3a:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 801dd3c:	2210      	movs	r2, #16
 801dd3e:	2610      	movs	r6, #16
 801dd40:	1993      	adds	r3, r2, r6
 801dd42:	19db      	adds	r3, r3, r7
 801dd44:	681b      	ldr	r3, [r3, #0]
 801dd46:	60bb      	str	r3, [r7, #8]
 801dd48:	2300      	movs	r3, #0
 801dd4a:	60fb      	str	r3, [r7, #12]
 801dd4c:	1993      	adds	r3, r2, r6
 801dd4e:	19db      	adds	r3, r3, r7
 801dd50:	685b      	ldr	r3, [r3, #4]
 801dd52:	603b      	str	r3, [r7, #0]
 801dd54:	2300      	movs	r3, #0
 801dd56:	607b      	str	r3, [r7, #4]
 801dd58:	683b      	ldr	r3, [r7, #0]
 801dd5a:	001d      	movs	r5, r3
 801dd5c:	2300      	movs	r3, #0
 801dd5e:	001c      	movs	r4, r3
 801dd60:	68b9      	ldr	r1, [r7, #8]
 801dd62:	68fa      	ldr	r2, [r7, #12]
 801dd64:	000b      	movs	r3, r1
 801dd66:	4323      	orrs	r3, r4
 801dd68:	62bb      	str	r3, [r7, #40]	; 0x28
 801dd6a:	0013      	movs	r3, r2
 801dd6c:	432b      	orrs	r3, r5
 801dd6e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 801dd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd72:	00da      	lsls	r2, r3, #3
 801dd74:	69fb      	ldr	r3, [r7, #28]
 801dd76:	18d1      	adds	r1, r2, r3
 801dd78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd7c:	2001      	movs	r0, #1
 801dd7e:	f7ed f82b 	bl	800add8 <HAL_FLASH_Program>
 801dd82:	1e03      	subs	r3, r0, #0
 801dd84:	d004      	beq.n	801dd90 <SaveSettingsInFlash+0xca>
    {
      status = GUI_WRITE_ERROR;
 801dd86:	2327      	movs	r3, #39	; 0x27
 801dd88:	199b      	adds	r3, r3, r6
 801dd8a:	19db      	adds	r3, r3, r7
 801dd8c:	2202      	movs	r2, #2
 801dd8e:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1U;
 801dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd92:	3301      	adds	r3, #1
 801dd94:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 801dd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd98:	3301      	adds	r3, #1
 801dd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dd9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dda0:	429a      	cmp	r2, r3
 801dda2:	d206      	bcs.n	801ddb2 <SaveSettingsInFlash+0xec>
 801dda4:	2327      	movs	r3, #39	; 0x27
 801dda6:	2210      	movs	r2, #16
 801dda8:	189b      	adds	r3, r3, r2
 801ddaa:	19db      	adds	r3, r3, r7
 801ddac:	781b      	ldrb	r3, [r3, #0]
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d0a3      	beq.n	801dcfa <SaveSettingsInFlash+0x34>
  }
  return status;
 801ddb2:	2327      	movs	r3, #39	; 0x27
 801ddb4:	2210      	movs	r2, #16
 801ddb6:	189b      	adds	r3, r3, r2
 801ddb8:	19db      	adds	r3, r3, r7
 801ddba:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 801ddbc:	0018      	movs	r0, r3
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	b011      	add	sp, #68	; 0x44
 801ddc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ddc4 <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 801ddc4:	b580      	push	{r7, lr}
 801ddc6:	b086      	sub	sp, #24
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	6078      	str	r0, [r7, #4]
 801ddcc:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 801ddd2:	230f      	movs	r3, #15
 801ddd4:	18fb      	adds	r3, r7, r3
 801ddd6:	2203      	movs	r2, #3
 801ddd8:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 801ddda:	2300      	movs	r3, #0
 801dddc:	613b      	str	r3, [r7, #16]
 801ddde:	e00c      	b.n	801ddfa <LoadPDOFromFlash+0x36>
    {
      pListOfPDO[_index] = *((uint32_t *)_addr);
 801dde0:	697a      	ldr	r2, [r7, #20]
 801dde2:	693b      	ldr	r3, [r7, #16]
 801dde4:	009b      	lsls	r3, r3, #2
 801dde6:	6839      	ldr	r1, [r7, #0]
 801dde8:	18cb      	adds	r3, r1, r3
 801ddea:	6812      	ldr	r2, [r2, #0]
 801ddec:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4U;
 801ddee:	697b      	ldr	r3, [r7, #20]
 801ddf0:	3304      	adds	r3, #4
 801ddf2:	617b      	str	r3, [r7, #20]
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 801ddf4:	693b      	ldr	r3, [r7, #16]
 801ddf6:	3301      	adds	r3, #1
 801ddf8:	613b      	str	r3, [r7, #16]
 801ddfa:	693b      	ldr	r3, [r7, #16]
 801ddfc:	2b06      	cmp	r3, #6
 801ddfe:	d9ef      	bls.n	801dde0 <LoadPDOFromFlash+0x1c>
    }
    _status = GUI_OK;
 801de00:	210f      	movs	r1, #15
 801de02:	187b      	adds	r3, r7, r1
 801de04:	2200      	movs	r2, #0
 801de06:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 801de08:	187b      	adds	r3, r7, r1
 801de0a:	781b      	ldrb	r3, [r3, #0]
}
 801de0c:	0018      	movs	r0, r3
 801de0e:	46bd      	mov	sp, r7
 801de10:	b006      	add	sp, #24
 801de12:	bd80      	pop	{r7, pc}

0801de14 <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 801de14:	b590      	push	{r4, r7, lr}
 801de16:	b087      	sub	sp, #28
 801de18:	af00      	add	r7, sp, #0
 801de1a:	60f8      	str	r0, [r7, #12]
 801de1c:	60b9      	str	r1, [r7, #8]
 801de1e:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 801de24:	2413      	movs	r4, #19
 801de26:	193b      	adds	r3, r7, r4
 801de28:	2203      	movs	r2, #3
 801de2a:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    (void) memcpy(pSettings, ((uint32_t *)_addr), Size);
 801de2c:	6979      	ldr	r1, [r7, #20]
 801de2e:	687a      	ldr	r2, [r7, #4]
 801de30:	68bb      	ldr	r3, [r7, #8]
 801de32:	0018      	movs	r0, r3
 801de34:	f004 fce8 	bl	8022808 <memcpy>
    _status = GUI_OK;
 801de38:	193b      	adds	r3, r7, r4
 801de3a:	2200      	movs	r2, #0
 801de3c:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 801de3e:	193b      	adds	r3, r7, r4
 801de40:	781b      	ldrb	r3, [r3, #0]
}
 801de42:	0018      	movs	r0, r3
 801de44:	46bd      	mov	sp, r7
 801de46:	b007      	add	sp, #28
 801de48:	bd90      	pop	{r4, r7, pc}

0801de4a <TLV_init_encode>:
  * @param    Ptr          A pointer to the value. This function does not allocate memory,
  *                        it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 801de4a:	b580      	push	{r7, lr}
 801de4c:	b084      	sub	sp, #16
 801de4e:	af00      	add	r7, sp, #0
 801de50:	60f8      	str	r0, [r7, #12]
 801de52:	0008      	movs	r0, r1
 801de54:	0011      	movs	r1, r2
 801de56:	607b      	str	r3, [r7, #4]
 801de58:	230b      	movs	r3, #11
 801de5a:	18fb      	adds	r3, r7, r3
 801de5c:	1c02      	adds	r2, r0, #0
 801de5e:	701a      	strb	r2, [r3, #0]
 801de60:	2308      	movs	r3, #8
 801de62:	18fb      	adds	r3, r7, r3
 801de64:	1c0a      	adds	r2, r1, #0
 801de66:	801a      	strh	r2, [r3, #0]
  if (Ptr == NULL)
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d101      	bne.n	801de72 <TLV_init_encode+0x28>
  {
    return 0xFF;  /* Buffer is NULL*/
 801de6e:	23ff      	movs	r3, #255	; 0xff
 801de70:	e04a      	b.n	801df08 <TLV_init_encode+0xbe>
  }
  if (SizeMax < 11U)
 801de72:	2308      	movs	r3, #8
 801de74:	18fb      	adds	r3, r7, r3
 801de76:	881b      	ldrh	r3, [r3, #0]
 801de78:	2b0a      	cmp	r3, #10
 801de7a:	d801      	bhi.n	801de80 <TLV_init_encode+0x36>
  {
    return 0xFF;  /* Because of his small max size, the buffer can't even receive one empty TLV*/
 801de7c:	23ff      	movs	r3, #255	; 0xff
 801de7e:	e043      	b.n	801df08 <TLV_init_encode+0xbe>
  }

  ToSendTLV->data = Ptr;
 801de80:	68fb      	ldr	r3, [r7, #12]
 801de82:	687a      	ldr	r2, [r7, #4]
 801de84:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 801de86:	68fb      	ldr	r3, [r7, #12]
 801de88:	2208      	movs	r2, #8
 801de8a:	18ba      	adds	r2, r7, r2
 801de8c:	8812      	ldrh	r2, [r2, #0]
 801de8e:	809a      	strh	r2, [r3, #4]

  ToSendTLV->data[0] = TLV_SOF;
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	22fd      	movs	r2, #253	; 0xfd
 801de96:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[1] = TLV_SOF;
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	3301      	adds	r3, #1
 801de9e:	22fd      	movs	r2, #253	; 0xfd
 801dea0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[2] = TLV_SOF;
 801dea2:	68fb      	ldr	r3, [r7, #12]
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	3302      	adds	r3, #2
 801dea8:	22fd      	movs	r2, #253	; 0xfd
 801deaa:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	681b      	ldr	r3, [r3, #0]
 801deb0:	3303      	adds	r3, #3
 801deb2:	22fd      	movs	r2, #253	; 0xfd
 801deb4:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[4] = Tag;              /* Tag*/
 801deb6:	68fb      	ldr	r3, [r7, #12]
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	3304      	adds	r3, #4
 801debc:	220b      	movs	r2, #11
 801debe:	18ba      	adds	r2, r7, r2
 801dec0:	7812      	ldrb	r2, [r2, #0]
 801dec2:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[5] = 0;
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	3305      	adds	r3, #5
 801deca:	2200      	movs	r2, #0
 801decc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = 0;                /* Size*/
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	3306      	adds	r3, #6
 801ded4:	2200      	movs	r2, #0
 801ded6:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[7] = TLV_EOF;
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	3307      	adds	r3, #7
 801dede:	22a5      	movs	r2, #165	; 0xa5
 801dee0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[8] = TLV_EOF;
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	3308      	adds	r3, #8
 801dee8:	22a5      	movs	r2, #165	; 0xa5
 801deea:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[9] = TLV_EOF;
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	3309      	adds	r3, #9
 801def2:	22a5      	movs	r2, #165	; 0xa5
 801def4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 801def6:	68fb      	ldr	r3, [r7, #12]
 801def8:	681b      	ldr	r3, [r3, #0]
 801defa:	330a      	adds	r3, #10
 801defc:	22a5      	movs	r2, #165	; 0xa5
 801defe:	701a      	strb	r2, [r3, #0]

  ToSendTLV->EOFposition = 7;
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	2207      	movs	r2, #7
 801df04:	80da      	strh	r2, [r3, #6]

  return 0;
 801df06:	2300      	movs	r3, #0
}
 801df08:	0018      	movs	r0, r3
 801df0a:	46bd      	mov	sp, r7
 801df0c:	b004      	add	sp, #16
 801df0e:	bd80      	pop	{r7, pc}

0801df10 <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 801df10:	b580      	push	{r7, lr}
 801df12:	b086      	sub	sp, #24
 801df14:	af00      	add	r7, sp, #0
 801df16:	60f8      	str	r0, [r7, #12]
 801df18:	0008      	movs	r0, r1
 801df1a:	0011      	movs	r1, r2
 801df1c:	607b      	str	r3, [r7, #4]
 801df1e:	230b      	movs	r3, #11
 801df20:	18fb      	adds	r3, r7, r3
 801df22:	1c02      	adds	r2, r0, #0
 801df24:	701a      	strb	r2, [r3, #0]
 801df26:	2308      	movs	r3, #8
 801df28:	18fb      	adds	r3, r7, r3
 801df2a:	1c0a      	adds	r2, r1, #0
 801df2c:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	68fa      	ldr	r2, [r7, #12]
 801df34:	88d2      	ldrh	r2, [r2, #6]
 801df36:	189b      	adds	r3, r3, r2
 801df38:	781b      	ldrb	r3, [r3, #0]
 801df3a:	2ba5      	cmp	r3, #165	; 0xa5
 801df3c:	d001      	beq.n	801df42 <TLV_add+0x32>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 801df3e:	4b5a      	ldr	r3, [pc, #360]	; (801e0a8 <TLV_add+0x198>)
 801df40:	e0ae      	b.n	801e0a0 <TLV_add+0x190>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	88db      	ldrh	r3, [r3, #6]
 801df46:	001a      	movs	r2, r3
 801df48:	2308      	movs	r3, #8
 801df4a:	18fb      	adds	r3, r7, r3
 801df4c:	881b      	ldrh	r3, [r3, #0]
 801df4e:	18d3      	adds	r3, r2, r3
 801df50:	3307      	adds	r3, #7
 801df52:	68fa      	ldr	r2, [r7, #12]
 801df54:	8892      	ldrh	r2, [r2, #4]
 801df56:	4293      	cmp	r3, r2
 801df58:	d901      	bls.n	801df5e <TLV_add+0x4e>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 801df5a:	4b53      	ldr	r3, [pc, #332]	; (801e0a8 <TLV_add+0x198>)
 801df5c:	e0a0      	b.n	801e0a0 <TLV_add+0x190>
  }
  if (ToSendTLV->data == NULL)
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	2b00      	cmp	r3, #0
 801df64:	d101      	bne.n	801df6a <TLV_add+0x5a>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 801df66:	4b50      	ldr	r3, [pc, #320]	; (801e0a8 <TLV_add+0x198>)
 801df68:	e09a      	b.n	801e0a0 <TLV_add+0x190>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	88db      	ldrh	r3, [r3, #6]
 801df6e:	4a4e      	ldr	r2, [pc, #312]	; (801e0a8 <TLV_add+0x198>)
 801df70:	4293      	cmp	r3, r2
 801df72:	d101      	bne.n	801df78 <TLV_add+0x68>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 801df74:	4b4c      	ldr	r3, [pc, #304]	; (801e0a8 <TLV_add+0x198>)
 801df76:	e093      	b.n	801e0a0 <TLV_add+0x190>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 801df78:	68fb      	ldr	r3, [r7, #12]
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	68fa      	ldr	r2, [r7, #12]
 801df7e:	88d2      	ldrh	r2, [r2, #6]
 801df80:	189b      	adds	r3, r3, r2
 801df82:	220b      	movs	r2, #11
 801df84:	18ba      	adds	r2, r7, r2
 801df86:	7812      	ldrb	r2, [r2, #0]
 801df88:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	88db      	ldrh	r3, [r3, #6]
 801df8e:	3301      	adds	r3, #1
 801df90:	b29a      	uxth	r2, r3
 801df92:	68fb      	ldr	r3, [r7, #12]
 801df94:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 801df96:	68fb      	ldr	r3, [r7, #12]
 801df98:	88da      	ldrh	r2, [r3, #6]
 801df9a:	68fb      	ldr	r3, [r7, #12]
 801df9c:	811a      	strh	r2, [r3, #8]

  ToSendTLV->data[ToSendTLV->EOFposition] = (uint8_t)((Size >> 8) & 0x00FFU);  /* Size*/
 801df9e:	2008      	movs	r0, #8
 801dfa0:	183b      	adds	r3, r7, r0
 801dfa2:	881b      	ldrh	r3, [r3, #0]
 801dfa4:	0a1b      	lsrs	r3, r3, #8
 801dfa6:	b299      	uxth	r1, r3
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	68fa      	ldr	r2, [r7, #12]
 801dfae:	88d2      	ldrh	r2, [r2, #6]
 801dfb0:	189b      	adds	r3, r3, r2
 801dfb2:	b2ca      	uxtb	r2, r1
 801dfb4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = (uint8_t)((Size) & 0x00FFU);
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	681a      	ldr	r2, [r3, #0]
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	88db      	ldrh	r3, [r3, #6]
 801dfbe:	3301      	adds	r3, #1
 801dfc0:	18d3      	adds	r3, r2, r3
 801dfc2:	183a      	adds	r2, r7, r0
 801dfc4:	8812      	ldrh	r2, [r2, #0]
 801dfc6:	b2d2      	uxtb	r2, r2
 801dfc8:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2U;
 801dfca:	68fb      	ldr	r3, [r7, #12]
 801dfcc:	88db      	ldrh	r3, [r3, #6]
 801dfce:	3302      	adds	r3, #2
 801dfd0:	b29a      	uxth	r2, r3
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	80da      	strh	r2, [r3, #6]

  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	617b      	str	r3, [r7, #20]
 801dfda:	e012      	b.n	801e002 <TLV_add+0xf2>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 801dfdc:	687a      	ldr	r2, [r7, #4]
 801dfde:	697b      	ldr	r3, [r7, #20]
 801dfe0:	18d2      	adds	r2, r2, r3
 801dfe2:	68fb      	ldr	r3, [r7, #12]
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	68f9      	ldr	r1, [r7, #12]
 801dfe8:	88c9      	ldrh	r1, [r1, #6]
 801dfea:	185b      	adds	r3, r3, r1
 801dfec:	7812      	ldrb	r2, [r2, #0]
 801dfee:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	88db      	ldrh	r3, [r3, #6]
 801dff4:	3301      	adds	r3, #1
 801dff6:	b29a      	uxth	r2, r3
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 801dffc:	697b      	ldr	r3, [r7, #20]
 801dffe:	3301      	adds	r3, #1
 801e000:	617b      	str	r3, [r7, #20]
 801e002:	2108      	movs	r1, #8
 801e004:	187b      	adds	r3, r7, r1
 801e006:	881b      	ldrh	r3, [r3, #0]
 801e008:	697a      	ldr	r2, [r7, #20]
 801e00a:	429a      	cmp	r2, r3
 801e00c:	d3e6      	bcc.n	801dfdc <TLV_add+0xcc>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 801e00e:	68fb      	ldr	r3, [r7, #12]
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	68fa      	ldr	r2, [r7, #12]
 801e014:	88d2      	ldrh	r2, [r2, #6]
 801e016:	189b      	adds	r3, r3, r2
 801e018:	22a5      	movs	r2, #165	; 0xa5
 801e01a:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	681a      	ldr	r2, [r3, #0]
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	88db      	ldrh	r3, [r3, #6]
 801e024:	3301      	adds	r3, #1
 801e026:	18d3      	adds	r3, r2, r3
 801e028:	22a5      	movs	r2, #165	; 0xa5
 801e02a:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	681a      	ldr	r2, [r3, #0]
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	88db      	ldrh	r3, [r3, #6]
 801e034:	3302      	adds	r3, #2
 801e036:	18d3      	adds	r3, r2, r3
 801e038:	22a5      	movs	r2, #165	; 0xa5
 801e03a:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                  /* EOF*/
 801e03c:	68fb      	ldr	r3, [r7, #12]
 801e03e:	681a      	ldr	r2, [r3, #0]
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	88db      	ldrh	r3, [r3, #6]
 801e044:	3303      	adds	r3, #3
 801e046:	18d3      	adds	r3, r2, r3
 801e048:	22a5      	movs	r2, #165	; 0xa5
 801e04a:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + 3U + Size;
 801e04c:	68fb      	ldr	r3, [r7, #12]
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	3305      	adds	r3, #5
 801e052:	781b      	ldrb	r3, [r3, #0]
 801e054:	b29b      	uxth	r3, r3
 801e056:	021b      	lsls	r3, r3, #8
 801e058:	b29a      	uxth	r2, r3
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	3306      	adds	r3, #6
 801e060:	781b      	ldrb	r3, [r3, #0]
 801e062:	b29b      	uxth	r3, r3
 801e064:	18d3      	adds	r3, r2, r3
 801e066:	b29a      	uxth	r2, r3
 801e068:	187b      	adds	r3, r7, r1
 801e06a:	881b      	ldrh	r3, [r3, #0]
 801e06c:	18d3      	adds	r3, r2, r3
 801e06e:	b29a      	uxth	r2, r3
 801e070:	2012      	movs	r0, #18
 801e072:	183b      	adds	r3, r7, r0
 801e074:	3203      	adds	r2, #3
 801e076:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 801e078:	183b      	adds	r3, r7, r0
 801e07a:	881b      	ldrh	r3, [r3, #0]
 801e07c:	0a1b      	lsrs	r3, r3, #8
 801e07e:	b29a      	uxth	r2, r3
 801e080:	68fb      	ldr	r3, [r7, #12]
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	3305      	adds	r3, #5
 801e086:	b2d2      	uxtb	r2, r2
 801e088:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)total_lgth;
 801e08a:	68fb      	ldr	r3, [r7, #12]
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	3306      	adds	r3, #6
 801e090:	183a      	adds	r2, r7, r0
 801e092:	8812      	ldrh	r2, [r2, #0]
 801e094:	b2d2      	uxtb	r2, r2
 801e096:	701a      	strb	r2, [r3, #0]

  return (3U + Size);
 801e098:	187b      	adds	r3, r7, r1
 801e09a:	881b      	ldrh	r3, [r3, #0]
 801e09c:	3303      	adds	r3, #3
 801e09e:	b29b      	uxth	r3, r3
}
 801e0a0:	0018      	movs	r0, r3
 801e0a2:	46bd      	mov	sp, r7
 801e0a4:	b006      	add	sp, #24
 801e0a6:	bd80      	pop	{r7, pc}
 801e0a8:	0000ffff 	.word	0x0000ffff

0801e0ac <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data_t *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 801e0ac:	b580      	push	{r7, lr}
 801e0ae:	b086      	sub	sp, #24
 801e0b0:	af00      	add	r7, sp, #0
 801e0b2:	60f8      	str	r0, [r7, #12]
 801e0b4:	60b9      	str	r1, [r7, #8]
 801e0b6:	1dbb      	adds	r3, r7, #6
 801e0b8:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	68fa      	ldr	r2, [r7, #12]
 801e0c0:	88d2      	ldrh	r2, [r2, #6]
 801e0c2:	189b      	adds	r3, r3, r2
 801e0c4:	781b      	ldrb	r3, [r3, #0]
 801e0c6:	2ba5      	cmp	r3, #165	; 0xa5
 801e0c8:	d001      	beq.n	801e0ce <TLV_addValue+0x22>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 801e0ca:	4b41      	ldr	r3, [pc, #260]	; (801e1d0 <TLV_addValue+0x124>)
 801e0cc:	e07c      	b.n	801e1c8 <TLV_addValue+0x11c>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	88db      	ldrh	r3, [r3, #6]
 801e0d2:	001a      	movs	r2, r3
 801e0d4:	1dbb      	adds	r3, r7, #6
 801e0d6:	881b      	ldrh	r3, [r3, #0]
 801e0d8:	18d3      	adds	r3, r2, r3
 801e0da:	3307      	adds	r3, #7
 801e0dc:	68fa      	ldr	r2, [r7, #12]
 801e0de:	8892      	ldrh	r2, [r2, #4]
 801e0e0:	4293      	cmp	r3, r2
 801e0e2:	d901      	bls.n	801e0e8 <TLV_addValue+0x3c>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 801e0e4:	4b3a      	ldr	r3, [pc, #232]	; (801e1d0 <TLV_addValue+0x124>)
 801e0e6:	e06f      	b.n	801e1c8 <TLV_addValue+0x11c>
  }
  if (ToSendTLV->data == NULL)
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d101      	bne.n	801e0f4 <TLV_addValue+0x48>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 801e0f0:	4b37      	ldr	r3, [pc, #220]	; (801e1d0 <TLV_addValue+0x124>)
 801e0f2:	e069      	b.n	801e1c8 <TLV_addValue+0x11c>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	88db      	ldrh	r3, [r3, #6]
 801e0f8:	4a35      	ldr	r2, [pc, #212]	; (801e1d0 <TLV_addValue+0x124>)
 801e0fa:	4293      	cmp	r3, r2
 801e0fc:	d101      	bne.n	801e102 <TLV_addValue+0x56>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 801e0fe:	4b34      	ldr	r3, [pc, #208]	; (801e1d0 <TLV_addValue+0x124>)
 801e100:	e062      	b.n	801e1c8 <TLV_addValue+0x11c>
  }

  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 801e102:	2300      	movs	r3, #0
 801e104:	617b      	str	r3, [r7, #20]
 801e106:	e012      	b.n	801e12e <TLV_addValue+0x82>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 801e108:	68ba      	ldr	r2, [r7, #8]
 801e10a:	697b      	ldr	r3, [r7, #20]
 801e10c:	18d2      	adds	r2, r2, r3
 801e10e:	68fb      	ldr	r3, [r7, #12]
 801e110:	681b      	ldr	r3, [r3, #0]
 801e112:	68f9      	ldr	r1, [r7, #12]
 801e114:	88c9      	ldrh	r1, [r1, #6]
 801e116:	185b      	adds	r3, r3, r1
 801e118:	7812      	ldrb	r2, [r2, #0]
 801e11a:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 801e11c:	68fb      	ldr	r3, [r7, #12]
 801e11e:	88db      	ldrh	r3, [r3, #6]
 801e120:	3301      	adds	r3, #1
 801e122:	b29a      	uxth	r2, r3
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 801e128:	697b      	ldr	r3, [r7, #20]
 801e12a:	3301      	adds	r3, #1
 801e12c:	617b      	str	r3, [r7, #20]
 801e12e:	1dbb      	adds	r3, r7, #6
 801e130:	881b      	ldrh	r3, [r3, #0]
 801e132:	697a      	ldr	r2, [r7, #20]
 801e134:	429a      	cmp	r2, r3
 801e136:	d3e7      	bcc.n	801e108 <TLV_addValue+0x5c>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	68fa      	ldr	r2, [r7, #12]
 801e13e:	88d2      	ldrh	r2, [r2, #6]
 801e140:	189b      	adds	r3, r3, r2
 801e142:	22a5      	movs	r2, #165	; 0xa5
 801e144:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 801e146:	68fb      	ldr	r3, [r7, #12]
 801e148:	681a      	ldr	r2, [r3, #0]
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	88db      	ldrh	r3, [r3, #6]
 801e14e:	3301      	adds	r3, #1
 801e150:	18d3      	adds	r3, r2, r3
 801e152:	22a5      	movs	r2, #165	; 0xa5
 801e154:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 801e156:	68fb      	ldr	r3, [r7, #12]
 801e158:	681a      	ldr	r2, [r3, #0]
 801e15a:	68fb      	ldr	r3, [r7, #12]
 801e15c:	88db      	ldrh	r3, [r3, #6]
 801e15e:	3302      	adds	r3, #2
 801e160:	18d3      	adds	r3, r2, r3
 801e162:	22a5      	movs	r2, #165	; 0xa5
 801e164:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                   /* EOF*/
 801e166:	68fb      	ldr	r3, [r7, #12]
 801e168:	681a      	ldr	r2, [r3, #0]
 801e16a:	68fb      	ldr	r3, [r7, #12]
 801e16c:	88db      	ldrh	r3, [r3, #6]
 801e16e:	3303      	adds	r3, #3
 801e170:	18d3      	adds	r3, r2, r3
 801e172:	22a5      	movs	r2, #165	; 0xa5
 801e174:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + Size;
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	3305      	adds	r3, #5
 801e17c:	781b      	ldrb	r3, [r3, #0]
 801e17e:	b29b      	uxth	r3, r3
 801e180:	021b      	lsls	r3, r3, #8
 801e182:	b29a      	uxth	r2, r3
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	681b      	ldr	r3, [r3, #0]
 801e188:	3306      	adds	r3, #6
 801e18a:	781b      	ldrb	r3, [r3, #0]
 801e18c:	b29b      	uxth	r3, r3
 801e18e:	18d3      	adds	r3, r2, r3
 801e190:	b299      	uxth	r1, r3
 801e192:	2012      	movs	r0, #18
 801e194:	183b      	adds	r3, r7, r0
 801e196:	1dba      	adds	r2, r7, #6
 801e198:	8812      	ldrh	r2, [r2, #0]
 801e19a:	188a      	adds	r2, r1, r2
 801e19c:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 801e19e:	0001      	movs	r1, r0
 801e1a0:	187b      	adds	r3, r7, r1
 801e1a2:	881b      	ldrh	r3, [r3, #0]
 801e1a4:	0a1b      	lsrs	r3, r3, #8
 801e1a6:	b29a      	uxth	r2, r3
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	3305      	adds	r3, #5
 801e1ae:	b2d2      	uxtb	r2, r2
 801e1b0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)(total_lgth);
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	3306      	adds	r3, #6
 801e1b8:	187a      	adds	r2, r7, r1
 801e1ba:	8812      	ldrh	r2, [r2, #0]
 801e1bc:	b2d2      	uxtb	r2, r2
 801e1be:	701a      	strb	r2, [r3, #0]

  return 3U + Size;
 801e1c0:	1dbb      	adds	r3, r7, #6
 801e1c2:	881b      	ldrh	r3, [r3, #0]
 801e1c4:	3303      	adds	r3, #3
 801e1c6:	b29b      	uxth	r3, r3
}
 801e1c8:	0018      	movs	r0, r3
 801e1ca:	46bd      	mov	sp, r7
 801e1cc:	b006      	add	sp, #24
 801e1ce:	bd80      	pop	{r7, pc}
 801e1d0:	0000ffff 	.word	0x0000ffff

0801e1d4 <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data_t *ToSendTLV)
{
 801e1d4:	b580      	push	{r7, lr}
 801e1d6:	b082      	sub	sp, #8
 801e1d8:	af00      	add	r7, sp, #0
 801e1da:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	2200      	movs	r2, #0
 801e1e0:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	2201      	movs	r2, #1
 801e1e6:	4252      	negs	r2, r2
 801e1e8:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	2200      	movs	r2, #0
 801e1ee:	809a      	strh	r2, [r3, #4]
}
 801e1f0:	46c0      	nop			; (mov r8, r8)
 801e1f2:	46bd      	mov	sp, r7
 801e1f4:	b002      	add	sp, #8
 801e1f6:	bd80      	pop	{r7, pc}

0801e1f8 <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data_t that will be used.
  * @param    pReceivedString The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data_t *ToProcessTLV, uint8_t *pReceivedString)
{
 801e1f8:	b580      	push	{r7, lr}
 801e1fa:	b082      	sub	sp, #8
 801e1fc:	af00      	add	r7, sp, #0
 801e1fe:	6078      	str	r0, [r7, #4]
 801e200:	6039      	str	r1, [r7, #0]
  if (pReceivedString == NULL)
 801e202:	683b      	ldr	r3, [r7, #0]
 801e204:	2b00      	cmp	r3, #0
 801e206:	d101      	bne.n	801e20c <TLV_init_decode+0x14>
  {
    return 0xFF;  /* Received string is NULL*/
 801e208:	23ff      	movs	r3, #255	; 0xff
 801e20a:	e01d      	b.n	801e248 <TLV_init_decode+0x50>
  }
  if ((pReceivedString[0] != TLV_SOF)
 801e20c:	683b      	ldr	r3, [r7, #0]
 801e20e:	781b      	ldrb	r3, [r3, #0]
 801e210:	2bfd      	cmp	r3, #253	; 0xfd
 801e212:	d10e      	bne.n	801e232 <TLV_init_decode+0x3a>
      || (pReceivedString[1] != TLV_SOF)
 801e214:	683b      	ldr	r3, [r7, #0]
 801e216:	3301      	adds	r3, #1
 801e218:	781b      	ldrb	r3, [r3, #0]
 801e21a:	2bfd      	cmp	r3, #253	; 0xfd
 801e21c:	d109      	bne.n	801e232 <TLV_init_decode+0x3a>
      || (pReceivedString[2] != TLV_SOF)
 801e21e:	683b      	ldr	r3, [r7, #0]
 801e220:	3302      	adds	r3, #2
 801e222:	781b      	ldrb	r3, [r3, #0]
 801e224:	2bfd      	cmp	r3, #253	; 0xfd
 801e226:	d104      	bne.n	801e232 <TLV_init_decode+0x3a>
      || (pReceivedString[3] != TLV_SOF))
 801e228:	683b      	ldr	r3, [r7, #0]
 801e22a:	3303      	adds	r3, #3
 801e22c:	781b      	ldrb	r3, [r3, #0]
 801e22e:	2bfd      	cmp	r3, #253	; 0xfd
 801e230:	d001      	beq.n	801e236 <TLV_init_decode+0x3e>
  {
    return 0xFF;  /* Incorrect SOF*/
 801e232:	23ff      	movs	r3, #255	; 0xff
 801e234:	e008      	b.n	801e248 <TLV_init_decode+0x50>
  }

  ToProcessTLV->data = pReceivedString;
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	683a      	ldr	r2, [r7, #0]
 801e23a:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	2207      	movs	r2, #7
 801e240:	809a      	strh	r2, [r3, #4]

  return ((uint8_t)(ToProcessTLV->cursor));
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	889b      	ldrh	r3, [r3, #4]
 801e246:	b2db      	uxtb	r3, r3
}
 801e248:	0018      	movs	r0, r3
 801e24a:	46bd      	mov	sp, r7
 801e24c:	b002      	add	sp, #8
 801e24e:	bd80      	pop	{r7, pc}

0801e250 <TLV_get>:
  * @param    Value        A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after,
  *           1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data_t *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 801e250:	b580      	push	{r7, lr}
 801e252:	b084      	sub	sp, #16
 801e254:	af00      	add	r7, sp, #0
 801e256:	60f8      	str	r0, [r7, #12]
 801e258:	60b9      	str	r1, [r7, #8]
 801e25a:	607a      	str	r2, [r7, #4]
 801e25c:	603b      	str	r3, [r7, #0]
  if (ToProcessTLV->data == NULL)
 801e25e:	68fb      	ldr	r3, [r7, #12]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	2b00      	cmp	r3, #0
 801e264:	d101      	bne.n	801e26a <TLV_get+0x1a>
  {
    return 0xFF;  /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 801e266:	23ff      	movs	r3, #255	; 0xff
 801e268:	e048      	b.n	801e2fc <TLV_get+0xac>
  }
  if (ToProcessTLV->cursor == 0U)
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	889b      	ldrh	r3, [r3, #4]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d101      	bne.n	801e276 <TLV_get+0x26>
  {
    return 0xFF;  /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 801e272:	23ff      	movs	r3, #255	; 0xff
 801e274:	e042      	b.n	801e2fc <TLV_get+0xac>
  }
  if (ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF)
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	68fa      	ldr	r2, [r7, #12]
 801e27c:	8892      	ldrh	r2, [r2, #4]
 801e27e:	189b      	adds	r3, r3, r2
 801e280:	781b      	ldrb	r3, [r3, #0]
 801e282:	2ba5      	cmp	r3, #165	; 0xa5
 801e284:	d101      	bne.n	801e28a <TLV_get+0x3a>
  {
    return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 801e286:	23ff      	movs	r3, #255	; 0xff
 801e288:	e038      	b.n	801e2fc <TLV_get+0xac>
  }

  /* Tag*/
  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	68fa      	ldr	r2, [r7, #12]
 801e290:	8892      	ldrh	r2, [r2, #4]
 801e292:	189b      	adds	r3, r3, r2
 801e294:	781a      	ldrb	r2, [r3, #0]
 801e296:	68bb      	ldr	r3, [r7, #8]
 801e298:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 801e29a:	68fb      	ldr	r3, [r7, #12]
 801e29c:	889b      	ldrh	r3, [r3, #4]
 801e29e:	3301      	adds	r3, #1
 801e2a0:	b29a      	uxth	r2, r3
 801e2a2:	68fb      	ldr	r3, [r7, #12]
 801e2a4:	809a      	strh	r2, [r3, #4]
  /* Length*/
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	68fa      	ldr	r2, [r7, #12]
 801e2ac:	8892      	ldrh	r2, [r2, #4]
 801e2ae:	189b      	adds	r3, r3, r2
 801e2b0:	781b      	ldrb	r3, [r3, #0]
 801e2b2:	b29b      	uxth	r3, r3
 801e2b4:	021b      	lsls	r3, r3, #8
 801e2b6:	b29a      	uxth	r2, r3
            + (uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor + 1U]);
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	6819      	ldr	r1, [r3, #0]
 801e2bc:	68fb      	ldr	r3, [r7, #12]
 801e2be:	889b      	ldrh	r3, [r3, #4]
 801e2c0:	3301      	adds	r3, #1
 801e2c2:	18cb      	adds	r3, r1, r3
 801e2c4:	781b      	ldrb	r3, [r3, #0]
 801e2c6:	b29b      	uxth	r3, r3
 801e2c8:	18d3      	adds	r3, r2, r3
 801e2ca:	b29a      	uxth	r2, r3
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2U;
 801e2d0:	68fb      	ldr	r3, [r7, #12]
 801e2d2:	889b      	ldrh	r3, [r3, #4]
 801e2d4:	3302      	adds	r3, #2
 801e2d6:	b29a      	uxth	r2, r3
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	809a      	strh	r2, [r3, #4]
  /* Value*/
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];
 801e2dc:	68fb      	ldr	r3, [r7, #12]
 801e2de:	681b      	ldr	r3, [r3, #0]
 801e2e0:	68fa      	ldr	r2, [r7, #12]
 801e2e2:	8892      	ldrh	r2, [r2, #4]
 801e2e4:	189a      	adds	r2, r3, r2
 801e2e6:	683b      	ldr	r3, [r7, #0]
 801e2e8:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 801e2ea:	68fb      	ldr	r3, [r7, #12]
 801e2ec:	889a      	ldrh	r2, [r3, #4]
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	881b      	ldrh	r3, [r3, #0]
 801e2f2:	18d3      	adds	r3, r2, r3
 801e2f4:	b29a      	uxth	r2, r3
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	809a      	strh	r2, [r3, #4]

  return 0;
 801e2fa:	2300      	movs	r3, #0
}
 801e2fc:	0018      	movs	r0, r3
 801e2fe:	46bd      	mov	sp, r7
 801e300:	b004      	add	sp, #16
 801e302:	bd80      	pop	{r7, pc}

0801e304 <TLV_deinit_decode>:
  *           to restart decoding from the beginning). This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data_t *ToProcessTLV)
{
 801e304:	b580      	push	{r7, lr}
 801e306:	b082      	sub	sp, #8
 801e308:	af00      	add	r7, sp, #0
 801e30a:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	2200      	movs	r2, #0
 801e310:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	2200      	movs	r2, #0
 801e316:	809a      	strh	r2, [r3, #4]
}
 801e318:	46c0      	nop			; (mov r8, r8)
 801e31a:	46bd      	mov	sp, r7
 801e31c:	b002      	add	sp, #8
 801e31e:	bd80      	pop	{r7, pc}

0801e320 <TLV_get_string_length>:
  *           it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t *pString)
{
 801e320:	b580      	push	{r7, lr}
 801e322:	b084      	sub	sp, #16
 801e324:	af00      	add	r7, sp, #0
 801e326:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 801e328:	230f      	movs	r3, #15
 801e32a:	18fb      	adds	r3, r7, r3
 801e32c:	2200      	movs	r2, #0
 801e32e:	701a      	strb	r2, [r3, #0]

  while (pString[start] == TLV_SOF)
 801e330:	e005      	b.n	801e33e <TLV_get_string_length+0x1e>
  {
    start++;
 801e332:	210f      	movs	r1, #15
 801e334:	187b      	adds	r3, r7, r1
 801e336:	781a      	ldrb	r2, [r3, #0]
 801e338:	187b      	adds	r3, r7, r1
 801e33a:	3201      	adds	r2, #1
 801e33c:	701a      	strb	r2, [r3, #0]
  while (pString[start] == TLV_SOF)
 801e33e:	210f      	movs	r1, #15
 801e340:	187b      	adds	r3, r7, r1
 801e342:	781b      	ldrb	r3, [r3, #0]
 801e344:	687a      	ldr	r2, [r7, #4]
 801e346:	18d3      	adds	r3, r2, r3
 801e348:	781b      	ldrb	r3, [r3, #0]
 801e34a:	2bfd      	cmp	r3, #253	; 0xfd
 801e34c:	d0f1      	beq.n	801e332 <TLV_get_string_length+0x12>
  } /* start variable is now after the SOF if there is one.*/

  length = ((uint16_t)pString[start + 1U] << 8) | (uint16_t)pString[start + 2U];
 801e34e:	187b      	adds	r3, r7, r1
 801e350:	781b      	ldrb	r3, [r3, #0]
 801e352:	3301      	adds	r3, #1
 801e354:	687a      	ldr	r2, [r7, #4]
 801e356:	18d3      	adds	r3, r2, r3
 801e358:	781b      	ldrb	r3, [r3, #0]
 801e35a:	021b      	lsls	r3, r3, #8
 801e35c:	b21a      	sxth	r2, r3
 801e35e:	187b      	adds	r3, r7, r1
 801e360:	781b      	ldrb	r3, [r3, #0]
 801e362:	3302      	adds	r3, #2
 801e364:	6879      	ldr	r1, [r7, #4]
 801e366:	18cb      	adds	r3, r1, r3
 801e368:	781b      	ldrb	r3, [r3, #0]
 801e36a:	b21b      	sxth	r3, r3
 801e36c:	4313      	orrs	r3, r2
 801e36e:	b21a      	sxth	r2, r3
 801e370:	210c      	movs	r1, #12
 801e372:	187b      	adds	r3, r7, r1
 801e374:	801a      	strh	r2, [r3, #0]
  length += 3U;
 801e376:	187b      	adds	r3, r7, r1
 801e378:	187a      	adds	r2, r7, r1
 801e37a:	8812      	ldrh	r2, [r2, #0]
 801e37c:	3203      	adds	r2, #3
 801e37e:	801a      	strh	r2, [r3, #0]

  return length;
 801e380:	187b      	adds	r3, r7, r1
 801e382:	881b      	ldrh	r3, [r3, #0]
}
 801e384:	0018      	movs	r0, r3
 801e386:	46bd      	mov	sp, r7
 801e388:	b004      	add	sp, #16
 801e38a:	bd80      	pop	{r7, pc}

0801e38c <GUI_Init>:
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t *(*CB_HWBoardVersion)(void), const uint8_t *(*CB_HWPDType)(void),
                               uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b086      	sub	sp, #24
 801e390:	af00      	add	r7, sp, #0
 801e392:	60f8      	str	r0, [r7, #12]
 801e394:	60b9      	str	r1, [r7, #8]
 801e396:	607a      	str	r2, [r7, #4]
 801e398:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 801e39a:	2317      	movs	r3, #23
 801e39c:	18fb      	adds	r3, r7, r3
 801e39e:	2201      	movs	r2, #1
 801e3a0:	701a      	strb	r2, [r3, #0]
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 801e3a2:	f7fe ff95 	bl	801d2d0 <BSP_GUI_LoadDataFromFlash>
 801e3a6:	0003      	movs	r3, r0
 801e3a8:	1e5a      	subs	r2, r3, #1
 801e3aa:	4193      	sbcs	r3, r2
 801e3ac:	b2db      	uxtb	r3, r3
 801e3ae:	001a      	movs	r2, r3
 801e3b0:	4b3f      	ldr	r3, [pc, #252]	; (801e4b0 <GUI_Init+0x124>)
 801e3b2:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 801e3b4:	4b3f      	ldr	r3, [pc, #252]	; (801e4b4 <GUI_Init+0x128>)
 801e3b6:	799b      	ldrb	r3, [r3, #6]
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	d003      	beq.n	801e3c4 <GUI_Init+0x38>
 801e3bc:	4b3d      	ldr	r3, [pc, #244]	; (801e4b4 <GUI_Init+0x128>)
 801e3be:	79db      	ldrb	r3, [r3, #7]
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	d115      	bne.n	801e3f0 <GUI_Init+0x64>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 801e3c4:	4b3c      	ldr	r3, [pc, #240]	; (801e4b8 <GUI_Init+0x12c>)
 801e3c6:	226b      	movs	r2, #107	; 0x6b
 801e3c8:	189b      	adds	r3, r3, r2
 801e3ca:	785a      	ldrb	r2, [r3, #1]
 801e3cc:	2101      	movs	r1, #1
 801e3ce:	400a      	ands	r2, r1
 801e3d0:	1c11      	adds	r1, r2, #0
 801e3d2:	2260      	movs	r2, #96	; 0x60
 801e3d4:	4252      	negs	r2, r2
 801e3d6:	430a      	orrs	r2, r1
 801e3d8:	705a      	strb	r2, [r3, #1]
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 801e3da:	4b37      	ldr	r3, [pc, #220]	; (801e4b8 <GUI_Init+0x12c>)
 801e3dc:	226b      	movs	r2, #107	; 0x6b
 801e3de:	189b      	adds	r3, r3, r2
 801e3e0:	789a      	ldrb	r2, [r3, #2]
 801e3e2:	217f      	movs	r1, #127	; 0x7f
 801e3e4:	438a      	bics	r2, r1
 801e3e6:	1c11      	adds	r1, r2, #0
 801e3e8:	2232      	movs	r2, #50	; 0x32
 801e3ea:	430a      	orrs	r2, r1
 801e3ec:	709a      	strb	r2, [r3, #2]
 801e3ee:	e040      	b.n	801e472 <GUI_Init+0xe6>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801e3f0:	4b30      	ldr	r3, [pc, #192]	; (801e4b4 <GUI_Init+0x128>)
 801e3f2:	79db      	ldrb	r3, [r3, #7]
 801e3f4:	001a      	movs	r2, r3
 801e3f6:	2364      	movs	r3, #100	; 0x64
 801e3f8:	435a      	muls	r2, r3
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 801e3fa:	4b2e      	ldr	r3, [pc, #184]	; (801e4b4 <GUI_Init+0x128>)
 801e3fc:	79db      	ldrb	r3, [r3, #7]
 801e3fe:	0019      	movs	r1, r3
                                                     DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 801e400:	4b2c      	ldr	r3, [pc, #176]	; (801e4b4 <GUI_Init+0x128>)
 801e402:	799b      	ldrb	r3, [r3, #6]
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 801e404:	18cb      	adds	r3, r1, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801e406:	0019      	movs	r1, r3
 801e408:	0010      	movs	r0, r2
 801e40a:	f7e7 fef1 	bl	80061f0 <__udivsi3>
 801e40e:	0003      	movs	r3, r0
 801e410:	1c1a      	adds	r2, r3, #0
 801e412:	237f      	movs	r3, #127	; 0x7f
 801e414:	4013      	ands	r3, r2
 801e416:	b2da      	uxtb	r2, r3
 801e418:	4b27      	ldr	r3, [pc, #156]	; (801e4b8 <GUI_Init+0x12c>)
 801e41a:	216b      	movs	r1, #107	; 0x6b
 801e41c:	185b      	adds	r3, r3, r1
 801e41e:	217f      	movs	r1, #127	; 0x7f
 801e420:	400a      	ands	r2, r1
 801e422:	0010      	movs	r0, r2
 801e424:	789a      	ldrb	r2, [r3, #2]
 801e426:	217f      	movs	r1, #127	; 0x7f
 801e428:	438a      	bics	r2, r1
 801e42a:	1c11      	adds	r1, r2, #0
 801e42c:	1c02      	adds	r2, r0, #0
 801e42e:	430a      	orrs	r2, r1
 801e430:	709a      	strb	r2, [r3, #2]
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801e432:	4b20      	ldr	r3, [pc, #128]	; (801e4b4 <GUI_Init+0x128>)
 801e434:	79db      	ldrb	r3, [r3, #7]
 801e436:	001a      	movs	r2, r3
 801e438:	2364      	movs	r3, #100	; 0x64
 801e43a:	435a      	muls	r2, r3
                                               DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 801e43c:	4b1e      	ldr	r3, [pc, #120]	; (801e4b8 <GUI_Init+0x12c>)
 801e43e:	216d      	movs	r1, #109	; 0x6d
 801e440:	5c5b      	ldrb	r3, [r3, r1]
 801e442:	065b      	lsls	r3, r3, #25
 801e444:	0e5b      	lsrs	r3, r3, #25
 801e446:	b2db      	uxtb	r3, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801e448:	0019      	movs	r1, r3
 801e44a:	0010      	movs	r0, r2
 801e44c:	f7e7 fed0 	bl	80061f0 <__udivsi3>
 801e450:	0003      	movs	r3, r0
 801e452:	1c1a      	adds	r2, r3, #0
 801e454:	237f      	movs	r3, #127	; 0x7f
 801e456:	4013      	ands	r3, r2
 801e458:	b2d9      	uxtb	r1, r3
 801e45a:	4b17      	ldr	r3, [pc, #92]	; (801e4b8 <GUI_Init+0x12c>)
 801e45c:	226b      	movs	r2, #107	; 0x6b
 801e45e:	189b      	adds	r3, r3, r2
 801e460:	1c0a      	adds	r2, r1, #0
 801e462:	1890      	adds	r0, r2, r2
 801e464:	785a      	ldrb	r2, [r3, #1]
 801e466:	2101      	movs	r1, #1
 801e468:	400a      	ands	r2, r1
 801e46a:	1c11      	adds	r1, r2, #0
 801e46c:	1c02      	adds	r2, r0, #0
 801e46e:	430a      	orrs	r2, r1
 801e470:	705a      	strb	r2, [r3, #1]
                                               DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 801e472:	4b12      	ldr	r3, [pc, #72]	; (801e4bc <GUI_Init+0x130>)
 801e474:	68fa      	ldr	r2, [r7, #12]
 801e476:	601a      	str	r2, [r3, #0]
  pCB_HWPDType        = CB_HWPDType;
 801e478:	4b11      	ldr	r3, [pc, #68]	; (801e4c0 <GUI_Init+0x134>)
 801e47a:	68ba      	ldr	r2, [r7, #8]
 801e47c:	601a      	str	r2, [r3, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 801e47e:	4b11      	ldr	r3, [pc, #68]	; (801e4c4 <GUI_Init+0x138>)
 801e480:	687a      	ldr	r2, [r7, #4]
 801e482:	601a      	str	r2, [r3, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 801e484:	4b10      	ldr	r3, [pc, #64]	; (801e4c8 <GUI_Init+0x13c>)
 801e486:	683a      	ldr	r2, [r7, #0]
 801e488:	601a      	str	r2, [r3, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 801e48a:	4a10      	ldr	r2, [pc, #64]	; (801e4cc <GUI_Init+0x140>)
 801e48c:	4910      	ldr	r1, [pc, #64]	; (801e4d0 <GUI_Init+0x144>)
 801e48e:	4b11      	ldr	r3, [pc, #68]	; (801e4d4 <GUI_Init+0x148>)
 801e490:	0018      	movs	r0, r3
 801e492:	f7fb fe55 	bl	801a140 <USBPD_DPM_SetNotification_GUI>

#if !defined(USBPD_THREADX)
  _status = (USBPD_FunctionalState) GUI_InitOS(NULL);
 801e496:	2000      	movs	r0, #0
 801e498:	f000 f81e 	bl	801e4d8 <GUI_InitOS>
 801e49c:	0002      	movs	r2, r0
 801e49e:	2117      	movs	r1, #23
 801e4a0:	187b      	adds	r3, r7, r1
 801e4a2:	701a      	strb	r2, [r3, #0]
#endif /* !USBPD_THREADX */
  return _status;
 801e4a4:	187b      	adds	r3, r7, r1
 801e4a6:	781b      	ldrb	r3, [r3, #0]
}
 801e4a8:	0018      	movs	r0, r3
 801e4aa:	46bd      	mov	sp, r7
 801e4ac:	b006      	add	sp, #24
 801e4ae:	bd80      	pop	{r7, pc}
 801e4b0:	20004b3d 	.word	0x20004b3d
 801e4b4:	200000e4 	.word	0x200000e4
 801e4b8:	200000f8 	.word	0x200000f8
 801e4bc:	20004b48 	.word	0x20004b48
 801e4c0:	20004b4c 	.word	0x20004b4c
 801e4c4:	20004b50 	.word	0x20004b50
 801e4c8:	20004b54 	.word	0x20004b54
 801e4cc:	0801f5bd 	.word	0x0801f5bd
 801e4d0:	0801f4ed 	.word	0x0801f4ed
 801e4d4:	0801e8b3 	.word	0x0801e8b3

0801e4d8 <GUI_InitOS>:

uint32_t GUI_InitOS(void *MemoryPtr)
{
 801e4d8:	b590      	push	{r4, r7, lr}
 801e4da:	b08d      	sub	sp, #52	; 0x34
 801e4dc:	af00      	add	r7, sp, #0
 801e4de:	6078      	str	r0, [r7, #4]
  static uint8_t _init = 0;
  GUIOS_INIT();
 801e4e0:	2301      	movs	r3, #1
 801e4e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* This init check to keep the compatibility with the previous version of the GUI */
  /* Only threadX required to separate the OS object init with the init code.       */
  if (_init == 0)
 801e4e4:	4b1f      	ldr	r3, [pc, #124]	; (801e564 <GUI_InitOS+0x8c>)
 801e4e6:	781b      	ldrb	r3, [r3, #0]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d134      	bne.n	801e556 <GUI_InitOS+0x7e>
  {
    _init = 1;
 801e4ec:	4b1d      	ldr	r3, [pc, #116]	; (801e564 <GUI_InitOS+0x8c>)
 801e4ee:	2201      	movs	r2, #1
 801e4f0:	701a      	strb	r2, [r3, #0]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_CREATE_QUEUE(GUIMsgBox, "GUIBOX", GUI_BOX_MESSAGES_MAX, GUIOS_ELEMENT_SIZE);
 801e4f2:	2200      	movs	r2, #0
 801e4f4:	2104      	movs	r1, #4
 801e4f6:	201e      	movs	r0, #30
 801e4f8:	f7f8 fe00 	bl	80170fc <osMessageQueueNew>
 801e4fc:	0002      	movs	r2, r0
 801e4fe:	4b1a      	ldr	r3, [pc, #104]	; (801e568 <GUI_InitOS+0x90>)
 801e500:	601a      	str	r2, [r3, #0]
 801e502:	4b19      	ldr	r3, [pc, #100]	; (801e568 <GUI_InitOS+0x90>)
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	2b00      	cmp	r3, #0
 801e508:	d102      	bne.n	801e510 <GUI_InitOS+0x38>
 801e50a:	2300      	movs	r3, #0
 801e50c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e50e:	e023      	b.n	801e558 <GUI_InitOS+0x80>
    GUIOS_CREATE_TASK(GUI_ThreadID, GUI, TaskGUI, OS_GUI_PRIORITY, OS_GUI_STACK_SIZE, &GUIMsgBox);
 801e510:	2408      	movs	r4, #8
 801e512:	193b      	adds	r3, r7, r4
 801e514:	0018      	movs	r0, r3
 801e516:	2324      	movs	r3, #36	; 0x24
 801e518:	001a      	movs	r2, r3
 801e51a:	2100      	movs	r1, #0
 801e51c:	f004 f8c0 	bl	80226a0 <memset>
 801e520:	0021      	movs	r1, r4
 801e522:	187b      	adds	r3, r7, r1
 801e524:	4a11      	ldr	r2, [pc, #68]	; (801e56c <GUI_InitOS+0x94>)
 801e526:	601a      	str	r2, [r3, #0]
 801e528:	187b      	adds	r3, r7, r1
 801e52a:	2296      	movs	r2, #150	; 0x96
 801e52c:	00d2      	lsls	r2, r2, #3
 801e52e:	615a      	str	r2, [r3, #20]
 801e530:	187b      	adds	r3, r7, r1
 801e532:	2208      	movs	r2, #8
 801e534:	619a      	str	r2, [r3, #24]
 801e536:	187a      	adds	r2, r7, r1
 801e538:	490b      	ldr	r1, [pc, #44]	; (801e568 <GUI_InitOS+0x90>)
 801e53a:	4b0d      	ldr	r3, [pc, #52]	; (801e570 <GUI_InitOS+0x98>)
 801e53c:	0018      	movs	r0, r3
 801e53e:	f7f8 fcdb 	bl	8016ef8 <osThreadNew>
 801e542:	0002      	movs	r2, r0
 801e544:	4b0b      	ldr	r3, [pc, #44]	; (801e574 <GUI_InitOS+0x9c>)
 801e546:	601a      	str	r2, [r3, #0]
 801e548:	4b0a      	ldr	r3, [pc, #40]	; (801e574 <GUI_InitOS+0x9c>)
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	d103      	bne.n	801e558 <GUI_InitOS+0x80>
 801e550:	2300      	movs	r3, #0
 801e552:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e554:	e000      	b.n	801e558 <GUI_InitOS+0x80>
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS || USBPD_THREADX */
  }

#if defined(_RTOS) || defined(USBPD_THREADX)
error:
 801e556:	46c0      	nop			; (mov r8, r8)
  return(_status);
 801e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#else
  return(USBPD_ENABLE);
#endif /* _RTOS || USBPD_THREADX */
}
 801e55a:	0018      	movs	r0, r3
 801e55c:	46bd      	mov	sp, r7
 801e55e:	b00d      	add	sp, #52	; 0x34
 801e560:	bd90      	pop	{r4, r7, pc}
 801e562:	46c0      	nop			; (mov r8, r8)
 801e564:	20004bcc 	.word	0x20004bcc
 801e568:	20004b40 	.word	0x20004b40
 801e56c:	08023f78 	.word	0x08023f78
 801e570:	0801e591 	.word	0x0801e591
 801e574:	20004b44 	.word	0x20004b44

0801e578 <GUI_Start>:
{
  BSP_GUI_EraseDataInFlash();
}

void GUI_Start(void)
{
 801e578:	b580      	push	{r7, lr}
 801e57a:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 801e57c:	4b03      	ldr	r3, [pc, #12]	; (801e58c <GUI_Start+0x14>)
 801e57e:	0018      	movs	r0, r3
 801e580:	f002 ffc6 	bl	8021510 <TRACER_EMB_StartRX>
}
 801e584:	46c0      	nop			; (mov r8, r8)
 801e586:	46bd      	mov	sp, r7
 801e588:	bd80      	pop	{r7, pc}
 801e58a:	46c0      	nop			; (mov r8, r8)
 801e58c:	0801e7ad 	.word	0x0801e7ad

0801e590 <TaskGUI>:
#if defined(_RTOS) || defined(USBPD_THREADX)
GUIDEF_TASK_FUNCTION(TaskGUI)
#else
void GUI_Execute(void)
#endif /* _RTOS || USBPD_THREADX */
{
 801e590:	b580      	push	{r7, lr}
 801e592:	b088      	sub	sp, #32
 801e594:	af00      	add	r7, sp, #0
 801e596:	6078      	str	r0, [r7, #4]
#if defined(_RTOS) || defined(USBPD_THREADX)
  uint32_t _timing = GUI_DEFAULT_WAIT;
 801e598:	2301      	movs	r3, #1
 801e59a:	425b      	negs	r3, r3
 801e59c:	61fb      	str	r3, [r7, #28]
  GUI_Start();
 801e59e:	f7ff ffeb 	bl	801e578 <GUI_Start>
  do
  {
    GUIOS_QUEUE_EVENT event = 0;
 801e5a2:	2300      	movs	r3, #0
 801e5a4:	613b      	str	r3, [r7, #16]
    GUIOS_GETMESSAGE_QUEUE(GUIMsgBox, _timing, event);
 801e5a6:	4b54      	ldr	r3, [pc, #336]	; (801e6f8 <TaskGUI+0x168>)
 801e5a8:	6818      	ldr	r0, [r3, #0]
 801e5aa:	69fb      	ldr	r3, [r7, #28]
 801e5ac:	2210      	movs	r2, #16
 801e5ae:	18b9      	adds	r1, r7, r2
 801e5b0:	2200      	movs	r2, #0
 801e5b2:	f7f8 fe79 	bl	80172a8 <osMessageQueueGet>
    switch ((GUI_USER_EVENT)(event & 0xFU))
 801e5b6:	693b      	ldr	r3, [r7, #16]
 801e5b8:	b2db      	uxtb	r3, r3
 801e5ba:	001a      	movs	r2, r3
 801e5bc:	230f      	movs	r3, #15
 801e5be:	4013      	ands	r3, r2
 801e5c0:	d011      	beq.n	801e5e6 <TaskGUI+0x56>
 801e5c2:	2b01      	cmp	r3, #1
 801e5c4:	d000      	beq.n	801e5c8 <TaskGUI+0x38>
 801e5c6:	e090      	b.n	801e6ea <TaskGUI+0x15a>
    {
      case GUI_USER_EVENT_GUI:
      {
        (void)GUI_RXProcess((uint32_t)event);
 801e5c8:	693b      	ldr	r3, [r7, #16]
 801e5ca:	0018      	movs	r0, r3
 801e5cc:	f000 f918 	bl	801e800 <GUI_RXProcess>
        /* Sent an event to check if measurement report has been requested */
        GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_TIMER, 0U);
 801e5d0:	2300      	movs	r3, #0
 801e5d2:	60fb      	str	r3, [r7, #12]
 801e5d4:	4b48      	ldr	r3, [pc, #288]	; (801e6f8 <TaskGUI+0x168>)
 801e5d6:	6818      	ldr	r0, [r3, #0]
 801e5d8:	230c      	movs	r3, #12
 801e5da:	18f9      	adds	r1, r7, r3
 801e5dc:	2300      	movs	r3, #0
 801e5de:	2200      	movs	r2, #0
 801e5e0:	f7f8 fe06 	bl	80171f0 <osMessageQueuePut>
        break;
 801e5e4:	e082      	b.n	801e6ec <TaskGUI+0x15c>
          default:
            break;
        }
        GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* _RTOS || USBPD_THREADX */
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 801e5e6:	231b      	movs	r3, #27
 801e5e8:	18fb      	adds	r3, r7, r3
 801e5ea:	2200      	movs	r2, #0
 801e5ec:	701a      	strb	r2, [r3, #0]
 801e5ee:	e076      	b.n	801e6de <TaskGUI+0x14e>
          /* -------------------------------------------------  */
          /* Check if timeout related to Measurement reporting  */
          /* -------------------------------------------------  */
          /* - Send a GUI Event only if PE is connected
             and Measurement report has been enabled          */
          if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 801e5f0:	201b      	movs	r0, #27
 801e5f2:	183b      	adds	r3, r7, r0
 801e5f4:	781b      	ldrb	r3, [r3, #0]
 801e5f6:	4a41      	ldr	r2, [pc, #260]	; (801e6fc <TaskGUI+0x16c>)
 801e5f8:	009b      	lsls	r3, r3, #2
 801e5fa:	18d3      	adds	r3, r2, r3
 801e5fc:	785b      	ldrb	r3, [r3, #1]
 801e5fe:	06db      	lsls	r3, r3, #27
 801e600:	0fdb      	lsrs	r3, r3, #31
 801e602:	b2db      	uxtb	r3, r3
 801e604:	2b01      	cmp	r3, #1
 801e606:	d15d      	bne.n	801e6c4 <TaskGUI+0x134>
              && (1U == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 801e608:	183b      	adds	r3, r7, r0
 801e60a:	781a      	ldrb	r2, [r3, #0]
 801e60c:	493c      	ldr	r1, [pc, #240]	; (801e700 <TaskGUI+0x170>)
 801e60e:	0013      	movs	r3, r2
 801e610:	005b      	lsls	r3, r3, #1
 801e612:	189b      	adds	r3, r3, r2
 801e614:	005b      	lsls	r3, r3, #1
 801e616:	18cb      	adds	r3, r1, r3
 801e618:	791b      	ldrb	r3, [r3, #4]
 801e61a:	061b      	lsls	r3, r3, #24
 801e61c:	0fdb      	lsrs	r3, r3, #31
 801e61e:	b2db      	uxtb	r3, r3
 801e620:	2b01      	cmp	r3, #1
 801e622:	d14f      	bne.n	801e6c4 <TaskGUI+0x134>
              && (0U != GUI_USER_Params[_instance].u.d.MeasReportValue))
 801e624:	183b      	adds	r3, r7, r0
 801e626:	781a      	ldrb	r2, [r3, #0]
 801e628:	4935      	ldr	r1, [pc, #212]	; (801e700 <TaskGUI+0x170>)
 801e62a:	0013      	movs	r3, r2
 801e62c:	005b      	lsls	r3, r3, #1
 801e62e:	189b      	adds	r3, r3, r2
 801e630:	005b      	lsls	r3, r3, #1
 801e632:	18cb      	adds	r3, r1, r3
 801e634:	791b      	ldrb	r3, [r3, #4]
 801e636:	065b      	lsls	r3, r3, #25
 801e638:	0e5b      	lsrs	r3, r3, #25
 801e63a:	b2db      	uxtb	r3, r3
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d041      	beq.n	801e6c4 <TaskGUI+0x134>
          {
            /* Check if timer has expired */
            if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 801e640:	183b      	adds	r3, r7, r0
 801e642:	781a      	ldrb	r2, [r3, #0]
 801e644:	4b2f      	ldr	r3, [pc, #188]	; (801e704 <TaskGUI+0x174>)
 801e646:	0052      	lsls	r2, r2, #1
 801e648:	5ad3      	ldrh	r3, [r2, r3]
 801e64a:	b29a      	uxth	r2, r3
 801e64c:	2380      	movs	r3, #128	; 0x80
 801e64e:	021b      	lsls	r3, r3, #8
 801e650:	429a      	cmp	r2, r3
 801e652:	d109      	bne.n	801e668 <TaskGUI+0xd8>
            {
              uint32_t event_mr = GUI_USER_EVENT_GUI
                                  | (_instance << GUI_PE_PORT_NUM_Pos)
 801e654:	183b      	adds	r3, r7, r0
 801e656:	781b      	ldrb	r3, [r3, #0]
 801e658:	061b      	lsls	r3, r3, #24
                                  | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 801e65a:	4a2b      	ldr	r2, [pc, #172]	; (801e708 <TaskGUI+0x178>)
 801e65c:	4313      	orrs	r3, r2
              uint32_t event_mr = GUI_USER_EVENT_GUI
 801e65e:	617b      	str	r3, [r7, #20]
              (void)GUI_RXProcess(event_mr);
 801e660:	697b      	ldr	r3, [r7, #20]
 801e662:	0018      	movs	r0, r3
 801e664:	f000 f8cc 	bl	801e800 <GUI_RXProcess>
            }
            /* Start or Restart Measurement report timer */
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 801e668:	201b      	movs	r0, #27
 801e66a:	183b      	adds	r3, r7, r0
 801e66c:	781a      	ldrb	r2, [r3, #0]
 801e66e:	4b25      	ldr	r3, [pc, #148]	; (801e704 <TaskGUI+0x174>)
 801e670:	0052      	lsls	r2, r2, #1
 801e672:	5ad3      	ldrh	r3, [r2, r3]
 801e674:	b29b      	uxth	r3, r3
 801e676:	045b      	lsls	r3, r3, #17
 801e678:	0c5b      	lsrs	r3, r3, #17
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	dc29      	bgt.n	801e6d2 <TaskGUI+0x142>
            {
              GUI_START_TIMER(_instance, GUI_TimerMeasReport,
 801e67e:	183b      	adds	r3, r7, r0
 801e680:	781a      	ldrb	r2, [r3, #0]
 801e682:	491f      	ldr	r1, [pc, #124]	; (801e700 <TaskGUI+0x170>)
 801e684:	0013      	movs	r3, r2
 801e686:	005b      	lsls	r3, r3, #1
 801e688:	189b      	adds	r3, r3, r2
 801e68a:	005b      	lsls	r3, r3, #1
 801e68c:	18cb      	adds	r3, r1, r3
 801e68e:	791b      	ldrb	r3, [r3, #4]
 801e690:	065b      	lsls	r3, r3, #25
 801e692:	0e5b      	lsrs	r3, r3, #25
 801e694:	b2db      	uxtb	r3, r3
 801e696:	b29b      	uxth	r3, r3
 801e698:	2228      	movs	r2, #40	; 0x28
 801e69a:	4353      	muls	r3, r2
 801e69c:	b29b      	uxth	r3, r3
 801e69e:	183a      	adds	r2, r7, r0
 801e6a0:	7812      	ldrb	r2, [r2, #0]
 801e6a2:	491a      	ldr	r1, [pc, #104]	; (801e70c <TaskGUI+0x17c>)
 801e6a4:	430b      	orrs	r3, r1
 801e6a6:	b299      	uxth	r1, r3
 801e6a8:	4b16      	ldr	r3, [pc, #88]	; (801e704 <TaskGUI+0x174>)
 801e6aa:	0052      	lsls	r2, r2, #1
 801e6ac:	52d1      	strh	r1, [r2, r3]
 801e6ae:	2300      	movs	r3, #0
 801e6b0:	60bb      	str	r3, [r7, #8]
 801e6b2:	4b11      	ldr	r3, [pc, #68]	; (801e6f8 <TaskGUI+0x168>)
 801e6b4:	6818      	ldr	r0, [r3, #0]
 801e6b6:	2308      	movs	r3, #8
 801e6b8:	18f9      	adds	r1, r7, r3
 801e6ba:	2300      	movs	r3, #0
 801e6bc:	2200      	movs	r2, #0
 801e6be:	f7f8 fd97 	bl	80171f0 <osMessageQueuePut>
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 801e6c2:	e006      	b.n	801e6d2 <TaskGUI+0x142>
            }
          }
          else
          {
            /* Stop measurement report timer */
            GUI_TimerMeasReport[_instance] = 0;
 801e6c4:	231b      	movs	r3, #27
 801e6c6:	18fb      	adds	r3, r7, r3
 801e6c8:	781a      	ldrb	r2, [r3, #0]
 801e6ca:	4b0e      	ldr	r3, [pc, #56]	; (801e704 <TaskGUI+0x174>)
 801e6cc:	0052      	lsls	r2, r2, #1
 801e6ce:	2100      	movs	r1, #0
 801e6d0:	52d1      	strh	r1, [r2, r3]
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 801e6d2:	211b      	movs	r1, #27
 801e6d4:	187b      	adds	r3, r7, r1
 801e6d6:	781a      	ldrb	r2, [r3, #0]
 801e6d8:	187b      	adds	r3, r7, r1
 801e6da:	3201      	adds	r2, #1
 801e6dc:	701a      	strb	r2, [r3, #0]
 801e6de:	231b      	movs	r3, #27
 801e6e0:	18fb      	adds	r3, r7, r3
 801e6e2:	781b      	ldrb	r3, [r3, #0]
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	d083      	beq.n	801e5f0 <TaskGUI+0x60>
          }
        }
#if defined(_RTOS) || defined(USBPD_THREADX)
        break;
 801e6e8:	e000      	b.n	801e6ec <TaskGUI+0x15c>
      }

      default:
        break;
 801e6ea:	46c0      	nop			; (mov r8, r8)
    }
    _timing = CheckGUITimers();
 801e6ec:	f000 f810 	bl	801e710 <CheckGUITimers>
 801e6f0:	0003      	movs	r3, r0
 801e6f2:	61fb      	str	r3, [r7, #28]
  {
 801e6f4:	e755      	b.n	801e5a2 <TaskGUI+0x12>
 801e6f6:	46c0      	nop			; (mov r8, r8)
 801e6f8:	20004b40 	.word	0x20004b40
 801e6fc:	20002ef0 	.word	0x20002ef0
 801e700:	20004934 	.word	0x20004934
 801e704:	20004930 	.word	0x20004930
 801e708:	00000711 	.word	0x00000711
 801e70c:	ffff8000 	.word	0xffff8000

0801e710 <CheckGUITimers>:
#endif /* _RTOS || USBPD_THREADX */
}

#if defined(_RTOS) || defined(USBPD_THREADX)
static uint32_t CheckGUITimers(void)
{
 801e710:	b580      	push	{r7, lr}
 801e712:	b084      	sub	sp, #16
 801e714:	af00      	add	r7, sp, #0
  uint32_t _timing = GUI_DEFAULT_WAIT;
 801e716:	2301      	movs	r3, #1
 801e718:	425b      	negs	r3, r3
 801e71a:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 801e71c:	230b      	movs	r3, #11
 801e71e:	18fb      	adds	r3, r7, r3
 801e720:	2200      	movs	r2, #0
 801e722:	701a      	strb	r2, [r3, #0]
 801e724:	e018      	b.n	801e758 <CheckGUITimers+0x48>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = (uint32_t)(GUI_TimerMeasReport[instance]) & GUI_TIMER_READ_MSK;
 801e726:	230b      	movs	r3, #11
 801e728:	18fb      	adds	r3, r7, r3
 801e72a:	781a      	ldrb	r2, [r3, #0]
 801e72c:	4b0f      	ldr	r3, [pc, #60]	; (801e76c <CheckGUITimers+0x5c>)
 801e72e:	0052      	lsls	r2, r2, #1
 801e730:	5ad3      	ldrh	r3, [r2, r3]
 801e732:	b29b      	uxth	r3, r3
 801e734:	045b      	lsls	r3, r3, #17
 801e736:	0c5b      	lsrs	r3, r3, #17
 801e738:	607b      	str	r3, [r7, #4]
    if (_current_timing > 0U)
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d005      	beq.n	801e74c <CheckGUITimers+0x3c>
    {
      if (_current_timing < _timing)
 801e740:	687a      	ldr	r2, [r7, #4]
 801e742:	68fb      	ldr	r3, [r7, #12]
 801e744:	429a      	cmp	r2, r3
 801e746:	d201      	bcs.n	801e74c <CheckGUITimers+0x3c>
      {
        _timing = _current_timing;
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	60fb      	str	r3, [r7, #12]
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 801e74c:	210b      	movs	r1, #11
 801e74e:	187b      	adds	r3, r7, r1
 801e750:	781a      	ldrb	r2, [r3, #0]
 801e752:	187b      	adds	r3, r7, r1
 801e754:	3201      	adds	r2, #1
 801e756:	701a      	strb	r2, [r3, #0]
 801e758:	230b      	movs	r3, #11
 801e75a:	18fb      	adds	r3, r7, r3
 801e75c:	781b      	ldrb	r3, [r3, #0]
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d0e1      	beq.n	801e726 <CheckGUITimers+0x16>
      }
    }
  }
  return _timing;
 801e762:	68fb      	ldr	r3, [r7, #12]
}
 801e764:	0018      	movs	r0, r3
 801e766:	46bd      	mov	sp, r7
 801e768:	b004      	add	sp, #16
 801e76a:	bd80      	pop	{r7, pc}
 801e76c:	20004930 	.word	0x20004930

0801e770 <GUI_TimerCounter>:
#endif /* RTOS || USBPD_THREADX */

void GUI_TimerCounter(void)
{
 801e770:	b580      	push	{r7, lr}
 801e772:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1U == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 801e774:	4b0b      	ldr	r3, [pc, #44]	; (801e7a4 <GUI_TimerCounter+0x34>)
 801e776:	791b      	ldrb	r3, [r3, #4]
 801e778:	227f      	movs	r2, #127	; 0x7f
 801e77a:	4393      	bics	r3, r2
 801e77c:	b2db      	uxtb	r3, r3
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d00c      	beq.n	801e79c <GUI_TimerCounter+0x2c>
  {
    if ((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0U)
 801e782:	4b09      	ldr	r3, [pc, #36]	; (801e7a8 <GUI_TimerCounter+0x38>)
 801e784:	881b      	ldrh	r3, [r3, #0]
 801e786:	b29b      	uxth	r3, r3
 801e788:	045b      	lsls	r3, r3, #17
 801e78a:	0c5b      	lsrs	r3, r3, #17
 801e78c:	d006      	beq.n	801e79c <GUI_TimerCounter+0x2c>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 801e78e:	4b06      	ldr	r3, [pc, #24]	; (801e7a8 <GUI_TimerCounter+0x38>)
 801e790:	881b      	ldrh	r3, [r3, #0]
 801e792:	b29b      	uxth	r3, r3
 801e794:	3b01      	subs	r3, #1
 801e796:	b29a      	uxth	r2, r3
 801e798:	4b03      	ldr	r3, [pc, #12]	; (801e7a8 <GUI_TimerCounter+0x38>)
 801e79a:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !(_RTOS || USBPD_THREADX) && USE_STM32_UTILITY_OS) */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 801e79c:	46c0      	nop			; (mov r8, r8)
 801e79e:	46bd      	mov	sp, r7
 801e7a0:	bd80      	pop	{r7, pc}
 801e7a2:	46c0      	nop			; (mov r8, r8)
 801e7a4:	20004934 	.word	0x20004934
 801e7a8:	20004930 	.word	0x20004930

0801e7ac <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 801e7ac:	b580      	push	{r7, lr}
 801e7ae:	b084      	sub	sp, #16
 801e7b0:	af00      	add	r7, sp, #0
 801e7b2:	0002      	movs	r2, r0
 801e7b4:	1dfb      	adds	r3, r7, #7
 801e7b6:	701a      	strb	r2, [r3, #0]
 801e7b8:	1dbb      	adds	r3, r7, #6
 801e7ba:	1c0a      	adds	r2, r1, #0
 801e7bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7be:	b672      	cpsid	i
}
 801e7c0:	46c0      	nop			; (mov r8, r8)
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 801e7c2:	1dbb      	adds	r3, r7, #6
 801e7c4:	781a      	ldrb	r2, [r3, #0]
 801e7c6:	1dfb      	adds	r3, r7, #7
 801e7c8:	781b      	ldrb	r3, [r3, #0]
 801e7ca:	0011      	movs	r1, r2
 801e7cc:	0018      	movs	r0, r3
 801e7ce:	f000 f891 	bl	801e8f4 <GUI_GetMessage>
 801e7d2:	0003      	movs	r3, r0
 801e7d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 801e7d6:	b662      	cpsie	i
}
 801e7d8:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
  if (event == 1U)
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	2b01      	cmp	r3, #1
 801e7de:	d109      	bne.n	801e7f4 <GUI_CALLBACK_RX+0x48>
  {
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_GUI, 0U);
 801e7e0:	2301      	movs	r3, #1
 801e7e2:	60bb      	str	r3, [r7, #8]
 801e7e4:	4b05      	ldr	r3, [pc, #20]	; (801e7fc <GUI_CALLBACK_RX+0x50>)
 801e7e6:	6818      	ldr	r0, [r3, #0]
 801e7e8:	2308      	movs	r3, #8
 801e7ea:	18f9      	adds	r1, r7, r3
 801e7ec:	2300      	movs	r3, #0
 801e7ee:	2200      	movs	r2, #0
 801e7f0:	f7f8 fcfe 	bl	80171f0 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 801e7f4:	46c0      	nop			; (mov r8, r8)
 801e7f6:	46bd      	mov	sp, r7
 801e7f8:	b004      	add	sp, #16
 801e7fa:	bd80      	pop	{r7, pc}
 801e7fc:	20004b40 	.word	0x20004b40

0801e800 <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 801e800:	b5b0      	push	{r4, r5, r7, lr}
 801e802:	b086      	sub	sp, #24
 801e804:	af00      	add	r7, sp, #0
 801e806:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0U == (Event & GUI_PE_NOTIF_Msk))
 801e808:	687a      	ldr	r2, [r7, #4]
 801e80a:	23ff      	movs	r3, #255	; 0xff
 801e80c:	011b      	lsls	r3, r3, #4
 801e80e:	4013      	ands	r3, r2
 801e810:	d11f      	bne.n	801e852 <GUI_RXProcess+0x52>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 801e812:	2515      	movs	r5, #21
 801e814:	197c      	adds	r4, r7, r5
 801e816:	230f      	movs	r3, #15
 801e818:	18fa      	adds	r2, r7, r3
 801e81a:	2310      	movs	r3, #16
 801e81c:	18fb      	adds	r3, r7, r3
 801e81e:	0011      	movs	r1, r2
 801e820:	0018      	movs	r0, r3
 801e822:	f000 f96b 	bl	801eafc <GUI_SendAnswer>
 801e826:	0003      	movs	r3, r0
 801e828:	7023      	strb	r3, [r4, #0]

    switch (state)
 801e82a:	197b      	adds	r3, r7, r5
 801e82c:	781b      	ldrb	r3, [r3, #0]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d039      	beq.n	801e8a6 <GUI_RXProcess+0xa6>
 801e832:	2b02      	cmp	r3, #2
 801e834:	d104      	bne.n	801e840 <GUI_RXProcess+0x40>
    {
      case GUI_STATE_RESET:
        /* DPM_RESET_REQ received by the device */
        /* Save parameters in FLASH */
        (void)BSP_GUI_SaveDataInFlash();
 801e836:	f7fe ff71 	bl	801d71c <BSP_GUI_SaveDataInFlash>
        HAL_NVIC_SystemReset();
 801e83a:	f7eb fdec 	bl	800a416 <HAL_NVIC_SystemReset>
        break;
 801e83e:	e033      	b.n	801e8a8 <GUI_RXProcess+0xa8>
      case GUI_STATE_INIT:
        /* DPM_INIT_REQ received by the device */
        break;
      default:
        /* Another GUI messages received by the device */
        TRACER_EMB_Add(msg, size);
 801e840:	693a      	ldr	r2, [r7, #16]
 801e842:	230f      	movs	r3, #15
 801e844:	18fb      	adds	r3, r7, r3
 801e846:	781b      	ldrb	r3, [r3, #0]
 801e848:	0019      	movs	r1, r3
 801e84a:	0010      	movs	r0, r2
 801e84c:	f002 fdf6 	bl	802143c <TRACER_EMB_Add>
        break;
 801e850:	e02a      	b.n	801e8a8 <GUI_RXProcess+0xa8>
    }
  }
  else
  {
    uint16_t type_event = ((uint16_t)Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	b29b      	uxth	r3, r3
 801e856:	091b      	lsrs	r3, r3, #4
 801e858:	b29a      	uxth	r2, r3
 801e85a:	2016      	movs	r0, #22
 801e85c:	183b      	adds	r3, r7, r0
 801e85e:	21ff      	movs	r1, #255	; 0xff
 801e860:	400a      	ands	r2, r1
 801e862:	801a      	strh	r2, [r3, #0]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 801e864:	183b      	adds	r3, r7, r0
 801e866:	881b      	ldrh	r3, [r3, #0]
 801e868:	2b71      	cmp	r3, #113	; 0x71
 801e86a:	d10e      	bne.n	801e88a <GUI_RXProcess+0x8a>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	0e1b      	lsrs	r3, r3, #24
 801e870:	2203      	movs	r2, #3
 801e872:	4013      	ands	r3, r2
 801e874:	001c      	movs	r4, r3
 801e876:	f7ea fc47 	bl	8009108 <HAL_GetTick>
 801e87a:	0002      	movs	r2, r0
 801e87c:	2380      	movs	r3, #128	; 0x80
 801e87e:	011b      	lsls	r3, r3, #4
 801e880:	0019      	movs	r1, r3
 801e882:	0020      	movs	r0, r4
 801e884:	f000 f815 	bl	801e8b2 <GUI_FormatAndSendNotification>
 801e888:	e00e      	b.n	801e8a8 <GUI_RXProcess+0xa8>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	0e1b      	lsrs	r3, r3, #24
 801e88e:	2203      	movs	r2, #3
 801e890:	4013      	ands	r3, r2
 801e892:	0018      	movs	r0, r3
 801e894:	2316      	movs	r3, #22
 801e896:	18fb      	adds	r3, r7, r3
 801e898:	881a      	ldrh	r2, [r3, #0]
 801e89a:	2380      	movs	r3, #128	; 0x80
 801e89c:	019b      	lsls	r3, r3, #6
 801e89e:	0019      	movs	r1, r3
 801e8a0:	f000 f807 	bl	801e8b2 <GUI_FormatAndSendNotification>
 801e8a4:	e000      	b.n	801e8a8 <GUI_RXProcess+0xa8>
        break;
 801e8a6:	46c0      	nop			; (mov r8, r8)
                                          GUI_NOTIF_PE_EVENT,
                                          type_event);
    }
  }
  return 0;
 801e8a8:	2300      	movs	r3, #0
}
 801e8aa:	0018      	movs	r0, r3
 801e8ac:	46bd      	mov	sp, r7
 801e8ae:	b006      	add	sp, #24
 801e8b0:	bdb0      	pop	{r4, r5, r7, pc}

0801e8b2 <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 801e8b2:	b5b0      	push	{r4, r5, r7, lr}
 801e8b4:	b088      	sub	sp, #32
 801e8b6:	af02      	add	r7, sp, #8
 801e8b8:	60f8      	str	r0, [r7, #12]
 801e8ba:	60b9      	str	r1, [r7, #8]
 801e8bc:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification((uint8_t)PortNum, &msg, &size, TypeNotification, Value))
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	b2d8      	uxtb	r0, r3
 801e8c2:	68bc      	ldr	r4, [r7, #8]
 801e8c4:	2513      	movs	r5, #19
 801e8c6:	197a      	adds	r2, r7, r5
 801e8c8:	2314      	movs	r3, #20
 801e8ca:	18f9      	adds	r1, r7, r3
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	9300      	str	r3, [sp, #0]
 801e8d0:	0023      	movs	r3, r4
 801e8d2:	f000 fa03 	bl	801ecdc <GUI_SendNotification>
 801e8d6:	1e03      	subs	r3, r0, #0
 801e8d8:	d006      	beq.n	801e8e8 <GUI_FormatAndSendNotification+0x36>
  {
    TRACER_EMB_Add(msg, size);
 801e8da:	697a      	ldr	r2, [r7, #20]
 801e8dc:	197b      	adds	r3, r7, r5
 801e8de:	781b      	ldrb	r3, [r3, #0]
 801e8e0:	0019      	movs	r1, r3
 801e8e2:	0010      	movs	r0, r2
 801e8e4:	f002 fdaa 	bl	802143c <TRACER_EMB_Add>
  }
  return 0;
 801e8e8:	2300      	movs	r3, #0
}
 801e8ea:	0018      	movs	r0, r3
 801e8ec:	46bd      	mov	sp, r7
 801e8ee:	b006      	add	sp, #24
 801e8f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801e8f4 <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 801e8f4:	b580      	push	{r7, lr}
 801e8f6:	b084      	sub	sp, #16
 801e8f8:	af00      	add	r7, sp, #0
 801e8fa:	0002      	movs	r2, r0
 801e8fc:	1dfb      	adds	r3, r7, #7
 801e8fe:	701a      	strb	r2, [r3, #0]
 801e900:	1dbb      	adds	r3, r7, #6
 801e902:	1c0a      	adds	r2, r1, #0
 801e904:	701a      	strb	r2, [r3, #0]
  uint32_t status = 0;
 801e906:	2300      	movs	r3, #0
 801e908:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if (cursor < TLV_SIZE_MAX)
 801e90a:	4b76      	ldr	r3, [pc, #472]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801e90c:	881b      	ldrh	r3, [r3, #0]
 801e90e:	2bff      	cmp	r3, #255	; 0xff
 801e910:	d80b      	bhi.n	801e92a <GUI_GetMessage+0x36>
  {
    PtrDataRx[cursor] = Character;
 801e912:	4b74      	ldr	r3, [pc, #464]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801e914:	881b      	ldrh	r3, [r3, #0]
 801e916:	0019      	movs	r1, r3
 801e918:	4b73      	ldr	r3, [pc, #460]	; (801eae8 <GUI_GetMessage+0x1f4>)
 801e91a:	1dfa      	adds	r2, r7, #7
 801e91c:	7812      	ldrb	r2, [r2, #0]
 801e91e:	545a      	strb	r2, [r3, r1]
    counter = 0U;
    Rstate = Rstart;
    return 0;
  }

  if (Error != 0U)
 801e920:	1dbb      	adds	r3, r7, #6
 801e922:	781b      	ldrb	r3, [r3, #0]
 801e924:	2b00      	cmp	r3, #0
 801e926:	d00e      	beq.n	801e946 <GUI_GetMessage+0x52>
 801e928:	e00a      	b.n	801e940 <GUI_GetMessage+0x4c>
    cursor = 0U;
 801e92a:	4b6e      	ldr	r3, [pc, #440]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801e92c:	2200      	movs	r2, #0
 801e92e:	801a      	strh	r2, [r3, #0]
    counter = 0U;
 801e930:	4b6e      	ldr	r3, [pc, #440]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e932:	2200      	movs	r2, #0
 801e934:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 801e936:	4b6e      	ldr	r3, [pc, #440]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801e938:	2200      	movs	r2, #0
 801e93a:	701a      	strb	r2, [r3, #0]
    return 0;
 801e93c:	2300      	movs	r3, #0
 801e93e:	e0cc      	b.n	801eada <GUI_GetMessage+0x1e6>
  {
    Rstate = Rerror;
 801e940:	4b6b      	ldr	r3, [pc, #428]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801e942:	2204      	movs	r2, #4
 801e944:	701a      	strb	r2, [r3, #0]
  }

  switch (Rstate)
 801e946:	4b6a      	ldr	r3, [pc, #424]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801e948:	781b      	ldrb	r3, [r3, #0]
 801e94a:	2b04      	cmp	r3, #4
 801e94c:	d900      	bls.n	801e950 <GUI_GetMessage+0x5c>
 801e94e:	e0b4      	b.n	801eaba <GUI_GetMessage+0x1c6>
 801e950:	009a      	lsls	r2, r3, #2
 801e952:	4b68      	ldr	r3, [pc, #416]	; (801eaf4 <GUI_GetMessage+0x200>)
 801e954:	18d3      	adds	r3, r2, r3
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	469f      	mov	pc, r3
  {
    case Rstart :
      if (PtrDataRx[cursor] == TLV_SOF)
 801e95a:	4b62      	ldr	r3, [pc, #392]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801e95c:	881b      	ldrh	r3, [r3, #0]
 801e95e:	001a      	movs	r2, r3
 801e960:	4b61      	ldr	r3, [pc, #388]	; (801eae8 <GUI_GetMessage+0x1f4>)
 801e962:	5c9b      	ldrb	r3, [r3, r2]
 801e964:	2bfd      	cmp	r3, #253	; 0xfd
 801e966:	d106      	bne.n	801e976 <GUI_GetMessage+0x82>
      {
        counter++;
 801e968:	4b60      	ldr	r3, [pc, #384]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e96a:	881b      	ldrh	r3, [r3, #0]
 801e96c:	3301      	adds	r3, #1
 801e96e:	b29a      	uxth	r2, r3
 801e970:	4b5e      	ldr	r3, [pc, #376]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e972:	801a      	strh	r2, [r3, #0]
 801e974:	e006      	b.n	801e984 <GUI_GetMessage+0x90>
      }
      else
      {
        counter = 0U;
 801e976:	4b5d      	ldr	r3, [pc, #372]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e978:	2200      	movs	r2, #0
 801e97a:	801a      	strh	r2, [r3, #0]
        /* cursor is unsigned, but it will inevitably increments at the end of function,
           and we need a 0 at the next pass here */
        cursor = 0xFFFFU;
 801e97c:	4b59      	ldr	r3, [pc, #356]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801e97e:	2201      	movs	r2, #1
 801e980:	4252      	negs	r2, r2
 801e982:	801a      	strh	r2, [r3, #0]
      }

      if (counter == 4U) /* The whole SOF is received */
 801e984:	4b59      	ldr	r3, [pc, #356]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e986:	881b      	ldrh	r3, [r3, #0]
 801e988:	2b04      	cmp	r3, #4
 801e98a:	d000      	beq.n	801e98e <GUI_GetMessage+0x9a>
 801e98c:	e097      	b.n	801eabe <GUI_GetMessage+0x1ca>
      {
        counter = 0U;
 801e98e:	4b57      	ldr	r3, [pc, #348]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e990:	2200      	movs	r2, #0
 801e992:	801a      	strh	r2, [r3, #0]
        Rstate = Rsize;
 801e994:	4b56      	ldr	r3, [pc, #344]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801e996:	2202      	movs	r2, #2
 801e998:	701a      	strb	r2, [r3, #0]
      }
      break;
 801e99a:	e090      	b.n	801eabe <GUI_GetMessage+0x1ca>
    case Rsize :
      counter++;
 801e99c:	4b53      	ldr	r3, [pc, #332]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e99e:	881b      	ldrh	r3, [r3, #0]
 801e9a0:	3301      	adds	r3, #1
 801e9a2:	b29a      	uxth	r2, r3
 801e9a4:	4b51      	ldr	r3, [pc, #324]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e9a6:	801a      	strh	r2, [r3, #0]

      if (counter == 3U) /* We have received the size */
 801e9a8:	4b50      	ldr	r3, [pc, #320]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e9aa:	881b      	ldrh	r3, [r3, #0]
 801e9ac:	2b03      	cmp	r3, #3
 801e9ae:	d000      	beq.n	801e9b2 <GUI_GetMessage+0xbe>
 801e9b0:	e087      	b.n	801eac2 <GUI_GetMessage+0x1ce>
      {
        currentSize = (uint16_t)((PtrDataRx[cursor - 1U]) << 8) + (uint16_t)(PtrDataRx[cursor]);
 801e9b2:	4b4c      	ldr	r3, [pc, #304]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801e9b4:	881b      	ldrh	r3, [r3, #0]
 801e9b6:	3b01      	subs	r3, #1
 801e9b8:	4a4b      	ldr	r2, [pc, #300]	; (801eae8 <GUI_GetMessage+0x1f4>)
 801e9ba:	5cd3      	ldrb	r3, [r2, r3]
 801e9bc:	b29b      	uxth	r3, r3
 801e9be:	021b      	lsls	r3, r3, #8
 801e9c0:	b29a      	uxth	r2, r3
 801e9c2:	4b48      	ldr	r3, [pc, #288]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801e9c4:	881b      	ldrh	r3, [r3, #0]
 801e9c6:	0019      	movs	r1, r3
 801e9c8:	4b47      	ldr	r3, [pc, #284]	; (801eae8 <GUI_GetMessage+0x1f4>)
 801e9ca:	5c5b      	ldrb	r3, [r3, r1]
 801e9cc:	b29b      	uxth	r3, r3
 801e9ce:	18d3      	adds	r3, r2, r3
 801e9d0:	b29a      	uxth	r2, r3
 801e9d2:	4b49      	ldr	r3, [pc, #292]	; (801eaf8 <GUI_GetMessage+0x204>)
 801e9d4:	801a      	strh	r2, [r3, #0]
        if (0U == currentSize)
 801e9d6:	4b48      	ldr	r3, [pc, #288]	; (801eaf8 <GUI_GetMessage+0x204>)
 801e9d8:	881b      	ldrh	r3, [r3, #0]
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	d103      	bne.n	801e9e6 <GUI_GetMessage+0xf2>
        {
          Rstate = Rend;
 801e9de:	4b44      	ldr	r3, [pc, #272]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801e9e0:	2203      	movs	r2, #3
 801e9e2:	701a      	strb	r2, [r3, #0]
 801e9e4:	e002      	b.n	801e9ec <GUI_GetMessage+0xf8>
        }
        else
        {
          Rstate = RonGoing;
 801e9e6:	4b42      	ldr	r3, [pc, #264]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801e9e8:	2201      	movs	r2, #1
 801e9ea:	701a      	strb	r2, [r3, #0]
        }
        counter = 0U;
 801e9ec:	4b3f      	ldr	r3, [pc, #252]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e9ee:	2200      	movs	r2, #0
 801e9f0:	801a      	strh	r2, [r3, #0]
      }
      break;
 801e9f2:	e066      	b.n	801eac2 <GUI_GetMessage+0x1ce>
    case RonGoing :
      counter++;
 801e9f4:	4b3d      	ldr	r3, [pc, #244]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e9f6:	881b      	ldrh	r3, [r3, #0]
 801e9f8:	3301      	adds	r3, #1
 801e9fa:	b29a      	uxth	r2, r3
 801e9fc:	4b3b      	ldr	r3, [pc, #236]	; (801eaec <GUI_GetMessage+0x1f8>)
 801e9fe:	801a      	strh	r2, [r3, #0]

      if (counter == currentSize)
 801ea00:	4b3a      	ldr	r3, [pc, #232]	; (801eaec <GUI_GetMessage+0x1f8>)
 801ea02:	881a      	ldrh	r2, [r3, #0]
 801ea04:	4b3c      	ldr	r3, [pc, #240]	; (801eaf8 <GUI_GetMessage+0x204>)
 801ea06:	881b      	ldrh	r3, [r3, #0]
 801ea08:	429a      	cmp	r2, r3
 801ea0a:	d15c      	bne.n	801eac6 <GUI_GetMessage+0x1d2>
      {
        /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
        counter = 0U;
 801ea0c:	4b37      	ldr	r3, [pc, #220]	; (801eaec <GUI_GetMessage+0x1f8>)
 801ea0e:	2200      	movs	r2, #0
 801ea10:	801a      	strh	r2, [r3, #0]
        Rstate = Rend;
 801ea12:	4b37      	ldr	r3, [pc, #220]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801ea14:	2203      	movs	r2, #3
 801ea16:	701a      	strb	r2, [r3, #0]
      }
      break;
 801ea18:	e055      	b.n	801eac6 <GUI_GetMessage+0x1d2>
    case Rend :
      counter++;
 801ea1a:	4b34      	ldr	r3, [pc, #208]	; (801eaec <GUI_GetMessage+0x1f8>)
 801ea1c:	881b      	ldrh	r3, [r3, #0]
 801ea1e:	3301      	adds	r3, #1
 801ea20:	b29a      	uxth	r2, r3
 801ea22:	4b32      	ldr	r3, [pc, #200]	; (801eaec <GUI_GetMessage+0x1f8>)
 801ea24:	801a      	strh	r2, [r3, #0]
      if ((PtrDataRx[cursor] == TLV_EOF)
 801ea26:	4b2f      	ldr	r3, [pc, #188]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801ea28:	881b      	ldrh	r3, [r3, #0]
 801ea2a:	001a      	movs	r2, r3
 801ea2c:	4b2e      	ldr	r3, [pc, #184]	; (801eae8 <GUI_GetMessage+0x1f4>)
 801ea2e:	5c9b      	ldrb	r3, [r3, r2]
 801ea30:	2ba5      	cmp	r3, #165	; 0xa5
 801ea32:	d124      	bne.n	801ea7e <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 1U] == TLV_EOF)
 801ea34:	4b2b      	ldr	r3, [pc, #172]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801ea36:	881b      	ldrh	r3, [r3, #0]
 801ea38:	3b01      	subs	r3, #1
 801ea3a:	4a2b      	ldr	r2, [pc, #172]	; (801eae8 <GUI_GetMessage+0x1f4>)
 801ea3c:	5cd3      	ldrb	r3, [r2, r3]
 801ea3e:	2ba5      	cmp	r3, #165	; 0xa5
 801ea40:	d11d      	bne.n	801ea7e <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 2U] == TLV_EOF)
 801ea42:	4b28      	ldr	r3, [pc, #160]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801ea44:	881b      	ldrh	r3, [r3, #0]
 801ea46:	3b02      	subs	r3, #2
 801ea48:	4a27      	ldr	r2, [pc, #156]	; (801eae8 <GUI_GetMessage+0x1f4>)
 801ea4a:	5cd3      	ldrb	r3, [r2, r3]
 801ea4c:	2ba5      	cmp	r3, #165	; 0xa5
 801ea4e:	d116      	bne.n	801ea7e <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 3U] == TLV_EOF))
 801ea50:	4b24      	ldr	r3, [pc, #144]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801ea52:	881b      	ldrh	r3, [r3, #0]
 801ea54:	3b03      	subs	r3, #3
 801ea56:	4a24      	ldr	r2, [pc, #144]	; (801eae8 <GUI_GetMessage+0x1f4>)
 801ea58:	5cd3      	ldrb	r3, [r2, r3]
 801ea5a:	2ba5      	cmp	r3, #165	; 0xa5
 801ea5c:	d10f      	bne.n	801ea7e <GUI_GetMessage+0x18a>
      {
        /* The semaphore must be given only in this case, because otherwise
           it means we didn't receive the correct size of bytes */
        if (counter == 4U)
 801ea5e:	4b23      	ldr	r3, [pc, #140]	; (801eaec <GUI_GetMessage+0x1f8>)
 801ea60:	881b      	ldrh	r3, [r3, #0]
 801ea62:	2b04      	cmp	r3, #4
 801ea64:	d101      	bne.n	801ea6a <GUI_GetMessage+0x176>
        {
          status = 1U;
 801ea66:	2301      	movs	r3, #1
 801ea68:	60fb      	str	r3, [r7, #12]
        }
        counter = 0U;
 801ea6a:	4b20      	ldr	r3, [pc, #128]	; (801eaec <GUI_GetMessage+0x1f8>)
 801ea6c:	2200      	movs	r2, #0
 801ea6e:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 801ea70:	4b1c      	ldr	r3, [pc, #112]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801ea72:	2201      	movs	r2, #1
 801ea74:	4252      	negs	r2, r2
 801ea76:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 801ea78:	4b1d      	ldr	r3, [pc, #116]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801ea7a:	2200      	movs	r2, #0
 801ea7c:	701a      	strb	r2, [r3, #0]
      }

      if (cursor == (currentSize + 11U))
 801ea7e:	4b19      	ldr	r3, [pc, #100]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801ea80:	881b      	ldrh	r3, [r3, #0]
 801ea82:	001a      	movs	r2, r3
 801ea84:	4b1c      	ldr	r3, [pc, #112]	; (801eaf8 <GUI_GetMessage+0x204>)
 801ea86:	881b      	ldrh	r3, [r3, #0]
 801ea88:	330b      	adds	r3, #11
 801ea8a:	429a      	cmp	r2, r3
 801ea8c:	d11d      	bne.n	801eaca <GUI_GetMessage+0x1d6>
      {
        /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
        counter = 0U;
 801ea8e:	4b17      	ldr	r3, [pc, #92]	; (801eaec <GUI_GetMessage+0x1f8>)
 801ea90:	2200      	movs	r2, #0
 801ea92:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 801ea94:	4b13      	ldr	r3, [pc, #76]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801ea96:	2201      	movs	r2, #1
 801ea98:	4252      	negs	r2, r2
 801ea9a:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 801ea9c:	4b14      	ldr	r3, [pc, #80]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801ea9e:	2200      	movs	r2, #0
 801eaa0:	701a      	strb	r2, [r3, #0]
      }
      break;
 801eaa2:	e012      	b.n	801eaca <GUI_GetMessage+0x1d6>
    case Rerror :
      counter = 0U;
 801eaa4:	4b11      	ldr	r3, [pc, #68]	; (801eaec <GUI_GetMessage+0x1f8>)
 801eaa6:	2200      	movs	r2, #0
 801eaa8:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFFU;
 801eaaa:	4b0e      	ldr	r3, [pc, #56]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801eaac:	2201      	movs	r2, #1
 801eaae:	4252      	negs	r2, r2
 801eab0:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 801eab2:	4b0f      	ldr	r3, [pc, #60]	; (801eaf0 <GUI_GetMessage+0x1fc>)
 801eab4:	2200      	movs	r2, #0
 801eab6:	701a      	strb	r2, [r3, #0]
      break;
 801eab8:	e008      	b.n	801eacc <GUI_GetMessage+0x1d8>
    default:
      break;
 801eaba:	46c0      	nop			; (mov r8, r8)
 801eabc:	e006      	b.n	801eacc <GUI_GetMessage+0x1d8>
      break;
 801eabe:	46c0      	nop			; (mov r8, r8)
 801eac0:	e004      	b.n	801eacc <GUI_GetMessage+0x1d8>
      break;
 801eac2:	46c0      	nop			; (mov r8, r8)
 801eac4:	e002      	b.n	801eacc <GUI_GetMessage+0x1d8>
      break;
 801eac6:	46c0      	nop			; (mov r8, r8)
 801eac8:	e000      	b.n	801eacc <GUI_GetMessage+0x1d8>
      break;
 801eaca:	46c0      	nop			; (mov r8, r8)
  }

  cursor++;
 801eacc:	4b05      	ldr	r3, [pc, #20]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801eace:	881b      	ldrh	r3, [r3, #0]
 801ead0:	3301      	adds	r3, #1
 801ead2:	b29a      	uxth	r2, r3
 801ead4:	4b03      	ldr	r3, [pc, #12]	; (801eae4 <GUI_GetMessage+0x1f0>)
 801ead6:	801a      	strh	r2, [r3, #0]
  return status;
 801ead8:	68fb      	ldr	r3, [r7, #12]
}
 801eada:	0018      	movs	r0, r3
 801eadc:	46bd      	mov	sp, r7
 801eade:	b004      	add	sp, #16
 801eae0:	bd80      	pop	{r7, pc}
 801eae2:	46c0      	nop			; (mov r8, r8)
 801eae4:	20004bce 	.word	0x20004bce
 801eae8:	2000493c 	.word	0x2000493c
 801eaec:	20004bd0 	.word	0x20004bd0
 801eaf0:	20004bd2 	.word	0x20004bd2
 801eaf4:	080242c8 	.word	0x080242c8
 801eaf8:	20004bd4 	.word	0x20004bd4

0801eafc <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 801eafc:	b590      	push	{r4, r7, lr}
 801eafe:	b085      	sub	sp, #20
 801eb00:	af00      	add	r7, sp, #0
 801eb02:	6078      	str	r0, [r7, #4]
 801eb04:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 801eb06:	4b70      	ldr	r3, [pc, #448]	; (801ecc8 <GUI_SendAnswer+0x1cc>)
 801eb08:	791a      	ldrb	r2, [r3, #4]
 801eb0a:	230f      	movs	r3, #15
 801eb0c:	18fb      	adds	r3, r7, r3
 801eb0e:	0952      	lsrs	r2, r2, #5
 801eb10:	701a      	strb	r2, [r3, #0]

  /* Do the appropriate treatment in response to what we have received */
  switch (PtrDataRx[TLV_TAG_POSITION] & 0x1FU)
 801eb12:	4b6d      	ldr	r3, [pc, #436]	; (801ecc8 <GUI_SendAnswer+0x1cc>)
 801eb14:	791b      	ldrb	r3, [r3, #4]
 801eb16:	001a      	movs	r2, r3
 801eb18:	231f      	movs	r3, #31
 801eb1a:	4013      	ands	r3, r2
 801eb1c:	2b10      	cmp	r3, #16
 801eb1e:	d900      	bls.n	801eb22 <GUI_SendAnswer+0x26>
 801eb20:	e0be      	b.n	801eca0 <GUI_SendAnswer+0x1a4>
 801eb22:	009a      	lsls	r2, r3, #2
 801eb24:	4b69      	ldr	r3, [pc, #420]	; (801eccc <GUI_SendAnswer+0x1d0>)
 801eb26:	18d3      	adds	r3, r2, r3
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	469f      	mov	pc, r3
  {
    case DPM_RESET_REQ:
      /* Reset*/
      return GUI_STATE_RESET;
 801eb2c:	2302      	movs	r3, #2
 801eb2e:	e0c7      	b.n	801ecc0 <GUI_SendAnswer+0x1c4>

    case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 801eb30:	4a67      	ldr	r2, [pc, #412]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801eb32:	240f      	movs	r4, #15
 801eb34:	193b      	adds	r3, r7, r4
 801eb36:	781b      	ldrb	r3, [r3, #0]
 801eb38:	0011      	movs	r1, r2
 801eb3a:	0018      	movs	r0, r3
 801eb3c:	f000 fe2c 	bl	801f798 <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	4a63      	ldr	r2, [pc, #396]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801eb44:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 801eb46:	4b62      	ldr	r3, [pc, #392]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801eb48:	0018      	movs	r0, r3
 801eb4a:	f7ff fbe9 	bl	801e320 <TLV_get_string_length>
 801eb4e:	0003      	movs	r3, r0
 801eb50:	b2db      	uxtb	r3, r3
 801eb52:	3308      	adds	r3, #8
 801eb54:	b2da      	uxtb	r2, r3
 801eb56:	683b      	ldr	r3, [r7, #0]
 801eb58:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	681a      	ldr	r2, [r3, #0]
 801eb5e:	683b      	ldr	r3, [r7, #0]
 801eb60:	781b      	ldrb	r3, [r3, #0]
 801eb62:	0019      	movs	r1, r3
 801eb64:	0010      	movs	r0, r2
 801eb66:	f002 fc69 	bl	802143c <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 801eb6a:	4b5a      	ldr	r3, [pc, #360]	; (801ecd4 <GUI_SendAnswer+0x1d8>)
 801eb6c:	2201      	movs	r2, #1
 801eb6e:	701a      	strb	r2, [r3, #0]
      if (0U == port)
 801eb70:	193b      	adds	r3, r7, r4
 801eb72:	781b      	ldrb	r3, [r3, #0]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d105      	bne.n	801eb84 <GUI_SendAnswer+0x88>
      {
        /* Send a notification all the port */
        (void)GUI_FormatAndSendNotification(USBPD_PORT_0,
 801eb78:	4b57      	ldr	r3, [pc, #348]	; (801ecd8 <GUI_SendAnswer+0x1dc>)
 801eb7a:	2270      	movs	r2, #112	; 0x70
 801eb7c:	0019      	movs	r1, r3
 801eb7e:	2000      	movs	r0, #0
 801eb80:	f7ff fe97 	bl	801e8b2 <GUI_FormatAndSendNotification>
        (void)GUI_FormatAndSendNotification(USBPD_PORT_1,
                                            GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP,
                                            USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 801eb84:	2300      	movs	r3, #0
 801eb86:	e09b      	b.n	801ecc0 <GUI_SendAnswer+0x1c4>
    }

    case DPM_CONFIG_GET_REQ:
      if (0U != port)
 801eb88:	220f      	movs	r2, #15
 801eb8a:	18bb      	adds	r3, r7, r2
 801eb8c:	781b      	ldrb	r3, [r3, #0]
 801eb8e:	2b00      	cmp	r3, #0
 801eb90:	d009      	beq.n	801eba6 <GUI_SendAnswer+0xaa>
      {
        Send_DpmConfigGetCnf((port - 1U), PtrDataRx, Processed);
 801eb92:	18bb      	adds	r3, r7, r2
 801eb94:	781b      	ldrb	r3, [r3, #0]
 801eb96:	3b01      	subs	r3, #1
 801eb98:	b2db      	uxtb	r3, r3
 801eb9a:	4a4d      	ldr	r2, [pc, #308]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801eb9c:	494a      	ldr	r1, [pc, #296]	; (801ecc8 <GUI_SendAnswer+0x1cc>)
 801eb9e:	0018      	movs	r0, r3
 801eba0:	f001 ff28 	bl	80209f4 <Send_DpmConfigGetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801eba4:	e07d      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801eba6:	494a      	ldr	r1, [pc, #296]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801eba8:	230f      	movs	r3, #15
 801ebaa:	18fb      	adds	r3, r7, r3
 801ebac:	781b      	ldrb	r3, [r3, #0]
 801ebae:	2205      	movs	r2, #5
 801ebb0:	0018      	movs	r0, r3
 801ebb2:	f002 f9ff 	bl	8020fb4 <Send_DpmConfigGetRej>
      break;
 801ebb6:	e074      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
    case DPM_CONFIG_SET_REQ:
      if (0U != port)
 801ebb8:	220f      	movs	r2, #15
 801ebba:	18bb      	adds	r3, r7, r2
 801ebbc:	781b      	ldrb	r3, [r3, #0]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d009      	beq.n	801ebd6 <GUI_SendAnswer+0xda>
      {
        Send_DpmConfigSetCnf((port - 1U), PtrDataRx, Processed);
 801ebc2:	18bb      	adds	r3, r7, r2
 801ebc4:	781b      	ldrb	r3, [r3, #0]
 801ebc6:	3b01      	subs	r3, #1
 801ebc8:	b2db      	uxtb	r3, r3
 801ebca:	4a41      	ldr	r2, [pc, #260]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ebcc:	493e      	ldr	r1, [pc, #248]	; (801ecc8 <GUI_SendAnswer+0x1cc>)
 801ebce:	0018      	movs	r0, r3
 801ebd0:	f001 fad0 	bl	8020174 <Send_DpmConfigSetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801ebd4:	e065      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801ebd6:	493e      	ldr	r1, [pc, #248]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ebd8:	230f      	movs	r3, #15
 801ebda:	18fb      	adds	r3, r7, r3
 801ebdc:	781b      	ldrb	r3, [r3, #0]
 801ebde:	2205      	movs	r2, #5
 801ebe0:	0018      	movs	r0, r3
 801ebe2:	f002 f9e7 	bl	8020fb4 <Send_DpmConfigGetRej>
      break;
 801ebe6:	e05c      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
    case DPM_MESSAGE_REQ:
      if (0U != port)
 801ebe8:	220f      	movs	r2, #15
 801ebea:	18bb      	adds	r3, r7, r2
 801ebec:	781b      	ldrb	r3, [r3, #0]
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d009      	beq.n	801ec06 <GUI_SendAnswer+0x10a>
      {
        Request_MessageReq((port - 1U), PtrDataRx, Processed);
 801ebf2:	18bb      	adds	r3, r7, r2
 801ebf4:	781b      	ldrb	r3, [r3, #0]
 801ebf6:	3b01      	subs	r3, #1
 801ebf8:	b2db      	uxtb	r3, r3
 801ebfa:	4a35      	ldr	r2, [pc, #212]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ebfc:	4932      	ldr	r1, [pc, #200]	; (801ecc8 <GUI_SendAnswer+0x1cc>)
 801ebfe:	0018      	movs	r0, r3
 801ec00:	f000 ff78 	bl	801faf4 <Request_MessageReq>
      }
      else
      {
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801ec04:	e04d      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801ec06:	4932      	ldr	r1, [pc, #200]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ec08:	230f      	movs	r3, #15
 801ec0a:	18fb      	adds	r3, r7, r3
 801ec0c:	781b      	ldrb	r3, [r3, #0]
 801ec0e:	2205      	movs	r2, #5
 801ec10:	0018      	movs	r0, r3
 801ec12:	f002 f9f1 	bl	8020ff8 <Send_DpmMessageRej>
      break;
 801ec16:	e044      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_READ_REQ:
      if (0U != port)
 801ec18:	220f      	movs	r2, #15
 801ec1a:	18bb      	adds	r3, r7, r2
 801ec1c:	781b      	ldrb	r3, [r3, #0]
 801ec1e:	2b00      	cmp	r3, #0
 801ec20:	d01d      	beq.n	801ec5e <GUI_SendAnswer+0x162>
      {
        /* If size is 0*/
        if ((PtrDataRx[TLV_LENGTH_HIGH_POSITION] == 0U) && (PtrDataRx[TLV_LENGTH_LOW_POSITION] == 0U))
 801ec22:	4b29      	ldr	r3, [pc, #164]	; (801ecc8 <GUI_SendAnswer+0x1cc>)
 801ec24:	795b      	ldrb	r3, [r3, #5]
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d10d      	bne.n	801ec46 <GUI_SendAnswer+0x14a>
 801ec2a:	4b27      	ldr	r3, [pc, #156]	; (801ecc8 <GUI_SendAnswer+0x1cc>)
 801ec2c:	799b      	ldrb	r3, [r3, #6]
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	d109      	bne.n	801ec46 <GUI_SendAnswer+0x14a>
        {
          Send_DpmRegisterReadCnf((port - 1U), Processed, 0xFF);
 801ec32:	18bb      	adds	r3, r7, r2
 801ec34:	781b      	ldrb	r3, [r3, #0]
 801ec36:	3b01      	subs	r3, #1
 801ec38:	b2db      	uxtb	r3, r3
 801ec3a:	4925      	ldr	r1, [pc, #148]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ec3c:	22ff      	movs	r2, #255	; 0xff
 801ec3e:	0018      	movs	r0, r3
 801ec40:	f002 f9fc 	bl	802103c <Send_DpmRegisterReadCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801ec44:	e02d      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
          Send_DpmRegisterReadCnf((port - 1U), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 801ec46:	230f      	movs	r3, #15
 801ec48:	18fb      	adds	r3, r7, r3
 801ec4a:	781b      	ldrb	r3, [r3, #0]
 801ec4c:	3b01      	subs	r3, #1
 801ec4e:	b2d8      	uxtb	r0, r3
 801ec50:	4b1d      	ldr	r3, [pc, #116]	; (801ecc8 <GUI_SendAnswer+0x1cc>)
 801ec52:	79da      	ldrb	r2, [r3, #7]
 801ec54:	4b1e      	ldr	r3, [pc, #120]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ec56:	0019      	movs	r1, r3
 801ec58:	f002 f9f0 	bl	802103c <Send_DpmRegisterReadCnf>
      break;
 801ec5c:	e021      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801ec5e:	491c      	ldr	r1, [pc, #112]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ec60:	230f      	movs	r3, #15
 801ec62:	18fb      	adds	r3, r7, r3
 801ec64:	781b      	ldrb	r3, [r3, #0]
 801ec66:	2205      	movs	r2, #5
 801ec68:	0018      	movs	r0, r3
 801ec6a:	f002 f9a3 	bl	8020fb4 <Send_DpmConfigGetRej>
      break;
 801ec6e:	e018      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_WRITE_REQ:
      if (0U != port)
 801ec70:	220f      	movs	r2, #15
 801ec72:	18bb      	adds	r3, r7, r2
 801ec74:	781b      	ldrb	r3, [r3, #0]
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d009      	beq.n	801ec8e <GUI_SendAnswer+0x192>
      {
        Send_DpmRegisterWriteCnf((port - 1U), Processed, PtrDataRx);
 801ec7a:	18bb      	adds	r3, r7, r2
 801ec7c:	781b      	ldrb	r3, [r3, #0]
 801ec7e:	3b01      	subs	r3, #1
 801ec80:	b2db      	uxtb	r3, r3
 801ec82:	4a11      	ldr	r2, [pc, #68]	; (801ecc8 <GUI_SendAnswer+0x1cc>)
 801ec84:	4912      	ldr	r1, [pc, #72]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ec86:	0018      	movs	r0, r3
 801ec88:	f002 fa36 	bl	80210f8 <Send_DpmRegisterWriteCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801ec8c:	e009      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801ec8e:	4910      	ldr	r1, [pc, #64]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ec90:	230f      	movs	r3, #15
 801ec92:	18fb      	adds	r3, r7, r3
 801ec94:	781b      	ldrb	r3, [r3, #0]
 801ec96:	2205      	movs	r2, #5
 801ec98:	0018      	movs	r0, r3
 801ec9a:	f002 f98b 	bl	8020fb4 <Send_DpmConfigGetRej>
      break;
 801ec9e:	e000      	b.n	801eca2 <GUI_SendAnswer+0x1a6>
    default :
      break;
 801eca0:	46c0      	nop			; (mov r8, r8)
  }

  *pMsgToSend = Processed;
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	4a0a      	ldr	r2, [pc, #40]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801eca6:	601a      	str	r2, [r3, #0]
  *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 801eca8:	4b09      	ldr	r3, [pc, #36]	; (801ecd0 <GUI_SendAnswer+0x1d4>)
 801ecaa:	0018      	movs	r0, r3
 801ecac:	f7ff fb38 	bl	801e320 <TLV_get_string_length>
 801ecb0:	0003      	movs	r3, r0
 801ecb2:	b2db      	uxtb	r3, r3
 801ecb4:	3308      	adds	r3, #8
 801ecb6:	b2da      	uxtb	r2, r3
 801ecb8:	683b      	ldr	r3, [r7, #0]
 801ecba:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 801ecbc:	4b05      	ldr	r3, [pc, #20]	; (801ecd4 <GUI_SendAnswer+0x1d8>)
 801ecbe:	781b      	ldrb	r3, [r3, #0]
}
 801ecc0:	0018      	movs	r0, r3
 801ecc2:	46bd      	mov	sp, r7
 801ecc4:	b005      	add	sp, #20
 801ecc6:	bd90      	pop	{r4, r7, pc}
 801ecc8:	2000493c 	.word	0x2000493c
 801eccc:	080242dc 	.word	0x080242dc
 801ecd0:	20004a3c 	.word	0x20004a3c
 801ecd4:	20004b3c 	.word	0x20004b3c
 801ecd8:	00006020 	.word	0x00006020

0801ecdc <GUI_SendNotification>:
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg,
                                     uint32_t TypeNotification, uint32_t Value)
{
 801ecdc:	b5b0      	push	{r4, r5, r7, lr}
 801ecde:	b0a6      	sub	sp, #152	; 0x98
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	60b9      	str	r1, [r7, #8]
 801ece4:	607a      	str	r2, [r7, #4]
 801ece6:	603b      	str	r3, [r7, #0]
 801ece8:	240f      	movs	r4, #15
 801ecea:	193b      	adds	r3, r7, r4
 801ecec:	1c02      	adds	r2, r0, #0
 801ecee:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 801ecf0:	2397      	movs	r3, #151	; 0x97
 801ecf2:	18fb      	adds	r3, r7, r3
 801ecf4:	2200      	movs	r2, #0
 801ecf6:	701a      	strb	r2, [r3, #0]

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 801ecf8:	4bbf      	ldr	r3, [pc, #764]	; (801eff8 <GUI_SendNotification+0x31c>)
 801ecfa:	781b      	ldrb	r3, [r3, #0]
 801ecfc:	2b01      	cmp	r3, #1
 801ecfe:	d001      	beq.n	801ed04 <GUI_SendNotification+0x28>
 801ed00:	f000 fbe4 	bl	801f4cc <GUI_SendNotification+0x7f0>
  {
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1U), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 801ed04:	193b      	adds	r3, r7, r4
 801ed06:	781b      	ldrb	r3, [r3, #0]
 801ed08:	3301      	adds	r3, #1
 801ed0a:	b2db      	uxtb	r3, r3
 801ed0c:	015b      	lsls	r3, r3, #5
 801ed0e:	b2db      	uxtb	r3, r3
 801ed10:	220c      	movs	r2, #12
 801ed12:	4313      	orrs	r3, r2
 801ed14:	b2d9      	uxtb	r1, r3
 801ed16:	4bb9      	ldr	r3, [pc, #740]	; (801effc <GUI_SendNotification+0x320>)
 801ed18:	2280      	movs	r2, #128	; 0x80
 801ed1a:	0052      	lsls	r2, r2, #1
 801ed1c:	2584      	movs	r5, #132	; 0x84
 801ed1e:	1978      	adds	r0, r7, r5
 801ed20:	f7ff f893 	bl	801de4a <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 801ed24:	683b      	ldr	r3, [r7, #0]
 801ed26:	2220      	movs	r2, #32
 801ed28:	4013      	ands	r3, r2
 801ed2a:	d100      	bne.n	801ed2e <GUI_SendNotification+0x52>
 801ed2c:	e08d      	b.n	801ee4a <GUI_SendNotification+0x16e>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                    (uint8_t[]){ DPM_Params[PortNum].PE_Power });
 801ed2e:	193b      	adds	r3, r7, r4
 801ed30:	781b      	ldrb	r3, [r3, #0]
 801ed32:	4ab3      	ldr	r2, [pc, #716]	; (801f000 <GUI_SendNotification+0x324>)
 801ed34:	009b      	lsls	r3, r3, #2
 801ed36:	18d3      	adds	r3, r2, r3
 801ed38:	785b      	ldrb	r3, [r3, #1]
 801ed3a:	075b      	lsls	r3, r3, #29
 801ed3c:	0f5b      	lsrs	r3, r3, #29
 801ed3e:	b2db      	uxtb	r3, r3
 801ed40:	001a      	movs	r2, r3
 801ed42:	2180      	movs	r1, #128	; 0x80
 801ed44:	187b      	adds	r3, r7, r1
 801ed46:	701a      	strb	r2, [r3, #0]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 801ed48:	187b      	adds	r3, r7, r1
 801ed4a:	1978      	adds	r0, r7, r5
 801ed4c:	2201      	movs	r2, #1
 801ed4e:	2105      	movs	r1, #5
 801ed50:	f7ff f8de 	bl	801df10 <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 801ed54:	193b      	adds	r3, r7, r4
 801ed56:	781b      	ldrb	r3, [r3, #0]
 801ed58:	4aa9      	ldr	r2, [pc, #676]	; (801f000 <GUI_SendNotification+0x324>)
 801ed5a:	009b      	lsls	r3, r3, #2
 801ed5c:	18d3      	adds	r3, r2, r3
 801ed5e:	785b      	ldrb	r3, [r3, #1]
 801ed60:	06db      	lsls	r3, r3, #27
 801ed62:	0fdb      	lsrs	r3, r3, #31
 801ed64:	b2db      	uxtb	r3, r3
 801ed66:	2b01      	cmp	r3, #1
 801ed68:	d16f      	bne.n	801ee4a <GUI_SendNotification+0x16e>
      {
        uint8_t rp_value;
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                      (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801ed6a:	193b      	adds	r3, r7, r4
 801ed6c:	781a      	ldrb	r2, [r3, #0]
 801ed6e:	4ba4      	ldr	r3, [pc, #656]	; (801f000 <GUI_SendNotification+0x324>)
 801ed70:	0092      	lsls	r2, r2, #2
 801ed72:	5cd3      	ldrb	r3, [r2, r3]
 801ed74:	061b      	lsls	r3, r3, #24
 801ed76:	0f9b      	lsrs	r3, r3, #30
 801ed78:	b2db      	uxtb	r3, r3
 801ed7a:	001a      	movs	r2, r3
 801ed7c:	217c      	movs	r1, #124	; 0x7c
 801ed7e:	187b      	adds	r3, r7, r1
 801ed80:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 801ed82:	187b      	adds	r3, r7, r1
 801ed84:	1978      	adds	r0, r7, r5
 801ed86:	2201      	movs	r2, #1
 801ed88:	2106      	movs	r1, #6
 801ed8a:	f7ff f8c1 	bl	801df10 <TLV_add>
        /* Power Role*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                      (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801ed8e:	193b      	adds	r3, r7, r4
 801ed90:	781a      	ldrb	r2, [r3, #0]
 801ed92:	4b9b      	ldr	r3, [pc, #620]	; (801f000 <GUI_SendNotification+0x324>)
 801ed94:	0092      	lsls	r2, r2, #2
 801ed96:	5cd3      	ldrb	r3, [r2, r3]
 801ed98:	075b      	lsls	r3, r3, #29
 801ed9a:	0fdb      	lsrs	r3, r3, #31
 801ed9c:	b2db      	uxtb	r3, r3
 801ed9e:	001a      	movs	r2, r3
 801eda0:	2178      	movs	r1, #120	; 0x78
 801eda2:	187b      	adds	r3, r7, r1
 801eda4:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801eda6:	187b      	adds	r3, r7, r1
 801eda8:	1978      	adds	r0, r7, r5
 801edaa:	2201      	movs	r2, #1
 801edac:	2108      	movs	r1, #8
 801edae:	f7ff f8af 	bl	801df10 <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 801edb2:	217f      	movs	r1, #127	; 0x7f
 801edb4:	187b      	adds	r3, r7, r1
 801edb6:	2203      	movs	r2, #3
 801edb8:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 801edba:	187b      	adds	r3, r7, r1
 801edbc:	1978      	adds	r0, r7, r5
 801edbe:	2201      	movs	r2, #1
 801edc0:	2109      	movs	r1, #9
 801edc2:	f7ff f8a5 	bl	801df10 <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 801edc6:	193b      	adds	r3, r7, r4
 801edc8:	781b      	ldrb	r3, [r3, #0]
 801edca:	4a8d      	ldr	r2, [pc, #564]	; (801f000 <GUI_SendNotification+0x324>)
 801edcc:	009b      	lsls	r3, r3, #2
 801edce:	18d3      	adds	r3, r2, r3
 801edd0:	785b      	ldrb	r3, [r3, #1]
 801edd2:	075b      	lsls	r3, r3, #29
 801edd4:	0f5b      	lsrs	r3, r3, #29
 801edd6:	b2db      	uxtb	r3, r3
 801edd8:	2b03      	cmp	r3, #3
 801edda:	d136      	bne.n	801ee4a <GUI_SendNotification+0x16e>
        {
          /* Data Role*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 801eddc:	193b      	adds	r3, r7, r4
 801edde:	781a      	ldrb	r2, [r3, #0]
 801ede0:	4b87      	ldr	r3, [pc, #540]	; (801f000 <GUI_SendNotification+0x324>)
 801ede2:	0092      	lsls	r2, r2, #2
 801ede4:	5cd3      	ldrb	r3, [r2, r3]
 801ede6:	071b      	lsls	r3, r3, #28
 801ede8:	0fdb      	lsrs	r3, r3, #31
 801edea:	b2db      	uxtb	r3, r3
 801edec:	001a      	movs	r2, r3
 801edee:	2174      	movs	r1, #116	; 0x74
 801edf0:	187b      	adds	r3, r7, r1
 801edf2:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 801edf4:	187b      	adds	r3, r7, r1
 801edf6:	1978      	adds	r0, r7, r5
 801edf8:	2201      	movs	r2, #1
 801edfa:	2107      	movs	r1, #7
 801edfc:	f7ff f888 	bl	801df10 <TLV_add>
          /* Vconn ON*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                        (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 801ee00:	193b      	adds	r3, r7, r4
 801ee02:	781b      	ldrb	r3, [r3, #0]
 801ee04:	4a7e      	ldr	r2, [pc, #504]	; (801f000 <GUI_SendNotification+0x324>)
 801ee06:	009b      	lsls	r3, r3, #2
 801ee08:	18d3      	adds	r3, r2, r3
 801ee0a:	785b      	ldrb	r3, [r3, #1]
 801ee0c:	061b      	lsls	r3, r3, #24
 801ee0e:	0fdb      	lsrs	r3, r3, #31
 801ee10:	b2db      	uxtb	r3, r3
 801ee12:	001a      	movs	r2, r3
 801ee14:	2170      	movs	r1, #112	; 0x70
 801ee16:	187b      	adds	r3, r7, r1
 801ee18:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 801ee1a:	187b      	adds	r3, r7, r1
 801ee1c:	1978      	adds	r0, r7, r5
 801ee1e:	2201      	movs	r2, #1
 801ee20:	210a      	movs	r1, #10
 801ee22:	f7ff f875 	bl	801df10 <TLV_add>
          /* PD_Spec Revision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801ee26:	193b      	adds	r3, r7, r4
 801ee28:	781a      	ldrb	r2, [r3, #0]
 801ee2a:	4b75      	ldr	r3, [pc, #468]	; (801f000 <GUI_SendNotification+0x324>)
 801ee2c:	0092      	lsls	r2, r2, #2
 801ee2e:	5cd3      	ldrb	r3, [r2, r3]
 801ee30:	079b      	lsls	r3, r3, #30
 801ee32:	0f9b      	lsrs	r3, r3, #30
 801ee34:	b2db      	uxtb	r3, r3
 801ee36:	001a      	movs	r2, r3
 801ee38:	216c      	movs	r1, #108	; 0x6c
 801ee3a:	187b      	adds	r3, r7, r1
 801ee3c:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 801ee3e:	187b      	adds	r3, r7, r1
 801ee40:	1978      	adds	r0, r7, r5
 801ee42:	2201      	movs	r2, #1
 801ee44:	210d      	movs	r1, #13
 801ee46:	f7ff f863 	bl	801df10 <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 801ee4a:	683a      	ldr	r2, [r7, #0]
 801ee4c:	2380      	movs	r3, #128	; 0x80
 801ee4e:	019b      	lsls	r3, r3, #6
 801ee50:	4013      	ands	r3, r2
 801ee52:	d100      	bne.n	801ee56 <GUI_SendNotification+0x17a>
 801ee54:	e27d      	b.n	801f352 <GUI_SendNotification+0x676>
    {
      if ((uint32_t)USBPD_NOTIFY_ALL != Value)
 801ee56:	22a0      	movs	r2, #160	; 0xa0
 801ee58:	2108      	movs	r1, #8
 801ee5a:	1853      	adds	r3, r2, r1
 801ee5c:	19db      	adds	r3, r3, r7
 801ee5e:	681b      	ldr	r3, [r3, #0]
 801ee60:	2b70      	cmp	r3, #112	; 0x70
 801ee62:	d100      	bne.n	801ee66 <GUI_SendNotification+0x18a>
 801ee64:	e1c1      	b.n	801f1ea <GUI_SendNotification+0x50e>
      {
        /* PD_MessageNotif */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t *)&Value);
 801ee66:	2384      	movs	r3, #132	; 0x84
 801ee68:	18f8      	adds	r0, r7, r3
 801ee6a:	0014      	movs	r4, r2
 801ee6c:	000d      	movs	r5, r1
 801ee6e:	1853      	adds	r3, r2, r1
 801ee70:	19db      	adds	r3, r3, r7
 801ee72:	2201      	movs	r2, #1
 801ee74:	210e      	movs	r1, #14
 801ee76:	f7ff f84b 	bl	801df10 <TLV_add>

        switch (Value)
 801ee7a:	0022      	movs	r2, r4
 801ee7c:	1953      	adds	r3, r2, r5
 801ee7e:	19db      	adds	r3, r3, r7
 801ee80:	681b      	ldr	r3, [r3, #0]
 801ee82:	2b42      	cmp	r3, #66	; 0x42
 801ee84:	d80b      	bhi.n	801ee9e <GUI_SendNotification+0x1c2>
 801ee86:	2b07      	cmp	r3, #7
 801ee88:	d200      	bcs.n	801ee8c <GUI_SendNotification+0x1b0>
 801ee8a:	e25b      	b.n	801f344 <GUI_SendNotification+0x668>
 801ee8c:	3b07      	subs	r3, #7
 801ee8e:	2b3b      	cmp	r3, #59	; 0x3b
 801ee90:	d900      	bls.n	801ee94 <GUI_SendNotification+0x1b8>
 801ee92:	e257      	b.n	801f344 <GUI_SendNotification+0x668>
 801ee94:	009a      	lsls	r2, r3, #2
 801ee96:	4b5b      	ldr	r3, [pc, #364]	; (801f004 <GUI_SendNotification+0x328>)
 801ee98:	18d3      	adds	r3, r2, r3
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	469f      	mov	pc, r3
 801ee9e:	2b5a      	cmp	r3, #90	; 0x5a
 801eea0:	d000      	beq.n	801eea4 <GUI_SendNotification+0x1c8>
 801eea2:	e24f      	b.n	801f344 <GUI_SendNotification+0x668>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 801eea4:	240f      	movs	r4, #15
 801eea6:	193b      	adds	r3, r7, r4
 801eea8:	781b      	ldrb	r3, [r3, #0]
 801eeaa:	4a55      	ldr	r2, [pc, #340]	; (801f000 <GUI_SendNotification+0x324>)
 801eeac:	009b      	lsls	r3, r3, #2
 801eeae:	18d3      	adds	r3, r2, r3
 801eeb0:	785b      	ldrb	r3, [r3, #1]
 801eeb2:	075b      	lsls	r3, r3, #29
 801eeb4:	0f5b      	lsrs	r3, r3, #29
 801eeb6:	b2db      	uxtb	r3, r3
 801eeb8:	001a      	movs	r2, r3
 801eeba:	2168      	movs	r1, #104	; 0x68
 801eebc:	187b      	adds	r3, r7, r1
 801eebe:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 801eec0:	187b      	adds	r3, r7, r1
 801eec2:	2584      	movs	r5, #132	; 0x84
 801eec4:	1978      	adds	r0, r7, r5
 801eec6:	2201      	movs	r2, #1
 801eec8:	2105      	movs	r1, #5
 801eeca:	f7ff f821 	bl	801df10 <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 801eece:	193b      	adds	r3, r7, r4
 801eed0:	781b      	ldrb	r3, [r3, #0]
 801eed2:	4a4b      	ldr	r2, [pc, #300]	; (801f000 <GUI_SendNotification+0x324>)
 801eed4:	009b      	lsls	r3, r3, #2
 801eed6:	18d3      	adds	r3, r2, r3
 801eed8:	785b      	ldrb	r3, [r3, #1]
 801eeda:	075b      	lsls	r3, r3, #29
 801eedc:	0f5b      	lsrs	r3, r3, #29
 801eede:	b2db      	uxtb	r3, r3
 801eee0:	2b00      	cmp	r3, #0
 801eee2:	d000      	beq.n	801eee6 <GUI_SendNotification+0x20a>
 801eee4:	e234      	b.n	801f350 <GUI_SendNotification+0x674>
            {
              /* CC line */
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                            (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801eee6:	193b      	adds	r3, r7, r4
 801eee8:	781a      	ldrb	r2, [r3, #0]
 801eeea:	4b45      	ldr	r3, [pc, #276]	; (801f000 <GUI_SendNotification+0x324>)
 801eeec:	0092      	lsls	r2, r2, #2
 801eeee:	5cd3      	ldrb	r3, [r2, r3]
 801eef0:	061b      	lsls	r3, r3, #24
 801eef2:	0f9b      	lsrs	r3, r3, #30
 801eef4:	b2db      	uxtb	r3, r3
 801eef6:	001a      	movs	r2, r3
 801eef8:	2138      	movs	r1, #56	; 0x38
 801eefa:	187b      	adds	r3, r7, r1
 801eefc:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 801eefe:	187b      	adds	r3, r7, r1
 801ef00:	1978      	adds	r0, r7, r5
 801ef02:	2201      	movs	r2, #1
 801ef04:	2106      	movs	r1, #6
 801ef06:	f7ff f803 	bl	801df10 <TLV_add>
              /* PowerRole*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                            (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801ef0a:	193b      	adds	r3, r7, r4
 801ef0c:	781a      	ldrb	r2, [r3, #0]
 801ef0e:	4b3c      	ldr	r3, [pc, #240]	; (801f000 <GUI_SendNotification+0x324>)
 801ef10:	0092      	lsls	r2, r2, #2
 801ef12:	5cd3      	ldrb	r3, [r2, r3]
 801ef14:	075b      	lsls	r3, r3, #29
 801ef16:	0fdb      	lsrs	r3, r3, #31
 801ef18:	b2db      	uxtb	r3, r3
 801ef1a:	001a      	movs	r2, r3
 801ef1c:	2134      	movs	r1, #52	; 0x34
 801ef1e:	187b      	adds	r3, r7, r1
 801ef20:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801ef22:	187b      	adds	r3, r7, r1
 801ef24:	1978      	adds	r0, r7, r5
 801ef26:	2201      	movs	r2, #1
 801ef28:	2108      	movs	r1, #8
 801ef2a:	f7fe fff1 	bl	801df10 <TLV_add>
            }
            break;
 801ef2e:	e20f      	b.n	801f350 <GUI_SendNotification+0x674>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO
 801ef30:	240f      	movs	r4, #15
 801ef32:	193b      	adds	r3, r7, r4
 801ef34:	781a      	ldrb	r2, [r3, #0]
 801ef36:	4934      	ldr	r1, [pc, #208]	; (801f008 <GUI_SendNotification+0x32c>)
 801ef38:	0013      	movs	r3, r2
 801ef3a:	00db      	lsls	r3, r3, #3
 801ef3c:	1a9b      	subs	r3, r3, r2
 801ef3e:	011b      	lsls	r3, r3, #4
 801ef40:	18cb      	adds	r3, r1, r3
 801ef42:	333c      	adds	r3, #60	; 0x3c
 801ef44:	681b      	ldr	r3, [r3, #0]
 801ef46:	b2da      	uxtb	r2, r3
 801ef48:	2164      	movs	r1, #100	; 0x64
 801ef4a:	187b      	adds	r3, r7, r1
 801ef4c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 801ef4e:	187b      	adds	r3, r7, r1
 801ef50:	2584      	movs	r5, #132	; 0x84
 801ef52:	1978      	adds	r0, r7, r5
 801ef54:	2201      	movs	r2, #1
 801ef56:	2100      	movs	r1, #0
 801ef58:	f7fe ffda 	bl	801df10 <TLV_add>
            });
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 801ef5c:	193b      	adds	r3, r7, r4
 801ef5e:	781a      	ldrb	r2, [r3, #0]
 801ef60:	4929      	ldr	r1, [pc, #164]	; (801f008 <GUI_SendNotification+0x32c>)
 801ef62:	0013      	movs	r3, r2
 801ef64:	00db      	lsls	r3, r3, #3
 801ef66:	1a9b      	subs	r3, r3, r2
 801ef68:	011b      	lsls	r3, r3, #4
 801ef6a:	18cb      	adds	r3, r1, r3
 801ef6c:	333c      	adds	r3, #60	; 0x3c
 801ef6e:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801ef70:	b29b      	uxth	r3, r3
 801ef72:	009b      	lsls	r3, r3, #2
 801ef74:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 801ef76:	193b      	adds	r3, r7, r4
 801ef78:	781a      	ldrb	r2, [r3, #0]
 801ef7a:	0013      	movs	r3, r2
 801ef7c:	00db      	lsls	r3, r3, #3
 801ef7e:	1a9b      	subs	r3, r3, r2
 801ef80:	011b      	lsls	r3, r3, #4
 801ef82:	3320      	adds	r3, #32
 801ef84:	001a      	movs	r2, r3
 801ef86:	4b20      	ldr	r3, [pc, #128]	; (801f008 <GUI_SendNotification+0x32c>)
 801ef88:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801ef8a:	1978      	adds	r0, r7, r5
 801ef8c:	000a      	movs	r2, r1
 801ef8e:	2104      	movs	r1, #4
 801ef90:	f7fe ffbe 	bl	801df10 <TLV_add>
            break;
 801ef94:	e1dd      	b.n	801f352 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 801ef96:	240f      	movs	r4, #15
 801ef98:	193b      	adds	r3, r7, r4
 801ef9a:	781a      	ldrb	r2, [r3, #0]
 801ef9c:	491a      	ldr	r1, [pc, #104]	; (801f008 <GUI_SendNotification+0x32c>)
 801ef9e:	0013      	movs	r3, r2
 801efa0:	00db      	lsls	r3, r3, #3
 801efa2:	1a9b      	subs	r3, r3, r2
 801efa4:	011b      	lsls	r3, r3, #4
 801efa6:	18cb      	adds	r3, r1, r3
 801efa8:	331c      	adds	r3, #28
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	b2da      	uxtb	r2, r3
 801efae:	2160      	movs	r1, #96	; 0x60
 801efb0:	187b      	adds	r3, r7, r1
 801efb2:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 801efb4:	187b      	adds	r3, r7, r1
 801efb6:	2584      	movs	r5, #132	; 0x84
 801efb8:	1978      	adds	r0, r7, r5
 801efba:	2201      	movs	r2, #1
 801efbc:	2103      	movs	r1, #3
 801efbe:	f7fe ffa7 	bl	801df10 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 801efc2:	193b      	adds	r3, r7, r4
 801efc4:	781a      	ldrb	r2, [r3, #0]
 801efc6:	4910      	ldr	r1, [pc, #64]	; (801f008 <GUI_SendNotification+0x32c>)
 801efc8:	0013      	movs	r3, r2
 801efca:	00db      	lsls	r3, r3, #3
 801efcc:	1a9b      	subs	r3, r3, r2
 801efce:	011b      	lsls	r3, r3, #4
 801efd0:	18cb      	adds	r3, r1, r3
 801efd2:	331c      	adds	r3, #28
 801efd4:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801efd6:	b29b      	uxth	r3, r3
 801efd8:	009b      	lsls	r3, r3, #2
 801efda:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 801efdc:	193b      	adds	r3, r7, r4
 801efde:	781a      	ldrb	r2, [r3, #0]
 801efe0:	0013      	movs	r3, r2
 801efe2:	00db      	lsls	r3, r3, #3
 801efe4:	1a9b      	subs	r3, r3, r2
 801efe6:	011b      	lsls	r3, r3, #4
 801efe8:	4a07      	ldr	r2, [pc, #28]	; (801f008 <GUI_SendNotification+0x32c>)
 801efea:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801efec:	1978      	adds	r0, r7, r5
 801efee:	000a      	movs	r2, r1
 801eff0:	2102      	movs	r1, #2
 801eff2:	f7fe ff8d 	bl	801df10 <TLV_add>
            break;
 801eff6:	e1ac      	b.n	801f352 <GUI_SendNotification+0x676>
 801eff8:	20004b3c 	.word	0x20004b3c
 801effc:	20004a3c 	.word	0x20004a3c
 801f000:	20002ef0 	.word	0x20002ef0
 801f004:	08024320 	.word	0x08024320
 801f008:	20004b5c 	.word	0x20004b5c
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 801f00c:	240f      	movs	r4, #15
 801f00e:	193b      	adds	r3, r7, r4
 801f010:	781a      	ldrb	r2, [r3, #0]
 801f012:	4bcd      	ldr	r3, [pc, #820]	; (801f348 <GUI_SendNotification+0x66c>)
 801f014:	0092      	lsls	r2, r2, #2
 801f016:	5cd3      	ldrb	r3, [r2, r3]
 801f018:	075b      	lsls	r3, r3, #29
 801f01a:	0fdb      	lsrs	r3, r3, #31
 801f01c:	b2db      	uxtb	r3, r3
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d12e      	bne.n	801f080 <GUI_SendNotification+0x3a4>
            {
              /* NumberOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                            (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 801f022:	193b      	adds	r3, r7, r4
 801f024:	781a      	ldrb	r2, [r3, #0]
 801f026:	49c9      	ldr	r1, [pc, #804]	; (801f34c <GUI_SendNotification+0x670>)
 801f028:	0013      	movs	r3, r2
 801f02a:	00db      	lsls	r3, r3, #3
 801f02c:	1a9b      	subs	r3, r3, r2
 801f02e:	011b      	lsls	r3, r3, #4
 801f030:	18cb      	adds	r3, r1, r3
 801f032:	331c      	adds	r3, #28
 801f034:	681b      	ldr	r3, [r3, #0]
 801f036:	b2da      	uxtb	r2, r3
 801f038:	2130      	movs	r1, #48	; 0x30
 801f03a:	187b      	adds	r3, r7, r1
 801f03c:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 801f03e:	187b      	adds	r3, r7, r1
 801f040:	2584      	movs	r5, #132	; 0x84
 801f042:	1978      	adds	r0, r7, r5
 801f044:	2201      	movs	r2, #1
 801f046:	2103      	movs	r1, #3
 801f048:	f7fe ff62 	bl	801df10 <TLV_add>
              /* ListOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                            (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 801f04c:	193b      	adds	r3, r7, r4
 801f04e:	781a      	ldrb	r2, [r3, #0]
 801f050:	49be      	ldr	r1, [pc, #760]	; (801f34c <GUI_SendNotification+0x670>)
 801f052:	0013      	movs	r3, r2
 801f054:	00db      	lsls	r3, r3, #3
 801f056:	1a9b      	subs	r3, r3, r2
 801f058:	011b      	lsls	r3, r3, #4
 801f05a:	18cb      	adds	r3, r1, r3
 801f05c:	331c      	adds	r3, #28
 801f05e:	681b      	ldr	r3, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801f060:	b29b      	uxth	r3, r3
 801f062:	009b      	lsls	r3, r3, #2
 801f064:	b299      	uxth	r1, r3
                            (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 801f066:	193b      	adds	r3, r7, r4
 801f068:	781a      	ldrb	r2, [r3, #0]
 801f06a:	0013      	movs	r3, r2
 801f06c:	00db      	lsls	r3, r3, #3
 801f06e:	1a9b      	subs	r3, r3, r2
 801f070:	011b      	lsls	r3, r3, #4
 801f072:	4ab6      	ldr	r2, [pc, #728]	; (801f34c <GUI_SendNotification+0x670>)
 801f074:	189b      	adds	r3, r3, r2
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801f076:	1978      	adds	r0, r7, r5
 801f078:	000a      	movs	r2, r1
 801f07a:	2102      	movs	r1, #2
 801f07c:	f7fe ff48 	bl	801df10 <TLV_add>
            }
            /* RDOPosition */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 801f080:	240f      	movs	r4, #15
 801f082:	193b      	adds	r3, r7, r4
 801f084:	781a      	ldrb	r2, [r3, #0]
 801f086:	49b1      	ldr	r1, [pc, #708]	; (801f34c <GUI_SendNotification+0x670>)
 801f088:	0013      	movs	r3, r2
 801f08a:	00db      	lsls	r3, r3, #3
 801f08c:	1a9b      	subs	r3, r3, r2
 801f08e:	011b      	lsls	r3, r3, #4
 801f090:	18cb      	adds	r3, r1, r3
 801f092:	3340      	adds	r3, #64	; 0x40
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	b2da      	uxtb	r2, r3
 801f098:	215c      	movs	r1, #92	; 0x5c
 801f09a:	187b      	adds	r3, r7, r1
 801f09c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 801f09e:	187b      	adds	r3, r7, r1
 801f0a0:	2584      	movs	r5, #132	; 0x84
 801f0a2:	1978      	adds	r0, r7, r5
 801f0a4:	2201      	movs	r2, #1
 801f0a6:	2101      	movs	r1, #1
 801f0a8:	f7fe ff32 	bl	801df10 <TLV_add>
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 801f0ac:	193b      	adds	r3, r7, r4
 801f0ae:	781a      	ldrb	r2, [r3, #0]
 801f0b0:	4ba5      	ldr	r3, [pc, #660]	; (801f348 <GUI_SendNotification+0x66c>)
 801f0b2:	0092      	lsls	r2, r2, #2
 801f0b4:	5cd3      	ldrb	r3, [r2, r3]
 801f0b6:	071b      	lsls	r3, r3, #28
 801f0b8:	0fdb      	lsrs	r3, r3, #31
 801f0ba:	b2db      	uxtb	r3, r3
 801f0bc:	001a      	movs	r2, r3
 801f0be:	2158      	movs	r1, #88	; 0x58
 801f0c0:	187b      	adds	r3, r7, r1
 801f0c2:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 801f0c4:	187b      	adds	r3, r7, r1
 801f0c6:	1978      	adds	r0, r7, r5
 801f0c8:	2201      	movs	r2, #1
 801f0ca:	2107      	movs	r1, #7
 801f0cc:	f7fe ff20 	bl	801df10 <TLV_add>
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801f0d0:	193b      	adds	r3, r7, r4
 801f0d2:	781a      	ldrb	r2, [r3, #0]
 801f0d4:	4b9c      	ldr	r3, [pc, #624]	; (801f348 <GUI_SendNotification+0x66c>)
 801f0d6:	0092      	lsls	r2, r2, #2
 801f0d8:	5cd3      	ldrb	r3, [r2, r3]
 801f0da:	075b      	lsls	r3, r3, #29
 801f0dc:	0fdb      	lsrs	r3, r3, #31
 801f0de:	b2db      	uxtb	r3, r3
 801f0e0:	001a      	movs	r2, r3
 801f0e2:	2154      	movs	r1, #84	; 0x54
 801f0e4:	187b      	adds	r3, r7, r1
 801f0e6:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801f0e8:	187b      	adds	r3, r7, r1
 801f0ea:	1978      	adds	r0, r7, r5
 801f0ec:	2201      	movs	r2, #1
 801f0ee:	2108      	movs	r1, #8
 801f0f0:	f7fe ff0e 	bl	801df10 <TLV_add>
            /* VconnON*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 801f0f4:	193b      	adds	r3, r7, r4
 801f0f6:	781b      	ldrb	r3, [r3, #0]
 801f0f8:	4a93      	ldr	r2, [pc, #588]	; (801f348 <GUI_SendNotification+0x66c>)
 801f0fa:	009b      	lsls	r3, r3, #2
 801f0fc:	18d3      	adds	r3, r2, r3
 801f0fe:	785b      	ldrb	r3, [r3, #1]
 801f100:	061b      	lsls	r3, r3, #24
 801f102:	0fdb      	lsrs	r3, r3, #31
 801f104:	b2db      	uxtb	r3, r3
 801f106:	001a      	movs	r2, r3
 801f108:	2150      	movs	r1, #80	; 0x50
 801f10a:	187b      	adds	r3, r7, r1
 801f10c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 801f10e:	187b      	adds	r3, r7, r1
 801f110:	1978      	adds	r0, r7, r5
 801f112:	2201      	movs	r2, #1
 801f114:	210a      	movs	r1, #10
 801f116:	f7fe fefb 	bl	801df10 <TLV_add>
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801f11a:	193b      	adds	r3, r7, r4
 801f11c:	781a      	ldrb	r2, [r3, #0]
 801f11e:	4b8a      	ldr	r3, [pc, #552]	; (801f348 <GUI_SendNotification+0x66c>)
 801f120:	0092      	lsls	r2, r2, #2
 801f122:	5cd3      	ldrb	r3, [r2, r3]
 801f124:	079b      	lsls	r3, r3, #30
 801f126:	0f9b      	lsrs	r3, r3, #30
 801f128:	b2db      	uxtb	r3, r3
 801f12a:	001a      	movs	r2, r3
 801f12c:	214c      	movs	r1, #76	; 0x4c
 801f12e:	187b      	adds	r3, r7, r1
 801f130:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 801f132:	187b      	adds	r3, r7, r1
 801f134:	1978      	adds	r0, r7, r5
 801f136:	2201      	movs	r2, #1
 801f138:	210d      	movs	r1, #13
 801f13a:	f7fe fee9 	bl	801df10 <TLV_add>
            break;
 801f13e:	e108      	b.n	801f352 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801f140:	230f      	movs	r3, #15
 801f142:	18fb      	adds	r3, r7, r3
 801f144:	781a      	ldrb	r2, [r3, #0]
 801f146:	4b80      	ldr	r3, [pc, #512]	; (801f348 <GUI_SendNotification+0x66c>)
 801f148:	0092      	lsls	r2, r2, #2
 801f14a:	5cd3      	ldrb	r3, [r2, r3]
 801f14c:	075b      	lsls	r3, r3, #29
 801f14e:	0fdb      	lsrs	r3, r3, #31
 801f150:	b2db      	uxtb	r3, r3
 801f152:	001a      	movs	r2, r3
 801f154:	2148      	movs	r1, #72	; 0x48
 801f156:	187b      	adds	r3, r7, r1
 801f158:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801f15a:	187b      	adds	r3, r7, r1
 801f15c:	2284      	movs	r2, #132	; 0x84
 801f15e:	18b8      	adds	r0, r7, r2
 801f160:	2201      	movs	r2, #1
 801f162:	2108      	movs	r1, #8
 801f164:	f7fe fed4 	bl	801df10 <TLV_add>
            break;
 801f168:	e0f3      	b.n	801f352 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 801f16a:	230f      	movs	r3, #15
 801f16c:	18fb      	adds	r3, r7, r3
 801f16e:	781a      	ldrb	r2, [r3, #0]
 801f170:	4b75      	ldr	r3, [pc, #468]	; (801f348 <GUI_SendNotification+0x66c>)
 801f172:	0092      	lsls	r2, r2, #2
 801f174:	5cd3      	ldrb	r3, [r2, r3]
 801f176:	071b      	lsls	r3, r3, #28
 801f178:	0fdb      	lsrs	r3, r3, #31
 801f17a:	b2db      	uxtb	r3, r3
 801f17c:	001a      	movs	r2, r3
 801f17e:	2144      	movs	r1, #68	; 0x44
 801f180:	187b      	adds	r3, r7, r1
 801f182:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 801f184:	187b      	adds	r3, r7, r1
 801f186:	2284      	movs	r2, #132	; 0x84
 801f188:	18b8      	adds	r0, r7, r2
 801f18a:	2201      	movs	r2, #1
 801f18c:	2107      	movs	r1, #7
 801f18e:	f7fe febf 	bl	801df10 <TLV_add>
            break;
 801f192:	e0de      	b.n	801f352 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801f194:	230f      	movs	r3, #15
 801f196:	18fb      	adds	r3, r7, r3
 801f198:	781a      	ldrb	r2, [r3, #0]
 801f19a:	4b6b      	ldr	r3, [pc, #428]	; (801f348 <GUI_SendNotification+0x66c>)
 801f19c:	0092      	lsls	r2, r2, #2
 801f19e:	5cd3      	ldrb	r3, [r2, r3]
 801f1a0:	079b      	lsls	r3, r3, #30
 801f1a2:	0f9b      	lsrs	r3, r3, #30
 801f1a4:	b2db      	uxtb	r3, r3
 801f1a6:	001a      	movs	r2, r3
 801f1a8:	2140      	movs	r1, #64	; 0x40
 801f1aa:	187b      	adds	r3, r7, r1
 801f1ac:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 801f1ae:	187b      	adds	r3, r7, r1
 801f1b0:	2284      	movs	r2, #132	; 0x84
 801f1b2:	18b8      	adds	r0, r7, r2
 801f1b4:	2201      	movs	r2, #1
 801f1b6:	210d      	movs	r1, #13
 801f1b8:	f7fe feaa 	bl	801df10 <TLV_add>
            break;
 801f1bc:	e0c9      	b.n	801f352 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 801f1be:	230f      	movs	r3, #15
 801f1c0:	18fb      	adds	r3, r7, r3
 801f1c2:	781b      	ldrb	r3, [r3, #0]
 801f1c4:	4a60      	ldr	r2, [pc, #384]	; (801f348 <GUI_SendNotification+0x66c>)
 801f1c6:	009b      	lsls	r3, r3, #2
 801f1c8:	18d3      	adds	r3, r2, r3
 801f1ca:	785b      	ldrb	r3, [r3, #1]
 801f1cc:	061b      	lsls	r3, r3, #24
 801f1ce:	0fdb      	lsrs	r3, r3, #31
 801f1d0:	b2db      	uxtb	r3, r3
 801f1d2:	001a      	movs	r2, r3
 801f1d4:	213c      	movs	r1, #60	; 0x3c
 801f1d6:	187b      	adds	r3, r7, r1
 801f1d8:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 801f1da:	187b      	adds	r3, r7, r1
 801f1dc:	2284      	movs	r2, #132	; 0x84
 801f1de:	18b8      	adds	r0, r7, r2
 801f1e0:	2201      	movs	r2, #1
 801f1e2:	210a      	movs	r1, #10
 801f1e4:	f7fe fe94 	bl	801df10 <TLV_add>
            break;
 801f1e8:	e0b3      	b.n	801f352 <GUI_SendNotification+0x676>
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 801f1ea:	240f      	movs	r4, #15
 801f1ec:	193b      	adds	r3, r7, r4
 801f1ee:	781b      	ldrb	r3, [r3, #0]
 801f1f0:	4a55      	ldr	r2, [pc, #340]	; (801f348 <GUI_SendNotification+0x66c>)
 801f1f2:	009b      	lsls	r3, r3, #2
 801f1f4:	18d3      	adds	r3, r2, r3
 801f1f6:	785b      	ldrb	r3, [r3, #1]
 801f1f8:	06db      	lsls	r3, r3, #27
 801f1fa:	0fdb      	lsrs	r3, r3, #31
 801f1fc:	b2db      	uxtb	r3, r3
 801f1fe:	2b01      	cmp	r3, #1
 801f200:	d000      	beq.n	801f204 <GUI_SendNotification+0x528>
 801f202:	e0a6      	b.n	801f352 <GUI_SendNotification+0x676>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0U != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 801f204:	193b      	adds	r3, r7, r4
 801f206:	781a      	ldrb	r2, [r3, #0]
 801f208:	4950      	ldr	r1, [pc, #320]	; (801f34c <GUI_SendNotification+0x670>)
 801f20a:	0013      	movs	r3, r2
 801f20c:	00db      	lsls	r3, r3, #3
 801f20e:	1a9b      	subs	r3, r3, r2
 801f210:	011b      	lsls	r3, r3, #4
 801f212:	18cb      	adds	r3, r1, r3
 801f214:	333c      	adds	r3, #60	; 0x3c
 801f216:	681b      	ldr	r3, [r3, #0]
 801f218:	2b00      	cmp	r3, #0
 801f21a:	d030      	beq.n	801f27e <GUI_SendNotification+0x5a2>
          {
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 801f21c:	193b      	adds	r3, r7, r4
 801f21e:	781a      	ldrb	r2, [r3, #0]
 801f220:	494a      	ldr	r1, [pc, #296]	; (801f34c <GUI_SendNotification+0x670>)
 801f222:	0013      	movs	r3, r2
 801f224:	00db      	lsls	r3, r3, #3
 801f226:	1a9b      	subs	r3, r3, r2
 801f228:	011b      	lsls	r3, r3, #4
 801f22a:	18cb      	adds	r3, r1, r3
 801f22c:	333c      	adds	r3, #60	; 0x3c
 801f22e:	681b      	ldr	r3, [r3, #0]
 801f230:	b2da      	uxtb	r2, r3
 801f232:	2124      	movs	r1, #36	; 0x24
 801f234:	187b      	adds	r3, r7, r1
 801f236:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 801f238:	187b      	adds	r3, r7, r1
 801f23a:	2584      	movs	r5, #132	; 0x84
 801f23c:	1978      	adds	r0, r7, r5
 801f23e:	2201      	movs	r2, #1
 801f240:	2100      	movs	r1, #0
 801f242:	f7fe fe65 	bl	801df10 <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 801f246:	193b      	adds	r3, r7, r4
 801f248:	781a      	ldrb	r2, [r3, #0]
 801f24a:	4940      	ldr	r1, [pc, #256]	; (801f34c <GUI_SendNotification+0x670>)
 801f24c:	0013      	movs	r3, r2
 801f24e:	00db      	lsls	r3, r3, #3
 801f250:	1a9b      	subs	r3, r3, r2
 801f252:	011b      	lsls	r3, r3, #4
 801f254:	18cb      	adds	r3, r1, r3
 801f256:	333c      	adds	r3, #60	; 0x3c
 801f258:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801f25a:	b29b      	uxth	r3, r3
 801f25c:	009b      	lsls	r3, r3, #2
 801f25e:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 801f260:	193b      	adds	r3, r7, r4
 801f262:	781a      	ldrb	r2, [r3, #0]
 801f264:	0013      	movs	r3, r2
 801f266:	00db      	lsls	r3, r3, #3
 801f268:	1a9b      	subs	r3, r3, r2
 801f26a:	011b      	lsls	r3, r3, #4
 801f26c:	3320      	adds	r3, #32
 801f26e:	001a      	movs	r2, r3
 801f270:	4b36      	ldr	r3, [pc, #216]	; (801f34c <GUI_SendNotification+0x670>)
 801f272:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801f274:	1978      	adds	r0, r7, r5
 801f276:	000a      	movs	r2, r1
 801f278:	2104      	movs	r1, #4
 801f27a:	f7fe fe49 	bl	801df10 <TLV_add>
          }
          /* RDOPosition */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                        (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 801f27e:	240f      	movs	r4, #15
 801f280:	193b      	adds	r3, r7, r4
 801f282:	781a      	ldrb	r2, [r3, #0]
 801f284:	4931      	ldr	r1, [pc, #196]	; (801f34c <GUI_SendNotification+0x670>)
 801f286:	0013      	movs	r3, r2
 801f288:	00db      	lsls	r3, r3, #3
 801f28a:	1a9b      	subs	r3, r3, r2
 801f28c:	011b      	lsls	r3, r3, #4
 801f28e:	18cb      	adds	r3, r1, r3
 801f290:	3340      	adds	r3, #64	; 0x40
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	b2da      	uxtb	r2, r3
 801f296:	212c      	movs	r1, #44	; 0x2c
 801f298:	187b      	adds	r3, r7, r1
 801f29a:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 801f29c:	187b      	adds	r3, r7, r1
 801f29e:	2584      	movs	r5, #132	; 0x84
 801f2a0:	1978      	adds	r0, r7, r5
 801f2a2:	2201      	movs	r2, #1
 801f2a4:	2101      	movs	r1, #1
 801f2a6:	f7fe fe33 	bl	801df10 <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 801f2aa:	193b      	adds	r3, r7, r4
 801f2ac:	781a      	ldrb	r2, [r3, #0]
 801f2ae:	4b26      	ldr	r3, [pc, #152]	; (801f348 <GUI_SendNotification+0x66c>)
 801f2b0:	0092      	lsls	r2, r2, #2
 801f2b2:	5cd3      	ldrb	r3, [r2, r3]
 801f2b4:	075b      	lsls	r3, r3, #29
 801f2b6:	0fdb      	lsrs	r3, r3, #31
 801f2b8:	b2db      	uxtb	r3, r3
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	d12d      	bne.n	801f31a <GUI_SendNotification+0x63e>
          {
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 801f2be:	193b      	adds	r3, r7, r4
 801f2c0:	781a      	ldrb	r2, [r3, #0]
 801f2c2:	4922      	ldr	r1, [pc, #136]	; (801f34c <GUI_SendNotification+0x670>)
 801f2c4:	0013      	movs	r3, r2
 801f2c6:	00db      	lsls	r3, r3, #3
 801f2c8:	1a9b      	subs	r3, r3, r2
 801f2ca:	011b      	lsls	r3, r3, #4
 801f2cc:	18cb      	adds	r3, r1, r3
 801f2ce:	331c      	adds	r3, #28
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	b2da      	uxtb	r2, r3
 801f2d4:	2120      	movs	r1, #32
 801f2d6:	187b      	adds	r3, r7, r1
 801f2d8:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 801f2da:	187b      	adds	r3, r7, r1
 801f2dc:	1978      	adds	r0, r7, r5
 801f2de:	2201      	movs	r2, #1
 801f2e0:	2103      	movs	r1, #3
 801f2e2:	f7fe fe15 	bl	801df10 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U,
 801f2e6:	193b      	adds	r3, r7, r4
 801f2e8:	781a      	ldrb	r2, [r3, #0]
 801f2ea:	4918      	ldr	r1, [pc, #96]	; (801f34c <GUI_SendNotification+0x670>)
 801f2ec:	0013      	movs	r3, r2
 801f2ee:	00db      	lsls	r3, r3, #3
 801f2f0:	1a9b      	subs	r3, r3, r2
 801f2f2:	011b      	lsls	r3, r3, #4
 801f2f4:	18cb      	adds	r3, r1, r3
 801f2f6:	331c      	adds	r3, #28
 801f2f8:	681b      	ldr	r3, [r3, #0]
 801f2fa:	b29b      	uxth	r3, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801f2fc:	009b      	lsls	r3, r3, #2
 801f2fe:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 801f300:	193b      	adds	r3, r7, r4
 801f302:	781a      	ldrb	r2, [r3, #0]
 801f304:	0013      	movs	r3, r2
 801f306:	00db      	lsls	r3, r3, #3
 801f308:	1a9b      	subs	r3, r3, r2
 801f30a:	011b      	lsls	r3, r3, #4
 801f30c:	4a0f      	ldr	r2, [pc, #60]	; (801f34c <GUI_SendNotification+0x670>)
 801f30e:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801f310:	1978      	adds	r0, r7, r5
 801f312:	000a      	movs	r2, r1
 801f314:	2102      	movs	r1, #2
 801f316:	f7fe fdfb 	bl	801df10 <TLV_add>
          }
          /* PD_SpecRevision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801f31a:	230f      	movs	r3, #15
 801f31c:	18fb      	adds	r3, r7, r3
 801f31e:	781a      	ldrb	r2, [r3, #0]
 801f320:	4b09      	ldr	r3, [pc, #36]	; (801f348 <GUI_SendNotification+0x66c>)
 801f322:	0092      	lsls	r2, r2, #2
 801f324:	5cd3      	ldrb	r3, [r2, r3]
 801f326:	079b      	lsls	r3, r3, #30
 801f328:	0f9b      	lsrs	r3, r3, #30
 801f32a:	b2db      	uxtb	r3, r3
 801f32c:	001a      	movs	r2, r3
 801f32e:	2128      	movs	r1, #40	; 0x28
 801f330:	187b      	adds	r3, r7, r1
 801f332:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 801f334:	187b      	adds	r3, r7, r1
 801f336:	2284      	movs	r2, #132	; 0x84
 801f338:	18b8      	adds	r0, r7, r2
 801f33a:	2201      	movs	r2, #1
 801f33c:	210d      	movs	r1, #13
 801f33e:	f7fe fde7 	bl	801df10 <TLV_add>
 801f342:	e006      	b.n	801f352 <GUI_SendNotification+0x676>
            break;
 801f344:	46c0      	nop			; (mov r8, r8)
 801f346:	e004      	b.n	801f352 <GUI_SendNotification+0x676>
 801f348:	20002ef0 	.word	0x20002ef0
 801f34c:	20004b5c 	.word	0x20004b5c
            break;
 801f350:	46c0      	nop			; (mov r8, r8)
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 801f352:	683a      	ldr	r2, [r7, #0]
 801f354:	2380      	movs	r3, #128	; 0x80
 801f356:	011b      	lsls	r3, r3, #4
 801f358:	4013      	ands	r3, r2
 801f35a:	d043      	beq.n	801f3e4 <GUI_SendNotification+0x708>
    {
      uint32_t vsense = 0;
 801f35c:	2300      	movs	r3, #0
 801f35e:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 801f360:	2300      	movs	r3, #0
 801f362:	2290      	movs	r2, #144	; 0x90
 801f364:	18ba      	adds	r2, r7, r2
 801f366:	6013      	str	r3, [r2, #0]

      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 801f368:	2384      	movs	r3, #132	; 0x84
 801f36a:	18f8      	adds	r0, r7, r3
 801f36c:	23a0      	movs	r3, #160	; 0xa0
 801f36e:	2208      	movs	r2, #8
 801f370:	189b      	adds	r3, r3, r2
 801f372:	19db      	adds	r3, r3, r7
 801f374:	2204      	movs	r2, #4
 801f376:	2113      	movs	r1, #19
 801f378:	f7fe fdca 	bl	801df10 <TLV_add>

      if (NULL != pCB_GetVoltage)
 801f37c:	4b57      	ldr	r3, [pc, #348]	; (801f4dc <GUI_SendNotification+0x800>)
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	2b00      	cmp	r3, #0
 801f382:	d008      	beq.n	801f396 <GUI_SendNotification+0x6ba>
      {
        vsense = pCB_GetVoltage(PortNum);
 801f384:	4b55      	ldr	r3, [pc, #340]	; (801f4dc <GUI_SendNotification+0x800>)
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	220f      	movs	r2, #15
 801f38a:	18ba      	adds	r2, r7, r2
 801f38c:	7812      	ldrb	r2, [r2, #0]
 801f38e:	0010      	movs	r0, r2
 801f390:	4798      	blx	r3
 801f392:	0003      	movs	r3, r0
 801f394:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 801f396:	4b51      	ldr	r3, [pc, #324]	; (801f4dc <GUI_SendNotification+0x800>)
 801f398:	681b      	ldr	r3, [r3, #0]
 801f39a:	2b00      	cmp	r3, #0
 801f39c:	d013      	beq.n	801f3c6 <GUI_SendNotification+0x6ea>
      {
        isense = pCB_GetCurrent(PortNum);
 801f39e:	4b50      	ldr	r3, [pc, #320]	; (801f4e0 <GUI_SendNotification+0x804>)
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	220f      	movs	r2, #15
 801f3a4:	18ba      	adds	r2, r7, r2
 801f3a6:	7812      	ldrb	r2, [r2, #0]
 801f3a8:	0010      	movs	r0, r2
 801f3aa:	4798      	blx	r3
 801f3ac:	0003      	movs	r3, r0
 801f3ae:	2290      	movs	r2, #144	; 0x90
 801f3b0:	18b9      	adds	r1, r7, r2
 801f3b2:	600b      	str	r3, [r1, #0]
        if (isense < 0)
 801f3b4:	18bb      	adds	r3, r7, r2
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	da04      	bge.n	801f3c6 <GUI_SendNotification+0x6ea>
        {
          isense = -isense;
 801f3bc:	18bb      	adds	r3, r7, r2
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	425b      	negs	r3, r3
 801f3c2:	18ba      	adds	r2, r7, r2
 801f3c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* VBUS & IBUS level */
      vsense = ((uint32_t)(isense) << 16) | vsense;
 801f3c6:	2390      	movs	r3, #144	; 0x90
 801f3c8:	18fb      	adds	r3, r7, r3
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	041a      	lsls	r2, r3, #16
 801f3ce:	69fb      	ldr	r3, [r7, #28]
 801f3d0:	4313      	orrs	r3, r2
 801f3d2:	61fb      	str	r3, [r7, #28]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VBUS_LEVEL, 4, (uint8_t *)&vsense);
 801f3d4:	231c      	movs	r3, #28
 801f3d6:	18fb      	adds	r3, r7, r3
 801f3d8:	2284      	movs	r2, #132	; 0x84
 801f3da:	18b8      	adds	r0, r7, r2
 801f3dc:	2204      	movs	r2, #4
 801f3de:	210c      	movs	r1, #12
 801f3e0:	f7fe fd96 	bl	801df10 <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 801f3e4:	683a      	ldr	r2, [r7, #0]
 801f3e6:	2380      	movs	r3, #128	; 0x80
 801f3e8:	01db      	lsls	r3, r3, #7
 801f3ea:	4013      	ands	r3, r2
 801f3ec:	d009      	beq.n	801f402 <GUI_SendNotification+0x726>
    {
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 801f3ee:	2384      	movs	r3, #132	; 0x84
 801f3f0:	18f8      	adds	r0, r7, r3
 801f3f2:	23a0      	movs	r3, #160	; 0xa0
 801f3f4:	2208      	movs	r2, #8
 801f3f6:	189b      	adds	r3, r3, r2
 801f3f8:	19db      	adds	r3, r3, r7
 801f3fa:	2204      	movs	r2, #4
 801f3fc:	2113      	movs	r1, #19
 801f3fe:	f7fe fd87 	bl	801df10 <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 801f402:	683a      	ldr	r2, [r7, #0]
 801f404:	2380      	movs	r3, #128	; 0x80
 801f406:	021b      	lsls	r3, r3, #8
 801f408:	4013      	ands	r3, r2
 801f40a:	d043      	beq.n	801f494 <GUI_SendNotification+0x7b8>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1, (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 801f40c:	240f      	movs	r4, #15
 801f40e:	193b      	adds	r3, r7, r4
 801f410:	781b      	ldrb	r3, [r3, #0]
 801f412:	4a34      	ldr	r2, [pc, #208]	; (801f4e4 <GUI_SendNotification+0x808>)
 801f414:	009b      	lsls	r3, r3, #2
 801f416:	18d3      	adds	r3, r2, r3
 801f418:	785b      	ldrb	r3, [r3, #1]
 801f41a:	075b      	lsls	r3, r3, #29
 801f41c:	0f5b      	lsrs	r3, r3, #29
 801f41e:	b2db      	uxtb	r3, r3
 801f420:	001a      	movs	r2, r3
 801f422:	2118      	movs	r1, #24
 801f424:	187b      	adds	r3, r7, r1
 801f426:	701a      	strb	r2, [r3, #0]
 801f428:	187b      	adds	r3, r7, r1
 801f42a:	2584      	movs	r5, #132	; 0x84
 801f42c:	1978      	adds	r0, r7, r5
 801f42e:	2201      	movs	r2, #1
 801f430:	2105      	movs	r1, #5
 801f432:	f7fe fd6d 	bl	801df10 <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 801f436:	193b      	adds	r3, r7, r4
 801f438:	781b      	ldrb	r3, [r3, #0]
 801f43a:	4a2a      	ldr	r2, [pc, #168]	; (801f4e4 <GUI_SendNotification+0x808>)
 801f43c:	009b      	lsls	r3, r3, #2
 801f43e:	18d3      	adds	r3, r2, r3
 801f440:	785b      	ldrb	r3, [r3, #1]
 801f442:	075b      	lsls	r3, r3, #29
 801f444:	0f5b      	lsrs	r3, r3, #29
 801f446:	b2db      	uxtb	r3, r3
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d123      	bne.n	801f494 <GUI_SendNotification+0x7b8>
      {
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1, (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801f44c:	193b      	adds	r3, r7, r4
 801f44e:	781a      	ldrb	r2, [r3, #0]
 801f450:	4b24      	ldr	r3, [pc, #144]	; (801f4e4 <GUI_SendNotification+0x808>)
 801f452:	0092      	lsls	r2, r2, #2
 801f454:	5cd3      	ldrb	r3, [r2, r3]
 801f456:	061b      	lsls	r3, r3, #24
 801f458:	0f9b      	lsrs	r3, r3, #30
 801f45a:	b2db      	uxtb	r3, r3
 801f45c:	001a      	movs	r2, r3
 801f45e:	2114      	movs	r1, #20
 801f460:	187b      	adds	r3, r7, r1
 801f462:	701a      	strb	r2, [r3, #0]
 801f464:	187b      	adds	r3, r7, r1
 801f466:	1978      	adds	r0, r7, r5
 801f468:	2201      	movs	r2, #1
 801f46a:	2106      	movs	r1, #6
 801f46c:	f7fe fd50 	bl	801df10 <TLV_add>
        /* PowerRole*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1, (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801f470:	193b      	adds	r3, r7, r4
 801f472:	781a      	ldrb	r2, [r3, #0]
 801f474:	4b1b      	ldr	r3, [pc, #108]	; (801f4e4 <GUI_SendNotification+0x808>)
 801f476:	0092      	lsls	r2, r2, #2
 801f478:	5cd3      	ldrb	r3, [r2, r3]
 801f47a:	075b      	lsls	r3, r3, #29
 801f47c:	0fdb      	lsrs	r3, r3, #31
 801f47e:	b2db      	uxtb	r3, r3
 801f480:	001a      	movs	r2, r3
 801f482:	2110      	movs	r1, #16
 801f484:	187b      	adds	r3, r7, r1
 801f486:	701a      	strb	r2, [r3, #0]
 801f488:	187b      	adds	r3, r7, r1
 801f48a:	1978      	adds	r0, r7, r5
 801f48c:	2201      	movs	r2, #1
 801f48e:	2108      	movs	r1, #8
 801f490:	f7fe fd3e 	bl	801df10 <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 801f494:	2384      	movs	r3, #132	; 0x84
 801f496:	18fb      	adds	r3, r7, r3
 801f498:	0018      	movs	r0, r3
 801f49a:	f7fe fe9b 	bl	801e1d4 <TLV_deinit_encode>

    if (0U != TLV_get_string_length(Processed))
 801f49e:	4b12      	ldr	r3, [pc, #72]	; (801f4e8 <GUI_SendNotification+0x80c>)
 801f4a0:	0018      	movs	r0, r3
 801f4a2:	f7fe ff3d 	bl	801e320 <TLV_get_string_length>
 801f4a6:	1e03      	subs	r3, r0, #0
 801f4a8:	d010      	beq.n	801f4cc <GUI_SendNotification+0x7f0>
    {
      *pMsgToSend = Processed;
 801f4aa:	68bb      	ldr	r3, [r7, #8]
 801f4ac:	4a0e      	ldr	r2, [pc, #56]	; (801f4e8 <GUI_SendNotification+0x80c>)
 801f4ae:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)TLV_get_string_length(Processed) + 8U;
 801f4b0:	4b0d      	ldr	r3, [pc, #52]	; (801f4e8 <GUI_SendNotification+0x80c>)
 801f4b2:	0018      	movs	r0, r3
 801f4b4:	f7fe ff34 	bl	801e320 <TLV_get_string_length>
 801f4b8:	0003      	movs	r3, r0
 801f4ba:	b2db      	uxtb	r3, r3
 801f4bc:	3308      	adds	r3, #8
 801f4be:	b2da      	uxtb	r2, r3
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 801f4c4:	2397      	movs	r3, #151	; 0x97
 801f4c6:	18fb      	adds	r3, r7, r3
 801f4c8:	2201      	movs	r2, #1
 801f4ca:	701a      	strb	r2, [r3, #0]

    }

  }

  return gui_state;
 801f4cc:	2397      	movs	r3, #151	; 0x97
 801f4ce:	18fb      	adds	r3, r7, r3
 801f4d0:	781b      	ldrb	r3, [r3, #0]
}
 801f4d2:	0018      	movs	r0, r3
 801f4d4:	46bd      	mov	sp, r7
 801f4d6:	b026      	add	sp, #152	; 0x98
 801f4d8:	bdb0      	pop	{r4, r5, r7, pc}
 801f4da:	46c0      	nop			; (mov r8, r8)
 801f4dc:	20004b50 	.word	0x20004b50
 801f4e0:	20004b54 	.word	0x20004b54
 801f4e4:	20002ef0 	.word	0x20002ef0
 801f4e8:	20004a3c 	.word	0x20004a3c

0801f4ec <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 801f4ec:	b590      	push	{r4, r7, lr}
 801f4ee:	b085      	sub	sp, #20
 801f4f0:	af00      	add	r7, sp, #0
 801f4f2:	0002      	movs	r2, r0
 801f4f4:	1dfb      	adds	r3, r7, #7
 801f4f6:	701a      	strb	r2, [r3, #0]
 801f4f8:	1d3b      	adds	r3, r7, #4
 801f4fa:	1c0a      	adds	r2, r1, #0
 801f4fc:	801a      	strh	r2, [r3, #0]
#if defined(_SNK) || defined(_DRP)
  if ((uint16_t)USBPD_NOTIFY_REQUEST_ACCEPTED == EventVal)
 801f4fe:	1d3b      	adds	r3, r7, #4
 801f500:	881b      	ldrh	r3, [r3, #0]
 801f502:	2b01      	cmp	r3, #1
 801f504:	d136      	bne.n	801f574 <GUI_PostNotificationMessage+0x88>
  {
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 801f506:	1dfb      	adds	r3, r7, #7
 801f508:	781a      	ldrb	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
 801f50a:	1dfb      	adds	r3, r7, #7
 801f50c:	7818      	ldrb	r0, [r3, #0]
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 801f50e:	4927      	ldr	r1, [pc, #156]	; (801f5ac <GUI_PostNotificationMessage+0xc0>)
 801f510:	0013      	movs	r3, r2
 801f512:	00db      	lsls	r3, r3, #3
 801f514:	1a9b      	subs	r3, r3, r2
 801f516:	011b      	lsls	r3, r3, #4
 801f518:	18cb      	adds	r3, r1, r3
 801f51a:	3344      	adds	r3, #68	; 0x44
 801f51c:	681a      	ldr	r2, [r3, #0]
 801f51e:	4924      	ldr	r1, [pc, #144]	; (801f5b0 <GUI_PostNotificationMessage+0xc4>)
 801f520:	2374      	movs	r3, #116	; 0x74
 801f522:	4343      	muls	r3, r0
 801f524:	18cb      	adds	r3, r1, r3
 801f526:	3308      	adds	r3, #8
 801f528:	601a      	str	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 801f52a:	1dfb      	adds	r3, r7, #7
 801f52c:	781a      	ldrb	r2, [r3, #0]
 801f52e:	491f      	ldr	r1, [pc, #124]	; (801f5ac <GUI_PostNotificationMessage+0xc0>)
 801f530:	0013      	movs	r3, r2
 801f532:	00db      	lsls	r3, r3, #3
 801f534:	1a9b      	subs	r3, r3, r2
 801f536:	011b      	lsls	r3, r3, #4
 801f538:	18cb      	adds	r3, r1, r3
 801f53a:	3344      	adds	r3, #68	; 0x44
 801f53c:	6819      	ldr	r1, [r3, #0]
 801f53e:	1dfb      	adds	r3, r7, #7
 801f540:	781a      	ldrb	r2, [r3, #0]
 801f542:	481a      	ldr	r0, [pc, #104]	; (801f5ac <GUI_PostNotificationMessage+0xc0>)
 801f544:	0013      	movs	r3, r2
 801f546:	00db      	lsls	r3, r3, #3
 801f548:	1a9b      	subs	r3, r3, r2
 801f54a:	011b      	lsls	r3, r3, #4
 801f54c:	18c3      	adds	r3, r0, r3
 801f54e:	3348      	adds	r3, #72	; 0x48
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	434b      	muls	r3, r1
 801f554:	001a      	movs	r2, r3
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
 801f556:	1dfb      	adds	r3, r7, #7
 801f558:	781c      	ldrb	r4, [r3, #0]
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 801f55a:	23fa      	movs	r3, #250	; 0xfa
 801f55c:	0099      	lsls	r1, r3, #2
 801f55e:	0010      	movs	r0, r2
 801f560:	f7e6 fe46 	bl	80061f0 <__udivsi3>
 801f564:	0003      	movs	r3, r0
 801f566:	0019      	movs	r1, r3
 801f568:	4a11      	ldr	r2, [pc, #68]	; (801f5b0 <GUI_PostNotificationMessage+0xc4>)
 801f56a:	2374      	movs	r3, #116	; 0x74
 801f56c:	4363      	muls	r3, r4
 801f56e:	18d3      	adds	r3, r2, r3
 801f570:	3314      	adds	r3, #20
 801f572:	6019      	str	r1, [r3, #0]
  }
#endif /* _SNK || _DRP */

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 801f574:	4b0f      	ldr	r3, [pc, #60]	; (801f5b4 <GUI_PostNotificationMessage+0xc8>)
 801f576:	781b      	ldrb	r3, [r3, #0]
 801f578:	2b01      	cmp	r3, #1
 801f57a:	d113      	bne.n	801f5a4 <GUI_PostNotificationMessage+0xb8>
  {
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
                     | ((uint32_t)PortNum << GUI_PE_PORT_NUM_Pos)
 801f57c:	1dfb      	adds	r3, r7, #7
 801f57e:	781b      	ldrb	r3, [r3, #0]
 801f580:	061a      	lsls	r2, r3, #24
                     | ((uint32_t)EventVal << GUI_PE_NOTIF_Pos);
 801f582:	1d3b      	adds	r3, r7, #4
 801f584:	881b      	ldrh	r3, [r3, #0]
 801f586:	011b      	lsls	r3, r3, #4
 801f588:	4313      	orrs	r3, r2
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
 801f58a:	2201      	movs	r2, #1
 801f58c:	4313      	orrs	r3, r2
 801f58e:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, event, 0U);
 801f590:	68fb      	ldr	r3, [r7, #12]
 801f592:	60bb      	str	r3, [r7, #8]
 801f594:	4b08      	ldr	r3, [pc, #32]	; (801f5b8 <GUI_PostNotificationMessage+0xcc>)
 801f596:	6818      	ldr	r0, [r3, #0]
 801f598:	2308      	movs	r3, #8
 801f59a:	18f9      	adds	r1, r7, r3
 801f59c:	2300      	movs	r3, #0
 801f59e:	2200      	movs	r2, #0
 801f5a0:	f7f7 fe26 	bl	80171f0 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 801f5a4:	46c0      	nop			; (mov r8, r8)
 801f5a6:	46bd      	mov	sp, r7
 801f5a8:	b005      	add	sp, #20
 801f5aa:	bd90      	pop	{r4, r7, pc}
 801f5ac:	20004b5c 	.word	0x20004b5c
 801f5b0:	200000f8 	.word	0x200000f8
 801f5b4:	20004b3c 	.word	0x20004b3c
 801f5b8:	20004b40 	.word	0x20004b40

0801f5bc <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 801f5bc:	b590      	push	{r4, r7, lr}
 801f5be:	b08b      	sub	sp, #44	; 0x2c
 801f5c0:	af00      	add	r7, sp, #0
 801f5c2:	60ba      	str	r2, [r7, #8]
 801f5c4:	607b      	str	r3, [r7, #4]
 801f5c6:	230f      	movs	r3, #15
 801f5c8:	18fb      	adds	r3, r7, r3
 801f5ca:	1c02      	adds	r2, r0, #0
 801f5cc:	701a      	strb	r2, [r3, #0]
 801f5ce:	200e      	movs	r0, #14
 801f5d0:	183b      	adds	r3, r7, r0
 801f5d2:	1c0a      	adds	r2, r1, #0
 801f5d4:	701a      	strb	r2, [r3, #0]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 801f5d6:	183b      	adds	r3, r7, r0
 801f5d8:	781b      	ldrb	r3, [r3, #0]
 801f5da:	2b13      	cmp	r3, #19
 801f5dc:	d900      	bls.n	801f5e0 <GUI_SaveInfo+0x24>
 801f5de:	e0ca      	b.n	801f776 <GUI_SaveInfo+0x1ba>
 801f5e0:	009a      	lsls	r2, r3, #2
 801f5e2:	4b6b      	ldr	r3, [pc, #428]	; (801f790 <GUI_SaveInfo+0x1d4>)
 801f5e4:	18d3      	adds	r3, r2, r3
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	469f      	mov	pc, r3
  {
    /* Case requested DO position Data information :
    */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4U)
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	2b04      	cmp	r3, #4
 801f5ee:	d000      	beq.n	801f5f2 <GUI_SaveInfo+0x36>
 801f5f0:	e0c3      	b.n	801f77a <GUI_SaveInfo+0x1be>
      {
        uint8_t *temp;
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPosition;
 801f5f2:	240f      	movs	r4, #15
 801f5f4:	193b      	adds	r3, r7, r4
 801f5f6:	781a      	ldrb	r2, [r3, #0]
 801f5f8:	0013      	movs	r3, r2
 801f5fa:	00db      	lsls	r3, r3, #3
 801f5fc:	1a9b      	subs	r3, r3, r2
 801f5fe:	011b      	lsls	r3, r3, #4
 801f600:	3340      	adds	r3, #64	; 0x40
 801f602:	001a      	movs	r2, r3
 801f604:	4b63      	ldr	r3, [pc, #396]	; (801f794 <GUI_SaveInfo+0x1d8>)
 801f606:	18d3      	adds	r3, r2, r3
 801f608:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 801f60a:	687a      	ldr	r2, [r7, #4]
 801f60c:	68b9      	ldr	r1, [r7, #8]
 801f60e:	693b      	ldr	r3, [r7, #16]
 801f610:	0018      	movs	r0, r3
 801f612:	f003 f8f9 	bl	8022808 <memcpy>
        GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 801f616:	68bb      	ldr	r3, [r7, #8]
 801f618:	7819      	ldrb	r1, [r3, #0]
 801f61a:	193b      	adds	r3, r7, r4
 801f61c:	781a      	ldrb	r2, [r3, #0]
 801f61e:	0008      	movs	r0, r1
 801f620:	495c      	ldr	r1, [pc, #368]	; (801f794 <GUI_SaveInfo+0x1d8>)
 801f622:	0013      	movs	r3, r2
 801f624:	00db      	lsls	r3, r3, #3
 801f626:	1a9b      	subs	r3, r3, r2
 801f628:	011b      	lsls	r3, r3, #4
 801f62a:	18cb      	adds	r3, r1, r3
 801f62c:	334c      	adds	r3, #76	; 0x4c
 801f62e:	6018      	str	r0, [r3, #0]
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 801f630:	193b      	adds	r3, r7, r4
 801f632:	781a      	ldrb	r2, [r3, #0]
 801f634:	0013      	movs	r3, r2
 801f636:	00db      	lsls	r3, r3, #3
 801f638:	1a9b      	subs	r3, r3, r2
 801f63a:	011b      	lsls	r3, r3, #4
 801f63c:	3348      	adds	r3, #72	; 0x48
 801f63e:	001a      	movs	r2, r3
 801f640:	4b54      	ldr	r3, [pc, #336]	; (801f794 <GUI_SaveInfo+0x1d8>)
 801f642:	18d3      	adds	r3, r2, r3
 801f644:	3304      	adds	r3, #4
 801f646:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 801f648:	687a      	ldr	r2, [r7, #4]
 801f64a:	68b9      	ldr	r1, [r7, #8]
 801f64c:	693b      	ldr	r3, [r7, #16]
 801f64e:	0018      	movs	r0, r3
 801f650:	f003 f8da 	bl	8022808 <memcpy>
      }
      break;
 801f654:	e091      	b.n	801f77a <GUI_SaveInfo+0x1be>

    /* Case Received Source PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	2b1c      	cmp	r3, #28
 801f65a:	d900      	bls.n	801f65e <GUI_SaveInfo+0xa2>
 801f65c:	e08f      	b.n	801f77e <GUI_SaveInfo+0x1c2>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4U);
 801f65e:	230f      	movs	r3, #15
 801f660:	18fb      	adds	r3, r7, r3
 801f662:	781a      	ldrb	r2, [r3, #0]
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	0899      	lsrs	r1, r3, #2
 801f668:	484a      	ldr	r0, [pc, #296]	; (801f794 <GUI_SaveInfo+0x1d8>)
 801f66a:	0013      	movs	r3, r2
 801f66c:	00db      	lsls	r3, r3, #3
 801f66e:	1a9b      	subs	r3, r3, r2
 801f670:	011b      	lsls	r3, r3, #4
 801f672:	18c3      	adds	r3, r0, r3
 801f674:	331c      	adds	r3, #28
 801f676:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 801f678:	2300      	movs	r3, #0
 801f67a:	627b      	str	r3, [r7, #36]	; 0x24
 801f67c:	e018      	b.n	801f6b0 <GUI_SaveInfo+0xf4>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 801f67e:	230f      	movs	r3, #15
 801f680:	18fb      	adds	r3, r7, r3
 801f682:	781a      	ldrb	r2, [r3, #0]
 801f684:	0013      	movs	r3, r2
 801f686:	00db      	lsls	r3, r3, #3
 801f688:	1a9b      	subs	r3, r3, r2
 801f68a:	009b      	lsls	r3, r3, #2
 801f68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f68e:	189b      	adds	r3, r3, r2
 801f690:	009a      	lsls	r2, r3, #2
 801f692:	4b40      	ldr	r3, [pc, #256]	; (801f794 <GUI_SaveInfo+0x1d8>)
 801f694:	18d3      	adds	r3, r2, r3
 801f696:	617b      	str	r3, [r7, #20]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 801f698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f69a:	009b      	lsls	r3, r3, #2
 801f69c:	68ba      	ldr	r2, [r7, #8]
 801f69e:	18d1      	adds	r1, r2, r3
 801f6a0:	697b      	ldr	r3, [r7, #20]
 801f6a2:	2204      	movs	r2, #4
 801f6a4:	0018      	movs	r0, r3
 801f6a6:	f003 f8af 	bl	8022808 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 801f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6ac:	3301      	adds	r3, #1
 801f6ae:	627b      	str	r3, [r7, #36]	; 0x24
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	089b      	lsrs	r3, r3, #2
 801f6b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f6b6:	429a      	cmp	r2, r3
 801f6b8:	d3e1      	bcc.n	801f67e <GUI_SaveInfo+0xc2>
        }
      }
      break;
 801f6ba:	e060      	b.n	801f77e <GUI_SaveInfo+0x1c2>

    /* Case Received Sink PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	2b1c      	cmp	r3, #28
 801f6c0:	d85f      	bhi.n	801f782 <GUI_SaveInfo+0x1c6>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4U);
 801f6c2:	230f      	movs	r3, #15
 801f6c4:	18fb      	adds	r3, r7, r3
 801f6c6:	781a      	ldrb	r2, [r3, #0]
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	0899      	lsrs	r1, r3, #2
 801f6cc:	4831      	ldr	r0, [pc, #196]	; (801f794 <GUI_SaveInfo+0x1d8>)
 801f6ce:	0013      	movs	r3, r2
 801f6d0:	00db      	lsls	r3, r3, #3
 801f6d2:	1a9b      	subs	r3, r3, r2
 801f6d4:	011b      	lsls	r3, r3, #4
 801f6d6:	18c3      	adds	r3, r0, r3
 801f6d8:	333c      	adds	r3, #60	; 0x3c
 801f6da:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 801f6dc:	2300      	movs	r3, #0
 801f6de:	627b      	str	r3, [r7, #36]	; 0x24
 801f6e0:	e019      	b.n	801f716 <GUI_SaveInfo+0x15a>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 801f6e2:	230f      	movs	r3, #15
 801f6e4:	18fb      	adds	r3, r7, r3
 801f6e6:	781a      	ldrb	r2, [r3, #0]
 801f6e8:	0013      	movs	r3, r2
 801f6ea:	00db      	lsls	r3, r3, #3
 801f6ec:	1a9b      	subs	r3, r3, r2
 801f6ee:	009b      	lsls	r3, r3, #2
 801f6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f6f2:	189b      	adds	r3, r3, r2
 801f6f4:	3308      	adds	r3, #8
 801f6f6:	009a      	lsls	r2, r3, #2
 801f6f8:	4b26      	ldr	r3, [pc, #152]	; (801f794 <GUI_SaveInfo+0x1d8>)
 801f6fa:	18d3      	adds	r3, r2, r3
 801f6fc:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 801f6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f700:	009b      	lsls	r3, r3, #2
 801f702:	68ba      	ldr	r2, [r7, #8]
 801f704:	18d1      	adds	r1, r2, r3
 801f706:	69bb      	ldr	r3, [r7, #24]
 801f708:	2204      	movs	r2, #4
 801f70a:	0018      	movs	r0, r3
 801f70c:	f003 f87c 	bl	8022808 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 801f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f712:	3301      	adds	r3, #1
 801f714:	627b      	str	r3, [r7, #36]	; 0x24
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	089b      	lsrs	r3, r3, #2
 801f71a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f71c:	429a      	cmp	r2, r3
 801f71e:	d3e0      	bcc.n	801f6e2 <GUI_SaveInfo+0x126>
        }
      }
      break;
 801f720:	e02f      	b.n	801f782 <GUI_SaveInfo+0x1c6>

    /* Case Received Request PDO Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4U)
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	2b04      	cmp	r3, #4
 801f726:	d12e      	bne.n	801f786 <GUI_SaveInfo+0x1ca>
      {
        uint8_t *rdo;
        rdo = (uint8_t *)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 801f728:	230f      	movs	r3, #15
 801f72a:	18fb      	adds	r3, r7, r3
 801f72c:	781a      	ldrb	r2, [r3, #0]
 801f72e:	0013      	movs	r3, r2
 801f730:	00db      	lsls	r3, r3, #3
 801f732:	1a9b      	subs	r3, r3, r2
 801f734:	011b      	lsls	r3, r3, #4
 801f736:	3350      	adds	r3, #80	; 0x50
 801f738:	001a      	movs	r2, r3
 801f73a:	4b16      	ldr	r3, [pc, #88]	; (801f794 <GUI_SaveInfo+0x1d8>)
 801f73c:	18d3      	adds	r3, r2, r3
 801f73e:	61fb      	str	r3, [r7, #28]
        (void)memcpy(rdo, Ptr, Size);
 801f740:	687a      	ldr	r2, [r7, #4]
 801f742:	68b9      	ldr	r1, [r7, #8]
 801f744:	69fb      	ldr	r3, [r7, #28]
 801f746:	0018      	movs	r0, r3
 801f748:	f003 f85e 	bl	8022808 <memcpy>
      }
      break;
 801f74c:	e01b      	b.n	801f786 <GUI_SaveInfo+0x1ca>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t  *_snk_ext_capa;
      _snk_ext_capa = (uint8_t *)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 801f74e:	230f      	movs	r3, #15
 801f750:	18fb      	adds	r3, r7, r3
 801f752:	781a      	ldrb	r2, [r3, #0]
 801f754:	0013      	movs	r3, r2
 801f756:	00db      	lsls	r3, r3, #3
 801f758:	1a9b      	subs	r3, r3, r2
 801f75a:	011b      	lsls	r3, r3, #4
 801f75c:	3350      	adds	r3, #80	; 0x50
 801f75e:	001a      	movs	r2, r3
 801f760:	4b0c      	ldr	r3, [pc, #48]	; (801f794 <GUI_SaveInfo+0x1d8>)
 801f762:	18d3      	adds	r3, r2, r3
 801f764:	3304      	adds	r3, #4
 801f766:	623b      	str	r3, [r7, #32]
      (void)memcpy(_snk_ext_capa, Ptr, Size);
 801f768:	687a      	ldr	r2, [r7, #4]
 801f76a:	68b9      	ldr	r1, [r7, #8]
 801f76c:	6a3b      	ldr	r3, [r7, #32]
 801f76e:	0018      	movs	r0, r3
 801f770:	f003 f84a 	bl	8022808 <memcpy>
      break;
 801f774:	e008      	b.n	801f788 <GUI_SaveInfo+0x1cc>
#endif /* _VCONN_SUPPORT */

    /* In case of unexpected data type (Set request could not be fulfilled) :
     */
    default :
      break;
 801f776:	46c0      	nop			; (mov r8, r8)
 801f778:	e006      	b.n	801f788 <GUI_SaveInfo+0x1cc>
      break;
 801f77a:	46c0      	nop			; (mov r8, r8)
 801f77c:	e004      	b.n	801f788 <GUI_SaveInfo+0x1cc>
      break;
 801f77e:	46c0      	nop			; (mov r8, r8)
 801f780:	e002      	b.n	801f788 <GUI_SaveInfo+0x1cc>
      break;
 801f782:	46c0      	nop			; (mov r8, r8)
 801f784:	e000      	b.n	801f788 <GUI_SaveInfo+0x1cc>
      break;
 801f786:	46c0      	nop			; (mov r8, r8)
  }
}
 801f788:	46c0      	nop			; (mov r8, r8)
 801f78a:	46bd      	mov	sp, r7
 801f78c:	b00b      	add	sp, #44	; 0x2c
 801f78e:	bd90      	pop	{r4, r7, pc}
 801f790:	08024410 	.word	0x08024410
 801f794:	20004b5c 	.word	0x20004b5c

0801f798 <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 801f798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f79a:	b091      	sub	sp, #68	; 0x44
 801f79c:	af00      	add	r7, sp, #0
 801f79e:	0002      	movs	r2, r0
 801f7a0:	6039      	str	r1, [r7, #0]
 801f7a2:	1dfb      	adds	r3, r7, #7
 801f7a4:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 801f7a6:	1dfb      	adds	r3, r7, #7
 801f7a8:	781b      	ldrb	r3, [r3, #0]
 801f7aa:	015b      	lsls	r3, r3, #5
 801f7ac:	b25b      	sxtb	r3, r3
 801f7ae:	2203      	movs	r2, #3
 801f7b0:	4313      	orrs	r3, r2
 801f7b2:	b25b      	sxtb	r3, r3
 801f7b4:	b2d9      	uxtb	r1, r3
 801f7b6:	683b      	ldr	r3, [r7, #0]
 801f7b8:	2280      	movs	r2, #128	; 0x80
 801f7ba:	0052      	lsls	r2, r2, #1
 801f7bc:	2028      	movs	r0, #40	; 0x28
 801f7be:	1838      	adds	r0, r7, r0
 801f7c0:	f7fe fb43 	bl	801de4a <TLV_init_encode>

  /* Information by board */
  if (0U == PortNum)
 801f7c4:	1dfb      	adds	r3, r7, #7
 801f7c6:	781b      	ldrb	r3, [r3, #0]
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	d163      	bne.n	801f894 <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t *hwversion;
    if (NULL != pCB_HWBoardVersion)
 801f7cc:	4bc2      	ldr	r3, [pc, #776]	; (801fad8 <Send_DpmInitCnf+0x340>)
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	d005      	beq.n	801f7e0 <Send_DpmInitCnf+0x48>
    {
      hwversion = pCB_HWBoardVersion();
 801f7d4:	4bc0      	ldr	r3, [pc, #768]	; (801fad8 <Send_DpmInitCnf+0x340>)
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	4798      	blx	r3
 801f7da:	0003      	movs	r3, r0
 801f7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f7de:	e001      	b.n	801f7e4 <Send_DpmInitCnf+0x4c>
    }
    else
    {
      hwversion = (uint8_t *) "UNKNOWN";
 801f7e0:	4bbe      	ldr	r3, [pc, #760]	; (801fadc <Send_DpmInitCnf+0x344>)
 801f7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWBOARDVERSION, (uint16_t)(strlen((const char *)hwversion)), hwversion);
 801f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7e6:	0018      	movs	r0, r3
 801f7e8:	f7e6 fcf0 	bl	80061cc <strlen>
 801f7ec:	0003      	movs	r3, r0
 801f7ee:	b29a      	uxth	r2, r3
 801f7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7f2:	2128      	movs	r1, #40	; 0x28
 801f7f4:	1878      	adds	r0, r7, r1
 801f7f6:	2100      	movs	r1, #0
 801f7f8:	f7fe fb8a 	bl	801df10 <TLV_add>

    /* HWPDType */
    const uint8_t *hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 801f7fc:	4bb6      	ldr	r3, [pc, #728]	; (801fad8 <Send_DpmInitCnf+0x340>)
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	2b00      	cmp	r3, #0
 801f802:	d005      	beq.n	801f810 <Send_DpmInitCnf+0x78>
    {
      hwpdtype  = pCB_HWPDType();
 801f804:	4bb6      	ldr	r3, [pc, #728]	; (801fae0 <Send_DpmInitCnf+0x348>)
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	4798      	blx	r3
 801f80a:	0003      	movs	r3, r0
 801f80c:	63bb      	str	r3, [r7, #56]	; 0x38
 801f80e:	e001      	b.n	801f814 <Send_DpmInitCnf+0x7c>
    }
    else
    {
      hwpdtype = (uint8_t *) "UNKNOWN";
 801f810:	4bb2      	ldr	r3, [pc, #712]	; (801fadc <Send_DpmInitCnf+0x344>)
 801f812:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWPDTYPE, (uint16_t)(strlen((const char *)hwpdtype)), hwpdtype);
 801f814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f816:	0018      	movs	r0, r3
 801f818:	f7e6 fcd8 	bl	80061cc <strlen>
 801f81c:	0003      	movs	r3, r0
 801f81e:	b29a      	uxth	r2, r3
 801f820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f822:	2428      	movs	r4, #40	; 0x28
 801f824:	1938      	adds	r0, r7, r4
 801f826:	2101      	movs	r1, #1
 801f828:	f7fe fb72 	bl	801df10 <TLV_add>

    /* NbPortMax */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NBPORTMAX, 1, (uint8_t[]) { USBPD_PORT_COUNT });
 801f82c:	2124      	movs	r1, #36	; 0x24
 801f82e:	187b      	adds	r3, r7, r1
 801f830:	2201      	movs	r2, #1
 801f832:	701a      	strb	r2, [r3, #0]
 801f834:	187b      	adds	r3, r7, r1
 801f836:	1938      	adds	r0, r7, r4
 801f838:	2201      	movs	r2, #1
 801f83a:	2102      	movs	r1, #2
 801f83c:	f7fe fb68 	bl	801df10 <TLV_add>
    /* FW Version */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
    {
 801f840:	251c      	movs	r5, #28
 801f842:	197b      	adds	r3, r7, r5
 801f844:	4aa7      	ldr	r2, [pc, #668]	; (801fae4 <Send_DpmInitCnf+0x34c>)
 801f846:	ca03      	ldmia	r2!, {r0, r1}
 801f848:	c303      	stmia	r3!, {r0, r1}
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
 801f84a:	197b      	adds	r3, r7, r5
 801f84c:	1938      	adds	r0, r7, r4
 801f84e:	2208      	movs	r2, #8
 801f850:	2103      	movs	r1, #3
 801f852:	f7fe fb5d 	bl	801df10 <TLV_add>
      (_LIB_ID & 0x00FF0000U) >> 16,
      (_LIB_ID & 0xFF000000U) >> 24
    }
                 );
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 801f856:	2118      	movs	r1, #24
 801f858:	187b      	adds	r3, r7, r1
 801f85a:	2200      	movs	r2, #0
 801f85c:	701a      	strb	r2, [r3, #0]
 801f85e:	187b      	adds	r3, r7, r1
 801f860:	1938      	adds	r0, r7, r4
 801f862:	2201      	movs	r2, #1
 801f864:	211e      	movs	r1, #30
 801f866:	f7fe fb53 	bl	801df10 <TLV_add>
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 801f86a:	2114      	movs	r1, #20
 801f86c:	187b      	adds	r3, r7, r1
 801f86e:	2200      	movs	r2, #0
 801f870:	701a      	strb	r2, [r3, #0]
 801f872:	187b      	adds	r3, r7, r1
 801f874:	1938      	adds	r0, r7, r4
 801f876:	2201      	movs	r2, #1
 801f878:	211e      	movs	r1, #30
 801f87a:	f7fe fb49 	bl	801df10 <TLV_add>

    /* Original settings */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t *)&GUI_OriginalSettings);
 801f87e:	4b9a      	ldr	r3, [pc, #616]	; (801fae8 <Send_DpmInitCnf+0x350>)
 801f880:	1938      	adds	r0, r7, r4
 801f882:	2201      	movs	r2, #1
 801f884:	211f      	movs	r1, #31
 801f886:	f7fe fb43 	bl	801df10 <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 801f88a:	193b      	adds	r3, r7, r4
 801f88c:	0018      	movs	r0, r3
 801f88e:	f7fe fca1 	bl	801e1d4 <TLV_deinit_encode>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_VCONNSUPPLY, 2, (uint8_t *)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 801f892:	e11c      	b.n	801face <Send_DpmInitCnf+0x336>
    uint8_t port = PortNum - 1U;
 801f894:	2637      	movs	r6, #55	; 0x37
 801f896:	19bb      	adds	r3, r7, r6
 801f898:	1dfa      	adds	r2, r7, #7
 801f89a:	7812      	ldrb	r2, [r2, #0]
 801f89c:	3a01      	subs	r2, #1
 801f89e:	701a      	strb	r2, [r3, #0]
    settings = (uint16_t)DPM_Settings[port].PE_SpecRevision;
 801f8a0:	19bb      	adds	r3, r7, r6
 801f8a2:	781a      	ldrb	r2, [r3, #0]
 801f8a4:	4991      	ldr	r1, [pc, #580]	; (801faec <Send_DpmInitCnf+0x354>)
 801f8a6:	0013      	movs	r3, r2
 801f8a8:	005b      	lsls	r3, r3, #1
 801f8aa:	189b      	adds	r3, r3, r2
 801f8ac:	009b      	lsls	r3, r3, #2
 801f8ae:	18cb      	adds	r3, r1, r3
 801f8b0:	791b      	ldrb	r3, [r3, #4]
 801f8b2:	079b      	lsls	r3, r3, #30
 801f8b4:	0f9b      	lsrs	r3, r3, #30
 801f8b6:	b2db      	uxtb	r3, r3
 801f8b8:	b29a      	uxth	r2, r3
 801f8ba:	2412      	movs	r4, #18
 801f8bc:	193b      	adds	r3, r7, r4
 801f8be:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]) { 0x12, settings });
 801f8c0:	2110      	movs	r1, #16
 801f8c2:	187b      	adds	r3, r7, r1
 801f8c4:	2212      	movs	r2, #18
 801f8c6:	701a      	strb	r2, [r3, #0]
 801f8c8:	193b      	adds	r3, r7, r4
 801f8ca:	881b      	ldrh	r3, [r3, #0]
 801f8cc:	b2da      	uxtb	r2, r3
 801f8ce:	187b      	adds	r3, r7, r1
 801f8d0:	705a      	strb	r2, [r3, #1]
 801f8d2:	187b      	adds	r3, r7, r1
 801f8d4:	2528      	movs	r5, #40	; 0x28
 801f8d6:	1978      	adds	r0, r7, r5
 801f8d8:	2202      	movs	r2, #2
 801f8da:	2104      	movs	r1, #4
 801f8dc:	f7fe fb18 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 801f8e0:	19bb      	adds	r3, r7, r6
 801f8e2:	781a      	ldrb	r2, [r3, #0]
 801f8e4:	4981      	ldr	r1, [pc, #516]	; (801faec <Send_DpmInitCnf+0x354>)
 801f8e6:	2008      	movs	r0, #8
 801f8e8:	0013      	movs	r3, r2
 801f8ea:	005b      	lsls	r3, r3, #1
 801f8ec:	189b      	adds	r3, r3, r2
 801f8ee:	009b      	lsls	r3, r3, #2
 801f8f0:	18cb      	adds	r3, r1, r3
 801f8f2:	181b      	adds	r3, r3, r0
 801f8f4:	781b      	ldrb	r3, [r3, #0]
 801f8f6:	07db      	lsls	r3, r3, #31
 801f8f8:	0fdb      	lsrs	r3, r3, #31
 801f8fa:	b2db      	uxtb	r3, r3
 801f8fc:	b29a      	uxth	r2, r3
 801f8fe:	193b      	adds	r3, r7, r4
 801f900:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t *)&settings);
 801f902:	193b      	adds	r3, r7, r4
 801f904:	1978      	adds	r0, r7, r5
 801f906:	2201      	movs	r2, #1
 801f908:	2106      	movs	r1, #6
 801f90a:	f7fe fb01 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_AccesorySupport;
 801f90e:	19bb      	adds	r3, r7, r6
 801f910:	781a      	ldrb	r2, [r3, #0]
 801f912:	4976      	ldr	r1, [pc, #472]	; (801faec <Send_DpmInitCnf+0x354>)
 801f914:	0013      	movs	r3, r2
 801f916:	005b      	lsls	r3, r3, #1
 801f918:	189b      	adds	r3, r3, r2
 801f91a:	009b      	lsls	r3, r3, #2
 801f91c:	18cb      	adds	r3, r1, r3
 801f91e:	795b      	ldrb	r3, [r3, #5]
 801f920:	06db      	lsls	r3, r3, #27
 801f922:	0fdb      	lsrs	r3, r3, #31
 801f924:	b2db      	uxtb	r3, r3
 801f926:	b29a      	uxth	r2, r3
 801f928:	193b      	adds	r3, r7, r4
 801f92a:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ACCESSORYSUPP, 1, (uint8_t *)&settings);
 801f92c:	193b      	adds	r3, r7, r4
 801f92e:	1978      	adds	r0, r7, r5
 801f930:	2201      	movs	r2, #1
 801f932:	2107      	movs	r1, #7
 801f934:	f7fe faec 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryDetection;
 801f938:	19bb      	adds	r3, r7, r6
 801f93a:	781b      	ldrb	r3, [r3, #0]
 801f93c:	4a6c      	ldr	r2, [pc, #432]	; (801faf0 <Send_DpmInitCnf+0x358>)
 801f93e:	2168      	movs	r1, #104	; 0x68
 801f940:	2074      	movs	r0, #116	; 0x74
 801f942:	4343      	muls	r3, r0
 801f944:	18d3      	adds	r3, r2, r3
 801f946:	185b      	adds	r3, r3, r1
 801f948:	78db      	ldrb	r3, [r3, #3]
 801f94a:	07db      	lsls	r3, r3, #31
 801f94c:	0fdb      	lsrs	r3, r3, #31
 801f94e:	b2db      	uxtb	r3, r3
 801f950:	b29a      	uxth	r2, r3
 801f952:	193b      	adds	r3, r7, r4
 801f954:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t *)&settings);
 801f956:	193b      	adds	r3, r7, r4
 801f958:	1978      	adds	r0, r7, r5
 801f95a:	2201      	movs	r2, #1
 801f95c:	2108      	movs	r1, #8
 801f95e:	f7fe fad7 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryTransition;
 801f962:	19bb      	adds	r3, r7, r6
 801f964:	781b      	ldrb	r3, [r3, #0]
 801f966:	4a62      	ldr	r2, [pc, #392]	; (801faf0 <Send_DpmInitCnf+0x358>)
 801f968:	2168      	movs	r1, #104	; 0x68
 801f96a:	2074      	movs	r0, #116	; 0x74
 801f96c:	4343      	muls	r3, r0
 801f96e:	18d3      	adds	r3, r2, r3
 801f970:	185b      	adds	r3, r3, r1
 801f972:	78db      	ldrb	r3, [r3, #3]
 801f974:	079b      	lsls	r3, r3, #30
 801f976:	0fdb      	lsrs	r3, r3, #31
 801f978:	b2db      	uxtb	r3, r3
 801f97a:	b29a      	uxth	r2, r3
 801f97c:	193b      	adds	r3, r7, r4
 801f97e:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t *)&settings);
 801f980:	193b      	adds	r3, r7, r4
 801f982:	1978      	adds	r0, r7, r5
 801f984:	2201      	movs	r2, #1
 801f986:	2109      	movs	r1, #9
 801f988:	f7fe fac2 	bl	801df10 <TLV_add>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ISCABLE, 1, (uint8_t[]) { 0x00 });
 801f98c:	210c      	movs	r1, #12
 801f98e:	187b      	adds	r3, r7, r1
 801f990:	2200      	movs	r2, #0
 801f992:	701a      	strb	r2, [r3, #0]
 801f994:	187b      	adds	r3, r7, r1
 801f996:	1978      	adds	r0, r7, r5
 801f998:	2201      	movs	r2, #1
 801f99a:	210b      	movs	r1, #11
 801f99c:	f7fe fab8 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_TryFeature;
 801f9a0:	19bb      	adds	r3, r7, r6
 801f9a2:	781a      	ldrb	r2, [r3, #0]
 801f9a4:	4951      	ldr	r1, [pc, #324]	; (801faec <Send_DpmInitCnf+0x354>)
 801f9a6:	0013      	movs	r3, r2
 801f9a8:	005b      	lsls	r3, r3, #1
 801f9aa:	189b      	adds	r3, r3, r2
 801f9ac:	009b      	lsls	r3, r3, #2
 801f9ae:	18cb      	adds	r3, r1, r3
 801f9b0:	795b      	ldrb	r3, [r3, #5]
 801f9b2:	071b      	lsls	r3, r3, #28
 801f9b4:	0f9b      	lsrs	r3, r3, #30
 801f9b6:	b2db      	uxtb	r3, r3
 801f9b8:	b29a      	uxth	r2, r3
 801f9ba:	193b      	adds	r3, r7, r4
 801f9bc:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TRYFEATURE, 1, (uint8_t *)&settings);
 801f9be:	193b      	adds	r3, r7, r4
 801f9c0:	1978      	adds	r0, r7, r5
 801f9c2:	2201      	movs	r2, #1
 801f9c4:	2110      	movs	r1, #16
 801f9c6:	f7fe faa3 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_RpResistorValue;
 801f9ca:	19bb      	adds	r3, r7, r6
 801f9cc:	781b      	ldrb	r3, [r3, #0]
 801f9ce:	4a48      	ldr	r2, [pc, #288]	; (801faf0 <Send_DpmInitCnf+0x358>)
 801f9d0:	2168      	movs	r1, #104	; 0x68
 801f9d2:	2074      	movs	r0, #116	; 0x74
 801f9d4:	4343      	muls	r3, r0
 801f9d6:	18d3      	adds	r3, r2, r3
 801f9d8:	185b      	adds	r3, r3, r1
 801f9da:	78db      	ldrb	r3, [r3, #3]
 801f9dc:	06db      	lsls	r3, r3, #27
 801f9de:	0f9b      	lsrs	r3, r3, #30
 801f9e0:	b2db      	uxtb	r3, r3
 801f9e2:	b29a      	uxth	r2, r3
 801f9e4:	193b      	adds	r3, r7, r4
 801f9e6:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_RPRESISTORVALUE, 1, (uint8_t *)&settings);
 801f9e8:	193b      	adds	r3, r7, r4
 801f9ea:	1978      	adds	r0, r7, r5
 801f9ec:	2201      	movs	r2, #1
 801f9ee:	2112      	movs	r1, #18
 801f9f0:	f7fe fa8e 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Support;
 801f9f4:	19bb      	adds	r3, r7, r6
 801f9f6:	781b      	ldrb	r3, [r3, #0]
 801f9f8:	4a3d      	ldr	r2, [pc, #244]	; (801faf0 <Send_DpmInitCnf+0x358>)
 801f9fa:	2168      	movs	r1, #104	; 0x68
 801f9fc:	2074      	movs	r0, #116	; 0x74
 801f9fe:	4343      	muls	r3, r0
 801fa00:	18d3      	adds	r3, r2, r3
 801fa02:	185b      	adds	r3, r3, r1
 801fa04:	78db      	ldrb	r3, [r3, #3]
 801fa06:	069b      	lsls	r3, r3, #26
 801fa08:	0fdb      	lsrs	r3, r3, #31
 801fa0a:	b2db      	uxtb	r3, r3
 801fa0c:	b29a      	uxth	r2, r3
 801fa0e:	193b      	adds	r3, r7, r4
 801fa10:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUPPORT, 1, (uint8_t *)&settings);
 801fa12:	193b      	adds	r3, r7, r4
 801fa14:	1978      	adds	r0, r7, r5
 801fa16:	2201      	movs	r2, #1
 801fa18:	2113      	movs	r1, #19
 801fa1a:	f7fe fa79 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Device;
 801fa1e:	19bb      	adds	r3, r7, r6
 801fa20:	781b      	ldrb	r3, [r3, #0]
 801fa22:	4a33      	ldr	r2, [pc, #204]	; (801faf0 <Send_DpmInitCnf+0x358>)
 801fa24:	2168      	movs	r1, #104	; 0x68
 801fa26:	2074      	movs	r0, #116	; 0x74
 801fa28:	4343      	muls	r3, r0
 801fa2a:	18d3      	adds	r3, r2, r3
 801fa2c:	185b      	adds	r3, r3, r1
 801fa2e:	78db      	ldrb	r3, [r3, #3]
 801fa30:	065b      	lsls	r3, r3, #25
 801fa32:	0fdb      	lsrs	r3, r3, #31
 801fa34:	b2db      	uxtb	r3, r3
 801fa36:	b29a      	uxth	r2, r3
 801fa38:	193b      	adds	r3, r7, r4
 801fa3a:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBDEVICE, 1, (uint8_t *)&settings);
 801fa3c:	193b      	adds	r3, r7, r4
 801fa3e:	1978      	adds	r0, r7, r5
 801fa40:	2201      	movs	r2, #1
 801fa42:	2114      	movs	r1, #20
 801fa44:	f7fe fa64 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Host;
 801fa48:	19bb      	adds	r3, r7, r6
 801fa4a:	781b      	ldrb	r3, [r3, #0]
 801fa4c:	4a28      	ldr	r2, [pc, #160]	; (801faf0 <Send_DpmInitCnf+0x358>)
 801fa4e:	2168      	movs	r1, #104	; 0x68
 801fa50:	2074      	movs	r0, #116	; 0x74
 801fa52:	4343      	muls	r3, r0
 801fa54:	18d3      	adds	r3, r2, r3
 801fa56:	185b      	adds	r3, r3, r1
 801fa58:	78db      	ldrb	r3, [r3, #3]
 801fa5a:	061b      	lsls	r3, r3, #24
 801fa5c:	0fdb      	lsrs	r3, r3, #31
 801fa5e:	b2db      	uxtb	r3, r3
 801fa60:	b29a      	uxth	r2, r3
 801fa62:	193b      	adds	r3, r7, r4
 801fa64:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBHOST, 1, (uint8_t *)&settings);
 801fa66:	193b      	adds	r3, r7, r4
 801fa68:	1978      	adds	r0, r7, r5
 801fa6a:	2201      	movs	r2, #1
 801fa6c:	2115      	movs	r1, #21
 801fa6e:	f7fe fa4f 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_UnconstrainedPower;
 801fa72:	19bb      	adds	r3, r7, r6
 801fa74:	781b      	ldrb	r3, [r3, #0]
 801fa76:	4a1e      	ldr	r2, [pc, #120]	; (801faf0 <Send_DpmInitCnf+0x358>)
 801fa78:	2168      	movs	r1, #104	; 0x68
 801fa7a:	2074      	movs	r0, #116	; 0x74
 801fa7c:	4343      	muls	r3, r0
 801fa7e:	18d3      	adds	r3, r2, r3
 801fa80:	185b      	adds	r3, r3, r1
 801fa82:	78db      	ldrb	r3, [r3, #3]
 801fa84:	075b      	lsls	r3, r3, #29
 801fa86:	0fdb      	lsrs	r3, r3, #31
 801fa88:	b2db      	uxtb	r3, r3
 801fa8a:	b29a      	uxth	r2, r3
 801fa8c:	193b      	adds	r3, r7, r4
 801fa8e:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t *)&settings);
 801fa90:	193b      	adds	r3, r7, r4
 801fa92:	1978      	adds	r0, r7, r5
 801fa94:	2201      	movs	r2, #1
 801fa96:	2116      	movs	r1, #22
 801fa98:	f7fe fa3a 	bl	801df10 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_SuspendSupport;
 801fa9c:	19bb      	adds	r3, r7, r6
 801fa9e:	781b      	ldrb	r3, [r3, #0]
 801faa0:	4a13      	ldr	r2, [pc, #76]	; (801faf0 <Send_DpmInitCnf+0x358>)
 801faa2:	2168      	movs	r1, #104	; 0x68
 801faa4:	2074      	movs	r0, #116	; 0x74
 801faa6:	4343      	muls	r3, r0
 801faa8:	18d3      	adds	r3, r2, r3
 801faaa:	185b      	adds	r3, r3, r1
 801faac:	791b      	ldrb	r3, [r3, #4]
 801faae:	07db      	lsls	r3, r3, #31
 801fab0:	0fdb      	lsrs	r3, r3, #31
 801fab2:	b2db      	uxtb	r3, r3
 801fab4:	b29a      	uxth	r2, r3
 801fab6:	193b      	adds	r3, r7, r4
 801fab8:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t *)&settings);
 801faba:	193b      	adds	r3, r7, r4
 801fabc:	1978      	adds	r0, r7, r5
 801fabe:	2201      	movs	r2, #1
 801fac0:	2117      	movs	r1, #23
 801fac2:	f7fe fa25 	bl	801df10 <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 801fac6:	197b      	adds	r3, r7, r5
 801fac8:	0018      	movs	r0, r3
 801faca:	f7fe fb83 	bl	801e1d4 <TLV_deinit_encode>
}
 801face:	46c0      	nop			; (mov r8, r8)
 801fad0:	46bd      	mov	sp, r7
 801fad2:	b011      	add	sp, #68	; 0x44
 801fad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fad6:	46c0      	nop			; (mov r8, r8)
 801fad8:	20004b48 	.word	0x20004b48
 801fadc:	08023f7c 	.word	0x08023f7c
 801fae0:	20004b4c 	.word	0x20004b4c
 801fae4:	08023f84 	.word	0x08023f84
 801fae8:	20004b3d 	.word	0x20004b3d
 801faec:	200000e4 	.word	0x200000e4
 801faf0:	200000f8 	.word	0x200000f8

0801faf4 <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 801faf4:	b5b0      	push	{r4, r5, r7, lr}
 801faf6:	b090      	sub	sp, #64	; 0x40
 801faf8:	af00      	add	r7, sp, #0
 801fafa:	60b9      	str	r1, [r7, #8]
 801fafc:	607a      	str	r2, [r7, #4]
 801fafe:	240f      	movs	r4, #15
 801fb00:	193b      	adds	r3, r7, r4
 801fb02:	1c02      	adds	r2, r0, #0
 801fb04:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801fb06:	233f      	movs	r3, #63	; 0x3f
 801fb08:	18fb      	adds	r3, r7, r3
 801fb0a:	2202      	movs	r2, #2
 801fb0c:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t process_tlv;
  TLV_ToSend_Data_t send_tlv;

  (void)TLV_init_decode(&process_tlv, instruction);
 801fb0e:	68ba      	ldr	r2, [r7, #8]
 801fb10:	252c      	movs	r5, #44	; 0x2c
 801fb12:	197b      	adds	r3, r7, r5
 801fb14:	0011      	movs	r1, r2
 801fb16:	0018      	movs	r0, r3
 801fb18:	f7fe fb6e 	bl	801e1f8 <TLV_init_decode>
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 801fb1c:	193b      	adds	r3, r7, r4
 801fb1e:	781b      	ldrb	r3, [r3, #0]
 801fb20:	3301      	adds	r3, #1
 801fb22:	015b      	lsls	r3, r3, #5
 801fb24:	b25b      	sxtb	r3, r3
 801fb26:	220a      	movs	r2, #10
 801fb28:	4313      	orrs	r3, r2
 801fb2a:	b25b      	sxtb	r3, r3
 801fb2c:	b2d9      	uxtb	r1, r3
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	2280      	movs	r2, #128	; 0x80
 801fb32:	0052      	lsls	r2, r2, #1
 801fb34:	2020      	movs	r0, #32
 801fb36:	1838      	adds	r0, r7, r0
 801fb38:	f7fe f987 	bl	801de4a <TLV_init_encode>
  USBPD_GUI_Reject_Reason error;

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  (void)TLV_get(&process_tlv, &tag, &length, &value);
 801fb3c:	2318      	movs	r3, #24
 801fb3e:	18fb      	adds	r3, r7, r3
 801fb40:	221c      	movs	r2, #28
 801fb42:	18ba      	adds	r2, r7, r2
 801fb44:	241e      	movs	r4, #30
 801fb46:	1939      	adds	r1, r7, r4
 801fb48:	1978      	adds	r0, r7, r5
 801fb4a:	f7fe fb81 	bl	801e250 <TLV_get>
  switch (tag)
 801fb4e:	193b      	adds	r3, r7, r4
 801fb50:	781b      	ldrb	r3, [r3, #0]
 801fb52:	2b2b      	cmp	r3, #43	; 0x2b
 801fb54:	d900      	bls.n	801fb58 <Request_MessageReq+0x64>
 801fb56:	e2a8      	b.n	80200aa <Request_MessageReq+0x5b6>
 801fb58:	009a      	lsls	r2, r3, #2
 801fb5a:	4bdb      	ldr	r3, [pc, #876]	; (801fec8 <Request_MessageReq+0x3d4>)
 801fb5c:	18d3      	adds	r3, r2, r3
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	469f      	mov	pc, r3
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
    case GUI_MSG_GOTOMIN :
      status = USBPD_DPM_RequestGotoMin(PortNum);
 801fb62:	233f      	movs	r3, #63	; 0x3f
 801fb64:	18fc      	adds	r4, r7, r3
 801fb66:	230f      	movs	r3, #15
 801fb68:	18fb      	adds	r3, r7, r3
 801fb6a:	781b      	ldrb	r3, [r3, #0]
 801fb6c:	0018      	movs	r0, r3
 801fb6e:	f7fa fe25 	bl	801a7bc <USBPD_DPM_RequestGotoMin>
 801fb72:	0003      	movs	r3, r0
 801fb74:	7023      	strb	r3, [r4, #0]
      break;
 801fb76:	e2b7      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_PING :
      status = USBPD_DPM_RequestPing(PortNum);
 801fb78:	233f      	movs	r3, #63	; 0x3f
 801fb7a:	18fc      	adds	r4, r7, r3
 801fb7c:	230f      	movs	r3, #15
 801fb7e:	18fb      	adds	r3, r7, r3
 801fb80:	781b      	ldrb	r3, [r3, #0]
 801fb82:	0018      	movs	r0, r3
 801fb84:	f7fa fe60 	bl	801a848 <USBPD_DPM_RequestPing>
 801fb88:	0003      	movs	r3, r0
 801fb8a:	7023      	strb	r3, [r4, #0]
      break;
 801fb8c:	e2ac      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SRC_CAPA :
      status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 801fb8e:	233f      	movs	r3, #63	; 0x3f
 801fb90:	18fc      	adds	r4, r7, r3
 801fb92:	230f      	movs	r3, #15
 801fb94:	18fb      	adds	r3, r7, r3
 801fb96:	781b      	ldrb	r3, [r3, #0]
 801fb98:	0018      	movs	r0, r3
 801fb9a:	f7fa ff5d 	bl	801aa58 <USBPD_DPM_RequestGetSourceCapability>
 801fb9e:	0003      	movs	r3, r0
 801fba0:	7023      	strb	r3, [r4, #0]
      break;
 801fba2:	e2a1      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SNK_CAPA :
      status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 801fba4:	233f      	movs	r3, #63	; 0x3f
 801fba6:	18fc      	adds	r4, r7, r3
 801fba8:	230f      	movs	r3, #15
 801fbaa:	18fb      	adds	r3, r7, r3
 801fbac:	781b      	ldrb	r3, [r3, #0]
 801fbae:	0018      	movs	r0, r3
 801fbb0:	f7fa ff98 	bl	801aae4 <USBPD_DPM_RequestGetSinkCapability>
 801fbb4:	0003      	movs	r3, r0
 801fbb6:	7023      	strb	r3, [r4, #0]
      break;
 801fbb8:	e296      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_DR_SWAP :
      status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 801fbba:	233f      	movs	r3, #63	; 0x3f
 801fbbc:	18fc      	adds	r4, r7, r3
 801fbbe:	230f      	movs	r3, #15
 801fbc0:	18fb      	adds	r3, r7, r3
 801fbc2:	781b      	ldrb	r3, [r3, #0]
 801fbc4:	0018      	movs	r0, r3
 801fbc6:	f7fa ffd3 	bl	801ab70 <USBPD_DPM_RequestDataRoleSwap>
 801fbca:	0003      	movs	r3, r0
 801fbcc:	7023      	strb	r3, [r4, #0]
      break;
 801fbce:	e28b      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_PR_SWAP :
      status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 801fbd0:	233f      	movs	r3, #63	; 0x3f
 801fbd2:	18fc      	adds	r4, r7, r3
 801fbd4:	230f      	movs	r3, #15
 801fbd6:	18fb      	adds	r3, r7, r3
 801fbd8:	781b      	ldrb	r3, [r3, #0]
 801fbda:	0018      	movs	r0, r3
 801fbdc:	f7fb f80e 	bl	801abfc <USBPD_DPM_RequestPowerRoleSwap>
 801fbe0:	0003      	movs	r3, r0
 801fbe2:	7023      	strb	r3, [r4, #0]
      break;
 801fbe4:	e280      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_VCONN_SWAP :
      status = USBPD_DPM_RequestVconnSwap(PortNum);
 801fbe6:	233f      	movs	r3, #63	; 0x3f
 801fbe8:	18fc      	adds	r4, r7, r3
 801fbea:	230f      	movs	r3, #15
 801fbec:	18fb      	adds	r3, r7, r3
 801fbee:	781b      	ldrb	r3, [r3, #0]
 801fbf0:	0018      	movs	r0, r3
 801fbf2:	f7fb f839 	bl	801ac68 <USBPD_DPM_RequestVconnSwap>
 801fbf6:	0003      	movs	r3, r0
 801fbf8:	7023      	strb	r3, [r4, #0]
      break;
 801fbfa:	e275      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_SOURCE_CAPA :
      status = USBPD_DPM_RequestSourceCapability(PortNum);
 801fbfc:	233f      	movs	r3, #63	; 0x3f
 801fbfe:	18fc      	adds	r4, r7, r3
 801fc00:	230f      	movs	r3, #15
 801fc02:	18fb      	adds	r3, r7, r3
 801fc04:	781b      	ldrb	r3, [r3, #0]
 801fc06:	0018      	movs	r0, r3
 801fc08:	f7fb f8be 	bl	801ad88 <USBPD_DPM_RequestSourceCapability>
 801fc0c:	0003      	movs	r3, r0
 801fc0e:	7023      	strb	r3, [r4, #0]
      break;
 801fc10:	e26a      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 801fc12:	233c      	movs	r3, #60	; 0x3c
 801fc14:	18fb      	adds	r3, r7, r3
 801fc16:	2200      	movs	r2, #0
 801fc18:	801a      	strh	r2, [r3, #0]
      uint8_t nb_expected_tag = 0U;
 801fc1a:	233b      	movs	r3, #59	; 0x3b
 801fc1c:	18fb      	adds	r3, r7, r3
 801fc1e:	2200      	movs	r2, #0
 801fc20:	701a      	strb	r2, [r3, #0]
      uint8_t index_pdo = 0;
 801fc22:	233a      	movs	r3, #58	; 0x3a
 801fc24:	18fb      	adds	r3, r7, r3
 801fc26:	2200      	movs	r2, #0
 801fc28:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 801fc2a:	211c      	movs	r1, #28
 801fc2c:	187b      	adds	r3, r7, r1
 801fc2e:	881a      	ldrh	r2, [r3, #0]
 801fc30:	2380      	movs	r3, #128	; 0x80
 801fc32:	005b      	lsls	r3, r3, #1
 801fc34:	429a      	cmp	r2, r3
 801fc36:	d900      	bls.n	801fc3a <Request_MessageReq+0x146>
 801fc38:	e239      	b.n	80200ae <Request_MessageReq+0x5ba>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801fc3a:	2318      	movs	r3, #24
 801fc3c:	18fb      	adds	r3, r7, r3
 801fc3e:	187a      	adds	r2, r7, r1
 801fc40:	211e      	movs	r1, #30
 801fc42:	1879      	adds	r1, r7, r1
 801fc44:	202c      	movs	r0, #44	; 0x2c
 801fc46:	1838      	adds	r0, r7, r0
 801fc48:	f7fe fb02 	bl	801e250 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 801fc4c:	e02c      	b.n	801fca8 <Request_MessageReq+0x1b4>
      {
        nb_expected_tag++;
 801fc4e:	213b      	movs	r1, #59	; 0x3b
 801fc50:	187b      	adds	r3, r7, r1
 801fc52:	781a      	ldrb	r2, [r3, #0]
 801fc54:	187b      	adds	r3, r7, r1
 801fc56:	3201      	adds	r2, #1
 801fc58:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 801fc5a:	231e      	movs	r3, #30
 801fc5c:	18fb      	adds	r3, r7, r3
 801fc5e:	781b      	ldrb	r3, [r3, #0]
 801fc60:	2b01      	cmp	r3, #1
 801fc62:	d105      	bne.n	801fc70 <Request_MessageReq+0x17c>
        {
          index_pdo = value[0];
 801fc64:	69ba      	ldr	r2, [r7, #24]
 801fc66:	233a      	movs	r3, #58	; 0x3a
 801fc68:	18fb      	adds	r3, r7, r3
 801fc6a:	7812      	ldrb	r2, [r2, #0]
 801fc6c:	701a      	strb	r2, [r3, #0]
 801fc6e:	e011      	b.n	801fc94 <Request_MessageReq+0x1a0>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 801fc70:	231e      	movs	r3, #30
 801fc72:	18fb      	adds	r3, r7, r3
 801fc74:	781b      	ldrb	r3, [r3, #0]
 801fc76:	2b02      	cmp	r3, #2
 801fc78:	d10c      	bne.n	801fc94 <Request_MessageReq+0x1a0>
        {
          voltage = USBPD_LE16(&value[0]);
 801fc7a:	69bb      	ldr	r3, [r7, #24]
 801fc7c:	781b      	ldrb	r3, [r3, #0]
 801fc7e:	b299      	uxth	r1, r3
 801fc80:	69bb      	ldr	r3, [r7, #24]
 801fc82:	3301      	adds	r3, #1
 801fc84:	781b      	ldrb	r3, [r3, #0]
 801fc86:	b29b      	uxth	r3, r3
 801fc88:	021b      	lsls	r3, r3, #8
 801fc8a:	b29a      	uxth	r2, r3
 801fc8c:	233c      	movs	r3, #60	; 0x3c
 801fc8e:	18fb      	adds	r3, r7, r3
 801fc90:	188a      	adds	r2, r1, r2
 801fc92:	801a      	strh	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 801fc94:	2318      	movs	r3, #24
 801fc96:	18fb      	adds	r3, r7, r3
 801fc98:	221c      	movs	r2, #28
 801fc9a:	18ba      	adds	r2, r7, r2
 801fc9c:	211e      	movs	r1, #30
 801fc9e:	1879      	adds	r1, r7, r1
 801fca0:	202c      	movs	r0, #44	; 0x2c
 801fca2:	1838      	adds	r0, r7, r0
 801fca4:	f7fe fad4 	bl	801e250 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 801fca8:	221c      	movs	r2, #28
 801fcaa:	18bb      	adds	r3, r7, r2
 801fcac:	881b      	ldrh	r3, [r3, #0]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d008      	beq.n	801fcc4 <Request_MessageReq+0x1d0>
 801fcb2:	18bb      	adds	r3, r7, r2
 801fcb4:	881b      	ldrh	r3, [r3, #0]
 801fcb6:	2bff      	cmp	r3, #255	; 0xff
 801fcb8:	d804      	bhi.n	801fcc4 <Request_MessageReq+0x1d0>
 801fcba:	233b      	movs	r3, #59	; 0x3b
 801fcbc:	18fb      	adds	r3, r7, r3
 801fcbe:	781b      	ldrb	r3, [r3, #0]
 801fcc0:	2b01      	cmp	r3, #1
 801fcc2:	d9c4      	bls.n	801fc4e <Request_MessageReq+0x15a>
      }
      if (2U == nb_expected_tag)
 801fcc4:	233b      	movs	r3, #59	; 0x3b
 801fcc6:	18fb      	adds	r3, r7, r3
 801fcc8:	781b      	ldrb	r3, [r3, #0]
 801fcca:	2b02      	cmp	r3, #2
 801fccc:	d000      	beq.n	801fcd0 <Request_MessageReq+0x1dc>
 801fcce:	e1f0      	b.n	80200b2 <Request_MessageReq+0x5be>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 801fcd0:	233f      	movs	r3, #63	; 0x3f
 801fcd2:	18fc      	adds	r4, r7, r3
 801fcd4:	233c      	movs	r3, #60	; 0x3c
 801fcd6:	18fb      	adds	r3, r7, r3
 801fcd8:	881a      	ldrh	r2, [r3, #0]
 801fcda:	233a      	movs	r3, #58	; 0x3a
 801fcdc:	18fb      	adds	r3, r7, r3
 801fcde:	7819      	ldrb	r1, [r3, #0]
 801fce0:	230f      	movs	r3, #15
 801fce2:	18fb      	adds	r3, r7, r3
 801fce4:	781b      	ldrb	r3, [r3, #0]
 801fce6:	0018      	movs	r0, r3
 801fce8:	f7fa fdf4 	bl	801a8d4 <USBPD_DPM_RequestMessageRequest>
 801fcec:	0003      	movs	r3, r0
 801fcee:	7023      	strb	r3, [r4, #0]
      }
      break;
 801fcf0:	e1df      	b.n	80200b2 <Request_MessageReq+0x5be>
    }
    case GUI_MSG_SOFT_RESET :
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801fcf2:	2318      	movs	r3, #24
 801fcf4:	18fb      	adds	r3, r7, r3
 801fcf6:	221c      	movs	r2, #28
 801fcf8:	18ba      	adds	r2, r7, r2
 801fcfa:	241e      	movs	r4, #30
 801fcfc:	1939      	adds	r1, r7, r4
 801fcfe:	202c      	movs	r0, #44	; 0x2c
 801fd00:	1838      	adds	r0, r7, r0
 801fd02:	f7fe faa5 	bl	801e250 <TLV_get>
      if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 801fd06:	193b      	adds	r3, r7, r4
 801fd08:	781b      	ldrb	r3, [r3, #0]
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	d000      	beq.n	801fd10 <Request_MessageReq+0x21c>
 801fd0e:	e1d2      	b.n	80200b6 <Request_MessageReq+0x5c2>
      {
        status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 801fd10:	69bb      	ldr	r3, [r7, #24]
 801fd12:	781a      	ldrb	r2, [r3, #0]
 801fd14:	233f      	movs	r3, #63	; 0x3f
 801fd16:	18fc      	adds	r4, r7, r3
 801fd18:	230f      	movs	r3, #15
 801fd1a:	18fb      	adds	r3, r7, r3
 801fd1c:	781b      	ldrb	r3, [r3, #0]
 801fd1e:	0011      	movs	r1, r2
 801fd20:	0018      	movs	r0, r3
 801fd22:	f7fa ffe7 	bl	801acf4 <USBPD_DPM_RequestSoftReset>
 801fd26:	0003      	movs	r3, r0
 801fd28:	7023      	strb	r3, [r4, #0]
      }
      break;
 801fd2a:	e1c4      	b.n	80200b6 <Request_MessageReq+0x5c2>
    case GUI_MSG_HARD_RESET :
      status = USBPD_DPM_RequestHardReset(PortNum);
 801fd2c:	233f      	movs	r3, #63	; 0x3f
 801fd2e:	18fc      	adds	r4, r7, r3
 801fd30:	230f      	movs	r3, #15
 801fd32:	18fb      	adds	r3, r7, r3
 801fd34:	781b      	ldrb	r3, [r3, #0]
 801fd36:	0018      	movs	r0, r3
 801fd38:	f7fa fcb8 	bl	801a6ac <USBPD_DPM_RequestHardReset>
 801fd3c:	0003      	movs	r3, r0
 801fd3e:	7023      	strb	r3, [r4, #0]
      break;
 801fd40:	e1d2      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_CABLE_RESET :
      status = USBPD_DPM_RequestCableReset(PortNum);
 801fd42:	233f      	movs	r3, #63	; 0x3f
 801fd44:	18fc      	adds	r4, r7, r3
 801fd46:	230f      	movs	r3, #15
 801fd48:	18fb      	adds	r3, r7, r3
 801fd4a:	781b      	ldrb	r3, [r3, #0]
 801fd4c:	0018      	movs	r0, r3
 801fd4e:	f7fa fcf1 	bl	801a734 <USBPD_DPM_RequestCableReset>
 801fd52:	0003      	movs	r3, r0
 801fd54:	7023      	strb	r3, [r4, #0]
      break;
 801fd56:	e1c7      	b.n	80200e8 <Request_MessageReq+0x5f4>
    }
    break;
#endif /* _VDM */
    case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0U;
 801fd58:	2339      	movs	r3, #57	; 0x39
 801fd5a:	18fb      	adds	r3, r7, r3
 801fd5c:	2200      	movs	r2, #0
 801fd5e:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 801fd60:	211c      	movs	r1, #28
 801fd62:	187b      	adds	r3, r7, r1
 801fd64:	881a      	ldrh	r2, [r3, #0]
 801fd66:	2380      	movs	r3, #128	; 0x80
 801fd68:	005b      	lsls	r3, r3, #1
 801fd6a:	429a      	cmp	r2, r3
 801fd6c:	d900      	bls.n	801fd70 <Request_MessageReq+0x27c>
 801fd6e:	e1a4      	b.n	80200ba <Request_MessageReq+0x5c6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801fd70:	2318      	movs	r3, #24
 801fd72:	18fb      	adds	r3, r7, r3
 801fd74:	187a      	adds	r2, r7, r1
 801fd76:	211e      	movs	r1, #30
 801fd78:	1879      	adds	r1, r7, r1
 801fd7a:	202c      	movs	r0, #44	; 0x2c
 801fd7c:	1838      	adds	r0, r7, r0
 801fd7e:	f7fe fa67 	bl	801e250 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 801fd82:	e005      	b.n	801fd90 <Request_MessageReq+0x29c>
      {
        nb_expected_tag++;
 801fd84:	2139      	movs	r1, #57	; 0x39
 801fd86:	187b      	adds	r3, r7, r1
 801fd88:	781a      	ldrb	r2, [r3, #0]
 801fd8a:	187b      	adds	r3, r7, r1
 801fd8c:	3201      	adds	r2, #1
 801fd8e:	701a      	strb	r2, [r3, #0]
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 801fd90:	221c      	movs	r2, #28
 801fd92:	18bb      	adds	r3, r7, r2
 801fd94:	881b      	ldrh	r3, [r3, #0]
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d008      	beq.n	801fdac <Request_MessageReq+0x2b8>
 801fd9a:	18bb      	adds	r3, r7, r2
 801fd9c:	881b      	ldrh	r3, [r3, #0]
 801fd9e:	2bff      	cmp	r3, #255	; 0xff
 801fda0:	d804      	bhi.n	801fdac <Request_MessageReq+0x2b8>
 801fda2:	2339      	movs	r3, #57	; 0x39
 801fda4:	18fb      	adds	r3, r7, r3
 801fda6:	781b      	ldrb	r3, [r3, #0]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d0eb      	beq.n	801fd84 <Request_MessageReq+0x290>
      }
      if (1U == nb_expected_tag)
 801fdac:	2339      	movs	r3, #57	; 0x39
 801fdae:	18fb      	adds	r3, r7, r3
 801fdb0:	781b      	ldrb	r3, [r3, #0]
 801fdb2:	2b01      	cmp	r3, #1
 801fdb4:	d000      	beq.n	801fdb8 <Request_MessageReq+0x2c4>
 801fdb6:	e182      	b.n	80200be <Request_MessageReq+0x5ca>
      {
        status = Manage_FreeText(PortNum, value, length);
 801fdb8:	69b9      	ldr	r1, [r7, #24]
 801fdba:	231c      	movs	r3, #28
 801fdbc:	18fb      	adds	r3, r7, r3
 801fdbe:	881a      	ldrh	r2, [r3, #0]
 801fdc0:	233f      	movs	r3, #63	; 0x3f
 801fdc2:	18fc      	adds	r4, r7, r3
 801fdc4:	230f      	movs	r3, #15
 801fdc6:	18fb      	adds	r3, r7, r3
 801fdc8:	781b      	ldrb	r3, [r3, #0]
 801fdca:	0018      	movs	r0, r3
 801fdcc:	f001 f9d6 	bl	802117c <Manage_FreeText>
 801fdd0:	0003      	movs	r3, r0
 801fdd2:	7023      	strb	r3, [r4, #0]
      }
      break;
 801fdd4:	e173      	b.n	80200be <Request_MessageReq+0x5ca>
    }
#ifdef USBPD_REV30_SUPPORT
    case GUI_MSG_FR_SWAP :
      status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 801fdd6:	233f      	movs	r3, #63	; 0x3f
 801fdd8:	18fc      	adds	r4, r7, r3
 801fdda:	230f      	movs	r3, #15
 801fddc:	18fb      	adds	r3, r7, r3
 801fdde:	781b      	ldrb	r3, [r3, #0]
 801fde0:	0018      	movs	r0, r3
 801fde2:	f7fb f9cd 	bl	801b180 <USBPD_DPM_RequestFastRoleSwap>
 801fde6:	0003      	movs	r3, r0
 801fde8:	7023      	strb	r3, [r4, #0]
      break;
 801fdea:	e17d      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_PPS_STATUS :
      status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 801fdec:	233f      	movs	r3, #63	; 0x3f
 801fdee:	18fc      	adds	r4, r7, r3
 801fdf0:	230f      	movs	r3, #15
 801fdf2:	18fb      	adds	r3, r7, r3
 801fdf4:	781b      	ldrb	r3, [r3, #0]
 801fdf6:	0018      	movs	r0, r3
 801fdf8:	f7fb f936 	bl	801b068 <USBPD_DPM_RequestGetPPS_Status>
 801fdfc:	0003      	movs	r3, r0
 801fdfe:	7023      	strb	r3, [r4, #0]
      break;
 801fe00:	e172      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_COUNTRY_CODES :
      status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 801fe02:	233f      	movs	r3, #63	; 0x3f
 801fe04:	18fc      	adds	r4, r7, r3
 801fe06:	230f      	movs	r3, #15
 801fe08:	18fb      	adds	r3, r7, r3
 801fe0a:	781b      	ldrb	r3, [r3, #0]
 801fe0c:	0018      	movs	r0, r3
 801fe0e:	f7fb f9fd 	bl	801b20c <USBPD_DPM_RequestGetCountryCodes>
 801fe12:	0003      	movs	r3, r0
 801fe14:	7023      	strb	r3, [r4, #0]
      break;
 801fe16:	e167      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_STATUS :
      status = USBPD_DPM_RequestGetStatus(PortNum);
 801fe18:	233f      	movs	r3, #63	; 0x3f
 801fe1a:	18fc      	adds	r4, r7, r3
 801fe1c:	230f      	movs	r3, #15
 801fe1e:	18fb      	adds	r3, r7, r3
 801fe20:	781b      	ldrb	r3, [r3, #0]
 801fe22:	0018      	movs	r0, r3
 801fe24:	f7fb f966 	bl	801b0f4 <USBPD_DPM_RequestGetStatus>
 801fe28:	0003      	movs	r3, r0
 801fe2a:	7023      	strb	r3, [r4, #0]
      break;
 801fe2c:	e15c      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 801fe2e:	233f      	movs	r3, #63	; 0x3f
 801fe30:	18fc      	adds	r4, r7, r3
 801fe32:	230f      	movs	r3, #15
 801fe34:	18fb      	adds	r3, r7, r3
 801fe36:	781b      	ldrb	r3, [r3, #0]
 801fe38:	0018      	movs	r0, r3
 801fe3a:	f7fb f833 	bl	801aea4 <USBPD_DPM_RequestGetSourceCapabilityExt>
 801fe3e:	0003      	movs	r3, r0
 801fe40:	7023      	strb	r3, [r4, #0]
      break;
 801fe42:	e151      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SINK_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 801fe44:	233f      	movs	r3, #63	; 0x3f
 801fe46:	18fc      	adds	r4, r7, r3
 801fe48:	230f      	movs	r3, #15
 801fe4a:	18fb      	adds	r3, r7, r3
 801fe4c:	781b      	ldrb	r3, [r3, #0]
 801fe4e:	0018      	movs	r0, r3
 801fe50:	f7fb f86e 	bl	801af30 <USBPD_DPM_RequestGetSinkCapabilityExt>
 801fe54:	0003      	movs	r3, r0
 801fe56:	7023      	strb	r3, [r4, #0]
      break;
 801fe58:	e146      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_ALERT :
      if (length > TLV_SIZE_MAX)
 801fe5a:	211c      	movs	r1, #28
 801fe5c:	187b      	adds	r3, r7, r1
 801fe5e:	881a      	ldrh	r2, [r3, #0]
 801fe60:	2380      	movs	r3, #128	; 0x80
 801fe62:	005b      	lsls	r3, r3, #1
 801fe64:	429a      	cmp	r2, r3
 801fe66:	d900      	bls.n	801fe6a <Request_MessageReq+0x376>
 801fe68:	e12b      	b.n	80200c2 <Request_MessageReq+0x5ce>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801fe6a:	2318      	movs	r3, #24
 801fe6c:	18fb      	adds	r3, r7, r3
 801fe6e:	187a      	adds	r2, r7, r1
 801fe70:	241e      	movs	r4, #30
 801fe72:	1939      	adds	r1, r7, r4
 801fe74:	202c      	movs	r0, #44	; 0x2c
 801fe76:	1838      	adds	r0, r7, r0
 801fe78:	f7fe f9ea 	bl	801e250 <TLV_get>
      if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 801fe7c:	193b      	adds	r3, r7, r4
 801fe7e:	781b      	ldrb	r3, [r3, #0]
 801fe80:	2b04      	cmp	r3, #4
 801fe82:	d000      	beq.n	801fe86 <Request_MessageReq+0x392>
 801fe84:	e11f      	b.n	80200c6 <Request_MessageReq+0x5d2>
      {
        USBPD_ADO_TypeDef alert;
        alert.d32 = USBPD_LE32(&value[0]);
 801fe86:	69bb      	ldr	r3, [r7, #24]
 801fe88:	781b      	ldrb	r3, [r3, #0]
 801fe8a:	001a      	movs	r2, r3
 801fe8c:	69bb      	ldr	r3, [r7, #24]
 801fe8e:	3301      	adds	r3, #1
 801fe90:	781b      	ldrb	r3, [r3, #0]
 801fe92:	021b      	lsls	r3, r3, #8
 801fe94:	18d2      	adds	r2, r2, r3
 801fe96:	69bb      	ldr	r3, [r7, #24]
 801fe98:	3302      	adds	r3, #2
 801fe9a:	781b      	ldrb	r3, [r3, #0]
 801fe9c:	041b      	lsls	r3, r3, #16
 801fe9e:	18d2      	adds	r2, r2, r3
 801fea0:	69bb      	ldr	r3, [r7, #24]
 801fea2:	3303      	adds	r3, #3
 801fea4:	781b      	ldrb	r3, [r3, #0]
 801fea6:	061b      	lsls	r3, r3, #24
 801fea8:	18d3      	adds	r3, r2, r3
 801feaa:	617b      	str	r3, [r7, #20]
        status = USBPD_DPM_RequestAlert(PortNum, alert);
 801feac:	233f      	movs	r3, #63	; 0x3f
 801feae:	18fc      	adds	r4, r7, r3
 801feb0:	697a      	ldr	r2, [r7, #20]
 801feb2:	230f      	movs	r3, #15
 801feb4:	18fb      	adds	r3, r7, r3
 801feb6:	781b      	ldrb	r3, [r3, #0]
 801feb8:	0011      	movs	r1, r2
 801feba:	0018      	movs	r0, r3
 801febc:	f7fa ffaa 	bl	801ae14 <USBPD_DPM_RequestAlert>
 801fec0:	0003      	movs	r3, r0
 801fec2:	7023      	strb	r3, [r4, #0]
      }
      break;
 801fec4:	e0ff      	b.n	80200c6 <Request_MessageReq+0x5d2>
 801fec6:	46c0      	nop			; (mov r8, r8)
 801fec8:	08024460 	.word	0x08024460
    case GUI_MSG_GET_COUNTRY_INFO :
      if (length > TLV_SIZE_MAX)
 801fecc:	211c      	movs	r1, #28
 801fece:	187b      	adds	r3, r7, r1
 801fed0:	881a      	ldrh	r2, [r3, #0]
 801fed2:	2380      	movs	r3, #128	; 0x80
 801fed4:	005b      	lsls	r3, r3, #1
 801fed6:	429a      	cmp	r2, r3
 801fed8:	d900      	bls.n	801fedc <Request_MessageReq+0x3e8>
 801feda:	e0f6      	b.n	80200ca <Request_MessageReq+0x5d6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801fedc:	2318      	movs	r3, #24
 801fede:	18fb      	adds	r3, r7, r3
 801fee0:	187a      	adds	r2, r7, r1
 801fee2:	241e      	movs	r4, #30
 801fee4:	1939      	adds	r1, r7, r4
 801fee6:	202c      	movs	r0, #44	; 0x2c
 801fee8:	1838      	adds	r0, r7, r0
 801feea:	f7fe f9b1 	bl	801e250 <TLV_get>
      if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 801feee:	193b      	adds	r3, r7, r4
 801fef0:	781b      	ldrb	r3, [r3, #0]
 801fef2:	2b05      	cmp	r3, #5
 801fef4:	d000      	beq.n	801fef8 <Request_MessageReq+0x404>
 801fef6:	e0ea      	b.n	80200ce <Request_MessageReq+0x5da>
      {
        uint16_t country_code;
        country_code = USBPD_LE16(&value[0]);
 801fef8:	69bb      	ldr	r3, [r7, #24]
 801fefa:	781b      	ldrb	r3, [r3, #0]
 801fefc:	b299      	uxth	r1, r3
 801fefe:	69bb      	ldr	r3, [r7, #24]
 801ff00:	3301      	adds	r3, #1
 801ff02:	781b      	ldrb	r3, [r3, #0]
 801ff04:	b29b      	uxth	r3, r3
 801ff06:	021b      	lsls	r3, r3, #8
 801ff08:	b29a      	uxth	r2, r3
 801ff0a:	2034      	movs	r0, #52	; 0x34
 801ff0c:	183b      	adds	r3, r7, r0
 801ff0e:	188a      	adds	r2, r1, r2
 801ff10:	801a      	strh	r2, [r3, #0]
        status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 801ff12:	233f      	movs	r3, #63	; 0x3f
 801ff14:	18fc      	adds	r4, r7, r3
 801ff16:	183b      	adds	r3, r7, r0
 801ff18:	881a      	ldrh	r2, [r3, #0]
 801ff1a:	230f      	movs	r3, #15
 801ff1c:	18fb      	adds	r3, r7, r3
 801ff1e:	781b      	ldrb	r3, [r3, #0]
 801ff20:	0011      	movs	r1, r2
 801ff22:	0018      	movs	r0, r3
 801ff24:	f7fb f9b8 	bl	801b298 <USBPD_DPM_RequestGetCountryInfo>
 801ff28:	0003      	movs	r3, r0
 801ff2a:	7023      	strb	r3, [r4, #0]
      }
      break;
 801ff2c:	e0cf      	b.n	80200ce <Request_MessageReq+0x5da>
    case GUI_MSG_GET_BAT_CAPA :
      if (length > TLV_SIZE_MAX)
 801ff2e:	211c      	movs	r1, #28
 801ff30:	187b      	adds	r3, r7, r1
 801ff32:	881a      	ldrh	r2, [r3, #0]
 801ff34:	2380      	movs	r3, #128	; 0x80
 801ff36:	005b      	lsls	r3, r3, #1
 801ff38:	429a      	cmp	r2, r3
 801ff3a:	d900      	bls.n	801ff3e <Request_MessageReq+0x44a>
 801ff3c:	e0c9      	b.n	80200d2 <Request_MessageReq+0x5de>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801ff3e:	2318      	movs	r3, #24
 801ff40:	18fb      	adds	r3, r7, r3
 801ff42:	187a      	adds	r2, r7, r1
 801ff44:	241e      	movs	r4, #30
 801ff46:	1939      	adds	r1, r7, r4
 801ff48:	202c      	movs	r0, #44	; 0x2c
 801ff4a:	1838      	adds	r0, r7, r0
 801ff4c:	f7fe f980 	bl	801e250 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 801ff50:	193b      	adds	r3, r7, r4
 801ff52:	781b      	ldrb	r3, [r3, #0]
 801ff54:	2b0c      	cmp	r3, #12
 801ff56:	d000      	beq.n	801ff5a <Request_MessageReq+0x466>
 801ff58:	e0bd      	b.n	80200d6 <Request_MessageReq+0x5e2>
      {
        status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t *)&value[0]);
 801ff5a:	69ba      	ldr	r2, [r7, #24]
 801ff5c:	233f      	movs	r3, #63	; 0x3f
 801ff5e:	18fc      	adds	r4, r7, r3
 801ff60:	230f      	movs	r3, #15
 801ff62:	18fb      	adds	r3, r7, r3
 801ff64:	781b      	ldrb	r3, [r3, #0]
 801ff66:	0011      	movs	r1, r2
 801ff68:	0018      	movs	r0, r3
 801ff6a:	f7fb f9df 	bl	801b32c <USBPD_DPM_RequestGetBatteryCapability>
 801ff6e:	0003      	movs	r3, r0
 801ff70:	7023      	strb	r3, [r4, #0]
      }
      break;
 801ff72:	e0b0      	b.n	80200d6 <Request_MessageReq+0x5e2>
    case GUI_MSG_GET_BAT_STATUS :
      if (length > TLV_SIZE_MAX)
 801ff74:	211c      	movs	r1, #28
 801ff76:	187b      	adds	r3, r7, r1
 801ff78:	881a      	ldrh	r2, [r3, #0]
 801ff7a:	2380      	movs	r3, #128	; 0x80
 801ff7c:	005b      	lsls	r3, r3, #1
 801ff7e:	429a      	cmp	r2, r3
 801ff80:	d900      	bls.n	801ff84 <Request_MessageReq+0x490>
 801ff82:	e0aa      	b.n	80200da <Request_MessageReq+0x5e6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801ff84:	2318      	movs	r3, #24
 801ff86:	18fb      	adds	r3, r7, r3
 801ff88:	187a      	adds	r2, r7, r1
 801ff8a:	241e      	movs	r4, #30
 801ff8c:	1939      	adds	r1, r7, r4
 801ff8e:	202c      	movs	r0, #44	; 0x2c
 801ff90:	1838      	adds	r0, r7, r0
 801ff92:	f7fe f95d 	bl	801e250 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 801ff96:	193b      	adds	r3, r7, r4
 801ff98:	781b      	ldrb	r3, [r3, #0]
 801ff9a:	2b0c      	cmp	r3, #12
 801ff9c:	d000      	beq.n	801ffa0 <Request_MessageReq+0x4ac>
 801ff9e:	e09e      	b.n	80200de <Request_MessageReq+0x5ea>
      {
        status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t *)&value[0]);
 801ffa0:	69ba      	ldr	r2, [r7, #24]
 801ffa2:	233f      	movs	r3, #63	; 0x3f
 801ffa4:	18fc      	adds	r4, r7, r3
 801ffa6:	230f      	movs	r3, #15
 801ffa8:	18fb      	adds	r3, r7, r3
 801ffaa:	781b      	ldrb	r3, [r3, #0]
 801ffac:	0011      	movs	r1, r2
 801ffae:	0018      	movs	r0, r3
 801ffb0:	f7fb fa06 	bl	801b3c0 <USBPD_DPM_RequestGetBatteryStatus>
 801ffb4:	0003      	movs	r3, r0
 801ffb6:	7023      	strb	r3, [r4, #0]
      }
      break;
 801ffb8:	e091      	b.n	80200de <Request_MessageReq+0x5ea>
    case GUI_MSG_GET_MANU_INFO :
    {
      uint8_t manu_info[2];
      uint8_t nb_expected_tag = 0U;
 801ffba:	2338      	movs	r3, #56	; 0x38
 801ffbc:	18fb      	adds	r3, r7, r3
 801ffbe:	2200      	movs	r2, #0
 801ffc0:	701a      	strb	r2, [r3, #0]
      uint8_t sop = (uint8_t)USBPD_SOPTYPE_SOP;
 801ffc2:	2337      	movs	r3, #55	; 0x37
 801ffc4:	18fb      	adds	r3, r7, r3
 801ffc6:	2200      	movs	r2, #0
 801ffc8:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 801ffca:	211c      	movs	r1, #28
 801ffcc:	187b      	adds	r3, r7, r1
 801ffce:	881a      	ldrh	r2, [r3, #0]
 801ffd0:	2380      	movs	r3, #128	; 0x80
 801ffd2:	005b      	lsls	r3, r3, #1
 801ffd4:	429a      	cmp	r2, r3
 801ffd6:	d900      	bls.n	801ffda <Request_MessageReq+0x4e6>
 801ffd8:	e083      	b.n	80200e2 <Request_MessageReq+0x5ee>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 801ffda:	2318      	movs	r3, #24
 801ffdc:	18fb      	adds	r3, r7, r3
 801ffde:	187a      	adds	r2, r7, r1
 801ffe0:	211e      	movs	r1, #30
 801ffe2:	1879      	adds	r1, r7, r1
 801ffe4:	202c      	movs	r0, #44	; 0x2c
 801ffe6:	1838      	adds	r0, r7, r0
 801ffe8:	f7fe f932 	bl	801e250 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 801ffec:	e02f      	b.n	802004e <Request_MessageReq+0x55a>
      {
        nb_expected_tag++;
 801ffee:	2138      	movs	r1, #56	; 0x38
 801fff0:	187b      	adds	r3, r7, r1
 801fff2:	781a      	ldrb	r2, [r3, #0]
 801fff4:	187b      	adds	r3, r7, r1
 801fff6:	3201      	adds	r2, #1
 801fff8:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 801fffa:	231e      	movs	r3, #30
 801fffc:	18fb      	adds	r3, r7, r3
 801fffe:	781b      	ldrb	r3, [r3, #0]
 8020000:	2b00      	cmp	r3, #0
 8020002:	d105      	bne.n	8020010 <Request_MessageReq+0x51c>
        {
          sop = value[0];
 8020004:	69ba      	ldr	r2, [r7, #24]
 8020006:	2337      	movs	r3, #55	; 0x37
 8020008:	18fb      	adds	r3, r7, r3
 802000a:	7812      	ldrb	r2, [r2, #0]
 802000c:	701a      	strb	r2, [r3, #0]
 802000e:	e014      	b.n	802003a <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8020010:	231e      	movs	r3, #30
 8020012:	18fb      	adds	r3, r7, r3
 8020014:	781b      	ldrb	r3, [r3, #0]
 8020016:	2b0c      	cmp	r3, #12
 8020018:	d105      	bne.n	8020026 <Request_MessageReq+0x532>
        {
          manu_info[1] = value[0];
 802001a:	69bb      	ldr	r3, [r7, #24]
 802001c:	781a      	ldrb	r2, [r3, #0]
 802001e:	2310      	movs	r3, #16
 8020020:	18fb      	adds	r3, r7, r3
 8020022:	705a      	strb	r2, [r3, #1]
 8020024:	e009      	b.n	802003a <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 8020026:	231e      	movs	r3, #30
 8020028:	18fb      	adds	r3, r7, r3
 802002a:	781b      	ldrb	r3, [r3, #0]
 802002c:	2b0d      	cmp	r3, #13
 802002e:	d104      	bne.n	802003a <Request_MessageReq+0x546>
        {
          manu_info[0] = value[0];
 8020030:	69bb      	ldr	r3, [r7, #24]
 8020032:	781a      	ldrb	r2, [r3, #0]
 8020034:	2310      	movs	r3, #16
 8020036:	18fb      	adds	r3, r7, r3
 8020038:	701a      	strb	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 802003a:	2318      	movs	r3, #24
 802003c:	18fb      	adds	r3, r7, r3
 802003e:	221c      	movs	r2, #28
 8020040:	18ba      	adds	r2, r7, r2
 8020042:	211e      	movs	r1, #30
 8020044:	1879      	adds	r1, r7, r1
 8020046:	202c      	movs	r0, #44	; 0x2c
 8020048:	1838      	adds	r0, r7, r0
 802004a:	f7fe f901 	bl	801e250 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 802004e:	221c      	movs	r2, #28
 8020050:	18bb      	adds	r3, r7, r2
 8020052:	881b      	ldrh	r3, [r3, #0]
 8020054:	2b00      	cmp	r3, #0
 8020056:	d008      	beq.n	802006a <Request_MessageReq+0x576>
 8020058:	18bb      	adds	r3, r7, r2
 802005a:	881b      	ldrh	r3, [r3, #0]
 802005c:	2bff      	cmp	r3, #255	; 0xff
 802005e:	d804      	bhi.n	802006a <Request_MessageReq+0x576>
 8020060:	2338      	movs	r3, #56	; 0x38
 8020062:	18fb      	adds	r3, r7, r3
 8020064:	781b      	ldrb	r3, [r3, #0]
 8020066:	2b02      	cmp	r3, #2
 8020068:	d9c1      	bls.n	801ffee <Request_MessageReq+0x4fa>
      }
      if (3U == nb_expected_tag)
 802006a:	2338      	movs	r3, #56	; 0x38
 802006c:	18fb      	adds	r3, r7, r3
 802006e:	781b      	ldrb	r3, [r3, #0]
 8020070:	2b03      	cmp	r3, #3
 8020072:	d138      	bne.n	80200e6 <Request_MessageReq+0x5f2>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t *)&manu_info);
 8020074:	233f      	movs	r3, #63	; 0x3f
 8020076:	18fc      	adds	r4, r7, r3
 8020078:	2310      	movs	r3, #16
 802007a:	18fa      	adds	r2, r7, r3
 802007c:	2337      	movs	r3, #55	; 0x37
 802007e:	18fb      	adds	r3, r7, r3
 8020080:	7819      	ldrb	r1, [r3, #0]
 8020082:	230f      	movs	r3, #15
 8020084:	18fb      	adds	r3, r7, r3
 8020086:	781b      	ldrb	r3, [r3, #0]
 8020088:	0018      	movs	r0, r3
 802008a:	f7fa ff97 	bl	801afbc <USBPD_DPM_RequestGetManufacturerInfo>
 802008e:	0003      	movs	r3, r0
 8020090:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020092:	e028      	b.n	80200e6 <Request_MessageReq+0x5f2>
    }
    case GUI_MSG_SECU_REQUEST :
      status = USBPD_DPM_RequestSecurityRequest(PortNum);
 8020094:	233f      	movs	r3, #63	; 0x3f
 8020096:	18fc      	adds	r4, r7, r3
 8020098:	230f      	movs	r3, #15
 802009a:	18fb      	adds	r3, r7, r3
 802009c:	781b      	ldrb	r3, [r3, #0]
 802009e:	0018      	movs	r0, r3
 80200a0:	f7fb f9d8 	bl	801b454 <USBPD_DPM_RequestSecurityRequest>
 80200a4:	0003      	movs	r3, r0
 80200a6:	7023      	strb	r3, [r4, #0]
      break;
 80200a8:	e01e      	b.n	80200e8 <Request_MessageReq+0x5f4>
    case GUI_MSG_FIRM_UPDATE_REQUEST :
      break;
#endif /* USBPD_REV30_SUPPORT */
    default :
      break;
 80200aa:	46c0      	nop			; (mov r8, r8)
 80200ac:	e01c      	b.n	80200e8 <Request_MessageReq+0x5f4>
        break;
 80200ae:	46c0      	nop			; (mov r8, r8)
 80200b0:	e01a      	b.n	80200e8 <Request_MessageReq+0x5f4>
      break;
 80200b2:	46c0      	nop			; (mov r8, r8)
 80200b4:	e018      	b.n	80200e8 <Request_MessageReq+0x5f4>
      break;
 80200b6:	46c0      	nop			; (mov r8, r8)
 80200b8:	e016      	b.n	80200e8 <Request_MessageReq+0x5f4>
        break;
 80200ba:	46c0      	nop			; (mov r8, r8)
 80200bc:	e014      	b.n	80200e8 <Request_MessageReq+0x5f4>
      break;
 80200be:	46c0      	nop			; (mov r8, r8)
 80200c0:	e012      	b.n	80200e8 <Request_MessageReq+0x5f4>
        break;
 80200c2:	46c0      	nop			; (mov r8, r8)
 80200c4:	e010      	b.n	80200e8 <Request_MessageReq+0x5f4>
      break;
 80200c6:	46c0      	nop			; (mov r8, r8)
 80200c8:	e00e      	b.n	80200e8 <Request_MessageReq+0x5f4>
        break;
 80200ca:	46c0      	nop			; (mov r8, r8)
 80200cc:	e00c      	b.n	80200e8 <Request_MessageReq+0x5f4>
      break;
 80200ce:	46c0      	nop			; (mov r8, r8)
 80200d0:	e00a      	b.n	80200e8 <Request_MessageReq+0x5f4>
        break;
 80200d2:	46c0      	nop			; (mov r8, r8)
 80200d4:	e008      	b.n	80200e8 <Request_MessageReq+0x5f4>
      break;
 80200d6:	46c0      	nop			; (mov r8, r8)
 80200d8:	e006      	b.n	80200e8 <Request_MessageReq+0x5f4>
        break;
 80200da:	46c0      	nop			; (mov r8, r8)
 80200dc:	e004      	b.n	80200e8 <Request_MessageReq+0x5f4>
      break;
 80200de:	46c0      	nop			; (mov r8, r8)
 80200e0:	e002      	b.n	80200e8 <Request_MessageReq+0x5f4>
        break;
 80200e2:	46c0      	nop			; (mov r8, r8)
 80200e4:	e000      	b.n	80200e8 <Request_MessageReq+0x5f4>
      break;
 80200e6:	46c0      	nop			; (mov r8, r8)
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 80200e8:	223f      	movs	r2, #63	; 0x3f
 80200ea:	18bb      	adds	r3, r7, r2
 80200ec:	781b      	ldrb	r3, [r3, #0]
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d031      	beq.n	8020156 <Request_MessageReq+0x662>
  {
    switch (status)
 80200f2:	18bb      	adds	r3, r7, r2
 80200f4:	781b      	ldrb	r3, [r3, #0]
 80200f6:	2b03      	cmp	r3, #3
 80200f8:	d002      	beq.n	8020100 <Request_MessageReq+0x60c>
 80200fa:	2b04      	cmp	r3, #4
 80200fc:	d005      	beq.n	802010a <Request_MessageReq+0x616>
 80200fe:	e009      	b.n	8020114 <Request_MessageReq+0x620>
    {
      case USBPD_BUSY:
        error = GUI_REJ_DPM_NOT_READY;
 8020100:	231f      	movs	r3, #31
 8020102:	18fb      	adds	r3, r7, r3
 8020104:	2206      	movs	r2, #6
 8020106:	701a      	strb	r2, [r3, #0]
        break;
 8020108:	e009      	b.n	802011e <Request_MessageReq+0x62a>
      case USBPD_TIMEOUT:
        error = GUI_REJ_DPM_TIMEOUT;
 802010a:	231f      	movs	r3, #31
 802010c:	18fb      	adds	r3, r7, r3
 802010e:	2202      	movs	r2, #2
 8020110:	701a      	strb	r2, [r3, #0]
        break;
 8020112:	e004      	b.n	802011e <Request_MessageReq+0x62a>
      case USBPD_NOTSUPPORTED:
      case USBPD_ERROR:
      default:
        error = GUI_REJ_DPM_REJECT;
 8020114:	231f      	movs	r3, #31
 8020116:	18fb      	adds	r3, r7, r3
 8020118:	2200      	movs	r2, #0
 802011a:	701a      	strb	r2, [r3, #0]
        break;
 802011c:	46c0      	nop			; (mov r8, r8)
    }
    TLV_deinit_encode(&send_tlv);
 802011e:	2420      	movs	r4, #32
 8020120:	193b      	adds	r3, r7, r4
 8020122:	0018      	movs	r0, r3
 8020124:	f7fe f856 	bl	801e1d4 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX,
 8020128:	230f      	movs	r3, #15
 802012a:	18fb      	adds	r3, r7, r3
 802012c:	781b      	ldrb	r3, [r3, #0]
 802012e:	3301      	adds	r3, #1
 8020130:	015b      	lsls	r3, r3, #5
 8020132:	b25b      	sxtb	r3, r3
 8020134:	220b      	movs	r2, #11
 8020136:	4313      	orrs	r3, r2
 8020138:	b25b      	sxtb	r3, r3
 802013a:	b2d9      	uxtb	r1, r3
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	2280      	movs	r2, #128	; 0x80
 8020140:	0052      	lsls	r2, r2, #1
 8020142:	1938      	adds	r0, r7, r4
 8020144:	f7fd fe81 	bl	801de4a <TLV_init_encode>
                          pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
    (void)TLV_addValue(&send_tlv, (uint8_t *)&error, 1);
 8020148:	231f      	movs	r3, #31
 802014a:	18f9      	adds	r1, r7, r3
 802014c:	193b      	adds	r3, r7, r4
 802014e:	2201      	movs	r2, #1
 8020150:	0018      	movs	r0, r3
 8020152:	f7fd ffab 	bl	801e0ac <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 8020156:	2320      	movs	r3, #32
 8020158:	18fb      	adds	r3, r7, r3
 802015a:	0018      	movs	r0, r3
 802015c:	f7fe f83a 	bl	801e1d4 <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 8020160:	232c      	movs	r3, #44	; 0x2c
 8020162:	18fb      	adds	r3, r7, r3
 8020164:	0018      	movs	r0, r3
 8020166:	f7fe f8cd 	bl	801e304 <TLV_deinit_decode>
}
 802016a:	46c0      	nop			; (mov r8, r8)
 802016c:	46bd      	mov	sp, r7
 802016e:	b010      	add	sp, #64	; 0x40
 8020170:	bdb0      	pop	{r4, r5, r7, pc}
 8020172:	46c0      	nop			; (mov r8, r8)

08020174 <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8020174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020176:	b0d5      	sub	sp, #340	; 0x154
 8020178:	af00      	add	r7, sp, #0
 802017a:	60b9      	str	r1, [r7, #8]
 802017c:	607a      	str	r2, [r7, #4]
 802017e:	4bcd      	ldr	r3, [pc, #820]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 8020180:	24a8      	movs	r4, #168	; 0xa8
 8020182:	0064      	lsls	r4, r4, #1
 8020184:	191b      	adds	r3, r3, r4
 8020186:	19db      	adds	r3, r3, r7
 8020188:	1c02      	adds	r2, r0, #0
 802018a:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 802018c:	23a7      	movs	r3, #167	; 0xa7
 802018e:	005b      	lsls	r3, r3, #1
 8020190:	18fb      	adds	r3, r7, r3
 8020192:	2200      	movs	r2, #0
 8020194:	801a      	strh	r2, [r3, #0]
  uint8_t error = 0xFF;
 8020196:	231a      	movs	r3, #26
 8020198:	33ff      	adds	r3, #255	; 0xff
 802019a:	18fb      	adds	r3, r7, r3
 802019c:	22ff      	movs	r2, #255	; 0xff
 802019e:	701a      	strb	r2, [r3, #0]
  uint8_t param_not_applicated[GUI_PARAM_ALL]; /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0U;  /* Counter of not applicated parameters */
 80201a0:	234e      	movs	r3, #78	; 0x4e
 80201a2:	33ff      	adds	r3, #255	; 0xff
 80201a4:	18fb      	adds	r3, r7, r3
 80201a6:	2200      	movs	r2, #0
 80201a8:	701a      	strb	r2, [r3, #0]
  uint8_t tag;
  uint8_t flag_drp = 0;
 80201aa:	23a6      	movs	r3, #166	; 0xa6
 80201ac:	005b      	lsls	r3, r3, #1
 80201ae:	18fb      	adds	r3, r7, r3
 80201b0:	2200      	movs	r2, #0
 80201b2:	701a      	strb	r2, [r3, #0]
  uint8_t tdrp = 0;
 80201b4:	234c      	movs	r3, #76	; 0x4c
 80201b6:	33ff      	adds	r3, #255	; 0xff
 80201b8:	18fb      	adds	r3, r7, r3
 80201ba:	2200      	movs	r2, #0
 80201bc:	701a      	strb	r2, [r3, #0]

  (void)TLV_init_decode(&process_tlv, instruction);
 80201be:	68ba      	ldr	r2, [r7, #8]
 80201c0:	2390      	movs	r3, #144	; 0x90
 80201c2:	005b      	lsls	r3, r3, #1
 80201c4:	18fb      	adds	r3, r7, r3
 80201c6:	0011      	movs	r1, r2
 80201c8:	0018      	movs	r0, r3
 80201ca:	f7fe f815 	bl	801e1f8 <TLV_init_decode>
  /* pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 80201ce:	4bb9      	ldr	r3, [pc, #740]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 80201d0:	191b      	adds	r3, r3, r4
 80201d2:	19db      	adds	r3, r3, r7
 80201d4:	781b      	ldrb	r3, [r3, #0]
 80201d6:	3301      	adds	r3, #1
 80201d8:	015b      	lsls	r3, r3, #5
 80201da:	b25b      	sxtb	r3, r3
 80201dc:	2207      	movs	r2, #7
 80201de:	4313      	orrs	r3, r2
 80201e0:	b25b      	sxtb	r3, r3
 80201e2:	b2d9      	uxtb	r1, r3
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	2280      	movs	r2, #128	; 0x80
 80201e8:	0052      	lsls	r2, r2, #1
 80201ea:	2094      	movs	r0, #148	; 0x94
 80201ec:	0040      	lsls	r0, r0, #1
 80201ee:	1838      	adds	r0, r7, r0
 80201f0:	f7fd fe2b 	bl	801de4a <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 80201f4:	e2e5      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch ((USBPD_GUI_Tag_Param)tag)
 80201f6:	4bb0      	ldr	r3, [pc, #704]	; (80204b8 <Send_DpmConfigSetCnf+0x344>)
 80201f8:	22a8      	movs	r2, #168	; 0xa8
 80201fa:	0052      	lsls	r2, r2, #1
 80201fc:	189b      	adds	r3, r3, r2
 80201fe:	19db      	adds	r3, r3, r7
 8020200:	781b      	ldrb	r3, [r3, #0]
 8020202:	2b1c      	cmp	r3, #28
 8020204:	d900      	bls.n	8020208 <Send_DpmConfigSetCnf+0x94>
 8020206:	e2c3      	b.n	8020790 <Send_DpmConfigSetCnf+0x61c>
 8020208:	009a      	lsls	r2, r3, #2
 802020a:	4bac      	ldr	r3, [pc, #688]	; (80204bc <Send_DpmConfigSetCnf+0x348>)
 802020c:	18d3      	adds	r3, r2, r3
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	469f      	mov	pc, r3
    {
      case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        DPM_Settings[PortNum].PE_SupportedSOP = value[0];
 8020212:	238e      	movs	r3, #142	; 0x8e
 8020214:	005b      	lsls	r3, r3, #1
 8020216:	18fb      	adds	r3, r7, r3
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	7819      	ldrb	r1, [r3, #0]
 802021c:	4ba5      	ldr	r3, [pc, #660]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 802021e:	22a8      	movs	r2, #168	; 0xa8
 8020220:	0052      	lsls	r2, r2, #1
 8020222:	189b      	adds	r3, r3, r2
 8020224:	19db      	adds	r3, r3, r7
 8020226:	781a      	ldrb	r2, [r3, #0]
 8020228:	0008      	movs	r0, r1
 802022a:	49a5      	ldr	r1, [pc, #660]	; (80204c0 <Send_DpmConfigSetCnf+0x34c>)
 802022c:	0013      	movs	r3, r2
 802022e:	005b      	lsls	r3, r3, #1
 8020230:	189b      	adds	r3, r3, r2
 8020232:	009b      	lsls	r3, r3, #2
 8020234:	5058      	str	r0, [r3, r1]
#endif /* !USBPDCORE_LIB_NO_PD */
        break;
 8020236:	e2c4      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
        /*FastRoleSwap*/
        DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 8020238:	238e      	movs	r3, #142	; 0x8e
 802023a:	005b      	lsls	r3, r3, #1
 802023c:	18fb      	adds	r3, r7, r3
 802023e:	681b      	ldr	r3, [r3, #0]
 8020240:	7819      	ldrb	r1, [r3, #0]
 8020242:	4b9c      	ldr	r3, [pc, #624]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 8020244:	22a8      	movs	r2, #168	; 0xa8
 8020246:	0052      	lsls	r2, r2, #1
 8020248:	189b      	adds	r3, r3, r2
 802024a:	19db      	adds	r3, r3, r7
 802024c:	781a      	ldrb	r2, [r3, #0]
 802024e:	2301      	movs	r3, #1
 8020250:	400b      	ands	r3, r1
 8020252:	b2d9      	uxtb	r1, r3
 8020254:	489a      	ldr	r0, [pc, #616]	; (80204c0 <Send_DpmConfigSetCnf+0x34c>)
 8020256:	2408      	movs	r4, #8
 8020258:	0013      	movs	r3, r2
 802025a:	005b      	lsls	r3, r3, #1
 802025c:	189b      	adds	r3, r3, r2
 802025e:	009b      	lsls	r3, r3, #2
 8020260:	18c3      	adds	r3, r0, r3
 8020262:	191b      	adds	r3, r3, r4
 8020264:	2201      	movs	r2, #1
 8020266:	400a      	ands	r2, r1
 8020268:	1890      	adds	r0, r2, r2
 802026a:	781a      	ldrb	r2, [r3, #0]
 802026c:	2102      	movs	r1, #2
 802026e:	438a      	bics	r2, r1
 8020270:	1c11      	adds	r1, r2, #0
 8020272:	1c02      	adds	r2, r0, #0
 8020274:	430a      	orrs	r2, r1
 8020276:	701a      	strb	r2, [r3, #0]
        break;
 8020278:	e2a3      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
#endif /*USBPD_REV30_SUPPORT*/
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
        /*DataRoleSwap to UFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 802027a:	238e      	movs	r3, #142	; 0x8e
 802027c:	005b      	lsls	r3, r3, #1
 802027e:	18fb      	adds	r3, r7, r3
 8020280:	681b      	ldr	r3, [r3, #0]
 8020282:	7819      	ldrb	r1, [r3, #0]
 8020284:	4b8b      	ldr	r3, [pc, #556]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 8020286:	22a8      	movs	r2, #168	; 0xa8
 8020288:	0052      	lsls	r2, r2, #1
 802028a:	189b      	adds	r3, r3, r2
 802028c:	19db      	adds	r3, r3, r7
 802028e:	781a      	ldrb	r2, [r3, #0]
 8020290:	2301      	movs	r3, #1
 8020292:	400b      	ands	r3, r1
 8020294:	b2d9      	uxtb	r1, r3
 8020296:	4b8b      	ldr	r3, [pc, #556]	; (80204c4 <Send_DpmConfigSetCnf+0x350>)
 8020298:	2074      	movs	r0, #116	; 0x74
 802029a:	4342      	muls	r2, r0
 802029c:	2001      	movs	r0, #1
 802029e:	4001      	ands	r1, r0
 80202a0:	00cc      	lsls	r4, r1, #3
 80202a2:	5cd1      	ldrb	r1, [r2, r3]
 80202a4:	2008      	movs	r0, #8
 80202a6:	4381      	bics	r1, r0
 80202a8:	1c08      	adds	r0, r1, #0
 80202aa:	1c21      	adds	r1, r4, #0
 80202ac:	4301      	orrs	r1, r0
 80202ae:	54d1      	strb	r1, [r2, r3]
        break;
 80202b0:	e287      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
        /*DataRoleSwap to DFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 80202b2:	238e      	movs	r3, #142	; 0x8e
 80202b4:	005b      	lsls	r3, r3, #1
 80202b6:	18fb      	adds	r3, r7, r3
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	7819      	ldrb	r1, [r3, #0]
 80202bc:	4b7d      	ldr	r3, [pc, #500]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 80202be:	22a8      	movs	r2, #168	; 0xa8
 80202c0:	0052      	lsls	r2, r2, #1
 80202c2:	189b      	adds	r3, r3, r2
 80202c4:	19db      	adds	r3, r3, r7
 80202c6:	781a      	ldrb	r2, [r3, #0]
 80202c8:	2301      	movs	r3, #1
 80202ca:	400b      	ands	r3, r1
 80202cc:	b2d9      	uxtb	r1, r3
 80202ce:	4b7d      	ldr	r3, [pc, #500]	; (80204c4 <Send_DpmConfigSetCnf+0x350>)
 80202d0:	2074      	movs	r0, #116	; 0x74
 80202d2:	4342      	muls	r2, r0
 80202d4:	2001      	movs	r0, #1
 80202d6:	4001      	ands	r1, r0
 80202d8:	008c      	lsls	r4, r1, #2
 80202da:	5cd1      	ldrb	r1, [r2, r3]
 80202dc:	2004      	movs	r0, #4
 80202de:	4381      	bics	r1, r0
 80202e0:	1c08      	adds	r0, r1, #0
 80202e2:	1c21      	adds	r1, r4, #0
 80202e4:	4301      	orrs	r1, r0
 80202e6:	54d1      	strb	r1, [r2, r3]
        break;
 80202e8:	e26b      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DEFAULTPOWERROLE :
        /*DefaultPowerRole*/
        DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 80202ea:	238e      	movs	r3, #142	; 0x8e
 80202ec:	005b      	lsls	r3, r3, #1
 80202ee:	18fb      	adds	r3, r7, r3
 80202f0:	681b      	ldr	r3, [r3, #0]
 80202f2:	7819      	ldrb	r1, [r3, #0]
 80202f4:	4b6f      	ldr	r3, [pc, #444]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 80202f6:	22a8      	movs	r2, #168	; 0xa8
 80202f8:	0052      	lsls	r2, r2, #1
 80202fa:	189b      	adds	r3, r3, r2
 80202fc:	19db      	adds	r3, r3, r7
 80202fe:	781a      	ldrb	r2, [r3, #0]
 8020300:	2301      	movs	r3, #1
 8020302:	400b      	ands	r3, r1
 8020304:	b2d9      	uxtb	r1, r3
 8020306:	486e      	ldr	r0, [pc, #440]	; (80204c0 <Send_DpmConfigSetCnf+0x34c>)
 8020308:	0013      	movs	r3, r2
 802030a:	005b      	lsls	r3, r3, #1
 802030c:	189b      	adds	r3, r3, r2
 802030e:	009b      	lsls	r3, r3, #2
 8020310:	18c3      	adds	r3, r0, r3
 8020312:	2201      	movs	r2, #1
 8020314:	400a      	ands	r2, r1
 8020316:	0090      	lsls	r0, r2, #2
 8020318:	791a      	ldrb	r2, [r3, #4]
 802031a:	2104      	movs	r1, #4
 802031c:	438a      	bics	r2, r1
 802031e:	1c11      	adds	r1, r2, #0
 8020320:	1c02      	adds	r2, r0, #0
 8020322:	430a      	orrs	r2, r1
 8020324:	711a      	strb	r2, [r3, #4]
        break;
 8020326:	e24c      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
        /*DRP_Support*/
        DPM_Settings[PortNum].PE_RoleSwap = value[0];
 8020328:	238e      	movs	r3, #142	; 0x8e
 802032a:	005b      	lsls	r3, r3, #1
 802032c:	18fb      	adds	r3, r7, r3
 802032e:	681b      	ldr	r3, [r3, #0]
 8020330:	7819      	ldrb	r1, [r3, #0]
 8020332:	4b60      	ldr	r3, [pc, #384]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 8020334:	22a8      	movs	r2, #168	; 0xa8
 8020336:	0052      	lsls	r2, r2, #1
 8020338:	189b      	adds	r3, r3, r2
 802033a:	19db      	adds	r3, r3, r7
 802033c:	781a      	ldrb	r2, [r3, #0]
 802033e:	2301      	movs	r3, #1
 8020340:	400b      	ands	r3, r1
 8020342:	b2d9      	uxtb	r1, r3
 8020344:	485e      	ldr	r0, [pc, #376]	; (80204c0 <Send_DpmConfigSetCnf+0x34c>)
 8020346:	0013      	movs	r3, r2
 8020348:	005b      	lsls	r3, r3, #1
 802034a:	189b      	adds	r3, r3, r2
 802034c:	009b      	lsls	r3, r3, #2
 802034e:	18c3      	adds	r3, r0, r3
 8020350:	2201      	movs	r2, #1
 8020352:	400a      	ands	r2, r1
 8020354:	00d0      	lsls	r0, r2, #3
 8020356:	791a      	ldrb	r2, [r3, #4]
 8020358:	2108      	movs	r1, #8
 802035a:	438a      	bics	r2, r1
 802035c:	1c11      	adds	r1, r2, #0
 802035e:	1c02      	adds	r2, r0, #0
 8020360:	430a      	orrs	r2, r1
 8020362:	711a      	strb	r2, [r3, #4]
        break;
 8020364:	e22d      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_CADROLETOGGLE :
        /*CADRoleToggle*/
        DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 8020366:	238e      	movs	r3, #142	; 0x8e
 8020368:	005b      	lsls	r3, r3, #1
 802036a:	18fb      	adds	r3, r7, r3
 802036c:	681b      	ldr	r3, [r3, #0]
 802036e:	7819      	ldrb	r1, [r3, #0]
 8020370:	4b50      	ldr	r3, [pc, #320]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 8020372:	22a8      	movs	r2, #168	; 0xa8
 8020374:	0052      	lsls	r2, r2, #1
 8020376:	189b      	adds	r3, r3, r2
 8020378:	19db      	adds	r3, r3, r7
 802037a:	781a      	ldrb	r2, [r3, #0]
 802037c:	2301      	movs	r3, #1
 802037e:	400b      	ands	r3, r1
 8020380:	b2d9      	uxtb	r1, r3
 8020382:	484f      	ldr	r0, [pc, #316]	; (80204c0 <Send_DpmConfigSetCnf+0x34c>)
 8020384:	0013      	movs	r3, r2
 8020386:	005b      	lsls	r3, r3, #1
 8020388:	189b      	adds	r3, r3, r2
 802038a:	009b      	lsls	r3, r3, #2
 802038c:	18c3      	adds	r3, r0, r3
 802038e:	2201      	movs	r2, #1
 8020390:	400a      	ands	r2, r1
 8020392:	0150      	lsls	r0, r2, #5
 8020394:	795a      	ldrb	r2, [r3, #5]
 8020396:	2120      	movs	r1, #32
 8020398:	438a      	bics	r2, r1
 802039a:	1c11      	adds	r1, r2, #0
 802039c:	1c02      	adds	r2, r0, #0
 802039e:	430a      	orrs	r2, r1
 80203a0:	715a      	strb	r2, [r3, #5]
        break;
 80203a2:	e20e      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PE_SCAP_HR :
        /*PE_SCAP_HR*/
        DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 80203a4:	238e      	movs	r3, #142	; 0x8e
 80203a6:	005b      	lsls	r3, r3, #1
 80203a8:	18fb      	adds	r3, r7, r3
 80203aa:	681b      	ldr	r3, [r3, #0]
 80203ac:	7819      	ldrb	r1, [r3, #0]
 80203ae:	4b41      	ldr	r3, [pc, #260]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 80203b0:	22a8      	movs	r2, #168	; 0xa8
 80203b2:	0052      	lsls	r2, r2, #1
 80203b4:	189b      	adds	r3, r3, r2
 80203b6:	19db      	adds	r3, r3, r7
 80203b8:	781a      	ldrb	r2, [r3, #0]
 80203ba:	2301      	movs	r3, #1
 80203bc:	400b      	ands	r3, r1
 80203be:	b2d9      	uxtb	r1, r3
 80203c0:	483f      	ldr	r0, [pc, #252]	; (80204c0 <Send_DpmConfigSetCnf+0x34c>)
 80203c2:	0013      	movs	r3, r2
 80203c4:	005b      	lsls	r3, r3, #1
 80203c6:	189b      	adds	r3, r3, r2
 80203c8:	009b      	lsls	r3, r3, #2
 80203ca:	18c3      	adds	r3, r0, r3
 80203cc:	01c8      	lsls	r0, r1, #7
 80203ce:	791a      	ldrb	r2, [r3, #4]
 80203d0:	217f      	movs	r1, #127	; 0x7f
 80203d2:	400a      	ands	r2, r1
 80203d4:	1c11      	adds	r1, r2, #0
 80203d6:	1c02      	adds	r2, r0, #0
 80203d8:	430a      	orrs	r2, r1
 80203da:	711a      	strb	r2, [r3, #4]
        break;
 80203dc:	e1f1      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_VCONNSWAP :
        /*VConnSwap*/
        DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 80203de:	238e      	movs	r3, #142	; 0x8e
 80203e0:	005b      	lsls	r3, r3, #1
 80203e2:	18fb      	adds	r3, r7, r3
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	7819      	ldrb	r1, [r3, #0]
 80203e8:	4b32      	ldr	r3, [pc, #200]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 80203ea:	22a8      	movs	r2, #168	; 0xa8
 80203ec:	0052      	lsls	r2, r2, #1
 80203ee:	189b      	adds	r3, r3, r2
 80203f0:	19db      	adds	r3, r3, r7
 80203f2:	781a      	ldrb	r2, [r3, #0]
 80203f4:	2301      	movs	r3, #1
 80203f6:	400b      	ands	r3, r1
 80203f8:	b2d9      	uxtb	r1, r3
 80203fa:	4b32      	ldr	r3, [pc, #200]	; (80204c4 <Send_DpmConfigSetCnf+0x350>)
 80203fc:	2074      	movs	r0, #116	; 0x74
 80203fe:	4342      	muls	r2, r0
 8020400:	2001      	movs	r0, #1
 8020402:	4001      	ands	r1, r0
 8020404:	184c      	adds	r4, r1, r1
 8020406:	5cd1      	ldrb	r1, [r2, r3]
 8020408:	2002      	movs	r0, #2
 802040a:	4381      	bics	r1, r0
 802040c:	1c08      	adds	r0, r1, #0
 802040e:	1c21      	adds	r1, r4, #0
 8020410:	4301      	orrs	r1, r0
 8020412:	54d1      	strb	r1, [r2, r3]
        break;
 8020414:	e1d5      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
        DPM_Settings[PortNum].PE_VDMSupport = value[0];
        break;
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
        /* Ping Support */
        DPM_Settings[PortNum].PE_PingSupport = value[0];
 8020416:	238e      	movs	r3, #142	; 0x8e
 8020418:	005b      	lsls	r3, r3, #1
 802041a:	18fb      	adds	r3, r7, r3
 802041c:	681b      	ldr	r3, [r3, #0]
 802041e:	7819      	ldrb	r1, [r3, #0]
 8020420:	4b24      	ldr	r3, [pc, #144]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 8020422:	22a8      	movs	r2, #168	; 0xa8
 8020424:	0052      	lsls	r2, r2, #1
 8020426:	189b      	adds	r3, r3, r2
 8020428:	19db      	adds	r3, r3, r7
 802042a:	781a      	ldrb	r2, [r3, #0]
 802042c:	2301      	movs	r3, #1
 802042e:	400b      	ands	r3, r1
 8020430:	b2d9      	uxtb	r1, r3
 8020432:	4823      	ldr	r0, [pc, #140]	; (80204c0 <Send_DpmConfigSetCnf+0x34c>)
 8020434:	0013      	movs	r3, r2
 8020436:	005b      	lsls	r3, r3, #1
 8020438:	189b      	adds	r3, r3, r2
 802043a:	009b      	lsls	r3, r3, #2
 802043c:	18c3      	adds	r3, r0, r3
 802043e:	2201      	movs	r2, #1
 8020440:	400a      	ands	r2, r1
 8020442:	0190      	lsls	r0, r2, #6
 8020444:	791a      	ldrb	r2, [r3, #4]
 8020446:	2140      	movs	r1, #64	; 0x40
 8020448:	438a      	bics	r2, r1
 802044a:	1c11      	adds	r1, r2, #0
 802044c:	1c02      	adds	r2, r0, #0
 802044e:	430a      	orrs	r2, r1
 8020450:	711a      	strb	r2, [r3, #4]
        break;
 8020452:	e1b6      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
        DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = USBPD_LE16(&value[0]);
 8020454:	228e      	movs	r2, #142	; 0x8e
 8020456:	0052      	lsls	r2, r2, #1
 8020458:	18bb      	adds	r3, r7, r2
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	781b      	ldrb	r3, [r3, #0]
 802045e:	b299      	uxth	r1, r3
 8020460:	18bb      	adds	r3, r7, r2
 8020462:	681b      	ldr	r3, [r3, #0]
 8020464:	3301      	adds	r3, #1
 8020466:	781b      	ldrb	r3, [r3, #0]
 8020468:	b29b      	uxth	r3, r3
 802046a:	021b      	lsls	r3, r3, #8
 802046c:	b29b      	uxth	r3, r3
 802046e:	4a11      	ldr	r2, [pc, #68]	; (80204b4 <Send_DpmConfigSetCnf+0x340>)
 8020470:	20a8      	movs	r0, #168	; 0xa8
 8020472:	0040      	lsls	r0, r0, #1
 8020474:	1812      	adds	r2, r2, r0
 8020476:	19d2      	adds	r2, r2, r7
 8020478:	7812      	ldrb	r2, [r2, #0]
 802047a:	18cb      	adds	r3, r1, r3
 802047c:	b298      	uxth	r0, r3
 802047e:	4910      	ldr	r1, [pc, #64]	; (80204c0 <Send_DpmConfigSetCnf+0x34c>)
 8020480:	0013      	movs	r3, r2
 8020482:	005b      	lsls	r3, r3, #1
 8020484:	189b      	adds	r3, r3, r2
 8020486:	009b      	lsls	r3, r3, #2
 8020488:	18cb      	adds	r3, r1, r3
 802048a:	3308      	adds	r3, #8
 802048c:	1c02      	adds	r2, r0, #0
 802048e:	801a      	strh	r2, [r3, #0]
        break;
 8020490:	e197      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSNK, 0, sizeof(PORT0_PDO_ListSNK));
 8020492:	4b0d      	ldr	r3, [pc, #52]	; (80204c8 <Send_DpmConfigSetCnf+0x354>)
 8020494:	221c      	movs	r2, #28
 8020496:	2100      	movs	r1, #0
 8020498:	0018      	movs	r0, r3
 802049a:	f002 f901 	bl	80226a0 <memset>
          index_pdo = 0;
 802049e:	2300      	movs	r3, #0
 80204a0:	22a2      	movs	r2, #162	; 0xa2
 80204a2:	0052      	lsls	r2, r2, #1
 80204a4:	18ba      	adds	r2, r7, r2
 80204a6:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 80204a8:	2300      	movs	r3, #0
 80204aa:	22a0      	movs	r2, #160	; 0xa0
 80204ac:	0052      	lsls	r2, r2, #1
 80204ae:	18ba      	adds	r2, r7, r2
 80204b0:	6013      	str	r3, [r2, #0]
 80204b2:	e048      	b.n	8020546 <Send_DpmConfigSetCnf+0x3d2>
 80204b4:	fffffebf 	.word	0xfffffebf
 80204b8:	fffffec7 	.word	0xfffffec7
 80204bc:	08024510 	.word	0x08024510
 80204c0:	200000e4 	.word	0x200000e4
 80204c4:	200000f8 	.word	0x200000f8
 80204c8:	20000170 	.word	0x20000170
          {
            pdo = USBPD_LE32(&value[index_gui]);
 80204cc:	248e      	movs	r4, #142	; 0x8e
 80204ce:	0064      	lsls	r4, r4, #1
 80204d0:	193b      	adds	r3, r7, r4
 80204d2:	681a      	ldr	r2, [r3, #0]
 80204d4:	20a0      	movs	r0, #160	; 0xa0
 80204d6:	0040      	lsls	r0, r0, #1
 80204d8:	183b      	adds	r3, r7, r0
 80204da:	681b      	ldr	r3, [r3, #0]
 80204dc:	18d3      	adds	r3, r2, r3
 80204de:	781b      	ldrb	r3, [r3, #0]
 80204e0:	0019      	movs	r1, r3
 80204e2:	193b      	adds	r3, r7, r4
 80204e4:	681a      	ldr	r2, [r3, #0]
 80204e6:	183b      	adds	r3, r7, r0
 80204e8:	681b      	ldr	r3, [r3, #0]
 80204ea:	3301      	adds	r3, #1
 80204ec:	18d3      	adds	r3, r2, r3
 80204ee:	781b      	ldrb	r3, [r3, #0]
 80204f0:	021b      	lsls	r3, r3, #8
 80204f2:	18ca      	adds	r2, r1, r3
 80204f4:	193b      	adds	r3, r7, r4
 80204f6:	6819      	ldr	r1, [r3, #0]
 80204f8:	183b      	adds	r3, r7, r0
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	3302      	adds	r3, #2
 80204fe:	18cb      	adds	r3, r1, r3
 8020500:	781b      	ldrb	r3, [r3, #0]
 8020502:	041b      	lsls	r3, r3, #16
 8020504:	18d2      	adds	r2, r2, r3
 8020506:	193b      	adds	r3, r7, r4
 8020508:	6819      	ldr	r1, [r3, #0]
 802050a:	183b      	adds	r3, r7, r0
 802050c:	681b      	ldr	r3, [r3, #0]
 802050e:	3303      	adds	r3, #3
 8020510:	18cb      	adds	r3, r1, r3
 8020512:	781b      	ldrb	r3, [r3, #0]
 8020514:	061b      	lsls	r3, r3, #24
 8020516:	18d3      	adds	r3, r2, r3
 8020518:	219a      	movs	r1, #154	; 0x9a
 802051a:	0049      	lsls	r1, r1, #1
 802051c:	187a      	adds	r2, r7, r1
 802051e:	6013      	str	r3, [r2, #0]
            PORT0_PDO_ListSNK[index_pdo] = pdo;
 8020520:	4b94      	ldr	r3, [pc, #592]	; (8020774 <Send_DpmConfigSetCnf+0x600>)
 8020522:	24a2      	movs	r4, #162	; 0xa2
 8020524:	0064      	lsls	r4, r4, #1
 8020526:	193a      	adds	r2, r7, r4
 8020528:	6812      	ldr	r2, [r2, #0]
 802052a:	0092      	lsls	r2, r2, #2
 802052c:	1879      	adds	r1, r7, r1
 802052e:	6809      	ldr	r1, [r1, #0]
 8020530:	50d1      	str	r1, [r2, r3]
            index_pdo++;
 8020532:	193b      	adds	r3, r7, r4
 8020534:	681b      	ldr	r3, [r3, #0]
 8020536:	3301      	adds	r3, #1
 8020538:	193a      	adds	r2, r7, r4
 802053a:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 802053c:	183b      	adds	r3, r7, r0
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	3304      	adds	r3, #4
 8020542:	183a      	adds	r2, r7, r0
 8020544:	6013      	str	r3, [r2, #0]
 8020546:	218d      	movs	r1, #141	; 0x8d
 8020548:	0049      	lsls	r1, r1, #1
 802054a:	187b      	adds	r3, r7, r1
 802054c:	881b      	ldrh	r3, [r3, #0]
 802054e:	001a      	movs	r2, r3
 8020550:	23a0      	movs	r3, #160	; 0xa0
 8020552:	005b      	lsls	r3, r3, #1
 8020554:	18fb      	adds	r3, r7, r3
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	4293      	cmp	r3, r2
 802055a:	d3b7      	bcc.n	80204cc <Send_DpmConfigSetCnf+0x358>
          }
          USBPD_NbPDO[0] = (uint8_t)(size / 4U);
 802055c:	187b      	adds	r3, r7, r1
 802055e:	881b      	ldrh	r3, [r3, #0]
 8020560:	089b      	lsrs	r3, r3, #2
 8020562:	b29b      	uxth	r3, r3
 8020564:	b2da      	uxtb	r2, r3
 8020566:	4b84      	ldr	r3, [pc, #528]	; (8020778 <Send_DpmConfigSetCnf+0x604>)
 8020568:	701a      	strb	r2, [r3, #0]
          UpdateSNKPowerPort0();
 802056a:	f000 fe2f 	bl	80211cc <UpdateSNKPowerPort0>
          }
          USBPD_NbPDO[2] = (uint8_t)(size / 4U);
          UpdateSNKPowerPort1();
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 802056e:	e128      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
#endif /* USBPD_PORT_COUNT==2 */
        break;
      }
#endif /* (_SRC) || (_DRP) */
      case GUI_PARAM_TDRP :
        tdrp = value[0];
 8020570:	238e      	movs	r3, #142	; 0x8e
 8020572:	005b      	lsls	r3, r3, #1
 8020574:	18fb      	adds	r3, r7, r3
 8020576:	681a      	ldr	r2, [r3, #0]
 8020578:	214c      	movs	r1, #76	; 0x4c
 802057a:	31ff      	adds	r1, #255	; 0xff
 802057c:	187b      	adds	r3, r7, r1
 802057e:	7812      	ldrb	r2, [r2, #0]
 8020580:	701a      	strb	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 8020582:	4b7e      	ldr	r3, [pc, #504]	; (802077c <Send_DpmConfigSetCnf+0x608>)
 8020584:	22a8      	movs	r2, #168	; 0xa8
 8020586:	0052      	lsls	r2, r2, #1
 8020588:	189b      	adds	r3, r3, r2
 802058a:	19db      	adds	r3, r3, r7
 802058c:	781b      	ldrb	r3, [r3, #0]
 802058e:	187a      	adds	r2, r7, r1
 8020590:	7812      	ldrb	r2, [r2, #0]
 8020592:	217f      	movs	r1, #127	; 0x7f
 8020594:	400a      	ands	r2, r1
 8020596:	b2d4      	uxtb	r4, r2
 8020598:	4a79      	ldr	r2, [pc, #484]	; (8020780 <Send_DpmConfigSetCnf+0x60c>)
 802059a:	2168      	movs	r1, #104	; 0x68
 802059c:	2074      	movs	r0, #116	; 0x74
 802059e:	4343      	muls	r3, r0
 80205a0:	18d3      	adds	r3, r2, r3
 80205a2:	185b      	adds	r3, r3, r1
 80205a4:	1c22      	adds	r2, r4, #0
 80205a6:	1890      	adds	r0, r2, r2
 80205a8:	791a      	ldrb	r2, [r3, #4]
 80205aa:	2101      	movs	r1, #1
 80205ac:	400a      	ands	r2, r1
 80205ae:	1c11      	adds	r1, r2, #0
 80205b0:	1c02      	adds	r2, r0, #0
 80205b2:	430a      	orrs	r2, r1
 80205b4:	711a      	strb	r2, [r3, #4]
        flag_drp = 1;
 80205b6:	23a6      	movs	r3, #166	; 0xa6
 80205b8:	005b      	lsls	r3, r3, #1
 80205ba:	18fb      	adds	r3, r7, r3
 80205bc:	2201      	movs	r2, #1
 80205be:	701a      	strb	r2, [r3, #0]
        break;
 80205c0:	e0ff      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DCSRC_DRP :
        dcdrp = value[0];
 80205c2:	238e      	movs	r3, #142	; 0x8e
 80205c4:	005b      	lsls	r3, r3, #1
 80205c6:	18fb      	adds	r3, r7, r3
 80205c8:	681b      	ldr	r3, [r3, #0]
 80205ca:	781a      	ldrb	r2, [r3, #0]
 80205cc:	21a7      	movs	r1, #167	; 0xa7
 80205ce:	0049      	lsls	r1, r1, #1
 80205d0:	187b      	adds	r3, r7, r1
 80205d2:	801a      	strh	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 80205d4:	4b69      	ldr	r3, [pc, #420]	; (802077c <Send_DpmConfigSetCnf+0x608>)
 80205d6:	22a8      	movs	r2, #168	; 0xa8
 80205d8:	0052      	lsls	r2, r2, #1
 80205da:	189b      	adds	r3, r3, r2
 80205dc:	19db      	adds	r3, r3, r7
 80205de:	781b      	ldrb	r3, [r3, #0]
 80205e0:	187a      	adds	r2, r7, r1
 80205e2:	8812      	ldrh	r2, [r2, #0]
 80205e4:	1c11      	adds	r1, r2, #0
 80205e6:	227f      	movs	r2, #127	; 0x7f
 80205e8:	400a      	ands	r2, r1
 80205ea:	b2d2      	uxtb	r2, r2
 80205ec:	4964      	ldr	r1, [pc, #400]	; (8020780 <Send_DpmConfigSetCnf+0x60c>)
 80205ee:	2068      	movs	r0, #104	; 0x68
 80205f0:	2474      	movs	r4, #116	; 0x74
 80205f2:	4363      	muls	r3, r4
 80205f4:	18cb      	adds	r3, r1, r3
 80205f6:	181b      	adds	r3, r3, r0
 80205f8:	217f      	movs	r1, #127	; 0x7f
 80205fa:	400a      	ands	r2, r1
 80205fc:	0010      	movs	r0, r2
 80205fe:	795a      	ldrb	r2, [r3, #5]
 8020600:	217f      	movs	r1, #127	; 0x7f
 8020602:	438a      	bics	r2, r1
 8020604:	1c11      	adds	r1, r2, #0
 8020606:	1c02      	adds	r2, r0, #0
 8020608:	430a      	orrs	r2, r1
 802060a:	715a      	strb	r2, [r3, #5]
        flag_drp = 1;
 802060c:	23a6      	movs	r3, #166	; 0xa6
 802060e:	005b      	lsls	r3, r3, #1
 8020610:	18fb      	adds	r3, r7, r3
 8020612:	2201      	movs	r2, #1
 8020614:	701a      	strb	r2, [r3, #0]
        break;
 8020616:	e0d4      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
        DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 8020618:	238e      	movs	r3, #142	; 0x8e
 802061a:	005b      	lsls	r3, r3, #1
 802061c:	18fb      	adds	r3, r7, r3
 802061e:	681b      	ldr	r3, [r3, #0]
 8020620:	7819      	ldrb	r1, [r3, #0]
 8020622:	4b56      	ldr	r3, [pc, #344]	; (802077c <Send_DpmConfigSetCnf+0x608>)
 8020624:	22a8      	movs	r2, #168	; 0xa8
 8020626:	0052      	lsls	r2, r2, #1
 8020628:	189b      	adds	r3, r3, r2
 802062a:	19db      	adds	r3, r3, r7
 802062c:	781a      	ldrb	r2, [r3, #0]
 802062e:	2301      	movs	r3, #1
 8020630:	400b      	ands	r3, r1
 8020632:	b2d9      	uxtb	r1, r3
 8020634:	4853      	ldr	r0, [pc, #332]	; (8020784 <Send_DpmConfigSetCnf+0x610>)
 8020636:	0013      	movs	r3, r2
 8020638:	005b      	lsls	r3, r3, #1
 802063a:	189b      	adds	r3, r3, r2
 802063c:	009b      	lsls	r3, r3, #2
 802063e:	18c3      	adds	r3, r0, r3
 8020640:	2201      	movs	r2, #1
 8020642:	4011      	ands	r1, r2
 8020644:	0008      	movs	r0, r1
 8020646:	795a      	ldrb	r2, [r3, #5]
 8020648:	2101      	movs	r1, #1
 802064a:	438a      	bics	r2, r1
 802064c:	1c11      	adds	r1, r2, #0
 802064e:	1c02      	adds	r2, r0, #0
 8020650:	430a      	orrs	r2, r1
 8020652:	715a      	strb	r2, [r3, #5]
        break;
 8020654:	e0b5      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
        DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 8020656:	238e      	movs	r3, #142	; 0x8e
 8020658:	005b      	lsls	r3, r3, #1
 802065a:	18fb      	adds	r3, r7, r3
 802065c:	681b      	ldr	r3, [r3, #0]
 802065e:	7819      	ldrb	r1, [r3, #0]
 8020660:	4b46      	ldr	r3, [pc, #280]	; (802077c <Send_DpmConfigSetCnf+0x608>)
 8020662:	22a8      	movs	r2, #168	; 0xa8
 8020664:	0052      	lsls	r2, r2, #1
 8020666:	189b      	adds	r3, r3, r2
 8020668:	19db      	adds	r3, r3, r7
 802066a:	781a      	ldrb	r2, [r3, #0]
 802066c:	2301      	movs	r3, #1
 802066e:	400b      	ands	r3, r1
 8020670:	b2d9      	uxtb	r1, r3
 8020672:	4844      	ldr	r0, [pc, #272]	; (8020784 <Send_DpmConfigSetCnf+0x610>)
 8020674:	0013      	movs	r3, r2
 8020676:	005b      	lsls	r3, r3, #1
 8020678:	189b      	adds	r3, r3, r2
 802067a:	009b      	lsls	r3, r3, #2
 802067c:	18c3      	adds	r3, r0, r3
 802067e:	2201      	movs	r2, #1
 8020680:	400a      	ands	r2, r1
 8020682:	1890      	adds	r0, r2, r2
 8020684:	795a      	ldrb	r2, [r3, #5]
 8020686:	2102      	movs	r1, #2
 8020688:	438a      	bics	r2, r1
 802068a:	1c11      	adds	r1, r2, #0
 802068c:	1c02      	adds	r2, r0, #0
 802068e:	430a      	orrs	r2, r1
 8020690:	715a      	strb	r2, [r3, #5]
        break;
 8020692:	e096      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_XID_SOP :
        DPM_ID_Settings[PortNum].XID       = USBPD_LE32(&value[0]);
 8020694:	208e      	movs	r0, #142	; 0x8e
 8020696:	0040      	lsls	r0, r0, #1
 8020698:	183b      	adds	r3, r7, r0
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	781b      	ldrb	r3, [r3, #0]
 802069e:	001a      	movs	r2, r3
 80206a0:	183b      	adds	r3, r7, r0
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	3301      	adds	r3, #1
 80206a6:	781b      	ldrb	r3, [r3, #0]
 80206a8:	021b      	lsls	r3, r3, #8
 80206aa:	18d2      	adds	r2, r2, r3
 80206ac:	183b      	adds	r3, r7, r0
 80206ae:	681b      	ldr	r3, [r3, #0]
 80206b0:	3302      	adds	r3, #2
 80206b2:	781b      	ldrb	r3, [r3, #0]
 80206b4:	041b      	lsls	r3, r3, #16
 80206b6:	18d1      	adds	r1, r2, r3
 80206b8:	183b      	adds	r3, r7, r0
 80206ba:	681b      	ldr	r3, [r3, #0]
 80206bc:	3303      	adds	r3, #3
 80206be:	781b      	ldrb	r3, [r3, #0]
 80206c0:	061b      	lsls	r3, r3, #24
 80206c2:	4a2e      	ldr	r2, [pc, #184]	; (802077c <Send_DpmConfigSetCnf+0x608>)
 80206c4:	20a8      	movs	r0, #168	; 0xa8
 80206c6:	0040      	lsls	r0, r0, #1
 80206c8:	1812      	adds	r2, r2, r0
 80206ca:	19d2      	adds	r2, r2, r7
 80206cc:	7812      	ldrb	r2, [r2, #0]
 80206ce:	18c9      	adds	r1, r1, r3
 80206d0:	4b2d      	ldr	r3, [pc, #180]	; (8020788 <Send_DpmConfigSetCnf+0x614>)
 80206d2:	00d2      	lsls	r2, r2, #3
 80206d4:	50d1      	str	r1, [r2, r3]
        break;
 80206d6:	e074      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_USB_VID_SOP :
        DPM_ID_Settings[PortNum].VID       = USBPD_LE16(&value[0]);
 80206d8:	228e      	movs	r2, #142	; 0x8e
 80206da:	0052      	lsls	r2, r2, #1
 80206dc:	18bb      	adds	r3, r7, r2
 80206de:	681b      	ldr	r3, [r3, #0]
 80206e0:	781b      	ldrb	r3, [r3, #0]
 80206e2:	b299      	uxth	r1, r3
 80206e4:	18bb      	adds	r3, r7, r2
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	3301      	adds	r3, #1
 80206ea:	781b      	ldrb	r3, [r3, #0]
 80206ec:	b29b      	uxth	r3, r3
 80206ee:	021b      	lsls	r3, r3, #8
 80206f0:	b29a      	uxth	r2, r3
 80206f2:	4b22      	ldr	r3, [pc, #136]	; (802077c <Send_DpmConfigSetCnf+0x608>)
 80206f4:	20a8      	movs	r0, #168	; 0xa8
 80206f6:	0040      	lsls	r0, r0, #1
 80206f8:	181b      	adds	r3, r3, r0
 80206fa:	19db      	adds	r3, r3, r7
 80206fc:	781b      	ldrb	r3, [r3, #0]
 80206fe:	188a      	adds	r2, r1, r2
 8020700:	b291      	uxth	r1, r2
 8020702:	4a21      	ldr	r2, [pc, #132]	; (8020788 <Send_DpmConfigSetCnf+0x614>)
 8020704:	00db      	lsls	r3, r3, #3
 8020706:	18d3      	adds	r3, r2, r3
 8020708:	3304      	adds	r3, #4
 802070a:	1c0a      	adds	r2, r1, #0
 802070c:	801a      	strh	r2, [r3, #0]
        break;
 802070e:	e058      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PID_SOP :
        DPM_ID_Settings[PortNum].PID       = USBPD_LE16(&value[0]);
 8020710:	228e      	movs	r2, #142	; 0x8e
 8020712:	0052      	lsls	r2, r2, #1
 8020714:	18bb      	adds	r3, r7, r2
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	781b      	ldrb	r3, [r3, #0]
 802071a:	b299      	uxth	r1, r3
 802071c:	18bb      	adds	r3, r7, r2
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	3301      	adds	r3, #1
 8020722:	781b      	ldrb	r3, [r3, #0]
 8020724:	b29b      	uxth	r3, r3
 8020726:	021b      	lsls	r3, r3, #8
 8020728:	b29a      	uxth	r2, r3
 802072a:	4b14      	ldr	r3, [pc, #80]	; (802077c <Send_DpmConfigSetCnf+0x608>)
 802072c:	20a8      	movs	r0, #168	; 0xa8
 802072e:	0040      	lsls	r0, r0, #1
 8020730:	181b      	adds	r3, r3, r0
 8020732:	19db      	adds	r3, r3, r7
 8020734:	781b      	ldrb	r3, [r3, #0]
 8020736:	188a      	adds	r2, r1, r2
 8020738:	b291      	uxth	r1, r2
 802073a:	4a13      	ldr	r2, [pc, #76]	; (8020788 <Send_DpmConfigSetCnf+0x614>)
 802073c:	00db      	lsls	r3, r3, #3
 802073e:	18d3      	adds	r3, r2, r3
 8020740:	3306      	adds	r3, #6
 8020742:	1c0a      	adds	r2, r1, #0
 8020744:	801a      	strh	r2, [r3, #0]
        break;
 8020746:	e03c      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
        DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = USBPD_LE16(&value[0]);
        break;
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
        /* MeasurementReporting */
        GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 8020748:	238e      	movs	r3, #142	; 0x8e
 802074a:	005b      	lsls	r3, r3, #1
 802074c:	18fb      	adds	r3, r7, r3
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	4a0a      	ldr	r2, [pc, #40]	; (802077c <Send_DpmConfigSetCnf+0x608>)
 8020752:	21a8      	movs	r1, #168	; 0xa8
 8020754:	0049      	lsls	r1, r1, #1
 8020756:	1852      	adds	r2, r2, r1
 8020758:	19d2      	adds	r2, r2, r7
 802075a:	7812      	ldrb	r2, [r2, #0]
 802075c:	7818      	ldrb	r0, [r3, #0]
 802075e:	490b      	ldr	r1, [pc, #44]	; (802078c <Send_DpmConfigSetCnf+0x618>)
 8020760:	0013      	movs	r3, r2
 8020762:	005b      	lsls	r3, r3, #1
 8020764:	189b      	adds	r3, r3, r2
 8020766:	005b      	lsls	r3, r3, #1
 8020768:	18cb      	adds	r3, r1, r3
 802076a:	3304      	adds	r3, #4
 802076c:	1c02      	adds	r2, r0, #0
 802076e:	701a      	strb	r2, [r3, #0]
        break;
 8020770:	e027      	b.n	80207c2 <Send_DpmConfigSetCnf+0x64e>
 8020772:	46c0      	nop			; (mov r8, r8)
 8020774:	20000170 	.word	0x20000170
 8020778:	2000016c 	.word	0x2000016c
 802077c:	fffffebf 	.word	0xfffffebf
 8020780:	200000f8 	.word	0x200000f8
 8020784:	200000e4 	.word	0x200000e4
 8020788:	200000f0 	.word	0x200000f0
 802078c:	20004934 	.word	0x20004934
        (void)memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
        break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default :
        error = (uint8_t)GUI_REJ_DPM_REJECT;
 8020790:	231a      	movs	r3, #26
 8020792:	33ff      	adds	r3, #255	; 0xff
 8020794:	18fb      	adds	r3, r7, r3
 8020796:	2200      	movs	r2, #0
 8020798:	701a      	strb	r2, [r3, #0]
        param_not_applicated[counter_param_not_applicated] = tag;
 802079a:	204e      	movs	r0, #78	; 0x4e
 802079c:	30ff      	adds	r0, #255	; 0xff
 802079e:	183b      	adds	r3, r7, r0
 80207a0:	781b      	ldrb	r3, [r3, #0]
 80207a2:	4a90      	ldr	r2, [pc, #576]	; (80209e4 <Send_DpmConfigSetCnf+0x870>)
 80207a4:	24a8      	movs	r4, #168	; 0xa8
 80207a6:	0064      	lsls	r4, r4, #1
 80207a8:	1912      	adds	r2, r2, r4
 80207aa:	19d2      	adds	r2, r2, r7
 80207ac:	7811      	ldrb	r1, [r2, #0]
 80207ae:	4a8e      	ldr	r2, [pc, #568]	; (80209e8 <Send_DpmConfigSetCnf+0x874>)
 80207b0:	1912      	adds	r2, r2, r4
 80207b2:	19d2      	adds	r2, r2, r7
 80207b4:	54d1      	strb	r1, [r2, r3]
        counter_param_not_applicated++;
 80207b6:	183b      	adds	r3, r7, r0
 80207b8:	781a      	ldrb	r2, [r3, #0]
 80207ba:	183b      	adds	r3, r7, r0
 80207bc:	3201      	adds	r2, #1
 80207be:	701a      	strb	r2, [r3, #0]
        break;
 80207c0:	46c0      	nop			; (mov r8, r8)
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 80207c2:	238e      	movs	r3, #142	; 0x8e
 80207c4:	005b      	lsls	r3, r3, #1
 80207c6:	18fb      	adds	r3, r7, r3
 80207c8:	228d      	movs	r2, #141	; 0x8d
 80207ca:	0052      	lsls	r2, r2, #1
 80207cc:	18ba      	adds	r2, r7, r2
 80207ce:	2117      	movs	r1, #23
 80207d0:	1879      	adds	r1, r7, r1
 80207d2:	2090      	movs	r0, #144	; 0x90
 80207d4:	0040      	lsls	r0, r0, #1
 80207d6:	1838      	adds	r0, r7, r0
 80207d8:	f7fd fd3a 	bl	801e250 <TLV_get>
 80207dc:	0003      	movs	r3, r0
 80207de:	2bff      	cmp	r3, #255	; 0xff
 80207e0:	d000      	beq.n	80207e4 <Send_DpmConfigSetCnf+0x670>
 80207e2:	e508      	b.n	80201f6 <Send_DpmConfigSetCnf+0x82>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1U == flag_drp)
 80207e4:	23a6      	movs	r3, #166	; 0xa6
 80207e6:	005b      	lsls	r3, r3, #1
 80207e8:	18fb      	adds	r3, r7, r3
 80207ea:	781b      	ldrb	r3, [r3, #0]
 80207ec:	2b01      	cmp	r3, #1
 80207ee:	d000      	beq.n	80207f2 <Send_DpmConfigSetCnf+0x67e>
 80207f0:	e0a2      	b.n	8020938 <Send_DpmConfigSetCnf+0x7c4>
  {
    uint16_t calcul;
    if (0U == tdrp)
 80207f2:	244c      	movs	r4, #76	; 0x4c
 80207f4:	34ff      	adds	r4, #255	; 0xff
 80207f6:	193b      	adds	r3, r7, r4
 80207f8:	781b      	ldrb	r3, [r3, #0]
 80207fa:	2b00      	cmp	r3, #0
 80207fc:	d11c      	bne.n	8020838 <Send_DpmConfigSetCnf+0x6c4>
    {
      tdrp = (uint8_t)(DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 80207fe:	4b7b      	ldr	r3, [pc, #492]	; (80209ec <Send_DpmConfigSetCnf+0x878>)
 8020800:	20a8      	movs	r0, #168	; 0xa8
 8020802:	0040      	lsls	r0, r0, #1
 8020804:	181b      	adds	r3, r3, r0
 8020806:	19db      	adds	r3, r3, r7
 8020808:	781a      	ldrb	r2, [r3, #0]
 802080a:	4979      	ldr	r1, [pc, #484]	; (80209f0 <Send_DpmConfigSetCnf+0x87c>)
 802080c:	0013      	movs	r3, r2
 802080e:	005b      	lsls	r3, r3, #1
 8020810:	189b      	adds	r3, r3, r2
 8020812:	009b      	lsls	r3, r3, #2
 8020814:	18cb      	adds	r3, r1, r3
 8020816:	3306      	adds	r3, #6
 8020818:	7819      	ldrb	r1, [r3, #0]
 802081a:	4b74      	ldr	r3, [pc, #464]	; (80209ec <Send_DpmConfigSetCnf+0x878>)
 802081c:	181b      	adds	r3, r3, r0
 802081e:	19db      	adds	r3, r3, r7
 8020820:	781a      	ldrb	r2, [r3, #0]
 8020822:	4873      	ldr	r0, [pc, #460]	; (80209f0 <Send_DpmConfigSetCnf+0x87c>)
 8020824:	0013      	movs	r3, r2
 8020826:	005b      	lsls	r3, r3, #1
 8020828:	189b      	adds	r3, r3, r2
 802082a:	009b      	lsls	r3, r3, #2
 802082c:	18c3      	adds	r3, r0, r3
 802082e:	3307      	adds	r3, #7
 8020830:	781a      	ldrb	r2, [r3, #0]
 8020832:	193b      	adds	r3, r7, r4
 8020834:	188a      	adds	r2, r1, r2
 8020836:	701a      	strb	r2, [r3, #0]
    }
    if (0U == dcdrp)
 8020838:	26a7      	movs	r6, #167	; 0xa7
 802083a:	0076      	lsls	r6, r6, #1
 802083c:	19bb      	adds	r3, r7, r6
 802083e:	881b      	ldrh	r3, [r3, #0]
 8020840:	2b00      	cmp	r3, #0
 8020842:	d133      	bne.n	80208ac <Send_DpmConfigSetCnf+0x738>
    {
      dcdrp = (uint16_t)
              ((DPM_Settings[PortNum].CAD_SRCToggleTime * 100U)
 8020844:	4b69      	ldr	r3, [pc, #420]	; (80209ec <Send_DpmConfigSetCnf+0x878>)
 8020846:	24a8      	movs	r4, #168	; 0xa8
 8020848:	0064      	lsls	r4, r4, #1
 802084a:	191b      	adds	r3, r3, r4
 802084c:	19db      	adds	r3, r3, r7
 802084e:	781a      	ldrb	r2, [r3, #0]
 8020850:	4967      	ldr	r1, [pc, #412]	; (80209f0 <Send_DpmConfigSetCnf+0x87c>)
 8020852:	0013      	movs	r3, r2
 8020854:	005b      	lsls	r3, r3, #1
 8020856:	189b      	adds	r3, r3, r2
 8020858:	009b      	lsls	r3, r3, #2
 802085a:	18cb      	adds	r3, r1, r3
 802085c:	3307      	adds	r3, #7
 802085e:	781b      	ldrb	r3, [r3, #0]
 8020860:	001a      	movs	r2, r3
 8020862:	2364      	movs	r3, #100	; 0x64
 8020864:	4353      	muls	r3, r2
 8020866:	0018      	movs	r0, r3
               / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime));
 8020868:	4b60      	ldr	r3, [pc, #384]	; (80209ec <Send_DpmConfigSetCnf+0x878>)
 802086a:	0025      	movs	r5, r4
 802086c:	191b      	adds	r3, r3, r4
 802086e:	19db      	adds	r3, r3, r7
 8020870:	781a      	ldrb	r2, [r3, #0]
 8020872:	495f      	ldr	r1, [pc, #380]	; (80209f0 <Send_DpmConfigSetCnf+0x87c>)
 8020874:	0013      	movs	r3, r2
 8020876:	005b      	lsls	r3, r3, #1
 8020878:	189b      	adds	r3, r3, r2
 802087a:	009b      	lsls	r3, r3, #2
 802087c:	18cb      	adds	r3, r1, r3
 802087e:	3306      	adds	r3, #6
 8020880:	781b      	ldrb	r3, [r3, #0]
 8020882:	001c      	movs	r4, r3
 8020884:	4b59      	ldr	r3, [pc, #356]	; (80209ec <Send_DpmConfigSetCnf+0x878>)
 8020886:	195b      	adds	r3, r3, r5
 8020888:	19db      	adds	r3, r3, r7
 802088a:	781a      	ldrb	r2, [r3, #0]
 802088c:	4958      	ldr	r1, [pc, #352]	; (80209f0 <Send_DpmConfigSetCnf+0x87c>)
 802088e:	0013      	movs	r3, r2
 8020890:	005b      	lsls	r3, r3, #1
 8020892:	189b      	adds	r3, r3, r2
 8020894:	009b      	lsls	r3, r3, #2
 8020896:	18cb      	adds	r3, r1, r3
 8020898:	3307      	adds	r3, #7
 802089a:	781b      	ldrb	r3, [r3, #0]
 802089c:	18e3      	adds	r3, r4, r3
 802089e:	0019      	movs	r1, r3
 80208a0:	f7e5 fca6 	bl	80061f0 <__udivsi3>
 80208a4:	0003      	movs	r3, r0
 80208a6:	001a      	movs	r2, r3
      dcdrp = (uint16_t)
 80208a8:	19bb      	adds	r3, r7, r6
 80208aa:	801a      	strh	r2, [r3, #0]
    }
    calcul = (tdrp * dcdrp) / 100U;
 80208ac:	254c      	movs	r5, #76	; 0x4c
 80208ae:	35ff      	adds	r5, #255	; 0xff
 80208b0:	197b      	adds	r3, r7, r5
 80208b2:	781b      	ldrb	r3, [r3, #0]
 80208b4:	26a7      	movs	r6, #167	; 0xa7
 80208b6:	0076      	lsls	r6, r6, #1
 80208b8:	19ba      	adds	r2, r7, r6
 80208ba:	8812      	ldrh	r2, [r2, #0]
 80208bc:	4353      	muls	r3, r2
 80208be:	2164      	movs	r1, #100	; 0x64
 80208c0:	0018      	movs	r0, r3
 80208c2:	f7e5 fc95 	bl	80061f0 <__udivsi3>
 80208c6:	0003      	movs	r3, r0
 80208c8:	001a      	movs	r2, r3
 80208ca:	249d      	movs	r4, #157	; 0x9d
 80208cc:	0064      	lsls	r4, r4, #1
 80208ce:	193b      	adds	r3, r7, r4
 80208d0:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 80208d2:	4b46      	ldr	r3, [pc, #280]	; (80209ec <Send_DpmConfigSetCnf+0x878>)
 80208d4:	22a8      	movs	r2, #168	; 0xa8
 80208d6:	0052      	lsls	r2, r2, #1
 80208d8:	189b      	adds	r3, r3, r2
 80208da:	19db      	adds	r3, r3, r7
 80208dc:	781a      	ldrb	r2, [r3, #0]
 80208de:	193b      	adds	r3, r7, r4
 80208e0:	881b      	ldrh	r3, [r3, #0]
 80208e2:	b2d8      	uxtb	r0, r3
 80208e4:	4942      	ldr	r1, [pc, #264]	; (80209f0 <Send_DpmConfigSetCnf+0x87c>)
 80208e6:	0013      	movs	r3, r2
 80208e8:	005b      	lsls	r3, r3, #1
 80208ea:	189b      	adds	r3, r3, r2
 80208ec:	009b      	lsls	r3, r3, #2
 80208ee:	18cb      	adds	r3, r1, r3
 80208f0:	3307      	adds	r3, #7
 80208f2:	1c02      	adds	r2, r0, #0
 80208f4:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100U - dcdrp) / 100U;
 80208f6:	197b      	adds	r3, r7, r5
 80208f8:	781b      	ldrb	r3, [r3, #0]
 80208fa:	19ba      	adds	r2, r7, r6
 80208fc:	8812      	ldrh	r2, [r2, #0]
 80208fe:	2164      	movs	r1, #100	; 0x64
 8020900:	1a8a      	subs	r2, r1, r2
 8020902:	4353      	muls	r3, r2
 8020904:	2164      	movs	r1, #100	; 0x64
 8020906:	0018      	movs	r0, r3
 8020908:	f7e5 fc72 	bl	80061f0 <__udivsi3>
 802090c:	0003      	movs	r3, r0
 802090e:	001a      	movs	r2, r3
 8020910:	193b      	adds	r3, r7, r4
 8020912:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 8020914:	4b35      	ldr	r3, [pc, #212]	; (80209ec <Send_DpmConfigSetCnf+0x878>)
 8020916:	22a8      	movs	r2, #168	; 0xa8
 8020918:	0052      	lsls	r2, r2, #1
 802091a:	189b      	adds	r3, r3, r2
 802091c:	19db      	adds	r3, r3, r7
 802091e:	781a      	ldrb	r2, [r3, #0]
 8020920:	193b      	adds	r3, r7, r4
 8020922:	881b      	ldrh	r3, [r3, #0]
 8020924:	b2d8      	uxtb	r0, r3
 8020926:	4932      	ldr	r1, [pc, #200]	; (80209f0 <Send_DpmConfigSetCnf+0x87c>)
 8020928:	0013      	movs	r3, r2
 802092a:	005b      	lsls	r3, r3, #1
 802092c:	189b      	adds	r3, r3, r2
 802092e:	009b      	lsls	r3, r3, #2
 8020930:	18cb      	adds	r3, r1, r3
 8020932:	3306      	adds	r3, #6
 8020934:	1c02      	adds	r2, r0, #0
 8020936:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if (error != 0xFFU)
 8020938:	241a      	movs	r4, #26
 802093a:	34ff      	adds	r4, #255	; 0xff
 802093c:	193b      	adds	r3, r7, r4
 802093e:	781b      	ldrb	r3, [r3, #0]
 8020940:	2bff      	cmp	r3, #255	; 0xff
 8020942:	d04b      	beq.n	80209dc <Send_DpmConfigSetCnf+0x868>
  {
    TLV_deinit_encode(&send_tlv);
 8020944:	2594      	movs	r5, #148	; 0x94
 8020946:	006d      	lsls	r5, r5, #1
 8020948:	197b      	adds	r3, r7, r5
 802094a:	0018      	movs	r0, r3
 802094c:	f7fd fc42 	bl	801e1d4 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 8020950:	4b26      	ldr	r3, [pc, #152]	; (80209ec <Send_DpmConfigSetCnf+0x878>)
 8020952:	22a8      	movs	r2, #168	; 0xa8
 8020954:	0052      	lsls	r2, r2, #1
 8020956:	189b      	adds	r3, r3, r2
 8020958:	19db      	adds	r3, r3, r7
 802095a:	781b      	ldrb	r3, [r3, #0]
 802095c:	3301      	adds	r3, #1
 802095e:	015b      	lsls	r3, r3, #5
 8020960:	b25b      	sxtb	r3, r3
 8020962:	2208      	movs	r2, #8
 8020964:	4313      	orrs	r3, r2
 8020966:	b25b      	sxtb	r3, r3
 8020968:	b2d9      	uxtb	r1, r3
 802096a:	687b      	ldr	r3, [r7, #4]
 802096c:	2280      	movs	r2, #128	; 0x80
 802096e:	0052      	lsls	r2, r2, #1
 8020970:	1978      	adds	r0, r7, r5
 8020972:	f7fd fa6a 	bl	801de4a <TLV_init_encode>
    (void)TLV_addValue(&send_tlv, &error, 1);
 8020976:	1939      	adds	r1, r7, r4
 8020978:	197b      	adds	r3, r7, r5
 802097a:	2201      	movs	r2, #1
 802097c:	0018      	movs	r0, r3
 802097e:	f7fd fb95 	bl	801e0ac <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if (error != 0U)
 8020982:	193b      	adds	r3, r7, r4
 8020984:	781b      	ldrb	r3, [r3, #0]
 8020986:	2b00      	cmp	r3, #0
 8020988:	d022      	beq.n	80209d0 <Send_DpmConfigSetCnf+0x85c>
    {
      uint32_t index;
      for (index = 0; index < counter_param_not_applicated; index++)
 802098a:	2300      	movs	r3, #0
 802098c:	229e      	movs	r2, #158	; 0x9e
 802098e:	0052      	lsls	r2, r2, #1
 8020990:	18ba      	adds	r2, r7, r2
 8020992:	6013      	str	r3, [r2, #0]
 8020994:	e012      	b.n	80209bc <Send_DpmConfigSetCnf+0x848>
      {
        (void)TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 8020996:	2318      	movs	r3, #24
 8020998:	18fa      	adds	r2, r7, r3
 802099a:	249e      	movs	r4, #158	; 0x9e
 802099c:	0064      	lsls	r4, r4, #1
 802099e:	193b      	adds	r3, r7, r4
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	18d1      	adds	r1, r2, r3
 80209a4:	2394      	movs	r3, #148	; 0x94
 80209a6:	005b      	lsls	r3, r3, #1
 80209a8:	18fb      	adds	r3, r7, r3
 80209aa:	2201      	movs	r2, #1
 80209ac:	0018      	movs	r0, r3
 80209ae:	f7fd fb7d 	bl	801e0ac <TLV_addValue>
      for (index = 0; index < counter_param_not_applicated; index++)
 80209b2:	193b      	adds	r3, r7, r4
 80209b4:	681b      	ldr	r3, [r3, #0]
 80209b6:	3301      	adds	r3, #1
 80209b8:	193a      	adds	r2, r7, r4
 80209ba:	6013      	str	r3, [r2, #0]
 80209bc:	234e      	movs	r3, #78	; 0x4e
 80209be:	33ff      	adds	r3, #255	; 0xff
 80209c0:	18fb      	adds	r3, r7, r3
 80209c2:	781b      	ldrb	r3, [r3, #0]
 80209c4:	229e      	movs	r2, #158	; 0x9e
 80209c6:	0052      	lsls	r2, r2, #1
 80209c8:	18ba      	adds	r2, r7, r2
 80209ca:	6812      	ldr	r2, [r2, #0]
 80209cc:	429a      	cmp	r2, r3
 80209ce:	d3e2      	bcc.n	8020996 <Send_DpmConfigSetCnf+0x822>
      }
    }
    TLV_deinit_encode(&send_tlv);
 80209d0:	2394      	movs	r3, #148	; 0x94
 80209d2:	005b      	lsls	r3, r3, #1
 80209d4:	18fb      	adds	r3, r7, r3
 80209d6:	0018      	movs	r0, r3
 80209d8:	f7fd fbfc 	bl	801e1d4 <TLV_deinit_encode>
  }
}
 80209dc:	46c0      	nop			; (mov r8, r8)
 80209de:	46bd      	mov	sp, r7
 80209e0:	b055      	add	sp, #340	; 0x154
 80209e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209e4:	fffffec7 	.word	0xfffffec7
 80209e8:	fffffec8 	.word	0xfffffec8
 80209ec:	fffffebf 	.word	0xfffffebf
 80209f0:	200000e4 	.word	0x200000e4

080209f4 <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 80209f4:	b580      	push	{r7, lr}
 80209f6:	b092      	sub	sp, #72	; 0x48
 80209f8:	af00      	add	r7, sp, #0
 80209fa:	60b9      	str	r1, [r7, #8]
 80209fc:	607a      	str	r2, [r7, #4]
 80209fe:	210f      	movs	r1, #15
 8020a00:	187b      	adds	r3, r7, r1
 8020a02:	1c02      	adds	r2, r0, #0
 8020a04:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8020a06:	187b      	adds	r3, r7, r1
 8020a08:	781b      	ldrb	r3, [r3, #0]
 8020a0a:	3301      	adds	r3, #1
 8020a0c:	015b      	lsls	r3, r3, #5
 8020a0e:	b25b      	sxtb	r3, r3
 8020a10:	2205      	movs	r2, #5
 8020a12:	4313      	orrs	r3, r2
 8020a14:	b25b      	sxtb	r3, r3
 8020a16:	b2d9      	uxtb	r1, r3
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	2280      	movs	r2, #128	; 0x80
 8020a1c:	0052      	lsls	r2, r2, #1
 8020a1e:	2030      	movs	r0, #48	; 0x30
 8020a20:	1838      	adds	r0, r7, r0
 8020a22:	f7fd fa12 	bl	801de4a <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 8020a26:	68bb      	ldr	r3, [r7, #8]
 8020a28:	0018      	movs	r0, r3
 8020a2a:	f7fd fc79 	bl	801e320 <TLV_get_string_length>
 8020a2e:	0003      	movs	r3, r0
 8020a30:	001a      	movs	r2, r3
 8020a32:	2344      	movs	r3, #68	; 0x44
 8020a34:	18fb      	adds	r3, r7, r3
 8020a36:	3a03      	subs	r2, #3
 8020a38:	801a      	strh	r2, [r3, #0]
  uint8_t index = 0;
 8020a3a:	2347      	movs	r3, #71	; 0x47
 8020a3c:	18fb      	adds	r3, r7, r3
 8020a3e:	2200      	movs	r2, #0
 8020a40:	701a      	strb	r2, [r3, #0]

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditional breaks) */
    if (0U == length)
 8020a42:	2344      	movs	r3, #68	; 0x44
 8020a44:	18fb      	adds	r3, r7, r3
 8020a46:	881b      	ldrh	r3, [r3, #0]
 8020a48:	2b00      	cmp	r3, #0
 8020a4a:	d104      	bne.n	8020a56 <Send_DpmConfigGetCnf+0x62>
    {
      param = (uint8_t)GUI_PARAM_ALL;
 8020a4c:	2346      	movs	r3, #70	; 0x46
 8020a4e:	18fb      	adds	r3, r7, r3
 8020a50:	22ff      	movs	r2, #255	; 0xff
 8020a52:	701a      	strb	r2, [r3, #0]
 8020a54:	e009      	b.n	8020a6a <Send_DpmConfigGetCnf+0x76>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 8020a56:	2347      	movs	r3, #71	; 0x47
 8020a58:	18fb      	adds	r3, r7, r3
 8020a5a:	781b      	ldrb	r3, [r3, #0]
 8020a5c:	3307      	adds	r3, #7
 8020a5e:	68ba      	ldr	r2, [r7, #8]
 8020a60:	18d2      	adds	r2, r2, r3
 8020a62:	2346      	movs	r3, #70	; 0x46
 8020a64:	18fb      	adds	r3, r7, r3
 8020a66:	7812      	ldrb	r2, [r2, #0]
 8020a68:	701a      	strb	r2, [r3, #0]

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch ((USBPD_GUI_Tag_Param)param)
 8020a6a:	2346      	movs	r3, #70	; 0x46
 8020a6c:	18fb      	adds	r3, r7, r3
 8020a6e:	781b      	ldrb	r3, [r3, #0]
 8020a70:	2b1c      	cmp	r3, #28
 8020a72:	dc0d      	bgt.n	8020a90 <Send_DpmConfigGetCnf+0x9c>
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	da00      	bge.n	8020a7a <Send_DpmConfigGetCnf+0x86>
 8020a78:	e243      	b.n	8020f02 <Send_DpmConfigGetCnf+0x50e>
 8020a7a:	2b1c      	cmp	r3, #28
 8020a7c:	d900      	bls.n	8020a80 <Send_DpmConfigGetCnf+0x8c>
 8020a7e:	e240      	b.n	8020f02 <Send_DpmConfigGetCnf+0x50e>
 8020a80:	009a      	lsls	r2, r3, #2
 8020a82:	4b02      	ldr	r3, [pc, #8]	; (8020a8c <Send_DpmConfigGetCnf+0x98>)
 8020a84:	18d3      	adds	r3, r2, r3
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	469f      	mov	pc, r3
 8020a8a:	46c0      	nop			; (mov r8, r8)
 8020a8c:	08024584 	.word	0x08024584
 8020a90:	2bff      	cmp	r3, #255	; 0xff
 8020a92:	d000      	beq.n	8020a96 <Send_DpmConfigGetCnf+0xa2>
 8020a94:	e235      	b.n	8020f02 <Send_DpmConfigGetCnf+0x50e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_SupportedSOP;
 8020a96:	230f      	movs	r3, #15
 8020a98:	18fb      	adds	r3, r7, r3
 8020a9a:	781a      	ldrb	r2, [r3, #0]
 8020a9c:	49ed      	ldr	r1, [pc, #948]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020a9e:	0013      	movs	r3, r2
 8020aa0:	005b      	lsls	r3, r3, #1
 8020aa2:	189b      	adds	r3, r3, r2
 8020aa4:	009b      	lsls	r3, r3, #2
 8020aa6:	585b      	ldr	r3, [r3, r1]
 8020aa8:	b2da      	uxtb	r2, r3
 8020aaa:	212f      	movs	r1, #47	; 0x2f
 8020aac:	187b      	adds	r3, r7, r1
 8020aae:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SOP, 1, &settings);
 8020ab0:	187b      	adds	r3, r7, r1
 8020ab2:	2230      	movs	r2, #48	; 0x30
 8020ab4:	18b8      	adds	r0, r7, r2
 8020ab6:	2201      	movs	r2, #1
 8020ab8:	2100      	movs	r1, #0
 8020aba:	f7fd fa29 	bl	801df10 <TLV_add>
        if (0U != length)
 8020abe:	2344      	movs	r3, #68	; 0x44
 8020ac0:	18fb      	adds	r3, r7, r3
 8020ac2:	881b      	ldrh	r3, [r3, #0]
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d000      	beq.n	8020aca <Send_DpmConfigGetCnf+0xd6>
 8020ac8:	e22e      	b.n	8020f28 <Send_DpmConfigGetCnf+0x534>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 8020aca:	230f      	movs	r3, #15
 8020acc:	18fb      	adds	r3, r7, r3
 8020ace:	781a      	ldrb	r2, [r3, #0]
 8020ad0:	49e0      	ldr	r1, [pc, #896]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020ad2:	2008      	movs	r0, #8
 8020ad4:	0013      	movs	r3, r2
 8020ad6:	005b      	lsls	r3, r3, #1
 8020ad8:	189b      	adds	r3, r3, r2
 8020ada:	009b      	lsls	r3, r3, #2
 8020adc:	18cb      	adds	r3, r1, r3
 8020ade:	181b      	adds	r3, r3, r0
 8020ae0:	781b      	ldrb	r3, [r3, #0]
 8020ae2:	079b      	lsls	r3, r3, #30
 8020ae4:	0fdb      	lsrs	r3, r3, #31
 8020ae6:	b2db      	uxtb	r3, r3
 8020ae8:	001a      	movs	r2, r3
 8020aea:	212e      	movs	r1, #46	; 0x2e
 8020aec:	187b      	adds	r3, r7, r1
 8020aee:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_FASTROLESWAP, 1, &settings);
 8020af0:	187b      	adds	r3, r7, r1
 8020af2:	2230      	movs	r2, #48	; 0x30
 8020af4:	18b8      	adds	r0, r7, r2
 8020af6:	2201      	movs	r2, #1
 8020af8:	2102      	movs	r1, #2
 8020afa:	f7fd fa09 	bl	801df10 <TLV_add>
        if (0U != length)
 8020afe:	2344      	movs	r3, #68	; 0x44
 8020b00:	18fb      	adds	r3, r7, r3
 8020b02:	881b      	ldrh	r3, [r3, #0]
 8020b04:	2b00      	cmp	r3, #0
 8020b06:	d000      	beq.n	8020b0a <Send_DpmConfigGetCnf+0x116>
 8020b08:	e210      	b.n	8020f2c <Send_DpmConfigGetCnf+0x538>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 8020b0a:	230f      	movs	r3, #15
 8020b0c:	18fb      	adds	r3, r7, r3
 8020b0e:	781a      	ldrb	r2, [r3, #0]
 8020b10:	4bd1      	ldr	r3, [pc, #836]	; (8020e58 <Send_DpmConfigGetCnf+0x464>)
 8020b12:	2174      	movs	r1, #116	; 0x74
 8020b14:	434a      	muls	r2, r1
 8020b16:	5cd3      	ldrb	r3, [r2, r3]
 8020b18:	071b      	lsls	r3, r3, #28
 8020b1a:	0fdb      	lsrs	r3, r3, #31
 8020b1c:	b2db      	uxtb	r3, r3
 8020b1e:	001a      	movs	r2, r3
 8020b20:	212d      	movs	r1, #45	; 0x2d
 8020b22:	187b      	adds	r3, r7, r1
 8020b24:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 8020b26:	187b      	adds	r3, r7, r1
 8020b28:	2230      	movs	r2, #48	; 0x30
 8020b2a:	18b8      	adds	r0, r7, r2
 8020b2c:	2201      	movs	r2, #1
 8020b2e:	2103      	movs	r1, #3
 8020b30:	f7fd f9ee 	bl	801df10 <TLV_add>
        if (0U != length)
 8020b34:	2344      	movs	r3, #68	; 0x44
 8020b36:	18fb      	adds	r3, r7, r3
 8020b38:	881b      	ldrh	r3, [r3, #0]
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d000      	beq.n	8020b40 <Send_DpmConfigGetCnf+0x14c>
 8020b3e:	e1f7      	b.n	8020f30 <Send_DpmConfigGetCnf+0x53c>
        }
      }
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 8020b40:	230f      	movs	r3, #15
 8020b42:	18fb      	adds	r3, r7, r3
 8020b44:	781a      	ldrb	r2, [r3, #0]
 8020b46:	4bc4      	ldr	r3, [pc, #784]	; (8020e58 <Send_DpmConfigGetCnf+0x464>)
 8020b48:	2174      	movs	r1, #116	; 0x74
 8020b4a:	434a      	muls	r2, r1
 8020b4c:	5cd3      	ldrb	r3, [r2, r3]
 8020b4e:	075b      	lsls	r3, r3, #29
 8020b50:	0fdb      	lsrs	r3, r3, #31
 8020b52:	b2db      	uxtb	r3, r3
 8020b54:	001a      	movs	r2, r3
 8020b56:	212c      	movs	r1, #44	; 0x2c
 8020b58:	187b      	adds	r3, r7, r1
 8020b5a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 8020b5c:	187b      	adds	r3, r7, r1
 8020b5e:	2230      	movs	r2, #48	; 0x30
 8020b60:	18b8      	adds	r0, r7, r2
 8020b62:	2201      	movs	r2, #1
 8020b64:	211c      	movs	r1, #28
 8020b66:	f7fd f9d3 	bl	801df10 <TLV_add>
        if (0U != length)
 8020b6a:	2344      	movs	r3, #68	; 0x44
 8020b6c:	18fb      	adds	r3, r7, r3
 8020b6e:	881b      	ldrh	r3, [r3, #0]
 8020b70:	2b00      	cmp	r3, #0
 8020b72:	d000      	beq.n	8020b76 <Send_DpmConfigGetCnf+0x182>
 8020b74:	e1de      	b.n	8020f34 <Send_DpmConfigGetCnf+0x540>
        }
      }
      case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_DefaultRole;
 8020b76:	230f      	movs	r3, #15
 8020b78:	18fb      	adds	r3, r7, r3
 8020b7a:	781a      	ldrb	r2, [r3, #0]
 8020b7c:	49b5      	ldr	r1, [pc, #724]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020b7e:	0013      	movs	r3, r2
 8020b80:	005b      	lsls	r3, r3, #1
 8020b82:	189b      	adds	r3, r3, r2
 8020b84:	009b      	lsls	r3, r3, #2
 8020b86:	18cb      	adds	r3, r1, r3
 8020b88:	791b      	ldrb	r3, [r3, #4]
 8020b8a:	075b      	lsls	r3, r3, #29
 8020b8c:	0fdb      	lsrs	r3, r3, #31
 8020b8e:	b2db      	uxtb	r3, r3
 8020b90:	001a      	movs	r2, r3
 8020b92:	212b      	movs	r1, #43	; 0x2b
 8020b94:	187b      	adds	r3, r7, r1
 8020b96:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 8020b98:	187b      	adds	r3, r7, r1
 8020b9a:	2230      	movs	r2, #48	; 0x30
 8020b9c:	18b8      	adds	r0, r7, r2
 8020b9e:	2201      	movs	r2, #1
 8020ba0:	2104      	movs	r1, #4
 8020ba2:	f7fd f9b5 	bl	801df10 <TLV_add>
        if (0U != length)
 8020ba6:	2344      	movs	r3, #68	; 0x44
 8020ba8:	18fb      	adds	r3, r7, r3
 8020baa:	881b      	ldrh	r3, [r3, #0]
 8020bac:	2b00      	cmp	r3, #0
 8020bae:	d000      	beq.n	8020bb2 <Send_DpmConfigGetCnf+0x1be>
 8020bb0:	e1c2      	b.n	8020f38 <Send_DpmConfigGetCnf+0x544>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RoleSwap;
 8020bb2:	230f      	movs	r3, #15
 8020bb4:	18fb      	adds	r3, r7, r3
 8020bb6:	781a      	ldrb	r2, [r3, #0]
 8020bb8:	49a6      	ldr	r1, [pc, #664]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020bba:	0013      	movs	r3, r2
 8020bbc:	005b      	lsls	r3, r3, #1
 8020bbe:	189b      	adds	r3, r3, r2
 8020bc0:	009b      	lsls	r3, r3, #2
 8020bc2:	18cb      	adds	r3, r1, r3
 8020bc4:	791b      	ldrb	r3, [r3, #4]
 8020bc6:	071b      	lsls	r3, r3, #28
 8020bc8:	0fdb      	lsrs	r3, r3, #31
 8020bca:	b2db      	uxtb	r3, r3
 8020bcc:	001a      	movs	r2, r3
 8020bce:	212a      	movs	r1, #42	; 0x2a
 8020bd0:	187b      	adds	r3, r7, r1
 8020bd2:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DRP_SUPPORT, 1, &settings);
 8020bd4:	187b      	adds	r3, r7, r1
 8020bd6:	2230      	movs	r2, #48	; 0x30
 8020bd8:	18b8      	adds	r0, r7, r2
 8020bda:	2201      	movs	r2, #1
 8020bdc:	2105      	movs	r1, #5
 8020bde:	f7fd f997 	bl	801df10 <TLV_add>
        if (0U != length)
 8020be2:	2344      	movs	r3, #68	; 0x44
 8020be4:	18fb      	adds	r3, r7, r3
 8020be6:	881b      	ldrh	r3, [r3, #0]
 8020be8:	2b00      	cmp	r3, #0
 8020bea:	d000      	beq.n	8020bee <Send_DpmConfigGetCnf+0x1fa>
 8020bec:	e1a6      	b.n	8020f3c <Send_DpmConfigGetCnf+0x548>
        }
      }
      case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].CAD_RoleToggle;
 8020bee:	230f      	movs	r3, #15
 8020bf0:	18fb      	adds	r3, r7, r3
 8020bf2:	781a      	ldrb	r2, [r3, #0]
 8020bf4:	4997      	ldr	r1, [pc, #604]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020bf6:	0013      	movs	r3, r2
 8020bf8:	005b      	lsls	r3, r3, #1
 8020bfa:	189b      	adds	r3, r3, r2
 8020bfc:	009b      	lsls	r3, r3, #2
 8020bfe:	18cb      	adds	r3, r1, r3
 8020c00:	795b      	ldrb	r3, [r3, #5]
 8020c02:	069b      	lsls	r3, r3, #26
 8020c04:	0fdb      	lsrs	r3, r3, #31
 8020c06:	b2db      	uxtb	r3, r3
 8020c08:	001a      	movs	r2, r3
 8020c0a:	2129      	movs	r1, #41	; 0x29
 8020c0c:	187b      	adds	r3, r7, r1
 8020c0e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_CADROLETOGGLE, 1, &settings);
 8020c10:	187b      	adds	r3, r7, r1
 8020c12:	2230      	movs	r2, #48	; 0x30
 8020c14:	18b8      	adds	r0, r7, r2
 8020c16:	2201      	movs	r2, #1
 8020c18:	2106      	movs	r1, #6
 8020c1a:	f7fd f979 	bl	801df10 <TLV_add>
        if (0U != length)
 8020c1e:	2344      	movs	r3, #68	; 0x44
 8020c20:	18fb      	adds	r3, r7, r3
 8020c22:	881b      	ldrh	r3, [r3, #0]
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	d000      	beq.n	8020c2a <Send_DpmConfigGetCnf+0x236>
 8020c28:	e18a      	b.n	8020f40 <Send_DpmConfigGetCnf+0x54c>
        }
      }
      case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_CapscounterSupport;
 8020c2a:	230f      	movs	r3, #15
 8020c2c:	18fb      	adds	r3, r7, r3
 8020c2e:	781a      	ldrb	r2, [r3, #0]
 8020c30:	4988      	ldr	r1, [pc, #544]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020c32:	0013      	movs	r3, r2
 8020c34:	005b      	lsls	r3, r3, #1
 8020c36:	189b      	adds	r3, r3, r2
 8020c38:	009b      	lsls	r3, r3, #2
 8020c3a:	18cb      	adds	r3, r1, r3
 8020c3c:	791b      	ldrb	r3, [r3, #4]
 8020c3e:	061b      	lsls	r3, r3, #24
 8020c40:	0fdb      	lsrs	r3, r3, #31
 8020c42:	b2db      	uxtb	r3, r3
 8020c44:	001a      	movs	r2, r3
 8020c46:	2128      	movs	r1, #40	; 0x28
 8020c48:	187b      	adds	r3, r7, r1
 8020c4a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8020c4c:	187b      	adds	r3, r7, r1
 8020c4e:	2230      	movs	r2, #48	; 0x30
 8020c50:	18b8      	adds	r0, r7, r2
 8020c52:	2201      	movs	r2, #1
 8020c54:	2107      	movs	r1, #7
 8020c56:	f7fd f95b 	bl	801df10 <TLV_add>
        if (0U != length)
 8020c5a:	2344      	movs	r3, #68	; 0x44
 8020c5c:	18fb      	adds	r3, r7, r3
 8020c5e:	881b      	ldrh	r3, [r3, #0]
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d000      	beq.n	8020c66 <Send_DpmConfigGetCnf+0x272>
 8020c64:	e16e      	b.n	8020f44 <Send_DpmConfigGetCnf+0x550>
      }
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PingSupport;
 8020c66:	230f      	movs	r3, #15
 8020c68:	18fb      	adds	r3, r7, r3
 8020c6a:	781a      	ldrb	r2, [r3, #0]
 8020c6c:	4979      	ldr	r1, [pc, #484]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020c6e:	0013      	movs	r3, r2
 8020c70:	005b      	lsls	r3, r3, #1
 8020c72:	189b      	adds	r3, r3, r2
 8020c74:	009b      	lsls	r3, r3, #2
 8020c76:	18cb      	adds	r3, r1, r3
 8020c78:	791b      	ldrb	r3, [r3, #4]
 8020c7a:	065b      	lsls	r3, r3, #25
 8020c7c:	0fdb      	lsrs	r3, r3, #31
 8020c7e:	b2db      	uxtb	r3, r3
 8020c80:	001a      	movs	r2, r3
 8020c82:	2127      	movs	r1, #39	; 0x27
 8020c84:	187b      	adds	r3, r7, r1
 8020c86:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PING_SUPPORT, 1, &settings);
 8020c88:	187b      	adds	r3, r7, r1
 8020c8a:	2230      	movs	r2, #48	; 0x30
 8020c8c:	18b8      	adds	r0, r7, r2
 8020c8e:	2201      	movs	r2, #1
 8020c90:	210a      	movs	r1, #10
 8020c92:	f7fd f93d 	bl	801df10 <TLV_add>
        if (0U != length)
 8020c96:	2344      	movs	r3, #68	; 0x44
 8020c98:	18fb      	adds	r3, r7, r3
 8020c9a:	881b      	ldrh	r3, [r3, #0]
 8020c9c:	2b00      	cmp	r3, #0
 8020c9e:	d000      	beq.n	8020ca2 <Send_DpmConfigGetCnf+0x2ae>
 8020ca0:	e152      	b.n	8020f48 <Send_DpmConfigGetCnf+0x554>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = (uint16_t)DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 8020ca2:	230f      	movs	r3, #15
 8020ca4:	18fb      	adds	r3, r7, r3
 8020ca6:	781a      	ldrb	r2, [r3, #0]
 8020ca8:	496a      	ldr	r1, [pc, #424]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020caa:	0013      	movs	r3, r2
 8020cac:	005b      	lsls	r3, r3, #1
 8020cae:	189b      	adds	r3, r3, r2
 8020cb0:	009b      	lsls	r3, r3, #2
 8020cb2:	18cb      	adds	r3, r1, r3
 8020cb4:	3308      	adds	r3, #8
 8020cb6:	881a      	ldrh	r2, [r3, #0]
 8020cb8:	2124      	movs	r1, #36	; 0x24
 8020cba:	187b      	adds	r3, r7, r1
 8020cbc:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PPS_SUPPORT, 2, (uint8_t *)&settings);
 8020cbe:	187b      	adds	r3, r7, r1
 8020cc0:	2230      	movs	r2, #48	; 0x30
 8020cc2:	18b8      	adds	r0, r7, r2
 8020cc4:	2202      	movs	r2, #2
 8020cc6:	210b      	movs	r1, #11
 8020cc8:	f7fd f922 	bl	801df10 <TLV_add>
        if (0U != length)
 8020ccc:	2344      	movs	r3, #68	; 0x44
 8020cce:	18fb      	adds	r3, r7, r3
 8020cd0:	881b      	ldrh	r3, [r3, #0]
 8020cd2:	2b00      	cmp	r3, #0
 8020cd4:	d000      	beq.n	8020cd8 <Send_DpmConfigGetCnf+0x2e4>
 8020cd6:	e139      	b.n	8020f4c <Send_DpmConfigGetCnf+0x558>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_VconnSwap;
 8020cd8:	230f      	movs	r3, #15
 8020cda:	18fb      	adds	r3, r7, r3
 8020cdc:	781a      	ldrb	r2, [r3, #0]
 8020cde:	4b5e      	ldr	r3, [pc, #376]	; (8020e58 <Send_DpmConfigGetCnf+0x464>)
 8020ce0:	2174      	movs	r1, #116	; 0x74
 8020ce2:	434a      	muls	r2, r1
 8020ce4:	5cd3      	ldrb	r3, [r2, r3]
 8020ce6:	079b      	lsls	r3, r3, #30
 8020ce8:	0fdb      	lsrs	r3, r3, #31
 8020cea:	b2db      	uxtb	r3, r3
 8020cec:	001a      	movs	r2, r3
 8020cee:	2123      	movs	r1, #35	; 0x23
 8020cf0:	187b      	adds	r3, r7, r1
 8020cf2:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_VCONNSWAP, 1, &settings);
 8020cf4:	187b      	adds	r3, r7, r1
 8020cf6:	2230      	movs	r2, #48	; 0x30
 8020cf8:	18b8      	adds	r0, r7, r2
 8020cfa:	2201      	movs	r2, #1
 8020cfc:	2108      	movs	r1, #8
 8020cfe:	f7fd f907 	bl	801df10 <TLV_add>
        if (0U != length)
 8020d02:	2344      	movs	r3, #68	; 0x44
 8020d04:	18fb      	adds	r3, r7, r3
 8020d06:	881b      	ldrh	r3, [r3, #0]
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	d000      	beq.n	8020d0e <Send_DpmConfigGetCnf+0x31a>
 8020d0c:	e120      	b.n	8020f50 <Send_DpmConfigGetCnf+0x55c>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[0];
 8020d0e:	2143      	movs	r1, #67	; 0x43
 8020d10:	187b      	adds	r3, r7, r1
 8020d12:	4a52      	ldr	r2, [pc, #328]	; (8020e5c <Send_DpmConfigGetCnf+0x468>)
 8020d14:	7812      	ldrb	r2, [r2, #0]
 8020d16:	701a      	strb	r2, [r3, #0]
          list_pdo  = (uint8_t *)PORT0_PDO_ListSNK;
 8020d18:	4b51      	ldr	r3, [pc, #324]	; (8020e60 <Send_DpmConfigGetCnf+0x46c>)
 8020d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[2];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSNK;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SNK_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 8020d1c:	187b      	adds	r3, r7, r1
 8020d1e:	781b      	ldrb	r3, [r3, #0]
 8020d20:	b29b      	uxth	r3, r3
 8020d22:	009b      	lsls	r3, r3, #2
 8020d24:	b29a      	uxth	r2, r3
 8020d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020d28:	2130      	movs	r1, #48	; 0x30
 8020d2a:	1878      	adds	r0, r7, r1
 8020d2c:	210c      	movs	r1, #12
 8020d2e:	f7fd f8ef 	bl	801df10 <TLV_add>
      }
      if (0U != length)
 8020d32:	2344      	movs	r3, #68	; 0x44
 8020d34:	18fb      	adds	r3, r7, r3
 8020d36:	881b      	ldrh	r3, [r3, #0]
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d000      	beq.n	8020d3e <Send_DpmConfigGetCnf+0x34a>
 8020d3c:	e10a      	b.n	8020f54 <Send_DpmConfigGetCnf+0x560>
      }
#endif /* _SRC || _DRP */
      case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_tDRP;
 8020d3e:	230f      	movs	r3, #15
 8020d40:	18fb      	adds	r3, r7, r3
 8020d42:	781b      	ldrb	r3, [r3, #0]
 8020d44:	4a44      	ldr	r2, [pc, #272]	; (8020e58 <Send_DpmConfigGetCnf+0x464>)
 8020d46:	2168      	movs	r1, #104	; 0x68
 8020d48:	2074      	movs	r0, #116	; 0x74
 8020d4a:	4343      	muls	r3, r0
 8020d4c:	18d3      	adds	r3, r2, r3
 8020d4e:	185b      	adds	r3, r3, r1
 8020d50:	791b      	ldrb	r3, [r3, #4]
 8020d52:	061b      	lsls	r3, r3, #24
 8020d54:	0e5b      	lsrs	r3, r3, #25
 8020d56:	b2db      	uxtb	r3, r3
 8020d58:	001a      	movs	r2, r3
 8020d5a:	2122      	movs	r1, #34	; 0x22
 8020d5c:	187b      	adds	r3, r7, r1
 8020d5e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_TDRP, 1, &value);
 8020d60:	187b      	adds	r3, r7, r1
 8020d62:	2230      	movs	r2, #48	; 0x30
 8020d64:	18b8      	adds	r0, r7, r2
 8020d66:	2201      	movs	r2, #1
 8020d68:	210e      	movs	r1, #14
 8020d6a:	f7fd f8d1 	bl	801df10 <TLV_add>
      }
      if (0U != length)
 8020d6e:	2344      	movs	r3, #68	; 0x44
 8020d70:	18fb      	adds	r3, r7, r3
 8020d72:	881b      	ldrh	r3, [r3, #0]
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	d000      	beq.n	8020d7a <Send_DpmConfigGetCnf+0x386>
 8020d78:	e0ee      	b.n	8020f58 <Send_DpmConfigGetCnf+0x564>
        break;
      }
      case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 8020d7a:	230f      	movs	r3, #15
 8020d7c:	18fb      	adds	r3, r7, r3
 8020d7e:	781b      	ldrb	r3, [r3, #0]
 8020d80:	4a35      	ldr	r2, [pc, #212]	; (8020e58 <Send_DpmConfigGetCnf+0x464>)
 8020d82:	2168      	movs	r1, #104	; 0x68
 8020d84:	2074      	movs	r0, #116	; 0x74
 8020d86:	4343      	muls	r3, r0
 8020d88:	18d3      	adds	r3, r2, r3
 8020d8a:	185b      	adds	r3, r3, r1
 8020d8c:	795b      	ldrb	r3, [r3, #5]
 8020d8e:	065b      	lsls	r3, r3, #25
 8020d90:	0e5b      	lsrs	r3, r3, #25
 8020d92:	b2db      	uxtb	r3, r3
 8020d94:	001a      	movs	r2, r3
 8020d96:	2121      	movs	r1, #33	; 0x21
 8020d98:	187b      	adds	r3, r7, r1
 8020d9a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DCSRC_DRP, 1, &value);
 8020d9c:	187b      	adds	r3, r7, r1
 8020d9e:	2230      	movs	r2, #48	; 0x30
 8020da0:	18b8      	adds	r0, r7, r2
 8020da2:	2201      	movs	r2, #1
 8020da4:	210f      	movs	r1, #15
 8020da6:	f7fd f8b3 	bl	801df10 <TLV_add>
      }
      if (0U != length)
 8020daa:	2344      	movs	r3, #68	; 0x44
 8020dac:	18fb      	adds	r3, r7, r3
 8020dae:	881b      	ldrh	r3, [r3, #0]
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	d000      	beq.n	8020db6 <Send_DpmConfigGetCnf+0x3c2>
 8020db4:	e0d2      	b.n	8020f5c <Send_DpmConfigGetCnf+0x568>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 8020db6:	230f      	movs	r3, #15
 8020db8:	18fb      	adds	r3, r7, r3
 8020dba:	781a      	ldrb	r2, [r3, #0]
 8020dbc:	4925      	ldr	r1, [pc, #148]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020dbe:	0013      	movs	r3, r2
 8020dc0:	005b      	lsls	r3, r3, #1
 8020dc2:	189b      	adds	r3, r3, r2
 8020dc4:	009b      	lsls	r3, r3, #2
 8020dc6:	18cb      	adds	r3, r1, r3
 8020dc8:	795b      	ldrb	r3, [r3, #5]
 8020dca:	07db      	lsls	r3, r3, #31
 8020dcc:	0fdb      	lsrs	r3, r3, #31
 8020dce:	b2db      	uxtb	r3, r3
 8020dd0:	001a      	movs	r2, r3
 8020dd2:	2120      	movs	r1, #32
 8020dd4:	187b      	adds	r3, r7, r1
 8020dd6:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 8020dd8:	187b      	adds	r3, r7, r1
 8020dda:	2230      	movs	r2, #48	; 0x30
 8020ddc:	18b8      	adds	r0, r7, r2
 8020dde:	2201      	movs	r2, #1
 8020de0:	2110      	movs	r1, #16
 8020de2:	f7fd f895 	bl	801df10 <TLV_add>
      }
      if (0U != length)
 8020de6:	2344      	movs	r3, #68	; 0x44
 8020de8:	18fb      	adds	r3, r7, r3
 8020dea:	881b      	ldrh	r3, [r3, #0]
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	d000      	beq.n	8020df2 <Send_DpmConfigGetCnf+0x3fe>
 8020df0:	e0b6      	b.n	8020f60 <Send_DpmConfigGetCnf+0x56c>
      {
        break;
      }
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 8020df2:	230f      	movs	r3, #15
 8020df4:	18fb      	adds	r3, r7, r3
 8020df6:	781a      	ldrb	r2, [r3, #0]
 8020df8:	4916      	ldr	r1, [pc, #88]	; (8020e54 <Send_DpmConfigGetCnf+0x460>)
 8020dfa:	0013      	movs	r3, r2
 8020dfc:	005b      	lsls	r3, r3, #1
 8020dfe:	189b      	adds	r3, r3, r2
 8020e00:	009b      	lsls	r3, r3, #2
 8020e02:	18cb      	adds	r3, r1, r3
 8020e04:	795b      	ldrb	r3, [r3, #5]
 8020e06:	079b      	lsls	r3, r3, #30
 8020e08:	0fdb      	lsrs	r3, r3, #31
 8020e0a:	b2db      	uxtb	r3, r3
 8020e0c:	001a      	movs	r2, r3
 8020e0e:	211f      	movs	r1, #31
 8020e10:	187b      	adds	r3, r7, r1
 8020e12:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 8020e14:	187b      	adds	r3, r7, r1
 8020e16:	2230      	movs	r2, #48	; 0x30
 8020e18:	18b8      	adds	r0, r7, r2
 8020e1a:	2201      	movs	r2, #1
 8020e1c:	2111      	movs	r1, #17
 8020e1e:	f7fd f877 	bl	801df10 <TLV_add>
      }
      if (0U != length)
 8020e22:	2344      	movs	r3, #68	; 0x44
 8020e24:	18fb      	adds	r3, r7, r3
 8020e26:	881b      	ldrh	r3, [r3, #0]
 8020e28:	2b00      	cmp	r3, #0
 8020e2a:	d000      	beq.n	8020e2e <Send_DpmConfigGetCnf+0x43a>
 8020e2c:	e09a      	b.n	8020f64 <Send_DpmConfigGetCnf+0x570>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 8020e2e:	230f      	movs	r3, #15
 8020e30:	18fb      	adds	r3, r7, r3
 8020e32:	781a      	ldrb	r2, [r3, #0]
 8020e34:	4b0b      	ldr	r3, [pc, #44]	; (8020e64 <Send_DpmConfigGetCnf+0x470>)
 8020e36:	00d2      	lsls	r2, r2, #3
 8020e38:	58d3      	ldr	r3, [r2, r3]
 8020e3a:	61bb      	str	r3, [r7, #24]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_XID_SOP, 4, (uint8_t *)&value);
 8020e3c:	2318      	movs	r3, #24
 8020e3e:	18fb      	adds	r3, r7, r3
 8020e40:	2230      	movs	r2, #48	; 0x30
 8020e42:	18b8      	adds	r0, r7, r2
 8020e44:	2204      	movs	r2, #4
 8020e46:	2112      	movs	r1, #18
 8020e48:	f7fd f862 	bl	801df10 <TLV_add>
      }
      if (0U != length)
 8020e4c:	2344      	movs	r3, #68	; 0x44
 8020e4e:	18fb      	adds	r3, r7, r3
 8020e50:	e00a      	b.n	8020e68 <Send_DpmConfigGetCnf+0x474>
 8020e52:	46c0      	nop			; (mov r8, r8)
 8020e54:	200000e4 	.word	0x200000e4
 8020e58:	200000f8 	.word	0x200000f8
 8020e5c:	2000016c 	.word	0x2000016c
 8020e60:	20000170 	.word	0x20000170
 8020e64:	200000f0 	.word	0x200000f0
 8020e68:	881b      	ldrh	r3, [r3, #0]
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d000      	beq.n	8020e70 <Send_DpmConfigGetCnf+0x47c>
 8020e6e:	e07b      	b.n	8020f68 <Send_DpmConfigGetCnf+0x574>
      {
        break;
      }
      case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].VID;
 8020e70:	230f      	movs	r3, #15
 8020e72:	18fb      	adds	r3, r7, r3
 8020e74:	781b      	ldrb	r3, [r3, #0]
 8020e76:	4a4d      	ldr	r2, [pc, #308]	; (8020fac <Send_DpmConfigGetCnf+0x5b8>)
 8020e78:	00db      	lsls	r3, r3, #3
 8020e7a:	18d3      	adds	r3, r2, r3
 8020e7c:	3304      	adds	r3, #4
 8020e7e:	881a      	ldrh	r2, [r3, #0]
 8020e80:	2116      	movs	r1, #22
 8020e82:	187b      	adds	r3, r7, r1
 8020e84:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_USB_VID_SOP, 2, (uint8_t *)&value);
 8020e86:	187b      	adds	r3, r7, r1
 8020e88:	2230      	movs	r2, #48	; 0x30
 8020e8a:	18b8      	adds	r0, r7, r2
 8020e8c:	2202      	movs	r2, #2
 8020e8e:	2117      	movs	r1, #23
 8020e90:	f7fd f83e 	bl	801df10 <TLV_add>
      }
      if (0U != length)
 8020e94:	2344      	movs	r3, #68	; 0x44
 8020e96:	18fb      	adds	r3, r7, r3
 8020e98:	881b      	ldrh	r3, [r3, #0]
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	d000      	beq.n	8020ea0 <Send_DpmConfigGetCnf+0x4ac>
 8020e9e:	e065      	b.n	8020f6c <Send_DpmConfigGetCnf+0x578>
      {
        break;
      }
      case GUI_PARAM_PID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].PID;
 8020ea0:	230f      	movs	r3, #15
 8020ea2:	18fb      	adds	r3, r7, r3
 8020ea4:	781b      	ldrb	r3, [r3, #0]
 8020ea6:	4a41      	ldr	r2, [pc, #260]	; (8020fac <Send_DpmConfigGetCnf+0x5b8>)
 8020ea8:	00db      	lsls	r3, r3, #3
 8020eaa:	18d3      	adds	r3, r2, r3
 8020eac:	3306      	adds	r3, #6
 8020eae:	881a      	ldrh	r2, [r3, #0]
 8020eb0:	2114      	movs	r1, #20
 8020eb2:	187b      	adds	r3, r7, r1
 8020eb4:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PID_SOP, 2, (uint8_t *)&value);
 8020eb6:	187b      	adds	r3, r7, r1
 8020eb8:	2230      	movs	r2, #48	; 0x30
 8020eba:	18b8      	adds	r0, r7, r2
 8020ebc:	2202      	movs	r2, #2
 8020ebe:	2118      	movs	r1, #24
 8020ec0:	f7fd f826 	bl	801df10 <TLV_add>
      }
      if (0U != length)
 8020ec4:	2344      	movs	r3, #68	; 0x44
 8020ec6:	18fb      	adds	r3, r7, r3
 8020ec8:	881b      	ldrh	r3, [r3, #0]
 8020eca:	2b00      	cmp	r3, #0
 8020ecc:	d150      	bne.n	8020f70 <Send_DpmConfigGetCnf+0x57c>
        break;
      }
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = (uint8_t)GUI_USER_Params[PortNum].u.MeasurementReporting;
 8020ece:	230f      	movs	r3, #15
 8020ed0:	18fb      	adds	r3, r7, r3
 8020ed2:	781a      	ldrb	r2, [r3, #0]
 8020ed4:	4936      	ldr	r1, [pc, #216]	; (8020fb0 <Send_DpmConfigGetCnf+0x5bc>)
 8020ed6:	0013      	movs	r3, r2
 8020ed8:	005b      	lsls	r3, r3, #1
 8020eda:	189b      	adds	r3, r3, r2
 8020edc:	005b      	lsls	r3, r3, #1
 8020ede:	18cb      	adds	r3, r1, r3
 8020ee0:	3304      	adds	r3, #4
 8020ee2:	781a      	ldrb	r2, [r3, #0]
 8020ee4:	2113      	movs	r1, #19
 8020ee6:	187b      	adds	r3, r7, r1
 8020ee8:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_MEASUREREPORTING, 1, &settings);
 8020eea:	187b      	adds	r3, r7, r1
 8020eec:	2230      	movs	r2, #48	; 0x30
 8020eee:	18b8      	adds	r0, r7, r2
 8020ef0:	2201      	movs	r2, #1
 8020ef2:	211a      	movs	r1, #26
 8020ef4:	f7fd f80c 	bl	801df10 <TLV_add>
      }
      if (0U != length)
 8020ef8:	2344      	movs	r3, #68	; 0x44
 8020efa:	18fb      	adds	r3, r7, r3
 8020efc:	881b      	ldrh	r3, [r3, #0]
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d138      	bne.n	8020f74 <Send_DpmConfigGetCnf+0x580>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default:
        if (0U != length)
 8020f02:	2344      	movs	r3, #68	; 0x44
 8020f04:	18fb      	adds	r3, r7, r3
 8020f06:	881b      	ldrh	r3, [r3, #0]
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d035      	beq.n	8020f78 <Send_DpmConfigGetCnf+0x584>
        {
          /* At least 1 parameter does not exist */
          TLV_deinit_encode(&send_tlv);
 8020f0c:	2330      	movs	r3, #48	; 0x30
 8020f0e:	18fb      	adds	r3, r7, r3
 8020f10:	0018      	movs	r0, r3
 8020f12:	f7fd f95f 	bl	801e1d4 <TLV_deinit_encode>
          Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 8020f16:	6879      	ldr	r1, [r7, #4]
 8020f18:	230f      	movs	r3, #15
 8020f1a:	18fb      	adds	r3, r7, r3
 8020f1c:	781b      	ldrb	r3, [r3, #0]
 8020f1e:	2203      	movs	r2, #3
 8020f20:	0018      	movs	r0, r3
 8020f22:	f000 f847 	bl	8020fb4 <Send_DpmConfigGetRej>
          goto __end;
 8020f26:	e038      	b.n	8020f9a <Send_DpmConfigGetCnf+0x5a6>
          break;
 8020f28:	46c0      	nop			; (mov r8, r8)
 8020f2a:	e026      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f2c:	46c0      	nop			; (mov r8, r8)
 8020f2e:	e024      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f30:	46c0      	nop			; (mov r8, r8)
 8020f32:	e022      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f34:	46c0      	nop			; (mov r8, r8)
 8020f36:	e020      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f38:	46c0      	nop			; (mov r8, r8)
 8020f3a:	e01e      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f3c:	46c0      	nop			; (mov r8, r8)
 8020f3e:	e01c      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f40:	46c0      	nop			; (mov r8, r8)
 8020f42:	e01a      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f44:	46c0      	nop			; (mov r8, r8)
 8020f46:	e018      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f48:	46c0      	nop			; (mov r8, r8)
 8020f4a:	e016      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f4c:	46c0      	nop			; (mov r8, r8)
 8020f4e:	e014      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
          break;
 8020f50:	46c0      	nop			; (mov r8, r8)
 8020f52:	e012      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        break;
 8020f54:	46c0      	nop			; (mov r8, r8)
 8020f56:	e010      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        break;
 8020f58:	46c0      	nop			; (mov r8, r8)
 8020f5a:	e00e      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        break;
 8020f5c:	46c0      	nop			; (mov r8, r8)
 8020f5e:	e00c      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        break;
 8020f60:	46c0      	nop			; (mov r8, r8)
 8020f62:	e00a      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        break;
 8020f64:	46c0      	nop			; (mov r8, r8)
 8020f66:	e008      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        break;
 8020f68:	46c0      	nop			; (mov r8, r8)
 8020f6a:	e006      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        break;
 8020f6c:	46c0      	nop			; (mov r8, r8)
 8020f6e:	e004      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        break;
 8020f70:	46c0      	nop			; (mov r8, r8)
 8020f72:	e002      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        break;
 8020f74:	46c0      	nop			; (mov r8, r8)
 8020f76:	e000      	b.n	8020f7a <Send_DpmConfigGetCnf+0x586>
        }
        break;
 8020f78:	46c0      	nop			; (mov r8, r8)
    }
    index++;
 8020f7a:	2147      	movs	r1, #71	; 0x47
 8020f7c:	187b      	adds	r3, r7, r1
 8020f7e:	781a      	ldrb	r2, [r3, #0]
 8020f80:	187b      	adds	r3, r7, r1
 8020f82:	3201      	adds	r2, #1
 8020f84:	701a      	strb	r2, [r3, #0]
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while (index < length);
 8020f86:	187b      	adds	r3, r7, r1
 8020f88:	781b      	ldrb	r3, [r3, #0]
 8020f8a:	b29b      	uxth	r3, r3
 8020f8c:	2244      	movs	r2, #68	; 0x44
 8020f8e:	18ba      	adds	r2, r7, r2
 8020f90:	8812      	ldrh	r2, [r2, #0]
 8020f92:	429a      	cmp	r2, r3
 8020f94:	d900      	bls.n	8020f98 <Send_DpmConfigGetCnf+0x5a4>
 8020f96:	e554      	b.n	8020a42 <Send_DpmConfigGetCnf+0x4e>

__end:
 8020f98:	46c0      	nop			; (mov r8, r8)
  TLV_deinit_encode(&send_tlv);
 8020f9a:	2330      	movs	r3, #48	; 0x30
 8020f9c:	18fb      	adds	r3, r7, r3
 8020f9e:	0018      	movs	r0, r3
 8020fa0:	f7fd f918 	bl	801e1d4 <TLV_deinit_encode>
}
 8020fa4:	46c0      	nop			; (mov r8, r8)
 8020fa6:	46bd      	mov	sp, r7
 8020fa8:	b012      	add	sp, #72	; 0x48
 8020faa:	bd80      	pop	{r7, pc}
 8020fac:	200000f0 	.word	0x200000f0
 8020fb0:	20004934 	.word	0x20004934

08020fb4 <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8020fb4:	b590      	push	{r4, r7, lr}
 8020fb6:	b087      	sub	sp, #28
 8020fb8:	af00      	add	r7, sp, #0
 8020fba:	6039      	str	r1, [r7, #0]
 8020fbc:	0011      	movs	r1, r2
 8020fbe:	1dfb      	adds	r3, r7, #7
 8020fc0:	1c02      	adds	r2, r0, #0
 8020fc2:	701a      	strb	r2, [r3, #0]
 8020fc4:	1dbb      	adds	r3, r7, #6
 8020fc6:	1c0a      	adds	r2, r1, #0
 8020fc8:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8020fca:	683b      	ldr	r3, [r7, #0]
 8020fcc:	2280      	movs	r2, #128	; 0x80
 8020fce:	0052      	lsls	r2, r2, #1
 8020fd0:	240c      	movs	r4, #12
 8020fd2:	1938      	adds	r0, r7, r4
 8020fd4:	2108      	movs	r1, #8
 8020fd6:	f7fc ff38 	bl	801de4a <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8020fda:	1dbb      	adds	r3, r7, #6
 8020fdc:	7819      	ldrb	r1, [r3, #0]
 8020fde:	1938      	adds	r0, r7, r4
 8020fe0:	2300      	movs	r3, #0
 8020fe2:	2200      	movs	r2, #0
 8020fe4:	f7fc ff94 	bl	801df10 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8020fe8:	193b      	adds	r3, r7, r4
 8020fea:	0018      	movs	r0, r3
 8020fec:	f7fd f8f2 	bl	801e1d4 <TLV_deinit_encode>
}
 8020ff0:	46c0      	nop			; (mov r8, r8)
 8020ff2:	46bd      	mov	sp, r7
 8020ff4:	b007      	add	sp, #28
 8020ff6:	bd90      	pop	{r4, r7, pc}

08020ff8 <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8020ff8:	b590      	push	{r4, r7, lr}
 8020ffa:	b087      	sub	sp, #28
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6039      	str	r1, [r7, #0]
 8021000:	0011      	movs	r1, r2
 8021002:	1dfb      	adds	r3, r7, #7
 8021004:	1c02      	adds	r2, r0, #0
 8021006:	701a      	strb	r2, [r3, #0]
 8021008:	1dbb      	adds	r3, r7, #6
 802100a:	1c0a      	adds	r2, r1, #0
 802100c:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 802100e:	683b      	ldr	r3, [r7, #0]
 8021010:	2280      	movs	r2, #128	; 0x80
 8021012:	0052      	lsls	r2, r2, #1
 8021014:	240c      	movs	r4, #12
 8021016:	1938      	adds	r0, r7, r4
 8021018:	210b      	movs	r1, #11
 802101a:	f7fc ff16 	bl	801de4a <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 802101e:	1dbb      	adds	r3, r7, #6
 8021020:	7819      	ldrb	r1, [r3, #0]
 8021022:	1938      	adds	r0, r7, r4
 8021024:	2300      	movs	r3, #0
 8021026:	2200      	movs	r2, #0
 8021028:	f7fc ff72 	bl	801df10 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 802102c:	193b      	adds	r3, r7, r4
 802102e:	0018      	movs	r0, r3
 8021030:	f7fd f8d0 	bl	801e1d4 <TLV_deinit_encode>
}
 8021034:	46c0      	nop			; (mov r8, r8)
 8021036:	46bd      	mov	sp, r7
 8021038:	b007      	add	sp, #28
 802103a:	bd90      	pop	{r4, r7, pc}

0802103c <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 802103c:	b5b0      	push	{r4, r5, r7, lr}
 802103e:	b090      	sub	sp, #64	; 0x40
 8021040:	af00      	add	r7, sp, #0
 8021042:	6039      	str	r1, [r7, #0]
 8021044:	0011      	movs	r1, r2
 8021046:	1dfb      	adds	r3, r7, #7
 8021048:	1c02      	adds	r2, r0, #0
 802104a:	701a      	strb	r2, [r3, #0]
 802104c:	1dbb      	adds	r3, r7, #6
 802104e:	1c0a      	adds	r2, r1, #0
 8021050:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8021052:	1dfb      	adds	r3, r7, #7
 8021054:	781b      	ldrb	r3, [r3, #0]
 8021056:	3301      	adds	r3, #1
 8021058:	015b      	lsls	r3, r3, #5
 802105a:	b25b      	sxtb	r3, r3
 802105c:	220f      	movs	r2, #15
 802105e:	4313      	orrs	r3, r2
 8021060:	b25b      	sxtb	r3, r3
 8021062:	b2d9      	uxtb	r1, r3
 8021064:	683b      	ldr	r3, [r7, #0]
 8021066:	2280      	movs	r2, #128	; 0x80
 8021068:	0052      	lsls	r2, r2, #1
 802106a:	2030      	movs	r0, #48	; 0x30
 802106c:	1838      	adds	r0, r7, r0
 802106e:	f7fc feec 	bl	801de4a <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] =
 8021072:	2508      	movs	r5, #8
 8021074:	197b      	adds	r3, r7, r5
 8021076:	4a1e      	ldr	r2, [pc, #120]	; (80210f0 <Send_DpmRegisterReadCnf+0xb4>)
 8021078:	ca13      	ldmia	r2!, {r0, r1, r4}
 802107a:	c313      	stmia	r3!, {r0, r1, r4}
 802107c:	ca13      	ldmia	r2!, {r0, r1, r4}
 802107e:	c313      	stmia	r3!, {r0, r1, r4}
 8021080:	ca13      	ldmia	r2!, {r0, r1, r4}
 8021082:	c313      	stmia	r3!, {r0, r1, r4}
 8021084:	8811      	ldrh	r1, [r2, #0]
 8021086:	8019      	strh	r1, [r3, #0]
 8021088:	7892      	ldrb	r2, [r2, #2]
 802108a:	709a      	strb	r2, [r3, #2]
    (uint8_t)GUI_REG_TX_HEADER, (uint8_t)GUI_REG_TX_DATA, (uint8_t)GUI_REG_VBUS_VOLTAGE,
    (uint8_t)GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, (uint8_t)GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG,
    (uint8_t)GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 802108c:	233f      	movs	r3, #63	; 0x3f
 802108e:	18fb      	adds	r3, r7, r3
 8021090:	2200      	movs	r2, #0
 8021092:	701a      	strb	r2, [r3, #0]

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if (param != 0xFFU)
 8021094:	1dbb      	adds	r3, r7, #6
 8021096:	781b      	ldrb	r3, [r3, #0]
 8021098:	2bff      	cmp	r3, #255	; 0xff
 802109a:	d003      	beq.n	80210a4 <Send_DpmRegisterReadCnf+0x68>
  {
    *stateMachineArray = param;
 802109c:	197b      	adds	r3, r7, r5
 802109e:	1dba      	adds	r2, r7, #6
 80210a0:	7812      	ldrb	r2, [r2, #0]
 80210a2:	701a      	strb	r2, [r3, #0]
  }

  do
  {
    switch (stateMachineArray[counter])
 80210a4:	233f      	movs	r3, #63	; 0x3f
 80210a6:	18fb      	adds	r3, r7, r3
 80210a8:	781b      	ldrb	r3, [r3, #0]
 80210aa:	2208      	movs	r2, #8
 80210ac:	18ba      	adds	r2, r7, r2
 80210ae:	5cd3      	ldrb	r3, [r2, r3]
 80210b0:	2b80      	cmp	r3, #128	; 0x80
 80210b2:	d804      	bhi.n	80210be <Send_DpmRegisterReadCnf+0x82>
 80210b4:	009a      	lsls	r2, r3, #2
 80210b6:	4b0f      	ldr	r3, [pc, #60]	; (80210f4 <Send_DpmRegisterReadCnf+0xb8>)
 80210b8:	18d3      	adds	r3, r2, r3
 80210ba:	681b      	ldr	r3, [r3, #0]
 80210bc:	469f      	mov	pc, r3
        break;
      case GUI_REG_VENDOR_DATA :

        break;
      default :
        break;
 80210be:	46c0      	nop			; (mov r8, r8)
    }
    counter++;
 80210c0:	213f      	movs	r1, #63	; 0x3f
 80210c2:	187b      	adds	r3, r7, r1
 80210c4:	781a      	ldrb	r2, [r3, #0]
 80210c6:	187b      	adds	r3, r7, r1
 80210c8:	3201      	adds	r2, #1
 80210ca:	701a      	strb	r2, [r3, #0]
  } while ((counter < GUI_REG_NUMBER_OF_REGISTERS) && (param != 0xFFU));
 80210cc:	187b      	adds	r3, r7, r1
 80210ce:	781b      	ldrb	r3, [r3, #0]
 80210d0:	2b26      	cmp	r3, #38	; 0x26
 80210d2:	d803      	bhi.n	80210dc <Send_DpmRegisterReadCnf+0xa0>
 80210d4:	1dbb      	adds	r3, r7, #6
 80210d6:	781b      	ldrb	r3, [r3, #0]
 80210d8:	2bff      	cmp	r3, #255	; 0xff
 80210da:	d1e3      	bne.n	80210a4 <Send_DpmRegisterReadCnf+0x68>

  TLV_deinit_encode(&ToSendTLV);
 80210dc:	2330      	movs	r3, #48	; 0x30
 80210de:	18fb      	adds	r3, r7, r3
 80210e0:	0018      	movs	r0, r3
 80210e2:	f7fd f877 	bl	801e1d4 <TLV_deinit_encode>
}
 80210e6:	46c0      	nop			; (mov r8, r8)
 80210e8:	46bd      	mov	sp, r7
 80210ea:	b010      	add	sp, #64	; 0x40
 80210ec:	bdb0      	pop	{r4, r5, r7, pc}
 80210ee:	46c0      	nop			; (mov r8, r8)
 80210f0:	08023f8c 	.word	0x08023f8c
 80210f4:	080245f8 	.word	0x080245f8

080210f8 <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 80210f8:	b5b0      	push	{r4, r5, r7, lr}
 80210fa:	b08c      	sub	sp, #48	; 0x30
 80210fc:	af00      	add	r7, sp, #0
 80210fe:	60b9      	str	r1, [r7, #8]
 8021100:	607a      	str	r2, [r7, #4]
 8021102:	230f      	movs	r3, #15
 8021104:	18fb      	adds	r3, r7, r3
 8021106:	1c02      	adds	r2, r0, #0
 8021108:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t ToProcessTLV;
  (void)TLV_init_decode(&ToProcessTLV, toProcess);
 802110a:	687a      	ldr	r2, [r7, #4]
 802110c:	2428      	movs	r4, #40	; 0x28
 802110e:	193b      	adds	r3, r7, r4
 8021110:	0011      	movs	r1, r2
 8021112:	0018      	movs	r0, r3
 8021114:	f7fd f870 	bl	801e1f8 <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  (void)TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 8021118:	2320      	movs	r3, #32
 802111a:	18fb      	adds	r3, r7, r3
 802111c:	2224      	movs	r2, #36	; 0x24
 802111e:	18ba      	adds	r2, r7, r2
 8021120:	2527      	movs	r5, #39	; 0x27
 8021122:	1979      	adds	r1, r7, r5
 8021124:	1938      	adds	r0, r7, r4
 8021126:	f7fd f893 	bl	801e250 <TLV_get>

  switch (registerName)
 802112a:	197b      	adds	r3, r7, r5
 802112c:	781b      	ldrb	r3, [r3, #0]
 802112e:	2b80      	cmp	r3, #128	; 0x80
 8021130:	d804      	bhi.n	802113c <Send_DpmRegisterWriteCnf+0x44>
 8021132:	009a      	lsls	r2, r3, #2
 8021134:	4b10      	ldr	r3, [pc, #64]	; (8021178 <Send_DpmRegisterWriteCnf+0x80>)
 8021136:	18d3      	adds	r3, r2, r3
 8021138:	681b      	ldr	r3, [r3, #0]
 802113a:	469f      	mov	pc, r3
      break;
    case GUI_REG_VENDOR_DATA :

      break;
    default :
      break;
 802113c:	46c0      	nop			; (mov r8, r8)
  }
  TLV_deinit_decode(&ToProcessTLV);
 802113e:	2328      	movs	r3, #40	; 0x28
 8021140:	18fb      	adds	r3, r7, r3
 8021142:	0018      	movs	r0, r3
 8021144:	f7fd f8de 	bl	801e304 <TLV_deinit_decode>

  TLV_ToSend_Data_t ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 8021148:	230f      	movs	r3, #15
 802114a:	18fb      	adds	r3, r7, r3
 802114c:	781b      	ldrb	r3, [r3, #0]
 802114e:	3301      	adds	r3, #1
 8021150:	015b      	lsls	r3, r3, #5
 8021152:	b25b      	sxtb	r3, r3
 8021154:	2211      	movs	r2, #17
 8021156:	4313      	orrs	r3, r2
 8021158:	b25b      	sxtb	r3, r3
 802115a:	b2d9      	uxtb	r1, r3
 802115c:	68bb      	ldr	r3, [r7, #8]
 802115e:	2414      	movs	r4, #20
 8021160:	1938      	adds	r0, r7, r4
 8021162:	220c      	movs	r2, #12
 8021164:	f7fc fe71 	bl	801de4a <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 8021168:	193b      	adds	r3, r7, r4
 802116a:	0018      	movs	r0, r3
 802116c:	f7fd f832 	bl	801e1d4 <TLV_deinit_encode>
}
 8021170:	46c0      	nop			; (mov r8, r8)
 8021172:	46bd      	mov	sp, r7
 8021174:	b00c      	add	sp, #48	; 0x30
 8021176:	bdb0      	pop	{r4, r5, r7, pc}
 8021178:	080247fc 	.word	0x080247fc

0802117c <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 802117c:	b5b0      	push	{r4, r5, r7, lr}
 802117e:	b084      	sub	sp, #16
 8021180:	af00      	add	r7, sp, #0
 8021182:	6039      	str	r1, [r7, #0]
 8021184:	0011      	movs	r1, r2
 8021186:	1dfb      	adds	r3, r7, #7
 8021188:	1c02      	adds	r2, r0, #0
 802118a:	701a      	strb	r2, [r3, #0]
 802118c:	1d3b      	adds	r3, r7, #4
 802118e:	1c0a      	adds	r2, r1, #0
 8021190:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 8021192:	250f      	movs	r5, #15
 8021194:	197b      	adds	r3, r7, r5
 8021196:	2210      	movs	r2, #16
 8021198:	701a      	strb	r2, [r3, #0]

  if (NULL != pCB_FreeText)
 802119a:	4b0b      	ldr	r3, [pc, #44]	; (80211c8 <Manage_FreeText+0x4c>)
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d00b      	beq.n	80211ba <Manage_FreeText+0x3e>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 80211a2:	4b09      	ldr	r3, [pc, #36]	; (80211c8 <Manage_FreeText+0x4c>)
 80211a4:	681b      	ldr	r3, [r3, #0]
 80211a6:	1d3a      	adds	r2, r7, #4
 80211a8:	8814      	ldrh	r4, [r2, #0]
 80211aa:	6839      	ldr	r1, [r7, #0]
 80211ac:	1dfa      	adds	r2, r7, #7
 80211ae:	7810      	ldrb	r0, [r2, #0]
 80211b0:	0022      	movs	r2, r4
 80211b2:	4798      	blx	r3
    _status = USBPD_OK;
 80211b4:	197b      	adds	r3, r7, r5
 80211b6:	2200      	movs	r2, #0
 80211b8:	701a      	strb	r2, [r3, #0]
  }

  return _status;
 80211ba:	230f      	movs	r3, #15
 80211bc:	18fb      	adds	r3, r7, r3
 80211be:	781b      	ldrb	r3, [r3, #0]
}
 80211c0:	0018      	movs	r0, r3
 80211c2:	46bd      	mov	sp, r7
 80211c4:	b004      	add	sp, #16
 80211c6:	bdb0      	pop	{r4, r5, r7, pc}
 80211c8:	20004b58 	.word	0x20004b58

080211cc <UpdateSNKPowerPort0>:
/**
  * @brief  Function to update SNK PDO and power user settings on Port0
  * @retval None
  */
static void UpdateSNKPowerPort0(void)
{
 80211cc:	b580      	push	{r7, lr}
 80211ce:	b088      	sub	sp, #32
 80211d0:	af00      	add	r7, sp, #0
  USBPD_PDO_TypeDef pdo;
  uint32_t _max_power = 0;
 80211d2:	2300      	movs	r3, #0
 80211d4:	61fb      	str	r3, [r7, #28]
  uint16_t _voltage;
  uint16_t _current;
  uint16_t _power;
  uint16_t _min_voltage = 0xFFFF;
 80211d6:	231a      	movs	r3, #26
 80211d8:	18fb      	adds	r3, r7, r3
 80211da:	2201      	movs	r2, #1
 80211dc:	4252      	negs	r2, r2
 80211de:	801a      	strh	r2, [r3, #0]
  uint16_t _max_voltage = 0;
 80211e0:	2318      	movs	r3, #24
 80211e2:	18fb      	adds	r3, r7, r3
 80211e4:	2200      	movs	r2, #0
 80211e6:	801a      	strh	r2, [r3, #0]
  uint16_t _max_current = 0;
 80211e8:	2316      	movs	r3, #22
 80211ea:	18fb      	adds	r3, r7, r3
 80211ec:	2200      	movs	r2, #0
 80211ee:	801a      	strh	r2, [r3, #0]

  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 80211f0:	2300      	movs	r3, #0
 80211f2:	613b      	str	r3, [r7, #16]
 80211f4:	e0de      	b.n	80213b4 <UpdateSNKPowerPort0+0x1e8>
  {
    pdo.d32 = PORT0_PDO_ListSNK[_index];
 80211f6:	4b84      	ldr	r3, [pc, #528]	; (8021408 <UpdateSNKPowerPort0+0x23c>)
 80211f8:	693a      	ldr	r2, [r7, #16]
 80211fa:	0092      	lsls	r2, r2, #2
 80211fc:	58d3      	ldr	r3, [r2, r3]
 80211fe:	607b      	str	r3, [r7, #4]
    switch (pdo.GenericPDO.PowerObject)
 8021200:	1dfb      	adds	r3, r7, #7
 8021202:	781b      	ldrb	r3, [r3, #0]
 8021204:	061b      	lsls	r3, r3, #24
 8021206:	0f9b      	lsrs	r3, r3, #30
 8021208:	b2db      	uxtb	r3, r3
 802120a:	2b02      	cmp	r3, #2
 802120c:	d100      	bne.n	8021210 <UpdateSNKPowerPort0+0x44>
 802120e:	e082      	b.n	8021316 <UpdateSNKPowerPort0+0x14a>
 8021210:	dd00      	ble.n	8021214 <UpdateSNKPowerPort0+0x48>
 8021212:	e0c5      	b.n	80213a0 <UpdateSNKPowerPort0+0x1d4>
 8021214:	2b00      	cmp	r3, #0
 8021216:	d002      	beq.n	802121e <UpdateSNKPowerPort0+0x52>
 8021218:	2b01      	cmp	r3, #1
 802121a:	d03b      	beq.n	8021294 <UpdateSNKPowerPort0+0xc8>
        _current = GUI_DECODE_50MA(pdo.SRCSNKAPDO.MaxCurrentIn50mAunits);
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
        break;
#endif /*_USBPD_REV30_SUPPORT && PPS*/
      default:
        break;
 802121c:	e0c0      	b.n	80213a0 <UpdateSNKPowerPort0+0x1d4>
        _voltage = GUI_DECODE_50MV(pdo.SNKFixedPDO.VoltageIn50mVunits);
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	031b      	lsls	r3, r3, #12
 8021222:	0d9b      	lsrs	r3, r3, #22
 8021224:	b29b      	uxth	r3, r3
 8021226:	0019      	movs	r1, r3
 8021228:	200e      	movs	r0, #14
 802122a:	183b      	adds	r3, r7, r0
 802122c:	2232      	movs	r2, #50	; 0x32
 802122e:	434a      	muls	r2, r1
 8021230:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 8021232:	0001      	movs	r1, r0
 8021234:	187a      	adds	r2, r7, r1
 8021236:	201a      	movs	r0, #26
 8021238:	183b      	adds	r3, r7, r0
 802123a:	8812      	ldrh	r2, [r2, #0]
 802123c:	881b      	ldrh	r3, [r3, #0]
 802123e:	429a      	cmp	r2, r3
 8021240:	d203      	bcs.n	802124a <UpdateSNKPowerPort0+0x7e>
 8021242:	183b      	adds	r3, r7, r0
 8021244:	187a      	adds	r2, r7, r1
 8021246:	8812      	ldrh	r2, [r2, #0]
 8021248:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 802124a:	210e      	movs	r1, #14
 802124c:	187a      	adds	r2, r7, r1
 802124e:	2018      	movs	r0, #24
 8021250:	183b      	adds	r3, r7, r0
 8021252:	8812      	ldrh	r2, [r2, #0]
 8021254:	881b      	ldrh	r3, [r3, #0]
 8021256:	429a      	cmp	r2, r3
 8021258:	d903      	bls.n	8021262 <UpdateSNKPowerPort0+0x96>
 802125a:	183b      	adds	r3, r7, r0
 802125c:	187a      	adds	r2, r7, r1
 802125e:	8812      	ldrh	r2, [r2, #0]
 8021260:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKFixedPDO.OperationalCurrentIn10mAunits);
 8021262:	1d3b      	adds	r3, r7, #4
 8021264:	881b      	ldrh	r3, [r3, #0]
 8021266:	059b      	lsls	r3, r3, #22
 8021268:	0d9b      	lsrs	r3, r3, #22
 802126a:	b29b      	uxth	r3, r3
 802126c:	200c      	movs	r0, #12
 802126e:	183a      	adds	r2, r7, r0
 8021270:	1c19      	adds	r1, r3, #0
 8021272:	0089      	lsls	r1, r1, #2
 8021274:	18cb      	adds	r3, r1, r3
 8021276:	18db      	adds	r3, r3, r3
 8021278:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 802127a:	183a      	adds	r2, r7, r0
 802127c:	2116      	movs	r1, #22
 802127e:	187b      	adds	r3, r7, r1
 8021280:	8812      	ldrh	r2, [r2, #0]
 8021282:	881b      	ldrh	r3, [r3, #0]
 8021284:	429a      	cmp	r2, r3
 8021286:	d800      	bhi.n	802128a <UpdateSNKPowerPort0+0xbe>
 8021288:	e08c      	b.n	80213a4 <UpdateSNKPowerPort0+0x1d8>
 802128a:	187b      	adds	r3, r7, r1
 802128c:	183a      	adds	r2, r7, r0
 802128e:	8812      	ldrh	r2, [r2, #0]
 8021290:	801a      	strh	r2, [r3, #0]
        break;
 8021292:	e087      	b.n	80213a4 <UpdateSNKPowerPort0+0x1d8>
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MinVoltageIn50mVunits);
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	031b      	lsls	r3, r3, #12
 8021298:	0d9b      	lsrs	r3, r3, #22
 802129a:	b29b      	uxth	r3, r3
 802129c:	0019      	movs	r1, r3
 802129e:	200e      	movs	r0, #14
 80212a0:	183b      	adds	r3, r7, r0
 80212a2:	2232      	movs	r2, #50	; 0x32
 80212a4:	434a      	muls	r2, r1
 80212a6:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 80212a8:	0001      	movs	r1, r0
 80212aa:	187a      	adds	r2, r7, r1
 80212ac:	201a      	movs	r0, #26
 80212ae:	183b      	adds	r3, r7, r0
 80212b0:	8812      	ldrh	r2, [r2, #0]
 80212b2:	881b      	ldrh	r3, [r3, #0]
 80212b4:	429a      	cmp	r2, r3
 80212b6:	d203      	bcs.n	80212c0 <UpdateSNKPowerPort0+0xf4>
 80212b8:	183b      	adds	r3, r7, r0
 80212ba:	187a      	adds	r2, r7, r1
 80212bc:	8812      	ldrh	r2, [r2, #0]
 80212be:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MaxVoltageIn50mVunits);
 80212c0:	1dbb      	adds	r3, r7, #6
 80212c2:	881b      	ldrh	r3, [r3, #0]
 80212c4:	049b      	lsls	r3, r3, #18
 80212c6:	0d9b      	lsrs	r3, r3, #22
 80212c8:	b29b      	uxth	r3, r3
 80212ca:	0019      	movs	r1, r3
 80212cc:	200e      	movs	r0, #14
 80212ce:	183b      	adds	r3, r7, r0
 80212d0:	2232      	movs	r2, #50	; 0x32
 80212d2:	434a      	muls	r2, r1
 80212d4:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 80212d6:	0001      	movs	r1, r0
 80212d8:	187a      	adds	r2, r7, r1
 80212da:	2018      	movs	r0, #24
 80212dc:	183b      	adds	r3, r7, r0
 80212de:	8812      	ldrh	r2, [r2, #0]
 80212e0:	881b      	ldrh	r3, [r3, #0]
 80212e2:	429a      	cmp	r2, r3
 80212e4:	d903      	bls.n	80212ee <UpdateSNKPowerPort0+0x122>
 80212e6:	183b      	adds	r3, r7, r0
 80212e8:	187a      	adds	r2, r7, r1
 80212ea:	8812      	ldrh	r2, [r2, #0]
 80212ec:	801a      	strh	r2, [r3, #0]
        _power = GUI_DECODE_MW(pdo.SNKBatteryPDO.OperationalPowerIn250mWunits);
 80212ee:	1d3b      	adds	r3, r7, #4
 80212f0:	881b      	ldrh	r3, [r3, #0]
 80212f2:	059b      	lsls	r3, r3, #22
 80212f4:	0d9b      	lsrs	r3, r3, #22
 80212f6:	b29b      	uxth	r3, r3
 80212f8:	0019      	movs	r1, r3
 80212fa:	200a      	movs	r0, #10
 80212fc:	183b      	adds	r3, r7, r0
 80212fe:	22fa      	movs	r2, #250	; 0xfa
 8021300:	434a      	muls	r2, r1
 8021302:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_POWER_MAX(_power, _max_power);
 8021304:	183b      	adds	r3, r7, r0
 8021306:	881b      	ldrh	r3, [r3, #0]
 8021308:	69fa      	ldr	r2, [r7, #28]
 802130a:	429a      	cmp	r2, r3
 802130c:	d24c      	bcs.n	80213a8 <UpdateSNKPowerPort0+0x1dc>
 802130e:	183b      	adds	r3, r7, r0
 8021310:	881b      	ldrh	r3, [r3, #0]
 8021312:	61fb      	str	r3, [r7, #28]
        break;
 8021314:	e048      	b.n	80213a8 <UpdateSNKPowerPort0+0x1dc>
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MinVoltageIn50mVunits);
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	031b      	lsls	r3, r3, #12
 802131a:	0d9b      	lsrs	r3, r3, #22
 802131c:	b29b      	uxth	r3, r3
 802131e:	0019      	movs	r1, r3
 8021320:	200e      	movs	r0, #14
 8021322:	183b      	adds	r3, r7, r0
 8021324:	2232      	movs	r2, #50	; 0x32
 8021326:	434a      	muls	r2, r1
 8021328:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 802132a:	0001      	movs	r1, r0
 802132c:	187a      	adds	r2, r7, r1
 802132e:	201a      	movs	r0, #26
 8021330:	183b      	adds	r3, r7, r0
 8021332:	8812      	ldrh	r2, [r2, #0]
 8021334:	881b      	ldrh	r3, [r3, #0]
 8021336:	429a      	cmp	r2, r3
 8021338:	d203      	bcs.n	8021342 <UpdateSNKPowerPort0+0x176>
 802133a:	183b      	adds	r3, r7, r0
 802133c:	187a      	adds	r2, r7, r1
 802133e:	8812      	ldrh	r2, [r2, #0]
 8021340:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MaxVoltageIn50mVunits);
 8021342:	1dbb      	adds	r3, r7, #6
 8021344:	881b      	ldrh	r3, [r3, #0]
 8021346:	049b      	lsls	r3, r3, #18
 8021348:	0d9b      	lsrs	r3, r3, #22
 802134a:	b29b      	uxth	r3, r3
 802134c:	0019      	movs	r1, r3
 802134e:	200e      	movs	r0, #14
 8021350:	183b      	adds	r3, r7, r0
 8021352:	2232      	movs	r2, #50	; 0x32
 8021354:	434a      	muls	r2, r1
 8021356:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 8021358:	0001      	movs	r1, r0
 802135a:	187a      	adds	r2, r7, r1
 802135c:	2018      	movs	r0, #24
 802135e:	183b      	adds	r3, r7, r0
 8021360:	8812      	ldrh	r2, [r2, #0]
 8021362:	881b      	ldrh	r3, [r3, #0]
 8021364:	429a      	cmp	r2, r3
 8021366:	d903      	bls.n	8021370 <UpdateSNKPowerPort0+0x1a4>
 8021368:	183b      	adds	r3, r7, r0
 802136a:	187a      	adds	r2, r7, r1
 802136c:	8812      	ldrh	r2, [r2, #0]
 802136e:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKVariablePDO.OperationalCurrentIn10mAunits);
 8021370:	1d3b      	adds	r3, r7, #4
 8021372:	881b      	ldrh	r3, [r3, #0]
 8021374:	059b      	lsls	r3, r3, #22
 8021376:	0d9b      	lsrs	r3, r3, #22
 8021378:	b29b      	uxth	r3, r3
 802137a:	200c      	movs	r0, #12
 802137c:	183a      	adds	r2, r7, r0
 802137e:	1c19      	adds	r1, r3, #0
 8021380:	0089      	lsls	r1, r1, #2
 8021382:	18cb      	adds	r3, r1, r3
 8021384:	18db      	adds	r3, r3, r3
 8021386:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 8021388:	183a      	adds	r2, r7, r0
 802138a:	2116      	movs	r1, #22
 802138c:	187b      	adds	r3, r7, r1
 802138e:	8812      	ldrh	r2, [r2, #0]
 8021390:	881b      	ldrh	r3, [r3, #0]
 8021392:	429a      	cmp	r2, r3
 8021394:	d90a      	bls.n	80213ac <UpdateSNKPowerPort0+0x1e0>
 8021396:	187b      	adds	r3, r7, r1
 8021398:	183a      	adds	r2, r7, r0
 802139a:	8812      	ldrh	r2, [r2, #0]
 802139c:	801a      	strh	r2, [r3, #0]
        break;
 802139e:	e005      	b.n	80213ac <UpdateSNKPowerPort0+0x1e0>
        break;
 80213a0:	46c0      	nop			; (mov r8, r8)
 80213a2:	e004      	b.n	80213ae <UpdateSNKPowerPort0+0x1e2>
        break;
 80213a4:	46c0      	nop			; (mov r8, r8)
 80213a6:	e002      	b.n	80213ae <UpdateSNKPowerPort0+0x1e2>
        break;
 80213a8:	46c0      	nop			; (mov r8, r8)
 80213aa:	e000      	b.n	80213ae <UpdateSNKPowerPort0+0x1e2>
        break;
 80213ac:	46c0      	nop			; (mov r8, r8)
  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 80213ae:	693b      	ldr	r3, [r7, #16]
 80213b0:	3301      	adds	r3, #1
 80213b2:	613b      	str	r3, [r7, #16]
 80213b4:	4b15      	ldr	r3, [pc, #84]	; (802140c <UpdateSNKPowerPort0+0x240>)
 80213b6:	781b      	ldrb	r3, [r3, #0]
 80213b8:	001a      	movs	r2, r3
 80213ba:	693b      	ldr	r3, [r7, #16]
 80213bc:	4293      	cmp	r3, r2
 80213be:	d200      	bcs.n	80213c2 <UpdateSNKPowerPort0+0x1f6>
 80213c0:	e719      	b.n	80211f6 <UpdateSNKPowerPort0+0x2a>
    }
  }

  GUI_CHECK_VOLTAGE_MIN(_min_voltage,
 80213c2:	231a      	movs	r3, #26
 80213c4:	18fb      	adds	r3, r7, r3
 80213c6:	881a      	ldrh	r2, [r3, #0]
 80213c8:	4b11      	ldr	r3, [pc, #68]	; (8021410 <UpdateSNKPowerPort0+0x244>)
 80213ca:	611a      	str	r2, [r3, #16]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits);
  GUI_CHECK_VOLTAGE_MAX(_max_voltage,
 80213cc:	2118      	movs	r1, #24
 80213ce:	187b      	adds	r3, r7, r1
 80213d0:	881a      	ldrh	r2, [r3, #0]
 80213d2:	4b0f      	ldr	r3, [pc, #60]	; (8021410 <UpdateSNKPowerPort0+0x244>)
 80213d4:	60da      	str	r2, [r3, #12]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits);
  GUI_CHECK_CURRENT_MAX(_max_current,
 80213d6:	2016      	movs	r0, #22
 80213d8:	183b      	adds	r3, r7, r0
 80213da:	881a      	ldrh	r2, [r3, #0]
 80213dc:	4b0c      	ldr	r3, [pc, #48]	; (8021410 <UpdateSNKPowerPort0+0x244>)
 80213de:	605a      	str	r2, [r3, #4]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
  _max_power = ((uint32_t)(_max_voltage) * (uint32_t)(_max_current)) / 1000U;
 80213e0:	187b      	adds	r3, r7, r1
 80213e2:	881b      	ldrh	r3, [r3, #0]
 80213e4:	183a      	adds	r2, r7, r0
 80213e6:	8812      	ldrh	r2, [r2, #0]
 80213e8:	4353      	muls	r3, r2
 80213ea:	22fa      	movs	r2, #250	; 0xfa
 80213ec:	0091      	lsls	r1, r2, #2
 80213ee:	0018      	movs	r0, r3
 80213f0:	f7e4 fefe 	bl	80061f0 <__udivsi3>
 80213f4:	0003      	movs	r3, r0
 80213f6:	61fb      	str	r3, [r7, #28]
  GUI_CHECK_POWER_MAX(_max_power, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits);
 80213f8:	4b05      	ldr	r3, [pc, #20]	; (8021410 <UpdateSNKPowerPort0+0x244>)
 80213fa:	69fa      	ldr	r2, [r7, #28]
 80213fc:	619a      	str	r2, [r3, #24]
}
 80213fe:	46c0      	nop			; (mov r8, r8)
 8021400:	46bd      	mov	sp, r7
 8021402:	b008      	add	sp, #32
 8021404:	bd80      	pop	{r7, pc}
 8021406:	46c0      	nop			; (mov r8, r8)
 8021408:	20000170 	.word	0x20000170
 802140c:	2000016c 	.word	0x2000016c
 8021410:	200000f8 	.word	0x200000f8

08021414 <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 8021414:	b580      	push	{r7, lr}
 8021416:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef_t));
 8021418:	4a06      	ldr	r2, [pc, #24]	; (8021434 <TRACER_EMB_Init+0x20>)
 802141a:	4b07      	ldr	r3, [pc, #28]	; (8021438 <TRACER_EMB_Init+0x24>)
 802141c:	2100      	movs	r1, #0
 802141e:	0018      	movs	r0, r3
 8021420:	f001 f93e 	bl	80226a0 <memset>

  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 8021424:	f000 fe22 	bl	802206c <HW_TRACER_EMB_Init>

  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 8021428:	f000 f9d8 	bl	80217dc <TRACER_EMB_LowPowerInit>
}
 802142c:	46c0      	nop			; (mov r8, r8)
 802142e:	46bd      	mov	sp, r7
 8021430:	bd80      	pop	{r7, pc}
 8021432:	46c0      	nop			; (mov r8, r8)
 8021434:	0000041c 	.word	0x0000041c
 8021438:	20004bd8 	.word	0x20004bd8

0802143c <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 802143c:	b580      	push	{r7, lr}
 802143e:	b086      	sub	sp, #24
 8021440:	af00      	add	r7, sp, #0
 8021442:	6078      	str	r0, [r7, #4]
 8021444:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 802144a:	f000 f8d3 	bl	80215f4 <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 802144e:	683b      	ldr	r3, [r7, #0]
 8021450:	0018      	movs	r0, r3
 8021452:	f000 f969 	bl	8021728 <TRACER_EMB_AllocateBufer>
 8021456:	0003      	movs	r3, r0
 8021458:	617b      	str	r3, [r7, #20]

  /* if allocation is ok, write data into the buffer */
  if (_writepos != -1)
 802145a:	697b      	ldr	r3, [r7, #20]
 802145c:	3301      	adds	r3, #1
 802145e:	d023      	beq.n	80214a8 <TRACER_EMB_Add+0x6c>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0U; index < Size; index++)
 8021460:	2300      	movs	r3, #0
 8021462:	613b      	str	r3, [r7, #16]
 8021464:	e01c      	b.n	80214a0 <TRACER_EMB_Add+0x64>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 8021466:	68fa      	ldr	r2, [r7, #12]
 8021468:	693b      	ldr	r3, [r7, #16]
 802146a:	18d2      	adds	r2, r2, r3
 802146c:	697b      	ldr	r3, [r7, #20]
 802146e:	4912      	ldr	r1, [pc, #72]	; (80214b8 <TRACER_EMB_Add+0x7c>)
 8021470:	400b      	ands	r3, r1
 8021472:	d503      	bpl.n	802147c <TRACER_EMB_Add+0x40>
 8021474:	3b01      	subs	r3, #1
 8021476:	4911      	ldr	r1, [pc, #68]	; (80214bc <TRACER_EMB_Add+0x80>)
 8021478:	430b      	orrs	r3, r1
 802147a:	3301      	adds	r3, #1
 802147c:	0019      	movs	r1, r3
 802147e:	7812      	ldrb	r2, [r2, #0]
 8021480:	4b0f      	ldr	r3, [pc, #60]	; (80214c0 <TRACER_EMB_Add+0x84>)
 8021482:	185b      	adds	r3, r3, r1
 8021484:	76da      	strb	r2, [r3, #27]
 8021486:	697b      	ldr	r3, [r7, #20]
 8021488:	3301      	adds	r3, #1
 802148a:	4a0b      	ldr	r2, [pc, #44]	; (80214b8 <TRACER_EMB_Add+0x7c>)
 802148c:	4013      	ands	r3, r2
 802148e:	d503      	bpl.n	8021498 <TRACER_EMB_Add+0x5c>
 8021490:	3b01      	subs	r3, #1
 8021492:	4a0a      	ldr	r2, [pc, #40]	; (80214bc <TRACER_EMB_Add+0x80>)
 8021494:	4313      	orrs	r3, r2
 8021496:	3301      	adds	r3, #1
 8021498:	617b      	str	r3, [r7, #20]
    for (index = 0U; index < Size; index++)
 802149a:	693b      	ldr	r3, [r7, #16]
 802149c:	3301      	adds	r3, #1
 802149e:	613b      	str	r3, [r7, #16]
 80214a0:	693a      	ldr	r2, [r7, #16]
 80214a2:	683b      	ldr	r3, [r7, #0]
 80214a4:	429a      	cmp	r2, r3
 80214a6:	d3de      	bcc.n	8021466 <TRACER_EMB_Add+0x2a>
    }
  }
  TRACER_EMB_UnLock();
 80214a8:	f000 f8c2 	bl	8021630 <TRACER_EMB_UnLock>

  /* Tx processing */
  TRACER_EMB_SendData();
 80214ac:	f000 f8de 	bl	802166c <TRACER_EMB_SendData>
}
 80214b0:	46c0      	nop			; (mov r8, r8)
 80214b2:	46bd      	mov	sp, r7
 80214b4:	b006      	add	sp, #24
 80214b6:	bd80      	pop	{r7, pc}
 80214b8:	800003ff 	.word	0x800003ff
 80214bc:	fffffc00 	.word	0xfffffc00
 80214c0:	20004bd8 	.word	0x20004bd8

080214c4 <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 80214c4:	b580      	push	{r7, lr}
 80214c6:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 80214c8:	f000 febc 	bl	8022244 <HW_TRACER_EMB_IRQHandlerDMA>
}
 80214cc:	46c0      	nop			; (mov r8, r8)
 80214ce:	46bd      	mov	sp, r7
 80214d0:	bd80      	pop	{r7, pc}

080214d2 <TRACER_EMB_IRQHandlerUSART>:
#endif /* TRACER_EMB_DMA_MODE == 1 */

void TRACER_EMB_IRQHandlerUSART(void)
{
 80214d2:	b580      	push	{r7, lr}
 80214d4:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 80214d6:	f000 fecd 	bl	8022274 <HW_TRACER_EMB_IRQHandlerUSART>
}
 80214da:	46c0      	nop			; (mov r8, r8)
 80214dc:	46bd      	mov	sp, r7
 80214de:	bd80      	pop	{r7, pc}

080214e0 <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 80214e0:	b580      	push	{r7, lr}
 80214e2:	b082      	sub	sp, #8
 80214e4:	af00      	add	r7, sp, #0
 80214e6:	0002      	movs	r2, r0
 80214e8:	1dbb      	adds	r3, r7, #6
 80214ea:	801a      	strh	r2, [r3, #0]
 80214ec:	1d7b      	adds	r3, r7, #5
 80214ee:	1c0a      	adds	r2, r1, #0
 80214f0:	701a      	strb	r2, [r3, #0]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 80214f2:	1dbb      	adds	r3, r7, #6
 80214f4:	881b      	ldrh	r3, [r3, #0]
 80214f6:	059b      	lsls	r3, r3, #22
 80214f8:	0d9b      	lsrs	r3, r3, #22
 80214fa:	4a04      	ldr	r2, [pc, #16]	; (802150c <TRACER_EMB_WriteData+0x2c>)
 80214fc:	18d3      	adds	r3, r2, r3
 80214fe:	1d7a      	adds	r2, r7, #5
 8021500:	7812      	ldrb	r2, [r2, #0]
 8021502:	76da      	strb	r2, [r3, #27]
}
 8021504:	46c0      	nop			; (mov r8, r8)
 8021506:	46bd      	mov	sp, r7
 8021508:	b002      	add	sp, #8
 802150a:	bd80      	pop	{r7, pc}
 802150c:	20004bd8 	.word	0x20004bd8

08021510 <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 8021510:	b580      	push	{r7, lr}
 8021512:	b082      	sub	sp, #8
 8021514:	af00      	add	r7, sp, #0
 8021516:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	0018      	movs	r0, r3
 802151c:	f000 fe66 	bl	80221ec <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 8021520:	f000 fe76 	bl	8022210 <HW_TRACER_EMB_StartRX>
}
 8021524:	46c0      	nop			; (mov r8, r8)
 8021526:	46bd      	mov	sp, r7
 8021528:	b002      	add	sp, #8
 802152a:	bd80      	pop	{r7, pc}

0802152c <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 802152c:	b580      	push	{r7, lr}
 802152e:	b082      	sub	sp, #8
 8021530:	af00      	add	r7, sp, #0
 8021532:	6078      	str	r0, [r7, #4]
 8021534:	000a      	movs	r2, r1
 8021536:	1cfb      	adds	r3, r7, #3
 8021538:	701a      	strb	r2, [r3, #0]
  if (Size != 0U)
 802153a:	1cfb      	adds	r3, r7, #3
 802153c:	781b      	ldrb	r3, [r3, #0]
 802153e:	2b00      	cmp	r3, #0
 8021540:	d008      	beq.n	8021554 <TRACER_EMB_EnableOverFlow+0x28>
  {
    TracerContext.OverFlow_Data = Data;
 8021542:	4b07      	ldr	r3, [pc, #28]	; (8021560 <TRACER_EMB_EnableOverFlow+0x34>)
 8021544:	687a      	ldr	r2, [r7, #4]
 8021546:	615a      	str	r2, [r3, #20]
    TracerContext.OverFlow_Size = Size;
 8021548:	4b05      	ldr	r3, [pc, #20]	; (8021560 <TRACER_EMB_EnableOverFlow+0x34>)
 802154a:	1cfa      	adds	r2, r7, #3
 802154c:	7812      	ldrb	r2, [r2, #0]
 802154e:	761a      	strb	r2, [r3, #24]
    return 0;
 8021550:	2300      	movs	r3, #0
 8021552:	e001      	b.n	8021558 <TRACER_EMB_EnableOverFlow+0x2c>
  }
  return -1;
 8021554:	2301      	movs	r3, #1
 8021556:	425b      	negs	r3, r3
}
 8021558:	0018      	movs	r0, r3
 802155a:	46bd      	mov	sp, r7
 802155c:	b002      	add	sp, #8
 802155e:	bd80      	pop	{r7, pc}
 8021560:	20004bd8 	.word	0x20004bd8

08021564 <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 8021564:	b580      	push	{r7, lr}
 8021566:	b084      	sub	sp, #16
 8021568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802156a:	f3ef 8310 	mrs	r3, PRIMASK
 802156e:	60bb      	str	r3, [r7, #8]
  return(result);
 8021570:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 8021572:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8021574:	b672      	cpsid	i
}
 8021576:	46c0      	nop			; (mov r8, r8)
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 8021578:	4b1d      	ldr	r3, [pc, #116]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 802157a:	681a      	ldr	r2, [r3, #0]
 802157c:	4b1c      	ldr	r3, [pc, #112]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 802157e:	689b      	ldr	r3, [r3, #8]
 8021580:	18d3      	adds	r3, r2, r3
 8021582:	059b      	lsls	r3, r3, #22
 8021584:	0d9a      	lsrs	r2, r3, #22
 8021586:	4b1a      	ldr	r3, [pc, #104]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8021588:	601a      	str	r2, [r3, #0]

  if ((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 802158a:	4b19      	ldr	r3, [pc, #100]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 802158c:	695b      	ldr	r3, [r3, #20]
 802158e:	2b00      	cmp	r3, #0
 8021590:	d019      	beq.n	80215c6 <TRACER_EMB_CALLBACK_TX+0x62>
 8021592:	4b17      	ldr	r3, [pc, #92]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8021594:	7e9b      	ldrb	r3, [r3, #26]
 8021596:	2b01      	cmp	r3, #1
 8021598:	d115      	bne.n	80215c6 <TRACER_EMB_CALLBACK_TX+0x62>
      && (TracerContext.discontinue == 0U))
 802159a:	4b15      	ldr	r3, [pc, #84]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 802159c:	7e5b      	ldrb	r3, [r3, #25]
 802159e:	2b00      	cmp	r3, #0
 80215a0:	d111      	bne.n	80215c6 <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 80215a2:	4b13      	ldr	r3, [pc, #76]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80215a4:	2202      	movs	r2, #2
 80215a6:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData(TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 80215a8:	4b11      	ldr	r3, [pc, #68]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80215aa:	695a      	ldr	r2, [r3, #20]
 80215ac:	4b10      	ldr	r3, [pc, #64]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80215ae:	7e1b      	ldrb	r3, [r3, #24]
 80215b0:	0019      	movs	r1, r3
 80215b2:	0010      	movs	r0, r2
 80215b4:	f000 ff2c 	bl	8022410 <HW_TRACER_EMB_SendData>
 80215b8:	68fb      	ldr	r3, [r7, #12]
 80215ba:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	f383 8810 	msr	PRIMASK, r3
}
 80215c2:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
 80215c4:	e00f      	b.n	80215e6 <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 80215c6:	4b0a      	ldr	r3, [pc, #40]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80215c8:	68db      	ldr	r3, [r3, #12]
 80215ca:	1e5a      	subs	r2, r3, #1
 80215cc:	4b08      	ldr	r3, [pc, #32]	; (80215f0 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80215ce:	60da      	str	r2, [r3, #12]
 80215d0:	68fb      	ldr	r3, [r7, #12]
 80215d2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80215d4:	683b      	ldr	r3, [r7, #0]
 80215d6:	f383 8810 	msr	PRIMASK, r3
}
 80215da:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 80215dc:	f000 f828 	bl	8021630 <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 80215e0:	f000 f844 	bl	802166c <TRACER_EMB_SendData>
  }
}
 80215e4:	46c0      	nop			; (mov r8, r8)
 80215e6:	46c0      	nop			; (mov r8, r8)
 80215e8:	46bd      	mov	sp, r7
 80215ea:	b004      	add	sp, #16
 80215ec:	bd80      	pop	{r7, pc}
 80215ee:	46c0      	nop			; (mov r8, r8)
 80215f0:	20004bd8 	.word	0x20004bd8

080215f4 <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 80215f4:	b580      	push	{r7, lr}
 80215f6:	b084      	sub	sp, #16
 80215f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80215fa:	f3ef 8310 	mrs	r3, PRIMASK
 80215fe:	607b      	str	r3, [r7, #4]
  return(result);
 8021600:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 8021602:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8021604:	b672      	cpsid	i
}
 8021606:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter++;
 8021608:	4b08      	ldr	r3, [pc, #32]	; (802162c <TRACER_EMB_Lock+0x38>)
 802160a:	7c1b      	ldrb	r3, [r3, #16]
 802160c:	b2db      	uxtb	r3, r3
 802160e:	3301      	adds	r3, #1
 8021610:	b2da      	uxtb	r2, r3
 8021612:	4b06      	ldr	r3, [pc, #24]	; (802162c <TRACER_EMB_Lock+0x38>)
 8021614:	741a      	strb	r2, [r3, #16]
 8021616:	68fb      	ldr	r3, [r7, #12]
 8021618:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802161a:	68bb      	ldr	r3, [r7, #8]
 802161c:	f383 8810 	msr	PRIMASK, r3
}
 8021620:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 8021622:	46c0      	nop			; (mov r8, r8)
 8021624:	46bd      	mov	sp, r7
 8021626:	b004      	add	sp, #16
 8021628:	bd80      	pop	{r7, pc}
 802162a:	46c0      	nop			; (mov r8, r8)
 802162c:	20004bd8 	.word	0x20004bd8

08021630 <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 8021630:	b580      	push	{r7, lr}
 8021632:	b084      	sub	sp, #16
 8021634:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021636:	f3ef 8310 	mrs	r3, PRIMASK
 802163a:	607b      	str	r3, [r7, #4]
  return(result);
 802163c:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 802163e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8021640:	b672      	cpsid	i
}
 8021642:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter--;
 8021644:	4b08      	ldr	r3, [pc, #32]	; (8021668 <TRACER_EMB_UnLock+0x38>)
 8021646:	7c1b      	ldrb	r3, [r3, #16]
 8021648:	b2db      	uxtb	r3, r3
 802164a:	3b01      	subs	r3, #1
 802164c:	b2da      	uxtb	r2, r3
 802164e:	4b06      	ldr	r3, [pc, #24]	; (8021668 <TRACER_EMB_UnLock+0x38>)
 8021650:	741a      	strb	r2, [r3, #16]
 8021652:	68fb      	ldr	r3, [r7, #12]
 8021654:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021656:	68bb      	ldr	r3, [r7, #8]
 8021658:	f383 8810 	msr	PRIMASK, r3
}
 802165c:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 802165e:	46c0      	nop			; (mov r8, r8)
 8021660:	46bd      	mov	sp, r7
 8021662:	b004      	add	sp, #16
 8021664:	bd80      	pop	{r7, pc}
 8021666:	46c0      	nop			; (mov r8, r8)
 8021668:	20004bd8 	.word	0x20004bd8

0802166c <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 802166c:	b580      	push	{r7, lr}
 802166e:	b086      	sub	sp, #24
 8021670:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021672:	f3ef 8310 	mrs	r3, PRIMASK
 8021676:	60bb      	str	r3, [r7, #8]
  return(result);
 8021678:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;

  TRACER_ENTER_CRITICAL_SECTION();
 802167a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 802167c:	b672      	cpsid	i
}
 802167e:	46c0      	nop			; (mov r8, r8)

  if (0u == TracerContext.Counter)
 8021680:	4b28      	ldr	r3, [pc, #160]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 8021682:	7c1b      	ldrb	r3, [r3, #16]
 8021684:	b2db      	uxtb	r3, r3
 8021686:	2b00      	cmp	r3, #0
 8021688:	d134      	bne.n	80216f4 <TRACER_EMB_SendData+0x88>
  {
    _begin = TracerContext.PtrTx_Read;
 802168a:	4b26      	ldr	r3, [pc, #152]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 802168c:	681b      	ldr	r3, [r3, #0]
 802168e:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 8021690:	4b24      	ldr	r3, [pc, #144]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 8021692:	685b      	ldr	r3, [r3, #4]
 8021694:	60fb      	str	r3, [r7, #12]

    if (_begin != _end)
 8021696:	693a      	ldr	r2, [r7, #16]
 8021698:	68fb      	ldr	r3, [r7, #12]
 802169a:	429a      	cmp	r2, r3
 802169c:	d02a      	beq.n	80216f4 <TRACER_EMB_SendData+0x88>
    {
      TRACER_EMB_Lock();
 802169e:	f7ff ffa9 	bl	80215f4 <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 80216a2:	68fa      	ldr	r2, [r7, #12]
 80216a4:	693b      	ldr	r3, [r7, #16]
 80216a6:	429a      	cmp	r2, r3
 80216a8:	d908      	bls.n	80216bc <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 80216aa:	68fa      	ldr	r2, [r7, #12]
 80216ac:	693b      	ldr	r3, [r7, #16]
 80216ae:	1ad2      	subs	r2, r2, r3
 80216b0:	4b1c      	ldr	r3, [pc, #112]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 80216b2:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 0;
 80216b4:	4b1b      	ldr	r3, [pc, #108]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 80216b6:	2200      	movs	r2, #0
 80216b8:	765a      	strb	r2, [r3, #25]
 80216ba:	e008      	b.n	80216ce <TRACER_EMB_SendData+0x62>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 80216bc:	693b      	ldr	r3, [r7, #16]
 80216be:	2280      	movs	r2, #128	; 0x80
 80216c0:	00d2      	lsls	r2, r2, #3
 80216c2:	1ad2      	subs	r2, r2, r3
 80216c4:	4b17      	ldr	r3, [pc, #92]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 80216c6:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 1;
 80216c8:	4b16      	ldr	r3, [pc, #88]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 80216ca:	2201      	movs	r2, #1
 80216cc:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 80216ce:	f000 f88a 	bl	80217e6 <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 80216d2:	4b14      	ldr	r3, [pc, #80]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 80216d4:	68db      	ldr	r3, [r3, #12]
 80216d6:	1c5a      	adds	r2, r3, #1
 80216d8:	4b12      	ldr	r3, [pc, #72]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 80216da:	60da      	str	r2, [r3, #12]
      HW_TRACER_EMB_SendData((const uint8_t *)(&(TracerContext.PtrDataTx[_begin])), TracerContext.SizeSent);
 80216dc:	693b      	ldr	r3, [r7, #16]
 80216de:	3318      	adds	r3, #24
 80216e0:	001a      	movs	r2, r3
 80216e2:	4b10      	ldr	r3, [pc, #64]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 80216e4:	18d3      	adds	r3, r2, r3
 80216e6:	1cda      	adds	r2, r3, #3
 80216e8:	4b0e      	ldr	r3, [pc, #56]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 80216ea:	689b      	ldr	r3, [r3, #8]
 80216ec:	0019      	movs	r1, r3
 80216ee:	0010      	movs	r0, r2
 80216f0:	f000 fe8e 	bl	8022410 <HW_TRACER_EMB_SendData>
    }
  }

  /* Low power processing */
  switch (TracerContext.LowPower_Counter)
 80216f4:	4b0b      	ldr	r3, [pc, #44]	; (8021724 <TRACER_EMB_SendData+0xb8>)
 80216f6:	68db      	ldr	r3, [r3, #12]
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	d004      	beq.n	8021706 <TRACER_EMB_SendData+0x9a>
 80216fc:	2b01      	cmp	r3, #1
 80216fe:	d105      	bne.n	802170c <TRACER_EMB_SendData+0xa0>
  {
    case 1:
      TRACER_EMB_LowPowerSendData();
 8021700:	f000 f871 	bl	80217e6 <TRACER_EMB_LowPowerSendData>
      break;
 8021704:	e003      	b.n	802170e <TRACER_EMB_SendData+0xa2>
    case 0:
      TRACER_EMB_LowPowerSendDataComplete();
 8021706:	f000 f873 	bl	80217f0 <TRACER_EMB_LowPowerSendDataComplete>
      break;
 802170a:	e000      	b.n	802170e <TRACER_EMB_SendData+0xa2>
    default:
      break;
 802170c:	46c0      	nop			; (mov r8, r8)
 802170e:	697b      	ldr	r3, [r7, #20]
 8021710:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021712:	687b      	ldr	r3, [r7, #4]
 8021714:	f383 8810 	msr	PRIMASK, r3
}
 8021718:	46c0      	nop			; (mov r8, r8)
  }

  TRACER_LEAVE_CRITICAL_SECTION();
}
 802171a:	46c0      	nop			; (mov r8, r8)
 802171c:	46bd      	mov	sp, r7
 802171e:	b006      	add	sp, #24
 8021720:	bd80      	pop	{r7, pc}
 8021722:	46c0      	nop			; (mov r8, r8)
 8021724:	20004bd8 	.word	0x20004bd8

08021728 <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 8021728:	b580      	push	{r7, lr}
 802172a:	b088      	sub	sp, #32
 802172c:	af00      	add	r7, sp, #0
 802172e:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 8021730:	2301      	movs	r3, #1
 8021732:	425b      	negs	r3, r3
 8021734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021736:	f3ef 8310 	mrs	r3, PRIMASK
 802173a:	613b      	str	r3, [r7, #16]
  return(result);
 802173c:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 802173e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8021740:	b672      	cpsid	i
}
 8021742:	46c0      	nop			; (mov r8, r8)

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 8021744:	4b24      	ldr	r3, [pc, #144]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 8021746:	685a      	ldr	r2, [r3, #4]
 8021748:	4b23      	ldr	r3, [pc, #140]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 802174a:	681b      	ldr	r3, [r3, #0]
 802174c:	429a      	cmp	r2, r3
 802174e:	d103      	bne.n	8021758 <TRACER_EMB_AllocateBufer+0x30>
  {
    /* Need to add buffer full management */
    _freesize = TRACER_EMB_BUFFER_SIZE;
 8021750:	2380      	movs	r3, #128	; 0x80
 8021752:	00db      	lsls	r3, r3, #3
 8021754:	61fb      	str	r3, [r7, #28]
 8021756:	e016      	b.n	8021786 <TRACER_EMB_AllocateBufer+0x5e>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 8021758:	4b1f      	ldr	r3, [pc, #124]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 802175a:	685a      	ldr	r2, [r3, #4]
 802175c:	4b1e      	ldr	r3, [pc, #120]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 802175e:	681b      	ldr	r3, [r3, #0]
 8021760:	429a      	cmp	r2, r3
 8021762:	d90a      	bls.n	802177a <TRACER_EMB_AllocateBufer+0x52>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 8021764:	4b1c      	ldr	r3, [pc, #112]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 8021766:	681a      	ldr	r2, [r3, #0]
 8021768:	4b1b      	ldr	r3, [pc, #108]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 802176a:	685b      	ldr	r3, [r3, #4]
 802176c:	1ad3      	subs	r3, r2, r3
 802176e:	2280      	movs	r2, #128	; 0x80
 8021770:	00d2      	lsls	r2, r2, #3
 8021772:	4694      	mov	ip, r2
 8021774:	4463      	add	r3, ip
 8021776:	61fb      	str	r3, [r7, #28]
 8021778:	e005      	b.n	8021786 <TRACER_EMB_AllocateBufer+0x5e>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 802177a:	4b17      	ldr	r3, [pc, #92]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 802177c:	681a      	ldr	r2, [r3, #0]
 802177e:	4b16      	ldr	r3, [pc, #88]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 8021780:	685b      	ldr	r3, [r3, #4]
 8021782:	1ad3      	subs	r3, r2, r3
 8021784:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 8021786:	69fa      	ldr	r2, [r7, #28]
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	429a      	cmp	r2, r3
 802178c:	d912      	bls.n	80217b4 <TRACER_EMB_AllocateBufer+0x8c>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 802178e:	4b12      	ldr	r3, [pc, #72]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 8021790:	685b      	ldr	r3, [r3, #4]
 8021792:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 8021794:	4b10      	ldr	r3, [pc, #64]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 8021796:	685a      	ldr	r2, [r3, #4]
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	18d3      	adds	r3, r2, r3
 802179c:	059b      	lsls	r3, r3, #22
 802179e:	0d9a      	lsrs	r2, r3, #22
 80217a0:	4b0d      	ldr	r3, [pc, #52]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 80217a2:	605a      	str	r2, [r3, #4]
    if (TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 80217a4:	4b0c      	ldr	r3, [pc, #48]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 80217a6:	7e9b      	ldrb	r3, [r3, #26]
 80217a8:	2b02      	cmp	r3, #2
 80217aa:	d10a      	bne.n	80217c2 <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 80217ac:	4b0a      	ldr	r3, [pc, #40]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 80217ae:	2200      	movs	r2, #0
 80217b0:	769a      	strb	r2, [r3, #26]
 80217b2:	e006      	b.n	80217c2 <TRACER_EMB_AllocateBufer+0x9a>
    }
  }
  else
  {
    if (TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 80217b4:	4b08      	ldr	r3, [pc, #32]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 80217b6:	7e9b      	ldrb	r3, [r3, #26]
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	d102      	bne.n	80217c2 <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 80217bc:	4b06      	ldr	r3, [pc, #24]	; (80217d8 <TRACER_EMB_AllocateBufer+0xb0>)
 80217be:	2201      	movs	r2, #1
 80217c0:	769a      	strb	r2, [r3, #26]
 80217c2:	697b      	ldr	r3, [r7, #20]
 80217c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80217c6:	68fb      	ldr	r3, [r7, #12]
 80217c8:	f383 8810 	msr	PRIMASK, r3
}
 80217cc:	46c0      	nop			; (mov r8, r8)
    }
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 80217ce:	69bb      	ldr	r3, [r7, #24]
}
 80217d0:	0018      	movs	r0, r3
 80217d2:	46bd      	mov	sp, r7
 80217d4:	b008      	add	sp, #32
 80217d6:	bd80      	pop	{r7, pc}
 80217d8:	20004bd8 	.word	0x20004bd8

080217dc <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 80217dc:	b580      	push	{r7, lr}
 80217de:	af00      	add	r7, sp, #0
}
 80217e0:	46c0      	nop			; (mov r8, r8)
 80217e2:	46bd      	mov	sp, r7
 80217e4:	bd80      	pop	{r7, pc}

080217e6 <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 80217e6:	b580      	push	{r7, lr}
 80217e8:	af00      	add	r7, sp, #0
}
 80217ea:	46c0      	nop			; (mov r8, r8)
 80217ec:	46bd      	mov	sp, r7
 80217ee:	bd80      	pop	{r7, pc}

080217f0 <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 80217f0:	b580      	push	{r7, lr}
 80217f2:	af00      	add	r7, sp, #0
}
 80217f4:	46c0      	nop			; (mov r8, r8)
 80217f6:	46bd      	mov	sp, r7
 80217f8:	bd80      	pop	{r7, pc}
	...

080217fc <__NVIC_EnableIRQ>:
{
 80217fc:	b580      	push	{r7, lr}
 80217fe:	b082      	sub	sp, #8
 8021800:	af00      	add	r7, sp, #0
 8021802:	0002      	movs	r2, r0
 8021804:	1dfb      	adds	r3, r7, #7
 8021806:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8021808:	1dfb      	adds	r3, r7, #7
 802180a:	781b      	ldrb	r3, [r3, #0]
 802180c:	2b7f      	cmp	r3, #127	; 0x7f
 802180e:	d809      	bhi.n	8021824 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021810:	1dfb      	adds	r3, r7, #7
 8021812:	781b      	ldrb	r3, [r3, #0]
 8021814:	001a      	movs	r2, r3
 8021816:	231f      	movs	r3, #31
 8021818:	401a      	ands	r2, r3
 802181a:	4b04      	ldr	r3, [pc, #16]	; (802182c <__NVIC_EnableIRQ+0x30>)
 802181c:	2101      	movs	r1, #1
 802181e:	4091      	lsls	r1, r2
 8021820:	000a      	movs	r2, r1
 8021822:	601a      	str	r2, [r3, #0]
}
 8021824:	46c0      	nop			; (mov r8, r8)
 8021826:	46bd      	mov	sp, r7
 8021828:	b002      	add	sp, #8
 802182a:	bd80      	pop	{r7, pc}
 802182c:	e000e100 	.word	0xe000e100

08021830 <__NVIC_SetPriority>:
{
 8021830:	b590      	push	{r4, r7, lr}
 8021832:	b083      	sub	sp, #12
 8021834:	af00      	add	r7, sp, #0
 8021836:	0002      	movs	r2, r0
 8021838:	6039      	str	r1, [r7, #0]
 802183a:	1dfb      	adds	r3, r7, #7
 802183c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 802183e:	1dfb      	adds	r3, r7, #7
 8021840:	781b      	ldrb	r3, [r3, #0]
 8021842:	2b7f      	cmp	r3, #127	; 0x7f
 8021844:	d828      	bhi.n	8021898 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8021846:	4a2f      	ldr	r2, [pc, #188]	; (8021904 <__NVIC_SetPriority+0xd4>)
 8021848:	1dfb      	adds	r3, r7, #7
 802184a:	781b      	ldrb	r3, [r3, #0]
 802184c:	b25b      	sxtb	r3, r3
 802184e:	089b      	lsrs	r3, r3, #2
 8021850:	33c0      	adds	r3, #192	; 0xc0
 8021852:	009b      	lsls	r3, r3, #2
 8021854:	589b      	ldr	r3, [r3, r2]
 8021856:	1dfa      	adds	r2, r7, #7
 8021858:	7812      	ldrb	r2, [r2, #0]
 802185a:	0011      	movs	r1, r2
 802185c:	2203      	movs	r2, #3
 802185e:	400a      	ands	r2, r1
 8021860:	00d2      	lsls	r2, r2, #3
 8021862:	21ff      	movs	r1, #255	; 0xff
 8021864:	4091      	lsls	r1, r2
 8021866:	000a      	movs	r2, r1
 8021868:	43d2      	mvns	r2, r2
 802186a:	401a      	ands	r2, r3
 802186c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 802186e:	683b      	ldr	r3, [r7, #0]
 8021870:	019b      	lsls	r3, r3, #6
 8021872:	22ff      	movs	r2, #255	; 0xff
 8021874:	401a      	ands	r2, r3
 8021876:	1dfb      	adds	r3, r7, #7
 8021878:	781b      	ldrb	r3, [r3, #0]
 802187a:	0018      	movs	r0, r3
 802187c:	2303      	movs	r3, #3
 802187e:	4003      	ands	r3, r0
 8021880:	00db      	lsls	r3, r3, #3
 8021882:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8021884:	481f      	ldr	r0, [pc, #124]	; (8021904 <__NVIC_SetPriority+0xd4>)
 8021886:	1dfb      	adds	r3, r7, #7
 8021888:	781b      	ldrb	r3, [r3, #0]
 802188a:	b25b      	sxtb	r3, r3
 802188c:	089b      	lsrs	r3, r3, #2
 802188e:	430a      	orrs	r2, r1
 8021890:	33c0      	adds	r3, #192	; 0xc0
 8021892:	009b      	lsls	r3, r3, #2
 8021894:	501a      	str	r2, [r3, r0]
}
 8021896:	e031      	b.n	80218fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8021898:	4a1b      	ldr	r2, [pc, #108]	; (8021908 <__NVIC_SetPriority+0xd8>)
 802189a:	1dfb      	adds	r3, r7, #7
 802189c:	781b      	ldrb	r3, [r3, #0]
 802189e:	0019      	movs	r1, r3
 80218a0:	230f      	movs	r3, #15
 80218a2:	400b      	ands	r3, r1
 80218a4:	3b08      	subs	r3, #8
 80218a6:	089b      	lsrs	r3, r3, #2
 80218a8:	3306      	adds	r3, #6
 80218aa:	009b      	lsls	r3, r3, #2
 80218ac:	18d3      	adds	r3, r2, r3
 80218ae:	3304      	adds	r3, #4
 80218b0:	681b      	ldr	r3, [r3, #0]
 80218b2:	1dfa      	adds	r2, r7, #7
 80218b4:	7812      	ldrb	r2, [r2, #0]
 80218b6:	0011      	movs	r1, r2
 80218b8:	2203      	movs	r2, #3
 80218ba:	400a      	ands	r2, r1
 80218bc:	00d2      	lsls	r2, r2, #3
 80218be:	21ff      	movs	r1, #255	; 0xff
 80218c0:	4091      	lsls	r1, r2
 80218c2:	000a      	movs	r2, r1
 80218c4:	43d2      	mvns	r2, r2
 80218c6:	401a      	ands	r2, r3
 80218c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80218ca:	683b      	ldr	r3, [r7, #0]
 80218cc:	019b      	lsls	r3, r3, #6
 80218ce:	22ff      	movs	r2, #255	; 0xff
 80218d0:	401a      	ands	r2, r3
 80218d2:	1dfb      	adds	r3, r7, #7
 80218d4:	781b      	ldrb	r3, [r3, #0]
 80218d6:	0018      	movs	r0, r3
 80218d8:	2303      	movs	r3, #3
 80218da:	4003      	ands	r3, r0
 80218dc:	00db      	lsls	r3, r3, #3
 80218de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80218e0:	4809      	ldr	r0, [pc, #36]	; (8021908 <__NVIC_SetPriority+0xd8>)
 80218e2:	1dfb      	adds	r3, r7, #7
 80218e4:	781b      	ldrb	r3, [r3, #0]
 80218e6:	001c      	movs	r4, r3
 80218e8:	230f      	movs	r3, #15
 80218ea:	4023      	ands	r3, r4
 80218ec:	3b08      	subs	r3, #8
 80218ee:	089b      	lsrs	r3, r3, #2
 80218f0:	430a      	orrs	r2, r1
 80218f2:	3306      	adds	r3, #6
 80218f4:	009b      	lsls	r3, r3, #2
 80218f6:	18c3      	adds	r3, r0, r3
 80218f8:	3304      	adds	r3, #4
 80218fa:	601a      	str	r2, [r3, #0]
}
 80218fc:	46c0      	nop			; (mov r8, r8)
 80218fe:	46bd      	mov	sp, r7
 8021900:	b003      	add	sp, #12
 8021902:	bd90      	pop	{r4, r7, pc}
 8021904:	e000e100 	.word	0xe000e100
 8021908:	e000ed00 	.word	0xe000ed00

0802190c <LL_DMA_EnableChannel>:
{
 802190c:	b580      	push	{r7, lr}
 802190e:	b084      	sub	sp, #16
 8021910:	af00      	add	r7, sp, #0
 8021912:	6078      	str	r0, [r7, #4]
 8021914:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8021916:	687b      	ldr	r3, [r7, #4]
 8021918:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 802191a:	4a0b      	ldr	r2, [pc, #44]	; (8021948 <LL_DMA_EnableChannel+0x3c>)
 802191c:	683b      	ldr	r3, [r7, #0]
 802191e:	18d3      	adds	r3, r2, r3
 8021920:	781b      	ldrb	r3, [r3, #0]
 8021922:	001a      	movs	r2, r3
 8021924:	68fb      	ldr	r3, [r7, #12]
 8021926:	18d3      	adds	r3, r2, r3
 8021928:	681a      	ldr	r2, [r3, #0]
 802192a:	4907      	ldr	r1, [pc, #28]	; (8021948 <LL_DMA_EnableChannel+0x3c>)
 802192c:	683b      	ldr	r3, [r7, #0]
 802192e:	18cb      	adds	r3, r1, r3
 8021930:	781b      	ldrb	r3, [r3, #0]
 8021932:	0019      	movs	r1, r3
 8021934:	68fb      	ldr	r3, [r7, #12]
 8021936:	18cb      	adds	r3, r1, r3
 8021938:	2101      	movs	r1, #1
 802193a:	430a      	orrs	r2, r1
 802193c:	601a      	str	r2, [r3, #0]
}
 802193e:	46c0      	nop			; (mov r8, r8)
 8021940:	46bd      	mov	sp, r7
 8021942:	b004      	add	sp, #16
 8021944:	bd80      	pop	{r7, pc}
 8021946:	46c0      	nop			; (mov r8, r8)
 8021948:	08024a00 	.word	0x08024a00

0802194c <LL_DMA_DisableChannel>:
{
 802194c:	b580      	push	{r7, lr}
 802194e:	b084      	sub	sp, #16
 8021950:	af00      	add	r7, sp, #0
 8021952:	6078      	str	r0, [r7, #4]
 8021954:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 802195a:	4a0b      	ldr	r2, [pc, #44]	; (8021988 <LL_DMA_DisableChannel+0x3c>)
 802195c:	683b      	ldr	r3, [r7, #0]
 802195e:	18d3      	adds	r3, r2, r3
 8021960:	781b      	ldrb	r3, [r3, #0]
 8021962:	001a      	movs	r2, r3
 8021964:	68fb      	ldr	r3, [r7, #12]
 8021966:	18d3      	adds	r3, r2, r3
 8021968:	681a      	ldr	r2, [r3, #0]
 802196a:	4907      	ldr	r1, [pc, #28]	; (8021988 <LL_DMA_DisableChannel+0x3c>)
 802196c:	683b      	ldr	r3, [r7, #0]
 802196e:	18cb      	adds	r3, r1, r3
 8021970:	781b      	ldrb	r3, [r3, #0]
 8021972:	0019      	movs	r1, r3
 8021974:	68fb      	ldr	r3, [r7, #12]
 8021976:	18cb      	adds	r3, r1, r3
 8021978:	2101      	movs	r1, #1
 802197a:	438a      	bics	r2, r1
 802197c:	601a      	str	r2, [r3, #0]
}
 802197e:	46c0      	nop			; (mov r8, r8)
 8021980:	46bd      	mov	sp, r7
 8021982:	b004      	add	sp, #16
 8021984:	bd80      	pop	{r7, pc}
 8021986:	46c0      	nop			; (mov r8, r8)
 8021988:	08024a00 	.word	0x08024a00

0802198c <LL_DMA_ConfigTransfer>:
{
 802198c:	b580      	push	{r7, lr}
 802198e:	b086      	sub	sp, #24
 8021990:	af00      	add	r7, sp, #0
 8021992:	60f8      	str	r0, [r7, #12]
 8021994:	60b9      	str	r1, [r7, #8]
 8021996:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8021998:	68fb      	ldr	r3, [r7, #12]
 802199a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 802199c:	4a0c      	ldr	r2, [pc, #48]	; (80219d0 <LL_DMA_ConfigTransfer+0x44>)
 802199e:	68bb      	ldr	r3, [r7, #8]
 80219a0:	18d3      	adds	r3, r2, r3
 80219a2:	781b      	ldrb	r3, [r3, #0]
 80219a4:	001a      	movs	r2, r3
 80219a6:	697b      	ldr	r3, [r7, #20]
 80219a8:	18d3      	adds	r3, r2, r3
 80219aa:	681b      	ldr	r3, [r3, #0]
 80219ac:	4a09      	ldr	r2, [pc, #36]	; (80219d4 <LL_DMA_ConfigTransfer+0x48>)
 80219ae:	4013      	ands	r3, r2
 80219b0:	0019      	movs	r1, r3
 80219b2:	4a07      	ldr	r2, [pc, #28]	; (80219d0 <LL_DMA_ConfigTransfer+0x44>)
 80219b4:	68bb      	ldr	r3, [r7, #8]
 80219b6:	18d3      	adds	r3, r2, r3
 80219b8:	781b      	ldrb	r3, [r3, #0]
 80219ba:	001a      	movs	r2, r3
 80219bc:	697b      	ldr	r3, [r7, #20]
 80219be:	18d3      	adds	r3, r2, r3
 80219c0:	687a      	ldr	r2, [r7, #4]
 80219c2:	430a      	orrs	r2, r1
 80219c4:	601a      	str	r2, [r3, #0]
}
 80219c6:	46c0      	nop			; (mov r8, r8)
 80219c8:	46bd      	mov	sp, r7
 80219ca:	b006      	add	sp, #24
 80219cc:	bd80      	pop	{r7, pc}
 80219ce:	46c0      	nop			; (mov r8, r8)
 80219d0:	08024a00 	.word	0x08024a00
 80219d4:	ffff800f 	.word	0xffff800f

080219d8 <LL_DMA_GetDataTransferDirection>:
{
 80219d8:	b580      	push	{r7, lr}
 80219da:	b084      	sub	sp, #16
 80219dc:	af00      	add	r7, sp, #0
 80219de:	6078      	str	r0, [r7, #4]
 80219e0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80219e2:	687b      	ldr	r3, [r7, #4]
 80219e4:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80219e6:	4a07      	ldr	r2, [pc, #28]	; (8021a04 <LL_DMA_GetDataTransferDirection+0x2c>)
 80219e8:	683b      	ldr	r3, [r7, #0]
 80219ea:	18d3      	adds	r3, r2, r3
 80219ec:	781b      	ldrb	r3, [r3, #0]
 80219ee:	001a      	movs	r2, r3
 80219f0:	68fb      	ldr	r3, [r7, #12]
 80219f2:	18d3      	adds	r3, r2, r3
 80219f4:	681b      	ldr	r3, [r3, #0]
 80219f6:	4a04      	ldr	r2, [pc, #16]	; (8021a08 <LL_DMA_GetDataTransferDirection+0x30>)
 80219f8:	4013      	ands	r3, r2
}
 80219fa:	0018      	movs	r0, r3
 80219fc:	46bd      	mov	sp, r7
 80219fe:	b004      	add	sp, #16
 8021a00:	bd80      	pop	{r7, pc}
 8021a02:	46c0      	nop			; (mov r8, r8)
 8021a04:	08024a00 	.word	0x08024a00
 8021a08:	00004010 	.word	0x00004010

08021a0c <LL_DMA_SetDataLength>:
{
 8021a0c:	b580      	push	{r7, lr}
 8021a0e:	b086      	sub	sp, #24
 8021a10:	af00      	add	r7, sp, #0
 8021a12:	60f8      	str	r0, [r7, #12]
 8021a14:	60b9      	str	r1, [r7, #8]
 8021a16:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8021a18:	68fb      	ldr	r3, [r7, #12]
 8021a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8021a1c:	4a0b      	ldr	r2, [pc, #44]	; (8021a4c <LL_DMA_SetDataLength+0x40>)
 8021a1e:	68bb      	ldr	r3, [r7, #8]
 8021a20:	18d3      	adds	r3, r2, r3
 8021a22:	781b      	ldrb	r3, [r3, #0]
 8021a24:	001a      	movs	r2, r3
 8021a26:	697b      	ldr	r3, [r7, #20]
 8021a28:	18d3      	adds	r3, r2, r3
 8021a2a:	685b      	ldr	r3, [r3, #4]
 8021a2c:	0c1b      	lsrs	r3, r3, #16
 8021a2e:	0419      	lsls	r1, r3, #16
 8021a30:	4a06      	ldr	r2, [pc, #24]	; (8021a4c <LL_DMA_SetDataLength+0x40>)
 8021a32:	68bb      	ldr	r3, [r7, #8]
 8021a34:	18d3      	adds	r3, r2, r3
 8021a36:	781b      	ldrb	r3, [r3, #0]
 8021a38:	001a      	movs	r2, r3
 8021a3a:	697b      	ldr	r3, [r7, #20]
 8021a3c:	18d3      	adds	r3, r2, r3
 8021a3e:	687a      	ldr	r2, [r7, #4]
 8021a40:	430a      	orrs	r2, r1
 8021a42:	605a      	str	r2, [r3, #4]
}
 8021a44:	46c0      	nop			; (mov r8, r8)
 8021a46:	46bd      	mov	sp, r7
 8021a48:	b006      	add	sp, #24
 8021a4a:	bd80      	pop	{r7, pc}
 8021a4c:	08024a00 	.word	0x08024a00

08021a50 <LL_DMA_ConfigAddresses>:
{
 8021a50:	b580      	push	{r7, lr}
 8021a52:	b086      	sub	sp, #24
 8021a54:	af00      	add	r7, sp, #0
 8021a56:	60f8      	str	r0, [r7, #12]
 8021a58:	60b9      	str	r1, [r7, #8]
 8021a5a:	607a      	str	r2, [r7, #4]
 8021a5c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8021a5e:	68fb      	ldr	r3, [r7, #12]
 8021a60:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8021a62:	6a3b      	ldr	r3, [r7, #32]
 8021a64:	2b10      	cmp	r3, #16
 8021a66:	d112      	bne.n	8021a8e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8021a68:	4a14      	ldr	r2, [pc, #80]	; (8021abc <LL_DMA_ConfigAddresses+0x6c>)
 8021a6a:	68bb      	ldr	r3, [r7, #8]
 8021a6c:	18d3      	adds	r3, r2, r3
 8021a6e:	781b      	ldrb	r3, [r3, #0]
 8021a70:	001a      	movs	r2, r3
 8021a72:	697b      	ldr	r3, [r7, #20]
 8021a74:	18d3      	adds	r3, r2, r3
 8021a76:	687a      	ldr	r2, [r7, #4]
 8021a78:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8021a7a:	4a10      	ldr	r2, [pc, #64]	; (8021abc <LL_DMA_ConfigAddresses+0x6c>)
 8021a7c:	68bb      	ldr	r3, [r7, #8]
 8021a7e:	18d3      	adds	r3, r2, r3
 8021a80:	781b      	ldrb	r3, [r3, #0]
 8021a82:	001a      	movs	r2, r3
 8021a84:	697b      	ldr	r3, [r7, #20]
 8021a86:	18d3      	adds	r3, r2, r3
 8021a88:	683a      	ldr	r2, [r7, #0]
 8021a8a:	609a      	str	r2, [r3, #8]
}
 8021a8c:	e011      	b.n	8021ab2 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8021a8e:	4a0b      	ldr	r2, [pc, #44]	; (8021abc <LL_DMA_ConfigAddresses+0x6c>)
 8021a90:	68bb      	ldr	r3, [r7, #8]
 8021a92:	18d3      	adds	r3, r2, r3
 8021a94:	781b      	ldrb	r3, [r3, #0]
 8021a96:	001a      	movs	r2, r3
 8021a98:	697b      	ldr	r3, [r7, #20]
 8021a9a:	18d3      	adds	r3, r2, r3
 8021a9c:	687a      	ldr	r2, [r7, #4]
 8021a9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8021aa0:	4a06      	ldr	r2, [pc, #24]	; (8021abc <LL_DMA_ConfigAddresses+0x6c>)
 8021aa2:	68bb      	ldr	r3, [r7, #8]
 8021aa4:	18d3      	adds	r3, r2, r3
 8021aa6:	781b      	ldrb	r3, [r3, #0]
 8021aa8:	001a      	movs	r2, r3
 8021aaa:	697b      	ldr	r3, [r7, #20]
 8021aac:	18d3      	adds	r3, r2, r3
 8021aae:	683a      	ldr	r2, [r7, #0]
 8021ab0:	60da      	str	r2, [r3, #12]
}
 8021ab2:	46c0      	nop			; (mov r8, r8)
 8021ab4:	46bd      	mov	sp, r7
 8021ab6:	b006      	add	sp, #24
 8021ab8:	bd80      	pop	{r7, pc}
 8021aba:	46c0      	nop			; (mov r8, r8)
 8021abc:	08024a00 	.word	0x08024a00

08021ac0 <LL_DMA_SetPeriphRequest>:
{
 8021ac0:	b580      	push	{r7, lr}
 8021ac2:	b086      	sub	sp, #24
 8021ac4:	af00      	add	r7, sp, #0
 8021ac6:	60f8      	str	r0, [r7, #12]
 8021ac8:	60b9      	str	r1, [r7, #8]
 8021aca:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8021acc:	68fb      	ldr	r3, [r7, #12]
 8021ace:	0a9b      	lsrs	r3, r3, #10
 8021ad0:	4a0f      	ldr	r2, [pc, #60]	; (8021b10 <LL_DMA_SetPeriphRequest+0x50>)
 8021ad2:	405a      	eors	r2, r3
 8021ad4:	0013      	movs	r3, r2
 8021ad6:	00db      	lsls	r3, r3, #3
 8021ad8:	1a9b      	subs	r3, r3, r2
 8021ada:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8021adc:	68ba      	ldr	r2, [r7, #8]
 8021ade:	697b      	ldr	r3, [r7, #20]
 8021ae0:	18d3      	adds	r3, r2, r3
 8021ae2:	009b      	lsls	r3, r3, #2
 8021ae4:	4a0b      	ldr	r2, [pc, #44]	; (8021b14 <LL_DMA_SetPeriphRequest+0x54>)
 8021ae6:	4694      	mov	ip, r2
 8021ae8:	4463      	add	r3, ip
 8021aea:	681b      	ldr	r3, [r3, #0]
 8021aec:	227f      	movs	r2, #127	; 0x7f
 8021aee:	4393      	bics	r3, r2
 8021af0:	0019      	movs	r1, r3
 8021af2:	68ba      	ldr	r2, [r7, #8]
 8021af4:	697b      	ldr	r3, [r7, #20]
 8021af6:	18d3      	adds	r3, r2, r3
 8021af8:	009b      	lsls	r3, r3, #2
 8021afa:	4a06      	ldr	r2, [pc, #24]	; (8021b14 <LL_DMA_SetPeriphRequest+0x54>)
 8021afc:	4694      	mov	ip, r2
 8021afe:	4463      	add	r3, ip
 8021b00:	687a      	ldr	r2, [r7, #4]
 8021b02:	430a      	orrs	r2, r1
 8021b04:	601a      	str	r2, [r3, #0]
}
 8021b06:	46c0      	nop			; (mov r8, r8)
 8021b08:	46bd      	mov	sp, r7
 8021b0a:	b006      	add	sp, #24
 8021b0c:	bd80      	pop	{r7, pc}
 8021b0e:	46c0      	nop			; (mov r8, r8)
 8021b10:	00100080 	.word	0x00100080
 8021b14:	40020800 	.word	0x40020800

08021b18 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(const DMA_TypeDef *DMAx)
{
 8021b18:	b580      	push	{r7, lr}
 8021b1a:	b082      	sub	sp, #8
 8021b1c:	af00      	add	r7, sp, #0
 8021b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	681a      	ldr	r2, [r3, #0]
 8021b24:	2380      	movs	r3, #128	; 0x80
 8021b26:	009b      	lsls	r3, r3, #2
 8021b28:	401a      	ands	r2, r3
 8021b2a:	2380      	movs	r3, #128	; 0x80
 8021b2c:	009b      	lsls	r3, r3, #2
 8021b2e:	429a      	cmp	r2, r3
 8021b30:	d101      	bne.n	8021b36 <LL_DMA_IsActiveFlag_TC3+0x1e>
 8021b32:	2301      	movs	r3, #1
 8021b34:	e000      	b.n	8021b38 <LL_DMA_IsActiveFlag_TC3+0x20>
 8021b36:	2300      	movs	r3, #0
}
 8021b38:	0018      	movs	r0, r3
 8021b3a:	46bd      	mov	sp, r7
 8021b3c:	b002      	add	sp, #8
 8021b3e:	bd80      	pop	{r7, pc}

08021b40 <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b082      	sub	sp, #8
 8021b44:	af00      	add	r7, sp, #0
 8021b46:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	2280      	movs	r2, #128	; 0x80
 8021b4c:	0052      	lsls	r2, r2, #1
 8021b4e:	605a      	str	r2, [r3, #4]
}
 8021b50:	46c0      	nop			; (mov r8, r8)
 8021b52:	46bd      	mov	sp, r7
 8021b54:	b002      	add	sp, #8
 8021b56:	bd80      	pop	{r7, pc}

08021b58 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8021b58:	b580      	push	{r7, lr}
 8021b5a:	b084      	sub	sp, #16
 8021b5c:	af00      	add	r7, sp, #0
 8021b5e:	6078      	str	r0, [r7, #4]
 8021b60:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8021b62:	687b      	ldr	r3, [r7, #4]
 8021b64:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8021b66:	4a0b      	ldr	r2, [pc, #44]	; (8021b94 <LL_DMA_EnableIT_TC+0x3c>)
 8021b68:	683b      	ldr	r3, [r7, #0]
 8021b6a:	18d3      	adds	r3, r2, r3
 8021b6c:	781b      	ldrb	r3, [r3, #0]
 8021b6e:	001a      	movs	r2, r3
 8021b70:	68fb      	ldr	r3, [r7, #12]
 8021b72:	18d3      	adds	r3, r2, r3
 8021b74:	681a      	ldr	r2, [r3, #0]
 8021b76:	4907      	ldr	r1, [pc, #28]	; (8021b94 <LL_DMA_EnableIT_TC+0x3c>)
 8021b78:	683b      	ldr	r3, [r7, #0]
 8021b7a:	18cb      	adds	r3, r1, r3
 8021b7c:	781b      	ldrb	r3, [r3, #0]
 8021b7e:	0019      	movs	r1, r3
 8021b80:	68fb      	ldr	r3, [r7, #12]
 8021b82:	18cb      	adds	r3, r1, r3
 8021b84:	2102      	movs	r1, #2
 8021b86:	430a      	orrs	r2, r1
 8021b88:	601a      	str	r2, [r3, #0]
}
 8021b8a:	46c0      	nop			; (mov r8, r8)
 8021b8c:	46bd      	mov	sp, r7
 8021b8e:	b004      	add	sp, #16
 8021b90:	bd80      	pop	{r7, pc}
 8021b92:	46c0      	nop			; (mov r8, r8)
 8021b94:	08024a00 	.word	0x08024a00

08021b98 <LL_AHB1_GRP1_EnableClock>:
{
 8021b98:	b580      	push	{r7, lr}
 8021b9a:	b084      	sub	sp, #16
 8021b9c:	af00      	add	r7, sp, #0
 8021b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8021ba0:	4b07      	ldr	r3, [pc, #28]	; (8021bc0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8021ba2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8021ba4:	4b06      	ldr	r3, [pc, #24]	; (8021bc0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8021ba6:	687a      	ldr	r2, [r7, #4]
 8021ba8:	430a      	orrs	r2, r1
 8021baa:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8021bac:	4b04      	ldr	r3, [pc, #16]	; (8021bc0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8021bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021bb0:	687a      	ldr	r2, [r7, #4]
 8021bb2:	4013      	ands	r3, r2
 8021bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8021bb6:	68fb      	ldr	r3, [r7, #12]
}
 8021bb8:	46c0      	nop			; (mov r8, r8)
 8021bba:	46bd      	mov	sp, r7
 8021bbc:	b004      	add	sp, #16
 8021bbe:	bd80      	pop	{r7, pc}
 8021bc0:	40021000 	.word	0x40021000

08021bc4 <LL_APB1_GRP1_EnableClock>:
{
 8021bc4:	b580      	push	{r7, lr}
 8021bc6:	b084      	sub	sp, #16
 8021bc8:	af00      	add	r7, sp, #0
 8021bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8021bcc:	4b07      	ldr	r3, [pc, #28]	; (8021bec <LL_APB1_GRP1_EnableClock+0x28>)
 8021bce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8021bd0:	4b06      	ldr	r3, [pc, #24]	; (8021bec <LL_APB1_GRP1_EnableClock+0x28>)
 8021bd2:	687a      	ldr	r2, [r7, #4]
 8021bd4:	430a      	orrs	r2, r1
 8021bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8021bd8:	4b04      	ldr	r3, [pc, #16]	; (8021bec <LL_APB1_GRP1_EnableClock+0x28>)
 8021bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021bdc:	687a      	ldr	r2, [r7, #4]
 8021bde:	4013      	ands	r3, r2
 8021be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8021be2:	68fb      	ldr	r3, [r7, #12]
}
 8021be4:	46c0      	nop			; (mov r8, r8)
 8021be6:	46bd      	mov	sp, r7
 8021be8:	b004      	add	sp, #16
 8021bea:	bd80      	pop	{r7, pc}
 8021bec:	40021000 	.word	0x40021000

08021bf0 <LL_APB1_GRP1_DisableClock>:
{
 8021bf0:	b580      	push	{r7, lr}
 8021bf2:	b082      	sub	sp, #8
 8021bf4:	af00      	add	r7, sp, #0
 8021bf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 8021bf8:	4b05      	ldr	r3, [pc, #20]	; (8021c10 <LL_APB1_GRP1_DisableClock+0x20>)
 8021bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8021bfc:	687b      	ldr	r3, [r7, #4]
 8021bfe:	43d9      	mvns	r1, r3
 8021c00:	4b03      	ldr	r3, [pc, #12]	; (8021c10 <LL_APB1_GRP1_DisableClock+0x20>)
 8021c02:	400a      	ands	r2, r1
 8021c04:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8021c06:	46c0      	nop			; (mov r8, r8)
 8021c08:	46bd      	mov	sp, r7
 8021c0a:	b002      	add	sp, #8
 8021c0c:	bd80      	pop	{r7, pc}
 8021c0e:	46c0      	nop			; (mov r8, r8)
 8021c10:	40021000 	.word	0x40021000

08021c14 <LL_IOP_GRP1_EnableClock>:
{
 8021c14:	b580      	push	{r7, lr}
 8021c16:	b084      	sub	sp, #16
 8021c18:	af00      	add	r7, sp, #0
 8021c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8021c1c:	4b07      	ldr	r3, [pc, #28]	; (8021c3c <LL_IOP_GRP1_EnableClock+0x28>)
 8021c1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021c20:	4b06      	ldr	r3, [pc, #24]	; (8021c3c <LL_IOP_GRP1_EnableClock+0x28>)
 8021c22:	687a      	ldr	r2, [r7, #4]
 8021c24:	430a      	orrs	r2, r1
 8021c26:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8021c28:	4b04      	ldr	r3, [pc, #16]	; (8021c3c <LL_IOP_GRP1_EnableClock+0x28>)
 8021c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021c2c:	687a      	ldr	r2, [r7, #4]
 8021c2e:	4013      	ands	r3, r2
 8021c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8021c32:	68fb      	ldr	r3, [r7, #12]
}
 8021c34:	46c0      	nop			; (mov r8, r8)
 8021c36:	46bd      	mov	sp, r7
 8021c38:	b004      	add	sp, #16
 8021c3a:	bd80      	pop	{r7, pc}
 8021c3c:	40021000 	.word	0x40021000

08021c40 <LL_GPIO_SetPinMode>:
{
 8021c40:	b580      	push	{r7, lr}
 8021c42:	b084      	sub	sp, #16
 8021c44:	af00      	add	r7, sp, #0
 8021c46:	60f8      	str	r0, [r7, #12]
 8021c48:	60b9      	str	r1, [r7, #8]
 8021c4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8021c4c:	68fb      	ldr	r3, [r7, #12]
 8021c4e:	6819      	ldr	r1, [r3, #0]
 8021c50:	68bb      	ldr	r3, [r7, #8]
 8021c52:	435b      	muls	r3, r3
 8021c54:	001a      	movs	r2, r3
 8021c56:	0013      	movs	r3, r2
 8021c58:	005b      	lsls	r3, r3, #1
 8021c5a:	189b      	adds	r3, r3, r2
 8021c5c:	43db      	mvns	r3, r3
 8021c5e:	400b      	ands	r3, r1
 8021c60:	001a      	movs	r2, r3
 8021c62:	68bb      	ldr	r3, [r7, #8]
 8021c64:	435b      	muls	r3, r3
 8021c66:	6879      	ldr	r1, [r7, #4]
 8021c68:	434b      	muls	r3, r1
 8021c6a:	431a      	orrs	r2, r3
 8021c6c:	68fb      	ldr	r3, [r7, #12]
 8021c6e:	601a      	str	r2, [r3, #0]
}
 8021c70:	46c0      	nop			; (mov r8, r8)
 8021c72:	46bd      	mov	sp, r7
 8021c74:	b004      	add	sp, #16
 8021c76:	bd80      	pop	{r7, pc}

08021c78 <LL_GPIO_SetPinOutputType>:
{
 8021c78:	b580      	push	{r7, lr}
 8021c7a:	b084      	sub	sp, #16
 8021c7c:	af00      	add	r7, sp, #0
 8021c7e:	60f8      	str	r0, [r7, #12]
 8021c80:	60b9      	str	r1, [r7, #8]
 8021c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8021c84:	68fb      	ldr	r3, [r7, #12]
 8021c86:	685b      	ldr	r3, [r3, #4]
 8021c88:	68ba      	ldr	r2, [r7, #8]
 8021c8a:	43d2      	mvns	r2, r2
 8021c8c:	401a      	ands	r2, r3
 8021c8e:	68bb      	ldr	r3, [r7, #8]
 8021c90:	6879      	ldr	r1, [r7, #4]
 8021c92:	434b      	muls	r3, r1
 8021c94:	431a      	orrs	r2, r3
 8021c96:	68fb      	ldr	r3, [r7, #12]
 8021c98:	605a      	str	r2, [r3, #4]
}
 8021c9a:	46c0      	nop			; (mov r8, r8)
 8021c9c:	46bd      	mov	sp, r7
 8021c9e:	b004      	add	sp, #16
 8021ca0:	bd80      	pop	{r7, pc}

08021ca2 <LL_GPIO_SetPinSpeed>:
{
 8021ca2:	b580      	push	{r7, lr}
 8021ca4:	b084      	sub	sp, #16
 8021ca6:	af00      	add	r7, sp, #0
 8021ca8:	60f8      	str	r0, [r7, #12]
 8021caa:	60b9      	str	r1, [r7, #8]
 8021cac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8021cae:	68fb      	ldr	r3, [r7, #12]
 8021cb0:	6899      	ldr	r1, [r3, #8]
 8021cb2:	68bb      	ldr	r3, [r7, #8]
 8021cb4:	435b      	muls	r3, r3
 8021cb6:	001a      	movs	r2, r3
 8021cb8:	0013      	movs	r3, r2
 8021cba:	005b      	lsls	r3, r3, #1
 8021cbc:	189b      	adds	r3, r3, r2
 8021cbe:	43db      	mvns	r3, r3
 8021cc0:	400b      	ands	r3, r1
 8021cc2:	001a      	movs	r2, r3
 8021cc4:	68bb      	ldr	r3, [r7, #8]
 8021cc6:	435b      	muls	r3, r3
 8021cc8:	6879      	ldr	r1, [r7, #4]
 8021cca:	434b      	muls	r3, r1
 8021ccc:	431a      	orrs	r2, r3
 8021cce:	68fb      	ldr	r3, [r7, #12]
 8021cd0:	609a      	str	r2, [r3, #8]
}
 8021cd2:	46c0      	nop			; (mov r8, r8)
 8021cd4:	46bd      	mov	sp, r7
 8021cd6:	b004      	add	sp, #16
 8021cd8:	bd80      	pop	{r7, pc}

08021cda <LL_GPIO_SetPinPull>:
{
 8021cda:	b580      	push	{r7, lr}
 8021cdc:	b084      	sub	sp, #16
 8021cde:	af00      	add	r7, sp, #0
 8021ce0:	60f8      	str	r0, [r7, #12]
 8021ce2:	60b9      	str	r1, [r7, #8]
 8021ce4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8021ce6:	68fb      	ldr	r3, [r7, #12]
 8021ce8:	68d9      	ldr	r1, [r3, #12]
 8021cea:	68bb      	ldr	r3, [r7, #8]
 8021cec:	435b      	muls	r3, r3
 8021cee:	001a      	movs	r2, r3
 8021cf0:	0013      	movs	r3, r2
 8021cf2:	005b      	lsls	r3, r3, #1
 8021cf4:	189b      	adds	r3, r3, r2
 8021cf6:	43db      	mvns	r3, r3
 8021cf8:	400b      	ands	r3, r1
 8021cfa:	001a      	movs	r2, r3
 8021cfc:	68bb      	ldr	r3, [r7, #8]
 8021cfe:	435b      	muls	r3, r3
 8021d00:	6879      	ldr	r1, [r7, #4]
 8021d02:	434b      	muls	r3, r1
 8021d04:	431a      	orrs	r2, r3
 8021d06:	68fb      	ldr	r3, [r7, #12]
 8021d08:	60da      	str	r2, [r3, #12]
}
 8021d0a:	46c0      	nop			; (mov r8, r8)
 8021d0c:	46bd      	mov	sp, r7
 8021d0e:	b004      	add	sp, #16
 8021d10:	bd80      	pop	{r7, pc}

08021d12 <LL_GPIO_SetAFPin_0_7>:
{
 8021d12:	b580      	push	{r7, lr}
 8021d14:	b084      	sub	sp, #16
 8021d16:	af00      	add	r7, sp, #0
 8021d18:	60f8      	str	r0, [r7, #12]
 8021d1a:	60b9      	str	r1, [r7, #8]
 8021d1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8021d1e:	68fb      	ldr	r3, [r7, #12]
 8021d20:	6a19      	ldr	r1, [r3, #32]
 8021d22:	68bb      	ldr	r3, [r7, #8]
 8021d24:	435b      	muls	r3, r3
 8021d26:	68ba      	ldr	r2, [r7, #8]
 8021d28:	4353      	muls	r3, r2
 8021d2a:	68ba      	ldr	r2, [r7, #8]
 8021d2c:	435a      	muls	r2, r3
 8021d2e:	0013      	movs	r3, r2
 8021d30:	011b      	lsls	r3, r3, #4
 8021d32:	1a9b      	subs	r3, r3, r2
 8021d34:	43db      	mvns	r3, r3
 8021d36:	400b      	ands	r3, r1
 8021d38:	001a      	movs	r2, r3
 8021d3a:	68bb      	ldr	r3, [r7, #8]
 8021d3c:	435b      	muls	r3, r3
 8021d3e:	68b9      	ldr	r1, [r7, #8]
 8021d40:	434b      	muls	r3, r1
 8021d42:	68b9      	ldr	r1, [r7, #8]
 8021d44:	434b      	muls	r3, r1
 8021d46:	6879      	ldr	r1, [r7, #4]
 8021d48:	434b      	muls	r3, r1
 8021d4a:	431a      	orrs	r2, r3
 8021d4c:	68fb      	ldr	r3, [r7, #12]
 8021d4e:	621a      	str	r2, [r3, #32]
}
 8021d50:	46c0      	nop			; (mov r8, r8)
 8021d52:	46bd      	mov	sp, r7
 8021d54:	b004      	add	sp, #16
 8021d56:	bd80      	pop	{r7, pc}

08021d58 <LL_LPUART_Enable>:
{
 8021d58:	b580      	push	{r7, lr}
 8021d5a:	b082      	sub	sp, #8
 8021d5c:	af00      	add	r7, sp, #0
 8021d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8021d60:	687b      	ldr	r3, [r7, #4]
 8021d62:	681b      	ldr	r3, [r3, #0]
 8021d64:	2201      	movs	r2, #1
 8021d66:	431a      	orrs	r2, r3
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	601a      	str	r2, [r3, #0]
}
 8021d6c:	46c0      	nop			; (mov r8, r8)
 8021d6e:	46bd      	mov	sp, r7
 8021d70:	b002      	add	sp, #8
 8021d72:	bd80      	pop	{r7, pc}

08021d74 <LL_LPUART_Disable>:
{
 8021d74:	b580      	push	{r7, lr}
 8021d76:	b082      	sub	sp, #8
 8021d78:	af00      	add	r7, sp, #0
 8021d7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	681b      	ldr	r3, [r3, #0]
 8021d80:	2201      	movs	r2, #1
 8021d82:	4393      	bics	r3, r2
 8021d84:	001a      	movs	r2, r3
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	601a      	str	r2, [r3, #0]
}
 8021d8a:	46c0      	nop			; (mov r8, r8)
 8021d8c:	46bd      	mov	sp, r7
 8021d8e:	b002      	add	sp, #8
 8021d90:	bd80      	pop	{r7, pc}

08021d92 <LL_LPUART_EnableDirectionRx>:
{
 8021d92:	b580      	push	{r7, lr}
 8021d94:	b086      	sub	sp, #24
 8021d96:	af00      	add	r7, sp, #0
 8021d98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8021d9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8021da0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8021da2:	617b      	str	r3, [r7, #20]
 8021da4:	2301      	movs	r3, #1
 8021da6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021da8:	68fb      	ldr	r3, [r7, #12]
 8021daa:	f383 8810 	msr	PRIMASK, r3
}
 8021dae:	46c0      	nop			; (mov r8, r8)
 8021db0:	687b      	ldr	r3, [r7, #4]
 8021db2:	681b      	ldr	r3, [r3, #0]
 8021db4:	2204      	movs	r2, #4
 8021db6:	431a      	orrs	r2, r3
 8021db8:	687b      	ldr	r3, [r7, #4]
 8021dba:	601a      	str	r2, [r3, #0]
 8021dbc:	697b      	ldr	r3, [r7, #20]
 8021dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021dc0:	693b      	ldr	r3, [r7, #16]
 8021dc2:	f383 8810 	msr	PRIMASK, r3
}
 8021dc6:	46c0      	nop			; (mov r8, r8)
}
 8021dc8:	46c0      	nop			; (mov r8, r8)
 8021dca:	46bd      	mov	sp, r7
 8021dcc:	b006      	add	sp, #24
 8021dce:	bd80      	pop	{r7, pc}

08021dd0 <LL_LPUART_IsActiveFlag_TEACK>:
{
 8021dd0:	b580      	push	{r7, lr}
 8021dd2:	b082      	sub	sp, #8
 8021dd4:	af00      	add	r7, sp, #0
 8021dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	69da      	ldr	r2, [r3, #28]
 8021ddc:	2380      	movs	r3, #128	; 0x80
 8021dde:	039b      	lsls	r3, r3, #14
 8021de0:	401a      	ands	r2, r3
 8021de2:	2380      	movs	r3, #128	; 0x80
 8021de4:	039b      	lsls	r3, r3, #14
 8021de6:	429a      	cmp	r2, r3
 8021de8:	d101      	bne.n	8021dee <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8021dea:	2301      	movs	r3, #1
 8021dec:	e000      	b.n	8021df0 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8021dee:	2300      	movs	r3, #0
}
 8021df0:	0018      	movs	r0, r3
 8021df2:	46bd      	mov	sp, r7
 8021df4:	b002      	add	sp, #8
 8021df6:	bd80      	pop	{r7, pc}

08021df8 <LL_LPUART_ClearFlag_PE>:
{
 8021df8:	b580      	push	{r7, lr}
 8021dfa:	b082      	sub	sp, #8
 8021dfc:	af00      	add	r7, sp, #0
 8021dfe:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	2201      	movs	r2, #1
 8021e04:	621a      	str	r2, [r3, #32]
}
 8021e06:	46c0      	nop			; (mov r8, r8)
 8021e08:	46bd      	mov	sp, r7
 8021e0a:	b002      	add	sp, #8
 8021e0c:	bd80      	pop	{r7, pc}

08021e0e <LL_LPUART_ClearFlag_FE>:
{
 8021e0e:	b580      	push	{r7, lr}
 8021e10:	b082      	sub	sp, #8
 8021e12:	af00      	add	r7, sp, #0
 8021e14:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	2202      	movs	r2, #2
 8021e1a:	621a      	str	r2, [r3, #32]
}
 8021e1c:	46c0      	nop			; (mov r8, r8)
 8021e1e:	46bd      	mov	sp, r7
 8021e20:	b002      	add	sp, #8
 8021e22:	bd80      	pop	{r7, pc}

08021e24 <LL_LPUART_ClearFlag_NE>:
{
 8021e24:	b580      	push	{r7, lr}
 8021e26:	b082      	sub	sp, #8
 8021e28:	af00      	add	r7, sp, #0
 8021e2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	2204      	movs	r2, #4
 8021e30:	621a      	str	r2, [r3, #32]
}
 8021e32:	46c0      	nop			; (mov r8, r8)
 8021e34:	46bd      	mov	sp, r7
 8021e36:	b002      	add	sp, #8
 8021e38:	bd80      	pop	{r7, pc}

08021e3a <LL_LPUART_ClearFlag_ORE>:
{
 8021e3a:	b580      	push	{r7, lr}
 8021e3c:	b082      	sub	sp, #8
 8021e3e:	af00      	add	r7, sp, #0
 8021e40:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	2208      	movs	r2, #8
 8021e46:	621a      	str	r2, [r3, #32]
}
 8021e48:	46c0      	nop			; (mov r8, r8)
 8021e4a:	46bd      	mov	sp, r7
 8021e4c:	b002      	add	sp, #8
 8021e4e:	bd80      	pop	{r7, pc}

08021e50 <LL_LPUART_ClearFlag_TC>:
{
 8021e50:	b580      	push	{r7, lr}
 8021e52:	b082      	sub	sp, #8
 8021e54:	af00      	add	r7, sp, #0
 8021e56:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 8021e58:	687b      	ldr	r3, [r7, #4]
 8021e5a:	2240      	movs	r2, #64	; 0x40
 8021e5c:	621a      	str	r2, [r3, #32]
}
 8021e5e:	46c0      	nop			; (mov r8, r8)
 8021e60:	46bd      	mov	sp, r7
 8021e62:	b002      	add	sp, #8
 8021e64:	bd80      	pop	{r7, pc}

08021e66 <LL_LPUART_EnableIT_RXNE_RXFNE>:
{
 8021e66:	b580      	push	{r7, lr}
 8021e68:	b086      	sub	sp, #24
 8021e6a:	af00      	add	r7, sp, #0
 8021e6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8021e72:	60bb      	str	r3, [r7, #8]
  return(result);
 8021e74:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8021e76:	617b      	str	r3, [r7, #20]
 8021e78:	2301      	movs	r3, #1
 8021e7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021e7c:	68fb      	ldr	r3, [r7, #12]
 8021e7e:	f383 8810 	msr	PRIMASK, r3
}
 8021e82:	46c0      	nop			; (mov r8, r8)
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	2220      	movs	r2, #32
 8021e8a:	431a      	orrs	r2, r3
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	601a      	str	r2, [r3, #0]
 8021e90:	697b      	ldr	r3, [r7, #20]
 8021e92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021e94:	693b      	ldr	r3, [r7, #16]
 8021e96:	f383 8810 	msr	PRIMASK, r3
}
 8021e9a:	46c0      	nop			; (mov r8, r8)
}
 8021e9c:	46c0      	nop			; (mov r8, r8)
 8021e9e:	46bd      	mov	sp, r7
 8021ea0:	b006      	add	sp, #24
 8021ea2:	bd80      	pop	{r7, pc}

08021ea4 <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	b086      	sub	sp, #24
 8021ea8:	af00      	add	r7, sp, #0
 8021eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021eac:	f3ef 8310 	mrs	r3, PRIMASK
 8021eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8021eb2:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8021eb4:	617b      	str	r3, [r7, #20]
 8021eb6:	2301      	movs	r3, #1
 8021eb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021eba:	68fb      	ldr	r3, [r7, #12]
 8021ebc:	f383 8810 	msr	PRIMASK, r3
}
 8021ec0:	46c0      	nop			; (mov r8, r8)
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	681b      	ldr	r3, [r3, #0]
 8021ec6:	2240      	movs	r2, #64	; 0x40
 8021ec8:	431a      	orrs	r2, r3
 8021eca:	687b      	ldr	r3, [r7, #4]
 8021ecc:	601a      	str	r2, [r3, #0]
 8021ece:	697b      	ldr	r3, [r7, #20]
 8021ed0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021ed2:	693b      	ldr	r3, [r7, #16]
 8021ed4:	f383 8810 	msr	PRIMASK, r3
}
 8021ed8:	46c0      	nop			; (mov r8, r8)
}
 8021eda:	46c0      	nop			; (mov r8, r8)
 8021edc:	46bd      	mov	sp, r7
 8021ede:	b006      	add	sp, #24
 8021ee0:	bd80      	pop	{r7, pc}

08021ee2 <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 8021ee2:	b580      	push	{r7, lr}
 8021ee4:	b086      	sub	sp, #24
 8021ee6:	af00      	add	r7, sp, #0
 8021ee8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021eea:	f3ef 8310 	mrs	r3, PRIMASK
 8021eee:	60bb      	str	r3, [r7, #8]
  return(result);
 8021ef0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8021ef2:	617b      	str	r3, [r7, #20]
 8021ef4:	2301      	movs	r3, #1
 8021ef6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021ef8:	68fb      	ldr	r3, [r7, #12]
 8021efa:	f383 8810 	msr	PRIMASK, r3
}
 8021efe:	46c0      	nop			; (mov r8, r8)
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	689b      	ldr	r3, [r3, #8]
 8021f04:	2201      	movs	r2, #1
 8021f06:	431a      	orrs	r2, r3
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	609a      	str	r2, [r3, #8]
 8021f0c:	697b      	ldr	r3, [r7, #20]
 8021f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021f10:	693b      	ldr	r3, [r7, #16]
 8021f12:	f383 8810 	msr	PRIMASK, r3
}
 8021f16:	46c0      	nop			; (mov r8, r8)
}
 8021f18:	46c0      	nop			; (mov r8, r8)
 8021f1a:	46bd      	mov	sp, r7
 8021f1c:	b006      	add	sp, #24
 8021f1e:	bd80      	pop	{r7, pc}

08021f20 <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 8021f20:	b580      	push	{r7, lr}
 8021f22:	b086      	sub	sp, #24
 8021f24:	af00      	add	r7, sp, #0
 8021f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021f28:	f3ef 8310 	mrs	r3, PRIMASK
 8021f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8021f2e:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8021f30:	617b      	str	r3, [r7, #20]
 8021f32:	2301      	movs	r3, #1
 8021f34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021f36:	68fb      	ldr	r3, [r7, #12]
 8021f38:	f383 8810 	msr	PRIMASK, r3
}
 8021f3c:	46c0      	nop			; (mov r8, r8)
 8021f3e:	687b      	ldr	r3, [r7, #4]
 8021f40:	681b      	ldr	r3, [r3, #0]
 8021f42:	2240      	movs	r2, #64	; 0x40
 8021f44:	4393      	bics	r3, r2
 8021f46:	001a      	movs	r2, r3
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	601a      	str	r2, [r3, #0]
 8021f4c:	697b      	ldr	r3, [r7, #20]
 8021f4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021f50:	693b      	ldr	r3, [r7, #16]
 8021f52:	f383 8810 	msr	PRIMASK, r3
}
 8021f56:	46c0      	nop			; (mov r8, r8)
}
 8021f58:	46c0      	nop			; (mov r8, r8)
 8021f5a:	46bd      	mov	sp, r7
 8021f5c:	b006      	add	sp, #24
 8021f5e:	bd80      	pop	{r7, pc}

08021f60 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *LPUARTx)
{
 8021f60:	b580      	push	{r7, lr}
 8021f62:	b082      	sub	sp, #8
 8021f64:	af00      	add	r7, sp, #0
 8021f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	681b      	ldr	r3, [r3, #0]
 8021f6c:	2220      	movs	r2, #32
 8021f6e:	4013      	ands	r3, r2
 8021f70:	2b20      	cmp	r3, #32
 8021f72:	d101      	bne.n	8021f78 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 8021f74:	2301      	movs	r3, #1
 8021f76:	e000      	b.n	8021f7a <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8021f78:	2300      	movs	r3, #0
}
 8021f7a:	0018      	movs	r0, r3
 8021f7c:	46bd      	mov	sp, r7
 8021f7e:	b002      	add	sp, #8
 8021f80:	bd80      	pop	{r7, pc}

08021f82 <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(const USART_TypeDef *LPUARTx)
{
 8021f82:	b580      	push	{r7, lr}
 8021f84:	b082      	sub	sp, #8
 8021f86:	af00      	add	r7, sp, #0
 8021f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	681b      	ldr	r3, [r3, #0]
 8021f8e:	2240      	movs	r2, #64	; 0x40
 8021f90:	4013      	ands	r3, r2
 8021f92:	2b40      	cmp	r3, #64	; 0x40
 8021f94:	d101      	bne.n	8021f9a <LL_LPUART_IsEnabledIT_TC+0x18>
 8021f96:	2301      	movs	r3, #1
 8021f98:	e000      	b.n	8021f9c <LL_LPUART_IsEnabledIT_TC+0x1a>
 8021f9a:	2300      	movs	r3, #0
}
 8021f9c:	0018      	movs	r0, r3
 8021f9e:	46bd      	mov	sp, r7
 8021fa0:	b002      	add	sp, #8
 8021fa2:	bd80      	pop	{r7, pc}

08021fa4 <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(const USART_TypeDef *LPUARTx)
{
 8021fa4:	b580      	push	{r7, lr}
 8021fa6:	b082      	sub	sp, #8
 8021fa8:	af00      	add	r7, sp, #0
 8021faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	681a      	ldr	r2, [r3, #0]
 8021fb0:	2380      	movs	r3, #128	; 0x80
 8021fb2:	005b      	lsls	r3, r3, #1
 8021fb4:	401a      	ands	r2, r3
 8021fb6:	2380      	movs	r3, #128	; 0x80
 8021fb8:	005b      	lsls	r3, r3, #1
 8021fba:	429a      	cmp	r2, r3
 8021fbc:	d101      	bne.n	8021fc2 <LL_LPUART_IsEnabledIT_PE+0x1e>
 8021fbe:	2301      	movs	r3, #1
 8021fc0:	e000      	b.n	8021fc4 <LL_LPUART_IsEnabledIT_PE+0x20>
 8021fc2:	2300      	movs	r3, #0
}
 8021fc4:	0018      	movs	r0, r3
 8021fc6:	46bd      	mov	sp, r7
 8021fc8:	b002      	add	sp, #8
 8021fca:	bd80      	pop	{r7, pc}

08021fcc <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(const USART_TypeDef *LPUARTx)
{
 8021fcc:	b580      	push	{r7, lr}
 8021fce:	b082      	sub	sp, #8
 8021fd0:	af00      	add	r7, sp, #0
 8021fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8021fd4:	687b      	ldr	r3, [r7, #4]
 8021fd6:	689b      	ldr	r3, [r3, #8]
 8021fd8:	2201      	movs	r2, #1
 8021fda:	4013      	ands	r3, r2
 8021fdc:	2b01      	cmp	r3, #1
 8021fde:	d101      	bne.n	8021fe4 <LL_LPUART_IsEnabledIT_ERROR+0x18>
 8021fe0:	2301      	movs	r3, #1
 8021fe2:	e000      	b.n	8021fe6 <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 8021fe4:	2300      	movs	r3, #0
}
 8021fe6:	0018      	movs	r0, r3
 8021fe8:	46bd      	mov	sp, r7
 8021fea:	b002      	add	sp, #8
 8021fec:	bd80      	pop	{r7, pc}

08021fee <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 8021fee:	b580      	push	{r7, lr}
 8021ff0:	b086      	sub	sp, #24
 8021ff2:	af00      	add	r7, sp, #0
 8021ff4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8021ffa:	60bb      	str	r3, [r7, #8]
  return(result);
 8021ffc:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 8021ffe:	617b      	str	r3, [r7, #20]
 8022000:	2301      	movs	r3, #1
 8022002:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022004:	68fb      	ldr	r3, [r7, #12]
 8022006:	f383 8810 	msr	PRIMASK, r3
}
 802200a:	46c0      	nop			; (mov r8, r8)
 802200c:	687b      	ldr	r3, [r7, #4]
 802200e:	689b      	ldr	r3, [r3, #8]
 8022010:	2280      	movs	r2, #128	; 0x80
 8022012:	431a      	orrs	r2, r3
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	609a      	str	r2, [r3, #8]
 8022018:	697b      	ldr	r3, [r7, #20]
 802201a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802201c:	693b      	ldr	r3, [r7, #16]
 802201e:	f383 8810 	msr	PRIMASK, r3
}
 8022022:	46c0      	nop			; (mov r8, r8)
}
 8022024:	46c0      	nop			; (mov r8, r8)
 8022026:	46bd      	mov	sp, r7
 8022028:	b006      	add	sp, #24
 802202a:	bd80      	pop	{r7, pc}

0802202c <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 802202c:	b580      	push	{r7, lr}
 802202e:	b084      	sub	sp, #16
 8022030:	af00      	add	r7, sp, #0
 8022032:	6078      	str	r0, [r7, #4]
 8022034:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 8022036:	683b      	ldr	r3, [r7, #0]
 8022038:	2b00      	cmp	r3, #0
 802203a:	d103      	bne.n	8022044 <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	3328      	adds	r3, #40	; 0x28
 8022040:	60fb      	str	r3, [r7, #12]
 8022042:	e002      	b.n	802204a <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	3324      	adds	r3, #36	; 0x24
 8022048:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 802204a:	68fb      	ldr	r3, [r7, #12]
}
 802204c:	0018      	movs	r0, r3
 802204e:	46bd      	mov	sp, r7
 8022050:	b004      	add	sp, #16
 8022052:	bd80      	pop	{r7, pc}

08022054 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 8022054:	b580      	push	{r7, lr}
 8022056:	b082      	sub	sp, #8
 8022058:	af00      	add	r7, sp, #0
 802205a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 802205c:	687b      	ldr	r3, [r7, #4]
 802205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022060:	b2db      	uxtb	r3, r3
}
 8022062:	0018      	movs	r0, r3
 8022064:	46bd      	mov	sp, r7
 8022066:	b002      	add	sp, #8
 8022068:	bd80      	pop	{r7, pc}
	...

0802206c <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 802206c:	b580      	push	{r7, lr}
 802206e:	b088      	sub	sp, #32
 8022070:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 8022072:	2001      	movs	r0, #1
 8022074:	f7ff fdce 	bl	8021c14 <LL_IOP_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 8022078:	2001      	movs	r0, #1
 802207a:	f7ff fdcb 	bl	8021c14 <LL_IOP_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 802207e:	23a0      	movs	r3, #160	; 0xa0
 8022080:	05db      	lsls	r3, r3, #23
 8022082:	2206      	movs	r2, #6
 8022084:	2104      	movs	r1, #4
 8022086:	0018      	movs	r0, r3
 8022088:	f7ff fe43 	bl	8021d12 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 802208c:	23a0      	movs	r3, #160	; 0xa0
 802208e:	05db      	lsls	r3, r3, #23
 8022090:	2202      	movs	r2, #2
 8022092:	2104      	movs	r1, #4
 8022094:	0018      	movs	r0, r3
 8022096:	f7ff fdd3 	bl	8021c40 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 802209a:	23a0      	movs	r3, #160	; 0xa0
 802209c:	05db      	lsls	r3, r3, #23
 802209e:	2202      	movs	r2, #2
 80220a0:	2104      	movs	r1, #4
 80220a2:	0018      	movs	r0, r3
 80220a4:	f7ff fdfd 	bl	8021ca2 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 80220a8:	23a0      	movs	r3, #160	; 0xa0
 80220aa:	05db      	lsls	r3, r3, #23
 80220ac:	2200      	movs	r2, #0
 80220ae:	2104      	movs	r1, #4
 80220b0:	0018      	movs	r0, r3
 80220b2:	f7ff fde1 	bl	8021c78 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 80220b6:	23a0      	movs	r3, #160	; 0xa0
 80220b8:	05db      	lsls	r3, r3, #23
 80220ba:	2201      	movs	r2, #1
 80220bc:	2104      	movs	r1, #4
 80220be:	0018      	movs	r0, r3
 80220c0:	f7ff fe0b 	bl	8021cda <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 80220c4:	23a0      	movs	r3, #160	; 0xa0
 80220c6:	05db      	lsls	r3, r3, #23
 80220c8:	2206      	movs	r2, #6
 80220ca:	2108      	movs	r1, #8
 80220cc:	0018      	movs	r0, r3
 80220ce:	f7ff fe20 	bl	8021d12 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 80220d2:	23a0      	movs	r3, #160	; 0xa0
 80220d4:	05db      	lsls	r3, r3, #23
 80220d6:	2202      	movs	r2, #2
 80220d8:	2108      	movs	r1, #8
 80220da:	0018      	movs	r0, r3
 80220dc:	f7ff fdb0 	bl	8021c40 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 80220e0:	23a0      	movs	r3, #160	; 0xa0
 80220e2:	05db      	lsls	r3, r3, #23
 80220e4:	2202      	movs	r2, #2
 80220e6:	2108      	movs	r1, #8
 80220e8:	0018      	movs	r0, r3
 80220ea:	f7ff fdda 	bl	8021ca2 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 80220ee:	23a0      	movs	r3, #160	; 0xa0
 80220f0:	05db      	lsls	r3, r3, #23
 80220f2:	2200      	movs	r2, #0
 80220f4:	2108      	movs	r1, #8
 80220f6:	0018      	movs	r0, r3
 80220f8:	f7ff fdbe 	bl	8021c78 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 80220fc:	23a0      	movs	r3, #160	; 0xa0
 80220fe:	05db      	lsls	r3, r3, #23
 8022100:	2201      	movs	r2, #1
 8022102:	2108      	movs	r1, #8
 8022104:	0018      	movs	r0, r3
 8022106:	f7ff fde8 	bl	8021cda <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 802210a:	2380      	movs	r3, #128	; 0x80
 802210c:	035b      	lsls	r3, r3, #13
 802210e:	0018      	movs	r0, r3
 8022110:	f7ff fd58 	bl	8021bc4 <LL_APB1_GRP1_EnableClock>
  {
    /* Configure LPUART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 8022114:	4b31      	ldr	r3, [pc, #196]	; (80221dc <HW_TRACER_EMB_Init+0x170>)
 8022116:	0018      	movs	r0, r3
 8022118:	f7ff fe2c 	bl	8021d74 <LL_LPUART_Disable>
    /*  - Parity              : LL_LPUART_PARITY_NONE           */
    /*  - TransferDirection   : LL_LPUART_DIRECTION_TX          */
    /*  - HardwareFlowControl : LL_LPUART_HWCONTROL_NONE        */
    /*  - OverSampling        : LL_LPUART_OVERSAMPLING_16       */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_LPUART_PRESCALER_DIV1;
 802211c:	003b      	movs	r3, r7
 802211e:	2200      	movs	r2, #0
 8022120:	601a      	str	r2, [r3, #0]
#endif
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 8022122:	003b      	movs	r3, r7
 8022124:	22e1      	movs	r2, #225	; 0xe1
 8022126:	0312      	lsls	r2, r2, #12
 8022128:	605a      	str	r2, [r3, #4]
    lpuart_initstruct.DataWidth           = LL_LPUART_DATAWIDTH_8B;
 802212a:	003b      	movs	r3, r7
 802212c:	2200      	movs	r2, #0
 802212e:	609a      	str	r2, [r3, #8]
    lpuart_initstruct.StopBits            = LL_LPUART_STOPBITS_1;
 8022130:	003b      	movs	r3, r7
 8022132:	2200      	movs	r2, #0
 8022134:	60da      	str	r2, [r3, #12]
    lpuart_initstruct.Parity              = LL_LPUART_PARITY_NONE;
 8022136:	003b      	movs	r3, r7
 8022138:	2200      	movs	r2, #0
 802213a:	611a      	str	r2, [r3, #16]
    lpuart_initstruct.TransferDirection   = LL_LPUART_DIRECTION_TX;
 802213c:	003b      	movs	r3, r7
 802213e:	2208      	movs	r2, #8
 8022140:	615a      	str	r2, [r3, #20]
#if defined(USART_CR3_RTSE)
    lpuart_initstruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8022142:	003b      	movs	r3, r7
 8022144:	2200      	movs	r2, #0
 8022146:	619a      	str	r2, [r3, #24]
#endif

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 8022148:	003b      	movs	r3, r7
 802214a:	4a24      	ldr	r2, [pc, #144]	; (80221dc <HW_TRACER_EMB_Init+0x170>)
 802214c:	0019      	movs	r1, r3
 802214e:	0010      	movs	r0, r2
 8022150:	f7ed f9ea 	bl	800f528 <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 8022154:	4b21      	ldr	r3, [pc, #132]	; (80221dc <HW_TRACER_EMB_Init+0x170>)
 8022156:	0018      	movs	r0, r3
 8022158:	f7ff fdfe 	bl	8021d58 <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 802215c:	4b1f      	ldr	r3, [pc, #124]	; (80221dc <HW_TRACER_EMB_Init+0x170>)
 802215e:	0018      	movs	r0, r3
 8022160:	f7ff fe36 	bl	8021dd0 <LL_LPUART_IsActiveFlag_TEACK>
 8022164:	0003      	movs	r3, r0
 8022166:	61fb      	str	r3, [r7, #28]
    /* Polling USART initialisation */
    while (_temp1 == 0U)
 8022168:	e005      	b.n	8022176 <HW_TRACER_EMB_Init+0x10a>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 802216a:	4b1c      	ldr	r3, [pc, #112]	; (80221dc <HW_TRACER_EMB_Init+0x170>)
 802216c:	0018      	movs	r0, r3
 802216e:	f7ff fe2f 	bl	8021dd0 <LL_LPUART_IsActiveFlag_TEACK>
 8022172:	0003      	movs	r3, r0
 8022174:	61fb      	str	r3, [r7, #28]
    while (_temp1 == 0U)
 8022176:	69fb      	ldr	r3, [r7, #28]
 8022178:	2b00      	cmp	r3, #0
 802217a:	d0f6      	beq.n	802216a <HW_TRACER_EMB_Init+0xfe>
  }
#endif /* TRACER_EMB_IS_INSTANCE_LPUART_TYPE == 0UL */

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 802217c:	2001      	movs	r0, #1
 802217e:	f7ff fd0b 	bl	8021b98 <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 8022182:	4a17      	ldr	r2, [pc, #92]	; (80221e0 <HW_TRACER_EMB_Init+0x174>)
 8022184:	4b17      	ldr	r3, [pc, #92]	; (80221e4 <HW_TRACER_EMB_Init+0x178>)
 8022186:	2102      	movs	r1, #2
 8022188:	0018      	movs	r0, r3
 802218a:	f7ff fbff 	bl	802198c <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID) || defined(DMA_CSELR_C1S)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 802218e:	4b15      	ldr	r3, [pc, #84]	; (80221e4 <HW_TRACER_EMB_Init+0x178>)
 8022190:	220f      	movs	r2, #15
 8022192:	2102      	movs	r1, #2
 8022194:	0018      	movs	r0, r3
 8022196:	f7ff fc93 	bl	8021ac0 <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 802219a:	4b12      	ldr	r3, [pc, #72]	; (80221e4 <HW_TRACER_EMB_Init+0x178>)
 802219c:	2102      	movs	r1, #2
 802219e:	0018      	movs	r0, r3
 80221a0:	f7ff fcda 	bl	8021b58 <LL_DMA_EnableIT_TC>
#endif /* TRACER_EMB_DMA_MODE == 1*/

  /* Configure the interrupt for TX */
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
 80221a4:	2100      	movs	r1, #0
 80221a6:	200a      	movs	r0, #10
 80221a8:	f7ff fb42 	bl	8021830 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 80221ac:	200a      	movs	r0, #10
 80221ae:	f7ff fb25 	bl	80217fc <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#endif /* TRACER_EMB_TX_DMA_PRIORITY */
#endif /* TRACER_EMB_DMA_MODE == 1 */
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
 80221b2:	2103      	movs	r1, #3
 80221b4:	201d      	movs	r0, #29
 80221b6:	f7ff fb3b 	bl	8021830 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 80221ba:	201d      	movs	r0, #29
 80221bc:	f7ff fb1e 	bl	80217fc <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#endif /* TRACER_EMB_TX_IRQ_PRIORITY */

  /* Disable the UART */
  if (fptr_rx == NULL)
 80221c0:	4b09      	ldr	r3, [pc, #36]	; (80221e8 <HW_TRACER_EMB_Init+0x17c>)
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	2b00      	cmp	r3, #0
 80221c6:	d105      	bne.n	80221d4 <HW_TRACER_EMB_Init+0x168>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 80221c8:	2380      	movs	r3, #128	; 0x80
 80221ca:	035b      	lsls	r3, r3, #13
 80221cc:	0018      	movs	r0, r3
 80221ce:	f7ff fd0f 	bl	8021bf0 <LL_APB1_GRP1_DisableClock>
  }
  return;
 80221d2:	46c0      	nop			; (mov r8, r8)
 80221d4:	46c0      	nop			; (mov r8, r8)
}
 80221d6:	46bd      	mov	sp, r7
 80221d8:	b008      	add	sp, #32
 80221da:	bd80      	pop	{r7, pc}
 80221dc:	40008000 	.word	0x40008000
 80221e0:	00002090 	.word	0x00002090
 80221e4:	40020000 	.word	0x40020000
 80221e8:	20004ff4 	.word	0x20004ff4

080221ec <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 80221ec:	b580      	push	{r7, lr}
 80221ee:	b082      	sub	sp, #8
 80221f0:	af00      	add	r7, sp, #0
 80221f2:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 80221f4:	4b05      	ldr	r3, [pc, #20]	; (802220c <HW_TRACER_EMB_RegisterRxCallback+0x20>)
 80221f6:	687a      	ldr	r2, [r7, #4]
 80221f8:	601a      	str	r2, [r3, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 80221fa:	2380      	movs	r3, #128	; 0x80
 80221fc:	035b      	lsls	r3, r3, #13
 80221fe:	0018      	movs	r0, r3
 8022200:	f7ff fce0 	bl	8021bc4 <LL_APB1_GRP1_EnableClock>
}
 8022204:	46c0      	nop			; (mov r8, r8)
 8022206:	46bd      	mov	sp, r7
 8022208:	b002      	add	sp, #8
 802220a:	bd80      	pop	{r7, pc}
 802220c:	20004ff4 	.word	0x20004ff4

08022210 <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 8022210:	b580      	push	{r7, lr}
 8022212:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 8022214:	4b0a      	ldr	r3, [pc, #40]	; (8022240 <HW_TRACER_EMB_StartRX+0x30>)
 8022216:	0018      	movs	r0, r3
 8022218:	f7ff fe25 	bl	8021e66 <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 802221c:	4b08      	ldr	r3, [pc, #32]	; (8022240 <HW_TRACER_EMB_StartRX+0x30>)
 802221e:	0018      	movs	r0, r3
 8022220:	f7ff fe5f 	bl	8021ee2 <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 8022224:	4b06      	ldr	r3, [pc, #24]	; (8022240 <HW_TRACER_EMB_StartRX+0x30>)
 8022226:	0018      	movs	r0, r3
 8022228:	f7ff fdb3 	bl	8021d92 <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 802222c:	2103      	movs	r1, #3
 802222e:	201d      	movs	r0, #29
 8022230:	f7ff fafe 	bl	8021830 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 8022234:	201d      	movs	r0, #29
 8022236:	f7ff fae1 	bl	80217fc <__NVIC_EnableIRQ>
}
 802223a:	46c0      	nop			; (mov r8, r8)
 802223c:	46bd      	mov	sp, r7
 802223e:	bd80      	pop	{r7, pc}
 8022240:	40008000 	.word	0x40008000

08022244 <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 8022244:	b580      	push	{r7, lr}
 8022246:	af00      	add	r7, sp, #0
  if (TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE) == 1UL)
 8022248:	4b08      	ldr	r3, [pc, #32]	; (802226c <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 802224a:	0018      	movs	r0, r3
 802224c:	f7ff fc64 	bl	8021b18 <LL_DMA_IsActiveFlag_TC3>
 8022250:	0003      	movs	r3, r0
 8022252:	2b01      	cmp	r3, #1
 8022254:	d107      	bne.n	8022266 <HW_TRACER_EMB_IRQHandlerDMA+0x22>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 8022256:	4b06      	ldr	r3, [pc, #24]	; (8022270 <HW_TRACER_EMB_IRQHandlerDMA+0x2c>)
 8022258:	0018      	movs	r0, r3
 802225a:	f7ff fe23 	bl	8021ea4 <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 802225e:	4b03      	ldr	r3, [pc, #12]	; (802226c <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 8022260:	0018      	movs	r0, r3
 8022262:	f7ff fc6d 	bl	8021b40 <LL_DMA_ClearFlag_GI3>
  }
}
 8022266:	46c0      	nop			; (mov r8, r8)
 8022268:	46bd      	mov	sp, r7
 802226a:	bd80      	pop	{r7, pc}
 802226c:	40020000 	.word	0x40020000
 8022270:	40008000 	.word	0x40008000

08022274 <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 8022274:	b580      	push	{r7, lr}
 8022276:	b086      	sub	sp, #24
 8022278:	af00      	add	r7, sp, #0
  uint32_t _temp1;
  uint32_t  _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 802227a:	2317      	movs	r3, #23
 802227c:	18fb      	adds	r3, r7, r3
 802227e:	2200      	movs	r2, #0
 8022280:	701a      	strb	r2, [r3, #0]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 8022282:	4b60      	ldr	r3, [pc, #384]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8022284:	69db      	ldr	r3, [r3, #28]
 8022286:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 8022288:	4b5e      	ldr	r3, [pc, #376]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802228a:	0018      	movs	r0, r3
 802228c:	f7ff fe68 	bl	8021f60 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 8022290:	0003      	movs	r3, r0
 8022292:	60fb      	str	r3, [r7, #12]

  /* If Reception is ongoing */
  if (_temp1 == 1UL)
 8022294:	68fb      	ldr	r3, [r7, #12]
 8022296:	2b01      	cmp	r3, #1
 8022298:	d000      	beq.n	802229c <HW_TRACER_EMB_IRQHandlerUSART+0x28>
 802229a:	e087      	b.n	80223ac <HW_TRACER_EMB_IRQHandlerUSART+0x138>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 802229c:	693b      	ldr	r3, [r7, #16]
 802229e:	220f      	movs	r2, #15
 80222a0:	4013      	ands	r3, r2
 80222a2:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 80222a4:	693b      	ldr	r3, [r7, #16]
 80222a6:	2220      	movs	r2, #32
 80222a8:	4013      	ands	r3, r2
 80222aa:	d015      	beq.n	80222d8 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
        && (_errorflags == 0UL))
 80222ac:	68bb      	ldr	r3, [r7, #8]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d112      	bne.n	80222d8 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 80222b2:	4b54      	ldr	r3, [pc, #336]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80222b4:	0018      	movs	r0, r3
 80222b6:	f7ff fecd 	bl	8022054 <LL_LPUART_ReceiveData8>
 80222ba:	0003      	movs	r3, r0
 80222bc:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 80222be:	4b52      	ldr	r3, [pc, #328]	; (8022408 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80222c0:	681b      	ldr	r3, [r3, #0]
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	d100      	bne.n	80222c8 <HW_TRACER_EMB_IRQHandlerUSART+0x54>
 80222c6:	e097      	b.n	80223f8 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
      {
        fptr_rx(received_char, 0U);
 80222c8:	4b4f      	ldr	r3, [pc, #316]	; (8022408 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80222ca:	681b      	ldr	r3, [r3, #0]
 80222cc:	683a      	ldr	r2, [r7, #0]
 80222ce:	b2d2      	uxtb	r2, r2
 80222d0:	2100      	movs	r1, #0
 80222d2:	0010      	movs	r0, r2
 80222d4:	4798      	blx	r3
      }
      return;
 80222d6:	e08f      	b.n	80223f8 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
    }
    else if (_errorflags != 0UL)
 80222d8:	68bb      	ldr	r3, [r7, #8]
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d066      	beq.n	80223ac <HW_TRACER_EMB_IRQHandlerUSART+0x138>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 80222de:	693b      	ldr	r3, [r7, #16]
 80222e0:	2220      	movs	r2, #32
 80222e2:	4013      	ands	r3, r2
 80222e4:	d012      	beq.n	802230c <HW_TRACER_EMB_IRQHandlerUSART+0x98>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 80222e6:	4b47      	ldr	r3, [pc, #284]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80222e8:	0018      	movs	r0, r3
 80222ea:	f7ff feb3 	bl	8022054 <LL_LPUART_ReceiveData8>
 80222ee:	0003      	movs	r3, r0
 80222f0:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 80222f2:	4b45      	ldr	r3, [pc, #276]	; (8022408 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80222f4:	681b      	ldr	r3, [r3, #0]
 80222f6:	2b00      	cmp	r3, #0
 80222f8:	d100      	bne.n	80222fc <HW_TRACER_EMB_IRQHandlerUSART+0x88>
 80222fa:	e07f      	b.n	80223fc <HW_TRACER_EMB_IRQHandlerUSART+0x188>
        {
          fptr_rx(received_char, 0U);
 80222fc:	4b42      	ldr	r3, [pc, #264]	; (8022408 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80222fe:	681b      	ldr	r3, [r3, #0]
 8022300:	683a      	ldr	r2, [r7, #0]
 8022302:	b2d2      	uxtb	r2, r2
 8022304:	2100      	movs	r1, #0
 8022306:	0010      	movs	r0, r2
 8022308:	4798      	blx	r3
        }
        return;
 802230a:	e077      	b.n	80223fc <HW_TRACER_EMB_IRQHandlerUSART+0x188>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 802230c:	4b3d      	ldr	r3, [pc, #244]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802230e:	0018      	movs	r0, r3
 8022310:	f7ff fe48 	bl	8021fa4 <LL_LPUART_IsEnabledIT_PE>
 8022314:	0003      	movs	r3, r0
 8022316:	607b      	str	r3, [r7, #4]
      if ((_temp2 == 1U)
 8022318:	687b      	ldr	r3, [r7, #4]
 802231a:	2b01      	cmp	r3, #1
 802231c:	d10b      	bne.n	8022336 <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
          && (TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))))
 802231e:	68bb      	ldr	r3, [r7, #8]
 8022320:	2201      	movs	r2, #1
 8022322:	4013      	ands	r3, r2
 8022324:	d007      	beq.n	8022336 <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 8022326:	4b37      	ldr	r3, [pc, #220]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8022328:	0018      	movs	r0, r3
 802232a:	f7ff fd65 	bl	8021df8 <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 802232e:	2317      	movs	r3, #23
 8022330:	18fb      	adds	r3, r7, r3
 8022332:	2201      	movs	r2, #1
 8022334:	701a      	strb	r2, [r3, #0]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 8022336:	4b33      	ldr	r3, [pc, #204]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8022338:	0018      	movs	r0, r3
 802233a:	f7ff fe47 	bl	8021fcc <LL_LPUART_IsEnabledIT_ERROR>
 802233e:	0003      	movs	r3, r0
 8022340:	607b      	str	r3, [r7, #4]
      if (_temp2 == 1U)
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	2b01      	cmp	r3, #1
 8022346:	d123      	bne.n	8022390 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 8022348:	68bb      	ldr	r3, [r7, #8]
 802234a:	2202      	movs	r2, #2
 802234c:	4013      	ands	r3, r2
 802234e:	d007      	beq.n	8022360 <HW_TRACER_EMB_IRQHandlerUSART+0xec>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 8022350:	4b2c      	ldr	r3, [pc, #176]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8022352:	0018      	movs	r0, r3
 8022354:	f7ff fd5b 	bl	8021e0e <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 8022358:	2317      	movs	r3, #23
 802235a:	18fb      	adds	r3, r7, r3
 802235c:	2201      	movs	r2, #1
 802235e:	701a      	strb	r2, [r3, #0]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 8022360:	68bb      	ldr	r3, [r7, #8]
 8022362:	2208      	movs	r2, #8
 8022364:	4013      	ands	r3, r2
 8022366:	d007      	beq.n	8022378 <HW_TRACER_EMB_IRQHandlerUSART+0x104>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 8022368:	4b26      	ldr	r3, [pc, #152]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802236a:	0018      	movs	r0, r3
 802236c:	f7ff fd65 	bl	8021e3a <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 8022370:	2317      	movs	r3, #23
 8022372:	18fb      	adds	r3, r7, r3
 8022374:	2201      	movs	r2, #1
 8022376:	701a      	strb	r2, [r3, #0]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 8022378:	68bb      	ldr	r3, [r7, #8]
 802237a:	2204      	movs	r2, #4
 802237c:	4013      	ands	r3, r2
 802237e:	d007      	beq.n	8022390 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 8022380:	4b20      	ldr	r3, [pc, #128]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8022382:	0018      	movs	r0, r3
 8022384:	f7ff fd4e 	bl	8021e24 <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 8022388:	2317      	movs	r3, #23
 802238a:	18fb      	adds	r3, r7, r3
 802238c:	2201      	movs	r2, #1
 802238e:	701a      	strb	r2, [r3, #0]
        }
      }

      if ((_error == 1U) && (fptr_rx != NULL))
 8022390:	2317      	movs	r3, #23
 8022392:	18fb      	adds	r3, r7, r3
 8022394:	781b      	ldrb	r3, [r3, #0]
 8022396:	2b01      	cmp	r3, #1
 8022398:	d108      	bne.n	80223ac <HW_TRACER_EMB_IRQHandlerUSART+0x138>
 802239a:	4b1b      	ldr	r3, [pc, #108]	; (8022408 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 802239c:	681b      	ldr	r3, [r3, #0]
 802239e:	2b00      	cmp	r3, #0
 80223a0:	d004      	beq.n	80223ac <HW_TRACER_EMB_IRQHandlerUSART+0x138>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 80223a2:	4b19      	ldr	r3, [pc, #100]	; (8022408 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80223a4:	681b      	ldr	r3, [r3, #0]
 80223a6:	2101      	movs	r1, #1
 80223a8:	2001      	movs	r0, #1
 80223aa:	4798      	blx	r3
  }
#endif /* TRACER_EMB_IT_MODE == 1 */

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 80223ac:	4b15      	ldr	r3, [pc, #84]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80223ae:	0018      	movs	r0, r3
 80223b0:	f7ff fde7 	bl	8021f82 <LL_LPUART_IsEnabledIT_TC>
 80223b4:	0003      	movs	r3, r0
 80223b6:	607b      	str	r3, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (_temp2 == 1UL))
 80223b8:	693b      	ldr	r3, [r7, #16]
 80223ba:	2240      	movs	r2, #64	; 0x40
 80223bc:	4013      	ands	r3, r2
 80223be:	d01e      	beq.n	80223fe <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	2b01      	cmp	r3, #1
 80223c4:	d11b      	bne.n	80223fe <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 80223c6:	4b0f      	ldr	r3, [pc, #60]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80223c8:	0018      	movs	r0, r3
 80223ca:	f7ff fda9 	bl	8021f20 <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 80223ce:	4b0d      	ldr	r3, [pc, #52]	; (8022404 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80223d0:	0018      	movs	r0, r3
 80223d2:	f7ff fd3d 	bl	8021e50 <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 80223d6:	4b0d      	ldr	r3, [pc, #52]	; (802240c <HW_TRACER_EMB_IRQHandlerUSART+0x198>)
 80223d8:	2102      	movs	r1, #2
 80223da:	0018      	movs	r0, r3
 80223dc:	f7ff fab6 	bl	802194c <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if (fptr_rx == NULL)
 80223e0:	4b09      	ldr	r3, [pc, #36]	; (8022408 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80223e2:	681b      	ldr	r3, [r3, #0]
 80223e4:	2b00      	cmp	r3, #0
 80223e6:	d104      	bne.n	80223f2 <HW_TRACER_EMB_IRQHandlerUSART+0x17e>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 80223e8:	2380      	movs	r3, #128	; 0x80
 80223ea:	035b      	lsls	r3, r3, #13
 80223ec:	0018      	movs	r0, r3
 80223ee:	f7ff fbff 	bl	8021bf0 <LL_APB1_GRP1_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 80223f2:	f7ff f8b7 	bl	8021564 <TRACER_EMB_CALLBACK_TX>
 80223f6:	e002      	b.n	80223fe <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
      return;
 80223f8:	46c0      	nop			; (mov r8, r8)
 80223fa:	e000      	b.n	80223fe <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
        return;
 80223fc:	46c0      	nop			; (mov r8, r8)
  }
#endif /* TRACER_EMB_DMA_MODE == 1 */

}
 80223fe:	46bd      	mov	sp, r7
 8022400:	b006      	add	sp, #24
 8022402:	bd80      	pop	{r7, pc}
 8022404:	40008000 	.word	0x40008000
 8022408:	20004ff4 	.word	0x20004ff4
 802240c:	40020000 	.word	0x40020000

08022410 <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(const uint8_t *pData, uint32_t Size)
{
 8022410:	b5b0      	push	{r4, r5, r7, lr}
 8022412:	b084      	sub	sp, #16
 8022414:	af02      	add	r7, sp, #8
 8022416:	6078      	str	r0, [r7, #4]
 8022418:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 802241a:	2380      	movs	r3, #128	; 0x80
 802241c:	035b      	lsls	r3, r3, #13
 802241e:	0018      	movs	r0, r3
 8022420:	f7ff fbd0 	bl	8021bc4 <LL_APB1_GRP1_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 8022424:	687c      	ldr	r4, [r7, #4]
 8022426:	4b13      	ldr	r3, [pc, #76]	; (8022474 <HW_TRACER_EMB_SendData+0x64>)
 8022428:	2100      	movs	r1, #0
 802242a:	0018      	movs	r0, r3
 802242c:	f7ff fdfe 	bl	802202c <LL_LPUART_DMA_GetRegAddr>
 8022430:	0005      	movs	r5, r0
 8022432:	4b11      	ldr	r3, [pc, #68]	; (8022478 <HW_TRACER_EMB_SendData+0x68>)
 8022434:	2102      	movs	r1, #2
 8022436:	0018      	movs	r0, r3
 8022438:	f7ff face 	bl	80219d8 <LL_DMA_GetDataTransferDirection>
 802243c:	0003      	movs	r3, r0
 802243e:	480e      	ldr	r0, [pc, #56]	; (8022478 <HW_TRACER_EMB_SendData+0x68>)
 8022440:	9300      	str	r3, [sp, #0]
 8022442:	002b      	movs	r3, r5
 8022444:	0022      	movs	r2, r4
 8022446:	2102      	movs	r1, #2
 8022448:	f7ff fb02 	bl	8021a50 <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, TRACER_EMB_DMA_DIRECTION),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 802244c:	683b      	ldr	r3, [r7, #0]
 802244e:	480a      	ldr	r0, [pc, #40]	; (8022478 <HW_TRACER_EMB_SendData+0x68>)
 8022450:	001a      	movs	r2, r3
 8022452:	2102      	movs	r1, #2
 8022454:	f7ff fada 	bl	8021a0c <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 8022458:	4b06      	ldr	r3, [pc, #24]	; (8022474 <HW_TRACER_EMB_SendData+0x64>)
 802245a:	0018      	movs	r0, r3
 802245c:	f7ff fdc7 	bl	8021fee <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 8022460:	4b05      	ldr	r3, [pc, #20]	; (8022478 <HW_TRACER_EMB_SendData+0x68>)
 8022462:	2102      	movs	r1, #2
 8022464:	0018      	movs	r0, r3
 8022466:	f7ff fa51 	bl	802190c <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif /* TRACER_EMB_IT_MODE == 1 */
}
 802246a:	46c0      	nop			; (mov r8, r8)
 802246c:	46bd      	mov	sp, r7
 802246e:	b002      	add	sp, #8
 8022470:	bdb0      	pop	{r4, r5, r7, pc}
 8022472:	46c0      	nop			; (mov r8, r8)
 8022474:	40008000 	.word	0x40008000
 8022478:	40020000 	.word	0x40020000

0802247c <malloc>:
 802247c:	b510      	push	{r4, lr}
 802247e:	4b03      	ldr	r3, [pc, #12]	; (802248c <malloc+0x10>)
 8022480:	0001      	movs	r1, r0
 8022482:	6818      	ldr	r0, [r3, #0]
 8022484:	f000 f826 	bl	80224d4 <_malloc_r>
 8022488:	bd10      	pop	{r4, pc}
 802248a:	46c0      	nop			; (mov r8, r8)
 802248c:	20000240 	.word	0x20000240

08022490 <sbrk_aligned>:
 8022490:	b570      	push	{r4, r5, r6, lr}
 8022492:	4e0f      	ldr	r6, [pc, #60]	; (80224d0 <sbrk_aligned+0x40>)
 8022494:	000d      	movs	r5, r1
 8022496:	6831      	ldr	r1, [r6, #0]
 8022498:	0004      	movs	r4, r0
 802249a:	2900      	cmp	r1, #0
 802249c:	d102      	bne.n	80224a4 <sbrk_aligned+0x14>
 802249e:	f000 f965 	bl	802276c <_sbrk_r>
 80224a2:	6030      	str	r0, [r6, #0]
 80224a4:	0029      	movs	r1, r5
 80224a6:	0020      	movs	r0, r4
 80224a8:	f000 f960 	bl	802276c <_sbrk_r>
 80224ac:	1c43      	adds	r3, r0, #1
 80224ae:	d00a      	beq.n	80224c6 <sbrk_aligned+0x36>
 80224b0:	2303      	movs	r3, #3
 80224b2:	1cc5      	adds	r5, r0, #3
 80224b4:	439d      	bics	r5, r3
 80224b6:	42a8      	cmp	r0, r5
 80224b8:	d007      	beq.n	80224ca <sbrk_aligned+0x3a>
 80224ba:	1a29      	subs	r1, r5, r0
 80224bc:	0020      	movs	r0, r4
 80224be:	f000 f955 	bl	802276c <_sbrk_r>
 80224c2:	3001      	adds	r0, #1
 80224c4:	d101      	bne.n	80224ca <sbrk_aligned+0x3a>
 80224c6:	2501      	movs	r5, #1
 80224c8:	426d      	negs	r5, r5
 80224ca:	0028      	movs	r0, r5
 80224cc:	bd70      	pop	{r4, r5, r6, pc}
 80224ce:	46c0      	nop			; (mov r8, r8)
 80224d0:	20004ffc 	.word	0x20004ffc

080224d4 <_malloc_r>:
 80224d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80224d6:	2203      	movs	r2, #3
 80224d8:	1ccb      	adds	r3, r1, #3
 80224da:	4393      	bics	r3, r2
 80224dc:	3308      	adds	r3, #8
 80224de:	0006      	movs	r6, r0
 80224e0:	001f      	movs	r7, r3
 80224e2:	2b0c      	cmp	r3, #12
 80224e4:	d238      	bcs.n	8022558 <_malloc_r+0x84>
 80224e6:	270c      	movs	r7, #12
 80224e8:	42b9      	cmp	r1, r7
 80224ea:	d837      	bhi.n	802255c <_malloc_r+0x88>
 80224ec:	0030      	movs	r0, r6
 80224ee:	f000 f873 	bl	80225d8 <__malloc_lock>
 80224f2:	4b38      	ldr	r3, [pc, #224]	; (80225d4 <_malloc_r+0x100>)
 80224f4:	9300      	str	r3, [sp, #0]
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	001c      	movs	r4, r3
 80224fa:	2c00      	cmp	r4, #0
 80224fc:	d133      	bne.n	8022566 <_malloc_r+0x92>
 80224fe:	0039      	movs	r1, r7
 8022500:	0030      	movs	r0, r6
 8022502:	f7ff ffc5 	bl	8022490 <sbrk_aligned>
 8022506:	0004      	movs	r4, r0
 8022508:	1c43      	adds	r3, r0, #1
 802250a:	d15e      	bne.n	80225ca <_malloc_r+0xf6>
 802250c:	9b00      	ldr	r3, [sp, #0]
 802250e:	681c      	ldr	r4, [r3, #0]
 8022510:	0025      	movs	r5, r4
 8022512:	2d00      	cmp	r5, #0
 8022514:	d14e      	bne.n	80225b4 <_malloc_r+0xe0>
 8022516:	2c00      	cmp	r4, #0
 8022518:	d051      	beq.n	80225be <_malloc_r+0xea>
 802251a:	6823      	ldr	r3, [r4, #0]
 802251c:	0029      	movs	r1, r5
 802251e:	18e3      	adds	r3, r4, r3
 8022520:	0030      	movs	r0, r6
 8022522:	9301      	str	r3, [sp, #4]
 8022524:	f000 f922 	bl	802276c <_sbrk_r>
 8022528:	9b01      	ldr	r3, [sp, #4]
 802252a:	4283      	cmp	r3, r0
 802252c:	d147      	bne.n	80225be <_malloc_r+0xea>
 802252e:	6823      	ldr	r3, [r4, #0]
 8022530:	0030      	movs	r0, r6
 8022532:	1aff      	subs	r7, r7, r3
 8022534:	0039      	movs	r1, r7
 8022536:	f7ff ffab 	bl	8022490 <sbrk_aligned>
 802253a:	3001      	adds	r0, #1
 802253c:	d03f      	beq.n	80225be <_malloc_r+0xea>
 802253e:	6823      	ldr	r3, [r4, #0]
 8022540:	19db      	adds	r3, r3, r7
 8022542:	6023      	str	r3, [r4, #0]
 8022544:	9b00      	ldr	r3, [sp, #0]
 8022546:	681b      	ldr	r3, [r3, #0]
 8022548:	2b00      	cmp	r3, #0
 802254a:	d040      	beq.n	80225ce <_malloc_r+0xfa>
 802254c:	685a      	ldr	r2, [r3, #4]
 802254e:	42a2      	cmp	r2, r4
 8022550:	d133      	bne.n	80225ba <_malloc_r+0xe6>
 8022552:	2200      	movs	r2, #0
 8022554:	605a      	str	r2, [r3, #4]
 8022556:	e014      	b.n	8022582 <_malloc_r+0xae>
 8022558:	2b00      	cmp	r3, #0
 802255a:	dac5      	bge.n	80224e8 <_malloc_r+0x14>
 802255c:	230c      	movs	r3, #12
 802255e:	2500      	movs	r5, #0
 8022560:	6033      	str	r3, [r6, #0]
 8022562:	0028      	movs	r0, r5
 8022564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022566:	6821      	ldr	r1, [r4, #0]
 8022568:	1bc9      	subs	r1, r1, r7
 802256a:	d420      	bmi.n	80225ae <_malloc_r+0xda>
 802256c:	290b      	cmp	r1, #11
 802256e:	d918      	bls.n	80225a2 <_malloc_r+0xce>
 8022570:	19e2      	adds	r2, r4, r7
 8022572:	6027      	str	r7, [r4, #0]
 8022574:	42a3      	cmp	r3, r4
 8022576:	d112      	bne.n	802259e <_malloc_r+0xca>
 8022578:	9b00      	ldr	r3, [sp, #0]
 802257a:	601a      	str	r2, [r3, #0]
 802257c:	6863      	ldr	r3, [r4, #4]
 802257e:	6011      	str	r1, [r2, #0]
 8022580:	6053      	str	r3, [r2, #4]
 8022582:	0030      	movs	r0, r6
 8022584:	0025      	movs	r5, r4
 8022586:	f000 f82f 	bl	80225e8 <__malloc_unlock>
 802258a:	2207      	movs	r2, #7
 802258c:	350b      	adds	r5, #11
 802258e:	1d23      	adds	r3, r4, #4
 8022590:	4395      	bics	r5, r2
 8022592:	1aea      	subs	r2, r5, r3
 8022594:	429d      	cmp	r5, r3
 8022596:	d0e4      	beq.n	8022562 <_malloc_r+0x8e>
 8022598:	1b5b      	subs	r3, r3, r5
 802259a:	50a3      	str	r3, [r4, r2]
 802259c:	e7e1      	b.n	8022562 <_malloc_r+0x8e>
 802259e:	605a      	str	r2, [r3, #4]
 80225a0:	e7ec      	b.n	802257c <_malloc_r+0xa8>
 80225a2:	6862      	ldr	r2, [r4, #4]
 80225a4:	42a3      	cmp	r3, r4
 80225a6:	d1d5      	bne.n	8022554 <_malloc_r+0x80>
 80225a8:	9b00      	ldr	r3, [sp, #0]
 80225aa:	601a      	str	r2, [r3, #0]
 80225ac:	e7e9      	b.n	8022582 <_malloc_r+0xae>
 80225ae:	0023      	movs	r3, r4
 80225b0:	6864      	ldr	r4, [r4, #4]
 80225b2:	e7a2      	b.n	80224fa <_malloc_r+0x26>
 80225b4:	002c      	movs	r4, r5
 80225b6:	686d      	ldr	r5, [r5, #4]
 80225b8:	e7ab      	b.n	8022512 <_malloc_r+0x3e>
 80225ba:	0013      	movs	r3, r2
 80225bc:	e7c4      	b.n	8022548 <_malloc_r+0x74>
 80225be:	230c      	movs	r3, #12
 80225c0:	0030      	movs	r0, r6
 80225c2:	6033      	str	r3, [r6, #0]
 80225c4:	f000 f810 	bl	80225e8 <__malloc_unlock>
 80225c8:	e7cb      	b.n	8022562 <_malloc_r+0x8e>
 80225ca:	6027      	str	r7, [r4, #0]
 80225cc:	e7d9      	b.n	8022582 <_malloc_r+0xae>
 80225ce:	605b      	str	r3, [r3, #4]
 80225d0:	deff      	udf	#255	; 0xff
 80225d2:	46c0      	nop			; (mov r8, r8)
 80225d4:	20004ff8 	.word	0x20004ff8

080225d8 <__malloc_lock>:
 80225d8:	b510      	push	{r4, lr}
 80225da:	4802      	ldr	r0, [pc, #8]	; (80225e4 <__malloc_lock+0xc>)
 80225dc:	f000 f902 	bl	80227e4 <__retarget_lock_acquire_recursive>
 80225e0:	bd10      	pop	{r4, pc}
 80225e2:	46c0      	nop			; (mov r8, r8)
 80225e4:	2000513c 	.word	0x2000513c

080225e8 <__malloc_unlock>:
 80225e8:	b510      	push	{r4, lr}
 80225ea:	4802      	ldr	r0, [pc, #8]	; (80225f4 <__malloc_unlock+0xc>)
 80225ec:	f000 f8fb 	bl	80227e6 <__retarget_lock_release_recursive>
 80225f0:	bd10      	pop	{r4, pc}
 80225f2:	46c0      	nop			; (mov r8, r8)
 80225f4:	2000513c 	.word	0x2000513c

080225f8 <sniprintf>:
 80225f8:	b40c      	push	{r2, r3}
 80225fa:	b530      	push	{r4, r5, lr}
 80225fc:	4b17      	ldr	r3, [pc, #92]	; (802265c <sniprintf+0x64>)
 80225fe:	000c      	movs	r4, r1
 8022600:	681d      	ldr	r5, [r3, #0]
 8022602:	b09d      	sub	sp, #116	; 0x74
 8022604:	2900      	cmp	r1, #0
 8022606:	da08      	bge.n	802261a <sniprintf+0x22>
 8022608:	238b      	movs	r3, #139	; 0x8b
 802260a:	2001      	movs	r0, #1
 802260c:	602b      	str	r3, [r5, #0]
 802260e:	4240      	negs	r0, r0
 8022610:	b01d      	add	sp, #116	; 0x74
 8022612:	bc30      	pop	{r4, r5}
 8022614:	bc08      	pop	{r3}
 8022616:	b002      	add	sp, #8
 8022618:	4718      	bx	r3
 802261a:	2382      	movs	r3, #130	; 0x82
 802261c:	466a      	mov	r2, sp
 802261e:	009b      	lsls	r3, r3, #2
 8022620:	8293      	strh	r3, [r2, #20]
 8022622:	2300      	movs	r3, #0
 8022624:	9002      	str	r0, [sp, #8]
 8022626:	9006      	str	r0, [sp, #24]
 8022628:	4299      	cmp	r1, r3
 802262a:	d000      	beq.n	802262e <sniprintf+0x36>
 802262c:	1e4b      	subs	r3, r1, #1
 802262e:	9304      	str	r3, [sp, #16]
 8022630:	9307      	str	r3, [sp, #28]
 8022632:	2301      	movs	r3, #1
 8022634:	466a      	mov	r2, sp
 8022636:	425b      	negs	r3, r3
 8022638:	82d3      	strh	r3, [r2, #22]
 802263a:	0028      	movs	r0, r5
 802263c:	ab21      	add	r3, sp, #132	; 0x84
 802263e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022640:	a902      	add	r1, sp, #8
 8022642:	9301      	str	r3, [sp, #4]
 8022644:	f000 f996 	bl	8022974 <_svfiprintf_r>
 8022648:	1c43      	adds	r3, r0, #1
 802264a:	da01      	bge.n	8022650 <sniprintf+0x58>
 802264c:	238b      	movs	r3, #139	; 0x8b
 802264e:	602b      	str	r3, [r5, #0]
 8022650:	2c00      	cmp	r4, #0
 8022652:	d0dd      	beq.n	8022610 <sniprintf+0x18>
 8022654:	2200      	movs	r2, #0
 8022656:	9b02      	ldr	r3, [sp, #8]
 8022658:	701a      	strb	r2, [r3, #0]
 802265a:	e7d9      	b.n	8022610 <sniprintf+0x18>
 802265c:	20000240 	.word	0x20000240

08022660 <siprintf>:
 8022660:	b40e      	push	{r1, r2, r3}
 8022662:	b500      	push	{lr}
 8022664:	490b      	ldr	r1, [pc, #44]	; (8022694 <siprintf+0x34>)
 8022666:	b09c      	sub	sp, #112	; 0x70
 8022668:	ab1d      	add	r3, sp, #116	; 0x74
 802266a:	9002      	str	r0, [sp, #8]
 802266c:	9006      	str	r0, [sp, #24]
 802266e:	9107      	str	r1, [sp, #28]
 8022670:	9104      	str	r1, [sp, #16]
 8022672:	4809      	ldr	r0, [pc, #36]	; (8022698 <siprintf+0x38>)
 8022674:	4909      	ldr	r1, [pc, #36]	; (802269c <siprintf+0x3c>)
 8022676:	cb04      	ldmia	r3!, {r2}
 8022678:	9105      	str	r1, [sp, #20]
 802267a:	6800      	ldr	r0, [r0, #0]
 802267c:	a902      	add	r1, sp, #8
 802267e:	9301      	str	r3, [sp, #4]
 8022680:	f000 f978 	bl	8022974 <_svfiprintf_r>
 8022684:	2200      	movs	r2, #0
 8022686:	9b02      	ldr	r3, [sp, #8]
 8022688:	701a      	strb	r2, [r3, #0]
 802268a:	b01c      	add	sp, #112	; 0x70
 802268c:	bc08      	pop	{r3}
 802268e:	b003      	add	sp, #12
 8022690:	4718      	bx	r3
 8022692:	46c0      	nop			; (mov r8, r8)
 8022694:	7fffffff 	.word	0x7fffffff
 8022698:	20000240 	.word	0x20000240
 802269c:	ffff0208 	.word	0xffff0208

080226a0 <memset>:
 80226a0:	0003      	movs	r3, r0
 80226a2:	1882      	adds	r2, r0, r2
 80226a4:	4293      	cmp	r3, r2
 80226a6:	d100      	bne.n	80226aa <memset+0xa>
 80226a8:	4770      	bx	lr
 80226aa:	7019      	strb	r1, [r3, #0]
 80226ac:	3301      	adds	r3, #1
 80226ae:	e7f9      	b.n	80226a4 <memset+0x4>

080226b0 <_reclaim_reent>:
 80226b0:	4b2d      	ldr	r3, [pc, #180]	; (8022768 <_reclaim_reent+0xb8>)
 80226b2:	b570      	push	{r4, r5, r6, lr}
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	0004      	movs	r4, r0
 80226b8:	4283      	cmp	r3, r0
 80226ba:	d042      	beq.n	8022742 <_reclaim_reent+0x92>
 80226bc:	69c3      	ldr	r3, [r0, #28]
 80226be:	2b00      	cmp	r3, #0
 80226c0:	d00a      	beq.n	80226d8 <_reclaim_reent+0x28>
 80226c2:	2500      	movs	r5, #0
 80226c4:	68db      	ldr	r3, [r3, #12]
 80226c6:	42ab      	cmp	r3, r5
 80226c8:	d140      	bne.n	802274c <_reclaim_reent+0x9c>
 80226ca:	69e3      	ldr	r3, [r4, #28]
 80226cc:	6819      	ldr	r1, [r3, #0]
 80226ce:	2900      	cmp	r1, #0
 80226d0:	d002      	beq.n	80226d8 <_reclaim_reent+0x28>
 80226d2:	0020      	movs	r0, r4
 80226d4:	f000 f8a2 	bl	802281c <_free_r>
 80226d8:	6961      	ldr	r1, [r4, #20]
 80226da:	2900      	cmp	r1, #0
 80226dc:	d002      	beq.n	80226e4 <_reclaim_reent+0x34>
 80226de:	0020      	movs	r0, r4
 80226e0:	f000 f89c 	bl	802281c <_free_r>
 80226e4:	69e1      	ldr	r1, [r4, #28]
 80226e6:	2900      	cmp	r1, #0
 80226e8:	d002      	beq.n	80226f0 <_reclaim_reent+0x40>
 80226ea:	0020      	movs	r0, r4
 80226ec:	f000 f896 	bl	802281c <_free_r>
 80226f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80226f2:	2900      	cmp	r1, #0
 80226f4:	d002      	beq.n	80226fc <_reclaim_reent+0x4c>
 80226f6:	0020      	movs	r0, r4
 80226f8:	f000 f890 	bl	802281c <_free_r>
 80226fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80226fe:	2900      	cmp	r1, #0
 8022700:	d002      	beq.n	8022708 <_reclaim_reent+0x58>
 8022702:	0020      	movs	r0, r4
 8022704:	f000 f88a 	bl	802281c <_free_r>
 8022708:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802270a:	2900      	cmp	r1, #0
 802270c:	d002      	beq.n	8022714 <_reclaim_reent+0x64>
 802270e:	0020      	movs	r0, r4
 8022710:	f000 f884 	bl	802281c <_free_r>
 8022714:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8022716:	2900      	cmp	r1, #0
 8022718:	d002      	beq.n	8022720 <_reclaim_reent+0x70>
 802271a:	0020      	movs	r0, r4
 802271c:	f000 f87e 	bl	802281c <_free_r>
 8022720:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022722:	2900      	cmp	r1, #0
 8022724:	d002      	beq.n	802272c <_reclaim_reent+0x7c>
 8022726:	0020      	movs	r0, r4
 8022728:	f000 f878 	bl	802281c <_free_r>
 802272c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802272e:	2900      	cmp	r1, #0
 8022730:	d002      	beq.n	8022738 <_reclaim_reent+0x88>
 8022732:	0020      	movs	r0, r4
 8022734:	f000 f872 	bl	802281c <_free_r>
 8022738:	6a23      	ldr	r3, [r4, #32]
 802273a:	2b00      	cmp	r3, #0
 802273c:	d001      	beq.n	8022742 <_reclaim_reent+0x92>
 802273e:	0020      	movs	r0, r4
 8022740:	4798      	blx	r3
 8022742:	bd70      	pop	{r4, r5, r6, pc}
 8022744:	5949      	ldr	r1, [r1, r5]
 8022746:	2900      	cmp	r1, #0
 8022748:	d108      	bne.n	802275c <_reclaim_reent+0xac>
 802274a:	3504      	adds	r5, #4
 802274c:	69e3      	ldr	r3, [r4, #28]
 802274e:	68d9      	ldr	r1, [r3, #12]
 8022750:	2d80      	cmp	r5, #128	; 0x80
 8022752:	d1f7      	bne.n	8022744 <_reclaim_reent+0x94>
 8022754:	0020      	movs	r0, r4
 8022756:	f000 f861 	bl	802281c <_free_r>
 802275a:	e7b6      	b.n	80226ca <_reclaim_reent+0x1a>
 802275c:	680e      	ldr	r6, [r1, #0]
 802275e:	0020      	movs	r0, r4
 8022760:	f000 f85c 	bl	802281c <_free_r>
 8022764:	0031      	movs	r1, r6
 8022766:	e7ee      	b.n	8022746 <_reclaim_reent+0x96>
 8022768:	20000240 	.word	0x20000240

0802276c <_sbrk_r>:
 802276c:	2300      	movs	r3, #0
 802276e:	b570      	push	{r4, r5, r6, lr}
 8022770:	4d06      	ldr	r5, [pc, #24]	; (802278c <_sbrk_r+0x20>)
 8022772:	0004      	movs	r4, r0
 8022774:	0008      	movs	r0, r1
 8022776:	602b      	str	r3, [r5, #0]
 8022778:	f7e6 fc2e 	bl	8008fd8 <_sbrk>
 802277c:	1c43      	adds	r3, r0, #1
 802277e:	d103      	bne.n	8022788 <_sbrk_r+0x1c>
 8022780:	682b      	ldr	r3, [r5, #0]
 8022782:	2b00      	cmp	r3, #0
 8022784:	d000      	beq.n	8022788 <_sbrk_r+0x1c>
 8022786:	6023      	str	r3, [r4, #0]
 8022788:	bd70      	pop	{r4, r5, r6, pc}
 802278a:	46c0      	nop			; (mov r8, r8)
 802278c:	20005138 	.word	0x20005138

08022790 <__errno>:
 8022790:	4b01      	ldr	r3, [pc, #4]	; (8022798 <__errno+0x8>)
 8022792:	6818      	ldr	r0, [r3, #0]
 8022794:	4770      	bx	lr
 8022796:	46c0      	nop			; (mov r8, r8)
 8022798:	20000240 	.word	0x20000240

0802279c <__libc_init_array>:
 802279c:	b570      	push	{r4, r5, r6, lr}
 802279e:	2600      	movs	r6, #0
 80227a0:	4c0c      	ldr	r4, [pc, #48]	; (80227d4 <__libc_init_array+0x38>)
 80227a2:	4d0d      	ldr	r5, [pc, #52]	; (80227d8 <__libc_init_array+0x3c>)
 80227a4:	1b64      	subs	r4, r4, r5
 80227a6:	10a4      	asrs	r4, r4, #2
 80227a8:	42a6      	cmp	r6, r4
 80227aa:	d109      	bne.n	80227c0 <__libc_init_array+0x24>
 80227ac:	2600      	movs	r6, #0
 80227ae:	f000 fbb7 	bl	8022f20 <_init>
 80227b2:	4c0a      	ldr	r4, [pc, #40]	; (80227dc <__libc_init_array+0x40>)
 80227b4:	4d0a      	ldr	r5, [pc, #40]	; (80227e0 <__libc_init_array+0x44>)
 80227b6:	1b64      	subs	r4, r4, r5
 80227b8:	10a4      	asrs	r4, r4, #2
 80227ba:	42a6      	cmp	r6, r4
 80227bc:	d105      	bne.n	80227ca <__libc_init_array+0x2e>
 80227be:	bd70      	pop	{r4, r5, r6, pc}
 80227c0:	00b3      	lsls	r3, r6, #2
 80227c2:	58eb      	ldr	r3, [r5, r3]
 80227c4:	4798      	blx	r3
 80227c6:	3601      	adds	r6, #1
 80227c8:	e7ee      	b.n	80227a8 <__libc_init_array+0xc>
 80227ca:	00b3      	lsls	r3, r6, #2
 80227cc:	58eb      	ldr	r3, [r5, r3]
 80227ce:	4798      	blx	r3
 80227d0:	3601      	adds	r6, #1
 80227d2:	e7f2      	b.n	80227ba <__libc_init_array+0x1e>
 80227d4:	08024a44 	.word	0x08024a44
 80227d8:	08024a44 	.word	0x08024a44
 80227dc:	08024a48 	.word	0x08024a48
 80227e0:	08024a44 	.word	0x08024a44

080227e4 <__retarget_lock_acquire_recursive>:
 80227e4:	4770      	bx	lr

080227e6 <__retarget_lock_release_recursive>:
 80227e6:	4770      	bx	lr

080227e8 <__aeabi_memcpy>:
 80227e8:	b510      	push	{r4, lr}
 80227ea:	f000 f80d 	bl	8022808 <memcpy>
 80227ee:	bd10      	pop	{r4, pc}

080227f0 <__aeabi_memset>:
 80227f0:	000b      	movs	r3, r1
 80227f2:	b510      	push	{r4, lr}
 80227f4:	0011      	movs	r1, r2
 80227f6:	001a      	movs	r2, r3
 80227f8:	f7ff ff52 	bl	80226a0 <memset>
 80227fc:	bd10      	pop	{r4, pc}

080227fe <__aeabi_memclr>:
 80227fe:	b510      	push	{r4, lr}
 8022800:	2200      	movs	r2, #0
 8022802:	f7ff fff5 	bl	80227f0 <__aeabi_memset>
 8022806:	bd10      	pop	{r4, pc}

08022808 <memcpy>:
 8022808:	2300      	movs	r3, #0
 802280a:	b510      	push	{r4, lr}
 802280c:	429a      	cmp	r2, r3
 802280e:	d100      	bne.n	8022812 <memcpy+0xa>
 8022810:	bd10      	pop	{r4, pc}
 8022812:	5ccc      	ldrb	r4, [r1, r3]
 8022814:	54c4      	strb	r4, [r0, r3]
 8022816:	3301      	adds	r3, #1
 8022818:	e7f8      	b.n	802280c <memcpy+0x4>
	...

0802281c <_free_r>:
 802281c:	b570      	push	{r4, r5, r6, lr}
 802281e:	0005      	movs	r5, r0
 8022820:	2900      	cmp	r1, #0
 8022822:	d010      	beq.n	8022846 <_free_r+0x2a>
 8022824:	1f0c      	subs	r4, r1, #4
 8022826:	6823      	ldr	r3, [r4, #0]
 8022828:	2b00      	cmp	r3, #0
 802282a:	da00      	bge.n	802282e <_free_r+0x12>
 802282c:	18e4      	adds	r4, r4, r3
 802282e:	0028      	movs	r0, r5
 8022830:	f7ff fed2 	bl	80225d8 <__malloc_lock>
 8022834:	4a1d      	ldr	r2, [pc, #116]	; (80228ac <_free_r+0x90>)
 8022836:	6813      	ldr	r3, [r2, #0]
 8022838:	2b00      	cmp	r3, #0
 802283a:	d105      	bne.n	8022848 <_free_r+0x2c>
 802283c:	6063      	str	r3, [r4, #4]
 802283e:	6014      	str	r4, [r2, #0]
 8022840:	0028      	movs	r0, r5
 8022842:	f7ff fed1 	bl	80225e8 <__malloc_unlock>
 8022846:	bd70      	pop	{r4, r5, r6, pc}
 8022848:	42a3      	cmp	r3, r4
 802284a:	d908      	bls.n	802285e <_free_r+0x42>
 802284c:	6820      	ldr	r0, [r4, #0]
 802284e:	1821      	adds	r1, r4, r0
 8022850:	428b      	cmp	r3, r1
 8022852:	d1f3      	bne.n	802283c <_free_r+0x20>
 8022854:	6819      	ldr	r1, [r3, #0]
 8022856:	685b      	ldr	r3, [r3, #4]
 8022858:	1809      	adds	r1, r1, r0
 802285a:	6021      	str	r1, [r4, #0]
 802285c:	e7ee      	b.n	802283c <_free_r+0x20>
 802285e:	001a      	movs	r2, r3
 8022860:	685b      	ldr	r3, [r3, #4]
 8022862:	2b00      	cmp	r3, #0
 8022864:	d001      	beq.n	802286a <_free_r+0x4e>
 8022866:	42a3      	cmp	r3, r4
 8022868:	d9f9      	bls.n	802285e <_free_r+0x42>
 802286a:	6811      	ldr	r1, [r2, #0]
 802286c:	1850      	adds	r0, r2, r1
 802286e:	42a0      	cmp	r0, r4
 8022870:	d10b      	bne.n	802288a <_free_r+0x6e>
 8022872:	6820      	ldr	r0, [r4, #0]
 8022874:	1809      	adds	r1, r1, r0
 8022876:	1850      	adds	r0, r2, r1
 8022878:	6011      	str	r1, [r2, #0]
 802287a:	4283      	cmp	r3, r0
 802287c:	d1e0      	bne.n	8022840 <_free_r+0x24>
 802287e:	6818      	ldr	r0, [r3, #0]
 8022880:	685b      	ldr	r3, [r3, #4]
 8022882:	1841      	adds	r1, r0, r1
 8022884:	6011      	str	r1, [r2, #0]
 8022886:	6053      	str	r3, [r2, #4]
 8022888:	e7da      	b.n	8022840 <_free_r+0x24>
 802288a:	42a0      	cmp	r0, r4
 802288c:	d902      	bls.n	8022894 <_free_r+0x78>
 802288e:	230c      	movs	r3, #12
 8022890:	602b      	str	r3, [r5, #0]
 8022892:	e7d5      	b.n	8022840 <_free_r+0x24>
 8022894:	6820      	ldr	r0, [r4, #0]
 8022896:	1821      	adds	r1, r4, r0
 8022898:	428b      	cmp	r3, r1
 802289a:	d103      	bne.n	80228a4 <_free_r+0x88>
 802289c:	6819      	ldr	r1, [r3, #0]
 802289e:	685b      	ldr	r3, [r3, #4]
 80228a0:	1809      	adds	r1, r1, r0
 80228a2:	6021      	str	r1, [r4, #0]
 80228a4:	6063      	str	r3, [r4, #4]
 80228a6:	6054      	str	r4, [r2, #4]
 80228a8:	e7ca      	b.n	8022840 <_free_r+0x24>
 80228aa:	46c0      	nop			; (mov r8, r8)
 80228ac:	20004ff8 	.word	0x20004ff8

080228b0 <__ssputs_r>:
 80228b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228b2:	b085      	sub	sp, #20
 80228b4:	9301      	str	r3, [sp, #4]
 80228b6:	9203      	str	r2, [sp, #12]
 80228b8:	688e      	ldr	r6, [r1, #8]
 80228ba:	9a01      	ldr	r2, [sp, #4]
 80228bc:	0007      	movs	r7, r0
 80228be:	000c      	movs	r4, r1
 80228c0:	680b      	ldr	r3, [r1, #0]
 80228c2:	4296      	cmp	r6, r2
 80228c4:	d831      	bhi.n	802292a <__ssputs_r+0x7a>
 80228c6:	898a      	ldrh	r2, [r1, #12]
 80228c8:	2190      	movs	r1, #144	; 0x90
 80228ca:	00c9      	lsls	r1, r1, #3
 80228cc:	420a      	tst	r2, r1
 80228ce:	d029      	beq.n	8022924 <__ssputs_r+0x74>
 80228d0:	2003      	movs	r0, #3
 80228d2:	6921      	ldr	r1, [r4, #16]
 80228d4:	1a5b      	subs	r3, r3, r1
 80228d6:	9302      	str	r3, [sp, #8]
 80228d8:	6963      	ldr	r3, [r4, #20]
 80228da:	4343      	muls	r3, r0
 80228dc:	0fdd      	lsrs	r5, r3, #31
 80228de:	18ed      	adds	r5, r5, r3
 80228e0:	9b01      	ldr	r3, [sp, #4]
 80228e2:	9802      	ldr	r0, [sp, #8]
 80228e4:	3301      	adds	r3, #1
 80228e6:	181b      	adds	r3, r3, r0
 80228e8:	106d      	asrs	r5, r5, #1
 80228ea:	42ab      	cmp	r3, r5
 80228ec:	d900      	bls.n	80228f0 <__ssputs_r+0x40>
 80228ee:	001d      	movs	r5, r3
 80228f0:	0552      	lsls	r2, r2, #21
 80228f2:	d529      	bpl.n	8022948 <__ssputs_r+0x98>
 80228f4:	0029      	movs	r1, r5
 80228f6:	0038      	movs	r0, r7
 80228f8:	f7ff fdec 	bl	80224d4 <_malloc_r>
 80228fc:	1e06      	subs	r6, r0, #0
 80228fe:	d02d      	beq.n	802295c <__ssputs_r+0xac>
 8022900:	9a02      	ldr	r2, [sp, #8]
 8022902:	6921      	ldr	r1, [r4, #16]
 8022904:	f7ff ff80 	bl	8022808 <memcpy>
 8022908:	89a2      	ldrh	r2, [r4, #12]
 802290a:	4b19      	ldr	r3, [pc, #100]	; (8022970 <__ssputs_r+0xc0>)
 802290c:	401a      	ands	r2, r3
 802290e:	2380      	movs	r3, #128	; 0x80
 8022910:	4313      	orrs	r3, r2
 8022912:	81a3      	strh	r3, [r4, #12]
 8022914:	9b02      	ldr	r3, [sp, #8]
 8022916:	6126      	str	r6, [r4, #16]
 8022918:	18f6      	adds	r6, r6, r3
 802291a:	6026      	str	r6, [r4, #0]
 802291c:	6165      	str	r5, [r4, #20]
 802291e:	9e01      	ldr	r6, [sp, #4]
 8022920:	1aed      	subs	r5, r5, r3
 8022922:	60a5      	str	r5, [r4, #8]
 8022924:	9b01      	ldr	r3, [sp, #4]
 8022926:	429e      	cmp	r6, r3
 8022928:	d900      	bls.n	802292c <__ssputs_r+0x7c>
 802292a:	9e01      	ldr	r6, [sp, #4]
 802292c:	0032      	movs	r2, r6
 802292e:	9903      	ldr	r1, [sp, #12]
 8022930:	6820      	ldr	r0, [r4, #0]
 8022932:	f000 fa9f 	bl	8022e74 <memmove>
 8022936:	2000      	movs	r0, #0
 8022938:	68a3      	ldr	r3, [r4, #8]
 802293a:	1b9b      	subs	r3, r3, r6
 802293c:	60a3      	str	r3, [r4, #8]
 802293e:	6823      	ldr	r3, [r4, #0]
 8022940:	199b      	adds	r3, r3, r6
 8022942:	6023      	str	r3, [r4, #0]
 8022944:	b005      	add	sp, #20
 8022946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022948:	002a      	movs	r2, r5
 802294a:	0038      	movs	r0, r7
 802294c:	f000 fab0 	bl	8022eb0 <_realloc_r>
 8022950:	1e06      	subs	r6, r0, #0
 8022952:	d1df      	bne.n	8022914 <__ssputs_r+0x64>
 8022954:	0038      	movs	r0, r7
 8022956:	6921      	ldr	r1, [r4, #16]
 8022958:	f7ff ff60 	bl	802281c <_free_r>
 802295c:	230c      	movs	r3, #12
 802295e:	2001      	movs	r0, #1
 8022960:	603b      	str	r3, [r7, #0]
 8022962:	89a2      	ldrh	r2, [r4, #12]
 8022964:	3334      	adds	r3, #52	; 0x34
 8022966:	4313      	orrs	r3, r2
 8022968:	81a3      	strh	r3, [r4, #12]
 802296a:	4240      	negs	r0, r0
 802296c:	e7ea      	b.n	8022944 <__ssputs_r+0x94>
 802296e:	46c0      	nop			; (mov r8, r8)
 8022970:	fffffb7f 	.word	0xfffffb7f

08022974 <_svfiprintf_r>:
 8022974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022976:	b0a1      	sub	sp, #132	; 0x84
 8022978:	9003      	str	r0, [sp, #12]
 802297a:	001d      	movs	r5, r3
 802297c:	898b      	ldrh	r3, [r1, #12]
 802297e:	000f      	movs	r7, r1
 8022980:	0016      	movs	r6, r2
 8022982:	061b      	lsls	r3, r3, #24
 8022984:	d511      	bpl.n	80229aa <_svfiprintf_r+0x36>
 8022986:	690b      	ldr	r3, [r1, #16]
 8022988:	2b00      	cmp	r3, #0
 802298a:	d10e      	bne.n	80229aa <_svfiprintf_r+0x36>
 802298c:	2140      	movs	r1, #64	; 0x40
 802298e:	f7ff fda1 	bl	80224d4 <_malloc_r>
 8022992:	6038      	str	r0, [r7, #0]
 8022994:	6138      	str	r0, [r7, #16]
 8022996:	2800      	cmp	r0, #0
 8022998:	d105      	bne.n	80229a6 <_svfiprintf_r+0x32>
 802299a:	230c      	movs	r3, #12
 802299c:	9a03      	ldr	r2, [sp, #12]
 802299e:	3801      	subs	r0, #1
 80229a0:	6013      	str	r3, [r2, #0]
 80229a2:	b021      	add	sp, #132	; 0x84
 80229a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80229a6:	2340      	movs	r3, #64	; 0x40
 80229a8:	617b      	str	r3, [r7, #20]
 80229aa:	2300      	movs	r3, #0
 80229ac:	ac08      	add	r4, sp, #32
 80229ae:	6163      	str	r3, [r4, #20]
 80229b0:	3320      	adds	r3, #32
 80229b2:	7663      	strb	r3, [r4, #25]
 80229b4:	3310      	adds	r3, #16
 80229b6:	76a3      	strb	r3, [r4, #26]
 80229b8:	9507      	str	r5, [sp, #28]
 80229ba:	0035      	movs	r5, r6
 80229bc:	782b      	ldrb	r3, [r5, #0]
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d001      	beq.n	80229c6 <_svfiprintf_r+0x52>
 80229c2:	2b25      	cmp	r3, #37	; 0x25
 80229c4:	d148      	bne.n	8022a58 <_svfiprintf_r+0xe4>
 80229c6:	1bab      	subs	r3, r5, r6
 80229c8:	9305      	str	r3, [sp, #20]
 80229ca:	42b5      	cmp	r5, r6
 80229cc:	d00b      	beq.n	80229e6 <_svfiprintf_r+0x72>
 80229ce:	0032      	movs	r2, r6
 80229d0:	0039      	movs	r1, r7
 80229d2:	9803      	ldr	r0, [sp, #12]
 80229d4:	f7ff ff6c 	bl	80228b0 <__ssputs_r>
 80229d8:	3001      	adds	r0, #1
 80229da:	d100      	bne.n	80229de <_svfiprintf_r+0x6a>
 80229dc:	e0af      	b.n	8022b3e <_svfiprintf_r+0x1ca>
 80229de:	6963      	ldr	r3, [r4, #20]
 80229e0:	9a05      	ldr	r2, [sp, #20]
 80229e2:	189b      	adds	r3, r3, r2
 80229e4:	6163      	str	r3, [r4, #20]
 80229e6:	782b      	ldrb	r3, [r5, #0]
 80229e8:	2b00      	cmp	r3, #0
 80229ea:	d100      	bne.n	80229ee <_svfiprintf_r+0x7a>
 80229ec:	e0a7      	b.n	8022b3e <_svfiprintf_r+0x1ca>
 80229ee:	2201      	movs	r2, #1
 80229f0:	2300      	movs	r3, #0
 80229f2:	4252      	negs	r2, r2
 80229f4:	6062      	str	r2, [r4, #4]
 80229f6:	a904      	add	r1, sp, #16
 80229f8:	3254      	adds	r2, #84	; 0x54
 80229fa:	1852      	adds	r2, r2, r1
 80229fc:	1c6e      	adds	r6, r5, #1
 80229fe:	6023      	str	r3, [r4, #0]
 8022a00:	60e3      	str	r3, [r4, #12]
 8022a02:	60a3      	str	r3, [r4, #8]
 8022a04:	7013      	strb	r3, [r2, #0]
 8022a06:	65a3      	str	r3, [r4, #88]	; 0x58
 8022a08:	4b55      	ldr	r3, [pc, #340]	; (8022b60 <_svfiprintf_r+0x1ec>)
 8022a0a:	2205      	movs	r2, #5
 8022a0c:	0018      	movs	r0, r3
 8022a0e:	7831      	ldrb	r1, [r6, #0]
 8022a10:	9305      	str	r3, [sp, #20]
 8022a12:	f000 fa42 	bl	8022e9a <memchr>
 8022a16:	1c75      	adds	r5, r6, #1
 8022a18:	2800      	cmp	r0, #0
 8022a1a:	d11f      	bne.n	8022a5c <_svfiprintf_r+0xe8>
 8022a1c:	6822      	ldr	r2, [r4, #0]
 8022a1e:	06d3      	lsls	r3, r2, #27
 8022a20:	d504      	bpl.n	8022a2c <_svfiprintf_r+0xb8>
 8022a22:	2353      	movs	r3, #83	; 0x53
 8022a24:	a904      	add	r1, sp, #16
 8022a26:	185b      	adds	r3, r3, r1
 8022a28:	2120      	movs	r1, #32
 8022a2a:	7019      	strb	r1, [r3, #0]
 8022a2c:	0713      	lsls	r3, r2, #28
 8022a2e:	d504      	bpl.n	8022a3a <_svfiprintf_r+0xc6>
 8022a30:	2353      	movs	r3, #83	; 0x53
 8022a32:	a904      	add	r1, sp, #16
 8022a34:	185b      	adds	r3, r3, r1
 8022a36:	212b      	movs	r1, #43	; 0x2b
 8022a38:	7019      	strb	r1, [r3, #0]
 8022a3a:	7833      	ldrb	r3, [r6, #0]
 8022a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8022a3e:	d016      	beq.n	8022a6e <_svfiprintf_r+0xfa>
 8022a40:	0035      	movs	r5, r6
 8022a42:	2100      	movs	r1, #0
 8022a44:	200a      	movs	r0, #10
 8022a46:	68e3      	ldr	r3, [r4, #12]
 8022a48:	782a      	ldrb	r2, [r5, #0]
 8022a4a:	1c6e      	adds	r6, r5, #1
 8022a4c:	3a30      	subs	r2, #48	; 0x30
 8022a4e:	2a09      	cmp	r2, #9
 8022a50:	d94e      	bls.n	8022af0 <_svfiprintf_r+0x17c>
 8022a52:	2900      	cmp	r1, #0
 8022a54:	d111      	bne.n	8022a7a <_svfiprintf_r+0x106>
 8022a56:	e017      	b.n	8022a88 <_svfiprintf_r+0x114>
 8022a58:	3501      	adds	r5, #1
 8022a5a:	e7af      	b.n	80229bc <_svfiprintf_r+0x48>
 8022a5c:	9b05      	ldr	r3, [sp, #20]
 8022a5e:	6822      	ldr	r2, [r4, #0]
 8022a60:	1ac0      	subs	r0, r0, r3
 8022a62:	2301      	movs	r3, #1
 8022a64:	4083      	lsls	r3, r0
 8022a66:	4313      	orrs	r3, r2
 8022a68:	002e      	movs	r6, r5
 8022a6a:	6023      	str	r3, [r4, #0]
 8022a6c:	e7cc      	b.n	8022a08 <_svfiprintf_r+0x94>
 8022a6e:	9b07      	ldr	r3, [sp, #28]
 8022a70:	1d19      	adds	r1, r3, #4
 8022a72:	681b      	ldr	r3, [r3, #0]
 8022a74:	9107      	str	r1, [sp, #28]
 8022a76:	2b00      	cmp	r3, #0
 8022a78:	db01      	blt.n	8022a7e <_svfiprintf_r+0x10a>
 8022a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a7c:	e004      	b.n	8022a88 <_svfiprintf_r+0x114>
 8022a7e:	425b      	negs	r3, r3
 8022a80:	60e3      	str	r3, [r4, #12]
 8022a82:	2302      	movs	r3, #2
 8022a84:	4313      	orrs	r3, r2
 8022a86:	6023      	str	r3, [r4, #0]
 8022a88:	782b      	ldrb	r3, [r5, #0]
 8022a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8022a8c:	d10a      	bne.n	8022aa4 <_svfiprintf_r+0x130>
 8022a8e:	786b      	ldrb	r3, [r5, #1]
 8022a90:	2b2a      	cmp	r3, #42	; 0x2a
 8022a92:	d135      	bne.n	8022b00 <_svfiprintf_r+0x18c>
 8022a94:	9b07      	ldr	r3, [sp, #28]
 8022a96:	3502      	adds	r5, #2
 8022a98:	1d1a      	adds	r2, r3, #4
 8022a9a:	681b      	ldr	r3, [r3, #0]
 8022a9c:	9207      	str	r2, [sp, #28]
 8022a9e:	2b00      	cmp	r3, #0
 8022aa0:	db2b      	blt.n	8022afa <_svfiprintf_r+0x186>
 8022aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8022aa4:	4e2f      	ldr	r6, [pc, #188]	; (8022b64 <_svfiprintf_r+0x1f0>)
 8022aa6:	2203      	movs	r2, #3
 8022aa8:	0030      	movs	r0, r6
 8022aaa:	7829      	ldrb	r1, [r5, #0]
 8022aac:	f000 f9f5 	bl	8022e9a <memchr>
 8022ab0:	2800      	cmp	r0, #0
 8022ab2:	d006      	beq.n	8022ac2 <_svfiprintf_r+0x14e>
 8022ab4:	2340      	movs	r3, #64	; 0x40
 8022ab6:	1b80      	subs	r0, r0, r6
 8022ab8:	4083      	lsls	r3, r0
 8022aba:	6822      	ldr	r2, [r4, #0]
 8022abc:	3501      	adds	r5, #1
 8022abe:	4313      	orrs	r3, r2
 8022ac0:	6023      	str	r3, [r4, #0]
 8022ac2:	7829      	ldrb	r1, [r5, #0]
 8022ac4:	2206      	movs	r2, #6
 8022ac6:	4828      	ldr	r0, [pc, #160]	; (8022b68 <_svfiprintf_r+0x1f4>)
 8022ac8:	1c6e      	adds	r6, r5, #1
 8022aca:	7621      	strb	r1, [r4, #24]
 8022acc:	f000 f9e5 	bl	8022e9a <memchr>
 8022ad0:	2800      	cmp	r0, #0
 8022ad2:	d03c      	beq.n	8022b4e <_svfiprintf_r+0x1da>
 8022ad4:	4b25      	ldr	r3, [pc, #148]	; (8022b6c <_svfiprintf_r+0x1f8>)
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	d125      	bne.n	8022b26 <_svfiprintf_r+0x1b2>
 8022ada:	2207      	movs	r2, #7
 8022adc:	9b07      	ldr	r3, [sp, #28]
 8022ade:	3307      	adds	r3, #7
 8022ae0:	4393      	bics	r3, r2
 8022ae2:	3308      	adds	r3, #8
 8022ae4:	9307      	str	r3, [sp, #28]
 8022ae6:	6963      	ldr	r3, [r4, #20]
 8022ae8:	9a04      	ldr	r2, [sp, #16]
 8022aea:	189b      	adds	r3, r3, r2
 8022aec:	6163      	str	r3, [r4, #20]
 8022aee:	e764      	b.n	80229ba <_svfiprintf_r+0x46>
 8022af0:	4343      	muls	r3, r0
 8022af2:	0035      	movs	r5, r6
 8022af4:	2101      	movs	r1, #1
 8022af6:	189b      	adds	r3, r3, r2
 8022af8:	e7a6      	b.n	8022a48 <_svfiprintf_r+0xd4>
 8022afa:	2301      	movs	r3, #1
 8022afc:	425b      	negs	r3, r3
 8022afe:	e7d0      	b.n	8022aa2 <_svfiprintf_r+0x12e>
 8022b00:	2300      	movs	r3, #0
 8022b02:	200a      	movs	r0, #10
 8022b04:	001a      	movs	r2, r3
 8022b06:	3501      	adds	r5, #1
 8022b08:	6063      	str	r3, [r4, #4]
 8022b0a:	7829      	ldrb	r1, [r5, #0]
 8022b0c:	1c6e      	adds	r6, r5, #1
 8022b0e:	3930      	subs	r1, #48	; 0x30
 8022b10:	2909      	cmp	r1, #9
 8022b12:	d903      	bls.n	8022b1c <_svfiprintf_r+0x1a8>
 8022b14:	2b00      	cmp	r3, #0
 8022b16:	d0c5      	beq.n	8022aa4 <_svfiprintf_r+0x130>
 8022b18:	9209      	str	r2, [sp, #36]	; 0x24
 8022b1a:	e7c3      	b.n	8022aa4 <_svfiprintf_r+0x130>
 8022b1c:	4342      	muls	r2, r0
 8022b1e:	0035      	movs	r5, r6
 8022b20:	2301      	movs	r3, #1
 8022b22:	1852      	adds	r2, r2, r1
 8022b24:	e7f1      	b.n	8022b0a <_svfiprintf_r+0x196>
 8022b26:	aa07      	add	r2, sp, #28
 8022b28:	9200      	str	r2, [sp, #0]
 8022b2a:	0021      	movs	r1, r4
 8022b2c:	003a      	movs	r2, r7
 8022b2e:	4b10      	ldr	r3, [pc, #64]	; (8022b70 <_svfiprintf_r+0x1fc>)
 8022b30:	9803      	ldr	r0, [sp, #12]
 8022b32:	e000      	b.n	8022b36 <_svfiprintf_r+0x1c2>
 8022b34:	bf00      	nop
 8022b36:	9004      	str	r0, [sp, #16]
 8022b38:	9b04      	ldr	r3, [sp, #16]
 8022b3a:	3301      	adds	r3, #1
 8022b3c:	d1d3      	bne.n	8022ae6 <_svfiprintf_r+0x172>
 8022b3e:	89bb      	ldrh	r3, [r7, #12]
 8022b40:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022b42:	065b      	lsls	r3, r3, #25
 8022b44:	d400      	bmi.n	8022b48 <_svfiprintf_r+0x1d4>
 8022b46:	e72c      	b.n	80229a2 <_svfiprintf_r+0x2e>
 8022b48:	2001      	movs	r0, #1
 8022b4a:	4240      	negs	r0, r0
 8022b4c:	e729      	b.n	80229a2 <_svfiprintf_r+0x2e>
 8022b4e:	aa07      	add	r2, sp, #28
 8022b50:	9200      	str	r2, [sp, #0]
 8022b52:	0021      	movs	r1, r4
 8022b54:	003a      	movs	r2, r7
 8022b56:	4b06      	ldr	r3, [pc, #24]	; (8022b70 <_svfiprintf_r+0x1fc>)
 8022b58:	9803      	ldr	r0, [sp, #12]
 8022b5a:	f000 f87b 	bl	8022c54 <_printf_i>
 8022b5e:	e7ea      	b.n	8022b36 <_svfiprintf_r+0x1c2>
 8022b60:	08024a07 	.word	0x08024a07
 8022b64:	08024a0d 	.word	0x08024a0d
 8022b68:	08024a11 	.word	0x08024a11
 8022b6c:	00000000 	.word	0x00000000
 8022b70:	080228b1 	.word	0x080228b1

08022b74 <_printf_common>:
 8022b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022b76:	0016      	movs	r6, r2
 8022b78:	9301      	str	r3, [sp, #4]
 8022b7a:	688a      	ldr	r2, [r1, #8]
 8022b7c:	690b      	ldr	r3, [r1, #16]
 8022b7e:	000c      	movs	r4, r1
 8022b80:	9000      	str	r0, [sp, #0]
 8022b82:	4293      	cmp	r3, r2
 8022b84:	da00      	bge.n	8022b88 <_printf_common+0x14>
 8022b86:	0013      	movs	r3, r2
 8022b88:	0022      	movs	r2, r4
 8022b8a:	6033      	str	r3, [r6, #0]
 8022b8c:	3243      	adds	r2, #67	; 0x43
 8022b8e:	7812      	ldrb	r2, [r2, #0]
 8022b90:	2a00      	cmp	r2, #0
 8022b92:	d001      	beq.n	8022b98 <_printf_common+0x24>
 8022b94:	3301      	adds	r3, #1
 8022b96:	6033      	str	r3, [r6, #0]
 8022b98:	6823      	ldr	r3, [r4, #0]
 8022b9a:	069b      	lsls	r3, r3, #26
 8022b9c:	d502      	bpl.n	8022ba4 <_printf_common+0x30>
 8022b9e:	6833      	ldr	r3, [r6, #0]
 8022ba0:	3302      	adds	r3, #2
 8022ba2:	6033      	str	r3, [r6, #0]
 8022ba4:	6822      	ldr	r2, [r4, #0]
 8022ba6:	2306      	movs	r3, #6
 8022ba8:	0015      	movs	r5, r2
 8022baa:	401d      	ands	r5, r3
 8022bac:	421a      	tst	r2, r3
 8022bae:	d027      	beq.n	8022c00 <_printf_common+0x8c>
 8022bb0:	0023      	movs	r3, r4
 8022bb2:	3343      	adds	r3, #67	; 0x43
 8022bb4:	781b      	ldrb	r3, [r3, #0]
 8022bb6:	1e5a      	subs	r2, r3, #1
 8022bb8:	4193      	sbcs	r3, r2
 8022bba:	6822      	ldr	r2, [r4, #0]
 8022bbc:	0692      	lsls	r2, r2, #26
 8022bbe:	d430      	bmi.n	8022c22 <_printf_common+0xae>
 8022bc0:	0022      	movs	r2, r4
 8022bc2:	9901      	ldr	r1, [sp, #4]
 8022bc4:	9800      	ldr	r0, [sp, #0]
 8022bc6:	9d08      	ldr	r5, [sp, #32]
 8022bc8:	3243      	adds	r2, #67	; 0x43
 8022bca:	47a8      	blx	r5
 8022bcc:	3001      	adds	r0, #1
 8022bce:	d025      	beq.n	8022c1c <_printf_common+0xa8>
 8022bd0:	2206      	movs	r2, #6
 8022bd2:	6823      	ldr	r3, [r4, #0]
 8022bd4:	2500      	movs	r5, #0
 8022bd6:	4013      	ands	r3, r2
 8022bd8:	2b04      	cmp	r3, #4
 8022bda:	d105      	bne.n	8022be8 <_printf_common+0x74>
 8022bdc:	6833      	ldr	r3, [r6, #0]
 8022bde:	68e5      	ldr	r5, [r4, #12]
 8022be0:	1aed      	subs	r5, r5, r3
 8022be2:	43eb      	mvns	r3, r5
 8022be4:	17db      	asrs	r3, r3, #31
 8022be6:	401d      	ands	r5, r3
 8022be8:	68a3      	ldr	r3, [r4, #8]
 8022bea:	6922      	ldr	r2, [r4, #16]
 8022bec:	4293      	cmp	r3, r2
 8022bee:	dd01      	ble.n	8022bf4 <_printf_common+0x80>
 8022bf0:	1a9b      	subs	r3, r3, r2
 8022bf2:	18ed      	adds	r5, r5, r3
 8022bf4:	2600      	movs	r6, #0
 8022bf6:	42b5      	cmp	r5, r6
 8022bf8:	d120      	bne.n	8022c3c <_printf_common+0xc8>
 8022bfa:	2000      	movs	r0, #0
 8022bfc:	e010      	b.n	8022c20 <_printf_common+0xac>
 8022bfe:	3501      	adds	r5, #1
 8022c00:	68e3      	ldr	r3, [r4, #12]
 8022c02:	6832      	ldr	r2, [r6, #0]
 8022c04:	1a9b      	subs	r3, r3, r2
 8022c06:	42ab      	cmp	r3, r5
 8022c08:	ddd2      	ble.n	8022bb0 <_printf_common+0x3c>
 8022c0a:	0022      	movs	r2, r4
 8022c0c:	2301      	movs	r3, #1
 8022c0e:	9901      	ldr	r1, [sp, #4]
 8022c10:	9800      	ldr	r0, [sp, #0]
 8022c12:	9f08      	ldr	r7, [sp, #32]
 8022c14:	3219      	adds	r2, #25
 8022c16:	47b8      	blx	r7
 8022c18:	3001      	adds	r0, #1
 8022c1a:	d1f0      	bne.n	8022bfe <_printf_common+0x8a>
 8022c1c:	2001      	movs	r0, #1
 8022c1e:	4240      	negs	r0, r0
 8022c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022c22:	2030      	movs	r0, #48	; 0x30
 8022c24:	18e1      	adds	r1, r4, r3
 8022c26:	3143      	adds	r1, #67	; 0x43
 8022c28:	7008      	strb	r0, [r1, #0]
 8022c2a:	0021      	movs	r1, r4
 8022c2c:	1c5a      	adds	r2, r3, #1
 8022c2e:	3145      	adds	r1, #69	; 0x45
 8022c30:	7809      	ldrb	r1, [r1, #0]
 8022c32:	18a2      	adds	r2, r4, r2
 8022c34:	3243      	adds	r2, #67	; 0x43
 8022c36:	3302      	adds	r3, #2
 8022c38:	7011      	strb	r1, [r2, #0]
 8022c3a:	e7c1      	b.n	8022bc0 <_printf_common+0x4c>
 8022c3c:	0022      	movs	r2, r4
 8022c3e:	2301      	movs	r3, #1
 8022c40:	9901      	ldr	r1, [sp, #4]
 8022c42:	9800      	ldr	r0, [sp, #0]
 8022c44:	9f08      	ldr	r7, [sp, #32]
 8022c46:	321a      	adds	r2, #26
 8022c48:	47b8      	blx	r7
 8022c4a:	3001      	adds	r0, #1
 8022c4c:	d0e6      	beq.n	8022c1c <_printf_common+0xa8>
 8022c4e:	3601      	adds	r6, #1
 8022c50:	e7d1      	b.n	8022bf6 <_printf_common+0x82>
	...

08022c54 <_printf_i>:
 8022c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c56:	b08b      	sub	sp, #44	; 0x2c
 8022c58:	9206      	str	r2, [sp, #24]
 8022c5a:	000a      	movs	r2, r1
 8022c5c:	3243      	adds	r2, #67	; 0x43
 8022c5e:	9307      	str	r3, [sp, #28]
 8022c60:	9005      	str	r0, [sp, #20]
 8022c62:	9204      	str	r2, [sp, #16]
 8022c64:	7e0a      	ldrb	r2, [r1, #24]
 8022c66:	000c      	movs	r4, r1
 8022c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022c6a:	2a78      	cmp	r2, #120	; 0x78
 8022c6c:	d809      	bhi.n	8022c82 <_printf_i+0x2e>
 8022c6e:	2a62      	cmp	r2, #98	; 0x62
 8022c70:	d80b      	bhi.n	8022c8a <_printf_i+0x36>
 8022c72:	2a00      	cmp	r2, #0
 8022c74:	d100      	bne.n	8022c78 <_printf_i+0x24>
 8022c76:	e0be      	b.n	8022df6 <_printf_i+0x1a2>
 8022c78:	497c      	ldr	r1, [pc, #496]	; (8022e6c <_printf_i+0x218>)
 8022c7a:	9103      	str	r1, [sp, #12]
 8022c7c:	2a58      	cmp	r2, #88	; 0x58
 8022c7e:	d100      	bne.n	8022c82 <_printf_i+0x2e>
 8022c80:	e093      	b.n	8022daa <_printf_i+0x156>
 8022c82:	0026      	movs	r6, r4
 8022c84:	3642      	adds	r6, #66	; 0x42
 8022c86:	7032      	strb	r2, [r6, #0]
 8022c88:	e022      	b.n	8022cd0 <_printf_i+0x7c>
 8022c8a:	0010      	movs	r0, r2
 8022c8c:	3863      	subs	r0, #99	; 0x63
 8022c8e:	2815      	cmp	r0, #21
 8022c90:	d8f7      	bhi.n	8022c82 <_printf_i+0x2e>
 8022c92:	f7e3 faa3 	bl	80061dc <__gnu_thumb1_case_shi>
 8022c96:	0016      	.short	0x0016
 8022c98:	fff6001f 	.word	0xfff6001f
 8022c9c:	fff6fff6 	.word	0xfff6fff6
 8022ca0:	001ffff6 	.word	0x001ffff6
 8022ca4:	fff6fff6 	.word	0xfff6fff6
 8022ca8:	fff6fff6 	.word	0xfff6fff6
 8022cac:	003600a3 	.word	0x003600a3
 8022cb0:	fff60083 	.word	0xfff60083
 8022cb4:	00b4fff6 	.word	0x00b4fff6
 8022cb8:	0036fff6 	.word	0x0036fff6
 8022cbc:	fff6fff6 	.word	0xfff6fff6
 8022cc0:	0087      	.short	0x0087
 8022cc2:	0026      	movs	r6, r4
 8022cc4:	681a      	ldr	r2, [r3, #0]
 8022cc6:	3642      	adds	r6, #66	; 0x42
 8022cc8:	1d11      	adds	r1, r2, #4
 8022cca:	6019      	str	r1, [r3, #0]
 8022ccc:	6813      	ldr	r3, [r2, #0]
 8022cce:	7033      	strb	r3, [r6, #0]
 8022cd0:	2301      	movs	r3, #1
 8022cd2:	e0a2      	b.n	8022e1a <_printf_i+0x1c6>
 8022cd4:	6818      	ldr	r0, [r3, #0]
 8022cd6:	6809      	ldr	r1, [r1, #0]
 8022cd8:	1d02      	adds	r2, r0, #4
 8022cda:	060d      	lsls	r5, r1, #24
 8022cdc:	d50b      	bpl.n	8022cf6 <_printf_i+0xa2>
 8022cde:	6805      	ldr	r5, [r0, #0]
 8022ce0:	601a      	str	r2, [r3, #0]
 8022ce2:	2d00      	cmp	r5, #0
 8022ce4:	da03      	bge.n	8022cee <_printf_i+0x9a>
 8022ce6:	232d      	movs	r3, #45	; 0x2d
 8022ce8:	9a04      	ldr	r2, [sp, #16]
 8022cea:	426d      	negs	r5, r5
 8022cec:	7013      	strb	r3, [r2, #0]
 8022cee:	4b5f      	ldr	r3, [pc, #380]	; (8022e6c <_printf_i+0x218>)
 8022cf0:	270a      	movs	r7, #10
 8022cf2:	9303      	str	r3, [sp, #12]
 8022cf4:	e01b      	b.n	8022d2e <_printf_i+0xda>
 8022cf6:	6805      	ldr	r5, [r0, #0]
 8022cf8:	601a      	str	r2, [r3, #0]
 8022cfa:	0649      	lsls	r1, r1, #25
 8022cfc:	d5f1      	bpl.n	8022ce2 <_printf_i+0x8e>
 8022cfe:	b22d      	sxth	r5, r5
 8022d00:	e7ef      	b.n	8022ce2 <_printf_i+0x8e>
 8022d02:	680d      	ldr	r5, [r1, #0]
 8022d04:	6819      	ldr	r1, [r3, #0]
 8022d06:	1d08      	adds	r0, r1, #4
 8022d08:	6018      	str	r0, [r3, #0]
 8022d0a:	062e      	lsls	r6, r5, #24
 8022d0c:	d501      	bpl.n	8022d12 <_printf_i+0xbe>
 8022d0e:	680d      	ldr	r5, [r1, #0]
 8022d10:	e003      	b.n	8022d1a <_printf_i+0xc6>
 8022d12:	066d      	lsls	r5, r5, #25
 8022d14:	d5fb      	bpl.n	8022d0e <_printf_i+0xba>
 8022d16:	680d      	ldr	r5, [r1, #0]
 8022d18:	b2ad      	uxth	r5, r5
 8022d1a:	4b54      	ldr	r3, [pc, #336]	; (8022e6c <_printf_i+0x218>)
 8022d1c:	2708      	movs	r7, #8
 8022d1e:	9303      	str	r3, [sp, #12]
 8022d20:	2a6f      	cmp	r2, #111	; 0x6f
 8022d22:	d000      	beq.n	8022d26 <_printf_i+0xd2>
 8022d24:	3702      	adds	r7, #2
 8022d26:	0023      	movs	r3, r4
 8022d28:	2200      	movs	r2, #0
 8022d2a:	3343      	adds	r3, #67	; 0x43
 8022d2c:	701a      	strb	r2, [r3, #0]
 8022d2e:	6863      	ldr	r3, [r4, #4]
 8022d30:	60a3      	str	r3, [r4, #8]
 8022d32:	2b00      	cmp	r3, #0
 8022d34:	db03      	blt.n	8022d3e <_printf_i+0xea>
 8022d36:	2104      	movs	r1, #4
 8022d38:	6822      	ldr	r2, [r4, #0]
 8022d3a:	438a      	bics	r2, r1
 8022d3c:	6022      	str	r2, [r4, #0]
 8022d3e:	2d00      	cmp	r5, #0
 8022d40:	d102      	bne.n	8022d48 <_printf_i+0xf4>
 8022d42:	9e04      	ldr	r6, [sp, #16]
 8022d44:	2b00      	cmp	r3, #0
 8022d46:	d00c      	beq.n	8022d62 <_printf_i+0x10e>
 8022d48:	9e04      	ldr	r6, [sp, #16]
 8022d4a:	0028      	movs	r0, r5
 8022d4c:	0039      	movs	r1, r7
 8022d4e:	f7e3 fad5 	bl	80062fc <__aeabi_uidivmod>
 8022d52:	9b03      	ldr	r3, [sp, #12]
 8022d54:	3e01      	subs	r6, #1
 8022d56:	5c5b      	ldrb	r3, [r3, r1]
 8022d58:	7033      	strb	r3, [r6, #0]
 8022d5a:	002b      	movs	r3, r5
 8022d5c:	0005      	movs	r5, r0
 8022d5e:	429f      	cmp	r7, r3
 8022d60:	d9f3      	bls.n	8022d4a <_printf_i+0xf6>
 8022d62:	2f08      	cmp	r7, #8
 8022d64:	d109      	bne.n	8022d7a <_printf_i+0x126>
 8022d66:	6823      	ldr	r3, [r4, #0]
 8022d68:	07db      	lsls	r3, r3, #31
 8022d6a:	d506      	bpl.n	8022d7a <_printf_i+0x126>
 8022d6c:	6862      	ldr	r2, [r4, #4]
 8022d6e:	6923      	ldr	r3, [r4, #16]
 8022d70:	429a      	cmp	r2, r3
 8022d72:	dc02      	bgt.n	8022d7a <_printf_i+0x126>
 8022d74:	2330      	movs	r3, #48	; 0x30
 8022d76:	3e01      	subs	r6, #1
 8022d78:	7033      	strb	r3, [r6, #0]
 8022d7a:	9b04      	ldr	r3, [sp, #16]
 8022d7c:	1b9b      	subs	r3, r3, r6
 8022d7e:	6123      	str	r3, [r4, #16]
 8022d80:	9b07      	ldr	r3, [sp, #28]
 8022d82:	0021      	movs	r1, r4
 8022d84:	9300      	str	r3, [sp, #0]
 8022d86:	9805      	ldr	r0, [sp, #20]
 8022d88:	9b06      	ldr	r3, [sp, #24]
 8022d8a:	aa09      	add	r2, sp, #36	; 0x24
 8022d8c:	f7ff fef2 	bl	8022b74 <_printf_common>
 8022d90:	3001      	adds	r0, #1
 8022d92:	d147      	bne.n	8022e24 <_printf_i+0x1d0>
 8022d94:	2001      	movs	r0, #1
 8022d96:	4240      	negs	r0, r0
 8022d98:	b00b      	add	sp, #44	; 0x2c
 8022d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d9c:	2220      	movs	r2, #32
 8022d9e:	6809      	ldr	r1, [r1, #0]
 8022da0:	430a      	orrs	r2, r1
 8022da2:	6022      	str	r2, [r4, #0]
 8022da4:	2278      	movs	r2, #120	; 0x78
 8022da6:	4932      	ldr	r1, [pc, #200]	; (8022e70 <_printf_i+0x21c>)
 8022da8:	9103      	str	r1, [sp, #12]
 8022daa:	0021      	movs	r1, r4
 8022dac:	3145      	adds	r1, #69	; 0x45
 8022dae:	700a      	strb	r2, [r1, #0]
 8022db0:	6819      	ldr	r1, [r3, #0]
 8022db2:	6822      	ldr	r2, [r4, #0]
 8022db4:	c920      	ldmia	r1!, {r5}
 8022db6:	0610      	lsls	r0, r2, #24
 8022db8:	d402      	bmi.n	8022dc0 <_printf_i+0x16c>
 8022dba:	0650      	lsls	r0, r2, #25
 8022dbc:	d500      	bpl.n	8022dc0 <_printf_i+0x16c>
 8022dbe:	b2ad      	uxth	r5, r5
 8022dc0:	6019      	str	r1, [r3, #0]
 8022dc2:	07d3      	lsls	r3, r2, #31
 8022dc4:	d502      	bpl.n	8022dcc <_printf_i+0x178>
 8022dc6:	2320      	movs	r3, #32
 8022dc8:	4313      	orrs	r3, r2
 8022dca:	6023      	str	r3, [r4, #0]
 8022dcc:	2710      	movs	r7, #16
 8022dce:	2d00      	cmp	r5, #0
 8022dd0:	d1a9      	bne.n	8022d26 <_printf_i+0xd2>
 8022dd2:	2220      	movs	r2, #32
 8022dd4:	6823      	ldr	r3, [r4, #0]
 8022dd6:	4393      	bics	r3, r2
 8022dd8:	6023      	str	r3, [r4, #0]
 8022dda:	e7a4      	b.n	8022d26 <_printf_i+0xd2>
 8022ddc:	681a      	ldr	r2, [r3, #0]
 8022dde:	680d      	ldr	r5, [r1, #0]
 8022de0:	1d10      	adds	r0, r2, #4
 8022de2:	6949      	ldr	r1, [r1, #20]
 8022de4:	6018      	str	r0, [r3, #0]
 8022de6:	6813      	ldr	r3, [r2, #0]
 8022de8:	062e      	lsls	r6, r5, #24
 8022dea:	d501      	bpl.n	8022df0 <_printf_i+0x19c>
 8022dec:	6019      	str	r1, [r3, #0]
 8022dee:	e002      	b.n	8022df6 <_printf_i+0x1a2>
 8022df0:	066d      	lsls	r5, r5, #25
 8022df2:	d5fb      	bpl.n	8022dec <_printf_i+0x198>
 8022df4:	8019      	strh	r1, [r3, #0]
 8022df6:	2300      	movs	r3, #0
 8022df8:	9e04      	ldr	r6, [sp, #16]
 8022dfa:	6123      	str	r3, [r4, #16]
 8022dfc:	e7c0      	b.n	8022d80 <_printf_i+0x12c>
 8022dfe:	681a      	ldr	r2, [r3, #0]
 8022e00:	1d11      	adds	r1, r2, #4
 8022e02:	6019      	str	r1, [r3, #0]
 8022e04:	6816      	ldr	r6, [r2, #0]
 8022e06:	2100      	movs	r1, #0
 8022e08:	0030      	movs	r0, r6
 8022e0a:	6862      	ldr	r2, [r4, #4]
 8022e0c:	f000 f845 	bl	8022e9a <memchr>
 8022e10:	2800      	cmp	r0, #0
 8022e12:	d001      	beq.n	8022e18 <_printf_i+0x1c4>
 8022e14:	1b80      	subs	r0, r0, r6
 8022e16:	6060      	str	r0, [r4, #4]
 8022e18:	6863      	ldr	r3, [r4, #4]
 8022e1a:	6123      	str	r3, [r4, #16]
 8022e1c:	2300      	movs	r3, #0
 8022e1e:	9a04      	ldr	r2, [sp, #16]
 8022e20:	7013      	strb	r3, [r2, #0]
 8022e22:	e7ad      	b.n	8022d80 <_printf_i+0x12c>
 8022e24:	0032      	movs	r2, r6
 8022e26:	6923      	ldr	r3, [r4, #16]
 8022e28:	9906      	ldr	r1, [sp, #24]
 8022e2a:	9805      	ldr	r0, [sp, #20]
 8022e2c:	9d07      	ldr	r5, [sp, #28]
 8022e2e:	47a8      	blx	r5
 8022e30:	3001      	adds	r0, #1
 8022e32:	d0af      	beq.n	8022d94 <_printf_i+0x140>
 8022e34:	6823      	ldr	r3, [r4, #0]
 8022e36:	079b      	lsls	r3, r3, #30
 8022e38:	d415      	bmi.n	8022e66 <_printf_i+0x212>
 8022e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e3c:	68e0      	ldr	r0, [r4, #12]
 8022e3e:	4298      	cmp	r0, r3
 8022e40:	daaa      	bge.n	8022d98 <_printf_i+0x144>
 8022e42:	0018      	movs	r0, r3
 8022e44:	e7a8      	b.n	8022d98 <_printf_i+0x144>
 8022e46:	0022      	movs	r2, r4
 8022e48:	2301      	movs	r3, #1
 8022e4a:	9906      	ldr	r1, [sp, #24]
 8022e4c:	9805      	ldr	r0, [sp, #20]
 8022e4e:	9e07      	ldr	r6, [sp, #28]
 8022e50:	3219      	adds	r2, #25
 8022e52:	47b0      	blx	r6
 8022e54:	3001      	adds	r0, #1
 8022e56:	d09d      	beq.n	8022d94 <_printf_i+0x140>
 8022e58:	3501      	adds	r5, #1
 8022e5a:	68e3      	ldr	r3, [r4, #12]
 8022e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022e5e:	1a9b      	subs	r3, r3, r2
 8022e60:	42ab      	cmp	r3, r5
 8022e62:	dcf0      	bgt.n	8022e46 <_printf_i+0x1f2>
 8022e64:	e7e9      	b.n	8022e3a <_printf_i+0x1e6>
 8022e66:	2500      	movs	r5, #0
 8022e68:	e7f7      	b.n	8022e5a <_printf_i+0x206>
 8022e6a:	46c0      	nop			; (mov r8, r8)
 8022e6c:	08024a18 	.word	0x08024a18
 8022e70:	08024a29 	.word	0x08024a29

08022e74 <memmove>:
 8022e74:	b510      	push	{r4, lr}
 8022e76:	4288      	cmp	r0, r1
 8022e78:	d902      	bls.n	8022e80 <memmove+0xc>
 8022e7a:	188b      	adds	r3, r1, r2
 8022e7c:	4298      	cmp	r0, r3
 8022e7e:	d303      	bcc.n	8022e88 <memmove+0x14>
 8022e80:	2300      	movs	r3, #0
 8022e82:	e007      	b.n	8022e94 <memmove+0x20>
 8022e84:	5c8b      	ldrb	r3, [r1, r2]
 8022e86:	5483      	strb	r3, [r0, r2]
 8022e88:	3a01      	subs	r2, #1
 8022e8a:	d2fb      	bcs.n	8022e84 <memmove+0x10>
 8022e8c:	bd10      	pop	{r4, pc}
 8022e8e:	5ccc      	ldrb	r4, [r1, r3]
 8022e90:	54c4      	strb	r4, [r0, r3]
 8022e92:	3301      	adds	r3, #1
 8022e94:	429a      	cmp	r2, r3
 8022e96:	d1fa      	bne.n	8022e8e <memmove+0x1a>
 8022e98:	e7f8      	b.n	8022e8c <memmove+0x18>

08022e9a <memchr>:
 8022e9a:	b2c9      	uxtb	r1, r1
 8022e9c:	1882      	adds	r2, r0, r2
 8022e9e:	4290      	cmp	r0, r2
 8022ea0:	d101      	bne.n	8022ea6 <memchr+0xc>
 8022ea2:	2000      	movs	r0, #0
 8022ea4:	4770      	bx	lr
 8022ea6:	7803      	ldrb	r3, [r0, #0]
 8022ea8:	428b      	cmp	r3, r1
 8022eaa:	d0fb      	beq.n	8022ea4 <memchr+0xa>
 8022eac:	3001      	adds	r0, #1
 8022eae:	e7f6      	b.n	8022e9e <memchr+0x4>

08022eb0 <_realloc_r>:
 8022eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022eb2:	0007      	movs	r7, r0
 8022eb4:	000e      	movs	r6, r1
 8022eb6:	0014      	movs	r4, r2
 8022eb8:	2900      	cmp	r1, #0
 8022eba:	d105      	bne.n	8022ec8 <_realloc_r+0x18>
 8022ebc:	0011      	movs	r1, r2
 8022ebe:	f7ff fb09 	bl	80224d4 <_malloc_r>
 8022ec2:	0005      	movs	r5, r0
 8022ec4:	0028      	movs	r0, r5
 8022ec6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022ec8:	2a00      	cmp	r2, #0
 8022eca:	d103      	bne.n	8022ed4 <_realloc_r+0x24>
 8022ecc:	f7ff fca6 	bl	802281c <_free_r>
 8022ed0:	0025      	movs	r5, r4
 8022ed2:	e7f7      	b.n	8022ec4 <_realloc_r+0x14>
 8022ed4:	f000 f81b 	bl	8022f0e <_malloc_usable_size_r>
 8022ed8:	9001      	str	r0, [sp, #4]
 8022eda:	4284      	cmp	r4, r0
 8022edc:	d803      	bhi.n	8022ee6 <_realloc_r+0x36>
 8022ede:	0035      	movs	r5, r6
 8022ee0:	0843      	lsrs	r3, r0, #1
 8022ee2:	42a3      	cmp	r3, r4
 8022ee4:	d3ee      	bcc.n	8022ec4 <_realloc_r+0x14>
 8022ee6:	0021      	movs	r1, r4
 8022ee8:	0038      	movs	r0, r7
 8022eea:	f7ff faf3 	bl	80224d4 <_malloc_r>
 8022eee:	1e05      	subs	r5, r0, #0
 8022ef0:	d0e8      	beq.n	8022ec4 <_realloc_r+0x14>
 8022ef2:	9b01      	ldr	r3, [sp, #4]
 8022ef4:	0022      	movs	r2, r4
 8022ef6:	429c      	cmp	r4, r3
 8022ef8:	d900      	bls.n	8022efc <_realloc_r+0x4c>
 8022efa:	001a      	movs	r2, r3
 8022efc:	0031      	movs	r1, r6
 8022efe:	0028      	movs	r0, r5
 8022f00:	f7ff fc82 	bl	8022808 <memcpy>
 8022f04:	0031      	movs	r1, r6
 8022f06:	0038      	movs	r0, r7
 8022f08:	f7ff fc88 	bl	802281c <_free_r>
 8022f0c:	e7da      	b.n	8022ec4 <_realloc_r+0x14>

08022f0e <_malloc_usable_size_r>:
 8022f0e:	1f0b      	subs	r3, r1, #4
 8022f10:	681b      	ldr	r3, [r3, #0]
 8022f12:	1f18      	subs	r0, r3, #4
 8022f14:	2b00      	cmp	r3, #0
 8022f16:	da01      	bge.n	8022f1c <_malloc_usable_size_r+0xe>
 8022f18:	580b      	ldr	r3, [r1, r0]
 8022f1a:	18c0      	adds	r0, r0, r3
 8022f1c:	4770      	bx	lr
	...

08022f20 <_init>:
 8022f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f22:	46c0      	nop			; (mov r8, r8)
 8022f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f26:	bc08      	pop	{r3}
 8022f28:	469e      	mov	lr, r3
 8022f2a:	4770      	bx	lr

08022f2c <_fini>:
 8022f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f2e:	46c0      	nop			; (mov r8, r8)
 8022f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f32:	bc08      	pop	{r3}
 8022f34:	469e      	mov	lr, r3
 8022f36:	4770      	bx	lr

08022f38 <__FLASH_Program_Fast_veneer>:
 8022f38:	b401      	push	{r0}
 8022f3a:	4802      	ldr	r0, [pc, #8]	; (8022f44 <__FLASH_Program_Fast_veneer+0xc>)
 8022f3c:	4684      	mov	ip, r0
 8022f3e:	bc01      	pop	{r0}
 8022f40:	4760      	bx	ip
 8022f42:	bf00      	nop
 8022f44:	20000245 	.word	0x20000245

Disassembly of section .data:

20000000 <USBPD_Trace>:
20000000:	0800150f                                ....

20000004 <encoderPress>:
20000004:	00000002                                ....

20000008 <val>:
20000008:	0000000a                                ....

2000000c <voltage>:
2000000c:	0000014a                                J...

20000010 <voltageTemp>:
20000010:	0000014a                                J...

20000014 <voltageMin>:
20000014:	0000014a                                J...

20000018 <voltageMax>:
20000018:	00000834                                4...

2000001c <current>:
2000001c:	000003e8                                ....

20000020 <currentOCP>:
20000020:	000003e8                                ....

20000024 <dac_value>:
20000024:	000001f4                                ....

20000028 <currentTemp>:
20000028:	000003e8                                ....

2000002c <currentOCPTemp>:
2000002c:	000003e8                                ....

20000030 <currentMax>:
20000030:	00000bb8                                ....

20000034 <currentState>:
20000034:	00000001                                ....

20000038 <SYMBOLS>:
20000038:	796d307e 705f5b33 4f017b7f 00670e37     ~0my3[_p.{.O7.g.

20000048 <SystemCoreClock>:
20000048:	00f42400                                .$..

2000004c <uwTickPrio>:
2000004c:	00000004                                ....

20000050 <uwTickFreq>:
20000050:	00000001                                ....

20000054 <USBD_CDC_DeviceQualifierDesc>:
20000054:	0200060a 40000000 00000001              .......@....

20000060 <USBD_CDC>:
20000060:	080149e9 08014c09 08014d29 00000000     .I...L..)M......
20000070:	080150bd 08014f19 08015037 00000000     .P...O..7P......
	...
20000088:	080151d9 08015149 08015269 080152f9     .Q..IQ..iR...R..

20000098 <USBD_CDC_CfgDesc>:
20000098:	00430209 c0000102 00040932 02020100     ..C.....2.......
200000a8:	24050001 05011000 01000124 02022404     ...$....$....$..
200000b8:	00062405 82050701 10000803 00010409     .$..............
200000c8:	00000a02 01050700 00004002 02810507     .........@......
200000d8:	                                         @..

200000db <CDCInEpAdd>:
200000db:	                                         .

200000dc <CDCOutEpAdd>:
200000dc:	                                         .

200000dd <CDCCmdEpAdd>:
200000dd:	                                         ...

200000e0 <uxCriticalNesting>:
200000e0:	aaaaaaaa                                ....

200000e4 <DPM_Settings>:
200000e4:	00000001 00000002 00000000              ............

200000f0 <DPM_ID_Settings>:
200000f0:	f0000003 00020483                       ........

200000f8 <DPM_USER_Settings>:
200000f8:	0000000c 00000000 00000000 00000000     ................
	...

2000016c <USBPD_NbPDO>:
2000016c:	00000003                                ....

20000170 <PORT0_PDO_ListSNK>:
20000170:	00019096 0002d096 0603c096 00000000     ................
	...

2000018c <USBD_Interface_fops_FS>:
2000018c:	0801c815 0801c845 0801c851 0801c889     ....E...Q.......
2000019c:	0801c8b5                                ....

200001a0 <CDC_Desc>:
200001a0:	0801c8d9 0801c8fd 0801c965 0801c921     ........e...!...
200001b0:	0801c991 0801c9b9 0801c9fd 00000000     ................

200001c0 <USBD_CDC_DeviceDesc>:
200001c0:	02000112 40000202 57400483 02010200     .......@..@W....
200001d0:	00000103                                ....

200001d4 <USBD_LangIDDesc>:
200001d4:	04090304                                ....

200001d8 <USBD_StringSerial>:
200001d8:	0000031a 00000000 00000000 00000000     ................
	...

200001f4 <_impure_data>:
200001f4:	00000000 20005000 20005068 200050d0     .....P. hP. .P. 
	...

20000240 <_impure_ptr>:
20000240:	200001f4                                ... 

20000244 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000244:	b580      	push	{r7, lr}
20000246:	b088      	sub	sp, #32
20000248:	af00      	add	r7, sp, #0
2000024a:	6078      	str	r0, [r7, #4]
2000024c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000024e:	231f      	movs	r3, #31
20000250:	18fb      	adds	r3, r7, r3
20000252:	2200      	movs	r2, #0
20000254:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000256:	687b      	ldr	r3, [r7, #4]
20000258:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000025a:	683b      	ldr	r3, [r7, #0]
2000025c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000025e:	4b1a      	ldr	r3, [pc, #104]	; (200002c8 <FLASH_Program_Fast+0x84>)
20000260:	695a      	ldr	r2, [r3, #20]
20000262:	4b19      	ldr	r3, [pc, #100]	; (200002c8 <FLASH_Program_Fast+0x84>)
20000264:	2180      	movs	r1, #128	; 0x80
20000266:	02c9      	lsls	r1, r1, #11
20000268:	430a      	orrs	r2, r1
2000026a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000026c:	f3ef 8310 	mrs	r3, PRIMASK
20000270:	60fb      	str	r3, [r7, #12]
  return(result);
20000272:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000276:	b672      	cpsid	i
}
20000278:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000027a:	e00f      	b.n	2000029c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000027c:	697a      	ldr	r2, [r7, #20]
2000027e:	69bb      	ldr	r3, [r7, #24]
20000280:	6812      	ldr	r2, [r2, #0]
20000282:	601a      	str	r2, [r3, #0]
    src += 4U;
20000284:	697b      	ldr	r3, [r7, #20]
20000286:	3304      	adds	r3, #4
20000288:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000028a:	69bb      	ldr	r3, [r7, #24]
2000028c:	3304      	adds	r3, #4
2000028e:	61bb      	str	r3, [r7, #24]
    index++;
20000290:	211f      	movs	r1, #31
20000292:	187b      	adds	r3, r7, r1
20000294:	781a      	ldrb	r2, [r3, #0]
20000296:	187b      	adds	r3, r7, r1
20000298:	3201      	adds	r2, #1
2000029a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000029c:	231f      	movs	r3, #31
2000029e:	18fb      	adds	r3, r7, r3
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	2b3f      	cmp	r3, #63	; 0x3f
200002a4:	d9ea      	bls.n	2000027c <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200002a6:	46c0      	nop			; (mov r8, r8)
200002a8:	4b07      	ldr	r3, [pc, #28]	; (200002c8 <FLASH_Program_Fast+0x84>)
200002aa:	691a      	ldr	r2, [r3, #16]
200002ac:	23c0      	movs	r3, #192	; 0xc0
200002ae:	029b      	lsls	r3, r3, #10
200002b0:	4013      	ands	r3, r2
200002b2:	d1f9      	bne.n	200002a8 <FLASH_Program_Fast+0x64>
200002b4:	693b      	ldr	r3, [r7, #16]
200002b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b8:	68bb      	ldr	r3, [r7, #8]
200002ba:	f383 8810 	msr	PRIMASK, r3
}
200002be:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b008      	add	sp, #32
200002c6:	bd80      	pop	{r7, pc}
200002c8:	40022000 	.word	0x40022000
